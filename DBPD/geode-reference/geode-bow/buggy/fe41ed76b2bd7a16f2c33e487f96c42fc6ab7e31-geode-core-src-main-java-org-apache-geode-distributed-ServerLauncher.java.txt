GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import org.apache.geode.internal.cache.InternalCache;
+  @Deprecated
+  @Deprecated
-  private volatile transient boolean debug;
+  private volatile boolean debug;
-  private final transient ControlNotificationHandler controlHandler;
+  private final ControlNotificationHandler controlHandler;
-  private volatile transient Cache cache;
+  private volatile Cache cache;
-  private final transient CacheConfig cacheConfig;
+  private final CacheConfig cacheConfig;
-  private volatile transient String statusMessage;
+  private volatile String statusMessage;
-  private volatile transient ControllableProcess process;
+  private volatile ControllableProcess process;
-  private final transient ServerControllerParameters controllerParameters;
+  private final ServerControllerParameters controllerParameters;
-   * @see AbstractLauncher#getMemberName()
+  @Override
-      info(StringUtils.wrap("> java ... " + getClass().getName() + " " + usageMap.get(command), 80,
+      info(StringUtils.wrap("> java ... " + getClass().getName() + ' ' + usageMap.get(command), 80,
-        info(StringUtils.wrap("--" + option + ": " + helpMap.get(option) + "\n", 80, "\t"));
+        info(StringUtils.wrap("--" + option + ": " + helpMap.get(option) + '\n', 80, "\t"));
-  public void waitOnServer() {
+  void waitOnServer() {
-  protected boolean isAssignBucketsAllowed(final Cache cache) {
-    return (isAssignBuckets() && (cache instanceof GemFireCacheImpl));
+  private boolean isAssignBucketsAllowed(final Cache cache) {
+    return isAssignBuckets() && cache instanceof GemFireCacheImpl;
-  final void assignBuckets(final Cache cache) {
+  private void assignBuckets(final Cache cache) {
-      for (PartitionedRegion region : ((GemFireCacheImpl) cache).getPartitionedRegions()) {
+      for (PartitionedRegion region : ((InternalCache) cache).getPartitionedRegions()) {
-    return (isRunning() && getCache() != null);
+    return isRunning() && getCache() != null;
-      } catch (MalformedObjectNameException e) {
-        return null;
-      } catch (NullPointerException e) {
+      } catch (MalformedObjectNameException | NullPointerException ignore) {
-    protected void parseArguments(final String... args) {
+    void parseArguments(final String... args) {
-        parseMemberName(args); // TODO:KIRK: need to get the name to LogService for log file name
+        parseMemberName(args);
-    protected void validateOnStart() {
-      if (Command.START.equals(getCommand())) {
+    void validateOnStart() {
+      if (Command.START == getCommand()) {
-    protected void validateOnStatus() {
-      if (Command.STATUS.equals(getCommand())) {
+    void validateOnStatus() {
+      if (Command.STATUS == getCommand()) {
-    protected void validateOnStop() {
-      if (Command.STOP.equals(getCommand())) {
+    void validateOnStop() {
+      if (Command.STOP == getCommand()) {
-  public static enum Command {
+  public enum Command {
-      final GemFireCacheImpl gemfireCache = GemFireCacheImpl.getInstance();
+      final InternalCache internalCache = GemFireCacheImpl.getInstance();
-      if (gemfireCache != null) {
-        final List<CacheServer> csList = gemfireCache.getCacheServers();
+      if (internalCache != null) {
+        final List<CacheServer> csList = internalCache.getCacheServers();
-      final GemFireCacheImpl gemfireCache = GemFireCacheImpl.getInstance();
+      final InternalCache internalCache = GemFireCacheImpl.getInstance();
-      if (gemfireCache != null) {
-        final List<CacheServer> csList = gemfireCache.getCacheServers();
+      if (internalCache != null) {
+        final List<CacheServer> csList = internalCache.getCacheServers();
