add class LuceneIndexImpl and its subclasses
and fixed TopEntriesFuncionCollectorJUnitTest

+import com.gemstone.gemfire.cache.GemFireCache;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.internal.cache.PartitionedRegion;
-
-  public String getUniqueIndexName(String indexName, String regionName) {
-    String name = indexName + "#" + regionName.replace('/', '_');
+  
+  public static String getUniqueIndexName(String indexName, String regionPath) {
+    String name = indexName + "#" + regionPath.replace('/', '_');
-  public LuceneIndex createIndex(String indexName, String regionName, String... fields) {
-    // TODO Auto-generated method stub
-    return null;
+  public LuceneIndex createIndex(String indexName, String regionPath, String... fields) {
+    Region dataregion = this.cache.getRegion(regionPath);
+    if (dataregion == null) {
+      cache.getLogger().info("Data region "+regionPath+" not found");
+      return null;
+    }
+    LuceneIndexImpl index = null;
+    if (dataregion instanceof PartitionedRegion) {
+      // partitioned region
+      index = new LuceneIndexForPartitionedRegion(indexName, regionPath, cache);
+      for (String field:fields) {
+        index.addSearchableField(field);
+        index.addSearchablePDXField(field);
+      }
+      registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    } else {
+      // replicated region
+      index = new LuceneIndexForReplicatedRegion(indexName, regionPath, cache);
+      registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    }
+    // TODO add fields
+    return index;
-  public LuceneIndex getIndex(String indexName, String regionName) {
-    return indexMap.get(getUniqueIndexName(indexName, regionName));
+  public LuceneIndex getIndex(String indexName, String regionPath) {
+    return indexMap.get(getUniqueIndexName(indexName, regionPath));
-  public LuceneIndex createIndex(String indexName, String regionName, Map<String, Analyzer> analyzerPerField) {
+  public LuceneIndex createIndex(String indexName, String regionPath, Map<String, Analyzer> analyzerPerField) {
-    indexMap.remove(getUniqueIndexName(index.getName(), index.getRegionName()));
-    indexImpl.close();
+    indexMap.remove(getUniqueIndexName(index.getName(), index.getRegionPath()));
+//    indexImpl.close();
+  
+  public void registerIndex(final String regionAndIndex, LuceneIndex index){
+    if( !indexMap.containsKey( regionAndIndex )) {
+      indexMap.put(regionAndIndex, index);
+    }
+  }
+
+  public void unregisterIndex(final String region){
+    if( indexMap.containsKey( region )) indexMap.remove( region );
+  }
