GEODE-2420: Resolve conflicts with recent checkin

Use InternalCache instead of GemnFireCachImpl.

Refactored product and tests
- Combined LogExporter and LogSizer.
- Remove classes no longer needed

-import java.text.ParseException;
+import java.util.Collections;
-   * @throws ParseException
-  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile)
-      throws ParseException {
+  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile) {
-   * @throws IOException
-  protected List<Path> findLogFiles(Path workingDir) throws IOException {
+  /**
+   * @return combined size of stat archives and filtered log files in bytes
+   */
+  public long estimateFilteredSize() throws IOException {
+    long filteredSize = 0;
+    if (baseLogFile != null) {
+      for (Path logFile : findLogFiles(baseLogFile.toPath().getParent())) {
+        filteredSize += filterAndSize(logFile);
+      }
+    }
+
+    if (baseStatsFile != null) {
+      for (Path statFile : findStatFiles(baseStatsFile.toPath().getParent())) {
+        filteredSize += statFile.toFile().length();
+      }
+    }
+
+    return filteredSize;
+  }
+
+  /**
+   * @return size of file in bytes
+   */
+  private long filterAndSize(Path originalLogFile) throws IOException {
+    long size = 0;
+    this.logFilter.startNewFile();
+
+    try (BufferedReader reader = new BufferedReader(new FileReader(originalLogFile.toFile()))) {
+      String line;
+      while ((line = reader.readLine()) != null) {
+        LogFilter.LineFilterResult result = this.logFilter.acceptsLine(line);
+
+        if (result == LogFilter.LineFilterResult.REMAINDER_OF_FILE_REJECTED) {
+          break;
+        }
+        if (result == LogFilter.LineFilterResult.LINE_ACCEPTED) {
+          size += line.length() + File.separator.length();
+        }
+      }
+    }
+    return size;
+  }
+
+  List<Path> findLogFiles(Path workingDir) throws IOException {
-  protected List<Path> findStatFiles(Path workingDir) throws IOException {
+  List<Path> findStatFiles(Path workingDir) throws IOException {
-    Stream<Path> selectedFiles =
-        Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);
+    Stream<Path> selectedFiles/* = null */;
+    if (!workingDir.toFile().isDirectory()) {
+      return Collections.emptyList();
+    }
+    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);
-
-
