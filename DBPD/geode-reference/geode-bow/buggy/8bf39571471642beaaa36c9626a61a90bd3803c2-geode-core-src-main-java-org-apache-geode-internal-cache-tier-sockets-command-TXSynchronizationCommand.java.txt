Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.tier.sockets.BaseCommand#shouldMasqueradeForTx(org.apache.geode.internal.cache.tier.sockets.Message, org.apache.geode.internal.cache.tier.sockets.ServerConnection)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.tier.sockets.BaseCommand#shouldMasqueradeForTx(org.apache.geode
+   * .internal.cache.tier.sockets.Message,
+   * org.apache.geode.internal.cache.tier.sockets.ServerConnection)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.tier.sockets.BaseCommand#cmdExecute(org.apache.geode.internal.cache.tier.sockets.Message, org.apache.geode.internal.cache.tier.sockets.ServerConnection, long)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.tier.sockets.BaseCommand#cmdExecute(org.apache.geode.internal.
+   * cache.tier.sockets.Message, org.apache.geode.internal.cache.tier.sockets.ServerConnection,
+   * long)
-    
+
-    /*int txIdInt =*/ msg.getPart(1).getInt();  // [bruce] not sure if we need to transmit this
+    /* int txIdInt = */ msg.getPart(1).getInt(); // [bruce] not sure if we need to transmit this
-    
-    final TXManagerImpl txMgr = (TXManagerImpl)servConn.getCache().getCacheTransactionManager();
-    final InternalDistributedMember member = (InternalDistributedMember)servConn.getProxyID().getDistributedMember();
-    // get the tx state without associating it with this thread.  That's done later
+    final TXManagerImpl txMgr = (TXManagerImpl) servConn.getCache().getCacheTransactionManager();
+    final InternalDistributedMember member =
+        (InternalDistributedMember) servConn.getProxyID().getDistributedMember();
+
+    // get the tx state without associating it with this thread. That's done later
-    
+
-                @SuppressWarnings("synthetic-access")
-                public void run() {
-                  TXStateProxy txState = null;
-                  Throwable failureException = null;
-                  try {
-                    txState = txMgr.masqueradeAs(msg, member, false);
-                    if (isDebugEnabled) {
-                      logger.debug("Executing beforeCompletion() notification for transaction {}", msg.getTransactionId());
-                    }
-                    txState.setIsJTA(true);
-                    txState.beforeCompletion();
-                    try {
-                      writeReply(msg, servConn);
-                    } catch (IOException e) {
-                      if (isDebugEnabled) {
-                        logger.debug("Problem writing reply to client", e);
-                      }
-                    }
-                    servConn.setAsTrue(RESPONDED);
-                  } catch (ReplyException e) {
-                    failureException = e.getCause();
-                  } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt();
-                  } catch (Exception e) {
-                    failureException = e;
-                  } finally {
-                    txMgr.unmasquerade(txState);
-                  }
-                  if (failureException != null) {
-                    try {
-                      writeException(msg, failureException, false, servConn);
-                    } catch (IOException ioe) {
-                      if (isDebugEnabled) {
-                        logger.debug("Problem writing reply to client", ioe);
-                      }
-                    }
-                    servConn.setAsTrue(RESPONDED);
+            @SuppressWarnings("synthetic-access")
+            public void run() {
+              TXStateProxy txState = null;
+              Throwable failureException = null;
+              try {
+                txState = txMgr.masqueradeAs(msg, member, false);
+                if (isDebugEnabled) {
+                  logger.debug("Executing beforeCompletion() notification for transaction {}",
+                      msg.getTransactionId());
+                }
+                txState.setIsJTA(true);
+                txState.beforeCompletion();
+                try {
+                  writeReply(msg, servConn);
+                } catch (IOException e) {
+                  if (isDebugEnabled) {
+                    logger.debug("Problem writing reply to client", e);
-              };
+                servConn.setAsTrue(RESPONDED);
+              } catch (ReplyException e) {
+                failureException = e.getCause();
+              } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+              } catch (Exception e) {
+                failureException = e;
+              } finally {
+                txMgr.unmasquerade(txState);
+              }
+              if (failureException != null) {
+                try {
+                  writeException(msg, failureException, false, servConn);
+                } catch (IOException ioe) {
+                  if (isDebugEnabled) {
+                    logger.debug("Problem writing reply to client", ioe);
+                  }
+                }
+                servConn.setAsTrue(RESPONDED);
+              }
+            }
+          };
-          Executor exec = InternalDistributedSystem.getConnectedInstance().getDistributionManager().getWaitingThreadPool();
+          Executor exec = InternalDistributedSystem.getConnectedInstance().getDistributionManager()
+              .getWaitingThreadPool();
-                @SuppressWarnings("synthetic-access")
-                public void run() {
-                  TXStateProxy txState = null;
-                  try {
-                    txState = txMgr.masqueradeAs(msg, member, false);
-                    int status = statusPart.getInt();
-                    if (isDebugEnabled) {
-                      logger.debug("Executing afterCompletion({}) notification for transaction {}", status, msg.getTransactionId());
-                    }
-                    txState.setIsJTA(true);
-                    txState.afterCompletion(status);
-                    // GemFire commits during afterCompletion - send the commit info back to the client
-                    // where it can be applied to the local cache
-                    TXCommitMessage cmsg = txState.getCommitMessage();
-                    try {
-                      CommitCommand.writeCommitResponse(cmsg, msg, servConn);
-                      txMgr.removeHostedTXState(txState.getTxId());
-                    } catch (IOException e) {
-                      // not much can be done here
-                      if (isDebugEnabled || (e instanceof MessageTooLargeException)) {
-                        logger.warn("Problem writing reply to client", e);
-                      }
-                    }
-                    servConn.setAsTrue(RESPONDED);
-                  } catch (RuntimeException e) {
-                    try {
-                      writeException(msg, e, false, servConn);
-                    } catch (IOException ioe) {
-                      if (isDebugEnabled) {
-                        logger.debug("Problem writing reply to client", ioe);
-                      }
-                    }
-                    servConn.setAsTrue(RESPONDED);
-                  } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt();
-                  } finally {
-                    txMgr.unmasquerade(txState);
+            @SuppressWarnings("synthetic-access")
+            public void run() {
+              TXStateProxy txState = null;
+              try {
+                txState = txMgr.masqueradeAs(msg, member, false);
+                int status = statusPart.getInt();
+                if (isDebugEnabled) {
+                  logger.debug("Executing afterCompletion({}) notification for transaction {}",
+                      status, msg.getTransactionId());
+                }
+                txState.setIsJTA(true);
+                txState.afterCompletion(status);
+                // GemFire commits during afterCompletion - send the commit info back to the client
+                // where it can be applied to the local cache
+                TXCommitMessage cmsg = txState.getCommitMessage();
+                try {
+                  CommitCommand.writeCommitResponse(cmsg, msg, servConn);
+                  txMgr.removeHostedTXState(txState.getTxId());
+                } catch (IOException e) {
+                  // not much can be done here
+                  if (isDebugEnabled || (e instanceof MessageTooLargeException)) {
+                    logger.warn("Problem writing reply to client", e);
-              };
+                servConn.setAsTrue(RESPONDED);
+              } catch (RuntimeException e) {
+                try {
+                  writeException(msg, e, false, servConn);
+                } catch (IOException ioe) {
+                  if (isDebugEnabled) {
+                    logger.debug("Problem writing reply to client", ioe);
+                  }
+                }
+                servConn.setAsTrue(RESPONDED);
+              } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+              } finally {
+                txMgr.unmasquerade(txState);
+              }
+            }
+          };
-          // sitting in the waiting pool to execute afterCompletion.  Otherwise
+          // sitting in the waiting pool to execute afterCompletion. Otherwise
-                  logger.debug("Executing beforeCompletion() notification for transaction {} after failover", msg.getTransactionId());
+                  logger.debug(
+                      "Executing beforeCompletion() notification for transaction {} after failover",
+                      msg.getTransactionId());
