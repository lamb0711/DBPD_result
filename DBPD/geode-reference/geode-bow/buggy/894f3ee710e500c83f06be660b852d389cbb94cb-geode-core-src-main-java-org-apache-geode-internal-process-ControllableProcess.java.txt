GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

+import static org.apache.commons.lang.Validate.notNull;
+
- * Exists inside a process launched by ServerLauncher or LocatorLauncher. Creates the PID file and
- * ControlFileWatchdogs to monitor working directory for creation of stop or status request files.
+ * Creates the {@link PidFile} and uses {@link ControlFileWatchdog} to monitor the directory for
+ * creation of stop or status request files.
-  private final File workingDir;
-  private final File pidFile;
+  private final File directory;
-  public ControllableProcess(final ControlNotificationHandler handler, final File workingDir,
-      final ProcessType processType, boolean force)
+  public ControllableProcess(final ControlNotificationHandler handler, final File directory,
+      final ProcessType processType, final boolean force)
-    this.workingDir = workingDir;
-    this.pidFile = new File(this.workingDir, processType.getPidFileName());
+    this(directory, processType, force, createPidFile(directory, processType),
+        createStopHandler(handler), createStatusHandler(handler, directory, processType));
+  }
-    deleteFiles(this.workingDir, processType);
+  private ControllableProcess(final File directory, final ProcessType processType,
+      final boolean force, final File pidFile, final ControlRequestHandler stopHandler,
+      final ControlRequestHandler statusHandler)
+      throws FileAlreadyExistsException, IOException, PidUnavailableException {
+    this(directory, processType, createLocalProcessLauncher(pidFile, force),
+        createStopRequestFileWatchdog(directory, processType, stopHandler),
+        createStatusRequestFileWatchdog(directory, processType, statusHandler));
+  }
-    this.launcher = new LocalProcessLauncher(this.pidFile, force);
+  ControllableProcess(final File directory, final ProcessType processType,
+      final LocalProcessLauncher launcher, final ControlFileWatchdog stopRequestFileWatchdog,
+      final ControlFileWatchdog statusRequestFileWatchdog) {
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notNull(processType, "Invalid processType '" + processType + "' specified");
+    notNull(launcher, "Invalid launcher '" + launcher + "' specified");
+    notNull(stopRequestFileWatchdog,
+        "Invalid stopRequestFileWatchdog '" + stopRequestFileWatchdog + "' specified");
+    notNull(statusRequestFileWatchdog,
+        "Invalid statusRequestFileWatchdog '" + statusRequestFileWatchdog + "' specified");
-    final ControlRequestHandler stopHandler = new ControlRequestHandler() {
-      @Override
-      public void handleRequest() {
-        handler.handleStop();
-      }
-    };
-    final ControlRequestHandler statusHandler = new ControlRequestHandler() {
-      @Override
-      public void handleRequest() throws IOException {
-        final ServiceState<?> state = handler.handleStatus();
-        final File statusFile = new File(workingDir, processType.getStatusFileName());
-        if (statusFile.exists()) {
-          statusFile.delete();
-        }
-        final File statusFileTmp = new File(workingDir, processType.getStatusFileName() + ".tmp");
-        if (statusFileTmp.exists()) {
-          statusFileTmp.delete();
-        }
-        boolean created = statusFileTmp.createNewFile();
-        assert created;
-        final FileWriter writer = new FileWriter(statusFileTmp);
-        writer.write(state.toJson());
-        writer.flush();
-        writer.close();
-        boolean renamed = statusFileTmp.renameTo(statusFile);
-        assert renamed;
-      }
-    };
+    this.directory = directory;
+    this.launcher = launcher;
+    this.stopRequestFileWatchdog = stopRequestFileWatchdog;
+    this.statusRequestFileWatchdog = statusRequestFileWatchdog;
-    this.stopRequestFileWatchdog = new ControlFileWatchdog(workingDir,
-        processType.getStopRequestFileName(), stopHandler, false);
-    this.stopRequestFileWatchdog.start();
-    this.statusRequestFileWatchdog = new ControlFileWatchdog(workingDir,
-        processType.getStatusRequestFileName(), statusHandler, false);
-    this.statusRequestFileWatchdog.start();
+    deleteFiles(directory, processType);
+    stopRequestFileWatchdog.start();
+    statusRequestFileWatchdog.start();
-    return this.launcher.getPid();
+    return launcher.getPid();
-    return this.launcher.getPidFile();
+    return launcher.getPidFile();
+  }
+
+  public File getDirectory() {
+    return directory;
+    boolean interrupted = false;
-      this.statusRequestFileWatchdog.stop();
-    } catch (InterruptedException e) {
-      logger.warn("Interrupted while stopping status handler for controllable process.", e);
+      interrupted = stop(statusRequestFileWatchdog);
+      interrupted = stop(stopRequestFileWatchdog) || interrupted;
+      launcher.close();
-      try {
-        this.stopRequestFileWatchdog.stop();
-      } catch (InterruptedException e) {
-        logger.warn("Interrupted while stopping stop handler for controllable process.", e);
+      if (interrupted) {
+        Thread.currentThread().interrupt();
-      this.launcher.close();
-  protected File getWorkingDir() {
-    return this.workingDir;
+  public void stop(final boolean deletePidFileOnStop) {
+    boolean interrupted = false;
+    try {
+      interrupted = stop(statusRequestFileWatchdog);
+      interrupted = stop(stopRequestFileWatchdog) || interrupted;
+      launcher.close(deletePidFileOnStop);
+    } finally {
+      if (interrupted) {
+        Thread.currentThread().interrupt();
+      }
+    }
-  private static void deleteFiles(final File workingDir, final ProcessType processType) {
-    deleteFile(workingDir, processType.getStatusRequestFileName());
-    deleteFile(workingDir, processType.getStatusFileName());
-    deleteFile(workingDir, processType.getStopRequestFileName());
+  private boolean stop(final ControlFileWatchdog fileWatchdog) {
+    boolean interrupted = false;
+    try {
+      fileWatchdog.stop();
+    } catch (InterruptedException e) {
+      interrupted = true;
+      logger.warn("Interrupted while stopping status handler for controllable process.", e);
+    }
+    return interrupted;
-  private static void deleteFile(final File workingDir, final String fileName) {
-    final File file = new File(workingDir, fileName);
+  private void deleteFiles(final File directory, final ProcessType processType) {
+    deleteFile(directory, processType.getStatusRequestFileName());
+    deleteFile(directory, processType.getStatusFileName());
+    deleteFile(directory, processType.getStopRequestFileName());
+  }
+
+  private void deleteFile(final File directory, final String fileName) {
+    File file = new File(directory, fileName);
+
+  private static File createPidFile(final File directory, final ProcessType processType) {
+    return new File(directory, processType.getPidFileName());
+  }
+
+  private static LocalProcessLauncher createLocalProcessLauncher(final File pidFile,
+      final boolean force) throws FileAlreadyExistsException, IOException, PidUnavailableException {
+    return new LocalProcessLauncher(pidFile, force);
+  }
+
+  private static ControlRequestHandler createStopHandler(final ControlNotificationHandler handler) {
+    return handler::handleStop;
+  }
+
+  private static ControlRequestHandler createStatusHandler(final ControlNotificationHandler handler,
+      final File directory, final ProcessType processType) {
+    return () -> {
+      ServiceState<?> state = handler.handleStatus();
+
+      File statusFile = new File(directory, processType.getStatusFileName());
+      if (statusFile.exists()) {
+        boolean deleted = statusFile.delete();
+        assert deleted;
+      }
+
+      File statusFileTmp = new File(directory, processType.getStatusFileName() + ".tmp");
+      if (statusFileTmp.exists()) {
+        boolean deleted = statusFileTmp.delete();
+        assert deleted;
+      }
+
+      boolean created = statusFileTmp.createNewFile();
+      assert created;
+
+      FileWriter writer = new FileWriter(statusFileTmp);
+      writer.write(state.toJson());
+      writer.flush();
+      writer.close();
+
+      boolean renamed = statusFileTmp.renameTo(statusFile);
+      assert renamed;
+    };
+  }
+
+  private static ControlFileWatchdog createStopRequestFileWatchdog(final File directory,
+      final ProcessType processType, final ControlRequestHandler stopHandler) {
+    return new ControlFileWatchdog(directory, processType.getStopRequestFileName(), stopHandler,
+        false);
+  }
+
+  private static ControlFileWatchdog createStatusRequestFileWatchdog(final File directory,
+      final ProcessType processType, final ControlRequestHandler statusHandler) {
+    return new ControlFileWatchdog(directory, processType.getStatusRequestFileName(), statusHandler,
+        false);
+  }
