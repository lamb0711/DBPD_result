GEODE-2402: Write to the lucene region buckets using a callback argument

Adding a callback argument when writing to the file and chunk regions.
The file and chunk regions now have a partition listener to
route the put to the correct bucket.

The reason for all of this is that in some cases, the core code can can
send a message that only includes the PR id and the key. We need want
the core to be able to resolve the correct bucket from just those
things, which requires having the PartitionListener that uses the
callback argument.

Added a test of putting to the file and chunk regions during GII, which
is the case where the core code sends a message that includes only the
PR id and the key.

+import java.util.Map;
+import org.apache.geode.cache.lucene.internal.partition.BucketTargetingMap;
-    BucketRegion fileBucket = getMatchingBucket(indexForPR.getFileRegion(), bucketId);
-    BucketRegion chunkBucket = getMatchingBucket(indexForPR.getChunkRegion(), bucketId);
+    final PartitionedRegion fileRegion = indexForPR.getFileRegion();
+    final PartitionedRegion chunkRegion = indexForPR.getChunkRegion();
+
+    BucketRegion fileBucket = getMatchingBucket(fileRegion, bucketId);
+    BucketRegion chunkBucket = getMatchingBucket(chunkRegion, bucketId);
-    if (!fileBucket.getBucketAdvisor().isPrimary()) {
+    if (!chunkBucket.getBucketAdvisor().isPrimary()) {
-      if (!fileBucket.getBucketAdvisor().isPrimary()) {
+      if (!chunkBucket.getBucketAdvisor().isPrimary()) {
-      RegionDirectory dir =
-          new RegionDirectory(fileBucket, chunkBucket, indexForPR.getFileSystemStats());
+      RegionDirectory dir = new RegionDirectory(getBucketTargetingMap(fileBucket, bucketId),
+          getBucketTargetingMap(chunkBucket, bucketId), indexForPR.getFileSystemStats());
+  private Map getBucketTargetingMap(BucketRegion region, int bucketId) {
+    return new BucketTargetingMap(region, bucketId);
+  }
+
-    return FILE_REGION_LOCK_FOR_BUCKET_ID + fileBucket.getFullPath() + bucketId;
+    return FILE_REGION_LOCK_FOR_BUCKET_ID + fileBucket.getFullPath();
