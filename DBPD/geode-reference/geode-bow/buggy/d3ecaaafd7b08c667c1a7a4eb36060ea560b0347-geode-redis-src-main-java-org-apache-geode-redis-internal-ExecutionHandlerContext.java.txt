GEODE-7778: Add PUBLISH, SUBSCRIBE and UNSUBSCRIBE Redis commands (#4682)

Redis PUBLISH/SUBSCRIBE is described here: https://redis.io/topics/pubsub

This implementation introduces 3 new command classes to support this:
`SubscribeExecutor`, `PublishExecutor` and `UnsubscribeExecutor`. At a high
level, the flow is as follows:
- A Redis client issues a SUBSCRIBE command. The server maintains a list of
  subscribed clients and associate channel(s) in the `Subscribers` class. A
  subscribed `Client` uses Netty's notion of a `uniqueID` to identify itself
  uniquely.
- When a client PUBLISHes a message on a channel, the publish 'event' uses an
  `onMembers` function call to distribute the channel/message to all members.
  Each member then publishes the message to any `Client`s registered on the
  channel.

Points to note:
Redis pub/sub is not HA. i.e. A subscriber only receives those messages
published after it has successfully subscribed. If the client is disconnected
and reconnects, it will not receive messages published during the disconnect
window.

When clients subscribe, an open connection is established to the server and the
client blocks waiting for messages.

This implementation does not require messages to be published on the same
server to which the clients, executing subscribe, are connected since the
published message is distributed to all servers.


Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Prasath Durairaj <vdurairaj@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
+import io.netty.channel.ChannelFuture;
+import org.apache.logging.log4j.Logger;
-import org.apache.geode.LogWriter;
+import org.apache.geode.logging.internal.log4j.api.LogService;
+  private static final Logger logger = LogService.getLogger();
-  private final LogWriter logger;
-  private KeyRegistrar keyRegistrar;
+  private final KeyRegistrar keyRegistrar;
+  private final PubSub pubSub;
+
+  public PubSub getPubSub() {
+    return pubSub;
+  }
-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar) {
+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub) {
+    this.pubSub = pubSub;
-    this.logger = cache.getLogger();
-  private void writeToChannel(ByteBuf message) {
-    channel.write(message, channel.voidPromise());
+  public ChannelFuture writeToChannel(ByteBuf message) {
+    ChannelFuture channelFuture = channel.write(message, channel.newPromise());
+
+
+    return channelFuture;
+    logger.info("Executing Redis command: {}", command);
-      if (this.logger.errorEnabled())
-        this.logger.error("GeodeRedisServer-Unexpected error handler for " + ctx.channel(), cause);
+      if (logger.isErrorEnabled()) {
+        logger.error("GeodeRedisServer-Unexpected error handler for " + ctx.channel(), cause);
+      }
-    if (logger.fineEnabled())
-      logger.fine("GeodeRedisServer-Connection closing with " + ctx.channel().remoteAddress());
+    if (logger.isDebugEnabled()) {
+      logger.debug("GeodeRedisServer-Connection closing with " + ctx.channel().remoteAddress());
+    }
-   * Getter for logger
-   *
-   */
-  public LogWriter getLogger() {
-    return this.cache.getLogger();
-  }
-
-  /**
+
+  public Client getClient() {
+    return new Client(channel);
+  }
+
