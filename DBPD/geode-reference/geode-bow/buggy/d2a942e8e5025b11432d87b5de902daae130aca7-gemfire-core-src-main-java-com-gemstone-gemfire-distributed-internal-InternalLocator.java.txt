jgroups source is now removed from asf branch GEODE-77 and is a downloaded dependency.  Able to start/stop a locator and a server via gfsh but there is no HA or authentication in the membership system.

-import java.util.ArrayList;
-import java.util.List;
-import java.util.ServiceLoader;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorDiscovery;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorHelper;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorJoinMessage;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorMembershipListenerImpl;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorResponse;
-import com.gemstone.gemfire.cache.wan.GatewaySenderFactory;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMember;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.LocatorImpl;
+import com.gemstone.gemfire.distributed.internal.membership.gms.locator.GMSLocator;
+import com.gemstone.gemfire.distributed.internal.membership.gms.locator.PeerLocatorRequest;
-import com.gemstone.org.jgroups.Address;
-import com.gemstone.org.jgroups.JChannel;
-import com.gemstone.org.jgroups.stack.GossipData;
-import com.gemstone.org.jgroups.stack.GossipServer;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorDiscovery;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorHelper;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorJoinMessage;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorMembershipListenerImpl;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinRequest;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinResponse;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingRequest;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingResponse;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorRequest;
+//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorResponse;
-  /** the gossip server used for peer location */
-  private LocatorImpl locatorImpl;
+  /** the TcpHandler used for peer location */
+  private GMSLocator locatorImpl;
-      this.stateFile = new File("locator" + port + "state.dat");
+      this.stateFile = new File("locator" + port + "view.dat");
-    GemFireTracer tracer = GemFireTracer.getLog(InternalLocator.class);
-    tracer.setLogWriter(logWriter);
-    tracer.setSecurityLogWriter(securityLogWriter);
-    tracer.setLogger(LogService.getLogger(GemFireTracer.class));
-    
-    // install gemfire serialization and socket functions into jgroups
-    JChannel.setDefaultGFFunctions(new GFJGBasicAdapter());
-    this.locatorImpl = new LocatorImpl(port, EXPIRY_MS,
-        this.bindAddress, this.stateFile, locatorsProp, locatorsAreCoordinators,
-        networkPartitionDetectionEnabled, withDS
-        );
-    this.handler.addHandler(GossipData.class, this.locatorImpl);
+    this.locatorImpl = new GMSLocator(port, this.bindAddress, this.stateFile,
+        locatorsProp, locatorsAreCoordinators, networkPartitionDetectionEnabled);
+    this.handler.addHandler(PeerLocatorRequest.class, this.locatorImpl);
-  public LocatorImpl getLocatorHandler() {
+  public GMSLocator getLocatorHandler() {
-      if (getLocatorHandler() != null) {
-        // let the GossipServer know the system's address so they can start
-        // servicing requests
-        Address addr = ((JGroupMember)existing.getDistributedMember().getNetMember()).getAddress();
-        getLocatorHandler().setLocalAddress(addr);
-      }
-      // don't set the ds variable, so it won't be closed by the locator shutting down
-     
+        if (peerLocator) {
+          this.locatorImpl.setMembershipManager(myDs.getDM().getMembershipManager());
+        }
+        
-      TcpHandler handler = (TcpHandler)handlerMapping.get(request.getClass());
+      TcpHandler handler = null;
+      if (request instanceof PeerLocatorRequest) {
+        handler = (TcpHandler)handlerMapping.get(PeerLocatorRequest.class);
+      }
+      else {
+        handler = (TcpHandler)handlerMapping.get(request.getClass());
+      }
+      
-      else {
+      else {  
