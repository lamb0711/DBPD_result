Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * @return true if successful execution
-   *         false in case of failure.
+   * @return true if successful execution false in case of failure.
-  protected boolean processQuery(Message msg, Query query,
-      String queryString, Set regionNames, long start, ServerCQ cqQuery,
-      QueryOperationContext queryContext, ServerConnection servConn, 
-      boolean sendResults)
-      throws IOException, InterruptedException {
-    return processQueryUsingParams(msg, query, queryString,
-        regionNames, start, cqQuery, queryContext, servConn, sendResults, null);
+  protected boolean processQuery(Message msg, Query query, String queryString, Set regionNames,
+      long start, ServerCQ cqQuery, QueryOperationContext queryContext, ServerConnection servConn,
+      boolean sendResults) throws IOException, InterruptedException {
+    return processQueryUsingParams(msg, query, queryString, regionNames, start, cqQuery,
+        queryContext, servConn, sendResults, null);
-  
+
-   * @return true if successful execution
-   *         false in case of failure.
+   * @return true if successful execution false in case of failure.
-  protected boolean processQueryUsingParams(Message msg, Query query,
-      String queryString, Set regionNames, long start, ServerCQ cqQuery,
-      QueryOperationContext queryContext, ServerConnection servConn, 
-      boolean sendResults, Object[] params)
+  protected boolean processQueryUsingParams(Message msg, Query query, String queryString,
+      Set regionNames, long start, ServerCQ cqQuery, QueryOperationContext queryContext,
+      ServerConnection servConn, boolean sendResults, Object[] params)
-    
+
-      for(Object regionName:regionNames){
+      for (Object regionName : regionNames) {
-      
+
-      //Asif : Before conditioning the results check if any
-      //of the regions involved in the query have been destroyed
-      //or not. If yes, throw an Exception.
-      //This is a workaround/fix for Bug 36969
+      // Asif : Before conditioning the results check if any
+      // of the regions involved in the query have been destroyed
+      // or not. If yes, throw an Exception.
+      // This is a workaround/fix for Bug 36969
-      while(itr.hasNext()) {
-        String regionName = (String)itr.next();
-        if(crHelper.getRegion(regionName) == null) {
+      while (itr.hasNext()) {
+        String regionName = (String) itr.next();
+        if (crHelper.getRegion(regionName) == null) {
-              LocalizedStrings.BaseCommand_REGION_DESTROYED_DURING_THE_EXECUTION_OF_THE_QUERY.toLocalizedString(), regionName);
+              LocalizedStrings.BaseCommand_REGION_DESTROYED_DURING_THE_EXECUTION_OF_THE_QUERY
+                  .toLocalizedString(),
+              regionName);
-          queryContext = postAuthzRequest.queryAuthorize(queryString,
-              regionNames, result, queryContext, params);
-        }
-        else {
-          queryContext = postAuthzRequest.executeCQAuthorize(cqQuery.getName(),
-              queryString, regionNames, result, queryContext);
+          queryContext = postAuthzRequest.queryAuthorize(queryString, regionNames, result,
+              queryContext, params);
+        } else {
+          queryContext = postAuthzRequest.executeCQAuthorize(cqQuery.getName(), queryString,
+              regionNames, result, queryContext);
-        SelectResults selectResults = (SelectResults)result;
+        SelectResults selectResults = (SelectResults) result;
-          logger.debug("Query Result size for : {} is {}", query.getQueryString(), selectResults.size());
+          logger.debug("Query Result size for : {} is {}", query.getQueryString(),
+              selectResults.size());
-        boolean hasSerializedObjects = ((DefaultQuery) query)
-            .isKeepSerialized();
+        boolean hasSerializedObjects = ((DefaultQuery) query).isKeepSerialized();
-          logger.debug("Query Result for :{} has serialized objects: {}", query.getQueryString(), hasSerializedObjects);
+          logger.debug("Query Result for :{} has serialized objects: {}", query.getQueryString(),
+              hasSerializedObjects);
-        if (cqQuery != null){
+        if (cqQuery != null) {
-          if (sendCqResultsWithKey){
+          if (sendCqResultsWithKey) {
-                new StructTypeImpl(new String[]{"key", "value"}));
+                new StructTypeImpl(new String[] {"key", "value"}));
-        int numberOfChunks = (int)Math.ceil(selectResults.size() * 1.0
-            / maximumChunkSize);
+        int numberOfChunks = (int) Math.ceil(selectResults.size() * 1.0 / maximumChunkSize);
-        if(sendResults){
+        if (sendResults) {
-            logger.trace("{}: Creating chunk: 0", servConn.getName() );
+            logger.trace("{}: Creating chunk: 0", servConn.getName());
-            logger.debug("{}: Sent chunk (1 of 1) of query response for query {}", servConn.getName(), queryString);
+            logger.debug("{}: Sent chunk (1 of 1) of query response for query {}",
+                servConn.getName(), queryString);
-        }
-        else {
+        } else {
-            sendResultsAsObjectPartList(numberOfChunks, servConn,
-                selectResults.asList(), isStructs, collectionType,
-                queryString, cqQuery, sendCqResultsWithKey, sendResults);
+            sendResultsAsObjectPartList(numberOfChunks, servConn, selectResults.asList(), isStructs,
+                collectionType, queryString, cqQuery, sendCqResultsWithKey, sendResults);
-            sendResultsAsObjectArray(selectResults, numberOfChunks, servConn,
-                isStructs, collectionType, queryString, cqQuery, sendCqResultsWithKey, sendResults);
+            sendResultsAsObjectArray(selectResults, numberOfChunks, servConn, isStructs,
+                collectionType, queryString, cqQuery, sendCqResultsWithKey, sendResults);
-        if(cqQuery != null){
+        if (cqQuery != null) {
-      }
-      else if (result instanceof Integer) {
+      } else if (result instanceof Integer) {
-      }
-      else {
-        throw new QueryInvalidException(LocalizedStrings.BaseCommand_UNKNOWN_RESULT_TYPE_0.toLocalizedString(result.getClass()));
+      } else {
+        throw new QueryInvalidException(LocalizedStrings.BaseCommand_UNKNOWN_RESULT_TYPE_0
+            .toLocalizedString(result.getClass()));
-    }
-    catch (QueryInvalidException e) {
+    } catch (QueryInvalidException e) {
-        LocalizedStrings.BaseCommand_UNEXPECTED_QUERYINVALIDEXCEPTION_WHILE_PROCESSING_QUERY_0, queryString), e);
-      QueryInvalidException qie = new QueryInvalidException(LocalizedStrings.BaseCommand_0_QUERYSTRING_IS_1
-          .toLocalizedString(new Object[] {e.getLocalizedMessage(), queryString}));
+          LocalizedStrings.BaseCommand_UNEXPECTED_QUERYINVALIDEXCEPTION_WHILE_PROCESSING_QUERY_0,
+          queryString), e);
+      QueryInvalidException qie =
+          new QueryInvalidException(LocalizedStrings.BaseCommand_0_QUERYSTRING_IS_1
+              .toLocalizedString(new Object[] {e.getLocalizedMessage(), queryString}));
-    }
-    catch (DistributedSystemDisconnectedException se) {
+    } catch (DistributedSystemDisconnectedException se) {
-        logger.debug("{}: ignoring message of type {} from client {} because shutdown occurred during message processing.",
+        logger.debug(
+            "{}: ignoring message of type {} from client {} because shutdown occurred during message processing.",
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      DefaultQuery defaultQuery = (DefaultQuery)query;
-      if ((defaultQuery).isCanceled()){
+      DefaultQuery defaultQuery = (DefaultQuery) query;
+      if ((defaultQuery).isCanceled()) {
-    }  finally {
+    } finally {
-      //((DefaultQuery)query).setRemoteQuery(false);
+      // ((DefaultQuery)query).setRemoteQuery(false);
-  protected void sendCqResponse(int msgType, String msgStr, int txId,
-      Throwable e, ServerConnection servConn) throws IOException {
+  protected void sendCqResponse(int msgType, String msgStr, int txId, Throwable e,
+      ServerConnection servConn) throws IOException {
-    case MessageType.REPLY:
-      cqMsg.setNumberOfParts(1);
-      break;
+      case MessageType.REPLY:
+        cqMsg.setNumberOfParts(1);
+        break;
-    case MessageType.CQDATAERROR_MSG_TYPE:
-      logger.warn(msgStr);
-      cqMsg.setNumberOfParts(1);
-      break;
+      case MessageType.CQDATAERROR_MSG_TYPE:
+        logger.warn(msgStr);
+        cqMsg.setNumberOfParts(1);
+        break;
-    case MessageType.CQ_EXCEPTION_TYPE:
-      String exMsg = "";
-      if (e != null) {
-        exMsg = e.getLocalizedMessage();
-      }
-      logger.info(msgStr + exMsg, e);
+      case MessageType.CQ_EXCEPTION_TYPE:
+        String exMsg = "";
+        if (e != null) {
+          exMsg = e.getLocalizedMessage();
+        }
+        logger.info(msgStr + exMsg, e);
-      msgStr += exMsg; // fixes bug 42309
+        msgStr += exMsg; // fixes bug 42309
-      cqMsg.setNumberOfParts(1);
-      break;
+        cqMsg.setNumberOfParts(1);
+        break;
-    default:
-      msgType = MessageType.CQ_EXCEPTION_TYPE;
-      cqMsg.setNumberOfParts(1);
-      msgStr += LocalizedStrings.BaseCommand_UNKNOWN_QUERY_EXCEPTION.toLocalizedString();
-      break;
+      default:
+        msgType = MessageType.CQ_EXCEPTION_TYPE;
+        cqMsg.setNumberOfParts(1);
+        msgStr += LocalizedStrings.BaseCommand_UNKNOWN_QUERY_EXCEPTION.toLocalizedString();
+        break;
-  private void sendResultsAsObjectArray(SelectResults selectResults,
-      int numberOfChunks, ServerConnection servConn, 
-      boolean isStructs, CollectionType collectionType, String queryString, ServerCQ cqQuery, boolean sendCqResultsWithKey, boolean sendResults)
+  private void sendResultsAsObjectArray(SelectResults selectResults, int numberOfChunks,
+      ServerConnection servConn, boolean isStructs, CollectionType collectionType,
+      String queryString, ServerCQ cqQuery, boolean sendCqResultsWithKey, boolean sendResults)
-            logger.trace("{}: Adding entry [{}] to query results: {}", servConn.getName(), resultIndex, objs[resultIndex]);
+          logger.trace("{}: Adding entry [{}] to query results: {}", servConn.getName(),
+              resultIndex, objs[resultIndex]);
-        if (cqQuery != null){
-          CqEntry e = (CqEntry)objs[resultIndex];
+        if (cqQuery != null) {
+          CqEntry e = (CqEntry) objs[resultIndex];
-        writeQueryResponseChunk(results, collectionType,
-            (resultIndex == selectResults.size()), servConn);
+        writeQueryResponseChunk(results, collectionType, (resultIndex == selectResults.size()),
+            servConn);
-  private void sendResultsAsObjectPartList(int numberOfChunks,
-      ServerConnection servConn, List objs, boolean isStructs,
-      CollectionType collectionType, String queryString, ServerCQ cqQuery, boolean sendCqResultsWithKey, boolean sendResults)
-      throws IOException {
+  private void sendResultsAsObjectPartList(int numberOfChunks, ServerConnection servConn, List objs,
+      boolean isStructs, CollectionType collectionType, String queryString, ServerCQ cqQuery,
+      boolean sendCqResultsWithKey, boolean sendResults) throws IOException {
-      ObjectPartList serializedObjs = new ObjectPartList(maximumChunkSize,
-          false);
+      ObjectPartList serializedObjs = new ObjectPartList(maximumChunkSize, false);
-            logger.trace("{}: Adding entry [{}] to query results: {}", servConn.getName() , resultIndex, objs.get(resultIndex));
+          logger.trace("{}: Adding entry [{}] to query results: {}", servConn.getName(),
+              resultIndex, objs.get(resultIndex));
-        if (cqQuery != null){
-          CqEntry e = (CqEntry)objs.get(resultIndex);
+        if (cqQuery != null) {
+          CqEntry e = (CqEntry) objs.get(resultIndex);
-        }
-        else {
+        } else {
-          addToObjectPartList(serializedObjs, result, collectionType, false,
-              servConn, isStructs);
+          addToObjectPartList(serializedObjs, result, collectionType, false, servConn, isStructs);
-        writeQueryResponseChunk(serializedObjs, collectionType,
-            ((j + 1) == numberOfChunks), servConn);
+        writeQueryResponseChunk(serializedObjs, collectionType, ((j + 1) == numberOfChunks),
+            servConn);
-   }
+    }
-  private void addToObjectPartList(ObjectPartList serializedObjs,
-      Object res, CollectionType collectionType, boolean lastChunk,
-      ServerConnection servConn, boolean isStructs) throws IOException {
+  private void addToObjectPartList(ObjectPartList serializedObjs, Object res,
+      CollectionType collectionType, boolean lastChunk, ServerConnection servConn,
+      boolean isStructs) throws IOException {
-      ObjectPartList serializedValueObjs = new ObjectPartList(values.length,
-          false);
+      ObjectPartList serializedValueObjs = new ObjectPartList(values.length, false);
-      serializedObjs.addPart(null, serializedValueObjs, ObjectPartList.OBJECT,
-          null);
+      serializedObjs.addPart(null, serializedValueObjs, ObjectPartList.OBJECT, null);
-      ObjectPartList serializedValueObjs = new ObjectPartList(values.length,
-          false);
-      for(int i=0; i<values.length; i+=2) {
+      ObjectPartList serializedValueObjs = new ObjectPartList(values.length, false);
+      for (int i = 0; i < values.length; i += 2) {
-        Object value = values[i+1];
+        Object value = values[i + 1];
-      serializedObjs.addPart(null, serializedValueObjs, ObjectPartList.OBJECT,
-          null);
-    } else { //for deserialized objects
+      serializedObjs.addPart(null, serializedValueObjs, ObjectPartList.OBJECT, null);
+    } else { // for deserialized objects
-      object = ((CachedDeserializable)value).getSerializedValue();
-    }
-    else if(value instanceof byte[]){
+      object = ((CachedDeserializable) value).getSerializedValue();
+    } else if (value instanceof byte[]) {
-    if(key!=null){
+    if (key != null) {
-    objPartList.addPart(null, object, isObject?ObjectPartList.OBJECT:ObjectPartList.BYTES, null);
+    objPartList.addPart(null, object, isObject ? ObjectPartList.OBJECT : ObjectPartList.BYTES,
+        null);
