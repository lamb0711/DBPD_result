enabling multicast communications and fixing a locator auto-restart problem.
This disables the use of multicast for discovery and all tests that were
doing that have been changed to use locators.

+import static com.gemstone.gemfire.distributed.internal.DistributionManager.LOCATOR_DM_TYPE;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.INSTALL_VIEW_MESSAGE;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.JOIN_REQUEST;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.JOIN_RESPONSE;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.LEAVE_REQUEST_MESSAGE;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.REMOVE_MEMBER_MESSAGE;
+import static com.gemstone.gemfire.internal.DataSerializableFixedID.VIEW_ACK_MESSAGE;
+
-import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
+import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
-import com.gemstone.gemfire.internal.logging.LoggingThreadGroup;
-  private static final int JOIN_RETRY_SLEEP = Integer.getInteger("gemfire.join-retry-sleep", 3000);
+  private static final int JOIN_RETRY_SLEEP = Integer.getInteger("gemfire.join-retry-sleep", 1000);
-  private boolean isConnected;
+  /** have I connected to the distributed system? */
+  private boolean isJoined;
+  /** a synch object that guards view installation */
-  private ViewReplyProcessor viewResponses = new ViewReplyProcessor(false);
+  /** collects responses to new views */
+  private ViewReplyProcessor viewProcessor = new ViewReplyProcessor(false);
-  private ViewReplyProcessor prepareResponses = new ViewReplyProcessor(true);
+  /** collects responses to view preparation messages */
+  private ViewReplyProcessor prepareProcessor = new ViewReplyProcessor(true);
+  /** whether quorum checks can cause a forced-disconnect */
+  /** timeout in receiving view acknowledgement */
+  /** am I shutting down? */
+
+    if (this.localAddress.getVmKind() == LOCATOR_DM_TYPE
+        && Boolean.getBoolean("gemfire.first-member")) {
+      becomeCoordinator();
+      return true;
+    }
+
-    return this.isConnected;
+    return this.isJoined;
-    try {
-      services.getMessenger().send(req);
-    } catch (IOException e) {
-      throw new SystemConnectException("Exception caught while trying to join", e);
-    }
+
+    services.getMessenger().send(req);
+    
+  
-      try {
-        services.getMessenger().send(m);
-      } catch (IOException e) {
-        //ignore - the attempt has been logged and the member can't join
-      }
+      services.getMessenger().send(m);
-        try {
-          services.getMessenger().send(m);
-        } catch (IOException e2) {
-          logger.info("unable to send join response " + rejection + " to " + incomingRequest.getMemberID(), e2);
-        }
+        services.getMessenger().send(m);
-      logger.debug("JoinLeave: this member is becoming the membership coordinator with address {}", localAddress);
+      logger.info("This member is becoming the membership coordinator with address {}", localAddress);
-        isConnected = true;
+        isJoined = true;
-              Collections.EMPTY_LIST);
+              Collections.<InternalDistributedMember>emptyList());
-        sendView(newView);
+        sendView(newView, Collections.<InternalDistributedMember>emptyList());
-      try {
-        services.getMessenger().send(response);
-      } catch (IOException e) {
-        logger.info("unable to send join response to {}", mbr);
-      }
+      services.getMessenger().send(response);
-      try {
-        services.getMessenger().send(response);
-      } catch (IOException e) {
-        logger.info("unable to send remove message to {}", mbr);
-      }
+      services.getMessenger().send(response);
-  boolean prepareView(NetView view) {
-    return sendView(view, true, this.prepareResponses);
+  boolean prepareView(NetView view, Collection<InternalDistributedMember> newMembers) {
+    return sendView(view, newMembers, true, this.prepareProcessor);
-  void sendView(NetView view) {
-    sendView(view, false, this.viewResponses);
+  void sendView(NetView view, Collection<InternalDistributedMember> newMembers) {
+    sendView(view, newMembers, false, this.viewProcessor);
-  boolean sendView(NetView view, boolean preparing, ViewReplyProcessor rp) {
+  boolean sendView(NetView view, Collection<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp) {
+    recips.removeAll(newMembers); // new members get the view in a JoinResponseMessage
+    recips.remove(this.localAddress); // no need to send it to ourselves
+    installView(view);
+    if (recips.isEmpty()) {
+      return true;
+    }
-    logger.info("View Creator " + (preparing? "preparing" : "sending") + " new view " + view);
-    try {
-      services.getMessenger().send(msg);
-    }
-    catch (IOException e) {
-      logger.warn("Unsuccessful in installing new membership view", e);
-      return false;
-    }
+
+    logger.info((preparing? "preparing" : "sending") + " new view " + view);
+    services.getMessenger().send(msg);
-        try {
-          services.getMessenger().send(new ViewAckMessage(m.getSender(), this.preparedView));
-        } catch (IOException e) {
-          logger.info("unable to send view response to " + m.getSender(), e);
-        }
+        services.getMessenger().send(new ViewAckMessage(m.getSender(), this.preparedView));
-      try {
-        services.getMessenger().send(new ViewAckMessage(m.getSender(), m.getView().getViewId(), m.isPreparing()));
-      } catch (IOException e) {
-        logger.info("unable to send view response to " + m.getSender(), e);
-      }
+      services.getMessenger().send(new ViewAckMessage(m.getSender(), m.getView().getViewId(), m.isPreparing()));
-      this.prepareResponses.processViewResponse(m.getViewId(), m.getSender(), m.getAlternateView());
+      this.prepareProcessor.processViewResponse(m.getViewId(), m.getSender(), m.getAlternateView());
-      this.viewResponses.processViewResponse(m.getViewId(), m.getSender(), m.getAlternateView());
+      this.viewProcessor.processViewResponse(m.getViewId(), m.getSender(), m.getAlternateView());
-    if (locators == null) {
-      DistributionConfig dconfig = services.getConfig().getDistributionConfig();
-      String bindAddr = dconfig.getBindAddress();
-      locators = GMSUtil.parseLocators(dconfig.getLocators(), bindAddr);
-    }
-
-            GMSMember mbr = (GMSMember)this.localAddress.getNetMember();
-            services.getConfig().setNetworkPartitionDetectionEnabled(response.isNetworkPartitionDetectionEnabled());
-            if (response.isUsePreferredCoordinators()
-                && localAddress.getVmKind() != DistributionManager.LOCATOR_DM_TYPE) {
-              mbr.setPreferredForCoordinator(false);
+            if (response.isFromView()) {
+              GMSMember mbr = (GMSMember)this.localAddress.getNetMember();
+              services.getConfig().setNetworkPartitionDetectionEnabled(response.isNetworkPartitionDetectionEnabled());
+              if (response.isUsePreferredCoordinators()
+                  && localAddress.getVmKind() != DistributionManager.LOCATOR_DM_TYPE) {
+                mbr.setPreferredForCoordinator(false);
+              }
-        // get rid of outdated requests
+        // get rid of outdated requests.  It's possible some requests are
+        // newer than the view just processed - the senders will have to
+        // resend these
-    isConnected = false;
+    isJoined = false;
-            try {
-              services.getMessenger().send(m);
-              try { Thread.sleep(LEAVE_MESSAGE_SLEEP_TIME); }
-              catch (InterruptedException e) { Thread.currentThread().interrupt(); }
-            } catch (IOException e) {
-              logger.info("JoinLeave: unable to notify remaining members shutdown due to i/o exception", e);
-            }
+            services.getMessenger().send(m);
+            try { Thread.sleep(LEAVE_MESSAGE_SLEEP_TIME); }
+            catch (InterruptedException e) { Thread.currentThread().interrupt(); }
-            try {
-              services.getMessenger().send(m);
-            } catch (IOException e) {
-              logger.info("JoinLeave: unable to notify membership coordinator of shutdown due to i/o exception", e);
-            }
+            services.getMessenger().send(m);
-      try {
-        services.getMessenger().send(msg);
-      } catch (IOException e) {
-        logger.info("JoinLeave was unable to remove member " + m + " due to an i/o exception");
-      }
+      services.getMessenger().send(msg);
+    services.getMessenger().addHandler(JoinRequestMessage.class, this);
+    services.getMessenger().addHandler(JoinResponseMessage.class, this);
+    DistributionConfig dconfig = services.getConfig().getDistributionConfig();
+    String bindAddr = dconfig.getBindAddress();
+    locators = GMSUtil.parseLocators(dconfig.getLocators(), bindAddr);
-    if (m instanceof JoinRequestMessage) {
+    switch (m.getDSFID()) {
+    case JOIN_REQUEST:
-    } else if (m instanceof JoinResponseMessage) {
+      break;
+    case JOIN_RESPONSE:
-    } else if (m instanceof InstallViewMessage) {
+      break;
+    case INSTALL_VIEW_MESSAGE:
-    } else if (m instanceof ViewAckMessage) {
+      break;
+    case VIEW_ACK_MESSAGE:
-    } else if (m instanceof LeaveRequestMessage) {
+      break;
+    case LEAVE_REQUEST_MESSAGE:
-    } else if (m instanceof RemoveMemberMessage) {
+      break;
+    case REMOVE_MEMBER_MESSAGE:
-    } else {
+      break;
+    default:
+      this.conflictingView = null;
+
-        waitingFor.remove(sender);
-        if (waitingFor.isEmpty()) {
-          synchronized(waitingFor) {
+        synchronized(waitingFor) {
+          waitingFor.remove(sender);
+          if (waitingFor.isEmpty()) {
+            logger.debug("All view responses received - notifying waiting thread");
+
-      
+            logger.debug("Interrupted while waiting for view resonses");
+
-          prepared = prepareView(newView);
+          prepared = prepareView(newView, joinReqs);
-            Set<InternalDistributedMember> unresponsive = prepareResponses.getUnresponsiveMembers();
+            Set<InternalDistributedMember> unresponsive = prepareProcessor.getUnresponsiveMembers();
-            List<InternalDistributedMember> failures = new ArrayList<InternalDistributedMember>(currentView.getCrashedMembers().size() + unresponsive.size());
-            failures.addAll(unresponsive);
-            
-            NetView conflictingView = prepareResponses.getConflictingView();
-            if (conflictingView != null
-                && !conflictingView.getCreator().equals(localAddress)
-                && conflictingView.getViewId() > newView.getViewId()
-                && (lastConflictingView == null || conflictingView.getViewId() > lastConflictingView.getViewId())) {
-              lastConflictingView = conflictingView;
-              failures.addAll(conflictingView.getCrashedMembers());
-            }
-  
-            failures.removeAll(removalReqs);
-            if (failures.size() > 0) {
-              // abort the current view and try again
-              removalReqs.addAll(failures);
-              newView = new NetView(localAddress, newView.getViewId()+1, newView.getMembers(), leaveReqs,
-                  removalReqs);
+            if (!unresponsive.isEmpty()) {
+              List<InternalDistributedMember> failures = new ArrayList<InternalDistributedMember>(currentView.getCrashedMembers().size() + unresponsive.size());
+              failures.addAll(unresponsive);
+
+              NetView conflictingView = prepareProcessor.getConflictingView();
+              if (conflictingView != null
+                  && !conflictingView.getCreator().equals(localAddress)
+                  && conflictingView.getViewId() > newView.getViewId()
+                  && (lastConflictingView == null || conflictingView.getViewId() > lastConflictingView.getViewId())) {
+                lastConflictingView = conflictingView;
+                failures.addAll(conflictingView.getCrashedMembers());
+              }
+
+              failures.removeAll(removalReqs);
+              if (failures.size() > 0) {
+                // abort the current view and try again
+                removalReqs.addAll(failures);
+                newView = new NetView(localAddress, newView.getViewId()+1, newView.getMembers(), leaveReqs,
+                    removalReqs);
+              }
-      sendView(newView);
+      sendView(newView, joinReqs);
-              return null;
+              return fmbr;
-            return fmbr;
+            return null;
