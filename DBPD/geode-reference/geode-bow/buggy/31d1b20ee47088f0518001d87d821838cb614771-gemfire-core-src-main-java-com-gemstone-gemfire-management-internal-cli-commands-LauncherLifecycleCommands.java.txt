Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.OSProcess;
+import com.gemstone.gemfire.internal.process.NonBlockingProcessStreamReader;
+import com.gemstone.gemfire.internal.process.ProcessStreamReader.ReadingMode;
+import com.gemstone.gemfire.internal.process.ProcessUtils;
+import com.gemstone.gemfire.internal.util.StopWatch;
-
+  
+  private static final long PROCESS_STREAM_READER_JOIN_TIMEOUT_MILLIS = 30*1000;
+  private static final long PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS = 5*1000;
+  private static final long WAITING_FOR_STOP_TO_MAKE_PID_GO_AWAY_TIMEOUT_MILLIS = 30*1000;
+  private static final long WAITING_FOR_PID_FILE_TO_CONTAIN_PID_TIMEOUT_MILLIS = 2*1000;
+  
+      // read the OSProcess enable redirect system property here -- TODO: replace with new GFSH argument
+      final boolean redirectOutput = Boolean.getBoolean(OSProcess.ENABLE_OUTPUT_REDIRECTION_PROPERTY);
-        .setRedirectOutput(true)
+        .setRedirectOutput(redirectOutput)
-      Process locatorProcess = new ProcessBuilder(locatorCommandLine)
+      final Process locatorProcess = new ProcessBuilder(locatorCommandLine)
-      final StringBuffer message = new StringBuffer(); // need thread-safe StringBuffer
+      // fix TRAC bug #51967 by using NON_BLOCKING on Windows
+      final ReadingMode readingMode = SystemUtils.isWindows() ? ReadingMode.NON_BLOCKING : ReadingMode.BLOCKING;
-      ProcessStreamReader stderrReader = new ProcessStreamReader(locatorProcess.getErrorStream(),
-        new InputListener() {
-          @Override
-          public void notifyInputLine(String line) {
-            message.append(line).append(StringUtils.LINE_SEPARATOR);
+      final StringBuffer message = new StringBuffer(); // need thread-safe StringBuffer
+      InputListener inputListener = new InputListener() {
+        @Override
+        public void notifyInputLine(String line) {
+          message.append(line);
+          if (readingMode == ReadingMode.BLOCKING) {
+            message.append(StringUtils.LINE_SEPARATOR);
-        }).start();
+        }
+      };
+
+      ProcessStreamReader stderrReader = new ProcessStreamReader.Builder(locatorProcess)
+          .inputStream(locatorProcess.getErrorStream())
+          .inputListener(inputListener)
+          .readingMode(readingMode)
+          .continueReadingMillis(2*1000)
+          .build()
+          .start();
-            stderrReader.join(Long.MAX_VALUE);
+            stderrReader.join(PROCESS_STREAM_READER_JOIN_TIMEOUT_MILLIS); // was Long.MAX_VALUE
-            locatorState = (isAttachApiAvailable() ? locatorStatus(locatorPidFile, oldPid, memberName)
-              : locatorStatus(workingDirectory, memberName));
+            locatorState = (ProcessUtils.isAvailable() ? locatorStatus(locatorPidFile, oldPid, memberName)
+                : locatorStatus(workingDirectory, memberName));
-        stderrReader.stop();
-        locatorProcess.getErrorStream().close();
+        stderrReader.stopAsync(PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS); // stop will close ErrorStream
-        if (isAttachApiAvailable()) {
-          while (isVmWithProcessIdRunning(locatorState.getPid())) {
-            Gfsh.print(".");
-            synchronized (this) {
-              TimeUnit.MILLISECONDS.timedWait(this, 500);
-            }
+        StopWatch stopWatch = new StopWatch(true);
+        while (isVmWithProcessIdRunning(locatorState.getPid())) {
+          Gfsh.print(".");
+          if (stopWatch.elapsedTimeMillis() > WAITING_FOR_STOP_TO_MAKE_PID_GO_AWAY_TIMEOUT_MILLIS) {
+            break;
+          }
+          synchronized (this) {
+            TimeUnit.MILLISECONDS.timedWait(this, 500);
+      catch (NumberFormatException  ignore) {
+      }
-    for (VirtualMachineDescriptor vm : VirtualMachine.list()) {
-      if (String.valueOf(pid).equals(vm.id())) {
-        return true;
-      }
-    }
-
-    return false;
+    // note: this will use JNA if available or Attach if available or return false if neither is available
+    return ProcessUtils.isProcessAlive(pid);
+                            @CliOption(key = CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__CRITICAL__HEAP__HELP)
+                            final Float criticalHeapPercentage,
+                            @CliOption(key = CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__CRITICAL_OFF_HEAP__HELP)
+                            final Float criticalOffHeapPercentage,
+                            @CliOption(key = CliStrings.START_SERVER__DIR,
+                                       optionContext = ConverterHint.DIR_PATHSTRING,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__DIR__HELP)
+                            String workingDirectory,
+                            @CliOption(key = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE__HELP)
+                            final Float evictionHeapPercentage,
+                            @CliOption(key = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE__HELP)
+                            final Float evictionOffHeapPercentage,
+                            @CliOption(key = CliStrings.START_SERVER__GROUP,
+                                       optionContext = ConverterHint.MEMBERGROUP,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__GROUP__HELP)
+                            final String group,
+                            @CliOption(key = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS__HELP)
+                            final String hostNameForClients,
-                            @CliOption(key = CliStrings.START_SERVER__PROPERTIES,
-                                      optionContext = ConverterHint.FILE_PATHSTRING,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__PROPERTIES__HELP)
-                            String gemfirePropertiesPathname,
-                            @CliOption(key = CliStrings.START_SERVER__SECURITY_PROPERTIES,
-                                       optionContext = ConverterHint.FILE_PATHSTRING,
+                            @CliOption(key = CliStrings.START_SERVER__INITIAL_HEAP,
-                                       help = CliStrings.START_SERVER__SECURITY_PROPERTIES__HELP)
-                            String gemfireSecurityPropertiesPathname,
-                            @CliOption(key = CliStrings.START_SERVER__GROUP,
-                                      optionContext = ConverterHint.MEMBERGROUP,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__GROUP__HELP)
-                            final String group,
+                                       help = CliStrings.START_SERVER__INITIAL_HEAP__HELP)
+                            final String initialHeap,
+                            @CliOption(key = CliStrings.START_SERVER__J,
+                                       optionContext = ConverterHint.STRING_LIST,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__J__HELP)
+                            @CliMetaData(valueSeparator = ",")
+                            final String[] jvmArgsOpts, 
+                            @CliOption(key = CliStrings.START_SERVER__LOCK_MEMORY,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       specifiedDefaultValue = "true",
+                                       help = CliStrings.START_SERVER__LOCK_MEMORY__HELP)
+                            final Boolean lockMemory,
+                            @CliOption(key = CliStrings.START_SERVER__MAX__CONNECTIONS,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__MAX__CONNECTIONS__HELP)
+                            final Integer maxConnections,
+                            @CliOption(key = CliStrings.START_SERVER__MAXHEAP,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__MAXHEAP__HELP)
+                            final String maxHeap,
+                            @CliOption(key = CliStrings.START_SERVER__MAX__MESSAGE__COUNT,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__MAX__MESSAGE__COUNT__HELP)
+                            final Integer maxMessageCount,
+                            @CliOption(key = CliStrings.START_SERVER__MAX__THREADS,
+                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                      help = CliStrings.START_SERVER__MAX__THREADS__HELP)
+                            final Integer maxThreads,
-                            @CliOption(key = CliStrings.START_SERVER__MEMBER_NAME,
-                                      mandatory = true,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MEMBER_NAME__HELP)
-                            final String memberName,
+                            @CliOption(key = CliStrings.START_SERVER__REDIS_PORT,
+                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                      help = CliStrings.START_SERVER__REDIS_PORT__HELP)
+                            final Integer redisPort,
+                            @CliOption(key = CliStrings.START_SERVER__REDIS_BIND_ADDRESS,
+                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                      help = CliStrings.START_SERVER__REDIS_BIND_ADDRESS__HELP)
+                            final String redisBindAddress,
+                            @CliOption(key = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE__HELP)
+                            final Integer messageTimeToLive,
+                            @CliOption(key = CliStrings.START_SERVER__NAME,
+                                       mandatory = true,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__NAME__HELP)
+                            final String memberName,
+                            @CliOption(key = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE__HELP)
+                            final String offHeapMemorySize,
+                            @CliOption(key = CliStrings.START_SERVER__PROPERTIES,
+                                       optionContext = ConverterHint.FILE_PATHSTRING,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__PROPERTIES__HELP)
+                            String gemfirePropertiesPathname,
+                            @CliOption(key = CliStrings.START_SERVER__SECURITY_PROPERTIES,
+                                       optionContext = ConverterHint.FILE_PATHSTRING,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__SECURITY_PROPERTIES__HELP)
+                            String gemfireSecurityPropertiesPathname,
+                            @CliOption(key = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE,
+                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+                                       help = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE__HELP)
+                            final Integer socketBufferSize,
-                            @CliOption(key = CliStrings.START_SERVER__DIR,
-                                      optionContext = ConverterHint.DIR_PATHSTRING,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__DIR__HELP)
-                            String workingDirectory,
-                            @CliOption(key = CliStrings.START_SERVER__INITIAL_HEAP,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__INITIAL_HEAP__HELP)
-                            final String initialHeap,
-                            @CliOption(key = CliStrings.START_SERVER__MAXHEAP,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MAXHEAP__HELP)
-                            final String maxHeap,
-                            @CliOption(key = CliStrings.START_SERVER__REQUEST_SHARED_CONFIGURATION,
+                            @CliOption(key = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION,
-                                      help = CliStrings.START_SERVER__REQUEST_SHARED_CONFIGURATION__HELP)
-                            final Boolean requestSharedConfiguration,
-                            @CliOption(key = CliStrings.START_SERVER__J,
-                                      optionContext = ConverterHint.STRING_LIST,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__J__HELP)
-                            @CliMetaData(valueSeparator = ",")
-                            final String[] jvmArgsOpts, 
-                            @CliOption(key = CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__CRITICAL__HEAP__HELP)
-                            final Float criticalHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE__HELP)
-                            final Float evictionHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS__HELP)
-                            final String hostNameForClients,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__CONNECTIONS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MAX__CONNECTIONS__HELP)
-                            final Integer maxConnections,
-                            @CliOption(key = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE__HELP)
-                            final Integer messageTimeToLive,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__MESSAGE__COUNT,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MAX__MESSAGE__COUNT__HELP)
-                            final Integer maxMessageCount,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__THREADS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MAX__THREADS__HELP)
-                            final Integer maxThreads,
-                            @CliOption(key = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE__HELP)
-                            final Integer socketBufferSize)
+                                      help = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION__HELP)
+                            final Boolean requestSharedConfiguration)
+                            // NOTICE: keep the parameters in alphabetical order based on their CliStrings.START_SERVER_* text
+      gemfireProperties.setProperty(DistributionConfig.REDIS_PORT_NAME, StringUtils.valueOf(redisPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(DistributionConfig.REDIS_BIND_ADDRESS_NAME, StringUtils.valueOf(redisBindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(DistributionConfig.LOCK_MEMORY_NAME, StringUtils.valueOf(lockMemory, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(DistributionConfig.OFF_HEAP_MEMORY_SIZE_NAME, StringUtils.valueOf(offHeapMemorySize, StringUtils.EMPTY_STRING));
+      // read the OSProcess enable redirect system property here -- TODO: replace with new GFSH argument
+      final boolean redirectOutput = Boolean.getBoolean(OSProcess.ENABLE_OUTPUT_REDIRECTION_PROPERTY);
+      
-        .setRedirectOutput(true)
+        .setRedirectOutput(redirectOutput)
+        .setCriticalOffHeapPercentage(criticalOffHeapPercentage)
+        .setEvictionOffHeapPercentage(evictionOffHeapPercentage)
+      // fix TRAC bug #51967 by using NON_BLOCKING on Windows
+      final ReadingMode readingMode = SystemUtils.isWindows() ? ReadingMode.NON_BLOCKING : ReadingMode.BLOCKING;
+
-
-      ProcessStreamReader stderrReader = new ProcessStreamReader(serverProcess.getErrorStream(),
-        new InputListener() {
-          @Override
-          public void notifyInputLine(String line) {
-            message.append(line).append(StringUtils.LINE_SEPARATOR);
+      InputListener inputListener = new InputListener() {
+        @Override
+        public void notifyInputLine(String line) {
+          message.append(line);
+          if (readingMode == ReadingMode.BLOCKING) {
+            message.append(StringUtils.LINE_SEPARATOR);
-        }).start();
-
+        }
+      };
+      
+      ProcessStreamReader stderrReader = new ProcessStreamReader.Builder(serverProcess)
+          .inputStream(serverProcess.getErrorStream())
+          .inputListener(inputListener)
+          .readingMode(readingMode)
+          .continueReadingMillis(2*1000)
+          .build()
+          .start();
+      
-            stderrReader.join(Long.MAX_VALUE);
+            stderrReader.join(PROCESS_STREAM_READER_JOIN_TIMEOUT_MILLIS); // was Long.MAX_VALUE
-            serverState = (isAttachApiAvailable() ? serverStatus(serverPidFile, oldPid, memberName)
+            serverState = (ProcessUtils.isAvailable() ? serverStatus(serverPidFile, oldPid, memberName)
-        stderrReader.stop();
-        serverProcess.getErrorStream().close();
+        stderrReader.stopAsync(PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS); // stop will close ErrorStream
+    
+    if (launcher.getCriticalOffHeapPercentage() != null) {
+      commandLine.add("--" + CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE + "=" + launcher.getCriticalOffHeapPercentage());
+    }
+    
+    if (launcher.getEvictionOffHeapPercentage() != null) {
+      commandLine.add("--" + CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE + "=" + launcher.getEvictionOffHeapPercentage());
+    }
+        StopWatch stopWatch = new StopWatch(true);
+          if (stopWatch.elapsedTimeMillis() > WAITING_FOR_STOP_TO_MAKE_PID_GO_AWAY_TIMEOUT_MILLIS) {
+            break;
+          }
-    return waitAndCaptureProcessStream(process.getInputStream(), waitTimeMilliseconds);
+    return waitAndCaptureProcessStream(process, process.getInputStream(), waitTimeMilliseconds);
-    return waitAndCaptureProcessStream(process.getErrorStream(), waitTimeMilliseconds);
+    return waitAndCaptureProcessStream(process, process.getErrorStream(), waitTimeMilliseconds);
-  private String waitAndCaptureProcessStream(final InputStream processInputStream, long waitTimeMilliseconds) {
+  private String waitAndCaptureProcessStream(final Process process, final InputStream processInputStream, long waitTimeMilliseconds) {
-
-    ProcessStreamReader reader = new ProcessStreamReader(processInputStream, new InputListener() {
+    
+    InputListener inputListener = new InputListener() {
-    });
+    };
+    
+    ProcessStreamReader reader = new ProcessStreamReader.Builder(process)
+        .inputStream(processInputStream)
+        .inputListener(inputListener)
+        .build();
