GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long start)
-    servConn.setAsTrue(REQUIRES_RESPONSE);
-    servConn.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
-    regionNamePart = msg.getPart(0);
+    regionNamePart = clientMessage.getPart(0);
-    ChunkedMessage chunkedResponseMsg = servConn.getChunkedResponseMessage();
+    ChunkedMessage chunkedResponseMsg = serverConnection.getChunkedResponseMessage();
-          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+          serverConnection.getName(), clientMessage.getPayloadLength(),
+          serverConnection.getSocketString(), regionName);
-            .toLocalizedString(servConn.getName());
+            .toLocalizedString(serverConnection.getName());
-            servConn.getName()));
+            serverConnection.getName()));
-      writeKeySetErrorResponse(msg, MessageType.KEY_SET_DATA_ERROR, message, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeKeySetErrorResponse(clientMessage, MessageType.KEY_SET_DATA_ERROR, message,
+          serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
+    LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
-      writeRegionDestroyedEx(msg, regionName, reason, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeRegionDestroyedEx(clientMessage, regionName, reason, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeChunkedException(msg, ex, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, ex, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+    AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-        writeChunkedException(msg, ex, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, ex, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-    chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+    chunkedResponseMsg.setTransactionId(clientMessage.getTransactionId());
-      fillAndSendKeySetResponseChunks(region, regionName, keySetContext, servConn);
-      servConn.setAsTrue(RESPONDED);
+      fillAndSendKeySetResponseChunks(region, regionName, keySetContext, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      checkForInterrupt(servConn, e);
+      checkForInterrupt(serverConnection, e);
-      writeChunkedException(msg, e, false, servConn, servConn.getChunkedResponseMessage());
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection,
+          serverConnection.getChunkedResponseMessage());
+      serverConnection.setAsTrue(RESPONDED);
-      logger.debug("{}: Sent key set response for the region {}", servConn.getName(), regionName);
+      logger.debug("{}: Sent key set response for the region {}", serverConnection.getName(),
+          regionName);
-    List keyList = new ArrayList(maximumChunkSize);
+    List keyList = new ArrayList(MAXIMUM_CHUNK_SIZE);
-      if (keyList.size() == maximumChunkSize) {
+      if (keyList.size() == MAXIMUM_CHUNK_SIZE) {
-    chunkedResponseMsg.addObjPart(list, zipValues);
+    chunkedResponseMsg.addObjPart(list, false);
