GEODE-5684: refactor callAndValidate

* rename flag from outcomeSet to expectedResultIsSet
* refactor callAndValidate to use try/catch blocks for checking expected
results and exceptions and throwing up assertion errors to the error
collector, for the purpose of readability and reducing repetition.

-import static org.assertj.core.api.Assertions.catchThrowable;
-    private Boolean outcomeSet;
+    private Boolean expectedResultIsSet;
-      this.outcomeSet = false;
+      this.expectedResultIsSet = false;
-      this.outcomeSet = false;
+      this.expectedResultIsSet = false;
-      if (outcomeSet) {
+      if (expectedResultIsSet) {
-      this.outcomeSet = true;
+      this.expectedResultIsSet = true;
-      this.outcomeSet = true;
+      this.expectedResultIsSet = true;
-      this.outcomeSet = true;
+      this.expectedResultIsSet = true;
-      if (this.outcomeSet) {
+      if (this.expectedResultIsSet) {
-      this.outcomeSet = true;
+      this.expectedResultIsSet = true;
-      if (expectedValue != null) {
-        assertThat(this.callable.call()).isEqualTo(this.expectedValue);
-      } else if (expectedException != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        checkThrown(this.expectedException, thrown);
-      } else if (expectedExceptionType != null && expectedExceptionCauseType != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        assertThat(thrown).isInstanceOf(expectedExceptionType)
-            .hasCauseInstanceOf(expectedExceptionCauseType);
-      } else if (expectedExceptionType != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        assertThat(thrown).isInstanceOf(this.expectedExceptionType);
-      } else if (expectedExceptionCauseType != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        assertThat(thrown.getCause()).isInstanceOf(this.expectedExceptionCauseType);
-      } else {
-        this.callable.call();
+      Exception exception = null;
+
+      try {
+        T retVal = this.callable.call();
+
+        if (this.expectedValue != null) {
+          assertThat(retVal).isEqualTo(this.expectedValue);
+        }
+      } catch (Exception e) {
+        exception = e;
+
+      if (this.expectedExceptionCauseType != null && this.expectedExceptionType != null) {
+        assertThat(exception).isInstanceOf(this.expectedExceptionType)
+            .hasCauseInstanceOf(this.expectedExceptionCauseType);
+      } else if (this.expectedExceptionType != null) {
+        assertThat(exception).isInstanceOf(this.expectedExceptionType);
+      } else if (this.expectedExceptionCauseType != null) {
+        assertThat(exception).hasCauseInstanceOf(this.expectedExceptionCauseType);
+      } else if (this.expectedException != null) {
+        checkThrown(exception, this.expectedException);
+      } else {
+        if (exception != null) {
+          throw exception; // rethrow if we weren't expecting any exception and got one
+        }
+      }
+
-    private void checkThrown(Throwable expected, Throwable actual) {
+    private void checkThrown(Throwable actual, Throwable expected) {
-        checkThrown(expected.getCause(), actual.getCause());
+        checkThrown(actual.getCause(), expected.getCause());
