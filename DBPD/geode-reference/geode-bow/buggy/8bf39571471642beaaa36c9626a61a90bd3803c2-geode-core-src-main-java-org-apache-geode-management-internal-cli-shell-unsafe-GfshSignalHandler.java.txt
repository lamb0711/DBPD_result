Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class externalizes signal handling in order to make the GemFire build process a bit cleaner - for example
- * we have to have exceptions for sun.misc classes when building javadocs.
+ * This class externalizes signal handling in order to make the GemFire build process a bit cleaner
+ * - for example we have to have exceptions for sun.misc classes when building javadocs.
+ * 
-  private final Map<Signal, SignalHandler> originalSignalHandlers = Collections.synchronizedMap(
-    new Hashtable<Signal, SignalHandler>(Signal.values().length));
+  private final Map<Signal, SignalHandler> originalSignalHandlers =
+      Collections.synchronizedMap(new Hashtable<Signal, SignalHandler>(Signal.values().length));
-      // NOTE SignalHandler registration for SIGQUIT led to an IllegalArgumentException without the following
+      // NOTE SignalHandler registration for SIGQUIT led to an IllegalArgumentException without the
+      // following
-      // Exception in thread "main" java.lang.IllegalArgumentException: Signal already used by VM: SIGQUIT
-      //if (!Signal.SIGQUIT.equals(signal)) {
+      // Exception in thread "main" java.lang.IllegalArgumentException: Signal already used by VM:
+      // SIGQUIT
+      // if (!Signal.SIGQUIT.equals(signal)) {
-        originalSignalHandlers.put(signal, sun.misc.Signal.handle(new sun.misc.Signal(signal.getName()), this));
+        originalSignalHandlers.put(signal,
+            sun.misc.Signal.handle(new sun.misc.Signal(signal.getName()), this));
-    //System.err.printf("Thread (%1$s) is processing Signal '%2$s' (%3$d)...%n",
-    //  Thread.currentThread().getName(), sig.getName(), sig.getNumber());
+    // System.err.printf("Thread (%1$s) is processing Signal '%2$s' (%3$d)...%n",
+    // Thread.currentThread().getName(), sig.getName(), sig.getNumber());
