Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  /*package*/ final AtomicBoolean isConnected = new AtomicBoolean(false);
-  /*package*/ final AtomicBoolean isSelfDisconnect = new AtomicBoolean(false);
+  /* package */ final AtomicBoolean isConnected = new AtomicBoolean(false);
+  /* package */ final AtomicBoolean isSelfDisconnect = new AtomicBoolean(false);
-  public JmxOperationInvoker(final String host,
-                             final int port,
-                             final String userName,
-                             final String password,
-                             final Map<String, String> sslConfigProps,
-                             String gfSecurityPropertiesPath) throws Exception {
+  public JmxOperationInvoker(final String host, final int port, final String userName,
+      final String password, final Map<String, String> sslConfigProps,
+      String gfSecurityPropertiesPath) throws Exception {
-        env.put(JMXConnector.CREDENTIALS, new String[] { userName, password });
+        env.put(JMXConnector.CREDENTIALS, new String[] {userName, password});
-      for (Iterator<Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) {
+      for (Iterator<Entry<String, String>> it = entrySet.iterator(); it.hasNext();) {
-        if (key.startsWith("javax.") || key.startsWith(DistributionConfig.CLUSTER_SSL_PREFIX) || key.startsWith(JMX_MANAGER_SSL_PREFIX)) {
+        if (key.startsWith("javax.") || key.startsWith(DistributionConfig.CLUSTER_SSL_PREFIX)
+            || key.startsWith(JMX_MANAGER_SSL_PREFIX)) {
-          if ((key.equals(Gfsh.SSL_ENABLED_CIPHERS) || key.equals(Gfsh.SSL_ENABLED_PROTOCOLS)) && "any".equals(value)) {
+          if ((key.equals(Gfsh.SSL_ENABLED_CIPHERS) || key.equals(Gfsh.SSL_ENABLED_PROTOCOLS))
+              && "any".equals(value)) {
-        if (System.getProperty(Gfsh.SSL_KEYSTORE) != null || System.getProperty(Gfsh.SSL_TRUSTSTORE) != null) {
+        if (System.getProperty(Gfsh.SSL_KEYSTORE) != null
+            || System.getProperty(Gfsh.SSL_TRUSTSTORE) != null) {
-      //Check for JMX Credentials if empty put properties instance directly so that
-      //jmx management interceptor can read it for custom security properties
+      // Check for JMX Credentials if empty put properties instance directly so that
+      // jmx management interceptor can read it for custom security properties
-      this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT, checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));
+      this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT,
+          checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));
-      this.distributedSystemMXBeanProxy = JMX.newMXBeanProxy(mbsc, MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
+      this.distributedSystemMXBeanProxy = JMX.newMXBeanProxy(mbsc,
+          MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
-        LogWrapper.getInstance().info("DistributedSystemMXBean is not present on member with endpoints : " + this.endpoints);
+        LogWrapper.getInstance().info(
+            "DistributedSystemMXBean is not present on member with endpoints : " + this.endpoints);
-                    .info("MemberMXBean with ObjectName " + this.managerMemberObjectName + " is not present on member with endpoints : " + endpoints);
+              .info("MemberMXBean with ObjectName " + this.managerMemberObjectName
+                  + " is not present on member with endpoints : " + endpoints);
-          this.memberMXBeanProxy = JMX.newMXBeanProxy(mbsc, managerMemberObjectName, MemberMXBean.class);
+          this.memberMXBeanProxy =
+              JMX.newMXBeanProxy(mbsc, managerMemberObjectName, MemberMXBean.class);
-  //Copied from ShellCommands.java
+  // Copied from ShellCommands.java
-        gfshInstance.printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE, "Security ", gfSecurityPropertiesPathToUse));
+        gfshInstance
+            .printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+                "Security ", gfSecurityPropertiesPathToUse));
-      gfshInstance.logToFile("Using security properties file : " + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
+      gfshInstance.logToFile("Using security properties file : "
+          + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
-        throw new RuntimeException(CliStrings.format(CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0, CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl
-          .getPath())), io);
+        throw new RuntimeException(
+            CliStrings.format(CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0,
+                CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath())),
+            io);
-  public Object getAttribute(String resourceName, String attributeName) throws JMXInvocationException {
+  public Object getAttribute(String resourceName, String attributeName)
+      throws JMXInvocationException {
-      throw new JMXInvocationException("Exception while fetching " + attributeName + " for " + resourceName, e);
+      throw new JMXInvocationException(
+          "Exception while fetching " + attributeName + " for " + resourceName, e);
-      throw new JMXInvocationException("Couldn't find " + attributeName + " for " + resourceName, e);
+      throw new JMXInvocationException("Couldn't find " + attributeName + " for " + resourceName,
+          e);
-  public Object invoke(String resourceName, String operationName, Object[] params, String[] signature) throws JMXInvocationException {
+  public Object invoke(String resourceName, String operationName, Object[] params,
+      String[] signature) throws JMXInvocationException {
+   * 
-  protected Object invoke(ObjectName resource, String operationName, Object[] params, String[] signature) throws JMXInvocationException {
+  protected Object invoke(ObjectName resource, String operationName, Object[] params,
+      String[] signature) throws JMXInvocationException {
-      throw new JMXInvocationException("Exception while invoking " + operationName + " on " + resource, e);
+      throw new JMXInvocationException(
+          "Exception while invoking " + operationName + " on " + resource, e);
-      throw new JMXInvocationException("Couldn't find " + operationName + " on " + resource + " with arguments " + Arrays.toString(signature), e);
+      throw new JMXInvocationException("Couldn't find " + operationName + " on " + resource
+          + " with arguments " + Arrays.toString(signature), e);
-      throw new JMXInvocationException("Couldn't communicate with remote server at " + toString(), e);
+      throw new JMXInvocationException("Couldn't communicate with remote server at " + toString(),
+          e);
-      throw new JMXInvocationException(String.format("Failed to communicate with the remote MBean server at (%1$s)!", toString()), e);
+      throw new JMXInvocationException(String
+          .format("Failed to communicate with the remote MBean server at (%1$s)!", toString()), e);
-    //Gfsh.getCurrentInstance().printAsSevere(String.format("Command (%1$s)%n", commandRequest.getInput()));
+    // Gfsh.getCurrentInstance().printAsSevere(String.format("Command (%1$s)%n",
+    // commandRequest.getInput()));
-      return memberMXBeanProxy.processCommand(commandRequest.getInput(), commandRequest.getEnvironment(), ArrayUtils.toByteArray(commandRequest.getFileData()));
+      return memberMXBeanProxy.processCommand(commandRequest.getInput(),
+          commandRequest.getEnvironment(), ArrayUtils.toByteArray(commandRequest.getFileData()));
-      return memberMXBeanProxy.processCommand(commandRequest.getInput(), commandRequest.getEnvironment());
+      return memberMXBeanProxy.processCommand(commandRequest.getInput(),
+          commandRequest.getEnvironment());
-      throw new IllegalStateException("The DistributedSystemMXBean proxy was not initialized properly!");
+      throw new IllegalStateException(
+          "The DistributedSystemMXBean proxy was not initialized properly!");
-    if (DistributedSystemMXBean.class.equals(mbeanInterface) && ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN.equals(objectName.toString())) {
+    if (DistributedSystemMXBean.class.equals(mbeanInterface)
+        && ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN.equals(objectName.toString())) {
-  /*package*/ void resetClusterId() {
+  /* package */ void resetClusterId() {
-   * If the given host address contains a ":", considers it as an IPv6 address &
-   * returns the host based on RFC2732 requirements i.e. surrounds the given
-   * host address string with square brackets. If ":" is not found in the given
-   * string, simply returns the same string.
+   * If the given host address contains a ":", considers it as an IPv6 address & returns the host
+   * based on RFC2732 requirements i.e. surrounds the given host address string with square
+   * brackets. If ":" is not found in the given string, simply returns the same string.
+   * 
-   * @return for an IPv6 address returns compatible host address otherwise
-   * returns the same string
+   * @return for an IPv6 address returns compatible host address otherwise returns the same string
-  //TODO - Abhishek: move to utility class
+  // TODO - Abhishek: move to utility class
+
- * A Connection Notification Listener. Notifies Gfsh when a connection gets
- * terminated abruptly.
+ * A Connection Notification Listener. Notifies Gfsh when a connection gets terminated abruptly.
+ * 
-      if (JMXConnectionNotification.CLOSED.equals(connNotif.getType()) || JMXConnectionNotification.FAILED.equals(connNotif.getType())) {
+      if (JMXConnectionNotification.CLOSED.equals(connNotif.getType())
+          || JMXConnectionNotification.FAILED.equals(connNotif.getType())) {
