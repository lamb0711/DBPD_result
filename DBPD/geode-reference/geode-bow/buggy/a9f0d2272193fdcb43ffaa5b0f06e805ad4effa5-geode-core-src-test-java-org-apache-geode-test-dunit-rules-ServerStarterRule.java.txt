GEODE-2267: Enhance server/locator startup rules to include workingDir

+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;
+import org.apache.commons.io.FileUtils;
+import java.io.File;
+import java.nio.file.Files;
-  private Properties properties;
+  private File workingDir;
+  private String oldUserDir;
-  public ServerStarterRule(Properties properties) {
-    this.properties = properties;
+  public ServerStarterRule(File workingDir) {
+    this.workingDir = workingDir;
-  public void startServer() throws Exception {
-    startServer(0, false);
+  public void before() throws Exception {
+    oldUserDir = System.getProperty("user.dir");
+    if (workingDir == null) {
+      workingDir = Files.createTempDirectory("server").toAbsolutePath().toFile();
+    }
+    System.setProperty("user.dir", workingDir.toString());
-  public void startServer(int locatorPort) throws Exception {
-    startServer(locatorPort, false);
+  public Server startServer() throws Exception {
+    return startServer(new Properties(), -1, false);
-  public void startServer(int locatorPort, boolean pdxPersistent) throws Exception {
-    startServer(properties, locatorPort, pdxPersistent);
+  public Server startServer(int locatorPort) throws Exception {
+    return startServer(new Properties(), locatorPort, false);
-  public void startServer(Properties properties) throws Exception {
-    startServer(properties, 0, false);
+  public Server startServer(int locatorPort, boolean pdxPersistent) throws Exception {
+    return startServer(new Properties(), locatorPort, pdxPersistent);
-  public void startServer(Properties properties, int locatorPort) throws Exception {
-    startServer(properties, locatorPort, false);
+  public Server startServer(Properties properties) throws Exception {
+    return startServer(properties, -1, false);
-  public void startServer(Properties properties, int locatorPort, boolean pdxPersistent)
+  public Server startServer(Properties properties, int locatorPort) throws Exception {
+    return startServer(properties, locatorPort, false);
+  }
+
+  public Server startServer(Properties properties, int locatorPort, boolean pdxPersistent)
+    if (!properties.containsKey(NAME)) {
+      properties.setProperty(NAME, "server");
+    }
+    String name = properties.getProperty(NAME);
+    if (!properties.containsKey(LOG_FILE)) {
+      properties.setProperty(LOG_FILE, new File(name + ".log").getAbsolutePath().toString());
+    }
+
-    if (!properties.containsKey(NAME)) {
-      properties.setProperty(NAME, this.getClass().getName());
-    }
+
-  }
-
-  /**
-   * if you use this class as a rule, the default startServer will be called in the before. You need
-   * to make sure your properties to start the server with has the locator information it needs to
-   * connect to, otherwise, this server won't connect to any locator
-   */
-  protected void before() throws Throwable {
-    if (properties != null)
-      startServer();
+    return new Server(server.getPort(), workingDir, name);
+    FileUtils.deleteQuietly(workingDir);
+    if (oldUserDir == null) {
+      System.clearProperty("user.dir");
+    } else {
+      System.setProperty("user.dir", oldUserDir);
+    }
