This closes #220

GEODE-11: Added exception handling to lucene gfsh commands

Added exception handling to lucene search and describe gfsh commands to handle region not found, index not found and invalid query string exceptions.

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

-public class LuceneSearchIndexFunction<K,V> extends FunctionAdapter implements InternalEntity {
+public class LuceneSearchIndexFunction<K, V> extends FunctionAdapter implements InternalEntity {
-  public void execute(final FunctionContext context)   {
-
-    Set<LuceneSearchResults> result=new HashSet<>();
+  public void execute(final FunctionContext context) {
+    Set<LuceneSearchResults> result = new HashSet<>();
-      if (cache.getRegion(queryInfo.getRegionPath())!=null) {
-        final LuceneQuery<K, V> query = luceneService.createLuceneQueryFactory()
-          .setResultLimit(queryInfo.getLimit())
-          .create(queryInfo.getIndexName(), queryInfo.getRegionPath(), queryInfo.getQueryString(), queryInfo.getDefaultField());
+      if (luceneService.getIndex(queryInfo.getIndexName(), queryInfo.getRegionPath()) == null) {
+        throw new Exception("Index " + queryInfo.getIndexName() + " not found on region " + queryInfo.getRegionPath());
+      }
+      final LuceneQuery<K, V> query = luceneService.createLuceneQueryFactory()
+        .setResultLimit(queryInfo.getLimit())
+        .create(queryInfo.getIndexName(), queryInfo.getRegionPath(), queryInfo.getQueryString(),
+          queryInfo.getDefaultField());
+      if (queryInfo.getKeysOnly()) {
+        query.findKeys().forEach(key -> result.add(new LuceneSearchResults(key.toString())));
+      }
+      else {
-              result.add(new LuceneSearchResults<K,V>(searchResult.getKey().toString(),searchResult.getValue().toString(),searchResult.getScore())));
+              result.add(
+                new LuceneSearchResults<K, V>(searchResult.getKey().toString(), searchResult.getValue().toString(),
+                  searchResult.getScore())));
-      context.getResultSender().lastResult(result);
+      if (result != null) {
+        context.getResultSender().lastResult(result);
+      }
-      context.getResultSender().lastResult(e);
+      result.add(new LuceneSearchResults(true, e.getRootCause().getMessage()));
+      context.getResultSender().lastResult(result);
+    }
+    catch (Exception e) {
+      result.add(new LuceneSearchResults(true, e.getMessage()));
+      context.getResultSender().lastResult(result);
+
