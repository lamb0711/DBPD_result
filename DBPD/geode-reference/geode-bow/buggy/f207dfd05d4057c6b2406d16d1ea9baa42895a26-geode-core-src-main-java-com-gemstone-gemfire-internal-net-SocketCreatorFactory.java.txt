GEODE-420: Added SSLConfigurationFactory to have a single location that determines the SSLConfiguration. Amended all affected classes

+import com.gemstone.gemfire.internal.admin.SSLConfig;
-  private Map<String, SocketCreator> socketCreators = new HashMap<>();
+  private Map<SSLEnabledComponent, SocketCreator> socketCreators = new HashMap<>();
+    SSLConfigurationFactory.setDistributionConfig(this.distributionConfig);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.CLUSTER, null);
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.CLUSTER, distributionConfig.getClusterSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.CLUSTER);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.CLUSTER, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.SERVER, null, distributionConfig.getServerSSLEnabled(), distributionConfig
-        .getServerSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getServerSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getServerSSLCiphers()), distributionConfig.getServerSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.SERVER, distributionConfig.getServerSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.SERVER);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.SERVER, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.GATEWAY, null, distributionConfig.getGatewaySSLEnabled(), distributionConfig
-        .getGatewaySSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getGatewaySSLProtocols()), createStringArrayFromString(distributionConfig
-        .getGatewaySSLCiphers()), distributionConfig.getGatewaySSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.GATEWAY, distributionConfig.getGatewaySSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.GATEWAY);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.GATEWAY, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.JMX, null, distributionConfig.getJmxManagerSSLEnabled(), distributionConfig
-        .getJmxManagerSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getJmxManagerSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getJmxManagerSSLCiphers()), distributionConfig.getJmxSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.JMX, distributionConfig.getJMXManagerSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.JMX);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.JMX, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.HTTP_SERVICE, null, distributionConfig.getHttpServiceSSLEnabled(), distributionConfig
-        .getHttpServiceSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getHttpServiceSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getHttpServiceSSLCiphers()), distributionConfig.getHttpServiceSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.HTTP_SERVICE, distributionConfig.getHTTPServiceSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.HTTP_SERVICE);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.HTTP_SERVICE, sslConfigForComponent);
-  private SocketCreator getSSLSocketCreator(String sslComponent,
-                                            String alias,
-                                            DistributionConfig distributionConfig,
-                                            final boolean useSSL,
-                                            final boolean needClientAuth,
-                                            final String[] protocols,
-                                            final String[] ciphers,
-                                            final Properties props) {
-    if (useSSL) {
+  private SocketCreator getSSLSocketCreator(final SSLEnabledComponent sslComponent, final DistributionConfig distributionConfig, final SSLConfig sslConfig) {
+    if (sslConfig.isEnabled()) {
-        return createSSLSocketCreator(SSLEnabledComponents.ALL, alias, useSSL, needClientAuth, protocols, ciphers, props);
-      } else if (distributionConfig.getSSLEnabledComponents().length == 0 || ArrayUtils.contains(distributionConfig.getSSLEnabledComponents(), sslComponent)) {
-        return createSSLSocketCreator(sslComponent, alias, useSSL, needClientAuth, protocols, ciphers, props);
+        return createSSLSocketCreator(SSLEnabledComponent.ALL, sslConfig);
+      } else if (ArrayUtils.contains(distributionConfig.getSSLEnabledComponents(), sslComponent.getConstant())) {
+        return createSSLSocketCreator(sslComponent, sslConfig);
-    return createSSLSocketCreator(NON_SSL, null, false, false, null, null, null);
+    return createSSLSocketCreator(SSLEnabledComponent.NONE, sslConfig);
-  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(String sslEnabledComponent, String alias) {
-    return getOrCreateSocketCreatorForSSLEnabledComponent(sslEnabledComponent, alias, distributionConfig.getClusterSSLEnabled(), distributionConfig.getClusterSSLRequireAuthentication(), createStringArrayFromString(distributionConfig
-      .getClusterSSLProtocols()), createStringArrayFromString(distributionConfig.getClusterSSLCiphers()), distributionConfig.getClusterSSLProperties());
-  }
-
-  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(String sslEnabledComponent,
-                                                                       String alias,
-                                                                       boolean useSSL,
-                                                                       boolean needClientAuth,
-                                                                       String[] protocols,
-                                                                       String[] ciphers,
-                                                                       Properties props) {
+  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(final SSLEnabledComponent sslEnabledComponent, final SSLConfig sslConfig) {
-      return getSSLSocketCreator(sslEnabledComponent, alias, distributionConfig, useSSL, needClientAuth, protocols, ciphers, props);
+      return getSSLSocketCreator(sslEnabledComponent, distributionConfig, sslConfig);
-  private SocketCreator createSSLSocketCreator(final String sslEnableComponent,
-                                               final String alias,
-                                               final boolean useSSL,
-                                               final boolean needClientAuth,
-                                               final String[] protocols,
-                                               final String[] ciphers,
-                                               final Properties props) {
+  private SocketCreator createSSLSocketCreator(final SSLEnabledComponent sslEnableComponent, final SSLConfig sslConfig) {
-    if (useSSL) {
-      socketCreator = new SocketCreator(useSSL, needClientAuth, protocols, ciphers, props, alias);
+    if (sslConfig.isEnabled()) {
+      socketCreator = new SocketCreator(sslConfig);
-      socketCreator = new SocketCreator();
-      addSocketCreatorForComponent(NON_SSL, socketCreator);
+      socketCreator = new SocketCreator(sslConfig);
+      addSocketCreatorForComponent(SSLEnabledComponent.NONE, socketCreator);
-  private synchronized void addSocketCreatorForComponent(String sslEnabledComponent, SocketCreator socketCreator) {
+  private synchronized void addSocketCreatorForComponent(SSLEnabledComponent sslEnabledComponent, SocketCreator socketCreator) {
-  private synchronized SocketCreator getSocketCreatorForComponent(String sslEnabledComponent) {
+  private synchronized SocketCreator getSocketCreatorForComponent(SSLEnabledComponent sslEnabledComponent) {
-   * @return
+   * @return SocketCreator for the defined properties
-    return new SocketCreator(useSSL, needClientAuth, createStringArrayFromString(protocols), createStringArrayFromString(ciphers), gfsecurityProps, null);
+    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(useSSL, needClientAuth, protocols, ciphers, gfsecurityProps, null);
+    return new SocketCreator(sslConfig);
+    SSLConfigurationFactory.close();
