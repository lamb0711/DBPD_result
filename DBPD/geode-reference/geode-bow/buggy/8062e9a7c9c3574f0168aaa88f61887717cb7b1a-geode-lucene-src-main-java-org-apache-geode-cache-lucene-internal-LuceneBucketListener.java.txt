GEODE-2367: Lucene indexes do not handle ha scenarios

* Added afterSecondary callback to partition listener to allow cleaning up
  of the index repo when the bucket losses primary
* Added lock prior to creating the bucket indexes to prevent multiple index
  writers from being available at a time
* Changed single point of lucene index creation, no longer creating on the fly

-public class LucenePrimaryBucketListener extends PartitionListenerAdapter {
+public class LuceneBucketListener extends PartitionListenerAdapter {
-  public LucenePrimaryBucketListener(PartitionedRepositoryManager partitionedRepositoryManager,
+  public LuceneBucketListener(PartitionedRepositoryManager partitionedRepositoryManager,
-        lucenePartitionRepositoryManager.getRepository(bucketId);
+        lucenePartitionRepositoryManager.createRepository(bucketId);
+
+  public void afterBucketRemoved(int bucketId, Iterable<?> keys) {
+    afterSecondary(bucketId);
+  }
+
+  public void afterSecondary(int bucketId) {
+    dm.getWaitingThreadPool().execute(() -> {
+      try {
+        lucenePartitionRepositoryManager.cleanRepository(bucketId);
+      } catch (Exception e) {
+        logger.warn("Exception while cleaning up Lucene Index Repository", e);
+      }
+    });
+  }
