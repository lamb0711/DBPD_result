GEODE-2267: Enhance server/locator startup rules

* be able to return the rule itself so that we can start the server/locator at rule declaration time.
* rearrange the class structure
* do not delete the workingDir if the rule is created with a workingDir (then it's up for the caller to delete it)

-import org.apache.geode.distributed.internal.InternalLocator;
+import org.apache.geode.distributed.internal.InternalLocator;
-import org.apache.geode.test.dunit.rules.Member;
+import org.apache.geode.test.dunit.rules.MemberVM;
-  public void verify(Locator locator) {
-    verifyLocator(locator);
+
+  public void verify(MemberVM memberVM) throws ClassNotFoundException {
+    if (memberVM.isLocator())
+      verifyLocator(memberVM);
+    else
+      verifyServer(memberVM);
-  public void verify(Server server) throws ClassNotFoundException {
-    verifyServer(server);
-  }
-
-  public void verifyLocator(Member locator) {
+  public void verifyLocator(MemberVM<Locator> locatorVM) {
-    locator.invoke(() -> {
-      InternalLocator internalLocator = LocatorServerStartupRule.locatorStarter.locator;
+    locatorVM.invoke(() -> {
+      InternalLocator internalLocator = LocatorServerStartupRule.locatorStarter.getLocator();
-    File clusterConfigDir = new File(locator.getWorkingDir(), "/cluster_config");
+    File clusterConfigDir = new File(locatorVM.getWorkingDir(), "/cluster_config");
-  public void verifyServer(Member server) throws ClassNotFoundException {
+  public void verifyServer(MemberVM<Server> serverVM) throws ClassNotFoundException {
-        server.getWorkingDir().list((dir, filename) -> filename.contains(".jar")));
+        serverVM.getWorkingDir().list((dir, filename) -> filename.contains(".jar")));
-    server.invoke(() -> {
+    serverVM.invoke(() -> {
