GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
-import static org.apache.geode.cache.configuration.CacheElement.findCustomCacheElement;
-import static org.apache.geode.cache.configuration.CacheElement.findCustomRegionElement;
-import static org.apache.geode.cache.configuration.CacheElement.findRegionConfiguration;
-
-import org.apache.geode.cache.configuration.CacheElement;
-import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
+  String CLUSTER_CONFIG = "cluster";
+
-
-
-  default <T extends CacheElement> T getCustomCacheElement(String group, String id,
-      Class<T> classT) {
-    CacheConfig cacheConfig = getCacheConfig(group);
-    if (cacheConfig == null) {
-      return null;
-    }
-    return findCustomCacheElement(cacheConfig, id, classT);
-  }
-
-  default void saveCustomCacheElement(String group, CacheElement element) {
-    updateCacheConfig(group, cacheConfig -> {
-      CacheElement foundElement =
-          findCustomCacheElement(cacheConfig, element.getId(), element.getClass());
-      if (foundElement != null) {
-        cacheConfig.getCustomCacheElements().remove(foundElement);
-      }
-      cacheConfig.getCustomCacheElements().add(element);
-      return cacheConfig;
-    });
-  }
-
-  default void deleteCustomCacheElement(String group, String id,
-      Class<? extends CacheElement> classT) {
-    updateCacheConfig(group, config -> {
-      CacheElement cacheElement = findCustomCacheElement(config, id, classT);
-      if (cacheElement == null) {
-        return null;
-      }
-      config.getCustomCacheElements().remove(cacheElement);
-      return config;
-    });
-  }
-
-  default <T extends CacheElement> T getCustomRegionElement(String group, String regionPath,
-      String id, Class<T> classT) {
-    CacheConfig cacheConfig = getCacheConfig(group);
-    return findCustomRegionElement(cacheConfig, regionPath, id, classT);
-  }
-
-  default void saveCustomRegionElement(String group, String regionPath, CacheElement element) {
-    updateCacheConfig(group, cacheConfig -> {
-      RegionConfig regionConfig = findRegionConfiguration(cacheConfig, regionPath);
-      if (regionConfig == null) {
-        throw new EntityNotFoundException(
-            String.format("region %s does not exist in group %s", regionPath, group));
-      }
-
-      CacheElement oldElement =
-          findCustomRegionElement(cacheConfig, regionPath, element.getId(), element.getClass());
-
-      if (oldElement != null) {
-        regionConfig.getCustomRegionElements().remove(oldElement);
-      }
-      regionConfig.getCustomRegionElements().add(element);
-      return cacheConfig;
-    });
-  }
-
-  default void deleteCustomRegionElement(String group, String regionPath, String id,
-      Class<? extends CacheElement> classT) {
-    updateCacheConfig(group, cacheConfig -> {
-      RegionConfig regionConfig = findRegionConfiguration(cacheConfig, regionPath);
-      if (regionConfig == null) {
-        throw new EntityNotFoundException(
-            String.format("region %s does not exist in group %s", regionPath, group));
-      }
-      CacheElement element = findCustomRegionElement(cacheConfig, regionPath, id, classT);
-      if (element == null) {
-        return null;
-      }
-      regionConfig.getCustomRegionElements().remove(element);
-      return cacheConfig;
-    });
-  }
-
-
-
