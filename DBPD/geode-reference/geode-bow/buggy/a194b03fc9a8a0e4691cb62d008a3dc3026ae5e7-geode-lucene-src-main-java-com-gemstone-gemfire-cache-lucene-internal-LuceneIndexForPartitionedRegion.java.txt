GEODE-1188: Lucene indexes can be created with partition redundant regions

Added a test to test against all partition region types, not including proxy types

When specific region types need more robust/specific tests, we can add specific tests
for the type and eventually remove this test if/when all types are covered

-                                final PartitionAttributes partitionAttributes)
-  {
+                                final PartitionAttributes partitionAttributes) {
+    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory<String, File>();
+    partitionAttributesFactory.setColocatedWith(regionPath);
+    configureLuceneRegionAttributesFactory(partitionAttributesFactory, partitionAttributes);
+
-        .setPartitionAttributes(new PartitionAttributesFactory<String, File>().setColocatedWith(regionPath)
-            .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-            .create())
-            .create(fileRegionName);
+        .setPartitionAttributes(partitionAttributesFactory.create())
+        .create(fileRegionName);
-                           final PartitionAttributes partitionAttributes, final String chunkRegionName)
-  {
+                           final PartitionAttributes partitionAttributes, final String chunkRegionName) {
+    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory<String, File>();
+    partitionAttributesFactory.setColocatedWith(fileRegionName);
+    configureLuceneRegionAttributesFactory(partitionAttributesFactory, partitionAttributes);
+
-      .setPartitionAttributes(new PartitionAttributesFactory<ChunkKey, byte[]>().setColocatedWith(fileRegionName)
-        .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-        .create())
+      .setPartitionAttributes(partitionAttributesFactory.create())
-
+  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(PartitionAttributesFactory attributesFactory, PartitionAttributes dataRegionAttributes) {
+    attributesFactory.setTotalNumBuckets(dataRegionAttributes.getTotalNumBuckets());
+    attributesFactory.setRedundantCopies(dataRegionAttributes.getRedundantCopies());
+    return attributesFactory;
+  }
