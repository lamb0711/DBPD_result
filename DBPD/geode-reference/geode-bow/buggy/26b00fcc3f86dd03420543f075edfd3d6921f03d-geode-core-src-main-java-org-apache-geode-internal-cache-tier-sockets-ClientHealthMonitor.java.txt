GEODE-4133: synchronize `ClientHealthMonitor.getClientHeartbeats` (#1194)

Add generics and make some things private while I'm at it.
+   *
+   * Accesses must be locked by _clientHeartbeatsLock
-  protected volatile Map _clientHeartbeats = Collections.EMPTY_MAP;
+  private Map<ClientProxyMembershipID, Long> _clientHeartbeats = Collections.emptyMap();
-  protected final Object _clientHeartbeatsLock = new Object();
+  private final Object _clientHeartbeatsLock = new Object();
-  protected final Map _clientThreads;
+  private final Map _clientThreads;
-      Map oldClientHeartbeats = this._clientHeartbeats;
+      Map<ClientProxyMembershipID, Long> oldClientHeartbeats = this._clientHeartbeats;
-        Map newClientHeartbeats = new HashMap(oldClientHeartbeats);
-        newClientHeartbeats.put(proxyID, Long.valueOf(System.currentTimeMillis()));
+        Map<ClientProxyMembershipID, Long> newClientHeartbeats = new HashMap<>(oldClientHeartbeats);
+        newClientHeartbeats.put(proxyID, System.currentTimeMillis());
-   * Takes care of unregistering from the _clientHeatBeats map.
+   * Takes care of unregistering from the _clientHeartBeats map.
-      Map oldClientHeartbeats = this._clientHeartbeats;
+      Map<ClientProxyMembershipID, Long> oldClientHeartbeats = this._clientHeartbeats;
-        Map newClientHeartbeats = new HashMap(oldClientHeartbeats);
+        Map<ClientProxyMembershipID, Long> newClientHeartbeats = new HashMap<>(oldClientHeartbeats);
+   *
+   *         Test hook only.
-  public Map getClientHeartbeats() {
-    return this._clientHeartbeats;
+  Map<ClientProxyMembershipID, Long> getClientHeartbeats() {
+    synchronized (this._clientHeartbeatsLock) {
+      return new HashMap<>(this._clientHeartbeats);
+    }
