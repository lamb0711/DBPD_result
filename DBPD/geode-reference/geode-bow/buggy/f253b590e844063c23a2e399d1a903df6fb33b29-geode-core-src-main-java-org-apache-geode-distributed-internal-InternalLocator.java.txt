GEODE-6283: expose HttpService on InternalCache so that different comâ€¦ (#3110)

* GEODE-6283: expose HttpService on InternalCache so that different component can add their own webapps independently.

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import org.apache.geode.internal.cache.HttpService;
-import org.apache.geode.management.internal.JettyHelper;
-import org.apache.geode.management.internal.ManagementAgent;
-import org.apache.geode.management.internal.SystemManagementService;
-   * @param loggingSession the LoggingSession to use, may be a NullLoggingSession which does nothing
+   * @param loggingSession the LoggingSession to use, may be a NullLoggingSession which does
+   *        nothing
-      InternalLogWriter securityLogger, InetAddress bindAddress, String hostnameForClients,
-      Properties distributedSystemProperties, boolean startDistributedSystem) {
+      InternalLogWriter securityLogger,
+      InetAddress bindAddress, String hostnameForClients,
+      Properties distributedSystemProperties,
+      boolean startDistributedSystem) {
-      InternalLogWriter securityLogger, InetAddress bindAddress, boolean startDistributedSystem,
-      Properties dsProperties, String hostnameForClients) throws IOException {
+      InternalLogWriter securityLogger,
+      InetAddress bindAddress,
+      boolean startDistributedSystem,
+      Properties dsProperties, String hostnameForClients)
+      throws IOException {
-      InetAddress bindAddress, String hostnameForClients, Properties distributedSystemProperties,
+      InetAddress bindAddress, String hostnameForClients,
+      Properties distributedSystemProperties,
-      InternalLogWriter logger, InternalLogWriter logger1, InetAddress addr,
-      Properties dsProperties, boolean peerLocator, boolean serverLocator, String s, boolean b1)
+      InternalLogWriter logger, InternalLogWriter logger1,
+      InetAddress addr,
+      Properties dsProperties, boolean peerLocator,
+      boolean serverLocator, String s, boolean b1)
-
-    ManagementAgent managementAgent =
-        ((SystemManagementService) SystemManagementService.getExistingManagementService(myCache))
-            .getManagementAgent();
-
-    if (managementAgent == null) {
-      logger.info(
-          "management service needs to be started for ClusterManagementService to be running.");
-      return;
-    }
-
-        new ImmutablePair<>(JettyHelper.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+        new ImmutablePair<>(HttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
-        new ImmutablePair<>(JettyHelper.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
+        new ImmutablePair<>(HttpService.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
-    managementWebapp =
-        managementAgent
-            .addWebApplication("/geode-management", gemfireManagementWar, securityServiceAttr,
-                cmServiceAttr);
+
+    try {
+      myCache.getHttpService()
+          .addWebApplication("/geode-management", gemfireManagementWar, securityServiceAttr,
+              cmServiceAttr);
+    } catch (Exception e) {
+      logger.error(e.getMessage(), e);
+    }
-   *
-   *
