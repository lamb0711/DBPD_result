jgroups source is now removed from asf branch GEODE-77 and is a downloaded dependency.  Able to start/stop a locator and a server via gfsh but there is no HA or authentication in the membership system.

-package com.gemstone.gemfire.distributed.internal.membership.jgroup;
+package com.gemstone.gemfire.distributed.internal.membership.gms;
+import com.gemstone.gemfire.ForcedDisconnectException;
-import com.gemstone.org.jgroups.Event;
-import com.gemstone.org.jgroups.JChannel;
-import com.gemstone.org.jgroups.stack.Protocol;
+import com.gemstone.gemfire.distributed.internal.membership.InternalDistributedMember;
+import com.gemstone.gemfire.distributed.internal.membership.MembershipManager;
+import com.gemstone.gemfire.distributed.internal.membership.gms.interfaces.Manager;
+import com.gemstone.gemfire.distributed.internal.membership.gms.mgr.GMSMembershipManager;
-  /** returns the JGroups channel for the given distributed system */
-  public static JChannel getJChannel(DistributedSystem sys) {
-    return getMembershipManager(sys).channel;
-  }
-  public static JGroupMembershipManager getMembershipManager(DistributedSystem sys) {
+  public static MembershipManager getMembershipManager(DistributedSystem sys) {
-    JGroupMembershipManager mgr = (JGroupMembershipManager)dm.getMembershipManager();
+    MembershipManager mgr = dm.getMembershipManager();
-    getMembershipManager(sys).beSick();
+    ((Manager)getMembershipManager(sys)).beSick();
-      getMembershipManager(sys).playDead();
+      ((Manager)getMembershipManager(sys)).playDead();
-    getMembershipManager(sys).beHealthy();
+    ((Manager)getMembershipManager(sys)).beHealthy();
-    return getMembershipManager(sys).getCoordinator();
+    return ((Manager)getMembershipManager(sys)).getCoordinator();
-    return getMembershipManager(sys).getLeadMember();
+    return ((Manager)getMembershipManager(sys)).getLeadMember();
-  /** register a test hook with the manager */
-  public static void addTestHook(DistributedSystem sys,
-      com.gemstone.org.jgroups.debug.JChannelTestHook hook) {
-    getMembershipManager(sys).registerTestHook(hook);
-  }
-  
-  /** remove a registered test hook */
-  public static void removeTestHook(DistributedSystem sys,
-      com.gemstone.org.jgroups.debug.JChannelTestHook hook) {
-    getMembershipManager(sys).unregisterTestHook(hook);
-  }
-  
-    return getMembershipManager(sys).isShunned(mbr);
+    return ((Manager)getMembershipManager(sys)).isShunned(mbr);
-    getMembershipManager(sys).addSurpriseMemberForTesting(mbr, birthTime);
+    ((Manager)getMembershipManager(sys)).addSurpriseMemberForTesting(mbr, birthTime);
-    JGroupMembershipManager.inhibitForcedDisconnectLogging(b);
+    GMSMembershipManager.inhibitForcedDisconnectLogging(b);
-        return !getMembershipManager(sys).getView().contains(member);
+        return !getMembershipManager(sys).getView().contains((InternalDistributedMember)member);
-    JChannel c = MembershipManagerHelper.getJChannel(msys);
-    Protocol udp = c.getProtocolStack().findProtocol("UDP");
-    udp.stop();
-    udp.passUp(new Event(Event.EXIT, new RuntimeException("killing members ds")));
-    try {
-      MembershipManagerHelper.getJChannel(msys).waitForClose();
-    }
-    catch (InterruptedException ie) {
-      Thread.currentThread().interrupt();
-      // attempt rest of work with interrupt bit set
-    }
-//    LogWriter bLogger =
-//      new LocalLogWriter(LogWriterImpl.ALL_LEVEL, System.out);
+    getMembershipManager(msys).uncleanShutdown("test is forcing disconnect", new ForcedDisconnectException("test is forcing disconnect"));
