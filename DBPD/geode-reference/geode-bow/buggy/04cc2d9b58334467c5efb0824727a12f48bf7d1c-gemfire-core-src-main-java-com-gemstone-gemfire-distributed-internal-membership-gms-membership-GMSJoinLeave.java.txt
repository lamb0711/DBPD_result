refactor locator creation to use interfaces.  Introduced NetMember interface for this purpose.  Added an initial unit test for the membership manager.  Changed logger initialization to ignore the log4j2.xml configuration file in the jgroups jar.

-import com.gemstone.gemfire.CancelCriterion;
-import com.gemstone.gemfire.distributed.DistributedMember;
-import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
+import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberServices;
-import com.gemstone.gemfire.internal.logging.LoggingThreadGroup;
+import com.gemstone.gemfire.internal.Version;
-  private static final long MEMBER_REQUEST_COLLECTION_INTERVAL = Long.getLong("geode.member-request-collection-interval", 5000);
+  private static final long MEMBER_REQUEST_COLLECTION_INTERVAL = Long.getLong("geode.member-request-collection-interval", 2000);
+
+  /** time to wait for a leave request to be transmitted by jgroups */
+  private static final long LEAVE_MESSAGE_SLEEP_TIME = Long.getLong("geode.leave-message-sleep-time", 2000);
-  private static final Logger logger = Services.getLogger();
+  private static final Logger logger = GMSMemberServices.getLogger();
-  private Services services;
+  private GMSMemberServices services;
-    NetView v = currentView;
-    if (!isCoordinator && v != null) {
-      // forward the request to the coordinator
-      logger.info("forwarding join request from " + incomingRequest.getMemberID() + " to " + v.getCoordinator());
-      incomingRequest.setRecipient(v.getCoordinator());
+    Object creds = incomingRequest.getCredentials();
+    if (creds != null) {
+      String rejection = null;
-        services.getMessenger().send(incomingRequest);
-      } catch (IOException ignored) {
-        // this isn't possible since this was an incoming message
+        rejection = services.getAuthenticator().authenticate(incomingRequest.getMemberID(), creds);
+      } catch (AuthenticationFailedException e) {
+        rejection = e.getMessage();
-    } else {
-      Object creds = incomingRequest.getCredentials();
-      if (creds != null) {
-        String rejection = null;
+      if (rejection != null  &&  rejection.length() > 0) {
+        JoinResponseMessage m = new JoinResponseMessage(rejection);
+        m.setRecipient(incomingRequest.getMemberID());
-           rejection = services.getAuthenticator().authenticate(incomingRequest.getMemberID(), creds);
-        } catch (AuthenticationFailedException e) {
-          rejection = e.getMessage();
-        }
-        if (rejection != null  &&  rejection.length() > 0) {
-           JoinResponseMessage m = new JoinResponseMessage(rejection);
-           m.setRecipient(incomingRequest.getMemberID());
-           try {
-             services.getMessenger().send(m);
-           } catch (IOException e2) {
-             logger.info("unable to send join response " + rejection + " to " + incomingRequest.getMemberID(), e2);
-           }
+          services.getMessenger().send(m);
+        } catch (IOException e2) {
+          logger.info("unable to send join response " + rejection + " to " + incomingRequest.getMemberID(), e2);
-      recordViewRequest(incomingRequest);
+    recordViewRequest(incomingRequest);
-    startCoordinatorServices();
-          startCoordinatorServices();
+        startCoordinatorServices();
+      if (!this.isCoordinator) {
+        // get rid of outdated requests
+        synchronized(viewRequests) {
+          for (Iterator<DistributionMessage> it = viewRequests.iterator(); it.hasNext(); ) {
+            DistributionMessage m = it.next();
+            if (m instanceof JoinRequestMessage) {
+              it.remove();
+            } else if (m instanceof LeaveRequestMessage) {
+              if (!currentView.contains(((LeaveRequestMessage)m).getMemberID())) {
+                it.remove();
+              }
+            } else if (m instanceof RemoveMemberMessage) {
+              if (!currentView.contains(((RemoveMemberMessage)m).getMemberID())) {
+                it.remove();
+              }
+            }
+          }
+        }
+      }
-      viewCreator = new ViewCreator("Geode Membership View Creator", Services.getThreadGroup());
+      viewCreator = new ViewCreator(Version.CURRENT.getProductName()
+          +" Membership View Creator", GMSMemberServices.getThreadGroup());
+              try { Thread.sleep(LEAVE_MESSAGE_SLEEP_TIME); }
+              catch (InterruptedException e) { Thread.currentThread().interrupt(); }
-  public void init(Services s) {
+  public void init(GMSMemberServices s) {
-                requests = new ArrayList<DistributionMessage>(viewRequests);
+                if (requests == null) {
+                  requests = new ArrayList<DistributionMessage>(viewRequests);
+                } else {
+                  requests.addAll(viewRequests);
+                }
