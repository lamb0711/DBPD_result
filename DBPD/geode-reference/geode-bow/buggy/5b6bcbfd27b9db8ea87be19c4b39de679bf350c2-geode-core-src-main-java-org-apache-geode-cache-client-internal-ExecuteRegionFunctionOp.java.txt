GEODE-6677: Eliminate Infinite Function Retry (#3690)

* Fix for retry with onRegion
* Fix retry with onRegion singlehop
* Fix for onServer
* DUnitTest for onRegion (singleHop, multihop), onServer
* Unit test for onRegion (singleHop, multihop), onServer

+import org.apache.geode.cache.client.NoAvailableServersException;
+import org.apache.geode.cache.client.PoolFactory;
+
-
-    int retryAttempts = 0;
-    int maxRetryAttempts = 0;
-    if (function.isHA()) {
-      maxRetryAttempts = mRetryAttempts;
+
+    int maxRetryAttempts = mRetryAttempts;
+    if (!function.isHA()) {
+      maxRetryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        retryAttempts++;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
+
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
-        if (se instanceof ServerOperationException) {
+
+        if ((maxRetryAttempts--) < 1) {
-        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !function.isHA() */)
-          throw se;
-          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1);
+          resultCollector, hasResult, failedNodes, maxRetryAttempts);
+
-
-    int retryAttempts = 0;
-    int maxRetryAttempts = 0;
-    if (isHA) {
-      maxRetryAttempts = mRetryAttempts;
+
+    int maxRetryAttempts = mRetryAttempts;
+    if (!isHA) {
+      maxRetryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
+
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
-        }
-        if (se instanceof ServerOperationException) {
-          throw se;
-        }
-        retryAttempts++;
-        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !isHA */)
-          throw se;
-        reexecute = true;
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
+        }
+
+        if ((maxRetryAttempts--) < 1) {
+          throw se;
+        }
+
+        reexecuteForServ = true;
-          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1, isHA, optimizeForWrite);
+          resultCollector, hasResult, failedNodes, maxRetryAttempts, isHA, optimizeForWrite);
-      byte hasResult, Set<String> failedNodes, int maxRetryAttempts) {
+      byte hasResult, Set<String> failedNodes, int retryAttempts) {
+
-
-    int retryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
+    int maxRetryAttempts = retryAttempts;
+
-      reexecute = false;
-      if (isDebugEnabled) {
-        logger.debug(
-            "ExecuteRegionFunction#reexecute: Sending Function Execution Message: {} to Server using pool: {} with failed nodes: {}",
-            reExecuteOp.getMessage(), pool, failedNodes);
-      }
+
+        reexecute = false;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
-        reexecute = true;
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger
-              .debug("ExecuteRegionFunctionOp#reexecute : Received ServerConnectivity Exception.");
+
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
-        if (se instanceof ServerOperationException) {
+        if ((maxRetryAttempts--) < 1) {
-        retryAttempts++;
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
-          throw se;
-        reexecute = true;
-      byte hasResult, Set<String> failedNodes, int maxRetryAttempts, boolean isHA,
+      byte hasResult, Set<String> failedNodes, int retryAttempts, boolean isHA,
+
-
-    int retryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    do {
-      reexecute = false;
+    int maxRetryAttempts = retryAttempts;
+    do {
-      if (isDebugEnabled) {
-        logger.debug(
-            "ExecuteRegionFunction#reexecute : Sending Function Execution Message: {} to Server using pool: {}",
-            reExecuteOp.getMessage(), pool);
-      }
+
+        reexecute = false;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
-        reexecute = true;
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
-        }
-        if (se instanceof ServerOperationException) {
-          throw se;
-        }
-        retryAttempts++;
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
-          throw se;
-        reexecute = true;
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
+        }
+
+        if ((maxRetryAttempts--) < 1) {
+          throw se;
+        }
+
