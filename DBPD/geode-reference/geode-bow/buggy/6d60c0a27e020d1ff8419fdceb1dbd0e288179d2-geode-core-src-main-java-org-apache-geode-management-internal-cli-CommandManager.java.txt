GEODE-5535: Upgrade FastClasspathScanner to 4.0.6 (#2310)

- Use less memory for scanning by reusing a single
  instance of ClassGraph.
-  private void loadUserCommands() {
-    final Set<String> userCommandPackages = new HashSet<String>();
+  private Set<String> getUserCommandPackages() {
+    final Set<String> userCommandPackages = new HashSet<>();
+    return userCommandPackages;
+  }
+
+  private void loadUserCommands(ClasspathScanLoadHelper scanner, Set<String> restrictedToPackages) {
+    if (restrictedToPackages.size() == 0) {
+      return;
+    }
+
-    for (String userCommandPackage : userCommandPackages) {
-      try {
-        Set<Class<?>> foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(
-            CommandMarker.class, userCommandPackage, GfshCommand.class.getPackage().getName());
-        for (Class<?> klass : foundClasses) {
-          try {
-            add((CommandMarker) klass.newInstance());
-          } catch (Exception e) {
-            logWrapper.warning("Could not load User Commands from: " + klass + " due to "
-                + e.getLocalizedMessage()); // continue
-          }
+    try {
+      Set<Class<?>> foundClasses = scanner.scanPackagesForClassesImplementing(CommandMarker.class,
+          restrictedToPackages.toArray(new String[] {}));
+      for (Class<?> klass : foundClasses) {
+        try {
+          add((CommandMarker) klass.newInstance());
+        } catch (Exception e) {
+          logWrapper.warning("Could not load User Commands from: " + klass + " due to "
+              + e.getLocalizedMessage()); // continue
-        raiseExceptionIfEmpty(foundClasses, "User Command");
-      } catch (IllegalStateException e) {
-        logWrapper.warning(e.getMessage(), e);
-        throw e;
+      raiseExceptionIfEmpty(foundClasses, "User Command");
+    } catch (IllegalStateException e) {
+      logWrapper.warning(e.getMessage(), e);
+      throw e;
-    loadUserCommands();
+    Set<String> userCommandPackages = getUserCommandPackages();
+    Set<String> packagesToScan = new HashSet<>(userCommandPackages);
+    packagesToScan.add("org.apache.geode.management.internal.cli.converters");
+    packagesToScan.add("org.springframework.shell.converters");
+    packagesToScan.add(GfshCommand.class.getPackage().getName());
+    packagesToScan.add(InternalGfshCommand.class.getPackage().getName());
+    // Create one scanner to be used everywhere
+    ClasspathScanLoadHelper scanner = new ClasspathScanLoadHelper(packagesToScan);
+
+    loadUserCommands(scanner, userCommandPackages);
-    loadGeodeCommands();
-    loadConverters();
+    loadGeodeCommands(scanner);
+    loadConverters(scanner);
-  private void loadConverters() {
+  private void loadConverters(ClasspathScanLoadHelper scanner) {
-      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(Converter.class,
+      foundClasses = scanner.scanPackagesForClassesImplementing(Converter.class,
-      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(Converter.class,
+      foundClasses = scanner.scanPackagesForClassesImplementing(Converter.class,
-  private void loadGeodeCommands() {
+  private void loadGeodeCommands(ClasspathScanLoadHelper scanner) {
-      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(CommandMarker.class,
+      foundClasses = scanner.scanPackagesForClassesImplementing(CommandMarker.class,
