GEODE-6195: Check if returned value is caused by a retried putIfAbsent operation (#2993)

* GEODE-6195: Check if returned value is caused by a retried putIfAbsent operation

  * Treats a retried putIfAbsent operation a successful one if returned value is the value to be put
  * Move the check value methods to ValueComparisonHelper class.

-      if (event.hasRetried() && putIfAbsentResultHasSameValue(value, result)) {
+      if (event.hasRetried() && putIfAbsentResultHasSameValue(true, value, result)) {
-  boolean putIfAbsentResultHasSameValue(Object value, Object result) {
-    if (Token.isInvalid(result)) {
-      return value == null;
+  boolean putIfAbsentResultHasSameValue(boolean isClient, Object valueToBePut, Object result) {
+    if (Token.isInvalid(result) || result == null) {
+      return valueToBePut == null;
-    return result.equals(value);
+
+    boolean isCompressedOffHeap =
+        isClient ? false : getAttributes().getOffHeap() && getAttributes().getCompressor() != null;
+    return ValueComparisonHelper.checkEquals(valueToBePut, result, isCompressedOffHeap, getCache());
+  }
+
+  boolean bridgePutIfAbsentResultHasSameValue(byte[] valueToBePut, boolean isValueToBePutObject,
+      Object result) {
+    if (Token.isInvalid(result) || result == null) {
+      return valueToBePut == null;
+    }
+
+    boolean isCompressedOffHeap =
+        getAttributes().getOffHeap() && getAttributes().getCompressor() != null;
+    if (isValueToBePutObject) {
+      return ValueComparisonHelper.checkEquals(EntryEventImpl.deserialize(valueToBePut), result,
+          isCompressedOffHeap, getCache());
+    }
+    return ValueComparisonHelper.checkEquals(valueToBePut, result, isCompressedOffHeap, getCache());
-
-
-        return event.getOldValue();
+        Object result = event.getOldValue();
+        if (event.isPossibleDuplicate() && putIfAbsentResultHasSameValue(false, value, result)) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("possible duplicate putIfAbsent event and result is the value to be put,"
+                + " treat this as a successful putIfAbsent");
+          }
+          return null;
+        }
+        return result;
-      } else if (oldValue == null) {
-        // fix for 42189, putIfAbsent on server can return null if the
-        // operation was not performed (oldValue in cache was null).
-        // We return the INVALID token instead of null to distinguish
-        // this case from successful operation
-        return Token.INVALID;
-      }
+      } else {
+        if (value != null) {
+          assert (value instanceof byte[]);
+        }
+        if (event.isPossibleDuplicate()
+            && bridgePutIfAbsentResultHasSameValue((byte[]) value, isObject, oldValue)) {
+          // result is possibly due to the retry
+          if (logger.isDebugEnabled()) {
+            logger.debug("retried putIfAbsent and got oldValue as the value to be put,"
+                + " treat this as a successful putIfAbsent");
+          }
+          return null;
+        }
+        if (oldValue == null) {
+          // fix for 42189, putIfAbsent on server can return null if the
+          // operation was not performed (oldValue in cache was null).
+          // We return the INVALID token instead of null to distinguish
+          // this case from successful operation
+          return Token.INVALID;
+        }
+      }
