GEODE-6283: have the management rest controller call the internal management service

* GEODE-6283: have the management rest controller call the internal cluster management service to actually create the region

* inject cluster management service to the rest controller
* have the controller produce json string for response
* refactor the controller exception handler to always send back json string

+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
+import org.eclipse.jetty.webapp.WebAppContext;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.internal.cache.InternalCacheForClientAccess;
+  private final InternalCache cache;
-  public ManagementAgent(DistributionConfig config, SecurityService securityService) {
+  public ManagementAgent(DistributionConfig config, InternalCache cache) {
-    this.securityService = securityService;
+    this.cache = cache;
+    this.securityService = cache.getSecurityService();
-  public static InternalCacheForClientAccess getCache() {
-    InternalCache cache = (InternalCache) CacheFactory.getAnyInstance();
-    if (cache != null) {
-      return cache.getCacheForProcessingClientRequests();
-    }
-    return null;
-  }
-
+  public WebAppContext addWebApplication(String webAppContext, String warFilePath,
+      Pair<String, Object>... attributeNameValuePairs) {
+    if (httpServer == null) {
+      logger.info(
+          String.format("unable to add %s webapp. Http service is not started on this member.",
+              webAppContext));
+      return null;
+    }
+
+    return JettyHelper
+        .addWebApplication(httpServer, webAppContext, warFilePath, attributeNameValuePairs);
+  }
+
-        .getManagementService(getCache());
+        .getManagementService(cache);
-              "Unable to find GemFire V1 Management REST API WAR file; the Management REST Interface for GemFire will not be accessible.");
-        }
-      }
-
-      // Find the V2 Management rest WAR file
-      final String gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
-      if (gemfireManagementWar == null) {
-        if (logger.isDebugEnabled()) {
-          logger.debug(
-              "Unable to find GemFire V2 Management REST API WAR file; the Management REST Interface for GemFire will not be accessible.");
+              "Unable to find Geode V1 Management REST API WAR file; the Management REST Interface for Geode will not be accessible.");
-            "Unable to find Pulse web application WAR file; Pulse for GemFire will not be accessible";
+            "Unable to find Pulse web application WAR file; Pulse for Geode will not be accessible";
-            "Unable to find GemFire Developer REST API WAR file; the Developer REST Interface for GemFire will not be accessible.";
+            "Unable to find Geode Developer REST API WAR file; the Developer REST Interface for Geode will not be accessible.";
-        if (agentUtil.isAnyWarFileAvailable(gemfireWar, gemfireManagementWar, pulseWar,
-            gemfireAPIWar)) {
+        if (agentUtil.isAnyWarFileAvailable(gemfireWar, pulseWar, gemfireAPIWar)) {
+          Pair<String, Object> securityServiceAttr =
+              new ImmutablePair<>(JettyHelper.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+                  securityService);
+          Pair<String, Object> sslConfigAttr =
+              new ImmutablePair<>(JettyHelper.GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM,
+                  createSslProps());
+
+          // if jmx manager is running, admin rest should be available, either on locator or server
-            this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/gemfire", gemfireWar,
-                securityService, null);
-            this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/geode-mgmt",
-                gemfireWar, securityService, null);
+            addWebApplication("/gemfire", gemfireWar, securityServiceAttr);
+            addWebApplication("/geode-mgmt", gemfireWar, securityServiceAttr);
-          if (agentUtil.isAnyWarFileAvailable(gemfireManagementWar)) {
-            this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/geode-management",
-                gemfireManagementWar, securityService, null);
-          }
-
+          // if jmx manager is running, pulse should be available, either on locator or server
+          // we need to pass in the sllConfig to pulse because it needs it to make jmx connection
-            this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/pulse", pulseWar,
-                securityService, createSslProps());
+            addWebApplication("/pulse", pulseWar, securityServiceAttr, sslConfigAttr);
+          // the dev rest api is only available on servers
-              this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/geode",
-                  gemfireAPIWar, securityService, null);
-              this.httpServer = JettyHelper.addWebApplication(this.httpServer, "/gemfire-api",
-                  gemfireAPIWar, securityService, null);
+              addWebApplication("/geode", gemfireAPIWar, securityServiceAttr);
+              addWebApplication("/gemfire-api", gemfireAPIWar, securityServiceAttr);
-            InternalCache cache = getCache();
-
-          logger.error("Failed to properly release resources held by the HTTP service: {}",
+          logger.info("Failed to properly release resources held by the HTTP service: {}",
