GEODE-77: avoids creating a split-brain if joining times out and network partition detection is not enabled

-    boolean hasContactedALocator;
+    int locatorsContacted = 0;
+    boolean hasContactedAJoinedLocator;
+      long locatorWaitTime = services.getConfig().getLocatorWaitTime() * 1000;
+      long locatorGiveUpTime = startTime + locatorWaitTime;
-          if (System.currentTimeMillis() > giveupTime) {
+          long now = System.currentTimeMillis();
+          if (state.locatorsContacted <= 0) {
+            if (now > locatorGiveUpTime) {
+              // break out of the loop and return false
+              break;
+            }
+            // reset the tries count and timer since we haven't actually tried to join yet
+            tries = 0;
+            giveupTime = now + timeout;
+          } else if (System.currentTimeMillis() > giveupTime) {
-      if (!this.isJoined && state.hasContactedALocator) {
+      if (!this.isJoined && state.hasContactedAJoinedLocator) {
-    // TODO - should we try more than one preferred coordinator
-    // before jumping to asking view-members who the coordinator is?
-    if ( !state.alreadyTried.isEmpty() && state.view != null) {
+    // If we've already tried to bootstrap from locators that
+    // haven't joined the system (e.g., a collocated locator)
+    // then jump to using the membership view to try to find
+    // the coordinator
+    if ( !state.hasContactedAJoinedLocator && state.view != null) {
-    long waitTime = services.getConfig().getLocatorWaitTime() * 1000;
-    if (waitTime <= 0) {
-      waitTime = services.getConfig().getMemberTimeout() * 2;
-    }
-    long giveUpTime = System.currentTimeMillis() + waitTime;
+    
+    long giveUpTime = System.currentTimeMillis() + services.getConfig().getLocatorWaitTime() * 1000;
+    
+
+    state.hasContactedAJoinedLocator = false;
+    state.locatorsContacted = 0;
-          if (response != null && response.getCoordinator() != null) {
-            anyResponses = true;
-            NetView v = response.getView();
-            int viewId = v == null? -1 : v.getViewId();
-            if (viewId > state.viewId) {
-              // if the view has changed it is possible that a member
-              // that we already tried to join with will become coordinator
-              state.alreadyTried.clear();
-              state.viewId = viewId;
-              state.view = v;
-              state.registrants.clear();
-              if (response.getRegistrants() != null) {
-                state.registrants.addAll(response.getRegistrants());
-              }
+          // TODO we don't want to give up on the locators if we receive
+          // a response from a locator that's joined the system.  Otherwise
+          // we'll give up and cause a split-brain
+          if (response != null) {
+            state.locatorsContacted++;
+            if (response.getSenderId() != null && response.getSenderId().getVmViewId() >= 0) {
+              state.hasContactedAJoinedLocator = true;
-            coordinators.add(response.getCoordinator());
-            if (!flagsSet) {
-              flagsSet = true;
-              inheritSettingsFromLocator(addr, response);
+            if (response.getCoordinator() != null) {
+              anyResponses = true;
+              NetView v = response.getView();
+              int viewId = v == null? -1 : v.getViewId();
+              if (viewId > state.viewId) {
+                // if the view has changed it is possible that a member
+                // that we already tried to join with will become coordinator
+                state.alreadyTried.clear();
+                state.viewId = viewId;
+                state.view = v;
+                state.registrants.clear();
+                if (response.getRegistrants() != null) {
+                  state.registrants.addAll(response.getRegistrants());
+                }
+              }
+              coordinators.add(response.getCoordinator());
+              if (!flagsSet) {
+                flagsSet = true;
+                inheritSettingsFromLocator(addr, response);
+              }
-      if (coordinators.isEmpty()) {
-        return false;
-      }
-      if (!anyResponses) {
-        try { Thread.sleep(1000); } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          return false;
-        }
-      }
+    if (coordinators.isEmpty()) {
+      return false;
+    }
+
