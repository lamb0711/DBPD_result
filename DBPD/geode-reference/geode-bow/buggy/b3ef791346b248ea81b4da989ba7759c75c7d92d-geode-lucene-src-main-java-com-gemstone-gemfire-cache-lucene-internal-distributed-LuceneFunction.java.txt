GEODE-11: Fixing a class cast exception when LuceneFunction has an error

LuceneFunction was using sendException to return exceptions to caller.
But the behavior of sendException is actually to pass the exception to
the addResult method, which is not what we want in this case.

Adding an integration test of the same. Changing LuceneFunctionJUnitTest
to use mockito and changing the expectations of what LuceneFunction
will do after an exception.

+import com.gemstone.gemfire.cache.execute.FunctionException;
+import com.gemstone.gemfire.internal.cache.execute.BucketMovedException;
-      resultSender.sendException(new IllegalArgumentException("Missing search context"));
-      return;
+      throw new IllegalArgumentException("Missing search context");
-      resultSender.sendException(new IllegalArgumentException("Missing query provider"));
-      return;
+      throw new IllegalArgumentException("Missing query provider");
-      resultSender.sendException(e);
-      return;
+      logger.warn("", e);
+      throw new FunctionException(e);
-    } catch (IOException e) {
-      logger.warn("", e);
-      resultSender.sendException(e);
-      return;
-    } catch (BucketNotFoundException e) {
-      logger.warn("", e);
-      resultSender.sendException(e);
-      return;
-    }
-
-    TopEntriesCollector mergedResult;
-    try {
-      mergedResult = (TopEntriesCollector) manager.reduce(results);
+      TopEntriesCollector mergedResult = (TopEntriesCollector) manager.reduce(results);
-    } catch (IOException e) {
+    } catch (IOException|BucketNotFoundException e) {
-      resultSender.sendException(e);
-      return;
+      throw new FunctionException(e);
