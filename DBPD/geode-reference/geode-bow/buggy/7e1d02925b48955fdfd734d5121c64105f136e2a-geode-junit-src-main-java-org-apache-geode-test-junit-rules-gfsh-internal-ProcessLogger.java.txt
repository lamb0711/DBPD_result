GEODE-3859: Simplify API for reading output from a GfshScript

-package org.apache.geode.test.junit.rules.gfsh;
+package org.apache.geode.test.junit.rules.gfsh.internal;
+
+import static java.util.stream.Collectors.joining;
+import static java.util.stream.Collectors.toList;
-import com.google.common.collect.Lists;
+import org.apache.commons.lang.SystemUtils;
-  private final Queue<String> stdOutLines = new ConcurrentLinkedQueue<>();
-  private final Queue<String> stdErrorLines = new ConcurrentLinkedQueue<>();
-  private final StreamGobbler stdOutGobbler;
-  private final StreamGobbler stdErrGobbler;
+  private final Queue<OutputLine> outputLines = new ConcurrentLinkedQueue<>();
-    this.stdOutGobbler = new StreamGobbler(process.getInputStream(), this::consumeInfoMessage);
-    this.stdErrGobbler = new StreamGobbler(process.getErrorStream(), this::consumeErrorMessage);
+    StreamGobbler stdOutGobbler =
+        new StreamGobbler(process.getInputStream(), this::consumeInfoMessage);
+    StreamGobbler stdErrGobbler =
+        new StreamGobbler(process.getErrorStream(), this::consumeErrorMessage);
-    stdOutLines.add(message);
+    outputLines.add(OutputLine.fromStdOut(message));
-    stdErrorLines.add(message);
+    outputLines.add(OutputLine.fromStdErr(message));
-    return Lists.newArrayList(stdOutLines.iterator());
+    return getOutputLines(OutputLine.OutputSource.STD_OUT);
-    return Lists.newArrayList(stdErrorLines.iterator());
+    return getOutputLines(OutputLine.OutputSource.STD_ERR);
+  }
+
+  public List<String> getOutputLines() {
+    return outputLines.stream().map(OutputLine::getLine).collect(toList());
+  }
+
+  public String getOutputText() {
+    return outputLines.stream().map(OutputLine::getLine)
+        .collect(joining(SystemUtils.LINE_SEPARATOR));
+  }
+
+  private List<String> getOutputLines(OutputLine.OutputSource source) {
+    return outputLines.stream().filter(line -> line.getSource().equals(source))
+        .map(OutputLine::getLine).collect(toList());
