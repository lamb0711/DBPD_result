GEODE-2474: refactor code to use SystemUtils for OS system properties

+import static org.apache.geode.internal.lang.SystemUtils.*;
+
+import java.io.InputStream;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.logging.LogService;
+@SuppressWarnings({"serial"})
+  private static final Logger logger = LogService.getLogger();
-  private static final String OS_NAME_LINUX = "Linux";
-  private static final String OS_NAME_MACOS = "darwin";
-  private static final String OS_NAME_SOLARIS = "SunOS";
-  private static final String OS_NAME_PROP = "os.name";
-  private static final String OS_ARCH_PROP = "os.arch";
-  private static final String OS_VERSION_PROP = "os.version";
-
-    InternalDistributedSystem ds = InternalDistributedSystem.getConnectedInstance();
-    if (ds.isConnected()) {
-      InternalDistributedMember distributedMember = ds.getDistributedMember();
-      String host = distributedMember.getHost();
-      NetstatFunctionArgument args = (NetstatFunctionArgument) context.getArguments();
-      boolean withlsof = args.isWithlsof();
-      String lineSeparator = args.getLineSeparator();
-      String netstatOutput = executeCommand(lineSeparator, withlsof);
-
-      StringBuilder netstatInfo = new StringBuilder();
-      addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator); // {0} will be replaced on
-                                                                    // Manager
-
-      context.getResultSender().lastResult(new NetstatFunctionResult(host, netstatInfo.toString(),
-          CliUtil.compressBytes(netstatOutput.getBytes())));
+    DistributedSystem ds = InternalDistributedSystem.getConnectedInstance();
+    if (ds == null || !ds.isConnected()) {
+      return;
+
+    String host = ds.getDistributedMember().getHost();
+    NetstatFunctionArgument args = (NetstatFunctionArgument) context.getArguments();
+    boolean withlsof = args.isWithlsof();
+    String lineSeparator = args.getLineSeparator();
+
+    String netstatOutput = executeCommand(lineSeparator, withlsof);
+
+    StringBuilder netstatInfo = new StringBuilder();
+
+    // {0} will be replaced on Manager
+    addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator);
+
+    NetstatFunctionResult result = new NetstatFunctionResult(host, netstatInfo.toString(),
+        CliUtil.compressBytes(netstatOutput.getBytes()));
+
+    context.getResultSender().lastResult(result);
+
+    String osInfo = getOsName() + " " + getOsVersion() + " " + getOsArchitecture();
+
-    String osInfo = System.getProperty(OS_NAME_PROP) + " " + System.getProperty(OS_VERSION_PROP)
-        + " " + System.getProperty(OS_ARCH_PROP);
-    String osName = System.getProperty(OS_NAME_PROP);
-    if (OS_NAME_LINUX.equalsIgnoreCase(osName)) {
+    if (isLinux()) {
-    } else if (OS_NAME_MACOS.equalsIgnoreCase(osName)) {
-      cmdOptionsList.add("-v");
-      cmdOptionsList.add("-a");
-      cmdOptionsList.add("-e");
-    } else if (OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
-      cmdOptionsList.add("-v");
-      cmdOptionsList.add("-a");
-    } else { // default to Windows
+    } else {
-    List<String> cmdOptionsList = new ArrayList<String>();
+    List<String> cmdOptionsList = new ArrayList<>();
-    ProcessBuilder procBuilder = new ProcessBuilder(cmdOptionsList);
+    if (logger.isDebugEnabled()) {
+      logger.debug("NetstatFunction executing {}", cmdOptionsList);
+    }
+
+    ProcessBuilder processBuilder = new ProcessBuilder(cmdOptionsList);
-      Process netstat = procBuilder.start();
-      InputStreamReader reader = new InputStreamReader(netstat.getInputStream());
-      BufferedReader breader = new BufferedReader(reader);
-      String line = "";
+      Process netstat = processBuilder.start();
+
+      InputStream is = netstat.getInputStream();
+      BufferedReader breader = new BufferedReader(new InputStreamReader(is));
+      String line;
+
+      // TODO: move to finally-block
-      // Send error also, if any
+      // TODO: change this to keep the full stack trace
-    String osName = System.getProperty(OS_NAME_PROP);
-    existingNetstatInfo.append("################ " + LSOF_COMMAND + " output ###################")
-        .append(lineSeparator);
-    if (OS_NAME_LINUX.equalsIgnoreCase(osName) || OS_NAME_MACOS.equalsIgnoreCase(osName)
-        || OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
+    existingNetstatInfo.append("################ ").append(LSOF_COMMAND)
+        .append(" output ###################").append(lineSeparator);
+
+    if (isLinux() || isMacOSX() || isSolaris()) {
+
+        // TODO: move this to finally-block
-        // Send error also, if any
+        // TODO: change this to keep the full stack trace
-  public static String executeCommand(final String lineSeparator, final boolean withlsof) {
+  private static String executeCommand(final String lineSeparator, final boolean withlsof) {
+  public static void main(final String[] args) {
+    String netstat = executeCommand(GfshParser.LINE_SEPARATOR, true);
+    System.out.println(netstat);
+  }
+
-    public NetstatFunctionArgument(String lineSeparator, boolean withlsof) {
+    public NetstatFunctionArgument(final String lineSeparator, final boolean withlsof) {
-    /**
-     * @return the lineSeparator
-     */
-    /**
-     * @return the withlsof
-     */
-    public NetstatFunctionResult(String host, String headerInfo,
-        DeflaterInflaterData compressedBytes) {
+    protected NetstatFunctionResult(final String host, final String headerInfo,
+        final DeflaterInflaterData compressedBytes) {
-    /**
-     * @return the host
-     */
-    /**
-     * @return the headerInfo
-     */
-    /**
-     * @return the compressedBytes
-     */
-
-  public static void main(String[] args) {
-    String netstat = executeCommand(GfshParser.LINE_SEPARATOR, true);
-    System.out.println(netstat);
-  }
