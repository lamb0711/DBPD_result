GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import java.util.concurrent.TimeoutException;
-import org.apache.geode.CancelException;
-import org.apache.geode.ForcedDisconnectException;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.SystemConnectException;
-import org.apache.geode.distributed.DistributedSystemDisconnectedException;
-import org.apache.geode.distributed.internal.DistributionException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberShunnedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.distributed.internal.membership.gms.api.MembershipTestHook;
-import org.apache.geode.internal.tcp.ConnectionException;
-import org.apache.geode.internal.tcp.MemberShunnedException;
-import org.apache.geode.security.GemFireSecurityException;
-   * Membership failure listeners - for testing
-   */
-  private List<MembershipTestHook> membershipTestHooks;
-
-  /**
-        try {
-          listener.newMemberConnected(m);
-        } catch (VirtualMachineError err) {
-          // If this ever returns, rethrow the error. We're poisoned
-          // now, so don't let this thread continue.
-          throw err;
-        } catch (DistributedSystemDisconnectedException e) {
-          // don't log shutdown exceptions
-        } catch (Throwable t) {
-          logger.info(String.format("Membership: Fault while processing view addition of %s",
-              m),
-              t);
-        }
+        listener.newMemberConnected(m);
-      try {
-        listener.viewInstalled(latestView);
-      } catch (DistributedSystemDisconnectedException se) {
-      }
+      listener.viewInstalled(latestView);
-   * @throws SystemConnectException - problem joining
-  private void join() {
+  private void join() throws MemberStartupException {
-          throw new GemFireConfigException("Unable to join the distributed system.  "
+          throw new MembershipConfigurationException("Unable to join the distributed system.  "
-
-      } catch (RuntimeException ex) {
-        throw ex;
-      } catch (Exception ex) {
-        if (ex.getCause() != null && ex.getCause().getCause() instanceof SystemConnectException) {
-          throw (SystemConnectException) (ex.getCause().getCause());
-        }
-        throw new DistributionException(
-            "An Exception was thrown while attempting to join the distributed system.",
-            ex);
-    try {
-      listener.memberDeparted(dm, crashed, reason);
-    } catch (DistributedSystemDisconnectedException se) {
-      // let's not get huffy about it
-    }
+    listener.memberDeparted(dm, crashed, reason);
-    // fix for bug #41329, hang waiting for replies
-    try {
-      listener.memberDeparted(mbr, true,
-          "failed to pass startup checks");
-    } catch (DistributedSystemDisconnectedException se) {
-      // let's not get huffy about it
-    }
+    listener.memberDeparted(mbr, true,
+        "failed to pass startup checks");
-          } catch (CancelException e) {
+          } catch (MembershipClosedException | MemberDisconnectedException e) {
-  protected void handleOrDeferMessage(Message<ID> msg) {
+  protected void handleOrDeferMessage(Message<ID> msg) throws MemberShunnedException {
-  protected void dispatchMessage(Message<ID> msg) {
+  protected void dispatchMessage(Message<ID> msg) throws MemberShunnedException {
-      messageListener.messageReceived((Message<ID>) v);
+      try {
+        messageListener.messageReceived((Message<ID>) v);
+      } catch (MemberShunnedException e) {
+        logger.error("View installation was blocked by a MemberShunnedException", e);
+      }
-      try {
-        listener.memberSuspect(suspect, who, suspectInfo.reason);
-      } catch (DistributedSystemDisconnectedException se) {
-        // let's not get huffy about it
-      }
+      listener.memberSuspect(suspect, who, suspectInfo.reason);
+    } else {
+      throw new IllegalArgumentException("unknown startup event: " + o);
-
-    else // sanity
-      throw new InternalGemFireError(
-          String.format("unknown startup event: %s", o));
-  public void processMessage(final Message<ID> msg) {
+  public void processMessage(final Message<ID> msg) throws MemberShunnedException {
-        if (membershipTestHooks != null) {
-          List<MembershipTestHook> l = membershipTestHooks;
-          for (final MembershipTestHook aL : l) {
-            MembershipTestHook dml = aL;
-            dml.beforeMembershipFailure(reason, e);
-          }
-        }
-        if (membershipTestHooks != null) {
-          List<MembershipTestHook> l = membershipTestHooks;
-          for (final MembershipTestHook aL : l) {
-            MembershipTestHook dml = aL;
-            dml.afterMembershipFailure(reason, e);
-          }
-        }
-  public boolean requestMemberRemoval(ID mbr, String reason) {
+  public boolean requestMemberRemoval(ID mbr, String reason) throws MemberDisconnectedException {
-      Throwable problem = e;
+      RuntimeException problem = e;
-        if (cause instanceof ForcedDisconnectException) {
-          problem = cause;
+        if ((cause instanceof MemberDisconnectedException)) {
+          throw (MemberDisconnectedException) cause;
-      throw new DistributedSystemDisconnectedException("Channel closed", problem);
+      throw new MembershipClosedException("Channel closed", problem);
-   * @throws DistributedSystemDisconnectedException if the system is shutting down
+   * @throws MembershipClosedException if the system is shutting down
-  public void checkCancelled() {
+  public void checkCancelled() throws MembershipClosedException {
-      throw new DistributedSystemDisconnectedException("Distributed System is shutting down",
+      throw new MembershipClosedException("Distributed System is shutting down",
-      throws InterruptedException {
+      throws InterruptedException, TimeoutException {
-  @Override
-  public void registerTestHook(MembershipTestHook mth) {
-    // lock for additions to avoid races during startup
-    latestViewWriteLock.lock();
-    try {
-      if (this.membershipTestHooks == null) {
-        this.membershipTestHooks = Collections.singletonList(mth);
-      } else {
-        List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
-        l.add(mth);
-        this.membershipTestHooks = l;
-      }
-    } finally {
-      latestViewWriteLock.unlock();
-    }
-  }
-
-  @Override
-  public void unregisterTestHook(MembershipTestHook mth) {
-    latestViewWriteLock.lock();
-    try {
-      if (this.membershipTestHooks != null) {
-        if (this.membershipTestHooks.size() == 1) {
-          this.membershipTestHooks = null;
-        } else {
-          List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
-          l.remove(mth);
-          this.membershipTestHooks = l;
-        }
-      }
-    } finally {
-      latestViewWriteLock.unlock();
-    }
-  }
-
-  public void start() {
-    try {
-      services.start();
-    } catch (ConnectionException e) {
-      throw new DistributionException(
-          "Unable to create membership manager",
-          e);
-    } catch (GemFireConfigException | SystemConnectException | GemFireSecurityException e) {
-      throw e;
-    } catch (RuntimeException e) {
-      Services.getLogger().error("Unexpected problem starting up membership services", e);
-      throw new SystemConnectException("Problem starting up membership services", e);
-    }
+  public void start() throws MemberStartupException {
+    services.start();
-    public void init(Services<ID> services) {
+    public void init(Services<ID> services) throws MembershipConfigurationException {
-    public void start() {
+    public void start() throws MemberStartupException {
-    public void joinDistributedSystem() {
+    public void joinDistributedSystem() throws MemberStartupException {
-      } catch (RuntimeException e) {
+      } catch (MemberStartupException | RuntimeException e) {
-      final Exception shutdownCause = new ForcedDisconnectException(reason);
+      final Exception shutdownCause = new MemberDisconnectedException(reason);
-            new ForcedDisconnectException("reconnecting system failed to connect"));
+            new MemberDisconnectedException("reconnecting system failed to connect"));
-        } catch (CancelException e) {
-          // safe to ignore - a forced disconnect probably occurred
+        } catch (Exception e) {
+          logger.info("Quorum-loss listener threw an exception", e);
-    public void processMessage(Message<ID> msg) {
+    public void processMessage(Message<ID> msg) throws MemberShunnedException {
