refactor locator creation to use interfaces.  Introduced NetMember interface for this purpose.  Added an initial unit test for the membership manager.  Changed logger initialization to ignore the log4j2.xml configuration file in the jgroups jar.

-import com.gemstone.gemfire.distributed.internal.membership.NetMember;
-import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
+import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberServices;
-import com.gemstone.gemfire.internal.tcp.ConnectionException;
-import com.gemstone.gemfire.internal.tcp.TCPConduit;
-  private static final Logger logger = Services.getLogger();
+  private static final Logger logger = GMSMemberServices.getLogger();
-  protected TCPConduit conduit;
-  
-  protected final Map memberToStubMap = new ConcurrentHashMap();
+  protected final Map<InternalDistributedMember, Stub> memberToStubMap = 
+      new ConcurrentHashMap<InternalDistributedMember, Stub>();
-  protected final Map stubToMemberMap = new ConcurrentHashMap();
+  protected final Map<Stub, InternalDistributedMember> stubToMemberMap = 
+      new ConcurrentHashMap<Stub, InternalDistributedMember>();
-  /** the type of vm we're running in. This is also in the membership id, 
-      but is needed by some methods before the membership id has been
-      created. */
-  int vmKind;
-
-  private Services services;
+  private GMSMemberServices services;
-  public void init(Services services) {
+  public void init(GMSMemberServices services) {
+    
+    surpriseMemberTimeout = Math.max(20 * DistributionConfig.DEFAULT_MEMBER_TIMEOUT,
+        20 * config.getMemberTimeout());
+    surpriseMemberTimeout = Integer.getInteger("gemfire.surprise-member-timeout", surpriseMemberTimeout).intValue();
-
-    this.vmKind = MemberAttributes.DEFAULT.getVmKind(); // we need this during jchannel startup
-
-    surpriseMemberTimeout = Math.max(20 * DistributionConfig.DEFAULT_MEMBER_TIMEOUT,
-        20 * config.getMemberTimeout());
-    surpriseMemberTimeout = Integer.getInteger("gemfire.surprise-member-timeout", surpriseMemberTimeout).intValue();
-
-      directChannel.getConduit().setVmViewID(address.getVmViewId());
+      directChannel.setLocalAddr(address);
+      Stub stub = directChannel.getLocalStub();
+      memberToStubMap.put(address, stub);
+      stubToMemberMap.put(stub, address);
-    // in order to debug startup issues it we need to announce the membership
+    this.hasConnected = true;
+
+    // in order to debug startup issues we need to announce the membership
-    if (!services.getConfig().getDistributionConfig().getDisableTcp()) {
-      this.conduit = directChannel.getConduit();
-      directChannel.setLocalAddr(address);
-      Stub stub = conduit.getId();
-      memberToStubMap.put(address, stub);
-      stubToMemberMap.put(stub, address);
-    }
-    
-    this.hasConnected = true;
-      conduit.getCancelCriterion().checkCancelInProgress(null);
+      directChannel.getCancelCriterion().checkCancelInProgress(null);
-          conduit.getCancelCriterion().checkCancelInProgress(e);
+          directChannel.getCancelCriterion().checkCancelInProgress(e);
-  public Services getServices() {
+  public GMSMemberServices getServices() {
-    // TODO: could we guarantee not to allocate objects?  We're using Darrel's 
+    // could we guarantee not to allocate objects?  We're using Darrel's 
-  /**
-   * @throws ConnectionException if the conduit has stopped
-   */
-  public void reset() throws DistributionException
-  {
-    if (conduit != null) {
-      try {
-        conduit.restart();
-      } catch (ConnectionException e) {
-        throw new DistributionException(LocalizedStrings.GroupMembershipService_UNABLE_TO_RESTART_CONDUIT.toLocalizedString(), e);
-      }
-    }
-  }
-
-    // Bogus stub object if direct channels not being used
-    if (conduit == null)
+
+    if (services.getConfig().getDistributionConfig().getDisableTcp()) {
+    }
-    Services.setSecurityLogWriter(writer);
+    GMSMemberServices.setSecurityLogWriter(writer);
