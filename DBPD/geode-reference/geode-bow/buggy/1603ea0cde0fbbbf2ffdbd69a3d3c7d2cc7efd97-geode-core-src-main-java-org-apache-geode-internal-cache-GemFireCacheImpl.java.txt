GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

+import static java.util.Objects.requireNonNull;
+import org.apache.geode.internal.cache.tier.Acceptor;
-  private final List<CacheServerImpl> allCacheServers = new CopyOnWriteArrayList<>();
+  private final List<InternalCacheServer> allCacheServers = new CopyOnWriteArrayList<>();
+  private final AtomicReference<InternalCacheServer> gatewayReceiverServer =
+      new AtomicReference<>();
+
-    for (CacheServerImpl cacheServer : cache.allCacheServers) {
-      AcceptorImpl acceptor = cacheServer.getAcceptor();
+    for (InternalCacheServer cacheServer : cache.allCacheServers) {
+      Acceptor acceptor = cacheServer.getAcceptor();
+    InternalCacheServer receiverServer = cache.gatewayReceiverServer.get();
+    Acceptor acceptor = receiverServer.getAcceptor();
+    if (acceptor != null) {
+      acceptor.emergencyClose();
+    }
+
-    for (CacheServerImpl cacheServer : this.allCacheServers) {
+    for (InternalCacheServer cacheServer : allCacheServers) {
-      this.allCacheServers.remove(cacheServer);
+      allCacheServers.remove(cacheServer);
+
+    InternalCacheServer receiverServer = gatewayReceiverServer.getAndSet(null);
+    if (receiverServer != null) {
+      if (isDebugEnabled) {
+        logger.debug("stopping gateway receiver server {}", receiverServer);
+      }
+      try {
+        receiverServer.stop();
+      } catch (CancelException e) {
+        if (isDebugEnabled) {
+          logger.debug("Ignored cache closure while closing gateway receiver server {}",
+              receiverServer, e);
+        }
+      }
+      stoppedCacheServer = true;
+    }
+
-    return addCacheServer(false);
-  }
-
-  @Override
-  public CacheServer addCacheServer(boolean isGatewayReceiver) {
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    CacheServerImpl cacheServer = new CacheServerImpl(this, isGatewayReceiver);
-    this.allCacheServers.add(cacheServer);
+    InternalCacheServer server = new ServerBuilder(this, securityService).createServer();
+    allCacheServers.add(server);
-    return cacheServer;
+    return server;
-    boolean removed = this.allCacheServers.remove(cacheServer);
+    boolean removed = allCacheServers.remove(cacheServer);
+  public InternalCacheServer addGatewayReceiverServer(GatewayReceiver receiver) {
+    throwIfClient();
+    stopper.checkCancelInProgress(null);
+
+    requireNonNull(receiver, "GatewayReceiver must be supplied to add a server endpoint.");
+    requireNonNull(gatewayReceiver.get(),
+        "GatewayReceiver must be added before adding a server endpoint.");
+
+    InternalCacheServer receiverServer = new ServerBuilder(this, securityService)
+        .forGatewayReceiver(receiver).createServer();
+    gatewayReceiverServer.set(receiverServer);
+
+    sendAddCacheServerProfileMessage();
+    return receiverServer;
+  }
+
+  @Override
+  public boolean removeGatewayReceiverServer(InternalCacheServer receiverServer) {
+    boolean removed = gatewayReceiverServer.compareAndSet(receiverServer, null);
+    sendRemoveCacheServerProfileMessage();
+    return removed;
+  }
+
+  @Override
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
+    requireNonNull(receiver, "GatewayReceiver must be supplied.");
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    List<CacheServer> cacheServersWithoutReceiver = null;
-    if (!this.allCacheServers.isEmpty()) {
-      for (CacheServerImpl cacheServer : this.allCacheServers) {
-        // If CacheServer is a GatewayReceiver, don't return as part of CacheServers
-        if (!cacheServer.isGatewayReceiver()) {
-          if (cacheServersWithoutReceiver == null) {
-            cacheServersWithoutReceiver = new ArrayList<>();
-          }
-          cacheServersWithoutReceiver.add(cacheServer);
-        }
-      }
-    }
-    if (cacheServersWithoutReceiver == null) {
-      cacheServersWithoutReceiver = Collections.emptyList();
-    }
-    return cacheServersWithoutReceiver;
+    return Collections.unmodifiableList(allCacheServers);
-  public List getCacheServersAndGatewayReceiver() {
-    return this.allCacheServers;
+  public List<InternalCacheServer> getCacheServersAndGatewayReceiver() {
+    List<InternalCacheServer> allServers = new ArrayList<>(allCacheServers);
+
+    InternalCacheServer receiverServer = gatewayReceiverServer.get();
+    if (receiverServer != null) {
+      allServers.add(receiverServer);
+    }
+
+    return Collections.unmodifiableList(allServers);
-   * @param r the partitioned region
+   * @param region the partitioned region
-  public boolean requiresNotificationFromPR(PartitionedRegion r) {
-    boolean hasSerialSenders = hasSerialSenders(r);
+  public boolean requiresNotificationFromPR(PartitionedRegion region) {
+    boolean hasSerialSenders = hasSerialSenders(region);
+
-      for (CacheServerImpl server : this.allCacheServers) {
+      for (InternalCacheServer server : allCacheServers) {
-
+
+    if (!hasSerialSenders) {
+      InternalCacheServer receiverServer = gatewayReceiverServer.get();
+      if (receiverServer != null && !receiverServer.getNotifyBySubscription()) {
+        hasSerialSenders = true;
+      }
+    }
+
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    return this.isServer || !this.allCacheServers.isEmpty();
+    return isServer || !allCacheServers.isEmpty();
