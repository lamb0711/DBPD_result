GEODE-17: clean up MXBeanCreationRule

-import org.junit.rules.ExternalResource;
+import com.gemstone.gemfire.test.junit.rules.DescribedExternalResource;
-import org.junit.runners.model.Statement;
-public class MXBeanCreationRule<T> extends ExternalResource {
+public class MXBeanCreationRule<T> extends DescribedExternalResource {
-  private Class<T> proxyClass;
+  private final Class<T> proxyClass;
+  private final String objectName;
-  private static class JMXConfigurationStatement extends Statement {
-
-    private final Description description;
-    private final Statement base;
-    private final MXBeanCreationRule mxRule;
-
-    JMXConfigurationStatement(Statement base, Description description, MXBeanCreationRule rule) {
-      this.description = description;
-      this.base = base;
-      this.mxRule = rule;
-    }
-
-    @Override
-    public void evaluate() throws Throwable {
-      mxRule.createConnection(getUser(), getPassword());
-      try {
-        base.evaluate();
-      } finally {
-        mxRule.close();
-      }
-    }
-
-    private String getUser() {
-      return description.getAnnotation(JMXConnectionConfiguration.class).user();
-    }
-
-    private String getPassword() {
-      return description.getAnnotation(JMXConnectionConfiguration.class).password();
-    }
-  }
-  public MXBeanCreationRule(int port, Class<T> proxyClass) {
+  public MXBeanCreationRule(int port, Class<T> proxyClass, String objectName) {
+    this.objectName = objectName;
-  private void close() throws Exception{
-    jmxConnector.close();
-  }
-
-  private void createConnection(String user, String password) throws Exception {
+  protected void before(Description description) throws Throwable {
+    String user = description.getAnnotation(JMXConnectionConfiguration.class).user();
+    String password = description.getAnnotation(JMXConnectionConfiguration.class).password();
-    ObjectName objectNamePattern = lookupObjectName();
-    ObjectInstance bean = (ObjectInstance) mbeanServer.queryMBeans(objectNamePattern, null).toArray()[0];
+    ObjectInstance bean = (ObjectInstance) mbeanServer.queryMBeans(ObjectName.getInstance(objectName), null).toArray()[0];
-  private ObjectName lookupObjectName() throws Exception {
-    switch (proxyClass.getName()) {
-      case "com.gemstone.gemfire.management.CacheServerMXBean":
-        return(ObjectName.getInstance("GemFire:service=CacheServer,*"));
-      default:
-        throw new RuntimeException("Unknown MBean class: " + proxyClass.getName());
-    }
+  /**
+   * Override to tear down your specific external resource.
+   */
+  protected void after(Description description) throws Throwable {
+    jmxConnector.close();
+    jmxConnector = null;
+    mbeanServer = null;
+    beanObjectName = null;
-  @Override
-  public Statement apply(Statement base, Description description) {
-    return new JMXConfigurationStatement(base, description, this);
-  }
