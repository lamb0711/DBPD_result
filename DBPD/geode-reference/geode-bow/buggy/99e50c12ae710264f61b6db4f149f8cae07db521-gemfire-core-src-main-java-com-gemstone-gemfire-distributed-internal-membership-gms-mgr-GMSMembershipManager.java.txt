GEODE-77(Sub-Task GEODE-205) After a network outage is fixed a former member can rejoin

-import java.net.DatagramSocket;
-import java.net.SocketException;
+import org.jgroups.JChannel;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messenger.JGroupsQuorumChecker;
+import com.gemstone.gemfire.distributed.internal.membership.gms.messenger.GMSQuorumChecker;
-   * during an auto-reconnect attempt set this to the old DistributedSystem's
-   * UDP port socket.  The failure detection protocol will pick it up and use it.
-   */
-  private volatile DatagramSocket oldDSUDPSocket;
-  
-  /**
-  /** an exception that caused the manager to shut down */
-  volatile Exception shutdownCause;
-
-    this.shutdownCause = null;
+    services.setShutdownCause(null);
-    this.oldDSUDPSocket = (DatagramSocket)transport.getOldDSMembershipInfo();
-    if (this.shutdownCause == null) {
-      this.shutdownCause = e;
+    if (services.getShutdownCause() == null) {
+      services.setShutdownCause(e);
-      if (this.shutdownCause != null) {
-        Throwable cause = this.shutdownCause;
+      if (services.getShutdownCause() != null) {
+        Throwable cause = services.getShutdownCause();
-            ne.initCause(this.shutdownCause);
+            ne.initCause(services.getShutdownCause());
-      if (this.shutdownCause != null) {
-        throw new DistributedSystemDisconnectedException("DistributedSystem is shutting down", this.shutdownCause);
+      if (services.getShutdownCause() != null) {
+        throw new DistributedSystemDisconnectedException("DistributedSystem is shutting down", services.getShutdownCause());
-  /**
-   * During jgroups connect the UDP protocol will invoke
-   * this method to find the DatagramSocket it should use instead of
-   * creating a new one.
-   */
-  public DatagramSocket getMembershipSocketForUDP() {
-    return this.oldDSUDPSocket;
-  }
-  
-    if ( ! (this.shutdownCause instanceof ForcedDisconnectException) ) {
+    if ( ! (services.isShutdownDueToForcedDisconnect()) ) {
-    try {
-      // TODO: creation of the quorum checker should be delegated to the
-      // Messenger component.  For JGroups we we really need JChannel instead
-      // of a datagram socket because jgroup
-      // doesn't have the "ping" handling that I built into the TP protocol.s
-      DatagramSocket sock = new DatagramSocket(this.address.getPort(),
-                               this.address.getNetMember().getInetAddress());
-      JGroupsQuorumChecker impl = new JGroupsQuorumChecker(
-          services.getJoinLeave().getView(), services.getConfig().getLossThreshold(),
-          sock);
-      impl.initialize();
-      this.quorumChecker = impl;
-      return impl;
-    } catch (SocketException e) {
-      logger.warn("unable to create quorum checker", e);
-      return null;
-    }
+
+    QuorumChecker impl = services.getMessenger().getQuorumChecker();
+    this.quorumChecker = impl;
+    return impl;
-    ((JGroupsQuorumChecker)checker).teardown();
+    ((GMSQuorumChecker)checker).suspend();
-      DatagramSocket sock = (DatagramSocket)checker.getMembershipInfo();
-      if (sock != null  &&  !sock.isClosed()) {
-        sock.close();
+      JChannel channel = (JChannel)checker.getMembershipInfo();
+      if (channel != null  &&  !channel.isClosed()) {
+        channel.close();
-      throw new DistributedSystemDisconnectedException(LocalizedStrings.GroupMembershipService_DISTRIBUTEDSYSTEM_IS_SHUTTING_DOWN.toLocalizedString(), this.shutdownCause);
+      throw new DistributedSystemDisconnectedException(LocalizedStrings.GroupMembershipService_DISTRIBUTEDSYSTEM_IS_SHUTTING_DOWN.toLocalizedString(), services.getShutdownCause());
-        throw new DistributedSystemDisconnectedException(LocalizedStrings.GroupMembershipService_DISTRIBUTEDSYSTEM_IS_SHUTTING_DOWN.toLocalizedString(), this.shutdownCause);
+        throw new DistributedSystemDisconnectedException(LocalizedStrings.GroupMembershipService_DISTRIBUTEDSYSTEM_IS_SHUTTING_DOWN.toLocalizedString(), services.getShutdownCause());
-    return this.shutdownCause;
-  }
-  
-  public void setShutdownCause(Exception t) {
-    this.shutdownCause = t;
+    return services.getShutdownCause();
-  public void forceDisconnect(String reason) {
-    if (GMSMembershipManager.this.shutdownInProgress) {
-      return;  // probably a race condition
-    }
-    saveCacheXmlForReconnect();
-    // make sure that we've received a connected channel and aren't responsible
-    // for the notification
-    if (!isJoining()) {
+  public void forceDisconnect(final String reason) {
+	if (GMSMembershipManager.this.shutdownInProgress) {
+		return; // probably a race condition
+	}
+	saveCacheXmlForReconnect();
+    Thread reconnectThread = new Thread (new Runnable() {
+      public void run() {
+        // make sure that we've received a connected channel and aren't responsible
+        // for the notification
+        if (!isJoining()) {
-      AlertAppender.getInstance().shuttingDown();
+          AlertAppender.getInstance().shuttingDown();
-//      Exception logException = e;
-//      if (e instanceof ForcedDisconnectException) {
-//        reason = "Membership closed: " + e;
-//        logException = null;
-//      }
-//      else {
-//        reason = "Membership closed";
-//      }
+          services.getCancelCriterion().cancel(reason);
+          // cache the exception so it can be appended to ShutdownExceptions
+          Exception shutdownCause = new ForcedDisconnectException(reason);
+          services.setShutdownCause(shutdownCause);
-      services.getCancelCriterion().cancel(reason);
-      // cache the exception so it can be appended to ShutdownExceptions
-      shutdownCause = new ForcedDisconnectException(reason);
+          if (!inhibitForceDisconnectLogging) {
+            logger.fatal(LocalizedMessage.create(
+                LocalizedStrings.GroupMembershipService_MEMBERSHIP_SERVICE_FAILURE_0, reason), shutdownCause);
+          }
+          
+          services.emergencyClose();
-      if (!inhibitForceDisconnectLogging) {
-        logger.fatal(LocalizedMessage.create(
-            LocalizedStrings.GroupMembershipService_MEMBERSHIP_SERVICE_FAILURE_0, reason), shutdownCause);
+          // stop server locators immediately since they may not have correct
+          // information.  This has caused client failures in bridge/wan
+          // network-down testing
+          InternalLocator loc = (InternalLocator)Locator.getLocator();
+          if (loc != null) {
+            loc.stop(!services.getConfig().getDistributionConfig()
+                         .getDisableAutoReconnect(), false);
+          }
+          
+          uncleanShutdown(reason, shutdownCause);
+        }
-      
-      services.emergencyClose();
-
-      // stop server locators immediately since they may not have correct
-      // information.  This has caused client failures in bridge/wan
-      // network-down testing
-      InternalLocator loc = (InternalLocator)Locator.getLocator();
-      if (loc != null) {
-        loc.stop(!services.getConfig().getDistributionConfig()
-                     .getDisableAutoReconnect(), false);
-      }
-      
-      uncleanShutdown(reason, shutdownCause);
-    }
+    });
+    reconnectThread.setName("DisconnectThread");
+    reconnectThread.setDaemon(false);
+    reconnectThread.start();
