GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


+import java.util.Collections;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.partitioned.RemoteFetchKeysMessage;
+  protected abstract InternalRegion getRegion();
+
-  public Set getRegionKeysForIteration(LocalRegion currRegion) {
+  public Set getRegionKeysForIteration() {
-          RemoteFetchKeysMessage.send(currRegion, state.getTarget());
+          RemoteFetchKeysMessage.send((LocalRegion) getRegion(), state.getTarget());
+  @Override
+  public int entryCount() {
+    try {
+      RemoteSizeMessage.SizeResponse response =
+          RemoteSizeMessage.send(this.state.getTarget(), getRegion());
+      return response.waitForSize();
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (Exception e) {
+      throw new TransactionException(e);
+    }
+  }
+
