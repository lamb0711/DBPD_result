Refactoring LuceneFunction, LuceneQueryProvider, and LuceneQueryFactory

LuceneFunction had a static RepositoryManager, I changed the code to get
look up the RepositoryManager from the LuceneService.

As part of that work, I noticed StringQueryProvider really needed access
to the index to lookup the field names, analyzer, etc. So I changed the
getQuery method to take an index, and removed the unneeded string
parameters.

Finally, I removed some of the mocking from
LuceneFunctionReadPathDUnitTest, which exposed some other issues:

* I switched RepositoryManager.getRepositories back to using a
RegionFunctionContext, because apparently context.getDataSet is *not*
the local data set.

* I canonicalized the regionPaths in LuceneService

+import com.gemstone.gemfire.cache.lucene.LuceneService;
+import com.gemstone.gemfire.cache.lucene.LuceneServiceProvider;
+import com.gemstone.gemfire.cache.lucene.internal.InternalLuceneIndex;
-  private static RepositoryManager repoManager;
-
+    
+    LuceneService service = LuceneServiceProvider.get(region.getCache());
+    InternalLuceneIndex index = (InternalLuceneIndex) service.getIndex(searchContext.getIndexName(), region.getFullPath());
+    RepositoryManager repoManager = index.getRepositoryManager();
-      query = queryProvider.getQuery();
+      query = queryProvider.getQuery(index);
+    int resultLimit = searchContext.getLimit();
-      int resultLimit = (searchContext == null ? LuceneQueryFactory.DEFAULT_LIMIT : searchContext.getLimit());
-      Collection<IndexRepository> repositories = getIndexRepositories(ctx, region);
+      Collection<IndexRepository> repositories = repoManager.getRepositories(ctx);
-        repo.query(query, 0, collector);
+        repo.query(query, resultLimit, collector);
-  private Collection<IndexRepository> getIndexRepositories(RegionFunctionContext ctx, Region region) throws BucketNotFoundException {
-    synchronized (LuceneFunction.class) {
-      return repoManager.getRepositories(region);
-    }
-  }
-
-  static synchronized void setRepositoryManager(RepositoryManager manager) {
-    repoManager = manager;
-  }
