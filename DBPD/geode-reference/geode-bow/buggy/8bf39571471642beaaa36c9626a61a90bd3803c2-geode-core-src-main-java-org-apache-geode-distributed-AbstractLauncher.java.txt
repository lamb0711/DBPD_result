Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The AbstractLauncher class is a base class for implementing various launchers to construct and run different GemFire
- * processes, like Cache Servers, Locators, Managers, HTTP servers and so on.
+ * The AbstractLauncher class is a base class for implementing various launchers to construct and
+ * run different GemFire processes, like Cache Servers, Locators, Managers, HTTP servers and so on.
-  
-  protected static final long READ_PID_FILE_TIMEOUT_MILLIS = 2*1000;
-  // @see http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=%2Fcom.ibm.java.doc.user.lnx.60%2Fuser%2Fattachapi.html
-  // @see http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/aboutjrockit.html#wp1083571
-  private static final List<String> ATTACH_API_PACKAGES = Arrays.asList(
-    "com.sun.tools.attach",
-    "com/sun/tools/attach",
-    "com.ibm.tools.attach",
-    "com/ibm/tools/attach"
-  );
+  protected static final long READ_PID_FILE_TIMEOUT_MILLIS = 2 * 1000;
+
+  // @see
+  // http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=%2Fcom.ibm.java.doc.user.lnx.60%2Fuser%2Fattachapi.html
+  // @see
+  // http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/aboutjrockit.html#wp1083571
+  private static final List<String> ATTACH_API_PACKAGES = Arrays.asList("com.sun.tools.attach",
+      "com/sun/tools/attach", "com.ibm.tools.attach", "com/ibm/tools/attach");
-  public static final String SIGNAL_HANDLER_REGISTRATION_SYSTEM_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "launcher.registerSignalHandlers";
+  public static final String SIGNAL_HANDLER_REGISTRATION_SYSTEM_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "launcher.registerSignalHandlers";
-  private static final String IBM_ATTACH_API_CLASS_NAME = "com.ibm.tools.attach.AgentNotSupportedException";
-  private static final String SUN_ATTACH_API_CLASS_NAME = "com.sun.tools.attach.AttachNotSupportedException";
+  private static final String IBM_ATTACH_API_CLASS_NAME =
+      "com.ibm.tools.attach.AgentNotSupportedException";
+  private static final String SUN_ATTACH_API_CLASS_NAME =
+      "com.sun.tools.attach.AttachNotSupportedException";
-  protected Logger logger = Logger.getLogger(getClass().getName()); // TODO:KIRK: does this need log4j2?
+  protected Logger logger = Logger.getLogger(getClass().getName()); // TODO:KIRK: does this need
+                                                                    // log4j2?
-          "WARNING!!! Not running a Sun JVM.  Could not find the sun.misc.Signal class; Signal handling disabled."));
+            "WARNING!!! Not running a Sun JVM.  Could not find the sun.misc.Signal class; Signal handling disabled."));
-    }
-    catch (SunAPINotFoundException e) {
+    } catch (SunAPINotFoundException e) {
-   * Asserts that the specified port is available on the specified network interface, indicated by it's assigned
-   * IP address, on this local system.
+   * Asserts that the specified port is available on the specified network interface, indicated by
+   * it's assigned IP address, on this local system.
-   * @param bindAddress an InetAddress indicating the bounded network interface to determine whether the service port
-   * is available or not.
+   * @param bindAddress an InetAddress indicating the bounded network interface to determine whether
+   *        the service port is available or not.
-   * @throws BindException if the network address and port are not available.  Address defaults to localhost (or all
-   * network interfaces on the local system) if null.
+   * @throws BindException if the network address and port are not available. Address defaults to
+   *         localhost (or all network interfaces on the local system) if null.
-  protected static void assertPortAvailable(final InetAddress bindAddress, final int port) throws BindException {
+  protected static void assertPortAvailable(final InetAddress bindAddress, final int port)
+      throws BindException {
-      throw new BindException(String.format("Network is unreachable; port (%1$d) is not available on %2$s.", port,
-        (bindAddress != null ? bindAddress.getCanonicalHostName() : "localhost")));
+      throw new BindException(
+          String.format("Network is unreachable; port (%1$d) is not available on %2$s.", port,
+              (bindAddress != null ? bindAddress.getCanonicalHostName() : "localhost")));
-   * Determines whether the specified property with name is set to a value in the referenced Properties. The property
-   * is considered "set" if the String value of the property is not non-null, non-empty and non-blank.  Therefore,
-   * the Properties may "have" a property with name, but having no value as determined by this method.
+   * Determines whether the specified property with name is set to a value in the referenced
+   * Properties. The property is considered "set" if the String value of the property is not
+   * non-null, non-empty and non-blank. Therefore, the Properties may "have" a property with name,
+   * but having no value as determined by this method.
-   * @return a boolean indicating whether the specified property with name has been given a value in the referenced
-   * Properties.
+   * @return a boolean indicating whether the specified property with name has been given a value in
+   *         the referenced Properties.
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-          properties.load(AbstractLauncher.class.getResourceAsStream(DistributedSystem.getPropertiesFile()));
-        }
-        catch (Exception ignore) {
+          properties.load(
+              AbstractLauncher.class.getResourceAsStream(DistributedSystem.getPropertiesFile()));
+        } catch (Exception ignore) {
-    }
-    catch (IOException e) {
+    } catch (IOException e) {
-   * This method attempts to make a best effort determination for whether the Attach API classes are on the classpath.
+   * This method attempts to make a best effort determination for whether the Attach API classes are
+   * on the classpath.
-   * @return a boolean indicating whether the Exception or Error condition is a result of the Attach API
-   * missing from the classpath.
+   * @return a boolean indicating whether the Exception or Error condition is a result of the Attach
+   *         API missing from the classpath.
-        // NOTE ok, the Attach API is not available, however we still do not know whether an user application class
+        // NOTE ok, the Attach API is not available, however we still do not know whether an user
+        // application class
-        // NOTE the full stack trace includes the Throwable message, which typically indicates the Exception/Error
+        // NOTE the full stack trace includes the Throwable message, which typically indicates the
+        // Exception/Error
-      || ClassUtils.isClassAvailable(IBM_ATTACH_API_CLASS_NAME));
+        || ClassUtils.isClassAvailable(IBM_ATTACH_API_CLASS_NAME));
-   * Sets the debug mode of the GemFire launcher class.  This mutable property of the launcher enables the user to turn
-   * the debug mode on and off programmatically.
+   * Sets the debug mode of the GemFire launcher class. This mutable property of the launcher
+   * enables the user to turn the debug mode on and off programmatically.
-   * Gets the name or ID of the member in the GemFire distributed system.  This method prefers name if specified,
-   * otherwise the ID is returned.  If name was not specified to the Builder that created this Launcher and this call
-   * is not in-process, then null is returned.
+   * Gets the name or ID of the member in the GemFire distributed system. This method prefers name
+   * if specified, otherwise the ID is returned. If name was not specified to the Builder that
+   * created this Launcher and this call is not in-process, then null is returned.
-   * @return a String value indicating the member's name if specified, otherwise the member's ID is returned if
-   * this call is made in-process, or finally, null is returned if neither name name was specified or the call is
-   * out-of-process.
+   * @return a String value indicating the member's name if specified, otherwise the member's ID is
+   *         returned if this call is made in-process, or finally, null is returned if neither name
+   *         name was specified or the call is out-of-process.
-   * Gets the ID of the member in the GemFire distributed system as determined and assigned by GemFire when the member
-   * process joins the distributed system.  Note, this call only works if the API is used in-process.
+   * Gets the ID of the member in the GemFire distributed system as determined and assigned by
+   * GemFire when the member process joins the distributed system. Note, this call only works if the
+   * API is used in-process.
-    final InternalDistributedSystem distributedSystem = InternalDistributedSystem.getConnectedInstance();
+    final InternalDistributedSystem distributedSystem =
+        InternalDistributedSystem.getConnectedInstance();
-   * Gets the name of the member in the GemFire distributed system as determined by the 'name' GemFire property.
-   * Note, this call only works if the API is used in-process.
+   * Gets the name of the member in the GemFire distributed system as determined by the 'name'
+   * GemFire property. Note, this call only works if the API is used in-process.
-    final InternalDistributedSystem distributedSystem = InternalDistributedSystem.getConnectedInstance();
+    final InternalDistributedSystem distributedSystem =
+        InternalDistributedSystem.getConnectedInstance();
-   * Gets the user-specified process ID (PID) of the running GemFire service that AbstractLauncher implementations
-   * can use to determine status, or stop the service.
+   * Gets the user-specified process ID (PID) of the running GemFire service that AbstractLauncher
+   * implementations can use to determine status, or stop the service.
-   * Prints the specified debug message to standard err, replacing any placeholder values with the specified arguments
-   * on output, if debugging has been enabled.
+   * Prints the specified debug message to standard err, replacing any placeholder values with the
+   * specified arguments on output, if debugging has been enabled.
-   * @param args an Object array containing arguments to replace the placeholder values in the message.
+   * @param args an Object array containing arguments to replace the placeholder values in the
+   *        message.
-      }
-      else {
+      } else {
-   * Prints the specified informational message to standard err, replacing any placeholder values with the specified
-   * arguments on output.
+   * Prints the specified informational message to standard err, replacing any placeholder values
+   * with the specified arguments on output.
-   * @param args an Object array containing arguments to replace the placeholder values in the message.
+   * @param args an Object array containing arguments to replace the placeholder values in the
+   *        message.
-    }
-    else {
+    } else {
-   * Redirects the standard out and standard err to the configured log file as specified in the GemFire distributed
-   * system properties.
+   * Redirects the standard out and standard err to the configured log file as specified in the
+   * GemFire distributed system properties.
-      OSProcess.redirectOutput(((InternalDistributedSystem) distributedSystem).getConfig().getLogFile());
+      OSProcess
+          .redirectOutput(((InternalDistributedSystem) distributedSystem).getConfig().getLogFile());
-  
+
-  
+
-  
+
-   * The ServiceState is an immutable type representing the state of the specified Locator at any given moment in time.
-   * The ServiceState associates the Locator with it's state at the exact moment an instance of this class
-   * is constructed.
+   * The ServiceState is an immutable type representing the state of the specified Locator at any
+   * given moment in time. The ServiceState associates the Locator with it's state at the exact
+   * moment an instance of this class is constructed.
-    // NOTE the mutable non-Thread safe List is guarded by a call to Collections.unmodifiableList on initialization
+    // NOTE the mutable non-Thread safe List is guarded by a call to Collections.unmodifiableList on
+    // initialization
-      return (timestamp == null ? "" : new SimpleDateFormat(DATE_TIME_FORMAT_PATTERN).format(timestamp));
+      return (timestamp == null ? ""
+          : new SimpleDateFormat(DATE_TIME_FORMAT_PATTERN).format(timestamp));
-      }
-      catch (PidUnavailableException ignore) {
+      } catch (PidUnavailableException ignore) {
-          buffer.append(hours).append(hours> 1 ? " hours " : " hour ");
+          buffer.append(hours).append(hours > 1 ? " hours " : " hour ");
-    protected ServiceState(final Status status,
-                           final String statusMessage,
-                           final long timestamp,
-                           final String serviceLocation,
-                           final Integer pid,
-                           final Long uptime,
-                           final String workingDirectory,
-                           final List<String> jvmArguments,
-                           final String classpath,
-                           final String gemfireVersion,
-                           final String javaVersion,
-                           final String logFile,
-                           final String host,
-                           final String port,
-                           final String memberName)
-    {
+    protected ServiceState(final Status status, final String statusMessage, final long timestamp,
+        final String serviceLocation, final Integer pid, final Long uptime,
+        final String workingDirectory, final List<String> jvmArguments, final String classpath,
+        final String gemfireVersion, final String javaVersion, final String logFile,
+        final String host, final String port, final String memberName) {
-        Collections.<String>emptyList());
+          Collections.<String>emptyList());
-     * @return a String indicating the version of the Java runtime used in the running GemFire service.
+     * @return a String indicating the version of the Java runtime used in the running GemFire
+     *         service.
-     * @return a List of String value each representing an argument passed to the JVM of the GemFire service.
+     * @return a List of String value each representing an argument passed to the JVM of the GemFire
+     *         service.
-     * @return a integer value indicating the process ID (PID) of the running GemFire service, or null if the PID
-     * cannot be determined.
+     * @return a integer value indicating the process ID (PID) of the running GemFire service, or
+     *         null if the PID cannot be determined.
-     * Gets the amount of time in milliseconds that the JVM process with the GemFire service has been running.
+     * Gets the amount of time in milliseconds that the JVM process with the GemFire service has
+     * been running.
-     * @return a long value indicating the number of milliseconds that the GemFire service JVM has been running.
+     * @return a long value indicating the number of milliseconds that the GemFire service JVM has
+     *         been running.
-     * Gets the directory in which the GemFire service is running.  This is also the location where all GemFire service
-     * files (log files, the PID file, and so on) are written.
+     * Gets the directory in which the GemFire service is running. This is also the location where
+     * all GemFire service files (log files, the PID file, and so on) are written.
-            getServiceName(),
-            getWorkingDirectory(),
-            getServiceLocation(),
-            getMemberName(),
-            toString(getTimestamp()),
-            toString(getPid()),
-            toString(getGemFireVersion()),
-            toString(getJavaVersion()),
-            getLogFile(),
-            toString(getJvmArguments().toArray()),
-            toString(getClasspath()));
+              getServiceName(), getWorkingDirectory(), getServiceLocation(), getMemberName(),
+              toString(getTimestamp()), toString(getPid()), toString(getGemFireVersion()),
+              toString(getJavaVersion()), getLogFile(), toString(getJvmArguments().toArray()),
+              toString(getClasspath()));
-            getServiceName(),
-            getWorkingDirectory(),
-            getServiceLocation(),
-            getMemberName(),
-            getStatus(),
-            toString(getPid()),
-            toDaysHoursMinutesSeconds(getUptime()),
-            toString(getGemFireVersion()),
-            toString(getJavaVersion()),
-            getLogFile(),
-            toString(getJvmArguments().toArray()),
-            toString(getClasspath()));
+              getServiceName(), getWorkingDirectory(), getServiceLocation(), getMemberName(),
+              getStatus(), toString(getPid()), toDaysHoursMinutesSeconds(getUptime()),
+              toString(getGemFireVersion()), toString(getJavaVersion()), getLogFile(),
+              toString(getJvmArguments().toArray()), toString(getClasspath()));
-          return LocalizedStrings.Launcher_ServiceStatus_STOPPED_MESSAGE.toLocalizedString(
-            getServiceName(),
-            getWorkingDirectory(),
-            getServiceLocation());
+          return LocalizedStrings.Launcher_ServiceStatus_STOPPED_MESSAGE
+              .toLocalizedString(getServiceName(), getWorkingDirectory(), getServiceLocation());
-          return LocalizedStrings.Launcher_ServiceStatus_MESSAGE.toLocalizedString(
-            getServiceName(),
-            getWorkingDirectory(),
-            getServiceLocation(),
-            getStatus());
+          return LocalizedStrings.Launcher_ServiceStatus_MESSAGE.toLocalizedString(getServiceName(),
+              getWorkingDirectory(), getServiceLocation(), getStatus());
-    protected String toString (final Object... values) {
+    protected String toString(final Object... values) {
-   * The Status enumerated type represents the various lifecycle states of a GemFire service (such as a Cache Server,
-   * a Locator or a Manager).
+   * The Status enumerated type represents the various lifecycle states of a GemFire service (such
+   * as a Cache Server, a Locator or a Manager).
-    NOT_RESPONDING(LocalizedStrings.Launcher_Status_NOT_RESPONDING.toLocalizedString()),
-    ONLINE(LocalizedStrings.Launcher_Status_ONLINE.toLocalizedString()),
-    STARTING(LocalizedStrings.Launcher_Status_STARTING.toLocalizedString()),
-    STOPPED(LocalizedStrings.Launcher_Status_STOPPED.toLocalizedString());
+    NOT_RESPONDING(LocalizedStrings.Launcher_Status_NOT_RESPONDING.toLocalizedString()), ONLINE(
+        LocalizedStrings.Launcher_Status_ONLINE.toLocalizedString()), STARTING(
+            LocalizedStrings.Launcher_Status_STARTING.toLocalizedString()), STOPPED(
+                LocalizedStrings.Launcher_Status_STOPPED.toLocalizedString());
-     * Looks up the Status enum type by description.  The lookup operation is case-insensitive.
+     * Looks up the Status enum type by description. The lookup operation is case-insensitive.
