GEODE-3231: do not use temporary folder as workingdir or log to file by default when using the member starter rules

* do not create a workingDir and sets the user.dir by default for Locator/ServerStarterRule
* do not use a temp folder for all vms workingDir by default when using LocatorServerStarterRule.
* only bounce the vm when changing the workingdir of vms, otherwise, just cleanup the persisted files after each test.

+  protected boolean logFile = false;
-  public MemberStarterRule(File workDir) {
-    workingDir = workDir;
+  // Not meant to be public, only used by LocatorServerStartupRule
+  MemberStarterRule(File workDir) {
-    if (workingDir == null) {
-      temporaryFolder = new TemporaryFolder();
-      try {
-        temporaryFolder.create();
-      } catch (IOException e) {
-        throw new RuntimeException(e.getMessage(), e);
-      }
-      workingDir = temporaryFolder.getRoot().getAbsoluteFile();
+    workingDir = workDir;
+    if (workDir != null) {
+      withWorkingDir();
-
-    System.setProperty("user.dir", workingDir.toString());
-    // if log-file is not already set
-    properties.putIfAbsent(LOG_FILE, new File(name + ".log").getAbsolutePath());
+    return (T) this;
+  }
+
+  /**
+   * this will make the logging to into a log file instead of on the console.
+   *
+   * Use with caution, the logs files are created in a temp working directory. this is achieved by
+   * dynamically changing the "user.dir" system property.
+   * 
+   * @return
+   */
+  public T withLogFile() {
+    this.logFile = true;
+    return (T) this;
+  }
+
+  // Not meant to be public, only used by LocatorServerStartupRule
+  T withLogFile(boolean logFile) {
+    this.logFile = logFile;
+    return (T) this;
+  }
+
+  /**
+   * create the working dir using temporaryFolder. Use with caution, this sets "user.dir" system
+   * property that not approved by JDK
+   */
+  public T withWorkingDir() {
+    if (workingDir == null) {
+      temporaryFolder = new TemporaryFolder();
+      try {
+        temporaryFolder.create();
+      } catch (IOException e) {
+        throw new RuntimeException(e.getMessage(), e);
+      }
+      workingDir = temporaryFolder.getRoot().getAbsoluteFile();
+    }
+
+    System.setProperty("user.dir", workingDir.toString());
+
+    // if caller wants the logs being put into a file instead of in console output
+    // do it here since only here, we can gurantee the name is present
+    if (logFile) {
+      // if working dir is not created yet, creates it.
+      if (workingDir == null) {
+        withWorkingDir();
+      }
+      properties.putIfAbsent(LOG_FILE, new File(name + ".log").getAbsolutePath());
+    }
