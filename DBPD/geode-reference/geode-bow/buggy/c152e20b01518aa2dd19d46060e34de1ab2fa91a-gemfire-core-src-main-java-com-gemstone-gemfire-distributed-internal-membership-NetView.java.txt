GEODE-77: moving failure detection sockets into the membership view

+import java.util.Arrays;
-import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
-  private static final long serialVersionUID = -8888347937416039434L;
+  private int[] failureDetectionPorts = new int[10];
+  
+    Arrays.fill(failureDetectionPorts, -1);
-    this.hashedMembers = new HashSet<>(members);
+    hashedMembers = new HashSet<>(members);
-    int seed = creator.hashCode() + (int) System.currentTimeMillis();
+    Arrays.fill(failureDetectionPorts, -1);
-    this.hashedMembers = new HashSet<InternalDistributedMember>(members);
+    this.hashedMembers = new HashSet<InternalDistributedMember>();
+    Arrays.fill(failureDetectionPorts, -1);
+    this.failureDetectionPorts = new int[other.failureDetectionPorts.length];
+    System.arraycopy(other.failureDetectionPorts, 0, this.failureDetectionPorts, 0, other.failureDetectionPorts.length);
+    this.failureDetectionPorts = new int[mbrs.size()+10];
+    Arrays.fill(this.failureDetectionPorts, -1);
+  
+  public int[] getFailureDetectionPorts() {
+    return this.failureDetectionPorts;
+  }
+  
+  public int getFailureDetectionPort(InternalDistributedMember mbr) {
+    int idx = members.indexOf(mbr);
+    if (idx < 0 || failureDetectionPorts == null || idx >= failureDetectionPorts.length) {
+      return -1;
+    }
+    return failureDetectionPorts[idx];
+  }
+  
+  public void setFailureDetectionPort(InternalDistributedMember mbr, int port) {
+    int idx = members.indexOf(mbr);
+    if (idx < 0) {
+      throw new IllegalArgumentException("element not found in members list:" + mbr);
+    }
+    ensureFDCapacity(idx);
+    failureDetectionPorts[idx] = port;
+  }
+  /**
+   * ensures that there is a slot at idx to store an int
+   */
+  private void ensureFDCapacity(int idx) {
+    if (failureDetectionPorts == null) {
+      failureDetectionPorts = new int[idx+10];
+      Arrays.fill(failureDetectionPorts, -1);
+    } else if (idx >= failureDetectionPorts.length) {
+      int[] p = new int[idx+10];
+      if (failureDetectionPorts.length > 0) {
+        System.arraycopy(failureDetectionPorts, 0, p, 0, failureDetectionPorts.length);
+      }
+      Arrays.fill(p, idx, idx+9, -1);
+      failureDetectionPorts = p;
+    }
+  }
+  
+    int idx = members.size()-1;
+    ensureFDCapacity(idx);
+    this.failureDetectionPorts[idx] = -1;
+    int idx = this.members.indexOf(mbr);
+    if (idx >= 0) {
+      System.arraycopy(failureDetectionPorts, idx+1, failureDetectionPorts, idx, failureDetectionPorts.length-idx-1);
+      failureDetectionPorts[failureDetectionPorts.length-1] = -1;
+    }
-    this.members.removeAll(ids);
+    for (InternalDistributedMember mbr: ids) {
+      remove(mbr);
+    }
+    DataSerializer.writeIntArray(failureDetectionPorts, out);
+    failureDetectionPorts = DataSerializer.readIntArray(in);
