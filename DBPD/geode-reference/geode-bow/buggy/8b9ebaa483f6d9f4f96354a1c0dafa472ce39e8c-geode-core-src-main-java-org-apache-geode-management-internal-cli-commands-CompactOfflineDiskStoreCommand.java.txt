GEODE-4858: Update *DiskStore commands to use ResultModel and SingleGfshCommand (#1996)


-import java.io.IOException;
+import java.util.concurrent.TimeUnit;
-import org.apache.geode.GemFireIOException;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.internal.cli.GfshParser;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result compactOfflineDiskStore(
+  public ResultModel compactOfflineDiskStore(
-    Result result;
+    ResultModel result = new ResultModel();
+    InfoResultModel infoResult = result.addInfo();
-    StringBuilder output = new StringBuilder();
-    StringBuilder error = new StringBuilder();
-    StringBuilder errorMessage = new StringBuilder();
-    Process compacterProcess = null;
+    Process compactorProcess = null;
-      if (diskDirs != null && diskDirs.length != 0) {
+      if (diskDirs.length != 0) {
-      compacterProcess = procBuilder.start();
-      InputStream inputStream = compacterProcess.getInputStream();
-      InputStream errorStream = compacterProcess.getErrorStream();
+      procBuilder.redirectErrorStream(true);
+      compactorProcess = procBuilder.start();
+
+      InputStream inputStream = compactorProcess.getInputStream();
-      BufferedReader errorReader = new BufferedReader(new InputStreamReader(errorStream));
-        output.append(line).append(GfshParser.LINE_SEPARATOR);
+        infoResult.addLine(line);
-      boolean switchToStackTrace = false;
-      while ((line = errorReader.readLine()) != null) {
-        if (!switchToStackTrace && DiskStoreCompacter.STACKTRACE_START.equals(line)) {
-          switchToStackTrace = true;
-        } else if (switchToStackTrace) {
-          error.append(line).append(GfshParser.LINE_SEPARATOR);
-        } else {
-          errorMessage.append(line);
-        }
+      compactorProcess.waitFor(2, TimeUnit.SECONDS);
+      if (compactorProcess.exitValue() != 0) {
+        result.setStatus(Result.Status.ERROR);
-
-      if (errorMessage.length() > 0) {
-        throw new GemFireIOException(errorMessage.toString());
-      }
-
-      // do we have to waitFor??
-      compacterProcess.destroy();
-      result = ResultBuilder.createInfoResult(output.toString());
-    } catch (IOException e) {
-      if (output.length() != 0) {
-        Gfsh.println(output.toString());
-      }
-      String fieldsMessage = (maxOplogSize != -1
-          ? CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" + maxOplogSize + "," : "");
-      fieldsMessage += StringUtils.arrayToString(diskDirs);
-      String errorString = CliStrings.format(
-          CliStrings.COMPACT_OFFLINE_DISK_STORE__MSG__ERROR_WHILE_COMPACTING_DISKSTORE_0_WITH_1_REASON_2,
-          diskStoreName, fieldsMessage);
-      result = ResultBuilder.createUserErrorResult(errorString);
-      if (logWrapper.fineEnabled()) {
-        logWrapper.fine(e.getMessage(), e);
-      }
-    } catch (GemFireIOException e) {
-      if (output.length() != 0) {
-        Gfsh.println(output.toString());
-      }
-      result = ResultBuilder.createUserErrorResult(errorMessage.toString());
-      if (logWrapper.fineEnabled()) {
-        logWrapper.fine(error.toString());
-      }
-    } catch (IllegalArgumentException e) {
-      if (output.length() != 0) {
-        Gfsh.println(output.toString());
-      }
-      result = ResultBuilder.createUserErrorResult(e.getMessage());
+    } catch (Exception e) {
+      infoResult.addLine(
+          String.format("Error compacting disk store %s: %s", diskStoreName, e.getMessage()));
+      result.setStatus(Result.Status.ERROR);
+      logWrapper.warning(e.getMessage(), e);
-      if (compacterProcess != null) {
+      if (compactorProcess != null) {
-          compacterProcess.exitValue();
+          compactorProcess.exitValue();
-          compacterProcess.destroy();
+          compactorProcess.destroy();
+
