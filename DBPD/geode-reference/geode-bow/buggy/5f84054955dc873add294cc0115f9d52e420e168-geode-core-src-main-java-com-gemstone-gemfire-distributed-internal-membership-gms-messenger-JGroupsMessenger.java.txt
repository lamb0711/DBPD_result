GEODE-1726 Clean up compilation warnings in new GMS

+import java.util.stream.*;
+@SuppressWarnings("StatementWithEmptyBody")
-  public static final short JGROUPS_TYPE_JGADDRESS = 2000;
-  public static final short JGROUPS_PROTOCOL_TRANSPORT = 1000;
+  private static final short JGROUPS_TYPE_JGADDRESS = 2000;
+  private static final short JGROUPS_PROTOCOL_TRANSPORT = 1000;
-  String jgStackConfig;
+  private String jgStackConfig;
-  Services services;
+  private Services services;
-  Map<Class, MessageHandler> handlers = new ConcurrentHashMap<Class, MessageHandler>();
+  private final Map<Class, MessageHandler> handlers = new ConcurrentHashMap<>();
-  private GMSPingPonger pingPonger = new GMSPingPonger();
+  private final GMSPingPonger pingPonger = new GMSPingPonger();
-  protected AtomicLong pongsReceived = new AtomicLong(0);
+  protected final AtomicLong pongsReceived = new AtomicLong(0);
-  private Set<Address> addressesWithIoExceptionsProcessed = Collections.synchronizedSet(new HashSet<Address>());
+  private final Set<Address> addressesWithIoExceptionsProcessed = Collections.synchronizedSet(new HashSet<Address>());
-    InputStream is= null;
+    InputStream is;
-    String r = null;
+    String r;
-      StringBuffer sb = new StringBuffer(3000);
+      StringBuilder sb = new StringBuilder(3000);
-        View jgv = new View(vid, new ArrayList<Address>());
+        View jgv = new View(vid, new ArrayList<>());
-    List<JGAddress> mbrs = new ArrayList<JGAddress>(v.size());
-    for (InternalDistributedMember idm: v.getMembers()) {
-      mbrs.add(new JGAddress(idm));
-    }
+    List<JGAddress> mbrs = new ArrayList<>(v.size());
+    mbrs.addAll(v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList()));
-    View jgv = new View(vid, new ArrayList<Address>(mbrs));
+    View jgv = new View(vid, new ArrayList<>(mbrs));
+  @SuppressWarnings("UnusedParameters")
+      //noinspection ConstantConditions
-        if (senderSeqnos != null) {
-          received = String.valueOf(senderSeqnos[0]);
-        }
+        received = String.valueOf(senderSeqnos[0]);
-  public Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
+  private Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
-      Exception problem = null;
+      Exception problem;
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<>();
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<>();
-      for (Iterator<GMSMember> it=calculatedMembers.iterator(); it.hasNext(); ) {
-        GMSMember mbr = it.next();
+      for (GMSMember mbr : calculatedMembers) {
-        if ( !messages.containsKey(version) ) {
+        if (!messages.containsKey(version)) {
-        Message jmsg = (Message)messages.get(version);
+        Message jmsg = messages.get(version);
-    Set<InternalDistributedMember> result = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> result = new HashSet<>();
-      for (int i = 0; i < destinations.length; i ++) {
-        InternalDistributedMember d = destinations[i];
+      for (InternalDistributedMember d : destinations) {
-    InternalDistributedMember sender = null;
+    InternalDistributedMember sender;
-          if (digest != null) {
-            logger.trace("installing JGroups message digest {}", digest);
-            this.myChannel.getProtocolStack()
-                .getTopProtocol().down(new Event(Event.MERGE_DIGEST, digest));
-            jrsp.setMessengerData(null);
-          }
+          logger.trace("installing JGroups message digest {}", digest);
+          this.myChannel.getProtocolStack()
+              .getTopProtocol().down(new Event(Event.MERGE_DIGEST, digest));
+          jrsp.setMessengerData(null);
+  @SuppressWarnings("UnusedParameters")
-        if (((GMSMember)m.getNetMember()).equals(jgId)) {
+        if (m.getNetMember().equals(jgId)) {
-        h = (MessageHandler)services.getManager();
+        h = services.getManager();
