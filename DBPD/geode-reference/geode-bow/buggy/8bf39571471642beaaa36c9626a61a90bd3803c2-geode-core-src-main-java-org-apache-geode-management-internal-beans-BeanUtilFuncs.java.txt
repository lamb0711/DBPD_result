Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+   * 
-  public static String tailSystemLog(File logFile, final int numLines)
-    throws IOException
-  {
+  public static String tailSystemLog(File logFile, final int numLines) throws IOException {
-    byte[] buffer = (fileLength > maxBuffer) ? new byte[maxBuffer]
-      : new byte[(int) fileLength];
+    byte[] buffer = (fileLength > maxBuffer) ? new byte[maxBuffer] : new byte[(int) fileLength];
-      }
-      else {
+      } else {
-  public static DistributedMember getDistributedMemberByNameOrId(
-    String memberNameOrId)
-  {
+  public static DistributedMember getDistributedMemberByNameOrId(String memberNameOrId) {
-        if (memberNameOrId.equals(member.getId())
-          || memberNameOrId.equals(member.getName())) {
+        if (memberNameOrId.equals(member.getId()) || memberNameOrId.equals(member.getName())) {
-    gemFirePropertyData.setMcastAddress(config.getMcastAddress()
-      .getHostAddress());
+    gemFirePropertyData.setMcastAddress(config.getMcastAddress().getHostAddress());
-    gemFirePropertyData.setCacheXMLFile(config.getCacheXmlFile()
-      .getAbsolutePath());
+    gemFirePropertyData.setCacheXMLFile(config.getCacheXmlFile().getAbsolutePath());
-    gemFirePropertyData.setStatisticSamplingEnabled(config
-      .getStatisticSamplingEnabled());
+    gemFirePropertyData.setStatisticSamplingEnabled(config.getStatisticSamplingEnabled());
-    gemFirePropertyData.setStatisticArchiveFile(config
-      .getStatisticArchiveFile().getAbsolutePath());
+    gemFirePropertyData.setStatisticArchiveFile(config.getStatisticArchiveFile().getAbsolutePath());
-    gemFirePropertyData.setAckSevereAlertThreshold(config
-      .getAckSevereAlertThreshold());
+    gemFirePropertyData.setAckSevereAlertThreshold(config.getAckSevereAlertThreshold());
-    gemFirePropertyData.setArchiveFileSizeLimit(config
-      .getArchiveFileSizeLimit());
+    gemFirePropertyData.setArchiveFileSizeLimit(config.getArchiveFileSizeLimit());
-    gemFirePropertyData.setArchiveDiskSpaceLimit(config
-      .getArchiveDiskSpaceLimit());
+    gemFirePropertyData.setArchiveDiskSpaceLimit(config.getArchiveDiskSpaceLimit());
-    gemFirePropertyData.setClusterSSLRequireAuthentication(config.getClusterSSLRequireAuthentication());
+    gemFirePropertyData
+        .setClusterSSLRequireAuthentication(config.getClusterSSLRequireAuthentication());
-    gemFirePropertyData.setServerSSLRequireAuthentication(config.getServerSSLRequireAuthentication());
+    gemFirePropertyData
+        .setServerSSLRequireAuthentication(config.getServerSSLRequireAuthentication());
-    gemFirePropertyData.setGatewaySSLRequireAuthentication(config.getGatewaySSLRequireAuthentication());
+    gemFirePropertyData
+        .setGatewaySSLRequireAuthentication(config.getGatewaySSLRequireAuthentication());
-    gemFirePropertyData.setJmxManagerSSLRequireAuthentication(config.getJmxManagerSSLRequireAuthentication());
+    gemFirePropertyData
+        .setJmxManagerSSLRequireAuthentication(config.getJmxManagerSSLRequireAuthentication());
-    gemFirePropertyData.setJmxManagerSSLTrustStorePassword(config.getJmxManagerSSLTrustStorePassword());
+    gemFirePropertyData
+        .setJmxManagerSSLTrustStorePassword(config.getJmxManagerSSLTrustStorePassword());
-    gemFirePropertyData.setHttpServiceSSLRequireAuthentication(config.getHttpServiceSSLRequireAuthentication());
+    gemFirePropertyData
+        .setHttpServiceSSLRequireAuthentication(config.getHttpServiceSSLRequireAuthentication());
-    gemFirePropertyData.setHttpServiceSSLKeyStorePassword(config.getHttpServiceSSLKeyStorePassword());
+    gemFirePropertyData
+        .setHttpServiceSSLKeyStorePassword(config.getHttpServiceSSLKeyStorePassword());
-    gemFirePropertyData.setHttpServiceSSLTrustStorePassword(config.getHttpServiceSSLTrustStorePassword());
+    gemFirePropertyData
+        .setHttpServiceSSLTrustStorePassword(config.getHttpServiceSSLTrustStorePassword());
-    gemFirePropertyData.setMcastByteAllowance(config.getMcastFlowControl()
-      .getByteAllowance());
-    gemFirePropertyData.setMcastRechargeThreshold(config.getMcastFlowControl()
-      .getRechargeThreshold());
-    gemFirePropertyData.setMcastRechargeBlockMs(config.getMcastFlowControl()
-      .getRechargeBlockMs());
+    gemFirePropertyData.setMcastByteAllowance(config.getMcastFlowControl().getByteAllowance());
+    gemFirePropertyData
+        .setMcastRechargeThreshold(config.getMcastFlowControl().getRechargeThreshold());
+    gemFirePropertyData.setMcastRechargeBlockMs(config.getMcastFlowControl().getRechargeBlockMs());
-    gemFirePropertyData.setEnableTimeStatistics(config
-      .getEnableTimeStatistics());
+    gemFirePropertyData.setEnableTimeStatistics(config.getEnableTimeStatistics());
-    gemFirePropertyData.setEnableNetworkPartitionDetection(config
-      .getEnableNetworkPartitionDetection());
+    gemFirePropertyData
+        .setEnableNetworkPartitionDetection(config.getEnableNetworkPartitionDetection());
-    gemFirePropertyData.setMaxWaitTimeForReconnect(config
-      .getMaxWaitTimeForReconnect());
+    gemFirePropertyData.setMaxWaitTimeForReconnect(config.getMaxWaitTimeForReconnect());
-    gemFirePropertyData.setMaxNumReconnectTries(config
-      .getMaxNumReconnectTries());
+    gemFirePropertyData.setMaxNumReconnectTries(config.getMaxNumReconnectTries());
-    gemFirePropertyData.setAsyncDistributionTimeout(config
-      .getAsyncDistributionTimeout());
+    gemFirePropertyData.setAsyncDistributionTimeout(config.getAsyncDistributionTimeout());
-    gemFirePropertyData.setDurableClientTimeout(config
-      .getDurableClientTimeout());
-    gemFirePropertyData.setSecurityClientAuthInit(config
-      .getSecurityClientAuthInit());
-    gemFirePropertyData.setSecurityClientAuthenticator(config
-      .getSecurityClientAuthenticator());
-    gemFirePropertyData.setSecurityClientDHAlgo(config
-      .getSecurityClientDHAlgo());
-    gemFirePropertyData.setSecurityPeerAuthInit(config
-      .getSecurityPeerAuthInit());
-    gemFirePropertyData.setSecurityPeerAuthenticator(config
-      .getSecurityPeerAuthenticator());
-    gemFirePropertyData.setSecurityClientAccessor(config
-      .getSecurityClientAccessor());
-    gemFirePropertyData.setSecurityClientAccessorPP(config
-      .getSecurityClientAccessorPP());
+    gemFirePropertyData.setDurableClientTimeout(config.getDurableClientTimeout());
+    gemFirePropertyData.setSecurityClientAuthInit(config.getSecurityClientAuthInit());
+    gemFirePropertyData.setSecurityClientAuthenticator(config.getSecurityClientAuthenticator());
+    gemFirePropertyData.setSecurityClientDHAlgo(config.getSecurityClientDHAlgo());
+    gemFirePropertyData.setSecurityPeerAuthInit(config.getSecurityPeerAuthInit());
+    gemFirePropertyData.setSecurityPeerAuthenticator(config.getSecurityPeerAuthenticator());
+    gemFirePropertyData.setSecurityClientAccessor(config.getSecurityClientAccessor());
+    gemFirePropertyData.setSecurityClientAccessorPP(config.getSecurityClientAccessorPP());
-    gemFirePropertyData.setSecurityLogFile(config.getSecurityLogFile()
-      .getAbsolutePath());
+    gemFirePropertyData.setSecurityLogFile(config.getSecurityLogFile().getAbsolutePath());
-    gemFirePropertyData.setSecurityPeerMembershipTimeout(config
-      .getSecurityPeerMembershipTimeout());
+    gemFirePropertyData.setSecurityPeerMembershipTimeout(config.getSecurityPeerMembershipTimeout());
-    gemFirePropertyData.setRemoveUnresponsiveClient(config
-      .getRemoveUnresponsiveClient());
+    gemFirePropertyData.setRemoveUnresponsiveClient(config.getRemoveUnresponsiveClient());
-    gemFirePropertyData.setSecurableCommunicationChannel(config.getSecurableCommunicationChannels());
-    gemFirePropertyData.setSSLWebServiceRequireAuthentication(config.getSSLWebRequireAuthentication());
+    gemFirePropertyData
+        .setSecurableCommunicationChannel(config.getSecurableCommunicationChannels());
+    gemFirePropertyData
+        .setSSLWebServiceRequireAuthentication(config.getSSLWebRequireAuthentication());
-   * Compresses a given String. It is encoded using ISO-8859-1, So any
-   * decompression of the compressed string should also use ISO-8859-1
+   * Compresses a given String. It is encoded using ISO-8859-1, So any decompression of the
+   * compressed string should also use ISO-8859-1
+   * 
