GEODE-5559: Improve runtime of RegionVersionHolder.canonicalExceptions (#2298)

This modifies the RVVException to iterate over the received version newest to
oldest, which makes generating the canonical exceptions much more
straightforward.


-    int size = 0;
-    long[] deltas = null;
-    long last = this.previousVersion;
+    final int size = received == null ? 1 : received.length() + 1;
+
+    int deltaIndex = size - 1;
+    long[] deltas = new long[size];
+    long last = this.nextVersion;
-    for (ReceivedVersionsIterator it = receivedVersionsIterator(); it.hasNext();) {
+    for (ReceivedVersionsReverseIterator it = receivedVersionsReverseIterator(); it.hasNext();) {
-      long delta = version.longValue() - last;
-      if (deltas == null) {
-        deltas = new long[this.received.length()];
-      }
-      deltas[size++] = delta;
+      long delta = last - version.longValue();
+      deltas[--deltaIndex] = delta;
-    InternalDataSerializer.writeUnsignedVL(size, out);
+    deltas[0] = last - this.previousVersion;
+    InternalDataSerializer.writeUnsignedVL(size - 1, out);
-    for (int i = 0; i < size; i++) {
-      InternalDataSerializer.writeUnsignedVL(deltas[i], out);
+    for (long value : deltas) {
+      InternalDataSerializer.writeUnsignedVL(value, out);
-
-    // Write each version in the exception as a delta from the previous version
-    // this will likely be smaller than the absolute value, so it will
-    // be more likely to fit into a byte or a short.
-    long delta = this.nextVersion - last;
-    InternalDataSerializer.writeUnsignedVL(delta, out);
-  // @Override
-  // public int hashCode() {
-  // final int prime = 31;
-  // int result = 1;
-  // result = prime * result + (int) (nextVersion ^ (nextVersion >>> 32));
-  // result = prime * result
-  // + (int) (previousVersion ^ (previousVersion >>> 32));
-  // result = prime * result + ((this.received == null) ? 0 : this.received.hashCode());
-  // return result;
-  // }
-
-  public ReceivedVersionsIterator receivedVersionsIterator() {
-    ReceivedVersionsIteratorB result = new ReceivedVersionsIteratorB();
-    result.initForForwardIteration();
-    return result;
+  public ReceivedVersionsReverseIterator receivedVersionsReverseIterator() {
+    return new ReceivedVersionsReverseIteratorB();
-
-
-  protected class ReceivedVersionsIteratorB extends ReceivedVersionsIterator {
+  protected class ReceivedVersionsReverseIteratorB extends ReceivedVersionsReverseIterator {
-    void initForForwardIteration() {
+    ReceivedVersionsReverseIteratorB() {
-        this.nextIndex = -1;
+        nextIndex = -1;
-        this.nextIndex = received.nextSetBit((int) (previousVersion - receivedBaseVersion + 1));
-        if (this.nextIndex + receivedBaseVersion >= nextVersion) {
-          this.nextIndex = -1;
+        this.nextIndex = received.previousSetBit((int) (nextVersion - receivedBaseVersion - 1));
+        if (nextIndex + receivedBaseVersion <= previousVersion) {
+          nextIndex = -1;
-      advance();
+      this.nextIndex = received.previousSetBit(this.index - 1);
+      if (nextIndex + receivedBaseVersion <= previousVersion) {
+        nextIndex = -1;
+      }
-
-    private void advance() {
-      this.nextIndex = received.nextSetBit(this.index + 1);
-      if ((this.nextIndex + receivedBaseVersion) >= nextVersion) {
-        this.nextIndex = -1;
-      }
-    }
-
