GEODE_6883: Creating membership api classes (#3985)

Creating a new membership API package. Starting that package out with
these classes:
* MembershipBuilder - created by moving NetMember and NetLocator factory stuff
  out of MembershipFactory and renaming MembershipFactory to MembershipBuilder
* Membership - Extracted an interface from MembershipManager
* Authenticator - Moved Authenticator to the API package
* MembershipStatistics - Extracted interface from DMStats
* MembershipListener and MessageListener - Creating these new membership
  specific interfaces by splitting up DistributedMembershipListener into two
  separate interfaces.
* MembershipConfig - Extracted interface from ServiceConfig

* Adding an archunit test for the membership API. Ensure that the API only
  depends on other API classes.

* Removing GMSMemberFactory and MemberServices
  These classes were adding another layer to creating a MembershipManager,
  but they didn't actually allow swapping in a different implementation.
  Inlining these methods into the respective NetLocatorFactory,
  NetMemberFactory, and MembershipManagerFactory.

* Removing getDM from DirectChannelListener - We want to get rid of this
  interface in favor of other membership
  specific interfaces that don't depend on core.

-import org.apache.geode.distributed.internal.DMStats;
-import org.apache.geode.distributed.internal.DistributionStats;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfig;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipStatistics;
-import org.apache.geode.internal.admin.remote.RemoteTransportConfig;
-    RemoteTransportConfig transport = services.getConfig().getTransport();
-    DistributionConfig dc = services.getConfig().getDistributionConfig();
+    MembershipConfig config = services.getConfig();
-    boolean b = dc.getEnableNetworkPartitionDetection();
-    System.setProperty("jgroups.resolve_dns", String.valueOf(!b));
+    boolean enableNetworkPartitionDetection = config.getEnableNetworkPartitionDetection();
+    System.setProperty("jgroups.resolve_dns", String.valueOf(!enableNetworkPartitionDetection));
-    if (transport.isMcastEnabled()) {
+    if (config.isMcastEnabled()) {
-    if (transport.isMcastEnabled()) {
+    if (config.isMcastEnabled()) {
-          String.valueOf(transport.getMcastId().getPort()));
+          String.valueOf(config.getMcastPort()));
-          replaceStrings(properties, "MCAST_ADDRESS", dc.getMcastAddress().getHostAddress());
-      properties = replaceStrings(properties, "MCAST_TTL", String.valueOf(dc.getMcastTtl()));
+          replaceStrings(properties, "MCAST_ADDRESS", config.getMcastAddress().getHostAddress());
+      properties = replaceStrings(properties, "MCAST_TTL", String.valueOf(config.getMcastTtl()));
-          String.valueOf(dc.getMcastSendBufferSize()));
+          String.valueOf(config.getMcastSendBufferSize()));
-          String.valueOf(dc.getMcastRecvBufferSize()));
+          String.valueOf(config.getMcastRecvBufferSize()));
-          String.valueOf(dc.getUdpFragmentSize() - 256));
+          String.valueOf(config.getUdpFragmentSize() - 256));
-    if (transport.isMcastEnabled() || transport.isTcpDisabled()
-        || (dc.getUdpRecvBufferSize() != DistributionConfig.DEFAULT_UDP_RECV_BUFFER_SIZE)) {
+    if (config.isMcastEnabled() || config.isTcpDisabled()
+        || (config.getUdpRecvBufferSize() != DistributionConfig.DEFAULT_UDP_RECV_BUFFER_SIZE)) {
-          replaceStrings(properties, "UDP_RECV_BUFFER_SIZE", "" + dc.getUdpRecvBufferSize());
+          replaceStrings(properties, "UDP_RECV_BUFFER_SIZE", "" + config.getUdpRecvBufferSize());
-    properties = replaceStrings(properties, "UDP_SEND_BUFFER_SIZE", "" + dc.getUdpSendBufferSize());
+    properties =
+        replaceStrings(properties, "UDP_SEND_BUFFER_SIZE", "" + config.getUdpSendBufferSize());
-    String str = transport.getBindAddress();
+    String str = config.getBindAddress();
-      int[] ports = dc.getMembershipPortRange();
+      int[] ports = config.getMembershipPortRange();
-    properties = replaceStrings(properties, "UDP_FRAGMENT_SIZE", "" + dc.getUdpFragmentSize());
+    properties = replaceStrings(properties, "UDP_FRAGMENT_SIZE", "" + config.getUdpFragmentSize());
-        "" + dc.getMcastFlowControl().getByteAllowance());
+        "" + config.getMcastByteAllowance());
-        "" + dc.getMcastFlowControl().getRechargeThreshold());
+        "" + config.getMcastRechargeThreshold());
-        "" + dc.getMcastFlowControl().getRechargeBlockMs());
+        "" + config.getMcastRechargeBlockMs());
-    if (!dc.getSecurityUDPDHAlgo().isEmpty()) {
+    if (!config.getSecurityUDPDHAlgo().isEmpty()) {
-        this.encrypt = new GMSEncrypt(services, dc.getSecurityUDPDHAlgo());
+        this.encrypt = new GMSEncrypt(services, config.getSecurityUDPDHAlgo());
-      Object oldDSMembershipInfo = services.getConfig().getTransport().getOldDSMembershipInfo();
+      Object oldDSMembershipInfo = services.getConfig().getOldDSMembershipInfo();
-    DistributionConfig config = services.getConfig().getDistributionConfig();
-    boolean isLocator = (services.getConfig().getTransport()
+    MembershipConfig config = services.getConfig();
+    boolean isLocator = (config
-        || !services.getConfig().getDistributionConfig().getStartLocator().isEmpty();
+        || !config.getStartLocator().isEmpty();
-        OSProcess.getId(), (byte) services.getConfig().getTransport().getVmKind(),
+        OSProcess.getId(), (byte) services.getConfig().getVmKind(),
-        services.getConfig().getDistributionConfig().getEnableNetworkPartitionDetection());
+        services.getConfig().getEnableNetworkPartitionDetection());
-    long timeout = services.getConfig().getDistributionConfig().getAckWaitThreshold() * 1000L;
+    long timeout = services.getConfig().getAckWaitThreshold() * 1000L;
-    DMStats theStats = services.getStatistics();
+    MembershipStatistics theStats = services.getStatistics();
-    if (services.getConfig().getTransport().isMcastEnabled()) {
+    if (services.getConfig().isMcastEnabled()) {
-      long startTime = DistributionStats.getStatTime();
+      long startTime = services.getStatistics().startUDPDispatchRequest();
-        if ((services.getConfig().getTransport()
+        if ((services.getConfig()
-        long delta = DistributionStats.getStatTime() - startTime;
-        JGroupsMessenger.this.services.getStatistics().incUDPDispatchRequestTime(delta);
+        JGroupsMessenger.this.services.getStatistics().endUDPDispatchRequest(startTime);
