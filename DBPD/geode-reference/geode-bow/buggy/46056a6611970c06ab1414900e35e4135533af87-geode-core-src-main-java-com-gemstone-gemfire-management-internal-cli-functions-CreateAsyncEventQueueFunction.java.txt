GEODE-1209: Added new attribute to forward eviction/expiration to AEQ.
Following changes are made:
1. Added new attribue/flag to forward eviction and expiration destroy events.
2. Added new option in CreateAsyncEventQueue Gfsh command. Also cleaned up arguments for create AEQ function invoked by gfsh. Instead of object array the args are wrapped in args object.

-      final Object[] args = (Object[]) context.getArguments();
-      final String asyncEventQueueId = (String) args[0];
-      final boolean isParallel = (Boolean) args[1];
-      final boolean enableBatchConflation = (Boolean) args[2];
-      final int batchSize = (Integer) args[3];
-      final int batchTimeInterval =(Integer) args[4];
-      final boolean persistent = (Boolean) args[5];
-      final String diskStoreName = (String) args[6];
-      final boolean diskSynchronous =(Boolean) args[7];
-      final int maxQueueMemory = (Integer) args[8];
-      final int dispatcherThreads =(Integer) args[9]; 
-      final String orderPolicy= (String) args[10];
-      final String[] gatewayEventFilters =(String[]) args[11];
-      final String gatewaySubstitutionFilter = (String) args[12];
-      final String listenerClassName = (String) args[13];
-      final Properties listenerProperties = (Properties) args[14];
-
+      AsyncEventQueueFunctionArgs aeqArgs =  (AsyncEventQueueFunctionArgs)context.getArguments();
+      
-      AsyncEventQueueFactory asyncEventQueueFactory = cache.createAsyncEventQueueFactory();
-      asyncEventQueueFactory.setParallel(isParallel);
-      asyncEventQueueFactory.setBatchConflationEnabled(enableBatchConflation);
-      asyncEventQueueFactory.setBatchSize(batchSize);
-      asyncEventQueueFactory.setBatchTimeInterval(batchTimeInterval);
-      asyncEventQueueFactory.setPersistent(persistent);
-      asyncEventQueueFactory.setDiskStoreName(diskStoreName);
-      asyncEventQueueFactory.setDiskSynchronous(diskSynchronous);
-      asyncEventQueueFactory.setMaximumQueueMemory(maxQueueMemory);
-      asyncEventQueueFactory.setDispatcherThreads(dispatcherThreads);
-      asyncEventQueueFactory.setOrderPolicy(OrderPolicy.valueOf(orderPolicy));
+      AsyncEventQueueFactory asyncEventQueueFactory = cache.createAsyncEventQueueFactory()
+          .setParallel(aeqArgs.isParallel())
+          .setBatchConflationEnabled(aeqArgs.isEnableBatchConflation())
+          .setBatchSize(aeqArgs.getBatchSize())
+          .setBatchTimeInterval(aeqArgs.getBatchTimeInterval())
+          .setPersistent(aeqArgs.isPersistent())
+          .setDiskStoreName(aeqArgs.getDiskStoreName())
+          .setDiskSynchronous(aeqArgs.isDiskSynchronous())
+          .setIgnoreEvictionAndExpiration(aeqArgs.isIgnoreEvictionAndExpiration())
+          .setMaximumQueueMemory(aeqArgs.getMaxQueueMemory())
+          .setDispatcherThreads(aeqArgs.getDispatcherThreads())
+          .setOrderPolicy(OrderPolicy.valueOf(aeqArgs.getOrderPolicy()));
+
+      String[] gatewayEventFilters = aeqArgs.getGatewayEventFilters();
+      
+      String gatewaySubstitutionFilter = aeqArgs.getGatewaySubstitutionFilter();
-      
+    
+      String listenerClassName = aeqArgs.getListenerClassName();
+      Properties listenerProperties = aeqArgs.getListenerProperties();
-      asyncEventQueueFactory.create(asyncEventQueueId, (AsyncEventListener) listenerInstance);
+      asyncEventQueueFactory.create(aeqArgs.getAsyncEventQueueId(), (AsyncEventListener) listenerInstance);
-      XmlEntity xmlEntity = new XmlEntity(CacheXml.ASYNC_EVENT_QUEUE, "id", asyncEventQueueId);
+      XmlEntity xmlEntity = new XmlEntity(CacheXml.ASYNC_EVENT_QUEUE, "id", aeqArgs.getAsyncEventQueueId());
