GEODE-17: add more tests

+import javax.management.Query;
+import javax.management.QueryExp;
+import java.util.Set;
-  private MBeanServerConnection mbeanServer;
+  private MBeanServerConnection con;
-  public T getProxyMBean(Class<T> proxyClass, String beanName) throws MalformedObjectNameException, IOException {
-    ObjectInstance bean = (ObjectInstance) mbeanServer.queryMBeans(ObjectName.getInstance(beanName), null).toArray()[0];
-    return JMX.newMXBeanProxy(mbeanServer, bean.getObjectName(), proxyClass);
+  public T getProxyMBean(Class<T> proxyClass, String beanQueryName) throws MalformedObjectNameException, IOException {
+    ObjectName name = null;
+    QueryExp query = null;
+
+    if(proxyClass != null){
+      query = Query.isInstanceOf(Query.value(proxyClass.getName()));
+    }
+
+    if(beanQueryName != null){
+      name = ObjectName.getInstance(beanQueryName);
+    }
+
+    Set<ObjectInstance> beans = con.queryMBeans(name, query);
+    if(beans.size() != 1){
+      throw new RuntimeException("failed to find only one instance of "+proxyClass.getName()+" with name "+beanQueryName);
+    }
+    return JMX.newMXBeanProxy(con, ((ObjectInstance)beans.toArray()[0]).getObjectName(), proxyClass);
+  }
+
+  /**
+   * Retrieve a new proxy MBean
+   * @return A new proxy MBean of the same type with which the class was constructed
+   */
+  public T getProxyMBean(Class<T> proxyClass) throws MalformedObjectNameException, IOException {
+    return getProxyMBean(proxyClass, null);
+  }
+
+  public T getProxyMBean(String beanQueryName) throws MalformedObjectNameException, IOException {
+    return getProxyMBean(null, beanQueryName);
-    return jmxConnector.getMBeanServerConnection();
+    return con;
-    mbeanServer = jmxConnector.getMBeanServerConnection();
+    con = jmxConnector.getMBeanServerConnection();
-    mbeanServer = null;
+    con = null;
