GEODE-1897: Initial refactor of CreateRegionCommand (#956)

* GEODE-1897: Initial refactor of CreateRegionCommand

* GEODE-1897: Add test categories

* GEODE-1897: Add license headers

* GEODE-1897: Add missing test category

* GEODE-1897: Update miscellaneous test failures

- Also updated sanctionedSerializables

* GEODE-1897: Review updates

* GEODE-1897: More review changes

* GEODE-1897: Integrate better with new develop functionality

* GEODE-1897: Impromptu review update

* GEODE-1897: Spotless how do I love thee... let me count the ways

* GEODE-1897: fixing precheckin failures

-import java.io.Serializable;
-
-import org.apache.logging.log4j.Logger;
-
-import org.apache.geode.cache.CacheListener;
-import org.apache.geode.cache.CacheLoader;
-import org.apache.geode.cache.CacheWriter;
+import org.apache.logging.log4j.Logger;
-      FetchRegionAttributesFunctionResult<?, ?> result = getRegionAttributes(cache, regionPath);
+      RegionAttributes<?, ?> result = getRegionAttributes(cache, regionPath);
-  public static <K, V> FetchRegionAttributesFunctionResult<K, V> getRegionAttributes(Cache cache,
-      String regionPath) {
+  public static <K, V> RegionAttributes<K, V> getRegionAttributes(Cache cache, String regionPath) {
-    FetchRegionAttributesFunctionResult<K, V> result =
-        new FetchRegionAttributesFunctionResult<K, V>(afactory);
-    return result;
+    return afactory.create();
-
-  public static class FetchRegionAttributesFunctionResult<K, V> implements Serializable {
-    private static final long serialVersionUID = -3970828263897978845L;
-
-    private RegionAttributes<K, V> regionAttributes;
-    private String[] cacheListenerClasses;
-    private String cacheLoaderClass;
-    private String cacheWriterClass;
-
-    @SuppressWarnings("deprecation")
-    public FetchRegionAttributesFunctionResult(AttributesFactory<K, V> afactory) {
-      this.regionAttributes = afactory.create();
-
-      CacheListener<K, V>[] cacheListeners = this.regionAttributes.getCacheListeners();
-      if (cacheListeners != null && cacheListeners.length != 0) {
-        cacheListenerClasses = new String[cacheListeners.length];
-        for (int i = 0; i < cacheListeners.length; i++) {
-          cacheListenerClasses[i] = cacheListeners[i].getClass().getName();
-        }
-        afactory.initCacheListeners(null);
-      }
-      CacheLoader<K, V> cacheLoader = this.regionAttributes.getCacheLoader();
-      if (cacheLoader != null) {
-        cacheLoaderClass = cacheLoader.getClass().getName();
-        afactory.setCacheLoader(null);
-      }
-      CacheWriter<K, V> cacheWriter = this.regionAttributes.getCacheWriter();
-      if (cacheWriter != null) {
-        cacheWriterClass = cacheWriter.getClass().getName();
-        afactory.setCacheWriter(null);
-      }
-
-      // recreate attributes
-      this.regionAttributes = afactory.create();
-    }
-
-    public RegionAttributes<K, V> getRegionAttributes() {
-      return regionAttributes;
-    }
-
-    public String[] getCacheListenerClasses() {
-      return cacheListenerClasses;
-    }
-
-    public String getCacheLoaderClass() {
-      return cacheLoaderClass;
-    }
-
-    public String getCacheWriterClass() {
-      return cacheWriterClass;
-    }
-  }
