GEODE-4876: Move VM APIs from Host to VM

Deprecate Host.

-import java.util.HashMap;
+ *
+ * @deprecated Please use similar static APIs on {@link VM} instead.
+@Deprecated
-  protected static List hosts = new ArrayList();
+  private static final List<Host> hosts = new ArrayList<>();
-  /** Indicates an unstarted RMI registry */
-  protected static int NO_REGISTRY = -1;
-
-  private String hostName;
+  private final String hostName;
-  private List<VM> vms;
-
-  /** The GemFire systems that are available on this host */
-  private List systems;
-
-  /** Key is system name, value is GemFireSystem instance */
-  private HashMap systemNames;
+  private final List<VM> vms;
-   * @param n A zero-based identifier of the host
+   * @param whichHost A zero-based identifier of the host
-  public static Host getHost(int n) {
+  public static Host getHost(int whichHost) {
-    if (n >= size) {
-      String s = "Cannot request host " + n + ".  There are only " + size + " hosts.";
-      throw new IllegalArgumentException(s);
+    if (whichHost >= size) {
+      String message = "Cannot request host " + whichHost + ".  There are only " + size + " hosts.";
+      throw new IllegalArgumentException(message);
-      return (Host) hosts.get(n);
+      return hosts.get(whichHost);
-
-  ///////////////////// Constructors //////////////////////
-
-      String s = "Cannot create a Host with a null name";
-      throw new NullPointerException(s);
+      String message = "Cannot create a Host with a null name";
+      throw new NullPointerException(message);
-    this.vms = new ArrayList();
-    this.systems = new ArrayList();
-    this.systemNames = new HashMap();
+    vms = new ArrayList<>();
-  //////////////////// Instance Methods ////////////////////
-
-    return this.hostName;
+    return hostName;
-    return this.vms.size();
+    return vms.size();
-      VM vm = (VM) vms.get(n);
+      VM vm = vms.get(n);
-    this.vms.add(vm);
+    vms.add(vm);
-  /**
-   * Returns the number of GemFire systems that run on this host
-   */
-  public int getSystemCount() {
-    return this.systems.size();
-  }
-
+  @Override
-    sb.append(this.getHostName());
+    sb.append(getHostName());
-  /**
-   * Two {@code Host}s are considered equal if they have the same name.
-   */
+  @Override
-      return ((Host) o).getHostName().equals(this.getHostName());
+      return ((Host) o).getHostName().equals(getHostName());
-  /**
-   * A {@code Host}'s hash code is based on the hash code of its name.
-   */
+  @Override
-    return this.getHostName().hashCode();
+    return getHostName().hashCode();
