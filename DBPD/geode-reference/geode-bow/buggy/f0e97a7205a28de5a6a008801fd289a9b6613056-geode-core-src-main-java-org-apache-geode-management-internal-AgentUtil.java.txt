GEODE-5660: Added method to lookup war file from classpath
within AgentUtil.java. This is to address problem where
http server is started from Java API (Spring Data Geode specifically)
Now, the application can reference the `geode-web-api` war from repo
and not have to specifically set `GEODE-HOME` property

+import java.util.Arrays;
+import java.util.Objects;
+import java.util.stream.Stream;
- * @since Geode 1.0.0.0
- *
+ * @since Geode 1.0.0
-  public static final String ERROR_VARIABLE_NOT_SET =
-      "The GEODE_HOME environment variable must be set!";
-
-  private String gemfireVersion = null;
+  private final String gemfireVersion;
+  private static final String GEODE_HOME = "GEODE_HOME";
-    String geodeHome = getGeodeHome();
-    if (StringUtils.isNotBlank(geodeHome)) {
-      String[] possibleFiles =
-          {geodeHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              geodeHome + "/tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              geodeHome + "/lib/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              geodeHome + "/tools/Extensions/" + warFilePrefix + ".war",
-              geodeHome + "/tools/Pulse/" + warFilePrefix + ".war",
-              geodeHome + "/lib/" + warFilePrefix + ".war"};
-      for (String possibleFile : possibleFiles) {
-        if (new File(possibleFile).isFile()) {
-          logger.info(warFilePrefix + " war found: {}", possibleFile);
-          return possibleFile;
-        }
-      }
-    }
+    final String versionedWarFileName = warFilePrefix + "-" + gemfireVersion + ".war";
+    final String unversionedWarFileName = warFilePrefix + ".war";
+    // This will attempt to find the war file defined somewhere on the Java classpath,
+    // other than the
+    String possiblePath =
+        lookupWarLocationFromClasspath(versionedWarFileName, unversionedWarFileName);
+    if (possiblePath != null) {
+      logger.info("Located war: {} at location: {}", warFilePrefix, possiblePath);
+      return possiblePath;
+    }
+    possiblePath =
+        findPossibleWarLocationFromGeodeHome(versionedWarFileName, unversionedWarFileName);
+    if (possiblePath != null) {
+      logger.info("Located war: {} at location: {}", warFilePrefix, possiblePath);
+      return possiblePath;
+    }
-    // $GEODE_HOME, try to
-    // find in the classpath
-    String[] possibleFiles = {warFilePrefix + "-" + gemfireVersion + ".war",
-        "tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
-        "tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
-        "lib/" + warFilePrefix + "-" + gemfireVersion + ".war", warFilePrefix + ".war"};
-    for (String possibleFile : possibleFiles) {
-      URL url = this.getClass().getClassLoader().getResource(possibleFile);
-      if (url != null) {
-        // found the war file
-        logger.info(warFilePrefix + " war found: {}", possibleFile);
-        return url.getPath();
-      }
+    // $GEODE_HOME, try to find in the classpath
+    possiblePath =
+        findPossibleWarLocationFromExtraLocations(versionedWarFileName, unversionedWarFileName);
+    if (possiblePath != null) {
+      logger.info("Located war: {} at location: {}", warFilePrefix, possiblePath);
+      return possiblePath;
-    // we still couldn't find the war file
-  public boolean isWebApplicationAvailable(final String warFileLocation) {
+  private String findPossibleWarLocationFromExtraLocations(String versionedWarFileName,
+      String unversionedWarFileName) {
+    final URL url = Arrays.stream(new String[] {versionedWarFileName,
+        "tools/Pulse/" + versionedWarFileName,
+        "tools/Extensions/" + versionedWarFileName,
+        "lib/" + versionedWarFileName,
+        unversionedWarFileName})
+        .map(possibleFile -> this.getClass().getClassLoader().getResource(possibleFile))
+        .filter(Objects::nonNull).findFirst().orElse(null);
+
+    if (url != null) {
+      final String path = url.getPath();
+      logger.info("War file found: {}", path);
+      return path;
+    }
+    return null;
+  }
+
+  private String findPossibleWarLocationFromGeodeHome(String versionedWarFileName,
+      String unversionedWarFileName) {
+    String[] possibleFiles = {};
+    String geodeHome = getGeodeHome();
+    if (StringUtils.isNotBlank(geodeHome)) {
+      possibleFiles = new String[] {geodeHome + "/tools/Extensions/" + versionedWarFileName,
+          geodeHome + "/tools/Pulse/" + versionedWarFileName,
+          geodeHome + "/lib/" + versionedWarFileName,
+          geodeHome + "/tools/Extensions/" + unversionedWarFileName,
+          geodeHome + "/tools/Pulse/" + unversionedWarFileName,
+          geodeHome + "/lib/" + unversionedWarFileName};
+    }
+    return findPossibleWarLocationFromStream(Arrays.stream(possibleFiles));
+  }
+
+  private String findPossibleWarLocationFromStream(Stream<String> stream) {
+    return stream.filter(possiblePath -> new File(possiblePath).isFile())
+        .findFirst().orElse(null);
+  }
+
+  private String lookupWarLocationFromClasspath(String versionedWarFileName,
+      String unversionedWarFileName) {
+    return Arrays
+        .stream(System.getProperty("java.class.path").split(File.pathSeparator))
+        .filter(pathString -> pathString.endsWith(versionedWarFileName) || pathString
+            .endsWith(unversionedWarFileName))
+        .findFirst().orElse(null);
+  }
+
+  boolean isWebApplicationAvailable(final String warFileLocation) {
-  public boolean isWebApplicationAvailable(final String... warFileLocations) {
+  boolean isWebApplicationAvailable(final String... warFileLocations) {
-  public String getGeodeHome() {
+  private String getGeodeHome() {
-    String geodeHome = System.getenv("GEODE_HOME");
+    String geodeHome = System.getenv(GEODE_HOME);
-    logger.info("GEODE_HOME:" + geodeHome);
+    logger.info(GEODE_HOME + ":" + geodeHome);
