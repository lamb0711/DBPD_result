GEODE-77: improve restart locator error handling on corrupted state file

+import com.gemstone.gemfire.InternalGemFireException;
-import com.gemstone.gemfire.distributed.internal.tcpserver.TcpHandler;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.LOCATOR_UNABLE_TO_RECOVER_VIEW;
+
-  private static final int LOCATOR_FILE_STAMP = 0x7b8cf741;
+  /* package */ static final int LOCATOR_FILE_STAMP = 0x7b8cf741;
-  public void init(TcpServer server) {
+  public void init(TcpServer server) throws InternalGemFireException {
-  public void recover() {
+  public void recover() throws InternalGemFireException {
-    } catch (IOException e) {
-      // ignore
-    } catch (ClassNotFoundException e) {
-      // hmm - odd response?
-    }
+    } catch (IOException | ClassNotFoundException ignore) {}
-  
-  private boolean recoverFromFile(File file) {
+
+  /* package */ boolean recoverFromFile(File file) throws InternalGemFireException {
+
-    FileInputStream fis = null;
-    try {
-      fis = new FileInputStream(file);
-      ObjectInput ois = new ObjectInputStream(fis);
-      
-      int magic = ois.readInt();
-      if (magic != LOCATOR_FILE_STAMP) {
+    try (ObjectInput ois = new ObjectInputStream(new FileInputStream(file))) {
+      if (ois.readInt() != LOCATOR_FILE_STAMP) {
-      
+
-      if (geodeVersion != null  &&  version != Version.CURRENT_ORDINAL) {
+      if (geodeVersion != null  &&  version == Version.CURRENT_ORDINAL) {
-        ois = new VersionedObjectInput(ois, geodeVersion);
-      } else {
-        return false;
+        ObjectInput ois2 = new VersionedObjectInput(ois, geodeVersion);
+        this.view = DataSerializer.readObject(ois2);
+        logger.info("Initial membership is " + view);
+        return true;
-
-      this.view = DataSerializer.readObject(ois);
-
-      logger.info("Initial membership is " + view);
-      return true;
-    }
-    catch (Exception e) {
-      e.printStackTrace();
-      logger.warn(LocalizedStrings.Locator_unable_to_recover_view_0
-          .toLocalizedString(file), e);
-      try {
-        fis.close();
-      } catch (IOException ex) {
-        // ignore
-      }
+      return false;
+    } catch (Exception e) {
+      String msg = LOCATOR_UNABLE_TO_RECOVER_VIEW.toLocalizedString(file.toString());
+      logger.warn(msg, e);
+      throw new InternalGemFireException(msg, e);
-    finally {
-      try { fis.close(); } catch (IOException e) { }
-    }
-    return false;
