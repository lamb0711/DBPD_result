GEODE-243: remove deprecated Bridge feature

All the public classes and most of the internal ones
have been removed. The cache xsd also has its bridge
elements removed.
The deprecated admin package did not have its bridge
apis removed since the entire admin package is going
to be removed as a seperate project.
The external javadocs have also been updated to no
longer use the term "bridge".
Localized strings were changed to no longer use "bridge".
Internal code and test code continues to have some
bridge references. Additional cleanup will be done
in the future.

-import com.gemstone.gemfire.cache.util.BridgeMembershipEvent;
-import com.gemstone.gemfire.cache.util.BridgeMembershipListener;
-import com.gemstone.gemfire.internal.cache.BridgeServerImpl;
+import com.gemstone.gemfire.internal.cache.CacheServerImpl;
- * <code>BridgeMembershipListener</code>s. The public counterpart for this
- * class is {@link com.gemstone.gemfire.cache.util.BridgeMembership}.
+ * <code>ClientMembershipListener</code>s. The public counterpart for this
+ * class is {@link com.gemstone.gemfire.management.membership.ClientMembership}.
-public final class InternalBridgeMembership  {
+public final class InternalClientMembership  {
-   * The membership listeners registered on this InternalBridgeMembership
+   * The membership listeners registered on this InternalClientMembership
-  private static volatile List<BridgeMembershipListener> membershipListeners = Collections.emptyList();
-  
-  
-   * QueuedExecutor for firing BridgeMembershipEvents 
+   * QueuedExecutor for firing ClientMembershipEvents 
-          "BridgeMembership Event Invoker Group", logger);
+          "ClientMembership Event Invoker Group", logger);
-   * @guarded.By InternalBridgeMembership.class
+   * @guarded.By InternalClientMembership.class
-  private InternalBridgeMembership() {}
+  private InternalClientMembership() {}
-   * Registers a {@link BridgeMembershipListener} for notification of
-   * connection changes for BridgeServers and bridge clients.
-   * @param listener a BridgeMembershipListener to be registered
-   * @deprecated use newer registerClientMembershipListener instead
-   */
-  public static void registerBridgeMembershipListener(BridgeMembershipListener listener) {
-    startMonitoring();
-    synchronized (membershipLock) {
-      List<BridgeMembershipListener> oldListeners = membershipListeners;
-      if (!oldListeners.contains(listener)) {
-        List<BridgeMembershipListener> newListeners = new ArrayList<BridgeMembershipListener>(oldListeners);
-        newListeners.add(listener);
-        membershipListeners = newListeners;
-      }
-    }
-  }
-  
-  /**
-   * Removes registration of a previously registered {@link
-   * BridgeMembershipListener}.
-   * @param listener a BridgeMembershipListener to be unregistered
-   * @deprecated
-   */
-  public static void unregisterBridgeMembershipListener(BridgeMembershipListener listener) {
-    startMonitoring();
-    synchronized (membershipLock) {
-      List<BridgeMembershipListener> oldListeners = membershipListeners;
-      if (oldListeners.contains(listener)) {
-        List<BridgeMembershipListener> newListeners = new ArrayList<BridgeMembershipListener>(oldListeners);
-        if (newListeners.remove(listener)) {
-          membershipListeners = newListeners;
-        }
-      }
-    }
-  }
-  
-  /**
-   * <code>BridgeMembershipListener</code>s. Modifications to the returned
-   * array will not effect the registration of these listeners.
-   * @return the registered <code>BridgeMembershipListener</code>s; an empty
-   * array if no listeners
-   * @deprecated
-   */
-  public static BridgeMembershipListener[] getBridgeMembershipListeners() {
-    startMonitoring();
-    // Synchronization is not needed because we never modify this list
-    // in place.
-    
-    List<BridgeMembershipListener> l = membershipListeners; // volatile fetch
-    // convert to an array
-    BridgeMembershipListener[] listeners = (BridgeMembershipListener[]) 
-        l.toArray(new BridgeMembershipListener[l.size()]);
-    return listeners;
-  }
-  
-  /**
-   * Returns an array of all the currently registered
-   * <code>BridgeMembershipListener<code>s. and <code>ClientMembershipListener<code>s.
+   * <code>ClientMembershipListener<code>s. and <code>ClientMembershipListener<code>s.
-      membershipListeners = new ArrayList<BridgeMembershipListener>();
-      // Note it is not necessary to synchronize on the list of bridge servers here, 
+      // Note it is not necessary to synchronize on the list of Client servers here, 
-      for (Iterator bsii = CacheFactory.getAnyInstance().getBridgeServers().iterator(); bsii.hasNext(); ) {
-        BridgeServerImpl bsi = (BridgeServerImpl) bsii.next();
+      for (Iterator bsii = CacheFactory.getAnyInstance().getCacheServers().iterator(); bsii.hasNext(); ) {
+        CacheServerImpl bsi = (CacheServerImpl) bsii.next();
-   * Caller must synchronize on cache.allBridgeServersLock
+   * Caller must synchronize on cache.allClientServersLock
-    for (Iterator bsii = CacheFactory.getAnyInstance().getBridgeServers().iterator(); bsii.hasNext(); ) {
-      BridgeServerImpl bsi = (BridgeServerImpl) bsii.next();
+    for (Iterator bsii = CacheFactory.getAnyInstance().getCacheServers().iterator(); bsii.hasNext(); ) {
+      CacheServerImpl bsi = (CacheServerImpl) bsii.next();
-    for (Iterator bsii = c.getBridgeServers().iterator(); bsii.hasNext(); ) {
-      BridgeServerImpl bsi = (BridgeServerImpl) bsii.next();
+    for (Iterator bsii = c.getCacheServers().iterator(); bsii.hasNext(); ) {
+      CacheServerImpl bsi = (CacheServerImpl) bsii.next();
-   * Notifies registered listeners that a bridge member has joined. The new
-   * member may be a bridge client connecting to this process or a bridge
+   * Notifies registered listeners that a Client member has joined. The new
+   * member may be a client connecting to this process or a
-   * @param client true if the member is a bridge client; false if bridge server
+   * @param client true if the member is a client; false if server
-    final BridgeMembershipEvent event =
-        new InternalBridgeMembershipEvent(member, client);
+    final ClientMembershipEvent event =
+        new InternalClientMembershipEvent(member, client);
-      doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_JOINED);
-                doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_JOINED);
-   * Notifies registered listeners that a bridge member has left. The departed
-   * member may be a bridge client previously connected to this process or a
-   * bridge server that this process was connected to.
+   * Notifies registered listeners that a member has left. The departed
+   * member may be a client previously connected to this process or a
+   * server that this process was connected to.
-   * @param client true if the member is a bridge client; false if bridge server
+   * @param client true if the member is a client; false if server
-    final BridgeMembershipEvent event =
-        new InternalBridgeMembershipEvent(member, client);
+    final ClientMembershipEvent event =
+        new InternalClientMembershipEvent(member, client);
-      doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_LEFT);
-                doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_LEFT);
-   * Notifies registered listeners that a bridge member has crashed. The
-   * departed member may be a bridge client previously connected to this
-   * process or a bridge server that this process was connected to.
+   * Notifies registered listeners that a member has crashed. The
+   * departed member may be a client previously connected to this
+   * process or a server that this process was connected to.
-   * @param client true if the member is a bridge client; false if bridge server
+   * @param client true if the member is a client; false if server
-    final BridgeMembershipEvent event =
-        new InternalBridgeMembershipEvent(member, client);
+    final ClientMembershipEvent event =
+        new InternalClientMembershipEvent(member, client);
-      doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_CRASHED);
-              doNotifyBridgeMembershipListener(member, client, event,EventType.CLIENT_CRASHED);
-        // this can be thrown by a bridge server when the system is shutting
+        // this can be thrown by a server when the system is shutting
-  private static void doNotifyBridgeMembershipListener(DistributedMember member, boolean client,
-      BridgeMembershipEvent bridgeMembershipEvent, EventType eventType) {
-
-    for (Iterator<BridgeMembershipListener> iter = membershipListeners.iterator(); iter.hasNext();) {
-
-      BridgeMembershipListener listener = iter.next();
-      try {
-        if (eventType.equals(EventType.CLIENT_JOINED)) {
-          listener.memberJoined(bridgeMembershipEvent);
-        } else if (eventType.equals(EventType.CLIENT_LEFT)) {
-          listener.memberLeft(bridgeMembershipEvent);
-        } else {
-          listener.memberCrashed(bridgeMembershipEvent);
-        }
-      } catch (CancelException e) {
-        // this can be thrown by a bridge server when the system is shutting
-        // down
-        return;
-      } catch (VirtualMachineError e) {
-        SystemFailure.initiateFailure(e);
-        throw e;
-      } catch (Throwable t) {
-        SystemFailure.checkFailure();
-        logger.warn(LocalizedMessage.create(LocalizedStrings.LocalRegion_UNEXPECTED_EXCEPTION), t);
-      }
-    }
-  }
-  
-
-//   * <code>BridgeMembershipListener</code>s.
+//   * <code>ClientMembershipListener</code>s.
-//  private static boolean hasBridgeMembershipListeners() {
+//  private static boolean hasClientMembershipListeners() {
-            return "Disconnect listener for InternalBridgeMembership";
+            return "Disconnect listener for InternalClientMembership";
-                new Thread(group, command, "BridgeMembership Event Invoker");
+                new Thread(group, command, "ClientMembership Event Invoker");
-   * Internal implementation of BridgeMembershipEvent.
+   * Internal implementation of ClientMembershipEvent.
-  protected static class InternalBridgeMembershipEvent
-  implements BridgeMembershipEvent,ClientMembershipEvent {
+  protected static class InternalClientMembershipEvent
+  implements ClientMembershipEvent {
-    protected InternalBridgeMembershipEvent(DistributedMember member, boolean client) {
+    protected InternalClientMembershipEvent(DistributedMember member, boolean client) {
-      final StringBuffer sb = new StringBuffer("[BridgeMembershipEvent: ");
+      final StringBuffer sb = new StringBuffer("[ClientMembershipEvent: ");
