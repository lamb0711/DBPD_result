Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_FUNCTION })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_FUNCTION})
-      //TODO: Add optioncontext for functionID
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ID, 
-          mandatory = true, help = CliStrings.EXECUTE_FUNCTION__ID__HELP) String functionId,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONGROUPS, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      // TODO: Add optioncontext for functionID
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ID, mandatory = true,
+          help = CliStrings.EXECUTE_FUNCTION__ID__HELP) String functionId,
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONGROUPS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONMEMBER, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONMEMBER,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONREGION, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ONREGION,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ARGUMENTS, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__ARGUMENTS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__RESULTCOLLECTOR, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__RESULTCOLLECTOR,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.EXECUTE_FUNCTION__FILTER, 
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, 
+      @CliOption(key = CliStrings.EXECUTE_FUNCTION__FILTER,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-    CompositeResultData executeFunctionResultTable = ResultBuilder
-        .createCompositeResultData();
-    TabularResultData resultTable = executeFunctionResultTable.addSection().addTable(
-        "Table1");
+    CompositeResultData executeFunctionResultTable = ResultBuilder.createCompositeResultData();
+    TabularResultData resultTable = executeFunctionResultTable.addSection().addTable("Table1");
-    if (functionId != null){
+    if (functionId != null) {
-    if (onRegion != null){
+    if (onRegion != null) {
-    if (onMember != null){
+    if (onMember != null) {
-    if (filterString != null){
+    if (filterString != null) {
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__MISSING_FUNCTIONID);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__MISSING_FUNCTIONID);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-      }else if ( (onRegion == null || onRegion.length() == 0) && (filterString != null ) ){
+      } else if ((onRegion == null || onRegion.length() == 0) && (filterString != null)) {
-        .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-            CliStrings.EXECUTE_FUNCTION__MSG__MEMBER_SHOULD_NOT_HAVE_FILTER_FOR_EXECUTION);
+            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+            .addLine(CliStrings.EXECUTE_FUNCTION__MSG__MEMBER_SHOULD_NOT_HAVE_FILTER_FOR_EXECUTION);
-      
-      Cache cache = CacheFactory.getAnyInstance();   
-     
+
+      Cache cache = CacheFactory.getAnyInstance();
+
-        resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest().forName(resultCollector).newInstance();        
+        resultCollectorInstance =
+            (ResultCollector) ClassPathLoader.getLatest().forName(resultCollector).newInstance();
-        //if user wish to execute on locator then he can choose --member or --group option
+        // if user wish to execute on locator then he can choose --member or --group option
-        if (dsMembers.size() > 0) {          
+        if (dsMembers.size() > 0) {
-          LogWrapper.getInstance().info(
-              CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__EXECUTING_0_ON_ENTIRE_DS,
-                  functionId));
+          LogWrapper.getInstance().info(CliStrings
+              .format(CliStrings.EXECUTE_FUNCTION__MSG__EXECUTING_0_ON_ENTIRE_DS, functionId));
-            executeAndGetResults(functionId, filterString, resultCollector,
-                arguments, cache, member, resultTable, onRegion);
+            executeAndGetResults(functionId, filterString, resultCollector, arguments, cache,
+                member, resultTable, onRegion);
-          DistributedRegionMXBean bean = ManagementService
-              .getManagementService(GemFireCacheImpl.getInstance())
-              .getDistributedRegionMXBean(onRegion);
+          DistributedRegionMXBean bean =
+              ManagementService.getManagementService(GemFireCacheImpl.getInstance())
+                  .getDistributedRegionMXBean(onRegion);
-            bean = ManagementService.getManagementService(
-                GemFireCacheImpl.getInstance()).getDistributedRegionMXBean(Region.SEPARATOR + onRegion);
+            bean = ManagementService.getManagementService(GemFireCacheImpl.getInstance())
+                .getDistributedRegionMXBean(Region.SEPARATOR + onRegion);
-              return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__MXBEAN_0_FOR_NOT_FOUND,
-                  onRegion));
+              return ResultBuilder.createGemFireErrorResult(CliStrings
+                  .format(CliStrings.EXECUTE_FUNCTION__MSG__MXBEAN_0_FOR_NOT_FOUND, onRegion));
-                if (MBeanJMXAdapter.getMemberNameOrId(dsmember).equals(
-                    memberName)) {
+                if (MBeanJMXAdapter.getMemberNameOrId(dsmember).equals(memberName)) {
-            executeAndGetResults(functionId, filterString, resultCollector,
-                arguments, cache, member, resultTable, onRegion);
+            executeAndGetResults(functionId, filterString, resultCollector, arguments, cache,
+                member, resultTable, onRegion);
-                CliStrings.EXECUTE_FUNCTION__MSG__NO_ASSOCIATED_MEMBER_REGION,
-                " " + onRegion));
+                CliStrings.EXECUTE_FUNCTION__MSG__NO_ASSOCIATED_MEMBER_REGION, " " + onRegion));
-              List<Object> results = (List<Object>) execution.execute(
-                  functionId).getResult();
+              List<Object> results = (List<Object>) execution.execute(functionId).getResult();
-                toTabularResultData(resultTable, cache.getDistributedSystem()
-                    .getDistributedMember().getId(), strResult.toString());
+                toTabularResultData(resultTable,
+                    cache.getDistributedSystem().getDistributedMember().getId(),
+                    strResult.toString());
-              return ResultBuilder
-                  .createGemFireErrorResult(CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_REGION_1_DETAILS_2,
-                          functionId, onRegion, e.getMessage()));
+              return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_REGION_1_DETAILS_2,
+                  functionId, onRegion, e.getMessage()));
-            return ResultBuilder
-                .createGemFireErrorResult(CliStrings
-                    .format(
-                        CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_REGION_1_DETAILS_2,
-                        functionId,
-                        onRegion,
-                        CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
+            return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_REGION_1_DETAILS_2,
+                functionId, onRegion,
+                CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
-        for(String grp : onGroups){
+        for (String grp : onGroups) {
-        
+
-            executeAndGetResults(functionId, filterString, resultCollector,
-                arguments, cache, member, resultTable, onRegion);
+            executeAndGetResults(functionId, filterString, resultCollector, arguments, cache,
+                member, resultTable, onRegion);
-          for(String grp : onGroups){
+          for (String grp : onGroups) {
-          return ResultBuilder.createUserErrorResult(CliStrings.format(
-              CliStrings.EXECUTE_FUNCTION__MSG__GROUPS_0_HAS_NO_MEMBERS, grps.toString().substring(0,grps.toString().length() -1)));
+          return ResultBuilder.createUserErrorResult(
+              CliStrings.format(CliStrings.EXECUTE_FUNCTION__MSG__GROUPS_0_HAS_NO_MEMBERS,
+                  grps.toString().substring(0, grps.toString().length() - 1)));
-        DistributedMember member = CliUtil
-            .getDistributedMemberByNameOrId(onMember); // fix for bug 45658
+        DistributedMember member = CliUtil.getDistributedMemberByNameOrId(onMember); // fix for bug
+                                                                                     // 45658
-          executeAndGetResults(functionId, filterString, resultCollector,
-              arguments, cache, member, resultTable, onRegion);
+          executeAndGetResults(functionId, filterString, resultCollector, arguments, cache, member,
+              resultTable, onRegion);
-              .format(CliStrings.EXECUTE_FUNCTION__MSG__NO_ASSOCIATED_MEMBER
-                  + " " + onMember));
+              .format(CliStrings.EXECUTE_FUNCTION__MSG__NO_ASSOCIATED_MEMBER + " " + onMember));
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-          .addLine(e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-          .addLine(e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-          .addLine(e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-          .addLine(e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-      .addLine(e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-    Set<DistributedMember> dsMembers = CliUtil.getAllMembers(cache) ;
+    Set<DistributedMember> dsMembers = CliUtil.getAllMembers(cache);
-  void executeAndGetResults(String functionId, String filterString,
-      String resultCollector, String[] arguments, Cache cache,
-      DistributedMember member, TabularResultData resultTable, String onRegion) {
+  void executeAndGetResults(String functionId, String filterString, String resultCollector,
+      String[] arguments, Cache cache, DistributedMember member, TabularResultData resultTable,
+      String onRegion) {
-    try {      
+    try {
-      if(filterString != null){
+      if (filterString != null) {
-      if (arguments != null && arguments.length > 0) {        
+      if (arguments != null && arguments.length > 0) {
-          // send via CSV separated value format          
-          if(str != null){
-            args[3] = args[3] + str + ",";            
+          // send via CSV separated value format
+          if (str != null) {
+            args[3] = args[3] + str + ",";
-        List<Object> results = (List<Object>) execution.execute(function)
-            .getResult();
+        List<Object> results = (List<Object>) execution.execute(function).getResult();
-                resultMessege.append(((Exception)resultObj).getMessage());
+                resultMessege.append(((Exception) resultObj).getMessage());
-        toTabularResultData(resultTable, member.getId(), resultMessege
-            .toString());
-      }else{
-        toTabularResultData(resultTable, member.getId(), CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR);        
+        toTabularResultData(resultTable, member.getId(), resultMessege.toString());
+      } else {
+        toTabularResultData(resultTable, member.getId(),
+            CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR);
-          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_EXECUTE_FUNCTION_0_ON_MEMBER_1_ERROR_2, functionId,
-          member.getId(), e.getMessage()));
-      toTabularResultData(resultTable, member.getId(), resultMessege
-          .toString());
+          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_EXECUTE_FUNCTION_0_ON_MEMBER_1_ERROR_2,
+          functionId, member.getId(), e.getMessage()));
+      toTabularResultData(resultTable, member.getId(), resultMessege.toString());
-          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_EXECUTE_FUNCTION_0_ON_MEMBER_1_ERROR_2, functionId,
-          member.getId(), e.getMessage()));
-      toTabularResultData(resultTable, member.getId(), resultMessege
-          .toString());
+          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_EXECUTE_FUNCTION_0_ON_MEMBER_1_ERROR_2,
+          functionId, member.getId(), e.getMessage()));
+      toTabularResultData(resultTable, member.getId(), resultMessege.toString());
-  protected void toTabularResultData(TabularResultData table,
-      String memberId, String memberResult) {
+  protected void toTabularResultData(TabularResultData table, String memberId,
+      String memberResult) {
-  
+
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_FUNCTION } ,
-      interceptor = "org.apache.geode.management.internal.cli.commands.FunctionCommands$Interceptor")  
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_FUNCTION},
+      interceptor = "org.apache.geode.management.internal.cli.commands.FunctionCommands$Interceptor")
-  //TODO: Add optioncontext for functionId
+  // TODO: Add optioncontext for functionId
-      @CliOption(key = CliStrings.DESTROY_FUNCTION__ID, 
-                 mandatory = true, help = CliStrings.DESTROY_FUNCTION__HELP) String functionId,
-      @CliOption(key = CliStrings.DESTROY_FUNCTION__ONGROUPS, 
-                 unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                 optionContext = ConverterHint.MEMBERGROUP,
-                 help = CliStrings.DESTROY_FUNCTION__ONGROUPS__HELP) String[] groups,
-      @CliOption(key = CliStrings.DESTROY_FUNCTION__ONMEMBER, 
-                 unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                 optionContext = ConverterHint.MEMBERIDNAME,
-                 help = CliStrings.DESTROY_FUNCTION__ONMEMBER__HELP) String memberId) {
+      @CliOption(key = CliStrings.DESTROY_FUNCTION__ID, mandatory = true,
+          help = CliStrings.DESTROY_FUNCTION__HELP) String functionId,
+      @CliOption(key = CliStrings.DESTROY_FUNCTION__ONGROUPS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.DESTROY_FUNCTION__ONGROUPS__HELP) String[] groups,
+      @CliOption(key = CliStrings.DESTROY_FUNCTION__ONMEMBER,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.DESTROY_FUNCTION__ONMEMBER__HELP) String memberId) {
-    try {    
+    try {
-      if(groups != null && memberId != null){
-        return ResultBuilder.createUserErrorResult(CliStrings.DESTROY_FUNCTION__MSG__PROVIDE_OPTION);
-      }else if (groups != null && groups.length > 0 ) {   
-        //execute on group members
-        for(String grp : groups){
+      if (groups != null && memberId != null) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.DESTROY_FUNCTION__MSG__PROVIDE_OPTION);
+      } else if (groups != null && groups.length > 0) {
+        // execute on group members
+        for (String grp : groups) {
-        Result results = executeFunction(cache,  dsMembers,  functionId);
+        Result results = executeFunction(cache, dsMembers, functionId);
-      }else if (memberId != null){
-        //execute on member
-        dsMembers.add(getMember(cache , memberId));
-         @SuppressWarnings("unchecked")
-        Result results =  executeFunction(cache,  dsMembers,  functionId);   
-        return results;           
-      }  
-      else{
-        //no option provided. 
+      } else if (memberId != null) {
+        // execute on member
+        dsMembers.add(getMember(cache, memberId));
-        Result results =  executeFunction(cache,  cache.getMembers(),  functionId);        
-        return results;   
+        Result results = executeFunction(cache, dsMembers, functionId);
+        return results;
+      } else {
+        // no option provided.
+        @SuppressWarnings("unchecked")
+        Result results = executeFunction(cache, cache.getMembers(), functionId);
+        return results;
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-              e.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
+
-      Set< Entry<String, String> > setEnvMap = paramValueMap.entrySet();    
+      Set<Entry<String, String>> setEnvMap = paramValueMap.entrySet();
-      
-      if ((onGroup == null && onMember == null ) ){      
-        Response response = readYesNo("Do you really want to destroy "+paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID)+ " on entire DS?", Response.NO);
-        if (response == Response.NO) {          
-          return ResultBuilder.createShellClientAbortOperationResult("Aborted destroy of " +paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID) );
-        }else{          
-          return ResultBuilder.createInfoResult("Destroying " +paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID) );
+
+      if ((onGroup == null && onMember == null)) {
+        Response response = readYesNo("Do you really want to destroy "
+            + paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID) + " on entire DS?", Response.NO);
+        if (response == Response.NO) {
+          return ResultBuilder.createShellClientAbortOperationResult(
+              "Aborted destroy of " + paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID));
+        } else {
+          return ResultBuilder
+              .createInfoResult("Destroying " + paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID));
-      }else{        
-        return ResultBuilder.createInfoResult("Destroying " +paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID) );
-      }     
+      } else {
+        return ResultBuilder
+            .createInfoResult("Destroying " + paramValueMap.get(CliStrings.DESTROY_FUNCTION__ID));
+      }
-    public Result postExecution(GfshParseResult parseResult, Result commandResult) {     
+    public Result postExecution(GfshParseResult parseResult, Result commandResult) {
-  
-  Result executeFunction(Cache cache, Set<DistributedMember> DsMembers, String functionId){
-    //unregister on a set of of members
+
+  Result executeFunction(Cache cache, Set<DistributedMember> DsMembers, String functionId) {
+    // unregister on a set of of members
-    
-    if(DsMembers.isEmpty()){      
-     return  ResultBuilder.createInfoResult("No members for execution");
+
+    if (DsMembers.isEmpty()) {
+      return ResultBuilder.createInfoResult("No members for execution");
-    
+
-      cache.getLogger().error("executeUnregister execution is null") ;
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-              CliStrings.DESTROY_FUNCTION__MSG__CANNOT_EXECUTE);
+      cache.getLogger().error("executeUnregister execution is null");
+      ErrorResultData errorResultData =
+          ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+              .addLine(CliStrings.DESTROY_FUNCTION__MSG__CANNOT_EXECUTE);
-      resultList = (ArrayList) execution.execute(unregisterFunction)
-          .getResult();
-    } catch (FunctionException ex) {     
+      resultList = (ArrayList) execution.execute(unregisterFunction).getResult();
+    } catch (FunctionException ex) {
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-              ex.getMessage());
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(ex.getMessage());
-    String resultStr = ((String) resultList.get(0));    
-    if (resultStr.equals("Succeeded in unregistering")){
+    String resultStr = ((String) resultList.get(0));
+    if (resultStr.equals("Succeeded in unregistering")) {
-      for(DistributedMember member : DsMembers){
+      for (DistributedMember member : DsMembers) {
-      return ResultBuilder.createInfoResult("Destroyed " + functionId
-        + " Successfully on " + members.toString().substring(0,members.toString().length() -1));       
-    }else{
+      return ResultBuilder.createInfoResult("Destroyed " + functionId + " Successfully on "
+          + members.toString().substring(0, members.toString().length() - 1));
+    } else {
-  }     
-  
+  }
+
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_FUNCTION })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_FUNCTION})
-      @CliOption(key = CliStrings.LIST_FUNCTION__MATCHES, 
-                 help = CliStrings.LIST_FUNCTION__MATCHES__HELP)String matches,
-      @CliOption(key = CliStrings.LIST_FUNCTION__GROUP, 
-                 optionContext = ConverterHint.MEMBERGROUP,
-                 help = CliStrings.LIST_FUNCTION__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String groups,
-      @CliOption(key = CliStrings.LIST_FUNCTION__MEMBER, 
-                 optionContext = ConverterHint.MEMBERIDNAME,
-                 help = CliStrings.LIST_FUNCTION__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String members) {
+      @CliOption(key = CliStrings.LIST_FUNCTION__MATCHES,
+          help = CliStrings.LIST_FUNCTION__MATCHES__HELP) String matches,
+      @CliOption(key = CliStrings.LIST_FUNCTION__GROUP, optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.LIST_FUNCTION__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String groups,
+      @CliOption(key = CliStrings.LIST_FUNCTION__MEMBER, optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.LIST_FUNCTION__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String members) {
-    
+
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(this.listFunctionFunction, new Object[] { matches }, targetMembers);
+      ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(this.listFunctionFunction, new Object[] {matches}, targetMembers);
-      
+
-        return ResultBuilder.createInfoResult(CliStrings.LIST_FUNCTION__NO_FUNCTIONS_FOUND_ERROR_MESSAGE);
+        return ResultBuilder
+            .createInfoResult(CliStrings.LIST_FUNCTION__NO_FUNCTIONS_FOUND_ERROR_MESSAGE);
-      return ResultBuilder.createGemFireErrorResult("Exception while attempting to list functions: " + th.getMessage());
+      return ResultBuilder.createGemFireErrorResult(
+          "Exception while attempting to list functions: " + th.getMessage());
-  
-  @CliAvailabilityIndicator({CliStrings.EXECUTE_FUNCTION, CliStrings.DESTROY_FUNCTION, CliStrings.LIST_FUNCTION})  
+
+  @CliAvailabilityIndicator({CliStrings.EXECUTE_FUNCTION, CliStrings.DESTROY_FUNCTION,
+      CliStrings.LIST_FUNCTION})
-    boolean isAvailable = true; //always available on server
-    if (CliUtil.isGfshVM()) { //in gfsh check if connected
+    boolean isAvailable = true; // always available on server
+    if (CliUtil.isGfshVM()) { // in gfsh check if connected
-    return isAvailable;  
+    return isAvailable;
