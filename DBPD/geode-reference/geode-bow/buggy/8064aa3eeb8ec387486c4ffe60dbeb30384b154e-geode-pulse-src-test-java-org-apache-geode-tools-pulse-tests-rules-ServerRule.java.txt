GEODE-5396: A bit of restructuring and a bit of cleanup to isolate failures better

+import java.util.concurrent.TimeUnit;
+  private String jsonAuthFile;
-    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-    String jmxPropertiesFile = classLoader.getResource("test.properties").getPath();
-
-    int jmxPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
-    server = Server.createServer(jmxPort, jmxPropertiesFile, jsonAuthFile);
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_HOST, LOCALHOST);
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_PORT, Integer.toString(jmxPort));
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED, String.valueOf(Boolean.TRUE));
-
-    int httpPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
-    jetty = JettyHelper.initJetty(LOCALHOST, httpPort, new SSLConfig());
-    JettyHelper.addWebApplication(jetty, PULSE_CONTEXT, getPulseWarPath(), null, null);
-    pulseURL = "http://" + LOCALHOST + ":" + httpPort + PULSE_CONTEXT;
-    System.out.println("Pulse started at " + pulseURL);
+    this.jsonAuthFile = jsonAuthFile;
-
-    jetty.start();
-    Awaitility.await().until(() -> jetty.isStarted());
+    startServer();
+    startJetty();
+    Awaitility.waitAtMost(60, TimeUnit.SECONDS).until(() -> jetty.isStarted());
-    } finally {
-    }
-  }
-
-  private void stopServer() {
-    try {
-      if (server != null) {
-        server.stop();
-      }
-      throw new Error(e);
+      throw new RuntimeException(e);
-  private void stopJetty() {
-    try {
-      if (jetty != null) {
-        jetty.stop();
-        jetty = null;
-      }
-    } catch (Exception e) {
-      throw new Error(e);
-    }
+  private void startServer() throws Exception {
+    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+    String jmxPropertiesFile = classLoader.getResource("test.properties").getPath();
+    int jmxPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_PORT, Integer.toString(jmxPort));
+    server = Server.createServer(jmxPort, jmxPropertiesFile, jsonAuthFile);
+    server.start();
-  private String getPulseWarPath() {
-    String warPath = null;
+  private void startJetty() throws Exception {
+
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_HOST, LOCALHOST);
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED,
+        String.valueOf(Boolean.TRUE));
+
+    int httpPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
+    jetty = JettyHelper.initJetty(LOCALHOST, httpPort, new SSLConfig());
+    JettyHelper.addWebApplication(jetty, PULSE_CONTEXT, getPulseWarPath(), null, null);
+    pulseURL = "http://" + LOCALHOST + ":" + httpPort + PULSE_CONTEXT;
+    System.out.println("Pulse started at " + pulseURL);
+    jetty.start();
+  }
+
+  private void stopServer() throws Exception {
+    server.stop();
+  }
+
+  private void stopJetty() throws Exception {
+    jetty.stop();
+  }
+
+  private String getPulseWarPath() throws IOException {
+    String warPath;
-    try {
-      properties.load(inputStream);
-    } catch (IOException e) {
-      throw new RuntimeException("Unable to open properties file", e);
-    }
+    properties.load(inputStream);
