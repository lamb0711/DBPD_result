GEODE-3179: Changed extract directory of the Tomcat module

This fixes the failing verify bundled jars test, caused by an unexpected
slf4j-jdk jar coming from the tomcat module folder when extracted.

This closes #626

-  public static final String DEFAULT_MODULE_DIR = GEODE_BUILD_HOME + "/tools/Modules/";
+  private static final String DEFAULT_MODULE_LOCATION = GEODE_BUILD_HOME + "/tools/Modules/";
+  public static final String DEFAULT_MODULE_EXTRACTION_DIR = "/tmp/cargo_modules/";
+    logger.info("Extracted module " + moduleName + " to " + MODULE_PATH);
-    String modulePath = null;
-    String modulesDir = DEFAULT_MODULE_DIR;
+    File modulePath = null;
+    File modulesDir = new File(DEFAULT_MODULE_LOCATION);
-    for (File file : (new File(modulesDir)).listFiles()) {
+    for (File file : modulesDir.listFiles()) {
-        modulePath = file.getAbsolutePath();
+        modulePath = file;
-      if (!FilenameUtils.getExtension(modulePath).equals("zip")) {
+      if (!FilenameUtils.getExtension(modulePath.getAbsolutePath()).equals("zip")) {
-      ZipUtils.unzip(modulePath, modulePath.substring(0, modulePath.length() - 4));
+      // Get the name of the new module folder within the extraction directory
+      File newModuleFolder = new File(DEFAULT_MODULE_EXTRACTION_DIR
+          + modulePath.getName().substring(0, modulePath.getName().length() - 4));
-      modulePath = modulePath.substring(0, modulePath.length() - 4);
+      // Extract folder to location if not already there
+      if (!newModuleFolder.exists()) {
+        ZipUtils.unzip(modulePath.getAbsolutePath(), newModuleFolder.getAbsolutePath());
+      }
+
+      modulePath = newModuleFolder;
-    return modulePath;
+    return modulePath.getAbsolutePath();
