GEODE-5087: send a BatchDestroyOperation for each dropped event at serial primary sender (#1924)


+
+  protected volatile ConcurrentLinkedQueue<EntryEventImpl> tmpDroppedEvents =
+      new ConcurrentLinkedQueue<>();
-    // If this gateway is not running, return
-    if (!isRunning()) {
-      if (isDebugEnabled) {
-        logger.debug("Returning back without putting into the gateway sender queue:" + event);
-      }
-      if (this.eventProcessor != null) {
-        this.eventProcessor.registerEventDroppedInPrimaryQueue(event);
-      }
-      return;
-    }
-
-    final GatewaySenderStats stats = getStatistics();
-    stats.incEventsReceived();
-
-    if (!checkForDistribution(event, stats)) {
-      stats.incEventsNotQueued();
-      return;
-    }
-
-    // this filter is defined by Asif which exist in old wan too. new wan has
-    // other GatewaEventFilter. Do we need to get rid of this filter. Cheetah is
-    // not considering this filter
-    if (!this.filter.enqueueEvent(event)) {
-      stats.incEventsFiltered();
-      return;
-    }
-      Region region = event.getRegion();
+      // If this gateway is not running, return
+      if (!isRunning()) {
+        if (this.isPrimary()) {
+          tmpDroppedEvents.add(clonedEvent);
+          if (isDebugEnabled) {
+            logger.debug("add to tmpDroppedEvents for evnet {}", clonedEvent);
+          }
+        }
+        if (isDebugEnabled) {
+          logger.debug("Returning back without putting into the gateway sender queue:" + event);
+        }
+        return;
+      }
+      final GatewaySenderStats stats = getStatistics();
+      stats.incEventsReceived();
+
+      if (!checkForDistribution(event, stats)) {
+        stats.incEventsNotQueued();
+        return;
+      }
+
+      // this filter is defined by Asif which exist in old wan too. new wan has
+      // other GatewaEventFilter. Do we need to get rid of this filter. Cheetah is
+      // not considering this filter
+      if (!this.filter.enqueueEvent(event)) {
+        stats.incEventsFiltered();
+        return;
+      }
+
+      // start to distribute
+      // process tmpDroppedEvents
+      EntryEventImpl droppedEvent = null;
+      while ((droppedEvent = tmpDroppedEvents.poll()) != null) {
+        this.eventProcessor.registerEventDroppedInPrimaryQueue(droppedEvent);
+      }
+
-  protected abstract void setModifiedEventId(EntryEventImpl clonedEvent);
+  public abstract void setModifiedEventId(EntryEventImpl clonedEvent);
