GEODE-6918: Cleanup InternalLocator use of workingDirectory (#3782)

* Pass workingDirectory to InternalConfigurationPersistenceService
* Fixup InternalConfigurationPersistenceService constructors
* Create InternalLocatorIntegrationTest
* Use Path instead of String or File
* Cleanup InternalConfigurationPersistenceService and JAXBService

+import java.nio.file.Path;
+import java.nio.file.Paths;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.internal.config.JAXBService;
-  private final File workingDirectory;
+  private final Path workingDirectory;
+   *
+   * @deprecated Please use
+   *             {@link #createLocator(int, LoggingSession, File, InternalLogWriter, InternalLogWriter, InetAddress, String, Properties, Path)}
+   *             instead.
+  @Deprecated
-        hostnameForClients, distributedSystemProperties, startDistributedSystem,
-        new File(System.getProperty("user.dir")));
+        hostnameForClients, distributedSystemProperties,
+        Paths.get(System.getProperty("user.dir")));
-   * @param startDistributedSystem if true then this locator will also start its own ds
-      String hostnameForClients, Properties distributedSystemProperties,
-      boolean startDistributedSystem, File workingDirectory) {
+      String hostnameForClients, Properties distributedSystemProperties, Path workingDirectory) {
-              startDistributedSystem, workingDirectory);
+              workingDirectory);
-        new File(System.getProperty("user.dir")));
+        Paths.get(System.getProperty("user.dir")));
-      Properties distributedSystemProperties, String hostnameForClients, File workingDirectory)
+      Properties distributedSystemProperties, String hostnameForClients, Path workingDirectory)
-          bindAddress, hostnameForClients, distributedSystemProperties, startDistributedSystem,
+          bindAddress, hostnameForClients, distributedSystemProperties,
-   * @param startDistributedSystem if true locator will start its own distributed system
+   * @param workingDirectory the working directory to use for files
-  private InternalLocator(int port, LoggingSession loggingSession, File logFile,
+  @VisibleForTesting
+  InternalLocator(int port, LoggingSession loggingSession, File logFile,
-      DistributionConfigImpl distributionConfig, boolean startDistributedSystem,
-      File workingDirectory) {
-    // TODO: the following three assignments are already done in superclass
+      DistributionConfigImpl distributionConfig, Path workingDirectory) {
-    File productUseFile = new File(workingDirectory, "locator" + boundPort + "views.log");
+    File productUseFile = workingDirectory.resolve("locator" + boundPort + "views.log").toFile();
-            new InternalConfigurationPersistenceService(newCache);
+            new InternalConfigurationPersistenceService(newCache, workingDirectory,
+                JAXBService.create());
-            new InternalConfigurationPersistenceService(locator.internalCache);
+            new InternalConfigurationPersistenceService(locator.internalCache, workingDirectory,
+                JAXBService.create());
