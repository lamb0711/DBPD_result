GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.*;
+import org.apache.geode.cache.CacheEvent;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CacheWriterException;
+import org.apache.geode.cache.DiskAccessException;
+import org.apache.geode.cache.EntryNotFoundException;
+import org.apache.geode.cache.Operation;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.cache.TransactionId;
-import org.apache.geode.internal.cache.versions.*;
+import org.apache.geode.internal.cache.versions.ConcurrentCacheModificationException;
+import org.apache.geode.internal.cache.versions.RegionVersionVector;
+import org.apache.geode.internal.cache.versions.VersionHolder;
+import org.apache.geode.internal.cache.versions.VersionSource;
+import org.apache.geode.internal.cache.versions.VersionStamp;
+import org.apache.geode.internal.cache.versions.VersionTag;
-import org.apache.logging.log4j.Logger;
-
-import java.util.*;
-import java.util.concurrent.atomic.AtomicInteger;
-
- *
- *
-
-
-  private Attributes attr;
-  private transient Object owner; // the region that owns this map
-  protected AbstractRegionMap(InternalRegionArguments internalRegionArgs) {}
+  private Attributes attr;
+
+  // the region that owns this map
+  private Object owner;
+
+  protected AbstractRegionMap(InternalRegionArguments internalRegionArgs) {
+    // do nothing
+  }
-    final GemFireCacheImpl cache;
-    boolean withVersioning = false;
-    boolean offHeap = false;
+    boolean withVersioning;
+    boolean offHeap;
-      cache = region.getGemFireCache();
-      offHeap = ((PlaceHolderDiskRegion) owner).getOffHeap();
+      offHeap = ((RegionEntryContext) owner).getOffHeap();
-          ((PlaceHolderDiskRegion) owner).getFlags().contains(DiskRegionFlag.IS_WITH_VERSIONING);
-      cache = GemFireCacheImpl.getInstance();
+          ((DiskRegionView) owner).getFlags().contains(DiskRegionFlag.IS_WITH_VERSIONING);
-  protected CustomEntryConcurrentHashMap<Object, Object> createConcurrentMap(int initialCapacity,
+  private CustomEntryConcurrentHashMap<Object, Object> createConcurrentMap(int initialCapacity,
-      return new CustomEntryConcurrentHashMap<Object, Object>(initialCapacity, loadFactor,
-          concurrencyLevel, isIdentityMap, entryCreator);
+      return new CustomEntryConcurrentHashMap<>(initialCapacity, loadFactor, concurrencyLevel,
+          isIdentityMap, entryCreator);
-      return new CustomEntryConcurrentHashMap<Object, Object>(initialCapacity, loadFactor,
-          concurrencyLevel, isIdentityMap);
+      return new CustomEntryConcurrentHashMap<>(initialCapacity, loadFactor, concurrencyLevel,
+          isIdentityMap);
-    owner.checkBeforeEntrySync(txEvent);
-                boolean clearOccurred = false;
+                boolean clearOccured = false;
-                  clearOccurred = true;
+                  clearOccured = true;
-                    clearOccurred /* Clear Conflciting with the operation */);
+                    clearOccured /* Clear Conflciting with the operation */);
-                if (!clearOccurred) {
+                if (!clearOccured) {
-    boolean clearOccurred = false;
+    boolean clearOccured = false;
-                          clearOccurred = true;
+                          clearOccured = true;
-                            clearOccurred /* conflict with clear */, invokeCallbacks);
-                        if (!clearOccurred) {
+                            clearOccured /* conflict with clear */, invokeCallbacks);
+                        if (!clearOccured) {
-                    clearOccurred = true;
+                    clearOccured = true;
-                  owner.basicInvalidatePart2(newRe, event, clearOccurred /* conflict with clear */,
+                  owner.basicInvalidatePart2(newRe, event, clearOccured /* conflict with clear */,
-                  if (!clearOccurred) {
+                  if (!clearOccured) {
-                        clearOccurred = true;
+                        clearOccured = true;
-                      owner.basicInvalidatePart2(re, event, clearOccurred /* conflict with clear */,
+                      owner.basicInvalidatePart2(re, event, clearOccured /* conflict with clear */,
-                      if (!clearOccurred) {
+                      if (!clearOccured) {
-          if (didInvalidate && !clearOccurred) {
+          if (didInvalidate && !clearOccured) {
-    owner.checkBeforeEntrySync(txEvent);
-                    boolean clearOccurred = false;
+                    boolean clearOccured = false;
-                      clearOccurred = true;
+                      clearOccured = true;
-                    owner.txApplyInvalidatePart2(oldRe, oldRe.getKey(), didDestroy, true,
-                        clearOccurred);
+                    owner.txApplyInvalidatePart2(oldRe, oldRe.getKey(), didDestroy, true);
-                    if (!clearOccurred) {
+                    if (!clearOccured) {
-                boolean clearOccurred = false;
+                boolean clearOccured = false;
-                  clearOccurred = true;
+                  clearOccured = true;
-                owner.txApplyInvalidatePart2(newRe, newRe.getKey(), didDestroy, true,
-                    clearOccurred);
+                owner.txApplyInvalidatePart2(newRe, newRe.getKey(), didDestroy, true);
-                if (!clearOccurred) {
+                if (!clearOccured) {
-                boolean clearOccurred = false;
+                boolean clearOccured = false;
-                  clearOccurred = true;
+                  clearOccured = true;
-                owner.txApplyInvalidatePart2(re, re.getKey(), didDestroy, true, clearOccurred);
+                owner.txApplyInvalidatePart2(re, re.getKey(), didDestroy, true);
-                if (!clearOccurred) {
+                if (!clearOccured) {
-    boolean clearOccurred = false;
+    boolean clearOccured = false;
-                    clearOccurred = true;
+                    clearOccured = true;
-                  updateLru(clearOccurred, re, event);
+                  updateLru(clearOccured, re, event);
-                      lastModifiedTime, clearOccurred);
+                      lastModifiedTime, clearOccured);
-            if (!clearOccurred) {
+            if (!clearOccured) {
-  private void updateLru(boolean clearOccurred, RegionEntry re, EntryEventImpl event) {
-    if (!clearOccurred) {
+  private void updateLru(boolean clearOccured, RegionEntry re, EntryEventImpl event) {
+    if (!clearOccured) {
-    owner.checkBeforeEntrySync(txEvent);
-                  boolean clearOccurred = false;
+                  boolean clearOccured = false;
-                      clearOccurred = true;
+                      clearOccured = true;
-                      owner.txApplyPutPart2(re, re.getKey(), newValue, lastMod, false, didDestroy,
-                          clearOccurred);
+                      owner.txApplyPutPart2(re, re.getKey(), lastMod, false, didDestroy,
+                          clearOccured);
-                  if (!clearOccurred) {
+                  if (!clearOccured) {
-                owner.txApplyInvalidatePart2(re, re.getKey(), true, false, false /* clear */);
+                owner.txApplyInvalidatePart2(re, re.getKey(), true, false /* clear */);
-                  boolean clearOccurred = false;
+                  boolean clearOccured = false;
-                      clearOccurred = true;
+                      clearOccured = true;
-                      owner.txApplyPutPart2(oldRe, oldRe.getKey(), newValue, lastMod, false,
-                          didDestroy, clearOccurred);
+                      owner.txApplyPutPart2(oldRe, oldRe.getKey(), lastMod, false, didDestroy,
+                          clearOccured);
-                  if (!clearOccurred) {
+                  if (!clearOccured) {
-              boolean clearOccurred = false;
+              boolean clearOccured = false;
-                  clearOccurred = true;
+                  clearOccured = true;
-                  owner.txApplyPutPart2(newRe, newRe.getKey(), newValue, lastMod, true, didDestroy,
-                      clearOccurred);
+                  owner.txApplyPutPart2(newRe, newRe.getKey(), lastMod, true, didDestroy,
+                      clearOccured);
-              if (!clearOccurred) {
+              if (!clearOccured) {
