Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class ParallelGatewaySenderEventProcessor extends
-    AbstractGatewaySenderEventProcessor {
-	
+public class ParallelGatewaySenderEventProcessor extends AbstractGatewaySenderEventProcessor {
+
-  
-  final int index; 
+
+  final int index;
-    super(LoggingThreadGroup.createThreadGroup("Event Processor for GatewaySender_"
-        + sender.getId(), logger),
+    super(LoggingThreadGroup
+        .createThreadGroup("Event Processor for GatewaySender_" + sender.getId(), logger),
-  
+
-  protected ParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,  Set<Region> userRegions, int id, int nDispatcher) {
-    super(LoggingThreadGroup.createThreadGroup("Event Processor for GatewaySender_"
-        + sender.getId(), logger),
-        "Event Processor for GatewaySender_" + sender.getId()+"_"+ id, sender);
+  protected ParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,
+      Set<Region> userRegions, int id, int nDispatcher) {
+    super(LoggingThreadGroup
+        .createThreadGroup("Event Processor for GatewaySender_" + sender.getId(), logger),
+        "Event Processor for GatewaySender_" + sender.getId() + "_" + id, sender);
-    //this.queue = new ParallelGatewaySenderQueue(sender, userRegions, id, nDispatcher);
+    // this.queue = new ParallelGatewaySenderQueue(sender, userRegions, id, nDispatcher);
-  
+
-  protected void initializeMessageQueue(String id ) {
+  protected void initializeMessageQueue(String id) {
-    for (LocalRegion region : ((GemFireCacheImpl)((AbstractGatewaySender)sender).getCache())
+    for (LocalRegion region : ((GemFireCacheImpl) ((AbstractGatewaySender) sender).getCache())
-    
+
-    
+
-    
-    if(((ParallelGatewaySenderQueue)queue).localSize() > 0) {
-      ((ParallelGatewaySenderQueue)queue).notifyEventProcessorIfRequired();
+
+    if (((ParallelGatewaySenderQueue) queue).localSize() > 0) {
+      ((ParallelGatewaySenderQueue) queue).notifyEventProcessorIfRequired();
-  
+
-  public void enqueueEvent(EnumListenerEvent operation, EntryEvent event,
-      Object substituteValue) throws IOException, CacheException {
+  public void enqueueEvent(EnumListenerEvent operation, EntryEvent event, Object substituteValue)
+      throws IOException, CacheException {
-    
-    if (!(region instanceof DistributedRegion) && ((EntryEventImpl)event).getTailKey() == -1) {
-      // In case of parallel sender, we don't expect the key to be not set. 
+
+    if (!(region instanceof DistributedRegion) && ((EntryEventImpl) event).getTailKey() == -1) {
+      // In case of parallel sender, we don't expect the key to be not set.
-      // Don't enqueue the event and return from here only. 
-      // Fix for #49081 and EntryDestroyedException in #49367. 
+      // Don't enqueue the event and return from here only.
+      // Fix for #49081 and EntryDestroyedException in #49367.
-        logger.debug("ParallelGatewaySenderEventProcessor not enqueing the following event since tailKey is not set. {}", event);
+        logger.debug(
+            "ParallelGatewaySenderEventProcessor not enqueing the following event since tailKey is not set. {}",
+            event);
-    
-    //TODO : Kishor : Looks like for PDX region bucket id is set to -1.
-//    int bucketId = -1;
-//    if (!(region instanceof DistributedRegion && ((DistributedRegion)region)
-//        .isPdxTypesRegion())) {
-//      bucketId = PartitionedRegionHelper.getHashKey(event);
-//    }
+
+    // TODO : Kishor : Looks like for PDX region bucket id is set to -1.
+    // int bucketId = -1;
+    // if (!(region instanceof DistributedRegion && ((DistributedRegion)region)
+    // .isPdxTypesRegion())) {
+    // bucketId = PartitionedRegionHelper.getHashKey(event);
+    // }
-      EventID eventID = ((EntryEventImpl)event).getEventId();
+      EventID eventID = ((EntryEventImpl) event).getEventId();
-      gatewayQueueEvent = new GatewaySenderEventImpl(operation, event,
-          substituteValue, true, eventID.getBucketID());
+      gatewayQueueEvent = new GatewaySenderEventImpl(operation, event, substituteValue, true,
+          eventID.getBucketID());
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-      }
-      else {
+      } else {
-    }
-    finally {
+    } finally {
-  	((ParallelGatewaySenderQueue)this.queue).clear(pr, bucketId);
+    ((ParallelGatewaySenderQueue) this.queue).clear(pr, bucketId);
-  
-  /*public int size(PartitionedRegion pr, int bucketId)
-      throws ForceReattemptException {
-  	return ((ParallelGatewaySenderQueue)this.queue).size(pr, bucketId);
-  }*/
-  
+
+  /*
+   * public int size(PartitionedRegion pr, int bucketId) throws ForceReattemptException { return
+   * ((ParallelGatewaySenderQueue)this.queue).size(pr, bucketId); }
+   */
+
-    ((ParallelGatewaySenderQueue)this.queue).notifyEventProcessorIfRequired();
+    ((ParallelGatewaySenderQueue) this.queue).notifyEventProcessorIfRequired();
-  
+
-    return ((ParallelGatewaySenderQueue)this.queue).getBucketToTempQueueMap().get(bucketId);
+    return ((ParallelGatewaySenderQueue) this.queue).getBucketToTempQueueMap().get(bucketId);
-  
+
-    return ((ParallelGatewaySenderQueue)this.queue).getRegion(prRegionName);
+    return ((ParallelGatewaySenderQueue) this.queue).getRegion(prRegionName);
-  
+
-  	((ParallelGatewaySenderQueue)this.queue).removeShadowPR(prRegionName);
+    ((ParallelGatewaySenderQueue) this.queue).removeShadowPR(prRegionName);
-  
-  public void conflateEvent(Conflatable conflatableObject, int bucketId,
-      Long tailKey) {
-  	((ParallelGatewaySenderQueue)this.queue).conflateEvent(conflatableObject, bucketId, tailKey);
+
+  public void conflateEvent(Conflatable conflatableObject, int bucketId, Long tailKey) {
+    ((ParallelGatewaySenderQueue) this.queue).conflateEvent(conflatableObject, bucketId, tailKey);
-  
+
-	// TODO Auto-generated method stub
-	((ParallelGatewaySenderQueue)this.queue).addShadowPartitionedRegionForUserPR(pr);
+    // TODO Auto-generated method stub
+    ((ParallelGatewaySenderQueue) this.queue).addShadowPartitionedRegionForUserPR(pr);
-  
+
-	// TODO Auto-generated method stub
-	((ParallelGatewaySenderQueue)this.queue).addShadowPartitionedRegionForUserRR(userRegion);
+    // TODO Auto-generated method stub
+    ((ParallelGatewaySenderQueue) this.queue).addShadowPartitionedRegionForUserRR(userRegion);
-  
+
-    
+
