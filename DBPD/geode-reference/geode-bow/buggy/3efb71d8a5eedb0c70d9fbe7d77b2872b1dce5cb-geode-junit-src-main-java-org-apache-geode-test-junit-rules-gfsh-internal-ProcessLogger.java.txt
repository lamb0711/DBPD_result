GEODE-7237: Remove log4j-core manipulation from GfshRule (#4089)

Creation of geode-log4j widened a race condition in GfshRule in which
the process being forked would start printing output before the
ProcessLogger had been created and started in order to intercept that
output.

The widening of that race condition resulted in CI failures of
ConnectCommandAcceptanceTest.

ProcessLogger does not appear to have any real need for manipulating
log4j-core which is what widens the race condition far enough to fail
in CI.

Removing the manipulation of log4j-core from ProcessLogger reduces
the race condition for consistent passing. The window itself is still
there but without resorting to something like MainLauncher [1], there's
no way to completely close the window.

[1] geode-junit: org.apache.geode.test.process.MainLauncher

If ConnectCommandAcceptanceTest or other tests using GfshRule fail
after this commit, then we'll need to use something like MainLauncher.

-import org.apache.commons.lang3.SystemUtils;
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.core.Filter;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.appender.ConsoleAppender;
-import org.apache.logging.log4j.core.config.Configurator;
-import org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
-import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder;
-import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
-import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
+
+import org.apache.geode.internal.logging.LogService;
-  private static final LoggerContext LOGGER_CONTEXT = createLoggerContext();
-  private final Logger logger;
+  private final Logger logger;
-    this.logger = LOGGER_CONTEXT.getLogger(name);
+    logger = LogService.getLogger(name);
-  private static LoggerContext createLoggerContext() {
-    LogManager.shutdown();
-
-    ConfigurationBuilder<BuiltConfiguration> builder =
-        ConfigurationBuilderFactory.newConfigurationBuilder();
-    builder.setStatusLevel(Level.ERROR);
-    builder.add(builder.newFilter("ThresholdFilter", Filter.Result.ACCEPT, Filter.Result.NEUTRAL)
-        .addAttribute("level", Level.DEBUG));
-    AppenderComponentBuilder appenderBuilder = builder.newAppender("Stdout", "CONSOLE")
-        .addAttribute("target", ConsoleAppender.Target.SYSTEM_OUT);
-    appenderBuilder.add(builder.newLayout("PatternLayout").addAttribute("pattern",
-        "[%-5level %d{HH:mm:ss.SSS z}] (%c): %msg%n%throwable"));
-    appenderBuilder.add(builder.newFilter("MarkerFilter", Filter.Result.DENY, Filter.Result.NEUTRAL)
-        .addAttribute("marker", "FLOW"));
-    builder.add(appenderBuilder);
-    builder.add(builder.newLogger("org.apache.logging.log4j", Level.ERROR)
-        .add(builder.newAppenderRef("Stdout")).addAttribute("additivity", false));
-    builder.add(builder.newRootLogger(Level.ERROR).add(builder.newAppenderRef("Stdout")));
-
-    return Configurator.initialize(builder.build());
-  }
-
-        .collect(joining(SystemUtils.LINE_SEPARATOR));
+        .collect(joining(System.lineSeparator()));
