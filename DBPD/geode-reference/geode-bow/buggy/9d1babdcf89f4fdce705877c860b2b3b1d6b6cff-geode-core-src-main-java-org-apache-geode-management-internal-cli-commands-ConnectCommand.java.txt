GEODE-3640: Accept all certs when --skip-ssl-verification is used

-import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_PREFIX;
-import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_PREFIX;
-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_SSL_PREFIX;
+import static org.apache.geode.distributed.ConfigurationProperties.*;
+import java.security.cert.X509Certificate;
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
-      result = httpConnect(gfProperties, url);
+      result = httpConnect(gfProperties, url, skipSslValidation);
-  Result httpConnect(Properties gfProperties, String url) {
+  Result httpConnect(Properties gfProperties, String url, boolean skipSslVerification) {
+      sslConfig.setSkipSslVerification(skipSslVerification);
-      return httpConnect(gfProperties, url);
+      return httpConnect(gfProperties, url, skipSslVerification);
-  private void configureHttpsURLConnection(SSLConfig sslConfig) throws Exception {
+  private KeyManager[] getKeyManagers(SSLConfig sslConfig) throws Exception {
-    FileInputStream trustStoreStream = null;
+    KeyManagerFactory keyManagerFactory = null;
+
-      KeyManagerFactory keyManagerFactory = null;
+    } finally {
+      if (keyStoreStream != null) {
+        keyStoreStream.close();
+      }
+    }
+    return keyManagerFactory != null ? keyManagerFactory.getKeyManagers() : null;
+  }
+
+  private TrustManager[] getTrustManagers(SSLConfig sslConfig) throws Exception {
+    FileInputStream trustStoreStream = null;
+    TrustManagerFactory trustManagerFactory = null;
+
+    if (sslConfig.isSkipSslVerification()) {
+      TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
+        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+          return null;
+        }
+
+        public void checkClientTrusted(X509Certificate[] certs, String authType) {}
+
+        public void checkServerTrusted(X509Certificate[] certs, String authType) {}
+
+      }};
+      return trustAllCerts;
+    }
+
+    try {
-      TrustManagerFactory trustManagerFactory = null;
-
-      SSLContext ssl =
-          SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslConfig.getProtocols())));
-
-      ssl.init(keyManagerFactory != null ? keyManagerFactory.getKeyManagers() : null,
-          trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null,
-          new SecureRandom());
-
-      HttpsURLConnection.setDefaultSSLSocketFactory(ssl.getSocketFactory());
-      if (keyStoreStream != null) {
-        keyStoreStream.close();
-      }
+    return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;
+  }
+
+  private void configureHttpsURLConnection(SSLConfig sslConfig) throws Exception {
+    KeyManager[] keyManagers = getKeyManagers(sslConfig);
+    TrustManager[] trustManagers = getTrustManagers(sslConfig);
+
+    SSLContext ssl =
+        SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslConfig.getProtocols())));
+
+    ssl.init(keyManagers, trustManagers, new SecureRandom());
+
+    HttpsURLConnection.setDefaultSSLSocketFactory(ssl.getSocketFactory());
