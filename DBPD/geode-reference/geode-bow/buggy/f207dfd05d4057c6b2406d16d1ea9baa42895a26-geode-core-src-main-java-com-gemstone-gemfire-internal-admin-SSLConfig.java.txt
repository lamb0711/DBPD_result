GEODE-420: Added SSLConfigurationFactory to have a single location that determines the SSLConfiguration. Amended all affected classes

-import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.management.internal.SSLUtil;
+
- *
- *
-  
+
-  
-  /** 
-   * SSL implementation-specific key-value pairs. Each key should be prefixed 
+  private String keystore = DistributionConfig.DEFAULT_CLUSTER_SSL_KEYSTORE;
+  private String keystoreType = DistributionConfig.DEFAULT_CLUSTER_SSL_KEYSTORE_TYPE;
+  private String keystorePassword = DistributionConfig.DEFAULT_CLUSTER_SSL_KEYSTORE_PASSWORD;
+  private String truststore = DistributionConfig.DEFAULT_CLUSTER_SSL_TRUSTSTORE;
+  private String truststorePassword = DistributionConfig.DEFAULT_CLUSTER_SSL_TRUSTSTORE_PASSWORD;
+  private String truststoreType = DistributionConfig.DEFAULT_CLUSTER_SSL_KEYSTORE_TYPE;
+  private String alias = null;
+
+  /**
+   * SSL implementation-specific key-value pairs. Each key should be prefixed
-  
-  public SSLConfig(boolean enabled) {
+
+  public String getAlias() {
+    return alias;
+  }
+
+  public void setAlias(final String alias) {
+    this.alias = alias;
+  }
+
+  public String getKeystore() {
+    return keystore;
+  }
+
+  public void setKeystore(final String keystore) {
+    this.keystore = keystore;
+  }
+
+  public String getKeystorePassword() {
+    return keystorePassword;
+  }
+
+  public void setKeystorePassword(final String keystorePassword) {
+    this.keystorePassword = keystorePassword;
+  }
+
+  public String getKeystoreType() {
+    return keystoreType;
+  }
+
+  public void setKeystoreType(final String keystoreType) {
+    this.keystoreType = keystoreType;
+  }
+
+  public String getTruststore() {
+    return truststore;
+  }
+
+  public void setTruststore(final String truststore) {
+    this.truststore = truststore;
+  }
+
+  public String getTruststorePassword() {
+    return truststorePassword;
+  }
+
+  public void setTruststorePassword(final String truststorePassword) {
+    this.truststorePassword = truststorePassword;
+  }
+
+  public boolean isEnabled() {
+    return this.enabled;
+  }
+
+  public void setEnabled(boolean enabled) {
-  
-	public boolean isEnabled() {
-		return this.enabled;
-	}
-	public void setEnabled(boolean enabled) {
-		this.enabled = enabled;
-	}
-	public String getProtocols() {
-		return this.protocols;
-	}
-	public void setProtocols(String protocols) {
-		this.protocols = protocols;
-	}
+  public String getProtocols() {
+    return this.protocols;
+  }
-	public String getCiphers() {
-		return this.ciphers;
-	}
-	public void setCiphers(String ciphers) {
-		this.ciphers = ciphers;
-	}
+  public String[] getProtocolsAsStringArray() {
+    return SSLUtil.readArray(this.protocols);
+  }
-	public boolean isRequireAuth() {
-		return this.requireAuth;
-	}
-	public void setRequireAuth(boolean requireAuth) {
-		this.requireAuth = requireAuth;
-	}
+  public void setProtocols(String protocols) {
+    this.protocols = protocols;
+  }
-	public Properties getProperties() {
-		return this.properties;
-	}
-	public void setProperties(Properties newProps) {
-          this.properties = new Properties();
-          for (Iterator iter = newProps.keySet().iterator(); iter.hasNext();) {
-            String key = (String) iter.next();
-//            String value = newProps.getProperty(key);
-            this.properties.setProperty(key, newProps.getProperty(key));
-          }
-	}
+  public String getCiphers() {
+    return this.ciphers;
+  }
-	/**
-	 * Returns a string representation of the object.
-	 * 
-	 * @return a string representation of the object
-	 */
-	@Override
-	public String toString() {
-		final StringBuffer sb = new StringBuffer("[SSLConfig: ");
-		sb.append("enabled=").append(this.enabled);
-		sb.append(", protocols=").append(this.protocols);
-		sb.append(", ciphers=").append(this.ciphers);
-		sb.append(", requireAuth=").append(this.requireAuth);
-		sb.append(", properties=").append(this.properties);
-		sb.append("]");
-		return sb.toString();
-	}
+  public String[] getCiphersAsStringArray() {
+    return SSLUtil.readArray(this.ciphers);
+  }
+
+  public void setCiphers(String ciphers) {
+    this.ciphers = ciphers;
+  }
+
+  public boolean isRequireAuth() {
+    return this.requireAuth;
+  }
+
+  public void setRequireAuth(boolean requireAuth) {
+    this.requireAuth = requireAuth;
+  }
+
+  public String getTruststoreType() {
+    return truststoreType;
+  }
+
+  public void setTruststoreType(final String truststoreType) {
+    this.truststoreType = truststoreType;
+  }
+
+  public Properties getProperties() {
+    return this.properties;
+  }
+
+  public void setProperties(Properties newProps) {
+    this.properties = new Properties();
+    for (Iterator iter = newProps.keySet().iterator(); iter.hasNext(); ) {
+      String key = (String) iter.next();
+      //            String value = newProps.getProperty(key);
+      this.properties.setProperty(key, newProps.getProperty(key));
+    }
+  }
+
+  /**
+   * Returns a string representation of the object.
+   * @return a string representation of the object
+   */
+  @Override
+  public String toString() {
+    final StringBuffer sb = new StringBuffer("[SSLConfig: ");
+    sb.append("enabled=").append(this.enabled);
+    sb.append(", protocols=").append(this.protocols);
+    sb.append(", ciphers=").append(this.ciphers);
+    sb.append(", requireAuth=").append(this.requireAuth);
+    sb.append(", properties=").append(this.properties);
+    sb.append("]");
+    return sb.toString();
+  }
-   *
-    props.setProperty(CLUSTER_SSL_ENABLED,
-                      String.valueOf(this.enabled));
+    props.setProperty(CLUSTER_SSL_ENABLED, String.valueOf(this.enabled));
-      props.setProperty(CLUSTER_SSL_PROTOCOLS,
-                        this.protocols); 
-      props.setProperty(CLUSTER_SSL_CIPHERS,
-                        this.ciphers);
-      props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION,
-                        String.valueOf(this.requireAuth));
+      props.setProperty(CLUSTER_SSL_PROTOCOLS, this.protocols);
+      props.setProperty(CLUSTER_SSL_CIPHERS, this.ciphers);
+      props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION, String.valueOf(this.requireAuth));
