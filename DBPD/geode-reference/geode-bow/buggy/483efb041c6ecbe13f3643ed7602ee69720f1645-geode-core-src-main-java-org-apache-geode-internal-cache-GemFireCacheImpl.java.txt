GEODE-6295: Use InternalCacheBuilder for constructing GemFireCacheImpl (#3260)

All code (product and tests) now use InternalCacheBuilder to construct
instances of GemFireCacheImpl.

-import static org.apache.geode.distributed.internal.InternalDistributedSystem.ALLOW_MULTIPLE_SYSTEMS;
-  public static GemFireCacheImpl createClient(InternalDistributedSystem system, PoolFactory pf,
-      CacheConfig cacheConfig) {
-    return basicCreate(system, true, cacheConfig, pf, true, ASYNC_EVENT_LISTENERS, null);
-  }
-
-  public static GemFireCacheImpl create(InternalDistributedSystem system, CacheConfig cacheConfig) {
-    return basicCreate(system, true, cacheConfig, null, false, ASYNC_EVENT_LISTENERS, null);
-  }
-
-  static GemFireCacheImpl createWithAsyncEventListeners(InternalDistributedSystem system,
-      CacheConfig cacheConfig, TypeRegistry typeRegistry) {
-    return basicCreate(system, true, cacheConfig, null, false, true, typeRegistry);
-  }
-
-  public static Cache create(InternalDistributedSystem system, boolean existingOk,
-      CacheConfig cacheConfig) {
-    return basicCreate(system, existingOk, cacheConfig, null, false, ASYNC_EVENT_LISTENERS, null);
-  }
-
-  private static GemFireCacheImpl basicCreate(InternalDistributedSystem system, boolean existingOk,
-      CacheConfig cacheConfig, PoolFactory pf, boolean isClient, boolean asyncEventListeners,
-      TypeRegistry typeRegistry) throws CacheExistsException, TimeoutException,
-      CacheWriterException, GatewayException, RegionExistsException {
-    try {
-      synchronized (GemFireCacheImpl.class) {
-        GemFireCacheImpl instance = checkExistingCache(existingOk, cacheConfig, system);
-        if (instance == null) {
-          instance = new GemFireCacheImpl(isClient, pf, system, cacheConfig, asyncEventListeners,
-              typeRegistry);
-          system.setCache(instance);
-          instance.initialize();
-        } else {
-          system.setCache(instance);
-        }
-        return instance;
-      }
-    } catch (CacheXmlException | IllegalArgumentException e) {
-      logger.error(e.getLocalizedMessage()); // TODO: log the full stack trace or not?
-      throw e;
-    } catch (Error | RuntimeException e) {
-      logger.error(e);
-      throw e;
-    }
-  }
-
-  private static GemFireCacheImpl checkExistingCache(boolean existingOk, CacheConfig cacheConfig,
-      InternalDistributedSystem system) {
-    GemFireCacheImpl instance =
-        ALLOW_MULTIPLE_SYSTEMS ? (GemFireCacheImpl) system.getCache() : getInstance();
-
-    if (instance != null && !instance.isClosed()) {
-      if (existingOk) {
-        // Check if cache configuration matches.
-        cacheConfig.validateCacheConfig(instance);
-        return instance;
-      } else {
-        // instance.creationStack argument is for debugging...
-        throw new CacheExistsException(instance,
-            String.format("%s: An open cache already exists.",
-                instance),
-            instance.creationStack);
-      }
-    }
-    return null;
-  }
-
-  private GemFireCacheImpl(boolean isClient, PoolFactory pf, InternalDistributedSystem system,
-      CacheConfig cacheConfig, boolean asyncEventListeners, TypeRegistry typeRegistry) {
+  GemFireCacheImpl(boolean isClient, PoolFactory poolFactory,
+      InternalDistributedSystem internalDistributedSystem,
+      CacheConfig cacheConfig, boolean useAsyncEventListeners, TypeRegistry typeRegistry) {
-    this.poolFactory = pf;
+    this.poolFactory = poolFactory;
-      JNDIInvoker.mapTransactions(system);
-      this.system = system;
+      JNDIInvoker.mapTransactions(internalDistributedSystem);
+      this.system = internalDistributedSystem;
-      DistributionConfig systemConfig = system.getConfig();
+      DistributionConfig systemConfig = internalDistributedSystem.getConfig();
-      this.cachePerfStats = new CachePerfStats(system);
+      this.cachePerfStats = new CachePerfStats(internalDistributedSystem);
-      if (asyncEventListeners) {
+      if (useAsyncEventListeners) {
+  public void throwCacheExistsException() {
+    throw new CacheExistsException(this, String.format("%s: An open cache already exists.", this),
+        creationStack);
+  }
+
+  @Override
-  private void initialize() {
+  @Override
+  public void initialize() {
