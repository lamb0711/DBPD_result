GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.DistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
+import org.apache.geode.distributed.internal.membership.gms.messages.AbstractGMSMessage;
- * It has {@link #suspect(InternalDistributedMember, String)} api, which can be used to initiate
+ * It has {@link #suspect(GMSMember, String)} api, which can be used to initiate
- * It has {@link HealthMonitor#checkIfAvailable(InternalDistributedMember, String, boolean)} api to
+ * It has {@link HealthMonitor#checkIfAvailable(GMSMember, String, boolean)} api to
-  private volatile NetView currentView;
-  private volatile InternalDistributedMember nextNeighbor;
+  private volatile GMSMembershipView currentView;
+  private volatile GMSMember nextNeighbor;
-  private InternalDistributedMember localAddress;
+  private GMSMember localAddress;
-  final ConcurrentMap<InternalDistributedMember, TimeStamp> memberTimeStamps =
+  final ConcurrentMap<GMSMember, TimeStamp> memberTimeStamps =
-  private final ConcurrentHashMap<InternalDistributedMember, NetView> suspectedMemberIds =
+  private final ConcurrentHashMap<GMSMember, GMSMembershipView> suspectedMemberIds =
-  private final List<InternalDistributedMember> membersInFinalCheck =
+  private final List<GMSMember> membersInFinalCheck =
-  private final Map<NetView, Set<SuspectRequest>> suspectRequestsInView = new HashMap<>();
+  private final Map<GMSMembershipView, Set<SuspectRequest>> suspectRequestsInView = new HashMap<>();
-   * {@link GMSHealthMonitor#contactedBy(InternalDistributedMember)} to record the activity of
+   * {@link GMSHealthMonitor#contactedBy(GMSMember)} to record the activity of
-      InternalDistributedMember neighbour = nextNeighbor;
+      GMSMember neighbour = nextNeighbor;
-      NetView myView = GMSHealthMonitor.this.currentView;
+      GMSMembershipView myView = GMSHealthMonitor.this.currentView;
-        for (InternalDistributedMember member : myView.getMembers()) {
+        for (GMSMember member : myView.getMembers()) {
-    private DistributionMessage responseMsg;
+    private AbstractGMSMessage responseMsg;
-    public DistributionMessage getResponseMsg() {
+    public AbstractGMSMessage getResponseMsg() {
-    public void setResponseMsg(DistributionMessage responseMsg) {
+    public void setResponseMsg(AbstractGMSMessage responseMsg) {
-        GMSMember gmbr = (GMSMember) GMSHealthMonitor.this.localAddress.getNetMember();
+        GMSMember gmbr = localAddress;
-  public void contactedBy(InternalDistributedMember sender) {
+  public void contactedBy(GMSMember sender) {
-  private void contactedBy(InternalDistributedMember sender, long timeStamp) {
+  private void contactedBy(GMSMember sender, long timeStamp) {
-      final InternalDistributedMember mbr) {
+      final GMSMember mbr) {
-  private void checkMember(final InternalDistributedMember mbr) {
-    final NetView cv = GMSHealthMonitor.this.currentView;
+  private void checkMember(final GMSMember mbr) {
+    final GMSMembershipView cv = GMSHealthMonitor.this.currentView;
-  private void initiateSuspicion(InternalDistributedMember mbr, String reason) {
+  private void initiateSuspicion(GMSMember mbr, String reason) {
-  private boolean doCheckMember(InternalDistributedMember member, boolean waitForResponse) {
+  private boolean doCheckMember(GMSMember member, boolean waitForResponse) {
-      Set<InternalDistributedMember> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
+      Set<GMSMember> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
-  boolean doTCPCheckMember(InternalDistributedMember suspectMember, int port,
+  boolean doTCPCheckMember(GMSMember suspectMember, int port,
-  boolean doTCPCheckMember(InternalDistributedMember suspectMember, Socket clientSocket) {
+  boolean doTCPCheckMember(GMSMember suspectMember, Socket clientSocket) {
-        GMSMember gmbr = (GMSMember) suspectMember.getNetMember();
+        GMSMember gmbr = suspectMember;
-  public void suspect(InternalDistributedMember mbr, String reason) {
+  public void suspect(GMSMember mbr, String reason) {
-  public boolean checkIfAvailable(InternalDistributedMember mbr, String reason,
+  public boolean checkIfAvailable(GMSMember mbr, String reason,
-          NetView v = currentView;
+          GMSMembershipView v = currentView;
-            List<InternalDistributedMember> mbrs = v.getMembers();
+            List<GMSMember> mbrs = v.getMembers();
-      private void sendHeartbeats(List<InternalDistributedMember> mbrs, int startIndex) {
-        InternalDistributedMember coordinator = currentView.getCoordinator();
+      private void sendHeartbeats(List<GMSMember> mbrs, int startIndex) {
+        GMSMember coordinator = currentView.getCoordinator();
-          InternalDistributedMember mbr = mbrs.get(index);
+          GMSMember mbr = mbrs.get(index);
-  public synchronized void installView(NetView newView) {
+  public synchronized void installView(GMSMembershipView newView) {
-    for (Iterator<InternalDistributedMember> it = memberTimeStamps.keySet().iterator(); it
+    for (Iterator<GMSMember> it = memberTimeStamps.keySet().iterator(); it
-    for (Iterator<InternalDistributedMember> it = suspectedMemberIds.keySet().iterator(); it
+    for (Iterator<GMSMember> it = suspectedMemberIds.keySet().iterator(); it
-  public synchronized NetView getView() {
+  public synchronized GMSMembershipView getView() {
-  protected synchronized void setNextNeighbor(NetView newView, InternalDistributedMember nextTo) {
+  protected synchronized void setNextNeighbor(GMSMembershipView newView, GMSMember nextTo) {
-    List<InternalDistributedMember> allMembers = newView.getMembers();
+    List<GMSMember> allMembers = newView.getMembers();
-      for (InternalDistributedMember member : allMembers) {
+      for (GMSMember member : allMembers) {
-      InternalDistributedMember newNeighbor = allMembers.get(nextNeighborIndex);
+      GMSMember newNeighbor = allMembers.get(nextNeighborIndex);
-      InternalDistributedMember oldNeighbor = nextNeighbor;
+      GMSMember oldNeighbor = nextNeighbor;
-  public InternalDistributedMember getNextNeighbor() {
+  public GMSMember getNextNeighbor() {
-  public boolean isSuspectMember(InternalDistributedMember m) {
+  public boolean isSuspectMember(GMSMember m) {
-  public void memberSuspected(InternalDistributedMember initiator,
-      InternalDistributedMember suspect, String reason) {
+  public void memberSuspected(GMSMember initiator,
+      GMSMember suspect, String reason) {
-  private void memberUnsuspected(InternalDistributedMember mbr) {
+  private void memberUnsuspected(GMSMember mbr) {
-  public void setLocalAddress(InternalDistributedMember idm) {
+  public void setLocalAddress(GMSMember idm) {
-    InternalDistributedMember me = localAddress;
+    GMSMember me = localAddress;
-      Set<InternalDistributedMember> membersNotReceivedMsg = services.getMessenger().send(hm);
+      Set<GMSMember> membersNotReceivedMsg = services.getMessenger().send(hm);
-    NetView cv = currentView;
+    GMSMembershipView cv = currentView;
-    InternalDistributedMember sender = incomingRequest.getSender();
+    GMSMember sender = incomingRequest.getSender();
-      NetView check = new NetView(cv, cv.getViewId() + 1);
+      GMSMembershipView check = new GMSMembershipView(cv, cv.getViewId() + 1);
-      for (InternalDistributedMember member : cv.getMembers()) {
+      for (GMSMember member : cv.getMembers()) {
-      InternalDistributedMember coordinator = check.getCoordinator();
+      GMSMember coordinator = check.getCoordinator();
-      InternalDistributedMember sender) {
+      GMSMember sender) {
-  private void recordSuspectRequests(List<SuspectRequest> suspectRequests, NetView cv) {
+  private void recordSuspectRequests(List<SuspectRequest> suspectRequests, GMSMembershipView cv) {
-  private void checkIfAvailable(final InternalDistributedMember initiator,
-      List<SuspectRequest> sMembers, final NetView cv) {
+  private void checkIfAvailable(final GMSMember initiator,
+      List<SuspectRequest> sMembers, final GMSMembershipView cv) {
-      final InternalDistributedMember mbr = sr.getSuspectMember();
+      final GMSMember mbr = sr.getSuspectMember();
-  protected boolean inlineCheckIfAvailable(final InternalDistributedMember initiator,
-      final NetView cv, boolean forceRemovalIfCheckFails, final InternalDistributedMember mbr,
+  protected boolean inlineCheckIfAvailable(final GMSMember initiator,
+      final GMSMembershipView cv, boolean forceRemovalIfCheckFails, final GMSMember mbr,
-            && initiator.getVersionObject().compareTo(Version.GEODE_1_3_0) >= 0) {
+            && initiator.getVersionOrdinal() >= Version.GEODE_1_3_0.ordinal()) {
-  public void memberShutdown(DistributedMember mbr, String reason) {}
+  public void memberShutdown(GMSMember mbr, String reason) {}
-  public Collection<InternalDistributedMember> getMembersFailingAvailabilityCheck() {
+  public Collection<GMSMember> getMembersFailingAvailabilityCheck() {
-    List<InternalDistributedMember> recipients;
+    List<GMSMember> recipients;
-      HashSet<InternalDistributedMember> filter = new HashSet<>();
-      for (Enumeration<InternalDistributedMember> e = suspectedMemberIds.keys(); e
+      HashSet<GMSMember> filter = new HashSet<>();
+      for (Enumeration<GMSMember> e = suspectedMemberIds.keys(); e
-    Set<InternalDistributedMember> failedRecipients;
+    Set<GMSMember> failedRecipients;
