GEODE-6861: Have CacheElement support multi groups by default (#3749)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* Remove MultiGroupCacheElement and RuntimeIndex
* does not allow create element in multiple groups at a time
-import org.apache.geode.management.configuration.MultiGroupCacheElement;
-        if (filter.getGroup() == null || // if listing all groups
-            group.equals(filter.getGroup()) || // if filter group matches this group
-            element instanceof MultiGroupCacheElement) { // if element can span multi groups
-          element.setGroup(group);
-          resultList.add(element);
-        }
+        element.setGroup(group);
+        resultList.add(element);
-    if (resultList.get(0) instanceof MultiGroupCacheElement) {
-      List<R> multiGroupList = new ArrayList<>();
-      for (R element : resultList) {
-        int index = multiGroupList.indexOf(element);
-        if (index >= 0) {
-          MultiGroupCacheElement exist = (MultiGroupCacheElement) multiGroupList.get(index);
-          exist.getGroups().add(element.getGroup());
-        } else {
-          multiGroupList.add(element);
-        }
-      }
-      if (StringUtils.isNotBlank(filter.getGroup())) {
-        multiGroupList = multiGroupList.stream()
-            .filter(e -> ((MultiGroupCacheElement) e).getGroups().contains(filter.getConfigGroup()))
-            .collect(Collectors.toList());
-      }
-      // if "cluster" is the only group, clear it
-      for (R elem : multiGroupList) {
-        MultiGroupCacheElement element = (MultiGroupCacheElement) elem;
-        if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
-          element.getGroups().clear();
-        }
-      }
-      resultList = multiGroupList;
-    } else {
-      // for non-MultiGroup CacheElement, just clear out the "cluster" group
-      for (R element : resultList) {
-        if (CacheElement.CLUSTER.equals(element.getGroup())) {
-          element.setGroup(null);
-        }
+
+    List<R> consolidatedConfigList = new ArrayList<>();
+    for (R element : resultList) {
+      int index = consolidatedConfigList.indexOf(element);
+      if (index >= 0) {
+        R exist = consolidatedConfigList.get(index);
+        exist.getGroups().add(element.getGroup());
+      } else {
+        consolidatedConfigList.add(element);
+    if (StringUtils.isNotBlank(filter.getGroup())) {
+      consolidatedConfigList = consolidatedConfigList.stream()
+          .filter(e -> (e.getGroups().contains(filter.getConfigGroup())))
+          .collect(Collectors.toList());
+    }
+    // if "cluster" is the only group, clear it
+    for (R element : consolidatedConfigList) {
+      if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
+        element.getGroups().clear();
+      }
+    }
+    resultList = consolidatedConfigList;
+
+
