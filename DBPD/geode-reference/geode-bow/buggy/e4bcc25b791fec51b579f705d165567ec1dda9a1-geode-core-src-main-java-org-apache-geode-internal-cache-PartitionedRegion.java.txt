GEODE-6527 Update PartitionRegionConfig info (#3308)

GEODE-6527: Update prRoot configuration when using attributes mutator
    
    - Added code to update the node information stored in the prConfig for a partitioned region when an AttributesMutator was used to add/remove a cache loader or writer.
    - Added additional thread safety to new and exsting code which made modifications to a partitoned regions prConfig from within the PartitionedRegion class
    
    Co-authored-by: Ben Ross <bross@pivotal.io>
    Co-authored-by: Jianxia Chen <jchen@pivotal.io>
    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
    Co-authored-by: Scott Jewell <sjewell@pivotal.io>
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
-    prConfig.setGatewaySenderIds(gatewaySendersToAdd);
-    updatePRConfig(prConfig, false);
+    updatePartitionRegionConfig(prConfig -> {
+      prConfig.setGatewaySenderIds(gatewaySendersToAdd);
+    });
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
-    Set<String> newGateWayIds;
-    if (prConfig.getGatewaySenderIds() != null) {
-      newGateWayIds = new HashSet<>(prConfig.getGatewaySenderIds());
-    } else {
-      newGateWayIds = new HashSet<>();
-    }
-    newGateWayIds.add(aeqId);
-    prConfig.setGatewaySenderIds(newGateWayIds);
-    updatePRConfig(prConfig, false);
+    updatePartitionRegionConfig(prConfig -> {
+      Set<String> newGateWayIds;
+      if (prConfig.getGatewaySenderIds() != null) {
+        newGateWayIds = new HashSet<>(prConfig.getGatewaySenderIds());
+      } else {
+        newGateWayIds = new HashSet<>();
+      }
+      newGateWayIds.add(aeqId);
+      prConfig.setGatewaySenderIds(newGateWayIds);
+    });
+  // Used for testing purposes
+  Region<String, PartitionRegionConfig> getPRRoot() {
+    return prRoot;
+  }
+
-      byte loaderByte = (byte) (getAttributes().getCacheLoader() != null ? 0x01 : 0x00);
-      byte writerByte = (byte) (getAttributes().getCacheWriter() != null ? 0x02 : 0x00);
-      this.node.setLoaderWriterByte((byte) (loaderByte + writerByte));
+      this.node.setLoaderAndWriter(getAttributes().getCacheLoader(),
+          getAttributes().getCacheWriter());
-      prConfig = this.prRoot.get(getRegionIdentifier());
+      prConfig = getPRRoot().get(getRegionIdentifier());
+
-      for (PartitionRegionConfig config : this.prRoot.values()) {
+      for (PartitionRegionConfig config : getPRRoot().values()) {
-    final Set<Node> nodes = prConfig.getNodes();
-            this.prRoot.get(colocatedRegion.getRegionIdentifier());
+            getPRRoot().get(colocatedRegion.getRegionIdentifier());
-        this.prRoot.put(getRegionIdentifier(), prConfig);
+        getPRRoot().put(getRegionIdentifier(), prConfig);
+      updatePRNodeInformation();
+      updatePRNodeInformation();
-    StringBuilder sb = new StringBuilder(this.prRoot.getFullPath());
+    StringBuilder sb = new StringBuilder(getPRRoot().getFullPath());
-    for (Iterator i = this.prRoot.keySet().iterator(); i.hasNext();) {
+    for (Iterator i = getPRRoot().keySet().iterator(); i.hasNext();) {
-      sb.append(key).append("=>").append(this.prRoot.get(key));
+      sb.append(key).append("=>").append(getPRRoot().get(key));
-          prConfig = this.prRoot.get(getRegionIdentifier());
+          prConfig = getPRRoot().get(getRegionIdentifier());
-      prConfig = prRoot.get(this.getRegionIdentifier());
+      prConfig = getPRRoot().get(this.getRegionIdentifier());
-      this.prRoot.put(this.getRegionIdentifier(), prConfig);
+      getPRRoot().put(this.getRegionIdentifier(), prConfig);
-        if (null != this.prRoot) {
-          this.prRoot.destroy(rId);
+        if (null != getPRRoot()) {
+          getPRRoot().destroy(rId);
-    if (this.prRoot == null) {
+    if (getPRRoot() == null) {
-      final PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
+      final PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
-      prConfig = prRoot.get(this.getRegionIdentifier());
+      prConfig = getPRRoot().get(this.getRegionIdentifier());
-    StringBuilder sb = new StringBuilder(this.prRoot.getFullPath());
+    StringBuilder sb = new StringBuilder(getPRRoot().getFullPath());
-    sb.append(this.prRoot.get(getRegionIdentifier()));
+    sb.append(getPRRoot().get(getRegionIdentifier()));
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
+    PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
+  void updatePRNodeInformation() {
+    updatePartitionRegionConfig(prConfig -> {
+      CacheLoader cacheLoader = basicGetLoader();
+      CacheWriter cacheWriter = basicGetWriter();
+      if (prConfig != null) {
+
+        for (Node node : prConfig.getNodes()) {
+
+          if (node.getMemberId().equals(getMyId())) {
+            node.setLoaderAndWriter(cacheLoader, cacheWriter);
+          }
+        }
+      }
+    });
+  }
+
+
+  interface PartitionRegionConfigModifier {
+    void modify(PartitionRegionConfig prConfig);
+  }
+
+  void updatePartitionRegionConfig(
+      PartitionRegionConfigModifier partitionRegionConfigModifier) {
+    RegionLock rl = getRegionLock();
+    rl.lock();
+    try {
+      if (getPRRoot() == null) {
+        if (logger.isDebugEnabled()) {
+          logger.debug(PartitionedRegionHelper.PR_ROOT_REGION_NAME + " is null");
+        }
+        return;
+      }
+      PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
+      partitionRegionConfigModifier.modify(prConfig);
+      updatePRConfig(prConfig, false);
+    } finally {
+      rl.unlock();
+    }
+  }
