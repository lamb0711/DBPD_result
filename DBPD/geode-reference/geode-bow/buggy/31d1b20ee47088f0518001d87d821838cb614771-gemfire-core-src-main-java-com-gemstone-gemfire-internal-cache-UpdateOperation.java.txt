Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import java.util.Arrays;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.NewValueImporter;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.SerializedCacheValueImpl;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ENTRY_EVENT_NEW_VALUE;
-    CachedDeserializable cd = (CachedDeserializable)ev
-        .getSerializedNewValue();
-    if (cd != null) {
-      {
-        // don't serialize here if it is not already serialized
-        Object tmp = cd.getValue();
-        if (tmp instanceof byte[]) {
-          byte[] bb = (byte[])tmp;
-          m.newValue = bb;
-          m.newValueLimit = bb.length;
-        }
-        else {
-          m.newValueObj = tmp;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-      }
+    if (CachedDeserializableFactory.preferObject() || ev.hasDelta()) {
+      m.deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
+    } else {
+      m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-    else {
-      Object v = ev.getRawNewValue();
-      if (v == null) {
-        m.newValue = null;
-        m.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
-      }
-      else if (v instanceof byte[]) {
-        m.newValue = (byte[])v;
-        m.newValueLimit = m.newValue.length;
-        m.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
-      }
-      else if (ev.hasDelta()) {
-        if (ev.getCachedSerializedNewValue() != null) {
-          m.newValue = ev.getCachedSerializedNewValue();
-          m.newValueLimit = m.newValue.length;
-        } else {
-          m.newValueObj = v;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
-      }
-      else {
-        if (ev.getCachedSerializedNewValue() != null) {
-          m.newValue = ev.getCachedSerializedNewValue();
-          m.newValueLimit = m.newValue.length;
-        } else {
-          m.newValueObj = v;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-      }
-    }
+    ev.exportNewValue(m);
-  public static class UpdateMessage extends AbstractUpdateMessage
-  {
+  public static class UpdateMessage extends AbstractUpdateMessage implements NewValueImporter {
-    protected transient int newValueLimit; // used by toData only
-
+    @Unretained(ENTRY_EVENT_NEW_VALUE) 
-      this.newValueLimit = upMsg.newValueLimit;
+      boolean evReturned = false;
+      try {
+      evReturned = true;
+      } finally {
+        if (!evReturned) {
+          ev.release();
+        }
+      }
-      EntryEventImpl result = new EntryEventImpl(rgn, getOperation(), this.key,
+      EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key,
-        if (this.newValue != null) {
-          this.newValueLimit = this.newValue.length;
-        }
-      }
-      else {
-        if (this.newValueObj != null) {
-          byte[] newValueBytes = BlobHelper.serializeToBlob(this.newValueObj);
-          this.event.setCachedSerializedNewValue(newValueBytes);
-          // for eager deserialization avoid extra byte array serialization
-          if (this.deserializationPolicy ==
-              DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-            out.write(newValueBytes);
-          }
-          else {
-            DataSerializer.writeByteArray(newValueBytes, out);
-          }
-        }
-        else {
-          if (this.deserializationPolicy ==
-              DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-            out.write(this.newValue, 0, this.newValueLimit);
-          } else {
-            DataSerializer.writeByteArray(this.newValue, this.newValueLimit, out);
-          }
-        }
+      } else {
+          // TODO OFFHEAP MERGE: add a writeValue that will cache in the event like so:
+          //byte[] newValueBytes = BlobHelper.serializeToBlob(this.newValueObj);
+          //this.event.setCachedSerializedNewValue(newValueBytes);
+        DistributedCacheOperation.writeValue(this.deserializationPolicy, this.newValueObj, this.newValue, out);
-      else if (this.newValue.length == this.newValueLimit) {
-        valueBytes = this.newValue;
-      }
-        valueBytes = new byte[this.newValueLimit];
-        System.arraycopy(this.newValue, 0, valueBytes, 0, valueBytes.length);
+        valueBytes = this.newValue;
+    @Override
+    public boolean prefersNewSerialized() {
+      return true;
+    }
+    @Override
+    public boolean isUnretainedNewReferenceOk() {
+      return true;
+    }
+    @Override
+    public void importNewObject(@Unretained(ENTRY_EVENT_NEW_VALUE) Object nv, boolean isSerialized) {
+      if (nv == null) {
+        this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+        this.newValue = null;
+      } else {
+        if (!isSerialized) {
+          this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+        }
+        this.newValueObj = nv;
+      }
+    }
+    @Override
+    public void importNewBytes(byte[] nv, boolean isSerialized) {
+      if (!isSerialized) {
+        this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+      }
+      this.newValue = nv;
+    }
-      EntryEventImpl ev = new EntryEventImpl(rgn, getOperation(), this.key,
+      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,
