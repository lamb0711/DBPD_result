GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500

-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.apache.shiro.subject.Subject;
-import org.springframework.shell.core.CommandMarker;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.shiro.subject.Subject;
+import org.springframework.shell.core.CommandMarker;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.StringTokenizer;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
-    List<Future<Result>> commandResult = new ArrayList<Future<Result>>();
-    Result result = null;
+    List<Future<Result>> commandResult = new ArrayList<>();
+    Result result;
-        RebalanceOperation op = null;
+        RebalanceOperation op;
-        if (includeRegions != null && includeRegions.length > 0) {
-          CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
+        if (ArrayUtils.isNotEmpty(includeRegions)) {
+          CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
-            regionName = regionName.startsWith("/") == true ? regionName : ("/" + regionName);
+            regionName = regionName.startsWith("/") ? regionName : ("/" + regionName);
-              Set<String> setRegionName = new HashSet<String>();
+              Set<String> setRegionName = new HashSet<>();
-              Set<String> excludeRegionSet = new HashSet<String>();
-              if (excludeRegions != null && excludeRegions.length > 0) {
-
-                for (String str : excludeRegions) {
-                  excludeRegionSet.add(str);
-                }
+              Set<String> excludeRegionSet = new HashSet<>();
+              if (ArrayUtils.isNotEmpty(excludeRegions)) {
+                Collections.addAll(excludeRegionSet, excludeRegions);
-              if (simulate == true) {
-                List resultList = null;
+              if (simulate) {
+                List resultList;
-                  rebalanceResulteData.addSection()
+                  rebalanceResultData.addSection()
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, member)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, true, cache));
-                List resultList = null;
+                List resultList;
-                  rebalanceResulteData.addSection()
+                  rebalanceResultData.addSection()
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, member)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, false, cache));
+
-              Set<String> excludeRegionSet = new HashSet<String>();
+              Set<String> excludeRegionSet = new HashSet<>();
-                for (String excludeRegion : excludeRegions)
-                  excludeRegionSet.add(excludeRegion);
+                Collections.addAll(excludeRegionSet, excludeRegions);
-              Set<String> includeRegionSet = new HashSet<String>();
+              Set<String> includeRegionSet = new HashSet<>();
-              if (simulate == true) {
+              if (simulate) {
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
-                    op.getResults(), index, simulate, cache));
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
+                    op.getResults(), index, true, cache));
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
-                    op.getResults(), index, simulate, cache));
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
+                    op.getResults(), index, false, cache));
-  List<String> tokenize(String str, String separator) {
+  private List<String> tokenize(String str, String separator) {
-    List<String> rstList = new ArrayList<String>();
+    List<String> rstList = new ArrayList<>();
-  boolean checkResultList(CompositeResultData rebalanceResulteData, List resultList,
+  private boolean checkResultList(CompositeResultData rebalanceResultData, List resultList,
-    if (resultList != null && !resultList.isEmpty()) {
-      for (int i = 0; i < resultList.size(); i++) {
-        Object object = resultList.get(i);
+    if (CollectionUtils.isNotEmpty(resultList)) {
+      for (Object object : resultList) {
-          rebalanceResulteData.addSection().addData(
+          rebalanceResultData.addSection().addData(
-          rebalanceResulteData.addSection().addData(
+          rebalanceResultData.addSection().addData(
-      rebalanceResulteData.addSection().addData("Rebalancing for member=" + member.getId(),
+      rebalanceResultData.addSection().addData("Rebalancing for member=" + member.getId(),
-  Result executeRebalanceOnDS(InternalCache cache, String simulate, String[] excludeRegionsList) {
+  private Result executeRebalanceOnDS(InternalCache cache, String simulate,
+      String[] excludeRegionsList) {
-    CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
-    List<String> listExcludedRegion = new ArrayList<String>();
+    CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
+    List<String> listExcludedRegion = new ArrayList<>();
-      for (String str : excludeRegionsList) {
-        listExcludedRegion.add(str);
-      }
+      Collections.addAll(listExcludedRegion, excludeRegionsList);
-    if (flagToContinueWithRebalance == false) {
+    if (!flagToContinueWithRebalance) {
-    Iterator<MemberPRInfo> it1 = listMemberRegion.iterator();
-    while (it1.hasNext() && flagToContinueWithRebalance) {
+    for (MemberPRInfo memberPR : listMemberRegion) {
-        MemberPRInfo memberPR = (MemberPRInfo) it1.next();
-        // check if there are more than one members associated with region for
-        // rebalancing
+        // check if there are more than one members associated with region for rebalancing
-            Set<String> regionSet = new HashSet<String>();
+            Set<String> regionSet = new HashSet<>();
-            Set<String> excludeRegionSet = new HashSet<String>();
+            Set<String> excludeRegionSet = new HashSet<>();
-                if (checkResultList(rebalanceResulteData, resultList, dsMember) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, dsMember)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, simulate.equals("true"), cache));
-                // Rebalancing for region is done so break and continue with
-                // other region
+                // Rebalancing for region is done so break and continue with other region
-                  rebalanceResulteData.addSection().addData(
+                  rebalanceResultData.addSection().addData(
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                rebalanceResulteData.addSection().addData(
+                rebalanceResultData.addSection().addData(
-                result = ResultBuilder.buildResult(rebalanceResulteData);
+                result = ResultBuilder.buildResult(rebalanceResultData);
-            if (checkResultList(rebalanceResulteData, resultList, dsMember) == true) {
-              result = ResultBuilder.buildResult(rebalanceResulteData);
+            if (checkResultList(rebalanceResultData, resultList, dsMember)) {
+              result = ResultBuilder.buildResult(rebalanceResultData);
-            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
+            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                (ArrayList) rstList, index, simulate.equals("true"), cache));
-    if (rstlist.size() > resultItemCount && rstlist.get(resultItemCount) != null
-        && rstlist.get(resultItemCount).length() > 0) {
+    if (rstlist.size() > resultItemCount && StringUtils.isNotEmpty(rstlist.get(resultItemCount))) {
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = " + rstlist.get(0));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+          .append(rstlist.get(0)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = " + rstlist.get(1));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+          .append(rstlist.get(1)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = " + rstlist.get(2));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+          .append(rstlist.get(2)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = " + rstlist.get(3));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+          .append(rstlist.get(3)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = " + rstlist.get(4));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+          .append(rstlist.get(4)).append(newLine);
-      resultStr.append(
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = " + rstlist.get(5));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(5)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = " + rstlist.get(6));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+          .append(rstlist.get(6)).append(newLine);
-      resultStr.append(
-          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = " + rstlist.get(7));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(7)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + rstlist.get(8));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ").append(rstlist.get(8))
+          .append(newLine);
-      String headerText = null;
+      String headerText;
-  CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResulteData,
+  private CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResultData,
-    if (regions.size() > 0 && ((PartitionRebalanceInfo) iterator.next()).getRegionPath() != null
-        && ((PartitionRebalanceInfo) iterator.next()).getRegionPath().length() > 0) {
+    if (regions.size() > 0
+        && StringUtils.isNotEmpty(((PartitionRebalanceInfo) iterator.next()).getRegionPath())) {
-          rebalanceResulteData.addSection().addTable("Table" + index);
+          rebalanceResultData.addSection().addTable("Table" + index);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = "
-          + results.getTotalBucketCreateBytes());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+          .append(results.getTotalBucketCreateBytes()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = "
-          + results.getTotalBucketCreateTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+          .append(results.getTotalBucketCreateTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = "
-          + results.getTotalBucketCreatesCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+          .append(results.getTotalBucketCreatesCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = "
-          + results.getTotalBucketTransferBytes());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+          .append(results.getTotalBucketTransferBytes()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = "
-          + results.getTotalBucketTransferTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+          .append(results.getTotalBucketTransferTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = "
-          + results.getTotalBucketTransfersCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+          .append(results.getTotalBucketTransfersCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = "
-          + results.getTotalPrimaryTransferTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+          .append(results.getTotalPrimaryTransferTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = "
-          + results.getTotalPrimaryTransfersCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+          .append(results.getTotalPrimaryTransfersCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + results.getTotalTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ")
+          .append(results.getTotalTime()).append(newLine);
-      String headerText = null;
+      String headerText;
-    return rebalanceResulteData;
+    return rebalanceResultData;
-      return member;
+      return null;
-      while (it.hasNext() && matchFound == false) {
+      while (it.hasNext() && !matchFound) {
-  List<MemberPRInfo> getMemberRegionList(InternalCache cache, List<String> listExcludedRegion) {
-    List<MemberPRInfo> listMemberPRInfo = new ArrayList<MemberPRInfo>();
+  private List<MemberPRInfo> getMemberRegionList(InternalCache cache,
+      List<String> listExcludedRegion) {
+    List<MemberPRInfo> listMemberPRInfo = new ArrayList<>();
-      Iterator<String> it = listExcludedRegion.iterator();
-      while (it.hasNext()) {
+      for (String aListExcludedRegion : listExcludedRegion) {
-        String excludedRegion = it.next().trim();
+        String excludedRegion = aListExcludedRegion.trim();
-      if (excludedRegionMatch == true) {
+      if (excludedRegionMatch) {
-    Result result = null;
+    Result result;
-      @CliOption(key = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS, mandatory = false,
-          unspecifiedDefaultValue = "false",
+      @CliOption(key = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS, unspecifiedDefaultValue = "false",
-    Result result = null;
+    Result result;
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
-    if (regionPath == null || regionPath.isEmpty()) {
+    DataCommandResult dataResult;
+    if (StringUtils.isEmpty(regionPath)) {
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createPutResult(key, null, null,
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createPutResult(key, null, null,
+    }
-    if (value == null || value.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createPutResult(value, null,
-          null, CliStrings.PUT__MSG__VALUE_EMPTY, false));
+    if (StringUtils.isEmpty(value)) {
+      return makePresentationResult(DataCommandResult.createPutResult(value, null, null,
+          CliStrings.PUT__MSG__VALUE_EMPTY, false));
+    }
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-      } else
+      } else {
+      }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-    if (dataResult != null)
+    if (dataResult != null) {
-    else
+    } else {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createGetResult(key, null, null,
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createGetResult(key, null, null,
+    }
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-          request.setPrincipal((Serializable) subject.getPrincipal());
+          request.setPrincipal(subject.getPrincipal());
-      } else
+      } else {
+      }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
-          null, null, CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createLocateEntryResult(key, null, null,
+          CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
-          null, null, CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createLocateEntryResult(key, null, null,
+          CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
+    }
-    if (memberList != null && memberList.size() > 0) {
+    if (CollectionUtils.isNotEmpty(memberList)) {
-    } else
+    } else {
+    }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
-          null, CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createRemoveResult(key, null, null,
+          CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
-          null, CliStrings.REMOVE__MSG__KEY_EMPTY, false));
+      return makePresentationResult(DataCommandResult.createRemoveResult(null, null, null,
+          CliStrings.REMOVE__MSG__KEY_EMPTY, false));
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-      } else
+      } else {
+      }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-      @CliOption(key = CliStrings.QUERY__STEPNAME, mandatory = false, help = "Step name",
+      @CliOption(key = CliStrings.QUERY__STEPNAME, help = "Step name",
-      @CliOption(key = CliStrings.QUERY__INTERACTIVE, mandatory = false,
-          help = CliStrings.QUERY__INTERACTIVE__HELP,
+      @CliOption(key = CliStrings.QUERY__INTERACTIVE, help = CliStrings.QUERY__INTERACTIVE__HELP,
-      region = new String();
-      dsMemberList = new ArrayList<DistributedMember>();
+      region = "";
+      dsMemberList = new ArrayList<>();
-      if (o2 == null) {
-        return false;
-      }
-      if (this.region.equals(((MemberPRInfo) o2).region)) {
-        return true;
-      }
-      return false;
+      return o2 != null && this.region.equals(((MemberPRInfo) o2).region);
-      for (int i = 0; i < list.size(); i++) {
-        Object object = list.get(i);
+      for (Object object : list) {
-    Set<DistributedMember> members = null;
+    Set<DistributedMember> members;
-    String region = (String) iterator.next();
+    String region = iterator.next();
-    if (logger.fineEnabled())
+    if (logger.fineEnabled()) {
-    List<String> regionAndingList = new ArrayList<String>();
+    }
+    List<String> regionAndingList = new ArrayList<>();
-      if (members != null && !members.isEmpty()) {
+      if (CollectionUtils.isNotEmpty(members)) {
-            newMembers = new HashSet<DistributedMember>();
+            newMembers = new HashSet<>();
-          if (logger.fineEnabled())
+          if (logger.fineEnabled()) {
+          }
-          if (logger.fineEnabled())
+          if (logger.fineEnabled()) {
+          }
-    members = new HashSet<DistributedMember>();
-    if (newMembers == null)
+    members = new HashSet<>();
+    if (newMembers == null) {
-    Iterator<DistributedMember> memberIterator = newMembers.iterator();
-    while (memberIterator.hasNext()) {
-      members.add(memberIterator.next());
+    }
+    for (DistributedMember newMember : newMembers) {
+      members.add(newMember);
-    DistributedMember member = null;
+    DistributedMember member;
-    if (region == null || region.isEmpty())
+    if (StringUtils.isEmpty(region)) {
+    }
-    if (bean == null)// try with slash ahead
+    if (bean == null) {
+      // try with slash ahead
+    }
-    Set<DistributedMember> dsMembersWithThisMember = new HashSet<DistributedMember>();
+    Set<DistributedMember> dsMembersWithThisMember = new HashSet<>();
-    Set<DistributedMember> matchedMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> matchedMembers = new HashSet<>();
-      if (index1 == -1)
+      if (index1 == -1) {
+      }
-      if (index2 == -1)
+      if (index2 == -1) {
+      }
-      if (startIndex >= query.length())
+      if (startIndex >= query.length()) {
+      }
