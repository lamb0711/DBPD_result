Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    throws IOException, InterruptedException {
+      throws IOException, InterruptedException {
-      logger.debug("{}: Received {}put request ({} bytes) from {} for region {} key {} txId {} posdup: {}", servConn.getName(), (isDelta ? " delta " : " "), msg
-        .getPayloadLength(), servConn.getSocketString(), regionName, key, msg.getTransactionId(), msg.isRetry());
+      logger.debug(
+          "{}: Received {}put request ({} bytes) from {} for region {} key {} txId {} posdup: {}",
+          servConn.getName(), (isDelta ? " delta " : " "), msg.getPayloadLength(),
+          servConn.getSocketString(), regionName, key, msg.getTransactionId(), msg.isRetry());
-    EventIDHolder clientEvent = new EventIDHolder(new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId));
+    EventIDHolder clientEvent =
+        new EventIDHolder(new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId));
-      //          if (logger.isDebugEnabled()) {
-      //            logger.debug("DEBUG: encountered isRetry in Put65");
-      //          }
+      // if (logger.isDebugEnabled()) {
+      // logger.debug("DEBUG: encountered isRetry in Put65");
+      // }
-          PutOperationContext putContext = authzRequest.putAuthorize(regionName, key, value, isObject, callbackArg);
+          PutOperationContext putContext =
+              authzRequest.putAuthorize(regionName, key, value, isObject, callbackArg);
-        //            try {
+        // try {
-            logger.debug("putIfAbsent operation was successful last time with version {}", clientEvent.getVersionTag());
+            logger.debug("putIfAbsent operation was successful last time with version {}",
+                clientEvent.getVersionTag());
-          region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(),
+              true, clientEvent);
-          oldValue = region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          oldValue = region.basicBridgePutIfAbsent(key, value, isObject, callbackArg,
+              servConn.getProxyID(), true, clientEvent);
-        //            } catch (Exception e) {
-        //              writeException(msg, e, false, servConn);
-        //              servConn.setAsTrue(RESPONDED);
-        //              return;
-        //            }
+        // } catch (Exception e) {
+        // writeException(msg, e, false, servConn);
+        // servConn.setAsTrue(RESPONDED);
+        // return;
+        // }
-        //            try {
+        // try {
-          if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+          if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+              && clientEvent.getVersionTag() != null) {
-              logger.debug("replace(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
+              logger.debug("replace(k,v) operation was successful last time with version {}",
+                  clientEvent.getVersionTag());
-          oldValue = region.basicBridgeReplace(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          oldValue = region.basicBridgeReplace(key, value, isObject, callbackArg,
+              servConn.getProxyID(), true, clientEvent);
-          didPut = region.basicBridgeReplace(key, expectedOldValue, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          didPut = region.basicBridgeReplace(key, expectedOldValue, value, isObject, callbackArg,
+              servConn.getProxyID(), true, clientEvent);
-              logger.debug("replace(k,v,v) operation was successful last time with version {}", clientEvent.getVersionTag());
+              logger.debug("replace(k,v,v) operation was successful last time with version {}",
+                  clientEvent.getVersionTag());
-        //            } catch (Exception e) {
-        //              writeException(msg, e, false, servConn);
-        //              servConn.setAsTrue(RESPONDED);
-        //              return;
-        //            }
+        // } catch (Exception e) {
+        // writeException(msg, e, false, servConn);
+        // servConn.setAsTrue(RESPONDED);
+        // return;
+        // }
-        result = region.basicBridgeCreate(key, null, true, callbackArg, servConn.getProxyID(), true, clientEvent, false);
-        if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+        result = region.basicBridgeCreate(key, null, true, callbackArg, servConn.getProxyID(), true,
+            clientEvent, false);
+        if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+            && clientEvent.getVersionTag() != null) {
-            logger.debug("create(k,null) operation was successful last time with version {}", clientEvent.getVersionTag());
+            logger.debug("create(k,null) operation was successful last time with version {}",
+                clientEvent.getVersionTag());
-          result = region.basicBridgeCreate(key, (byte[]) value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent, true);
+          result = region.basicBridgeCreate(key, (byte[]) value, isObject, callbackArg,
+              servConn.getProxyID(), true, clientEvent, true);
-          result = region.basicBridgePut(key, value, delta, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          result = region.basicBridgePut(key, value, delta, isObject, callbackArg,
+              servConn.getProxyID(), true, clientEvent);
-        if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+        if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+            && clientEvent.getVersionTag() != null) {
-            logger.debug("put(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
+            logger.debug("put(k,v) operation was successful last time with version {}",
+                clientEvent.getVersionTag());
-        String message = servConn.getName() + ": Failed to put entry for region " + regionName + " key " + key + " value " + valuePart;
+        String message = servConn.getName() + ": Failed to put entry for region " + regionName
+            + " key " + key + " value " + valuePart;
-      logger.info(LocalizedMessage.create(LocalizedStrings.UpdateOperation_ERROR_APPLYING_DELTA_FOR_KEY_0_OF_REGION_1, new Object[] {
-        key,
-        regionName
-      }));
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.UpdateOperation_ERROR_APPLYING_DELTA_FOR_KEY_0_OF_REGION_1,
+          new Object[] {key, regionName}));
-        writeReplyWithRefreshMetadata(msg, servConn, pr, sendOldValue, oldValueIsObject, oldValue, pr.getNetworkHopType()
-          , clientEvent.getVersionTag());
+        writeReplyWithRefreshMetadata(msg, servConn, pr, sendOldValue, oldValueIsObject, oldValue,
+            pr.getNetworkHopType(), clientEvent.getVersionTag());
-        writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+        writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue,
+            clientEvent.getVersionTag());
-      writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+      writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue,
+          clientEvent.getVersionTag());
-      logger.debug("{}: Sent put response back to {} for region {} key {} value {}", servConn.getName(), servConn.getSocketString(), regionName, key, valuePart);
+      logger.debug("{}: Sent put response back to {} for region {} key {} value {}",
+          servConn.getName(), servConn.getSocketString(), regionName, key, valuePart);
-  protected void writeReply(Message origMsg,
-                            ServerConnection servConn,
-                            boolean sendOldValue,
-                            boolean oldValueIsObject,
-                            Object oldValue,
-                            VersionTag tag) throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn, boolean sendOldValue,
+      boolean oldValueIsObject, Object oldValue, VersionTag tag) throws IOException {
-      logger.trace("{}: rpl tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg.getNumberOfParts());
+      logger.trace("{}: rpl tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(),
+          replyMsg.getNumberOfParts());
-  protected void writeReplyWithRefreshMetadata(Message origMsg,
-                                               ServerConnection servConn,
-                                               PartitionedRegion pr,
-                                               boolean sendOldValue,
-                                               boolean oldValueIsObject,
-                                               Object oldValue,
-                                               byte nwHopType,
-                                               VersionTag tag) throws IOException {
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+      PartitionedRegion pr, boolean sendOldValue, boolean oldValueIsObject, Object oldValue,
+      byte nwHopType, VersionTag tag) throws IOException {
-    replyMsg.addBytesPart(new byte[] { pr.getMetadataVersion(), nwHopType });
+    replyMsg.addBytesPart(new byte[] {pr.getMetadataVersion(), nwHopType});
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg
-        .getNumberOfParts());
+      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(),
+          origMsg.getTransactionId(), replyMsg.getNumberOfParts());
