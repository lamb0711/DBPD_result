GEODE-6295: Use InternalCacheBuilder for constructing GemFireCacheImpl (#3260)

All code (product and tests) now use InternalCacheBuilder to construct
instances of GemFireCacheImpl.

+import static org.apache.geode.distributed.internal.DistributionConfig.GEMFIRE_PREFIX;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.internal.cache.CacheConfig;
+import org.apache.geode.internal.cache.InternalCacheBuilder;
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT");
+      Boolean.getBoolean(GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT");
-      DistributionConfig.GEMFIRE_PREFIX + "disableManagement";
+      GEMFIRE_PREFIX + "disableManagement";
+
+  public static final String ALLOW_MULTIPLE_SYSTEMS_PROPERTY =
+      GEMFIRE_PREFIX + "ALLOW_MULTIPLE_SYSTEMS";
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ALLOW_MULTIPLE_SYSTEMS");
+      Boolean.getBoolean(ALLOW_MULTIPLE_SYSTEMS_PROPERTY);
-  public static DistributedSystem connectInternal(Properties config,
+  public static InternalDistributedSystem connectInternal(Properties config,
-        DistributedSystem existingSystem = getConnection(config);
+        InternalDistributedSystem existingSystem =
+            (InternalDistributedSystem) getConnection(config);
-      DistributionConfig.GEMFIRE_PREFIX + "disableShutdownHook";
+      GEMFIRE_PREFIX + "disableShutdownHook";
-  public static final String APPEND_TO_LOG_FILE = DistributionConfig.GEMFIRE_PREFIX + "append-log";
+  public static final String APPEND_TO_LOG_FILE = GEMFIRE_PREFIX + "append-log";
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "statsDisabled");
+      Boolean.getBoolean(GEMFIRE_PREFIX + "statsDisabled");
-   * creates a non-functional instance for testing
+   * Creates a non-functional instance for testing.
-   * @param nonDefault - non-default distributed system properties
+   * @param distributionManager the distribution manager for the test instance
+   * @param properties properties to configure the test instance
-  public static InternalDistributedSystem newInstanceForTesting(DistributionManager dm,
-      Properties nonDefault) {
-    InternalDistributedSystem sys = new InternalDistributedSystem(nonDefault);
-    sys.config = new RuntimeDistributionConfigImpl(sys);
-    sys.dm = dm;
-    sys.isConnected = true;
-    return sys;
+  public static InternalDistributedSystem newInstanceForTesting(
+      DistributionManager distributionManager, Properties properties) {
+    StatisticsManagerFactory statisticsManagerFactory = defaultStatisticsManagerFactory();
+
+    return newInstanceForTesting(
+        distributionManager, properties, statisticsManagerFactory);
-  public static InternalDistributedSystem newInstanceForTesting(StatisticsManagerFactory factory) {
-    return new InternalDistributedSystem(new Properties(), factory);
+  /**
+   * Creates a non-functional instance for testing.
+   *
+   * @param distributionManager the distribution manager for the test instance
+   * @param properties properties to configure the test instance
+   * @param statisticsManagerFactory the statistics manager factory for the test instance
+   */
+  static InternalDistributedSystem newInstanceForTesting(DistributionManager distributionManager,
+      Properties properties, StatisticsManagerFactory statisticsManagerFactory) {
+    ConnectionConfigImpl connectionConfig = new ConnectionConfigImpl(properties);
+
+    InternalDistributedSystem internalDistributedSystem =
+        new InternalDistributedSystem(connectionConfig, statisticsManagerFactory);
+
+    internalDistributedSystem.config = new RuntimeDistributionConfigImpl(internalDistributedSystem);
+    internalDistributedSystem.dm = distributionManager;
+    internalDistributedSystem.isConnected = true;
+
+    return internalDistributedSystem;
-  private InternalDistributedSystem(Properties properties) {
-    this(properties, defaultStatisticsManagerFactory());
+  /**
+   * Creates a new {@code InternalDistributedSystem} with the given configuration properties.
+   * Does all of the magic of finding the "default" values of properties.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
+   *
+   * @param configurationProperties properties to configure the connection
+   */
+  private InternalDistributedSystem(Properties configurationProperties) {
+    this(new ConnectionConfigImpl(configurationProperties));
-   * Creates a new <code>InternalDistributedSystem</code> with the given configuration properties.
-   * Does all of the magic of finding the "default" values of properties. See
-   * {@link DistributedSystem#connect} for a list of exceptions that may be thrown.
+   * Creates a new {@code InternalDistributedSystem} with the given configuration.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
-   * @param nonDefault The non-default configuration properties specified by the caller
-   *
-   * @see DistributedSystem#connect
+   * @param config the configuration for the connection
-  private InternalDistributedSystem(Properties nonDefault,
+  private InternalDistributedSystem(ConnectionConfig config) {
+    this(config, defaultStatisticsManagerFactory());
+    isReconnectingDS = config.isReconnecting();
+    quorumChecker = config.quorumChecker();
+  }
+
+  /**
+   * Creates a new {@code InternalDistributedSystem} with the given configuration.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
+   *
+   * @param config the configuration for the connection
+   * @param statisticsManagerFactory creates the statistics manager for this member
+   */
+  private InternalDistributedSystem(ConnectionConfig config,
-    Object o = nonDefault.remove(DistributionConfig.DS_RECONNECTING_NAME);
-    if (o instanceof Boolean) {
-      this.isReconnectingDS = (Boolean) o;
-    } else {
-      this.isReconnectingDS = false;
-    }
-
-    o = nonDefault.remove(DistributionConfig.DS_QUORUM_CHECKER_NAME);
-    if (o instanceof QuorumChecker) {
-      this.quorumChecker = (QuorumChecker) o;
-    }
-
-    o = nonDefault.remove(DistributionConfig.DS_CONFIG_NAME);
-    if (o instanceof DistributionConfigImpl) {
-      this.originalConfig = (DistributionConfigImpl) o;
-    } else {
-      this.originalConfig = new DistributionConfigImpl(nonDefault);
-    }
+    originalConfig = config.distributionConfig();
-    synchronized (CacheFactory.class) { // bug #51335 - deadlock with app thread trying to create a
-                                        // cache
+    synchronized (InternalCacheBuilder.class) {
-                CacheConfig config = new CacheConfig();
-                if (cacheXML != null) {
-                  config.setCacheXMLDescription(cacheXML);
-                }
-                cache = GemFireCacheImpl.create(this.reconnectDS, config);
+                cache = new InternalCacheBuilder()
+                    .setCacheXMLDescription(cacheXML)
+                    .create(reconnectDS);
-
