GEODE-2901: Resolving possible session testing concurrency issues

Updated installation and container management to allow more container independence.
Previously, containers edited files within the installation, leading to several containers modifying the same file. Given the concurrent nature of runs, this could become a problem if containers ever wrote something to the same part of each file.
Containers now create their own separate and unique files that they use to run, hopefully removing any concurrency problems that might arise.

Also tried to optimize for long term sanity of whoever must maintain this code.

This closes #619

-import org.codehaus.cargo.container.configuration.FileConfig;
-import org.codehaus.cargo.container.configuration.LocalConfiguration;
-
- * Provides logic for installation and setup of the tomcat container, including editing the
- * properties needed to switch between cache types.
- *
- * This makes the modifications to the tomcat install as described in <a href=
+ * Provides logic for installation of tomcat. This makes the modifications to the tomcat install as
+ * described in <a href=
-    public String downloadURL() {
-      return downloadURL;
+    /**
+     * Converts the version to an integer
+     *
+     * This differs from {@link #getVersion()} in that this does not always return the version
+     * number. For Tomcat 9, there is no DeltaSession manager, so it must use the session manager
+     * from Tomcat 8. Thus, this function returns 8 when asked for the Tomcat 9 version number.
+     */
+    public int toInteger() {
+      switch (this) {
+        case TOMCAT6:
+        case TOMCAT7:
+        case TOMCAT8:
+          return getVersion();
+        case TOMCAT9:
+          return 8;
+        default:
+          throw new IllegalArgumentException("Illegal tomcat version option");
+      }
-    public int toInteger() {
+    public int getVersion() {
-    /**
-     * Name of the property that can be set to speed up container startup
-     *
-     * Tomcat versions have different property names for the property that, when set, causes the
-     * container to skip over the specified jars when scanning jars on startup. Similar to
-     * {@link GenericAppServerInstall.Server} but specifically built for Tomcat installations.
-     * 
-     * @throws IllegalArgumentException if given a tomcat version is not expected
-     */
+    public String getContainerId() {
+      return "tomcat" + getVersion() + "x";
+    }
+
+    public String getDownloadURL() {
+      return downloadURL;
+    }
+
-
-    /**
-     * XML required DeltaSessionManager attribute
-     *
-     * This XML attribute changes based on the Tomcat version.
-     * 
-     * @return HashMap whose key is the name of the attribute ('className') and value is the value
-     *         of the attribute.
-     */
-    public HashMap<String, String> getRequiredXMLAttributes() {
-      HashMap<String, String> attributes = new HashMap<>();
-
-      int sessionManagerNum;
-      switch (this) {
-        case TOMCAT9:
-          sessionManagerNum = 8;
-          break;
-        default:
-          sessionManagerNum = this.toInteger();
-      }
-      attributes.put("className", "org.apache.geode.modules.session.catalina.Tomcat"
-          + sessionManagerNum + "DeltaSessionManager");
-      return attributes;
-    }
-  }
-
-  /**
-   * Tomcat cache type configuration for this installation
-   *
-   * Contains the XML needed for each cache type. Similar to
-   * {@link GenericAppServerInstall.CacheType} but specifically built for Tomcat installations.
-   */
-  public enum TomcatConfig {
-    PEER_TO_PEER("org.apache.geode.modules.session.catalina.PeerToPeerCacheLifecycleListener",
-        "cache-peer.xml"),
-    CLIENT_SERVER("org.apache.geode.modules.session.catalina.ClientServerCacheLifecycleListener",
-        "cache-client.xml");
-
-    private final String XMLClassName;
-    private final String XMLFile;
-
-    TomcatConfig(String XMLClassName, String XMLFile) {
-      this.XMLClassName = XMLClassName;
-      this.XMLFile = XMLFile;
-    }
-
-    /**
-     * Name of XML file associated with this type of cache
-     */
-    public String getXMLFile() {
-      return XMLFile;
-    }
-
-    /**
-     * Required XML attribute associated with this type of cache
-     * 
-     * @return HashMap whose key is the name of the attribute ('className') and value is the value
-     *         of the attribute.
-     */
-    public HashMap<String, String> getRequiredXMLAttributes() throws IOException {
-      HashMap<String, String> attributes = new HashMap<>();
-      attributes.put("className", XMLClassName);
-      return attributes;
-    }
-  private TomcatConfig config;
-  private final String tomcatModulePath;
-    this(version, TomcatConfig.PEER_TO_PEER, DEFAULT_INSTALL_DIR);
+    this(version, ConnectionType.PEER_TO_PEER, DEFAULT_INSTALL_DIR);
-    this(version, TomcatConfig.PEER_TO_PEER, installDir);
+    this(version, ConnectionType.PEER_TO_PEER, installDir);
-  public TomcatInstall(TomcatVersion version, TomcatConfig config) throws Exception {
-    this(version, config, DEFAULT_INSTALL_DIR);
+  public TomcatInstall(TomcatVersion version, ConnectionType connType) throws Exception {
+    this(version, connType, DEFAULT_INSTALL_DIR);
-  public TomcatInstall(TomcatVersion version, TomcatConfig config, String installDir)
+  /**
+   * Download and setup an installation tomcat using the {@link ContainerInstall} constructor and
+   * some extra functions this class provides
+   *
+   * Specifically, this function uses {@link #copyTomcatGeodeReqFiles(String)} to install geode
+   * session into Tomcat, {@link #setupDefaultSettings()} to modify the context and server XML files
+   * within the installation's 'conf' folder, and {@link #updateProperties()} to set the jar
+   * skipping properties needed to speedup container startup.
+   */
+  public TomcatInstall(TomcatVersion version, ConnectionType connType, String installDir)
-    super(installDir, version.downloadURL());
+    super(installDir, version.getDownloadURL(), connType, "tomcat");
-    this.config = config;
-    // Get tomcat module path
-    tomcatModulePath = findAndExtractModule(GEODE_BUILD_HOME, "tomcat");
-    // Set the cache XML file by copying the XML file in the build dir
-    setCacheXMLFile(tomcatModulePath + "/conf/" + config.getXMLFile(),
-        "cargo_logs/XMLs/" + getContainerDescription() + "_" + System.nanoTime() + ".xml");
-
-    // Default properties
-    setCacheProperty("enableLocalCache", "false");
-
+    // Set some default XML attributes in server and cache XMLs
+    setupDefaultSettings();
-   * Copies jars specified by {@link #tomcatRequiredJars} from the {@link #tomcatModulePath} and the
-   * specified other directory passed to the function.
-   * 
-   * @throws IOException if the {@link #tomcatModulePath}, installation lib directory, or extra
+   * Modifies the context and server XML files in the installation's 'conf' directory so that they
+   * contain the session manager class ({@link #getContextSessionManagerClass()}) and life cycle
+   * listener class ({@link #getServerLifeCycleListenerClass()}) respectively
+   */
+  public void setupDefaultSettings() {
+    HashMap<String, String> attributes = new HashMap<>();
+
+    attributes.put("className", getContextSessionManagerClass());
+    editXMLFile(getDefaultContextXMLFile().getAbsolutePath(), "Tomcat", "Manager", "Context",
+        attributes);
+
+    attributes.put("className", getServerLifeCycleListenerClass());
+    editXMLFile(getDefaultServerXMLFile().getAbsolutePath(), "Tomcat", "Listener", "Server",
+        attributes);
+  }
+
+  /**
+   * Location of the context XML file in the installation's 'conf' directory
+   */
+  public File getDefaultContextXMLFile() {
+    return new File(getHome() + "/conf/context.xml");
+  }
+
+  /**
+   * Location of the server XML file in the installation's 'conf' directory
+   */
+  public File getDefaultServerXMLFile() {
+    return new File(getHome() + "/conf/server.xml");
+  }
+
+  /**
+   * Implements {@link ContainerInstall#getContextSessionManagerClass()}
+   *
+   * Gets the TomcatDeltaSessionManager class associated with this {@link #version}. Use's the
+   * {@link #version}'s toInteger function to do so.
+   */
+  @Override
+  public String getContextSessionManagerClass() {
+    return "org.apache.geode.modules.session.catalina.Tomcat" + version.toInteger()
+        + "DeltaSessionManager";
+  }
+
+  /**
+   * Implementation of {@link ContainerInstall#generateContainer(File, String)}, which generates a
+   * Tomcat specific container
+   *
+   * Creates a {@link TomcatContainer} instance off of this installation.
+   *
+   * @param containerDescriptors Additional descriptors used to identify a container
+   */
+  @Override
+  public TomcatContainer generateContainer(File containerConfigHome, String containerDescriptors)
+      throws IOException {
+    return new TomcatContainer(this, containerConfigHome, containerDescriptors);
+  }
+
+  /**
+   * The cargo specific installation id needed to setup a cargo container
+   *
+   * Based on the installation's {@link #version}.
+   */
+  @Override
+  public String getInstallId() {
+    return version.getContainerId();
+  }
+
+  /**
+   * @see ContainerInstall#getInstallDescription()
+   */
+  @Override
+  public String getInstallDescription() {
+    return version.name() + "_" + getConnectionType().getName();
+  }
+
+  /**
+   * Copies jars specified by {@link #tomcatRequiredJars} from the {@link #getModulePath()} and the
+   * specified other directory passed to the function
+   *
+   * @throws IOException if the {@link #getModulePath()}, installation lib directory, or extra
-    String tomcatLibPath = getInstallPath() + "/lib/";
+    String tomcatLibPath = getHome() + "/lib/";
-      for (File file : (new File(tomcatModulePath + "/lib/")).listFiles()) {
+      for (File file : (new File(getModulePath() + "/lib/")).listFiles()) {
-          "No files found in tomcat module directory " + tomcatModulePath + "/lib/");
+          "No files found in tomcat module directory " + getModulePath() + "/lib/");
-    editPropertyFile(getInstallPath() + "/conf/catalina.properties", version.jarSkipPropertyName(),
+    editPropertyFile(getHome() + "/conf/catalina.properties", version.jarSkipPropertyName(),
-
-  /**
-   * Build a HashMap with server property attributes for the server.xml file
-   *
-   * Server properties are obtained by iterating through {@link ContainerInstall#systemProperties}
-   */
-  private HashMap<String, String> buildServerXMLAttributes() throws IOException {
-    HashMap<String, String> attributes = config.getRequiredXMLAttributes();
-
-    for (String property : systemProperties.keySet())
-      attributes.put(property, systemProperties.get(property));
-
-    return attributes;
-  }
-
-  /**
-   * Build a HashMap with cache property attributes for the context.xml file
-   *
-   * Cache properties are obtained by iterating through {@link ContainerInstall#cacheProperties}
-   */
-  private HashMap<String, String> buildContextXMLAttributes() {
-    HashMap<String, String> attributes = version.getRequiredXMLAttributes();
-
-    for (String property : cacheProperties.keySet())
-      attributes.put(property, cacheProperties.get(property));
-
-    return attributes;
-  }
-
-  /**
-   * Update the server and context XML files
-   *
-   * Uses the {@link #buildContextXMLAttributes()} and {@link #buildServerXMLAttributes()} methods
-   * to update to the proper attributes and values
-   */
-  private void updateXMLFiles() throws IOException {
-    editXMLFile(getInstallPath() + "/conf/server.xml", "Tomcat", "Listener", "Server",
-        buildServerXMLAttributes());
-    editXMLFile(getInstallPath() + "/conf/context.xml", "Tomcat", "Manager", "Context",
-        buildContextXMLAttributes());
-  }
-
-  /**
-   * Tomcat specific property updater
-   *
-   * Overrides {@link ContainerInstall#writeProperties}. Most properties for Tomcat installs are
-   * changed within the server.xml and context.xml files so this runs {@link #updateXMLFiles}.
-   */
-  @Override
-  public void writeProperties() throws Exception {
-    updateXMLFiles();
-  }
-
-  /**
-   * Sets the address and port of the locator for this tomcat installation
-   *
-   * For Client Server installations the cache-client.xml file is updated within the installations
-   * conf folder. For Peer to Peer installations the server.xml file is updated using
-   * {@link #updateXMLFiles()} when the container is started.
-   */
-  @Override
-  public void setLocator(String address, int port) throws Exception {
-    if (config == TomcatConfig.CLIENT_SERVER) {
-      HashMap<String, String> attributes = new HashMap<>();
-      attributes.put("host", address);
-      attributes.put("port", Integer.toString(port));
-
-      editXMLFile(getSystemProperty("cache-xml-file"), "locator", "pool", attributes, true);
-
-    } else {
-      setSystemProperty("locators", address + "[" + port + "]");
-    }
-
-    logger.info("Set locator for Tomcat install to " + address + "[" + port + "]");
-  }
-
-  public TomcatVersion getVersion() {
-    return version;
-  }
-
-  /**
-   * @see ContainerInstall#getContainerId()
-   */
-  @Override
-  public String getContainerId() {
-    return "tomcat" + version.toInteger() + "x";
-  }
-
-  /**
-   * @see ContainerInstall#getContainerDescription()
-   */
-  @Override
-  public String getContainerDescription() {
-    return version.name() + "_" + config.name();
-  }
-
-  /**
-   * Modifies the tomcat configuration so that this points to the correct context.xml file when
-   * setup and run using Cargo.
-   */
-  @Override
-  public void modifyConfiguration(LocalConfiguration configuration) {
-    // Copy context.xml file for actual server to get DeltaSessionManager as manager
-    FileConfig contextConfigFile = new FileConfig();
-    contextConfigFile.setToDir("conf");
-    contextConfigFile.setFile(getInstallPath() + "/conf/context.xml");
-    configuration.setConfigFileProperty(contextConfigFile);
-  }
