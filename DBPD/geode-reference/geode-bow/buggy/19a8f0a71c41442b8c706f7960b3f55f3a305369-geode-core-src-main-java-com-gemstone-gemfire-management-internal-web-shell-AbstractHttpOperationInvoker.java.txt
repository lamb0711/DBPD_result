GEODE-17: WIP adding JMX security

+import java.util.Iterator;
+import java.util.Map.Entry;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+
+  protected Map<String,String> securityProperties;
+
-   * @see #AbstractHttpOperationInvoker(com.gemstone.gemfire.management.internal.cli.shell.Gfsh, String)
+   * @see #AbstractHttpOperationInvoker(com.gemstone.gemfire.management.internal.cli.shell.Gfsh, String, Map)
-  public AbstractHttpOperationInvoker(final Gfsh gfsh) {
-    this(gfsh, REST_API_URL);
+  public AbstractHttpOperationInvoker(final Gfsh gfsh, Map<String,String> securityProperties) {
+    this(gfsh, REST_API_URL, securityProperties);
-  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl) {
+  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl, Map<String,String> securityProperties) {
+    this.securityProperties = securityProperties;
-        gfsh.logSevere(message, null);
+        //gfsh.logSevere(message, null);
+        throw new RuntimeException(message);
+
+    if(this.securityProperties != null){
+      Iterator<Entry<String, String>> it = this.securityProperties.entrySet().iterator();
+      while(it.hasNext()){
+        Entry<String,String> entry= it.next();
+        request.addHeaderValues(entry.getKey(), entry.getValue());
+      }
+    }
+
+      printInfo("HTTP response body: ", response.getBody());
