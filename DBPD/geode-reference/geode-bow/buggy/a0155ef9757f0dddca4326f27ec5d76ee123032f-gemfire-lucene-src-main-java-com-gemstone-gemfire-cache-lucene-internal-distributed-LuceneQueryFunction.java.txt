GEODE-11: Use ResultCollector in LuceneFunction

Shards will not use LuceneQueryResults object to send result to coordinator.
Replace this dependency with EntryScore and related objects.

-import java.util.List;
-import com.gemstone.gemfire.cache.lucene.LuceneQueryResults;
-import com.gemstone.gemfire.cache.lucene.internal.LuceneQueryResultsImpl;
-import com.gemstone.gemfire.cache.lucene.internal.LuceneResultStructImpl;
-import com.gemstone.gemfire.cache.lucene.internal.mergers.TopDocsResultMerger;
-    ResultSender<LuceneQueryResults> resultSender = ctx.getResultSender();
+    ResultSender<TopEntries> resultSender = ctx.getResultSender();
-    Set<Integer> buckets = args == null ? null : args.getBuckets();
+    Set<Integer> buckets = (args == null ? null : args.getBuckets());
-    List<LuceneQueryResults> results = new ArrayList<>();
+    CollectorManager<TopEntries, TopEntriesCollector> manager = new TopEntriesCollectorManager();
+
+    Collection<IndexResultCollector> results = new ArrayList<>();
-        ShardResultCollector collector = new ShardResultCollector();
-        logger.debug("Executing search on repo: " + repo);
+        TopEntriesCollector collector = manager.newCollector(repo.toString());
+        logger.debug("Executing search on repo: " + repo.toString());
-        results.add(collector.getResult());
+        results.add(collector);
-    TopDocsResultMerger merger = new TopDocsResultMerger();
-    LuceneQueryResults merged = merger.mergeResults(results);
-    resultSender.lastResult(merged);
-  }
-
-  /**
-   * Collects and merges results from {@link IndexRepository}s
-   */
-  class ShardResultCollector implements IndexResultCollector {
-    LuceneQueryResultsImpl result = new LuceneQueryResultsImpl();
-    
-    @Override
-    public void collect(Object key, float score) {
-      result.addHit(new LuceneResultStructImpl(key, score));
-    }
-
-    public LuceneQueryResults getResult() {
-      return result;
+    TopEntries mergedResult;
+    try {
+      mergedResult = manager.reduce(results);
+      resultSender.lastResult(mergedResult);
+    } catch (IOException e) {
+      logger.warn("", e);
+      resultSender.sendException(e);
+      return;
