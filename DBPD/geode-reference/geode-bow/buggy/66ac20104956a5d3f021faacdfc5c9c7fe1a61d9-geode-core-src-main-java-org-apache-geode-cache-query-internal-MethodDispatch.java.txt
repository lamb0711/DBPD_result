GEODE-6989: Cache OQL Authorized Methods (#4136)

The MethodDispatch and AttributeDescriptor classes now use the
QueryExecutionContext to cache the result of already authorized
methods; thus preventing the OQL engine from invoking the authorizer
for every object traversed and, instead, only invoke it once in the
lifetime of a query for every new method seen.
-  private Class _targetClass;
-  private String _methodName;
-  private Class[] _argTypes;
-  private Method _method; // remember the right method
-  private MethodInvocationAuthorizer _methodInvocationAuthorizer;
+  private Method _method;
+  private final Class _targetClass;
+  private final String _methodName;
+  private final Class[] _argTypes;
+  private final MethodInvocationAuthorizer _methodInvocationAuthorizer;
-  public Object invoke(Object target, List args)
+  public Object invoke(Object target, List args, ExecutionContext executionContext)
-      if (!_methodInvocationAuthorizer.authorize(_method, target)) {
+      // Try to use cached result so authorizer gets invoked only once per query.
+      boolean authorizationResult;
+      String cacheKey = target.getClass().getCanonicalName() + "." + _method.getName();
+      Boolean cachedResult = (Boolean) executionContext.cacheGet(cacheKey);
+
+      if (cachedResult != null) {
+        // Use cached result.
+        authorizationResult = cachedResult;
+      } else {
+        // First time, evaluate and cache result.
+        authorizationResult = _methodInvocationAuthorizer.authorize(_method, target);
+        executionContext.cachePut(cacheKey, authorizationResult);
+      }
+
+      if (!authorizationResult) {
