GEODE-1570: improve rest security framework

 * use annotations for authorization
 * consolidate tests
 * delete unused classes

+import org.apache.logging.log4j.Logger;
+import org.json.JSONException;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Controller;
+import org.springframework.util.StringUtils;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
-import org.apache.logging.log4j.Logger;
-import org.json.JSONException;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Controller;
-import org.springframework.util.StringUtils;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.ResponseStatus;
+  @PreAuthorize("@securityService.authorize('DATA', 'READ')")
-    securityService.authorizeDataRead();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Listing all registered Functions in GemFire...");
-    }
+    logger.debug("Listing all registered Functions in GemFire...");
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE')")
-    securityService.authorizeDataWrite();
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Function ({}) with arguments ({}) on Region ({})...", functionId,
-            ArrayUtils.toString(argsInBody), region);
-      }
+      logger.debug("Executing Function ({}) with arguments ({}) on Region ({})...", functionId,
+        ArrayUtils.toString(argsInBody), region);
+
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Function ({}) with arguments ({}) on Member ({})...", functionId,
+      logger.debug("Executing Function ({}) with arguments ({}) on Member ({})...", functionId,
-      }
+
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Function ({}) with arguments ({}) on Groups ({})...", functionId,
+      logger.debug("Executing Function ({}) with arguments ({}) on Groups ({})...", functionId,
-      }
+
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Function ({}) with arguments ({}) on all Members...", functionId,
+      logger.debug("Executing Function ({}) with arguments ({}) on all Members...", functionId,
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Function ({}) with filter ({})", functionId,
+      logger.debug("Executing Function ({}) with filter ({})", functionId,
-      }
+
