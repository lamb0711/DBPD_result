Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Generates an encrypted password, used by the gemfire encrypt-password
- * command. Makes use of Blowfish algorithm to encrypt/decrypt password string
+ * Generates an encrypted password, used by the gemfire encrypt-password command. Makes use of
+ * Blowfish algorithm to encrypt/decrypt password string
- * This shows a sample command invocation and output (assuming password is the
- * actual password for the datasource): <br>
+ * This shows a sample command invocation and output (assuming password is the actual password for
+ * the datasource): <br>
- * Copy the output from the gemfire command to the cache.xml file as the value
- * of the password attribute of the jndi-binding tag embedded in encrypted(),
- * just like a method parameter.<br>
+ * Copy the output from the gemfire command to the cache.xml file as the value of the password
+ * attribute of the jndi-binding tag embedded in encrypted(), just like a method parameter.<br>
- * To use a non-encrypted password, put the actual password as the value of the
- * password attribute of the jndi-binding tag, like this: password="password"
- * <br>
+ * To use a non-encrypted password, put the actual password as the value of the password attribute
+ * of the jndi-binding tag, like this: password="password" <br>
-   * @param password
-   *          String to be encrypted.
+   * @param password String to be encrypted.
-        System.out.println(LocalizedStrings.PasswordUtil_ENCRYPTED_TO_0
-            .toLocalizedString(encryptedString));
+        System.out.println(
+            LocalizedStrings.PasswordUtil_ENCRYPTED_TO_0.toLocalizedString(encryptedString));
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
+
-   * @param password
-   *          String to be decrypted
+   * @param password String to be decrypted
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-      b[i] = (byte)v;
+      b[i] = (byte) v;
