GEODE-5261 - Add a test for connection-pool prefill during shutdown

Refactored ConnectionFactoryImpl to allow it to be unit tested.
Added a unit test to prove that createClientToServerConnection(Set) throws a
CancelException if the pool is shutting down.

-import org.apache.geode.internal.cache.tier.ClientSideHandshake;
-import org.apache.geode.internal.cache.tier.CommunicationMode;
-import org.apache.geode.internal.net.SocketCreator;
-import org.apache.geode.internal.net.SocketCreatorFactory;
-import org.apache.geode.internal.security.SecurableCommunicationChannel;
-  private final ClientSideHandshakeImpl handshake;
-  private final int socketBufferSize;
-  private final int handshakeTimeout;
-  private final boolean usedByGateway;
-  private final CancelCriterion cancelCriterion;
-  private final SocketCreator socketCreator;
-  private int readTimeout;
-  private InternalDistributedSystem ds;
-  private EndpointManager endpointManager;
-  private GatewaySender gatewaySender;
+  private final CancelCriterion cancelCriterion;
+  private final ConnectionConnector connectionConnector;
-    this.handshake =
-        new ClientSideHandshakeImpl(proxyId, sys, sys.getSecurityService(), multiuserSecureMode);
-    this.handshake.setClientReadTimeout(readTimeout);
+    this(
+        new ConnectionConnector(endpointManager, sys, socketBufferSize, handshakeTimeout,
+            readTimeout, proxyId, cancelCriterion, usedByGateway, sender, multiuserSecureMode),
+        source, pingInterval, pool, cancelCriterion);
+  }
+
+  public ConnectionFactoryImpl(ConnectionConnector connectionConnector, ConnectionSource source,
+      long pingInterval, PoolImpl pool, CancelCriterion cancelCriterion) {
-    this.endpointManager = endpointManager;
-    this.ds = sys;
-    this.socketBufferSize = socketBufferSize;
-    this.handshakeTimeout = handshakeTimeout;
-    this.readTimeout = readTimeout;
-    this.usedByGateway = usedByGateway;
-    this.gatewaySender = sender;
-    this.cancelCriterion = cancelCriterion;
-    if (this.usedByGateway || (this.gatewaySender != null)) {
-      this.socketCreator =
-          SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.GATEWAY);
-      if (sender != null && !sender.getGatewayTransportFilters().isEmpty()) {
-        this.socketCreator.initializeTransportFilterClientSocketFactory(sender);
-      }
-    } else {
-      // If configured use SSL properties for cache-server
-      this.socketCreator =
-          SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.SERVER);
-    }
+    this.cancelCriterion = cancelCriterion;
+    this.connectionConnector = connectionConnector;
-  private CommunicationMode getCommMode(boolean forQueue) {
-    if (this.usedByGateway || (this.gatewaySender != null)) {
-      return CommunicationMode.GatewayToGateway;
-    } else if (forQueue) {
-      return CommunicationMode.ClientToServerForQueue;
-    } else {
-      return CommunicationMode.ClientToServer;
-    }
-  }
-
-    ConnectionImpl connection = new ConnectionImpl(this.ds, this.cancelCriterion);
-
+    Connection connection = null;
-      ClientSideHandshake connHandShake = new ClientSideHandshakeImpl(handshake);
-      connection.connect(endpointManager, location, connHandShake, socketBufferSize,
-          handshakeTimeout, readTimeout, getCommMode(forQueue), this.gatewaySender,
-          this.socketCreator);
-      failureTracker.reset();
-      connection.setHandshake(connHandShake);
-      authenticateIfRequired(connection);
+      connection = connectionConnector.connectClientToServer(location, forQueue);
+      failureTracker.reset();
+      authenticateIfRequired(connection);
-    CacheClientUpdater updater = new CacheClientUpdater(clientUpdateName, endpoint.getLocation(),
-        isPrimary, ds, new ClientSideHandshakeImpl(this.handshake), qManager, endpointManager,
-        endpoint, handshakeTimeout, this.socketCreator);
-
-    if (!updater.isConnected()) {
-      return null;
-    }
-
-    updater.setFailedUpdater(failedUpdater);
-    updater.start();
+    CacheClientUpdater updater = connectionConnector.connectServerToClient(endpoint, qManager,
+        isPrimary, failedUpdater, clientUpdateName);
