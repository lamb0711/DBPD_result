GEODE-3751: a single place for client protocol loading, logic.

* Load a single service, `ClientProtocolService`.
  - (well, authenticators are still separate).
* Move several interfaces to `geode-protobuf` from core.
* Client protocol state and statistics are now stored on the new
  `ClientProtocolPipeline` interface. This will allow us to keep
  connection logic for core separated from protocol logic.
* implement pipelines for Cache and Locator.
* some other small fixes and changes.

Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>

This closes #873

Signed-off-by: Brian Rowe <browe@pivotal.io>

-import java.net.InetAddress;
-  private ClientProtocolMessageHandler protocolHandler;
+  private volatile ClientProtocolService clientProtocolService;
-    HashMap tmp = new HashMap<>();
+    HashMap<String, Class<? extends Authenticator>> tmp = new HashMap<>();
-  private synchronized ClientProtocolMessageHandler initializeMessageHandler(
+  private synchronized ClientProtocolService initializeClientProtocolService(
-    if (protocolHandler != null) {
-      return protocolHandler;
+    if (clientProtocolService != null) {
+      return clientProtocolService;
-    ClientProtocolMessageHandler tempHandler = new MessageHandlerFactory().makeMessageHandler();
-    tempHandler.initializeStatistics(statisticsName, statisticsFactory);
+    // use temp to make sure we publish properly.
+    ClientProtocolService tmp = new ClientProtocolServiceLoader().loadService();
+    tmp.initializeStatistics(statisticsName, statisticsFactory);
-    protocolHandler = tempHandler;
-    return protocolHandler;
+    clientProtocolService = tmp;
+    return clientProtocolService;
-  private ClientProtocolMessageHandler getOrCreateClientProtocolMessageHandler(
+  private ClientProtocolService getOrCreateClientProtocolService(
-    if (protocolHandler == null) {
-      return initializeMessageHandler(statisticsFactory, serverName);
+    if (clientProtocolService == null) {
+      return initializeClientProtocolService(statisticsFactory, serverName);
-    return protocolHandler;
+    return clientProtocolService;
-      SecurityService securityService, InetAddress bindAddress) throws IOException {
+      SecurityService securityService) throws IOException {
-        String authenticationMode =
-            System.getProperty("geode.protocol-authentication-mode", "NOOP");
+        try {
+          String authenticationMode =
+              System.getProperty("geode.protocol-authentication-mode", "NOOP");
-        return new GenericProtocolServerConnection(socket, cache, helper, stats, hsTimeout,
-            socketBufferSize, communicationModeStr, communicationMode, acceptor,
-            getOrCreateClientProtocolMessageHandler(cache.getDistributedSystem(),
-                acceptor.getServerName()),
-            securityService, findStreamAuthenticator(authenticationMode));
+          return createGenericProtocolServerConnection(socket, cache, helper, stats, hsTimeout,
+              socketBufferSize, communicationModeStr, communicationMode, acceptor, securityService,
+              authenticationMode);
+        } catch (ServiceLoadingFailureException ex) {
+          throw new IOException("Could not load protobuf client protocol", ex);
+        }
+
+  private ServerConnection createGenericProtocolServerConnection(Socket socket, InternalCache cache,
+      CachedRegionHelper helper, CacheServerStats stats, int hsTimeout, int socketBufferSize,
+      String communicationModeStr, byte communicationMode, Acceptor acceptor,
+      SecurityService securityService, String authenticationMode) {
+    ClientProtocolService service =
+        getOrCreateClientProtocolService(cache.getDistributedSystem(), acceptor.getServerName());
+
+    ClientProtocolProcessor processor = service.createProcessorForCache(cache,
+        findStreamAuthenticator(authenticationMode), securityService);
+
+    return new GenericProtocolServerConnection(socket, cache, helper, stats, hsTimeout,
+        socketBufferSize, communicationModeStr, communicationMode, acceptor, processor,
+        securityService);
+  }
