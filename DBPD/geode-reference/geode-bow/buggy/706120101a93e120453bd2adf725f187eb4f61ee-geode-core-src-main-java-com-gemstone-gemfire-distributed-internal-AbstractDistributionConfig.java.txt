GEODE-1377: Initial move of system properties from private to public

-import java.lang.reflect.Method;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.StringTokenizer;
-
+import com.gemstone.gemfire.distributed.SystemConfigurationProperties;
+import java.lang.reflect.Method;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.*;
+
-
-  @ConfigAttributeChecker(name=START_LOCATOR_NAME)
+  @ConfigAttributeChecker(name = START_LOCATOR)
-
-  @ConfigAttributeChecker(name=TCP_PORT_NAME)
+  @ConfigAttributeChecker(name = TCP_PORT)
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE.toLocalizedString(new Object[] {TCP_PORT_NAME, Integer.valueOf(value), SSL_ENABLED_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE
+          .toLocalizedString(new Object[] { TCP_PORT, Integer.valueOf(value), SSL_ENABLED_NAME }));
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE.toLocalizedString(new Object[] {TCP_PORT_NAME, Integer.valueOf(value), CLUSTER_SSL_ENABLED_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE
+          .toLocalizedString(new Object[] { TCP_PORT, Integer.valueOf(value), CLUSTER_SSL_ENABLED_NAME }));
-  @ConfigAttributeChecker(name=MCAST_PORT_NAME)
+  @ConfigAttributeChecker(name = MCAST_PORT)
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE.toLocalizedString(new Object[] {MCAST_PORT_NAME, Integer.valueOf(value), SSL_ENABLED_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE
+          .toLocalizedString(new Object[] { MCAST_PORT, Integer.valueOf(value), SSL_ENABLED_NAME }));
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE.toLocalizedString(new Object[] {MCAST_PORT_NAME, Integer.valueOf(value), CLUSTER_SSL_ENABLED_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_0_WHEN_2_IS_TRUE
+          .toLocalizedString(new Object[] { MCAST_PORT, Integer.valueOf(value), CLUSTER_SSL_ENABLED_NAME }));
-
-  @ConfigAttributeChecker(name=MCAST_ADDRESS_NAME)
+  @ConfigAttributeChecker(name = MCAST_ADDRESS)
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_IT_WAS_NOT_A_MULTICAST_ADDRESS.toLocalizedString(new Object[] {MCAST_ADDRESS_NAME, value}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_IT_WAS_NOT_A_MULTICAST_ADDRESS
+          .toLocalizedString(new Object[] { MCAST_ADDRESS, value }));
-  @ConfigAttributeChecker(name=BIND_ADDRESS_NAME)
+  @ConfigAttributeChecker(name = BIND_ADDRESS)
-
-  @ConfigAttributeChecker(name=SERVER_BIND_ADDRESS_NAME)
+  @ConfigAttributeChecker(name = SERVER_BIND_ADDRESS)
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_FALSE_WHEN_2_IS_NOT_0.toLocalizedString(new Object[] {SSL_ENABLED_NAME, value, MCAST_PORT_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_FALSE_WHEN_2_IS_NOT_0
+          .toLocalizedString(new Object[] { SSL_ENABLED_NAME, value, MCAST_PORT }));
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_FALSE_WHEN_2_IS_NOT_0.toLocalizedString(new Object[] {CLUSTER_SSL_ENABLED_NAME, value, MCAST_PORT_NAME}));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_MUST_BE_FALSE_WHEN_2_IS_NOT_0
+          .toLocalizedString(new Object[] { CLUSTER_SSL_ENABLED_NAME, value, MCAST_PORT }));
-    .getProperty("gemfire.DistributedSystemListener");
+        .getProperty(DistributionConfig.GEMFIRE_PREFIX + "DistributedSystemListener");
-  @ConfigAttributeChecker(name=LOCATORS_NAME)
+  @ConfigAttributeChecker(name = LOCATORS)
-      String mcastInfo = MCAST_PORT_NAME + "[" + getMcastPort() + "]";
+      String mcastInfo = MCAST_PORT + "[" + getMcastPort() + "]";
-       String mcastInfo = MCAST_PORT_NAME + "[" + getMcastPort() + "]";
+      String mcastInfo = MCAST_PORT + "[" + getMcastPort() + "]";
-    m.put(LOCATORS_NAME, 
+    m.put(LOCATORS,
-    
-    m.put(LOCATOR_WAIT_TIME_NAME,
+
+    m.put(LOCATOR_WAIT_TIME,
-    m.put(TCP_PORT_NAME, 
+    m.put(TCP_PORT,
-    m.put(MCAST_PORT_NAME, 
+    m.put(MCAST_PORT,
-    m.put(MCAST_ADDRESS_NAME, 
+    m.put(MCAST_ADDRESS,
-    m.put(MCAST_TTL_NAME, 
+    m.put(MCAST_TTL,
-    m.put(BIND_ADDRESS_NAME, 
+    m.put(BIND_ADDRESS,
-    m.put(SERVER_BIND_ADDRESS_NAME, 
+    m.put(SERVER_BIND_ADDRESS,
-    m.put(NAME_NAME, "A name that uniquely identifies a member in its distributed system." +
+    m.put(SystemConfigurationProperties.NAME, "A name that uniquely identifies a member in its distributed system." +
-          Integer.valueOf(MAX_ASYNC_MAX_QUEUE_SIZE)}));       
+            Integer.valueOf(MAX_ASYNC_MAX_QUEUE_SIZE) }));
-    m.put(START_LOCATOR_NAME, 
+    m.put(START_LOCATOR,
-  static final InetAddress _getDefaultMcastAddress() {
+  public static final InetAddress _getDefaultMcastAddress() {
