GEODE-5971: Refactor CreateRegionCommand to extend SingleGfshCommand

- Store config via generating a RegionConfig object rather than an XML
entity

Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Optional;
-        resultSender.lastResult(new CliFunctionResult(memberNameOrId, true,
-            CliStrings.format(
-                CliStrings.CREATE_REGION__MSG__SKIPPING_0_REGION_PATH_1_ALREADY_EXISTS,
-                memberNameOrId, regionCreateArgs.getRegionPath())));
+        resultSender
+            .lastResult(new CliFunctionResult(memberNameOrId, CliFunctionResult.StatusState.OK,
+                CliStrings.format(
+                    CliStrings.CREATE_REGION__MSG__SKIPPING_0_REGION_PATH_1_ALREADY_EXISTS,
+                    memberNameOrId, regionCreateArgs.getRegionPath())));
-      XmlEntity xmlEntity = getXmlEntityForRegion(createdRegion);
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity,
-          CliStrings.format(CliStrings.CREATE_REGION__MSG__REGION_0_CREATED_ON_1,
-              createdRegion.getFullPath(), memberNameOrId)));
+      resultSender
+          .lastResult(new CliFunctionResult(memberNameOrId, CliFunctionResult.StatusState.OK,
+              CliStrings.format(CliStrings.CREATE_REGION__MSG__REGION_0_CREATED_ON_1,
+                  createdRegion.getFullPath(), memberNameOrId)));
-    boolean isPartitioned = false;
-    RegionFactory<K, V> factory = null;
-    RegionAttributes<K, V> regionAttributes = null;
-    if (regionShortcut != null) {
-      regionAttributes = cache.getRegionAttributes(regionShortcut.toString());
-      regionCreateArgs.setRegionAttributes(regionAttributes);
-    } else {
-      regionAttributes = regionCreateArgs.getRegionAttributes();
-    }
-
-    isPartitioned = regionAttributes.getPartitionAttributes() != null;
-    factory = cache.createRegionFactory(regionAttributes);
+    RegionAttributes<K, V> regionAttributes = regionCreateArgs.getRegionAttributes();
+    boolean isPartitioned = regionAttributes.getPartitionAttributes() != null;
+    RegionFactory<K, V> factory = cache.createRegionFactory(regionAttributes);
-    if (entryExpirationIdleTime.isTimeOrActionSet()) {
+    if (entryExpirationIdleTime != null && entryExpirationIdleTime.isTimeOrActionSet()) {
-    if (entryExpirationTTL.isTimeOrActionSet()) {
+    if (entryExpirationTTL != null && entryExpirationTTL.isTimeOrActionSet()) {
-    if (regionExpirationIdleTime.isTimeOrActionSet()) {
+    if (regionExpirationIdleTime != null && regionExpirationIdleTime.isTimeOrActionSet()) {
-    if (regionExpirationTTL.isTimeOrActionSet()) {
+    if (regionExpirationTTL != null && regionExpirationTTL.isTimeOrActionSet()) {
-    EvictionAttributes evictionAttributes = regionCreateArgs.getEvictionAttributes();
+    EvictionAttributes evictionAttributes = Optional
+        .ofNullable(regionCreateArgs.getEvictionAttributes())
+        .map(a -> a.convertToEvictionAttributes()).orElse(null);
-    if (regionCreateArgs.isDiskSynchronous() != null) {
-      factory.setDiskSynchronous(regionCreateArgs.isDiskSynchronous());
+    if (regionCreateArgs.getDiskSynchronous() != null) {
+      factory.setDiskSynchronous(regionCreateArgs.getDiskSynchronous());
-    if (regionCreateArgs.isOffHeap() != null) {
-      factory.setOffHeap(regionCreateArgs.isOffHeap());
+    if (regionCreateArgs.getOffHeap() != null) {
+      factory.setOffHeap(regionCreateArgs.getOffHeap());
-    if (regionCreateArgs.isStatisticsEnabled() != null) {
-      factory.setStatisticsEnabled(regionCreateArgs.isStatisticsEnabled());
+    if (regionCreateArgs.getStatisticsEnabled() != null) {
+      factory.setStatisticsEnabled(regionCreateArgs.getStatisticsEnabled());
-    if (regionCreateArgs.isEnableAsyncConflation() != null) {
-      factory.setEnableAsyncConflation(regionCreateArgs.isEnableAsyncConflation());
+    if (regionCreateArgs.getEnableAsyncConflation() != null) {
+      factory.setEnableAsyncConflation(regionCreateArgs.getEnableAsyncConflation());
-    if (regionCreateArgs.isEnableSubscriptionConflation() != null) {
-      factory.setEnableSubscriptionConflation(regionCreateArgs.isEnableSubscriptionConflation());
+    if (regionCreateArgs.getEnableSubscriptionConflation() != null) {
+      factory.setEnableSubscriptionConflation(regionCreateArgs.getEnableSubscriptionConflation());
-    if (regionCreateArgs.isConcurrencyChecksEnabled() != null) {
-      factory.setConcurrencyChecksEnabled(regionCreateArgs.isConcurrencyChecksEnabled());
+    if (regionCreateArgs.getConcurrencyChecksEnabled() != null) {
+      factory.setConcurrencyChecksEnabled(regionCreateArgs.getConcurrencyChecksEnabled());
-    if (regionCreateArgs.isCloningEnabled() != null) {
-      factory.setCloningEnabled(regionCreateArgs.isCloningEnabled());
+    if (regionCreateArgs.getCloningEnabled() != null) {
+      factory.setCloningEnabled(regionCreateArgs.getCloningEnabled());
-    if (regionCreateArgs.isMcastEnabled() != null) {
-      factory.setMulticastEnabled(regionCreateArgs.isMcastEnabled());
+    if (regionCreateArgs.getMcastEnabled() != null) {
+      factory.setMulticastEnabled(regionCreateArgs.getMcastEnabled());
-    RegionFunctionArgs.PartitionArgs partitionArgs = regionCreateArgs.getPartitionArgs();
-    PartitionAttributesFactory<K, V> prAttrFactory = null;
+    PartitionAttributesFactory<K, V> prAttrFactory;
-    String colocatedWith = partitionArgs.getPrColocatedWith();
-    if (colocatedWith != null) {
-      Region<Object, Object> colocatedWithRegion = cache.getRegion(colocatedWith);
-      if (colocatedWithRegion == null) {
-        throw new IllegalArgumentException(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__COLOCATEDWITH_REGION_0_DOES_NOT_EXIST, colocatedWith));
+    if (regionCreateArgs.hasPartitionAttributes()) {
+      RegionFunctionArgs.PartitionArgs partitionArgs = regionCreateArgs.getPartitionArgs();
+      String colocatedWith = partitionArgs.getPrColocatedWith();
+      if (colocatedWith != null) {
+        Region<Object, Object> colocatedWithRegion = cache.getRegion(colocatedWith);
+        if (colocatedWithRegion == null) {
+          throw new IllegalArgumentException(CliStrings.format(
+              CliStrings.CREATE_REGION__MSG__COLOCATEDWITH_REGION_0_DOES_NOT_EXIST, colocatedWith));
+        }
+        if (!colocatedWithRegion.getAttributes().getDataPolicy().withPartitioning()) {
+          throw new IllegalArgumentException(CliStrings.format(
+              CliStrings.CREATE_REGION__MSG__COLOCATEDWITH_REGION_0_IS_NOT_PARTITIONEDREGION,
+              colocatedWith));
+        }
+        prAttrFactory.setColocatedWith(colocatedWith);
-      if (!colocatedWithRegion.getAttributes().getDataPolicy().withPartitioning()) {
-        throw new IllegalArgumentException(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__COLOCATEDWITH_REGION_0_IS_NOT_PARTITIONEDREGION,
-            colocatedWith));
+      if (partitionArgs.getPrLocalMaxMemory() != null) {
+        prAttrFactory.setLocalMaxMemory(partitionArgs.getPrLocalMaxMemory());
-      prAttrFactory.setColocatedWith(colocatedWith);
-    }
-    if (partitionArgs.getPrLocalMaxMemory() != null) {
-      prAttrFactory.setLocalMaxMemory(partitionArgs.getPrLocalMaxMemory());
-    }
-    if (partitionArgs.getPrTotalMaxMemory() != null) {
-      prAttrFactory.setTotalMaxMemory(partitionArgs.getPrTotalMaxMemory());
-    }
-    if (partitionArgs.getPrTotalNumBuckets() != null) {
-      prAttrFactory.setTotalNumBuckets(partitionArgs.getPrTotalNumBuckets());
-    }
-    if (partitionArgs.getPrRedundantCopies() != null) {
-      prAttrFactory.setRedundantCopies(partitionArgs.getPrRedundantCopies());
-    }
-    if (partitionArgs.getPrRecoveryDelay() != null) {
-      prAttrFactory.setRecoveryDelay(partitionArgs.getPrRecoveryDelay());
-    }
-    if (partitionArgs.getPrStartupRecoveryDelay() != null) {
-      prAttrFactory.setStartupRecoveryDelay(partitionArgs.getPrStartupRecoveryDelay());
-    }
+      if (partitionArgs.getPrTotalMaxMemory() != null) {
+        prAttrFactory.setTotalMaxMemory(partitionArgs.getPrTotalMaxMemory());
+      }
+      if (partitionArgs.getPrTotalNumBuckets() != null) {
+        prAttrFactory.setTotalNumBuckets(partitionArgs.getPrTotalNumBuckets());
+      }
+      if (partitionArgs.getPrRedundantCopies() != null) {
+        prAttrFactory.setRedundantCopies(partitionArgs.getPrRedundantCopies());
+      }
+      if (partitionArgs.getPrRecoveryDelay() != null) {
+        prAttrFactory.setRecoveryDelay(partitionArgs.getPrRecoveryDelay());
+      }
+      if (partitionArgs.getPrStartupRecoveryDelay() != null) {
+        prAttrFactory.setStartupRecoveryDelay(partitionArgs.getPrStartupRecoveryDelay());
+      }
-    if (regionCreateArgs.getPartitionArgs().getPartitionResolver() != null) {
-      Class<PartitionResolver> partitionResolverClass =
-          forName(regionCreateArgs.getPartitionArgs().getPartitionResolver(),
-              CliStrings.CREATE_REGION__PARTITION_RESOLVER);
-      prAttrFactory
-          .setPartitionResolver((PartitionResolver<K, V>) newInstance(partitionResolverClass,
-              CliStrings.CREATE_REGION__PARTITION_RESOLVER));
+      if (regionCreateArgs.getPartitionArgs().getPartitionResolver() != null) {
+        Class<PartitionResolver> partitionResolverClass =
+            forName(regionCreateArgs.getPartitionArgs().getPartitionResolver(),
+                CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+        prAttrFactory
+            .setPartitionResolver((PartitionResolver<K, V>) newInstance(partitionResolverClass,
+                CliStrings.CREATE_REGION__PARTITION_RESOLVER));
+      }
