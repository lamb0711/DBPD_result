GEODE-6166: Improves put performance (#2970)

* Encode Operation ordinal in Message Part directly
* Don't allocate hashmap until we need it.
* Add putByte to Part and pre-allocate serialized form.
* Use Deque to avoid allocating lots of LinkedList.Node objects

-import org.apache.geode.internal.cache.OpType;
-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
-    Part regionNamePart;
-    Part keyPart;
-    Part callbackArgPart;
-    Part eventPart;
-    Part expectedOldValuePart;
-
-    Object operation = null;
-    Object expectedOldValue = null;
-
-    String regionName = null;
-    Object callbackArg = null, key = null;
-    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
-    regionNamePart = clientMessage.getPart(0);
-    keyPart = clientMessage.getPart(1);
-    expectedOldValuePart = clientMessage.getPart(2);
+    final Part regionNamePart = clientMessage.getPart(0);
+    final Part keyPart = clientMessage.getPart(1);
+    final Part expectedOldValuePart = clientMessage.getPart(2);
+
+    final Operation operation;
-
-      operation = clientMessage.getPart(3).getObject();
-
-      if (((operation instanceof Operation) && ((Operation) operation == Operation.REMOVE))
-          || ((operation instanceof Byte) && (Byte) operation == OpType.DESTROY))
-
-      {
-        expectedOldValue = expectedOldValuePart.getObject();
-      }
+      operation = getOperation(clientMessage.getPart(3), Operation.DESTROY);
-    eventPart = clientMessage.getPart(4);
+    Object expectedOldValue = null;
+    if (operation == Operation.REMOVE) {
+      try {
+        expectedOldValue = expectedOldValuePart.getObject();
+      } catch (Exception e) {
+        writeException(clientMessage, e, false, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
+        return;
+      }
+    }
+    final Part eventPart = clientMessage.getPart(4);
+
+    Object callbackArg = null;
-      callbackArgPart = clientMessage.getPart(5);
+      final Part callbackArgPart = clientMessage.getPart(5);
-    regionName = regionNamePart.getString();
+
+    final Object key;
+
+    final String regionName = regionNamePart.getString();
+
-    LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
+    final LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
-    ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
-    long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-    long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-    EventID eventId =
+    final ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+    final long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    final long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    final EventID eventId =
-    EventIDHolder clientEvent = new EventIDHolder(eventId);
+    final EventIDHolder clientEvent = new EventIDHolder(eventId);
