GEODE-907: Converted core functionality to use jackson

+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONException;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONObject;
-  public JSONObject execute(final HttpServletRequest request) throws Exception {
+  private final ObjectMapper mapper = new ObjectMapper();
+
+  public ObjectNode tempExecute(final HttpServletRequest request) throws Exception {
-    JSONObject responseJSON = new JSONObject();
-    try {
+    ObjectNode responseJSON = mapper.createObjectNode();
-      JSONObject requestDataJSON = new JSONObject(
-          request.getParameter("pulseData"));
-      String memberName = requestDataJSON.getJSONObject("MemberDetails")
-          .getString("memberName");
+    JsonNode requestDataJSON = mapper.readTree(request.getParameter("pulseData"));
+    String memberName = requestDataJSON.get("MemberDetails").get("memberName").textValue();
-      Cluster.Member clusterMember = cluster.getMember(StringUtils
-          .makeCompliantName(memberName));
-      if (clusterMember != null) {
-        responseJSON.put("memberId", clusterMember.getId());
-        responseJSON.put("name", clusterMember.getName());
-        responseJSON.put("host", clusterMember.getHost());
-        responseJSON.put("hostnameForClients", clusterMember.getHostnameForClients());
-        responseJSON.put("clusterId", cluster.getId());
-        responseJSON.put("clusterName", cluster.getServerName());
-        responseJSON.put("userName", userName);
-        responseJSON.put("loadAverage", clusterMember.getLoadAverage());
-        responseJSON.put("sockets", clusterMember.getTotalFileDescriptorOpen());
-        responseJSON.put("threads", clusterMember.getNumThreads());
-        responseJSON.put("offHeapFreeSize", clusterMember.getOffHeapFreeSize());
-        responseJSON.put("offHeapUsedSize", clusterMember.getOffHeapUsedSize());
-        responseJSON.put("regionsCount", clusterMember.getMemberRegionsList().length);
+    Cluster.Member clusterMember = cluster.getMember(StringUtils
+        .makeCompliantName(memberName));
+    if (clusterMember != null) {
+      responseJSON.put("memberId", clusterMember.getId());
+      responseJSON.put("name", clusterMember.getName());
+      responseJSON.put("host", clusterMember.getHost());
+      responseJSON.put("clusterId", cluster.getId());
+      responseJSON.put("clusterName", cluster.getServerName());
+      responseJSON.put("userName", userName);
+      responseJSON.put("loadAverage", clusterMember.getLoadAverage());
+      responseJSON.put("sockets", clusterMember.getTotalFileDescriptorOpen());
+      responseJSON.put("threads", clusterMember.getNumThreads());
+      responseJSON.put("offHeapFreeSize", clusterMember.getOffHeapFreeSize());
+      responseJSON.put("offHeapUsedSize", clusterMember.getOffHeapUsedSize());
+      responseJSON.put("regionsCount", clusterMember.getMemberRegionsList().length);
-        // Number of member clients
-        if (PulseController.getPulseProductSupport().equalsIgnoreCase(
-            PulseConstants.PRODUCT_NAME_SQLFIRE)){
-          responseJSON.put("numClients", clusterMember.getNumSqlfireClients());
-        }else{
-          responseJSON.put("numClients", clusterMember.getMemberClientsHMap().size());
-        }
-
-        DecimalFormat df2 = new DecimalFormat(
-            PulseConstants.DECIMAL_FORMAT_PATTERN);
-        Long diskUsageVal = clusterMember.getTotalDiskUsage();
-        Double diskUsage = diskUsageVal.doubleValue() / 1024;
-
-        responseJSON.put("diskStorageUsed",
-            Double.valueOf(df2.format(diskUsage)));
-
-        Cluster.Alert[] alertsList = cluster.getAlertsList();
-
-        String status = "Normal";
-
-        for (Cluster.Alert alert : alertsList) {
-          if (clusterMember.getName().equals(alert.getMemberName())) {
-            if (alert.getSeverity() == Cluster.Alert.SEVERE) {
-              status = "Severe";
-              break;
-            } else if (alert.getSeverity() == Cluster.Alert.ERROR) {
-              status = "Error";
-            } else if (alert.getSeverity() == Cluster.Alert.WARNING) {
-              status = "Warning";
-            }
-          }
-        }
-
-        responseJSON.put("status", status);
-
+      // Number of member clients
+      if (PulseController.getPulseProductSupport().equalsIgnoreCase(
+          PulseConstants.PRODUCT_NAME_SQLFIRE)){
+        responseJSON.put("numClients", clusterMember.getNumSqlfireClients());
-        responseJSON.put("errorOnMember", "Member [" + memberName
-            + "] is not available");
+        responseJSON.put("numClients", clusterMember.getMemberClientsHMap().size());
-      // Send json response
-      return responseJSON;
-    } catch (JSONException e) {
-      throw new Exception(e);
+      DecimalFormat df2 = new DecimalFormat(PulseConstants.DECIMAL_FORMAT_PATTERN);
+      Long diskUsageVal = clusterMember.getTotalDiskUsage();
+      Double diskUsage = diskUsageVal.doubleValue() / 1024;
+
+      responseJSON.put("diskStorageUsed", Double.valueOf(df2.format(diskUsage)));
+
+      Cluster.Alert[] alertsList = cluster.getAlertsList();
+
+      String status = "Normal";
+
+      for (Cluster.Alert alert : alertsList) {
+        if (clusterMember.getName().equals(alert.getMemberName())) {
+          if (alert.getSeverity() == Cluster.Alert.SEVERE) {
+            status = "Severe";
+            break;
+          } else if (alert.getSeverity() == Cluster.Alert.ERROR) {
+            status = "Error";
+          } else if (alert.getSeverity() == Cluster.Alert.WARNING) {
+            status = "Warning";
+          }
+        }
+      }
+
+      responseJSON.put("status", status);
+
+    } else {
+      responseJSON.put("errorOnMember", "Member [" + memberName
+          + "] is not available");
+
+    // Send json response
+    return responseJSON;
