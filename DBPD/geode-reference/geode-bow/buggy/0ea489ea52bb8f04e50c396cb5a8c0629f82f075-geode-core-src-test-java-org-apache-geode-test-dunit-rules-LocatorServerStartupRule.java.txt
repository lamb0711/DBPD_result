GEODE-3231: do not use temporary folder as workingdir or log to file by default when using the member starter rules

* do not create a workingDir and sets the user.dir by default for Locator/ServerStarterRule
* do not use a temp folder for all vms workingDir by default when using LocatorServerStarterRule.
* only bounce the vm when changing the workingdir of vms, otherwise, just cleanup the persisted files after each test.

-  private TemporaryFolder temporaryFolder = new SerializableTemporaryFolder();
+  private TemporaryFolder tempWorkingDir;
+  private boolean logFile = false;
+
+  /**
+   * This rule will use a temporary folder to hold all the vm directories instead of using dunit
+   * folder. It will set each VM's working dir to its respective sub-directories.
+   *
+   * use this if you want to examine each member's file system without worrying about it's being
+   * contaminated with DUnitLauncher's log files that exists in each dunit/vm folder such as
+   * locator0View.dat and locator0views.log and other random log files. This will cause the VMs to
+   * be bounced after test is done, because it dynamically changes the user.dir system property.
+   */
+  public LocatorServerStartupRule withTempWorkingDir() {
+    tempWorkingDir = new SerializableTemporaryFolder();
+    return this;
+  }
+
+  public boolean useTempWorkingDir() {
+    return tempWorkingDir != null;
+  }
+
+  /**
+   * all the logs will go into the file. If this is called, a temp directory is used for this rule
+   * instead of dunit folder. It's the same effect as calling .withTempWorkingDir() and withLogFile.
+   */
+  public LocatorServerStartupRule withLogFile() {
+    withTempWorkingDir();
+    this.logFile = true;
+    return this;
+  }
+
-    temporaryFolder.create();
+    if (useTempWorkingDir())
+      tempWorkingDir.create();
-    restoreSystemProperties.after();
-    temporaryFolder.delete();
+    if (useTempWorkingDir())
+      tempWorkingDir.delete();
+    restoreSystemProperties.after();
-    File workingDir = createWorkingDirForMember(name);
-      locatorStarter = new LocatorStarterRule(workingDir);
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        locatorStarter = new LocatorStarterRule(workingDirFile);
+      } else {
+        locatorStarter = new LocatorStarterRule();
+      }
+
+      locatorStarter.withLogFile(logFile);
-    members[index] = new MemberVM(locator, locatorVM);
+    members[index] = new MemberVM(locator, locatorVM, useTempWorkingDir());
-
+  /**
+   * Starts a cache server with given properties
+   */
+  public MemberVM startServerVM(int index, Properties properties, int locatorPort)
+      throws IOException {
+    String name = "server-" + index;
+    properties.setProperty(NAME, name);
+    VM serverVM = getHost(0).getVM(index);
+    Server server = serverVM.invoke(() -> {
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        serverStarter = new ServerStarterRule(workingDirFile);
+      } else {
+        serverStarter = new ServerStarterRule();
+      }
+      serverStarter.withLogFile(logFile);
+      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
+      serverStarter.before();
+      return serverStarter;
+    });
+    members[index] = new MemberVM(server, serverVM, useTempWorkingDir());
+    return members[index];
+  }
+
-    Properties properties = new Properties();
-    return startServerAsJmxManager(index, properties);
+    return startServerAsJmxManager(index, new Properties());
-    File workingDir = createWorkingDirForMember(name);
+
-      serverStarter = new ServerStarterRule(workingDir);
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        serverStarter = new ServerStarterRule(workingDirFile);
+      } else {
+        serverStarter = new ServerStarterRule();
+      }
+      serverStarter.withLogFile(logFile);
-    members[index] = new MemberVM(server, serverVM);
+    members[index] = new MemberVM(server, serverVM, useTempWorkingDir());
-   * Starts a cache server with given properties
-   */
-  public MemberVM startServerVM(int index, Properties properties, int locatorPort)
-      throws IOException {
-    String name = "server-" + index;
-    properties.setProperty(NAME, name);
-
-    File workingDir = createWorkingDirForMember(name);
-    VM serverVM = getHost(0).getVM(index);
-    Server server = serverVM.invoke(() -> {
-      serverStarter = new ServerStarterRule(workingDir);
-      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
-      serverStarter.before();
-      return serverStarter;
-    });
-    members[index] = new MemberVM(server, serverVM);
-    return members[index];
-  }
-
-
-  /**
-  public TemporaryFolder getTempFolder() {
-    return temporaryFolder;
+  public TemporaryFolder getTempWorkingDir() {
+    return tempWorkingDir;
+  }
+
+  public File getWorkingDirRoot() {
+    if (useTempWorkingDir())
+      return tempWorkingDir.getRoot();
+
+    // return the dunit folder
+    return new File(DUnitLauncher.DUNIT_DIR);
-    File workingDir = new File(temporaryFolder.getRoot(), dirName).getAbsoluteFile();
+    File workingDir = new File(tempWorkingDir.getRoot(), dirName).getAbsoluteFile();
-      temporaryFolder.newFolder(dirName);
+      tempWorkingDir.newFolder(dirName);
