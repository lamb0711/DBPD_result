GEODE-6588: Cleanup generics and static analyzer warnings.

-    this.region = (LocalRegion) r;
-    this.regionName = r.getFullPath();
+    region = (LocalRegion) r;
+    regionName = r.getFullPath();
-    this.region = null;
+    region = null;
-    return GetOp.execute(this.pool, this.region, key, callbackArg,
-        this.pool.getPRSingleHopEnabled(), clientEvent);
+    return GetOp.execute(pool, region, key, callbackArg,
+        pool.getPRSingleHopEnabled(), clientEvent);
-    return SizeOp.execute(this.pool, this.regionName);
+    return SizeOp.execute(pool, regionName);
-    if (this.region == null) {
-      return PutOp.execute(this.pool, this.regionName, key, value, deltaBytes, event,
-          Operation.CREATE, false, null, callbackArg, this.pool.getPRSingleHopEnabled());
+    if (region == null) {
+      return PutOp.execute(pool, regionName, key, value, deltaBytes, event,
+          Operation.CREATE, false, null, callbackArg, pool.getPRSingleHopEnabled());
-      return PutOp.execute(this.pool, this.region, key, value, deltaBytes, event, Operation.CREATE,
-          false, null, callbackArg, this.pool.getPRSingleHopEnabled());
+      return PutOp.execute(pool, region, key, value, deltaBytes, event, Operation.CREATE,
+          false, null, callbackArg, pool.getPRSingleHopEnabled());
-        Boolean.valueOf(requireOldValue), expectedOldValue, callbackArg, Boolean.valueOf(isCreate));
+        requireOldValue, expectedOldValue, callbackArg, isCreate);
-    if (!isCreate && this.region.getDataPolicy() == DataPolicy.EMPTY && op.isCreate()
+    if (!isCreate && region.getDataPolicy() == DataPolicy.EMPTY && op.isCreate()
-    if (this.region == null) {
-      return PutOp.execute(this.pool, this.regionName, key, value, deltaBytes, event, operation,
-          requireOldValue, expectedOldValue, callbackArg, this.pool.getPRSingleHopEnabled());
+    if (region == null) {
+      return PutOp.execute(pool, regionName, key, value, deltaBytes, event, operation,
+          requireOldValue, expectedOldValue, callbackArg, pool.getPRSingleHopEnabled());
-      return PutOp.execute(this.pool, this.region, key, value, deltaBytes, event, operation,
-          requireOldValue, expectedOldValue, callbackArg, this.pool.getPRSingleHopEnabled());
+      return PutOp.execute(pool, region, key, value, deltaBytes, event, operation,
+          requireOldValue, expectedOldValue, callbackArg, pool.getPRSingleHopEnabled());
-    PutOp.execute(con, this.pool, this.regionName, key, value, event, callbackArg,
-        this.pool.getPRSingleHopEnabled());
+    PutOp.execute(con, pool, regionName, key, value, event, callbackArg,
+        pool.getPRSingleHopEnabled());
-    return DestroyOp.execute(this.pool, this.region, key, expectedOldValue, operation, event,
-        callbackArg, this.pool.getPRSingleHopEnabled());
+    return DestroyOp.execute(pool, region, key, expectedOldValue, operation, event,
+        callbackArg, pool.getPRSingleHopEnabled());
-    InvalidateOp.execute(this.pool, this.region.getFullPath(), event);
+    InvalidateOp.execute(pool, region.getFullPath(), event);
-    DestroyOp.execute(con, this.pool, this.regionName, key, expectedOldValue, operation, event,
+    DestroyOp.execute(con, pool, regionName, key, expectedOldValue, operation, event,
-    DestroyRegionOp.execute(this.pool, this.regionName, eventId, callbackArg);
+    DestroyRegionOp.execute(pool, regionName, eventId, callbackArg);
-    DestroyRegionOp.execute(con, this.pool, this.regionName, eventId, callbackArg);
+    DestroyRegionOp.execute(con, pool, regionName, eventId, callbackArg);
-    TXCommitMessage tx = CommitOp.execute(this.pool, txId);
-    return tx;
+    return CommitOp.execute(pool, txId);
-    RollbackOp.execute(this.pool, txId);
+    RollbackOp.execute(pool, txId);
-    ClearOp.execute(this.pool, this.regionName, eventId, callbackArg);
+    ClearOp.execute(pool, regionName, eventId, callbackArg);
-    ClearOp.execute(con, this.pool, this.regionName, eventId, callbackArg);
+    ClearOp.execute(con, pool, regionName, eventId, callbackArg);
-    return ContainsKeyOp.execute(this.pool, this.regionName, key, MODE.KEY);
+    return ContainsKeyOp.execute(pool, regionName, key, MODE.KEY);
-    return ContainsKeyOp.execute(this.pool, this.regionName, key, MODE.VALUE_FOR_KEY);
+    return ContainsKeyOp.execute(pool, regionName, key, MODE.VALUE_FOR_KEY);
-    return ContainsKeyOp.execute(this.pool, this.regionName, value, MODE.VALUE);
+    return ContainsKeyOp.execute(pool, regionName, value, MODE.VALUE);
-    return KeySetOp.execute(this.pool, this.regionName);
+    return KeySetOp.execute(pool, regionName);
-      final RegisterInterestTracker rit = this.pool.getRITracker();
-      List result = null;
+      final RegisterInterestTracker rit = pool.getRITracker();
+      List result;
-        rit.addSingleInterest(this.region, key, interestType, policy, isDurable,
+        rit.addSingleInterest(region, key, interestType, policy, isDurable,
-        result = RegisterInterestOp.execute(this.pool, this.regionName, key, interestType, policy,
+        result = RegisterInterestOp.execute(pool, regionName, key, interestType, policy,
-          rit.removeSingleInterest(this.region, key, interestType, isDurable,
+          rit.removeSingleInterest(region, key, interestType, isDurable,
-    RegisterInterestTracker rit = this.pool.getRITracker();
+    RegisterInterestTracker rit = pool.getRITracker();
-      rit.addSingleInterest(this.region, key, interestType, pol, isDurable,
+      rit.addSingleInterest(region, key, interestType, pol, isDurable,
-        rit.removeSingleInterest(this.region, key, interestType, isDurable,
+        rit.removeSingleInterest(region, key, interestType, isDurable,
-    RegisterInterestTracker rit = this.pool.getRITracker();
+    RegisterInterestTracker rit = pool.getRITracker();
-      rit.addInterestList(this.region, keys, pol, isDurable, receiveUpdatesAsInvalidates);
+      rit.addInterestList(region, keys, pol, isDurable, receiveUpdatesAsInvalidates);
-        rit.removeInterestList(this.region, keys, isDurable, receiveUpdatesAsInvalidates);
+        rit.removeInterestList(region, keys, isDurable, receiveUpdatesAsInvalidates);
-    this.pool.getRITracker().removeSingleInterest(this.region, key, interestType, isDurable,
+    pool.getRITracker().removeSingleInterest(region, key, interestType, isDurable,
-    this.pool.getRITracker().removeInterestList(this.region, keys, isDurable,
+    pool.getRITracker().removeInterestList(region, keys, isDurable,
-  public List registerInterestOn(ServerLocation sl, final Object key, final int interestType,
+  private List registerInterestOn(ServerLocation sl, final Object key, final int interestType,
-      return RegisterInterestListOp.executeOn(sl, this.pool, this.regionName, (List) key, policy,
+      return RegisterInterestListOp.executeOn(sl, pool, regionName, (List) key, policy,
-      return RegisterInterestOp.executeOn(sl, this.pool, this.regionName, key, interestType, policy,
+      return RegisterInterestOp.executeOn(sl, pool, regionName, key, interestType, policy,
-   * @param regionDataPolicy the data policy ordinal of the region
-   * @return list of keys
-   */
-  public List registerInterestOn(Connection conn, final Object key, final int interestType,
-      final InterestResultPolicy policy, final boolean isDurable, final byte regionDataPolicy) {
-    return registerInterestOn(conn, key, interestType, policy, isDurable, false, regionDataPolicy);
-  }
-
-  /**
-   * Does a region registerInterest on a server described by the given connection
-   * <p>
-   * Note that this call by-passes the RegisterInterestTracker.
-   *
-   * @param conn the connection to do the register interest on.
-   * @param key describes what we are interested in
-   * @param interestType the {@link InterestType} for this registration
-   * @param policy the interest result policy for this registration
-   * @param isDurable true if this registration is durable
-  public List registerInterestOn(Connection conn, final Object key, final int interestType,
+  List registerInterestOn(Connection conn, final Object key, final int interestType,
-      return RegisterInterestListOp.executeOn(conn, this.pool, this.regionName, (List) key, policy,
+      return RegisterInterestListOp.executeOn(conn, pool, regionName, (List) key, policy,
-      return RegisterInterestOp.executeOn(conn, this.pool, this.regionName, key, interestType,
+      return RegisterInterestOp.executeOn(conn, pool, regionName, key, interestType,
-    final RegisterInterestTracker rit = this.pool.getRITracker();
-    List result = null;
+    final RegisterInterestTracker rit = pool.getRITracker();
+    List result;
-      rit.addInterestList(this.region, keys, policy, isDurable, receiveUpdatesAsInvalidates);
-      result = RegisterInterestListOp.execute(this.pool, this.regionName, keys, policy, isDurable,
+      rit.addInterestList(region, keys, policy, isDurable, receiveUpdatesAsInvalidates);
+      result = RegisterInterestListOp.execute(pool, regionName, keys, policy, isDurable,
-        rit.removeInterestList(this.region, keys, isDurable, receiveUpdatesAsInvalidates);
+        rit.removeInterestList(region, keys, isDurable, receiveUpdatesAsInvalidates);
-      RegisterInterestTracker rit = this.pool.getRITracker();
-      boolean removed = rit.removeSingleInterest(this.region, key, interestType, false, false)
-          || rit.removeSingleInterest(this.region, key, interestType, true, false)
-          || rit.removeSingleInterest(this.region, key, interestType, false, true)
-          || rit.removeSingleInterest(this.region, key, interestType, true, true);
+      RegisterInterestTracker rit = pool.getRITracker();
+      boolean removed = rit.removeSingleInterest(region, key, interestType, false, false)
+          || rit.removeSingleInterest(region, key, interestType, true, false)
+          || rit.removeSingleInterest(region, key, interestType, false, true)
+          || rit.removeSingleInterest(region, key, interestType, true, true);
-        UnregisterInterestOp.execute(this.pool, this.regionName, key, interestType, isClosing,
+        UnregisterInterestOp.execute(pool, regionName, key, interestType, isClosing,
-    RegisterInterestTracker rit = this.pool.getRITracker();
-    boolean removed = rit.removeInterestList(this.region, keys, false, true)
-        || rit.removeInterestList(this.region, keys, false, false)
-        || rit.removeInterestList(this.region, keys, true, true)
-        || rit.removeInterestList(this.region, keys, true, false);
+    RegisterInterestTracker rit = pool.getRITracker();
+    boolean removed = rit.removeInterestList(region, keys, false, true)
+        || rit.removeInterestList(region, keys, false, false)
+        || rit.removeInterestList(region, keys, true, true)
+        || rit.removeInterestList(region, keys, true, false);
-      UnregisterInterestListOp.execute(this.pool, this.regionName, keys, isClosing, keepAlive);
+      UnregisterInterestListOp.execute(pool, regionName, keys, isClosing, keepAlive);
-    return this.pool.getRITracker().getInterestList(this.regionName, interestType);
+    return pool.getRITracker().getInterestList(regionName, interestType);
-    if (this.pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
-      return PutAllOp.execute(this.pool, this.region, map, eventId, skipCallbacks,
-          this.pool.getRetryAttempts(), callbackArg);
+    if (pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
+      return PutAllOp.execute(pool, region, map, eventId, skipCallbacks,
+          pool.getRetryAttempts(), callbackArg);
-      return PutAllOp.execute(this.pool, this.region, map, eventId, skipCallbacks, false,
+      return PutAllOp.execute(pool, region, map, eventId, skipCallbacks, false,
-    if (this.pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
-      return RemoveAllOp.execute(this.pool, this.region, keys, eventId,
-          this.pool.getRetryAttempts(), callbackArg);
+    if (pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
+      return RemoveAllOp.execute(pool, region, keys, eventId,
+          pool.getRetryAttempts(), callbackArg);
-      return RemoveAllOp.execute(this.pool, this.region, keys, eventId, false, callbackArg);
+      return RemoveAllOp.execute(pool, region, keys, eventId, false, callbackArg);
-    if (this.pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
+    if (pool.getPRSingleHopEnabled() && (txID == TXManagerImpl.NOTX)) {
-          GetAllOp.execute(this.pool, this.region, keys, this.pool.getRetryAttempts(), callback);
+          GetAllOp.execute(pool, region, keys, pool.getRetryAttempts(), callback);
-      result = GetAllOp.execute(this.pool, this.regionName, keys, callback);
+      result = GetAllOp.execute(pool, regionName, keys, callback);
-                "%s: Caught the following exception attempting to get value for key=%s",
-                new Object[] {value, key}),
+                "%s: Caught the following exception attempting to get value for key=%s", value,
+                key),
-    this.pool.getRITracker().unregisterRegion(this, keepalive);
+    pool.getRITracker().unregisterRegion(this, keepalive);
-    return this.regionName;
+    return regionName;
-    return this.region;
+    return region;
-    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, Integer.valueOf(1), function,
-        serverRegionExecutor, resultCollector, Byte.valueOf(hasResult));
+    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, 1, function,
+        serverRegionExecutor, resultCollector, hasResult);
-    if (this.pool.getPRSingleHopEnabled() && !inTransaction) {
+    if (pool.getPRSingleHopEnabled() && !inTransaction) {
-              cms.groupByServerToAllBuckets(this.region, function.optimizeForWrite());
+              cms.groupByServerToAllBuckets(region, function.optimizeForWrite());
-            ExecuteRegionFunctionOp.execute(this.pool, rgnName, function, serverRegionExecutor,
+            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region, function,
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-            ExecuteRegionFunctionOp.execute(this.pool, rgnName, function, serverRegionExecutor,
+            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region, function,
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-        ExecuteRegionFunctionOp.execute(this.pool, rgnName, function, serverRegionExecutor,
+        ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-      ExecuteRegionFunctionOp.execute(this.pool, rgnName, function, serverRegionExecutor,
+      ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, Integer.valueOf(2), functionId,
-        serverRegionExecutor, resultCollector, Byte.valueOf(hasResult), Boolean.valueOf(isHA),
-        Boolean.valueOf(optimizeForWrite));
+    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, 2, functionId,
+        serverRegionExecutor, resultCollector, hasResult, isHA,
+        optimizeForWrite);
-    if (this.pool.getPRSingleHopEnabled()) {
-      ClientMetadataService cms = this.region.getCache().getClientMetadataService();
+    if (pool.getPRSingleHopEnabled()) {
+      ClientMetadataService cms = region.getCache().getClientMetadataService();
-              cms.groupByServerToAllBuckets(this.region, optimizeForWrite);
+              cms.groupByServerToAllBuckets(region, optimizeForWrite);
-            ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId, serverRegionExecutor,
+            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-            cms.scheduleGetPRMetaData(this.region, false);
+            cms.scheduleGetPRMetaData(region, false);
-            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region, functionId,
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-            ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId, serverRegionExecutor,
+            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region, functionId,
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-        ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId, serverRegionExecutor,
+        ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-      ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId, serverRegionExecutor,
+      ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, Integer.valueOf(3), function,
-        serverRegionExecutor, Byte.valueOf(hasResult));
-    ExecuteRegionFunctionNoAckOp.execute(this.pool, rgnName, function, serverRegionExecutor,
+    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, 3, function,
+        serverRegionExecutor, hasResult);
+    ExecuteRegionFunctionNoAckOp.execute(pool, rgnName, function, serverRegionExecutor,
-    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, Integer.valueOf(4), functionId,
-        serverRegionExecutor, Byte.valueOf(hasResult));
-    ExecuteRegionFunctionNoAckOp.execute(this.pool, rgnName, functionId, serverRegionExecutor,
+    recordTXOperation(ServerRegionOperation.EXECUTE_FUNCTION, null, 4, functionId,
+        serverRegionExecutor, hasResult);
+    ExecuteRegionFunctionNoAckOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-    return (byte[]) GetFunctionAttributeOp.execute(this.pool, functionId);
+    return (byte[]) GetFunctionAttributeOp.execute(pool, functionId);
