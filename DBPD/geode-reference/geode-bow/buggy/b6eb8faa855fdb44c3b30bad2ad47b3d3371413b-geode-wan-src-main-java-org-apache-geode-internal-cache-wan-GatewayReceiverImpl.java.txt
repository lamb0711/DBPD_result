[GEODE-5591] If there is a BindException we should always throw. (#2351)

* Replace start() logic with something more deterministic and fix test.
* Iterate over possible ports instead of picking random ones.
* Check for an exception of the appropriate type and replace old
  assertion logic.
* Refactor testing an exception was thrown
* Fix expected message to match exception.

Co-Authored-By: Patrick Rhomberg <prhomberg@pivotal.io>
Co-Authored-By: Sean Goller <sgoller@pivotal.io>

-import java.net.BindException;
-import java.net.SocketException;
-import org.apache.geode.internal.AvailablePort;
-    boolean started = false;
-    this.port = getPortToStart();
-    while (!started && this.port != -1) {
-      receiver.setPort(this.port);
+
+    for (int port = this.startPort; port <= this.endPort; port++) {
+      receiver.setPort(port);
-        started = true;
-      } catch (BindException be) {
-        if (be.getCause() != null
-            && be.getCause().getMessage().contains("assign requested address")) {
-          throw new GatewayReceiverException(
-              LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1
-                  .toLocalizedString(new Object[] {bindAdd, this.port}));
-        }
-        // ignore as this port might have been used by other threads.
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayReceiver_Address_Already_In_Use,
-            this.port));
-        this.port = getPortToStart();
-      } catch (SocketException se) {
-        if (se.getMessage().contains("Address already in use")) {
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.GatewayReceiver_Address_Already_In_Use, this.port));
-          this.port = getPortToStart();
-
-        } else {
-          throw se;
+        this.port = port;
+        break;
+      } catch (IOException e) {
+        if (port == this.endPort) {
+          throw new GatewayReceiverException("No available free port found in the given range (" +
+              this.startPort +
+              "-" +
+              this.endPort +
+              ")", e);
-    if (!started) {
-      throw new IllegalStateException("No available free port found in the given range.");
-    }
-  private int getPortToStart() {
-    // choose a random port from the given port range
-    int rPort;
-    if (this.startPort == this.endPort) {
-      rPort = this.startPort;
-    } else {
-      rPort = AvailablePort.getRandomAvailablePortInRange(this.startPort, this.endPort,
-          AvailablePort.SOCKET);
-    }
-    return rPort;
-  }
-
