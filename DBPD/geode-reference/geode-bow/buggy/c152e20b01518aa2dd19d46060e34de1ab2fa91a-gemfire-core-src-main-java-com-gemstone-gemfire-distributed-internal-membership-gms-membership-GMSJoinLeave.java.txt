GEODE-77: moving failure detection sockets into the membership view

+import java.util.HashMap;
-import java.util.concurrent.ConcurrentHashMap;
-      logger.info("Probably coordinator is still {} - waiting for a join-response");
+      logger.info("Probable coordinator is still {} - waiting for a join-response", coord);
-      JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, services.getAuthenticator().getCredentials(coord));
-      // add server socket port in the join request
-      if (services.getHealthMonitor().getSocketInfo().get(localAddress) != null) {
-        req.setSocketPort(services.getHealthMonitor().getSocketInfo().get(localAddress).getPort());
-      }
+      int port = services.getHealthMonitor().getFailureDetectionPort();
+      JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, services.getAuthenticator().getCredentials(coord), port);
-          services.getHealthMonitor().installSocketInfo(response.getCurrentView().getMembers(), response.getPortsForMembers());
-      // add socket ports of all members to join response
-      List<Integer> portsForMembers = new ArrayList<Integer>(currentView.size());
-      Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();
-      for (InternalDistributedMember mbr : currentView.getMembers()) {
-        InetSocketAddress addr = socketInfo.get(mbr);
-        if (addr != null) {
-          portsForMembers.add(Integer.valueOf(addr.getPort()));
-        } else {
-          portsForMembers.add(Integer.valueOf(-1));
-        }
-      }
-      m.setPortsForMembers(portsForMembers);
-
+        newView.setFailureDetectionPort(this.localAddress, services.getHealthMonitor().getFailureDetectionPort());
-  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView, List<Integer> portsForMembers) {
+  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView) {
-      response.setPortsForMembers(portsForMembers);
-  boolean prepareView(NetView view, List<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
-    return sendView(view, newMembers, true, this.prepareProcessor, requests);
+  boolean prepareView(NetView view, List<InternalDistributedMember> newMembers) {
+    return sendView(view, newMembers, true, this.prepareProcessor);
-  void sendView(NetView view, List<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
-    sendView(view, newMembers, false, this.viewProcessor, requests);
+  void sendView(NetView view, List<InternalDistributedMember> newMembers) {
+    sendView(view, newMembers, false, this.viewProcessor);
-  /**
-   * Build a list of socket ports for messages, e.g. InstallViewMessage, JoinResponseMessage
-   * @param view
-   * @param requests
-   * @return
-   */
-  private void addPorts(NetView view, List<DistributionMessage> requests, List<Integer> portsForMembers) {
-    Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();
-    Map<InternalDistributedMember, Integer> portMap = new ConcurrentHashMap<InternalDistributedMember, Integer>();
-    for (DistributionMessage req : requests) {
-      if (req.getDSFID() == JOIN_REQUEST) {
-        JoinRequestMessage joinReq = (JoinRequestMessage) req;
-        portMap.put(joinReq.getMemberID(), Integer.valueOf(joinReq.getSocketPort()));
-      }
-    }
-    for (InternalDistributedMember mbr : view.getMembers()) {
-      InetSocketAddress addr = socketInfo.get(mbr);
-      if (addr != null) {
-        portsForMembers.add(Integer.valueOf(addr.getPort()));
-      } else {
-        Integer port = portMap.get(mbr);
-        if (port != null) {
-          portsForMembers.add(port);
-        } else {
-          portsForMembers.add(Integer.valueOf(-1));
-        }
-      }
-    }    
-  }
-  
-  boolean sendView(NetView view, List<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp,
-      List<DistributionMessage> requests) {
+  boolean sendView(NetView view, List<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp) {
-    // add socket ports of all members to InstallViewMessage
-    List<Integer> portsForMembers = new ArrayList<Integer>(view.size());
-    if (requests != null) {
-      addPorts(view, requests, portsForMembers);
-      msg.setPortsForMembers(portsForMembers);
-    }
-      if (requests != null) {
-        services.getHealthMonitor().installSocketInfo(view.getMembers(), portsForMembers);
-      }
-        addPorts(view, requests, newPorts);
-        sendJoinResponses(newMembers, view, portsForMembers);
+        sendJoinResponses(newMembers, view);
-        if (!m.getPortsForMembers().isEmpty()) {
-          services.getHealthMonitor().installSocketInfo(view.getMembers(), m.getPortsForMembers());
-        }
-    logger.info("received new view: {}\nold view is: {}", newView, currentView);
-
+      logger.info("received new view: {}\nold view is: {}", newView, currentView);
+
+            me.setSplitBrainEnabled(mbr.getNetMember().splitBrainEnabled());
-        List<Integer> ports = new ArrayList<>(v.size());
-        for (InternalDistributedMember mbr: v.getMembers()) {
-          InetSocketAddress addr = services.getHealthMonitor().getSocketInfo().get(mbr);
-          int port = addr==null? -1 : addr.getPort();
-          ports.add(Integer.valueOf(port));
-        }
-        msg.setPortsForMembers(ports);
-              initialRemovals, Collections.<DistributionMessage>emptyList());
+              initialRemovals);
-      List<InternalDistributedMember> joinReqs = new ArrayList<>();
-      Set<InternalDistributedMember> leaveReqs = new HashSet<>();
-      List<InternalDistributedMember> removalReqs = new ArrayList<>();
-      List<String> removalReasons = new ArrayList<String>();
+      List<InternalDistributedMember> joinReqs = new ArrayList<>(10);
+      Map<InternalDistributedMember, Integer> joinPorts = new HashMap<>(10);
+      Set<InternalDistributedMember> leaveReqs = new HashSet<>(10);
+      List<InternalDistributedMember> removalReqs = new ArrayList<>(10);
+      List<String> removalReasons = new ArrayList<String>(10);
-          mbr = ((JoinRequestMessage) msg).getMemberID();
+          JoinRequestMessage jmsg = (JoinRequestMessage)msg; 
+          mbr = jmsg.getMemberID();
+          int port = jmsg.getFailureDetectionPort();
+            joinPorts.put(mbr, port);
-          mbrs = new ArrayList<InternalDistributedMember>(joinReqs.size());
+          mbrs = new ArrayList<InternalDistributedMember>(joinReqs);
+          mbrs.addAll(joinReqs);
-        mbrs.addAll(joinReqs);
+        int size = joinReqs.size();
+        for (InternalDistributedMember mbr: joinReqs) {
+          if (mbrs.contains(mbr)) {
+            newView.setFailureDetectionPort(mbr, joinPorts.get(mbr));
+          }
+        }
+        if (currentView != null) {
+          int[] ports = currentView.getFailureDetectionPorts();
+          if (ports != null) {
+            int idx = 0;
+            int portsSize = ports.length;
+            for (InternalDistributedMember mbr: currentView.getMembers()) {
+              if (newView.contains(mbr)) {
+                // unit tests create views w/o failure detection ports, so we must check the length
+                // of the array
+                if (idx < portsSize) {
+                  newView.setFailureDetectionPort(mbr, ports[idx]);
+                } else {
+                  newView.setFailureDetectionPort(mbr, -1);
+                }
+              }
+              idx += 1;
+            }
+          }
+        }
+        if (logger.isDebugEnabled()) {
+          logger.debug("Established failure detection ports for new view: {}", newView.getFailureDetectionPorts());
+        }
-      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers(), requests);
+      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers());
-        Set<InternalDistributedMember> removalReqs, List<DistributionMessage> requests) {
+        Set<InternalDistributedMember> removalReqs) {
-        prepared = prepareView(newView, joinReqs, requests);
+        prepared = prepareView(newView, joinReqs);
-          List<InternalDistributedMember> newMembers = prepareProcessor.getConflictingView().getNewMembers();
+          List<InternalDistributedMember> newMembers = conflictingView.getNewMembers();
-              InetSocketAddress addr = services.getHealthMonitor().getSocketInfo().get(mbr);
-              // TODO: re-factor health monitor ports to be in the NetView so we don't need
-              // to create a fake JoinRequestMessage here
-              int port = addr==null? -1 : addr.getPort();
-              JoinRequestMessage msg = new JoinRequestMessage(localAddress, mbr, null);
-              msg.setSocketPort(port);
-              requests.add(msg);
+              int port = conflictingView.getFailureDetectionPort(mbr);
+              JoinRequestMessage msg = new JoinRequestMessage(localAddress, mbr, null, port);
+              newView.setFailureDetectionPort(mbr, port);
-      sendView(newView, joinReqs, requests);
+      sendView(newView, joinReqs);
