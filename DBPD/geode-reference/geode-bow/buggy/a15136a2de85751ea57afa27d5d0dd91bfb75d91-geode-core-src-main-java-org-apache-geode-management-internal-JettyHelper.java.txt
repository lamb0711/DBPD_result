GEODE-6283: have the management rest controller call the internal management service

* GEODE-6283: have the management rest controller call the internal cluster management service to actually create the region

* inject cluster management service to the rest controller
* have the controller produce json string for response
* refactor the controller exception handler to always send back json string

-import java.util.Properties;
+import java.util.Arrays;
+import org.apache.commons.lang3.tuple.Pair;
-import org.apache.geode.internal.security.SecurityService;
-  private static final String GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM = "org.apache.geode.sslConfig";
+  public static final String GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM = "org.apache.geode.sslConfig";
+  public static final String CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM =
+      "org.apache.geode.sslConfig";
-    jettyServer.setHandler(new HandlerCollection());
+    jettyServer.setHandler(new HandlerCollection(true));
-  public static Server addWebApplication(final Server jetty, final String webAppContext,
-      final String warFilePath, SecurityService securityService, Properties sslConfig) {
+  public static WebAppContext addWebApplication(final Server jetty, final String webAppContext,
+      final String warFilePath,
+      Pair<String, Object>... attributeNameValuePairs) {
-    webapp.setAttribute(SECURITY_SERVICE_SERVLET_CONTEXT_PARAM, securityService);
-    // This is only required for Pulse because in embedded mode, with SSL enabled, Pulse needs to
-    // know how to make SSL RMI connections.
-    webapp.setAttribute(GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM, sslConfig);
+    if (attributeNameValuePairs != null) {
+      Arrays.stream(attributeNameValuePairs)
+          .forEach(p -> webapp.setAttribute(p.getKey(), p.getValue()));
+    }
-
-
-    return jetty;
+    // if we are adding this webapp after the jetty server has already started, we will need to
+    // manually start the webapp.
+    if (jetty.isStarted()) {
+      try {
+        webapp.start();
+      } catch (Exception e) {
+        logger.error(e.getMessage(), e);
+      }
+    }
+    return webapp;
