Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A generic comparator class which compares two Object/StructImpl according to
- * their sort criterion specified in order by clause
+ * A generic comparator class which compares two Object/StructImpl according to their sort criterion
+ * specified in order by clause
-  public OrderByComparator(List<CompiledSortCriterion> orderByAttrs,
-      ObjectType objType, ExecutionContext context) {
+  public OrderByComparator(List<CompiledSortCriterion> orderByAttrs, ObjectType objType,
+      ExecutionContext context) {
-   * Yogesh : This methods evaluates sort criteria and returns a ArrayList of
-   * Object[] arrays of evaluated criteria
+   * Yogesh : This methods evaluates sort criteria and returns a ArrayList of Object[] arrays of
+   * evaluated criteria
-   * Compares its two arguments for order. Returns a negative integer, zero, or
-   * a positive integer as the first argument is less than, equal to, or greater
-   * than the second.
+   * Compares its two arguments for order. Returns a negative integer, zero, or a positive integer
+   * as the first argument is less than, equal to, or greater than the second.
-   * @param obj1
-   *          the first object to be compared.
-   * @param obj2
-   *          the second object to be compared.
-   * @return a negative integer, zero, or a positive integer as the first
-   *         argument is less than, equal to, or greater than the second.
-   * @throws ClassCastException
-   *           if the arguments' types prevent them from being compared by this
-   *           Comparator.
+   * @param obj1 the first object to be compared.
+   * @param obj2 the second object to be compared.
+   * @return a negative integer, zero, or a positive integer as the first argument is less than,
+   *         equal to, or greater than the second.
+   * @throws ClassCastException if the arguments' types prevent them from being compared by this
+   *         Comparator.
-        Support
-            .assertionFailed("Error Occured due to improper sort criteria evaluation ");
+        Support.assertionFailed("Error Occured due to improper sort criteria evaluation ");
-          } else if (arr1[0] == QueryService.UNDEFINED
-              || arr2[0] == QueryService.UNDEFINED) {
+          } else if (arr1[0] == QueryService.UNDEFINED || arr2[0] == QueryService.UNDEFINED) {
-              double diff = ((Number) arr1[0]).doubleValue()
-                  - ((Number) arr2[0]).doubleValue();
+              double diff = ((Number) arr1[0]).doubleValue() - ((Number) arr2[0]).doubleValue();
-              } else if (arr2[0] instanceof PdxString
-                  && arr1[0] instanceof String) {
+              } else if (arr2[0] instanceof PdxString && arr1[0] instanceof String) {
-            } else if (o1 == QueryService.UNDEFINED
-                || o2 == QueryService.UNDEFINED) {
+            } else if (o1 == QueryService.UNDEFINED || o2 == QueryService.UNDEFINED) {
-                double diff = ((Number) o1).doubleValue()
-                    - ((Number) o2).doubleValue();
+                double diff = ((Number) o1).doubleValue() - ((Number) o2).doubleValue();
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException {
