This closes #220

GEODE-11: Added exception handling to lucene gfsh commands

Added exception handling to lucene search and describe gfsh commands to handle region not found, index not found and invalid query string exceptions.

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

-import java.io.IOException;
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-    final String[] groups = {};
-    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(describeIndexFunction, groups, indexInfo);
+    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(describeIndexFunction, new String[] {}, indexInfo);
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize)
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize,
+
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY,
+      mandatory = false,
+      unspecifiedDefaultValue = "false",
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly)
-      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit);
+      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
-      return displayResults(pageSize);
+      return displayResults(pageSize, keysOnly);
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-  private Result displayResults(int pageSize) throws IOException {
+  private Result displayResults(int pageSize, boolean keysOnly) throws Exception {
-        CommandResult commandResult = (CommandResult) getResults(fromIndex, toIndex);
+        CommandResult commandResult = (CommandResult) getResults(fromIndex, toIndex, keysOnly);
-  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws CommandResultException {
+  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws Exception {
-    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(searchIndexFunction, groups, queryInfo);
+    final ResultCollector<?, ?> rc = this.executeSearch(queryInfo);
-  private Result getResults(int fromIndex, int toIndex){
+  private Result getResults(int fromIndex, int toIndex, boolean keysonly) throws Exception {
-      data.accumulate("key", searchResults.get(i).getKey());
-      data.accumulate("value", searchResults.get(i).getValue());
-      data.accumulate("score", searchResults.get(i).getScore());
+      if (!searchResults.get(i).getExeptionFlag()) {
+        data.accumulate("key", searchResults.get(i).getKey());
+        if (!keysonly) {
+          data.accumulate("value", searchResults.get(i).getValue());
+          data.accumulate("score", searchResults.get(i).getScore());
+        }
+      }
+      else {
+        throw new Exception(searchResults.get(i).getExceptionMessage());
+      }
-  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[]groups, final LuceneIndexInfo indexInfo) throws CommandResultException {
-    final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function,
+                                                          String[] groups,
+                                                          final LuceneIndexInfo indexInfo) throws Exception
+  {
+    final Set<DistributedMember> targetMembers;
+    if (function != createIndexFunction) {
+      targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(), indexInfo.getRegionPath());
+      if (targetMembers.isEmpty()) {
+        throw new Exception("Region not found.");
+      }
+    }
+    else {
+      targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+    }
-  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[]groups, final LuceneQueryInfo queryInfo) throws CommandResultException {
-    final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(groups, null);
-    return CliUtil.executeFunction(function, queryInfo, targetMembers);
+  protected ResultCollector<?, ?> executeSearch(final LuceneQueryInfo queryInfo) throws Exception {
+    final Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),queryInfo.getRegionPath());
+    if (targetMembers.isEmpty())
+      throw new Exception("Region not found.");
+    return CliUtil.executeFunction(searchIndexFunction, queryInfo, targetMembers);
-}
+}
