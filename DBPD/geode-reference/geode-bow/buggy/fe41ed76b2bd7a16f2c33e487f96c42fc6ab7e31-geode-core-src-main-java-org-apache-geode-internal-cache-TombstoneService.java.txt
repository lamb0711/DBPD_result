GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Queue;
+import java.util.Set;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.Predicate;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.logging.log4j.Logger;
-
-import java.util.*;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.Predicate;
- * 
-      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "tombstone-timeout", 600000L).longValue();
+      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "tombstone-timeout", 600000L);
-  public static TombstoneService initialize(GemFireCacheImpl cache) {
-    TombstoneService instance = new TombstoneService(cache);
-    // cache.getResourceManager().addResourceListener(instance); experimental
-    return instance;
+  public static TombstoneService initialize(InternalCache cache) {
+    return new TombstoneService(cache);
-  private TombstoneService(GemFireCacheImpl cache) {
+  private TombstoneService(InternalCache cache) {
-
-   * 
-   * @param r
-          if (maxReclaimedRV != null && t.getRegionVersion() <= maxReclaimedRV.longValue()) {
+          if (maxReclaimedRV != null && t.getRegionVersion() <= maxReclaimedRV) {
-   * @throws InterruptedException
-      } catch (InterruptedException e) {
+      } catch (InterruptedException ignore) {
-        } catch (CancelException e) {
+        } catch (CancelException ignore) {
-        } catch (InterruptedException e) {
+        } catch (InterruptedException ignore) {
-      long start = now;
-        long elapsed = getNow() - start;
+        long elapsed = getNow() - now;
-            } catch (CancelException e) {
+            } catch (CancelException ignore) {
