GEODE-2686: Remove JarClassLoader

 - Remove JarClassLoader
 - Replace ClassPathLoader's collection of JarClassLoaders with a single URLClassLoader
 - Change naming scheme for deployed jars from 'vf.gf#myJar.jar#1' to 'myJar.v1.jar'

+import java.util.Objects;
+import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.JarClassLoader;
+import org.apache.geode.internal.DeployedJar;
-   * @throws IOException
-   * @throws ClassNotFoundException
-    if (response == null)
+    if (response == null) {
+    }
-    final JarDeployer jarDeployer = new JarDeployer(
-        ((GemFireCacheImpl) cache).getDistributedSystem().getConfig().getDeployWorkingDir());
-
-    /******
-     * Un-deploy the existing jars, deployed during cache creation, do not delete anything
-     */
-
-      JarClassLoader[] jarClassLoaders = jarDeployer.deploy(jarFileNames, jarBytes);
-      for (int i = 0; i < jarFileNames.length; i++) {
-        if (jarClassLoaders[i] != null) {
-          logger.info("Deployed " + (jarClassLoaders[i].getFileCanonicalPath()));
-        }
-      }
+      List<DeployedJar> deployedJars =
+          ClassPathLoader.getLatest().getJarDeployer().deploy(jarFileNames, jarBytes);
+
+      deployedJars.stream().filter(Objects::nonNull)
+          .forEach((jar) -> logger.info("Deployed " + (jar.getFile().getAbsolutePath())));
+    // TODO: Jared - Does this need to actually undeploy extra jars like the javadoc says?
-   * 
+   *
-    if (response == null || response.getRequestedConfiguration().isEmpty())
+    if (response == null || response.getRequestedConfiguration().isEmpty()) {
+    }
-   * 
+   *
-    if (response == null || response.getRequestedConfiguration().isEmpty())
+    if (response == null || response.getRequestedConfiguration().isEmpty()) {
+    }
-   * @throws ClusterConfigurationNotAvailableException
-   * @throws UnknownHostException
