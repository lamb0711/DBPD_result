GEODE-4771: Changes requested by reviewers.

+    ReflectionBasedAutoSerializer autoSerializer;
+    CacheCreation cache = getCacheCreation(true);
+    InfoResultData ird = ResultBuilder.createInfoResultData();
-    try {
-      ReflectionBasedAutoSerializer autoSerializer;
-      CacheCreation cache = getCacheCreation(true);
-      InfoResultData ird = ResultBuilder.createInfoResultData();
-
-      if (!getAllNormalMembers().isEmpty()) {
-        ird.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
-      }
-
-      // Set persistent and the disk-store
-      if (diskStore != null) {
-        cache.setPdxPersistent(true);
-        ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
-
-        if (!diskStore.equals("")) {
-          cache.setPdxDiskStore(diskStore);
-          ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + cache.getPdxDiskStore());
-        } else {
-          ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + "DEFAULT");
-        }
-      } else {
-        cache.setPdxPersistent(CacheConfig.DEFAULT_PDX_PERSISTENT);
-        ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
-      }
-
-      // Set read-serialized
-      if (readSerialized != null) {
-        cache.setPdxReadSerialized(readSerialized);
-      } else {
-        cache.setPdxReadSerialized(CacheConfig.DEFAULT_PDX_READ_SERIALIZED);
-      }
-
-      ird.addLine(
-          CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
-
-      // Set ignoreUnreadFields
-      if (ignoreUnreadFields != null) {
-        cache.setPdxIgnoreUnreadFields(ignoreUnreadFields);
-      } else {
-        cache.setPdxIgnoreUnreadFields(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS);
-      }
-
-      ird.addLine(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = "
-          + cache.getPdxIgnoreUnreadFields());
-
-      // Auto Serializer Configuration
-      if (portableClassesPatterns != null) {
-        autoSerializer = createReflectionBasedAutoSerializer(true, portableClassesPatterns);
-        cache.setPdxSerializer(autoSerializer);
-        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-      }
-
-      if (nonPortableClassesPatterns != null) {
-        autoSerializer = createReflectionBasedAutoSerializer(false, nonPortableClassesPatterns);
-        cache.setPdxSerializer(autoSerializer);
-        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
-      }
-
-      XmlEntity xmlEntity = createXmlEntity(cache);
-      result = ResultBuilder.buildResult(ird);
-      persistClusterConfiguration(result,
-          () -> getSharedConfiguration().addXmlEntity(xmlEntity, null));
-    } catch (Exception e) {
-      return ResultBuilder.createGemFireErrorResult(e.getMessage());
+    if (!getAllNormalMembers().isEmpty()) {
+      ird.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
+    // Set persistent and the disk-store
+    if (diskStore != null) {
+      cache.setPdxPersistent(true);
+      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
+
+      if (!diskStore.equals("")) {
+        cache.setPdxDiskStore(diskStore);
+        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + cache.getPdxDiskStore());
+      } else {
+        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + "DEFAULT");
+      }
+    } else {
+      cache.setPdxPersistent(CacheConfig.DEFAULT_PDX_PERSISTENT);
+      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
+    }
+
+    // Set read-serialized
+    if (readSerialized != null) {
+      cache.setPdxReadSerialized(readSerialized);
+    } else {
+      cache.setPdxReadSerialized(CacheConfig.DEFAULT_PDX_READ_SERIALIZED);
+    }
+
+    ird.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
+
+    // Set ignoreUnreadFields
+    if (ignoreUnreadFields != null) {
+      cache.setPdxIgnoreUnreadFields(ignoreUnreadFields);
+    } else {
+      cache.setPdxIgnoreUnreadFields(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS);
+    }
+
+    ird.addLine(
+        CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + cache.getPdxIgnoreUnreadFields());
+
+    // Auto Serializer Configuration
+    if (portableClassesPatterns != null) {
+      autoSerializer = createReflectionBasedAutoSerializer(true, portableClassesPatterns);
+      cache.setPdxSerializer(autoSerializer);
+      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+      ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
+    }
+
+    if (nonPortableClassesPatterns != null) {
+      autoSerializer = createReflectionBasedAutoSerializer(false, nonPortableClassesPatterns);
+      cache.setPdxSerializer(autoSerializer);
+      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+      ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
+    }
+
+    XmlEntity xmlEntity = createXmlEntity(cache);
+    result = ResultBuilder.buildResult(ird);
+    persistClusterConfiguration(result,
+        () -> getSharedConfiguration().addXmlEntity(xmlEntity, null));
-      Object portableClassesPatterns =
-          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES);
-      Object nonPortableClassesPatterns =
-          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES);
+      String[] portableClassesPatterns = (String[]) parseResult
+          .getParamValue(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES);
+      String[] nonPortableClassesPatterns =
+          (String[]) parseResult.getParamValue(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES);
-      if ((nonPortableClassesPatterns != null && ((String[]) nonPortableClassesPatterns).length > 0)
-          && (portableClassesPatterns != null && ((String[]) portableClassesPatterns).length > 0)) {
-
+      if ((nonPortableClassesPatterns != null && nonPortableClassesPatterns.length > 0)
+          && (portableClassesPatterns != null && portableClassesPatterns.length > 0)) {
