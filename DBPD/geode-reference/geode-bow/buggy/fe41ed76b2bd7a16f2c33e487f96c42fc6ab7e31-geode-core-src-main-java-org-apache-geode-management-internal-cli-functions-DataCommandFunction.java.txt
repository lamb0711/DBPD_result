GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.Cache;
+import org.apache.geode.internal.cache.InternalCache;
+
-
-  @Override
+  @Override
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
+  private InternalCache getCache() {
+    return (InternalCache) CacheFactory.getAnyInstance();
+  }
-
-
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-          // jsonObject.put(fields[i], value.getClass().getCanonicalName());
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-      // boolean doGet = (Boolean.TRUE.equals(loadOnCacheMiss) &&
-      // region.getAttributes().getCacheLoader() != null);
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-
-  // Copied from RegionUtil of old Gfsh
-  public static List getAllRegionPaths(Cache cache, boolean recursive) {
+  public static List getAllRegionPaths(InternalCache cache, boolean recursive) {
-
-    /*
-     * private int getLimit(CompiledValue compiledQuery) { return compiledQuery instanceof
-     * CompiledSelect ? ((CompiledSelect)compiledQuery).getLimitValue(): -1; }
-     */
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = (InternalCache) CacheFactory.getAnyInstance();
-      // String query = querySB.toString().trim();
-
-    /*
-     * if (resultSize != -1){ rowCountString = " rowCount = " + resultSize + ";"; }
-     */
-        + (usedIndexesString != null ? usedIndexesString : "")
-    /* + " \"" + query + "\"" */;
+        + (usedIndexesString != null ? usedIndexesString : "");
