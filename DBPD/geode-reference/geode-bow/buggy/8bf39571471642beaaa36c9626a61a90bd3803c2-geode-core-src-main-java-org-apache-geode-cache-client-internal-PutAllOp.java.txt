Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-  
+
-   * Does a region put on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region put on a server using connections from the given pool to communicate with the
+   * server.
+   * 
-  public static VersionedObjectList execute(ExecutablePool pool,
-                             Region region,
-                             Map map,
-                             EventID eventId,
-                             boolean skipCallbacks,
-                             boolean isRetry, Object callbackArg)
-  {
-    PutAllOpImpl op = new PutAllOpImpl(region, map,
-        eventId, ((PoolImpl)pool).getPRSingleHopEnabled(), skipCallbacks, callbackArg);
+  public static VersionedObjectList execute(ExecutablePool pool, Region region, Map map,
+      EventID eventId, boolean skipCallbacks, boolean isRetry, Object callbackArg) {
+    PutAllOpImpl op = new PutAllOpImpl(region, map, eventId,
+        ((PoolImpl) pool).getPRSingleHopEnabled(), skipCallbacks, callbackArg);
-    if(isRetry) {
+    if (isRetry) {
-    return (VersionedObjectList)pool.execute(op);
+    return (VersionedObjectList) pool.execute(op);
-  
+
-   * Does a region put on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region put on a server using connections from the given pool to communicate with the
+   * server.
+   * 
-  public static VersionedObjectList execute(ExecutablePool pool,
-                             Region region,
-                             Map map,
-                             EventID eventId, 
-                             boolean skipCallbacks,
-                             int retryAttempts, Object callbackArg)
-  {
-    ClientMetadataService cms = ((LocalRegion)region).getCache()
-        .getClientMetadataService();
+  public static VersionedObjectList execute(ExecutablePool pool, Region region, Map map,
+      EventID eventId, boolean skipCallbacks, int retryAttempts, Object callbackArg) {
+    ClientMetadataService cms = ((LocalRegion) region).getCache().getClientMetadataService();
-    Map<ServerLocation, HashSet> serverToFilterMap = cms.getServerToFilterMap(
-        map.keySet(), region, true);
+    Map<ServerLocation, HashSet> serverToFilterMap =
+        cms.getServerToFilterMap(map.keySet(), region, true);
-      AbstractOp op = new PutAllOpImpl(region, map,
-          eventId, ((PoolImpl)pool).getPRSingleHopEnabled(), skipCallbacks, callbackArg);
+      AbstractOp op = new PutAllOpImpl(region, map, eventId,
+          ((PoolImpl) pool).getPRSingleHopEnabled(), skipCallbacks, callbackArg);
-      return (VersionedObjectList)pool.execute(op);
+      return (VersionedObjectList) pool.execute(op);
-    List callableTasks = constructAndGetPutAllTasks(region, map,
-        eventId, skipCallbacks, serverToFilterMap, (PoolImpl)pool, callbackArg);
+    List callableTasks = constructAndGetPutAllTasks(region, map, eventId, skipCallbacks,
+        serverToFilterMap, (PoolImpl) pool, callbackArg);
-    HashMap<ServerLocation, RuntimeException> failedServers = new HashMap<ServerLocation,RuntimeException>();
+    HashMap<ServerLocation, RuntimeException> failedServers =
+        new HashMap<ServerLocation, RuntimeException>();
-      Map<ServerLocation, Object> results = SingleHopClientExecutor
-          .submitBulkOp(callableTasks, cms, (LocalRegion)region, failedServers);
-      for (Map.Entry<ServerLocation, Object> entry: results.entrySet()) {
+      Map<ServerLocation, Object> results = SingleHopClientExecutor.submitBulkOp(callableTasks, cms,
+          (LocalRegion) region, failedServers);
+      for (Map.Entry<ServerLocation, Object> entry : results.entrySet()) {
-          PutAllPartialResultException pap = (PutAllPartialResultException)value;
+          PutAllPartialResultException pap = (PutAllPartialResultException) value;
-            logger.debug("PutAll SingleHop encountered PutAllPartialResultException exception: {}, failedServers are {}", pap, failedServers.keySet());
+            logger.debug(
+                "PutAll SingleHop encountered PutAllPartialResultException exception: {}, failedServers are {}",
+                pap, failedServers.keySet());
-            VersionedObjectList list = (VersionedObjectList)value;
+            VersionedObjectList list = (VersionedObjectList) value;
-      // succeedKeySet is used to send back to client in PartialResult case
-      // so it's not a must to use LinkedHashSet
-      Set succeedKeySet = new LinkedHashSet();
-      Set<ServerLocation> serverSet = serverToFilterMap.keySet();
-      for (ServerLocation server : serverSet) {
-        if (!failedServers.containsKey(server)) {
-          succeedKeySet.addAll(serverToFilterMap.get(server));
+        // succeedKeySet is used to send back to client in PartialResult case
+        // so it's not a must to use LinkedHashSet
+        Set succeedKeySet = new LinkedHashSet();
+        Set<ServerLocation> serverSet = serverToFilterMap.keySet();
+        for (ServerLocation server : serverSet) {
+          if (!failedServers.containsKey(server)) {
+            succeedKeySet.addAll(serverToFilterMap.get(server));
+          }
-      }
-  
-      // save succeedKeys, but if retries all succeeded, discard the PutAllPartialResult
+
+        // save succeedKeys, but if retries all succeeded, discard the PutAllPartialResult
-      
-      // send maps for the failed servers one by one instead of merging 
+
+      // send maps for the failed servers one by one instead of merging
-        //        Throwable failedServers.values().iterator().next();
+        // Throwable failedServers.values().iterator().next();
-          // but it means at least one sub map ever failed 
+          // but it means at least one sub map ever failed
-          VersionedObjectList v = PutAllOp.execute(pool, region, newMap, eventId, skipCallbacks, true, callbackArg);
+          VersionedObjectList v =
+              PutAllOp.execute(pool, region, newMap, eventId, skipCallbacks, true, callbackArg);
-            logger.debug("Retry failed with PutAllPartialResultException: {} Before retry: {}", pre, result.getKeyListString());
+            logger.debug("Retry failed with PutAllPartialResultException: {} Before retry: {}", pre,
+                result.getKeyListString());
-            Object firstKey = newMap.keySet().iterator().next();
-            result.saveFailedKey(firstKey, rte);
-          }
+          Object firstKey = newMap.keySet().iterator().next();
+          result.saveFailedKey(firstKey, rte);
+        }
-  
+
-  
-  
-  static List constructAndGetPutAllTasks(Region region, final Map map,
-      final EventID eventId, 
-      boolean skipCallbacks,
-      final Map<ServerLocation, HashSet> serverToFilterMap,
+
+
+  static List constructAndGetPutAllTasks(Region region, final Map map, final EventID eventId,
+      boolean skipCallbacks, final Map<ServerLocation, HashSet> serverToFilterMap,
-    ArrayList<ServerLocation> servers = new ArrayList<ServerLocation>(
-        serverToFilterMap.keySet());
+    ArrayList<ServerLocation> servers = new ArrayList<ServerLocation>(serverToFilterMap.keySet());
-      AbstractOp putAllOp = new PutAllOpImpl(region,
-          newKeysValuesMap, eventId, true, skipCallbacks, callbackArg);
+      AbstractOp putAllOp =
+          new PutAllOpImpl(region, newKeysValuesMap, eventId, true, skipCallbacks, callbackArg);
-      SingleHopOperationCallable task = new SingleHopOperationCallable(
-          new ServerLocation(server.getHostName(), server.getPort()), pool,
-          putAllOp,UserAttributes.userAttributes.get());
+      SingleHopOperationCallable task =
+          new SingleHopOperationCallable(new ServerLocation(server.getHostName(), server.getPort()),
+              pool, putAllOp, UserAttributes.userAttributes.get());
-    
+
-    
+
-    
+
-    
+
-    public PutAllOpImpl(Region region, Map map,
-        EventID eventId, boolean prSingleHopEnabled, boolean skipCallbacks, Object callbackArg) {
-      super(callbackArg != null ? MessageType.PUT_ALL_WITH_CALLBACK : MessageType.PUTALL, (callbackArg != null ? 6 : 5) + (map.size() * 2));
+    public PutAllOpImpl(Region region, Map map, EventID eventId, boolean prSingleHopEnabled,
+        boolean skipCallbacks, Object callbackArg) {
+      super(callbackArg != null ? MessageType.PUT_ALL_WITH_CALLBACK : MessageType.PUTALL,
+          (callbackArg != null ? 6 : 5) + (map.size() * 2));
-      this.region = (LocalRegion)region;
+      this.region = (LocalRegion) region;
-    
+
-        Map.Entry mapEntry = (Map.Entry)iterator.next();
+        Map.Entry mapEntry = (Map.Entry) iterator.next();
-              getMessage().addRawPart((byte[])cdValue, true);
+              getMessage().addRawPart((byte[]) cdValue, true);
-      }      
+      }
-    @Override  
+
+    @Override
-    
+
-    
+
-        processChunkedResponse((ChunkedMessage)msg,
-                             "putAll",
-                             new ChunkHandler() {
-                               public void handle(ChunkedMessage cm) throws Exception {
-                                 int numParts = msg.getNumberOfParts();
-                                 final boolean isDebugEnabled = logger.isDebugEnabled();
-                                 if (isDebugEnabled) {
-                                   logger.debug("putAllOp.processChunkedResponse processing message with {} parts", numParts);
-                                 }
-                                 for (int partNo=0; partNo < numParts; partNo++) {
-                                   Part part = cm.getPart(partNo);
-                                   try {
-                                     Object o = part.getObject();
-                                     if (isDebugEnabled) {
-                                       logger.debug("part({}) contained {}", partNo, o);
-                                     }
-                                     if (o == null) {
-                                       // no response is an okay response
-                                     } else if (o instanceof byte[]) {
-                                       if (prSingleHopEnabled) {
-                                         byte[] bytesReceived = part.getSerializedForm();
-                                         if (bytesReceived[0] != ClientMetadataService.INITIAL_VERSION) { // nw hop
-                                           if (region != null) {
-                                             try {
-                                               ClientMetadataService cms = region.getCache().getClientMetadataService();
-                                               cms.scheduleGetPRMetaData(region, false, bytesReceived[1]);
-                                             }
-                                             catch (CacheClosedException e) {
-                                             }
-                                           }
-                                         }
-                                       }
-                                     } else if (o instanceof Throwable) {
-                                       String s = "While performing a remote putAll";
-                                       exceptionRef[0] = new ServerOperationException(s, (Throwable)o);
-                                     } else {
-                                       VersionedObjectList chunk = (VersionedObjectList)o;
-                                       chunk.replaceNullIDs(con.getEndpoint().getMemberId());
-                                       result.addAll(chunk);
-                                     }
-                                   } catch(Exception e) {
-                                     exceptionRef[0] = new ServerOperationException("Unable to deserialize value" , e);
-                                   }
-                                 }
-                               }
-                             });
+        processChunkedResponse((ChunkedMessage) msg, "putAll", new ChunkHandler() {
+          public void handle(ChunkedMessage cm) throws Exception {
+            int numParts = msg.getNumberOfParts();
+            final boolean isDebugEnabled = logger.isDebugEnabled();
+            if (isDebugEnabled) {
+              logger.debug("putAllOp.processChunkedResponse processing message with {} parts",
+                  numParts);
+            }
+            for (int partNo = 0; partNo < numParts; partNo++) {
+              Part part = cm.getPart(partNo);
+              try {
+                Object o = part.getObject();
+                if (isDebugEnabled) {
+                  logger.debug("part({}) contained {}", partNo, o);
+                }
+                if (o == null) {
+                  // no response is an okay response
+                } else if (o instanceof byte[]) {
+                  if (prSingleHopEnabled) {
+                    byte[] bytesReceived = part.getSerializedForm();
+                    if (bytesReceived[0] != ClientMetadataService.INITIAL_VERSION) { // nw hop
+                      if (region != null) {
+                        try {
+                          ClientMetadataService cms = region.getCache().getClientMetadataService();
+                          cms.scheduleGetPRMetaData(region, false, bytesReceived[1]);
+                        } catch (CacheClosedException e) {
+                        }
+                      }
+                    }
+                  }
+                } else if (o instanceof Throwable) {
+                  String s = "While performing a remote putAll";
+                  exceptionRef[0] = new ServerOperationException(s, (Throwable) o);
+                } else {
+                  VersionedObjectList chunk = (VersionedObjectList) o;
+                  chunk.replaceNullIDs(con.getEndpoint().getMemberId());
+                  result.addAll(chunk);
+                }
+              } catch (Exception e) {
+                exceptionRef[0] = new ServerOperationException("Unable to deserialize value", e);
+              }
+            }
+          }
+        });
-          PutAllPartialResultException cause = (PutAllPartialResultException)e.getCause(); 
+          PutAllPartialResultException cause = (PutAllPartialResultException) e.getCause();
-    
+
+
+
-  
+
