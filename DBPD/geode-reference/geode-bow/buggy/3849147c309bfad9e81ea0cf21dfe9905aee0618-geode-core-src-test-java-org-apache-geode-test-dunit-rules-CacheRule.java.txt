GEODE-5033: Improve TearDown of DistributedTestRule

Change Distributed rules to extend AbstractDistributedTestRule to ensure
that all DUnit VMs were launched prior to setUp of these rules.

Add DistributedTestRule.TearDown which includes everything that the
old DistributedTestCase handled during tearDown.

Using DistributedTestRule as a non-static Rule is probably the best way
to use it going forward. If you use it as a static ClassRule then you
should also register DistributedTestRule.TearDown as a non-static Rule
so that removal of IgnoredExceptions and grep for suspect strings are
both properly invoked after every test method.

-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
-import static org.apache.geode.test.dunit.DistributedTestUtils.getLocators;
+import static org.apache.geode.test.dunit.Disconnect.disconnectAllFromDS;
+import static org.apache.geode.test.dunit.standalone.DUnitLauncher.getDistributedSystemProperties;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.Region;
+import org.apache.geode.internal.cache.HARegion;
-import org.apache.geode.test.dunit.Disconnect;
+import org.apache.geode.internal.cache.PartitionedRegion;
- * {@code CacheRule} follows the standard convention of using a {@code Builder} for configuration as
- * introduced in the JUnit {@code Timeout} rule.
+ * {@code CacheRule} can be used in DistributedTests as a {@code Rule}:
+ *
+ * <pre>
+ * {@literal @}Rule
+ * public DistributedTestRule distributedTestRule = new DistributedTestRule();
+ *
+ * {@literal @}Rule
+ * public CacheRule cacheRule = new CacheRule();
+ *
+ * {@literal @}Before
+ * public void setUp() {
+ *   getVM(0).invoke(() -> cacheRule.createCache(new CacheFactory().setPdxDiskStore(myDiskStore))));
+ * }
+ *
+ * {@literal @}Test
+ * public void createRegionWithRegionFactory() {
+ *   getVM(0).invoke(() -> {
+ *     RegionFactory regionFactory = cacheRule.getCache().createRegionFactory();
+ *     ...
+ *   });
+ * }
+ * </pre>
- * {@code CacheRule} can be used in DistributedTests as a {@code Rule}:
+ * {@link CacheRule.Builder} can be used to construct an instance with more options:
+ * public DistributedTestRule.TearDown tearDown = new DistributedTestRule.TearDown();
+ *
+ * {@literal @}Rule
-public class CacheRule extends DistributedExternalResource {
+public class CacheRule extends AbstractDistributedTestRule {
+  private final boolean destroyRegions;
+  private final boolean replaceConfig;
+  /**
+   * Use {@code Builder} for more options in constructing {@code CacheRule}.
+   */
+    destroyRegions = builder.destroyRegions;
+    replaceConfig = builder.replaceConfig;
-      invoker().invokeInEveryVMAndController(() -> createCache(config, systemProperties));
+      invoker().invokeInEveryVMAndController(() -> createCache(config(), systemProperties));
-        createCache(config, systemProperties);
+        createCache(config(), systemProperties);
-        vm.invoke(() -> createCache(config, systemProperties));
+        vm.invoke(() -> createCache(config(), systemProperties));
-      Disconnect.disconnectAllFromDS();
+      disconnectAllFromDS();
+  private Properties config() {
+    if (replaceConfig) {
+      return config;
+    }
+    Properties allConfig = getDistributedSystemProperties();
+    allConfig.putAll(config);
+    return allConfig;
+  }
+
-    cache = (InternalCache) new CacheFactory(config).create();
+    cache = (InternalCache) new CacheFactory(config()).create();
-  private static void closeAndNullCache() {
+  private void closeAndNullCache() {
-  private static void closeCache() {
+  private void closeCache() {
+        if (destroyRegions) {
+          destroyRegions(cache);
+        }
+  private static void destroyRegions(final Cache cache) {
+    if (cache != null && !cache.isClosed()) {
+      // try to destroy the root regions first so that we clean up any persistent files.
+      for (Region<?, ?> root : cache.rootRegions()) {
+        String regionFullPath = root == null ? null : root.getFullPath();
+        // for colocated regions you can't locally destroy a partitioned region.
+        if (root.isDestroyed() || root instanceof HARegion || root instanceof PartitionedRegion) {
+          continue;
+        }
+        try {
+          root.localDestroyRegion("CacheRule_tearDown");
+        } catch (Exception ignore) {
+        }
+      }
+    }
+  }
+
+    private boolean destroyRegions;
+    private boolean replaceConfig;
-      config.setProperty(LOCATORS, getLocators());
+      // nothing
+    /**
+     * Destroy all Regions before closing the Cache. This will cleanup the presence of each Region
+     * in DiskStores, but this is not needed if the disk files are on a TemporaryFolder. Default is
+     * false.
+     */
+    public Builder destroyRegions() {
+      destroyRegions = true;
+      return this;
+    }
+
+      replaceConfig = true;
