GEODE-3686: move junit rules to correct packages

-package org.apache.geode.test.dunit.rules;
+package org.apache.geode.test.junit.rules;
+import java.io.IOException;
+import java.io.UncheckedIOException;
-import org.apache.geode.test.junit.rules.DescribedExternalResource;
+ * <p>
+ * <p>
- * you can use this as Rule
- * 
- * @Rule GfshShellConnectionRule rule = new GfshShellConnectionRule(); then after you connect to a
- *       locator, you don't have to call disconnect() or close() at all, since the rule's after
- *       takes care of it for you.
+ * <p>
+ * you can use this as Rule:
- *       Or as a ClassRule
- * @ClassRule GfshShellConnectionRule rule = new GfshShellConnectionRule(); When using as a
- *            ClassRule, if you call connect in a test, you will need to call disconnect after the
- *            test as well. See NetstatDUnitTest for example.
+ * <pre>
+ * {@literal @}Rule GfshShellConnectionRule rule = new GfshShellConnectionRule();
+ * </pre>
+ * then after you connect to a locator, you don't have to call disconnect() or close() at all, since
+ * the rule's after takes care of it for you.
+ *
+ * <p>
+ * Or as a ClassRule:
+ *
+ * <pre>
+ * {@literal @}ClassRule GfshShellConnectionRule rule = new GfshShellConnectionRule();
+ * </pre>
+ *
+ * When using as a ClassRule, if you call connect in a test, you will need to call disconnect after
+ * the test as well. See NetstatDUnitTest for example.
-
-    } catch (Exception e) {
-      throw new RuntimeException(e.getMessage(), e);
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+  @Override
+  protected void after(Description description) throws Throwable {
+    close();
+
+    if (ignoredException != null) {
+      ignoredException.remove();
+    }
+  }
+
-  @Override
-  protected void after(Description description) throws Throwable {
-    close();
-
-    if (ignoredException != null) {
-      ignoredException.remove();
-    }
-  }
-
-
