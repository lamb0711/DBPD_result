GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.DataSerializer_0_DOES_NOT_EXTEND_DATASERIALIZER
-              .toLocalizedString(c.getName()));
+          String.format("%s  does not extend DataSerializer.",
+              c.getName()));
-      StringId s = LocalizedStrings.DataSerializer_CLASS_0_DOES_NOT_HAVE_A_ZEROARGUMENT_CONSTRUCTOR;
+      String s = "Class %s does not have a zero-argument constructor.";
-            LocalizedStrings.DataSerializer_CLASS_0_DOES_NOT_HAVE_A_ZEROARGUMENT_CONSTRUCTOR_IT_IS_AN_INNER_CLASS_OF_1_SHOULD_IT_BE_A_STATIC_INNER_CLASS;
+            "Class %s does not have a zero-argument constructor. It is an inner class of %s. Should it be a static inner class?";
-      throw new IllegalArgumentException(s.toLocalizedString(args));
+      throw new IllegalArgumentException(String.format(s, args));
-          LocalizedStrings.DataSerializer_COULD_NOT_INSTANTIATE_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()));
+          String.format("Could not instantiate an instance of  %s",
+              c.getName()));
-          LocalizedStrings.DataSerializer_COULD_NOT_INSTANTIATE_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()),
+          String.format("Could not instantiate an instance of  %s",
+              c.getName()),
-          LocalizedStrings.DataSerializer_WHILE_INSTANTIATING_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()),
+          String.format("While instantiating an instance of  %s",
+              c.getName()),
-          LocalizedStrings.InternalDataSerializer_CANNOT_CREATE_A_DATASERIALIZER_WITH_ID_0
-              .toLocalizedString());
+          "Cannot create a DataSerializer with id 0.");
-      final StringId msg =
-          LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_0_HAS_NO_SUPPORTED_CLASSES_ITS_GETSUPPORTEDCLASSES_METHOD_MUST_RETURN_AT_LEAST_ONE_CLASS;
-      throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
+      final String msg =
+          "The DataSerializer %s has no supported classes. It's getSupportedClasses method must return at least one class";
+      throw new IllegalArgumentException(String.format(msg, s.getClass().getName()));
-        final StringId msg =
-            LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_A_NULL_ELEMENT;
-        throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
+        final String msg =
+            "The DataSerializer getSupportedClasses method for %s returned an array that contained a null element.";
+        throw new IllegalArgumentException(String.format(msg, s.getClass().getName()));
-        final StringId msg =
-            LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_AN_ARRAY_CLASS_WHICH_IS_NOT_ALLOWED_SINCE_ARRAYS_HAVE_BUILTIN_SUPPORT;
-        throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
+        final String msg =
+            "The DataSerializer getSupportedClasses method for %s returned an array that contained an array class which is not allowed since arrays have built-in support.";
+        throw new IllegalArgumentException(String.format(msg, s.getClass().getName()));
-              LocalizedStrings.InternalDataSerializer_A_DATASERIALIZER_OF_CLASS_0_IS_ALREADY_REGISTERED_WITH_ID_1_SO_THE_DATASERIALIZER_OF_CLASS_2_COULD_NOT_BE_REGISTERED
-                  .toLocalizedString(new Object[] {other.getClass().getName(), other.getId()}));
+              String.format(
+                  "A DataSerializer of class %s is already registered with id %s so the DataSerializer of class %s could not be registered.",
+                  new Object[] {other.getClass().getName(), other.getId()}));
-            LocalizedStrings.InternalDataSerializer_A_DATASERIALIZER_OF_CLASS_0_IS_ALREADY_REGISTERED_WITH_ID_1_SO_THE_DATASERIALIZER_OF_CLASS_2_COULD_NOT_BE_REGISTERED
-                .toLocalizedString(new Object[] {oldValue.getClass().getName(), oldValue.getId()}));
+            String.format(
+                "A DataSerializer of class %s is already registered with id %s so the DataSerializer of class %s could not be registered.",
+                new Object[] {oldValue.getClass().getName(), oldValue.getId()}));
-          logger.info(LogMarker.SERIALIZER_MARKER,
-              LocalizedMessage.create(
-                  LocalizedStrings.InternalDataSerializer_COULD_NOT_LOAD_DATASERIALIZER_CLASS_0,
-                  dsClass));
+          logger.info(LogMarker.SERIALIZER_MARKER, "Could not load DataSerializer class: {}",
+              dsClass);
-              LocalizedMessage.create(
-                  LocalizedStrings.InternalDataSerializer_COULD_NOT_LOAD_DATASERIALIZER_CLASS_0,
-                  dsClass));
+              "Could not load DataSerializer class: {}",
+              dsClass);
-        logger.info(LogMarker.SERIALIZER_MARKER, LocalizedMessage.create(
-            LocalizedStrings.InternalDataSerializer_COULD_NOT_LOAD_DATASERIALIZER_CLASS_0, name));
+        logger.info(LogMarker.SERIALIZER_MARKER, "Could not load DataSerializer class: {}", name);
-          logger.info(LogMarker.SERIALIZER_MARKER,
-              LocalizedMessage.create(
-                  LocalizedStrings.InternalDataSerializer_COULD_NOT_LOAD_DATASERIALIZER_CLASS_0,
-                  dsClass));
+          logger.info(LogMarker.SERIALIZER_MARKER, "Could not load DataSerializer class: {}",
+              dsClass);
-          LocalizedStrings.InternalDataSerializer_ATTEMPTED_TO_SERIALIZE_ILLEGAL_DSFID
-              .toLocalizedString());
+          "attempted to serialize ILLEGAL dsfid");
-            LocalizedStrings.DataSerializer_SERIALIZER_0_A_1_SAID_THAT_IT_COULD_SERIALIZE_AN_INSTANCE_OF_2_BUT_ITS_TODATA_METHOD_RETURNED_FALSE
-                .toLocalizedString(serializer.getId(), serializer.getClass().getName(),
-                    o.getClass().getName()));
+            String.format(
+                "Serializer  %s  (a  %s ) said that it could serialize an instance of  %s , but its toData() method returned false.",
+                serializer.getId(), serializer.getClass().getName(),
+                o.getClass().getName()));
-      throw new IOException(LocalizedStrings.DataSerializer_SERIALIZER_0_IS_NOT_REGISTERED
-          .toLocalizedString(new Object[] {serializerId}));
+      throw new IOException(String.format("Serializer with Id %s is not registered",
+          new Object[] {serializerId}));
-          LocalizedStrings.InternalDataSerializer_UNKNOWN_PRIMITIVE_TYPE_0
-              .toLocalizedString(c.getName()));
+          String.format("unknown primitive type: %s",
+              c.getName()));
-            LocalizedStrings.InternalDataSerializer_UNEXPECTED_TYPECODE_0
-                .toLocalizedString(typeCode));
+            String.format("unexpected typeCode: %s", typeCode));
-
-            LocalizedStrings.DataSerializer_UNKNOWN_TIMEUNIT_TYPE_0.toLocalizedString(type));
+            String.format("Unknown TimeUnit type:  %s", type));
-            LocalizedStrings.DataSerializer_0_IS_NOT_DATASERIALIZABLE_AND_JAVA_SERIALIZATION_IS_DISALLOWED
-                .toLocalizedString(o.getClass().getName()));
+            String.format("%s  is not DataSerializable and Java Serialization is disallowed",
+                o.getClass().getName()));
-          LocalizedStrings.DataSerializer_COULD_NOT_CREATE_AN_INSTANCE_OF_0
-              .toLocalizedString(ds.getClass().getName()),
+          String.format("Could not create an instance of  %s .",
+              ds.getClass().getName()),
-          LocalizedStrings.DataSerializer_COULD_NOT_CREATE_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()),
+          String.format("Could not create an instance of  %s .",
+              c.getName()),
-          LocalizedMessage.create(
-              LocalizedStrings.DataSerializer_NO_INSTANTIATOR_HAS_BEEN_REGISTERED_FOR_CLASS_WITH_ID_0,
-              classId));
+          "No Instantiator has been registered for class with id {}",
+          classId);
-          LocalizedStrings.DataSerializer_NO_INSTANTIATOR_HAS_BEEN_REGISTERED_FOR_CLASS_WITH_ID_0
-              .toLocalizedString(classId));
+          String.format("No Instantiator has been registered for class with id  %s",
+              classId));
-            LocalizedStrings.DataSerializer_COULD_NOT_DESERIALIZE_AN_INSTANCE_OF_0
-                .toLocalizedString(instantiator.getInstantiatedClass().getName()),
+            String.format("Could not deserialize an instance of  %s",
+                instantiator.getInstantiatedClass().getName()),
-      return LocalizedStrings.InternalDataSerializer_REGISTER_DATASERIALIZER_0_OF_CLASS_1
-          .toLocalizedString(this.id, this.className);
+      return String.format("Register DataSerializer %s of class %s",
+          this.id, this.className);
-      throw new IllegalStateException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+      throw new IllegalStateException("Should not be invoked");
