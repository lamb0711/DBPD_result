GEODE-2107: fix the threadleak when a secondary sender is closed

+    logger.info(LocalizedMessage.create(
+        LocalizedStrings.SerialGatewaySenderImpl_0__BECOMING_PRIMARY_GATEWAYSENDER, this.sender));
+    notifyAndBecomePrimary();
+    new UpdateAttributesProcessor(this.sender).distribute(false);
+  }
+
+  public void notifyAndBecomePrimary() {
-      this.isPrimary = true;
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.SerialGatewaySenderImpl_0__BECOMING_PRIMARY_GATEWAYSENDER, this.sender));
+      setIsPrimary(true);
+      notifyPrimaryLock();
+    }
+  }
+
+  public void notifyPrimaryLock() {
+    synchronized (this.primaryLock) {
-    new UpdateAttributesProcessor(this.sender).distribute(false);
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.GatewayImpl_0__WAITING_TO_BECOME_PRIMARY_GATEWAY, this.sender.getId()));
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GatewayImpl_0__WAITING_TO_BECOME_PRIMARY_GATEWAY,
-            this.sender.getId()));
-        this.primaryLock.wait();
+        this.primaryLock.wait(1000);
+        if (sender.getEventProcessor() != null && sender.getEventProcessor().isStopped()) {
+          logger.info("The event processor is stopped, not to wait for being primary any more.");
+          return;
+        }
