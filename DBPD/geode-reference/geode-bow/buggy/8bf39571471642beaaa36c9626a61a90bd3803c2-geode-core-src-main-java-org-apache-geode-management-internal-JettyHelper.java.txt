Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static Server initJetty(final String bindAddress, final int port, SSLConfig sslConfig) throws Exception {
+  public static Server initJetty(final String bindAddress, final int port, SSLConfig sslConfig)
+      throws Exception {
-      if (!StringUtils.isBlank(sslConfig.getCiphers()) && !"any".equalsIgnoreCase(sslConfig.getCiphers())) {
-        //If use has mentioned "any" let the SSL layer decide on the ciphers
+      if (!StringUtils.isBlank(sslConfig.getCiphers())
+          && !"any".equalsIgnoreCase(sslConfig.getCiphers())) {
+        // If use has mentioned "any" let the SSL layer decide on the ciphers
-        throw new GemFireConfigException("Key store can't be empty if SSL is enabled for HttpService");
+        throw new GemFireConfigException(
+            "Key store can't be empty if SSL is enabled for HttpService");
-      //Somehow With HTTP_2.0 Jetty throwing NPE. Need to investigate further whether all GemFire web application(Pulse, REST) can do with HTTP_1.1
-      connector = new ServerConnector(jettyServer, new SslConnectionFactory(sslContextFactory, HttpVersion.HTTP_1_1.asString()), new HttpConnectionFactory(httpConfig));
+      // Somehow With HTTP_2.0 Jetty throwing NPE. Need to investigate further whether all GemFire
+      // web application(Pulse, REST) can do with HTTP_1.1
+      connector = new ServerConnector(jettyServer,
+          new SslConnectionFactory(sslContextFactory, HttpVersion.HTTP_1_1.asString()),
+          new HttpConnectionFactory(httpConfig));
-    jettyServer.setConnectors(new Connector[] { connector });
+    jettyServer.setConnectors(new Connector[] {connector});
-  public static Server addWebApplication(final Server jetty, final String webAppContext, final String warFilePath) {
+  public static Server addWebApplication(final Server jetty, final String webAppContext,
+      final String warFilePath) {
-                                            .concat("GemFire_" + USER_NAME)
-                                            .concat(FILE_PATH_SEPARATOR)
-                                            .concat("services")
-                                            .concat(FILE_PATH_SEPARATOR)
-                                            .concat("http")
-                                            .concat(FILE_PATH_SEPARATOR)
-                                            .concat((StringUtils.isBlank(bindAddress)) ? "0.0.0.0" : bindAddress)
-                                            .concat("_")
-                                            .concat(String.valueOf(port).concat(underscoredContext));
+        .concat("GemFire_" + USER_NAME).concat(FILE_PATH_SEPARATOR).concat("services")
+        .concat(FILE_PATH_SEPARATOR).concat("http").concat(FILE_PATH_SEPARATOR)
+        .concat((StringUtils.isBlank(bindAddress)) ? "0.0.0.0" : bindAddress).concat("_")
+        .concat(String.valueOf(port).concat(underscoredContext));
-    return (webAppArchivePath.startsWith(File.separator) ? new File(webAppArchivePath) : new File(".", webAppArchivePath)).getAbsolutePath();
+    return (webAppArchivePath.startsWith(File.separator) ? new File(webAppArchivePath)
+        : new File(".", webAppArchivePath)).getAbsolutePath();
-        JettyHelper.addWebApplication(jetty, normalizeWebAppContext(webAppContext), normalizeWebAppArchivePath(webAppArchivePath));
+        JettyHelper.addWebApplication(jetty, normalizeWebAppContext(webAppContext),
+            normalizeWebAppArchivePath(webAppArchivePath));
-      System.out.printf("usage:%n>java org.apache.geode.management.internal.TomcatHelper <web-app-context> <war-file-path> [<web-app-context> <war-file-path>]*");
+      System.out.printf(
+          "usage:%n>java org.apache.geode.management.internal.TomcatHelper <web-app-context> <war-file-path> [<web-app-context> <war-file-path>]*");
