GEODE-2996: incorporating review feedback and adding integration test

Addresses review feedback for GEODE-2996, mainly refactoring getOpertionHandler to handle failures like the putOperationHandler
Adding put operations to the RoundTripCacheConnectionJUnitTest, which is the integration test for the protobuf module
Removing service loading for protobuf operations and instead have the ProtobufStreamProcessor populate its OperationHandlerRegistry
Remove exception throwing from OperationHandler.process calls and remove TypeEncodingException

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Alexander Murmann <amurmann@pivotal.io>

This closes #605

+import com.google.protobuf.ByteString;
+
+import org.apache.geode.protocol.protobuf.BasicTypes;
+import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
+import org.apache.geode.serialization.codec.StringCodec;
+import org.apache.geode.serialization.exception.UnsupportedEncodingTypeException;
+import org.apache.geode.serialization.registry.SerializationCodecRegistry;
+import org.apache.geode.serialization.registry.exception.CodecAlreadyRegisteredForTypeException;
+import org.apache.geode.serialization.registry.exception.CodecNotRegisteredForTypeException;
+
+import java.nio.ByteBuffer;
+  public static RegionAPI.PutRequest makePutRequest(String requestKey, String requestValue,
+      String requestRegion) throws CodecNotRegisteredForTypeException,
+      UnsupportedEncodingTypeException, CodecAlreadyRegisteredForTypeException {
+    StringCodec stringCodec = getStringCodec();
+    BasicTypes.EncodedValue.Builder key =
+        BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
+            .setValue(ByteString.copyFrom(stringCodec.encode(requestKey)));
+    BasicTypes.EncodedValue.Builder value =
+        BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
+            .setValue(ByteString.copyFrom(stringCodec.encode(requestValue)));
+    BasicTypes.Entry.Builder entry = BasicTypes.Entry.newBuilder().setKey(key).setValue(value);
+    RegionAPI.PutRequest.Builder putRequestBuilder = RegionAPI.PutRequest.newBuilder();
+    putRequestBuilder.setRegionName(requestRegion).setEntry(entry);
+
+    return putRequestBuilder.build();
+  }
+
+  public static ClientProtocol.Message makePutRequestMessage(String requestKey, String requestValue,
+      String requestRegion, ClientProtocol.MessageHeader header)
+      throws CodecNotRegisteredForTypeException, UnsupportedEncodingTypeException,
+      CodecAlreadyRegisteredForTypeException {
+    ClientProtocol.Request request = ClientProtocol.Request.newBuilder()
+        .setPutRequest(makePutRequest(requestKey, requestValue, requestRegion)).build();
+    return ClientProtocol.Message.newBuilder().setMessageHeader(header).setRequest(request).build();
+  }
+
+  public static RegionAPI.GetRequest makeGetRequest(String requestKey, String requestRegion)
+      throws CodecNotRegisteredForTypeException, UnsupportedEncodingTypeException,
+      CodecAlreadyRegisteredForTypeException {
+    StringCodec stringCodec = getStringCodec();
+    RegionAPI.GetRequest.Builder getRequestBuilder = RegionAPI.GetRequest.newBuilder();
+    getRequestBuilder.setRegionName(requestRegion)
+        .setKey(BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
+            .setValue(ByteString.copyFrom(stringCodec.encode(requestKey))));
+
+    return getRequestBuilder.build();
+  }
+
+  public static ClientProtocol.Message makeGetRequestMessage(String requestKey,
+      String requestRegion, ClientProtocol.MessageHeader header)
+      throws CodecAlreadyRegisteredForTypeException, UnsupportedEncodingTypeException,
+      CodecNotRegisteredForTypeException {
+    ClientProtocol.Request request = ClientProtocol.Request.newBuilder()
+        .setGetRequest(makeGetRequest(requestKey, requestRegion)).build();
+    return ClientProtocol.Message.newBuilder().setMessageHeader(header).setRequest(request).build();
+  }
+
+  public static StringCodec getStringCodec() throws CodecAlreadyRegisteredForTypeException,
+      CodecNotRegisteredForTypeException, UnsupportedEncodingTypeException {
+    SerializationCodecRegistry serializationCodecRegistry = new SerializationCodecRegistry();
+    return (StringCodec) serializationCodecRegistry.getCodecForType(
+        EncodingTypeTranslator.getSerializationTypeForEncodingType(BasicTypes.EncodingType.STRING));
+  }
+
