Feature/geode 3781: JDBC Connector (#1176)

GEODE-3781: add geode-connectors module

Introduce new PDX JDBC Connector Service:
* GEODE-3782: implement JdbcWriter
* GEODE-3783: implement JdbcAsyncWriter
* GEODE-3823: implement JdbcLoader
+import java.io.Serializable;
+import org.apache.geode.internal.cache.InternalCache;
-/****
+/**
- *
- *
+  private transient volatile CacheProvider cacheProvider;
+
+
+
+
+
+   * Produce a new XmlEntityBuilder.
+   *
+   * @return new XmlEntityBuilder.
+   * @since GemFire 8.1
+   */
+  public static XmlEntityBuilder builder() {
+    return new XmlEntityBuilder();
+  }
+
+  private static CacheProvider createDefaultCacheProvider() {
+    return () -> (InternalCache) CacheFactory.getAnyInstance();
+  }
+
+  /**
-  public XmlEntity() {}
+  public XmlEntity() {
+    this.cacheProvider = createDefaultCacheProvider();
+  }
+    this.cacheProvider = createDefaultCacheProvider();
-  /****
+  /**
+    this.cacheProvider = createDefaultCacheProvider();
-
-  /****
+  /**
+    this.cacheProvider = createDefaultCacheProvider();
+  public XmlEntity(final String parentType, final String childPrefix, final String childNamespace,
+      final String childType) {
+    this(createDefaultCacheProvider(), parentType, childPrefix, childNamespace, childType);
+  }
+
+  public XmlEntity(final CacheProvider cacheProvider, final String parentType,
+      final String childPrefix, final String childNamespace, final String childType) {
+    this.cacheProvider = cacheProvider;
+    this.parentType = parentType;
+    this.type = childType;
+    this.childPrefix = childPrefix;
+    this.childNamespace = childNamespace;
+
+    StringBuilder sb = new StringBuilder();
+    sb.append("//").append(this.parentType);
+    sb.append('/').append(childPrefix).append(':').append(this.type);
+    this.searchString = sb.toString();
+    this.xmlDefinition = parseXmlForDefinition();
+  }
+
+  private String parseXmlForDefinition() {
+    final Cache cache = cacheProvider.getCache();
+
+    final StringWriter stringWriter = new StringWriter();
+    final PrintWriter printWriter = new PrintWriter(stringWriter);
+    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    printWriter.close();
+    InputSource inputSource = new InputSource(new StringReader(stringWriter.toString()));
+
+    try {
+      Document document = XmlUtils.getDocumentBuilder().parse(inputSource);
+      Node element = document.getElementsByTagNameNS(childNamespace, type).item(0);
+      if (null != element) {
+        return XmlUtils.elementToString(element);
+      }
+    } catch (IOException | ParserConfigurationException | RuntimeException | SAXException
+        | TransformerException e) {
+      throw new InternalGemFireError("Could not parse XML when creating XMLEntity", e);
+    }
+
+    logger.warn("No XML definition could be found with name={} and attributes={}", type,
+        attributes);
+    return null;
+  }
+
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-    sb.append("/").append(childPrefix).append(':').append(this.type);
+    sb.append('/').append(childPrefix).append(':').append(this.type);
-    final Cache cache = CacheFactory.getAnyInstance();
+    final Cache cache = cacheProvider.getCache();
-   * Used supplied xmlDocument to extract the XML for the defined {@link XmlEntity}.
+   * Used supplied xmlDocument to extract the XML for the defined XmlEntity.
-   * @return XML for {@link XmlEntity} if found, otherwise <code>null</code>.
+   * @return XML for XmlEntity if found, otherwise {@code null}.
-    final Cache cache = CacheFactory.getAnyInstance();
-   * Used supplied XML {@link Document} to extract the XML for the defined {@link XmlEntity}.
+   * Used supplied XML {@link Document} to extract the XML for the defined XmlEntity.
-   * @return XML for {@link XmlEntity} if found, otherwise <code>null</code>.
-   * @throws XPathExpressionException
-   * @throws TransformerException
-   * @throws TransformerFactoryConfigurationError
+   * @return XML for XmlEntity if found, otherwise {@code null}.
-  private String loadXmlDefinition(final Document document)
+  public String loadXmlDefinition(final Document document)
-    final Cache cache = CacheFactory.getAnyInstance();
-
+
+      // TODO: wrap this line with conditional
+      xpathContext.addNamespace(childPrefix, childNamespace);
+
+
-    if (attributes.size() > 0) {
-      queryStringBuilder.append("[");
+    if (!attributes.isEmpty()) {
+      queryStringBuilder.append('[');
-      queryStringBuilder.append("@").append(attrEntry.getKey()).append("='")
-          .append(attrEntry.getValue()).append("'");
+      queryStringBuilder.append('@').append(attrEntry.getKey()).append("='")
+          .append(attrEntry.getValue()).append('\'');
-            .append(attrEntry.getValue()).append("'");
+            .append(attrEntry.getValue()).append('\'');
-      queryStringBuilder.append("]");
+      queryStringBuilder.append(']');
+  public Version[] getSerializationVersions() {
+    return new Version[] {Version.GEODE_111};
+  }
+
+  @Override
-        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + "]";
+        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + ']';
+    this.cacheProvider = createDefaultCacheProvider();
-   * Produce a new {@link XmlEntityBuilder}.
-   *
-   * @return new {@link XmlEntityBuilder}.
-   * @since GemFire 8.1
+   * Defines how XmlEntity gets a reference to the Cache.
-  public static XmlEntityBuilder builder() {
-    return new XmlEntityBuilder();
-  }
-
-  @Override
-  public Version[] getSerializationVersions() {
-    return new Version[] {Version.GEODE_111};
+  public interface CacheProvider {
+    InternalCache getCache();
-   * Builder for {@link XmlEntity}. Default values are as described in {@link XmlEntity}.
-   *
+   * Builder for XmlEntity. Default values are as described in XmlEntity.
+
-    private XmlEntityBuilder() {
+    XmlEntityBuilder() {
-     * Produce an {@link XmlEntity} with the supplied values. Builder is reset after
-     * {@link #build()} is called. Subsequent calls will produce a new {@link XmlEntity}.
+     * Produce an XmlEntity with the supplied values. Builder is reset after #build() is called.
+     * Subsequent calls will produce a new XmlEntity.
-     * @return {@link XmlEntity}
+     * @return XmlEntity
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
-     * @throws TransformerException
-     * @throws TransformerFactoryConfigurationError
-     * @throws XPathExpressionException
+     * @return this XmlEntityBuilder
-
