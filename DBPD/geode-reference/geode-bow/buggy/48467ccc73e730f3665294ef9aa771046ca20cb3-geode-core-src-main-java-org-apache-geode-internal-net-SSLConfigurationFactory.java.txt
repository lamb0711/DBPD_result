GEODE-7157: SSLConfig&SSLConf..Factory thread-safe

SSLConfig and SSLConfigFactory have been changed to be
thread-safe by means of the following:

* SSLConfig has been converted into an immutable class

* The registeredSSLConfig HashMap member of SSLConfigurationFactory
  has been changed into a ConcurrentHashMap and accesses to this
  map other than put and get has been synchronized.

-import java.util.HashMap;
+import java.util.concurrent.ConcurrentHashMap;
-  private Map<SecurableCommunicationChannel, SSLConfig> registeredSSLConfig = new HashMap<>();
+  private Map<SecurableCommunicationChannel, SSLConfig> registeredSSLConfig =
+      new ConcurrentHashMap<>();
-  private synchronized void registeredSSLConfigForComponent(
+  private void registeredSSLConfigForComponent(
-    SSLConfig sslConfig = createSSLConfig(distributionConfig, sslEnabledComponent);
+    SSLConfig.Builder sslConfigBuilder =
+        createSSLConfigBuilder(distributionConfig, sslEnabledComponent);
-      sslConfig = configureLegacyClusterSSL(distributionConfig, sslConfig);
+      configureLegacyClusterSSL(distributionConfig, sslConfigBuilder);
-    sslConfig.setSecurableCommunicationChannel(sslEnabledComponent);
+    sslConfigBuilder.setSecurableCommunicationChannel(sslEnabledComponent);
-        // Create a SSLConfig separate for HTTP Service. As the require-authentication might differ
-        createSSLConfigForComponent(distributionConfig, SecurableCommunicationChannel.WEB);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getClusterSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getClusterSSLAlias());
-          sslConfig = configureLegacyClusterSSL(distributionConfig, sslConfig);
+          configureLegacyClusterSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getLocatorSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getLocatorSSLAlias());
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getServerSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getServerSSLAlias());
-          sslConfig = configureLegacyServerSSL(distributionConfig, sslConfig);
+          configureLegacyServerSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getGatewaySSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getGatewaySSLAlias());
-          sslConfig = configureLegacyGatewaySSL(distributionConfig, sslConfig);
+          configureLegacyGatewaySSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getHTTPServiceSSLAlias());
-          sslConfig.setRequireAuth(distributionConfig.getSSLWebRequireAuthentication());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getHTTPServiceSSLAlias());
+          sslConfigBuilder.setRequireAuth(distributionConfig.getSSLWebRequireAuthentication());
-          sslConfig = configureLegacyHttpServiceSSL(distributionConfig, sslConfig);
+          configureLegacyHttpServiceSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getJMXSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getJMXSSLAlias());
-          sslConfig = configureLegacyJMXSSL(distributionConfig, sslConfig);
+          configureLegacyJMXSSL(distributionConfig, sslConfigBuilder);
-    configureSSLPropertiesFromSystemProperties(sslConfig);
-    return sslConfig;
+    configureSSLPropertiesFromSystemProperties(sslConfigBuilder);
+    return sslConfigBuilder.build();
-  private SSLConfig setAliasForComponent(final SSLConfig sslConfig, final String clusterSSLAlias) {
+  private SSLConfig.Builder setAliasForComponent(SSLConfig.Builder sslConfigBuilder,
+      final String clusterSSLAlias) {
-      sslConfig.setAlias(clusterSSLAlias);
+      sslConfigBuilder.setAlias(clusterSSLAlias);
-    return sslConfig;
+    return sslConfigBuilder;
-  private SSLConfig createSSLConfig(final DistributionConfig distributionConfig,
+  private SSLConfig.Builder createSSLConfigBuilder(final DistributionConfig distributionConfig,
-    SSLConfig sslConfig = new SSLConfig();
-    sslConfig.setCiphers(distributionConfig.getSSLCiphers());
-    sslConfig
+    SSLConfig.Builder sslConfigBuilder = new SSLConfig.Builder();
+    sslConfigBuilder.setCiphers(distributionConfig.getSSLCiphers());
+    sslConfigBuilder
-    sslConfig
+    sslConfigBuilder
-    sslConfig.setKeystore(distributionConfig.getSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getSSLTrustStoreType());
-    sslConfig.setProtocols(distributionConfig.getSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getSSLRequireAuthentication());
-    sslConfig.setAlias(distributionConfig.getSSLDefaultAlias());
-    sslConfig.setUseDefaultSSLContext(distributionConfig.getSSLUseDefaultContext());
+    sslConfigBuilder.setKeystore(distributionConfig.getSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getSSLTrustStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getSSLRequireAuthentication());
+    sslConfigBuilder.setAlias(distributionConfig.getSSLDefaultAlias());
+    sslConfigBuilder.setUseDefaultSSLContext(distributionConfig.getSSLUseDefaultContext());
-    return sslConfig;
+    return sslConfigBuilder;
-   * Configure a sslConfig for the cluster using the legacy configuration
+   * Configure a SSLConfig.Builder for the cluster using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the server component
+   * @return A SSLConfig.Builder object describing the ssl config for the server component
-  private SSLConfig configureLegacyClusterSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getClusterSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getClusterSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getClusterSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getClusterSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getClusterSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getClusterSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getClusterSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getClusterSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getClusterSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getClusterSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyClusterSSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getClusterSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getClusterSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getClusterSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getClusterSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getClusterSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getClusterSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getClusterSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getClusterSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getClusterSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getClusterSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the server using the legacy configuration
+   * Configure a SSLConfig.Builder for the server using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the server component
+   * @return A SSLConfig.Builder object describing the ssl config for the server component
-  private SSLConfig configureLegacyServerSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getServerSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getServerSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getServerSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getServerSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getServerSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getServerSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getServerSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getServerSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getServerSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getServerSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyServerSSL(final DistributionConfig distributionConfig,
+      final SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getServerSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getServerSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getServerSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getServerSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getServerSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getServerSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getServerSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getServerSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getServerSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getServerSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the jmx using the legacy configuration
+   * Configure a SSLConfig.Builder for the jmx using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the jmx component
+   * @return A SSLConfig.Builder object describing the ssl config for the jmx component
-  private SSLConfig configureLegacyJMXSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getJmxManagerSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getJmxManagerSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getJmxManagerSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getJmxManagerSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getJmxManagerSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getJmxManagerSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getJmxManagerSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getJmxManagerSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyJMXSSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getJmxManagerSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getJmxManagerSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getJmxManagerSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getJmxManagerSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getJmxManagerSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getJmxManagerSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getJmxManagerSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getJmxManagerSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the gateway using the legacy configuration
+   * Configure a SSLConfig.Builder for the gateway using the legacy configuration
-  private SSLConfig configureLegacyGatewaySSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getGatewaySSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getGatewaySSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getGatewaySSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getGatewaySSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getGatewaySSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getGatewaySSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getGatewaySSLTrustStorePassword());
-    sslConfig.setProtocols(distributionConfig.getGatewaySSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getGatewaySSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyGatewaySSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getGatewaySSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getGatewaySSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getGatewaySSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getGatewaySSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getGatewaySSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getGatewaySSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getGatewaySSLTrustStorePassword());
+    sslConfigBuilder.setProtocols(distributionConfig.getGatewaySSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getGatewaySSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the http service using the legacy configuration
+   * Configure a SSLConfig.Builder for the http service using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the http service component
+   * @return A SSLConfig.Builder object describing the ssl config for the http service component
-  private SSLConfig configureLegacyHttpServiceSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getHttpServiceSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getHttpServiceSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getHttpServiceSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getHttpServiceSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getHttpServiceSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getHttpServiceSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getHttpServiceSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getHttpServiceSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyHttpServiceSSL(
+      final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getHttpServiceSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getHttpServiceSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getHttpServiceSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getHttpServiceSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getHttpServiceSSLTrustStore());
+    sslConfigBuilder
+        .setTruststorePassword(distributionConfig.getHttpServiceSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getHttpServiceSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getHttpServiceSSLRequireAuthentication());
+    return sslConfigBuilder;
-  private SSLConfig configureSSLPropertiesFromSystemProperties(SSLConfig sslConfig) {
-    return configureSSLPropertiesFromSystemProperties(sslConfig, null);
+  private SSLConfig.Builder configureSSLPropertiesFromSystemProperties(
+      SSLConfig.Builder sslConfigBuilder) {
+    return configureSSLPropertiesFromSystemProperties(sslConfigBuilder, null);
-  private SSLConfig configureSSLPropertiesFromSystemProperties(SSLConfig sslConfig,
+  private SSLConfig.Builder configureSSLPropertiesFromSystemProperties(
+      SSLConfig.Builder sslConfigBuilder,
-    if (StringUtils.isEmpty(sslConfig.getKeystore())) {
-      sslConfig.setKeystore(getValueFromSystemProperties(properties, JAVAX_KEYSTORE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystore())) {
+      sslConfigBuilder.setKeystore(getValueFromSystemProperties(properties, JAVAX_KEYSTORE));
-    if (StringUtils.isEmpty(sslConfig.getKeystoreType())) {
-      sslConfig.setKeystoreType(getValueFromSystemProperties(properties, JAVAX_KEYSTORE_TYPE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystoreType())) {
+      sslConfigBuilder
+          .setKeystoreType(getValueFromSystemProperties(properties, JAVAX_KEYSTORE_TYPE));
-    if (StringUtils.isEmpty(sslConfig.getKeystorePassword())) {
-      sslConfig
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystorePassword())) {
+      sslConfigBuilder
-    if (StringUtils.isEmpty(sslConfig.getTruststore())) {
-      sslConfig.setTruststore(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststore())) {
+      sslConfigBuilder.setTruststore(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE));
-    if (StringUtils.isEmpty(sslConfig.getTruststorePassword())) {
-      sslConfig.setTruststorePassword(
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststorePassword())) {
+      sslConfigBuilder.setTruststorePassword(
-    if (StringUtils.isEmpty(sslConfig.getTruststoreType())) {
-      sslConfig.setTruststoreType(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE_TYPE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststoreType())) {
+      sslConfigBuilder
+          .setTruststoreType(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE_TYPE));
-    return sslConfig;
+    return sslConfigBuilder;
-  private void clearSSLConfigForAllComponents() {
+  private synchronized void clearSSLConfigForAllComponents() {
-    SSLConfig sslConfig = new SSLConfig();
-    sslConfig.setAlias(alias);
-    sslConfig.setCiphers(ciphers);
-    sslConfig.setProtocols(protocols);
-    sslConfig.setRequireAuth(needClientAuth);
-    sslConfig.setEnabled(useSSL);
+    SSLConfig.Builder sslConfigBuilder = new SSLConfig.Builder();
+    sslConfigBuilder.setAlias(alias);
+    sslConfigBuilder.setCiphers(ciphers);
+    sslConfigBuilder.setProtocols(protocols);
+    sslConfigBuilder.setRequireAuth(needClientAuth);
+    sslConfigBuilder.setEnabled(useSSL);
-    sslConfig =
-        getInstance().configureSSLPropertiesFromSystemProperties(sslConfig, gfsecurityProps);
+    getInstance().configureSSLPropertiesFromSystemProperties(sslConfigBuilder, gfsecurityProps);
-    return sslConfig;
+    return sslConfigBuilder.build();
