implementation of AvailablePort.isPortAvailable for multicast

The AvailablePort utility has not had support for finding a free multicast
port since feature/GEODE-77 was merged to the develop branch.  This change-
set enables the old multicast code in AvailablePort and implements the
check & response for its datagrams in JGroupsMessenger.  The JGroups
transport method for receiving packets is overridden to look for these
datagrams and respond to them.

I also renamed AvailablePort.JGroups to AvailablePort.MULTICAST, which
describes the kind of port that's being tested a little better.

-  /** Is the port available for a JGroups (UDP) connection */
-  public static final int JGROUPS = 1;
+  /** Is the port available for a JGroups (UDP) multicast connection */
+  public static final int MULTICAST = 1;
-      else if (protocol == JGROUPS) {
+      else if (protocol == MULTICAST) {
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-    else if (protocol == JGROUPS) {
+    else if (protocol == MULTICAST) {
-        // TODO - need to find out if anyone is listening on this port
-        return true;
-
-//        socket = new MulticastSocket();
-//        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
-//        byte[] buffer = new byte[4];
-//        buffer[0] = (byte)'p';
-//        buffer[1] = (byte)'i';
-//        buffer[2] = (byte)'n';
-//        buffer[3] = (byte)'g';
-//        SocketAddress mcaddr = new InetSocketAddress(
-//          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
-//        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
-//        socket.send(packet);
-//        try {
-//          socket.receive(packet);
-//          packet.getData();  // make sure there's data, but no need to process it
-//          return false;
-//        }
-//        catch (SocketTimeoutException ste) {
-//          //System.out.println("socket read timed out");
-//          return true;
-//        }
-//        catch (Exception e) {
-//          e.printStackTrace();
-//          return false;
-//        }
-//      }
-//      catch (java.io.IOException ioe) {
-//        if (ioe.getMessage().equals("Network is unreachable")) {
-//          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
-//        }
-//        ioe.printStackTrace();
-//        return false;
-//      }
-//      catch (Exception e) {
-//        e.printStackTrace();
-//        return false;
+        socket = new MulticastSocket();
+        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
+        byte[] buffer = new byte[4];
+        buffer[0] = (byte)'p';
+        buffer[1] = (byte)'i';
+        buffer[2] = (byte)'n';
+        buffer[3] = (byte)'g';
+        SocketAddress mcaddr = new InetSocketAddress(
+          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
+        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
+        socket.send(packet);
+        try {
+          socket.receive(packet);
+          packet.getData();  // make sure there's data, but no need to process it
+          return false;
+        }
+        catch (SocketTimeoutException ste) {
+          //System.out.println("socket read timed out");
+          return true;
+        }
+        catch (Exception e) {
+          e.printStackTrace();
+          return false;
+        }
+      }
+      catch (java.io.IOException ioe) {
+        if (ioe.getMessage().equals("Network is unreachable")) {
+          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
+        }
+        ioe.printStackTrace();
+        return false;
+      }
+      catch (Exception e) {
+        e.printStackTrace();
+        return false;
-    } else if (protocol == JGROUPS) {
+    } else if (protocol == MULTICAST) {
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-        if ( !(protocol == JGROUPS && port == DistributionConfig.DEFAULT_MCAST_PORT) ){
+        if ( !(protocol == MULTICAST && port == DistributionConfig.DEFAULT_MCAST_PORT) ){
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-   *        #JGROUPS}). 
+   *        #MULTICAST}). 
-      protocol = JGROUPS;
+      protocol = MULTICAST;
