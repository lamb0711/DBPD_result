GEODE-6283: expose HttpService on InternalCache so that different comâ€¦ (#3110)

* GEODE-6283: expose HttpService on InternalCache so that different component can add their own webapps independently.

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

-package org.apache.geode.management.internal;
+package org.apache.geode.internal.cache;
+import java.util.ArrayList;
+import java.util.List;
-import java.util.concurrent.CountDownLatch;
+import org.apache.geode.management.internal.SSLUtil;
-/**
- * @since GemFire 8.1
- */
-@SuppressWarnings("unused")
-public class JettyHelper {
+public class HttpService {
-
+  private Server httpServer;
+  private String bindAddress = "0.0.0.0";
+  private int port;
+  private SSLConfig sslConfig;
-  private static String bindAddress = "0.0.0.0";
-
-  private static int port = 0;
-
-  public static Server initJetty(final String bindAddress, final int port, SSLConfig sslConfig) {
+  private List<WebAppContext> webApps = new ArrayList<>();
-    final Server jettyServer = new Server();
+  public HttpService(String bindAddress, int port, SSLConfig sslConfig) {
+    if (port == 0) {
+      return;
+    }
+    this.sslConfig = sslConfig;
+
+    this.httpServer = new Server();
-    jettyServer.setHandler(new HandlerCollection(true));
+    httpServer.setHandler(new HandlerCollection(true));
-
-      connector = new ServerConnector(jettyServer,
+      connector = new ServerConnector(httpServer,
-
-      connector = new ServerConnector(jettyServer, new HttpConnectionFactory(httpConfig));
+      connector = new ServerConnector(httpServer, new HttpConnectionFactory(httpConfig));
-    jettyServer.setConnectors(new Connector[] {connector});
+    httpServer.setConnectors(new Connector[] {connector});
-
-      JettyHelper.bindAddress = bindAddress;
+      this.bindAddress = bindAddress;
+    }
+    this.port = port;
+  }
+
+  public Server getHttpServer() {
+    return httpServer;
+  }
+
+  public synchronized void addWebApplication(String webAppContext, String warFilePath,
+      Pair<String, Object>... attributeNameValuePairs)
+      throws Exception {
+    if (httpServer == null) {
+      logger.info(
+          String.format("unable to add %s webapp. Http service is not started on this member.",
+              webAppContext));
+      return;
-    JettyHelper.port = port;
-
-    return jettyServer;
-  }
-
-
-  public static Server startJetty(final Server jetty) throws Exception {
-    jetty.start();
-    return jetty;
-  }
-
-  public static WebAppContext addWebApplication(final Server jetty, final String webAppContext,
-      final String warFilePath,
-      Pair<String, Object>... attributeNameValuePairs) {
-    ((HandlerCollection) jetty.getHandler()).addHandler(webapp);
-    // if we are adding this webapp after the jetty server has already started, we will need to
-    // manually start the webapp.
-    if (jetty.isStarted()) {
-      try {
-        webapp.start();
-      } catch (Exception e) {
-        logger.error(e.getMessage(), e);
-      }
+    logger.info("Adding webapp " + webAppContext);
+    ((HandlerCollection) httpServer.getHandler()).addHandler(webapp);
+
+    // if the server is not started yet start the server, otherwise, start the webapp alone
+    if (!httpServer.isStarted()) {
+      logger.info("Attempting to start HTTP service on port ({}) at bind-address ({})...",
+          this.port, this.bindAddress);
+      httpServer.start();
+    } else {
+      webapp.start();
-    return webapp;
+    webApps.add(webapp);
-  private static String getWebAppBaseDirectory(final String context) {
+  private String getWebAppBaseDirectory(final String context) {
-  private static final CountDownLatch latch = new CountDownLatch(1);
+  public void stop() {
+    if (this.httpServer == null) {
+      return;
+    }
-  private static String normalizeWebAppArchivePath(final String webAppArchivePath) {
-    return (webAppArchivePath.startsWith(File.separator) ? new File(webAppArchivePath)
-        : new File(".", webAppArchivePath)).getAbsolutePath();
+    logger.debug("Stopping the HTTP service...");
+    try {
+      for (WebAppContext webapp : webApps) {
+        webapp.stop();
+      }
+      this.httpServer.stop();
+    } catch (Exception e) {
+      logger.warn("Failed to stop the HTTP service because: {}", e.getMessage(), e);
+    } finally {
+      try {
+        this.httpServer.destroy();
+      } catch (Exception ignore) {
+        logger.info("Failed to properly release resources held by the HTTP service: {}",
+            ignore.getMessage(), ignore);
+      } finally {
+        this.httpServer = null;
+        System.clearProperty("catalina.base");
+        System.clearProperty("catalina.home");
+      }
+    }
-
-  private static String normalizeWebAppContext(final String webAppContext) {
-    return (webAppContext.startsWith("/") ? webAppContext : "/" + webAppContext);
-  }
-
