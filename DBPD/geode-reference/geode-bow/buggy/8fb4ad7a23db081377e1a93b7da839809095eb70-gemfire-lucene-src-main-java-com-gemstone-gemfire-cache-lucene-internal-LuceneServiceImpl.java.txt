Refactoring LuceneFunction, LuceneQueryProvider, and LuceneQueryFactory

LuceneFunction had a static RepositoryManager, I changed the code to get
look up the RepositoryManager from the LuceneService.

As part of that work, I noticed StringQueryProvider really needed access
to the index to lookup the field names, analyzer, etc. So I changed the
getQuery method to take an index, and removed the unneeded string
parameters.

Finally, I removed some of the mocking from
LuceneFunctionReadPathDUnitTest, which exposed some other issues:

* I switched RepositoryManager.getRepositories back to using a
RegionFunctionContext, because apparently context.getDataSet is *not*
the local data set.

* I canonicalized the regionPaths in LuceneService

-import com.gemstone.gemfire.cache.lucene.LuceneService;
-import com.gemstone.gemfire.internal.cache.extension.Extension;
-public class LuceneServiceImpl implements LuceneService, Extension<Cache> {
+public class LuceneServiceImpl implements InternalLuceneService {
-    registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    registerIndex(index);
+    //Convert the region name into a canonical form
+    
+    regionPath = dataregion.getFullPath();
-    return indexMap.get(getUniqueIndexName(indexName, regionPath));
+    Region region = cache.getRegion(regionPath);
+    if(region == null) {
+      return null;
+    }
+    return indexMap.get(getUniqueIndexName(indexName, region.getFullPath()));
-    registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    registerIndex(index);
-  public void registerIndex(final String regionAndIndex, LuceneIndex index){
+  public void registerIndex(LuceneIndex index){
+    String regionAndIndex = getUniqueIndexName(index.getName(), index.getRegionPath()); 
