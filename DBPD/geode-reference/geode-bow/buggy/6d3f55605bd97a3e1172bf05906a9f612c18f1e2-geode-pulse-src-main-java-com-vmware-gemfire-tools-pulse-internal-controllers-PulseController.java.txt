GEODE-907: Converted core functionality to use jackson

-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.HttpSession;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.vmware.gemfire.tools.pulse.internal.data.Cluster;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseVersion;
+import com.vmware.gemfire.tools.pulse.internal.data.Repository;
+import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
+import com.vmware.gemfire.tools.pulse.internal.service.PulseService;
+import com.vmware.gemfire.tools.pulse.internal.service.PulseServiceFactory;
+import com.vmware.gemfire.tools.pulse.internal.service.SystemAlertsService;
+import com.vmware.gemfire.tools.pulse.internal.util.StringUtils;
-import com.vmware.gemfire.tools.pulse.internal.data.Cluster;
-import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
-import com.vmware.gemfire.tools.pulse.internal.data.PulseVersion;
-import com.vmware.gemfire.tools.pulse.internal.data.Repository;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONArray;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONException;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONObject;
-import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
-import com.vmware.gemfire.tools.pulse.internal.service.PulseService;
-import com.vmware.gemfire.tools.pulse.internal.service.PulseServiceFactory;
-import com.vmware.gemfire.tools.pulse.internal.service.SystemAlertsService;
-import com.vmware.gemfire.tools.pulse.internal.util.StringUtils;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+  private static final PulseLogWriter LOGGER = PulseLogWriter.getLogger();
+
-  private final JSONObject NoDataJSON = new JSONObject();
+  private static final String EMPTY_JSON = "{}";
+
+  private final ObjectMapper mapper = new ObjectMapper();
+
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseMap = new JSONObject();
+    ObjectNode responseMap = mapper.createObjectNode();
-    JSONObject requestMap = null;
+    JsonNode requestMap = null;
-      requestMap = new JSONObject(pulseData);
-      Iterator<?> keys = requestMap.keys();
+      requestMap = mapper.readTree(pulseData);
+      Iterator<?> keys = requestMap.fieldNames();
-          responseMap.put(serviceName, pulseService.execute(request));
+          responseMap.put(serviceName, pulseService.tempExecute(request));
-          responseMap.put(serviceName, NoDataJSON);
+          responseMap.put(serviceName, EMPTY_JSON);
-
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(new JSONException(eJSON),
-          new String[] { "requestMap:"
-              + ((requestMap == null) ? "" : requestMap) });
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, null);
-
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
+
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-      responseJSON.put("pulseVersion",
-          PulseController.pulseVersion.getPulseVersion());
-      responseJSON.put("buildId",
-          PulseController.pulseVersion.getPulseBuildId());
-      responseJSON.put("buildDate",
-          PulseController.pulseVersion.getPulseBuildDate());
-      responseJSON.put("sourceDate",
-          PulseController.pulseVersion.getPulseSourceDate());
-      responseJSON.put("sourceRevision",
-          PulseController.pulseVersion.getPulseSourceRevision());
-      responseJSON.put("sourceRepository",
-          PulseController.pulseVersion.getPulseSourceRepository());
+      responseJSON.put("pulseVersion", PulseController.pulseVersion.getPulseVersion());
+      responseJSON.put("buildId", PulseController.pulseVersion.getPulseBuildId());
+      responseJSON.put("buildDate", PulseController.pulseVersion.getPulseBuildDate());
+      responseJSON.put("sourceDate", PulseController.pulseVersion.getPulseSourceDate());
+      responseJSON.put("sourceRevision", PulseController.pulseVersion.getPulseSourceRevision());
+      responseJSON.put("sourceRepository", PulseController.pulseVersion.getPulseSourceRepository());
-    } catch (JSONException eJSON) {
-      LOGGER
-          .logJSONError(eJSON, new String[] { "pulseVersionData :"
-              + PulseController.pulseVersion });
-  public void clearAlerts(HttpServletRequest request,
-      HttpServletResponse response) throws IOException {
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
+  public void clearAlerts(HttpServletRequest request, HttpServletResponse response) throws IOException {
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
+
-
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, null);
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, null);
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
-    List<JSONObject> regionsData = Collections.emptyList();
+    ObjectNode responseJSON = mapper.createObjectNode();
+    ArrayNode regionsData = mapper.createArrayNode();
-
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(
-          eJSON,
-          new String[] { "clusterName:" + cluster.getServerName(),
-              "clusterRegions:" + regionsData,
-              "connectedFlag:" + cluster.isConnectedFlag(),
-              "connectedErrorMsg:" + cluster.getConnectionErrorMsg() });
-   * @return JSONObject Array List
+   * @return ArrayNode JSON array
-  private List<JSONObject> getRegionsJson(Cluster cluster) throws JSONException {
+  private ArrayNode getRegionsJson(Cluster cluster) {
-    Collection<Cluster.Region> clusterRegions = cluster.getClusterRegions()
-        .values();
-    List<JSONObject> regionsListJson = new ArrayList<JSONObject>();
+    Collection<Cluster.Region> clusterRegions = cluster.getClusterRegions().values();
+    ArrayNode regionsListJson = mapper.createArrayNode();
-        JSONObject regionJSON = new JSONObject();
-
+        ObjectNode regionJSON = mapper.createObjectNode();
-        if(region.getRegionType().contains("PARTITION")){
+
+        if (region.getRegionType().contains("PARTITION")) {
-        }else{
+        } else {
+
-        JSONArray jsonRegionMembers = new JSONArray();
+        ArrayNode jsonRegionMembers = mapper.createArrayNode();
+
-          JSONObject jsonMember = new JSONObject();
+          ObjectNode jsonMember = mapper.createObjectNode();
-          jsonRegionMembers.put(jsonMember);
+          jsonRegionMembers.add(jsonMember);
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject queryResult = new JSONObject();
+    ObjectNode queryResult = mapper.createObjectNode();
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, new String[] { "queryResult:" + queryResult });
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
-    JSONArray queryResult = null;
+    ObjectNode responseJSON = mapper.createObjectNode();
+    ArrayNode queryResult = null;
-    try {
+    try {
-
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, new String[] { "action:" + action,
-          "queryResult:" + queryResult });
-      response.setHeader("Content-Disposition", "attachment; filename="
-          + filename);
+      response.setHeader("Content-Disposition", "attachment; filename=" + filename);
-      response.setHeader("Content-Disposition", "attachment; filename="
-          + DEFAULT_EXPORT_FILENAME);
+      response.setHeader("Content-Disposition", "attachment; filename=" + DEFAULT_EXPORT_FILENAME);
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
+      ObjectNode responseJSON = mapper.createObjectNode();
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, null);
-        LOGGER.fine("Exception Occured : " + e.getMessage());
+        LOGGER.fine("Exception Occurred : " + e.getMessage());
-    PulseLogWriter LOGGER = PulseLogWriter.getLogger();
-    JSONObject responseJSON = new JSONObject();
+
+    ObjectNode responseJSON = mapper.createObjectNode();
-      JSONArray colNamesList = new JSONArray();
+      ArrayNode colNamesList = mapper.createArrayNode();
-        colNamesList.put(arrColNames[i]);
+        colNamesList.add(arrColNames[i]);
-      JSONArray colModelList = new JSONArray();
-      JSONObject columnJSON = null;
+      ArrayNode colModelList = mapper.createArrayNode();
-        columnJSON = new JSONObject();
+        ObjectNode columnJSON = mapper.createObjectNode();
-        colModelList.put(columnJSON);
+        colModelList.add(columnJSON);
-    } catch (JSONException eJSON) {
-      LOGGER.logJSONError(eJSON, null);
-
