GEODE-1243: Locator can start on ephemeral port

-import java.util.concurrent.ExecutionException;
-import com.gemstone.gemfire.InternalGemFireException;
-  
-  
+
-    this.port = port;
-    
-
-      this.locatorListener.setPort(this.port);
+      // We defer setting the port until the handler is init'd - that way we'll have an actual port in the
+      // case where we're starting with port = 0.
-    this.handler = new PrimaryHandler(this.port, this, locatorListener);
+    this.handler = new PrimaryHandler(this, locatorListener);
-    server = new TcpServer(this.port, this.bindAddress, null, this.config,
+    server = new TcpServer(port, this.bindAddress, null, this.config,
-        sb.append('[').append(port).append(']');
+        sb.append('[').append(getPort()).append(']');
-      this.locatorDiscoverer.discover(this.port, config, locatorListener);
+      this.locatorDiscoverer.discover(getPort(), config, locatorListener);
-    ServerLocator sl = new ServerLocator(this.port, 
+    ServerLocator sl = new ServerLocator(getPort(),
-        stopLocator(this.port, this.bindAddress);
+        stopLocator(getPort(), this.bindAddress);
-  
+
+  /**
+   * Return the port on which the locator is actually listening. If called before the locator has actually
+   * started, this method will return null.
+   *
+   * @return the port the locator is listening on or null if it has not yet been started
+   */
+  public Integer getPort() {
+    if (server != null) {
+      return server.getPort();
+    }
+    return null;
+  }
-    InternalLocator interalLocator;
+    private InternalLocator internalLocator;
-    public PrimaryHandler(int port, InternalLocator locator,
+    public PrimaryHandler(InternalLocator locator,
-      interalLocator = locator;
+      internalLocator = locator;
+      if (this.locatorListener != null) {
+        // This is deferred until now as the initial requested port could have been 0
+        this.locatorListener.setPort(internalLocator.getPort());
+      }
-        this.interalLocator.handleShutdown();
+        this.internalLocator.handleShutdown();
