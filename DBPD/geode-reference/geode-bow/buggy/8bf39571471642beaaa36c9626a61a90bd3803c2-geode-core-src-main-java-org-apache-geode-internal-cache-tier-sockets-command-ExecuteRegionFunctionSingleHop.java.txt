Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private final static ExecuteRegionFunctionSingleHop singleton = new ExecuteRegionFunctionSingleHop();
+  private final static ExecuteRegionFunctionSingleHop singleton =
+      new ExecuteRegionFunctionSingleHop();
-  private ExecuteRegionFunctionSingleHop() {
-  }
+  private ExecuteRegionFunctionSingleHop() {}
-      if (bytes.length >= 5 && servConn.getClientVersion().ordinal() >= Version.GFE_8009.ordinal()) {
+      if (bytes.length >= 5
+          && servConn.getClientVersion().ordinal() >= Version.GFE_8009.ordinal()) {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), exception);
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), exception);
-        message = LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL.toLocalizedString("function");
+        message =
+            LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
+                .toLocalizedString("function");
-        message = LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL.toLocalizedString("region");
+        message =
+            LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
+                .toLocalizedString("region");
-      String message = LocalizedStrings.ExecuteRegionFunction_THE_REGION_NAMED_0_WAS_NOT_FOUND_DURING_EXECUTE_FUNCTION_REQUEST
-        .toLocalizedString(regionName);
+      String message =
+          LocalizedStrings.ExecuteRegionFunction_THE_REGION_NAMED_0_WAS_NOT_FOUND_DURING_EXECUTE_FUNCTION_REQUEST
+              .toLocalizedString(regionName);
-          String message = LocalizedStrings.
-            ExecuteRegionFunction_THE_FUNCTION_0_HAS_NOT_BEEN_REGISTERED.toLocalizedString(function);
+          String message =
+              LocalizedStrings.ExecuteRegionFunction_THE_FUNCTION_0_HAS_NOT_BEEN_REGISTERED
+                  .toLocalizedString(function);
-          byte functionStateOnServer = AbstractExecution.getFunctionState(functionObject.isHA(), functionObject.hasResult(), functionObject
-            .optimizeForWrite());
+          byte functionStateOnServer = AbstractExecution.getFunctionState(functionObject.isHA(),
+              functionObject.hasResult(), functionObject.optimizeForWrite());
-            String message = LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER.toLocalizedString(function);
+            String message =
+                LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
+                    .toLocalizedString(function);
-        executeContext = authzRequest.executeFunctionAuthorize(functionName, regionPath, filter, args, functionObject.optimizeForWrite());
+        executeContext = authzRequest.executeFunctionAuthorize(functionName, regionPath, filter,
+            args, functionObject.optimizeForWrite());
-      //Construct execution
+      // Construct execution
-      resultSender = new ServerToClientFunctionResultSender65(m, MessageType.EXECUTE_REGION_FUNCTION_RESULT, servConn, functionObject, executeContext);
+      resultSender = new ServerToClientFunctionResultSender65(m,
+          MessageType.EXECUTE_REGION_FUNCTION_RESULT, servConn, functionObject, executeContext);
-        execution = new PartitionedRegionFunctionExecutor((PartitionedRegion) region, buckets, args, memberMappedArg, resultSender, removedNodesSet, true, true);
+        execution = new PartitionedRegionFunctionExecutor((PartitionedRegion) region, buckets, args,
+            memberMappedArg, resultSender, removedNodesSet, true, true);
-        execution = new PartitionedRegionFunctionExecutor((PartitionedRegion) region, filter, args, memberMappedArg, resultSender, removedNodesSet, false, true);
+        execution = new PartitionedRegionFunctionExecutor((PartitionedRegion) region, filter, args,
+            memberMappedArg, resultSender, removedNodesSet, false, true);
-        logger.debug("Executing Function: {} on Server: {} with Execution: {}", functionObject.getId(), servConn, execution);
+        logger.debug("Executing Function: {} on Server: {} with Execution: {}",
+            functionObject.getId(), servConn, execution);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), ioe);
-      final String message = LocalizedStrings.
-        ExecuteRegionFunction_SERVER_COULD_NOT_SEND_THE_REPLY.toLocalizedString();
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), ioe);
+      final String message = LocalizedStrings.ExecuteRegionFunction_SERVER_COULD_NOT_SEND_THE_REPLY
+          .toLocalizedString();
-          logger.debug("Exception on server while executing function: {}: {}", function, message, fe);
+          logger.debug("Exception on server while executing function: {}: {}", function, message,
+              fe);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), fe);
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+            function), fe);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), e);
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), e);
-  private void sendException(byte hasResult, Message msg, String message, ServerConnection servConn, Throwable e)
-    throws IOException {
+  private void sendException(byte hasResult, Message msg, String message, ServerConnection servConn,
+      Throwable e) throws IOException {
-  private void sendError(byte hasResult, Message msg, String message, ServerConnection servConn) throws IOException {
+  private void sendError(byte hasResult, Message msg, String message, ServerConnection servConn)
+      throws IOException {
-        writeFunctionResponseError(msg, MessageType.EXECUTE_REGION_FUNCTION_ERROR, message, servConn);
+        writeFunctionResponseError(msg, MessageType.EXECUTE_REGION_FUNCTION_ERROR, message,
+            servConn);
-  protected static void writeFunctionResponseException(Message origMsg,
-                                                       int messageType,
-                                                       String message,
-                                                       ServerConnection servConn,
-                                                       Throwable e) throws IOException {
+  protected static void writeFunctionResponseException(Message origMsg, int messageType,
+      String message, ServerConnection servConn, Throwable e) throws IOException {
-      if (e instanceof FunctionException && e.getCause() instanceof InternalFunctionInvocationTargetException) {
+      if (e instanceof FunctionException
+          && e.getCause() instanceof InternalFunctionInvocationTargetException) {
-        InternalFunctionInvocationTargetException fe = (InternalFunctionInvocationTargetException) e.getCause();
+        InternalFunctionInvocationTargetException fe =
+            (InternalFunctionInvocationTargetException) e.getCause();
-        logger.debug("{}: Sending exception chunk while reply in progress: ", servConn.getName(), e);
+        logger.debug("{}: Sending exception chunk while reply in progress: ", servConn.getName(),
+            e);
-      if (e instanceof FunctionException && e.getCause() instanceof InternalFunctionInvocationTargetException) {
+      if (e instanceof FunctionException
+          && e.getCause() instanceof InternalFunctionInvocationTargetException) {
-        InternalFunctionInvocationTargetException fe = (InternalFunctionInvocationTargetException) e.getCause();
+        InternalFunctionInvocationTargetException fe =
+            (InternalFunctionInvocationTargetException) e.getCause();
