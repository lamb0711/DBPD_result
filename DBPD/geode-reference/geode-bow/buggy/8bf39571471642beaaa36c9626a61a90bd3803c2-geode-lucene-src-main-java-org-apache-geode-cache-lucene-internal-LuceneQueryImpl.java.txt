Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  // The projected fields are local to a specific index per Query object. 
+  // The projected fields are local to a specific index per Query object.
-  
-  public LuceneQueryImpl(String indexName, Region<K, V> region, LuceneQueryProvider provider, String[] projectionFields,
-      int limit, int pageSize) {
+
+  public LuceneQueryImpl(String indexName, Region<K, V> region, LuceneQueryProvider provider,
+      String[] projectionFields, int limit, int pageSize) {
-    return hits.stream()
-      .map(hit -> hit.getKey())
-      .collect(Collectors.toList());
+    return hits.stream().map(hit -> hit.getKey()).collect(Collectors.toList());
-    return page.stream()
-      .map(entry -> entry.getValue())
-      .collect(Collectors.toList());
+    return page.stream().map(entry -> entry.getValue()).collect(Collectors.toList());
-    if(!pages.hasNext()) {
+    if (!pages.hasNext()) {
-    LuceneFunctionContext<TopEntriesCollector> context = new LuceneFunctionContext<>(query, indexName, manager, limit);
+    LuceneFunctionContext<TopEntriesCollector> context =
+        new LuceneFunctionContext<>(query, indexName, manager, limit);
-    ResultCollector<TopEntriesCollector, TopEntries<K>> rc = (ResultCollector<TopEntriesCollector, TopEntries<K>>) onRegion()
-        .withArgs(context)
-        .withCollector(collector)
-        .execute(LuceneFunction.ID);
+    ResultCollector<TopEntriesCollector, TopEntries<K>> rc =
+        (ResultCollector<TopEntriesCollector, TopEntries<K>>) onRegion().withArgs(context)
+            .withCollector(collector).execute(LuceneFunction.ID);
-    //TODO provide a timeout to the user?
+    // TODO provide a timeout to the user?
-    } catch(FunctionException e) {
-      if(e.getCause() instanceof LuceneQueryException) {
+    } catch (FunctionException e) {
+      if (e.getCause() instanceof LuceneQueryException) {
