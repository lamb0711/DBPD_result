GEODE-3894: Create HandshakeRequest

added connection state processors to inject protocol state specific
functionality refactored existing authentication and authorization flows to use
connection state processors added new handshake message, handler, and state
processor

Signed-off-by: Bruce Schuchardt <bschuchardt@pivotal.io>

+import org.apache.geode.internal.protocol.state.ConnectionAuthenticatingStateProcessor;
+import org.apache.geode.internal.protocol.state.ConnectionStateProcessor;
+import org.apache.geode.internal.protocol.state.exception.ConnectionStateException;
+import org.apache.geode.internal.protocol.protobuf.ConnectionAPI;
+import org.apache.geode.internal.protocol.protobuf.utilities.ProtobufResponseUtilities;
-import org.apache.geode.internal.protocol.protobuf.AuthenticationAPI;
-import org.apache.geode.internal.protocol.security.processors.AuthorizationSecurityProcessor;
-import org.apache.geode.internal.protocol.security.Authenticator;
-    OperationHandler<AuthenticationAPI.AuthenticationRequest, AuthenticationAPI.AuthenticationResponse, ClientProtocol.ErrorResponse> {
+    OperationHandler<ConnectionAPI.AuthenticationRequest, ConnectionAPI.AuthenticationResponse, ClientProtocol.ErrorResponse> {
-  public Result<AuthenticationAPI.AuthenticationResponse, ClientProtocol.ErrorResponse> process(
-      SerializationService serializationService, AuthenticationAPI.AuthenticationRequest request,
+  public Result<ConnectionAPI.AuthenticationResponse, ClientProtocol.ErrorResponse> process(
+      SerializationService serializationService, ConnectionAPI.AuthenticationRequest request,
+    ConnectionAuthenticatingStateProcessor stateProcessor;
-    if (messageExecutionContext.getAuthenticationToken() != null) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(buildAndLogError(ProtocolErrorCode.ALREADY_AUTHENTICATED,
-              "The user has already been authenticated for this connection. Re-authentication is not supported at this time.",
-              null))
-          .build());
+    try {
+      stateProcessor = messageExecutionContext.getConnectionStateProcessor().allowAuthentication();
+    } catch (ConnectionStateException e) {
+      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(e));
-    Authenticator authenticator = messageExecutionContext.getAuthenticator();
-      Object authenticationToken = authenticator.authenticate(properties);
-      messageExecutionContext.setSecurityProcessor(new AuthorizationSecurityProcessor());
-      messageExecutionContext.setAuthenticationToken(authenticationToken);
+      messageExecutionContext.setConnectionStateProcessor(stateProcessor.authenticate(properties));
-          .of(AuthenticationAPI.AuthenticationResponse.newBuilder().setAuthenticated(true).build());
+          .of(ConnectionAPI.AuthenticationResponse.newBuilder().setAuthenticated(true).build());
-      return Success.of(
-          AuthenticationAPI.AuthenticationResponse.newBuilder().setAuthenticated(false).build());
+      return Success
+          .of(ConnectionAPI.AuthenticationResponse.newBuilder().setAuthenticated(false).build());
