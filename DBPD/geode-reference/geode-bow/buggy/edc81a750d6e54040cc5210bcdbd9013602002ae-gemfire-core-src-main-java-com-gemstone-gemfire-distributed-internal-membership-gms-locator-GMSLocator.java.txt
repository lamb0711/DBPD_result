GEODE-77 adding additional test coverage

Test coverage is now > 71% for all membership services.
This also fixes a problem in GMSJoinLeave.join where a member that
was shut down & restarted with a start-locator setting formed a
split-brain.  Now we send a collection of previously attempted
coordinators with FindCoordinator requests, and a member receiving
a join request will check to see if the new member ought to assume
the role of coordinator.  See LocatorDUnitTest.testCollocatedLocatorWithSecurity.

+import java.util.Collection;
+import java.util.Collections;
+
+import com.gemstone.gemfire.distributed.internal.LocatorStats;
+  private final LocatorStats stats;
+   * @param stats the locator statistics object
-                      boolean networkPartitionDetectionEnabled) {
+                      boolean networkPartitionDetectionEnabled, LocatorStats stats) {
+    this.stats = stats;
-      this.view = services.getJoinLeave().getView();
+      NetView newView = services.getJoinLeave().getView();
+      if (newView != null) {
+        this.view = newView;
+      }
-    if (logger.isDebugEnabled()) {
-      logger.debug("Peer locator processing " + request);
+    if (logger.isInfoEnabled()) {
+      logger.info("Peer locator processing {}", request);
-          coord = view.getCoordinator();
+          coord = view.getCoordinator(findRequest.getRejectedCoordinators());
+          logger.info("Peer locator: coordinator from view is {}", coord);
+          Collection<InternalDistributedMember> rejections = findRequest.getRejectedCoordinators();
+          if (rejections == null) {
+            rejections = Collections.emptyList();
+          }
-                if (mbr.getNetMember().preferredForCoordinator() || !mbr.getNetMember().splitBrainEnabled()) {
+                if (!rejections.contains(mbr)
+                    && (mbr.getNetMember().preferredForCoordinator() || !mbr.getNetMember().splitBrainEnabled())) {
+            logger.info("Peer locator: coordinator from registrations is {}", coord);
-    // place holder for statistics
+    stats.endLocatorRequest(startTime);
-    // place holder for statistics
+    stats.endLocatorResponse(startTime);
+    // nothing to do for GMSLocator
-    if (locators.isEmpty()) {
-      return false;
-    }
-
-    } catch (IOException | ClassNotFoundException ignore) {}
+    } catch (IOException | ClassNotFoundException ignore) {
+      logger.info("Peer locator could not recover membership view from {}: {}", other, ignore.getMessage());
+    }
-      int version = ois.readInt();
-      Version geodeVersion = Version.fromOrdinalNoThrow((short)version, false);
-      if (geodeVersion != null  &&  version == Version.CURRENT_ORDINAL) {
+      ObjectInput ois2 = ois;
+      int version = ois2.readInt();
+      if (version != Version.CURRENT_ORDINAL) {
+        Version geodeVersion = Version.fromOrdinalNoThrow((short)version, false);
-        ObjectInput ois2 = new VersionedObjectInput(ois, geodeVersion);
-        this.view = DataSerializer.readObject(ois2);
-        logger.info("Initial membership is " + view);
-        return true;
+        ois2 = new VersionedObjectInput(ois2, geodeVersion);
-      return false;
+    
+      this.view = DataSerializer.readObject(ois2);
+      logger.info("Peer locator initial membership is " + view);
+      return true;
+
