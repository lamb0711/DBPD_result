GEODE-420: Initial Alias defintion and removal of deprecated SSL-ENABLED properties

+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.atomic.AtomicBoolean;
+import javax.management.AttributeNotFoundException;
+import javax.management.InstanceNotFoundException;
+import javax.management.JMX;
+import javax.management.MBeanException;
+import javax.management.MBeanServerConnection;
+import javax.management.MalformedObjectNameException;
+import javax.management.Notification;
+import javax.management.NotificationListener;
+import javax.management.ObjectName;
+import javax.management.QueryExp;
+import javax.management.ReflectionException;
+import javax.management.remote.JMXConnectionNotification;
+import javax.management.remote.JMXConnector;
+import javax.management.remote.JMXConnectorFactory;
+import javax.management.remote.JMXServiceURL;
+import javax.rmi.ssl.SslRMIClientSocketFactory;
+
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import javax.management.*;
-import javax.management.remote.JMXConnectionNotification;
-import javax.management.remote.JMXConnector;
-import javax.management.remote.JMXConnectorFactory;
-import javax.management.remote.JMXServiceURL;
-import javax.rmi.ssl.SslRMIClientSocketFactory;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.text.MessageFormat;
-import java.util.*;
-import java.util.Map.Entry;
-import java.util.concurrent.atomic.AtomicBoolean;
-
- *
- *
-                             final Map<String, String> sslConfigProps, String gfSecurityPropertiesPath)
-    throws Exception
-  {
+                             final Map<String, String> sslConfigProps,
+                             String gfSecurityPropertiesPath) throws Exception {
-      }      
+      }
-      for (Iterator<Entry<String, String>> it = entrySet.iterator(); it.hasNext();) {
+      for (Iterator<Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) {
-        if (key.startsWith("javax.") || key.startsWith("cluster-ssl") || key.startsWith(JMX_MANAGER_SSL)) {
-          key =  checkforSystemPropertyPrefix(entry.getKey());
-          if((key.equals(Gfsh.SSL_ENABLED_CIPHERS) || key.equals(Gfsh.SSL_ENABLED_PROTOCOLS)) && "any".equals(value)){
+        if (key.startsWith("javax.") || key.startsWith(DistributionConfig.CLUSTER_SSL_PREFIX) || key.startsWith(JMX_MANAGER_SSL_PREFIX)) {
+          key = checkforSystemPropertyPrefix(entry.getKey());
+          if ((key.equals(Gfsh.SSL_ENABLED_CIPHERS) || key.equals(Gfsh.SSL_ENABLED_PROTOCOLS)) && "any".equals(value)) {
-      if(!sslConfigProps.isEmpty()){
+      if (!sslConfigProps.isEmpty()) {
-      if(!env.containsKey(JMXConnector.CREDENTIALS)) {
+      if (!env.containsKey(JMXConnector.CREDENTIALS)) {
-      this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT, checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));      
+      this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT, checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));
-      if (this.distributedSystemMXBeanProxy == null ) {
-        LogWrapper.getInstance().info("DistributedSystemMXBean is not present on member with endpoints : "+this.endpoints);
+      if (this.distributedSystemMXBeanProxy == null) {
+        LogWrapper.getInstance().info("DistributedSystemMXBean is not present on member with endpoints : " + this.endpoints);
-      }
-      else {
+      } else {
-          LogWrapper.getInstance().info("MemberMXBean with ObjectName "+this.managerMemberObjectName+" is not present on member with endpoints : "+endpoints);
+          LogWrapper.getInstance()
+                    .info("MemberMXBean with ObjectName " + this.managerMemberObjectName + " is not present on member with endpoints : " + endpoints);
-        }
-        else {
+        } else {
-    }
-    catch (NullPointerException e) {
+    } catch (NullPointerException e) {
-    }
-    catch (MalformedURLException e) {
+    } catch (MalformedURLException e) {
-    }
-    catch (IOException e) {
+    } catch (IOException e) {
-    }
-    finally {
+    } finally {
-      gfshInstance.logToFile("Using security properties file : "
-              + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
+      gfshInstance.logToFile("Using security properties file : " + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
-        throw new RuntimeException(CliStrings.format(
-            CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0,
-                CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath())), io);
+        throw new RuntimeException(CliStrings.format(CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0, CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl
+          .getPath())), io);
-    if (key.startsWith("javax."))
+    if (key.startsWith("javax.")) {
-    if (key.startsWith("cluster-ssl") || key.startsWith(JMX_MANAGER_SSL)) {
+    }
+    if (key.startsWith(CLUSTER_SSL_PREFIX) || key.startsWith(JMX_MANAGER_SSL_PREFIX)) {
-    }    
-    return returnKey;    
+    }
+    return returnKey;
-      throw new JMXInvocationException("Couldn't find "+attributeName+" for " + resourceName, e);
+      throw new JMXInvocationException("Couldn't find " + attributeName + " for " + resourceName, e);
-   *
+   *
+   *
-      throw new JMXInvocationException("Couldn't find "+operationName+" on " + resource + " with arguments "+Arrays.toString(signature), e);
+      throw new JMXInvocationException("Couldn't find " + operationName + " on " + resource + " with arguments " + Arrays.toString(signature), e);
-      throw new JMXInvocationException(String.format("Failed to communicate with the remote MBean server at (%1$s)!",
-        toString()), e);
+      throw new JMXInvocationException(String.format("Failed to communicate with the remote MBean server at (%1$s)!", toString()), e);
-      return memberMXBeanProxy.processCommand(commandRequest.getInput(), commandRequest.getEnvironment(),
-        ArrayUtils.toByteArray(commandRequest.getFileData()));
-    }
-    else {
+      return memberMXBeanProxy.processCommand(commandRequest.getInput(), commandRequest.getEnvironment(), ArrayUtils.toByteArray(commandRequest.getFileData()));
+    } else {
-    if (DistributedSystemMXBean.class.equals(mbeanInterface)
-      && ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN.equals(objectName.toString())) {
+    if (DistributedSystemMXBean.class.equals(mbeanInterface) && ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN.equals(objectName.toString())) {
-    }
-    else if (JMX.isMXBeanInterface(mbeanInterface)) {
+    } else if (JMX.isMXBeanInterface(mbeanInterface)) {
-    }
-    else {
+    } else {
+   * @param hostAddress host address to check if it's an IPv6 address
-   * @param hostAddress
-   *          host address to check if it's an IPv6 address
-   *         returns the same string
+   * returns the same string
- *
+
-  public static final long CHECK_PERIOD        = 1000L;
+  public static final long CHECK_PERIOD = 1000L;
-  JMXConnectionListener (JmxOperationInvoker invoker) {
+  JMXConnectionListener(JmxOperationInvoker invoker) {
+
-      JMXConnectionNotification connNotif = (JMXConnectionNotification)notification;
-      if (JMXConnectionNotification.CLOSED.equals(connNotif.getType()) ||
-          JMXConnectionNotification.FAILED.equals(connNotif.getType())) {
+      JMXConnectionNotification connNotif = (JMXConnectionNotification) notification;
+      if (JMXConnectionNotification.CLOSED.equals(connNotif.getType()) || JMXConnectionNotification.FAILED.equals(connNotif.getType())) {
