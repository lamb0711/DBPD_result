GEODE-3472: Remove a great deal of commented-out code.

* this closes #748

-import java.net.MalformedURLException;
+import java.security.SecureRandom;
-import javax.net.ssl.HostnameVerifier;
-  public final static int CONNECT_LOCATOR_TIMEOUT_MS = 60000; // see bug 45971
+  static final int CONNECT_LOCATOR_TIMEOUT_MS = 60000; // see bug 45971
-  static UserInputProperty[] USERINPUTPROPERTIES =
+  private static UserInputProperty[] USERINPUTPROPERTIES =
-          help = "When connecting via HTTP, connects using 1-way SSL validation rather than 2-way SSL validation.") boolean skipSslValidation)
-      throws MalformedURLException {
+          help = "When connecting via HTTP, connects using 1-way SSL validation rather than 2-way SSL validation.") boolean skipSslValidation) {
-    if (sslOptions == null) {
-      return false;
-    }
-    return Arrays.stream(sslOptions).anyMatch(Objects::nonNull);
+    return sslOptions != null && Arrays.stream(sslOptions).anyMatch(Objects::nonNull);
-    } catch (Exception e) {
-      // all other exceptions, just logs it and returns a connection error
-      if (!(e instanceof SecurityException) && !(e instanceof AuthenticationFailedException)) {
-        return handleExcpetion(e, null);
-      }
-
-      // if it's security exception, and we already sent in username and password, still retuns the
+    } catch (SecurityException | AuthenticationFailedException e) {
+      // if it's security exception, and we already sent in username and password, still returns the
-        return handleExcpetion(e, null);
+        return handleException(e);
-      // otherwise, prompt for username and password and retry the conenction
+      // otherwise, prompt for username and password and retry the connection
-
+    } catch (Exception e) {
+      // all other exceptions, just logs it and returns a connection error
+      return handleException(e);
-    } catch (Exception e) {
-      // all other exceptions, just logs it and returns a connection error
-      if (!(e instanceof SecurityException) && !(e instanceof AuthenticationFailedException)) {
-        return handleExcpetion(e, jmxHostPortToConnect);
-      }
-
+    } catch (SecurityException | AuthenticationFailedException e) {
-        return handleExcpetion(e, jmxHostPortToConnect);
+        return handleException(e, jmxHostPortToConnect);
-      // otherwise, prompt for username and password and retry the conenction
+      // otherwise, prompt for username and password and retry the connection
-
+    } catch (Exception e) {
+      // all other exceptions, just logs it and returns a connection error
+      return handleException(e, jmxHostPortToConnect);
-          new java.security.SecureRandom());
+          new SecureRandom());
-  private Result handleExcpetion(Exception e, ConnectionEndpoint hostPortToConnect) {
-    String errorMessage = e.getMessage();
-    if (hostPortToConnect != null) {
-      errorMessage = CliStrings.format(CliStrings.CONNECT__MSG__ERROR,
-          hostPortToConnect.toString(false), e.getMessage());
-    }
+  private Result handleException(Exception e) {
+    return handleException(e, e.getMessage());
+  }
+
+  private Result handleException(Exception e, String errorMessage) {
+
+  private Result handleException(Exception e, ConnectionEndpoint hostPortToConnect) {
+    if (hostPortToConnect == null) {
+      return handleException(e);
+    }
+    return handleException(e, CliStrings.format(CliStrings.CONNECT__MSG__ERROR,
+        hostPortToConnect.toString(false), e.getMessage()));
+  }
