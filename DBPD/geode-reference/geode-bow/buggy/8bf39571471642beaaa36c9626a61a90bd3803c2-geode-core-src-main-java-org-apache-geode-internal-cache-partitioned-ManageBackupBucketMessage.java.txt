Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  /** The key associated with the value that must be sent */ 
+
+  /** The key associated with the value that must be sent */
-  
+
-  
-  private InternalDistributedMember moveSource; 
-           
-  private boolean forceCreation = true; 
+
+  private InternalDistributedMember moveSource;
+
+  private boolean forceCreation = true;
-  
-  private ManageBackupBucketMessage(InternalDistributedMember recipient, 
-                                    int regionId,
-                                    ReplyProcessor21 processor, 
-                                    int bucketId, 
-                                    boolean isRebalance, 
-                                    boolean replaceOfflineData,
-                                    InternalDistributedMember moveSource,  
-                                    boolean forceCreation) {
+
+  private ManageBackupBucketMessage(InternalDistributedMember recipient, int regionId,
+      ReplyProcessor21 processor, int bucketId, boolean isRebalance, boolean replaceOfflineData,
+      InternalDistributedMember moveSource, boolean forceCreation) {
-    this.moveSource = moveSource;  
+    this.moveSource = moveSource;
+
-  
+
-   * @param recipient the member to which the bucket manage request is sent 
-   * @param r  the PartitionedRegion to which the bucket belongs
+   * 
+   * @param recipient the member to which the bucket manage request is sent
+   * @param r the PartitionedRegion to which the bucket belongs
-   * @param replaceOfflineData 
-   * @param moveSource If this is a bucket move.  
-   * @param forceCreation ignore checks which may cause the bucket not to be created  
+   * @param replaceOfflineData
+   * @param moveSource If this is a bucket move.
+   * @param forceCreation ignore checks which may cause the bucket not to be created
-  public static NodeResponse send(InternalDistributedMember recipient,
-      PartitionedRegion r, int bucketId, boolean isRebalance,
-      boolean replaceOfflineData, InternalDistributedMember moveSource,
-      boolean forceCreation) throws ForceReattemptException {
-    
+  public static NodeResponse send(InternalDistributedMember recipient, PartitionedRegion r,
+      int bucketId, boolean isRebalance, boolean replaceOfflineData,
+      InternalDistributedMember moveSource, boolean forceCreation) throws ForceReattemptException {
+
-    ManageBackupBucketMessage m = new ManageBackupBucketMessage(recipient, r
-        .getPRId(), p, bucketId, isRebalance, replaceOfflineData,
-        moveSource, forceCreation);
+    ManageBackupBucketMessage m = new ManageBackupBucketMessage(recipient, r.getPRId(), p, bucketId,
+        isRebalance, replaceOfflineData, moveSource, forceCreation);
-  
+
-   * This method is called upon receipt and make the desired changes to the
-   * PartitionedRegion
-   * Note: It is very important that this message does NOT cause any deadlocks as the sender will wait indefinitely for the acknowledgement
+   * This method is called upon receipt and make the desired changes to the PartitionedRegion Note:
+   * It is very important that this message does NOT cause any deadlocks as the sender will wait
+   * indefinitely for the acknowledgement
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, 
-      PartitionedRegion r, long startTime) {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+      long startTime) {
-      logger.trace(LogMarker.DM, "ManageBucketMessage operateOnRegion: {}",  r.getFullPath());
+      logger.trace(LogMarker.DM, "ManageBucketMessage operateOnRegion: {}", r.getFullPath());
-   
-    // This is to ensure that initialization is complete before bucket creation request is 
+
+    // This is to ensure that initialization is complete before bucket creation request is
-    if (! r.isInitialized()) {
+    if (!r.isInitialized()) {
-    
-    r.checkReadiness(); //  Don't allow closed PartitionedRegions that have datastores to host buckets
+
+    r.checkReadiness(); // Don't allow closed PartitionedRegions that have datastores to host
+                        // buckets
-    boolean managingBucket = prDs.grabBucket(this.bucketId,
-        this.moveSource, this.forceCreation, replaceOfflineData,
-        this.isRebalance, null, false) == CreateBucketResult.CREATED;
-    
-    r.getPrStats().endPartitionMessagesProcessing(startTime); 
+    boolean managingBucket = prDs.grabBucket(this.bucketId, this.moveSource, this.forceCreation,
+        replaceOfflineData, this.isRebalance, null, false) == CreateBucketResult.CREATED;
+
+    r.getPrStats().endPartitionMessagesProcessing(startTime);
-      ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);      
+      ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);
-  
+
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    if(hasMoveSource) {
+    if (hasMoveSource) {
-    this.forceCreation = in.readBoolean(); 
+    this.forceCreation = in.readBoolean();
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-    if(this.moveSource != null) {
+    if (this.moveSource != null) {
-    out.writeBoolean(this.forceCreation); 
+    out.writeBoolean(this.forceCreation);
-  
+
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-    buff.append("; moveSource=").append(this.moveSource);  
-    buff.append("; forceCreation=").append(this.forceCreation);  
+    buff.append("; moveSource=").append(this.moveSource);
+    buff.append("; forceCreation=").append(this.forceCreation);
-  
+
-   * A class that contains the reply to a {@link ManageBackupBucketMessage} message
-   * which contains the {@link Node} that has accepted to manage the bucket. 
+   * A class that contains the reply to a {@link ManageBackupBucketMessage} message which contains
+   * the {@link Node} that has accepted to manage the bucket.
+   * 
-    
+
-    
+
-     * Empty constructor to conform to DataSerializable interface 
+     * Empty constructor to conform to DataSerializable interface
-    public ManageBackupBucketReplyMessage() {
-    }
+    public ManageBackupBucketReplyMessage() {}
-    private ManageBackupBucketReplyMessage(int processorId, boolean accept, boolean initializing)
-    {
+    private ManageBackupBucketReplyMessage(int processorId, boolean accept, boolean initializing) {
-      this.acceptedBucket= accept;
+      this.acceptedBucket = accept;
-    
+
-     * Refuse the request to manage the bucket 
+     * Refuse the request to manage the bucket
+     * 
-    public static void sendRefusal(InternalDistributedMember recipient, int processorId, DM dm) 
-    {
+    public static void sendRefusal(InternalDistributedMember recipient, int processorId, DM dm) {
-      ManageBackupBucketReplyMessage m = new ManageBackupBucketReplyMessage(processorId, false, false);
+      ManageBackupBucketReplyMessage m =
+          new ManageBackupBucketReplyMessage(processorId, false, false);
-    
-    /**
-     * Refuse the request to manage the bucket because the region is still being initialized
-     * @param recipient the requesting node
-     * @param processorId the identity of the processor the requesting node is waiting on
-     * @param dm the distribution manager used to send the acceptance message
-     */
-    public static void sendStillInitializing(InternalDistributedMember recipient,
-        int processorId, DM dm)
-    {
-      ManageBackupBucketReplyMessage m = new ManageBackupBucketReplyMessage(processorId, false, true);
-      m.setRecipient(recipient);
-      dm.putOutgoing(m);
-    }
-      
-    /**
-     * Accept the request to manage the bucket
-     * @param recipient the requesting node
-     * @param processorId the identity of the processor the requesting node is waiting on
-     * @param dm the distribution manager used to send the acceptance message
-     */
-    public static void sendAcceptance(InternalDistributedMember recipient, int processorId, 
-        DM dm) 
-    {
-      Assert.assertTrue(recipient != null, "ManageBackupBucketReplyMessage NULL reply message");
-      ManageBackupBucketReplyMessage m = new ManageBackupBucketReplyMessage(processorId, true, false);
-      m.setRecipient(recipient);
-      dm.putOutgoing(m);
-}
-     * Processes this message.  This method is invoked by the receiver
-     * of the message.
+     * Refuse the request to manage the bucket because the region is still being initialized
+     * 
+     * @param recipient the requesting node
+     * @param processorId the identity of the processor the requesting node is waiting on
+     * @param dm the distribution manager used to send the acceptance message
+     */
+    public static void sendStillInitializing(InternalDistributedMember recipient, int processorId,
+        DM dm) {
+      ManageBackupBucketReplyMessage m =
+          new ManageBackupBucketReplyMessage(processorId, false, true);
+      m.setRecipient(recipient);
+      dm.putOutgoing(m);
+    }
+
+    /**
+     * Accept the request to manage the bucket
+     * 
+     * @param recipient the requesting node
+     * @param processorId the identity of the processor the requesting node is waiting on
+     * @param dm the distribution manager used to send the acceptance message
+     */
+    public static void sendAcceptance(InternalDistributedMember recipient, int processorId, DM dm) {
+      Assert.assertTrue(recipient != null, "ManageBackupBucketReplyMessage NULL reply message");
+      ManageBackupBucketReplyMessage m =
+          new ManageBackupBucketReplyMessage(processorId, true, false);
+      m.setRecipient(recipient);
+      dm.putOutgoing(m);
+    }
+
+    /**
+     * Processes this message. This method is invoked by the receiver of the message.
+     * 
-        logger.trace(LogMarker.DM, "ManageBackupBucketReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "ManageBackupBucketReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime()-startTime);
+      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);
-    
+
-  public int getDSFID() {
-    return PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE;
-  }
+    public int getDSFID() {
+      return PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE;
+    }
-  @Override
-    public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  @Override
+    @Override
-      return new StringBuffer()
-      .append("ManageBucketReplyMessage ")
-      .append("processorid=").append(this.processorId)
-      .append(" accepted bucket=").append(this.acceptedBucket)
-      .append(" isInitializing=").append(this.notYetInitialized)
-      .toString();
+      return new StringBuffer().append("ManageBucketReplyMessage ").append("processorid=")
+          .append(this.processorId).append(" accepted bucket=").append(this.acceptedBucket)
+          .append(" isInitializing=").append(this.notYetInitialized).toString();
-  
+
+   * 
-     * the message that triggers return from waitForAcceptance.  This will
-     * be null if the target member exited
+     * the message that triggers return from waitForAcceptance. This will be null if the target
+     * member exited
-          ManageBackupBucketReplyMessage reply =(ManageBackupBucketReplyMessage) m;
+          ManageBackupBucketReplyMessage reply = (ManageBackupBucketReplyMessage) m;
-            logger.trace(LogMarker.DM, "NodeResponse return value is {} isInitializng={}", reply.acceptedBucket, reply.notYetInitialized);
+            logger.trace(LogMarker.DM, "NodeResponse return value is {} isInitializng={}",
+                reply.acceptedBucket, reply.notYetInitialized);
-    
+
-      //increasing ack wait threshold for this message as region/bucket initialization can take time
+      // increasing ack wait threshold for this message as region/bucket initialization can take
+      // time
-    
+
-     * Wait for the response to a {@link ManageBackupBucketMessage} request. 
+     * Wait for the response to a {@link ManageBackupBucketMessage} request.
+     * 
-     * @see org.apache.geode.internal.cache.PartitionedRegionDataStore#handleManageBucketRequest(int, int, InternalDistributedMember, boolean)
+     * @see org.apache.geode.internal.cache.PartitionedRegionDataStore#handleManageBucketRequest(int,
+     *      int, InternalDistributedMember, boolean)
-    public boolean waitForAcceptance()  throws ForceReattemptException
-    {
+    public boolean waitForAcceptance() throws ForceReattemptException {
-      }
-      catch (ReplyException e) {
+      } catch (ReplyException e) {
-          String m = "NodeResponse got remote CacheClosedException, throwing PartitionedRegionCommunication Exception";
+          String m =
+              "NodeResponse got remote CacheClosedException, throwing PartitionedRegionCommunication Exception";
-          String m = "NodeResponse got local destroy on the PartitionRegion , throwing ForceReattemptException";
+          String m =
+              "NodeResponse got local destroy on the PartitionRegion , throwing ForceReattemptException";
-          String m = "NodeResponse got ForceReattemptException due to local destroy on the PartitionRegion";
+          String m =
+              "NodeResponse got ForceReattemptException due to local destroy on the PartitionRegion";
-          throw (ForceReattemptException)t;
+          throw (ForceReattemptException) t;
-    
+
-     * After a response has been returned from waitForAcceptance, this method
-     * may be used to see if the other vm rejected the bucket because it was
-     * still initializing.
+     * After a response has been returned from waitForAcceptance, this method may be used to see if
+     * the other vm rejected the bucket because it was still initializing.
