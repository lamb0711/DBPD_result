GEODE-77: moving failure detection sockets into the membership view

+import java.util.Arrays;
-  private InetAddress ip;
+  private InetAddress socketAddress;
-  private Map<InternalDistributedMember, InetSocketAddress> socketInfo = new ConcurrentHashMap<InternalDistributedMember, InetSocketAddress>();
-    //TODO: need to some tcp check
-      // TODO: send is throwing exception
-  private boolean doTCPCheckMember(InternalDistributedMember suspectMember, InetSocketAddress addr) {
+  private boolean doTCPCheckMember(InternalDistributedMember suspectMember, int port) {
-      logger.debug("Checking member {} with TCP socket connection {}:{}.", suspectMember, addr.getAddress(), addr.getPort());
+      logger.debug("Checking member {} with TCP socket connection {}:{}.", suspectMember, suspectMember.getInetAddress(), port);
+      InetSocketAddress addr = new InetSocketAddress(suspectMember.getInetAddress(), port);
-          Thread th = new Thread(Services.getThreadGroup(), r, "GemFire Member-Check Scheduler ");
+          Thread th = new Thread(Services.getThreadGroup(), r, "GemFire Failure Detection Scheduler");
-          Thread th = new Thread(Services.getThreadGroup(), r, "GemFire Member-Check Thread " + id);
+          Thread th = new Thread(Services.getThreadGroup(), r, "GemFire Failure Detection thread " + id);
-          Thread th = new Thread(Services.getThreadGroup(), r, "TCP Check ServerSocket Thread " + id);
+          Thread th = new Thread(Services.getThreadGroup(), r, "GemFire Failure Detection Server thread " + id);
-              ip = localAddress.getInetAddress();
+              socketAddress = localAddress.getInetAddress();
-              serverSocket.bind(new InetSocketAddress(ip, socketPort));
-              logger.info("GMSHealthMonitor started server socket on {}:{}.", ip, socketPort);
-              socketInfo.put(localAddress, new InetSocketAddress(ip, socketPort));
+              serverSocket.bind(new InetSocketAddress(socketAddress, socketPort));
+              logger.info("Started failure detection server thread on {}:{}.", socketAddress, socketPort);
-                  logger.trace("Unexpected exception", e);
+                  if (!isStopping) {
+                    logger.trace("Unexpected exception", e);
+                  }
-              logger.info("GMSHealthMonitor server socket has done its jobs.");
+              logger.info("GMSHealthMonitor server thread exiting");
-              InetSocketAddress addr = socketInfo.get(mbr);
-              if (addr == null || addr.getPort() < 0) {
+              NetView view = currentView;
+              int port = view.getFailureDetectionPort(mbr);
+              if (port <= 0) {
+                if (logger.isDebugEnabled()) {
+                  logger.debug("\ncurrent view: {}\nports: {}", view, Arrays.toString(view.getFailureDetectionPorts()));
+                }
-                pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr, addr);
+                pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr, port);
-    // TODO Auto-generated method stub
-    
-  public Map<InternalDistributedMember, InetSocketAddress> getSocketInfo() {
-    return this.socketInfo;
+  @Override
+  public int getFailureDetectionPort() {
+    return this.socketPort;
-
-  public void installSocketInfo(List<InternalDistributedMember> members, List<Integer> portsForMembers) {
-    logger.debug("installSocketInfo members=" + members + " portsForMembers=" + portsForMembers);    
-    for (int i = 0; i < members.size(); i++) {
-      if (portsForMembers.get(i).intValue() == -1) {
-        continue;
-      }
-      InetSocketAddress addr = new InetSocketAddress(members.get(i).getInetAddress(), portsForMembers.get(i).intValue());
-      socketInfo.put(members.get(i), addr);
-    }
-  }
-
+  
