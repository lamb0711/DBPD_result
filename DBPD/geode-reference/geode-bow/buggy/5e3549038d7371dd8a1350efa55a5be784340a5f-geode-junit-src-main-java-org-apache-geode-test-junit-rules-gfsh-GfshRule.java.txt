GEODE-5716: GfshRule improvement (#2454)

* simplify process output to stdout/stderr
* rework debuggable command API
* be more specific about each gfshScript execution in the output.

-import java.io.UncheckedIOException;
-import java.util.concurrent.TimeUnit;
+ * GfshScript.of("start locator", 30000).and("start server", 30001).withDebugPort(30002).execute
- * GfshScript.of(new DebuggableCommand("start locator", 30001)).execute(gfshRule, 30000);
- *
- * this will set the gfsh to be debuggable at port 30000, and the locator started to be debuggable
- * at port 30001
+ * this will set the gfsh to be debuggable at port 30002, and the locator started to be debuggable
+ * at port 30000, and the server to be debuggable at 30001
-
-  private static final String DOUBLE_QUOTE = "\"";
-  private static final String LINE_SEPARATOR = System.getProperty("line.separator");
-
-    gfshExecutions.stream().collect(Collectors.toList()).forEach(this::stopMembersQuietly);
+    // this would not include the "stopMemberQuietly" executions
+    gfshExecutions.stream().collect(Collectors.toList()).forEach(this::stopMembers);
-    final List<String> shutdownExceptions = new ArrayList<>();
+    // this will include the "stopMemberQuietly" executions
-      gfshExecutions.stream().map(GfshExecution::getProcess).map(Process::destroyForcibly)
-          .forEach((Process process) -> {
-            try {
-              // Process.destroyForcibly() may not terminate immediately
-              process.waitFor(1, TimeUnit.MINUTES);
-            } catch (InterruptedException ie) {
-              shutdownExceptions
-                  .add(process.toString() + " failed to shutdown: " + ie.getMessage());
-            }
-          });
-      if (!shutdownExceptions.isEmpty()) {
-        throw new RuntimeException("gfshExecutions processes failed to shutdown" + LINE_SEPARATOR
-            + String.join(LINE_SEPARATOR, shutdownExceptions));
-      }
+      gfshExecutions.stream().forEach(gfshExecution -> gfshExecution.killProcess());
-    return execute(gfshScript, -1);
-  }
-
-  public GfshExecution execute(GfshScript gfshScript, int gfshDebugPort) {
+    System.out.println("Executing " + gfshScript);
-      Process process = toProcessBuilder(gfshScript, gfsh, workingDir, gfshDebugPort).start();
+      Process process =
+          toProcessBuilder(gfshScript, gfsh, workingDir, gfshScript.getDebugPort()).start();
-      gfshScript.awaitIfNecessary(gfshExecution);
-    } catch (IOException e) {
-      throw new UncheckedIOException(e);
+      gfshExecution.awaitTermination(gfshScript);
+    } catch (Exception e) {
+      throw new RuntimeException(e);
-  private void stopMembersQuietly(GfshExecution gfshExecution) {
-    gfshExecution.getServerDirs().forEach(this::stopServerInDir);
-    gfshExecution.getLocatorDirs().forEach(this::stopLocatorInDir);
-  }
-
-  private void stopServerInDir(File dir) {
-    String stopServerCommand = "stop server --dir=" + quoteArgument(dir.toString());
-
-    GfshScript stopServerScript =
-        GfshScript.of(stopServerCommand).withName("teardown-stop-server").awaitQuietly();
-    execute(stopServerScript);
-  }
-
-  private void stopLocatorInDir(File dir) {
-    String stopLocatorCommand = "stop locator --dir=" + quoteArgument(dir.toString());
-
-    GfshScript stopServerScript =
-        GfshScript.of(stopLocatorCommand).withName("teardown-stop-locator").awaitQuietly();
-    execute(stopServerScript);
-  }
-
-  private String quoteArgument(String argument) {
-    if (!argument.startsWith(DOUBLE_QUOTE)) {
-      argument = DOUBLE_QUOTE + argument;
+  private void stopMembers(GfshExecution gfshExecution) {
+    String[] stopMemberScripts = gfshExecution.getStopMemberCommands();
+    if (stopMemberScripts.length == 0) {
+      return;
-
-    if (!argument.endsWith(DOUBLE_QUOTE)) {
-      argument = argument + DOUBLE_QUOTE;
-    }
-
-    return argument;
+    execute(GfshScript.of(stopMemberScripts).withName("Stop-Members"));
