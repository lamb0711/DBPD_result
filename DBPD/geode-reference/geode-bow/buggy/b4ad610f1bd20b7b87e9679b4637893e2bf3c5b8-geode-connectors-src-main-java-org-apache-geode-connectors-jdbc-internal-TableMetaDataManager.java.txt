GEODE-4833: JdbcWriter and JdbcAsyncWriter may fail to write null fields to database (#1636)

Null values are now supported. Meta-data read from the database is now used to determine the
column type and used to call setNull.

* Renamed TableKeyColumnManager to TableMetaDataManager
* registerPdxMetaData will now throw an exception if the instance is not serialized with PDX

-public class TableKeyColumnManager {
-  private final ConcurrentMap<String, String> tableToPrimaryKeyMap = new ConcurrentHashMap<>();
+public class TableMetaDataManager {
+  private final ConcurrentMap<String, TableMetaDataView> tableToMetaDataMap =
+      new ConcurrentHashMap<>();
-  public String getKeyColumnName(Connection connection, String tableName) {
-    return tableToPrimaryKeyMap.computeIfAbsent(tableName,
-        k -> computeKeyColumnName(connection, k));
+  public TableMetaDataView getTableMetaDataView(Connection connection, String tableName) {
+    return tableToMetaDataMap.computeIfAbsent(tableName,
+        k -> computeTableMetaDataView(connection, k));
-  private String computeKeyColumnName(Connection connection, String tableName) {
-    String key;
+  private TableMetaDataView computeTableMetaDataView(Connection connection, String tableName) {
+    TableMetaData result;
-        key = getPrimaryKeyColumnNameFromMetaData(realTableName, metaData);
+        String key = getPrimaryKeyColumnNameFromMetaData(realTableName, metaData);
+        result = new TableMetaData(key);
+        getDataTypesFromMetaData(realTableName, metaData, result);
-    return key;
+    return result;
-    ResultSet primaryKeys = metaData.getPrimaryKeys(null, null, tableName);
-    if (!primaryKeys.next()) {
-      throw new JdbcConnectorException(
-          "The table " + tableName + " does not have a primary key column.");
+    try (ResultSet primaryKeys = metaData.getPrimaryKeys(null, null, tableName)) {
+      if (!primaryKeys.next()) {
+        throw new JdbcConnectorException(
+            "The table " + tableName + " does not have a primary key column.");
+      }
+      String key = primaryKeys.getString("COLUMN_NAME");
+      if (primaryKeys.next()) {
+        throw new JdbcConnectorException(
+            "The table " + tableName + " has more than one primary key column.");
+      }
+      return key;
-    String key = primaryKeys.getString("COLUMN_NAME");
-    if (primaryKeys.next()) {
-      throw new JdbcConnectorException(
-          "The table " + tableName + " has more than one primary key column.");
-    }
-    return key;
+  private void getDataTypesFromMetaData(String tableName, DatabaseMetaData metaData,
+      TableMetaData result) throws SQLException {
+    try (ResultSet columnData = metaData.getColumns(null, null, tableName, "%")) {
+      while (columnData.next()) {
+        String columnName = columnData.getString("COLUMN_NAME");
+        int dataType = columnData.getInt("DATA_TYPE");
+        result.addDataType(columnName, dataType);
+      }
+    }
+  }
