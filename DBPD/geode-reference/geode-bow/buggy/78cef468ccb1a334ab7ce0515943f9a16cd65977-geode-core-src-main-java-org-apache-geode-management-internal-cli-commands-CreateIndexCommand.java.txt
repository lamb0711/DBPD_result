GEODE-7136: remove "groups" in management configuration (#3997)


-import java.util.HashSet;
+import java.util.Objects;
+import java.util.stream.Collectors;
-import joptsimple.internal.Strings;
-import org.apache.geode.management.api.ConfigurationResult;
-import org.apache.geode.management.runtime.RuntimeRegionInfo;
-      Region config = getRegionConfig(cms, regionName);
-      if (config == null) {
+      Set<String> calculatedGroups = getGroupsContainingRegion(cms, regionName);
+      if (calculatedGroups.isEmpty()) {
-      String[] calculatedGroups = config.getGroups().toArray(new String[0]);
-      if (groups != null && !containsExactlyInAnyOrder(groups, calculatedGroups)) {
-        info.addLine("--groups=" + Strings.join(groups, ",") + " is ignored.");
+      if (groups != null && !calculatedGroups.containsAll(Arrays.asList(groups))) {
+        return ResultModel
+            .createError("Region " + regionName + " does not exist in some of the groups.");
-      groups = calculatedGroups;
+      if (groups == null) {
+        // the calculatedGroups will have null value to indicate the "cluster" level, in thise case
+        // we want the groups to an empty array
+        groups = calculatedGroups.stream().filter(Objects::nonNull).toArray(String[]::new);
+      }
-  private static boolean containsExactlyInAnyOrder(String[] a, String[] b) {
-    return new HashSet(Arrays.asList(a)).equals(new HashSet(Arrays.asList(b)));
-  }
-
-      Region region = getRegionConfig(cms, regionName);
-      if (region != null) {
+      Set<String> groupsContainingRegion = getGroupsContainingRegion(cms, regionName);
+      if (!groupsContainingRegion.isEmpty()) {
-  Region getRegionConfig(ClusterManagementService cms,
+  // if region belongs to "cluster" level, it will return a set of one null value
+  Set<String> getGroupsContainingRegion(ClusterManagementService cms,
-    List<ConfigurationResult<Region, RuntimeRegionInfo>> list =
-        cms.list(regionConfig).getResult();
-    if (list.isEmpty()) {
-      return null;
-    } else {
-      return list.get(0).getConfiguration();
-    }
+    List<Region> regions = cms.list(regionConfig).getConfigResult();
+    return regions.stream().map(Region::getGroup)
+        .collect(Collectors.toSet());
