GEODE-6733 Remove mutable static org.apache.geode.internal.net.Buffers.buffersQueue

Converted static Buffers class to be a non-static buffer pool.

-import java.io.InputStream;
-import java.io.InterruptedIOException;
-import org.apache.geode.internal.net.Buffers;
+import org.apache.geode.internal.net.BufferPool;
-    if (Buffers.useDirectBuffers) {
+    if (BufferPool.useDirectBuffers) {
-      if (Buffers.useDirectBuffers) {
+      if (BufferPool.useDirectBuffers) {
-    if (Buffers.useDirectBuffers) {
+    if (BufferPool.useDirectBuffers) {
-      Buffers.releaseReceiveBuffer(tmp, stats);
+      getBufferPool().releaseReceiveBuffer(tmp);
+  BufferPool getBufferPool() {
+    return owner.getBufferPool();
+  }
+
-          Buffers.releaseReceiveBuffer(inputBuffer, getConduit().getStats());
+          getBufferPool().releaseReceiveBuffer(inputBuffer);
-        inputBuffer = Buffers.acquireReceiveBuffer(packetBufferSize, getConduit().getStats());
+        inputBuffer = getBufferPool().acquireReceiveBuffer(packetBufferSize);
-          getConduit().idleConnectionTimeout, clientSocket, inputBuffer, getConduit().getStats());
+          getConduit().idleConnectionTimeout, clientSocket, inputBuffer,
+          getBufferPool());
-      ioFilter = new NioPlainEngine();
+      ioFilter = new NioPlainEngine(getBufferPool());
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "DE_MIGHT_IGNORE")
-  void readFully(InputStream input, byte[] buffer, int len) throws IOException {
-    int bytesSoFar = 0;
-    while (bytesSoFar < len) {
-      this.owner.getConduit().getCancelCriterion().checkCancelInProgress(null);
-      try {
-        synchronized (stateLock) {
-          connectionState = STATE_READING;
-        }
-        int bytesThisTime = input.read(buffer, bytesSoFar, len - bytesSoFar);
-        if (bytesThisTime < 0) {
-          this.readerShuttingDown = true;
-          try {
-            requestClose("Stream read returned non-positive length");
-          } catch (Exception ignored) {
-          }
-          return;
-        }
-        bytesSoFar += bytesThisTime;
-      } catch (InterruptedIOException io) {
-        // Current thread has been interrupted. Regard it similar to an EOF
-        this.readerShuttingDown = true;
-        try {
-          requestClose("Current thread interrupted");
-        } catch (Exception ignored) {
-        }
-        Thread.currentThread().interrupt();
-        this.owner.getConduit().getCancelCriterion().checkCancelInProgress(null);
-      } finally {
-        synchronized (stateLock) {
-          connectionState = STATE_IDLE;
-        }
-      }
-    } // while
-  }
-
-    byte originalState = -1;
+    byte originalState;
-                oldBuffer = null;
-      inputBuffer = Buffers.acquireReceiveBuffer(allocSize, this.owner.getConduit().getStats());
+      inputBuffer = getBufferPool().acquireReceiveBuffer(allocSize);
-      inputBuffer = Buffers.acquireReceiveBuffer(allocSize, stats);
+      inputBuffer = getBufferPool().acquireReceiveBuffer(allocSize);
-        Buffers.releaseReceiveBuffer(oldBuffer, stats);
+        getBufferPool().releaseReceiveBuffer(oldBuffer);
