Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class which eases the creation of MBeans for security testing. When combined with {@link ConnectionConfiguration}
- * it allows for the creation of per-test connections with different user/password combinations.
+ * Class which eases the creation of MBeans for security testing. When combined with
+ * {@link ConnectionConfiguration} it allows for the creation of per-test connections with different
+ * user/password combinations.
-  public <T> T getProxyMBean(Class<T> proxyClass, String beanQueryName) throws MalformedObjectNameException, IOException {
+  public <T> T getProxyMBean(Class<T> proxyClass, String beanQueryName)
+      throws MalformedObjectNameException, IOException {
-    assertEquals("failed to find only one instance of type " + proxyClass.getName() + " with name " + beanQueryName, 1, beans.size());
+    assertEquals("failed to find only one instance of type " + proxyClass.getName() + " with name "
+        + beanQueryName, 1, beans.size());
-    return JMX.newMXBeanProxy(con, ((ObjectInstance) beans.toArray()[0]).getObjectName(), proxyClass);
+    return JMX.newMXBeanProxy(con, ((ObjectInstance) beans.toArray()[0]).getObjectName(),
+        proxyClass);
-  public AccessControlMXBean getAccessControlMBean() throws Exception{
-    return JMX.newMXBeanProxy(con, new ObjectName("GemFire:service=AccessControl,type=Distributed"), AccessControlMXBean.class);
+  public AccessControlMXBean getAccessControlMBean() throws Exception {
+    return JMX.newMXBeanProxy(con, new ObjectName("GemFire:service=AccessControl,type=Distributed"),
+        AccessControlMXBean.class);
-  public <T> T getProxyMBean(String beanQueryName) throws MalformedObjectNameException, IOException {
+  public <T> T getProxyMBean(String beanQueryName)
+      throws MalformedObjectNameException, IOException {
-      env.put(JMXConnector.CREDENTIALS, new String[] { user, password });
+      env.put(JMXConnector.CREDENTIALS, new String[] {user, password});
-      JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:" + jmxServerPort + "/jmxrmi");
+      JMXServiceURL url =
+          new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:" + jmxServerPort + "/jmxrmi");
