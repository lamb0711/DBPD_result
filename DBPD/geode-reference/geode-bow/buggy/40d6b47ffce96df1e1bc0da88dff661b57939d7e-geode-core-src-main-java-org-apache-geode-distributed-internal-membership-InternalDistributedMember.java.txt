GEODE-7704: Replacing inheritance of MemberIdentifierImpl with delagation (#4636)

* Deduplicate fields betweeen MemberIdentifierImpl and GMSMemberData

Moving all state down into GMSMemberData and removing duplicate fields
isPartial and versionObject. GMSMemberData now has all of the state of a
member.

* Delegate rather than inherit InternalDistributedMember

Delegating to MemberIdentifierImpl, rather than inheriting from it.

* Delegate to MemberIdentifier, rather than MemberIdentifierImpl

Having InternalDistributedMember delegate to MemberIdentifier, rather than
MemberIdentifierImpl, so that we are not relying on the concrete class and all
required methods are part of the interface. As a result, adding a number of
additional methods to the MemberIdentifier interface.

* Removing uses of getMemberData

Removing uses of getMemberData and adding methods to MemberIdentifier that
delegate to memberData.

* Hiding MemberIdentiferImpl

Using MemberIdentifier everywhere insteand of MemberIdentiferImpl. Still need to
move MemberIdentiferImpl to an internal package.

* Making PMD happy

Marking the MemberIdentifierFactory as immutable.

* Fixing NPE in getGroups

The MemberIdentifierImpl.getGroups needs to check for a null array. Places that
used to call getMemberData.getGroups were throwing an NPE.

* Fixing a test that used MemberIdentifierFactoryImpl

This factory is not going to play well with other parts of the test that are
generating InternalDistributedMembers.

* Fixing AnalyzeSerializablesJUnitTest

InternalDistributedMember now has new serialization methods that delegate to
the methods that it previously was just inheriting.

* Fixing a unit test failure due to mocking MemberData

InternalDistributedMemberTest was mocking the underlying MemberData and
changing state on the InternalDistributedMember. Now that all state is
delegated to the MemberData, this test was failing because the mock was not
reflecting the state changes.

Co-authored-by: Ernie Burghardt <eburghardt@pivotal.io>

+import java.io.ObjectInput;
+import java.io.ObjectOutput;
+import java.util.List;
+import java.util.function.Function;
+import org.jgroups.util.UUID;
+
+import org.apache.geode.annotations.Immutable;
-import org.apache.geode.distributed.internal.membership.api.MemberIdentifierImpl;
+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;
+import org.apache.geode.distributed.internal.membership.api.MemberIdentifierFactoryImpl;
+import org.apache.geode.internal.serialization.DataSerializableFixedID;
+import org.apache.geode.internal.serialization.Version;
-public class InternalDistributedMember extends MemberIdentifierImpl
-    implements DistributedMember, Externalizable, ProfileId, VersionSource<DistributedMember> {
+public class InternalDistributedMember
+    implements DistributedMember, Externalizable, ProfileId, VersionSource<DistributedMember>,
+    MemberIdentifier, DataSerializableFixedID {
+  @Immutable
+  public static final MemberIdentifierFactoryImpl MEMBER_IDENTIFIER_FACTORY =
+      new MemberIdentifierFactoryImpl();
+
+  private final MemberIdentifier memberIdentifier;
-  public InternalDistributedMember() {}
+  public InternalDistributedMember() {
+    memberIdentifier = MEMBER_IDENTIFIER_FACTORY.create(null);
+  }
-    super(MemberDataBuilder.newBuilder(i, getHostName(i))
-        .setMembershipPort(membershipPort)
-        .setNetworkPartitionDetectionEnabled(splitBrainEnabled)
-        .setPreferredForCoordinator(canBeCoordinator)
-        .build(), null);
+    memberIdentifier =
+        MEMBER_IDENTIFIER_FACTORY.create(MemberDataBuilder.newBuilder(i, getHostName(i))
+            .setMembershipPort(membershipPort)
+            .setNetworkPartitionDetectionEnabled(splitBrainEnabled)
+            .setPreferredForCoordinator(canBeCoordinator)
+            .build());
-    super(m, null);
+    memberIdentifier = MEMBER_IDENTIFIER_FACTORY.create(m);
-    if (getMemberData().getHostName() == null || getMemberData().isPartial()) {
+    if (getHostName() == null || isPartial()) {
-      getMemberData().setHostName(hostName);
+      memberIdentifier.setHostName(hostName);
-    super(MemberDataBuilder.newBuilder(getInetAddress(location), location.getHostName())
-        .setMembershipPort(location.getPort())
-        .setNetworkPartitionDetectionEnabled(false)
-        .setPreferredForCoordinator(true)
-        .build(), null);
+    memberIdentifier =
+        MEMBER_IDENTIFIER_FACTORY.create(
+            MemberDataBuilder.newBuilder(getInetAddress(location), location.getHostName())
+                .setMembershipPort(location.getPort())
+                .setNetworkPartitionDetectionEnabled(false)
+                .setPreferredForCoordinator(true)
+                .build());
-    super(createMemberData(host, p, n, vmKind, groups, attr), u);
+    memberIdentifier =
+        MEMBER_IDENTIFIER_FACTORY.create(createMemberData(host, p, n, vmKind, groups, attr, u));
-      DurableClientAttributes attr) {
+      DurableClientAttributes attr, String u) {
+        .setUniqueTag(u)
-    super(MemberDataBuilder.newBuilder(i, "localhost")
+    memberIdentifier = MEMBER_IDENTIFIER_FACTORY.create(MemberDataBuilder.newBuilder(i, "localhost")
-        .build(), null);
+        .build());
-    super(MemberDataBuilder.newBuilder(addr, "localhost")
-        .setMembershipPort(p).build(), null);
+    memberIdentifier =
+        MEMBER_IDENTIFIER_FACTORY.create(MemberDataBuilder.newBuilder(addr, "localhost")
+            .setMembershipPort(p).build());
+  @Override
-    String durableId = getMemberData().getDurableId();
+    String durableId = memberIdentifier.getDurableId();
-    return new DurableClientAttributes(durableId, getMemberData().getDurableTimeout());
+    return new DurableClientAttributes(durableId, memberIdentifier.getDurableTimeout());
+  @Override
-    if (getMemberData().getGroups() == null) {
+    if (getGroups() == null) {
+  @Override
-  public int compareTo(DistributedMember o, boolean compareMemberData, boolean compareViewIds) {
+  private int compareTo(DistributedMember o, boolean compareMemberData, boolean compareViewIds) {
-    MemberIdentifierImpl other = (MemberIdentifierImpl) o;
+    InternalDistributedMember other = (InternalDistributedMember) o;
-    return compareTo(other, compareMemberData, compareViewIds);
+    return compareTo(other.memberIdentifier, compareMemberData, compareViewIds);
-  protected void defaultToCurrentHost() {
-    getMemberData().setProcessId(OSProcess.getId());
+  @Override
+  public int compareTo(
+      MemberIdentifier memberIdentifier, boolean compareMemberData, boolean compareViewIds) {
+    return this.memberIdentifier.compareTo(memberIdentifier, compareMemberData, compareViewIds);
+  }
+
+  private void defaultToCurrentHost() {
+    memberIdentifier.setProcessId(OSProcess.getId());
-        getMemberData().setHostName(SocketCreator.getHostName(LocalHostUtil.getLocalHost()));
+        setHostName(SocketCreator.getHostName(LocalHostUtil.getLocalHost()));
-        getMemberData().setHostName(LocalHostUtil.getLocalHost().getHostAddress());
+        setHostName(LocalHostUtil.getLocalHost().getHostAddress());
-  public void toDataPre_GFE_9_0_0_0(DataOutput out, SerializationContext context)
+  public void setDurableTimeout(int newValue) {
+    memberIdentifier.setDurableTimeout(newValue);
+  }
+
+  @Override
+  public void setDurableId(String id) {
+    memberIdentifier.setDurableId(id);
+  }
+
+  @Override
+  public void setMemberData(MemberData m) {
+    memberIdentifier.setMemberData(m);
+  }
+
+  @Override
+  public InetAddress getInetAddress() {
+    return memberIdentifier.getInetAddress();
+  }
+
+  @Override
+  public int getMembershipPort() {
+    return memberIdentifier.getMembershipPort();
+  }
+
+  @Override
+  public short getVersionOrdinal() {
+    return memberIdentifier.getVersionOrdinal();
+  }
+
+  @Override
+  public int getDirectChannelPort() {
+    return memberIdentifier.getDirectChannelPort();
+  }
+
+  @Override
+  public int getVmKind() {
+    return memberIdentifier.getVmKind();
+  }
+
+  @Override
+  public int getMemberWeight() {
+    return memberIdentifier.getMemberWeight();
+  }
+
+  @Override
+  public int getVmViewId() {
+    return memberIdentifier.getVmViewId();
+  }
+
+  @Override
+  public boolean preferredForCoordinator() {
+    return memberIdentifier.preferredForCoordinator();
+  }
+
+  @Override
+  public List<String> getGroups() {
+    return memberIdentifier.getGroups();
+  }
+
+  @Override
+  public void setVmViewId(int p) {
+    memberIdentifier.setVmViewId(p);
+  }
+
+  @Override
+  public void setPreferredForCoordinator(boolean preferred) {
+    memberIdentifier.setPreferredForCoordinator(preferred);
+  }
+
+  @Override
+  public void setDirectChannelPort(int dcPort) {
+    memberIdentifier.setDirectChannelPort(dcPort);
+  }
+
+  @Override
+  public void setVmKind(int dmType) {
+    memberIdentifier.setVmKind(dmType);
+  }
+
+  @Override
+  public String getName() {
+    return memberIdentifier.getName();
+  }
+
+  @Override
+  public boolean isPartial() {
+    return memberIdentifier.isPartial();
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    InternalDistributedMember that = (InternalDistributedMember) o;
+    return memberIdentifier.equals(that.memberIdentifier);
+  }
+
+  @Override
+  public int hashCode() {
+    return memberIdentifier.hashCode();
+  }
+
+  @Override
+  public String toString() {
+    return memberIdentifier.toString();
+  }
+
+  public void addFixedToString(StringBuilder sb, boolean useIpAddress) {
+    memberIdentifier.addFixedToString(sb, useIpAddress);
+  }
+
+  @Override
+  public void writeExternal(ObjectOutput out) throws IOException {
+    memberIdentifier.writeExternal(out);
+  }
+
+  @Override
+  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
+    memberIdentifier.readExternal(in);
+  }
+
+  @Override
+  public void toData(DataOutput out,
+      SerializationContext context)
-    super.toDataPre_GFE_9_0_0_0(out, context);
+    memberIdentifier.toData(out, context);
-  @Override
-  public void toDataPre_GFE_7_1_0_0(DataOutput out, SerializationContext context)
+  public void toDataPre_GFE_9_0_0_0(DataOutput out,
+      SerializationContext context)
-    super.toDataPre_GFE_7_1_0_0(out, context);
+    memberIdentifier.toDataPre_GFE_9_0_0_0(out, context);
+  }
+
+  public void toDataPre_GFE_7_1_0_0(DataOutput out,
+      SerializationContext context)
+      throws IOException {
+    memberIdentifier.toDataPre_GFE_7_1_0_0(out, context);
-  public void fromDataPre_GFE_9_0_0_0(DataInput in, DeserializationContext context)
+  public void fromData(DataInput in,
+      DeserializationContext context)
-    super.fromDataPre_GFE_9_0_0_0(in, context);
+    memberIdentifier.fromData(in, context);
-  public void fromDataPre_GFE_7_1_0_0(DataInput in, DeserializationContext context)
+  public void fromDataPre_GFE_9_0_0_0(DataInput in,
+      DeserializationContext context)
-    super.fromDataPre_GFE_7_1_0_0(in, context);
+    memberIdentifier.fromDataPre_GFE_9_0_0_0(in, context);
+  }
+
+  @Override
+  public void fromDataPre_GFE_7_1_0_0(DataInput in,
+      DeserializationContext context)
+      throws IOException, ClassNotFoundException {
+    memberIdentifier.fromDataPre_GFE_7_1_0_0(in, context);
+  }
+
+  @Override
+  public void _readEssentialData(DataInput in,
+      Function<InetAddress, String> hostnameResolver)
+      throws IOException, ClassNotFoundException {
+    memberIdentifier._readEssentialData(in, hostnameResolver);
+  }
+
+  @Override
+  public void writeEssentialData(DataOutput out) throws IOException {
+    memberIdentifier.writeEssentialData(out);
+  }
+
+  public void setPort(int p) {
+    memberIdentifier.setPort(p);
+  }
+
+  @Override
+  public MemberData getMemberData() {
+    return memberIdentifier.getMemberData();
+  }
+
+  @Override
+  public String getHostName() {
+    return memberIdentifier.getHostName();
+  }
+
+  @Override
+  public String getHost() {
+    return memberIdentifier.getHost();
+  }
+
+  @Override
+  public int getProcessId() {
+    return memberIdentifier.getProcessId();
+  }
+
+  @Override
+  public String getId() {
+    return memberIdentifier.getId();
+  }
+
+  @Override
+  public String getUniqueId() {
+    return memberIdentifier.getUniqueId();
+  }
+
+  public void setVersionObjectForTest(Version v) {
+    memberIdentifier.setVersionObjectForTest(v);
+  }
+
+  @Override
+  public Version getVersionObject() {
+    return memberIdentifier.getVersionObject();
+  }
+
+  @Override
+  public Version[] getSerializationVersions() {
+    return memberIdentifier.getSerializationVersions();
+  }
+
+  @Override
+  public String getUniqueTag() {
+    return memberIdentifier.getUniqueTag();
+  }
+
+  public void setUniqueTag(String tag) {
+    memberIdentifier.setUniqueTag(tag);
+  }
+
+  @Override
+  public void setIsPartial(boolean value) {
+    memberIdentifier.setIsPartial(value);
+  }
+
+  @Override
+  public void setName(String name) {
+    memberIdentifier.setName(name);
+  }
+
+  @Override
+  public String getDurableId() {
+    return memberIdentifier.getDurableId();
+  }
+
+  @Override
+  public int getDurableTimeout() {
+    return memberIdentifier.getDurableTimeout();
+  }
+
+  @Override
+  public void setHostName(String hostName) {
+    memberIdentifier.setHostName(hostName);
+  }
+
+  @Override
+  public void setProcessId(int id) {
+    memberIdentifier.setProcessId(id);
+  }
+
+  @Override
+  public boolean hasUUID() {
+    return memberIdentifier.hasUUID();
+  }
+
+  @Override
+  public long getUuidLeastSignificantBits() {
+    return memberIdentifier.getUuidLeastSignificantBits();
+  }
+
+  @Override
+  public long getUuidMostSignificantBits() {
+    return memberIdentifier.getUuidMostSignificantBits();
+  }
+
+  @Override
+  public boolean isNetworkPartitionDetectionEnabled() {
+    return memberIdentifier.isNetworkPartitionDetectionEnabled();
+  }
+
+  @Override
+  public void setUUID(UUID randomUUID) {
+    memberIdentifier.setUUID(randomUUID);
+  }
+
+  @Override
+  public void setMemberWeight(byte b) {
+    memberIdentifier.setMemberWeight(b);
+  }
+
+  @Override
+  public void setUdpPort(int i) {
+    memberIdentifier.setUdpPort(i);
+  }
+
+  @Override
+  public UUID getUUID() {
+    return memberIdentifier.getUUID();
