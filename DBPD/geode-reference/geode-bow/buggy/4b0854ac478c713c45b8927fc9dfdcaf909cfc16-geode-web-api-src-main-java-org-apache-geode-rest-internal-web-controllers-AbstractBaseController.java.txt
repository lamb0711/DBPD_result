GEODE-5016: Replace org.json with Jackson in geode-web-api (#3267)


+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.JsonNode;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-    JSONObject jsonObject;
-      jsonObject = new JSONObject(jsonData);
-      String oldValue = jsonObject.get("@old").toString();
-      String newValue = jsonObject.get("@new").toString();
+      JsonNode jsonObject = objectMapper.readTree(jsonData);
+      JsonNode oldValue = jsonObject.get("@old");
+      JsonNode newValue = jsonObject.get("@new");
-      return (T) casValue(regionNamePath, key, convert(oldValue), convert(newValue));
+      if (oldValue == null || newValue == null) {
+        throw new MalformedJsonException("Json doc specified in request body is invalid!");
+      }
-    } catch (JSONException je) {
+      return (T) casValue(regionNamePath, key, convert(oldValue.toString()),
+          convert(newValue.toString()));
+
+    } catch (IOException je) {
-  ResponseEntity<String> processQueryResponse(Query query, Object args[], Object queryResult)
-      throws JSONException {
+  ResponseEntity<String> processQueryResponse(Query query, Object args[], Object queryResult) {
-    JSONArray jsonArr = null;
-      jsonArr = new JSONArray(jsonArray);
-      Collection<PdxInstance> pdxInstances = new ArrayList<PdxInstance>();
+      JsonNode array = objectMapper.readTree(jsonArray);
+      if (!array.isArray()) {
+        throw new MalformedJsonException(
+            "Json document specified in request body is not an array!");
+      }
-      for (int index = 0; index < jsonArr.length(); index++) {
-        // String element = jsonArr.getJSONObject(i).toString();
-        // String element = jsonArr.getString(i);
-        Object object = jsonArr.get(index);
-        String element = object.toString();
+      Collection<PdxInstance> pdxInstances = new ArrayList<>();
+
+      for (int index = 0; index < array.size(); index++) {
+        JsonNode object = array.get(index);
+        String element = objectMapper.writeValueAsString(object);
-    } catch (JSONException je) {
+    } catch (IOException je) {
-        if (typeValue == null)
-          return (T) new JSONObject();
+        if (typeValue == null) {
+          return (T) objectMapper.createObjectNode();
+        }
-    final JSONTypes jsonType = validateJsonAndFindType(arguments);
-    if (JSONTypes.JSON_ARRAY.equals(jsonType)) {
+    JsonNode node;
+    try {
+      node = objectMapper.readTree(arguments);
+    } catch (IOException e) {
+      throw new MalformedJsonException("Json document specified in request body is not valid!");
+    }
+
+    if (node.isArray()) {
-        JSONArray jsonArray = new JSONArray(arguments);
-        Object[] args = new Object[jsonArray.length()];
-        for (int index = 0; index < jsonArray.length(); index++) {
-          args[index] = jsonToObject(jsonArray.get(index).toString());
+        Object[] args = new Object[node.size()];
+        for (int index = 0; index < node.size(); index++) {
+          args[index] = jsonToObject(objectMapper.writeValueAsString(node.get(index)));
-      } catch (JSONException je) {
+      } catch (JsonProcessingException je) {
-    } else if (JSONTypes.JSON_OBJECT.equals(jsonType)) {
+    } else if (node.isObject()) {
-    JSONArray jsonArr = null;
+    JsonNode jsonArr;
-      jsonArr = new JSONArray(json);
-    } catch (JSONException e) {
+      jsonArr = objectMapper.readTree(json);
+    } catch (IOException e) {
-    if (jsonArr.length() != keys.length) {
+    if (!jsonArr.isArray() || jsonArr.size() != keys.length) {
-        PdxInstance pdxObj = convert(jsonArr.getJSONObject(i).toString());
+        PdxInstance pdxObj = convert(objectMapper.writeValueAsString(jsonArr.get(i)));
-      } catch (JSONException e) {
+      } catch (JsonProcessingException e) {
-    return new ResponseEntity<String>(headers, HttpStatus.OK);
+    return new ResponseEntity<>(headers, HttpStatus.OK);
-      Object jsonObj = new JSONTokener(json).nextValue();
+      JsonParser jp = new JsonFactory().createParser(json);
+      JsonToken token = jp.nextToken();
-      if (jsonObj instanceof JSONObject) {
+      if (token == JsonToken.START_OBJECT) {
-      } else if (jsonObj instanceof JSONArray) {
+      } else if (token == JsonToken.START_ARRAY) {
-    } catch (JSONException je) {
+    } catch (IOException je) {
