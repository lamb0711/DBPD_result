GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.client.ClientCache;
+import org.apache.geode.cache.client.internal.ConnectionImpl;
+import org.apache.geode.cache.client.internal.InternalClientCache;
-public class GemFireCacheImpl
-    implements InternalCache, ClientCache, HasCachePerfStats, DistributionAdvisee, CacheTime {
+public class GemFireCacheImpl implements InternalCache, InternalClientCache, HasCachePerfStats,
+    DistributionAdvisee, CacheTime {
+   * TODO: move or static or encapsulate with interface methods
+   *
-  public static final int DEFAULT_CLIENT_FUNCTION_TIMEOUT = 0;
-
-  private static int clientFunctionTimeout;
-
+  @Override
+  @Override
+  @Override
+  @Override
-    int time = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "CLIENT_FUNCTION_TIMEOUT",
-        DEFAULT_CLIENT_FUNCTION_TIMEOUT);
-    clientFunctionTimeout = time >= 0 ? time : DEFAULT_CLIENT_FUNCTION_TIMEOUT;
-
+  @Override
+  @Override
+  @Override
-  void addDiskStore(DiskStoreImpl dsi) {
+  @Override
+  public void addDiskStore(DiskStoreImpl dsi) {
-  void removeDiskStore(DiskStoreImpl dsi) {
-    this.diskStores.remove(dsi.getName());
-    this.regionOwnedDiskStores.remove(dsi.getName());
+  @Override
+  public void removeDiskStore(DiskStoreImpl diskStore) {
+    this.diskStores.remove(diskStore.getName());
+    this.regionOwnedDiskStores.remove(diskStore.getName());
-    if (!dsi.getOwnedByRegion())
-      this.system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, dsi);
+    if (!diskStore.getOwnedByRegion())
+      this.system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, diskStore);
-  void addRegionOwnedDiskStore(DiskStoreImpl dsi) {
+  @Override
+  public void addRegionOwnedDiskStore(DiskStoreImpl dsi) {
+  // TODO: remove static from defaultDiskStoreName and move methods to InternalCache
-  public Collection<DiskStoreImpl> listDiskStores() {
+  public Collection<DiskStore> listDiskStores() {
-  public Collection<DiskStoreImpl> listDiskStoresIncludingRegionOwned() {
-    Collection<DiskStoreImpl> allDiskStores = new HashSet<>();
+  public Collection<DiskStore> listDiskStoresIncludingRegionOwned() {
+    Collection<DiskStore> allDiskStores = new HashSet<>();
+  @Override
+  @Override
-  EventTracker.ExpiryTask getEventTrackerTask() {
+  @Override
+  public EventTracker.ExpiryTask getEventTrackerTask() {
+  @Override
+  @Override
+  // TODO: createVMRegion method is too complex for IDE to analyze
-    // TODO: refactor overly complex method
+
+  @Override
+  @Override
-  boolean isGlobalRegionInitializing(String fullPath) {
+  @Override
+  public boolean isGlobalRegionInitializing(String fullPath) {
-  public void addRegionListener(RegionListener l) {
-    this.regionListeners.add(l);
+  public void addRegionListener(RegionListener regionListener) {
+    this.regionListeners.add(regionListener);
-  public void removeRegionListener(RegionListener l) {
-    this.regionListeners.remove(l);
+  public void removeRegionListener(RegionListener regionListener) {
+    this.regionListeners.remove(regionListener);
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  void addPartitionedRegion(PartitionedRegion region) {
+  public void addPartitionedRegion(PartitionedRegion region) {
-  void removePartitionedRegion(PartitionedRegion region) {
+  @Override
+  public void removePartitionedRegion(PartitionedRegion region) {
+  @Override
+  @Override
+  @Override
+  @Override
-  DistributedRegion getRegionInDestroy(String path) {
+  @Override
+  public DistributedRegion getRegionInDestroy(String path) {
-  TXEntryStateFactory getTXEntryStateFactory() {
+  @Override
+  public TXEntryStateFactory getTXEntryStateFactory() {
+  @Override
+  @Override
-  DiskStoreMonitor getDiskStoreMonitor() {
+  @Override
+  public DiskStoreMonitor getDiskStoreMonitor() {
-  public static int getClientFunctionTimeout() {
-    return clientFunctionTimeout;
-  }
-
