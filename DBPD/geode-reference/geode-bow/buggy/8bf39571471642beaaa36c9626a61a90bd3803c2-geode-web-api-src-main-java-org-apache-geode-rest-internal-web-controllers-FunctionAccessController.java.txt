Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  @RequestMapping(method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_UTF8_VALUE })
-  @ApiOperation(
-      value = "list all functions",
-      notes = "list all functions available in the GemFire cluster",
-      response = void.class
-  )
-  @ApiResponses({
-      @ApiResponse(code = 200, message = "OK."),
-      @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-      @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")
-  })
+  @RequestMapping(method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
+  @ApiOperation(value = "list all functions",
+      notes = "list all functions available in the GemFire cluster", response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-    String listFunctionsAsJson = JSONUtils.formulateJsonForListFunctionsCall(registeredFunctions.keySet());
+    String listFunctionsAsJson =
+        JSONUtils.formulateJsonForListFunctionsCall(registeredFunctions.keySet());
-   * Execute a function on Gemfire data node using REST API call.
-   * Arguments to the function are passed as JSON string in the request body.
+   * Execute a function on Gemfire data node using REST API call. Arguments to the function are
+   * passed as JSON string in the request body.
-   * @param region     list of regions on which function to be executed.
-   * @param members    list of nodes on which function to be executed.
-   * @param groups     list of groups on which function to be executed.
-   * @param filter     list of keys which the function will use to determine on which node to execute the function.
+   * @param region list of regions on which function to be executed.
+   * @param members list of nodes on which function to be executed.
+   * @param groups list of groups on which function to be executed.
+   * @param filter list of keys which the function will use to determine on which node to execute
+   *        the function.
-  @RequestMapping(method = RequestMethod.POST, value = "/{functionId}", produces = { MediaType.APPLICATION_JSON_VALUE })
-  @ApiOperation(
-      value = "execute function",
+  @RequestMapping(method = RequestMethod.POST, value = "/{functionId}",
+      produces = {MediaType.APPLICATION_JSON_VALUE})
+  @ApiOperation(value = "execute function",
-      response = void.class
-  )
-  @ApiResponses({
-      @ApiResponse(code = 200, message = "OK."),
-      @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-      @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
-      @ApiResponse(code = 400, message = "if Function arguments specified as JSON document in the request body is invalid")
-  })
+      @ApiResponse(code = 400,
+          message = "if Function arguments specified as JSON document in the request body is invalid")})
-      @RequestBody(required = false) final String argsInBody
-  ) {
+      @RequestBody(required = false) final String argsInBody) {
-        ArrayUtils.toString(argsInBody), region);
+          ArrayUtils.toString(argsInBody), region);
-        throw new GemfireRestException(String.format("The Region identified by name (%1$s) could not found!", region), fe);
+        throw new GemfireRestException(
+            String.format("The Region identified by name (%1$s) could not found!", region), fe);
-            ArrayUtils.toString(argsInBody), ArrayUtils.toString(members));
+          ArrayUtils.toString(argsInBody), ArrayUtils.toString(members));
-        throw new GemfireRestException("Could not found the specified members in distributed system!", fe);
+        throw new GemfireRestException(
+            "Could not found the specified members in distributed system!", fe);
-            ArrayUtils.toString(argsInBody), ArrayUtils.toString(groups));
+          ArrayUtils.toString(argsInBody), ArrayUtils.toString(groups));
-        throw new GemfireRestException("no member(s) are found belonging to the provided group(s)!", fe);
+        throw new GemfireRestException("no member(s) are found belonging to the provided group(s)!",
+            fe);
-      //Default case is to execute function on all existing data node in DS, document this.
+      // Default case is to execute function on all existing data node in DS, document this.
-            ArrayUtils.toString(argsInBody));
+          ArrayUtils.toString(argsInBody));
-        throw new GemfireRestException("Distributed system does not contain any valid data node to run the specified  function!", fe);
+        throw new GemfireRestException(
+            "Distributed system does not contain any valid data node to run the specified  function!",
+            fe);
-            ArrayUtils.toString(filter));
+          ArrayUtils.toString(filter));
-        //execute function with specified arguments
+        // execute function with specified arguments
-        //execute function with no args
+        // execute function with no args
-      throw new GemfireRestException("Specified key is null and this region does not permit null keys!", npe);
+      throw new GemfireRestException(
+          "Specified key is null and this region does not permit null keys!", npe);
-      throw new GemfireRestException("Server has encountered error while executing the function!", fe);
+      throw new GemfireRestException("Server has encountered error while executing the function!",
+          fe);
-          String functionResultAsJson = JSONUtils.convertCollectionToJson((ArrayList<Object>) functionResult);
+          String functionResultAsJson =
+              JSONUtils.convertCollectionToJson((ArrayList<Object>) functionResult);
-          throw new GemfireRestException("Could not convert function results into Restful (JSON) format!", e);
+          throw new GemfireRestException(
+              "Could not convert function results into Restful (JSON) format!", e);
-        throw new GemfireRestException("Function has returned results that could not be converted into Restful (JSON) format!");
+        throw new GemfireRestException(
+            "Function has returned results that could not be converted into Restful (JSON) format!");
-      throw new GemfireRestException("Server has encountered an error while processing function execution!", fe);
+      throw new GemfireRestException(
+          "Server has encountered an error while processing function execution!", fe);
