Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An entity that tracks transactions must implement this interface. 
+ * An entity that tracks transactions must implement this interface.
-   * Used by transaction operations that are doing a read
-   * operation on the specified region.
-   * @return the TXRegionState for the given LocalRegion
-   * or null if no state exists
+   * Used by transaction operations that are doing a read operation on the specified region.
+   * 
+   * @return the TXRegionState for the given LocalRegion or null if no state exists
-   * Used by transaction operations that are doing a write
-   * operation on the specified region.
+   * Used by transaction operations that are doing a write operation on the specified region.
+   * 
-   * Returns a nanotimer timestamp that marks when begin was
-   * called on this transaction.
+   * Returns a nanotimer timestamp that marks when begin was called on this transaction.
-   * Returns the number of changes this transaction would have made
-   * if it successfully committed.
+   * Returns the number of changes this transaction would have made if it successfully committed.
-   * Determines if a transaction is in progress.
-   * Transactions are in progress until they commit or rollback.
+   * Determines if a transaction is in progress. Transactions are in progress until they commit or
+   * rollback.
+   * 
-   * Returns the next modification serial number.
-   * Note this method is not thread safe but does not need to be since
-   * a single thread owns a transaction.
+   * Returns the next modification serial number. Note this method is not thread safe but does not
+   * need to be since a single thread owns a transaction.
+   * 
-  
+
-  public void precommit() throws CommitConflictException, UnsupportedOperationInTransactionException;
+  public void precommit()
+      throws CommitConflictException, UnsupportedOperationInTransactionException;
- 
+
-  public void invalidateExistingEntry(final EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry);
+  public void invalidateExistingEntry(final EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry);
-   * @return a Region.Entry if it exists either in committed state or in transactional state, otherwise returns null  
+   * @return a Region.Entry if it exists either in committed state or in transactional state,
+   *         otherwise returns null
-  public Object getDeserializedValue(KeyInfo keyInfo,
-                                     LocalRegion localRegion,
-                                     boolean updateStats,
-                                     boolean disableCopyOnRead,
-                                     boolean preferCD,
-                                     EntryEventImpl clientEvent,
-                                     boolean returnTombstones,
-                                     boolean retainResult);
+  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion, boolean updateStats,
+      boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent,
+      boolean returnTombstones, boolean retainResult);
-  public boolean txPutEntry(final EntryEventImpl event, boolean ifNew, boolean requireOldValue, boolean checkResources, Object expectedOldValue);
+  public boolean txPutEntry(final EntryEventImpl event, boolean ifNew, boolean requireOldValue,
+      boolean checkResources, Object expectedOldValue);
-   * @param rememberRead true if the value read from committed state
-   *   needs to be remembered in tx state for repeatable read.
-   * @param  createTxEntryIfAbsent should a transactional entry be created if not present. 
-   * @return a txEntryState or null if the entry doesn't exist in the transaction and/or committed state. 
+   * @param rememberRead true if the value read from committed state needs to be remembered in tx
+   *        state for repeatable read.
+   * @param createTxEntryIfAbsent should a transactional entry be created if not present.
+   * @return a txEntryState or null if the entry doesn't exist in the transaction and/or committed
+   *         state.
-  public TXEntryState txReadEntry(KeyInfo entryKey, LocalRegion localRegion, boolean rememberRead
-      ,boolean createTxEntryIfAbsent);
+  public TXEntryState txReadEntry(KeyInfo entryKey, LocalRegion localRegion, boolean rememberRead,
+      boolean createTxEntryIfAbsent);
-   * @return true if transaction is in progress and the given state has the same identity as this instance
+   * @return true if transaction is in progress and the given state has the same identity as this
+   *         instance
-  
+
-   * On the remote node, the tx can potentially be accessed by multiple threads,
-   * specially with function execution. This lock should be used to synchronize
-   * access to the tx state.
+   * On the remote node, the tx can potentially be accessed by multiple threads, specially with
+   * function execution. This lock should be used to synchronize access to the tx state.
+   * 
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public void recordTXOperation(ServerRegionDataAccess region, ServerRegionOperation op, Object key, Object arguments[]);
+  public void recordTXOperation(ServerRegionDataAccess region, ServerRegionOperation op, Object key,
+      Object arguments[]);
-  
+
-  
+
-  
+
-  
+
-  
+
