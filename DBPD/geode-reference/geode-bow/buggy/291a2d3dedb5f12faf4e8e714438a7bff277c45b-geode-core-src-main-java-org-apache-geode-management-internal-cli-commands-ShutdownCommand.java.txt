GEODE-5971: refactor various commands to use ResultModel (#3399)



-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class ShutdownCommand extends InternalGfshCommand {
+public class ShutdownCommand extends GfshCommand {
-  public Result shutdown(
+  public ResultModel shutdown(
-          help = CliStrings.INCLUDE_LOCATORS_HELP) boolean shutdownLocators) {
-    try {
-      if (userSpecifiedTimeout < Integer.parseInt(DEFAULT_TIME_OUT)) {
-        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__IMPROPER_TIMEOUT);
-      }
+          help = CliStrings.INCLUDE_LOCATORS_HELP) boolean shutdownLocators)
+      throws InterruptedException, ExecutionException, TimeoutException {
-      // convert to milliseconds
-      long timeout = userSpecifiedTimeout * 1000L;
-      InternalCache cache = (InternalCache) getCache();
-      int numDataNodes = getAllNormalMembers().size();
-      Set<DistributedMember> locators = getAllMembers();
-      Set<DistributedMember> dataNodes = getAllNormalMembers();
-      locators.removeAll(dataNodes);
-
-      if (!shutdownLocators && numDataNodes == 0) {
-        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__NO_DATA_NODE_FOUND);
-      }
-
-      String managerName = cache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
-
-      final DistributedMember manager = getMember(managerName);
-
-      dataNodes.remove(manager);
-
-      // shut down all data members excluding this manager if manager is a data node
-      long timeElapsed = shutDownNodeWithTimeOut(timeout, dataNodes);
-      timeout = timeout - timeElapsed;
-
-      // shut down locators one by one
-      if (shutdownLocators) {
-        if (manager == null) {
-          return ResultBuilder.createUserErrorResult(CliStrings.SHUTDOWN__MSG__MANAGER_NOT_FOUND);
-        }
-
-        // remove current locator as that would get shutdown last
-        if (locators.contains(manager)) {
-          locators.remove(manager);
-        }
-
-        for (DistributedMember locator : locators) {
-          Set<DistributedMember> lsSet = new HashSet<>();
-          lsSet.add(locator);
-          long elapsedTime = shutDownNodeWithTimeOut(timeout, lsSet);
-          timeout = timeout - elapsedTime;
-        }
-      }
-
-      if (locators.contains(manager) && !shutdownLocators) { // This means manager is a locator and
-        // shutdownLocators is false. Hence we
-        // should not stop the manager
-        return ResultBuilder.createInfoResult("Shutdown is triggered");
-      }
-      // now shut down this manager
-      Set<DistributedMember> mgrSet = new HashSet<>();
-      mgrSet.add(manager);
-      // No need to check further timeout as this is the last node we will be
-      // shutting down
-      shutDownNodeWithTimeOut(timeout, mgrSet);
-
-    } catch (TimeoutException tex) {
-      return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN_TIMEDOUT);
-    } catch (Exception ex) {
-      logger.error(ex.getMessage(), ex);
-      return ResultBuilder.createUserErrorResult(ex.getMessage());
+    if (userSpecifiedTimeout < Integer.parseInt(DEFAULT_TIME_OUT)) {
+      return ResultModel.createInfo(CliStrings.SHUTDOWN__MSG__IMPROPER_TIMEOUT);
-    // @TODO. List all the nodes which could be successfully shutdown
-    return ResultBuilder.createInfoResult("Shutdown is triggered");
+
+    // convert to milliseconds
+    long timeout = userSpecifiedTimeout * 1000L;
+    InternalCache cache = (InternalCache) getCache();
+    int numDataNodes = getAllNormalMembers().size();
+    Set<DistributedMember> locators = getAllMembers();
+    Set<DistributedMember> dataNodes = getAllNormalMembers();
+    locators.removeAll(dataNodes);
+
+    if (!shutdownLocators && numDataNodes == 0) {
+      return ResultModel.createInfo(CliStrings.SHUTDOWN__MSG__NO_DATA_NODE_FOUND);
+    }
+
+    String managerName = cache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
+
+    final DistributedMember manager = getMember(managerName);
+
+    dataNodes.remove(manager);
+
+    // shut down all data members excluding this manager if manager is a data node
+    long timeElapsed = shutDownNodeWithTimeOut(timeout, dataNodes);
+    timeout = timeout - timeElapsed;
+
+    // shut down locators one by one
+    if (shutdownLocators) {
+      if (manager == null) {
+        return ResultModel.createError(CliStrings.SHUTDOWN__MSG__MANAGER_NOT_FOUND);
+      }
+
+      // remove current locator as that would get shutdown last
+      if (locators.contains(manager)) {
+        locators.remove(manager);
+      }
+
+      for (DistributedMember locator : locators) {
+        Set<DistributedMember> lsSet = new HashSet<>();
+        lsSet.add(locator);
+        long elapsedTime = shutDownNodeWithTimeOut(timeout, lsSet);
+        timeout = timeout - elapsedTime;
+      }
+    }
+
+    if (locators.contains(manager) && !shutdownLocators) { // This means manager is a locator and
+      // shutdownLocators is false. Hence we
+      // should not stop the manager
+      return ResultModel.createInfo("Shutdown is triggered");
+    }
+    // now shut down this manager
+    Set<DistributedMember> mgrSet = new HashSet<>();
+    mgrSet.add(manager);
+    // No need to check further timeout as this is the last node we will be
+    // shutting down
+    shutDownNodeWithTimeOut(timeout, mgrSet);
+
+    return ResultModel.createInfo("Shutdown is triggered");
-    public Result preExecution(GfshParseResult parseResult) {
+    public ResultModel preExecution(GfshParseResult parseResult) {
-        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
+        return ResultModel.createInfo(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
-        return ResultBuilder
-            .createShellClientAbortOperationResult(CliStrings.SHUTDOWN__MSG__ABORTING_SHUTDOWN);
+        return ResultModel.createInfo(CliStrings.SHUTDOWN__MSG__ABORTING_SHUTDOWN);
-        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
+        return ResultModel.createInfo(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
