Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * THIS FILE IS ENCODED IN UTF-8 IN ORDER TO TEST UNICODE IN FIELD NAMES.
- * THE ENCODING MUST BE SPECIFIED AS UTF-8 WHEN COMPILED
+ * THIS FILE IS ENCODED IN UTF-8 IN ORDER TO TEST UNICODE IN FIELD NAMES. THE ENCODING MUST BE
+ * SPECIFIED AS UTF-8 WHEN COMPILED
-  public String [] names={"aaa","bbb","ccc","ddd"};
-  public String unicodeṤtring; 
+  public String[] names = {"aaa", "bbb", "ccc", "ddd"};
+  public String unicodeṤtring;
+
-  
+
-  
+
-    this.createTime =time;
+    this.createTime = time;
-  
+
-    return pkid;  
+    return pkid;
+
-  
+
-     return collectionHolderMap; 
+    return collectionHolderMap;
-  
+
-      return new ComparableWrapper(x);
+    return new ComparableWrapper(x);
-  
+
-  public static String secIds[] = { "SUN", "IBM", "YHOO", "GOOG", "MSFT",
-      "AOL", "APPL", "ORCL", "SAP", "DELL", "RHAT", "NOVL", "HP"};
-  
+  public static String secIds[] = {"SUN", "IBM", "YHOO", "GOOG", "MSFT", "AOL", "APPL", "ORCL",
+      "SAP", "DELL", "RHAT", "NOVL", "HP"};
+
-    
+
- 
+
-    if(i % 2 == 0) {
+    if (i % 2 == 0) {
-    }
-    else {
+    } else {
-    position1 = new Position(secIds[Position.cnt % secIds.length],
-        Position.cnt * 1000);
+    position1 = new Position(secIds[Position.cnt % secIds.length], Position.cnt * 1000);
-      position2 = new Position(secIds[Position.cnt % secIds.length],
-          Position.cnt * 1000);
-    }
-    else {
+      position2 = new Position(secIds[Position.cnt % secIds.length], Position.cnt * 1000);
+    } else {
-    positions.put(secIds[Position.cnt % secIds.length], new Position(
-        secIds[Position.cnt % secIds.length], Position.cnt * 1000));
-    positions.put(secIds[Position.cnt % secIds.length], new Position(
-        secIds[Position.cnt % secIds.length], Position.cnt * 1000));
+    positions.put(secIds[Position.cnt % secIds.length],
+        new Position(secIds[Position.cnt % secIds.length], Position.cnt * 1000));
+    positions.put(secIds[Position.cnt % secIds.length],
+        new Position(secIds[Position.cnt % secIds.length], Position.cnt * 1000));
-    
+
-  
-  public Portfolio(int i, int j){
+
+  public Portfolio(int i, int j) {
-    for (int k=0; k < position3.length; k++) {
-      Position p = new Position(secIds[k], (k+1) * 1000);
-      p.portfolioId = (k+1);
+    for (int k = 0; k < position3.length; k++) {
+      Position p = new Position(secIds[k], (k + 1) * 1000);
+      p.portfolioId = (k + 1);
-  
+
-  
+
-    Portfolio p2 = (Portfolio)o;
+    Portfolio p2 = (Portfolio) o;
-    
+
-    
+
-    String out = "Portfolio [ID=" + ID + " status=" + status + " type=" + type
-        + " pkid=" + pkid + "\n ";
+    String out =
+        "Portfolio [ID=" + ID + " status=" + status + " type=" + type + " pkid=" + pkid + "\n ";
-  
-  public boolean boolFunction(String strArg){
+
+  public boolean boolFunction(String strArg) {
-  }  //added by vikramj
-  
+  } // added by vikramj
+
-  }  //added by vikramj
-  
-  public String funcReturnSecId(Object o){
-      return ((Position)o).getSecId();
-  }//added by vikramj
-  
+  } // added by vikramj
+
+  public String funcReturnSecId(Object o) {
+    return ((Position) o).getSecId();
+  }// added by vikramj
+
-  } 
-  
+  }
+
-  
+
-  
+
+
-    if(!isNull) {
+    if (!isNull) {
-    
-    this.position1 = (Position)DataSerializer.readObject(in);
-    this.position2 = (Position)DataSerializer.readObject(in);
-    this.positions = (HashMap)DataSerializer.readObject(in);
-    this.collectionHolderMap = (HashMap)DataSerializer.readObject(in);
+
+    this.position1 = (Position) DataSerializer.readObject(in);
+    this.position2 = (Position) DataSerializer.readObject(in);
+    this.positions = (HashMap) DataSerializer.readObject(in);
+    this.collectionHolderMap = (HashMap) DataSerializer.readObject(in);
-      for (int i=0; i < position3Size; i++){
-        this.position3[i] = (Position)DataSerializer.readObject(in);
-        
+      for (int i = 0; i < position3Size; i++) {
+        this.position3[i] = (Position) DataSerializer.readObject(in);
+
-  
+
-    if(this.shortID == null) {
-      DataSerializer.writePrimitiveBoolean(true, out);  
-    }else {
+    if (this.shortID == null) {
+      DataSerializer.writePrimitiveBoolean(true, out);
+    } else {
-    
+
-      out.writeInt(this.position3.length); 
-      for (int i=0; i < position3.length; i++){
+      out.writeInt(this.position3.length);
+      for (int i = 0; i < position3.length; i++) {
-  } 
-  
+  }
+
-  
+
-
-
