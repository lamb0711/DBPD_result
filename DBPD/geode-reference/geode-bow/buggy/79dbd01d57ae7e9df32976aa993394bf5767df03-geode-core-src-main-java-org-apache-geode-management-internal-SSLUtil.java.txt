GEODE-6450: ClientClusterManagementService supports ssl connection (#3276)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* provide capability for the client to configure ssl connection when getting the cluster management service.
* from the server side, create the SSLContext from the ssl configuration specified on the server
* refactor ssl code

+import java.io.FileInputStream;
+import java.security.KeyStore;
+import java.security.SecureRandom;
+import java.security.cert.X509Certificate;
+import java.util.Objects;
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509TrustManager;
+import org.apache.geode.internal.admin.SSLConfig;
+
-
-  public static String getSSLAlgo(String[] protocols) {
-    String c = null;
-
+  public static SSLContext getSSLContextInstance(SSLConfig sslConfig) {
+    String[] protocols = sslConfig.getProtocolsAsStringArray();
+    SSLContext sslContext = null;
-            SSLContext.getInstance(protocol);
-            c = protocol;
+            sslContext = SSLContext.getInstance(protocol);
-    if (c != null) {
-      return c;
+    if (sslContext != null) {
+      return sslContext;
-        SSLContext.getInstance(algo);
-        c = algo;
+        sslContext = SSLContext.getInstance(algo);
-    return c;
+    return sslContext;
+  public static SSLContext createAndConfigureSSLContext(SSLConfig sslConfig,
+      boolean skipSslVerification) {
+    try {
+      if (sslConfig.useDefaultSSLContext()) {
+        return SSLContext.getDefault();
+      }
+      SSLContext ssl = getSSLContextInstance(sslConfig);
+
+      KeyManager[] keyManagers = getKeyManagers(sslConfig);
+      TrustManager[] trustManagers = getTrustManagers(sslConfig, skipSslVerification);
+
+      ssl.init(keyManagers, trustManagers, new SecureRandom());
+      return ssl;
+    } catch (Exception e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
+  }
+
+  private static KeyManager[] getKeyManagers(SSLConfig sslConfig) throws Exception {
+    FileInputStream keyStoreStream = null;
+    KeyManagerFactory keyManagerFactory = null;
+
+    try {
+      if (StringUtils.isNotBlank(sslConfig.getKeystore())) {
+        String keyStoreType = Objects.toString(sslConfig.getKeystoreType(), "JKS");
+        KeyStore clientKeys = KeyStore.getInstance(keyStoreType);
+        keyStoreStream = new FileInputStream(sslConfig.getKeystore());
+        clientKeys.load(keyStoreStream, sslConfig.getKeystorePassword().toCharArray());
+
+        keyManagerFactory =
+            KeyManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
+        keyManagerFactory.init(clientKeys, sslConfig.getKeystorePassword().toCharArray());
+      }
+    } finally {
+      if (keyStoreStream != null) {
+        keyStoreStream.close();
+      }
+    }
+
+    return keyManagerFactory != null ? keyManagerFactory.getKeyManagers() : null;
+  }
+
+  private static TrustManager[] getTrustManagers(SSLConfig sslConfig, boolean skipSslVerification)
+      throws Exception {
+    FileInputStream trustStoreStream = null;
+    TrustManagerFactory trustManagerFactory = null;
+
+    if (skipSslVerification) {
+      TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
+        @Override
+        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+          return null;
+        }
+
+        @Override
+        public void checkClientTrusted(X509Certificate[] certs, String authType) {}
+
+        @Override
+        public void checkServerTrusted(X509Certificate[] certs, String authType) {}
+
+      }};
+      return trustAllCerts;
+    }
+
+    try {
+      // load server public key
+      if (StringUtils.isNotBlank(sslConfig.getTruststore())) {
+        String trustStoreType = Objects.toString(sslConfig.getTruststoreType(), "JKS");
+        KeyStore serverPub = KeyStore.getInstance(trustStoreType);
+        trustStoreStream = new FileInputStream(sslConfig.getTruststore());
+        serverPub.load(trustStoreStream, sslConfig.getTruststorePassword().toCharArray());
+        trustManagerFactory =
+            TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
+        trustManagerFactory.init(serverPub);
+      }
+    } finally {
+      if (trustStoreStream != null) {
+        trustStoreStream.close();
+      }
+    }
+    return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;
+  }
+
