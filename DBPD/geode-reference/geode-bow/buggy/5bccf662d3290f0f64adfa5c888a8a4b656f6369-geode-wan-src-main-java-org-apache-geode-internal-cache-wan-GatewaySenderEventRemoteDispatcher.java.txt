GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-              LocalizedMessage.create(
-                  LocalizedStrings.GatewayEventRemoteDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
+              "Stopping the processor because the following exception occurred while processing a batch:",
-            LocalizedMessage.create(
-                LocalizedStrings.GatewayEventRemoteDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
+            "Stopping the processor because the following exception occurred while processing a batch:",
-          LocalizedMessage.create(
-              LocalizedStrings.GatewayEventRemoteDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
+          "Stopping the processor because the following exception occurred while processing a batch:",
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_EXCEPTION_DURING_PROCESSING_BATCH_1_ON_CONNECTION_2
-              .toLocalizedString(new Object[] {this, Integer.valueOf(currentBatchId), connection}),
+          String.format("%s : Exception during processing batch  %s  on connection  %s",
+              new Object[] {this, Integer.valueOf(currentBatchId), connection}),
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GatewaySenderEventRemoteDispatcher_MESSAGE_TOO_LARGE_EXCEPTION,
-            new Object[] {events.size(), newBatchSize}), e);
+        logger.warn(String.format(
+            "The following exception occurred attempting to send a batch of %s events. The batch will be tried again after reducing the batch size to %s events.",
+            events.size(), newBatchSize),
+            e);
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_EXCEPTION_DURING_PROCESSING_BATCH_1_ON_CONNECTION_2
-              .toLocalizedString(new Object[] {this, Integer.valueOf(currentBatchId), connection}),
+          String.format("%s : Exception during processing batch  %s  on connection  %s",
+              new Object[] {this, Integer.valueOf(currentBatchId), connection}),
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_EXCEPTION_DURING_PROCESSING_BATCH_1_ON_CONNECTION_2
-              .toLocalizedString(new Object[] {this, Integer.valueOf(currentBatchId), connection}),
+          String.format("%s : Exception during processing batch  %s  on connection  %s",
+              new Object[] {this, Integer.valueOf(currentBatchId), connection}),
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_EXCEPTION_DURING_PROCESSING_BATCH_1_ON_CONNECTION_2
-              .toLocalizedString(new Object[] {this, Integer.valueOf(currentBatchId), connection}),
+          String.format("%s : Exception during processing batch  %s  on connection  %s",
+              new Object[] {this, Integer.valueOf(currentBatchId), connection}),
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.GatewayEventRemoteDispatcher_0_COULD_NOT_CONNECT_1,
-              new Object[] {this.processor.getSender().getId(), gse.getCause().getMessage()}));
+          logger.warn("{} : Could not connect due to: {}",
+              this.processor.getSender().getId(), gse.getCause().getMessage());
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GatewayEventRemoteDispatcher_0_USING_1_AFTER_2_FAILED_CONNECT_ATTEMPTS,
-            logArgs));
+        logger.info("{}: Using {} after {} failed connect attempts",
+            logArgs);
-        logger.info(LocalizedMessage.create(LocalizedStrings.GatewayEventRemoteDispatcher_0_USING_1,
-            logArgs));
+        logger.info("{}: Using {}", logArgs);
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_COULD_NOT_CONNECT_1.toLocalizedString(
-              new Object[] {this.processor.getSender().getId(), e.getMessage()}),
+          String.format("%s : Could not connect due to: %s",
+              this.processor.getSender().getId(), e.getMessage()),
-        ioMsg = LocalizedStrings.GatewayEventRemoteDispatcher_THERE_ARE_NO_ACTIVE_SERVERS
-            .toLocalizedString();
+        ioMsg = "There are no active servers.";
-            LocalizedStrings.GatewayEventRemoteDispatcher_NO_AVAILABLE_CONNECTION_WAS_FOUND_BUT_THE_FOLLOWING_ACTIVE_SERVERS_EXIST_0
-                .toLocalizedString(buffer.toString());
+            String.format(
+                "No available connection was found, but the following active servers exist: %s",
+                buffer.toString());
-          LocalizedStrings.GatewayEventRemoteDispatcher_0_COULD_NOT_CONNECT_1.toLocalizedString(
+          String.format("%s : Could not connect due to: %s",
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.GatewaySenderEventRemoteDispatcher_GATEWAY_SENDER_0_RECEIVED_ACK_FOR_BATCH_ID_1_WITH_EXCEPTION,
-                  new Object[] {processor.getSender(), ack.getBatchId()}));
+              logger.warn(
+                  "Gateway Sender {} : Received ack for batch id {} with one or more exceptions",
+                  processor.getSender(), ack.getBatchId());
-              LocalizedMessage.create(
-                  LocalizedStrings.GatewayEventRemoteDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
+              "Stopping the processor because the following exception occurred while processing a batch:",
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.GatewayEventRemoteDispatcher_A_BATCHEXCEPTION_OCCURRED_PROCESSING_PDX_EVENT__0,
-                  be.getIndex()), be);
+              logger.warn(String.format(
+                  "A BatchException occurred processing PDX events. Index of array of Exception : %s",
+                  be.getIndex()),
+                  be);
-                logger.warn(LocalizedMessage.create(
-                    LocalizedStrings.GatewayEventRemoteDispatcher_THE_EVENT_BEING_PROCESSED_WHEN_THE_BATCHEXCEPTION_OCCURRED_WAS__0,
-                    gsEvent));
+                logger.warn("The event being processed when the BatchException occurred was:  {}",
+                    gsEvent);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GatewayEventRemoteDispatcher_A_BATCHEXCEPTION_OCCURRED_PROCESSING_EVENT__0,
-                be.getIndex()), be);
+            logger.warn(
+                String.format(
+                    "A BatchException occurred processing events. Index of Array of Exception : %s",
+                    be.getIndex()),
+                be);
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.GatewayEventRemoteDispatcher_THE_EVENT_BEING_PROCESSED_WHEN_THE_BATCHEXCEPTION_OCCURRED_WAS__0,
-                  gsEvent));
+              logger.warn("The event being processed when the BatchException occurred was:  {}",
+                  gsEvent);
-            LocalizedMessage.create(
-                LocalizedStrings.GatewayEventRemoteDispatcher_AN_EXCEPTION_OCCURRED_PROCESSING_A_BATCHEXCEPTION__0),
+            "An unexpected exception occurred processing a BatchException. The thread will continue.",
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.GatewaySender_ACKREADERTHREAD_IGNORED_CANCELLATION));
+        logger.warn("AckReaderThread ignored cancellation");
