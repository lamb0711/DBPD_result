GEODE-1723 Merge from 82 for performance improvement.

Other improvement:We take lock on key while doing op on BucketRegion.
In that case we notify to other thread only when there is a thread
waiting for it. Modified one condition to log message to reduce garbage.

+import com.gemstone.gemfire.internal.cache.tier.sockets.ClientUpdateMessageImpl;
-        Map.Entry entry = null;
-        synchronized (haContainer) {
-          entry = (Map.Entry)haContainer.getEntry(haEventWrapper);
-          if (entry != null) {
-            original = (HAEventWrapper)entry.getKey();
-            original.incAndGetReferenceCount();
+//      synchronized (haContainer) {
+      do {
+        ClientUpdateMessageImpl oldMsg = (ClientUpdateMessageImpl) haContainer
+            .putIfAbsent(haEventWrapper,
+                haEventWrapper.getClientUpdateMessage());
+        if (oldMsg != null) {
+          original = (HAEventWrapper) haContainer.getKey(haEventWrapper);
+          if (original == null) {
+            continue;
-          else {
+          synchronized (original) {
+            if ((HAEventWrapper) haContainer.getKey(original) != null) {
+              original.incAndGetReferenceCount();
+              HARegionQueue.addClientCQsAndInterestList(oldMsg,
+                  haEventWrapper, haContainer, owner.getName());
+              haEventWrapper.setClientUpdateMessage(null);
+              newValue = CachedDeserializableFactory.create(original,
+                  ((CachedDeserializable) newValue).getSizeInBytes());
+            } else {
+              original = null;
+            }
+          }
+        } else { // putIfAbsent successful
+          synchronized (haEventWrapper) {
-            haContainer.put(haEventWrapper, haEventWrapper
-                .getClientUpdateMessage());
+          break;
+        // try until we either get a reference to HAEventWrapper from
+        // HAContainer or successfully put one into it.
+      } while (original == null);
+      /*
+        entry = (Map.Entry)haContainer.getEntry(haEventWrapper);
-          HARegionQueue.addClientCQsAndInterestList(entry, haEventWrapper,
-              haContainer, owner.getName());
-          haEventWrapper.setClientUpdateMessage(null);
-          newValue = CachedDeserializableFactory.create(original,
-              ((CachedDeserializable)newValue).getSizeInBytes());
+          original = (HAEventWrapper)entry.getKey();
+          original.incAndGetReferenceCount();
+        else {
+          haEventWrapper.incAndGetReferenceCount();
+          haEventWrapper.setHAContainer(haContainer);
+          haContainer.put(haEventWrapper, haEventWrapper
+              .getClientUpdateMessage());
+          haEventWrapper.setClientUpdateMessage(null);
+          haEventWrapper.setIsRefFromHAContainer(true);
+        }
+      }
+      if (entry != null) {
+        HARegionQueue.addClientCQsAndInterestList(entry, haEventWrapper,
+            haContainer, owner.getName());
+        haEventWrapper.setClientUpdateMessage(null);
+        newValue = CachedDeserializableFactory.create(original,
+            ((CachedDeserializable)newValue).getSizeInBytes());
+      }
+*/
