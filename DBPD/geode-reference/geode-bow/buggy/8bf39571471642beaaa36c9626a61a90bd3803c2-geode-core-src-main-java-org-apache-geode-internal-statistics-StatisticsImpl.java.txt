Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.distributed.DistributedSystem;
+// import org.apache.geode.distributed.DistributedSystem;
-// @todo darrel Add statistics instances to archive when they are created. 
+// @todo darrel Add statistics instances to archive when they are created.
- * An object that maintains the values of various application-defined
- * statistics.  The statistics themselves are described by an instance
- * of {@link StatisticsType}.
+ * An object that maintains the values of various application-defined statistics. The statistics
+ * themselves are described by an instance of {@link StatisticsType}.
- * For optimal statistic access, each statistic may be referred to by
- * its {@link #nameToId id} in the statistics object.
+ * For optimal statistic access, each statistic may be referred to by its {@link #nameToId id} in
+ * the statistics object.
-  private final CopyOnWriteHashMap<Integer, LongSupplier> longSuppliers = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Integer, LongSupplier> longSuppliers =
+      new CopyOnWriteHashMap<>();
-  private final CopyOnWriteHashMap<Integer, DoubleSupplier> doubleSuppliers = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Integer, DoubleSupplier> doubleSuppliers =
+      new CopyOnWriteHashMap<>();
-   * Suppliers that have previously failed. Tracked to avoid logging many messages about
-   * a failing supplier
+   * Suppliers that have previously failed. Tracked to avoid logging many messages about a failing
+   * supplier
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-  /** factory method to create a class that implements Statistics
+  /**
+   * factory method to create a class that implements Statistics
-  public static Statistics createAtomicNoOS(StatisticsType type, String textId,
-                                            long numericId, long uniqueId,
-                                            StatisticsManager mgr) {
+  public static Statistics createAtomicNoOS(StatisticsType type, String textId, long numericId,
+      long uniqueId, StatisticsManager mgr) {
+
-   * @param type
-   *        A description of the statistics
-   * @param textId
-   *        Text that helps identifies this instance
-   * @param numericId
-   *        A number that helps identify this instance
-   * @param uniqueId
-   *        A number that uniquely identifies this instance
-   * @param osStatFlags
-   *        Non-zero if stats require system calls to collect them; for internal use only
+   * @param type A description of the statistics
+   * @param textId Text that helps identifies this instance
+   * @param numericId A number that helps identify this instance
+   * @param uniqueId A number that uniquely identifies this instance
+   * @param osStatFlags Non-zero if stats require system calls to collect them; for internal use
+   *        only
-  public StatisticsImpl(StatisticsType type, String textId,
-                        long numericId, long uniqueId, int osStatFlags) {
-    this.type = (StatisticsTypeImpl)type;
+  public StatisticsImpl(StatisticsType type, String textId, long numericId, long uniqueId,
+      int osStatFlags) {
+    this.type = (StatisticsTypeImpl) type;
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  
+
-  ////////////////////////  attribute Methods  ///////////////////////
+  //////////////////////// attribute Methods ///////////////////////
+
+
-  
+
+
-  ////////////////////////  set() Methods  ///////////////////////
+  //////////////////////// set() Methods ///////////////////////
-   * Sets the value of a statistic of type <code>int</code> at the
-   * given offset, but performs no type checking.
+   * Sets the value of a statistic of type <code>int</code> at the given offset, but performs no
+   * type checking.
-   * Sets the value of a statistic of type <code>long</code> at the
-   * given offset, but performs no type checking.
-   */  
+   * Sets the value of a statistic of type <code>long</code> at the given offset, but performs no
+   * type checking.
+   */
-   * Sets the value of a statistic of type <code>double</code> at the
-   * given offset, but performs no type checking.
+   * Sets the value of a statistic of type <code>double</code> at the given offset, but performs no
+   * type checking.
-  ///////////////////////  get() Methods  ///////////////////////
+  /////////////////////// get() Methods ///////////////////////
-   * Returns the value of the statistic of type <code>int</code> at
-   * the given offset, but performs no type checking.
+   * Returns the value of the statistic of type <code>int</code> at the given offset, but performs
+   * no type checking.
-   * Returns the value of the statistic of type <code>long</code> at
-   * the given offset, but performs no type checking.
+   * Returns the value of the statistic of type <code>long</code> at the given offset, but performs
+   * no type checking.
-   * Returns the value of the statistic of type <code>double</code> at
-   * the given offset, but performs no type checking.
+   * Returns the value of the statistic of type <code>double</code> at the given offset, but
+   * performs no type checking.
-      return _get((StatisticDescriptorImpl)descriptor);
+      return _get((StatisticDescriptorImpl) descriptor);
-      return _getRawBits((StatisticDescriptorImpl)descriptor);
+      return _getRawBits((StatisticDescriptorImpl) descriptor);
-  ////////////////////////  inc() Methods  ////////////////////////
+  //////////////////////// inc() Methods ////////////////////////
-   * Increments the value of the statistic of type <code>int</code> at
-   * the given offset by a given amount, but performs no type checking.
+   * Increments the value of the statistic of type <code>int</code> at the given offset by a given
+   * amount, but performs no type checking.
+
+
-   * Increments the value of the statistic of type <code>long</code> at
-   * the given offset by a given amount, but performs no type checking.
+   * Increments the value of the statistic of type <code>long</code> at the given offset by a given
+   * amount, but performs no type checking.
-   * Increments the value of the statistic of type <code>double</code> at
-   * the given offset by a given amount, but performs no type checking.
+   * Increments the value of the statistic of type <code>double</code> at the given offset by a
+   * given amount, but performs no type checking.
-   * For internal use only.
-   * Tells the implementation to prepare the data in this instance
-   * for sampling.
+   * For internal use only. Tells the implementation to prepare the data in this instance for
+   * sampling.
+   * 
-   * Invoke sample suppliers to retrieve the current value for
-   * the suppler controlled sets and update the stats to reflect
-   * the supplied values.
-   * @return the number of callback errors that occurred while
-   * sampling stats
+   * Invoke sample suppliers to retrieve the current value for the suppler controlled sets and
+   * update the stats to reflect the supplied values.
+   * 
+   * @return the number of callback errors that occurred while sampling stats
-    for(Map.Entry<Integer, IntSupplier> entry: intSuppliers.entrySet()) {
+    for (Map.Entry<Integer, IntSupplier> entry : intSuppliers.entrySet()) {
-      } catch(Throwable t) {
+      } catch (Throwable t) {
-    for(Map.Entry<Integer, LongSupplier> entry: longSuppliers.entrySet()) {
+    for (Map.Entry<Integer, LongSupplier> entry : longSuppliers.entrySet()) {
-      } catch(Throwable t) {
+      } catch (Throwable t) {
-    for(Map.Entry<Integer, DoubleSupplier> entry: doubleSuppliers.entrySet()) {
+    for (Map.Entry<Integer, DoubleSupplier> entry : doubleSuppliers.entrySet()) {
-      } catch(Throwable t) {
+      } catch (Throwable t) {
-    if(flakySuppliers.add(supplier)) {
+    if (flakySuppliers.add(supplier)) {
-    if(id >= type.getIntStatCount()) {
+    if (id >= type.getIntStatCount()) {
-  public IntSupplier setIntSupplier(final StatisticDescriptor descriptor, final IntSupplier supplier) {
+  public IntSupplier setIntSupplier(final StatisticDescriptor descriptor,
+      final IntSupplier supplier) {
-    if(id >= type.getLongStatCount()) {
+    if (id >= type.getLongStatCount()) {
-  public LongSupplier setLongSupplier(final StatisticDescriptor descriptor, final LongSupplier supplier) {
+  public LongSupplier setLongSupplier(final StatisticDescriptor descriptor,
+      final LongSupplier supplier) {
-    if(id >= type.getDoubleStatCount()) {
+    if (id >= type.getDoubleStatCount()) {
-  public DoubleSupplier setDoubleSupplier(final StatisticDescriptor descriptor, final DoubleSupplier supplier) {
+  public DoubleSupplier setDoubleSupplier(final StatisticDescriptor descriptor,
+      final DoubleSupplier supplier) {
-    return (int)this.uniqueId;
+    return (int) this.uniqueId;
+
-    StatisticsImpl other = (StatisticsImpl)o;
+    StatisticsImpl other = (StatisticsImpl) o;
-    return ((StatisticDescriptorImpl)descriptor).checkInt();
+    return ((StatisticDescriptorImpl) descriptor).checkInt();
-  
+
-    return ((StatisticDescriptorImpl)descriptor).checkLong();
+    return ((StatisticDescriptorImpl) descriptor).checkLong();
-  
+
-    return ((StatisticDescriptorImpl)descriptor).checkDouble();
+    return ((StatisticDescriptorImpl) descriptor).checkDouble();
-  
+
-    case StatisticDescriptorImpl.INT:
-      return Integer.valueOf(_getInt(stat.getId()));
-    case StatisticDescriptorImpl.LONG:
-      return Long.valueOf(_getLong(stat.getId()));
-    case StatisticDescriptorImpl.DOUBLE:
-      return Double.valueOf(_getDouble(stat.getId()));
-    default:
-      throw new RuntimeException(LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0.toLocalizedString(Byte.valueOf(stat.getTypeCode())));
+      case StatisticDescriptorImpl.INT:
+        return Integer.valueOf(_getInt(stat.getId()));
+      case StatisticDescriptorImpl.LONG:
+        return Long.valueOf(_getLong(stat.getId()));
+      case StatisticDescriptorImpl.DOUBLE:
+        return Double.valueOf(_getDouble(stat.getId()));
+      default:
+        throw new RuntimeException(
+            LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0
+                .toLocalizedString(Byte.valueOf(stat.getTypeCode())));
+
-   * Returns the bits that represent the raw value of the
-   * specified statistic descriptor.
+   * Returns the bits that represent the raw value of the specified statistic descriptor.
-    case StatisticDescriptorImpl.INT:
-      return _getInt(stat.getId());
-    case StatisticDescriptorImpl.LONG:
-      return _getLong(stat.getId());
-    case StatisticDescriptorImpl.DOUBLE:
-      return Double.doubleToRawLongBits(_getDouble(stat.getId()));
-    default:
-      throw new RuntimeException(LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0.toLocalizedString(Byte.valueOf(stat.getTypeCode())));
+      case StatisticDescriptorImpl.INT:
+        return _getInt(stat.getId());
+      case StatisticDescriptorImpl.LONG:
+        return _getLong(stat.getId());
+      case StatisticDescriptorImpl.DOUBLE:
+        return Double.doubleToRawLongBits(_getDouble(stat.getId()));
+      default:
+        throw new RuntimeException(
+            LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0
+                .toLocalizedString(Byte.valueOf(stat.getTypeCode())));
