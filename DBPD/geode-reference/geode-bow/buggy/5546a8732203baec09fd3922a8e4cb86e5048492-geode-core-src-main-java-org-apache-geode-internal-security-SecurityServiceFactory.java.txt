GEODE-2632: consolidate different types of SecurityService

* combine EnabledSecurityService and CustomSecurityService into IntegratedSecurityService
* combine DisabledSecurityService and LegacySecurityService
* combine ConfigInitializer and RealmInitializer
* provide default impelementations of SecurityService
* consolidate SecurityService creation.

-import static org.apache.commons.lang.StringUtils.isNotBlank;
-import static org.apache.geode.distributed.ConfigurationProperties.SECURITY_MANAGER;
-import static org.apache.geode.distributed.ConfigurationProperties.SECURITY_POST_PROCESSOR;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.cache.CacheConfig;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.security.shiro.ConfigInitializer;
-import org.apache.geode.internal.security.shiro.RealmInitializer;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.SecurityManager;
+import java.util.Properties;
+
+import org.apache.commons.lang.StringUtils;
-import java.util.Properties;
+import org.apache.geode.internal.cache.CacheConfig;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.security.shiro.SecurityManagerProvider;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
-  public static SecurityService create(CacheConfig cacheConfig,
-      DistributionConfig distributionConfig) {
-    Properties securityConfig = getSecurityConfig(distributionConfig);
-    SecurityManager securityManager =
-        getSecurityManager(getSecurityManagerFromConfig(cacheConfig), securityConfig);
-    PostProcessor postProcessor =
-        getPostProcessor(getPostProcessorFromConfig(cacheConfig), securityConfig);
-    return create(distributionConfig, securityManager, postProcessor);
-  }
-
-  /**
-   * Creates and initializes SecurityService. Initialization will invoke init on both
-   * SecurityManager and PostProcessor if they are specified.
-   */
-  public static SecurityService create(DistributionConfig distributionConfig,
-      SecurityManager securityManager, PostProcessor postProcessor) {
-    Properties securityConfig = getSecurityConfig(distributionConfig);
-
-    securityManager = getSecurityManager(securityManager, securityConfig);
-    postProcessor = getPostProcessor(postProcessor, securityConfig);
-
-    SecurityService securityService = create(securityConfig, securityManager, postProcessor);
-    initialize(securityService, distributionConfig);
-    return securityService;
-  }
-
-    return new DisabledSecurityService();
+    return new LegacySecurityService();
-  public static SecurityService create(Properties securityConfig, SecurityManager securityManager,
-      PostProcessor postProcessor) {
-    SecurityServiceType type = determineType(securityConfig, securityManager, postProcessor);
-    switch (type) {
-      case CUSTOM:
-        String shiroConfig = getProperty(securityConfig, SECURITY_SHIRO_INIT);
-        if (isNotBlank(shiroConfig)) {
-          new ConfigInitializer().initialize(shiroConfig);
-        }
-        return new CustomSecurityService(postProcessor);
-      case ENABLED:
-        return new EnabledSecurityService(securityManager, postProcessor, new RealmInitializer());
-      case LEGACY:
-        String clientAuthenticator = getProperty(securityConfig, SECURITY_CLIENT_AUTHENTICATOR);
-        String peerAuthenticator = getProperty(securityConfig, SECURITY_PEER_AUTHENTICATOR);
-        return new LegacySecurityService(clientAuthenticator, peerAuthenticator);
-      default:
-        return new DisabledSecurityService();
+  public static SecurityService create(Properties securityProps) {
+    return create(securityProps, null, null);
+  }
+
+  public static SecurityService create(Properties securityProps, CacheConfig cacheConfig) {
+    if (cacheConfig == null) {
+      return create(securityProps, null, null);
+
+    return create(securityProps, cacheConfig.getSecurityManager(), cacheConfig.getPostProcessor());
+  }
+
+  public static SecurityService create(Properties securityProps,
+      SecurityManager preferredSecurityManager, PostProcessor preferredPostProcessor) {
+    if (securityProps == null) {
+      // avoid NPE, and we can stil use preferredSecurityManager to create the service
+      securityProps = new Properties();
+    }
+
+    String shiroConfig = securityProps.getProperty(SECURITY_SHIRO_INIT);
+    SecurityManager securityManager = CallbackInstantiator.getSecurityManager(securityProps);
+    PostProcessor postProcessor = CallbackInstantiator.getPostProcessor(securityProps);
+
+    // cacheConfig's securityManager/postprocessor takes precedence over those defined in
+    // securityProps
+    if (preferredSecurityManager != null) {
+      // cacheConfig's security manager will override property's shiro.ini settings
+      shiroConfig = null;
+      securityManager = preferredSecurityManager;
+    }
+    if (preferredPostProcessor != null) {
+      postProcessor = preferredPostProcessor;
+    }
+
+    if (StringUtils.isNotBlank(shiroConfig)) {
+      return new IntegratedSecurityService(new SecurityManagerProvider(shiroConfig), postProcessor);
+    } else if (securityManager != null) {
+      return new IntegratedSecurityService(new SecurityManagerProvider(securityManager),
+          postProcessor);
+    } else if (isShiroInUse()) {
+      return new IntegratedSecurityService(new SecurityManagerProvider(), postProcessor);
+    }
+
+    // if not return legacy security service
+    String clientAuthenticatorConfig = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
+    String peerAuthenticatorConfig = securityProps.getProperty(SECURITY_PEER_AUTHENTICATOR);
+    return new LegacySecurityService(clientAuthenticatorConfig, peerAuthenticatorConfig);
-  static SecurityServiceType determineType(Properties securityConfig,
-      SecurityManager securityManager, PostProcessor postProcessor) {
-    boolean hasShiroConfig = hasProperty(securityConfig, SECURITY_SHIRO_INIT);
-    if (hasShiroConfig) {
-      return SecurityServiceType.CUSTOM;
-    }
-
-    boolean hasSecurityManager =
-        securityManager != null || hasProperty(securityConfig, SECURITY_MANAGER);
-    if (hasSecurityManager) {
-      return SecurityServiceType.ENABLED;
-    }
-
-    boolean hasClientAuthenticator = hasProperty(securityConfig, SECURITY_CLIENT_AUTHENTICATOR);
-    boolean hasPeerAuthenticator = hasProperty(securityConfig, SECURITY_PEER_AUTHENTICATOR);
-    if (hasClientAuthenticator || hasPeerAuthenticator) {
-      return SecurityServiceType.LEGACY;
-    }
-
-    boolean isShiroInUse = isShiroInUse();
-    if (isShiroInUse) {
-      return SecurityServiceType.CUSTOM;
-    }
-
-    return SecurityServiceType.DISABLED;
-  }
-
-  static SecurityManager getSecurityManager(SecurityManager securityManager,
-      Properties securityConfig) {
-    if (securityManager != null) {
-      return securityManager;
-    }
-
-    String securityManagerConfig = getProperty(securityConfig, SECURITY_MANAGER);
-    if (isNotBlank(securityManagerConfig)) {
-      securityManager = CallbackInstantiator.getObjectOfTypeFromClassName(securityManagerConfig,
-          SecurityManager.class);
-    }
-
-    return securityManager;
-  }
-
-  static PostProcessor getPostProcessor(PostProcessor postProcessor, Properties securityConfig) {
-    if (postProcessor != null) {
-      return postProcessor;
-    }
-
-    String postProcessorConfig = getProperty(securityConfig, SECURITY_POST_PROCESSOR);
-    if (isNotBlank(postProcessorConfig)) {
-      postProcessor = CallbackInstantiator.getObjectOfTypeFromClassName(postProcessorConfig,
-          PostProcessor.class);
-    }
-
-    return postProcessor;
-  }
-
-  private static Properties getSecurityConfig(DistributionConfig distributionConfig) {
-    if (distributionConfig == null) {
-      return new Properties();
-    }
-    return distributionConfig.getSecurityProps();
-  }
-  private static SecurityManager getSecurityManagerFromConfig(CacheConfig cacheConfig) {
-    if (cacheConfig == null) {
-      return null;
-    }
-    return cacheConfig.getSecurityManager();
-  }
-
-  private static PostProcessor getPostProcessorFromConfig(CacheConfig cacheConfig) {
-    if (cacheConfig == null) {
-      return null;
-    }
-    return cacheConfig.getPostProcessor();
-  }
-
-  private static boolean hasProperty(Properties securityConfig, String key) {
-    return securityConfig != null && getProperty(securityConfig, key) != null;
-  }
-
-  private static String getProperty(Properties securityConfig, String key) {
-    if (securityConfig == null) {
-      return null;
-    }
-    return securityConfig.getProperty(key);
-  }
-
-  private static void initialize(SecurityService securityService,
-      DistributionConfig distributionConfig) {
-    if (securityService != null && distributionConfig != null) {
-      securityService.initSecurity(distributionConfig.getSecurityProps());
-    }
-  }
