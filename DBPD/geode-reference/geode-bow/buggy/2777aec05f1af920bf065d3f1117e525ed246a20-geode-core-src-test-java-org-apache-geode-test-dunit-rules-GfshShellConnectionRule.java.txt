GEODE-1955: fix flaky tests by properly closing the gfsh instance in ConnectToLocatorSSLDUnitTest

GEODE-1955: fix flaky tests by properly closing the gfsh instance in ConnectToLocatorSSLDUnitTest

GEODE-1955: fix flaky tests by properly closing the gfsh instance in ConnectToLocatorSSLDUnitTest

+import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.ErrorResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-  private boolean useHttp = false;
+  private PortType portType = null;
-  private boolean authenticated;
+  private boolean connected;
-  /**
-   * Rule constructor
-   */
-
-  public GfshShellConnectionRule(int port) {
-    this.useHttp = false;
+  public GfshShellConnectionRule(int port, PortType portType) {
+    this.portType = portType;
-  }
-
-  public GfshShellConnectionRule(int port, boolean useHttp) {
-    this.useHttp = useHttp;
-    this.port = port;
+    try {
+      this.gfsh = new HeadlessGfsh(getClass().getName(), 30, "gfsh_files");
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+    this.connected = false;
-    CliUtil.isGfshVM = true;
-    String shellId = getClass().getSimpleName() + "_" + description.getMethodName();
-    gfsh = new HeadlessGfsh(shellId, 30, "gfsh_files"); // TODO: move to TemporaryFolder
-
-    final CommandStringBuilder connectCommand = new CommandStringBuilder(CliStrings.CONNECT);
-
-      connectCommand.addOption(CliStrings.CONNECT__USERNAME, config.user());
-      connectCommand.addOption(CliStrings.CONNECT__PASSWORD, config.password());
+      connect(CliStrings.CONNECT__USERNAME, config.user(), CliStrings.CONNECT__PASSWORD,
+          config.password());
+    } else {
+      connect();
+  }
+
+  public void connect(String... options) throws Exception {
+    CliUtil.isGfshVM = true;
+    final CommandStringBuilder connectCommand = new CommandStringBuilder(CliStrings.CONNECT);
-    if (useHttp) {
+    if (portType == PortType.locator) {
+      // port is the locator port
+      endpoint = "localhost[" + port + "]";
+      connectCommand.addOption(CliStrings.CONNECT__LOCATOR, endpoint);
+    } else if (portType == PortType.http) {
-    System.out.println(getClass().getSimpleName() + " using endpoint: " + endpoint);
+
+    // add the extra options
+    if (options != null) {
+      for (int i = 0; i < options.length; i += 2) {
+        connectCommand.addOption(options[i], options[i + 1]);
+      }
+    }
-    if (result.getResultData() instanceof ErrorResultData) {
-      ErrorResultData errorResultData = (ErrorResultData) result.getResultData();
-      this.authenticated =
-          !(errorResultData.getErrorCode() == ResultBuilder.ERRORCODE_CONNECTION_ERROR);
-    } else {
-      this.authenticated = true;
-    }
+    connected = (result.getStatus() == Result.Status.OK);
+    close();
+  }
+
+  public void close() throws Exception {
-      gfsh.clearEvents();
-      gfsh.executeCommand("disconnect");
+      gfsh.clear();
-      gfsh.setThreadLocalInstance();
-  public boolean isAuthenticated() {
-    return authenticated;
+  public boolean isConnected() {
+    return connected;
+  }
+
+  public enum PortType {
+    locator, jmxManger, http
