GEODE-2141: Replace use of List with ConcurrentHashSet for storing various stats and listener.
Moved methods stopNotifier_IfEnabledAndRunning and startNotifier_IfEnabledAndNotRunning in synchronized
block.

GEODE-2141: Addresing the review comments.

GEODE-2141: Addressing Review Comments
Making addMonitor and remoteMonitor threadsafe.

-import java.util.ArrayList;
-import java.util.Collections;
+import org.apache.geode.internal.concurrent.ConcurrentHashSet;
+
-  private volatile List<StatisticsListener> listeners = Collections.<StatisticsListener>emptyList();
+  private final ConcurrentHashSet<StatisticsListener> listeners =
+      new ConcurrentHashSet<StatisticsListener>();
-  private volatile List<StatisticId> statisticIds = Collections.<StatisticId>emptyList();
+  private final ConcurrentHashSet<StatisticId> statisticIds = new ConcurrentHashSet<StatisticId>();
-    synchronized (this.mutex) {
-      List<StatisticId> oldStatisticIds = this.statisticIds;
-      if (!oldStatisticIds.contains(statId)) {
-        List<StatisticId> newStatisticIds = new ArrayList<StatisticId>(oldStatisticIds);
-        newStatisticIds.add(statId);
-        this.statisticIds = Collections.unmodifiableList(newStatisticIds);
-      }
+    if (!this.statisticIds.contains(statId)) {
+      this.statisticIds.add(statId);
-    synchronized (this.mutex) {
-      List<StatisticId> oldStatisticIds = this.statisticIds;
-      if (oldStatisticIds.contains(statId)) {
-        List<StatisticId> newStatisticIds = new ArrayList<StatisticId>(oldStatisticIds);
-        newStatisticIds.remove(statId);
-        this.statisticIds = Collections.unmodifiableList(newStatisticIds);
-      }
+    if (this.statisticIds.contains(statId)) {
+      this.statisticIds.remove(statId);
-      List<StatisticsListener> oldListeners = this.listeners;
-      if (!oldListeners.contains(listener)) {
-        List<StatisticsListener> newListeners = new ArrayList<StatisticsListener>(oldListeners);
-        newListeners.add(listener);
-        this.listeners = Collections.unmodifiableList(newListeners);
+      if (!this.listeners.contains(listener)) {
+        this.listeners.add(listener);
-      List<StatisticsListener> oldListeners = this.listeners;
-      if (oldListeners.contains(listener)) {
-        List<StatisticsListener> newListeners = new ArrayList<StatisticsListener>(oldListeners);
-        newListeners.remove(listener);
-        if (newListeners.isEmpty()) {
+      if (this.listeners.contains(listener)) {
+        this.listeners.remove(listener);
+        if (this.listeners.isEmpty()) {
-        this.listeners = Collections.unmodifiableList(newListeners);
-    List<StatisticId> statisticIdsToMonitor = statisticIds;
-    if (!statisticIdsToMonitor.isEmpty()) {
+    if (!this.statisticIds.isEmpty()) {
-    List<StatisticsListener> listenersToNotify = this.listeners;
-    for (StatisticsListener listener : listenersToNotify) {
+    for (StatisticsListener listener : this.listeners) {
-  List<StatisticsListener> getStatisticsListenersSnapshot() {
+  ConcurrentHashSet<StatisticsListener> getStatisticsListenersSnapshot() {
