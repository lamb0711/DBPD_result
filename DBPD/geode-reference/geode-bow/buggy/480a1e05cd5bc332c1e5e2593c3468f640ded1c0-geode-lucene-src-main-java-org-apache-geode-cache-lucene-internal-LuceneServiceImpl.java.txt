GEODE-2828: AEQ created before the Lucene user regions

	* AEQ is being created before the Lucene user region
	* A countdown latch prevents the index repository computation until the user regions are ready
	* Integration tests do not use a Dummy executor because we need a thread pool for afterPrimary call.

	This closes #481

-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.EvictionAlgorithm;
-import org.apache.geode.cache.EvictionAttributes;
-import org.apache.geode.internal.cache.InternalRegionArguments;
-  public void afterDataRegionCreated(final String indexName, final Analyzer analyzer,
-      final String dataRegionPath, final Map<String, Analyzer> fieldAnalyzers,
-      final String... fields) {
-    LuceneIndexImpl index = createIndexRegions(indexName, dataRegionPath);
-    index.setSearchableFields(fields);
-    index.setAnalyzer(analyzer);
-    index.setFieldAnalyzers(fieldAnalyzers);
+  public void afterDataRegionCreated(LuceneIndexImpl index) {
+
-  private LuceneIndexImpl createIndexRegions(String indexName, String regionPath) {
-    Region dataregion = this.cache.getRegion(regionPath);
-    if (dataregion == null) {
-      logger.info("Data region " + regionPath + " not found");
-      return null;
-    }
-    // Convert the region name into a canonical form
-    regionPath = dataregion.getFullPath();
+  public LuceneIndexImpl beforeDataRegionCreated(final String indexName, final String regionPath,
+      RegionAttributes attributes, final Analyzer analyzer,
+      final Map<String, Analyzer> fieldAnalyzers, String aeqId, final String... fields) {
+    LuceneIndexImpl index = createIndexObject(indexName, regionPath);
+    index.setSearchableFields(fields);
+    index.setAnalyzer(analyzer);
+    index.setFieldAnalyzers(fieldAnalyzers);
+    index.initializeAEQ(attributes, aeqId);
+    return index;
+
+  }
+
+  private LuceneIndexImpl createIndexObject(String indexName, String regionPath) {
