GEODE-4695 PluckStacks utility is confused by Attach Listener thread dump

Adding unit tests for the PluckStacks utility and fixing it to work
with gfsh-exported dumps as well as jstack-generated dumps.

This closes #1471

+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.geode.management.internal.cli.commands.ExportStackTraceCommand;
+
-  public static void main(String[] args) {
+  public static void main(String[] args) throws Exception {
-  private void examineLog(File log) {
+  private void examineLog(File log) throws IOException {
-    StringBuffer buffer = new StringBuffer();
+    try {
+      Map<String, List<ThreadStack>> dumps = getThreadDumps(reader, log.getName());
+
+      StringBuffer buffer = new StringBuffer();
+      for (Map.Entry<String, List<ThreadStack>> dump : dumps.entrySet()) {
+        if (dump.getValue().size() > 0) {
+          buffer.append(dump.getKey());
+          for (ThreadStack stack : dump.getValue()) {
+            stack.appendToBuffer(buffer);
+            buffer.append("\n");
+          }
+          buffer.append("\n\n");
+        }
+        if (ONE_STACK) {
+          break;
+        }
+      }
+      String output = buffer.toString();
+      if (output.length() > 0) {
+        System.out.println(output);
+      }
+    } finally {
+      reader.close();
+    }
+  }
+
+  public Map<String, List<ThreadStack>> getThreadDumps(LineNumberReader reader,
+      String logFileName) {
+    Map<String, List<ThreadStack>> result = new HashMap<>();
-        if (line.startsWith("Full thread dump")) {
+        if (line.startsWith("Full thread dump")
+            || line.startsWith(ExportStackTraceCommand.STACK_TRACE_FOR_MEMBER)) {
+            StringBuffer buffer = new StringBuffer();
-                .append(" from " + log + " line " + lineNumber + "]\n").append(line).append("\n");
-            for (ThreadStack stack : stacks) {
-              stack.appendToBuffer(buffer);
-              buffer.append("\n");
-            }
-            buffer.append("\n\n");
+                .append(" from " + logFileName + " line " + lineNumber + "]\n").append(line)
+                .append("\n");
+            result.put(buffer.toString(), stacks);
-      return;
-    } finally {
-      if (reader != null)
-        try {
-          reader.close();
-        } catch (IOException ignore) {
-        }
+      throw new RuntimeException("Something went wrong processing " + logFileName, ioe);
-    String output = buffer.toString();
-    if (output.length() > 0) {
-      System.out.println(output);
-    }
+    return result;
-      while ((line = reader.readLine()) != null) {
+      do {
+        reader.mark(100000);
+        if ((line = reader.readLine()) == null) {
+          break;
+        }
+        if (line.startsWith(ExportStackTraceCommand.STACK_TRACE_FOR_MEMBER)) {
+          reader.reset();
+          Collections.sort(result);
+          return result;
+        }
-      }
+      } while (true);
-      if (!line.startsWith("\tat ")) {
-        Collections.sort(result);
-        return result;
-      }
+      if (lastStack.getThreadName().equals("VM Thread")) {
+        Collections.sort(result);
+        return result;
+      }
-      while ((line = reader.readLine()) != null && line.trim().length() > 0) {
+      do {
+        reader.mark(100000);
+        line = reader.readLine();
+        if (line == null || line.trim().length() == 0) {
+          break;
+        }
+        if (line.startsWith("\"")) {
+          reader.reset();
+          break;
+        }
-      }
+      } while (true);
