GEODE-77: GMSJoinLeave now collects removal requests to see if it should become the membership coordinator

-import static com.gemstone.gemfire.distributed.internal.DistributionManager.LOCATOR_DM_TYPE;
+  private final Set<InternalDistributedMember> removedMembers = new HashSet<>();
+  
+      synchronized(removedMembers) {
+        check.removeAll(removedMembers);
+        check.addCrashedMembers(removedMembers);
+      }
-          List<InternalDistributedMember> mbrs = new ArrayList<InternalDistributedMember>(currentView.getMembers());
+          List<InternalDistributedMember> mbrs = new ArrayList<>(currentView.getMembers());
-          List<InternalDistributedMember> leaving = new ArrayList<InternalDistributedMember>();
+          Set<InternalDistributedMember> leaving = new HashSet<>();
-          newView = new NetView(this.localAddress, viewNumber, mbrs, leaving,
-              Collections.<InternalDistributedMember>emptyList());
+          synchronized(this.removedMembers) {
+            newView = new NetView(this.localAddress, viewNumber, mbrs, leaving,
+                this.removedMembers);
+          }
-  private void sendRemoveMessages(List<InternalDistributedMember> newMbrs,
+  private void sendRemoveMessages(Set<InternalDistributedMember> removals,
-    for (InternalDistributedMember mbr: newMbrs) {
+    for (InternalDistributedMember mbr: removals) {
+    
+    logger.info("Membership: processing {}", m);
+    
+    synchronized(removedMembers) {
+      removedMembers.clear();
+    }
-            logger.debug("JoinLeave sending a leave request to {}", view.getCoordinator());
-            LeaveRequestMessage m = new LeaveRequestMessage(view.getCoordinator(), this.localAddress, "this member is shutting down");
+            List<InternalDistributedMember> coords = view.getPreferredCoordinators(Collections.<InternalDistributedMember>emptySet(), localAddress, 5);
+
+            logger.debug("JoinLeave sending a leave request to {}", coords);
+            LeaveRequestMessage m = new LeaveRequestMessage(coords, this.localAddress, "this member is shutting down");
+        final NetView check;
+        synchronized(removedMembers) {
+          removedMembers.add(m);
+          check = new NetView(v, v.getViewId());
+          check.addCrashedMembers(removedMembers);
+          check.removeAll(removedMembers);
+        }
+        if (check.getCoordinator().equals(this.localAddress)) {
+          becomeCoordinator(v.getCoordinator());
+        }
+    
-      LeaveRequestMessage msg = new LeaveRequestMessage(this.localAddress, (InternalDistributedMember)mbr, reason);
+      LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singleton(this.localAddress), (InternalDistributedMember)mbr, reason);
-      List<InternalDistributedMember> joinReqs = new ArrayList<InternalDistributedMember>();
-      List<InternalDistributedMember> leaveReqs = new ArrayList<InternalDistributedMember>();
-      List<InternalDistributedMember> removalReqs = new ArrayList<InternalDistributedMember>();
+      List<InternalDistributedMember> joinReqs = new ArrayList<>();
+      Set<InternalDistributedMember> leaveReqs = new HashSet<>();
+      Set<InternalDistributedMember> removalReqs = new HashSet<>();
