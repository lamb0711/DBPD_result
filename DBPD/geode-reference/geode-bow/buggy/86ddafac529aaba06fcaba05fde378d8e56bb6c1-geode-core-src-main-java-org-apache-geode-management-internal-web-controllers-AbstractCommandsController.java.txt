GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
+import java.io.File;
+import java.io.IOException;
-import java.lang.management.ManagementFactory;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import org.apache.commons.io.FileUtils;
-import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.multipart.MultipartFile;
-import org.apache.geode.internal.logging.log4j.LogMarker;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.internal.util.ArrayUtils;
-import org.apache.geode.management.internal.security.MBeanServerWrapper;
-import org.apache.geode.security.GemFireSecurityException;
-   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file
-   *        data streamed to the Manager, usually for the 'deploy' Gfsh command.
+   * @param multipartFiles uploaded files
-   * @see org.apache.geode.management.MemberMXBean#processCommand(String, java.util.Map, Byte[][])
-      final byte[][] fileData) {
-    logger.debug(LogMarker.CONFIG,
-        "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
-        environment, (fileData != null && fileData.length > 0));
+      final MultipartFile[] multipartFiles) throws IOException {
+    List<String> filePaths = null;
+    Path tempDir = null;
+    if (multipartFiles != null) {
+      Set<PosixFilePermission> perms = new HashSet<>();
+      perms.add(PosixFilePermission.OWNER_READ);
+      perms.add(PosixFilePermission.OWNER_WRITE);
+      perms.add(PosixFilePermission.OWNER_EXECUTE);
+      tempDir = Files.createTempDirectory("uploaded-", PosixFilePermissions.asFileAttribute(perms));
+      // staging the files to local
+      filePaths = new ArrayList<>();
+      for (MultipartFile multipartFile : multipartFiles) {
+        File dest = new File(tempDir.toFile(), multipartFile.getOriginalFilename());
+        multipartFile.transferTo(dest);
+        filePaths.add(dest.getAbsolutePath());
+      }
+    }
+
-    return manager.processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+    try {
+      return manager.processCommand(command, environment, filePaths);
+    } finally {
+      if (tempDir != null) {
+        FileUtils.deleteDirectory(tempDir.toFile());
+      }
+    }
