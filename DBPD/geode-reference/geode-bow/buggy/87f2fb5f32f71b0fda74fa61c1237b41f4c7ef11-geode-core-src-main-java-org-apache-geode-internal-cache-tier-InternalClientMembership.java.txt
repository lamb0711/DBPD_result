GEODE-2000 client should see server-bind-address in event memberId

The previous fix for this caused confusion as it changed the server
memberId that is used in other places and should remain unchanged.
This change set alters just the listener-invocation code in the client
cache so that client events are based on the ServerLocation information
returned by the Locator or added to the connection pool by applications.

Udo worked with me on this and we found the listener invocation code to
be somewhat convoluted, mixing server-side notification about clients
with client-side notification about servers in the same code.  This
lead to a bit of refactoring in InternalClientMembership to separate the two.

A number of changes had to be made in test code.  Some tests were
requiring that client-side listeners see the server's exact member
ID which is no longer true since the ID being fabricated out of a
ServerLocation doesn't have as much detail as the true member ID and
so is not equal() to it.  Some other test code was creating
ServerLocation objects with non-existent host names.  This is
no longer allowed so we changed these tests to use a numeric IP address.

+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.net.SocketCreator;
+   * Notifies registered listeners that a Client member has connected
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientJoined(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.JOINED);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has left
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientLeft(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.LEFT);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has crashed
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientCrashed(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.CRASHED);
+  }
+
+
+
+  /**
+   * Notifies registered listeners that a Client member has connected
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerJoined(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.JOINED);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has left
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerLeft(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.LEFT);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has crashed
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerCrashed(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.CRASHED);
+  }
+
+
+
+  /**
-   *
+   * 
+   * @param typeOfEvent joined/left/crashed
-  public static void notifyJoined(final DistributedMember member, final boolean client) {
+  private static void notifyListeners(final DistributedMember member, final boolean client,
+      final EventType typeOfEvent) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_JOINED);
+      doNotifyClientMembershipListener(member, client, event, typeOfEvent);
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_JOINED);
-          }
+        queuedExecutor.execute(() -> {
+          doNotifyClientMembershipListener(member, client, event, typeOfEvent);
-
-  /**
-   * Notifies registered listeners that a member has left. The departed member may be a client
-   * previously connected to this process or a server that this process was connected to.
-   *
-   * @param member the <code>DistributedMember</code>
-   * @param client true if the member is a client; false if server
-   */
-  public static void notifyLeft(final DistributedMember member, final boolean client) {
-    startMonitoring();
-    ThreadPoolExecutor queuedExecutor = executor;
-    if (queuedExecutor == null) {
-      return;
-    }
-
-
-    final ClientMembershipEvent event = new InternalClientMembershipEvent(member, client);
-    if (forceSynchronous) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_LEFT);
-    } else {
-      try {
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_LEFT);
-          }
-        });
-      } catch (RejectedExecutionException e) {
-        // executor must have been shutdown
-      }
-    }
-  }
-
-
-  /**
-   * Notifies registered listeners that a member has crashed. The departed member may be a client
-   * previously connected to this process or a server that this process was connected to.
-   *
-   * @param member the <code>DistributedMember</code>
-   * @param client true if the member is a client; false if server
-   */
-  public static void notifyCrashed(final DistributedMember member, final boolean client) {
-    ThreadPoolExecutor queuedExecutor = executor;
-    if (queuedExecutor == null) {
-      return;
-    }
-
-    final ClientMembershipEvent event = new InternalClientMembershipEvent(member, client);
-    if (forceSynchronous) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_CRASHED);
-    } else {
-
-      try {
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_CRASHED);
-          }
-        });
-      } catch (RejectedExecutionException e) {
-        // executor must have been shutdown
-      }
-    }
-  }
-
-        if (eventType.equals(EventType.CLIENT_JOINED)) {
+        if (eventType.equals(EventType.JOINED)) {
-        } else if (eventType.equals(EventType.CLIENT_LEFT)) {
+        } else if (eventType.equals(EventType.LEFT)) {
-   * Internal implementation of ClientMembershipEvent.
+   * Internal implementation of ClientMembershipEvent. This class is used in both clients and
+   * servers to notify listeners about events concerning client/server communications. In servers
+   * listeners are notified about clients connecting/disconnecting. In clients listeners notified
+   * about new connections being formed to servers. The instance variable "client" is used to
+   * distinguish between the two.
+
+    /**
+     * If true this means that a client has joined/left/crashed.
+     * <p>
+     * If false this means that a server has joined/left/crashed
+     */
-    /** Constructs new instance of event */
-    protected InternalClientMembershipEvent(DistributedMember member, boolean client) {
+    protected InternalClientMembershipEvent(DistributedMember member, boolean isClient) {
-      this.client = client;
+      this.client = isClient;
-    CLIENT_JOINED, CLIENT_LEFT, CLIENT_CRASHED
+    JOINED, LEFT, CRASHED
