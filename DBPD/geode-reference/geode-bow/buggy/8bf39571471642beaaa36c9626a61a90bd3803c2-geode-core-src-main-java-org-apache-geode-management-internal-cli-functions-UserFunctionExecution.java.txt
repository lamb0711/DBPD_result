Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void execute(FunctionContext context) {   
-    try {      
+  public void execute(FunctionContext context) {
+    try {
-      DistributedMember member = cache.getDistributedSystem()
-          .getDistributedMember();
+      DistributedMember member = cache.getDistributedSystem().getDistributedMember();
-            resultCollectorInstance = (ResultCollector) ClassPathLoader
-                .getLatest().forName(resultCollectorName).newInstance();
+            resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
+                .forName(resultCollectorName).newInstance();
-            context
-                .getResultSender()
-                .lastResult(
-                    CliStrings
-                        .format(
-                            CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
-                            functionId));
+            context.getResultSender().lastResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
-              List<Object> results = (List<Object>) execution.execute(function)
-                  .getResult();
+              List<Object> results = (List<Object>) execution.execute(function).getResult();
-                      resultMessege
-                          .append(((IllegalArgumentException) resultObj)
-                              .getMessage());
+                      resultMessege.append(((IllegalArgumentException) resultObj).getMessage());
-              context
-                  .getResultSender()
-                  .lastResult(
-                      CliStrings
-                          .format(
-                              CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
-                              functionId,
-                              member.getId(),
-                              onRegion,
-                              CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
+              context.getResultSender()
+                  .lastResult(CliStrings.format(
+                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
+                      functionId, member.getId(), onRegion,
+                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                          resultCollectorName, e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                  resultCollectorName, e.getMessage()));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                          functionId, member.getId(), e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
+                  functionId, member.getId(), e.getMessage()));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                          functionId, member.getId(), e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
+                  functionId, member.getId(), e.getMessage()));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                          resultCollectorName, e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                  resultCollectorName, e.getMessage()));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                          resultCollectorName, e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                  resultCollectorName, e.getMessage()));
-          context
-              .getResultSender()
-              .lastResult(
-                  CliStrings
-                      .format(
-                          CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                          functionId, member.getId(), e.getMessage()));
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
+                  functionId, member.getId(), e.getMessage()));
-        context.getResultSender().lastResult(
-            CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS);
+        context.getResultSender()
+            .lastResult(CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS);
-    } catch(Exception ex){
+    } catch (Exception ex) {
-    } 
+    }
