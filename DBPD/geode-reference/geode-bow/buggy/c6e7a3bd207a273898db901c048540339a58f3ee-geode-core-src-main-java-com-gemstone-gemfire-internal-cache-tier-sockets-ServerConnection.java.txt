client server

client server

+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.subject.Subject;
+import org.apache.shiro.util.ThreadState;
+
-import org.apache.logging.log4j.Logger;
-import org.apache.shiro.subject.Subject;
-import org.apache.shiro.util.ThreadState;
-
+
+  public ClientUserAuths getClientUserAuths(){
+    return this.clientUserAuths;
+  }
-
-  protected void setAuthorizeRequest(AuthorizeRequest authzRequest) {
-    this.authzRequest = authzRequest;
-  }
-
-  protected void setPostAuthorizeRequest(AuthorizeRequestPP postAuthzRequest) {
-    this.postAuthzRequest = postAuthzRequest;
-  }
-  //this is backward compability only, if any race condition happens.
-  //where server is unregistering the client and client is creating new connection.
-  private void resetUserAuthorizeAndPostAuthorizeRequest()
-  {
-    if (AcceptorImpl.isAuthenticationRequired()
-        && (this.handshake.getVersion().compareTo(Version.GFE_65) < 0
-            || this.getCommunicationMode() == Acceptor.GATEWAY_TO_GATEWAY))
-    {
-      ClientUserAuths cua = proxyIdVsClientUserAuths.get(this.proxyId);
-      if (cua != this.clientUserAuths)
-      {
-        UserAuthAttributes uaa = this.clientUserAuths.getUserAuthAttributes(this.userAuthId);
-        initializeClientUserAuths();
-        this.userAuthId = this.clientUserAuths.putUserAuth(uaa);
-      }
-    }
-  }
-        if(AcceptorImpl.isIntegratedSecurity()) {
+        if(AcceptorImpl.isIntegratedSecurity() && !isInternalMessage()) {
+          logger.info(command + " received with uniqueId "+uniqueId);
-          threadState = GeodeSecurityUtil.bindSubject(subject);
+          if(subject!=null) {
+            threadState = GeodeSecurityUtil.bindSubject(subject);
+            logger.info("binding " + subject.getPrincipal() + " to the current thread");
+          }
-      String username = credentials.getProperty("security-username");
-      String password = credentials.getProperty("security-password");
-
-      Subject subject = GeodeSecurityUtil.login(username, password);
-      if(subject!=null){
+
+      DistributedSystem system = this.getDistributedSystem();
+      String methodName = system.getProperties().getProperty(
+        SECURITY_CLIENT_AUTHENTICATOR);
+
+      Object principal = HandShake.verifyCredentials(methodName, credentials,
+        system.getSecurityProperties(), (InternalLogWriter) system.getLogWriter(), (InternalLogWriter) system
+          .getSecurityLogWriter(), this.proxyId.getDistributedMember());
+      if(principal instanceof Subject){
+        Subject subject = (Subject)principal;
+        logger.info("Put subject in Map: "+uniqueId+" for "+ subject.getPrincipal());
-        DistributedSystem system = this.getDistributedSystem();
-        String methodName = system.getProperties().getProperty(
-          SECURITY_CLIENT_AUTHENTICATOR);
-
-        Principal principal = HandShake.verifyCredentials(methodName, credentials,
-          system.getSecurityProperties(), (InternalLogWriter) system.getLogWriter(), (InternalLogWriter) system
-            .getSecurityLogWriter(), this.proxyId.getDistributedMember());
-
-        uniqueId = ServerHandShakeProcessor.getUniqueId(this, principal);
+        uniqueId = ServerHandShakeProcessor.getUniqueId(this, (Principal)principal);
-      
-      //create secure part which will be send in respones    
-      
+
+      //create secure part which will be send in respones
-        && (!(this.requestMsg.msgType == MessageType.CLIENT_READY
+        && (!isInternalMessage())) {
+      setSecurityPart();
+      return this.securePart;
+    }
+    else {
+      if (AcceptorImpl.isAuthenticationRequired() && logger.isDebugEnabled()) {
+        logger.debug("ServerConnection.updateAndGetSecurityPart() not adding security part for msg type {}",
+            MessageType.getString(this.requestMsg.msgType));
+      }
+    }
+    return null;
+ }
+
+  private boolean isInternalMessage(){
+    return (this.requestMsg.msgType == MessageType.CLIENT_READY
-            || this.requestMsg.msgType == MessageType.GET_CLIENT_PR_METADATA 
+            || this.requestMsg.msgType == MessageType.GET_CLIENT_PR_METADATA
-            || this.requestMsg.msgType == MessageType.ROLLBACK))) {
-      setSecurityPart();
-      return this.securePart;
-    }
-    else {
-      if (AcceptorImpl.isAuthenticationRequired() && logger.isDebugEnabled()) {
-        logger.debug("ServerConnection.updateAndGetSecurityPart() not adding security part for msg type {}",
-            MessageType.getString(this.requestMsg.msgType));
-      }
-    }
-    return null;
- }
+            || this.requestMsg.msgType == MessageType.ROLLBACK);
+  }
