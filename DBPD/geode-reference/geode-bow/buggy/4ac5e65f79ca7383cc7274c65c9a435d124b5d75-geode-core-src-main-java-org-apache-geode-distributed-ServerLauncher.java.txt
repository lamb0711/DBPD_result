GEODE-3277: revert changes to Launcher bind address and State constructors

This reverts commit 73a847a4b22239414db0ae9d973673f6a03fdcf0.
This reverts commit 4a5c56eb8edd277b258e916212d41bec0b0e7b83.
This reverts commit f41ca9d7d2fa7c045ec439df9478335233f1d95e.

-import java.io.UncheckedIOException;
+import org.apache.geode.internal.process.StartupStatusListener;
-import org.apache.geode.management.internal.cli.util.HostUtils;
- *
+ * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-    if (serverBindAddress != null) {
-      return this.serverBindAddress;
-    }
-
-    try {
-      return SocketCreator.getLocalHost();
-    } catch (UnknownHostException handled) {
-      // Returning loopback implies the serverBindAddress was null and no IP address
-      // for localhost could be found
-      return InetAddress.getLoopbackAddress();
-    }
+    return this.serverBindAddress;
-   *
+   * 
-   *
+   * 
-      // Returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
+      // NOTE returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-            (String statusMessage) -> {
-              debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
-              ServerLauncher.this.statusMessage = statusMessage;
+            new StartupStatusListener() {
+              @Override
+              public void setStatus(final String statusMessage) {
+                debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
+                ServerLauncher.this.statusMessage = statusMessage;
+              }
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-    debug("This ServerLauncher was not the instance used to launch the GemFire Cache Server, and "
-        + "neither PID nor working directory were specified; the Server's state is unknown.%n");
+
+    debug(
+        "This ServerLauncher was not the instance used to launch the GemFire Cache Server, and neither PID "
+            .concat("nor working directory were specified; the Server's state is unknown.%n"));
-   *
+   * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
+
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-          : Collections.emptyList();
+          : Collections.<String>emptyList();
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-   *
+   * 
-     *
+     * 
-          getServerLocation(launcher), // serverLocation
+          null, // serverLocation
-          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
+          Collections.<String>emptyList(), // jvmArguments
-          System.getProperty("java.version"), // javaVersion
+          null, // javaVersion
-          getServerBindAddress(launcher).getCanonicalHostName(), // host
-          launcher.getServerPortAsString(), // port
+          null, // host
+          null, // port
-    /*
-     * Guards against throwing NPEs due to incorrect or missing host information while constructing
-     * error states
-     */
-    private static String getServerLocation(ServerLauncher launcher) {
-      if (launcher.getServerPort() == null) {
-        return launcher.getId();
-      }
-      if (launcher.getServerBindAddress() == null) {
-        return HostUtils.getLocatorId(HostUtils.getLocalHost(), launcher.getServerPort());
-      }
-      return HostUtils.getLocatorId(launcher.getServerBindAddress().getCanonicalHostName(),
-          launcher.getServerPort());
-    }
-
+
+
-    private static InetAddress getServerBindAddress(final ServerLauncher launcher) {
-      final InternalCache internalCache = GemFireCacheImpl.getInstance();
-
-      if (internalCache != null) {
-        final List<CacheServer> csList = internalCache.getCacheServers();
-        if (csList != null && !csList.isEmpty()) {
-          final CacheServer cs = csList.get(0);
-          final InetAddress serverBindAddress;
-          try {
-            serverBindAddress = InetAddress.getByName(cs.getBindAddress());
-          } catch (UnknownHostException e) {
-            throw new UncheckedIOException(e);
-          }
-          if (serverBindAddress != null) {
-            return serverBindAddress;
-          }
-        }
-      }
-      return launcher.getServerBindAddress();
-    }
-
+
+
