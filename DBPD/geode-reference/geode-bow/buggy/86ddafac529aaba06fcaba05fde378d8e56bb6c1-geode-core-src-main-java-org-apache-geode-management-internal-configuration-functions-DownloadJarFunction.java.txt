GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
-import java.util.List;
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.rmi.RemoteException;
+import com.healthmarketscience.rmiio.GZIPRemoteInputStream;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.RemoteInputStreamServer;
+import com.healthmarketscience.rmiio.SimpleRemoteInputStream;
+import org.apache.geode.cache.execute.FunctionException;
-public class UploadJarFunction implements Function<Object[]>, InternalEntity {
+public class DownloadJarFunction implements Function<Object[]>, InternalEntity {
-    byte[] jarBytes = null;
+    RemoteInputStream result = null;
-          jarBytes = sharedConfig.getJarBytesFromThisLocator(group, jarName);
-          context.getResultSender().lastResult(jarBytes);
+          File jarFile = sharedConfig.getPathToJarOnThisLocator(group, jarName).toFile();
+
+          RemoteInputStreamServer istream = null;
+          try {
+            istream =
+                new SimpleRemoteInputStream(new BufferedInputStream(new FileInputStream(jarFile)));
+            result = istream.export();
+            istream = null;
+          } catch (FileNotFoundException | RemoteException ex) {
+            throw new FunctionException(ex);
+          } finally {
+            // we will only close the stream here if the server fails before
+            // returning an exported stream
+            if (istream != null) {
+              istream.close();
+            }
+          }
+
+    context.getResultSender().lastResult(result);
-    return UploadJarFunction.class.getName();
+    return DownloadJarFunction.class.getName();
