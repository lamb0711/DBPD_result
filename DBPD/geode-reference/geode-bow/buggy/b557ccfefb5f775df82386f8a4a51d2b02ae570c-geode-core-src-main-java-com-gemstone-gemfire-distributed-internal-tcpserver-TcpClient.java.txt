GEODE-420: Locator ssl config.

-import java.net.*;
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Socket;
+import javax.net.ssl.SSLHandshakeException;
+
-import com.gemstone.gemfire.cache.client.internal.locator.*;
-import com.gemstone.gemfire.internal.net.*;
+import com.gemstone.gemfire.internal.net.SSLEnabledComponent;
+import com.gemstone.gemfire.internal.net.SocketCreator;
+import com.gemstone.gemfire.internal.net.SocketCreatorFactory;
-  
+
-  
+
-  
+
-    this(SocketCreatorFactory.getClusterSSLSocketCreator());
+    this(SocketCreatorFactory.getSSLSocketCreatorForComponent(SSLEnabledComponent.LOCATOR));
-   * 
+   *
+   *
+   *
+   *
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected)
-    throws IOException, ClassNotFoundException {
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected) throws IOException, ClassNotFoundException {
-    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
+    Socket sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
-          sock.setSoLinger(true, 0);
+          if (!sock.isClosed() && !socketCreator.useSSL()) {
+            sock.setSoLinger(true, 0);
+          }
-    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-    sock.setSoTimeout(timeout);
+    Socket sock = null;
+    try {
+      sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
+      sock.setSoTimeout(timeout);
+    } catch (SSLHandshakeException e) {
+      throw new LocatorCancelException("Unrecognisable response received");
+    }
-      DataInputStream in = new DataInputStream(sock.getInputStream());
+      InputStream inputStream = sock.getInputStream();
+      DataInputStream in = new DataInputStream(inputStream);
-        VersionResponse response = DataSerializer.readObject(in);
+        Object readObject = DataSerializer.readObject(in);
+        if (!(readObject instanceof VersionResponse)) {
+          throw new LocatorCancelException("Unrecognisable response received");
+          //          throw new IOException("Unexpected response received from locator");
+        }
+        VersionResponse response = (VersionResponse) readObject;
-        sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
-        sock.close();
+          sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
+          sock.close();
-    synchronized(serverVersions) {
+    synchronized (serverVersions) {
