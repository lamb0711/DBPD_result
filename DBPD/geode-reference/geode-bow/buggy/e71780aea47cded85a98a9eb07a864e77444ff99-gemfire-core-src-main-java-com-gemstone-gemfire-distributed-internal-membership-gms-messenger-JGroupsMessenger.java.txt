Enabling creation of stand-alone GMSLocator & adding 2-phase view casting

The locator work will let us unit-test this component while the
view-casting work is in preparation for the health-monitor impl that is
coming soon & will allow us to start testing HA features.

-import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberServices;
+import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
-  private static final Logger logger = GMSMemberServices.getLogger();
+  private static final Logger logger = Services.getLogger();
-  GMSMemberServices services;
+  Services services;
-  public void init(GMSMemberServices s) {
+  public void init(Services s) {
-    } catch (IllegalStateException e) {
-      throw new SystemConnectException("unable to create jgroups channel", e);
-      } catch (NoSuchMethodException e) {
+      } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
-      } catch (InvocationTargetException e) {
-        logger.info("Unable to invoke getPhysicallAddress method in UDP - parsing its address instead");
-      } catch (IllegalAccessException e) {
-        logger.info("Unable to access getPhysicallAddress method in UDP - parsing its address instead");
+        logger.info("caught unexpected exception", e);
-    if (gfmsg instanceof com.gemstone.gemfire.internal.cache.DistributedCacheOperation.CacheOperationMessage) {
-      com.gemstone.gemfire.internal.cache.DistributedCacheOperation.CacheOperationMessage cmsg =
-          (com.gemstone.gemfire.internal.cache.DistributedCacheOperation.CacheOperationMessage)gfmsg;
-    }
-//        DataSerializer.writeObject(this.localAddress.getNetMember(), out_stream);
+        DataSerializer.writeObject(this.localAddress.getNetMember(), out_stream);
+    if (logger.isDebugEnabled()) {
+      logger.debug("deserializing a message of length "+messageLength);
+    }
+    
-      Address s = jgmsg.getSrc();
-      sender = getMemberFromView(s, ordinal);
+      GMSMember m = DataSerializer.readObject(dis);
+      sender = getMemberFromView(m, ordinal);
-        ((DistributionMessage) result).setSender(sender);
+        ((DistributionMessage)result).setSender(sender);
-    catch (ClassNotFoundException e) {
-      problem = e;
-    }
-    catch (IOException e) {
-      problem = e;
-    }
-    catch (RuntimeException e) {
+    catch (ClassNotFoundException | IOException | RuntimeException e) {
-  private InternalDistributedMember getMemberFromView(Address jgId, short version) {
+  private InternalDistributedMember getMemberFromView(GMSMember jgId, short version) {
-    GMSMember gm = null;
-    
-    if ( !(jgId instanceof JGAddress) ) {
-      // not one of our addresses - gather info from JGroups to form
-      // a GMSAddress or fish for the ID using the UUID
-      IpAddress pa = (IpAddress)myChannel.down(new Event(Event.GET_PHYSICAL_ADDRESS, jgId));
-      if (pa == null) {
-        // worst-case scenario - we only have a UUID
-        for (InternalDistributedMember m: v.getMembers()) {
-          if (((GMSMember)m.getNetMember()).getUUID().equals(jgId)) {
-            return m;
-          }
-        }
-      }
-      gm = new GMSMember(pa.getIpAddress(), pa.getPort(),
-          false/*unknown*/, false/*unknown*/, version);
-    }
-    else {
-      JGAddress addr = (JGAddress)jgId;
-      gm = new GMSMember(addr.getInetAddress(), addr.getPort(),
-          false/*unknown*/, false/*unknown*/, version);
-    }
-        if (m.getNetMember().equals(jgId)) {
+        if (((GMSMember)m.getNetMember()).equals(jgId)) {
-    return new InternalDistributedMember(gm);
+    return new InternalDistributedMember(jgId);
