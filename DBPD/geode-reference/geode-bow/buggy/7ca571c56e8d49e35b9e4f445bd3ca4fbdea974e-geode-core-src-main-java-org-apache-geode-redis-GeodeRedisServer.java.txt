GEODE-1617: Regions can be created with a variety of characters that are unsupported

* Test for valid characters when creating non-internal regions
* Updated unit tests and added a new isInternalRegion field to InternalRegionAttributes
* Fixed issue with HA region.
* Found a potential issue with Attributes for a region.
* This closes #201

-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.cache.CacheFactory;
-import com.gemstone.gemfire.cache.EntryEvent;
-import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.cache.RegionDestroyedException;
-import com.gemstone.gemfire.cache.RegionFactory;
-import com.gemstone.gemfire.cache.RegionShortcut;
-import com.gemstone.gemfire.cache.util.CacheListenerAdapter;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.hll.HyperLogLogPlus;
-
-import org.apache.geode.redis.internal.ByteArrayWrapper;
-import org.apache.geode.redis.internal.ByteToCommandDecoder;
-import org.apache.geode.redis.internal.Coder;
-import org.apache.geode.redis.internal.ExecutionHandlerContext;
-import org.apache.geode.redis.internal.RedisDataType;
-import org.apache.geode.redis.internal.RegionProvider;
-
+import org.apache.geode.redis.internal.ByteArrayWrapper;
+import org.apache.geode.redis.internal.ByteToCommandDecoder;
+import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.ExecutionHandlerContext;
+import org.apache.geode.redis.internal.RedisDataType;
+import org.apache.geode.redis.internal.RegionProvider;
+
+import com.gemstone.gemfire.InternalGemFireError;
+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.cache.DataPolicy;
+import com.gemstone.gemfire.cache.EntryEvent;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.RegionAttributes;
+import com.gemstone.gemfire.cache.RegionDestroyedException;
+import com.gemstone.gemfire.cache.RegionShortcut;
+import com.gemstone.gemfire.cache.Scope;
+import com.gemstone.gemfire.cache.util.CacheListenerAdapter;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.cache.InternalRegionArguments;
+import com.gemstone.gemfire.internal.hll.HyperLogLogPlus;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-      RegionFactory<String, RedisDataType> rfMeta = cache.createRegionFactory(RegionShortcut.REPLICATE);
-      rfMeta.addCacheListener(this.metaListener);
-      RegionFactory<ByteArrayWrapper, ByteArrayWrapper> rfString = cache.createRegionFactory(DEFAULT_REGION_TYPE);
-      RegionFactory<ByteArrayWrapper, HyperLogLogPlus> rfHLL = cache.createRegionFactory(DEFAULT_REGION_TYPE);
-      if ((stringsRegion = this.cache.getRegion(STRING_REGION)) == null)
-        stringsRegion = rfString.create(GeodeRedisServer.STRING_REGION);
+      InternalRegionArguments ira = new InternalRegionArguments().setInternalRegion(true);
+      AttributesFactory af = new AttributesFactory();
+      af.setScope(Scope.LOCAL);
+      RegionAttributes ra = af.create();
-      if ((hLLRegion = this.cache.getRegion(HLL_REGION)) == null)
-        hLLRegion = rfHLL.create(HLL_REGION);
-      if ((redisMetaData = this.cache.getRegion(REDIS_META_DATA_REGION)) == null)
-        redisMetaData = rfMeta.create(REDIS_META_DATA_REGION);
+      GemFireCacheImpl gemFireCache = (GemFireCacheImpl) cache;
+      try {
+        if ((stringsRegion = cache.getRegion(STRING_REGION)) == null) {
+          stringsRegion = gemFireCache.createVMRegion(GeodeRedisServer.STRING_REGION, ra, ira);
+        }
+        if ((hLLRegion = cache.getRegion(HLL_REGION)) == null) {
+          hLLRegion = gemFireCache.createVMRegion(HLL_REGION, ra, ira);
+        }
+        if ((redisMetaData = cache.getRegion(REDIS_META_DATA_REGION)) == null) {
+          af.addCacheListener(metaListener);
+          af.setDataPolicy(DataPolicy.REPLICATE);
+          redisMetaData = gemFireCache.createVMRegion(REDIS_META_DATA_REGION, af.create(), ira);
+        }
+      } catch (IOException | ClassNotFoundException e) {
+        // only if loading snapshot, not here
+        InternalGemFireError assErr = new InternalGemFireError(LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString());
+        assErr.initCause(e);
+        throw assErr;
+      }
