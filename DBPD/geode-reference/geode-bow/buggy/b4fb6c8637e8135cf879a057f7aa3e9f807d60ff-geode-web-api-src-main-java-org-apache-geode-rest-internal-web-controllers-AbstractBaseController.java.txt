Revert "GEODE-7938: added keys query param to GET, PUT, and DELETE /{region} endpoints (#4901)"

This reverts commit 6263f1f9a4782433d013c6b759bda8c84216b595.

-import java.net.URLEncoder;
+import javax.servlet.http.HttpServletRequest;
+
-  URI toUriWithKeys(String[] keys, final String... pathSegments) {
-    return ServletUriComponentsBuilder.fromCurrentContextPath().path(getRestApiVersion())
-        .pathSegment(pathSegments)
-        .queryParam("keys", StringUtils.arrayToCommaDelimitedString(keys))
-        .build(true).toUri();
-  }
-
-  String encode(String value) {
-    if (value == null) {
-      throw new GemfireRestException("could not process null value specified in query String");
-    }
-    return encode(value, DEFAULT_ENCODING);
-  }
-
-  String[] decode(String[] values) {
-    String[] result = new String[values.length];
-    for (int i = 0; i < values.length; i++) {
-      result[i] = decode(values[i]);
-    }
-    return result;
-  }
-
-  String[] encode(String[] values) {
-    String[] result = new String[values.length];
-    for (int i = 0; i < values.length; i++) {
-      result[i] = encode(values[i]);
-    }
-    return result;
-  }
-
-      if (domainObject != null && NumberUtils.isNumeric(newKey) && domainObjectId == null) {
+      if (NumberUtils.isNumeric(newKey) && domainObjectId == null) {
-  private String encode(final String value, final String encoding) {
-    try {
-      return URLEncoder.encode(value, encoding);
-    } catch (UnsupportedEncodingException e) {
-      throw new GemfireRestException("Server has encountered unsupported encoding!");
-    }
-  }
-
+  List<String> checkForMultipleKeysExist(String region, String... keys) {
+    List<String> unknownKeys = new ArrayList<>();
+    for (String key : keys) {
+      if (!getRegion(region).containsKey(key)) {
+        unknownKeys.add(key);
+      }
+    }
+    return unknownKeys;
+  }
+
-  /**
-   * @return if the opValue is CAS then the existingValue; otherwise null
-   */
-  String updateSingleKey(final String region, final String key, final String json,
+  ResponseEntity<String> updateSingleKey(final String region, final String key, final String json,
+          // putValue(region, key, convertJsonIntoPdxCollection(json));
-    return existingValue;
+
+    final HttpHeaders headers = new HttpHeaders();
+    headers.setLocation(toUri(region, key));
+    return new ResponseEntity<>(existingValue, headers,
+        (existingValue == null ? HttpStatus.OK : HttpStatus.CONFLICT));
-  void updateMultipleKeys(final String region, final String[] keys, final String json) {
+  ResponseEntity<String> updateMultipleKeys(final String region, final String[] keys,
+      final String json) {
+
+
+    HttpHeaders headers = new HttpHeaders();
+    headers.setLocation(toUri(region, StringUtils.arrayToCommaDelimitedString(keys)));
+    return new ResponseEntity<>(headers, HttpStatus.OK);
+
+  protected String[] parseKeys(HttpServletRequest request, String region) {
+    String uri = request.getRequestURI();
+    int regionIndex = uri.indexOf("/" + region + "/");
+    if (regionIndex == -1) {
+      throw new IllegalStateException(
+          String.format("Could not find the region (%1$s) in the URI (%2$s)", region, uri));
+    }
+    int keysIndex = regionIndex + region.length() + 2;
+    String keysString = uri.substring(keysIndex);
+    return keysString.split(",");
+  }
