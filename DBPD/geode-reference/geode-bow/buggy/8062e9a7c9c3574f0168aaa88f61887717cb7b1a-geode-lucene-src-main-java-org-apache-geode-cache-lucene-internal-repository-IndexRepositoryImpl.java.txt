GEODE-2367: Lucene indexes do not handle ha scenarios

* Added afterSecondary callback to partition listener to allow cleaning up
  of the index repo when the bucket losses primary
* Added lock prior to creating the bucket indexes to prevent multiple index
  writers from being available at a time
* Changed single point of lucene index creation, no longer creating on the fly

+import org.apache.geode.distributed.DistributedLockService;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.distributed.LockNotHeldException;
+  private DistributedLockService lockService;
+  private String lockName;
-  public IndexRepositoryImpl(Region<?, ?> region, IndexWriter writer, LuceneSerializer serializer,
+  // For test purposes
+  IndexRepositoryImpl(Region<?, ?> region, IndexWriter writer, LuceneSerializer serializer,
+    this(region, writer, serializer, stats, userRegion,
+        ((DistributedRegion) region).getLockService(), "NoLockFile");
+  }
+
+  public IndexRepositoryImpl(Region<?, ?> region, IndexWriter writer, LuceneSerializer serializer,
+      LuceneIndexStats stats, Region<?, ?> userRegion, DistributedLockService lockService,
+      String lockName) throws IOException {
+    this.lockService = lockService;
+    this.lockName = lockName;
-    return userRegion.isDestroyed();
+    return userRegion.isDestroyed() || !writer.isOpen();
-    stats.removeDocumentsSupplier(documentCountSupplier);
-      writer.close();
-    } catch (IOException e) {
-      logger.warn("Unable to clean up index repository", e);
+      stats.removeDocumentsSupplier(documentCountSupplier);
+      try {
+        writer.close();
+      } catch (IOException e) {
+        logger.warn("Unable to clean up index repository", e);
+      }
+    } finally {
+      try {
+        if (lockService != null) {
+          lockService.unlock(lockName);
+        }
+      } catch (LockNotHeldException e) {
+        logger.debug("Tried to unlock file region lock(" + lockName + ") that we did not hold", e);
+      }
