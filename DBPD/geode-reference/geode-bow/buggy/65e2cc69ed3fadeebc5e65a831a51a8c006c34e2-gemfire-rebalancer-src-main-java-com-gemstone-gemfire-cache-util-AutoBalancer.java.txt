GEODE-124: Address DLock related review comments

* Do not release Rebalance Dlock after each task. This means a member holds the
  lock for its lifetime
* Increment rebalance attempt stat only if lock is acquired

https://reviews.apache.org/r/36662/

+import java.util.concurrent.atomic.AtomicBoolean;
+  private AtomicBoolean isLockAcquired = new AtomicBoolean(false);
+      if (!isLockAcquired.get()) {
+        synchronized (isLockAcquired) {
+          if (!isLockAcquired.get()) {
+            boolean result = cacheFacade.acquireAutoBalanceLock();
+            if (result) {
+              isLockAcquired.set(true);
+            } else {
+              if (logger.isDebugEnabled()) {
+                logger.debug("Another member owns auto-balance lock. Skip this attempt to rebalance the cluster");
+              }
+              return;
+            }
+          }
+        }
+      }
+
-      boolean result = cacheFacade.acquireAutoBalanceLock();
+      boolean result = needsRebalancing();
-          logger.debug("Another member owns auto-balance lock. Skip this attempt to rebalance the cluster");
+          logger.debug("Rebalancing is not needed");
-      try {
-        result = needsRebalancing();
-        if (!result) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("Rebalancing is not needed");
-          }
-          return;
-        }
-
-        cacheFacade.rebalance();
-      } finally {
-        cacheFacade.releaseAutoBalanceLock();
-      }
+      cacheFacade.rebalance();
+    @Override
-    public void releaseAutoBalanceLock() {
-      DistributedLockService dls = getDLS();
-      dls.unlock(AUTO_BALANCER_LOCK);
-      if (logger.isDebugEnabled()) {
-        logger.debug("Successfully released auto-balance ownership");
-      }
-    }
-
-    void releaseAutoBalanceLock();
-
