GEODE-56 Decrementing bytesOverflowedOnDisk when an update happens to an evicted entry.

For persistent regions, we were correctly updating this stat. But for
non persistent regions we did not read the old size on disk, so we were
not updating the stat.

If the entry was in the async queue, we only increment the stat once
when the final value is actually written to disk. So we will only
decrement the stat if the oldValue is not pending asynchronous write to
disk.

I'm still seeing issues with the entryCount. I've tracked this down to
what I think is a problem with tombstones. It appears when we modify an
entry that is a tombstone, we increment the entry count once for the new
value, and once for removing the tombstone. I've filed GEODE-92 and
GEODE-93 for the issues I've found with this new test.

+          
+          if(did != null && did.isPendingAsync()) {
+            //if the entry was not yet written to disk, we didn't update
+            //the bytes on disk.
+            oldValueLength = 0;
+          } else {
+            oldValueLength = getValueLength(did);
+          }
+          
-            oldValueLength = getValueLength(did);
+                dr.incNumOverflowBytesOnDisk(-did.getValueLength());
+                dr.incNumOverflowBytesOnDisk(did.getValueLength());
+                dr.incNumOverflowBytesOnDisk(-did.getValueLength());
+                dr.incNumOverflowBytesOnDisk(did.getValueLength());
