GEODE-5716: GfshRule improvement (#2454)

* simplify process output to stdout/stderr
* rework debuggable command API
* be more specific about each gfshScript execution in the output.

+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.concurrent.TimeUnit;
+import com.google.common.collect.Streams;
+
+  private static final String DOUBLE_QUOTE = "\"";
+
+
+  protected void awaitTermination(GfshScript script) throws InterruptedException {
+    boolean exited = process.waitFor(script.getTimeout(), script.getTimeoutTimeUnit());
+
+    try {
+      assertThat(exited).isTrue();
+      assertThat(process.exitValue()).isEqualTo(script.getExpectedExitValue());
+    } catch (AssertionError error) {
+      printLogFiles();
+      throw error;
+    }
+  }
+
+  /**
+   * this only kills the process of "gfsh -e command", it does not kill the child processes started
+   * by this command.
+   */
+  public void killProcess() {
+    process.destroyForcibly();
+    if (process.isAlive()) {
+      // process may not terminate immediately after destroyForcibly
+      boolean exited = false;
+      try {
+        exited = process.waitFor(1, TimeUnit.MINUTES);
+      } catch (InterruptedException e) {
+        throw new RuntimeException(e.getMessage(), e);
+      }
+      if (!exited) {
+        throw new RuntimeException("failed to destroy the process of " + workingDir.getName());
+      }
+    }
+  }
+
+  String[] getStopMemberCommands() {
+    Stream<String> stopServers =
+        getServerDirs().stream().map(f -> "stop server --dir=" + quoteArgument(f.toString()));
+    Stream<String> stopLocators =
+        getLocatorDirs().stream().map(f -> "stop locator --dir=" + quoteArgument(f.toString()));
+    return Streams.concat(stopServers, stopLocators).toArray(String[]::new);
+  }
+
+  private String quoteArgument(String argument) {
+    if (!argument.startsWith(DOUBLE_QUOTE)) {
+      argument = DOUBLE_QUOTE + argument;
+    }
+
+    if (!argument.endsWith(DOUBLE_QUOTE)) {
+      argument = argument + DOUBLE_QUOTE;
+    }
+
+    return argument;
+  }
