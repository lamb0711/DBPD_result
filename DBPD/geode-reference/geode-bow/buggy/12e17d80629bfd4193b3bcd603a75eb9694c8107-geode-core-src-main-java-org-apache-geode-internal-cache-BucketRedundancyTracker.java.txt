GEODE-5478: Modified to not increment low redundancy bucket count twice

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
-  private boolean redundancySatisfied = false;
-  private boolean hasAnyCopies = false;
+  // if true decrement allowed; if false increment allowed
+  private boolean noCopiesDecrementOkay = false;
+  // if true decrement allowed; if false increment allowed
+  private boolean lowRedundancyDecrementOkay = false;
-  private boolean hasEverHadCopies = false;
-    if (!redundancySatisfied) {
-      regionRedundancyTracker.decrementLowRedundancyBucketCount();
-      redundancySatisfied = true;
-    }
-    if (hasEverHadCopies && !hasAnyCopies) {
-      regionRedundancyTracker.decrementNoCopiesBucketCount();
-      hasAnyCopies = true;
-    }
+    decrementLowRedundancy();
+    decrementNoCopies();
-    if (hasAnyCopies && currentBucketHosts == 0) {
-      hasAnyCopies = false;
+    if (currentBucketHosts == 0) {
+      incrementNoCopies();
+    } else if (currentBucketHosts > 0) {
+      decrementNoCopies();
+    }
+  }
+
+  private void decrementNoCopies() {
+    if (noCopiesDecrementOkay) {
+      noCopiesDecrementOkay = false;
+      regionRedundancyTracker.decrementNoCopiesBucketCount();
+    }
+  }
+
+  private void incrementNoCopies() {
+    if (!noCopiesDecrementOkay) {
+      noCopiesDecrementOkay = true;
-    } else if (!hasAnyCopies && currentBucketHosts > 0) {
-      if (hasEverHadCopies) {
-        regionRedundancyTracker.decrementNoCopiesBucketCount();
-      }
-      hasEverHadCopies = true;
-      hasAnyCopies = true;
-
-      if (redundancySatisfied) {
-        regionRedundancyTracker.incrementLowRedundancyBucketCount();
-        redundancySatisfied = false;
-      } else if (!hasAnyCopies && updatedRedundancy >= 0) {
-        regionRedundancyTracker.incrementLowRedundancyBucketCount();
-      }
-    } else if (!redundancySatisfied && updatedRedundancy == targetRedundancy) {
-      regionRedundancyTracker.decrementLowRedundancyBucketCount();
-      redundancySatisfied = true;
+      incrementLowRedundancy();
+    } else if (updatedRedundancy == targetRedundancy) {
+      decrementLowRedundancy();
+  private void decrementLowRedundancy() {
+    if (lowRedundancyDecrementOkay) {
+      lowRedundancyDecrementOkay = false;
+      regionRedundancyTracker.decrementLowRedundancyBucketCount();
+    }
+  }
+
+  private void incrementLowRedundancy() {
+    if (!lowRedundancyDecrementOkay) {
+      lowRedundancyDecrementOkay = true;
+      regionRedundancyTracker.incrementLowRedundancyBucketCount();
+    }
+  }
+
