GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.membership.MembershipView;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipView;
-public class GMSMembership implements Membership {
+public class GMSMembership<ID extends MemberIdentifier> implements Membership<ID> {
-  private LifecycleListener lifecycleListener;
+  private LifecycleListener<ID> lifecycleListener;
-  static class StartupEvent {
+  static class StartupEvent<ID extends MemberIdentifier> {
-    InternalDistributedMember member;
-    Message dmsg;
-    MembershipView gmsView;
+    ID member;
+    Message<ID> dmsg;
+    MembershipView<ID> gmsView;
-    StartupEvent(final InternalDistributedMember member) {
+    StartupEvent(final ID member) {
-    StartupEvent(MembershipView v) {
+    StartupEvent(MembershipView<ID> v) {
-    StartupEvent(Message d) {
+    StartupEvent(Message<ID> d) {
-   * This is the latest view (ordered list of DistributedMembers) that has been installed
+   * This is the latest view (ordered list of IDs) that has been installed
-  private volatile MembershipView latestView = new MembershipView();
+  private volatile MembershipView<ID> latestView = new MembershipView<>();
-  private final MembershipListener listener;
+  private final MembershipListener<ID> listener;
-  private final MessageListener messageListener;
+  private final MessageListener<ID> messageListener;
-  private InternalDistributedMember address = null; // new DistributedMember(-1);
+  private ID address = null; // new ID(-1);
-   * {@link InternalDistributedMember}, values are Longs indicating the time this member was
+   * {@link ID}, values are Longs indicating the time this member was
-  private final Map<DistributedMember, Long> shunnedMembers = new ConcurrentHashMap<>();
+  private final Map<ID, Long> shunnedMembers = new ConcurrentHashMap<>();
-  private final Map<DistributedMember, Object> shutdownMembers = new BoundedLinkedHashMap<>();
+  private final Map<ID, Object> shutdownMembers = new BoundedLinkedHashMap<>();
-  private final HashSet<DistributedMember> shunnedAndWarnedMembers = new HashSet<>();
+  private final HashSet<ID> shunnedAndWarnedMembers = new HashSet<>();
-   * Keys are instances of {@link InternalDistributedMember}, values are Longs indicating the time
+   * Keys are instances of {@link ID}, values are Longs indicating the time
-  private final Map<InternalDistributedMember, Long> surpriseMembers = new ConcurrentHashMap<>();
+  private final Map<ID, Long> surpriseMembers = new ConcurrentHashMap<>();
-  private final Map<InternalDistributedMember, Long> suspectedMembers = new ConcurrentHashMap<>();
+  private final Map<ID, Long> suspectedMembers = new ConcurrentHashMap<>();
-  private final LinkedList<StartupEvent> startupMessages = new LinkedList<>();
+  private final LinkedList<StartupEvent<ID>> startupMessages = new LinkedList<>();
-  private final HashMap<DistributedMember, CountDownLatch> memberLatch = new HashMap<>();
+  private final HashMap<ID, CountDownLatch> memberLatch = new HashMap<>();
-  public void processView(long newViewId, MembershipView newView) {
+  public void processView(long newViewId, MembershipView<ID> newView) {
-      for (final Entry<InternalDistributedMember, Long> internalDistributedMemberLongEntry : surpriseMembers
+      for (final Entry<ID, Long> internalIDLongEntry : surpriseMembers
-        InternalDistributedMember mbr = internalDistributedMemberLongEntry.getKey();
+        ID mbr = internalIDLongEntry.getKey();
-      for (InternalDistributedMember mbr : newView.getMembers()) {
+      for (ID mbr : newView.getMembers()) {
-      MembershipView priorView = latestView;
+      MembershipView<ID> priorView = latestView;
-      MembershipView newlatestView = new MembershipView(newView, newView.getViewId());
+      MembershipView<ID> newlatestView = new MembershipView<>(newView, newView.getViewId());
-        InternalDistributedMember m = newView.getMembers().get(i);
+        ID m = newView.getMembers().get(i);
-          for (Iterator<Map.Entry<InternalDistributedMember, Long>> iterator =
+          for (Iterator<Map.Entry<ID, Long>> iterator =
-            Entry<InternalDistributedMember, Long> entry = iterator.next();
+            Entry<ID, Long> entry = iterator.next();
-              entry.getKey().setMemberData((GMSMemberData) m.getMemberData());
+              entry.getKey().setMemberData(m.getMemberData());
-        InternalDistributedMember m = priorView.getMembers().get(i);
+        ID m = priorView.getMembers().get(i);
-      for (Iterator<Map.Entry<InternalDistributedMember, Long>> it =
+      for (Iterator<Map.Entry<ID, Long>> it =
-        Map.Entry<InternalDistributedMember, Long> entry = it.next();
+        Map.Entry<ID, Long> entry = it.next();
-          InternalDistributedMember m = entry.getKey();
+          ID m = entry.getKey();
-      for (Iterator it = suspectedMembers.entrySet().iterator(); it.hasNext();) {
-        Map.Entry entry = (Map.Entry) it.next();
-        Long birthtime = (Long) entry.getValue();
+      for (Iterator<Map.Entry<ID, Long>> it = suspectedMembers.entrySet().iterator(); it
+          .hasNext();) {
+        Map.Entry<ID, Long> entry = it.next();
+        Long birthtime = entry.getValue();
-  private Services services;
+  private Services<ID> services;
-        MembershipView initialView = createGeodeView(services.getJoinLeave().getView());
-        latestView = new MembershipView(initialView, initialView.getViewId());
+        MembershipView<ID> initialView = createGeodeView(services.getJoinLeave().getView());
+        latestView = new MembershipView<>(initialView, initialView.getViewId());
-  private MembershipView createGeodeView(GMSMembershipView view) {
-    MembershipView result = createGeodeView(view.getCreator(), view.getViewId(), view.getMembers(),
-        view.getShutdownMembers(),
-        view.getCrashedMembers());
+  private MembershipView<ID> createGeodeView(GMSMembershipView<ID> view) {
+    MembershipView<ID> result =
+        createGeodeView(view.getCreator(), view.getViewId(), view.getMembers(),
+            view.getShutdownMembers(),
+            view.getCrashedMembers());
-  private MembershipView createGeodeView(MemberIdentifier gmsCreator, int viewId,
-      List<MemberIdentifier> gmsMembers,
-      Set<MemberIdentifier> gmsShutdowns, Set<MemberIdentifier> gmsCrashes) {
-    InternalDistributedMember geodeCreator = (InternalDistributedMember) gmsCreator;
-    List<InternalDistributedMember> geodeMembers = new ArrayList<>(gmsMembers.size());
-    for (MemberIdentifier member : gmsMembers) {
-      geodeMembers.add((InternalDistributedMember) member);
+  private MembershipView<ID> createGeodeView(ID gmsCreator, int viewId,
+      List<ID> gmsMembers,
+      Set<ID> gmsShutdowns, Set<ID> gmsCrashes) {
+    ID geodeCreator = gmsCreator;
+    List<ID> geodeMembers = new ArrayList<>(gmsMembers.size());
+    for (ID member : gmsMembers) {
+      geodeMembers.add(member);
-    Set<InternalDistributedMember> geodeShutdownMembers =
-        gmsMemberCollectionToInternalDistributedMemberSet(gmsShutdowns);
-    Set<InternalDistributedMember> geodeCrashedMembers =
-        gmsMemberCollectionToInternalDistributedMemberSet(gmsCrashes);
-    return new MembershipView(geodeCreator, viewId, geodeMembers, geodeShutdownMembers,
+    Set<ID> geodeShutdownMembers =
+        gmsMemberCollectionToIDSet(gmsShutdowns);
+    Set<ID> geodeCrashedMembers =
+        gmsMemberCollectionToIDSet(gmsCrashes);
+    return new MembershipView<>(geodeCreator, viewId, geodeMembers, geodeShutdownMembers,
-  private Set<InternalDistributedMember> gmsMemberCollectionToInternalDistributedMemberSet(
-      Collection<MemberIdentifier> gmsMembers) {
+  private Set<ID> gmsMemberCollectionToIDSet(
+      Collection<ID> gmsMembers) {
-          (InternalDistributedMember) gmsMembers.iterator().next());
+          gmsMembers.iterator().next());
-      Set<InternalDistributedMember> idmMembers = new HashSet<>(gmsMembers.size());
-      for (MemberIdentifier member : gmsMembers) {
-        idmMembers.add((InternalDistributedMember) member);
+      Set<ID> idmMembers = new HashSet<>(gmsMembers.size());
+      for (ID member : gmsMembers) {
+        idmMembers.add(member);
-  private List<InternalDistributedMember> gmsMemberListToInternalDistributedMemberList(
-      List<MemberIdentifier> gmsMembers) {
+  private List<ID> gmsMemberListToIDList(
+      List<ID> gmsMembers) {
-          .singletonList((InternalDistributedMember) gmsMembers.get(0));
+          .singletonList(gmsMembers.get(0));
-      List<InternalDistributedMember> idmMembers = new ArrayList<>(gmsMembers.size());
-      for (MemberIdentifier member : gmsMembers) {
-        idmMembers.add((InternalDistributedMember) member);
+      List<ID> idmMembers = new ArrayList<>(gmsMembers.size());
+      for (ID member : gmsMembers) {
+        idmMembers.add(member);
-  public GMSMembership(MembershipListener listener, MessageListener messageListener,
-      LifecycleListener lifecycleListener) {
+  public GMSMembership(MembershipListener<ID> listener, MessageListener<ID> messageListener,
+      LifecycleListener<ID> lifecycleListener) {
-  public Manager getGMSManager() {
+  public Manager<ID> getGMSManager() {
-  private void removeWithViewLock(InternalDistributedMember dm, boolean crashed, String reason) {
+  private void removeWithViewLock(ID dm, boolean crashed, String reason) {
-  protected void handleOrDeferSurpriseConnect(InternalDistributedMember member) {
+  protected void handleOrDeferSurpriseConnect(ID member) {
-          startupMessages.add(new StartupEvent(member));
+          startupMessages.add(new StartupEvent<>(member));
-  public void startupMessageFailed(DistributedMember mbr, String failureMessage) {
+  public void startupMessageFailed(ID mbr, String failureMessage) {
-    addShunnedMember((InternalDistributedMember) mbr);
+    addShunnedMember(mbr);
-      listener.memberDeparted((InternalDistributedMember) mbr, true,
+      listener.memberDeparted(mbr, true,
-  public boolean addSurpriseMember(DistributedMember dm) {
-    final InternalDistributedMember member = (InternalDistributedMember) dm;
+  public boolean addSurpriseMember(ID dm) {
+    final ID member = dm;
-        MembershipView newMembers = new MembershipView(latestView, latestView.getViewId());
+        MembershipView<ID> newMembers = new MembershipView<>(latestView, latestView.getViewId());
-      for (Iterator it = surpriseMembers.entrySet().iterator(); it.hasNext();) {
-        Map.Entry entry = (Map.Entry) it.next();
-        Long birthtime = (Long) entry.getValue();
+      for (Iterator<Map.Entry<ID, Long>> it = surpriseMembers.entrySet().iterator(); it
+          .hasNext();) {
+        Map.Entry<ID, Long> entry = it.next();
+        Long birthtime = entry.getValue();
-          InternalDistributedMember m = (InternalDistributedMember) entry.getKey();
+          ID m = entry.getKey();
-  protected void handleOrDeferMessage(Message msg) {
+  protected void handleOrDeferMessage(Message<ID> msg) {
-          startupMessages.add(new StartupEvent(msg));
+          startupMessages.add(new StartupEvent<>(msg));
-  public void warnShun(DistributedMember m) {
+  public void warnShun(ID m) {
-  protected void dispatchMessage(Message msg) {
-    InternalDistributedMember m = (InternalDistributedMember) msg.getSender();
+  protected void dispatchMessage(Message<ID> msg) {
+    ID m = msg.getSender();
-      throw new MemberShunnedException(m);
+      throw new MemberShunnedException();
-  public void replacePartialIdentifierInMessage(Message msg) {
-    InternalDistributedMember sender = (InternalDistributedMember) msg.getSender();
-    MemberIdentifier oldID = sender;
-    MemberIdentifier newID = this.services.getJoinLeave().getMemberID(oldID);
+  public void replacePartialIdentifierInMessage(Message<ID> msg) {
+    ID sender = msg.getSender();
+    ID oldID = sender;
+    ID newID = this.services.getJoinLeave().getMemberID(oldID);
-        sender = currentView.getCanonicalID(sender);
+        sender = (ID) currentView.getCanonicalID(sender);
-  protected void handleOrDeferViewEvent(MembershipView viewArg) {
+  protected void handleOrDeferViewEvent(MembershipView<ID> viewArg) {
-        startupMessages.add(new StartupEvent(viewArg));
+        startupMessages.add(new StartupEvent<>(viewArg));
-            startupMessages.add(new StartupEvent(viewArg));
+            startupMessages.add(new StartupEvent<>(viewArg));
-      LocalViewMessage v = new LocalViewMessage(address, newId, viewArg, GMSMembership.this);
+      LocalViewMessage v = new LocalViewMessage((InternalDistributedMember) address, newId,
+          (MembershipView<InternalDistributedMember>) viewArg,
+          (GMSMembership<InternalDistributedMember>) GMSMembership.this);
-      messageListener.messageReceived(v);
+      messageListener.messageReceived((Message<ID>) v);
-  private InternalDistributedMember gmsMemberToDMember(MemberIdentifier gmsMember) {
-    return (InternalDistributedMember) gmsMember;
+  private ID gmsMemberToDMember(ID gmsMember) {
+    return gmsMember;
-  protected void handleOrDeferSuspect(SuspectMember suspectInfo) {
+  protected void handleOrDeferSuspect(SuspectMember<ID> suspectInfo) {
-      InternalDistributedMember suspect = gmsMemberToDMember(suspectInfo.suspectedMember);
-      InternalDistributedMember who = gmsMemberToDMember(suspectInfo.whoSuspected);
+      ID suspect = gmsMemberToDMember(suspectInfo.suspectedMember);
+      ID who = gmsMemberToDMember(suspectInfo.whoSuspected);
-  private void processSurpriseConnect(InternalDistributedMember member) {
+  private void processSurpriseConnect(ID member) {
-  private void processStartupEvent(StartupEvent o) {
+  private void processStartupEvent(StartupEvent<ID> o) {
-        o.dmsg.setSender(latestView.getCanonicalID((InternalDistributedMember) o.dmsg.getSender()));
+        o.dmsg.setSender(
+            latestView.getCanonicalID(o.dmsg.getSender()));
-        StartupEvent ev;
+        StartupEvent<ID> ev;
-  public List<StartupEvent> getStartupEvents() {
+  public List<StartupEvent<ID>> getStartupEvents() {
-   * {@link DistributedMember}s)
+   * {@link ID}s)
-  public MembershipView getView() {
+  public MembershipView<ID> getView() {
-    MembershipView v = latestView;
-    MembershipView result = new MembershipView(v, v.getViewId());
+    MembershipView<ID> v = latestView;
+    MembershipView<ID> result = new MembershipView<>(v, v.getViewId());
-  public DistributedMember getCoordinator() {
+  public ID getCoordinator() {
-  public boolean memberExists(DistributedMember m) {
+  public boolean memberExists(ID m) {
-    MembershipView v = latestView;
+    MembershipView<ID> v = latestView;
-  public InternalDistributedMember getLocalMember() {
+  public ID getLocalMember() {
-  public Services getServices() {
+  public Services<ID> getServices() {
-  public void processMessage(final Message msg) {
+  public void processMessage(final Message<ID> msg) {
-  public void shutdownMessageReceived(DistributedMember id, String reason) {
+  public void shutdownMessageReceived(ID id, String reason) {
-          .memberShutdown((MemberIdentifier) id, reason);
-      services.getJoinLeave().memberShutdown((MemberIdentifier) id, reason);
+          .memberShutdown(id, reason);
+      services.getJoinLeave().memberShutdown(id, reason);
-  public Set<InternalDistributedMember> getMembersNotShuttingDown() {
+  public Set<ID> getMembersNotShuttingDown() {
-          List l = membershipTestHooks;
-          for (final Object aL : l) {
-            MembershipTestHook dml = (MembershipTestHook) aL;
+          List<MembershipTestHook> l = membershipTestHooks;
+          for (final MembershipTestHook aL : l) {
+            MembershipTestHook dml = aL;
-          List l = membershipTestHooks;
-          for (final Object aL : l) {
-            MembershipTestHook dml = (MembershipTestHook) aL;
+          List<MembershipTestHook> l = membershipTestHooks;
+          for (final MembershipTestHook aL : l) {
+            MembershipTestHook dml = aL;
-  public boolean requestMemberRemoval(DistributedMember mbr, String reason) {
+  public boolean requestMemberRemoval(ID mbr, String reason) {
-      services.getJoinLeave().remove((MemberIdentifier) mbr, reason);
+      services.getJoinLeave().remove(mbr, reason);
-  public void suspectMembers(Set<DistributedMember> members, String reason) {
-    for (final DistributedMember member : members) {
+  public void suspectMembers(Set<ID> members, String reason) {
+    for (final ID member : members) {
-  public void suspectMember(DistributedMember mbr, String reason) {
+  public void suspectMember(ID mbr, String reason) {
-  public boolean verifyMember(DistributedMember mbr, String reason) {
+  public boolean verifyMember(ID mbr, String reason) {
-            .checkIfAvailable((MemberIdentifier) mbr, reason, false);
+            .checkIfAvailable(mbr, reason, false);
-  public InternalDistributedMember[] getAllMembers() {
+  public ID[] getAllMembers(final ID[] arrayType) {
-      List<InternalDistributedMember> keySet = latestView.getMembers();
-      return keySet.toArray(new InternalDistributedMember[keySet.size()]);
+      List<ID> keySet = latestView.getMembers();
+      return keySet.toArray(arrayType);
-  public boolean hasMember(final InternalDistributedMember member) {
+  public boolean hasMember(final ID member) {
-  public Set<InternalDistributedMember> send(final InternalDistributedMember[] destinations,
-      final Message content)
+  public Set<ID> send(final ID[] destinations,
+      final Message<ID> content)
-    Set<MemberIdentifier> failures = services.getMessenger().send(content);
+    Set<ID> failures = services.getMessenger().send(content);
-    return gmsMemberCollectionToInternalDistributedMemberSet(failures);
+    return failures;
-  void checkAddressesForUUIDs(InternalDistributedMember[] addresses) {
-    GMSMembershipView view = services.getJoinLeave().getView();
+  void checkAddressesForUUIDs(ID[] addresses) {
+    GMSMembershipView<ID> view = services.getJoinLeave().getView();
-      InternalDistributedMember id = addresses[i];
+      ID id = addresses[i];
-  private void destroyMember(final InternalDistributedMember member, final String reason) {
+  private void destroyMember(final ID member, final String reason) {
-        MembershipView newView = new MembershipView(latestView, latestView.getViewId());
+        MembershipView<ID> newView = new MembershipView<>(latestView, latestView.getViewId());
-  public boolean isShunned(DistributedMember m) {
+  public boolean isShunned(ID m) {
-  private boolean isShunnedOrNew(final InternalDistributedMember m) {
+  private boolean isShunnedOrNew(final ID m) {
-  private boolean isNew(final InternalDistributedMember m) {
+  private boolean isNew(final ID m) {
-  public boolean isSurpriseMember(DistributedMember m) {
+  public boolean isSurpriseMember(ID m) {
-  public void addSurpriseMemberForTesting(DistributedMember m, long birthTime) {
+  public void addSurpriseMemberForTesting(ID m, long birthTime) {
-      surpriseMembers.put((InternalDistributedMember) m, Long.valueOf(birthTime));
+      surpriseMembers.put(m, Long.valueOf(birthTime));
-  private boolean endShun(DistributedMember m) {
+  private boolean endShun(ID m) {
-  private void addShunnedMember(InternalDistributedMember m) {
+  private void addShunnedMember(ID m) {
-    Set<Map.Entry<DistributedMember, Long>> oldMembers = new HashSet<>(shunnedMembers.entrySet());
+    Set<Map.Entry<ID, Long>> oldMembers = new HashSet<>(shunnedMembers.entrySet());
-    Set<DistributedMember> removedMembers = new HashSet<>();
+    Set<ID> removedMembers = new HashSet<>();
-    for (final Object oldMember : oldMembers) {
-      Entry e = (Entry) oldMember;
+    for (final Map.Entry<ID, Long> oldMember : oldMembers) {
+      Entry<ID, Long> e = oldMember;
-      long ll = ((Long) e.getValue()).longValue();
+      long ll = e.getValue().longValue();
-      InternalDistributedMember mm = (InternalDistributedMember) e.getKey();
+      ID mm = e.getKey();
-      for (final Object removedMember : removedMembers) {
-        InternalDistributedMember idm = (InternalDistributedMember) removedMember;
+      for (final ID removedMember : removedMembers) {
+        ID idm = removedMember;
-  public Map<String, Long> getMessageState(DistributedMember member, boolean includeMulticast,
+  public Map<String, Long> getMessageState(ID member, boolean includeMulticast,
-    services.getMessenger().getMessageState((MemberIdentifier) member,
-        result,
-        includeMulticast);
+    services.getMessenger().getMessageState(member, result, includeMulticast);
-  public void waitForMessageState(DistributedMember otherMember, Map<String, Long> state)
+  public void waitForMessageState(ID otherMember, Map<String, Long> state)
-    services.getMessenger().waitForMessageState((MemberIdentifier) otherMember, state);
+    services.getMessenger().waitForMessageState(otherMember, state);
-  public boolean waitForNewMember(DistributedMember remoteId) {
+  public boolean waitForNewMember(ID remoteId) {
-    protected boolean removeEldestEntry(Map.Entry eldest) {
+    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
-  class ManagerImpl implements Manager {
+  class ManagerImpl implements Manager<ID> {
-    public Services getServices() {
+    public Services<ID> getServices() {
-    public void init(Services services) {
+    public void init(Services<ID> services) {
-    public void installView(GMSMembershipView v) {
-      MembershipView currentView = latestView;
+    public void installView(GMSMembershipView<ID> v) {
+      MembershipView<ID> currentView = latestView;
-          (InternalDistributedMember) services.getMessenger().getMemberID();
+          services.getMessenger().getMemberID();
-    public void memberSuspected(MemberIdentifier initiator,
-        MemberIdentifier suspect, String reason) {
-      SuspectMember s = new SuspectMember(initiator, suspect, reason);
+    public void memberSuspected(ID initiator, ID suspect, String reason) {
+      SuspectMember<ID> s = new SuspectMember<>(initiator, suspect, reason);
-    public void quorumLost(Collection<MemberIdentifier> failures, GMSMembershipView view) {
+    public void quorumLost(Collection<ID> failures, GMSMembershipView<ID> view) {
-        List<InternalDistributedMember> remaining =
-            gmsMemberListToInternalDistributedMemberList(view.getMembers());
+        List<ID> remaining =
+            gmsMemberListToIDList(view.getMembers());
-              gmsMemberCollectionToInternalDistributedMemberSet(failures),
+              gmsMemberCollectionToIDSet(failures),
-    public void processMessage(Message msg) {
+    public void processMessage(Message<ID> msg) {
-      if (((InternalDistributedMember) msg.getSender()).isPartial()) {
+      if (msg.getSender().isPartial()) {
