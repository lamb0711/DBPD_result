Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-* This class is serializable version of the java 1.6 ThreadInfo
-* class. It also holds a locality field to identify the VM
-* where the thread exists.
-* 
-*
-*/
+ * This class is serializable version of the java 1.6 ThreadInfo class. It also holds a locality
+ * field to identify the VM where the thread exists.
+ * 
+ *
+ */
-  
+
-  
+
-  
+
-    //This is annoying, but the to string method on info sucks.
+    // This is annoying, but the to string method on info sucks.
-    result.append(info.getThreadName()).append(" ID=")
-        .append(info.getThreadId()).append(" state=")
+    result.append(info.getThreadName()).append(" ID=").append(info.getThreadId()).append(" state=")
-    
-    
-    if(info.getLockInfo() != null) {
+
+
+    if (info.getLockInfo() != null) {
-    for(StackTraceElement element : info.getStackTrace()) {
+    for (StackTraceElement element : info.getStackTrace()) {
-      for(MonitorInfo monitor: info.getLockedMonitors()) {
-        if(element.equals(monitor.getLockedStackFrame())) {
+      for (MonitorInfo monitor : info.getLockedMonitors()) {
+        if (element.equals(monitor.getLockedStackFrame())) {
-    
-    if(info.getLockedSynchronizers().length > 0) {
+
+    if (info.getLockedSynchronizers().length > 0) {
-      for(LockInfo sync : info.getLockedSynchronizers()) {
-        result.append("\n" + sync.getClassName() + "@" + Integer.toHexString(sync.getIdentityHashCode()));
-        
+      for (LockInfo sync : info.getLockedSynchronizers()) {
+        result.append(
+            "\n" + sync.getClassName() + "@" + Integer.toHexString(sync.getIdentityHashCode()));
+
-    
+
+
+
+
+
+
-    result = prime * result + (int)(threadId ^ (threadId >>> 32));;
-    result = prime * result
-        + ((locality == null) ? 0 : locality.hashCode());
+    result = prime * result + (int) (threadId ^ (threadId >>> 32));;
+    result = prime * result + ((locality == null) ? 0 : locality.hashCode());
+
-  
+
-    return locality + ":" + threadName; 
+    return locality + ":" + threadName;
