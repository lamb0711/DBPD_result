GEODE-3082 Integrate GenericProtocolServerConnection with ClientHealthMonitor.

1. Now GenericProtocolServerConnection creates ClientProxyMembershipId.
2. ClientHealthMonitor gets notified about pings
3. added test where CHM closes the connection.
4. added test where CHM doesn't close the connection

This currently results in every connetion being tracked as a separate
client.

-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.cache.tier.Acceptor;
-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.SecurityManager;
-import org.apache.geode.security.server.Authenticator;
-
+import java.net.InetSocketAddress;
+import org.apache.geode.cache.client.PoolFactory;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.ServerLocation;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.tier.Acceptor;
+import org.apache.geode.internal.cache.tier.CachedRegionHelper;
+import org.apache.geode.internal.cache.tier.CommunicationMode;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.security.SecurityManager;
+import org.apache.geode.security.server.Authenticator;
+
+  private ClientProxyMembershipID clientProxyMembershipID;
-  public GenericProtocolServerConnection(Socket socket, InternalCache cache,
-      CachedRegionHelper helper, CacheServerStats stats, int hsTimeout, int socketBufferSize,
-      String communicationModeStr, byte communicationMode, Acceptor acceptor,
-      ClientProtocolMessageHandler newClientProtocol, SecurityService securityService,
-      Authenticator authenticator) {
-    super(socket, cache, helper, stats, hsTimeout, socketBufferSize, communicationModeStr,
+  public GenericProtocolServerConnection(Socket socket, InternalCache c, CachedRegionHelper helper,
+      CacheServerStats stats, int hsTimeout, int socketBufferSize, String communicationModeStr,
+      byte communicationMode, Acceptor acceptor, ClientProtocolMessageHandler newClientProtocol,
+      SecurityService securityService, Authenticator authenticator) {
+    super(socket, c, helper, stats, hsTimeout, socketBufferSize, communicationModeStr,
+
+    setClientProxyMembershipId();
+
+    doHandShake(CommunicationMode.ProtobufClientServerProtocol.getModeNumber(), 0);
+    } finally {
+      acceptor.getClientHealthMonitor().receivedPing(this.clientProxyMembershipID);
+  private void setClientProxyMembershipId() {
+    ServerLocation serverLocation = new ServerLocation(
+        ((InetSocketAddress) this.getSocket().getRemoteSocketAddress()).getHostName(),
+        this.getSocketPort());
+    DistributedMember distributedMember = new InternalDistributedMember(serverLocation);
+    // no handshake for new client protocol.
+    clientProxyMembershipID = new ClientProxyMembershipID(distributedMember);
+  }
+
-    // no handshake for new client protocol.
+    ClientHealthMonitor clientHealthMonitor = getAcceptor().getClientHealthMonitor();
+    clientHealthMonitor.registerClient(clientProxyMembershipID);
+    clientHealthMonitor.addConnection(clientProxyMembershipID, this);
+
+  protected int getClientReadTimeout() {
+    return PoolFactory.DEFAULT_READ_TIMEOUT;
+  }
+
+  @Override
