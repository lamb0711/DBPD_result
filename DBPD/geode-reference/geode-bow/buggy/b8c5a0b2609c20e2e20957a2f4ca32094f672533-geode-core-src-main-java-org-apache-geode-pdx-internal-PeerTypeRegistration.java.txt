GEODE-7083: Adds statistics to PeerTypeRegistration

* Adds stats class usable by other TypeRegistration implementation.
* Adds tests

+  private static final int MAX_TYPE_ID = 0xFFFFFF;
-  private int distributedSystemId;
-  private final int maxTypeId;
-  private volatile DistributedLockService dls;
+  private final TypeRegistrationStatistics statistics;
+
+  private final int typeIdPrefix;
-  private InternalCache cache;
+  private final InternalCache cache;
+
+  private volatile DistributedLockService dls;
-  private Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
+  private final Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
-  private Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
+  private final Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
-  public PeerTypeRegistration(InternalCache cache) {
+  public PeerTypeRegistration(final InternalCache cache) {
-    int distributedSystemId =
-        cache.getInternalDistributedSystem().getDistributionManager().getDistributedSystemId();
+    final InternalDistributedSystem internalDistributedSystem =
+        cache.getInternalDistributedSystem();
+    typeIdPrefix = getDistributedSystemId(internalDistributedSystem) << 24;
+    statistics =
+        new TypeRegistrationStatistics(internalDistributedSystem.getStatisticsManager(), this);
+  }
+
+  private static int getDistributedSystemId(
+      final InternalDistributedSystem internalDistributedSystem) {
+    final int distributedSystemId =
+        internalDistributedSystem.getDistributionManager().getDistributedSystemId();
-      distributedSystemId = 0;
+      return 0;
-    this.distributedSystemId = distributedSystemId << 24;
-    maxTypeId = 0xFFFFFF;
+    return distributedSystemId;
-    int newTypeId = id | distributedSystemId;
+    int newTypeId = id | typeIdPrefix;
-      int maxTry = maxTypeId;
+      int maxTry = MAX_TYPE_ID;
-                  + maxTypeId);
+                  + MAX_TYPE_ID);
-        if (id > maxTypeId) {
+        if (id > MAX_TYPE_ID) {
-        newTypeId = id | distributedSystemId;
+        newTypeId = id | typeIdPrefix;
-    int newEnumId = id | distributedSystemId;
+    int newEnumId = id | typeIdPrefix;
-      int maxTry = maxTypeId;
+      int maxTry = MAX_TYPE_ID;
-                  + maxTypeId);
+                  + MAX_TYPE_ID);
-        if (id > maxTypeId) {
+        if (id > MAX_TYPE_ID) {
-        newEnumId = id | distributedSystemId;
+        newEnumId = id | typeIdPrefix;
+    statistics.typeDefined();
+    statistics.typeCreated();
+    statistics.enumCreated();
-          if (tmpDsId == distributedSystemId) {
+          if (tmpDsId == typeIdPrefix) {
-      if (totalPdxTypeIdInDS == maxTypeId) {
+      if (totalPdxTypeIdInDS == MAX_TYPE_ID) {
-                + maxTypeId);
+                + MAX_TYPE_ID);
-          if (tmpDsId == distributedSystemId) {
+          if (tmpDsId == typeIdPrefix) {
-      if (totalEnumIdInDS == maxTypeId) {
+      if (totalEnumIdInDS == MAX_TYPE_ID) {
-                + maxTypeId);
+                + MAX_TYPE_ID);
-    verifyConfiguration();
-    EnumInfo ei = new EnumInfo(v);
-    EnumId existingId = enumToId.get(ei);
-    if (existingId != null) {
-      return existingId.intValue();
-    }
-    lock();
-    try {
-      EnumId id = getExistingIdForEnum(ei);
-      if (id != null) {
-        return id.intValue();
-      }
-
-      id = allocateEnumId(ei);
-
-      updateIdToEnumRegion(id, ei);
-
-      enumToId.put(ei, id);
-
-      return id.intValue();
-    } finally {
-      unlock();
-    }
+    return defineEnum(new EnumInfo(v));
-  public int defineEnum(EnumInfo newInfo) {
+  public int defineEnum(final EnumInfo newInfo) {
+    statistics.enumDefined();
-    EnumId existingId = enumToId.get(newInfo);
+    final EnumId existingId = enumToId.get(newInfo);
