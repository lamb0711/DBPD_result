GEODE-6588: Cleanup generics and static analyzer warnings.

+
-  public ServerRegionFunctionExecutor(Region r, ProxyCache proxyCache) {
+  ServerRegionFunctionExecutor(Region r, ProxyCache proxyCache) {
-    this.region = (LocalRegion) r;
+    region = (LocalRegion) r;
-    this.region = serverRegionFunctionExecutor.region;
-    this.filter.clear();
-    this.filter.addAll(serverRegionFunctionExecutor.filter);
+    region = serverRegionFunctionExecutor.region;
+    filter.clear();
+    filter.addAll(serverRegionFunctionExecutor.filter);
-    this.executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
+    executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
-    this.region = serverRegionFunctionExecutor.region;
-    this.filter.clear();
-    this.filter.addAll(serverRegionFunctionExecutor.filter);
-    this.memberMappedArg = memberMapargs;
-    this.executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
+    region = serverRegionFunctionExecutor.region;
+    filter.clear();
+    filter.addAll(serverRegionFunctionExecutor.filter);
+    memberMappedArg = memberMapargs;
+    executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
-    this.region = serverRegionFunctionExecutor.region;
-    this.filter.clear();
-    this.filter.addAll(serverRegionFunctionExecutor.filter);
+    region = serverRegionFunctionExecutor.region;
+    filter.clear();
+    filter.addAll(serverRegionFunctionExecutor.filter);
-    this.executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
+    executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
-    this.region = serverRegionFunctionExecutor.region;
-    this.filter.clear();
-    this.filter.addAll(filter2);
-    this.executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
+    region = serverRegionFunctionExecutor.region;
+    filter.clear();
+    filter.addAll(filter2);
+    executeOnBucketSet = serverRegionFunctionExecutor.executeOnBucketSet;
-    this.region = serverRegionFunctionExecutor.region;
-    this.filter.clear();
-    this.filter.addAll(bucketsAsFilter);
+    region = serverRegionFunctionExecutor.region;
+    filter.clear();
+    filter.addAll(bucketsAsFilter);
-    this.executeOnBucketSet = false;
+    executeOnBucketSet = false;
-        if (this.proxyCache.isClosed()) {
+        if (proxyCache.isClosed()) {
-        UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());
+        UserAttributes.userAttributes.set(proxyCache.getUserAttributes());
-        if (this.rc == null) { // Default Result Collector
+        if (rc == null) { // Default Result Collector
-          return executeOnServer(function, this.rc, hasResult);
+          return executeOnServer(function, rc, hasResult);
-        if (this.proxyCache.isClosed()) {
+        if (proxyCache.isClosed()) {
-        UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());
+        UserAttributes.userAttributes.set(proxyCache.getUserAttributes());
-        if (this.rc == null) { // Default Result Collector
+        if (rc == null) { // Default Result Collector
-          return executeOnServer(functionId, this.rc, hasResult, isHA, optimizeForWrite);
+          return executeOnServer(functionId, rc, hasResult, isHA, optimizeForWrite);
-    FunctionStats stats = FunctionStats.getFunctionStats(function.getId(), this.region.getSystem());
+    FunctionStats stats = FunctionStats.getFunctionStats(function.getId(), region.getSystem());
-      srp.executeFunction(this.region.getFullPath(), function, this, collector, hasResult, false);
+      srp.executeFunction(region.getFullPath(), function, this, collector, hasResult, false);
-    FunctionStats stats = FunctionStats.getFunctionStats(functionId, this.region.getSystem());
+    FunctionStats stats = FunctionStats.getFunctionStats(functionId, region.getSystem());
-      srp.executeFunction(this.region.getFullPath(), functionId, this, collector, hasResult, isHA,
+      srp.executeFunction(region.getFullPath(), functionId, this, collector, hasResult, isHA,
-    FunctionStats stats = FunctionStats.getFunctionStats(function.getId(), this.region.getSystem());
+    FunctionStats stats = FunctionStats.getFunctionStats(function.getId(), region.getSystem());
-      srp.executeFunctionNoAck(this.region.getFullPath(), function, this, hasResult, false);
+      srp.executeFunctionNoAck(region.getFullPath(), function, this, hasResult, false);
-    FunctionStats stats = FunctionStats.getFunctionStats(functionId, this.region.getSystem());
+    FunctionStats stats = FunctionStats.getFunctionStats(functionId, region.getSystem());
-      srp.executeFunctionNoAck(this.region.getFullPath(), functionId, this, hasResult, isHA,
+      srp.executeFunctionNoAck(region.getFullPath(), functionId, this, hasResult, isHA,
-      StringBuilder message = new StringBuilder();
-      message.append(srp).append(": ");
-      message
-          .append(
-              "No available connection was found. Server Region Proxy is not available for this region ")
-          .append(region.getName());
-      throw new FunctionException(message.toString());
+      String message = srp + ": "
+          + "No available connection was found. Server Region Proxy is not available for this region "
+          + region.getName();
+      throw new FunctionException(message);
-    return this.region;
+    return region;
-    return new StringBuffer().append("[ ServerRegionExecutor:").append("args=").append(this.args)
-        .append(" ;filter=").append(this.filter).append(" ;region=").append(this.region.getName())
-        .append("]").toString();
+    return "[ ServerRegionExecutor:" + "args=" + args + " ;filter=" + filter + " ;region="
+        + region.getName() + "]";
-    this.isFnSerializationReqd = false;
+    isFnSerializationReqd = false;
-            if (this.proxyCache.isClosed()) {
+            if (proxyCache.isClosed()) {
-            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());
+            UserAttributes.userAttributes.set(proxyCache.getUserAttributes());
-    return this.executeOnBucketSet;
+    return executeOnBucketSet;
