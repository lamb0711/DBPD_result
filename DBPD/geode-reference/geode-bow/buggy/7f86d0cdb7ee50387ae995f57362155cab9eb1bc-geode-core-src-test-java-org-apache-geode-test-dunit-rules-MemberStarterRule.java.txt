GEODE-3231: withLogFile does not imply withWorkingDir anymore

-  protected transient TemporaryFolder temporaryFolder;
+  protected transient TemporaryFolder temporaryFolder;
-    this(null);
-  }
-
-  // Not meant to be public, only used by LocatorServerStartupRule
-  MemberStarterRule(File workDir) {
-    workingDir = workDir;
-    if (workDir != null) {
-      withWorkingDir();
-    }
+
+  public T withWorkingDir(File workingDir) {
+    this.workingDir = workingDir;
+    if (workingDir != null) {
+      System.setProperty("user.dir", workingDir.toString());
+    }
+    return (T) this;
+  }
+
+  /**
+   * create a working dir using temporaryFolder. Use with caution, this sets "user.dir" system
+   * property that not approved by JDK
+   */
+  public T withWorkingDir() {
+    temporaryFolder = new TemporaryFolder();
+    try {
+      temporaryFolder.create();
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
+    withWorkingDir(temporaryFolder.getRoot().getAbsoluteFile());
+    return (T) this;
+  }
+
+  /**
+   * All the logs are written in the logfile instead on the console. this is usually used with
+   * withWorkingDir so that logs are accessible and will be cleaned up afterwards.
+   */
+  public T withLogFile() {
+    this.logFile = true;
+    return (T) this;
+  }
+
+    if (temporaryFolder != null) {
+      temporaryFolder.delete();
+    }
+
-
-    if (temporaryFolder != null) {
-      temporaryFolder.delete();
-    }
-  /**
-   * this will make the logging to into a log file instead of on the console.
-   *
-   * Use with caution, the logs files are created in a temp working directory. this is achieved by
-   * dynamically changing the "user.dir" system property.
-   * 
-   * @return
-   */
-  public T withLogFile() {
-    this.logFile = true;
-    return (T) this;
-  }
-
-  // Not meant to be public, only used by LocatorServerStartupRule
-  T withLogFile(boolean logFile) {
-    this.logFile = logFile;
-    return (T) this;
-  }
-
-  /**
-   * create the working dir using temporaryFolder. Use with caution, this sets "user.dir" system
-   * property that not approved by JDK
-   */
-  public T withWorkingDir() {
-    if (workingDir == null) {
-      temporaryFolder = new TemporaryFolder();
-      try {
-        temporaryFolder.create();
-      } catch (IOException e) {
-        throw new RuntimeException(e.getMessage(), e);
-      }
-      workingDir = temporaryFolder.getRoot().getAbsoluteFile();
-    }
-
-    System.setProperty("user.dir", workingDir.toString());
-    return (T) this;
-  }
-
-    // do it here since only here, we can gurantee the name is present
+    // do it here since only here, we can guarantee the name is present
-      // if working dir is not created yet, creates it.
-      if (workingDir == null) {
-        withWorkingDir();
-      }
