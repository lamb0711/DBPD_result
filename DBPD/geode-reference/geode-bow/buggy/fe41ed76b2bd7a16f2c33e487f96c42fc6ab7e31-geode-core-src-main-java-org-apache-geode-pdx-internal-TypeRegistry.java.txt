GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import static java.lang.Integer.*;
+
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicReference;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
-import org.apache.logging.log4j.Logger;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicReference;
-
-  private final Map<Integer, PdxType> idToType = new CopyOnWriteHashMap<Integer, PdxType>();
-  private final Map<PdxType, Integer> typeToId = new CopyOnWriteHashMap<PdxType, Integer>();
-  private final Map<Class<?>, PdxType> localTypeIds =
-      new CopyOnWriteWeakHashMap<Class<?>, PdxType>();
+  private final Map<Integer, PdxType> idToType = new CopyOnWriteHashMap<>();
+
+  private final Map<PdxType, Integer> typeToId = new CopyOnWriteHashMap<>();
+
+  private final Map<Class<?>, PdxType> localTypeIds = new CopyOnWriteWeakHashMap<>();
+
-      new CopyOnWriteWeakHashMap<Class<?>, Map<Integer, UnreadPdxType>>();
+      new CopyOnWriteWeakHashMap<>();
+
-  private final Map<Integer, EnumInfo> idToEnum = new CopyOnWriteHashMap<Integer, EnumInfo>();
-  private final Map<EnumInfo, Integer> enumInfoToId = new CopyOnWriteHashMap<EnumInfo, Integer>();
-  private final Map<Enum<?>, Integer> localEnumIds = new CopyOnWriteWeakHashMap<Enum<?>, Integer>();
-  private final TypeRegistration distributedTypeRegistry;
-  private final GemFireCacheImpl cache;
-  public TypeRegistry(GemFireCacheImpl cache, boolean disableTypeRegistry) {
+  private final Map<Integer, EnumInfo> idToEnum = new CopyOnWriteHashMap<>();
+
+  private final Map<EnumInfo, Integer> enumInfoToId = new CopyOnWriteHashMap<>();
+
+  private final Map<Enum<?>, Integer> localEnumIds = new CopyOnWriteWeakHashMap<>();
+
+  private final TypeRegistration distributedTypeRegistry;
+
+  private final InternalCache cache;
+
+  public TypeRegistry(InternalCache cache, boolean disableTypeRegistry) {
-      distributedTypeRegistry = new NullTypeRegistration();
+      this.distributedTypeRegistry = new NullTypeRegistration();
-      distributedTypeRegistry = new ClientTypeRegistration(cache);
+      this.distributedTypeRegistry = new ClientTypeRegistration(cache);
-      distributedTypeRegistry = new LonerTypeRegistration(cache);
+      this.distributedTypeRegistry = new LonerTypeRegistration(cache);
-      distributedTypeRegistry = new PeerTypeRegistration(cache);
+      this.distributedTypeRegistry = new PeerTypeRegistration(cache);
-    distributedTypeRegistry.testClearRegistry();
+    this.distributedTypeRegistry.testClearRegistry();
-  public static boolean mayNeedDiskStore(GemFireCacheImpl cache) {
-    if (DISABLE_TYPE_REGISTRY) {
-      return false;
-    } else if (cache.hasPool()) {
-      return false;
-    } else {
-      return cache.getPdxPersistent();
-    }
+  public static boolean mayNeedDiskStore(InternalCache cache) {
+    return !DISABLE_TYPE_REGISTRY && !cache.hasPool() && cache.getPdxPersistent();
-  public static String getPdxDiskStoreName(GemFireCacheImpl cache) {
+  public static String getPdxDiskStoreName(InternalCache cache) {
-    if (!cache.getPdxPersistent() || cache.getPdxDiskStore() == null
-        || cache.findDiskStore(cache.getPdxDiskStore()) != null) {
-      distributedTypeRegistry.initialize();
+    if (!this.cache.getPdxPersistent() || this.cache.getPdxDiskStore() == null
+        || this.cache.findDiskStore(this.cache.getPdxDiskStore()) != null) {
+      this.distributedTypeRegistry.initialize();
-
-  public PdxType getExistingType(Object o) {
+  PdxType getExistingType(Object o) {
-  public PdxType getExistingTypeForClass(Class<?> c) {
-    return this.localTypeIds.get(c);
+  public PdxType getExistingTypeForClass(Class<?> aClass) {
+    return this.localTypeIds.get(aClass);
-  public UnreadPdxType getExistingTypeForClass(Class<?> c, int typeId) {
-    Map<Integer, UnreadPdxType> m = this.localTypeIdMaps.get(c);
-    if (m != null) {
-      return m.get(typeId);
+  UnreadPdxType getExistingTypeForClass(Class<?> aClass, int typeId) {
+    Map<Integer, UnreadPdxType> map = this.localTypeIdMaps.get(aClass);
+    if (map != null) {
+      return map.get(typeId);
-  public void defineUnreadType(Class<?> c, UnreadPdxType unreadPdxType) {
+  void defineUnreadType(Class<?> aClass, UnreadPdxType unreadPdxType) {
-      Map<Integer, UnreadPdxType> m = this.localTypeIdMaps.get(c);
-      if (m == null) {
-        m = new CopyOnWriteHashMap<Integer, UnreadPdxType>();
-        this.localTypeIdMaps.put(c, m);
+      Map<Integer, UnreadPdxType> map = this.localTypeIdMaps.get(aClass);
+      if (map == null) {
+        map = new CopyOnWriteHashMap<Integer, UnreadPdxType>();
+        this.localTypeIdMaps.put(aClass, map);
-      m.put(typeId, unreadPdxType);
+      map.put(typeId, unreadPdxType);
-      int eid = existingId.intValue();
+      int eid = existingId;
-    int id = distributedTypeRegistry.defineType(newType);
+
+    int id = this.distributedTypeRegistry.defineType(newType);
-  public PdxType defineLocalType(Object o, PdxType newType) {
+  PdxType defineLocalType(Object o, PdxType newType) {
-
-    return distributedTypeRegistry.getLastAllocatedTypeId();
+    return this.distributedTypeRegistry.getLastAllocatedTypeId();
-    return distributedTypeRegistry;
+    return this.distributedTypeRegistry;
-    if (distributedTypeRegistry != null) {
-      distributedTypeRegistry.gatewaySenderStarted(gatewaySender);
+    if (this.distributedTypeRegistry != null) {
+      this.distributedTypeRegistry.gatewaySenderStarted(gatewaySender);
-    if (cache.getPdxDiskStore() != null && dsi.getName().equals(cache.getPdxDiskStore())) {
-      distributedTypeRegistry.initialize();
+    if (this.cache.getPdxDiskStore() != null
+        && dsi.getName().equals(this.cache.getPdxDiskStore())) {
+      this.distributedTypeRegistry.initialize();
-    distributedTypeRegistry.creatingPersistentRegion();
+    this.distributedTypeRegistry.creatingPersistentRegion();
-    distributedTypeRegistry.creatingPool();
+    this.distributedTypeRegistry.creatingPool();
-  public PdxUnreadData getUnreadData(Object o) {
+  PdxUnreadData getUnreadData(Object o) {
-  public void putUnreadData(Object o, PdxUnreadData ud) {
+  void putUnreadData(Object o, PdxUnreadData ud) {
-  private static final AtomicReference<PdxSerializer> pdxSerializer =
-      new AtomicReference<PdxSerializer>(null);
-  private static final AtomicReference<AutoSerializableManager> asm =
-      new AtomicReference<AutoSerializableManager>(null);
+  private static final AtomicReference<PdxSerializer> pdxSerializer = new AtomicReference<>(null);
+
+  private static final AtomicReference<AutoSerializableManager> asm = new AtomicReference<>(null);
+
+
-        result = id.intValue();
+        result = id;
-        result = distributedTypeRegistry.getEnumId(v);
-        id = Integer.valueOf(result);
+        result = this.distributedTypeRegistry.getEnumId(v);
+        id = valueOf(result);
-      return existingId.intValue();
+      return existingId;
-    int id = distributedTypeRegistry.defineEnum(newInfo);
+    int id = this.distributedTypeRegistry.defineEnum(newInfo);
-    if (distributedTypeRegistry.isClient()) {
-      idToType.clear();
-      typeToId.clear();
-      localTypeIds.clear();
-      localTypeIdMaps.clear();
-      unreadDataMap.clear();
-      idToEnum.clear();
-      enumInfoToId.clear();
-      localEnumIds.clear();
+    if (this.distributedTypeRegistry.isClient()) {
+      this.idToType.clear();
+      this.typeToId.clear();
+      this.localTypeIds.clear();
+      this.localTypeIdMaps.clear();
+      this.unreadDataMap.clear();
+      this.idToEnum.clear();
+      this.enumInfoToId.clear();
+      this.localEnumIds.clear();
-
-    return distributedTypeRegistry.types();
+    return this.distributedTypeRegistry.types();
-    return distributedTypeRegistry.enums();
+    return this.distributedTypeRegistry.enums();
-  public PdxType getPdxTypeForField(String fieldName, String className) {
-    return distributedTypeRegistry.getPdxTypeForField(fieldName, className);
+  PdxType getPdxTypeForField(String fieldName, String className) {
+    return this.distributedTypeRegistry.getPdxTypeForField(fieldName, className);
-    int result = distributedTypeRegistry.getLocalSize();
+    int result = this.distributedTypeRegistry.getLocalSize();
-      return idToType.size();
+      return this.idToType.size();
