GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
-import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.Declarable;
-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionService;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.pdx.internal.TypeRegistry;
-import org.apache.logging.log4j.Logger;
-
+import java.io.FileNotFoundException;
+import java.net.MalformedURLException;
+import java.util.regex.Pattern;
+
+import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
+import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.Declarable;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.pdx.internal.TypeRegistry;
-  private final static Logger logger = LogService.getLogger();
-  private final static MessageDigest messageDigest = getMessageDigest();
+
+  private static final Logger logger = LogService.getLogger();
+  private static final MessageDigest messageDigest = getMessageDigest();
+  private static final byte[] ZERO_BYTES = new byte[0];
+  private static final Pattern PATTERN_SLASH = Pattern.compile("/");
-  private final Collection<Function> registeredFunctions = new ArrayList<Function>();
+  private final Collection<Function> registeredFunctions = new ArrayList<>();
-    } catch (NoSuchAlgorithmException nsaex) {
+    } catch (NoSuchAlgorithmException ignored) {
-    return JarDeployer.extractVersionFromFilename(file.getName());
+    return JarDeployer.extractVersionFromFilename(this.file.getName());
-      throws IOException {
+      throws FileNotFoundException {
-      valid = (jarInputStream.getNextJarEntry() != null);
+      valid = jarInputStream.getNextJarEntry() != null;
-      } catch (IOException ioex) {
+      } catch (IOException ignored) {
-  public static boolean hasValidJarContent(final byte[] jarBytes) {
+  static boolean hasValidJarContent(final byte[] jarBytes) {
-
-  public synchronized void loadClassesAndRegisterFunctions() throws ClassNotFoundException {
+  synchronized void loadClassesAndRegisterFunctions() throws ClassNotFoundException {
-          final String className = jarEntry.getName().replaceAll("/", "\\.").substring(0,
-              (jarEntry.getName().length() - 6));
+          final String className = PATTERN_SLASH.matcher(jarEntry.getName()).replaceAll("\\.")
+              .substring(0, jarEntry.getName().length() - 6);
-      TypeRegistry typeRegistry =
-          ((GemFireCacheImpl) CacheFactory.getAnyInstance()).getPdxRegistry();
+      TypeRegistry typeRegistry = ((InternalCache) CacheFactory.getAnyInstance()).getPdxRegistry();
-    } catch (CacheClosedException ccex) {
+    } catch (CacheClosedException ignored) {
-  public boolean hasSameContentAs(final byte[] compareToBytes) {
+  boolean hasSameContentAs(final byte[] compareToBytes) {
-    final List<Function> registerableFunctions = new ArrayList<Function>();
+    final List<Function> registerableFunctions = new ArrayList<>();
-            final List<Properties> propertiesList =
-                ((GemFireCacheImpl) CacheFactory.getAnyInstance())
-                    .getDeclarableProperties(clazz.getName());
+            final List<Properties> propertiesList = ((InternalCache) CacheFactory.getAnyInstance())
+                .getDeclarableProperties(clazz.getName());
-          } catch (CacheClosedException ccex) {
+          } catch (CacheClosedException ignored) {
-      logger.error("Attempting to register function from JAR file: " + this.file.getAbsolutePath(),
+      logger.error("Attempting to register function from JAR file: {}", this.file.getAbsolutePath(),
-    InputStream channelInputStream = null;
-      channelInputStream = new FileInputStream(this.file);
+      InputStream channelInputStream = new FileInputStream(this.file);
-      while (((bytesRead = channelInputStream.read(bytes)) != -1)) {
+      while ((bytesRead = channelInputStream.read(bytes)) != -1) {
-    return new byte[0];
+    return ZERO_BYTES;
-    } catch (IOException e) {
-      e.printStackTrace();
+    } catch (MalformedURLException e) {
+      logger.warn(e);
-    result = prime * result + ((this.jarName == null) ? 0 : this.jarName.hashCode());
+    result = prime * result + (this.jarName == null ? 0 : this.jarName.hashCode());
-    sb.append("@").append(System.identityHashCode(this)).append("{");
+    sb.append('@').append(System.identityHashCode(this)).append('{');
-    sb.append("}");
+    sb.append('}');
