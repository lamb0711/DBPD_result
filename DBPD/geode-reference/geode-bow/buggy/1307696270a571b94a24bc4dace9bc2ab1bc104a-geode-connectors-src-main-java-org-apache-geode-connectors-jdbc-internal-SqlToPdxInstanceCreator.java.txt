GEODE-4922: handle Date conversion (#1686)

When writing a java.util.Date the column type will be used 
to convert it to a java.sql.Date, java.sql.Time, or java.sql.Timestamp.
When reading a pdx DATE field, the column type will be used to
decide if getDate, getTime, or getTimestamp is called.
When reading a pdx OBJECT field, if getObject returns an instance of
java.sql.Date, java.sql.Time, or java.sql.Timestamp then it will be
converted to java.util.Date and that will be stored in the pdx field.
+import java.sql.Types;
-  private final String keyColumnName;
+  private final TableMetaDataView tableMetaData;
-      ResultSet resultSet, String keyColumnName) {
+      ResultSet resultSet, TableMetaDataView tableMetaData) {
-    this.keyColumnName = keyColumnName;
+    this.tableMetaData = tableMetaData;
-        if (regionMapping.isPrimaryKeyInValue() || !keyColumnName.equalsIgnoreCase(columnName)) {
+        if (regionMapping.isPrimaryKeyInValue()
+            || !tableMetaData.getKeyColumnName().equalsIgnoreCase(columnName)) {
-          writeField(factory, resultSet, i, fieldName, fieldType);
+          writeField(factory, resultSet, i, fieldName, fieldType, columnName);
-      String fieldName, FieldType fieldType) throws SQLException {
+      String fieldName, FieldType fieldType, String columnName) throws SQLException {
-      case DATE:
-        java.sql.Timestamp sqlDate = resultSet.getTimestamp(columnIndex);
+      case DATE: {
+        int columnType = this.tableMetaData.getColumnDataType(columnName);
+        java.util.Date sqlDate;
+        switch (columnType) {
+          case Types.DATE:
+            sqlDate = resultSet.getDate(columnIndex);
+            break;
+          case Types.TIME:
+          case Types.TIME_WITH_TIMEZONE:
+            sqlDate = resultSet.getTime(columnIndex);
+            break;
+          default:
+            sqlDate = resultSet.getTimestamp(columnIndex);
+            break;
+        }
+      }
-        factory.writeObject(fieldName, resultSet.getObject(columnIndex));
+        Object v = resultSet.getObject(columnIndex);
+        if (v instanceof java.util.Date) {
+          if (v instanceof java.sql.Date) {
+            java.sql.Date sqlDate = (java.sql.Date) v;
+            v = new java.util.Date(sqlDate.getTime());
+          } else if (v instanceof java.sql.Time) {
+            java.sql.Time sqlTime = (java.sql.Time) v;
+            v = new java.util.Date(sqlTime.getTime());
+          } else if (v instanceof java.sql.Timestamp) {
+            java.sql.Timestamp sqlTimestamp = (java.sql.Timestamp) v;
+            v = new java.util.Date(sqlTimestamp.getTime());
+          }
+        }
+        factory.writeObject(fieldName, v);
