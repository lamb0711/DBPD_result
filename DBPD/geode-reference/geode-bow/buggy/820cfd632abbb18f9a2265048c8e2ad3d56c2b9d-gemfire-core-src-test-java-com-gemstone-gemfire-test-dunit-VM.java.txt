GEODE-773: Extract static methods from DistributedTestCase

Refactor DistributedTestCase by extracting inner classes & interfaces into:
* IgnoredException
* StoppableWaitCriterion
* WaitCriterion

Refactor DistributedTestCase by extracting static methods into:
* Assert
* DebuggerUtils
* DistributedTestUtils
* Invoke
* Jitter
* LogWriterUtils
* NetworkUtils
* ThreadUtils
* Wait

Also:
* Rename variables for clarity
* Replace several uses of LogWriter with Logger
* Write and polish lots of javadocs
* Overhaul entire hierarchy of tearDown() methods across dunit tests

+import java.io.Serializable;
-import java.util.concurrent.Callable;
- *
-public class VM implements java.io.Serializable {
+@SuppressWarnings("serial")
+public class VM implements Serializable {
-  public VM(Host host, int pid, RemoteDUnitVMIF client) {
+  public VM(final Host host, final int pid, final RemoteDUnitVMIF client) {
-   * @param c
+   * @param targetClass
-  public Object invoke(Class c, String methodName) {
-    return invoke(c, methodName, new Object[0]);
+  public Object invoke(final Class targetClass, final String methodName) {
+    return invoke(targetClass, methodName, new Object[0]);
-   * @param c
+   * @param targetClass
-  public AsyncInvocation invokeAsync(Class c, String methodName) {
-    return invokeAsync(c, methodName, null);
+  public AsyncInvocation invokeAsync(final Class targetClass, final String methodName) {
+    return invokeAsync(targetClass, methodName, null);
-   * @param c
+   * @param targetClass
-  public Object invoke(Class c, String methodName, Object[] args) {
+  public Object invoke(Class targetClass, String methodName, Object[] args) {
-      throw new RMIException(this, c.getName(), methodName,
+      throw new RMIException(this, targetClass.getName(), methodName,
-      result = this.client.executeMethodOnClass(c.getName(), methodName, args);
+      result = this.client.executeMethodOnClass(targetClass.getName(), methodName, args);
-        throw new RMIException(this, c.getName(), methodName, e );
+        throw new RMIException(this, targetClass.getName(), methodName, e );
-      throw new RMIException(this, c.getName(), methodName, thr,
+      throw new RMIException(this, targetClass.getName(), methodName, thr,
-   * @param c
+   * @param targetClass
-  public AsyncInvocation invokeAsync(final Class c, 
+  public AsyncInvocation invokeAsync(final Class targetClass, 
-      new AsyncInvocation(c, methodName, new Runnable() {
+      new AsyncInvocation(targetClass, methodName, new Runnable() {
-          final Object o = invoke(c, methodName, args);
+          final Object o = invoke(targetClass, methodName, args);
-   * Invokes the <code>run</code method of a {@link Runnable} in this
+   * Invokes the <code>run</code> method of a {@link Runnable} in this
+   * 
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invoke(SerializableCallableIF)} instead.
-   * @param c
+   * @param targetClass
-  public void invokeMain(Class c, String[] args) {
+  public void invokeMain(Class targetClass, String[] args) {
-    invoke(c, "main", stupid);
+    invoke(targetClass, "main", stupid);
+  /** Return the total number of VMs on all hosts */
+  public static int getVMCount() {
+    int count = 0;
+    for (int h = 0; h < Host.getHostCount(); h++) {
+      Host host = Host.getHost(h);
+      count += host.getVMCount();
+    }
+    return count;
+  }
+
