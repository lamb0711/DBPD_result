GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
-
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.query.SelectResults;
+import org.apache.geode.internal.cache.InternalCache;
-  private Query query;
-  private IntOpenHashSet successfulBuckets;
+
+  private final Query query;
-
+  private ArrayList hints = null;
-  private ArrayList<String> hints = null;
-
-  /**
-   * @param bindArguments
-   * @param cache
-   */
-  public QueryExecutionContext(Object[] bindArguments, Cache cache) {
+  public QueryExecutionContext(Object[] bindArguments, InternalCache cache) {
+    this.query = null;
-
-
-  /**
-   * @param bindArguments
-   * @param cache
-   * @param query
-   */
-  public QueryExecutionContext(Object[] bindArguments, Cache cache, Query query) {
+  public QueryExecutionContext(Object[] bindArguments, InternalCache cache, Query query) {
-
-  // General purpose caching methods for data that is only valid for one
-  // query execution
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-
+  @Override
+  @Override
-    this.successfulBuckets = new IntOpenHashSet();
+  @Override
-  public void addToSuccessfulBuckets(int bId) {
-    this.successfulBuckets.add(bId);
-  }
-
-  public int[] getSuccessfulBuckets() {
-    return this.successfulBuckets.toIntArray();
-  }
-
+  @Override
-      bindArgumentToPdxStringMap = new HashMap<Integer, PdxString>();
+      bindArgumentToPdxStringMap = new HashMap<>();
-
-  public void setHints(ArrayList<String> hints) {
-    this.hints = new ArrayList();
+  private void setHints(ArrayList<String> hints) {
+    this.hints = new ArrayList<>();
-    return hints != null ? hints.contains(indexName) : false;
+    return hints != null && hints.contains(indexName);
-  public boolean hasHints() {
+  boolean hasHints() {
-  public boolean hasMultiHints() {
+  boolean hasMultiHints() {
