GEODE-2367: Lucene indexes do not handle ha scenarios

* Added afterSecondary callback to partition listener to allow cleaning up
  of the index repo when the bucket losses primary
* Added lock prior to creating the bucket indexes to prevent multiple index
  writers from being available at a time
* Changed single point of lucene index creation, no longer creating on the fly

+import java.util.concurrent.Callable;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
-  /**
-   * Return the repository for a given user bucket
-   */
-  protected IndexRepository getRepository(Integer bucketId) throws BucketNotFoundException {
-    IndexRepository repo = indexRepositories.get(bucketId);
-    if (repo != null && !repo.isClosed()) {
-      return repo;
-    }
-
-    repo = indexRepositories.compute(bucketId, (key, oldRepository) -> {
+  protected IndexRepository createRepository(Integer bucketId) throws BucketNotFoundException {
+    IndexRepository repo = indexRepositories.compute(bucketId, (key, oldRepository) -> {
+    return repo;
+  }
-    if (repo == null) {
-      throw new BucketNotFoundException(
-          "Colocated index buckets not found for bucket id " + bucketId);
+  /**
+   * Return the repository for a given user bucket
+   */
+  protected IndexRepository getRepository(Integer bucketId) throws BucketNotFoundException {
+    IndexRepository repo = indexRepositories.get(bucketId);
+    if (repo != null && !repo.isClosed()) {
+      return repo;
-    return repo;
+    throw new BucketNotFoundException(
+        "Colocated index buckets not found for bucket id " + bucketId);
+  }
+
+  protected void cleanRepository(Integer bucketId) throws BucketNotFoundException {
+    IndexRepository repo = indexRepositories.remove(bucketId);
+    if (repo != null) {
+      repo.cleanup();
+    }
