GEODE-6918: Cleanup InternalLocator use of workingDirectory (#3782)

* Pass workingDirectory to InternalConfigurationPersistenceService
* Fixup InternalConfigurationPersistenceService constructors
* Create InternalLocatorIntegrationTest
* Use Path instead of String or File
* Cleanup InternalConfigurationPersistenceService and JAXBService

-import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_CONFIGURATION_DIR;
-import java.nio.file.Paths;
-import org.apache.commons.io.FilenameUtils;
-import org.apache.geode.cache.configuration.XSDRootElement;
-import org.apache.geode.internal.lang.SystemPropertyHelper;
-import org.apache.geode.management.internal.cli.util.ClasspathScanLoadHelper;
-@SuppressWarnings({"deprecation", "unchecked"})
-  private final String configDirPath;
-  private final String configDiskDirPath;
+  private final Path configDirPath;
+  private final Path configDiskDirPath;
-  private DistributedLockService sharedConfigLockingService;
-  private JAXBService jaxbService;
+  private final DistributedLockService sharedConfigLockingService;
+  private final JAXBService jaxbService;
-  @VisibleForTesting
-  InternalConfigurationPersistenceService(Class<?>... xsdClasses) {
-    configDirPath = null;
-    configDiskDirPath = null;
-    cache = null;
-    jaxbService = new JAXBService(xsdClasses);
-    jaxbService.validateWithLocalCacheXSD();
+  public InternalConfigurationPersistenceService(InternalCache cache, Path workingDirectory,
+      JAXBService jaxbService) {
+    this(cache,
+        sharedConfigLockService(cache.getDistributedSystem()),
+        jaxbService,
+        workingDirectory.resolve(CLUSTER_CONFIG_ARTIFACTS_DIR_NAME),
+        workingDirectory
+            .resolve(CLUSTER_CONFIG_DISK_DIR_PREFIX + cache.getDistributedSystem().getName()));
-  InternalConfigurationPersistenceService() {
-    configDirPath = null;
-    configDiskDirPath = null;
-    cache = null;
-    jaxbService = new JAXBService(CacheConfig.class);
+  public InternalConfigurationPersistenceService(JAXBService jaxbService) {
+    this(null, null, jaxbService, null, null);
-  public JAXBService getJaxbService() {
-    return jaxbService;
-  }
-
-  public InternalConfigurationPersistenceService(InternalCache cache, Class<?>... xsdClasses)
-      throws IOException {
+  private InternalConfigurationPersistenceService(InternalCache cache,
+      DistributedLockService sharedConfigLockingService, JAXBService jaxbService,
+      Path configDirPath, Path configDiskDirPath) {
-    Properties properties = cache.getDistributedSystem().getProperties();
-    // resolve the cluster config dir
-    String clusterConfigRootDir = properties.getProperty(CLUSTER_CONFIGURATION_DIR);
-
-    if (StringUtils.isBlank(clusterConfigRootDir)) {
-      clusterConfigRootDir = System.getProperty("user.dir");
-    } else {
-      File diskDir = new File(clusterConfigRootDir);
-      if (!diskDir.exists() && !diskDir.mkdirs()) {
-        throw new IOException("Cannot create directory : " + clusterConfigRootDir);
-      }
-      clusterConfigRootDir = diskDir.getCanonicalPath();
-    }
-    clusterConfigRootDir = new File(clusterConfigRootDir).getAbsolutePath();
-
-    // resolve the file paths
-    String configDiskDirName =
-        CLUSTER_CONFIG_DISK_DIR_PREFIX + cache.getDistributedSystem().getName();
-
-    this.configDirPath =
-        FilenameUtils.concat(clusterConfigRootDir, CLUSTER_CONFIG_ARTIFACTS_DIR_NAME);
-    this.configDiskDirPath = FilenameUtils.concat(clusterConfigRootDir, configDiskDirName);
-    this.sharedConfigLockingService = getSharedConfigLockService(cache.getDistributedSystem());
-    this.status.set(SharedConfigurationStatus.NOT_STARTED);
-    if (xsdClasses != null && xsdClasses.length > 0) {
-      this.jaxbService = new JAXBService(xsdClasses);
-    }
-    // else, scan the classpath to find all the classes annotated with XSDRootElement
-    else {
-      Set<String> packages = getPackagesToScan();
-      try (ClasspathScanLoadHelper scanner = new ClasspathScanLoadHelper(packages)) {
-        Set<Class<?>> scannedClasses = scanner.scanClasspathForAnnotation(XSDRootElement.class,
-            packages.toArray(new String[] {}));
-        this.jaxbService =
-            new JAXBService(scannedClasses.toArray(new Class[scannedClasses.size()]));
-      }
-    }
-    jaxbService.validateWithLocalCacheXSD();
-  }
-
-  protected Set<String> getPackagesToScan() {
-    Set<String> packages = new HashSet<>();
-    String sysProperty = SystemPropertyHelper.getProperty(SystemPropertyHelper.PACKAGES_TO_SCAN);
-    if (sysProperty != null) {
-      packages = Arrays.stream(sysProperty.split(",")).collect(Collectors.toSet());
-    } else {
-      packages.add("*");
-    }
-    return packages;
+    this.configDirPath = configDirPath;
+    this.configDiskDirPath = configDiskDirPath;
+    this.sharedConfigLockingService = sharedConfigLockingService;
+    status.set(SharedConfigurationStatus.NOT_STARTED);
+    this.jaxbService = jaxbService;
-  private DistributedLockService getSharedConfigLockService(DistributedSystem ds) {
+  private static DistributedLockService sharedConfigLockService(DistributedSystem ds) {
+  public JAXBService getJaxbService() {
+    return jaxbService;
+  }
+
-        String groupDir = FilenameUtils.concat(this.configDirPath, group);
+        Path groupDir = configDirPath.resolve(group);
-          String filePath = FilenameUtils.concat(groupDir, stagedJar.getName());
-          File jarFile = new File(filePath);
-          FileUtils.copyFile(stagedJar, jarFile);
+          Path filePath = groupDir.resolve(stagedJar.getName());
+          FileUtils.copyFile(stagedJar, filePath.toFile());
-          File jar = this.getPathToJarOnThisLocator(group, jarRemoved).toFile();
+          File jar = getPathToJarOnThisLocator(group, jarRemoved).toFile();
-    DistributionManager dm = this.cache.getDistributionManager();
-    DistributedMember me = this.cache.getMyId();
+    DistributionManager dm = cache.getDistributionManager();
+    DistributedMember me = cache.getMyId();
-    this.status.set(SharedConfigurationStatus.STARTED);
-    Region<String, Configuration> configRegion = this.getConfigurationRegion();
+    status.set(SharedConfigurationStatus.STARTED);
+    Region<String, Configuration> configRegion = getConfigurationRegion();
-        loadSharedConfigurationFromDir(new File(this.configDirPath));
+        loadSharedConfigurationFromDir(configDirPath.toFile());
-    this.status.set(SharedConfigurationStatus.RUNNING);
+    status.set(SharedConfigurationStatus.RUNNING);
-    Properties securityProps = this.cache.getDistributedSystem().getSecurityProperties();
+    Properties securityProps = cache.getDistributedSystem().getSecurityProperties();
-    response.addWaitingLocatorInfo(this.newerSharedConfigurationLocatorInfo);
+    response.addWaitingLocatorInfo(newerSharedConfigurationLocatorInfo);
-      DiskStore configDiskStore = this.cache.findDiskStore(CLUSTER_CONFIG_ARTIFACTS_DIR_NAME);
+      DiskStore configDiskStore = cache.findDiskStore(CLUSTER_CONFIG_ARTIFACTS_DIR_NAME);
-        File file = new File(this.configDiskDirPath);
-        FileUtils.deleteDirectory(file);
-      FileUtils.deleteDirectory(new File(this.configDirPath));
+      FileUtils.deleteDirectory(configDirPath.toFile());
-    return new File(this.configDirPath).toPath().resolve(groupName).resolve(jarName);
+    return configDirPath.resolve(groupName).resolve(jarName);
-  /**
-   * Returns the path of Shared configuration directory
-   *
-   * @return {@link String} path of the shared configuration directory
-   */
-  public String getSharedConfigurationDirPath() {
-    return configDirPath;
-  }
-
-    return Paths.get(configDirPath);
+    return configDirPath;
-    SharedConfigurationStatus scStatus = this.status.get();
+    SharedConfigurationStatus scStatus = status.get();
-      PersistentMemberManager pmm = this.cache.getPersistentMemberManager();
+      PersistentMemberManager pmm = cache.getPersistentMemberManager();
-        this.status.compareAndSet(SharedConfigurationStatus.STARTED,
+        status.compareAndSet(SharedConfigurationStatus.STARTED,
-          this.newerSharedConfigurationLocatorInfo.add(new PersistentMemberPattern(persMemId));
+          newerSharedConfigurationLocatorInfo.add(new PersistentMemberPattern(persMemId));
-    return this.status.get();
+    return status.get();
-      if (configDir.getAbsolutePath().equals(getSharedConfigurationDirPath())) {
+      if (configDir.getAbsolutePath().equals(configDirPath)) {
-    if (rootDir.getAbsolutePath().equals(getSharedConfigurationDirPath())) {
+    if (rootDir.getAbsolutePath().equals(configDirPath)) {
-    File locatorConfigDir =
-        new File(getSharedConfigurationDirPath(), configuration.getConfigName());
+    File locatorConfigDir = configDirPath.resolve(configuration.getConfigName()).toFile();
-    return this.sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME, -1, -1);
+    return sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME, -1, -1);
-    this.sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);
+    sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);
-    Region<String, Configuration> configRegion = this.cache.getRegion(CONFIG_REGION_NAME);
+    Region<String, Configuration> configRegion = cache.getRegion(CONFIG_REGION_NAME);
-        File diskDir = new File(this.configDiskDirPath);
+        File diskDir = configDiskDirPath.toFile();
-        if (!diskDir.exists()) {
-          if (!diskDir.mkdirs()) {
-            // TODO: throw caught by containing try statement
-            throw new IOException("Cannot create directory at " + this.configDiskDirPath);
-          }
+        if (!diskDir.exists() && !diskDir.mkdirs()) {
+          throw new IOException("Cannot create directory at " + configDiskDirPath);
-        this.cache.createDiskStoreFactory().setDiskDirs(diskDirs).setAutoCompact(true)
+        cache.createDiskStoreFactory().setDiskDirs(diskDirs).setAutoCompact(true)
-        configRegion = this.cache.createVMRegion(CONFIG_REGION_NAME, regionAttrsFactory.create(),
+        configRegion = cache.createVMRegion(CONFIG_REGION_NAME, regionAttrsFactory.create(),
-        this.status.set(SharedConfigurationStatus.STOPPED);
+        status.set(SharedConfigurationStatus.STOPPED);
-        this.status.set(SharedConfigurationStatus.STOPPED);
+        status.set(SharedConfigurationStatus.STOPPED);
-    return createConfigDirIfNecessary(new File(getSharedConfigurationDirPath()), configName);
+    return createConfigDirIfNecessary(configDirPath.toFile(), configName);
-    if (!clusterConfigDir.exists()) {
-      if (!clusterConfigDir.mkdirs()) {
-        throw new IOException("Cannot create directory : " + getSharedConfigurationDirPath());
-      }
+    if (!clusterConfigDir.exists() && !clusterConfigDir.mkdirs()) {
+      throw new IOException("Cannot create directory : " + configDirPath);
-    if (!configDir.exists()) {
-      if (!configDir.mkdir()) {
-        throw new IOException("Cannot create directory : " + configDirPath);
-      }
+    if (!configDir.exists() && !configDir.mkdir()) {
+      throw new IOException("Cannot create directory : " + configDirPath);
