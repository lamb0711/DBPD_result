GEODE-7010: Replace static globals in CachePerfStats with StatisticsClock (#3859)

* Replace CachePerfStats.getStatTime with Cache owned StatisticsClock
* Inject StatisticsClock dependency via constructor

-import org.apache.geode.distributed.internal.CacheTime;
+import org.apache.geode.internal.statistics.StatisticsClock;
+import org.apache.geode.internal.statistics.StatisticsClockFactory;
+import org.apache.geode.internal.statistics.StatisticsClockSupplier;
-    DistributionAdvisee, CacheTime {
+    DistributionAdvisee, StatisticsClockSupplier {
+  private final StatisticsClock statisticsClock;
+
-      CachePerfStats.enableClockStats = system.getConfig().getEnableTimeStatistics();
-      cachePerfStats = new CachePerfStats(internalDistributedSystem.getStatisticsManager());
+      statisticsClock = StatisticsClockFactory.clock(system.getConfig().getEnableTimeStatistics());
+      cachePerfStats = new CachePerfStats(
+          internalDistributedSystem.getStatisticsManager(), statisticsClock);
-      transactionManager = new TXManagerImpl(cachePerfStats, this);
+      transactionManager = new TXManagerImpl(cachePerfStats, this, statisticsClock);
-        heapEvictor = new HeapEvictor(this);
+        heapEvictor = new HeapEvictor(this, statisticsClock);
-        offHeapEvictor = new OffHeapEvictor(this);
+        offHeapEvictor = new OffHeapEvictor(this, statisticsClock);
-              region = new PartitionedRegion(name, attrs, null, this, internalRegionArgs);
+              region = new PartitionedRegion(name, attrs, null, this, internalRegionArgs,
+                  statisticsClock);
-                region = new LocalRegion(name, attrs, null, this, internalRegionArgs);
+                region =
+                    new LocalRegion(name, attrs, null, this, internalRegionArgs, statisticsClock);
-                region = new DistributedRegion(name, attrs, null, this, internalRegionArgs);
+                region = new DistributedRegion(name, attrs, null, this, internalRegionArgs,
+                    statisticsClock);
-    InternalCacheServer server = new ServerBuilder(this, securityService).createServer();
+    InternalCacheServer server = new ServerBuilder(this, securityService,
+        StatisticsClockFactory.disabledClock()).createServer();
-    InternalCacheServer receiverServer = new ServerBuilder(this, securityService)
-        .forGatewayReceiver(receiver).createServer();
+    InternalCacheServer receiverServer = new ServerBuilder(this, securityService,
+        StatisticsClockFactory.disabledClock())
+            .forGatewayReceiver(receiver).createServer();
+  /**
+   * Feature factories may use this supplier to acquire the {@code StatisticsClock} which is
+   * created by the Cache as configured by {@link DistributionConfig#getEnableTimeStatistics()}.
+   *
+   * <p>
+   * Please pass the {@code StatisticsClock} through constructors where possible instead of
+   * accessing it from this supplier.
+   */
+  public StatisticsClock getStatisticsClock() {
+    return statisticsClock;
+  }
