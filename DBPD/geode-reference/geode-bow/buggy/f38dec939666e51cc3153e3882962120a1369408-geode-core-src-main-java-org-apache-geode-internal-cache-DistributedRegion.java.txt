GEODE-6853: Do not request region sync during message processing. (#3696)

* Move schedule region synchronize message to DistriubtedRegion.
 * Use the time task to request region sync with no deplay when processing reion sync message.
+import org.apache.geode.internal.SystemTimer;
+  public void scheduleSynchronizeForLostMember(InternalDistributedMember member,
+      VersionSource lostVersionID, long delay) {
+    getGemFireCache().getCCPTimer().schedule(new SystemTimer.SystemTimerTask() {
+      @Override
+      public void run2() {
+        performSynchronizeForLostMemberTask(member, lostVersionID);
+      }
+    }, delay);
+  }
+
+  void performSynchronizeForLostMemberTask(InternalDistributedMember member,
+      VersionSource lostVersionID) {
+    waitUntilInitialized();
+
+    if (getDataPolicy().withPersistence() && getPersistentID() == null) {
+      // Fix for 46704. The lost member may be a replicate
+      // or an empty accessor. We don't need to do a synchronization
+      // in that case, because those members send their writes to
+      // a persistent member.
+      if (logger.isDebugEnabled()) {
+        logger.debug(
+            "da.syncForCrashedMember skipping sync because crashed member is not persistent: {}",
+            member);
+      }
+      return;
+    }
+    synchronizeForLostMember(member, lostVersionID);
+  }
+
-  public void synchronizeForLostMember(InternalDistributedMember lostMember,
+  void synchronizeForLostMember(InternalDistributedMember lostMember,
+  void waitUntilInitialized() {
+    while (!isInitialized()) {
+      if (isDestroyed()) {
+        return;
+      } else {
+        try {
+          if (logger.isDebugEnabled()) {
+            logger.debug(
+                "da.syncForCrashedMember waiting for region to finish initializing: {}", this);
+          }
+          Thread.sleep(100);
+        } catch (InterruptedException e) {
+          return;
+        }
+      }
+    }
+  }
+
