install the messenger's JGAddress into the JGroups stack so it will be transmitted with messages.  Add conversion from JGAddress to GMSMember and InternalDistributedMember for setting the sender of a message.  This shortens the length of JGroups messages by removing the GMSMember that was being serialized at the beginning of every message.

-import java.util.Timer;
-  private volatile JGroupsQuorumChecker quorumChecker;
+  private volatile QuorumChecker quorumChecker;
-   * A general use timer
-   */
-  private Timer timer = new Timer("Membership Timer", true);
-  
-  
-  /**
-    this.timer.cancel();
-    
-  private Set directChannelSend(InternalDistributedMember[] destinations,
+  private Set<InternalDistributedMember> directChannelSend(InternalDistributedMember[] destinations,
-      com.gemstone.gemfire.distributed.internal.DistributionStats theStats)
+      DMStats theStats)
-      return new HashSet(members);
+      return new HashSet<InternalDistributedMember>(members);
-  public JGroupsQuorumChecker getQuorumCheckerImpl() {
+  public QuorumChecker getQuorumCheckerImpl() {
-      // TODO: we really need JChannel instead of a datagram socket because jgroup
-      // doesn't have the "ping" handling that I built into the TP protocol.  Maybe we should just
-      // keep the JGroupsMessenger and use it to send PingMessages.  We'd want to
-      // bypass UNICAST and wipe out all message handlers except for the Pings.
+      // TODO: creation of the quorum checker should be delegated to the
+      // Messenger component.  For JGroups we we really need JChannel instead
+      // of a datagram socket because jgroup
+      // doesn't have the "ping" handling that I built into the TP protocol.s
-      com.gemstone.gemfire.distributed.internal.DistributionStats theStats)
+      DMStats theStats)
-  /**
-   * returns the general purpose membership timer
-   */
-  public Timer getTimer() {
-    return this.timer;
-  }
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("MembershipManager: initial view is {}", latestView);
-      }
+      logger.debug("MembershipManager: initial view is {}", latestView);
-  public void send(DistributionMessage m) {
-    // TODO Auto-generated method stub
-
-  }
-
-  @Override
-  public InternalDistributedMember getMemberID(NetMember m) {
-    // TODO Auto-generated method stub
-    return null;
+  public Set<InternalDistributedMember> send(DistributionMessage m) throws NotSerializableException {
+    return send(m.getRecipients(), m, this.services.getStatistics());
-    services.setSecurityLogWriter(writer);
+    Services.setSecurityLogWriter(writer);
