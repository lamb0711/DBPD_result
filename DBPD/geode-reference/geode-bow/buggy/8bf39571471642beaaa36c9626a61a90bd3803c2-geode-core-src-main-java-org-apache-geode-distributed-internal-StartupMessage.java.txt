Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message that is sent to all other distribution manager when
- * a distribution manager starts up.
+ * A message that is sent to all other distribution manager when a distribution manager starts up.
-public final class StartupMessage extends HighPriorityDistributionMessage implements AdminMessageType {
+public final class StartupMessage extends HighPriorityDistributionMessage
+    implements AdminMessageType {
-  
+
-  
+
-   * Determine all of the addresses that this host represents.  An empty list
-   * will be regarded as an error by all who see it.
+   * Determine all of the addresses that this host represents. An empty list will be regarded as an
+   * error by all who see it.
-      Set addresses =  SocketCreator.getMyAddresses();
+      Set addresses = SocketCreator.getMyAddresses();
-  
-  /** A list of errors that occurs while deserializing this message.
-   * See bug 31573. */
+
+  /**
+   * A list of errors that occurs while deserializing this message. See bug 31573.
+   */
-  
+
-  
+
+   * 
-  
-  ///////////////////////  Instance Methods  ///////////////////////
-  
+
+  /////////////////////// Instance Methods ///////////////////////
+
-  
+
+   * 
-  
+
+
-  
+
+
-  
+
-  
-//  void setHostedLocatorsWithSharedConfiguration(Collection<String> hostedLocatorsWithSharedConfiguration) {
-//    this.hostedLocatorsWithSharedConfiguration = hostedLocatorsWithSharedConfiguration;
-//  }
-  
+
+  // void setHostedLocatorsWithSharedConfiguration(Collection<String>
+  // hostedLocatorsWithSharedConfiguration) {
+  // this.hostedLocatorsWithSharedConfiguration = hostedLocatorsWithSharedConfiguration;
+  // }
+
+   * 
-    this.interfaces = interfaces; 
+    this.interfaces = interfaces;
-  
+
-  
+
-  
+
-   * Adds the distribution manager that is started up to the current
-   * DM's list of members.
+   * Adds the distribution manager that is started up to the current DM's list of members.
-    final boolean isAdminDM = dm.getId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE || dm.getId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE;
+    final boolean isAdminDM = dm.getId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE
+        || dm.getId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE;
-        LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_ISMCASTENABLED_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_IT_IS_ATTEMPTING_TO_JOIN
-        .toLocalizedString(new Object[] {getSender(), isMcastEnabled ? "enabled" : "disabled"});
-    }
-    else if (isMcastEnabled && dm.getSystem().getOriginalConfig().getMcastPort() != getMcastPort()) {
+          LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_ISMCASTENABLED_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_IT_IS_ATTEMPTING_TO_JOIN
+              .toLocalizedString(
+                  new Object[] {getSender(), isMcastEnabled ? "enabled" : "disabled"});
+    } else if (isMcastEnabled
+        && dm.getSystem().getOriginalConfig().getMcastPort() != getMcastPort()) {
-        LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_PORT_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
-        .toLocalizedString(new Object[] {getSender(), getMcastPort(), dm.getSystem().getOriginalConfig().getMcastPort()});
-    }
-    else if (isMcastEnabled && !checkMcastAddress(dm.getSystem().getOriginalConfig().getMcastAddress(), getMcastHostAddress())) {
+          LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_PORT_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
+              .toLocalizedString(new Object[] {getSender(), getMcastPort(),
+                  dm.getSystem().getOriginalConfig().getMcastPort()});
+    } else if (isMcastEnabled
+        && !checkMcastAddress(dm.getSystem().getOriginalConfig().getMcastAddress(),
+            getMcastHostAddress())) {
-        LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_ADDRESS_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
-        .toLocalizedString(new Object[] {getSender(), getMcastHostAddress(), dm.getSystem().getOriginalConfig().getMcastAddress()});
-        }
-    else if (dm.getTransport().isTcpDisabled() != isTcpDisabled) {           
+          LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_ADDRESS_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
+              .toLocalizedString(new Object[] {getSender(), getMcastHostAddress(),
+                  dm.getSystem().getOriginalConfig().getMcastAddress()});
+    } else if (dm.getTransport().isTcpDisabled() != isTcpDisabled) {
-          .toLocalizedString(new Object[] {getSender(), Boolean.valueOf(isTcpDisabled)});
+              .toLocalizedString(new Object[] {getSender(), Boolean.valueOf(isTcpDisabled)});
-             && distributedSystemId != dm.getDistributedSystemId()) {
-     
-     String distributedSystemListener = System
-         .getProperty(DistributionConfig.GEMFIRE_PREFIX + "DistributedSystemListener");
-     //this check is specific for Jayesh's use case of WAN BootStraping
-     if(distributedSystemListener != null){
-       if(-distributedSystemId != dm.getDistributedSystemId()){
-         rejectionMessage = LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(
-             new Object[] {getSender(), Integer.valueOf(distributedSystemId), dm.getDistributedSystemId()});
-       } 
-     }else{
-       rejectionMessage = LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(
-           new Object[] {getSender(), Integer.valueOf(distributedSystemId), dm.getDistributedSystemId()});
-     }
-   }
+        && distributedSystemId != dm.getDistributedSystemId()) {
+
+      String distributedSystemListener =
+          System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "DistributedSystemListener");
+      // this check is specific for Jayesh's use case of WAN BootStraping
+      if (distributedSystemListener != null) {
+        if (-distributedSystemId != dm.getDistributedSystemId()) {
+          rejectionMessage =
+              LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
+                  .toLocalizedString(new Object[] {getSender(),
+                      Integer.valueOf(distributedSystemId), dm.getDistributedSystemId()});
+        }
+      } else {
+        rejectionMessage =
+            LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN
+                .toLocalizedString(new Object[] {getSender(), Integer.valueOf(distributedSystemId),
+                    dm.getDistributedSystemId()});
+      }
+    }
-        final org.apache.geode.i18n.StringId msg = 
-          LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_PEER_HAS_NO_NETWORK_INTERFACES;
+        final org.apache.geode.i18n.StringId msg =
+            LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_PEER_HAS_NO_NETWORK_INTERFACES;
-      }
-      else {
+      } else {
-    
+
-    
+
-//        boolean isSharedConfigurationEnabled = false;
-//        if (this.hostedLocatorsWithSharedConfiguration != null) {
-//          isSharedConfigurationEnabled = true;
-//        }
-        dm.addHostedLocators(getSender(), this.hostedLocatorsAll, this.isSharedConfigurationEnabled);
+        // boolean isSharedConfigurationEnabled = false;
+        // if (this.hostedLocatorsWithSharedConfiguration != null) {
+        // isSharedConfigurationEnabled = true;
+        // }
+        dm.addHostedLocators(getSender(), this.hostedLocatorsAll,
+            this.isSharedConfigurationEnabled);
-    //Commenting out. See Bruces note in the StartupMessageData constructor. 
-    //Comparisons should use the functionality described in SerializationVersions 
-//    if (GemFireVersion.compareVersions(theirVersion,"6.6.2") >= 0) {
-      m = new StartupResponseWithVersionMessage(dm, replyProcessorId, getSender(), rejectionMessage, isAdminDM);
-//    } else {
-//      m = new StartupResponseMessage(dm, replyProcessorId, getSender(), rejectionMessage, isAdminDM);
-//    }
-      if (logger.isDebugEnabled()) {
-        logger.debug("Received StartupMessage from a member with version: {}, my version is:{}", theirVersion, myVersion);
-      }
+    // Commenting out. See Bruces note in the StartupMessageData constructor.
+    // Comparisons should use the functionality described in SerializationVersions
+    // if (GemFireVersion.compareVersions(theirVersion,"6.6.2") >= 0) {
+    m = new StartupResponseWithVersionMessage(dm, replyProcessorId, getSender(), rejectionMessage,
+        isAdminDM);
+    // } else {
+    // m = new StartupResponseMessage(dm, replyProcessorId, getSender(), rejectionMessage,
+    // isAdminDM);
+    // }
+    if (logger.isDebugEnabled()) {
+      logger.debug("Received StartupMessage from a member with version: {}, my version is:{}",
+          theirVersion, myVersion);
+    }
-    if (StringUtils.equals(myMcastHostAddr,otherMcastHostAddr)) return true;
-    if (myMcastHostAddr == null) return false;
+    if (StringUtils.equals(myMcastHostAddr, otherMcastHostAddr))
+      return true;
+    if (myMcastHostAddr == null)
+      return false;
-  
+
-        instantiatorClassName = ((Instantiator)insts[i]).getClass().getName();
-        instantiatedClassName = ((Instantiator)insts[i]).getInstantiatedClass().getName();
-        id = ((Instantiator)insts[i]).getId();
+        instantiatorClassName = ((Instantiator) insts[i]).getClass().getName();
+        instantiatedClassName = ((Instantiator) insts[i]).getInstantiatedClass().getName();
+        id = ((Instantiator) insts[i]).getId();
-        instantiatorClassName = ((InstantiatorAttributesHolder)insts[i]).getInstantiatorClassName();
-        instantiatedClassName = ((InstantiatorAttributesHolder)insts[i]).getInstantiatedClassName();
-        id = ((InstantiatorAttributesHolder)insts[i]).getId();
+        instantiatorClassName =
+            ((InstantiatorAttributesHolder) insts[i]).getInstantiatorClassName();
+        instantiatedClassName =
+            ((InstantiatorAttributesHolder) insts[i]).getInstantiatedClassName();
+        id = ((InstantiatorAttributesHolder) insts[i]).getId();
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-            .toLocalizedString(ex));
+                .toLocalizedString(ex));
-          LocalizedStrings.StartupMessage_ILLEGALARGUMENTEXCEPTION_WHILE_REGISTERING_AN_INSTANTIATOR_0
-          .toLocalizedString(ex));
+            LocalizedStrings.StartupMessage_ILLEGALARGUMENTEXCEPTION_WHILE_REGISTERING_AN_INSTANTIATOR_0
+                .toLocalizedString(ex));
-    this.interfaces = (Set)DataSerializer.readObject(in);
+    this.interfaces = (Set) DataSerializer.readObject(in);
-    return 
-      LocalizedStrings.StartupMessage_STARTUPMESSAGE_DM_0_HAS_STARTED_PROCESSOR_1_WITH_DISTRIBUTED_SYSTEM_ID_2
-      .toLocalizedString(new Object[]{getSender(), Integer.valueOf(replyProcessorId), this.distributedSystemId});
+    return LocalizedStrings.StartupMessage_STARTUPMESSAGE_DM_0_HAS_STARTED_PROCESSOR_1_WITH_DISTRIBUTED_SYSTEM_ID_2
+        .toLocalizedString(new Object[] {getSender(), Integer.valueOf(replyProcessorId),
+            this.distributedSystemId});
