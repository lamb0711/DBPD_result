GEODE-1372 added unit test and some more fixes.

+
-      JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, services.getAuthenticator().getCredentials(coord), port);
-      services.getMessenger().send(req, state.view);
+      JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, services.getAuthenticator().getCredentials(coord), port, 
+          services.getMessenger().getRequestId());
+      //services.getMessenger().send(req, state.view);
+      services.getMessenger().send(req);
+          searchState.view = response.getCurrentView();
-          searchState.possibleCoordinator = coord;
+          searchState.view = response.getCurrentView();
-      JoinResponseMessage m = new JoinResponseMessage("Rejecting the attempt of a member using an older version");
+      JoinResponseMessage m = new JoinResponseMessage("Rejecting the attempt of a member using an older version", incomingRequest.getRequestId());
-      JoinResponseMessage m = new JoinResponseMessage(rejection);
+      JoinResponseMessage m = new JoinResponseMessage(rejection, 0);
+      if (viewCreator != null) {
+        boolean joinResponseSent = viewCreator.informToPendingJoinRequests();
+
+        if (!joinResponseSent && request instanceof JoinRequestMessage) {
+          JoinRequestMessage jreq = (JoinRequestMessage) request;
+          // this will inform about cluster-secret key, as we have authenticated at this point
+          JoinResponseMessage response = new JoinResponseMessage(jreq.getSender(), services.getMessenger().getClusterSecretKey(), jreq.getRequestId());
+          services.getMessenger().send(response);
+        }
+      }
-    if (viewCreator != null) {
-      viewCreator.informToPendingJoinRequests();
-    }
+    
-
+  
+      services.getMessenger().initClusterKey();
-      JoinResponseMessage response = new JoinResponseMessage(mbr, newView);
+      JoinResponseMessage response = new JoinResponseMessage(mbr, newView, 0);
-  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView) {
-    for (InternalDistributedMember mbr : newMbrs) {
-      JoinResponseMessage response = new JoinResponseMessage(mbr, newView);
-      services.getMessenger().send(response);
-    }
-  }
-
-
-    services.getMessenger().send(msg, view);
+    addPublickeysToView(view);
+    services.getMessenger().send(msg);
+  private void addPublickeysToView(NetView view) {
+    //TODO: is this check is correct
+    if (services != null && services.getConfig() != null && services.getConfig().getDistributionConfig() != null) {
+      String sDHAlgo = services.getConfig().getDistributionConfig().getSecurityClientDHAlgo();
+      if (sDHAlgo != null && !sDHAlgo.isEmpty()) {
+        List<InternalDistributedMember> mbrs = view.getMembers();
+        Iterator<InternalDistributedMember> itr = mbrs.iterator();
+
+        while (itr.hasNext()) {
+          InternalDistributedMember mbr = itr.next();
+          byte[] pk = services.getMessenger().getPublickey(mbr);
+          view.setPublicKey(mbr, pk);
+        }
+      }
+    }
+  }
-      logger.info("Ignoring the view {} from member {}, which is not in my current view {} ", view, m.getSender(), currentView);
-      return;
+      if(this.preparedView == null || !this.preparedView.contains(m.getSender())) 
+      { 
+        logger.info("Ignoring the view {} from member {}, which is not in my current view {} ", view, m.getSender(), currentView);
+        return;
+      }
-      services.getMessenger().send(new ViewAckMessage(m.getSender(), m.getView().getViewId(), m.isPreparing()), m.getView());
+      services.getMessenger().send(new ViewAckMessage(m.getSender(), m.getView().getViewId(), m.isPreparing()));
-    FindCoordinatorRequest request = new FindCoordinatorRequest(this.localAddress, state.alreadyTried, state.viewId);
+    FindCoordinatorRequest request = new FindCoordinatorRequest(this.localAddress, state.alreadyTried, state.viewId, 
+        services.getMessenger().getPublickey(localAddress), services.getMessenger().getRequestId());
+            setCoordinatorPublicKey(response);
-    recipients.remove(localAddress);
-    FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried, state.viewId);
-    req.setRecipients(v.getMembers());
+    recipients.remove(localAddress);    
+   // FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried, state.viewId, services.getMessenger().getPublickey(
+     //   localAddress), services.getMessenger().getRequestId());
+    //req.setRecipients(v.getMembers());
+    
-      services.getMessenger().send(req);
+      
+      if (!services.getConfig().getDistributionConfig().getSecurityClientDHAlgo().isEmpty()) {
+        for (InternalDistributedMember mbr : v.getMembers()) {
+          Set<InternalDistributedMember> r = new HashSet<>();
+          r.add(mbr);
+          FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried, state.viewId, services.getMessenger().getPublickey(
+              localAddress), services.getMessenger().getRequestId());
+          req.setRecipients(r);
+
+          services.getMessenger().send(req, v);
+        }
+      } else {
+        FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried, state.viewId, services.getMessenger().getPublickey(
+            localAddress), services.getMessenger().getRequestId());
+        req.setRecipients(v.getMembers());
+
+        services.getMessenger().send(req, v);
+      }
-        joinResponse[0] = rsp;
-        joinResponse.notifyAll();
+        //1. our joinRequest rejected.
+        //2. Member which was coordinator but just now some other member became coordinator
+        //3. we got message with secret key, but still view is coming and that will inform the joining thread
+        if (rsp.getRejectionMessage() != null || rsp.getCurrentView() != null) {
+          joinResponse[0] = rsp;
+          joinResponse.notifyAll();
+        } else {
+          //we got secret key lets add it
+          services.getMessenger().setClusterSecretKey(rsp.getSecretPk());
+        }
-      resp = new FindCoordinatorResponse(v.getCoordinator(), localAddress);
+      resp = new FindCoordinatorResponse(v.getCoordinator(), localAddress, 
+          services.getMessenger().getPublickey(v.getCoordinator()), req.getRequestId());
-      resp = new FindCoordinatorResponse(localAddress, localAddress);
+      resp = new FindCoordinatorResponse(localAddress, localAddress, 
+          services.getMessenger().getPublickey(localAddress), req.getRequestId());
+    setCoordinatorPublicKey(resp);
+  }
+  
+  private void setCoordinatorPublicKey(FindCoordinatorResponse response) {
+    if (response.getCoordinator() != null && response.getCoordinatorPublicKey() != null)
+      services.getMessenger().setPublicKey(response.getCoordinatorPublicKey(), response.getCoordinator());
-    synchronized void informToPendingJoinRequests() {
+    synchronized boolean informToPendingJoinRequests() {
+      boolean joinResponseSent = false;
-        return;
+        return joinResponseSent;
-
-          return;
+          return joinResponseSent;
+      
-          logger.info("Informing to pending join requests {}", msg);
-
+      
+          logger.info("Informing to pending join requests {} myid {} coord {}", msg, localAddress, v.getCoordinator());
+            joinResponseSent = true;
-            JoinResponseMessage jrm = new JoinResponseMessage(((JoinRequestMessage) msg).getMemberID(), v);
+            JoinResponseMessage jrm = new JoinResponseMessage(((JoinRequestMessage) msg).getMemberID(), v, ((JoinRequestMessage) msg).getRequestId());
+      
+      return joinResponseSent;
-      Map<InternalDistributedMember, Object> joinKeys = new HashMap<>(10);
-            joinKeys.put(mbr, jmsg.getPublicKey());
-            newView.setPublicKey(mbr, joinKeys.get(mbr));
-      sendJoinResponses(joinReqs, newView);
+      //we already sent whrn we got join request
+      //sendJoinResponses(newView, joinReqs);
-      sendJoinResponses(newView, joinReqs);
+      //we already sent whrn we got join request
+      //sendJoinResponses(newView, joinReqs);
