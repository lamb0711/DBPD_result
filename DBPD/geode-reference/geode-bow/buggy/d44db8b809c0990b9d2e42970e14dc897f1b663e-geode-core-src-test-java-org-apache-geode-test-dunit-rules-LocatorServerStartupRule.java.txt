GEODE-2395: use random ports when starting the jmx manager and http services

* be able to configure the various aspects of the rules before starting the server when declaring the rules.
* delete the unnecessary abstract test classes
* allowing tests to use default ports if needed
* created HttpClientRule to ease the connection to to pulse server

+import org.apache.geode.internal.AvailablePortHelper;
-  public MemberVM startLocatorVM(int index) throws IOException {
+  public MemberVM startLocatorVM(int index) throws Exception {
-  public MemberVM<Locator> startLocatorVM(int index, Properties locatorProperties)
-      throws IOException {
+  public MemberVM<Locator> startLocatorVM(int index, Properties properties) throws Exception {
-    locatorProperties.setProperty(NAME, name);
+    properties.setProperty(NAME, name);
-      locatorStarter.before();
-      return locatorStarter.startLocator(locatorProperties);
+      return locatorStarter.withProperties(properties).startLocator();
+
-  /**
-   * starts a cache server that does not connect to a locator
-   * 
-   * @return VM node vm
-   */
-  public MemberVM startServerVM(int index, Properties properties) throws IOException {
-    return startServerVM(index, properties, -1);
-  }
-
-  public MemberVM startServerAsJmxManager(int index, int jmxManagerPort) throws IOException {
-    Properties properties = new Properties();
-    properties.setProperty(JMX_MANAGER_PORT, jmxManagerPort + "");
-    return startServerVM(index, properties);
+  public MemberVM startServerVM(int index, Properties properties) throws IOException {
+    return startServerVM(index, properties, -1);
-  public MemberVM startServerAsEmbededLocator(int index, int locatorPort, int jmxManagerPort)
-      throws IOException {
+  public MemberVM startServerAsJmxManager(int index) throws IOException {
-    properties.setProperty("start-locator", "localhost[" + locatorPort + "]");
-    if (jmxManagerPort > 0) {
-      properties.setProperty(JMX_MANAGER_PORT, jmxManagerPort + "");
-    }
-    return startServerVM(index, properties);
+    properties.setProperty(JMX_MANAGER_PORT, AvailablePortHelper.getRandomAvailableTCPPort() + "");
+    return startServerVM(index, properties, -1);
+  }
+
+  public MemberVM startServerAsEmbededLocator(int index) throws IOException {
+    String name = "server-" + index;
+    File workingDir = createWorkingDirForMember(name);
+    VM serverVM = getHost(0).getVM(index);
+    Server server = serverVM.invoke(() -> {
+      serverStarter = new ServerStarterRule(workingDir);
+      return serverStarter.withEmbeddedLocator().withName(name).withJMXManager().startServer();
+    });
+    members[index] = new MemberVM(server, serverVM);
+    return members[index];
-   * Starts a cache server that connect to the locator running at the given port.
+   * Starts a cache server with given properties
-
-      serverStarter.before();
-      return serverStarter.startServer(properties, locatorPort);
+      return serverStarter.withProperties(properties).withConnectionToLocator(locatorPort)
+          .startServer();
