GEODE-6225: add catalog and schema support to jdbc (#3063)



+import java.util.HashMap;
+import java.util.Map;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
+  private static final String DEFAULT_CATALOG = "";
+  private static final String DEFAULT_SCHEMA = "";
-  public TableMetaDataView getTableMetaDataView(Connection connection, String tableName,
-      String ids) {
-    return tableToMetaDataMap.computeIfAbsent(tableName,
-        k -> computeTableMetaDataView(connection, k, ids));
+  public TableMetaDataView getTableMetaDataView(Connection connection,
+      RegionMapping regionMapping) {
+    return tableToMetaDataMap.computeIfAbsent(computeTableName(regionMapping),
+        k -> computeTableMetaDataView(connection, k, regionMapping));
-  private TableMetaDataView computeTableMetaDataView(Connection connection, String tableName,
-      String ids) {
-    TableMetaData result;
+  /**
+   * If the region mapping has been given a table name then return it.
+   * Otherwise return the region mapping's region name as the table name.
+   */
+  String computeTableName(RegionMapping regionMapping) {
+    String result = regionMapping.getTableName();
+    if (result == null) {
+      result = regionMapping.getRegionName();
+    }
+    return result;
+  }
+
+  private TableMetaDataView computeTableMetaDataView(Connection connection,
+      String tableName, RegionMapping regionMapping) {
-      try (ResultSet tables = metaData.getTables(null, null, "%", null)) {
-        String realTableName = getTableNameFromMetaData(tableName, tables);
-        List<String> keys = getPrimaryKeyColumnNamesFromMetaData(realTableName, metaData, ids);
-        String quoteString = metaData.getIdentifierQuoteString();
-        if (quoteString == null) {
-          quoteString = "";
-        }
-        result = new TableMetaData(realTableName, keys, quoteString);
-        getDataTypesFromMetaData(realTableName, metaData, result);
-      }
+      String realCatalogName = getCatalogNameFromMetaData(metaData, regionMapping);
+      String realSchemaName = getSchemaNameFromMetaData(metaData, regionMapping, realCatalogName);
+      String realTableName =
+          getTableNameFromMetaData(metaData, realCatalogName, realSchemaName, tableName);
+      List<String> keys = getPrimaryKeyColumnNamesFromMetaData(metaData, realCatalogName,
+          realSchemaName, realTableName, regionMapping.getIds());
+      String quoteString = metaData.getIdentifierQuoteString();
+      Map<String, Integer> dataTypes =
+          getDataTypesFromMetaData(metaData, realCatalogName, realSchemaName, realTableName);
+      return new TableMetaData(realCatalogName, realSchemaName, realTableName, keys, quoteString,
+          dataTypes);
-    return result;
-  private String getTableNameFromMetaData(String tableName, ResultSet tables) throws SQLException {
-    String result = null;
-    int inexactMatches = 0;
+  String getCatalogNameFromMetaData(DatabaseMetaData metaData, RegionMapping regionMapping)
+      throws SQLException {
+    String catalogFilter = regionMapping.getCatalog();
+    if (catalogFilter == null || catalogFilter.isEmpty()) {
+      return DEFAULT_CATALOG;
+    }
+    try (ResultSet catalogs = metaData.getCatalogs()) {
+      return findMatchInResultSet(catalogFilter, catalogs, "TABLE_CAT", "catalog");
+    }
+  }
-    while (tables.next()) {
-      String name = tables.getString("TABLE_NAME");
-      if (name.equals(tableName)) {
-        return name;
-      } else if (name.equalsIgnoreCase(tableName)) {
-        inexactMatches++;
-        result = name;
+  String getSchemaNameFromMetaData(DatabaseMetaData metaData, RegionMapping regionMapping,
+      String catalogFilter) throws SQLException {
+    String schemaFilter = regionMapping.getSchema();
+    if (schemaFilter == null || schemaFilter.isEmpty()) {
+      if ("PostgreSQL".equals(metaData.getDatabaseProductName())) {
+        schemaFilter = "public";
+      } else {
+        return DEFAULT_SCHEMA;
-
-    if (inexactMatches > 1) {
-      throw new JdbcConnectorException("Duplicate tables that match region name");
+    try (ResultSet schemas = metaData.getSchemas(catalogFilter, "%")) {
+      return findMatchInResultSet(schemaFilter, schemas, "TABLE_SCHEM", "schema");
-
-    if (result == null) {
-      throw new JdbcConnectorException("no table was found that matches " + tableName);
-    }
-    return result;
-  private List<String> getPrimaryKeyColumnNamesFromMetaData(String tableName,
-      DatabaseMetaData metaData,
+  private String getTableNameFromMetaData(DatabaseMetaData metaData, String catalogFilter,
+      String schemaFilter, String tableName) throws SQLException {
+    try (ResultSet tables = metaData.getTables(catalogFilter, schemaFilter, "%", null)) {
+      return findMatchInResultSet(tableName, tables, "TABLE_NAME", "table");
+    }
+  }
+
+  String findMatchInResultSet(String stringToFind, ResultSet resultSet, String column,
+      String description)
+      throws SQLException {
+    int exactMatches = 0;
+    String exactMatch = null;
+    int inexactMatches = 0;
+    String inexactMatch = null;
+    if (resultSet != null) {
+      while (resultSet.next()) {
+        String name = resultSet.getString(column);
+        if (name.equals(stringToFind)) {
+          exactMatches++;
+          exactMatch = name;
+        } else if (name.equalsIgnoreCase(stringToFind)) {
+          inexactMatches++;
+          inexactMatch = name;
+        }
+      }
+    }
+    if (exactMatches == 1) {
+      return exactMatch;
+    }
+    if (inexactMatches > 1 || exactMatches > 1) {
+      throw new JdbcConnectorException(
+          "Multiple " + description + "s were found that match \"" + stringToFind + '"');
+    }
+    if (inexactMatches == 1) {
+      return inexactMatch;
+    }
+    throw new JdbcConnectorException(
+        "No " + description + " was found that matches \"" + stringToFind + '"');
+  }
+
+  private List<String> getPrimaryKeyColumnNamesFromMetaData(DatabaseMetaData metaData,
+      String catalogFilter, String schemaFilter, String tableName,
-        checkColumnExistsInTable(tableName, metaData, key);
+        checkColumnExistsInTable(tableName, metaData, catalogFilter, schemaFilter, key);
-      try (ResultSet primaryKeys = metaData.getPrimaryKeys(null, null, tableName)) {
+      try (
+          ResultSet primaryKeys =
+              metaData.getPrimaryKeys(catalogFilter, schemaFilter, tableName)) {
-  private void getDataTypesFromMetaData(String tableName, DatabaseMetaData metaData,
-      TableMetaData result) throws SQLException {
-    try (ResultSet columnData = metaData.getColumns(null, null, tableName, "%")) {
+  private Map<String, Integer> getDataTypesFromMetaData(DatabaseMetaData metaData,
+      String catalogFilter,
+      String schemaFilter, String tableName) throws SQLException {
+    Map<String, Integer> result = new HashMap<>();
+    try (ResultSet columnData =
+        metaData.getColumns(catalogFilter, schemaFilter, tableName, "%")) {
-        result.addDataType(columnName, dataType);
+        result.put(columnName, dataType);
+    return result;
-      String columnName) throws SQLException {
+      String catalogFilter, String schemaFilter, String columnName) throws SQLException {
-    try (ResultSet columnData = metaData.getColumns(null, null, tableName, "%")) {
+    try (ResultSet columnData =
+        metaData.getColumns(catalogFilter, schemaFilter, tableName, "%")) {
