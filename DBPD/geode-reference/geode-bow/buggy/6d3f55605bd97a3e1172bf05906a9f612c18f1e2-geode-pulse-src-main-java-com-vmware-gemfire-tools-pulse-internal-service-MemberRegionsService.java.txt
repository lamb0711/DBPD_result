GEODE-907: Converted core functionality to use jackson

-import java.text.DecimalFormat;
-
-import javax.servlet.http.HttpServletRequest;
-
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Component;
-import org.springframework.stereotype.Service;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONArray;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONException;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONObject;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+import org.springframework.stereotype.Service;
+
+import javax.servlet.http.HttpServletRequest;
+import java.text.DecimalFormat;
+  private final ObjectMapper mapper = new ObjectMapper();
+
-  public JSONObject execute(final HttpServletRequest request) throws Exception {
+  public ObjectNode tempExecute(final HttpServletRequest request) throws Exception {
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-    try {
+    JsonNode requestDataJSON = mapper.readTree(request.getParameter("pulseData"));
+    String memberName = requestDataJSON.get("MemberRegions").get("memberName").textValue();
-      JSONObject requestDataJSON = new JSONObject(
-          request.getParameter("pulseData"));
-      String memberName = requestDataJSON.getJSONObject("MemberRegions")
-          .getString("memberName");
+    Cluster.Member clusterMember = cluster.getMember(StringUtils.makeCompliantName(memberName));
-      Cluster.Member clusterMember = cluster.getMember(StringUtils
-          .makeCompliantName(memberName));
+    if (clusterMember != null) {
+      responseJSON.put("memberId", clusterMember.getId());
+      responseJSON.put(this.NAME, clusterMember.getName());
+      responseJSON.put("host", clusterMember.getHost());
-      if (clusterMember != null) {
-        responseJSON.put("memberId", clusterMember.getId());
-        responseJSON.put(this.NAME, clusterMember.getName());
-        responseJSON.put("host", clusterMember.getHost());
+      // member's regions
+      Cluster.Region[] memberRegions = clusterMember.getMemberRegionsList();
+      ArrayNode regionsListJson = mapper.createArrayNode();
+      for (Cluster.Region memberRegion : memberRegions) {
+        ObjectNode regionJSON = mapper.createObjectNode();
+        regionJSON.put(this.NAME, memberRegion.getName());
-        // member's regions
-        Cluster.Region[] memberRegions = clusterMember.getMemberRegionsList();
-        JSONArray regionsListJson = new JSONArray();
-        for (Cluster.Region memberRegion : memberRegions) {
-          JSONObject regionJSON = new JSONObject();
-          regionJSON.put(this.NAME, memberRegion.getName());
-
-          if (PulseConstants.PRODUCT_NAME_SQLFIRE
-              .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
-            // Convert region path to dot separated region path
-            regionJSON.put("fullPath", StringUtils
-                .getTableNameFromRegionName(memberRegion.getFullPath()));
-          } else {
-            regionJSON.put("fullPath", memberRegion.getFullPath());
-          }
-
-          regionJSON.put("type", memberRegion.getRegionType());
-          regionJSON
-              .put("entryCount", memberRegion.getSystemRegionEntryCount());
-          Long entrySize = memberRegion.getEntrySize();
-
-          DecimalFormat form = new DecimalFormat(
-              PulseConstants.DECIMAL_FORMAT_PATTERN_2);
-          String entrySizeInMB = form.format(entrySize / (1024f * 1024f));
-
-          if (entrySize < 0) {
-            regionJSON.put(this.ENTRY_SIZE, this.VALUE_NA);
-          } else {
-            regionJSON.put(this.ENTRY_SIZE, entrySizeInMB);
-          }
-          regionJSON.put("scope", memberRegion.getScope());
-          String diskStoreName = memberRegion.getDiskStoreName();
-          if (StringUtils.isNotNullNotEmptyNotWhiteSpace(diskStoreName)) {
-            regionJSON.put(this.DISC_STORE_NAME, diskStoreName);
-            regionJSON.put(this.DISC_SYNCHRONOUS,
-                memberRegion.isDiskSynchronous());
-          } else {
-            regionJSON.put(this.DISC_SYNCHRONOUS, this.VALUE_NA);
-            regionJSON.put(this.DISC_STORE_NAME, "");
-          }
-          regionJSON.put("gatewayEnabled", memberRegion.getWanEnabled());
-
-          regionsListJson.put(regionJSON);
+        if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController.getPulseProductSupport())) {
+          // Convert region path to dot separated region path
+          regionJSON.put("fullPath", StringUtils.getTableNameFromRegionName(memberRegion.getFullPath()));
+        } else {
+          regionJSON.put("fullPath", memberRegion.getFullPath());
-        responseJSON.put("memberRegions", regionsListJson);
-        // response
-        responseJSON.put("status", "Normal");
+        regionJSON.put("type", memberRegion.getRegionType());
+        regionJSON.put("entryCount", memberRegion.getSystemRegionEntryCount());
+        Long entrySize = memberRegion.getEntrySize();
+        DecimalFormat form = new DecimalFormat(PulseConstants.DECIMAL_FORMAT_PATTERN_2);
+        String entrySizeInMB = form.format(entrySize / (1024f * 1024f));
+
+        if (entrySize < 0) {
+          regionJSON.put(this.ENTRY_SIZE, this.VALUE_NA);
+        } else {
+          regionJSON.put(this.ENTRY_SIZE, entrySizeInMB);
+        }
+        regionJSON.put("scope", memberRegion.getScope());
+        String diskStoreName = memberRegion.getDiskStoreName();
+        if (StringUtils.isNotNullNotEmptyNotWhiteSpace(diskStoreName)) {
+          regionJSON.put(this.DISC_STORE_NAME, diskStoreName);
+          regionJSON.put(this.DISC_SYNCHRONOUS,
+              memberRegion.isDiskSynchronous());
+        } else {
+          regionJSON.put(this.DISC_SYNCHRONOUS, this.VALUE_NA);
+          regionJSON.put(this.DISC_STORE_NAME, "");
+        }
+        regionJSON.put("gatewayEnabled", memberRegion.getWanEnabled());
+
+        regionsListJson.add(regionJSON);
+      responseJSON.put("memberRegions", regionsListJson);
-      // Send json response
-      return responseJSON;
+      // response
+      responseJSON.put("status", "Normal");
-    } catch (JSONException e) {
-      throw new Exception(e);
+
+    // Send json response
+    return responseJSON;
