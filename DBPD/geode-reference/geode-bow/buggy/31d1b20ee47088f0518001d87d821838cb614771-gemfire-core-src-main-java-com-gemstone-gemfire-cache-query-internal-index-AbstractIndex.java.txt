Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.cache.query.internal.Bag;
-import com.gemstone.gemfire.cache.query.internal.LinkedStructSet;
-import com.gemstone.gemfire.cache.query.internal.ResultsBag;
-import com.gemstone.gemfire.cache.query.internal.StructBag;
+import com.gemstone.gemfire.cache.query.internal.StructFields;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.Chunk;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-      CompiledValue iterOp, RuntimeIterator indpndntIr,
+      @Retained CompiledValue iterOp, RuntimeIterator indpndntIr,
-  private void addToResultsBagWithUnionOrIntersection(Collection results,
+  private void addToResultsWithUnionOrIntersection(Collection results,
-  private void addToStructBagWithUnionOrIntersection(Collection results,
+  private void addToStructsWithUnionOrIntersection(Collection results,
-      if( results instanceof StructBag) {
-        ((StructBag)results).addFieldValues(values);
+      if( results instanceof StructFields) {
+        ((StructFields)results).addFieldValues(values);
-        LinkedStructSet lss = (LinkedStructSet)results;
-        StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-        lss.add(structImpl);
+        //The results could be LinkedStructSet or SortedResultsBag or StructSet
+        //LinkedStructSet lss = (LinkedStructSet)results;
+        SelectResults sr = (SelectResults)results;
+        StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+        //lss.add(structImpl);
+        sr.add(structImpl);
-        if(results instanceof StructBag) {
-          int numOcc = ((StructBag)intermediateResults).occurrences(values);
+        if(results instanceof StructFields) {
+          int numOcc = intermediateResults.occurrences(values);
-            ((StructBag)results).addFieldValues(values);
-            ((StructBag)intermediateResults).removeFieldValues(values);
+            ((StructFields)results).addFieldValues(values);
+            ((StructFields)intermediateResults).removeFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( intermediateResults.remove(structImpl)) {
+            sr.add(structImpl);
-        if( results instanceof StructBag) {
-          ((StructBag)results).addFieldValues(values);
+        if( results instanceof StructFields) {
+          ((StructFields)results).addFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( ((SelectResults)intermediateResults).remove(structImpl)) {
+            sr.add(structImpl);
-      this.addToResultsBagWithUnionOrIntersection(result, intermediateResults,
+      this.addToResultsWithUnionOrIntersection(result, intermediateResults,
-      if (result instanceof StructBag || result instanceof LinkedStructSet) {
+      //TODO : Asif : Optimize this . This condition looks ugly.
+     /* if (result instanceof StructBag || result instanceof LinkedStructSet
+          || result instanceof LinkedStructBag) {*/
+      boolean isStruct = result instanceof SelectResults 
+          && ((SelectResults)result).getCollectionType().getElementType() != null
+          && ((SelectResults)result).getCollectionType().getElementType().isStructType();
+      if (isStruct) {
-        this.addToStructBagWithUnionOrIntersection(result, intermediateResults,
+        this.addToStructsWithUnionOrIntersection(result, intermediateResults,
-        this.addToResultsBagWithUnionOrIntersection(result,
+        this.addToResultsWithUnionOrIntersection(result,
-  private void removeFromResultsBagWithUnionOrIntersection(Collection results,
+  private void removeFromResultsWithUnionOrIntersection(Collection results,
-        int numOcc = ((ResultsBag)results).occurrences(value);
+        int numOcc = ((SelectResults)results).occurrences(value);
-  private void removeFromStructBagWithUnionOrIntersection(Collection results,
+  private void removeFromStructsWithUnionOrIntersection(Collection results,
-      Object values[])
+      Object values[], ExecutionContext context)
-    if (intermediateResults == null) {
-      ((StructBag)results).removeFieldValues(values);
+    if (intermediateResults == null) {      
+        ((StructFields)results).removeFieldValues(values);      
-        int numOcc = ((StructBag)results).occurrences(values);
+        int numOcc = ((SelectResults)results).occurrences(values);
-          ((StructBag)results).removeFieldValues(values);
-          ((StructBag)intermediateResults).addFieldValues(values);
+            ((StructFields)results).removeFieldValues(values);
+            ((StructFields)intermediateResults).addFieldValues(values);
+          
-      else {
-        ((StructBag)results).removeFieldValues(values);
+      else {        
+        ((StructFields)results).removeFieldValues(values);        
-      this.removeFromResultsBagWithUnionOrIntersection(result,
+      this.removeFromResultsWithUnionOrIntersection(result,
-      if (result instanceof StructBag) {
+      if (result instanceof StructFields) {
-        this.removeFromStructBagWithUnionOrIntersection(result,
-            intermediateResults, isIntersection, values);
+        this.removeFromStructsWithUnionOrIntersection(result,
+            intermediateResults, isIntersection, values, context);
-        this.removeFromResultsBagWithUnionOrIntersection(result,
+        this.removeFromResultsWithUnionOrIntersection(result,
-      ExecutionContext context) {
+      ExecutionContext context) {   
-      if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-        if (result instanceof ResultsBag) {
-          return (((ResultsBag)result).distinctElementsSize() == limit);
-        } else if (result instanceof StructBag) {
-          return (((StructBag)result).distinctElementsSize() == limit);
-        }
+     /* if (!context.isDistinct()) {
+        return ((Bag)result).size() == limit;
-      }
+      }*/
+      return result.size() == limit;
-        Object val = re.getValueInVM(context.getPartitionedRegion()); // OFFHEAP incrc, deserialize, decrc
+        @Released Object val = re.getValueInVM(context.getPartitionedRegion());
+        Chunk valToFree = null;
+        if (val instanceof Chunk) {
+          valToFree = (Chunk)val;
+        }
+        try {
+        } finally {
+          if (valToFree != null) {
+            valToFree.release();
+          }
+        }
-        ExecutionContext context) {
+        ExecutionContext context) {     
-        if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-          if (result instanceof ResultsBag) {
-            return (((ResultsBag)result).distinctElementsSize() == limit);
-          } else if (result instanceof StructBag) {
-            return (((StructBag)result).distinctElementsSize() == limit);
-          }
+        if (!context.isDistinct()) {
+          return ((Bag)result).size() == limit;
