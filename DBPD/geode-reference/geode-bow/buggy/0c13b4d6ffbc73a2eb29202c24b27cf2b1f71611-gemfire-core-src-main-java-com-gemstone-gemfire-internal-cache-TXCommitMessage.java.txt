Fix for GEODE-278

While applying changes to the Region, pass in List for gathering pendingCallbacks
rather than a null on the remote members to get the same behavior as transaction host.

+      List<EntryEventImpl> pendingCallbacks = new ArrayList<>();
-          entryOp.process();
+          entryOp.process(pendingCallbacks);
+      firePendingCallbacks(pendingCallbacks);
-  
+
+  private void firePendingCallbacks(List<EntryEventImpl> callbacks) {
+    Iterator<EntryEventImpl> ci = callbacks.iterator();
+    while(ci.hasNext()) {
+      EntryEventImpl ee = ci.next();
+      if(ee.getOperation().isDestroy()) {
+        ee.getRegion().invokeTXCallbacks(EnumListenerEvent.AFTER_DESTROY, ee, true);
+      } else if(ee.getOperation().isInvalidate()) {
+        ee.getRegion().invokeTXCallbacks(EnumListenerEvent.AFTER_INVALIDATE, ee, true);
+      } else if(ee.getOperation().isCreate()) {
+        ee.getRegion().invokeTXCallbacks(EnumListenerEvent.AFTER_CREATE, ee, true);
+      } else {
+        ee.getRegion().invokeTXCallbacks(EnumListenerEvent.AFTER_UPDATE, ee, true);
+      }
+    }
+  }
+
-    protected void txApplyEntryOp(FarSideEntryOp entryOp)
+    protected void txApplyEntryOp(FarSideEntryOp entryOp, List<EntryEventImpl> pendingCallbacks)
-                              null /* fire inline, no pending callbacks */,
+                              pendingCallbacks,
-                                 null /* fire inline, no pending callbacks */,
+                                 pendingCallbacks,
-                          null /* fire inline, no pending callbacks */,
+                          pendingCallbacks,
-      public void process() {
-        txApplyEntryOp(this);
+      public void process(List<EntryEventImpl> pendingCallbacks) {
+        txApplyEntryOp(this, pendingCallbacks);
