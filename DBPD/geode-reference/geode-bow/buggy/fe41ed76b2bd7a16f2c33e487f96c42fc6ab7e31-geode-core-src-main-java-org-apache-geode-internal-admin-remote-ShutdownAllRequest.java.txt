GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.CancelException;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.distributed.internal.*;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.tcp.ConnectionTable;
-import org.apache.logging.log4j.Logger;
-
-import java.util.*;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Set;
+import java.util.TreeSet;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.CancelException;
+import org.apache.geode.InternalGemFireError;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.DistributionMessage;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.InternalLocator;
+import org.apache.geode.distributed.internal.ReplyException;
+import org.apache.geode.distributed.internal.ReplyMessage;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.tcp.ConnectionTable;
- *
-  static final long SLEEP_TIME_BEFORE_DISCONNECT_DS = Long
-      .getLong(DistributionConfig.GEMFIRE_PREFIX + "sleep-before-disconnect-ds", 1000).longValue();
+  private static final long SLEEP_TIME_BEFORE_DISCONNECT_DS =
+      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "sleep-before-disconnect-ds", 1000);
-  public ShutdownAllRequest() {}
+  public ShutdownAllRequest() {
+    // do nothing
+  }
-
-    boolean interrupted = false;
-    DistributionManager dism =
-        (dm instanceof DistributionManager) ? (DistributionManager) dm : null;
+    DistributionManager dism = dm instanceof DistributionManager ? (DistributionManager) dm : null;
-    // recipients = dm.getOtherNormalDistributionManagerIds();
+    boolean interrupted = false;
-    } catch (CancelException e) {
+    } catch (CancelException ignore) {
-    } catch (InterruptedException e) {
+    } catch (InterruptedException ignore) {
-    } catch (InterruptedException e) {
+    } catch (InterruptedException ignore) {
+          @Override
-            } catch (InterruptedException e) {
+            } catch (InterruptedException ignore) {
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-    if (cache != null && !cache.isClosed()) {
-      return true;
-    } else {
-      return false;
-    }
+    InternalCache cache = GemFireCacheImpl.getInstance();
+    return cache != null && !cache.isClosed();
-    boolean isSuccess = false;
+      boolean isSuccess = false;
+  @Override
-    public ShutDownAllReplyProcessor(DM dm, Collection initMembers) {
+    ShutDownAllReplyProcessor(DM dm, Collection initMembers) {
-    /*
+    /**
-     * 
-     * @see
-     * org.apache.geode.distributed.internal.ReplyProcessor21#process(org.apache.geode.distributed.
-     * internal.DistributionMessage)
-          logger.debug("{} adding {} to result set {}", this, msg.getSender(), results);
-          results.add(msg.getSender());
+          logger.debug("{} adding {} to result set {}", this, msg.getSender(), this.results);
+          this.results.add(msg.getSender());
