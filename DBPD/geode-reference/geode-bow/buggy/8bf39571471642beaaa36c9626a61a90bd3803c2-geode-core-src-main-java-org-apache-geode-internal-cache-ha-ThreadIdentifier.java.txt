Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class identifying a Thread uniquely across the distributed system. It is
- * composed of two fields 1) A byte array uniquely identifying the distributed
- * system 2) A long value unqiuely identifying the thread in the distributed
- * system
+ * Class identifying a Thread uniquely across the distributed system. It is composed of two fields
+ * 1) A byte array uniquely identifying the distributed system 2) A long value unqiuely identifying
+ * the thread in the distributed system
- * The application thread while operating on the Region gets an EventID object (
- * contained in EntryEventImpl) This EventID object contains a ThreadLocal field
- * which uniquely identifies the thread by storing the Object of this class.
+ * The application thread while operating on the Region gets an EventID object ( contained in
+ * EntryEventImpl) This EventID object contains a ThreadLocal field which uniquely identifies the
+ * thread by storing the Object of this class.
- *  
+ * 
-    RESERVED,  // original thread id incl putAll (or old format)
-    PRIMARY,   // parallel new wan
+    RESERVED, // original thread id incl putAll (or old format)
+    PRIMARY, // parallel new wan
-    PARALLEL;  // parallel old wan
-    
+    PARALLEL; // parallel old wan
+
+     * 
-      return Bits.WAN_TYPE.shift(ordinal()) 
-          | Bits.WAN.shift(offset) 
-          | Bits.GATEWAY_ID.shift(gatewayIndex) 
-          | threadId;
+      return Bits.WAN_TYPE.shift(ordinal()) | Bits.WAN.shift(offset)
+          | Bits.GATEWAY_ID.shift(gatewayIndex) | threadId;
-    
+
+     * 
-  
+
-   * Provides type-safe bitwise access to the threadID when dealing with generated
-   * values for wan id generation.
+   * Provides type-safe bitwise access to the threadID when dealing with generated values for wan id
+   * generation.
-    THREAD_ID   (0, 32),  // bits  0-31 thread id (including fake putAll bits)
-    WAN         (32, 16), // bits 32-47 wan thread index (or bucket for new wan)
-    WAN_TYPE    (48, 8),  // bits 48-55 thread id type
-    GATEWAY_ID  (56, 4),  // bits 56-59 gateway id
-    RESERVED    (60, 4);  // bits 60-63 unused
-    
+    THREAD_ID(0, 32), // bits 0-31 thread id (including fake putAll bits)
+    WAN(32, 16), // bits 32-47 wan thread index (or bucket for new wan)
+    WAN_TYPE(48, 8), // bits 48-55 thread id type
+    GATEWAY_ID(56, 4), // bits 56-59 gateway id
+    RESERVED(60, 4); // bits 60-63 unused
+
-    
+
-    
+
-    
+
+     * 
-    
-    /** 
+
+    /**
+     * 
-    
+
-     * Extracts the field bits from the value. 
+     * Extracts the field bits from the value.
+     * 
-  
-  public ThreadIdentifier() {
-  }
-  
+
+  public ThreadIdentifier() {}
+
-  public boolean equals(Object obj)
-  {
+  public boolean equals(Object obj) {
-    return (this.threadID == ((ThreadIdentifier)obj).threadID && Arrays.equals(
-        this.membershipID, ((ThreadIdentifier)obj).membershipID));
+    return (this.threadID == ((ThreadIdentifier) obj).threadID
+        && Arrays.equals(this.membershipID, ((ThreadIdentifier) obj).membershipID));
-  public int hashCode()
-  {
+  public int hashCode() {
-    result = mult* result + (int) this.threadID;
-    result = mult* result + (int) (this.threadID >>> 32);
+    result = mult * result + (int) this.threadID;
+    result = mult * result + (int) (this.threadID >>> 32);
- public byte[] getMembershipID()
-  {
+  public byte[] getMembershipID() {
-  public long getThreadID()
-  {
+  public long getThreadID() {
-  
+
-    
+
-  
+
-    
+
-  
+
-      mbr = InternalDistributedMember.readEssentialData(
-          new DataInputStream(new ByteArrayInputStream(membershipID)));
+      mbr = InternalDistributedMember
+          .readEssentialData(new DataInputStream(new ByteArrayInputStream(membershipID)));
+    } catch (Exception e) {
+      mbr = membershipID; // punt and use the bytes
-    catch (Exception e) {
-      mbr = membershipID;  // punt and use the bytes
-    }
-    
+
-   * @return real thread id 
+   * @return real thread id
-    return WanType.matches(tid) ? true
-        : tid / MAX_THREAD_PER_CLIENT > (MAX_BUCKET_PER_PR + 2);
+    return WanType.matches(tid) ? true : tid / MAX_THREAD_PER_CLIENT > (MAX_BUCKET_PER_PR + 2);
-  
+
+   * 
-  
+
+   * 
-  public static long createFakeThreadIDForBulkOp(int bucketNumber,
-      long originatingThreadId) {
+  public static long createFakeThreadIDForBulkOp(int bucketNumber, long originatingThreadId) {
-  
+
+   * 
-  
+
+   * 
-  public static long createFakeThreadIDForParallelGSSecondaryBucket(
-      int bucketId, long originatingThreadId, int gatewayIndex) {
+  public static long createFakeThreadIDForParallelGSSecondaryBucket(int bucketId,
+      long originatingThreadId, int gatewayIndex) {
-  
+
+   * 
-  public static long createFakeThreadIDForParallelGateway(int index,
-      long originatingThreadId, int gatewayIndex) {
+  public static long createFakeThreadIDForParallelGateway(int index, long originatingThreadId,
+      int gatewayIndex) {
-  
+
-   * checks to see if the membership id of this identifier is the same
-   * as in the argument
+   * checks to see if the membership id of this identifier is the same as in the argument
+   * 
