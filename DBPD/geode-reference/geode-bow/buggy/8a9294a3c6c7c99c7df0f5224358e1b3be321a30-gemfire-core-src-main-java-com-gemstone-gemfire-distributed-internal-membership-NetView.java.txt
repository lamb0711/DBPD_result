first cut for HealthMonitor

+import java.util.HashMap;
+import java.util.Random;
+import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberFactory;
+import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
+import com.gemstone.gemfire.distributed.internal.membership.gms.messages.SuspectRequest;
+import com.gemstone.gemfire.distributed.internal.membership.gms.mgr.GMSMembershipManager;
-
- * The NetView class represents a membership view.  Note that 
+ * The NetView class represents a membership view. Note that
- * @since 5.5 
+ * @since 5.5
-  
+  static final private Random rd = new Random();
+
+  // TODO:need to clear this
+  /** membership logger */
+  private static final Logger logger = Services.getLogger();
+
+    int seed = creator.hashCode() + (int) System.currentTimeMillis();
-    this.viewId = (int)viewId;
+    this.viewId = (int) viewId;
-  public NetView(InternalDistributedMember creator,
-      int viewId,
-      List<InternalDistributedMember> mbrs,
-      List<InternalDistributedMember> shutdowns,
+
+  public NetView(InternalDistributedMember creator, int viewId, List<InternalDistributedMember> mbrs, List<InternalDistributedMember> shutdowns,
-  
+
-  
+
-  
+
-  
+
-    for (InternalDistributedMember mbr: this.members) {
+    for (InternalDistributedMember mbr : this.members) {
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    for (InternalDistributedMember mbr: this.members) {
+    for (InternalDistributedMember mbr : this.members) {
-  
+
-    synchronized(members) {
-      for (InternalDistributedMember addr: members) {
+    synchronized (members) {
+      for (InternalDistributedMember addr : members) {
+  /***
+   * This functions returns the list of all preferred coordinators.
+   * One random member from list of non-preferred member list. It make
+   * sure that random member is not in suspected Set.
+   * And local member.
+   * 
+   * @param filter Suspect member set.
+   * @param localAddress
+   * @return list of preferred coordinators
+   */
+  public List<InternalDistributedMember> getAllPreferredCoordinators(Set<InternalDistributedMember> filter, InternalDistributedMember localAddress) {
+    List<InternalDistributedMember> results = new ArrayList<InternalDistributedMember>();
+    List<InternalDistributedMember> notPreferredCoordinatorList = new ArrayList<InternalDistributedMember>();
+
+    synchronized (members) {
+      for (InternalDistributedMember addr : members) {
+        if (addr.equals(localAddress)) {
+          continue;// this is must to add
+        }
+        if (addr.getNetMember().preferredForCoordinator()) {
+          results.add(addr);// add all preferred coordinator
+        } else if (!filter.contains(addr)) {
+          notPreferredCoordinatorList.add(addr);
+        }
+      }
+
+      results.add(localAddress);// to add local address
+
+      if (notPreferredCoordinatorList.size() > 0) {
+        int idx = rd.nextInt(notPreferredCoordinatorList.size());
+        results.add(notPreferredCoordinatorList.get(idx)); // to add non preferred local address
+      }
+    }
+
+    return results;
+  }
+
-  
+
-  
+
-    return (firstNonPreferred == null  ||  firstNonPreferred.equals(who));
+    return (firstNonPreferred == null || firstNonPreferred.equals(who));
-  
+
-    for (InternalDistributedMember mbr: this.members) {
+    for (InternalDistributedMember mbr : this.members) {
-        if (lead != null  &&  mbr.equals(lead)) {
+        if (lead != null && mbr.equals(lead)) {
-    for (InternalDistributedMember mbr: this.crashedMembers) {
-      if ( !oldView.contains(mbr)) {
+    for (InternalDistributedMember mbr : this.crashedMembers) {
+      if (!oldView.contains(mbr)) {
-        if (lead != null  &&  mbr.equals(lead)) {
+        if (lead != null && mbr.equals(lead)) {
-  
-   * that were members of the given view.  Admin-only members are
+   * that were members of the given view. Admin-only members are
-    for (InternalDistributedMember mbr: this.crashedMembers) {
-      if ((mbr.getVmKind() != DistributionManager.ADMIN_ONLY_DM_TYPE)
-          && oldView.contains(mbr)) {
+    for (InternalDistributedMember mbr : this.crashedMembers) {
+      if ((mbr.getVmKind() != DistributionManager.ADMIN_ONLY_DM_TYPE) && oldView.contains(mbr)) {
-  
+
-    for (InternalDistributedMember mbr: this.crashedMembers) {
-      if ( !oldView.contains(mbr)) {
+    for (InternalDistributedMember mbr : this.crashedMembers) {
+      if (!oldView.contains(mbr)) {
-        if (lead != null  &&  mbr.equals(lead)) {
+        if (lead != null && mbr.equals(lead)) {
-  
+
-    
+
-    for (InternalDistributedMember mbr: this.members) {
-      if (!first) sb.append(", ");
+    for (InternalDistributedMember mbr : this.members) {
+      if (!first)
+        sb.append(", ");
-    if ( !this.shutdownMembers.isEmpty() ) {
+    if (!this.shutdownMembers.isEmpty()) {
-      for (InternalDistributedMember mbr: this.shutdownMembers) {
-        if (!first) sb.append(", ");
+      for (InternalDistributedMember mbr : this.shutdownMembers) {
+        if (!first)
+          sb.append(", ");
-    if ( !this.crashedMembers.isEmpty() ) {
+    if (!this.crashedMembers.isEmpty()) {
-      for (InternalDistributedMember mbr: this.crashedMembers) {
-        if (!first) sb.append(", ");
+      for (InternalDistributedMember mbr : this.crashedMembers) {
+        if (!first)
+          sb.append(", ");
-    if ( !(arg0 instanceof NetView) ) {
+    if (!(arg0 instanceof NetView)) {
-    return this.members.equals(((NetView)arg0).getMembers());
+    return this.members.equals(((NetView) arg0).getMembers());
+
-  
+
-      for (int i=0; i < size; i++) {
+      for (int i = 0; i < size; i++) {
-
