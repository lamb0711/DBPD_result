GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalRegion;
+import org.apache.geode.internal.cache.persistence.DiskRecoveryStore;
-    final LocalRegion rgn = event.getRegion();
+    final InternalRegion rgn = event.getRegion();
-        rgn.getRegionMap().removeEntry(event.getKey(), this, true, event, rgn);
+        ((DiskRecoveryStore) rgn).getRegionMap().removeEntry(event.getKey(), this, true, event,
+            rgn);
-  public void txDidDestroy(long currTime) {
-    setLastModifiedAndAccessedTimes(currTime, currTime);
+  public void txDidDestroy(long currentTime) {
+    setLastModifiedAndAccessedTimes(currentTime, currentTime);
-  public void removePhase1(LocalRegion r, boolean clear) throws RegionClearedException {
+  public void removePhase1(InternalRegion region, boolean clear) throws RegionClearedException {
-  public void makeTombstone(LocalRegion r, VersionTag version) throws RegionClearedException {
-    assert r.getVersionVector() != null;
+  public void makeTombstone(InternalRegion region, VersionTag version)
+      throws RegionClearedException {
+    assert region.getVersionVector() != null;
-    if (r.getServerProxy() == null && r.getVersionVector().isTombstoneTooOld(version.getMemberID(),
-        version.getRegionVersion())) {
+    if (region.getServerProxy() == null && region.getVersionVector()
+        .isTombstoneTooOld(version.getMemberID(), version.getRegionVersion())) {
-        basicMakeTombstone(r);
-        r.incTombstoneCount(1);
+        basicMakeTombstone(region);
+        region.getCachePerfStats().incTombstoneCount(1);
-      r.getRegionMap().removeTombstone(this, version, false, true);
+      ((DiskRecoveryStore) region).getRegionMap().removeTombstone(this, version, false, true);
-        r.unscheduleTombstone(this);
+        region.unscheduleTombstone(this);
-      basicMakeTombstone(r);
-      r.scheduleTombstone(this, version);
+      basicMakeTombstone(region);
+      region.scheduleTombstone(this, version);
-        r.getCachePerfStats().incEntryCount(1);
+        region.getCachePerfStats().incEntryCount(1);
-  private void basicMakeTombstone(LocalRegion r) throws RegionClearedException {
+  private void basicMakeTombstone(InternalRegion region) throws RegionClearedException {
-      setValue(r, Token.TOMBSTONE);
+      setValue(region, Token.TOMBSTONE);
-      makeTombstone((LocalRegion) e.getRegion(), ((InternalCacheEvent) e).getVersionTag());
+      makeTombstone((InternalRegion) e.getRegion(), ((InternalCacheEvent) e).getVersionTag());
-  public boolean fillInValue(LocalRegion region,
+  public boolean fillInValue(InternalRegion region,
-  public boolean isOverflowedToDisk(LocalRegion r, DistributedRegion.DiskPosition dp) {
+  public boolean isOverflowedToDisk(InternalRegion region,
+      DistributedRegion.DiskPosition diskPosition) {
-    Object result = _getValueRetain(context, true);
+    Object result = getValueRetain(context, true);
-    Object result = _getValueRetain(context, true);
+    Object result = getValueRetain(context, true);
-    return context instanceof LocalRegion
-        && ((LocalRegion) context).isThisRegionBeingClosedOrDestroyed();
+    return context instanceof InternalRegion
+        && ((InternalRegion) context).isThisRegionBeingClosedOrDestroyed();
-    Object v = _getValueRetain(context, true);
+    Object v = getValueRetain(context, true);
-  public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner) {
-    return getValueInVM(owner);
+  public Object getValueInVMOrDiskWithoutFaultIn(InternalRegion region) {
+    return getValueInVM(region);
-  public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
+  public Object getValueOffHeapOrDiskWithoutFaultIn(InternalRegion region) {
-    Object result = _getValueRetain(owner, true);
+    Object result = getValueRetain(region, true);
-  public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
+  public Object getValueOnDisk(InternalRegion region) throws EntryNotFoundException {
-  public Object getSerializedValueOnDisk(final LocalRegion localRegion)
+  public Object getSerializedValueOnDisk(final InternalRegion region)
-  public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+  public Object getValueOnDiskOrBuffer(InternalRegion region) throws EntryNotFoundException {
-  public boolean initialImagePut(final LocalRegion region, final long lastModified, Object newValue,
-      boolean wasRecovered, boolean acceptedVersionTag) throws RegionClearedException {
+  public boolean initialImagePut(final InternalRegion region, final long lastModified,
+      Object newValue, boolean wasRecovered, boolean acceptedVersionTag)
+      throws RegionClearedException {
-  public boolean initialImageInit(final LocalRegion region, final long lastModified,
+  public boolean initialImageInit(final InternalRegion region, final long lastModified,
-  public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+  public boolean destroy(InternalRegion region, EntryEventImpl event, boolean inTokenMode,
-    Object curValue = _getValueRetain(region, true);
+    Object curValue = getValueRetain(region, true);
-      @Unretained Object actualValue, LocalRegion lr) {
+      @Unretained Object actualValue, InternalRegion region) {
-          lr.getAttributes().getOffHeap() && lr.getAttributes().getCompressor() != null;
+          region.getAttributes().getOffHeap() && region.getAttributes().getCompressor() != null;
-  public Object _getValue() {
+  public Object getValue() {
-  public synchronized void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {
+  public synchronized void decRefCount(NewLRUClockHand lruList, InternalRegion region) {
-        if (lr != null && lr.isEntryExpiryPossible()) {
-          lr.addExpiryTaskIfAbsent(this);
+        if (region != null && region.isEntryExpiryPossible()) {
+          region.addExpiryTaskIfAbsent(this);
-    return _getValueRetain(null, false);
+    return getValueRetain(null, false);
-    sb.append("key=").append(getKey()).append("; rawValue=").append(_getValue());
+    sb.append("key=").append(getKey()).append("; rawValue=").append(getValue());
-  public VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region,
-      EntryEventImpl event) {
+  public VersionTag generateVersionTag(VersionSource member, boolean withDelta,
+      InternalRegion region, EntryEventImpl event) {
-      LocalRegion r = event.getLocalRegion();
+      InternalRegion r = event.getLocalRegion();
-  protected void basicProcessVersionTag(LocalRegion region, VersionTag tag,
+  protected void basicProcessVersionTag(InternalRegion region, VersionTag tag,
-  private void applyVersionTag(LocalRegion region, VersionStamp stamp, VersionTag tag,
+  private void applyVersionTag(InternalRegion region, VersionStamp stamp, VersionTag tag,
-  private boolean checkForConflict(LocalRegion region, VersionStamp stamp, VersionTag tag,
+  private boolean checkForConflict(InternalRegion region, VersionStamp stamp, VersionTag tag,
-  private boolean isExpiredTombstone(LocalRegion region, long timestamp, boolean isTombstone) {
+  private boolean isExpiredTombstone(InternalRegion region, long timestamp, boolean isTombstone) {
-  private boolean overwritingOldTombstone(LocalRegion region, VersionStamp stamp, VersionTag tag,
+  private boolean overwritingOldTombstone(InternalRegion region, VersionStamp stamp, VersionTag tag,
-  protected void persistConflictingTag(LocalRegion region, VersionTag tag) {
+  protected void persistConflictingTag(InternalRegion region, VersionTag tag) {
-  private void checkForDeltaConflict(LocalRegion region, long stampVersion, long tagVersion,
+  private void checkForDeltaConflict(InternalRegion region, long stampVersion, long tagVersion,
-    // Gateway tags are installed in the server-side LocalRegion cache
+    // Gateway tags are installed in the server-side InternalRegion cache
-  public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+  public Object getValueRetain(RegionEntryContext context, boolean decompress) {
-      return decompress(context, _getValue());
+      return decompress(context, getValue());
-      return _getValue();
+      return getValue();
