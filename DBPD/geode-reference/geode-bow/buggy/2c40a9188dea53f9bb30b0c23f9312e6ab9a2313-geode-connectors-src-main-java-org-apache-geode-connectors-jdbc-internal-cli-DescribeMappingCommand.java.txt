GEODE-6365: Add server group support for list and destroy jdbc-mapping (#3175)

Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>




-import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.connectors.util.internal.MappingCommandUtils;
-  private static final String CREATE_MAPPING__GROUPS_NAME__HELP =
+  private static final String DESCRIBE_MAPPING__GROUPS_NAME__HELP =
-          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
+          help = DESCRIBE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
-    CacheConfig result = configService.getCacheConfig(group);
-    if (result == null) {
-      throw new PreconditionException(
-          "Cache Configuration not found"
-              + ((group.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)) ? "."
-                  : " for group " + group + "."));
-    }
-    return result;
-  }
-
-  private ArrayList<DescribeMappingResult> getMappingsFromRegionConfig(CacheConfig cacheConfig,
-      RegionConfig regionConfig, String group) {
-    CacheConfig.AsyncEventQueue asyncEventQueue = findAsyncEventQueue(cacheConfig, regionConfig);
-    ArrayList<DescribeMappingResult> results = new ArrayList<>();
-    for (CacheElement element : regionConfig.getCustomRegionElements()) {
-      if (element instanceof RegionMapping) {
-        results.add(buildDescribeMappingResult((RegionMapping) element, regionConfig.getName(),
-            asyncEventQueue == null, group));
-      }
-    }
-    return results;
-  }
-
-  private CacheConfig.AsyncEventQueue findAsyncEventQueue(CacheConfig cacheConfig,
-      RegionConfig regionConfig) {
-    for (CacheConfig.AsyncEventQueue queue : cacheConfig.getAsyncEventQueues()) {
-      if (queue.getId()
-          .equals(CreateMappingCommand.createAsyncEventQueueName(regionConfig.getName()))) {
-        return queue;
-      }
-    }
-    return null;
+    return MappingCommandUtils.getCacheConfig(configService, group);
-  public ConfigurationPersistenceService checkForClusterConfiguration()
+  private ArrayList<DescribeMappingResult> getMappingsFromRegionConfig(CacheConfig cacheConfig,
+      RegionConfig regionConfig, String group) {
+    ArrayList<DescribeMappingResult> results = new ArrayList<>();
+    for (RegionMapping mapping : MappingCommandUtils.getMappingsFromRegionConfig(cacheConfig,
+        regionConfig,
+        group)) {
+      results.add(buildDescribeMappingResult(mapping, regionConfig.getName(),
+          MappingCommandUtils.isMappingSynchronous(cacheConfig, regionConfig), group));
+    }
+    return results;
+  }
+
+  private ConfigurationPersistenceService checkForClusterConfiguration()
-    RegionConfig regionConfig = findRegionConfig(cacheConfig, regionName);
-    if (regionConfig == null) {
-      String groupClause = "A region named " + regionName + " must already exist"
-          + (!groupName.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)
-              ? " for group " + groupName + "." : ".");
-      throw new PreconditionException(groupClause);
-    }
-    return regionConfig;
-  }
-  private RegionConfig findRegionConfig(CacheConfig cacheConfig, String regionName) {
-    return cacheConfig.getRegions().stream()
-        .filter(region -> region.getName().equals(regionName)).findFirst().orElse(null);
+    return MappingCommandUtils.checkForRegion(regionName, cacheConfig, groupName);
