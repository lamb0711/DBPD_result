GEODE-6861: separate static config object from runtime info in the Clâ€¦ (#3754)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* use ConfigRealizer to retrieve the runtime information for configuration on each member
* list result would return a List of Response object which has a configuration object and a list runtime objects
* use existing object for runtime member info and move them to geode-management module.

+import org.apache.commons.lang3.StringUtils;
+
-        findMembers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
-    Set<DistributedMember> membersOfNewGroup = findMembers(config.getConfigGroup());
+        findServers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
+    Set<DistributedMember> membersOfNewGroup = findServers(config.getConfigGroup());
-  public Set<DistributedMember> findMembers(String... groups) {
-    if (groups == null || groups.length == 0) {
-      throw new IllegalArgumentException("groups cannot be empty");
+  public Set<DistributedMember> findServers(String... groups) {
+    return findMembers(false, groups);
+  }
+
+  public Set<DistributedMember> findMembers(String id, String... groups) {
+    if (StringUtils.isNotBlank(id)) {
+      return getAllServersAndLocators().stream().filter(m -> m.getName().equals(id))
+          .collect(Collectors.toSet());
-    Set<DistributedMember> allMembers = getAllServers();
+    return findMembers(true, groups);
+  }
+
+  public Set<DistributedMember> findMembers(boolean includeLocators, String... groups) {
+    if (groups == null || groups.length == 0) {
+      groups = new String[] {CacheElement.CLUSTER};
+    }
+
+    Set<DistributedMember> all = includeLocators ? getAllServersAndLocators() : getAllServers();
-      return allMembers;
+      return all;
-          allMembers.stream().filter(m -> m.getGroups() != null && m.getGroups().contains(group))
+          all.stream().filter(m -> m.getGroups() != null && m.getGroups().contains(group))
+
+  Set<DistributedMember> getAllServersAndLocators() {
+    return cache.getDistributionManager().getDistributionManagerIds()
+        .stream().map(DistributedMember.class::cast).collect(Collectors.toSet());
+  }
