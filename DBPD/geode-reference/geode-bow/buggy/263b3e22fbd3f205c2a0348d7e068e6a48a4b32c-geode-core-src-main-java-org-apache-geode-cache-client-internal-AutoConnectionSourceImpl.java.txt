GEODE-7634: create an ArchUnitTest that asserts that geode-core only â€¦ (#4549)

* GEODE-7634: create an ArchUnitTest that asserts that geode-core only uses the membership API

creating a new test to enforce use of membership APIs.  There are a few
exceptions in test code, plus others that aren't in the "integration
test" source set.

* removing test dependencies and fixing crashDistributedSystem method

* moved membership API classes to membership.api package and fixed OOME

* move address verification class to tcp-server module and subclass in membership

* rebasing on Ernie's GeodeGlossary stuff

-import org.apache.geode.distributed.internal.membership.gms.membership.HostAddress;
+import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;
-  private static final Comparator<HostAddress> SOCKET_ADDRESS_COMPARATOR =
+  private static final Comparator<LocatorAddress> SOCKET_ADDRESS_COMPARATOR =
-  private final List<HostAddress> initialLocators;
+  private final List<LocatorAddress> initialLocators;
-  public AutoConnectionSourceImpl(List<HostAddress> contacts, String serverGroup,
+  public AutoConnectionSourceImpl(List<LocatorAddress> contacts, String serverGroup,
-  private ServerLocationResponse queryOneLocator(HostAddress locator,
+  private ServerLocationResponse queryOneLocator(LocatorAddress locator,
-  ServerLocationResponse queryOneLocatorUsingConnection(HostAddress locator,
+  ServerLocationResponse queryOneLocatorUsingConnection(LocatorAddress locator,
-  protected void updateLocatorInLocatorList(HostAddress locator) {
+  protected void updateLocatorInLocatorList(LocatorAddress locator) {
-      List<HostAddress> newLocatorsList = new ArrayList<>();
+      List<LocatorAddress> newLocatorsList = new ArrayList<>();
-      for (HostAddress tloc : locatorList.getLocatorAddresses()) {
+      for (LocatorAddress tloc : locatorList.getLocatorAddresses()) {
-          HostAddress hostAddress = new HostAddress(changeLoc, locator.getHostName());
+          LocatorAddress hostAddress = new LocatorAddress(changeLoc, locator.getHostName());
-      HostAddress hostAddress = (HostAddress) controllerItr.next();
+      LocatorAddress hostAddress = (LocatorAddress) controllerItr.next();
-    List<HostAddress> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
-    List<HostAddress> newOnlineLocators = new ArrayList<>(locatorResponse.size());
+    List<LocatorAddress> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
+    List<LocatorAddress> newOnlineLocators = new ArrayList<>(locatorResponse.size());
-    Set<HostAddress> badLocators = new HashSet<>(initialLocators);
+    Set<LocatorAddress> badLocators = new HashSet<>(initialLocators);
-      HostAddress hostAddress = new HostAddress(address, locator.getHostName());
+      LocatorAddress hostAddress = new LocatorAddress(address, locator.getHostName());
-  protected void addbadLocators(List<HostAddress> newLocators, Set<HostAddress> badLocators) {
-    for (HostAddress badloc : badLocators) {
+  protected void addbadLocators(List<LocatorAddress> newLocators, Set<LocatorAddress> badLocators) {
+    for (LocatorAddress badloc : badLocators) {
-      for (HostAddress goodloc : newLocators) {
+      for (LocatorAddress goodloc : newLocators) {
-    protected final List<HostAddress> locators;
+    protected final List<LocatorAddress> locators;
-    LocatorList(List<HostAddress> locators) {
+    LocatorList(List<LocatorAddress> locators) {
-      for (HostAddress la : locators) {
+      for (LocatorAddress la : locators) {
-    List<HostAddress> getLocatorAddresses() {
+    List<LocatorAddress> getLocatorAddresses() {
-    public Iterator<HostAddress> iterator() {
+    public Iterator<LocatorAddress> iterator() {
-    protected class LocatorIterator implements Iterator<HostAddress> {
+    protected class LocatorIterator implements Iterator<LocatorAddress> {
-      public HostAddress next() {
+      public LocatorAddress next() {
-          HostAddress nextLocator = locators.get(index);
+          LocatorAddress nextLocator = locators.get(index);
