GEODE-4996: Addressed NPE by always using the region entry key


+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.VMCachedDeserializable;
+import org.apache.geode.internal.util.BlobHelper;
+  public Object updateHAEventWrapper(InternalDistributedMember sender,
+      CachedDeserializable newValueCd, String regionName) {
+    Object inputValue;
+    try {
+      inputValue = BlobHelper.deserializeBlob(newValueCd.getSerializedValue(),
+          sender.getVersionObject(), null);
+      newValueCd = new VMCachedDeserializable(inputValue, newValueCd.getSizeInBytes());
+    } catch (IOException | ClassNotFoundException e) {
+      throw new RuntimeException("Unable to deserialize HA event for region " + regionName);
+    }
+    if (inputValue instanceof HAEventWrapper) {
+      HAEventWrapper inputHaEventWrapper = (HAEventWrapper) inputValue;
+      // Key was removed at sender side so not putting it into the HARegion
+      if (inputHaEventWrapper.getClientUpdateMessage() == null) {
+        return null;
+      }
+      // Getting the instance from singleton CCN..This assumes only one bridge
+      // server in the VM
+      HAContainerWrapper haContainer =
+          (HAContainerWrapper) CacheClientNotifier.getInstance().getHaContainer();
+      if (haContainer == null) {
+        return null;
+      }
+      HAEventWrapper entryHaEventWrapper = null;
+      // synchronized (haContainer) {
+      do {
+        ClientUpdateMessageImpl entryMessage = (ClientUpdateMessageImpl) haContainer
+            .putIfAbsent(inputHaEventWrapper, inputHaEventWrapper.getClientUpdateMessage());
+        if (entryMessage != null) {
+          entryHaEventWrapper = (HAEventWrapper) haContainer.getKey(inputHaEventWrapper);
+          if (entryHaEventWrapper == null) {
+            continue;
+          }
+          synchronized (entryHaEventWrapper) {
+            if (haContainer.getKey(entryHaEventWrapper) != null) {
+              entryHaEventWrapper.incAndGetReferenceCount();
+              // If the input and entry HAEventWrappers are not the same (which is the normal
+              // case), add the CQs and interest list from the input to the entry and create a new
+              // value from the entry.
+              if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
+                addClientCQsAndInterestList(entryMessage, inputHaEventWrapper, haContainer,
+                    regionName);
+                inputHaEventWrapper.setClientUpdateMessage(null);
+                newValueCd =
+                    new VMCachedDeserializable(entryHaEventWrapper, newValueCd.getSizeInBytes());
+              }
+            } else {
+              entryHaEventWrapper = null;
+            }
+          }
+        } else { // putIfAbsent successful
+          entryHaEventWrapper = (HAEventWrapper) haContainer.getKey(inputHaEventWrapper);
+          synchronized (entryHaEventWrapper) {
+            entryHaEventWrapper.incAndGetReferenceCount();
+            entryHaEventWrapper.setHAContainer(haContainer);
+            // If the input and entry HAEventWrappers are not the same (which is not the normal
+            // case), get the entry message, add the CQs and interest list from the input to the
+            // entry and create a new value from the entry.
+            if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
+              entryMessage = (ClientUpdateMessageImpl) haContainer.get(inputHaEventWrapper);
+              addClientCQsAndInterestList(entryMessage, inputHaEventWrapper, haContainer,
+                  regionName);
+              inputHaEventWrapper.setClientUpdateMessage(null);
+              newValueCd =
+                  new VMCachedDeserializable(entryHaEventWrapper, newValueCd.getSizeInBytes());
+            }
+            entryHaEventWrapper.setClientUpdateMessage(null);
+            entryHaEventWrapper.setIsRefFromHAContainer(true);
+          }
+          break;
+        }
+        // try until we either get a reference to HAEventWrapper from
+        // HAContainer or successfully put one into it.
+      } while (entryHaEventWrapper == null);
+    }
+    return newValueCd;
+  }
+
-  public static void addClientCQsAndInterestList(ClientUpdateMessageImpl msg,
+  private void addClientCQsAndInterestList(ClientUpdateMessageImpl msg,
