GEODE-1377: Initial move of system properties from private to public

+import static com.gemstone.gemfire.distributed.SystemConfigurationProperties.*;
+
-  implements AgentConfig {
+    implements AgentConfig {
-  /** Command-line arg to enable agent debugging */
+  /**
+   * Command-line arg to enable agent debugging
+   */
-  /** The name of the "propertyFile" property. May specify as cmd-line arg */
+  /**
+   * The name of the "propertyFile" property. May specify as cmd-line arg
+   */
-  /** The name of the "gfAgentPropertyFile" property, can be specified as System Property */
-   public static final String AGENT_PROPSFILE_PROPERTY_NAME = "gfAgentPropertyFile";
+  /**
+   * The name of the "gfAgentPropertyFile" property, can be specified as System Property
+   */
+  public static final String AGENT_PROPSFILE_PROPERTY_NAME = "gfAgentPropertyFile";
-  /** The name of the "locator.host-" property */
+  /**
+   * The name of the "locator.host-" property
+   */
-  /** The name of the "locator.port-" property */
+  /**
+   * The name of the "locator.port-" property
+   */
-  /** The name of the "locator.product-directory-" property */
+  /**
+   * The name of the "locator.product-directory-" property
+   */
-  /** The name of the "locator.working-directory-" property */
+  /**
+   * The name of the "locator.working-directory-" property
+   */
-  /** The name of the "locator.remote-command-" property */
+  /**
+   * The name of the "locator.remote-command-" property
+   */
-  /** The name of the "locator.bind-address-" property */
+  /**
+   * The name of the "locator.bind-address-" property
+   */
-  /** the properties used in configuring a locator's distributed system */
+  /**
+   * the properties used in configuring a locator's distributed system
+   */
-  /** The default log file for stand-alone JMX agents */
+  /**
+   * The default log file for stand-alone JMX agents
+   */
-  /** The default startup log file to be used by agent launcher */
+  /**
+   * The default startup log file to be used by agent launcher
+   */
-                      String.valueOf(DEFAULT_AUTO_CONNECT));
+        String.valueOf(DEFAULT_AUTO_CONNECT));
-                      String.valueOf(DEFAULT_HTTP_ENABLED));
+        String.valueOf(DEFAULT_HTTP_ENABLED));
-                      String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
+        String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
-                      String.valueOf(DEFAULT_HTTP_PORT));
+        String.valueOf(DEFAULT_HTTP_PORT));
-                      String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
-                      String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
-                      String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
-                      String.valueOf(DEFAULT_RMI_ENABLED));
+        String.valueOf(DEFAULT_RMI_ENABLED));
-                      String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
+        String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
-                      String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
+        String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
-                      String.valueOf(DEFAULT_RMI_PORT));
+        String.valueOf(DEFAULT_RMI_PORT));
-                      String.valueOf(DEFAULT_RMI_SERVER_PORT));
+        String.valueOf(DEFAULT_RMI_SERVER_PORT));
-                      String.valueOf(DEFAULT_SNMP_ENABLED));
+        String.valueOf(DEFAULT_SNMP_ENABLED));
-                      String.valueOf(DEFAULT_SNMP_DIRECTORY));
+        String.valueOf(DEFAULT_SNMP_DIRECTORY));
-                      String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
+        String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
-                      String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
+        String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
-                      String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
+        String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
-                      String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
+        String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
-                      String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-
+        String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(MCAST_PORT_NAME,
+    props.setProperty(MCAST_PORT,
-    props.setProperty(MCAST_ADDRESS_NAME,
+    props.setProperty(MCAST_ADDRESS,
-    props.setProperty(LOCATORS_NAME,
+    props.setProperty(LOCATORS,
-    props.setProperty(BIND_ADDRESS_NAME,
+    props.setProperty(BIND_ADDRESS,
-  /** Does agent automatically connect to the distributed system? */
+  /**
+   * Does agent automatically connect to the distributed system?
+   */
-  /** True if Agent adaptors should use SSL */
+  /**
+   * True if Agent adaptors should use SSL
+   */
-  /** The SSL Protocols that the Agent adaptors will use */
+  /**
+   * The SSL Protocols that the Agent adaptors will use
+   */
-  /** The SSL Ciphers that the Agent adaptors will use */
+  /**
+   * The SSL Ciphers that the Agent adaptors will use
+   */
-  /** True if Agent adaptors require authentication when SSL is enabled */
+  /**
+   * True if Agent adaptors require authentication when SSL is enabled
+   */
-  /** True if HttpAdaptor authentication is enabled */
+  /**
+   * True if HttpAdaptor authentication is enabled
+   */
-  /** The login user for HttpAdaptor authentication */
+  /**
+   * The login user for HttpAdaptor authentication
+   */
-  /** The login password for HttpAdaptor authentication */
+  /**
+   * The login password for HttpAdaptor authentication
+   */
-  /** True if the HttpAdaptor is enabled */
+  /**
+   * True if the HttpAdaptor is enabled
+   */
-  /** The port for the MX4J HttpAdatper */
+  /**
+   * The port for the MX4J HttpAdatper
+   */
-  /** The host for the MX4J HttpAdatper */
+  /**
+   * The host for the MX4J HttpAdatper
+   */
-  /** True if the RMIConnectorServer is enabled */
+  /**
+   * True if the RMIConnectorServer is enabled
+   */
-  /** True if the Agent is to create its own RMI registry */
+  /**
+   * True if the Agent is to create its own RMI registry
+   */
-  /** The host for the MX4J RMIConnectorServer */
+  /**
+   * The host for the MX4J RMIConnectorServer
+   */
-  /** The port for the RMI Registry created by the Agent */
+  /**
+   * The port for the RMI Registry created by the Agent
+   */
-  /** The port for the MX4J RMIConnectorServer */
+  /**
+   * The port for the MX4J RMIConnectorServer
+   */
-  /** True if the SnmpAdaptor is enabled */
+  /**
+   * True if the SnmpAdaptor is enabled
+   */
-  /** The bind address for sockets used by the SNMP adapter */
+  /**
+   * The bind address for sockets used by the SNMP adapter
+   */
-  /** Path to the directory containing the SNMP Adaptor and its sub-dirs */
+  /**
+   * Path to the directory containing the SNMP Adaptor and its sub-dirs
+   */
-  /** Is Email notification enabled */
+  /**
+   * Is Email notification enabled
+   */
-  /** Email notification from: emailID */
+  /**
+   * Email notification from: emailID
+   */
-  /** The host name of the mail server to be used for email communication.  */
+  /**
+   * The host name of the mail server to be used for email communication.
+   */
-  /** Email notification to: emailIDs list */
+  /**
+   * Email notification to: emailIDs list
+   */
-  /** State Save File Name */
+  /**
+   * State Save File Name
+   */
-  /** Original command line arguments */
+  /**
+   * Original command line arguments
+   */
-  /** The <code>Agent</code> that is configured by this
-   * <code>AgentConfigImpl</code> */
+  /**
+   * The <code>Agent</code> that is configured by this
+   * <code>AgentConfigImpl</code>
+   */
-   * @param args  array of non-default configuration arguments
+   * @param args array of non-default configuration arguments
-   * @param props  overriding non-default configuration properties
+   * @param props overriding non-default configuration properties
-   * @param propFile  the file to load configuration properties from
+   * @param propFile the file to load configuration properties from
-      }
-      catch (java.io.IOException e) {
+      } catch (java.io.IOException e) {
-    }
-    else {
+    } else {
-      throw new IllegalStateException(LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT.toLocalizedString());
-        .toLocalizedString(this.url);
+          .toLocalizedString(this.url);
-                     retrievePropertyFile());
+            retrievePropertyFile());
-      String pn = (String)e.nextElement();
+      String pn = (String) e.nextElement();
-
-   * @param includeDSProperties
-   *        Should distributed system properties be included in the
-   *        <code>Properties</code> object?  See bug 32682.
-   *
+   * @param includeDSProperties Should distributed system properties be included in the
+   *                            <code>Properties</code> object?  See bug 32682.
-      for (Iterator iter = sslProps.keySet().iterator(); iter.hasNext();) {
+      for (Iterator iter = sslProps.keySet().iterator(); iter.hasNext(); ) {
-        props.setProperty("ssl-property-" + sequence, key+"="+OBFUSCATED_STRING);
+        props.setProperty("ssl-property-" + sequence, key + "=" + OBFUSCATED_STRING);
-        this.getDistributionLocatorConfigs();
+          this.getDistributionLocatorConfigs();
-//        props.setProperty(LOCATOR_DS_PROPERTIES + i,
-//                          getdsPropertiesString(locator));
+        //        props.setProperty(LOCATOR_DS_PROPERTIES + i,
+        //                          getdsPropertiesString(locator));
-//       props.setProperty(SYSTEM_ID_NAME, toString(getSystemId()));
-      props.setProperty(MCAST_PORT_NAME, toString(MCAST_PORT_NAME, getMcastPort()));
-      props.setProperty(MCAST_ADDRESS_NAME, toString(MCAST_ADDRESS_NAME, getMcastAddress()));
-      props.setProperty(LOCATORS_NAME, toString(LOCATORS_NAME, getLocators()));
+      //       props.setProperty(SYSTEM_ID_NAME, toString(getSystemId()));
+      props.setProperty(MCAST_PORT, toString(MCAST_PORT, getMcastPort()));
+      props.setProperty(MCAST_ADDRESS, toString(MCAST_ADDRESS, getMcastAddress()));
+      props.setProperty(LOCATORS, toString(LOCATORS, getLocators()));
-      props.setProperty(TCP_PORT_NAME, ""+getTcpPort());
-      props.setProperty(BIND_ADDRESS_NAME, toString(BIND_ADDRESS_NAME, getBindAddress()));
+      props.setProperty(TCP_PORT, "" + getTcpPort());
+      props.setProperty(BIND_ADDRESS, toString(BIND_ADDRESS, getBindAddress()));
-   *
+   * <p>
-      String key = "ssl-property-"+i;
+      String key = "ssl-property-" + i;
-      if (value == null) break;
+      if (value == null)
+        break;
-      if (!st.hasMoreTokens()) break;
+      if (!st.hasMoreTokens())
+        break;
-      if (!st.hasMoreTokens()) break;
+      if (!st.hasMoreTokens())
+        break;
-            AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME),
-            DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
-    this.emailNotificationHostName= validateNonEmptyString(props.getProperty(
-    		AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME),
-            DEFAULT_EMAIL_HOST);
-    this.emailNotificationFrom= validateNonEmptyString(props.getProperty(
-    		AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME),
-            DEFAULT_EMAIL_FROM);
-    this.emailNotificationToList= validateNonEmptyString(props.getProperty(
-    		AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME),
-            DEFAULT_EMAIL_TO_LIST);
+        AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME),
+        DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
+    this.emailNotificationHostName = validateNonEmptyString(props.getProperty(
+        AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME),
+        DEFAULT_EMAIL_HOST);
+    this.emailNotificationFrom = validateNonEmptyString(props.getProperty(
+        AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME),
+        DEFAULT_EMAIL_FROM);
+    this.emailNotificationToList = validateNonEmptyString(props.getProperty(
+        AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME),
+        DEFAULT_EMAIL_TO_LIST);
-    		AgentConfig.STATE_SAVE_FILE_NAME),
-            DEFAULT_STATE_SAVE_FILE);
+        AgentConfig.STATE_SAVE_FILE_NAME),
+        DEFAULT_STATE_SAVE_FILE);
-        if (isEmpty(hostProp)) break;
+        if (isEmpty(hostProp))
+          break;
-          this.createDistributionLocatorConfig();
+            this.createDistributionLocatorConfig();
+   *
+   *
-      || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME)))
-    {
+        || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {
+   *
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
-          url.toString()), e);
-      }
-      finally {
+            url.toString()), e);
+      } finally {
-   * @throws IllegalArgumentException
-   *         If <code>prop</code> is not a recognized agent
-   *         configuration property
+   * @throws IllegalArgumentException If <code>prop</code> is not a recognized agent
+   *                                  configuration property
-      return  LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_LARGE_THE_CURRENT_STATISTIC_ARCHIVE_FILE_CAN_GROW_BEFORE_IT_IS_CLOSED_AND_ARCHIVAL_ROLLS_ON_TO_A_NEW_FILE.toLocalizedString();
-    } else if (prop.equals(MCAST_PORT_NAME)) {
+      return LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_LARGE_THE_CURRENT_STATISTIC_ARCHIVE_FILE_CAN_GROW_BEFORE_IT_IS_CLOSED_AND_ARCHIVAL_ROLLS_ON_TO_A_NEW_FILE
+          .toLocalizedString();
+    } else if (prop.equals(MCAST_PORT)) {
-    } else if (prop.equals(MCAST_ADDRESS_NAME)) {
+    } else if (prop.equals(MCAST_ADDRESS)) {
-    } else if (prop.equals(BIND_ADDRESS_NAME)) {
+    } else if (prop.equals(BIND_ADDRESS)) {
-    } else if (prop.equals(TCP_PORT_NAME)) {
+    } else if (prop.equals(TCP_PORT)) {
-    } else if (prop.equals(LOCATORS_NAME)) {
+    } else if (prop.equals(LOCATORS)) {
-        return LocalizedStrings.AgentConfigImpl_ALLOWED_RANGE_OF_UDP_PORTS_TO_FORM_UNIQUE_MEMBERSHIP_ID.toLocalizedString();
-//     } else if (prop.equals(SYSTEM_ID_NAME)) {
-//       return "The id of the distributed system";
+      return LocalizedStrings.AgentConfigImpl_ALLOWED_RANGE_OF_UDP_PORTS_TO_FORM_UNIQUE_MEMBERSHIP_ID.toLocalizedString();
+      //     } else if (prop.equals(SYSTEM_ID_NAME)) {
+      //       return "The id of the distributed system";
-//     } else if (prop.equals(SYSTEM_NAME_NAME)) {
-//       return "The logical name of the distributed system";
+      //     } else if (prop.equals(SYSTEM_NAME_NAME)) {
+      //       return "The logical name of the distributed system";
-        return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT.toLocalizedString();
-        return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
-        return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
-        return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
-        return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE.toLocalizedString();
-        String value = args[i].substring(eq+1);
+        String value = args[i].substring(eq + 1);
-      }
-
-      else if (args[i].indexOf(AGENT_DEBUG) > 0) {
+      } else if (args[i].indexOf(AGENT_DEBUG) > 0) {
-        String value = args[i].substring(eq+1);
+        String value = args[i].substring(eq + 1);
-        String value = args[i].substring(eq+1);
+        String value = args[i].substring(eq + 1);
-  /** Returns the original command-line arguments. */
+  /**
+   * Returns the original command-line arguments.
+   */
-    /**
+  /**
-   * @throws IllegalArgumentException
-   *         If configuration is not valid
+   * @throws IllegalArgumentException If configuration is not valid
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT) }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
-  /** Returns defaultValue if value is empty. */
+  /**
+   * Returns defaultValue if value is empty.
+   */
-                                        String defaultValue) {
+      String defaultValue) {
-  /** Validates that systemHost can be used for an InetAddress. */
+  /**
+   * Validates that systemHost can be used for an InetAddress.
+   */
-  /** Returns null if productDir is empty; else converts it to File. */
+  /**
+   * Returns null if productDir is empty; else converts it to File.
+   */
-  /** Returns true if value parses as true; null value returns defaultValue. */
+  /**
+   * Returns true if value parses as true; null value returns defaultValue.
+   */
-    if (isEmpty(value)) return defaultValue;
+    if (isEmpty(value))
+      return defaultValue;
+
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT) }));
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-//  /**
-//   * Validates that snmpBindAddress is not null and then returns the string form of it.
-//   */
-//  private String validateSnmpBindAddress(InetAddress snmpBindAddress) {
-//    if (snmpBindAddress == null) {
-//      throw new IllegalArgumentException("SnmpBindAddress must not be null");
-//    }
-//    return toString(snmpBindAddress);
-//  }
+  //  /**
+  //   * Validates that snmpBindAddress is not null and then returns the string form of it.
+  //   */
+  //  private String validateSnmpBindAddress(InetAddress snmpBindAddress) {
+  //    if (snmpBindAddress == null) {
+  //      throw new IllegalArgumentException("SnmpBindAddress must not be null");
+  //    }
+  //    return toString(snmpBindAddress);
+  //  }
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+          .toLocalizedString(new Object[] { RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
-    }
-    else {
+    } else {
-//  /**
-//   * Validates that rmiBindAddress is not null and then returns the string form of it.
-//   */
-//  private String validateRmiBindAddress(InetAddress rmiBindAddress) {
-//    if (rmiBindAddress == null) {
-//      throw new IllegalArgumentException("RmiBindAddress must not be null");
-//    }
-//    return toString(rmiBindAddress);
-//  }
+  //  /**
+  //   * Validates that rmiBindAddress is not null and then returns the string form of it.
+  //   */
+  //  private String validateRmiBindAddress(InetAddress rmiBindAddress) {
+  //    if (rmiBindAddress == null) {
+  //      throw new IllegalArgumentException("RmiBindAddress must not be null");
+  //    }
+  //    return toString(rmiBindAddress);
+  //  }
-  /** Validates working directory is not null or empty. */
+  /**
+   * Validates working directory is not null or empty.
+   */
-   *         otherwise Null if no property file was found.
+   * otherwise Null if no property file was found.
-      }
-      catch (java.net.MalformedURLException ignore) {
+      } catch (java.net.MalformedURLException ignore) {
-        }
-        catch (java.net.MalformedURLException ignore) {
+        } catch (java.net.MalformedURLException ignore) {
-  
+
-   * @param obj   the object to convert to string
+   * @param obj the object to convert to string
-      if (obj == null) return "";
+      if (obj == null)
+        return "";
-  /** Returns string representation of the int. */
+  /**
+   * Returns string representation of the int.
+   */
-  /** Returns string representation of the boolean value. */
+  /**
+   * Returns string representation of the boolean value.
+   */
-  /** Returns true if the string is null or empty. */
+  /**
+   * Returns true if the string is null or empty.
+   */
+
+
+
+
+
+
+
+
+
-	  return this.stateSaveFile;
+    return this.stateSaveFile;
-	  checkReadOnly();
-	  this.stateSaveFile = file;
-	  configChanged();
+    checkReadOnly();
+    this.stateSaveFile = file;
+    configChanged();
-	  return this.isEmailNotificationEnabled;
+    return this.isEmailNotificationEnabled;
-	  checkReadOnly();
-	  this.isEmailNotificationEnabled = enabled;
-	  configChanged();
+    checkReadOnly();
+    this.isEmailNotificationEnabled = enabled;
+    configChanged();
-	  return this.emailNotificationFrom;
+    return this.emailNotificationFrom;
-	  this.emailNotificationFrom = emailID;
-	  configChanged();
+    this.emailNotificationFrom = emailID;
+    configChanged();
-	  return this.emailNotificationHostName;
+    return this.emailNotificationHostName;
-	  this.emailNotificationHostName = hostName;
-	  configChanged();
+    this.emailNotificationHostName = hostName;
+    configChanged();
-	  return this.emailNotificationToList;
+    return this.emailNotificationToList;
-	  this.emailNotificationToList = emailIDs;
-	  configChanged();
+    this.emailNotificationToList = emailIDs;
+    configChanged();
