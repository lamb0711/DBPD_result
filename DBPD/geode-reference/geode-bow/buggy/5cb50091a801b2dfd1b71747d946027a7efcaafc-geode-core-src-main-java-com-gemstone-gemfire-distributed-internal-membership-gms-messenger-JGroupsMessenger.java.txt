GEODE-1372 Fixed review comments.

Added api docs. Removed statis in GMSEncrpt and made that functionality
in GMSLocator. Added system property for #of encryptors. Fixed test
issue

-import com.gemstone.gemfire.*;
-import java.io.DataOutputStream;
-import java.util.Iterator;
-import java.util.WeakHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
-import org.apache.logging.log4j.Logger;
-import org.jgroups.*;
-import org.jgroups.Message.Flag;
-import org.jgroups.Message.TransientFlag;
-import org.jgroups.conf.ClassConfigurator;
-import org.jgroups.protocols.UDP;
-import org.jgroups.protocols.pbcast.NAKACK2;
-import org.jgroups.stack.IpAddress;
-import org.jgroups.util.Digest;
-import org.jgroups.util.UUID;
-
-import java.io.*;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.net.UnknownHostException;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.stream.*;
-
-import static com.gemstone.gemfire.distributed.internal.membership.gms.GMSUtil.replaceStrings;
-import static com.gemstone.gemfire.internal.DataSerializableFixedID.JOIN_REQUEST;
-import static com.gemstone.gemfire.internal.DataSerializableFixedID.JOIN_RESPONSE;
-      for (Iterator<GMSMember> it=calculatedMembers.iterator(); it.hasNext(); ) {
-        GMSMember mbr = it.next();
+      for (GMSMember mbr : calculatedMembers ) {
-        Message jmsg = (Message)messages.get(version);
+        Message jmsg = messages.get(version);
-      byte[] messageBytes = null;
-    
-    //DataSerializer.writeObject(this.localAddress.getShallowNetMember(), out_stream);
-    GMSMember.writeShallowNetMember((GMSMember)this.localAddress.getNetMember(), out_stream);
+    GMSMember m = (GMSMember)this.localAddress.getNetMember();
+    m.writeEssentialData(out_stream);
-      // TODO seems like we don't need this, just set bit that PK is appended
-
-          
-          /*InternalDistributedMember mbr = null;
-          if (result instanceof JoinRequestMessage) {
-            mbr = ((JoinRequestMessage)result).getMemberID();
-          } else {
-            mbr = ((FindCoordinatorRequest)result).getMemberID();
-          }*/
-    GMSMember m = GMSMember.readShallowNetMember(in);
-
+    GMSMember m = new GMSMember();
+    m.readEssentialData(in);
-  public byte[] getPublickey(InternalDistributedMember mbr) {
+  public byte[] getPublicKey(InternalDistributedMember mbr) {
-      logger.debug("Setting pK for member " + mbr);
+      logger.debug("Setting PK for member " + mbr);
-  private Random randomId = new Random();
+  private AtomicInteger requestId = new AtomicInteger((new Random().nextInt()));
-    //TODO: what if we don't get response, need to remove this otherwise it will be leak
-    return randomId.nextInt();
+    return requestId.incrementAndGet();
