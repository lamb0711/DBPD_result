client server

client server

+import java.security.Principal;
+import com.gemstone.gemfire.security.PostProcessor;
+  public static void authorizeRegionManage(String regionName, String key) {
+    authorize("DATA", "MANAGE", regionName, key);
+  }
+
+  public static void authorizeRegionWrite(String regionName, String key) {
+    authorize("DATA", "WRITE", regionName, key);
+  }
+
+  public static void authorizeRegionRead(String regionName, String key) {
+    authorize("DATA", "READ", regionName, key);
+  }
+
-  private static void authorize(String resource, String operation, String regionName) {
+  private static void authorize(String resource, String operation, String regionName){
+    authorize(resource, operation, regionName, null);
+  }
+
+  private static void authorize(String resource, String operation, String regionName, String key) {
-    authorize(new GeodePermission(resource, operation, regionName));
+    authorize(new GeodePermission(resource, operation, regionName, key));
-      logger.info(currentUser.getPrincipal() + " not authorized for " + context);
-      throw new NotAuthorizedException(e.getMessage(), e);
+      String msg = currentUser.getPrincipal() + " not authorized for " + context;
+      throw new NotAuthorizedException(msg, e);
+  private static PostProcessor postProcessor;
+
-    Object auth = getAuthenticatorObject(customAuthenticator);
-
+    Object authenticatorObject = getObject(customAuthenticator);
+
-    else if (auth != null && auth instanceof ExternalSecurity) {
-      ExternalSecurity externalSecurity = (ExternalSecurity) auth;
-      externalSecurity.init(securityProps);
-      Realm realm = new CustomAuthRealm(externalSecurity);
+    else if (authenticatorObject != null && authenticatorObject instanceof ExternalSecurity) {
+      ExternalSecurity authenticator = (ExternalSecurity) authenticatorObject;
+      authenticator.init(securityProps);
+      Realm realm = new CustomAuthRealm(authenticator);
+
+    // this initializes the post processor
+    String customPostProcessor = securityProps.getProperty(SECURITY_CLIENT_ACCESSOR_PP);
+    Object postProcessObject = getObject(customPostProcessor);
+    if(postProcessObject instanceof PostProcessor){
+      postProcessor = (PostProcessor) postProcessObject;
+      postProcessor.init(securityProps);
+    }
-  public static Object getAuthenticatorObject(String authenticatorFactoryName) {
-    if (StringUtils.isBlank(authenticatorFactoryName)) {
+  public static Object postProcess(String regionPath, Object key, Object result){
+    if(postProcessor == null)
+      return result;
+
+    Subject subject = getSubject();
+
+    if(subject == null)
+      return result;
+
+    return postProcessor.processRegionValue((Principal)subject.getPrincipal(), regionPath, key,  result);
+  }
+
+  public static Object getObject(String factoryName) {
+    if (StringUtils.isBlank(factoryName)) {
-
-      Method instanceGetter = ClassLoadUtil.methodFromName(authenticatorFactoryName);
+      Method instanceGetter = ClassLoadUtil.methodFromName(factoryName);
-    Object auth = getAuthenticatorObject(authenticatorFactoryName);
+    Object auth = getObject(authenticatorFactoryName);
