GEODE-6733 Remove mutable static org.apache.geode.internal.net.Buffers.buffersQueue

Converted static Buffers class to be a non-static buffer pool.

-import org.apache.geode.annotations.internal.MakeNotStatic;
-public class Buffers {
+public class BufferPool {
+  private final DMStats stats;
+
+
+  public BufferPool(DMStats stats) {
+    this.stats = stats;
+  }
+
-  @MakeNotStatic
-  private static final ConcurrentLinkedQueue<BBSoftReference> bufferQueue =
+  private final ConcurrentLinkedQueue<BBSoftReference> bufferQueue =
-  public static ByteBuffer acquireSenderBuffer(int size, DMStats stats) {
-    return acquireBuffer(size, stats, true);
+  public ByteBuffer acquireSenderBuffer(int size) {
+    return acquireBuffer(size, true);
-  public static ByteBuffer acquireReceiveBuffer(int size, DMStats stats) {
-    return acquireBuffer(size, stats, false);
+  public ByteBuffer acquireReceiveBuffer(int size) {
+    return acquireBuffer(size, false);
-  private static ByteBuffer acquireBuffer(int size, DMStats stats, boolean send) {
+  private ByteBuffer acquireBuffer(int size, boolean send) {
-  public static void releaseSenderBuffer(ByteBuffer bb, DMStats stats) {
-    releaseBuffer(bb, stats, true);
+  public void releaseSenderBuffer(ByteBuffer bb) {
+    releaseBuffer(bb, true);
-  public static void releaseReceiveBuffer(ByteBuffer bb, DMStats stats) {
-    releaseBuffer(bb, stats, false);
+  public void releaseReceiveBuffer(ByteBuffer bb) {
+    releaseBuffer(bb, false);
-  static ByteBuffer expandReadBufferIfNeeded(BufferType type, ByteBuffer existing,
-      int desiredCapacity, DMStats stats) {
+  ByteBuffer expandReadBufferIfNeeded(BufferType type, ByteBuffer existing,
+      int desiredCapacity) {
-    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity, stats);
+    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity);
-    releaseBuffer(type, existing, stats);
+    releaseBuffer(type, existing);
-  static ByteBuffer expandWriteBufferIfNeeded(BufferType type, ByteBuffer existing,
-      int desiredCapacity, DMStats stats) {
+  ByteBuffer expandWriteBufferIfNeeded(BufferType type, ByteBuffer existing,
+      int desiredCapacity) {
-    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity, stats);
+    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity);
-    releaseBuffer(type, existing, stats);
+    releaseBuffer(type, existing);
-  static ByteBuffer acquireBuffer(Buffers.BufferType type, int capacity, DMStats stats) {
+  ByteBuffer acquireBuffer(BufferPool.BufferType type, int capacity) {
-        return Buffers.acquireSenderBuffer(capacity, stats);
+        return acquireSenderBuffer(capacity);
-        return Buffers.acquireReceiveBuffer(capacity, stats);
+        return acquireReceiveBuffer(capacity);
-  static void releaseBuffer(Buffers.BufferType type, ByteBuffer buffer, DMStats stats) {
+  void releaseBuffer(BufferPool.BufferType type, ByteBuffer buffer) {
-        Buffers.releaseSenderBuffer(buffer, stats);
+        releaseSenderBuffer(buffer);
-        Buffers.releaseReceiveBuffer(buffer, stats);
+        releaseReceiveBuffer(buffer);
-  private static void releaseBuffer(ByteBuffer bb, DMStats stats, boolean send) {
+  private void releaseBuffer(ByteBuffer bb, boolean send) {
-  public static void initBufferStats(DMStats stats) { // fixes 46773
-    if (useDirectBuffers) {
-      for (BBSoftReference ref : bufferQueue) {
-        if (ref.getBB() != null) {
-          if (ref.getSend()) { // fix bug 46773
-            stats.incSenderBufferSize(ref.getSize(), true);
-          } else {
-            stats.incReceiverBufferSize(ref.getSize(), true);
-          }
-        }
-      }
-    }
-  }
-
