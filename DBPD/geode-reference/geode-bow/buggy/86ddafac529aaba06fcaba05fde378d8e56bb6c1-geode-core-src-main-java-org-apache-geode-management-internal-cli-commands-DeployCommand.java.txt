GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
-import java.io.FileNotFoundException;
+import java.io.File;
+import java.io.FileInputStream;
-import java.util.Arrays;
+import java.util.ArrayList;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.SimpleRemoteInputStream;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.geode.distributed.internal.ClusterConfigurationService;
-      @CliOption(key = {CliStrings.DEPLOY__DIR}, help = CliStrings.DEPLOY__DIR__HELP) String dir) {
+      @CliOption(key = {CliStrings.DEPLOY__DIR}, help = CliStrings.DEPLOY__DIR__HELP) String dir)
+      throws IOException {
-    byte[][] shellBytesData = CommandExecutionContext.getBytesFromShell();
-    String[] jarNames = CliUtil.bytesToNames(shellBytesData);
-    byte[][] jarBytes = CliUtil.bytesToData(shellBytesData);
+    List<String> jarFullPaths = CommandExecutionContext.getFilePathFromShell();
-
-    if (targetMembers.size() > 0) {
+    List results = new ArrayList();
+    for (DistributedMember member : targetMembers) {
+      List<RemoteInputStream> remoteStreams = new ArrayList<>();
+      List<String> jarNames = new ArrayList<>();
+      for (String jarFullPath : jarFullPaths) {
+        remoteStreams.add(new SimpleRemoteInputStream(new FileInputStream(jarFullPath)).export());
+        jarNames.add(FilenameUtils.getName(jarFullPath));
+      }
+
-      ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(this.deployFunction,
-          new Object[] {jarNames, jarBytes}, targetMembers);
+      ResultCollector<?, ?> resultCollector =
+          executeFunction(this.deployFunction, new Object[] {jarNames, remoteStreams}, member);
-      List<CliFunctionResult> results =
-          CliFunctionResult.cleanResults((List<?>) resultCollector.getResult());
+      results.add(((List) resultCollector.getResult()).get(0));
-      for (CliFunctionResult result : results) {
-        if (result.getThrowable() != null) {
+      for (RemoteInputStream ris : remoteStreams) {
+        try {
+          ris.close(true);
+        } catch (IOException ex) {
+          // Ignored. the stream may have already been closed.
+        }
+      }
+    }
+
+    List<CliFunctionResult> cleanedResults = CliFunctionResult.cleanResults(results);
+
+    for (CliFunctionResult result : cleanedResults) {
+      if (result.getThrowable() != null) {
+        tabularData.accumulate("Member", result.getMemberIdOrName());
+        tabularData.accumulate("Deployed JAR", "");
+        tabularData.accumulate("Deployed JAR Location",
+            "ERROR: " + result.getThrowable().getClass().getName() + ": "
+                + result.getThrowable().getMessage());
+        tabularData.setStatus(Result.Status.ERROR);
+      } else {
+        String[] strings = (String[]) result.getSerializables();
+        for (int i = 0; i < strings.length; i += 2) {
-          tabularData.accumulate("Deployed JAR", "");
-          tabularData.accumulate("Deployed JAR Location",
-              "ERROR: " + result.getThrowable().getClass().getName() + ": "
-                  + result.getThrowable().getMessage());
-          tabularData.setStatus(Result.Status.ERROR);
-        } else {
-          String[] strings = (String[]) result.getSerializables();
-          for (int i = 0; i < strings.length; i += 2) {
-            tabularData.accumulate("Member", result.getMemberIdOrName());
-            tabularData.accumulate("Deployed JAR", strings[i]);
-            tabularData.accumulate("Deployed JAR Location", strings[i + 1]);
-          }
+          tabularData.accumulate("Deployed JAR", strings[i]);
+          tabularData.accumulate("Deployed JAR Location", strings[i + 1]);
-    persistClusterConfiguration(result,
-        () -> getSharedConfiguration().addJarsToThisLocator(jarNames, jarBytes, groups));
+    ClusterConfigurationService sc = getSharedConfiguration();
+    if (sc == null) {
+      result.setCommandPersisted(false);
+    } else {
+      sc.addJarsToThisLocator(jarFullPaths, groups);
+      result.setCommandPersisted(true);
+    }
+
-      // 2nd argument is the jar
-      String[] jars = (String[]) parseResult.getArguments()[1];
-      // 3rd argument is the dir
-      String dir = (String) parseResult.getArguments()[2];
+      String[] jars = (String[]) parseResult.getParamValue("jar");
+      String dir = (String) parseResult.getParamValue("dir");
-      FileResult fileResult;
-      String[] filesToUpload = jars;
-      if (filesToUpload == null) {
-        filesToUpload = new String[] {dir};
-      }
-      try {
-
-        fileResult = new FileResult(filesToUpload);
-      } catch (FileNotFoundException fnfex) {
-        return ResultBuilder
-            .createGemFireErrorResult("'" + Arrays.toString(filesToUpload) + "' not found.");
-      } catch (IOException ioex) {
-        return ResultBuilder.createGemFireErrorResult("I/O error when reading jar/dir: "
-            + ioex.getClass().getName() + ": " + ioex.getMessage());
-      }
-
-      // Only do this additional check if a dir was provided
-      if (dir != null) {
-        String message =
-            "\nDeploying files: " + fileResult.getFormattedFileList() + "\nTotal file size is: "
-                + this.numFormatter.format((double) fileResult.computeFileSizeTotal() / ONE_MB)
-                + "MB\n\nContinue? ";
-
-        if (readYesNo(message, Response.YES) == Response.NO) {
-          return ResultBuilder.createShellClientAbortOperationResult(
-              "Aborted deploy of " + Arrays.toString(filesToUpload) + ".");
+      FileResult fileResult = new FileResult();
+      if (jars != null) {
+        for (String jar : jars) {
+          File jarFile = new File(jar);
+          if (!jarFile.exists()) {
+            return ResultBuilder.createUserErrorResult(jar + " not found.");
+          }
+          fileResult.addFile(jarFile);
+        }
+      } else {
+        File fileDir = new File(dir);
+        if (!fileDir.isDirectory()) {
+          return ResultBuilder.createUserErrorResult(dir + " is not a directory");
+        }
+        File[] childJarFile = fileDir.listFiles(CliUtil.JAR_FILE_FILTER);
+        for (File file : childJarFile) {
+          fileResult.addFile(file);
+
+      // check if user wants to upload with the computed file size
+      String message =
+          "\nDeploying files: " + fileResult.getFormattedFileList() + "\nTotal file size is: "
+              + this.numFormatter.format((double) fileResult.computeFileSizeTotal() / ONE_MB)
+              + "MB\n\nContinue? ";
+
+      if (readYesNo(message, Response.YES) == Response.NO) {
+        return ResultBuilder.createShellClientAbortOperationResult(
+            "Aborted deploy of " + fileResult.getFormattedFileList() + ".");
+      }
+
