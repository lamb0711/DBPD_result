GEODE-3277: revert changes to Launcher bind address and State constructors

This reverts commit 73a847a4b22239414db0ae9d973673f6a03fdcf0.
This reverts commit 4a5c56eb8edd277b258e916212d41bec0b0e7b83.
This reverts commit f41ca9d7d2fa7c045ec439df9478335233f1d95e.

+import org.apache.geode.internal.process.StartupStatusListener;
-import org.apache.geode.management.internal.cli.util.HostUtils;
- *
+ * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-    try {
-      if (bindAddress != null) {
-        return bindAddress;
-      }
-      return SocketCreator.getLocalHost();
-    } catch (UnknownHostException handled) {
-      // Returning loopback implies the serverBindAddress was null and no IP address
-      // for localhost could be found
-      return InetAddress.getLoopbackAddress();
-    }
+    return this.bindAddress;
-   *
+   * 
-   *
+   * 
-      // Returning localhost/127.0.0.1 implies the bindAddress was null and no IP address for
+      // NOTE returning localhost/127.0.0.1 implies the bindAddress was null and no IP address for
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-            statusMessage -> LocatorLauncher.this.statusMessage = statusMessage);
+            new StartupStatusListener() {
+              @Override
+              public void setStatus(final String statusMessage) {
+                LocatorLauncher.this.statusMessage = statusMessage;
+              }
+            });
-    return super.getDistributedSystemProperties(getProperties());
+    Properties properties = super.getDistributedSystemProperties(getProperties());
+    return properties;
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-   *
+   * 
-    // launcher is used to get the Locator's status).
+    // launcher
+    // is used to get the Locator's status).
-      return createNoResponseState(handled, "Failed to connect to locator "
-          + getBindAddress().getCanonicalHostName() + "[" + getPort() + "]");
+      return createNoResponseState(handled, "Failed to connect to locator " + getId());
-   *
+   * 
-   *
+   * 
-   *
+   * 
+    // else if (this.workingDirectorySpecified) {
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-  public enum Command {
+  public static enum Command {
-          : Collections.emptyList());
+          : Collections.<String>emptyList());
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-     *
+     * 
-   *
+   * 
-     *
+     * 
-          getLocatorLocation(launcher), // locatorLocation
+          null, // locatorLocation
-          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
+          Collections.<String>emptyList(), // jvmArguments
-          System.getProperty("java.version"), // javaVersion
+          null, // javaVersion
-          getBindAddress(launcher).getCanonicalHostName(), // host
-          launcher.getPortAsString(), // port
+          null, // host
+          null, // port
-    /*
-     * Guards against throwing NPEs due to incorrect or missing host information while constructing
-     * error states
-     */
-    private static String getLocatorLocation(LocatorLauncher launcher) {
-      if (launcher.getPort() == null) {
-        return launcher.getId();
-      }
-      if (launcher.getBindAddress() == null) {
-        return HostUtils.getLocatorId(HostUtils.getLocalHost(), launcher.getPort());
-      }
-      return HostUtils.getLocatorId(launcher.getBindAddress().getCanonicalHostName(),
-          launcher.getPort());
-    }
-
-          if (isNotBlank(bindAddress.getHostAddress())) {
+          if (isBlank(bindAddress.getHostAddress())) {
-    private static InetAddress getBindAddress(LocatorLauncher launcher) {
-      if (InternalLocator.hasLocator()) {
-        final InternalLocator locator = InternalLocator.getLocator();
-        final InetAddress bindAddress = locator.getBindAddress();
-        if (bindAddress != null) {
-          return bindAddress;
-        }
-      }
-      return launcher.getBindAddress();
-    }
-
-            // safe check none-the-less.
+                                                  // safe
+            // check none-the-less.
