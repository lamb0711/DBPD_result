GEODE-3780 member is not considered suspect after failing final check

Ensure that a member is in the suspects collection after it fails a
final check.  This allows processSuspectMessage to know if it should
perform the duty of a membership-coordinator and initiate final
checks based on Suspect messages.

I've also done a little bit of refactoring in processSuspectMessage and
have removed commented-out code.

This closes #2380

-          logger.trace("Checking member {} ", neighbour);
+          logger.debug("Checking member {} ", neighbour);
-        setNextNeighbor(currentView, null);
-      boolean pinged = false;
+      boolean pinged;
-        suspectedMemberIds.put(mbr, currentView);
+        memberSuspected(localAddress, mbr, reason);
+        setNextNeighbor(currentView, null);
-    logger.trace("Checking member {}", member);
+    logger.debug("Requesting heartbeat from {}", member);
-            logger.trace("no heartbeat response received from {} and no recent activity", member);
+            logger.debug("no heartbeat response received from {} and no recent activity", member);
-    // Background suspect-collecting thread is currently disabled - it takes too long
-    // synchronized (suspectRequests) {
-    // SuspectRequest sr = new SuspectRequest((InternalDistributedMember) mbr, reason);
-    // if (!suspectRequests.contains(sr)) {
-    // logger.info("Suspecting member {}. Reason= {}.", mbr, reason);
-    // suspectRequests.add(sr);
-    // suspectRequests.notify();
-    // }
-    // }
-    // suspectRequestCollectorThread = this.new RequestCollector<SuspectRequest>("Geode Suspect
-    // Message Collector", Services.getThreadGroup(), suspectRequests,
-    // new Callback<SuspectRequest>() {
-    // @Override
-    // public void process(List<SuspectRequest> requests) {
-    // GMSHealthMonitor.this.sendSuspectRequest(requests);
-    //
-    // }
-    // }, MEMBER_SUSPECT_COLLECTION_INTERVAL);
-    // suspectRequestCollectorThread.setDaemon(true);
-    // suspectRequestCollectorThread.start()
-
-    // for (InternalDistributedMember mbr: newView.getMembers()) {
-    // if (!memberVsLastMsgTS.containsKey(mbr)) {
-    // CustomTimeStamp customTS = new CustomTimeStamp(System.currentTimeMillis());
-    // memberVsLastMsgTS.put(mbr, customTS);
-    // }
-    // }
-  /*** test method */
+  /** test method */
-        && serverSocketExecutor.isShutdown() /* && !suspectRequestCollectorThread.isAlive() */;
+        && serverSocketExecutor.isShutdown();
-      suspectedMemberIds.putIfAbsent(suspect, currentView);
+      suspectedMemberIds.put(suspect, currentView);
+    logger.debug("Processing suspect requests {}", suspectRequests);
-      for (SuspectRequest req : incomingRequest.getMembers()) {
-        logger.info("received suspect message from {} for {}: {}", sender, req.getSuspectMember(),
-            req.getReason());
-      }
+      // This process is the membership coordinator and should perform a final check
+      logSuspectRequests(incomingRequest, sender);
-    } // coordinator ends
-    else {
+    } else {
+      // Another process has raised suspicion - check to see if
+      // this process should become the membership coordinator if
+      // all current suspects are gone
+        logger.debug("Current suspects for view #{} are {}", cv.getViewId(), suspectsInView);
+      logger.trace("Trial view with suspects removed is {}\nmy address is {}", check, localAddress);
-        for (SuspectRequest req : incomingRequest.getMembers()) {
-          logger.info("received suspect message from {} for {}: {}", sender, req.getSuspectMember(),
-              req.getReason());
-        }
+        logSuspectRequests(incomingRequest, sender);
+  private void logSuspectRequests(SuspectMembersMessage incomingRequest,
+      InternalDistributedMember sender) {
+    for (SuspectRequest req : incomingRequest.getMembers()) {
+      String who = sender.equals(localAddress) ? "myself" : sender.toString();
+      logger.info("received suspect message from {} for {}: {}", who, req.getSuspectMember(),
+          req.getReason());
+    }
+  }
+
-          logger.info("Final check failed - requesting removal of suspect member " + mbr);
+          logger.info("Final check failed for member {}", mbr);
+            logger.info("Requesting removal of suspect member {}", mbr);
+          // make sure he's still suspected
+          memberSuspected(localAddress, mbr, reason);
