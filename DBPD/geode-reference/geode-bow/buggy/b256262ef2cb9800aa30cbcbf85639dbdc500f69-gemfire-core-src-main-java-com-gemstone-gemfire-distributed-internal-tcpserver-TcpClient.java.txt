GMSHealthMonitor was only accepting a health-check response to see if a member was alive or not.  This change-set modifies it to allow any message from the suspect to prove that the suspect is alive.  This reduced the amount of suspect processing going on quite a bit, and made it less likely to incorrectly oust a busy member.

GMSMembershipManager was not throwing an exception when distribution was attempted but the manager was shutting down.  This caused large inconsistencies between clients and servers in client/server HA testing.

TCPServer's message to determine the locator's version was using a 2-minute timeout, totally ignoring the timeout passed to it.  It now pays attention to the requested timeout.

A number of tests were using Java assertions instead of JUnit Assert.  I changed all of these in our recently added tests to use the JUnit assertions in case the JUnit jvm doesn't have assertions enabled.

+    long giveupTime = System.currentTimeMillis() + timeout;
+    
-    short serverVersion = getServerVersion(ipAddr, REQUEST_TIMEOUT).shortValue();
+    short serverVersion = getServerVersion(ipAddr, timeout/2).shortValue();
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-    sock.setSoTimeout(timeout);
+    long newTimeout = giveupTime - System.currentTimeMillis();
+    if (newTimeout <= 0) {
+      return null;
+    }
+    
+    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), (int)newTimeout, null, false);
+    sock.setSoTimeout((int)newTimeout);
+    DataOutputStream out = null;
-      DataOutputStream out=new DataOutputStream(sock.getOutputStream());
+      out=new DataOutputStream(sock.getOutputStream());
+      
+          logger.debug("received response: {}", response);
+      if (out != null) {
+        out.close();
+      }
