Revert "GEODE-2142: Removal of non-compliant org.json implementation."

This reverts commit b3ec80bc72fee3a40da297945a85d8df6c2a6460.

-import java.io.UnsupportedEncodingException;
-import java.nio.charset.Charset;
-import java.util.Base64;
-    return addAsFile(fileName, bytes, fileType, message);
+    return addAsFile(fileName.getBytes(), bytes, fileType, message);
-  private ResultData addAsFile(String fileName, byte[] data, int fileType, String message) {
+  public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+      boolean addTimeStampToName) throws FileNotFoundException, IOException {
+    byte[][] filesToBytes = CliUtil.filesToBytes(new String[] {filePath});
+
+    byte[] bytes = filesToBytes[0];
+    if (addTimeStampToName) {
+      String fileName = new String(filesToBytes[0]);
+      fileName = addTimeStampBeforeLastDot(fileName);
+      bytes = fileName.getBytes();
+    }
+    return addAsFile(bytes, filesToBytes[1], fileType, message);
+  }
+
+  private ResultData addAsFile(byte[] fileName, byte[] data, int fileType, String message) {
+    // System.out.println("fileType :: "+fileType);
+    // System.out.println("FILE_TYPE_BINARY :: "+FILE_TYPE_BINARY);
+    // System.out.println("FILE_TYPE_TEXT :: "+FILE_TYPE_TEXT);
-      sectionData.put(FILE_MESSAGE, message);
-      DeflaterInflaterData deflaterInflaterData = CliUtil.compressBytes(data);
-      sectionData.put(FILE_DATA_FIELD, Base64.getEncoder().encodeToString(deflaterInflaterData.getData()));
-      sectionData.put(DATA_LENGTH_FIELD,deflaterInflaterData.getDataLength());
+      sectionData.put(FILE_MESSAGE, message.getBytes());
+      sectionData.putAsJSONObject(FILE_DATA_FIELD, CliUtil.compressBytes(data));
+      // System.out.println(data);
+      // sectionData.put(FILE_DATA_FIELD, Base64.encodeBytes(data, Base64.GZIP));
+      // } catch (IOException e) {
+      // e.printStackTrace();
-      String fileName = null;
-        fileName = new String(fileNameBytes);
-        fileName = (String) object.get(FILE_NAME_FIELD);
+        fileNameBytes = (byte[]) object.get(FILE_NAME_FIELD);
+      String fileName = new String(fileNameBytes);
-      String fileMessage = null;
-        fileMessage = new String(fileMessageBytes);
-        fileMessage = (String) object.get(FILE_MESSAGE);
+        fileMessageBytes = (byte[]) object.get(FILE_MESSAGE);
+      String fileMessage = new String(fileMessageBytes);
-      String fileDataString = (String) object.get(FILE_DATA_FIELD);
-      int fileDataLength = (int) object.get(DATA_LENGTH_FIELD);
-      byte[] byteArray = Base64.getDecoder().decode(fileDataString);
-      byte[] uncompressBytes = CliUtil.uncompressBytes(byteArray,fileDataLength).getData();
+      GfJsonObject fileDataBytes = object.getJSONObject(FILE_DATA_FIELD);
+      byte[] byteArray = GfJsonArray.toByteArray(fileDataBytes.getJSONArray(DATA_FIELD));
+      int dataLength = fileDataBytes.getInt(DATA_LENGTH_FIELD);
+      DeflaterInflaterData uncompressBytes = CliUtil.uncompressBytes(byteArray, dataLength);
+      byte[] uncompressed = uncompressBytes.getData();
-        bw.write(new String(uncompressBytes));
+        bw.write(new String(uncompressed));
-        fos.write(uncompressBytes);
+        fos.write(uncompressed);
