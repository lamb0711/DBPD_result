GEODE-4789: upgrade system-rules from 1.16.1 to 1.17.1

Make DistributedRestoreSystemProperties delegate to RestoreSystemProperties

-import static java.lang.System.*;
+import static org.apache.geode.test.dunit.Host.getHost;
+import static org.assertj.core.api.Assertions.assertThat;
-import java.util.Properties;
-
-import org.junit.contrib.java.lang.system.RestoreSystemProperties;
-
-import org.apache.geode.test.dunit.SerializableRunnable;
+import org.apache.geode.test.junit.rules.accessible.AccessibleRestoreSystemProperties;
-public class DistributedRestoreSystemProperties extends RestoreSystemProperties
+public class DistributedRestoreSystemProperties extends AccessibleRestoreSystemProperties
-  private static volatile Properties originalProperties;
+  private static final AccessibleRestoreSystemProperties restoreSystemProperties =
+      new AccessibleRestoreSystemProperties();
+  private volatile int beforeVmCount;
+
-    super.before();
-    this.invoker.invokeInEveryVMAndController(new SerializableRunnable() {
-      @Override
-      public void run() {
-        if (originalProperties == null) {
-          originalProperties = getProperties();
-          setProperties(copyOf(originalProperties));
-        }
-      }
-    });
-  }
+    beforeVmCount = getVMCount();
-  private Properties copyOf(Properties source) {
-    Properties copy = new Properties();
-    copy.putAll(source);
-    return copy;
+    invoker.invokeInEveryVMAndController(() -> invokeBefore());
-    super.after();
-    this.invoker.invokeInEveryVMAndController(new SerializableRunnable() {
-      @Override
-      public void run() {
-        if (originalProperties != null) {
-          setProperties(originalProperties);
-          originalProperties = null;
-        }
+    int afterVmCount = getVMCount();
+    assertThat(afterVmCount).isEqualTo(beforeVmCount);
+
+    invoker.invokeInEveryVMAndController(() -> invokeAfter());
+  }
+
+  private void invokeBefore() throws Exception {
+    try {
+      restoreSystemProperties.before();
+    } catch (Throwable throwable) {
+      if (throwable instanceof Exception) {
+        throw (Exception) throwable;
-    });
+      throw new RuntimeException(throwable);
+    }
+  }
+
+  private void invokeAfter() {
+    restoreSystemProperties.after();
+  }
+
+  private int getVMCount() {
+    try {
+      return getHost(0).getVMCount();
+    } catch (IllegalArgumentException e) {
+      throw new IllegalStateException("DUnit VMs have not been launched");
+    }
