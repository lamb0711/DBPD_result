refactor ServerStarterRule and LocatorStarterRule so that they can be created without a Properties first.

+ * You can create this rule either with a property or without a property. If created with a
+ * property, The rule will automatically start the server for you with the properties given.
+ *
+ * If created without a property, the rule won't start the server until you specicially call one of
+ * the startServer function.
+ *
+ * Either way, the rule will handle properly stopping the server for you.
+ *
- * <p>
- * You may choose to use this class not as a rule or use it in your own rule (see
- * {@link LocatorServerStartupRule}), in which case you will need to call startLocator() and after()
- * manually.
- * </p>
+  /**
+   * Default constructor, if used, the rule won't start the server for you, you will need to
+   * manually start it. The rule will handle stop the server for you.
+   */
+  public ServerStarterRule() {}
+
+    startServer(properties, locatorPort, pdxPersistent);
+  }
+
+  public void startServer(Properties properties) throws Exception {
+    startServer(properties, 0, false);
+  }
+
+  public void startServer(Properties properties, int locatorPort) throws Exception {
+    startServer(properties, locatorPort, false);
+  }
+
+  public void startServer(Properties properties, int locatorPort, boolean pdxPersistent)
+      throws Exception {
+    if (properties == null) {
+      properties = new Properties();
+    }
+    if (locatorPort > 0) {
+      properties.setProperty(LOCATORS, "localhost[" + locatorPort + "]");
+    }
-      if (locatorPort > 0) {
-        properties.setProperty(LOCATORS, "localhost[" + locatorPort + "]");
-      } else {
-        properties.setProperty(LOCATORS, "");
-      }
+      properties.setProperty(LOCATORS, "");
-
-    startServer();
+    if (properties != null)
+      startServer();
