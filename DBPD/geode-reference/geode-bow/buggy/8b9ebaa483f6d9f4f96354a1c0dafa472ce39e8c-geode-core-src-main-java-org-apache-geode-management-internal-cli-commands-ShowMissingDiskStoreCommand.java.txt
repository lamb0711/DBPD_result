GEODE-4858: Update *DiskStore commands to use ResultModel and SingleGfshCommand (#1996)


-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
+  public static final String MISSING_DISK_STORES_SECTION = "missing-disk-stores";
+  public static final String MISSING_COLOCATED_REGIONS_SECTION = "missing-colocated-regions";
+
-  public Result showMissingDiskStore() {
+  public ResultModel showMissingDiskStore() {
-    try {
-      Set<DistributedMember> dataMembers =
-          DiskStoreCommandsUtils.getNormalMembers((InternalCache) getCache());
+    Set<DistributedMember> dataMembers =
+        DiskStoreCommandsUtils.getNormalMembers((InternalCache) getCache());
-      if (dataMembers.isEmpty()) {
-        return ResultBuilder.createInfoResult(CliStrings.NO_CACHING_MEMBERS_FOUND_MESSAGE);
-      }
-      List<Object> results = getMissingDiskStoresList(dataMembers);
-      return toMissingDiskStoresTabularResult(results);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.SHOW_MISSING_DISK_STORE));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      if (t.getMessage() == null) {
-        return ResultBuilder.createGemFireErrorResult(
-            String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t));
-      }
-      return ResultBuilder.createGemFireErrorResult(
-          String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t.getMessage()));
+    if (dataMembers.isEmpty()) {
+      return ResultModel.createInfo(CliStrings.NO_CACHING_MEMBERS_FOUND_MESSAGE);
+    List<?> results = getMissingDiskStoresList(dataMembers);
+
+    return toMissingDiskStoresTabularResult(results);
-  private List<Object> getMissingDiskStoresList(Set<DistributedMember> members) {
+  private List<?> getMissingDiskStoresList(Set<DistributedMember> members) {
-    final List<Object> distributedPersistentRecoveryDetails = new ArrayList<>(results.size());
+    final List<?> distributedPersistentRecoveryDetails = new ArrayList<>(results.size());
-        distributedPersistentRecoveryDetails.addAll((Set<Object>) result);
+        distributedPersistentRecoveryDetails.addAll((Set) result);
-  private Result toMissingDiskStoresTabularResult(final List<Object> resultDetails)
+  private ResultModel toMissingDiskStoresTabularResult(final List<?> resultDetails)
-    CompositeResultData crd = ResultBuilder.createCompositeResultData();
+    ResultModel result = new ResultModel();
+    TabularResultModel missingDiskStoreSection = result.addTable(MISSING_DISK_STORES_SECTION);
+
-      CompositeResultData.SectionResultData missingDiskStoresSection = crd.addSection();
-      missingDiskStoresSection.setHeader("Missing Disk Stores");
-      TabularResultData missingDiskStoreData = missingDiskStoresSection.addTable();
+      missingDiskStoreSection.setHeader("Missing Disk Stores");
-        missingDiskStoreData.accumulate("Disk Store ID", persistentMemberDetails.getUUID());
-        missingDiskStoreData.accumulate("Host", persistentMemberDetails.getHost());
-        missingDiskStoreData.accumulate("Directory", persistentMemberDetails.getDirectory());
+        missingDiskStoreSection.accumulate("Disk Store ID",
+            persistentMemberDetails.getUUID().toString());
+        missingDiskStoreSection.accumulate("Host", persistentMemberDetails.getHost().toString());
+        missingDiskStoreSection.accumulate("Directory", persistentMemberDetails.getDirectory());
-      CompositeResultData.SectionResultData noMissingDiskStores = crd.addSection();
-      noMissingDiskStores.setHeader("No missing disk store found");
-    }
-    if (hasMissingDiskStores || hasMissingColocatedRegions) {
-      // For clarity, separate disk store and colocated region information
-      crd.addSection().setHeader("\n");
+      missingDiskStoreSection.setHeader("No missing disk store found");
+    TabularResultModel missingRegionsSection = result.addTable(MISSING_COLOCATED_REGIONS_SECTION);
-      CompositeResultData.SectionResultData missingRegionsSection = crd.addSection();
-      TabularResultData missingRegionData = missingRegionsSection.addTable();
-        missingRegionData.accumulate("Host", colocatedRegionDetails.getHost());
-        missingRegionData.accumulate("Distributed Member", colocatedRegionDetails.getMember());
-        missingRegionData.accumulate("Parent Region", colocatedRegionDetails.getParent());
-        missingRegionData.accumulate("Missing Colocated Region", colocatedRegionDetails.getChild());
+        missingRegionsSection.accumulate("Host", colocatedRegionDetails.getHost());
+        missingRegionsSection.accumulate("Distributed Member", colocatedRegionDetails.getMember());
+        missingRegionsSection.accumulate("Parent Region", colocatedRegionDetails.getParent());
+        missingRegionsSection.accumulate("Missing Colocated Region",
+            colocatedRegionDetails.getChild());
-      CompositeResultData.SectionResultData noMissingColocatedRegions = crd.addSection();
-      noMissingColocatedRegions.setHeader("No missing colocated region found");
+      missingRegionsSection.setHeader("No missing colocated region found");
-    return ResultBuilder.buildResult(crd);
+
+    return result;
