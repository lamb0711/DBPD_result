GEODE-3974: function security improvement (#1287)

* GEODE-3974: function security improvement

* function executed on a local member does not log out user accidentally
* Mark some internal functions as InternalEntity
* test refactor

+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.subject.Subject;
+
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.security.AuthenticationRequiredException;
+  private static Logger logger = LogService.getLogger();
+    String[] functionArgs = null;
+    Object[] args = context.getArguments();
+    if (args == null) {
+      context.getResultSender().lastResult(new CliFunctionResult(member.getId(), false,
+          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS));
+      return;
+    }
+
+    String functionId = ((String) args[0]);
+    String filterString = ((String) args[1]);
+    String resultCollectorName = ((String) args[2]);
+    String argumentsString = ((String) args[3]);
+    String onRegion = ((String) args[4]);
+    Properties credentials = (Properties) args[5];
+
+    SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
+    boolean loginNeeded = false;
-      String[] functionArgs = null;
-      Object[] args = context.getArguments();
-      if (args == null) {
-        context.getResultSender().lastResult(new CliFunctionResult(member.getId(), false,
-            CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS));
+      // if the function is executed on a server with jmx-manager that user is already logged into
+      // then we do not need to do login/logout here.
+      Subject subject = securityService.getSubject();
+      loginNeeded = subject == null || !subject.isAuthenticated();
+    } catch (AuthenticationRequiredException e) {
+      loginNeeded = true;
+    }
+
+    boolean loginSuccessful = false;
+    try {
+      if (loginNeeded) {
+        securityService.login(credentials);
+        loginSuccessful = true;
+      }
+
+      if (argumentsString != null && argumentsString.length() > 0) {
+        functionArgs = argumentsString.split(",");
+      }
+      Set<String> filters = new HashSet<>();
+      ResultCollector resultCollectorInstance = null;
+      if (resultCollectorName != null && resultCollectorName.length() > 0) {
+        resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
+            .forName(resultCollectorName).newInstance();
+      }
+      if (filterString != null && filterString.length() > 0) {
+        filters.add(filterString);
+      }
+
+      Function<?> function = FunctionService.getFunction(functionId);
+      if (function == null) {
+        context.getResultSender()
+            .lastResult(new CliFunctionResult(member.getId(), false,
+                (CliStrings.format(
+                    CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
+                    functionId))));
-      String functionId = ((String) args[0]);
-      String filterString = ((String) args[1]);
-      String resultCollectorName = ((String) args[2]);
-      String argumentsString = ((String) args[3]);
-      String onRegion = ((String) args[4]);
-      Properties credentials = (Properties) args[5];
+      // security check
+      function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
-      SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
-
-      try {
-        securityService.login(credentials);
-
-        if (argumentsString != null && argumentsString.length() > 0) {
-          functionArgs = argumentsString.split(",");
-        }
-        Set<String> filters = new HashSet<>();
-        ResultCollector resultCollectorInstance = null;
-        if (resultCollectorName != null && resultCollectorName.length() > 0) {
-          resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-              .forName(resultCollectorName).newInstance();
-        }
-        if (filterString != null && filterString.length() > 0) {
-          filters.add(filterString);
-        }
-
-        Function<?> function = FunctionService.getFunction(functionId);
-        if (function == null) {
-          context.getResultSender()
-              .lastResult(new CliFunctionResult(member.getId(), false,
-                  (CliStrings.format(
-                      CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
-                      functionId))));
+      Execution execution = null;
+      if (onRegion != null && onRegion.length() > 0) {
+        Region region = cache.getRegion(onRegion);
+        if (region == null) {
+          context.getResultSender().lastResult(
+              new CliFunctionResult(member.getId(), false, onRegion + " does not exist"));
+        execution = FunctionService.onRegion(region);
+      } else {
+        execution = FunctionService.onMember(member);
+      }
-        // security check
-        function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
-
-        Execution execution = null;
-        if (onRegion != null && onRegion.length() > 0) {
-          Region region = cache.getRegion(onRegion);
-          if (region == null) {
-            context.getResultSender().lastResult(
-                new CliFunctionResult(member.getId(), false, onRegion + " does not exist"));
-            return;
-          }
-          execution = FunctionService.onRegion(region);
-        } else {
-          execution = FunctionService.onMember(member);
-        }
-
-        if (execution == null) {
-          context.getResultSender()
-              .lastResult(new CliFunctionResult(member.getId(), false,
-                  CliStrings.format(
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
-                      functionId, member.getId(), onRegion,
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR)));
-          return;
-        }
-
-        if (resultCollectorInstance != null) {
-          execution = execution.withCollector(resultCollectorInstance);
-        }
-
-        if (functionArgs != null && functionArgs.length > 0) {
-          execution = execution.setArguments(functionArgs);
-        }
-        if (filters.size() > 0) {
-          execution = execution.withFilter(filters);
-        }
-
-        List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
-        List<String> resultMessage = new ArrayList<>();
-        boolean functionSuccess = true;
-
-        if (results != null) {
-          for (Object resultObj : results) {
-            if (resultObj != null) {
-              if (resultObj instanceof Exception) {
-                resultMessage.add(((Exception) resultObj).getMessage());
-                functionSuccess = false;
-              } else {
-                resultMessage.add(resultObj.toString());
-              }
-            }
-          }
-        }
-        context.getResultSender().lastResult(
-            new CliFunctionResult(member.getId(), functionSuccess, resultMessage.toString()));
-
-      } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
+      if (execution == null) {
-                    CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                    resultCollectorName, e.getMessage())));
-      } catch (Exception e) {
-        context.getResultSender().lastResult(
-            new CliFunctionResult(member.getId(), false, "Exception: " + e.getMessage()));
-      } finally {
-        securityService.logout();
+                    CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
+                    functionId, member.getId(), onRegion,
+                    CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR)));
+        return;
-    } catch (Exception ex) {
+      if (resultCollectorInstance != null) {
+        execution = execution.withCollector(resultCollectorInstance);
+      }
+
+      if (functionArgs != null && functionArgs.length > 0) {
+        execution = execution.setArguments(functionArgs);
+      }
+      if (filters.size() > 0) {
+        execution = execution.withFilter(filters);
+      }
+
+      List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
+      List<String> resultMessage = new ArrayList<>();
+      boolean functionSuccess = true;
+
+      if (results != null) {
+        for (Object resultObj : results) {
+          if (resultObj != null) {
+            if (resultObj instanceof Exception) {
+              resultMessage.add(((Exception) resultObj).getMessage());
+              functionSuccess = false;
+            } else {
+              resultMessage.add(resultObj.toString());
+            }
+          }
+        }
+      }
+      context.getResultSender().lastResult(
+          new CliFunctionResult(member.getId(), functionSuccess, resultMessage.toString()));
+
+    } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
-          .lastResult(new CliFunctionResult(member.getId(), false, ex.getMessage()));
+          .lastResult(new CliFunctionResult(member.getId(), false,
+              CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                  resultCollectorName, e.getMessage())));
+    } catch (Exception e) {
+      logger.error("error executing function " + functionId, e);
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(member.getId(), false, "Exception: " + e.getMessage()));
+    } finally {
+      if (loginSuccessful) {
+        securityService.logout();
+      }
