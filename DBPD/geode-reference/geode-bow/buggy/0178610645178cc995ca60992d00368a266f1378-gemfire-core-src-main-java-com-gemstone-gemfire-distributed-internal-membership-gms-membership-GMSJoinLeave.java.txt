GEODE-77 bug fixes for LocatorDUnitTest

All tests in LocatorDUnitTest now pass except the quorum check,
which needs a test hook.  GMSJoinLeaveJUnitTest, GMSHealthMonitoryJUnitTest
(except for testSuspectMembersCalledThroughSuspectThread) and
MembershipJUnitTest are all passing with these changes.

+import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
+        services.getConfig().getDistributionConfig().setEnableNetworkPartitionDetection(o.isSplitBrainEnabled());
+        services.getConfig().setNetworkPartitionDetectionEnabled(o.isSplitBrainEnabled());
-    if (logger.isDebugEnabled()) {
-      logger.debug("JoinLeave.processRemoveRequest invoked.  isCoordinator="+isCoordinator+ "; isStopping="+isStopping
-          +"; cancelInProgress="+services.getCancelCriterion().isCancelInProgress());
-    }
+
-        + "; reason="+incomingRequest.getReason());
+        + " from " + incomingRequest.getSender()
+        + " reason="+incomingRequest.getReason());
-    Set<InternalDistributedMember> recips = new HashSet<InternalDistributedMember>(view.getMembers());
+    Set<InternalDistributedMember> recips = new HashSet<>(view.getMembers());
-    recips.addAll(view.getCrashedMembers());
+    Set<InternalDistributedMember> responders = recips;
+    if (!view.getCrashedMembers().isEmpty()) {
+      recips = new HashSet<>(recips);
+      recips.addAll(view.getCrashedMembers());
+    }
-    rp.initialize(id, recips);
+    rp.initialize(id, responders);
-    if (v != null) {
+    services.getCancelCriterion().checkCancelInProgress(null);
+    
+    if (v != null && v.contains(m)) {
-      RemoveMemberMessage msg = new RemoveMemberMessage(v.getAllPreferredCoordinators(filter, getMemberID()), 
+      RemoveMemberMessage msg = new RemoveMemberMessage(v.getPreferredCoordinators(filter, getMemberID(), 5), 
-      services.getMessenger().send(msg);
+      if (this.isCoordinator) {
+        msg.setSender(this.localAddress);
+        processRemoveRequest(msg);
+      } else {
+        services.getMessenger().send(msg);
+      }
+              if (result.isEmpty() || this.conflictingView != null) {
+                break;
+              }
-            /*boolean success = */createAndSendView(requests);
+            try {
+              createAndSendView(requests);
+            } catch (DistributedSystemDisconnectedException e) {
+              shutdown = true;
+            }
-    boolean createAndSendView(List<DistributionMessage> requests) {
+    void createAndSendView(List<DistributionMessage> requests) {
-        oldMembers = oldView.getMembers();
+        oldMembers = new ArrayList<>(oldView.getMembers());
-          if (!oldMembers.contains(mbr) && !joinReqs.contains(mbr)) {
+
+          boolean duplicate = false;
+          for (InternalDistributedMember m: oldMembers) {
+            // check the netMembers, which wildcards the
+            // viewID to detect old IDs still in the view
+            if (mbr.getNetMember().equals(m.getNetMember())) {
+              duplicate = true;
+              break;
+            }
+          }
+          if (!duplicate && !joinReqs.contains(mbr)) {
+      
+      
+      if (removalReqs.isEmpty() && leaveReqs.isEmpty() && joinReqs.isEmpty()) {
+        return;
+      }
+      
+      
+      
-          mbrs = new ArrayList<InternalDistributedMember>(currentView.getMembers());
+          mbrs = new ArrayList<InternalDistributedMember>(oldMembers);
+        mbr.getNetMember().setSplitBrainEnabled(services.getConfig().isNetworkPartitionDetectionEnabled());
-        return true;
+        return;
-            return false;
+            return;
-              return false;
+              return;
-              List<InternalDistributedMember> failures = new ArrayList<InternalDistributedMember>(currentView.getCrashedMembers().size() + unresponsive.size());
+              List<InternalDistributedMember> failures = new ArrayList<>(currentView.getCrashedMembers().size() + unresponsive.size());
-                newView = new NetView(localAddress, newView.getViewId()+1, newView.getMembers(), leaveReqs,
+                List<InternalDistributedMember> newMembers = new ArrayList<>(newView.getMembers());
+                newMembers.removeAll(removalReqs);
+                newView = new NetView(localAddress, newView.getViewId()+1, newMembers, leaveReqs,
-      return true;
+      return;
