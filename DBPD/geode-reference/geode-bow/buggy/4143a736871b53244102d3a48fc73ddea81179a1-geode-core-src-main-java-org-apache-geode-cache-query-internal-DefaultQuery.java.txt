GEODE-4685: Moving of static DefaultQuery.setPdxReadSerialized to the TypeRegistry.
Cleaned up the overriding of readSerialized to reset to previous value.
Added cache to AbstractJdbcCallback.java so that children classes can access it.
Replaced AtomicLong with LongAdder.

-import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.LongAdder;
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheClosedException;
-  protected AtomicLong numExecutions = new AtomicLong(0);
+  private final LongAdder numExecutions = new LongAdder();
-  private final AtomicLong totalExecutionTime = new AtomicLong(0);
+  private final LongAdder totalExecutionTime = new LongAdder();
-  private static final ThreadLocal<Boolean> pdxReadSerialized =
-      ThreadLocal.withInitial(() -> Boolean.FALSE);
-
-  public static final Set<String> reservedKeywords = new HashSet<>();
-  static {
-    reservedKeywords.add("hint");
-    reservedKeywords.add("all");
-    reservedKeywords.add("map");
-    reservedKeywords.add("count");
-    reservedKeywords.add("sum");
-    reservedKeywords.add("nvl");
-    reservedKeywords.add("unique");
-    reservedKeywords.add("except");
-    reservedKeywords.add("declare");
-    reservedKeywords.add("for");
-    reservedKeywords.add("list");
-    reservedKeywords.add("min");
-    reservedKeywords.add("element");
-    reservedKeywords.add("false");
-    reservedKeywords.add("abs");
-    reservedKeywords.add("true");
-    reservedKeywords.add("bag");
-    reservedKeywords.add("time");
-    reservedKeywords.add("define");
-    reservedKeywords.add("and");
-    reservedKeywords.add("asc");
-    reservedKeywords.add("desc");
-    reservedKeywords.add("select");
-    reservedKeywords.add("intersect");
-    reservedKeywords.add("flatten");
-    reservedKeywords.add("float");
-    reservedKeywords.add("import");
-    reservedKeywords.add("exists");
-    reservedKeywords.add("distinct");
-    reservedKeywords.add("boolean");
-    reservedKeywords.add("string");
-    reservedKeywords.add("group");
-    reservedKeywords.add("interval");
-    reservedKeywords.add("orelse");
-    reservedKeywords.add("where");
-    reservedKeywords.add("trace");
-    reservedKeywords.add("first");
-    reservedKeywords.add("set");
-    reservedKeywords.add("octet");
-    reservedKeywords.add("nil");
-    reservedKeywords.add("avg");
-    reservedKeywords.add("order");
-    reservedKeywords.add("long");
-    reservedKeywords.add("limit");
-    reservedKeywords.add("mod");
-    reservedKeywords.add("type");
-    reservedKeywords.add("undefine");
-    reservedKeywords.add("in");
-    reservedKeywords.add("null");
-    reservedKeywords.add("some");
-    reservedKeywords.add("to_date");
-    reservedKeywords.add("short");
-    reservedKeywords.add("enum");
-    reservedKeywords.add("timestamp");
-    reservedKeywords.add("having");
-    reservedKeywords.add("dictionary");
-    reservedKeywords.add("char");
-    reservedKeywords.add("listtoset");
-    reservedKeywords.add("array");
-    reservedKeywords.add("union");
-    reservedKeywords.add("or");
-    reservedKeywords.add("max");
-    reservedKeywords.add("from");
-    reservedKeywords.add("query");
-    reservedKeywords.add("collection");
-    reservedKeywords.add("like");
-    reservedKeywords.add("date");
-    reservedKeywords.add("byte");
-    reservedKeywords.add("any");
-    reservedKeywords.add("is_undefined");
-    reservedKeywords.add("double");
-    reservedKeywords.add("int");
-    reservedKeywords.add("andthen");
-    reservedKeywords.add("last");
-    reservedKeywords.add("struct");
-    reservedKeywords.add("undefined");
-    reservedKeywords.add("is_defined");
-    reservedKeywords.add("not");
-    reservedKeywords.add("by");
-    reservedKeywords.add("as");
-  }
-      new ThreadLocal() {
-        @Override
-        protected Map<String, Set<String>> initialValue() {
-          return new HashMap<>();
-        }
-      };
+      ThreadLocal.withInitial(HashMap::new);
-      new ThreadLocal() {
-        @Override
-        protected Map<String, Set<String>> initialValue() {
-          return new HashMap<String, Set<String>>();
-        }
-      };
+      ThreadLocal.withInitial(HashMap::new);
-  public static boolean getPdxReadSerialized() {
-    return pdxReadSerialized.get();
-  }
-
-  public static void setPdxReadSerialized(boolean readSerialized) {
-    pdxReadSerialized.set(readSerialized);
-  }
-
-  /**
-   * helper method for setPdxReadSerialized
-   */
-  public static void setPdxReadSerialized(Cache cache, boolean readSerialized) {
-    if (cache != null && !cache.getPdxReadSerialized()) {
-      setPdxReadSerialized(readSerialized);
-    }
-  }
-
+    Boolean initialPdxReadSerialized = this.cache.getPdxReadSerializedOverride();
-      setPdxReadSerialized(this.cache, true);
+      this.cache.setPdxReadSerializedOverride(true);
-      setPdxReadSerialized(this.cache, false);
+      this.cache.setPdxReadSerializedOverride(initialPdxReadSerialized);
-                .toLocalizedString(new Object[] {prs.get(0).getName(), prs.get(1).getName()}));
+                .toLocalizedString(prs.get(0).getName(), prs.get(1).getName()));
-                  .toLocalizedString(new Object[] {eachPR.getName(), other.getName()}));
+                  .toLocalizedString(eachPR.getName(), other.getName()));
-    this.numExecutions.incrementAndGet();
-    this.totalExecutionTime.addAndGet(executionTime);
+    this.numExecutions.increment();
+    this.totalExecutionTime.add(executionTime);
-  public void compile() throws TypeMismatchException, NameResolutionException {
+  public void compile() {
-      return DefaultQuery.this.totalExecutionTime.get();
+      return DefaultQuery.this.totalExecutionTime.longValue();
-      return DefaultQuery.this.numExecutions.get();
+      return DefaultQuery.this.numExecutions.longValue();
-    if (observer != null && observer instanceof IndexTrackingQueryObserver) {
+    if (observer instanceof IndexTrackingQueryObserver) {
