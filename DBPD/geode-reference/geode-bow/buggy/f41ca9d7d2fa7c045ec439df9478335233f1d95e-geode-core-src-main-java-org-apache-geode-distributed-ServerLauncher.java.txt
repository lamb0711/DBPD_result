GEODE-3277: Fix error path constructors of Launcher inner State classess

Updated tests for changes in the error constructors for ServerState and
LocatorState.

Minor spelling corrections.

+import java.io.UncheckedIOException;
-import org.apache.geode.internal.process.StartupStatusListener;
+import org.apache.geode.management.internal.cli.util.HostUtils;
- * 
+ *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    return this.serverBindAddress;
+    if (serverBindAddress != null) {
+      return this.serverBindAddress;
+    }
+
+    try {
+      return SocketCreator.getLocalHost();
+    } catch (UnknownHostException handled) {
+      // Returning loopback implies the serverBindAddress was null and no IP address
+      // for localhost could be found
+      return InetAddress.getLoopbackAddress();
+    }
-   * 
+   *
-   * 
+   *
-      // NOTE returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
+      // Returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-            new StartupStatusListener() {
-              @Override
-              public void setStatus(final String statusMessage) {
-                debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
-                ServerLauncher.this.statusMessage = statusMessage;
-              }
+            (String statusMessage) -> {
+              debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
+              ServerLauncher.this.statusMessage = statusMessage;
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-
-    debug(
-        "This ServerLauncher was not the instance used to launch the GemFire Cache Server, and neither PID "
-            .concat("nor working directory were specified; the Server's state is unknown.%n"));
+    debug("This ServerLauncher was not the instance used to launch the GemFire Cache Server, and "
+        + "neither PID nor working directory were specified; the Server's state is unknown.%n");
-   * 
+   *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-          : Collections.<String>emptyList();
+          : Collections.emptyList();
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-   * 
+   *
-     * 
+     *
-          null, // serverLocation
+          getServerLocation(launcher), // serverLocation
-          Collections.<String>emptyList(), // jvmArguments
+          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
-          null, // javaVersion
+          System.getProperty("java.version"), // javaVersion
-          null, // host
-          null, // port
+          getServerBindAddress(launcher).getCanonicalHostName(), // host
+          launcher.getServerPortAsString(), // port
+    /*
+     * Guards against throwing NPEs due to incorrect or missing host information while constructing
+     * error states
+     */
+    private static String getServerLocation(ServerLauncher launcher) {
+      if (launcher.getServerPort() == null) {
+        return launcher.getId();
+      }
+      if (launcher.getServerBindAddress() == null) {
+        return HostUtils.getLocatorId(HostUtils.getLocalHost(), launcher.getServerPort());
+      }
+      return HostUtils.getLocatorId(launcher.getServerBindAddress().getCanonicalHostName(),
+          launcher.getServerPort());
+    }
+
-
-
+    private static InetAddress getServerBindAddress(final ServerLauncher launcher) {
+      final InternalCache internalCache = GemFireCacheImpl.getInstance();
+
+      if (internalCache != null) {
+        final List<CacheServer> csList = internalCache.getCacheServers();
+        if (csList != null && !csList.isEmpty()) {
+          final CacheServer cs = csList.get(0);
+          final InetAddress serverBindAddress;
+          try {
+            serverBindAddress = InetAddress.getByName(cs.getBindAddress());
+          } catch (UnknownHostException e) {
+            throw new UncheckedIOException(e);
+          }
+          if (serverBindAddress != null) {
+            return serverBindAddress;
+          }
+        }
+      }
+      return launcher.getServerBindAddress();
+    }
+
-
-
