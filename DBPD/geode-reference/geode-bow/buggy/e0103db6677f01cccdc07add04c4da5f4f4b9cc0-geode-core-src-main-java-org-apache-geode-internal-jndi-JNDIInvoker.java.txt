GEODE-5875: fix JNDIInvoker cleanup (#2610)

Dunit test was added that reproduces the bug.
JNDIInvoker was fixed to only call clearup on the data source being removed.
A concurrent map is now used instead of an array list to keep track of the
jndi-bindings in JNDIInvoker. This allows us to simply remove just one data source
by name when unmapDatasource(name) is called.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>

-import java.util.ArrayList;
-import java.util.Iterator;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import javax.sql.DataSource;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+
-  private static List dataSourceList = new ArrayList();
+  private static final ConcurrentMap<String, Object> dataSourceMap = new ConcurrentHashMap<>();
-    int len = dataSourceList.size();
-    for (int i = 0; i < len; i++) {
-      if (dataSourceList.get(i) instanceof AbstractDataSource)
-        ((AbstractDataSource) dataSourceList.get(i)).clearUp();
-      else if (dataSourceList.get(i) instanceof ClientConnectionFactoryWrapper) {
-        ((ClientConnectionFactoryWrapper) dataSourceList.get(i)).clearUp();
-      }
-    }
-    dataSourceList.clear();
+    dataSourceMap.values().stream().forEach(JNDIInvoker::closeDataSource);
+    dataSourceMap.clear();
+  private static void closeDataSource(Object dataSource) {
+    if (dataSource instanceof AbstractDataSource) {
+      ((AbstractDataSource) dataSource).clearUp();
+    } else if (dataSource instanceof ClientConnectionFactoryWrapper) {
+      ((ClientConnectionFactoryWrapper) dataSource).clearUp();
+    }
+  }
+
-    Object ds = null;
+    DataSource ds = null;
-        dataSourceList.add(ds);
+        dataSourceMap.put(jndiName, ds);
-        dataSourceList.add(ds);
+        dataSourceMap.put(jndiName, ds);
-        dataSourceList.add(ds);
+        dataSourceMap.put(jndiName, ds);
-        dataSourceList.add(ds1);
+        dataSourceMap.put(jndiName, ds1);
-    for (Iterator it = dataSourceList.iterator(); it.hasNext();) {
-      Object obj = it.next();
-      if (obj instanceof AbstractDataSource) {
-        ((AbstractDataSource) obj).clearUp();
-      } else if (obj instanceof ClientConnectionFactoryWrapper) {
-        ((ClientConnectionFactoryWrapper) obj).clearUp();
-      }
-      it.remove();
-    }
+    Object removedDataSource = dataSourceMap.remove(jndiName);
+    closeDataSource(removedDataSource);
-    return dataSourceList.size();
+    return dataSourceMap.size();
