Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_FILL_IN_VALUE;
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE;
+
+import com.gemstone.gemfire.internal.offheap.MemoryChunkWithRefCount;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+import com.gemstone.gemfire.cache.EvictionCriteria;
-  public boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
+  public boolean fillInValue(LocalRegion r,
+      @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) InitialImageOperation.Entry entry,
+  /**
+   * Just like getValue but the result may be a retained off-heap reference.
+   */
+  @Retained
+  public Object getValueRetain(RegionEntryContext context);
-  public void setValue(RegionEntryContext context, Object value) throws RegionClearedException;
+  @Released
+  public void setValue(RegionEntryContext context, @Unretained Object value) throws RegionClearedException;
+   * If the value is a MemoryChunkWithRefCount then increment its refcount.
+   * WARNING: if a MemoryChunkWithRefCount is returned then the caller MUST
+   * call {@link MemoryChunkWithRefCount#release()}.
+   * 
+   * This is only retained in off-heap subclasses.  However, it's marked as
+   * Retained here so that callers are aware that the value may be retained.
+   * 
+   * @return possible OFF_HEAP_OBJECT (caller must release)
-  public Object _getValueUse(RegionEntryContext context, boolean decompress);
+  @Retained 
+  public Object _getValueRetain(RegionEntryContext context, boolean decompress);
+  /** Gets the value field of this entry. */
+  
+  @Unretained
-  public void setValueWithTombstoneCheck(Object value, EntryEvent event) throws RegionClearedException;
+  public void setValueWithTombstoneCheck(@Unretained Object value, EntryEvent event) throws RegionClearedException;
+  @Retained
+  @Retained
+  @Released
-                         Object expectedOldValue,
+                         @Unretained Object expectedOldValue,
+  @Retained
+  @Retained
-  
+
+  /**
+   * Returns true if this entry has been marked for eviction for custom eviction
+   * via {@link EvictionCriteria}.
+   */
+  public boolean isMarkedForEviction();
+
+  /**
+   * Marks this entry for eviction by custom eviction via
+   * {@link EvictionCriteria}.
+   */
+  public void setMarkedForEviction();
+
+  /**
+   * Clears this entry as for eviction by custom eviction via
+   * {@link EvictionCriteria} or when an update is done after it was marked for
+   * eviction.
+   */
+  public void clearMarkedForEviction();
+
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate);
+
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event, boolean isEntryUpdate);
