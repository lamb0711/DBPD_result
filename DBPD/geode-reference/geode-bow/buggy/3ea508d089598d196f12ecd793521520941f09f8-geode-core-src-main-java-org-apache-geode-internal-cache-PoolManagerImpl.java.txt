GEODE-6580: Cleanup static analyzer warnings. (#3432)


-    this.normalManager = addListener;
+    normalManager = addListener;
-    return this.normalManager;
+    return normalManager;
-    return this.pools.get(name);
+    return pools.get(name);
-      for (Iterator<Map.Entry<String, Pool>> itr = pools.entrySet().iterator(); itr.hasNext();) {
-        Map.Entry<String, Pool> entry = itr.next();
+      for (Entry<String, Pool> entry : pools.entrySet()) {
-    // debugStack("getMap: " + this.pools);
-    return new HashMap<String, Pool>(this.pools);
+    return new HashMap<>(pools);
-    synchronized (this.poolLock) {
-      Map<String, Pool> copy = new HashMap<String, Pool>(pools);
+    synchronized (poolLock) {
+      Map<String, Pool> copy = new HashMap<>(pools);
-      this.pools = Collections.unmodifiableMap(copy);
-      this.itrForEmergencyClose = copy.entrySet().iterator();
+      pools = Collections.unmodifiableMap(copy);
+      itrForEmergencyClose = copy.entrySet().iterator();
-    synchronized (this.poolLock) {
-      Map<String, Pool> copy = new HashMap<String, Pool>(pools);
+    synchronized (poolLock) {
+      Map<String, Pool> copy = new HashMap<>(pools);
-        this.pools = Collections.unmodifiableMap(copy);
-        this.itrForEmergencyClose = copy.entrySet().iterator();
+        pools = Collections.unmodifiableMap(copy);
+        itrForEmergencyClose = copy.entrySet().iterator();
-    StringBuffer result = new StringBuffer();
-    result.append(super.toString()).append("-").append(this.normalManager ? "normal" : "xml");
-    return result.toString();
+    return super.toString() + "-" + (normalManager ? "normal" : "xml");
-    for (Iterator<Pool> itr = pools.values().iterator(); itr.hasNext();) {
-      PoolImpl p = (PoolImpl) itr.next();
+    for (Pool pool : pools.values()) {
+      PoolImpl p = (PoolImpl) pool;
-        if (!xmlPoolsOnly || p.getDeclaredInXML()) {
+        if (!xmlPoolsOnly) {
-    Instantiator[] instantiators = new Instantiator[1];
-    instantiators[0] = instantiator;
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
-      PoolImpl next = (PoolImpl) itr.next();
+    Instantiator[] instantiators = new Instantiator[] {instantiator};
+    for (Pool pool : PoolManager.getAll().values()) {
+      PoolImpl next = (PoolImpl) pool;
-        if (eventId == null) {
-          // cache must not exist, do nothing
-        } else {
-          RegisterInstantiatorsOp.execute(next, instantiators,
-              InternalInstantiator.generateEventId());
+        if (eventId != null) {
+          RegisterInstantiatorsOp.execute(next, instantiators, eventId);
-    InstantiatorAttributesHolder[] holders = new InstantiatorAttributesHolder[1];
-    holders[0] = holder;
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
-      PoolImpl next = (PoolImpl) itr.next();
+    InstantiatorAttributesHolder[] holders = new InstantiatorAttributesHolder[] {holder};
+    for (Pool pool : PoolManager.getAll().values()) {
+      PoolImpl next = (PoolImpl) pool;
-        if (eventId == null) {
-          // cache must not exist, do nothing
-        } else {
-          RegisterInstantiatorsOp.execute(next, holders, InternalInstantiator.generateEventId());
+        if (eventId != null) {
+          RegisterInstantiatorsOp.execute(next, holders, eventId);
-    DataSerializer[] dataSerializers = new DataSerializer[1];
-    dataSerializers[0] = dataSerializer;
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
-      PoolImpl next = (PoolImpl) itr.next();
+    DataSerializer[] dataSerializers = new DataSerializer[] {dataSerializer};
+    for (Pool pool : PoolManager.getAll().values()) {
+      PoolImpl next = (PoolImpl) pool;
-        if (eventId == null) {
-          // cache must not exist, do nothing
-        } else {
+        if (eventId != null) {
-    SerializerAttributesHolder[] holders = new SerializerAttributesHolder[1];
-    holders[0] = holder;
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
-      PoolImpl next = (PoolImpl) itr.next();
+    SerializerAttributesHolder[] holders = new SerializerAttributesHolder[] {holder};
+    for (Pool pool : PoolManager.getAll().values()) {
+      PoolImpl next = (PoolImpl) pool;
-        EventID eventId = (EventID) holder.getEventId();
+        EventID eventId = holder.getEventId();
-        if (eventId == null) {
-          // cache must not exist, do nothing
-        } else {
+        if (eventId != null) {
