GEODE-6387: Extract MemberLevelStatsTest

MemberLevelStatsIntegrationTest setUp creates a cache, but the majority
of the tests do not even use or require that cache. So, it's a good
idea to extract those to the new unit test MemberLevelStatsTest.

These changes further isolate the testing in MemberLevelStatsTest to
avoid any potential flakiness.

We also clean up MemberLevelStatsIntegrationTest to prevent potential
causes of flakiness, but ultimately GEODE-6387 is now fixed because
only one test remains so it should be impossible for another test to
leave around an incompatible distributed system.

+import java.util.function.LongSupplier;
+
+  private final LongSupplier clock;
+
-  // private final HistogramStats replyHandoffHistogram;
-  // private final HistogramStats replyWaitHistogram;
-
-    this(f.createAtomicStatistics(type, "distributionStats", statId));
-    // this.replyHandoffHistogram = new HistogramStats("ReplyHandOff", "nanoseconds", f,
-    // new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000},
-    // false);
-    // this.replyWaitHistogram = new HistogramStats("ReplyWait", "nanoseconds", f,
-    // new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000},
-    // false);
+    this(f, "distributionStats", statId, DistributionStats::getStatTime);
-  /**
-   * Used by tests to create an instance given its already existings stats.
-   */
-  public DistributionStats(Statistics stats) {
-    this.stats = stats;
+  @VisibleForTesting
+  public DistributionStats(StatisticsFactory factory, String textId, long statId,
+      LongSupplier clock) {
+    stats = factory == null ? null : factory.createAtomicStatistics(type, textId, statId);
+    this.clock = clock;
-    // this.replyHandoffHistogram = null;
-    // this.replyWaitHistogram = null;
+  private long getTime() {
+    return clock.getAsLong();
+  }
+
-      this.stats.incLong(processedMessagesTimeId, getStatTime() - start);
+      this.stats.incLong(processedMessagesTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-    final long now = getStatTime();
+    final long now = getTime();
-    return getStatTime();
+    return getTime();
-    long ts = getStatTime();
+    long ts = getTime();
-    return getStatTime();
+    return getTime();
-    long ts = getStatTime();
+    long ts = getTime();
-    return getStatTime();
+    return getTime();
-      stats.incLong(serializationTimeId, getStatTime() - start);
+      stats.incLong(serializationTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(pdxInstanceDeserializationTimeId, getStatTime() - start);
+      stats.incLong(pdxInstanceDeserializationTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(deserializationTimeId, getStatTime() - start);
+      stats.incLong(deserializationTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(msgSerializationTimeId, getStatTime() - start);
+      stats.incLong(msgSerializationTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(udpMsgEncryptionTimeId, getStatTime() - start);
+      stats.incLong(udpMsgEncryptionTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(msgDeserializationTimeId, getStatTime() - start);
+      stats.incLong(msgDeserializationTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(udpMsgDecryptionTimeId, getStatTime() - start);
+      stats.incLong(udpMsgDecryptionTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(replyWaitTimeId, getStatTime() - startNanos);
+      stats.incLong(replyWaitTimeId, getTime() - startNanos);
-    return getStatTime();
+    return getTime();
-      stats.incLong(asyncQueueFlushTimeId, getStatTime() - start);
+      stats.incLong(asyncQueueFlushTimeId, getTime() - start);
-    return getStatTime();
+    return getTime();
-      stats.incLong(asyncThreadTimeId, getStatTime() - start);
+      stats.incLong(asyncThreadTimeId, getTime() - start);
-      stats.incLong(batchSendTimeId, getStatTime() - start);
+      stats.incLong(batchSendTimeId, getTime() - start);
-      stats.incLong(batchCopyTimeId, getStatTime() - start);
+      stats.incLong(batchCopyTimeId, getTime() - start);
-      stats.incLong(batchWaitTimeId, getStatTime() - start);
+      stats.incLong(batchWaitTimeId, getTime() - start);
-      stats.incLong(batchFlushTimeId, getStatTime() - start);
+      stats.incLong(batchFlushTimeId, getTime() - start);
-      long delta = getStatTime() - start;
+      long delta = getTime() - start;
