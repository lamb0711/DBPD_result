GEODE-1274: Migration from PulseLogWriter to Log4j standard and removal of associated classes.

* To avoid dependency on geode-core, the pulse loggers are instantiated directly from LogManager, rather than canonical LogService (which itself extends LogManager).
* Significant reduction of logging level state checks, relying on Log4j handling.
* Significant reduction of string concatenation, relying on Log4j2 string substitutions.
* Reduction of logging using an exception e.getMessage, favoring instead passing the exception itself for the stacktrace.
* Multiple identical exception blocks collapsed.
* this closes #446

-import org.apache.geode.tools.pulse.internal.log.PulseLogWriter;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
-  private final PulseLogWriter LOGGER = PulseLogWriter.getLogger();
+  private static final Logger logger = LogManager.getLogger();
-      if (LOGGER.severeEnabled()) {
-        LOGGER.severe(e.getMessage(), e);
-      }
+      logger.fatal(e);
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : " + locatorHost + " & "
-            + resourceBundle.getString("LOG_MSG_PORT") + " : " + locatorPort);
-      }
+      logger.info("{} : {} & {} : {}", resourceBundle.getString("LOG_MSG_HOST"), locatorHost,
+          resourceBundle.getString("LOG_MSG_PORT"), locatorPort);
-          if (LOGGER.infoEnabled()) {
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS") + " - "
-                + inetAddr.toString());
-          }
+          logger.info("{} - {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS"),
+              inetAddr);
-          if (LOGGER.infoEnabled()) {
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS") + " - "
-                + inetAddr.toString());
-          }
+          logger.info("{} - {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS"),
+              inetAddr);
-          if (LOGGER.infoEnabled()) {
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
-          }
+          logger.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_BAD_ADDRESS"));
-        }
+        logger.info(resourceBundle.getString("LOG_MSG_LOCATOR_BAD_ADDRESS"));
-      LOGGER.severe("Exception Details : " + swBuffer.toString() + "\n");
+      logger.fatal("Exception Details : {}\n", swBuffer);
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_USE_LOCATOR_VALUE") + ":"
-            + repository.getJmxUseLocator());
-      }
+      logger.info("{}:{}", resourceBundle.getString("LOG_MSG_USE_LOCATOR_VALUE"),
+          repository.getJmxUseLocator());
-          if (LOGGER.infoEnabled()) {
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
-          }
+          logger.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
-          if (LOGGER.infoEnabled()) {
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_FOUND_MANAGER") + " : "
-                + resourceBundle.getString("LOG_MSG_HOST") + " : " + jmxManagerInfo.host + " & "
-                + resourceBundle.getString("LOG_MSG_PORT") + " : " + jmxManagerInfo.port
-                + (jmxManagerInfo.ssl ? resourceBundle.getString("LOG_MSG_WITH_SSL")
-                    : resourceBundle.getString("LOG_MSG_WITHOUT_SSL")));
-          }
+          logger.info("{} : {} : {} & {} : {}{}",
+              resourceBundle.getString("LOG_MSG_LOCATOR_FOUND_MANAGER"),
+              resourceBundle.getString("LOG_MSG_HOST"), jmxManagerInfo.host,
+              resourceBundle.getString("LOG_MSG_PORT"), jmxManagerInfo.port,
+              (jmxManagerInfo.ssl ? resourceBundle.getString("LOG_MSG_WITH_SSL")
+                  : resourceBundle.getString("LOG_MSG_WITHOUT_SSL")));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : " + this.serverName + " & "
-              + resourceBundle.getString("LOG_MSG_PORT") + " : " + this.port);
-        }
+        logger.info("{} : {} & {} : {}", resourceBundle.getString("LOG_MSG_HOST"), this.serverName,
+            resourceBundle.getString("LOG_MSG_PORT"), this.port);
-        LOGGER.info("Connecting to jmxURL : " + jmxSerURL);
+        logger.info("Connecting to jmxURL : {}", jmxSerURL);
-      LOGGER.severe("Exception Details : " + swBuffer.toString() + "\n");
+      logger.fatal("Exception Details : {}\n", swBuffer);
-          LOGGER.severe("Error closing JMX connection " + swBuffer.toString() + "\n");
+          logger.fatal("Error closing JMX connection {}\n", swBuffer);
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_REGISTERING_APP_URL_TO_MANAGER"));
-    }
+    logger.info(resourceBundle.getString("LOG_MSG_REGISTERING_APP_URL_TO_MANAGER"));
-          if (LOGGER.fineEnabled()) {
-            LOGGER.fine(resourceBundle.getString("LOG_MSG_SETTING_APP_URL_TO_MANAGER"));
-          }
+          logger.debug(resourceBundle.getString("LOG_MSG_SETTING_APP_URL_TO_MANAGER"));
-          if (LOGGER.fineEnabled()) {
-            LOGGER.fine(resourceBundle.getString("LOG_MSG_APP_URL_ALREADY_PRESENT_IN_MANAGER"));
-          }
+          logger.debug(resourceBundle.getString("LOG_MSG_APP_URL_ALREADY_PRESENT_IN_MANAGER"));
-          if (LOGGER.fineEnabled()) {
-            LOGGER.fine(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND") + " "
-                + resourceBundle.getString("LOG_MSG_JMX_GET_NEW_CONNECTION"));
-          }
+          logger.debug("{} {}", resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"),
+              resourceBundle.getString("LOG_MSG_JMX_GET_NEW_CONNECTION"));
-            if (LOGGER.infoEnabled()) {
-              LOGGER.info(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"));
-            }
+            logger.info(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"));
-          if (LOGGER.fineEnabled()) {
-            LOGGER.fine(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_IS_AVAILABLE"));
-          }
+          logger.debug(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_IS_AVAILABLE"));
-            LOGGER.severe(e);
+            logger.fatal(e);
-      // LOGGER.info("statementObjectNames = " + statementObjectNames);
-        // LOGGER.info("stmtObjectName = " + stmtObjectName);
-      LOGGER.severe("IOException Details : " + swBuffer.toString() + "\n");
+      logger.fatal("IOException Details : {}\n", swBuffer);
-          LOGGER.severe("Error closing JMX connection " + swBuffer.toString() + "\n");
+          logger.fatal("Error closing JMX connection {}\n", swBuffer);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
-    } catch (MBeanException anfe) {
-      LOGGER.warning(anfe);
+    } catch (InstanceNotFoundException | ReflectionException | MBeanException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
-    } catch (MBeanException me) {
-      LOGGER.warning(me);
-    } catch (AttributeNotFoundException anfe) {
-      LOGGER.warning(anfe);
-    } catch (IntrospectionException ire) {
-      LOGGER.warning(ire);
+    } catch (InstanceNotFoundException | ReflectionException | AttributeNotFoundException
+        | IntrospectionException | MBeanException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
-    } catch (MBeanException me) {
-      LOGGER.warning(me);
-    } catch (AttributeNotFoundException anfe) {
-      LOGGER.warning(anfe);
-    } catch (IntrospectionException ire) {
-      LOGGER.warning(ire);
+    } catch (InstanceNotFoundException | ReflectionException | AttributeNotFoundException
+        | IntrospectionException | MBeanException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
-    } catch (MBeanException me) {
-      LOGGER.warning(me);
-    } catch (AttributeNotFoundException anfe) {
-      LOGGER.warning(anfe);
-    } catch (IntrospectionException ire) {
-      LOGGER.warning(ire);
+    } catch (InstanceNotFoundException | ReflectionException | MBeanException
+        | AttributeNotFoundException | IntrospectionException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
-    } catch (MBeanException me) {
-      LOGGER.warning(me);
-    } catch (AttributeNotFoundException anfe) {
-      LOGGER.warning(anfe);
+    } catch (InstanceNotFoundException | ReflectionException | AttributeNotFoundException
+        | MBeanException infe) {
+      logger.warn(infe);
-      LOGGER.fine("updateRegionOnMembers : # regionOnMembers objects in region = "
-          + regionOnMemberList.size());
-
+      logger.debug("updateRegionOnMembers : # regionOnMembers objects in region = {}",
+          regionOnMemberList.size());
-            LOGGER.fine("updateRegionOnMembers : Processing existing Member name = "
-                + anRom.getMemberName());
+            logger.debug("updateRegionOnMembers : Processing existing Member name = {}",
+                anRom.getMemberName());
-            LOGGER.fine(
-                "updateRegionOnMembers : Object name = " + regionOnMemberMBean.getCanonicalName());
+            logger.debug("updateRegionOnMembers : Object name = {}",
+                regionOnMemberMBean.getCanonicalName());
-                  LOGGER.fine(
-                      "updateRegionOnMembers : anRom.getEntrySize() = " + anRom.getEntrySize());
+                  logger.debug("updateRegionOnMembers : anRom.getEntrySize() = {}",
+                      anRom.getEntrySize());
-                  LOGGER.fine(
-                      "updateRegionOnMembers : anRom.getEntryCount() = " + anRom.getEntryCount());
+                  logger.debug("updateRegionOnMembers : anRom.getEntryCount() = {}",
+                      anRom.getEntryCount());
-                  LOGGER
-                      .fine("updateRegionOnMembers : anRom.getPutsRate() = " + anRom.getPutsRate());
+                  logger.debug("updateRegionOnMembers : anRom.getPutsRate() = {}",
+                      anRom.getPutsRate());
-                  LOGGER
-                      .fine("updateRegionOnMembers : anRom.getGetsRate() = " + anRom.getGetsRate());
+                  logger.debug("updateRegionOnMembers : anRom.getGetsRate() = {}",
+                      anRom.getGetsRate());
-                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskGetsRate() = "
-                      + anRom.getDiskGetsRate());
+                  logger.debug("updateRegionOnMembers : anRom.getDiskGetsRate() = {}",
+                      anRom.getDiskGetsRate());
-                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskPutsRate() = "
-                      + anRom.getDiskPutsRate());
+                  logger.debug("updateRegionOnMembers : anRom.getDiskPutsRate() = {}",
+                      anRom.getDiskPutsRate());
-                  LOGGER.fine("updateRegionOnMembers : anRom.getLocalMaxMemory() = "
-                      + anRom.getLocalMaxMemory());
+                  logger.debug("updateRegionOnMembers : anRom.getLocalMaxMemory() = {}",
+                      anRom.getLocalMaxMemory());
-            LOGGER.fine("updateRegionOnMembers : Existing member on region : getGetsRate() = "
-                + anRom.getGetsPerSecTrend().size() + ", getPutsRate() = "
-                + anRom.getPutsPerSecTrend().size() + ", getDiskGetsRate() = "
-                + anRom.getDiskReadsPerSecTrend().size() + ", getDiskPutsRate() = "
-                + anRom.getDiskWritesPerSecTrend().size());
-
+            logger.debug(
+                "updateRegionOnMembers : Existing member on region : getGetsRate() = {}, getPutsRate() = {}, getDiskGetsRate() = {}, getDiskPutsRate() = {}",
+                anRom.getGetsPerSecTrend().size(), anRom.getPutsPerSecTrend().size(),
+                anRom.getDiskReadsPerSecTrend().size(), anRom.getDiskWritesPerSecTrend().size());
-      LOGGER.fine(
-          "updateRegionOnMembers : Loop over remaining member names and adding new member in region. Existing count = "
-              + regionOnMemberList.size());
-      LOGGER.fine(
-          "updateRegionOnMembers : Remaining new members in this region = " + memberNames.size());
+      logger.debug(
+          "updateRegionOnMembers : Loop over remaining member names and adding new member in region. Existing count = {}",
+          regionOnMemberList.size());
+      logger.debug("updateRegionOnMembers : Remaining new members in this region = {}",
+          memberNames.size());
-        LOGGER.fine("updateRegionOnMembers : Adding New member on region : getGetsRate() = "
-            + regionOnMember.getGetsRate() + ", getPutsRate() = " + regionOnMember.getPutsRate()
-            + ", getDiskGetsRate() = " + regionOnMember.getDiskGetsRate() + ", getDiskPutsRate() = "
-            + regionOnMember.getDiskPutsRate());
-
+        logger.debug(
+            "updateRegionOnMembers : Adding New member on region : getGetsRate() = {}, getPutsRate() = {}, getDiskGetsRate() = {}, getDiskPutsRate() = {}",
+            regionOnMember.getGetsRate(), regionOnMember.getPutsRate(),
+            regionOnMember.getDiskGetsRate(), regionOnMember.getDiskPutsRate());
-      LOGGER.fine("updateRegionOnMembers : Total regions on member in region "
-          + region.getFullPath() + " after update = " + region.getRegionOnMembers().length);
-    } catch (MalformedObjectNameException e) {
-      LOGGER.warning(e);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
+      logger.debug("updateRegionOnMembers : Total regions on member in region after update = {}",
+          region.getFullPath(), region.getRegionOnMembers().length);
+    } catch (MalformedObjectNameException | InstanceNotFoundException | ReflectionException e) {
+      logger.warn(e);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
+    } catch (InstanceNotFoundException | ReflectionException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
+    } catch (InstanceNotFoundException | ReflectionException infe) {
+      logger.warn(infe);
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
+    } catch (InstanceNotFoundException | ReflectionException infe) {
+      logger.warn(infe);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + Float.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, Float.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception occurred: " + e.getMessage());
-      }
+      logger.info("Exception occurred: ", e);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + Integer.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, Integer.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception occurred: " + e.getMessage());
-      }
+      logger.info("Exception occurred: ", e);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + Long.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, Long.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception occurred: " + e.getMessage());
-      }
+      logger.info("Exception occurred: ", e);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + String.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, String.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception occurred: " + e.getMessage());
-      }
+      logger.info("Exception occurred: ", e);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + Boolean.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, Boolean.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception Occured: " + e.getMessage());
-      }
+      logger.info("Exception Occured: ", e);
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info("************************Unexpected type for attribute: " + name
-              + " Expected type: " + Double.class.getName() + " Received type: "
-              + object.getClass().getName() + "************************");
-        }
+        logger.info(
+            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
+            name, Double.class.getName(), object.getClass().getName());
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info("Exception occurred: ", e);
-      }
+      logger.info("Exception occurred: ", e);
-       * { LOGGER.warning(anfe); }catch (javax.management.RuntimeMBeanException anfe) {
+       * { logger.warn(anfe); }catch (javax.management.RuntimeMBeanException anfe) {
-       * //LOGGER.
+       * //logger.
-    } catch (InstanceNotFoundException infe) {
-      LOGGER.warning(infe);
-    } catch (ReflectionException re) {
-      LOGGER.warning(re);
+    } catch (InstanceNotFoundException | ReflectionException infe) {
+      logger.warn(infe);
-          if (LOGGER.fineEnabled()) {
-            LOGGER.fine(e.getMessage());
-          }
+          logger.debug(e);
