 GEODE-5305: Add flag to TXCommitMessage to indicate the use of shadow key (#2043)

* Add new unit test for TxCommentMessage serialization.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

-   * This list contains classes that Geode's classes subclass, such as antlr AST classes which
-   * are used by our Object Query Language. It also contains certain
-   * classes that are DataSerializable but end up being serialized as part of other serializable
-   * objects. VersionedObjectList, for instance, is serialized as part of a
-   * partial putAll exception object.
+   * This list contains classes that Geode's classes subclass, such as antlr AST classes which are
+   * used by our Object Query Language. It also contains certain classes that are DataSerializable
+   * but end up being serialized as part of other serializable objects. VersionedObjectList, for
+   * instance, is serialized as part of a partial putAll exception object.
-   * Do not java-serialize objects that Geode does not have complete control over. This
-   * leaves us open to security attacks such as Gadget Chains and compromises the ability
-   * to do a rolling upgrade from one version of Geode to the next.
+   * Do not java-serialize objects that Geode does not have complete control over. This leaves us
+   * open to security attacks such as Gadget Chains and compromises the ability to do a rolling
+   * upgrade from one version of Geode to the next.
-   * DataSerializableFixedID
-   * for internal Geode objects. This gives you better control over backward-compatibility.
+   * DataSerializableFixedID for internal Geode objects. This gives you better control over
+   * backward-compatibility.
-   * Do not add to this list unless absolutely necessary. Instead put your classes either
-   * in the sanctionedSerializables file for your module or in its excludedClasses file.
-   * Run AnalyzeSerializables to generate the content for the file.
+   * Do not add to this list unless absolutely necessary. Instead put your classes either in the
+   * sanctionedSerializables file for your module or in its excludedClasses file. Run
+   * AnalyzeSerializables to generate the content for the file.
-   * {@code RegistrationListener}s that receive callbacks when {@code DataSerializer}s and
-   * {@code Instantiator}s are registered. Note: copy-on-write access used for this set
+   * {@code RegistrationListener}s that receive callbacks when {@code DataSerializer}s and {@code
+   * Instantiator}s are registered. Note: copy-on-write access used for this set
-   *
-        s = LocalizedStrings.DataSerializer_CLASS_0_DOES_NOT_HAVE_A_ZEROARGUMENT_CONSTRUCTOR_IT_IS_AN_INNER_CLASS_OF_1_SHOULD_IT_BE_A_STATIC_INNER_CLASS;
+        s =
+            LocalizedStrings.DataSerializer_CLASS_0_DOES_NOT_HAVE_A_ZEROARGUMENT_CONSTRUCTOR_IT_IS_AN_INNER_CLASS_OF_1_SHOULD_IT_BE_A_STATIC_INNER_CLASS;
-   *
-   * Marks a {@code DataSerializer} className for registration with the data serialization
-   * framework if and when it is needed. Does not necessarily load the classes into this VM.
+   * Marks a {@code DataSerializer} className for registration with the data serialization framework
+   * if and when it is needed. Does not necessarily load the classes into this VM.
-   * During client/server handshakes the server may send a collection of DataSerializers and
-   * the classes they support. The DataSerializers are registered as "holders" to avoid loading the
-   * actual classes until they're needed. This method registers the names of classes supported
-   * by the DataSerializers
+   * During client/server handshakes the server may send a collection of DataSerializers and the
+   * classes they support. The DataSerializers are registered as "holders" to avoid loading the
+   * actual classes until they're needed. This method registers the names of classes supported by
+   * the DataSerializers
-   * A SerializerAttributesHolder holds information required to load a DataSerializer
-   * and exists to allow client/server connections to be created more quickly than
-   * they would if the DataSerializer information downloaded from the server were
-   * used to immediately load the corresponding classes.
+   * A SerializerAttributesHolder holds information required to load a DataSerializer and exists to
+   * allow client/server connections to be created more quickly than they would if the
+   * DataSerializer information downloaded from the server were used to immediately load the
+   * corresponding classes.
-     *
-   * Returns the {@code DataSerializer} for the given class. If no class has been registered,
-   * {@code null} is returned. Remember that it is okay to return {@code null} in this case. This
-   * method is invoked when writing an object. If a serializer isn't available, then its the user's
-   * fault.
+   * Returns the {@code DataSerializer} for the given class. If no class has been registered, {@code
+   * null} is returned. Remember that it is okay to return {@code null} in this case. This method is
+   * invoked when writing an object. If a serializer isn't available, then its the user's fault.
-   * This method is internal because its semantics (that is, its ability to write any kind of
-   * {@code Set}) are different from the {@code write}XXX methods of the external
-   * {@code DataSerializer}.
+   * This method is internal because its semantics (that is, its ability to write any kind of {@code
+   * Set}) are different from the {@code write}XXX methods of the external {@code DataSerializer}.
-   *
-   *
-   *
-   *
-   *
-  /** read a set of Long objects */
+  /**
+   * read a set of Long objects
+   */
-  /** read a set of Long objects */
+  /**
+   * read a set of Long objects
+   */
-
-   *
-      throw new ToDataException("toData failed on DataSerializable " + ds.getClass(), t);
+      throw new ToDataException(
+          "toData failed on DataSerializable " + null == ds ? "null" : ds.getClass().toString(), t);
-   * Serializes a list of Integers. The argument may be null. Deserialize with readListOfIntegers().
+   * Serializes a list of Integers. The argument may be null. Deserialize with
+   * readListOfIntegers().
-   *
-    /** The DataSerializer that is filled in upon registration */
+    /**
+     * The DataSerializer that is filled in upon registration
+     */
-    /** set to true once setSerializer is called. */
+    /**
+     * set to true once setSerializer is called.
+     */
+
+
+
-   * A distribution message that alerts other members of the distributed cache of a new
-   * {@code DataSerializer} being registered.
+   * A distribution message that alerts other members of the distributed cache of a new {@code
+   * DataSerializer} being registered.
-    /** The name of the {@code DataSerializer} class */
+    /**
+     * The name of the {@code DataSerializer} class
+     */
-    /** The versions in which this message was modified */
+    /**
+     * The versions in which this message was modified
+     */
-     * Creates a new {@code RegistrationMessage} that broadcasts that the given
-     * {@code DataSerializer} was registered.
+     * Creates a new {@code RegistrationMessage} that broadcasts that the given {@code
+     * DataSerializer} was registered.
-   * A listener whose listener methods are invoked when {@link DataSerializer}s and
-   * {@link Instantiator}s are registered. This is part of the fix for bug 31422.
+   * A listener whose listener methods are invoked when {@link DataSerializer}s and {@link
+   * Instantiator}s are registered. This is part of the fix for bug 31422.
-     * Creates a new {@code DSObjectInputStream} that delegates its behavior to a given
-     * {@code InputStream}.
+     * Creates a new {@code DSObjectInputStream} that delegates its behavior to a given {@code
+     * InputStream}.
-   *
