GEODE-5407: increase timeout and provide more logging (#2120)

Co-authored-by: Mark Hanson <mhanson@pivotal.io>
+import org.apache.logging.log4j.Logger;
+import org.apache.geode.internal.logging.LogService;
+  private Logger logger = LogService.getLogger();
-    vm.invoke(() -> ClusterStartupRule.memberStarter.forceDisconnectMember());
+    vm.invoke("force disconnect", () -> ClusterStartupRule.memberStarter.forceDisconnectMember());
-    vm.invoke(() -> Awaitility.waitAtMost(30, TimeUnit.SECONDS).until(() -> {
-      InternalLocator intLocator = InternalLocator.getLocator();
-      InternalCache cache = ClusterStartupRule.getCache();
-      return intLocator != null && cache != null && intLocator.getDistributedSystem().isConnected()
-          && intLocator.isReconnected();
-    }));
+    vm.invoke(() -> {
+      try {
+        Awaitility.waitAtMost(60, TimeUnit.SECONDS).until(() -> {
+          InternalLocator intLocator = ClusterStartupRule.getLocator();
+          InternalCache cache = ClusterStartupRule.getCache();
+          return intLocator != null && cache != null && intLocator.getDistributedSystem()
+              .isConnected() && intLocator.isReconnected();
+        });
+      } catch (Exception e) {
+        // provide more information when condition is not satisfied after one minute
+        InternalLocator intLocator = ClusterStartupRule.getLocator();
+        InternalCache cache = ClusterStartupRule.getCache();
+        logger.info("locator is not null: " + (intLocator != null));
+        logger.info("cache is not null: " + (cache != null));
+        logger.info("ds is connected: " + (intLocator.getDistributedSystem().isConnected()));
+        logger.info("locator is reconnected: " + (intLocator.isReconnected()));
+        throw e;
+      }
+
+    });
-    vm.invoke(() -> Awaitility.waitAtMost(30, SECONDS).until(() -> {
-      InternalDistributedSystem internalDistributedSystem =
-          InternalDistributedSystem.getConnectedInstance();
-      return internalDistributedSystem != null
-          && internalDistributedSystem.getCache() != null
-          && !internalDistributedSystem.getCache().getCacheServers().isEmpty();
-    }));
-
+    vm.invoke(() -> {
+      try {
+        Awaitility.waitAtMost(60, SECONDS).until(() -> {
+          InternalDistributedSystem internalDistributedSystem =
+              InternalDistributedSystem.getConnectedInstance();
+          return internalDistributedSystem != null
+              && internalDistributedSystem.getCache() != null
+              && !internalDistributedSystem.getCache().getCacheServers().isEmpty();
+        });
+      } catch (Exception e) {
+        // provide more information when condition is not satisfied after one minute
+        InternalDistributedSystem internalDistributedSystem =
+            InternalDistributedSystem.getConnectedInstance();
+        logger.info("ds is not null: " + (internalDistributedSystem != null));
+        logger.info("cache is not null: " + (internalDistributedSystem.getCache() != null));
+        logger.info("has cache server: "
+            + (!internalDistributedSystem.getCache().getCacheServers().isEmpty()));
+        throw e;
+      }
+    });
