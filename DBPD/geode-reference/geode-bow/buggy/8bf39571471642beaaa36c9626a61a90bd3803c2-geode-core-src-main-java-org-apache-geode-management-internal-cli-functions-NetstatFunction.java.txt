Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final String OS_NAME_LINUX   = "Linux";
-  private static final String OS_NAME_MACOS   = "darwin";
+  private static final String OS_NAME_LINUX = "Linux";
+  private static final String OS_NAME_MACOS = "darwin";
-  private static final String OS_NAME_PROP    = "os.name";
-  private static final String OS_ARCH_PROP    = "os.arch";
+  private static final String OS_NAME_PROP = "os.name";
+  private static final String OS_ARCH_PROP = "os.arch";
-  
+
-  
+
-  private static final String LSOF_COMMAND    = "lsof";
+  private static final String LSOF_COMMAND = "lsof";
-      NetstatFunctionArgument args = (NetstatFunctionArgument)context.getArguments();
+      NetstatFunctionArgument args = (NetstatFunctionArgument) context.getArguments();
-      addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator); //{0} will be replaced on Manager
+      addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator); // {0} will be replaced on
+                                                                    // Manager
-      context.getResultSender().lastResult(new NetstatFunctionResult(host, netstatInfo.toString(), CliUtil.compressBytes(netstatOutput.getBytes())));
+      context.getResultSender().lastResult(new NetstatFunctionResult(host, netstatInfo.toString(),
+          CliUtil.compressBytes(netstatOutput.getBytes())));
-  private static void addMemberHostHeader(final StringBuilder netstatInfo, final String id, final String host, final String lineSeparator) {
+  private static void addMemberHostHeader(final StringBuilder netstatInfo, final String id,
+      final String host, final String lineSeparator) {
-    String osInfo = System.getProperty(OS_NAME_PROP) +" " + System.getProperty(OS_VERSION_PROP) + " " + System.getProperty(OS_ARCH_PROP);
-    memberPlatFormInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__FOR_HOST_1_OS_2_MEMBER_0, new Object[] {id, host, osInfo, lineSeparator}));
+    String osInfo = System.getProperty(OS_NAME_PROP) + " " + System.getProperty(OS_VERSION_PROP)
+        + " " + System.getProperty(OS_ARCH_PROP);
+    memberPlatFormInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__FOR_HOST_1_OS_2_MEMBER_0,
+        new Object[] {id, host, osInfo, lineSeparator}));
-    netstatInfo.append(lineSeparator)
-      .append(memberPlatFormInfo.toString())
-      .append(lineSeparator)
-      .append(netstatInfoBottom.toString())
-      .append(lineSeparator);
+    netstatInfo.append(lineSeparator).append(memberPlatFormInfo.toString()).append(lineSeparator)
+        .append(netstatInfoBottom.toString()).append(lineSeparator);
-      netstatInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1, new Object[] {NETSTAT_COMMAND, e.getMessage()}));
+      netstatInfo.append(CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1,
+          new Object[] {NETSTAT_COMMAND, e.getMessage()}));
-      netstatInfo.append(lineSeparator); //additional new line
+      netstatInfo.append(lineSeparator); // additional new line
-  private static void executeLsof(final StringBuilder existingNetstatInfo, final String lineSeparator) {
+  private static void executeLsof(final StringBuilder existingNetstatInfo,
+      final String lineSeparator) {
-    existingNetstatInfo.append("################ "+LSOF_COMMAND+" output ###################").append(lineSeparator);
-    if (OS_NAME_LINUX.equalsIgnoreCase(osName) || OS_NAME_MACOS.equalsIgnoreCase(osName) || OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
+    existingNetstatInfo.append("################ " + LSOF_COMMAND + " output ###################")
+        .append(lineSeparator);
+    if (OS_NAME_LINUX.equalsIgnoreCase(osName) || OS_NAME_MACOS.equalsIgnoreCase(osName)
+        || OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
-          existingNetstatInfo.append(CliStrings.format(
-              CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1,
-              new Object[] { LSOF_COMMAND, CliStrings.NETSTAT__MSG__LSOF_NOT_IN_PATH }));
+          existingNetstatInfo
+              .append(CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1,
+                  new Object[] {LSOF_COMMAND, CliStrings.NETSTAT__MSG__LSOF_NOT_IN_PATH}));
-          existingNetstatInfo.append(CliStrings.format(
-              CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1,
-              new Object[] { LSOF_COMMAND, e.getMessage() }));
-        }        
+          existingNetstatInfo
+              .append(CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_EXECUTE_0_REASON_1,
+                  new Object[] {LSOF_COMMAND, e.getMessage()}));
+        }
-        existingNetstatInfo.append(lineSeparator); //additional new line
+        existingNetstatInfo.append(lineSeparator); // additional new line
-      existingNetstatInfo.append(CliStrings.NETSTAT__MSG__NOT_AVAILABLE_FOR_WINDOWS).append(lineSeparator);
+      existingNetstatInfo.append(CliStrings.NETSTAT__MSG__NOT_AVAILABLE_FOR_WINDOWS)
+          .append(lineSeparator);
-  
+
-    private final String  lineSeparator;
+    private final String lineSeparator;
-  
+
-    public NetstatFunctionResult(String host, String headerInfo, DeflaterInflaterData compressedBytes) {
+    public NetstatFunctionResult(String host, String headerInfo,
+        DeflaterInflaterData compressedBytes) {
