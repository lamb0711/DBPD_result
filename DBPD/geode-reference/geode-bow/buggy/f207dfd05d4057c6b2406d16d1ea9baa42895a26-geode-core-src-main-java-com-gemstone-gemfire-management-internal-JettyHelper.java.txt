GEODE-420: Added SSLConfigurationFactory to have a single location that determines the SSLConfiguration. Amended all affected classes

-import java.util.Properties;
+import com.gemstone.gemfire.internal.admin.SSLConfig;
+import com.gemstone.gemfire.internal.net.SSLConfigurationFactory;
+import com.gemstone.gemfire.internal.net.SSLEnabledComponent;
+
-  private static final String FILE_PATH_SEPARATOR = System.getProperty(
-      "file.separator");
+  private static final String FILE_PATH_SEPARATOR = System.getProperty("file.separator");
-  
+
-  
-  public static Server initJetty(final String bindAddress, final int port, boolean useSSL,
-      boolean needClientAuth, String protocols, String ciphers, Properties sysProps) throws Exception {
+
+  public static Server initJetty(final String bindAddress, final int port, SSLConfig sslConfig) throws Exception {
-    
+
-    if (useSSL) {
+    if (sslConfig.isEnabled()) {
-      
-      sslContextFactory.setNeedClientAuth(needClientAuth);
-   
-      if (!StringUtils.isBlank(ciphers) && !"any".equalsIgnoreCase(ciphers)) {
+
+      sslContextFactory.setNeedClientAuth(sslConfig.isRequireAuth());
+
+      if (!StringUtils.isBlank(sslConfig.getCiphers()) && !"any".equalsIgnoreCase(sslConfig.getCiphers())) {
-        sslContextFactory.setIncludeCipherSuites(SSLUtil.readArray(ciphers));
+        sslContextFactory.setIncludeCipherSuites(SSLUtil.readArray(sslConfig.getCiphers()));
-      String protocol = SSLUtil.getSSLAlgo(SSLUtil.readArray(protocols));
+      String protocol = SSLUtil.getSSLAlgo(SSLUtil.readArray(sslConfig.getProtocols()));
-      
-      if (StringUtils.isBlank(sysProps.getProperty("javax.net.ssl.keyStore"))) {
+
+      if (StringUtils.isBlank(sslConfig.getKeystore())) {
-      sslContextFactory.setKeyStorePath(sysProps.getProperty("javax.net.ssl.keyStore"));
+      sslContextFactory.setKeyStorePath(sslConfig.getKeystore());
-      if (!StringUtils.isBlank(sysProps.getProperty("javax.net.ssl.keyStoreType"))) {
-        sslContextFactory.setKeyStoreType(sysProps.getProperty("javax.net.ssl.keyStoreType"));
+      if (!StringUtils.isBlank(sslConfig.getKeystoreType())) {
+        sslContextFactory.setKeyStoreType(sslConfig.getKeystoreType());
-      if (!StringUtils.isBlank(sysProps.getProperty("javax.net.ssl.keyStorePassword"))){
-        sslContextFactory.setKeyStorePassword(sysProps.getProperty("javax.net.ssl.keyStorePassword"));
+      if (!StringUtils.isBlank(sslConfig.getKeystorePassword())) {
+        sslContextFactory.setKeyStorePassword(sslConfig.getKeystorePassword());
-      if (!StringUtils.isBlank(sysProps.getProperty("javax.net.ssl.trustStore"))){
-        sslContextFactory.setTrustStorePath(sysProps.getProperty("javax.net.ssl.trustStore"));
+      if (!StringUtils.isBlank(sslConfig.getTruststore())) {
+        sslContextFactory.setTrustStorePath(sslConfig.getTruststore());
-      if (!StringUtils.isBlank(sysProps.getProperty("javax.net.ssl.trustStorePassword"))){
-        sslContextFactory.setTrustStorePassword(sysProps.getProperty("javax.net.ssl.trustStorePassword"));
+      if (!StringUtils.isBlank(sslConfig.getTruststorePassword())) {
+        sslContextFactory.setTrustStorePassword(sslConfig.getTruststorePassword());
-      
-      connector = new ServerConnector(jettyServer, new SslConnectionFactory(sslContextFactory,
-          HttpVersion.HTTP_1_1.asString()), new HttpConnectionFactory(httpConfig));
-      
+      connector = new ServerConnector(jettyServer, new SslConnectionFactory(sslContextFactory, HttpVersion.HTTP_1_1.asString()), new HttpConnectionFactory(httpConfig));
+
-     
+
-    jettyServer.setConnectors(new Connector[] { connector});
-    
+    jettyServer.setConnectors(new Connector[] { connector });
+
-    
+
-    
+
-  
-  public static Server addWebApplication(final Server jetty,
-      final String webAppContext, final String warFilePath) {
+  public static Server addWebApplication(final Server jetty, final String webAppContext, final String warFilePath) {
-
-    final String workingDirectory = USER_DIR
-        .concat(FILE_PATH_SEPARATOR)
-        .concat("GemFire_" + USER_NAME)
-        .concat(FILE_PATH_SEPARATOR)
-        .concat("services")
-        .concat(FILE_PATH_SEPARATOR)
-        .concat("http")
-        .concat(FILE_PATH_SEPARATOR)
-        .concat(
-            (StringUtils.isBlank(bindAddress)) ? "0.0.0.0" : bindAddress)
-        .concat("_")
-        .concat(String.valueOf(port)
-        .concat(underscoredContext));
+    final String workingDirectory = USER_DIR.concat(FILE_PATH_SEPARATOR)
+                                            .concat("GemFire_" + USER_NAME)
+                                            .concat(FILE_PATH_SEPARATOR)
+                                            .concat("services")
+                                            .concat(FILE_PATH_SEPARATOR)
+                                            .concat("http")
+                                            .concat(FILE_PATH_SEPARATOR)
+                                            .concat((StringUtils.isBlank(bindAddress)) ? "0.0.0.0" : bindAddress)
+                                            .concat("_")
+                                            .concat(String.valueOf(port).concat(underscoredContext));
-  private static String normalizeWebAppArchivePath(
-      final String webAppArchivePath) {
-    return (webAppArchivePath.startsWith(File.separator) ? new File(
-        webAppArchivePath) :
-        new File(".", webAppArchivePath)).getAbsolutePath();
+  private static String normalizeWebAppArchivePath(final String webAppArchivePath) {
+    return (webAppArchivePath.startsWith(File.separator) ? new File(webAppArchivePath) : new File(".", webAppArchivePath)).getAbsolutePath();
-    return (webAppContext.startsWith(
-        "/") ? webAppContext : "/" + webAppContext);
+    return (webAppContext.startsWith("/") ? webAppContext : "/" + webAppContext);
-      final Server jetty = JettyHelper.initJetty(null, 8090, false, false, null, null, null);
+      final Server jetty = JettyHelper.initJetty(null, 8090, SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.HTTP_SERVICE));
-        JettyHelper.addWebApplication(jetty,
-            normalizeWebAppContext(webAppContext),
-            normalizeWebAppArchivePath(webAppArchivePath));
+        JettyHelper.addWebApplication(jetty, normalizeWebAppContext(webAppContext), normalizeWebAppArchivePath(webAppArchivePath));
-      System.out.printf(
-          "usage:%n>java com.gemstone.gemfire.management.internal.TomcatHelper <web-app-context> <war-file-path> [<web-app-context> <war-file-path>]*");
+      System.out.printf("usage:%n>java com.gemstone.gemfire.management.internal.TomcatHelper <web-app-context> <war-file-path> [<web-app-context> <war-file-path>]*");
