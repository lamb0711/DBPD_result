GEODE-1994: Overhaul of internal.lang.StringUtils to extend and heavily use commons.lang.StringUtils

*   geode.internal.lang.StringUtils has been deprecated.  In the interim, it has been heavily refactored and extends commons.lang.StringUtils.
*
*   Renamed:
*   --  EMPTY_STRING -> EMPTY (inherited)
*   --  toUpperCase  -> upperCase (inherited)
*   --  toLowerCase  -> lowerCase (inherited)
*   --  padEnding    -> rightPad (inherited)
*
*   Removed:
*   --  EMPTY_STRING_ARRAY; usage replaced with commons.lang.ArrayUtils.EMPTY_STRING_ARRAY
*   --  SPACES
*   --  UTF_8; rare usage replaced with raw string
*   --  concat; usage replaced with commons.lang.join, refactoring as necessary.
*   --  getLettersOnly
*   --  getSpaces
*   --  truncate
*   --  valueOf; usage refactored to use defaultString
*
*   Refactored
*   --  defaultIfBlank: previously relied on varargs and could return null.  Usage refactored to allow inheritance from commons.
*   --  defaultString(s, EMPTY) refactored to use standard signature defaultString(s) for consistency throughout codebase.
*   --  isBlank: usage refactored to resolve discrepancies with commons.lang.isBlank, which is now inherited.
*   --  isEmpty: usage refactored to resolve discrepancies with commons.lang.isEmpty, which is now inherited.
*
*   Code Cleanup:
*   --  Many uses of !isBlank -> isNotBlank
*   --  Changes suggested by Inspections on most touched files.
*   --     Explicit <T> -> <> when type is inferable
*   --     while loops operating on iterators converted to for each loops
*   --     for loops operating on array indices converted to for each loops
*   --  Various string typos corrected.
*   --  isEmpty(s.trim()) -> isBlank(s)
*   --  s.trim().isEmpty() -> isEmpty(s)
*   --  Removed some instances of 'dead' code
*   --  Optimized imports in every touched file
*
*   Qualitative Changes:
*   --  The following functions now throw an error when called with a null string input:
*   --  *  LocatorLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setHostnameForClients
*   --  (Unit tests added to capture these changes)
*
*   Notes:
*   --  StringUtils.wraps may be inherited from Apache Commons when the dependency is updated.
*   --  AbstractLauncher.getMember has the documented behavior of returning null when both MemberName and ID are blank.  Is this the best behavior for this method?

* this closes #521

-import java.io.IOException;
-import java.io.Serializable;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.apache.logging.log4j.Logger;
-
+import org.apache.commons.lang.StringUtils;
+import org.apache.logging.log4j.Logger;
+
+import java.io.Serializable;
+import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.StringTokenizer;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-    Function loclQueryFunc = new LocalQueryFunction("LocalQueryFunction", regionName, showMember)
+    Function localQueryFunc = new LocalQueryFunction("LocalQueryFunction", regionName, showMember)
-        ResultCollector rcollector = null;
+        ResultCollector rcollector;
-            SelectResults selectResults =
-                (SelectResults) lds.executeQuery(query, null, localPrimaryBucketSet);
-            results = selectResults;
+            results = (SelectResults) lds.executeQuery(query, null, localPrimaryBucketSet);
-              .setArguments(queryString).execute(loclQueryFunc);
+              .setArguments(queryString).execute(localQueryFunc);
-        for (Iterator iter = selectResults.iterator(); iter.hasNext();) {
-          Object object = iter.next();
+        for (Object object : selectResults) {
-            BeanUtilFuncs.compress(new JsonisedErroMessage(NO_DATA_FOUND).toString()));
+            BeanUtilFuncs.compress(new JsonisedErrorMessage(NO_DATA_FOUND).toString()));
-            List<String> decompressedList = new ArrayList<String>();
+            List<String> decompressedList = new ArrayList<>();
-        List<String> decompressedList = new ArrayList<String>();
+        List<String> decompressedList = new ArrayList<>();
-          String decompressedStr = null;
+          String decompressedStr;
-    } catch (IOException e) {
-      throw new Exception(
-          ManagementStrings.QUERY__MSG__QUERY_EXEC.toLocalizedString(e.getMessage()));
-    } catch (Exception e) {
-      throw new Exception(
-          ManagementStrings.QUERY__MSG__QUERY_EXEC.toLocalizedString(e.getMessage()));
-      return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__QUERY_EMPTY.toLocalizedString())
+      return new JsonisedErrorMessage(ManagementStrings.QUERY__MSG__QUERY_EMPTY.toLocalizedString())
-    if (members != null && !members.trim().isEmpty()) {
-      inputMembers = new HashSet<DistributedMember>();
+    if (StringUtils.isNotBlank(members)) {
+      inputMembers = new HashSet<>();
-          return new JsonisedErroMessage(
+          return new JsonisedErrorMessage(
-            return new JsonisedErroMessage(
+            return new JsonisedErrorMessage(
-                return new JsonisedErroMessage(
+                return new JsonisedErrorMessage(
-        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__INVALID_QUERY
+        return new JsonisedErrorMessage(ManagementStrings.QUERY__MSG__INVALID_QUERY
-            return new JsonisedErroMessage(
+            return new JsonisedErrorMessage(
-          Object result = callFunction(functionArgs, inputMembers, zipResult);
-          return result;
+          return callFunction(functionArgs, inputMembers, zipResult);
-          Object result = callFunction(functionArgs, associatedMembers, zipResult);
-          return result;
+          return callFunction(functionArgs, associatedMembers, zipResult);
-        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND
+        return new JsonisedErrorMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND
-      return new JsonisedErroMessage(
+      return new JsonisedErrorMessage(
-  private static class JsonisedErroMessage {
+  private static class JsonisedErrorMessage {
-    public JsonisedErroMessage(final String errorMessage) throws Exception {
+    public JsonisedErrorMessage(final String errorMessage) throws Exception {
-    Set<String> regionsInQuery = null;
+    Set<String> regionsInQuery;
-      Set<String> regions = new HashSet<String>();
+      Set<String> regions = new HashSet<>();
