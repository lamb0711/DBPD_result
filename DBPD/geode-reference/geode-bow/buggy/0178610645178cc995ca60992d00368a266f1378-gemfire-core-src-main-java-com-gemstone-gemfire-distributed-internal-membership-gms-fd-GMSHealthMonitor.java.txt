GEODE-77 bug fixes for LocatorDUnitTest

All tests in LocatorDUnitTest now pass except the quorum check,
which needs a test hook.  GMSJoinLeaveJUnitTest, GMSHealthMonitoryJUnitTest
(except for testSuspectMembersCalledThroughSuspectThread) and
MembershipJUnitTest are all passing with these changes.

-import java.util.Date;
+import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.InstallViewMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.JoinRequestMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.JoinResponseMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.LeaveRequestMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.RemoveMemberMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.ViewAckMessage;
-        CustomTimeStamp nextNeigbourTS = GMSHealthMonitor.this.memberVsLastMsgTS.get(neighbour);
+        CustomTimeStamp nextNeighbourTS;
+        synchronized(GMSHealthMonitor.this) {
+          nextNeighbourTS = GMSHealthMonitor.this.memberVsLastMsgTS.get(neighbour);
+        }
+        if (nextNeighbourTS == null) {
+          CustomTimeStamp customTS = new CustomTimeStamp();
+          customTS.setTimeStamp(System.currentTimeMillis());
+          memberVsLastMsgTS.put(neighbour, customTS);
+          return;
+        }
+        
-        long lastTS = currentTime - nextNeigbourTS.getTimeStamp();
+        long lastTS = currentTime - nextNeighbourTS.getTimeStamp();
-    final PingRequestMessage prm = new PingRequestMessage(reqId);
+    final PingRequestMessage prm = new PingRequestMessage(pingMember, reqId);
-          logger.debug("Setting next neighbour as member {} not responded.", pingMember);
+          logger.debug("Setting next neighbour as member {} has not responded.", pingMember);
-    logger.debug(reason);
+    logger.debug("Suspecting {} reason=\"{}\"", mbr, reason);
-    logger.debug("Checking the member: {}", pingMember);
+    logger.debug("Checking member {}", pingMember);
-        logger.debug("Adding member {} to suspect for reason {}.", mbr, reason);
+        logger.info("Suspecting member {}. Reason= {}.", mbr, reason);
+    setNextNeighbour(newView, null);
-    setNextNeighbour(currentView, null);
-    if (newView.equals(currentView)) {
+    if (currentView != null &&
+        newView.getCreator().equals(currentView.getCreator()) &&
+        newView.getViewId() == currentView.getViewId()) {
-    List<InternalDistributedMember> allMembers = currentView.getMembers();
+    List<InternalDistributedMember> allMembers = newView.getMembers();
+      
-      for (int i = 0; i < allMembers.size(); i++) {
+      for (InternalDistributedMember mbr: allMembers) {
-        memberVsLastMsgTS.put(allMembers.get(i), customTS);
+        memberVsLastMsgTS.put(mbr, customTS);
-    PingResponseMessage prm = new PingResponseMessage(m.getRequestId());
-    prm.setRecipient(m.getSender());
-    Set<InternalDistributedMember> membersNotReceivedMsg = services.getMessenger().send(prm);
-    // TODO: send is throwing exception right now
-    if (membersNotReceivedMsg != null && membersNotReceivedMsg.contains(m.getSender())) {
-      logger.debug("Unable to send check response to member: {}", m.getSender());
+    // only respond if the intended recipient is this member
+    InternalDistributedMember me = services.getMessenger().getMemberID();
+    if (me.getVmViewId() < 0 || m.getTarget().equals(me)) {
+      PingResponseMessage prm = new PingResponseMessage(m.getRequestId());
+      prm.setRecipient(m.getSender());
+      Set<InternalDistributedMember> membersNotReceivedMsg = services.getMessenger().send(prm);
+      // TODO: send is throwing exception right now
+      if (membersNotReceivedMsg != null && membersNotReceivedMsg.contains(m.getSender())) {
+        logger.debug("Unable to send check response to member: {}", m.getSender());
+      }
+    } else {
+      logger.debug("Ignoring ping request intended for {}.  My ID is {}", m.getTarget(), me);
-    logger.debug("GMSHealthMonitor.processSuspectMembersRequest invoked for members {}", incomingRequest);
+            } catch (DistributedSystemDisconnectedException e) {
+              return;
-    List<InternalDistributedMember> recipients = currentView.getAllPreferredCoordinators(filter, services.getJoinLeave().getMemberID());
+    List<InternalDistributedMember> recipients = currentView.getPreferredCoordinators(filter, services.getJoinLeave().getMemberID(), 5);
-    Set<InternalDistributedMember> failedRecipients = services.getMessenger().send(rmm);
+    Set<InternalDistributedMember> failedRecipients;
+    try {
+      failedRecipients = services.getMessenger().send(rmm);
+    } catch (DistributedSystemDisconnectedException e) {
+      return;
+    }
