GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


+import java.util.Objects;
-import org.apache.geode.cache.RegionService;
-  private final Set<DistributedMember> sickHosts = new HashSet<DistributedMember>();
+  private final Set<DistributedMember> sickHosts = new HashSet<>();
-  public RegionService getCacheView() {
-    return this.partitionedRegion.getRegionService();
-  }
-
-  public void clearBucketRegion(BucketRegion br) {
+  void clearBucketRegion(BucketRegion br) {
-    if (s == Collections.<InternalDistributedMember>emptySet()) {
-      s = new HashSet<InternalDistributedMember>();
-    }
+      if (s.isEmpty()) {
+        s = new HashSet<>();
+      }
-      return Collections.unmodifiableSet(new HashSet<DistributedMember>(this.sickHosts));
+      return Collections.unmodifiableSet(new HashSet<>(this.sickHosts));
-  public void recoverFromDiskRecursively() {
+  void recoverFromDiskRecursively() {
-                && !colocatedRegion.getDataPolicy().withPersistence()) {
+                && !Objects.requireNonNull(colocatedRegion).getDataPolicy().withPersistence()) {
-    boolean hasPersistentChildRegion = ColocationHelper.hasPersistentChildRegion(partitionedRegion);
-    return hasPersistentChildRegion;
+    return ColocationHelper.hasPersistentChildRegion(partitionedRegion);
-  public void destroyOfflineData() {
+  void destroyOfflineData() {
-  public void finishRemoveBucket() {
+  void finishRemoveBucket() {
-  public void initializePersistenceAdvisor() {
+  void initializePersistenceAdvisor() {
-  public boolean checkBucketRedundancyBeforeGrab(InternalDistributedMember moveSource,
+  boolean checkBucketRedundancyBeforeGrab(InternalDistributedMember moveSource,
-  public void waitForPrimaryPersistentRecovery() {
+  void waitForPrimaryPersistentRecovery() {
-  public void initializePrimaryElector(InternalDistributedMember creationRequestor) {
+  void initializePrimaryElector(InternalDistributedMember creationRequestor) {
-  public void clearPrimaryElector() {
+  void clearPrimaryElector() {
