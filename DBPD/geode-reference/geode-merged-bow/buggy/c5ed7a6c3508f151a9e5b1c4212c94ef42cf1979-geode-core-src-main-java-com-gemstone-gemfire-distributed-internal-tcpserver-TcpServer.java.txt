GEODE-420: Clean up of SocketCreator code in tests.
SocketCreatorFactory currently singleton, to amend at later stage

-import com.gemstone.gemfire.CancelException;
-import com.gemstone.gemfire.DataSerializer;
-import com.gemstone.gemfire.SystemFailure;
-import com.gemstone.gemfire.distributed.internal.*;
-import com.gemstone.gemfire.internal.*;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.logging.LogService;
-import org.apache.logging.log4j.Logger;
-
-import javax.net.ssl.SSLException;
-import java.io.*;
-import java.net.*;
-import java.util.*;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.EOFException;
+import java.io.File;
+import java.io.IOException;
+import java.io.StreamCorruptedException;
+import java.net.InetAddress;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.net.SocketAddress;
+import java.net.URL;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import javax.net.ssl.SSLException;
+
+import org.apache.logging.log4j.Logger;
+
+import com.gemstone.gemfire.CancelException;
+import com.gemstone.gemfire.DataSerializer;
+import com.gemstone.gemfire.SystemFailure;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.distributed.internal.DistributionConfigImpl;
+import com.gemstone.gemfire.distributed.internal.DistributionStats;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.distributed.internal.PoolStatHelper;
+import com.gemstone.gemfire.distributed.internal.PooledExecutorWithDMStats;
+import com.gemstone.gemfire.distributed.internal.SharedConfiguration;
+import com.gemstone.gemfire.internal.DSFIDFactory;
+import com.gemstone.gemfire.internal.GemFireVersion;
+import com.gemstone.gemfire.internal.Version;
+import com.gemstone.gemfire.internal.VersionedDataInputStream;
+import com.gemstone.gemfire.internal.VersionedDataOutputStream;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.internal.net.SocketCreator;
+import com.gemstone.gemfire.internal.net.SocketCreatorFactory;
- * 
+ * <p>
- * 
+
-   * 
+   * <p>
-   * 
+   * <p>
-  private static/* GemStoneAddition */final Map GOSSIP_TO_GEMFIRE_VERSION_MAP = new HashMap();
+  private static/* GemStoneAddition */ final Map GOSSIP_TO_GEMFIRE_VERSION_MAP = new HashMap();
-  
+
-  protected/*GemStoneAddition*/ final/*GemStoneAddition*/ static int READ_TIMEOUT = Integer
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000).intValue();
+  protected/*GemStoneAddition*/ final/*GemStoneAddition*/ static int READ_TIMEOUT = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000)
+                                                                                           .intValue();
-  
+
+  private SocketCreator socketCreator;
+
-  public TcpServer(int port, InetAddress bind_address, Properties sslConfig,
-      DistributionConfigImpl cfg, TcpHandler handler, PoolStatHelper poolHelper, ThreadGroup threadGroup, String threadName) {
+  public TcpServer(int port,
+                   InetAddress bind_address,
+                   Properties sslConfig,
+                   DistributionConfigImpl cfg,
+                   TcpHandler handler,
+                   PoolStatHelper poolHelper,
+                   ThreadGroup threadGroup,
+                   String threadName) {
-    SocketCreator.getDefaultInstance(cfg);
+
+    //TODO Udo: How would I handle this case where the cfg is empty???
+    this.socketCreator = SocketCreatorFactory.getClusterSSLSocketCreator();
-      
+
-    
+
-    this.log.info("TcpServer@"+System.identityHashCode(this)+" restarting: completed.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
+    this.log.info("TcpServer@" + System.identityHashCode(this) + " restarting: completed.  Server thread=" + serverThread + "@" + System.identityHashCode(serverThread) + ";alive=" + serverThread
+      .isAlive());
-  
+
-  
+
-        srv_sock = SocketCreator.getDefaultInstance().createServerSocket(port, BACKLOG);
+        srv_sock = socketCreator.createServerSocket(port, BACKLOG);
-        srv_sock = SocketCreator.getDefaultInstance().createServerSocket(port, BACKLOG, bind_address);
+        srv_sock = socketCreator.createServerSocket(port, BACKLOG, bind_address);
-  
+
-    if(serverThread != null) {
+    if (serverThread != null) {
-  
+
-//    this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
-    if(serverThread != null) { 
+    //    this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
+    if (serverThread != null) {
-  
+
-  
+
-  
+
-    return srv_sock.getLocalSocketAddress(); 
+    return srv_sock.getLocalSocketAddress();
-   *
-      log.warn(
-          "exception closing server socket during shutdown", ex);
+      log.warn("exception closing server socket during shutdown", ex);
-//        this.shutDown = true;
+        //        this.shutDown = true;
-          SocketCreator.getDefaultInstance().configureServerSSLSocket(sock);
+          socketCreator.configureServerSSLSocket(sock);
-            log.debug(
-                "Discarding illegal request from "
-                    + (sock.getInetAddress().getHostAddress() + ":" + sock
-                        .getPort()), e);
+            log.debug("Discarding illegal request from " + (sock.getInetAddress().getHostAddress() + ":" + sock.getPort()), e);
-          if (gossipVersion <= getCurrentGossipVersion()
-              && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
-            versionOrdinal = (short) GOSSIP_TO_GEMFIRE_VERSION_MAP
-                .get(gossipVersion);
-//            if (gossipVersion < getCurrentGossipVersion()) {
-//              if (log.isTraceEnabled()) {
-//                log.debug(
-//                    "Received request from "
-//                        + sock.getInetAddress().getHostAddress()
-//                        + " This locator is running: " + getCurrentGossipVersion()
-//                        + ", but request was version: " + gossipVersion
-//                        + ", version ordinal: " + versionOrdinal);
-//              }
-//            }
+          if (gossipVersion <= getCurrentGossipVersion() && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
+            versionOrdinal = (short) GOSSIP_TO_GEMFIRE_VERSION_MAP.get(gossipVersion);
+            //            if (gossipVersion < getCurrentGossipVersion()) {
+            //              if (log.isTraceEnabled()) {
+            //                log.debug(
+            //                    "Received request from "
+            //                        + sock.getInetAddress().getHostAddress()
+            //                        + " This locator is running: " + getCurrentGossipVersion()
+            //                        + ", but request was version: " + gossipVersion
+            //                        + ", version ordinal: " + versionOrdinal);
+            //              }
+            //            }
-          input = new VersionedDataInputStream(input, Version.fromOrdinal(
-                  versionOrdinal, false));
+          input = new VersionedDataInputStream(input, Version.fromOrdinal(versionOrdinal, false));
-          
+
-          handler.endResponse(request,startTime);
+          handler.endResponse(request, startTime);
-          log.info(
-              "Unable to process request from " + sender + " exception=" + ex.getMessage());
+          log.info("Unable to process request from " + sender + " exception=" + ex.getMessage());
-          if(ex instanceof IOException) {
+          if (ex instanceof IOException) {
-              log.info(
-                  "Exception in processing request from " + sender, ex);
+              log.info("Exception in processing request from " + sender, ex);
-          }
-          else {
-            log.fatal("Exception in processing request from " + 
-                sender, ex);
+          } else {
+            log.fatal("Exception in processing request from " + sender, ex);
-            log.fatal("Exception in processing request from " +
-                sender, ex);
+            log.fatal("Exception in processing request from " + sender, ex);
-   * 
+   *
-        short o = ((Short)entry.getValue()).shortValue();
+        short o = ((Short) entry.getValue()).shortValue();
-          return ((Integer)entry.getKey()).intValue();
-        } else if (o < ordinal && o > closest ) {
+          return ((Integer) entry.getKey()).intValue();
+        } else if (o < ordinal && o > closest) {
-          closestGV = ((Integer)entry.getKey()).intValue();
+          closestGV = ((Integer) entry.getKey()).intValue();
-    return TcpServer.isTesting ? TcpServer.TESTVERSION
-        : TcpServer.GOSSIPVERSION;
+    return TcpServer.isTesting ? TcpServer.TESTVERSION : TcpServer.GOSSIPVERSION;
-    return TcpServer.isTesting ? TcpServer.OLDTESTVERSION
-        : TcpServer.OLDGOSSIPVERSION;
+    return TcpServer.isTesting ? TcpServer.OLDTESTVERSION : TcpServer.OLDGOSSIPVERSION;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS43 INS59 INS66 INS42 INS42 INS66 INS66 INS7 INS22 INS32 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32