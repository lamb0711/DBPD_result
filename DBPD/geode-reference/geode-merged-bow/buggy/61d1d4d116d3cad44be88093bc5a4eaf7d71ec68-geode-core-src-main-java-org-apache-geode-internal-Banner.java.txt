GEODE-4309: Refactor ArgumentRedactor for improved robustness. (#1313)


-import java.util.Iterator;
+import java.util.Map.Entry;
-import org.apache.geode.distributed.internal.DistributionConfigImpl;
+    // Copy the system properties for printing. Some are given explicit lines, and
+    // others are suppressed. Remove these keys, keeping those we want.
-    int processId = -1;
+    Object userName = sp.get("user.name");
+    Object userDir = sp.get("user.dir");
+    Object userHome = sp.get("user.home");
+    Object javaClassPath = sp.get("java.class.path");
+    Object javaLibraryPath = sp.get("java.library.path");
+    sp.remove("user.name");
+    sp.remove("user.dir");
+    sp.remove("user.home");
+    sp.remove("java.class.path");
+    sp.remove("java.library.path");
+    sp.remove("os.name");
+    sp.remove("os.arch");
+
+    int processId = attemptToReadProcessId();
+    short currentOrdinal = Version.CURRENT_ORDINAL;
+
+    List<String> commandLineArguments = new ArrayList<>();
+    RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
+    if (runtimeBean != null) {
+      commandLineArguments.addAll(runtimeBean.getInputArguments()); // fixes 45353
+    }
+
+    if (args != null && args.length != 0) {
+      Collections.addAll(commandLineArguments, args);
+    }
+
+    // Print it all out.
+    out.println();
+    out.println(SEPARATOR);
+    printASFLicense(out);
+    out.println(SEPARATOR);
+    GemFireVersion.print(out);
+    out.println("Communications version: " + currentOrdinal);
+    out.println("Process ID: " + processId);
+    out.println("User: " + userName);
+    out.println("Current dir: " + userDir);
+    out.println("Home dir: " + userHome);
+
+    if (!commandLineArguments.isEmpty()) {
+      out.println("Command Line Parameters:");
+      for (String arg : commandLineArguments) {
+        out.println("  " + ArgumentRedactor.redact(arg));
+      }
+    }
+
+    out.println("Class Path:");
+    prettyPrintPath((String) javaClassPath, out);
+    out.println("Library Path:");
+    prettyPrintPath((String) javaLibraryPath, out);
+
+    if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "disableSystemPropertyLogging")) {
+      out.println("System property logging disabled.");
+    } else {
+      out.println("System Properties:");
+      for (Object o : sp.entrySet()) {
+        Entry me = (Entry) o;
+        String key = me.getKey().toString();
+        String value = ArgumentRedactor.redactValueIfNecessary(key, String.valueOf(me.getValue()));
+        out.println("    " + key + " = " + value);
+      }
+      out.println("Log4J 2 Configuration:");
+      out.println("    " + LogService.getConfigInformation());
+    }
+    out.println(SEPARATOR);
+  }
+
+  /**
+   * @return The PID of the current process, or -1 if the PID cannot be determined.
+   */
+  private static int attemptToReadProcessId() {
+    int processId = -1;
-    out.println();
+    return processId;
+  }
-    final String productName = GemFireVersion.getProductName();
-
-    out.println(SEPARATOR);
-
+  private static void printASFLicense(PrintWriter out) {
-
-    out.println(SEPARATOR);
-
-    GemFireVersion.print(out);
-
-    out.println("Communications version: " + Version.CURRENT_ORDINAL);
-
-    out.println("Process ID: " + processId);
-    out.println("User: " + sp.get("user.name"));
-    sp.remove("user.name");
-    sp.remove("os.name");
-    sp.remove("os.arch");
-    out.println("Current dir: " + sp.get("user.dir"));
-    sp.remove("user.dir");
-    out.println("Home dir: " + sp.get("user.home"));
-    sp.remove("user.home");
-    List<String> allArgs = new ArrayList<>();
-    {
-      RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
-      if (runtimeBean != null) {
-        allArgs.addAll(runtimeBean.getInputArguments()); // fixes 45353
-      }
-    }
-
-    if (args != null && args.length != 0) {
-      Collections.addAll(allArgs, args);
-    }
-    if (!allArgs.isEmpty()) {
-      out.println("Command Line Parameters:");
-      for (String arg : allArgs) {
-        out.println("  " + ArgumentRedactor.redact(arg));
-      }
-    }
-
-    out.println("Class Path:");
-    prettyPrintPath((String) sp.get("java.class.path"), out);
-    sp.remove("java.class.path");
-    out.println("Library Path:");
-    prettyPrintPath((String) sp.get("java.library.path"), out);
-    sp.remove("java.library.path");
-
-    if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "disableSystemPropertyLogging")) {
-      out.println("System property logging disabled.");
-    } else {
-      out.println("System Properties:");
-      Iterator it = sp.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry me = (Map.Entry) it.next();
-        String key = me.getKey().toString();
-        out.println("    " + key + " = " + ArgumentRedactor.redact(String.valueOf(me.getValue())));
-      }
-      out.println("Log4J 2 Configuration:");
-      out.println("    " + LogService.getConfigInformation());
-    }
-    out.println(SEPARATOR);

MOV26 UPD40 INS31 INS31 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 MOV25 MOV21 MOV21 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS60 INS60 INS60 INS60 INS60 INS60 MOV60 MOV25 INS21 INS65 MOV60 MOV54 INS41 INS43 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS39 INS59 INS32 INS66 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 INS42 INS40 UPD42 INS42 INS42 INS70 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV43 INS42 INS42 INS44 MOV32 MOV8 UPD42 UPD42 INS43 INS42 INS60 UPD42 MOV42 UPD43 MOV43 INS59 INS42 INS42 MOV32 UPD43 INS42 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL40 DEL8 DEL40 DEL40 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61