GEODE-77 improved suspect processing, multicast fix for Windows

GMSHealthMonitor was allowing the service to watch itself if it ran out of other members to watch.  This change set modifies that behavior to set the "next neighbor" to null, causing suspect processing to halt until a member transitions out of "suspect" state or a new membership view is installed.

I also found that GMSHealthMonitor wasn't notifying the Manager when a member goes into final-check state, so that membership listeners weren't being notified of suspect events.  This was causing a unit test failure.

JGroupsMessenger now fools the JGroups stack into thinking an IPv4 stack is being used even if IPv6 is available, so that JGroups will use an IPv4 address.  JGroups was selecting an IPv6 address, making communications with IPv4 members impossible and causing a schizm between the GemFire member address and the JGroups address.

The JGroups log level is now set to WARN in the default log4j2.xml settings file.

+import java.lang.reflect.Field;
+import java.util.Arrays;
+import org.jgroups.Message.TransientFlag;
+import com.gemstone.gemfire.distributed.internal.membership.gms.mgr.GMSMembershipManager;
-      properties = replaceStrings(properties, "MCAST_ADDRESS", transport.getMcastId().getHost().getHostAddress());
+      properties = replaceStrings(properties, "MCAST_ADDRESS", dc.getMcastAddress().getHostAddress());
+        checkForWindowsIPv6();
-    logger.debug("JGroups channel created (took {}ms)", System.currentTimeMillis()-start);
+    logger.info("JGroups channel created (took {}ms)", System.currentTimeMillis()-start);
+  
+  /**
+   * JGroups picks an IPv6 address if preferIPv4Stack is false or not set
+   * and preferIPv6Addresses is not set or is true.  We want it to use an
+   * IPv4 address for a dual-IP stack so that both IPv4 and IPv6 messaging work
+   */
+  private void checkForWindowsIPv6() throws Exception {
+    boolean isWindows = ((String)System.getProperty("os.name")).indexOf("Windows") >= 0;
+    boolean preferIpV6Addr = Boolean.getBoolean("java.net.preferIPv6Addresses");
+    if (isWindows && !preferIpV6Addr) {
+      logger.debug("Windows detected - forcing JGroups to think IPv4 is being used so it will choose an IPv4 address");
+      Field m = org.jgroups.util.Util.class.getDeclaredField("ip_stack_type");
+      m.setAccessible(true);
+      m.set(null, org.jgroups.util.StackType.IPv4);
+    }
+  }
+  public void memberSuspected(InternalDistributedMember initiator, InternalDistributedMember suspect) {
+  }
+
+  @Override
+    logger.trace("installing JGroups view: {}", jgv);
+    NetView oldView = this.view;
-        recips = msg.getRecipients().toString();
+        recips = Arrays.toString(msg.getRecipients());
+        jmsg.setTransientFlag(TransientFlag.DONT_LOOPBACK);
+        logger.trace("Sending JGroups message: {}", jmsg);
-            if (logger.isTraceEnabled())
-              logger.trace("Unicasting to {}", to);
+            logger.trace("Unicasting to {}", to);
-    NetView newView = services.getJoinLeave().getView();
-    if (newView != null) {
+    NetView newView = this.view;
+    if (newView != null && newView != oldView) {
-          logger.debug("messenger: member has left the view: {}", d);
+          logger.debug("messenger: member has left the view: {}  view is now {}", d, newView);
+   * returns the JChannel for test verification
+   */
+  public JChannel getJGroupsChannel() {
+    return this.myChannel;
+  }
+  
+  /**
-          logger.info("Failed sending Pong message to " + jgmsg.getSrc());
+          logger.info("Failed sending Pong response to " + jgmsg.getSrc());
-          logger.trace("JGroupsMessenger dispatching {}", msg);
+          logger.trace("JGroupsMessenger dispatching {} from {}", msg, msg.getSender());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS42 INS60 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS65 INS42 INS41 INS66 INS66 INS66 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS27 INS66 INS22 UPD42 INS42 INS27 INS42 INS32 INS42 INS38 INS21 INS60 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS22 INS22 MOV27 INS27 INS52 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS32 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS21 INS36 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS33 INS40 INS21 INS21 INS32 INS11 INS57 INS42 INS45 INS32 INS32 MOV32 INS42 INS43 INS32 INS43 MOV32 INS42 INS42 INS40 INS42 INS42 INS45 INS42 MOV21 UPD42 UPD42 INS42 INS42 INS42 INS45 INS40 INS42 UPD45 INS32 UPD45 INS42 INS42 INS42 UPD45 DEL42 DEL32 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32