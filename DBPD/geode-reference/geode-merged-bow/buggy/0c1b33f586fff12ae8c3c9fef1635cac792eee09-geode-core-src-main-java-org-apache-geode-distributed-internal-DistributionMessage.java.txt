GEODE-7507 remove GMSMembership's dependency on DistributionMessage (#4384)

* GEODE-7507 remove GMSMembership's dependency on DistributionMessage

Prior to this change-set the membership module wrapped all messages in a
GMSMessageAdapter.  This is no longer necessary and I've deleted that
class.  Instead, our messages now implement GMSMessage (now renamed
DistributionMessage) and the geode-core abstract DistributionMessage
class (now renamed ClusterMessage) implements the membership module's
API.

Most of the files in the diff are only affected by the renaming of
GMSMessage and DistributionMessage.  The primary changes are in GMSManager
and DistributionMessage (now named ClusterMessage).

* rebase on develop, rename DistributionMessageObserver

* making pmdMain happy

* revert renaming message class/interface

* fix serialization test

* rename GMSMessage to Message

* fixes for Dan's comments

* addressing pmdMain issue

* removing DistributionMessage from another arch unit test

+import java.util.Collections;
+import java.util.List;
-import org.apache.geode.annotations.Immutable;
-import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
+import org.apache.geode.distributed.internal.membership.gms.api.Message;
-import org.apache.geode.internal.serialization.DataSerializableFixedID;
-public abstract class DistributionMessage implements DataSerializableFixedID, Cloneable {
+public abstract class DistributionMessage
+    implements Message, Cloneable {
-  /**
-   * Indicates that a distribution message should be sent to all other distribution managers.
-   */
-  @Immutable
-  public static final InternalDistributedMember ALL_RECIPIENTS = null;
-
+  private final InternalDistributedMember[] EMPTY_RECIPIENTS_ARRAY =
+      new InternalDistributedMember[0];
+
+  private final List<MemberIdentifier> ALL_RECIPIENTS_LIST =
+      Collections.singletonList(null);
+
+  private final InternalDistributedMember[] ALL_RECIPIENTS_ARRAY =
+      {null};
+
-   * Sets the intended recipient of the message. If recipient is {@link #ALL_RECIPIENTS} then the
+   * Sets the intended recipient of the message. If recipient is Message.ALL_RECIPIENTS
+   * then the
-   * Sets the intended recipient of the message. If recipient set contains {@link #ALL_RECIPIENTS}
+   * Sets the intended recipient of the message. If recipient set contains
+   * Message.ALL_RECIPIENTS
-  public void setRecipients(Collection<? extends DistributedMember> recipients) {
-    if (this.recipients != null) {
-      throw new IllegalStateException(
-          "Recipients can only be set once");
-    }
-    this.recipients = recipients
-        .toArray(new InternalDistributedMember[0]);
+  @Override
+  public void setRecipients(Collection recipients) {
+    this.recipients = (InternalDistributedMember[]) recipients
+        .toArray(EMPTY_RECIPIENTS_ARRAY);
+  @Override
+  public void setRecipient(MemberIdentifier recipient) {
+    this.recipients = new InternalDistributedMember[] {(InternalDistributedMember) recipient};
+  }
+
+  @Override
+  public void registerProcessor() {
+    // override if direct-ack is supported
+  }
+
+  @Override
+  public boolean isHighPriority() {
+    return false;
+  }
+
+  @Override
+  public List<MemberIdentifier> getRecipients() {
+    InternalDistributedMember[] recipients = getRecipientsArray();
+    if (recipients == null
+        || recipients.length == 1 && recipients[0] == ALL_RECIPIENTS) {
+      return ALL_RECIPIENTS_LIST;
+    }
+    return Arrays.asList(recipients);
+  }
+
+
-  public InternalDistributedMember[] getRecipients() {
-    if (this.multicast) {
-      return new InternalDistributedMember[] {ALL_RECIPIENTS};
-    } else if (this.recipients != null) {
-      return this.recipients;
-    } else {
-      return new InternalDistributedMember[] {ALL_RECIPIENTS};
+  public InternalDistributedMember[] getRecipientsArray() {
+    if (this.multicast || this.recipients == null) {
+      return ALL_RECIPIENTS_ARRAY;
+    return this.recipients;
-    if (this.recipients == null) {
-      return "recipients: ALL";
-    } else if (this.multicast) {
-      return "recipients: multicast";
-    } else if (this.recipients.length > 0 && this.recipients[0] == ALL_RECIPIENTS) {
+    if (forAll()) {
-  public void setSender(InternalDistributedMember _sender) {
-    this.sender = _sender;
+  @Override
+  public void setSender(MemberIdentifier _sender) {
+    this.sender = (InternalDistributedMember) _sender;

MOV26 MOV26 MOV26 INS26 MOV31 UPD40 INS40 UPD40 UPD40 UPD43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD42 INS83 INS83 INS5 INS59 UPD83 MOV83 UPD83 MOV83 INS74 INS59 INS83 MOV83 INS5 MOV59 INS78 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS74 MOV29 INS83 MOV5 INS42 INS8 INS78 INS43 INS85 INS42 MOV3 INS43 INS43 INS42 INS32 INS43 INS85 UPD42 INS4 INS42 MOV43 INS42 INS43 INS42 INS21 INS42 INS42 INS41 INS42 INS43 INS43 INS60 INS25 INS41 INS25 MOV41 MOV25 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 UPD66 UPD66 UPD66 INS66 INS42 INS7 INS9 INS42 INS42 MOV5 INS59 INS27 MOV8 INS32 INS27 INS8 INS32 INS42 INS11 MOV22 MOV3 INS42 INS32 INS27 INS27 INS42 INS42 INS42 MOV22 MOV27 INS41 INS42 INS11 INS5 INS32 INS42 INS42 MOV33 INS27 INS27 INS42 INS42 MOV43 INS42 INS43 INS85 MOV42 MOV42 INS42 INS11 INS40 INS34 INS2 INS42 INS42 MOV43 INS42 INS42 INS34 DEL66 DEL65 DEL29 DEL42 DEL78 DEL23 DEL33 DEL42 DEL67 DEL65 DEL42 DEL67 DEL65 DEL42 DEL43 DEL76 DEL74 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL41 DEL42 DEL4 DEL3 DEL52 DEL42 DEL22 DEL27 DEL8 DEL25 DEL25 DEL52 DEL42 DEL22 DEL42 DEL22 DEL34 DEL27 DEL52 DEL42 DEL22 DEL34 DEL2 DEL42 DEL27 DEL27 DEL45 DEL41 DEL8 DEL45 DEL41 DEL8 DEL25 DEL25 DEL42