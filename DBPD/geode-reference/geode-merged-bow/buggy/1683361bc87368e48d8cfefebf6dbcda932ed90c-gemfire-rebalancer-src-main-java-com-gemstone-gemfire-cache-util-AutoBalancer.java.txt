GEODE-124: Add min size check and optimize calls

* Member stats are needed for computing member load skew and total data size.
  The gathering step is common and need not be executed twice
* If the total transfer size during rebalance is low, then avoid rebalance. This
  could happen when a new cluster is created is data is being loaded

+import java.util.HashMap;
+import java.util.Map;
-   * Use this configuration to manage re-balance threshold. Rebalance operation
+   * Use this configuration to manage re-balance invocation. Rebalance operation
-   * is more than this threshold, percentage of the total data size.
+   * is more than this threshold, in percentage of the total data size.
+   * In the initial data load phases,
+   * {@link AutoBalancer#SIZE_THRESHOLD_PERCENT} based rebalance invocation may
+   * be unnecessary. Rebalance should not be triggered if the total data size
+   * managed by cluster is too small. Rebalance operation will be triggered if
+   * the total number of bytes rebalance operation may move is more than this
+   * number of bytes.
+   * <P>
+   * Default {@value AutoBalancer#DEFAULT_SIZE_MINIMUM}
+   */
+  public static final String SIZE_MINIMUM = "size-minimum";
+
+  /**
+   * Default value of {@link AutoBalancer#SIZE_MINIMUM}. In the initial data
+   * load phases, {@link AutoBalancer#SIZE_THRESHOLD_PERCENT} based rebalance
+   * invocation may be unnecessary. Do not rebalance if the data to be moved is
+   * less than 100MB
+   */
+  public static final int DEFAULT_SIZE_MINIMUM = 100 * 1024 * 1024;
+
+  /**
+    private int sizeMinimum = DEFAULT_SIZE_MINIMUM;
+        if (props.getProperty(SIZE_MINIMUM) != null) {
+          sizeMinimum = Integer.valueOf(props.getProperty(SIZE_MINIMUM));
+          if (sizeMinimum <= 0) {
+            throw new GemFireConfigException(SIZE_MINIMUM + " should be greater than 0");
+          }
+        }
-      long totalSize = cacheFacade.getTotalDataSize();
+      if (transferSize <= sizeMinimum) {
+        return false;
+      }
+
+      Map<PartitionedRegion, InternalPRInfo> details = cacheFacade.getRegionMemberDetails();
+      long totalSize = cacheFacade.getTotalDataSize(details);
-    public int getSizeThreshold() {
+    int getSizeThreshold() {
+
+    public long getSizeMinimum() {
+      return sizeMinimum;
+    }
-    public long getTotalDataSize() {
-      long totalSize = 0;
+    public Map<PartitionedRegion, InternalPRInfo> getRegionMemberDetails() {
+      Map<PartitionedRegion, InternalPRInfo> detailsMap = new HashMap<>();
-        Set<PartitionMemberInfo> membersInfo = info.getPartitionMemberInfo();
-        for (PartitionMemberInfo member : membersInfo) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("Region:{}, Member: {}, Size: {}", region.getFullPath(), member, member.getSize());
+        detailsMap.put(region, info);
+      }
+      return detailsMap;
+    }
+
+    @Override
+    public long getTotalDataSize(Map<PartitionedRegion, InternalPRInfo> details) {
+      long totalSize = 0;
+      if (details != null) {
+        for (PartitionedRegion region : details.keySet()) {
+          InternalPRInfo info = details.get(region);
+          Set<PartitionMemberInfo> membersInfo = info.getPartitionMemberInfo();
+          for (PartitionMemberInfo member : membersInfo) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("Region:{}, Member: {}, Size: {}", region.getFullPath(), member, member.getSize());
+            }
+            totalSize += member.getSize();
-          totalSize += member.getSize();
-    long getTotalDataSize();
+    Map<PartitionedRegion, InternalPRInfo> getRegionMemberDetails();
+
+    long getTotalDataSize(Map<PartitionedRegion, InternalPRInfo> details);
+
+  public CacheOperationFacade getCacheOperationFacade() {
+    return this.cacheFacade;
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS23 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS45 INS65 INS42 INS27 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS44 INS74 INS42 INS44 INS42 INS41 UPD66 UPD66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS34 INS34 INS34 INS42 INS42 INS25 INS60 INS41 INS42 INS43 INS43 INS43 MOV60 INS60 INS70 INS41 INS74 INS42 INS25 INS43 INS43 INS43 INS74 INS42 INS22 INS67 INS67 INS67 INS67 INS27 INS8 INS74 INS59 INS42 INS42 INS42 INS42 INS74 INS59 INS44 MOV32 INS8 INS42 INS43 INS43 INS43 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS41 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS42 MOV60 MOV60 INS21 INS42 INS42 INS42 INS42 INS33 MOV70 INS42 INS42 INS42 INS27 INS8 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS32 INS32 INS33 INS21 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS42 INS42 INS42 INS7 INS27 INS8 INS42 INS43 INS59 INS42 INS32 INS42 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 DEL83