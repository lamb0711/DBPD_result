Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  //////////////////  Static fields ///////////////////////////
-  
+
+  ////////////////// Static fields ///////////////////////////
+
-  protected static final int eventQueueSizeId;  
-  protected static final int eventQueueThrottleTimeId;  
-  protected static final int eventQueueThrottleCountId;  
-  protected static final int eventThreadsId;  
-  protected static final int missesId;  
+  protected static final int eventQueueSizeId;
+  protected static final int eventQueueThrottleTimeId;
+  protected static final int eventQueueThrottleCountId;
+  protected static final int eventThreadsId;
+  protected static final int missesId;
-  protected static final int reliableQueuedOpsId;  
-  protected static final int reliableQueueSizeId;  
-  protected static final int reliableQueueMaxId;  
-  protected static final int reliableRegionsId;  
+  protected static final int reliableQueuedOpsId;
+  protected static final int reliableQueueSizeId;
+  protected static final int reliableQueueMaxId;
+  protected static final int reliableRegionsId;
-  
+
-  
+
- 
+
-  
+
-  
+
-  
+
-  ////////////////////////  Static methods  ////////////////////////
-  
+  //////////////////////// Static methods ////////////////////////
+
-    final String loadsInProgressDesc = "Current number of threads in this cache doing a cache load.";
-    final String loadsCompletedDesc = "Total number of times a load on this cache has completed (as a result of either a local get() or a remote netload).";
+    final String loadsInProgressDesc =
+        "Current number of threads in this cache doing a cache load.";
+    final String loadsCompletedDesc =
+        "Total number of times a load on this cache has completed (as a result of either a local get() or a remote netload).";
-    final String netloadsInProgressDesc = "Current number of threads doing a network load initiated by a get() in this cache.";
-    final String netloadsCompletedDesc = "Total number of times a network load initiated on this cache has completed.";
+    final String netloadsInProgressDesc =
+        "Current number of threads doing a network load initiated by a get() in this cache.";
+    final String netloadsCompletedDesc =
+        "Total number of times a network load initiated on this cache has completed.";
-    final String netsearchesInProgressDesc = "Current number of threads doing a network search initiated by a get() in this cache.";
-    final String netsearchesCompletedDesc = "Total number of times network searches initiated by this cache have completed.";
+    final String netsearchesInProgressDesc =
+        "Current number of threads doing a network search initiated by a get() in this cache.";
+    final String netsearchesCompletedDesc =
+        "Total number of times network searches initiated by this cache have completed.";
-    final String cacheWriterCallsInProgressDesc = "Current number of threads doing a cache writer call.";
-    final String cacheWriterCallsCompletedDesc = "Total number of times a cache writer call has completed.";
+    final String cacheWriterCallsInProgressDesc =
+        "Current number of threads doing a cache writer call.";
+    final String cacheWriterCallsCompletedDesc =
+        "Total number of times a cache writer call has completed.";
-    final String cacheListenerCallsInProgressDesc = "Current number of threads doing a cache listener call.";
-    final String cacheListenerCallsCompletedDesc = "Total number of times a cache listener call has completed.";
+    final String cacheListenerCallsInProgressDesc =
+        "Current number of threads doing a cache listener call.";
+    final String cacheListenerCallsCompletedDesc =
+        "Total number of times a cache listener call has completed.";
-    final String getInitialImagesInProgressDesc = "Current number of getInitialImage operations currently in progress.";
-    final String getInitialImagesCompletedDesc = "Total number of times getInitialImages (both delta and full GII) initiated by this cache have completed.";
-    final String deltaGetInitialImagesCompletedDesc = "Total number of times delta getInitialImages initiated by this cache have completed.";
-    final String getInitialImageTimeDesc = "Total time spent doing getInitialImages for region creation.";
-    final String getInitialImageKeysReceivedDesc = "Total number of keys received while doing getInitialImage operations.";
+    final String getInitialImagesInProgressDesc =
+        "Current number of getInitialImage operations currently in progress.";
+    final String getInitialImagesCompletedDesc =
+        "Total number of times getInitialImages (both delta and full GII) initiated by this cache have completed.";
+    final String deltaGetInitialImagesCompletedDesc =
+        "Total number of times delta getInitialImages initiated by this cache have completed.";
+    final String getInitialImageTimeDesc =
+        "Total time spent doing getInitialImages for region creation.";
+    final String getInitialImageKeysReceivedDesc =
+        "Total number of keys received while doing getInitialImage operations.";
-    final String destroysDesc = "The total number of times a cache object entry has been destroyed in this cache.";
-    final String updatesDesc = "The total number of updates originating remotely that have been applied to this cache.";
+    final String destroysDesc =
+        "The total number of times a cache object entry has been destroyed in this cache.";
+    final String updatesDesc =
+        "The total number of updates originating remotely that have been applied to this cache.";
-    final String invalidatesDesc = "The total number of times an existing cache object entry value in this cache has been invalidated";
-    final String getsDesc = "The total number of times a successful get has been done on this cache.";
+    final String invalidatesDesc =
+        "The total number of times an existing cache object entry value in this cache has been invalidated";
+    final String getsDesc =
+        "The total number of times a successful get has been done on this cache.";
-    final String putsDesc = "The total number of times an entry is added or replaced in this cache as a result of a local operation (put(), create(), or get() which results in load, netsearch, or netloading a value). Note that this only counts puts done explicitly on this cache. It does not count updates pushed from other caches.";
-    final String putTimeDesc = "Total time spent adding or replacing an entry in this cache as a result of a local operation.  This includes synchronizing on the map, invoking cache callbacks, sending messages to other caches and waiting for responses (if required).";
-    final String putallsDesc = "The total number of times a map is added or replaced in this cache as a result of a local operation. Note that this only counts putAlls done explicitly on this cache. It does not count updates pushed from other caches.";
-    final String putallTimeDesc = "Total time spent replacing a map in this cache as a result of a local operation.  This includes synchronizing on the map, invoking cache callbacks, sending messages to other caches and waiting for responses (if required).";
-    final String removeAllsDesc = "The total number of removeAll operations that originated in this cache. Note that this only counts removeAlls done explicitly on this cache. It does not count removes pushed from other caches.";
-    final String removeAllTimeDesc = "Total time spent performing removeAlls that originated in this cache. This includes time spent waiting for the removeAll to be done in remote caches (if required).";
-    final String getTimeDesc = "Total time spent doing get operations from this cache (including netsearch and netload)";
+    final String putsDesc =
+        "The total number of times an entry is added or replaced in this cache as a result of a local operation (put(), create(), or get() which results in load, netsearch, or netloading a value). Note that this only counts puts done explicitly on this cache. It does not count updates pushed from other caches.";
+    final String putTimeDesc =
+        "Total time spent adding or replacing an entry in this cache as a result of a local operation.  This includes synchronizing on the map, invoking cache callbacks, sending messages to other caches and waiting for responses (if required).";
+    final String putallsDesc =
+        "The total number of times a map is added or replaced in this cache as a result of a local operation. Note that this only counts putAlls done explicitly on this cache. It does not count updates pushed from other caches.";
+    final String putallTimeDesc =
+        "Total time spent replacing a map in this cache as a result of a local operation.  This includes synchronizing on the map, invoking cache callbacks, sending messages to other caches and waiting for responses (if required).";
+    final String removeAllsDesc =
+        "The total number of removeAll operations that originated in this cache. Note that this only counts removeAlls done explicitly on this cache. It does not count removes pushed from other caches.";
+    final String removeAllTimeDesc =
+        "Total time spent performing removeAlls that originated in this cache. This includes time spent waiting for the removeAll to be done in remote caches (if required).";
+    final String getTimeDesc =
+        "Total time spent doing get operations from this cache (including netsearch and netload)";
-    final String eventQueueThrottleTimeDesc = "The total amount of time, in nanoseconds, spent delayed by the event queue throttle.";
-    final String eventQueueThrottleCountDesc = "The total number of times a thread was delayed in adding an event to the event queue.";
+    final String eventQueueThrottleTimeDesc =
+        "The total amount of time, in nanoseconds, spent delayed by the event queue throttle.";
+    final String eventQueueThrottleCountDesc =
+        "The total number of times a thread was delayed in adding an event to the event queue.";
-    final String missesDesc = "Total number of times a get on the cache did not find a value already in local memory. The number of hits (i.e. gets that did not miss) can be calculated by subtracting misses from gets.";
+    final String missesDesc =
+        "Total number of times a get on the cache did not find a value already in local memory. The number of hits (i.e. gets that did not miss) can be calculated by subtracting misses from gets.";
-    final String queryResultsHashCollisionsDesc= "Total number of times an hash code collision occurred when inserting an object into an OQL result set or rehashing it";
-    final String queryResultsHashCollisionProbeTimeDesc= "Total time spent probing the hashtable in an OQL result set due to hash code collisions, includes reads, writes, and rehashes";
-    final String partitionedRegionOQLQueryRetriesDesc = "Total number of times an OQL Query on a Partitioned Region had to be retried";
-    final String txSuccessLifeTimeDesc = "The total amount of time, in nanoseconds, spent in a transaction before a successful commit. The time measured starts at transaction begin and ends when commit is called.";
-    final String txFailedLifeTimeDesc = "The total amount of time, in nanoseconds, spent in a transaction before a failed commit. The time measured starts at transaction begin and ends when commit is called.";
-    final String txRollbackLifeTimeDesc = "The total amount of time, in nanoseconds, spent in a transaction before an explicit rollback. The time measured starts at transaction begin and ends when rollback is called.";
+    final String queryResultsHashCollisionsDesc =
+        "Total number of times an hash code collision occurred when inserting an object into an OQL result set or rehashing it";
+    final String queryResultsHashCollisionProbeTimeDesc =
+        "Total time spent probing the hashtable in an OQL result set due to hash code collisions, includes reads, writes, and rehashes";
+    final String partitionedRegionOQLQueryRetriesDesc =
+        "Total number of times an OQL Query on a Partitioned Region had to be retried";
+    final String txSuccessLifeTimeDesc =
+        "The total amount of time, in nanoseconds, spent in a transaction before a successful commit. The time measured starts at transaction begin and ends when commit is called.";
+    final String txFailedLifeTimeDesc =
+        "The total amount of time, in nanoseconds, spent in a transaction before a failed commit. The time measured starts at transaction begin and ends when commit is called.";
+    final String txRollbackLifeTimeDesc =
+        "The total amount of time, in nanoseconds, spent in a transaction before an explicit rollback. The time measured starts at transaction begin and ends when rollback is called.";
-    final String txRollbacksDesc = "Total number times a transaction has been explicitly rolled back.";
-    final String txCommitTimeDesc = "The total amount of time, in nanoseconds, spent doing successful transaction commits.";
-    final String txFailureTimeDesc = "The total amount of time, in nanoseconds, spent doing failed transaction commits.";
-    final String txRollbackTimeDesc = "The total amount of time, in nanoseconds, spent doing explicit transaction rollbacks.";
+    final String txRollbacksDesc =
+        "Total number times a transaction has been explicitly rolled back.";
+    final String txCommitTimeDesc =
+        "The total amount of time, in nanoseconds, spent doing successful transaction commits.";
+    final String txFailureTimeDesc =
+        "The total amount of time, in nanoseconds, spent doing failed transaction commits.";
+    final String txRollbackTimeDesc =
+        "The total amount of time, in nanoseconds, spent doing explicit transaction rollbacks.";
-    final String txRollbackChangesDesc = "Total number of changes lost by explicit transaction rollbacks.";
-    final String txConflictCheckTimeDesc = "The total amount of time, in nanoseconds, spent doing conflict checks during transaction commit";
-    final String reliableQueuedOpsDesc = "Current number of cache operations queued for distribution to required roles.";
-    final String reliableQueueSizeDesc = "Current size in megabytes of disk used to queue for distribution to required roles.";
-    final String reliableQueueMaxDesc = "Maximum size in megabytes allotted for disk usage to queue for distribution to required roles.";
+    final String txRollbackChangesDesc =
+        "Total number of changes lost by explicit transaction rollbacks.";
+    final String txConflictCheckTimeDesc =
+        "The total amount of time, in nanoseconds, spent doing conflict checks during transaction commit";
+    final String reliableQueuedOpsDesc =
+        "Current number of cache operations queued for distribution to required roles.";
+    final String reliableQueueSizeDesc =
+        "Current size in megabytes of disk used to queue for distribution to required roles.";
+    final String reliableQueueMaxDesc =
+        "Maximum size in megabytes allotted for disk usage to queue for distribution to required roles.";
-    final String reliableRegionsMissingDesc = "Current number regions configured for reliability that are missing required roles.";
-    final String reliableRegionsQueuingDesc = "Current number regions configured for reliability that are queuing for required roles.";
-    final String reliableRegionsMissingFullAccessDesc = "Current number of regions configured for reliablity that are missing require roles with full access";
-    final String reliableRegionsMissingLimitedAccessDesc = "Current number of regions configured for reliablity that are missing required roles with Limited access";
-    final String reliableRegionsMissingNoAccessDesc = "Current number of regions configured for reliablity that are missing required roles with No access";
+    final String reliableRegionsMissingDesc =
+        "Current number regions configured for reliability that are missing required roles.";
+    final String reliableRegionsQueuingDesc =
+        "Current number regions configured for reliability that are queuing for required roles.";
+    final String reliableRegionsMissingFullAccessDesc =
+        "Current number of regions configured for reliablity that are missing require roles with full access";
+    final String reliableRegionsMissingLimitedAccessDesc =
+        "Current number of regions configured for reliablity that are missing required roles with Limited access";
+    final String reliableRegionsMissingNoAccessDesc =
+        "Current number of regions configured for reliablity that are missing required roles with No access";
-    final String nonSingleHopsDesc = "Total number of times client request observed more than one hop during operation.";
-    final String metaDataRefreshCountDesc = "Total number of times the meta data is refreshed due to hopping observed.";
-    final String conflatedEventsDesc = "Number of events not delivered due to conflation.  Typically this means that the event arrived after a later event was already applied to the cache.";
-    final String tombstoneCountDesc = "Number of destroyed entries that are retained for concurrent modification detection";
-    final String tombstoneGCCountDesc = "Number of garbage-collections performed on destroyed entries";
-    final String tombstoneOverhead1Desc = "Amount of memory consumed by destroyed entries in replicated or partitioned regions";
-    final String tombstoneOverhead2Desc = "Amount of memory consumed by destroyed entries in non-replicated regions";
-    final String clearTimeoutsDesc = "Number of timeouts waiting for events concurrent to a clear() operation to be received and applied before performing the clear()";
-    final String deltaUpdatesDesc = "The total number of times entries in this cache are updated through delta bytes.";
-    final String deltaUpdatesTimeDesc = "Total time spent applying the received delta bytes to entries in this cache.";
-    final String deltaFailedUpdatesDesc = "The total number of times entries in this cache failed to be updated through delta bytes.";
+    final String nonSingleHopsDesc =
+        "Total number of times client request observed more than one hop during operation.";
+    final String metaDataRefreshCountDesc =
+        "Total number of times the meta data is refreshed due to hopping observed.";
+    final String conflatedEventsDesc =
+        "Number of events not delivered due to conflation.  Typically this means that the event arrived after a later event was already applied to the cache.";
+    final String tombstoneCountDesc =
+        "Number of destroyed entries that are retained for concurrent modification detection";
+    final String tombstoneGCCountDesc =
+        "Number of garbage-collections performed on destroyed entries";
+    final String tombstoneOverhead1Desc =
+        "Amount of memory consumed by destroyed entries in replicated or partitioned regions";
+    final String tombstoneOverhead2Desc =
+        "Amount of memory consumed by destroyed entries in non-replicated regions";
+    final String clearTimeoutsDesc =
+        "Number of timeouts waiting for events concurrent to a clear() operation to be received and applied before performing the clear()";
+    final String deltaUpdatesDesc =
+        "The total number of times entries in this cache are updated through delta bytes.";
+    final String deltaUpdatesTimeDesc =
+        "Total time spent applying the received delta bytes to entries in this cache.";
+    final String deltaFailedUpdatesDesc =
+        "The total number of times entries in this cache failed to be updated through delta bytes.";
-    final String deltasSentDesc = "The total number of times delta was sent to remote caches. This excludes deltas sent from server to client.";
-    final String deltaFullValuesSentDesc = "The total number of times a full value was sent to a remote cache."; 
-    final String deltaFullValuesRequestedDesc = "The total number of times a full value was requested by this cache.";
-    final String importedEntriesCountDesc = "The total number of entries imported from a snapshot file.";
+    final String deltasSentDesc =
+        "The total number of times delta was sent to remote caches. This excludes deltas sent from server to client.";
+    final String deltaFullValuesSentDesc =
+        "The total number of times a full value was sent to a remote cache.";
+    final String deltaFullValuesRequestedDesc =
+        "The total number of times a full value was requested by this cache.";
+    final String importedEntriesCountDesc =
+        "The total number of entries imported from a snapshot file.";
-    final String exportedEntriesCountDesc = "The total number of entries exported into a snapshot file.";
-    final String exportTimeDesc = "The total time spent exporting entries into a snapshot file.";    
+    final String exportedEntriesCountDesc =
+        "The total number of entries exported into a snapshot file.";
+    final String exportTimeDesc = "The total time spent exporting entries into a snapshot file.";
-    final String compressionPreCompresssedBytesDesc = "The total number of bytes before compressing.";
-    final String compressionPostCompressedBytesDesc = "The total number of bytes after compressing.";
-    final String evictByCriteria_evictionsDesc = "The total number of entries evicted";// total actual evictions (entries evicted)
-    final String evictByCriteria_evictionTimeDesc= "Time taken for eviction process";// total eviction time including product + user expr. 
+    final String compressionPreCompresssedBytesDesc =
+        "The total number of bytes before compressing.";
+    final String compressionPostCompressedBytesDesc =
+        "The total number of bytes after compressing.";
+    final String evictByCriteria_evictionsDesc = "The total number of entries evicted";// total
+                                                                                       // actual
+                                                                                       // evictions
+                                                                                       // (entries
+                                                                                       // evicted)
+    final String evictByCriteria_evictionTimeDesc = "Time taken for eviction process";// total
+                                                                                      // eviction
+                                                                                      // time
+                                                                                      // including
+                                                                                      // product +
+                                                                                      // user expr.
-    final String evictByCriteria_evaluationsDesc = "Total number of evaluations for eviction";// total eviction attempts
-    final String evictByCriteria_evaluationTimeDesc= "Total time taken for evaluation of user expression during eviction";// time taken to evaluate user expression.
+    final String evictByCriteria_evaluationsDesc = "Total number of evaluations for eviction";// total
+                                                                                              // eviction
+                                                                                              // attempts
+    final String evictByCriteria_evaluationTimeDesc =
+        "Total time taken for evaluation of user expression during eviction";// time taken to
+                                                                             // evaluate user
+                                                                             // expression.
-    type = f.createType(
-      "CachePerfStats", 
-      "Statistics about GemFire cache performance",
-      new StatisticDescriptor[] {
-        f.createIntGauge("loadsInProgress", loadsInProgressDesc, "operations"), 
-        f.createIntCounter("loadsCompleted", loadsCompletedDesc, "operations"), 
-        f.createLongCounter("loadTime", loadTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("netloadsInProgress", netloadsInProgressDesc, "operations"), 
-        f.createIntCounter("netloadsCompleted", netloadsCompletedDesc, "operations"), 
-        f.createLongCounter("netloadTime", netloadTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("netsearchesInProgress", netsearchesInProgressDesc, "operations"), 
-        f.createIntCounter("netsearchesCompleted", netsearchesCompletedDesc, "operations"), 
-        f.createLongCounter("netsearchTime", netsearchTimeDesc, "nanoseconds"), 
-        f.createIntGauge("cacheWriterCallsInProgress", cacheWriterCallsInProgressDesc, "operations"), 
-        f.createIntCounter("cacheWriterCallsCompleted", cacheWriterCallsCompletedDesc, "operations"), 
-        f.createLongCounter("cacheWriterCallTime", cacheWriterCallTimeDesc, "nanoseconds"), 
-        f.createIntGauge("cacheListenerCallsInProgress", cacheListenerCallsInProgressDesc, "operations"), 
-        f.createIntCounter("cacheListenerCallsCompleted", cacheListenerCallsCompletedDesc, "operations"), 
-        f.createLongCounter("cacheListenerCallTime", cacheListenerCallTimeDesc, "nanoseconds"), 
-        f.createIntGauge("indexUpdateInProgress", "Current number of ops in progress", "operations"), 
-        f.createIntCounter("indexUpdateCompleted", "Total number of ops that have completed", "operations"), 
-        f.createLongCounter("indexUpdateTime", "Total amount of time spent doing this op", "nanoseconds"),
-        f.createIntGauge("indexInitializationInProgress", "Current number of index initializations in progress", "operations"), 
-        f.createIntCounter("indexInitializationCompleted", "Total number of index initializations that have completed", "operations"), 
-        f.createLongCounter("indexInitializationTime", "Total amount of time spent initializing indexes", "nanoseconds"),
+    type = f.createType("CachePerfStats", "Statistics about GemFire cache performance",
+        new StatisticDescriptor[] {
+            f.createIntGauge("loadsInProgress", loadsInProgressDesc, "operations"),
+            f.createIntCounter("loadsCompleted", loadsCompletedDesc, "operations"),
+            f.createLongCounter("loadTime", loadTimeDesc, "nanoseconds", false),
+            f.createIntGauge("netloadsInProgress", netloadsInProgressDesc, "operations"),
+            f.createIntCounter("netloadsCompleted", netloadsCompletedDesc, "operations"),
+            f.createLongCounter("netloadTime", netloadTimeDesc, "nanoseconds", false),
+            f.createIntGauge("netsearchesInProgress", netsearchesInProgressDesc, "operations"),
+            f.createIntCounter("netsearchesCompleted", netsearchesCompletedDesc, "operations"),
+            f.createLongCounter("netsearchTime", netsearchTimeDesc, "nanoseconds"),
+            f.createIntGauge("cacheWriterCallsInProgress", cacheWriterCallsInProgressDesc,
+                "operations"),
+            f.createIntCounter("cacheWriterCallsCompleted", cacheWriterCallsCompletedDesc,
+                "operations"),
+            f.createLongCounter("cacheWriterCallTime", cacheWriterCallTimeDesc, "nanoseconds"),
+            f.createIntGauge("cacheListenerCallsInProgress", cacheListenerCallsInProgressDesc,
+                "operations"),
+            f.createIntCounter("cacheListenerCallsCompleted", cacheListenerCallsCompletedDesc,
+                "operations"),
+            f.createLongCounter("cacheListenerCallTime", cacheListenerCallTimeDesc, "nanoseconds"),
+            f.createIntGauge("indexUpdateInProgress", "Current number of ops in progress",
+                "operations"),
+            f.createIntCounter("indexUpdateCompleted", "Total number of ops that have completed",
+                "operations"),
+            f.createLongCounter("indexUpdateTime", "Total amount of time spent doing this op",
+                "nanoseconds"),
+            f.createIntGauge("indexInitializationInProgress",
+                "Current number of index initializations in progress", "operations"),
+            f.createIntCounter("indexInitializationCompleted",
+                "Total number of index initializations that have completed", "operations"),
+            f.createLongCounter("indexInitializationTime",
+                "Total amount of time spent initializing indexes", "nanoseconds"),
-        f.createIntGauge("getInitialImagesInProgress", getInitialImagesInProgressDesc, "operations"), 
-        f.createIntCounter("getInitialImagesCompleted", getInitialImagesCompletedDesc, "operations"), 
-        f.createIntCounter("deltaGetInitialImagesCompleted", deltaGetInitialImagesCompletedDesc, "operations"),
-        f.createLongCounter("getInitialImageTime", getInitialImageTimeDesc, "nanoseconds"),
-        f.createIntCounter("getInitialImageKeysReceived", getInitialImageKeysReceivedDesc, "keys"),
-        f.createIntGauge("regions", regionsDesc, "regions"), 
-        f.createIntGauge("partitionedRegions", partitionedRegionsDesc, "partitionedRegions"), 
-        f.createIntCounter("destroys", destroysDesc, "operations"), 
-        f.createIntCounter("updates", updatesDesc, "operations"), 
-        f.createLongCounter("updateTime", updateTimeDesc, "nanoseconds"), 
-        f.createIntCounter("invalidates", invalidatesDesc, "operations"), 
-        f.createIntCounter("gets", getsDesc, "operations"), 
-        f.createIntCounter("misses", missesDesc, "operations"), 
-        f.createIntCounter("creates", createsDesc, "operations"), 
-        f.createIntCounter("puts", putsDesc, "operations"), 
-        f.createLongCounter("putTime", putTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("putalls", putallsDesc, "operations"), 
-        f.createLongCounter("putallTime", putallTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("removeAlls", removeAllsDesc, "operations"), 
-        f.createLongCounter("removeAllTime", removeAllTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("getTime", getTimeDesc, "nanoseconds", false),
-        f.createIntGauge("eventQueueSize", eventQueueSizeDesc, "messages"), 
-        f.createIntGauge("eventQueueThrottleCount", eventQueueThrottleCountDesc, "delays"), 
-        f.createLongCounter("eventQueueThrottleTime", eventQueueThrottleTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("eventThreads", eventThreadsDesc, "threads"), 
-        f.createIntCounter("queryExecutions", queryExecutionsDesc, "operations"),
-        f.createLongCounter("queryExecutionTime", queryExecutionTimeDesc, "nanoseconds"),
-        f.createIntCounter("queryResultsHashCollisions", queryResultsHashCollisionsDesc, "operations"),
-        f.createLongCounter("queryResultsHashCollisionProbeTime", queryResultsHashCollisionProbeTimeDesc, "nanoseconds"),
-        f.createLongCounter("partitionedRegionQueryRetries", partitionedRegionOQLQueryRetriesDesc, "retries"),
+            f.createIntGauge("getInitialImagesInProgress", getInitialImagesInProgressDesc,
+                "operations"),
+            f.createIntCounter("getInitialImagesCompleted", getInitialImagesCompletedDesc,
+                "operations"),
+            f.createIntCounter("deltaGetInitialImagesCompleted", deltaGetInitialImagesCompletedDesc,
+                "operations"),
+            f.createLongCounter("getInitialImageTime", getInitialImageTimeDesc, "nanoseconds"),
+            f.createIntCounter("getInitialImageKeysReceived", getInitialImageKeysReceivedDesc,
+                "keys"),
+            f.createIntGauge("regions", regionsDesc, "regions"),
+            f.createIntGauge("partitionedRegions", partitionedRegionsDesc, "partitionedRegions"),
+            f.createIntCounter("destroys", destroysDesc, "operations"),
+            f.createIntCounter("updates", updatesDesc, "operations"),
+            f.createLongCounter("updateTime", updateTimeDesc, "nanoseconds"),
+            f.createIntCounter("invalidates", invalidatesDesc, "operations"),
+            f.createIntCounter("gets", getsDesc, "operations"),
+            f.createIntCounter("misses", missesDesc, "operations"),
+            f.createIntCounter("creates", createsDesc, "operations"),
+            f.createIntCounter("puts", putsDesc, "operations"),
+            f.createLongCounter("putTime", putTimeDesc, "nanoseconds", false),
+            f.createIntCounter("putalls", putallsDesc, "operations"),
+            f.createLongCounter("putallTime", putallTimeDesc, "nanoseconds", false),
+            f.createIntCounter("removeAlls", removeAllsDesc, "operations"),
+            f.createLongCounter("removeAllTime", removeAllTimeDesc, "nanoseconds", false),
+            f.createLongCounter("getTime", getTimeDesc, "nanoseconds", false),
+            f.createIntGauge("eventQueueSize", eventQueueSizeDesc, "messages"),
+            f.createIntGauge("eventQueueThrottleCount", eventQueueThrottleCountDesc, "delays"),
+            f.createLongCounter("eventQueueThrottleTime", eventQueueThrottleTimeDesc, "nanoseconds",
+                false),
+            f.createIntGauge("eventThreads", eventThreadsDesc, "threads"),
+            f.createIntCounter("queryExecutions", queryExecutionsDesc, "operations"),
+            f.createLongCounter("queryExecutionTime", queryExecutionTimeDesc, "nanoseconds"),
+            f.createIntCounter("queryResultsHashCollisions", queryResultsHashCollisionsDesc,
+                "operations"),
+            f.createLongCounter("queryResultsHashCollisionProbeTime",
+                queryResultsHashCollisionProbeTimeDesc, "nanoseconds"),
+            f.createLongCounter("partitionedRegionQueryRetries",
+                partitionedRegionOQLQueryRetriesDesc, "retries"),
-        f.createIntCounter("txCommits", txCommitsDesc, "commits"), 
-        f.createIntCounter("txCommitChanges", txCommitChangesDesc, "changes"), 
-        f.createLongCounter("txCommitTime", txCommitTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("txSuccessLifeTime", txSuccessLifeTimeDesc, "nanoseconds", false), 
+            f.createIntCounter("txCommits", txCommitsDesc, "commits"),
+            f.createIntCounter("txCommitChanges", txCommitChangesDesc, "changes"),
+            f.createLongCounter("txCommitTime", txCommitTimeDesc, "nanoseconds", false),
+            f.createLongCounter("txSuccessLifeTime", txSuccessLifeTimeDesc, "nanoseconds", false),
-        f.createIntCounter("txFailures", txFailuresDesc, "failures"), 
-        f.createIntCounter("txFailureChanges", txFailureChangesDesc, "changes"), 
-        f.createLongCounter("txFailureTime", txFailureTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("txFailedLifeTime", txFailedLifeTimeDesc, "nanoseconds", false), 
+            f.createIntCounter("txFailures", txFailuresDesc, "failures"),
+            f.createIntCounter("txFailureChanges", txFailureChangesDesc, "changes"),
+            f.createLongCounter("txFailureTime", txFailureTimeDesc, "nanoseconds", false),
+            f.createLongCounter("txFailedLifeTime", txFailedLifeTimeDesc, "nanoseconds", false),
-        f.createIntCounter("txRollbacks", txRollbacksDesc, "rollbacks"),
-        f.createIntCounter("txRollbackChanges", txRollbackChangesDesc, "changes"), 
-        f.createLongCounter("txRollbackTime", txRollbackTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("txRollbackLifeTime", txRollbackLifeTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("txConflictCheckTime", txConflictCheckTimeDesc, "nanoseconds", false), 
-        
-        f.createIntGauge("reliableQueuedOps", reliableQueuedOpsDesc, "operations"), 
-        f.createIntGauge("reliableQueueSize", reliableQueueSizeDesc, "megabytes"), 
-        f.createIntGauge("reliableQueueMax", reliableQueueMaxDesc, "megabytes"), 
-        f.createIntGauge("reliableRegions", reliableRegionsDesc, "regions"), 
-        f.createIntGauge("reliableRegionsMissing", reliableRegionsMissingDesc, "regions"), 
-        f.createIntGauge("reliableRegionsQueuing", reliableRegionsQueuingDesc, "regions"),
-        f.createIntGauge("reliableRegionsMissingFullAccess",reliableRegionsMissingFullAccessDesc, "regions" ),
-        f.createIntGauge("reliableRegionsMissingLimitedAccess",reliableRegionsMissingLimitedAccessDesc, "regions"),
-        f.createIntGauge("reliableRegionsMissingNoAccess", reliableRegionsMissingNoAccessDesc,"regions" ),
-        f.createLongGauge("entries", "Current number of entries in the cache. This does not include any entries that are tombstones. See tombstoneCount." ,"entries" ),
-        f.createLongCounter("eventsQueued", "Number of events attached to " +
-                        "other events for callback invocation", "events"),
-        f.createIntCounter("retries", "Number of times a concurrent destroy followed by a create has caused an entry operation to need to retry." ,"operations" ),
-        f.createIntCounter("clears", clearsDesc, "operations"),
-        f.createIntGauge("diskTasksWaiting", "Current number of disk tasks (oplog compactions, asynchronous recoveries, etc) that are waiting for a thread to run the operation", "operations"),
-        f.createLongCounter("conflatedEvents", conflatedEventsDesc, "operations"),
-        f.createIntGauge("tombstones", tombstoneCountDesc, "entries"),
-        f.createIntCounter("tombstoneGCs", tombstoneGCCountDesc, "operations"),
-        f.createLongGauge("replicatedTombstonesSize", tombstoneOverhead1Desc, "bytes"),
-        f.createLongGauge("nonReplicatedTombstonesSize", tombstoneOverhead2Desc, "bytes"),
-        f.createIntCounter("clearTimeouts", clearTimeoutsDesc, "timeouts"),
-        f.createIntGauge("evictorJobsStarted", "Number of evictor jobs started", "jobs"),
-        f.createIntGauge("evictorJobsCompleted", "Number of evictor jobs completed", "jobs"),
-        f.createIntGauge("evictorQueueSize", "Number of jobs waiting to be picked up by evictor threads", "jobs"),
-        f.createLongCounter("evictWorkTime", "Total time spent doing eviction work in background threads", "nanoseconds", false),
-        f.createLongCounter("nonSingleHopsCount", nonSingleHopsDesc,"Total number of times client request observed more than one hop during operation.", false),
-        f.createLongCounter("metaDataRefreshCount",metaDataRefreshCountDesc, "Total number of times the meta data is refreshed due to hopping.", false),
-        f.createIntCounter("deltaUpdates", deltaUpdatesDesc, "operations"), 
-        f.createLongCounter("deltaUpdatesTime", deltaUpdatesTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("deltaFailedUpdates", deltaFailedUpdatesDesc, "operations"), 
-        f.createIntCounter("deltasPrepared", deltasPreparedDesc, "operations"), 
-        f.createLongCounter("deltasPreparedTime", deltasPreparedTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("deltasSent", deltasSentDesc, "operations"), 
-        f.createIntCounter("deltaFullValuesSent", deltaFullValuesSentDesc, "operations"), 
-        f.createIntCounter("deltaFullValuesRequested", deltaFullValuesRequestedDesc, "operations"), 
-        
-        f.createLongCounter("importedEntries", importedEntriesCountDesc, "entries"),
-        f.createLongCounter("importTime", importTimeDesc, "nanoseconds"),
-        f.createLongCounter("exportedEntries", exportedEntriesCountDesc, "entries"),
-        f.createLongCounter("exportTime", exportTimeDesc, "nanoseconds"),
+            f.createIntCounter("txRollbacks", txRollbacksDesc, "rollbacks"),
+            f.createIntCounter("txRollbackChanges", txRollbackChangesDesc, "changes"),
+            f.createLongCounter("txRollbackTime", txRollbackTimeDesc, "nanoseconds", false),
+            f.createLongCounter("txRollbackLifeTime", txRollbackLifeTimeDesc, "nanoseconds", false),
+            f.createLongCounter("txConflictCheckTime", txConflictCheckTimeDesc, "nanoseconds",
+                false),
-        f.createLongCounter("compressTime", compressionCompressTimeDesc, "nanoseconds"),
-        f.createLongCounter("decompressTime", compressionDecompressTimeDesc, "nanoseconds"),
-        f.createLongCounter("compressions", compressionCompressionsDesc, "operations"),
-        f.createLongCounter("decompressions", compressionDecompressionsDesc, "operations"),
-        f.createLongCounter("preCompressedBytes", compressionPreCompresssedBytesDesc, "bytes"),
-        f.createLongCounter("postCompressedBytes", compressionPostCompressedBytesDesc, "bytes"),
-        
-        f.createLongCounter("evictByCriteria_evictions", evictByCriteria_evictionsDesc, "operations"),
-        f.createLongCounter("evictByCriteria_evictionTime", evictByCriteria_evictionTimeDesc, "nanoseconds"),
-        f.createLongCounter("evictByCriteria_evictionsInProgress", evictByCriteria_evictionsInProgressDesc, "operations"),
-        f.createLongCounter("evictByCriteria_evaluations", evictByCriteria_evaluationsDesc, "operations"),
-        f.createLongCounter("evictByCriteria_evaluationTime", evictByCriteria_evaluationTimeDesc, "nanoseconds")
-      }
-    );
+            f.createIntGauge("reliableQueuedOps", reliableQueuedOpsDesc, "operations"),
+            f.createIntGauge("reliableQueueSize", reliableQueueSizeDesc, "megabytes"),
+            f.createIntGauge("reliableQueueMax", reliableQueueMaxDesc, "megabytes"),
+            f.createIntGauge("reliableRegions", reliableRegionsDesc, "regions"),
+            f.createIntGauge("reliableRegionsMissing", reliableRegionsMissingDesc, "regions"),
+            f.createIntGauge("reliableRegionsQueuing", reliableRegionsQueuingDesc, "regions"),
+            f.createIntGauge("reliableRegionsMissingFullAccess",
+                reliableRegionsMissingFullAccessDesc, "regions"),
+            f.createIntGauge("reliableRegionsMissingLimitedAccess",
+                reliableRegionsMissingLimitedAccessDesc, "regions"),
+            f.createIntGauge("reliableRegionsMissingNoAccess", reliableRegionsMissingNoAccessDesc,
+                "regions"),
+            f.createLongGauge("entries",
+                "Current number of entries in the cache. This does not include any entries that are tombstones. See tombstoneCount.",
+                "entries"),
+            f.createLongCounter("eventsQueued",
+                "Number of events attached to " + "other events for callback invocation", "events"),
+            f.createIntCounter("retries",
+                "Number of times a concurrent destroy followed by a create has caused an entry operation to need to retry.",
+                "operations"),
+            f.createIntCounter("clears", clearsDesc, "operations"),
+            f.createIntGauge("diskTasksWaiting",
+                "Current number of disk tasks (oplog compactions, asynchronous recoveries, etc) that are waiting for a thread to run the operation",
+                "operations"),
+            f.createLongCounter("conflatedEvents", conflatedEventsDesc, "operations"),
+            f.createIntGauge("tombstones", tombstoneCountDesc, "entries"),
+            f.createIntCounter("tombstoneGCs", tombstoneGCCountDesc, "operations"),
+            f.createLongGauge("replicatedTombstonesSize", tombstoneOverhead1Desc, "bytes"),
+            f.createLongGauge("nonReplicatedTombstonesSize", tombstoneOverhead2Desc, "bytes"),
+            f.createIntCounter("clearTimeouts", clearTimeoutsDesc, "timeouts"),
+            f.createIntGauge("evictorJobsStarted", "Number of evictor jobs started", "jobs"),
+            f.createIntGauge("evictorJobsCompleted", "Number of evictor jobs completed", "jobs"),
+            f.createIntGauge("evictorQueueSize",
+                "Number of jobs waiting to be picked up by evictor threads", "jobs"),
+            f.createLongCounter("evictWorkTime",
+                "Total time spent doing eviction work in background threads", "nanoseconds", false),
+            f.createLongCounter("nonSingleHopsCount", nonSingleHopsDesc,
+                "Total number of times client request observed more than one hop during operation.",
+                false),
+            f.createLongCounter("metaDataRefreshCount", metaDataRefreshCountDesc,
+                "Total number of times the meta data is refreshed due to hopping.", false),
+            f.createIntCounter("deltaUpdates", deltaUpdatesDesc, "operations"),
+            f.createLongCounter("deltaUpdatesTime", deltaUpdatesTimeDesc, "nanoseconds", false),
+            f.createIntCounter("deltaFailedUpdates", deltaFailedUpdatesDesc, "operations"),
+            f.createIntCounter("deltasPrepared", deltasPreparedDesc, "operations"),
+            f.createLongCounter("deltasPreparedTime", deltasPreparedTimeDesc, "nanoseconds", false),
+            f.createIntCounter("deltasSent", deltasSentDesc, "operations"),
+            f.createIntCounter("deltaFullValuesSent", deltaFullValuesSentDesc, "operations"),
+            f.createIntCounter("deltaFullValuesRequested", deltaFullValuesRequestedDesc,
+                "operations"),
+
+            f.createLongCounter("importedEntries", importedEntriesCountDesc, "entries"),
+            f.createLongCounter("importTime", importTimeDesc, "nanoseconds"),
+            f.createLongCounter("exportedEntries", exportedEntriesCountDesc, "entries"),
+            f.createLongCounter("exportTime", exportTimeDesc, "nanoseconds"),
+
+            f.createLongCounter("compressTime", compressionCompressTimeDesc, "nanoseconds"),
+            f.createLongCounter("decompressTime", compressionDecompressTimeDesc, "nanoseconds"),
+            f.createLongCounter("compressions", compressionCompressionsDesc, "operations"),
+            f.createLongCounter("decompressions", compressionDecompressionsDesc, "operations"),
+            f.createLongCounter("preCompressedBytes", compressionPreCompresssedBytesDesc, "bytes"),
+            f.createLongCounter("postCompressedBytes", compressionPostCompressedBytesDesc, "bytes"),
+
+            f.createLongCounter("evictByCriteria_evictions", evictByCriteria_evictionsDesc,
+                "operations"),
+            f.createLongCounter("evictByCriteria_evictionTime", evictByCriteria_evictionTimeDesc,
+                "nanoseconds"),
+            f.createLongCounter("evictByCriteria_evictionsInProgress",
+                evictByCriteria_evictionsInProgressDesc, "operations"),
+            f.createLongCounter("evictByCriteria_evaluations", evictByCriteria_evaluationsDesc,
+                "operations"),
+            f.createLongCounter("evictByCriteria_evaluationTime",
+                evictByCriteria_evaluationTimeDesc, "nanoseconds")});
-    eventQueueSizeId = type.nameToId("eventQueueSize");  
+    eventQueueSizeId = type.nameToId("eventQueueSize");
-    eventThreadsId = type.nameToId("eventThreads");  
+    eventThreadsId = type.nameToId("eventThreads");
-    
+
-    
+
-    
+
-    
+
-    
+
-  
-  ////////////////////////  Constructors  ////////////////////////
+
+  //////////////////////// Constructors ////////////////////////
-   * Creates a new <code>CachePerfStats</code> and registers itself
-   * with the given statistics factory.
+   * Creates a new <code>CachePerfStats</code> and registers itself with the given statistics
+   * factory.
-   * Creates a new <code>CachePerfStats</code> and registers itself
-   * with the given statistics factory.
+   * Creates a new <code>CachePerfStats</code> and registers itself with the given statistics
+   * factory.
+   * 
-    return enableClockStats? NanoTimer.getTime() : 0; 
+    return enableClockStats ? NanoTimer.getTime() : 0;
-  //////////////////////  Accessing Stats  //////////////////////
+  ////////////////////// Accessing Stats //////////////////////
-   public int getLoadsInProgress() {
-     return stats.getInt(loadsInProgressId);
-   }
-   public int getLoadsCompleted() {
-     return stats.getInt(loadsCompletedId); 
-   }  
-   public long getLoadTime() {
-     return stats.getLong(loadTimeId);
-   }  
-   public int getNetloadsInProgress() {
-     return stats.getInt(netloadsInProgressId);
-   }
-   public int getNetloadsCompleted() {
-     return stats.getInt(netloadsCompletedId);
-   }
-   public long getNetloadTime() {
-     return stats.getLong(netloadTimeId);
-   }
-   public int getNetsearchesInProgress() {
-     return stats.getInt(netsearchesInProgressId);
-   }
-   public int getNetsearchesCompleted() {
-     return stats.getInt(netsearchesCompletedId);
-   }
-   public long getNetsearchTime() {
-     return stats.getLong(netsearchTimeId);
-   }
-   public int getGetInitialImagesInProgress() {
-     return stats.getInt(getInitialImagesInProgressId);
-   }
-   public int getGetInitialImagesCompleted() {
-     return stats.getInt(getInitialImagesCompletedId);
-   }
-   public int getDeltaGetInitialImagesCompleted() {
-     return stats.getInt(deltaGetInitialImagesCompletedId);
-   }
-   public long getGetInitialImageTime() {
-     return stats.getLong(getInitialImageTimeId);
-   }
-   public int getGetInitialImageKeysReceived() {
-     return stats.getInt(getInitialImageKeysReceivedId);
-   }   
-   public int getRegions() {
-     return stats.getInt(regionsId);
-   }
-   public int getPartitionedRegions() {
-     return stats.getInt(partitionedRegionsId);
-   }
-   public int getDestroys() {
-     return stats.getInt(destroysId);
-   }
-   public int getCreates() {
-     return stats.getInt(createsId);
-   }
-   public int getPuts() {
-     return stats.getInt(putsId);
-   }
-   public int getPutAlls() {
-     return stats.getInt(putallsId);
-   }
-   public int getRemoveAlls() {
-     return stats.getInt(removeAllsId);
-   }
-   public int getUpdates() {
-     return stats.getInt(updatesId);
-   }
-   public int getInvalidates() {
-     return stats.getInt(invalidatesId);
-   }
-   public int getGets() {
-     return stats.getInt(getsId);
-   }
-   public int getMisses() {
-     return stats.getInt(missesId);
-   }
-   
-   public int getReliableQueuedOps() {
-     return stats.getInt(reliableQueuedOpsId);
-   }
-   
-   public void incReliableQueuedOps(int inc) {
-     stats.incInt(reliableQueuedOpsId, inc);
-   }
-   public int getReliableQueueSize() {
-     return stats.getInt(reliableQueueSizeId);
-   }
-   public void incReliableQueueSize(int inc) {
-     stats.incInt(reliableQueueSizeId, inc);
-   }
-   public int getReliableQueueMax() {
-     return stats.getInt(reliableQueueMaxId);
-   }
-   public void incReliableQueueMax(int inc) {
-     stats.incInt(reliableQueueMaxId, inc);
-   }
-   public int getReliableRegions() {
-     return stats.getInt(reliableRegionsId);
-   }
-   public void incReliableRegions(int inc) {
-     stats.incInt(reliableRegionsId, inc);
-   }
-   public int getReliableRegionsMissing() {
-     return stats.getInt(reliableRegionsMissingId);
-   }
-   public void incReliableRegionsMissing(int inc) {
-     stats.incInt(reliableRegionsMissingId, inc);
-   }
-   public int getReliableRegionsQueuing() {
-     return stats.getInt(reliableRegionsQueuingId);
-   }
-   public void incReliableRegionsQueuing(int inc) {
-     stats.incInt(reliableRegionsQueuingId, inc);
-   }
-   public int getReliableRegionsMissingFullAccess(){
-	 return stats.getInt(reliableRegionsMissingFullAccessId);
-   }
-   public void incReliableRegionsMissingFullAccess(int inc){
-	 stats.incInt(reliableRegionsMissingFullAccessId, inc);
-   }
-   
-   public int getReliableRegionsMissingLimitedAccess(){
-	 return stats.getInt(reliableRegionsMissingLimitedAccessId);
-   }
-   public void incReliableRegionsMissingLimitedAccess(int inc){
-	 stats.incInt(reliableRegionsMissingLimitedAccessId, inc);
-   }
-   public int getReliableRegionsMissingNoAccess(){
-	 return stats.getInt(reliableRegionsMissingNoAccessId);
-   }
-   public void incReliableRegionsMissingNoAccess(int inc){
-	  stats.incInt(reliableRegionsMissingNoAccessId, inc);
-   }
-   
-   public void incQueuedEvents(int inc) {
-     this.stats.incLong(eventsQueuedId, inc);
-   }
-   public long getQueuedEvents() {
-     return this.stats.getInt(eventsQueuedId);
-   }
+  public int getLoadsInProgress() {
+    return stats.getInt(loadsInProgressId);
+  }
-   public int getDeltaUpdates() {
-     return stats.getInt(deltaUpdatesId);
-   }
-   public long getDeltaUpdatesTime() {
-     return stats.getLong(deltaUpdatesTimeId);
-   }
-   public int getDeltaFailedUpdates() {
-     return stats.getInt(deltaFailedUpdatesId);
-   }
+  public int getLoadsCompleted() {
+    return stats.getInt(loadsCompletedId);
+  }
-   public int getDeltasPrepared() {
-     return stats.getInt(deltasPreparedId);
-   }
-   public long getDeltasPreparedTime() {
-     return stats.getLong(deltasPreparedTimeId);
-   }
-   public int getDeltasSent() {
-     return stats.getInt(deltasSentId);
-   }
+  public long getLoadTime() {
+    return stats.getLong(loadTimeId);
+  }
-   public int getDeltaFullValuesSent() {
-     return stats.getInt(deltaFullValuesSentId);
-   }
-   public int getDeltaFullValuesRequested() {
-     return stats.getInt(deltaFullValuesRequestedId);
-   }
+  public int getNetloadsInProgress() {
+    return stats.getInt(netloadsInProgressId);
+  }
-   public long getTotalCompressionTime() {
-     return stats.getLong(compressionCompressTimeId);
-   }
-   
-   public long getTotalDecompressionTime() {
-     return stats.getLong(compressionDecompressTimeId);
-   }
-   
-   public long getTotalCompressions() {
-     return stats.getLong(compressionCompressionsId);     
-   }
-   
-   public long getTotalDecompressions() {
-     return stats.getLong(compressionDecompressionsId);          
-   }
-   
-   public long getTotalPreCompressedBytes() {
-     return stats.getLong(compressionPreCompressedBytesId);               
-   }
-   
-   public long getTotalPostCompressedBytes() {
-     return stats.getLong(compressionPostCompressedBytesId);                    
-   }
-   
-  //////////////////////  Updating Stats  //////////////////////
-  
-   public long startCompression() {
-     stats.incLong(compressionCompressionsId, 1);
-     return getStatTime();
-   }
+  public int getNetloadsCompleted() {
+    return stats.getInt(netloadsCompletedId);
+  }
-   public void endCompression(long startTime, long startSize, long endSize) {
-     if(enableClockStats) {
-       stats.incLong(compressionCompressTimeId, getStatTime() - startTime);
-     }
-     stats.incLong(compressionPreCompressedBytesId, startSize);
-     stats.incLong(compressionPostCompressedBytesId, endSize);
-   }
+  public long getNetloadTime() {
+    return stats.getLong(netloadTimeId);
+  }
-   public long startDecompression() {
-     stats.incLong(compressionDecompressionsId, 1);
-     return getStatTime();
-   }
+  public int getNetsearchesInProgress() {
+    return stats.getInt(netsearchesInProgressId);
+  }
-   public void endDecompression(long startTime) {
-     if(enableClockStats) {
-       stats.incLong(compressionDecompressTimeId, getStatTime() - startTime);
-     }
-   }
-   
-   /**
+  public int getNetsearchesCompleted() {
+    return stats.getInt(netsearchesCompletedId);
+  }
+
+  public long getNetsearchTime() {
+    return stats.getLong(netsearchTimeId);
+  }
+
+  public int getGetInitialImagesInProgress() {
+    return stats.getInt(getInitialImagesInProgressId);
+  }
+
+  public int getGetInitialImagesCompleted() {
+    return stats.getInt(getInitialImagesCompletedId);
+  }
+
+  public int getDeltaGetInitialImagesCompleted() {
+    return stats.getInt(deltaGetInitialImagesCompletedId);
+  }
+
+  public long getGetInitialImageTime() {
+    return stats.getLong(getInitialImageTimeId);
+  }
+
+  public int getGetInitialImageKeysReceived() {
+    return stats.getInt(getInitialImageKeysReceivedId);
+  }
+
+  public int getRegions() {
+    return stats.getInt(regionsId);
+  }
+
+  public int getPartitionedRegions() {
+    return stats.getInt(partitionedRegionsId);
+  }
+
+  public int getDestroys() {
+    return stats.getInt(destroysId);
+  }
+
+  public int getCreates() {
+    return stats.getInt(createsId);
+  }
+
+  public int getPuts() {
+    return stats.getInt(putsId);
+  }
+
+  public int getPutAlls() {
+    return stats.getInt(putallsId);
+  }
+
+  public int getRemoveAlls() {
+    return stats.getInt(removeAllsId);
+  }
+
+  public int getUpdates() {
+    return stats.getInt(updatesId);
+  }
+
+  public int getInvalidates() {
+    return stats.getInt(invalidatesId);
+  }
+
+  public int getGets() {
+    return stats.getInt(getsId);
+  }
+
+  public int getMisses() {
+    return stats.getInt(missesId);
+  }
+
+  public int getReliableQueuedOps() {
+    return stats.getInt(reliableQueuedOpsId);
+  }
+
+  public void incReliableQueuedOps(int inc) {
+    stats.incInt(reliableQueuedOpsId, inc);
+  }
+
+  public int getReliableQueueSize() {
+    return stats.getInt(reliableQueueSizeId);
+  }
+
+  public void incReliableQueueSize(int inc) {
+    stats.incInt(reliableQueueSizeId, inc);
+  }
+
+  public int getReliableQueueMax() {
+    return stats.getInt(reliableQueueMaxId);
+  }
+
+  public void incReliableQueueMax(int inc) {
+    stats.incInt(reliableQueueMaxId, inc);
+  }
+
+  public int getReliableRegions() {
+    return stats.getInt(reliableRegionsId);
+  }
+
+  public void incReliableRegions(int inc) {
+    stats.incInt(reliableRegionsId, inc);
+  }
+
+  public int getReliableRegionsMissing() {
+    return stats.getInt(reliableRegionsMissingId);
+  }
+
+  public void incReliableRegionsMissing(int inc) {
+    stats.incInt(reliableRegionsMissingId, inc);
+  }
+
+  public int getReliableRegionsQueuing() {
+    return stats.getInt(reliableRegionsQueuingId);
+  }
+
+  public void incReliableRegionsQueuing(int inc) {
+    stats.incInt(reliableRegionsQueuingId, inc);
+  }
+
+  public int getReliableRegionsMissingFullAccess() {
+    return stats.getInt(reliableRegionsMissingFullAccessId);
+  }
+
+  public void incReliableRegionsMissingFullAccess(int inc) {
+    stats.incInt(reliableRegionsMissingFullAccessId, inc);
+  }
+
+  public int getReliableRegionsMissingLimitedAccess() {
+    return stats.getInt(reliableRegionsMissingLimitedAccessId);
+  }
+
+  public void incReliableRegionsMissingLimitedAccess(int inc) {
+    stats.incInt(reliableRegionsMissingLimitedAccessId, inc);
+  }
+
+  public int getReliableRegionsMissingNoAccess() {
+    return stats.getInt(reliableRegionsMissingNoAccessId);
+  }
+
+  public void incReliableRegionsMissingNoAccess(int inc) {
+    stats.incInt(reliableRegionsMissingNoAccessId, inc);
+  }
+
+  public void incQueuedEvents(int inc) {
+    this.stats.incLong(eventsQueuedId, inc);
+  }
+
+  public long getQueuedEvents() {
+    return this.stats.getInt(eventsQueuedId);
+  }
+
+  public int getDeltaUpdates() {
+    return stats.getInt(deltaUpdatesId);
+  }
+
+  public long getDeltaUpdatesTime() {
+    return stats.getLong(deltaUpdatesTimeId);
+  }
+
+  public int getDeltaFailedUpdates() {
+    return stats.getInt(deltaFailedUpdatesId);
+  }
+
+  public int getDeltasPrepared() {
+    return stats.getInt(deltasPreparedId);
+  }
+
+  public long getDeltasPreparedTime() {
+    return stats.getLong(deltasPreparedTimeId);
+  }
+
+  public int getDeltasSent() {
+    return stats.getInt(deltasSentId);
+  }
+
+  public int getDeltaFullValuesSent() {
+    return stats.getInt(deltaFullValuesSentId);
+  }
+
+  public int getDeltaFullValuesRequested() {
+    return stats.getInt(deltaFullValuesRequestedId);
+  }
+
+  public long getTotalCompressionTime() {
+    return stats.getLong(compressionCompressTimeId);
+  }
+
+  public long getTotalDecompressionTime() {
+    return stats.getLong(compressionDecompressTimeId);
+  }
+
+  public long getTotalCompressions() {
+    return stats.getLong(compressionCompressionsId);
+  }
+
+  public long getTotalDecompressions() {
+    return stats.getLong(compressionDecompressionsId);
+  }
+
+  public long getTotalPreCompressedBytes() {
+    return stats.getLong(compressionPreCompressedBytesId);
+  }
+
+  public long getTotalPostCompressedBytes() {
+    return stats.getLong(compressionPostCompressedBytesId);
+  }
+
+  ////////////////////// Updating Stats //////////////////////
+
+  public long startCompression() {
+    stats.incLong(compressionCompressionsId, 1);
+    return getStatTime();
+  }
+
+  public void endCompression(long startTime, long startSize, long endSize) {
+    if (enableClockStats) {
+      stats.incLong(compressionCompressTimeId, getStatTime() - startTime);
+    }
+    stats.incLong(compressionPreCompressedBytesId, startSize);
+    stats.incLong(compressionPostCompressedBytesId, endSize);
+  }
+
+  public long startDecompression() {
+    stats.incLong(compressionDecompressionsId, 1);
+    return getStatTime();
+  }
+
+  public void endDecompression(long startTime) {
+    if (enableClockStats) {
+      stats.incLong(compressionDecompressTimeId, getStatTime() - startTime);
+    }
+  }
+
+  /**
-  } 
+  }
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-    stats.incLong(loadTimeId, ts-start);
+    stats.incLong(loadTimeId, ts - start);
-  
+
-  } 
+  }
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(netloadTimeId, getStatTime()-start);
+      stats.incLong(netloadTimeId, getStatTime() - start);
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-    stats.incLong(netsearchTimeId, ts-start);
+    stats.incLong(netsearchTimeId, ts - start);
-  
+
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(cacheWriterCallTimeId, getStatTime()-start);
+      stats.incLong(cacheWriterCallTimeId, getStatTime() - start);
-  
+
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(cacheListenerCallTimeId, getStatTime()-start);
+      stats.incLong(cacheListenerCallTimeId, getStatTime() - start);
-  
+
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(getInitialImageTimeId, getStatTime()-start);
+      stats.incLong(getInitialImageTimeId, getStatTime() - start);
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(getInitialImageTimeId, getStatTime()-start);
+      stats.incLong(getInitialImageTimeId, getStatTime() - start);
-  
+
-  } 
+  }
+
-    stats.incLong(indexUpdateTimeId, ts-start);
+    stats.incLong(indexUpdateTimeId, ts - start);
-  public long startIndexInitialization(){
+  public long startIndexInitialization() {
-    stats.incLong(indexInitializationTimeId, ts-start);
+    stats.incLong(indexInitializationTimeId, ts - start);
-  
+
-  
+
+
+
+
+
+
+
-   * @param start the timestamp taken when the operation started 
+   * @param start the timestamp taken when the operation started
-      stats.incLong(getTimeId, getStatTime()-start);
+      stats.incLong(getTimeId, getStatTime() - start);
+
-        total = getStatTime()-start;
+        total = getStatTime() - start;
-        total = getStatTime()-start;
+        total = getStatTime() - start;
-  
+
-      stats.incLong(putallTimeId, getStatTime()-start);
+      stats.incLong(putallTimeId, getStatTime() - start);
-    
+
-      stats.incLong(removeAllTimeId, getStatTime()-start);
+      stats.incLong(removeAllTimeId, getStatTime() - start);
-    
+
-  
+
-  }  
-  
+  }
+
-  
-   public int getTxCommits() {
-     return stats.getInt(txCommitsId);
-   }
-   public int getTxCommitChanges() {
-     return stats.getInt(txCommitChangesId);
-   }
-   public long getTxCommitTime() {
-     return stats.getLong(txCommitTimeId);
-   }
-   public long getTxSuccessLifeTime() {
-     return stats.getLong(txSuccessLifeTimeId);
-   }
-   public int getTxFailures() {
-     return stats.getInt(txFailuresId);
-   }
-   public int getTxFailureChanges() {
-     return stats.getInt(txFailureChangesId);
-   }
-   public long getTxFailureTime() {
-     return stats.getLong(txFailureTimeId);
-   }
-   public long getTxFailedLifeTime() {
-     return stats.getLong(txFailedLifeTimeId);
-   }
+  public int getTxCommits() {
+    return stats.getInt(txCommitsId);
+  }
-   public int getTxRollbacks() {
-     return stats.getInt(txRollbacksId);
-   }
-   public int getTxRollbackChanges() {
-     return stats.getInt(txRollbackChangesId);
-   }
-   public long getTxRollbackTime() {
-     return stats.getLong(txRollbackTimeId);
-   }
-   public long getTxRollbackLifeTime() {
-     return stats.getLong(txRollbackLifeTimeId);
-   }
+  public int getTxCommitChanges() {
+    return stats.getInt(txCommitChangesId);
+  }
+
+  public long getTxCommitTime() {
+    return stats.getLong(txCommitTimeId);
+  }
+
+  public long getTxSuccessLifeTime() {
+    return stats.getLong(txSuccessLifeTimeId);
+  }
+
+  public int getTxFailures() {
+    return stats.getInt(txFailuresId);
+  }
+
+  public int getTxFailureChanges() {
+    return stats.getInt(txFailureChangesId);
+  }
+
+  public long getTxFailureTime() {
+    return stats.getLong(txFailureTimeId);
+  }
+
+  public long getTxFailedLifeTime() {
+    return stats.getLong(txFailedLifeTimeId);
+  }
+
+  public int getTxRollbacks() {
+    return stats.getInt(txRollbacksId);
+  }
+
+  public int getTxRollbackChanges() {
+    return stats.getInt(txRollbackChangesId);
+  }
+
+  public long getTxRollbackTime() {
+    return stats.getLong(txRollbackTimeId);
+  }
+
+  public long getTxRollbackLifeTime() {
+    return stats.getLong(txRollbackLifeTimeId);
+  }
-  
+
+
+
+
+
+
+
+
-   * Closes these stats so that they can not longer be used.  The
-   * stats are closed when the {@linkplain GemFireCacheImpl#close cache}
-   * is closed.
+   * Closes these stats so that they can not longer be used. The stats are closed when the
+   * {@linkplain GemFireCacheImpl#close cache} is closed.
-  
+
-  
+
+
+
+
-  
+
+
+
+
+   * 
-//   /**
-//    * Returns a helper object so that the event queue can record its
-//    * stats to the proper cache perf stats.
-//    * @since GemFire 3.5
-//    */
-//   public ThrottledQueueStatHelper getEventQueueHelper() {
-//     return new ThrottledQueueStatHelper() {
-//         public void incThrottleCount() {
-//           incEventQueueThrottleCount(1);
-//         }
-//         public void throttleTime(long nanos) {
-//           incEventQueueThrottleTime(nanos);
-//         }
-//         public void add() {
-//           incEventQueueSize(1);
-//         }
-//         public void remove() {
-//           incEventQueueSize(-1);
-//         }
-//         public void remove(int count) {
-//           incEventQueueSize(-count);
-//         }
-//       };
-//   }
+  // /**
+  // * Returns a helper object so that the event queue can record its
+  // * stats to the proper cache perf stats.
+  // * @since GemFire 3.5
+  // */
+  // public ThrottledQueueStatHelper getEventQueueHelper() {
+  // return new ThrottledQueueStatHelper() {
+  // public void incThrottleCount() {
+  // incEventQueueThrottleCount(1);
+  // }
+  // public void throttleTime(long nanos) {
+  // incEventQueueThrottleTime(nanos);
+  // }
+  // public void add() {
+  // incEventQueueSize(1);
+  // }
+  // public void remove() {
+  // incEventQueueSize(-1);
+  // }
+  // public void remove(int count) {
+  // incEventQueueSize(-count);
+  // }
+  // };
+  // }
-   * Returns a helper object so that the event pool can record its
-   * stats to the proper cache perf stats.
+   * Returns a helper object so that the event pool can record its stats to the proper cache perf
+   * stats.
+   * 
-        public void startJob() {
-          incEventThreads(1);
-        }
-        public void endJob() {
-          incEventThreads(-1);
-        }
-      };
+      public void startJob() {
+        incEventThreads(1);
+      }
+
+      public void endJob() {
+        incEventThreads(-1);
+      }
+    };
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
+
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66