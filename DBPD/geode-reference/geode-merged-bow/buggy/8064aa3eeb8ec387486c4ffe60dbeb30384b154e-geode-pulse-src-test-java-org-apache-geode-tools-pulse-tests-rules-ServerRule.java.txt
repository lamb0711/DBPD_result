GEODE-5396: A bit of restructuring and a bit of cleanup to isolate failures better

+import java.util.concurrent.TimeUnit;
+  private String jsonAuthFile;
-    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-    String jmxPropertiesFile = classLoader.getResource("test.properties").getPath();
-
-    int jmxPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
-    server = Server.createServer(jmxPort, jmxPropertiesFile, jsonAuthFile);
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_HOST, LOCALHOST);
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_PORT, Integer.toString(jmxPort));
-    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED, String.valueOf(Boolean.TRUE));
-
-    int httpPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
-    jetty = JettyHelper.initJetty(LOCALHOST, httpPort, new SSLConfig());
-    JettyHelper.addWebApplication(jetty, PULSE_CONTEXT, getPulseWarPath(), null, null);
-    pulseURL = "http://" + LOCALHOST + ":" + httpPort + PULSE_CONTEXT;
-    System.out.println("Pulse started at " + pulseURL);
+    this.jsonAuthFile = jsonAuthFile;
-
-    jetty.start();
-    Awaitility.await().until(() -> jetty.isStarted());
+    startServer();
+    startJetty();
+    Awaitility.waitAtMost(60, TimeUnit.SECONDS).until(() -> jetty.isStarted());
-    } finally {
-    }
-  }
-
-  private void stopServer() {
-    try {
-      if (server != null) {
-        server.stop();
-      }
-      throw new Error(e);
+      throw new RuntimeException(e);
-  private void stopJetty() {
-    try {
-      if (jetty != null) {
-        jetty.stop();
-        jetty = null;
-      }
-    } catch (Exception e) {
-      throw new Error(e);
-    }
+  private void startServer() throws Exception {
+    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+    String jmxPropertiesFile = classLoader.getResource("test.properties").getPath();
+    int jmxPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_PORT, Integer.toString(jmxPort));
+    server = Server.createServer(jmxPort, jmxPropertiesFile, jsonAuthFile);
+    server.start();
-  private String getPulseWarPath() {
-    String warPath = null;
+  private void startJetty() throws Exception {
+
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_HOST, LOCALHOST);
+    System.setProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED,
+        String.valueOf(Boolean.TRUE));
+
+    int httpPort = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
+    jetty = JettyHelper.initJetty(LOCALHOST, httpPort, new SSLConfig());
+    JettyHelper.addWebApplication(jetty, PULSE_CONTEXT, getPulseWarPath(), null, null);
+    pulseURL = "http://" + LOCALHOST + ":" + httpPort + PULSE_CONTEXT;
+    System.out.println("Pulse started at " + pulseURL);
+    jetty.start();
+  }
+
+  private void stopServer() throws Exception {
+    server.stop();
+  }
+
+  private void stopJetty() throws Exception {
+    jetty.stop();
+  }
+
+  private String getPulseWarPath() throws IOException {
+    String warPath;
-    try {
-      properties.load(inputStream);
-    } catch (IOException e) {
-      throw new RuntimeException("Unable to open properties file", e);
-    }
+    properties.load(inputStream);

INS26 MOV31 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS42 MOV44 INS8 UPD42 INS43 INS8 UPD83 INS39 UPD42 INS43 MOV83 MOV39 UPD42 MOV42 INS43 MOV8 INS83 INS39 INS42 INS43 MOV8 MOV43 INS42 INS42 INS21 INS21 MOV42 MOV60 MOV60 MOV60 MOV21 MOV21 INS21 INS42 INS21 MOV42 UPD42 MOV42 MOV21 INS7 INS32 INS12 INS32 INS32 INS22 INS42 INS42 UPD42 MOV21 MOV44 INS8 INS42 INS42 MOV42 INS42 INS52 INS42 UPD42 INS34 INS40 INS53 INS42 INS14 MOV43 INS42 DEL8 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL8 DEL43 DEL42 DEL44 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL33 DEL8 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54