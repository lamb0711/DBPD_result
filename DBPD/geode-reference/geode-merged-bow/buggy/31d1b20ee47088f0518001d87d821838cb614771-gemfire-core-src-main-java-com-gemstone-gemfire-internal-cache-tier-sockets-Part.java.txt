Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.cache.CachedDeserializable;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.Chunk;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.DataAsAddress;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.UnsafeMemoryChunk;
+  private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
-    if (tc == EMPTY_BYTEARRAY_CODE && v == null) {
-      this.part = new byte[0];
+    if (tc == EMPTY_BYTEARRAY_CODE) {
+      this.part = EMPTY_BYTE_ARRAY;
+      b = EMPTY_BYTE_ARRAY;
+      this.part = os;
+      this.part = EMPTY_BYTE_ARRAY;
+    } else {
+      this.typeCode = BYTE_CODE;
+      this.part = os;
+    }
+  }
+  public void setPartState(StoredObject so, boolean isObject) {
+    if (isObject) {
+      this.typeCode = OBJECT_CODE;
+    } else if (so.getValueSizeInBytes() == 0) {
+      this.typeCode = EMPTY_BYTEARRAY_CODE;
+      this.part = EMPTY_BYTE_ARRAY;
+      return;
-    this.part = os;
+    if (so instanceof DataAsAddress) {
+      this.part = ((DataAsAddress)so).getRawBytes();
+    } else {
+      this.part = (Chunk)so;
+    }
+    } else if (this.part instanceof Chunk) {
+      return ((Chunk) this.part).getValueSizeInBytes();
+   * This is only called for parts that will not fit into the commBuffer
+   * so they need to be written directly to the stream.
+   * A stream is used because the client is configured for old IO (instead of nio).
+   * @param buf the buffer to use if any data needs to be copied to one
-  public final void sendTo(OutputStream out) throws IOException {
+  public final void sendTo(OutputStream out, ByteBuffer buf) throws IOException {
+      } else if (this.part instanceof Chunk) {
+        Chunk c = (Chunk) this.part;
+        ByteBuffer cbb = c.createDirectByteBuffer();
+        if (cbb != null) {
+          HeapDataOutputStream.writeByteBufferToStream(out,  buf, cbb);
+        } else {
+          int bytesToSend = c.getDataSize();
+          long addr = c.getAddressForReading(0, bytesToSend);
+          while (bytesToSend > 0) {
+            if (buf.remaining() == 0) {
+              HeapDataOutputStream.flushStream(out,  buf);
+            }
+            buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+            addr++;
+            bytesToSend--;
+          }
+        }
-        hdos.sendTo(out);
+        hdos.sendTo(out, buf);
+   * Precondition: caller has already checked the length of this part
+   * and it will fit into "buf".
+      } else if (this.part instanceof Chunk) {
+        Chunk c = (Chunk) this.part;
+        ByteBuffer bb = c.createDirectByteBuffer();
+        if (bb != null) {
+          buf.put(bb);
+        } else {
+          int bytesToSend = c.getDataSize();
+          long addr = c.getAddressForReading(0, bytesToSend);
+          while (bytesToSend > 0) {
+            buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+            addr++;
+            bytesToSend--;
+          }
+        }
+   * This is only called for parts that will not fit into the commBuffer
+   * so they need to be written directly to the socket.
+   * Precondition: buf contains nothing that needs to be sent
+      } else if (this.part instanceof Chunk) {
+        // instead of copying the Chunk to buf try to create a direct ByteBuffer and
+        // just write it directly to the socket channel.
+        Chunk c = (Chunk) this.part;
+        ByteBuffer bb = c.createDirectByteBuffer();
+        if (bb != null) {
+          while (bb.remaining() > 0) {
+            sc.write(bb);
+          }
+        } else {
+          int len = c.getDataSize();
+          long addr = c.getAddressForReading(0, len);
+          buf.clear();
+          while (len > 0) {
+            int bytesThisTime = len;
+            if (bytesThisTime > BUF_MAX) {
+              bytesThisTime = BUF_MAX;
+            }
+            len -= bytesThisTime;
+            while (bytesThisTime > 0) {
+              buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+              addr++;
+              bytesThisTime--;
+            }
+            buf.flip();
+            while (buf.remaining() > 0) {
+              sc.write(buf);
+            }
+            buf.clear();
+          }
+        }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS5 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS39 INS85 INS42 MOV3 INS43 INS42 INS39 INS42 INS25 INS25 INS65 INS43 INS42 MOV27 INS8 INS42 INS42 MOV8 INS25 INS62 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS21 MOV21 INS8 INS27 INS8 MOV8 INS42 INS43 INS21 INS21 INS25 INS21 INS7 INS21 INS21 INS21 INS32 INS34 INS21 INS21 INS41 INS42 INS7 INS7 INS62 INS8 MOV8 INS25 INS25 INS25 INS42 INS7 INS22 INS42 INS7 INS7 INS7 INS42 INS42 INS7 INS7 INS22 INS32 INS22 INS11 INS22 INS43 INS41 INS62 INS8 MOV8 INS62 INS8 MOV8 INS62 INS8 MOV8 INS42 INS42 INS52 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS36 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS42 INS32 INS22 INS43 INS60 INS60 INS25 INS22 INS43 INS60 INS60 INS25 INS22 INS43 INS60 INS60 INS25 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS11 INS42 INS36 INS42 INS52 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS52 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS52 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS60 INS61 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS60 INS61 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS61 INS60 INS60 INS21 INS61 INS42 INS43 INS22 INS43 INS22 INS42 INS42 INS32 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS22 INS42 INS42 INS32 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS22 INS42 INS42 INS27 INS8 INS39 INS59 INS39 INS59 INS32 INS27 INS8 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS25 INS21 INS21 INS21 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS42 INS52 INS42 INS32 INS34 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS60 INS25 INS21 INS61 INS21 INS61 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS27 INS8 INS32 INS37 INS37 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS37 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS39 INS59 INS27 INS8 INS7 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS34 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS32 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS37 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL27