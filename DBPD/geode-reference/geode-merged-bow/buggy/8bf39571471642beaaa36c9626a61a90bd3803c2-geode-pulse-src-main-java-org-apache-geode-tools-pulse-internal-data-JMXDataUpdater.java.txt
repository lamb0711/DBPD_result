Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class JMXDataUpdater Class used for creating JMX connection and getting all
- * the required MBeans
+ * Class JMXDataUpdater Class used for creating JMX connection and getting all the required MBeans
-  private final ResourceBundle resourceBundle = Repository.get()
-      .getResourceBundle();
+  private final ResourceBundle resourceBundle = Repository.get().getResourceBundle();
-  private final String opSignature[] = { String.class.getName(),
-      String.class.getName(), int.class.getName() };
+  private final String opSignature[] =
+      {String.class.getName(), String.class.getName(), int.class.getName()};
-      this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED = new ObjectName(
-          PulseConstants.OBJECT_NAME_SYSTEM_DISTRIBUTED);
-      this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED = new ObjectName(
-          PulseConstants.OBJECT_NAME_REGION_DISTRIBUTED);
-      this.MBEAN_OBJECT_NAME_MEMBER_MANAGER = new ObjectName(
-          PulseConstants.OBJECT_NAME_MEMBER_MANAGER);
-      this.MBEAN_OBJECT_NAME_MEMBER = new ObjectName(
-          PulseConstants.OBJECT_NAME_MEMBER);
-      this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED = new ObjectName(
-          PulseConstants.OBJECT_NAME_STATEMENT_DISTRIBUTED);
+      this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED =
+          new ObjectName(PulseConstants.OBJECT_NAME_SYSTEM_DISTRIBUTED);
+      this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED =
+          new ObjectName(PulseConstants.OBJECT_NAME_REGION_DISTRIBUTED);
+      this.MBEAN_OBJECT_NAME_MEMBER_MANAGER =
+          new ObjectName(PulseConstants.OBJECT_NAME_MEMBER_MANAGER);
+      this.MBEAN_OBJECT_NAME_MEMBER = new ObjectName(PulseConstants.OBJECT_NAME_MEMBER);
+      this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED =
+          new ObjectName(PulseConstants.OBJECT_NAME_STATEMENT_DISTRIBUTED);
-      if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController
-          .getPulseProductSupport())) {
-        this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE = new ObjectName(
-            PulseConstants.OBJECT_NAME_TABLE_AGGREGATE);
+      if (PulseConstants.PRODUCT_NAME_SQLFIRE
+          .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
+        this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE =
+            new ObjectName(PulseConstants.OBJECT_NAME_TABLE_AGGREGATE);
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS") + " - " + inetAddr.toString());
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS") + " - "
+                + inetAddr.toString());
-            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS") + " - " + inetAddr.toString());
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS") + " - "
+                + inetAddr.toString());
-        JmxManagerInfo jmxManagerInfo = JmxManagerFinder.askLocatorForJmxManager(inetAddr, locatorPort, 15000,
-            repository.isUseSSLLocator());
+        JmxManagerInfo jmxManagerInfo = JmxManagerFinder.askLocatorForJmxManager(inetAddr,
+            locatorPort, 15000, repository.isUseSSLLocator());
-        cluster.setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
+        cluster
+            .setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
-        cluster.setConnectionErrorMsg(resourceBundle
-            .getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
+        cluster
+            .setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
-   * Get connection for given userName and password. This is used for DataBrowser
-   * queries which has to be fired using credentials provided at pulse login page
+   * Get connection for given userName and password. This is used for DataBrowser queries which has
+   * to be fired using credentials provided at pulse login page
-          if (jmxManagerInfo.port == 0) {
-            if (LOGGER.infoEnabled()) {
-              LOGGER.info(resourceBundle
-                  .getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
-            }
-          } else {
-            if (LOGGER.infoEnabled()) {
-              LOGGER.info(resourceBundle
-                  .getString("LOG_MSG_LOCATOR_FOUND_MANAGER")
-                  + " : "
-                  + resourceBundle.getString("LOG_MSG_HOST")
-                  + " : "
-                  + jmxManagerInfo.host
-                  + " & "
-                  + resourceBundle.getString("LOG_MSG_PORT")
-                  + " : "
-                  + jmxManagerInfo.port
-                  + (jmxManagerInfo.ssl ? resourceBundle
-                      .getString("LOG_MSG_WITH_SSL") : resourceBundle
-                      .getString("LOG_MSG_WITHOUT_SSL")));
-            }
-
-            jmxSerURL = formJMXServiceURLString(jmxManagerInfo.host,
-                String.valueOf(jmxManagerInfo.port));
+        if (jmxManagerInfo.port == 0) {
+          if (LOGGER.infoEnabled()) {
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
+        } else {
+          if (LOGGER.infoEnabled()) {
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_FOUND_MANAGER") + " : "
+                + resourceBundle.getString("LOG_MSG_HOST") + " : " + jmxManagerInfo.host + " & "
+                + resourceBundle.getString("LOG_MSG_PORT") + " : " + jmxManagerInfo.port
+                + (jmxManagerInfo.ssl ? resourceBundle.getString("LOG_MSG_WITH_SSL")
+                    : resourceBundle.getString("LOG_MSG_WITHOUT_SSL")));
+          }
+
+          jmxSerURL =
+              formJMXServiceURLString(jmxManagerInfo.host, String.valueOf(jmxManagerInfo.port));
+        }
-          LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : "
-              + this.serverName + " & "
+          LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : " + this.serverName + " & "
-        String[] creds = { this.userName, this.userPassword };
+        String[] creds = {this.userName, this.userPassword};
-          env.put("com.sun.jndi.rmi.factory.socket",
-              new SslRMIClientSocketFactory());
+          env.put("com.sun.jndi.rmi.factory.socket", new SslRMIClientSocketFactory());
-        if(registerURL)
+        if (registerURL)
-        cluster.setConnectionErrorMsg(resourceBundle
-            .getString("LOG_MSG_JMX_CONNECTION_UNKNOWN_HOST"));
+        cluster
+            .setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_UNKNOWN_HOST"));
-          LOGGER.severe("Error closing JMX connection " + swBuffer.toString()
-              + "\n");
+          LOGGER.severe("Error closing JMX connection " + swBuffer.toString() + "\n");
-  private String formJMXServiceURLString(String host, String port)
-      throws UnknownHostException {
+  private String formJMXServiceURLString(String host, String port) throws UnknownHostException {
-     * String jmxSerURL = "service:jmx:rmi://" + serverName + "/jndi/rmi://" +
-     * serverName + ":" + port + "/jmxrmi";
+     * String jmxSerURL = "service:jmx:rmi://" + serverName + "/jndi/rmi://" + serverName + ":" +
+     * port + "/jmxrmi";
-      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":"
-          + port + "/jmxrmi";
+      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":" + port + "/jmxrmi";
-        jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":"
-            + port + "/jmxrmi";
+        jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":" + port + "/jmxrmi";
-        jmxSerURL = "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:"
-            + port + "/jmxrmi";
+        jmxSerURL =
+            "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:" + port + "/jmxrmi";
-      throws IOException, AttributeNotFoundException,
-      InstanceNotFoundException, MBeanException, ReflectionException,
-      MalformedObjectNameException, InvalidAttributeValueException {
+      throws IOException, AttributeNotFoundException, InstanceNotFoundException, MBeanException,
+      ReflectionException, MalformedObjectNameException, InvalidAttributeValueException {
-      LOGGER.info(resourceBundle
-          .getString("LOG_MSG_REGISTERING_APP_URL_TO_MANAGER"));
+      LOGGER.info(resourceBundle.getString("LOG_MSG_REGISTERING_APP_URL_TO_MANAGER"));
-      Set<ObjectName> mbeans = mbsc.queryNames(
-          this.MBEAN_OBJECT_NAME_MEMBER_MANAGER, null);
+      Set<ObjectName> mbeans = mbsc.queryNames(this.MBEAN_OBJECT_NAME_MEMBER_MANAGER, null);
-        String presentUrl = (String) mbsc.getAttribute(mbeanName,
-            PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL);
+        String presentUrl =
+            (String) mbsc.getAttribute(mbeanName, PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL);
-        if (pulseWebAppUrl != null
-            && (presentUrl == null || !pulseWebAppUrl.equals(presentUrl))) {
+        if (pulseWebAppUrl != null && (presentUrl == null || !pulseWebAppUrl.equals(presentUrl))) {
-            LOGGER.fine(resourceBundle
-                .getString("LOG_MSG_SETTING_APP_URL_TO_MANAGER"));
+            LOGGER.fine(resourceBundle.getString("LOG_MSG_SETTING_APP_URL_TO_MANAGER"));
-          Attribute pulseUrlAttr = new Attribute(
-              PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL, pulseWebAppUrl);
+          Attribute pulseUrlAttr =
+              new Attribute(PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL, pulseWebAppUrl);
-            LOGGER.fine(resourceBundle
-                .getString("LOG_MSG_APP_URL_ALREADY_PRESENT_IN_MANAGER"));
+            LOGGER.fine(resourceBundle.getString("LOG_MSG_APP_URL_ALREADY_PRESENT_IN_MANAGER"));
-          cluster.setConnectionErrorMsg(resourceBundle
-              .getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND")
-              + " "
-              + resourceBundle.getString("LOG_MSG_JMX_GETTING_NEW_CONNECTION"));
+          cluster.setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND")
+              + " " + resourceBundle.getString("LOG_MSG_JMX_GETTING_NEW_CONNECTION"));
-            LOGGER.fine(resourceBundle
-                .getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND")
-                + " "
+            LOGGER.fine(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND") + " "
-              LOGGER.info(resourceBundle
-                  .getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"));
+              LOGGER.info(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"));
-            LOGGER.fine(resourceBundle
-                .getString("LOG_MSG_JMX_CONNECTION_IS_AVAILABLE"));
+            LOGGER.fine(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_IS_AVAILABLE"));
-      for (Entry<String, Cluster.Member> memberSet : cluster.getMembersHMap()
-          .entrySet()) {
+      for (Entry<String, Cluster.Member> memberSet : cluster.getMembersHMap().entrySet()) {
-      this.systemMBeans = this.mbs.queryNames(
-          this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED, null);
+      this.systemMBeans = this.mbs.queryNames(this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED, null);
-      Set<ObjectName> regionMBeans = this.mbs.queryNames(
-          this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED, null);
+      Set<ObjectName> regionMBeans =
+          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED, null);
-      Set<ObjectName> tableMBeans = this.mbs.queryNames(
-          this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE, null);
+      Set<ObjectName> tableMBeans =
+          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE, null);
-      if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController
-          .getPulseProductSupport())) {
+      if (PulseConstants.PRODUCT_NAME_SQLFIRE
+          .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
-          String regNameFromTable = StringUtils
-              .getRegionNameFromTableName(tableMBean.getKeyProperty("table"));
+          String regNameFromTable =
+              StringUtils.getRegionNameFromTableName(tableMBean.getKeyProperty("table"));
-      for (Iterator<String> it = cluster.getDeletedRegions().iterator(); it
-          .hasNext();) {
+      for (Iterator<String> it = cluster.getDeletedRegions().iterator(); it.hasNext();) {
-      Set<ObjectName> memberMBeans = this.mbs.queryNames(
-          this.MBEAN_OBJECT_NAME_MEMBER, null);
+      Set<ObjectName> memberMBeans = this.mbs.queryNames(this.MBEAN_OBJECT_NAME_MEMBER, null);
-        if(service==null){
+        if (service == null) {
-        }
-        else {
+        } else {
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_REGION:
-            if (PulseConstants.PRODUCT_NAME_SQLFIRE
-                .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
-              // For SQLfire
-              for (ObjectName tableMBean : tableMBeans) {
-                String regNameFromTable = StringUtils
-                    .getRegionNameFromTableName(tableMBean
-                        .getKeyProperty("table"));
-                String regionName = memMBean.getKeyProperty("name");
-                if (regNameFromTable.equals(regionName)) {
-                  updateMemberRegion(memMBean);
-                  break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_REGION:
+              if (PulseConstants.PRODUCT_NAME_SQLFIRE
+                  .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
+                // For SQLfire
+                for (ObjectName tableMBean : tableMBeans) {
+                  String regNameFromTable =
+                      StringUtils.getRegionNameFromTableName(tableMBean.getKeyProperty("table"));
+                  String regionName = memMBean.getKeyProperty("name");
+                  if (regNameFromTable.equals(regionName)) {
+                    updateMemberRegion(memMBean);
+                    break;
+                  }
+              } else {
+                // For Gemfire
+                updateMemberRegion(memMBean);
-            } else {
-              // For Gemfire
-              updateMemberRegion(memMBean);
-            }
-            break;
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_CACHESERVER:
-            updateMemberClient(memMBean);
-            break;
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYRECEIVER:
-            updateGatewayReceiver(memMBean);
-            break;
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYSENDER:
-            updateGatewaySender(memMBean);
-            break;
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_ASYNCEVENTQUEUE:
-            updateAsyncEventQueue(memMBean);
-            break;
-          case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_LOCATOR:
-            updateClusterMember(memMBean);
-            break;
+              break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_CACHESERVER:
+              updateMemberClient(memMBean);
+              break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYRECEIVER:
+              updateGatewayReceiver(memMBean);
+              break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_GATEWAYSENDER:
+              updateGatewaySender(memMBean);
+              break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_ASYNCEVENTQUEUE:
+              updateAsyncEventQueue(memMBean);
+              break;
+            case PulseConstants.MBEAN_KEY_PROPERTY_SERVICE_VALUE_LOCATOR:
+              updateClusterMember(memMBean);
+              break;
-      Set<ObjectName> statementObjectNames = this.mbs.queryNames(
-          this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED, null);
-      //LOGGER.info("statementObjectNames = " + statementObjectNames);
+      Set<ObjectName> statementObjectNames =
+          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED, null);
+      // LOGGER.info("statementObjectNames = " + statementObjectNames);
-        //LOGGER.info("stmtObjectName = " + stmtObjectName);
+        // LOGGER.info("stmtObjectName = " + stmtObjectName);
-          LOGGER.severe("Error closing JMX connection " + swBuffer.toString()
-              + "\n");
+          LOGGER.severe("Error closing JMX connection " + swBuffer.toString() + "\n");
-        List<Cluster.Member> memberArrList = cluster.getPhysicalToMember().get(
-            member.getHost());
+        List<Cluster.Member> memberArrList = cluster.getPhysicalToMember().get(member.getHost());
-   * function used to get attribute values of Cluster System and map them to
-   * cluster vo
+   * function used to get attribute values of Cluster System and map them to cluster vo
-   * @param mbeanName
-   *          Cluster System MBean
+   * @param mbeanName Cluster System MBean
-      if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController
-          .getPulseProductSupport())) {
+      if (PulseConstants.PRODUCT_NAME_SQLFIRE
+          .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
-      Collection<CompositeData> rows = (Collection<CompositeData>) table
-          .values();
+      Collection<CompositeData> rows = (Collection<CompositeData>) table.values();
-      AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-          PulseConstants.CLUSTER_MBEAN_ATTRIBUTES);
+      AttributeList attributeList =
+          this.mbs.getAttributes(mbeanName, PulseConstants.CLUSTER_MBEAN_ATTRIBUTES);
-        switch (name){
-        case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
-          cluster.setMemberCount(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMCLIENTS:
-          cluster.setClientConnectionCount(getIntegerAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISTRIBUTEDSYSTEMID:
-          cluster.setClusterId(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_LOCATORCOUNT:
-          cluster.setLocatorCount(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMRUNNIGFUNCTION:
-          try {
-            cluster.setRunningFunctionCount(getIntegerAttribute(
-                attribute.getValue(), attribute.getName()));
-          } catch (Exception e) {
-            cluster.setRunningFunctionCount(0);
-            continue;
-          }
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_REGISTEREDCQCOUNT:
-          cluster.setRegisteredCQCount(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMSUBSCRIPTIONS:
-          cluster.setSubscriptionCount(getIntegerAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNCOMMITTED:
-          cluster.setTxnCommittedCount(getIntegerAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNROLLBACK:
-          cluster.setTxnRollbackCount(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALHEAPSIZE:
-          cluster.setTotalHeapSize(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_USEDHEAPSIZE:
-          try {
-            cluster.setUsedHeapSize(getLongAttribute(attribute.getValue(),
-                attribute.getName()));
-          } catch (Exception e) {
-            cluster.setUsedHeapSize((long) 0);
-            continue;
-          }
-          cluster.getMemoryUsageTrend().add(cluster.getUsedHeapSize());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONENTRYCOUNT:
-          cluster.setTotalRegionEntryCount(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_CURRENTENTRYCOUNT:
-          cluster.setCurrentQueryCount(getIntegerAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:
-          try {
-            cluster.setTotalBytesOnDisk(getLongAttribute(attribute.getValue(),
-                attribute.getName()));
-          } catch (Exception e) {
-            cluster.setTotalBytesOnDisk((long) 0);
-            continue;
-          }
-          cluster.getTotalBytesOnDiskTrend().add(cluster.getTotalBytesOnDisk());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
-          cluster.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          cluster.getThroughoutWritesTrend().add(cluster.getDiskWritesRate());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:
-          try {
-            cluster.setWritePerSec(getDoubleAttribute(attribute.getValue(),
-                attribute.getName()));
-          } catch (Exception e) {
-            cluster.setWritePerSec(0);
-            continue;
-          }
-          cluster.getWritePerSecTrend().add(cluster.getWritePerSec());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:
-          try {
-            cluster.setReadPerSec(getDoubleAttribute(attribute.getValue(),
-                attribute.getName()));
-          } catch (Exception e) {
-            cluster.setReadPerSec(0);
-            continue;
-          }
-          cluster.getReadPerSecTrend().add(cluster.getReadPerSec());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_QUERYREQUESTRATE:
-          cluster.setQueriesPerSec(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          cluster.getQueriesPerSecTrend().add(cluster.getQueriesPerSec());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
-          cluster.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          cluster.getThroughoutReadsTrend().add(cluster.getDiskReadsRate());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:
-          long trendVal = determineCurrentJVMPauses(
-              PulseConstants.JVM_PAUSES_TYPE_CLUSTER, "",
-              getLongAttribute(attribute.getValue(), attribute.getName()));
-          cluster.setGarbageCollectionCount(trendVal);
-          cluster.getGarbageCollectionTrend().add(
-              cluster.getGarbageCollectionCount());
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:
-          if (!PulseConstants.PRODUCT_NAME_SQLFIRE
-              .equalsIgnoreCase(PulseController.getPulseProductSupport())){
-            // for Gemfire
-            cluster.setTotalRegionCount(getIntegerAttribute(
-                attribute.getValue(), attribute.getName()));
-          }
-          break;
+        switch (name) {
+          case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
+            cluster.setMemberCount(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMCLIENTS:
+            cluster.setClientConnectionCount(
+                getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISTRIBUTEDSYSTEMID:
+            cluster.setClusterId(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_LOCATORCOUNT:
+            cluster.setLocatorCount(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMRUNNIGFUNCTION:
+            try {
+              cluster.setRunningFunctionCount(
+                  getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            } catch (Exception e) {
+              cluster.setRunningFunctionCount(0);
+              continue;
+            }
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_REGISTEREDCQCOUNT:
+            cluster
+                .setRegisteredCQCount(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMSUBSCRIPTIONS:
+            cluster.setSubscriptionCount(
+                getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNCOMMITTED:
+            cluster.setTxnCommittedCount(
+                getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMTXNROLLBACK:
+            cluster.setTxnRollbackCount(
+                getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALHEAPSIZE:
+            cluster.setTotalHeapSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_USEDHEAPSIZE:
+            try {
+              cluster.setUsedHeapSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+            } catch (Exception e) {
+              cluster.setUsedHeapSize((long) 0);
+              continue;
+            }
+            cluster.getMemoryUsageTrend().add(cluster.getUsedHeapSize());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONENTRYCOUNT:
+            cluster.setTotalRegionEntryCount(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_CURRENTENTRYCOUNT:
+            cluster.setCurrentQueryCount(
+                getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:
+            try {
+              cluster
+                  .setTotalBytesOnDisk(getLongAttribute(attribute.getValue(), attribute.getName()));
+            } catch (Exception e) {
+              cluster.setTotalBytesOnDisk((long) 0);
+              continue;
+            }
+            cluster.getTotalBytesOnDiskTrend().add(cluster.getTotalBytesOnDisk());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
+            cluster
+                .setDiskWritesRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            cluster.getThroughoutWritesTrend().add(cluster.getDiskWritesRate());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:
+            try {
+              cluster.setWritePerSec(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            } catch (Exception e) {
+              cluster.setWritePerSec(0);
+              continue;
+            }
+            cluster.getWritePerSecTrend().add(cluster.getWritePerSec());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:
+            try {
+              cluster.setReadPerSec(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            } catch (Exception e) {
+              cluster.setReadPerSec(0);
+              continue;
+            }
+            cluster.getReadPerSecTrend().add(cluster.getReadPerSec());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_QUERYREQUESTRATE:
+            cluster.setQueriesPerSec(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            cluster.getQueriesPerSecTrend().add(cluster.getQueriesPerSec());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
+            cluster.setDiskReadsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            cluster.getThroughoutReadsTrend().add(cluster.getDiskReadsRate());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:
+            long trendVal = determineCurrentJVMPauses(PulseConstants.JVM_PAUSES_TYPE_CLUSTER, "",
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            cluster.setGarbageCollectionCount(trendVal);
+            cluster.getGarbageCollectionTrend().add(cluster.getGarbageCollectionCount());
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:
+            if (!PulseConstants.PRODUCT_NAME_SQLFIRE
+                .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
+              // for Gemfire
+              cluster.setTotalRegionCount(
+                  getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            }
+            break;
-      if (PulseConstants.PRODUCT_NAME_SQLFIRE.equalsIgnoreCase(PulseController
-          .getPulseProductSupport())) {
+      if (PulseConstants.PRODUCT_NAME_SQLFIRE
+          .equalsIgnoreCase(PulseController.getPulseProductSupport())) {
-          ObjectName sfMemberMbeansObjectName = new ObjectName(
-              PulseConstants.OBJECT_NAME_SF_CLUSTER);
+          ObjectName sfMemberMbeansObjectName =
+              new ObjectName(PulseConstants.OBJECT_NAME_SF_CLUSTER);
-          Set<ObjectName> sfCluserMBeans = this.mbs.queryNames(
-              sfMemberMbeansObjectName, null);
+          Set<ObjectName> sfCluserMBeans = this.mbs.queryNames(sfMemberMbeansObjectName, null);
-            AttributeList attrList = this.mbs.getAttributes(sfCluserMBean,
-                PulseConstants.SF_CLUSTER_MBEAN_ATTRIBUTES);
+            AttributeList attrList =
+                this.mbs.getAttributes(sfCluserMBean, PulseConstants.SF_CLUSTER_MBEAN_ATTRIBUTES);
-              if (attribute.getName().equals(
-                  PulseConstants.MBEAN_ATTRIBUTE_PROCEDURECALLSINPROGRESS)) {
+              if (attribute.getName()
+                  .equals(PulseConstants.MBEAN_ATTRIBUTE_PROCEDURECALLSINPROGRESS)) {
-                  cluster.setRunningFunctionCount(getIntegerAttribute(
-                      attribute.getValue(), attribute.getName()));
+                  cluster.setRunningFunctionCount(
+                      getIntegerAttribute(attribute.getValue(), attribute.getName()));
-              } else if (attribute
-                  .getName()
-                  .equals(
-                      PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {
+              } else if (attribute.getName()
+                  .equals(PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {
-                CompositeData nscConnStats = (CompositeData) attribute
-                    .getValue();
+                CompositeData nscConnStats = (CompositeData) attribute.getValue();
-                cluster.setClientConnectionCount(getLongAttribute(nscConnStats
-                    .get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),
+                cluster.setClientConnectionCount(getLongAttribute(
+                    nscConnStats.get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),
-   * function used to get attribute values of Gateway Receiver and map them to
-   * GatewayReceiver inner class object
+   * function used to get attribute values of Gateway Receiver and map them to GatewayReceiver inner
+   * class object
-      throws InstanceNotFoundException, IntrospectionException,
-      ReflectionException, IOException, AttributeNotFoundException,
-      MBeanException {
+      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
+      AttributeNotFoundException, MBeanException {
-    AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-        PulseConstants.GATEWAY_MBEAN_ATTRIBUTES);
+    AttributeList attributeList =
+        this.mbs.getAttributes(mbeanName, PulseConstants.GATEWAY_MBEAN_ATTRIBUTES);
-        gatewayReceiver.setListeningPort(getIntegerAttribute(
-            attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName().equals(
-          PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE)) {
-        gatewayReceiver.setLinkThroughput(getDoubleAttribute(
-            attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName().equals(
-          PulseConstants.MBEAN_ATTRIBUTE_AVEARGEBATCHPROCESSINGTIME)) {
-        gatewayReceiver.setAvgBatchProcessingTime(getLongAttribute(
-            attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName().equals(
-          PulseConstants.MBEAN_ATTRIBUTE_RUNNING)) {
-        gatewayReceiver.setStatus(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
+        gatewayReceiver
+            .setListeningPort(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+      } else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE)) {
+        gatewayReceiver
+            .setLinkThroughput(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+      } else if (attribute.getName()
+          .equals(PulseConstants.MBEAN_ATTRIBUTE_AVEARGEBATCHPROCESSINGTIME)) {
+        gatewayReceiver
+            .setAvgBatchProcessingTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+      } else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_RUNNING)) {
+        gatewayReceiver.setStatus(getBooleanAttribute(attribute.getValue(), attribute.getName()));
-   * function used to get attribute values of Gateway Sender and map them to
-   * GatewaySender inner class object
+   * function used to get attribute values of Gateway Sender and map them to GatewaySender inner
+   * class object
-      throws InstanceNotFoundException, IntrospectionException,
-      ReflectionException, IOException, AttributeNotFoundException,
-      MBeanException {
+      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
+      AttributeNotFoundException, MBeanException {
-    AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-        PulseConstants.GATEWAYSENDER_MBEAN_ATTRIBUTES);
+    AttributeList attributeList =
+        this.mbs.getAttributes(mbeanName, PulseConstants.GATEWAYSENDER_MBEAN_ATTRIBUTES);
-      switch (name){
-      case PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE:
-        gatewaySender.setLinkThroughput(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_BATCHSIZE:
-        gatewaySender.setBatchSize(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_SENDERID:
-        gatewaySender.setId(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_EVENTQUEUESIZE:
-        gatewaySender.setQueueSize(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_RUNNING:
-        gatewaySender.setStatus(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_PRIMARY:
-        gatewaySender.setPrimary(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENCEENABLED:
-        gatewaySender.setPersistenceEnabled(getBooleanAttribute(
-            attribute.getValue(), attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_PARALLEL:
-        gatewaySender.setSenderType(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_REMOTE_DS_ID:
-        gatewaySender.setRemoteDSId(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_EVENTS_EXCEEDING_ALERT_THRESHOLD:
-        gatewaySender.setEventsExceedingAlertThreshold(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
+      switch (name) {
+        case PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE:
+          gatewaySender
+              .setLinkThroughput(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_BATCHSIZE:
+          gatewaySender
+              .setBatchSize(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_SENDERID:
+          gatewaySender.setId(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_EVENTQUEUESIZE:
+          gatewaySender
+              .setQueueSize(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_RUNNING:
+          gatewaySender.setStatus(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_PRIMARY:
+          gatewaySender.setPrimary(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENCEENABLED:
+          gatewaySender.setPersistenceEnabled(
+              getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_PARALLEL:
+          gatewaySender
+              .setSenderType(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_REMOTE_DS_ID:
+          gatewaySender
+              .setRemoteDSId(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_EVENTS_EXCEEDING_ALERT_THRESHOLD:
+          gatewaySender.setEventsExceedingAlertThreshold(
+              getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
-   * function used for getting list of Gateway Senders from mBean for giving
-   * member and update the list of gateway senders for respective member object
+   * function used for getting list of Gateway Senders from mBean for giving member and update the
+   * list of gateway senders for respective member object
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-        Cluster.Member existingMember = cluster.getMembersHMap()
-            .get(memberName);
+        Cluster.Member existingMember = cluster.getMembersHMap().get(memberName);
-        for (Iterator<Cluster.GatewaySender> it = existingMember
-            .getGatewaySenderList().iterator(); it.hasNext();) {
+        for (Iterator<Cluster.GatewaySender> it =
+            existingMember.getGatewaySenderList().iterator(); it.hasNext();) {
-   * function used to get attribute values of Async Event Queue and map them to
-   * Async Event Queue  inner class object
+   * function used to get attribute values of Async Event Queue and map them to Async Event Queue
+   * inner class object
-      throws InstanceNotFoundException, IntrospectionException,
-      ReflectionException, IOException, AttributeNotFoundException,
-      MBeanException {
+      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
+      AttributeNotFoundException, MBeanException {
-    AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-        PulseConstants.ASYNC_EVENT_QUEUE_MBEAN_ATTRIBUTES);
+    AttributeList attributeList =
+        this.mbs.getAttributes(mbeanName, PulseConstants.ASYNC_EVENT_QUEUE_MBEAN_ATTRIBUTES);
-      switch (name){
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNCEVENTID:
-        asyncEventQueue.setId(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNC_EVENT_LISTENER:
-        asyncEventQueue.setAsyncEventListener(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_CONFLATION_ENABLED:
-        asyncEventQueue.setBatchConflationEnabled(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_TIME_INTERVAL:
-        asyncEventQueue.setBatchTimeInterval(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_SIZE:
-        asyncEventQueue.setBatchSize(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_EVENT_QUEUE_SIZE:
-        asyncEventQueue.setEventQueueSize(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PARALLEL:
-        asyncEventQueue.setParallel(getBooleanAttribute(
-            attribute.getValue(), attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PRIMARY:
-        asyncEventQueue.setPrimary(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
+      switch (name) {
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNCEVENTID:
+          asyncEventQueue.setId(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNC_EVENT_LISTENER:
+          asyncEventQueue
+              .setAsyncEventListener(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_CONFLATION_ENABLED:
+          asyncEventQueue.setBatchConflationEnabled(
+              getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_TIME_INTERVAL:
+          asyncEventQueue
+              .setBatchTimeInterval(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_SIZE:
+          asyncEventQueue
+              .setBatchSize(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_EVENT_QUEUE_SIZE:
+          asyncEventQueue
+              .setEventQueueSize(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PARALLEL:
+          asyncEventQueue
+              .setParallel(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PRIMARY:
+          asyncEventQueue
+              .setPrimary(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
-   * function used for getting list of Gateway Senders from mBean for giving
-   * member and update the list of gateway senders for respective member object
+   * function used for getting list of Gateway Senders from mBean for giving member and update the
+   * list of gateway senders for respective member object
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-        Cluster.Member existingMember = cluster.getMembersHMap()
-            .get(memberName);
+        Cluster.Member existingMember = cluster.getMembersHMap().get(memberName);
-        for (Iterator<Cluster.AsyncEventQueue> it = existingMember.getAsyncEventQueueList().iterator(); it.hasNext();) {
+        for (Iterator<Cluster.AsyncEventQueue> it =
+            existingMember.getAsyncEventQueueList().iterator(); it.hasNext();) {
-   * function used for getting a Gateway Receiver from mBean for giving member
-   * and update the gateway receiver for respective member object
+   * function used for getting a Gateway Receiver from mBean for giving member and update the
+   * gateway receiver for respective member object
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-        Cluster.Member existingMember = cluster.getMembersHMap()
-            .get(memberName);
+        Cluster.Member existingMember = cluster.getMembersHMap().get(memberName);
-   * function used for getting member clients from mbean and update the clients
-   * information in member object's client arraylist
+   * function used for getting member clients from mbean and update the clients information in
+   * member object's client arraylist
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-        Cluster.Member existingMember = cluster.getMembersHMap()
-            .get(memberName);
+        Cluster.Member existingMember = cluster.getMembersHMap().get(memberName);
-        existingMember.setMemberPort(""
-            + this.mbs.getAttribute(mbeanName,
-                PulseConstants.MBEAN_ATTRIBUTE_PORT));
+        existingMember.setMemberPort(
+            "" + this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_PORT));
-        existingMember.setHostnameForClients((String)this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT));
-        existingMember.setBindAddress((String)this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS));
+        existingMember.setHostnameForClients((String) this.mbs.getAttribute(mbeanName,
+            PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT));
+        existingMember.setBindAddress(
+            (String) this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS));
-        CompositeData[] compositeData = (CompositeData[]) (this.mbs.invoke(
-            mbeanName, PulseConstants.MBEAN_OPERATION_SHOWALLCLIENTS, null,
-            null));
+        CompositeData[] compositeData = (CompositeData[]) (this.mbs.invoke(mbeanName,
+            PulseConstants.MBEAN_OPERATION_SHOWALLCLIENTS, null, null));
-            client.setId((String) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTID));
+            client.setId((String) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTID));
-            client.setName((String) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_NAME));
+            client.setName((String) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NAME));
-            client.setHost((String) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_HOSTNAME));
+            client.setHost((String) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_HOSTNAME));
-            client.setQueueSize((Integer) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_QUEUESIZE));
+            client.setQueueSize((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_QUEUESIZE));
-            client.setProcessCpuTime((Long) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_PROCESSCPUTIME));
+            client.setProcessCpuTime(
+                (Long) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_PROCESSCPUTIME));
-            client.setUptime((Long) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_UPTIME));
+            client.setUptime((Long) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_UPTIME));
-            client.setThreads((Integer) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFTHREADS));
+            client.setThreads((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFTHREADS));
-            client.setGets((Integer) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFGETS));
+            client.setGets((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFGETS));
-            client.setPuts((Integer) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFPUTS));
+            client.setPuts((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_NUMOFPUTS));
-            client.setCpus((Integer) cmd
-                .get(PulseConstants.COMPOSITE_DATA_KEY_CPUS));
+            client.setCpus((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CPUS));
-          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CONNECTED)){
+          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CONNECTED)) {
-          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)){
-        	client.setClientCQCount((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT));
+          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)) {
+            client.setClientCQCount(
+                (Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT));
-          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)){
-            client.setSubscriptionEnabled((Boolean) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED));
+          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)) {
+            client.setSubscriptionEnabled(
+                (Boolean) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED));
-   * @param regionObjectName: used to construct the jmx objectname. For region name that has special characters in, it will have double quotes around it.
+   * @param regionObjectName: used to construct the jmx objectname. For region name that has special
+   *        characters in, it will have double quotes around it.
-  private void updateRegionOnMembers(String regionObjectName, String regionFullPath, Cluster.Region region) throws IOException {
+  private void updateRegionOnMembers(String regionObjectName, String regionFullPath,
+      Cluster.Region region) throws IOException {
-    try{
-        List<String> memberNamesTemp = region.getMemberName();
-        ArrayList<String> memberNames = new ArrayList<String>(memberNamesTemp);
+    try {
+      List<String> memberNamesTemp = region.getMemberName();
+      ArrayList<String> memberNames = new ArrayList<String>(memberNamesTemp);
-        List<Cluster.RegionOnMember> regionOnMemberList = new ArrayList<Cluster.RegionOnMember>();
-        List<Cluster.RegionOnMember> regionOnMemberListNew = new ArrayList<Cluster.RegionOnMember>();
-        Cluster.RegionOnMember[] regionOnMemberNames = region.getRegionOnMembers();
+      List<Cluster.RegionOnMember> regionOnMemberList = new ArrayList<Cluster.RegionOnMember>();
+      List<Cluster.RegionOnMember> regionOnMemberListNew = new ArrayList<Cluster.RegionOnMember>();
+      Cluster.RegionOnMember[] regionOnMemberNames = region.getRegionOnMembers();
-        if ((regionOnMemberNames != null) && (regionOnMemberNames.length > 0)) {
-          regionOnMemberList = new ArrayList<Cluster.RegionOnMember>(Arrays.asList(regionOnMemberNames));
-        }
-        LOGGER.fine("updateRegionOnMembers : # regionOnMembers objects in region = " + regionOnMemberList.size());
+      if ((regionOnMemberNames != null) && (regionOnMemberNames.length > 0)) {
+        regionOnMemberList =
+            new ArrayList<Cluster.RegionOnMember>(Arrays.asList(regionOnMemberNames));
+      }
+      LOGGER.fine("updateRegionOnMembers : # regionOnMembers objects in region = "
+          + regionOnMemberList.size());
-        for(Cluster.RegionOnMember anRom : regionOnMemberList) {
+      for (Cluster.RegionOnMember anRom : regionOnMemberList) {
-          for(String memberName : memberNames){
-            if(anRom.getMemberName().equals(memberName)){
-              // Add regionOnMember object in new list
-              regionOnMemberListNew.add(anRom);
+        for (String memberName : memberNames) {
+          if (anRom.getMemberName().equals(memberName)) {
+            // Add regionOnMember object in new list
+            regionOnMemberListNew.add(anRom);
-              LOGGER.fine("updateRegionOnMembers : Processing existing Member name = " + anRom.getMemberName());
-              String objectNameROM = PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + anRom.getMemberName();
-              ObjectName regionOnMemberMBean = new ObjectName(objectNameROM);
-              LOGGER.fine("updateRegionOnMembers : Object name = " + regionOnMemberMBean.getCanonicalName());
+            LOGGER.fine("updateRegionOnMembers : Processing existing Member name = "
+                + anRom.getMemberName());
+            String objectNameROM =
+                PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName
+                    + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + anRom.getMemberName();
+            ObjectName regionOnMemberMBean = new ObjectName(objectNameROM);
+            LOGGER.fine(
+                "updateRegionOnMembers : Object name = " + regionOnMemberMBean.getCanonicalName());
-              AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean, PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);
-              for (int i = 0; i < attributeList.size(); i++) {
-                Attribute attribute = (Attribute) attributeList.get(i);
-                String name = attribute.getName();
-                switch(name){
+            AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean,
+                PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);
+            for (int i = 0; i < attributeList.size(); i++) {
+              Attribute attribute = (Attribute) attributeList.get(i);
+              String name = attribute.getName();
+              switch (name) {
-                  anRom.setEntrySize(getLongAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getEntrySize() = " + anRom.getEntrySize());
+                  anRom.setEntrySize(getLongAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER.fine(
+                      "updateRegionOnMembers : anRom.getEntrySize() = " + anRom.getEntrySize());
-                  anRom.setEntryCount(getLongAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getEntryCount() = " + anRom.getEntryCount());
+                  anRom.setEntryCount(getLongAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER.fine(
+                      "updateRegionOnMembers : anRom.getEntryCount() = " + anRom.getEntryCount());
-                  anRom.setPutsRate(getDoubleAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getPutsRate() = " + anRom.getPutsRate());
+                  anRom.setPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER
+                      .fine("updateRegionOnMembers : anRom.getPutsRate() = " + anRom.getPutsRate());
-                  anRom.setGetsRate(getDoubleAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getGetsRate() = " + anRom.getGetsRate());
+                  anRom.setGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER
+                      .fine("updateRegionOnMembers : anRom.getGetsRate() = " + anRom.getGetsRate());
-                  anRom.setDiskGetsRate(getDoubleAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskGetsRate() = " + anRom.getDiskGetsRate());
+                  anRom.setDiskGetsRate(
+                      getDoubleAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskGetsRate() = "
+                      + anRom.getDiskGetsRate());
-                  anRom.setDiskPutsRate(getDoubleAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskPutsRate() = " + anRom.getDiskPutsRate());
+                  anRom.setDiskPutsRate(
+                      getDoubleAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER.fine("updateRegionOnMembers : anRom.getDiskPutsRate() = "
+                      + anRom.getDiskPutsRate());
-                  anRom.setLocalMaxMemory(getIntegerAttribute(attribute.getValue(),
-                      attribute.getName()));
-                  LOGGER.fine("updateRegionOnMembers : anRom.getLocalMaxMemory() = " + anRom.getLocalMaxMemory());
+                  anRom.setLocalMaxMemory(
+                      getIntegerAttribute(attribute.getValue(), attribute.getName()));
+                  LOGGER.fine("updateRegionOnMembers : anRom.getLocalMaxMemory() = "
+                      + anRom.getLocalMaxMemory());
-                }
-
-              anRom.getGetsPerSecTrend().add(anRom.getGetsRate());
-              anRom.getPutsPerSecTrend().add(anRom.getPutsRate());
-              anRom.getDiskReadsPerSecTrend().add(anRom.getDiskGetsRate());
-              anRom.getDiskWritesPerSecTrend().add(anRom.getDiskPutsRate());
-              LOGGER.fine("updateRegionOnMembers : Existing member on region : getGetsRate() = " + anRom.getGetsPerSecTrend().size() + ", getPutsRate() = "
-                  + anRom.getPutsPerSecTrend().size() + ", getDiskGetsRate() = " + anRom.getDiskReadsPerSecTrend().size() + ", getDiskPutsRate() = "
-                  + anRom.getDiskWritesPerSecTrend().size());
-
-              //remove existing member names from list so only new ones will remain
-              memberNames.remove(anRom.getMemberName());
-
-              break;
+
+            anRom.getGetsPerSecTrend().add(anRom.getGetsRate());
+            anRom.getPutsPerSecTrend().add(anRom.getPutsRate());
+            anRom.getDiskReadsPerSecTrend().add(anRom.getDiskGetsRate());
+            anRom.getDiskWritesPerSecTrend().add(anRom.getDiskPutsRate());
+            LOGGER.fine("updateRegionOnMembers : Existing member on region : getGetsRate() = "
+                + anRom.getGetsPerSecTrend().size() + ", getPutsRate() = "
+                + anRom.getPutsPerSecTrend().size() + ", getDiskGetsRate() = "
+                + anRom.getDiskReadsPerSecTrend().size() + ", getDiskPutsRate() = "
+                + anRom.getDiskWritesPerSecTrend().size());
+
+            // remove existing member names from list so only new ones will remain
+            memberNames.remove(anRom.getMemberName());
+
+            break;
+      }
-        LOGGER.fine("updateRegionOnMembers : Loop over remaining member names and adding new member in region. Existing count = " + regionOnMemberList.size());
-        LOGGER.fine("updateRegionOnMembers : Remaining new members in this region = " + memberNames.size());
-        //loop over the remaining regions members and add new members for this region
-        for(String memberName : memberNames) {
-          String objectNameROM = PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + memberName;
-          ObjectName regionOnMemberMBean = new ObjectName(objectNameROM);
-          Cluster.RegionOnMember regionOnMember = new Cluster.RegionOnMember();
-          regionOnMember.setMemberName(memberName);
-          regionOnMember.setRegionFullPath(regionFullPath);
-          AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean, PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);
-          for (int i = 0; i < attributeList.size(); i++) {
-            Attribute attribute = (Attribute) attributeList.get(i);
-            String name=attribute.getName();
-            switch (name){
+      LOGGER.fine(
+          "updateRegionOnMembers : Loop over remaining member names and adding new member in region. Existing count = "
+              + regionOnMemberList.size());
+      LOGGER.fine(
+          "updateRegionOnMembers : Remaining new members in this region = " + memberNames.size());
+      // loop over the remaining regions members and add new members for this region
+      for (String memberName : memberNames) {
+        String objectNameROM = PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObjectName
+            + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + memberName;
+        ObjectName regionOnMemberMBean = new ObjectName(objectNameROM);
+        Cluster.RegionOnMember regionOnMember = new Cluster.RegionOnMember();
+        regionOnMember.setMemberName(memberName);
+        regionOnMember.setRegionFullPath(regionFullPath);
+        AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean,
+            PulseConstants.REGION_ON_MEMBER_MBEAN_ATTRIBUTES);
+        for (int i = 0; i < attributeList.size(); i++) {
+          Attribute attribute = (Attribute) attributeList.get(i);
+          String name = attribute.getName();
+          switch (name) {
-              regionOnMember.setEntrySize(getLongAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setEntrySize(getLongAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setEntryCount(getLongAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setEntryCount(getLongAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setPutsRate(getDoubleAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setGetsRate(getDoubleAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setDiskGetsRate(getDoubleAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setDiskGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setDiskPutsRate(getDoubleAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember
+                  .setDiskPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
-              regionOnMember.setLocalMaxMemory(getIntegerAttribute(attribute.getValue(),
-                  attribute.getName()));
+              regionOnMember.setLocalMaxMemory(
+                  getIntegerAttribute(attribute.getValue(), attribute.getName()));
-            }
-
-          regionOnMember.getGetsPerSecTrend().add(regionOnMember.getGetsRate());
-          regionOnMember.getPutsPerSecTrend().add(regionOnMember.getPutsRate());
-          regionOnMember.getDiskReadsPerSecTrend().add(regionOnMember.getDiskGetsRate());
-          regionOnMember.getDiskWritesPerSecTrend().add(regionOnMember.getDiskPutsRate());
-
-          LOGGER.fine("updateRegionOnMembers : Adding New member on region : getGetsRate() = " + regionOnMember.getGetsRate() + ", getPutsRate() = "
-              + regionOnMember.getPutsRate() + ", getDiskGetsRate() = " + regionOnMember.getDiskGetsRate() + ", getDiskPutsRate() = "
-              + regionOnMember.getDiskPutsRate());
-
-          regionOnMemberListNew.add(regionOnMember);
-        //set region on member
-        region.setRegionOnMembers(regionOnMemberListNew);
-        LOGGER.fine("updateRegionOnMembers : Total regions on member in region " + region.getFullPath() + " after update = " + region.getRegionOnMembers().length);
+        regionOnMember.getGetsPerSecTrend().add(regionOnMember.getGetsRate());
+        regionOnMember.getPutsPerSecTrend().add(regionOnMember.getPutsRate());
+        regionOnMember.getDiskReadsPerSecTrend().add(regionOnMember.getDiskGetsRate());
+        regionOnMember.getDiskWritesPerSecTrend().add(regionOnMember.getDiskPutsRate());
+
+        LOGGER.fine("updateRegionOnMembers : Adding New member on region : getGetsRate() = "
+            + regionOnMember.getGetsRate() + ", getPutsRate() = " + regionOnMember.getPutsRate()
+            + ", getDiskGetsRate() = " + regionOnMember.getDiskGetsRate() + ", getDiskPutsRate() = "
+            + regionOnMember.getDiskPutsRate());
+
+        regionOnMemberListNew.add(regionOnMember);
+      }
+
+      // set region on member
+      region.setRegionOnMembers(regionOnMemberListNew);
+      LOGGER.fine("updateRegionOnMembers : Total regions on member in region "
+          + region.getFullPath() + " after update = " + region.getRegionOnMembers().length);
-   * function used to get attribute values of Cluster Region and map them to
-   * cluster region vo
+   * function used to get attribute values of Cluster Region and map them to cluster region vo
-   * @param mbeanName
-   *          Cluster Region MBean
+   * @param mbeanName Cluster Region MBean
-      AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-          PulseConstants.REGION_MBEAN_ATTRIBUTES);
+      AttributeList attributeList =
+          this.mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
-          regionFullPath = getStringAttribute(attribute.getValue(),
-              attribute.getName());
+          regionFullPath = getStringAttribute(attribute.getValue(), attribute.getName());
-        switch (name){
-        case PulseConstants.MBEAN_ATTRIBUTE_MEMBERS:
-          String memName[] = (String[]) attribute.getValue();
-          region.getMemberName().clear();
-          for (int k = 0; k < memName.length; k++) {
-            region.getMemberName().add(memName[k]);
-          }
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:
-          region.setFullPath(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
-          region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
-          region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_EMPTYNODES:
-          region.setEmptyNode(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:
-          region.setGetsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:
-          region.setLruEvictionRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:
-          region.setPutsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:
-          region.setRegionType(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:
-          region.setEntrySize(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_SYSTEMREGIONENTRYCOUNT:
-          region.setSystemRegionEntryCount(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
-          region.setMemberCount(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:
-          region.setPersistentEnabled(getBooleanAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NAME:
-          region.setName(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:
-          region.setWanEnabled(getBooleanAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKUSAGE:
-          region.setDiskUsage(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
+        switch (name) {
+          case PulseConstants.MBEAN_ATTRIBUTE_MEMBERS:
+            String memName[] = (String[]) attribute.getValue();
+            region.getMemberName().clear();
+            for (int k = 0; k < memName.length; k++) {
+              region.getMemberName().add(memName[k]);
+            }
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:
+            region.setFullPath(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
+            region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
+            region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_EMPTYNODES:
+            region.setEmptyNode(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:
+            region.setGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:
+            region
+                .setLruEvictionRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:
+            region.setPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:
+            region.setRegionType(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:
+            region.setEntrySize(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_SYSTEMREGIONENTRYCOUNT:
+            region.setSystemRegionEntryCount(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
+            region.setMemberCount(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:
+            region.setPersistentEnabled(
+                getBooleanAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NAME:
+            region.setName(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:
+            region.setWanEnabled(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKUSAGE:
+            region.setDiskUsage(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
-      //add for each member
+      // add for each member
-      AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-          PulseConstants.STATEMENT_MBEAN_ATTRIBUTES);
+      AttributeList attributeList =
+          this.mbs.getAttributes(mbeanName, PulseConstants.STATEMENT_MBEAN_ATTRIBUTES);
-      Cluster.Statement statement = cluster.getClusterStatements().get(
-          statementDefinition);
+      Cluster.Statement statement = cluster.getClusterStatements().get(statementDefinition);
-        switch (name){
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMTIMESCOMPILED:
-          statement.setNumTimesCompiled(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMEXECUTION:
-          statement.setNumExecution(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMEXECUTIONSINPROGRESS:
-          statement.setNumExecutionsInProgress(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMTIMESGLOBALINDEXLOOKUP:
-          statement.setNumTimesGlobalIndexLookup(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NUMROWSMODIFIED:
-          statement.setNumRowsModified(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PARSETIME:
-          statement.setParseTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_BINDTIME:
-          statement.setBindTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_OPTIMIZETIME:
-          statement.setOptimizeTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_ROUTINGINFOTIME:
-          statement.setRoutingInfoTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_GENERATETIME:
-          statement.setGenerateTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALCOMPILATIONTIME:
-          statement.setTotalCompilationTime(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_EXECUTIONTIME:
-          statement.setExecutionTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PROJECTIONTIME:
-          statement.setProjectionTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_TOTALEXECUTIONTIME:
-          statement.setTotalExecutionTime(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_ROWSMODIFICATIONTIME:
-          statement.setRowsModificationTime(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_QNNUMROWSSEEN:
-          statement.setqNNumRowsSeen(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_QNMSGSENDTIME:
-          statement.setqNMsgSendTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_QNMSGSERTIME:
-          statement.setqNMsgSerTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_QNRESPDESERTIME:
-          statement.setqNRespDeSerTime(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
+        switch (name) {
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMTIMESCOMPILED:
+            statement
+                .setNumTimesCompiled(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMEXECUTION:
+            statement.setNumExecution(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMEXECUTIONSINPROGRESS:
+            statement.setNumExecutionsInProgress(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMTIMESGLOBALINDEXLOOKUP:
+            statement.setNumTimesGlobalIndexLookup(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NUMROWSMODIFIED:
+            statement
+                .setNumRowsModified(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PARSETIME:
+            statement.setParseTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_BINDTIME:
+            statement.setBindTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_OPTIMIZETIME:
+            statement.setOptimizeTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_ROUTINGINFOTIME:
+            statement
+                .setRoutingInfoTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_GENERATETIME:
+            statement.setGenerateTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALCOMPILATIONTIME:
+            statement.setTotalCompilationTime(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_EXECUTIONTIME:
+            statement.setExecutionTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PROJECTIONTIME:
+            statement
+                .setProjectionTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_TOTALEXECUTIONTIME:
+            statement
+                .setTotalExecutionTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_ROWSMODIFICATIONTIME:
+            statement.setRowsModificationTime(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_QNNUMROWSSEEN:
+            statement.setqNNumRowsSeen(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_QNMSGSENDTIME:
+            statement.setqNMsgSendTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_QNMSGSERTIME:
+            statement.setqNMsgSerTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_QNRESPDESERTIME:
+            statement
+                .setqNRespDeSerTime(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
-   * function used to iterate through all member attributes and return the
-   * updated member
+   * function used to iterate through all member attributes and return the updated member
-  private Cluster.Member initializeMember(ObjectName mbeanName,
-      Cluster.Member member) throws InstanceNotFoundException,
-                                    ReflectionException, IOException {
+  private Cluster.Member initializeMember(ObjectName mbeanName, Cluster.Member member)
+      throws InstanceNotFoundException, ReflectionException, IOException {
-    AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-        PulseConstants.MEMBER_MBEAN_ATTRIBUTES);
+    AttributeList attributeList =
+        this.mbs.getAttributes(mbeanName, PulseConstants.MEMBER_MBEAN_ATTRIBUTES);
-      case PulseConstants.MBEAN_ATTRIBUTE_GEMFIREVERSION:
-        if (member.getGemfireVersion() == null) {
-          // Set Member's GemFire Version if not set already
-          String gemfireVersion = obtainGemfireVersion(getStringAttribute(
-              attribute.getValue(), attribute.getName()));
-          member.setGemfireVersion(gemfireVersion);
-        }
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_MANAGER:
-        member.setManager(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:
-        member.setTotalRegionCount(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_LOCATOR:
-        member.setLocator(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:
-        member.setTotalDiskUsage(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_SERVER:
-        member.setServer(getBooleanAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_TOTALFILEDESCRIPTOROPEN:
-        member.setTotalFileDescriptorOpen(getLongAttribute(
-            attribute.getValue(), attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_LOADAVERAGE:
-        member.setLoadAverage(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
-        member.setThroughputWrites(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getThroughputWritesTrend().add(member.getThroughputWrites());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
-        member.setThroughputReads(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getThroughputReadsTrend().add(member.getThroughputReads());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:
-        long trendVal = determineCurrentJVMPauses(
-            PulseConstants.JVM_PAUSES_TYPE_MEMBER, member.getName(),
-            getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.setGarbageCollectionCount(trendVal);
-        member.getGarbageCollectionSamples().add(
-            member.getGarbageCollectionCount());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_USEDMEMORY:
-        member.setCurrentHeapSize(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getHeapUsageSamples().add(member.getCurrentHeapSize());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_MAXMEMORY:
-        member.setMaxHeapSize(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_NUMTHREADS:
-        member.setNumThreads(getIntegerAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_MEMBERUPTIME:
-        member.setUptime(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_HOST:
-        member.setHost(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS:
-        member.setHostnameForClients(getStringAttribute(attribute.getValue(),
-                attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS:
-        member.setBindAddress(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_TOTALBYTESONDISK:
-        member.setTotalBytesOnDisk(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getTotalBytesOnDiskSamples().add(member.getTotalBytesOnDisk());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_CPUUSAGE:
-        member.setCpuUsage(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getCpuUsageSamples().add(member.getCpuUsage());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_HOSTCPUUSAGE:
-        // Float value is expected for host cpu usage.
-        // TODO Remove Float.valueOf() when float value is provided in mbean
-        member.setHostCpuUsage(Double.valueOf(getIntegerAttribute(
-            attribute.getValue(), attribute.getName())));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_MEMBER:
-        member.setName(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_ID:
-        member.setId(getStringAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:
-        member.setGetsRate(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getGetsPerSecond().add(member.getGetsRate());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:
-        member.setPutsRate(getDoubleAttribute(attribute.getValue(),
-            attribute.getName()));
-        member.getPutsPerSecond().add(member.getPutsRate());
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPFREESIZE:
-        member.setOffHeapFreeSize(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPUSEDSIZE:
-        member.setOffHeapUsedSize(getLongAttribute(attribute.getValue(),
-            attribute.getName()));
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_SERVERGROUPS:
-        String sgValues[] = (String[]) attribute.getValue();
-        member.getServerGroups().clear();
-        for (int k = 0; k < sgValues.length; k++) {
-          member.getServerGroups().add(sgValues[k]);
-        }
-        break;
-      case PulseConstants.MBEAN_ATTRIBUTE_REDUNDANCYZONES:
-        String rzValue = "";
-        if(null != attribute.getValue()){
-          rzValue = getStringAttribute(attribute.getValue(),
-              attribute.getName());
-        }
-        member.getRedundancyZones().clear();
-        if(!rzValue.isEmpty()){
-          member.getRedundancyZones().add(rzValue);
-        }
-        break;
+        case PulseConstants.MBEAN_ATTRIBUTE_GEMFIREVERSION:
+          if (member.getGemfireVersion() == null) {
+            // Set Member's GemFire Version if not set already
+            String gemfireVersion =
+                obtainGemfireVersion(getStringAttribute(attribute.getValue(), attribute.getName()));
+            member.setGemfireVersion(gemfireVersion);
+          }
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_MANAGER:
+          member.setManager(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:
+          member
+              .setTotalRegionCount(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_LOCATOR:
+          member.setLocator(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:
+          member.setTotalDiskUsage(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_SERVER:
+          member.setServer(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_TOTALFILEDESCRIPTOROPEN:
+          member.setTotalFileDescriptorOpen(
+              getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_LOADAVERAGE:
+          member.setLoadAverage(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
+          member.setThroughputWrites(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          member.getThroughputWritesTrend().add(member.getThroughputWrites());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
+          member.setThroughputReads(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          member.getThroughputReadsTrend().add(member.getThroughputReads());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:
+          long trendVal = determineCurrentJVMPauses(PulseConstants.JVM_PAUSES_TYPE_MEMBER,
+              member.getName(), getLongAttribute(attribute.getValue(), attribute.getName()));
+          member.setGarbageCollectionCount(trendVal);
+          member.getGarbageCollectionSamples().add(member.getGarbageCollectionCount());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_USEDMEMORY:
+          member.setCurrentHeapSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+          member.getHeapUsageSamples().add(member.getCurrentHeapSize());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_MAXMEMORY:
+          member.setMaxHeapSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_NUMTHREADS:
+          member.setNumThreads(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_MEMBERUPTIME:
+          member.setUptime(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_HOST:
+          member.setHost(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS:
+          member
+              .setHostnameForClients(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS:
+          member.setBindAddress(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_TOTALBYTESONDISK:
+          member.setTotalBytesOnDisk(getLongAttribute(attribute.getValue(), attribute.getName()));
+          member.getTotalBytesOnDiskSamples().add(member.getTotalBytesOnDisk());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_CPUUSAGE:
+          member.setCpuUsage(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          member.getCpuUsageSamples().add(member.getCpuUsage());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_HOSTCPUUSAGE:
+          // Float value is expected for host cpu usage.
+          // TODO Remove Float.valueOf() when float value is provided in mbean
+          member.setHostCpuUsage(
+              Double.valueOf(getIntegerAttribute(attribute.getValue(), attribute.getName())));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_MEMBER:
+          member.setName(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_ID:
+          member.setId(getStringAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:
+          member.setGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          member.getGetsPerSecond().add(member.getGetsRate());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:
+          member.setPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          member.getPutsPerSecond().add(member.getPutsRate());
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPFREESIZE:
+          member.setOffHeapFreeSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPUSEDSIZE:
+          member.setOffHeapUsedSize(getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_SERVERGROUPS:
+          String sgValues[] = (String[]) attribute.getValue();
+          member.getServerGroups().clear();
+          for (int k = 0; k < sgValues.length; k++) {
+            member.getServerGroups().add(sgValues[k]);
+          }
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_REDUNDANCYZONES:
+          String rzValue = "";
+          if (null != attribute.getValue()) {
+            rzValue = getStringAttribute(attribute.getValue(), attribute.getName());
+          }
+          member.getRedundancyZones().clear();
+          if (!rzValue.isEmpty()) {
+            member.getRedundancyZones().add(rzValue);
+          }
+          break;
-    if (PulseController.getPulseProductSupport().equalsIgnoreCase(
-        PulseConstants.PRODUCT_NAME_SQLFIRE)) {
+    if (PulseController.getPulseProductSupport()
+        .equalsIgnoreCase(PulseConstants.PRODUCT_NAME_SQLFIRE)) {
-        String memberName = mbeanName
-            .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+        String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-        ObjectName sfMemberMbeansObjectName = new ObjectName(
-            PulseConstants.OBJECT_NAME_SF_MEMBER_PATTERN + memberName);
+        ObjectName sfMemberMbeansObjectName =
+            new ObjectName(PulseConstants.OBJECT_NAME_SF_MEMBER_PATTERN + memberName);
-        Set<ObjectName> sfMemberMBeans = this.mbs.queryNames(
-            sfMemberMbeansObjectName, null);
+        Set<ObjectName> sfMemberMBeans = this.mbs.queryNames(sfMemberMbeansObjectName, null);
-          AttributeList attrList = this.mbs.getAttributes(sfMemberMBean,
-              PulseConstants.SF_MEMBER_MBEAN_ATTRIBUTES);
+          AttributeList attrList =
+              this.mbs.getAttributes(sfMemberMBean, PulseConstants.SF_MEMBER_MBEAN_ATTRIBUTES);
-            if (attribute.getName().equals(
-                PulseConstants.MBEAN_ATTRIBUTE_DATASTORE)) {
-              member.setServer(getBooleanAttribute(attribute.getValue(),
-                  attribute.getName()));
+            if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_DATASTORE)) {
+              member.setServer(getBooleanAttribute(attribute.getValue(), attribute.getName()));
-            } else if (attribute.getName().equals(
-                    PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {
+            } else if (attribute.getName()
+                .equals(PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {
-              member.setNumSqlfireClients(getLongAttribute(nscConnStats
-                  .get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),
+              member.setNumSqlfireClients(getLongAttribute(
+                  nscConnStats.get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),
-   * function used to get attribute values of Cluster Member and map them to
-   * cluster member vo
+   * function used to get attribute values of Cluster Member and map them to cluster member vo
-   * @param mbeanName
-   *          Cluster Member MBean
+   * @param mbeanName Cluster Member MBean
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-      ArrayList<Cluster.Member> memberArrList = (ArrayList<Cluster.Member>) cluster
-          .getPhysicalToMember().get(clusterMember.getHost());
+      ArrayList<Cluster.Member> memberArrList =
+          (ArrayList<Cluster.Member>) cluster.getPhysicalToMember().get(clusterMember.getHost());
-   * function used to handle Float data type if the value for mbean for an
-   * attribute is null then return 0.0 as default value else return the
-   * attribute value
+   * function used to handle Float data type if the value for mbean for an attribute is null then
+   * return 0.0 as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + Float.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + Float.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to handle Integer data type if the value for mbean for an
-   * attribute is null then return 0 as default value else return the attribute
-   * value
+   * function used to handle Integer data type if the value for mbean for an attribute is null then
+   * return 0 as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + Integer.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + Integer.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to handle Long data type if the value for mbean for an
-   * attribute is null then return 0 as default value else return the attribute
-   * value
+   * function used to handle Long data type if the value for mbean for an attribute is null then
+   * return 0 as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + Long.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + Long.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to handle String data type if the value for mbean for an
-   * attribute is null then return the empty string as default value else return
-   * the attribute value
+   * function used to handle String data type if the value for mbean for an attribute is null then
+   * return the empty string as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + String.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + String.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to handle Boolean data type if the value for mbean for an
-   * attribute is null then return false as default value else return the
-   * attribute value
+   * function used to handle Boolean data type if the value for mbean for an attribute is null then
+   * return false as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + Boolean.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + Boolean.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to handle Double data type if the value for mbean for an
-   * attribute is null then return 0.0 as default value else return the
-   * attribute value
+   * function used to handle Double data type if the value for mbean for an attribute is null then
+   * return 0.0 as default value else return the attribute value
-          LOGGER.info("************************Unexpected type for attribute: "
-              + name + " Expected type: " + Double.class.getName()
-              + " Received type: " + object.getClass().getName()
-              + "************************");
+          LOGGER.info("************************Unexpected type for attribute: " + name
+              + " Expected type: " + Double.class.getName() + " Received type: "
+              + object.getClass().getName() + "************************");
-   * function used to get attribute values of Member Region and map them to
-   * Member vo
+   * function used to get attribute values of Member Region and map them to Member vo
-   * @param mbeanName
-   *          Member Region MBean
+   * @param mbeanName Member Region MBean
-      String memberName = mbeanName
-          .getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
+      String memberName = mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);
-      //Following attributes are not present in 9.0
-      //"Members"
-      //"EmptyNodes"
-      //"SystemRegionEntryCount"
-      //"MemberCount"
-      AttributeList attributeList = this.mbs.getAttributes(mbeanName,
-          PulseConstants.REGION_MBEAN_ATTRIBUTES);
+      // Following attributes are not present in 9.0
+      // "Members"
+      // "EmptyNodes"
+      // "SystemRegionEntryCount"
+      // "MemberCount"
+      AttributeList attributeList =
+          this.mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
-          regionFullPathKey = getStringAttribute(attribute.getValue(),
-              attribute.getName());
+          regionFullPathKey = getStringAttribute(attribute.getValue(), attribute.getName());
-        switch (name){
-        case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:
-          region.setFullPath(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
-          region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
-          region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:
-          region.setGetsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:
-          region.setLruEvictionRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:
-          region.setPutsRate(getDoubleAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:
-          region.setRegionType(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
-          region.setMemberCount(getIntegerAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:
-          region.setEntrySize(getLongAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_ENTRYCOUNT:
-          region.setSystemRegionEntryCount(getLongAttribute(
-              attribute.getValue(), attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_NAME:
-          region.setName(getStringAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:
-          region.setPersistentEnabled(getBooleanAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
-        case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:
-          region.setWanEnabled(getBooleanAttribute(attribute.getValue(),
-              attribute.getName()));
-          break;
+        switch (name) {
+          case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:
+            region.setFullPath(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:
+            region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:
+            region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:
+            region.setGetsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:
+            region
+                .setLruEvictionRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:
+            region.setPutsRate(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:
+            region.setRegionType(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:
+            region.setMemberCount(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:
+            region.setEntrySize(getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_ENTRYCOUNT:
+            region.setSystemRegionEntryCount(
+                getLongAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_NAME:
+            region.setName(getStringAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:
+            region.setPersistentEnabled(
+                getBooleanAttribute(attribute.getValue(), attribute.getName()));
+            break;
+          case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:
+            region.setWanEnabled(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+            break;
-      /* GemfireXD related code
-      try{// Added for Rolling upgrade changes. Needs to removed once Rolling upgrade handled gracefully
-    	  CompositeData compositeData = (CompositeData) (this.mbs.invoke(mbeanName,
-    	          PulseConstants.MBEAN_OPERATION_LISTREGIONATTRIBUTES, null, null));
-
-    	      if (compositeData != null) {
-    	        if (compositeData.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SCOPE)) {
-    	          region.setScope((String) compositeData
-    	              .get(PulseConstants.COMPOSITE_DATA_KEY_SCOPE));
-    	        } else if (compositeData
-    	            .containsKey(PulseConstants.COMPOSITE_DATA_KEY_DISKSTORENAME)) {
-    	          region.setDiskStoreName((String) compositeData
-    	              .get(PulseConstants.COMPOSITE_DATA_KEY_DISKSTORENAME));
-    	        } else if (compositeData
-    	            .containsKey(PulseConstants.COMPOSITE_DATA_KEY_DISKSYNCHRONOUS)) {
-    	          region.setDiskSynchronous((Boolean) compositeData
-    	              .get(PulseConstants.COMPOSITE_DATA_KEY_DISKSYNCHRONOUS));
-    	        }
-    	      }
-      }catch (MBeanException anfe) {
-          LOGGER.warning(anfe);
-      }catch (javax.management.RuntimeMBeanException anfe) {
-          region.setScope("");
-          region.setDiskStoreName("");
-          region.setDiskSynchronous(false);
-          //LOGGER.warning("Some of the Pulse elements are not available currently. There might be a GemFire upgrade going on.");
-      }
-
-
-      // Remove deleted regions from member's regions list
-      for (Iterator<String> it = cluster.getDeletedRegions().iterator(); it
-          .hasNext();) {
-        String deletedRegion = it.next();
-        if (member.getMemberRegions().get(deletedRegion) != null) {
-          member.getMemberRegions().remove(deletedRegion);
-        }
-        member.setTotalRegionCount(member.getMemberRegions().size());
-      }*/
+      /*
+       * GemfireXD related code try{// Added for Rolling upgrade changes. Needs to removed once
+       * Rolling upgrade handled gracefully CompositeData compositeData = (CompositeData)
+       * (this.mbs.invoke(mbeanName, PulseConstants.MBEAN_OPERATION_LISTREGIONATTRIBUTES, null,
+       * null));
+       * 
+       * if (compositeData != null) { if
+       * (compositeData.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SCOPE)) {
+       * region.setScope((String) compositeData .get(PulseConstants.COMPOSITE_DATA_KEY_SCOPE)); }
+       * else if (compositeData .containsKey(PulseConstants.COMPOSITE_DATA_KEY_DISKSTORENAME)) {
+       * region.setDiskStoreName((String) compositeData
+       * .get(PulseConstants.COMPOSITE_DATA_KEY_DISKSTORENAME)); } else if (compositeData
+       * .containsKey(PulseConstants.COMPOSITE_DATA_KEY_DISKSYNCHRONOUS)) {
+       * region.setDiskSynchronous((Boolean) compositeData
+       * .get(PulseConstants.COMPOSITE_DATA_KEY_DISKSYNCHRONOUS)); } } }catch (MBeanException anfe)
+       * { LOGGER.warning(anfe); }catch (javax.management.RuntimeMBeanException anfe) {
+       * region.setScope(""); region.setDiskStoreName(""); region.setDiskSynchronous(false);
+       * //LOGGER.
+       * warning("Some of the Pulse elements are not available currently. There might be a GemFire upgrade going on."
+       * ); }
+       * 
+       * 
+       * // Remove deleted regions from member's regions list for (Iterator<String> it =
+       * cluster.getDeletedRegions().iterator(); it .hasNext();) { String deletedRegion = it.next();
+       * if (member.getMemberRegions().get(deletedRegion) != null) {
+       * member.getMemberRegions().remove(deletedRegion); }
+       * member.setTotalRegionCount(member.getMemberRegions().size()); }
+       */
-      }else if(alertDescription.startsWith("[severe")) {
+      } else if (alertDescription.startsWith("[severe")) {
-    }else{
+    } else {
-      if(PulseConstants.NOTIFICATION_TYPE_REGION_DESTROYED.equals(type)){
+      if (PulseConstants.NOTIFICATION_TYPE_REGION_DESTROYED.equals(type)) {
-        String deletedRegion = msg.substring(msg.indexOf("Name ")+"Name ".length());
+        String deletedRegion = msg.substring(msg.indexOf("Name ") + "Name ".length());
-      Object opParams[] = { queryText, members, limit };
+      Object opParams[] = {queryText, members, limit};
-              PulseConstants.MBEAN_OPERATION_QUERYDATABROWSER, opParams,
-              this.opSignature));
+              PulseConstants.MBEAN_OPERATION_QUERYDATABROWSER, opParams, this.opSignature));
-  private long determineCurrentJVMPauses(String type, String key,
-      long totalJVMPauses) {
+  private long determineCurrentJVMPauses(String type, String key, long totalJVMPauses) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66