GEODE-6273: add group to jdbc-mapping create and describe (#3100)

gfsh create jdbc-mapping and describe jdbc-mapping now have a --group option.

Co-authored-by: Scott Jewell <sjewell@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>
Co-authored-by: Ben Ross <bross@pivotal.io>

+import static org.apache.geode.connectors.util.internal.MappingConstants.CATALOG_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.DATA_SOURCE_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.ID_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.PDX_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.SCHEMA_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.SYNCHRONOUS_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.TABLE_NAME;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.ConfigurationPersistenceService;
+import org.apache.geode.management.cli.ConverterHint;
-import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
+  private static final String CREATE_MAPPING__GROUPS_NAME__HELP =
+      "Server Group(s) of the JDBC mapping to be described.";
-      mandatory = true, help = DESCRIBE_MAPPING__REGION_NAME__HELP) String regionName) {
+      mandatory = true, help = DESCRIBE_MAPPING__REGION_NAME__HELP) String regionName,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
-    DescribeMappingResult describeMappingResult = null;
+    ArrayList<DescribeMappingResult> describeMappingResults = new ArrayList<>();
-    Set<DistributedMember> members = findMembers(null, null);
-    if (members.size() > 0) {
-      DistributedMember targetMember = members.iterator().next();
-      CliFunctionResult result = executeFunctionAndGetFunctionResult(
-          new DescribeMappingFunction(), regionName, targetMember);
-      if (result != null) {
-        describeMappingResult = (DescribeMappingResult) result.getResultObject();
+    try {
+      ConfigurationPersistenceService configService = checkForClusterConfiguration();
+      if (groups == null) {
+        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
-    } else {
-      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+      for (String group : groups) {
+        CacheConfig cacheConfig = getCacheConfig(configService, group);
+        RegionConfig regionConfig = checkForRegion(regionName, cacheConfig, group);
+        describeMappingResults
+            .addAll(getMappingsFromRegionConfig(cacheConfig, regionConfig, group));
+      }
+    } catch (PreconditionException ex) {
+      return ResultModel.createError(ex.getMessage());
-    if (describeMappingResult == null) {
+    if (describeMappingResults.isEmpty()) {
-    ResultModel resultModel = new ResultModel();
-    fillResultData(describeMappingResult, resultModel);
+    ResultModel resultModel = buildResultModel(describeMappingResults);
-  private void fillResultData(DescribeMappingResult describeMappingResult,
-      ResultModel resultModel) {
-    DataResultModel sectionModel = resultModel.addData(RESULT_SECTION_NAME);
-    describeMappingResult.getAttributeMap().forEach(sectionModel::addData);
+  private CacheConfig getCacheConfig(ConfigurationPersistenceService configService, String group)
+      throws PreconditionException {
+    CacheConfig result = configService.getCacheConfig(group);
+    if (result == null) {
+      throw new PreconditionException(
+          "Cache Configuration not found"
+              + ((group.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)) ? "."
+                  : " for group " + group + "."));
+    }
+    return result;
+  }
+
+  private ArrayList<DescribeMappingResult> getMappingsFromRegionConfig(CacheConfig cacheConfig,
+      RegionConfig regionConfig, String group) {
+    CacheConfig.AsyncEventQueue asyncEventQueue = findAsyncEventQueue(cacheConfig, regionConfig);
+    ArrayList<DescribeMappingResult> results = new ArrayList<>();
+    for (CacheElement element : regionConfig.getCustomRegionElements()) {
+      if (element instanceof RegionMapping) {
+        results.add(buildDescribeMappingResult((RegionMapping) element, regionConfig.getName(),
+            asyncEventQueue == null, group));
+      }
+    }
+    return results;
+  }
+
+  private CacheConfig.AsyncEventQueue findAsyncEventQueue(CacheConfig cacheConfig,
+      RegionConfig regionConfig) {
+    for (CacheConfig.AsyncEventQueue queue : cacheConfig.getAsyncEventQueues()) {
+      if (queue.getId()
+          .equals(CreateMappingCommand.createAsyncEventQueueName(regionConfig.getName()))) {
+        return queue;
+      }
+    }
+    return null;
+  }
+
+  private DescribeMappingResult buildDescribeMappingResult(RegionMapping regionMapping,
+      String regionName, boolean synchronous, String group) {
+    LinkedHashMap<String, String> attributes = new LinkedHashMap<>();
+    attributes.put(REGION_NAME, regionName);
+    attributes.put(PDX_NAME, regionMapping.getPdxName());
+    attributes.put(TABLE_NAME, regionMapping.getTableName());
+    attributes.put(DATA_SOURCE_NAME, regionMapping.getDataSourceName());
+    attributes.put(SYNCHRONOUS_NAME, Boolean.toString(synchronous));
+    attributes.put(ID_NAME, regionMapping.getIds());
+    if (regionMapping.getCatalog() != null) {
+      attributes.put(CATALOG_NAME, regionMapping.getCatalog());
+    }
+    if (regionMapping.getSchema() != null) {
+      attributes.put(SCHEMA_NAME, regionMapping.getSchema());
+    }
+    DescribeMappingResult result = new DescribeMappingResult(attributes);
+    result.setGroupName(group);
+    return result;
+  }
+
+  private ResultModel buildResultModel(ArrayList<DescribeMappingResult> describeMappingResult) {
+    ResultModel resultModel = new ResultModel();
+    for (int i = 0; i < describeMappingResult.size(); i++) {
+      DataResultModel sectionModel = resultModel.addData(RESULT_SECTION_NAME + String.valueOf(i));
+      DescribeMappingResult result = describeMappingResult.get(i);
+      if (!result.getGroupName().equals(ConfigurationPersistenceService.CLUSTER_CONFIG)) {
+        sectionModel.addData("Mapping for group", result.getGroupName());
+      }
+      result.getAttributeMap().forEach(sectionModel::addData);
+    }
+    return resultModel;
+  }
+
+  public ConfigurationPersistenceService checkForClusterConfiguration()
+      throws PreconditionException {
+    ConfigurationPersistenceService result = getConfigurationPersistenceService();
+    if (result == null) {
+      throw new PreconditionException("Cluster Configuration must be enabled.");
+    }
+    return result;
+  }
+
+  private RegionConfig checkForRegion(String regionName, CacheConfig cacheConfig, String groupName)
+      throws PreconditionException {
+    RegionConfig regionConfig = findRegionConfig(cacheConfig, regionName);
+    if (regionConfig == null) {
+      String groupClause = "A region named " + regionName + " must already exist"
+          + (!groupName.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)
+              ? " for group " + groupName + "." : ".");
+      throw new PreconditionException(groupClause);
+    }
+    return regionConfig;
+  }
+
+  private RegionConfig findRegionConfig(CacheConfig cacheConfig, String regionName) {
+    return cacheConfig.getRegions().stream()
+        .filter(region -> region.getName().equals(regionName)).findFirst().orElse(null);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 MOV77 MOV77 MOV77 MOV83 MOV43 MOV42 MOV44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS8 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS77 INS5 INS42 MOV25 MOV60 INS54 MOV25 INS60 MOV21 MOV41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS70 INS41 INS40 INS43 INS42 INS43 INS42 INS70 INS41 UPD42 MOV42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 MOV25 INS25 INS60 MOV21 INS41 INS42 INS74 MOV60 INS24 INS41 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS80 INS80 INS80 INS43 INS85 INS74 INS8 INS12 INS32 MOV43 MOV59 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS43 MOV59 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS44 INS32 INS8 INS33 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS27 MOV8 MOV43 INS59 INS42 INS43 INS43 INS58 INS27 INS37 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS4 INS42 INS40 INS42 INS42 INS42 INS43 INS43 UPD42 INS14 INS60 INS25 INS70 INS44 INS8 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS33 INS53 INS40 UPD42 INS43 INS43 UPD42 MOV42 INS14 INS43 INS42 INS42 INS42 INS25 INS43 INS42 INS42 INS42 INS25 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS21 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS39 INS59 INS42 INS32 INS42 MOV60 INS60 INS25 MOV21 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS32 INS42 INS33 INS40 INS40 INS42 INS42 INS74 INS43 INS59 INS27 INS8 INS44 INS42 INS8 INS43 INS42 INS41 INS42 UPD42 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 INS74 INS42 INS62 INS8 INS40 INS32 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS42 INS42 INS34 INS42 INS42 MOV43 INS59 INS38 INS8 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS14 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS60 INS60 INS21 INS42 INS32 INS43 INS27 INS43 INS42 INS43 INS21 INS32 INS42 INS32 INS41 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS21 INS43 INS45 INS42 INS42 INS27 INS43 INS42 INS32 INS42 INS86 INS42 INS42 INS7 UPD42 MOV42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS45 INS36 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS42 INS32 INS42 INS40 INS32 UPD42 INS42 INS45 INS42 INS45 INS36 INS42 INS32 INS42 INS59 INS32 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS45 INS27 UPD42 MOV42 INS11 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS27 INS45 INS42 INS42 INS43 INS85 INS40 INS32 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS33 INS32 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS40 DEL33 DEL42 DEL33 DEL27 DEL33 DEL33 DEL32 DEL42 DEL42 DEL32 DEL11 DEL7 DEL40 DEL32 DEL41 DEL43 DEL43 DEL74 DEL60 DEL32 DEL34 DEL27 DEL43 DEL60 DEL43 DEL43 DEL14 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL44 DEL8