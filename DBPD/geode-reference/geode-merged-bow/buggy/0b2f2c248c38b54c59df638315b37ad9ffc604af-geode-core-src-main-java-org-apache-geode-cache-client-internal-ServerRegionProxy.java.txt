GEODE-6798: Refactor client function execution (#3745)

GEODE-6798: Refactoring of client function execution logic

+import java.util.Collections;
+import java.util.function.Supplier;
+    final ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl executeRegionFunctionOp =
+        new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(rgnName, function,
+            serverRegionExecutor, resultCollector, timeoutMs);
+
+
+        final Supplier<AbstractOp> executeRegionFunctionOpSupplier =
+            () -> new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(region.getFullPath(),
+                function,
+                serverRegionExecutor, resultCollector, timeoutMs);
+
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts,
+                function.isHA(),
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-                serverRegionExecutor, resultCollector, hasResult, serverToBuckets, retryAttempts,
-                true, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), function,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), true, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToBuckets, retryAttempts,
+                function.isHA(), regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts,
+                function.isHA(),
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-                serverRegionExecutor, resultCollector, hasResult, serverToFilterMap, retryAttempts,
-                isBucketFilter, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), function,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), isBucketFilter, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToFilterMap, retryAttempts,
+                function.isHA(),
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-        ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-            resultCollector, hasResult, retryAttempts, timeoutMs);
+        ExecuteRegionFunctionOp.execute(pool,
+            resultCollector, retryAttempts,
+            function.isHA(),
+            executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-          resultCollector, hasResult, retryAttempts, timeoutMs);
+      ExecuteRegionFunctionOp.execute(pool,
+          resultCollector, retryAttempts,
+          function.isHA(),
+          executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
-      byte hasResult, boolean isHA, boolean optimizeForWrite, boolean replaying,
+      ServerRegionFunctionExecutor serverRegionExecutor,
+      ResultCollector resultCollector,
+      byte hasResult, boolean isHA, boolean optimizeForWrite,
+      boolean replaying,
+
+    final ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl executeRegionFunctionOp =
+        new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(rgnName, functionId,
+            serverRegionExecutor, resultCollector, hasResult, isHA, optimizeForWrite,
+            true, timeoutMs);
+
+
+        final Supplier<AbstractOp> executeRegionFunctionOpSupplier =
+            () -> new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(region.getFullPath(),
+                functionId,
+                serverRegionExecutor, resultCollector, hasResult, isHA,
+                optimizeForWrite, true, timeoutMs);
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts, isHA,
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-                serverRegionExecutor, resultCollector, hasResult, serverToBuckets, retryAttempts,
-                true, isHA, optimizeForWrite, timeoutMs);
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor1 -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), functionId,
+                    executor1, resultCollector,
+                    hasResult, new HashSet<>(), true, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToBuckets, retryAttempts,
+                isHA,
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts, isHA,
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-                serverRegionExecutor, resultCollector, hasResult, serverToFilterMap, retryAttempts,
-                false, isHA, optimizeForWrite, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), functionId,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), false, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToFilterMap, retryAttempts,
+                isHA,
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-        ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-            resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+        ExecuteRegionFunctionOp.execute(pool,
+            resultCollector, retryAttempts, isHA,
+            executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-          resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+      ExecuteRegionFunctionOp.execute(pool,
+          resultCollector, retryAttempts, isHA,
+          executeRegionFunctionOp, false, Collections.EMPTY_SET);

INS26 INS26 INS40 INS40 INS60 INS60 INS83 INS43 INS59 INS83 INS43 INS59 INS40 INS42 INS14 INS40 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS8 INS8 INS40 INS60 UPD42 UPD42 INS32 UPD42 INS9 INS40 INS40 INS60 INS25 MOV21 INS21 UPD42 INS9 INS40 INS83 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS83 INS74 INS59 MOV32 INS8 INS8 INS32 INS43 INS43 INS42 INS86 UPD42 UPD42 INS32 UPD42 INS9 INS40 INS43 INS43 INS42 INS86 MOV60 INS25 MOV60 MOV60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS40 INS42 INS42 INS14 INS8 INS8 INS8 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 MOV27 INS8 INS8 MOV27 INS8 INS8 INS43 INS32 INS42 INS42 INS42 INS42 INS21 MOV21 INS60 MOV21 INS21 INS21 INS60 MOV21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 MOV21 MOV21 INS60 MOV21 INS21 MOV21 INS60 MOV21 INS40 INS42 INS42 INS32 INS83 INS74 INS59 INS32 INS32 INS83 INS74 INS59 INS40 UPD42 MOV42 UPD42 MOV42 INS83 INS74 INS59 INS32 INS83 INS74 INS59 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS9 INS40 INS43 INS43 INS43 INS42 INS86 INS32 INS42 INS42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS9 INS40 INS42 INS42 INS42 INS9 INS43 INS43 INS43 INS42 INS86 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS40 INS43 INS43 INS43 INS42 INS86 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS9 INS40 INS43 INS43 INS43 INS42 INS86 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS59 INS14 UPD42 MOV42 INS42 MOV42 INS42 INS40 INS42 INS42 INS59 INS14 INS42 UPD42 MOV42 INS40 INS42 INS42 INS59 INS14 INS40 INS42 INS42 INS59 INS14 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS14 INS9 INS42 INS42 INS42 INS40 INS42 INS42 INS74 INS40 INS42 INS42 INS74 INS40 MOV42 INS42 INS74 INS40 MOV42 INS42 INS74 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42