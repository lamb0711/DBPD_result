GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500

-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.apache.shiro.subject.Subject;
-import org.springframework.shell.core.CommandMarker;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.shiro.subject.Subject;
+import org.springframework.shell.core.CommandMarker;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.StringTokenizer;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
-    List<Future<Result>> commandResult = new ArrayList<Future<Result>>();
-    Result result = null;
+    List<Future<Result>> commandResult = new ArrayList<>();
+    Result result;
-        RebalanceOperation op = null;
+        RebalanceOperation op;
-        if (includeRegions != null && includeRegions.length > 0) {
-          CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
+        if (ArrayUtils.isNotEmpty(includeRegions)) {
+          CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
-            regionName = regionName.startsWith("/") == true ? regionName : ("/" + regionName);
+            regionName = regionName.startsWith("/") ? regionName : ("/" + regionName);
-              Set<String> setRegionName = new HashSet<String>();
+              Set<String> setRegionName = new HashSet<>();
-              Set<String> excludeRegionSet = new HashSet<String>();
-              if (excludeRegions != null && excludeRegions.length > 0) {
-
-                for (String str : excludeRegions) {
-                  excludeRegionSet.add(str);
-                }
+              Set<String> excludeRegionSet = new HashSet<>();
+              if (ArrayUtils.isNotEmpty(excludeRegions)) {
+                Collections.addAll(excludeRegionSet, excludeRegions);
-              if (simulate == true) {
-                List resultList = null;
+              if (simulate) {
+                List resultList;
-                  rebalanceResulteData.addSection()
+                  rebalanceResultData.addSection()
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, member)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, true, cache));
-                List resultList = null;
+                List resultList;
-                  rebalanceResulteData.addSection()
+                  rebalanceResultData.addSection()
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, member)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, false, cache));
+
-              Set<String> excludeRegionSet = new HashSet<String>();
+              Set<String> excludeRegionSet = new HashSet<>();
-                for (String excludeRegion : excludeRegions)
-                  excludeRegionSet.add(excludeRegion);
+                Collections.addAll(excludeRegionSet, excludeRegions);
-              Set<String> includeRegionSet = new HashSet<String>();
+              Set<String> includeRegionSet = new HashSet<>();
-              if (simulate == true) {
+              if (simulate) {
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
-                    op.getResults(), index, simulate, cache));
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
+                    op.getResults(), index, true, cache));
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
-                    op.getResults(), index, simulate, cache));
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
+                    op.getResults(), index, false, cache));
-  List<String> tokenize(String str, String separator) {
+  private List<String> tokenize(String str, String separator) {
-    List<String> rstList = new ArrayList<String>();
+    List<String> rstList = new ArrayList<>();
-  boolean checkResultList(CompositeResultData rebalanceResulteData, List resultList,
+  private boolean checkResultList(CompositeResultData rebalanceResultData, List resultList,
-    if (resultList != null && !resultList.isEmpty()) {
-      for (int i = 0; i < resultList.size(); i++) {
-        Object object = resultList.get(i);
+    if (CollectionUtils.isNotEmpty(resultList)) {
+      for (Object object : resultList) {
-          rebalanceResulteData.addSection().addData(
+          rebalanceResultData.addSection().addData(
-          rebalanceResulteData.addSection().addData(
+          rebalanceResultData.addSection().addData(
-      rebalanceResulteData.addSection().addData("Rebalancing for member=" + member.getId(),
+      rebalanceResultData.addSection().addData("Rebalancing for member=" + member.getId(),
-  Result executeRebalanceOnDS(InternalCache cache, String simulate, String[] excludeRegionsList) {
+  private Result executeRebalanceOnDS(InternalCache cache, String simulate,
+      String[] excludeRegionsList) {
-    CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
-    List<String> listExcludedRegion = new ArrayList<String>();
+    CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
+    List<String> listExcludedRegion = new ArrayList<>();
-      for (String str : excludeRegionsList) {
-        listExcludedRegion.add(str);
-      }
+      Collections.addAll(listExcludedRegion, excludeRegionsList);
-    if (flagToContinueWithRebalance == false) {
+    if (!flagToContinueWithRebalance) {
-    Iterator<MemberPRInfo> it1 = listMemberRegion.iterator();
-    while (it1.hasNext() && flagToContinueWithRebalance) {
+    for (MemberPRInfo memberPR : listMemberRegion) {
-        MemberPRInfo memberPR = (MemberPRInfo) it1.next();
-        // check if there are more than one members associated with region for
-        // rebalancing
+        // check if there are more than one members associated with region for rebalancing
-            Set<String> regionSet = new HashSet<String>();
+            Set<String> regionSet = new HashSet<>();
-            Set<String> excludeRegionSet = new HashSet<String>();
+            Set<String> excludeRegionSet = new HashSet<>();
-                if (checkResultList(rebalanceResulteData, resultList, dsMember) == true) {
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                if (checkResultList(rebalanceResultData, resultList, dsMember)) {
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                    (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                    (ArrayList) rstList, index, simulate.equals("true"), cache));
-                // Rebalancing for region is done so break and continue with
-                // other region
+                // Rebalancing for region is done so break and continue with other region
-                  rebalanceResulteData.addSection().addData(
+                  rebalanceResultData.addSection().addData(
-                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  result = ResultBuilder.buildResult(rebalanceResultData);
-                rebalanceResulteData.addSection().addData(
+                rebalanceResultData.addSection().addData(
-                result = ResultBuilder.buildResult(rebalanceResulteData);
+                result = ResultBuilder.buildResult(rebalanceResultData);
-            if (checkResultList(rebalanceResulteData, resultList, dsMember) == true) {
-              result = ResultBuilder.buildResult(rebalanceResulteData);
+            if (checkResultList(rebalanceResultData, resultList, dsMember)) {
+              result = ResultBuilder.buildResult(rebalanceResultData);
-            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
-                (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
+            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
+                (ArrayList) rstList, index, simulate.equals("true"), cache));
-    if (rstlist.size() > resultItemCount && rstlist.get(resultItemCount) != null
-        && rstlist.get(resultItemCount).length() > 0) {
+    if (rstlist.size() > resultItemCount && StringUtils.isNotEmpty(rstlist.get(resultItemCount))) {
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = " + rstlist.get(0));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+          .append(rstlist.get(0)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = " + rstlist.get(1));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+          .append(rstlist.get(1)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = " + rstlist.get(2));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+          .append(rstlist.get(2)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = " + rstlist.get(3));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+          .append(rstlist.get(3)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = " + rstlist.get(4));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+          .append(rstlist.get(4)).append(newLine);
-      resultStr.append(
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = " + rstlist.get(5));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(5)).append(newLine);
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = " + rstlist.get(6));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+          .append(rstlist.get(6)).append(newLine);
-      resultStr.append(
-          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = " + rstlist.get(7));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(7)).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + rstlist.get(8));
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ").append(rstlist.get(8))
+          .append(newLine);
-      String headerText = null;
+      String headerText;
-  CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResulteData,
+  private CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResultData,
-    if (regions.size() > 0 && ((PartitionRebalanceInfo) iterator.next()).getRegionPath() != null
-        && ((PartitionRebalanceInfo) iterator.next()).getRegionPath().length() > 0) {
+    if (regions.size() > 0
+        && StringUtils.isNotEmpty(((PartitionRebalanceInfo) iterator.next()).getRegionPath())) {
-          rebalanceResulteData.addSection().addTable("Table" + index);
+          rebalanceResultData.addSection().addTable("Table" + index);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = "
-          + results.getTotalBucketCreateBytes());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+          .append(results.getTotalBucketCreateBytes()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = "
-          + results.getTotalBucketCreateTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+          .append(results.getTotalBucketCreateTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = "
-          + results.getTotalBucketCreatesCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+          .append(results.getTotalBucketCreatesCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = "
-          + results.getTotalBucketTransferBytes());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+          .append(results.getTotalBucketTransferBytes()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = "
-          + results.getTotalBucketTransferTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+          .append(results.getTotalBucketTransferTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = "
-          + results.getTotalBucketTransfersCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+          .append(results.getTotalBucketTransfersCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = "
-          + results.getTotalPrimaryTransferTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+          .append(results.getTotalPrimaryTransferTime()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = "
-          + results.getTotalPrimaryTransfersCompleted());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+          .append(results.getTotalPrimaryTransfersCompleted()).append(newLine);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + results.getTotalTime());
-      resultStr.append(newLine);
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ")
+          .append(results.getTotalTime()).append(newLine);
-      String headerText = null;
+      String headerText;
-    return rebalanceResulteData;
+    return rebalanceResultData;
-      return member;
+      return null;
-      while (it.hasNext() && matchFound == false) {
+      while (it.hasNext() && !matchFound) {
-  List<MemberPRInfo> getMemberRegionList(InternalCache cache, List<String> listExcludedRegion) {
-    List<MemberPRInfo> listMemberPRInfo = new ArrayList<MemberPRInfo>();
+  private List<MemberPRInfo> getMemberRegionList(InternalCache cache,
+      List<String> listExcludedRegion) {
+    List<MemberPRInfo> listMemberPRInfo = new ArrayList<>();
-      Iterator<String> it = listExcludedRegion.iterator();
-      while (it.hasNext()) {
+      for (String aListExcludedRegion : listExcludedRegion) {
-        String excludedRegion = it.next().trim();
+        String excludedRegion = aListExcludedRegion.trim();
-      if (excludedRegionMatch == true) {
+      if (excludedRegionMatch) {
-    Result result = null;
+    Result result;
-      @CliOption(key = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS, mandatory = false,
-          unspecifiedDefaultValue = "false",
+      @CliOption(key = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS, unspecifiedDefaultValue = "false",
-    Result result = null;
+    Result result;
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
-    if (regionPath == null || regionPath.isEmpty()) {
+    DataCommandResult dataResult;
+    if (StringUtils.isEmpty(regionPath)) {
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createPutResult(key, null, null,
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createPutResult(key, null, null,
+    }
-    if (value == null || value.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createPutResult(value, null,
-          null, CliStrings.PUT__MSG__VALUE_EMPTY, false));
+    if (StringUtils.isEmpty(value)) {
+      return makePresentationResult(DataCommandResult.createPutResult(value, null, null,
+          CliStrings.PUT__MSG__VALUE_EMPTY, false));
+    }
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-      } else
+      } else {
+      }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-    if (dataResult != null)
+    if (dataResult != null) {
-    else
+    } else {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createGetResult(key, null, null,
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createGetResult(key, null, null,
+    }
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-          request.setPrincipal((Serializable) subject.getPrincipal());
+          request.setPrincipal(subject.getPrincipal());
-      } else
+      } else {
+      }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
-          null, null, CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createLocateEntryResult(key, null, null,
+          CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
-    if (key == null || key.isEmpty())
-      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
-          null, null, CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
+    if (StringUtils.isEmpty(key)) {
+      return makePresentationResult(DataCommandResult.createLocateEntryResult(key, null, null,
+          CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
+    }
-    if (memberList != null && memberList.size() > 0) {
+    if (CollectionUtils.isNotEmpty(memberList)) {
-    } else
+    } else {
+    }
-    if (valueClass != null)
+    if (valueClass != null) {
+    }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-    DataCommandResult dataResult = null;
+    DataCommandResult dataResult;
-    if (regionPath == null || regionPath.isEmpty()) {
-      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
-          null, CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
+    if (StringUtils.isEmpty(regionPath)) {
+      return makePresentationResult(DataCommandResult.createRemoveResult(key, null, null,
+          CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
-          null, CliStrings.REMOVE__MSG__KEY_EMPTY, false));
+      return makePresentationResult(DataCommandResult.createRemoveResult(null, null, null,
+          CliStrings.REMOVE__MSG__KEY_EMPTY, false));
-      if (memberList != null && memberList.size() > 0) {
+      if (CollectionUtils.isNotEmpty(memberList)) {
-      } else
+      } else {
+      }
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-      @CliOption(key = CliStrings.QUERY__STEPNAME, mandatory = false, help = "Step name",
+      @CliOption(key = CliStrings.QUERY__STEPNAME, help = "Step name",
-      @CliOption(key = CliStrings.QUERY__INTERACTIVE, mandatory = false,
-          help = CliStrings.QUERY__INTERACTIVE__HELP,
+      @CliOption(key = CliStrings.QUERY__INTERACTIVE, help = CliStrings.QUERY__INTERACTIVE__HELP,
-      region = new String();
-      dsMemberList = new ArrayList<DistributedMember>();
+      region = "";
+      dsMemberList = new ArrayList<>();
-      if (o2 == null) {
-        return false;
-      }
-      if (this.region.equals(((MemberPRInfo) o2).region)) {
-        return true;
-      }
-      return false;
+      return o2 != null && this.region.equals(((MemberPRInfo) o2).region);
-      for (int i = 0; i < list.size(); i++) {
-        Object object = list.get(i);
+      for (Object object : list) {
-    Set<DistributedMember> members = null;
+    Set<DistributedMember> members;
-    String region = (String) iterator.next();
+    String region = iterator.next();
-    if (logger.fineEnabled())
+    if (logger.fineEnabled()) {
-    List<String> regionAndingList = new ArrayList<String>();
+    }
+    List<String> regionAndingList = new ArrayList<>();
-      if (members != null && !members.isEmpty()) {
+      if (CollectionUtils.isNotEmpty(members)) {
-            newMembers = new HashSet<DistributedMember>();
+            newMembers = new HashSet<>();
-          if (logger.fineEnabled())
+          if (logger.fineEnabled()) {
+          }
-          if (logger.fineEnabled())
+          if (logger.fineEnabled()) {
+          }
-    members = new HashSet<DistributedMember>();
-    if (newMembers == null)
+    members = new HashSet<>();
+    if (newMembers == null) {
-    Iterator<DistributedMember> memberIterator = newMembers.iterator();
-    while (memberIterator.hasNext()) {
-      members.add(memberIterator.next());
+    }
+    for (DistributedMember newMember : newMembers) {
+      members.add(newMember);
-    DistributedMember member = null;
+    DistributedMember member;
-    if (region == null || region.isEmpty())
+    if (StringUtils.isEmpty(region)) {
+    }
-    if (bean == null)// try with slash ahead
+    if (bean == null) {
+      // try with slash ahead
+    }
-    Set<DistributedMember> dsMembersWithThisMember = new HashSet<DistributedMember>();
+    Set<DistributedMember> dsMembersWithThisMember = new HashSet<>();
-    Set<DistributedMember> matchedMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> matchedMembers = new HashSet<>();
-      if (index1 == -1)
+      if (index1 == -1) {
+      }
-      if (index2 == -1)
+      if (index2 == -1) {
+      }
-      if (startIndex >= query.length())
+      if (startIndex >= query.length()) {
+      }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS83 INS83 INS83 INS83 INS83 MOV60 UPD42 INS70 UPD42 INS25 MOV25 INS60 INS70 MOV60 MOV43 INS32 INS8 INS38 INS44 INS42 MOV8 UPD27 MOV27 UPD27 MOV27 UPD42 INS32 INS32 INS8 INS32 INS8 INS8 INS8 INS8 INS32 INS32 INS8 MOV27 INS8 MOV43 INS32 INS32 INS8 INS32 INS8 INS8 MOV43 INS32 INS41 MOV74 INS59 MOV43 INS8 MOV74 INS59 MOV27 INS8 INS44 INS42 MOV8 MOV43 INS32 INS8 INS8 MOV74 UPD42 MOV42 UPD42 MOV42 INS42 INS70 UPD42 MOV21 INS42 MOV43 INS42 MOV27 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV27 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS70 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 MOV41 UPD42 MOV42 MOV42 INS42 MOV41 MOV21 MOV41 MOV41 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 MOV41 MOV21 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 MOV41 INS42 INS42 MOV42 MOV21 MOV21 UPD42 MOV42 MOV42 INS42 INS27 INS70 UPD43 MOV43 UPD43 MOV43 INS42 MOV32 MOV21 INS42 MOV14 MOV41 MOV43 INS42 UPD42 MOV42 MOV42 INS42 MOV41 MOV21 UPD42 INS14 MOV14 UPD74 UPD74 INS44 INS42 MOV8 UPD74 INS42 INS42 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS33 UPD74 MOV44 INS42 MOV8 INS42 INS32 INS8 INS32 INS8 INS32 INS8 INS45 INS14 INS27 MOV32 INS44 INS42 MOV8 UPD42 MOV42 UPD74 INS32 UPD74 INS74 UPD74 INS8 INS8 INS8 INS32 MOV43 INS42 UPD42 UPD42 UPD42 INS42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS38 UPD42 MOV32 MOV32 INS42 INS42 MOV42 MOV21 MOV32 MOV32 INS42 INS42 MOV42 MOV21 MOV32 MOV32 MOV32 INS32 INS42 INS42 MOV42 MOV21 INS74 MOV42 MOV33 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 UPD42 MOV42 INS43 INS10 INS10 MOV21 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 MOV32 INS42 MOV42 MOV42 MOV33 MOV33 INS33 MOV40 MOV9 INS43 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 UPD42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS42 UPD42 MOV60 MOV60 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 MOV42 MOV42 INS40 UPD42 MOV42 MOV27 INS8 INS8 MOV60 MOV60 MOV21 MOV32 MOV21 MOV21 UPD42 INS32 MOV32 INS32 INS8 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS14 INS42 INS42 INS42 MOV21 UPD42 INS21 UPD42 UPD74 UPD74 INS74 UPD74 UPD74 INS32 INS32 UPD74 MOV32 UPD74 INS21 UPD42 MOV32 MOV43 UPD42 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 UPD42 INS42 UPD42 INS32 INS7 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS32 UPD42 INS9 UPD42 INS9 UPD42 MOV32 INS9 UPD42 MOV32 INS9 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 MOV11 INS42 MOV32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL74 DEL42 DEL43 DEL33 DEL33 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL9 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL42 DEL9 DEL27 DEL33 DEL32 DEL9 DEL27 DEL42 DEL33 DEL32 DEL9 DEL27 DEL42 DEL42 DEL43 DEL42 DEL21 DEL70 DEL42 DEL43 DEL42 DEL9 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL42 DEL9 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL32 DEL9 DEL27 DEL32 DEL9 DEL27 DEL9 DEL9 DEL16 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL16 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL61 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL33 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL40 DEL45 DEL27 DEL32 DEL21 DEL32 DEL21 DEL33 DEL42 DEL42 DEL9 DEL27 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL9 DEL27 DEL33 DEL42 DEL9 DEL80 DEL33 DEL42 DEL9 DEL80 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL9 DEL80 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL42 DEL7 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL11 DEL42 DEL9 DEL80 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL42 DEL7 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL25 DEL42 DEL9 DEL80 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL7 DEL42 DEL42 DEL32 DEL7 DEL42 DEL33 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL43 DEL14 DEL27 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL74 DEL14 DEL59 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL33 DEL42 DEL33 DEL27 DEL32 DEL27 DEL33 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL14 DEL10 DEL10