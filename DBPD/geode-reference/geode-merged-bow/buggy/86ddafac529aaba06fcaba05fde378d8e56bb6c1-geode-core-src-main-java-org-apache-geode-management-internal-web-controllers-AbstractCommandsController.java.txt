GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
+import java.io.File;
+import java.io.IOException;
-import java.lang.management.ManagementFactory;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import org.apache.commons.io.FileUtils;
-import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.multipart.MultipartFile;
-import org.apache.geode.internal.logging.log4j.LogMarker;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.internal.util.ArrayUtils;
-import org.apache.geode.management.internal.security.MBeanServerWrapper;
-import org.apache.geode.security.GemFireSecurityException;
-   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file
-   *        data streamed to the Manager, usually for the 'deploy' Gfsh command.
+   * @param multipartFiles uploaded files
-   * @see org.apache.geode.management.MemberMXBean#processCommand(String, java.util.Map, Byte[][])
-      final byte[][] fileData) {
-    logger.debug(LogMarker.CONFIG,
-        "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
-        environment, (fileData != null && fileData.length > 0));
+      final MultipartFile[] multipartFiles) throws IOException {
+    List<String> filePaths = null;
+    Path tempDir = null;
+    if (multipartFiles != null) {
+      Set<PosixFilePermission> perms = new HashSet<>();
+      perms.add(PosixFilePermission.OWNER_READ);
+      perms.add(PosixFilePermission.OWNER_WRITE);
+      perms.add(PosixFilePermission.OWNER_EXECUTE);
+      tempDir = Files.createTempDirectory("uploaded-", PosixFilePermissions.asFileAttribute(perms));
+      // staging the files to local
+      filePaths = new ArrayList<>();
+      for (MultipartFile multipartFile : multipartFiles) {
+        File dest = new File(tempDir.toFile(), multipartFile.getOriginalFilename());
+        multipartFile.transferTo(dest);
+        filePaths.add(dest.getAbsolutePath());
+      }
+    }
+
-    return manager.processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+    try {
+      return manager.processCommand(command, environment, filePaths);
+    } finally {
+      if (tempDir != null) {
+        FileUtils.deleteDirectory(tempDir.toFile());
+      }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 INS43 UPD5 UPD42 INS42 INS60 INS60 INS25 INS54 UPD42 UPD66 INS43 INS74 INS59 INS43 INS59 INS27 INS8 INS8 INS8 INS42 INS43 MOV43 INS42 INS33 INS42 INS42 INS33 UPD42 MOV42 MOV33 INS60 INS21 INS21 INS21 INS21 INS21 INS70 INS41 INS25 INS42 INS74 INS59 INS32 INS32 INS32 INS7 INS7 INS44 INS42 INS8 INS32 INS27 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS14 INS43 INS42 INS60 INS21 INS21 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS33 INS21 INS42 INS42 INS74 INS42 INS42 INS45 INS32 INS74 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS43 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL40 DEL42 DEL69 DEL40 DEL43 DEL69 DEL42 DEL43 DEL85 DEL85 DEL5 DEL69 DEL68 DEL65 DEL39 DEL85 DEL42 DEL42 DEL40 DEL45 DEL42 DEL42 DEL27 DEL40 DEL34 DEL27 DEL27 DEL36 DEL32 DEL21 DEL32 DEL32 DEL41