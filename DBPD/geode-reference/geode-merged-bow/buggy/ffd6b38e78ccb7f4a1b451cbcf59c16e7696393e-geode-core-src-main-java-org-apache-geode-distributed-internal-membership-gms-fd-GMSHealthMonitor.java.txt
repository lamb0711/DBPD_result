GEODE-6244 Healthy member kicked out by sick member

- do not allow membership manager suspect initiation to kick out a
member on the first failed check
- perform a self-health check before sending SuspectRequest messages
- consider members who have sent shutdown messages as gone when
performing "should I become coordinator" checks in GMSHealthMonitor

-    SuspectRequest sr = new SuspectRequest(mbr, reason);
-    List<SuspectRequest> sl = new ArrayList<>();
-    sl.add(sr);
-    sendSuspectRequest(sl);
+    sendSuspectRequest(Collections.singletonList(new SuspectRequest(mbr, reason)));
-      logger.debug("Final check TCP/IP connection timed out for suspect member {}", suspectMember);
+      logger.debug("Availability check TCP/IP connection timed out for suspect member {}",
+          suspectMember);
+    logger.info("Received suspect message {} with current view {}", incomingRequest,
+        cv == null ? "<no view>" : cv.getViewId());
+
-    logger.debug("Processing suspect requests {}", suspectRequests);
+    logger.debug(
+        "Processing suspect requests {}\nproposed view is currently {}\nwith coordinator {}",
+        suspectRequests, cv, cv.getCoordinator());
-        logger.debug("Current suspects for view #{} are {}", cv.getViewId(), suspectsInView);
+        logger.info("Current suspects are {}", suspectsInView);
-      logger.trace("Trial view with suspects removed is {}\nmy address is {}", check, localAddress);
+      List membersLeaving = new ArrayList();
+      for (InternalDistributedMember member : cv.getMembers()) {
+        if (services.getJoinLeave().isMemberLeaving(member)) {
+          membersLeaving.add(member);
+        }
+      }
+      if (!membersLeaving.isEmpty()) {
+        logger.info("Current leave requests are {}", membersLeaving);
+        check.removeAll(membersLeaving);
+      }
+      logger.info(
+          "Proposed view with suspects & leaving members removed is {}\nwith coordinator {}\nmy address is {}",
+          check,
+          check.getCoordinator(), localAddress);
-      logger.debug("Scheduling final check for member {}; reason={}", mbr, reason);
+      logger.debug("Scheduling availability check for member {}; reason={}", mbr, reason);
-      final NetView cv, boolean initiateRemoval, final InternalDistributedMember mbr,
+      final NetView cv, boolean forceRemovalIfCheckFails, final InternalDistributedMember mbr,
-    logger.info("Performing final check for suspect member {} reason={}", mbr, reason);
+    logger.info("Performing availability check for suspect member {} reason={}", mbr, reason);
-          logger.info("Final check failed for member {}", mbr);
-          if (initiateRemoval) {
+          logger.info("Availability check failed for member {}", mbr);
+          // if the final check fails & this VM is the coordinator we don't need to do another final
+          // check
+          if (forceRemovalIfCheckFails) {
+            // make sure it is still suspected
+            memberSuspected(localAddress, mbr, reason);
+          } else {
+            // if this node can survive an availability check then initiate suspicion about
+            // the node that failed the availability check
+            if (doTCPCheckMember(localAddress, this.socketPort)) {
+              membersInFinalCheck.remove(mbr);
+              // tell peers about this member and then perform another availability check
+              memberSuspected(localAddress, mbr, reason);
+              initiateSuspicion(mbr, reason);
+              SuspectMembersMessage suspectMembersMessage =
+                  new SuspectMembersMessage(Collections.singletonList(localAddress),
+                      Collections
+                          .singletonList(new SuspectRequest(mbr, "failed availability check")));
+              suspectMembersMessage.setSender(localAddress);
+              logger.info("Performing local processing on suspect request");
+              processSuspectMembersRequest(suspectMembersMessage);
+            }
-          // make sure it is still suspected
-          memberSuspected(localAddress, mbr, reason);
-              "Final check failed but detected recent message traffic for suspect member " + mbr);
+              "Availability check failed but detected recent message traffic for suspect member "
+                  + mbr);
-        logger.info("Final check passed for suspect member " + mbr);
+        logger.info("Availability check passed for suspect member " + mbr);
+    logger.info("Sending suspect messages to {}", recipients);
-      logger.info("Unable to send suspect message to {}", recipients);
+      logger.info("Unable to send suspect message to {}", failedRecipients);

INS21 UPD42 INS21 INS32 INS32 UPD42 INS32 INS42 INS42 INS45 INS42 INS16 UPD45 INS42 INS32 MOV60 INS70 INS25 UPD45 INS42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 MOV14 INS27 INS45 MOV32 INS42 INS42 MOV43 INS44 INS32 INS8 INS38 INS8 INS42 INS33 UPD42 INS43 INS42 INS42 INS42 INS25 INS32 INS21 INS21 UPD42 UPD45 INS32 UPD45 UPD42 UPD45 MOV43 INS42 INS32 INS8 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 UPD45 INS32 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS32 UPD42 MOV42 MOV8 INS8 UPD45 INS42 INS42 INS42 UPD45 INS21 INS25 INS32 INS32 INS8 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS21 MOV21 INS21 INS60 INS21 INS21 INS21 INS52 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 INS42 INS45 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL74 DEL74 DEL25