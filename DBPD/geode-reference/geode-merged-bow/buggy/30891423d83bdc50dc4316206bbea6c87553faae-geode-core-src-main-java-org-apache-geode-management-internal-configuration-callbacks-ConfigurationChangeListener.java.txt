GEODE-2197: refactor cluster config and fix the test failures

-import com.google.common.collect.Sets;
-
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.distributed.internal.SharedConfiguration;
-import org.apache.geode.distributed.internal.SharedConfiguration;
-  private static final String clusterConfigDirPath = GemFireCacheImpl.getInstance().getDistributedSystem().getConfig().getClusterConfigDir();
-  private static final File clusterConfigDir = new File(clusterConfigDirPath);
-
-  // when a new jar is added, if it exist in the current locator, upload to other locators,
-  // otherwise, download from other locators.
-  // when a jar is removed, remove it from all the locators' file system
+  // when a new jar is added, if it does not exist in the current locator, download it from
+  // another locator.
+  // when a jar is removed, if it exists in the current locator, remove it.
+    Set<String> jarsAdded = new HashSet<>(newJars);
+    Set<String> jarsRemoved = new HashSet<>(oldJars);
-    Set<String> jarsAdded = Sets.difference(newJars, oldJars);
-    Set<String> jarsRemoved = Sets.difference(oldJars, newJars);
+    jarsAdded.removeAll(oldJars);
+    jarsRemoved.removeAll(newJars);
-      throw new IllegalStateException("We don't expect to have jars both added and removed in one event");
+      throw new IllegalStateException(
+          "We don't expect to have jars both added and removed in one event");
-    for(String jarAdded: jarsAdded){
-      if (!jarExistsInFilesystem(group, jarAdded)){
+    for (String jarAdded : jarsAdded) {
+      if (!jarExistsInFilesystem(group, jarAdded)) {
-          sharedConfig.addJarFromOtherLocators(group, jarAdded);
+          sharedConfig.downloadJarFromOtherLocators(group, jarAdded);
-    for(String jarRemoved: jarsRemoved){
-        File jar = sharedConfig.getPathToJarOnThisLocator(group,jarRemoved).toFile();
-        if (jar.exists()) {
-          try {
-            FileUtils.forceDelete(jar);
-          } catch (IOException e) {
-            logger.error(
-                "Exception occurred while attempting to delete a jar from the filesystem: {}",jarRemoved, e);
-          }
+    for (String jarRemoved : jarsRemoved) {
+      File jar = sharedConfig.getPathToJarOnThisLocator(group, jarRemoved).toFile();
+      if (jar.exists()) {
+        try {
+          FileUtils.forceDelete(jar);
+        } catch (IOException e) {
+          logger.error(
+              "Exception occurred while attempting to delete a jar from the filesystem: {}",
+              jarRemoved, e);
+      }
-
-    //locator1,2,3 already have an existing jar 1
-    //deploy jar --name=jar1  (new version of jar)
-    //locator1 overwrites jar1 on its filesystem
-    //listener is called on locator 1,2,3

MOV26 INS60 INS21 INS21 MOV74 MOV74 INS59 INS32 INS32 INS14 MOV42 INS14 INS42 INS42 MOV42 INS42 INS42 MOV42 INS74 INS42 INS74 INS42 INS43 INS43 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60