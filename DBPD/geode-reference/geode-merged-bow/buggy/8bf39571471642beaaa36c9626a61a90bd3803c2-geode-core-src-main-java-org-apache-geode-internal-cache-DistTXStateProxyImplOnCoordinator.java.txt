Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * {@link DistTXStateOnCoordinator} (in case of TX coordinator is also a data
-   * node)
+   * {@link DistTXStateOnCoordinator} (in case of TX coordinator is also a data node)
-  protected HashMap<DistributedMember, DistTXCoordinatorInterface> target2realDeals = new HashMap<>();
+  protected HashMap<DistributedMember, DistTXCoordinatorInterface> target2realDeals =
+      new HashMap<>();
-  private  Set<DistributedMember> txRemoteParticpants = null; // other than local
+  private Set<DistributedMember> txRemoteParticpants = null; // other than local
-  public DistTXStateProxyImplOnCoordinator(TXManagerImpl managerImpl, TXId id,
-      boolean isjta) {
+  public DistTXStateProxyImplOnCoordinator(TXManagerImpl managerImpl, TXId id, boolean isjta) {
-   * [DISTTX] TODO Catch all exceptions in precommit and rollback and make sure
-   * these messages reach all
+   * [DISTTX] TODO Catch all exceptions in precommit and rollback and make sure these messages reach
+   * all
-      HashMap<DistributedMember, DistTXCoordinatorInterface> otherTargets2realDeals = getSecondariesAndReplicasForTxOps();
+      HashMap<DistributedMember, DistTXCoordinatorInterface> otherTargets2realDeals =
+          getSecondariesAndReplicasForTxOps();
-        logger
-            .debug("DistTXStateProxyImplOnCoordinator.commit target2realDeals = "
-                + target2realDeals);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.commit target2realDeals = " + target2realDeals);
-          logger
-              .debug("DistTXStateProxyImplOnCoordinator.commit Going for commit ");
+          logger.debug("DistTXStateProxyImplOnCoordinator.commit Going for commit ");
-              LocalizedStrings.ClientTXStateStub_COMMIT_FAILED_ON_SERVER
-                  .toLocalizedString());
+              LocalizedStrings.ClientTXStateStub_COMMIT_FAILED_ON_SERVER.toLocalizedString());
-          logger
-              .debug("DistTXStateProxyImplOnCoordinator.commit precommitResult = "
-                  + precommitResult);
+          logger.debug(
+              "DistTXStateProxyImplOnCoordinator.commit precommitResult = " + precommitResult);
-   * creates a map of all secondaries(for PR) / replicas(for RR) to stubs to
-   * send commit message to those
+   * creates a map of all secondaries(for PR) / replicas(for RR) to stubs to send commit message to
+   * those
-    final GemFireCacheImpl cache = GemFireCacheImpl
-        .getExisting("getSecondariesAndReplicasForTxOps");
-    InternalDistributedMember currentNode = cache.getDistributedSystem()
-        .getDistributedMember();
-    
-    HashMap<DistributedMember, DistTXCoordinatorInterface> secondaryTarget2realDeals = new HashMap<>();
-    for (Entry<DistributedMember, DistTXCoordinatorInterface> e : target2realDeals
-        .entrySet()) {
+    final GemFireCacheImpl cache =
+        GemFireCacheImpl.getExisting("getSecondariesAndReplicasForTxOps");
+    InternalDistributedMember currentNode = cache.getDistributedSystem().getDistributedMember();
+
+    HashMap<DistributedMember, DistTXCoordinatorInterface> secondaryTarget2realDeals =
+        new HashMap<>();
+    for (Entry<DistributedMember, DistTXCoordinatorInterface> e : target2realDeals.entrySet()) {
-      ArrayList<DistTxEntryEvent> primaryTxOps = distPeerTxStateStub
-          .getPrimaryTransactionalOperations();
+      ArrayList<DistTxEntryEvent> primaryTxOps =
+          distPeerTxStateStub.getPrimaryTransactionalOperations();
-          Set<InternalDistributedMember> allNodes = ((PartitionedRegion) dtop
-              .getRegion()).getRegionAdvisor().getBucketOwners(
-                  dtop.getKeyInfo().getBucketId());
+          Set<InternalDistributedMember> allNodes = ((PartitionedRegion) dtop.getRegion())
+              .getRegionAdvisor().getBucketOwners(dtop.getKeyInfo().getBucketId());
-          otherNodes = ((DistributedRegion) lr).getCacheDistributionAdvisor()
-              .adviseInitializedReplicates();
+          otherNodes =
+              ((DistributedRegion) lr).getCacheDistributionAdvisor().adviseInitializedReplicates();
-            DistTXCoordinatorInterface existingDistPeerTXStateStub = target2realDeals
-                .get(dm);
+            DistTXCoordinatorInterface existingDistPeerTXStateStub = target2realDeals.get(dm);
-                  newTxStub = new DistPeerTXStateStub(this, dm,
-                      onBehalfOfClientMember);
+                  newTxStub = new DistPeerTXStateStub(this, dm, onBehalfOfClientMember);
-                existingDistPeerTXStateStub
-                    .addSecondaryTransactionalOperations(dtop);
+                existingDistPeerTXStateStub.addSecondaryTransactionalOperations(dtop);
-              existingDistPeerTXStateStub
-                  .addSecondaryTransactionalOperations(dtop);
+              existingDistPeerTXStateStub.addSecondaryTransactionalOperations(dtop);
-      logger
-          .debug("DistTXStateProxyImplOnCoordinator.rollback Going for rollback ");
+      logger.debug("DistTXStateProxyImplOnCoordinator.rollback Going for rollback ");
-    
+
-    final GemFireCacheImpl cache = GemFireCacheImpl
-        .getExisting("Applying Dist TX Rollback");
+    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Rollback");
-      
+
-      DistTXRollbackMessage.DistTxRollbackReplyProcessor processor = new DistTXRollbackMessage.DistTxRollbackReplyProcessor(
-          this.getTxId(), dm, txRemoteParticpants, target2realDeals);
+      DistTXRollbackMessage.DistTxRollbackReplyProcessor processor =
+          new DistTXRollbackMessage.DistTxRollbackReplyProcessor(this.getTxId(), dm,
+              txRemoteParticpants, target2realDeals);
-      final DistTXRollbackMessage rollbackMsg = new DistTXRollbackMessage(
-          this.getTxId(), this.onBehalfOfClientMember, processor);
+      final DistTXRollbackMessage rollbackMsg =
+          new DistTXRollbackMessage(this.getTxId(), this.onBehalfOfClientMember, processor);
-        DistTXCoordinatorInterface remoteTXStateStub = target2realDeals
-            .get(remoteNode);
+        DistTXCoordinatorInterface remoteTXStateStub = target2realDeals.get(remoteNode);
-              LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                  "DistPeerTXStateStub", remoteTXStateStub.getClass()
-                      .getSimpleName()));
+              LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistPeerTXStateStub",
+                  remoteTXStateStub.getClass().getSimpleName()));
-          logger.debug("DistTXStateProxyImplOnCoordinator.rollback target = "
-              + remoteNode);
+          logger.debug("DistTXStateProxyImplOnCoordinator.rollback target = " + remoteNode);
-      DistTXCoordinatorInterface localTXState = target2realDeals
-          .get(dm.getId());
+      DistTXCoordinatorInterface localTXState = target2realDeals.get(dm.getId());
-              LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                  "DistTXStateOnCoordinator", localTXState.getClass()
-                      .getSimpleName()));
+              LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistTXStateOnCoordinator",
+                  localTXState.getClass().getSimpleName()));
-          logger.debug("DistTXStateProxyImplOnCoordinator.rollback local = "
-              + dm.getId() + " ,result= " + localResult + " ,finalResult-old= "
-              + finalResult);
+          logger.debug("DistTXStateProxyImplOnCoordinator.rollback local = " + dm.getId()
+              + " ,result= " + localResult + " ,finalResult-old= " + finalResult);
-        Map<DistributedMember, Boolean> remoteResults = processor
-            .getRollbackResponseMap();
+        Map<DistributedMember, Boolean> remoteResults = processor.getRollbackResponseMap();
-            logger
-                .debug("DistTXStateProxyImplOnCoordinator.rollback target = "
-                    + target + " ,result= " + remoteResult
-                    + " ,finalResult-old= " + finalResult);
+            logger.debug("DistTXStateProxyImplOnCoordinator.rollback target = " + target
+                + " ,result= " + remoteResult + " ,finalResult-old= " + finalResult);
-    
+
-      logger.debug("DistTXStateProxyImplOnCoordinator.rollback finalResult= "
-          + finalResult);
+      logger.debug("DistTXStateProxyImplOnCoordinator.rollback finalResult= " + finalResult);
-      } else if (r instanceof BucketRegion) { 
+      } else if (r instanceof BucketRegion) {
-//        target = r.getMyId();
-      } else { //replicated region
+        // target = r.getMyId();
+      } else { // replicated region
-//      assert (r != null);
-       if (r == null) { // TODO: stop gap to get tests working
-         this.realDeal = new DistTXStateOnCoordinator(this, false);
-         target = this.txMgr.getDM().getId();
-       } else {
+      // assert (r != null);
+      if (r == null) { // TODO: stop gap to get tests working
+        this.realDeal = new DistTXStateOnCoordinator(this, false);
+        target = this.txMgr.getDM().getId();
+      } else {
-              logger
-                  .warn(LocalizedMessage
-                      .create(
-                          LocalizedStrings.TXStateProxyImpl_Distributed_Region_In_Client_TX,
-                          r.getFullPath()));
+              logger.warn(LocalizedMessage.create(
+                  LocalizedStrings.TXStateProxyImpl_Distributed_Region_In_Client_TX,
+                  r.getFullPath()));
-            this.realDeal = new DistPeerTXStateStub(this, target,
-                onBehalfOfClientMember);
+            this.realDeal = new DistPeerTXStateStub(this, target, onBehalfOfClientMember);
-        logger
-            .debug(
-                "DistTXStateProxyImplOnCoordinator::getRealDeal Built a new TXState: {} txMge:{} proxy {} target {}",
-                this.realDeal, this.txMgr.getDM().getId(), this, target,
-                new Throwable());
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator::getRealDeal Built a new TXState: {} txMge:{} proxy {} target {}",
+            this.realDeal, this.txMgr.getDM().getId(), this, target, new Throwable());
-        logger
-            .debug(
-                "DistTXStateProxyImplOnCoordinator::getRealDeal Found TXState: {} proxy {} target {} target2realDeals {}",
-                this.realDeal, this, target, target2realDeals);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator::getRealDeal Found TXState: {} proxy {} target {} target2realDeals {}",
+            this.realDeal, this, target, target2realDeals);
-      this.realDeal = new DistPeerTXStateStub(this, target,
-          onBehalfOfClientMember);
+      this.realDeal = new DistPeerTXStateStub(this, target, onBehalfOfClientMember);
-        logger
-            .debug(
-                "DistTXStateProxyImplOnCoordinator::getRealDeal(t) Built a new TXState: {} me:{}",
-                this.realDeal, this.txMgr.getDM().getId());
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator::getRealDeal(t) Built a new TXState: {} me:{}",
+            this.realDeal, this.txMgr.getDM().getId());
-      if (!this.realDeal.isDistTx()
-          || this.realDeal.isCreatedOnDistTxCoordinator()
+      if (!this.realDeal.isDistTx() || this.realDeal.isCreatedOnDistTxCoordinator()
-        throw new UnsupportedOperationInTransactionException(
-            LocalizedStrings.DISTTX_TX_EXPECTED
-                .toLocalizedString("DistPeerTXStateStub", this.realDeal
-                    .getClass().getSimpleName()));
+        throw new UnsupportedOperationInTransactionException(LocalizedStrings.DISTTX_TX_EXPECTED
+            .toLocalizedString("DistPeerTXStateStub", this.realDeal.getClass().getSimpleName()));
-        logger
-            .debug("DistTXStateProxyImplOnCoordinator.getRealDeal(t) added TxState target2realDeals = "
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.getRealDeal(t) added TxState target2realDeals = "
-        logger
-            .debug(
-                "DistTXStateProxyImplOnCoordinator::getRealDeal(t) Found TXState: {} proxy {} target {} target2realDeals {}",
-                this.realDeal, this, target, target2realDeals);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator::getRealDeal(t) Found TXState: {} proxy {} target {} target2realDeals {}",
+            this.realDeal, this, target, target2realDeals);
-  
+
-        logger
-            .debug("DistTXStateProxyImplOnCoordinator.doPrecommit txParticpants = "
-                + txParticpants
-                + " ,txRemoteParticpants="
-                + this.txRemoteParticpants + " ,originator=" + dm.getId());
+        logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit txParticpants = "
+            + txParticpants + " ,txRemoteParticpants=" + this.txRemoteParticpants + " ,originator="
+            + dm.getId());
-    final GemFireCacheImpl cache = GemFireCacheImpl
-        .getExisting("Applying Dist TX Precommit");
+    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Precommit");
-            logger
-                .warn(LocalizedMessage
-                    .create(
-                        LocalizedStrings.TXCommitMessage_NEW_MEMBERS_FOR_REGION_0_ORIG_LIST_1_NEW_LIST_2,
-                        new Object[] { dr, txParticpants, newRegionMemberView }));
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.TXCommitMessage_NEW_MEMBERS_FOR_REGION_0_ORIG_LIST_1_NEW_LIST_2,
+                new Object[] {dr, txParticpants, newRegionMemberView}));
-        } else if (lr instanceof PartitionedRegion
-            || lr instanceof BucketRegion) {
+        } else if (lr instanceof PartitionedRegion || lr instanceof BucketRegion) {
-            logger
-                .warn(LocalizedMessage
-                    .create(
-                        LocalizedStrings.TXCommitMessage_NEW_MEMBERS_FOR_REGION_0_ORIG_LIST_1_NEW_LIST_2,
-                        new Object[] { pr, txParticpants, newRegionMemberView }));
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.TXCommitMessage_NEW_MEMBERS_FOR_REGION_0_ORIG_LIST_1_NEW_LIST_2,
+                new Object[] {pr, txParticpants, newRegionMemberView}));
-    DistTXPrecommitMessage.DistTxPrecommitReplyProcessor processor = new DistTXPrecommitMessage.DistTxPrecommitReplyProcessor(
-        this.getTxId(), dm, txRemoteParticpants, target2realDeals);
+    DistTXPrecommitMessage.DistTxPrecommitReplyProcessor processor =
+        new DistTXPrecommitMessage.DistTxPrecommitReplyProcessor(this.getTxId(), dm,
+            txRemoteParticpants, target2realDeals);
-    final DistTXPrecommitMessage precommitMsg = new DistTXPrecommitMessage(
-        this.getTxId(), this.onBehalfOfClientMember, processor);
+    final DistTXPrecommitMessage precommitMsg =
+        new DistTXPrecommitMessage(this.getTxId(), this.onBehalfOfClientMember, processor);
-      DistTXCoordinatorInterface remoteTXStateStub = target2realDeals
-          .get(remoteNode);
+      DistTXCoordinatorInterface remoteTXStateStub = target2realDeals.get(remoteNode);
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                "DistPeerTXStateStub", remoteTXStateStub.getClass()
-                    .getSimpleName()));
+            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistPeerTXStateStub",
+                remoteTXStateStub.getClass().getSimpleName()));
-        logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit Sent Message to target = "
-            + remoteNode);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.doPrecommit Sent Message to target = " + remoteNode);
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                "DistTXStateOnCoordinator", localTXState.getClass()
-                    .getSimpleName()));
+            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistTXStateOnCoordinator",
+                localTXState.getClass().getSimpleName()));
-      TreeMap<String, ArrayList<DistTxThinEntryState>> entryStateSortedMap = new TreeMap<String, ArrayList<DistTxThinEntryState>>();
+      TreeMap<String, ArrayList<DistTxThinEntryState>> entryStateSortedMap =
+          new TreeMap<String, ArrayList<DistTxThinEntryState>>();
-          entryEventList = new ArrayList<ArrayList<DistTxThinEntryState>>(
-              entryStateSortedMap.values());
+          entryEventList =
+              new ArrayList<ArrayList<DistTxThinEntryState>>(entryStateSortedMap.values());
-        logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit local = "
-            + dm.getId() + " ,entryEventList="
-            + printEntryEventList(entryEventList) + " ,txRegionVersionsMap="
-            + printEntryEventMap(this.txEntryEventMap) + " ,result= "
-            + localResult + " ,finalResult-old= " + finalResult);
+        logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit local = " + dm.getId()
+            + " ,entryEventList=" + printEntryEventList(entryEventList) + " ,txRegionVersionsMap="
+            + printEntryEventMap(this.txEntryEventMap) + " ,result= " + localResult
+            + " ,finalResult-old= " + finalResult);
-      Map<DistributedMember, DistTxPrecommitResponse> remoteResults = processor
-          .getCommitResponseMap();
-      for (Entry<DistributedMember, DistTxPrecommitResponse> e : remoteResults
-          .entrySet()) {
+      Map<DistributedMember, DistTxPrecommitResponse> remoteResults =
+          processor.getCommitResponseMap();
+      for (Entry<DistributedMember, DistTxPrecommitResponse> e : remoteResults.entrySet()) {
-        ArrayList<ArrayList<DistTxThinEntryState>> entryEventList = remoteResponse.getDistTxEntryEventList();
+        ArrayList<ArrayList<DistTxThinEntryState>> entryEventList =
+            remoteResponse.getDistTxEntryEventList();
-          logger
-              .debug("DistTXStateProxyImplOnCoordinator.doPrecommit got reply from target = "
-                  + target
-                  + " ,sortedRegions"
-                  + sortedRegionName
-                  + " ,entryEventList="
-                  + printEntryEventList(entryEventList)
-                  + " ,txEntryEventMap="
-                  + printEntryEventMap(this.txEntryEventMap)
-                  + " ,result= "
-                  + remoteResponse.getCommitState()
-                  + " ,finalResult-old= "
-                  + finalResult);
+          logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit got reply from target = "
+              + target + " ,sortedRegions" + sortedRegionName + " ,entryEventList="
+              + printEntryEventList(entryEventList) + " ,txEntryEventMap="
+              + printEntryEventMap(this.txEntryEventMap) + " ,result= "
+              + remoteResponse.getCommitState() + " ,finalResult-old= " + finalResult);
-      logger
-          .debug("DistTXStateProxyImplOnCoordinator.doPrecommit finalResult= "
-              + finalResult);
+      logger.debug("DistTXStateProxyImplOnCoordinator.doPrecommit finalResult= " + finalResult);
-      ArrayList<ArrayList<DistTxThinEntryState>> entryEventList,
-      TreeSet<String> sortedRegionName) {
+      ArrayList<ArrayList<DistTxThinEntryState>> entryEventList, TreeSet<String> sortedRegionName) {
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("size of "
-                + sortedRegionName.size() + " {" + sortedRegionName + "}"
-                + " for target=" + target, entryEventList.size() + " {"
-                + entryEventList + "}"));
+            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
+                "size of " + sortedRegionName.size() + " {" + sortedRegionName + "}"
+                    + " for target=" + target,
+                entryEventList.size() + " {" + entryEventList + "}"));
-  
+
-      ArrayList<ArrayList<DistTxThinEntryState>> entryEventList,
-      TreeSet<String> sortedRegionMap) {
+      ArrayList<ArrayList<DistTxThinEntryState>> entryEventList, TreeSet<String> sortedRegionMap) {
-      ArrayList<DistTxThinEntryState> entryStates = this.txEntryEventMap
-          .get(rName);
+      ArrayList<DistTxThinEntryState> entryStates = this.txEntryEventMap.get(rName);
-        throw new UnsupportedOperationInTransactionException(
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                "entryStates for " + rName + " at target " + target, "null"));
+        throw new UnsupportedOperationInTransactionException(LocalizedStrings.DISTTX_TX_EXPECTED
+            .toLocalizedString("entryStates for " + rName + " at target " + target, "null"));
-    final GemFireCacheImpl cache = GemFireCacheImpl
-        .getExisting("Applying Dist TX Commit");
+    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Commit");
-    DistTXCommitMessage.DistTxCommitReplyProcessor processor = new DistTXCommitMessage.DistTxCommitReplyProcessor(
-        this.getTxId(), dm, txRemoteParticpants, target2realDeals);
+    DistTXCommitMessage.DistTxCommitReplyProcessor processor =
+        new DistTXCommitMessage.DistTxCommitReplyProcessor(this.getTxId(), dm, txRemoteParticpants,
+            target2realDeals);
-    final DistTXCommitMessage commitMsg = new DistTXCommitMessage(
-        this.getTxId(), this.onBehalfOfClientMember, processor);
+    final DistTXCommitMessage commitMsg =
+        new DistTXCommitMessage(this.getTxId(), this.onBehalfOfClientMember, processor);
-      DistTXCoordinatorInterface remoteTXStateStub = target2realDeals
-          .get(remoteNode);
+      DistTXCoordinatorInterface remoteTXStateStub = target2realDeals.get(remoteNode);
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                "DistPeerTXStateStub", remoteTXStateStub.getClass()
-                    .getSimpleName()));
+            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistPeerTXStateStub",
+                remoteTXStateStub.getClass().getSimpleName()));
-        populateEntryEventList(remoteNode, entryEventList,
-            sortedRegionName);
+        populateEntryEventList(remoteNode, entryEventList, sortedRegionName);
-        logger
-            .debug("DistTXStateProxyImplOnCoordinator.doCommit Sent Message target = "
-                + remoteNode
-                + " ,sortedRegions="
-                + sortedRegionName
-                + " ,entryEventList="
-                + printEntryEventList(entryEventList)
-                + " ,txEntryEventMap="
-                + printEntryEventMap(this.txEntryEventMap));
+        logger.debug("DistTXStateProxyImplOnCoordinator.doCommit Sent Message target = "
+            + remoteNode + " ,sortedRegions=" + sortedRegionName + " ,entryEventList="
+            + printEntryEventList(entryEventList) + " ,txEntryEventMap="
+            + printEntryEventMap(this.txEntryEventMap));
-            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-                "DistTXStateOnCoordinator", localTXState.getClass()
-                    .getSimpleName()));
+            LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString("DistTXStateOnCoordinator",
+                localTXState.getClass().getSimpleName()));
-        logger.debug("DistTXStateProxyImplOnCoordinator.doCommit local = "
-            + dm.getId() + " ,sortedRegions=" + sortedRegionName
-            + " ,entryEventList=" + printEntryEventList(entryEventList)
-            + " ,txEntryEventMap=" + printEntryEventMap(this.txEntryEventMap)
-            + " ,result= " + (localResultMsg != null) + " ,finalResult-old= "
-            + finalResult);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.doCommit local = " + dm.getId() + " ,sortedRegions="
+                + sortedRegionName + " ,entryEventList=" + printEntryEventList(entryEventList)
+                + " ,txEntryEventMap=" + printEntryEventMap(this.txEntryEventMap) + " ,result= "
+                + (localResultMsg != null) + " ,finalResult-old= " + finalResult);
-      Map<DistributedMember, TXCommitMessage> remoteResults = processor
-          .getCommitResponseMap();
-      for (Entry<DistributedMember, TXCommitMessage> e : remoteResults
-          .entrySet()) {
+      Map<DistributedMember, TXCommitMessage> remoteResults = processor.getCommitResponseMap();
+      for (Entry<DistributedMember, TXCommitMessage> e : remoteResults.entrySet()) {
-          logger
-              .debug("DistTXStateProxyImplOnCoordinator.doCommit got results from target = "
-                  + target + " ,result= " + (remoteResultMsg != null)
-                  + " ,finalResult-old= " + finalResult);
+          logger.debug(
+              "DistTXStateProxyImplOnCoordinator.doCommit got results from target = " + target
+                  + " ,result= " + (remoteResultMsg != null) + " ,finalResult-old= " + finalResult);
-      logger.debug("DistTXStateProxyImplOnCoordinator.doCommit finalResult= "
-          + finalResult);
+      logger.debug("DistTXStateProxyImplOnCoordinator.doCommit finalResult= " + finalResult);
-  
+
-   * For distributed transactions, this divides the user's putAll operation into
-   * multiple per bucket putAll ops(with entries to be put in that bucket) and
-   * then fires those using using appropriate TXStateStub (for target that host
-   * the corresponding bucket)
+   * For distributed transactions, this divides the user's putAll operation into multiple per bucket
+   * putAll ops(with entries to be put in that bucket) and then fires those using using appropriate
+   * TXStateStub (for target that host the corresponding bucket)
-  public void postPutAll(DistributedPutAllOperation putallOp,
-      VersionedObjectList successfulPuts, LocalRegion region) {
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
-        logger.debug("DistTXStateProxyImplOnCoordinator.postPutAll "
-            + "processing putAll op for region {}, size of putAllOp "
-            + "is {}", region, putallOp.putAllData.length);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.postPutAll "
+                + "processing putAll op for region {}, size of putAllOp " + "is {}",
+            region, putallOp.putAllData.length);
-      //map of bucketId to putall op for this bucket
-      HashMap<Integer, DistributedPutAllOperation> bucketToPutallMap = 
+      // map of bucketId to putall op for this bucket
+      HashMap<Integer, DistributedPutAllOperation> bucketToPutallMap =
-      //map of bucketId to TXStateStub for target that hosts this bucket
-      HashMap<Integer, DistTXCoordinatorInterface> bucketToTxStateStubMap = 
+      // map of bucketId to TXStateStub for target that hosts this bucket
+      HashMap<Integer, DistTXCoordinatorInterface> bucketToTxStateStubMap =
-      
-      //separate the putall op per bucket
-      for (int i=0; i<putallOp.putAllData.length; i++) {
+
+      // separate the putall op per bucket
+      for (int i = 0; i < putallOp.putAllData.length; i++) {
-        
-        DistributedPutAllOperation putAllForBucket = 
-            bucketToPutallMap.get(bucketId);;
+
+        DistributedPutAllOperation putAllForBucket = bucketToPutallMap.get(bucketId);;
-              Operation.PUTALL_CREATE, key,
-              putallOp.putAllData[i].getValue());
+              Operation.PUTALL_CREATE, key, putallOp.putAllData[i].getValue());
-          putAllForBucket = new DistributedPutAllOperation(
-              event, putallOp.putAllDataSize, putallOp.isBridgeOp);
+          putAllForBucket =
+              new DistributedPutAllOperation(event, putallOp.putAllDataSize, putallOp.isBridgeOp);
-        } 
+        }
-      
+
-      for (Entry<Integer, DistTXCoordinatorInterface> e : bucketToTxStateStubMap
-          .entrySet()) {
+      for (Entry<Integer, DistTXCoordinatorInterface> e : bucketToTxStateStubMap.entrySet()) {
-        DistributedPutAllOperation putAllForBucket = bucketToPutallMap
-            .get(bucketId);
-        
+        DistributedPutAllOperation putAllForBucket = bucketToPutallMap.get(bucketId);
+
-          logger.debug("DistTXStateProxyImplOnCoordinator.postPutAll processing"
-              + " putAll for ##bucketId = {}, ##txStateStub = {}, "
-              + "##putAllOp = {}"
-              , bucketId, dtsi, putAllForBucket);
+          logger.debug(
+              "DistTXStateProxyImplOnCoordinator.postPutAll processing"
+                  + " putAll for ##bucketId = {}, ##txStateStub = {}, " + "##putAllOp = {}",
+              bucketId, dtsi, putAllForBucket);
-   * For distributed transactions, this divides the user's removeAll operation
-   * into multiple per bucket removeAll ops(with entries to be removed from that
-   * bucket) and then fires those using using appropriate TXStateStub (for
-   * target that host the corresponding bucket)
+   * For distributed transactions, this divides the user's removeAll operation into multiple per
+   * bucket removeAll ops(with entries to be removed from that bucket) and then fires those using
+   * using appropriate TXStateStub (for target that host the corresponding bucket)
-  public void postRemoveAll(DistributedRemoveAllOperation op,
-      VersionedObjectList successfulOps, LocalRegion region) {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion region) {
-        logger.debug("DistTXStateProxyImplOnCoordinator.postRemoveAll "
-            + "processing removeAll op for region {}, size of removeAll "
-            + "is {}", region, op.removeAllDataSize);
+        logger.debug(
+            "DistTXStateProxyImplOnCoordinator.postRemoveAll "
+                + "processing removeAll op for region {}, size of removeAll " + "is {}",
+            region, op.removeAllDataSize);
-      
-      //map of bucketId to removeAll op for this bucket
-      HashMap<Integer, DistributedRemoveAllOperation> bucketToRemoveAllMap = 
+
+      // map of bucketId to removeAll op for this bucket
+      HashMap<Integer, DistributedRemoveAllOperation> bucketToRemoveAllMap =
-      //map of bucketId to TXStateStub for target that hosts this bucket
-      HashMap<Integer, DistTXCoordinatorInterface> bucketToTxStateStubMap = 
+      // map of bucketId to TXStateStub for target that hosts this bucket
+      HashMap<Integer, DistTXCoordinatorInterface> bucketToTxStateStubMap =
-      
-      //separate the removeAll op per bucket
-      for (int i=0; i<op.removeAllData.length; i++) {
+
+      // separate the removeAll op per bucket
+      for (int i = 0; i < op.removeAllData.length; i++) {
-        
-        DistributedRemoveAllOperation removeAllForBucket = 
-            bucketToRemoveAllMap.get(bucketId);
+
+        DistributedRemoveAllOperation removeAllForBucket = bucketToRemoveAllMap.get(bucketId);
-          removeAllForBucket = new DistributedRemoveAllOperation(
-              event, op.removeAllDataSize, op.isBridgeOp);
+          removeAllForBucket =
+              new DistributedRemoveAllOperation(event, op.removeAllDataSize, op.isBridgeOp);
-        } 
+        }
-      
+
-      for (Entry<Integer, DistTXCoordinatorInterface> e : bucketToTxStateStubMap
-          .entrySet()) {
+      for (Entry<Integer, DistTXCoordinatorInterface> e : bucketToTxStateStubMap.entrySet()) {
-        DistributedRemoveAllOperation removeAllForBucket = bucketToRemoveAllMap
-            .get(bucketId);
-        
+        DistributedRemoveAllOperation removeAllForBucket = bucketToRemoveAllMap.get(bucketId);
+
-          logger.debug("DistTXStateProxyImplOnCoordinator.postRemoveAll processing"
-              + " removeAll for ##bucketId = {}, ##txStateStub = {}, "
-              + "##removeAllOp = {}"
-              , bucketId, dtsi, removeAllForBucket);
+          logger.debug(
+              "DistTXStateProxyImplOnCoordinator.postRemoveAll processing"
+                  + " removeAll for ##bucketId = {}, ##txStateStub = {}, " + "##removeAllOp = {}",
+              bucketId, dtsi, removeAllForBucket);
-  
+
-  
+
-      str.append(":").append("size(").append(entry.getValue().size())
-          .append(")");
+      str.append(":").append("size(").append(entry.getValue().size()).append(")");
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66