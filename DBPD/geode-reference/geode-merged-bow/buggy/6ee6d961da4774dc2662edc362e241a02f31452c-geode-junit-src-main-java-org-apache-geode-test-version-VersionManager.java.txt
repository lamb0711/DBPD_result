GEODE-7090 Remove dependency on DataSerializer from membership classes

DataSerializableFixedID is used by most internal classes for
serialization.  Membership, in particular, was constrained in its
implementation to use only "fixed" serialization identifiers because our
other serialization mechanisms (DataSerialiable, PDX) are dependent on
membership and messaging.

This PR moves serialization of DataSerializableFixedID to a new
sub-project, geode-serialization in support of also separating
membership into its own sub-project.

Many files are touched by this PR.  The vast majority are due to a
change in the serialization interface that introduces a new parameter in
DataSerializableFixedID's toData and fromData methods.  This parameter
gives access to the serializer and to the Version of the
source/destination.  This parameter was added to begin moving from a
"static" based serialization service to an instance based service.

Serialization code concerning "DSFID"s has been moved from
InternalDataSerializer to the new class DSFIDSerialzerImpl.
InternalDataSerializer holds on to an instance of this class and
delegates DSFID serialization to it.

InternalDataSerializer also effects registration of Geode's DSFID
classes with this serializer.  Membership "Services" handles
registration of its own DSFID classes with the service, as do other
sub-projects like geode-web.

HeapDataOutputStream has been used by most of our serialization code to
provide a DataOutput for our toData methods.  Over the years this class
has accumulated a lot of adornments for PDX serialization that aren't
appropriate for a geode-serialization sub-project.  Consequently I've
moved much of its code into a superclass, BufferDataOutputStream, that
provides most of its functionality w/o needing to reference other geode-
core classes.

Version.java has been repackaged in this PR, moving it into a
"serialization" package.  This affected some rolling-upgrade and
backward-compatibility tests that were referring to
Version.CURRENT_ORDINAL.  These have been modified to get the "current
version ordinal" from VersionManager.

Finally, InternalDataSerializer injects a serializer into the new
sub-project that provideds an API for handling other types of
serializable objects like PDX.  This serializer is available in the
DataSerializableFixedID toData/fromData context parameter and is used by
membership services when serializing Geode DistributionMessages.

+import java.lang.reflect.Field;
+import org.apache.geode.internal.serialization.Version;
+
+  /**
+   * returns the ordinal of the Version of Geode used in this JVM. Use this
+   * instead of Version.CURRENT or Version.CURRENT_ORDINAL in test code
+   */
+  public short getCurrentVersionOrdinal() {
+    return geodeCurrentVersionOrdinal;
+  }
+
+  private short geodeCurrentVersionOrdinal = -1;
+
+    instance.establishGeodeVersionOrdinal();
+
+  public void establishGeodeVersionOrdinal() {
+    Class versionClass;
+    Field currentOrdinalField;
+    // GEODE's Version class was repackaged when serialization was modularized
+    try {
+      versionClass = Class.forName("org.apache.geode.internal.Version");
+    } catch (ClassNotFoundException e) {
+      try {
+        versionClass = Class.forName("org.apache.geode.internal.serialization.Version");
+      } catch (ClassNotFoundException e2) {
+        System.out.println("classpath is " + System.getProperty("java.class.path"));
+        throw new IllegalStateException(
+            "Unable to locate Version.java in order to establish the product's serialization version",
+            e2);
+      }
+    }
+    try {
+      currentOrdinalField = versionClass.getDeclaredField("CURRENT_ORDINAL");
+    } catch (NoSuchFieldException e) {
+      throw new IllegalStateException(
+          "Unable to locate Version.java's CURRENT_ORDINAL field in order to establish the product's serialization version",
+          e);
+    }
+    currentOrdinalField.setAccessible(true);
+    try {
+      geodeCurrentVersionOrdinal = currentOrdinalField.getShort(null);
+    } catch (IllegalAccessException e) {
+      throw new IllegalStateException(
+          "Unable to retrieve Version.java's CURRENT_ORDINAL field in order to establlish the product's serialization version",
+          e);
+    }
+  }
+
+  /**
+   * map a VersionManager version string (like "180) to the actual name of the corresponding
+   * Version
+   */
+  public String getVersionName(String oldVersion) {
+    if (oldVersion.equals(CURRENT_VERSION)) {
+      return Version.CURRENT.getName();
+    }
+    if (!this.testVersions.contains(oldVersion)) {
+      throw new IllegalArgumentException("Unknown version of Geode: " + oldVersion);
+    }
+    for (Version v : Version.getAllVersions()) {
+      if (oldVersion.equals(v.getName().replace(".", ""))) {
+        return v.getName();
+      }
+    }
+    throw new IllegalArgumentException("Unknown version of Geode: " + oldVersion);
+  }

INS26 INS26 INS40 INS40 INS31 INS23 INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS41 INS42 INS38 INS21 INS60 INS60 INS54 INS54 INS21 INS54 INS65 INS42 INS43 INS42 INS25 INS25 INS70 INS53 INS66 INS66 INS42 INS34 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS12 INS32 INS8 INS12 INS66 INS66 INS42 INS32 INS8 INS38 INS8 INS44 INS32 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS9 INS21 INS44 INS8 INS42 INS42 INS42 INS41 INS32 INS53 INS43 INS42 INS42 INS42 INS25 INS43 INS27 INS7 INS43 INS42 INS54 INS7 INS43 INS42 INS53 INS7 INS43 INS42 INS53 INS32 INS22 INS42 INS42 INS14 INS42 INS32 INS8 INS42 INS45 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS14 INS40 INS42 INS52 INS42 INS43 INS27 INS42 INS42 INS32 INS41 INS42 INS42 INS45 INS21 INS44 INS8 INS42 INS42 INS45 INS43 INS45 INS42 INS42 INS42 INS33 INS43 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS45 INS32 INS7 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS45 INS40 INS42 INS27 INS43 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45