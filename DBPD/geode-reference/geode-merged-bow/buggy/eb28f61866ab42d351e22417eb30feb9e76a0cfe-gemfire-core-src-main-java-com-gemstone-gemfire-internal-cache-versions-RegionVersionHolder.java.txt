refactoring RegionVersionHolder.recordVersion()

This is from a group refactoring session during a class taught by Michael Feathers.
The old recordVersion code was difficult to understand and was poorly tested.  New
JUnit tests are now included that give 100% code coverage for this algorithm.

+    if (this.bitSetVersion + BIT_SET_WIDTH - 1 >= version) {
+      return; // it fits in this bitset
+    }
+    
+    
-
-    if (this.version != version) {
-      if (this.bitSet == null) {
-        if (this.version < version-1) {
-          this.addException(this.version, version);
-          if (logger.isTraceEnabled(LogMarker.RVV)) {
-            logger.trace(LogMarker.RVV, "Added rvv exception e<rv{} - rv{}>", this.version, version);
-          }
-        } else if (this.version > version) {
-          this.addOlderVersion(version);
-        }
-      } else { // have a bitSet
-        if (this.bitSetVersion + BIT_SET_WIDTH - 1 < version) {
-          this.flushBitSetDuringRecording(version);
-        }
-        if (version < this.bitSetVersion) {
-          this.addOlderVersion(version);
-        } else {
-          // If there's special exception, version maybe >= this.bitSetVersion. We need to fill the hole
-          // in the special exception. For example, holder=R5(3,6), bitSetVersion=3, bs=[0]. Adding version=4
-          // will become: holder=R5(4,6), bitsetVersion=3, bs[0,1]
-          if (this.getSpecialException() != null) {
-            this.addOlderVersion(version);
-          }
-          this.bitSet.set((int)(version-this.bitSetVersion));
-        }
-      }
-      this.version = Math.max(this.version, version);
+    if (this.bitSet != null) {
+      recordVersionWithBitSet(version);
-      if (this.bitSet != null && version>=this.bitSetVersion) {
-        this.bitSet.set((int)(version-this.bitSetVersion));
+      recordVersionWithoutBitSet(version);
+    }
+  }
+
+  private void recordVersionWithoutBitSet(long version) {
+    if ( (version - this.version) > 1) {
+      this.addException(this.version, version);
+      logRecordVersion(version);
+      this.version = version;
+      return;
+    }
+    this.addOlderVersion(version);
+    this.version = Math.max(this.version, version);
+  }
+
+  private void recordVersionWithBitSet(long version) {
+    if (this.version == version) {
+      if (version >= this.bitSetVersion) {
+        setVersionInBitSet(version);
+      return;
+    }
+    
+    flushBitSetDuringRecording(version);
+
+    if (version >= this.bitSetVersion) {
+      if (this.getSpecialException() != null) {
+        this.addOlderVersion(version);
+      }
+      setVersionInBitSet(version);
+      this.version = Math.max(this.version, version);
+      return;
+    }
+    this.addOlderVersion(version);
+    this.version = Math.max(this.version, version);
+  }
+
+  private void setVersionInBitSet(long version) {
+    this.bitSet.set((int)(version-this.bitSetVersion));
+  }
+  
+  private void logRecordVersion(long version) {
+    if (logger.isTraceEnabled(LogMarker.RVV)) {
+      logger.trace(LogMarker.RVV, "Added rvv exception e<rv{} - rv{}>", this.version, version);
+

INS31 INS31 INS31 INS31 INS31 MOV83 MOV39 MOV42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS25 INS39 INS42 INS25 INS39 INS42 INS25 MOV21 MOV21 INS39 INS42 INS25 INS21 INS25 MOV21 MOV21 INS39 INS42 INS27 INS8 MOV27 INS8 MOV8 INS27 INS8 INS7 UPD27 MOV27 INS8 INS32 MOV27 INS8 INS7 MOV27 INS42 INS41 INS21 INS21 INS36 MOV34 MOV21 INS21 INS21 INS41 INS22 INS32 MOV42 INS25 MOV21 INS41 INS42 INS42 MOV25 INS21 MOV21 INS41 INS22 INS32 INS34 INS32 INS32 UPD27 MOV27 MOV22 INS32 INS7 INS52 INS42 INS42 INS42 INS22 MOV42 UPD27 MOV27 MOV8 INS32 MOV52 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV22 INS42 INS52 INS42 INS21 INS42 INS42 MOV52 UPD42 MOV42 INS32 INS42 INS42 DEL52 DEL42 DEL32 DEL34 DEL27 DEL22 DEL39 DEL42 DEL22 DEL27 DEL36 DEL11 DEL32 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL27 DEL25 DEL25 DEL8 DEL42 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL27 DEL25 DEL8 DEL25 DEL8 DEL31