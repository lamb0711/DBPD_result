Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-//import org.apache.geode.internal.cache.locks.*;
-//import java.io.*;
+// import org.apache.geode.internal.cache.locks.*;
+// import java.io.*;
-/** Used to reserve region entries, during a transaction commit,
- * for modification by the transaction.
+/**
+ * Used to reserve region entries, during a transaction commit, for modification by the transaction.
-  
-  public void makeReservation(IdentityArrayList localLocks)
-    throws CommitConflictException
-  {
+
+  public void makeReservation(IdentityArrayList localLocks) throws CommitConflictException {
-      for (int i=0; i < llSize; i++) {
-        checkForConflict((TXRegionLockRequestImpl)llArray[i], localLocks);
+      for (int i = 0; i < llSize; i++) {
+        checkForConflict((TXRegionLockRequestImpl) llArray[i], localLocks);
+
-  private void checkForConflict(TXRegionLockRequestImpl rr,
-                                IdentityArrayList localLocks)
-    throws CommitConflictException
-  {
+  private void checkForConflict(TXRegionLockRequestImpl rr, IdentityArrayList localLocks)
+      throws CommitConflictException {
-      // we may have a conflict
-      Object[] keysArray = keys.toArray();
-      if (oldValue instanceof Set) {
-        checkSetForConflict(rr, (Set)oldValue, keysArray, localLocks);
-        IdentityArrayList newValue = new IdentityArrayList(2);
-        newValue.add(oldValue);
-        newValue.add(keys);
-        this.regionLocks.put(r, newValue);
-      } else {
-        IdentityArrayList al = (IdentityArrayList)oldValue;
-        int alSize = al.size();
-        Object[] alArray = al.getArrayRef();
-        for (int i=0; i < alSize; i++) {
-          checkSetForConflict(rr, (Set)alArray[i], keysArray, localLocks);
+        // we may have a conflict
+        Object[] keysArray = keys.toArray();
+        if (oldValue instanceof Set) {
+          checkSetForConflict(rr, (Set) oldValue, keysArray, localLocks);
+          IdentityArrayList newValue = new IdentityArrayList(2);
+          newValue.add(oldValue);
+          newValue.add(keys);
+          this.regionLocks.put(r, newValue);
+        } else {
+          IdentityArrayList al = (IdentityArrayList) oldValue;
+          int alSize = al.size();
+          Object[] alArray = al.getArrayRef();
+          for (int i = 0; i < alSize; i++) {
+            checkSetForConflict(rr, (Set) alArray[i], keysArray, localLocks);
+          }
+          al.add(keys);
+          this.regionLocks.put(r, al); // fix for bug 36689
-        al.add(keys);
-        this.regionLocks.put(r, al); // fix for bug 36689
-      }
+
-                                   IdentityArrayList localLocks)
-    throws CommitConflictException
-  {
-    for (int i=0; i < keys.length; i++) {
+      IdentityArrayList localLocks) throws CommitConflictException {
+    for (int i = 0; i < keys.length; i++) {
-        throw new CommitConflictException(LocalizedStrings.TXReservationMgr_THE_KEY_0_IN_REGION_1_WAS_BEING_MODIFIED_BY_ANOTHER_TRANSACTION_LOCALLY.toLocalizedString(new Object[] {keys[i], rr.getRegionFullPath()}));
+        throw new CommitConflictException(
+            LocalizedStrings.TXReservationMgr_THE_KEY_0_IN_REGION_1_WAS_BEING_MODIFIED_BY_ANOTHER_TRANSACTION_LOCALLY
+                .toLocalizedString(new Object[] {keys[i], rr.getRegionFullPath()}));
+
-    if(local) {
+    if (local) {
-  
+
-    for (int i=0; i < llSize; i++) {
-      TXRegionLockRequestImpl rr = (TXRegionLockRequestImpl)llArray[i];
+    for (int i = 0; i < llSize; i++) {
+      TXRegionLockRequestImpl rr = (TXRegionLockRequestImpl) llArray[i];
-          IdentityArrayList al = (IdentityArrayList)curValue;
+          IdentityArrayList al = (IdentityArrayList) curValue;

UPD66 DEL66