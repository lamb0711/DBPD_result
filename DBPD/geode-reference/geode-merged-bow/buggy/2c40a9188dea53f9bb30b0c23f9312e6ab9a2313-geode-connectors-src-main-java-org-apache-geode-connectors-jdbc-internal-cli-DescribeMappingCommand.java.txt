GEODE-6365: Add server group support for list and destroy jdbc-mapping (#3175)

Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>




-import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.connectors.util.internal.MappingCommandUtils;
-  private static final String CREATE_MAPPING__GROUPS_NAME__HELP =
+  private static final String DESCRIBE_MAPPING__GROUPS_NAME__HELP =
-          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
+          help = DESCRIBE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
-    CacheConfig result = configService.getCacheConfig(group);
-    if (result == null) {
-      throw new PreconditionException(
-          "Cache Configuration not found"
-              + ((group.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)) ? "."
-                  : " for group " + group + "."));
-    }
-    return result;
-  }
-
-  private ArrayList<DescribeMappingResult> getMappingsFromRegionConfig(CacheConfig cacheConfig,
-      RegionConfig regionConfig, String group) {
-    CacheConfig.AsyncEventQueue asyncEventQueue = findAsyncEventQueue(cacheConfig, regionConfig);
-    ArrayList<DescribeMappingResult> results = new ArrayList<>();
-    for (CacheElement element : regionConfig.getCustomRegionElements()) {
-      if (element instanceof RegionMapping) {
-        results.add(buildDescribeMappingResult((RegionMapping) element, regionConfig.getName(),
-            asyncEventQueue == null, group));
-      }
-    }
-    return results;
-  }
-
-  private CacheConfig.AsyncEventQueue findAsyncEventQueue(CacheConfig cacheConfig,
-      RegionConfig regionConfig) {
-    for (CacheConfig.AsyncEventQueue queue : cacheConfig.getAsyncEventQueues()) {
-      if (queue.getId()
-          .equals(CreateMappingCommand.createAsyncEventQueueName(regionConfig.getName()))) {
-        return queue;
-      }
-    }
-    return null;
+    return MappingCommandUtils.getCacheConfig(configService, group);
-  public ConfigurationPersistenceService checkForClusterConfiguration()
+  private ArrayList<DescribeMappingResult> getMappingsFromRegionConfig(CacheConfig cacheConfig,
+      RegionConfig regionConfig, String group) {
+    ArrayList<DescribeMappingResult> results = new ArrayList<>();
+    for (RegionMapping mapping : MappingCommandUtils.getMappingsFromRegionConfig(cacheConfig,
+        regionConfig,
+        group)) {
+      results.add(buildDescribeMappingResult(mapping, regionConfig.getName(),
+          MappingCommandUtils.isMappingSynchronous(cacheConfig, regionConfig), group));
+    }
+    return results;
+  }
+
+  private ConfigurationPersistenceService checkForClusterConfiguration()
-    RegionConfig regionConfig = findRegionConfig(cacheConfig, regionName);
-    if (regionConfig == null) {
-      String groupClause = "A region named " + regionName + " must already exist"
-          + (!groupName.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)
-              ? " for group " + groupName + "." : ".");
-      throw new PreconditionException(groupClause);
-    }
-    return regionConfig;
-  }
-  private RegionConfig findRegionConfig(CacheConfig cacheConfig, String regionName) {
-    return cacheConfig.getRegions().stream()
-        .filter(region -> region.getName().equals(regionName)).findFirst().orElse(null);
+    return MappingCommandUtils.checkForRegion(regionName, cacheConfig, groupName);

MOV26 MOV31 UPD40 UPD83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 UPD42 INS41 INS70 INS32 INS44 INS32 INS8 UPD42 INS42 MOV42 INS42 MOV42 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV21 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL40 DEL32 DEL36 DEL45 DEL45 DEL42 DEL45 DEL27 DEL16 DEL36 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41 DEL8 DEL31 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL11 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL8 DEL70 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL38 DEL45 DEL42 DEL45 DEL27 DEL45 DEL16 DEL36 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL32 DEL86 DEL32 DEL32 DEL33