GEODE-6799: better gfsh error message when missing required parameters (#3855)

* GEODE-6799: better gfsh error message when missing required parameters


+import java.util.stream.Collectors;
+   * get mini-help for commands entered without all required parameters
+   *
+   * @return null if unable to identify anything missing
+   */
+  public String getMiniHelp(String userInput) {
+    if (StringUtils.isBlank(userInput)) {
+      return null;
+    }
+
+    List<Method> methodList = commands.keySet()
+        .stream()
+        .filter(key -> key.startsWith(getCommandPart(userInput)))
+        .map(commands::get).collect(Collectors.toList());
+
+    if (methodList.size() != 1) {
+      // can't validate arguments if buffer is not a single command
+      return null;
+    }
+
+    Method m = methodList.get(0);
+    CliCommand cliCommand = m.getDeclaredAnnotation(CliCommand.class);
+    Annotation[][] annotations = m.getParameterAnnotations();
+
+    if (annotations == null || annotations.length == 0) {
+      // can't validate arguments if command doesn't have any
+      return null;
+    }
+
+    // loop through the required options and check that they appear in the buffer
+    StringBuilder builder = new StringBuilder();
+    for (Annotation[] annotation : annotations) {
+      CliOption cliOption = getAnnotation(annotation, CliOption.class);
+      String option = getPrimaryKey(cliOption);
+      boolean required = cliOption.mandatory();
+      boolean requiredWithEquals = true;
+
+      if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
+        requiredWithEquals = false;
+      }
+      if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+        required = false;
+      }
+      if (required) {
+        String lookFor = "--" + option + (requiredWithEquals ? "=" : "");
+        if (!userInput.contains(lookFor)) {
+          builder.append("  --").append(option).append(requiredWithEquals ? "=" : "")
+              .append("  is required").append(GfshParser.LINE_SEPARATOR);
+        }
+      }
+    }
+    if (builder.length() > 0) {
+      String commandName = cliCommand.value()[0];
+      builder.append("Use \"help ").append(commandName)
+          .append("\" (without the quotes) to display detailed usage information.")
+          .append(GfshParser.LINE_SEPARATOR);
+      return builder.toString();
+    } else {
+      return null;
+    }
+  }
+
+  private String getCommandPart(String userInput) {
+    int parms = userInput.indexOf(" --");
+    return (parms < 0 ? userInput : userInput.substring(0, parms)).trim();
+  }
+
+  /**
-    if (!isNullOrBlank(cliOption.specifiedDefaultValue())) {
+    if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
-    if (!isNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+    if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
-    boolean hasSpecifiedDefault = !isNullOrBlank(cliOption.specifiedDefaultValue());
+    boolean hasSpecifiedDefault = isNotNullOrBlank(cliOption.specifiedDefaultValue());
-  private static boolean isNullOrBlank(String value) {
-    return StringUtils.isBlank(value) || CliMetaData.ANNOTATION_NULL_VALUE.equals(value);
+  private static boolean isNotNullOrBlank(String value) {
+    return !StringUtils.isBlank(value) && !CliMetaData.ANNOTATION_NULL_VALUE.equals(value);

INS26 INS40 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD42 INS65 INS65 INS42 INS43 INS42 INS25 INS60 INS25 INS60 INS60 INS60 INS25 INS60 INS70 INS25 INS42 INS43 INS42 INS60 INS41 INS66 INS66 INS42 INS32 INS8 INS74 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS5 INS59 INS27 INS8 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS8 INS42 INS39 INS59 INS32 INS32 MOV32 UPD27 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS85 INS42 INS32 INS27 INS27 INS41 INS42 INS42 INS14 INS5 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS32 INS34 INS60 INS21 INS41 INS41 INS42 INS32 INS36 INS42 INS42 MOV32 UPD42 MOV32 INS38 INS38 INS33 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS34 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS33 INS43 INS43 INS85 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS32 INS8 INS32 INS8 INS42 INS8 INS42 INS42 INS43 INS59 INS32 INS32 INS33 INS42 INS42 INS45 INS16 UPD42 MOV32 MOV32 INS32 INS42 INS90 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS32 INS21 INS42 INS32 INS21 INS60 INS25 INS42 INS42 INS2 INS32 INS42 INS40 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS7 INS43 INS59 INS38 INS8 INS32 INS34 INS32 INS42 INS45 INS42 INS34 INS42 INS42 INS34 INS42 INS32 INS42 INS59 INS32 INS43 INS42 INS9 INS42 INS9 INS42 INS42 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS16 INS32 INS42 INS40 INS42 INS45 INS45 INS32 INS42 INS45 INS32 INS42 INS16 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS45 DEL38 DEL38 DEL42 DEL32 DEL38