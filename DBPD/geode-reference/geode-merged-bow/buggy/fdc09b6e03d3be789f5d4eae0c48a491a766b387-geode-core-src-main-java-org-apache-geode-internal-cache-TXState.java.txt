 GEODE-5376: Remove SynchronizationRunnable (#2122)


  Remove TXSynchronizationRunnable to handle JTA beforeCompletion and afterCompletion can be executed on different member after client failover.



+import org.apache.geode.InternalGemFireError;
+import org.apache.geode.cache.FailedSynchronizationException;
+import org.apache.geode.cache.TransactionException;
+  // Access this variable should be in synchronized block.
+  private boolean beforeCompletionCalled;
-  public void beforeCompletion() throws SynchronizationCommitConflictException {
+  public synchronized void beforeCompletion() throws SynchronizationCommitConflictException {
-    this.proxy.getTxMgr().setTXState(null);
+    if (beforeCompletionCalled) {
+      // do not re-execute beforeCompletion again
+      return;
+    }
+    beforeCompletionCalled = true;
+    doBeforeCompletion();
+  }
+
+  private void doBeforeCompletion() {
-
-
-      this.proxy.getTxMgr().noteCommitFailure(opStart, this.jtaLifeTime, this);
+      proxy.getTxMgr().noteCommitFailure(opStart, this.jtaLifeTime, this);
-  public void afterCompletion(int status) {
-    // System.err.println("start afterCompletion");
-    final long opStart = CachePerfStats.getStatTime();
-    switch (status) {
-      case Status.STATUS_COMMITTED:
-        // System.err.println("begin commit in afterCompletion");
-        Assert.assertTrue(this.locks != null,
-            "Gemfire Transaction afterCompletion called with illegal state.");
-        try {
-          proxy.getTxMgr().setTXState(null);
-          commit();
-          saveTXCommitMessageForClientFailover();
-        } catch (CommitConflictException error) {
-          Assert.assertTrue(false, "Gemfire Transaction " + getTransactionId()
-              + " afterCompletion failed.due to CommitConflictException: " + error);
-        }
-
-        this.proxy.getTxMgr().noteCommitSuccess(opStart, this.jtaLifeTime, this);
-        this.locks = null;
-        // System.err.println("end commit in afterCompletion");
-        break;
-      case Status.STATUS_ROLLEDBACK:
-        this.jtaLifeTime = opStart - getBeginTime();
-        this.proxy.getTxMgr().setTXState(null);
-        rollback();
-        saveTXCommitMessageForClientFailover();
-        this.proxy.getTxMgr().noteRollbackSuccess(opStart, this.jtaLifeTime, this);
-        break;
-      default:
-        Assert.assertTrue(false, "Unknown JTA Synchronization status " + status);
+  public synchronized void afterCompletion(int status) {
+    this.proxy.getTxMgr().setTXState(null);
+    // For commit, beforeCompletion should be called. Otherwise
+    // throw FailedSynchronizationException().
+    if (wasBeforeCompletionCalled()) {
+      doAfterCompletion(status);
+    } else {
+      // rollback does not run beforeCompletion.
+      if (status != Status.STATUS_ROLLEDBACK) {
+        throw new FailedSynchronizationException(
+            "Could not execute afterCompletion when beforeCompletion was not executed");
+      }
+      doAfterCompletion(status);
-    // System.err.println("end afterCompletion");
-  private void saveTXCommitMessageForClientFailover() {
+  private void doAfterCompletion(int status) {
+    final long opStart = CachePerfStats.getStatTime();
+    try {
+      switch (status) {
+        case Status.STATUS_COMMITTED:
+          Assert.assertTrue(this.locks != null,
+              "Gemfire Transaction afterCompletion called with illegal state.");
+          try {
+            commit();
+            saveTXCommitMessageForClientFailover();
+          } catch (CommitConflictException error) {
+            Assert.assertTrue(false, "Gemfire Transaction " + getTransactionId()
+                + " afterCompletion failed.due to CommitConflictException: " + error);
+          }
+
+          this.proxy.getTxMgr().noteCommitSuccess(opStart, this.jtaLifeTime, this);
+          this.locks = null;
+          break;
+        case Status.STATUS_ROLLEDBACK:
+          this.jtaLifeTime = opStart - getBeginTime();
+          rollback();
+          saveTXCommitMessageForClientFailover();
+          this.proxy.getTxMgr().noteRollbackSuccess(opStart, this.jtaLifeTime, this);
+          break;
+        default:
+          Assert.assertTrue(false, "Unknown JTA Synchronization status " + status);
+      }
+    } catch (InternalGemFireError error) {
+      throw new TransactionException(error);
+    }
+  }
+
+  boolean wasBeforeCompletionCalled() {
+    return beforeCompletionCalled;
+  }
+
+  void saveTXCommitMessageForClientFailover() {

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS39 INS59 MOV78 INS83 INS83 INS39 INS42 MOV43 INS8 UPD83 UPD42 MOV78 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS8 INS39 INS42 INS8 INS42 MOV25 INS25 INS21 INS21 INS39 INS42 MOV21 INS25 MOV60 INS54 INS41 INS42 INS8 INS7 INS32 INS32 INS8 INS8 MOV8 INS12 INS42 INS41 INS42 INS9 INS42 INS42 INS21 INS25 INS21 INS44 INS8 INS32 INS27 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS40 INS53 INS42 INS42 INS42 INS14 INS14 INS43 INS42 MOV42 INS43 INS45 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL33 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL33 DEL32 DEL21 DEL83