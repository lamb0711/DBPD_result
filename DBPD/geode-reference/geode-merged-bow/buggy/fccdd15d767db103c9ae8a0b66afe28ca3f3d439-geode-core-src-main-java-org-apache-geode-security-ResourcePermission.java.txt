GEODE-4310: allow ResourcePermission to take Strings as arguments for Resource and Operation. (#1300)

* still checks validity of the resource/operation except wildcards.
* update tests
+import java.util.function.UnaryOperator;
+
+  public static String NULL = "NULL";
-    NULL, CLUSTER, DATA
-  }
-
-  public enum Operation {
-    NULL, MANAGE, WRITE, READ
-  }
-
-  // when ALL is specified, we need it to convert to string "*" instead of "ALL".
-  public enum Target {
-    ALL(ResourcePermission.ALL), DISK, GATEWAY, QUERY, DEPLOY;
-
-    private String name;
-
-    Target() {}
-
-    Target(String name) {
-      this.name = name;
-    }
+    ALL, NULL, CLUSTER, DATA;
-      if (name != null) {
-        return name;
+      if (this == ALL) {
+        return ResourcePermission.ALL;
-  // these default values are used when creating a lock around an operation
-  private Resource resource = Resource.NULL;
-  private Operation operation = Operation.NULL;
+  public enum Operation {
+    ALL, NULL, MANAGE, WRITE, READ;
+    public String getName() {
+      if (this == ALL) {
+        return ResourcePermission.ALL;
+      }
+      return name();
+    }
+  }
+
+  public enum Target {
+    ALL, DISK, GATEWAY, QUERY, DEPLOY;
+    public String getName() {
+      if (this == ALL) {
+        return ResourcePermission.ALL;
+      }
+      return name();
+    }
+  }
+
+  // these default values are used when creating an allow-all lock around an operation
+  private String resource = NULL;
+  private String operation = NULL;
-  public ResourcePermission() {
-    this(Resource.NULL, Operation.NULL, ALL, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation) {
-    this(resource, operation, ALL, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation, String target) {
-    this(resource, operation, target, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation, String target, String key) {
-    this((resource == null) ? Resource.NULL : Resource.valueOf(resource.toUpperCase()),
-        (operation == null) ? Operation.NULL : Operation.valueOf(operation.toUpperCase()), target,
-        key);
-  }
+  public ResourcePermission() {}
-  public ResourcePermission(Resource resource, Operation operation, Target target,
-      String targetKey) {
-    this(resource, operation, target.getName(), targetKey);
+  public ResourcePermission(Resource resource, Operation operation, Target target, String key) {
+    this(resource == null ? null : resource.getName(),
+        operation == null ? null : operation.getName(), target == null ? null : target.getName(),
+        key);
-    if (resource != null) {
-      this.resource = resource;
-    }
-    if (operation != null) {
-      this.operation = operation;
-    }
+    this(resource == null ? null : resource.getName(),
+        operation == null ? null : operation.getName(), target, key);
+  }
+
+  public ResourcePermission(String resource, String operation) {
+    this(resource, operation, ALL, ALL);
+  }
+
+  public ResourcePermission(String resource, String operation, String target) {
+    this(resource, operation, target, ALL);
+  }
+
+  public ResourcePermission(String resource, String operation, String target, String key) {
+    // what's eventually stored are either "*", "NULL" or a valid enum except ALL.
+    // Fields are never null.
+    this.resource = parsePart(resource, r -> Resource.valueOf(r).getName());
+    this.operation = parsePart(operation, o -> Operation.valueOf(o).getName());
+
+  private String parsePart(String part, UnaryOperator<String> operator) {
+    if (part == null) {
+      return NULL;
+    }
+    if (part.equals(ALL)) {
+      return ALL;
+    }
+    return operator.apply(part.toUpperCase());
+  }
+
-   * Returns the resource, could be either DATA or CLUSTER
+   * Returns the resource, could be either ALL, NULL, DATA or CLUSTER
+    if (ALL.equals(resource)) {
+      return Resource.ALL;
+    }
+
+    return Resource.valueOf(resource);
+  }
+
+  /**
+   * Returns the operation, could be either ALL, NULL, MANAGE, WRITE or READ
+   */
+  public Operation getOperation() {
+    if (ALL.equals(operation))
+      return Operation.ALL;
+    return Operation.valueOf(operation);
+  }
+
+
+  /**
+   * could be either "*", "NULL", "DATA", "CLUSTER"
+   */
+  public String getResourceString() {
-   * Returns the operation, could be either MANAGE, WRITE or READ
+   * Returns the operation, could be either "*", "NULL", "MANAGE", "WRITE" or "READ"
-  public Operation getOperation() {
+  public String getOperationString() {
-      return getResource() + ":" + getOperation();
+      return resource + ":" + operation;

INS26 MOV31 MOV31 MOV31 MOV31 MOV31 INS40 INS23 INS71 INS71 INS71 INS31 INS31 INS31 INS83 INS83 INS43 INS59 MOV83 UPD42 MOV42 INS72 MOV72 MOV72 MOV72 INS31 INS83 INS42 INS72 MOV72 MOV72 MOV72 MOV72 MOV31 INS83 INS42 INS72 MOV72 MOV72 MOV72 MOV72 MOV31 UPD43 UPD43 INS83 INS42 INS8 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS44 MOV44 MOV44 INS83 MOV43 INS42 MOV44 INS44 INS8 INS29 MOV43 UPD42 INS29 INS83 MOV43 INS42 INS8 INS43 UPD42 INS43 UPD42 INS42 INS42 INS45 INS42 INS83 MOV43 INS42 INS8 INS42 INS83 MOV43 INS42 INS42 INS43 UPD42 INS42 UPD42 INS42 INS43 INS42 MOV21 MOV21 UPD42 INS74 INS42 INS25 INS25 INS41 INS65 INS25 INS41 INS65 INS25 INS41 INS42 INS42 INS25 INS41 INS25 MOV41 INS42 INS25 MOV41 INS16 INS16 INS16 INS42 INS42 INS43 INS43 INS27 INS8 INS32 INS8 INS32 INS66 INS32 INS8 INS32 INS66 INS32 INS41 INS32 UPD66 UPD66 INS27 INS8 INS32 INS27 INS8 UPD27 MOV27 INS8 INS32 MOV27 INS33 INS32 MOV27 INS33 INS32 INS27 INS33 MOV32 INS27 INS33 INS32 INS27 INS33 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS52 INS42 INS41 INS42 INS52 INS42 INS41 INS52 UPD42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 MOV42 UPD42 MOV42 INS42 INS33 MOV42 UPD42 MOV42 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS59 INS32 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL33 DEL42 DEL8 DEL25 DEL83 DEL42 DEL71 DEL71 DEL83 DEL42 DEL42 DEL40 DEL72 DEL83 DEL42 DEL59 DEL23 DEL42 DEL8 DEL31 DEL71 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL36 DEL40 DEL42 DEL42 DEL32 DEL32 DEL36 DEL40 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL17 DEL42 DEL32 DEL42 DEL32