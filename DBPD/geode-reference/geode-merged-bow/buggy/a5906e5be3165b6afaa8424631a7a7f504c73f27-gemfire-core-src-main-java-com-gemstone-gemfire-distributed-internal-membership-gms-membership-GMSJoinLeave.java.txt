New unit tests & minor bugfixes

1) new unit tests
2) detection of IDs w/o UUIDs in them in UDP messaging
3) removal of JoinResponse messages - view messages are considered a join-response so we don't need to send both
4) detection of new members admitted by a different coordinator during becomeCoordinator processes (problem found by Jianxia)
5) adjusting the join-timeout if member-timeout is large

+import static com.gemstone.gemfire.distributed.internal.membership.gms.ServiceConfig.MEMBER_REQUEST_COLLECTION_INTERVAL;
-  /** stall time to wait for concurrent join/leave/remove requests to be received */
-  public static final long MEMBER_REQUEST_COLLECTION_INTERVAL = Long.getLong("gemfire.member-request-collection-interval", 500);
-
-        viewCreator.setInitialView(newView, leaving, removals);
+        viewCreator.setInitialView(newView, newView.getNewMembers(), leaving, removals);
-  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView) {
-    for (InternalDistributedMember mbr : newMbrs) {
-      JoinResponseMessage response = new JoinResponseMessage(mbr, newView);
-      services.getMessenger().send(response);
-    }
-  }
-
-      // send join responses after other members at least have
-      // a prepared view announcing the new member
-      if (!(isNetworkPartition && quorumRequired)) {
-        sendJoinResponses(newMembers, view);
-      }
-
-          if (this.isCoordinator) {
-            logger.debug("JoinLeave stopping coordination services");
-            NetView newView = new NetView(view, view.getViewId() + 1);
-            newView.remove(localAddress);
-            InstallViewMessage m = new InstallViewMessage(newView, services.getAuthenticator().getCredentials(this.localAddress));
-            m.setRecipients(newView.getMembers());
-            services.getMessenger().send(m);
-            waitForProcessing = true;
-          } else {
-            List<InternalDistributedMember> coords = view.getPreferredCoordinators(Collections.<InternalDistributedMember> emptySet(), localAddress, 5);
+          List<InternalDistributedMember> coords = view.getPreferredCoordinators(Collections.<InternalDistributedMember> emptySet(), localAddress, 5);
-            logger.debug("JoinLeave sending a leave request to {}", coords);
-            LeaveRequestMessage m = new LeaveRequestMessage(coords, this.localAddress, "this member is shutting down");
-            services.getMessenger().send(m);
-            waitForProcessing = true;
-          }
+          logger.debug("JoinLeave sending a leave request to {}", coords);
+          LeaveRequestMessage m = new LeaveRequestMessage(coords, this.localAddress, "this member is shutting down");
+          services.getMessenger().send(m);
+          waitForProcessing = true;
+    /**
+     * initial view to install.  guarded by synch on ViewCreator
+     */
+    /**
+     * initial joining members.  guarded by synch on ViewCreator
+     */
+    List<InternalDistributedMember> initialJoins = Collections.<InternalDistributedMember>emptyList();
+    /**
+     * initial leaving members  guarded by synch on ViewCreator
+     */
+    /**
+     * initial crashed members.  guarded by synch on ViewCreator
+     */
-    void setInitialView(NetView newView, Set<InternalDistributedMember> leaving, Set<InternalDistributedMember> removals) {
+    synchronized void setInitialView(NetView newView, List<InternalDistributedMember> newMembers,
+        Set<InternalDistributedMember> leaving, Set<InternalDistributedMember> removals) {
+      this.initialJoins = newMembers;
-      if (initialView != null) {
-        try {
-          prepareAndSendView(initialView, Collections.<InternalDistributedMember>emptyList(), initialLeaving,
-              initialRemovals);
-        } finally {
-          this.initialView = null;
-          this.initialLeaving = null;
-          this.initialRemovals = null;
+      if (initialView == null) {
+        return;
+      }
+      NetView v = preparedView;
+      if (v != null) {
+        processPreparedView(v);
+      }
+      try {
+        NetView iView;
+        List<InternalDistributedMember> iJoins;
+        Set<InternalDistributedMember> iLeaves;
+        Set<InternalDistributedMember> iRemoves;
+        synchronized(this) {
+          iView = initialView;
+          iJoins = initialJoins;
+          iLeaves = initialLeaving;
+          iRemoves = initialRemovals;
+        if (iView != null) {
+          prepareAndSendView(iView, iJoins, iLeaves, iRemoves);
+        }
+      } finally {
+        setInitialView(null, null, null, null);
+      }
+    }
+
+    /**
+     * During initial view processing a prepared view was discovered.
+     * This method will extract its new members and create a new
+     * initial view containing them.
+     * 
+     * @param v The prepared view
+     */
+    private void processPreparedView(NetView v) {
+      assert initialView != null;
+      if (currentView == null || currentView.getViewId() < v.getViewId()) {
+        // we have a prepared view that is newer than the current view
+        // form a new View ID
+        int viewId = Math.max(initialView.getViewId(),v.getViewId());
+        viewId += 1;
+        NetView newView = new NetView(initialView, viewId);
+
+        // add the new members from the prepared view to the new view,
+        // preserving their failure-detection ports
+        List<InternalDistributedMember> newMembers;
+        if (currentView != null) {
+          newMembers = v.getNewMembers(currentView);
+        } else {
+          newMembers = v.getMembers();
+        }
+        for (InternalDistributedMember newMember: newMembers) {
+          newView.add(newMember);
+          newView.setFailureDetectionPort(newMember, v.getFailureDetectionPort(newMember));
+        }
+
+        // use the new view as the initial view
+        setInitialView(newView, newMembers, initialLeaving, initialRemovals);
+          // this member may have been kicked out of the conflicting view
+          if (failures.contains(localAddress)) {
+            forceDisconnect("I am no longer a member of the distributed system");
+            shutdown = true;
+            return;
+          }

INS26 INS40 MOV8 INS23 INS31 MOV60 INS51 MOV25 INS29 INS29 INS74 INS59 INS29 INS29 INS83 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 MOV8 INS65 INS65 INS43 INS43 INS42 MOV32 INS65 INS65 INS74 INS42 INS21 INS25 INS60 INS25 MOV54 INS65 INS65 INS43 INS42 INS6 INS25 MOV60 MOV21 MOV21 INS66 INS66 INS42 INS42 INS66 INS66 INS43 INS43 INS7 INS27 INS8 MOV43 INS59 INS27 INS8 INS8 INS8 INS66 INS66 INS66 INS42 INS66 INS42 MOV27 INS27 INS8 MOV27 INS42 INS42 INS22 INS42 INS42 INS33 INS41 INS42 INS42 INS42 INS33 INS21 INS60 INS60 INS60 INS60 INS51 INS25 INS21 INS27 INS27 INS60 INS21 INS60 INS60 INS25 INS70 INS21 INS52 INS42 INS32 MOV43 INS59 MOV74 INS59 INS74 INS59 INS74 INS59 INS52 INS8 INS27 INS8 INS32 INS42 INS33 INS32 INS32 INS39 INS59 INS7 INS43 INS59 INS74 INS59 INS27 INS8 INS8 MOV44 INS42 INS8 INS32 MOV27 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 MOV21 INS21 MOV21 MOV21 INS42 INS33 INS21 INS42 INS33 INS33 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS33 INS21 INS21 UPD42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS25 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS45 INS42 INS9 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL34 DEL32 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL27 DEL36 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL51 DEL8 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL8 DEL25 DEL8