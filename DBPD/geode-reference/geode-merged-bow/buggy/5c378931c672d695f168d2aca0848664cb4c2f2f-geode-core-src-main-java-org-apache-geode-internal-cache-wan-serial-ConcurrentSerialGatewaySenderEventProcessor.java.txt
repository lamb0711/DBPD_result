GEODE-5087: send a BatchDestroyOperation for each dropped event at serial primary sender (#1924)


+  public void setModifiedEventId(EntryEventImpl clonedEvent, int index) {
+    EventID originalEventId = clonedEvent.getEventId();
+    if (logger.isDebugEnabled()) {
+      logger.debug("The original EventId is {}", originalEventId);
+    }
+    // PARALLEL_THREAD_BUFFER * (index +1) + originalEventId.getThreadID();
+    // generating threadId by the algorithm explained above used to clash with
+    // fakeThreadId generated by putAll
+    // below is new way to generate threadId so that it doesn't clash with
+    // any.
+    long newThreadId =
+        ThreadIdentifier.createFakeThreadIDForParallelGateway(index, originalEventId.getThreadID(),
+            0 /*
+               * gateway sender event id index has already been applied in
+               * SerialGatewaySenderImpl.setModifiedEventId
+               */);
+    EventID newEventId = new EventID(originalEventId.getMembershipID(), newThreadId,
+        originalEventId.getSequenceID());
+    if (logger.isDebugEnabled()) {
+      logger.debug(
+          "{}: Generated event id for event with key={}, index={}, original event id={}, threadId={}, new event id={}, newThreadId={}"
+              + ":index=" + this.sender.getEventIdIndex(),
+          this, clonedEvent.getKey(), index, originalEventId,
+          ThreadIdentifier.toDisplayString(originalEventId.getThreadID()), newEventId,
+          ThreadIdentifier.toDisplayString(newThreadId));
+    }
+    clonedEvent.setEventId(newEventId);
+  }
+
-        EventID originalEventId = clonedEvent.getEventId();
-        if (logger.isDebugEnabled()) {
-          logger.debug("The original EventId is {}", originalEventId);
-        }
-        // PARALLEL_THREAD_BUFFER * (index +1) + originalEventId.getThreadID();
-        // generating threadId by the algorithm explained above used to clash with
-        // fakeThreadId generated by putAll
-        // below is new way to generate threadId so that it doesn't clash with
-        // any.
-        long newThreadId = ThreadIdentifier.createFakeThreadIDForParallelGateway(index,
-            originalEventId.getThreadID(),
-            0 /*
-               * gateway sender event id index has already been applied in
-               * SerialGatewaySenderImpl.setModifiedEventId
-               */);
-        EventID newEventId = new EventID(originalEventId.getMembershipID(), newThreadId,
-            originalEventId.getSequenceID());
-        if (logger.isDebugEnabled()) {
-          logger.debug(
-              "{}: Generated event id for event with key={}, index={}, original event id={}, threadId={}, new event id={}, newThreadId={}",
-              this, event.getKey(), index, originalEventId, originalEventId.getThreadID(),
-              newEventId, newThreadId);
-        }
-        clonedEvent.setEventId(newEventId);
+        setModifiedEventId(clonedEvent, index);
+  protected void registerEventDroppedInPrimaryQueue(EntryEventImpl droppedEvent) {
+    this.getSender().setModifiedEventId(droppedEvent);
+    // modified event again for concurrent SGSEP
+    int index = Math.abs(getHashCode(((EntryEventImpl) droppedEvent)) % this.processors.size());
+    setModifiedEventId(droppedEvent, index);
+
+    this.processors.get(index).sendBatchDestroyOperationForDroppedEvent(droppedEvent, index);
+  }
+
+  @Override

INS31 INS31 INS83 INS39 INS42 INS44 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS21 INS60 INS21 INS21 INS42 INS42 INS32 INS39 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS8 INS52 INS42 INS42 INS42 INS27 INS22 INS42 INS42 INS27 INS52 INS32 INS32 INS21 MOV21 INS32 INS32 INS52 INS42 INS45 INS45 INS32 UPD42 INS42 INS42 MOV32 INS42 INS42 MOV42 INS32 INS42 INS36 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS11 INS52 INS42 INS52 INS42 INS43 INS42 INS42 DEL45 DEL52