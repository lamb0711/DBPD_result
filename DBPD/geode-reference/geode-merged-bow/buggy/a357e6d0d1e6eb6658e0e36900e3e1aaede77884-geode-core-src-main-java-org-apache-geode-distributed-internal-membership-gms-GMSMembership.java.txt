GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import java.util.concurrent.TimeoutException;
-import org.apache.geode.CancelException;
-import org.apache.geode.ForcedDisconnectException;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.SystemConnectException;
-import org.apache.geode.distributed.DistributedSystemDisconnectedException;
-import org.apache.geode.distributed.internal.DistributionException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberShunnedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.distributed.internal.membership.gms.api.MembershipTestHook;
-import org.apache.geode.internal.tcp.ConnectionException;
-import org.apache.geode.internal.tcp.MemberShunnedException;
-import org.apache.geode.security.GemFireSecurityException;
-   * Membership failure listeners - for testing
-   */
-  private List<MembershipTestHook> membershipTestHooks;
-
-  /**
-        try {
-          listener.newMemberConnected(m);
-        } catch (VirtualMachineError err) {
-          // If this ever returns, rethrow the error. We're poisoned
-          // now, so don't let this thread continue.
-          throw err;
-        } catch (DistributedSystemDisconnectedException e) {
-          // don't log shutdown exceptions
-        } catch (Throwable t) {
-          logger.info(String.format("Membership: Fault while processing view addition of %s",
-              m),
-              t);
-        }
+        listener.newMemberConnected(m);
-      try {
-        listener.viewInstalled(latestView);
-      } catch (DistributedSystemDisconnectedException se) {
-      }
+      listener.viewInstalled(latestView);
-   * @throws SystemConnectException - problem joining
-  private void join() {
+  private void join() throws MemberStartupException {
-          throw new GemFireConfigException("Unable to join the distributed system.  "
+          throw new MembershipConfigurationException("Unable to join the distributed system.  "
-
-      } catch (RuntimeException ex) {
-        throw ex;
-      } catch (Exception ex) {
-        if (ex.getCause() != null && ex.getCause().getCause() instanceof SystemConnectException) {
-          throw (SystemConnectException) (ex.getCause().getCause());
-        }
-        throw new DistributionException(
-            "An Exception was thrown while attempting to join the distributed system.",
-            ex);
-    try {
-      listener.memberDeparted(dm, crashed, reason);
-    } catch (DistributedSystemDisconnectedException se) {
-      // let's not get huffy about it
-    }
+    listener.memberDeparted(dm, crashed, reason);
-    // fix for bug #41329, hang waiting for replies
-    try {
-      listener.memberDeparted(mbr, true,
-          "failed to pass startup checks");
-    } catch (DistributedSystemDisconnectedException se) {
-      // let's not get huffy about it
-    }
+    listener.memberDeparted(mbr, true,
+        "failed to pass startup checks");
-          } catch (CancelException e) {
+          } catch (MembershipClosedException | MemberDisconnectedException e) {
-  protected void handleOrDeferMessage(Message<ID> msg) {
+  protected void handleOrDeferMessage(Message<ID> msg) throws MemberShunnedException {
-  protected void dispatchMessage(Message<ID> msg) {
+  protected void dispatchMessage(Message<ID> msg) throws MemberShunnedException {
-      messageListener.messageReceived((Message<ID>) v);
+      try {
+        messageListener.messageReceived((Message<ID>) v);
+      } catch (MemberShunnedException e) {
+        logger.error("View installation was blocked by a MemberShunnedException", e);
+      }
-      try {
-        listener.memberSuspect(suspect, who, suspectInfo.reason);
-      } catch (DistributedSystemDisconnectedException se) {
-        // let's not get huffy about it
-      }
+      listener.memberSuspect(suspect, who, suspectInfo.reason);
+    } else {
+      throw new IllegalArgumentException("unknown startup event: " + o);
-
-    else // sanity
-      throw new InternalGemFireError(
-          String.format("unknown startup event: %s", o));
-  public void processMessage(final Message<ID> msg) {
+  public void processMessage(final Message<ID> msg) throws MemberShunnedException {
-        if (membershipTestHooks != null) {
-          List<MembershipTestHook> l = membershipTestHooks;
-          for (final MembershipTestHook aL : l) {
-            MembershipTestHook dml = aL;
-            dml.beforeMembershipFailure(reason, e);
-          }
-        }
-        if (membershipTestHooks != null) {
-          List<MembershipTestHook> l = membershipTestHooks;
-          for (final MembershipTestHook aL : l) {
-            MembershipTestHook dml = aL;
-            dml.afterMembershipFailure(reason, e);
-          }
-        }
-  public boolean requestMemberRemoval(ID mbr, String reason) {
+  public boolean requestMemberRemoval(ID mbr, String reason) throws MemberDisconnectedException {
-      Throwable problem = e;
+      RuntimeException problem = e;
-        if (cause instanceof ForcedDisconnectException) {
-          problem = cause;
+        if ((cause instanceof MemberDisconnectedException)) {
+          throw (MemberDisconnectedException) cause;
-      throw new DistributedSystemDisconnectedException("Channel closed", problem);
+      throw new MembershipClosedException("Channel closed", problem);
-   * @throws DistributedSystemDisconnectedException if the system is shutting down
+   * @throws MembershipClosedException if the system is shutting down
-  public void checkCancelled() {
+  public void checkCancelled() throws MembershipClosedException {
-      throw new DistributedSystemDisconnectedException("Distributed System is shutting down",
+      throw new MembershipClosedException("Distributed System is shutting down",
-      throws InterruptedException {
+      throws InterruptedException, TimeoutException {
-  @Override
-  public void registerTestHook(MembershipTestHook mth) {
-    // lock for additions to avoid races during startup
-    latestViewWriteLock.lock();
-    try {
-      if (this.membershipTestHooks == null) {
-        this.membershipTestHooks = Collections.singletonList(mth);
-      } else {
-        List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
-        l.add(mth);
-        this.membershipTestHooks = l;
-      }
-    } finally {
-      latestViewWriteLock.unlock();
-    }
-  }
-
-  @Override
-  public void unregisterTestHook(MembershipTestHook mth) {
-    latestViewWriteLock.lock();
-    try {
-      if (this.membershipTestHooks != null) {
-        if (this.membershipTestHooks.size() == 1) {
-          this.membershipTestHooks = null;
-        } else {
-          List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
-          l.remove(mth);
-          this.membershipTestHooks = l;
-        }
-      }
-    } finally {
-      latestViewWriteLock.unlock();
-    }
-  }
-
-  public void start() {
-    try {
-      services.start();
-    } catch (ConnectionException e) {
-      throw new DistributionException(
-          "Unable to create membership manager",
-          e);
-    } catch (GemFireConfigException | SystemConnectException | GemFireSecurityException e) {
-      throw e;
-    } catch (RuntimeException e) {
-      Services.getLogger().error("Unexpected problem starting up membership services", e);
-      throw new SystemConnectException("Problem starting up membership services", e);
-    }
+  public void start() throws MemberStartupException {
+    services.start();
-    public void init(Services<ID> services) {
+    public void init(Services<ID> services) throws MembershipConfigurationException {
-    public void start() {
+    public void start() throws MemberStartupException {
-    public void joinDistributedSystem() {
+    public void joinDistributedSystem() throws MemberStartupException {
-      } catch (RuntimeException e) {
+      } catch (MemberStartupException | RuntimeException e) {
-      final Exception shutdownCause = new ForcedDisconnectException(reason);
+      final Exception shutdownCause = new MemberDisconnectedException(reason);
-            new ForcedDisconnectException("reconnecting system failed to connect"));
+            new MemberDisconnectedException("reconnecting system failed to connect"));
-        } catch (CancelException e) {
-          // safe to ignore - a forced disconnect probably occurred
+        } catch (Exception e) {
+          logger.info("Quorum-loss listener threw an exception", e);
-    public void processMessage(Message<ID> msg) {
+    public void processMessage(Message<ID> msg) throws MemberShunnedException {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 MOV8 MOV8 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV8 INS42 MOV60 MOV21 MOV25 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS43 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 MOV21 INS54 MOV21 INS8 INS12 INS8 INS8 MOV21 MOV21 INS44 INS8 INS53 MOV21 MOV43 UPD43 INS84 UPD43 INS43 INS42 INS21 MOV14 UPD43 UPD42 INS43 INS43 UPD42 MOV44 INS8 INS42 INS32 UPD43 INS27 INS36 UPD42 INS42 MOV42 UPD43 UPD42 INS21 INS42 INS42 INS45 INS42 UPD42 INS45 INS42 INS62 INS53 UPD42 INS32 UPD43 MOV42 UPD43 MOV43 INS11 INS42 INS42 INS45 INS42 UPD42 UPD42 INS43 INS42 INS42 INS84 INS43 INS43 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL66 DEL65 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL36 DEL11 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL43 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL45 DEL42 DEL32 DEL53 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL42 DEL43 DEL62 DEL42 DEL42 DEL7 DEL21 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL34 DEL27 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL43 DEL42 DEL43 DEL42 DEL44 DEL8