GEODE-5401: Check if transaction has been failed over before expiring client transactions. (#2197)

* Use ExpireDisconnectedClientTransactionsMessage instead of TXManagerImpl.TXRemovalMessage when expire client transactions.

* Only send new message to Geode 1.7.0 and later servers - assuming old version servers will be rolled soon.

* Handle differently when server receives this message based on sender version.


-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import org.apache.geode.DataSerializer;
+import org.apache.geode.annotations.TestingOnly;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
+  // Used for testing only.
+  private final Set<TXId> scheduledToBeRemovedTx =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "trackScheduledToBeRemovedTx")
+          ? new ConcurrentHashSet<TXId>() : null;
+
-
-
+      if (tx.isOnBehalfOfClient()) {
+        updateLastOperationTime(tx);
+      }
+  void updateLastOperationTime(TXStateProxy tx) {
+    ((TXStateProxyImpl) tx).setLastOperationTimeFromClient(System.currentTimeMillis());
+  }
+
-   * Cleanup the remote txState after commit and rollback
+   * Cleanup the txState
+  public void removeHostedTXState(Set<TXId> txIds) {
+    for (TXId txId : txIds) {
+      removeHostedTXState(txId);
+    }
+  }
+
-  /** remove the given TXStates */
-  public void removeTransactions(Set<TXId> txIds, boolean distribute) {
+  /**
+   * This method is only being invoked by pre geode 1.7.0 server during rolling upgrade now.
+   * The remote server has waited for transactionTimeToLive and require this server to
+   * remove the client transactions. Need to check if there is no activity of the client
+   * transaction.
+   */
+  public void removeExpiredClientTransactions(Set<TXId> txIds) {
+      for (TXId txId : txIds) {
+        // only expire client transaction if no activity for the given transactionTimeToLive
+        scheduleToRemoveExpiredClientTransaction(txId);
+      }
+    }
+  }
+
+  @TestingOnly
+  /** remove the given TXStates for test */
+  public void removeTransactions(Set<TXId> txIds, boolean distribute) {
+    synchronized (this.hostedTXStates) {
-    if (distribute) {
-      // tell other VMs to also remove the transactions
-      TXRemovalMessage.send(this.dm, this.dm.getOtherDistributionManagerIds(), txIds);
-    }
-  public static class TXRemovalMessage extends HighPriorityDistributionMessage {
-
-    Set<TXId> txIds;
-
-    /** for deserialization */
-    public TXRemovalMessage() {}
-
-    static void send(DistributionManager dm, Set recipients, Set<TXId> txIds) {
-      TXRemovalMessage msg = new TXRemovalMessage();
-      msg.txIds = txIds;
-      msg.setRecipients(recipients);
-      dm.putOutgoing(msg);
+  /** timer task for expiring the given TXStates */
+  public void expireDisconnectedClientTransactions(Set<TXId> txIds, boolean distribute) {
+    // increase the client transaction timeout setting to avoid a late in-flight client operation
+    // preventing the expiration of the client transaction.
+    long timeout = (long) (TimeUnit.SECONDS.toMillis(getTransactionTimeToLive()) * 1.1);
+    if (timeout <= 0) {
+      removeHostedTXState(txIds);
-
-    @Override
-    public void toData(DataOutput out) throws IOException {
-      DataSerializer.writeHashSet((HashSet<TXId>) this.txIds, out);
+    synchronized (this.hostedTXStates) {
+      Iterator<Map.Entry<TXId, TXStateProxy>> iterator = this.hostedTXStates.entrySet().iterator();
+      while (iterator.hasNext()) {
+        Map.Entry<TXId, TXStateProxy> entry = iterator.next();
+        if (txIds.contains(entry.getKey())) {
+          scheduleToRemoveClientTransaction(entry.getKey(), timeout);
+        }
+      }
-
-    @Override
-    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.txIds = DataSerializer.readHashSet(in);
+    if (distribute) {
+      expireClientTransactionsOnRemoteServer(txIds);
+  }
-    public int getDSFID() {
-      return TX_MANAGER_REMOVE_TRANSACTIONS;
+  void expireClientTransactionsOnRemoteServer(Set<TXId> txIds) {
+    // tell other VMs to also add tasks to expire the transactions
+    ExpireDisconnectedClientTransactionsMessage.send(this.dm,
+        this.dm.getOtherDistributionManagerIds(), txIds);
+  }
+
+  /**
+   * expire the transaction states for the given client.
+   * If the timeout is non-positive we expire the states immediately
+   */
+  void scheduleToRemoveClientTransaction(TXId txId, long timeout) {
+    if (timeout <= 0) {
+      removeHostedTXState(txId);
+    } else {
+      if (scheduledToBeRemovedTx != null) {
+        scheduledToBeRemovedTx.add(txId);
+      }
+      SystemTimerTask task = new SystemTimerTask() {
+        @Override
+        public void run2() {
+          scheduleToRemoveExpiredClientTransaction(txId);
+          if (scheduledToBeRemovedTx != null) {
+            scheduledToBeRemovedTx.remove(txId);
+          }
+        }
+      };
+      getCache().getCCPTimer().schedule(task, timeout);
+  }
-    @Override
-    protected void process(ClusterDistributionManager dm) {
-      InternalCache cache = dm.getCache();
-      if (cache != null) {
-        TXManagerImpl mgr = cache.getTXMgr();
-        mgr.removeTransactions(this.txIds, false);
+  void scheduleToRemoveExpiredClientTransaction(TXId txId) {
+    synchronized (this.hostedTXStates) {
+      TXStateProxy result = hostedTXStates.get(txId);
+      if (result != null) {
+        if (((TXStateProxyImpl) result).isOverTransactionTimeoutLimit()) {
+          result.close();
+          hostedTXStates.remove(txId);
+        }
-      logger.debug("expiring the following transactions: {}", txIds);
+      logger.debug("expiring the following transactions: {}", Arrays.toString(txIds.toArray()));
+  public Set<TXId> getScheduledToBeRemovedTx() {
+    return scheduledToBeRemovedTx;
+  }
+

MOV26 UPD40 INS23 MOV31 INS31 INS31 MOV31 INS31 INS31 MOV31 INS31 INS83 INS83 INS74 MOV59 INS39 INS42 INS44 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS78 INS44 INS29 INS42 MOV44 INS44 INS8 INS39 INS42 MOV44 MOV8 INS29 MOV39 UPD42 MOV42 MOV44 INS44 INS8 UPD42 INS8 INS83 MOV74 INS42 INS8 INS43 INS43 UPD42 INS16 INS43 INS42 INS21 INS74 INS42 INS70 INS65 INS74 INS42 MOV25 INS51 INS42 INS74 INS42 INS65 INS39 INS42 INS60 INS25 INS51 INS25 INS65 UPD43 UPD42 INS39 INS42 INS25 UPD43 UPD42 INS51 INS41 INS42 UPD42 MOV42 INS32 INS14 INS33 INS42 INS32 UPD66 INS43 INS43 INS44 INS42 INS8 INS66 INS66 INS66 INS66 INS43 INS43 INS22 INS8 INS43 INS43 INS66 INS39 INS59 INS27 INS8 INS22 INS8 INS42 INS8 INS66 INS66 UPD42 INS27 INS8 INS8 UPD42 INS22 INS8 INS42 INS42 INS42 INS27 INS74 INS25 INS36 INS42 INS32 UPD42 MOV42 INS42 UPD43 MOV43 UPD42 MOV42 INS21 INS42 UPD42 MOV42 INS52 INS42 INS70 INS42 INS42 INS42 INS11 INS42 INS34 INS21 INS52 INS42 INS60 INS61 INS21 UPD42 INS42 INS34 INS21 INS25 INS60 INS21 INS52 INS42 MOV60 MOV25 INS40 INS45 INS43 INS43 INS32 INS8 INS11 INS42 INS42 UPD42 INS32 INS44 INS42 INS8 INS39 INS36 INS32 INS74 INS59 INS32 INS8 INS32 INS32 INS27 INS8 INS43 INS59 INS32 UPD43 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS43 INS42 MOV21 INS27 INS42 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS33 MOV21 INS42 INS42 INS14 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS25 INS32 INS32 INS42 INS42 INS32 INS34 UPD42 MOV42 INS43 MOV43 INS43 INS32 INS42 INS74 INS59 INS32 INS8 INS32 INS43 INS1 INS32 INS42 UPD42 UPD42 INS42 INS32 INS8 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS40 INS42 INS32 INS40 INS42 INS22 UPD42 MOV42 INS43 UPD43 MOV43 INS43 INS42 INS32 INS42 INS42 INS32 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS31 INS42 INS36 INS42 INS21 MOV21 MOV42 INS42 INS42 INS52 INS42 INS40 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 MOV78 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS11 INS32 INS42 INS32 UPD42 MOV42 INS21 INS25 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS27 INS8 UPD42 MOV42 INS42 INS42 INS42 INS33 INS21 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL66 DEL65 DEL29 DEL42 DEL25 DEL42 DEL78 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL74 DEL52 DEL42 DEL22 DEL11 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL32 DEL7 DEL83 DEL52 DEL42 DEL22 DEL9 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL83 DEL83 DEL42 DEL43 DEL23 DEL44 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL8 DEL31 DEL42 DEL41 DEL8 DEL31 DEL55