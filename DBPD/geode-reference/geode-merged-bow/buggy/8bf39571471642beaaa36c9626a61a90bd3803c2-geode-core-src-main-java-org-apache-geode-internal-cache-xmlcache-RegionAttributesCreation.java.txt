Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents {@link RegionAttributes} that are created declaratively.
- * Notice that it implements the {@link RegionAttributes} interface so
- * that this class must be updated when {@link RegionAttributes} is
- * modified.  This class is public for testing purposes.
+ * Represents {@link RegionAttributes} that are created declaratively. Notice that it implements the
+ * {@link RegionAttributes} interface so that this class must be updated when
+ * {@link RegionAttributes} is modified. This class is public for testing purposes.
-public class RegionAttributesCreation extends UserSpecifiedRegionAttributes implements Serializable {
+public class RegionAttributesCreation extends UserSpecifiedRegionAttributes
+    implements Serializable {
-  private static final RegionAttributes defaultAttributes =
-    new AttributesFactory().create();
+  private static final RegionAttributes defaultAttributes = new AttributesFactory().create();
-  ///////////////////////  Instance Fields  ///////////////////////
+  /////////////////////// Instance Fields ///////////////////////
-  /** The attributes' concurrency level  */
+  /** The attributes' concurrency level */
-  /** disk store name of the region
-  * @since GemFire prPersistPrint2
-  * */
+  /**
+   * disk store name of the region
+   * 
+   * @since GemFire prPersistPrint2
+   */
-  
+
-  /** The attributes's id
+  /**
+   * The attributes's id
-   * @since GemFire 4.1 */
+   * @since GemFire 4.1
+   */
-  /** The id of the attributes that this attributes "inherits"
+  /**
+   * The id of the attributes that this attributes "inherits"
-   * @since GemFire 4.1 */
+   * @since GemFire 4.1
+   */
-    
+
-  
+
-  
+
-  
+
+   * 
+
-   * Creates a new <code>RegionAttributesCreation</code> with the
-   * default region attributes.
+   * Creates a new <code>RegionAttributesCreation</code> with the default region attributes.
+
-   * Creates a new <code>RegionAttributesCreation</code> with the
-   * given region attributes.
-   * NOTE: Currently attrs will not be an instance of RegionAttributesCreation.
-   *  If it could be then this code should be changed to use attrs' hasXXX methods
-   *  to initialize the has booleans when defaults is false.
+   * Creates a new <code>RegionAttributesCreation</code> with the given region attributes. NOTE:
+   * Currently attrs will not be an instance of RegionAttributesCreation. If it could be then this
+   * code should be changed to use attrs' hasXXX methods to initialize the has booleans when
+   * defaults is false.
+   * 
-      if (! defaults) {
-        // Selectively set has* fields to true, propagating those non-default 
+      if (!defaults) {
+        // Selectively set has* fields to true, propagating those non-default
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Returns whether or not two objects are {@linkplain Object#equals
-   * equals} taking <code>null</code> into account.
+   * Returns whether or not two objects are {@linkplain Object#equals equals} taking
+   * <code>null</code> into account.
-      if (array1[i] != array2[i]) { return false; }
+      if (array1[i] != array2[i]) {
+        return false;
+      }
-  
-  
+
+
-      if (array1[i] != array2[i]) { return false; }
+      if (array1[i] != array2[i]) {
+        return false;
+      }
-  
+
-   * Returns whether or not two <code>File</code> arrays specify the
-   * same files.
+   * Returns whether or not two <code>File</code> arrays specify the same files.
-        if (equal(array1[i].getAbsoluteFile(),
-                  array2[j].getAbsoluteFile())) {
+        if (equal(array1[i].getAbsoluteFile(), array2[j].getAbsoluteFile())) {
-   * Returns whether or not this <code>RegionAttributesCreation</code>
-   * is equivalent to another <code>RegionAttributes</code>.
+   * Returns whether or not this <code>RegionAttributesCreation</code> is equivalent to another
+   * <code>RegionAttributes</code>.
-//     if (!equal(this.cacheListeners, Arrays.asList(other.getCacheListeners()))) {
-//       throw new RuntimeException("cacheListeners not equal "
-//                                  + this.cacheListeners
-//                                  + " and "
-//                                  + Arrays.asList(other.getCacheListeners())
-//                                  + " this=" + this
-//                                  + " other=" + other);
-//     }
-    if (! equal(this.cacheListeners, Arrays.asList(other.getCacheListeners()))) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CACHELISTENERS_ARE_NOT_THE_SAME.toLocalizedString());
+    // if (!equal(this.cacheListeners, Arrays.asList(other.getCacheListeners()))) {
+    // throw new RuntimeException("cacheListeners not equal "
+    // + this.cacheListeners
+    // + " and "
+    // + Arrays.asList(other.getCacheListeners())
+    // + " this=" + this
+    // + " other=" + other);
+    // }
+    if (!equal(this.cacheListeners, Arrays.asList(other.getCacheListeners()))) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_CACHELISTENERS_ARE_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.entryIdleTimeout, other.getEntryIdleTimeout())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENTRYIDLETIMEOUT_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.entryIdleTimeout, other.getEntryIdleTimeout())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_ENTRYIDLETIMEOUT_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.customEntryIdleTimeout, other.getCustomEntryIdleTimeout())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYIDLETIMEOUT_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.customEntryIdleTimeout, other.getCustomEntryIdleTimeout())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYIDLETIMEOUT_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if(! equal(this.entryTimeToLive, other.getEntryTimeToLive())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENTRYTIMETOLIVE_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.entryTimeToLive, other.getEntryTimeToLive())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_ENTRYTIMETOLIVE_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.customEntryTimeToLive, other.getCustomEntryTimeToLive())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYTIMETOLIVE_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.customEntryTimeToLive, other.getCustomEntryTimeToLive())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYTIMETOLIVE_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.partitionAttributes, other.getPartitionAttributes())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_PARTITIONATTRIBUTES_ARE_NOT_THE_SAME_0_1.toLocalizedString(new Object[] {this, other.getPartitionAttributes()}));
+    if (!equal(this.partitionAttributes, other.getPartitionAttributes())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_PARTITIONATTRIBUTES_ARE_NOT_THE_SAME_0_1
+              .toLocalizedString(new Object[] {this, other.getPartitionAttributes()}));
-    if (! equal(this.membershipAttributes, other.getMembershipAttributes())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_MEMBERSHIP_ATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.membershipAttributes, other.getMembershipAttributes())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_MEMBERSHIP_ATTRIBUTES_ARE_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.subscriptionAttributes, other.getSubscriptionAttributes())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_SUBSCRIPTION_ATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.subscriptionAttributes, other.getSubscriptionAttributes())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_SUBSCRIPTION_ATTRIBUTES_ARE_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.evictionAttributes, other.getEvictionAttributes())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_EVICTION_ATTRIBUTES_ARE_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[] {this.evictionAttributes, other.getEvictionAttributes()}));
+    if (!equal(this.evictionAttributes, other.getEvictionAttributes())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_EVICTION_ATTRIBUTES_ARE_NOT_THE_SAME_THIS_0_OTHER_1
+              .toLocalizedString(
+                  new Object[] {this.evictionAttributes, other.getEvictionAttributes()}));
-      if (! equal(this.diskWriteAttributes, other.getDiskWriteAttributes())) {
-        throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISTWRITEATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());
+      if (!equal(this.diskWriteAttributes, other.getDiskWriteAttributes())) {
+        throw new RuntimeException(
+            LocalizedStrings.RegionAttributesCreation_DISTWRITEATTRIBUTES_ARE_NOT_THE_SAME
+                .toLocalizedString());
-      if (! equal(this.diskDirs, other.getDiskDirs())) {
-        throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISK_DIRS_ARE_NOT_THE_SAME.toLocalizedString());
+      if (!equal(this.diskDirs, other.getDiskDirs())) {
+        throw new RuntimeException(
+            LocalizedStrings.RegionAttributesCreation_DISK_DIRS_ARE_NOT_THE_SAME
+                .toLocalizedString());
-      if (! equal(this.diskSizes, other.getDiskDirSizes())) {
-        throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISK_DIR_SIZES_ARE_NOT_THE_SAME.toLocalizedString());
+      if (!equal(this.diskSizes, other.getDiskDirSizes())) {
+        throw new RuntimeException(
+            LocalizedStrings.RegionAttributesCreation_DISK_DIR_SIZES_ARE_NOT_THE_SAME
+                .toLocalizedString());
-    if (! equal(this.diskStoreName, other.getDiskStoreName())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISKSTORE_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[] {this.diskStoreName, other.getDiskStoreName()}));
+    if (!equal(this.diskStoreName, other.getDiskStoreName())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_DISKSTORE_IS_NOT_THE_SAME_THIS_0_OTHER_1
+              .toLocalizedString(new Object[] {this.diskStoreName, other.getDiskStoreName()}));
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISKSYNCHRONOUS_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_DISKSYNCHRONOUS_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DATA_POLICIES_ARE_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[] {this.getDataPolicy(), other.getDataPolicy()}));
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_DATA_POLICIES_ARE_NOT_THE_SAME_THIS_0_OTHER_1
+              .toLocalizedString(new Object[] {this.getDataPolicy(), other.getDataPolicy()}));
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_EARLY_ACK_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_EARLY_ACK_IS_NOT_THE_SAME.toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_SUBSCRIPTION_CONFLATION_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_ENABLE_SUBSCRIPTION_CONFLATION_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_ASYNC_CONFLATION_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_ENABLE_ASYNC_CONFLATION_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_INITIAL_CAPACITY_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_INITIAL_CAPACITY_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.keyConstraint, other.getKeyConstraint())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_KEY_CONSTRAINTS_ARE_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.keyConstraint, other.getKeyConstraint())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_KEY_CONSTRAINTS_ARE_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.valueConstraint, other.getValueConstraint())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_VALUE_CONSTRAINTS_ARE_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.valueConstraint, other.getValueConstraint())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_VALUE_CONSTRAINTS_ARE_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_LOAD_FACTORS_ARE_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_LOAD_FACTORS_ARE_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.regionIdleTimeout, other.getRegionIdleTimeout())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_REGION_IDLE_TIMEOUT_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.regionIdleTimeout, other.getRegionIdleTimeout())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_REGION_IDLE_TIMEOUT_IS_NOT_THE_SAME
+              .toLocalizedString());
-    if (! equal(this.scope, this.getScope())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_SCOPE_IS_NOT_THE_SAME.toLocalizedString());
+    if (!equal(this.scope, this.getScope())) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_SCOPE_IS_NOT_THE_SAME.toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_STATISTICS_ENABLED_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[] {Boolean.valueOf(this.statisticsEnabled), Boolean.valueOf(other.getStatisticsEnabled())}));
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_STATISTICS_ENABLED_IS_NOT_THE_SAME_THIS_0_OTHER_1
+              .toLocalizedString(new Object[] {Boolean.valueOf(this.statisticsEnabled),
+                  Boolean.valueOf(other.getStatisticsEnabled())}));
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_IGNORE_JTA_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_IGNORE_JTA_IS_NOT_THE_SAME.toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CONCURRENCYLEVEL_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_CONCURRENCYLEVEL_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CONCURRENCYCHECKSENABLED_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_CONCURRENCYCHECKSENABLED_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_INDEX_MAINTENANCE_SYNCHRONOUS_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_INDEX_MAINTENANCE_SYNCHRONOUS_IS_NOT_THE_SAME
+              .toLocalizedString());
-      throw new RuntimeException("poolName is not the same: " + this.poolName + " != " + other.getPoolName());
+      throw new RuntimeException(
+          "poolName is not the same: " + this.poolName + " != " + other.getPoolName());
-    if (! equal(this.cacheLoader, other.getCacheLoader())) {
+    if (!equal(this.cacheLoader, other.getCacheLoader())) {
-    if(! equal(this.cacheWriter, other.getCacheWriter())) {
+    if (!equal(this.cacheWriter, other.getCacheWriter())) {
-      String s = "MulticastEnabled is not the same: "   
-        + this.multicastEnabled + "!=" + other.getMulticastEnabled();
+      String s = "MulticastEnabled is not the same: " + this.multicastEnabled + "!="
+          + other.getMulticastEnabled();
-    if(this.cloningEnabled != other.getCloningEnabled()){
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation__CLONING_ENABLE_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[] {Boolean.valueOf(this.cloningEnabled), Boolean.valueOf(other.getCloningEnabled())}));
+    if (this.cloningEnabled != other.getCloningEnabled()) {
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation__CLONING_ENABLE_IS_NOT_THE_SAME_THIS_0_OTHER_1
+              .toLocalizedString(new Object[] {Boolean.valueOf(this.cloningEnabled),
+                  Boolean.valueOf(other.getCloningEnabled())}));
-    if(! equal(this.compressor, other.getCompressor())) {
+    if (!equal(this.compressor, other.getCompressor())) {
-      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_OFF_HEAP_MEMORY_IS_NOT_THE_SAME.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.RegionAttributesCreation_ENABLE_OFF_HEAP_MEMORY_IS_NOT_THE_SAME
+              .toLocalizedString());
-  public ExpirationAttributes setRegionTimeToLive(ExpirationAttributes
-                                                  timeToLive) {
+  public ExpirationAttributes setRegionTimeToLive(ExpirationAttributes timeToLive) {
-  public ExpirationAttributes
-    setRegionIdleTimeout(ExpirationAttributes idleTimeout) {
+  public ExpirationAttributes setRegionIdleTimeout(ExpirationAttributes idleTimeout) {
-  
+
-  public ExpirationAttributes setEntryTimeToLive(
-      ExpirationAttributes timeToLive) {
+  public ExpirationAttributes setEntryTimeToLive(ExpirationAttributes timeToLive) {
-  
+
-  
+
-  public ExpirationAttributes setEntryIdleTimeout(
-      ExpirationAttributes idleTimeout) {
+  public ExpirationAttributes setEntryIdleTimeout(ExpirationAttributes idleTimeout) {
-  
+
-    if (this.dataPolicy.isNormal() || this.dataPolicy.isPreloaded()
-        || this.dataPolicy.isEmpty() || this.dataPolicy.withPartitioning()) {
+    if (this.dataPolicy.isNormal() || this.dataPolicy.isPreloaded() || this.dataPolicy.isEmpty()
+        || this.dataPolicy.withPartitioning()) {
-      throw new IllegalStateException(LocalizedStrings.RegionAttributesCreation_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0.toLocalizedString(this.dataPolicy));
+      throw new IllegalStateException(
+          LocalizedStrings.RegionAttributesCreation_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0
+              .toLocalizedString(this.dataPolicy));
+
-      return (CacheListener)this.cacheListeners.get(0);
+      return (CacheListener) this.cacheListeners.get(0);
-      throw new IllegalStateException(LocalizedStrings.RegionAttributesCreation_MORE_THAN_ONE_CACHE_LISTENER_EXISTS.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.RegionAttributesCreation_MORE_THAN_ONE_CACHE_LISTENER_EXISTS
+              .toLocalizedString());
+
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-//    this.publisher = v;
-//    setHasPublisher(true);
+    // this.publisher = v;
+    // setHasPublisher(true);
-  
+
+
-    //Asif: Take the value of isSynchronous from it;
-    //Asif : Is this correct?
+    // Asif: Take the value of isSynchronous from it;
+    // Asif : Is this correct?
-  public void setDiskDirs(File[] diskDirs)
-  {
+  public void setDiskDirs(File[] diskDirs) {
+
+
-   //Asif: If DiskWriteAttributes is set, the flag needs to be checked from DiskWriteAttribs
-    //TODO: Should we set the correct value in the flag isDiskSynchronous
-    /*if(hasDiskWriteAttributes()) {
-      return this.diskWriteAttributes.isSynchronous();
-    }else {
-      return this.isDiskSynchronous;
-    }*/
+    // Asif: If DiskWriteAttributes is set, the flag needs to be checked from DiskWriteAttribs
+    // TODO: Should we set the correct value in the flag isDiskSynchronous
+    /*
+     * if(hasDiskWriteAttributes()) { return this.diskWriteAttributes.isSynchronous(); }else {
+     * return this.isDiskSynchronous; }
+     */
+
-  private void checkIfDirectoriesExist(File[] diskDirs)
-  {
-    for (int i=0; i < diskDirs.length; i++) {
-      if (! diskDirs[i].isDirectory()) {
-        throw new IllegalArgumentException(LocalizedStrings.RegionAttributesCreation__0_WAS_NOT_AN_EXISTING_DIRECTORY.toLocalizedString(diskDirs[i]));
+  private void checkIfDirectoriesExist(File[] diskDirs) {
+    for (int i = 0; i < diskDirs.length; i++) {
+      if (!diskDirs[i].isDirectory()) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.RegionAttributesCreation__0_WAS_NOT_AN_EXISTING_DIRECTORY
+                .toLocalizedString(diskDirs[i]));
-  
+
-    if(sizes.length != this.diskDirs.length) {
-      throw new IllegalArgumentException(LocalizedStrings.RegionAttributesCreation_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1.toLocalizedString(new Object[] {Integer.valueOf(sizes.length), Integer.valueOf(diskDirs.length)}));
+    if (sizes.length != this.diskDirs.length) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.RegionAttributesCreation_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1
+              .toLocalizedString(
+                  new Object[] {Integer.valueOf(sizes.length), Integer.valueOf(diskDirs.length)}));
- 
- private void verifyNonNegativeDirSize(int[] sizes){
-   for(int i=0; i< sizes.length; i++){
-     if(sizes[i]<0){
-       throw new IllegalArgumentException(LocalizedStrings.RegionAttributesCreation_DIR_SIZE_CANNOT_BE_NEGATIVE_0.toLocalizedString(Integer.valueOf(sizes[i])));
-     }
-   }
- }
- 
+
+  private void verifyNonNegativeDirSize(int[] sizes) {
+    for (int i = 0; i < sizes.length; i++) {
+      if (sizes[i] < 0) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.RegionAttributesCreation_DIR_SIZE_CANNOT_BE_NEGATIVE_0
+                .toLocalizedString(Integer.valueOf(sizes[i])));
+      }
+    }
+  }
+
-   * Causes this region attributes to inherit all of the attributes of
-   * its "parent" attributes specified by its <code>refid</code>.
+   * Causes this region attributes to inherit all of the attributes of its "parent" attributes
+   * specified by its <code>refid</code>.
-   * @param cache
-   *        Used to look up named region attributes
+   * @param cache Used to look up named region attributes
-   * @throws IllegalStateException
-   *         If no region attributes named <code>refid</code> exist.
+   * @throws IllegalStateException If no region attributes named <code>refid</code> exist.
+
-          GemFireCacheImpl gfc = (GemFireCacheImpl)cache;
+          GemFireCacheImpl gfc = (GemFireCacheImpl) cache;
-          ClientCacheCreation ccc = (ClientCacheCreation)cache;
+          ClientCacheCreation ccc = (ClientCacheCreation) cache;
-      throw new IllegalStateException(LocalizedStrings.RegionAttributesCreation_CANNOT_REFERENCE_NONEXISTING_REGION_ATTRIBUTES_NAMED_0.toLocalizedString(this.refid));
+      throw new IllegalStateException(
+          LocalizedStrings.RegionAttributesCreation_CANNOT_REFERENCE_NONEXISTING_REGION_ATTRIBUTES_NAMED_0
+              .toLocalizedString(this.refid));
-    
+
-            GemFireCacheImpl gfc = (GemFireCacheImpl)cache;
+            GemFireCacheImpl gfc = (GemFireCacheImpl) cache;
-            ClientCacheCreation ccc = (ClientCacheCreation)cache;
+            ClientCacheCreation ccc = (ClientCacheCreation) cache;
-      }
-      else {
+      } else {
-      }
-      else {
+      } else {
-    
+
-          setCacheLoader(parent.getCacheLoader());  
+          setCacheLoader(parent.getCacheLoader());
-          setCacheWriter(parent.getCacheWriter());  
+          setCacheWriter(parent.getCacheWriter());
-          setEntryTimeToLive(parent.getEntryTimeToLive());  
+          setEntryTimeToLive(parent.getEntryTimeToLive());
-    
+
-    
+
-    
+
-    if(!hasCompressor()) {
+    if (!hasCompressor()) {
-    
+
-    
+
-  public EvictionAttributes getEvictionAttributes()
-  {
+  public EvictionAttributes getEvictionAttributes() {
-  
+
-  
+
-  
+
-    
+
-  
+
-  
+
-  
+
-  
+
-      if (!hasStatisticsEnabled() && !getStatisticsEnabled() &&
-          (getRegionTimeToLive().getTimeout() != 0 ||
-           getRegionIdleTimeout().getTimeout() != 0 ||
-           getEntryTimeToLive().getTimeout() != 0 ||
-           getEntryIdleTimeout().getTimeout() != 0 ||
-           getCustomEntryIdleTimeout() != null ||
-           getCustomEntryTimeToLive() != null)
-          ) {
+      if (!hasStatisticsEnabled() && !getStatisticsEnabled()
+          && (getRegionTimeToLive().getTimeout() != 0 || getRegionIdleTimeout().getTimeout() != 0
+              || getEntryTimeToLive().getTimeout() != 0 || getEntryIdleTimeout().getTimeout() != 0
+              || getCustomEntryIdleTimeout() != null || getCustomEntryTimeToLive() != null)) {
-      if (getDataPolicy().withReplication()
-          && !getDataPolicy().withPersistence()
+      if (getDataPolicy().withReplication() && !getDataPolicy().withPersistence()
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66