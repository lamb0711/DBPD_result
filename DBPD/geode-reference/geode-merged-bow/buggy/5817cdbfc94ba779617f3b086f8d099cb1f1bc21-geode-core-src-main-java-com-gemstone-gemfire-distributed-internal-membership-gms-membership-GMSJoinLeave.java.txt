GEODE-1327 Now ViewReply processor returns copy of members.

Now it also throws interrupt exception which is handled at
caller level.

+import com.gemstone.gemfire.internal.CopyOnWriteHashSet;
-      e.printStackTrace();
-  boolean prepareView(NetView view, List<InternalDistributedMember> newMembers) {
+  boolean prepareView(NetView view, List<InternalDistributedMember> newMembers) throws InterruptedException {
-  void sendView(NetView view, List<InternalDistributedMember> newMembers) {
+  void sendView(NetView view, List<InternalDistributedMember> newMembers) throws InterruptedException {
-  private boolean sendView(NetView view, List<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor viewReplyProcessor) {
+  private boolean sendView(NetView view, List<InternalDistributedMember> newMembers, boolean preparing,
+      ViewReplyProcessor viewReplyProcessor) throws InterruptedException {
-    Set<InternalDistributedMember> waitForResponses() {
-      Set<InternalDistributedMember> result = this.notRepliedYet;
+    Set<InternalDistributedMember> waitForResponses() throws InterruptedException {
+      Set<InternalDistributedMember> result = null;
-              if (!waiting || result.isEmpty() || this.conflictingView != null) {
+              if (!waiting || this.notRepliedYet.isEmpty() || this.conflictingView != null) {
-            Thread.currentThread().interrupt();
-            return result;
+            throw e;
-            result = pendingRemovals;
+            result = new HashSet<>(pendingRemovals);
+            result = new HashSet<>(this.notRepliedYet);
-    Set<InternalDistributedMember> getUnresponsiveMembers() {
-      return this.notRepliedYet;
+    synchronized Set<InternalDistributedMember> getUnresponsiveMembers() {
+      return new HashSet<>(this.notRepliedYet);
-      if (initialView == null) {
-        return;
-      }
-      NetView v = preparedView;
-      if (v != null) {
-        processPreparedView(v);
-      }
-        NetView iView;
-        List<InternalDistributedMember> iJoins;
-        Set<InternalDistributedMember> iLeaves;
-        Set<InternalDistributedMember> iRemoves;
-        synchronized (this) {
-          iView = initialView;
-          iJoins = initialJoins;
-          iLeaves = initialLeaving;
-          iRemoves = initialRemovals;
+        if (initialView == null) {
+          return;
-        if (iView != null) {
-          prepareAndSendView(iView, iJoins, iLeaves, iRemoves);
+        NetView v = preparedView;
+        if (v != null) {
+          processPreparedView(v);
-      } finally {
-        setInitialView(null, null, null, null);
+        try {
+          NetView iView;
+          List<InternalDistributedMember> iJoins;
+          Set<InternalDistributedMember> iLeaves;
+          Set<InternalDistributedMember> iRemoves;
+          synchronized (this) {
+            iView = initialView;
+            iJoins = initialJoins;
+            iLeaves = initialLeaving;
+            iRemoves = initialRemovals;
+          }
+          if (iView != null) {
+            prepareAndSendView(iView, iJoins, iLeaves, iRemoves);
+          }
+        } finally {
+          setInitialView(null, null, null, null);
+        }
+      } catch (InterruptedException e) {
+        shutdown = true;
+            } catch (InterruptedException e) {
+              shutdown = true;
+     * @throws InterruptedException 
-    void createAndSendView(List<DistributionMessage> requests) {
+    void createAndSendView(List<DistributionMessage> requests) throws InterruptedException {
+     * @throws InterruptedException 
-        Set<InternalDistributedMember> removalReqs) {
+        Set<InternalDistributedMember> removalReqs) throws InterruptedException {
-          try {
-            Thread.sleep(BROADCAST_MESSAGE_SLEEP_TIME);
-          } catch (InterruptedException e) {
-            // signal the run() method to exit
-            shutdown = true;
-            return;
-          }
+          Thread.sleep(BROADCAST_MESSAGE_SLEEP_TIME);
+          
-          try {
-            removeHealthyMembers(unresponsive);
-          } catch (InterruptedException e) {
-            // abort the view if interrupted
-            shutdown = true;
-            return;
-          }
+          removeHealthyMembers(unresponsive);          

INS26 INS40 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS83 INS8 INS43 INS43 INS42 INS54 INS65 INS42 INS65 INS42 INS14 MOV8 INS12 INS42 INS66 INS42 INS66 INS33 INS74 INS22 MOV44 INS8 INS43 MOV52 MOV42 MOV21 MOV8 INS42 MOV21 MOV41 INS21 INS53 INS7 INS12 INS42 INS14 INS42 INS14 MOV44 INS8 INS74 INS42 INS74 MOV22 MOV21 INS43 INS43 MOV22 INS42 INS42 INS52 INS42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL8 DEL8 DEL12 DEL54 DEL41 DEL41 DEL8 DEL12 DEL54 DEL8