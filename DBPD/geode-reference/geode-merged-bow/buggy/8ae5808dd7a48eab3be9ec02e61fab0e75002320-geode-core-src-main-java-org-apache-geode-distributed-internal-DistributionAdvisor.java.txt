GEODE-5505 Cache listener not invoked on a retried destroy() operation

Delay region synchronization operations to allow clients to retry their
operations.  This keeps a server from obtaining the change made by a
client in another server that was only partially distributed.  Without
the delay it is possible for the sync to complete before a client retries
its operation, so that the client's replay encounters the state change
it already made in its previous attempt.

With this change a client's replay will either be on a server that didn't
see the previous attempt, or it will be on a server that did see the
previous attempt & has the operation recorded in its EventTracker.  In
the first case the operation will be performed again and transmitted
to other servers.  In the second case the server will not apply the operation
to its cache but will forward it to other servers.

The delay is based on the server's "maximum time between pings interval",
which defaults to 1 minute.

This closes #2340

+import java.util.NoSuchElementException;
+import org.apache.geode.internal.SystemTimer;
-      logger.debug("da.syncForCrashedMember will sync region in waiting thread pool: {}", dr);
+      logger.debug("da.syncForCrashedMember will sync region in cache's timer for region: {}", dr);
-    dr.getDistributionManager().getWaitingThreadPool().execute(new Runnable() {
-      // bug #49601 - don't synchronize until GII has been performed
-      public void run() {
+    // schedule the synchronization for execution in the future based on the client health monitor
+    // interval. This allows client caches to retry an operation that might otherwise be recovered
+    // through the sync operation. Without associated event information this could cause the
+    // retried operation to be mishandled. See GEODE-5505
+    long delay;
+    try {
+      delay = dr.getGemFireCache().getCacheServers().stream().max(
+          (o1, o2) -> o1.getMaximumTimeBetweenPings() - o2.getMaximumTimeBetweenPings()).get()
+          .getMaximumTimeBetweenPings();
+    } catch (NoSuchElementException e) {
+      delay = 0;
+    }
+    dr.getGemFireCache().getCCPTimer().schedule(new SystemTimer.SystemTimerTask() {
+      @Override
+      public void run2() {
-    });
+    }, delay);

INS26 INS26 INS40 INS40 INS60 INS54 INS39 INS59 INS8 INS12 INS42 INS21 INS44 INS8 UPD42 INS42 INS7 INS43 INS42 INS21 UPD42 UPD43 UPD45 INS42 INS32 INS42 INS7 UPD42 INS40 INS32 INS42 INS42 INS34 INS78 UPD42 INS32 INS42 INS42 INS32 INS42 INS86 INS32 INS42 INS59 INS59 INS27 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42