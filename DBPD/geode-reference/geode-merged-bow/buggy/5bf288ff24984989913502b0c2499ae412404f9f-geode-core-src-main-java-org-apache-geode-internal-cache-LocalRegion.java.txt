GEODE-6534: Reduce scope of LocalRegion methods (#3398)

* Reduce scope of methods and fields where possible
* Remove unused methods and fields
* Remove redundant interface
* Replace deprecated call with undeprecated call
* Apply FunctionalInterface annotation to nested interfaces

-import org.apache.geode.internal.cache.persistence.DiskExceptionHandler;
-import org.apache.geode.internal.util.concurrent.StoppableReadWriteLock;
-    ResourceListener<MemoryEvent>, DiskExceptionHandler, InternalPersistentRegion {
+    ResourceListener<MemoryEvent>, InternalPersistentRegion {
-  // package-private to avoid synthetic accessor
-  static final Logger logger = LogService.getLogger();
+  private static final Logger logger = LogService.getLogger();
-  private static final ThreadLocal<Integer> initializationThread = new ThreadLocal();
+  private static final ThreadLocal<Integer> initializationThread = new ThreadLocal<>();
-  /* thread local to indicate its for persist data convert tool */
-  static final ThreadLocal isConversion = new ThreadLocal();
-
-  // user attributes //
-  // TODO: shouldn't this be an identity map whose key is a RegionEntry?
-  protected final LocalRegion parentRegion;
+  private final LocalRegion parentRegion;
-  private volatile boolean reinitialized_old = false;
+  private volatile boolean reinitialized_old;
-  protected volatile boolean isDestroyed = false;
+  protected volatile boolean isDestroyed;
-  volatile boolean isDestroyedForParallelWAN = false;
+  volatile boolean isDestroyedForParallelWAN;
-  private volatile boolean reinitialized_new = false;
+  private volatile boolean reinitialized_new;
-  private RegionTTLExpiryTask regionTTLExpiryTask = null;
+  private RegionTTLExpiryTask regionTTLExpiryTask;
-  private RegionIdleExpiryTask regionIdleExpiryTask = null;
+  private RegionIdleExpiryTask regionIdleExpiryTask;
-  private volatile boolean regionInvalid = false;
+  private volatile boolean regionInvalid;
+  @VisibleForTesting
-  // Indicates that the entries are in fact initialized. It turns out
-  // you can't trust the assignment of a volatile (as indicated above)
-  // to mean that the the thing being assigned is fully formed, only
-  // those things *before* the assignment are fully formed. mthomas 10/02/2005
-  private final boolean entriesInitialized;
-
-  private volatile boolean initialized = false; // added for bug 30223
+  private volatile boolean initialized; // added for bug 30223
-   * Used by transactions to suspend entry expiration while a transaction is in progress on a
-   * region. This field is only initialized if expiration is configured and transactions are
-   * possible.
-   */
-  private volatile StoppableReadWriteLock txExpirationLock;
-
-  /**
-  public static boolean ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;
+  public static boolean ISSUE_CALLBACKS_TO_CACHE_OBSERVER;
-  private int riCnt = 0;
+  private int riCnt;
-  protected final CancelCriterion stopper = createStopper();
+  private final CancelCriterion stopper = createStopper();
-  // TODO: change createStopper to be private (fix EventTrackerTest)
-  public CancelCriterion createStopper() {
+  private CancelCriterion createStopper() {
-  protected CancelCriterion getStopper() {
-    return this.stopper;
-  }
-
-    this.entriesInitialized = true;
-  final ServerRegionProxy serverRegionProxy;
+  private final ServerRegionProxy serverRegionProxy;
-  public Object validatedDestroy(Object key, EntryEventImpl event)
+  Object validatedDestroy(Object key, EntryEventImpl event)
-  public Object get(Object key, Object aCallbackArgument, boolean generateCallbacks,
+  Object get(Object key, Object aCallbackArgument, boolean generateCallbacks,
-  public long getEstimatedLocalSize() {
+  long getEstimatedLocalSize() {
-  protected Region.Entry nonTXGetEntry(KeyInfo keyInfo, boolean access, boolean allowTombstones) {
+  Region.Entry nonTXGetEntry(KeyInfo keyInfo, boolean access, boolean allowTombstones) {
-  protected boolean isClosed() {
+  boolean isClosed() {
+  @VisibleForTesting
-  protected boolean nonTXContainsKey(KeyInfo keyInfo) {
+  boolean nonTXContainsKey(KeyInfo keyInfo) {
-  protected boolean nonTXContainsValueForKey(KeyInfo keyInfo) {
+  boolean nonTXContainsValueForKey(KeyInfo keyInfo) {
-  public int entryCount(Set<Integer> buckets) {
+  int entryCount(Set<Integer> buckets) {
-  protected int entryCount(Set<Integer> buckets, boolean estimate) {
+  int entryCount(Set<Integer> buckets, boolean estimate) {
-  protected void initialized() {
+  void initialized() {
-  protected void releaseLatches() {
+  void releaseLatches() {
-  protected Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface tx,
+  Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface tx,
-  protected Object callCacheLoader(CacheLoader loader, final Object key,
+  Object callCacheLoader(CacheLoader loader, final Object key,
-  protected boolean isMemoryThresholdReachedForLoad() {
+  boolean isMemoryThresholdReachedForLoad() {
+  @VisibleForTesting
+  @VisibleForTesting
+  @VisibleForTesting
-  protected void validateArguments(Object key, Object value, Object aCallbackArgument) {
+  void validateArguments(Object key, Object value, Object aCallbackArgument) {
-  protected boolean needsTombstoneGCKeysForClients(EventID eventID, FilterInfo clientRouting) {
+  boolean needsTombstoneGCKeysForClients(EventID eventID, FilterInfo clientRouting) {
-  protected void notifyClientsOfTombstoneGC(Map<VersionSource, Long> regionGCVersions,
+  void notifyClientsOfTombstoneGC(Map<VersionSource, Long> regionGCVersions,
-  protected boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
+  boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
-  protected void enableConcurrencyChecks() {
+  void enableConcurrencyChecks() {
-  protected boolean getEnableConcurrencyChecks() {
-    return this.getConcurrencyChecksEnabled();
-  }
-
-  public Object getValueInVM(Object key) throws EntryNotFoundException {
+  public Object getValueInVM(Object key) throws EntryNotFoundException { // KIRK
-  public Object getValueInVM(EntryEventImpl event) throws EntryNotFoundException {
-    return basicGetValueInVM(event.getKey(), true);
-  }
-
+  @VisibleForTesting
-  private void registerInterestFilter(String className, boolean isDurable) {
-    registerInterestFilter(className, isDurable, true);
-  }
-
-  private void registerInterestFilter(String className, boolean isDurable, boolean receiveValues) {
-    processSingleInterest(className, InterestType.FILTER_CLASS, InterestResultPolicy.DEFAULT,
-        isDurable, !receiveValues);
-  }
-
-  private void registerInterestOQL(String query, boolean isDurable) {
-    registerInterestOQL(query, isDurable, true);
-  }
-
-  private void registerInterestOQL(String query, boolean isDurable, boolean receiveValues) {
-    processSingleInterest(query, InterestType.OQL_QUERY, InterestResultPolicy.DEFAULT, isDurable,
-        !receiveValues);
-  }
-
-  public void unregisterInterestFilter(String className) {
-    ServerRegionProxy proxy = getServerProxy();
-    if (proxy != null) {
-      proxy.unregisterInterest(className, InterestType.FILTER_CLASS, false, false);
-    } else {
-      throw new UnsupportedOperationException(
-          "Interest unregistration requires a pool.");
-    }
-  }
-
-  public void unregisterInterestOQL(String query) {
-    ServerRegionProxy proxy = getServerProxy();
-    if (proxy != null) {
-      proxy.unregisterInterest(query, InterestType.OQL_QUERY, false, false);
-    } else {
-      throw new UnsupportedOperationException(
-          "Interest unregistration requires a pool.");
-    }
-  }
-
-  protected void localDestroyNoCallbacks(Object key) {
+  void localDestroyNoCallbacks(Object key) {
-  public static int threadInitLevelRequirement() {
+  static int threadInitLevelRequirement() {
-  protected RegionEntry basicPutEntry(final EntryEventImpl event, final long lastModified)
+  RegionEntry basicPutEntry(final EntryEventImpl event, final long lastModified)
-  protected void generateLocalFilterRouting(InternalCacheEvent event) {
+  void generateLocalFilterRouting(InternalCacheEvent event) {
-  protected void recordEventState(InternalDistributedMember provider, Map state) {
+  void recordEventState(InternalDistributedMember provider, Map state) {
-  public void checkSameSenderIdsAvailableOnAllNodes() {
+  void checkSameSenderIdsAvailableOnAllNodes() {
-  protected void preDestroyChecks() {
+  void preDestroyChecks() {
-  protected void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
+  void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
-  protected void postDestroyRegion(boolean destroyDiskRegion, RegionEventImpl event) {
+  void postDestroyRegion(boolean destroyDiskRegion, RegionEventImpl event) {
-  protected final boolean restoreSetOperationTransactionBehavior =
+  final boolean restoreSetOperationTransactionBehavior =
-  public boolean isTX() {
+  boolean isTX() {
-  public void handleDiskAccessException(DiskAccessException dae, boolean duringInitialization) {
+  void handleDiskAccessException(DiskAccessException dae, boolean duringInitialization) {
-  protected EntryEventImpl generateEvictDestroyEvent(final Object key) {
+  EntryEventImpl generateEvictDestroyEvent(final Object key) {
-  public void updateStatsForGet(final RegionEntry regionEntry, final boolean hit) {
+  void updateStatsForGet(final RegionEntry regionEntry, final boolean hit) {
-  protected void closeCallbacksExceptListener() {
+  void closeCallbacksExceptListener() {
-  protected void checkIfReplicatedAndLocalDestroy(EntryEventImpl event) {
+  void checkIfReplicatedAndLocalDestroy(EntryEventImpl event) {
-  protected void invalidateAllEntries(RegionEvent rgnEvent) {
+  void invalidateAllEntries(RegionEvent rgnEvent) {
-  protected boolean usesDiskStore(RegionAttributes regionAttributes) {
+  boolean usesDiskStore(RegionAttributes regionAttributes) {
-  protected DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
+  DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
-  protected DiskRegion createDiskRegion(InternalRegionArguments internalRegionArgs)
+  DiskRegion createDiskRegion(InternalRegionArguments internalRegionArgs)
-  protected boolean isEntryIdleExpiryPossible() {
+  boolean isEntryIdleExpiryPossible() {
-  protected void regionTimeToLiveChanged(ExpirationAttributes oldTimeToLive) {
+  void regionTimeToLiveChanged(ExpirationAttributes oldTimeToLive) {
-  protected void regionIdleTimeoutChanged(ExpirationAttributes oldIdleTimeout) {
+  void regionIdleTimeoutChanged(ExpirationAttributes oldIdleTimeout) {
-  protected void timeToLiveChanged(ExpirationAttributes oldTimeToLive) {
+  void timeToLiveChanged(ExpirationAttributes oldTimeToLive) {
-  protected void idleTimeoutChanged(ExpirationAttributes oldIdleTimeout) {
+  void idleTimeoutChanged(ExpirationAttributes oldIdleTimeout) {
+  @VisibleForTesting
-  // package-private to avoid synthetic accessor
-  static void dispatchEvent(LocalRegion region, InternalCacheEvent event,
+  private static void dispatchEvent(LocalRegion region, InternalCacheEvent event,
-  public int sizeEstimate() {
+  int sizeEstimate() {
-  protected boolean hasStorage() {
+  boolean hasStorage() {
-  public boolean requiresOneHopForMissingEntry(EntryEventImpl event) {
+  boolean requiresOneHopForMissingEntry(EntryEventImpl event) {
-  public VersionedObjectList basicPutAll(final Map<?, ?> map,
+  VersionedObjectList basicPutAll(final Map<?, ?> map,
+  @VisibleForTesting
-  public void performPutAllEntry(EntryEventImpl event) {
+  void performPutAllEntry(EntryEventImpl event) {
-  public void performRemoveAllEntry(EntryEventImpl event) {
+  void performRemoveAllEntry(EntryEventImpl event) {
-  protected boolean isCurrentlyLockGrantor() {
+  boolean isCurrentlyLockGrantor() {
-  protected void removeSenderFromAdvisor(InternalDistributedMember sender, int serial,
+  void removeSenderFromAdvisor(InternalDistributedMember sender, int serial,
-   * TODO: return value is never used
-   *
-   * @deprecated as of prPersistSprint1 use forceCompaction instead
-   */
-  @Deprecated
-  public boolean notifyToRoll() {
-    return forceCompaction();
-  }
-
-  /**
-  public boolean forceCompaction() {
+  boolean forceCompaction() {
-  public boolean isUsedForSerialGatewaySenderQueue() {
+  protected boolean isUsedForSerialGatewaySenderQueue() {
-  public boolean isUsedForParallelGatewaySenderQueue() {
+  protected boolean isUsedForParallelGatewaySenderQueue() {
-  public Map<String, CacheServiceProfile> getCacheServiceProfiles() {
+  Map<String, CacheServiceProfile> getCacheServiceProfiles() {
-  public boolean supportsConcurrencyChecks() {
+  protected boolean supportsConcurrencyChecks() {
-  protected HashMap getDestroyedSubregionSerialNumbers() {
+  HashMap getDestroyedSubregionSerialNumbers() {
-  protected void setMemoryThresholdFlag(MemoryEvent event) {
+  void setMemoryThresholdFlag(MemoryEvent event) {
-  public void initialCriticalMembers(boolean localMemoryIsCritical,
+  void initialCriticalMembers(boolean localMemoryIsCritical,
-  protected RegionEntry basicGetTXEntry(KeyInfo keyInfo) {
+  RegionEntry basicGetTXEntry(KeyInfo keyInfo) {
+  @VisibleForTesting
-  public boolean canStoreDataLocally() {
+  boolean canStoreDataLocally() {
+  @VisibleForTesting
+  @VisibleForTesting
-  public long getLatestLastAccessTimeFromOthers(Object key) {
+  long getLatestLastAccessTimeFromOthers(Object key) {
-  public void incBucketEvictions() {
+  void incBucketEvictions() {
+  @VisibleForTesting
+  @VisibleForTesting
+  @VisibleForTesting
-  protected void setMemoryThresholdReached(boolean reached) {
+  void setMemoryThresholdReached(boolean reached) {
-  public boolean isStatisticsEnabled() {
+  boolean isStatisticsEnabled() {
+  @FunctionalInterface
+  @FunctionalInterface
+  @FunctionalInterface
+  @FunctionalInterface
-        private Object nextElement = null;
+        private Object nextElement;

INS83 UPD83 INS78 UPD83 UPD83 INS83 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS78 UPD83 UPD83 UPD83 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 MOV43 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL9 DEL9 DEL9 DEL9 DEL33 DEL33 DEL9 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL9 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL9 DEL34 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL39 DEL42 DEL52 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL40 DEL40 DEL42 DEL42 DEL38 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL40 DEL40 DEL42 DEL42 DEL38 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL33