Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is used to automatically generate a restore script for a backup. 
- * It keeps a list of files that were backed up, and a list of files that
- * we should test for to avoid overriding when we restore the backup.
+ * This class is used to automatically generate a restore script for a backup. It keeps a list of
+ * files that were backed up, and a list of files that we should test for to avoid overriding when
+ * we restore the backup.
-  
-  private Map<File,File> baselineFiles = new HashMap<File,File>();
+
+  private Map<File, File> baselineFiles = new HashMap<File, File>();
-  public void addBaselineFiles(Map<File,File> baselineFiles) {
+  public void addBaselineFiles(Map<File, File> baselineFiles) {
-  
+
-  
+
-  
+
-    if(isWindows()) {
+    if (isWindows()) {
-    
+
-  
+
-  
-  private void generateScript(File outputDir, File outputFile, ScriptGenerator osGenerator) throws FileNotFoundException {
+
+  private void generateScript(File outputDir, File outputFile, ScriptGenerator osGenerator)
+      throws FileNotFoundException {
-      osGenerator.writeComment(writer, "Restore a backup of gemfire persistent data to the location it was backed up");
+      osGenerator.writeComment(writer,
+          "Restore a backup of gemfire persistent data to the location it was backed up");
-      osGenerator.writeComment(writer, "This script will refuse to restore if the original data still exists.");
+      osGenerator.writeComment(writer,
+          "This script will refuse to restore if the original data still exists.");
-      osGenerator.writeComment(writer, "This script was automatically generated by the gemfire backup utility.");
+      osGenerator.writeComment(writer,
+          "This script was automatically generated by the gemfire backup utility.");
-      osGenerator.writeComment(writer, "Test for existing originals. If they exist, do not restore the backup.");
-      for(File file: existenceTests) {
+      osGenerator.writeComment(writer,
+          "Test for existing originals. If they exist, do not restore the backup.");
+      for (File file : existenceTests) {
-      for(Map.Entry<File, File> entry : backedUpFiles.entrySet()) {
+      for (Map.Entry<File, File> entry : backedUpFiles.entrySet()) {
-        if(original.isDirectory()) {
+        if (original.isDirectory()) {
-      
-      // Write out baseline file copies in restore script (if there are any) if this is a restore for an incremental backup
-      if(!this.baselineFiles.isEmpty()) {
+
+      // Write out baseline file copies in restore script (if there are any) if this is a restore
+      // for an incremental backup
+      if (!this.baselineFiles.isEmpty()) {
-        osGenerator.writeComment(writer, "Incremental backup.  Restore baseline originals from previous backups.");
-        for(Map.Entry<File, File> entry : this.baselineFiles.entrySet()) {
+        osGenerator.writeComment(writer,
+            "Incremental backup.  Restore baseline originals from previous backups.");
+        for (Map.Entry<File, File> entry : this.baselineFiles.entrySet()) {
-        }        
+        }
-      if(isWindows()) {
+      if (isWindows()) {
-  //TODO prpersist - We've got this code replicated
-  //in 10 different places in our product. Maybe we
-  //need to put this method somewhere :)
+  // TODO prpersist - We've got this code replicated
+  // in 10 different places in our product. Maybe we
+  // need to put this method somewhere :)
-        if (os.indexOf("Windows") != -1) {
-            return true;
-        }
+      if (os.indexOf("Windows") != -1) {
+        return true;
+      }
-  
-  private static interface ScriptGenerator 
-  {
+
+  private static interface ScriptGenerator {
-    void writeCopyDirectoryContents(PrintWriter writer, File backup, File original, boolean backupHasFiles);
+    void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
+        boolean backupHasFiles);
-    
+
-  
+
+
-    public void writeCopyDirectoryContents(PrintWriter writer, File backup, File original, boolean backupHasFiles) {
+    public void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
+        boolean backupHasFiles) {
-      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + backup + "\" \"" + original + "\" /e /njh /njs");
+      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + backup + "\" \"" + original
+          + "\" /e /njh /njs");
-      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + sourcePath + "\" \"" + destinationPath + "\" " + fileName + " /njh /njs");
+      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + sourcePath + "\" \""
+          + destinationPath + "\" " + fileName + " /njh /njs");
-      writer.println("IF EXIST \"" + file + "\" echo \"Backup not restored. Refusing to overwrite " + file + "\" && exit /B 1 ");
+      writer.println("IF EXIST \"" + file + "\" echo \"Backup not restored. Refusing to overwrite "
+          + file + "\" && exit /B 1 ");
-  
+
-    public void writeCopyDirectoryContents(PrintWriter writer, File backup,
-        File original, boolean backupHasFiles) {
+    public void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
+        boolean backupHasFiles) {
-      if(backupHasFiles) {
+      if (backupHasFiles) {
-      writer.println("test -e '" + file + "' && echo 'Backup not restored. Refusing to overwrite " + file + "' && exit 1 ");
+      writer.println("test -e '" + file + "' && echo 'Backup not restored. Refusing to overwrite "
+          + file + "' && exit 1 ");
-    public void writeExit(PrintWriter writer) {
-    }
+    public void writeExit(PrintWriter writer) {}

UPD66 UPD66 UPD66