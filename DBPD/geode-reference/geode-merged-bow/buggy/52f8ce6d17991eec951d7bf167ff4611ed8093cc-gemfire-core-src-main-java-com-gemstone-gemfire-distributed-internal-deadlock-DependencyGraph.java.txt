improvements to deadlock detection.  Addition of a main method to DeadlockDetector that recognizes findDeepestGraph, findDeadlockOnly, findThread and print commands.  We need a project to enable dependency monitoring in processes spawned with Gfsh and to collect dependencies and serialize them to disk so that this tool can be used to analyse distributed systems.

+import java.util.List;
+ * @author bschuchardt
+  /** add a collection of edges to this graph */
+  public void addEdges(Collection<Dependency> edges) {
+    for (Dependency dep: edges) {
+      addEdge(dep);
+    }
+  }
+  
-    edges.add(dependency);
-    Set<Dependency> outboundEdges = vertices.get(dependency.getDepender());
-    if(outboundEdges == null) {
-      outboundEdges = new HashSet();
-      vertices.put(dependency.getDepender(), outboundEdges);
+    if (!edges.contains(dependency)) {
+      edges.add(dependency);
+      Set<Dependency> outboundEdges = vertices.get(dependency.getDepender());
+      if(outboundEdges == null) {
+        outboundEdges = new HashSet();
+        vertices.put(dependency.getDepender(), outboundEdges);
+      }
+      outboundEdges.add(dependency);
+      
+      if(vertices.get(dependency.getDependsOn()) == null) {
+        vertices.put(dependency.getDependsOn(), new HashSet());
+      }
-    outboundEdges.add(dependency);
-    
-    if(vertices.get(dependency.getDependsOn()) == null) {
-      vertices.put(dependency.getDependsOn(), new HashSet());
-    }
-    
-      boolean foundCycle = visitCycle(start, unvisited, finished, cycle);
+      boolean foundCycle = visitCycle(start, unvisited, finished, cycle, 0);
+   * This will find the deepest call chain in the graph.  If a
+   * cycle is detected it will be returned.  Otherwise all
+   * subgraphs are traversed to find the one that has the most
+   * depth.  This usually indicates the thread that is blocking
+   * the most other threads.
+   */
+  public DependencyGraph findDeepestGraph() {
+    int depth = 0;
+    DependencyGraph deepest = null;
+    
+    for (Object dep: vertices.keySet()) {
+      int itsDepth = getDepth(dep);
+      if (itsDepth > depth) {
+        deepest = getSubGraph(dep);
+        depth = itsDepth;
+      }
+    }
+    
+    return deepest;
+  }
+  
+  
+  public DependencyGraph findDependenciesWith(String objectName) {
+    Object obj = null;
+    Dependency objDep = null;
+    for (Dependency dep: edges) {
+      if (dep.depender.toString().contains(objectName)) {
+        obj = dep.depender;
+        objDep = dep;
+        break;
+      }
+      if (dep.dependsOn.toString().contains(objectName)) {
+        obj = dep.dependsOn;
+        objDep = dep;
+        break;
+      }
+    }
+    if (obj == null) {
+      return null;
+    }
+    
+    DependencyGraph result = new DependencyGraph();
+    
+    Set<Object> dependsOnObj = new HashSet<>();
+    dependsOnObj.add(obj);
+    boolean anyAdded = true;
+    while (anyAdded) {
+      anyAdded = false;
+      for (Dependency dep: edges) {
+        if (dependsOnObj.contains(dep.dependsOn)
+            && !dependsOnObj.contains(dep.depender)) {
+          anyAdded = true;
+          dependsOnObj.add(dep.depender);
+        }
+      }
+    }
+    for (Object depender: dependsOnObj) {
+      if (!result.getVertices().contains(depender)) {
+        DependencyGraph subgraph = getSubGraph(depender);
+        result.addEdges(subgraph.getEdges());
+      }
+    }
+    return result;
+  }
+  
+  
+  /**
+   * @param depth the depth of the recursion chain up to this point
-      Set<Object> finished, CycleHolder cycle) {
+      Set<Object> finished, CycleHolder cycle, int depth) {
+    cycle.processDepth(depth);
+    
-      foundCycle |= visitCycle(dep.getDependsOn(), unvisited, finished, cycle);
+      foundCycle |= visitCycle(dep.getDependsOn(), unvisited, finished, cycle, depth+1);
+  /** return the depth of the subgraph for the given object */
+  private int getDepth(Object depender) {
+    Set<Object> unvisited = new HashSet<Object>(vertices.keySet());
+    Set<Object> finished = new HashSet<Object>(vertices.size());
+
+    Object start = depender;
+    CycleHolder cycle = new CycleHolder();
+
+    boolean foundCycle = visitCycle(start, unvisited, finished, cycle, 0);
+
+    if(foundCycle) {
+      return Integer.MAX_VALUE;
+    } else {
+      return cycle.getMaxDepth();
+    }
+  }
+  
+
+    private int maxDepth = 0;
+    
+    public void processDepth(int depth) {
+      if (depth > maxDepth) {
+        maxDepth = depth;
+      }
+    }
+    
+    public int getMaxDepth() {
+      return maxDepth;
+    }
+  

INS26 INS40 INS31 INS31 INS31 INS31 INS65 INS29 INS83 INS39 INS42 INS44 INS8 INS8 INS29 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS8 INS23 INS31 INS31 INS66 INS65 INS74 INS42 INS70 INS25 INS65 INS42 INS60 INS60 INS70 INS41 INS42 INS43 INS42 INS60 INS60 INS70 INS25 INS60 INS60 INS21 INS60 INS61 INS70 INS41 INS65 INS39 INS42 INS21 INS65 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS66 INS43 INS43 INS44 INS42 INS8 INS38 MOV8 INS66 INS66 INS66 INS66 INS66 INS39 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS43 INS59 INS74 INS59 INS32 INS39 INS59 INS42 INS8 INS44 INS42 INS8 INS42 INS42 INS66 INS32 INS66 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS42 INS34 INS39 INS42 INS25 INS41 INS42 INS42 INS43 INS42 INS21 INS32 INS42 INS34 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS33 INS42 INS42 INS33 INS43 INS42 INS25 INS25 INS42 INS33 INS41 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS21 INS70 INS43 INS42 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS41 INS41 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS42 INS32 INS8 INS32 INS8 INS33 INS43 INS42 INS42 INS74 INS7 INS44 INS42 INS8 INS42 INS38 INS8 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS40 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS32 INS42 INS42 INS21 INS21 INS10 INS32 INS42 INS42 INS21 INS21 INS10 INS42 INS43 INS42 INS9 INS43 INS42 INS25 INS32 INS60 INS21 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS7 INS34 INS42 INS42 INS7 INS7 INS40 INS42 INS7 INS7 INS40 INS42 INS7 INS7 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS38 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS40 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS42 INS42 INS40