GEODE-1351: add waitUntilFlush() into luceneIndexImpl

This function is very useful in test and demo.
It will wait for the AEQ size to be 0

Also added junit test and integration tests.

-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
+import com.gemstone.gemfire.cache.asyncqueue.AsyncEventQueue;
+import com.gemstone.gemfire.cache.lucene.internal.LuceneEventListener;
+import com.gemstone.gemfire.cache.lucene.internal.LuceneIndexImpl;
+import com.gemstone.gemfire.cache.lucene.internal.LuceneServiceImpl;
+import com.gemstone.gemfire.internal.cache.tier.sockets.CacheClientProxy;
+import com.gemstone.gemfire.internal.logging.LogService;
+  @Test
+  public void entriesFlushedToIndexAfterWaitForFlushCalled() {
+    SerializableRunnableIF createIndex = () -> {
+      LuceneService luceneService = LuceneServiceProvider.get(getCache());
+      luceneService.createIndex(INDEX_NAME, REGION_NAME, "text");
+    };
+    dataStore1.invoke(() -> initDataStore(createIndex));
+    dataStore2.invoke(() -> initDataStore(createIndex));
+    accessor.invoke(() -> initAccessor(createIndex));
+
+    try {
+      dataStore1.invoke(() -> setTestHook());
+      putDataInRegion(accessor);
+      waitForFlushBeforeExecuteTextSearch(accessor, 10);
+      executeTextSearch(accessor);
+    } finally {
+      dataStore1.invoke(() -> checkResultAndresetTestHook());
+    }
+  }
+
+  protected void waitForFlushBeforeExecuteTextSearch(VM vm, final int expectKeyNum) {
+    vm.invoke(() -> {
+      Cache cache = getCache();
+      Region<Object, Object> region = cache.getRegion(REGION_NAME);
+
+      LuceneService service = LuceneServiceProvider.get(cache);
+      LuceneIndexImpl index = (LuceneIndexImpl)service.getIndex(INDEX_NAME, REGION_NAME);
+      assertNotNull(index);
+      LuceneQuery<Integer, TestObject> query;
+
+      String aeqId = LuceneServiceImpl.getUniqueIndexName(INDEX_NAME, REGION_NAME);
+      AsyncEventQueue queue = cache.getAsyncEventQueue(aeqId);
+      assertNotNull(queue);
+      assertTrue(queue.size()>0);
+      index.waitUntilFlushed(30000);
+      return null;
+    });
+  }
+
+  public static void setTestHook() {
+    LuceneEventListener.testHook = new LuceneEventListener.TestHook() {
+
+      @Override
+      public void doTestHook(String spot) {
+        if (spot.equals("FOUND_AND_BEFORE_PROCESSING_A_EVENT")) {
+          try {
+            Thread.sleep(1000);
+            LogService.getLogger().debug("Waited in test hook");
+          }
+          catch (InterruptedException e) {
+          }
+        }
+      }
+    };
+  }
+  
+  public static void checkResultAndresetTestHook()
+  {
+    LuceneEventListener.testHook = null;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS42 INS60 INS21 INS21 INS21 INS54 INS43 INS42 INS83 INS39 INS42 INS21 INS21 INS21 INS43 INS59 INS32 INS32 INS32 INS8 INS8 INS42 INS32 INS7 INS7 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS86 INS40 INS14 INS40 INS33 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS8 INS43 INS1 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS86 INS60 INS60 INS60 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS41 INS40 INS31 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS74 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS33 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS54 INS8 INS12 INS21 INS21 INS44 INS8 INS32 INS32 INS43 INS42 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS42