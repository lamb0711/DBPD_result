client server

client server

+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.subject.Subject;
+import org.apache.shiro.util.ThreadState;
+
-import org.apache.logging.log4j.Logger;
-import org.apache.shiro.subject.Subject;
-import org.apache.shiro.util.ThreadState;
-
+
+  public ClientUserAuths getClientUserAuths(){
+    return this.clientUserAuths;
+  }
-
-  protected void setAuthorizeRequest(AuthorizeRequest authzRequest) {
-    this.authzRequest = authzRequest;
-  }
-
-  protected void setPostAuthorizeRequest(AuthorizeRequestPP postAuthzRequest) {
-    this.postAuthzRequest = postAuthzRequest;
-  }
-  //this is backward compability only, if any race condition happens.
-  //where server is unregistering the client and client is creating new connection.
-  private void resetUserAuthorizeAndPostAuthorizeRequest()
-  {
-    if (AcceptorImpl.isAuthenticationRequired()
-        && (this.handshake.getVersion().compareTo(Version.GFE_65) < 0
-            || this.getCommunicationMode() == Acceptor.GATEWAY_TO_GATEWAY))
-    {
-      ClientUserAuths cua = proxyIdVsClientUserAuths.get(this.proxyId);
-      if (cua != this.clientUserAuths)
-      {
-        UserAuthAttributes uaa = this.clientUserAuths.getUserAuthAttributes(this.userAuthId);
-        initializeClientUserAuths();
-        this.userAuthId = this.clientUserAuths.putUserAuth(uaa);
-      }
-    }
-  }
-        if(AcceptorImpl.isIntegratedSecurity()) {
+        if(AcceptorImpl.isIntegratedSecurity() && !isInternalMessage()) {
+          logger.info(command + " received with uniqueId "+uniqueId);
-          threadState = GeodeSecurityUtil.bindSubject(subject);
+          if(subject!=null) {
+            threadState = GeodeSecurityUtil.bindSubject(subject);
+            logger.info("binding " + subject.getPrincipal() + " to the current thread");
+          }
-      String username = credentials.getProperty("security-username");
-      String password = credentials.getProperty("security-password");
-
-      Subject subject = GeodeSecurityUtil.login(username, password);
-      if(subject!=null){
+
+      DistributedSystem system = this.getDistributedSystem();
+      String methodName = system.getProperties().getProperty(
+        SECURITY_CLIENT_AUTHENTICATOR);
+
+      Object principal = HandShake.verifyCredentials(methodName, credentials,
+        system.getSecurityProperties(), (InternalLogWriter) system.getLogWriter(), (InternalLogWriter) system
+          .getSecurityLogWriter(), this.proxyId.getDistributedMember());
+      if(principal instanceof Subject){
+        Subject subject = (Subject)principal;
+        logger.info("Put subject in Map: "+uniqueId+" for "+ subject.getPrincipal());
-        DistributedSystem system = this.getDistributedSystem();
-        String methodName = system.getProperties().getProperty(
-          SECURITY_CLIENT_AUTHENTICATOR);
-
-        Principal principal = HandShake.verifyCredentials(methodName, credentials,
-          system.getSecurityProperties(), (InternalLogWriter) system.getLogWriter(), (InternalLogWriter) system
-            .getSecurityLogWriter(), this.proxyId.getDistributedMember());
-
-        uniqueId = ServerHandShakeProcessor.getUniqueId(this, principal);
+        uniqueId = ServerHandShakeProcessor.getUniqueId(this, (Principal)principal);
-      
-      //create secure part which will be send in respones    
-      
+
+      //create secure part which will be send in respones
-        && (!(this.requestMsg.msgType == MessageType.CLIENT_READY
+        && (!isInternalMessage())) {
+      setSecurityPart();
+      return this.securePart;
+    }
+    else {
+      if (AcceptorImpl.isAuthenticationRequired() && logger.isDebugEnabled()) {
+        logger.debug("ServerConnection.updateAndGetSecurityPart() not adding security part for msg type {}",
+            MessageType.getString(this.requestMsg.msgType));
+      }
+    }
+    return null;
+ }
+
+  private boolean isInternalMessage(){
+    return (this.requestMsg.msgType == MessageType.CLIENT_READY
-            || this.requestMsg.msgType == MessageType.GET_CLIENT_PR_METADATA 
+            || this.requestMsg.msgType == MessageType.GET_CLIENT_PR_METADATA
-            || this.requestMsg.msgType == MessageType.ROLLBACK))) {
-      setSecurityPart();
-      return this.securePart;
-    }
-    else {
-      if (AcceptorImpl.isAuthenticationRequired() && logger.isDebugEnabled()) {
-        logger.debug("ServerConnection.updateAndGetSecurityPart() not adding security part for msg type {}",
-            MessageType.getString(this.requestMsg.msgType));
-      }
-    }
-    return null;
- }
+            || this.requestMsg.msgType == MessageType.ROLLBACK);
+  }

MOV26 MOV26 MOV26 MOV31 MOV31 UPD83 MOV43 INS42 MOV29 UPD83 MOV43 UPD42 UPD83 INS39 UPD42 INS41 MOV41 INS41 MOV22 MOV8 MOV8 MOV36 MOV60 MOV60 MOV60 INS25 MOV27 INS43 INS62 MOV8 MOV8 INS38 INS42 INS42 INS43 INS60 INS21 INS32 INS27 UPD42 MOV42 INS43 INS59 INS32 INS42 MOV32 INS38 INS21 INS25 INS42 INS42 INS11 INS42 INS42 INS27 INS32 INS32 MOV27 INS8 MOV43 INS42 INS45 INS42 INS45 INS32 INS11 INS42 INS42 INS42 INS27 MOV21 INS21 INS42 INS42 MOV43 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS27 INS45 INS32 INS45 INS42 INS42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL25 DEL39 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL40 DEL32 DEL34 DEL27 DEL52 DEL42 DEL32 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL27 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL38 DEL36 DEL27 DEL25