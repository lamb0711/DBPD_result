GEODE-4942: when sender is starting, and not running yet, put event at primary should be saved for QueueRemovalMessage (#1740)


+import org.apache.geode.cache.EntryOperation;
+import org.apache.geode.internal.cache.PartitionedRegionHelper;
-    if (this.queue instanceof ParallelGatewaySenderQueue) {
-      return ((ParallelGatewaySenderQueue) queue).localSize();
-    }
+  public int eventSecondaryQueueSize() {
+    if (queue == null) {
+      return 0;
+    }
+
+    // if parallel, get both primary and secondary queues' size, then substract primary queue's size
+    if (this.queue instanceof ConcurrentParallelGatewaySenderQueue) {
+      int size = ((ConcurrentParallelGatewaySenderQueue) queue).localSize(true)
+          - ((ConcurrentParallelGatewaySenderQueue) queue).localSize(false);
+      return size;
+    }
+    return this.queue.size();
+  }
+
+  public void registerEventDroppedInPrimaryQueue(EntryEventImpl event) {
+    if (queue == null) {
+      return;
+    }
+    if (this.queue instanceof ConcurrentParallelGatewaySenderQueue) {
+      ConcurrentParallelGatewaySenderQueue cpgsq = (ConcurrentParallelGatewaySenderQueue) queue;
+      PartitionedRegion prQ = cpgsq.getRegion(event.getRegion().getFullPath());
+      if (prQ == null) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("shadow partitioned region " + event.getRegion().getFullPath()
+              + " is not created yet.");
+        }
+        return;
+      }
+      int bucketId = PartitionedRegionHelper.getHashKey((EntryOperation) event);
+      long shadowKey = event.getTailKey();
+
+      ParallelGatewaySenderQueue pgsq =
+          (ParallelGatewaySenderQueue) cpgsq.getQueueByBucket(bucketId);
+      boolean isPrimary = prQ.getRegionAdvisor().getBucketAdvisor(bucketId).isPrimary();
+      if (isPrimary) {
+        pgsq.addRemovedEvent(prQ, bucketId, shadowKey);
+        this.sender.getStatistics().incEventsNotQueuedAtYetRunningPrimarySender();
+        if (logger.isDebugEnabled()) {
+          logger.debug("register dropped event for primary queue. BucketId is " + bucketId
+              + ", shadowKey is " + shadowKey + ", prQ is " + prQ.getFullPath());
+        }
+      }
+    }
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS25 INS25 INS41 INS43 INS42 INS25 INS25 INS27 INS8 MOV62 INS8 INS32 INS42 INS27 INS8 INS62 INS8 INS42 INS33 INS41 INS43 INS60 INS41 INS22 INS42 INS42 INS33 INS41 INS22 INS43 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS25 INS34 INS42 INS39 INS59 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 MOV43 INS59 INS39 INS59 INS42 INS8 INS42 INS27 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS25 INS41 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS32 INS21 INS21 INS25 INS32 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS8 INS42 INS42 INS11 INS42 INS42 MOV43 INS32 INS32 INS42 INS32 INS32 INS32 INS8 INS36 INS42 INS9 INS36 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS11 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS27 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL25