GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

+import static java.util.Objects.requireNonNull;
+import org.apache.geode.internal.cache.tier.Acceptor;
-  private final List<CacheServerImpl> allCacheServers = new CopyOnWriteArrayList<>();
+  private final List<InternalCacheServer> allCacheServers = new CopyOnWriteArrayList<>();
+  private final AtomicReference<InternalCacheServer> gatewayReceiverServer =
+      new AtomicReference<>();
+
-    for (CacheServerImpl cacheServer : cache.allCacheServers) {
-      AcceptorImpl acceptor = cacheServer.getAcceptor();
+    for (InternalCacheServer cacheServer : cache.allCacheServers) {
+      Acceptor acceptor = cacheServer.getAcceptor();
+    InternalCacheServer receiverServer = cache.gatewayReceiverServer.get();
+    Acceptor acceptor = receiverServer.getAcceptor();
+    if (acceptor != null) {
+      acceptor.emergencyClose();
+    }
+
-    for (CacheServerImpl cacheServer : this.allCacheServers) {
+    for (InternalCacheServer cacheServer : allCacheServers) {
-      this.allCacheServers.remove(cacheServer);
+      allCacheServers.remove(cacheServer);
+
+    InternalCacheServer receiverServer = gatewayReceiverServer.getAndSet(null);
+    if (receiverServer != null) {
+      if (isDebugEnabled) {
+        logger.debug("stopping gateway receiver server {}", receiverServer);
+      }
+      try {
+        receiverServer.stop();
+      } catch (CancelException e) {
+        if (isDebugEnabled) {
+          logger.debug("Ignored cache closure while closing gateway receiver server {}",
+              receiverServer, e);
+        }
+      }
+      stoppedCacheServer = true;
+    }
+
-    return addCacheServer(false);
-  }
-
-  @Override
-  public CacheServer addCacheServer(boolean isGatewayReceiver) {
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    CacheServerImpl cacheServer = new CacheServerImpl(this, isGatewayReceiver);
-    this.allCacheServers.add(cacheServer);
+    InternalCacheServer server = new ServerBuilder(this, securityService).createServer();
+    allCacheServers.add(server);
-    return cacheServer;
+    return server;
-    boolean removed = this.allCacheServers.remove(cacheServer);
+    boolean removed = allCacheServers.remove(cacheServer);
+  public InternalCacheServer addGatewayReceiverServer(GatewayReceiver receiver) {
+    throwIfClient();
+    stopper.checkCancelInProgress(null);
+
+    requireNonNull(receiver, "GatewayReceiver must be supplied to add a server endpoint.");
+    requireNonNull(gatewayReceiver.get(),
+        "GatewayReceiver must be added before adding a server endpoint.");
+
+    InternalCacheServer receiverServer = new ServerBuilder(this, securityService)
+        .forGatewayReceiver(receiver).createServer();
+    gatewayReceiverServer.set(receiverServer);
+
+    sendAddCacheServerProfileMessage();
+    return receiverServer;
+  }
+
+  @Override
+  public boolean removeGatewayReceiverServer(InternalCacheServer receiverServer) {
+    boolean removed = gatewayReceiverServer.compareAndSet(receiverServer, null);
+    sendRemoveCacheServerProfileMessage();
+    return removed;
+  }
+
+  @Override
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
+    requireNonNull(receiver, "GatewayReceiver must be supplied.");
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    List<CacheServer> cacheServersWithoutReceiver = null;
-    if (!this.allCacheServers.isEmpty()) {
-      for (CacheServerImpl cacheServer : this.allCacheServers) {
-        // If CacheServer is a GatewayReceiver, don't return as part of CacheServers
-        if (!cacheServer.isGatewayReceiver()) {
-          if (cacheServersWithoutReceiver == null) {
-            cacheServersWithoutReceiver = new ArrayList<>();
-          }
-          cacheServersWithoutReceiver.add(cacheServer);
-        }
-      }
-    }
-    if (cacheServersWithoutReceiver == null) {
-      cacheServersWithoutReceiver = Collections.emptyList();
-    }
-    return cacheServersWithoutReceiver;
+    return Collections.unmodifiableList(allCacheServers);
-  public List getCacheServersAndGatewayReceiver() {
-    return this.allCacheServers;
+  public List<InternalCacheServer> getCacheServersAndGatewayReceiver() {
+    List<InternalCacheServer> allServers = new ArrayList<>(allCacheServers);
+
+    InternalCacheServer receiverServer = gatewayReceiverServer.get();
+    if (receiverServer != null) {
+      allServers.add(receiverServer);
+    }
+
+    return Collections.unmodifiableList(allServers);
-   * @param r the partitioned region
+   * @param region the partitioned region
-  public boolean requiresNotificationFromPR(PartitionedRegion r) {
-    boolean hasSerialSenders = hasSerialSenders(r);
+  public boolean requiresNotificationFromPR(PartitionedRegion region) {
+    boolean hasSerialSenders = hasSerialSenders(region);
+
-      for (CacheServerImpl server : this.allCacheServers) {
+      for (InternalCacheServer server : allCacheServers) {
-
+
+    if (!hasSerialSenders) {
+      InternalCacheServer receiverServer = gatewayReceiverServer.get();
+      if (receiverServer != null && !receiverServer.getNotifyBySubscription()) {
+        hasSerialSenders = true;
+      }
+    }
+
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    return this.isServer || !this.allCacheServers.isEmpty();
+    return isServer || !allCacheServers.isEmpty();

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 UPD74 INS83 INS83 INS74 INS59 MOV78 MOV83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 MOV74 INS42 INS8 MOV78 INS74 UPD43 INS43 INS43 INS42 INS14 INS60 INS60 INS25 INS60 INS25 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS60 INS21 MOV21 INS41 INS42 INS43 INS42 INS60 INS21 INS41 INS21 MOV41 MOV43 INS43 INS60 INS60 INS25 UPD42 INS25 UPD42 INS42 UPD42 MOV42 INS74 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 UPD43 UPD42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS39 INS59 INS32 INS42 INS32 INS32 INS42 INS74 INS59 INS43 INS59 INS27 INS8 INS32 UPD42 INS38 INS8 INS43 UPD43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 UPD43 INS42 INS42 INS32 INS42 INS33 INS25 INS54 INS21 INS42 UPD42 UPD42 INS32 INS42 UPD42 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS32 INS45 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS43 INS42 MOV14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 UPD42 UPD43 INS40 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS33 INS42 INS8 INS8 INS12 INS7 INS14 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS43 INS59 INS27 INS8 UPD42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS9 UPD43 MOV43 MOV52 UPD42 MOV42 INS14 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS32 INS32 INS43 INS42 INS25 UPD42 INS43 INS52 INS42 UPD42 INS42 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS42 INS42 INS9 INS21 INS32 INS42 INS42 INS45 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL43 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL32 DEL38 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL32 DEL38 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22