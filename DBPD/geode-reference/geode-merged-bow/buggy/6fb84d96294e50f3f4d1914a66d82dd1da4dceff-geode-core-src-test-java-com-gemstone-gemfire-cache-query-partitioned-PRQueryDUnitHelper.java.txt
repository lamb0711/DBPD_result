GEODE-1059: PRQueryDUnitHelper no longer inherits PartitionedRegionDUnitTestCase class

* PRQueryDUnitHelper class no longer inherits PartitionedRegionDUnitTestCase hence no more calls to its constructor.
* All the methods for creating PortfolioData elements were moved to Utils class.
* Removed the file PRQueryPerfDUnitTest.java

This closes #132

+import static org.junit.Assert.*;
+
-import java.io.PrintWriter;
-import com.gemstone.gemfire.cache.query.data.PortfolioData;
-import com.gemstone.gemfire.cache.query.data.Position;
-import com.gemstone.gemfire.cache.query.partitioned.PRQueryPerfDUnitTest.ResultsObject;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-import com.gemstone.gemfire.internal.cache.PartitionedRegionDUnitTestCase;
-import com.gemstone.gemfire.internal.cache.xmlcache.CacheXmlGenerator;
+import com.gemstone.gemfire.test.dunit.cache.internal.JUnit4CacheTestCase;
+import com.gemstone.gemfire.test.dunit.internal.JUnit4DistributedTestCase;
-import parReg.query.unittest.NewPortfolio;
-public class PRQueryDUnitHelper extends PartitionedRegionDUnitTestCase
+public class PRQueryDUnitHelper implements Serializable
-
-  public PRQueryDUnitHelper(String name) {
-
-    super(name);
+  static Cache cache = null;
+  public static void setCache(Cache cache) {
+    PRQueryDUnitHelper.cache = cache;
-  final Class valueConstraint = PortfolioData.class;
+  public PRQueryDUnitHelper() {
-  /**
-   * This function creates a appropriate region (Local or PR ) given the scope &
-   * the isPR parameters *
-   */
-  public CacheSerializableRunnable getCacheSerializableRunnableForLocalRegionCreation(
-      final String regionName) {
-    return getCacheSerializableRunnableForLocalRegionCreation(regionName, this.valueConstraint);
-    
+
+  public static Cache getCache() {
+    return cache;
+  }
+
-  /**
-   * This function creates a Replicated Region using {@link RegionShortcut#REPLICATE}.
-   * 
-   * @param regionName
-   * 
-   * @return cacheSerializable object
-   */
+
-      final String regionName) {
-    return getCacheSerializableRunnableForLocalRegionCreation(regionName, this.valueConstraint);
-  }
-    
-  public CacheSerializableRunnable getCacheSerializableRunnableForReplicatedRegionCreation(
-      final String regionName, final Class constraint) {
+    final String regionName) {
-         final String regionName, final int redundancy) {
-    return getCacheSerializableRunnableForPRCreate(regionName, redundancy, this.valueConstraint);
-  }
-
-  public CacheSerializableRunnable getCacheSerializableRunnableForPRCreate(
-        //closeCache();
-        disconnectFromDS();
-          //closeCache();
-          disconnectFromDS();
-          //closeCache();
-          disconnectFromDS();
-            cache.createDiskStoreFactory().setDiskDirs(getDiskDirs()).create("diskstore");
+            cache.createDiskStoreFactory().setDiskDirs(JUnit4CacheTestCase.getDiskDirs()).create("diskstore");
-          //closeCache();
-          //disconnectFromDS();
-//        getLogWriter()
-//            .info(
-//                "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: Inserted Portfolio data on Region "
-//                    + regionName);
-//                getLogWriter()
-//                    .info(
-//                        "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: INSERTED Portfolio data for key "
-//                            + j);
-//                  getLogWriter()
-//                      .info(
-//                          "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: INVALIDATED data for key "
-//                              + j);
-//                  getLogWriter()
-//                      .info(
-//                          "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: DESTROYED Portfolio data for key "
-//                              + j);
-//                  getLogWriter()
-//                      .info(
-//                          "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: INSERTED Null data for key "
-//                              + j);
-  public CacheSerializableRunnable getCacheSerializableRunnableForPRPutsAndDestroy(
-      final String regionName, final int from, final int to) {
-    SerializableRunnable prPuts = new CacheSerializableRunnable("PRPuts") {
-      @Override
-      public void run2() throws CacheException {
-        Cache cache = getCache();
-        Region region = cache.getRegion(regionName);
-        
-        for (int j = from; j < to; j++) {
-          region.put(new Integer(j), new Portfolio(j));
-        }
-        
-        for (int j = from; j < to; j++) {
-          region.destroy(new Integer(j));
-        }
-      }
-    };
-    return (CacheSerializableRunnable) prPuts;
-  }
-//        getLogWriter()
-//            .info(
-//                "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: Inserted Portfolio data on Region "
-//                    + regionName);
-//        getLogWriter()
-//            .info(
-//                "PRQueryDUnitHelper#getCacheSerializableRunnableForPRPuts: Inserted Portfolio data on Region "
-//                    + regionName);
-              // getCache().getLogger().info("About to execute local query: " + queries[j]);
-              // getCache().getLogger().info("Executed local query " + j + ": " + queries[j] + "; on region: " + local.getFullPath() +
-              // "; region size=" + local.size() + "; region values=" + local.values() + ";results=" + r[j][0]);
-//                getCache().getLogger().info("About to execute PR query: " + queries[j]);
-//                getCache().getLogger().info("Finished executing PR query: " + queries[j]);
-//          getLogWriter()
-//              .info(
-//                  "PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region");
-
-          for (int i=0; i<expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=remove>" + expectedExceptions[i]
-                  + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        for (int i=0; i<expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                                                                    + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-
-//              getCache().getLogger().info("Finished executing PR query: " + qStr);
-          // compareTwoQueryResults(r, queries.length);
-          for (int i=0; i<expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                                                                         + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        for (int i=0; i<expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                                                                    + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-          for (int j = 0; j < queries.length; j++) {
+          for (final String query : queries) {
-              qStr = (distinct + queries[j].replace("REGION_NAME", localRegion)); 
+              qStr = (distinct + query.replace("REGION_NAME", localRegion));
-              qStr = (distinct + queries[j].replace("REGION_NAME", regionName)); 
+              qStr = (distinct + query.replace("REGION_NAME", regionName));
-
-//              getCache().getLogger().info("Finished executing PR query: " + qStr);
-              ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, 1, true,queries);
+              ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, 1, true, queries);
-          for (int i=0; i<expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                                                                         + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        for (int i=0; i<expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                                                                    + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
+
-                //assertEquals("The resultset size is not same as limit size.", l*l, srr.asList().size());
-
-//                getCache().getLogger().info("Finished executing PR query: " + qStr);
-
-          // compareTwoQueryResults(r, queries.length);
-          
-          for (int i=0; i<expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                                                                         + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-       Region local = cache.getRegion(localRegion);
-       for (int i=0; i<expectedExceptions.length; i++) {
+       for (final String expectedException : expectedExceptions) {
-             "<ExpectedException action=add>" + expectedExceptions[i]
-                                                                   + "</ExpectedException>");
+           "<ExpectedException action=add>" + expectedException
+             + "</ExpectedException>");
-
-//              getCache().getLogger().info(
-//                  "Finished executing PR query: " + qStr);
-         // compareTwoQueryResults(r, queries.length);
-         for (int i=0; i<expectedExceptions.length; i++) {
+         for (final String expectedException : expectedExceptions) {
-               "<ExpectedException action=remove>" + expectedExceptions[i]
-                                                                        + "</ExpectedException>");
+             "<ExpectedException action=remove>" + expectedException
+               + "</ExpectedException>");
-  public CacheSerializableRunnable getCacheSerializableRunnableForIndexUsageCheck(final String name) {
+  public CacheSerializableRunnable getCacheSerializableRunnableForIndexUsageCheck() {
-//        Region parRegion = cache.getRegion(name);
-          while(it.hasNext()) {         
-            //logger.info("Following indexes found : " + it.next());
+          while(it.hasNext()) {
-            /*List bucketIndex = ind.getBucketIndexes();
-            int k = 0;
-            logger.info("Total number of bucket index : "+bucketIndex.size());
-            while ( k < bucketIndex.size() ){
-              Index bukInd = (Index)bucketIndex.get(k);
-              logger.info("Buket Index "+bukInd+"  usage : "+bukInd.getStatistics().getTotalUses());
-              // if number of quries on pr change in getCacheSerializableRunnableForPRQueryAndCompareResults
-              // literal 6  should change.
-              //Asif :  With the optmization of Range Queries a where clause
-              // containing something like ID > 4 AND ID < 9 will be evaluated 
-              //using a single index lookup, so accordingly modifying the 
-              //assert value from 7 to 6
-              // Anil : With aquiringReadLock during Index.getSizeEstimate(), the
-              // Index usage in case of "ID = 0 OR ID = 1" is increased by 3.
-              int indexUsageWithSizeEstimation = 3;
-              int expectedUse = 6;
-              long indexUse = bukInd.getStatistics().getTotalUses();
-              // Anil : With chnages to use single index for PR query evaluation, once the index
-              // is identified the same index is used on other PR buckets, the sieEstimation is
-              // done only once, which adds additional index use for only one bucket index.
-              if (!(indexUse == expectedUse || indexUse == (expectedUse + indexUsageWithSizeEstimation))){
-                fail ("Index usage is not as expected, expected it to be either " + 
-                    expectedUse + " or " + (expectedUse + indexUsageWithSizeEstimation) + 
-                    " it is: " + indexUse);
-                //assertEquals(6 + indexUsageWithSizeEstimation, bukInd.getStatistics().getTotalUses());
-              }
-              k++;
-            }*/
-            //Shobhit: Now we dont need to check stats per bucket index,
-            //stats are accumulated in single pr index stats.
-            
-            // Anil : With aquiringReadLock during Index.getSizeEstimate(), the
-            // Index usage in case of "ID = 0 OR ID = 1" is increased by 3.
-            int indexUsageWithSizeEstimation = 3;
-            
-          // assertTrue("caught Exception"+ e.getMessage(),false);
-
-  /**
-   * This function creates a Accessor node region on the given PR given the
-   * scope parameter.
-   * 
-   * @param regionName
-   * @return cacheSerializable object
-   */
-
-  public CacheSerializableRunnable getCacheSerializableRunnableForPRAccessorCreate(
-      final String regionName, final int redundancy)
-  {
-    SerializableRunnable createPrRegion;
-    createPrRegion = new CacheSerializableRunnable(regionName) {
-      @Override
-      public void run2() throws CacheException
-      {
-        Cache cache = getCache();
-        Region partitionedregion = null;
-        int maxMem = 0;
-        AttributesFactory attr = new AttributesFactory();
-        attr.setValueConstraint(valueConstraint);
-        PartitionAttributesFactory paf = new PartitionAttributesFactory();
-        PartitionAttributes prAttr = paf.setLocalMaxMemory(maxMem)
-        .setRedundantCopies(redundancy).create();
-        attr.setPartitionAttributes(prAttr);
-        partitionedregion = cache.createRegion(regionName, attr.create());
-        assertNotNull(
-            "PRQueryDUnitHelper#getCacheSerializableRunnableForPRAccessorCreate: Partitioned Region "
-                + regionName + " not in cache", cache.getRegion(regionName));
-        assertNotNull(
-            "PRQueryDUnitHelper#getCacheSerializableRunnableForPRAccessorCreate: Partitioned Region ref null",
-            partitionedregion);
-        assertTrue(
-            "PRQueryDUnitHelper#getCacheSerializableRunnableForPRAccessorCreate: Partitioned Region ref claims to be destroyed",
-            !partitionedregion.isDestroyed());
-      }
-    };
-
-    return (CacheSerializableRunnable)createPrRegion;
-  }
-//    Iterator itert1 = null;
-//    Iterator itert2 = null;
-//        if (r[j][0] instanceof StructSet) {
-//          boolean pass = true;
-//          itert1 = set1.iterator();
-//          while (itert1.hasNext()) {
-//            StructImpl p1 = (StructImpl)itert1.next();
-//            itert2 = set2.iterator();
-//            boolean found = false;
-//            while (itert2.hasNext()) {
-//              StructImpl p2 = (StructImpl)itert2.next();
-//              Object[] values1 = p1.getFieldValues();
-//              Object[] values2 = p2.getFieldValues();
-//              if (values1.length != values2.length) {
-//                fail("PRQueryDUnitHelper#compareTwoQueryResults: The length of the values in struct fields does not match");
-//              }
-//              boolean exactMatch = true;
-//              for (int k = 0; k < values1.length; k++) {
-//                if (!values1[k].equals(values2[k]))
-//                  exactMatch = false;
-//              }
-//              if (exactMatch)
-//                found = true;
-//            }
-//
-//            if (!found)
-//              pass = false;
-//          }
-//
-//          if (pass) {
-//            getLogWriter()
-//            .info(
-//                  "PRQueryDUnitHelper#compareTwoQueryResults: Results found are StructSet and both of them are Equal.");
-//          }
-//          else {
-//            fail("PRQueryDUnitHelper#compareTwoQueryResults: Test failed the contents of the two resultSets are not same");
-//          }
-//        }
-//        else {
-//          boolean pass = true;
-//          itert1 = set1.iterator();
-//          while (itert1.hasNext()) {
-//            Object p1 = itert1.next();
-//            itert2 = set2.iterator();
-//            boolean found = false;
-//            while (itert2.hasNext()) {
-//              Object p2 = itert2.next();
-//              if (p2.equals(p1)) {
-//                found = true;
-//              }
-//            }
-//            if (!found)
-//              pass = false;
-//          }
-//
-//          if (pass) {
-//            getLogWriter()
-//              .info(
-//                  "PRQueryDUnitHelper#compareTwoQueryResults: Results found are ResultsSet and both of them are Equal.");
-//          }
-//          else {
-//            fail("PRQueryDUnitHelper#compareTwoQueryResults: Test failed the contents of the two resultSets are not same");
-//          }
-//        }
-   * 
-   * 
+   *
+   *
-      final String regionName, final String invalidQuery)
+    final String regionName)
-      final String regionName, final int redundancy)
+      final String regionName, final int redundancy, final Class constraint)
-//        Region partitionedregion = null;
-//        Properties localProps = new Properties();
-//        String maxMem = "0";
-
-        attr.setValueConstraint(PortfolioData.class);
+        attr.setValueConstraint(constraint);
+   *
+   * NOTE: Closing of the cache must be done from the test case rather than in PRQueryDUintHelper
+   *
-      final String regionName, final int redundancy)
+      final String regionName, final int redundancy, final Class constraint)
-        Cache cache = getCache();
-
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter()
-            .info(
-                "PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: Closing cache");
-        closeCache();
-
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter()
-            .info(
-                "PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: cache Closed on VM ");
-        cache = getCache();
-
+        Cache cache = getCache();
-//        Region partitionedregion = null;
-//        Properties localProps = new Properties();
-//        String maxMem = "0";
-
-        attr.setValueConstraint(PortfolioData.class);
+        attr.setValueConstraint(constraint);
-  /**
-   * This function <br>
-   * 1. The Creates an array of PortfolioData objects
-   * 
-   * @return PortFolioData Objects
-   */
-
-  public PortfolioData[] createPortfolioData(final int cnt, final int cntDest) {
-    PortfolioData[] portfolio = new PortfolioData[cntDest];
-    for (int k = cnt; k < cntDest; k++) {
-      portfolio[k] = new PortfolioData(k);
-    }
-    return portfolio;
-  }
-  
-  public Portfolio[] createPortfoliosAndPositions(int count) {
-    Position.cnt = 0; // reset Portfolio counter
-    Portfolio[] portfolios = new Portfolio[count];
-    for (int i = 0; i < count; i++) {
-      portfolios[i] = new Portfolio(i);
-    }
-    return portfolios;
-  }
-    
-
-  /**
-   * This function <br>
-   * 1. calls the region.destroyRegion() on the VM <br>
-   * 
-   * 
-   * @return cacheSerializable object
-   */
-
-  public CacheSerializableRunnable getCacheSerializableRunnableForRegionDestroy(
-      final String regionName, final int redundancy)
-  {
-    SerializableRunnable PrRegion = new CacheSerializableRunnable(
-        "regionDestroy") {
-      @Override
-      public void run2() throws CacheException
-      {
-        Cache cache = getCache();
-        final String expectedRegionDestroyedException = RegionDestroyedException.class
-            .getName();
-        final String expectedReplyException = ReplyException.class.getName();
-        getCache().getLogger().info(
-            "<ExpectedException action=add>" + expectedRegionDestroyedException
-                + "</ExpectedException>");
-        getCache().getLogger().info(
-            "<ExpectedException action=add>" + expectedReplyException
-                + "</ExpectedException>");
-
-        Region region = cache.getRegion(regionName);
-
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter()
-            .info(
-                "PRQueryRegionDestroyedDUnitTest#getCacheSerializableRunnableForRegionClose: Destroying region "
-                    + region);
-        region.destroyRegion();
-
-        assertTrue("Region destroy failed", region.isDestroyed());
-
-        getCache().getLogger().info(
-            "<ExpectedException action=remove>" + expectedReplyException
-                + "</ExpectedException>");
-        getCache().getLogger().info(
-            "<ExpectedException action=remove>"
-                + expectedRegionDestroyedException + "</ExpectedException>");
-      }
-
-    };
-    return (CacheSerializableRunnable)PrRegion;
-  }
-
-  /**
-   * This function <br>
-   * 1. Creates & executes a query with Logical Operators on the given PR Region
-   * 2. Executes the same query on the local region <br>
-   * 3. Compares the appropriate resultSet <br>
-   * 4. Compares and Print's the time taken for each <br>
-   */
-
-  public CacheSerializableRunnable PRQueryingVsLocalQuerying(
-      final String regionName, final String localRegion, final ResultsObject perfR)
-  {
-    SerializableRunnable PrRegion = new CacheSerializableRunnable("PRvsLocal") {
-      @Override
-      public void run2() throws CacheException
-      {
-        PerfResultsObject prfRObject=new PerfResultsObject(perfR);
-        Cache cache = getCache();
-        // Querying the localRegion and the PR region
-
-        String[] query = { "ID = 0 OR ID = 1", "ID > 4 AND ID < 9", "ID = 5",
-            "ID < 5 ", "ID <= 5" , "ID > 7 AND status ='active'" };
-        Object r[][] = new Object[query.length][2];
-
-        Region local = cache.getRegion(localRegion);
-        Region region = cache.getRegion(regionName);
-        assertEquals(local.values(), region.values());
-        
-        long startTimeLocal = System.currentTimeMillis();
-        try {
-          for (int j = 0; j < query.length; j++) {
-            r[j][0] = local.query(query[j]);
-
-          }
-          long endTimeLocal=System.currentTimeMillis();
-          long queryTimeLocal = endTimeLocal-startTimeLocal;
-          com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("PRQueryDUnitHelper#PRQueryingVsLocalQuerying: Time to Query Local cache "+queryTimeLocal + " ms");
-          
-          long startTimePR = System.currentTimeMillis();
-          for (int k = 0; k < query.length; k++) {
-            r[k][1] = region.query(query[k]);
-
-          }
-          long endTimePR = System.currentTimeMillis();
-          long queryTimePR = endTimePR-startTimePR;
-          
-          com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("PRQueryDUnitHelper#PRQueryingVsLocalQuerying: Time to Query PR "+queryTimePR+" ms");
-          com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter()
-              .info(
-                  "PRQueryDUnitHelper#PRQueryingVsLocalQuerying: Queries Executed successfully on Local region & PR Region");
-
-          prfRObject.QueryingTimeLocal=queryTimeLocal;
-          prfRObject.QueryingTimePR=queryTimePR;
-          
-          prfRObject.displayResults();
-          compareTwoQueryResults(r, query.length);
-          
-        }
-        catch (QueryException e) {
-          com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter()
-              .error(
-                  "PRQueryDUnitHelper#PRQueryingVsLocalQuerying: Caught QueryException while querying"
-                      + e, e);
-          fail("PRQueryDUnitHelper#PRQueryingVsLocalQuerying: Caught unexpected query exception. Exception is "
-              + e);
-        }
-
-      }
-
-    };
-    return (CacheSerializableRunnable)PrRegion;
-  }
-  
-  class PerfResultsObject implements Serializable {
-    String OperationDescription;
-    String Scope= null;
-    long QueryingTimeLocal;
-    long QueryingTimePR;
-    int NumberOfDataStores = 0;
-    int NumberOfAccessors = 0;
-    int redundancy=0;
-    
-    public PerfResultsObject(ResultsObject prfR){
-      this.OperationDescription=prfR.OperationDescription;
-      this.redundancy=prfR.redundancy;
-      this.NumberOfAccessors=prfR.NumberOfAccessors;
-      this.NumberOfDataStores=prfR.NumberOfDataStores;
-    }
-    
-    
-    
-    public void displayResults(){
-      
-      try {
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("PRQueryDUnitHelper:PerfResultsObject#displayResults");
-        BufferedWriter out = new BufferedWriter(new FileWriter("PRQueryPerfDUnitTest.txt", true));
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("~~~~~~~~~~~~~~~~~~~~~~~PR Querying Performance Results~~~~~~~~~~~~~~~~~~~~~~~");
-        out.write("~~~~~~~~~~~~~~~~~~~~~~~PR Querying Performance Results~~~~~~~~~~~~~~~~~~~~~~~\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info(this.OperationDescription);
-        out.write("\t"+this.OperationDescription+"\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("Scope                    : "+this.Scope);
-        out.write("Scope                    : "+this.Scope+"\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("Redundancy Level         : "+this.redundancy);
-        out.write("Redundancy Level         : "+this.redundancy+"\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("Number of Accessor       : "+this.NumberOfAccessors);
-        out.write("Number of Accessor       : "+this.NumberOfAccessors+"\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("Number of Datastore/s    : "+this.NumberOfDataStores);
-        out.write("Number of Datastore/s    : "+this.NumberOfDataStores+"\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("QueryingTime Local       : "+this.QueryingTimeLocal+" ms");
-        out.write("QueryingTime Local       : "+this.QueryingTimeLocal+" ms\n\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("QueryingTime PR          : "+this.QueryingTimePR+" ms");
-        out.write("QueryingTime PR          : "+this.QueryingTimePR+" ms\n");
-        
-        com.gemstone.gemfire.test.dunit.LogWriterUtils.getLogWriter().info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
-        out.write("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
-        out.close();
-    } catch (IOException e) {
-    }
-    }
-  }
-    
-        /*    logger.info(
-                "Number of buckets indexed in the partitioned region locally : "
-                    + "" + ((PartitionedIndex)parIndex).getNumberOfIndexedBucket()
-                    + " and remote buckets indexed : "
-                    + ((PartitionedIndex)parIndex).getNumRemoteBucketsIndexed());
-                    */
-  
-            
-          } 
+          }
-          /*
-           * assertEquals("Max num of buckets in the partiotion regions and
-           * the " + "buckets indexed should be equal",
-           * ((PartitionedRegion)region).getTotalNumberOfBuckets(),
-           * (((PartionedIndex)parIndex).getNumberOfIndexedBucket()+((PartionedIndex)parIndex).getNumRemtoeBucketsIndexed()));
-           * should put all the assetion in a seperate function.
-           */
-   * Creates an xml file used in subsequent tasks.
-   * 
-   */
-
-  public CacheSerializableRunnable getCacheSerializableForPrXmlFileGenerator(
-      final String regionName, final int redundancy, final String fileName)
-  {
-    SerializableRunnable prXMLFileCreator = new CacheSerializableRunnable(
-        "prXmlFileCreator") {
-      @Override
-      public void run2()
-      {
-        Cache cache = getCache();
-        Region partitionedregion = cache.getRegion(regionName);
-        cache.getLogger().info(
-            "the index created : "
-                + ((PartitionedRegion)partitionedregion).getIndex());
-        /*
-         try {
-         //AttributesFactory attr = new AttributesFactory();
-         //attr.setValueConstraint(valueConstraint);
-         // attr.setScope(scope);
-
-         PartitionAttributesFactory paf = new PartitionAttributesFactory();
-         PartitionAttributes prAttr = paf.setRedundantCopies(redundancy).create();
-
-         attr.setPartitionAttributes(prAttr);
-
-         // partitionedregion = cache.createRegion(regionName, attr.create());
-         }
-         catch (IllegalStateException ex) {
-         getLogWriter()
-         .warning(
-         "PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Creation caught IllegalStateException",
-         ex);
-         }
-         assertNotNull(
-         "PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region "
-         + regionName + " not in cache", cache.getRegion(regionName));
-         assertNotNull(
-         "PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region ref null",
-         partitionedregion);
-         assertTrue(
-         "PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region ref claims to be destroyed",
-         !partitionedregion.isDestroyed());
-         */
-        // genrate the xml file.
-        writeCacheXml(fileName, cache);
-      }
-
-    };
-    return (CacheSerializableRunnable)prXMLFileCreator;
-  }
-  
-  /**
-   * Finish what beginCacheXml started. It does this be generating a cache.xml
-   * file and then creating a real cache using that cache.xml.
-   */
-  public void writeCacheXml(String name, Cache cache)
-  {
-    File file = new File(name + "-cache.xml");
-    try {
-      PrintWriter pw = new PrintWriter(new FileWriter(file), true);
-      CacheXmlGenerator.generate(cache, pw);
-      pw.close();
-    }
-    catch (IOException ex) {
-      Assert.fail("IOException during cache.xml generation to " + file, ex);
-    }
-
-  }
-  
-  /**
-   * @param xmlFileName
-   * 
+   *
-  public CacheSerializableRunnable getCacheSerializableRunnableForPRCreateThrougXML(
-      final String regionName, final String xmlFileName)
+  public CacheSerializableRunnable getCacheSerializableRunnableForPRCreate(final String regionName)
-        InternalDistributedSystem sys = null;
-        closeCache();
-       // Properties props = new Properties();
-        File file = findFile(xmlFileName);
-       // props.setProperty(DistributionConfig.CACHE_XML_FILE_NAME, file
-       //     .toString());
-        GemFireCacheImpl.testCacheXml = file;
-        sys = getSystem();
-        // add expected exception for possible index conflict
-        sys.getLogWriter().info("<ExpectedException action=add>"
-            + IndexNameConflictException.class.getName()
-            + "</ExpectedException>");
-        Cache cache = getCache();
-        LogWriter logger = cache.getLogger();
-        PartitionedRegion region = (PartitionedRegion)cache
+          Cache cache = getCache();
+          LogWriter logger = cache.getLogger();
+          PartitionedRegion region = (PartitionedRegion)cache
-        Map indexMap = region.getIndex();
-        Set indexSet = indexMap.entrySet();
-        Iterator it = indexSet.iterator();
-        while (it.hasNext()) {
-          Map.Entry entry = (Map.Entry)it.next();
-          Index index = (Index)entry.getValue();
-          logger.info("The partitioned index created on this region "
+          Map indexMap = region.getIndex();
+          Set indexSet = indexMap.entrySet();
+          Iterator it = indexSet.iterator();
+          while (it.hasNext()) {
+            Map.Entry entry = (Map.Entry)it.next();
+            Index index = (Index)entry.getValue();
+            logger.info("The partitioned index created on this region "
-          logger.info("Current number of buckets indexed : " + ""
+            logger.info("Current number of buckets indexed : " + ""
-          if (sys != null) {
-            sys.getLogWriter().info("<ExpectedException action=remove>"
-                + IndexNameConflictException.class.getName()
-                + "</ExpectedException>");
-          }
-  protected File findFile(String fileName)
+  public File findFile(String fileName)
-    CacheSerializableRunnable prIndexCheck = new CacheSerializableRunnable(
+    return new CacheSerializableRunnable(
-        //closeCache();
-        Cache cache = getCache();
-        LogWriter logger = cache.getLogger();
-        PartitionedRegion region = (PartitionedRegion)cache.getRegion(name);
+        Cache cache1 = getCache();
+        LogWriter logger = cache1.getLogger();
+        PartitionedRegion region = (PartitionedRegion) cache1.getRegion(name);
-        
-        closeCache();
-        disconnectFromDS();
+
+        JUnit4CacheTestCase.closeCache();
+        JUnit4DistributedTestCase.disconnectFromDS();
-    return prIndexCheck;
-    CacheSerializableRunnable prRemoveIndex = new CacheSerializableRunnable(
+    return new CacheSerializableRunnable(
-        
-        Cache cache = getCache();
-        LogWriter logger = cache.getLogger();
-        logger.info("Got the following cache : "+cache);
-        Region parRegion = cache.getRegion(name);
-        QueryService qs = cache.getQueryService();
+
+        Cache cache1 = getCache();
+        LogWriter logger = cache1.getLogger();
+        logger.info("Got the following cache : "+ cache1);
+        Region parRegion = cache1.getRegion(name);
+        QueryService qs = cache1.getQueryService();
-    return prRemoveIndex;
-        for (int i = 0; i < expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                  + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-          for (int i = 0; i < expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                    + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        for (int i = 0; i < expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                  + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-          for (int i = 0; i < expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                    + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-            // "r1.ID = r2.id LIMIT 10",
-        for (int i = 0; i < expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                  + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-        Object[] params;
-          // compareTwoQueryResults(r, queries.length);
-          for (int i = 0; i < expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                    + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        for (int i = 0; i < expectedExceptions.length; i++) {
+        for (final String expectedException : expectedExceptions) {
-              "<ExpectedException action=add>" + expectedExceptions[i]
-                  + "</ExpectedException>");
+            "<ExpectedException action=add>" + expectedException
+              + "</ExpectedException>");
-          // compareTwoQueryResults(r, queries.length);
-          for (int i = 0; i < expectedExceptions.length; i++) {
+          for (final String expectedException : expectedExceptions) {
-                "<ExpectedException action=remove>" + expectedExceptions[i]
-                    + "</ExpectedException>");
+              "<ExpectedException action=remove>" + expectedException
+                + "</ExpectedException>");
-        closeCache();
+        JUnit4CacheTestCase.closeCache();
-
-
-  public NewPortfolio[] createNewPortfoliosAndPositions(int count) {
-    Position.cnt = 0; // reset Portfolio counter
-    NewPortfolio[] portfolios = new NewPortfolio[count];
-    for (int i = 0; i < count; i++) {
-      portfolios[i] = new NewPortfolio("" + i, i);
-    }
-    return portfolios;
-  }

MOV26 MOV26 MOV26 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 MOV43 INS23 MOV29 INS83 INS43 INS59 UPD83 MOV83 MOV39 INS42 MOV44 MOV8 INS42 MOV8 UPD83 MOV83 INS43 INS42 INS8 MOV29 MOV43 MOV44 MOV44 MOV44 INS44 UPD42 UPD83 MOV43 UPD42 MOV44 MOV44 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV44 MOV44 MOV42 MOV42 INS33 MOV42 INS41 INS83 INS43 INS42 MOV41 INS42 INS66 INS42 MOV14 MOV14 MOV43 MOV43 MOV11 INS40 INS42 MOV42 MOV43 MOV43 MOV43 MOV42 MOV60 MOV78 MOV43 MOV60 INS70 INS70 INS70 INS70 MOV43 INS70 MOV60 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 INS70 MOV60 MOV60 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 INS70 MOV60 INS70 MOV59 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS8 UPD42 MOV32 INS42 INS42 UPD42 INS44 INS42 INS8 MOV44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS42 MOV42 MOV32 MOV42 INS70 INS83 INS43 INS42 MOV21 INS70 INS83 INS43 INS42 MOV21 INS70 INS70 INS83 INS43 INS42 MOV21 INS70 INS83 INS43 INS42 MOV21 INS70 INS42 INS42 MOV21 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 INS83 MOV43 INS42 MOV21 INS70 UPD42 MOV21 INS70 MOV42 INS83 MOV43 INS42 MOV21 INS70 INS83 INS43 INS42 MOV21 INS70 MOV42 MOV44 INS42 INS8 INS42 INS44 INS42 INS8 INS42 INS44 INS42 MOV8 INS44 INS42 INS8 INS42 INS44 INS42 INS8 UPD42 MOV42 INS44 INS42 INS8 UPD42 MOV44 INS42 INS8 MOV44 INS42 INS8 MOV42 INS44 INS42 INS8 INS42 INS44 INS42 INS8 INS83 UPD42 MOV21 MOV32 INS83 INS43 INS42 MOV21 MOV32 INS83 INS43 INS42 INS83 INS43 INS42 MOV21 MOV32 INS83 INS43 INS42 MOV21 MOV32 INS83 MOV43 INS42 MOV21 UPD42 MOV21 INS83 UPD42 MOV21 INS83 MOV43 INS42 MOV21 MOV32 INS83 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 MOV32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL38 DEL32 DEL21 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL78 DEL42 DEL42 DEL43 DEL31 DEL1 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL78 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL85 DEL5 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL59 DEL60 DEL42 DEL43 DEL42 DEL85 DEL85 DEL42 DEL43 DEL85 DEL85 DEL5 DEL40 DEL34 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL34 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL34 DEL2 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL40 DEL42 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL83 DEL42 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL57 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL24 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL83 DEL42 DEL44 DEL42 DEL43 DEL57 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL7 DEL21 DEL42 DEL43 DEL57 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL40 DEL34 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL59 DEL23 DEL42 DEL33 DEL59 DEL23 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL34 DEL59 DEL23 DEL39 DEL42 DEL34 DEL59 DEL23 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL45 DEL9 DEL14 DEL14 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL45 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL65 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL43 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL40 DEL34 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31