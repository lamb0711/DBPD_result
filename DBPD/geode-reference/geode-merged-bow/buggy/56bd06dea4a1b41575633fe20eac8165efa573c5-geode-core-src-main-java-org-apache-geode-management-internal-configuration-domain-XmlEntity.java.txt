Feature/geode 3781: JDBC Connector (#1176)

GEODE-3781: add geode-connectors module

Introduce new PDX JDBC Connector Service:
* GEODE-3782: implement JdbcWriter
* GEODE-3783: implement JdbcAsyncWriter
* GEODE-3823: implement JdbcLoader
+import java.io.Serializable;
+import org.apache.geode.internal.cache.InternalCache;
-/****
+/**
- *
- *
+  private transient volatile CacheProvider cacheProvider;
+
+
+
+
+
+   * Produce a new XmlEntityBuilder.
+   *
+   * @return new XmlEntityBuilder.
+   * @since GemFire 8.1
+   */
+  public static XmlEntityBuilder builder() {
+    return new XmlEntityBuilder();
+  }
+
+  private static CacheProvider createDefaultCacheProvider() {
+    return () -> (InternalCache) CacheFactory.getAnyInstance();
+  }
+
+  /**
-  public XmlEntity() {}
+  public XmlEntity() {
+    this.cacheProvider = createDefaultCacheProvider();
+  }
+    this.cacheProvider = createDefaultCacheProvider();
-  /****
+  /**
+    this.cacheProvider = createDefaultCacheProvider();
-
-  /****
+  /**
+    this.cacheProvider = createDefaultCacheProvider();
+  public XmlEntity(final String parentType, final String childPrefix, final String childNamespace,
+      final String childType) {
+    this(createDefaultCacheProvider(), parentType, childPrefix, childNamespace, childType);
+  }
+
+  public XmlEntity(final CacheProvider cacheProvider, final String parentType,
+      final String childPrefix, final String childNamespace, final String childType) {
+    this.cacheProvider = cacheProvider;
+    this.parentType = parentType;
+    this.type = childType;
+    this.childPrefix = childPrefix;
+    this.childNamespace = childNamespace;
+
+    StringBuilder sb = new StringBuilder();
+    sb.append("//").append(this.parentType);
+    sb.append('/').append(childPrefix).append(':').append(this.type);
+    this.searchString = sb.toString();
+    this.xmlDefinition = parseXmlForDefinition();
+  }
+
+  private String parseXmlForDefinition() {
+    final Cache cache = cacheProvider.getCache();
+
+    final StringWriter stringWriter = new StringWriter();
+    final PrintWriter printWriter = new PrintWriter(stringWriter);
+    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    printWriter.close();
+    InputSource inputSource = new InputSource(new StringReader(stringWriter.toString()));
+
+    try {
+      Document document = XmlUtils.getDocumentBuilder().parse(inputSource);
+      Node element = document.getElementsByTagNameNS(childNamespace, type).item(0);
+      if (null != element) {
+        return XmlUtils.elementToString(element);
+      }
+    } catch (IOException | ParserConfigurationException | RuntimeException | SAXException
+        | TransformerException e) {
+      throw new InternalGemFireError("Could not parse XML when creating XMLEntity", e);
+    }
+
+    logger.warn("No XML definition could be found with name={} and attributes={}", type,
+        attributes);
+    return null;
+  }
+
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-    sb.append("/").append(childPrefix).append(':').append(this.type);
+    sb.append('/').append(childPrefix).append(':').append(this.type);
-    final Cache cache = CacheFactory.getAnyInstance();
+    final Cache cache = cacheProvider.getCache();
-   * Used supplied xmlDocument to extract the XML for the defined {@link XmlEntity}.
+   * Used supplied xmlDocument to extract the XML for the defined XmlEntity.
-   * @return XML for {@link XmlEntity} if found, otherwise <code>null</code>.
+   * @return XML for XmlEntity if found, otherwise {@code null}.
-    final Cache cache = CacheFactory.getAnyInstance();
-   * Used supplied XML {@link Document} to extract the XML for the defined {@link XmlEntity}.
+   * Used supplied XML {@link Document} to extract the XML for the defined XmlEntity.
-   * @return XML for {@link XmlEntity} if found, otherwise <code>null</code>.
-   * @throws XPathExpressionException
-   * @throws TransformerException
-   * @throws TransformerFactoryConfigurationError
+   * @return XML for XmlEntity if found, otherwise {@code null}.
-  private String loadXmlDefinition(final Document document)
+  public String loadXmlDefinition(final Document document)
-    final Cache cache = CacheFactory.getAnyInstance();
-
+
+      // TODO: wrap this line with conditional
+      xpathContext.addNamespace(childPrefix, childNamespace);
+
+
-    if (attributes.size() > 0) {
-      queryStringBuilder.append("[");
+    if (!attributes.isEmpty()) {
+      queryStringBuilder.append('[');
-      queryStringBuilder.append("@").append(attrEntry.getKey()).append("='")
-          .append(attrEntry.getValue()).append("'");
+      queryStringBuilder.append('@').append(attrEntry.getKey()).append("='")
+          .append(attrEntry.getValue()).append('\'');
-            .append(attrEntry.getValue()).append("'");
+            .append(attrEntry.getValue()).append('\'');
-      queryStringBuilder.append("]");
+      queryStringBuilder.append(']');
+  public Version[] getSerializationVersions() {
+    return new Version[] {Version.GEODE_111};
+  }
+
+  @Override
-        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + "]";
+        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + ']';
+    this.cacheProvider = createDefaultCacheProvider();
-   * Produce a new {@link XmlEntityBuilder}.
-   *
-   * @return new {@link XmlEntityBuilder}.
-   * @since GemFire 8.1
+   * Defines how XmlEntity gets a reference to the Cache.
-  public static XmlEntityBuilder builder() {
-    return new XmlEntityBuilder();
-  }
-
-  @Override
-  public Version[] getSerializationVersions() {
-    return new Version[] {Version.GEODE_111};
+  public interface CacheProvider {
+    InternalCache getCache();
-   * Builder for {@link XmlEntity}. Default values are as described in {@link XmlEntity}.
-   *
+   * Builder for XmlEntity. Default values are as described in XmlEntity.
+
-    private XmlEntityBuilder() {
+    XmlEntityBuilder() {
-     * Produce an {@link XmlEntity} with the supplied values. Builder is reset after
-     * {@link #build()} is called. Subsequent calls will produce a new {@link XmlEntity}.
+     * Produce an XmlEntity with the supplied values. Builder is reset after #build() is called.
+     * Subsequent calls will produce a new XmlEntity.
-     * @return {@link XmlEntity}
+     * @return XmlEntity
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
+     * @return this XmlEntityBuilder
-     * @return this {@link XmlEntityBuilder}
-     * @throws TransformerException
-     * @throws TransformerFactoryConfigurationError
-     * @throws XPathExpressionException
+     * @return this XmlEntityBuilder
-

INS26 INS26 MOV31 MOV31 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 UPD83 INS29 INS83 INS42 INS31 INS42 INS42 INS42 INS41 INS21 INS21 INS21 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS17 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS42 INS60 INS60 INS60 INS21 INS21 INS60 INS54 INS21 INS41 INS21 INS65 INS43 INS42 UPD66 UPD66 INS86 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS43 INS59 INS32 INS32 INS7 INS7 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS43 INS59 INS8 INS12 INS32 INS33 UPD43 MOV43 UPD66 UPD66 UPD65 UPD66 UPD66 UPD66 UPD65 UPD66 INS38 INS7 INS66 INS42 UPD66 INS11 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS32 INS42 INS22 INS32 INS42 MOV22 INS22 INS32 INS22 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS9 INS9 INS42 INS42 INS42 INS42 INS14 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS45 INS42 INS42 UPD42 INS22 INS32 INS66 INS66 INS21 INS32 INS13 INS22 INS32 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS43 MOV32 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS45 INS52 INS42 INS32 INS42 INS13 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS14 INS43 INS59 INS43 INS59 INS27 INS8 INS84 INS42 INS53 UPD43 INS52 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS41 INS43 INS43 INS43 INS43 INS43 INS14 UPD42 INS42 INS42 INS42 INS42 INS13 INS13 INS13 INS42 INS42 INS13 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS13 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL45 DEL42 DEL65 DEL66 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL65 DEL66 DEL42 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL34 DEL27 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL66 DEL42 DEL65 DEL42 DEL65 DEL66 DEL83 DEL66 DEL42 DEL65 DEL42 DEL68 DEL65 DEL42 DEL65 DEL66 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65