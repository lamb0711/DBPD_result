GEODE-6295: Use InternalCacheBuilder for constructing GemFireCacheImpl (#3260)

All code (product and tests) now use InternalCacheBuilder to construct
instances of GemFireCacheImpl.

+import static org.apache.geode.distributed.internal.DistributionConfig.GEMFIRE_PREFIX;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.internal.cache.CacheConfig;
+import org.apache.geode.internal.cache.InternalCacheBuilder;
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT");
+      Boolean.getBoolean(GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT");
-      DistributionConfig.GEMFIRE_PREFIX + "disableManagement";
+      GEMFIRE_PREFIX + "disableManagement";
+
+  public static final String ALLOW_MULTIPLE_SYSTEMS_PROPERTY =
+      GEMFIRE_PREFIX + "ALLOW_MULTIPLE_SYSTEMS";
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ALLOW_MULTIPLE_SYSTEMS");
+      Boolean.getBoolean(ALLOW_MULTIPLE_SYSTEMS_PROPERTY);
-  public static DistributedSystem connectInternal(Properties config,
+  public static InternalDistributedSystem connectInternal(Properties config,
-        DistributedSystem existingSystem = getConnection(config);
+        InternalDistributedSystem existingSystem =
+            (InternalDistributedSystem) getConnection(config);
-      DistributionConfig.GEMFIRE_PREFIX + "disableShutdownHook";
+      GEMFIRE_PREFIX + "disableShutdownHook";
-  public static final String APPEND_TO_LOG_FILE = DistributionConfig.GEMFIRE_PREFIX + "append-log";
+  public static final String APPEND_TO_LOG_FILE = GEMFIRE_PREFIX + "append-log";
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "statsDisabled");
+      Boolean.getBoolean(GEMFIRE_PREFIX + "statsDisabled");
-   * creates a non-functional instance for testing
+   * Creates a non-functional instance for testing.
-   * @param nonDefault - non-default distributed system properties
+   * @param distributionManager the distribution manager for the test instance
+   * @param properties properties to configure the test instance
-  public static InternalDistributedSystem newInstanceForTesting(DistributionManager dm,
-      Properties nonDefault) {
-    InternalDistributedSystem sys = new InternalDistributedSystem(nonDefault);
-    sys.config = new RuntimeDistributionConfigImpl(sys);
-    sys.dm = dm;
-    sys.isConnected = true;
-    return sys;
+  public static InternalDistributedSystem newInstanceForTesting(
+      DistributionManager distributionManager, Properties properties) {
+    StatisticsManagerFactory statisticsManagerFactory = defaultStatisticsManagerFactory();
+
+    return newInstanceForTesting(
+        distributionManager, properties, statisticsManagerFactory);
-  public static InternalDistributedSystem newInstanceForTesting(StatisticsManagerFactory factory) {
-    return new InternalDistributedSystem(new Properties(), factory);
+  /**
+   * Creates a non-functional instance for testing.
+   *
+   * @param distributionManager the distribution manager for the test instance
+   * @param properties properties to configure the test instance
+   * @param statisticsManagerFactory the statistics manager factory for the test instance
+   */
+  static InternalDistributedSystem newInstanceForTesting(DistributionManager distributionManager,
+      Properties properties, StatisticsManagerFactory statisticsManagerFactory) {
+    ConnectionConfigImpl connectionConfig = new ConnectionConfigImpl(properties);
+
+    InternalDistributedSystem internalDistributedSystem =
+        new InternalDistributedSystem(connectionConfig, statisticsManagerFactory);
+
+    internalDistributedSystem.config = new RuntimeDistributionConfigImpl(internalDistributedSystem);
+    internalDistributedSystem.dm = distributionManager;
+    internalDistributedSystem.isConnected = true;
+
+    return internalDistributedSystem;
-  private InternalDistributedSystem(Properties properties) {
-    this(properties, defaultStatisticsManagerFactory());
+  /**
+   * Creates a new {@code InternalDistributedSystem} with the given configuration properties.
+   * Does all of the magic of finding the "default" values of properties.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
+   *
+   * @param configurationProperties properties to configure the connection
+   */
+  private InternalDistributedSystem(Properties configurationProperties) {
+    this(new ConnectionConfigImpl(configurationProperties));
-   * Creates a new <code>InternalDistributedSystem</code> with the given configuration properties.
-   * Does all of the magic of finding the "default" values of properties. See
-   * {@link DistributedSystem#connect} for a list of exceptions that may be thrown.
+   * Creates a new {@code InternalDistributedSystem} with the given configuration.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
-   * @param nonDefault The non-default configuration properties specified by the caller
-   *
-   * @see DistributedSystem#connect
+   * @param config the configuration for the connection
-  private InternalDistributedSystem(Properties nonDefault,
+  private InternalDistributedSystem(ConnectionConfig config) {
+    this(config, defaultStatisticsManagerFactory());
+    isReconnectingDS = config.isReconnecting();
+    quorumChecker = config.quorumChecker();
+  }
+
+  /**
+   * Creates a new {@code InternalDistributedSystem} with the given configuration.
+   * <p>
+   * See {@link #connect} for a list of exceptions that may be thrown.
+   *
+   * @param config the configuration for the connection
+   * @param statisticsManagerFactory creates the statistics manager for this member
+   */
+  private InternalDistributedSystem(ConnectionConfig config,
-    Object o = nonDefault.remove(DistributionConfig.DS_RECONNECTING_NAME);
-    if (o instanceof Boolean) {
-      this.isReconnectingDS = (Boolean) o;
-    } else {
-      this.isReconnectingDS = false;
-    }
-
-    o = nonDefault.remove(DistributionConfig.DS_QUORUM_CHECKER_NAME);
-    if (o instanceof QuorumChecker) {
-      this.quorumChecker = (QuorumChecker) o;
-    }
-
-    o = nonDefault.remove(DistributionConfig.DS_CONFIG_NAME);
-    if (o instanceof DistributionConfigImpl) {
-      this.originalConfig = (DistributionConfigImpl) o;
-    } else {
-      this.originalConfig = new DistributionConfigImpl(nonDefault);
-    }
+    originalConfig = config.distributionConfig();
-    synchronized (CacheFactory.class) { // bug #51335 - deadlock with app thread trying to create a
-                                        // cache
+    synchronized (InternalCacheBuilder.class) {
-                CacheConfig config = new CacheConfig();
-                if (cacheXML != null) {
-                  config.setCacheXMLDescription(cacheXML);
-                }
-                cache = GemFireCacheImpl.create(this.reconnectDS, config);
+                cache = new InternalCacheBuilder()
+                    .setCacheXMLDescription(cacheXML)
+                    .create(reconnectDS);
-

MOV26 MOV26 MOV31 UPD40 UPD40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 UPD43 INS29 MOV44 INS44 INS44 INS29 INS83 INS42 MOV44 INS8 INS29 INS44 INS42 INS42 INS27 UPD42 INS65 INS65 INS65 UPD42 INS43 INS42 INS60 INS65 INS65 INS43 INS42 UPD42 INS43 INS42 INS60 INS65 INS65 UPD42 INS17 INS65 INS65 UPD43 UPD42 INS21 INS21 UPD65 INS43 INS42 MOV21 INS42 INS42 INS45 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 MOV43 INS59 INS32 UPD66 INS42 INS66 UPD42 UPD66 INS42 INS66 INS42 INS42 INS43 INS59 MOV43 UPD42 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS14 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 UPD42 UPD42 INS7 INS7 INS66 INS65 UPD66 INS66 UPD66 UPD42 UPD66 INS42 INS66 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV42 UPD42 UPD40 UPD40 UPD42 UPD40 INS66 INS67 INS43 INS42 INS66 INS67 INS42 INS32 INS42 INS32 INS66 INS42 INS32 UPD43 INS42 INS43 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD43 UPD42 INS11 INS43 MOV32 INS42 INS21 INS7 INS42 INS32 INS32 MOV42 INS42 INS14 MOV42 MOV42 UPD43 MOV43 UPD42 DEL40 DEL40 DEL40 DEL45 DEL27 DEL40 DEL40 DEL40 DEL42 DEL42 DEL43 DEL14 DEL42 DEL14 DEL83 DEL42 DEL42 DEL42 DEL67 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21