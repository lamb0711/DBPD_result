GEODE-1726 Clean up compilation warnings in new GMS

-import static com.sun.corba.se.impl.naming.cosnaming.NamingUtils.debug;
+import java.util.stream.*;
-import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
+@SuppressWarnings({ "SynchronizationOnLocalVariableOrMethodParameter", "NullableProblems" })
-  private static Logger logger = Services.getLogger();
+  private static final Logger logger = Services.getLogger();
-  volatile long currentTimeStamp;
+  private volatile long currentTimeStamp;
-  volatile boolean playingDead = false;
+  private volatile boolean playingDead = false;
-  volatile boolean beingSick = false;
+  private volatile boolean beingSick = false;
-  protected DMStats stats;
+  private DMStats stats;
-    private Socket socket;
+    private final Socket socket;
-        @SuppressWarnings("unused")
+        @SuppressWarnings("UnusedAssignment")
+  @SuppressWarnings("EmptyMethod")
-    checkExecutor.execute(new Runnable() {
-
-      @Override
-      public void run() {
-        boolean pinged = false;
-        try {
-          pinged = GMSHealthMonitor.this.doCheckMember(mbr, true);
-        } catch (CancelException e) {
-          return;
-        }
-          
-        if (!pinged) {
-          suspectedMemberInView.put(mbr, currentView);
-          String reason = "Member isn't responding to heartbeat requests";
-          GMSHealthMonitor.this.initiateSuspicion(mbr, reason);
-        } else {
-          logger.trace("Setting next neighbor as member {} has responded.", mbr);
-          suspectedMemberInView.remove(mbr);
-          // back to previous one
-          setNextNeighbor(GMSHealthMonitor.this.currentView, null);
-        }
+    checkExecutor.execute(() -> {
+      boolean pinged = false;
+      try {
+        pinged = GMSHealthMonitor.this.doCheckMember(mbr, true);
+      } catch (CancelException e) {
+        return;
+      }
+        
+      if (!pinged) {
+        suspectedMemberInView.put(mbr, currentView);
+        String reason = "Member isn't responding to heartbeat requests";
+        GMSHealthMonitor.this.initiateSuspicion(mbr, reason);
+      } else {
+        logger.trace("Setting next neighbor as member {} has responded.", mbr);
+        suspectedMemberInView.remove(mbr);
+        // back to previous one
+        setNextNeighbor(GMSHealthMonitor.this.currentView, null);
-    List<SuspectRequest> sl = new ArrayList<SuspectRequest>();
+    List<SuspectRequest> sl = new ArrayList<>();
-    scheduler = Executors.newScheduledThreadPool(1, new ThreadFactory() {
-      @Override
-      public Thread newThread(Runnable r) {
-        Thread th = new Thread(Services.getThreadGroup(), r, "Geode Failure Detection Scheduler");
-        th.setDaemon(true);
-        return th;
-      }
+    scheduler = Executors.newScheduledThreadPool(1, r -> {
+      Thread th = new Thread(Services.getThreadGroup(), r, "Geode Failure Detection Scheduler");
+      th.setDaemon(true);
+      return th;
-      AtomicInteger threadIdx = new AtomicInteger();
+      final AtomicInteger threadIdx = new AtomicInteger();
-//    suspectRequestCollectorThread.start();
+//    suspectRequestCollectorThread.start()
-      AtomicInteger threadIdx = new AtomicInteger();
+      final AtomicInteger threadIdx = new AtomicInteger();
-    ServerSocket serverSocket = null;
+    ServerSocket serverSocket;
-    } catch (IOException e) {
-      throw new GemFireConfigException("Unable to allocate a failure detection port in the membership-port range", e);
-    } catch (SystemConnectException e) {
+    } catch (IOException | SystemConnectException e) {
-    serverSocketExecutor.execute(new Runnable() {
-      @Override
-      public void run() {
-        logger.info("Started failure detection server thread on {}:{}.", ssocket.getInetAddress(), socketPort);
-        Socket socket = null;
-        try {
-          while (!services.getCancelCriterion().isCancelInProgress() 
-              && !GMSHealthMonitor.this.isStopping) {
-            try {
-              socket = ssocket.accept();
-              if (GMSHealthMonitor.this.playingDead) {
-                continue;
-              }
-              serverSocketExecutor.execute(new ClientSocketHandler(socket)); //start();  [bruce] I'm seeing a lot of failures due to this thread not being created fast enough, sometimes as long as 30 seconds
-            
-            } catch (RejectedExecutionException e) {
-              // this can happen during shutdown
+    serverSocketExecutor.execute(() -> {
+      logger.info("Started failure detection server thread on {}:{}.", ssocket.getInetAddress(), socketPort);
+      Socket socket = null;
+      try {
+        while (!services.getCancelCriterion().isCancelInProgress() 
+            && !GMSHealthMonitor.this.isStopping) {
+          try {
+            socket = ssocket.accept();
+            if (GMSHealthMonitor.this.playingDead) {
+              continue;
+            }
+            serverSocketExecutor.execute(new ClientSocketHandler(socket)); //start();  [bruce] I'm seeing a lot of failures due to this thread not being created fast enough, sometimes as long as 30 seconds
+          
+          } catch (RejectedExecutionException e) {
+            // this can happen during shutdown
-            } catch (IOException e) {
-              if (!isStopping) {
-                logger.trace("Unexpected exception", e);
+          } catch (IOException e) {
+            if (!isStopping) {
+              logger.trace("Unexpected exception", e);
+            }
+            try {
+              if (socket != null) {
+                socket.close();
-              try {
-                if (socket != null) {
-                  socket.close();
-                }
-              } catch (IOException ioe) {
-                logger.trace("Unexpected exception", ioe);
-              }
+            } catch (IOException ioe) {
+              logger.trace("Unexpected exception", ioe);
-          logger.info("GMSHealthMonitor server thread exiting");
-        } finally {
-          // close the server socket
-          if (ssocket != null && !ssocket.isClosed()) {
-            try {
-              ssocket.close();
-              serverSocket = null;
-              logger.info("GMSHealthMonitor server socket closed.");
-            } catch (IOException e) {
-              logger.debug("Unexpected exception", e);
-            }
+        }
+        logger.info("GMSHealthMonitor server thread exiting");
+      } finally {
+        // close the server socket
+        if (!ssocket.isClosed()) {
+          try {
+            ssocket.close();
+            serverSocket = null;
+            logger.info("GMSHealthMonitor server socket closed.");
+          } catch (IOException e) {
+            logger.debug("Unexpected exception", e);
-    Set<?> checkAllSuspected = new HashSet<>(allMembers);
+    Set<InternalDistributedMember> checkAllSuspected = new HashSet<>(allMembers);
-    for (Iterator<Response> it = val.iterator(); it.hasNext();) {
-      Response r = it.next();
+    for (Response r : val) {
-   * 
-   * @param incomingRequest
-      ArrayList<SuspectRequest> smbr = new ArrayList<SuspectRequest>();
+      ArrayList<SuspectRequest> smbr = new ArrayList<>();
-        Iterator<SuspectRequest> itr = viewVsMembers.iterator();
-        while (itr.hasNext()) {
-          SuspectRequest sr = itr.next();
+        for (final SuspectRequest sr : viewVsMembers) {
-   * @param sMembers
-   * @param cv
-    Set<SuspectRequest> viewVsMembers = null;
+    Set<SuspectRequest> viewVsMembers;
-        viewVsMembers = new HashSet<SuspectRequest>();
+        viewVsMembers = new HashSet<>();
-   *  
-   * @param initiator
-   * @param sMembers
-   * @param cv
-    for (int i = 0; i < sMembers.size(); i++) {
-      final SuspectRequest sr = sMembers.get(i);
+    for (final SuspectRequest sr : sMembers) {
-      checkExecutor.execute(new Runnable() {
-
-        @Override
-        public void run() {
-          try {
-            inlineCheckIfAvailable(initiator, cv, true, mbr,
-                reason);
-          } catch (DistributedSystemDisconnectedException e) {
-            return;
-          } catch (CancelException e) {
-            // shutting down
-          } catch (Exception e) {
-            logger.info("Unexpected exception while verifying member", e);
-          } finally {
-            GMSHealthMonitor.this.suspectedMemberInView.remove(mbr);
-          }
+      checkExecutor.execute(() -> {
+        try {
+          inlineCheckIfAvailable(initiator, cv, true, mbr, reason);
+        } catch (CancelException e) {
+          // shutting down
+        } catch (Exception e) {
+          logger.info("Unexpected exception while verifying member", e);
+        } finally {
+          GMSHealthMonitor.this.suspectedMemberInView.remove(mbr);
-
-
-      HashSet<InternalDistributedMember> filter = new HashSet<InternalDistributedMember>();
+      HashSet<InternalDistributedMember> filter = new HashSet<>();
-      for (int i = 0; i < requests.size(); i++) {
-        filter.add(requests.get(i).getSuspectMember());
-      }
+      filter.addAll(requests.stream().map(SuspectRequest::getSuspectMember).collect(Collectors.toList()));
-    Timer scheduler;
+    final Timer scheduler;
-    long timeout;
+    final long timeout;

MOV26 UPD40 INS79 MOV31 MOV31 INS42 INS4 INS83 INS83 INS83 INS83 UPD83 INS79 UPD83 UPD42 MOV44 INS8 MOV29 UPD83 UPD42 MOV44 INS8 INS45 INS45 INS83 INS42 INS45 MOV60 MOV21 INS21 INS21 INS70 INS70 INS83 INS83 INS32 INS32 UPD74 INS44 INS42 MOV8 INS44 INS42 MOV8 INS42 INS42 INS86 INS42 INS42 INS86 INS43 MOV43 INS42 INS83 MOV43 INS42 MOV21 MOV8 UPD74 INS86 INS84 MOV8 INS42 INS59 MOV8 MOV43 MOV43 INS70 INS86 UPD42 UPD45 INS42 UPD74 INS44 INS42 MOV8 MOV8 UPD74 UPD42 INS32 INS83 INS83 INS83 MOV43 INS42 INS32 INS42 INS90 INS42 INS42 MOV38 UPD74 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL33 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL78 DEL42 DEL33 DEL27 DEL27 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL76 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL65 DEL42 DEL65 DEL33 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24