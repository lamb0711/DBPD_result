GEODE-3276: Managing race conditions while the senders are stopped

	* When a connection is initialized, a readAckThread may be alive from a previous incarnation.
	* This AckThread will be stuck on a read socket with no timeout as nothing was dispatched.
	* Also while it was stuck on the read, it will hold a connection lifecycle read lock
	* The initialize connection needs a connection life cycle write lock to start the connection but the read lock is held by the ack thread.
	* This results in a deadlock and eventually a hang.
	* Another situation is that we set the flag isStopped for the event processor before actually shutting down the diapatcher and ack thread.
	* So after the flag is set and before actually shutting down the dispatcher and ackThread, a gateway proxy stomper thread gets in between these two steps of execution.
	* The stomper thread checks the isStopped flag, which was set to true, and proceeds to destroy the connection pool. However the dispatcher and ackThread were still running.
	* This results in a out of heap memory exception while the ack thread is reading from the socket while connection pool was destroyed.
	* To solve this issue, the stomper thread checks if the event processor and dispatcher exists, if true then we close the input streams before destroying the connection pool.

	This closes #732

+    if (ackReaderThread != null) {
+      ackReaderThread.shutDownAckReaderConnection();
+    }
+  public void shutDownAckReaderConnection() {
+    if (ackReaderThread != null) {
+      ackReaderThread.shutDownAckReaderConnection();
+    }
+  }
+

INS31 INS83 INS39 INS42 INS8 INS25 INS25 INS27 INS8 INS27 INS8 INS42 INS33 INS21 INS42 INS33 INS21 INS32 INS32 INS42 INS42 INS42 INS42