GEODE-6677: Eliminate Infinite Function Retry (#3690)

* Fix for retry with onRegion
* Fix retry with onRegion singlehop
* Fix for onServer
* DUnitTest for onRegion (singleHop, multihop), onServer
* Unit test for onRegion (singleHop, multihop), onServer

+import org.apache.geode.cache.client.NoAvailableServersException;
+import org.apache.geode.cache.client.PoolFactory;
+
-
-    int retryAttempts = 0;
-    int maxRetryAttempts = 0;
-    if (function.isHA()) {
-      maxRetryAttempts = mRetryAttempts;
+
+    int maxRetryAttempts = mRetryAttempts;
+    if (!function.isHA()) {
+      maxRetryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        retryAttempts++;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
+
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
-        if (se instanceof ServerOperationException) {
+
+        if ((maxRetryAttempts--) < 1) {
-        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !function.isHA() */)
-          throw se;
-          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1);
+          resultCollector, hasResult, failedNodes, maxRetryAttempts);
+
-
-    int retryAttempts = 0;
-    int maxRetryAttempts = 0;
-    if (isHA) {
-      maxRetryAttempts = mRetryAttempts;
+
+    int maxRetryAttempts = mRetryAttempts;
+    if (!isHA) {
+      maxRetryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
+
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
-        }
-        if (se instanceof ServerOperationException) {
-          throw se;
-        }
-        retryAttempts++;
-        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !isHA */)
-          throw se;
-        reexecute = true;
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
+        }
+
+        if ((maxRetryAttempts--) < 1) {
+          throw se;
+        }
+
+        reexecuteForServ = true;
-          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1, isHA, optimizeForWrite);
+          resultCollector, hasResult, failedNodes, maxRetryAttempts, isHA, optimizeForWrite);
-      byte hasResult, Set<String> failedNodes, int maxRetryAttempts) {
+      byte hasResult, Set<String> failedNodes, int retryAttempts) {
+
-
-    int retryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
+    int maxRetryAttempts = retryAttempts;
+
-      reexecute = false;
-      if (isDebugEnabled) {
-        logger.debug(
-            "ExecuteRegionFunction#reexecute: Sending Function Execution Message: {} to Server using pool: {} with failed nodes: {}",
-            reExecuteOp.getMessage(), pool, failedNodes);
-      }
+
+        reexecute = false;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
-        reexecute = true;
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger
-              .debug("ExecuteRegionFunctionOp#reexecute : Received ServerConnectivity Exception.");
+
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
-        if (se instanceof ServerOperationException) {
+        if ((maxRetryAttempts--) < 1) {
-        retryAttempts++;
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
-          throw se;
-        reexecute = true;
-      byte hasResult, Set<String> failedNodes, int maxRetryAttempts, boolean isHA,
+      byte hasResult, Set<String> failedNodes, int retryAttempts, boolean isHA,
+
-
-    int retryAttempts = 0;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    do {
-      reexecute = false;
+    int maxRetryAttempts = retryAttempts;
+    do {
-      if (isDebugEnabled) {
-        logger.debug(
-            "ExecuteRegionFunction#reexecute : Sending Function Execution Message: {} to Server using pool: {}",
-            reExecuteOp.getMessage(), pool);
-      }
+
+        reexecute = false;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
-              e.getFailedNodeSet());
-        }
-        reexecute = true;
+      } catch (ServerOperationException | NoAvailableServersException failedException) {
+        throw failedException;
-        if (isDebugEnabled) {
-          logger.debug(
-              "ExecuteRegionFunctionOp#reexecute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
-              se, retryAttempts, maxRetryAttempts);
-        }
-        if (se instanceof ServerOperationException) {
-          throw se;
-        }
-        retryAttempts++;
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
-          throw se;
-        reexecute = true;
+        if (maxRetryAttempts == PoolFactory.DEFAULT_RETRY_ATTEMPTS) {
+          // If the retryAttempt is set to default(-1). Try it on all servers once.
+          // Calculating number of servers when function is re-executed as it involves
+          // messaging locator.
+          maxRetryAttempts = ((PoolImpl) pool).getConnectionSource().getAllServers().size() - 1;
+        }
+
+        if ((maxRetryAttempts--) < 1) {
+          throw se;
+        }
+

INS26 INS26 INS40 INS40 UPD42 UPD42 INS38 INS38 INS42 MOV32 INS42 INS42 INS42 INS42 INS12 INS12 INS12 INS12 INS34 INS44 INS8 INS42 INS34 INS44 INS8 INS42 MOV21 INS44 INS8 MOV21 INS44 INS8 MOV21 INS84 INS42 INS53 MOV21 MOV21 INS84 INS42 INS53 MOV21 MOV21 MOV21 INS84 INS42 INS53 MOV21 MOV21 MOV21 MOV21 INS84 INS42 INS53 MOV21 MOV21 MOV32 MOV43 INS43 INS42 INS27 INS27 MOV8 MOV43 INS43 INS42 INS27 INS27 MOV8 MOV43 INS43 INS42 INS27 INS27 MOV8 MOV43 INS43 INS42 INS27 INS27 MOV8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 INS36 INS34 UPD42 MOV42 INS42 INS42 INS40 INS36 INS34 UPD42 MOV42 MOV42 INS42 INS42 INS40 INS36 INS34 INS42 INS42 INS40 INS36 INS34 INS7 INS37 INS7 INS37 INS7 INS37 INS7 INS37 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS34 INS32 INS34 INS32 INS34 INS32 INS34 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS36 UPD42 MOV42 INS36 UPD42 MOV42 INS36 INS42 INS36 UPD42 MOV42 INS11 INS11 INS11 INS11 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL34 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL32 DEL42 DEL37 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL62 DEL25 DEL42 DEL42 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL36 DEL42 DEL53 DEL42 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL60 DEL34 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL62 DEL25 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL36 DEL42 DEL53 DEL42 DEL34 DEL27 DEL34 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL42 DEL8 DEL25 DEL42 DEL9 DEL7 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL62 DEL25 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL53 DEL42 DEL9 DEL7 DEL21 DEL34 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL62 DEL25 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL53 DEL42 DEL9 DEL7 DEL21