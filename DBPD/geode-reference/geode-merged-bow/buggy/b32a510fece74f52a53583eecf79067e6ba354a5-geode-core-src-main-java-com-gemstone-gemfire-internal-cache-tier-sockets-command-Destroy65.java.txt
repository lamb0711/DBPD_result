Destory and Invalidate

- * 
+ *
+
-import com.gemstone.gemfire.i18n.LogWriterI18n;
-import com.gemstone.gemfire.internal.cache.Token;
-import com.gemstone.gemfire.internal.cache.OpType;
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
-import com.gemstone.gemfire.internal.cache.EventID;
-import com.gemstone.gemfire.internal.cache.EventIDHolder;
-import com.gemstone.gemfire.internal.cache.LocalRegion;
-import com.gemstone.gemfire.internal.cache.PartitionedRegion;
-import com.gemstone.gemfire.internal.cache.tier.CachedRegionHelper;
-import com.gemstone.gemfire.internal.cache.tier.Command;
-import com.gemstone.gemfire.internal.cache.tier.MessageType;
-import com.gemstone.gemfire.internal.cache.tier.sockets.*;
-import com.gemstone.gemfire.internal.cache.versions.VersionTag;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-import com.gemstone.gemfire.internal.logging.log4j.LocalizedMessage;
-import com.gemstone.gemfire.internal.security.AuthorizeRequest;
-import com.gemstone.gemfire.internal.util.Breadcrumbs;
-import com.gemstone.gemfire.security.GemFireSecurityException;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
-import com.gemstone.gemfire.cache.client.internal.DestroyOp;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
+import com.gemstone.gemfire.internal.cache.EventID;
+import com.gemstone.gemfire.internal.cache.EventIDHolder;
+import com.gemstone.gemfire.internal.cache.LocalRegion;
+import com.gemstone.gemfire.internal.cache.OpType;
+import com.gemstone.gemfire.internal.cache.PartitionedRegion;
+import com.gemstone.gemfire.internal.cache.Token;
+import com.gemstone.gemfire.internal.cache.tier.CachedRegionHelper;
+import com.gemstone.gemfire.internal.cache.tier.Command;
+import com.gemstone.gemfire.internal.cache.tier.MessageType;
+import com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand;
+import com.gemstone.gemfire.internal.cache.tier.sockets.CacheServerStats;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Message;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Part;
+import com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection;
+import com.gemstone.gemfire.internal.cache.versions.VersionTag;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.logging.log4j.LocalizedMessage;
+import com.gemstone.gemfire.internal.security.AuthorizeRequest;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import com.gemstone.gemfire.internal.util.Breadcrumbs;
+import com.gemstone.gemfire.security.GemFireSecurityException;
+  protected Destroy65() {
+  }
+
-  protected Destroy65() {
-  }
-
-      ServerConnection servConn, PartitionedRegion pr, byte nwHop) throws IOException {
+                                               ServerConnection servConn,
+                                               PartitionedRegion pr,
+                                               byte nwHop) throws IOException {
-  
+
-      ServerConnection servConn, PartitionedRegion pr,
-      boolean entryNotFoundForRemove, byte nwHop, VersionTag tag) throws IOException {
+                                               ServerConnection servConn,
+                                               PartitionedRegion pr,
+                                               boolean entryNotFoundForRemove,
+                                               byte nwHop,
+                                               VersionTag tag) throws IOException {
-    replyMsg.addBytesPart(new byte[]{pr.getMetadataVersion().byteValue(), nwHop});
+    replyMsg.addBytesPart(new byte[] { pr.getMetadataVersion(), nwHop });
-    replyMsg.addIntPart(entryNotFoundForRemove? 1 : 0);
+    replyMsg.addIntPart(entryNotFoundForRemove ? 1 : 0);
-  protected void writeReply(Message origMsg, ServerConnection servConn,
-      boolean entryNotFound, VersionTag tag)
-  throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn, boolean entryNotFound, VersionTag tag)
+    throws IOException {
-    replyMsg.addIntPart(entryNotFound? 1 : 0);
+    replyMsg.addIntPart(entryNotFound ? 1 : 0);
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
-    long now =  DistributionStats.getStatTime();
+    long now = DistributionStats.getStatTime();
-    
+
-    	
-        operation = msg.getPart(3).getObject();                
-        
-        if (( (operation instanceof Operation) && ((Operation)operation == Operation.REMOVE ))
-        		|| ((operation instanceof Byte) && (Byte)operation == OpType.DESTROY ))
-        		
-        {        	
-          expectedOldValue = expectedOldValuePart.getObject();
-        }
+
+      operation = msg.getPart(3).getObject();
+
+      if (((operation instanceof Operation) && ((Operation) operation == Operation.REMOVE)) || ((operation instanceof Byte) && (Byte) operation == OpType.DESTROY))
+
+      {
+        expectedOldValue = expectedOldValuePart.getObject();
+      }
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug("{}: Received destroy65 request ({} bytes; op={}) from {} for region {} key {}{} txId {}", servConn.getName(), msg.getPayloadLength(), operation, servConn.getSocketString(), regionName, key, (operation == Operation.REMOVE? " value=" + expectedOldValue : ""), msg.getTransactionId());
+      logger.debug("{}: Received destroy65 request ({} bytes; op={}) from {} for region {} key {}{} txId {}", servConn.getName(), msg
+        .getPayloadLength(), operation, servConn.getSocketString(), regionName, key, (operation == Operation.REMOVE ? " value=" + expectedOldValue : ""), msg
+        .getTransactionId());
-        logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_THE_INPUT_KEY_FOR_THE_DESTROY_REQUEST_IS_NULL, servConn.getName()));
+        logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_THE_INPUT_KEY_FOR_THE_DESTROY_REQUEST_IS_NULL, servConn
+          .getName()));
-        logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REQUEST_IS_NULL, servConn.getName()));
-        errMessage
-            .append(LocalizedStrings.Destroy__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REQUEST_IS_NULL.toLocalizedString());
+        logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REQUEST_IS_NULL, servConn
+          .getName()));
+        errMessage.append(LocalizedStrings.Destroy__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REQUEST_IS_NULL.toLocalizedString());
-      writeErrorResponse(msg, MessageType.DESTROY_DATA_ERROR, errMessage
-          .toString(), servConn);
+      writeErrorResponse(msg, MessageType.DESTROY_DATA_ERROR, errMessage.toString(), servConn);
-    }
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
+    } else {
+      LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
-      }
-      else {
+      } else {
-        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-            .getSerializedForm());
-        long threadId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        long sequenceId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        EventID eventId = new EventID(servConn.getEventMemberIDByteArray(),
-            threadId, sequenceId);
+        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+        long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+        long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+        EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
-        
+
-//          if (logger.isDebugEnabled()) {
-//            logger.debug("DEBUG: encountered isRetry in Destroy65");
-//          }
+          //          if (logger.isDebugEnabled()) {
+          //            logger.debug("DEBUG: encountered isRetry in Destroy65");
+          //          }
-        
+
+        // for integrated security
+        GeodeSecurityUtil.authorizeRegionWrite(regionName, key.toString());
+
-              RegionDestroyOperationContext destroyContext = authzRequest
-                  .destroyRegionAuthorize((String)key, callbackArg);
+              RegionDestroyOperationContext destroyContext = authzRequest.destroyRegionAuthorize((String) key, callbackArg);
-            }
-            else {
-              DestroyOperationContext destroyContext = authzRequest
-                  .destroyAuthorize(regionName, key, callbackArg);
+            } else {
+              DestroyOperationContext destroyContext = authzRequest.destroyAuthorize(regionName, key, callbackArg);
-          if (operation == null  ||  operation == Operation.DESTROY) {        	  
-            region.basicBridgeDestroy(key, callbackArg, servConn.getProxyID(),
-                true, clientEvent);
+          if (operation == null || operation == Operation.DESTROY) {
+            region.basicBridgeDestroy(key, callbackArg, servConn.getProxyID(), true, clientEvent);
-              if (expectedOldValue == null && operation != null) {
-            	  expectedOldValue = Token.INVALID;
+              if (expectedOldValue == null) {
+                expectedOldValue = Token.INVALID;
-              if (operation == Operation.REMOVE  &&  msg.isRetry()  &&  clientEvent.getVersionTag() != null) {
+              if (operation == Operation.REMOVE && msg.isRetry() && clientEvent.getVersionTag() != null) {
-                  region.basicBridgeRemove(key, expectedOldValue, 
-                      callbackArg, servConn.getProxyID(), true, clientEvent);
+                  region.basicBridgeRemove(key, expectedOldValue, callbackArg, servConn.getProxyID(), true, clientEvent);
-                region.basicBridgeRemove(key, expectedOldValue, 
-                    callbackArg, servConn.getProxyID(), true, clientEvent);
+                region.basicBridgeRemove(key, expectedOldValue, callbackArg, servConn.getProxyID(), true, clientEvent);
-        }
-        catch (EntryNotFoundException e) {
+        } catch (EntryNotFoundException e) {
-          logger.info(LocalizedMessage.create(LocalizedStrings.Destroy_0_DURING_ENTRY_DESTROY_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] {servConn.getName(), key})); 
+          logger.info(LocalizedMessage.create(LocalizedStrings.Destroy_0_DURING_ENTRY_DESTROY_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] {
+            servConn.getName(),
+            key
+          }));
-        }
-        catch (RegionDestroyedException rde) {
+        } catch (RegionDestroyedException rde) {
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
-            if (logger.isDebugEnabled())
+            if (logger.isDebugEnabled()) {
-          }
-          else {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_UNEXPECTED_EXCEPTION, servConn.getName()), e); 
+            }
+          } else {
+            logger.warn(LocalizedMessage.create(LocalizedStrings.Destroy_0_UNEXPECTED_EXCEPTION, servConn.getName()), e);
-        
+
-          PartitionedRegion pr = (PartitionedRegion)region;
-          if (pr.isNetworkHop() != (byte)0) {
+          PartitionedRegion pr = (PartitionedRegion) region;
+          if (pr.isNetworkHop() != (byte) 0) {
-            pr.setIsNetworkHop((byte)0);
-            pr.setMetadataVersion(Byte.valueOf((byte)0));
-          }
-          else {
+            pr.setIsNetworkHop((byte) 0);
+            pr.setMetadataVersion((byte) 0);
+          } else {
-        }
-        else {
+        } else {
-        stats.incWriteDestroyResponseTime(DistributionStats.getStatTime()
-            - start);
+        stats.incWriteDestroyResponseTime(DistributionStats.getStatTime() - start);
-    
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 MOV31 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 MOV32 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS8 UPD42 UPD42 MOV27 MOV21 DEL42 DEL32 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32