GEODE-6369 Cache-creation failure after a successful auto-reconnect causes subsequent NPE

If an error occurs while rebuilding the cache on auto-reconnect & we can't
continue we should throw an exception to any thread waiting for the
reconnect to complete.

If we're unable to contact the cluster configuration service we do not
terminate auto-reconnect attempts.

New members are now only allowed to join after view preparation has
completed.  This will reduce the number of "surprise members" and also
ensures that any old member IDs have been removed from the view.

We now only attempt to use findCoordinatorFromView multiple times if the
view actually changes.  Instead we contact locators again to see if
there are new registrants.

fixing the above exposed other problems in auto-reconnect:

* messages were being thrown away by the location service quorum checker
during auto-reconnect.  some of these were "join" messages that needed
to be delivered to the new membership service

* registrants weren't being removed from the recovered membership view
in the locator.  This confused restarting nodes because the recovered
membership view has stale info in it that they don't want to use

* locator services restart were hanging due to profile interchange being
done under synchronization

+import java.util.Queue;
+import org.apache.geode.distributed.internal.membership.gms.interfaces.HealthMonitor;
+  /**
+   * During reconnect a QuorumChecker holds the JGroups channel and responds to Ping
+   * and Pong messages but also queues any messages it doesn't recognize. These need
+   * to be delivered to handlers after membership services have been rebuilt.
+   */
+  private Queue<Message> queuedMessagesFromReconnect;
+
+  /**
+   * The JGroupsReceiver is handed messages by the JGroups Channel. It is responsible
+   * for deserializating and dispatching those messages to the appropriate handler
+   */
+  private JGroupsReceiver jgroupsReceiver;
+
+        queuedMessagesFromReconnect = oldInfo.getQueuedMessages();
-      myChannel.setReceiver(new JGroupsReceiver());
+      jgroupsReceiver = new JGroupsReceiver();
+      myChannel.setReceiver(jgroupsReceiver);
-  public void started() {}
+  public void started() {
+    if (queuedMessagesFromReconnect != null) {
+      logger.info("Delivering {} messages queued by quorum checker",
+          queuedMessagesFromReconnect.size());
+      for (Message message : queuedMessagesFromReconnect) {
+        jgroupsReceiver.receive(message, true);
+      }
+      queuedMessagesFromReconnect.clear();
+      queuedMessagesFromReconnect = null;
+    }
+  }
+
+    services.setLocalAddress(localAddress);
+      receive(jgmsg, false);
+    }
+
+    private void receive(Message jgmsg, boolean fromQuorumChecker) {
-          getMessageHandler(msg).processMessage(msg);
+          MessageHandler handler = getMessageHandler(msg);
+          if (fromQuorumChecker && handler instanceof HealthMonitor) {
+            // ignore suspect / heartbeat messages that happened during
+            // auto-reconnect because they very likely have old member IDs in them
+          } else {
+            handler.processMessage(msg);
+          }

INS26 INS26 INS40 INS40 INS23 INS23 INS29 INS83 INS74 INS59 INS29 INS83 INS43 INS59 INS8 INS31 INS65 INS43 INS43 INS42 INS65 INS42 INS42 INS25 INS21 MOV78 INS83 INS39 INS42 INS44 INS8 UPD83 INS44 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS27 INS8 INS32 INS43 INS42 INS21 INS39 INS42 INS21 INS42 INS33 INS21 INS70 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS32 INS44 INS42 INS8 INS32 INS7 INS42 INS42 INS9 INS21 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS33 INS7 INS42 INS42 INS42 INS32 INS60 INS25 INS42 INS32 INS42 INS42 INS42 INS9 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 MOV32 INS42 INS62 MOV21 INS42 INS43 INS42 INS42 DEL42 DEL42 DEL32 DEL8