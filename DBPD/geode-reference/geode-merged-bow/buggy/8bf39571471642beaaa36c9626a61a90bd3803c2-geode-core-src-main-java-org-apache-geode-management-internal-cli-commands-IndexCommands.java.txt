Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The IndexCommands class encapsulates all GemFire shell (Gfsh) commands related to indexes defined in GemFire.
+ * The IndexCommands class encapsulates all GemFire shell (Gfsh) commands related to indexes defined
+ * in GemFire.
+ * 
-  
+
-  private static final CreateDefinedIndexesFunction createDefinedIndexesFunction = new CreateDefinedIndexesFunction();
-  private static final Set<IndexInfo> indexDefinitions = Collections.synchronizedSet(new HashSet<IndexInfo>());
+  private static final CreateDefinedIndexesFunction createDefinedIndexesFunction =
+      new CreateDefinedIndexesFunction();
+  private static final Set<IndexInfo> indexDefinitions =
+      Collections.synchronizedSet(new HashSet<IndexInfo>());
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  public Result listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS,
-                                     mandatory = false,
-                                     specifiedDefaultValue = "true",
-                                     unspecifiedDefaultValue = "false",
-                                     help = CliStrings.LIST_INDEX__STATS__HELP)
-                            final boolean showStats) {
+  public Result listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS, mandatory = false,
+      specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
+      help = CliStrings.LIST_INDEX__STATS__HELP) final boolean showStats) {
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        CliStrings.LIST_INDEX));
-    }
-    catch (VirtualMachineError e) {
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_INDEX));
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.LIST_INDEX__ERROR_MESSAGE,
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(
+          String.format(CliStrings.LIST_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    final ResultCollector<?, ?> resultsCollector = functionExecutor.execute(new ListIndexFunction());
+    final ResultCollector<?, ?> resultsCollector =
+        functionExecutor.execute(new ListIndexFunction());
-  protected Result toTabularResult(final List<IndexDetails> indexDetailsList, final boolean showStats) {
+  protected Result toTabularResult(final List<IndexDetails> indexDetailsList,
+      final boolean showStats) {
-          final IndexStatisticsDetailsAdapter adapter = new IndexStatisticsDetailsAdapter(
-            indexDetails.getIndexStatisticsDetails());
+          final IndexStatisticsDetailsAdapter adapter =
+              new IndexStatisticsDetailsAdapter(indexDetails.getIndexStatisticsDetails());
-    }
-    else {
+    } else {
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA }, writesToSharedConfiguration=true)
-  //TODO : Add optionContext for indexName
-  public Result createIndex(
-      @CliOption (key = CliStrings.CREATE_INDEX__NAME,
-      mandatory=true,
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA},
+      writesToSharedConfiguration = true)
+  // TODO : Add optionContext for indexName
+  public Result createIndex(@CliOption(key = CliStrings.CREATE_INDEX__NAME, mandatory = true,
-      @CliOption (key = CliStrings.CREATE_INDEX__EXPRESSION,
-      mandatory = true,
-      help = CliStrings.CREATE_INDEX__EXPRESSION__HELP) final String indexedExpression,
+      @CliOption(key = CliStrings.CREATE_INDEX__EXPRESSION, mandatory = true,
+          help = CliStrings.CREATE_INDEX__EXPRESSION__HELP) final String indexedExpression,
-      @CliOption(key = CliStrings.CREATE_INDEX__REGION,
-      mandatory = true,
-      optionContext = ConverterHint.REGIONPATH,
-      help = CliStrings.CREATE_INDEX__REGION__HELP) String regionPath,
+      @CliOption(key = CliStrings.CREATE_INDEX__REGION, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.CREATE_INDEX__REGION__HELP) String regionPath,
-      @CliOption(key = CliStrings.CREATE_INDEX__MEMBER,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.CREATE_INDEX__MEMBER__HELP) final String memberNameOrID,
+      @CliOption(key = CliStrings.CREATE_INDEX__MEMBER, mandatory = false,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.CREATE_INDEX__MEMBER__HELP) final String memberNameOrID,
-      @CliOption(key = CliStrings.CREATE_INDEX__TYPE,
-      mandatory = false,
-      unspecifiedDefaultValue = "range",
-      optionContext = ConverterHint.INDEX_TYPE,
-      help = CliStrings.CREATE_INDEX__TYPE__HELP) final String indexType,
+      @CliOption(key = CliStrings.CREATE_INDEX__TYPE, mandatory = false,
+          unspecifiedDefaultValue = "range", optionContext = ConverterHint.INDEX_TYPE,
+          help = CliStrings.CREATE_INDEX__TYPE__HELP) final String indexType,
-      @CliOption (key = CliStrings.CREATE_INDEX__GROUP,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERGROUP, 
-      help = CliStrings.CREATE_INDEX__GROUP__HELP) final String group) {
+      @CliOption(key = CliStrings.CREATE_INDEX__GROUP, mandatory = false,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.CREATE_INDEX__GROUP__HELP) final String group) {
-      //Index type check
-        if ("range".equalsIgnoreCase(indexType)) {
-          idxType = IndexInfo.RANGE_INDEX;
-        } else if ("hash".equalsIgnoreCase(indexType)) {
-          idxType = IndexInfo.HASH_INDEX;
-        } else if ("key".equalsIgnoreCase(indexType)) {
-          idxType = IndexInfo.KEY_INDEX;
-        } else {
-          return ResultBuilder.createUserErrorResult(CliStrings.CREATE_INDEX__INVALID__INDEX__TYPE__MESSAGE);
-        }
+      // Index type check
+      if ("range".equalsIgnoreCase(indexType)) {
+        idxType = IndexInfo.RANGE_INDEX;
+      } else if ("hash".equalsIgnoreCase(indexType)) {
+        idxType = IndexInfo.HASH_INDEX;
+      } else if ("key".equalsIgnoreCase(indexType)) {
+        idxType = IndexInfo.KEY_INDEX;
+      } else {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.CREATE_INDEX__INVALID__INDEX__TYPE__MESSAGE);
+      }
-      
+
-        regionPath = Region.SEPARATOR +regionPath;
+        regionPath = Region.SEPARATOR + regionPath;
-      
+
-      final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(group, memberNameOrID);
-      final ResultCollector<?,?> rc = CliUtil.executeFunction(createIndexFunction, indexInfo, targetMembers);
+      final Set<DistributedMember> targetMembers =
+          CliUtil.findAllMatchingMembers(group, memberNameOrID);
+      final ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(createIndexFunction, indexInfo, targetMembers);
-            
+
-            final String exceptionMessage  = cliFunctionResult.getMessage();
+            final String exceptionMessage = cliFunctionResult.getMessage();
-        infoResult.addLine(CliStrings.format(CliStrings.CREATE_INDEX__EXPRESSION__MSG, indexedExpression));
+        infoResult.addLine(
+            CliStrings.format(CliStrings.CREATE_INDEX__EXPRESSION__MSG, indexedExpression));
-          infoResult.addLine(CliStrings.format(CliStrings.CREATE_INDEX__NUMBER__AND__MEMBER, num, memberId));
+          infoResult.addLine(
+              CliStrings.format(CliStrings.CREATE_INDEX__NUMBER__AND__MEMBER, num, memberId));
-        //Group members by the exception thrown.
+        // Group members by the exception thrown.
-            erd.addLine(CliStrings.format(CliStrings.CREATE_INDEX__NUMBER__AND__MEMBER, num, memberId));
+            erd.addLine(
+                CliStrings.format(CliStrings.CREATE_INDEX__NUMBER__AND__MEMBER, num, memberId));
-    
+
-      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, group !=null ? group.split(",") : null));
+      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,
+          group != null ? group.split(",") : null));
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA }, writesToSharedConfiguration=true)
-  public Result destroyIndex(
-      @CliOption(
-      key = CliStrings.DESTROY_INDEX__NAME,
-      mandatory = false,
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA},
+      writesToSharedConfiguration = true)
+  public Result destroyIndex(@CliOption(key = CliStrings.DESTROY_INDEX__NAME, mandatory = false,
-      @CliOption(key = CliStrings.DESTROY_INDEX__REGION,
-      mandatory = false,
-      optionContext = ConverterHint.REGIONPATH,
-      help = CliStrings.DESTROY_INDEX__REGION__HELP) final String regionPath,
+      @CliOption(key = CliStrings.DESTROY_INDEX__REGION, mandatory = false,
+          optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.DESTROY_INDEX__REGION__HELP) final String regionPath,
-      @CliOption(key = CliStrings.DESTROY_INDEX__MEMBER,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.DESTROY_INDEX__MEMBER__HELP) final String memberNameOrID,
+      @CliOption(key = CliStrings.DESTROY_INDEX__MEMBER, mandatory = false,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.DESTROY_INDEX__MEMBER__HELP) final String memberNameOrID,
-      @CliOption (key = CliStrings.DESTROY_INDEX__GROUP,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.DESTROY_INDEX__GROUP__HELP) final String group) {
+      @CliOption(key = CliStrings.DESTROY_INDEX__GROUP, mandatory = false,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.DESTROY_INDEX__GROUP__HELP) final String group) {
-    if (StringUtils.isBlank(indexName)
-        && StringUtils.isBlank(regionPath)
-        && StringUtils.isBlank(memberNameOrID)
-        && StringUtils.isBlank(group)) {
-      return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.PROVIDE_ATLEAST_ONE_OPTION, CliStrings.DESTROY_INDEX));
+    if (StringUtils.isBlank(indexName) && StringUtils.isBlank(regionPath)
+        && StringUtils.isBlank(memberNameOrID) && StringUtils.isBlank(group)) {
+      return ResultBuilder.createUserErrorResult(
+          CliStrings.format(CliStrings.PROVIDE_ATLEAST_ONE_OPTION, CliStrings.DESTROY_INDEX));
-    // If a regionName is specified, then authorize data manage on the regionName, otherwise, it requires data manage permission on all regions
+    // If a regionName is specified, then authorize data manage on the regionName, otherwise, it
+    // requires data manage permission on all regions
-    }
-    else{
+    } else {
-    }
-    catch (CommandResultException e) {
+    } catch (CommandResultException e) {
-    for (Object funcResult : funcResults){
-      if(!(funcResult instanceof CliFunctionResult)){
+    for (Object funcResult : funcResults) {
+      if (!(funcResult instanceof CliFunctionResult)) {
-        String exceptionMessage  = cliFunctionResult.getMessage();
+        String exceptionMessage = cliFunctionResult.getMessage();
-          infoResult.addLine(CliStrings.format(CliStrings.DESTROY_INDEX__ON__REGION__SUCCESS__MSG, indexName, regionPath));
+          infoResult.addLine(CliStrings.format(CliStrings.DESTROY_INDEX__ON__REGION__SUCCESS__MSG,
+              indexName, regionPath));
-         if (!StringUtils.isBlank(regionPath)) {
-           infoResult.addLine(CliStrings.format(CliStrings.DESTROY_INDEX__ON__REGION__ONLY__SUCCESS__MSG, regionPath));
-         } else {
-           infoResult.addLine(CliStrings.DESTROY_INDEX__ON__MEMBERS__ONLY__SUCCESS__MSG);
-         }
+        if (!StringUtils.isBlank(regionPath)) {
+          infoResult.addLine(CliStrings
+              .format(CliStrings.DESTROY_INDEX__ON__REGION__ONLY__SUCCESS__MSG, regionPath));
+        } else {
+          infoResult.addLine(CliStrings.DESTROY_INDEX__ON__MEMBERS__ONLY__SUCCESS__MSG);
+        }
-        infoResult.addLine(CliStrings.format(CliStrings.format(CliStrings.DESTROY_INDEX__NUMBER__AND__MEMBER, ++num, memberId)));;
+        infoResult.addLine(CliStrings.format(
+            CliStrings.format(CliStrings.DESTROY_INDEX__NUMBER__AND__MEMBER, ++num, memberId)));;
-          erd.addLine(CliStrings.format(CliStrings.format(CliStrings.DESTROY_INDEX__NUMBER__AND__MEMBER, ++num, memberId)));
+          erd.addLine(CliStrings.format(
+              CliStrings.format(CliStrings.DESTROY_INDEX__NUMBER__AND__MEMBER, ++num, memberId)));
-    
+
-      result.setCommandPersisted((new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity, group !=null ? group.split(",") : null));
+      result.setCommandPersisted((new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity,
+          group != null ? group.split(",") : null));
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA }, writesToSharedConfiguration=true)
-  //TODO : Add optionContext for indexName
-  public Result defineIndex(
-      @CliOption (key = CliStrings.DEFINE_INDEX_NAME,
-      mandatory=true,
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA},
+      writesToSharedConfiguration = true)
+  // TODO : Add optionContext for indexName
+  public Result defineIndex(@CliOption(key = CliStrings.DEFINE_INDEX_NAME, mandatory = true,
-      @CliOption (key = CliStrings.DEFINE_INDEX__EXPRESSION,
-      mandatory = true,
-      help = CliStrings.DEFINE_INDEX__EXPRESSION__HELP) final String indexedExpression,
+      @CliOption(key = CliStrings.DEFINE_INDEX__EXPRESSION, mandatory = true,
+          help = CliStrings.DEFINE_INDEX__EXPRESSION__HELP) final String indexedExpression,
-      @CliOption(key = CliStrings.DEFINE_INDEX__REGION,
-      mandatory = true,
-      optionContext = ConverterHint.REGIONPATH,
-      help = CliStrings.DEFINE_INDEX__REGION__HELP) String regionPath,
+      @CliOption(key = CliStrings.DEFINE_INDEX__REGION, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.DEFINE_INDEX__REGION__HELP) String regionPath,
-      @CliOption(key = CliStrings.DEFINE_INDEX__TYPE,
-      mandatory = false,
-      unspecifiedDefaultValue = "range",
-      optionContext = ConverterHint.INDEX_TYPE,
-      help = CliStrings.DEFINE_INDEX__TYPE__HELP) final String indexType) {
+      @CliOption(key = CliStrings.DEFINE_INDEX__TYPE, mandatory = false,
+          unspecifiedDefaultValue = "range", optionContext = ConverterHint.INDEX_TYPE,
+          help = CliStrings.DEFINE_INDEX__TYPE__HELP) final String indexType) {
-    
+
-    //Index type check
+    // Index type check
-      return ResultBuilder.createUserErrorResult(CliStrings.DEFINE_INDEX__INVALID__INDEX__TYPE__MESSAGE);
+      return ResultBuilder
+          .createUserErrorResult(CliStrings.DEFINE_INDEX__INVALID__INDEX__TYPE__MESSAGE);
-      
+
-      regionPath = Region.SEPARATOR +regionPath;
+      regionPath = Region.SEPARATOR + regionPath;
-      
+
-    infoResult.addLine(CliStrings.format(CliStrings.DEFINE_INDEX__EXPRESSION__MSG, indexedExpression));
+    infoResult
+        .addLine(CliStrings.format(CliStrings.DEFINE_INDEX__EXPRESSION__MSG, indexedExpression));
-  
+
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA}, writesToSharedConfiguration=true)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA},
+      writesToSharedConfiguration = true)
-  //TODO : Add optionContext for indexName
+  // TODO : Add optionContext for indexName
-      @CliOption(key = CliStrings.CREATE_DEFINED_INDEXES__MEMBER,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.CREATE_DEFINED_INDEXES__MEMBER__HELP) final String memberNameOrID,
+      @CliOption(key = CliStrings.CREATE_DEFINED_INDEXES__MEMBER, mandatory = false,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.CREATE_DEFINED_INDEXES__MEMBER__HELP) final String memberNameOrID,
-      @CliOption (key = CliStrings.CREATE_DEFINED_INDEXES__GROUP,
-      mandatory = false,
-      optionContext = ConverterHint.MEMBERGROUP, 
-      help = CliStrings.CREATE_DEFINED_INDEXES__GROUP__HELP) final String group) {
+      @CliOption(key = CliStrings.CREATE_DEFINED_INDEXES__GROUP, mandatory = false,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.CREATE_DEFINED_INDEXES__GROUP__HELP) final String group) {
-    
-    if(indexDefinitions.isEmpty()) {
+
+    if (indexDefinitions.isEmpty()) {
-    
+
-      final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(group, memberNameOrID);
-      final ResultCollector<?,?> rc = CliUtil.executeFunction(createDefinedIndexesFunction, indexDefinitions, targetMembers);
+      final Set<DistributedMember> targetMembers =
+          CliUtil.findAllMatchingMembers(group, memberNameOrID);
+      final ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(createDefinedIndexesFunction, indexDefinitions, targetMembers);
-            
+
-            final String exceptionMessage  = cliFunctionResult.getMessage();
+            final String exceptionMessage = cliFunctionResult.getMessage();
-          infoResult.addLine(CliStrings.format(CliStrings.CREATE_DEFINED_INDEXES__NUMBER__AND__MEMBER, num, memberId));
+          infoResult.addLine(CliStrings
+              .format(CliStrings.CREATE_DEFINED_INDEXES__NUMBER__AND__MEMBER, num, memberId));
-        //Group members by the exception thrown.
+        // Group members by the exception thrown.
-            erd.addLine(CliStrings.format(CliStrings.CREATE_DEFINED_INDEXES__NUMBER__AND__MEMBER, num, memberId));
+            erd.addLine(CliStrings.format(CliStrings.CREATE_DEFINED_INDEXES__NUMBER__AND__MEMBER,
+                num, memberId));
-    
+
-      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, group !=null ? group.split(",") : null));
+      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,
+          group != null ? group.split(",") : null));
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA}, writesToSharedConfiguration=true)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA},
+      writesToSharedConfiguration = true)
-  //TODO : Add optionContext for indexName
+  // TODO : Add optionContext for indexName
-  @CliAvailabilityIndicator({CliStrings.LIST_INDEX, CliStrings.CREATE_INDEX, CliStrings.DESTROY_INDEX})
+  @CliAvailabilityIndicator({CliStrings.LIST_INDEX, CliStrings.CREATE_INDEX,
+      CliStrings.DESTROY_INDEX})
-      return (getIndexStatisticsDetails() != null ? StringUtils.valueOf(getIndexStatisticsDetails()
-        .getNumberOfKeys(), "") : "");
+      return (getIndexStatisticsDetails() != null
+          ? StringUtils.valueOf(getIndexStatisticsDetails().getNumberOfKeys(), "") : "");
-      return (getIndexStatisticsDetails() != null ? StringUtils.valueOf(getIndexStatisticsDetails().getNumberOfUpdates(), "") : "");
+      return (getIndexStatisticsDetails() != null
+          ? StringUtils.valueOf(getIndexStatisticsDetails().getNumberOfUpdates(), "") : "");
-      return (getIndexStatisticsDetails() != null ? StringUtils.valueOf(getIndexStatisticsDetails().getNumberOfValues(), "") : "");
+      return (getIndexStatisticsDetails() != null
+          ? StringUtils.valueOf(getIndexStatisticsDetails().getNumberOfValues(), "") : "");
-      return (getIndexStatisticsDetails() != null ? StringUtils.valueOf(getIndexStatisticsDetails().getTotalUpdateTime(), "") : "");
+      return (getIndexStatisticsDetails() != null
+          ? StringUtils.valueOf(getIndexStatisticsDetails().getTotalUpdateTime(), "") : "");
-      return (getIndexStatisticsDetails() != null ? StringUtils.valueOf(getIndexStatisticsDetails().getTotalUses(), "") : "");
+      return (getIndexStatisticsDetails() != null
+          ? StringUtils.valueOf(getIndexStatisticsDetails().getTotalUses(), "") : "");

UPD66 INS66