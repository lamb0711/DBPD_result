Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  public DistributedTXRegionStub(TXStateStub txstate,LocalRegion r) {
-   super(txstate,r);
-   this.region = r;
+
+  public DistributedTXRegionStub(TXStateStub txstate, LocalRegion r) {
+    super(txstate, r);
+    this.region = r;
-  
+
-        //this.prStats.incPartitionMessagesSent();
-        try {
-          RemoteOperationResponse response = RemoteDestroyMessage.send(state.getTarget(),
-            event.getLocalRegion(),
-            event,
-            expectedOldValue, DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
-          response.waitForCacheException();
-        }
-        catch (EntryNotFoundException enfe) {
-          throw enfe;
-        }catch (TransactionDataNotColocatedException enfe) {
-          throw enfe;
-        }
-        catch (CacheException ce) {
-          throw new PartitionedRegionException(LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED.toLocalizedString(state.getTarget()), ce);
-        }
-        catch (RegionDestroyedException rde) {
-          throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(rde.getRegionFullPath()), rde);
-        } catch(RemoteOperationException roe) {
-          throw new TransactionDataNodeHasDepartedException(roe);
-        }
+    // this.prStats.incPartitionMessagesSent();
+    try {
+      RemoteOperationResponse response =
+          RemoteDestroyMessage.send(state.getTarget(), event.getLocalRegion(), event,
+              expectedOldValue, DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
+      response.waitForCacheException();
+    } catch (EntryNotFoundException enfe) {
+      throw enfe;
+    } catch (TransactionDataNotColocatedException enfe) {
+      throw enfe;
+    } catch (CacheException ce) {
+      throw new PartitionedRegionException(
+          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
+              .toLocalizedString(state.getTarget()),
+          ce);
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
+      throw new TransactionDataNodeHasDepartedException(roe);
+    }
-  
+
-      try {
-        // TODO change RemoteFetchEntryMessage to allow tombstones to be returned
-        RemoteFetchEntryMessage.FetchEntryResponse res = RemoteFetchEntryMessage.send((InternalDistributedMember)state.getTarget(), region, keyInfo.getKey());
-        //this.prStats.incPartitionMessagesSent();
-        return res.waitForResponse();
-      } catch (EntryNotFoundException enfe) {
-        return null;
-      } catch (RegionDestroyedException rde) {
-        throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-                .toLocalizedString(rde.getRegionFullPath()), rde);
-      } catch (TransactionException e) {
-        RuntimeException re = new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION.toLocalizedString(keyInfo.getKey()));
-        re.initCause(e);
-        throw re;
-      } catch (RemoteOperationException e) {
-        throw new TransactionDataNodeHasDepartedException(e);
-      }
+    try {
+      // TODO change RemoteFetchEntryMessage to allow tombstones to be returned
+      RemoteFetchEntryMessage.FetchEntryResponse res = RemoteFetchEntryMessage
+          .send((InternalDistributedMember) state.getTarget(), region, keyInfo.getKey());
+      // this.prStats.incPartitionMessagesSent();
+      return res.waitForResponse();
+    } catch (EntryNotFoundException enfe) {
+      return null;
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (TransactionException e) {
+      RuntimeException re = new TransactionDataNotColocatedException(
+          LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(keyInfo.getKey()));
+      re.initCause(e);
+      throw re;
+    } catch (RemoteOperationException e) {
+      throw new TransactionDataNodeHasDepartedException(e);
+    }
-  
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
-      try {
-        RemoteOperationResponse response = RemoteInvalidateMessage.send(state.getTarget(),
-            event.getRegion(), event,
-            DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false); 
-        response.waitForCacheException();
-      } catch (RegionDestroyedException rde) {
-        throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-            .toLocalizedString(rde.getRegionFullPath()), rde);
-      } catch(RemoteOperationException roe) {
-        throw new TransactionDataNodeHasDepartedException(roe);
-      }
+
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
+    try {
+      RemoteOperationResponse response = RemoteInvalidateMessage.send(state.getTarget(),
+          event.getRegion(), event, DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
+      response.waitForCacheException();
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
+      throw new TransactionDataNodeHasDepartedException(roe);
+    }
-  
+
-      RemoteContainsKeyValueResponse response = RemoteContainsKeyValueMessage.send((InternalDistributedMember)state.getTarget(),
-          region, keyInfo.getKey(), false); 
+      RemoteContainsKeyValueResponse response = RemoteContainsKeyValueMessage
+          .send((InternalDistributedMember) state.getTarget(), region, keyInfo.getKey(), false);
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(rde.getRegionFullPath()), rde);
-    } catch(RemoteOperationException roe) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
-  
+
-      RemoteContainsKeyValueResponse response = RemoteContainsKeyValueMessage.send((InternalDistributedMember)state.getTarget(),
-          region, keyInfo.getKey(), true); 
+      RemoteContainsKeyValueResponse response = RemoteContainsKeyValueMessage
+          .send((InternalDistributedMember) state.getTarget(), region, keyInfo.getKey(), true);
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-          .toLocalizedString(rde.getRegionFullPath()), rde);
-    } catch(RemoteOperationException roe) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
-  
-  public Object findObject(KeyInfo keyInfo,
-                           boolean isCreate,
-                           boolean generateCallbacks,
-                           Object value,
-                           boolean preferCD,
-                           ClientProxyMembershipID requestingClient,
-                           EntryEventImpl clientEvent) {
+
+  public Object findObject(KeyInfo keyInfo, boolean isCreate, boolean generateCallbacks,
+      Object value, boolean preferCD, ClientProxyMembershipID requestingClient,
+      EntryEventImpl clientEvent) {
-      RemoteGetMessage.RemoteGetResponse response = RemoteGetMessage.send((InternalDistributedMember)state.getTarget(), region, key,
-          callbackArgument, requestingClient);
+      RemoteGetMessage.RemoteGetResponse response =
+          RemoteGetMessage.send((InternalDistributedMember) state.getTarget(), region, key,
+              callbackArgument, requestingClient);
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-          .toLocalizedString(rde.getRegionFullPath()), rde);
-    } catch(RemoteOperationException roe) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
-  
+
-  
+
-      
-      try {
-        RemotePutResponse response = RemotePutMessage.txSend(state.getTarget(),r,event,lastModified,ifNew,ifOld,expectedOldValue,requireOldValue);
-        PutResult result = response.waitForResult();
-        event.setOldValue(result.oldValue, true/*force*/);
-        retVal = result.returnValue;
-      }catch (TransactionDataNotColocatedException enfe) {
-        throw enfe;
-      }
-      catch (CacheException ce) {
-        throw new PartitionedRegionException(LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED.toLocalizedString(state.getTarget()), ce);
-      }
-      catch (RegionDestroyedException rde) {
-        throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-            .toLocalizedString(rde.getRegionFullPath()), rde);
-      } catch(RemoteOperationException roe) {
-        throw new TransactionDataNodeHasDepartedException(roe);
-      }
+
+    try {
+      RemotePutResponse response = RemotePutMessage.txSend(state.getTarget(), r, event,
+          lastModified, ifNew, ifOld, expectedOldValue, requireOldValue);
+      PutResult result = response.waitForResult();
+      event.setOldValue(result.oldValue, true/* force */);
+      retVal = result.returnValue;
+    } catch (TransactionDataNotColocatedException enfe) {
+      throw enfe;
+    } catch (CacheException ce) {
+      throw new PartitionedRegionException(
+          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
+              .toLocalizedString(state.getTarget()),
+          ce);
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
+      throw new TransactionDataNodeHasDepartedException(roe);
+    }
-  
+
-      RemoteSizeMessage.SizeResponse response = RemoteSizeMessage.send(Collections.singleton(state.getTarget()), region);
+      RemoteSizeMessage.SizeResponse response =
+          RemoteSizeMessage.send(Collections.singleton(state.getTarget()), region);
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-          .toLocalizedString(rde.getRegionFullPath()), rde);
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
-  
-  public void postPutAll(DistributedPutAllOperation putallOp,
-      VersionedObjectList successfulPuts, LocalRegion region) {
+
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
-      RemotePutAllMessage.PutAllResponse response = RemotePutAllMessage.send(state.getTarget(), putallOp.getBaseEvent(), putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true, DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
+      RemotePutAllMessage.PutAllResponse response =
+          RemotePutAllMessage.send(state.getTarget(), putallOp.getBaseEvent(),
+              putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true,
+              DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-          .toLocalizedString(rde.getRegionFullPath()), rde);
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
-    }  
-  }
-  @Override
-  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps, LocalRegion region) {
-    try {
-      RemoteRemoveAllMessage.RemoveAllResponse response = RemoteRemoveAllMessage.send(state.getTarget(), op.getBaseEvent(), op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true, DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      response.waitForCacheException();
-    } catch (RegionDestroyedException rde) {
-      throw new TransactionDataNotColocatedException(LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-          .toLocalizedString(rde.getRegionFullPath()), rde);
-    } catch (RemoteOperationException roe) {
-      throw new TransactionDataNodeHasDepartedException(roe);
-    }  
+    }
-  public void cleanup() {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion region) {
+    try {
+      RemoteRemoveAllMessage.RemoveAllResponse response =
+          RemoteRemoveAllMessage.send(state.getTarget(), op.getBaseEvent(),
+              op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true,
+              DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
+      response.waitForCacheException();
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (RemoteOperationException roe) {
+      throw new TransactionDataNodeHasDepartedException(roe);
+    }
+
+  @Override
+  public void cleanup() {}

