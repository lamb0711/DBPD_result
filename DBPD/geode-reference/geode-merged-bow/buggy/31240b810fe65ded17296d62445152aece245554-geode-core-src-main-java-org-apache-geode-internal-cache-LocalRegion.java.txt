GEODE-5059: Move basicPut functionality to RegionMapPut (#1858)

* Move the methods to RegionMapPut
* Add tests to RegionMapPut

+  @Override
+  public boolean isRegionInvalid() {
+    return regionInvalid;
+  }
+
+  /**
+   * Set to true after an invalidate region expiration so we don't get multiple expirations
+   */
+  @Override
+  public void setRegionInvalid(boolean regionInvalid) {
+    this.regionInvalid = regionInvalid;
+  }
+
+  /**
+   * Prevents access to this region until it is done initializing, except for some special
+   * initializing operations such as replying to create region messages In JDK 1.5 we will use
+   * java.util.concurrent.CountDownLatch instead of org.apache.geode.internal.util.CountDownLatch.
+   */
+  @Override
+  public StoppableCountDownLatch getInitializationLatchBeforeGetInitialImage() {
+    return initializationLatchBeforeGetInitialImage;
+  }
+
+  @Override
+  public StoppableCountDownLatch getInitializationLatchAfterGetInitialImage() {
+    return initializationLatchAfterGetInitialImage;
+  }
+
-  /**
-   * Set to true after an invalidate region expiration so we don't get multiple expirations
-   */
-  volatile boolean regionInvalid = false;
+  private volatile boolean regionInvalid = false;
-  /**
-   * Prevents access to this region until it is done initializing, except for some special
-   * initializing operations such as replying to create region messages In JDK 1.5 we will use
-   * java.util.concurrent.CountDownLatch instead of org.apache.geode.internal.util.CountDownLatch.
-   */
-  final StoppableCountDownLatch initializationLatchBeforeGetInitialImage;
+  private final StoppableCountDownLatch initializationLatchBeforeGetInitialImage;
-  final StoppableCountDownLatch initializationLatchAfterGetInitialImage;
+  private final StoppableCountDownLatch initializationLatchAfterGetInitialImage;
+  @Override
-  protected boolean isCopyOnRead() {
+  @Override
+  public boolean isCopyOnRead() {
+  @Override
-    releaseLatch(this.initializationLatchBeforeGetInitialImage);
+    releaseLatch(this.getInitializationLatchBeforeGetInitialImage());
-    releaseLatch(this.initializationLatchAfterGetInitialImage);
+    releaseLatch(this.getInitializationLatchAfterGetInitialImage());
-  void cacheWriteBeforePut(EntryEventImpl event, Set netWriteRecipients, CacheWriter localWriter,
-      boolean requireOldValue, Object expectedOldValue)
+  @Override
+  public void cacheWriteBeforePut(EntryEventImpl event, Set netWriteRecipients,
+      CacheWriter localWriter, boolean requireOldValue, Object expectedOldValue)
+  @Override
-        return checkForInitialization(this.initializationLatchAfterGetInitialImage);
+        return checkForInitialization(this.getInitializationLatchAfterGetInitialImage());
-        return checkForInitialization(this.initializationLatchBeforeGetInitialImage);
+        return checkForInitialization(this.getInitializationLatchBeforeGetInitialImage());
-        waitOnInitialization(this.initializationLatchAfterGetInitialImage);
+        waitOnInitialization(this.getInitializationLatchAfterGetInitialImage());
-        waitOnInitialization(this.initializationLatchBeforeGetInitialImage);
+        waitOnInitialization(this.getInitializationLatchBeforeGetInitialImage());
-  protected void waitOnInitialization(StoppableCountDownLatch latch) {
+  @Override
+  public void waitOnInitialization(StoppableCountDownLatch latch) {
-    waitOnInitialization(this.initializationLatchAfterGetInitialImage);
+    waitOnInitialization(this.getInitializationLatchAfterGetInitialImage());
-  void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
+  @Override
+  public void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
+  @Override
-  void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
+  @Override
+  public void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
-  boolean virtualPut(final EntryEventImpl event, final boolean ifNew, final boolean ifOld,
+  @Override
+  public boolean virtualPut(final EntryEventImpl event, final boolean ifNew, final boolean ifOld,
+  @Override
-  protected long basicPutPart2(EntryEventImpl event, RegionEntry entry, boolean isInitialized,
+  @Override
+  public long basicPutPart2(EntryEventImpl event, RegionEntry entry, boolean isInitialized,
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  void basicDestroy(final EntryEventImpl event, final boolean cacheWrite, Object expectedOldValue)
+  @Override
+  public void basicDestroy(final EntryEventImpl event, final boolean cacheWrite,
+      Object expectedOldValue)
-  boolean mapDestroy(final EntryEventImpl event, final boolean cacheWrite, final boolean isEviction,
-      Object expectedOldValue)
+  @Override
+  public boolean mapDestroy(final EntryEventImpl event, final boolean cacheWrite,
+      final boolean isEviction, Object expectedOldValue)
+  @Override
-  void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event,
+  @Override
+  public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event,
-      this.regionInvalid = true;
+      this.setRegionInvalid(true);
-        region.regionInvalid = true;
+        region.setRegionInvalid(true);
-    StoppableCountDownLatch latch = this.initializationLatchAfterGetInitialImage;
+    StoppableCountDownLatch latch = this.getInitializationLatchAfterGetInitialImage();
+  @Override
-  boolean lockGII() {
+  @Override
+  public boolean lockGII() {
-  void unlockGII() {
+  @Override
+  public void unlockGII() {
-  Object basicGetEntryUserAttribute(Object entryKey) {
+  @Override
+  public Object basicGetEntryUserAttribute(Object entryKey) {
-  TXId getTXId() {
+  @Override
+  public TXId getTXId() {
-  TXEntryState createReadEntry(TXRegionState txRegionState, KeyInfo keyInfo,
+  @Override
+  public TXEntryState createReadEntry(TXRegionState txRegionState, KeyInfo keyInfo,
-  void txLRUStart() {
+  @Override
+  public void txLRUStart() {
-  void txLRUEnd() {
+  @Override
+  public void txLRUEnd() {
-  void txDecRefCount(RegionEntry regionEntry) {
+  @Override
+  public void txDecRefCount(RegionEntry regionEntry) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  boolean isMetaRegionWithTransactions() {
+  @Override
+  public boolean isMetaRegionWithTransactions() {
-  void updateSizeOnPut(Object key, int oldSize, int newSize) {
+  @Override
+  public void updateSizeOnPut(Object key, int oldSize, int newSize) {
-  void updateSizeOnCreate(Object key, int newSize) {
+  @Override
+  public void updateSizeOnCreate(Object key, int newSize) {
+  @Override
+  @Override
+  @Override
-   * @return localMember for local and distributedRegions, member with parimary bucket for
+   * @return localMember for local and distributedRegions, member with primary bucket for
+  @Override
+  @Override
-  void setInUseByTransaction(boolean value) {
+  @Override
+  public void setInUseByTransaction(boolean value) {

MOV31 MOV31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS8 MOV29 INS78 INS83 INS39 INS42 INS44 INS8 MOV29 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS83 INS78 INS78 UPD83 INS78 INS78 INS83 INS78 INS78 UPD83 INS78 INS83 INS78 INS78 INS83 INS78 INS83 INS78 INS78 UPD83 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS78 INS83 INS78 INS78 INS83 INS78 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS78 UPD42 MOV44 INS78 INS83 MOV44 INS78 INS83 UPD42 INS78 INS78 INS78 INS78 INS78 INS83 INS42 INS41 INS42 INS39 INS42 MOV21 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 INS42 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD66 INS42 INS32 INS32 INS32 INS21 INS32 INS52 INS42 INS52 INS42 INS32 INS32 INS32 INS32 INS52 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS9 INS32 INS42 INS42 INS9 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL9 DEL7 DEL52 DEL42 DEL22