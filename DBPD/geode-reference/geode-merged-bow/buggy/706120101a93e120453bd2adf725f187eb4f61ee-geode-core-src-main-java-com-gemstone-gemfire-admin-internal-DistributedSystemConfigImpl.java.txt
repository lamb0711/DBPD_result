GEODE-1377: Initial move of system properties from private to public

-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.PrintStream;
-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.Set;
-import java.util.StringTokenizer;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.GemFireIOException;
-import com.gemstone.gemfire.admin.AdminXmlException;
-import com.gemstone.gemfire.admin.CacheServerConfig;
-import com.gemstone.gemfire.admin.CacheVmConfig;
-import com.gemstone.gemfire.admin.DistributedSystemConfig;
-import com.gemstone.gemfire.admin.DistributionLocator;
-import com.gemstone.gemfire.admin.DistributionLocatorConfig;
+import com.gemstone.gemfire.admin.*;
-import com.gemstone.gemfire.internal.Banner;
-import com.gemstone.gemfire.internal.logging.LocalLogWriter;
-import com.gemstone.gemfire.internal.logging.LogWriterFactory;
-import com.gemstone.gemfire.internal.logging.ManagerLogWriter;
-import com.gemstone.gemfire.internal.logging.log4j.LogWriterAppender;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.*;
+
+import static com.gemstone.gemfire.distributed.SystemConfigurationProperties.*;
-public class DistributedSystemConfigImpl 
-  implements DistributedSystemConfig {
+public class DistributedSystemConfigImpl
+    implements DistributedSystemConfig {
-  
+
-  
-  /** Listeners to notify when this DistributedSystemConfig changes */
+  /**
+   * Listeners to notify when this DistributedSystemConfig changes
+   */
-  
-  /** Configs for CacheServers that this system config is aware of */
+
+  /**
+   * Configs for CacheServers that this system config is aware of
+   */
-  /** Configs for the managed distribution locators in the distributed
-   * system */
+  /**
+   * Configs for the managed distribution locators in the distributed
+   * system
+   */
-  
-  /** The display name of this distributed system */
+
+  /**
+   * The display name of this distributed system
+   */
-  /** The admin distributed system object that is configured by this
-   * config object. 
+  /**
+   * The admin distributed system object that is configured by this
+   * config object.
-  /** The GemFire log writer used by the distributed system */
+  /**
+   * The GemFire log writer used by the distributed system
+   */
-  
-    filterOutAdminProperties(Properties props) { 
+  filterOutAdminProperties(Properties props) {
-            REFRESH_INTERVAL_NAME.equals(name) ||
-            REMOTE_COMMAND_NAME.equals(name)
-           )
-         ) {
+          REFRESH_INTERVAL_NAME.equals(name) ||
+          REMOTE_COMMAND_NAME.equals(name)
+      )
+          ) {
-   * <code>DistributionConfig</code>. 
+   * <code>DistributionConfig</code>.
-                                     String remoteCommand) {
+      String remoteCommand) {
-    this.membershipPortRange = 
-                  getMembershipPortRangeString(distConfig.getMembershipPortRange());
+    this.membershipPortRange =
+        getMembershipPortRangeString(distConfig.getMembershipPortRange());
-    
+
-      LogWriterImpl.levelToString(distConfig.getLogLevel());
+        LogWriterImpl.levelToString(distConfig.getLogLevel());
-    
+
-    
+
-  
+
-  protected DistributedSystemConfigImpl(Properties props, 
-                                        boolean ignoreGemFirePropsFile) {
+  protected DistributedSystemConfigImpl(Properties props,
+      boolean ignoreGemFirePropsFile) {
-        filterOutAdminProperties(props), ignoreGemFirePropsFile), 
+            filterOutAdminProperties(props), ignoreGemFirePropsFile),
-      props.getProperty(ENTITY_CONFIG_XML_FILE_NAME);
+        props.getProperty(ENTITY_CONFIG_XML_FILE_NAME);
-      props.getProperty(REFRESH_INTERVAL_NAME);
+        props.getProperty(REFRESH_INTERVAL_NAME);
-       this.refreshInterval = Integer.parseInt(refreshInterval);
+        this.refreshInterval = Integer.parseInt(refreshInterval);
-        throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1.toLocalizedString(new Object[] { refreshInterval, REFRESH_INTERVAL_NAME }));
+        throw new IllegalArgumentException(
+            LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1.toLocalizedString(new Object[] { refreshInterval, REFRESH_INTERVAL_NAME }));
-    }    
+    }
-  
+
-        @Override
-        public int getLogLevel() {
-          return LogWriterImpl.levelNameToCode(DistributedSystemConfigImpl.this.getLogLevel());
-        }
-        @Override
-        public File getLogFile() {
-          return new File(DistributedSystemConfigImpl.this.getLogFile());
-        }
-        @Override
-        public int getLogFileSizeLimit() {
-          return DistributedSystemConfigImpl.this.getLogFileSizeLimit();
-        }
-        @Override
-        public int getLogDiskSpaceLimit() {
-          return DistributedSystemConfigImpl.this.getLogDiskSpaceLimit();
-        }
-        @Override
-        public String getName() {
-          return DistributedSystemConfigImpl.this.getSystemName();
-        }
-        @Override
-        public String toLoggerString() {
-          return DistributedSystemConfigImpl.this.toString();
-        }
-      };
+      @Override
+      public int getLogLevel() {
+        return LogWriterImpl.levelNameToCode(DistributedSystemConfigImpl.this.getLogLevel());
+      }
+
+      @Override
+      public File getLogFile() {
+        return new File(DistributedSystemConfigImpl.this.getLogFile());
+      }
+
+      @Override
+      public int getLogFileSizeLimit() {
+        return DistributedSystemConfigImpl.this.getLogFileSizeLimit();
+      }
+
+      @Override
+      public int getLogDiskSpaceLimit() {
+        return DistributedSystemConfigImpl.this.getLogDiskSpaceLimit();
+      }
+
+      @Override
+      public String getName() {
+        return DistributedSystemConfigImpl.this.getSystemName();
+      }
+
+      @Override
+      public String toLoggerString() {
+        return DistributedSystemConfigImpl.this.toString();
+      }
+    };
-      throw new IllegalStateException(LocalizedStrings.DistributedSystemConfigImpl_A_DISTRIBUTEDSYSTEMCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_ADMINDISTRIBUTEDSYSTEM.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.DistributedSystemConfigImpl_A_DISTRIBUTEDSYSTEMCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_ADMINDISTRIBUTEDSYSTEM
+              .toLocalizedString());
-   * @throws AdminXmlException
-   *         If a problem is encountered while parsing the XML file.
+   * @throws AdminXmlException If a problem is encountered while parsing the XML file.
-      }
-      finally {
+      } finally {
-    } 
-    catch (IOException ex) {
+    } catch (IOException ex) {
-  
-  /** Returns the multicast address for the system */
+
+  /**
+   * Returns the multicast address for the system
+   */
-  
+
-  /** Returns the multicast port for the system */
+  /**
+   * Returns the multicast port for the system
+   */
-  
+
-  
+
-  
+
-  /** Returns the comma-delimited list of locators for the system */
+  /**
+   * Returns the comma-delimited list of locators for the system
+   */
-    }
-    else {
+    } else {
-  
+
-   * 
-   * @return the value for the Distributed System property membership-port-range 
+   *
+   * @return the value for the Distributed System property membership-port-range
-   * 
-   * @param membershipPortRangeStr
-   *          the value for membership-port-range given as two numbers separated 
-   *          by a minus sign.
+   *
+   * @param membershipPortRangeStr the value for membership-port-range given as two numbers separated
+   *                               by a minus sign.
-                  .toLocalizedString(new Object[] {membershipPortRangeStr, 
-                                                   MEMBERSHIP_PORT_RANGE_NAME}));
+                  .toLocalizedString(new Object[] { membershipPortRangeStr,
+                      MEMBERSHIP_PORT_RANGE_NAME }));
-  
+
-  
+
-   * 
-   * @param membershipPortRange
-   *          membership-port-range given as two numbers separated by a minus
-   *          sign.
+   *
+   * @param membershipPortRange membership-port-range given as two numbers separated by a minus
+   *                            sign.
-      
-      if (range[0] < 0 || range[0] >= range[1] || 
+
+      if (range[0] < 0 || range[0] >= range[1] ||
-  }  
-  
+  }
+
-   *         limits of the port range separated by '-' e.g. 1-65535
+   * limits of the port range separated by '-' e.g. 1-65535
-    if (membershipPortRange != null && 
+    if (membershipPortRange != null &&
-      membershipPortRangeString = membershipPortRange[0] + "-" + 
-                                  membershipPortRange[1];
+      membershipPortRangeString = membershipPortRange[0] + "-" +
+          membershipPortRange[1];
-    
+
-  
+
-  
+
-  
+
+
+
+
+
-   return this.memberTimeout;
+    return this.memberTimeout;
+
-  
+
-  
-  /** Returns the remote command setting to use for remote administration */
+
+  /**
+   * Returns the remote command setting to use for remote administration
+   */
-  
+
-  
-  private static final boolean ALLOW_ALL_REMOTE_COMMANDS = Boolean.getBoolean("gemfire.admin.ALLOW_ALL_REMOTE_COMMANDS");
+
+  private static final boolean ALLOW_ALL_REMOTE_COMMANDS = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "admin.ALLOW_ALL_REMOTE_COMMANDS");
+
-    
+
-    final ArrayList<String> array = new ArrayList<String>(); 
+    final ArrayList<String> array = new ArrayList<String>();
-            if (!(string.endsWith(LEGAL_REMOTE_COMMANDS[j]) || string.endsWith(LEGAL_REMOTE_COMMANDS[j]+".exe"))) {
+            if (!(string.endsWith(LEGAL_REMOTE_COMMANDS[j]) || string.endsWith(LEGAL_REMOTE_COMMANDS[j] + ".exe"))) {
-        
+
-          final String previous = (array == null || array.isEmpty()) ? null : array.get(array.size()-1);
+          final String previous = (array == null || array.isEmpty()) ? null : array.get(array.size() - 1);
-          
+
-  
-	public String getSystemName() {
-		return this.systemName;
-	}
-  
-	public void setSystemName(final String systemName) {
-          checkReadOnly();
-		this.systemName = systemName;
+
+  public String getSystemName() {
+    return this.systemName;
+  }
+
+  public void setSystemName(final String systemName) {
+    checkReadOnly();
+    this.systemName = systemName;
-	}
-  
-  /** 
+  }
+
+  /**
+
-  
-  
-  /** 
+
+  /**
+
-    return (CacheVmConfig)createCacheServerConfig();
+    return (CacheVmConfig) createCacheServerConfig();
-  
-  /** 
+
+  /**
-    if (managerConfig == null) return;
-    for (Iterator iter = this.cacheServerConfigs.iterator(); iter.hasNext();) {
+    if (managerConfig == null)
+      return;
+    for (Iterator iter = this.cacheServerConfigs.iterator(); iter.hasNext(); ) {
-  
-  /** 
+
+  /**
-    removeCacheVmConfig((CacheVmConfig)managerConfig);
+    removeCacheVmConfig((CacheVmConfig) managerConfig);
+
-  /** 
+  /**
-        this.system.getDistributionLocators(); 
+          this.system.getDistributionLocators();
-        new DistributionLocatorConfig[locators.length];
+          new DistributionLocatorConfig[locators.length];
-        new DistributionLocatorConfig[this.locatorConfigs.size()];
+          new DistributionLocatorConfig[this.locatorConfigs.size()];
-  
-  /** Creates the configuration for a DistributionLocator */
+
+  /**
+   * Creates the configuration for a DistributionLocator
+   */
-  
-  /** Adds the configuration for a DistributionLocator */
+
+  /**
+   * Adds the configuration for a DistributionLocator
+   */
-  
-  /** 
+
+  /**
-  /** 
+  /**
-    if (bindAddress == null || bindAddress.length() == 0) return true;
-    if (InetAddressUtil.validateHost(bindAddress) == null) return false;
+    if (bindAddress == null || bindAddress.length() == 0)
+      return true;
+    if (InetAddressUtil.validateHost(bindAddress) == null)
+      return false;
-  
+
-    synchronized(this.listeners) {
-      clients = (ConfigListener[]) 
+    synchronized (this.listeners) {
+      clients = (ConfigListener[])
-  
-  /** Registers listener for notification of changes in this config. */
+
+  /**
+   * Registers listener for notification of changes in this config.
+   */
-    synchronized(this.listeners) {
+    synchronized (this.listeners) {
-  
-  /** Removes previously registered listener of this config. */
+
+  /**
+   * Removes previously registered listener of this config.
+   */
-    synchronized(this.listeners) {
+    synchronized (this.listeners) {
-  
+
-  private boolean sslEnabled = 
+  private boolean sslEnabled =
-  private String sslProtocols = 
+  private String sslProtocols =
-  private String sslCiphers = 
+  private String sslCiphers =
-  private boolean sslAuthenticationRequired = 
+  private boolean sslAuthenticationRequired =
-  
+
+
+
+
+
+
+
+
+
-  
+
-  
+
-   * 
-   * 
-
-   * @throws IllegalArgumentException
-   *         If configuration is not valid
+   * @throws IllegalArgumentException If configuration is not valid
-      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_MCASTPORT_MUST_BE_AN_INTEGER_INCLUSIVELY_BETWEEN_0_AND_1.toLocalizedString(new Object[] {Integer.valueOf(MIN_MCAST_PORT), Integer.valueOf(MAX_MCAST_PORT)}));
+      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_MCASTPORT_MUST_BE_AN_INTEGER_INCLUSIVELY_BETWEEN_0_AND_1
+          .toLocalizedString(new Object[] { Integer.valueOf(MIN_MCAST_PORT), Integer.valueOf(MAX_MCAST_PORT) }));
-    if (this.logFileSizeLimit < MIN_LOG_FILE_SIZE_LIMIT || 
+    if (this.logFileSizeLimit < MIN_LOG_FILE_SIZE_LIMIT ||
-      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGFILESIZELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1.toLocalizedString(new Object[] {Integer.valueOf(MIN_LOG_FILE_SIZE_LIMIT), Integer.valueOf(MAX_LOG_FILE_SIZE_LIMIT)}));
+      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGFILESIZELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1
+          .toLocalizedString(new Object[] { Integer.valueOf(MIN_LOG_FILE_SIZE_LIMIT), Integer.valueOf(MAX_LOG_FILE_SIZE_LIMIT) }));
-    if (this.logDiskSpaceLimit < MIN_LOG_DISK_SPACE_LIMIT || 
+    if (this.logDiskSpaceLimit < MIN_LOG_DISK_SPACE_LIMIT ||
-      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGDISKSPACELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1.toLocalizedString(new Object[] {Integer.valueOf(MIN_LOG_DISK_SPACE_LIMIT), Integer.valueOf(MAX_LOG_DISK_SPACE_LIMIT)}));
+      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGDISKSPACELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1
+          .toLocalizedString(new Object[] { Integer.valueOf(MIN_LOG_DISK_SPACE_LIMIT), Integer.valueOf(MAX_LOG_DISK_SPACE_LIMIT) }));
-      (DistributedSystemConfigImpl) super.clone();
+        (DistributedSystemConfigImpl) super.clone();
-      this.getDistributionLocatorConfigs();
+        this.getDistributionLocatorConfigs();
-  
+
-    if (lf == null) lf = ",";
-    
+    if (lf == null)
+      lf = ",";
+
-    buf.append("  "+MCAST_ADDRESS_NAME+"=");
+    buf.append("  " + MCAST_ADDRESS + "=");
-    buf.append("  "+MCAST_PORT_NAME+"=");
+    buf.append("  " + MCAST_PORT + "=");
-    buf.append("  "+LOCATORS_NAME+"=");
+    buf.append("  " + LOCATORS + "=");
-    buf.append("  "+MEMBERSHIP_PORT_RANGE_NAME+"=");
+    buf.append("  " + MEMBERSHIP_PORT_RANGE_NAME + "=");
-    buf.append("  "+BIND_ADDRESS_NAME+"=");
+    buf.append("  " + BIND_ADDRESS + "=");
-    buf.append("  "+TCP_PORT_NAME+"="+this.tcpPort);
+    buf.append("  " + TCP_PORT + "=" + this.tcpPort);
-    buf.append("  "+DistributionConfig.DISABLE_TCP_NAME+"=");
+    buf.append("  " + DistributionConfig.DISABLE_TCP_NAME + "=");
-    buf.append("  "+DistributionConfig.DISABLE_AUTO_RECONNECT_NAME+"=");
+    buf.append("  " + DistributionConfig.DISABLE_AUTO_RECONNECT_NAME + "=");
-    buf.append("  "+REMOTE_COMMAND_NAME+"=");
+    buf.append("  " + REMOTE_COMMAND_NAME + "=");
-    buf.append("  "+SSL_ENABLED_NAME+"=");
+    buf.append("  " + SSL_ENABLED_NAME + "=");
-    buf.append("  "+SSL_CIPHERS_NAME+"=");
+    buf.append("  " + SSL_CIPHERS_NAME + "=");
-    buf.append("  "+SSL_PROTOCOLS_NAME+"=");
+    buf.append("  " + SSL_PROTOCOLS_NAME + "=");
-    buf.append("  "+SSL_REQUIRE_AUTHENTICATION_NAME+"=");
+    buf.append("  " + SSL_REQUIRE_AUTHENTICATION_NAME + "=");
-    buf.append("  "+LOG_FILE_NAME+"=");
+    buf.append("  " + LOG_FILE_NAME + "=");
-    buf.append("  "+LOG_LEVEL_NAME+"=");
+    buf.append("  " + LOG_LEVEL_NAME + "=");
-    buf.append("  "+LOG_DISK_SPACE_LIMIT_NAME+"=");
+    buf.append("  " + LOG_DISK_SPACE_LIMIT_NAME + "=");
-    buf.append("  "+LOG_FILE_SIZE_LIMIT_NAME+"=");
+    buf.append("  " + LOG_FILE_SIZE_LIMIT_NAME + "=");
-    buf.append("  "+REFRESH_INTERVAL_NAME+"=");
+    buf.append("  " + REFRESH_INTERVAL_NAME + "=");

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS27 UPD66 UPD66 UPD66 UPD66 UPD66 INS40 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45