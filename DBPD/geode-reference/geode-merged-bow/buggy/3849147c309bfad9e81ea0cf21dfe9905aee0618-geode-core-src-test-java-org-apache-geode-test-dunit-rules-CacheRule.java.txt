GEODE-5033: Improve TearDown of DistributedTestRule

Change Distributed rules to extend AbstractDistributedTestRule to ensure
that all DUnit VMs were launched prior to setUp of these rules.

Add DistributedTestRule.TearDown which includes everything that the
old DistributedTestCase handled during tearDown.

Using DistributedTestRule as a non-static Rule is probably the best way
to use it going forward. If you use it as a static ClassRule then you
should also register DistributedTestRule.TearDown as a non-static Rule
so that removal of IgnoredExceptions and grep for suspect strings are
both properly invoked after every test method.

-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
-import static org.apache.geode.test.dunit.DistributedTestUtils.getLocators;
+import static org.apache.geode.test.dunit.Disconnect.disconnectAllFromDS;
+import static org.apache.geode.test.dunit.standalone.DUnitLauncher.getDistributedSystemProperties;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.Region;
+import org.apache.geode.internal.cache.HARegion;
-import org.apache.geode.test.dunit.Disconnect;
+import org.apache.geode.internal.cache.PartitionedRegion;
- * {@code CacheRule} follows the standard convention of using a {@code Builder} for configuration as
- * introduced in the JUnit {@code Timeout} rule.
+ * {@code CacheRule} can be used in DistributedTests as a {@code Rule}:
+ *
+ * <pre>
+ * {@literal @}Rule
+ * public DistributedTestRule distributedTestRule = new DistributedTestRule();
+ *
+ * {@literal @}Rule
+ * public CacheRule cacheRule = new CacheRule();
+ *
+ * {@literal @}Before
+ * public void setUp() {
+ *   getVM(0).invoke(() -> cacheRule.createCache(new CacheFactory().setPdxDiskStore(myDiskStore))));
+ * }
+ *
+ * {@literal @}Test
+ * public void createRegionWithRegionFactory() {
+ *   getVM(0).invoke(() -> {
+ *     RegionFactory regionFactory = cacheRule.getCache().createRegionFactory();
+ *     ...
+ *   });
+ * }
+ * </pre>
- * {@code CacheRule} can be used in DistributedTests as a {@code Rule}:
+ * {@link CacheRule.Builder} can be used to construct an instance with more options:
+ * public DistributedTestRule.TearDown tearDown = new DistributedTestRule.TearDown();
+ *
+ * {@literal @}Rule
-public class CacheRule extends DistributedExternalResource {
+public class CacheRule extends AbstractDistributedTestRule {
+  private final boolean destroyRegions;
+  private final boolean replaceConfig;
+  /**
+   * Use {@code Builder} for more options in constructing {@code CacheRule}.
+   */
+    destroyRegions = builder.destroyRegions;
+    replaceConfig = builder.replaceConfig;
-      invoker().invokeInEveryVMAndController(() -> createCache(config, systemProperties));
+      invoker().invokeInEveryVMAndController(() -> createCache(config(), systemProperties));
-        createCache(config, systemProperties);
+        createCache(config(), systemProperties);
-        vm.invoke(() -> createCache(config, systemProperties));
+        vm.invoke(() -> createCache(config(), systemProperties));
-      Disconnect.disconnectAllFromDS();
+      disconnectAllFromDS();
+  private Properties config() {
+    if (replaceConfig) {
+      return config;
+    }
+    Properties allConfig = getDistributedSystemProperties();
+    allConfig.putAll(config);
+    return allConfig;
+  }
+
-    cache = (InternalCache) new CacheFactory(config).create();
+    cache = (InternalCache) new CacheFactory(config()).create();
-  private static void closeAndNullCache() {
+  private void closeAndNullCache() {
-  private static void closeCache() {
+  private void closeCache() {
+        if (destroyRegions) {
+          destroyRegions(cache);
+        }
+  private static void destroyRegions(final Cache cache) {
+    if (cache != null && !cache.isClosed()) {
+      // try to destroy the root regions first so that we clean up any persistent files.
+      for (Region<?, ?> root : cache.rootRegions()) {
+        String regionFullPath = root == null ? null : root.getFullPath();
+        // for colocated regions you can't locally destroy a partitioned region.
+        if (root.isDestroyed() || root instanceof HARegion || root instanceof PartitionedRegion) {
+          continue;
+        }
+        try {
+          root.localDestroyRegion("CacheRule_tearDown");
+        } catch (Exception ignore) {
+        }
+      }
+    }
+  }
+
+    private boolean destroyRegions;
+    private boolean replaceConfig;
-      config.setProperty(LOCATORS, getLocators());
+      // nothing
+    /**
+     * Destroy all Regions before closing the Cache. This will cleanup the presence of each Region
+     * in DiskStores, but this is not needed if the disk files are on a TemporaryFolder. Default is
+     * false.
+     */
+    public Builder destroyRegions() {
+      destroyRegions = true;
+      return this;
+    }
+
+      replaceConfig = true;

MOV26 INS26 INS26 INS26 UPD40 UPD40 UPD40 INS40 INS40 INS40 UPD43 INS23 INS23 INS31 INS31 MOV31 MOV65 MOV65 MOV65 MOV65 UPD42 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS31 UPD66 INS66 INS66 INS65 UPD66 INS66 UPD65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 UPD66 UPD66 INS65 UPD66 INS65 INS66 INS65 INS66 INS65 INS42 INS42 INS65 INS21 INS21 INS42 INS25 INS60 INS21 INS41 INS83 INS43 INS42 INS25 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS8 INS29 INS43 INS42 UPD66 MOV66 UPD66 INS40 INS66 INS66 INS66 INS66 MOV65 INS66 MOV65 INS66 INS7 INS7 INS42 INS8 INS43 INS59 INS32 INS42 INS42 INS27 INS8 INS42 INS42 INS65 INS42 INS41 INS21 INS42 INS40 INS42 INS40 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS38 INS70 INS66 INS66 INS66 INS7 INS52 INS7 INS42 INS42 INS42 INS33 INS32 INS44 INS32 INS8 INS42 INS9 INS42 INS9 INS25 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS25 INS54 INS32 INS42 INS8 INS43 INS76 INS76 INS43 INS59 INS27 INS8 INS8 INS12 INS32 INS32 INS42 INS21 INS42 INS42 INS42 INS16 INS32 INS62 INS62 INS18 INS21 INS44 INS8 MOV42 MOV42 INS32 INS27 INS33 INS32 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV42 DEL42 DEL42 DEL83 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32