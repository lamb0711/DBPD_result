Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN, writesToSharedConfiguration=true)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN, writesToSharedConfiguration = true)
-  public Result createGatewaySender(
-      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__GROUP,
+  public Result createGatewaySender(@CliOption(key = CliStrings.CREATE_GATEWAYSENDER__GROUP,
-      help = CliStrings.CREATE_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String[] onGroups,
+      help = CliStrings.CREATE_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+          valueSeparator = ",") String[] onGroups,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CREATE_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CREATE_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember,
-      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__ID,
-      mandatory = true,
-      help = CliStrings.CREATE_GATEWAYSENDER__ID__HELP) String id,
+      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__ID, mandatory = true,
+          help = CliStrings.CREATE_GATEWAYSENDER__ID__HELP) String id,
-      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__REMOTEDISTRIBUTEDSYSTEMID,
-      mandatory = true,
-      help = CliStrings.CREATE_GATEWAYSENDER__REMOTEDISTRIBUTEDSYSTEMID__HELP) Integer remoteDistributedSystemId,
+      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__REMOTEDISTRIBUTEDSYSTEMID, mandatory = true,
+          help = CliStrings.CREATE_GATEWAYSENDER__REMOTEDISTRIBUTEDSYSTEMID__HELP) Integer remoteDistributedSystemId,
-      help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) Boolean parallel,
+          help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) Boolean parallel,
-      help = CliStrings.CREATE_GATEWAYSENDER__MANUALSTART__HELP) Boolean manualStart,
+          help = CliStrings.CREATE_GATEWAYSENDER__MANUALSTART__HELP) Boolean manualStart,
-      help = CliStrings.CREATE_GATEWAYSENDER__SOCKETBUFFERSIZE__HELP) Integer socketBufferSize,
+          help = CliStrings.CREATE_GATEWAYSENDER__SOCKETBUFFERSIZE__HELP) Integer socketBufferSize,
-      help = CliStrings.CREATE_GATEWAYSENDER__SOCKETREADTIMEOUT__HELP) Integer socketReadTimeout,
+          help = CliStrings.CREATE_GATEWAYSENDER__SOCKETREADTIMEOUT__HELP) Integer socketReadTimeout,
-      help = CliStrings.CREATE_GATEWAYSENDER__ENABLEBATCHCONFLATION__HELP) Boolean enableBatchConflation,
+          help = CliStrings.CREATE_GATEWAYSENDER__ENABLEBATCHCONFLATION__HELP) Boolean enableBatchConflation,
-      help = CliStrings.CREATE_GATEWAYSENDER__BATCHSIZE__HELP) Integer batchSize,
+          help = CliStrings.CREATE_GATEWAYSENDER__BATCHSIZE__HELP) Integer batchSize,
-      help = CliStrings.CREATE_GATEWAYSENDER__BATCHTIMEINTERVAL__HELP) Integer batchTimeInterval,
+          help = CliStrings.CREATE_GATEWAYSENDER__BATCHTIMEINTERVAL__HELP) Integer batchTimeInterval,
-      help = CliStrings.CREATE_GATEWAYSENDER__ENABLEPERSISTENCE__HELP) Boolean enablePersistence,
+          help = CliStrings.CREATE_GATEWAYSENDER__ENABLEPERSISTENCE__HELP) Boolean enablePersistence,
-      help = CliStrings.CREATE_GATEWAYSENDER__DISKSTORENAME__HELP) String diskStoreName,
+          help = CliStrings.CREATE_GATEWAYSENDER__DISKSTORENAME__HELP) String diskStoreName,
-      help = CliStrings.CREATE_GATEWAYSENDER__DISKSYNCHRONOUS__HELP) Boolean diskSynchronous,
+          help = CliStrings.CREATE_GATEWAYSENDER__DISKSYNCHRONOUS__HELP) Boolean diskSynchronous,
-      help = CliStrings.CREATE_GATEWAYSENDER__MAXQUEUEMEMORY__HELP) Integer maxQueueMemory,
+          help = CliStrings.CREATE_GATEWAYSENDER__MAXQUEUEMEMORY__HELP) Integer maxQueueMemory,
-      help = CliStrings.CREATE_GATEWAYSENDER__ALERTTHRESHOLD__HELP) Integer alertThreshold,
+          help = CliStrings.CREATE_GATEWAYSENDER__ALERTTHRESHOLD__HELP) Integer alertThreshold,
-      help = CliStrings.CREATE_GATEWAYSENDER__DISPATCHERTHREADS__HELP) Integer dispatcherThreads,
+          help = CliStrings.CREATE_GATEWAYSENDER__DISPATCHERTHREADS__HELP) Integer dispatcherThreads,
-      help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) String orderPolicy,
+          help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) String orderPolicy,
-      help = CliStrings.CREATE_GATEWAYSENDER__GATEWAYEVENTFILTER__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] gatewayEventFilters,
+          help = CliStrings.CREATE_GATEWAYSENDER__GATEWAYEVENTFILTER__HELP) @CliMetaData(
+              valueSeparator = ",") String[] gatewayEventFilters,
-      help = CliStrings.CREATE_GATEWAYSENDER__GATEWAYTRANSPORTFILTER__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] gatewayTransportFilter) {
+          help = CliStrings.CREATE_GATEWAYSENDER__GATEWAYTRANSPORTFILTER__HELP) @CliMetaData(
+              valueSeparator = ",") String[] gatewayTransportFilter) {
-      GatewaySenderFunctionArgs gatewaySenderFunctionArgs =
-        new GatewaySenderFunctionArgs(id,
-            remoteDistributedSystemId, parallel, manualStart, socketBufferSize, socketReadTimeout,
-            enableBatchConflation, batchSize, batchTimeInterval, enablePersistence, diskStoreName,
-            diskSynchronous, maxQueueMemory, alertThreshold, dispatcherThreads, orderPolicy,
-            gatewayEventFilters, gatewayTransportFilter);
+      GatewaySenderFunctionArgs gatewaySenderFunctionArgs = new GatewaySenderFunctionArgs(id,
+          remoteDistributedSystemId, parallel, manualStart, socketBufferSize, socketReadTimeout,
+          enableBatchConflation, batchSize, batchTimeInterval, enablePersistence, diskStoreName,
+          diskSynchronous, maxQueueMemory, alertThreshold, dispatcherThreads, orderPolicy,
+          gatewayEventFilters, gatewayTransportFilter);
-      Set<DistributedMember> membersToCreateGatewaySenderOn = CliUtil.findAllMatchingMembers(onGroups, onMember == null ? null : onMember.split(","));
+      Set<DistributedMember> membersToCreateGatewaySenderOn =
+          CliUtil.findAllMatchingMembers(onGroups, onMember == null ? null : onMember.split(","));
-      ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs, membersToCreateGatewaySenderOn);
+      ResultCollector<?, ?> resultCollector =
+          CliUtil.executeFunction(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs,
+              membersToCreateGatewaySenderOn);
-      List<CliFunctionResult> gatewaySenderCreateResults = (List<CliFunctionResult>) resultCollector.getResult();
+      List<CliFunctionResult> gatewaySenderCreateResults =
+          (List<CliFunctionResult>) resultCollector.getResult();
-        boolean success  = gatewaySenderCreateResult.isSuccessful();
+        boolean success = gatewaySenderCreateResult.isSuccessful();
-        tabularResultData.accumulate("Status", (success ? "" : errorPrefix) + gatewaySenderCreateResult.getMessage());
+        tabularResultData.accumulate("Status",
+            (success ? "" : errorPrefix) + gatewaySenderCreateResult.getMessage());
-      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, onGroups));
+      result
+          .setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, onGroups));
-  public Result startGatewaySender(
-      @CliOption(key = CliStrings.START_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  public Result startGatewaySender(@CliOption(key = CliStrings.START_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.START_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.START_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.START_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.START_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      final SystemManagementService service = (SystemManagementService)ManagementService
-          .getExistingManagementService(cache);
+      final SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      Set<DistributedMember> dsMembers = CliUtil.findAllMatchingMembers(
-          onGroup, onMember);
+      Set<DistributedMember> dsMembers = CliUtil.findAllMatchingMembers(onGroup, onMember);
-      ExecutorService execService = Executors
-          .newCachedThreadPool(new ThreadFactory() {
-            AtomicInteger threadNum = new AtomicInteger();
+      ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
+        AtomicInteger threadNum = new AtomicInteger();
-            public Thread newThread(final Runnable r) {
-              Thread result = new Thread(r, "Start Sender Command Thread "
-                  + threadNum.incrementAndGet());
-              result.setDaemon(true);
-              return result;
-            }
-          });
+        public Thread newThread(final Runnable r) {
+          Thread result =
+              new Thread(r, "Start Sender Command Thread " + threadNum.incrementAndGet());
+          result.setDaemon(true);
+          return result;
+        }
+      });
-            }
-            else {
-              ObjectName objectName = service.getGatewaySenderMBeanName(member,
-                  id);
-              bean = service.getMBeanProxy(objectName,
-                  GatewaySenderMXBean.class);
+            } else {
+              ObjectName objectName = service.getGatewaySenderMBeanName(member, id);
+              bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-                statusList.add(CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_ALREADY_STARTED_ON_MEMBER_1,
-                    new Object[] { id, member.getId() }));
-              }
-              else {
+                statusList.add(
+                    CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_ALREADY_STARTED_ON_MEMBER_1,
+                        new Object[] {id, member.getId()}));
+              } else {
-                statusList.add(CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_STARTED_ON_MEMBER_1,
-                    new Object[] { id, member.getId() }));
+                statusList.add(CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_STARTED_ON_MEMBER_1,
+                    new Object[] {id, member.getId()}));
-            }
-            else {
+            } else {
-              statusList.add(CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-                  new Object[] { id, member.getId() }));
+              statusList
+                  .add(CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+                      new Object[] {id, member.getId()}));
-      }
-      catch (InterruptedException ite) {
-        accumulateStartResult(resultData, null,
-            CliStrings.GATEWAY_ERROR, CliStrings.format(
-                CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_INVOKED_DUE_TO_1,
-                new Object[] { id, ite.getMessage() }));
+      } catch (InterruptedException ite) {
+        accumulateStartResult(resultData, null, CliStrings.GATEWAY_ERROR,
+            CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_INVOKED_DUE_TO_1,
+                new Object[] {id, ite.getMessage()}));
-          accumulateStartResult(resultData, memberStatus.get(0),
-              memberStatus.get(1), memberStatus.get(2));
-        }
-        catch (InterruptedException ite) {
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
-                  new Object[] { id, ite.getMessage() }));
+          accumulateStartResult(resultData, memberStatus.get(0), memberStatus.get(1),
+              memberStatus.get(2));
+        } catch (InterruptedException ite) {
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
+                  new Object[] {id, ite.getMessage()}));
-        }
-        catch (ExecutionException ee) {
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
-                  new Object[] { id, ee.getMessage() }));
+        } catch (ExecutionException ee) {
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
+                  new Object[] {id, ee.getMessage()}));
-    }
-    catch (CommandResultException crex) {
+    } catch (CommandResultException crex) {
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  public Result pauseGatewaySender(
-      @CliOption(key = CliStrings.PAUSE_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  public Result pauseGatewaySender(@CliOption(key = CliStrings.PAUSE_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.PAUSE_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",")  String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.PAUSE_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.PAUSE_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.PAUSE_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-//    if (memberNameOrId != null)
-//      memberNameOrId = memberNameOrId.trim();
-//
-//    if (memberNameOrId != null && onGroup != null) {
-//      return ResultBuilder
-//          .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
-//    }
+    // if (memberNameOrId != null)
+    // memberNameOrId = memberNameOrId.trim();
+    //
+    // if (memberNameOrId != null && onGroup != null) {
+    // return ResultBuilder
+    // .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
+    // }
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-            member.getId())) {
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-              accumulateStartResult(
-                  resultData,
-                  member.getId(),
-                  CliStrings.GATEWAY_ERROR,
-                  CliStrings
-                      .format(
-                          CliStrings.GATEWAY_SENDER_0_IS_ALREADY_PAUSED_ON_MEMBER_1,
-                          new Object[] { senderId, member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                  CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_ALREADY_PAUSED_ON_MEMBER_1,
+                      new Object[] {senderId, member.getId()}));
-              accumulateStartResult(resultData, member.getId(),
-                  CliStrings.GATEWAY_OK, CliStrings.format(
-                      CliStrings.GATEWAY_SENDER_0_IS_PAUSED_ON_MEMBER_1,
-                      new Object[] { senderId, member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                  CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_PAUSED_ON_MEMBER_1,
+                      new Object[] {senderId, member.getId()}));
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_ERROR, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-                  new Object[] { senderId, member.getId() }));
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+                  new Object[] {senderId, member.getId()}));
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  @ResourceOperation(resource=Resource.DATA, operation = Operation.MANAGE)
-  public Result resumeGatewaySender(
-      @CliOption(key = CliStrings.RESUME_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  public Result resumeGatewaySender(@CliOption(key = CliStrings.RESUME_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.RESUME_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.RESUME_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.RESUME_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.RESUME_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-//    if (memberNameOrId != null)
-//      memberNameOrId = memberNameOrId.trim();
-//
-//    if (memberNameOrId != null && onGroup != null) {
-//      return ResultBuilder
-//          .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
-//    }
+    // if (memberNameOrId != null)
+    // memberNameOrId = memberNameOrId.trim();
+    //
+    // if (memberNameOrId != null && onGroup != null) {
+    // return ResultBuilder
+    // .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
+    // }
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-//
-//      if (memberNameOrId != null && memberNameOrId.length() > 0) {
-//        InfoResultData resultData = ResultBuilder.createInfoResultData();
-//        DistributedMember memberToBeInvoked = CliUtil
-//            .getDistributedMemberByNameOrId(memberNameOrId);
-//
-//        if (memberToBeInvoked != null) {
-//          String memberId = memberToBeInvoked.getId();
-//          if (cache.getDistributedSystem().getDistributedMember().getId()
-//              .equals(memberId)) {
-//            bean = service.getLocalGatewaySenderMXBean(senderId);
-//          } else {
-//            ObjectName objectName = service.getGatewaySenderMBeanName(memberToBeInvoked,
-//                senderId);
-//            bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-//          }
-//          if (bean != null) {
-//            if (bean.isRunning()) {
-//              if (bean.isPaused()) {
-//                bean.resume();
-//                resultData.addLine(CliStrings.format(
-//                    CliStrings.GATEWAY_SENDER_0_IS_RESUMED_ON_MEMBER_1,
-//                    new Object[] { senderId, memberId }));
-//                return ResultBuilder.buildResult(resultData);
-//              }
-//              resultData.addLine(CliStrings.format(
-//                  CliStrings.GATEWAY_SENDER_0_IS_NOT_PAUSED_ON_MEMBER_1,
-//                  new Object[] { senderId, memberId }));
-//              return ResultBuilder.buildResult(resultData);
-//            }
-//            resultData.addLine(CliStrings.format(
-//                CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
-//                new Object[] { senderId, memberId }));
-//            return ResultBuilder.buildResult(resultData);
-//          }
-//          return ResultBuilder.createBadConfigurationErrorResult(CliStrings
-//              .format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-//                  new Object[] { senderId, memberId }));
-//        }
-//        return ResultBuilder.createUserErrorResult(CliStrings.format(
-//            CliStrings.GATEWAY_MSG_MEMBER_0_NOT_FOUND,
-//            new Object[] { memberNameOrId }));
-//      }
+      //
+      // if (memberNameOrId != null && memberNameOrId.length() > 0) {
+      // InfoResultData resultData = ResultBuilder.createInfoResultData();
+      // DistributedMember memberToBeInvoked = CliUtil
+      // .getDistributedMemberByNameOrId(memberNameOrId);
+      //
+      // if (memberToBeInvoked != null) {
+      // String memberId = memberToBeInvoked.getId();
+      // if (cache.getDistributedSystem().getDistributedMember().getId()
+      // .equals(memberId)) {
+      // bean = service.getLocalGatewaySenderMXBean(senderId);
+      // } else {
+      // ObjectName objectName = service.getGatewaySenderMBeanName(memberToBeInvoked,
+      // senderId);
+      // bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
+      // }
+      // if (bean != null) {
+      // if (bean.isRunning()) {
+      // if (bean.isPaused()) {
+      // bean.resume();
+      // resultData.addLine(CliStrings.format(
+      // CliStrings.GATEWAY_SENDER_0_IS_RESUMED_ON_MEMBER_1,
+      // new Object[] { senderId, memberId }));
+      // return ResultBuilder.buildResult(resultData);
+      // }
+      // resultData.addLine(CliStrings.format(
+      // CliStrings.GATEWAY_SENDER_0_IS_NOT_PAUSED_ON_MEMBER_1,
+      // new Object[] { senderId, memberId }));
+      // return ResultBuilder.buildResult(resultData);
+      // }
+      // resultData.addLine(CliStrings.format(
+      // CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
+      // new Object[] { senderId, memberId }));
+      // return ResultBuilder.buildResult(resultData);
+      // }
+      // return ResultBuilder.createBadConfigurationErrorResult(CliStrings
+      // .format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+      // new Object[] { senderId, memberId }));
+      // }
+      // return ResultBuilder.createUserErrorResult(CliStrings.format(
+      // CliStrings.GATEWAY_MSG_MEMBER_0_NOT_FOUND,
+      // new Object[] { memberNameOrId }));
+      // }
-//      if (onGroup != null && onGroup.length > 0) {
-//        dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
-//      } else {
-//        dsMembers = CliUtil.getAllNormalMembers(cache);
-//      }
-//      if (dsMembers.isEmpty()) {
-//        return ResultBuilder
-//            .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
-//      }
+      // if (onGroup != null && onGroup.length > 0) {
+      // dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
+      // } else {
+      // dsMembers = CliUtil.getAllNormalMembers(cache);
+      // }
+      // if (dsMembers.isEmpty()) {
+      // return ResultBuilder
+      // .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
+      // }
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-            member.getId())) {
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-              accumulateStartResult(resultData, member.getId(),
-                  CliStrings.GATEWAY_OK, CliStrings.format(
-                      CliStrings.GATEWAY_SENDER_0_IS_RESUMED_ON_MEMBER_1,
-                      new Object[] { senderId, member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                  CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_RESUMED_ON_MEMBER_1,
+                      new Object[] {senderId, member.getId()}));
-              accumulateStartResult(resultData, member.getId(),
-                  CliStrings.GATEWAY_ERROR, CliStrings.format(
-                      CliStrings.GATEWAY_SENDER_0_IS_NOT_PAUSED_ON_MEMBER_1,
-                      new Object[] { senderId, member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                  CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_PAUSED_ON_MEMBER_1,
+                      new Object[] {senderId, member.getId()}));
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_ERROR, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-                  new Object[] { senderId, member.getId() }));
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+                  new Object[] {senderId, member.getId()}));
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  public Result stopGatewaySender(
-      @CliOption(key = CliStrings.STOP_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  public Result stopGatewaySender(@CliOption(key = CliStrings.STOP_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.STOP_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.STOP_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.STOP_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.STOP_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-            member.getId())) {
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_OK, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_STOPPED_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_STOPPED_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_ERROR, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-                  new Object[] { senderId, member.getId() }));
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+                  new Object[] {senderId, member.getId()}));
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  @CliCommand(value = CliStrings.CREATE_GATEWAYRECEIVER, help = CliStrings.CREATE_GATEWAYRECEIVER__HELP)
+  @CliCommand(value = CliStrings.CREATE_GATEWAYRECEIVER,
+      help = CliStrings.CREATE_GATEWAYRECEIVER__HELP)
-  @ResourceOperation( resource=Resource.DATA, operation = Operation.MANAGE)
-  public Result createGatewayReceiver(
-      @CliOption(key = CliStrings.CREATE_GATEWAYRECEIVER__GROUP,
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  public Result createGatewayReceiver(@CliOption(key = CliStrings.CREATE_GATEWAYRECEIVER__GROUP,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String[] onGroups,
+      help = CliStrings.CREATE_GATEWAYRECEIVER__GROUP__HELP) @CliMetaData(
+          valueSeparator = ",") String[] onGroups,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__MANUALSTART__HELP) Boolean manualStart,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__MANUALSTART__HELP) Boolean manualStart,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__STARTPORT__HELP) Integer startPort,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__STARTPORT__HELP) Integer startPort,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__ENDPORT__HELP) Integer endPort,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__ENDPORT__HELP) Integer endPort,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__BINDADDRESS__HELP) String bindAddress,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__BINDADDRESS__HELP) String bindAddress,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__MAXTIMEBETWEENPINGS__HELP) Integer maximumTimeBetweenPings,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__MAXTIMEBETWEENPINGS__HELP) Integer maximumTimeBetweenPings,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__SOCKETBUFFERSIZE__HELP) Integer socketBufferSize,
+          help = CliStrings.CREATE_GATEWAYRECEIVER__SOCKETBUFFERSIZE__HELP) Integer socketBufferSize,
-      help = CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] gatewayTransportFilters) {
+          help = CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER__HELP) @CliMetaData(
+              valueSeparator = ",") String[] gatewayTransportFilters) {
-      GatewayReceiverFunctionArgs gatewayReceiverFunctionArgs = new GatewayReceiverFunctionArgs(manualStart, startPort, endPort, bindAddress,
-          socketBufferSize, maximumTimeBetweenPings, gatewayTransportFilters);
+      GatewayReceiverFunctionArgs gatewayReceiverFunctionArgs =
+          new GatewayReceiverFunctionArgs(manualStart, startPort, endPort, bindAddress,
+              socketBufferSize, maximumTimeBetweenPings, gatewayTransportFilters);
-      Set<DistributedMember> membersToCreateGatewayReceiverOn = CliUtil.findAllMatchingMembers(onGroups, onMember == null ? null : onMember.split(","));
+      Set<DistributedMember> membersToCreateGatewayReceiverOn =
+          CliUtil.findAllMatchingMembers(onGroups, onMember == null ? null : onMember.split(","));
-      ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(GatewayReceiverCreateFunction.INSTANCE,
-          gatewayReceiverFunctionArgs, membersToCreateGatewayReceiverOn);
+      ResultCollector<?, ?> resultCollector =
+          CliUtil.executeFunction(GatewayReceiverCreateFunction.INSTANCE,
+              gatewayReceiverFunctionArgs, membersToCreateGatewayReceiverOn);
-      List<CliFunctionResult> gatewayReceiverCreateResults = (List<CliFunctionResult>) resultCollector.getResult();
+      List<CliFunctionResult> gatewayReceiverCreateResults =
+          (List<CliFunctionResult>) resultCollector.getResult();
-        tabularResultData.accumulate("Status", (success ? "" : errorPrefix) + gatewayReceiverCreateResult.getMessage());
+        tabularResultData.accumulate("Status",
+            (success ? "" : errorPrefix) + gatewayReceiverCreateResult.getMessage());
-    }
-    catch (CommandResultException crex) {
+    } catch (CommandResultException crex) {
-      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, onGroups));
+      result
+          .setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, onGroups));
-  @CliCommand(value = CliStrings.LOAD_BALANCE_GATEWAYSENDER, help = CliStrings.LOAD_BALANCE_GATEWAYSENDER__HELP)
+  @CliCommand(value = CliStrings.LOAD_BALANCE_GATEWAYSENDER,
+      help = CliStrings.LOAD_BALANCE_GATEWAYSENDER__HELP)
-  public Result loadBalanceGatewaySender(
-      @CliOption(key = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  public Result loadBalanceGatewaySender(@CliOption(key = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-          if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-              member.getId())) {
+          if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_OK, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_REBALANCED_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_REBALANCED_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_ERROR, CliStrings.format(
-                    CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-                    new Object[] { senderId, member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+                    new Object[] {senderId, member.getId()}));
-              CliStrings.GATEWAY_SENDER_0_IS_NOT_FOUND_ON_ANY_MEMBER,
-              new Object[] { senderId }));
+              CliStrings.GATEWAY_SENDER_0_IS_NOT_FOUND_ON_ANY_MEMBER, new Object[] {senderId}));
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  @CliCommand(value = CliStrings.START_GATEWAYRECEIVER, help = CliStrings.START_GATEWAYRECEIVER__HELP)
+  @CliCommand(value = CliStrings.START_GATEWAYRECEIVER,
+      help = CliStrings.START_GATEWAYRECEIVER__HELP)
-  public Result startGatewayReceiver(
-      @CliOption(key = CliStrings.START_GATEWAYRECEIVER__GROUP,
+  public Result startGatewayReceiver(@CliOption(key = CliStrings.START_GATEWAYRECEIVER__GROUP,
-      help = CliStrings.START_GATEWAYRECEIVER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",")  String onGroup,
+      help = CliStrings.START_GATEWAYRECEIVER__GROUP__HELP) @CliMetaData(
+          valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.START_GATEWAYRECEIVER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.START_GATEWAYRECEIVER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      SystemManagementService service = (SystemManagementService) ManagementService.getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-          receieverBean = service.getMBeanProxy(gatewayReceiverObjectName, GatewayReceiverMXBean.class);
+          receieverBean =
+              service.getMBeanProxy(gatewayReceiverObjectName, GatewayReceiverMXBean.class);
-              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_RECEIVER_IS_ALREADY_STARTED_ON_MEMBER_0, new Object[] { member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                  CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_ALREADY_STARTED_ON_MEMBER_0,
+                      new Object[] {member.getId()}));
-              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK, CliStrings.format(
-                  CliStrings.GATEWAY_RECEIVER_IS_STARTED_ON_MEMBER_0, new Object[] { member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                  CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_STARTED_ON_MEMBER_0,
+                      new Object[] {member.getId()}));
-            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR, CliStrings.format(
-                CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0, new Object[] { member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
+                    new Object[] {member.getId()}));
-          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR, CliStrings.format(
-              CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0, new Object[] { member.getId() }));
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
+                  new Object[] {member.getId()}));
-    }
-    catch (CommandResultException crex) {
+    } catch (CommandResultException crex) {
-    }
-    catch (Exception e) {
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+    } catch (Exception e) {
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.STOP_GATEWAYRECEIVER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.STOP_GATEWAYRECEIVER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.STOP_GATEWAYRECEIVER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.STOP_GATEWAYRECEIVER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter
-            .getGatewayReceiverMBeanName(member);
+        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter.getGatewayReceiverMBeanName(member);
-          receieverBean = service.getMBeanProxy(gatewayReceiverObjectName,
-              GatewayReceiverMXBean.class);
+          receieverBean =
+              service.getMBeanProxy(gatewayReceiverObjectName, GatewayReceiverMXBean.class);
-              accumulateStartResult(resultData, member.getId(),
-                  CliStrings.GATEWAY_OK, CliStrings.format(
-                      CliStrings.GATEWAY_RECEIVER_IS_STOPPED_ON_MEMBER_0,
-                      new Object[] { member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_OK,
+                  CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_STOPPED_ON_MEMBER_0,
+                      new Object[] {member.getId()}));
-              accumulateStartResult(resultData, member.getId(),
-                  CliStrings.GATEWAY_ERROR, CliStrings.format(
-                      CliStrings.GATEWAY_RECEIVER_IS_NOT_RUNNING_ON_MEMBER_0,
-                      new Object[] { member.getId() }));
+              accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                  CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_NOT_RUNNING_ON_MEMBER_0,
+                      new Object[] {member.getId()}));
-            accumulateStartResult(resultData, member.getId(),
-                CliStrings.GATEWAY_ERROR, CliStrings.format(
-                    CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
-                    new Object[] { member.getId() }));
+            accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+                CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
+                    new Object[] {member.getId()}));
-          accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR, CliStrings.format(
-                  CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
-                  new Object[] { member.getId() }));
+          accumulateStartResult(resultData, member.getId(), CliStrings.GATEWAY_ERROR,
+              CliStrings.format(CliStrings.GATEWAY_RECEIVER_IS_NOT_AVAILABLE_ON_MEMBER_0,
+                  new Object[] {member.getId()}));
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-      @CliOption(key = CliStrings.LIST_GATEWAY__MEMBER,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.LIST_GATEWAY__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember,
-      @CliOption(key = CliStrings.LIST_GATEWAY__GROUP,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.LIST_GATEWAY__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup) {
+      @CliOption(key = CliStrings.LIST_GATEWAY__MEMBER, optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.LIST_GATEWAY__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember,
+      @CliOption(key = CliStrings.LIST_GATEWAY__GROUP, optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.LIST_GATEWAY__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup) {
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-//      if (onGroup != null && onGroup.length > 0) {
-//        dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
-//      } else {
-//        dsMembers = CliUtil.getAllNormalMembers(cache);
-//      }
-//      if (dsMembers.isEmpty()) {
-//        return ResultBuilder
-//            .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
-//      }
+      // if (onGroup != null && onGroup.length > 0) {
+      // dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
+      // } else {
+      // dsMembers = CliUtil.getAllNormalMembers(cache);
+      // }
+      // if (dsMembers.isEmpty()) {
+      // return ResultBuilder
+      // .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
+      // }
-      Map<String, Map<String, GatewaySenderMXBean>> gatewaySenderBeans = new TreeMap<String, Map<String, GatewaySenderMXBean>>();
-      Map<String, GatewayReceiverMXBean> gatewayReceiverBeans = new TreeMap<String, GatewayReceiverMXBean>();
+      Map<String, Map<String, GatewaySenderMXBean>> gatewaySenderBeans =
+          new TreeMap<String, Map<String, GatewaySenderMXBean>>();
+      Map<String, GatewayReceiverMXBean> gatewayReceiverBeans =
+          new TreeMap<String, GatewayReceiverMXBean>();
-        String memberNameOrId = (memberName != null  && !memberName.isEmpty())? memberName : member.getId();
-        ObjectName gatewaySenderObjectNames[] = dsMXBean
-            .listGatewaySenderObjectNames(memberNameOrId);
+        String memberNameOrId =
+            (memberName != null && !memberName.isEmpty()) ? memberName : member.getId();
+        ObjectName gatewaySenderObjectNames[] =
+            dsMXBean.listGatewaySenderObjectNames(memberNameOrId);
-            GatewaySenderMXBean senderBean = service.getMBeanProxy(name,
-                GatewaySenderMXBean.class);
+            GatewaySenderMXBean senderBean = service.getMBeanProxy(name, GatewaySenderMXBean.class);
-                Map<String, GatewaySenderMXBean> memberToBeanMap = gatewaySenderBeans
-                    .get(senderBean.getSenderId());
+                Map<String, GatewaySenderMXBean> memberToBeanMap =
+                    gatewaySenderBeans.get(senderBean.getSenderId());
-                Map<String, GatewaySenderMXBean> memberToBeanMap = new TreeMap<String, GatewaySenderMXBean>();
+                Map<String, GatewaySenderMXBean> memberToBeanMap =
+                    new TreeMap<String, GatewaySenderMXBean>();
-                gatewaySenderBeans.put(senderBean.getSenderId(),
-                    memberToBeanMap);
+                gatewaySenderBeans.put(senderBean.getSenderId(), memberToBeanMap);
-        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter
-            .getGatewayReceiverMBeanName(member);
+        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter.getGatewayReceiverMBeanName(member);
-          receieverBean = service.getMBeanProxy(gatewayReceiverObjectName,
-              GatewayReceiverMXBean.class);
+          receieverBean =
+              service.getMBeanProxy(gatewayReceiverObjectName, GatewayReceiverMXBean.class);
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  public Result statusGatewaySender(
-      @CliOption(key = CliStrings.STATUS_GATEWAYSENDER__ID,
-      mandatory = true,
-      optionContext = ConverterHint.GATEWAY_SENDER_ID,
+  public Result statusGatewaySender(@CliOption(key = CliStrings.STATUS_GATEWAYSENDER__ID,
+      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.STATUS_GATEWAYSENDER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String onGroup,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.STATUS_GATEWAYSENDER__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.STATUS_GATEWAYSENDER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.STATUS_GATEWAYSENDER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      TabularResultData availableSenderData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_SENDER_AVAILABLE).addTable(
-          CliStrings.TABLE_GATEWAY_SENDER);
+      TabularResultData availableSenderData =
+          crd.addSection(CliStrings.SECTION_GATEWAY_SENDER_AVAILABLE)
+              .addTable(CliStrings.TABLE_GATEWAY_SENDER);
-      TabularResultData notAvailableSenderData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_SENDER_NOT_AVAILABLE).addTable(
-          CliStrings.TABLE_GATEWAY_SENDER);
+      TabularResultData notAvailableSenderData =
+          crd.addSection(CliStrings.SECTION_GATEWAY_SENDER_NOT_AVAILABLE)
+              .addTable(CliStrings.TABLE_GATEWAY_SENDER);
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-            member.getId())) {
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  @CliCommand(value = CliStrings.STATUS_GATEWAYRECEIVER, help = CliStrings.STATUS_GATEWAYRECEIVER__HELP)
+  @CliCommand(value = CliStrings.STATUS_GATEWAYRECEIVER,
+      help = CliStrings.STATUS_GATEWAYRECEIVER__HELP)
-  public Result statusGatewayReceiver(
-      @CliOption(key = CliStrings.STATUS_GATEWAYRECEIVER__GROUP,
+  public Result statusGatewayReceiver(@CliOption(key = CliStrings.STATUS_GATEWAYRECEIVER__GROUP,
-      help = CliStrings.STATUS_GATEWAYRECEIVER__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",")  String onGroup,
+      help = CliStrings.STATUS_GATEWAYRECEIVER__GROUP__HELP) @CliMetaData(
+          valueSeparator = ",") String onGroup,
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.STATUS_GATEWAYRECEIVER__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",") String onMember) {
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.STATUS_GATEWAYRECEIVER__MEMBER__HELP) @CliMetaData(
+              valueSeparator = ",") String onMember) {
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      TabularResultData availableReceiverData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_RECEIVER_AVAILABLE).addTable(
-          CliStrings.TABLE_GATEWAY_RECEIVER);
+      TabularResultData availableReceiverData =
+          crd.addSection(CliStrings.SECTION_GATEWAY_RECEIVER_AVAILABLE)
+              .addTable(CliStrings.TABLE_GATEWAY_RECEIVER);
-      TabularResultData notAvailableReceiverData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_RECEIVER_NOT_AVAILABLE).addTable(
-          CliStrings.TABLE_GATEWAY_RECEIVER);
+      TabularResultData notAvailableReceiverData =
+          crd.addSection(CliStrings.SECTION_GATEWAY_RECEIVER_NOT_AVAILABLE)
+              .addTable(CliStrings.TABLE_GATEWAY_RECEIVER);
-        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter
-            .getGatewayReceiverMBeanName(member);
+        ObjectName gatewayReceiverObjectName = MBeanJMXAdapter.getGatewayReceiverMBeanName(member);
-          GatewayReceiverMXBean receieverBean = service.getMBeanProxy(
-              gatewayReceiverObjectName, GatewayReceiverMXBean.class);
+          GatewayReceiverMXBean receieverBean =
+              service.getMBeanProxy(gatewayReceiverObjectName, GatewayReceiverMXBean.class);
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + e.getMessage());
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
-  private TabularResultData buildReceiverStatus(String memberId,
-      GatewayReceiverMXBean bean, TabularResultData resultData) {
+  private TabularResultData buildReceiverStatus(String memberId, GatewayReceiverMXBean bean,
+      TabularResultData resultData) {
-          bean.isRunning() ? CliStrings.GATEWAY_RUNNING
-              : CliStrings.GATEWAY_NOT_RUNNING);
+          bean.isRunning() ? CliStrings.GATEWAY_RUNNING : CliStrings.GATEWAY_NOT_RUNNING);
-  private TabularResultData buildSenderStatus(String memberId,
-      GatewaySenderMXBean bean, TabularResultData resultData) {
+  private TabularResultData buildSenderStatus(String memberId, GatewaySenderMXBean bean,
+      TabularResultData resultData) {
-          bean.isParallel() ? CliStrings.SENDER_PARALLEL
-              : CliStrings.SENDER_SERIAL);
+          bean.isParallel() ? CliStrings.SENDER_PARALLEL : CliStrings.SENDER_SERIAL);
-            bean.isPrimary() ? CliStrings.SENDER_PRIMARY
-                : CliStrings.SENDER_SECONADRY);
+            bean.isPrimary() ? CliStrings.SENDER_PRIMARY : CliStrings.SENDER_SECONADRY);
-          resultData.accumulate(CliStrings.RESULT_STATUS,
-              CliStrings.SENDER_PAUSED);
+          resultData.accumulate(CliStrings.RESULT_STATUS, CliStrings.SENDER_PAUSED);
-          resultData.accumulate(CliStrings.RESULT_STATUS,
-              CliStrings.GATEWAY_RUNNING);
+          resultData.accumulate(CliStrings.RESULT_STATUS, CliStrings.GATEWAY_RUNNING);
-        resultData.accumulate(CliStrings.RESULT_STATUS,
-            CliStrings.GATEWAY_NOT_RUNNING);
+        resultData.accumulate(CliStrings.RESULT_STATUS, CliStrings.GATEWAY_NOT_RUNNING);
-      resultData.accumulate(CliStrings.GATEWAY_ERROR,
-          CliStrings.GATEWAY_SENDER_IS_NOT_AVAILABLE);
+      resultData.accumulate(CliStrings.GATEWAY_ERROR, CliStrings.GATEWAY_SENDER_IS_NOT_AVAILABLE);
-  //  
+  //
-  //  
+  //
-      TabularResultData gatewaySenderData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_SENDER).addTable(
-          CliStrings.TABLE_GATEWAY_SENDER).setHeader(
-          CliStrings.HEADER_GATEWAY_SENDER);
+      TabularResultData gatewaySenderData = crd.addSection(CliStrings.SECTION_GATEWAY_SENDER)
+          .addTable(CliStrings.TABLE_GATEWAY_SENDER).setHeader(CliStrings.HEADER_GATEWAY_SENDER);
-        for (Map.Entry<String, GatewaySenderMXBean> memberToBean : entry
-            .getValue().entrySet()) {
-          gatewaySenderData.accumulate(CliStrings.RESULT_GATEWAY_SENDER_ID,
-              entry.getKey());
-          gatewaySenderData.accumulate(CliStrings.RESULT_HOST_MEMBER,
-              memberToBean.getKey());
+        for (Map.Entry<String, GatewaySenderMXBean> memberToBean : entry.getValue().entrySet()) {
+          gatewaySenderData.accumulate(CliStrings.RESULT_GATEWAY_SENDER_ID, entry.getKey());
+          gatewaySenderData.accumulate(CliStrings.RESULT_HOST_MEMBER, memberToBean.getKey());
-          gatewaySenderData.accumulate(CliStrings.RESULT_TYPE, memberToBean
-              .getValue().isParallel() ? CliStrings.SENDER_PARALLEL
-              : CliStrings.SENDER_SERIAL);
-          gatewaySenderData.accumulate(CliStrings.RESULT_STATUS, memberToBean
-              .getValue().isRunning() ? CliStrings.GATEWAY_RUNNING
-              : CliStrings.GATEWAY_NOT_RUNNING);
+          gatewaySenderData.accumulate(CliStrings.RESULT_TYPE, memberToBean.getValue().isParallel()
+              ? CliStrings.SENDER_PARALLEL : CliStrings.SENDER_SERIAL);
+          gatewaySenderData.accumulate(CliStrings.RESULT_STATUS, memberToBean.getValue().isRunning()
+              ? CliStrings.GATEWAY_RUNNING : CliStrings.GATEWAY_NOT_RUNNING);
-          gatewaySenderData.accumulate(CliStrings.RESULT_RECEIVER, memberToBean
-              .getValue().getGatewayReceiver());
+          gatewaySenderData.accumulate(CliStrings.RESULT_RECEIVER,
+              memberToBean.getValue().getGatewayReceiver());
-      TabularResultData gatewayReceiverData = crd.addSection(
-          CliStrings.SECTION_GATEWAY_RECEIVER).addTable(
-          CliStrings.TABLE_GATEWAY_RECEIVER).setHeader(
-          CliStrings.HEADER_GATEWAY_RECEIVER);
-      for (Map.Entry<String, GatewayReceiverMXBean> entry : gatewayReceiverBeans
-          .entrySet()) {
-        gatewayReceiverData.accumulate(CliStrings.RESULT_HOST_MEMBER, entry
-            .getKey());
-        gatewayReceiverData.accumulate(CliStrings.RESULT_PORT, entry.getValue()
-            .getPort());
-        gatewayReceiverData.accumulate(CliStrings.RESULT_SENDERS_COUNT, entry
-            .getValue().getClientConnectionCount());
+      TabularResultData gatewayReceiverData = crd.addSection(CliStrings.SECTION_GATEWAY_RECEIVER)
+          .addTable(CliStrings.TABLE_GATEWAY_RECEIVER)
+          .setHeader(CliStrings.HEADER_GATEWAY_RECEIVER);
+      for (Map.Entry<String, GatewayReceiverMXBean> entry : gatewayReceiverBeans.entrySet()) {
+        gatewayReceiverData.accumulate(CliStrings.RESULT_HOST_MEMBER, entry.getKey());
+        gatewayReceiverData.accumulate(CliStrings.RESULT_PORT, entry.getValue().getPort());
+        gatewayReceiverData.accumulate(CliStrings.RESULT_SENDERS_COUNT,
+            entry.getValue().getClientConnectionCount());
-  private void accumulateStartResult(TabularResultData resultData,
-      String member, String Status, String message) {
+  private void accumulateStartResult(TabularResultData resultData, String member, String Status,
+      String message) {
-  @CliAvailabilityIndicator( { CliStrings.CREATE_GATEWAYSENDER,
-      CliStrings.START_GATEWAYSENDER, CliStrings.PAUSE_GATEWAYSENDER,
-      CliStrings.RESUME_GATEWAYSENDER, CliStrings.STOP_GATEWAYSENDER,
-      CliStrings.CREATE_GATEWAYRECEIVER, CliStrings.START_GATEWAYRECEIVER,
-      CliStrings.STOP_GATEWAYRECEIVER, CliStrings.LIST_GATEWAY,
+  @CliAvailabilityIndicator({CliStrings.CREATE_GATEWAYSENDER, CliStrings.START_GATEWAYSENDER,
+      CliStrings.PAUSE_GATEWAYSENDER, CliStrings.RESUME_GATEWAYSENDER,
+      CliStrings.STOP_GATEWAYSENDER, CliStrings.CREATE_GATEWAYRECEIVER,
+      CliStrings.START_GATEWAYRECEIVER, CliStrings.STOP_GATEWAYRECEIVER, CliStrings.LIST_GATEWAY,
-      CliStrings.LOAD_BALANCE_GATEWAYSENDER })
+      CliStrings.LOAD_BALANCE_GATEWAYSENDER})
-    }
-    else {
-      LogWrapper.getInstance().warning(
-          CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(crex));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR
-          + crex.getMessage());
+    } else {
+      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(crex));
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + crex.getMessage());

