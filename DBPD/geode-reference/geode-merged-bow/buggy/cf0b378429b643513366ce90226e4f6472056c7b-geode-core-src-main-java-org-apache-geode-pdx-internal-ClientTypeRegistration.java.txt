GEODE-1801: Updated the ClientTypeRegistration.java to handle Snapshot reading on the client side.

-import org.apache.logging.log4j.Logger;
-
-import org.apache.geode.pdx.PdxInitializationException;
+import org.apache.logging.log4j.Logger;
+
-  
+
-  
-  private volatile boolean typeRegistryInUse = false;
-  
+
-    verifyConfiguration(); 
-    
+
-    for(Pool pool: pools) {
+    int newTypeId = -1;
+    for (Pool pool : pools) {
-        int result = GetPDXIdForTypeOp.execute((ExecutablePool) pool, newType);
-        newType.setTypeId(result);
-        sendTypeToAllPools(newType, result, pools, pool);
-        return result;
-      } catch(ServerConnectivityException e) {
+        newTypeId = GetPDXIdForTypeOp.execute((ExecutablePool) pool, newType);
+        newType.setTypeId(newTypeId);
+        sendTypeToAllPools(newType, newTypeId, pool);
+        return newTypeId;
+      } catch (ServerConnectivityException e) {
-    if(lastException != null) {
-      throw lastException;
-    } else {
-      if (this.cache.isClosed()) {
-        throw new CacheClosedException("PDX detected cache was closed");
-      }
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry can not define a type.");
-    }
+    throw returnCorrectExceptionForFailure(pools, newTypeId, lastException);
-  
-  private void sendTypeToAllPools(PdxType type, int id,
-      Collection<Pool> pools, Pool definingPool) {
-    
-    for(Pool pool: pools) {
-      if(pool.equals(definingPool)) {
-        continue;
-      }
-      
-      try {
-        AddPDXTypeOp.execute((ExecutablePool) pool, id, type);
-      } catch(ServerConnectivityException ignore) {
-        logger.debug("Received an exception sending pdx type to pool {}, {}", pool, ignore.getMessage(), ignore);
-        //TODO DAN - is it really safe to ignore this? What if this is the pool
-        //we're about to do a put on? I think maybe we really should pass the context
-        //down to this point, if it is available. Maybe just an optional thread local?
-        //Then we could go straight to that pool to register the type and bail otherwise.
-      }
+
+  private void sendTypeToAllPools(PdxType type, int id, Pool pool) {
+
+    try {
+      AddPDXTypeOp.execute((ExecutablePool) pool, id, type);
+    } catch (ServerConnectivityException ignore) {
+      logger.debug("Received an exception sending pdx type to pool {}, {}", pool, ignore.getMessage(), ignore);
+      //TODO DAN - is it really safe to ignore this? What if this is the pool
+      //we're about to do a put on? I think maybe we really should pass the context
+      //down to this point, if it is available. Maybe just an optional thread local?
+      //Then we could go straight to that pool to register the type and bail otherwise.
-    
-    verifyConfiguration();
-    
+
-    for(Pool pool: pools) {
+    for (Pool pool : pools) {
-        if(type != null) {
+        if (type != null) {
-      } catch(ServerConnectivityException e) {
+      } catch (ServerConnectivityException e) {
-    
-    if(lastException != null) {
+
+    if (lastException != null) {
-      if(pools.isEmpty()) {
+      if (pools.isEmpty()) {
+        } else {
+          throw new CacheClosedException("Client pools have been closed so the PDX type registry can not lookup a type.");
-        throw new CacheClosedException("Client pools have been closed so the PDX type registry can not lookup a type.");
-  
-  private Collection<Pool> getAllPools() {
-    return getAllPools(cache);
-  }
-  
-  private static Collection<Pool> getAllPools(GemFireCacheImpl cache) {
+
+  private static Collection<Pool> getAllPools() {
-    for(Iterator<Pool> itr= pools.iterator(); itr.hasNext(); ) {
+    for (Iterator<Pool> itr = pools.iterator(); itr.hasNext(); ) {
-      if(pool.isUsedByGateway()) {
+      if (pool.isUsedByGateway()) {
-    checkAllowed();
+    //do nothing
-  
+
-    EnumInfo ei = new EnumInfo(v);
-    Collection<Pool> pools = getAllPools();
+    EnumInfo enumInfo = new EnumInfo(v);
+    return processEnumInfoForEnumId(enumInfo);
+  }
+  private int processEnumInfoForEnumId(EnumInfo enumInfo) {
+    Collection<Pool> pools = getAllPools();
-    for(Pool pool: pools) {
+    for (Pool pool : pools) {
-        int result = GetPDXIdForEnumOp.execute((ExecutablePool) pool, ei);
-        sendEnumIdToAllPools(ei, result, pools, pool);
+        int result = GetPDXIdForEnumOp.execute((ExecutablePool) pool, enumInfo);
+        sendEnumIdToAllPools(enumInfo, result, pool);
-      } catch(ServerConnectivityException e) {
+      } catch (ServerConnectivityException e) {
-    if (lastException != null) {
-      throw lastException;
-    } else {
-      if (this.cache.isClosed()) {
-        throw new CacheClosedException("PDX detected cache was closed");
-      }
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry can not define a type.");
-    }
+    throw returnCorrectExceptionForFailure(pools, -1, lastException);
-  
-  private void sendEnumIdToAllPools(EnumInfo enumInfo, int id,
-      Collection<Pool> pools, Pool definingPool) {
-    for (Pool pool: pools) {
-      if (pool.equals(definingPool)) {
-        continue;
-      }
-
-      try {
-        AddPDXEnumOp.execute((ExecutablePool) pool, id, enumInfo);
-      } catch(ServerConnectivityException ignore) {
-        logger.debug("Received an exception sending pdx type to pool {}, {}", pool, ignore.getMessage(), ignore);
-        //TODO DAN - is it really safe to ignore this? What if this is the pool
-        //we're about to do a put on? I think maybe we really should pass the context
-        //down to this point, if it is available. Maybe just an optional thread local?
-        //Then we could go straight to that pool to register the type and bail otherwise.
-      }
+  private void sendEnumIdToAllPools(EnumInfo enumInfo, int id, Pool pool) {
+    try {
+      AddPDXEnumOp.execute((ExecutablePool) pool, id, enumInfo);
+    } catch (ServerConnectivityException ignore) {
+      logger.debug("Received an exception sending pdx type to pool {}, {}", pool, ignore.getMessage(), ignore);
+      //TODO DAN - is it really safe to ignore this? What if this is the pool
+      //we're about to do a put on? I think maybe we really should pass the context
+      //down to this point, if it is available. Maybe just an optional thread local?
+      //Then we could go straight to that pool to register the type and bail otherwise.
-    Collection<Pool> pools = getAllPools();
-    
-    ServerConnectivityException lastException = null;
-    for(Pool pool: pools) {
-      try {
-        int result = GetPDXIdForEnumOp.execute((ExecutablePool) pool, newInfo);
-        sendEnumIdToAllPools(newInfo, result, pools, pool);
-        return result;
-      } catch(ServerConnectivityException e) {
-        //ignore, try the next pool.
-        lastException = e;
-      }
-    }
-    
-    
-    if(lastException != null) {
-      throw lastException;
-    } else {
-      if (this.cache.isClosed()) {
-        throw new CacheClosedException("PDX detected cache was closed");
-      }
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry can not define a type.");
-    }
-   }
+    return processEnumInfoForEnumId(newInfo);
+  }
-    
+
-    for(Pool pool: pools) {
+    for (Pool pool : pools) {
-        if(result != null) {
+        if (result != null) {
-      } catch(ServerConnectivityException e) {
+      } catch (ServerConnectivityException e) {
-    
-    if(lastException != null) {
-      throw lastException;
-    } else {
-      if(pools.isEmpty()) {
-        if (this.cache.isClosed()) {
-          throw this.cache.getCacheClosedException("PDX detected cache was closed", null);
-        }
-        throw new CacheClosedException("Client pools have been closed so the PDX type registry can not lookup an enum.");
-      } else {
-        throw new InternalGemFireError("getEnum: Unable to determine pdx enum for id " + enumId + " from existing client to server pools " + pools);
-      }
-    }
-  }
-  
-  private void verifyConfiguration() {
-    if(typeRegistryInUse) {
-      return;
-    } else {
-      typeRegistryInUse = true;
-      checkAllowed();
-    }
-  }
-  
-  private void checkAllowed() {
-    //Anything is allowed until the registry is in use.
-    if(!typeRegistryInUse) {
-      return;
-    }
+
+    throw returnCorrectExceptionForFailure(pools, enumId, lastException);
-    
-    Map<Integer, PdxType> types = new HashMap<Integer, PdxType>();
+
+    Map<Integer, PdxType> types = new HashMap<>();
-    
-    Map<Integer, EnumInfo> enums = new HashMap<Integer, EnumInfo>();
+
+    Map<Integer, EnumInfo> enums = new HashMap<>();
-  
+
-      if (value instanceof PdxType){
+      if (value instanceof PdxType) {
-        if(pdxType.getClassName().equals(className) && pdxType.getPdxField(fieldName) != null){
+        if (pdxType.getClassName().equals(className) && pdxType.getPdxField(fieldName) != null) {
+
-    
+
-    for(Pool pool: pools) {
+    for (Pool pool : pools) {
-        sendTypeToAllPools(importedType, typeId, pools, pool);
-      } catch(ServerConnectivityException e) {
+        sendTypeToAllPools(importedType, typeId, pool);
+        return;
+      } catch (ServerConnectivityException e) {
-    if(lastException != null) {
-      throw lastException;
-    } else {
-      if (this.cache.isClosed()) {
-        throw new CacheClosedException("PDX detected cache was closed");
-      }
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry can not define a type.");
-    }
+    throw returnCorrectExceptionForFailure(pools, typeId, lastException);
-    
+
-    for(Pool pool: pools) {
+    for (Pool pool : pools) {
-        sendEnumIdToAllPools(importedInfo, enumId, pools, pool);
-      } catch(ServerConnectivityException e) {
+        sendEnumIdToAllPools(importedInfo, enumId, pool);
+      } catch (ServerConnectivityException e) {
-    
-    if(lastException != null) {
+
+    throw returnCorrectExceptionForFailure(pools, enumId, lastException);
+  }
+
+  private RuntimeException returnCorrectExceptionForFailure(final Collection<Pool> pools, final int typeId, final ServerConnectivityException lastException) {
+    if (lastException != null) {
-      if (this.cache.isClosed()) {
-        throw new CacheClosedException("PDX detected cache was closed");
+      if (pools.isEmpty()) {
+        if (this.cache.isClosed()) {
+          throw this.cache.getCacheClosedException("PDX detected cache was closed", null);
+        } else {
+          throw new CacheClosedException("Client pools have been closed so the PDX type registry can not lookup a type.");
+        }
+      } else {
+        throw new InternalGemFireError("Unable to determine PDXType for id " + typeId);
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry can not define a type.");
-  
+

MOV26 MOV31 MOV31 MOV31 INS31 INS31 MOV44 MOV8 INS83 INS39 INS42 MOV44 INS8 UPD83 INS39 UPD42 MOV44 UPD83 UPD42 INS44 MOV44 MOV8 UPD39 UPD42 MOV44 MOV78 UPD39 UPD42 MOV44 MOV44 MOV78 UPD42 INS44 MOV44 MOV83 INS43 INS42 INS44 MOV44 INS44 INS8 INS60 INS53 MOV60 INS43 INS42 INS53 INS41 INS53 MOV60 MOV60 INS53 INS39 INS42 INS53 INS42 INS83 MOV74 INS42 INS83 UPD42 INS83 MOV43 UPD42 MOV42 MOV25 INS39 INS59 INS32 INS42 MOV74 MOV59 MOV59 INS32 INS32 INS32 INS59 MOV59 INS32 INS32 INS42 INS38 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 MOV32 MOV42 INS42 INS42 INS38 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS34 MOV42 MOV42 MOV42 INS34 INS74 UPD74 INS21 MOV43 INS7 UPD42 INS8 MOV32 INS8 INS42 MOV32 UPD42 UPD42 MOV53 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 MOV42 INS53 UPD42 MOV52 MOV42 INS14 UPD45 UPD42 INS43 INS45 INS42 DEL40 DEL26 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL32 DEL21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL52 DEL42 DEL22 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL70 DEL8 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL70 DEL8 DEL32 DEL21 DEL39 DEL42 DEL42 DEL41 DEL8 DEL42 DEL9 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL52 DEL42 DEL22 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL45 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31