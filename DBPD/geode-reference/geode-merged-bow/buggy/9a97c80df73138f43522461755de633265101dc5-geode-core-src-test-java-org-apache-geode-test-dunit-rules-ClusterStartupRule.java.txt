GEODE-4180: get rid of withTempWorkingDir in ClusterStartupRule (#1443)

* GEODE-4180: get rid of withTempWorkingDir in ClusterStartupRule

* get rid of withTempWorkingDir in ClusterStartupRule
* cleanup more ClusterStartupRule API to use lamda on MemberStartupRule

-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
-import static org.apache.geode.distributed.ConfigurationProperties.NAME;
-import java.io.IOException;
-import java.util.stream.Collectors;
+import java.util.function.UnaryOperator;
+import org.apache.commons.io.FileUtils;
-import org.junit.rules.TemporaryFolder;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.client.ClientRegionShortcut;
-import org.apache.geode.internal.AvailablePortHelper;
-import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;
-  private TemporaryFolder tempWorkingDir;
-   * This will use a temporary folder to hold all the vm directories instead of using dunit folder.
-   * It will set each VM's working dir to its respective sub-directories.
-   *
-   * use this if you want to examine each member's file system without worrying about it's being
-   * contaminated with DUnitLauncher's log files that exists in each dunit/vm folder such as
-   * locatorxxxView.dat and locatorxxxviews.log and other random log files.
-   *
-   * If the product code is doing new File(".") or new File("relative-path.log"), it will still
-   * pointing to the a File under the old CWD. So avoid using relative path and always use absolute
-   * path or with a parent dir when creating new File object.
-   *
-   * But this will cause the VMs to be bounced after test is done, because it dynamically changes
-   * the user.dir system property, causing slow running tests. Use with discretion.
-   */
-  public ClusterStartupRule withTempWorkingDir() {
-    tempWorkingDir = new SerializableTemporaryFolder();
-    return this;
-  }
-
-  public boolean useTempWorkingDir() {
-    return tempWorkingDir != null;
-  }
-
-  /**
-    if (useTempWorkingDir()) {
-      tempWorkingDir.create();
-    }
-      if (useTempWorkingDir()) {
-        tempWorkingDir.delete();
-      }
+      // delete any file under root dir
+      Arrays.stream(getWorkingDirRoot().listFiles()).filter(File::isFile)
+          .forEach(FileUtils::deleteQuietly);
+
-  /**
-   * Starts a locator instance with the given configuration properties inside
-   * {@code getHost(0).getVM(index)}.
-   *
-   * @return VM locator vm
-   */
-  public MemberVM startLocatorVM(int index, Properties specifiedProperties, String version)
-      throws Exception {
-    Properties properties = new Properties();
-    properties.putAll(specifiedProperties);
+  public MemberVM startLocatorVM(int index, int... locatorPort) {
+    return startLocatorVM(index, x -> x.withConnectionToLocator(locatorPort));
+  }
-    String defaultName = "locator-" + index;
-    properties.putIfAbsent(NAME, defaultName);
-    String name = properties.getProperty(NAME);
+  public MemberVM startLocatorVM(int index, Properties properties, int... locatorPort) {
+    return startLocatorVM(index,
+        x -> x.withProperties(properties).withConnectionToLocator(locatorPort));
+  }
+  public MemberVM startLocatorVM(int index, String version) {
+    return startLocatorVM(index, version, x -> x);
+  }
+
+  public MemberVM startLocatorVM(int index,
+      SerializableFunction1<LocatorStarterRule> ruleOperator) {
+    return startLocatorVM(index, VersionManager.CURRENT_VERSION, ruleOperator);
+  }
+
+  public MemberVM startLocatorVM(int index, String version,
+      SerializableFunction1<LocatorStarterRule> ruleOperator) {
+    final String defaultName = "locator-" + index;
-    Locator locator = locatorVM.invoke(() -> {
+    Locator server = locatorVM.invoke(() -> {
-      if (useTempWorkingDir()) {
-        File workingDirFile = createWorkingDirForMember(name);
-        locatorStarter.withWorkingDir(workingDirFile);
-      }
-      locatorStarter.withProperties(properties).withAutoStart();
+      ruleOperator.apply(locatorStarter);
+      locatorStarter.withName(defaultName);
+      locatorStarter.withAutoStart();
-    MemberVM memberVM = new MemberVM(locator, locatorVM, useTempWorkingDir());
+
+    MemberVM memberVM = new MemberVM(server, locatorVM);
-  public MemberVM startLocatorVM(int index, Properties specifiedProperties) throws Exception {
-    return startLocatorVM(index, specifiedProperties, VersionManager.CURRENT_VERSION);
+  public MemberVM startServerVM(int index, int... locatorPort) {
+    return startServerVM(index, x -> x.withConnectionToLocator(locatorPort));
-  public MemberVM startLocatorVM(int index, int... locatorPort) throws Exception {
-    Properties properties = new Properties();
-    String locators = Arrays.stream(locatorPort).mapToObj(i -> "localhost[" + i + "]")
-        .collect(Collectors.joining(","));
-    properties.setProperty(LOCATORS, locators);
-    return startLocatorVM(index, properties);
+  public MemberVM startServerVM(int index, String group, int... locatorPort) {
+    return startServerVM(index,
+        x -> x.withConnectionToLocator(locatorPort).withProperty(GROUPS, group));
-  public MemberVM startLocatorVM(int index) throws Exception {
-    return startLocatorVM(index, new Properties());
+  public MemberVM startServerVM(int index, Properties properties, int... locatorPort) {
+    return startServerVM(index,
+        x -> x.withProperties(properties).withConnectionToLocator(locatorPort));
-  /**
-   * Starts a cache server with given properties
-   */
-  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort,
-      String version) throws IOException {
-    Properties properties = new Properties();
-    properties.putAll(specifiedProperties);
+  public MemberVM startServerVM(int index, SerializableFunction1<ServerStarterRule> ruleOperator) {
+    return startServerVM(index, VersionManager.CURRENT_VERSION, ruleOperator);
+  }
-    String defaultName = "server-" + index;
-    properties.putIfAbsent(NAME, defaultName);
-    String name = properties.getProperty(NAME);
-
+  public MemberVM startServerVM(int index, String version,
+      SerializableFunction1<ServerStarterRule> ruleOperator) {
+    final String defaultName = "server-" + index;
-      if (useTempWorkingDir()) {
-        File workingDirFile = createWorkingDirForMember(name);
-        serverStarter.withWorkingDir(workingDirFile);
-      }
-      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
+      ruleOperator.apply(serverStarter);
+      serverStarter.withName(defaultName);
+      serverStarter.withAutoStart();
-    MemberVM memberVM = new MemberVM(server, serverVM, useTempWorkingDir());
+    MemberVM memberVM = new MemberVM(server, serverVM);
-  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort)
-      throws IOException {
-    return startServerVM(index, specifiedProperties, locatorPort, VersionManager.CURRENT_VERSION);
-  }
-
-  public MemberVM startServerVM(int index, String group, int locatorPort) throws IOException {
-    Properties properties = new Properties();
-    properties.put(GROUPS, group);
-    return startServerVM(index, properties, locatorPort);
-  }
-
-  public MemberVM startServerVM(int index, int locatorPort) throws IOException {
-    return startServerVM(index, new Properties(), locatorPort);
-  }
-
-  public MemberVM startServerVM(int index, Properties properties) throws IOException {
-    return startServerVM(index, properties, -1);
-  }
-
-  public MemberVM startServerVM(int index) throws IOException {
-    return startServerVM(index, new Properties(), -1);
-  }
-
-  /**
-   * Starts a cache server with given properties, plus an available port for a JMX manager
-   */
-  public MemberVM startServerAsJmxManager(int index, Properties properties) throws IOException {
-    properties.setProperty(JMX_MANAGER_PORT, AvailablePortHelper.getRandomAvailableTCPPort() + "");
-    return startServerVM(index, properties, -1);
-  }
-
-  public MemberVM startServerAsJmxManager(int index) throws IOException {
-    return startServerAsJmxManager(index, new Properties());
-  }
-
-  /**
-   * Starts a cache server with given properties. Additionally, start the server with a JMX manager
-   * and embedded locator.
-   */
-  public MemberVM startServerAsEmbeddedLocator(int index, Properties specifiedProperties,
-      String version) throws IOException {
-    Properties properties = new Properties();
-    properties.putAll(specifiedProperties);
-
-    String defaultName = "server-" + index;
-    properties.putIfAbsent(NAME, defaultName);
-    String name = properties.getProperty(NAME);
-
-    VM serverVM = getVM(index, version);
-    Server server = serverVM.invoke(() -> {
-      memberStarter = new ServerStarterRule();
-      ServerStarterRule serverStarter = (ServerStarterRule) memberStarter;
-      if (useTempWorkingDir()) {
-        File workingDirFile = createWorkingDirForMember(name);
-        serverStarter.withWorkingDir(workingDirFile);
-      }
-      if (logFile) {
-        serverStarter.withLogFile();
-      }
-      serverStarter.withEmbeddedLocator().withProperties(properties).withName(name).withJMXManager()
-          .withAutoStart();
-      serverStarter.before();
-      return serverStarter;
-    });
-
-    MemberVM memberVM = new MemberVM(server, serverVM, useTempWorkingDir());
-    occupiedVMs.put(index, memberVM);
-    return memberVM;
-  }
-
-  public MemberVM startServerAsEmbeddedLocator(int index, Properties properties)
-      throws IOException {
-    return startServerAsEmbeddedLocator(index, properties, VersionManager.CURRENT_VERSION);
-  }
-
-  public MemberVM startServerAsEmbeddedLocator(int index) throws IOException {
-    return startServerAsEmbeddedLocator(index, new Properties());
-  }
-
-  public TemporaryFolder getTempWorkingDir() {
-    return tempWorkingDir;
-  }
-
-    if (useTempWorkingDir())
-      return tempWorkingDir.getRoot();
-
-  private File createWorkingDirForMember(String dirName) throws IOException {
-    File workingDir = new File(tempWorkingDir.getRoot(), dirName).getAbsoluteFile();
-    if (!workingDir.exists()) {
-      tempWorkingDir.newFolder(dirName);
-    }
-
-    return workingDir;
+  public interface SerializableFunction1<T> extends UnaryOperator<T>, Serializable {

MOV26 MOV31 MOV31 UPD40 UPD40 MOV44 INS31 INS31 INS55 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 UPD42 MOV44 INS44 MOV43 MOV44 MOV44 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 INS8 MOV43 UPD42 MOV44 MOV44 MOV44 MOV83 MOV43 UPD42 MOV42 MOV44 INS44 MOV8 MOV44 MOV44 INS44 INS83 INS42 INS73 INS74 INS43 INS41 INS74 UPD42 MOV42 INS74 UPD42 INS41 INS41 INS74 INS42 MOV42 MOV39 MOV42 INS74 INS42 INS42 INS43 INS43 UPD42 MOV42 INS32 INS43 INS43 INS43 INS43 INS83 MOV43 INS32 INS32 INS43 INS43 UPD42 MOV42 INS43 INS43 INS83 MOV43 UPD42 MOV42 UPD42 MOV42 INS21 INS86 INS42 UPD42 MOV42 INS86 INS42 INS86 INS42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 INS86 MOV42 MOV42 INS86 UPD42 MOV42 UPD42 MOV42 MOV86 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS42 UPD42 MOV42 INS42 INS32 INS59 INS32 MOV59 INS32 INS59 INS42 MOV43 UPD42 INS59 INS32 INS59 INS32 INS59 INS32 MOV43 INS32 INS42 INS90 INS42 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS90 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS21 MOV21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL86 DEL32 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL14 DEL43 DEL44 DEL42 DEL43 DEL42 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL34 DEL38 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL43 DEL14 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL39 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31