Enabling creation of stand-alone GMSLocator & adding 2-phase view casting

The locator work will let us unit-test this component while the
view-casting work is in preparation for the health-monitor impl that is
coming soon & will allow us to start testing HA features.

+import java.util.Collection;
+import org.apache.logging.log4j.Logger;
+
+  /**
+   * returns the weight of the members in this membership view
+   */
+  public int memberWeight() {
+    int result = 0;
+    InternalDistributedMember lead = getLeadMember();
+    for (InternalDistributedMember mbr: this.members) {
+      result += mbr.getNetMember().getMemberWeight();
+      switch (mbr.getVmKind()) {
+      case DistributionManager.NORMAL_DM_TYPE:
+        result += 10;
+        if (lead != null  &&  mbr.equals(lead)) {
+          result += 5;
+        }
+        break;
+      case DistributionManager.LOCATOR_DM_TYPE:
+        result += 3;
+        break;
+      case DistributionManager.ADMIN_ONLY_DM_TYPE:
+        break;
+      default:
+        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+      }
+    }
+    return result;
+  }
+
+  /**
+   * returns the weight of crashed members in this membership view
+   * with respect to the given previous view
+   */
+  public int getCrashedMemberWeight(NetView oldView) {
+    int result = 0;
+    InternalDistributedMember lead = oldView.getLeadMember();
+    for (InternalDistributedMember mbr: this.crashedMembers) {
+      if ( !oldView.contains(mbr)) {
+        continue;
+      }
+      result += mbr.getNetMember().getMemberWeight();
+      switch (mbr.getVmKind()) {
+      case DistributionManager.NORMAL_DM_TYPE:
+        result += 10;
+        if (lead != null  &&  mbr.equals(lead)) {
+          result += 5;
+        }
+        break;
+      case DistributionManager.LOCATOR_DM_TYPE:
+        result += 3;
+        break;
+      case DistributionManager.ADMIN_ONLY_DM_TYPE:
+        break;
+      default:
+        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+      }
+    }
+    return result;
+  }
+
+  
+  /**
+   * returns the members of this views crashedMembers collection
+   * that were members of the given view.  Admin-only members are
+   * not counted
+   */
+  public List<InternalDistributedMember> getActualCrashedMembers(NetView oldView) {
+    List<InternalDistributedMember> result = new ArrayList(this.crashedMembers.size());
+    InternalDistributedMember lead = oldView.getLeadMember();
+    for (InternalDistributedMember mbr: this.crashedMembers) {
+      if ((mbr.getVmKind() != DistributionManager.ADMIN_ONLY_DM_TYPE)
+          && oldView.contains(mbr)) {
+        result.add(mbr);
+      }
+    }
+    return result;
+  }
+  
+  /**
+   * logs the weight of failed members wrt the given previous
+   * view
+   */
+  public void logCrashedMemberWeights(NetView oldView, Logger log) {
+    InternalDistributedMember lead = oldView.getLeadMember();
+    for (InternalDistributedMember mbr: this.crashedMembers) {
+      if ( !oldView.contains(mbr)) {
+        continue;
+      }
+      int mbrWeight = mbr.getNetMember().getMemberWeight();
+      switch (mbr.getVmKind()) {
+      case DistributionManager.NORMAL_DM_TYPE:
+        if (lead != null  &&  mbr.equals(lead)) {
+          mbrWeight += 15;
+        } else {
+          mbrWeight += 5;
+        }
+        break;
+      case DistributionManager.LOCATOR_DM_TYPE:
+        mbrWeight += 3;
+        break;
+      case DistributionManager.ADMIN_ONLY_DM_TYPE:
+        break;
+      default:
+        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+      }
+      log.info("  " + mbr + " had a weight of " + mbrWeight);
+    }
+  }
+  

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS60 INS60 INS70 INS41 INS65 INS43 INS42 INS60 INS60 INS70 INS41 INS65 INS43 INS43 INS43 INS42 INS60 INS60 INS70 INS41 INS65 INS43 INS42 INS43 INS42 INS60 INS70 INS66 INS39 INS59 INS43 INS59 INS44 INS22 INS8 INS42 INS66 INS66 INS42 INS39 INS59 INS43 INS59 INS44 INS22 INS8 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS44 INS22 INS8 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS44 INS22 INS8 INS42 INS34 INS42 INS42 INS32 INS43 INS42 INS52 INS42 INS21 INS50 INS42 INS34 INS42 INS42 INS32 INS43 INS42 INS52 INS42 INS25 INS21 INS50 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS52 INS42 INS25 INS42 INS42 INS32 INS43 INS42 INS52 INS42 INS25 INS60 INS50 INS21 INS42 INS42 INS7 INS32 INS49 INS21 INS25 INS10 INS49 INS21 INS10 INS49 INS10 INS49 INS53 INS42 INS42 INS42 INS38 INS8 INS7 INS32 INS49 INS21 INS25 INS10 INS49 INS21 INS10 INS49 INS10 INS49 INS53 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS38 INS8 INS39 INS59 INS32 INS49 INS25 INS10 INS49 INS21 INS10 INS49 INS10 INS49 INS53 INS32 INS42 INS32 INS42 INS42 INS40 INS7 INS27 INS8 INS40 INS7 INS40 INS14 INS32 INS18 INS42 INS32 INS42 INS42 INS40 INS7 INS27 INS8 INS40 INS7 INS40 INS14 INS42 INS22 INS42 INS36 INS32 INS21 INS32 INS18 INS42 INS32 INS42 INS42 INS40 INS27 INS8 INS8 INS40 INS7 INS40 INS14 INS42 INS42 INS27 INS32 INS42 INS42 INS34 INS27 INS32 INS21 INS42 INS34 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS27 INS32 INS21 INS42 INS34 INS43 INS27 INS52 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS21 INS21 INS42 INS34 INS43 INS27 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS42 INS45 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS42 INS45 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS7 INS42 INS45 INS32 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42