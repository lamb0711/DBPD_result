Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class CreateDefinedIndexesFunction extends FunctionAdapter implements
-    InternalEntity {
+public class CreateDefinedIndexesFunction extends FunctionAdapter implements InternalEntity {
-      for(IndexInfo indexDefinition : indexDefinitions) {
+      for (IndexInfo indexDefinition : indexDefinitions) {
-        String regionPath = indexDefinition.getRegionPath();        
-        if(indexDefinition.getIndexType() == IndexInfo.KEY_INDEX) {
+        String regionPath = indexDefinition.getRegionPath();
+        if (indexDefinition.getIndexType() == IndexInfo.KEY_INDEX) {
-        } else if(indexDefinition.getIndexType() == IndexInfo.HASH_INDEX) {
+        } else if (indexDefinition.getIndexType() == IndexInfo.HASH_INDEX) {
-      for(Map.Entry<String, Exception> failedIndex : e.getExceptionsMap().entrySet()) {
-         sb.append(failedIndex.getKey()).append(" : ").append(failedIndex.getValue().getMessage()).append("\n");
-      }     
-      context.getResultSender().lastResult(
-          new CliFunctionResult(memberId, e, sb.toString()));
+      for (Map.Entry<String, Exception> failedIndex : e.getExceptionsMap().entrySet()) {
+        sb.append(failedIndex.getKey()).append(" : ").append(failedIndex.getValue().getMessage())
+            .append("\n");
+      }
+      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, sb.toString()));
-      String exceptionMessage = CliStrings.format(
-          CliStrings.EXCEPTION_CLASS_AND_MESSAGE, e.getClass().getName(),
-          e.getMessage());
-      context.getResultSender().lastResult(
-          new CliFunctionResult(memberId, e, exceptionMessage));
+      String exceptionMessage = CliStrings.format(CliStrings.EXCEPTION_CLASS_AND_MESSAGE,
+          e.getClass().getName(), e.getMessage());
+      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, exceptionMessage));

