GEODE-3231: do not use temporary folder as workingdir or log to file by default when using the member starter rules

* do not create a workingDir and sets the user.dir by default for Locator/ServerStarterRule
* do not use a temp folder for all vms workingDir by default when using LocatorServerStarterRule.
* only bounce the vm when changing the workingdir of vms, otherwise, just cleanup the persisted files after each test.

+import java.io.File;
+import java.util.Arrays;
+
+import org.apache.commons.io.FileUtils;
+
-import java.io.File;
-import java.nio.file.Paths;
-
+  private boolean tempWorkingDir;
+    this(member, vm, false);
+  }
+
+  public MemberVM(T member, VM vm, boolean tempWorkingDir) {
+    this.tempWorkingDir = tempWorkingDir;
-    return member.getWorkingDir();
+    if (tempWorkingDir)
+      return member.getWorkingDir();
+    return vm.getWorkingDirectory();
-
-    /**
-     * The LocatorServerStarterRule may dynamically change the "user.dir" system property to point
-     * to a temporary folder. The Path API caches the first value of "user.dir" that it sees, and
-     * this can result in a stale cached value of "user.dir" which points to a directory that no
-     * longer exists.
-     */
-    boolean vmIsClean = this.getVM().invoke(() -> Paths.get("").toAbsolutePath().toFile().exists());
-    if (!vmIsClean) {
-      this.getVM().bounce();
-    }
+    if (tempWorkingDir) {
+      /*
+       * this temporary workingDir will dynamically change the "user.dir". system property to point
+       * to a temporary folder. The Path API caches the first value of "user.dir" that it sees, and
+       * this can result in a stale cached value of "user.dir" which points to a directory that no
+       * longer exists.
+       */
+      vm.bounce();
+    } else
+      // if using the dunit/vm dir as the preset working dir, need to cleanup dir except
+      // the locator0view* file, so that regions/indexes won't get persisted across tests
+      Arrays.stream(getWorkingDir().listFiles((dir, name) -> {
+        return !name.startsWith("locator0view");
+      })).forEach(FileUtils::deleteQuietly);

MOV26 MOV26 INS26 UPD40 INS40 INS23 INS31 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS44 INS42 INS43 INS42 INS43 INS42 INS17 INS39 INS42 INS21 INS25 INS41 INS25 INS42 INS42 INS42 INS42 INS9 INS7 INS42 MOV41 INS32 INS42 INS8 INS21 INS22 INS42 INS42 INS42 INS21 INS32 INS52 INS42 INS32 INS32 UPD42 MOV42 INS90 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS86 UPD42 MOV42 INS59 INS59 INS8 INS42 INS42 INS41 INS38 INS32 INS42 INS42 INS45 DEL39 DEL42 DEL52 DEL32 DEL45 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL86 DEL32 DEL59 DEL60 DEL42 DEL38 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25