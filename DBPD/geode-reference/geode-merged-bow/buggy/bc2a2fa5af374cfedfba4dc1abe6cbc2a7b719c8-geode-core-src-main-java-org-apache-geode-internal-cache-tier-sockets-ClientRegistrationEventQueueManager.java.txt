GEODE-6708: Ensuring single drainer and preventing NPE

+import java.util.concurrent.locks.ReentrantLock;
-    // As an optimization, we drain as many events from the queue as we can
-    // before taking out a lock to drain the remaining events
-    if (logger.isDebugEnabled()) {
-      logger.debug("Draining events from registration queue for client proxy "
-          + clientProxyMembershipID
-          + " without synchronization");
-    }
-
-    drainEventsReceivedWhileRegisteringClient(clientProxyMembershipID, cacheClientNotifier);
-
-    registrationEventQueue.lockForDraining();
-    try {
-      if (logger.isDebugEnabled()) {
-        logger.debug("Draining remaining events from registration queue for client proxy "
-            + clientProxyMembershipID + " with synchronization");
+    if (registrationEventQueue != null) {
+      // It is possible that several client registration threads are active for the same
+      // ClientProxyMembershipID, in which case we only want a single drainer to drain
+      // and remove the queue.
+      registrationEventQueue.lockForSingleDrainer();
+      try {
+        // See if the queue is still available after acquiring the lock as it may have
+        // been removed from registeringProxyEventQueues by the previous thread
+        if (registeringProxyEventQueues.containsKey(clientProxyMembershipID)) {
+          // As an optimization, we drain as many events from the queue as we can
+          // before taking out a lock to drain the remaining events. When we lock for draining,
+          // it prevents additional events from being added to the queue while the queue is drained
+          // and removed.
+          if (logger.isDebugEnabled()) {
+            logger.debug("Draining events from registration queue for client proxy "
+                + clientProxyMembershipID
+                + " without synchronization");
+          }
+
+          drainEventsReceivedWhileRegisteringClient(clientProxyMembershipID, registrationEventQueue,
+              cacheClientNotifier);
+
+          // Prevents additional events from being added to the queue while we process and remove it
+          registrationEventQueue.lockForDraining();
+          try {
+            if (logger.isDebugEnabled()) {
+              logger.debug("Draining remaining events from registration queue for client proxy "
+                  + clientProxyMembershipID + " with synchronization");
+            }
+
+            drainEventsReceivedWhileRegisteringClient(clientProxyMembershipID,
+                registrationEventQueue,
+                cacheClientNotifier);
+
+            registeringProxyEventQueues.remove(clientProxyMembershipID);
+          } finally {
+            registrationEventQueue.unlockForDraining();
+          }
+        }
+      } finally {
+        registrationEventQueue.unlockForSingleDrainer();
-
-      drainEventsReceivedWhileRegisteringClient(clientProxyMembershipID, cacheClientNotifier);
-
-      registeringProxyEventQueues.remove(clientProxyMembershipID);
-    } finally {
-      registrationEventQueue.unlockForDraining();
+      final ClientRegistrationEventQueue registrationEventQueue,
-    ClientRegistrationEventQueue registrationEventQueue = registeringProxyEventQueues.get(proxyID);
-
-      final ReadWriteLock putDrainLock) {
+      final ReadWriteLock eventAddDrainLock,
+      final ReentrantLock singleDrainerLock) {
-            putDrainLock);
-    registeringProxyEventQueues.put(clientProxyMembershipID,
+            eventAddDrainLock, singleDrainerLock);
+    registeringProxyEventQueues.putIfAbsent(clientProxyMembershipID,
-    Queue<ClientRegistrationEvent> eventQueue;
-    ReadWriteLock readWriteLock;
+    private final Queue<ClientRegistrationEvent> eventQueue;
+    private final ReadWriteLock eventAddDrainLock;
+    private final ReentrantLock singleDrainerLock;
-        final Queue<ClientRegistrationEvent> eventQueue, final ReadWriteLock readWriteLock) {
+        final Queue<ClientRegistrationEvent> eventQueue,
+        final ReadWriteLock eventAddDrainLock,
+        final ReentrantLock singleDrainerLock) {
-      this.readWriteLock = readWriteLock;
+      this.eventAddDrainLock = eventAddDrainLock;
+      this.singleDrainerLock = singleDrainerLock;
-      readWriteLock.writeLock().lock();
+      eventAddDrainLock.writeLock().lock();
-      readWriteLock.writeLock().unlock();
+      eventAddDrainLock.writeLock().unlock();
-      readWriteLock.readLock().lock();
+      eventAddDrainLock.readLock().lock();
-      readWriteLock.readLock().unlock();
+      eventAddDrainLock.readLock().unlock();
+    }
+
+    private void lockForSingleDrainer() {
+      singleDrainerLock.lock();
+    }
+
+    private void unlockForSingleDrainer() {
+      singleDrainerLock.unlock();

INS26 INS40 INS8 INS44 INS44 INS23 INS31 INS31 MOV60 INS25 INS83 MOV43 INS42 UPD42 INS83 INS43 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS27 INS8 INS42 UPD42 INS42 INS42 UPD42 INS83 INS43 INS42 INS21 INS21 INS21 INS42 INS33 INS21 INS54 UPD42 INS42 INS7 INS32 INS32 INS32 INS8 INS8 UPD42 INS42 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS21 UPD42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 INS32 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60