GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalRegion;
+import org.apache.geode.internal.cache.partitioned.Bucket;
-            Object v = entry._getValueRetain(context, true);
+            Object v = entry.getValueRetain(context, true);
-          v = de._getValueRetain(context, true);
+          v = de.getValueRetain(context, true);
-    public static void initialize(DiskEntry entry, DiskRecoveryStore r, Object newValue) {
+    public static void initialize(DiskEntry entry, DiskRecoveryStore diskRecoveryStore,
+        Object newValue) {
-      if (r instanceof LocalRegion) {
-        drv = ((LocalRegion) r).getDiskRegion();
-      } else if (r instanceof DiskRegionView) {
-        drv = (DiskRegionView) r;
+      if (diskRecoveryStore instanceof InternalRegion) {
+        drv = ((InternalRegion) diskRecoveryStore).getDiskRegion();
+      } else if (diskRecoveryStore instanceof DiskRegionView) {
+        drv = (DiskRegionView) diskRecoveryStore;
-          updateStats(drv, r, 0/* InVM */, 1/* OnDisk */, did.getValueLength());
+          updateStats(drv, diskRecoveryStore, 0, 1, did.getValueLength());
-          entry.setValueWithContext(drv,
-              entry.prepareValueForCache((RegionEntryContext) r, re.getValue(), false));
+          entry.setValueWithContext(drv, entry
+              .prepareValueForCache((RegionEntryContext) diskRecoveryStore, re.getValue(), false));
-            updateStats(drv, r, 1/* InVM */, 0/* OnDisk */, 0);
+            updateStats(drv, diskRecoveryStore, 1, 0, 0);
-          updateStats(drv, r, 1/* InVM */, 0/* OnDisk */, 0);
+          updateStats(drv, diskRecoveryStore, 1, 0, 0);
-    public static ValueWrapper createValueWrapperFromEntry(DiskEntry entry, LocalRegion region,
+    public static ValueWrapper createValueWrapperFromEntry(DiskEntry entry, InternalRegion region,
-      Object value = entry._getValueRetain(region, true);
+      Object value = entry.getValueRetain(region, true);
-    private static void writeToDisk(DiskEntry entry, LocalRegion region, boolean async)
+    private static void writeToDisk(DiskEntry entry, InternalRegion region, boolean async)
-    private static void writeToDisk(DiskEntry entry, LocalRegion region, boolean async,
+    private static void writeToDisk(DiskEntry entry, InternalRegion region, boolean async,
-    private static void writeBytesToDisk(DiskEntry entry, LocalRegion region, boolean async,
+    private static void writeBytesToDisk(DiskEntry entry, InternalRegion region, boolean async,
-    public static void update(DiskEntry entry, LocalRegion region, Object newValue)
+    public static void update(DiskEntry entry, InternalRegion region, Object newValue)
-    public static void update(DiskEntry entry, LocalRegion region, Object newValue,
+    public static void update(DiskEntry entry, InternalRegion region, Object newValue,
-    private static AsyncDiskEntry basicUpdate(DiskEntry entry, LocalRegion region, Object newValue,
-        EntryEventImpl event) throws RegionClearedException {
+    private static AsyncDiskEntry basicUpdate(DiskEntry entry, InternalRegion region,
+        Object newValue, EntryEventImpl event) throws RegionClearedException {
-    public static Object getValueInVMOrDiskWithoutFaultIn(DiskEntry entry, LocalRegion region) {
+    public static Object getValueInVMOrDiskWithoutFaultIn(DiskEntry entry, InternalRegion region) {
-    public static Object getValueOffHeapOrDiskWithoutFaultIn(DiskEntry entry, LocalRegion region) {
+    public static Object getValueOffHeapOrDiskWithoutFaultIn(DiskEntry entry,
+        InternalRegion region) {
-      Object v = entry._getValueRetain(region, true);
+      Object v = entry.getValueRetain(region, true);
-          v = entry._getValueRetain(region, true);
+          v = entry.getValueRetain(region, true);
-    public static Object faultInValue(DiskEntry entry, LocalRegion region) {
+    public static Object faultInValue(DiskEntry entry, InternalRegion region) {
-    public static Object faultInValueRetain(DiskEntry entry, LocalRegion region) {
+    public static Object faultInValueRetain(DiskEntry entry, InternalRegion region) {
-    private static Object faultInValue(DiskEntry entry, LocalRegion region, boolean retainResult) {
+    private static Object faultInValue(DiskEntry entry, InternalRegion region,
+        boolean retainResult) {
-      Object v = entry._getValueRetain(region, true);
+      Object v = entry.getValueRetain(region, true);
-              lruEntryFaultIn((LRUEntry) entry, region);
+              lruEntryFaultIn((LRUEntry) entry, (DiskRecoveryStore) region);
-            v = entry._getValueRetain(region, true);
+            v = entry.getValueRetain(region, true);
-              v = readValueFromDisk(entry, region);
+              v = readValueFromDisk(entry, (DiskRecoveryStore) region);
-                  lruEntryFaultIn((LRUEntry) entry, region);
+                  lruEntryFaultIn((LRUEntry) entry, (DiskRecoveryStore) region);
-        lruUpdateCallback(region);
+        lruUpdateCallback((DiskRecoveryStore) region);
-      // and since drv is == owner when owner is not a LocalRegion
+      // and since drv is == owner when owner is not a InternalRegion
-    public static int overflowToDisk(DiskEntry entry, LocalRegion region, EnableLRU ccHelper)
+    public static int overflowToDisk(DiskEntry entry, InternalRegion region, EnableLRU ccHelper)
-      final int oldSize = region.calculateRegionEntryValueSize(entry);
+      final int oldSize = ((DiskRecoveryStore) region).calculateRegionEntryValueSize(entry);
-        ((LRUEntry) entry).setDelayedDiskId(region);
+        ((LRUEntry) entry).setDelayedDiskId((DiskRecoveryStore) region);
-
-    public static void handleFullAsyncQueue(DiskEntry entry, LocalRegion region, VersionTag tag) {
+    public static void handleFullAsyncQueue(DiskEntry entry, InternalRegion region,
+        VersionTag tag) {
-    public static void doAsyncFlush(VersionTag tag, LocalRegion region) {
+    public static void doAsyncFlush(VersionTag tag, InternalRegion region) {
-    public static void doAsyncFlush(DiskEntry entry, LocalRegion region, VersionTag tag) {
+    public static void doAsyncFlush(DiskEntry entry, InternalRegion region, VersionTag tag) {
-    private static void writeEntryToDisk(DiskEntry entry, LocalRegion region, VersionTag tag,
+    private static void writeEntryToDisk(DiskEntry entry, InternalRegion region, VersionTag tag,
-                final int entryValSize = region.calculateRegionEntryValueSize(entry);
+                final int entryValSize =
+                    ((DiskRecoveryStore) region).calculateRegionEntryValueSize(entry);
-    public static void removeFromDisk(DiskEntry entry, LocalRegion region, boolean isClear)
+    public static void removeFromDisk(DiskEntry entry, InternalRegion region, boolean isClear)
-    private static AsyncDiskEntry basicRemoveFromDisk(DiskEntry entry, LocalRegion region,
+    private static AsyncDiskEntry basicRemoveFromDisk(DiskEntry entry, InternalRegion region,
-    public static void updateVersionOnly(DiskEntry entry, LocalRegion region, VersionTag tag) {
+    public static void updateVersionOnly(DiskEntry entry, InternalRegion region, VersionTag tag) {

INS26 UPD40 INS40 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS36 INS11 INS11 INS11 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS11 INS43 INS42 INS11 INS42 INS43 INS42 INS42 INS36 INS11 INS11 INS43 INS42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42