GEODE-1246: change async event pool to use all its threads

The system property gemfire.Cache.EVENT_THREAD_LIMIT can be used to configure
the max number of threads used for async cache listener invocation.
It defaults to 16.

-import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
-   * Define LocalRegion.ASYNC_EVENT_LISTENERS=true to invoke event listeners in the background
+   * Define gemfire.Cache.ASYNC_EVENT_LISTENERS=true to invoke event listeners in the background
-  public static final boolean ASYNC_EVENT_LISTENERS = Boolean.getBoolean("gemfire.Cache.ASYNC_EVENT_LISTENERS");
+  private static final boolean ASYNC_EVENT_LISTENERS = Boolean.getBoolean("gemfire.Cache.ASYNC_EVENT_LISTENERS");
+  public static final int EVENT_THREAD_LIMIT = Integer.getInteger("gemfire.Cache.EVENT_THREAD_LIMIT", 16).intValue();
-    return basicCreate(system, true, cacheConfig, pf, true);
+    return basicCreate(system, true, cacheConfig, pf, true, ASYNC_EVENT_LISTENERS);
-    return basicCreate(system, true, cacheConfig, null, false);
+    return basicCreate(system, true, cacheConfig, null, false, ASYNC_EVENT_LISTENERS);
-  public static Cache create(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig) {
-    return basicCreate(system, existingOk, cacheConfig, null, false);
+  public static GemFireCacheImpl createWithAsyncEventListeners(DistributedSystem system, CacheConfig cacheConfig) {
+    return basicCreate(system, true, cacheConfig, null, false, true);
+  }
+  
+ public static Cache create(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig) {
+    return basicCreate(system, existingOk, cacheConfig, null, false, ASYNC_EVENT_LISTENERS);
-  private static GemFireCacheImpl basicCreate(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig, PoolFactory pf, boolean isClient)
+  private static GemFireCacheImpl basicCreate(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig, PoolFactory pf, boolean isClient, boolean asyncEventListeners)
-        instance = new GemFireCacheImpl(isClient, pf, system, cacheConfig);
+        instance = new GemFireCacheImpl(isClient, pf, system, cacheConfig, asyncEventListeners);
-  private GemFireCacheImpl(boolean isClient, PoolFactory pf, DistributedSystem system, CacheConfig cacheConfig) {
+  private GemFireCacheImpl(boolean isClient, PoolFactory pf, DistributedSystem system, CacheConfig cacheConfig, boolean asyncEventListeners) {
-      JNDIInvoker.mapTransactions();
+      JNDIInvoker.mapTransactions(system);
-      if (ASYNC_EVENT_LISTENERS) {
+      if (asyncEventListeners) {
-        // @todo darrel: add stats
-        // this.cachePerfStats.getEventQueueHelper());
-        this.eventThreadPool = new PooledExecutorWithDMStats(q, 16, this.cachePerfStats.getEventPoolHelper(), tf, 1000,
-            new CallerRunsPolicy());
+        this.eventThreadPool = new PooledExecutorWithDMStats(q, EVENT_THREAD_LIMIT, this.cachePerfStats.getEventPoolHelper(), tf, 1000);
-        if (ASYNC_EVENT_LISTENERS) {
+        if (this.eventThreadPool != null) {
+   * Returns <code>null</code> if no pool exists.
-    Assert.assertTrue(this.eventThreadPool != null);

INS23 INS31 UPD83 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS44 INS44 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS41 INS39 INS42 INS39 INS42 UPD66 INS32 INS42 INS42 INS42 INS32 INS66 INS42 INS42 INS45 INS34 INS42 INS42 INS42 INS42 INS9 INS42 INS33 INS9 INS9 INS42 UPD42 INS42 MOV27 INS42 INS42 DEL40 DEL26 DEL34 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL32 DEL21