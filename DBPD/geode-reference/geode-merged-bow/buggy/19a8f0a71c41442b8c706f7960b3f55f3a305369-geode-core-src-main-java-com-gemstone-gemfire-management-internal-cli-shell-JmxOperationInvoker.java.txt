GEODE-17: WIP adding JMX security

+import java.io.File;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.Properties;
+import com.gemstone.gemfire.internal.lang.StringUtils;
+import com.gemstone.gemfire.internal.util.IOUtils;
+import com.gemstone.gemfire.management.internal.cli.CliUtil;
+import com.gemstone.gemfire.management.internal.cli.commands.ShellCommands;
+import com.gemstone.gemfire.management.internal.cli.i18n.CliStrings;
-                             final Map<String, String> sslConfigProps)
+                             final Map<String, String> sslConfigProps, String gfSecurityPropertiesPath)
+      //Check for JMX Credentials if empty put properties instance directly so that
+      //jmx management interceptor can read it for custom security properties
+      if(!env.containsKey(JMXConnector.CREDENTIALS)) {
+        env.put(JMXConnector.CREDENTIALS, readProperties(gfSecurityPropertiesPath));
+      }
-  
+  //Copied from ShellCommands.java
+  private Properties readProperties(String gfSecurityPropertiesPath) throws MalformedURLException {
+    Gfsh gfshInstance = Gfsh.getCurrentInstance();
+    // reference to hold resolved gfSecurityPropertiesPath
+    String gfSecurityPropertiesPathToUse = CliUtil.resolvePathname(gfSecurityPropertiesPath);
+    URL gfSecurityPropertiesUrl = null;
+
+    // Case 1: User has specified gfSecurity properties file
+    if (!StringUtils.isBlank(gfSecurityPropertiesPathToUse)) {
+      // User specified gfSecurity properties doesn't exist
+      if (!IOUtils.isExistingPathname(gfSecurityPropertiesPathToUse)) {
+        gfshInstance.printAsSevere(CliStrings.format(CliStrings.GEMFIRE_0_PROPERTIES_1_NOT_FOUND_MESSAGE, "Security ", gfSecurityPropertiesPathToUse));
+      } else {
+        gfSecurityPropertiesUrl = new File(gfSecurityPropertiesPathToUse).toURI().toURL();
+      }
+    } else if (gfSecurityPropertiesPath == null) {
+      // Use default "gfsecurity.properties"
+      // in current dir, user's home or classpath
+      gfSecurityPropertiesUrl = ShellCommands.getFileUrl("gfsecurity.properties");
+    }
+    // if 'gfSecurityPropertiesPath' OR gfsecurity.properties has resolvable path
+    if (gfSecurityPropertiesUrl != null) {
+      gfshInstance.logToFile("Using security properties file : "
+              + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
+      return loadPropertiesFromURL(gfSecurityPropertiesUrl);
+    }
+    return null;
+  }
+
+  static Properties loadPropertiesFromURL(URL gfSecurityPropertiesUrl) {
+    Properties props = new Properties();
+    if (gfSecurityPropertiesUrl != null) {
+      InputStream inputStream = null;
+      try {
+
+        inputStream = gfSecurityPropertiesUrl.openStream();
+        props.load(inputStream);
+      } catch (IOException io) {
+        throw new RuntimeException(CliStrings.format(
+            CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0,
+                CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath())), io);
+      } finally {
+        IOUtils.close(inputStream);
+      }
+    }
+    return props;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS25 INS27 INS8 INS33 INS42 INS43 INS59 INS27 INS8 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS25 INS27 INS8 INS42 INS33 INS21 INS41 INS42 INS42 INS14 INS42 INS33 INS60 INS54 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS8 INS42 INS33 INS21 INS32 INS32 INS43 INS43 INS59 INS8 INS12 INS8 INS32 INS21 INS32 INS21 INS21 INS7 INS42 INS42 INS27 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS7 INS42 INS32 INS45 INS32 INS7 INS32 INS43 INS42 INS53 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42