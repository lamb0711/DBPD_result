GEODE-1659: put security properties in the cluster config and applied to all the members in the cluster.

 * break down request and apply cluster configuration into individual steps so that we can apply properties before starting services, and apply cache.xml after services are started
 * added more dunit tests

+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.internal.net.*;
-import org.apache.logging.log4j.Logger;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.*;
+    if(response == null)
+      return;
+
-   * Apply the cache-xml based configuration on this member
+   * Apply the cache-xml cluster configuration on this member
-   * @param groups List of groups this member belongs to.
+   * @param config this member's config.
-  public static void applyClusterConfiguration(Cache cache , ConfigurationResponse response, List<String> groups) {
+  public static void applyClusterXmlConfiguration(Cache cache , ConfigurationResponse response, DistributionConfig config) {
+    if(response == null || response.getRequestedConfiguration().isEmpty())
+      return;
+
+    List<String> groups = getGroups(config);
-    final Properties runtimeProps = new Properties();
-    if (!requestedConfiguration.isEmpty()) {
+    // apply the cluster config first
+    Configuration clusterConfiguration = requestedConfiguration.get(SharedConfiguration.CLUSTER_CONFIG);
+    if (clusterConfiguration != null) {
+      String cacheXmlContent = clusterConfiguration.getCacheXmlContent();
+      if (!StringUtils.isBlank(cacheXmlContent)) {
+        cacheXmlContentList.add(cacheXmlContent);
+      }
+    }
-      //Need to apply the properties before doing a loadCacheXml
-
-      Configuration clusterConfiguration = requestedConfiguration.get(SharedConfiguration.CLUSTER_CONFIG);
-      if (clusterConfiguration != null) {
-        String cacheXmlContent = clusterConfiguration.getCacheXmlContent();
+    // then apply the groups config
+    for (String group : groups) {
+      Configuration groupConfiguration = requestedConfiguration.get(group);
+      if (groupConfiguration != null) {
+        String cacheXmlContent = groupConfiguration.getCacheXmlContent();
-        runtimeProps.putAll(clusterConfiguration.getGemfireProperties());
-      
-      requestedConfiguration.remove(SharedConfiguration.CLUSTER_CONFIG);
-      for (String group : groups) {
-        Configuration groupConfiguration = requestedConfiguration.get(group);
-        if (groupConfiguration != null) {
-          String cacheXmlContent = groupConfiguration.getCacheXmlContent();
-          if (!StringUtils.isBlank(cacheXmlContent)) {
-            cacheXmlContentList.add(cacheXmlContent);
-          }
-          runtimeProps.putAll(groupConfiguration.getGemfireProperties());
+    }
+
+    // apply the requested cache xml
+    for (String cacheXmlContent : cacheXmlContentList) {
+      InputStream is = new ByteArrayInputStream(cacheXmlContent.getBytes());
+      try {
+        cache.loadCacheXml(is);
+      } finally {
+        try {
+          is.close();
+        } catch (IOException e) {
-      
-      DistributionConfig config = ((GemFireCacheImpl)cache).getSystem().getConfig();
+    }
+  }
-      Set<Object> attNames = runtimeProps.keySet();
+  /***
+   * Apply the gemfire properties cluster configuration on this member
+   * @param cache Cache created for this member
+   * @param response {@link ConfigurationResponse} containing the requested {@link Configuration}
+   * @param config this member's config
+   */
+  public static void applyClusterPropertiesConfiguration(Cache cache , ConfigurationResponse response, DistributionConfig config) {
+    if(response == null || response.getRequestedConfiguration().isEmpty())
+      return;
-      if (!attNames.isEmpty()) {
-        for (Object attNameObj : attNames) {
-          String attName = (String) attNameObj;
-          String attValue = runtimeProps.getProperty(attName) ;
-          try {
-            config.setAttribute(attName, attValue, ConfigSource.runtime());
-          } catch (IllegalArgumentException e) {
-            logger.info(e.getMessage());
-          } catch (UnmodifiableException e) {
-            logger.info(e.getMessage());
-          }
-        }
+    List<String> groups = getGroups(config);
+    Map<String, Configuration> requestedConfiguration = response.getRequestedConfiguration();
+
+    final Properties runtimeProps = new Properties();
+
+    // apply the cluster config first
+    Configuration clusterConfiguration = requestedConfiguration.get(SharedConfiguration.CLUSTER_CONFIG);
+    if (clusterConfiguration != null) {
+      runtimeProps.putAll(clusterConfiguration.getGemfireProperties());
+    }
+
+    // then apply the group config
+    for (String group : groups) {
+      Configuration groupConfiguration = requestedConfiguration.get(group);
+      if (groupConfiguration != null) {
+        runtimeProps.putAll(groupConfiguration.getGemfireProperties());
+    }
-      if (!cacheXmlContentList.isEmpty()) {
-        for (String cacheXmlContent : cacheXmlContentList) {
-          InputStream is = new ByteArrayInputStream(cacheXmlContent.getBytes());
-          try {
-            cache.loadCacheXml(is);
-          } finally {
-            try {
-              is.close();
-            } catch (IOException e) {
-            }
-          }
-        }
+    Set<Object> attNames = runtimeProps.keySet();
+    for (Object attNameObj : attNames) {
+      String attName = (String) attNameObj;
+      String attValue = runtimeProps.getProperty(attName) ;
+      try {
+        config.setAttribute(attName, attValue, ConfigSource.runtime());
+      } catch (IllegalArgumentException e) {
+        logger.info(e.getMessage());
+      } catch (UnmodifiableException e) {
+        logger.info(e.getMessage());
-   * @param groups The groups this member wants to be part of.
+   * @param config this member's configuration.
-  public static ConfigurationResponse requestConfigurationFromLocators(List<String> groups, List<String> locatorList) throws ClusterConfigurationNotAvailableException, UnknownHostException {
+  public static ConfigurationResponse requestConfigurationFromLocators(DistributionConfig config, List<String> locatorList) throws ClusterConfigurationNotAvailableException, UnknownHostException {
+    List<String> groups = ClusterConfigurationLoader.getGroups(config);
+    request.addGroups(SharedConfiguration.CLUSTER_CONFIG);
-  
- public static List<String> getGroups(String groupString) {
-   List<String> groups = new ArrayList<String>();
-   groups.add(SharedConfiguration.CLUSTER_CONFIG);
-   if (!StringUtils.isBlank(groupString)) {
-     groups.addAll((Arrays.asList(groupString.split(","))));
-   }
-   return groups;
- }
+  private static List<String> getGroups(DistributionConfig config) {
+    String groupString = config.getGroups();
+    List<String> groups = new ArrayList<String>();
+    if (!StringUtils.isBlank(groupString)) {
+      groups.addAll((Arrays.asList(groupString.split(","))));
+    }
+    return groups;
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS31 MOV29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 UPD42 MOV8 UPD83 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS60 MOV60 INS60 MOV25 INS70 MOV70 INS65 INS65 INS65 INS65 MOV43 UPD42 INS25 INS60 MOV60 MOV60 MOV60 INS25 MOV70 MOV60 INS43 UPD42 INS60 INS21 INS43 INS42 INS60 INS27 INS41 UPD66 UPD42 UPD66 INS42 INS42 INS42 INS27 INS41 MOV74 INS59 INS74 INS59 INS43 INS59 INS27 INS44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS65 INS42 INS66 INS27 INS41 MOV74 INS59 MOV27 INS8 UPD42 UPD66 UPD42 MOV42 INS74 INS59 INS32 INS42 MOV43 INS59 INS42 INS33 INS27 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS43 INS42 INS60 MOV25 INS42 INS42 INS27 INS32 INS42 INS32 MOV21 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS59 INS27 INS42 INS33 INS32 INS42 INS42 INS42 INS42 MOV27 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 MOV21 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL40 DEL32 DEL21