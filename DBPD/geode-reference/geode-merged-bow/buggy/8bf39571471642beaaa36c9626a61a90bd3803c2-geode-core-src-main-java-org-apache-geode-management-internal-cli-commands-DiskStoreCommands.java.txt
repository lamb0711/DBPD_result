Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-  
+
-  
-  @CliCommand(value=CliStrings.BACKUP_DISK_STORE, help=CliStrings.BACKUP_DISK_STORE__HELP)
-  @CliMetaData(relatedTopic={ CliStrings.TOPIC_GEODE_DISKSTORE })
+
+  @CliCommand(value = CliStrings.BACKUP_DISK_STORE, help = CliStrings.BACKUP_DISK_STORE__HELP)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-  
-  @CliOption(key=CliStrings.BACKUP_DISK_STORE__DISKDIRS,
-  unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-  help=CliStrings.BACKUP_DISK_STORE__DISKDIRS__HELP, 
-  mandatory = true)
-  String targetDir, 
-  @CliOption(key=CliStrings.BACKUP_DISK_STORE__BASELINEDIR,
-  help=CliStrings.BACKUP_DISK_STORE__BASELINEDIR__HELP) 
-  String baselineDir){
+
+      @CliOption(key = CliStrings.BACKUP_DISK_STORE__DISKDIRS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.BACKUP_DISK_STORE__DISKDIRS__HELP, mandatory = true) String targetDir,
+      @CliOption(key = CliStrings.BACKUP_DISK_STORE__BASELINEDIR,
+          help = CliStrings.BACKUP_DISK_STORE__BASELINEDIR__HELP) String baselineDir) {
-      GemFireCacheImpl cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();
+      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
-      BackupStatus backupStatus = null; 
-      
+      BackupStatus backupStatus = null;
+
-       backupStatus = AdminDistributedSystemImpl.backupAllMembers(dm, new File(targetDir), new File(baselineDir));
+        backupStatus = AdminDistributedSystemImpl.backupAllMembers(dm, new File(targetDir),
+            new File(baselineDir));
-       backupStatus = AdminDistributedSystemImpl.backupAllMembers(dm, new File(targetDir), null);
+        backupStatus = AdminDistributedSystemImpl.backupAllMembers(dm, new File(targetDir), null);
-      
-      Map<DistributedMember, Set<PersistentID>> backedupMemberDiskstoreMap = backupStatus.getBackedUpDiskStores();
-      
+
+      Map<DistributedMember, Set<PersistentID>> backedupMemberDiskstoreMap =
+          backupStatus.getBackedUpDiskStores();
+
-      
-      
+
+
-       
+
-        
+
-          Set<PersistentID> backedupDiskStores =  backedupMemberDiskstoreMap.get(member);
+          Set<PersistentID> backedupDiskStores = backedupMemberDiskstoreMap.get(member);
-          
+
-              
+
-              
+
-                writeToBackupDisktoreTable(backedupDiskStoresTable, memberName, UUID, hostName, directory);
+                writeToBackupDisktoreTable(backedupDiskStoresTable, memberName, UUID, hostName,
+                    directory);
-     
-     Set<PersistentID> offlineDiskStores =  backupStatus.getOfflineDiskStores();
-     
-     if (!offlineDiskStores.isEmpty()) {
-       SectionResultData offlineDiskStoresSection = crd.addSection();
-       TabularResultData offlineDiskStoresTable = offlineDiskStoresSection.addTable();
-       
-       offlineDiskStoresSection.setHeader(CliStrings.BACKUP_DISK_STORE_MSG_OFFLINE_DISK_STORES);
-       for (PersistentID offlineDiskStore : offlineDiskStores) {
-         offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_UUID, offlineDiskStore.getUUID().toString());
-         offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_HOST, offlineDiskStore.getHost().getHostName());
-         offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_DIRECTORY, offlineDiskStore.getDirectory());
-       }
-     }
-     result = ResultBuilder.buildResult(crd);
-     
+
+      Set<PersistentID> offlineDiskStores = backupStatus.getOfflineDiskStores();
+
+      if (!offlineDiskStores.isEmpty()) {
+        SectionResultData offlineDiskStoresSection = crd.addSection();
+        TabularResultData offlineDiskStoresTable = offlineDiskStoresSection.addTable();
+
+        offlineDiskStoresSection.setHeader(CliStrings.BACKUP_DISK_STORE_MSG_OFFLINE_DISK_STORES);
+        for (PersistentID offlineDiskStore : offlineDiskStores) {
+          offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_UUID,
+              offlineDiskStore.getUUID().toString());
+          offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_HOST,
+              offlineDiskStore.getHost().getHostName());
+          offlineDiskStoresTable.accumulate(CliStrings.BACKUP_DISK_STORE_MSG_DIRECTORY,
+              offlineDiskStore.getDirectory());
+        }
+      }
+      result = ResultBuilder.buildResult(crd);
+
-  private void writeToBackupDisktoreTable(TabularResultData backedupDiskStoreTable, String memberId, String UUID, String host, String directory) {
+
+  private void writeToBackupDisktoreTable(TabularResultData backedupDiskStoreTable, String memberId,
+      String UUID, String host, String directory) {
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-      
+
-       return ResultBuilder.createInfoResult(CliStrings.NO_CACHING_MEMBERS_FOUND_MESSAGE);
+        return ResultBuilder.createInfoResult(CliStrings.NO_CACHING_MEMBERS_FOUND_MESSAGE);
-     
+
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        CliStrings.LIST_DISK_STORE));
-    }
-    catch (VirtualMachineError e) {
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_DISK_STORE));
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.LIST_DISK_STORE__ERROR_MESSAGE,
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(
+          String.format(CliStrings.LIST_DISK_STORE__ERROR_MESSAGE, toString(t, isDebugging())));
-    final ResultCollector<?, ?> resultCollector = membersFunctionExecutor.execute(new ListDiskStoresFunction());
+    final ResultCollector<?, ?> resultCollector =
+        membersFunctionExecutor.execute(new ListDiskStoresFunction());
-    final List<DiskStoreDetails> distributedSystemMemberDiskStores = new ArrayList<DiskStoreDetails>(results.size());
+    final List<DiskStoreDetails> distributedSystemMemberDiskStores =
+        new ArrayList<DiskStoreDetails>(results.size());
-      if (result instanceof Set) { // ignore FunctionInvocationTargetExceptions and other Exceptions...
+      if (result instanceof Set) { // ignore FunctionInvocationTargetExceptions and other
+                                   // Exceptions...
-  protected Result toTabularResult(final List<DiskStoreDetails> diskStoreList) throws ResultDataException {
+  protected Result toTabularResult(final List<DiskStoreDetails> diskStoreList)
+      throws ResultDataException {
-    }
-    else {
-      return ResultBuilder.createInfoResult(CliStrings.LIST_DISK_STORE__DISK_STORES_NOT_FOUND_MESSAGE);
+    } else {
+      return ResultBuilder
+          .createInfoResult(CliStrings.LIST_DISK_STORE__DISK_STORES_NOT_FOUND_MESSAGE);
-  @CliCommand(value=CliStrings.CREATE_DISK_STORE, help=CliStrings.CREATE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=false, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE}, writesToSharedConfiguration=true)
+  @CliCommand(value = CliStrings.CREATE_DISK_STORE, help = CliStrings.CREATE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE},
+      writesToSharedConfiguration = true)
-  public Result createDiskStore(@CliOption(key=CliStrings.CREATE_DISK_STORE__NAME,
-                                           mandatory=true,
-                                           optionContext = ConverterHint.DISKSTORE_ALL, 
-                                           help=CliStrings.CREATE_DISK_STORE__NAME__HELP)
-                                String name,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION,
-                                           specifiedDefaultValue = "true", 
-                                           unspecifiedDefaultValue = "false",
-                                           help=CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION__HELP)
-                                boolean allowForceCompaction,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__AUTO_COMPACT,
-                                           specifiedDefaultValue = "true", 
-                                           unspecifiedDefaultValue = "true",
-                                           help=CliStrings.CREATE_DISK_STORE__AUTO_COMPACT__HELP)
-                                boolean autoCompact,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD,
-                                           unspecifiedDefaultValue="50",
-                                           help=CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD__HELP)
-                                int compactionThreshold,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE,
-                                           unspecifiedDefaultValue="1024",
-                                           help=CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE__HELP)
-                                int maxOplogSize,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__QUEUE_SIZE,
-                                           unspecifiedDefaultValue="0",
-                                           help=CliStrings.CREATE_DISK_STORE__QUEUE_SIZE__HELP)
-                                int queueSize,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__TIME_INTERVAL,
-                                           unspecifiedDefaultValue="1000",
-                                           help=CliStrings.CREATE_DISK_STORE__TIME_INTERVAL__HELP)
-                                long timeInterval,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE,
-                                           unspecifiedDefaultValue="32768",
-                                           help=CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE__HELP)
-                                int writeBufferSize,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE,
-                                           mandatory=true,
-                                           help=CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE__HELP,
-                                           optionContext=ConverterHint.STRING_DISABLER)
-                                @CliMetaData (valueSeparator = ",")
-                                String[] directoriesAndSizes,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__GROUP,
-                                           help=CliStrings.CREATE_DISK_STORE__GROUP__HELP,
-                                           optionContext=ConverterHint.MEMBERGROUP)
-                                @CliMetaData (valueSeparator = ",")
-                                String[] groups,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT, 
-                                           unspecifiedDefaultValue="90",
-                                           help=CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT__HELP)
-                                float diskUsageWarningPercentage,
-                                @CliOption(key=CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT, 
-                                           unspecifiedDefaultValue="99",
-                                           help=CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT__HELP)
-                                float diskUsageCriticalPercentage) {
-    
+  public Result createDiskStore(
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__NAME, mandatory = true,
+          optionContext = ConverterHint.DISKSTORE_ALL,
+          help = CliStrings.CREATE_DISK_STORE__NAME__HELP) String name,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION,
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
+          help = CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION__HELP) boolean allowForceCompaction,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__AUTO_COMPACT, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "true",
+          help = CliStrings.CREATE_DISK_STORE__AUTO_COMPACT__HELP) boolean autoCompact,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD,
+          unspecifiedDefaultValue = "50",
+          help = CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD__HELP) int compactionThreshold,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE,
+          unspecifiedDefaultValue = "1024",
+          help = CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE__HELP) int maxOplogSize,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__QUEUE_SIZE, unspecifiedDefaultValue = "0",
+          help = CliStrings.CREATE_DISK_STORE__QUEUE_SIZE__HELP) int queueSize,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__TIME_INTERVAL,
+          unspecifiedDefaultValue = "1000",
+          help = CliStrings.CREATE_DISK_STORE__TIME_INTERVAL__HELP) long timeInterval,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE,
+          unspecifiedDefaultValue = "32768",
+          help = CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE__HELP) int writeBufferSize,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE, mandatory = true,
+          help = CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE__HELP,
+          optionContext = ConverterHint.STRING_DISABLER) @CliMetaData(
+              valueSeparator = ",") String[] directoriesAndSizes,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__GROUP,
+          help = CliStrings.CREATE_DISK_STORE__GROUP__HELP,
+          optionContext = ConverterHint.MEMBERGROUP) @CliMetaData(
+              valueSeparator = ",") String[] groups,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT,
+          unspecifiedDefaultValue = "90",
+          help = CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT__HELP) float diskUsageWarningPercentage,
+      @CliOption(key = CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT,
+          unspecifiedDefaultValue = "99",
+          help = CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT__HELP) float diskUsageCriticalPercentage) {
+
-      diskStoreAttributes.maxOplogSizeInBytes = maxOplogSize * (1024*1024);
+      diskStoreAttributes.maxOplogSizeInBytes = maxOplogSize * (1024 * 1024);
-      
+
-      
+
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(new CreateDiskStoreFunction(), new Object[] { name, diskStoreAttributes },
-          targetMembers);
+      ResultCollector<?, ?> rc = CliUtil.executeFunction(new CreateDiskStoreFunction(),
+          new Object[] {name, diskStoreAttributes}, targetMembers);
-          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName() + ": "
-              + result.getThrowable().getMessage());
+          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName()
+              + ": " + result.getThrowable().getMessage());
-          
+
-      
+
-      
+
-        result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, groups));
+        result
+            .setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, groups));
-      
+
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.CREATE_DISK_STORE__ERROR_WHILE_CREATING_REASON_0,
-          new Object[] { th.getMessage() }));
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.CREATE_DISK_STORE__ERROR_WHILE_CREATING_REASON_0,
+              new Object[] {th.getMessage()}));
-    
-  @CliCommand(value=CliStrings.COMPACT_DISK_STORE, help=CliStrings.COMPACT_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=false, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE})
+
+  @CliCommand(value = CliStrings.COMPACT_DISK_STORE, help = CliStrings.COMPACT_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-  public Result compactDiskStore(@CliOption(key=CliStrings.COMPACT_DISK_STORE__NAME,
-                                            mandatory=true,
-                                            optionContext = ConverterHint.DISKSTORE_ALL, 
-                                            help=CliStrings.COMPACT_DISK_STORE__NAME__HELP)
-                                 String diskStoreName,
-                                 @CliOption(key=CliStrings.COMPACT_DISK_STORE__GROUP,
-                                            unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                                            help=CliStrings.COMPACT_DISK_STORE__GROUP__HELP,
-                                            optionContext=ConverterHint.STRING_DISABLER)
-                                 @CliMetaData (valueSeparator = ",")
-                                 String[] groups) {
+  public Result compactDiskStore(
+      @CliOption(key = CliStrings.COMPACT_DISK_STORE__NAME, mandatory = true,
+          optionContext = ConverterHint.DISKSTORE_ALL,
+          help = CliStrings.COMPACT_DISK_STORE__NAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.COMPACT_DISK_STORE__GROUP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.COMPACT_DISK_STORE__GROUP__HELP,
+          optionContext = ConverterHint.STRING_DISABLER) @CliMetaData(
+              valueSeparator = ",") String[] groups) {
-        result = ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.COMPACT_DISK_STORE__DISKSTORE_0_DOESNOT_EXIST, new Object[] {diskStoreName}));
+        result = ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.COMPACT_DISK_STORE__DISKSTORE_0_DOESNOT_EXIST,
+                new Object[] {diskStoreName}));
-        InternalDistributedSystem ds = (InternalDistributedSystem)getCache().getDistributedSystem();
-  
-        Map<DistributedMember, PersistentID> overallCompactInfo = new HashMap<DistributedMember, PersistentID>();
-        
+        InternalDistributedSystem ds =
+            (InternalDistributedSystem) getCache().getDistributedSystem();
+
+        Map<DistributedMember, PersistentID> overallCompactInfo =
+            new HashMap<DistributedMember, PersistentID>();
+
-        
+
-        
-        String  groupInfo = "";
+
+        String groupInfo = "";
-          groupInfo = CliStrings.format(CliStrings.COMPACT_DISK_STORE__MSG__FOR_GROUP, new Object[] {Arrays.toString(groups) + "."});
-          final Set<InternalDistributedMember> selectedMembers = new HashSet<InternalDistributedMember>();
+          groupInfo = CliStrings.format(CliStrings.COMPACT_DISK_STORE__MSG__FOR_GROUP,
+              new Object[] {Arrays.toString(groups) + "."});
+          final Set<InternalDistributedMember> selectedMembers =
+              new HashSet<InternalDistributedMember>();
-          for (Iterator<InternalDistributedMember> iterator = allMembers.iterator(); iterator.hasNext();) {
+          for (Iterator<InternalDistributedMember> iterator = allMembers.iterator(); iterator
+              .hasNext();) {
-          
+
-        
+
-          result = ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.COMPACT_DISK_STORE__NO_MEMBERS_FOUND_IN_SPECIFED_GROUP, new Object[] {Arrays.toString(groups)}));
+          result = ResultBuilder.createUserErrorResult(
+              CliStrings.format(CliStrings.COMPACT_DISK_STORE__NO_MEMBERS_FOUND_IN_SPECIFED_GROUP,
+                  new Object[] {Arrays.toString(groups)}));
-          
+
-            Map<DistributedMember, PersistentID> memberCompactInfo = CompactRequest.send(ds.getDistributionManager(), diskStoreName, allMembers);
+            Map<DistributedMember, PersistentID> memberCompactInfo =
+                CompactRequest.send(ds.getDistributionManager(), diskStoreName, allMembers);
-            LogWrapper.getInstance().info("compact disk-store \""+diskStoreName+"\" message was scheduled to be sent to but was not send to "+notExecutedMembers);
+            LogWrapper.getInstance()
+                .info("compact disk-store \"" + diskStoreName
+                    + "\" message was scheduled to be sent to but was not send to "
+                    + notExecutedMembers);
-  
+
-            
+
-    
+
-    
+
-                SectionResultData subSection = section.addSection("DiskStore"+memberId);
+                SectionResultData subSection = section.addSection("DiskStore" + memberId);
-            result = ResultBuilder.createInfoResult(CliStrings.COMPACT_DISK_STORE__COMPACTION_ATTEMPTED_BUT_NOTHING_TO_COMPACT);
+            result = ResultBuilder.createInfoResult(
+                CliStrings.COMPACT_DISK_STORE__COMPACTION_ATTEMPTED_BUT_NOTHING_TO_COMPACT);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COMPACT_DISK_STORE__ERROR_WHILE_COMPACTING_REASON_0, new Object[] {e.getMessage()}));
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.COMPACT_DISK_STORE__ERROR_WHILE_COMPACTING_REASON_0,
+              new Object[] {e.getMessage()}));
-    
+
-  
+
-    
+
-    
+
-      String[] value = entry.getValue(); 
+      String[] value = entry.getValue();
-    
+
-  @CliCommand(value=CliStrings.COMPACT_OFFLINE_DISK_STORE, help=CliStrings.COMPACT_OFFLINE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliCommand(value = CliStrings.COMPACT_OFFLINE_DISK_STORE,
+      help = CliStrings.COMPACT_OFFLINE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-                 @CliOption(key=CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME,
-                            mandatory=true,
-                            help=CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME__HELP)
-                 String diskStoreName,
-                 @CliOption(key=CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS,
-                            mandatory=true,
-                            unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                            help=CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS__HELP,
-                            optionContext=ConverterHint.DIRS+":"+ConverterHint.STRING_DISABLER)
-                 @CliMetaData (valueSeparator = ",")
-                 String[] diskDirs,
-                 @CliOption(key=CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE,
-                            unspecifiedDefaultValue="-1",
-                            help=CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE__HELP)
-                 long maxOplogSize,
-                 @CliOption(key=CliStrings.COMPACT_OFFLINE_DISK_STORE__J,
-                            unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                            help=CliStrings.COMPACT_OFFLINE_DISK_STORE__J__HELP)
-                 @CliMetaData (valueSeparator = ",")
-                 String[] jvmProps) {
+      @CliOption(key = CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME, mandatory = true,
+          help = CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS, mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS__HELP,
+          optionContext = ConverterHint.DIRS + ":" + ConverterHint.STRING_DISABLER) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE,
+          unspecifiedDefaultValue = "-1",
+          help = CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE__HELP) long maxOplogSize,
+      @CliOption(key = CliStrings.COMPACT_OFFLINE_DISK_STORE__J,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.COMPACT_OFFLINE_DISK_STORE__J__HELP) @CliMetaData(
+              valueSeparator = ",") String[] jvmProps) {
-        throw new IllegalArgumentException("Could not find "+CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS + ": \""+validatedDirectories+"\"");
+        throw new IllegalArgumentException(
+            "Could not find " + CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS + ": \""
+                + validatedDirectories + "\"");
-      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"+ File.separatorChar + "java");
-      
+      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"
+          + File.separatorChar + "java");
+
-          
+
-      
-      commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME+"="+diskStoreName);
-      
+
+      commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__NAME + "=" + diskStoreName);
+
-        commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS+"="+builder.toString());
+        commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__DISKDIRS + "=" + builder.toString());
-      commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE+"="+maxOplogSize);
+      commandList.add(CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" + maxOplogSize);
-      String fieldsMessage = (maxOplogSize != -1 ? CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" +maxOplogSize + "," : "");
+      String fieldsMessage = (maxOplogSize != -1
+          ? CliStrings.COMPACT_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" + maxOplogSize + "," : "");
-      String errorString = CliStrings.format(CliStrings.COMPACT_OFFLINE_DISK_STORE__MSG__ERROR_WHILE_COMPACTING_DISKSTORE_0_WITH_1_REASON_2, new Object[] {diskStoreName, fieldsMessage});
+      String errorString = CliStrings.format(
+          CliStrings.COMPACT_OFFLINE_DISK_STORE__MSG__ERROR_WHILE_COMPACTING_DISKSTORE_0_WITH_1_REASON_2,
+          new Object[] {diskStoreName, fieldsMessage});
-          // Process.exitValue() throws IllegalThreadStateException if Process 
+          // Process.exitValue() throws IllegalThreadStateException if Process
-  
-  @CliCommand(value=CliStrings.UPGRADE_OFFLINE_DISK_STORE, help=CliStrings.UPGRADE_OFFLINE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE })
-  public Result upgradeOfflineDiskStore(
-      @CliOption(key=CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME, 
-      mandatory=true,
-      help=CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME__HELP)
-      String diskStoreName,
-      @CliOption(key=CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS,
-      mandatory=true,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS__HELP,
-      optionContext=ConverterHint.DIRS+":"+ConverterHint.STRING_DISABLER)
-      @CliMetaData (valueSeparator = ",")
-      String[] diskDirs,
-      @CliOption(key=CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE,
-      unspecifiedDefaultValue="-1",
-      help=CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE__HELP)
-      long maxOplogSize,
-      @CliOption(key=CliStrings.UPGRADE_OFFLINE_DISK_STORE__J,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.UPGRADE_OFFLINE_DISK_STORE__J__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] jvmProps) throws InterruptedException {
-    
+  @CliCommand(value = CliStrings.UPGRADE_OFFLINE_DISK_STORE,
+      help = CliStrings.UPGRADE_OFFLINE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
+  public Result upgradeOfflineDiskStore(
+      @CliOption(key = CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME, mandatory = true,
+          help = CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS, mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS__HELP,
+          optionContext = ConverterHint.DIRS + ":" + ConverterHint.STRING_DISABLER) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE,
+          unspecifiedDefaultValue = "-1",
+          help = CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE__HELP) long maxOplogSize,
+      @CliOption(key = CliStrings.UPGRADE_OFFLINE_DISK_STORE__J,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.UPGRADE_OFFLINE_DISK_STORE__J__HELP) @CliMetaData(
+              valueSeparator = ",") String[] jvmProps)
+      throws InterruptedException {
+
+
-      
+
-        throw new IllegalArgumentException("Could not find "+CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS + ": \""+validatedDirectories+"\"");
+        throw new IllegalArgumentException(
+            "Could not find " + CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS + ": \""
+                + validatedDirectories + "\"");
-      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"+ File.separatorChar + "java");
+      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"
+          + File.separatorChar + "java");
-      
-      commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME+"="+diskStoreName);
-      
+
+      commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__NAME + "=" + diskStoreName);
+
-        commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS+"="+builder.toString());
+        commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__DISKDIRS + "=" + builder.toString());
-      commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE+"="+maxOplogSize);
+      commandList.add(CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" + maxOplogSize);
-      //procBuilder.redirectErrorStream(true);
+      // procBuilder.redirectErrorStream(true);
-      //upgraderProcess.waitFor();
+      // upgraderProcess.waitFor();
-      String fieldsMessage = (maxOplogSize != -1 ? CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" +maxOplogSize + "," : "");
+      String fieldsMessage = (maxOplogSize != -1
+          ? CliStrings.UPGRADE_OFFLINE_DISK_STORE__MAXOPLOGSIZE + "=" + maxOplogSize + "," : "");
-      String errorString = CliStrings.format(CliStrings.UPGRADE_OFFLINE_DISK_STORE__MSG__ERROR_WHILE_COMPACTING_DISKSTORE_0_WITH_1_REASON_2, new Object[] {diskStoreName, fieldsMessage});
+      String errorString = CliStrings.format(
+          CliStrings.UPGRADE_OFFLINE_DISK_STORE__MSG__ERROR_WHILE_COMPACTING_DISKSTORE_0_WITH_1_REASON_2,
+          new Object[] {diskStoreName, fieldsMessage});
-  
-  
-  
+
+
+
-    File diskDir = null; 
+    File diskDir = null;
-    } 
+    }
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-  public Result describeDiskStore(@CliOption(key = CliStrings.DESCRIBE_DISK_STORE__MEMBER, mandatory = true, optionContext = ConverterHint.MEMBERIDNAME, help = CliStrings.DESCRIBE_DISK_STORE__MEMBER__HELP)
-                                  final String memberName,
-                                  @CliOption(key = CliStrings.DESCRIBE_DISK_STORE__NAME, mandatory = true, optionContext = ConverterHint.DISKSTORE_ALL, help = CliStrings.DESCRIBE_DISK_STORE__NAME__HELP)
-                                  final String diskStoreName) {
+  public Result describeDiskStore(
+      @CliOption(key = CliStrings.DESCRIBE_DISK_STORE__MEMBER, mandatory = true,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.DESCRIBE_DISK_STORE__MEMBER__HELP) final String memberName,
+      @CliOption(key = CliStrings.DESCRIBE_DISK_STORE__NAME, mandatory = true,
+          optionContext = ConverterHint.DISKSTORE_ALL,
+          help = CliStrings.DESCRIBE_DISK_STORE__NAME__HELP) final String diskStoreName) {
-    }
-    catch (DiskStoreNotFoundException e) {
+    } catch (DiskStoreNotFoundException e) {
-    }
-    catch (MemberNotFoundException e) {
+    } catch (MemberNotFoundException e) {
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        CliStrings.DESCRIBE_DISK_STORE));
-    }
-    catch (VirtualMachineError e) {
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.DESCRIBE_DISK_STORE));
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.DESCRIBE_DISK_STORE__ERROR_MESSAGE,
-        memberName, diskStoreName, toString(t, isDebugging())));
+      return ResultBuilder
+          .createGemFireErrorResult(String.format(CliStrings.DESCRIBE_DISK_STORE__ERROR_MESSAGE,
+              memberName, diskStoreName, toString(t, isDebugging())));
-  protected DiskStoreDetails getDiskStoreDescription(final String memberName, final String diskStoreName) {
-    final DistributedMember member = getMember(getCache(), memberName); // may throw a MemberNotFoundException
+  protected DiskStoreDetails getDiskStoreDescription(final String memberName,
+      final String diskStoreName) {
+    final DistributedMember member = getMember(getCache(), memberName); // may throw a
+                                                                        // MemberNotFoundException
-    final ResultCollector<?, ?> resultCollector = getMembersFunctionExecutor(Collections.singleton(member))
-      .withArgs(diskStoreName).execute(new DescribeDiskStoreFunction());
+    final ResultCollector<?, ?> resultCollector =
+        getMembersFunctionExecutor(Collections.singleton(member)).withArgs(diskStoreName)
+            .execute(new DescribeDiskStoreFunction());
-    }
-    else if (result instanceof DiskStoreNotFoundException) { // bad disk store name...
+    } else if (result instanceof DiskStoreNotFoundException) { // bad disk store name...
-    }
-    else { // unknown and unexpected return type...
+    } else { // unknown and unexpected return type...
-            "Exception (%1$s) occurred while executing '%2$s' on member (%3$s) with disk store (%4$s).",
-              ClassUtils.getClassName(cause), CliStrings.DESCRIBE_DISK_STORE, memberName, diskStoreName), cause);
-        }
-        else {
+              "Exception (%1$s) occurred while executing '%2$s' on member (%3$s) with disk store (%4$s).",
+              ClassUtils.getClassName(cause), CliStrings.DESCRIBE_DISK_STORE, memberName,
+              diskStoreName), cause);
+        } else {
-            "Received an unexpected result of type (%1$s) while executing '%2$s' on member (%3$s) with disk store (%4$s).",
-              ClassUtils.getClassName(result), CliStrings.DESCRIBE_DISK_STORE, memberName, diskStoreName), null);
+              "Received an unexpected result of type (%1$s) while executing '%2$s' on member (%3$s) with disk store (%4$s).",
+              ClassUtils.getClassName(result), CliStrings.DESCRIBE_DISK_STORE, memberName,
+              diskStoreName), null);
-      throw new RuntimeException(CliStrings.format(CliStrings.UNEXPECTED_RETURN_TYPE_EXECUTING_COMMAND_ERROR_MESSAGE,
-        ClassUtils.getClassName(result), CliStrings.DESCRIBE_DISK_STORE), cause);
+      throw new RuntimeException(
+          CliStrings.format(CliStrings.UNEXPECTED_RETURN_TYPE_EXECUTING_COMMAND_ERROR_MESSAGE,
+              ClassUtils.getClassName(result), CliStrings.DESCRIBE_DISK_STORE),
+          cause);
-    diskStoreSection.addData("Allow Force Compaction", toString(diskStoreDetails.isAllowForceCompaction(), "Yes", "No"));
-    diskStoreSection.addData("Auto Compaction", toString(diskStoreDetails.isAutoCompact(), "Yes", "No"));
+    diskStoreSection.addData("Allow Force Compaction",
+        toString(diskStoreDetails.isAllowForceCompaction(), "Yes", "No"));
+    diskStoreSection.addData("Auto Compaction",
+        toString(diskStoreDetails.isAutoCompact(), "Yes", "No"));
-    diskStoreSection.addData("Disk Usage Warning Percentage", diskStoreDetails.getDiskUsageWarningPercentage());
-    diskStoreSection.addData("Disk Usage Critical Percentage", diskStoreDetails.getDiskUsageCriticalPercentage());
+    diskStoreSection.addData("Disk Usage Warning Percentage",
+        diskStoreDetails.getDiskUsageWarningPercentage());
+    diskStoreSection.addData("Disk Usage Critical Percentage",
+        diskStoreDetails.getDiskUsageCriticalPercentage());
-      toString(diskStoreDetails.isPdxSerializationMetaDataStored(), "Yes", "No"));
+        toString(diskStoreDetails.isPdxSerializationMetaDataStored(), "Yes", "No"));
-      regionTable.accumulate("Overflow To Disk", toString(regionDetails.isOverflowToDisk(), "Yes", "No"));
+      regionTable.accumulate("Overflow To Disk",
+          toString(regionDetails.isOverflowToDisk(), "Yes", "No"));
-    for (DiskStoreDetails.CacheServerDetails cacheServerDetails : diskStoreDetails.iterateCacheServers()) {
+    for (DiskStoreDetails.CacheServerDetails cacheServerDetails : diskStoreDetails
+        .iterateCacheServers()) {
-    for (DiskStoreDetails.AsyncEventQueueDetails asyncEventQueueDetails : diskStoreDetails.iterateAsyncEventQueues()) {
+    for (DiskStoreDetails.AsyncEventQueueDetails asyncEventQueueDetails : diskStoreDetails
+        .iterateAsyncEventQueues()) {
-  @CliCommand(value = CliStrings.REVOKE_MISSING_DISK_STORE, help = CliStrings.REVOKE_MISSING_DISK_STORE__HELP)
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliCommand(value = CliStrings.REVOKE_MISSING_DISK_STORE,
+      help = CliStrings.REVOKE_MISSING_DISK_STORE__HELP)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-  public Result revokeMissingDiskStore(
-      @CliOption(key = CliStrings.REVOKE_MISSING_DISK_STORE__ID, mandatory = true, help = CliStrings.REVOKE_MISSING_DISK_STORE__ID__HELP)
-      String id) {
+  public Result revokeMissingDiskStore(@CliOption(key = CliStrings.REVOKE_MISSING_DISK_STORE__ID,
+      mandatory = true, help = CliStrings.REVOKE_MISSING_DISK_STORE__ID__HELP) String id) {
-      DistributedSystemMXBean dsMXBean = ManagementService.getManagementService(CacheFactory.getAnyInstance())
-          .getDistributedSystemMXBean();
+      DistributedSystemMXBean dsMXBean = ManagementService
+          .getManagementService(CacheFactory.getAnyInstance()).getDistributedSystemMXBean();
-        return ResultBuilder.createGemFireErrorResult("An error occurred while revoking missing disk stores: " + th);
+        return ResultBuilder.createGemFireErrorResult(
+            "An error occurred while revoking missing disk stores: " + th);
-      return ResultBuilder.createGemFireErrorResult("An error occurred while revoking missing disk stores: " + th.getMessage());
+      return ResultBuilder.createGemFireErrorResult(
+          "An error occurred while revoking missing disk stores: " + th.getMessage());
-  @CliCommand(value = CliStrings.SHOW_MISSING_DISK_STORE, help = CliStrings.SHOW_MISSING_DISK_STORE__HELP)
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliCommand(value = CliStrings.SHOW_MISSING_DISK_STORE,
+      help = CliStrings.SHOW_MISSING_DISK_STORE__HELP)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-          CliStrings.SHOW_MISSING_DISK_STORE));
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.SHOW_MISSING_DISK_STORE));
-    if (t.getMessage() == null) {
-      return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t));
-    }
-    return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t.getMessage()));
+      if (t.getMessage() == null) {
+        return ResultBuilder.createGemFireErrorResult(
+            String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t));
+      }
+      return ResultBuilder.createGemFireErrorResult(
+          String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t.getMessage()));
-    final ResultCollector<?, ?> resultCollector = membersFunctionExecutor.execute(new ShowMissingDiskStoresFunction());
+    final ResultCollector<?, ?> resultCollector =
+        membersFunctionExecutor.execute(new ShowMissingDiskStoresFunction());
-    for (final Object result: results) {
-      if (result instanceof Set) { // ignore FunctionInvocationTargetExceptions and other Exceptions...
+    for (final Object result : results) {
+      if (result instanceof Set) { // ignore FunctionInvocationTargetExceptions and other
+                                   // Exceptions...
-  protected Result toMissingDiskStoresTabularResult(final List<Object> resultDetails) throws ResultDataException {
+  protected Result toMissingDiskStoresTabularResult(final List<Object> resultDetails)
+      throws ResultDataException {
-      for (ColocatedRegionDetails colocatedRegionDetails:missingColocatedRegions) {
+      for (ColocatedRegionDetails colocatedRegionDetails : missingColocatedRegions) {
-  @CliCommand(value=CliStrings.DESCRIBE_OFFLINE_DISK_STORE, help=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE })
+  @CliCommand(value = CliStrings.DESCRIBE_OFFLINE_DISK_STORE,
+      help = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-      @CliOption (key=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKSTORENAME, 
-          mandatory=true,
-          help=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKSTORENAME__HELP)
-        String diskStoreName,
-      @CliOption (key=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKDIRS,
-          mandatory=true,
-          help=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKDIRS__HELP)
-      @CliMetaData (valueSeparator = ",")
-        String[] diskDirs,
-      @CliOption (key=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__PDX_TYPES,
+      @CliOption(key = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKSTORENAME, mandatory = true,
+          help = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKSTORENAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKDIRS, mandatory = true,
+          help = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__DISKDIRS__HELP) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__PDX_TYPES,
-          help=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__PDX_TYPES__HELP)
-      Boolean listPdxTypes,
-      @CliOption  (key=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__REGIONNAME, 
-          help=CliStrings.DESCRIBE_OFFLINE_DISK_STORE__REGIONNAME__HELP,
-          unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE)
-        String regionName) {
+          help = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__PDX_TYPES__HELP) Boolean listPdxTypes,
+      @CliOption(key = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__REGIONNAME,
+          help = CliStrings.DESCRIBE_OFFLINE_DISK_STORE__REGIONNAME__HELP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE) String regionName) {
-      
+
-      
+
-      
+
-        return ResultBuilder.createGemFireErrorResult("An error occurred while describing offline disk stores: " + th);
+        return ResultBuilder.createGemFireErrorResult(
+            "An error occurred while describing offline disk stores: " + th);
-      return ResultBuilder.createGemFireErrorResult("An error occurred while describing offline disk stores: " + th.getMessage());
+      return ResultBuilder.createGemFireErrorResult(
+          "An error occurred while describing offline disk stores: " + th.getMessage());
-  
-  @CliCommand(value=CliStrings.EXPORT_OFFLINE_DISK_STORE, help=CliStrings.EXPORT_OFFLINE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE })
+
+  @CliCommand(value = CliStrings.EXPORT_OFFLINE_DISK_STORE,
+      help = CliStrings.EXPORT_OFFLINE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-      @CliOption (key=CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKSTORENAME, 
-          mandatory=true,
-          help=CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKSTORENAME__HELP)
-        String diskStoreName,
-      @CliOption (key=CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKDIRS,
-          mandatory=true,
-          help=CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKDIRS__HELP)
-      @CliMetaData (valueSeparator = ",")
-        String[] diskDirs,
-      @CliOption  (key=CliStrings.EXPORT_OFFLINE_DISK_STORE__DIR,
-          mandatory=true,
-          help=CliStrings.EXPORT_OFFLINE_DISK_STORE__DIR__HELP)         
-        String dir) {
+      @CliOption(key = CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKSTORENAME, mandatory = true,
+          help = CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKSTORENAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKDIRS, mandatory = true,
+          help = CliStrings.EXPORT_OFFLINE_DISK_STORE__DISKDIRS__HELP) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.EXPORT_OFFLINE_DISK_STORE__DIR, mandatory = true,
+          help = CliStrings.EXPORT_OFFLINE_DISK_STORE__DIR__HELP) String dir) {
-      
+
-      
-      //Note, this can consume a lot of memory, so this should
-      //not be moved to a separate process unless we provide a way for the user
-      //to configure the size of that process.
+
+      // Note, this can consume a lot of memory, so this should
+      // not be moved to a separate process unless we provide a way for the user
+      // to configure the size of that process.
-      String resultString = CliStrings.format(CliStrings.EXPORT_OFFLINE_DISK_STORE__SUCCESS,diskStoreName, dir);
+      String resultString =
+          CliStrings.format(CliStrings.EXPORT_OFFLINE_DISK_STORE__SUCCESS, diskStoreName, dir);
-      return ResultBuilder
-          .createGemFireErrorResult(CliStrings.format(CliStrings.EXPORT_OFFLINE_DISK_STORE__ERROR,diskStoreName, th.toString()));
+      return ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.EXPORT_OFFLINE_DISK_STORE__ERROR, diskStoreName, th.toString()));
-  
+
-  @CliCommand(value=CliStrings.VALIDATE_DISK_STORE, help=CliStrings.VALIDATE_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE }) //offline command
+  @CliCommand(value = CliStrings.VALIDATE_DISK_STORE, help = CliStrings.VALIDATE_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE}) // offline
+                                                                                    // command
-      @CliOption(key=CliStrings.VALIDATE_DISK_STORE__NAME, mandatory=true,
-                  help=CliStrings.VALIDATE_DISK_STORE__NAME__HELP)
-                  String diskStoreName,
-      @CliOption(key=CliStrings.VALIDATE_DISK_STORE__DISKDIRS,
-                  mandatory=true,
-                  unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,                 
-                  help=CliStrings.VALIDATE_DISK_STORE__DISKDIRS__HELP)
-      @CliMetaData (valueSeparator = ",")
-                  String[] diskDirs,
-      @CliOption(key=CliStrings.VALIDATE_DISK_STORE__J,
-                  unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                  help=CliStrings.VALIDATE_DISK_STORE__J__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] jvmProps) {   
+      @CliOption(key = CliStrings.VALIDATE_DISK_STORE__NAME, mandatory = true,
+          help = CliStrings.VALIDATE_DISK_STORE__NAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.VALIDATE_DISK_STORE__DISKDIRS, mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.VALIDATE_DISK_STORE__DISKDIRS__HELP) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.VALIDATE_DISK_STORE__J,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.VALIDATE_DISK_STORE__J__HELP) @CliMetaData(
+              valueSeparator = ",") String[] jvmProps) {
-      
+
-      commandList.add(System.getProperty("java.home") + File.separatorChar
-          + "bin" + File.separatorChar + "java");
+      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"
+          + File.separatorChar + "java");
-      
+
-      
-      //Pass any java options on to the command
+
+      // Pass any java options on to the command
-      return ResultBuilder
-          .createGemFireErrorResult(CliStrings.format(CliStrings.VALIDATE_DISK_STORE__MSG__IO_ERROR,diskStoreName, ex.getMessage() ));
+      return ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.VALIDATE_DISK_STORE__MSG__IO_ERROR, diskStoreName, ex.getMessage()));
-//      StringPrintWriter s = new StringPrintWriter();
-//      ex.printStackTrace(s);
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.VALIDATE_DISK_STORE__MSG__ERROR,diskStoreName, ex.getMessage()));
+      // StringPrintWriter s = new StringPrintWriter();
+      // ex.printStackTrace(s);
+      return ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.VALIDATE_DISK_STORE__MSG__ERROR, diskStoreName, ex.getMessage()));
-  
-  
-  @CliCommand(value=CliStrings.ALTER_DISK_STORE, help=CliStrings.ALTER_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE })
+
+
+  @CliCommand(value = CliStrings.ALTER_DISK_STORE, help = CliStrings.ALTER_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__DISKSTORENAME, 
-      mandatory=true,
-      help=CliStrings.ALTER_DISK_STORE__DISKSTORENAME__HELP)
-      String diskStoreName,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__REGIONNAME, 
-      mandatory=true,
-      help=CliStrings.ALTER_DISK_STORE__REGIONNAME__HELP)
-      String regionName, 
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__DISKDIRS,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__DISKDIRS__HELP,
-      mandatory=true)
-      @CliMetaData (valueSeparator = ",")
-      String[] diskDirs,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__COMPRESSOR,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      specifiedDefaultValue="none",
-      help=CliStrings.ALTER_DISK_STORE__COMPRESSOR__HELP)
-      String compressorClassName,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__CONCURRENCY__LEVEL,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__CONCURRENCY__LEVEL__HELP)
-      Integer concurrencyLevel,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__STATISTICS__ENABLED,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__STATISTICS__ENABLED__HELP)
-      Boolean statisticsEnabled, 
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__INITIAL__CAPACITY,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__INITIAL__CAPACITY__HELP)
-      Integer initialCapacity, 
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__LOAD__FACTOR,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__LOAD__FACTOR__HELP)
-      Float loadFactor,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ACTION,
-      help=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ACTION__HELP)
-      String lruEvictionAction,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ALGORITHM,
-      help=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ALGORITHM__HELP)
-      String lruEvictionAlgo,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__LIMIT,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__LRU__EVICTION__LIMIT__HELP)
-      Integer lruEvictionLimit,
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__OFF_HEAP,
-      unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-      help=CliStrings.ALTER_DISK_STORE__OFF_HEAP__HELP)
-      Boolean offHeap, 
-      @CliOption  (key=CliStrings.ALTER_DISK_STORE__REMOVE,
-      help=CliStrings.ALTER_DISK_STORE__REMOVE__HELP,
-      mandatory = false,
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false")
-      boolean remove) {
-    
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__DISKSTORENAME, mandatory = true,
+          help = CliStrings.ALTER_DISK_STORE__DISKSTORENAME__HELP) String diskStoreName,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__REGIONNAME, mandatory = true,
+          help = CliStrings.ALTER_DISK_STORE__REGIONNAME__HELP) String regionName,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__DISKDIRS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__DISKDIRS__HELP,
+          mandatory = true) @CliMetaData(valueSeparator = ",") String[] diskDirs,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__COMPRESSOR,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          specifiedDefaultValue = "none",
+          help = CliStrings.ALTER_DISK_STORE__COMPRESSOR__HELP) String compressorClassName,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__CONCURRENCY__LEVEL,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__CONCURRENCY__LEVEL__HELP) Integer concurrencyLevel,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__STATISTICS__ENABLED,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__STATISTICS__ENABLED__HELP) Boolean statisticsEnabled,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__INITIAL__CAPACITY,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__INITIAL__CAPACITY__HELP) Integer initialCapacity,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__LOAD__FACTOR,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__LOAD__FACTOR__HELP) Float loadFactor,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ACTION,
+          help = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ACTION__HELP) String lruEvictionAction,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ALGORITHM,
+          help = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__ALGORITHM__HELP) String lruEvictionAlgo,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__LIMIT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__LRU__EVICTION__LIMIT__HELP) Integer lruEvictionLimit,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__OFF_HEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.ALTER_DISK_STORE__OFF_HEAP__HELP) Boolean offHeap,
+      @CliOption(key = CliStrings.ALTER_DISK_STORE__REMOVE,
+          help = CliStrings.ALTER_DISK_STORE__REMOVE__HELP, mandatory = false,
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false") boolean remove) {
+
-    
+
-      
+
-        for (int i=0; i < diskDirs.length; i++) {
+        for (int i = 0; i < diskDirs.length; i++) {
-      
+
-      if ((lruEvictionAlgo != null) ||
-          (lruEvictionAction != null) ||
-          (lruEvictionLimit != null) ||
-          (concurrencyLevel != null) ||
-          (initialCapacity != null) ||
-          (loadFactor != null) ||
-          (compressorClassName != null) ||
-          (offHeap != null) ||
-          (statisticsEnabled != null)
-          ) {
+      if ((lruEvictionAlgo != null) || (lruEvictionAction != null) || (lruEvictionLimit != null)
+          || (concurrencyLevel != null) || (initialCapacity != null) || (loadFactor != null)
+          || (compressorClassName != null) || (offHeap != null) || (statisticsEnabled != null)) {
-          String lruEvictionLimitString = lruEvictionLimit == null ? null : lruEvictionLimit.toString();
-          String concurrencyLevelString = concurrencyLevel == null ? null : concurrencyLevel.toString();
-          String initialCapacityString = initialCapacity == null ? null : initialCapacity.toString();
+          String lruEvictionLimitString =
+              lruEvictionLimit == null ? null : lruEvictionLimit.toString();
+          String concurrencyLevelString =
+              concurrencyLevel == null ? null : concurrencyLevel.toString();
+          String initialCapacityString =
+              initialCapacity == null ? null : initialCapacity.toString();
-          String statisticsEnabledString = statisticsEnabled == null ? null : statisticsEnabled.toString();
+          String statisticsEnabledString =
+              statisticsEnabled == null ? null : statisticsEnabled.toString();
-          
+
-          
-          String resultMessage = DiskStoreImpl.modifyRegion(diskStoreName, dirs, "/"+regionName,
-              lruEvictionAlgo, lruEvictionAction, lruEvictionLimitString,
-              concurrencyLevelString, initialCapacityString, loadFactorString,
-              compressorClassName, statisticsEnabledString, offHeapString, false);
+
+          String resultMessage = DiskStoreImpl.modifyRegion(diskStoreName, dirs, "/" + regionName,
+              lruEvictionAlgo, lruEvictionAction, lruEvictionLimitString, concurrencyLevelString,
+              initialCapacityString, loadFactorString, compressorClassName, statisticsEnabledString,
+              offHeapString, false);
-          result = ResultBuilder.createParsingErrorResult("Cannot use the --remove=true parameter with any other parameters");
+          result = ResultBuilder.createParsingErrorResult(
+              "Cannot use the --remove=true parameter with any other parameters");
-          result = ResultBuilder.createInfoResult("The region " + regionName + " was successfully removed from the disk store " + diskStoreName);
+          result = ResultBuilder.createInfoResult("The region " + regionName
+              + " was successfully removed from the disk store " + diskStoreName);
-          //Please provide an option
+          // Please provide an option
-      //Catch the IllegalArgumentException thrown by the modifyDiskStore function and sent the 
+      // Catch the IllegalArgumentException thrown by the modifyDiskStore function and sent the
-      //Indicates that the command is being used when a cache is open 
-      result = ResultBuilder.createGemFireErrorResult("Cannot execute " + CliStrings.ALTER_DISK_STORE + " when a cache exists (Offline command)");
+      // Indicates that the command is being used when a cache is open
+      result = ResultBuilder.createGemFireErrorResult("Cannot execute "
+          + CliStrings.ALTER_DISK_STORE + " when a cache exists (Offline command)");
-    } 
+    }
-  @CliCommand(value=CliStrings.DESTROY_DISK_STORE, help=CliStrings.DESTROY_DISK_STORE__HELP)
-  @CliMetaData(shellOnly=false, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE}, writesToSharedConfiguration=true)
+  @CliCommand(value = CliStrings.DESTROY_DISK_STORE, help = CliStrings.DESTROY_DISK_STORE__HELP)
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE},
+      writesToSharedConfiguration = true)
-      @CliOption  (key=CliStrings.DESTROY_DISK_STORE__NAME, 
-          mandatory=true,
-          help=CliStrings.DESTROY_DISK_STORE__NAME__HELP)
-        String name,
-      @CliOption(key=CliStrings.DESTROY_DISK_STORE__GROUP,
-          help=CliStrings.DESTROY_DISK_STORE__GROUP__HELP,
-          optionContext=ConverterHint.MEMBERGROUP)
-        @CliMetaData (valueSeparator = ",")
-        String[] groups) {
-    try {      
+      @CliOption(key = CliStrings.DESTROY_DISK_STORE__NAME, mandatory = true,
+          help = CliStrings.DESTROY_DISK_STORE__NAME__HELP) String name,
+      @CliOption(key = CliStrings.DESTROY_DISK_STORE__GROUP,
+          help = CliStrings.DESTROY_DISK_STORE__GROUP__HELP,
+          optionContext = ConverterHint.MEMBERGROUP) @CliMetaData(
+              valueSeparator = ",") String[] groups) {
+    try {
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(new DestroyDiskStoreFunction(), new Object[] { name },
-          targetMembers);
+      ResultCollector<?, ?> rc = CliUtil.executeFunction(new DestroyDiskStoreFunction(),
+          new Object[] {name}, targetMembers);
-          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName() + ": "
-              + result.getThrowable().getMessage());
+          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName()
+              + ": " + result.getThrowable().getMessage());
-          
+
-      
+
-      
+
-        result.setCommandPersisted((new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity, groups));
+        result.setCommandPersisted(
+            (new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity, groups));
-      
+
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.DESTROY_DISK_STORE__ERROR_WHILE_DESTROYING_REASON_0,
-          new Object[] { th.getMessage() }));
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.DESTROY_DISK_STORE__ERROR_WHILE_DESTROYING_REASON_0,
+              new Object[] {th.getMessage()}));
- }
-      
+  }
+
-    CliStrings.DESCRIBE_DISK_STORE, CliStrings.LIST_DISK_STORE, CliStrings.REVOKE_MISSING_DISK_STORE,
-    CliStrings.SHOW_MISSING_DISK_STORE, CliStrings.CREATE_DISK_STORE, CliStrings.DESTROY_DISK_STORE})
+      CliStrings.DESCRIBE_DISK_STORE, CliStrings.LIST_DISK_STORE,
+      CliStrings.REVOKE_MISSING_DISK_STORE, CliStrings.SHOW_MISSING_DISK_STORE,
+      CliStrings.CREATE_DISK_STORE, CliStrings.DESTROY_DISK_STORE})

