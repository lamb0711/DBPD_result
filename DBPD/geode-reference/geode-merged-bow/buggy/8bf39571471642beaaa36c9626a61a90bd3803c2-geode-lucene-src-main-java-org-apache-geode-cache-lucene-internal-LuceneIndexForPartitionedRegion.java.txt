Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    final boolean withPersistence = withPersistence(); 
+    final boolean withPersistence = withPersistence();
-    final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory()>0;
+    final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory() > 0;
-    //       2) Persistence to Persistence
-    //       3) Replicate to Replicate, Partition To Partition
-    //       4) Offheap to Offheap
+    // 2) Persistence to Persistence
+    // 3) Replicate to Replicate, Partition To Partition
+    // 4) Offheap to Offheap
-      throw new IllegalStateException("The data region to create lucene index should be with storage");
+      throw new IllegalStateException(
+          "The data region to create lucene index should be with storage");
-    
+
-      fileRegion = createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+      fileRegion =
+          createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
-      chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes, chunkRegionName, regionAttributes);
+      chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes,
+          chunkRegionName, regionAttributes);
-  
+
-  
+
-    return cache.<String, File> getRegion(fileRegionName) != null;
+    return cache.<String, File>getRegion(fileRegionName) != null;
-  Region createFileRegion(final RegionShortcut regionShortCut,
-                                final String fileRegionName,
-                                final PartitionAttributes partitionAttributes,
-                                final RegionAttributes regionAttributes) {
-    return createRegion(fileRegionName, regionShortCut, this.regionPath, partitionAttributes, regionAttributes);
+  Region createFileRegion(final RegionShortcut regionShortCut, final String fileRegionName,
+      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes) {
+    return createRegion(fileRegionName, regionShortCut, this.regionPath, partitionAttributes,
+        regionAttributes);
-    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".files";
-    return cache.<ChunkKey, byte[]> getRegion(chunkRegionName) != null;
+    return cache.<ChunkKey, byte[]>getRegion(chunkRegionName) != null;
-                           final String fileRegionName,
-                           final PartitionAttributes partitionAttributes, final String chunkRegionName, final RegionAttributes regionAttributes) {
-    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+      final String fileRegionName, final PartitionAttributes partitionAttributes,
+      final String chunkRegionName, final RegionAttributes regionAttributes) {
+    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes,
+        regionAttributes);
-  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(PartitionAttributesFactory attributesFactory, PartitionAttributes<?,?> dataRegionAttributes) {
+  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(
+      PartitionAttributesFactory attributesFactory,
+      PartitionAttributes<?, ?> dataRegionAttributes) {
-                                             final RegionShortcut regionShortCut,
-                                             final String colocatedWithRegionName,
-                                             final PartitionAttributes partitionAttributes,
-                                             final RegionAttributes regionAttributes)
-  {
-    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory<String, File>();
+      final RegionShortcut regionShortCut, final String colocatedWithRegionName,
+      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes) {
+    PartitionAttributesFactory partitionAttributesFactory =
+        new PartitionAttributesFactory<String, File>();
-    
+
-      .withArgs(new String[] {directory, indexName})
-      .execute(DumpDirectoryFiles.ID);
+        .withArgs(new String[] {directory, indexName}).execute(DumpDirectoryFiles.ID);

