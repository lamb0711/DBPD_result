[GEODE-77] TCP check for health monitor

+import java.util.Map;
-
+    //add server socket port in the join request
+    if (services.getHealthMonitor().getSocketInfo().get(localAddress) != null) {
+      req.setSocketPort(services.getHealthMonitor().getSocketInfo().get(localAddress).getPort());
+    }
+          services.getHealthMonitor().installSocketInfo(response.getCurrentView().getMembers(), response.getPortsForMembers());
+      // add socket ports of all members to join response
+      List<Integer> portsForMembers = new ArrayList<Integer>(currentView.size());      
+      Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();      
+      for (InternalDistributedMember mbr : currentView.getMembers()) {
+        InetSocketAddress addr = socketInfo.get(mbr);
+        if (addr != null) {
+          portsForMembers.add(addr.getPort());
+        } else {          
+          if (incomingRequest.getMemberID().compareTo(mbr, true) == 0) {
+            portsForMembers.add(incomingRequest.getSocketPort());
+          }
+          else {
+            portsForMembers.add(-1);
+          }
+        }
+      }
+      m.setPortsForMembers(portsForMembers);
-  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView) {
+  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView, List<Integer> portsForMembers) {
+      response.setPortsForMembers(portsForMembers);
-  boolean prepareView(NetView view, Collection<InternalDistributedMember> newMembers) {
-    return sendView(view, newMembers, true, this.prepareProcessor);
+  boolean prepareView(NetView view, Collection<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
+    return sendView(view, newMembers, true, this.prepareProcessor, requests);
-  void sendView(NetView view, Collection<InternalDistributedMember> newMembers) {
-    sendView(view, newMembers, false, this.viewProcessor);
+  void sendView(NetView view, Collection<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
+    sendView(view, newMembers, false, this.viewProcessor, requests);
-  boolean sendView(NetView view, Collection<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp) {
+  boolean sendView(NetView view, Collection<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp, List<DistributionMessage> requests) {
+    // add socket ports of all members to InstallViewMessage
+    List<Integer> portsForMembers = new ArrayList<Integer>(view.size());
+    if (requests != null) {
+      Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();
+      for (InternalDistributedMember mbr : view.getMembers()) {
+        InetSocketAddress addr = socketInfo.get(mbr);
+        if (addr != null) {
+          portsForMembers.add(addr.getPort());
+        } else {
+          boolean found = false;
+          for (DistributionMessage req : requests) {
+            if (req instanceof JoinRequestMessage) {
+              if (((JoinRequestMessage) req).getMemberID().compareTo(mbr, false) == 0) {
+                portsForMembers.add(((JoinRequestMessage) req).getSocketPort());
+                found = true;
+              }
+            }
+          }
+          if (!found) {
+            portsForMembers.add(-1);
+          }
+        }
+      }
+      msg.setPortsForMembers(portsForMembers);
+    }
+      if (requests != null) {
+        services.getHealthMonitor().installSocketInfo(view.getMembers(), portsForMembers);
+      }
+        if (!m.getPortsForMembers().isEmpty()) {
+          services.getHealthMonitor().installSocketInfo(view.getMembers(), m.getPortsForMembers());
+        }
-            initialLeaving, initialRemovals);
+            initialLeaving, initialRemovals, null);
-        sendJoinResponses(joinReqs, newView);
+        // add socket ports of all members to join response
+        List<Integer> portsForMembers = new ArrayList<Integer>(newView.size());        
+        Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();        
+        for (InternalDistributedMember mbr : newView.getMembers()) {
+          InetSocketAddress addr = socketInfo.get(mbr);
+          if (addr != null) {
+            portsForMembers.add(addr.getPort());
+          } else {
+            boolean found = false;
+            for (DistributionMessage req : requests) {
+              if (req instanceof JoinRequestMessage) {
+                if (((JoinRequestMessage) req).getMemberID().compareTo(mbr, true) == 0) {
+                  portsForMembers.add(((JoinRequestMessage) req).getSocketPort());
+                  found = true;
+                }
+              }
+            }
+            if (!found) {
+              portsForMembers.add(-1);
+            }
+          }
+        }
+        sendJoinResponses(joinReqs, newView, portsForMembers);
-      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers());
+      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers(), requests);
-        Set<InternalDistributedMember> removalReqs) {
+        Set<InternalDistributedMember> removalReqs,
+        List<DistributionMessage> requests) {
-        prepared = prepareView(newView, joinReqs);
+        prepared = prepareView(newView, joinReqs, requests);
-      sendView(newView, joinReqs);
+      sendView(newView, joinReqs, requests);

INS26 INS40 INS44 INS44 INS44 INS44 INS25 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS60 INS25 INS44 INS27 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS27 INS8 INS8 INS74 INS42 INS32 INS33 INS21 INS60 INS60 INS70 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS33 INS60 INS70 INS21 MOV21 INS25 INS43 INS43 INS32 INS42 INS42 INS32 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS42 INS42 INS74 INS32 INS74 INS59 INS44 INS32 INS8 INS32 INS27 MOV8 INS60 INS60 INS70 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS33 INS21 INS25 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS38 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS21 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS70 INS25 INS32 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS70 INS25 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS34 INS21 INS21 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS42 INS43 INS25 INS42 INS42 INS38 INS42 INS42 INS42 INS62 INS8 INS32 INS42 INS42 INS34 INS42 INS27 INS8 INS34 INS42 INS43 INS25 INS42 INS42 INS38 INS32 INS34 INS21 INS21 INS42 INS27 INS8 INS34 INS32 INS42 INS42 INS9 INS32 INS7 INS32 INS34 INS21 INS21 INS36 INS42 INS42 INS42 INS32 INS42 INS9 INS32 INS42 INS42 INS9 INS32 INS7 INS11 INS36 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS11 INS11 INS36 INS42 INS42 INS43 INS42 INS43 INS42 INS11 INS42 INS42 INS43 INS42 INS42