improvements to deadlock detection.  Addition of a main method to DeadlockDetector that recognizes findDeepestGraph, findDeadlockOnly, findThread and print commands.  We need a project to enable dependency monitoring in processes spawned with Gfsh and to collect dependencies and serialize them to disk so that this tool can be used to analyse distributed systems.

+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.ObjectInputStream;
+import java.util.List;
+ * This class also has a main() method that can read serialized DependencyGraphs
+ * from multiple JVMs, merge them and perform various analysis on them.
+ * 
-    for (Dependency dep : dependencies) {
-      graph.addEdge(dep);
-    }
+    graph.addEdges(dependencies);
-   * @return All of the dependencies between threads an locks or other resources
+   * @arg locality a name tag to stick on entities to help associate them with
+   * this JVM and distinguish them from entities from other jvms
+   * 
+   * @return All of the dependencies between threads and locks or other resources
+    
+    Set<Object> seenDependers = new HashSet<>();
+    Object lastDependsOn = text;
+    Object lastDepender = text;
+    
+      
+      String dependerString;
+      if (lastDependsOn.equals(depender)) {
+        dependerString = "which";
+      } else if (lastDepender.equals(depender)){
+        dependerString = "and";
+      } else {
+        dependerString = String.valueOf(depender);
+      }
+      lastDepender = depender;
+      lastDependsOn = dependsOn;
+      
+      String also = seenDependers.contains(depender)? " also" : "";
+      seenDependers.add(depender);
+      
-        text.append(depender + " is waiting on " + dependsOn + "\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting on ").append(dependsOn).append("\n");
-        text.append(depender + " is held by " + dependsOn + "\n");
+        text.append(dependerString).append(" is held by thread ").append(dependsOn).append("\n");
-        text.append(depender + " is waiting for " + dependsOn + "\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting for ").append(dependsOn).append("\n");
+      text.append("\n");
-      text.append(
-          threadInfo.getLocatility() + ":" + threadInfo.getThreadStack())
+      text.append(threadInfo.getLocatility())
+          .append(":")
+          .append(threadInfo.getThreadStack())
+  
+  
+  /**
+   * attempts to sort the given dependencies according to their contents
+   * so that dependents come after dependers.
+   * @param dependencies
+   * TODO this method needs more work
+   */
+  public static List<Dependency> sortDependencies(Collection<Dependency> dependencies) {
+    List<Dependency> result = new LinkedList<>();
+    for (Dependency dep: dependencies) {
+      boolean added = false;
+      for (int i=0; i<result.size(); i++) {
+        Dependency other = result.get(i);
+        if (other.depender.equals(dep.depender)) {
+          result.add(i, dep);
+          added = true;
+          break;
+        }
+        if (other.depender.equals(dep.dependsOn)) {
+          result.add(i, dep);
+          added = true;
+          break;
+        }
+      }
+      if (!added) {
+        result.add(dep);
+      }
+    }
+    return result;
+  }
+  
+  private static DependencyGraph loadGraphs(int startingAt, String... mainArgs) throws Exception {
+    String filename;
+    if (mainArgs.length < startingAt+1) {
+      return loadGraph("thread_dependency_graph.ser");
+    }
+    
+    DependencyGraph result = new DependencyGraph();
+    
+    for (int i=startingAt; i<mainArgs.length; i++) {
+      filename = mainArgs[i];
+      DependencyGraph gr = loadGraph(filename);
+      if (gr == null) {
+        return null;
+      }
+      result.addEdges(gr.getEdges());
+    }
+    
+    return result;
+  }
+  
+  private static DependencyGraph loadGraph(String filename) throws Exception {
+    File file = new File(filename);
+    if (!file.exists()) {
+      System.err.println("unable to find " + filename);
+      System.exit(-1);
+    }
+
+    ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
+    DependencyGraph graph = (DependencyGraph) ois.readObject();
+
+    return graph;
+  }
+  
+  
+  private static void printHelp() {
+    System.out.println("DeadlockDetector reads serialized graphs of the state of the distributed");
+    System.out.println("system created by collectDependencies.");
+    System.out.println();
+    System.out.println("usage: ");
+    System.out.println("[print | findDeepestGraph | findDeadlockOnly | findThread threadName ] file1 ...");
+    System.out.println();
+    System.out.println("print - prints all dependencies and threads in the graph");
+    System.out.println("findDeepestGraph - looks for either a deadlock or the longest call chain in the graph");
+    System.out.println("findDeadlockOnly - looks for a deadlock in the distributed system");
+    System.out.println("findThread - finds the given thread by name/partial name and builds a dependency graph around it");
+  }
+
+  public static void main(String... args) throws Exception {
+    if (args.length == 0) {
+      printHelp();
+      return;
+    }
+    
+    DependencyGraph graph;
+
+    switch (args[0]) {
+    case "print":
+      graph = loadGraphs(1, args);
+      System.out.println(prettyFormat(graph));
+      break;
+    case "findDeadlockOnly":
+      graph = loadGraphs(1, args);
+      List<Dependency> cycle = graph.findCycle();
+      if (cycle == null) {
+        System.out.println("no deadlock found");
+      } else {
+        System.out.println("deadlocked threads: \n" + cycle);
+      }
+      break;
+    case "findDeepestGraph":
+      graph = loadGraphs(1, args);
+      DependencyGraph result = graph.findDeepestGraph();
+      if (result == null) {
+        System.out.println("no deepest graph could be found!");
+      } else {
+        System.out.println("deepest graph: \n" + prettyFormat(result));
+      }
+      break;
+    case "findThread":
+      graph = loadGraphs(2, args);
+      result = graph.findDependenciesWith(args[1]);
+      if (result == null) {
+        System.out.println("thread not found!");
+      } else {
+        System.out.println(prettyFormat(sortDependencies(result.getEdges())));
+      }
+      break;
+    default:
+      printHelp();
+      break;
+    }
+    
+  }
+  

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS66 INS66 MOV21 INS65 INS60 INS60 INS60 INS65 INS65 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS24 INS41 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS25 INS60 INS50 INS66 INS66 UPD66 INS74 INS59 INS43 INS59 INS43 INS59 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS74 INS59 MOV44 INS42 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS27 INS8 INS43 INS59 INS2 INS49 INS21 INS21 INS10 INS49 INS21 INS60 INS25 INS10 INS49 INS21 INS60 INS25 INS10 INS49 INS21 INS21 INS25 INS10 INS49 INS21 INS10 UPD42 UPD42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS60 INS24 INS25 INS42 INS42 INS40 INS27 INS41 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS60 INS25 INS21 INS42 INS42 INS14 INS32 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS11 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS42 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS42 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS34 INS21 INS41 INS42 INS42 INS42 INS34 INS45 INS7 INS32 INS45 INS7 INS74 INS59 INS27 INS8 INS8 INS45 INS7 INS43 INS59 INS27 INS8 INS8 INS45 INS7 INS7 INS27 INS8 INS8 INS32 INS42 INS42 INS74 INS43 INS59 INS32 INS8 INS25 INS7 INS7 INS43 INS59 INS32 INS32 INS42 INS42 INS74 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS42 INS34 INS32 INS43 INS42 INS42 INS7 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS43 INS14 INS43 INS32 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS9 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS25 INS42 INS21 INS42 INS45 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS38 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS42 INS2 INS32 INS32 INS42 INS7 INS42 INS42 INS42 INS21 INS21 INS32 INS45 INS45 INS32 INS42 MOV32 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS34 INS42 INS43 INS42 INS40 INS42 INS45 INS40 INS42 INS27 INS40 INS42 INS45 INS40 INS42 INS27 INS42 INS34 INS40 INS42 INS45 INS40 INS42 INS32 INS42 INS45 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS40 INS21 INS21 INS10 INS40 INS42 INS40 INS21 INS21 INS10 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS32 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 MOV42 MOV42 MOV32 INS42 INS42 INS42 INS32 INS7 INS32 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 MOV42 MOV42 INS42 INS32 INS42 INS42 MOV42 MOV42 INS42 INS32 INS42 INS45 MOV42 MOV42 INS42 DEL42 DEL8 DEL70 DEL8 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL27