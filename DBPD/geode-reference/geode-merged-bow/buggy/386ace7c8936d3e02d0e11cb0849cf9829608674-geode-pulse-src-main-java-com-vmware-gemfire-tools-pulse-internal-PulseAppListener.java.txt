GEODE-17: Integrated Security Related Changes for Pulse and Refactor interface

+import com.vmware.gemfire.tools.pulse.internal.controllers.PulseController;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseConfig;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
+import com.vmware.gemfire.tools.pulse.internal.data.Repository;
+import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
+import com.vmware.gemfire.tools.pulse.internal.util.StringUtils;
+import org.springframework.web.context.WebApplicationContext;
+import org.springframework.web.context.support.WebApplicationContextUtils;
+
+import javax.servlet.ServletContextEvent;
+import javax.servlet.ServletContextListener;
+import java.util.Map.Entry;
-import java.util.Map.Entry;
-import javax.servlet.ServletContextEvent;
-import javax.servlet.ServletContextListener;
-
-import com.vmware.gemfire.tools.pulse.internal.controllers.PulseController;
-import com.vmware.gemfire.tools.pulse.internal.data.PulseConfig;
-import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
-import com.vmware.gemfire.tools.pulse.internal.data.Repository;
-import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
-import com.vmware.gemfire.tools.pulse.internal.util.StringUtils;
-
+  
+  //This property determines if pulse webApp login is authenticated against
+  //GemFire integrated security or custom spring-security config provided 
+  //in pulse-authentication-custom.xml 
+  private boolean useGemFireCredentials;
-
+    
-
+       
+      useGemFireCredentials = areWeUsingGemFireSecurityProfile(event); 
-
-    // Set user details in repository
+    
+    // Set user details in repository    
+    
+    repository.setUseGemFireCredentials(useGemFireCredentials);
+  /**
+   * Return true if pulse is configure to authenticate using gemfire
+   * integrated security
+   * 
+   * @param event
+   * @return
+   */
+  private boolean areWeUsingGemFireSecurityProfile(ServletContextEvent event) {
+    String profile = null;
+    WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());
+    if (ctx.getEnvironment() != null) {
+      String[] profiles = ctx.getEnvironment().getActiveProfiles();
+      if (profiles != null && profiles.length > 0) {
+        StringBuilder sb = new StringBuilder();
+        for (String p : profiles)
+          sb.append(p).append(",");
+        LOGGER.info("#SpringProfilesConfigured : " + sb.toString());
+        profile = ctx.getEnvironment().getActiveProfiles()[0];
+        LOGGER.info("#First Profile : " + profile);
+      } else {
+        LOGGER.info("No SpringProfileConfigured using default spring profile");
+        return false;
+      }
+    }
+    if (PulseConstants.APPLICATION_PROPERTY_PULSE_SEC_PROFILE_GEMFIRE.equals(profile)) {
+      LOGGER.info("Using gemfire integrated security profile");
+      return true;
+    }      
+    return false;
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS60 INS60 INS25 INS25 INS41 INS32 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS9 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS33 INS60 INS25 INS40 INS42 INS42 INS21 INS41 INS7 INS42 INS42 INS32 INS42 INS42 INS5 INS59 INS27 INS8 INS8 INS32 INS9 INS42 INS32 INS42 INS42 INS43 INS85 INS42 INS32 INS27 INS27 INS60 INS70 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS40 INS34 INS43 INS59 INS44 INS42 INS21 INS32 INS7 INS32 INS32 INS9 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS32 INS42 INS42 INS27 INS42 INS2 INS42 INS42 INS27 INS42 INS42 INS45 INS43 INS42 INS32 INS42 INS45 INS45 INS32 INS32 INS34 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42