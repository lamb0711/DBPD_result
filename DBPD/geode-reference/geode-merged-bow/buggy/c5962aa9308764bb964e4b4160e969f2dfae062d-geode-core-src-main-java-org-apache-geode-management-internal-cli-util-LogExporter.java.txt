GEODE-2420: Resolve conflicts with recent checkin

Use InternalCache instead of GemnFireCachImpl.

Refactored product and tests
- Combined LogExporter and LogSizer.
- Remove classes no longer needed

-import java.text.ParseException;
+import java.util.Collections;
-   * @throws ParseException
-  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile)
-      throws ParseException {
+  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile) {
-   * @throws IOException
-  protected List<Path> findLogFiles(Path workingDir) throws IOException {
+  /**
+   * @return combined size of stat archives and filtered log files in bytes
+   */
+  public long estimateFilteredSize() throws IOException {
+    long filteredSize = 0;
+    if (baseLogFile != null) {
+      for (Path logFile : findLogFiles(baseLogFile.toPath().getParent())) {
+        filteredSize += filterAndSize(logFile);
+      }
+    }
+
+    if (baseStatsFile != null) {
+      for (Path statFile : findStatFiles(baseStatsFile.toPath().getParent())) {
+        filteredSize += statFile.toFile().length();
+      }
+    }
+
+    return filteredSize;
+  }
+
+  /**
+   * @return size of file in bytes
+   */
+  private long filterAndSize(Path originalLogFile) throws IOException {
+    long size = 0;
+    this.logFilter.startNewFile();
+
+    try (BufferedReader reader = new BufferedReader(new FileReader(originalLogFile.toFile()))) {
+      String line;
+      while ((line = reader.readLine()) != null) {
+        LogFilter.LineFilterResult result = this.logFilter.acceptsLine(line);
+
+        if (result == LogFilter.LineFilterResult.REMAINDER_OF_FILE_REJECTED) {
+          break;
+        }
+        if (result == LogFilter.LineFilterResult.LINE_ACCEPTED) {
+          size += line.length() + File.separator.length();
+        }
+      }
+    }
+    return size;
+  }
+
+  List<Path> findLogFiles(Path workingDir) throws IOException {
-  protected List<Path> findStatFiles(Path workingDir) throws IOException {
+  List<Path> findStatFiles(Path workingDir) throws IOException {
-    Stream<Path> selectedFiles =
-        Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);
+    Stream<Path> selectedFiles/* = null */;
+    if (!workingDir.toFile().isDirectory()) {
+      return Collections.emptyList();
+    }
+    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);
-
-

UPD40 INS31 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS60 INS25 INS25 INS41 INS65 INS43 INS42 INS42 INS60 INS21 INS54 INS41 INS25 INS21 INS66 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS66 INS42 INS39 INS59 INS32 INS58 INS8 INS42 INS38 INS8 INS7 INS42 INS34 INS42 INS33 INS70 INS42 INS33 INS70 INS42 INS34 INS22 INS42 INS43 INS59 INS60 INS61 INS32 INS41 INS42 MOV32 INS44 INS32 INS8 INS44 INS32 INS8 INS52 INS42 INS42 INS42 INS14 INS43 INS59 INS27 INS8 INS32 INS42 INS32 INS43 INS42 INS42 INS32 INS21 INS43 INS42 INS42 INS32 INS21 INS43 INS14 INS42 INS42 INS36 INS33 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS32 INS42 INS7 INS42 INS43 INS32 INS7 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS40 INS10 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS7 INS42 INS42 INS52 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS40 INS42 DEL42 DEL65 DEL42 DEL43 DEL42 DEL65 DEL83 DEL83