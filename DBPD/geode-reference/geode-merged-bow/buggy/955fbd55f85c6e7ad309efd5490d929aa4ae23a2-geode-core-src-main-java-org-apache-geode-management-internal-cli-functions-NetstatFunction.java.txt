GEODE-2474: refactor code to use SystemUtils for OS system properties

+import static org.apache.geode.internal.lang.SystemUtils.*;
+
+import java.io.InputStream;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.logging.LogService;
+@SuppressWarnings({"serial"})
+  private static final Logger logger = LogService.getLogger();
-  private static final String OS_NAME_LINUX = "Linux";
-  private static final String OS_NAME_MACOS = "darwin";
-  private static final String OS_NAME_SOLARIS = "SunOS";
-  private static final String OS_NAME_PROP = "os.name";
-  private static final String OS_ARCH_PROP = "os.arch";
-  private static final String OS_VERSION_PROP = "os.version";
-
-    InternalDistributedSystem ds = InternalDistributedSystem.getConnectedInstance();
-    if (ds.isConnected()) {
-      InternalDistributedMember distributedMember = ds.getDistributedMember();
-      String host = distributedMember.getHost();
-      NetstatFunctionArgument args = (NetstatFunctionArgument) context.getArguments();
-      boolean withlsof = args.isWithlsof();
-      String lineSeparator = args.getLineSeparator();
-      String netstatOutput = executeCommand(lineSeparator, withlsof);
-
-      StringBuilder netstatInfo = new StringBuilder();
-      addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator); // {0} will be replaced on
-                                                                    // Manager
-
-      context.getResultSender().lastResult(new NetstatFunctionResult(host, netstatInfo.toString(),
-          CliUtil.compressBytes(netstatOutput.getBytes())));
+    DistributedSystem ds = InternalDistributedSystem.getConnectedInstance();
+    if (ds == null || !ds.isConnected()) {
+      return;
+
+    String host = ds.getDistributedMember().getHost();
+    NetstatFunctionArgument args = (NetstatFunctionArgument) context.getArguments();
+    boolean withlsof = args.isWithlsof();
+    String lineSeparator = args.getLineSeparator();
+
+    String netstatOutput = executeCommand(lineSeparator, withlsof);
+
+    StringBuilder netstatInfo = new StringBuilder();
+
+    // {0} will be replaced on Manager
+    addMemberHostHeader(netstatInfo, "{0}", host, lineSeparator);
+
+    NetstatFunctionResult result = new NetstatFunctionResult(host, netstatInfo.toString(),
+        CliUtil.compressBytes(netstatOutput.getBytes()));
+
+    context.getResultSender().lastResult(result);
+
+    String osInfo = getOsName() + " " + getOsVersion() + " " + getOsArchitecture();
+
-    String osInfo = System.getProperty(OS_NAME_PROP) + " " + System.getProperty(OS_VERSION_PROP)
-        + " " + System.getProperty(OS_ARCH_PROP);
-    String osName = System.getProperty(OS_NAME_PROP);
-    if (OS_NAME_LINUX.equalsIgnoreCase(osName)) {
+    if (isLinux()) {
-    } else if (OS_NAME_MACOS.equalsIgnoreCase(osName)) {
-      cmdOptionsList.add("-v");
-      cmdOptionsList.add("-a");
-      cmdOptionsList.add("-e");
-    } else if (OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
-      cmdOptionsList.add("-v");
-      cmdOptionsList.add("-a");
-    } else { // default to Windows
+    } else {
-    List<String> cmdOptionsList = new ArrayList<String>();
+    List<String> cmdOptionsList = new ArrayList<>();
-    ProcessBuilder procBuilder = new ProcessBuilder(cmdOptionsList);
+    if (logger.isDebugEnabled()) {
+      logger.debug("NetstatFunction executing {}", cmdOptionsList);
+    }
+
+    ProcessBuilder processBuilder = new ProcessBuilder(cmdOptionsList);
-      Process netstat = procBuilder.start();
-      InputStreamReader reader = new InputStreamReader(netstat.getInputStream());
-      BufferedReader breader = new BufferedReader(reader);
-      String line = "";
+      Process netstat = processBuilder.start();
+
+      InputStream is = netstat.getInputStream();
+      BufferedReader breader = new BufferedReader(new InputStreamReader(is));
+      String line;
+
+      // TODO: move to finally-block
-      // Send error also, if any
+      // TODO: change this to keep the full stack trace
-    String osName = System.getProperty(OS_NAME_PROP);
-    existingNetstatInfo.append("################ " + LSOF_COMMAND + " output ###################")
-        .append(lineSeparator);
-    if (OS_NAME_LINUX.equalsIgnoreCase(osName) || OS_NAME_MACOS.equalsIgnoreCase(osName)
-        || OS_NAME_SOLARIS.equalsIgnoreCase(osName)) {
+    existingNetstatInfo.append("################ ").append(LSOF_COMMAND)
+        .append(" output ###################").append(lineSeparator);
+
+    if (isLinux() || isMacOSX() || isSolaris()) {
+
+        // TODO: move this to finally-block
-        // Send error also, if any
+        // TODO: change this to keep the full stack trace
-  public static String executeCommand(final String lineSeparator, final boolean withlsof) {
+  private static String executeCommand(final String lineSeparator, final boolean withlsof) {
+  public static void main(final String[] args) {
+    String netstat = executeCommand(GfshParser.LINE_SEPARATOR, true);
+    System.out.println(netstat);
+  }
+
-    public NetstatFunctionArgument(String lineSeparator, boolean withlsof) {
+    public NetstatFunctionArgument(final String lineSeparator, final boolean withlsof) {
-    /**
-     * @return the lineSeparator
-     */
-    /**
-     * @return the withlsof
-     */
-    public NetstatFunctionResult(String host, String headerInfo,
-        DeflaterInflaterData compressedBytes) {
+    protected NetstatFunctionResult(final String host, final String headerInfo,
+        final DeflaterInflaterData compressedBytes) {
-    /**
-     * @return the host
-     */
-    /**
-     * @return the headerInfo
-     */
-    /**
-     * @return the compressedBytes
-     */
-
-  public static void main(String[] args) {
-    String netstat = executeCommand(GfshParser.LINE_SEPARATOR, true);
-    System.out.println(netstat);
-  }

MOV26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 UPD40 INS40 INS79 INS83 INS42 INS42 INS4 UPD43 MOV8 MOV60 MOV60 UPD83 INS45 UPD42 UPD42 INS32 MOV60 INS25 INS25 INS83 UPD83 INS42 INS42 UPD43 INS27 INS8 UPD43 UPD43 INS32 MOV8 INS32 INS8 INS83 INS83 INS83 INS83 MOV43 INS83 UPD42 INS27 INS38 INS41 UPD42 UPD42 INS32 UPD42 UPD42 MOV14 INS42 UPD42 MOV42 INS42 INS42 INS21 UPD42 INS42 INS33 MOV32 MOV32 INS42 UPD74 INS32 INS43 MOV43 INS32 INS42 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 UPD42 MOV32 INS14 INS32 INS42 INS42 UPD42 MOV43 INS14 MOV42 MOV42 INS45 MOV43 UPD42 MOV42 DEL83 DEL42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL45 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL43 DEL14 DEL14 DEL45 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL42 DEL43 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29