GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-        return LocalizedStrings.LocalRegion_THE_CACHE_IS_NOT_AVAILABLE.toLocalizedString();
+        return "The cache is not available";
-            LocalizedStrings.LocalRegion_THE_REGION_0_WAS_CONFIGURED_TO_USE_OFF_HEAP_MEMORY_BUT_OFF_HEAP_NOT_CONFIGURED
-                .toLocalizedString(myName));
+            String.format(
+                "The region %s was configured to use off heap memory but no off heap memory was configured",
+                myName));
-          LocalizedStrings.LocalRegion_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+          "unexpected exception", e);
-            .warn(
-                LocalizedMessage.create(
-                    LocalizedStrings.LocalRegion_INITIALIZATION_FAILED_FOR_REGION_0, getFullPath()),
+            .warn(String.format("Initialization failed for Region %s", getFullPath()),
-      throw new IllegalArgumentException(LocalizedStrings.DONT_RELEASE
-          .toLocalizedString("Error while deserializing value for key=" + regionEntry.getKey()), i);
+      throw new IllegalArgumentException(String.format("%s",
+          "Error while deserializing value for key=" + regionEntry.getKey()), i);
-            LocalizedStrings.LocalRegion_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+            "unexpected exception", e);
-          LocalizedStrings.LocalRegion_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
+          "value must not be null");
-                LocalizedStrings.DistributionManager_CAUGHT_EXCEPTION_WHILE_SENDING_DELTA
-                    .toLocalizedString(),
+                "Caught exception while sending delta",
-            LocalizedStrings.LocalRegion_CANNOT_WRITE_A_REGION_WITH_DATAPOLICY_0_TO_DISK
-                .toLocalizedString(dp));
+            String.format("Cannot write a region with data-policy  %s  to disk.",
+                dp));
-            LocalizedStrings.LocalRegion_CANNOT_WRITE_A_REGION_THAT_IS_NOT_CONFIGURED_TO_ACCESS_DISKS
-                .toLocalizedString());
+            "Cannot write a region that is not configured to access disks.");
-        LocalizedStrings.LocalRegion_ONLY_SUPPORTED_FOR_GLOBAL_SCOPE_NOT_LOCAL.toLocalizedString());
+        "Only supported for GLOBAL scope, not LOCAL");
-        LocalizedStrings.LocalRegion_ONLY_SUPPORTED_FOR_GLOBAL_SCOPE_NOT_LOCAL.toLocalizedString());
+        "Only supported for GLOBAL scope, not LOCAL");
-          LocalizedStrings.LocalRegion_CACHE_WRITER_SHOULD_NOT_HAVE_BEEN_CALLED_FOR_LOCALDESTROY
-              .toLocalizedString(),
+          "Cache Writer should not have been called for localDestroy",
-          LocalizedStrings.LocalRegion_NO_DISTRIBUTED_LOCK_SHOULD_HAVE_BEEN_ATTEMPTED_FOR_LOCALDESTROY
-              .toLocalizedString(),
+          "No distributed lock should have been attempted for localDestroy",
-          LocalizedStrings.LocalRegion_CACHEWRITEREXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-              .toLocalizedString(),
+          "CacheWriterException should not be thrown in localDestroyRegion",
-          LocalizedStrings.LocalRegion_TIMEOUTEXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-              .toLocalizedString(),
+          "TimeoutException should not be thrown in localDestroyRegion",
-          LocalizedStrings.LocalRegion_CACHEWRITEREXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-              .toLocalizedString(),
+          "CacheWriterException should not be thrown in localDestroyRegion",
-          LocalizedStrings.LocalRegion_TIMEOUTEXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-              .toLocalizedString(),
+          "TimeoutException should not be thrown in localDestroyRegion",
-    logger.info(LocalizedMessage.create(LocalizedStrings.GemFireCache_INDEX_LOADING));
+    logger.info("Loading data into the indexes");
-          logger.warn(
-              LocalizedMessage.create(
-                  LocalizedStrings.LocalRegion_RECURSIVEDESTROYREGION_PROBLEM_IN_CACHEWRITEBEFOREREGIONDESTROY),
+          logger.warn("recursiveDestroyRegion: problem in cacheWriteBeforeRegionDestroy",
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.LocalRegion_RECURSIVEDESTROYREGION_RECURSION_FAILED_DUE_TO_CACHE_CLOSURE_REGION_0,
-                region.getFullPath()), e);
+            logger.warn(String.format(
+                "recursiveDestroyRegion: recursion failed due to cache closure. region, %s",
+                region.getFullPath()),
+                e);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.LocalRegion_BASICDESTROYREGION_INDEX_REMOVAL_FAILED_DUE_TO_CACHE_CLOSURE_REGION_0,
-              getFullPath()), e);
+          logger.warn(String.format(
+              "basicDestroyRegion: index removal failed due to cache closure. region, %s",
+              getFullPath()),
+              e);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.LocalRegion_RECURSIVEDESTROYREGION_POSTDESTROYREGION_FAILED_DUE_TO_CACHE_CLOSURE_REGION_0,
-            getFullPath()), e);
+        logger.warn(String.format(
+            "recursiveDestroyRegion: postDestroyRegion failed due to cache closure. region, %s",
+            getFullPath()),
+            e);
-        LocalizedStrings.PartitionedRegion_ENTRY_NOT_FOUND_FOR_KEY_0.toLocalizedString(entryKey));
+        String.format("Entry not found for key  %s", entryKey));
-          LocalizedStrings.LocalRegion_KEY_CANNOT_BE_NULL.toLocalizedString());
+          "key cannot be null");
-            LocalizedStrings.LocalRegion_KEY_0_DOES_NOT_SATISFY_KEYCONSTRAINT_1
-                .toLocalizedString(key.getClass().getName(), this.keyConstraint.getName()));
+            String.format("key ( %s ) does not satisfy keyConstraint ( %s )",
+                key.getClass().getName(), this.keyConstraint.getName()));
-              LocalizedStrings.LocalRegion_VALUE_0_DOES_NOT_SATISFY_VALUECONSTRAINT_1
-                  .toLocalizedString(valueClassName, this.valueConstraint.getName()));
+              String.format("value ( %s ) does not satisfy valueConstraint ( %s )",
+                  valueClassName, this.valueConstraint.getName()));
-          LocalizedStrings.LocalRegion_REGION_ATTRIBUTES_MUST_NOT_BE_NULL.toLocalizedString());
+          "region attributes must not be null");
-          LocalizedStrings.LocalRegion_A_REGION_WITH_SCOPELOCAL_CAN_ONLY_HAVE_SUBREGIONS_WITH_SCOPELOCAL
-              .toLocalizedString());
+          "A region with Scope.LOCAL can only have subregions with Scope.LOCAL");
-          LocalizedStrings.LocalRegion_TX_NOT_IN_PROGRESS.toLocalizedString());
+          "tx not in progress");
-          LocalizedStrings.LocalRegion_REGIONS_WITH_DATAPOLICY_0_DO_NOT_SUPPORT_SAVESNAPSHOT
-              .toLocalizedString(getDataPolicy()));
+          String.format("Regions with DataPolicy  %s  do not support saveSnapshot.",
+              getDataPolicy()));
-          LocalizedStrings.LocalRegion_REGIONS_WITH_DATAPOLICY_0_DO_NOT_SUPPORT_LOADSNAPSHOT
-              .toLocalizedString(getDataPolicy()));
+          String.format("Regions with DataPolicy  %s  do not support loadSnapshot.",
+              getDataPolicy()));
-          LocalizedStrings.LocalRegion_INPUTSTREAM_MUST_NOT_BE_NULL.toLocalizedString());
+          "InputStream must not be null.");
-          LocalizedStrings.LocalRegion_INTEREST_REGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest registration requires a Pool");
-          LocalizedStrings.LocalRegion_DURABLE_FLAG_ONLY_APPLICABLE_FOR_DURABLE_CLIENTS
-              .toLocalizedString());
+          "Durable flag only applicable for durable clients.");
-          LocalizedStrings.LocalRegion_INTEREST_REGISTRATION_NOT_SUPPORTED_ON_REPLICATED_REGIONS
-              .toLocalizedString());
+          "Interest registration not supported on replicated regions");
-          LocalizedStrings.LocalRegion_INTEREST_KEY_MUST_NOT_BE_NULL.toLocalizedString());
+          "interest key must not be null");
-              LocalizedStrings.LocalRegion_UNKNOWN_INTEREST_TYPE.toLocalizedString());
+              "unknown interest type");
-                  LocalizedStrings.LocalRegion_UNKNOWN_INTEREST_TYPE.toLocalizedString());
+                  "unknown interest type");
-          LocalizedStrings.LocalRegion_INTEREST_UNREGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest unregistration requires a pool.");
-          LocalizedStrings.LocalRegion_INTEREST_UNREGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest unregistration requires a pool.");
-          LocalizedStrings.LocalRegion_INTEREST_UNREGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest unregistration requires a pool.");
-          LocalizedStrings.LocalRegion_INTEREST_UNREGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest unregistration requires a pool.");
-          LocalizedStrings.LocalRegion_INTEREST_UNREGISTRATION_REQUIRES_A_POOL.toLocalizedString());
+          "Interest unregistration requires a pool.");
-              LocalizedStrings.AbstractRegion_REGULAR_EXPRESSION_ARGUMENT_WAS_NOT_A_STRING
-                  .toLocalizedString());
+              "regular expression argument was not a String");
-          LocalizedStrings.AbstractRegion_INTERESTTYPEFILTER_CLASS_NOT_YET_SUPPORTED
-              .toLocalizedString());
+          "InterestType.FILTER_CLASS not yet supported");
-          LocalizedStrings.AbstractRegion_INTERESTTYPEOQL_QUERY_NOT_YET_SUPPORTED
-              .toLocalizedString());
+          "InterestType.OQL_QUERY not yet supported");
-      throw new IllegalArgumentException(LocalizedStrings.AbstractRegion_UNSUPPORTED_INTEREST_TYPE_0
-          .toLocalizedString(interestType));
+      throw new IllegalArgumentException(String.format("Unsupported interest type:  %s",
+          interestType));
-          LocalizedStrings.LocalRegion_INTEREST_LIST_RETRIEVAL_REQUIRES_A_POOL.toLocalizedString());
+          "Interest list retrieval requires a pool.");
-          LocalizedStrings.LocalRegion_SERVER_KEYSET_REQUIRES_A_POOL.toLocalizedString());
+          "Server keySet requires a pool.");
-          LocalizedStrings.LocalRegion_SERVER_KEYSET_REQUIRES_A_POOL.toLocalizedString());
+          "Server keySet requires a pool.");
-          LocalizedStrings.LocalRegion_SERVER_SIZE_REQUIRES_A_POOL.toLocalizedString());
+          "sizeOnServer requires a pool.");
-          LocalizedStrings.LocalRegion_SERVER_ISEMPTY_REQUIRES_A_POOL.toLocalizedString());
+          "isEmptyOnServer requires a pool.");
-          LocalizedStrings.LocalRegion_CACHE_WRITER_SHOULD_NOT_HAVE_BEEN_CALLED_FOR_LOCALDESTROY
-              .toLocalizedString(),
+          "Cache Writer should not have been called for localDestroy",
-          LocalizedStrings.LocalRegion_NO_DISTRIBUTED_LOCK_SHOULD_HAVE_BEEN_ATTEMPTED_FOR_LOCALDESTROY
-              .toLocalizedString(),
+          "No distributed lock should have been attempted for localDestroy",
-          LocalizedStrings.LocalRegion_CLASS_0_NOT_FOUND_IN_CLASSPATH.toLocalizedString(key), cnfe);
+          String.format("Class  %s  not found in classpath.", key), cnfe);
-          LocalizedStrings.LocalRegion_CLASS_0_COULD_NOT_BE_INSTANTIATED.toLocalizedString(key), e);
+          String.format("Class  %s  could not be instantiated.", key), e);
-        LocalizedStrings.LocalRegion_NOT_YET_SUPPORTED.toLocalizedString());
+        "not yet supported");
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.LocalRegion_CAUGHT_THE_FOLLOWING_EXCEPTION_FOR_KEY_0_WHILE_PERFORMING_A_REMOTE_GETALL,
-                  currentKey), (Throwable) val);
+              logger.warn(String.format(
+                  "Caught the following exception for key %s while performing a remote getAll",
+                  currentKey),
+                  (Throwable) val);
-            LocalizedStrings.LocalRegion_UNKNOWN_INTEREST_TYPE.toLocalizedString());
+            "unknown interest type");
-          LocalizedStrings.LocalRegion_GOT_REGIONEXISTSEXCEPTION_IN_REINITIALIZE_WHEN_HOLDING_DESTROY_LOCK
-              .toLocalizedString(),
+          "Got RegionExistsException in reinitialize when holding destroy lock",
-            LocalizedStrings.LocalRegion_UNSUPPORTED_SNAPSHOT_VERSION_0_ONLY_VERSION_1_IS_SUPPORTED
-                .toLocalizedString(new Object[] {snapshotVersion, SNAPSHOT_VERSION}));
+            String.format("Unsupported snapshot version %s. Only version %s is supported.",
+                new Object[] {snapshotVersion, SNAPSHOT_VERSION}));
-              LocalizedStrings.LocalRegion_UNEXPECTED_SNAPSHOT_CODE_0_THIS_SNAPSHOT_WAS_PROBABLY_WRITTEN_BY_AN_EARLIER_INCOMPATIBLE_RELEASE
-                  .toLocalizedString(aByte));
+              String.format(
+                  "Unexpected snapshot code %s. This snapshot was probably written by an earlier, incompatible, release.",
+                  aByte));
-          LocalizedStrings.LocalRegion_PATH_SHOULD_NOT_BE_NULL.toLocalizedString());
+          "path should not be null");
-          LocalizedStrings.LocalRegion_PATH_SHOULD_NOT_START_WITH_A_SLASH.toLocalizedString());
+          "path should not start with a slash");
-            LocalizedStrings.LocalRegion_UNEXPECTED_THREADINITLEVELREQUIREMENT.toLocalizedString());
+            "Unexpected threadInitLevelRequirement");
-            LocalizedStrings.LocalRegion_UNEXPECTED_THREADINITLEVELREQUIREMENT.toLocalizedString());
+            "Unexpected threadInitLevelRequirement");
-          LocalizedStrings.LocalRegion_ENTRY_ALREADY_EXISTED_0.toLocalizedString(key));
+          String.format("Entry already existed:  %s", key));
-          LocalizedStrings.LocalRegion_CANNOT_DO_A_LOCAL_INVALIDATE_ON_A_REPLICATED_REGION
-              .toLocalizedString());
+          "Cannot do a local invalidate on a replicated region");
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.LocalRegion_SERVER_HAS_CONCURRENCY_CHECKS_ENABLED_0_BUT_CLIENT_HAS_1_FOR_REGION_2,
+      logger.info("Server has concurrencyChecksEnabled {} but client has {} for region {}",
-              this}));
+              this});
-            LocalizedStrings.LocalRegion_KEY_0_DOES_NOT_SATISFY_KEYCONSTRAINT_1.toLocalizedString(
+            String.format("key ( %s ) does not satisfy keyConstraint ( %s )",
-          LocalizedStrings.ResourceManager_LOW_MEMORY_IN_0_FOR_PUT_1_MEMBER_2.toLocalizedString(
+          String.format(
+              "Region: %s cannot process operation on key: %s because member %s is running low on memory",
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.LocalRegion_RECURSIVEDESTROYREGION_RECURSION_FAILED_DUE_TO_CACHE_CLOSURE_REGION_0,
-                  getFullPath()), e);
+              logger.warn(String.format(
+                  "recursiveDestroyRegion: recursion failed due to cache closure. region, %s",
+                  getFullPath()),
+                  e);
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.LocalRegion_BASICDESTROYREGION_PARENT_REMOVAL_FAILED_DUE_TO_CACHE_CLOSURE_REGION_0,
-                  getFullPath()), e);
+              logger.warn(String.format(
+                  "basicDestroyRegion: parent removal failed due to cache closure. region, %s",
+                  getFullPath()),
+                  e);
-    StringId sid =
-        LocalizedStrings.LocalRegion_A_DISKACCESSEXCEPTION_HAS_OCCURRED_WHILE_WRITING_TO_THE_DISK_FOR_REGION_0_THE_CACHE_WILL_BE_CLOSED;
-    logger.error(LocalizedMessage.create(sid, this.fullPath), dae);
+    String msg =
+        String.format(
+            "A DiskAccessException has occurred while writing to the disk for region %s. The cache will be closed.",
+            this.fullPath);
+    logger.error(msg, dae);
-          LocalizedStrings.LocalRegion_CACHE_WRITER_SHOULD_NOT_HAVE_BEEN_CALLED_FOR_EVICTDESTROY
-              .toLocalizedString(),
+          "Cache Writer should not have been called for evictDestroy",
-          LocalizedStrings.LocalRegion_NO_DISTRIBUTED_LOCK_SHOULD_HAVE_BEEN_ATTEMPTED_FOR_EVICTDESTROY
-              .toLocalizedString(),
+          "No distributed lock should have been attempted for evictDestroy",
-          LocalizedStrings.LocalRegion_ENTRYNOTFOUNDEXCEPTION_SHOULD_BE_MASKED_FOR_EVICTDESTROY
-              .toLocalizedString(),
+          "EntryNotFoundException should be masked for evictDestroy",
-        logger.warn(
-            LocalizedMessage.create(
-                LocalizedStrings.LocalRegion_EXCEPTION_OCCURRED_WHILE_CLOSING_CQS_ON_REGION_DESTORY),
+        logger.warn("Exception occurred while closing CQs on region destroy.",
-        throw new Error(LocalizedStrings.LocalRegion_CACHEWRITEREXCEPTION_SHOULD_NOT_BE_THROWN_HERE
-            .toLocalizedString(), e);
+        throw new Error("CacheWriterException should not be thrown here", e);
-              LocalizedStrings.LocalRegion_TIMEOUTEXCEPTION_SHOULD_NOT_BE_THROWN_HERE
-                  .toLocalizedString(),
+              "TimeoutException should not be thrown here",
-          LocalizedStrings.LocalRegion_REGION_IS_BEING_DESTROYED_WAITING_FOR_PARALLEL_QUEUE_TO_DRAIN
-              .toLocalizedString(),
+          "Region is being destroyed. Waiting for paralle queue to drain.",
-          LocalizedStrings.LocalRegion_NOT_ALLOWED_TO_DO_A_LOCAL_DESTROY_ON_A_REPLICATED_REGION
-              .toLocalizedString());
+          "Not allowed to do a local destroy on a replicated region");
-          throw new IllegalStateException(LocalizedStrings.CacheCreation_DISKSTORE_NOTFOUND_0
-              .toLocalizedString(getDiskStoreName()));
+          throw new IllegalStateException(String.format("Disk store %s not found",
+              getDiskStoreName()));
-            LocalizedStrings.LocalRegion_STATISTICS_DISABLED_FOR_REGION_0
-                .toLocalizedString(lr.getFullPath()));
+            String.format("Statistics disabled for region '%s'",
+                lr.getFullPath()));
-          logger.fatal(
-              LocalizedMessage.create(
-                  LocalizedStrings.EntryExpiryTask_ERROR_CALCULATING_EXPIRATION_0, e.getMessage()),
+          logger.fatal(String.format("Error calculating expiration %s", e.getMessage()),
-          logger.fatal(
-              LocalizedMessage.create(
-                  LocalizedStrings.EntryExpiryTask_ERROR_CALCULATING_EXPIRATION_0, e.getMessage()),
+          logger.fatal(String.format("Error calculating expiration %s", e.getMessage()),
-        LocalizedStrings.LocalRegion_FAILED_ENLISTEMENT_WITH_TRANSACTION_0
-            .toLocalizedString(jtaTransName),
+        String.format("Failed enlistement with transaction %s",
+            jtaTransName),
-          logger.error(LocalizedMessage
-              .create(LocalizedStrings.LocalRegion_EXCEPTION_OCCURRED_IN_CACHELISTENER), t);
+          logger.error("Exception occurred in CacheListener", t);
-              LocalizedStrings.LocalRegion_THIS_ITERATOR_DOES_NOT_SUPPORT_MODIFICATION
-                  .toLocalizedString());
+              "This iterator does not support modification");
-            LocalizedStrings.LocalRegion_REGIONENTRY_SHOULD_NOT_BE_NULL.toLocalizedString());
+            "regionEntry should not be null");
-            LocalizedStrings.LocalRegion_STATISTICS_DISABLED_FOR_REGION_0
-                .toLocalizedString(getFullPath()));
+            String.format("Statistics disabled for region '%s'",
+                getFullPath()));
-          LocalizedStrings.LocalRegion_VALUE_FOR_CONTAINSVALUEVALUE_CANNOT_BE_NULL
-              .toLocalizedString());
+          "Value for containsValue(value) cannot be null");
-              LocalizedStrings.LocalRegion_EXCEPTION_OCCURRED_WHILE_RE_CREATING_INDEX_DATA_ON_CLEARED_REGION
-                  .toLocalizedString(),
+              "Exception occurred while re creating index data on cleared region.",
-        LocalizedStrings.LocalRegion_REGION_INTEREST_REGISTRATION_IS_ONLY_SUPPORTED_FOR_PARTITIONEDREGIONS
-            .toLocalizedString());
+        "Region interest registration is only supported for PartitionedRegions");
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.LocalRegion_THE_FOLLOWING_EXCEPTION_OCCURRED_ATTEMPTING_TO_GET_KEY_0,
-              key), e);
+          logger.warn(String.format("The following exception occurred attempting to get key=%s",
+              key),
+              e);
-                LocalizedStrings.Region_PutAll_Applied_PartialKeys_At_Server_0
-                    .toLocalizedString(getFullPath()),
+                String.format("Region %s putAll at server applied partial keys due to exception.",
+                    getFullPath()),
-              .info(LocalizedMessage.create(LocalizedStrings.Region_PutAll_Applied_PartialKeys_0_1,
-                  new Object[] {getFullPath(), partialKeys}));
+              .info("Region {} putAll: {}",
+                  new Object[] {getFullPath(), partialKeys});
-              LocalizedStrings.Region_RemoveAll_Applied_PartialKeys_At_Server_0
-                  .toLocalizedString(getFullPath()),
+              String.format("Region %s removeAll at server applied partial keys due to exception.",
+                  getFullPath()),
-          logger.info(
-              LocalizedMessage.create(LocalizedStrings.Region_RemoveAll_Applied_PartialKeys_0_1,
-                  new Object[] {getFullPath(), partialKeys}));
+          logger.info("Region {} removeAll: {}",
+              new Object[] {getFullPath(), partialKeys});
-          LocalizedStrings.AbstractRegion_MAP_CANNOT_BE_NULL.toLocalizedString());
+          "map cannot be null");
-          LocalizedStrings.LocalRegion_VALUE_CANNOT_BE_NULL.toLocalizedString());
+          "Value cannot be null");
-          LocalizedStrings.LocalRegion_REGION_0_MUST_BE_DESTROYED_BEFORE_CALLING_GETDESTROYEDSUBREGIONSERIALNUMBERS
-              .toLocalizedString(getFullPath()));
+          String.format(
+              "Region %s must be destroyed before calling getDestroyedSubregionSerialNumbers",
+              getFullPath()));
-            LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
-                .toLocalizedString(function.getId(), members),
+            String.format(
+                "Function: %s cannot be executed because the members %s are running low on memory",
+                function.getId(), members),

INS25 MOV25 MOV8 MOV8 INS8 MOV8 INS8 MOV8 MOV8 MOV8 MOV8 MOV8 MOV8 MOV8 INS8 MOV8 INS53 MOV53 UPD43 MOV27 INS8 MOV27 INS45 INS45 INS45 INS53 INS53 INS45 INS53 INS14 UPD42 UPD42 MOV32 INS42 INS45 INS53 UPD42 INS42 INS45 INS14 INS14 MOV8 INS45 INS14 MOV43 INS45 INS45 MOV32 UPD42 UPD42 INS45 UPD42 INS42 INS45 INS14 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 MOV43 INS45 INS45 MOV43 INS45 INS45 INS45 INS8 INS45 INS45 INS45 INS45 INS45 MOV43 INS45 INS45 INS45 UPD42 UPD42 INS45 INS45 INS45 INS45 MOV43 INS45 INS45 INS45 MOV43 INS45 MOV43 INS45 MOV43 INS45 MOV43 INS45 MOV43 INS45 MOV43 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 INS53 MOV43 INS45 MOV43 INS45 MOV43 MOV43 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV43 INS45 INS45 MOV43 INS45 INS12 MOV12 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV43 UPD42 INS42 INS45 INS45 INS14 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV44 INS8 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 UPD42 INS42 INS45 MOV43 INS45 MOV43 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS12 MOV12 INS45 INS45 INS21 MOV32 MOV32 UPD42 INS42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 INS45 UPD42 INS42 INS45 MOV44 INS8 INS32 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 INS45 UPD42 INS42 INS45 INS45 MOV43 INS25 INS45 UPD42 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS45 UPD42 UPD42 INS45 UPD42 INS42 INS45 MOV38 INS8 INS42 INS42 INS45 MOV32 UPD42 UPD42 INS45 UPD42 UPD42 INS45 INS45 INS21 UPD42 INS42 INS45 UPD42 UPD42 INS45 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS45 UPD42 UPD42 INS45 INS42 INS42 INS45 MOV32 UPD42 UPD42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL40 DEL40