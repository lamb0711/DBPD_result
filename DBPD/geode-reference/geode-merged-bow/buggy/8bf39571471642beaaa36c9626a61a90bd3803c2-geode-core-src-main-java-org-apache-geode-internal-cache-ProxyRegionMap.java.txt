Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Internal implementation of {@link RegionMap}for regions whose DataPolicy is
- * proxy. Proxy maps are always empty.
+ * Internal implementation of {@link RegionMap}for regions whose DataPolicy is proxy. Proxy maps are
+ * always empty.
- *  
+ * 
-  public RegionEntryFactory getEntryFactory()
-  {
+  public RegionEntryFactory getEntryFactory() {
+
-  @SuppressWarnings({ "rawtypes", "unchecked" })
+  @SuppressWarnings({"rawtypes", "unchecked"})
+
-   * Used to modify an existing RegionEntry or create a new one when processing
-   * the values obtained during a getInitialImage.
+   * Used to modify an existing RegionEntry or create a new one when processing the values obtained
+   * during a getInitialImage.
-      boolean wasRecovered, boolean deferLRUCallback, VersionTag version, InternalDistributedMember sender, boolean forceValue)
-  {
+      boolean wasRecovered, boolean deferLRUCallback, VersionTag version,
+      InternalDistributedMember sender, boolean forceValue) {
-  public boolean destroy(EntryEventImpl event, 
-                         boolean inTokenMode,
-                         boolean duringRI,
-                         boolean cacheWrite,
-                         boolean isEviction,
-                         Object expectedOldValue,
-                         boolean removeRecoveredEntry) 
-  throws CacheWriterException, EntryNotFoundException, TimeoutException {
+  public boolean destroy(EntryEventImpl event, boolean inTokenMode, boolean duringRI,
+      boolean cacheWrite, boolean isEviction, Object expectedOldValue, boolean removeRecoveredEntry)
+      throws CacheWriterException, EntryNotFoundException, TimeoutException {
-    this.owner.basicDestroyPart2(markerEntry, event, inTokenMode, false /*Clear conflict occured */, duringRI, true);
+    this.owner.basicDestroyPart2(markerEntry, event, inTokenMode,
+        false /* Clear conflict occured */, duringRI, true);
-  public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks,
-      boolean forceNewEntry, boolean forceCallback)
-      throws EntryNotFoundException {
-    
+  public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean forceNewEntry,
+      boolean forceCallback) throws EntryNotFoundException {
+
-    this.owner.basicInvalidatePart2(markerEntry, event, false /*Clear conflict occurred */, true);
+    this.owner.basicInvalidatePart2(markerEntry, event, false /* Clear conflict occurred */, true);
+
-  public RegionEntry basicPut(EntryEventImpl event,
-                              long lastModified,
-                              boolean ifNew,
-                              boolean ifOld,
-                              Object expectedOldValue,
-                              boolean requireOldValue,
-                              boolean overwriteDestroyed)
-  throws CacheWriterException, TimeoutException {
-    if (!event.isOriginRemote() && event.getOperation() != Operation.REPLACE) { // bug 42167 - don't convert replace to CREATE
+  public RegionEntry basicPut(EntryEventImpl event, long lastModified, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, boolean overwriteDestroyed)
+      throws CacheWriterException, TimeoutException {
+    if (!event.isOriginRemote() && event.getOperation() != Operation.REPLACE) { // bug 42167 - don't
+                                                                                // convert replace
+                                                                                // to CREATE
-    final boolean cacheWrite = !event.isOriginRemote() && !event.isNetSearch() && !event.getInhibitDistribution() && event.isGenerateCallbacks()
-        && (cacheWriter != null
-            || this.owner.hasServerProxy()
-            || this.owner.scope.isDistributed());
+    final boolean cacheWrite = !event.isOriginRemote() && !event.isNetSearch()
+        && !event.getInhibitDistribution() && event.isGenerateCallbacks()
+        && (cacheWriter != null || this.owner.hasServerProxy() || this.owner.scope.isDistributed());
-        CacheDistributionAdvisor cda =
-          ((DistributedRegion)this.owner).getDistributionAdvisor();
+        CacheDistributionAdvisor cda = ((DistributedRegion) this.owner).getDistributionAdvisor();
-      }
-      else {
+      } else {
-      if (event.getOperation() != Operation.REPLACE) { // bug #42167 - makeCreate() causes REPLACE to eventually become UPDATE
+      if (event.getOperation() != Operation.REPLACE) { // bug #42167 - makeCreate() causes REPLACE
+                                                       // to eventually become UPDATE
-      this.owner.cacheWriteBeforePut(event, netWriteRecipients,
-          cacheWriter, requireOldValue, expectedOldValue);
+      this.owner.cacheWriteBeforePut(event, netWriteRecipients, cacheWriter, requireOldValue,
+          expectedOldValue);
-      this.owner.basicPutPart2(event, markerEntry, true,
-        lastModified, false /*Clear conflict occurred */);
-    this.owner.basicPutPart3(event, markerEntry, true,
-          lastModified, true, ifNew, ifOld, expectedOldValue, requireOldValue);
+        this.owner.basicPutPart2(event, markerEntry, true, lastModified,
+            false /* Clear conflict occurred */);
+    this.owner.basicPutPart3(event, markerEntry, true, lastModified, true, ifNew, ifOld,
+        expectedOldValue, requireOldValue);
-  public void txApplyDestroy(Object key, TransactionId txId,
-      TXRmtEvent txEvent, boolean inTokenMode, boolean inRI, Operation op, EventID eventId, Object aCallbackArgument,List<EntryEventImpl> pendingCallbacks,FilterRoutingInfo filterRoutingInfo,ClientProxyMembershipID bridgeContext,
-      boolean isOriginRemote, TXEntryState txEntryState, VersionTag versionTag, long tailKey) {
-    this.owner.txApplyDestroyPart2(markerEntry, key, inTokenMode,  false /*Clear conflict occured */);
+  public void txApplyDestroy(Object key, TransactionId txId, TXRmtEvent txEvent,
+      boolean inTokenMode, boolean inRI, Operation op, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, boolean isOriginRemote, TXEntryState txEntryState,
+      VersionTag versionTag, long tailKey) {
+    this.owner.txApplyDestroyPart2(markerEntry, key, inTokenMode,
+        false /* Clear conflict occured */);
-        txEvent.addDestroy(this.owner, markerEntry, key,aCallbackArgument);
+        txEvent.addDestroy(this.owner, markerEntry, key, aCallbackArgument);
-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner,
-                                                !inTokenMode)) {
+      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, !inTokenMode)) {
-        @Released EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, op,
-            key, null, txId, txEvent, eventId, aCallbackArgument,filterRoutingInfo,bridgeContext, txEntryState, versionTag, tailKey);
+        @Released
+        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, op, key, null, txId, txEvent,
+            eventId, aCallbackArgument, filterRoutingInfo, bridgeContext, txEntryState, versionTag,
+            tailKey);
-        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-        if (pendingCallbacks == null) {
-          this.owner
-              .invokeTXCallbacks(EnumListenerEvent.AFTER_DESTROY, e, true/* callDispatchListenerEvent */);
-        } else {
-          pendingCallbacks.add(e);
-          cbEventInPending = true;
-        }
+          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+          if (pendingCallbacks == null) {
+            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_DESTROY, e,
+                true/* callDispatchListenerEvent */);
+          } else {
+            pendingCallbacks.add(e);
+            cbEventInPending = true;
+          }
-          if (!cbEventInPending) e.release();
+          if (!cbEventInPending)
+            e.release();
-  public void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
-       TransactionId txId, TXRmtEvent txEvent, boolean localOp, 
-       EventID eventId, Object aCallbackArgument,List<EntryEventImpl> pendingCallbacks,FilterRoutingInfo filterRoutingInfo,ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag, long tailKey) {
-    this.owner.txApplyInvalidatePart2(markerEntry, key, didDestroy, true, false /*Clear conflic occured */);
+  public void txApplyInvalidate(Object key, Object newValue, boolean didDestroy, TransactionId txId,
+      TXRmtEvent txEvent, boolean localOp, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag,
+      long tailKey) {
+    this.owner.txApplyInvalidatePart2(markerEntry, key, didDestroy, true,
+        false /* Clear conflic occured */);
-        txEvent.addInvalidate(this.owner, markerEntry, key, newValue,aCallbackArgument);
+        txEvent.addInvalidate(this.owner, markerEntry, key, newValue, aCallbackArgument);
-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner,
-                                                this.owner.isInitialized())) {
+      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, this.owner.isInitialized())) {
-        @Released EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, 
-            localOp ? Operation.LOCAL_INVALIDATE : Operation.INVALIDATE,
-            key, newValue, txId, txEvent, eventId, aCallbackArgument,filterRoutingInfo,bridgeContext, txEntryState, versionTag, tailKey);
+        @Released
+        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner,
+            localOp ? Operation.LOCAL_INVALIDATE : Operation.INVALIDATE, key, newValue, txId,
+            txEvent, eventId, aCallbackArgument, filterRoutingInfo, bridgeContext, txEntryState,
+            versionTag, tailKey);
-        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-        if (pendingCallbacks == null) {
-          this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_INVALIDATE, e,
-              true/* callDispatchListenerEvent */);
-        } else {
-          pendingCallbacks.add(e);
-          cbEventInPending = true;
-        }
+          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+          if (pendingCallbacks == null) {
+            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_INVALIDATE, e,
+                true/* callDispatchListenerEvent */);
+          } else {
+            pendingCallbacks.add(e);
+            cbEventInPending = true;
+          }
-          if (!cbEventInPending) e.release();
+          if (!cbEventInPending)
+            e.release();
-  public void txApplyPut(Operation p_putOp, Object key, Object newValue,
-      boolean didDestroy, TransactionId txId, TXRmtEvent txEvent, 
-      EventID eventId, Object aCallbackArgument, List<EntryEventImpl> pendingCallbacks,FilterRoutingInfo filterRoutingInfo,ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag, long tailKey) {
+  public void txApplyPut(Operation p_putOp, Object key, Object newValue, boolean didDestroy,
+      TransactionId txId, TXRmtEvent txEvent, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag,
+      long tailKey) {
-    this.owner.txApplyPutPart2(markerEntry, key, newValue, lastMod, true,
-        didDestroy,  false /*Clear conflict occured */);
+    this.owner.txApplyPutPart2(markerEntry, key, newValue, lastMod, true, didDestroy,
+        false /* Clear conflict occured */);
-        txEvent.addPut(putOp, this.owner, markerEntry, key, newValue,aCallbackArgument);
+        txEvent.addPut(putOp, this.owner, markerEntry, key, newValue, aCallbackArgument);
-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner,
-                                                this.owner.isInitialized())) {
+      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, this.owner.isInitialized())) {
-        @Released EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, putOp, key, 
-            newValue, txId, txEvent, eventId, aCallbackArgument,filterRoutingInfo,bridgeContext, txEntryState, versionTag, tailKey);
+        @Released
+        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, putOp, key, newValue, txId,
+            txEvent, eventId, aCallbackArgument, filterRoutingInfo, bridgeContext, txEntryState,
+            versionTag, tailKey);
-        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-        if (pendingCallbacks == null) {
-          this.owner
-              .invokeTXCallbacks(EnumListenerEvent.AFTER_CREATE, e, true/* callDispatchListenerEvent */);
-        } else {
-          pendingCallbacks.add(e);
-          cbEventInPending = true;
-        }
+          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+          if (pendingCallbacks == null) {
+            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_CREATE, e,
+                true/* callDispatchListenerEvent */);
+          } else {
+            pendingCallbacks.add(e);
+            cbEventInPending = true;
+          }
-          if (!cbEventInPending) e.release();
+          if (!cbEventInPending)
+            e.release();
-  
+
-  public void removeEntry(Object key, RegionEntry re, boolean updateStat,
-      EntryEventImpl event, LocalRegion owner) {
+  public void removeEntry(Object key, RegionEntry re, boolean updateStat, EntryEventImpl event,
+      LocalRegion owner) {
-   * Provides a dummy implementation of RegionEntry so that basicPut can return
-   * an instance that make the upper levels think it did the put.
+   * Provides a dummy implementation of RegionEntry so that basicPut can return an instance that
+   * make the upper levels think it did the put.
-  public static class ProxyRegionEntry implements RegionEntry
-  {
-   
+  public static class ProxyRegionEntry implements RegionEntry {
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-    
+
-    
-    public VersionTag generateVersionTag(VersionSource member,
-        boolean withDelta, LocalRegion region, EntryEventImpl event) {
+
+    public VersionTag generateVersionTag(VersionSource member, boolean withDelta,
+        LocalRegion region, EntryEventImpl event) {
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
-    }
-    
-    public boolean isRemovedPhase2() {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public boolean fillInValue(LocalRegion r,
-        InitialImageOperation.Entry entry, ByteArrayDataInput in, DM mgr) {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public boolean isRemovedPhase2() {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    public boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
+        ByteArrayDataInput in, DM mgr) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-//    @Override
-//    public void _setValue(Object value) {
-//      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
-//    }
+    // @Override
+    // public void _setValue(Object value) {
+    // throw new
+    // UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    // }
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));      
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-    public Object getValueOnDisk(LocalRegion r)
-      throws EntryNotFoundException {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public Object getValueOnDiskOrBuffer(LocalRegion r)
-      throws EntryNotFoundException {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+
+    public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    /* (non-Javadoc)
-     * @see org.apache.geode.internal.cache.RegionEntry#getSerializedValueOnDisk(org.apache.geode.internal.cache.LocalRegion)
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see org.apache.geode.internal.cache.RegionEntry#getSerializedValueOnDisk(org.apache.geode.
+     * internal.cache.LocalRegion)
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public boolean initialImagePut(LocalRegion region, long lastModified,
-                                   Object newValue, boolean wasRecovered, boolean versionTagAccepted) {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public boolean initialImagePut(LocalRegion region, long lastModified, Object newValue,
+        boolean wasRecovered, boolean versionTagAccepted) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public boolean initialImageInit(LocalRegion region, long lastModified,
-                                    Object newValue, boolean create, boolean wasRecovered, boolean versionTagAccepted)  {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public boolean initialImageInit(LocalRegion region, long lastModified, Object newValue,
+        boolean create, boolean wasRecovered, boolean versionTagAccepted) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public boolean destroy(LocalRegion region,
-                           EntryEventImpl event,
-                           boolean inTokenMode,
-                           boolean cacheWrite,
-                           Object expectedOldValue,
-                           boolean forceDestroy,
-                           boolean removeRecoveredEntry)
+    public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+        boolean cacheWrite, Object expectedOldValue, boolean forceDestroy,
+        boolean removeRecoveredEntry)
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-    public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner)
-    {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
-    }
-    @Override
-    public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    /* (non-Javadoc)
-     * @see org.apache.geode.internal.cache.RegionEntry#concurrencyCheck(org.apache.geode.internal.cache.LocalRegion, org.apache.geode.internal.cache.versions.VersionTag, org.apache.geode.distributed.internal.membership.InternalDistributedMember, org.apache.geode.distributed.internal.membership.InternalDistributedMember)
+    @Override
+    public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see
+     * org.apache.geode.internal.cache.RegionEntry#concurrencyCheck(org.apache.geode.internal.cache.
+     * LocalRegion, org.apache.geode.internal.cache.versions.VersionTag,
+     * org.apache.geode.distributed.internal.membership.InternalDistributedMember,
+     * org.apache.geode.distributed.internal.membership.InternalDistributedMember)
-    public void processVersionTag(LocalRegion r, VersionTag tag,
-        InternalDistributedMember thisVM, InternalDistributedMember sender) {
+    public void processVersionTag(LocalRegion r, VersionTag tag, InternalDistributedMember thisVM,
+        InternalDistributedMember sender) {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));      
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));      
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));      
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-      
+
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
-      }
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
-      
+
-    public void setValue(RegionEntryContext context, Object value,
-        EntryEventImpl event) throws RegionClearedException {
-      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    public void setValue(RegionEntryContext context, Object value, EntryEventImpl event)
+        throws RegionClearedException {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
-    public void setInUseByTransaction(boolean v) {
-    }
+    public void setInUseByTransaction(boolean v) {}
-    public void incRefCount() {
-    }
+    public void incRefCount() {}
-    public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {
-    }
+    public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {}
-    public void resetRefCount(NewLRUClockHand lruList) {
-    }
+    public void resetRefCount(NewLRUClockHand lruList) {}
-    public Object prepareValueForCache(RegionEntryContext r, Object val,
-        EntryEventImpl event, boolean isEntryUpdate) {
+    public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+        boolean isEntryUpdate) {
-    //do nothing
+    // do nothing
-  
+
-    //do nothing.
-    
+    // do nothing.
+
-  public boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction, boolean isScheduledTombstone) {
+  public boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction,
+      boolean isScheduledTombstone) {
-  
+
-    // Do nothing. Not applicable for clients.    
+    // Do nothing. Not applicable for clients.
-  public void close() {
-  }
+  public void close() {}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66