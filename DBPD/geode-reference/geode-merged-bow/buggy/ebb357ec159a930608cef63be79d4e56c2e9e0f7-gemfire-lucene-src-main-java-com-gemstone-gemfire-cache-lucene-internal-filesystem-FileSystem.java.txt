Adding a couple of simple junit tests for FileSystem

Testing some basic file write and read operations, as well as file
renames and deletes.

I also added some more javadocs to the filesystem classes and moved them
into a separate package.

-package com.gemstone.gemfire.cache.lucene.internal;
+package com.gemstone.gemfire.cache.lucene.internal.filesystem;
+import java.util.concurrent.ConcurrentMap;
-
-import com.gemstone.gemfire.cache.Region;
-
+/**
+ * A Filesystem like interface that stores file data in gemfire regions.
+ * 
+ * This filesystem is safe for use with multiple threads if the threads are not
+ * modifying the same files. A single file is not safe to modify by multiple
+ * threads, even between different members of the distributed system.
+ * 
+ * Changes to a file may not be visible to other members of the system until the
+ * FileOutputStream is closed.
+ */
-  private final Region<String, File> fileRegion;
-  private final Region<ChunkKey, byte[]> chunkRegion;
+  private final ConcurrentMap<String, File> fileRegion;
+  private final ConcurrentMap<ChunkKey, byte[]> chunkRegion;
-  public FileSystem(Region<String, File> fileRegion, Region<ChunkKey, byte[]> chunkRegion) {
+  public FileSystem(ConcurrentMap<String, File> fileRegion, ConcurrentMap<ChunkKey, byte[]> chunkRegion) {
+    // TODO - What is the state of the system if 
+    // things crash in the middle of removing this file?
+    // Seems like a file will be left with some 
+    // dangling chunks at the end of the file
+    
-    final File sourceFile = fileRegion.remove(source);
+    // TODO - What is the state of the system if 
+    // things crash in the middle of moving this file?
+    // Seems like a file will be left with some 
+    // dangling chunks at the end of the file
+    
+    final File sourceFile = fileRegion.get(source);
+    fileRegion.remove(source);

UPD40 UPD40 INS29 INS65 UPD74 UPD74 INS66 INS66 INS66 INS66 INS66 INS66 UPD43 UPD43 UPD74 UPD74 INS21 UPD42 UPD42 UPD43 UPD43 MOV32 UPD42 UPD42 INS32 INS42 INS42 INS42