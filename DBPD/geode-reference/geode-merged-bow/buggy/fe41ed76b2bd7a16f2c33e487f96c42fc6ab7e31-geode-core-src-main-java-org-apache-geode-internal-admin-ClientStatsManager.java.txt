GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import java.util.Iterator;
-import org.apache.geode.cache.query.CqQuery;
+import org.apache.geode.internal.cache.InternalCache;
- * 
-   * @guarded.By ClientStatsManager.class
+   * GuardedBy ClientStatsManager.class
-  static GemFireCacheImpl lastInitializedCache = null;
+  private static InternalCache lastInitializedCache = null;
-   * @guarded.By ClientStatsManager.class
+   * GuardedBy ClientStatsManager.class
-   * @guarded.By ClientStatsManager.class
+   * GuardedBy ClientStatsManager.class
-    GemFireCacheImpl currentCache = GemFireCacheImpl.getInstance();
+    InternalCache currentCache = GemFireCacheImpl.getInstance();
-    if (logger.fineEnabled())
+    if (logger.fineEnabled()) {
-
+    }
-   * 
+   *
+   * GuardedBy ClientStatsManager.class
+   *
-   * @guarded.By ClientStatsManager.class
-  private static boolean initializeStatistics(GemFireCacheImpl currentCache) {
-
+  private static boolean initializeStatistics(InternalCache currentCache) {
-
-  private static ClientHealthStats getClientHealthStats(GemFireCacheImpl currentCache,
-      PoolImpl pool) {
+  private static ClientHealthStats getClientHealthStats(InternalCache currentCache, PoolImpl pool) {
-    {
-      int gets = -1;
-      int puts = -1;
-      int misses = -1;
-      long processCpuTime = -1;
-      int threads = -1;
-      int cacheListenerCalls = -1;
-      int cpus = -1;
-      String poolName = "";
-      if (cachePerfStats != null) {
-        gets = cachePerfStats.getInt("gets");
-        puts = cachePerfStats.getInt("puts");
-        misses = cachePerfStats.getInt("misses");
-        cacheListenerCalls = cachePerfStats.getInt("cacheListenerCallsCompleted");
-      }
+    int gets = -1;
+    int puts = -1;
+    int misses = -1;
+    int cacheListenerCalls = -1;
-      if (vmStats != null) {
-        processCpuTime = vmStats.getLong("processCpuTime");
-        threads = vmStats.getInt("threads");
-        cpus = vmStats.getInt("cpus");
-      }
+    if (cachePerfStats != null) {
+      gets = cachePerfStats.getInt("gets");
+      puts = cachePerfStats.getInt("puts");
+      misses = cachePerfStats.getInt("misses");
+      cacheListenerCalls = cachePerfStats.getInt("cacheListenerCallsCompleted");
+    }
-      stats.setNumOfGets(gets);
-      stats.setNumOfPuts(puts);
-      stats.setNumOfMisses(misses);
-      stats.setNumOfCacheListenerCalls(cacheListenerCalls);
-      stats.setProcessCpuTime(processCpuTime);
-      stats.setNumOfThreads(threads);
-      stats.setCpus(cpus);
+    long processCpuTime = -1;
+    int threads = -1;
+    int cpus = -1;
+    if (vmStats != null) {
+      processCpuTime = vmStats.getLong("processCpuTime");
+      threads = vmStats.getInt("threads");
+      cpus = vmStats.getInt("cpus");
+    }
-      poolName = pool.getName();
-      try {
-        Map<String, String> newPoolStats = stats.getPoolStats();
-        String poolStatsStr = "MinConnections=" + pool.getMinConnections() + ";MaxConnections="
-            + pool.getMaxConnections() + ";Redudancy=" + pool.getSubscriptionRedundancy() + ";CQS="
-            + pool.getQueryService().getCqs().length;
-        logger.info(LocalizedStrings.DEBUG,
-            "ClientHealthStats for poolname " + poolName + " poolStatsStr=" + poolStatsStr);
+    stats.setNumOfGets(gets);
+    stats.setNumOfPuts(puts);
+    stats.setNumOfMisses(misses);
+    stats.setNumOfCacheListenerCalls(cacheListenerCalls);
+    stats.setProcessCpuTime(processCpuTime);
+    stats.setNumOfThreads(threads);
+    stats.setCpus(cpus);
-        newPoolStats.put(poolName, poolStatsStr);
+    String poolName = pool.getName();
+    try {
+      Map<String, String> newPoolStats = stats.getPoolStats();
+      String poolStatsStr = "MinConnections=" + pool.getMinConnections() + ";MaxConnections="
+          + pool.getMaxConnections() + ";Redundancy=" + pool.getSubscriptionRedundancy() + ";CQS="
+          + pool.getQueryService().getCqs().length;
+      logger.info(LocalizedStrings.DEBUG,
+          "ClientHealthStats for poolName " + poolName + " poolStatsStr=" + poolStatsStr);
-        // consider old stats
-        Region clientHealthMonitoringRegion =
-            ClientHealthMonitoringRegion.getInstance(currentCache);
+      newPoolStats.put(poolName, poolStatsStr);
-        if (clientHealthMonitoringRegion != null) {
-          InternalDistributedSystem ds =
-              (InternalDistributedSystem) currentCache.getDistributedSystem();
-          ClientHealthStats oldStats =
-              (ClientHealthStats) clientHealthMonitoringRegion.get(ds.getMemberId());
-          logger.info(LocalizedStrings.DEBUG, "getClientHealthStats got oldStats  " + oldStats);
-          if (oldStats != null) {
-            Map<String, String> oldPoolStats = oldStats.getPoolStats();
-            logger.info(LocalizedStrings.DEBUG,
-                "getClientHealthStats got oldPoolStats  " + oldPoolStats);
-            if (oldPoolStats != null) {
-              Iterator<Entry<String, String>> it = oldPoolStats.entrySet().iterator();
-              while (it.hasNext()) {
-                Entry<String, String> entry = it.next();
-                if (!poolName.equals(entry.getKey())) {
-                  stats.getPoolStats().put(entry.getKey(), entry.getValue());
-                }
+      // consider old stats
+      Region clientHealthMonitoringRegion = ClientHealthMonitoringRegion.getInstance(currentCache);
+
+      if (clientHealthMonitoringRegion != null) {
+        InternalDistributedSystem ds =
+            (InternalDistributedSystem) currentCache.getDistributedSystem();
+        ClientHealthStats oldStats =
+            (ClientHealthStats) clientHealthMonitoringRegion.get(ds.getMemberId());
+        logger.info(LocalizedStrings.DEBUG, "getClientHealthStats got oldStats  " + oldStats);
+        if (oldStats != null) {
+          Map<String, String> oldPoolStats = oldStats.getPoolStats();
+          logger.info(LocalizedStrings.DEBUG,
+              "getClientHealthStats got oldPoolStats  " + oldPoolStats);
+          if (oldPoolStats != null) {
+            for (Entry<String, String> entry : oldPoolStats.entrySet()) {
+              if (!poolName.equals(entry.getKey())) {
+                stats.getPoolStats().put(entry.getKey(), entry.getValue());
-
-      } catch (Exception e) {
-        logger.fine("Exception in getting pool stats in  getClientHealthStats "
-            + CliUtil.stackTraceAsString(e));
+
+    } catch (Exception e) {
+      logger.fine("Exception in getting pool stats in  getClientHealthStats "
+          + CliUtil.stackTraceAsString(e));
+

MOV26 UPD40 INS83 UPD43 MOV8 INS65 UPD42 UPD65 UPD65 INS65 UPD43 UPD43 MOV25 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV25 MOV60 MOV60 MOV60 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS60 INS54 MOV21 MOV41 MOV66 UPD66 MOV66 UPD66 UPD66 UPD43 INS8 MOV66 UPD66 MOV66 UPD42 UPD42 MOV43 INS59 MOV8 MOV12 UPD42 MOV21 INS42 MOV32 MOV60 MOV60 INS21 MOV21 MOV60 INS32 MOV27 MOV21 INS42 INS42 INS40 INS27 MOV60 MOV60 MOV21 MOV32 UPD45 INS45 INS42 INS45 INS42 MOV27 UPD42 MOV42 MOV27 MOV60 MOV21 INS25 MOV45 MOV32 MOV27 MOV8 INS70 INS44 MOV32 INS8 MOV74 INS42 MOV25 DEL40 DEL26 DEL65 DEL65 DEL65 DEL65 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL45 DEL42 DEL40 DEL25 DEL42 DEL45 DEL59 DEL60 DEL42 DEL7 DEL21 DEL54 DEL8 DEL8