GEODE-4362: view preparation throws uncaught RuntimeException

The problem was happening when a new member joined with a coordinator that
suddenly shuts down before other members have been told to install the
new membership view.  They've received a "prepare for view change" message
containing the new view but have not been told to commit that change.

Another member then becomes coordinator and sees that there was a new member
in the prepared view.  It picks this up and adds it to the new view it
sends out.

The problem was that the public encryption keys of the members weren't
being transferred from the old view to the new view and when looking for
public keys we were fishing them out of GMSEncrypt instead of getting
them from the membership view.  This caused an NPE to be thrown when trying
to fish out the public key of the new member - GMSEncrypt didn't know about
this new member because the view containing it was never installed - it
was only prepared.

The fix is to transfer the public keys from the old view to the new one and
to look for public keys in the view instead of GMSEncrypt.

This closes #1520

-import java.util.Iterator;
-import java.util.List;
+import java.util.Arrays;
-public class GMSEncrypt implements Cloneable {
-
-  public static long encodingsPerformed;
-  public static long decodingsPerformed;
-
+public final class GMSEncrypt implements Cloneable {
-  public static final int numberOfPeerEncryptorCopies =
-      Integer.getInteger("GMSEncrypt.MAX_ENCRYPTORS",
-          Math.max(Runtime.getRuntime().availableProcessors() * 4, 16)).intValue();
+  private static final int numberOfPeerEncryptorCopies = Integer.getInteger(
+      "GMSEncrypt.MAX_ENCRYPTORS", Math.max(Runtime.getRuntime().availableProcessors() * 4, 16));
-  protected GMSEncrypt() {
+  private GMSEncrypt() {
-  public GMSEncrypt(Services services) throws Exception {
+  GMSEncrypt(Services services) throws Exception {
-  public GMSEncrypt(Services services, InternalDistributedMember mbr) throws Exception {
+  GMSEncrypt(Services services, InternalDistributedMember mbr) throws Exception {
-  void initEncryptors() {
+  private void initEncryptors() {
-      // createPeerEncryptor(mbr, publickey);
-  protected GMSEncrypt clone() throws CloneNotSupportedException {
+  protected GMSEncrypt clone() {
-      // PublicKey pubKey = keyFact.generatePublic(x509KeySpec);
-  protected PeerEncryptor getPeerEncryptor(InternalDistributedMember member) throws Exception {
+  private PeerEncryptor getPeerEncryptor(InternalDistributedMember member) throws Exception {
-          byte[] pk =
-              (byte[]) memberToPeerEncryptor.get(new InternalDistributedMemberWrapper(member));
+          byte[] pk = memberToPeerEncryptor.get(new InternalDistributedMemberWrapper(member));
-          m = new ConcurrentHashMap<InternalDistributedMember, PeerEncryptor>();
+          m = new ConcurrentHashMap<>();
-  public static byte[] encryptBytes(byte[] data, Cipher encrypt) throws Exception {
+  private static byte[] encryptBytes(byte[] data, Cipher encrypt) throws Exception {
-  public static byte[] decryptBytes(byte[] data, Cipher decrypt) throws Exception {
+  private static byte[] decryptBytes(byte[] data, Cipher decrypt) throws Exception {
+  private class PeerEncryptor {
-  protected class PeerEncryptor {
-
-    private PublicKey peerPublicKey = null;
+    private PublicKey peerPublicKey;
-    protected PeerEncryptor(byte[] peerPublicKeyBytes) throws Exception {
+    private PeerEncryptor(byte[] peerPublicKeyBytes) throws Exception {
-    public synchronized byte[] encryptBytes(byte[] data) throws Exception {
-      String algo = null;
+    private synchronized byte[] encryptBytes(byte[] data) throws Exception {
+      String algo;
-  protected static synchronized Cipher getEncryptCipher(String dhSKAlgo, PrivateKey privateKey,
+  private static synchronized Cipher getEncryptCipher(String dhSKAlgo, PrivateKey privateKey,
-  protected static Cipher getEncryptCipher(String dhSKAlgo, byte[] secretBytes) throws Exception {
+  private static Cipher getEncryptCipher(String dhSKAlgo, byte[] secretBytes) throws Exception {
-  protected static synchronized Cipher getDecryptCipher(String dhSKAlgo, PrivateKey privateKey,
+  private static synchronized Cipher getDecryptCipher(String dhSKAlgo, PrivateKey privateKey,
-  protected static Cipher getDecryptCipher(String dhSKAlgo, byte[] secretBytes) throws Exception {
-    Cipher decrypt = null;
+  private static Cipher getDecryptCipher(String dhSKAlgo, byte[] secretBytes) throws Exception {
+    Cipher decrypt;
-  protected static byte[] generateSecret(String dhSKAlgo, PrivateKey privateKey,
+  private static byte[] generateSecret(String dhSKAlgo, PrivateKey privateKey,
-  protected static PublicKey getPublicKey(byte[] publicKeyBytes) throws Exception {
+  private static PublicKey getPublicKey(byte[] publicKeyBytes) throws Exception {
-    // PublicKey pubKey = keyFact.generatePublic(x509KeySpec);
-  protected static void initEncryptCipher(KeyAgreement ka, List<PublicKey> publicKeys)
-      throws Exception {
-    Iterator<PublicKey> itr = publicKeys.iterator();
-    while (itr.hasNext()) {
-      ka.doPhase(itr.next(), !itr.hasNext());
-    }
-  }
-
-  protected class ClusterEncryptor {
+  private class ClusterEncryptor {
-    public ClusterEncryptor(GMSEncrypt other) throws Exception {
+    private ClusterEncryptor(GMSEncrypt other) throws Exception {
-    public ClusterEncryptor(byte[] sb) {
+    private ClusterEncryptor(byte[] sb) {
-    public synchronized byte[] encryptBytes(byte[] data) throws Exception {
+    private synchronized byte[] encryptBytes(byte[] data) throws Exception {
-    public synchronized byte[] decryptBytes(byte[] data) throws Exception {
+    private synchronized byte[] decryptBytes(byte[] data) throws Exception {

UPD40 INS83 INS42 UPD83 UPD83 INS83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 MOV32 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 MOV5 MOV32 UPD74 DEL40 DEL26 DEL42 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL32 DEL83 DEL83 DEL42 DEL43 DEL39 DEL85 DEL5 DEL11 DEL42 DEL43 DEL42 DEL43 DEL33 DEL33 DEL33 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31