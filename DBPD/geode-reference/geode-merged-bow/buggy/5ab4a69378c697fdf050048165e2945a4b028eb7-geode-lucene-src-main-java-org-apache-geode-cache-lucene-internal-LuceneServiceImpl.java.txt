GEODE-2950: Updated error messages

	* Different error messages are displayed when validating region names versus indexes.
	* Added flexible enum allowing for expanded error messages and name validation.

	This closes #540

-  public static void validateCreateIndexCommandParams(String name, boolean isRegionPath) {
-    if (name == null) {
-      throw new IllegalArgumentException(
-          LocalizedStrings.LocalRegion_NAME_CANNOT_BE_NULL.toLocalizedString());
-    }
-    if (name.isEmpty()) {
-      throw new IllegalArgumentException(
-          LocalizedStrings.LocalRegion_NAME_CANNOT_BE_EMPTY.toLocalizedString());
-    }
+  public enum validateCommandParameters {
+    REGION_PATH, INDEX_NAME;
-    if (name.startsWith("__")) {
-      throw new IllegalArgumentException(
-          "Parameter names may not begin with a double-underscore: " + name);
-    }
+    public void validateName(String name) {
+      if (name == null) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.LocalRegion_NAME_CANNOT_BE_NULL.toLocalizedString());
+      }
+      if (name.isEmpty()) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.LocalRegion_NAME_CANNOT_BE_EMPTY.toLocalizedString());
+      }
-    final Pattern NAME_PATTERN;
-    if (isRegionPath) {
-      NAME_PATTERN = Pattern.compile("[aA-zZ0-9-_./]+");
-    } else {
-      NAME_PATTERN = Pattern.compile("[aA-zZ0-9-_.]+");
-    }
+      boolean iae = false;
+      String msg =
+          " names may only be alphanumeric, must not begin with double-underscores, but can contain hyphens";
+      Matcher matcher = null;
+      switch (this) {
+        case REGION_PATH:
+          matcher = Pattern.compile("[aA-zZ0-9-_./]+").matcher(name);
+          msg = "Region" + msg + ", underscores, or forward slashes: ";
+          iae = name.startsWith("__") || !matcher.matches();
+          break;
+        case INDEX_NAME:
+          matcher = Pattern.compile("[aA-zZ0-9-_.]+").matcher(name);
+          msg = "Index" + msg + " or underscores: ";
+          iae = name.startsWith("__") || !matcher.matches();
+          break;
+        default:
+          throw new IllegalArgumentException("Illegal option for validateName function");
+      }
-    // Ensure the region only contains valid characters
-    Matcher matcher = NAME_PATTERN.matcher(name);
-    if (!matcher.matches()) {
-      throw new IllegalArgumentException(
-          "Parameter names may only be alphanumeric, though they can contain hyphens or underscores: "
-              + name);
+      // Ensure the region only contains valid characters
+      if (iae) {
+        throw new IllegalArgumentException(msg + name);
+      }

INS71 INS83 INS42 INS72 INS72 MOV31 INS42 INS42 UPD42 INS60 INS60 INS50 INS39 INS59 UPD43 MOV43 INS59 INS52 INS49 MOV21 INS21 INS21 INS10 INS49 MOV21 INS21 INS21 INS10 INS49 MOV53 INS42 INS42 INS9 UPD42 UPD42 INS45 INS42 INS33 INS42 INS7 INS7 INS42 INS7 INS7 INS53 UPD42 INS32 INS42 INS27 INS42 INS27 UPD42 INS32 INS42 INS27 INS42 INS27 INS45 INS14 MOV32 INS42 INS42 INS45 INS42 INS45 MOV32 MOV38 MOV32 INS42 INS42 INS45 INS42 INS45 INS32 INS38 MOV43 INS27 MOV42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL44 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL45 DEL42 DEL27 DEL42 DEL8 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60