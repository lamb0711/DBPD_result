GEODE-77: faster network-partition detection, bugfixes for auto-reconnect

network-partition-detection was taking too long to initiate.  This adds checks for IOExceptions to the Transport class to initiate member checks, shrinking the time to detect partitions.

There were still problems with auto-reconnect not being able to join while the old member ID was still in the view.  It would also sometimes install a view and think it had joined when it had not, causing other members to reject messages from the new "member" and resulting in a hung test.  GMSJoinLeave now rejects view messages that don't contain an appropriate member ID during the join process, and installView is smarter about what views it will accept as well.

The view creator was being stubborn about exiting during shutdown.  I've added additional checks to it so that it won't accidentally create another view when GMSJoinLeave is in the process of stopping.

+import static com.gemstone.gemfire.internal.DataSerializableFixedID.JOIN_REQUEST;
+import com.gemstone.gemfire.distributed.internal.membership.gms.messages.JoinRequestMessage;
-  private byte[] serializedNetMember;
-  
+  /**
+   * A set that contains addresses that we have logged JGroups IOExceptions for in the
+   * current membership view and possibly initiated suspect processing.  This
+   * reduces the amount of suspect processing initiated by IOExceptions and the
+   * amount of exceptions logged
+   */
+  private Set<Address> addressesWithioExceptionsProcessed = Collections.synchronizedSet(new HashSet<Address>());
+    
+    Transport transport = (Transport)myChannel.getProtocolStack().getTransport();
+    transport.setMessenger(this);
+
+    addressesWithioExceptionsProcessed.clear();
+  /**
+   * If JGroups is unable to send a message it may mean that the network
+   * is down.  If so we need to initiate suspect processing on the
+   * recipient.<p>
+   * see Transport._send()
+   */
+  public void handleJGroupsIOException(IOException e, Message msg, Address dest) {
+    if (addressesWithioExceptionsProcessed.contains(dest)) {
+      return;
+    }
+    addressesWithioExceptionsProcessed.add(dest);
+    logger.info("processing JGroups IOException: " + e.getMessage());
+    NetView v = this.view;
+    JGAddress jgMbr = (JGAddress)dest;
+    if (v != null) {
+      List<InternalDistributedMember> members = v.getMembers();
+      InternalDistributedMember recipient = null;
+      for (InternalDistributedMember mbr: members) {
+        GMSMember gmsMbr = ((GMSMember)mbr.getNetMember());
+        if (jgMbr.getUUIDLsbs() == gmsMbr.getUuidLSBs()
+            && jgMbr.getUUIDMsbs() == gmsMbr.getUuidMSBs()
+            && jgMbr.getVmViewId() == gmsMbr.getVmViewId()) {
+          recipient = mbr;
+          break;
+        }
+      }
+      if (recipient != null) {
+        services.getHealthMonitor().checkIfAvailable(recipient,
+            "Unable to send messages to this member via JGroups", true);
+      }
+    }
+  }
-      sender = getMemberFromView(m, ordinal);
+        DistributionMessage dm = (DistributionMessage)result;
+        // JoinRequestMessages are sent with an ID that may have been
+        // reused from a previous life by way of auto-reconnect,
+        // so we don't want to find a canonical reference for the
+        // request's sender ID
+        if (dm.getDSFID() == JOIN_REQUEST) {
+          sender = ((JoinRequestMessage)dm).getMemberID();
+        } else {
+          sender = getMemberFromView(m, ordinal);
+        }

INS26 INS26 INS40 INS40 INS23 INS31 INS29 MOV83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS43 INS43 INS42 INS32 INS60 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS21 INS21 INS60 INS60 INS25 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS32 INS32 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS32 INS8 INS32 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS42 INS42 INS11 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS22 INS42 INS42 INS11 INS42 INS33 INS60 INS60 INS70 INS25 INS25 INS43 INS43 INS43 INS32 INS45 INS32 INS52 INS42 INS43 INS42 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 MOV62 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS43 INS42 INS60 INS25 INS42 INS33 INS21 INS60 MOV25 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS36 INS27 INS27 INS21 INS10 INS32 INS42 INS42 INS45 INS9 INS42 INS42 INS11 INS32 INS42 INS21 MOV21 INS11 INS27 INS27 INS32 INS32 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS7 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23