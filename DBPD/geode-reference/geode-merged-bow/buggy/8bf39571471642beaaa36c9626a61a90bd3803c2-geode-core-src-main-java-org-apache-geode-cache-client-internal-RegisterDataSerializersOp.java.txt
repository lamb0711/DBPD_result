Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static void execute(ExecutablePool pool,
-      DataSerializer[] dataSerializers, EventID eventId) {
-    AbstractOp op = new RegisterDataSerializersOpImpl(dataSerializers,
-        eventId);
+  public static void execute(ExecutablePool pool, DataSerializer[] dataSerializers,
+      EventID eventId) {
+    AbstractOp op = new RegisterDataSerializersOpImpl(dataSerializers, eventId);
-  
-  public static void execute(ExecutablePool pool,
-      SerializerAttributesHolder[] holders, EventID eventId) {
-    AbstractOp op = new RegisterDataSerializersOpImpl(holders,
-        eventId);
+
+  public static void execute(ExecutablePool pool, SerializerAttributesHolder[] holders,
+      EventID eventId) {
+    AbstractOp op = new RegisterDataSerializersOpImpl(holders, eventId);
-  
+
-  
+
-    public RegisterDataSerializersOpImpl(DataSerializer[] dataSerializers,
-        EventID eventId) {
+    public RegisterDataSerializersOpImpl(DataSerializer[] dataSerializers, EventID eventId) {
-      for(int i = 0; i < dataSerializers.length; i++) {
+      for (int i = 0; i < dataSerializers.length; i++) {
-         // strip '.class' off these class names
+        // strip '.class' off these class names
-   }
-    
+    }
+
-     * @throws SerializationException
-     *           Thrown when serialization fails.
+     * @throws SerializationException Thrown when serialization fails.
-    public RegisterDataSerializersOpImpl(SerializerAttributesHolder[] holders,
-        EventID eventId) {
+    public RegisterDataSerializersOpImpl(SerializerAttributesHolder[] holders, EventID eventId) {
-          getMessage().addBytesPart(
-              BlobHelper.serializeToBlob(holders[i].getClassName()));
+          getMessage().addBytesPart(BlobHelper.serializeToBlob(holders[i].getClassName()));
-    
+
+
+
+
+
-    protected void processSecureBytes(Connection cnx, Message message)
-        throws Exception {
-    }
+    protected void processSecureBytes(Connection cnx, Message message) throws Exception {}
+
+

UPD66