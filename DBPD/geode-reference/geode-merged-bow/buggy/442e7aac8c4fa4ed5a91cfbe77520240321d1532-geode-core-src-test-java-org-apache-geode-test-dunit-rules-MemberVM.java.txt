GEODE-5407: increase timeout and provide more logging (#2120)

Co-authored-by: Mark Hanson <mhanson@pivotal.io>
+import org.apache.logging.log4j.Logger;
+import org.apache.geode.internal.logging.LogService;
+  private Logger logger = LogService.getLogger();
-    vm.invoke(() -> ClusterStartupRule.memberStarter.forceDisconnectMember());
+    vm.invoke("force disconnect", () -> ClusterStartupRule.memberStarter.forceDisconnectMember());
-    vm.invoke(() -> Awaitility.waitAtMost(30, TimeUnit.SECONDS).until(() -> {
-      InternalLocator intLocator = InternalLocator.getLocator();
-      InternalCache cache = ClusterStartupRule.getCache();
-      return intLocator != null && cache != null && intLocator.getDistributedSystem().isConnected()
-          && intLocator.isReconnected();
-    }));
+    vm.invoke(() -> {
+      try {
+        Awaitility.waitAtMost(60, TimeUnit.SECONDS).until(() -> {
+          InternalLocator intLocator = ClusterStartupRule.getLocator();
+          InternalCache cache = ClusterStartupRule.getCache();
+          return intLocator != null && cache != null && intLocator.getDistributedSystem()
+              .isConnected() && intLocator.isReconnected();
+        });
+      } catch (Exception e) {
+        // provide more information when condition is not satisfied after one minute
+        InternalLocator intLocator = ClusterStartupRule.getLocator();
+        InternalCache cache = ClusterStartupRule.getCache();
+        logger.info("locator is not null: " + (intLocator != null));
+        logger.info("cache is not null: " + (cache != null));
+        logger.info("ds is connected: " + (intLocator.getDistributedSystem().isConnected()));
+        logger.info("locator is reconnected: " + (intLocator.isReconnected()));
+        throw e;
+      }
+
+    });
-    vm.invoke(() -> Awaitility.waitAtMost(30, SECONDS).until(() -> {
-      InternalDistributedSystem internalDistributedSystem =
-          InternalDistributedSystem.getConnectedInstance();
-      return internalDistributedSystem != null
-          && internalDistributedSystem.getCache() != null
-          && !internalDistributedSystem.getCache().getCacheServers().isEmpty();
-    }));
-
+    vm.invoke(() -> {
+      try {
+        Awaitility.waitAtMost(60, SECONDS).until(() -> {
+          InternalDistributedSystem internalDistributedSystem =
+              InternalDistributedSystem.getConnectedInstance();
+          return internalDistributedSystem != null
+              && internalDistributedSystem.getCache() != null
+              && !internalDistributedSystem.getCache().getCacheServers().isEmpty();
+        });
+      } catch (Exception e) {
+        // provide more information when condition is not satisfied after one minute
+        InternalDistributedSystem internalDistributedSystem =
+            InternalDistributedSystem.getConnectedInstance();
+        logger.info("ds is not null: " + (internalDistributedSystem != null));
+        logger.info("cache is not null: " + (internalDistributedSystem.getCache() != null));
+        logger.info("has cache server: "
+            + (!internalDistributedSystem.getCache().getCacheServers().isEmpty()));
+        throw e;
+      }
+    });

INS26 INS26 INS40 INS40 INS23 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS45 INS8 INS8 INS54 INS54 INS8 INS12 INS8 INS12 INS21 INS44 INS8 INS21 INS44 INS8 MOV32 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS53 MOV32 INS43 INS42 INS60 INS21 INS21 INS21 INS53 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 UPD34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD34 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS36 INS45 INS36 INS45 INS36 INS45 INS36 INS42 INS42 INS45 INS36 INS45 INS36 INS45 INS36 INS27 INS27 INS32 INS32 INS27 INS27 INS38 INS42 INS33 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42