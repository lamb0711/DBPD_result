GEODE-5016: Replace org.json with Jackson in geode-web-api (#3267)


+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.JsonNode;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-    JSONObject jsonObject;
-      jsonObject = new JSONObject(jsonData);
-      String oldValue = jsonObject.get("@old").toString();
-      String newValue = jsonObject.get("@new").toString();
+      JsonNode jsonObject = objectMapper.readTree(jsonData);
+      JsonNode oldValue = jsonObject.get("@old");
+      JsonNode newValue = jsonObject.get("@new");
-      return (T) casValue(regionNamePath, key, convert(oldValue), convert(newValue));
+      if (oldValue == null || newValue == null) {
+        throw new MalformedJsonException("Json doc specified in request body is invalid!");
+      }
-    } catch (JSONException je) {
+      return (T) casValue(regionNamePath, key, convert(oldValue.toString()),
+          convert(newValue.toString()));
+
+    } catch (IOException je) {
-  ResponseEntity<String> processQueryResponse(Query query, Object args[], Object queryResult)
-      throws JSONException {
+  ResponseEntity<String> processQueryResponse(Query query, Object args[], Object queryResult) {
-    JSONArray jsonArr = null;
-      jsonArr = new JSONArray(jsonArray);
-      Collection<PdxInstance> pdxInstances = new ArrayList<PdxInstance>();
+      JsonNode array = objectMapper.readTree(jsonArray);
+      if (!array.isArray()) {
+        throw new MalformedJsonException(
+            "Json document specified in request body is not an array!");
+      }
-      for (int index = 0; index < jsonArr.length(); index++) {
-        // String element = jsonArr.getJSONObject(i).toString();
-        // String element = jsonArr.getString(i);
-        Object object = jsonArr.get(index);
-        String element = object.toString();
+      Collection<PdxInstance> pdxInstances = new ArrayList<>();
+
+      for (int index = 0; index < array.size(); index++) {
+        JsonNode object = array.get(index);
+        String element = objectMapper.writeValueAsString(object);
-    } catch (JSONException je) {
+    } catch (IOException je) {
-        if (typeValue == null)
-          return (T) new JSONObject();
+        if (typeValue == null) {
+          return (T) objectMapper.createObjectNode();
+        }
-    final JSONTypes jsonType = validateJsonAndFindType(arguments);
-    if (JSONTypes.JSON_ARRAY.equals(jsonType)) {
+    JsonNode node;
+    try {
+      node = objectMapper.readTree(arguments);
+    } catch (IOException e) {
+      throw new MalformedJsonException("Json document specified in request body is not valid!");
+    }
+
+    if (node.isArray()) {
-        JSONArray jsonArray = new JSONArray(arguments);
-        Object[] args = new Object[jsonArray.length()];
-        for (int index = 0; index < jsonArray.length(); index++) {
-          args[index] = jsonToObject(jsonArray.get(index).toString());
+        Object[] args = new Object[node.size()];
+        for (int index = 0; index < node.size(); index++) {
+          args[index] = jsonToObject(objectMapper.writeValueAsString(node.get(index)));
-      } catch (JSONException je) {
+      } catch (JsonProcessingException je) {
-    } else if (JSONTypes.JSON_OBJECT.equals(jsonType)) {
+    } else if (node.isObject()) {
-    JSONArray jsonArr = null;
+    JsonNode jsonArr;
-      jsonArr = new JSONArray(json);
-    } catch (JSONException e) {
+      jsonArr = objectMapper.readTree(json);
+    } catch (IOException e) {
-    if (jsonArr.length() != keys.length) {
+    if (!jsonArr.isArray() || jsonArr.size() != keys.length) {
-        PdxInstance pdxObj = convert(jsonArr.getJSONObject(i).toString());
+        PdxInstance pdxObj = convert(objectMapper.writeValueAsString(jsonArr.get(i)));
-      } catch (JSONException e) {
+      } catch (JsonProcessingException e) {
-    return new ResponseEntity<String>(headers, HttpStatus.OK);
+    return new ResponseEntity<>(headers, HttpStatus.OK);
-      Object jsonObj = new JSONTokener(json).nextValue();
+      JsonParser jp = new JsonFactory().createParser(json);
+      JsonToken token = jp.nextToken();
-      if (jsonObj instanceof JSONObject) {
+      if (token == JsonToken.START_OBJECT) {
-      } else if (jsonObj instanceof JSONArray) {
+      } else if (token == JsonToken.START_ARRAY) {
-    } catch (JSONException je) {
+    } catch (IOException je) {

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 UPD40 INS60 INS54 UPD43 MOV43 INS59 INS8 INS12 UPD43 INS27 INS60 INS25 INS60 INS25 UPD42 UPD42 MOV42 INS21 INS44 INS8 UPD42 UPD42 UPD42 INS38 INS27 UPD74 INS60 INS43 INS59 UPD43 UPD43 INS27 INS8 UPD43 INS43 INS59 INS38 INS8 UPD43 INS7 INS43 INS42 INS53 UPD42 UPD42 UPD43 INS32 MOV32 MOV40 UPD43 INS43 INS59 INS27 UPD43 INS42 INS42 INS32 UPD42 MOV32 UPD42 MOV32 INS27 INS27 INS53 UPD42 INS42 INS42 INS32 INS32 INS53 UPD42 INS42 INS32 INS42 INS14 INS32 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS40 INS27 UPD42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS14 INS42 INS42 INS42 INS42 INS42 INS14 UPD74 UPD42 UPD42 UPD43 INS8 INS42 UPD42 MOV42 MOV42 INS43 INS45 MOV5 UPD43 INS42 INS42 INS42 UPD43 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS45 INS32 INS32 UPD43 MOV43 INS45 UPD42 INS41 INS42 UPD42 UPD42 UPD43 MOV43 INS42 MOV42 INS42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 MOV11 MOV5 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL14 DEL41 DEL83 DEL32 DEL59 DEL60 DEL40 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL40 DEL33 DEL42 DEL43 DEL42 DEL14 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62