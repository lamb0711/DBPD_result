Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private Query651() {
-  }
+  private Query651() {}
-        if (msg.getNumberOfParts() > (1 /* type */ + 1 /* query string */ + 
-            1 /* params length */ + params /* number of params*/)) {
+        if (msg.getNumberOfParts() > (1 /* type */ + 1 /* query string */ + 1 /* params length */
+            + params /* number of params */)) {
-          paramStartIndex = 4;  
+          paramStartIndex = 4;
-        for (int i=0; i < queryParams.length; i++) {
+        for (int i = 0; i < queryParams.length; i++) {
-        //this is optional part for message specific timeout, which right now send by native client
-        //need to take care while adding new message
+        // this is optional part for message specific timeout, which right now send by native client
+        // need to take care while adding new message
-        } 
+        }
-      throw new QueryInvalidException(cne.getMessage()
-          + queryString);
+      throw new QueryInvalidException(cne.getMessage() + queryString);
-      
+
-      logger.debug("{}: Received query request from {} queryString: {}{}", servConn.getName(), servConn.getSocketString(), queryString, (queryParams != null ? (" with num query parameters :" + queryParams.length):""));
+      logger.debug("{}: Received query request from {} queryString: {}{}", servConn.getName(),
+          servConn.getSocketString(), queryString,
+          (queryParams != null ? (" with num query parameters :" + queryParams.length) : ""));
-      QueryService queryService = ((GemFireCacheImpl)servConn.getCachedRegionHelper().getCache())
-      .getLocalQueryService();
+      QueryService queryService =
+          ((GemFireCacheImpl) servConn.getCachedRegionHelper().getCache()).getLocalQueryService();
-      if (queryParams != null){
+      if (queryParams != null) {
-          ccn.addCompiledQuery((DefaultQuery)query);
+          ccn.addCompiledQuery((DefaultQuery) query);
-        ((DefaultQuery)query).setLastUsed(true);
+        ((DefaultQuery) query).setLastUsed(true);
-      Set regionNames = ((DefaultQuery)query).getRegionsInQuery(queryParams);
+      Set regionNames = ((DefaultQuery) query).getRegionsInQuery(queryParams);
-            regionNames = ((DefaultQuery)query).getRegionsInQuery(null);
+            regionNames = ((DefaultQuery) query).getRegionsInQuery(null);
-      processQueryUsingParams(msg, query, queryString, regionNames, start, null,
-          queryContext, servConn, true, queryParams);
+      processQueryUsingParams(msg, query, queryString, regionNames, start, null, queryContext,
+          servConn, true, queryParams);
-      throw new QueryInvalidException(e.getMessage()
-          + queryString );
+      throw new QueryInvalidException(e.getMessage() + queryString);

