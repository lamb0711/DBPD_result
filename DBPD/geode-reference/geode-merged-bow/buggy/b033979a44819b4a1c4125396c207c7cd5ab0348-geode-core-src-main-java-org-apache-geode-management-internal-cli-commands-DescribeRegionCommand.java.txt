GEODE-3955: Preparing, refactoring, and addition of test utility

* Cleanup of DescribeRegionCommand for better readability and
testability.
* Flattened unnecessarily-nested logic blocks
* Removed dead class fields from RegionDescription,
RegionAttributesDefault
* GetRegionDescriptionFunction implements Function instead of extending
deprecated FunctionAdapter
* Added waitTilGatewaySendersAreReady to MemberVM, MemberStarterRule

-import java.util.ArrayList;
-    Result result;
-
-        CliUtil.executeFunction(getRegionDescription, regionName, CliUtil.getAllMembers(cache));
+        CliUtil.executeFunction(getRegionDescription, regionName, getAllNormalMembers(cache));
-    // The returned result could be a region description with per member and /or single local
-    // region
-    Object[] results = resultList.toArray();
-    List<RegionDescription> regionDescriptionList = new ArrayList<>();
+    // Log any errors received.
+    resultList.stream().filter(Throwable.class::isInstance).map(Throwable.class::cast)
+        .forEach(t -> LogWrapper.getInstance().info(t.getMessage(), t));
-    for (int i = 0; i < results.length; i++) {
+    // Aggregate PerMember data to to a single RegionDescription
+    RegionDescription regionDescription = new RegionDescription();
+    resultList.stream().filter(RegionDescriptionPerMember.class::isInstance)
+        .map(RegionDescriptionPerMember.class::cast).forEach(regionDescription::add);
-      if (results[i] instanceof RegionDescriptionPerMember) {
-        RegionDescriptionPerMember regionDescPerMember = (RegionDescriptionPerMember) results[i];
-
-        if (regionDescPerMember != null) {
-          RegionDescription regionDescription = new RegionDescription();
-          regionDescription.add(regionDescPerMember);
-
-          for (int j = i + 1; j < results.length; j++) {
-            if (results[j] != null && results[j] instanceof RegionDescriptionPerMember) {
-              RegionDescriptionPerMember preyRegionDescPerMember =
-                  (RegionDescriptionPerMember) results[j];
-              if (regionDescription.add(preyRegionDescPerMember)) {
-                results[j] = null;
-              }
-            }
-          }
-          regionDescriptionList.add(regionDescription);
-        }
-      } else if (results[i] instanceof Throwable) {
-        Throwable t = (Throwable) results[i];
-        LogWrapper.getInstance().info(t.getMessage(), t);
+    // No point in displaying the scope for PR's
+    if (regionDescription.isPartition()) {
+      regionDescription.getCndRegionAttributes().remove(RegionAttributesNames.SCOPE);
+    } else {
+      String scope = regionDescription.getCndRegionAttributes().get(RegionAttributesNames.SCOPE);
+      if (scope != null) {
+        scope = scope.toLowerCase().replace('_', '-');
+        regionDescription.getCndRegionAttributes().put(RegionAttributesNames.SCOPE, scope);
-    if (regionDescriptionList.isEmpty()) {
+    return buildDescriptionResult(regionName, regionDescription);
+  }
+
+  public Result buildDescriptionResult(String regionName, RegionDescription regionDescription) {
+    if (regionDescription.isEmpty()) {
+    CompositeResultData.SectionResultData regionSection = crd.addSection();
+    regionSection.addSeparator('-');
+    regionSection.addData("Name", regionDescription.getName());
-    for (RegionDescription regionDescription : regionDescriptionList) {
-      // No point in displaying the scope for PR's
+    String dataPolicy =
+        regionDescription.getDataPolicy().toString().toLowerCase().replace('_', ' ');
+    regionSection.addData("Data Policy", dataPolicy);
+
+    String memberType;
+
+    if (regionDescription.isAccessor()) {
+      memberType = CliStrings.DESCRIBE_REGION__ACCESSOR__MEMBER;
+    } else {
+      memberType = CliStrings.DESCRIBE_REGION__HOSTING__MEMBER;
+    }
+    regionSection.addData(memberType,
+        CliUtil.convertStringSetToString(regionDescription.getHostingMembers(), '\n'));
+    regionSection.addSeparator('.');
+
+    TabularResultData commonNonDefaultAttrTable = regionSection.addSection().addTable();
+
+    commonNonDefaultAttrTable.setHeader(CliStrings
+        .format(CliStrings.DESCRIBE_REGION__NONDEFAULT__COMMONATTRIBUTES__HEADER, memberType));
+    // Common Non Default Region Attributes
+    Map<String, String> cndRegionAttrsMap = regionDescription.getCndRegionAttributes();
+
+    // Common Non Default Eviction Attributes
+    Map<String, String> cndEvictionAttrsMap = regionDescription.getCndEvictionAttributes();
+
+    // Common Non Default Partition Attributes
+    Map<String, String> cndPartitionAttrsMap = regionDescription.getCndPartitionAttributes();
+
+    writeCommonAttributesToTable(commonNonDefaultAttrTable,
+        CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, cndRegionAttrsMap);
+    writeCommonAttributesToTable(commonNonDefaultAttrTable,
+        CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, cndEvictionAttrsMap);
+    writeCommonAttributesToTable(commonNonDefaultAttrTable,
+        CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, cndPartitionAttrsMap);
+
+    // Member-wise non default Attributes
+    Map<String, RegionDescriptionPerMember> regDescPerMemberMap =
+        regionDescription.getRegionDescriptionPerMemberMap();
+    Set<String> members = regDescPerMemberMap.keySet();
+
+    TabularResultData table = regionSection.addSection().addTable();
+
+    boolean setHeader = false;
+    for (String member : members) {
+      RegionDescriptionPerMember regDescPerMem = regDescPerMemberMap.get(member);
+      Map<String, String> ndRa = regDescPerMem.getNonDefaultRegionAttributes();
+      Map<String, String> ndEa = regDescPerMem.getNonDefaultEvictionAttributes();
+      Map<String, String> ndPa = regDescPerMem.getNonDefaultPartitionAttributes();
+
+      // Get all the member-specific non-default attributes by removing the common keys
+      ndRa.keySet().removeAll(cndRegionAttrsMap.keySet());
+      ndEa.keySet().removeAll(cndEvictionAttrsMap.keySet());
+      ndPa.keySet().removeAll(cndPartitionAttrsMap.keySet());
+
+      // Scope is not valid for PR's
-        regionDescription.getCndRegionAttributes().remove(RegionAttributesNames.SCOPE);
-      } else {
-        String scope = regionDescription.getCndRegionAttributes().get(RegionAttributesNames.SCOPE);
-        if (scope != null) {
-          scope = scope.toLowerCase().replace('_', '-');
-          regionDescription.getCndRegionAttributes().put(RegionAttributesNames.SCOPE, scope);
-        }
-      }
-      CompositeResultData.SectionResultData regionSection = crd.addSection();
-      regionSection.addSeparator('-');
-      regionSection.addData("Name", regionDescription.getName());
-
-      String dataPolicy =
-          regionDescription.getDataPolicy().toString().toLowerCase().replace('_', ' ');
-      regionSection.addData("Data Policy", dataPolicy);
-
-      String memberType;
-
-      if (regionDescription.isAccessor()) {
-        memberType = CliStrings.DESCRIBE_REGION__ACCESSOR__MEMBER;
-      } else {
-        memberType = CliStrings.DESCRIBE_REGION__HOSTING__MEMBER;
-      }
-      regionSection.addData(memberType,
-          CliUtil.convertStringSetToString(regionDescription.getHostingMembers(), '\n'));
-      regionSection.addSeparator('.');
-
-      TabularResultData commonNonDefaultAttrTable = regionSection.addSection().addTable();
-
-      commonNonDefaultAttrTable.setHeader(CliStrings
-          .format(CliStrings.DESCRIBE_REGION__NONDEFAULT__COMMONATTRIBUTES__HEADER, memberType));
-      // Common Non Default Region Attributes
-      Map<String, String> cndRegionAttrsMap = regionDescription.getCndRegionAttributes();
-
-      // Common Non Default Eviction Attributes
-      Map<String, String> cndEvictionAttrsMap = regionDescription.getCndEvictionAttributes();
-
-      // Common Non Default Partition Attributes
-      Map<String, String> cndPartitionAttrsMap = regionDescription.getCndPartitionAttributes();
-
-      writeCommonAttributesToTable(commonNonDefaultAttrTable,
-          CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, cndRegionAttrsMap);
-      writeCommonAttributesToTable(commonNonDefaultAttrTable,
-          CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, cndEvictionAttrsMap);
-      writeCommonAttributesToTable(commonNonDefaultAttrTable,
-          CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, cndPartitionAttrsMap);
-
-      // Member-wise non default Attributes
-      Map<String, RegionDescriptionPerMember> regDescPerMemberMap =
-          regionDescription.getRegionDescriptionPerMemberMap();
-      Set<String> members = regDescPerMemberMap.keySet();
-
-      TabularResultData table = regionSection.addSection().addTable();
-
-      boolean setHeader = false;
-      for (String member : members) {
-        RegionDescriptionPerMember regDescPerMem = regDescPerMemberMap.get(member);
-        Map<String, String> ndRa = regDescPerMem.getNonDefaultRegionAttributes();
-        Map<String, String> ndEa = regDescPerMem.getNonDefaultEvictionAttributes();
-        Map<String, String> ndPa = regDescPerMem.getNonDefaultPartitionAttributes();
-
-        // Get all the member-specific non-default attributes by removing the common keys
-        ndRa.keySet().removeAll(cndRegionAttrsMap.keySet());
-        ndEa.keySet().removeAll(cndEvictionAttrsMap.keySet());
-        ndPa.keySet().removeAll(cndPartitionAttrsMap.keySet());
-
-        // Scope is not valid for PR's
-        if (regionDescription.isPartition()) {
-          if (ndRa.get(RegionAttributesNames.SCOPE) != null) {
-            ndRa.remove(RegionAttributesNames.SCOPE);
-          }
-        }
-
-        List<FixedPartitionAttributesInfo> fpaList = regDescPerMem.getFixedPartitionAttributes();
-
-        if (!(ndRa.isEmpty() && ndEa.isEmpty() && ndPa.isEmpty()) || fpaList != null) {
-          setHeader = true;
-          boolean memberNameAdded;
-          memberNameAdded = writeAttributesToTable(table,
-              CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, ndRa, member, false);
-          memberNameAdded = writeAttributesToTable(table,
-              CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, ndEa, member, memberNameAdded);
-          memberNameAdded =
-              writeAttributesToTable(table, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION,
-                  ndPa, member, memberNameAdded);
-
-          writeFixedPartitionAttributesToTable(table, fpaList, member, memberNameAdded);
+        if (ndRa.get(RegionAttributesNames.SCOPE) != null) {
+          ndRa.remove(RegionAttributesNames.SCOPE);
-      if (setHeader) {
-        table.setHeader(CliStrings.format(
-            CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER, memberType));
+      List<FixedPartitionAttributesInfo> fpaList = regDescPerMem.getFixedPartitionAttributes();
+
+      if (!ndRa.isEmpty() || !ndEa.isEmpty() || !ndPa.isEmpty() || fpaList != null) {
+        setHeader = true;
+        boolean memberNameAdded;
+        memberNameAdded = writeAttributesToTable(table,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, ndRa, member, false);
+        memberNameAdded = writeAttributesToTable(table,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, ndEa, member, memberNameAdded);
+        memberNameAdded = writeAttributesToTable(table,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, ndPa, member, memberNameAdded);
+
+        writeFixedPartitionAttributesToTable(table, fpaList, member, memberNameAdded);
-    result = ResultBuilder.buildResult(crd);
-    return result;
+    if (setHeader) {
+      table.setHeader(CliStrings.format(
+          CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER, memberType));
+    }
+
+    return ResultBuilder.buildResult(crd);
-        String type, memName;
+        String type;

INS31 MOV77 MOV77 MOV77 INS83 MOV43 INS42 MOV44 INS8 INS42 INS44 MOV44 MOV8 MOV60 INS60 MOV60 INS21 MOV60 INS21 MOV25 INS41 INS43 INS42 MOV25 MOV60 INS41 MOV74 INS59 INS32 INS32 INS32 UPD42 MOV42 MOV32 INS42 INS32 INS32 INS42 INS86 INS32 INS42 INS90 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS90 INS59 MOV32 INS32 INS42 INS90 INS42 INS42 UPD27 MOV27 INS42 INS42 INS32 INS42 INS90 INS57 INS42 INS42 INS32 INS42 INS90 INS57 INS42 INS38 INS38 INS38 MOV27 INS42 INS42 INS57 INS42 MOV43 INS42 INS42 INS57 INS42 MOV43 MOV32 MOV32 MOV32 MOV43 MOV43 DEL40 DEL26 DEL36 DEL38 DEL27 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL42 DEL2 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL2 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL21 DEL8 DEL25 DEL25 DEL8 DEL24 DEL42 DEL70 DEL42 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL59