GEODE-1238: ensure EntryEventImpls are released

-- reviewed all EntryEventImpl creators
-- created two new subclasses to mark ones that are never off-heap
-- added annotations and comments on all creators
-- added missing release calls

+import com.gemstone.gemfire.internal.offheap.annotations.Released;
-    EntryEventImpl event = newCreateEntryEvent(key, value, aCallbackArgument);
+    @Released EntryEventImpl event = newCreateEntryEvent(key, value, aCallbackArgument);
-    // TODO OFFHEAP: validatedCreate calls freeOffHeapResources
+    // TODO OFFHEAP: validatedCreate calls release
-  public final void validatedCreate(EntryEventImpl event, long startPut)
+  public final void validatedCreate(@Released EntryEventImpl event, long startPut)
-
-
+  @Retained
-    EntryEventImpl event = newDestroyEntryEvent(key, aCallbackArgument);
+    @Released EntryEventImpl event = newDestroyEntryEvent(key, aCallbackArgument);
-    // TODO OFFHEAP: validatedDestroy calls freeOffHeapResources
+    // TODO OFFHEAP: validatedDestroy calls release
-  public Object validatedDestroy(Object key, EntryEventImpl event)
+  public Object validatedDestroy(Object key, @Released EntryEventImpl event)
+  @Retained
-    EntryEventImpl event = newUpdateEntryEvent(key, value, aCallbackArgument);
+    @Released EntryEventImpl event = newUpdateEntryEvent(key, value, aCallbackArgument);
-     // TODO OFFHEAP: validatedPut calls freeOffHeapResources
+     // TODO OFFHEAP: validatedPut calls release
-  public final Object validatedPut(EntryEventImpl event, long startPut)
+  public final Object validatedPut(@Released EntryEventImpl event, long startPut)
+  @Retained
-    final EntryEventImpl event = EntryEventImpl.create(
+    @Retained final EntryEventImpl event = EntryEventImpl.create(
+  @Retained
-    EntryEventImpl event = EntryEventImpl.create(
+    @Released EntryEventImpl event = EntryEventImpl.create(
-    EntryEventImpl event = EntryEventImpl.create(
+    @Released EntryEventImpl event = EntryEventImpl.create(
-    EntryEventImpl event = EntryEventImpl.create(
+    @Released EntryEventImpl event = EntryEventImpl.create(
-    EntryEventImpl holder = null;
+    VersionTagHolder holder = null;
-        holder = EntryEventImpl.createVersionTagHolder();
-        try {
-          value = mySRP.get(key, aCallbackArgument, holder);
-          fromServer = value != null;
-        } finally {
-          holder.release();
-        }
+        holder = new VersionTagHolder();
+        value = mySRP.get(key, aCallbackArgument, holder);
+        fromServer = value != null;
-      EntryEventImpl event
+      @Released EntryEventImpl event
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_DESTROY,
+    @Released EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_DESTROY,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.CREATE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.CREATE, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key,
-      EntryEventImpl event =
+      @Released EntryEventImpl event =
-      EntryEventImpl event =
+      @Released EntryEventImpl event =
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.DESTROY, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.DESTROY, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.INVALIDATE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.INVALIDATE, key,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE_VERSION_STAMP, key,
+    @Released EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE_VERSION_STAMP, key,
-    EntryEventImpl updateTimeStampEvent = EntryEventImpl.createVersionTagHolder(event.getVersionTag());
-    try {
+    VersionTagHolder updateTimeStampEvent = new VersionTagHolder(event.getVersionTag());
-    } finally {
-      updateTimeStampEvent.release();
-    }
+  @Retained
-    EntryEventImpl event = EntryEventImpl.create(
+    @Retained EntryEventImpl event = EntryEventImpl.create(
-    protected EntryEventImpl generateCustomEvictDestroyEvent(final Object key) {
-    EntryEventImpl event =  EntryEventImpl.create(
+  
+  @Retained
+  protected EntryEventImpl generateCustomEvictDestroyEvent(final Object key) {
+    @Retained EntryEventImpl event =  EntryEventImpl.create(
-    final EntryEventImpl event = 
+    @Released final EntryEventImpl event = 
-        EntryEventImpl event = EntryEventImpl.create(
+        @Released EntryEventImpl event = EntryEventImpl.create(
+    /**
+     * released by the release method
+     */
+    @Retained
-          EntryEventImpl event = EntryEventImpl.create(
+          @Released EntryEventImpl event = EntryEventImpl.create(
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE, null,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVEALL_DESTROY, null,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVEALL_DESTROY, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE,
+    @Released EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE,
-          EntryEventImpl tagHolder = EntryEventImpl.createVersionTagHolder();
+          VersionTagHolder tagHolder = new VersionTagHolder();
-                try {
-                  basicEntryPutAll(key, value, dpao, offset, tagHolder);
-                } finally {
-                  tagHolder.release();
-                }
+                basicEntryPutAll(key, value, dpao, offset, tagHolder);
-          EntryEventImpl tagHolder = EntryEventImpl.createVersionTagHolder();
+          VersionTagHolder tagHolder = new VersionTagHolder();
+    // No need for release since disallowOffHeapValues called.
+    // No need for release since disallowOffHeapValues called.
-    EntryEventImpl event = EntryEventImpl.createPutAllEvent(
+    @Released EntryEventImpl event = EntryEventImpl.createPutAllEvent(
-    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(op, this, key);
+    @Released EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(op, this, key);
-      EntryEventImpl event = (EntryEventImpl)it.next();
+      @Released EntryEventImpl event = (EntryEventImpl)it.next();
+      try {
+      } finally {
+        event.release();
+      }
-      EntryEventImpl event = (EntryEventImpl)it.next();
+      @Released EntryEventImpl event = (EntryEventImpl)it.next();
+      try {
+      } finally {
+        event.release();
+      }
-    EntryEventImpl event = EntryEventImpl.create(
-        this,
+    @Released EntryEventImpl event = EntryEventImpl.create(this,
-     EntryEventImpl event = EntryEventImpl.create(
+     @Released EntryEventImpl event = EntryEventImpl.create(
-    EntryEventImpl event = EntryEventImpl.create(this,
+    @Released EntryEventImpl event = EntryEventImpl.create(this,
-    EntryEventImpl event = EntryEventImpl.create(this,
+    @Released EntryEventImpl event = EntryEventImpl.create(this,
-    EntryEventImpl event = EntryEventImpl.create(this,
+    @Released EntryEventImpl event = EntryEventImpl.create(this,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUT_IF_ABSENT, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUT_IF_ABSENT, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVE, key,
+    @Released final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVE, key,

INS26 INS40 INS78 INS78 INS78 INS78 MOV8 INS78 INS78 INS78 INS42 INS78 MOV43 INS42 INS78 INS42 INS42 MOV8 INS60 INS42 INS42 INS29 INS78 INS78 INS42 INS78 INS42 MOV42 INS78 INS42 INS78 INS78 INS78 INS78 UPD43 MOV60 INS25 INS78 INS78 INS78 INS78 INS78 INS78 INS43 INS59 INS78 INS78 INS78 INS65 INS42 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV43 INS78 MOV43 INS78 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV27 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS54 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS78 INS78 INS78 INS43 MOV32 INS78 MOV43 INS8 INS8 INS78 MOV43 INS8 INS8 INS7 INS42 INS42 INS42 INS42 INS42 MOV25 INS21 INS42 MOV25 INS21 INS42 INS14 INS78 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS42 UPD43 UPD43 UPD42 INS14 UPD42 INS14 INS43 INS43 INS42 INS42 MOV8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32