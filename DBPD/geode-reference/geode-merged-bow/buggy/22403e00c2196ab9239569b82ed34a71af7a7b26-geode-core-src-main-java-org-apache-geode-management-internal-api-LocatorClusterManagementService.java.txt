GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

-import java.util.concurrent.ExecutionException;
-import org.apache.geode.management.internal.ClusterManagementOperationStatusResult;
-import org.apache.geode.management.internal.operation.OperationHistoryManager.OperationInstance;
-import org.apache.geode.management.internal.operation.TaggedWithOperator;
+import org.apache.geode.management.internal.operation.OperationState;
+import org.apache.geode.management.internal.operation.RegionOperationStateStore;
-        new OperationManager(cache, new OperationHistoryManager()));
+        new OperationManager(cache,
+            new OperationHistoryManager(new RegionOperationStateStore(cache))));
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> start(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> start(
-    OperationInstance<A, V> operationInstance = operationManager.submit(op);
-    if (op instanceof TaggedWithOperator) {
-      operationInstance.setOperator(((TaggedWithOperator) op).getOperator());
-    }
-
-    ClusterManagementResult result = new ClusterManagementResult(
-        StatusCode.ACCEPTED, "Operation started.  Use the URI to check its status.");
-
-    return assertSuccessful(toClusterManagementListOperationsResult(result, operationInstance));
+    OperationState<A, V> operationState = operationManager.submit(op);
+    return assertSuccessful(toClusterManagementOperationResult(StatusCode.ACCEPTED,
+        "Operation started.  Use the URI to check its status.", operationState));
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> list(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<A, V> list(
-        operationManager.listOperationInstances(opType).stream()
-            .map(this::toClusterManagementListOperationsResult).collect(Collectors.toList())));
+        operationManager.list(opType).stream()
+            .map(this::toClusterManagementOperationResult).collect(Collectors.toList())));
-  /**
-   * builds a base status from the state of a future result
-   */
-  private static <V extends OperationResult> ClusterManagementResult getStatus(
-      CompletableFuture<V> future) {
-    if (future.isCompletedExceptionally()) {
-      String error = "Operation failed.";
-      try {
-        future.get();
-      } catch (InterruptedException ignore) {
-        Thread.currentThread().interrupt();
-      } catch (ExecutionException e) {
-        error = e.getMessage();
-      }
-      return new ClusterManagementResult(StatusCode.ERROR, error);
-    } else if (future.isDone()) {
-      return new ClusterManagementResult(StatusCode.OK, "Operation finished successfully.");
-    } else {
-      return new ClusterManagementResult(StatusCode.IN_PROGRESS, "Operation in progress.");
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> toClusterManagementOperationResult(
+      StatusCode statusCode, String message, OperationState<A, V> operationState) {
+    ClusterManagementOperationResult<A, V> result =
+        new ClusterManagementOperationResult<>(statusCode, message,
+            operationState.getOperationStart(), operationState.getOperationEnd(),
+            operationState.getOperation(), operationState.getId(), operationState.getResult(),
+            operationState.getThrowable());
+    A operation = operationState.getOperation();
+    if (operation != null) {
+      result.setLinks(new Links(operationState.getId(), operation.getEndpoint()));
-  }
-
-  /**
-   * builds a result object from a base status and an operation instance
-   */
-  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
-      ClusterManagementResult status, OperationInstance<A, V> operationInstance) {
-    ClusterManagementOperationResult<V> result = new ClusterManagementOperationResult<>(status,
-        operationInstance.getFutureResult(), operationInstance.getOperationStart(),
-        operationInstance.getFutureOperationEnded(), operationInstance.getOperator(),
-        operationInstance.getId());
-    result.setLinks(
-        new Links(operationInstance.getId(), operationInstance.getOperation().getEndpoint()));
-  /**
-   * builds a result object from an operation instance
-   */
-  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
-      OperationInstance<A, V> operationInstance) {
-    return toClusterManagementListOperationsResult(getStatus(operationInstance.getFutureResult()),
-        operationInstance);
-  }
-
-  /**
-   * this is intended for use by the REST controller. for Java usage, please use
-   * {@link ClusterManagementOperationResult#getFutureResult()}
-   */
-  public <V extends OperationResult> ClusterManagementOperationStatusResult<V> checkStatus(
-      String opId) {
-    final OperationInstance<?, V> operationInstance = operationManager.getOperationInstance(opId);
-    if (operationInstance == null) {
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> get(
+      A opType, String opId) {
+    final OperationState<A, V> operationState = operationManager.get(opId);
+    if (operationState == null) {
-    final CompletableFuture<V> status = operationInstance.getFutureResult();
-    ClusterManagementOperationStatusResult<V> result =
-        new ClusterManagementOperationStatusResult<>(getStatus(status));
-    result.setOperator(operationInstance.getOperator());
-    result.setOperationStart(operationInstance.getOperationStart());
-    if (status.isDone() && !status.isCompletedExceptionally()) {
-      try {
-        result.setOperationEnded(operationInstance.getFutureOperationEnded().get());
-        result.setResult(status.get());
-      } catch (InterruptedException e) {
-        Thread.currentThread().interrupt();
-      } catch (ExecutionException ignore) {
-      }
+    return toClusterManagementOperationResult(operationState);
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> CompletableFuture<ClusterManagementOperationResult<A, V>> getFuture(
+      A opType, String opId) {
+    throw new IllegalStateException("This should never be called on locator");
+  }
+
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> toClusterManagementOperationResult(
+      OperationState<A, V> operationState) {
+    StatusCode resultStatus = StatusCode.OK;
+    String resultMessage = "";
+    if (operationState.getOperationEnd() == null) {
+      resultStatus = StatusCode.IN_PROGRESS;
+    } else if (operationState.getThrowable() != null) {
+      resultStatus = StatusCode.ERROR;
+      resultMessage = operationState.getThrowable().getMessage();
-    return result;
+    return toClusterManagementOperationResult(resultStatus, resultMessage, operationState);

MOV26 UPD40 UPD40 INS31 INS31 INS31 UPD74 UPD74 MOV83 MOV73 MOV73 INS74 INS42 INS44 INS44 INS44 INS8 INS78 UPD83 INS73 MOV73 UPD74 MOV74 UPD42 MOV44 INS78 MOV83 MOV73 MOV73 INS74 UPD42 MOV42 INS44 INS44 INS8 INS83 INS73 MOV73 UPD74 MOV74 INS42 INS44 INS8 INS43 INS43 INS43 UPD43 MOV43 MOV43 UPD43 MOV43 UPD42 MOV42 MOV43 UPD42 MOV42 INS74 INS42 INS60 INS60 INS25 MOV41 INS42 INS42 INS74 INS43 INS43 UPD42 INS60 MOV25 INS41 INS42 MOV43 INS74 INS43 INS42 INS43 INS42 INS53 INS42 INS74 MOV43 INS74 INS42 INS60 INS60 INS25 INS41 INS42 UPD74 INS42 UPD42 MOV42 UPD42 UPD42 INS43 INS43 MOV43 INS74 INS59 INS43 INS59 INS27 INS8 INS43 INS43 INS42 INS42 INS83 UPD74 MOV74 INS59 INS32 MOV43 UPD43 MOV43 MOV43 UPD42 MOV42 INS42 INS14 UPD43 MOV43 MOV43 UPD43 MOV43 INS43 MOV43 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 UPD43 UPD42 INS42 UPD42 MOV42 INS43 INS43 MOV43 INS42 INS14 INS42 INS42 INS32 INS42 INS33 MOV21 INS42 INS42 UPD43 INS42 INS32 UPD42 INS42 UPD42 MOV42 UPD42 INS43 INS45 UPD42 UPD42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS32 INS33 MOV21 INS27 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 UPD42 INS40 INS45 UPD42 UPD42 MOV42 UPD42 MOV42 MOV74 INS42 INS42 INS32 INS32 MOV32 MOV32 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 MOV32 INS33 INS21 MOV21 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS40 UPD42 UPD42 INS7 INS7 INS42 INS42 INS40 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL43 DEL40 DEL42 DEL14 DEL41 DEL8 DEL42 DEL42 DEL32 DEL43 DEL40 DEL45 DEL14 DEL41 DEL8 DEL43 DEL40 DEL45 DEL14 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL8 DEL31 DEL66 DEL65 DEL29 DEL74 DEL42 DEL32 DEL32 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL66 DEL42 DEL42 DEL68 DEL65 DEL65 DEL29 DEL74 DEL83 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL74 DEL42 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL27 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31