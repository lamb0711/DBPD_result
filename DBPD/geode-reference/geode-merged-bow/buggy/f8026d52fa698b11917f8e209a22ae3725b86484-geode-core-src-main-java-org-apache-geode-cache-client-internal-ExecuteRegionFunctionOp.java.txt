GEODE-6588: Cleanup generics and static analyzer warnings.

-    AbstractOp op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
-        resultCollector, hasResult, new HashSet<String>());
+    ExecuteRegionFunctionOpImpl op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
+        resultCollector, hasResult, new HashSet<>());
-    Set<String> failedNodes = new HashSet<String>();
-    AbstractOp reexecOp = null;
+    Set<String> failedNodes = new HashSet<>();
+    AbstractOp reexecOp;
-          reexecOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+          reexecOp = new ExecuteRegionFunctionOpImpl(op,
-    AbstractOp op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
-        resultCollector, hasResult, new HashSet<String>(), isHA, optimizeForWrite, true);
+    ExecuteRegionFunctionOpImpl op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
+        resultCollector, hasResult, new HashSet<>(), isHA, optimizeForWrite, true);
-    Set<String> failedNodes = new HashSet<String>();
-    AbstractOp reexecOp = null;
+    Set<String> failedNodes = new HashSet<>();
+    AbstractOp reexecOp;
-          reexecOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+          reexecOp = new ExecuteRegionFunctionOpImpl(op,
-  public static void reexecute(ExecutablePool pool, String region, Function function,
+  static void reexecute(ExecutablePool pool, String region, Function function,
-    AbstractOp op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
-        resultCollector, hasResult, new HashSet<String>());
+    ExecuteRegionFunctionOpImpl op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
+        resultCollector, hasResult, new HashSet<>());
-      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
-          (byte) 1/* isReExecute */, failedNodes);
+      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl(op, (byte) 1/* isReExecute */, failedNodes);
-  public static void reexecute(ExecutablePool pool, String region, String function,
+  static void reexecute(ExecutablePool pool, String region, String function,
-    AbstractOp op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
-        resultCollector, hasResult, new HashSet<String>(), isHA, optimizeForWrite, true);
+    ExecuteRegionFunctionOpImpl op = new ExecuteRegionFunctionOpImpl(region, function, serverRegionExecutor,
+        resultCollector, hasResult, new HashSet<>(), isHA, optimizeForWrite, true);
-      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
-          (byte) 1/* isReExecute */, failedNodes);
+      ExecuteRegionFunctionOpImpl reExecuteOp = new ExecuteRegionFunctionOpImpl(op, (byte) 1/* isReExecute */, failedNodes);
-    private Set<String> failedNodes = new HashSet<String>();
+    private Set<String> failedNodes;
-    public ExecuteRegionFunctionOpImpl(String region, Function function,
+    ExecuteRegionFunctionOpImpl(String region, Function function,
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
+      executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
-      this.resultCollector = rc;
-      this.regionName = region;
+      resultCollector = rc;
+      regionName = region;
-      this.functionId = function.getId();
-      this.executor = serverRegionExecutor;
+      functionId = function.getId();
+      executor = serverRegionExecutor;
-      this.failedNodes = removedNodes;
-      this.isHA = function.isHA();
+      failedNodes = removedNodes;
+      isHA = function.isHA();
-    public ExecuteRegionFunctionOpImpl(String region, String function,
+    ExecuteRegionFunctionOpImpl(String region, String function,
-            hasResult == (byte) 1 ? true : false, optimizeForWrite);
+            hasResult == (byte) 1, optimizeForWrite);
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
+      executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
-      this.resultCollector = rc;
-      this.regionName = region;
-      this.functionId = function;
-      this.executor = serverRegionExecutor;
+      resultCollector = rc;
+      regionName = region;
+      functionId = function;
+      executor = serverRegionExecutor;
-      this.failedNodes = removedNodes;
+      failedNodes = removedNodes;
-    public ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionSingleHopOpImpl newop) {
+    ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionSingleHopOpImpl newop) {
-          newop.getResultCollector(), newop.getHasResult(), new HashSet<String>(), newop.isHA(),
+          newop.getResultCollector(), newop.getHasResult(), new HashSet<>(), newop.isHA(),
-    public ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionOpImpl op, byte isReExecute,
+    ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionOpImpl op, byte isReExecute,
-      this.resultCollector = op.resultCollector;
-      this.function = op.function;
-      this.functionId = op.functionId;
-      this.regionName = op.regionName;
-      this.executor = op.executor;
-      this.hasResult = op.hasResult;
-      this.failedNodes = op.failedNodes;
-      this.executeOnBucketSet = op.executeOnBucketSet;
-      this.isHA = op.isHA;
+      resultCollector = op.resultCollector;
+      function = op.function;
+      functionId = op.functionId;
+      regionName = op.regionName;
+      executor = op.executor;
+      hasResult = op.hasResult;
+      failedNodes = op.failedNodes;
+      executeOnBucketSet = op.executeOnBucketSet;
+      isHA = op.isHA;
-        this.resultCollector.endResults();
-        this.resultCollector.clearResults();
+        resultCollector.endResults();
+        resultCollector.clearResults();
-      addBytes(this.hasResult);
-      getMessage().addStringPart(this.regionName, true);
+      addBytes(hasResult);
+      getMessage().addStringPart(regionName, true);
-                  this.resultCollector.addResult(memberID, cause);
+                  resultCollector.addResult(memberID, cause);
-                      .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
+                      .getFunctionStats(functionId, executor.getRegion().getSystem())
-                  continue;
-                  this.failedNodes.addAll(ifite.getFailedNodeSet());
+                  failedNodes.addAll(ifite.getFailedNodeSet());
-                if (this.functionException == null) {
+                if (functionException == null) {
-                    this.functionException = new FunctionException(fite);
-                    this.functionException.addException(fite);
+                    functionException = new FunctionException(fite);
+                    functionException.addException(fite);
-                      this.failedNodes.add(memberID.getId());
+                      failedNodes.add(memberID.getId());
-                    this.functionException = new FunctionException(fite);
-                    this.functionException.addException(fite);
+                    functionException = new FunctionException(fite);
+                    functionException.addException(fite);
-                    this.functionException = new FunctionException(t);
-                    this.functionException.addException(t);
+                    functionException = new FunctionException(t);
+                    functionException.addException(t);
-                  this.functionException.addException(t);
+                  functionException.addException(t);
-                this.resultCollector.addResult(memberID, result);
+                resultCollector.addResult(memberID, result);
-                    .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
+                    .getFunctionStats(functionId, executor.getRegion().getSystem())
-              throw new ServerOperationException(s, this.functionException);
+              throw new ServerOperationException(s, functionException);
-            if (this.functionException != null) {
-              throw this.functionException;
+            if (functionException != null) {
+              throw functionException;
-            this.resultCollector.endResults();
+            resultCollector.endResults();
-                this.failedNodes.addAll(ifite.getFailedNodeSet());
+                failedNodes.addAll(ifite.getFailedNodeSet());
-        if (this.functionException == null) {
-          this.functionException = result;
+        if (functionException == null) {
+          functionException = result;
-        this.functionException.addException(result.getCause());
+        functionException.addException(result.getCause());
-        if (this.functionException == null) {
-          this.functionException = new FunctionException(result);
+        if (functionException == null) {
+          functionException = new FunctionException(result);
-        this.functionException.addException(result);
+        functionException.addException(result);
-        if (this.functionException == null) {
-          this.functionException = result;
+        if (functionException == null) {
+          functionException = result;
-        this.functionException.addException(result);
+        functionException.addException(result);

UPD43 MOV43 MOV43 UPD43 MOV42 UPD42 UPD74 UPD74 MOV43 MOV43 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 UPD74 UPD74 UPD74 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS7 MOV21 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL33 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL33 DEL42 DEL11 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL9 DEL9 DEL16 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL42 DEL43 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL18 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22