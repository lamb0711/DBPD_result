GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
-import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.Declarable;
-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionService;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.pdx.internal.TypeRegistry;
-import org.apache.logging.log4j.Logger;
-
+import java.io.FileNotFoundException;
+import java.net.MalformedURLException;
+import java.util.regex.Pattern;
+
+import io.github.lukehutch.fastclasspathscanner.FastClasspathScanner;
+import io.github.lukehutch.fastclasspathscanner.scanner.ScanResult;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.Declarable;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.pdx.internal.TypeRegistry;
-  private final static Logger logger = LogService.getLogger();
-  private final static MessageDigest messageDigest = getMessageDigest();
+
+  private static final Logger logger = LogService.getLogger();
+  private static final MessageDigest messageDigest = getMessageDigest();
+  private static final byte[] ZERO_BYTES = new byte[0];
+  private static final Pattern PATTERN_SLASH = Pattern.compile("/");
-  private final Collection<Function> registeredFunctions = new ArrayList<Function>();
+  private final Collection<Function> registeredFunctions = new ArrayList<>();
-    } catch (NoSuchAlgorithmException nsaex) {
+    } catch (NoSuchAlgorithmException ignored) {
-    return JarDeployer.extractVersionFromFilename(file.getName());
+    return JarDeployer.extractVersionFromFilename(this.file.getName());
-      throws IOException {
+      throws FileNotFoundException {
-      valid = (jarInputStream.getNextJarEntry() != null);
+      valid = jarInputStream.getNextJarEntry() != null;
-      } catch (IOException ioex) {
+      } catch (IOException ignored) {
-  public static boolean hasValidJarContent(final byte[] jarBytes) {
+  static boolean hasValidJarContent(final byte[] jarBytes) {
-
-  public synchronized void loadClassesAndRegisterFunctions() throws ClassNotFoundException {
+  synchronized void loadClassesAndRegisterFunctions() throws ClassNotFoundException {
-          final String className = jarEntry.getName().replaceAll("/", "\\.").substring(0,
-              (jarEntry.getName().length() - 6));
+          final String className = PATTERN_SLASH.matcher(jarEntry.getName()).replaceAll("\\.")
+              .substring(0, jarEntry.getName().length() - 6);
-      TypeRegistry typeRegistry =
-          ((GemFireCacheImpl) CacheFactory.getAnyInstance()).getPdxRegistry();
+      TypeRegistry typeRegistry = ((InternalCache) CacheFactory.getAnyInstance()).getPdxRegistry();
-    } catch (CacheClosedException ccex) {
+    } catch (CacheClosedException ignored) {
-  public boolean hasSameContentAs(final byte[] compareToBytes) {
+  boolean hasSameContentAs(final byte[] compareToBytes) {
-    final List<Function> registerableFunctions = new ArrayList<Function>();
+    final List<Function> registerableFunctions = new ArrayList<>();
-            final List<Properties> propertiesList =
-                ((GemFireCacheImpl) CacheFactory.getAnyInstance())
-                    .getDeclarableProperties(clazz.getName());
+            final List<Properties> propertiesList = ((InternalCache) CacheFactory.getAnyInstance())
+                .getDeclarableProperties(clazz.getName());
-          } catch (CacheClosedException ccex) {
+          } catch (CacheClosedException ignored) {
-      logger.error("Attempting to register function from JAR file: " + this.file.getAbsolutePath(),
+      logger.error("Attempting to register function from JAR file: {}", this.file.getAbsolutePath(),
-    InputStream channelInputStream = null;
-      channelInputStream = new FileInputStream(this.file);
+      InputStream channelInputStream = new FileInputStream(this.file);
-      while (((bytesRead = channelInputStream.read(bytes)) != -1)) {
+      while ((bytesRead = channelInputStream.read(bytes)) != -1) {
-    return new byte[0];
+    return ZERO_BYTES;
-    } catch (IOException e) {
-      e.printStackTrace();
+    } catch (MalformedURLException e) {
+      logger.warn(e);
-    result = prime * result + ((this.jarName == null) ? 0 : this.jarName.hashCode());
+    result = prime * result + (this.jarName == null ? 0 : this.jarName.hashCode());
-    sb.append("@").append(System.identityHashCode(this)).append("{");
+    sb.append('@').append(System.identityHashCode(this)).append('{');
-    sb.append("}");
+    sb.append('}');

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS23 INS83 INS83 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS43 INS59 UPD43 INS39 INS85 INS42 MOV3 INS42 INS42 INS32 UPD42 INS41 INS42 INS42 INS45 UPD74 INS42 INS60 INS13 INS13 UPD42 INS22 UPD42 UPD74 MOV43 INS59 MOV27 UPD43 MOV36 INS52 INS42 MOV27 INS42 MOV14 UPD42 INS16 INS13 UPD42 INS45 MOV32 UPD42 INS42 UPD42 MOV27 INS34 MOV32 UPD43 UPD42 INS32 MOV27 UPD42 MOV32 MOV32 INS42 INS45 UPD42 INS42 UPD43 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL36 DEL83 DEL83 DEL45 DEL45 DEL36 DEL83 DEL42 DEL43 DEL45 DEL27 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL36 DEL41 DEL34 DEL16 DEL36 DEL45 DEL45 DEL45