GEODE-77: Implement Authenticator interface in class GMSAuthenticator with unit tests.

+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.internal.ClassLoadUtil;
+import com.gemstone.gemfire.internal.logging.InternalLogWriter;
+import com.gemstone.gemfire.security.AuthInitialize;
+import com.gemstone.gemfire.security.AuthenticationRequiredException;
+import com.gemstone.gemfire.security.GemFireSecurityException;
+
+import java.lang.reflect.Method;
+import java.security.Principal;
+import java.util.Properties;
+import java.util.Set;
+
+// static messages
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.HandShake_AUTHENTICATOR_INSTANCE_COULD_NOT_BE_OBTAINED;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHINITIALIZE_METHOD_0;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.AUTH_PEER_AUTHENTICATION_FAILED_WITH_EXCEPTION;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.AUTH_PEER_AUTHENTICATION_FAILED;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS;
+import static com.gemstone.gemfire.internal.i18n.LocalizedStrings.AUTH_FAILED_TO_ACQUIRE_AUTHINITIALIZE_INSTANCE;
+import static com.gemstone.gemfire.distributed.internal.DistributionConfig.SECURITY_PEER_AUTH_INIT_NAME;
+import static com.gemstone.gemfire.distributed.internal.DistributionConfig.SECURITY_PEER_AUTHENTICATOR_NAME;
+
+  private Services services;
+
-    // TODO Auto-generated method stub
-
+    this.services = s;
+  /**
+   * Authenticate peer member with authenticator class defined by property
+   * "security-peer-authenticator".
+   * @param member the member to be authenticated
+   * @param credentials the credentials used in authentication
+   * @return null if authentication succeed (including no authenticator case),
+   *         otherwise, return failure message
+   * @throws AuthenticationFailedException
+   *         this will be removed since return string is used for failure
+   */
-  public String authenticate(InternalDistributedMember m, Object credentials)
-      throws AuthenticationFailedException {
-    // TODO Auto-generated method stub
-    return null;
+  public String authenticate(InternalDistributedMember member, Object credentials)
+    throws AuthenticationFailedException {
+    return authenticate(member, credentials, securityProps, services.getJoinLeave().getMemberID());
+  // for unit test
+  /* package */ String authenticate(
+      DistributedMember member, Object credentials, Properties secProps, DistributedMember localMember)
+    throws AuthenticationFailedException {
+
+    String authMethod = secProps.getProperty(SECURITY_PEER_AUTHENTICATOR_NAME);
+    if (authMethod == null || authMethod.length() == 0) {
+      return null;
+    }
+
+    InternalLogWriter securityLogWriter = services.getSecurityLogWriter();
+    String failMsg = null;
+    if (credentials != null) {
+      try {
+        invokeAuthenticator(authMethod, member, credentials);
+      } catch (Exception ex) {
+        securityLogWriter.warning(
+            AUTH_PEER_AUTHENTICATION_FAILED_WITH_EXCEPTION,
+          new Object[] {member, authMethod, ex.getLocalizedMessage()}, ex);
+        failMsg = AUTH_PEER_AUTHENTICATION_FAILED.toLocalizedString(localMember);
+      }
+    } else { // No credentials - need to send failure message
+      securityLogWriter.warning(
+          AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS, new Object[] {member, authMethod});
+      failMsg = AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS.toLocalizedString(member, authMethod);
+    }
+    return failMsg;
+  }
+
+  /* package */ Principal invokeAuthenticator(String authMethod, DistributedMember member, Object credentials)
+    throws AuthenticationFailedException {
+    com.gemstone.gemfire.security.Authenticator auth = null;
+    try {
+      Method getter = ClassLoadUtil.methodFromName(authMethod);
+      auth = (com.gemstone.gemfire.security.Authenticator) getter.invoke(null, (Object[]) null);
+      if (auth == null)
+        throw new AuthenticationFailedException(
+          HandShake_AUTHENTICATOR_INSTANCE_COULD_NOT_BE_OBTAINED.toLocalizedString());
+
+      LogWriter logWriter = services.getLogWriter();
+      LogWriter securityLogWriter = services.getSecurityLogWriter();
+      auth.init(securityProps, logWriter, securityLogWriter);
+      return auth.authenticate((Properties) credentials, member);
+    } catch (GemFireSecurityException gse) {
+      throw gse;
+    } catch (Exception ex) {
+      throw new AuthenticationFailedException(
+        HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
+    } finally {
+      if (auth != null) auth.close();
+    }
+  }
+
+  /**
+   * Get credential object for the given GemFire distributed member
+   * @param member the target distributed member
+   * @return the credential object
+   */
-  public Object getCredentials() {
-    // TODO Auto-generated method stub
-    return null;
+  public Object getCredentials(InternalDistributedMember member) {
+    return getCredentials(member, securityProps);
+  }
+
+  // for unit test
+  /* package */ Properties getCredentials(DistributedMember member, Properties secProps) {
+    Properties credentials = null;
+    String authMethod = secProps.getProperty(SECURITY_PEER_AUTH_INIT_NAME);
+    try {
+      if (authMethod != null && authMethod.length() > 0) {
+        Method getter = ClassLoadUtil.methodFromName(authMethod);
+        AuthInitialize auth = (AuthInitialize)getter.invoke(null, (Object[]) null);
+        if (auth == null)
+          throw new AuthenticationRequiredException(
+            AUTH_FAILED_TO_ACQUIRE_AUTHINITIALIZE_INSTANCE.toLocalizedString(authMethod));
+
+        try {
+          LogWriter logWriter = services.getLogWriter();
+          LogWriter securityLogWriter = services.getSecurityLogWriter();
+          auth.init(logWriter, securityLogWriter);
+          credentials = auth.getCredentials(secProps, member, true);
+        } finally {
+          auth.close();
+        }
+      }
+    } catch (GemFireSecurityException gse) {
+      throw gse;
+    } catch (Exception ex) {
+      throw new AuthenticationRequiredException(
+        HandShake_FAILED_TO_ACQUIRE_AUTHINITIALIZE_METHOD_0.toLocalizedString(authMethod), ex);
+    }
+    return credentials;
+  }
+
+  private final static String secPrefix =  "gemfire.sys.security-";
+  private final static int gemfireSysPrefixLen = "gemfire.sys.".length();
+  private Properties securityProps = getSecurityProps();
+
+  Properties getSecurityProps() {
+    Properties props = new Properties();
+    Set keys = System.getProperties().keySet();
+    for (Object key: keys) {
+      String propKey = (String) key;
+      if (propKey.startsWith(secPrefix)) {
+        props.setProperty(propKey.substring(gemfireSysPrefixLen), System.getProperty(propKey));
+      }
+    }
+    return props;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS23 INS23 INS23 INS31 INS83 INS43 INS59 INS29 MOV78 INS43 INS43 INS42 INS44 INS44 INS44 INS44 MOV43 INS8 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 MOV78 INS44 INS8 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS43 INS42 INS8 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS65 INS65 INS65 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS54 INS41 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS60 INS60 INS70 INS41 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS27 MOV8 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS12 INS8 INS66 INS42 INS66 INS66 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS42 INS45 INS42 INS42 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS54 INS21 INS21 INS40 INS42 INS33 INS60 INS21 INS25 INS60 INS60 INS21 INS41 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS60 INS25 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS8 INS12 INS32 INS7 INS43 INS59 INS7 INS27 INS53 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS21 INS42 INS42 INS42 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS3 INS42 INS32 INS42 INS42 INS32 INS42 INS11 INS42 INS33 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS32 INS27 INS27 INS60 INS60 INS25 INS54 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS21 INS32 INS43 INS42 INS21 INS21 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS43 INS59 INS43 INS59 INS27 INS53 INS8 INS8 INS43 INS32 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS85 INS42 INS42 INS40 INS42 INS42 INS33 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS33 INS14 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS5 INS33 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS43 INS59 INS43 INS59 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS4 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS33 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS85 INS42 INS42 INS32 INS42 INS5 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS85 INS42 DEL33