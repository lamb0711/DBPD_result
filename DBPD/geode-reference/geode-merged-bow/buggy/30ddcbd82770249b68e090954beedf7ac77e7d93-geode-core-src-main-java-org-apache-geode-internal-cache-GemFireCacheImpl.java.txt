GEODE-6588: Cleanup static analyzer warnings and generics (#3646)


+import java.nio.charset.StandardCharsets;
-   * Define gemfire.Cache.ASYNC_EVENT_LISTENERS=true to invoke event listeners in the background
-   */
-  private static final boolean ASYNC_EVENT_LISTENERS =
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "Cache.ASYNC_EVENT_LISTENERS");
-
-  /**
-    sb.append("; isClosing = ").append(this.isClosing);
+    sb.append("; isClosing = ").append(isClosing);
-    sb.append("; created = ").append(this.creationDate);
-    sb.append("; server = ").append(this.isServer);
-    sb.append("; copyOnRead = ").append(this.copyOnRead);
-    sb.append("; lockLease = ").append(this.lockLease);
-    sb.append("; lockTimeout = ").append(this.lockTimeout);
-    if (this.creationStack != null) {
+    sb.append("; created = ").append(creationDate);
+    sb.append("; server = ").append(isServer);
+    sb.append("; copyOnRead = ").append(copyOnRead);
+    sb.append("; lockLease = ").append(lockLease);
+    sb.append("; lockTimeout = ").append(lockTimeout);
+    if (creationStack != null) {
-      this.creationStack.printStackTrace(ps);
+      creationStack.printStackTrace(ps);
-  private final ConcurrentMap reinitializingRegions = new ConcurrentHashMap();
+  private final ConcurrentMap<String, FutureResult<InternalRegion>> reinitializingRegions =
+      new ConcurrentHashMap<>();
-    this.pdxRegistry = typeRegistry;
+    pdxRegistry = typeRegistry;
-      this.system = internalDistributedSystem;
-      this.dm = this.system.getDistributionManager();
+      system = internalDistributedSystem;
+      dm = system.getDistributionManager();
-        this.configurationResponse = requestSharedConfiguration();
+        configurationResponse = requestSharedConfiguration();
-        ccLoader.applyClusterPropertiesConfiguration(this.configurationResponse,
-            this.system.getConfig());
+        ccLoader.applyClusterPropertiesConfiguration(configurationResponse,
+            system.getConfig());
-        this.securityService =
-            SecurityServiceFactory.create(this.system.getConfig().getSecurityProps(), cacheConfig);
-        this.system.setSecurityService(this.securityService);
+        securityService =
+            SecurityServiceFactory.create(system.getConfig().getSecurityProps(), cacheConfig);
+        system.setSecurityService(securityService);
-        this.securityService = SecurityServiceFactory.create();
+        securityService = SecurityServiceFactory.create();
-          this.resourceEventsListener = new ManagementListener(this.system);
-          this.system.addResourceListener(this.resourceEventsListener);
-          if (this.system.isLoner()) {
-            this.system.getInternalLogWriter()
+          resourceEventsListener = new ManagementListener(system);
+          system.addResourceListener(resourceEventsListener);
+          if (system.isLoner()) {
+            system.getInternalLogWriter()
-        this.resourceEventsListener = null;
+        resourceEventsListener = null;
-      if (this.dm.getDMType() == ClusterDistributionManager.ADMIN_ONLY_DM_TYPE) {
+      if (dm.getDMType() == ClusterDistributionManager.ADMIN_ONLY_DM_TYPE) {
-      this.rootRegions = new HashMap<>();
+      rootRegions = new HashMap<>();
-      this.cqService = CqServiceProvider.create(this);
+      cqService = CqServiceProvider.create(this);
-      CachePerfStats.enableClockStats = this.system.getConfig().getEnableTimeStatistics();
-      this.cachePerfStats = new CachePerfStats(internalDistributedSystem.getStatisticsManager());
+      CachePerfStats.enableClockStats = system.getConfig().getEnableTimeStatistics();
+      cachePerfStats = new CachePerfStats(internalDistributedSystem.getStatisticsManager());
-      this.transactionManager = new TXManagerImpl(this.cachePerfStats, this);
-      this.dm.addMembershipListener(this.transactionManager);
+      transactionManager = new TXManagerImpl(cachePerfStats, this);
+      dm.addMembershipListener(transactionManager);
-      this.creationDate = new Date();
+      creationDate = new Date();
-      this.persistentMemberManager = new PersistentMemberManager();
+      persistentMemberManager = new PersistentMemberManager();
-        this.eventThreadPool = LoggingExecutors.newThreadPoolWithFixedFeed("Message Event Thread",
+        eventThreadPool = LoggingExecutors.newThreadPoolWithFixedFeed("Message Event Thread",
-            }, EVENT_THREAD_LIMIT, this.cachePerfStats.getEventPoolHelper(), 1000,
+            }, EVENT_THREAD_LIMIT, cachePerfStats.getEventPoolHelper(), 1000,
-        this.eventThreadPool = null;
+        eventThreadPool = null;
-      this.resourceAdvisor = ResourceAdvisor.createResourceAdvisor(this);
+      resourceAdvisor = ResourceAdvisor.createResourceAdvisor(this);
-      this.jmxAdvisor = JmxManagerAdvisor
+      jmxAdvisor = JmxManagerAdvisor
-      this.resourceManager = InternalResourceManager.createResourceManager(this);
-      this.serialNumber = DistributionAdvisor.createSerialNumber();
+      resourceManager = InternalResourceManager.createResourceManager(this);
+      serialNumber = DistributionAdvisor.createSerialNumber();
-      this.recordedEventSweeper = createEventTrackerExpiryTask();
-      this.tombstoneService = TombstoneService.initialize(this);
+      recordedEventSweeper = createEventTrackerExpiryTask();
+      tombstoneService = TombstoneService.initialize(this);
-      this.expirationScheduler = new ExpirationScheduler(this.system);
+      expirationScheduler = new ExpirationScheduler(system);
-        this.creationStack = new Exception(
+        creationStack = new Exception(
-      this.txEntryStateFactory = TXEntryState.getFactory();
+      txEntryStateFactory = TXEntryState.getFactory();
-        Properties userProps = this.system.getConfig().getUserDefinedProps();
+        Properties userProps = system.getConfig().getUserDefinedProps();
-          this.resolver = new CacheXmlPropertyResolver(false,
+          resolver = new CacheXmlPropertyResolver(false,
-          this.resolver = new CacheXmlPropertyResolver(false,
+          resolver = new CacheXmlPropertyResolver(false,
-        this.resolver = null;
+        resolver = null;
-      this.diskMonitor = new DiskStoreMonitor(systemConfig.getLogFile());
+      diskMonitor = new DiskStoreMonitor(systemConfig.getLogFile());
-    this.configurationResponse = requestSharedConfiguration();
-    if (this.configurationResponse != null) {
-      ccLoader.deployJarsReceivedFromClusterConfiguration(this.configurationResponse);
-      ccLoader.applyClusterPropertiesConfiguration(this.configurationResponse,
-          this.system.getConfig());
-      ccLoader.applyClusterXmlConfiguration(this, this.configurationResponse,
-          this.system.getConfig().getGroups());
+    configurationResponse = requestSharedConfiguration();
+    if (configurationResponse != null) {
+      ccLoader.deployJarsReceivedFromClusterConfiguration(configurationResponse);
+      ccLoader.applyClusterPropertiesConfiguration(configurationResponse,
+          system.getConfig());
+      ccLoader.applyClusterXmlConfiguration(this, configurationResponse,
+          system.getConfig().getGroups());
-    return this.securityService;
+    return securityService;
-    return this.isRESTServiceRunning;
+    return isRESTServiceRunning;
-    return this.restAgent;
+    return restAgent;
-    final DistributionConfig config = this.system.getConfig();
+    final DistributionConfig config = system.getConfig();
-    if (!(this.dm instanceof ClusterDistributionManager)) {
+    if (!(dm instanceof ClusterDistributionManager)) {
-    if (this.dm.getDMType() == ClusterDistributionManager.LOCATOR_DM_TYPE || this.isClient
+    if (dm.getDMType() == ClusterDistributionManager.LOCATOR_DM_TYPE || isClient
-          this.system.getConfig().getGroups(), locatorsWithClusterConfig.keySet());
+          system.getConfig().getGroups(), locatorsWithClusterConfig.keySet());
-    return this.isClient;
+    return isClient;
-    return this.isClient || !getAllPools().isEmpty();
+    return isClient || !getAllPools().isEmpty();
-    if (this.defaultPool == null) {
+    if (defaultPool == null) {
-    return this.defaultPool;
+    return defaultPool;
-    ClassPathLoader.setLatestToDefault(this.system.getConfig().getDeployWorkingDir());
+    ClassPathLoader.setLatestToDefault(system.getConfig().getDeployWorkingDir());
-      ccLoader.deployJarsReceivedFromClusterConfiguration(this.configurationResponse);
+      ccLoader.deployJarsReceivedFromClusterConfiguration(configurationResponse);
-    this.resourceAdvisor.initializationGate();
+    resourceAdvisor.initializationGate();
-    this.jmxAdvisor.initializationGate(); // Entry to GemFire Management service
+    jmxAdvisor.initializationGate(); // Entry to GemFire Management service
-    this.system.handleResourceEvent(ResourceEvent.CACHE_CREATE, this);
+    system.handleResourceEvent(ResourceEvent.CACHE_CREATE, this);
-        this.configurationResponse = null;
+        configurationResponse = null;
-    this.isInitialized = true;
+    isInitialized = true;
-    if (this.configurationResponse == null) {
+    if (configurationResponse == null) {
-    ccLoader.applyClusterXmlConfiguration(this, this.configurationResponse,
-        this.system.getConfig().getGroups());
+    ccLoader.applyClusterXmlConfiguration(this, configurationResponse,
+        system.getConfig().getGroups());
-      this.services.put(service.getInterface(), service);
-      this.system.handleResourceEvent(ResourceEvent.CACHE_SERVICE_CREATE, service);
+      services.put(service.getInterface(), service);
+      system.handleResourceEvent(ResourceEvent.CACHE_SERVICE_CREATE, service);
-    return this.system.getDistributedMember()
+    return system.getDistributedMember()
-        && this.system.getDistributedMember()
+        && system.getDistributedMember()
-    if (this.system.getConfig().getStartDevRestApi() && isServerNode()) {
-      this.restAgent = new RestAgent(this.system.getConfig(), this.securityService);
-      this.restAgent.start(cache);
+    if (system.getConfig().getStartDevRestApi() && isServerNode()) {
+      restAgent = new RestAgent(system.getConfig(), securityService);
+      restAgent.start(cache);
-      this.restAgent = null;
+      restAgent = null;
-    if (this.getMyId().getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
+    if (getMyId().getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
-      xmlFile = this.system.getConfig().getCacheXmlFile();
+      xmlFile = system.getConfig().getCacheXmlFile();
-    String cacheXmlDescription = this.cacheConfig.getCacheXMLDescription();
+    String cacheXmlDescription = cacheConfig.getCacheXMLDescription();
-      CacheXmlException newEx =
-          new CacheXmlException(String.format("While reading Cache XML %s. %s",
-              url, ex.getMessage()));
-      /*
-       * TODO: why use setStackTrace and initCause? removal breaks several tests: OplogRVVJUnitTest,
-       * NewDeclarativeIndexCreationJUnitTest CacheXml70DUnitTest, CacheXml80DUnitTest,
-       * CacheXml81DUnitTest, CacheXmlGeode10DUnitTest RegionManagementDUnitTest
-       */
-      newEx.setStackTrace(ex.getStackTrace());
-      newEx.initCause(ex.getCause());
-      throw newEx;
+      throw new CacheXmlException(String.format("While reading Cache XML %s. %s",
+          url, ex.getMessage()), ex.getCause());
-    if (this.pdxRegistry == null) {
+    if (pdxRegistry == null) {
-      if (this.getMyId().getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
-        this.pdxRegistry = new TypeRegistry(this, true);
+      if (getMyId().getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
+        pdxRegistry = new TypeRegistry(this, true);
-        this.pdxRegistry = new TypeRegistry(this, false);
+        pdxRegistry = new TypeRegistry(this, false);
-      this.pdxRegistry.initialize();
+      pdxRegistry.initialize();
-      if (GemFireCacheImpl.this.disconnectCause != null) {
-        return GemFireCacheImpl.this.disconnectCause.getMessage();
+      if (disconnectCause != null) {
+        return disconnectCause.getMessage();
-      if (GemFireCacheImpl.this.isClosing) {
+      if (isClosing) {
-      if (GemFireCacheImpl.this.disconnectCause == null) {
+      if (disconnectCause == null) {
-        return new CacheClosedException(reason, GemFireCacheImpl.this.disconnectCause);
+        return new CacheClosedException(reason, disconnectCause);
-        ThrowableUtils.setRootCause(throwable, GemFireCacheImpl.this.disconnectCause);
+        ThrowableUtils.setRootCause(throwable, disconnectCause);
-        return new CacheClosedException(reason, GemFireCacheImpl.this.disconnectCause);
+        return new CacheClosedException(reason, disconnectCause);
-    return this.stopper;
+    return stopper;
-    return this.forcedDisconnect || this.system.forcedDisconnect();
+    return forcedDisconnect || system.forcedDisconnect();
-    } else if (this.disconnectCause != null) {
-      result = new CacheClosedException(reason, this.disconnectCause);
+    } else if (disconnectCause != null) {
+      result = new CacheClosedException(reason, disconnectCause);
-    return this.disconnectCause;
+    return disconnectCause;
-    return this.keepAlive;
+    return keepAlive;
-    final boolean DEBUG = SystemFailure.TRACE_CLOSE;
-
-      if (DEBUG) {
-        System.err.println("GemFireCache#emergencyClose: no instance");
-      }
-      if (DEBUG) {
-        System.err.println("DEBUG: emergencyClose InternalDistributedSystem");
-      }
-    // Clear cache servers
-    if (DEBUG) {
-      System.err.println("DEBUG: Close cache servers");
-    }
-
-    if (DEBUG) {
-      System.err.println("DEBUG: closing client resources");
-    }
-    if (DEBUG) {
-      System.err.println("DEBUG: closing gateway hubs");
-    }
-
-    if (DEBUG) {
-      System.err.println("DEBUG: done with cache emergency close");
-    }
-    return this.isShutDownAll.get();
+    return isShutDownAll.get();
-    if (!this.isShutDownAll.compareAndSet(false, true)) {
+    if (!isShutDownAll.compareAndSet(false, true)) {
-        this.shutDownAllFinished.await();
+        shutDownAllFinished.await();
-        this.shutDownAllFinished.countDown();
+        shutDownAllFinished.countDown();
+          @SuppressWarnings("unchecked")
-    synchronized (this.prLockServiceLock) {
-      this.stopper.checkCancelInProgress(null);
-      if (this.prLockService == null) {
+    synchronized (prLockServiceLock) {
+      stopper.checkCancelInProgress(null);
+      if (prLockService == null) {
-          this.prLockService =
+          prLockService =
-          this.prLockService = DistributedLockService
+          prLockService = DistributedLockService
-          if (this.prLockService == null) {
+          if (prLockService == null) {
-      return this.prLockService;
+      return prLockService;
-    if (this.gatewayLockService == null) {
-      synchronized (this.gatewayLockServiceLock) {
-        this.stopper.checkCancelInProgress(null);
-        if (this.gatewayLockService == null) {
+    if (gatewayLockService == null) {
+      synchronized (gatewayLockServiceLock) {
+        stopper.checkCancelInProgress(null);
+        if (gatewayLockService == null) {
-            this.gatewayLockService = DLockService.create(AbstractGatewaySender.LOCK_SERVICE_NAME,
+            gatewayLockService = DLockService.create(AbstractGatewaySender.LOCK_SERVICE_NAME,
-            this.gatewayLockService =
+            gatewayLockService =
-            if (this.gatewayLockService == null) {
+            if (gatewayLockService == null) {
-    return this.gatewayLockService;
+    return gatewayLockService;
-    synchronized (this.heapEvictorLock) {
-      this.stopper.checkCancelInProgress(null);
-      if (this.heapEvictor == null) {
-        this.heapEvictor = new HeapEvictor(this);
+    synchronized (heapEvictorLock) {
+      stopper.checkCancelInProgress(null);
+      if (heapEvictor == null) {
+        heapEvictor = new HeapEvictor(this);
-      return this.heapEvictor;
+      return heapEvictor;
-    synchronized (this.offHeapEvictorLock) {
-      this.stopper.checkCancelInProgress(null);
-      if (this.offHeapEvictor == null) {
-        this.offHeapEvictor = new OffHeapEvictor(this);
+    synchronized (offHeapEvictorLock) {
+      stopper.checkCancelInProgress(null);
+      if (offHeapEvictor == null) {
+        offHeapEvictor = new OffHeapEvictor(this);
-      return this.offHeapEvictor;
+      return offHeapEvictor;
-    this.offHeapEvictor = evictor;
+    offHeapEvictor = evictor;
-    this.heapEvictor = evictor;
+    heapEvictor = evictor;
-    return this.persistentMemberManager;
+    return persistentMemberManager;
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    return this.clientMetadataService;
+    return clientMetadataService;
-        && (this.isReconnecting() || this.system.getReconnectedSystem() != null)) {
+        && (isReconnecting() || system.getReconnectedSystem() != null)) {
-          this.isReconnecting(), system.getReconnectedSystem(), keepAlive, keepDS);
+          isReconnecting(), system.getReconnectedSystem(), keepAlive, keepDS);
-      this.system.stopReconnectingNoDisconnect();
-      if (this.system.getReconnectedSystem() != null) {
-        this.system.getReconnectedSystem().disconnect();
+      system.stopReconnectingNoDisconnect();
+      if (system.getReconnectedSystem() != null) {
+        system.getReconnectedSystem().disconnect();
-      this.system.handleResourceEvent(ResourceEvent.CACHE_REMOVE, this);
-      if (this.resourceEventsListener != null) {
-        this.system.removeResourceListener(this.resourceEventsListener);
-        this.resourceEventsListener = null;
+      system.handleResourceEvent(ResourceEvent.CACHE_REMOVE, this);
+      if (resourceEventsListener != null) {
+        system.removeResourceListener(resourceEventsListener);
+        resourceEventsListener = null;
-        this.forcedDisconnect = systemFailureCause instanceof ForcedDisconnectException;
-        if (this.forcedDisconnect) {
-          this.disconnectCause = new ForcedDisconnectException(reason);
+        forcedDisconnect = systemFailureCause instanceof ForcedDisconnectException;
+        if (forcedDisconnect) {
+          disconnectCause = new ForcedDisconnectException(reason);
-          this.disconnectCause = systemFailureCause;
+          disconnectCause = systemFailureCause;
-      this.isClosing = true;
+      isClosing = true;
-        if (this.transactionManager != null) {
-          tx = this.transactionManager.pauseTransaction();
+        if (transactionManager != null) {
+          tx = transactionManager.pauseTransaction();
-        this.resourceManager.close();
+        resourceManager.close();
-          this.resourceAdvisor.close();
+          resourceAdvisor.close();
-          this.jmxAdvisor.close();
+          jmxAdvisor.close();
-        for (GatewaySender sender : this.allGatewaySenders) {
+        for (GatewaySender sender : allGatewaySenders) {
-        if (this.eventThreadPool != null) {
+        if (eventThreadPool != null) {
-          this.eventThreadPool.shutdown();
+          eventThreadPool.shutdown();
-          this.stopServers();
+          stopServers();
-          this.stopServices();
+          stopServices();
-          if (this.partitionedRegions != null) {
-            if (isDebugEnabled) {
-              logger.debug("{}: clearing partitioned regions...", this);
-            }
-            synchronized (this.partitionedRegions) {
-              int prSize = -this.partitionedRegions.size();
-              this.partitionedRegions.clear();
-              getCachePerfStats().incPartitionedRegions(prSize);
-            }
+          if (isDebugEnabled) {
+            logger.debug("{}: clearing partitioned regions...", this);
+          }
+          synchronized (partitionedRegions) {
+            int prSize = -partitionedRegions.size();
+            partitionedRegions.clear();
+            getCachePerfStats().incPartitionedRegions(prSize);
-          synchronized (this.rootRegions) {
-            rootRegionValues = new ArrayList<>(this.rootRegions.values());
+          synchronized (rootRegions) {
+            rootRegionValues = new ArrayList<>(rootRegions.values());
-            if (this.forcedDisconnect) {
+            if (forcedDisconnect) {
-                  if (isDebugEnabled || !this.forcedDisconnect) {
+                  if (isDebugEnabled || !forcedDisconnect) {
-                        new Object[] {this, lr.getFullPath()}),
-                        e);
+                        this, lr.getFullPath()), e);
-          this.diskMonitor.close();
+          diskMonitor.close();
-            this.cqService.close();
+            cqService.close();
-          this.tombstoneService.stop();
+          tombstoneService.stop();
-            distributionManager = this.system.getDistributionManager();
-            distributionManager.removeMembershipListener(this.transactionManager);
+            distributionManager = system.getDistributionManager();
+            distributionManager.removeMembershipListener(transactionManager);
-            Set otherMembers = distributionManager.getOtherDistributionManagerIds();
-            ReplyProcessor21 processor = new ReplyProcessor21(this.system, otherMembers);
+            Set<? extends DistributedMember> otherMembers =
+                distributionManager.getOtherDistributionManagerIds();
+            ReplyProcessor21 processor = new ReplyProcessor21(system, otherMembers);
-          ClientMetadataService cms = this.clientMetadataService;
+          ClientMetadataService cms = clientMetadataService;
-          this.cqService.close();
+          cqService.close();
-        this.cachePerfStats.close();
+        cachePerfStats.close();
-        synchronized (this.ccpTimerMutex) {
-          if (this.ccpTimer != null) {
-            this.ccpTimer.cancel();
+        synchronized (ccpTimerMutex) {
+          if (ccpTimer != null) {
+            ccpTimer.cancel();
-        this.expirationScheduler.cancel();
+        expirationScheduler.cancel();
-        if (this.queryMonitor != null) {
-          this.queryMonitor.stopMonitoring();
+        if (queryMonitor != null) {
+          queryMonitor.stopMonitoring();
-        if (this.transactionManager != null) {
-          this.transactionManager.close();
+        if (transactionManager != null) {
+          transactionManager.close();
-        if (this.transactionManager != null) {
-          this.transactionManager.unpauseTransaction(tx);
+        if (transactionManager != null) {
+          transactionManager.unpauseTransaction(tx);
-        if (!this.DISABLE_DISCONNECT_DS_ON_CACHE_CLOSE) {
-          this.system.disconnect();
+        if (!DISABLE_DISCONNECT_DS_ON_CACHE_CLOSE) {
+          system.disconnect();
-    for (CacheService service : this.services.values()) {
+    for (CacheService service : services.values()) {
-    OffHeapEvictor evictor = this.offHeapEvictor;
+    OffHeapEvictor evictor = offHeapEvictor;
-    HeapEvictor evictor = this.heapEvictor;
+    HeapEvictor evictor = heapEvictor;
-    return this.system.isReconnecting();
+    return system.isReconnecting();
-      boolean systemReconnected = this.system.waitUntilReconnected(time, units);
+      boolean systemReconnected = system.waitUntilReconnected(time, units);
-    this.system.stopReconnecting();
+    system.stopReconnecting();
-    for (DiskStoreImpl dsi : this.diskStores.values()) {
+    for (DiskStoreImpl dsi : diskStores.values()) {
-    this.diskStores.put(dsi.getName(), dsi);
+    diskStores.put(dsi.getName(), dsi);
-      this.diskMonitor.addDiskStore(dsi);
+      diskMonitor.addDiskStore(dsi);
-    this.diskStores.remove(diskStore.getName());
-    this.regionOwnedDiskStores.remove(diskStore.getName());
+    diskStores.remove(diskStore.getName());
+    regionOwnedDiskStores.remove(diskStore.getName());
-      this.system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, diskStore);
+      system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, diskStore);
-    this.regionOwnedDiskStores.put(dsi.getName(), dsi);
+    regionOwnedDiskStores.put(dsi.getName(), dsi);
-      this.diskMonitor.addDiskStore(dsi);
+      diskMonitor.addDiskStore(dsi);
-    Iterator<DiskStoreImpl> it = this.diskStores.values().iterator();
+    Iterator<DiskStoreImpl> it = diskStores.values().iterator();
-        this.system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, dsi);
+        system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, dsi);
-    return this.diskStores.get(name);
+    return diskStores.get(name);
-    return Collections.unmodifiableCollection(this.diskStores.values());
+    return Collections.unmodifiableCollection(diskStores.values());
-    allDiskStores.addAll(this.diskStores.values());
-    allDiskStores.addAll(this.regionOwnedDiskStores.values());
+    allDiskStores.addAll(diskStores.values());
+    allDiskStores.addAll(regionOwnedDiskStores.values());
-    return this.system;
+    return system;
-    return this.system;
+    return system;
-    return this.system.getDistributedMember();
+    return system.getDistributedMember();
-        .unmodifiableSet((Set) this.dm.getOtherNormalDistributionManagerIds());
+        .unmodifiableSet(dm.getOtherNormalDistributionManagerIds());
-    return (Set) this.dm.getAdminMemberSet();
+    return asDistributedMemberSet(dm.getAdminMemberSet());
-    return (Set<DistributedMember>) (Set) internalDistributedMembers;
+    return (Set) internalDistributedMembers;
-    return this.system.getLogWriter();
+    return system.getLogWriter();
-    return this.system.getSecurityLogWriter();
+    return system.getSecurityLogWriter();
-    return this.system.getInternalLogWriter();
+    return system.getInternalLogWriter();
-    return this.system.getSecurityInternalLogWriter();
+    return system.getSecurityInternalLogWriter();
-    return this.system.getInternalLogWriter();
+    return system.getInternalLogWriter();
-    return this.system.getSecurityInternalLogWriter();
+    return system.getSecurityInternalLogWriter();
-    return this.recordedEventSweeper;
+    return recordedEventSweeper;
-    return this.cachePerfStats;
+    return cachePerfStats;
-    return this.system.getName();
+    return system.getName();
-    synchronized (this.declarablePropertiesMap) {
-      for (Entry<Declarable, Properties> entry : this.declarablePropertiesMap.entrySet()) {
+    synchronized (declarablePropertiesMap) {
+      for (Entry<Declarable, Properties> entry : declarablePropertiesMap.entrySet()) {
-    return this.declarablePropertiesMap.get(declarable);
+    return declarablePropertiesMap.get(declarable);
-    return (int) (System.currentTimeMillis() - this.creationDate.getTime()) / 1000;
+    return (int) (System.currentTimeMillis() - creationDate.getTime()) / 1000;
-    if (this.system != null) {
-      return this.system.getClock().cacheTimeMillis();
+    if (system != null) {
+      return system.getClock().cacheTimeMillis();
-    PoolFactory defaultPoolFactory = this.poolFactory;
+    PoolFactory defaultPoolFactory = poolFactory;
-          this.defaultPool = null;
+          defaultPool = null;
-    this.defaultPool = pool;
+    defaultPool = pool;
-  // TODO: createVMRegion method is too complex for IDE to analyze
+  @SuppressWarnings("unchecked")
+  private static <K, V> Region<K, V> uncheckedRegion(Region region) {
+    return region;
+  }
+
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-        synchronized (this.rootRegions) {
-          region = this.rootRegions.get(name);
+        synchronized (rootRegions) {
+          region = rootRegions.get(name);
-            future = (Future) this.reinitializingRegions.get(fullPath);
+            future = reinitializingRegions.get(fullPath);
-            this.rootRegions.put(name, region);
+            rootRegions.put(name, region);
-            this.stopper.checkCancelInProgress(t);
+            stopper.checkCancelInProgress(t);
-            synchronized (this.rootRegions) {
-              Region rootRegion = this.rootRegions.get(name);
+            synchronized (rootRegions) {
+              Region rootRegion = rootRegions.get(name);
-                this.rootRegions.remove(name);
+                rootRegions.remove(name);
-      this.system.handleResourceEvent(ResourceEvent.REGION_CREATE, region);
+      system.handleResourceEvent(ResourceEvent.REGION_CREATE, region);
+    return uncheckedRegion(region);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <K, V> RegionAttributes<K, V> uncheckedRegionAttributes(RegionAttributes region) {
-    for (RegionListener listener : this.regionListeners) {
+    for (RegionListener listener : regionListeners) {
-          (RegionAttributes<K, V>) listener.beforeCreate(parent, name, attrs, internalRegionArgs);
+          uncheckedRegionAttributes(listener.beforeCreate(parent, name, attrs, internalRegionArgs));
-    for (RegionListener listener : this.regionListeners) {
+    for (RegionListener listener : regionListeners) {
-    for (RegionListener listener : this.regionListeners) {
+    for (RegionListener listener : regionListeners) {
-    for (RegionListener listener : this.regionListeners) {
+    for (RegionListener listener : regionListeners) {
+  @SuppressWarnings("unchecked")
-    synchronized (this.rootRegions) {
-      for (Region region : this.rootRegions.values()) {
+    synchronized (rootRegions) {
+      for (Region region : rootRegions.values()) {
-    synchronized (this.rootRegions) {
-      for (Object region : this.rootRegions.values()) {
+    synchronized (rootRegions) {
+      for (Object region : rootRegions.values()) {
-  @SuppressWarnings("unchecked")
-    synchronized (this.rootRegions) {
-      for (InternalRegion region : this.rootRegions.values()) {
+    synchronized (rootRegions) {
+      for (InternalRegion region : rootRegions.values()) {
-        for (InternalRegion subRegion : (Set<InternalRegion>) region.basicSubregions(true)) {
+        for (InternalRegion subRegion : region.basicSubregions(true)) {
-      this.pathToRegion.remove(path);
+      pathToRegion.remove(path);
-      this.pathToRegion.put(path, r);
+      pathToRegion.put(path, r);
-    return this.pathToRegion.get(path);
+    return pathToRegion.get(path);
-      this.stopper.checkCancelInProgress(null);
+      stopper.checkCancelInProgress(null);
-        synchronized (this.rootRegions) {
-          rootRegion = this.rootRegions.get(pathParts[0]);
+        synchronized (rootRegions) {
+          rootRegion = rootRegions.get(pathParts[0]);
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-        this.stopper.checkCancelInProgress(null);
+        stopper.checkCancelInProgress(null);
-    synchronized (this.rootRegions) {
-      rootRegion = this.rootRegions.get(pathParts[0]);
+    synchronized (rootRegions) {
+      rootRegion = rootRegions.get(pathParts[0]);
-        this.stopper.checkCancelInProgress(null);
+        stopper.checkCancelInProgress(null);
-        this.stopper.checkCancelInProgress(null);
+        stopper.checkCancelInProgress(null);
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    synchronized (this.rootRegions) {
-      for (InternalRegion region : this.rootRegions.values()) {
+    synchronized (rootRegions) {
+      for (InternalRegion region : rootRegions.values()) {
-    return this.isInitialized;
+    return isInitialized;
-    return this.isClosing;
+    return isClosing;
-    return this.lockTimeout;
+    return lockTimeout;
-    this.stopper.checkCancelInProgress(null);
-    this.lockTimeout = seconds;
+    stopper.checkCancelInProgress(null);
+    lockTimeout = seconds;
-    return this.lockLease;
+    return lockLease;
-    this.stopper.checkCancelInProgress(null);
-    this.lockLease = seconds;
+    stopper.checkCancelInProgress(null);
+    lockLease = seconds;
-    return this.searchTimeout;
+    return searchTimeout;
-    this.stopper.checkCancelInProgress(null);
-    this.searchTimeout = seconds;
+    stopper.checkCancelInProgress(null);
+    searchTimeout = seconds;
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    Future future = (Future) this.reinitializingRegions.get(fullPath);
+    Future<InternalRegion> future = reinitializingRegions.get(fullPath);
-      InternalRegion region = (InternalRegion) future.get();
+      InternalRegion region = future.get();
-    Object old = this.reinitializingRegions.putIfAbsent(fullPath, new FutureResult(this.stopper));
+    Object old = reinitializingRegions.putIfAbsent(fullPath, new FutureResult<>(stopper));
-    FutureResult future = (FutureResult) this.reinitializingRegions.get(regionName);
+    FutureResult<InternalRegion> future = reinitializingRegions.get(regionName);
-    future.set(region);
+    future.set((InternalRegion) region);
-    this.reinitializingRegions.remove(fullPath);
+    reinitializingRegions.remove(fullPath);
-    return this.copyOnRead;
+    return copyOnRead;
-    return this.copyOnRead;
+    return copyOnRead;
-    synchronized (this.rootRegions) {
+    synchronized (rootRegions) {
-      InternalRegion found = this.rootRegions.get(regionName);
+      InternalRegion found = rootRegions.get(regionName);
-        InternalRegion previous = this.rootRegions.remove(regionName);
+        InternalRegion previous = rootRegions.remove(regionName);
-    this.regionListeners.add(regionListener);
+    regionListeners.add(regionListener);
-    this.regionListeners.remove(regionListener);
+    regionListeners.remove(regionListener);
-    return Collections.unmodifiableSet(this.regionListeners);
+    return Collections.unmodifiableSet(regionListeners);
-    return clazz.cast(this.services.get(clazz));
+    return clazz.cast(services.get(clazz));
-    return Collections.unmodifiableCollection(this.services.values());
+    return Collections.unmodifiableCollection(services.values());
-    return this.transactionManager;
+    return transactionManager;
-    synchronized (this.ccpTimerMutex) {
-      if (this.ccpTimer != null) {
-        return this.ccpTimer;
+    synchronized (ccpTimerMutex) {
+      if (ccpTimer != null) {
+        return ccpTimer;
-      this.ccpTimer = new SystemTimer(getDistributedSystem(), true);
-      if (this.isClosing) {
-        this.ccpTimer.cancel(); // poison it, don't throw.
+      ccpTimer = new SystemTimer(getDistributedSystem(), true);
+      if (isClosing) {
+        ccpTimer.cancel(); // poison it, don't throw.
-      return this.ccpTimer;
+      return ccpTimer;
-    synchronized (this.ccpTimerMutex) {
-      if (this.ccpTimer != null) {
-        this.cancelCount++;
-        if (this.cancelCount == PURGE_INTERVAL) {
-          this.cancelCount = 0;
-          this.ccpTimer.timerPurge();
+    synchronized (ccpTimerMutex) {
+      if (ccpTimer != null) {
+        cancelCount++;
+        if (cancelCount == PURGE_INTERVAL) {
+          cancelCount = 0;
+          ccpTimer.timerPurge();
-    return this.expirationScheduler;
+    return expirationScheduler;
-    return this.transactionManager;
+    return transactionManager;
-    return this.eventThreadPool;
+    return eventThreadPool;
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    synchronized (this.allGatewaySendersLock) {
-      if (!this.allGatewaySenders.contains(sender)) {
+    synchronized (allGatewaySendersLock) {
+      if (!allGatewaySenders.contains(sender)) {
-        Set<GatewaySender> newSenders = new HashSet<>(this.allGatewaySenders.size() + 1);
-        if (!this.allGatewaySenders.isEmpty()) {
-          newSenders.addAll(this.allGatewaySenders);
+        Set<GatewaySender> newSenders = new HashSet<>(allGatewaySenders.size() + 1);
+        if (!allGatewaySenders.isEmpty()) {
+          newSenders.addAll(allGatewaySenders);
-        this.allGatewaySenders = Collections.unmodifiableSet(newSenders);
+        allGatewaySenders = Collections.unmodifiableSet(newSenders);
-    synchronized (this.rootRegions) {
+    synchronized (rootRegions) {
-      this.system.handleResourceEvent(ResourceEvent.GATEWAYSENDER_CREATE, sender);
+      system.handleResourceEvent(ResourceEvent.GATEWAYSENDER_CREATE, sender);
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
-    synchronized (this.allGatewaySendersLock) {
-      if (this.allGatewaySenders.contains(sender)) {
+    synchronized (allGatewaySendersLock) {
+      if (allGatewaySenders.contains(sender)) {
-        Set<GatewaySender> newSenders = new HashSet<>(this.allGatewaySenders.size() - 1);
-        if (!this.allGatewaySenders.isEmpty()) {
-          newSenders.addAll(this.allGatewaySenders);
+        Set<GatewaySender> newSenders = new HashSet<>(allGatewaySenders.size() - 1);
+        if (!allGatewaySenders.isEmpty()) {
+          newSenders.addAll(allGatewaySenders);
-        this.allGatewaySenders = Collections.unmodifiableSet(newSenders);
+        allGatewaySenders = Collections.unmodifiableSet(newSenders);
-      this.system.handleResourceEvent(ResourceEvent.GATEWAYSENDER_REMOVE, sender);
+      system.handleResourceEvent(ResourceEvent.GATEWAYSENDER_REMOVE, sender);
-    this.allAsyncEventQueues.add(asyncQueue);
+    allAsyncEventQueues.add(asyncQueue);
-      this.allVisibleAsyncEventQueues.add(asyncQueue);
+      allVisibleAsyncEventQueues.add(asyncQueue);
-    this.system.handleResourceEvent(ResourceEvent.ASYNCEVENTQUEUE_CREATE, asyncQueue);
+    system.handleResourceEvent(ResourceEvent.ASYNCEVENTQUEUE_CREATE, asyncQueue);
-    for (GatewaySender sender : this.allGatewaySenders) {
+    for (GatewaySender sender : allGatewaySenders) {
-    return this.allGatewaySenders;
+    return allGatewaySenders;
-    for (GatewaySender sender : this.allGatewaySenders) {
+    for (GatewaySender sender : allGatewaySenders) {
-    return visibleOnly ? this.allVisibleAsyncEventQueues : this.allAsyncEventQueues;
+    return visibleOnly ? allVisibleAsyncEventQueues : allAsyncEventQueues;
-    for (AsyncEventQueue asyncEventQueue : this.allAsyncEventQueues) {
+    for (AsyncEventQueue asyncEventQueue : allAsyncEventQueues) {
-    synchronized (this.allGatewaySendersLock) {
-      this.allAsyncEventQueues.remove(asyncQueue);
-      this.allVisibleAsyncEventQueues.remove(asyncQueue);
+    synchronized (allGatewaySendersLock) {
+      allAsyncEventQueues.remove(asyncQueue);
+      allVisibleAsyncEventQueues.remove(asyncQueue);
-    this.system.handleResourceEvent(ResourceEvent.ASYNCEVENTQUEUE_REMOVE, asyncQueue);
+    system.handleResourceEvent(ResourceEvent.ASYNCEVENTQUEUE_REMOVE, asyncQueue);
-    synchronized (this.allGatewayHubsLock) {
-      return this.gatewayConflictResolver;
+    synchronized (allGatewayHubsLock) {
+      return gatewayConflictResolver;
-    synchronized (this.allGatewayHubsLock) {
-      this.gatewayConflictResolver = resolver;
+    synchronized (allGatewayHubsLock) {
+      gatewayConflictResolver = resolver;
-    return this.unmodifiableAllCacheServers;
+    return unmodifiableAllCacheServers;
-    synchronized (this.partitionedRegions) {
+    synchronized (partitionedRegions) {
-      if (this.partitionedRegions.add(region)) {
+      if (partitionedRegions.add(region)) {
-    synchronized (this.partitionedRegions) {
-      return new HashSet<>(this.partitionedRegions);
+    synchronized (partitionedRegions) {
+      return new HashSet<>(partitionedRegions);
-        Map<String, PartitionedRegion> prSubMap = prTrees.get(rootName);
-        if (prSubMap == null) {
-          prSubMap = new TreeMap<>();
-          prTrees.put(rootName, prSubMap);
-        }
+        Map<String, PartitionedRegion> prSubMap =
+            prTrees.computeIfAbsent(rootName, k -> new TreeMap<>());
-    for (Entry<String, InternalRegion> entry : this.pathToRegion.entrySet()) {
+    for (Entry<String, InternalRegion> entry : pathToRegion.entrySet()) {
-      GatewaySender gatewaySender = this.getGatewaySender(sender);
+      GatewaySender gatewaySender = getGatewaySender(sender);
-    synchronized (this.partitionedRegions) {
-      if (this.partitionedRegions.remove(region)) {
+    synchronized (partitionedRegions) {
+      if (partitionedRegions.remove(region)) {
-    this.stopper.checkCancelInProgress(null);
+    stopper.checkCancelInProgress(null);
+  @SuppressWarnings("unchecked")
+  private static <K, V> Map<String, RegionAttributes<K, V>> uncheckedCast(
+      Map<String, RegionAttributes<?, ?>> namedRegionAttributes) {
+    return (Map) namedRegionAttributes;
+  }
+
-    return (RegionAttributes<K, V>) this.namedRegionAttributes.get(id);
+    return GemFireCacheImpl.<K, V>uncheckedCast(namedRegionAttributes).get(id);
-      this.namedRegionAttributes.remove(id);
+      namedRegionAttributes.remove(id);
-      this.namedRegionAttributes.put(id, attrs);
+      namedRegionAttributes.put(id, attrs);
-  public Map<String, RegionAttributes<?, ?>> listRegionAttributes() {
-    return Collections.unmodifiableMap(this.namedRegionAttributes);
+  public <K, V> Map<String, RegionAttributes<K, V>> listRegionAttributes() {
+    return Collections.unmodifiableMap(uncheckedCast(namedRegionAttributes));
-        reader = new BufferedReader(new InputStreamReader(is, "ISO-8859-1"));
+        reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.ISO_8859_1));
-        String replacedXmlString = this.resolver.processUnresolvableString(stringWriter.toString());
+        String replacedXmlString = resolver.processUnresolvableString(stringWriter.toString());
-        writer = new OutputStreamWriter(baos, "ISO-8859-1");
+        writer = new OutputStreamWriter(baos, StandardCharsets.ISO_8859_1);
-    PoolManagerImpl.readyForEvents(this.system, false);
+    PoolManagerImpl.readyForEvents(system, false);
-      this.stopper.checkCancelInProgress(null);
+      stopper.checkCancelInProgress(null);
-    return this.resourceManager;
+    return resourceManager;
-    this.backupFiles = backups;
+    backupFiles = backups;
-    return Collections.unmodifiableList(this.backupFiles);
+    return Collections.unmodifiableList(backupFiles);
-    if (GemFireCacheImpl.this.isClosing) {
+    if (isClosing) {
-    int numInProgress = this.registerInterestsInProgress.decrementAndGet();
+    int numInProgress = registerInterestsInProgress.decrementAndGet();
-      synchronized (this.riWaiters) {
+      synchronized (riWaiters) {
-        numInProgress = this.registerInterestsInProgress.get();
+        numInProgress = registerInterestsInProgress.get();
-          for (SimpleWaiter sw : this.riWaiters) {
+          for (SimpleWaiter sw : riWaiters) {
-          this.riWaiters.clear();
+          riWaiters.clear();
-    int newVal = this.registerInterestsInProgress.incrementAndGet();
+    int newVal = registerInterestsInProgress.incrementAndGet();
-    int count = this.registerInterestsInProgress.get();
+    int count = registerInterestsInProgress.get();
-      synchronized (this.riWaiters) {
+      synchronized (riWaiters) {
-        count = this.registerInterestsInProgress.get();
+        count = registerInterestsInProgress.get();
-          this.riWaiters.add(simpleWaiter);
+          riWaiters.add(simpleWaiter);
-    return this.queryMonitorDisabledForLowMem;
+    return queryMonitorDisabledForLowMem;
-        !this.queryMonitorDisabledForLowMem && queryMonitorRequiredForResourceManager;
+        !queryMonitorDisabledForLowMem && queryMonitorRequiredForResourceManager;
-    boolean needQueryMonitor = MAX_QUERY_EXECUTION_TIME > 0 || monitorRequired;
-    if (needQueryMonitor && this.queryMonitor == null) {
-      synchronized (this.queryMonitorLock) {
-        if (this.queryMonitor == null) {
+    if (queryMonitor == null) {
+      synchronized (queryMonitorLock) {
+        if (queryMonitor == null) {
-          this.queryMonitor =
+          queryMonitor =
-    return this.queryMonitor;
+    return queryMonitor;
-        while (!this.notified) {
+        while (!notified) {
-        this.notified = true;
+        notified = true;
-    Set otherMembers = this.dm.getOtherDistributionManagerIds();
+    Set<InternalDistributedMember> otherMembers = dm.getOtherDistributionManagerIds();
-      ReplyProcessor21 replyProcessor = new ReplyProcessor21(this.dm, otherMembers);
+      ReplyProcessor21 replyProcessor = new ReplyProcessor21(dm, otherMembers);
-      this.dm.putOutgoing(message);
+      dm.putOutgoing(message);
-    Set otherMembers = this.dm.getOtherDistributionManagerIds();
+    Set<InternalDistributedMember> otherMembers = dm.getOtherDistributionManagerIds();
-    Iterator memberIterator = otherMembers.iterator();
-    while (memberIterator.hasNext()) {
-      InternalDistributedMember member = (InternalDistributedMember) memberIterator.next();
-      if (Version.GEODE_1_5_0.compareTo(member.getVersionObject()) > 0) {
-        memberIterator.remove();
-      }
-    }
+    otherMembers.removeIf(member -> Version.GEODE_1_5_0.compareTo(member.getVersionObject()) > 0);
-      ReplyProcessor21 replyProcessor = new ReplyProcessor21(this.dm, otherMembers);
+      ReplyProcessor21 replyProcessor = new ReplyProcessor21(dm, otherMembers);
-      this.dm.putOutgoing(message);
+      dm.putOutgoing(message);
-    return this.transactionManager;
+    return transactionManager;
-    this.regionsInDestroy.putIfAbsent(path, region);
+    regionsInDestroy.putIfAbsent(path, region);
-    this.regionsInDestroy.remove(path, region);
+    regionsInDestroy.remove(path, region);
-    return this.regionsInDestroy.get(path);
+    return regionsInDestroy.get(path);
-    return this.tombstoneService;
+    return tombstoneService;
-    return this.pdxRegistry;
+    return pdxRegistry;
-    return this.cacheConfig.pdxReadSerialized;
+    return cacheConfig.pdxReadSerialized;
-    return this.cacheConfig.pdxSerializer;
+    return cacheConfig.pdxSerializer;
-    return this.cacheConfig.pdxDiskStore;
+    return cacheConfig.pdxDiskStore;
-    return this.cacheConfig.pdxPersistent;
+    return cacheConfig.pdxPersistent;
-    return this.cacheConfig.pdxIgnoreUnreadFields;
+    return cacheConfig.pdxIgnoreUnreadFields;
-    TypeRegistry pdxRegistry = this.getPdxRegistry();
+    TypeRegistry pdxRegistry = getPdxRegistry();
-    return this.cacheConfig;
+    return cacheConfig;
-    return this.dm;
+    return dm;
-    return this.resourceAdvisor;
+    return resourceAdvisor;
-    return this.resourceAdvisor.createProfile();
+    return resourceAdvisor.createProfile();
-    return this.system;
+    return system;
-    this.resourceManager.fillInProfile(profile);
+    resourceManager.fillInProfile(profile);
-    return this.serialNumber;
+    return serialNumber;
-    return this.txEntryStateFactory;
+    return txEntryStateFactory;
-    this.cacheConfig.setPdxSerializer(serializer);
+    cacheConfig.setPdxSerializer(serializer);
-    this.setPdxReadSerializedOverride(value);
+    setPdxReadSerializedOverride(value);
-    this.cacheConfig.setPdxReadSerialized(value);
+    cacheConfig.setPdxReadSerialized(value);
-    synchronized (this.declarablePropertiesMap) {
+    synchronized (declarablePropertiesMap) {
-        for (Entry<Declarable, Properties> oldEntry : this.declarablePropertiesMap.entrySet()) {
+        for (Entry<Declarable, Properties> oldEntry : declarablePropertiesMap.entrySet()) {
-              (Declarable oldKey, Declarable newKey) -> Identifiable.class.isInstance(newKey)
+              (Declarable oldKey, Declarable newKey) -> newKey instanceof Identifiable
-          this.declarablePropertiesMap.remove(matchingDeclarable);
+          declarablePropertiesMap.remove(matchingDeclarable);
-        this.declarablePropertiesMap.put(newEntry.getKey(), newEntry.getValue());
+        declarablePropertiesMap.put(newEntry.getKey(), newEntry.getValue());
-    return this.initializer;
+    return initializer;
-    return this.initializerProps;
+    return initializerProps;
-    return this.jmxAdvisor;
+    return jmxAdvisor;
-    return this.getSystem().getOffHeapStore();
+    return getSystem().getOffHeapStore();
-    return this.diskMonitor;
+    return diskMonitor;
-    return this.extensionPoint;
+    return extensionPoint;
-    return this.cqService;
+    return cqService;
-  public void addRegionEntrySynchronizationListener(RegionEntrySynchronizationListener listener) {
-    this.synchronizationListeners.add(listener);
-  }
-
-  public void removeRegionEntrySynchronizationListener(
-      RegionEntrySynchronizationListener listener) {
-    this.synchronizationListeners.remove(listener);
+  private void addRegionEntrySynchronizationListener(RegionEntrySynchronizationListener listener) {
+    synchronizationListeners.add(listener);
-    for (RegionEntrySynchronizationListener listener : this.synchronizationListeners) {
+    for (RegionEntrySynchronizationListener listener : synchronizationListeners) {
-            new Object[] {sender, region.getFullPath(), entriesToSynchronize}),
-            t);
+            sender, region.getFullPath(), entriesToSynchronize), t);
-      } else if (!this.getPdxReadSerialized()) {
+      } else if (!getPdxReadSerialized()) {
-    TypeRegistry pdxRegistry = this.getPdxRegistry();
+    TypeRegistry pdxRegistry = getPdxRegistry();
-    TypeRegistry pdxRegistry = this.getPdxRegistry();
+    TypeRegistry pdxRegistry = getPdxRegistry();
-    if (this.dm != null) {
-      return this.dm.getThreadMonitoring();
+    if (dm != null) {
+      return dm.getThreadMonitoring();

INS26 MOV31 INS40 INS31 INS31 INS31 INS74 MOV78 MOV78 UPD42 UPD42 MOV78 MOV78 MOV78 MOV44 MOV21 MOV78 MOV44 MOV78 MOV78 MOV74 MOV78 MOV74 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 INS79 INS83 INS83 INS73 INS73 INS74 INS42 INS44 INS8 MOV79 INS83 INS83 INS73 INS73 MOV74 INS42 INS44 INS8 INS79 MOV78 MOV78 MOV78 MOV44 MOV78 MOV78 MOV78 MOV44 MOV78 MOV44 MOV78 MOV44 MOV78 INS79 INS83 INS83 INS73 INS73 INS74 INS42 INS44 INS8 MOV78 INS73 INS73 MOV78 MOV73 MOV73 INS74 MOV78 MOV78 MOV78 MOV44 MOV44 MOV78 MOV44 MOV44 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 UPD83 MOV43 INS43 INS74 INS42 INS45 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS41 INS41 INS42 INS42 INS43 INS42 MOV41 INS42 INS45 MOV21 MOV21 INS25 MOV25 INS42 INS45 INS42 INS42 INS43 INS43 INS74 MOV74 INS42 INS41 INS42 INS42 INS43 INS43 MOV74 INS21 INS42 MOV43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 MOV38 MOV38 INS42 INS42 INS32 MOV11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS74 INS74 INS32 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS32 MOV43 INS43 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 MOV42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV33 MOV43 MOV43 MOV43 MOV43 MOV42 UPD42 MOV42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 MOV42 INS42 INS42 MOV42 MOV42 MOV43 INS42 UPD42 MOV42 INS42 MOV42 MOV42 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS59 MOV27 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV41 MOV41 INS42 MOV32 INS74 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS42 INS42 MOV21 INS42 UPD40 INS42 INS42 INS42 INS42 INS42 MOV74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 MOV12 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 MOV43 INS42 MOV43 INS42 INS42 MOV74 INS7 MOV74 INS42 INS42 MOV43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 MOV51 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS79 INS42 INS42 INS42 MOV12 INS7 INS42 MOV74 INS42 INS42 UPD42 INS86 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS59 MOV14 INS40 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 MOV43 INS42 INS42 INS42 INS42 INS42 MOV2 INS42 INS42 INS42 INS42 MOV8 INS42 INS42 INS42 MOV43 INS76 INS42 INS32 INS42 INS62 INS42 INS42 INS42 INS42 INS43 MOV43 INS42 INS42 MOV42 MOV42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS52 MOV32 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL52 DEL4 DEL3 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL11 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL45 DEL52 DEL42 DEL22 DEL45 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL42 DEL34 DEL27 DEL42 DEL27 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL27 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL57 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL52 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22