GEODE-77 fixes for failing unit and integration tests

  if the coordinator returned by locators doesn't work we now
  ask other members in the view returned by the locator

  leave & crash events now ack the view currently being installed
  so that it won't wait for the associated members

  views are always installed using the two-phase protocol.
  GemFire did this and some algorithms, such as rebalancing,
  are thrown off if departed members are in the view when
  a rebalance starts.

  views are always transmitted by the View Creator thread.
  GMSJoinLeave.becomeCoordinator() installs an initial view
  into the View Creator before starting it if there is a view
  to prepare and install.

  Rebalance operations targetting a new member were failing to
  achieve balance if an old ID for that member was still in the
  membership view.  We now detect those old IDs and remove them
  when the new member joins.

  ClientProxyMembershipID was not being deserialized properly
  after being transmitted from one member to another.

  HealthMonitor classes with Ping in their names are renamed to
  Check.  I've found that Ping confuses people - they
  sometimes think that gemfire is using network ping protocol

  HealthMonitor beSick/playDead were tightened up

  HealthMonitor was not recording activity from other members unless
  it was currently watching that member.  This caused a lot of
  unnecessary suspicion when switching from one member to another.

  HealthMonitor wasn't clear about who was raising suspicion and
  who was the target of the suspicion.

  FindCoordinatorRequest was using java serialization for rejected
  coordinator IDs.

  GMSMembershipManager's latestViewLock use wasn't quite the same
  as in the membership manager in GemFire 8.2 and caused a deadlock.

  fixing GEODE-360: PRTombstoneMessage should ignore
  ForceReattemptException

  LogFileParser wasn't recognizing timestamps for thread dumps, causing
  them to be mis-sorted when merging log files.

+import java.util.HashSet;
+import java.util.Set;
+import com.gemstone.gemfire.distributed.internal.DistributionManager;
+import com.gemstone.gemfire.distributed.internal.HighPriorityDistributionMessage;
+import com.gemstone.gemfire.distributed.internal.membership.NetView;
+import com.gemstone.gemfire.internal.InternalDataSerializer;
-public class FindCoordinatorResponse  implements DataSerializableFixedID {
+public class FindCoordinatorResponse  extends HighPriorityDistributionMessage
+    implements DataSerializableFixedID {
+  private InternalDistributedMember senderId;
-  private int viewId;
+  private NetView view;
+  private Set<InternalDistributedMember> registrants;
+  private boolean isShortForm;
-      boolean fromView, int viewId,
+      InternalDistributedMember senderId,
+      boolean fromView, NetView view, HashSet<InternalDistributedMember> registrants,
+    this.senderId = senderId;
-    this.viewId = viewId;
+    this.view = view;
+    this.registrants = registrants;
+    this.isShortForm = false;
+  }
+  
+  public FindCoordinatorResponse(InternalDistributedMember coordinator,
+      InternalDistributedMember senderId) {
+    this.coordinator = coordinator;
+    this.senderId = senderId;
+    this.isShortForm = true;
+  public InternalDistributedMember getSenderId() {
+    return senderId;
+  }
+  
-  public int getViewId() {
-    return viewId;
+  public NetView getView() {
+    return view;
+  }
+  
+  public Set<InternalDistributedMember> getRegistrants() {
+    return registrants;
-    return "FindCoordinatorResponse(coordinator="+coordinator+", fromView="+fromView+", viewId="+viewId
+    if (this.isShortForm) { 
+      return "FindCoordinatorResponse(coordinator="+coordinator+")";
+    } else {
+      return "FindCoordinatorResponse(coordinator="+coordinator+", fromView="+fromView+", viewId="+view.getViewId()
+        +", registrants=" + registrants.size()
+    }
-    out.writeInt(viewId);
+    DataSerializer.writeObject(senderId, out);
+    out.writeBoolean(isShortForm);
+    DataSerializer.writeObject(view, out);
+    InternalDataSerializer.writeSet(registrants, out);
-    viewId = in.readInt();
-    fromView = in.readBoolean();
-    networkPartitionDetectionEnabled = in.readBoolean();
-    usePreferredCoordinators = in.readBoolean();
+    senderId = DataSerializer.readObject(in);
+    isShortForm = in.readBoolean();
+    if (!isShortForm) {
+      fromView = in.readBoolean();
+      networkPartitionDetectionEnabled = in.readBoolean();
+      usePreferredCoordinators = in.readBoolean();
+      view = DataSerializer.readObject(in);
+      registrants = InternalDataSerializer.readHashSet(in);
+    }
+  }
+
+  @Override
+  protected void process(DistributionManager dm) {
+    throw new IllegalStateException("this message should not be executed");

INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 UPD39 INS44 INS44 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS43 UPD42 INS83 INS74 INS42 INS8 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 UPD42 INS43 INS42 INS43 UPD42 INS74 INS42 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS42 INS43 INS43 INS41 INS25 INS21 INS21 INS21 INS21 INS25 INS42 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS7 INS42 INS42 INS7 INS7 INS7 INS42 UPD42 INS42 INS42 INS42 INS22 INS8 INS8 INS32 INS32 INS32 INS7 INS38 INS8 INS42 INS14 INS42 INS42 INS22 INS42 UPD42 INS22 INS42 INS22 INS9 INS22 INS42 INS22 INS42 INS22 INS9 INS52 INS42 INS41 MOV41 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 MOV21 MOV21 MOV21 INS21 INS21 INS43 INS45 INS52 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS42 INS42 INS42 UPD42 INS7 INS7 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL39 DEL42 DEL8