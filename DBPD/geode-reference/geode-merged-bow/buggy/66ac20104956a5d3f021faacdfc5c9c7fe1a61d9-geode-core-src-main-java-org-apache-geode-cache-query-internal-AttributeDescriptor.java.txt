GEODE-6989: Cache OQL Authorized Methods (#4136)

The MethodDispatch and AttributeDescriptor classes now use the
QueryExecutionContext to cache the result of already authorized
methods; thus preventing the OQL engine from invoking the authorizer
for every object traversed and, instead, only invoke it once in the
lifetime of a query for every new method seen.
-  private final MethodInvocationAuthorizer _methodInvocationAuthorizer;
+  private final MethodInvocationAuthorizer _methodInvocationAuthorizer;
-  public Object read(Object target) throws NameNotFoundException, QueryInvocationTargetException {
+  public Object read(Object target, ExecutionContext executionContext)
+      throws NameNotFoundException, QueryInvocationTargetException {
-      return readPdx((InternalPdxInstance) target);
+      return readPdx((InternalPdxInstance) target, executionContext);
-    return readReflection(target);
+    return readReflection(target, executionContext);
-  Object readReflection(Object target)
+  Object readReflection(Object target, ExecutionContext executionContext)
-          if (!_methodInvocationAuthorizer.authorize((Method) m, target)) {
-            throw new NotAuthorizedException(UNAUTHORIZED_STRING + m.getName());
+          Method method = (Method) m;
+          // Try to use previous result so authorizer gets invoked only once per query.
+          boolean authorizationResult;
+          String cacheKey = target.getClass().getCanonicalName() + "." + method.getName();
+          Boolean cachedResult = (Boolean) executionContext.cacheGet(cacheKey);
+
+          if (cachedResult == null) {
+            // First time, evaluate and cache result.
+            authorizationResult = _methodInvocationAuthorizer.authorize(method, target);
+            executionContext.cachePut(cacheKey, authorizationResult);
+          } else {
+            // Use cached result.
+            authorizationResult = cachedResult;
-          return ((Method) m).invoke(target, (Object[]) null);
+          if (!authorizationResult) {
+            throw new NotAuthorizedException(UNAUTHORIZED_STRING + method.getName());
+          }
+
+          return method.invoke(target, (Object[]) null);
-  private Object readPdx(InternalPdxInstance pdxInstance)
+  private Object readPdx(InternalPdxInstance pdxInstance, ExecutionContext executionContext)
-          return readFieldFromDeserializedObject(pdxInstance);
+          return readFieldFromDeserializedObject(pdxInstance, executionContext);
-  private Object readFieldFromDeserializedObject(InternalPdxInstance pdxInstance)
+  private Object readFieldFromDeserializedObject(InternalPdxInstance pdxInstance,
+      ExecutionContext executionContext)
-    return readReflection(obj);
+    return readReflection(obj, executionContext);

MOV23 INS44 INS44 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS38 MOV8 INS42 INS42 MOV11 INS42 INS42 INS42 INS27 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS45 INS32 INS43 INS32 INS7 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 MOV42 UPD42 DEL32 DEL38 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36