This closes #220

GEODE-11: Added exception handling to lucene gfsh commands

Added exception handling to lucene search and describe gfsh commands to handle region not found, index not found and invalid query string exceptions.

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-11: gfsh lucene search command returns only keys

Added an option to the lucene search command to return only keys of the search results. Added dunit and junit tests to verify

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

-import java.io.IOException;
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-    final String[] groups = {};
-    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(describeIndexFunction, groups, indexInfo);
+    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(describeIndexFunction, new String[] {}, indexInfo);
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize)
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize,
+
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY,
+      mandatory = false,
+      unspecifiedDefaultValue = "false",
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly)
-      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit);
+      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
-      return displayResults(pageSize);
+      return displayResults(pageSize, keysOnly);
-      getCache().getLogger().error(t);
+      getCache().getLogger().info(t);
-  private Result displayResults(int pageSize) throws IOException {
+  private Result displayResults(int pageSize, boolean keysOnly) throws Exception {
-        CommandResult commandResult = (CommandResult) getResults(fromIndex, toIndex);
+        CommandResult commandResult = (CommandResult) getResults(fromIndex, toIndex, keysOnly);
-  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws CommandResultException {
+  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws Exception {
-    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(searchIndexFunction, groups, queryInfo);
+    final ResultCollector<?, ?> rc = this.executeSearch(queryInfo);
-  private Result getResults(int fromIndex, int toIndex){
+  private Result getResults(int fromIndex, int toIndex, boolean keysonly) throws Exception {
-      data.accumulate("key", searchResults.get(i).getKey());
-      data.accumulate("value", searchResults.get(i).getValue());
-      data.accumulate("score", searchResults.get(i).getScore());
+      if (!searchResults.get(i).getExeptionFlag()) {
+        data.accumulate("key", searchResults.get(i).getKey());
+        if (!keysonly) {
+          data.accumulate("value", searchResults.get(i).getValue());
+          data.accumulate("score", searchResults.get(i).getScore());
+        }
+      }
+      else {
+        throw new Exception(searchResults.get(i).getExceptionMessage());
+      }
-  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[]groups, final LuceneIndexInfo indexInfo) throws CommandResultException {
-    final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function,
+                                                          String[] groups,
+                                                          final LuceneIndexInfo indexInfo) throws Exception
+  {
+    final Set<DistributedMember> targetMembers;
+    if (function != createIndexFunction) {
+      targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(), indexInfo.getRegionPath());
+      if (targetMembers.isEmpty()) {
+        throw new Exception("Region not found.");
+      }
+    }
+    else {
+      targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+    }
-  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[]groups, final LuceneQueryInfo queryInfo) throws CommandResultException {
-    final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(groups, null);
-    return CliUtil.executeFunction(function, queryInfo, targetMembers);
+  protected ResultCollector<?, ?> executeSearch(final LuceneQueryInfo queryInfo) throws Exception {
+    final Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),queryInfo.getRegionPath());
+    if (targetMembers.isEmpty())
+      throw new Exception("Region not found.");
+    return CliUtil.executeFunction(searchIndexFunction, queryInfo, targetMembers);
-}
+}

INS44 INS44 UPD43 UPD43 INS44 INS43 UPD43 INS8 UPD42 INS43 INS8 INS77 INS39 INS42 INS39 INS42 UPD42 UPD42 INS39 INS42 INS42 UPD42 MOV60 INS25 MOV41 UPD42 MOV42 INS60 INS25 MOV41 INS42 INS80 INS80 INS80 INS80 INS8 INS27 INS8 INS8 INS83 MOV74 INS59 INS32 INS53 INS42 INS40 INS42 INS9 INS42 INS45 INS42 INS40 INS25 INS42 INS42 INS21 INS25 INS21 INS42 INS32 INS42 INS42 INS14 UPD42 INS3 MOV43 UPD42 INS38 MOV8 INS8 INS7 INS32 INS8 INS7 INS42 INS42 INS32 INS32 INS43 INS45 INS5 INS4 INS42 INS32 INS25 INS53 INS42 INS32 INS42 INS42 INS53 INS42 MOV32 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS43 INS85 MOV43 INS42 UPD42 MOV43 INS32 INS42 INS38 INS8 INS14 MOV42 UPD42 MOV42 INS32 INS32 INS14 INS42 INS42 INS42 INS42 INS42 MOV21 MOV21 INS43 INS32 UPD42 MOV42 INS42 INS42 INS43 INS45 MOV43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL59 DEL60 DEL42 DEL42 DEL42 DEL83 DEL42 DEL33 DEL32 DEL59 DEL60 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL8