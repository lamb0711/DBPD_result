GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

+import java.util.function.Supplier;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.cache.EntryEvent;
-import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.InternalRegion;
+import org.apache.geode.internal.cache.tier.OverflowAttributes;
- * Class <code>CacheClientNotifier</code> works on the server and manages client socket connections
+ * Class {@code CacheClientNotifier} works on the server and manages client socket connections
-@SuppressWarnings({"synthetic-access", "deprecation"})
-  private final SocketMessageWriter socketMessageWriter = new SocketMessageWriter();
-  private final ClientRegistrationEventQueueManager registrationQueueManager =
-      new ClientRegistrationEventQueueManager();
+  private final SocketMessageWriter socketMessageWriter = new SocketMessageWriter();
+  private final ClientRegistrationEventQueueManager registrationQueueManager =
+      new ClientRegistrationEventQueueManager();
+
-   * Factory method to construct a CacheClientNotifier <code>CacheClientNotifier</code> instance.
+   * Factory method to construct a CacheClientNotifier {@code CacheClientNotifier} instance.
-   * @param cache The GemFire <code>InternalCache</code>
-   * @return A <code>CacheClientNotifier</code> instance
+   * @param cache The GemFire {@code InternalCache}
+   * @return A {@code CacheClientNotifier} instance
-      ConnectionListener listener, List overflowAttributesList, boolean isGatewayReceiver) {
+      ConnectionListener listener, OverflowAttributes overflowAttributes,
+      boolean isGatewayReceiver) {
-      ccnSingleton.initHaContainer(overflowAttributesList);
+      ccnSingleton.initHaContainer(overflowAttributes);
-    long startTime = this.statistics.startTime();
+    long startTime = statistics.startTime();
-    } catch (final AuthenticationRequiredException ex) {
-      handleAuthenticationException(clientProxyMembershipID, dataOutputStream, clientVersion,
-          ex, Handshake.REPLY_EXCEPTION_AUTHENTICATION_REQUIRED);
-    } catch (final AuthenticationFailedException ex) {
+    } catch (AuthenticationRequiredException ex) {
+      handleAuthenticationException(clientProxyMembershipID, dataOutputStream, clientVersion, ex,
+          Handshake.REPLY_EXCEPTION_AUTHENTICATION_REQUIRED);
+    } catch (AuthenticationFailedException ex) {
-    } catch (final CacheException e) {
-      logger.warn(String.format("%s :registerClient: Exception encountered in registration %s",
-          this, e),
+    } catch (CacheException e) {
+      logger.warn(
+          String.format("%s :registerClient: Exception encountered in registration %s", this, e),
-      IOException ioException = new IOException(
-          String.format("Exception occurred while trying to register interest due to : %s",
-              e.getMessage()),
-          e);
-      throw ioException;
-    } catch (final Exception ex) {
+      throw new IOException(String.format(
+          "Exception occurred while trying to register interest due to : %s", e.getMessage()), e);
+    } catch (Exception ex) {
-          (clientProxyMembershipID != null
-              ? clientProxyMembershipID : "unknown")),
-          ex);
+          clientProxyMembershipID != null ? clientProxyMembershipID : "unknown"), ex);
-          CommunicationMode.UnsuccessfulServerToClient.getModeNumber(),
-          ex,
-          clientVersion);
+          CommunicationMode.UnsuccessfulServerToClient.getModeNumber(), ex, clientVersion);
-    this.statistics.endClientRegistration(startTime);
+    statistics.endClientRegistration(startTime);
-    String unsuccessfulMsg = null;
+    String unsuccessfulMsg = null;
-                acceptorId, notifyBySubscription, this.cache.getSecurityService(), subject);
-        successful = this.initializeProxy(cacheClientProxy);
+                acceptorId, notifyBySubscription, cache.getSecurityService(), subject);
+        successful = initializeProxy(cacheClientProxy);
-              this.statistics.incDurableReconnectionCount();
+              statistics.incDurableReconnectionCount();
-              cacheClientProxy.reinitialize(socket, clientProxyMembershipID, this.getCache(),
+              cacheClientProxy.reinitialize(socket, clientProxyMembershipID, getCache(),
-                  new Object[] {clientProxyMembershipID.getDurableId(), cacheClientProxy});
+                  clientProxyMembershipID.getDurableId(), cacheClientProxy);
-      CacheClientProxy staleClientProxy = this.getClientProxy(clientProxyMembershipID);
+      CacheClientProxy staleClientProxy = getClientProxy(clientProxyMembershipID);
-              clientVersion,
-              acceptorId, notifyBySubscription, this.cache.getSecurityService(), subject);
-      successful = this.initializeProxy(cacheClientProxy);
+              clientVersion, acceptorId, notifyBySubscription, cache.getSecurityService(), subject);
+      successful = initializeProxy(cacheClientProxy);
-              new Object[] {clientProxyMembershipID});
+              clientProxyMembershipID);
-        boolean keepProxy = cacheClientProxy.close(false, false); // do not check for queue, just
-                                                                  // close it
+        // do not check for queue, just close it
+        boolean keepProxy = cacheClientProxy.close(false, false);
-      final DataOutputStream dataOutputStream,
-      final Version clientVersion,
-      final GemFireSecurityException ex,
-      final byte replyExceptionAuthenticationFailed)
+      final DataOutputStream dataOutputStream, final Version clientVersion,
+      final GemFireSecurityException ex, final byte replyExceptionAuthenticationFailed)
-  private boolean initializeProxy(CacheClientProxy l_proxy) throws IOException, CacheException {
-    boolean status = false;
-    if (!this.isProxyInInitializationMode(l_proxy)) {
+  private boolean initializeProxy(CacheClientProxy l_proxy) throws CacheException {
+    if (!isProxyInInitializationMode(l_proxy)) {
+    boolean status = false;
-   *
-      // Close the port if the proxy represents the client and contains the
-      // port)
-      // // If so, remove the port from the client's remote ports
-      // proxy.removePort(clientPort);
-      // Set the keepalive flag
-  public void unregisterClient(ClientProxyMembershipID memberId, boolean normalShutdown) {
+  void unregisterClient(ClientProxyMembershipID memberId, boolean normalShutdown) {
-    if (proxy == null) {
-      // TODO: log a message
-    } else {
+    if (proxy != null) {
-          new Object[] {operation, event}),
+          operation, event),
-    if ((filterInfo == null
-        || (filterInfo.getCQs() == null && filterInfo.getInterestedClients() == null
-            && filterInfo.getInterestedClientsInv() == null))) {
+    if (filterInfo == null
+        || filterInfo.getCQs() == null && filterInfo.getInterestedClients() == null
+            && filterInfo.getInterestedClientsInv() == null) {
-    long startTime = this.statistics.startTime();
+    long startTime = statistics.startTime();
-    FilterProfile regionProfile = ((LocalRegion) event.getRegion()).getFilterProfile();
+    FilterProfile regionProfile = ((InternalRegion) event.getRegion()).getFilterProfile();
-      // bug #46832 - HAEventWrapper deserialization can't handle subclasses
-      // of ClientUpdateMessageImpl, so don't wrap them
+      // HAEventWrapper deserialization can't handle subclasses of ClientUpdateMessageImpl, so don't
+      // wrap them
-      // ClientTombstoneMessage. Fix for #46591.
+      // ClientTombstoneMessage
-            "Initial increment PutInProgressCounter on HAEventWrapper with Event ID hash code: "
-                + wrapper.hashCode() + "; System ID hash code: "
-                + System.identityHashCode(wrapper) + "; Wrapper details: " + wrapper);
+            "Initial increment PutInProgressCounter on HAEventWrapper with Event ID hash code: {}; System ID hash code: {}; Wrapper details: {}",
+            +wrapper.hashCode(), System.identityHashCode(wrapper), wrapper);
-    this.statistics.endEvent(startTime);
+    statistics.endEvent(startTime);
-      Set<Object> rawIDs =
-          regionProfile.getRealClientIDs(filterInfo.getInterestedClientsInv());
-      Set<ClientProxyMembershipID> ids = getProxyIDs(rawIDs, true);
+      Set<Object> rawIDs = regionProfile.getRealClientIDs(filterInfo.getInterestedClientsInv());
+      Set<ClientProxyMembershipID> ids = getProxyIDs(rawIDs);
-      Set<ClientProxyMembershipID> ids = getProxyIDs(rawIDs, true);
+      Set<ClientProxyMembershipID> ids = getProxyIDs(rawIDs);
-      ClientProxyMembershipID clientProxyMembershipID)
-      throws IOException {
+      ClientProxyMembershipID clientProxyMembershipID) throws IOException {
-    if (ids.remove(event.getContext())) { // don't send to member of origin
+    // don't send to member of origin
+    if (ids.remove(event.getContext())) {
-    FilterProfile regionProfile = ((LocalRegion) event.getRegion()).getFilterProfile();
+    FilterProfile regionProfile = ((InternalRegion) event.getRegion()).getFilterProfile();
-      EntryEventImpl entryEvent = (EntryEventImpl) event;
+      EntryEvent entryEvent = (EntryEvent) event;
-          if (cq != null && e.getValue().equals(Integer.valueOf(MessageType.LOCAL_DESTROY))) {
+          if (cq != null && e.getValue().equals(MessageType.LOCAL_DESTROY)) {
-        if (postAuthzFactoryName != null && postAuthzFactoryName.length() > 0) {
+        if (postAuthzFactoryName != null && !postAuthzFactoryName.isEmpty()) {
-          authzCallback.init(principal, member, this.getCache());
+          authzCallback.init(principal, member, getCache());
-      final DistributedMember member,
-      final DistributedSystem system, final String authenticator) {
+      final DistributedMember member, final DistributedSystem system, final String authenticator) {
-              this.logWriter, this.securityLogWriter, member,
-              this.cache.getSecurityService());
+              logWriter, securityLogWriter, member,
+              cache.getSecurityService());
-      instance.singletonRouteClientMessage(clientMessage, instance._clientProxies.keySet()); // ok
-                                                                                             // to
-                                                                                             // use
-                                                                                             // keySet
-                                                                                             // here
-                                                                                             // because
-                                                                                             // all
-                                                                                             // we
-                                                                                             // do
-                                                                                             // is
-                                                                                             // call
-                                                                                             // getClientProxy
-                                                                                             // with
-                                                                                             // these
-                                                                                             // keys
+      // ok to use keySet here because all we do is call getClientProxy with these keys
+      instance.singletonRouteClientMessage(clientMessage, instance._clientProxies.keySet());
-  public static void routeSingleClientMessage(ClientUpdateMessage clientMessage,
+  static void routeSingleClientMessage(ClientUpdateMessage clientMessage,
-    this.cache.getCancelCriterion().checkCancelInProgress(null); // bug #43942 - client notified
-                                                                 // but no p2p distribution
+    cache.getCancelCriterion().checkCancelInProgress(null);
-      proxy = this.getClientProxy(clientId, true);
+      proxy = getClientProxy(clientId, true);
-            deadProxies = new ArrayList<CacheClientProxy>();
+            deadProxies = new ArrayList<>();
-        this.denyListSlowReceiver(proxy);
+        denyListSlowReceiver(proxy);
-  public Set<ClientProxyMembershipID> getProxyIDs(Set mixedDurableAndNonDurableIDs) {
-    return getProxyIDs(mixedDurableAndNonDurableIDs, false);
-  }
-
-  /**
-   * processes the given collection of durable and non-durable client identifiers, returning a
-   * collection of non-durable identifiers of clients connected to this VM. This version can check
-   * for proxies in initialization as well as fully initialized proxies.
-   */
-  public Set<ClientProxyMembershipID> getProxyIDs(Set mixedDurableAndNonDurableIDs,
-      boolean proxyInInitMode) {
-    Set<ClientProxyMembershipID> result = new HashSet();
+  Set<ClientProxyMembershipID> getProxyIDs(Set mixedDurableAndNonDurableIDs) {
+    Set<ClientProxyMembershipID> result = new HashSet<>();
-        } else {
-          // this was causing OOMEs in HARegion initial image processing because
-          // messages had routing for clients unknown to this server
-          // result.add((ClientProxyMembershipID)id);
-    if ((proxy.getHARegionQueue() != null && proxy.getHARegionQueue().isClientSlowReceiver())
+    if (proxy.getHARegionQueue() != null && proxy.getHARegionQueue().isClientSlowReceiver()
-          (InternalDistributedSystem) this.getCache().getDistributedSystem();
+          (InternalDistributedSystem) getCache().getDistributedSystem();
-      dm.getWaitingThreadPool().execute(new Runnable() {
-        @Override
-        public void run() {
+      dm.getWaitingThreadPool().execute(() -> {
-          CacheDistributionAdvisor advisor =
-              ((DistributedRegion) proxy.getHARegionQueue().getRegion())
-                  .getCacheDistributionAdvisor();
-          Set members = advisor.adviseCacheOp();
+        CacheDistributionAdvisor advisor =
+            proxy.getHARegionQueue().getRegion().getCacheDistributionAdvisor();
+        Set members = advisor.adviseCacheOp();
-          // Send client denylist message
-          ClientDenylistProcessor.sendDenylistedClient(proxy.getProxyID(), dm, members);
+        // Send client denylist message
+        ClientDenylistProcessor.sendDenylistedClient(proxy.getProxyID(), dm, members);
-          // close the proxy for slow receiver.
-          proxy.close(false, false);
-          removeClientProxy(proxy);
+        // close the proxy for slow receiver.
+        proxy.close(false, false);
+        removeClientProxy(proxy);
-          if (PoolImpl.AFTER_QUEUE_DESTROY_MESSAGE_FLAG) {
-            ClientServerObserver bo = ClientServerObserverHolder.getInstance();
-            bo.afterQueueDestroyMessage();
-          }
-
-          // send remove from denylist.
-          RemoveClientFromDenylistMessage rcm = new RemoveClientFromDenylistMessage();
-          rcm.setProxyID(proxy.getProxyID());
-          dm.putOutgoing(rcm);
-          denyListedClients.remove(proxy.getProxyID());
+        if (PoolImpl.AFTER_QUEUE_DESTROY_MESSAGE_FLAG) {
+          ClientServerObserver bo = ClientServerObserverHolder.getInstance();
+          bo.afterQueueDestroyMessage();
+
+        // send remove from denylist.
+        RemoveClientFromDenylistMessage rcm = new RemoveClientFromDenylistMessage();
+        rcm.setProxyID(proxy.getProxyID());
+        dm.putOutgoing(rcm);
+        denyListedClients.remove(proxy.getProxyID());
-   * Initializes a <code>ClientUpdateMessage</code> from an operation and event
+   * Initializes a {@code ClientUpdateMessage} from an operation and event
-   * @return a <code>ClientUpdateMessage</code>
+   * @return a {@code ClientUpdateMessage}
-    // String regionName = event.getRegion().getFullPath();
-    Object callbackArgument = null;
+    Object callbackArgument;
-   * Returns whether the <code>CacheClientNotifier</code> supports the input operation.
+   * Returns whether the {@code CacheClientNotifier} supports the input operation.
-   * @return whether the <code>CacheClientNotifier</code> supports the input operation
+   * @return whether the {@code CacheClientNotifier} supports the input operation
-  protected boolean supportsOperation(EnumListenerEvent operation) {
+  private boolean supportsOperation(EnumListenerEvent operation) {
-        regionsWithEmptyDataPolicy.put(regionName, Integer.valueOf(0));
+        regionsWithEmptyDataPolicy.put(regionName, 0);
-   * @param membershipID The <code>ClientProxyMembershipID</code> of the client no longer interested
-   *        in this <code>Region</code> and key
+   * @param membershipID The {@code ClientProxyMembershipID} of the client no longer interested
+   *        in this {@code Region} and key
-   * @param membershipID The <code>ClientProxyMembershipID</code> of the client no longer interested
-   *        in this <code>Region</code> and key
+   * @param membershipID The {@code ClientProxyMembershipID} of the client no longer interested
+   *        in this {@code Region} and key
-   * @param membershipID The <code>ClientProxyMembershipID</code> of the client no longer interested
-   *        in this <code>Region</code> and key
+   * @param membershipID The {@code ClientProxyMembershipID} of the client no longer interested
+   *        in this {@code Region} and key
-   * Returns the <code>CacheClientProxy</code> associated to the membershipID *
+   * Returns the {@code CacheClientProxy} associated to the membershipID *
-   * @return the <code>CacheClientProxy</code> associated to the membershipID
+   * @return the {@code CacheClientProxy} associated to the membershipID
-    return (CacheClientProxy) this._clientProxies.get(membershipID);
+    return (CacheClientProxy) _clientProxies.get(membershipID);
-      proxy = (CacheClientProxy) this._initClientProxies.get(membershipID);
+      proxy = (CacheClientProxy) _initClientProxies.get(membershipID);
-   * Returns the <code>CacheClientProxy</code> associated to the durableClientId
+   * Returns the {@code CacheClientProxy} associated to the durableClientId
-   * @return the <code>CacheClientProxy</code> associated to the durableClientId
+   * @return the {@code CacheClientProxy} associated to the durableClientId
-   * Returns the <code>CacheClientProxy</code> associated to the durableClientId. This version of
+   * Returns the {@code CacheClientProxy} associated to the durableClientId. This version of
-   * @return the <code>CacheClientProxy</code> associated to the durableClientId
+   * @return the {@code CacheClientProxy} associated to the durableClientId
-    for (Iterator i = getClientProxies().iterator(); i.hasNext();) {
-      CacheClientProxy clientProxy = (CacheClientProxy) i.next();
+    for (CacheClientProxy clientProxy : getClientProxies()) {
-      for (Iterator i = this._initClientProxies.values().iterator(); i.hasNext();) {
-        CacheClientProxy clientProxy = (CacheClientProxy) i.next();
+      for (Object o : _initClientProxies.values()) {
+        CacheClientProxy clientProxy = (CacheClientProxy) o;
-   * Returns the <code>CacheClientProxySameDS</code> associated to the membershipID *
-   *
-   * @return the <code>CacheClientProxy</code> associated to the same distributed system
-   */
-  public CacheClientProxy getClientProxySameDS(ClientProxyMembershipID membershipID) {
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    if (isDebugEnabled) {
-      logger.debug("{}::getClientProxySameDS(), Determining client for host {}", this,
-          membershipID);
-      logger.debug("{}::getClientProxySameDS(), Number of proxies in the Cache Clinet Notifier: {}",
-          this, getClientProxies().size());
-    }
-    CacheClientProxy proxy = null;
-    for (Iterator i = getClientProxies().iterator(); i.hasNext();) {
-      CacheClientProxy clientProxy = (CacheClientProxy) i.next();
-      if (isDebugEnabled) {
-        logger.debug("CacheClientNotifier: Checking client {}", clientProxy);
-      }
-      if (clientProxy.isSameDSMember(membershipID)) {
-        proxy = clientProxy;
-        if (isDebugEnabled) {
-          logger.debug("CacheClientNotifier: {} represents the client running on host {}", proxy,
-              membershipID);
-        }
-        break;
-      }
-    }
-    return proxy;
-  }
-
-  /**
-          this.getCache().getCacheServers().size());
+          getCache().getCacheServers().size());
-    Iterator it = this._clientProxies.values().iterator();
+    Iterator it = _clientProxies.values().iterator();
-      this.clearCompiledQueries();
+      clearCompiledQueries();
-      this.clientPingTask.cancel();
+      clientPingTask.cancel();
-      this.statistics.close();
+      statistics.close();
-      this.socketCloser.close();
+      socketCloser.close();
-    for (CacheServer server : this.getCache().getCacheServers()) {
+    for (CacheServer server : getCache().getCacheServers()) {
-   * Adds a new <code>CacheClientProxy</code> to the list of known client proxies
+   * Adds a new {@code CacheClientProxy} to the list of known client proxies
-   * @param proxy The <code>CacheClientProxy</code> to add
+   * @param proxy The {@code CacheClientProxy} to add
-  protected void addClientProxy(CacheClientProxy proxy) throws IOException {
-    // this._logger.info(String.format("%s", "adding client proxy " + proxy));
+  void addClientProxy(CacheClientProxy proxy) {
-    this._clientProxies.put(proxy.getProxyID(), proxy);
+    _clientProxies.put(proxy.getProxyID(), proxy);
-    this._connectionListener.queueAdded(proxy.getProxyID());
+    _connectionListener.queueAdded(proxy.getProxyID());
-       * #41788 - If the client connection init starts while cache/member is shutting down,
+       * If the client connection init starts while cache/member is shutting down,
-    this.timedOutDurableClientProxies.remove(proxy.getProxyID());
+    timedOutDurableClientProxies.remove(proxy.getProxyID());
-  protected void addClientInitProxy(CacheClientProxy proxy) throws IOException {
-    this._initClientProxies.put(proxy.getProxyID(), proxy);
+  void addClientInitProxy(CacheClientProxy proxy) {
+    _initClientProxies.put(proxy.getProxyID(), proxy);
-  protected void removeClientInitProxy(CacheClientProxy proxy) throws IOException {
-    this._initClientProxies.remove(proxy.getProxyID());
+  private void removeClientInitProxy(CacheClientProxy proxy) {
+    _initClientProxies.remove(proxy.getProxyID());
-  protected boolean isProxyInInitializationMode(CacheClientProxy proxy) throws IOException {
-    return this._initClientProxies.containsKey(proxy.getProxyID());
+  private boolean isProxyInInitializationMode(CacheClientProxy proxy) {
+    return _initClientProxies.containsKey(proxy.getProxyID());
-    for (Iterator iter = getClientProxies().iterator(); iter.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) iter.next();
+    for (CacheClientProxy proxy : getClientProxies()) {
-    for (Iterator iter = this._clientProxies.values().iterator(); iter.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) iter.next();
+    for (Object o : _clientProxies.values()) {
+      CacheClientProxy proxy = (CacheClientProxy) o;
-    for (Iterator iter = this._clientProxies.values().iterator(); iter.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) iter.next();
+    for (Object o : _clientProxies.values()) {
+      CacheClientProxy proxy = (CacheClientProxy) o;
-    for (Iterator iter = this._clientProxies.values().iterator(); iter.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) iter.next();
+    for (Object o : _clientProxies.values()) {
+      CacheClientProxy proxy = (CacheClientProxy) o;
-        if (proxy.isPrimary()) {
-          return true;
-        } else {
-          return false;
-        }
+        return proxy.isPrimary();
-    for (Iterator iter = this._clientProxies.values().iterator(); iter.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) iter.next();
-      queueSizes.put(proxy.getProxyID(), Integer.valueOf(proxy.getQueueSize()));
+    for (Object o : _clientProxies.values()) {
+      CacheClientProxy proxy = (CacheClientProxy) o;
+      queueSizes.put(proxy.getProxyID(), proxy.getQueueSize());
-   * Removes an existing <code>CacheClientProxy</code> from the list of known client proxies
+   * Removes an existing {@code CacheClientProxy} from the list of known client proxies
-   * @param proxy The <code>CacheClientProxy</code> to remove
+   * @param proxy The {@code CacheClientProxy} to remove
-  protected void removeClientProxy(CacheClientProxy proxy) {
-    // this._logger.info(String.format("%s", "removing client proxy " + proxy, new
-    // Exception("stack trace")));
+  void removeClientProxy(CacheClientProxy proxy) {
-    this._clientProxies.remove(client);
-    this._connectionListener.queueRemoved();
-    this.getCache().cleanupForClient(this, client);
+    _clientProxies.remove(client);
+    _connectionListener.queueRemoved();
+    getCache().cleanupForClient(this, client);
-    this.timedOutDurableClientProxies.add(client);
+    timedOutDurableClientProxies.add(client);
-  public boolean isTimedOut(ClientProxyMembershipID client) {
-    return this.timedOutDurableClientProxies.contains(client);
+  private boolean isTimedOut(ClientProxyMembershipID client) {
+    return timedOutDurableClientProxies.contains(client);
-   * Returns an unmodifiable Collection of known <code>CacheClientProxy</code> instances. The
+   * Returns an unmodifiable Collection of known {@code CacheClientProxy} instances. The
-   * @return the collection of known <code>CacheClientProxy</code> instances
+   * @return the collection of known {@code CacheClientProxy} instances
-    return Collections.unmodifiableCollection(this._clientProxies.values());
+    return Collections.unmodifiableCollection(_clientProxies.values());
-        logger.warn("Unable to close CQs for the client: {}",
-            proxy.getProxyID());
+        logger.warn("Unable to close CQs for the client: {}", proxy.getProxyID());
-          e1.printStackTrace();
+          logger.debug(e1.getMessage(), e1);
-    } else {
-      if (logger.isDebugEnabled()) {
-        logger.debug("Cannot close running durable client: {}", durableClientId);
-      }
-      // TODO: never throw an anonymous inner class
-      throw new CacheException("Cannot close a running durable client : " + durableClientId) {};
+    if (logger.isDebugEnabled()) {
+      logger.debug("Cannot close running durable client: {}", durableClientId);
+    }
+    // TODO: never throw an anonymous inner class
+    throw new CacheException("Cannot close a running durable client : " + durableClientId) {};
-   * Close dead <code>CacheClientProxy</code> instances
+   * Close dead {@code CacheClientProxy} instances
-   * @param deadProxies The list of <code>CacheClientProxy</code> instances to close
+   * @param deadProxies The list of {@code CacheClientProxy} instances to close
-    for (Iterator i = deadProxies.iterator(); i.hasNext();) {
-      CacheClientProxy proxy = (CacheClientProxy) i.next();
-      if (isDebugEnabled)
+    for (Object deadProxy : deadProxies) {
+      CacheClientProxy proxy = (CacheClientProxy) deadProxy;
+      if (isDebugEnabled) {
+      }
-      // Remove the proxy if necessary. It might not be necessary to remove the
-      // proxy if it is durable.
+      // Remove the proxy if necessary. It might not be necessary to remove the proxy if it is
+      // durable.
-            new Object[] {proxy.getDurableId(), Integer.valueOf(proxy.getDurableTimeout()),
-                proxy});
+            proxy.getDurableId(), proxy.getDurableTimeout(), proxy);
-   * Registers a new <code>InterestRegistrationListener</code> with the set of
-   * <code>InterestRegistrationListener</code>s.
+   * Registers a new {@code InterestRegistrationListener} with the set of
+   * {@code InterestRegistrationListener}s.
-   * @param listener The <code>InterestRegistrationListener</code> to register
+   * @param listener The {@code InterestRegistrationListener} to register
-    this.writableInterestRegistrationListeners.add(listener);
+    writableInterestRegistrationListeners.add(listener);
-   * Unregisters an existing <code>InterestRegistrationListener</code> from the set of
-   * <code>InterestRegistrationListener</code>s.
+   * Unregisters an existing {@code InterestRegistrationListener} from the set of
+   * {@code InterestRegistrationListener}s.
-   * @param listener The <code>InterestRegistrationListener</code> to unregister
+   * @param listener The {@code InterestRegistrationListener} to unregister
-    this.writableInterestRegistrationListeners.remove(listener);
+    writableInterestRegistrationListeners.remove(listener);
-   * Returns a read-only collection of <code>InterestRegistrationListener</code>s registered with
+   * Returns a read-only collection of {@code InterestRegistrationListener}s registered with
-   * @return a read-only collection of <code>InterestRegistrationListener</code>s registered with
+   * @return a read-only collection of {@code InterestRegistrationListener}s registered with
-    return this.readableInterestRegistrationListeners;
+    return readableInterestRegistrationListeners;
-   *
-  protected boolean containsInterestRegistrationListeners() {
-    return !this.writableInterestRegistrationListeners.isEmpty();
+  boolean containsInterestRegistrationListeners() {
+    return !writableInterestRegistrationListeners.isEmpty();
-   *
-  protected void notifyInterestRegistrationListeners(InterestRegistrationEvent event) {
-    for (Iterator i = this.writableInterestRegistrationListeners.iterator(); i.hasNext();) {
-      InterestRegistrationListener listener = (InterestRegistrationListener) i.next();
+  void notifyInterestRegistrationListeners(InterestRegistrationEvent event) {
+    for (Object writableInterestRegistrationListener : writableInterestRegistrationListeners) {
+      InterestRegistrationListener listener =
+          (InterestRegistrationListener) writableInterestRegistrationListener;
-    return this.statistics;
+    return statistics;
-   * Returns this <code>CacheClientNotifier</code>'s <code>InternalCache</code>.
-   *
-   * @return this <code>CacheClientNotifier</code>'s <code>InternalCache</code>
+   * Returns this {@code CacheClientNotifier}'s {@code InternalCache}.
-  protected InternalCache getCache() { // TODO:SYNC: looks wrong
-    if (this.cache != null && this.cache.isClosed()) {
+  protected InternalCache getCache() {
+    if (cache != null && cache.isClosed()) {
-        this.logWriter = cache.getInternalLogWriter();
-        this.securityLogWriter = cache.getSecurityInternalLogWriter();
+        logWriter = cache.getInternalLogWriter();
+        securityLogWriter = cache.getSecurityInternalLogWriter();
-    return this.cache;
+    return cache;
-   * Returns this <code>CacheClientNotifier</code>'s maximum message count.
+   * Returns this {@code CacheClientNotifier}'s maximum message count.
-   * @return this <code>CacheClientNotifier</code>'s maximum message count
+   * @return this {@code CacheClientNotifier}'s maximum message count
-    return this.maximumMessageCount;
+    return maximumMessageCount;
-   * Returns this <code>CacheClientNotifier</code>'s message time-to-live.
+   * Returns this {@code CacheClientNotifier}'s message time-to-live.
-   * @return this <code>CacheClientNotifier</code>'s message time-to-live
+   * @return this {@code CacheClientNotifier}'s message time-to-live
-    return this.messageTimeToLive;
+    return messageTimeToLive;
-   * @param cache The GemFire <code>InternalCache</code>
+   * @param cache The GemFire {@code InternalCache}
-   *        removed.
-    this.socketCloser = new SocketCloser(1, 50); // we only need one thread per client and wait 50ms
-                                                 // for close
+    // we only need one thread per client and wait 50ms for close
+    socketCloser = new SocketCloser(1, 50);
-    this.logWriter = (InternalLogWriter) cache.getLogger();
+    logWriter = (InternalLogWriter) cache.getLogger();
-    this._connectionListener = listener;
+    _connectionListener = listener;
-    this.securityLogWriter = (InternalLogWriter) cache.getSecurityLogger();
+    securityLogWriter = (InternalLogWriter) cache.getSecurityLogger();
-      factory = this.getCache().getDistributedSystem();
+      factory = getCache().getInternalDistributedSystem().getStatisticsManager();
-    this.statistics = new CacheClientNotifierStats(factory);
+    statistics = new CacheClientNotifierStats(factory);
-      this.logFrequency = Long.valueOf(System.getProperty(MAX_QUEUE_LOG_FREQUENCY));
-      if (this.logFrequency <= 0) {
-        this.logFrequency = DEFAULT_LOG_FREQUENCY;
+      logFrequency = Long.valueOf(System.getProperty(MAX_QUEUE_LOG_FREQUENCY));
+      if (logFrequency <= 0) {
+        logFrequency = DEFAULT_LOG_FREQUENCY;
-      this.logFrequency = DEFAULT_LOG_FREQUENCY;
+      logFrequency = DEFAULT_LOG_FREQUENCY;
-  protected void deliverInterestChange(ClientProxyMembershipID proxyID,
+  void deliverInterestChange(ClientProxyMembershipID proxyID,
-    DistributionManager dm = ((InternalDistributedSystem) this.getCache().getDistributedSystem())
+    DistributionManager dm = ((InternalDistributedSystem) getCache().getDistributedSystem())
-  public CacheServerStats getAcceptorStats() {
-    return this.acceptorStats;
+  CacheServerStats getAcceptorStats() {
+    return acceptorStats;
-  public SocketCloser getSocketCloser() {
-    return this.socketCloser;
+  SocketCloser getSocketCloser() {
+    return socketCloser;
-    if (this.compiledQueries.putIfAbsent(query.getQueryString(), query) == null) {
+    if (compiledQueries.putIfAbsent(query.getQueryString(), query) == null) {
-      this.statistics.incCompiledQueryCount(1);
+      statistics.incCompiledQueryCount(1);
-            query.getQueryString(), this.statistics.getCompiledQueryCount());
+            query.getQueryString(), statistics.getCompiledQueryCount());
-    return this.compiledQueries.get(queryString);
+    return compiledQueries.get(queryString);
-    if (this.compiledQueries.size() > 0) {
-      this.statistics.incCompiledQueryCount(-(this.compiledQueries.size()));
-      this.compiledQueries.clear();
+    if (!compiledQueries.isEmpty()) {
+      statistics.incCompiledQueryCount(-compiledQueries.size());
+      compiledQueries.clear();
-            this.statistics.getCompiledQueryCount());
+            statistics.getCompiledQueryCount());
-  protected void scheduleClientPingTask() {
-    this.clientPingTask = new SystemTimer.SystemTimerTask() {
+  void scheduleClientPingTask() {
+    clientPingTask = new SystemTimer.SystemTimerTask() {
-        if (CacheClientNotifier.this._clientProxies.isEmpty()) {
+        if (_clientProxies.isEmpty()) {
-    CacheClientNotifier.this.cache.getCCPTimer().scheduleAtFixedRate(this.clientPingTask,
+    cache.getCCPTimer().scheduleAtFixedRate(clientPingTask,
-   * A string representing all hosts used for delivery purposes.
-   */
-  protected static final String ALL_HOSTS = "ALL_HOSTS";
-
-  /**
-   * An int representing all ports used for delivery purposes.
-   */
-  protected static final int ALL_PORTS = -1;
-
-  /**
-   * The map of known <code>CacheClientProxy</code> instances. Maps ClientProxyMembershipID to
+   * The map of known {@code CacheClientProxy} instances. Maps ClientProxyMembershipID to
-   * The map of <code>CacheClientProxy</code> instances which are getting initialized. Maps
+   * The map of {@code CacheClientProxy} instances which are getting initialized. Maps
-  private final HashSet<ClientProxyMembershipID> timedOutDurableClientProxies =
-      new HashSet<ClientProxyMembershipID>();
+  private final Set<ClientProxyMembershipID> timedOutDurableClientProxies =
+      new HashSet<>();
-   * The GemFire <code>InternalCache</code>. Note that since this is a singleton class you should
+   * The GemFire {@code InternalCache}. Note that since this is a singleton class you should
-   * <code>getCache()</code>
+   * {@code getCache()}
-   * The GemFire security <code>LogWriter</code>
+   * The GemFire security {@code LogWriter}
-  private int maximumMessageCount;
+  private final int maximumMessageCount;
-  private int messageTimeToLive;
+  private final int messageTimeToLive;
-  private ConnectionListener _connectionListener;
+  private final ConnectionListener _connectionListener;
-  private CacheServerStats acceptorStats;
+  private final CacheServerStats acceptorStats;
-      Integer.getInteger("BridgeServer.SOCKET_BUFFER_SIZE", 32768).intValue();
+      Integer.getInteger("BridgeServer.SOCKET_BUFFER_SIZE", 32768);
-   * The <code>InterestRegistrationListener</code> instances registered in this VM. This is used
+   * The {@code InterestRegistrationListener} instances registered in this VM. This is used
-   * The <code>InterestRegistrationListener</code> instances registered in this VM. This is used to
-   * provide a read-only <code>Set</code> of listeners.
+   * The {@code InterestRegistrationListener} instances registered in this VM. This is used to
+   * provide a read-only {@code Set} of listeners.
-  public static final String MAX_QUEUE_LOG_FREQUENCY =
+  private static final String MAX_QUEUE_LOG_FREQUENCY =
-  public static final String EVENT_ENQUEUE_WAIT_TIME_NAME =
+  private static final String EVENT_ENQUEUE_WAIT_TIME_NAME =
-  public static final int DEFAULT_EVENT_ENQUEUE_WAIT_TIME = 100;
+  private static final int DEFAULT_EVENT_ENQUEUE_WAIT_TIME = 100;
-  private long logFrequency = DEFAULT_LOG_FREQUENCY;
+  private long logFrequency;
-      new ConcurrentHashMap<String, DefaultQuery>();
+      new ConcurrentHashMap<>();
-    return this.logFrequency;
+    return logFrequency;
-  public static int getClientPingInterval() {
+  static int getClientPingInterval() {
-  public void initHaContainer(List overflowAttributesList) {
+  private void initHaContainer(OverflowAttributes overflowAttributes) {
-    if (overflowAttributesList != null
-        && !HARegionQueue.HA_EVICTION_POLICY_NONE.equals(overflowAttributesList.get(0))) {
+    if (overflowAttributes != null
+        && !HARegionQueue.HA_EVICTION_POLICY_NONE.equals(overflowAttributes.getEvictionPolicy())) {
-          + CacheServerImpl.clientMessagesRegion(cache, (String) overflowAttributesList.get(0),
-              ((Integer) overflowAttributesList.get(1)).intValue(),
-              ((Integer) overflowAttributesList.get(2)).intValue(),
-              (String) overflowAttributesList.get(3), (Boolean) overflowAttributesList.get(4))));
+          + CacheServerImpl.clientMessagesRegion(
+              cache,
+              overflowAttributes.getEvictionPolicy(),
+              overflowAttributes.getQueueCapacity(),
+              overflowAttributes.getPort(),
+              overflowAttributes.isDiskStore() ? overflowAttributes.getDiskStoreName()
+                  : overflowAttributes.getOverflowDirectory(),
+              overflowAttributes.isDiskStore())));
-  public void addToDenylistedClient(ClientProxyMembershipID proxyID) {
+  void addToDenylistedClient(ClientProxyMembershipID proxyID) {
-    this.getCache();
+    getCache();
-  public Set getDenylistedClient() {
+  Set getDenylistedClient() {
-    this.cache = _cache;
+    cache = _cache;
-    private ClientProxyMembershipID proxyID;
-    public ExpireDenyListTask(ClientProxyMembershipID proxyID) {
+    private final ClientProxyMembershipID proxyID;
+
+    ExpireDenyListTask(ClientProxyMembershipID proxyID) {
+
+  @VisibleForTesting
+  public static CacheClientNotifierProvider singletonProvider() {
+    return CacheClientNotifier::getInstance;
+  }
+
+  @VisibleForTesting
+  public static Supplier<CacheClientNotifier> singletonGetter() {
+    return CacheClientNotifier::getInstance;
+  }
+
+  @FunctionalInterface
+  @VisibleForTesting
+  public interface CacheClientNotifierProvider {
+    CacheClientNotifier get(InternalCache cache, CacheServerStats acceptorStats,
+        int maximumMessageCount, int messageTimeToLive, ConnectionListener listener,
+        OverflowAttributes overflowAttributes, boolean isGatewayReceiver);
+  }

MOV26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 UPD40 INS40 MOV31 INS23 INS31 INS31 INS55 MOV60 MOV60 MOV29 UPD83 UPD42 MOV44 INS8 UPD83 MOV44 UPD83 UPD83 MOV44 UPD83 MOV8 MOV44 MOV44 INS29 MOV83 MOV83 MOV43 MOV59 MOV74 INS83 INS83 INS83 INS83 UPD83 UPD83 UPD83 UPD83 INS78 INS83 INS83 INS43 INS42 INS8 INS78 INS83 INS83 INS74 INS42 INS8 INS78 INS78 INS83 INS42 INS31 INS66 INS65 UPD66 UPD43 UPD42 MOV60 INS25 INS70 INS21 INS21 MOV21 MOV21 INS70 INS70 INS70 INS70 INS70 MOV60 MOV25 INS25 INS65 INS70 MOV65 MOV65 INS70 INS65 INS65 MOV32 UPD43 UPD42 INS83 INS42 INS42 INS41 INS42 INS43 INS43 INS41 INS42 INS42 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 UPD42 UPD27 MOV27 MOV27 INS8 INS66 INS65 UPD66 INS66 INS65 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS44 MOV32 MOV8 MOV43 INS66 INS65 UPD66 INS66 INS65 INS66 INS32 INS32 INS32 MOV32 MOV32 INS44 MOV32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS66 INS65 UPD66 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 MOV27 MOV8 INS66 INS65 INS66 INS66 INS65 UPD66 INS44 INS42 MOV8 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS42 INS44 INS42 MOV8 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS65 UPD66 INS66 INS65 UPD66 INS42 INS66 INS65 UPD66 INS66 INS65 UPD66 INS42 UPD66 INS65 INS42 INS42 INS38 UPD66 MOV66 INS65 UPD66 MOV66 MOV66 MOV66 MOV66 INS66 INS65 UPD66 UPD74 MOV74 INS66 INS65 UPD66 INS65 UPD66 INS65 INS66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD74 INS42 UPD42 INS90 INS42 INS42 INS90 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS66 INS66 UPD66 MOV66 INS42 MOV27 INS42 INS60 MOV60 MOV27 MOV21 MOV21 INS60 MOV60 INS21 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV43 INS66 INS66 INS66 INS66 INS43 INS42 INS70 INS66 UPD66 MOV66 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 UPD42 INS42 INS42 UPD42 INS42 UPD42 INS43 INS42 MOV43 INS42 INS42 MOV42 MOV43 INS42 INS42 MOV42 INS43 INS42 INS42 MOV42 INS43 INS42 INS42 MOV42 INS66 UPD66 MOV66 INS42 INS42 INS42 INS42 INS66 INS66 UPD66 MOV66 INS66 INS43 INS42 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS42 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS42 INS66 INS66 MOV43 INS42 UPD66 MOV66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD66 MOV66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV74 INS59 UPD43 INS42 INS74 MOV43 INS59 INS32 INS42 UPD42 MOV42 INS44 INS32 MOV8 UPD42 MOV42 MOV43 MOV43 UPD42 MOV42 MOV43 MOV8 UPD42 MOV42 MOV43 MOV32 INS42 UPD42 MOV42 MOV43 INS8 INS42 MOV43 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 MOV32 INS42 UPD42 UPD42 MOV14 INS42 INS32 UPD42 MOV43 INS42 INS11 MOV32 INS42 INS86 MOV43 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV32 MOV21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 UPD43 UPD43 INS42 INS42 MOV43 INS32 MOV8 MOV43 MOV43 MOV43 INS42 MOV43 INS42 MOV43 INS42 MOV32 MOV43 INS42 MOV43 INS42 MOV43 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV16 INS42 INS42 INS42 UPD42 INS45 INS38 MOV32 INS42 UPD42 UPD42 INS38 INS42 INS32 INS42 MOV34 INS42 MOV32 MOV32 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 MOV42 MOV32 INS32 INS42 MOV43 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS32 INS32 INS16 INS32 MOV32 INS42 MOV40 MOV32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD74 INS42 DEL42 DEL45 DEL45 DEL4 DEL79 DEL52 DEL42 DEL22 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL36 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL85 DEL5 DEL42 DEL4 DEL3 DEL52 DEL52 DEL42 DEL22 DEL52 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL52 DEL83 DEL8 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL36 DEL36 DEL52 DEL42 DEL22 DEL45 DEL45 DEL45 DEL42 DEL27 DEL52 DEL42 DEL22 DEL9 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL43 DEL52 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL44 DEL8 DEL42 DEL78 DEL36 DEL42 DEL43 DEL11 DEL36 DEL83 DEL39 DEL42 DEL42 DEL52 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL33 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL52 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL83 DEL42 DEL43 DEL83 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL9 DEL9 DEL41 DEL8 DEL25 DEL8 DEL43 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL43 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL25 DEL8 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL4 DEL3 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL83 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL22 DEL65 DEL65 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL66 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL83 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL34 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL36 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL65 DEL29 DEL23 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL83 DEL34 DEL42 DEL43 DEL34 DEL32 DEL11 DEL42 DEL43 DEL34 DEL32 DEL11 DEL36 DEL32 DEL42 DEL43 DEL34 DEL32 DEL11 DEL36 DEL32 DEL42 DEL43 DEL34 DEL32 DEL11 DEL42 DEL43 DEL34 DEL32 DEL11 DEL83 DEL52 DEL83 DEL52 DEL42 DEL22 DEL83