Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-      StringTokenizer st =
-          new StringTokenizer(path, System.getProperty("path.separator"));
+      StringTokenizer st = new StringTokenizer(path, System.getProperty("path.separator"));
+
+   * 
-    Map sp = new TreeMap((Properties)System.getProperties().clone()); // fix for 46822
+    Map sp = new TreeMap((Properties) System.getProperties().clone()); // fix for 46822
-    final String SEPERATOR = "---------------------------------------------------------------------------";
+    final String SEPERATOR =
+        "---------------------------------------------------------------------------";
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-        allArgs.addAll(runtimeBean.getInputArguments()); // fixes  45353
+        allArgs.addAll(runtimeBean.getInputArguments()); // fixes 45353
-      for (int i=0; i < args.length; i++) {
+      for (int i = 0; i < args.length; i++) {
-      for (String arg: allArgs) {
+      for (String arg : allArgs) {
-    prettyPrintPath((String)sp.get("java.class.path"), out);
+    prettyPrintPath((String) sp.get("java.class.path"), out);
-    prettyPrintPath((String)sp.get("java.library.path"), out);
+    prettyPrintPath((String) sp.get("java.library.path"), out);
-        Map.Entry me = (Map.Entry)it.next();
+        Map.Entry me = (Map.Entry) it.next();
-        if (!key.startsWith(DistributionConfig.GEMFIRE_PREFIX
-            + DistributionConfig.SECURITY_PREFIX_NAME)
+        if (!key
+            .startsWith(DistributionConfig.GEMFIRE_PREFIX + DistributionConfig.SECURITY_PREFIX_NAME)
-            + DistributionConfig.SECURITY_PREFIX_NAME)
+                + DistributionConfig.SECURITY_PREFIX_NAME)
+   * 

