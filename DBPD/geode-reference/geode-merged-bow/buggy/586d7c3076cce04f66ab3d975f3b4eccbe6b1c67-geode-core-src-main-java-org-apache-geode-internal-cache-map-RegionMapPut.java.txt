GEODE-5195: add unit tests for RegionMapPut (#1964)


-import org.apache.geode.internal.cache.CachePerfStats;
-import org.apache.geode.internal.offheap.annotations.Retained;
-    boolean needToSetOldValue =
-        isCacheWrite() || isRequireOldValue() || event.getOperation().guaranteesOldValue();
-    if (needToSetOldValue) {
-      if (event.getOperation().guaranteesOldValue()) {
-        // In these cases we want to even get the old value from disk if it is not in memory
-        ReferenceCountHelper.skipRefCountTracking();
-        @Released
-        Object oldValueInVMOrDisk = re.getValueOffHeapOrDiskWithoutFaultIn(event.getRegion());
-        ReferenceCountHelper.unskipRefCountTracking();
-        try {
-          event.setOldValue(oldValueInVMOrDisk, true);
-        } finally {
-          OffHeapHelper.releaseWithNoTracking(oldValueInVMOrDisk);
-        }
-      } else {
-        // In these cases only need the old value if it is in memory
-        ReferenceCountHelper.skipRefCountTracking();
-
-        @Retained
-        @Released
-        Object oldValueInVM = re.getValueRetain(event.getRegion(), true); // OFFHEAP: re
-        // synced so can use
-        // its ref.
-        if (oldValueInVM == null) {
-          oldValueInVM = Token.NOT_AVAILABLE;
-        }
-        ReferenceCountHelper.unskipRefCountTracking();
-        try {
-          event.setOldValue(oldValueInVM);
-        } finally {
-          OffHeapHelper.releaseWithNoTracking(oldValueInVM);
-        }
-      }
+    if (event.getOperation().guaranteesOldValue()) {
+      setOldValueEvenIfFaultedOut();
+    } else if (isCacheWrite() || isRequireOldValue()) {
+      setOldValueIfNotFaultedOut();
-      // if the old value is in memory then if it is a GatewaySenderEventImpl then
-      // we want to set the old value.
-      Object ov = re.getValue(); // OFFHEAP _getValue is ok since re is synced and we only use it
-      // if its a GatewaySenderEventImpl.
-      // Since GatewaySenderEventImpl is never stored in an off-heap region nor a compressed region
-      // we don't need to worry about ov being compressed.
-      if (ov instanceof GatewaySenderEventImpl) {
-        event.setOldValue(ov, true);
+      Object existingValue = re.getValue();
+      if (existingValue instanceof GatewaySenderEventImpl) {
+        event.setOldValue(existingValue, true);
+  private void setOldValueIfNotFaultedOut() {
+    final EntryEventImpl event = getEvent();
+    ReferenceCountHelper.skipRefCountTracking();
+    @Released
+    Object oldValueInVM = getRegionEntry().getValueRetain(event.getRegion(), true);
+    if (oldValueInVM == null) {
+      oldValueInVM = Token.NOT_AVAILABLE;
+    }
+    ReferenceCountHelper.unskipRefCountTracking();
+    try {
+      event.setOldValue(oldValueInVM);
+    } finally {
+      OffHeapHelper.releaseWithNoTracking(oldValueInVM);
+    }
+  }
+
+  private void setOldValueEvenIfFaultedOut() {
+    final EntryEventImpl event = getEvent();
+    ReferenceCountHelper.skipRefCountTracking();
+    @Released
+    Object oldValueInVMOrDisk =
+        getRegionEntry().getValueOffHeapOrDiskWithoutFaultIn(event.getRegion());
+    ReferenceCountHelper.unskipRefCountTracking();
+    try {
+      event.setOldValue(oldValueInVMOrDisk, true);
+    } finally {
+      OffHeapHelper.releaseWithNoTracking(oldValueInVMOrDisk);
+    }
+  }
+
-        if (!isClearOccurred()) {
-          try {
-            getRegionMap().lruUpdateCallback();
-          } catch (DiskAccessException dae) {
-            getOwner().handleDiskAccessException(dae);
-            throw dae;
-          }
-        }
+        lruUpdateCallbackIfNotCleared();
+  private void lruUpdateCallbackIfNotCleared() {
+    if (!isClearOccurred()) {
+      try {
+        getRegionMap().lruUpdateCallback();
+      } catch (DiskAccessException dae) {
+        getOwner().handleDiskAccessException(dae);
+        throw dae;
+      }
+    }
+  }
+
-   * @return false if precondition indicates that
+   * @return false if preconditions indicate that
-    if (continueUpdate() && continueOverwriteDestroyed() && satisfiesExpectedOldValue()) {
-      return true;
+    if (!checkUpdatePreconditions()) {
+      return false;
-    return false;
+    if (!checkUninitializedRegionPreconditions()) {
+      return false;
+    }
+    if (!checkCreatePreconditions()) {
+      return false;
+    }
+    if (!checkExpectedOldValuePrecondition()) {
+      return false;
+    }
+    return true;
-  private boolean continueUpdate() {
+  private boolean checkUpdatePreconditions() {
-  private boolean continueOverwriteDestroyed() {
-    Token oldValueInVM = getRegionEntry().getValueAsToken();
-    // if region is under GII, check if token is destroyed
-    if (!isOverwriteDestroyed()) {
-      if (!getOwner().isInitialized()
-          && (oldValueInVM == Token.DESTROYED || oldValueInVM == Token.TOMBSTONE)) {
-        getEvent().setOldValueDestroyedToken();
-        return false;
+  private boolean checkUninitializedRegionPreconditions() {
+    if (!getOwner().isInitialized()) {
+      if (!isOverwriteDestroyed()) {
+        Token oldValueInVM = getRegionEntry().getValueAsToken();
+        if (oldValueInVM == Token.DESTROYED || oldValueInVM == Token.TOMBSTONE) {
+          getEvent().setOldValueDestroyedToken();
+          return false;
+        }
-    if (isIfNew() && !Token.isRemoved(oldValueInVM)) {
-      return false;
-    }
-  private boolean satisfiesExpectedOldValue() {
+  private boolean checkCreatePreconditions() {
+    if (isIfNew()) {
+      if (!getRegionEntry().isDestroyedOrRemoved()) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private boolean checkExpectedOldValuePrecondition() {
-        CachePerfStats stats = getOwner().getCachePerfStats();
-        if (stats != null) {
-          stats.incEntryCount(1);
-        }
+        getOwner().getCachePerfStats().incEntryCount(1);

INS31 INS31 INS31 INS31 INS83 INS39 INS42 MOV8 INS83 INS39 INS42 MOV8 INS83 INS39 INS42 MOV8 UPD42 UPD42 MOV8 INS83 INS39 INS42 INS8 UPD42 INS25 INS60 INS60 INS25 INS25 INS25 INS25 INS41 INS25 MOV41 INS25 MOV41 MOV32 INS8 INS25 INS83 INS43 INS59 MOV78 MOV43 INS83 INS43 INS59 MOV78 MOV43 UPD66 INS38 INS8 INS38 INS8 INS38 MOV8 INS38 INS8 INS9 MOV38 INS8 MOV32 INS8 INS21 MOV27 MOV8 MOV8 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS41 INS32 INS41 INS32 INS41 INS32 MOV41 INS25 INS25 MOV25 INS32 INS21 INS42 INS32 INS42 INS32 INS8 UPD42 MOV42 INS9 UPD42 MOV42 INS9 UPD42 MOV42 INS9 INS42 MOV38 INS8 INS38 MOV8 MOV38 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 MOV60 MOV25 INS32 UPD42 MOV42 UPD42 UPD42 INS32 MOV27 INS32 INS42 INS42 INS42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL32 DEL25 DEL39 DEL42 DEL59 DEL60 DEL42 DEL25 DEL42 DEL78 DEL32 DEL32 DEL32 DEL27 DEL25 DEL36 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL25