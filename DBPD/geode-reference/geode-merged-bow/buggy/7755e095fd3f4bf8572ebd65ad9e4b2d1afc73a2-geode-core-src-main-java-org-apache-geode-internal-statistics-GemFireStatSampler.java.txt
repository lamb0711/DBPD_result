GEDOE-6486: Cleanup GemFireStatSampler

+import org.apache.geode.CancelCriterion;
+import org.apache.geode.distributed.internal.DistributionManager;
-  private final Map<LocalStatListenerImpl, Boolean> localListeners =
-      new ConcurrentHashMap<LocalStatListenerImpl, Boolean>();
+  private final Map<LocalStatListenerImpl, Boolean> localListeners = new ConcurrentHashMap<>();
-      new HashMap<InternalDistributedMember, List<RemoteStatListenerImpl>>();
+      new HashMap<>();
-  private final InternalDistributedSystem con;
+  private final long systemId;
+  private final StatisticsConfig statisticsConfig;
+  private final StatisticsManager statisticsManager;
+  private final DistributionManager distributionManager;
-  private ProcessStats processStats = null;
+  private ProcessStats processStats;
-  ////////////////////// Constructors //////////////////////
-
-  public GemFireStatSampler(InternalDistributedSystem con) {
-    super(con.getCancelCriterion(), new StatSamplerStats(con, con.getId()));
-    this.con = con;
+  public GemFireStatSampler(InternalDistributedSystem internalDistributedSystem) {
+    this(internalDistributedSystem, null);
-  public GemFireStatSampler(InternalDistributedSystem con, LogFile logFile) {
-    super(con.getCancelCriterion(), new StatSamplerStats(con, con.getId()), logFile);
-    this.con = con;
+  public GemFireStatSampler(InternalDistributedSystem internalDistributedSystem, LogFile logFile) {
+    this(internalDistributedSystem.getCancelCriterion(),
+        new StatSamplerStats(internalDistributedSystem, internalDistributedSystem.getId()),
+        logFile,
+        internalDistributedSystem.getStatisticsConfig(),
+        internalDistributedSystem.getStatisticsManager(),
+        internalDistributedSystem.getDistributionManager(),
+        internalDistributedSystem.getId());
+  }
+
+  private GemFireStatSampler(CancelCriterion cancelCriterion,
+      StatSamplerStats statSamplerStats,
+      LogFile logFile,
+      StatisticsConfig statisticsConfig,
+      StatisticsManager statisticsManager,
+      DistributionManager distributionManager,
+      long systemId) {
+    super(cancelCriterion, statSamplerStats, logFile);
+    this.systemId = systemId;
+    this.statisticsConfig = statisticsConfig;
+    this.statisticsManager = statisticsManager;
+    this.distributionManager = distributionManager;
-    return this.processStats;
+    return processStats;
-      RemoteStatListenerImpl sl =
+      RemoteStatListenerImpl remoteStatListener =
-      listeners.put(result, sl);
-      List<RemoteStatListenerImpl> l = recipientToListeners.get(recipient);
-      if (l == null) {
-        l = new ArrayList<RemoteStatListenerImpl>();
-        recipientToListeners.put(recipient, l);
-      }
-      l.add(sl);
+      listeners.put(result, remoteStatListener);
+      List<RemoteStatListenerImpl> remoteStatListenerList =
+          recipientToListeners.computeIfAbsent(recipient, k -> new ArrayList<>());
+      remoteStatListenerList.add(remoteStatListener);
-      RemoteStatListenerImpl sl = (RemoteStatListenerImpl) listeners.remove(listenerId);
-      if (sl != null) {
-        List<RemoteStatListenerImpl> l = recipientToListeners.get(sl.getRecipient());
-        l.remove(sl);
+      RemoteStatListenerImpl remoteStatListener =
+          (RemoteStatListenerImpl) listeners.remove(listenerId);
+      if (remoteStatListener != null) {
+        List<RemoteStatListenerImpl> remoteStatListenerList =
+            recipientToListeners.get(remoteStatListener.getRecipient());
+        remoteStatListenerList.remove(remoteStatListener);
-      return sl != null;
+      return remoteStatListener != null;
-      List<RemoteStatListenerImpl> l = recipientToListeners.get(recipient);
-      if (l != null && l.size() != 0) {
-        for (RemoteStatListenerImpl sl : l) {
+      List<RemoteStatListenerImpl> remoteStatListenerList = recipientToListeners.get(recipient);
+      if (remoteStatListenerList != null && remoteStatListenerList.size() != 0) {
+        for (RemoteStatListenerImpl sl : remoteStatListenerList) {
-    LocalStatListenerImpl sl = null;
+    LocalStatListenerImpl localStatListener;
-      sl = LocalStatListenerImpl.create(l, stats, statName);
+      localStatListener = LocalStatListenerImpl.create(l, stats, statName);
-    this.localListeners.put(sl, Boolean.TRUE);
+    localListeners.put(localStatListener, Boolean.TRUE);
-    Iterator<Map.Entry<LocalStatListenerImpl, Boolean>> it =
-        this.localListeners.entrySet().iterator();
-    while (it.hasNext()) {
-      Map.Entry<LocalStatListenerImpl, Boolean> entry = it.next();
+    Iterator<Map.Entry<LocalStatListenerImpl, Boolean>> iterator =
+        localListeners.entrySet().iterator();
+    while (iterator.hasNext()) {
+      Map.Entry<LocalStatListenerImpl, Boolean> entry = iterator.next();
-        it.remove();
+        iterator.remove();
-    return this.localListeners.keySet();
+    return localListeners.keySet();
-    return this.con.getConfig().getStatisticArchiveFile();
+    return statisticsConfig.getStatisticArchiveFile();
-      return ((long) this.con.getConfig().getArchiveFileSizeLimit()) * (1024);
+      return (long) statisticsConfig.getArchiveFileSizeLimit() * 1024;
-      return ((long) this.con.getConfig().getArchiveFileSizeLimit()) * (1024 * 1024);
+      return (long) statisticsConfig.getArchiveFileSizeLimit() * (1024 * 1024);
-      return ((long) this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024);
+      return (long) statisticsConfig.getArchiveDiskSpaceLimit() * 1024;
-      return ((long) this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024 * 1024);
+      return (long) statisticsConfig.getArchiveDiskSpaceLimit() * (1024 * 1024);
-    return con.getId();
+    return systemId;
-      Iterator<Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>>> it1 =
-          recipientToListeners.entrySet().iterator();
-      while (it1.hasNext()) {
-        if (stopRequested())
+      for (Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>> internalDistributedMemberListEntry : recipientToListeners
+          .entrySet()) {
+        if (stopRequested()) {
-        Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>> me = it1.next();
-        List<RemoteStatListenerImpl> l = me.getValue();
-        if (l.size() > 0) {
-          InternalDistributedMember recipient = (InternalDistributedMember) me.getKey();
-          StatListenerMessage msg = StatListenerMessage.create(timeStamp, l.size());
-          msg.setRecipient(recipient);
-          for (RemoteStatListenerImpl statListener : l) {
+        }
+        Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>> entry =
+            internalDistributedMemberListEntry;
+        List<RemoteStatListenerImpl> remoteStatListenerList = entry.getValue();
+        if (remoteStatListenerList.size() > 0) {
+          InternalDistributedMember recipient = entry.getKey();
+          StatListenerMessage statListenerMessage =
+              StatListenerMessage.create(timeStamp, remoteStatListenerList.size());
+          statListenerMessage.setRecipient(recipient);
+          for (RemoteStatListenerImpl statListener : remoteStatListenerList) {
-              statListener.checkForChange(msg);
+              statListener.checkForChange(statListenerMessage);
-              msg.addChange(-statListener.getListenerId(), 0);
+              statListenerMessage.addChange(-statListener.getListenerId(), 0);
-          this.con.getDistributionManager().putOutgoing(msg);
+          distributionManager.putOutgoing(statListenerMessage);
-    return this.con.getConfig().getStatisticSampleRate();
+    return statisticsConfig.getStatisticSampleRate();
-    return this.con.getConfig().getStatisticSamplingEnabled();
+    return statisticsConfig.getStatisticSamplingEnabled();
-    return this.con.getStatisticsManager();
+    return statisticsManager;
-    return this.con.getStatisticsManager();
+    return statisticsManager;
-        this.processStats = HostStatHelper.newProcessStats(stats);
+        processStats = HostStatHelper.newProcessStats(stats);
-    List<Statistics> l = getStatisticsManager().getStatsList();
-    if (l == null) {
+    List<Statistics> statisticsList = getStatisticsManager().getStatsList();
+    if (statisticsList == null) {
-    if (stopRequested())
+    if (stopRequested()) {
+    }
-    Iterator<Statistics> it = l.iterator();
-    while (it.hasNext()) {
-      if (stopRequested())
+    for (Statistics statistics : statisticsList) {
+      if (stopRequested()) {
-      StatisticsImpl s = (StatisticsImpl) it.next();
-      if (s.usesSystemCalls()) {
-        HostStatHelper.refresh((LocalStatisticsImpl) s);
+      }
+      StatisticsImpl statisticsImpl = (StatisticsImpl) statistics;
+      if (statisticsImpl.usesSystemCalls()) {
+        HostStatHelper.refresh((LocalStatisticsImpl) statisticsImpl);
-        if (this.processStats != null) {
-          this.processStats.close();
+        if (processStats != null) {
+          processStats.close();
-    for (LocalStatListenerImpl st : this.localListeners.keySet()) {
-      if (getStatisticsManager().statisticsExists(st.getStatId())) {
-        st.checkForChange();
+    for (LocalStatListenerImpl localStatListener : localListeners.keySet()) {
+      if (getStatisticsManager().statisticsExists(localStatListener.getStatId())) {
+        localStatListener.checkForChange();
-    protected boolean oldValueInitialized = false;
+    protected boolean oldValueInitialized;
-      if (this.stats.isClosed()) {
+      if (stats.isClosed()) {
-        return this.stats.getUniqueId();
+        return stats.getUniqueId();
-      return this.listener;
+      return listener;
-      return this.listenerId;
+      return listenerId;
-      return this.recipient;
+      return recipient;

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD43 INS83 INS42 MOV44 INS8 MOV44 MOV44 UPD83 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 MOV78 MOV78 MOV78 MOV78 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS17 UPD42 INS17 INS43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS46 MOV21 INS21 INS21 INS21 MOV25 INS70 UPD74 UPD74 INS42 INS33 INS32 INS14 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS7 INS7 INS7 INS42 MOV32 MOV32 INS42 INS42 INS42 INS8 INS8 INS44 INS42 MOV8 UPD42 MOV42 MOV42 MOV43 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS60 UPD42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS70 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS41 INS41 MOV43 INS42 MOV25 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 MOV74 INS59 MOV74 INS44 MOV32 MOV8 MOV8 MOV43 INS42 UPD42 UPD42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS11 INS34 INS11 INS11 INS34 INS11 MOV74 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS86 MOV74 UPD42 UPD42 UPD42 MOV39 MOV32 MOV39 MOV32 MOV39 MOV32 MOV39 MOV32 INS8 MOV43 INS42 UPD42 INS42 INS59 MOV14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS41 UPD42 INS42 UPD42 INS42 INS42 UPD42 INS42 UPD74 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL33 DEL32 DEL14 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL46 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL11 DEL36 DEL34 DEL36 DEL52 DEL42 DEL22 DEL32 DEL11 DEL36 DEL52 DEL42 DEL22 DEL32 DEL11 DEL36 DEL34 DEL36 DEL52 DEL42 DEL22 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL52 DEL42 DEL22 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL41 DEL41 DEL42 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22