Revert "GEODE-3007: Simplify support for custom GFSH commands (#1042)" (#1072)

This reverts commit 0e5dd6ba45519463147337c8265db15e8f1840fc.
+import static org.apache.geode.distributed.ConfigurationProperties.USER_COMMAND_PACKAGES;
-import static java.util.stream.Collectors.toSet;
-
-import java.util.Objects;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Properties;
+import java.util.ServiceConfigurationError;
+import java.util.ServiceLoader;
-import java.util.stream.Stream;
+import java.util.StringTokenizer;
+import org.springframework.shell.converters.EnumConverter;
+import org.springframework.shell.converters.SimpleFileConverter;
+import org.springframework.shell.core.MethodTarget;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.apache.geode.distributed.ConfigurationProperties;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.management.internal.cli.commands.GfshCommand;
+ *
-  // Skip some of the Converters from Spring Shell for our customization
-  private static final Set<String> EXCLUDED_CLASSES =
-      Stream.of("-org.springframework.shell.converters.SimpleFileConverter",
-          "-org.springframework.shell.converters.FileConverter",
-          "-org.springframework.shell.converters.EnumConverter",
-          "-org.springframework.shell.commands.ExitCommands",
-          "-org.springframework.shell.commands.HelpCommands",
-          "-org.springframework.shell.commands.VersionCommands",
-          "-org.springframework.shell.commands.ConsoleCommands").collect(toSet());
+  public static final String USER_CMD_PACKAGES_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + USER_COMMAND_PACKAGES;
+  public static final String USER_CMD_PACKAGES_ENV_VARIABLE = "GEMFIRE_USER_COMMAND_PACKAGES";
+  private static final Object INSTANCE_LOCK = new Object();
-  private final LogWrapper logWrapper = LogWrapper.getInstance();
-  private final Set<CommandMarker> commandMarkers;
-  private final Set<Converter> converters;
-  private final Helper helper;
+  private final Helper helper = new Helper();
+  private final List<Converter<?>> converters = new ArrayList<Converter<?>>();
+  private final List<CommandMarker> commandMarkers = new ArrayList<>();
+
+  private Properties cacheProperties;
+  private LogWrapper logWrapper;
+
+  /**
+   * this constructor is used from Gfsh VM. We are getting the user-command-package from system
+   * environment. used by Gfsh.
+   */
-    helper = new Helper();
-    converters = loadConverters();
-    commandMarkers = loadCommandMarkers();
+    this(null);
-  private Set<Converter> loadConverters() {
-    Set<Converter> converters = instantiateAllClassesImplementing(Converter.class);
-    raiseExceptionIfEmpty(converters, "converters");
+  /**
+   * this is used when getting the instance in a cache server. We are getting the
+   * user-command-package from distribution properties. used by OnlineCommandProcessor.
+   */
+  public CommandManager(final Properties cacheProperties) {
+    if (cacheProperties != null) {
+      this.cacheProperties = cacheProperties;
+    }
+    logWrapper = LogWrapper.getInstance();
+    loadCommands();
+  }
-    converters.forEach(this::setContextIfCommandManagerAware);
+  private static void raiseExceptionIfEmpty(Set<Class<?>> foundClasses, String errorFor)
+      throws IllegalStateException {
+    if (foundClasses == null || foundClasses.isEmpty()) {
+      throw new IllegalStateException(
+          "Required " + errorFor + " classes were not loaded. Check logs for errors.");
+    }
+  }
+
+  private void loadUserCommands() {
+    final Set<String> userCommandPackages = new HashSet<String>();
+
+    // Find by packages specified by the system property
+    if (System.getProperty(USER_CMD_PACKAGES_PROPERTY) != null) {
+      StringTokenizer tokenizer =
+          new StringTokenizer(System.getProperty(USER_CMD_PACKAGES_PROPERTY), ",");
+      while (tokenizer.hasMoreTokens()) {
+        userCommandPackages.add(tokenizer.nextToken());
+      }
+    }
+
+    // Find by packages specified by the environment variable
+    if (System.getenv().containsKey(USER_CMD_PACKAGES_ENV_VARIABLE)) {
+      StringTokenizer tokenizer =
+          new StringTokenizer(System.getenv().get(USER_CMD_PACKAGES_ENV_VARIABLE), ",");
+      while (tokenizer.hasMoreTokens()) {
+        userCommandPackages.add(tokenizer.nextToken());
+      }
+    }
+
+    // Find by packages specified in the distribution config
+    if (this.cacheProperties != null) {
+      String cacheUserCmdPackages =
+          this.cacheProperties.getProperty(ConfigurationProperties.USER_COMMAND_PACKAGES);
+      if (cacheUserCmdPackages != null && !cacheUserCmdPackages.isEmpty()) {
+        StringTokenizer tokenizer = new StringTokenizer(cacheUserCmdPackages, ",");
+        while (tokenizer.hasMoreTokens()) {
+          userCommandPackages.add(tokenizer.nextToken());
+        }
+      }
+    }
+
+    // Load commands found in all of the packages
+    for (String userCommandPackage : userCommandPackages) {
+      try {
+        Set<Class<?>> foundClasses = ClasspathScanLoadHelper
+            .scanPackageForClassesImplementing(userCommandPackage, CommandMarker.class);
+        for (Class<?> klass : foundClasses) {
+          try {
+            add((CommandMarker) klass.newInstance());
+          } catch (Exception e) {
+            logWrapper.warning("Could not load User Commands from: " + klass + " due to "
+                + e.getLocalizedMessage()); // continue
+          }
+        }
+        raiseExceptionIfEmpty(foundClasses, "User Command");
+      } catch (IllegalStateException e) {
+        logWrapper.warning(e.getMessage(), e);
+        throw e;
+      }
+    }
+  }
+
+  /**
+   * Loads commands via {@link ServiceLoader} from {@link ClassPathLoader}.
+   *
+   * @since GemFire 8.1
+   */
+  private void loadPluginCommands() {
+    final Iterator<CommandMarker> iterator = ServiceLoader
+        .load(CommandMarker.class, ClassPathLoader.getLatest().asClassLoader()).iterator();
+    while (iterator.hasNext()) {
+      try {
+        final CommandMarker commandMarker = iterator.next();
+        try {
+          add(commandMarker);
+        } catch (Exception e) {
+          logWrapper.warning("Could not load Command from: " + commandMarker.getClass() + " due to "
+              + e.getLocalizedMessage(), e); // continue
+        }
+      } catch (ServiceConfigurationError e) {
+        logWrapper.severe("Could not load Command: " + e.getLocalizedMessage(), e); // continue
+      }
+    }
+  }
+
+
+  private void loadCommands() {
+    loadUserCommands();
+
+    loadPluginCommands();
+    loadGeodeCommands();
+    loadConverters();
+  }
+
+  private void loadConverters() {
+    Set<Class<?>> foundClasses;
+    // Converters
+    try {
+      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
+          "org.apache.geode.management.internal.cli.converters", Converter.class);
+      for (Class<?> klass : foundClasses) {
+        try {
+          Converter<?> object = (Converter<?>) klass.newInstance();
+          add(object);
+
+        } catch (Exception e) {
+          logWrapper.warning(
+              "Could not load Converter from: " + klass + " due to " + e.getLocalizedMessage()); // continue
+        }
+      }
+      raiseExceptionIfEmpty(foundClasses, "Converters");
+
+      // Spring shell's converters
+      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
+          "org.springframework.shell.converters", Converter.class);
+      for (Class<?> klass : foundClasses) {
+        if (!SHL_CONVERTERS_TOSKIP.contains(klass)) {
+          try {
+            add((Converter<?>) klass.newInstance());
+          } catch (Exception e) {
+            logWrapper.warning(
+                "Could not load Converter from: " + klass + " due to " + e.getLocalizedMessage()); // continue
+          }
+        }
+      }
+      raiseExceptionIfEmpty(foundClasses, "Basic Converters");
+    } catch (IllegalStateException e) {
+      logWrapper.warning(e.getMessage(), e);
+      throw e;
+    }
+  }
+
+  private void loadGeodeCommands() {
+    // CommandMarkers
+    Set<Class<?>> foundClasses;
+    try {
+      // geode's commands
+      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
+          GfshCommand.class.getPackage().getName(), CommandMarker.class);
+
+      for (Class<?> klass : foundClasses) {
+        try {
+          add((CommandMarker) klass.newInstance());
+        } catch (Exception e) {
+          logWrapper.warning(
+              "Could not load Command from: " + klass + " due to " + e.getLocalizedMessage()); // continue
+        }
+      }
+      raiseExceptionIfEmpty(foundClasses, "Commands");
+
+      // do not add Spring shell's commands for now. When we add it, we need to tell the parser that
+      // these are offline commands.
+    } catch (IllegalStateException e) {
+      logWrapper.warning(e.getMessage(), e);
+      throw e;
+    }
+  }
+
+  /** Skip some of the Converters from Spring Shell for our customization */
+  private static List<Class> SHL_CONVERTERS_TOSKIP = new ArrayList();
+  static {
+    // skip springs SimpleFileConverter to use our own FilePathConverter
+    SHL_CONVERTERS_TOSKIP.add(SimpleFileConverter.class);
+    // skip spring's EnumConverter to use our own EnumConverter
+    SHL_CONVERTERS_TOSKIP.add(EnumConverter.class);
+  }
+
+  public List<Converter<?>> getConverters() {
-  private Set<CommandMarker> loadCommandMarkers() {
-    Set<CommandMarker> commandMarkers = instantiateAllClassesImplementing(CommandMarker.class);
-    raiseExceptionIfEmpty(commandMarkers, "commandMarkers");
-
-    commandMarkers.forEach(this::setContextIfCommandManagerAware);
-    commandMarkers.forEach(helper::registerCommand);
+  public List<CommandMarker> getCommandMarkers() {
-  private <T> Set<T> instantiateAllClassesImplementing(Class<T> implementedInterface) {
-    Set<Class<? extends T>> classes = ClasspathScanLoadHelper.scanClasspathForClassesImplementing(
-        implementedInterface, EXCLUDED_CLASSES.toArray(new String[0]));
-
-    return classes.stream().map(this::instantiateClass).filter(Objects::nonNull).collect(toSet());
-  }
-
-  private <T> T instantiateClass(Class<T> classToInstantiate) {
-    try {
-      return classToInstantiate.newInstance();
-    } catch (Exception e) {
-      logWrapper.warning("Could not load command or converter from: " + classToInstantiate, e);
+  /**
+   * Method to add new Converter
+   *
+   * @param converter
+   */
+  void add(Converter<?> converter) {
+    if (CommandManagerAware.class.isAssignableFrom(converter.getClass())) {
+      ((CommandManagerAware) converter).setCommandManager(this);
-    return null;
+    converters.add(converter);
-  private void setContextIfCommandManagerAware(Object commandOrConverter) {
-    if (CommandManagerAware.class.isAssignableFrom(commandOrConverter.getClass())) {
-      ((CommandManagerAware) commandOrConverter).setCommandManager(this);
+  /**
+   * Method to add new Commands to the parser
+   *
+   * @param commandMarker
+   */
+  void add(CommandMarker commandMarker) {
+    if (CommandManagerAware.class.isAssignableFrom(commandMarker.getClass())) {
+      ((CommandManagerAware) commandMarker).setCommandManager(this);
+    }
+    commandMarkers.add(commandMarker);
+    for (Method method : commandMarker.getClass().getMethods()) {
+      CliCommand cliCommand = method.getAnnotation(CliCommand.class);
+      CliAvailabilityIndicator availability = method.getAnnotation(CliAvailabilityIndicator.class);
+      if (cliCommand == null && availability == null) {
+        continue;
+      }
+
+      if (cliCommand != null) {
+        helper.addCommand(cliCommand, method);
+      }
+
+      if (availability != null) {
+        helper.addAvailabilityIndicator(availability, new MethodTarget(method, commandMarker));
+      }
-  private static void raiseExceptionIfEmpty(Set<?> foundClasses, String classType)
-      throws IllegalStateException {
-    if (foundClasses == null || foundClasses.isEmpty()) {
-      throw new IllegalStateException("No " + classType + " were loaded. Check logs for errors.");
-    }
+  public Helper getHelper() {
+    return helper;
-  public Set<Converter> getConverters() {
-    return converters;
-  }
-
-  public Set<CommandMarker> getCommandMarkers() {
-    return commandMarkers;
-  }
-
-  public Helper getHelper() {
-    return helper;
-  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS23 INS28 INS31 UPD83 MOV83 MOV83 MOV83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV43 INS74 UPD74 MOV74 MOV83 INS43 INS59 UPD83 MOV83 MOV43 MOV59 INS29 INS83 INS42 INS8 INS29 INS44 INS83 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS39 UPD42 INS29 INS39 UPD42 MOV83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD42 INS8 INS29 INS83 INS83 INS74 INS59 INS83 INS8 INS74 UPD74 MOV74 INS29 UPD42 INS29 INS39 INS42 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS14 UPD42 MOV14 INS43 UPD74 MOV74 UPD42 INS14 UPD43 UPD42 INS14 INS42 INS42 UPD42 INS65 INS17 INS65 INS83 INS43 INS42 INS25 INS21 INS74 INS42 MOV43 INS42 INS25 INS60 INS25 INS25 INS25 INS70 INS65 INS65 INS60 INS61 INS21 INS21 INS21 MOV21 INS60 INS54 INS60 INS54 INS65 INS43 INS43 INS42 INS14 INS21 INS21 INS43 INS74 UPD43 INS65 INS65 INS74 UPD42 INS21 INS65 INS65 INS43 INS42 INS25 INS21 INS70 INS40 INS42 MOV43 INS42 INS76 INS74 UPD42 INS74 INS66 INS66 INS33 INS66 INS66 INS42 INS27 INS8 INS32 MOV43 UPD74 MOV74 MOV27 INS8 INS83 MOV74 INS59 INS27 INS8 INS32 INS8 INS27 INS8 INS44 INS42 INS8 INS66 INS65 INS66 INS65 INS66 INS66 INS83 UPD74 MOV74 INS59 INS32 INS8 INS32 INS32 INS32 MOV32 INS74 INS59 INS8 INS12 INS74 INS59 INS8 INS12 INS66 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS76 UPD42 INS66 INS42 INS43 INS76 INS32 INS66 INS42 INS42 INS32 INS8 INS32 INS44 INS32 INS8 INS43 UPD74 MOV74 INS43 INS42 INS33 MOV21 INS42 MOV32 INS42 INS76 INS53 INS42 INS14 INS32 INS33 INS60 INS61 INS32 INS42 INS42 INS60 INS61 INS22 INS33 MOV60 INS25 INS43 INS42 INS54 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS42 MOV43 INS74 INS42 INS21 INS70 INS21 INS21 INS70 INS21 INS44 INS8 MOV43 INS74 INS42 INS21 INS70 INS21 INS44 INS8 INS42 INS42 INS42 INS57 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS21 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS60 INS60 INS25 INS25 INS25 INS42 INS76 INS42 INS14 INS74 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS52 INS42 MOV43 INS27 INS8 INS42 INS8 INS12 INS42 INS32 INS42 INS8 INS12 UPD43 MOV43 INS76 INS7 INS44 INS42 INS8 INS32 INS7 INS44 INS42 INS8 INS32 INS43 INS42 INS21 INS53 INS43 MOV76 INS7 INS44 INS42 INS8 INS32 INS43 INS42 INS21 INS53 INS43 INS43 UPD42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS22 INS42 INS43 INS27 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS32 INS27 INS38 INS60 INS61 INS60 INS70 MOV21 INS44 INS8 INS42 INS42 MOV57 INS32 INS60 INS54 INS44 INS8 UPD42 INS42 MOV32 INS74 INS42 INS54 UPD42 MOV42 INS42 INS45 INS42 INS32 INS74 UPD42 MOV42 INS25 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS74 INS42 INS54 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS36 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS18 INS42 INS33 INS21 INS42 INS33 INS21 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS32 INS45 INS32 INS43 INS32 INS45 INS32 INS22 INS42 INS40 INS42 INS33 INS32 INS43 INS59 INS32 INS8 INS74 INS59 INS44 INS42 INS8 MOV43 INS42 MOV21 INS53 INS32 INS42 INS83 MOV43 MOV59 INS8 INS12 INS43 INS42 MOV21 INS42 UPD42 INS45 UPD43 MOV43 INS76 INS8 INS12 INS42 INS42 INS45 INS57 INS43 INS76 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS57 INS43 INS76 INS8 INS12 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS57 INS42 INS42 INS57 INS42 INS33 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS21 MOV43 UPD74 MOV74 INS42 INS32 UPD74 MOV74 INS42 INS54 UPD42 UPD45 INS42 INS42 INS42 UPD42 MOV21 INS44 INS8 INS42 UPD42 INS60 INS21 INS44 INS8 INS43 INS42 INS32 MOV54 INS42 INS42 INS32 INS42 INS43 INS42 INS21 INS44 INS8 INS42 INS42 UPD42 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS45 INS32 INS76 INS42 INS42 INS42 INS57 UPD76 INS8 INS12 UPD42 UPD42 INS32 INS42 UPD42 INS42 INS43 INS42 MOV21 UPD42 UPD42 INS27 INS42 UPD74 MOV74 INS59 INS32 INS43 INS42 INS21 UPD42 MOV42 INS42 INS42 INS42 INS57 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS21 MOV44 INS8 INS42 INS42 UPD42 UPD42 INS42 INS45 INS32 INS76 INS42 INS11 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS21 INS44 INS43 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS27 INS42 INS42 INS42 UPD74 MOV74 INS32 UPD42 MOV42 INS42 INS27 INS32 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS11 INS32 INS45 INS32 INS45 INS32 INS76 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS32 INS42 INS11 INS42 INS42 INS42 INS42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 INS32 INS43 INS32 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS43 INS76 UPD42 MOV42 MOV42 UPD45 UPD42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL90 DEL42 DEL41 DEL45 DEL52 DEL42 DEL90 DEL42 DEL42 DEL90 DEL42 DEL43 DEL74 DEL60 DEL42 DEL41 DEL42 DEL7 DEL42 DEL43 DEL32 DEL41 DEL42 DEL42 DEL73 DEL74 DEL42 DEL42 DEL44 DEL74 DEL42 DEL42 DEL42 DEL42 DEL85 DEL5 DEL34 DEL3 DEL32 DEL32 DEL59 DEL60 DEL32 DEL42 DEL52 DEL42 DEL90 DEL32 DEL42 DEL42 DEL90 DEL32 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL73 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL83 DEL74 DEL42 DEL44 DEL42 DEL44 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL83