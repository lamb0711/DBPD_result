GEODE-4266: Make JdbcConnectionException safely serializable to clients (#1601)


  * SQLExceptions that come from underlying sql drivers may not be availale
    on clients or locators and will not be deserializable. When these
    exceptions are contained in a JdbcConnectorException, the stack trace
    is instead converted to a string to ensure safe serialization

+import java.sql.SQLException;
+
+import org.apache.commons.lang.exception.ExceptionUtils;
+
- * to diagnose the cause of database communication failures.
+ * to diagnose the cause of database communication failures. In cases where the cause of this
+ * exception is not safe to serialize to clients, the stack trace is included in the message of the
+ * exception and the cause is left empty.
-  public JdbcConnectorException(Exception e) {
+  /**
+   * Create a new JdbcConnectorException by first checking to see if the causing exception is or
+   * contains an exception that potentially could not be deserialized by remote systems receiving
+   * the serialized exception.
+   *
+   * @param e cause of this Exception
+   * @return a new JdbcConnectorException containing either the causing exception, if it can be
+   *         serialized/deserialized by Geode, or containing the causing exception stack trace in
+   *         its message if not
+   */
+  public static JdbcConnectorException createException(Exception e) {
+    String message;
+    if (containsNonSerializableException(e)) {
+      message = e.getMessage() + System.lineSeparator() + ExceptionUtils.getFullStackTrace(e);
+      return new JdbcConnectorException(message);
+    } else {
+      return new JdbcConnectorException(e);
+    }
+  }
+
+  /*
+   * SQLExceptions likely are instances of or contain exceptions from the underlying SQL driver
+   * and potentially cannot be deserialzed by other systems (e.g. client or locators) that do not
+   * possess the driver on their classpaths.
+   */
+  private static boolean containsNonSerializableException(Exception e) {
+    if (e == null) {
+      return false;
+    }
+
+    if (e instanceof SQLException) {
+      return true;
+    }
+
+    Throwable cause;
+    while ((cause = e.getCause()) != null) {
+      if (cause instanceof SQLException) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private JdbcConnectorException(Exception e) {

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 UPD66 INS66 INS66 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS25 INS25 INS60 INS61 INS41 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS27 INS8 INS62 INS8 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS42 INS42 INS21 INS41 INS41 INS42 INS33 INS41 INS42 INS43 INS41 INS42 INS42 INS36 INS33 INS25 INS7 INS14 INS14 INS9 INS42 INS9 INS7 INS62 INS8 INS42 INS27 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS43 INS41 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42