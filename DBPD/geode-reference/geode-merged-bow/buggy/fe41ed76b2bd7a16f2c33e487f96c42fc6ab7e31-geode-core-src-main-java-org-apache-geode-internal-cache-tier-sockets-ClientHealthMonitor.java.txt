GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicIntegerArray;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.Cache;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.cache.CacheClientStatus;
+import org.apache.geode.internal.cache.IncomingGatewayStatus;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.TXId;
+import org.apache.geode.internal.cache.TXManagerImpl;
-import org.apache.logging.log4j.Logger;
-
-import java.net.InetAddress;
-import java.util.*;
-import java.util.concurrent.atomic.AtomicIntegerArray;
- * 
- * 
+ *
-  final protected Cache _cache;
+  private final InternalCache _cache;
-  public static ClientHealthMonitor getInstance(Cache cache, int maximumTimeBetweenPings,
+  public static ClientHealthMonitor getInstance(InternalCache cache, int maximumTimeBetweenPings,
-        ((GemFireCacheImpl) this._cache).getCCPTimer().schedule(task, timeout);
+        this._cache.getCCPTimer().schedule(task, timeout);
-  // /**
-  // * Returns modifiable map (changes do not effect this class) of memberId
-  // * to connection count.
-  // */
-  // public Map getConnectedClients() {
-  // Map map = new HashMap(); // KEY=memberId, VALUE=connectionCount (Integer)
-  // synchronized (_clientThreadsLock) {
-  // Iterator connectedClients = this._clientThreads.entrySet().iterator();
-  // while (connectedClients.hasNext()) {
-  // Map.Entry entry = (Map.Entry) connectedClients.next();
-  // String memberId = (String) entry.getKey();// memberId includes FQDN
-  // Set connections = (Set) entry.getValue();
-  // int socketPort = 0;
-  // InetAddress socketAddress = null;
-  // ///*
-  // Iterator serverConnections = connections.iterator();
-  // // Get data from one.
-  // while (serverConnections.hasNext()) {
-  // ServerConnection sc = (ServerConnection) serverConnections.next();
-  // socketPort = sc.getSocketPort();
-  // socketAddress = sc.getSocketAddress();
-  // break;
-  // }
-  // //*/
-  // int connectionCount = connections.size();
-  // String clientString = null;
-  // if (socketAddress == null) {
-  // clientString = "client member id=" + memberId;
-  // } else {
-  // clientString = "host name=" + socketAddress.toString() + " host ip=" +
-  // socketAddress.getHostAddress() + " client port=" + socketPort + " client
-  // member id=" + memberId;
-  // }
-  // map.put(memberId, new Object[] {clientString, new
-  // Integer(connectionCount)});
-  // /* Note: all client addresses are same...
-  // Iterator serverThreads = ((Set) entry.getValue()).iterator();
-  // while (serverThreads.hasNext()) {
-  // ServerConnection connection = (ServerConnection) serverThreads.next();
-  // InetAddress clientAddress = connection.getClientAddress();
-  // logger.severe("getConnectedClients: memberId=" + memberId +
-  // " clientAddress=" + clientAddress + " FQDN=" +
-  // clientAddress.getCanonicalHostName());
-  // }*/
-  // }
-  // }
-  // return map;
-  // }
-
-   * 
-
-   *        client has died and interrupting its sockets.
-  protected static synchronized void createInstance(Cache cache, int maximumTimeBetweenPings,
-      CacheClientNotifierStats stats) {
+  protected static synchronized void createInstance(InternalCache cache,
+      int maximumTimeBetweenPings, CacheClientNotifierStats stats) {
-   *        client has died and interrupting its sockets.
-  private ClientHealthMonitor(Cache cache, int maximumTimeBetweenPings,
+  private ClientHealthMonitor(InternalCache cache, int maximumTimeBetweenPings,

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS83 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 MOV22 DEL83 DEL42 DEL43 DEL11 DEL36 DEL66 DEL66