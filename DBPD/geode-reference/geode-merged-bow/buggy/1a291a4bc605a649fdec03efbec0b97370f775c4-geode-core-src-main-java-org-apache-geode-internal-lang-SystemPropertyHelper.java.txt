GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

+import java.util.Optional;
+
+import org.apache.geode.annotations.Experimental;
+
+
+  /**
+   * Setting this to "true" enables a new asynchronous eviction algorithm. For more details see
+   * {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   *
+   * @since Geode 1.4.0
+   */
+  @Experimental
+  public static final String EVICTION_SCAN_ASYNC = "EvictionScanAsync";
+
+  /**
+   * This property allows the maximum number of threads used for asynchronous eviction scanning to
+   * be configured. It defaults to "Math.max((Runtime.getRuntime().availableProcessors() / 4), 1)".
+   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   *
+   * @since Geode 1.4.0
+   */
+  @Experimental
+  public static final String EVICTION_SCAN_MAX_THREADS = "EvictionScanMaxThreads";
+
+  /**
+   * This property allows configuration of the threshold percentage at which an asynchronous scan is
+   * started. If the number of entries that have been recently used since the previous scan divided
+   * by total number of entries exceeds the threshold then a scan is started. The default threshold
+   * is 25. If the threshold is less than 0 or greater than 100 then the default threshold is used.
+   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   *
+   * @since Geode 1.4.0
+   */
+  @Experimental
+  public static final String EVICTION_SCAN_THRESHOLD_PERCENT = "EvictionScanThresholdPercent";
+
+  public static final String EVICTION_SEARCH_MAX_ENTRIES = "lru.maxSearchEntries";
+
-  private static boolean getProductBooleanProperty(String name) {
+  public static boolean getProductBooleanProperty(String name) {
+  public static Optional<Integer> getProductIntegerProperty(String name) {
+    Integer propertyValue = Integer.getInteger(GEODE_PREFIX + name);
+    if (propertyValue == null) {
+      propertyValue = Integer.getInteger(GEMFIRE_PREFIX + name);
+    }
+
+    if (propertyValue != null) {
+      return Optional.of(propertyValue);
+    } else {
+      return Optional.empty();
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD83 INS83 INS83 INS74 INS42 INS44 INS8 INS65 INS65 INS42 INS42 INS42 INS45 INS65 INS65 INS42 INS42 INS42 INS45 INS65 INS65 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS42 INS60 INS25 INS25 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS41 INS41 INS42 INS42 INS27 INS7 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42