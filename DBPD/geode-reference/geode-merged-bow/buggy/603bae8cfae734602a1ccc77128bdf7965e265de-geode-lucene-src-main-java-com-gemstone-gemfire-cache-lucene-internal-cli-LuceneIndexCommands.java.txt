GEODE-11:Gfsh command for lucene query

Added a gfsh command to execute a basic search operation on the lucene index. Added junit and dunit tests to verify.

This closes #213

-import static com.gemstone.gemfire.cache.operations.OperationContext.*;
-
-
-import java.util.HashMap;
+import java.util.Comparator;
+import java.util.HashSet;
-import java.util.Map;
-import java.util.TreeSet;
+import com.gemstone.gemfire.cache.lucene.LuceneResultStruct;
+import com.gemstone.gemfire.cache.lucene.PageableLuceneQueryResults;
+import com.gemstone.gemfire.cache.lucene.internal.cli.functions.LuceneSearchIndexFunction;
-import com.gemstone.gemfire.management.internal.cli.result.ErrorResultData;
-import com.gemstone.gemfire.management.internal.cli.result.InfoResultData;
+  private static final LuceneSearchIndexFunction searchIndexFunction = new LuceneSearchIndexFunction();
+  @CliCommand(value = LuceneCliStrings.LUCENE_SEARCH_INDEX, help = LuceneCliStrings.LUCENE_SEARCH_INDEX__HELP)
+  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  public Result searchIndex(
+    @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME,
+      mandatory=true,
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__NAME__HELP) final String indexName,
+
+    @CliOption (key = LuceneCliStrings.LUCENE__REGION_PATH,
+      mandatory = true,
+      optionContext = ConverterHint.REGIONPATH,
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__REGION_HELP) final String regionPath,
+
+    @CliOption (key = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING,
+      mandatory = true,
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING__HELP) final String queryString,
+
+    @CliOption (key = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD,
+      mandatory = true,
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD__HELP) final String defaultField) {
+    try {
+
+      LuceneQueryInfo queryInfo=new LuceneQueryInfo(indexName,regionPath,queryString, defaultField);
+      return getSearchResults(queryInfo);
+
+    }
+    catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
+        LuceneCliStrings.LUCENE_SEARCH_INDEX));
+    }
+    catch (VirtualMachineError e) {
+      SystemFailure.initiateFailure(e);
+      throw e;
+    }
+    catch (Throwable t) {
+      SystemFailure.checkFailure();
+      getCache().getLogger().error(t);
+      return ResultBuilder.createGemFireErrorResult(String.format(LuceneCliStrings.LUCENE_SEARCH_INDEX__ERROR_MESSAGE,
+        toString(t, isDebugging())));
+    }
+  }
+
+  private Result getSearchResults(final LuceneQueryInfo queryInfo) throws Exception {
+    GeodeSecurityUtil.authorizeRegionManage(queryInfo.getRegionPath());
+    final String[] groups = {};
+    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(searchIndexFunction, groups, queryInfo);
+    final List<Set<LuceneSearchResults>> functionResults = (List<Set<LuceneSearchResults>>) rc.getResult();
+
+    List<LuceneSearchResults> results = functionResults.stream()
+      .flatMap(set -> set.stream())
+      .sorted()
+      .collect(Collectors.toList());
+    if (results.size() != 0) {
+      final TabularResultData data = ResultBuilder.createTabularResultData();
+      for (LuceneSearchResults struct : results) {
+        data.accumulate("key", struct.getKey());
+        data.accumulate("value", struct.getValue());
+        data.accumulate("score", struct.getScore());
+      }
+      return ResultBuilder.buildResult(data);
+    }
+    else {
+      return ResultBuilder.createInfoResult(LuceneCliStrings.LUCENE_SEARCH_INDEX__NO_RESULTS_MESSAGE);
+    }
+    //@TODO : Pagination
+  }
+
+
+  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[]groups, final LuceneQueryInfo queryInfo) throws CommandResultException {
+    final Set<DistributedMember> targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+    return CliUtil.executeFunction(function, queryInfo, targetMembers);
+  }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS77 INS77 INS77 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS14 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS77 INS83 INS43 INS42 INS77 INS83 INS43 INS42 INS77 INS83 INS43 INS42 INS77 INS83 INS43 INS42 INS54 INS42 INS83 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS25 INS43 INS76 INS76 INS43 INS42 INS5 INS42 INS83 INS43 INS42 INS42 INS60 INS41 INS43 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS4 INS42 INS40 INS42 INS40 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS8 INS12 INS12 INS12 INS42 INS32 INS83 INS5 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS74 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS85 INS42 INS83 INS74 INS59 INS32 INS42 INS40 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS60 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS43 INS85 INS42 INS4 INS43 INS76 INS76 INS42 INS32 INS43 INS74 INS42 INS11 INS43 INS43 INS42 INS32 INS32 INS34 INS60 INS70 INS41 INS41 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS41 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS83 INS43 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS43 INS74 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS32 INS42 INS86 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS59 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26