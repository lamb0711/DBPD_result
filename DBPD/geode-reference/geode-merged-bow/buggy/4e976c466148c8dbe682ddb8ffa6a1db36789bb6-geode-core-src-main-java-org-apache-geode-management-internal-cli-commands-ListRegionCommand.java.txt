GEODE-5971: refactor more to use ResultModel (#3268)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-  public Result listRegion(
+  public ResultModel listRegion(
-    Result result = null;
-    try {
-      Set<RegionInformation> regionInfoSet = new LinkedHashSet<>();
-      ResultCollector<?, ?> rc;
-      Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
+    ResultModel result = new ResultModel();
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
+    Set<RegionInformation> regionInfoSet = new LinkedHashSet<>();
+    ResultCollector<?, ?> rc;
+    Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
-      TabularResultData resultData = ResultBuilder.createTabularResultData();
-      rc = CliUtil.executeFunction(getRegionsFunction, null, targetMembers);
-      ArrayList<?> resultList = (ArrayList<?>) rc.getResult();
-
-      if (resultList != null) {
-        // Gather all RegionInformation into a flat set.
-        regionInfoSet.addAll(resultList.stream().filter(Objects::nonNull)
-            .filter(Object[].class::isInstance).map(Object[].class::cast).flatMap(Arrays::stream)
-            .filter(RegionInformation.class::isInstance).map(RegionInformation.class::cast)
-            .collect(Collectors.toSet()));
-
-        Set<String> regionNames = new TreeSet<>();
-
-        for (RegionInformation regionInfo : regionInfoSet) {
-          regionNames.add(regionInfo.getName());
-          Set<String> subRegionNames = regionInfo.getSubRegionNames();
-
-          regionNames.addAll(subRegionNames);
-        }
-
-        for (String regionName : regionNames) {
-          resultData.accumulate("List of regions", regionName);
-        }
-
-        if (!regionNames.isEmpty()) {
-          result = ResultBuilder.buildResult(resultData);
-
-        } else {
-          result = ResultBuilder.createInfoResult(CliStrings.LIST_REGION__MSG__NOT_FOUND);
-        }
-      }
-    } catch (FunctionInvocationTargetException e) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_REGION));
-    } catch (Exception e) {
-      result = ResultBuilder
-          .createGemFireErrorResult(CliStrings.LIST_REGION__MSG__ERROR + " : " + e.getMessage());
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+
+    TabularResultModel resultData = result.addTable("regionInfo");
+    rc = CliUtil.executeFunction(getRegionsFunction, null, targetMembers);
+    ArrayList<?> resultList = (ArrayList<?>) rc.getResult();
+
+    if (resultList != null) {
+      // Gather all RegionInformation into a flat set.
+      regionInfoSet.addAll(resultList.stream().filter(Objects::nonNull)
+          .filter(Object[].class::isInstance).map(Object[].class::cast).flatMap(Arrays::stream)
+          .filter(RegionInformation.class::isInstance).map(RegionInformation.class::cast)
+          .collect(Collectors.toSet()));
+
+      Set<String> regionNames = new TreeSet<>();
+
+      for (RegionInformation regionInfo : regionInfoSet) {
+        regionNames.add(regionInfo.getName());
+        Set<String> subRegionNames = regionInfo.getSubRegionNames();
+
+        regionNames.addAll(subRegionNames);
+      }
+
+      if (regionNames.isEmpty()) {
+        return ResultModel.createInfo(CliStrings.LIST_REGION__MSG__NOT_FOUND);
+      }
+
+      for (String regionName : regionNames) {
+        resultData.accumulate("List of regions", regionName);
+      }
+    }
+

UPD40 UPD40 UPD43 MOV8 UPD42 INS60 MOV41 INS43 INS59 UPD43 MOV70 INS42 INS42 INS14 UPD42 INS43 UPD42 UPD42 INS45 MOV32 INS42 UPD42 UPD42 INS41 INS32 UPD42 MOV42 UPD42 MOV42 MOV40 DEL40 DEL26 DEL40 DEL26 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8