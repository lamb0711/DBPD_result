GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-public class JGroupsMessenger implements Messenger {
+public class JGroupsMessenger<ID extends MemberIdentifier> implements Messenger<ID> {
-  MemberIdentifier localAddress;
+  ID localAddress;
-  private Services services;
+  private Services<ID> services;
-  private final Map<Class, MessageHandler> handlers = new ConcurrentHashMap<>();
+  private final Map<Class<?>, MessageHandler<?>> handlers = new ConcurrentHashMap<>();
-  private volatile GMSMembershipView view;
+  private volatile GMSMembershipView<ID> view;
-  protected final Map<MemberIdentifier, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
+  protected final Map<ID, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
-      Collections.synchronizedSet(new HashSet<Address>());
+      Collections.synchronizedSet(new HashSet<>());
-  private GMSEncrypt encrypt;
+  private GMSEncrypt<ID> encrypt;
-  public void init(Services s) {
+  public void init(Services<ID> s) {
-        this.encrypt = new GMSEncrypt(services, config.getSecurityUDPDHAlgo());
+        this.encrypt = new GMSEncrypt<>(services, config.getSecurityUDPDHAlgo());
-    StatRecorder sr = (StatRecorder) myChannel.getProtocolStack().findProtocol(StatRecorder.class);
+    StatRecorder<ID> sr =
+        (StatRecorder<ID>) myChannel.getProtocolStack().findProtocol(StatRecorder.class);
-    Transport transport = (Transport) myChannel.getProtocolStack().getTransport();
+    Transport<ID> transport = (Transport<ID>) myChannel.getProtocolStack().getTransport();
-  public void memberSuspected(MemberIdentifier initiator,
-      MemberIdentifier suspect, String reason) {}
+  public void memberSuspected(ID initiator,
+      ID suspect, String reason) {}
-  public void installView(GMSMembershipView v) {
+  public void installView(GMSMembershipView<ID> v) {
-      for (MemberIdentifier mbr : v.getCrashedMembers()) {
+      for (ID mbr : v.getCrashedMembers()) {
-      for (MemberIdentifier mbr : v.getShutdownMembers()) {
+      for (ID mbr : v.getShutdownMembers()) {
-    GMSMembershipView v = this.view;
+    GMSMembershipView<ID> v = this.view;
-      List<MemberIdentifier> members = v.getMembers();
-      MemberIdentifier recipient = null;
-      for (MemberIdentifier gmsMbr : members) {
+      List<ID> members = v.getMembers();
+      ID recipient = null;
+      for (ID gmsMbr : members) {
-  public <T> void addHandler(Class<T> c, MessageHandler<T> h) {
+  public <T extends Message<ID>> void addHandler(Class<T> c, MessageHandler<T> h) {
-  public void getMessageState(MemberIdentifier target, Map<String, Long> state,
+  public void getMessageState(ID target, Map<String, Long> state,
-  public void waitForMessageState(MemberIdentifier sender, Map<String, Long> state)
+  public void waitForMessageState(ID sender, Map<String, Long> state)
-  public Set<MemberIdentifier> sendUnreliably(Message msg) {
+  public Set<ID> sendUnreliably(Message<ID> msg) {
-  public Set<MemberIdentifier> send(Message msg) {
+  public Set<ID> send(Message<ID> msg) {
-  private Set<MemberIdentifier> send(Message msg, boolean reliably) {
+  private Set<ID> send(Message<ID> msg, boolean reliably) {
-    GMSMembershipView oldView = this.view;
+    GMSMembershipView<ID> oldView = this.view;
-    List<MemberIdentifier> destinations = msg.getRecipients();
+    List<ID> destinations = msg.getRecipients();
-      List<MemberIdentifier> calculatedMembers; // explicit list of members
+      List<ID> calculatedMembers; // explicit list of members
-        GMSMembershipView v = services.getJoinLeave().getView();
+        GMSMembershipView<ID> v = services.getJoinLeave().getView();
-        calculatedMembers = new LinkedList<MemberIdentifier>();
+        calculatedMembers = new LinkedList<>();
-          MemberIdentifier m = (MemberIdentifier) v.get(i);
-          calculatedMembers.add((MemberIdentifier) m);
+          ID m = v.get(i);
+          calculatedMembers.add(m);
-        calculatedMembers = new LinkedList<MemberIdentifier>();
+        calculatedMembers = new LinkedList<>();
-          calculatedMembers.add((MemberIdentifier) destinations.get(i));
+          calculatedMembers.add(destinations.get(i));
-      for (MemberIdentifier mbr : calculatedMembers) {
+      for (ID mbr : calculatedMembers) {
-      for (MemberIdentifier mbr : calculatedMembers) {
+      for (ID mbr : calculatedMembers) {
-    Set<MemberIdentifier> result = new HashSet<>();
-    GMSMembershipView newView = this.view;
+    Set<ID> result = new HashSet<>();
+    GMSMembershipView<ID> newView = this.view;
-      for (MemberIdentifier d : destinations) {
+      for (ID d : destinations) {
-  org.jgroups.Message createJGMessage(Message gfmsg, JGAddress src, MemberIdentifier dst,
+  org.jgroups.Message createJGMessage(Message<ID> gfmsg, JGAddress src, ID dst,
-          new BufferDataOutputStream(Version.fromOrdinalNoThrow((short) version, false));
+          new BufferDataOutputStream(Version.fromOrdinalNoThrow(version, false));
-  void writeEncryptedMessage(Message gfmsg, MemberIdentifier recipient, short version,
+  void writeEncryptedMessage(Message<ID> gfmsg, ID recipient, short version,
-      MemberIdentifier pkMbr = null;
+      ID pkMbr = null;
-          new BufferDataOutputStream(Version.fromOrdinalNoThrow((short) version, false));
+          new BufferDataOutputStream(Version.fromOrdinalNoThrow(version, false));
-  int getRequestId(Message gfmsg, MemberIdentifier destination, boolean add) {
+  int getRequestId(Message<ID> gfmsg, ID destination, boolean add) {
-      requestId = ((FindCoordinatorRequest) gfmsg).getRequestId();
+      requestId = ((FindCoordinatorRequest<ID>) gfmsg).getRequestId();
-      requestId = ((JoinRequestMessage) gfmsg).getRequestId();
+      requestId = ((JoinRequestMessage<ID>) gfmsg).getRequestId();
-      requestId = ((FindCoordinatorResponse) gfmsg).getRequestId();
+      requestId = ((FindCoordinatorResponse<ID>) gfmsg).getRequestId();
-      requestId = ((JoinResponseMessage) gfmsg).getRequestId();
+      requestId = ((JoinResponseMessage<ID>) gfmsg).getRequestId();
-  byte[] serializeMessage(Message gfmsg, BufferDataOutputStream out_stream)
+  byte[] serializeMessage(Message<ID> gfmsg, BufferDataOutputStream out_stream)
-    MemberIdentifier m = this.localAddress;
+    ID m = this.localAddress;
-  void setMessageFlags(Message gfmsg, org.jgroups.Message msg) {
+  void setMessageFlags(Message<ID> gfmsg, org.jgroups.Message msg) {
-            Version.fromOrdinalNoThrow((short) ordinal, false));
+            Version.fromOrdinalNoThrow(ordinal, false));
-  void setSender(Message dm, MemberIdentifier m, short ordinal) {
-    MemberIdentifier sender = null;
+  void setSender(Message<ID> dm, ID m, short ordinal) {
+    ID sender = null;
-      sender = ((JoinRequestMessage) dm).getMemberID();
+      sender = ((JoinRequestMessage<ID>) dm).getMemberID();
-  Message readEncryptedMessage(DataInputStream dis, short ordinal,
-      GMSEncrypt encryptLocal) throws Exception {
+  Message<ID> readEncryptedMessage(DataInputStream dis, short ordinal,
+      GMSEncrypt<ID> encryptLocal) throws Exception {
-      MemberIdentifier pkMbr = null;
+      ID pkMbr = null;
-              Version.fromOrdinalNoThrow((short) ordinal, false));
+              Version.fromOrdinalNoThrow(ordinal, false));
-        Message result = deserializeMessage(in, ordinal);
+        Message<ID> result = deserializeMessage(in, ordinal);
-          setPublicKey(pk, (MemberIdentifier) result.getSender());
+          setPublicKey(pk, result.getSender());
-  Message deserializeMessage(DataInputStream in, short ordinal)
+  Message<ID> deserializeMessage(DataInputStream in, short ordinal)
-    MemberIdentifier m = services.getMemberFactory().create(info);
-    Message result = services.getSerializer().getObjectDeserializer().readObject(in);
+    ID m = services.getMemberFactory().create(info);
+    Message<ID> result = services.getSerializer().getObjectDeserializer().readObject(in);
-  void filterOutgoingMessage(Message m) {
+  void filterOutgoingMessage(Message<ID> m) {
-        JoinResponseMessage jrsp = (JoinResponseMessage) m;
+        JoinResponseMessage<ID> jrsp = (JoinResponseMessage<ID>) m;
-  void filterIncomingMessage(Message m) {
+  void filterIncomingMessage(Message<ID> m) {
-        JoinResponseMessage jrsp = (JoinResponseMessage) m;
+        JoinResponseMessage<ID> jrsp = (JoinResponseMessage<ID>) m;
-  public MemberIdentifier getMemberID() {
+  public ID getMemberID() {
-  private MemberIdentifier getMemberFromView(MemberIdentifier jgId, short version) {
+  private ID getMemberFromView(ID jgId, short version) {
-  public GMSQuorumChecker getQuorumChecker() {
-    GMSMembershipView view = this.view;
+  public GMSQuorumChecker<ID> getQuorumChecker() {
+    GMSMembershipView<ID> view = this.view;
-    GMSQuorumChecker qc =
-        new GMSQuorumChecker(view, services.getConfig().getLossThreshold(), this.myChannel);
+    GMSQuorumChecker<ID> qc =
+        new GMSQuorumChecker<>(view, services.getConfig().getLossThreshold(), this.myChannel);
-        Message msg = (Message) o;
+        Message<ID> msg = (Message<ID>) o;
-          MessageHandler handler = getMessageHandler(msg);
+          MessageHandler<Message<ID>> handler = getMessageHandler(msg);
-    private void recordScheduledSeqno(MemberIdentifier member, long seqno) {
+    private void recordScheduledSeqno(ID member, long seqno) {
-    private MessageHandler getMessageHandler(Message msg) {
+    private MessageHandler<Message<ID>> getMessageHandler(Message<ID> msg) {
-      MessageHandler h = handlers.get(msgClazz);
+      MessageHandler<?> h = handlers.get(msgClazz);
-      return h;
+      return (MessageHandler<Message<ID>>) h;
-  public Set<MemberIdentifier> send(Message msg, GMSMembershipView alternateView) {
+  public Set<ID> send(Message<ID> msg, GMSMembershipView<ID> alternateView) {
-  public byte[] getPublicKey(MemberIdentifier mbr) {
+  public byte[] getPublicKey(ID mbr) {
-  public void setPublicKey(byte[] publickey, MemberIdentifier mbr) {
+  public void setPublicKey(byte[] publickey, ID mbr) {
-  private HashMap<Integer, MemberIdentifier> requestIdVsRecipients = new HashMap<>();
+  private HashMap<Integer, ID> requestIdVsRecipients = new HashMap<>();
-  MemberIdentifier getRequestedMember(int requestId) {
+  ID getRequestedMember(int requestId) {
-  void addRequestId(int requestId, MemberIdentifier mbr) {
+  void addRequestId(int requestId, ID mbr) {

INS73 INS74 INS42 MOV43 MOV43 INS43 UPD43 INS74 UPD74 INS74 UPD74 INS74 UPD74 MOV74 UPD74 UPD74 MOV74 INS74 INS74 UPD43 UPD43 INS74 UPD74 UPD74 UPD43 INS42 UPD42 MOV43 INS43 INS74 INS74 MOV43 INS43 INS43 MOV43 INS43 INS74 UPD43 UPD43 INS74 INS74 UPD43 UPD43 UPD43 INS74 UPD43 INS74 UPD43 INS74 INS74 UPD43 INS74 UPD43 INS74 UPD43 INS74 INS74 INS74 UPD43 MOV43 INS43 INS74 MOV43 INS43 INS74 INS74 UPD42 UPD42 UPD43 MOV43 INS43 INS74 UPD43 INS74 INS74 UPD43 UPD43 UPD43 UPD42 UPD43 INS42 MOV43 INS76 MOV43 INS76 INS42 INS42 INS42 MOV43 INS43 INS74 INS74 UPD42 UPD42 MOV43 INS43 INS74 INS43 INS43 UPD42 UPD42 UPD42 MOV43 INS43 UPD42 MOV43 INS43 UPD42 MOV43 INS43 INS74 UPD74 UPD74 INS74 MOV43 INS43 UPD42 MOV43 INS43 UPD42 MOV43 INS43 UPD42 MOV43 INS43 UPD43 MOV43 INS43 MOV43 INS43 UPD42 UPD43 INS42 MOV43 INS43 MOV42 INS42 UPD43 INS74 MOV43 INS43 MOV43 INS43 UPD42 INS42 INS74 INS74 UPD43 MOV43 INS74 INS74 UPD42 INS43 INS43 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 UPD74 INS42 MOV43 INS43 MOV43 INS43 INS42 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 UPD43 UPD43 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 INS42 UPD42 MOV43 INS43 MOV42 INS42 INS74 UPD42 MOV42 INS74 MOV43 INS43 MOV43 INS43 UPD42 MOV43 INS43 INS43 INS43 INS74 INS11 MOV42 INS42 INS42 INS42 INS74 INS42 INS74 INS42 UPD74 UPD43 INS42 UPD42 UPD74 UPD42 INS42 MOV43 UPD43 MOV43 UPD43 INS42 MOV43 INS43 MOV43 INS43 INS42 INS42 INS74 INS42 INS42 MOV42 INS42 MOV43 INS76 INS74 INS42 MOV43 INS43 MOV43 INS43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 INS21 MOV21 UPD43 UPD43 UPD43 UPD42 UPD42 INS74 INS42 INS42 INS74 UPD42 MOV42 INS74 MOV43 INS74 INS43 INS74 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS74 INS7 UPD42 UPD42 UPD42 MOV43 MOV43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS42 INS43 INS43 MOV43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS74 INS74 INS42 INS42 INS74 INS42 INS74 UPD43 UPD74 INS74 INS74 MOV32 MOV43 INS43 MOV43 INS74 MOV43 MOV43 UPD42 MOV32 INS42 MOV32 MOV43 INS43 INS74 INS42 MOV43 INS43 INS42 MOV43 INS43 INS42 MOV43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS74 INS42 MOV43 INS43 INS42 DEL42 DEL43 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL11 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL42 DEL43 DEL11 DEL42