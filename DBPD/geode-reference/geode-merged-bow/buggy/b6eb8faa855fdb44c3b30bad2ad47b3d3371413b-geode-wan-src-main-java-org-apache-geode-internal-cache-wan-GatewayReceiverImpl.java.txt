[GEODE-5591] If there is a BindException we should always throw. (#2351)

* Replace start() logic with something more deterministic and fix test.
* Iterate over possible ports instead of picking random ones.
* Check for an exception of the appropriate type and replace old
  assertion logic.
* Refactor testing an exception was thrown
* Fix expected message to match exception.

Co-Authored-By: Patrick Rhomberg <prhomberg@pivotal.io>
Co-Authored-By: Sean Goller <sgoller@pivotal.io>

-import java.net.BindException;
-import java.net.SocketException;
-import org.apache.geode.internal.AvailablePort;
-    boolean started = false;
-    this.port = getPortToStart();
-    while (!started && this.port != -1) {
-      receiver.setPort(this.port);
+
+    for (int port = this.startPort; port <= this.endPort; port++) {
+      receiver.setPort(port);
-        started = true;
-      } catch (BindException be) {
-        if (be.getCause() != null
-            && be.getCause().getMessage().contains("assign requested address")) {
-          throw new GatewayReceiverException(
-              LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1
-                  .toLocalizedString(new Object[] {bindAdd, this.port}));
-        }
-        // ignore as this port might have been used by other threads.
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayReceiver_Address_Already_In_Use,
-            this.port));
-        this.port = getPortToStart();
-      } catch (SocketException se) {
-        if (se.getMessage().contains("Address already in use")) {
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.GatewayReceiver_Address_Already_In_Use, this.port));
-          this.port = getPortToStart();
-
-        } else {
-          throw se;
+        this.port = port;
+        break;
+      } catch (IOException e) {
+        if (port == this.endPort) {
+          throw new GatewayReceiverException("No available free port found in the given range (" +
+              this.startPort +
+              "-" +
+              this.endPort +
+              ")", e);
-    if (!started) {
-      throw new IllegalStateException("No available free port found in the given range.");
-    }
-  private int getPortToStart() {
-    // choose a random port from the given port range
-    int rPort;
-    if (this.startPort == this.endPort) {
-      rPort = this.startPort;
-    } else {
-      rPort = AvailablePort.getRandomAvailablePortInRange(this.startPort, this.endPort,
-          AvailablePort.SOCKET);
-    }
-    return rPort;
-  }
-

INS24 INS58 INS27 INS37 INS8 INS39 INS59 INS42 INS22 INS42 MOV21 MOV21 MOV21 MOV25 MOV21 MOV21 MOV21 MOV54 INS42 MOV22 MOV52 UPD42 MOV42 INS12 INS42 INS10 MOV44 INS8 UPD43 UPD42 INS25 MOV22 UPD42 UPD42 INS27 INS8 INS42 MOV22 INS53 INS14 MOV43 INS27 INS42 INS45 MOV22 INS45 MOV22 INS45 MOV52 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL22 DEL9 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL52 DEL42 DEL22 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL40 DEL22 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL22 DEL32 DEL32 DEL21 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL53 DEL8 DEL25 DEL8 DEL12 DEL39 DEL42 DEL9 DEL59 DEL60 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL38 DEL34 DEL38 DEL27 DEL27 DEL8 DEL61 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL83 DEL39 DEL42 DEL39 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL27 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31