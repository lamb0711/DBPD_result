GEODE-478: Message class length field overflows if size is > 2GB

Message size is now restricted to 1GB.  If this is exceeded a
MessageTooLargeException is thrown.

I think the original intent of this ticket was to have messaging handle
the carving up of the message into multiple Messages somehow, but I think
this is the correct approach.  This will ensure that the problem doesn't
cause the current connection to be terminated and the operation retried
on another server and make sure that the exception gets back to the point
of initiation.

Barry already has a way to avoid large messages in WAN senders that can
be ported to Geode.

+  /**
+   * maximum size of an outgoing message.  See GEODE-478
+   */
+  static final int MAX_MESSAGE_SIZE = Integer.getInteger("gemfire.client.max-message-size", 1073741824).intValue();
+
+  
+  /**
+   * For boundary testing we may need to inject mock parts
+   * @param parts
+   */
+  void setParts(Part[] parts) {
+    this.partsList = parts;
+  }
+      int msgLen = 0;
-        int numOfSecureParts = 0;
-        Part securityPart = this.getSecurityPart();
-        boolean isSecurityHeader = false;
+        long totalPartLen = 0;
+        long headerLen = 0;
+        int partsToTransmit = this.numberOfParts;
-        if (securityPart != null) {
-          isSecurityHeader = true;
-          numOfSecureParts = 1;
-        }
-        else if (this.securePart != null) {
-          // This is a client sending this message.
-          securityPart = this.securePart;
-          isSecurityHeader = true;
-          numOfSecureParts = 1;          
-        }
-
-        int totalPartLen = 0;
-        for (int i=0;i<this.numberOfParts;i++){
+        for (int i=0; i < this.numberOfParts; i++) {
+          headerLen += PART_HEADER_SIZE;
-        if(numOfSecureParts == 1) {
-          totalPartLen += securityPart.getLength();
+        Part securityPart = this.getSecurityPart();
+        if (securityPart == null) {
+          securityPart = this.securePart;
-        int msgLen = (PART_HEADER_SIZE * (this.numberOfParts + numOfSecureParts)) + totalPartLen;
+        if (securityPart != null) {
+          headerLen += PART_HEADER_SIZE;
+          totalPartLen += securityPart.getLength();
+          partsToTransmit++;
+        }
+
+        if ( (headerLen + totalPartLen) > Integer.MAX_VALUE ) {
+          throw new MessageTooLargeException("Message size (" + (headerLen + totalPartLen) 
+              + ") exceeds maximum integer value");
+        }
+        
+        msgLen = (int)(headerLen + totalPartLen);
+        
+        if (msgLen > MAX_MESSAGE_SIZE) {
+          throw new MessageTooLargeException("Message size(" + msgLen
+              + ") exceeds gemfire.client.max-message-size setting (" + MAX_MESSAGE_SIZE + ")");
+        }
+        
-        packHeaderInfoForSending(msgLen, isSecurityHeader);
-        for (int i=0;i<this.numberOfParts + numOfSecureParts;i++) {
-          Part part = null;
-          if(i == this.numberOfParts) {
-            part = securityPart;
-          }
-          else {
-            part = partsList[i];
-          }
+        packHeaderInfoForSending(msgLen, (securityPart != null));
+        for (int i=0; i < partsToTransmit; i++) {
+          Part part = (i == this.numberOfParts) ? securityPart : partsList[i];
+
+          
-            part.sendTo(cb);
+            part.writeTo(cb);
-            // send partBytes
-              part.sendTo(this.sockCh, cb);
+              part.writeTo(this.sockCh, cb);
-              part.sendTo(this.os, cb);
+              part.writeTo(this.os, cb);

INS23 INS31 INS29 INS83 INS83 INS39 INS59 INS29 INS39 INS42 INS44 INS8 INS65 INS42 INS32 INS65 INS65 INS5 INS42 INS21 INS66 INS32 INS42 INS66 INS42 INS43 INS85 INS7 INS42 INS42 INS45 INS34 INS42 INS22 INS42 INS60 INS52 INS42 INS39 INS59 MOV60 MOV25 MOV60 INS42 INS34 MOV25 INS21 INS25 UPD39 UPD39 UPD39 UPD27 MOV27 INS27 INS7 INS27 INS8 UPD42 UPD42 MOV22 INS21 INS42 INS21 INS21 INS36 INS40 INS53 INS42 INS11 INS42 UPD42 MOV42 INS53 INS36 INS42 INS60 INS7 INS7 INS37 INS27 INS14 INS39 INS36 INS14 INS27 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS27 INS43 INS27 INS42 INS33 INS42 INS16 INS42 INS45 INS36 INS45 INS42 INS42 INS42 INS45 UPD42 MOV42 INS45 INS42 INS45 INS36 INS42 MOV2 INS27 MOV27 UPD42 INS42 INS42 UPD42 UPD42 DEL9 DEL52 DEL42 DEL22 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL39 DEL42 DEL27 DEL36 DEL27 DEL36 DEL42 DEL27 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL27 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25