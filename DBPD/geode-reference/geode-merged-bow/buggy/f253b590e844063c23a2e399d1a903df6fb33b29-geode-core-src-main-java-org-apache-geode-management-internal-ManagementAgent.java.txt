GEODE-6283: expose HttpService on InternalCache so that different comâ€¦ (#3110)

* GEODE-6283: expose HttpService on InternalCache so that different component can add their own webapps independently.

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

-import org.eclipse.jetty.server.Server;
-import org.eclipse.jetty.server.ServerConnector;
-import org.eclipse.jetty.webapp.WebAppContext;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.HttpService;
-  private boolean isHttpServiceRunning = false;
-  synchronized boolean isHttpServiceRunning() {
-    return isHttpServiceRunning;
-  }
-  private synchronized void setHttpServiceRunning(boolean isHttpServiceRunning) {
-    this.isHttpServiceRunning = isHttpServiceRunning;
-  }
-
-  private boolean isAPIRestServiceRunning(InternalCache cache) {
-    return (cache != null && cache.getRestAgent() != null && cache.getRestAgent().isRunning());
-  }
-
-  private boolean isServerNode(InternalCache cache) {
-    return (cache.getInternalDistributedSystem().getDistributedMember()
-        .getVmKind() != ClusterDistributionManager.LOCATOR_DM_TYPE
-        && cache.getInternalDistributedSystem().getDistributedMember()
-            .getVmKind() != ClusterDistributionManager.ADMIN_ONLY_DM_TYPE
-        && !cache.isClient());
-  }
-
-  public synchronized void startAgent(InternalCache cache) {
-    // Do not start Management REST service if developer REST service is already
-    // started.
-
-    if (!isAPIRestServiceRunning(cache)) {
-      startHttpService(isServerNode(cache));
-    } else {
-      if (logger.isDebugEnabled()) {
-        logger.debug(
-            "Developer REST APIs webapp is already running, Not Starting M&M REST and pulse!");
-      }
-    }
+  public synchronized void startAgent() {
+    loadWebApplications();
-    stopHttpService();
-
-  public WebAppContext addWebApplication(String webAppContext, String warFilePath,
-      Pair<String, Object>... attributeNameValuePairs) {
-    if (httpServer == null) {
-      logger.info(
-          String.format("unable to add %s webapp. Http service is not started on this member.",
-              webAppContext));
-      return null;
-    }
-
-    return JettyHelper
-        .addWebApplication(httpServer, webAppContext, warFilePath, attributeNameValuePairs);
-  }
-
-  private Server httpServer;
-  private void startHttpService(boolean isServer) {
+  private void loadWebApplications() {
-    if (this.config.getHttpServicePort() != 0) {
+    if (this.config.getHttpServicePort() == 0) {
+      setStatusMessage(managerBean,
+          "Embedded HTTP server configured not to start (http-service-port=0) or (jmx-manager-http-port=0)");
+      return;
+    }
+
+    // Find the Management rest WAR file
+    final String adminRestWar = agentUtil.findWarLocation("geode-web");
+    if (adminRestWar == null) {
-        logger.debug("Attempting to start HTTP service on port ({}) at bind-address ({})...",
-            this.config.getHttpServicePort(), this.config.getHttpServiceBindAddress());
+        logger.debug(
+            "Unable to find Geode V1 Management REST API WAR file; the Management REST Interface for Geode will not be accessible.");
+    }
-      // Find the Management WAR file
-      final String gemfireWar = agentUtil.findWarLocation("geode-web");
-      if (gemfireWar == null) {
-        if (logger.isDebugEnabled()) {
-          logger.debug(
-              "Unable to find Geode V1 Management REST API WAR file; the Management REST Interface for Geode will not be accessible.");
-        }
+    // Find the Pulse WAR file
+    final String pulseWar = agentUtil.findWarLocation("geode-pulse");
+
+    if (pulseWar == null) {
+      final String message =
+          "Unable to find Pulse web application WAR file; Pulse for Geode will not be accessible";
+      setStatusMessage(managerBean, message);
+      if (logger.isDebugEnabled()) {
+        logger.debug(message);
-
-      // Find the Pulse WAR file
-      final String pulseWar = agentUtil.findWarLocation("geode-pulse");
-
-      if (pulseWar == null) {
-        final String message =
-            "Unable to find Pulse web application WAR file; Pulse for Geode will not be accessible";
-        setStatusMessage(managerBean, message);
-        if (logger.isDebugEnabled()) {
-          logger.debug(message);
-        }
-      } else {
-        String pwFile = this.config.getJmxManagerPasswordFile();
-        if (securityService.isIntegratedSecurity() || StringUtils.isNotBlank(pwFile)) {
-          System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
-        }
+    } else {
+      String pwFile = this.config.getJmxManagerPasswordFile();
+      if (securityService.isIntegratedSecurity() || StringUtils.isNotBlank(pwFile)) {
+        System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
+    }
-      // Find developer REST WAR file
-      final String gemfireAPIWar = agentUtil.findWarLocation("geode-web-api");
-      if (gemfireAPIWar == null) {
-        final String message =
-            "Unable to find Geode Developer REST API WAR file; the Developer REST Interface for Geode will not be accessible.";
-        setStatusMessage(managerBean, message);
-        if (logger.isDebugEnabled()) {
-          logger.debug(message);
+    try {
+      if (agentUtil.isAnyWarFileAvailable(adminRestWar, pulseWar)) {
+
+        final String bindAddress = this.config.getHttpServiceBindAddress();
+        final int port = this.config.getHttpServicePort();
+
+        Pair<String, Object> securityServiceAttr =
+            new ImmutablePair<>(HttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+                securityService);
+        Pair<String, Object> sslConfigAttr =
+            new ImmutablePair<>(HttpService.GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM,
+                createSslProps());
+
+        HttpService httpService = cache.getHttpService();
+        // if jmx manager is running, admin rest should be available, either on locator or server
+        if (agentUtil.isAnyWarFileAvailable(adminRestWar)) {
+          httpService.addWebApplication("/gemfire", adminRestWar, securityServiceAttr);
+          httpService.addWebApplication("/geode-mgmt", adminRestWar, securityServiceAttr);
-      }
-      try {
-        if (agentUtil.isAnyWarFileAvailable(gemfireWar, pulseWar, gemfireAPIWar)) {
-
-          final String bindAddress = this.config.getHttpServiceBindAddress();
-          final int port = this.config.getHttpServicePort();
-
-          boolean isRestWebAppAdded = false;
-
-          this.httpServer = JettyHelper.initJetty(bindAddress, port, SSLConfigurationFactory
-              .getSSLConfigForComponent(config, SecurableCommunicationChannel.WEB));
-
-          Pair<String, Object> securityServiceAttr =
-              new ImmutablePair<>(JettyHelper.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
-                  securityService);
-          Pair<String, Object> sslConfigAttr =
-              new ImmutablePair<>(JettyHelper.GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM,
-                  createSslProps());
-
-          // if jmx manager is running, admin rest should be available, either on locator or server
-          if (agentUtil.isAnyWarFileAvailable(gemfireWar)) {
-            addWebApplication("/gemfire", gemfireWar, securityServiceAttr);
-            addWebApplication("/geode-mgmt", gemfireWar, securityServiceAttr);
-          }
-
-          // if jmx manager is running, pulse should be available, either on locator or server
-          // we need to pass in the sllConfig to pulse because it needs it to make jmx connection
-          if (agentUtil.isAnyWarFileAvailable(pulseWar)) {
-            addWebApplication("/pulse", pulseWar, securityServiceAttr, sslConfigAttr);
-          }
-
-          // the dev rest api is only available on servers
-          if (isServer && this.config.getStartDevRestApi()) {
-            if (agentUtil.isAnyWarFileAvailable(gemfireAPIWar)) {
-              addWebApplication("/geode", gemfireAPIWar, securityServiceAttr);
-              addWebApplication("/gemfire-api", gemfireAPIWar, securityServiceAttr);
-              isRestWebAppAdded = true;
-            }
-          } else {
-            final String message =
-                "Developer REST API web application will not start when start-dev-rest-api is not set and node is not server";
-            setStatusMessage(managerBean, message);
-            if (logger.isDebugEnabled()) {
-              logger.debug(message);
-            }
-          }
-
-          if (logger.isDebugEnabled()) {
-            logger.debug("Starting HTTP embedded server on port ({}) at bind-address ({})...",
-                ((ServerConnector) this.httpServer.getConnectors()[0]).getPort(), bindAddress);
-          }
-
+        // if jmx manager is running, pulse should be available, either on locator or server
+        // we need to pass in the sllConfig to pulse because it needs it to make jmx connection
+        if (agentUtil.isAnyWarFileAvailable(pulseWar)) {
+          httpService.addWebApplication("/pulse", pulseWar, securityServiceAttr, sslConfigAttr);
-          this.httpServer = JettyHelper.startJetty(this.httpServer);
-
-          // now, that Tomcat has been started, we can set the URL used by web
-          // clients to connect to Pulse
-          if (agentUtil.isAnyWarFileAvailable(pulseWar)) {
-            managerBean.setPulseURL("http://".concat(getHost(bindAddress)).concat(":")
-                .concat(String.valueOf(port)).concat("/pulse/"));
-          }
-
-          // set cache property for developer REST service running
-          if (isRestWebAppAdded) {
-            cache.setRESTServiceRunning(true);
-            // create region to hold query information (queryId, queryString).
-            // Added for the developer REST APIs
-            RestAgent.createParameterizedQueryRegion();
-          }
-
-          // set true for HTTP service running
-          setHttpServiceRunning(true);
+          managerBean.setPulseURL("http://".concat(getHost(bindAddress)).concat(":")
+              .concat(String.valueOf(port)).concat("/pulse/"));
-      } catch (Exception e) {
-        stopHttpService();// Jetty needs to be stopped even if it has failed to
-        // start. Some of the threads are left behind even if
-        // server.start() fails due to an exception
-        setStatusMessage(managerBean, "HTTP service failed to start with "
-            + e.getClass().getSimpleName() + " '" + e.getMessage() + "'");
-        throw new ManagementException("HTTP service failed to start", e);
-    } else {
-      setStatusMessage(managerBean,
-          "Embedded HTTP server configured not to start (http-service-port=0) or (jmx-manager-http-port=0)");
+    } catch (Exception e) {
+      setStatusMessage(managerBean, "HTTP service failed to start with "
+          + e.getClass().getSimpleName() + " '" + e.getMessage() + "'");
+      throw new ManagementException("HTTP service failed to start", e);
-  private void stopHttpService() {
-    if (this.httpServer != null) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("Stopping the HTTP service...");
-      }
-      try {
-        this.httpServer.stop();
-      } catch (Exception e) {
-        logger.warn("Failed to stop the HTTP service because: {}", e.getMessage(), e);
-      } finally {
-        try {
-          this.httpServer.destroy();
-        } catch (Exception ignore) {
-          logger.info("Failed to properly release resources held by the HTTP service: {}",
-              ignore.getMessage(), ignore);
-        } finally {
-          this.httpServer = null;
-          System.clearProperty("catalina.base");
-          System.clearProperty("catalina.home");
-        }
-      }
-    }
-  }
-

MOV26 UPD40 UPD42 MOV8 MOV25 MOV21 MOV60 MOV60 UPD27 MOV27 UPD42 MOV21 INS41 UPD42 UPD42 MOV42 UPD42 INS60 MOV74 INS43 INS59 MOV32 INS42 INS42 INS32 UPD42 MOV21 MOV21 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 UPD40 UPD40 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL36 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL33 DEL27 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL34 DEL2 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL54 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31