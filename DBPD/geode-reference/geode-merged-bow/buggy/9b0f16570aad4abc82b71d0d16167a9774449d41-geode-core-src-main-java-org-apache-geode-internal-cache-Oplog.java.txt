GEODE-2398: Retry oplog channel.write on silent failures

Implemented limited retries in two forms of Oplog.flush() when channel.write() is called.
If write() returns bytes witten less than the change in the ByteBuffer positions, then reset
buffer positions and re-try writing for a liomited number of times. Throws
IOException if the write doesn't succeeded after a few retries (max
number of retries is defined by a static).

Added new unit tests.

+  private static final int MAX_CHANNEL_RETRIES = 5;
+
+    int flushed;
+    int channelBytesWritten;
+    int numChannelRetries = 0;
+    int bbStartPos;
+    long channelStartPos;
-          int flushed = 0;
+          flushed = 0;
-            flushed += olf.channel.write(bb);
+            channelBytesWritten = 0;
+            bbStartPos = bb.position();
+            channelStartPos = olf.channel.position();
+            // differentiate between bytes written on this channel.write() iteration and the
+            // total number of bytes written to the channel on this call
+            channelBytesWritten = olf.channel.write(bb);
+            flushed += channelBytesWritten;
+            // Expect channelBytesWritten and the changes in pp.position() and channel.position() to
+            // be the same. If they are not, then the channel.write() silently failed. The following
+            // retry separates spurious failures from permanent channel failures.
+            if (channelBytesWritten != bb.position() - bbStartPos) {
+              if (numChannelRetries++ < MAX_CHANNEL_RETRIES) {
+                // Reset the ByteBuffer position, but take into account anything that did get
+                // written to the channel
+                bb.position(bbStartPos + (int) (olf.channel.position() - channelStartPos));
+              } else {
+                throw new IOException("Failed to write Oplog entry to" + olf.f.getName());
+              }
+            }
+      long channelStartPos;
+      long expectedWritten;
+      long flushed;
+      int numChannelRetries = 0;
+      boolean retryWrite = false;
-        long flushed = olf.channel.write(this.bbArray);
+        int b1StartPos = b1.position();
+        int b2StartPos = b2.position();
+        expectedWritten = b1.limit() - b1StartPos + b2.limit() - b2StartPos;
+        channelStartPos = olf.channel.position();
+
+        do {
+          retryWrite = false;
+          flushed = olf.channel.write(this.bbArray);
+          if (flushed != expectedWritten) {
+            if (numChannelRetries++ < MAX_CHANNEL_RETRIES) {
+              retryWrite = true;
+              olf.channel.position(channelStartPos);
+              b1.position(b1StartPos);
+              b2.position(b2StartPos);
+            } else {
+              throw new IOException("Failed to write Oplog entry to" + olf.f.getName());
+            }
+          }
+        } while (retryWrite);
+  /**
+   * Method to be used only for testing
+   * 
+   * @param ch Object to replace the channel in the Oplog.crf
+   * @return original channel object
+   */
+  UninterruptibleFileChannel testSetCrfChannel(UninterruptibleFileChannel ch) {
+    UninterruptibleFileChannel chPrev = this.crf.channel;
+    this.crf.channel = ch;
+    return chPrev;
+  }
+

INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS29 INS43 INS42 INS44 INS8 INS42 INS34 INS60 INS60 INS60 INS60 INS60 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS21 INS41 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS42 INS42 INS22 INS22 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS9 INS60 INS21 INS21 INS19 INS52 INS42 INS52 INS42 UPD39 INS39 INS59 INS7 INS7 INS8 INS42 INS21 UPD42 INS32 INS42 INS32 INS42 INS27 INS42 INS32 INS21 INS21 INS25 INS7 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS40 INS42 INS7 INS7 INS27 INS8 INS42 INS34 INS21 INS21 INS21 MOV21 INS21 INS25 INS27 INS32 INS42 INS9 INS42 MOV32 INS42 INS42 INS25 INS7 INS7 INS7 UPD7 INS7 INS27 INS8 INS32 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS34 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS27 INS25 INS42 INS42 INS37 INS42 INS21 INS21 INS21 INS21 INS53 INS42 INS42 INS40 INS42 INS32 INS42 INS27 INS8 INS8 INS42 INS7 INS32 INS32 INS32 INS14 INS42 INS42 INS37 INS42 INS21 INS53 INS42 INS9 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS32 INS14 INS42 INS45 INS32 INS42 INS42 INS27 INS43 INS27 INS40 INS42 INS42 INS11 INS42 INS45 INS32 INS39 INS36 INS40 INS42 INS27 INS32 INS42 INS40 INS42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL8