GEODE-5485: Cleanup AsyncEventQueueFactoryImpl and create unit test

+import static org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId;
+
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-   * Used internally to pass the attributes from this factory to the real GatewaySender it is
-   * creating.
-   */
-  private GatewaySenderAttributes attrs = new GatewaySenderAttributes();
-
-  private InternalCache cache;
-
-  /**
+  private final InternalCache cache;
+
+  /**
+   * Used internally to pass the attributes from this factory to the real GatewaySender it is
+   * creating.
+   */
+  private final GatewaySenderAttributes gatewaySenderAttributes;
+
+    this(cache, new GatewaySenderAttributes(), DEFAULT_BATCH_TIME_INTERVAL);
+  }
+
+  AsyncEventQueueFactoryImpl(InternalCache cache, GatewaySenderAttributes gatewaySenderAttributes,
+      int batchTimeInterval) {
-    this.attrs = new GatewaySenderAttributes();
+    this.gatewaySenderAttributes = gatewaySenderAttributes;
-    this.attrs.batchTimeInterval = DEFAULT_BATCH_TIME_INTERVAL;
+    this.gatewaySenderAttributes.batchTimeInterval = batchTimeInterval;
-    this.attrs.batchSize = size;
+    gatewaySenderAttributes.batchSize = size;
+  @Override
-    this.attrs.isPersistenceEnabled = isPersistent;
+    gatewaySenderAttributes.isPersistenceEnabled = isPersistent;
-    this.attrs.diskStoreName = name;
+    gatewaySenderAttributes.diskStoreName = name;
-    this.attrs.maximumQueueMemory = memory;
+    gatewaySenderAttributes.maximumQueueMemory = memory;
-    this.attrs.isDiskSynchronous = isSynchronous;
+    gatewaySenderAttributes.isDiskSynchronous = isSynchronous;
-    this.attrs.batchTimeInterval = batchTimeInterval;
+    gatewaySenderAttributes.batchTimeInterval = batchTimeInterval;
-    this.attrs.isBatchConflationEnabled = isConflation;
+    gatewaySenderAttributes.isBatchConflationEnabled = isConflation;
-    this.attrs.dispatcherThreads = numThreads;
+    gatewaySenderAttributes.dispatcherThreads = numThreads;
-    this.attrs.policy = policy;
+    gatewaySenderAttributes.policy = policy;
-    this.attrs.addGatewayEventFilter(filter);
+    gatewaySenderAttributes.addGatewayEventFilter(filter);
-    this.attrs.eventFilters.remove(filter);
+    gatewaySenderAttributes.eventFilters.remove(filter);
-    this.attrs.eventSubstitutionFilter = filter;
+    gatewaySenderAttributes.eventSubstitutionFilter = filter;
-    this.attrs.addAsyncEventListener(listener);
+    gatewaySenderAttributes.addAsyncEventListener(listener);
+  @Override
-    AsyncEventQueue asyncEventQueue = null;
-    if (this.cache instanceof GemFireCacheImpl) {
+    AsyncEventQueue asyncEventQueue;
+
+    if (cache instanceof CacheCreation) {
+      asyncEventQueue =
+          new AsyncEventQueueCreation(asyncQueueId, gatewaySenderAttributes, listener);
+      ((CacheCreation) cache).addAsyncEventQueue(asyncEventQueue);
+    } else {
-      GatewaySender sender =
-          create(AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId(asyncQueueId));
-      AsyncEventQueueImpl queue = new AsyncEventQueueImpl(sender, listener);
-      asyncEventQueue = queue;
-      this.cache.addAsyncEventQueue(queue);
-      if (!this.attrs.isManualStart()) {
+      GatewaySender sender = create(getSenderIdFromAsyncEventQueueId(asyncQueueId));
+      AsyncEventQueueImpl asyncEventQueueImpl = new AsyncEventQueueImpl(sender, listener);
+      asyncEventQueue = asyncEventQueueImpl;
+      cache.addAsyncEventQueue(asyncEventQueueImpl);
+      if (!gatewaySenderAttributes.isManualStart()) {
-    } else if (this.cache instanceof CacheCreation) {
-      asyncEventQueue = new AsyncEventQueueCreation(asyncQueueId, attrs, listener);
-      ((CacheCreation) cache).addAsyncEventQueue(asyncEventQueue);
+
-    this.attrs.id = id;
-    GatewaySender sender = null;
+    gatewaySenderAttributes.id = id;
-    if (this.attrs.getDispatcherThreads() <= 0) {
+    if (gatewaySenderAttributes.getDispatcherThreads() <= 0) {
-    if (this.attrs.isParallel()) {
-      if ((this.attrs.getOrderPolicy() != null)
-          && this.attrs.getOrderPolicy().equals(OrderPolicy.THREAD)) {
+    GatewaySender sender;
+    if (gatewaySenderAttributes.isParallel()) {
+      if (gatewaySenderAttributes.getOrderPolicy() != null
+          && gatewaySenderAttributes.getOrderPolicy().equals(OrderPolicy.THREAD)) {
-                .toLocalizedString(id, this.attrs.getOrderPolicy()));
+                .toLocalizedString(id, gatewaySenderAttributes.getOrderPolicy()));
-      if (this.cache instanceof GemFireCacheImpl) {
-        sender = new ParallelAsyncEventQueueImpl(this.cache, this.attrs);
-        this.cache.addGatewaySender(sender);
-      } else if (this.cache instanceof CacheCreation) {
-        sender = new ParallelAsyncEventQueueCreation(this.cache, this.attrs);
-        ((CacheCreation) this.cache).addGatewaySender(sender);
+      if (cache instanceof CacheCreation) {
+        sender = new ParallelAsyncEventQueueCreation(cache, gatewaySenderAttributes);
+      } else {
+        sender = new SerialAsyncEventQueueImpl(cache, gatewaySenderAttributes);
+      cache.addGatewaySender(sender);
+
-      if (this.attrs.getOrderPolicy() == null && this.attrs.getDispatcherThreads() > 1) {
-        this.attrs.policy = GatewaySender.DEFAULT_ORDER_POLICY;
+      if (gatewaySenderAttributes.getOrderPolicy() == null
+          && gatewaySenderAttributes.getDispatcherThreads() > 1) {
+        gatewaySenderAttributes.policy = GatewaySender.DEFAULT_ORDER_POLICY;
-      if (this.cache instanceof GemFireCacheImpl) {
-        sender = new SerialAsyncEventQueueImpl(this.cache, this.attrs);
-        this.cache.addGatewaySender(sender);
-      } else if (this.cache instanceof CacheCreation) {
-        sender = new SerialAsyncEventQueueCreation(this.cache, this.attrs);
-        ((CacheCreation) this.cache).addGatewaySender(sender);
+
+      if (cache instanceof CacheCreation) {
+        sender = new SerialAsyncEventQueueCreation(cache, gatewaySenderAttributes);
+      } else {
+        sender = new SerialAsyncEventQueueImpl(cache, gatewaySenderAttributes);
+      cache.addGatewaySender(sender);
-    this.attrs.batchSize = asyncQueueCreation.getBatchSize();
-    this.attrs.batchTimeInterval = asyncQueueCreation.getBatchTimeInterval();
-    this.attrs.isBatchConflationEnabled = asyncQueueCreation.isBatchConflationEnabled();
-    this.attrs.isPersistenceEnabled = asyncQueueCreation.isPersistent();
-    this.attrs.diskStoreName = asyncQueueCreation.getDiskStoreName();
-    this.attrs.isDiskSynchronous = asyncQueueCreation.isDiskSynchronous();
-    this.attrs.maximumQueueMemory = asyncQueueCreation.getMaximumQueueMemory();
-    this.attrs.isParallel = asyncQueueCreation.isParallel();
-    this.attrs.isBucketSorted = ((AsyncEventQueueCreation) asyncQueueCreation).isBucketSorted();
-    this.attrs.dispatcherThreads = asyncQueueCreation.getDispatcherThreads();
-    this.attrs.policy = asyncQueueCreation.getOrderPolicy();
-    this.attrs.eventFilters = asyncQueueCreation.getGatewayEventFilters();
-    this.attrs.eventSubstitutionFilter = asyncQueueCreation.getGatewayEventSubstitutionFilter();
-    this.attrs.isForInternalUse = true;
-    this.attrs.forwardExpirationDestroy = asyncQueueCreation.isForwardExpirationDestroy();
+    gatewaySenderAttributes.batchSize = asyncQueueCreation.getBatchSize();
+    gatewaySenderAttributes.batchTimeInterval = asyncQueueCreation.getBatchTimeInterval();
+    gatewaySenderAttributes.isBatchConflationEnabled =
+        asyncQueueCreation.isBatchConflationEnabled();
+    gatewaySenderAttributes.isPersistenceEnabled = asyncQueueCreation.isPersistent();
+    gatewaySenderAttributes.diskStoreName = asyncQueueCreation.getDiskStoreName();
+    gatewaySenderAttributes.isDiskSynchronous = asyncQueueCreation.isDiskSynchronous();
+    gatewaySenderAttributes.maximumQueueMemory = asyncQueueCreation.getMaximumQueueMemory();
+    gatewaySenderAttributes.isParallel = asyncQueueCreation.isParallel();
+    gatewaySenderAttributes.isBucketSorted =
+        ((AsyncEventQueueCreation) asyncQueueCreation).isBucketSorted();
+    gatewaySenderAttributes.dispatcherThreads = asyncQueueCreation.getDispatcherThreads();
+    gatewaySenderAttributes.policy = asyncQueueCreation.getOrderPolicy();
+    gatewaySenderAttributes.eventFilters = asyncQueueCreation.getGatewayEventFilters();
+    gatewaySenderAttributes.eventSubstitutionFilter =
+        asyncQueueCreation.getGatewayEventSubstitutionFilter();
+    gatewaySenderAttributes.isForInternalUse = true;
+    gatewaySenderAttributes.forwardExpirationDestroy =
+        asyncQueueCreation.isForwardExpirationDestroy();
+  @Override
-    this.attrs.isParallel = isParallel;
+    gatewaySenderAttributes.isParallel = isParallel;
-    this.attrs.isBucketSorted = isbucketSorted;
+    gatewaySenderAttributes.isBucketSorted = isbucketSorted;
-    this.attrs.isMetaQueue = isMetaQueue;
+    gatewaySenderAttributes.isMetaQueue = isMetaQueue;
-    this.attrs.forwardExpirationDestroy = forward;
+    gatewaySenderAttributes.forwardExpirationDestroy = forward;

MOV26 MOV23 MOV23 MOV31 UPD40 INS31 INS31 INS83 INS83 MOV83 MOV42 INS44 INS8 INS42 MOV44 INS44 INS44 MOV8 INS78 UPD42 UPD42 INS78 MOV60 INS78 INS42 INS43 INS42 INS17 INS43 INS42 INS39 INS42 MOV41 INS42 MOV41 MOV41 MOV41 MOV41 MOV41 MOV41 MOV41 INS42 INS42 MOV41 MOV41 MOV41 MOV41 INS42 INS42 MOV14 INS42 INS42 MOV8 INS42 UPD42 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 MOV43 INS40 INS42 INS42 INS25 MOV21 INS25 MOV21 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS40 INS40 INS42 INS40 UPD42 UPD42 MOV42 INS42 MOV62 MOV8 INS8 MOV62 MOV8 INS8 UPD42 UPD42 UPD42 INS42 UPD42 INS27 INS42 MOV21 INS42 INS42 MOV21 INS42 UPD42 INS42 MOV32 MOV33 INS42 INS42 INS42 INS42 INS40 MOV43 INS42 INS42 INS43 INS42 INS42 MOV43 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL14 DEL31 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL36 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL52 DEL42 DEL22 DEL42 DEL43 DEL62 DEL8 DEL25 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL52 DEL42 DEL22 DEL42 DEL43 DEL62 DEL52 DEL42 DEL22 DEL62 DEL8 DEL25 DEL25 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22