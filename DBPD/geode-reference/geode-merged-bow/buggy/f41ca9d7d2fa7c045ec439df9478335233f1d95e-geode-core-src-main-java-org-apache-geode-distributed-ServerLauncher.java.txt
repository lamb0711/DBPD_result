GEODE-3277: Fix error path constructors of Launcher inner State classess

Updated tests for changes in the error constructors for ServerState and
LocatorState.

Minor spelling corrections.

+import java.io.UncheckedIOException;
-import org.apache.geode.internal.process.StartupStatusListener;
+import org.apache.geode.management.internal.cli.util.HostUtils;
- * 
+ *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    return this.serverBindAddress;
+    if (serverBindAddress != null) {
+      return this.serverBindAddress;
+    }
+
+    try {
+      return SocketCreator.getLocalHost();
+    } catch (UnknownHostException handled) {
+      // Returning loopback implies the serverBindAddress was null and no IP address
+      // for localhost could be found
+      return InetAddress.getLoopbackAddress();
+    }
-   * 
+   *
-   * 
+   *
-      // NOTE returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
+      // Returning localhost/127.0.0.1 implies the serverBindAddress was null and no IP address
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-            new StartupStatusListener() {
-              @Override
-              public void setStatus(final String statusMessage) {
-                debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
-                ServerLauncher.this.statusMessage = statusMessage;
-              }
+            (String statusMessage) -> {
+              debug("Callback setStatus(String) called with message (%1$s)...", statusMessage);
+              ServerLauncher.this.statusMessage = statusMessage;
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-
-    debug(
-        "This ServerLauncher was not the instance used to launch the GemFire Cache Server, and neither PID "
-            .concat("nor working directory were specified; the Server's state is unknown.%n"));
+    debug("This ServerLauncher was not the instance used to launch the GemFire Cache Server, and "
+        + "neither PID nor working directory were specified; the Server's state is unknown.%n");
-   * 
+   *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-          : Collections.<String>emptyList();
+          : Collections.emptyList();
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-   * 
+   *
-     * 
+     *
-          null, // serverLocation
+          getServerLocation(launcher), // serverLocation
-          Collections.<String>emptyList(), // jvmArguments
+          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
-          null, // javaVersion
+          System.getProperty("java.version"), // javaVersion
-          null, // host
-          null, // port
+          getServerBindAddress(launcher).getCanonicalHostName(), // host
+          launcher.getServerPortAsString(), // port
+    /*
+     * Guards against throwing NPEs due to incorrect or missing host information while constructing
+     * error states
+     */
+    private static String getServerLocation(ServerLauncher launcher) {
+      if (launcher.getServerPort() == null) {
+        return launcher.getId();
+      }
+      if (launcher.getServerBindAddress() == null) {
+        return HostUtils.getLocatorId(HostUtils.getLocalHost(), launcher.getServerPort());
+      }
+      return HostUtils.getLocatorId(launcher.getServerBindAddress().getCanonicalHostName(),
+          launcher.getServerPort());
+    }
+
-
-
+    private static InetAddress getServerBindAddress(final ServerLauncher launcher) {
+      final InternalCache internalCache = GemFireCacheImpl.getInstance();
+
+      if (internalCache != null) {
+        final List<CacheServer> csList = internalCache.getCacheServers();
+        if (csList != null && !csList.isEmpty()) {
+          final CacheServer cs = csList.get(0);
+          final InetAddress serverBindAddress;
+          try {
+            serverBindAddress = InetAddress.getByName(cs.getBindAddress());
+          } catch (UnknownHostException e) {
+            throw new UncheckedIOException(e);
+          }
+          if (serverBindAddress != null) {
+            return serverBindAddress;
+          }
+        }
+      }
+      return launcher.getServerBindAddress();
+    }
+
-
-

MOV26 INS26 INS40 UPD40 INS8 INS31 INS31 INS25 INS54 INS83 INS83 MOV43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS27 MOV8 INS8 INS12 INS43 INS42 INS25 INS25 INS41 INS42 INS83 INS43 INS42 INS60 INS25 INS41 INS42 INS33 INS41 INS44 INS8 INS27 INS32 INS32 INS32 INS32 INS32 INS42 INS27 INS8 INS27 INS8 INS32 INS42 INS83 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS42 INS41 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS33 INS41 INS32 INS33 INS41 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS83 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS60 INS60 INS54 INS25 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS27 INS8 MOV44 MOV8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS41 INS42 INS42 INS34 INS7 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL45 DEL42 DEL45 DEL32 DEL42 DEL43 DEL33 DEL32 DEL33 DEL33 DEL33