GEODE-3434: Allow the modules to be interoperable with current and older versions of tomcat 7

  * Modified DeltaSessions to use reflection to handle attributes fields incase an earlier tomcat 7 is used
  * Modified DeltaSession7 and DeltaSession8 to extend from DeltaSession
  * Added session backward compatibility tests
  * Modified aseembly build to download old product installs
  * Minor refactor of VersionManager to reuse property file load code

-  private static final String DEFAULT_MODULE_LOCATION = GEODE_BUILD_HOME + "/tools/Modules/";
+  protected static final String DEFAULT_MODULE_LOCATION = GEODE_BUILD_HOME + "/tools/Modules/";
+  public ContainerInstall(String installDir, String downloadURL, ConnectionType connType,
+      String moduleName) throws IOException {
+    this(installDir, downloadURL, connType, moduleName, DEFAULT_MODULE_LOCATION);
+  }
+
-   *
+   * 
-      String moduleName) throws IOException {
+      String moduleName, String geodeModuleLocation) throws IOException {
-    // Removes previous run stuff (modules, installs, etc.)
-    clearPreviousRuns();
+    clearPreviousInstall(installDir);
-    MODULE_PATH = findAndExtractModule(moduleName);
+    MODULE_PATH = findAndExtractModule(geodeModuleLocation, moduleName);
-  public void clearPreviousRuns() throws IOException {
-    File modulesFolder = new File(DEFAULT_MODULE_EXTRACTION_DIR);
-    File installsFolder = new File(DEFAULT_INSTALL_DIR);
-
-    // Remove default modules extraction from previous runs
-    if (modulesFolder.exists()) {
-      FileUtils.deleteDirectory(modulesFolder);
-    }
-    // Remove default installs from previous runs
-    if (installsFolder.exists()) {
-      FileUtils.deleteDirectory(installsFolder);
+  public void clearPreviousInstall(String installDir) throws IOException {
+    File installFolder = new File(installDir);
+    // Remove installs from previous runs in the same folder
+    if (installFolder.exists()) {
+      logger.info("Deleting previous install folder " + installFolder.getAbsolutePath());
+      FileUtils.deleteDirectory(installFolder);
-   *
+   * 
-   *
+   * 
-   * @throws IOException
-  protected static String findAndExtractModule(String moduleName) throws IOException {
+  protected static String findAndExtractModule(String geodeModuleLocation, String moduleName)
+      throws IOException {
-    File modulesDir = new File(DEFAULT_MODULE_LOCATION);
+    File modulesDir = new File(geodeModuleLocation);
-        if (!archive)
+        if (!archive) {
+        }
+    String extractedModulePath =
+        modulePath.getName().substring(0, modulePath.getName().length() - 4);
+    // Get the name of the new module folder within the extraction directory
+    File newModuleFolder = new File(DEFAULT_MODULE_EXTRACTION_DIR + extractedModulePath);
+    // Remove any previous module folders extracted here
+    if (newModuleFolder.exists()) {
+      logger.info("Deleting previous modules directory " + newModuleFolder.getAbsolutePath());
+      FileUtils.deleteDirectory(newModuleFolder);
+    }
+
-      // Get the name of the new module folder within the extraction directory
-      File newModuleFolder = new File(DEFAULT_MODULE_EXTRACTION_DIR
-          + modulePath.getName().substring(0, modulePath.getName().length() - 4));
-
-    if (modulePath == null)
+    if (modulePath == null) {
+    }
-   *
+   * 
-    if (append)
+    if (append) {
-    else
+    } else {
+    }
-   *
+   * 
-        if (tagId != null)
+        if (tagId != null) {
+        }
-        for (String key : attributes.keySet())
+        for (String key : attributes.keySet()) {
+        }
-   *
+   * 
-    if (nodes == null)
+    if (nodes == null) {
+    }
-      if (nodeAttr != null && nodeAttr.getTextContent().equals(value))
+      if (nodeAttr != null && nodeAttr.getTextContent().equals(value)) {
+      }
-   *
+   * 
-    while (nodeAttrs.getLength() > 0)
+    while (nodeAttrs.getLength() > 0) {
+    }
-    for (String key : attributes.keySet())
+    for (String key : attributes.keySet()) {
+    }
-   *
+   * 

INS31 INS31 UPD83 MOV83 UPD42 MOV42 INS44 INS44 INS44 INS44 INS43 INS8 INS44 MOV29 INS83 INS39 INS42 INS44 MOV43 INS8 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS17 INS43 INS42 INS43 INS42 MOV60 MOV25 INS43 INS42 MOV60 INS60 INS25 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 INS43 MOV43 INS59 INS32 INS8 INS8 INS8 INS8 INS8 INS8 INS8 UPD42 INS42 UPD42 UPD42 INS21 INS42 UPD42 MOV32 INS42 INS14 INS42 INS42 INS21 INS21 MOV53 MOV21 MOV21 MOV41 MOV21 MOV21 INS42 MOV43 UPD42 INS32 MOV43 UPD42 MOV43 INS27 INS32 INS32 INS8 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 MOV41 INS45 INS32 INS8 INS45 INS32 INS8 INS8 INS42 INS42 INS10 INS42 INS42 MOV21 MOV21 DEL39 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL65 DEL10 DEL42 DEL27 DEL14