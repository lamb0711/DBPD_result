Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Abstract implementation class of RegionEntry interface.
- * This is adds Disk support behavior
+ * Abstract implementation class of RegionEntry interface. This is adds Disk support behavior
-public abstract class AbstractOplogDiskRegionEntry
-  extends AbstractDiskRegionEntry
-{
+public abstract class AbstractOplogDiskRegionEntry extends AbstractDiskRegionEntry {
-  
+
-  public final void removePhase1(LocalRegion r, boolean isClear) throws RegionClearedException
-  {
+  public final void removePhase1(LocalRegion r, boolean isClear) throws RegionClearedException {
+
-  
+
-  public final boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry, ByteArrayDataInput in, DM mgr) {
+  public final boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
+      ByteArrayDataInput in, DM mgr) {
-  
+
-  public final Object getValue(RegionEntryContext context) {   
-    return Helper.faultInValue(this, (LocalRegion) context);  // OFFHEAP returned to callers
+  public final Object getValue(RegionEntryContext context) {
+    return Helper.faultInValue(this, (LocalRegion) context); // OFFHEAP returned to callers
-  
+
-  public final Object getValueRetain(RegionEntryContext context) {   
+  public final Object getValueRetain(RegionEntryContext context) {
-  
+
+
-  public final Object getValueOnDisk(LocalRegion r)
-  throws EntryNotFoundException
-  {
+  public final Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
-  public final Object getSerializedValueOnDisk(LocalRegion r)
-    throws EntryNotFoundException
-  {
+  public final Object getSerializedValueOnDisk(LocalRegion r) throws EntryNotFoundException {
-  public final Object getValueOnDiskOrBuffer(LocalRegion r)
-    throws EntryNotFoundException
-  {
+  public final Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+
+
+
-  /* 
-   * If detected a conflict event, persist region needs to persist both the
-   * golden copy and conflict tag
+  /*
+   * If detected a conflict event, persist region needs to persist both the golden copy and conflict
+   * tag
-  
+
-   * Process a version tag. This overrides AbtractRegionEntry so
-   * we can check to see if the old value was recovered from disk.
-   * If so, we don't check for conflicts.
+   * Process a version tag. This overrides AbtractRegionEntry so we can check to see if the old
+   * value was recovered from disk. If so, we don't check for conflicts.
-    if(did != null) {
-      LocalRegion lr = (LocalRegion)cacheEvent.getRegion();
+    if (did != null) {
+      LocalRegion lr = (LocalRegion) cacheEvent.getRegion();
-        synchronized(did) {
+        synchronized (did) {
-    
+
-   * Returns true if the DiskEntry value is equal to {@link Token#DESTROYED}, {@link Token#REMOVED_PHASE1}, or {@link Token#REMOVED_PHASE2}.
+   * Returns true if the DiskEntry value is equal to {@link Token#DESTROYED},
+   * {@link Token#REMOVED_PHASE1}, or {@link Token#REMOVED_PHASE2}.

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66