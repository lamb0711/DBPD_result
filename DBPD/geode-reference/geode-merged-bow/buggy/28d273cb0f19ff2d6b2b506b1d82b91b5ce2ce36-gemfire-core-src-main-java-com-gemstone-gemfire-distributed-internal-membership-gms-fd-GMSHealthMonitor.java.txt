GEODE-77: members unfairly forced out of the distributed system

n integration testing members were, under heavy load, being forced out
of the distributed system in spite of the new tcp/ip final-checks.

This change set adds a recent-activity check to the doTCPCheckMember method
of GMSHealthMonitor.  It also corrects this method to use SocketCreator with
a background timeout task in case the tcp/ip socket timeout fails to work
(as it sometimes does).

During testing I also saw that GMSJoinLeave was not initiating a forced-
disconnect if it received a membership view showing that it was no longer
in the distributed system and modified it to do so.

+import java.util.Timer;
+import java.util.TimerTask;
+import com.gemstone.gemfire.internal.ConnectionWatcher;
+import com.gemstone.gemfire.internal.SocketCreator;
+        @SuppressWarnings("unused")
-        logger.trace("Unexpected exception", e);
+        logger.debug("Unexpected exception", e);
+      } catch (RuntimeException e) {
+        logger.debug("Unexpected runtime exception", e);
+        throw e;
+      } catch (Error e) {
+        logger.debug("Unexpected error", e);
+        throw e;
-          GMSHealthMonitor.this.sendSuspectMessage(mbr, reason);
+          GMSHealthMonitor.this.initiateSuspicion(mbr, reason);
-  private void sendSuspectMessage(InternalDistributedMember mbr, String reason) {
+  private void initiateSuspicion(InternalDistributedMember mbr, String reason) {
-            long now = System.currentTimeMillis();
-            if (ts != null && (now - ts.getTime()) <= memberTimeout) {
-              logger.trace("detected message traffic from member {}ms ago.  member-timeout is {}", now - ts.getTime(),
-                  memberTimeout);
+            if (checkRecentActivity(member)) {
-            logger.trace("no heartbeat response received from {}", member);
+            logger.trace("no heartbeat response received from {} and no recent activity", member);
+   * Check for recent messaging activity from the given member
+   * @param suspectMember
+   * @return whether there has been activity within memberTimeout ms
+   */
+  private boolean checkRecentActivity(InternalDistributedMember suspectMember) {
+    TimeStamp ts = memberTimeStamps.get(suspectMember);
+    return (ts != null && (System.currentTimeMillis() - ts.getTime()) <= memberTimeout);
+  }
+
+  /**
-    Socket clientSocket = new Socket();
+    Socket clientSocket = null;
+    // first check for a recent timestamp
+    if (checkRecentActivity(suspectMember)) {
+      return true;
+    }
-      InetSocketAddress addr = new InetSocketAddress(suspectMember.getInetAddress(), port);
-      clientSocket.connect(addr, (int) services.getConfig().getMemberTimeout());
+      clientSocket = SocketCreator.getDefaultInstance().connect(suspectMember.getInetAddress(), port,
+          (int)memberTimeout, new ConnectTimeoutTask(services.getTimer(), memberTimeout), false, -1, false);
-          return false;
+          return checkRecentActivity(suspectMember);
-        return false;
+        return checkRecentActivity(suspectMember);
+      logger.debug("tcp/ip connection timed out");
-      logger.trace("Unexpected exception", e);
+      logger.debug("Unexpected exception", e);
-    sendSuspectMessage(mbr, reason);
+    initiateSuspicion(mbr, reason);
-    sendSuspectMessage(localAddress, "beSick invoked on GMSHealthMonitor");
+    initiateSuspicion(localAddress, "beSick invoked on GMSHealthMonitor");
-    sendSuspectMessage(localAddress, "playDead invoked on GMSHealthMonitor");
+    initiateSuspicion(localAddress, "playDead invoked on GMSHealthMonitor");
+                contactedBy(mbr);
-              contactedBy(mbr);
+  @Override
+  public void memberShutdown(DistributedMember mbr, String reason) {
+  }
+  
+  @Override
+  public int getFailureDetectionPort() {
+    return this.socketPort;
+  }
-  @Override
-  public void memberShutdown(DistributedMember mbr, String reason) {
+  private static class ConnectTimeoutTask extends TimerTask implements ConnectionWatcher {
+    Timer scheduler;
+    Socket socket;
+    long timeout;
+    
+    ConnectTimeoutTask(Timer scheduler, long timeout) {
+      this.scheduler = scheduler;
+      this.timeout = timeout;
+    }
+    
+    @Override
+    public void beforeConnect(Socket socket) {
+      this.socket = socket;
+      scheduler.schedule(this, timeout);
+    }
+
+    @Override
+    public void afterConnect(Socket socket) {
+      cancel();
+    }
+    
+    @Override
+    public void run() {
+      try {
+        if (socket != null) {
+          socket.close();
+        }
+      } catch (IOException e) {
+        // ignored - nothing useful to do here
+      }
+    }
+    
-  
-  @Override
-  public int getFailureDetectionPort() {
-    return this.socketPort;
-  }
-  

INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS31 INS55 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS42 INS43 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS65 INS65 INS43 INS42 INS60 INS41 INS25 INS42 INS42 INS43 INS59 MOV43 INS59 INS39 INS59 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS66 INS42 INS66 INS42 INS43 INS59 INS36 MOV43 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS42 INS54 INS12 INS12 INS42 INS42 INS32 INS27 INS33 INS42 INS42 INS41 INS21 UPD42 UPD42 UPD42 INS42 INS7 INS7 INS42 INS7 INS32 INS42 INS32 INS8 INS12 INS44 INS8 INS44 INS8 INS42 INS42 INS42 MOV27 INS27 INS9 INS7 INS21 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS52 INS42 INS42 INS25 INS44 INS8 INS79 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS36 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS8 INS43 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 MOV27 INS32 MOV42 MOV32 UPD42 MOV42 INS11 INS14 INS9 INS38 INS9 INS32 INS42 INS42 INS45 UPD42 INS42 INS33 INS21 INS42 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 MOV32 UPD42 MOV42 INS42 MOV39 INS42 INS43 INS32 INS42 INS34 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL27 DEL36 DEL42 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL32 DEL42 DEL32 DEL11 DEL32 DEL21 DEL9 DEL9