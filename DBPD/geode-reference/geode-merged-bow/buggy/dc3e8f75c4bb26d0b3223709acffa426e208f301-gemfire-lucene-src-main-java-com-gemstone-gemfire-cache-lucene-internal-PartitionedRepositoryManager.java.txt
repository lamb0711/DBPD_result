Changing how PartitionRepositoryManager handles destroyed buckets

This class was using a weak hash map with BucketRegions as keys. Instead
of that, use the bucket id as the key. I added support to
IndexRepository for the repository to indicate if the underlying
BucketRegion has been destroyed. If the IndexRepository is destroyed, we
will create a new IndexRepository in PartitionRepositoryManager.

-import com.gemstone.gemfire.internal.util.concurrent.CopyOnWriteWeakHashMap;
+import com.gemstone.gemfire.internal.util.concurrent.CopyOnWriteHashMap;
-  CopyOnWriteWeakHashMap<BucketRegion, IndexRepository> indexRepositories = new CopyOnWriteWeakHashMap<BucketRegion, IndexRepository>();
+  CopyOnWriteHashMap<Integer, IndexRepository> indexRepositories = new CopyOnWriteHashMap<Integer, IndexRepository>();
-    return getRepository(userBucket);
+    return getRepository(userBucket.getId());
-        repos.add(getRepository(userBucket));
+        repos.add(getRepository(userBucket.getId()));
-  private IndexRepository getRepository(BucketRegion userBucket) throws BucketNotFoundException {
-    IndexRepository repo = indexRepositories.get(userBucket);
+  private IndexRepository getRepository(Integer bucketId) throws BucketNotFoundException {
+    IndexRepository repo = indexRepositories.get(bucketId);
+    
+    //Remove the repository if it has been destroyed (due to rebalancing)
+    if(repo != null && repo.isClosed()) {
+      indexRepositories.remove(bucketId, repo);
+      repo = null;
+    }
+    
-        RegionDirectory dir = new RegionDirectory(getMatchingBucket(userBucket, fileRegion), getMatchingBucket(userBucket, chunkRegion));
+        BucketRegion fileBucket = getMatchingBucket(fileRegion, bucketId);
+        BucketRegion chunkBucket = getMatchingBucket(chunkRegion, bucketId);
+        RegionDirectory dir = new RegionDirectory(fileBucket, chunkBucket);
-        repo = new IndexRepositoryImpl(writer, serializer);
-        IndexRepository oldRepo = indexRepositories.putIfAbsent(userBucket, repo);
+        repo = new IndexRepositoryImpl(fileBucket, writer, serializer);
+        IndexRepository oldRepo = indexRepositories.putIfAbsent(bucketId, repo);
-  private BucketRegion getMatchingBucket(BucketRegion region1, PartitionedRegion region2) throws BucketNotFoundException {
-    BucketRegion result = region2.getDataStore().getLocalBucketById(region1.getId());
+  private BucketRegion getMatchingBucket(PartitionedRegion region, Integer bucketId) throws BucketNotFoundException {
+    BucketRegion result = region.getDataStore().getLocalBucketById(bucketId);
-      throw new BucketNotFoundException("Bucket not found for region " + region2 + " bucekt id " + region1.getId());
+      throw new BucketNotFoundException("Bucket not found for region " + region + " bucekt id " + bucketId);

UPD40 MOV44 UPD74 UPD43 UPD43 INS43 UPD42 INS25 UPD42 UPD43 UPD42 UPD42 UPD42 UPD74 INS42 INS27 INS8 UPD42 UPD43 UPD43 INS32 INS27 INS32 INS21 INS21 UPD42 UPD42 MOV42 INS42 UPD42 INS42 INS33 INS42 INS42 INS32 INS7 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS33 INS60 INS60 INS60 UPD42 MOV43 INS59 INS43 INS59 MOV43 INS59 UPD42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS14 INS32 MOV42 MOV42 INS42 MOV42 MOV42 INS42 MOV43 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32