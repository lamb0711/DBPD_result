GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


-import java.util.Iterator;
+import java.util.Objects;
+import org.apache.geode.cache.server.CacheServer;
-  public static final int START_VERSION_NUMBER = Integer
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "DistributionAdvisor.startVersionNumber", 1)
-      .intValue();
+  private static final int START_VERSION_NUMBER = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "DistributionAdvisor.startVersionNumber", 1);
-  public static final int START_SERIAL_NUMBER =
-      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "Cache.startSerialNumber", 1 // Integer.MAX_VALUE-10
-      ).intValue();
+  private static final int START_SERIAL_NUMBER =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "Cache.startSerialNumber", 1
+      // Integer.MAX_VALUE-10
+      );
-  public static final int ROLLOVER_THRESHOLD = Integer
+  private static final int ROLLOVER_THRESHOLD = Integer
-          1000)
-      .intValue();
+          1000);
-  private final Map removedProfiles = new HashMap();
+  private final Map<ProfileId, Integer> removedProfiles = new HashMap<>();
-  protected ConcurrentMap membershipListeners = new ConcurrentHashMap();
+  private ConcurrentMap<MembershipListener, Boolean> membershipListeners =
+      new ConcurrentHashMap<>();
-  protected ConcurrentMap profileListeners = new ConcurrentHashMap();
+  private ConcurrentMap<ProfileListener, Boolean> profileListeners = new ConcurrentHashMap<>();
-  protected void subInit() {
+  private void subInit() {
-        .mapToLong(o -> o.getMaximumTimeBetweenPings()).max().orElse(0L);
+        .mapToLong(CacheServer::getMaximumTimeBetweenPings).max().orElse(0L);
-  public String toStringWithProfiles() {
-    final StringBuffer sb = new StringBuffer(toString());
+  protected String toStringWithProfiles() {
+    final StringBuilder sb = new StringBuilder(toString());
-  public boolean removeProfileChangeListener(ProfileListener listener) {
-    return profileListeners.remove(listener) != null;
+  public void removeProfileChangeListener(ProfileListener listener) {
+    profileListeners.remove(listener);
-  public boolean pollIsInitialized() {
+  protected boolean pollIsInitialized() {
-    final StringBuffer buf = new StringBuffer(2000);
+    final StringBuilder buf = new StringBuilder(2000);
-    for (int i = 0; i < profs.length; i++) {
+    for (Profile prof : profs) {
-      buf.append(profs[i].toString());
+      buf.append(prof.toString());
-    Integer removedSerialNumber = (Integer) this.removedProfiles.get(newProfile.getId());
+    Integer removedSerialNumber = removedProfiles.get(newProfile.getId());
-        && !isNewerSerialNumber(newProfile.getSerialNumber(), removedSerialNumber.intValue())) {
+        && !isNewerSerialNumber(newProfile.getSerialNumber(), removedSerialNumber)) {
-  protected boolean isNewerProfile(Profile newProfile, Profile oldProfile) {
+  private boolean isNewerProfile(Profile newProfile, Profile oldProfile) {
-    boolean newIsNewer = false;
+    boolean newIsNewer;
-   * @return true if it was registered; false if not.
-  public boolean removeProfile(Profile profile, boolean destroyed) {
-    return removeId(profile.getId(), false, destroyed, false/* fromMembershipListener */);
+  private void removeProfile(Profile profile) {
+    removeId(profile.getId(), false, false, false);
-              Integer.valueOf(profileToRemove.getSerialNumber()));
+              profileToRemove.getSerialNumber());
-        Integer oldSerial = (Integer) this.removedProfiles.get(memberId);
-        if (oldSerial != null && isNewerSerialNumber(oldSerial.intValue(), serialNum)) {
+        Integer oldSerial = removedProfiles.get(memberId);
+        if (oldSerial != null && isNewerSerialNumber(oldSerial, serialNum)) {
-        this.removedProfiles.put(memberId, Integer.valueOf(serialNum));
+        removedProfiles.put(memberId, serialNum);
-  protected void setNumActiveProfiles(int newValue) {
+  private void setNumActiveProfiles(int newValue) {
-    for (int i = 0; i < allProfiles.length; i++) {
+    for (Profile allProfile : allProfiles) {
-        if (allProfiles[i].getDistributedMember().equals(id)) {
-          return allProfiles[i];
+        if (allProfile.getDistributedMember().equals(id)) {
+          return allProfile;
-        if (allProfiles[i].getId().equals(id)) {
-          return allProfiles[i];
+        if (allProfile.getId().equals(id)) {
+          return allProfile;
-  @SuppressWarnings("unchecked")
-  protected Set<InternalDistributedMember> getDefaultDistributionMembers() {
+  private Set<InternalDistributedMember> getDefaultDistributionMembers() {
-    Iterator it = membershipListeners.keySet().iterator();
-    while (it.hasNext()) {
+    for (MembershipListener membershipListener : membershipListeners.keySet()) {
-        ((MembershipListener) it.next()).memberJoined(getDistributionManagerWithNoCheck(), member);
+        membershipListener.memberJoined(getDistributionManagerWithNoCheck(), member);
-    Iterator it = membershipListeners.keySet().iterator();
-    while (it.hasNext()) {
+    for (MembershipListener membershipListener : membershipListeners.keySet()) {
-        ((MembershipListener) it.next()).memberDeparted(getDistributionManagerWithNoCheck(), member,
+        membershipListener.memberDeparted(getDistributionManagerWithNoCheck(), member,
-    Iterator it = profileListeners.keySet().iterator();
-    while (it.hasNext()) {
-      ((ProfileListener) it.next()).profileRemoved(profile, destroyed);
+    for (ProfileListener profileListener : profileListeners.keySet()) {
+      (profileListener).profileRemoved(profile, destroyed);
-    Iterator it = profileListeners.keySet().iterator();
-    while (it.hasNext()) {
-      ((ProfileListener) it.next()).profileCreated(profile);
+    for (ProfileListener profileListener : profileListeners.keySet()) {
+      (profileListener).profileCreated(profile);
-    Iterator it = profileListeners.keySet().iterator();
-    while (it.hasNext()) {
-      ((ProfileListener) it.next()).profileUpdated(profile);
+    for (ProfileListener profileListener : profileListeners.keySet()) {
+      (profileListener).profileUpdated(profile);
-    for (int i = 0; i < locProfiles.length; i++) {
-      Profile profile = locProfiles[i];
+    for (Profile profile : locProfiles) {
-          recipients = new HashSet<InternalDistributedMember>();
+          recipients = new HashSet<>();
-  protected List/* <Profile> */ fetchProfiles(Filter f) {
+  protected List<Profile> fetchProfiles(Filter f) {
-    List result = null;
-    Profile[] locProfiles = this.profiles; // grab current profiles
-    for (int i = 0; i < locProfiles.length; i++) {
-      Profile profile = locProfiles[i];
+    List<Profile> result = null;
+    Profile[] locProfiles = this.profiles;
+    for (Profile profile : locProfiles) {
-          result = new ArrayList(locProfiles.length);
+          result = new ArrayList<>(locProfiles.length);
+
-      result = Collections.EMPTY_LIST;
+      result = Collections.emptyList();
+
-  protected synchronized boolean basicAddProfile(Profile p) {
+  private synchronized boolean basicAddProfile(Profile p) {
-    Assert.assertTrue(newProfiles != null);
-
-    // System.out.println("newprofiles = " + newProfiles.length);
-    // for (int i = 0; i < newProfiles.length; i ++)
-    // System.out.println("profile " + i + ": " + newProfiles[i].getId().toString());
+    Objects.requireNonNull(newProfiles);
-    // }
-    // finally {
-    // Assert.assertTrue(indexOfMemberId(p.getId()) >= 0);
-    // boolean containsOne = false;
-    // for (int i = 0; i < this.profiles.length; i++) {
-    // if (this.profiles[i].getId() == p.getId()) {
-    // Assert.assertTrue(!containsOne);
-    // containsOne = true;
-    // }
-    // }
-    // Assert.assertTrue(containsOne);
-    // }
-  protected int indexOfMemberId(ProfileId id) {
+  private int indexOfMemberId(ProfileId id) {
-          da.removeProfile(this, false);
+          da.removeProfile(this);
-      sb.append("memberId=" + this.peerMemberId);
-      sb.append("; version=" + this.version);
-      sb.append("; serialNumber=" + this.serialNumber);
-      sb.append("; initialMembershipVersion=" + this.initialMembershipVersion);
+      sb.append("memberId=").append(this.peerMemberId);
+      sb.append("; version=").append(this.version);
+      sb.append("; serialNumber=").append(this.serialNumber);
+      sb.append("; initialMembershipVersion=").append(this.initialMembershipVersion);

MOV26 INS26 UPD40 INS40 UPD83 UPD83 UPD83 INS74 UPD83 INS74 MOV59 UPD83 INS74 MOV59 UPD83 UPD83 UPD39 UPD83 UPD83 UPD83 UPD39 UPD83 UPD83 MOV44 MOV44 INS74 UPD83 UPD83 MOV32 MOV32 MOV32 MOV43 INS43 MOV43 MOV43 INS43 INS43 UPD42 MOV43 INS43 INS43 UPD42 INS21 INS70 INS21 INS70 INS70 INS70 INS70 INS70 INS70 INS70 MOV43 INS43 INS70 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS74 UPD43 MOV32 UPD43 INS44 INS42 MOV8 MOV43 INS32 INS44 INS42 INS8 INS44 MOV32 MOV8 INS44 MOV32 MOV8 INS44 MOV32 INS8 INS44 MOV32 INS8 INS44 MOV32 INS8 INS44 INS42 MOV8 INS42 INS74 INS44 INS42 MOV8 MOV43 MOV43 MOV43 UPD42 UPD42 MOV43 INS42 MOV32 MOV42 MOV32 MOV9 MOV9 INS9 MOV43 INS42 MOV25 MOV43 INS42 UPD42 MOV42 MOV43 INS42 MOV43 INS42 MOV21 MOV43 INS42 MOV21 MOV43 INS42 MOV21 INS43 INS42 MOV43 INS43 INS43 INS42 UPD42 UPD42 INS42 INS32 INS32 INS32 INS32 UPD43 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 MOV22 INS32 INS42 MOV22 INS32 INS42 MOV22 INS32 INS42 MOV22 UPD42 UPD42 MOV42 INS32 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 MOV42 MOV42 INS45 INS90 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 MOV32 INS42 MOV32 INS42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 MOV32 UPD74 INS74 MOV43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL33 DEL27 DEL41 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL52 DEL42 DEL22 DEL11 DEL42 DEL32 DEL9 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL32 DEL41 DEL42 DEL42 DEL32 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL45 DEL79 DEL42 DEL32 DEL11 DEL36 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL61 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL40 DEL42 DEL33 DEL27 DEL9 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32 DEL45 DEL27 DEL32