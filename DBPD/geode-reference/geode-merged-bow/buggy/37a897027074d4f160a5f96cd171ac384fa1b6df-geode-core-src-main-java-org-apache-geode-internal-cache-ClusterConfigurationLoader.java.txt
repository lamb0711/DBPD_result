GEODE-3962: use function call to get cluster configuration from a locator (#1059)

* GEODE-3962: use function all to retrieve cluster configuration from a locator

-import java.net.InetAddress;
+import java.util.HashSet;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.distributed.internal.tcpserver.TcpClient;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.admin.remote.DistributionLocatorId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.management.internal.configuration.messages.ConfigurationRequest;
+import org.apache.geode.management.internal.configuration.functions.GetClusterConfigurationFunction;
-  public static void deployJarsReceivedFromClusterConfiguration(Cache cache,
+  public void deployJarsReceivedFromClusterConfiguration(Cache cache,
-   *
-   * @param cache Cache created for this member
-   * @param response {@link ConfigurationResponse} containing the requested {@link Configuration}
-   * @param config this member's config.
-  public static void applyClusterXmlConfiguration(Cache cache, ConfigurationResponse response,
-      DistributionConfig config) {
+  public void applyClusterXmlConfiguration(Cache cache, ConfigurationResponse response,
+      String groupList) {
-    List<String> groups = getGroups(config);
+    Set<String> groups = getGroups(groupList);
-  public static void applyClusterPropertiesConfiguration(ConfigurationResponse response,
+  public void applyClusterPropertiesConfiguration(ConfigurationResponse response,
-    List<String> groups = getGroups(config);
+    Set<String> groups = getGroups(config.getGroups());
+    final Properties groupProps = new Properties();
+
-        runtimeProps.putAll(groupConfiguration.getGemfireProperties());
+        for (Map.Entry<Object, Object> e : groupConfiguration.getGemfireProperties().entrySet()) {
+          if (groupProps.containsKey(e.getKey())) {
+            logger.warn("Conflicting property {} from group {}", e.getKey(), group);
+          } else {
+            groupProps.put(e.getKey(), e.getValue());
+          }
+        }
+    runtimeProps.putAll(groupProps);
+
-   * @param config this member's configuration.
-  public static ConfigurationResponse requestConfigurationFromLocators(DistributionConfig config,
-      List<String> locatorList)
+  public ConfigurationResponse requestConfigurationFromLocators(String groupList,
+      Set<InternalDistributedMember> locatorList)
-    List<String> groups = ClusterConfigurationLoader.getGroups(config);
-    ConfigurationRequest request = new ConfigurationRequest();
-    request.addGroups(ClusterConfigurationService.CLUSTER_CONFIG);
-    for (String group : groups) {
-      request.addGroups(group);
-    }
-
-    request.setNumAttempts(10);
+    Set<String> groups = getGroups(groupList);
+    GetClusterConfigurationFunction function = new GetClusterConfigurationFunction();
-    // Try talking to all the locators in the list
-    // to get the shared configuration.
-
-    TcpClient client = new TcpClient();
-
-    for (String locatorInfo : locatorList) {
-      DistributionLocatorId dlId = new DistributionLocatorId(locatorInfo);
-      String ipaddress = dlId.getBindAddress();
-      InetAddress locatorInetAddress = null;
-
-      if (StringUtils.isNotBlank(ipaddress)) {
-        locatorInetAddress = InetAddress.getByName(ipaddress);
+    for (InternalDistributedMember locator : locatorList) {
+      ResultCollector resultCollector =
+          FunctionService.onMember(locator).setArguments(groups).execute(function);
+      Object result = ((ArrayList) resultCollector.getResult()).get(0);
+      if (result instanceof ConfigurationResponse) {
+        response = (ConfigurationResponse) result;
+        break;
-        locatorInetAddress = dlId.getHost().getAddress();
-      }
-
-      int port = dlId.getPort();
-
-      try {
-        response = (ConfigurationResponse) client.requestToServer(locatorInetAddress, port, request,
-            10000);
-      } catch (UnknownHostException e) {
-        e.printStackTrace();
-      } catch (IOException e) {
-        // TODO Log
-        e.printStackTrace();
-      } catch (ClassNotFoundException e) {
-        e.printStackTrace();
+        logger.error("Received invalid result from {}: {}", locator.toString(), result);
+        if (result instanceof Throwable) {
+          // log the stack trace.
+          logger.error(result.toString(), result);
+        }
-    // if the response is null , that means Shared Configuration service is not installed on the
-    // locator
-    // and hence it returns null
-    if (response == null || response.failedToGetSharedConfig()) {
+    // if the response is null
+    if (response == null) {
-          LocalizedStrings.Launcher_Command_FAILED_TO_GET_SHARED_CONFIGURATION.toLocalizedString());
+          "Unable to retrieve cluster configuration from the locator.");
-  private static List<String> getGroups(DistributionConfig config) {
-    String groupString = config.getGroups();
-    List<String> groups = new ArrayList<String>();
-    if (StringUtils.isNotBlank(groupString)) {
-      groups.addAll((Arrays.asList(groupString.split(","))));
+  Set<String> getGroups(String groupString) {
+    if (StringUtils.isBlank(groupString)) {
+      return new HashSet<>();
-    return groups;
+
+    return (Arrays.stream(groupString.split(",")).collect(Collectors.toSet()));

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 MOV44 UPD74 UPD43 UPD42 INS60 INS21 UPD42 UPD74 INS70 UPD43 MOV43 INS42 MOV42 UPD74 UPD74 INS83 INS43 INS59 INS8 INS32 UPD43 UPD43 UPD74 UPD43 MOV44 MOV42 MOV8 MOV27 UPD42 MOV36 UPD43 UPD43 INS42 INS42 INS14 MOV60 INS25 INS42 INS42 INS42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 INS60 INS60 INS25 UPD42 INS41 INS32 UPD42 UPD42 UPD42 MOV32 INS43 MOV27 INS8 UPD42 UPD42 UPD43 UPD42 UPD43 MOV43 INS59 UPD43 MOV43 INS59 INS62 INS8 INS8 INS14 MOV32 INS42 INS32 INS42 INS70 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 INS42 INS32 INS42 INS43 MOV21 INS10 INS21 INS25 INS45 INS74 UPD42 INS42 INS42 INS44 MOV32 MOV42 MOV8 INS32 UPD42 MOV42 UPD42 MOV42 INS36 UPD42 MOV42 INS34 INS42 INS32 INS62 INS8 INS43 INS74 INS42 UPD42 INS32 INS42 INS42 INS11 INS42 INS42 INS45 INS32 INS42 INS42 INS43 MOV21 INS42 INS43 INS43 INS43 INS32 INS8 INS42 INS42 INS42 MOV43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL65 DEL42 DEL66 DEL65 DEL83 DEL83 DEL42 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL70 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL32 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42