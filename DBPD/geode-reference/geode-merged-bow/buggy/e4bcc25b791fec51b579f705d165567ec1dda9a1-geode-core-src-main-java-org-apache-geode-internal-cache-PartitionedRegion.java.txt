GEODE-6527 Update PartitionRegionConfig info (#3308)

GEODE-6527: Update prRoot configuration when using attributes mutator
    
    - Added code to update the node information stored in the prConfig for a partitioned region when an AttributesMutator was used to add/remove a cache loader or writer.
    - Added additional thread safety to new and exsting code which made modifications to a partitoned regions prConfig from within the PartitionedRegion class
    
    Co-authored-by: Ben Ross <bross@pivotal.io>
    Co-authored-by: Jianxia Chen <jchen@pivotal.io>
    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
    Co-authored-by: Scott Jewell <sjewell@pivotal.io>
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
-    prConfig.setGatewaySenderIds(gatewaySendersToAdd);
-    updatePRConfig(prConfig, false);
+    updatePartitionRegionConfig(prConfig -> {
+      prConfig.setGatewaySenderIds(gatewaySendersToAdd);
+    });
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
-    Set<String> newGateWayIds;
-    if (prConfig.getGatewaySenderIds() != null) {
-      newGateWayIds = new HashSet<>(prConfig.getGatewaySenderIds());
-    } else {
-      newGateWayIds = new HashSet<>();
-    }
-    newGateWayIds.add(aeqId);
-    prConfig.setGatewaySenderIds(newGateWayIds);
-    updatePRConfig(prConfig, false);
+    updatePartitionRegionConfig(prConfig -> {
+      Set<String> newGateWayIds;
+      if (prConfig.getGatewaySenderIds() != null) {
+        newGateWayIds = new HashSet<>(prConfig.getGatewaySenderIds());
+      } else {
+        newGateWayIds = new HashSet<>();
+      }
+      newGateWayIds.add(aeqId);
+      prConfig.setGatewaySenderIds(newGateWayIds);
+    });
+  // Used for testing purposes
+  Region<String, PartitionRegionConfig> getPRRoot() {
+    return prRoot;
+  }
+
-      byte loaderByte = (byte) (getAttributes().getCacheLoader() != null ? 0x01 : 0x00);
-      byte writerByte = (byte) (getAttributes().getCacheWriter() != null ? 0x02 : 0x00);
-      this.node.setLoaderWriterByte((byte) (loaderByte + writerByte));
+      this.node.setLoaderAndWriter(getAttributes().getCacheLoader(),
+          getAttributes().getCacheWriter());
-      prConfig = this.prRoot.get(getRegionIdentifier());
+      prConfig = getPRRoot().get(getRegionIdentifier());
+
-      for (PartitionRegionConfig config : this.prRoot.values()) {
+      for (PartitionRegionConfig config : getPRRoot().values()) {
-    final Set<Node> nodes = prConfig.getNodes();
-            this.prRoot.get(colocatedRegion.getRegionIdentifier());
+            getPRRoot().get(colocatedRegion.getRegionIdentifier());
-        this.prRoot.put(getRegionIdentifier(), prConfig);
+        getPRRoot().put(getRegionIdentifier(), prConfig);
+      updatePRNodeInformation();
+      updatePRNodeInformation();
-    StringBuilder sb = new StringBuilder(this.prRoot.getFullPath());
+    StringBuilder sb = new StringBuilder(getPRRoot().getFullPath());
-    for (Iterator i = this.prRoot.keySet().iterator(); i.hasNext();) {
+    for (Iterator i = getPRRoot().keySet().iterator(); i.hasNext();) {
-      sb.append(key).append("=>").append(this.prRoot.get(key));
+      sb.append(key).append("=>").append(getPRRoot().get(key));
-          prConfig = this.prRoot.get(getRegionIdentifier());
+          prConfig = getPRRoot().get(getRegionIdentifier());
-      prConfig = prRoot.get(this.getRegionIdentifier());
+      prConfig = getPRRoot().get(this.getRegionIdentifier());
-      this.prRoot.put(this.getRegionIdentifier(), prConfig);
+      getPRRoot().put(this.getRegionIdentifier(), prConfig);
-        if (null != this.prRoot) {
-          this.prRoot.destroy(rId);
+        if (null != getPRRoot()) {
+          getPRRoot().destroy(rId);
-    if (this.prRoot == null) {
+    if (getPRRoot() == null) {
-      final PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
+      final PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
-      prConfig = prRoot.get(this.getRegionIdentifier());
+      prConfig = getPRRoot().get(this.getRegionIdentifier());
-    StringBuilder sb = new StringBuilder(this.prRoot.getFullPath());
+    StringBuilder sb = new StringBuilder(getPRRoot().getFullPath());
-    sb.append(this.prRoot.get(getRegionIdentifier()));
+    sb.append(getPRRoot().get(getRegionIdentifier()));
-    PartitionRegionConfig prConfig = this.prRoot.get(getRegionIdentifier());
+    PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
+  void updatePRNodeInformation() {
+    updatePartitionRegionConfig(prConfig -> {
+      CacheLoader cacheLoader = basicGetLoader();
+      CacheWriter cacheWriter = basicGetWriter();
+      if (prConfig != null) {
+
+        for (Node node : prConfig.getNodes()) {
+
+          if (node.getMemberId().equals(getMyId())) {
+            node.setLoaderAndWriter(cacheLoader, cacheWriter);
+          }
+        }
+      }
+    });
+  }
+
+
+  interface PartitionRegionConfigModifier {
+    void modify(PartitionRegionConfig prConfig);
+  }
+
+  void updatePartitionRegionConfig(
+      PartitionRegionConfigModifier partitionRegionConfigModifier) {
+    RegionLock rl = getRegionLock();
+    rl.lock();
+    try {
+      if (getPRRoot() == null) {
+        if (logger.isDebugEnabled()) {
+          logger.debug(PartitionedRegionHelper.PR_ROOT_REGION_NAME + " is null");
+        }
+        return;
+      }
+      PartitionRegionConfig prConfig = getPRRoot().get(getRegionIdentifier());
+      partitionRegionConfigModifier.modify(prConfig);
+      updatePRConfig(prConfig, false);
+    } finally {
+      rl.unlock();
+    }
+  }

INS31 INS31 INS55 INS31 INS74 INS42 INS8 MOV54 MOV54 INS39 INS42 INS8 INS42 INS31 INS39 INS42 INS44 INS8 INS21 INS43 INS43 MOV43 INS41 INS21 INS39 INS42 INS44 INS43 INS42 INS60 INS21 INS54 INS32 INS42 INS42 INS42 INS8 MOV8 MOV43 MOV12 MOV12 MOV43 INS32 INS43 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS86 UPD42 INS86 INS21 MOV21 INS21 INS32 INS42 INS86 INS42 INS42 INS42 INS32 INS42 INS42 INS25 INS60 INS21 MOV21 INS21 INS59 INS8 INS59 INS8 INS32 INS32 MOV43 INS7 MOV32 INS42 MOV43 INS32 INS32 INS59 INS8 INS42 INS27 INS8 MOV43 INS59 INS32 INS32 INS42 MOV21 INS42 MOV60 MOV25 MOV21 MOV21 UPD42 MOV32 MOV32 INS32 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 INS42 INS32 INS42 INS42 INS42 INS60 INS60 INS25 INS32 INS33 INS25 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 MOV32 UPD42 MOV42 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS8 INS32 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS44 MOV32 INS8 INS32 INS42 INS32 MOV43 INS42 INS25 INS42 INS42 INS27 INS32 INS42 INS32 INS8 INS40 INS45 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL9 DEL39 DEL42 DEL39 DEL33 DEL27 DEL34 DEL34 DEL16 DEL36 DEL11 DEL59 DEL60 DEL39 DEL42 DEL39 DEL33 DEL27 DEL34 DEL34 DEL16 DEL36 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22