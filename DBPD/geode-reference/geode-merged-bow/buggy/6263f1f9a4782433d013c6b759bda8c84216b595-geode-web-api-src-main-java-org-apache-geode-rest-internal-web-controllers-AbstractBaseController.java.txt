GEODE-7938: added keys query param to GET, PUT, and DELETE /{region} endpoints (#4901)

* added keys query param to GET, PUT, and DELETE /{region} endpoints
* when getting multiple keys, results are now ordered as the request was ordered
* the code that tests for missing keys now uses the getAll result instead of sending multiple messages and having a race in which key is deleted after the old check but before getAll
* Added endpoint for PUT {region}?keys=encodedKey&op=CREATE. The CREATE is a new op.
This allows users to create entries that have an encodedKey. Before they could only create using POST and its key was never decoded.
+import java.net.URLEncoder;
-import javax.servlet.http.HttpServletRequest;
-
+  URI toUriWithKeys(String[] keys, final String... pathSegments) {
+    return ServletUriComponentsBuilder.fromCurrentContextPath().path(getRestApiVersion())
+        .pathSegment(pathSegments)
+        .queryParam("keys", StringUtils.arrayToCommaDelimitedString(keys))
+        .build(true).toUri();
+  }
+
+  String encode(String value) {
+    if (value == null) {
+      throw new GemfireRestException("could not process null value specified in query String");
+    }
+    return encode(value, DEFAULT_ENCODING);
+  }
+
+  String[] decode(String[] values) {
+    String[] result = new String[values.length];
+    for (int i = 0; i < values.length; i++) {
+      result[i] = decode(values[i]);
+    }
+    return result;
+  }
+
+  String[] encode(String[] values) {
+    String[] result = new String[values.length];
+    for (int i = 0; i < values.length; i++) {
+      result[i] = encode(values[i]);
+    }
+    return result;
+  }
+
-      if (NumberUtils.isNumeric(newKey) && domainObjectId == null) {
+      if (domainObject != null && NumberUtils.isNumeric(newKey) && domainObjectId == null) {
+  private String encode(final String value, final String encoding) {
+    try {
+      return URLEncoder.encode(value, encoding);
+    } catch (UnsupportedEncodingException e) {
+      throw new GemfireRestException("Server has encountered unsupported encoding!");
+    }
+  }
+
-  List<String> checkForMultipleKeysExist(String region, String... keys) {
-    List<String> unknownKeys = new ArrayList<>();
-    for (String key : keys) {
-      if (!getRegion(region).containsKey(key)) {
-        unknownKeys.add(key);
-      }
-    }
-    return unknownKeys;
-  }
-
-  ResponseEntity<String> updateSingleKey(final String region, final String key, final String json,
+  /**
+   * @return if the opValue is CAS then the existingValue; otherwise null
+   */
+  String updateSingleKey(final String region, final String key, final String json,
-          // putValue(region, key, convertJsonIntoPdxCollection(json));
-
-    final HttpHeaders headers = new HttpHeaders();
-    headers.setLocation(toUri(region, key));
-    return new ResponseEntity<>(existingValue, headers,
-        (existingValue == null ? HttpStatus.OK : HttpStatus.CONFLICT));
+    return existingValue;
-  ResponseEntity<String> updateMultipleKeys(final String region, final String[] keys,
-      final String json) {
-
+  void updateMultipleKeys(final String region, final String[] keys, final String json) {
-
-    HttpHeaders headers = new HttpHeaders();
-    headers.setLocation(toUri(region, StringUtils.arrayToCommaDelimitedString(keys)));
-    return new ResponseEntity<>(headers, HttpStatus.OK);
-
-  protected String[] parseKeys(HttpServletRequest request, String region) {
-    String uri = request.getRequestURI();
-    int regionIndex = uri.indexOf("/" + region + "/");
-    if (regionIndex == -1) {
-      throw new IllegalStateException(
-          String.format("Could not find the region (%1$s) in the URI (%2$s)", region, uri));
-    }
-    int keysIndex = regionIndex + region.length() + 2;
-    String keysString = uri.substring(keysIndex);
-    return keysString.split(",");
-  }

MOV26 MOV31 UPD40 INS31 INS31 INS31 INS31 INS43 UPD42 MOV44 MOV43 UPD42 MOV42 MOV44 INS8 INS5 INS42 MOV44 INS8 INS5 INS42 INS44 INS8 INS83 MOV43 INS42 INS44 INS44 INS8 INS29 MOV43 INS39 UPD42 MOV42 INS5 INS83 UPD42 INS41 UPD42 INS25 INS41 INS43 INS85 INS5 UPD42 MOV60 INS24 INS41 INS43 INS85 INS5 INS42 INS60 INS24 INS41 INS83 MOV43 INS42 INS83 MOV43 INS42 INS54 INS65 UPD42 MOV42 INS43 INS85 INS32 INS27 INS8 INS32 INS42 INS43 INS85 INS5 INS58 INS27 INS37 INS8 INS42 UPD42 MOV42 INS43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS8 INS12 INS66 INS42 INS42 INS32 UPD42 MOV42 INS42 INS33 INS53 INS42 INS42 INS42 MOV42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS41 INS44 INS8 INS32 UPD42 MOV42 INS9 INS14 MOV42 INS5 INS40 INS42 INS34 INS7 INS42 MOV5 INS40 UPD42 MOV42 INS34 INS7 INS32 INS43 INS42 INS53 INS32 UPD42 MOV42 INS45 MOV32 INS43 INS45 INS43 INS85 INS2 INS32 INS2 INS32 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS2 INS42 INS42 UPD42 MOV42 INS2 INS27 MOV32 INS43 INS45 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL38 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL43 DEL43 DEL42 DEL42 DEL42 DEL32 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL33 DEL27 DEL40 DEL40 DEL16 DEL36 DEL14 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL74 DEL42 DEL40 DEL14 DEL41 DEL83 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL31