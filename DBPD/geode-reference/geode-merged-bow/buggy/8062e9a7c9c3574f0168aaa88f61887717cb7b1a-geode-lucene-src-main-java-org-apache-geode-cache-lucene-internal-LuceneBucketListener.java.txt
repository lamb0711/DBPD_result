GEODE-2367: Lucene indexes do not handle ha scenarios

* Added afterSecondary callback to partition listener to allow cleaning up
  of the index repo when the bucket losses primary
* Added lock prior to creating the bucket indexes to prevent multiple index
  writers from being available at a time
* Changed single point of lucene index creation, no longer creating on the fly

-public class LucenePrimaryBucketListener extends PartitionListenerAdapter {
+public class LuceneBucketListener extends PartitionListenerAdapter {
-  public LucenePrimaryBucketListener(PartitionedRepositoryManager partitionedRepositoryManager,
+  public LuceneBucketListener(PartitionedRepositoryManager partitionedRepositoryManager,
-        lucenePartitionRepositoryManager.getRepository(bucketId);
+        lucenePartitionRepositoryManager.createRepository(bucketId);
+
+  public void afterBucketRemoved(int bucketId, Iterable<?> keys) {
+    afterSecondary(bucketId);
+  }
+
+  public void afterSecondary(int bucketId) {
+    dm.getWaitingThreadPool().execute(() -> {
+      try {
+        lucenePartitionRepositoryManager.cleanRepository(bucketId);
+      } catch (Exception e) {
+        logger.warn("Exception while cleaning up Lucene Index Repository", e);
+      }
+    });
+  }

UPD42 INS31 INS31 UPD42 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS74 INS42 INS21 INS39 INS42 INS21 INS43 INS76 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS8 INS54 INS8 INS12 INS21 INS44 INS8 INS32 INS43 INS42 INS21 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42