Adding additional unit tests for GMSHealthMonitor and GMSJoinLeave
Moved GMSHealthMonitorJUnitTest to package level of GMSHealthMonitor
Minor refactoring to allow testing

+import com.gemstone.gemfire.SystemConnectException;
-  private static final int OK = 0x7B;
-  private static final int ERROR = 0x00;  
-  private InetAddress socketAddress;
+  static final int OK = 0x7B;
+  static final int ERROR = 0x00;  
-        out.writeShort(Version.CURRENT_ORDINAL);
-        out.writeInt(gmbr.getVmViewId());
-        out.writeLong(gmbr.getUuidLSBs());
-        out.writeLong(gmbr.getUuidMSBs());
-        out.flush();
+        writeMemberToStream(gmbr, out);
+  void writeMemberToStream(GMSMember gmbr, DataOutputStream out) throws IOException {
+    out.writeShort(Version.CURRENT_ORDINAL);
+    out.writeInt(gmbr.getVmViewId());
+    out.writeLong(gmbr.getUuidLSBs());
+    out.writeLong(gmbr.getUuidMSBs());
+    out.flush();
+  }
+  
-  /**
-   * start the thread that listens for tcp/ip connections and responds
-   * to connection attempts
-   */
-  private void startTcpServer() {
-    // allocate a socket here so there are no race conditions between knowing the FD
-    // socket port and joining the system
-    socketAddress = localAddress.getInetAddress();
-    int[] portRange = services.getConfig().getMembershipPortRange();            
+  ServerSocket createServerSocket(InetAddress socketAddress, int[] portRange) {
+    ServerSocket serverSocket = null;
+    } catch (SystemConnectException e) {
+      throw new GemFireConfigException("Unable to allocate a failure detection port in the membership-port range", e);
+    return serverSocket;
+  }
+  
+  /**
+   * start the thread that listens for tcp/ip connections and responds
+   * to connection attempts
+   */
+  private void startTcpServer(ServerSocket ssocket) {
+    // allocate a socket here so there are no race conditions between knowing the FD
+    // socket port and joining the system
-        logger.info("Started failure detection server thread on {}:{}.", socketAddress, socketPort);
+        logger.info("Started failure detection server thread on {}:{}.", ssocket.getInetAddress(), socketPort);
-              socket = serverSocket.accept();
+              socket = ssocket.accept();
-          if (serverSocket != null && !serverSocket.isClosed()) {
+          if (ssocket != null && !ssocket.isClosed()) {
-              serverSocket.close();
+              ssocket.close();
-    this.localAddress = services.getMessenger().getMemberID();
-    startTcpServer();
+    setLocalAddress( services.getMessenger().getMemberID());
+    serverSocket = createServerSocket(localAddress.getInetAddress(), services.getConfig().getMembershipPortRange());
+    startTcpServer(serverSocket);
+  
+  void setLocalAddress(InternalDistributedMember idm) {
+    this.localAddress = idm;
+  }

INS26 INS40 INS31 INS31 INS31 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS44 INS44 INS8 INS44 INS39 INS42 INS44 INS8 INS43 INS42 INS43 INS42 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 INS42 MOV43 INS42 MOV5 INS42 INS60 MOV54 INS41 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS43 INS59 INS12 INS42 INS42 INS32 INS7 INS42 MOV7 INS42 UPD42 MOV42 INS33 INS44 INS8 INS42 MOV32 INS42 INS32 INS42 INS42 INS43 INS42 INS53 INS42 MOV32 MOV32 INS21 INS42 INS14 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL83 DEL83 DEL59 DEL23 DEL42 DEL7 DEL21 DEL42 DEL59 DEL60