GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-/*
- * IndexManager.java
- *
- * Created on February 15, 2005, 11:49 AM
- */
+import static org.apache.geode.internal.lang.SystemUtils.getLineSeparator;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.query.*;
-import org.apache.geode.cache.query.internal.*;
+import org.apache.geode.cache.query.AmbiguousNameException;
+import org.apache.geode.cache.query.Index;
+import org.apache.geode.cache.query.IndexExistsException;
+import org.apache.geode.cache.query.IndexInvalidException;
+import org.apache.geode.cache.query.IndexMaintenanceException;
+import org.apache.geode.cache.query.IndexNameConflictException;
+import org.apache.geode.cache.query.IndexStatistics;
+import org.apache.geode.cache.query.IndexType;
+import org.apache.geode.cache.query.MultiIndexCreationException;
+import org.apache.geode.cache.query.NameResolutionException;
+import org.apache.geode.cache.query.QueryException;
+import org.apache.geode.cache.query.TypeMismatchException;
+import org.apache.geode.cache.query.internal.CompiledPath;
+import org.apache.geode.cache.query.internal.CompiledValue;
+import org.apache.geode.cache.query.internal.DefaultQuery;
+import org.apache.geode.cache.query.internal.ExecutionContext;
+import org.apache.geode.cache.query.internal.MapIndexable;
+import org.apache.geode.cache.query.internal.NullToken;
+import org.apache.geode.cache.query.internal.QueryMonitor;
+import org.apache.geode.cache.query.internal.QueryObserver;
+import org.apache.geode.cache.query.internal.QueryObserverHolder;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.cache.BucketRegion;
+import org.apache.geode.internal.cache.CachePerfStats;
+import org.apache.geode.internal.cache.HasCachePerfStats;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.PartitionedRegion;
+import org.apache.geode.internal.cache.RegionEntry;
+import org.apache.geode.internal.cache.TXManagerImpl;
+import org.apache.geode.internal.cache.TXStateProxy;
-import org.apache.logging.log4j.Logger;
-import java.util.*;
-import java.util.concurrent.*;
-import java.util.concurrent.atomic.AtomicLong;
-
-/**
- */
-      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "AsynchIndexMaintenanceThreshold", -1)
-          .intValue();
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "AsynchIndexMaintenanceThreshold", -1);
-  public static final boolean INPLACE_OBJECT_MODIFICATION = Boolean
-      .valueOf(System.getProperty(
-          DistributionConfig.GEMFIRE_PREFIX + "index.INPLACE_OBJECT_MODIFICATION", "false"))
-      .booleanValue();
+  public static final boolean INPLACE_OBJECT_MODIFICATION = Boolean.valueOf(System.getProperty(
+      DistributionConfig.GEMFIRE_PREFIX + "index.INPLACE_OBJECT_MODIFICATION", "false"));
-  public static final boolean RANGEINDEX_ONLY = Boolean
-      .valueOf(
-          System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "index.RANGEINDEX_ONLY", "false"))
-      .booleanValue();
+  public static final boolean RANGEINDEX_ONLY = Boolean.valueOf(
+      System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "index.RANGEINDEX_ONLY", "false"));
-   * @param currentCacheTime
-   * 
-   * @param queryStartTime
-   * @param lastModifiedTime
-  /**
-   * 
-   * @param value
-   * @param newValue
-   */
-    if (!((GemFireCacheImpl) this.region.getCache()).isClient()) {
+    if (!((InternalCache) this.region.getCache()).isClient()) {
-            projectionAttributes, imports, region.getCache(), externalContext, this);
+            projectionAttributes, imports, (InternalCache) region.getCache(), externalContext,
+            this);
-            projectionAttributes, region.getCache(), externalContext, this);
+            projectionAttributes, (InternalCache) region.getCache(), externalContext, this);
-            ((FutureTask) oldIndex).get();
+            ((Future) oldIndex).get();
-      } catch (InterruptedException ie) {
+      } catch (InterruptedException ignored) {
-   * @throws NameResolutionException
-   * @throws TypeMismatchException
-   * @throws AmbiguousNameException
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-   * @throws NameResolutionException
-   * @throws TypeMismatchException
-   * @throws AmbiguousNameException
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-          } catch (Exception ex) {
+          } catch (Exception ignored) {
-      if (indexType == null) { // No type check.
-        list.add(index);
-      } else if (index.getType() == indexType) {
+      if (indexType == null || index.getType() == indexType) {
+        // No type check.
-  // @todo need more specific list of exceptions
-   * 
-   * @throws QueryException
-  // @todo need more specific list of exceptions
-   * @throws org.apache.geode.cache.query.IndexMaintenanceException
-    if (!((GemFireCacheImpl) this.region.getCache()).isClient()) {
+    if (!((InternalCache) this.region.getCache()).isClient()) {
-                logger.debug("Updating index: {}{} value: ", index.getName(),
+                logger.debug("Updating index: {}{} value: {}", index.getName(),
-        } catch (InterruptedException ie) {
+        } catch (InterruptedException ignored) {
-        } catch (InterruptedException ie) {
+        } catch (InterruptedException ignored) {
-    return ((LocalRegion) this.region).getCachePerfStats();
+    return ((HasCachePerfStats) this.region).getCachePerfStats();
-   * @throws QueryException
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-      sb.append(((Index) ind).toString()).append('\n');
+      sb.append(ind).append(getLineSeparator());
-        str = new StringBuffer("index_iter").append(this.getIncrementedCounter()).toString();
+        str = new StringBuilder("index_iter").append(this.getIncrementedCounter()).toString();
-   * @param definition
-     * 
-     * @param updateThreshold
-     * @param threadName
-      task[0] = Integer.valueOf(action);
+      task[0] = action;
-      task[2] = Integer.valueOf(opCode); // !!!:ezoerner:20081029 change to valueOf jdk 1.5+
+      task[2] = opCode;
-      int action = ((Integer) task[0]).intValue();
+      int action = (Integer) task[0];
-      int opCode = ((Integer) task[2]).intValue();
+      int opCode = (Integer) task[2];
+      // TODO: equals should check the class of its parameter
+      // TODO: avoid object creation in equals

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 MOV32 MOV32 MOV32 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 INS27 UPD43 INS42 INS42 MOV11 MOV11 UPD42 UPD42 MOV27 MOV27 UPD43 UPD42 INS32 UPD43 UPD42 UPD43 UPD42 INS42 INS42 UPD42 UPD42 INS11 UPD42 UPD42 INS43 MOV32 INS11 INS42 INS43 MOV32 UPD42 UPD43 INS42 UPD42 UPD43 UPD45 UPD42 DEL29 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL65 DEL40 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL13 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL36 DEL42 DEL32 DEL36 DEL42 DEL32