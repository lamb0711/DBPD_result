GEODE-3506: improve validation/error checking for process file control

This closes #738

+import java.io.UncheckedIOException;
-    deleteFile(directory, processType.getStatusRequestFileName());
-    deleteFile(directory, processType.getStatusFileName());
-    deleteFile(directory, processType.getStopRequestFileName());
-  }
-
-  private void deleteFile(final File directory, final String fileName) {
-    File file = new File(directory, fileName);
-    if (file.exists()) {
-      file.delete();
+    try {
+      deleteFileWithValidation(new File(directory, processType.getStatusRequestFileName()),
+          "statusRequestFile");
+      deleteFileWithValidation(new File(directory, processType.getStatusFileName()), "statusFile");
+      deleteFileWithValidation(new File(directory, processType.getStopRequestFileName()),
+          "stopRequestFile");
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
-      ServiceState<?> state = handler.handleStatus();
-
-      File statusFile = new File(directory, processType.getStatusFileName());
-      if (statusFile.exists()) {
-        boolean deleted = statusFile.delete();
-        assert deleted;
-      }
-
-      File statusFileTmp = new File(directory, processType.getStatusFileName() + ".tmp");
-      if (statusFileTmp.exists()) {
-        boolean deleted = statusFileTmp.delete();
-        assert deleted;
-      }
-
-      boolean created = statusFileTmp.createNewFile();
-      assert created;
-
-      FileWriter writer = new FileWriter(statusFileTmp);
-      writer.write(state.toJson());
-      writer.flush();
-      writer.close();
-
-      boolean renamed = statusFileTmp.renameTo(statusFile);
-      assert renamed;
+      writeStatusToFile(fetchStatusWithValidation(handler), directory, processType);
+
+  private static String fetchStatusWithValidation(final ControlNotificationHandler handler) {
+    ServiceState<?> state = handler.handleStatus();
+    if (state == null) {
+      throw new IllegalStateException("Null ServiceState is invalid");
+    }
+
+    String jsonContent = state.toJson();
+    if (jsonContent == null) {
+      throw new IllegalStateException("Null JSON for status is invalid");
+    } else if (jsonContent.isEmpty()) {
+      throw new IllegalStateException("Empty JSON for status is invalid");
+    }
+
+    return jsonContent;
+  }
+
+  private static void deleteFileWithValidation(final File file, final String fileNameForMessage)
+      throws IOException {
+    if (file.exists()) {
+      if (!file.delete()) {
+        throw new IOException(
+            "Unable to delete " + fileNameForMessage + "'" + file.getCanonicalPath() + "'");
+      }
+    }
+  }
+
+  private static void writeStatusToFile(final String jsonContent, final File directory,
+      final ProcessType processType) throws IOException {
+    File statusFile = new File(directory, processType.getStatusFileName());
+    File statusFileTmp = new File(directory, processType.getStatusFileName() + ".tmp");
+
+    deleteFileWithValidation(statusFile, "statusFile");
+    deleteFileWithValidation(statusFileTmp, "statusFileTmp");
+
+    if (!statusFileTmp.createNewFile()) {
+      throw new IOException(
+          "Unable to create statusFileTmp '" + statusFileTmp.getCanonicalPath() + "'");
+    }
+
+    FileWriter writer = new FileWriter(statusFileTmp);
+    writer.write(jsonContent);
+    writer.flush();
+    writer.close();
+
+    if (!statusFileTmp.renameTo(statusFile)) {
+      throw new IOException("Unable to rename statusFileTmp '" + statusFileTmp.getCanonicalPath()
+          + "' to '" + statusFile.getCanonicalPath() + "'");
+    }
+  }

INS26 MOV31 MOV31 INS40 INS31 INS31 INS8 INS83 INS83 MOV43 INS42 INS44 MOV44 INS44 INS8 INS83 INS83 INS43 INS42 MOV44 INS8 INS83 UPD42 INS44 INS43 INS8 INS39 UPD42 INS44 INS43 MOV8 INS54 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 MOV60 INS25 INS60 INS25 INS41 INS83 INS43 INS42 UPD42 INS42 INS25 INS83 INS43 INS42 INS42 INS21 INS21 INS25 INS8 INS12 INS42 INS42 INS86 INS27 INS8 INS43 INS59 INS27 INS8 INS25 INS42 INS42 MOV32 INS8 INS42 INS32 INS32 INS38 INS38 INS8 MOV21 MOV21 MOV21 INS44 INS8 INS8 INS42 INS33 INS53 INS42 INS42 MOV32 INS42 INS33 INS53 INS32 INS8 INS25 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 INS53 INS42 MOV32 INS53 INS43 INS42 INS53 INS21 INS14 INS14 INS42 INS42 INS53 INS38 INS8 INS14 INS14 UPD42 INS14 INS45 UPD42 INS14 INS45 UPD42 INS14 INS45 INS42 INS14 INS32 INS43 INS45 INS43 INS45 INS14 MOV32 INS53 INS43 INS27 INS43 INS27 INS43 INS42 MOV32 MOV43 INS42 MOV32 MOV43 INS42 MOV32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS45 INS14 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 DEL42 DEL42 DEL42 DEL8 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL21 DEL8 DEL25 DEL8 DEL32 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL6 DEL8 DEL25 DEL42 DEL42 DEL32 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL6 DEL39 DEL42 DEL59 DEL60 DEL42 DEL6 DEL39 DEL42 DEL59 DEL60 DEL42 DEL6 DEL86 DEL41 DEL8