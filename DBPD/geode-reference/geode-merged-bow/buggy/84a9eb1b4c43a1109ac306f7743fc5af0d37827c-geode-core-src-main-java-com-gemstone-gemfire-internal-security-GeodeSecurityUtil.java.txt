GEODE-17: make geode authorization case-sensitive since our region names are case sensitive

* Specify case sensitive when creating the permission context
* Specify case sensitive when resolving the permission from shiro-ini file
* rename shiro-init to security-shiro-init since it's security related in DistributionConfig
* For DATA operations, a "NULL" regionName is used when regionName couldn't be resolved yet. Since for permissions,
  DATA:READ is different from DATA:READ:NULL

+import java.util.Properties;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.security.shiro.CustomAuthRealm;
+import org.apache.shiro.config.Ini.Section;
+import org.apache.shiro.config.IniSecurityManagerFactory;
+import org.apache.shiro.mgt.DefaultSecurityManager;
+import org.apache.shiro.mgt.SecurityManager;
+import org.apache.shiro.realm.Realm;
+  /**
+   * initialize Shiro's Security Manager and Security Utilities
+   * @param securityProps
+   */
+  public static void initSecurity(Properties securityProps){
+    if(securityProps==null)
+      return;
+
+    String shiroConfig = securityProps.getProperty(DistributionConfig.SECURITY_SHIRO_INIT_NAME);
+    String customAuthenticator =securityProps.getProperty(DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME);
+    if (!com.gemstone.gemfire.internal.lang.StringUtils.isBlank(shiroConfig)) {
+      IniSecurityManagerFactory factory = new IniSecurityManagerFactory("classpath:"+shiroConfig);
+
+      // we will need to make sure that shiro uses a case sensitive permission resolver
+      Section main = factory.getIni().addSection("main");
+      main.put("geodePermissionResolver", "com.gemstone.gemfire.internal.security.shiro.GeodePermissionResolver");
+      if(!main.containsKey("iniRealm.permissionResolver")) {
+        main.put("iniRealm.permissionResolver", "$geodePermissionResolver");
+      }
+
+      SecurityManager securityManager = factory.getInstance();
+      SecurityUtils.setSecurityManager(securityManager);
+    }
+    else if (!com.gemstone.gemfire.internal.lang.StringUtils.isBlank(customAuthenticator)) {
+      Realm realm = new CustomAuthRealm(securityProps);
+      SecurityManager securityManager = new DefaultSecurityManager(realm);
+      SecurityUtils.setSecurityManager(securityManager);
+    }
+    else{
+      SecurityUtils.setSecurityManager(null);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS43 INS42 INS25 INS60 INS60 INS25 INS66 INS42 INS42 INS27 INS41 INS43 INS59 INS43 INS59 INS38 INS8 INS25 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS60 INS21 INS25 INS60 INS21 INS38 INS8 INS8 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS38 INS8 INS43 INS59 INS32 INS32 INS60 INS60 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS27 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS43 INS42 INS42 INS42