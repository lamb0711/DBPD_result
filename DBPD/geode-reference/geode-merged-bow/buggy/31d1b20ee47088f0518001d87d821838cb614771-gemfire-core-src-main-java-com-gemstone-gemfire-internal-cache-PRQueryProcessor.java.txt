Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.cache.query.internal.CompiledSelect;
+import com.gemstone.gemfire.cache.query.internal.NWayMergeResults;
+import com.gemstone.gemfire.cache.query.types.ObjectType;
-  private final List _bucketsToQuery;
+  private final List<Integer> _bucketsToQuery;
+  private volatile ObjectType resultType = null; 
-      DefaultQuery query, Object[] parameters, List buckets) {
+      DefaultQuery query, Object[] parameters, List<Integer> buckets) {
+   * @return boolean true if the result is a struct type
-  public void executeQuery(Collection<Collection> resultCollector)
+  public boolean executeQuery(Collection<Collection> resultCollector)
-    }    
+    }
+    return this.resultType.isStructType();
+        
+        CompiledSelect cs = this.query.getSimpleSelect();
+       
+        if(cs != null && (cs.isOrderBy() || cs.isGroupBy())) {      
+          ExecutionContext context = new QueryExecutionContext(this.parameters, pr.getCache());
+          int limit = this.query.getLimit(parameters);
+          Collection mergedResults =coalesceOrderedResults(resultCollector, context, cs, limit);
+          resultCollector.clear();
+          resultCollector.add(mergedResults);
+        }
+          this.resultType = results.getCollectionType().getElementType(); 
-    context.setBucketList(buckets);
-    context.setCqQueryContext(query.isCqQuery());
+    CompiledSelect cs = this.query.getSimpleSelect();
+    int limit = this.query.getLimit(parameters);
+    if(cs != null && cs.isOrderBy() ) {
+      for(Integer bucketID : this._bucketsToQuery) {
+        List<Integer> singleBucket = Collections.singletonList(bucketID);
+        context.setBucketList(singleBucket);
+        executeQueryOnBuckets(resultCollector, context);
+      }     
+      Collection mergedResults =coalesceOrderedResults(resultCollector, context, cs, limit);
+      resultCollector.clear();
+      resultCollector.add(mergedResults);
+      
+    }else {
+      context.setBucketList(buckets);        
+      executeQueryOnBuckets(resultCollector, context);
+    }
+  }
+  
+  private Collection coalesceOrderedResults(Collection<Collection> results, 
+      ExecutionContext context, CompiledSelect cs, int limit) {
+    List<Collection> sortedResults = new ArrayList<Collection>(results.size());
+    //TODO :Asif : Deal with UNDEFINED
+    for(Object o : results) {
+      if(o instanceof Collection) {
+        sortedResults.add((Collection)o);
+      }        
+    }
+   
+    NWayMergeResults mergedResults = new NWayMergeResults(sortedResults, cs.isDistinct(), limit, 
+        cs.getOrderByAttrs(), context,cs.getElementTypeForOrderByQueries());
+    return mergedResults;
+  
+  }
+
+  private void executeQueryOnBuckets(Collection<Collection> resultCollector,
+      ExecutionContext context) throws ForceReattemptException,
+      QueryInvocationTargetException, QueryException {
+    context.setCqQueryContext(query.isCqQuery());
-      synchronized (resultCollector) {
-        if (results == QueryService.UNDEFINED) {
+      
+      synchronized (resultCollector) {        
+        //TODO:Asif: In what situation would the results object itself be undefined?
+        // The elements of the results can be undefined , but not the resultset itself
+        /*if (results == QueryService.UNDEFINED) {
-        } else {
+        } else {*/
+          this.resultType = ((SelectResults)results).getCollectionType().getElementType(); 
-        }
+        //}
-        ArrayList bucketList = new ArrayList();
-        bucketList.add(this._bucketId);
-        executeSequentially(this.resultColl, bucketList);
+        List<Integer> bucketList = Collections.singletonList(bId);       
+        ExecutionContext context = new QueryExecutionContext(this.parameters, pr.getCache(), this.query);
+        context.setBucketList(bucketList);
+        executeQueryOnBuckets(this.resultColl, context);
+        //executeSequentially(this.resultColl, bucketList);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 MOV43 INS74 INS83 INS83 INS43 INS59 UPD39 INS83 INS39 INS42 INS44 MOV44 INS43 MOV43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 INS44 INS43 MOV21 MOV43 INS43 INS42 INS42 INS33 INS74 INS65 INS41 INS74 INS42 INS42 INS42 MOV60 INS60 INS60 INS25 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS70 INS60 INS41 INS43 INS42 INS42 INS42 INS43 INS43 INS66 INS32 INS43 INS43 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS43 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS42 INS42 MOV42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS32 INS70 INS60 INS21 INS21 MOV21 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS14 INS52 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS42 INS44 INS22 INS8 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS74 INS32 INS42 INS62 INS8 INS43 INS42 INS32 INS42 INS32 INS42 INS32 MOV8 INS60 INS60 INS25 INS52 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS42 INS42 INS42 INS43 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS74 INS59 INS43 INS43 INS59 INS27 INS8 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS43 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS27 INS36 INS60 INS60 INS60 INS21 INS21 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS22 INS32 INS42 INS42 INS42 INS42 INS42 UPD43 INS22 INS32 INS22 INS22 INS42 INS42 INS33 INS27 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS32 INS42 UPD42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS43 INS22 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS11 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS42 INS42 DEL43 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22