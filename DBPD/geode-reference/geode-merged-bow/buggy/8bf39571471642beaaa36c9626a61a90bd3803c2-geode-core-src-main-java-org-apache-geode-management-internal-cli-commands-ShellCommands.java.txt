Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  @CliCommand(value = { CliStrings.EXIT, "quit" }, help = CliStrings.EXIT__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
+  @CliCommand(value = {CliStrings.EXIT, "quit"}, help = CliStrings.EXIT__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
-  @CliCommand(value = { CliStrings.CONNECT }, help = CliStrings.CONNECT__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_MANAGER })
+  @CliCommand(value = {CliStrings.CONNECT}, help = CliStrings.CONNECT__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX,
+      CliStrings.TOPIC_GEODE_MANAGER})
-    @CliOption(key = { CliStrings.CONNECT__LOCATOR },
-      unspecifiedDefaultValue = ConnectionEndpointConverter.DEFAULT_LOCATOR_ENDPOINTS,
-      optionContext = ConnectionEndpoint.LOCATOR_OPTION_CONTEXT,
-      help = CliStrings.CONNECT__LOCATOR__HELP) ConnectionEndpoint locatorTcpHostPort,
-    @CliOption(key = { CliStrings.CONNECT__JMX_MANAGER },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      optionContext = ConnectionEndpoint.JMXMANAGER_OPTION_CONTEXT,
-      help = CliStrings.CONNECT__JMX_MANAGER__HELP) ConnectionEndpoint memberRmiHostPort,
-    @CliOption(key = { CliStrings.CONNECT__USE_HTTP },
-      mandatory = false,
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.CONNECT__USE_HTTP__HELP) boolean useHttp,
-    @CliOption(key = { CliStrings.CONNECT__URL },
-      mandatory = false,
-      unspecifiedDefaultValue = CliStrings.CONNECT__DEFAULT_BASE_URL,
-      help = CliStrings.CONNECT__URL__HELP) String url,
-    @CliOption(key = { CliStrings.CONNECT__USERNAME },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__USERNAME__HELP) String userName,
-    @CliOption(key = { CliStrings.CONNECT__PASSWORD },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__PASSWORD__HELP) String password,
-    @CliOption(key = { CliStrings.CONNECT__KEY_STORE },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__KEY_STORE__HELP) String keystore,
-    @CliOption(key = { CliStrings.CONNECT__KEY_STORE_PASSWORD },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__KEY_STORE_PASSWORD__HELP) String keystorePassword,
-    @CliOption(key = { CliStrings.CONNECT__TRUST_STORE },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__TRUST_STORE__HELP) String truststore,
-    @CliOption(key = { CliStrings.CONNECT__TRUST_STORE_PASSWORD },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__TRUST_STORE_PASSWORD__HELP) String truststorePassword,
-    @CliOption(key = { CliStrings.CONNECT__SSL_CIPHERS },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__SSL_CIPHERS__HELP) String sslCiphers,
-    @CliOption(key = { CliStrings.CONNECT__SSL_PROTOCOLS },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__SSL_PROTOCOLS__HELP) String sslProtocols,
-    @CliOption(key = CliStrings.CONNECT__SECURITY_PROPERTIES,
-      optionContext = ConverterHint.FILE_PATHSTRING,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONNECT__SECURITY_PROPERTIES__HELP) final String gfSecurityPropertiesPath,
-    @CliOption(key = { CliStrings.CONNECT__USE_SSL },
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.CONNECT__USE_SSL__HELP) final boolean useSsl)
-  {
+      @CliOption(key = {CliStrings.CONNECT__LOCATOR},
+          unspecifiedDefaultValue = ConnectionEndpointConverter.DEFAULT_LOCATOR_ENDPOINTS,
+          optionContext = ConnectionEndpoint.LOCATOR_OPTION_CONTEXT,
+          help = CliStrings.CONNECT__LOCATOR__HELP) ConnectionEndpoint locatorTcpHostPort,
+      @CliOption(key = {CliStrings.CONNECT__JMX_MANAGER},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConnectionEndpoint.JMXMANAGER_OPTION_CONTEXT,
+          help = CliStrings.CONNECT__JMX_MANAGER__HELP) ConnectionEndpoint memberRmiHostPort,
+      @CliOption(key = {CliStrings.CONNECT__USE_HTTP}, mandatory = false,
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
+          help = CliStrings.CONNECT__USE_HTTP__HELP) boolean useHttp,
+      @CliOption(key = {CliStrings.CONNECT__URL}, mandatory = false,
+          unspecifiedDefaultValue = CliStrings.CONNECT__DEFAULT_BASE_URL,
+          help = CliStrings.CONNECT__URL__HELP) String url,
+      @CliOption(key = {CliStrings.CONNECT__USERNAME},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__USERNAME__HELP) String userName,
+      @CliOption(key = {CliStrings.CONNECT__PASSWORD},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__PASSWORD__HELP) String password,
+      @CliOption(key = {CliStrings.CONNECT__KEY_STORE},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__KEY_STORE__HELP) String keystore,
+      @CliOption(key = {CliStrings.CONNECT__KEY_STORE_PASSWORD},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__KEY_STORE_PASSWORD__HELP) String keystorePassword,
+      @CliOption(key = {CliStrings.CONNECT__TRUST_STORE},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__TRUST_STORE__HELP) String truststore,
+      @CliOption(key = {CliStrings.CONNECT__TRUST_STORE_PASSWORD},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__TRUST_STORE_PASSWORD__HELP) String truststorePassword,
+      @CliOption(key = {CliStrings.CONNECT__SSL_CIPHERS},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__SSL_CIPHERS__HELP) String sslCiphers,
+      @CliOption(key = {CliStrings.CONNECT__SSL_PROTOCOLS},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__SSL_PROTOCOLS__HELP) String sslProtocols,
+      @CliOption(key = CliStrings.CONNECT__SECURITY_PROPERTIES,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONNECT__SECURITY_PROPERTIES__HELP) final String gfSecurityPropertiesPath,
+      @CliOption(key = {CliStrings.CONNECT__USE_SSL}, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.CONNECT__USE_SSL__HELP) final boolean useSsl) {
-      return ResultBuilder.createInfoResult("Already connected to: " + getGfsh().getOperationInvoker().toString());
+      return ResultBuilder
+          .createInfoResult("Already connected to: " + getGfsh().getOperationInvoker().toString());
-          return ResultBuilder.createConnectionErrorResult(CliStrings.CONNECT__MSG__JMX_PASSWORD_MUST_BE_SPECIFIED);
+          return ResultBuilder
+              .createConnectionErrorResult(CliStrings.CONNECT__MSG__JMX_PASSWORD_MUST_BE_SPECIFIED);
-        truststoreToUse, truststorePasswordToUse, sslCiphersToUse, sslProtocolsToUse, gfSecurityPropertiesPath);
-    }
-    catch (IOException e) {
+          truststoreToUse, truststorePasswordToUse, sslCiphersToUse, sslProtocolsToUse,
+          gfSecurityPropertiesPath);
+    } catch (IOException e) {
-    }
-    else {
-      result = jmxConnect(sslConfigProps, memberRmiHostPort, locatorTcpHostPort, useSsl, userName, passwordToUse, gfSecurityPropertiesPath, false);
+    } else {
+      result = jmxConnect(sslConfigProps, memberRmiHostPort, locatorTcpHostPort, useSsl, userName,
+          passwordToUse, gfSecurityPropertiesPath, false);
-  private Result httpConnect(Map<String, String> sslConfigProps, boolean useSsl, String url, String userName, String passwordToUse)
-  {
+  private Result httpConnect(Map<String, String> sslConfigProps, boolean useSsl, String url,
+      String userName, String passwordToUse) {
-      LogWrapper.getInstance().warning(String.format("Sending HTTP request for Link Index at (%1$s)...", url.concat("/index").concat(query)));
+      LogWrapper.getInstance().warning(String.format(
+          "Sending HTTP request for Link Index at (%1$s)...", url.concat("/index").concat(query)));
-      LinkIndex linkIndex = new SimpleHttpRequester(gfsh, CONNECT_LOCATOR_TIMEOUT_MS, securityProperties).exchange(url.concat("/index").concat(query),
-        LinkIndex.class);
+      LinkIndex linkIndex =
+          new SimpleHttpRequester(gfsh, CONNECT_LOCATOR_TIMEOUT_MS, securityProperties)
+              .exchange(url.concat("/index").concat(query), LinkIndex.class);
-      LogWrapper.getInstance().warning(String.format("Received Link Index (%1$s)", linkIndex.toString()));
+      LogWrapper.getInstance()
+          .warning(String.format("Received Link Index (%1$s)", linkIndex.toString()));
-      HttpOperationInvoker operationInvoker = new RestHttpOperationInvoker(linkIndex, gfsh, url, securityProperties);
+      HttpOperationInvoker operationInvoker =
+          new RestHttpOperationInvoker(linkIndex, gfsh, url, securityProperties);
-      LogWrapper.getInstance().info(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, operationInvoker.toString()));
-      return ResultBuilder.createInfoResult(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, operationInvoker.toString()));
+      LogWrapper.getInstance()
+          .info(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, operationInvoker.toString()));
+      return ResultBuilder.createInfoResult(
+          CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, operationInvoker.toString()));
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      // if it's security exception, and we already sent in username and password, still retuns the connection error
+      // if it's security exception, and we already sent in username and password, still retuns the
+      // connection error
-      }
-      catch (IOException ioe) {
+      } catch (IOException ioe) {
-    }
-    finally {
+    } finally {
-                            ConnectionEndpoint memberRmiHostPort,
-                            ConnectionEndpoint locatorTcpHostPort,
-                            boolean useSsl,
-                            String userName,
-                            String passwordToUse,
-                            String gfSecurityPropertiesPath,
-                            boolean retry)
-  {
+      ConnectionEndpoint memberRmiHostPort, ConnectionEndpoint locatorTcpHostPort, boolean useSsl,
+      String userName, String passwordToUse, String gfSecurityPropertiesPath, boolean retry) {
-      // trying to find the hostPortToConnect, if rmi host port exists, use that, otherwise, use locator to find the rmi host port
+      // trying to find the hostPortToConnect, if rmi host port exists, use that, otherwise, use
+      // locator to find the rmi host port
-      }
-      else {
+      } else {
-        Gfsh.println(CliStrings.format(CliStrings.CONNECT__MSG__CONNECTING_TO_LOCATOR_AT_0, new Object[] { locatorTcpHostPort.toString(false) }));
-        ConnectToLocatorResult connectToLocatorResult = connectToLocator(locatorTcpHostPort.getHost(), locatorTcpHostPort.getPort(), CONNECT_LOCATOR_TIMEOUT_MS,
-          sslConfigProps);
+        Gfsh.println(CliStrings.format(CliStrings.CONNECT__MSG__CONNECTING_TO_LOCATOR_AT_0,
+            new Object[] {locatorTcpHostPort.toString(false)}));
+        ConnectToLocatorResult connectToLocatorResult =
+            connectToLocator(locatorTcpHostPort.getHost(), locatorTcpHostPort.getPort(),
+                CONNECT_LOCATOR_TIMEOUT_MS, sslConfigProps);
-        // when locator is configured to use SSL (ssl-enabled=true) but manager is not (jmx-manager-ssl=false)
-        if ((useSsl || !sslConfigProps.isEmpty()) && !connectToLocatorResult.isJmxManagerSslEnabled()) {
-          gfsh.logInfo(CliStrings.CONNECT__USE_SSL + " is set to true. But JMX Manager doesn't support SSL, connecting without SSL.", null);
+        // when locator is configured to use SSL (ssl-enabled=true) but manager is not
+        // (jmx-manager-ssl=false)
+        if ((useSsl || !sslConfigProps.isEmpty())
+            && !connectToLocatorResult.isJmxManagerSslEnabled()) {
+          gfsh.logInfo(
+              CliStrings.CONNECT__USE_SSL
+                  + " is set to true. But JMX Manager doesn't support SSL, connecting without SSL.",
+              null);
-        Gfsh.println(CliStrings.format(CliStrings.CONNECT__MSG__CONNECTING_TO_MANAGER_AT_0, new Object[] { hostPortToConnect.toString(false) }));
+        Gfsh.println(CliStrings.format(CliStrings.CONNECT__MSG__CONNECTING_TO_MANAGER_AT_0,
+            new Object[] {hostPortToConnect.toString(false)}));
-      JmxOperationInvoker operationInvoker = new JmxOperationInvoker(hostPortToConnect.getHost(), hostPortToConnect.getPort(), userName, passwordToUse,
-        sslConfigProps, gfSecurityPropertiesPath);
+      JmxOperationInvoker operationInvoker =
+          new JmxOperationInvoker(hostPortToConnect.getHost(), hostPortToConnect.getPort(),
+              userName, passwordToUse, sslConfigProps, gfSecurityPropertiesPath);
-      infoResultData.addLine(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
-      LogWrapper.getInstance().info(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
+      infoResultData.addLine(
+          CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
+      LogWrapper.getInstance().info(
+          CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      // if it's security exception, and we already sent in username and password, still retuns the connection error
+      // if it's security exception, and we already sent in username and password, still retuns the
+      // connection error
-        return jmxConnect(sslConfigProps, hostPortToConnect, null, useSsl, userName, passwordToUse, gfSecurityPropertiesPath, true);
-      }
-      catch (IOException ioe) {
+        return jmxConnect(sslConfigProps, hostPortToConnect, null, useSsl, userName, passwordToUse,
+            gfSecurityPropertiesPath, true);
+      } catch (IOException ioe) {
-    }
-    finally {
+    } finally {
-      errorMessage = CliStrings.format(CliStrings.CONNECT__MSG__ERROR, hostPortToConnect.toString(false), e.getMessage());
+      errorMessage = CliStrings.format(CliStrings.CONNECT__MSG__ERROR,
+          hostPortToConnect.toString(false), e.getMessage());
-    //Commenting the code to set cipher suites in GFSH rest connect (see #51645)
+    // Commenting the code to set cipher suites in GFSH rest connect (see #51645)
-    if(sslCiphersToUse != null){
-      System.setProperty("https.cipherSuites", sslCiphersToUse);
-    }
-    */
+     * if(sslCiphersToUse != null){ System.setProperty("https.cipherSuites", sslCiphersToUse); }
+     */
-        keyManagerFactory = KeyManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
+        keyManagerFactory =
+            KeyManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
-        trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
+        trustManagerFactory =
+            TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
-      SSLContext ssl = SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslProtocolsToUse)));
+      SSLContext ssl =
+          SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslProtocolsToUse)));
-        trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null, new java.security.SecureRandom());
+          trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null,
+          new java.security.SecureRandom());
-    }
-    finally {
+    } finally {
-  private Map<String, String> readSSLConfiguration(boolean useSsl, String keystoreToUse, String keystorePasswordToUse,
-                                                   String truststoreToUse, String truststorePasswordToUse, String sslCiphersToUse, String sslProtocolsToUse,
-                                                   String gfSecurityPropertiesPath) throws IOException
-  {
+  private Map<String, String> readSSLConfiguration(boolean useSsl, String keystoreToUse,
+      String keystorePasswordToUse, String truststoreToUse, String truststorePasswordToUse,
+      String sslCiphersToUse, String sslProtocolsToUse, String gfSecurityPropertiesPath)
+      throws IOException {
-          gfshInstance.printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE, "Security ", gfSecurityPropertiesPathToUse));
-        }
-        else {
+          gfshInstance
+              .printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+                  "Security ", gfSecurityPropertiesPathToUse));
+        } else {
-      }
-      else if (useSsl && gfSecurityPropertiesPath == null) {
+      } else if (useSsl && gfSecurityPropertiesPath == null) {
-          + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
+            + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
-     * Using do-while here for a case when --use-ssl=true is specified but
-     * no SSL options were specified & there was no gfsecurity properties
-     * specified or readable in default gfsh directory.
+     * Using do-while here for a case when --use-ssl=true is specified but no SSL options were
+     * specified & there was no gfsecurity properties specified or readable in default gfsh
+     * directory.
-     * NOTE: 2nd round of prompting is done only when sslConfigProps map is
-     * empty & useSsl is true - so we won't over-write any previous values.
+     * NOTE: 2nd round of prompting is done only when sslConfigProps map is empty & useSsl is true -
+     * so we won't over-write any previous values.
-        //NOTE: sslConfigProps map was empty
+        // NOTE: sslConfigProps map was empty
-            keystorePasswordToUse = gfshInstance.readPassword(CliStrings.CONNECT__KEY_STORE_PASSWORD + ": ");
+            keystorePasswordToUse =
+                gfshInstance.readPassword(CliStrings.CONNECT__KEY_STORE_PASSWORD + ": ");
-        }
-        else {//For cases where password is already part of command option
+        } else {// For cases where password is already part of command option
-            truststorePasswordToUse = gfshInstance.readPassword(CliStrings.CONNECT__TRUST_STORE_PASSWORD + ": ");
+            truststorePasswordToUse =
+                gfshInstance.readPassword(CliStrings.CONNECT__TRUST_STORE_PASSWORD + ": ");
-        }
-        else {//For cases where password is already part of command option
+        } else {// For cases where password is already part of command option
-        //sslConfigProps.put(DistributionConfig.CLUSTER_SSL_CIPHERS_NAME, sslCiphersToUse);
+        // sslConfigProps.put(DistributionConfig.CLUSTER_SSL_CIPHERS_NAME, sslCiphersToUse);
-        //sslConfigProps.put(DistributionConfig.CLUSTER_SSL_PROTOCOLS_NAME, sslProtocolsToUse);
+        // sslConfigProps.put(DistributionConfig.CLUSTER_SSL_PROTOCOLS_NAME, sslProtocolsToUse);
-    }
-    while (useSsl && sslConfigProps.isEmpty() && (0 == numTimesPrompted++) && !gfshInstance.isQuietMode());
+    } while (useSsl && sslConfigProps.isEmpty() && (0 == numTimesPrompted++)
+        && !gfshInstance.isQuietMode());
-              key = key.substring(0, key.length() - DistributionConfig.JMX_SSL_PROPS_SUFFIX.length());
+              key =
+                  key.substring(0, key.length() - DistributionConfig.JMX_SSL_PROPS_SUFFIX.length());
-            }
-            else if (!jmxSpecificProps.contains(key)) {// Prefer properties ending with "-jmx" over default SSL props.
+            } else if (!jmxSpecificProps.contains(key)) {// Prefer properties ending with "-jmx"
+                                                         // over default SSL props.
-      }
-      catch (IOException io) {
-        throw new RuntimeException(CliStrings.format(
-          CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0,
-          CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath())), io);
-      }
-      finally {
+      } catch (IOException io) {
+        throw new RuntimeException(
+            CliStrings.format(CliStrings.CONNECT__MSG__COULD_NOT_READ_CONFIG_FROM_0,
+                CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath())),
+            io);
+      } finally {
-      }
-      catch (MalformedURLException ignore) {
+      } catch (MalformedURLException ignore) {
-      }
-      catch (MalformedURLException ignore) {
+      } catch (MalformedURLException ignore) {
-  public static ConnectToLocatorResult connectToLocator(String host, int port, int timeout, Map<String, String> props)
-    throws IOException
-  {
+  public static ConnectToLocatorResult connectToLocator(String host, int port, int timeout,
+      Map<String, String> props) throws IOException {
-    JmxManagerLocatorResponse locatorResponse = JmxManagerLocatorRequest.send(host, port, timeout, props);
+    JmxManagerLocatorResponse locatorResponse =
+        JmxManagerLocatorRequest.send(host, port, timeout, props);
-          ? locatorResponseExceptionMessage : locatorResponseException.toString());
+            ? locatorResponseExceptionMessage : locatorResponseException.toString());
-          .concat(locatorResponseExceptionMessage).concat("'");
+            .concat(locatorResponseExceptionMessage).concat("'");
-    ConnectionEndpoint memberEndpoint = new ConnectionEndpoint(locatorResponse.getHost(), locatorResponse.getPort());
+    ConnectionEndpoint memberEndpoint =
+        new ConnectionEndpoint(locatorResponse.getHost(), locatorResponse.getPort());
-      memberEndpoint.toString(false));
+        memberEndpoint.toString(false));
-    return new ConnectToLocatorResult(memberEndpoint, resultMessage, locatorResponse.isJmxManagerSslEnabled());
+    return new ConnectToLocatorResult(memberEndpoint, resultMessage,
+        locatorResponse.isJmxManagerSslEnabled());
-  @CliCommand(value = { CliStrings.DISCONNECT }, help = CliStrings.DISCONNECT__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_MANAGER })
+  @CliCommand(value = {CliStrings.DISCONNECT}, help = CliStrings.DISCONNECT__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX,
+      CliStrings.TOPIC_GEODE_MANAGER})
-    }
-    else {
+    } else {
-          infoResultData.addLine(CliStrings
-            .format(CliStrings.DISCONNECT__MSG__DISCONNECTED, operationInvoker.toString()));
-          LogWrapper.getInstance().info(CliStrings.format(CliStrings.DISCONNECT__MSG__DISCONNECTED, operationInvoker.toString()));
-          gfshInstance.setPromptPath(org.apache.geode.management.internal.cli.converters.RegionPathConverter.DEFAULT_APP_CONTEXT_PATH);
-        }
-        else {
+          infoResultData.addLine(CliStrings.format(CliStrings.DISCONNECT__MSG__DISCONNECTED,
+              operationInvoker.toString()));
+          LogWrapper.getInstance().info(CliStrings.format(CliStrings.DISCONNECT__MSG__DISCONNECTED,
+              operationInvoker.toString()));
+          gfshInstance.setPromptPath(
+              org.apache.geode.management.internal.cli.converters.RegionPathConverter.DEFAULT_APP_CONTEXT_PATH);
+        } else {
-      }
-      catch (Exception e) {
-        result = ResultBuilder.createConnectionErrorResult(CliStrings.format(CliStrings.DISCONNECT__MSG__ERROR, e.getMessage()));
+      } catch (Exception e) {
+        result = ResultBuilder.createConnectionErrorResult(
+            CliStrings.format(CliStrings.DISCONNECT__MSG__ERROR, e.getMessage()));
-  @CliCommand(value = { CliStrings.DESCRIBE_CONNECTION }, help = CliStrings.DESCRIBE_CONNECTION__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX })
+  @CliCommand(value = {CliStrings.DESCRIBE_CONNECTION}, help = CliStrings.DESCRIBE_CONNECTION__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_JMX})
-        //        tabularResultData.accumulate("Monitored GemFire DS", operationInvoker.toString());
+        // tabularResultData.accumulate("Monitored GemFire DS", operationInvoker.toString());
-      }
-      else {
+      } else {
-    }
-    catch (Exception e) {
-      ErrorResultData errorResultData =
-        ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-          .addLine(e.getMessage());
+    } catch (Exception e) {
+      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
+          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-  @CliCommand(value = { CliStrings.ECHO }, help = CliStrings.ECHO__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
-  public Result echo(
-    @CliOption(key = { CliStrings.ECHO__STR, "" },
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      specifiedDefaultValue = "",
-      mandatory = true,
-      help = CliStrings.ECHO__STR__HELP) String stringToEcho)
-  {
+  @CliCommand(value = {CliStrings.ECHO}, help = CliStrings.ECHO__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
+  public Result echo(@CliOption(key = {CliStrings.ECHO__STR, ""},
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, specifiedDefaultValue = "",
+      mandatory = true, help = CliStrings.ECHO__STR__HELP) String stringToEcho) {
-    }
-    else {
+    } else {
-  @CliCommand(value = { CliStrings.SET_VARIABLE }, help = CliStrings.SET_VARIABLE__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
+  @CliCommand(value = {CliStrings.SET_VARIABLE}, help = CliStrings.SET_VARIABLE__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
-    @CliOption(key = CliStrings.SET_VARIABLE__VAR,
-      mandatory = true,
-      help = CliStrings.SET_VARIABLE__VAR__HELP)
-      String var,
-    @CliOption(key = CliStrings.SET_VARIABLE__VALUE,
-      mandatory = true,
-      help = CliStrings.SET_VARIABLE__VALUE__HELP)
-      String value)
-  {
+      @CliOption(key = CliStrings.SET_VARIABLE__VAR, mandatory = true,
+          help = CliStrings.SET_VARIABLE__VAR__HELP) String var,
+      @CliOption(key = CliStrings.SET_VARIABLE__VALUE, mandatory = true,
+          help = CliStrings.SET_VARIABLE__VALUE__HELP) String value) {
-      result = ResultBuilder.createInfoResult("Value for variable " + var + " is now: " + value + ".");
-    }
-    catch (IllegalArgumentException e) {
+      result =
+          ResultBuilder.createInfoResult("Value for variable " + var + " is now: " + value + ".");
+    } catch (IllegalArgumentException e) {
-  //Enable when "use region" command is required. See #46110
-  //  @CliCommand(value = { CliStrings.USE_REGION }, help = CliStrings.USE_REGION__HELP)
-  //  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_REGION})
-  //  public Result useRegion(
-  //      @CliArgument(name = CliStrings.USE_REGION__REGION,
-  //                   unspecifiedDefaultValue = "/",
-  //                   argumentContext = CliStrings.PARAM_CONTEXT_REGIONPATH,
-  //                   help = CliStrings.USE_REGION__REGION__HELP)
-  //                    String toRegion) {
-  //    Gfsh gfsh = Gfsh.getCurrentInstance();
+  // Enable when "use region" command is required. See #46110
+  // @CliCommand(value = { CliStrings.USE_REGION }, help = CliStrings.USE_REGION__HELP)
+  // @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH,
+  // CliStrings.TOPIC_GEODE_REGION})
+  // public Result useRegion(
+  // @CliArgument(name = CliStrings.USE_REGION__REGION,
+  // unspecifiedDefaultValue = "/",
+  // argumentContext = CliStrings.PARAM_CONTEXT_REGIONPATH,
+  // help = CliStrings.USE_REGION__REGION__HELP)
+  // String toRegion) {
+  // Gfsh gfsh = Gfsh.getCurrentInstance();
-  //    gfsh.setPromptPath(toRegion);
-  //    return ResultBuilder.createInfoResult("");
-  //  }
+  // gfsh.setPromptPath(toRegion);
+  // return ResultBuilder.createInfoResult("");
+  // }
-  @CliCommand(value = { CliStrings.DEBUG }, help = CliStrings.DEBUG__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliCommand(value = {CliStrings.DEBUG}, help = CliStrings.DEBUG__HELP)
+  @CliMetaData(shellOnly = true,
+      relatedTopic = {CliStrings.TOPIC_GFSH, CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-    @CliOption(key = CliStrings.DEBUG__STATE,
-      unspecifiedDefaultValue = "OFF",
-      mandatory = true,
-      optionContext = "debug",
-      help = CliStrings.DEBUG__STATE__HELP)
-      String state)
-  {
+      @CliOption(key = CliStrings.DEBUG__STATE, unspecifiedDefaultValue = "OFF", mandatory = true,
+          optionContext = "debug", help = CliStrings.DEBUG__STATE__HELP) String state) {
-      }
-      else if (state.equalsIgnoreCase("OFF")) {
+      } else if (state.equalsIgnoreCase("OFF")) {
-      }
-      else {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.DEBUG__MSG_0_INVALID_STATE_VALUE, state));
+      } else {
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.DEBUG__MSG_0_INVALID_STATE_VALUE, state));
-    }
-    else {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-        .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-          CliStrings.ECHO__MSG__NO_GFSH_INSTANCE);
+    } else {
+      ErrorResultData errorResultData =
+          ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+              .addLine(CliStrings.ECHO__MSG__NO_GFSH_INSTANCE);
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
-    @CliOption(key = { CliStrings.HISTORY__FILE }, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.HISTORY__FILE__HELP)
-      String saveHistoryTo,
-    @CliOption(key = { CliStrings.HISTORY__CLEAR }, specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false", help = CliStrings.HISTORY__CLEAR__HELP) Boolean clearHistory)
-  {
+      @CliOption(key = {CliStrings.HISTORY__FILE},
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.HISTORY__FILE__HELP) String saveHistoryTo,
+      @CliOption(key = {CliStrings.HISTORY__CLEAR}, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.HISTORY__CLEAR__HELP) Boolean clearHistory) {
-    //process clear history
+    // process clear history
-    }
-    else {
-      //Process file option
+    } else {
+      // Process file option
-      boolean flagForLineNumbers = (saveHistoryTo != null && saveHistoryTo
-        .length() > 0) ? false : true;
+      boolean flagForLineNumbers =
+          (saveHistoryTo != null && saveHistoryTo.length() > 0) ? false : true;
-            contents.append(String.format("%" + historySizeWordLength + "s  ",
-              lineNumber));
+            contents.append(String.format("%" + historySizeWordLength + "s  ", lineNumber));
-            errorResultData = ResultBuilder.createErrorResultData()
-              .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-              .addLine(CliStrings.HISTORY__MSG__FILE_DOES_NOT_EXISTS);
+            errorResultData =
+                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                    .addLine(CliStrings.HISTORY__MSG__FILE_DOES_NOT_EXISTS);
-            errorResultData = ResultBuilder.createErrorResultData()
-              .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-              .addLine(CliStrings.HISTORY__MSG__FILE_SHOULD_NOT_BE_DIRECTORY);
+            errorResultData =
+                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                    .addLine(CliStrings.HISTORY__MSG__FILE_SHOULD_NOT_BE_DIRECTORY);
-            errorResultData = ResultBuilder.createErrorResultData()
-              .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-              .addLine(CliStrings.HISTORY__MSG__FILE_CANNOT_BE_WRITTEN);
+            errorResultData =
+                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                    .addLine(CliStrings.HISTORY__MSG__FILE_CANNOT_BE_WRITTEN);
-      }
-      catch (IOException ex) {
-        return ResultBuilder.createInfoResult("File error " + ex.getMessage()
-          + " for file " + saveHistoryTo);
-      }
-      finally {
+      } catch (IOException ex) {
+        return ResultBuilder
+            .createInfoResult("File error " + ex.getMessage() + " for file " + saveHistoryTo);
+      } finally {
-        }
-        catch (IOException e) {
+        } catch (IOException e) {
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-            .addLine("exception in closing file");
+              .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine("exception in closing file");
-        return ResultBuilder.createInfoResult("Wrote successfully to file "
-          + saveHistoryTo);
-      }
-      else {
+        return ResultBuilder.createInfoResult("Wrote successfully to file " + saveHistoryTo);
+      } else {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      return ResultBuilder.createGemFireErrorResult("Exception occured while clearing history " + e.getMessage());
+      return ResultBuilder
+          .createGemFireErrorResult("Exception occured while clearing history " + e.getMessage());
-  @CliCommand(value = { CliStrings.RUN }, help = CliStrings.RUN__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
+  @CliCommand(value = {CliStrings.RUN}, help = CliStrings.RUN__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
-    @CliOption(key = CliStrings.RUN__FILE,
-      optionContext = ConverterHint.FILE,
-      mandatory = true,
-      help = CliStrings.RUN__FILE__HELP)
-      File file,
-    @CliOption(key = { CliStrings.RUN__QUIET },
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.RUN__QUIET__HELP)
-      boolean quiet,
-    @CliOption(key = { CliStrings.RUN__CONTINUEONERROR },
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.RUN__CONTINUEONERROR__HELP)
-      boolean continueOnError)
-  {
+      @CliOption(key = CliStrings.RUN__FILE, optionContext = ConverterHint.FILE, mandatory = true,
+          help = CliStrings.RUN__FILE__HELP) File file,
+      @CliOption(key = {CliStrings.RUN__QUIET}, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false", help = CliStrings.RUN__QUIET__HELP) boolean quiet,
+      @CliOption(key = {CliStrings.RUN__CONTINUEONERROR}, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.RUN__CONTINUEONERROR__HELP) boolean continueOnError) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
-  public Result encryptPassword(
-    @CliOption(key = CliStrings.ENCRYPT_STRING,
-      help = CliStrings.ENCRYPT_STRING__HELP,
-      mandatory = true)
-      String stringToEncrypt)
-  {
-    return ResultBuilder.createInfoResult(PasswordUtil.encrypt(stringToEncrypt, false/*echo*/));
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
+  public Result encryptPassword(@CliOption(key = CliStrings.ENCRYPT_STRING,
+      help = CliStrings.ENCRYPT_STRING__HELP, mandatory = true) String stringToEncrypt) {
+    return ResultBuilder.createInfoResult(PasswordUtil.encrypt(stringToEncrypt, false/* echo */));
-  @CliCommand(value = { CliStrings.VERSION }, help = CliStrings.VERSION__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
-  public Result version(
-    @CliOption(key = { CliStrings.VERSION__FULL },
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.VERSION__FULL__HELP)
-      boolean full)
-  {
+  @CliCommand(value = {CliStrings.VERSION}, help = CliStrings.VERSION__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
+  public Result version(@CliOption(key = {CliStrings.VERSION__FULL}, specifiedDefaultValue = "true",
+      unspecifiedDefaultValue = "false", help = CliStrings.VERSION__FULL__HELP) boolean full) {
-  @CliCommand(value = { CliStrings.SLEEP }, help = CliStrings.SLEEP__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
-  public Result sleep(
-    @CliOption(key = { CliStrings.SLEEP__TIME },
-      unspecifiedDefaultValue = "3",
-      help = CliStrings.SLEEP__TIME__HELP)
-      double time)
-  {
+  @CliCommand(value = {CliStrings.SLEEP}, help = CliStrings.SLEEP__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
+  public Result sleep(@CliOption(key = {CliStrings.SLEEP__TIME}, unspecifiedDefaultValue = "3",
+      help = CliStrings.SLEEP__TIME__HELP) double time) {
-    }
-    catch (InterruptedException ignorable) {
+    } catch (InterruptedException ignorable) {
-  @CliCommand(value = { CliStrings.SH }, help = CliStrings.SH__HELP)
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GFSH })
+  @CliCommand(value = {CliStrings.SH}, help = CliStrings.SH__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GFSH})
-    @CliArgument(name = CliStrings.SH__COMMAND,
-      mandatory = true,
-      help = CliStrings.SH__COMMAND__HELP)
-      String command,
-    @CliOption(key = CliStrings.SH__USE_CONSOLE,
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
-      help = CliStrings.SH__USE_CONSOLE__HELP)
-      boolean useConsole)
-  {
+      @CliArgument(name = CliStrings.SH__COMMAND, mandatory = true,
+          help = CliStrings.SH__COMMAND__HELP) String command,
+      @CliOption(key = CliStrings.SH__USE_CONSOLE, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.SH__USE_CONSOLE__HELP) boolean useConsole) {
-      result = ResultBuilder.buildResult(executeCommand(Gfsh.getCurrentInstance(), command, useConsole));
-    }
-    catch (IllegalStateException e) {
+      result =
+          ResultBuilder.buildResult(executeCommand(Gfsh.getCurrentInstance(), command, useConsole));
+    } catch (IllegalStateException e) {
-      LogWrapper.getInstance().warning("Unable to execute command \"" + command + "\". Reason:" + e.getMessage() + ".");
-    }
-    catch (IOException e) {
+      LogWrapper.getInstance()
+          .warning("Unable to execute command \"" + command + "\". Reason:" + e.getMessage() + ".");
+    } catch (IOException e) {
-      LogWrapper.getInstance().warning("Unable to execute command \"" + command + "\". Reason:" + e.getMessage() + ".");
+      LogWrapper.getInstance()
+          .warning("Unable to execute command \"" + command + "\". Reason:" + e.getMessage() + ".");
-  private static InfoResultData executeCommand(Gfsh gfsh, String userCommand, boolean useConsole) throws IOException {
+  private static InfoResultData executeCommand(Gfsh gfsh, String userCommand, boolean useConsole)
+      throws IOException {
-    }
-    else if (useConsole) {
+    } else if (useConsole) {
-    String[] commandArray = { cmdExecutor, cmdExecutorOpt, cmdToExecute };
+    String[] commandArray = {cmdExecutor, cmdExecutorOpt, cmdToExecute};
-    }
-    catch (final InterruptedException e) {
+    } catch (final InterruptedException e) {
-  @CliAvailabilityIndicator({ CliStrings.CONNECT, CliStrings.DISCONNECT, CliStrings.DESCRIBE_CONNECTION })
+  @CliAvailabilityIndicator({CliStrings.CONNECT, CliStrings.DISCONNECT,
+      CliStrings.DESCRIBE_CONNECTION})

