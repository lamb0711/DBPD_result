GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-      if (logger.isTraceEnabled(LogMarker.DA)) {
-        logger.trace(LogMarker.DA, "putProfile exiting {}", toStringWithProfiles());
+      if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE)) {
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE, "putProfile exiting {}",
+            toStringWithProfiles());
-        if (logger.isTraceEnabled(LogMarker.DA)) {
-          logger.trace(LogMarker.DA, "putProfile: ignoring {}; not in current view for {}",
+        if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE)) {
+          logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+              "putProfile: ignoring {}; not in current view for {}",
-      if (logger.isTraceEnabled(LogMarker.DA)) {
-        logger.trace(LogMarker.DA,
+      if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE)) {
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-    final boolean isDebugEnabled_DA = logger.isTraceEnabled(LogMarker.DA);
-    if (isDebugEnabled_DA) {
-      logger.trace(LogMarker.DA,
+    final boolean isTraceEnabled_DistributionAdvisor =
+        logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE);
+    if (isTraceEnabled_DistributionAdvisor) {
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-      if (isDebugEnabled_DA) {
-        logger.trace(LogMarker.DA,
+      if (isTraceEnabled_DistributionAdvisor) {
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {
-            logger.trace(LogMarker.STATE_FLUSH_OP, "StateFlush incremented membership version: {}",
-                membershipVersion);
+          if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE)) {
+            logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
+                "StateFlush incremented membership version: {}", membershipVersion);
-    if (isDebugEnabled_DA) {
-      logger.trace(LogMarker.DA, "DistributionAdvisor ({}) putProfile: {}", this, newProfile);
+    if (isTraceEnabled_DistributionAdvisor) {
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+          "DistributionAdvisor ({}) putProfile: {}", this, newProfile);
-   * @param oldProfile
-   * @param newProfile
-      if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {
-        logger.trace(LogMarker.STATE_FLUSH_OP, "StateFlush forced new membership version: {}",
-            membershipVersion);
+      if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE)) {
+        logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
+            "StateFlush forced new membership version: {}", membershipVersion);
-        if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_STATE_FLUSH_OP)) {
-          logger.trace(LogMarker.DISTRIBUTION_STATE_FLUSH_OP,
+        if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_STATE_FLUSH_VERBOSE)) {
+          logger.trace(LogMarker.DISTRIBUTION_STATE_FLUSH_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_STATE_FLUSH_OP)) {
-      logger.trace(LogMarker.DISTRIBUTION_STATE_FLUSH_OP,
+    if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_STATE_FLUSH_VERBOSE)) {
+      logger.trace(LogMarker.DISTRIBUTION_STATE_FLUSH_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {
-        logger.trace(LogMarker.STATE_FLUSH_OP, "StateFlush current opcount incremented: {}",
+      if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE)) {
+        logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE, "StateFlush current opcount incremented: {}",
-        if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {
-          logger.trace(LogMarker.STATE_FLUSH_OP, "StateFlush current opcount deccremented: {}",
-              currentVersionOpCount);
+        if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE)) {
+          logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
+              "StateFlush current opcount deccremented: {}", currentVersionOpCount);
-        if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {
-          logger.trace(LogMarker.STATE_FLUSH_OP, "StateFlush previous opcount incremented: {}",
-              previousVersionOpCount);
+        if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE)) {
+          logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
+              "StateFlush previous opcount incremented: {}", previousVersionOpCount);
-    final boolean isDebugEnabled_STATE_FLUSH_OP = logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP);
+    final boolean isDebugEnabled_STATE_FLUSH_OP =
+        logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP_VERBOSE);
-        logger.trace(LogMarker.STATE_FLUSH_OP, "Waiting for current operations to finish({})",
-            opCount);
+        logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
+            "Waiting for current operations to finish({})", opCount);
-        logger.trace(LogMarker.STATE_FLUSH_OP,
+        logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE,
-    final boolean isDebugEnabled = logger.isTraceEnabled(LogMarker.DA);
+    final boolean isDebugEnabled = logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE);
-      logger.trace(LogMarker.DA, "DistributionAdvisor ({}) removeId {}", this, memberId);
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE, "DistributionAdvisor ({}) removeId {}",
+          this, memberId);
-        logger.trace(LogMarker.DA, "DistributionAdvisor.removeId: no profile to remove for {}",
-            memberId);
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+            "DistributionAdvisor.removeId: no profile to remove for {}", memberId);
-      logger.trace(LogMarker.DA, "DistributionAdvisor.removeId: removed profile for {}", memberId);
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+          "DistributionAdvisor.removeId: removed profile for {}", memberId);
-      if (logger.isTraceEnabled(LogMarker.DA)) {
-        logger.trace(LogMarker.DA, "removeId {} exiting {}", memberId, toStringWithProfiles());
+      if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE)) {
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE, "removeId {} exiting {}", memberId,
+            toStringWithProfiles());
-    final boolean isDebugEnabled_DA = logger.isTraceEnabled(LogMarker.DA);
+    final boolean isDebugEnabled_DA = logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE);
-      logger.trace(LogMarker.DA, "removeId: removing member {} from resource {}", memberId,
-          getAdvisee().getFullPath());
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+          "removeId: removing member {} from resource {}", memberId, getAdvisee().getFullPath());
-            logger.trace(LogMarker.DA, "removeId: tracking removal of {}", profileToRemove);
+            logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE, "removeId: tracking removal of {}",
+                profileToRemove);
-    if (logger.isTraceEnabled(LogMarker.DA)) {
-      logger.trace(LogMarker.DA,
+    if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE)) {
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-    final boolean isDebugEnabled_DA = logger.isTraceEnabled(LogMarker.DA);
+    final boolean isDebugEnabled_DA = logger.isTraceEnabled(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE);
-      logger.trace(LogMarker.DA,
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-            logger.trace(LogMarker.DA,
+            logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-            logger.trace(LogMarker.DA,
+            logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-          logger.trace(LogMarker.DA,
+          logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
-        logger.trace(LogMarker.DA, "updateRemovedProfiles: garbage collecting member {}", memberId);
+        logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE,
+            "updateRemovedProfiles: garbage collecting member {}", memberId);
-      logger.trace(LogMarker.DA, "updateRemovedProfiles: removedId = {}", removedId);
+      logger.trace(LogMarker.DISTRIBUTION_ADVISOR_VERBOSE, "updateRemovedProfiles: removedId = {}",
+          removedId);
-  // /**
-  // * get the profile for a specific member
-  // * @since GemFire 5.1
-  // * @return the Profile or null
-  // */
-  // public synchronized Profile getProfile(InternalDistributedMember memberId) {
-  // int index = indexOfMemberId(memberId);
-  // if (index >= 0) {
-  // return profiles[index];
-  // }
-  // return null;
-  // }

UPD42 UPD42 UPD42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 DEL42 DEL65 DEL42 DEL65