GEODE-4858: Refactor 'list async-event-queue' command and function (#1975)

* Command refactored for cleaner presentation
* Command refactored to return ResultModel
* Function refactored to extend CliFunction

+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
-import java.util.Map;
+import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
+  private static final String[] DETAILS_OUTPUT_COLUMNS =
+      {"Member", "ID", "Batch Size", "Persistent", "Disk Store", "Max Memory", "Listener"};
+  private static final String ASYNC_EVENT_QUEUES_TABLE_SECTION = "Async Event Queues";
+  private static final String MEMBER_ERRORS_TABLE_SECTION = "Member Errors";
+
-  public Result listAsyncEventQueues() {
-    try {
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      boolean accumulatedData = false;
-
-      Set<DistributedMember> targetMembers = getAllNormalMembers();
-
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(new ListAsyncEventQueuesFunction(),
-          new Object[] {}, targetMembers);
-      List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
-
-      for (CliFunctionResult result : results) {
-        if (result.getThrowable() != null) {
-          tabularData.accumulate("Member", result.getMemberIdOrName());
-          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName()
-              + ": " + result.getThrowable().getMessage());
-          accumulatedData = true;
-          tabularData.setStatus(Result.Status.ERROR);
-        } else {
-          AsyncEventQueueDetails[] details = (AsyncEventQueueDetails[]) result.getSerializables();
-          for (AsyncEventQueueDetails detail : details) {
-            tabularData.accumulate("Member", result.getMemberIdOrName());
-            tabularData.accumulate("ID", detail.getId());
-            tabularData.accumulate("Batch Size", detail.getBatchSize());
-            tabularData.accumulate("Persistent", detail.isPersistent());
-            tabularData.accumulate("Disk Store", detail.getDiskStoreName());
-            tabularData.accumulate("Max Memory", detail.getMaxQueueMemory());
-
-            Properties listenerProperties = detail.getListenerProperties();
-            if (listenerProperties == null || listenerProperties.size() == 0) {
-              tabularData.accumulate("Listener", detail.getListener());
-            } else {
-              StringBuilder propsStringBuilder = new StringBuilder();
-              propsStringBuilder.append('(');
-              boolean firstProperty = true;
-              for (Map.Entry<Object, Object> property : listenerProperties.entrySet()) {
-                if (!firstProperty) {
-                  propsStringBuilder.append(',');
-                } else {
-                  firstProperty = false;
-                }
-                propsStringBuilder.append(property.getKey()).append('=')
-                    .append(property.getValue());
-              }
-              propsStringBuilder.append(')');
-
-              tabularData.accumulate("Listener",
-                  detail.getListener() + propsStringBuilder.toString());
-            }
-            accumulatedData = true;
-          }
-        }
-      }
-
-      if (!accumulatedData) {
-        return ResultBuilder
-            .createInfoResult(CliStrings.LIST_ASYNC_EVENT_QUEUES__NO_QUEUES_FOUND_MESSAGE);
-      }
-
-      return ResultBuilder.buildResult(tabularData);
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable th) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createGemFireErrorResult(
-          CliStrings.format(CliStrings.LIST_ASYNC_EVENT_QUEUES__ERROR_WHILE_LISTING_REASON_0,
-              new Object[] {th.getMessage()}));
+  public ResultModel listAsyncEventQueues() {
+    Set<DistributedMember> targetMembers = getAllNormalMembers();
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+
+    // Each (successful) member returns a list of AsyncEventQueueDetails.
+    List<CliFunctionResult> results = executeAndGetFunctionResult(
+        new ListAsyncEventQueuesFunction(), new Object[] {}, targetMembers);
+
+    ResultModel result = buildAsyncEventQueueInfo(results);
+
+    // Report any explicit errors as well.
+    if (results.stream().anyMatch(r -> !r.isSuccessful())) {
+      TabularResultModel errors = result.addTable(MEMBER_ERRORS_TABLE_SECTION);
+      errors.setColumnHeader("Member", "Error");
+      results.stream().filter(r -> !r.isSuccessful()).forEach(errorResult -> errors
+          .addRow(errorResult.getMemberIdOrName(), errorResult.getStatusMessage()));
+    }
+
+    return result;
+  }
+
+  /**
+   * @return An info result containing the table of AsyncEventQueueDetails.
+   *         If no details are found, returns an info result message indicating so.
+   */
+  private ResultModel buildAsyncEventQueueInfo(List<CliFunctionResult> results) {
+    if (results.stream().filter(CliFunctionResult::isSuccessful)
+        .noneMatch(r -> ((List<AsyncEventQueueDetails>) r.getResultObject()).size() > 0)) {
+      return ResultModel.createInfo(CliStrings.LIST_ASYNC_EVENT_QUEUES__NO_QUEUES_FOUND_MESSAGE);
+    }
+
+    ResultModel result = new ResultModel();
+    TabularResultModel detailsTable = result.addTable(ASYNC_EVENT_QUEUES_TABLE_SECTION);
+    detailsTable.setColumnHeader(DETAILS_OUTPUT_COLUMNS);
+
+    results.stream().filter(CliFunctionResult::isSuccessful).forEach(successfulResult -> {
+      String memberName = successfulResult.getMemberIdOrName();
+      ((List<AsyncEventQueueDetails>) successfulResult.getResultObject())
+          .forEach(entry -> detailsTable.addRow(memberName, entry.getId(),
+              String.valueOf(entry.getBatchSize()), String.valueOf(entry.isPersistent()),
+              String.valueOf(entry.getDiskStoreName()), String.valueOf(entry.getMaxQueueMemory()),
+              getListenerEntry(entry)));
+    });
+    return result;
+  }
+
+  /**
+   * @return The class of the entry's listener. If the listener is parameterized, these parameters
+   *         are appended in a json format.
+   */
+  private String getListenerEntry(AsyncEventQueueDetails entry) {
+    return entry.getListener() + propertiesToString(entry.getListenerProperties());
+  }
+
+  /**
+   * @return A json format of the properties, or the empty string if the properties are empty.
+   */
+  static String propertiesToString(Properties props) {
+    if (props == null || props.isEmpty()) {
+      return "";
+    }
+    ObjectMapper mapper = new ObjectMapper();
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    try {
+      mapper.writeValue(baos, props);
+    } catch (IOException e) {
+      return e.getMessage();
+    }
+    return baos.toString();

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV77 MOV77 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS43 INS85 INS42 INS4 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS45 INS42 MOV60 MOV25 MOV60 INS60 INS25 INS41 INS65 INS42 INS74 INS42 INS25 INS60 INS60 MOV21 INS21 INS41 INS65 INS42 UPD42 INS41 INS65 INS42 MOV43 INS42 MOV25 INS60 INS60 INS54 MOV41 UPD42 MOV42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 MOV74 INS43 INS59 INS32 INS8 INS42 INS66 INS66 INS43 INS43 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS66 INS66 INS27 INS66 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 UPD43 MOV43 UPD42 UPD42 MOV42 INS42 INS32 INS32 INS42 INS86 INS60 MOV21 MOV21 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS86 INS41 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS86 MOV32 MOV32 INS27 INS32 INS41 INS42 INS42 INS14 UPD42 MOV42 INS42 INS14 MOV21 MOV44 INS8 UPD42 UPD42 MOV42 INS42 MOV42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS59 INS38 INS43 INS59 INS32 UPD42 MOV42 INS90 INS59 INS27 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS90 INS59 INS8 UPD42 UPD42 INS32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS45 INS43 INS43 UPD43 UPD42 INS41 UPD42 UPD42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS45 INS32 UPD42 MOV42 INS86 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS34 UPD42 MOV42 UPD42 MOV42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV60 INS21 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS86 INS59 INS32 INS36 UPD42 MOV42 UPD43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS59 INS38 INS42 INS42 INS42 MOV32 INS32 INS11 UPD42 UPD42 INS32 INS36 INS42 INS86 INS42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 UPD74 MOV74 INS32 INS42 INS42 INS11 INS59 INS32 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 MOV42 UPD42 MOV42 INS74 INS32 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS32 MOV32 INS32 INS32 INS42 INS43 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL76 DEL76 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL32 DEL32 DEL42 DEL32 DEL45 DEL32 DEL27 DEL76 DEL42 DEL45 DEL32 DEL42 DEL43 DEL14 DEL42 DEL38 DEL40 DEL32 DEL41 DEL8 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL11 DEL32 DEL59 DEL60 DEL43 DEL42 DEL44 DEL42 DEL32 DEL33 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL85 DEL5 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL13 DEL32 DEL21 DEL39 DEL9 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL38 DEL13 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL13 DEL32 DEL32 DEL21 DEL8 DEL70 DEL13 DEL32 DEL21 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31