Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public final class DistTXStateOnCoordinator extends DistTXState implements
-    DistTXCoordinatorInterface {
-  
+public final class DistTXStateOnCoordinator extends DistTXState
+    implements DistTXCoordinatorInterface {
+
-  
+
-  public DistTXStateOnCoordinator(TXStateProxy proxy,
-      boolean onBehalfOfRemoteStub) {
+  public DistTXStateOnCoordinator(TXStateProxy proxy, boolean onBehalfOfRemoteStub) {
-  
+
-  
+
-      logger
-          .debug("DistTXStateOnCoordinator.addPrimaryTransactionalOperations add "
-              + dtop
-              + " ,stub before="
-              + this
-              + " ,isUpdatingTxStateDuringPreCommit="
-              + isUpdatingTxStateDuringPreCommit());
+      logger.debug("DistTXStateOnCoordinator.addPrimaryTransactionalOperations add " + dtop
+          + " ,stub before=" + this + " ,isUpdatingTxStateDuringPreCommit="
+          + isUpdatingTxStateDuringPreCommit());
-   // [DISTTX] TODO Remove this
+      // [DISTTX] TODO Remove this
-        logger.debug("DistTXStateOnCoordinator.addPrimaryTransactionalOperations "
-            + " add primary op = {}", dtop);
-        
+        logger.debug(
+            "DistTXStateOnCoordinator.addPrimaryTransactionalOperations " + " add primary op = {}",
+            dtop);
+
-      logger
-          .debug("DistTXStateOnCoordinator.addPrimaryTransactionalOperations stub after add = "
-              + this);
+      logger.debug(
+          "DistTXStateOnCoordinator.addPrimaryTransactionalOperations stub after add = " + this);
-  
+
-  
+
-    boolean retVal = applyOpsOnRedundantCopy(this.proxy.getCache()
-        .getDistributedSystem().getDistributedMember(),
-        this.secondaryTransactionalOperations);
+    boolean retVal =
+        applyOpsOnRedundantCopy(this.proxy.getCache().getDistributedSystem().getDistributedMember(),
+            this.secondaryTransactionalOperations);
-  
+
-    this.rollbackResponse = true; // True if no exception 
+    this.rollbackResponse = true; // True if no exception
-    
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateStub#putEntry(org.apache.geode
-   * .internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object,
-   * boolean, long, boolean)
+   * @see org.apache.geode.internal.cache.TXStateStub#putEntry(org.apache.geode
+   * .internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
-      logger.debug("DistTXStateOnCoordinator.putEntry "
-          + event.getKeyInfo().getKey(), new Throwable());
+      logger.debug("DistTXStateOnCoordinator.putEntry " + event.getKeyInfo().getKey(),
+          new Throwable());
-    
-    boolean returnValue = super.putEntry(event, ifNew, ifOld, expectedOldValue,
-        requireOldValue, lastModified, overwriteDestroyed);
-    
+
+    boolean returnValue = super.putEntry(event, ifNew, ifOld, expectedOldValue, requireOldValue,
+        lastModified, overwriteDestroyed);
+
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org
-   * .apache.geode.internal.cache.EntryEventImpl, boolean, boolean,
-   * java.lang.Object, boolean, long, boolean)
+   * @see org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org
+   * .apache.geode.internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long,
+   * boolean)
-  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew,
-      boolean ifOld, Object expectedOldValue, boolean requireOldValue,
-      long lastModified, boolean overwriteDestroyed)
-      throws DataLocationException {
+  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, long lastModified,
+      boolean overwriteDestroyed) throws DataLocationException {
-      logger.debug("DistTXStateOnCoordinator.putEntryOnRemote "
-          + event.getKeyInfo().getKey(), new Throwable());
+      logger.debug("DistTXStateOnCoordinator.putEntryOnRemote " + event.getKeyInfo().getKey(),
+          new Throwable());
-    
+
-    
+
-  
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry
-   * (org.apache.geode.internal.cache.EntryEventImpl, boolean,
-   * java.lang.Object)
+   * @see org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry
+   * (org.apache.geode.internal.cache.EntryEventImpl, boolean, java.lang.Object)
-//    logger.debug("DistTXStateOnCoordinator.destroyExistingEntry", new Throwable());
+    // logger.debug("DistTXStateOnCoordinator.destroyExistingEntry", new Throwable());
-    
+
-  
+
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java
-   * .lang.Integer, org.apache.geode.internal.cache.EntryEventImpl,
-   * java.lang.Object)
+   * @see org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java .lang.Integer,
+   * org.apache.geode.internal.cache.EntryEventImpl, java.lang.Object)
-  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite,
-      Object expectedOldValue) throws DataLocationException {
-//    logger.debug("DistTXStateOnCoordinator.destroyOnRemote", new Throwable());
-    
+  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
+      throws DataLocationException {
+    // logger.debug("DistTXStateOnCoordinator.destroyOnRemote", new Throwable());
+
-    
+
-    addPrimaryTransactionalOperations(new DistTxEntryEvent(event));
+      addPrimaryTransactionalOperations(new DistTxEntryEvent(event));
-  
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry
+   * @see org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
-//    logger
-//        .debug("DistTXStateOnCoordinator.invalidateExistingEntry", new Throwable());
-    
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
+    // logger
+    // .debug("DistTXStateOnCoordinator.invalidateExistingEntry", new Throwable());
+
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote
+   * @see org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote
-//    logger.debug("DistTXStateOnCoordinator.invalidateOnRemote", new Throwable());
+    // logger.debug("DistTXStateOnCoordinator.invalidateOnRemote", new Throwable());
-  
-  
-  public void postPutAll(DistributedPutAllOperation putallOp,
-      VersionedObjectList successfulPuts, LocalRegion region) {
+
+
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
-    EntryEventImpl event = EntryEventImpl.createPutAllEvent(putallOp, region,
-        Operation.PUTALL_CREATE, putallOp.getBaseEvent().getKey(), putallOp
-            .getBaseEvent().getValue());
+    EntryEventImpl event =
+        EntryEventImpl.createPutAllEvent(putallOp, region, Operation.PUTALL_CREATE,
+            putallOp.getBaseEvent().getKey(), putallOp.getBaseEvent().getValue());
-  
+
-    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(removeAllOp,
-        region, removeAllOp.getBaseEvent().getKey());
+    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(removeAllOp, region,
+        removeAllOp.getBaseEvent().getKey());
-  
+
-  public boolean getPreCommitResponse()
-      throws UnsupportedOperationInTransactionException {
+  public boolean getPreCommitResponse() throws UnsupportedOperationInTransactionException {
-  public boolean getRollbackResponse()
-      throws UnsupportedOperationInTransactionException {
+  public boolean getRollbackResponse() throws UnsupportedOperationInTransactionException {
-  
+
-  
+
-  
+
-  public void gatherAffectedRegions(HashSet<LocalRegion> regionSet,
-      boolean includePrimaryRegions, boolean includeRedundantRegions)
-      throws UnsupportedOperationInTransactionException {
+  public void gatherAffectedRegions(HashSet<LocalRegion> regionSet, boolean includePrimaryRegions,
+      boolean includeRedundantRegions) throws UnsupportedOperationInTransactionException {
-  
+
-      gatherAffectedRegions(sortedRegionName,
-          this.primaryTransactionalOperations);
+      gatherAffectedRegions(sortedRegionName, this.primaryTransactionalOperations);
-      gatherAffectedRegions(sortedRegionName,
-          this.secondaryTransactionalOperations);
+      gatherAffectedRegions(sortedRegionName, this.secondaryTransactionalOperations);
-  
+
-        sortedRegionName.add(PartitionedRegionHelper.getBucketFullPath(
-            lr.getFullPath(), dtos.getKeyInfo().getBucketId()));
+        sortedRegionName.add(PartitionedRegionHelper.getBucketFullPath(lr.getFullPath(),
+            dtos.getKeyInfo().getBucketId()));
-  
+
-  protected boolean applyIndividualOp(DistTxEntryEvent dtop)
-      throws DataLocationException {
+  protected boolean applyIndividualOp(DistTxEntryEvent dtop) throws DataLocationException {
-    if (dtop.op.isUpdate() || dtop.op.isCreate()) { 
+    if (dtop.op.isUpdate() || dtop.op.isCreate()) {
-        assert(dtop.getPutAllOperation() != null);
-        //[DISTTX] TODO what do with versions next?
+        assert (dtop.getPutAllOperation() != null);
+        // [DISTTX] TODO what do with versions next?
-            dtop.getPutAllOperation().putAllDataSize, true,
-            dtop.region.concurrencyChecksEnabled);
+            dtop.getPutAllOperation().putAllDataSize, true, dtop.region.concurrencyChecksEnabled);
-        result = putEntry(dtop, false/* ifNew */,
-          false/* ifOld */, null/* expectedOldValue */,
-          false/* requireOldValue */, 0L/* lastModified */, true/*
-                                                                 * overwriteDestroyed
-                                                                 * *not*
-                                                                 * used
-                                                                 */);
+        result = putEntry(dtop, false/* ifNew */, false/* ifOld */, null/* expectedOldValue */,
+            false/* requireOldValue */, 0L/* lastModified */, true/*
+                                                                   * overwriteDestroyed *not* used
+                                                                   */);
-        final VersionedObjectList versions = new VersionedObjectList(
-            dtop.getRemoveAllOperation().removeAllDataSize, true,
-            dtop.region.concurrencyChecksEnabled);
+        final VersionedObjectList versions =
+            new VersionedObjectList(dtop.getRemoveAllOperation().removeAllDataSize, true,
+                dtop.region.concurrencyChecksEnabled);
-                                                             * TODO
-                                                             * [DISTTX]
-                                                             */);
+                                                                  * TODO [DISTTX]
+                                                                  */);
-                                                              * TODO
-                                                              * [DISTTX]
-                                                              */);
+                                                                   * TODO [DISTTX]
+                                                                   */);
-      logger.debug("DistTXCommitPhaseOneMessage: unsupported TX operation {}",
-          dtop);
+      logger.debug("DistTXCommitPhaseOneMessage: unsupported TX operation {}", dtop);
-  
+
-  
+

