GEODE-949: refactor and repackage security test code

* move test security classes from security package to com.gemstone.gemfire.security.generator
* move test security resources from lib package to com.gemstone.gemfire.security.generator
* move test security classes from templates.security package to com.gemstone.gemfire.security.templates
* fix places where security code ate exceptions
* fix up javadocs
* reformat and refactor code to be more readable and follow standards

-
+  private final static String secPrefix =  "gemfire.sys.security-";
+  private final static int gemfireSysPrefixLen = "gemfire.sys.".length();
+
+  private Properties securityProps = getSecurityProps();
-   * @param member the member to be authenticated
-   * @param credentials the credentials used in authentication
+   *
+   * @param  member
+   *         the member to be authenticated
+   * @param  credentials
+   *         the credentials used in authentication
-  public String authenticate(InternalDistributedMember member, Object credentials)
-    throws AuthenticationFailedException {
-    return authenticate(member, credentials, securityProps, services.getJoinLeave().getMemberID());
+  public String authenticate(InternalDistributedMember member, Object credentials) throws AuthenticationFailedException {
+    return authenticate(member, credentials, this.securityProps, this.services.getJoinLeave().getMemberID());
-  // for unit test
-  /* package */ String authenticate(
-      DistributedMember member, Object credentials, Properties secProps, DistributedMember localMember)
-    throws AuthenticationFailedException {
+  /**
+   * Method is package protected to be used in testing.
+   */
+  String authenticate(DistributedMember member, Object credentials, Properties secProps, DistributedMember localMember) throws AuthenticationFailedException {
-    InternalLogWriter securityLogWriter = services.getSecurityLogWriter();
+    InternalLogWriter securityLogWriter = this.services.getSecurityLogWriter();
+
-        securityLogWriter.warning(
-            AUTH_PEER_AUTHENTICATION_FAILED_WITH_EXCEPTION,
-          new Object[] {member, authMethod, ex.getLocalizedMessage()}, ex);
+        securityLogWriter.warning(AUTH_PEER_AUTHENTICATION_FAILED_WITH_EXCEPTION, new Object[] {member, authMethod, ex.getLocalizedMessage()}, ex);
+
-      securityLogWriter.warning(
-          AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS, new Object[] {member, authMethod});
+      securityLogWriter.warning(AUTH_PEER_AUTHENTICATION_MISSING_CREDENTIALS, new Object[] {member, authMethod});
+
-  /* package */ Principal invokeAuthenticator(String authMethod, DistributedMember member, Object credentials)
-    throws AuthenticationFailedException {
+  /**
+   * Method is package protected to be used in testing.
+   */
+  Principal invokeAuthenticator(String authMethod, DistributedMember member, Object credentials) throws AuthenticationFailedException {
+
-      if (auth == null)
-        throw new AuthenticationFailedException(
-          HandShake_AUTHENTICATOR_INSTANCE_COULD_NOT_BE_OBTAINED.toLocalizedString());
+      if (auth == null) {
+        throw new AuthenticationFailedException(HandShake_AUTHENTICATOR_INSTANCE_COULD_NOT_BE_OBTAINED.toLocalizedString());
+      }
-      LogWriter logWriter = services.getLogWriter();
-      LogWriter securityLogWriter = services.getSecurityLogWriter();
-      auth.init(securityProps, logWriter, securityLogWriter);
+      LogWriter logWriter = this.services.getLogWriter();
+      LogWriter securityLogWriter = this.services.getSecurityLogWriter();
+
+      auth.init(this.securityProps, logWriter, securityLogWriter); // this.securityProps contains security-ldap-basedn but security-ldap-baseDomainName is expected
+
+
-      throw new AuthenticationFailedException(
-        HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
+      throw new AuthenticationFailedException(HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
+
-   * Get credential object for the given GemFire distributed member
-   * @param member the target distributed member
+   * Get credential object for the given GemFire distributed member.
+   *
+   * @param  member
+   *         the target distributed member
+
-      services.getSecurityLogWriter().warning(
-          LocalizedStrings.AUTH_FAILED_TO_OBTAIN_CREDENTIALS_IN_0_USING_AUTHINITIALIZE_1_2,
-          new Object[] {authMethod, e.getLocalizedMessage()});
+      services.getSecurityLogWriter().warning(LocalizedStrings.AUTH_FAILED_TO_OBTAIN_CREDENTIALS_IN_0_USING_AUTHINITIALIZE_1_2, new Object[] { authMethod, e.getLocalizedMessage() });
-  // for unit test
+  /**
+   * For testing only.
+   */
+
-        if (auth == null)
-          throw new AuthenticationRequiredException(
-            AUTH_FAILED_TO_ACQUIRE_AUTHINITIALIZE_INSTANCE.toLocalizedString(authMethod));
+        if (auth == null) {
+          throw new AuthenticationRequiredException(AUTH_FAILED_TO_ACQUIRE_AUTHINITIALIZE_INSTANCE.toLocalizedString(authMethod));
+        }
+
+
-      throw new AuthenticationRequiredException(
-        HandShake_FAILED_TO_ACQUIRE_AUTHINITIALIZE_METHOD_0.toLocalizedString(authMethod), ex);
+      throw new AuthenticationRequiredException(HandShake_FAILED_TO_ACQUIRE_AUTHINITIALIZE_METHOD_0.toLocalizedString(authMethod), ex);
+
-  private final static String secPrefix =  "gemfire.sys.security-";
-  private final static int gemfireSysPrefixLen = "gemfire.sys.".length();
-  private Properties securityProps = getSecurityProps();
-
-    // TODO Auto-generated method stub
-    
-

MOV23 MOV23 MOV23 INS29 INS29 INS29 INS65 INS65 INS65 UPD66 UPD66 INS66 INS66 UPD66 UPD66 INS66 INS22 INS52 INS42 INS22 INS8 MOV43 MOV43 INS22 INS52 INS42 MOV53 INS22 INS52 INS42 INS22 INS22 INS52 INS42 INS8 INS52 INS42 INS52 INS42 MOV53 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42