GEODE-5223 Add unit tests for AbstractRegionMap.txApplyDestroy (#1988)


-                      event.release();
+                      releaseEvent(event);
-                  event.release();
+                  releaseEvent(event);
-          event.release();
+          releaseEvent(event);
-    final boolean hasRemoteOrigin = !((TXId) txId).getMemberId().equals(owner.getMyId());
+    final boolean hasRemoteOrigin = !txId.getMemberId().equals(owner.getMyId());
-              boolean invokeCallbacks = shouldCreateCallbackEvent(owner, isRegionReady || inRI);
-              EntryEventImpl callbackEvent = createCallbackEvent(owner, op, key, null, txId,
+              final EntryEventImpl callbackEvent = createCallbackEvent(owner, op, key, null, txId,
-                        if (shouldPerformConcurrencyChecks(owner, callbackEvent)
+                        if (owner.getConcurrencyChecksEnabled()
+                boolean invokeCallbacks = shouldInvokeCallbacks(owner, isRegionReady || inRI);
-                if (owner.getConcurrencyChecksEnabled() && txEntryState != null
-                    && callbackEvent != null) {
+                if (owner.getConcurrencyChecksEnabled() && txEntryState != null) {
-                  callbackEvent.release();
+                  releaseEvent(callbackEvent);
-                    boolean invokeCallbacks =
-                        shouldCreateCallbackEvent(owner, isRegionReady || inRI);
+                    boolean invokeCallbacks = shouldInvokeCallbacks(owner, isRegionReady || inRI);
+                      // TODO: Token.DESTROYED should only be used if "inTokenMode".
+                      // Otherwise this should be a TOMBSTONE
-                        callbackEvent.release();
+                        releaseEvent(callbackEvent);
-                  if (shouldPerformConcurrencyChecks(owner, callbackEvent)
+                  if (owner.getConcurrencyChecksEnabled()
-              boolean invokeCallbacks = shouldCreateCallbackEvent(owner, isRegionReady || inRI);
+              boolean invokeCallbacks = shouldInvokeCallbacks(owner, isRegionReady || inRI);
-                if (shouldPerformConcurrencyChecks(owner, callbackEvent)
-                    && callbackEvent.getVersionTag() != null) {
+                if (owner.getConcurrencyChecksEnabled() && callbackEvent.getVersionTag() != null) {
-                  callbackEvent.release();
+                  releaseEvent(callbackEvent);
-            if (owner.getConcurrencyChecksEnabled() && txEntryState != null
-                && callbackEvent != null) {
+            if (owner.getConcurrencyChecksEnabled() && txEntryState != null) {
-      } else if (re == null) {
+      } else { // re == null
-            callbackEvent.release();
+            releaseEvent(callbackEvent);
+  void releaseEvent(final EntryEventImpl event) {
+    event.release();
+  }
+
-                  boolean invokeCallbacks = shouldCreateCallbackEvent(owner, owner.isInitialized());
+                  boolean invokeCallbacks = shouldInvokeCallbacks(owner, owner.isInitialized());
-                      callbackEvent.release();
+                      releaseEvent(callbackEvent);
-              boolean invokeCallbacks = shouldCreateCallbackEvent(owner, owner.isInitialized());
+              boolean invokeCallbacks = shouldInvokeCallbacks(owner, owner.isInitialized());
-                  callbackEvent.release();
+                  releaseEvent(callbackEvent);
-              boolean invokeCallbacks = shouldCreateCallbackEvent(owner, owner.isInitialized());
+              boolean invokeCallbacks = shouldInvokeCallbacks(owner, owner.isInitialized());
-                  callbackEvent.release();
+                  releaseEvent(callbackEvent);
-              callbackEvent.release();
+              releaseEvent(callbackEvent);
-    ((BucketRegion) owner).handleWANEvent(callbackEvent);
+    owner.handleWANEvent(callbackEvent);
-  static boolean shouldCreateCallbackEvent(final LocalRegion owner, final boolean isInitialized) {
+  static boolean shouldInvokeCallbacks(final LocalRegion owner, final boolean isInitialized) {
-    originator = ((TXId) txId).getMemberId();
+    originator = txId.getMemberId();

INS31 INS39 INS42 INS44 MOV8 UPD42 INS83 INS43 INS42 INS42 INS42 INS42 MOV8 INS42 UPD42 UPD42 MOV27 UPD42 UPD42 UPD42 UPD42 INS83 MOV60 INS8 MOV27 UPD42 UPD42 INS21 MOV21 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36