Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The PdxBasedCrudController class serving REST Requests related to the REST CRUD operation on region
+ * The PdxBasedCrudController class serving REST Requests related to the REST CRUD operation on
+ * region
+ * 
-@Api(value = "region",
-     description = "region CRUD operations")
+@Api(value = "region", description = "region CRUD operations")
-  
+
-  
-  protected static final String DEFAULT_GETALL_RESULT_LIMIT = "50";  
-  
+
+  protected static final String DEFAULT_GETALL_RESULT_LIMIT = "50";
+
+   * 
-  
+
-                  consumes = MediaType.APPLICATION_JSON_VALUE,
-                  produces = { MediaType.APPLICATION_JSON_VALUE })
-  @ApiOperation(
-    value = "create entry",
-    notes = "Create (put-if-absent) data in region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 201, message = "Created."),
-    @ApiResponse( code = 400, message = "Data specified (JSON doc) in the request body is invalid." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 409, message = "Key already exist in region."),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")   
-  } )
+      consumes = MediaType.APPLICATION_JSON_VALUE, produces = {MediaType.APPLICATION_JSON_VALUE})
+  @ApiOperation(value = "create entry", notes = "Create (put-if-absent) data in region",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 201, message = "Created."),
+      @ApiResponse(code = 400,
+          message = "Data specified (JSON doc) in the request body is invalid."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 409, message = "Key already exist in region."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-      @RequestParam(value = "key", required = false) String key,
-      @RequestBody final String json) {
+      @RequestParam(value = "key", required = false) String key, @RequestBody final String json) {
-    logger.debug("Posting (creating/putIfAbsent) JSON document ({}) to Region ({}) with Key ({})...",
-          json, region, key);
+    logger.debug(
+        "Posting (creating/putIfAbsent) JSON document ({}) to Region ({}) with Key ({})...", json,
+        region, key);
-    
-    //Check whether the user has supplied single JSON doc or Array of JSON docs  
+
+    // Check whether the user has supplied single JSON doc or Array of JSON docs
-    if(JSONTypes.JSON_ARRAY.equals(jsonType)){
+    if (JSONTypes.JSON_ARRAY.equals(jsonType)) {
-    }else {
-      existingPdxObj = postValue(region, key, convert(json));  
+    } else {
+      existingPdxObj = postValue(region, key, convert(json));
-    
+
-    
+
-  
+
+   * 
-  @RequestMapping(method = RequestMethod.GET, value = "/{region}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
-  @ApiOperation(
-    value = "read all data for region",
-    notes = "Read all data for region. Use limit param to get fixed or limited number of entries.",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad request." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")    
-  } )
+  @RequestMapping(method = RequestMethod.GET, value = "/{region}",
+      produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+  @ApiOperation(value = "read all data for region",
+      notes = "Read all data for region. Use limit param to get fixed or limited number of entries.",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-      @RequestParam(value = "limit", defaultValue = DEFAULT_GETALL_RESULT_LIMIT) final String limit) {
+      @RequestParam(value = "limit",
+          defaultValue = DEFAULT_GETALL_RESULT_LIMIT) final String limit) {
-      
+
-    
-    for (Map.Entry<Object, Object> entry : getValues(region).entrySet() ) {
+
+    for (Map.Entry<Object, Object> entry : getValues(region).entrySet()) {
-    
-    if ("ALL".equalsIgnoreCase(limit) ) {  
+
+    if ("ALL".equalsIgnoreCase(limit)) {
-        if(maxLimit < 0){
-          String errorMessage = String.format("Negative limit param (%1$s) is not valid!", maxLimit);
-          return new ResponseEntity<String>(
-              convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+        if (maxLimit < 0) {
+          String errorMessage =
+              String.format("Negative limit param (%1$s) is not valid!", maxLimit);
+          return new ResponseEntity<String>(convertErrorAsJson(errorMessage),
+              HttpStatus.BAD_REQUEST);
-        
+
-        keyList = StringUtils.collectionToDelimitedString(
-            keys.subList(0, maxLimit), ",");
+        keyList = StringUtils.collectionToDelimitedString(keys.subList(0, maxLimit), ",");
-        return new ResponseEntity<String>(
-            convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
-      }  
-    } 
-    
-    headers.set("Content-Location", toUri(region, keyList).toASCIIString() );
+        return new ResponseEntity<String>(convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+      }
+    }
+
+    headers.set("Content-Location", toUri(region, keyList).toASCIIString());
-  
+
+   * 
-   * @param keys string containing comma seperated keys 
+   * @param keys string containing comma seperated keys
-                  produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
-  @ApiOperation(
-    value = "read data for specific keys",
-    notes = "Read data for specific set of keys in region.",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad Request."),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")  
-  } )
+      produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+  @ApiOperation(value = "read data for specific keys",
+      notes = "Read data for specific set of keys in region.", response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad Request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-  public ResponseEntity<?> read(
-      @PathVariable("region") String region,
+  public ResponseEntity<?> read(@PathVariable("region") String region,
-      @RequestParam(value = "ignoreMissingKey", required = false ) final String ignoreMissingKey) {
-    logger.debug("Reading data for keys ({}) in Region ({})",
-          ArrayUtils.toString(keys), region);
-    
+      @RequestParam(value = "ignoreMissingKey", required = false) final String ignoreMissingKey) {
+    logger.debug("Reading data for keys ({}) in Region ({})", ArrayUtils.toString(keys), region);
+
-    
-    if (keys.length == 1) { 
+
+    if (keys.length == 1) {
-      //if region.get(K) return null (i.e INVLD or TOMBSTONE case) We consider 404, NOT Found case  
-      if(value == null) {
-        throw new ResourceNotFoundException(String.format("Key (%1$s) does not exist for region (%2$s) in cache!", keys[0], region));
+      // if region.get(K) return null (i.e INVLD or TOMBSTONE case) We consider 404, NOT Found case
+      if (value == null) {
+        throw new ResourceNotFoundException(String
+            .format("Key (%1$s) does not exist for region (%2$s) in cache!", keys[0], region));
-      
+
-      //fail fast for the case where ignoreMissingKey param is not specified correctly.
-      if (ignoreMissingKey != null 
-          && !(ignoreMissingKey.equalsIgnoreCase("true") || ignoreMissingKey.equalsIgnoreCase("false"))){
-        String errorMessage = String.format("ignoreMissingKey param (%1$s) is not valid. valid usage is ignoreMissingKey=true!", ignoreMissingKey);
-        return new ResponseEntity<String>(
-            convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+      // fail fast for the case where ignoreMissingKey param is not specified correctly.
+      if (ignoreMissingKey != null && !(ignoreMissingKey.equalsIgnoreCase("true")
+          || ignoreMissingKey.equalsIgnoreCase("false"))) {
+        String errorMessage = String.format(
+            "ignoreMissingKey param (%1$s) is not valid. valid usage is ignoreMissingKey=true!",
+            ignoreMissingKey);
+        return new ResponseEntity<String>(convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
-      
-      if(!("true".equalsIgnoreCase(ignoreMissingKey))) { 
+
+      if (!("true".equalsIgnoreCase(ignoreMissingKey))) {
-        if(unknownKeys.size() > 0) {
+        if (unknownKeys.size() > 0) {
-          String erroString = String.format("Requested keys (%1$s) not exist in region (%2$s)", StringUtils.collectionToDelimitedString(unknownKeys, ","), region);
-          return new ResponseEntity<String>(convertErrorAsJson(erroString), headers, HttpStatus.BAD_REQUEST);
+          String erroString = String.format("Requested keys (%1$s) not exist in region (%2$s)",
+              StringUtils.collectionToDelimitedString(unknownKeys, ","), region);
+          return new ResponseEntity<String>(convertErrorAsJson(erroString), headers,
+              HttpStatus.BAD_REQUEST);
-      }  
-      
+      }
+
-  
-      //currently we are not removing keys having value null from the result.
+
+      // currently we are not removing keys having value null from the result.
-      headers.set("Content-Location", toUri(region, keyList).toASCIIString() );
+      headers.set("Content-Location", toUri(region, keyList).toASCIIString());
+   * 
-                  consumes = { MediaType.APPLICATION_JSON_VALUE },
-                  produces = { MediaType.APPLICATION_JSON_VALUE })
-  @ApiOperation(
-    value = "update data for key",
-    notes = "Update or insert (put) data for key in region." +
-            "op=REPLACE, update (replace) data with key if and only if the key exists in region" +
-            "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad Request."),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist or if key is not mapped to some value for REPLACE or CAS."),
-    @ApiResponse( code = 409, message = "For CAS, @old value does not match to the current value in region" ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")
-  } )
+      consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE})
+  @ApiOperation(value = "update data for key",
+      notes = "Update or insert (put) data for key in region."
+          + "op=REPLACE, update (replace) data with key if and only if the key exists in region"
+          + "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad Request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404,
+          message = "Region does not exist or if key is not mapped to some value for REPLACE or CAS."),
+      @ApiResponse(code = 409,
+          message = "For CAS, @old value does not match to the current value in region"),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-    
-    if(keys.length > 1){
-      //putAll case
+
+    if (keys.length > 1) {
+      // putAll case
-      //put case
+      // put case
-    
-  @RequestMapping(method = RequestMethod.HEAD, value = "/{region}", produces = MediaType.APPLICATION_JSON_VALUE)
-  @ApiOperation(
-    value = "Get total number of entries",
-    notes = "Get total number of entries into the specified region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad request." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")    
-  } )
+
+  @RequestMapping(method = RequestMethod.HEAD, value = "/{region}",
+      produces = MediaType.APPLICATION_JSON_VALUE)
+  @ApiOperation(value = "Get total number of entries",
+      notes = "Get total number of entries into the specified region", response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
-      
+
-    
-    headers.set("Resource-Count", String.valueOf(getRegion(region).size()) );
+
+    headers.set("Resource-Count", String.valueOf(getRegion(region).size()));
-  
+

UPD66 INS66 UPD66