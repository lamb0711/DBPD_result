GEODE-2730: refactor rules

* consolidate the two sets of server/locator starter rules
* do not allow member start up at test initialization time.
* validate properties in @Before
* use provider in the chained rules to get the appropriate ports in @Before

+import java.util.HashMap;
+import java.util.Map;
+ * This rules allows you to create/start a server using any @ConfigurationProperties, you can chain
+ * the configuration of the rule like this: ServerStarterRule server = new ServerStarterRule()
+ * .withProperty(key, value) .withName(name) .withProperties(properties) .withSecurityManager(class)
+ * .withJmxManager() .withRestService() .withEmbeddedLocator() .withRegion(type, name) etc, etc. If
+ * your rule calls withAutoStart(), the server will be started before your test code.
+ *
+ * In your test code, you can use the rule to access the server's attributes, like the port
+ * information, working dir, name, and the cache and cacheServer it creates.
+ *
-
+  private Map<String, RegionShortcut> regions = new HashMap<>();
+
+  public void before() {
+    normalizeProperties();
+    if (autoStart) {
+      startServer();
+      regions.forEach((regionName, regionType) -> {
+        getCache().createRegionFactory(regionType).create(regionName);
+      });
+    }
+  }
+
+  @Override
-  public ServerStarterRule startServer() {
-    return startServer(false);
+  public void startServer() {
+    startServer(false);
-  public ServerStarterRule createRegion(RegionShortcut type, String name) {
-    cache.createRegionFactory(type).create(name);
+  public ServerStarterRule withRegion(RegionShortcut type, String name) {
+    this.autoStart = true;
+    regions.put(name, type);
-  public ServerStarterRule startServer(Properties properties, int locatorPort) {
-    return withProperties(properties).withConnectionToLocator(locatorPort).startServer();
+  public void startServer(Properties properties, int locatorPort) {
+    withProperties(properties).withConnectionToLocator(locatorPort).startServer();
-  public ServerStarterRule startServer(boolean pdxPersistent) {
-    normalizeProperties();
+  public void startServer(boolean pdxPersistent) {
-    return this;

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS39 UPD42 INS39 INS39 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS43 INS42 INS14 INS42 MOV21 INS25 INS21 INS21 INS21 INS42 INS42 INS42 INS74 INS42 INS8 MOV32 INS7 MOV32 INS43 INS21 INS21 INS22 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS42 INS86 INS59 INS59 INS8 INS42 INS42 INS21 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL43 DEL41 DEL42 DEL32 DEL42 DEL43 DEL41 DEL42 DEL43 DEL52 DEL41