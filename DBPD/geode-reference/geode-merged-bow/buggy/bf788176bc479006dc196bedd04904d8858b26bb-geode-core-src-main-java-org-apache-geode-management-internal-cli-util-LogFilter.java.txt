GEODE-2267:  add validation to the arguments and include export stats in the command

  * use the config to determine where the logs and stats are

-import static java.util.stream.Collectors.toSet;
-
-import org.apache.geode.internal.logging.InternalLogWriter;
+import org.apache.logging.log4j.Level;
-import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.attribute.BasicFileAttributes;
-import java.util.Arrays;
-import java.util.Set;
-  private final Set<String> permittedLogLevels;
+  private final Level thisLogLevel;
+  private final boolean thisLevelOnly;
-  public LogFilter(Set<String> permittedLogLevels, LocalDateTime startDate, LocalDateTime endDate) {
-    this.permittedLogLevels = (permittedLogLevels == null || permittedLogLevels.isEmpty())
-        ? allLogLevels() : permittedLogLevels;
+  public LogFilter(Level logLevel, LocalDateTime startDate, LocalDateTime endDate) {
+    this(logLevel, false, startDate, endDate);
+  }
+
+  public LogFilter(Level logLevel, boolean thisLevelOnly, LocalDateTime startDate,
+      LocalDateTime endDate) {
+    assert logLevel != null;
+    this.thisLogLevel = logLevel;
+    this.thisLevelOnly = thisLevelOnly;
-  protected LineFilterResult acceptsLogEntry(String logLevel, LocalDateTime logTimestamp) {
+  protected LineFilterResult acceptsLogEntry(Level logLevel, LocalDateTime logTimestamp) {
-      result = permittedLogLevels.contains(logLevel) ? LineFilterResult.LINE_ACCEPTED
-          : LineFilterResult.LINE_REJECTED;
+      if (thisLevelOnly) {
+        result = logLevel.intLevel() == thisLogLevel.intLevel() ? LineFilterResult.LINE_ACCEPTED
+            : LineFilterResult.LINE_REJECTED;
+      } else {
+        result = logLevel.isMoreSpecificThan(thisLogLevel) ? LineFilterResult.LINE_ACCEPTED
+            : LineFilterResult.LINE_REJECTED;
+      }
+    if (startDate == null && endDate == null) {
+      return true;
+    }
+
+    if (endDate == null) {
+      return getEndTimeOf(file).isAfter(startDate);
+    }
+
-      return true;
+      return getStartTimeOf(file).isBefore(endDate);
+
+    return (getEndTimeOf(file).isAfter(startDate) && getStartTimeOf(file).isBefore(endDate));
+
+  }
+
+  private static LocalDateTime getEndTimeOf(Path file) {
-      return (getEndTimeOf(file).isAfter(startDate));
-    } catch (IOException e) {
+      long lastModifiedMillis = file.toFile().lastModified();
+      return Instant.ofEpochMilli(lastModifiedMillis).atZone(ZoneId.systemDefault())
+          .toLocalDateTime();
+    } catch (Exception e) {
-      return true;
+      return LocalDateTime.MAX;
-  private static LocalDateTime getEndTimeOf(Path file) throws IOException {
-    long lastModifiedMillis = file.toFile().lastModified();
-    return Instant.ofEpochMilli(lastModifiedMillis).atZone(ZoneId.systemDefault())
-        .toLocalDateTime();
-  }
-
-  public static Set<String> allLogLevels() {
-    return Arrays.stream(InternalLogWriter.levelNames).collect(toSet());
+  private static LocalDateTime getStartTimeOf(Path file) {
+    try {
+      BasicFileAttributes attributes = Files.readAttributes(file, BasicFileAttributes.class);
+      long lastModifiedMillis = attributes.creationTime().toMillis();
+      return Instant.ofEpochMilli(lastModifiedMillis).atZone(ZoneId.systemDefault())
+          .toLocalDateTime();
+    } catch (Exception e) {
+      LOGGER.error("Unable to determine creation time", e);
+      return LocalDateTime.MIN;
+    }

MOV26 MOV26 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS43 INS83 INS83 INS39 INS59 MOV83 MOV42 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 MOV44 MOV44 INS8 INS8 INS8 UPD83 INS43 INS42 INS44 INS8 UPD42 MOV42 UPD42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS39 INS42 INS6 INS21 INS21 MOV21 MOV21 UPD43 MOV25 INS25 INS25 INS41 INS54 UPD42 MOV42 INS43 INS42 INS54 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS9 INS42 INS42 INS42 INS27 INS7 INS7 UPD42 INS25 INS27 INS27 MOV8 INS27 INS8 INS36 MOV8 MOV12 UPD42 MOV42 INS8 INS12 UPD42 MOV42 MOV33 INS22 INS42 INS22 INS42 MOV27 MOV8 INS8 MOV27 INS27 INS42 INS33 INS42 INS33 INS41 INS27 INS60 INS60 MOV41 INS44 INS8 INS52 INS42 INS52 INS42 INS25 INS42 INS33 MOV32 INS32 INS32 INS32 UPD43 INS43 INS59 INS39 INS59 INS32 INS43 INS42 INS21 INS41 INS42 INS8 MOV8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS40 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS32 INS42 MOV32 UPD42 MOV42 MOV32 INS42 INS42 INS45 INS42 INS7 INS43 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 INS42 INS16 INS42 INS27 INS40 INS40 INS32 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL43 DEL74 DEL43 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL27 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL32 DEL42 DEL16 DEL7 DEL21 DEL8 DEL31 DEL25 DEL36 DEL54 DEL8 DEL9 DEL42 DEL43 DEL40 DEL32 DEL43 DEL43 DEL74 DEL42 DEL8