Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Directory is an interface to file/RAM storage for lucene. This class uses
- * the {@link FileSystem} class to store the data in the provided geode
- * regions.
+ * Directory is an interface to file/RAM storage for lucene. This class uses the {@link FileSystem}
+ * class to store the data in the provided geode regions.
-   * Create a region directory with a given file and chunk region. These regions
-   * may be bucket regions or they may be replicated regions.
+   * Create a region directory with a given file and chunk region. These regions may be bucket
+   * regions or they may be replicated regions.
-  public RegionDirectory(ConcurrentMap<String, File> fileRegion, ConcurrentMap<ChunkKey, byte[]> chunkRegion, FileSystemStats stats) {
+  public RegionDirectory(ConcurrentMap<String, File> fileRegion,
+      ConcurrentMap<ChunkKey, byte[]> chunkRegion, FileSystemStats stats) {
-    String[] array = fs.listFileNames().toArray(new String[]{});
+    String[] array = fs.listFileNames().toArray(new String[] {});
-  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {
+  public IndexOutput createTempOutput(String prefix, String suffix, IOContext context)
+      throws IOException {
-  
-  
+
+

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66