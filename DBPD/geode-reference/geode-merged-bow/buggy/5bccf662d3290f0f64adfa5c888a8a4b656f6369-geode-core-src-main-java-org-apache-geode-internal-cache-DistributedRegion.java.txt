GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.DistributedRegion_REGION_0_1_SPLITBRAIN_CONFIG_WARNING,
-          new Object[] {regionName, attrs.getScope()}));
+      logger.warn(
+          "Region {} is being created with scope {} but enable-network-partition-detection is enabled in the distributed system.  This can lead to cache inconsistencies if there is a network failure.",
+          new Object[] {regionName, attrs.getScope()});
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.DistributedRegion_REGION_0_ENABLE_NETWORK_PARTITION_WARNING,
-          new Object[] {regionName, attrs.getScope()}));
+      logger.warn(
+          "Creating persistent region {}, but enable-network-partition-detection is set to false. Running with network partition detection disabled can lead to an unrecoverable system in the event of a network split.",
+          regionName);
-              LocalizedStrings.DistributedRegion_OPERATION_IS_DISALLOWED_BY_LOSSACTION_0_BECAUSE_THESE_REQUIRED_ROLES_ARE_MISSING_1
-                  .toLocalizedString(getMembershipAttributes().getLossAction(), roles),
+              String.format(
+                  "Operation is disallowed by LossAction %s because these required roles are missing: %s.",
+                  getMembershipAttributes().getLossAction(), roles),
-              LocalizedStrings.DistributedRegion_OPERATION_IS_DISALLOWED_BY_LOSSACTION_0_BECAUSE_THESE_REQUIRED_ROLES_ARE_MISSING_1
-                  .toLocalizedString(getMembershipAttributes().getLossAction(), roles),
+              String.format(
+                  "Operation is disallowed by LossAction %s because these required roles are missing: %s.",
+                  getMembershipAttributes().getLossAction(), roles),
-          LocalizedStrings.DistributedRegion_OPERATION_DISTRIBUTION_MAY_HAVE_FAILED_TO_NOTIFY_THESE_REQUIRED_ROLES_0
-              .toLocalizedString(failedRoles),
+          String.format("Operation distribution may have failed to notify these required roles: %s",
+              failedRoles),
-          LocalizedStrings.DistributedRegion_OPERATION_DISTRIBUTION_WAS_NOT_DONE_TO_THESE_REQUIRED_ROLES_0
-              .toLocalizedString(failedRoles),
+          String.format("Operation distribution was not done to these required roles: %s",
+              failedRoles),
-      logger.fatal(LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION),
+      logger.fatal("Unexpected exception:",
-          logger.fatal(
-              LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION), e);
+          logger.fatal("Unexpected exception:", e);
-      logger.fatal(LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION),
+      logger.fatal("Unexpected exception:",
-            logger.fatal(
-                LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION),
-                e);
+            logger.fatal("Unexpected exception:", e);
-      logger.fatal(LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION),
+      logger.fatal("Unexpected exception:",
-          LocalizedStrings.DistributedRegion_DISTRIBUTION_LOCKS_ARE_ONLY_SUPPORTED_FOR_REGIONS_WITH_GLOBAL_SCOPE_NOT_0
-              .toLocalizedString(this.scope));
+          String.format(
+              "Distribution locks are only supported for regions with GLOBAL scope, not  %s",
+              this.scope));
-          LocalizedStrings.DistributedRegion_DISTRIBUTION_LOCKS_ARE_ONLY_SUPPORTED_FOR_REGIONS_WITH_GLOBAL_SCOPE_NOT_0
-              .toLocalizedString(this.scope));
+          String.format(
+              "Distribution locks are only supported for regions with GLOBAL scope, not  %s",
+              this.scope));
-          LocalizedStrings.DistributedRegion_THIS_THREAD_HAS_SUSPENDED_ALL_LOCKING_FOR_THIS_REGION
-              .toLocalizedString());
+          "This thread has suspended all locking for this region");
-                LocalizedStrings.ParallelAsyncEventQueue_0_CAN_NOT_BE_USED_WITH_REPLICATED_REGION_1
-                    .toLocalizedString(
-                        AsyncEventQueueImpl.getAsyncEventQueueIdFromSenderId(sender.getId()),
-                        this.getFullPath()));
+                String.format(
+                    "Parallel Async Event Queue %s can not be used with replicated region %s",
+
+                    AsyncEventQueueImpl.getAsyncEventQueueIdFromSenderId(sender.getId()),
+                    this.getFullPath()));
-                LocalizedStrings.ParallelGatewaySender_0_CAN_NOT_BE_USED_WITH_REPLICATED_REGION_1
-                    .toLocalizedString(sender.getId(), this.getFullPath()));
+                String.format(
+                    "Parallel gateway sender %s can not be used with replicated region %s",
+                    sender.getId(), this.getFullPath()));
-    logger.info(LocalizedMessage.create(LocalizedStrings.DistributedRegion_INITIALIZING_REGION_0,
-        this.getName()));
+    logger.info("Initializing region {}",
+        this.getName());
-          LocalizedStrings.DistributedRegion_IF_LOADING_A_SNAPSHOT_THEN_SHOULD_NOT_BE_RECOVERING_ISRECOVERING_0_SNAPSHOTSTREAM_1
-              .toLocalizedString(new Object[] {true, snapshotInputStream}));
+          String.format(
+              "if loading a snapshot, then should not be recovering; isRecovering= %s ,snapshotStream= %s",
+              new Object[] {true, snapshotInputStream}));
-                LocalizedMessage.create(LocalizedStrings.DistributedRegion_INITIALIZED_FROM_DISK,
-                    new Object[] {this.getFullPath(), persistentId, getPersistentID()}));
+                "Region {} recovered from the local disk. Old persistent ID: {}, new persistent ID {}",
+                new Object[] {this.getFullPath(), persistentId, getPersistentID()});
-              logger.info(LocalizedMessage.create(
-                  LocalizedStrings.DistributedRegion_NEW_PERSISTENT_REGION_CREATED,
-                  new Object[] {this.getFullPath(), getPersistentID()}));
+              logger.info("Region {} was created on this member with the persistent id {}.",
+                  new Object[] {this.getFullPath(), getPersistentID()});
-        logger.fatal(
-            LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION), e);
+        logger.fatal("Unexpected exception:", e);
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.DistributedRegion_INITIALIZING_REGION_COMPLETED_0, this.getName()));
+    logger.info("Initialization of region {} completed", this.getName());
-          LocalizedStrings.DistributedRegion_NOT_ALLOWED_TO_DO_A_LOCAL_INVALIDATION_ON_A_REPLICATED_REGION
-              .toLocalizedString());
+          "Not allowed to do a local invalidation on a replicated region");
-            LocalizedStrings.DistributedRegion_NOT_ALLOWED_TO_DO_A_LOCAL_INVALIDATION_ON_A_REPLICATED_REGION
-                .toLocalizedString());
+            "Not allowed to do a local invalidation on a replicated region");
-          LocalizedStrings.DistributedRegion_LOCALCLEAR_IS_NOT_SUPPORTED_ON_DISTRIBUTED_REPLICATED_REGIONS
-              .toLocalizedString());
+          "localClear is not supported on distributed replicated regions.");
-          LocalizedStrings.DistributedRegion_DISTRIBUTION_LOCKS_ARE_ONLY_SUPPORTED_FOR_REGIONS_WITH_GLOBAL_SCOPE_NOT_0
-              .toLocalizedString(this.scope));
+          String.format(
+              "Distribution locks are only supported for regions with GLOBAL scope, not  %s",
+              this.scope));
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.DistributedRegion_DLS_DESTROY_MAY_HAVE_FAILED_FOR_0,
-            this.getFullPath()), ex);
+        logger.warn("DLS destroy may have failed for " +
+            this.getFullPath(),
+            ex);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GemFireCache_0_ERROR_CLOSING_REGION_1,
+        logger.warn(String.format("%s: error closing region %s",
-              logger.error(
-                  LocalizedMessage.create(
-                      LocalizedStrings.DistributedRegion_EXCEPTION_OCCURRED_IN_REGIONMEMBERSHIPLISTENER),
+              logger.error("Exception occurred in RegionMembershipListener",
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.DistributedRegion_ERROR_CLEANING_UP_FAILED_INITIALIZATION, this), t);
+      logger.warn("Error cleaning up after failed region initialization of region " + this,
+          t);
-          LocalizedStrings.Region_REGION_0_HAS_1_GATEWAY_SENDER_IDS_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_GATEWAY_SENDER_IDS_FOR_REGION_ACROSS_ALL_MEMBERS_IN_DS_GATEWAY_SENDER_IDS_SHOULD_BE_SAME
-              .toLocalizedString(
-                  new Object[] {this.getName(), senderIds.get(0), senderIds.get(1)}));
+          String.format(
+              "Region %s has %s gateway sender IDs. Another cache has same region with %s gateway sender IDs. For region across all members, gateway sender ids should be same.",
+
+              new Object[] {this.getName(), senderIds.get(0), senderIds.get(1)}));
-          LocalizedStrings.Region_REGION_0_HAS_1_ASYNC_EVENT_QUEUE_IDS_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_ASYNC_EVENT_QUEUE_IDS_FOR_REGION_ACROSS_ALL_MEMBERS_IN_DS_ASYNC_EVENT_QUEUE_IDS_SHOULD_BE_SAME
-              .toLocalizedString(
-                  new Object[] {this.getName(), asycnQueueIds.get(0), asycnQueueIds.get(1)}));
+          String.format(
+              "Region %s has %s AsyncEvent queue IDs. Another cache has same region with %s AsyncEvent queue IDs. For region across all members, AsyncEvent queue IDs should be same.",
+
+              new Object[] {this.getName(), asycnQueueIds.get(0), asycnQueueIds.get(1)}));
-      StringId msg = null;
+      String msg = null;
-            msg =
-                LocalizedStrings.DistributedRegion_ATTEMPT_TO_ACQUIRE_DISTRIBUTED_LOCK_FOR_0_FAILED_AFTER_WAITING_1_SECONDS;
+            msg = "Attempt to acquire distributed lock for %s failed after waiting %s seconds.";
-        msg =
-            LocalizedStrings.DistributedRegion_TIMED_OUT_AFTER_WAITING_0_SECONDS_FOR_THE_DISTRIBUTED_LOCK_FOR_1;
+        msg = "Timed out after waiting %s seconds for the distributed lock for %s.";
-      throw new TimeoutException(msg.toLocalizedString(msgArgs));
+      throw new TimeoutException(String.format(msg, msgArgs));
-                    logger.fatal(LocalizedMessage.create(
-                        LocalizedStrings.DistributedRegion_0_SECONDS_HAVE_ELAPSED_WAITING_FOR_GLOBAL_REGION_ENTRY_LOCK_HELD_BY_1,
-                        new Object[] {ackWaitThreshold + ackSAThreshold, lockHolder}));
+                    logger.fatal(
+                        "{} seconds have elapsed waiting for global region entry lock held by {}",
+                        ackWaitThreshold + ackSAThreshold, lockHolder);
-          LocalizedStrings.DistributedRegion_NEWCONDITION_UNSUPPORTED.toLocalizedString());
+          "newCondition unsupported");
-          LocalizedStrings.DistributedRegion_NEWCONDITION_UNSUPPORTED.toLocalizedString());
+          "newCondition unsupported");
-      getCache().getLoggerI18n().fine("DR.postRemoveAll: no data to distribute");
+      getCache().getLogger().fine("DR.postRemoveAll: no data to distribute");
-          LocalizedStrings.DistributedRegion_REGION_HAS_NOT_BEEN_CONFIGURED_WITH_REQUIRED_ROLES
-              .toLocalizedString());
+          "Region has not been configured with required roles.");
-            LocalizedStrings.DistributedRegion_NO_REPLICATED_REGION_FOUND_FOR_EXECUTING_FUNCTION_0
-                .toLocalizedString(function.getId()));
+            String.format("No Replicated Region found for executing function : %s.",
+                function.getId()));

MOV8 MOV8 MOV21 MOV21 MOV41 MOV21 MOV21 MOV21 INS25 MOV41 MOV32 INS8 MOV32 MOV32 INS53 UPD42 UPD42 INS45 UPD42 UPD42 INS45 MOV32 INS14 UPD43 INS45 INS45 UPD42 UPD42 INS45 INS45 INS42 MOV43 INS43 INS45 INS45 INS45 UPD42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS42 UPD42 INS42 INS45 UPD42 INS42 INS45 INS27 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 UPD42 UPD42 INS45 INS45 INS52 INS45 INS45 INS27 INS45 MOV32 UPD42 UPD42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV32 UPD42 UPD42 INS45 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV32 UPD42 UPD42 INS45 INS45 INS45 INS45 MOV27 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL52 DEL32 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40