GEODE-6861: separate static config object from runtime info in the Clâ€¦ (#3754)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* use ConfigRealizer to retrieve the runtime information for configuration on each member
* list result would return a List of Response object which has a configuration object and a list runtime objects
* use existing object for runtime member info and move them to geode-management module.

+import org.apache.commons.lang3.StringUtils;
+
-        findMembers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
-    Set<DistributedMember> membersOfNewGroup = findMembers(config.getConfigGroup());
+        findServers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
+    Set<DistributedMember> membersOfNewGroup = findServers(config.getConfigGroup());
-  public Set<DistributedMember> findMembers(String... groups) {
-    if (groups == null || groups.length == 0) {
-      throw new IllegalArgumentException("groups cannot be empty");
+  public Set<DistributedMember> findServers(String... groups) {
+    return findMembers(false, groups);
+  }
+
+  public Set<DistributedMember> findMembers(String id, String... groups) {
+    if (StringUtils.isNotBlank(id)) {
+      return getAllServersAndLocators().stream().filter(m -> m.getName().equals(id))
+          .collect(Collectors.toSet());
-    Set<DistributedMember> allMembers = getAllServers();
+    return findMembers(true, groups);
+  }
+
+  public Set<DistributedMember> findMembers(boolean includeLocators, String... groups) {
+    if (groups == null || groups.length == 0) {
+      groups = new String[] {CacheElement.CLUSTER};
+    }
+
+    Set<DistributedMember> all = includeLocators ? getAllServersAndLocators() : getAllServers();
-      return allMembers;
+      return all;
-          allMembers.stream().filter(m -> m.getGroups() != null && m.getGroups().contains(group))
+          all.stream().filter(m -> m.getGroups() != null && m.getGroups().contains(group))
+
+  Set<DistributedMember> getAllServersAndLocators() {
+    return cache.getDistributionManager().getDistributionManagerIds()
+        .stream().map(DistributedMember.class::cast).collect(Collectors.toSet());
+  }

INS26 INS40 INS31 INS31 INS31 MOV29 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS44 INS74 INS42 INS8 INS43 INS43 INS43 INS42 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS25 INS41 INS39 INS42 INS43 INS43 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS41 INS42 INS9 INS42 INS21 UPD42 INS16 INS32 INS42 INS32 UPD42 UPD42 INS32 INS7 INS42 INS32 MOV32 UPD42 INS32 INS42 INS90 INS42 INS42 INS32 INS42 INS32 INS42 INS3 INS42 INS32 INS42 INS57 INS42 INS32 INS42 INS86 INS42 INS42 INS5 INS4 INS32 INS42 INS43 INS32 INS42 INS59 INS32 INS43 INS85 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 DEL43 DEL45 DEL14 DEL53