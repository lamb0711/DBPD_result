Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Inspects a completed backup and parses the operation log file data from the restore script produced by a previous backup.
+ * Inspects a completed backup and parses the operation log file data from the restore script
+ * produced by a previous backup.
-   * Maps operation log file names to script lines that copy previously backed up operation log files.
-   * These lines will be added to future restore scripts if the operation logs are still relevant to the member.
+   * Maps operation log file names to script lines that copy previously backed up operation log
+   * files. These lines will be added to future restore scripts if the operation logs are still
+   * relevant to the member.
-  protected Map<String,String> oplogLineMap =  new HashMap<String,String>();
-  
+  protected Map<String, String> oplogLineMap = new HashMap<String, String>();
+
-  protected Set<String> oplogFileNames =  new HashSet<String>();
-  
+  protected Set<String> oplogFileNames = new HashSet<String>();
+
-  
+
+   * 
-  public static BackupInspector createInspector(File backupDir) 
-  throws IOException {
-    if(isWindows()) {
+  public static BackupInspector createInspector(File backupDir) throws IOException {
+    if (isWindows()) {
-    
+
-  
+
+   * 
-  public BackupInspector(File backupDir) 
-  throws IOException {
+  public BackupInspector(File backupDir) throws IOException {
-    if(!backupDir.exists()) {
+    if (!backupDir.exists()) {
-    
-    if(!restoreFile.exists()) {
+
+    if (!restoreFile.exists()) {
-    
+
-    
-    try {      
+
+    try {
-      parseRestoreFile(reader);      
+      parseRestoreFile(reader);
-      if(null != reader) {
+      if (null != reader) {
-  
+
+   * 
-  private void parseRestoreFile(BufferedReader reader) 
-  throws IOException {    
+  private void parseRestoreFile(BufferedReader reader) throws IOException {
-    
-    while(!markerFound && (null != (line = reader.readLine()))) {
+
+    while (!markerFound && (null != (line = reader.readLine()))) {
-    
-    if(markerFound) {
+
+    if (markerFound) {
-  
+
-    
+
-  
+
-  
+
+   * 
-  
+
-   * Returns the set of operation log files copied in the incremental backup section
-   * of the restore script. 
+   * Returns the set of operation log files copied in the incremental backup section of the restore
+   * script.
-  
+
-  
+
+   * 
-  
+
+   * 
-  
+
+   * 
-   * Parses out operation log data from the incremental backup portion
-   * of the restore script.
+   * Parses out operation log data from the incremental backup portion of the restore script.
+   * 
-  protected abstract void parseOplogLines(BufferedReader reader) throws IOException ;
+  protected abstract void parseOplogLines(BufferedReader reader) throws IOException;
+
-   * When found indicates that the restore script was produced from an incremental backup. 
+   * When found indicates that the restore script was produced from an incremental backup.
-  
-  WindowsBackupInspector(File backupDir) 
-  throws IOException {
+
+  WindowsBackupInspector(File backupDir) throws IOException {
-    
-    if(null != line) {
-      String[]  parts = line.split("\\s");
+
+    if (null != line) {
+      String[] parts = line.split("\\s");
-    
+
-    
-    if(null != line) {
-      String[]  parts = line.split("\\s");
+
+    if (null != line) {
+      String[] parts = line.split("\\s");
-    
+
-   * Parses out operation log data from the incremental backup portion
-   * of the restore script.
+   * Parses out operation log data from the incremental backup portion of the restore script.
+   * 
-    while(null != (line = reader.readLine())) {
+    while (null != (line = reader.readLine())) {
-    return new File(backupDir,RESTORE_FILE);
+    return new File(backupDir, RESTORE_FILE);
+
-   * When found indicates that the restore script was produced from an incremental backup. 
+   * When found indicates that the restore script was produced from an incremental backup.
-  
-  UnixBackupInspector(File backupDir) 
-  throws IOException {
+
+  UnixBackupInspector(File backupDir) throws IOException {
-    
-    if(null != line) {
-      String[]  parts = line.split("\\s");        
+
+    if (null != line) {
+      String[] parts = line.split("\\s");
-    
+
-    
-    if(null != line) {
-      String[]  parts = line.split("\\s");        
+
+    if (null != line) {
+      String[] parts = line.split("\\s");
-    
+
-   * Parses out operation log data from the incremental backup portion
-   * of the restore script.
+   * Parses out operation log data from the incremental backup portion of the restore script.
+   * 
-    while(null != (line = reader.readLine())) {
+    while (null != (line = reader.readLine())) {
-    return new File(backupDir,RESTORE_FILE);
+    return new File(backupDir, RESTORE_FILE);

UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66