GEODE-3613: Allocate unique ports to containers

ServerContainer sometimes assigned the same port to multiple containers.

ServerContainer used AvailablePortHelper to allocate available ports.
Due to an inherent design flaw, AvailablePortHelper sometimes delivers
the same port number on multiple calls, which results in the same port
being used for multiple purposes.

ServerContainer now allocates ports using a single UniquePortSupplier
created by the test.

Additionally:

- Convert Cargo-based tests from DUnit base class to rule-based
- Start a new locator for each test
- Add cargo version to dependency-versions.properties
- Give each test class its own temp directory
- Fix bad check for container state validity
- Fix modify_war script to detect missing jar command and abort
- General test cleanup and de-duplication
- Announce start and end of each test to stdout

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>
Co-Authored-By: Dale Emery <demery@pivotal.io>

+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.nio.file.Files;
+import java.util.function.IntSupplier;
+  private final IntSupplier portSupplier;
+  public static final String TMP_DIR = createTempDir();
+  public static final String GEODE_BUILD_HOME = System.getenv("GEODE_HOME");
+  public static final String GEODE_BUILD_HOME_LIB = GEODE_BUILD_HOME + "/lib/";
+  public static final String DEFAULT_INSTALL_DIR = TMP_DIR + "/cargo_containers/";
+  public static final String DEFAULT_MODULE_EXTRACTION_DIR = TMP_DIR + "/cargo_modules/";
+  protected static final String DEFAULT_MODULE_LOCATION = GEODE_BUILD_HOME + "/tools/Modules/";
-  private String defaultLocatorAddress;
-  private int defaultLocatorPort;
+  protected IntSupplier portSupplier() {
+    return portSupplier;
+  }
+  private final String installPath;
+  private final String modulePath;
+  private final String warFilePath;
-  private final String INSTALL_PATH;
-  private final String MODULE_PATH;
-  private final String WAR_FILE_PATH;
-
-  public static final String TMP_DIR = System.getProperty("java.io.tmpdir", "/tmp");
-  public static final String GEODE_BUILD_HOME = System.getenv("GEODE_HOME");
-  public static final String DEFAULT_INSTALL_DIR = TMP_DIR + "/cargo_containers/";
-  protected static final String DEFAULT_MODULE_LOCATION = GEODE_BUILD_HOME + "/tools/Modules/";
-  public static final String DEFAULT_MODULE_EXTRACTION_DIR = TMP_DIR + "/cargo_modules/";
+  private final String defaultLocatorAddress;
+  private int defaultLocatorPort;
+
+
+
+
-  public ContainerInstall(String installDir, String downloadURL, ConnectionType connType,
-      String moduleName) throws IOException {
-    this(installDir, downloadURL, connType, moduleName, DEFAULT_MODULE_LOCATION);
+  public ContainerInstall(String name, String downloadURL, ConnectionType connectionType,
+      String moduleName, IntSupplier portSupplier) throws IOException {
+    this(name, downloadURL, connectionType, moduleName, DEFAULT_MODULE_LOCATION, portSupplier);
-   * Base class for handling downloading and configuring J2EE installations
-   *
-   * This class contains common logic for downloading and configuring J2EE installations with cargo,
-   * and some common methods for applying geode session replication configuration to those
-   * installations.
-   *
-   * Subclasses provide installation of specific containers.
-   *
+   * @param name used to name install directory
-  public ContainerInstall(String installDir, String downloadURL, ConnectionType connType,
-      String moduleName, String geodeModuleLocation) throws IOException {
+  public ContainerInstall(String name, String downloadURL, ConnectionType connType,
+      String moduleName, String geodeModuleLocation, IntSupplier portSupplier) throws IOException {
+    this.portSupplier = portSupplier;
+
+    String installDir = DEFAULT_INSTALL_DIR + name;
-    INSTALL_PATH = installer.getHome();
+    installPath = installer.getHome();
-    MODULE_PATH = findAndExtractModule(geodeModuleLocation, moduleName);
-    logger.info("Extracted module " + moduleName + " to " + MODULE_PATH);
+    modulePath = findAndExtractModule(geodeModuleLocation, moduleName);
+    logger.info("Extracted module " + moduleName + " to " + modulePath);
-    WAR_FILE_PATH = findSessionTestingWar();
+    warFilePath = findSessionTestingWar();
-  public ServerContainer generateContainer(File containerConfigHome) throws IOException {
-    return generateContainer(containerConfigHome, "");
-  }
-
-  /**
-   * Sets the default locator address and port
-   */
-  public void setDefaultLocator(String address, int port) {
-    defaultLocatorAddress = address;
+  public void setDefaultLocatorPort(int port) {
-    return INSTALL_PATH;
+    return installPath;
-    return MODULE_PATH;
+    return modulePath;
-    return WAR_FILE_PATH;
+    return warFilePath;
-    return new File(MODULE_PATH + "/conf/" + getConnectionType().getCacheXMLFileName());
+    return new File(modulePath + "/conf/" + getConnectionType().getCacheXMLFileName());
+    assertThat(modulePath).describedAs("module path").isNotNull();
+
+
+  private static String createTempDir() {
+    try {
+      return Files.createTempDirectory("geode_container_install")
+          .toAbsolutePath()
+          .toString();
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }

INS26 INS26 INS26 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV31 INS40 INS40 INS40 INS23 INS23 INS31 INS43 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS43 INS42 INS8 MOV43 MOV43 UPD83 MOV43 INS83 MOV44 INS44 MOV44 INS44 UPD42 INS83 UPD83 UPD43 UPD42 INS8 INS42 UPD42 INS42 INS42 INS32 INS42 INS27 INS42 INS41 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 UPD65 UPD42 INS43 INS42 INS21 INS60 INS21 UPD42 INS54 INS42 INS42 INS45 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD66 INS42 INS7 MOV43 INS59 UPD42 UPD42 UPD42 INS32 INS8 INS12 INS22 INS42 INS42 INS27 UPD42 UPD42 UPD42 INS32 INS42 MOV41 INS44 INS8 INS52 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS45 INS32 MOV43 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 DEL83 DEL42 DEL42 DEL45 DEL45 DEL32 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL32 DEL42 DEL43 DEL42 DEL44 DEL8