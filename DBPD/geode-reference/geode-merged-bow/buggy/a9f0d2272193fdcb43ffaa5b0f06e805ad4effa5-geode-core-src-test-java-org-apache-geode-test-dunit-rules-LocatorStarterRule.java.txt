GEODE-2267: Enhance server/locator startup rules to include workingDir

+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;
+import static org.apache.geode.distributed.ConfigurationProperties.NAME;
-import org.awaitility.Awaitility;
+import org.apache.commons.io.FileUtils;
+import org.awaitility.Awaitility;
+import java.io.File;
+import java.nio.file.Files;
-  private Properties properties;
+  private File workingDir;
+  private String oldUserDir;
-  public LocatorStarterRule(Properties properties) {
-    this.properties = properties;
+  public LocatorStarterRule(File workingDir) {
+    this.workingDir = workingDir.getAbsoluteFile();
-  public void startLocator() throws Exception {
+  @Override
+  protected void before() throws Exception {
+    oldUserDir = System.getProperty("user.dir");
+    if (workingDir == null) {
+      workingDir = Files.createTempDirectory("locator").toAbsolutePath().toFile();
+    }
+    System.setProperty("user.dir", workingDir.toString());
+  }
+
+  @Override
+  protected void after() {
+    if (locator != null) {
+      locator.stop();
+    }
+    FileUtils.deleteQuietly(workingDir);
+    if (oldUserDir == null) {
+      System.clearProperty("user.dir");
+    } else {
+      System.setProperty("user.dir", oldUserDir);
+    }
+  }
+
+
+  public org.apache.geode.test.dunit.rules.Locator startLocator() throws Exception {
+    return startLocator(new Properties());
+  }
+
+  public org.apache.geode.test.dunit.rules.Locator startLocator(Properties properties)
+      throws Exception {
-    startLocator(properties);
-  }
+    if (!properties.containsKey(NAME)) {
+      properties.setProperty(NAME, "locator");
+    }
-  public void startLocator(Properties properties) throws Exception {
+    String name = properties.getProperty(NAME);
+    if (!properties.containsKey(LOG_FILE)) {
+      properties.setProperty(LOG_FILE, new File(name + ".log").getAbsolutePath());
+    }
+
-  }
-
-  @Override
-  protected void before() throws Throwable {
-    if (properties != null)
-      startLocator(properties);
-  }
-
-  @Override
-  protected void after() {
-    if (locator != null) {
-      locator.stop();
-    }
+    return new org.apache.geode.test.dunit.rules.Locator(locatorPort, workingDir, name);

MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS23 INS43 INS83 INS43 INS59 MOV78 UPD83 UPD42 INS43 MOV78 UPD42 INS8 UPD83 INS43 UPD42 MOV43 INS43 INS42 UPD42 INS42 INS42 UPD43 UPD42 INS42 INS25 INS21 MOV25 INS21 MOV25 INS40 INS41 INS40 MOV25 INS25 INS60 INS25 INS41 UPD42 INS7 INS27 INS8 INS32 INS32 UPD27 INS8 INS8 INS32 INS38 INS8 INS43 INS59 INS38 INS8 INS14 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS42 UPD42 INS21 INS21 INS42 INS14 INS32 INS21 INS42 INS42 INS32 INS32 INS21 INS43 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS7 INS42 INS42 INS32 MOV32 MOV43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS45 UPD42 UPD42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL8 DEL39 DEL39