Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class provides a sample implementation of {@link SecurityManager} for
- * authentication and authorization initialized from data provided as JSON.
+ * This class provides a sample implementation of {@link SecurityManager} for authentication and
+ * authorization initialized from data provided as JSON.
- * <p>A Geode member must be configured with the following:
+ * <p>
+ * A Geode member must be configured with the following:
- * <p>{@code security-manager = org.apache.geode.security.examples.SampleSecurityManager}
+ * <p>
+ * {@code security-manager = org.apache.geode.security.examples.SampleSecurityManager}
- * <p>The class can be initialized with from a JSON resource called
- * {@code security.json}. This file must exist on the classpath, so members
- * should be started with an appropriate {@code --classpath} option.
+ * <p>
+ * The class can be initialized with from a JSON resource called {@code security.json}. This file
+ * must exist on the classpath, so members should be started with an appropriate {@code --classpath}
+ * option.
- * <p>The format of the JSON for configuration is as follows:
- * <pre><code>
+ * <p>
+ * The format of the JSON for configuration is as follows:
+ * 
+ * <pre>
+ * <code>
- * </code></pre>
+ * </code>
+ * </pre>
-    if (principal == null) return false;
+    if (principal == null)
+      return false;
-    if (user == null) return false; // this user is not authorized to do anything
+    if (user == null)
+      return false; // this user is not authorized to do anything
-    String jsonPropertyValue = securityProperties != null ? securityProperties.getProperty(SECURITY_JSON) : null;
+    String jsonPropertyValue =
+        securityProperties != null ? securityProperties.getProperty(SECURITY_JSON) : null;
-      throw new AuthenticationFailedException("SampleSecurityManager: unable to find json resource \"" + jsonPropertyValue + "\" as specified by [" + SECURITY_JSON + "].");
+      throw new AuthenticationFailedException(
+          "SampleSecurityManager: unable to find json resource \"" + jsonPropertyValue
+              + "\" as specified by [" + SECURITY_JSON + "].");
-  private void readUsers(final Map<String, User> rolesToUsers, final JsonNode node, final Map<String, Role> roleMap) {
+  private void readUsers(final Map<String, User> rolesToUsers, final JsonNode node,
+      final Map<String, Role> roleMap) {
-          regionNames = StreamSupport.stream(regionsNode.spliterator(), false)
-                                     .map(JsonNode::asText)
-                                     .collect(Collectors.joining(","));
+          regionNames = StreamSupport.stream(regionsNode.spliterator(), false).map(JsonNode::asText)
+              .collect(Collectors.joining(","));
-        if (parts.length>2){
+        if (parts.length > 2) {
-        if (parts.length>3){
+        if (parts.length > 3) {
-        String keyPart = (keys !=null) ? keys : "*";
+        String keyPart = (keys != null) ? keys : "*";
-        role.permissions.add(new ResourcePermission(resourcePart, operationPart, regionPart, keyPart));
+        role.permissions
+            .add(new ResourcePermission(resourcePart, operationPart, regionPart, keyPart));

UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66