 GEODE-6580: Cleanup static analyzer warnings. (#3415)

-import org.apache.logging.log4j.Logger;
-
-import org.apache.geode.cache.DiskAccessException;
-import org.apache.geode.internal.logging.LogService;
-  private static final Logger logger = LogService.getLogger();
-  private volatile ConcurrentMap destroyedEntryKeys;
+  private volatile ConcurrentMap<Object, Boolean> destroyedEntryKeys;
-  private volatile boolean mayDoRecovery = false;
+  private volatile boolean mayDoRecovery;
-  private volatile DiskAccessException dae = null;
-
-
-    this.riLock = isClient ? new StoppableReentrantReadWriteLock(stopper) : null;
-
-    this.giiLock = isReplicate ? new StoppableNonReentrantLock(stopper) : null;
-    this.destroyedEntryKeys = new ConcurrentHashMap();
+    riLock = isClient ? new StoppableReentrantReadWriteLock(stopper) : null;
+    giiLock = isReplicate ? new StoppableNonReentrantLock(stopper) : null;
+    destroyedEntryKeys = new ConcurrentHashMap<>();
-      this.inRecovery = true; // default to true to fix 41147
+      inRecovery = true; // default to true to fix 41147
-    return this.giiLock != null;
+    return giiLock != null;
-    return this.riLock != null;
+    return riLock != null;
-      this.wasRegionClearedDuringGII = false;
+      wasRegionClearedDuringGII = false;
-      return this.regionInvalidated;
+      return regionInvalidated;
-      this.regionInvalidated = b;
+      regionInvalidated = b;
-    if (this.mayDoRecovery) {
-      this.inRecovery = b;
+    if (mayDoRecovery) {
+      inRecovery = b;
-    if (this.mayDoRecovery) {
-      return this.inRecovery;
+    if (mayDoRecovery) {
+      return inRecovery;
-      this.destroyedEntryKeys.put(key, Boolean.TRUE);
+      destroyedEntryKeys.put(key, Boolean.TRUE);
-    this.destroyedEntryKeys.remove(key);
+    destroyedEntryKeys.remove(key);
-    return this.destroyedEntryKeys.containsKey(key);
+    return destroyedEntryKeys.containsKey(key);
-  public Iterator getDestroyedEntries() {
+  public Iterator<Object> getDestroyedEntries() {
-    Iterator result = this.destroyedEntryKeys.keySet().iterator();
-    this.destroyedEntryKeys = new ConcurrentHashMap();
+    Iterator<Object> result = destroyedEntryKeys.keySet().iterator();
+    destroyedEntryKeys = new ConcurrentHashMap<>();
-    this.versionTags = new ConcurrentHashSet<VersionTagEntry>(16);
+    versionTags = new ConcurrentHashSet<>(16);
-    this.versionTags.add(new VersionTagEntryImpl(key, tag.getMemberID(), tag.getRegionVersion()));
+    versionTags.add(new VersionTagEntryImpl(key, tag.getMemberID(), tag.getRegionVersion()));
-    Iterator<VersionTagEntry> result = this.versionTags.iterator();
+    Iterator<VersionTagEntry> result = versionTags.iterator();
-    this.leftMembers = new ConcurrentHashSet<VersionSource>(16);
+    leftMembers = new ConcurrentHashSet<>(16);
-    this.leftMembers.add(mbr);
+    leftMembers.add(mbr);
-    Set<VersionSource> result = this.leftMembers;
+    Set<VersionSource> result = leftMembers;
-    return this.leftMembers.size() > 0;
-  }
-
-  public void dumpDestroyedEntryKeys() {
-    if (this.destroyedEntryKeys == null) {
-      logger.info("region has no destroyedEntryKeys in its image state");
-    } else {
-      logger.info("dump of image state destroyed entry keys of size {}",
-          this.destroyedEntryKeys.size());
-      for (Iterator it = this.destroyedEntryKeys.keySet().iterator(); it.hasNext();) {
-        Object key = it.next();
-        logger.info("key={}", key);
-      }
-    }
+    return leftMembers.size() > 0;
-    return this.destroyedEntryKeys.size();
+    return destroyedEntryKeys.size();
-      this.clearRegionFlag = isClearOn;
+      clearRegionFlag = isClearOn;
-        this.clearRVV = rvv; // will be used to selectively clear content
-        this.wasRegionClearedDuringGII = true;
+        clearRVV = rvv; // will be used to selectively clear content
+        wasRegionClearedDuringGII = true;
-      return this.clearRegionFlag;
+      return clearRegionFlag;
-      return this.clearRVV;
+      return clearRVV;
-      boolean result = this.wasRegionClearedDuringGII;
+      boolean result = wasRegionClearedDuringGII;
-        this.wasRegionClearedDuringGII = false;
+        wasRegionClearedDuringGII = false;
-    this.giiLock.lock();
+    giiLock.lock();
-    this.giiLock.unlock();
+    giiLock.unlock();
-    this.riLock.readLock().lock();
+    riLock.readLock().lock();
-    this.riLock.readLock().unlock();
+    riLock.readLock().unlock();
-    this.riLock.writeLock().lock();
+    riLock.writeLock().lock();
-    this.riLock.writeLock().unlock();
+    riLock.writeLock().unlock();

MOV31 MOV31 INS74 MOV78 MOV78 MOV78 MOV78 MOV78 MOV44 MOV78 MOV44 MOV78 MOV78 MOV44 MOV78 MOV44 MOV78 INS74 UPD42 MOV78 UPD42 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV43 MOV43 INS43 MOV43 INS43 MOV41 MOV41 MOV41 INS42 MOV32 MOV8 MOV32 INS42 INS42 MOV8 UPD42 MOV42 INS74 MOV32 MOV32 MOV8 MOV32 MOV32 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV41 INS42 INS42 INS74 INS42 INS42 INS42 INS74 UPD74 INS42 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL9 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22