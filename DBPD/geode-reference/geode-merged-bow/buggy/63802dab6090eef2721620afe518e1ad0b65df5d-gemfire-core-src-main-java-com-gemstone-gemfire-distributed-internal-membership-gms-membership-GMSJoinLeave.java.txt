[GEODE-77] TCP check for final check in health monitor

+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-  
+
-  
+
-  
+
-  
+
-
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    
+
-      synchronized(responses) {
+      synchronized (responses) {
-    
+
-      
+
-  
+
-      
+
-      
+
-      
+
+   * 
-    
+
-    JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, 
-        services.getAuthenticator().getCredentials(coord));
-
+    JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress, services.getAuthenticator().getCredentials(coord));
+    // add server socket port in the join request
+    if (services.getHealthMonitor().getSocketInfo().get(localAddress) != null) {
+      req.setSocketPort(services.getHealthMonitor().getSocketInfo().get(localAddress).getPort());
+    }
-    
+
-    synchronized(joinResponse) {
+    synchronized (joinResponse) {
-          long timeout = Math.max(services.getConfig().getMemberTimeout(),
-                                     services.getConfig().getJoinTimeout()/5);
+          long timeout = Math.max(services.getConfig().getMemberTimeout(), services.getConfig().getJoinTimeout() / 5);
-        if (failReason.contains("Rejecting the attempt of a member using an older version")
+        if (failReason.contains("Rejecting the attempt of a member using an older version") 
-          GMSMember me = (GMSMember)this.localAddress.getNetMember();
+          GMSMember me = (GMSMember) this.localAddress.getNetMember();
+          services.getHealthMonitor().installSocketInfo(response.getCurrentView().getMembers(), response.getPortsForMembers());
-  
-  
+
-   * process a join request from another member.  If this is the coordinator
+   * process a join request from another member. If this is the coordinator
+   * 
-      logger.warn("detected an attempt to start a peer using an older version of the product {}",
-          incomingRequest.getMemberID());
+      logger.warn("detected an attempt to start a peer using an older version of the product {}", incomingRequest.getMemberID());
-    if (rejection != null  &&  rejection.length() > 0) {
+    if (rejection != null && rejection.length() > 0) {
-    
-    if (!this.localAddress.getNetMember().preferredForCoordinator() &&
+
+    if (!this.localAddress.getNetMember().preferredForCoordinator() && 
+      // add socket ports of all members to join response
+      List<Integer> portsForMembers = new ArrayList<Integer>(currentView.size());
+      Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();
+      for (InternalDistributedMember mbr : currentView.getMembers()) {
+        InetSocketAddress addr = socketInfo.get(mbr);
+        if (addr != null) {
+          portsForMembers.add(Integer.valueOf(addr.getPort()));
+        } else {
+          portsForMembers.add(Integer.valueOf(-1));
+        }
+      }
+      m.setPortsForMembers(portsForMembers);
-  
-  
+
-   * Process a Leave request from another member.  This may cause this member
-   * to become the new membership coordinator.  If this is the coordinator
+   * Process a Leave request from another member. This may cause this member
+   * to become the new membership coordinator. If this is the coordinator
-    
-    
+
-    
+
-      logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator="+isCoordinator+ "; isStopping="+isStopping
-          +"; cancelInProgress="+services.getCancelCriterion().isCancelInProgress());
+      logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator="+isCoordinator+ "; isStopping="+isStopping 
+          +"; cancelInProgress="+ services.getCancelCriterion().isCancelInProgress());
-    
+
-    
+
-      NetView check = new NetView(v, v.getViewId()+1);
+      NetView check = new NetView(v, v.getViewId() + 1);
-      synchronized(removedMembers) {
+      synchronized (removedMembers) {
-    }
-    else {
+    } else {
-  
-  
+
-   * Process a Remove request from another member.  This may cause this member
-   * to become the new membership coordinator.  If this is the coordinator
+   * Process a Remove request from another member. This may cause this member
+   * to become the new membership coordinator. If this is the coordinator
-    if (v != null  &&  !v.contains(incomingRequest.getSender())) {
+    if (v != null && !v.contains(incomingRequest.getSender())) {
-    
+
-        + " from " + incomingRequest.getSender()
+        + " from " + incomingRequest.getSender() 
-    
+
-    
+
-      NetView check = new NetView(v, v.getViewId()+1);
-      synchronized(removedMembers) {
+      NetView check = new NetView(v, v.getViewId() + 1);
+      synchronized (removedMembers) {
-    }
-    else {
+    } else {
-  
-  
+
-    synchronized(viewRequests) {
+    synchronized (viewRequests) {
-  
+
-    synchronized(viewRequests) {
+    synchronized (viewRequests) {
-  
+
-  
+
-  
-  
+ 
+
-
-  
-  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView) {
-    for (InternalDistributedMember mbr: newMbrs) {
+
+  private void sendJoinResponses(List<InternalDistributedMember> newMbrs, NetView newView, List<Integer> portsForMembers) {
+    for (InternalDistributedMember mbr : newMbrs) {
+      response.setPortsForMembers(portsForMembers);
-  
-  private void sendRemoveMessages(List<InternalDistributedMember> removals,
-      List<String> reasons, NetView newView) {
+
+  private void sendRemoveMessages(List<InternalDistributedMember> removals, List<String> reasons, NetView newView) {
-    for (InternalDistributedMember mbr: removals) {
+    for (InternalDistributedMember mbr : removals) {
-  
-  
-  boolean prepareView(NetView view, Collection<InternalDistributedMember> newMembers) {
-    return sendView(view, newMembers, true, this.prepareProcessor);
+
+  boolean prepareView(NetView view, Collection<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
+    return sendView(view, newMembers, true, this.prepareProcessor, requests);
+  }
+
+  void sendView(NetView view, Collection<InternalDistributedMember> newMembers, List<DistributionMessage> requests) {
+    sendView(view, newMembers, false, this.viewProcessor, requests);
+  }
+
+  /**
+   * Build a list of socket ports for messages, e.g. InstallViewMessage, JoinResponseMessage
+   * @param view
+   * @param requests
+   * @return
+   */
+  private void addPorts(NetView view, List<DistributionMessage> requests, List<Integer> portsForMembers) {
+    Map<InternalDistributedMember, InetSocketAddress> socketInfo = services.getHealthMonitor().getSocketInfo();
+    Map<InternalDistributedMember, Integer> portMap = new ConcurrentHashMap<InternalDistributedMember, Integer>();
+    for (DistributionMessage req : requests) {
+      if (req.getDSFID() == JOIN_REQUEST) {
+        JoinRequestMessage joinReq = (JoinRequestMessage) req;
+        portMap.put(joinReq.getMemberID(), Integer.valueOf(joinReq.getSocketPort()));
+      }
+    }
+    for (InternalDistributedMember mbr : view.getMembers()) {
+      InetSocketAddress addr = socketInfo.get(mbr);
+      if (addr != null) {
+        portsForMembers.add(Integer.valueOf(addr.getPort()));
+      } else {
+        Integer port = portMap.get(mbr);
+        if (port != null) {
+          portsForMembers.add(port);
+        } else {
+          portsForMembers.add(Integer.valueOf(-1));
+        }
+      }
+    }    
-  void sendView(NetView view, Collection<InternalDistributedMember> newMembers) {
-    sendView(view, newMembers, false, this.viewProcessor);
-  }
-  
-  
-  boolean sendView(NetView view, Collection<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp) {
+  boolean sendView(NetView view, Collection<InternalDistributedMember> newMembers, boolean preparing, ViewReplyProcessor rp,
+      List<DistributionMessage> requests) {
+    // add socket ports of all members to InstallViewMessage
+    List<Integer> portsForMembers = new ArrayList<Integer>(view.size());
+    if (requests != null) {
+      addPorts(view, requests, portsForMembers);
+      msg.setPortsForMembers(portsForMembers);
+    }
-//    recips.removeAll(newMembers); // new members get the view in a JoinResponseMessage
+    // recips.removeAll(newMembers); // new members get the view in a JoinResponseMessage
+      if (requests != null) {
+        services.getHealthMonitor().installSocketInfo(view.getMembers(), portsForMembers);
+      }
-    
+
-    
-    logger.info((preparing? "preparing" : "sending") + " new view " + view);
+
+    logger.info((preparing ? "preparing" : "sending") + " new view " + view);
-    
+
-      
+
-      
+
-        logger.warn("received a conflicting membership view from " + conflictingViewSender
+        logger.warn("received a conflicting membership view from " + conflictingViewSender 
-      
-      if (!failedToRespond.isEmpty()  &&  (services.getCancelCriterion().cancelInProgress() == null)) {
+
+      if (!failedToRespond.isEmpty() && (services.getCancelCriterion().cancelInProgress() == null)) {
-    
+
-  
-  
-    
+
-    
+
-    
-    if (currentView != null  &&  view.getViewId() < currentView.getViewId()) {
+
+    if (currentView != null && view.getViewId() < currentView.getViewId()) {
-    
-    
+
-      }
-      else {
+      } else {
+        if (!m.getPortsForMembers().isEmpty()) {
+          services.getHealthMonitor().installSocketInfo(view.getMembers(), m.getPortsForMembers());
+        }
-    }
-    else { // !preparing
-      if (currentView != null  &&  !view.contains(this.localAddress)) {
+    } else { // !preparing
+      if (currentView != null && !view.contains(this.localAddress)) {
-      }
-      else {
+      } else {
-  
+
-  
-  
-  
+
-  
+
-   * All locators are contacted.  If they don't agree then we choose the oldest
+   * All locators are contacted. If they don't agree then we choose the oldest
-    
+
-    
+
-    
+
-      for (InetSocketAddress addr: locators) { 
+      for (InetSocketAddress addr : locators) {
-    for (; it.hasNext(); ) {
+    for (; it.hasNext();) {
-  
+
-    boolean testing = unitTesting.contains("findCoordinatorFromView"); 
-    synchronized(state.responses) {
+    boolean testing = unitTesting.contains("findCoordinatorFromView");
+    synchronized (state.responses) {
-    
+
-    for (FindCoordinatorResponse resp: result) {
+    for (FindCoordinatorResponse resp : result) {
-          if (coordIsNoob && (coord == null || coord.compareTo(mbr,false) > 0)) {
+          if (coordIsNoob && (coord == null || coord.compareTo(mbr, false) > 0)) {
-    
+
-  
+
-      throw new GemFireConfigException("locator at "+addr
+      throw new GemFireConfigException("locator at "+addr 
-    GMSMember mbr = (GMSMember)this.localAddress.getNetMember();
+    GMSMember mbr = (GMSMember) this.localAddress.getNetMember();
-      if (services.getLocator() != null
-          || Locator.hasLocator()
+      if (services.getLocator() != null 
+          || Locator.hasLocator() 
-        ((GMSMember)localAddress.getNetMember()).setPreferredForCoordinator(true);
+        ((GMSMember) localAddress.getNetMember()).setPreferredForCoordinator(true);
-      ((GMSMember)localAddress.getNetMember()).setPreferredForCoordinator(true);
+      ((GMSMember) localAddress.getNetMember()).setPreferredForCoordinator(true);
-  
+
+   * 
-    synchronized(joinResponse) {
+    synchronized (joinResponse) {
-  
+
-  
+
-    synchronized(searchState.responses) {
+    synchronized (searchState.responses) {
-  
+
-    String str = "Membership coordinator "
-        + msg.getSender() + " has declared that a network partition has occurred";
+    String str = "Membership coordinator " + msg.getSender() + " has declared that a network partition has occurred";
-  
+
-  
+
-    
+
-    
-    synchronized(viewInstallationLock) {
+
+    synchronized (viewInstallationLock) {
-      
+
-        for (InternalDistributedMember mbr: newView.getMembers()) {
+        for (InternalDistributedMember mbr : newView.getMembers()) {
-            GMSMember me = (GMSMember)this.localAddress.getNetMember();
+            GMSMember me = (GMSMember) this.localAddress.getNetMember();
-      
+
-          forceDisconnect(
-              LocalizedStrings.Network_partition_detected.toLocalizedString(crashes.size(), crashes));
+          forceDisconnect(LocalizedStrings.Network_partition_detected.toLocalizedString(crashes.size(), crashes));
-      
+
-        // get rid of outdated requests.  It's possible some requests are
+        // get rid of outdated requests. It's possible some requests are
-        synchronized(viewRequests) {
-          for (Iterator<DistributionMessage> it = viewRequests.iterator(); it.hasNext(); ) {
+        synchronized (viewRequests) {
+          for (Iterator<DistributionMessage> it = viewRequests.iterator(); it.hasNext();) {
-              if (!currentView.contains(((LeaveRequestMessage)m).getMemberID())) {
+              if (!currentView.contains(((LeaveRequestMessage) m).getMemberID())) {
-              if (!currentView.contains(((RemoveMemberMessage)m).getMemberID())) {
+              if (!currentView.contains(((RemoveMemberMessage) m).getMemberID())) {
-    synchronized(removedMembers) {
+    synchronized (removedMembers) {
-  
+
-  
-  
+
-  
+
-  
+
-  
-      if (logger.isInfoEnabled()
-          && !newView.getCreator().equals(localAddress)) { // view-creator logs this
+      if (logger.isInfoEnabled() && !newView.getCreator().equals(localAddress)) { // view-creator logs this
-      int failurePoint = (int)(Math.round(51 * oldWeight) / 100.0);
+      int failurePoint = (int) (Math.round(51 * oldWeight) / 100.0);
-        logger.warn("total weight lost in this view change is {} of {}.  Quorum has been lost!",
-            failedWeight, oldWeight);
+        logger.warn("total weight lost in this view change is {} of {}.  Quorum has been lost!", failedWeight, oldWeight);
-  
-  
+
-  
+
-  
+
-
-
-
-
-
-
-
-
-
-
-    synchronized(viewInstallationLock) {
+    synchronized (viewInstallationLock) {
-            NetView newView = new NetView(view, view.getViewId()+1);
+            NetView newView = new NetView(view, view.getViewId() + 1);
-          }
-          else {
-            List<InternalDistributedMember> coords = view.getPreferredCoordinators(Collections.<InternalDistributedMember>emptySet(), localAddress, 5);
+          } else {
+            List<InternalDistributedMember> coords = view.getPreferredCoordinators(Collections.<InternalDistributedMember> emptySet(), localAddress, 5);
-      }// view != null
+      } // view != null
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-
-
-    
+
-    
+
-      RemoveMemberMessage msg = new RemoveMemberMessage(v.getPreferredCoordinators(filter, getMemberID(), 5), 
-          m,
-          reason);
+      RemoveMemberMessage msg = new RemoveMemberMessage(v.getPreferredCoordinators(filter, getMemberID(), 5), m, reason);
-        msg.setRecipients(v.getPreferredCoordinators(Collections.<InternalDistributedMember>emptySet(),
-            localAddress, 10));
+        msg.setRecipients(v.getPreferredCoordinators(Collections.<InternalDistributedMember> emptySet(), localAddress, 10));
-    
+
-      LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singleton(this.localAddress), (InternalDistributedMember)mbr, reason);
+      LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singleton(this.localAddress), (InternalDistributedMember) mbr, reason);
-  
-  
+
-    
+
-    if (dc.getMcastPort() != 0
-        && dc.getLocators().trim().isEmpty()
-        && dc.getStartLocator().trim().isEmpty()) {
-      throw new GemFireConfigException("Multicast cannot be configured for a non-distributed cache."
-          + "  Please configure the locator services for this cache using "+DistributionConfig.LOCATORS_NAME
-          + " or " + DistributionConfig.START_LOCATOR_NAME+".");
+    if (dc.getMcastPort() != 0 && dc.getLocators().trim().isEmpty() && dc.getStartLocator().trim().isEmpty()) {
+      throw new GemFireConfigException(
+          "Multicast cannot be configured for a non-distributed cache." + "  Please configure the locator services for this cache using "
+              + DistributionConfig.LOCATORS_NAME + " or " + DistributionConfig.START_LOCATOR_NAME + ".");
-  
+
-    
+
-    
+
-      processJoinRequest((JoinRequestMessage)m);
+      processJoinRequest((JoinRequestMessage) m);
-      processJoinResponse((JoinResponseMessage)m);
+      processJoinResponse((JoinResponseMessage) m);
-      processViewMessage((InstallViewMessage)m);
+      processViewMessage((InstallViewMessage) m);
-      processViewAckMessage((ViewAckMessage)m);
+      processViewAckMessage((ViewAckMessage) m);
-      processLeaveRequest((LeaveRequestMessage)m);
+      processLeaveRequest((LeaveRequestMessage) m);
-      processRemoveRequest((RemoveMemberMessage)m);
+      processRemoveRequest((RemoveMemberMessage) m);
-      processFindCoordinatorRequest((FindCoordinatorRequest)m);
+      processFindCoordinatorRequest((FindCoordinatorRequest) m);
-      processFindCoordinatorResponse((FindCoordinatorResponse)m);
+      processFindCoordinatorResponse((FindCoordinatorResponse) m);
-      processNetworkPartitionMessage((NetworkPartitionMessage)m);
+      processNetworkPartitionMessage((NetworkPartitionMessage) m);
-  
-    synchronized(viewRequests) {
-      for (DistributionMessage msg: viewRequests) {
+    synchronized (viewRequests) {
+      for (DistributionMessage msg : viewRequests) {
-          result.add(((HasMemberID)msg).getMemberID());
+          result.add(((HasMemberID) msg).getMemberID());
-  
-  
+
-    
+
-    
+
-    
-    synchronized void processPendingRequests(Set<InternalDistributedMember> pendingLeaves,
-        Set<InternalDistributedMember> pendingRemovals) {
+
+    synchronized void processPendingRequests(Set<InternalDistributedMember> pendingLeaves, Set<InternalDistributedMember> pendingRemovals) {
-      for (InternalDistributedMember mbr: pendingLeaves) {
+      for (InternalDistributedMember mbr : pendingLeaves) {
-      for (InternalDistributedMember mbr: pendingRemovals) {
+      for (InternalDistributedMember mbr : pendingRemovals) {
-    
-    synchronized void memberSuspected(InternalDistributedMember initiator,
-        InternalDistributedMember suspect) {
+
+    synchronized void memberSuspected(InternalDistributedMember initiator, InternalDistributedMember suspect) {
-    
+
-    
+
-    
+
-      
+
-    
+
-      if (notRepliedYet.isEmpty() ||
-          (pendingRemovals != null && pendingRemovals.containsAll(notRepliedYet))) {
+      if (notRepliedYet.isEmpty() || (pendingRemovals != null && pendingRemovals.containsAll(notRepliedYet))) {
-    
+
-        while (System.currentTimeMillis() < endOfWait
-            &&  (services.getCancelCriterion().cancelInProgress() == null)) {
+        while (System.currentTimeMillis() < endOfWait && (services.getCancelCriterion().cancelInProgress() == null)) {
-            synchronized(this) {
+            synchronized (this) {
-    
+
-    
+
-    
+
-  
-
-  
-  
-    
+
-    
+
-    
+
-      synchronized(viewRequests) {
+      synchronized (viewRequests) {
-    
+
-    
+
-    
+
+     * 
-    
+
-          prepareAndSendView(initialView, Collections.<InternalDistributedMember>emptyList(),
-            initialLeaving, initialRemovals);
+          prepareAndSendView(initialView, Collections.<InternalDistributedMember> emptyList(), initialLeaving, initialRemovals, null);
-          synchronized(viewRequests) {
+          synchronized (viewRequests) {
-          if (requests != null  && !requests.isEmpty()) {
+          if (requests != null && !requests.isEmpty()) {
-    
+
-      
-      for (DistributionMessage msg: requests) {
+
+      for (DistributionMessage msg : requests) {
-          mbr = ((JoinRequestMessage)msg).getMemberID();
-          // see if an old member ID is being reused.  If
+          mbr = ((JoinRequestMessage) msg).getMemberID();
+          // see if an old member ID is being reused. If
-          for (InternalDistributedMember m: oldMembers) {
+          for (InternalDistributedMember m : oldMembers) {
-            sendRemoveMessages(Collections.<InternalDistributedMember>singletonList(mbr),
-                Collections.<String>singletonList(((RemoveMemberMessage)msg).getReason()),
-                currentView);
+            sendRemoveMessages(Collections.<InternalDistributedMember> singletonList(mbr),
+                Collections.<String> singletonList(((RemoveMemberMessage) msg).getReason()), currentView);
-        default: 
+        default:
-      
-      for (InternalDistributedMember mbr: oldIDs) {
+
+      for (InternalDistributedMember mbr : oldIDs) {
-      
+
-      
+
-      synchronized(viewInstallationLock) {
+      synchronized (viewInstallationLock) {
-          viewNumber = currentView.getViewId()+1;
+          viewNumber = currentView.getViewId() + 1;
-        newView = new NetView(localAddress, viewNumber, mbrs, leaveReqs,
-            new HashSet<InternalDistributedMember>(removalReqs));
+        newView = new NetView(localAddress, viewNumber, mbrs, leaveReqs, new HashSet<InternalDistributedMember>(removalReqs));
-      
+
-      
-      for (InternalDistributedMember mbr: joinReqs) {
+
+      for (InternalDistributedMember mbr : joinReqs) {
-      
+
-      if ( !(isNetworkPartition(newView) && quorumRequired) ) {
-        sendJoinResponses(joinReqs, newView);
+      if (!(isNetworkPartition(newView) && quorumRequired)) {
+        // add socket ports of all members to join response
+        List<Integer> portsForMembers = new ArrayList<Integer>(newView.size());
+        addPorts(newView, requests, portsForMembers);
+        sendJoinResponses(joinReqs, newView, portsForMembers);
-      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers());
+      prepareAndSendView(newView, joinReqs, leaveReqs, newView.getCrashedMembers(), requests);
-    
-    
+
-    void prepareAndSendView(NetView newView,
-        List<InternalDistributedMember> joinReqs,
-        Set<InternalDistributedMember> leaveReqs,
-        Set<InternalDistributedMember> removalReqs) {
+    void prepareAndSendView(NetView newView, List<InternalDistributedMember> joinReqs, Set<InternalDistributedMember> leaveReqs,
+        Set<InternalDistributedMember> removalReqs, List<DistributionMessage> requests) {
-        
+
-          forceDisconnect(
-              LocalizedStrings.Network_partition_detected.toLocalizedString(crashes.size(), crashes));
+          forceDisconnect(LocalizedStrings.Network_partition_detected.toLocalizedString(crashes.size(), crashes));
-        prepared = prepareView(newView, joinReqs);
+        prepared = prepareView(newView, joinReqs, requests);
-        if (conflictingView != null
-            && !conflictingView.getCreator().equals(localAddress)
-            && conflictingView.getViewId() > newView.getViewId()
+        if (conflictingView != null && !conflictingView.getCreator().equals(localAddress) && conflictingView.getViewId() > newView.getViewId()
-          logger.info("adding these crashed members from a conflicting view to the crash-set for the next view: {}\nconflicting view: {}", unresponsive, conflictingView);
+          logger.info("adding these crashed members from a conflicting view to the crash-set for the next view: {}\nconflicting view: {}", unresponsive,
+              conflictingView);
-          newView = new NetView(localAddress, newView.getViewId()+1, newMembers, leaveReqs,
-              removalReqs);
+          newView = new NetView(localAddress, newView.getViewId() + 1, newMembers, leaveReqs, removalReqs);
-      
+
-      
-      sendView(newView, joinReqs);
+
+      sendView(newView, joinReqs, requests);
-    
+
+     * 
-      List<Callable<InternalDistributedMember>> checkers = new ArrayList<Callable<InternalDistributedMember>>(mbrs.size()); 
-      
+      List<Callable<InternalDistributedMember>> checkers = new ArrayList<Callable<InternalDistributedMember>>(mbrs.size());
+
-      
-      synchronized(viewRequests) {
-        for (DistributionMessage msg: viewRequests) {
+
+      synchronized (viewRequests) {
+        for (DistributionMessage msg : viewRequests) {
-            newLeaves.add(((LeaveRequestMessage)msg).getMemberID());
+            newLeaves.add(((LeaveRequestMessage) msg).getMemberID());
-            newRemovals.add(((RemoveMemberMessage)msg).getMemberID());
+            newRemovals.add(((RemoveMemberMessage) msg).getMemberID());
-      
-      for (InternalDistributedMember mbr: mbrs) {
+
+      for (InternalDistributedMember mbr : mbrs) {
-      
+
-      
+
-      
+
+
-      
+
-  
+

MOV26 MOV26 UPD40 UPD40 INS31 INS44 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS44 INS25 MOV65 MOV65 INS74 INS42 INS74 INS42 INS74 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS74 INS42 INS60 INS60 INS70 INS70 INS74 INS42 INS60 INS25 INS44 INS27 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 INS43 INS43 INS43 INS43 INS43 INS43 INS66 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS44 INS32 INS8 INS43 INS43 INS74 INS59 INS27 INS8 INS8 UPD66 INS74 INS42 INS32 INS33 INS21 INS60 INS60 INS70 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS21 MOV21 INS25 INS43 INS43 INS32 INS42 INS42 INS32 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS42 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS74 INS32 INS32 INS32 INS27 MOV8 INS60 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS25 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS25 INS74 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS38 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS74 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34