GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import java.util.Iterator;
+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.DistributedCacheOperation;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.EventID;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.PartitionedRegion;
+import org.apache.geode.internal.cache.RemoteOperationException;
+import org.apache.geode.internal.cache.VMCachedDeserializable;
- * A Replicate Region update message. Meant to be sent only to the peer who hosts transactional
- * data.
+ * This message is used by transactions to update an entry on a transaction hosted on a remote
+ * member. It is also used by non-transactional region updates that need to generate a VersionTag on
+ * a remote member.
-  private static final short FLAG_IFNEW = 0x1;
-
-  private static final short FLAG_IFOLD = 0x2;
-
-  private static final short FLAG_REQUIREOLDVALUE = 0x4;
-
-  private static final short FLAG_HASOLDVALUE = 0x8;
-
-  private static final short FLAG_HASDELTA = 0x10;
-
-  private static final short FLAG_HASDELTABYTES = 0x20;
-
-  private static final short FLAG_OLDVALUEISSERIALIZED = 0x40;
-
-  private static final short FLAG_USEORIGINREMOTE = 0x80;
-
-  private static final short FLAG_POSSIBLEDUPLICATE = 0x100;
-
-  private VersionTag versionTag;
+  private VersionTag<?> versionTag;
-  private Collection cacheOpRecipients;
-
-  private RemotePutMessage(Set recipients, String regionPath, DirectReplyProcessor processor,
-      EntryEventImpl event, final long lastModified, boolean ifNew, boolean ifOld,
-      Object expectedOldValue, boolean requireOldValue, boolean useOriginRemote, int processorType,
+  private RemotePutMessage(DistributedMember recipient, String regionPath,
+      DirectReplyProcessor processor, EntryEventImpl event, final long lastModified, boolean ifNew,
+      boolean ifOld, Object expectedOldValue, boolean requireOldValue, boolean useOriginRemote,
-    super(recipients, regionPath, processor);
+    super((InternalDistributedMember) recipient, regionPath, processor);
-    this.processorType = processorType;
+  @SuppressWarnings("unchecked")
-    Collection replicates = onlyPersistent
+    Collection<InternalDistributedMember> replicates = onlyPersistent
-      ArrayList l = new ArrayList(replicates);
+      ArrayList<InternalDistributedMember> l = new ArrayList<>(replicates);
-    for (Iterator<InternalDistributedMember> it = replicates.iterator(); it.hasNext();) {
-      InternalDistributedMember replicate = it.next();
+    for (InternalDistributedMember replicate : replicates) {
-        RemotePutResponse response =
-            send(replicate, event.getRegion(), event, lastModified, ifNew, ifOld, expectedOldValue,
-                requireOldValue, false, ClusterDistributionManager.SERIAL_EXECUTOR, posDup);
+        RemotePutResponse response = send(replicate, event.getRegion(), event, lastModified, ifNew,
+            ifOld, expectedOldValue, requireOldValue, false, posDup);
-
-  @Override
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-    // TODO Auto-generated method stub
-        true, ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR, false);
+        true, false);
-   * @param r the PartitionedRegion for which the put was performed
+   * @param r the region for which the put was performed
-   * @param processorType the type of executor to use (e.g.,
-   *        DistributionManager.PARTITIONED_REGION_EXECUTOR)
-   * @param possibleDuplicate TODO
-      Object expectedOldValue, boolean requireOldValue, boolean useOriginRemote, int processorType,
+      Object expectedOldValue, boolean requireOldValue, boolean useOriginRemote,
-    // Assert.assertTrue(recipient != null, "RemotePutMessage NULL recipient"); recipient can be
-    // null for event notifications
-    Set recipients = Collections.singleton(recipient);
-    RemotePutResponse processor =
-        new RemotePutResponse(r.getSystem(), recipients, event.getKey(), false);
+    RemotePutResponse processor = new RemotePutResponse(r.getSystem(), recipient, false);
-    RemotePutMessage m = new RemotePutMessage(recipients, r.getFullPath(), processor, event,
-        lastModified, ifNew, ifOld, expectedOldValue, requireOldValue, useOriginRemote,
-        processorType, possibleDuplicate);
+    RemotePutMessage m =
+        new RemotePutMessage(recipient, r.getFullPath(), processor, event, lastModified, ifNew,
+            ifOld, expectedOldValue, requireOldValue, useOriginRemote, possibleDuplicate);
-    m.setTransactionDistributed(r.getCache().getTxManager().isDistributed());
-    Set failures = r.getDistributionManager().putOutgoing(m);
+    Set<?> failures = r.getDistributionManager().putOutgoing(m);
-  // public boolean needsDirectAck()
-  // {
-  // return this.directAck;
-  // }
-
-  // public int getProcessorType() {
-  // return DistributionManager.PARTITIONED_REGION_EXECUTOR;
-  // }
-
-
-
-  public int getProcessorType() {
-    return this.processorType;
-  }
-
-  @Override
-        // the event must show it's true origin for cachewriter invocation
-        // event.setOriginRemote(true);
-        // this.op = r.doCacheWriteBeforePut(event, ifNew); // TODO fix this for bug 37072
-            RemoteOperationException fre = new RemoteOperationException(
+            RemoteOperationException ex = new RemoteOperationException(
-            fre.setHash(key.hashCode());
-            sendReply(getSender(), getProcessorId(), dm, new ReplyException(fre), r, startTime);
+            sendReply(getSender(), getProcessorId(), dm, new ReplyException(ex), r, startTime);
-      } catch (PrimaryBucketException pbe) {
-        sendReply(getSender(), getProcessorId(), dm, new ReplyException(pbe), r, startTime);
-        return false;
-    Collection distributedTo = null;
-    if (this.processorId != 0) {
-      // if the sender is waiting for responses from the cache-op message
-      // we have to send it the actual recipients in case it has a different
-      // membership view than this VM
-      distributedTo = this.cacheOpRecipients;
-    }
-  // override reply message type from PartitionMessage
-      ReplyException ex, LocalRegion pr, long startTime) {
+      ReplyException ex, LocalRegion r, long startTime) {
-    VersionTag versionTag;
+    VersionTag<?> versionTag;
-        Object oldValue, VersionTag versionTag) {
+        Object oldValue, VersionTag<?> versionTag) {
-    private final Object key;
-    private VersionTag versionTag;
+    private VersionTag<?> versionTag;
-    public RemotePutResponse(InternalDistributedSystem ds, Collection recipients, Object key,
+    public RemotePutResponse(InternalDistributedSystem ds, DistributedMember recipient,
-      super(ds, recipients, register);
-      this.key = key;
+      super(ds, (InternalDistributedMember) recipient, register);
-      try {
-        waitForCacheException();
-      } catch (RemoteOperationException e) {
-        e.checkKey(key);
-        throw e;
-      }
+      waitForRemoteResponse();
-    public VersionTag versionTag;
+    public VersionTag<?> versionTag;
-        VersionTag versionTag) {
+        VersionTag<?> versionTag) {

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 MOV23 INS74 INS79 UPD66 INS66 UPD66 MOV43 INS76 UPD43 UPD42 INS42 INS45 INS70 UPD42 INS74 INS74 MOV59 INS74 UPD42 INS11 INS74 INS44 INS42 MOV8 UPD66 INS74 MOV43 INS76 INS74 MOV43 INS76 UPD43 UPD42 MOV21 MOV43 INS76 INS74 INS43 INS42 MOV43 INS43 MOV43 INS42 MOV43 INS76 MOV43 INS76 UPD42 INS11 MOV43 INS76 INS42 INS42 INS74 UPD42 UPD42 INS43 INS42 UPD42 MOV43 MOV43 INS42 INS74 MOV43 UPD42 UPD42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL39 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL40 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL34 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL83 DEL43 DEL42 DEL59 DEL83 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54