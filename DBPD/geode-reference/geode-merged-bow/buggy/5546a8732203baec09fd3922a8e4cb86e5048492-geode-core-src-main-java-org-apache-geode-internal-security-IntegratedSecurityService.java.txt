GEODE-2632: consolidate different types of SecurityService

* combine EnabledSecurityService and CustomSecurityService into IntegratedSecurityService
* combine DisabledSecurityService and LegacySecurityService
* combine ConfigInitializer and RealmInitializer
* provide default impelementations of SecurityService
* consolidate SecurityService creation.

+import java.io.IOException;
+import java.security.AccessController;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.Callable;
+
-import org.apache.geode.GemFireIOException;
-import org.apache.geode.internal.cache.EntryEventImpl;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.security.shiro.GeodeAuthenticationToken;
-import org.apache.geode.internal.security.shiro.RealmInitializer;
-import org.apache.geode.internal.security.shiro.ShiroPrincipal;
-import org.apache.geode.internal.util.BlobHelper;
-import org.apache.geode.management.internal.security.ResourceOperation;
-import org.apache.geode.security.AuthenticationFailedException;
-import org.apache.geode.security.GemFireSecurityException;
-import org.apache.geode.security.NotAuthorizedException;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.ResourcePermission;
-import org.apache.geode.security.ResourcePermission.Operation;
-import org.apache.geode.security.ResourcePermission.Resource;
-import org.apache.geode.security.ResourcePermission.Target;
-import org.apache.geode.security.SecurityManager;
-import java.io.IOException;
-import java.io.Serializable;
-import java.security.AccessController;
-import java.util.Properties;
-import java.util.Set;
-import java.util.concurrent.Callable;
+import org.apache.geode.GemFireIOException;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.security.shiro.GeodeAuthenticationToken;
+import org.apache.geode.internal.security.shiro.SecurityManagerProvider;
+import org.apache.geode.internal.security.shiro.ShiroPrincipal;
+import org.apache.geode.internal.util.BlobHelper;
+import org.apache.geode.security.AuthenticationFailedException;
+import org.apache.geode.security.AuthenticationRequiredException;
+import org.apache.geode.security.GemFireSecurityException;
+import org.apache.geode.security.NotAuthorizedException;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.ResourcePermission;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
+import org.apache.geode.security.ResourcePermission.Target;
-public class EnabledSecurityService implements SecurityService {
+public class IntegratedSecurityService implements SecurityService {
-  private final SecurityManager securityManager;
-
+  private final org.apache.geode.security.SecurityManager securityManager;
-  EnabledSecurityService(final SecurityManager securityManager, final PostProcessor postProcessor,
-      final RealmInitializer realmInitializer) {
-    this.securityManager = securityManager;
+  /**
+   * this creates a security service using a SecurityManager
+   * 
+   * @param provider this provides shiro security manager
+   * @param postProcessor this can be null
+   */
+  IntegratedSecurityService(SecurityManagerProvider provider, PostProcessor postProcessor) {
+    // provider must provide a shiro security manager, otherwise, this is not integrated security
+    // service at all.
+    assert provider.getShiroSecurityManager() != null;
+    SecurityUtils.setSecurityManager(provider.getShiroSecurityManager());
+
+    this.securityManager = provider.getSecurityManager();
-    realmInitializer.initialize(this.securityManager);
-  @Override
-  public void initSecurity(final Properties securityProps) {
-    this.securityManager.init(securityProps);
-    if (this.postProcessor != null) {
-      this.postProcessor.init(securityProps);
-    }
+  public PostProcessor getPostProcessor() {
+    return this.postProcessor;
+  }
+
+  public org.apache.geode.security.SecurityManager getSecurityManager() {
+    return this.securityManager;
-   * @return null if security is not enabled, otherwise return a shiro subject
+   * @return return a shiro subject
-      return null;
+      throw new AuthenticationRequiredException("credentials are null");
-      logger.info("Logging in " + token.getPrincipal());
+      logger.debug("Logging in " + token.getPrincipal());
-    if (currentUser == null) {
-      return;
-    }
-
-      logger.info("Logging out " + currentUser.getPrincipal());
+      logger.debug("Logging out " + currentUser.getPrincipal());
-    if (currentUser == null) {
-      return callable;
-    }
-
-      return null;
+      throw new GemFireSecurityException("Error: Anonymous User");
-    // if currentUser is null, let it throw NPE, since in a EnabledSecurityService,
-    // user can not be null
-
-      this.securityManager.close();
+      securityManager.close();
-
-      Subject subject = getSubject();
-      if (subject == null) {
-        return value;
-      }
-      principal = (Serializable) subject.getPrincipal();
+      principal = getSubject().getPrincipal();
-  public SecurityManager getSecurityManager() {
-    return this.securityManager;
-  }
-
-  @Override
-  public PostProcessor getPostProcessor() {
-    return this.postProcessor;
-  }
-
-  @Override

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 MOV31 MOV31 UPD40 UPD40 UPD42 MOV44 UPD43 INS29 INS42 MOV21 UPD43 INS40 INS65 INS65 INS65 UPD43 UPD42 INS6 INS40 INS66 INS42 INS66 INS42 INS66 UPD42 INS27 UPD66 INS32 INS33 INS42 UPD42 INS32 INS32 INS53 INS53 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS14 INS43 INS45 UPD42 UPD42 INS43 INS45 INS42 INS32 INS42 INS42 MOV32 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL83 DEL52 DEL42 DEL22 DEL42 DEL42 DEL78 DEL42 DEL78 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL33 DEL41 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL33 DEL41 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL11