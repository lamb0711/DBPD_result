Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A pool for managing client to server connections. This interface
- * allows connections to be checked out and checked in, and keeps
- * the number of connections within the min and max boundaries. 
+ * A pool for managing client to server connections. This interface allows connections to be checked
+ * out and checked in, and keeps the number of connections within the min and max boundaries.
+ * 
-   * @param aquireTimeout
-   *                The amount of time to wait for a connection to become
-   *                available.
+   * @param aquireTimeout The amount of time to wait for a connection to become available.
-   * @throws AllConnectionsInUseException
-   *                 If the maximum number of connections are already in use and
-   *                 no connection becomes free within the aquireTimeout.
-   * @throws NoAvailableServersException
-   *                 if we can't connect to any server
+   * @throws AllConnectionsInUseException If the maximum number of connections are already in use
+   *         and no connection becomes free within the aquireTimeout.
+   * @throws NoAvailableServersException if we can't connect to any server
-   * @param server  The server the connection needs to be to.
-   * @param aquireTimeout
-   *                The amount of time to wait for a connection to become
-   *                available.
+   * @param server The server the connection needs to be to.
+   * @param aquireTimeout The amount of time to wait for a connection to become available.
-   * @throws AllConnectionsInUseException
-   *                 If the maximum number of connections are already in use and
-   *                 no connection becomes free within the aquireTimeout.
-   * @throws NoAvailableServersException
-   *                 if we can't connect to any server
+   * @throws AllConnectionsInUseException If the maximum number of connections are already in use
+   *         and no connection becomes free within the aquireTimeout.
+   * @throws NoAvailableServersException if we can't connect to any server
-  Connection borrowConnection(ServerLocation server, long aquireTimeout,boolean onlyUseExistingCnx)
+  Connection borrowConnection(ServerLocation server, long aquireTimeout, boolean onlyUseExistingCnx)
-   * Return a connection to the pool. The connection should not be
-   * used after it is returned.
+   * Return a connection to the pool. The connection should not be used after it is returned.
+   * 
-   * Return a connection to the pool. The connection should not be
-   * used after it is returned.
+   * Return a connection to the pool. The connection should not be used after it is returned.
+   * 
-   * @param keepAlive
-   *                whether to signal to servers to keep the connection alive
+   * @param keepAlive whether to signal to servers to keep the connection alive
-   * @param conn
-   *                connection to exchange. It will be returned to the pool (or
-   *                destroyed if it has been invalidated).
-   * @param excludedServers
-   *                servers to exclude when looking for a new connection
-   * @return a new connection to the pool to a server that is not in the list of
-   *         excluded servers
+   * @param conn connection to exchange. It will be returned to the pool (or destroyed if it has
+   *        been invalidated).
+   * @param excludedServers servers to exclude when looking for a new connection
+   * @return a new connection to the pool to a server that is not in the list of excluded servers
-  Connection exchangeConnection(Connection conn,
-      Set/* <ServerLocation> */excludedServers, long aquireTimeout)
-      throws AllConnectionsInUseException;
+  Connection exchangeConnection(Connection conn, Set/* <ServerLocation> */ excludedServers,
+      long aquireTimeout) throws AllConnectionsInUseException;
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66