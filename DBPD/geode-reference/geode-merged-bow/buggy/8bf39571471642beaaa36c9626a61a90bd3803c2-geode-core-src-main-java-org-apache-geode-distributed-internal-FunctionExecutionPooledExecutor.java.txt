Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A ThreadPoolExecutor with stat support.  This executor also has a
- * buffer that rejected executions spill over into.
+ * A ThreadPoolExecutor with stat support. This executor also has a buffer that rejected executions
+ * spill over into.
- * This executor has also been modified to handle rejected execution in
- * one of three ways:
- *   If the executor is for function execution we ignore size caps on the thread pool<br>
- *   If the executor has a SynchronousQueue or SynchronousQueueNoSpin then
- *   rejected executions are run in the current thread.<br>
- *   Otherwise a thread is started in the pool that buffers the rejected
- *   tasks and puts them back into the executor.
- *   
+ * This executor has also been modified to handle rejected execution in one of three ways: If the
+ * executor is for function execution we ignore size caps on the thread pool<br>
+ * If the executor has a SynchronousQueue or SynchronousQueueNoSpin then rejected executions are run
+ * in the current thread.<br>
+ * Otherwise a thread is started in the pool that buffers the rejected tasks and puts them back into
+ * the executor.
+ * 
-  
-  /** 
+
+  /**
-  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int maxPoolSize, PoolStatHelper stats, ThreadFactory tf, int msTimeout, RejectedExecutionHandler reh) {
-    super(getCorePoolSize(maxPoolSize), maxPoolSize,
-          msTimeout, TimeUnit.MILLISECONDS,
-          q, tf, reh);
-//     if (getCorePoolSize() != 0 && getCorePoolSize() == getMaximumPoolSize()) {
-//       allowCoreThreadTimeOut(true); // deadcoded for 1.5
-//     }
+  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int maxPoolSize,
+      PoolStatHelper stats, ThreadFactory tf, int msTimeout, RejectedExecutionHandler reh) {
+    super(getCorePoolSize(maxPoolSize), maxPoolSize, msTimeout, TimeUnit.MILLISECONDS, q, tf, reh);
+    // if (getCorePoolSize() != 0 && getCorePoolSize() == getMaximumPoolSize()) {
+    // allowCoreThreadTimeOut(true); // deadcoded for 1.5
+    // }
-   * Used to buffer up tasks that would be have been rejected.
-   * Only used (i.e. non-null) if constructor queue is not a SynchronousQueue.
+   * Used to buffer up tasks that would be have been rejected. Only used (i.e. non-null) if
+   * constructor queue is not a SynchronousQueue.
-   * Used to consume items off the bufferQueue and put them into the pools
-   * synchronous queue.
-   * Only used (i.e. non-null) if constructor queue is not a SynchronousQueue.
+   * Used to consume items off the bufferQueue and put them into the pools synchronous queue. Only
+   * used (i.e. non-null) if constructor queue is not a SynchronousQueue.
-  
+
- 
-  private static RejectedExecutionHandler initREH(
-      final BlockingQueue<Runnable> q, boolean forFnExec)
-  {
+
+  private static RejectedExecutionHandler initREH(final BlockingQueue<Runnable> q,
+      boolean forFnExec) {
-        public void rejectedExecution(final Runnable r,
-            ThreadPoolExecutor executor)
-        {
+        public void rejectedExecution(final Runnable r, ThreadPoolExecutor executor) {
-          }
-          else {
+          } else {
-            if (Thread.currentThread() == ((FunctionExecutionPooledExecutor)executor).bufferConsumer) {
-              Thread th = executor.getThreadFactory().newThread(
-                  (new Runnable() {
-                    public void run()
-                    {
-                      r.run();
-                    }
-                  }));
+            if (Thread
+                .currentThread() == ((FunctionExecutionPooledExecutor) executor).bufferConsumer) {
+              Thread th = executor.getThreadFactory().newThread((new Runnable() {
+                public void run() {
+                  r.run();
+                }
+              }));
-            }
-            else {
+            } else {
-              }
-              catch (InterruptedException e) {
+              } catch (InterruptedException e) {
-    }
-    else {
+    } else {
-      }
-      else {
+      } else {
-  
- 
-  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int maxPoolSize, PoolStatHelper stats, ThreadFactory tf, int msTimeout, final boolean forFnExec) {
-    this(initQ(q), maxPoolSize, stats, tf, msTimeout, initREH(q,forFnExec));
-    final int retryFor = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "RETRY_INTERVAL", 5000).intValue();
+
+
+  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int maxPoolSize,
+      PoolStatHelper stats, ThreadFactory tf, int msTimeout, final boolean forFnExec) {
+    this(initQ(q), maxPoolSize, stats, tf, msTimeout, initREH(q, forFnExec));
+    final int retryFor =
+        Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "RETRY_INTERVAL", 5000).intValue();
-          public void run() {
-            try {
-              for (;;) {
-                SystemFailure.checkFailure();
-                Runnable task = takeQueue.take();
-                if(forFnExec) {
-                   if(!putQueue.offer(task,retryFor , TimeUnit.MILLISECONDS)){
-                     submit(task);  
-                   }                   
-                }else {
-                  putQueue.put(task);
-                }               
+        public void run() {
+          try {
+            for (;;) {
+              SystemFailure.checkFailure();
+              Runnable task = takeQueue.take();
+              if (forFnExec) {
+                if (!putQueue.offer(task, retryFor, TimeUnit.MILLISECONDS)) {
+                  submit(task);
+                }
+              } else {
+                putQueue.put(task);
-            catch (InterruptedException ie) {
-              Thread.currentThread().interrupt();
-              // this thread is being shutdown so just return;
-              return;
-            }
+          } catch (InterruptedException ie) {
+            Thread.currentThread().interrupt();
+            // this thread is being shutdown so just return;
+            return;
-        };
+        }
+      };
-    }
-    finally {
+    } finally {
-  
+
-  
+
-  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize, PoolStatHelper stats, ThreadFactory tf) {
-  /**
-   * How long an idle thread will wait, in milliseconds, before it is removed
-   * from its thread pool. Default is (30000 * 60) ms (30 minutes).
-   * It is not static so it can be set at runtime and pick up different values.
-   */
-    this(q, poolSize, stats, tf, Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT", 30000 * 60), false /* not for fn exec*/);
-  }
-  
-  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize, PoolStatHelper stats, ThreadFactory tf, boolean forFnExec) {
+  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize,
+      PoolStatHelper stats, ThreadFactory tf) {
-     * How long an idle thread will wait, in milliseconds, before it is removed
-     * from its thread pool. Default is (30000 * 60) ms (30 minutes).
-     * It is not static so it can be set at runtime and pick up different values.
+     * How long an idle thread will wait, in milliseconds, before it is removed from its thread
+     * pool. Default is (30000 * 60) ms (30 minutes). It is not static so it can be set at runtime
+     * and pick up different values.
-    this(q, poolSize, stats, tf, Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT", 30000 * 60), forFnExec);
-    }
+    this(q, poolSize, stats, tf,
+        Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT", 30000 * 60),
+        false /* not for fn exec */);
+  }
+
+  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize,
+      PoolStatHelper stats, ThreadFactory tf, boolean forFnExec) {
+    /**
+     * How long an idle thread will wait, in milliseconds, before it is removed from its thread
+     * pool. Default is (30000 * 60) ms (30 minutes). It is not static so it can be set at runtime
+     * and pick up different values.
+     */
+    this(q, poolSize, stats, tf,
+        Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT", 30000 * 60),
+        forFnExec);
+  }
+
-  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize, ThreadFactory tf) {
-    this(q, poolSize, null/*no stats*/, tf);
+  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q, int poolSize,
+      ThreadFactory tf) {
+    this(q, poolSize, null/* no stats */, tf);
-  
+
-//       int result = Runtime.getRuntime().availableProcessors();
-//       if (result < 2) {
-//         result = 2;
-//       }
-//       if (result > maxSize) {
-//         result = maxSize;
-//       }
-//       return result;
+      // int result = Runtime.getRuntime().availableProcessors();
+      // if (result < 2) {
+      // result = 2;
+      // }
+      // if (result > maxSize) {
+      // result = maxSize;
+      // }
+      // return result;
-  
+
-        throw new RejectedExecutionException(LocalizedStrings.PooledExecutorWithDMStats_EXECUTOR_HAS_BEEN_SHUTDOWN.toLocalizedString());
+        throw new RejectedExecutionException(
+            LocalizedStrings.PooledExecutorWithDMStats_EXECUTOR_HAS_BEEN_SHUTDOWN
+                .toLocalizedString());
-          RejectedExecutionException e = new RejectedExecutionException(LocalizedStrings.PooledExecutorWithDMStats_INTERRUPTED.toLocalizedString());
+          RejectedExecutionException e = new RejectedExecutionException(
+              LocalizedStrings.PooledExecutorWithDMStats_INTERRUPTED.toLocalizedString());
-   * This guy fronts a synchronous queue, that is owned by the parent
-   * ThreadPoolExecutor, with a the client supplied BlockingQueue that
-   * supports storage (the buffer queue).
-   * A dedicated thread is used to consume off the buffer queue and put
-   * into the synchronous queue.
+   * This guy fronts a synchronous queue, that is owned by the parent ThreadPoolExecutor, with a the
+   * client supplied BlockingQueue that supports storage (the buffer queue). A dedicated thread is
+   * used to consume off the buffer queue and put into the synchronous queue.
-        throw new RejectedExecutionException(LocalizedStrings.PooledExecutorWithDMStats_EXECUTOR_HAS_BEEN_SHUTDOWN.toLocalizedString());
+        throw new RejectedExecutionException(
+            LocalizedStrings.PooledExecutorWithDMStats_EXECUTOR_HAS_BEEN_SHUTDOWN
+                .toLocalizedString());
-          FunctionExecutionPooledExecutor pool = (FunctionExecutionPooledExecutor)executor;
+          FunctionExecutionPooledExecutor pool = (FunctionExecutionPooledExecutor) executor;
-          RejectedExecutionException e = new RejectedExecutionException(LocalizedStrings.PooledExecutorWithDMStats_INTERRUPTED.toLocalizedString());
+          RejectedExecutionException e = new RejectedExecutionException(
+              LocalizedStrings.PooledExecutorWithDMStats_INTERRUPTED.toLocalizedString());

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66