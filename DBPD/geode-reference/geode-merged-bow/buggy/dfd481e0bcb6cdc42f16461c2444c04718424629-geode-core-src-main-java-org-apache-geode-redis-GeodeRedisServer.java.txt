GEODE-1566: rename GeodeRedisServer and repackage redis code into org.apache.geode

This closes #182

-package com.gemstone.gemfire.redis;
+package org.apache.geode.redis;
-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.cache.*;
-import com.gemstone.gemfire.cache.util.CacheListenerAdapter;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.hll.HyperLogLogPlus;
-import com.gemstone.gemfire.internal.redis.*;
-import io.netty.bootstrap.ServerBootstrap;
-import io.netty.buffer.PooledByteBufAllocator;
-import io.netty.channel.*;
-import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.oio.OioEventLoopGroup;
-import io.netty.channel.socket.SocketChannel;
-import io.netty.channel.socket.nio.NioServerSocketChannel;
-import io.netty.channel.socket.oio.OioServerSocketChannel;
-import io.netty.util.concurrent.Future;
-
-import java.util.concurrent.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ThreadFactory;
+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.cache.EntryEvent;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.RegionDestroyedException;
+import com.gemstone.gemfire.cache.RegionFactory;
+import com.gemstone.gemfire.cache.RegionShortcut;
+import com.gemstone.gemfire.cache.util.CacheListenerAdapter;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.hll.HyperLogLogPlus;
+
+import org.apache.geode.redis.internal.ByteArrayWrapper;
+import org.apache.geode.redis.internal.ByteToCommandDecoder;
+import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.ExecutionHandlerContext;
+import org.apache.geode.redis.internal.RedisDataType;
+import org.apache.geode.redis.internal.RegionProvider;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.ChannelPipeline;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.ServerChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.oio.OioEventLoopGroup;
+import io.netty.channel.socket.SocketChannel;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.channel.socket.oio.OioServerSocketChannel;
+import io.netty.util.concurrent.Future;
+
- * The GemFireRedisServer is a server that understands the Redis protocol. As
+ * The GeodeRedisServer is a server that understands the Redis protocol. As
- * protected so the client may not store keys with the name {@link GemFireRedisServer#REDIS_META_DATA_REGION}
- * or {@link GemFireRedisServer#STRING_REGION}. The default Region type is 
+ * protected so the client may not store keys with the name {@link GeodeRedisServer#REDIS_META_DATA_REGION}
+ * or {@link GeodeRedisServer#STRING_REGION}. The default Region type is
- * If the {@link GemFireRedisServer#NUM_THREADS_SYS_PROP_NAME} system property is set to 0,
+ * If the {@link GeodeRedisServer#NUM_THREADS_SYS_PROP_NAME} system property is set to 0,
-public class GemFireRedisServer {
+public class GeodeRedisServer {
-   * used by the GemFireRedisServer
+   * used by the GeodeRedisServer
-   * Constructor for {@link GemFireRedisServer} that will start the
+   * Constructor for {@link GeodeRedisServer} that will start the
-  public GemFireRedisServer(int port) {
+  public GeodeRedisServer(int port) {
-   * Constructor for {@link GemFireRedisServer} that will start the
+   * Constructor for {@link GeodeRedisServer} that will start the
-  public GemFireRedisServer(String bindAddress, int port) {
+  public GeodeRedisServer(String bindAddress, int port) {
-   * Constructor for {@link GemFireRedisServer} that will start the
+   * Constructor for {@link GeodeRedisServer} that will start the
-  public GemFireRedisServer(String bindAddress, int port, String logLevel) {
+  public GeodeRedisServer(String bindAddress, int port, String logLevel) {
-   * This is function to call on a {@link GemFireRedisServer} instance
+   * This is function to call on a {@link GeodeRedisServer} instance
-   * Also, every {@link GemFireRedisServer} will check for entries already in the 
+   * Also, every {@link GeodeRedisServer} will check for entries already in the
-      synchronized (GemFireRedisServer.class) {
+      synchronized (GeodeRedisServer.class) {
-        stringsRegion = rfString.create(GemFireRedisServer.STRING_REGION);
+        stringsRegion = rfString.create(GeodeRedisServer.STRING_REGION);
-   * server is bound to the port specified by {@link GemFireRedisServer#serverPort}
+   * server is bound to the port specified by {@link GeodeRedisServer#serverPort}
-        t.setName("GemFireRedisServer-SelectorThread-" + counter.incrementAndGet());
+        t.setName("GeodeRedisServer-SelectorThread-" + counter.incrementAndGet());
-        t.setName("GemFireRedisServer-WorkerThread-" + counter.incrementAndGet());
+        t.setName("GeodeRedisServer-WorkerThread-" + counter.incrementAndGet());
-          logger.fine("GemFireRedisServer-Connection established with " + ch.remoteAddress());
+          logger.fine("GeodeRedisServer-Connection established with " + ch.remoteAddress());
-        p.addLast(ExecutionHandlerContext.class.getSimpleName(), new ExecutionHandlerContext(ch, cache, regionCache, GemFireRedisServer.this, pwdB));
+        p.addLast(ExecutionHandlerContext.class.getSimpleName(), new ExecutionHandlerContext(ch, cache, regionCache, GeodeRedisServer.this, pwdB));
-    .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, GemFireRedisServer.connectTimeoutMillis)
+    .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, GeodeRedisServer.connectTimeoutMillis)
-      String logMessage = "GemFireRedisServer started {" + getBindAddress() + ":" + serverPort + "}, Selector threads: " + this.numSelectorThreads;
+      String logMessage = "GeodeRedisServer started {" + getBindAddress() + ":" + serverPort + "}, Selector threads: " + this.numSelectorThreads;
-   * Shutdown method for {@link GemFireRedisServer}. This closes the {@link Cache},
+   * Shutdown method for {@link GeodeRedisServer}. This closes the {@link Cache},
-        logger.info("GemFireRedisServer shutting down");
+        logger.info("GeodeRedisServer shutting down");
-   * Static main method that allows the {@link GemFireRedisServer} to be 
+   * Static main method that allows the {@link GeodeRedisServer} to be
-    GemFireRedisServer server = new GemFireRedisServer(bindAddress, port, logLevel);
+    GeodeRedisServer server = new GeodeRedisServer(bindAddress, port, logLevel);

