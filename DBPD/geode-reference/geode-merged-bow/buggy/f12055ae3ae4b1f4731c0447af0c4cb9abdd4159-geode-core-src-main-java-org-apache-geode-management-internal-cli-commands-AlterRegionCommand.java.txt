GEODE-5971: refactor AlterRegionCommand to use RegionConfig object (#3054)

* GEODE-5971: refactor AlterRegionCommand to use RegionConfig object

Co-authored-by: Kenneth Howe <khowe@pivotal.io>
Co-authored-by: Aditya Anchuri <aanchuri@pivotal.io>
Co-authored-by: Peter Tran <ptran@pivotal.io>

* refactor AlterRegionCommand to use ResultModel and RegionConfig
* only alter region in the same group as the region is created on
* when cluster configuration is enabled, if region does not exist in CC, the command would error out.
* The command would no longer alter region not created by gfsh command
* add more unit tests

+import java.util.Arrays;
+import java.util.stream.Collectors;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.cache.configuration.RegionAttributesType.EvictionAttributes;
+import org.apache.geode.cache.configuration.RegionAttributesType.ExpirationAttributesType;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.distributed.ConfigurationPersistenceService;
-import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
-import org.apache.geode.management.internal.cli.functions.RegionFunctionArgs;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class AlterRegionCommand extends InternalGfshCommand {
+public class AlterRegionCommand extends SingleGfshCommand {
-  public Result alterRegion(
+  public ResultModel alterRegion(
-          unspecifiedDefaultValue = "false",
-          help = CliStrings.ALTER_REGION__CLONINGENABLED__HELP) boolean cloningEnabled,
+          help = CliStrings.ALTER_REGION__CLONINGENABLED__HELP) Boolean cloningEnabled,
-    Result result;
-
-    InternalCache cache = (InternalCache) getCache();
+    Set<DistributedMember> targetMembers = findMembers(groups, null);
-    if (groups != null) {
-      RegionCommandsUtils.validateGroups(cache, groups);
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-    RegionFunctionArgs regionFunctionArgs = new RegionFunctionArgs();
-    regionFunctionArgs.setRegionPath(regionPath);
-    regionFunctionArgs.setEntryExpirationIdleTime(entryExpirationIdleTime,
-        entryExpirationIdleTimeAction);
-    regionFunctionArgs.setEntryExpirationTTL(entryExpirationTTL, entryExpirationTTLAction);
-    regionFunctionArgs.setEntryIdleTimeCustomExpiry(entryIdleTimeCustomExpiry);
-    regionFunctionArgs.setEntryTTLCustomExpiry(entryTTLCustomExpiry);
-    regionFunctionArgs.setRegionExpirationIdleTime(regionExpirationIdleTime,
-        regionExpirationIdleTimeAction);
-    regionFunctionArgs.setRegionExpirationTTL(regionExpirationTTL, regionExpirationTTLAction);
-    regionFunctionArgs.setCacheListeners(cacheListeners);
-    regionFunctionArgs.setCacheLoader(cacheLoader);
-    regionFunctionArgs.setCacheWriter(cacheWriter);
-    regionFunctionArgs.setAsyncEventQueueIds(asyncEventQueueIds);
-    regionFunctionArgs.setGatewaySenderIds(gatewaySenderIds);
-    regionFunctionArgs.setCloningEnabled(cloningEnabled);
-    regionFunctionArgs.setEvictionMax(evictionMax);
+    ConfigurationPersistenceService ccService = getConfigurationPersistenceService();
+
+    if (groups == null) {
+      groups = new String[] {"cluster"};
+    }
+
+    // Check that the specified region is in all the groups (normally we should pass in just one
+    // group for alter region command
+    if (ccService != null) {
+      for (String group : groups) {
+        CacheConfig clusterConfig = ccService.getCacheConfig(group);
+        RegionConfig regionConfig = null;
+        if (clusterConfig != null) {
+          // we always know that regionPath starts with a "/", so we need to strip it out before we
+          // pass it in to look for the regionConfig
+          regionConfig =
+              CacheElement.findElement(clusterConfig.getRegions(), regionPath.substring(1));
+        }
+
+        if (regionConfig == null) {
+          throw new EntityNotFoundException(
+              String.format("%s does not exist in group %s", regionPath, group));
+        }
+      }
+    }
+
+    RegionConfig deltaConfig = new RegionConfig();
+    deltaConfig.setName(regionPath);
+    RegionAttributesType regionAttributesType = new RegionAttributesType();
+    deltaConfig.setRegionAttributes(regionAttributesType);
+    regionAttributesType.setEntryIdleTime(getExpirationAttributes(entryExpirationIdleTime,
+        entryExpirationIdleTimeAction, entryIdleTimeCustomExpiry));
+    regionAttributesType.setEntryTimeToLive(getExpirationAttributes(entryExpirationTTL,
+        entryExpirationTTLAction, entryTTLCustomExpiry));
+    regionAttributesType.setRegionIdleTime(
+        getExpirationAttributes(regionExpirationIdleTime, regionExpirationIdleTimeAction, null));
+    regionAttributesType.setRegionTimeToLive(
+        getExpirationAttributes(regionExpirationTTL, regionExpirationTTLAction, null));
+    if (cacheLoader != null) {
+      regionAttributesType.setCacheLoader(
+          new DeclarableType(cacheLoader.getClassName(), cacheLoader.getInitProperties()));
+    }
+
+    if (cacheWriter != null) {
+      regionAttributesType.setCacheWriter(
+          new DeclarableType(cacheLoader.getClassName(), cacheLoader.getInitProperties()));
+    }
+
+    if (cacheListeners != null) {
+      regionAttributesType.getCacheListeners().addAll(
+          Arrays.stream(cacheListeners)
+              .map(l -> new DeclarableType(l.getClassName(), l.getInitProperties()))
+              .collect(Collectors.toList()));
+    }
+
+    if (gatewaySenderIds != null) {
+      regionAttributesType.setGatewaySenderIds(StringUtils.join(gatewaySenderIds, ","));
+    }
+
+    if (asyncEventQueueIds != null) {
+      regionAttributesType.setAsyncEventQueueIds(StringUtils.join(asyncEventQueueIds, ","));
+    }
+
+    if (cloningEnabled != null) {
+      regionAttributesType.setCloningEnabled(cloningEnabled);
+    }
-    Set<DistributedMember> targetMembers = findMembers(groups, null);
-
-    if (targetMembers.isEmpty()) {
-      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    if (evictionMax != null) {
+      EvictionAttributes evictionAttributes =
+          new EvictionAttributes();
+      EvictionAttributes.LruEntryCount lruEntryCount =
+          new EvictionAttributes.LruEntryCount();
+      lruEntryCount.setMaximum(evictionMax.toString());
+      evictionAttributes.setLruEntryCount(lruEntryCount);
+      regionAttributesType.setEvictionAttributes(evictionAttributes);
-        executeAndGetFunctionResult(new RegionAlterFunction(), regionFunctionArgs, targetMembers);
-    result = ResultBuilder.buildResult(regionAlterResults);
-
-    XmlEntity xmlEntity = findXmlEntity(regionAlterResults);
-    if (xmlEntity != null) {
-      persistClusterConfiguration(result,
-          () -> ((InternalConfigurationPersistenceService) getConfigurationPersistenceService())
-              .addXmlEntity(xmlEntity, groups));
-    }
+        executeAndGetFunctionResult(new RegionAlterFunction(), deltaConfig, targetMembers);
+    ResultModel result = ResultModel.createMemberStatusResult(regionAlterResults);
+    result.setConfigObject(deltaConfig);
+  public boolean updateConfigForGroup(String group, CacheConfig cacheConfig, Object configObject) {
+    RegionConfig deltaConfig = (RegionConfig) configObject;
+    RegionConfig existingConfig = CacheElement.findElement(cacheConfig.getRegions(),
+        deltaConfig.getId());
+
+    RegionAttributesType deltaAttributes = deltaConfig.getRegionAttributes();
+    RegionAttributesType existingAttributes = existingConfig.getRegionAttributes();
+
+    existingAttributes.setEntryIdleTime(
+        combine(existingAttributes.getEntryIdleTime(), deltaAttributes.getEntryIdleTime()));
+    existingAttributes.setEntryTimeToLive(
+        combine(existingAttributes.getEntryTimeToLive(), deltaAttributes.getEntryTimeToLive()));
+    existingAttributes.setRegionIdleTime(
+        combine(existingAttributes.getRegionIdleTime(), deltaAttributes.getRegionIdleTime()));
+    existingAttributes.setRegionTimeToLive(
+        combine(existingAttributes.getRegionTimeToLive(), deltaAttributes.getRegionTimeToLive()));
+
+    if (deltaAttributes.getCacheLoader() != null) {
+      if (deltaAttributes.getCacheLoader().equals(DeclarableType.EMPTY)) {
+        existingAttributes.setCacheLoader(null);
+      } else {
+        existingAttributes.setCacheLoader(deltaAttributes.getCacheLoader());
+      }
+    }
+
+    if (deltaAttributes.getCacheWriter() != null) {
+      if (deltaAttributes.getCacheWriter().equals(DeclarableType.EMPTY)) {
+        existingAttributes.setCacheWriter(null);
+      } else {
+        existingAttributes.setCacheWriter(deltaAttributes.getCacheWriter());
+      }
+    }
+
+    if (!deltaAttributes.getCacheListeners().isEmpty()) {
+      existingAttributes.getCacheListeners().clear();
+      // only add the new cache listeners to the list when it's an EMPTY cache listener
+      if (!deltaAttributes.getCacheListeners().get(0).equals(DeclarableType.EMPTY)) {
+        existingAttributes.getCacheListeners().addAll(deltaAttributes.getCacheListeners());
+      }
+    }
+
+    if (deltaAttributes.getGatewaySenderIds() != null) {
+      existingAttributes.setGatewaySenderIds(deltaAttributes.getGatewaySenderIds());
+    }
+
+    if (deltaAttributes.getAsyncEventQueueIds() != null) {
+      existingAttributes.setAsyncEventQueueIds(deltaAttributes.getAsyncEventQueueIds());
+    }
+
+    if (deltaAttributes.isCloningEnabled() != null) {
+      existingAttributes.setCloningEnabled(deltaAttributes.isCloningEnabled());
+    }
+
+    EvictionAttributes evictionAttributes = deltaAttributes.getEvictionAttributes();
+    if (evictionAttributes != null) {
+      // we only set the max in the delta's lruEntryCount in the alter region command
+      String newMax = evictionAttributes.getLruEntryCount().getMaximum();
+      EvictionAttributes existingEviction = existingAttributes.getEvictionAttributes();
+
+      // we only alter the max value if there is an existing eviction attributes
+      if (existingEviction != null) {
+        if (existingEviction.getLruEntryCount() != null) {
+          existingEviction.getLruEntryCount().setMaximum(newMax);
+        }
+
+        if (existingEviction.getLruMemorySize() != null) {
+          existingEviction.getLruMemorySize().setMaximum(newMax);
+        }
+      }
+    }
+    return true;
+  }
+
+  ExpirationAttributesType getExpirationAttributes(Integer timeout,
+      ExpirationAction action, ClassName expiry) {
+    if (timeout == null && action == null && expiry == null) {
+      return null;
+    }
+    if (expiry != null) {
+      return new ExpirationAttributesType(timeout, action,
+          expiry.getClassName(), expiry.getInitProperties());
+    } else {
+      return new ExpirationAttributesType(timeout, action, null, null);
+    }
+  }
+
+  // this is a helper method to combine the existing with the delta ExpirationAttributesType
+  ExpirationAttributesType combine(ExpirationAttributesType existing,
+      ExpirationAttributesType delta) {
+    if (delta == null) {
+      return existing;
+    }
+
+    if (existing == null) {
+      existing = new ExpirationAttributesType();
+      existing.setAction(ExpirationAction.INVALIDATE.toXmlString());
+      existing.setTimeout("0");
+    }
+
+    if (delta.getTimeout() != null) {
+      existing.setTimeout(delta.getTimeout());
+    }
+    if (delta.getAction() != null) {
+      existing.setAction(delta.getAction());
+    }
+    if (delta.getCustomExpiry() != null) {
+      if (delta.getCustomExpiry().equals(DeclarableType.EMPTY)) {
+        existing.setCustomExpiry(null);
+      } else {
+        existing.setCustomExpiry(delta.getCustomExpiry());
+      }
+    }
+    return existing;
+  }
+

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 UPD40 UPD40 UPD43 INS31 INS31 INS31 UPD42 UPD43 MOV60 MOV60 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS43 INS42 INS44 INS44 INS44 INS8 INS43 INS42 INS44 INS44 INS8 UPD42 INS43 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS25 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS25 INS25 INS25 INS25 INS25 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS25 INS25 INS41 INS42 MOV32 INS8 UPD43 INS27 INS8 INS27 INS8 UPD43 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 UPD43 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS27 INS8 INS27 INS8 INS38 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS41 UPD42 UPD42 MOV32 INS42 INS33 INS21 INS42 INS33 INS70 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 INS60 INS60 MOV21 INS21 MOV21 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS25 INS32 INS33 INS25 INS32 INS21 INS25 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS25 INS27 INS27 INS41 INS42 INS33 INS41 INS41 INS42 INS33 INS41 INS42 INS33 INS21 INS21 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS25 INS32 INS7 INS44 INS42 INS8 UPD43 INS43 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 MOV42 INS42 MOV42 MOV42 INS33 INS42 MOV42 MOV42 INS33 INS43 INS59 INS43 INS59 INS32 INS32 UPD42 UPD42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS8 INS8 INS32 INS42 INS32 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS27 INS42 INS33 INS33 INS14 INS14 INS42 INS7 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS40 INS42 INS3 INS43 INS42 INS60 INS60 MOV25 INS25 UPD42 INS42 UPD42 UPD42 INS14 UPD42 INS42 INS14 INS32 INS42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS32 UPD42 INS42 INS42 INS14 INS40 INS42 INS14 UPD42 UPD42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS21 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS25 INS42 INS33 INS42 INS33 INS43 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS33 INS33 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS40 INS21 INS21 INS5 INS4 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS32 INS32 INS43 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS45 INS42 INS42 UPD42 MOV42 INS45 INS43 INS43 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS85 INS45 UPD42 MOV42 INS42 INS32 INS42 INS42 INS33 UPD42 INS42 INS33 INS53 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS40 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS7 INS14 INS42 INS42 UPD42 MOV42 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS43 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS34 DEL42 DEL45 DEL80 DEL39 DEL32 DEL43 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL40 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL32 DEL86 DEL42 DEL33 DEL27 DEL8 DEL25