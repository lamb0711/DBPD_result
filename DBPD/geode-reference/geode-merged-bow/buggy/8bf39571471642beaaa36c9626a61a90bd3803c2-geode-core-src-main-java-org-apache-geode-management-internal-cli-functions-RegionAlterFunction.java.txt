Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Function used by the 'alter region' gfsh command to alter a region on each
- * member.
+ * Function used by the 'alter region' gfsh command to alter a region on each member.
-  
+
-    String memberNameOrId = CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
+    String memberNameOrId =
+        CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity, CliStrings.format(
-          CliStrings.ALTER_REGION__MSG__REGION_0_ALTERED_ON_1, new Object[] { alteredRegion.getFullPath(), memberNameOrId })));
-      
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity,
+          CliStrings.format(CliStrings.ALTER_REGION__MSG__REGION_0_ALTERED_ON_1,
+              new Object[] {alteredRegion.getFullPath(), memberNameOrId})));
+
-      
+
-      
+
-      
+
-    
+
-      throw new IllegalArgumentException(CliStrings.format(CliStrings.ALTER_REGION__MSG__REGION_DOESNT_EXIST_0,
-          new Object[] { regionPath }));
+      throw new IllegalArgumentException(CliStrings
+          .format(CliStrings.ALTER_REGION__MSG__REGION_DOESNT_EXIST_0, new Object[] {regionPath}));
-    
+
-    
+
-       logger.debug("Region successfully altered - cloning");
+        logger.debug("Region successfully altered - cloning");
-    
+
-    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationIdleTime = regionAlterArgs.getEntryExpirationIdleTime();
+    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationIdleTime =
+        regionAlterArgs.getEntryExpirationIdleTime();
-      mutator.setEntryIdleTimeout(parseExpirationAttributes(newEntryExpirationIdleTime, region.getEntryIdleTimeout()));
+      mutator.setEntryIdleTimeout(
+          parseExpirationAttributes(newEntryExpirationIdleTime, region.getEntryIdleTimeout()));
-    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationTTL = regionAlterArgs.getEntryExpirationTTL();
+    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationTTL =
+        regionAlterArgs.getEntryExpirationTTL();
-      mutator.setEntryTimeToLive(parseExpirationAttributes(newEntryExpirationTTL, region.getEntryTimeToLive()));
+      mutator.setEntryTimeToLive(
+          parseExpirationAttributes(newEntryExpirationTTL, region.getEntryTimeToLive()));
-    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationIdleTime = regionAlterArgs.getRegionExpirationIdleTime();
+    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationIdleTime =
+        regionAlterArgs.getRegionExpirationIdleTime();
-      mutator.setRegionIdleTimeout(parseExpirationAttributes(newRegionExpirationIdleTime, region.getRegionIdleTimeout()));
+      mutator.setRegionIdleTimeout(
+          parseExpirationAttributes(newRegionExpirationIdleTime, region.getRegionIdleTimeout()));
-    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationTTL = regionAlterArgs.getRegionExpirationTTL();
+    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationTTL =
+        regionAlterArgs.getRegionExpirationTTL();
-      mutator.setRegionTimeToLive(parseExpirationAttributes(newRegionExpirationTTL, region.getRegionTimeToLive()));
+      mutator.setRegionTimeToLive(
+          parseExpirationAttributes(newRegionExpirationTTL, region.getRegionTimeToLive()));
-      
+
-      
+
-      
+
-      
+
-      
+
-      
+
-          Class<CacheListener<K, V>> cacheListenerKlass = forName(newCacheListenerName, CliStrings.ALTER_REGION__CACHELISTENER);
-          mutator.addCacheListener(newInstance(cacheListenerKlass, CliStrings.ALTER_REGION__CACHELISTENER));
+          Class<CacheListener<K, V>> cacheListenerKlass =
+              forName(newCacheListenerName, CliStrings.ALTER_REGION__CACHELISTENER);
+          mutator.addCacheListener(
+              newInstance(cacheListenerKlass, CliStrings.ALTER_REGION__CACHELISTENER));
-      
+
-        Class<CacheLoader<K, V>> cacheLoaderKlass = forName(cacheLoader, CliStrings.ALTER_REGION__CACHELOADER);
+        Class<CacheLoader<K, V>> cacheLoaderKlass =
+            forName(cacheLoader, CliStrings.ALTER_REGION__CACHELOADER);
-        Class<CacheWriter<K, V>> cacheWriterKlass = forName(cacheWriter, CliStrings.ALTER_REGION__CACHEWRITER);
+        Class<CacheWriter<K, V>> cacheWriterKlass =
+            forName(cacheWriter, CliStrings.ALTER_REGION__CACHEWRITER);
-   * Converts the expiration attributes passed as arguments from the command to
-   * the function into a type suitable for applying to a Region.
+   * Converts the expiration attributes passed as arguments from the command to the function into a
+   * type suitable for applying to a Region.
-   * @param newExpirationAttrs
-   *          Attributes supplied by the command
-   * @param oldExpirationAttributes
-   *          Attributes currently applied to the Region.
+   * @param newExpirationAttrs Attributes supplied by the command
+   * @param oldExpirationAttributes Attributes currently applied to the Region.
-   * @return A new pair of expiration attributes taken from the command if it
-   *         was given or the current value from the Region if it was not.
+   * @return A new pair of expiration attributes taken from the command if it was given or the
+   *         current value from the Region if it was not.
-  private ExpirationAttributes parseExpirationAttributes(RegionFunctionArgs.ExpirationAttrs newExpirationAttrs,
+  private ExpirationAttributes parseExpirationAttributes(
+      RegionFunctionArgs.ExpirationAttrs newExpirationAttrs,
-      throw new RuntimeException(CliStrings.format(CliStrings.ALTER_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
-          new Object[] { classToLoadName, neededFor }), e);
+      throw new RuntimeException(
+          CliStrings.format(CliStrings.ALTER_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
+              new Object[] {classToLoadName, neededFor}),
+          e);
-          CliStrings.ALTER_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE, new Object[] {
-              classToLoadName, neededFor }), e);
+          CliStrings.ALTER_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
+          new Object[] {classToLoadName, neededFor}), e);
-      throw new RuntimeException(CliStrings.format(CliStrings.ALTER_REGION__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
-          new Object[] { klass, neededFor }), e);
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.ALTER_REGION__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {klass, neededFor}), e);
-      throw new RuntimeException(CliStrings.format(CliStrings.ALTER_REGION__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
-          new Object[] { klass, neededFor }), e);
+      throw new RuntimeException(
+          CliStrings.format(CliStrings.ALTER_REGION__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
+              new Object[] {klass, neededFor}),
+          e);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66