Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Factory for instances of DataSerializableFixedID instances.
- * Note that this class implements DataSerializableFixedID to inherit constants but
- * is not actually an instance of this interface.
+ * Factory for instances of DataSerializableFixedID instances. Note that this class implements
+ * DataSerializableFixedID to inherit constants but is not actually an instance of this interface.
-   
+
+
+
-  
+
-  public static void registerDSFID(int dsfid,
-      Class dsfidClass) {
+  public static void registerDSFID(int dsfid, Class dsfidClass) {
-      Constructor<?> cons = dsfidClass.getConstructor((Class[])null);
+      Constructor<?> cons = dsfidClass.getConstructor((Class[]) null);
-        throw new InternalGemFireError("default constructor not accessible "
-            + "for DSFID=" + dsfid + ": " + dsfidClass);
+        throw new InternalGemFireError(
+            "default constructor not accessible " + "for DSFID=" + dsfid + ": " + dsfidClass);
-      }
-      else {
+      } else {
-    registerDSFID(DISPATCHED_AND_CURRENT_EVENTS,
-        DispatchedAndCurrentEvents.class);
+    registerDSFID(DISPATCHED_AND_CURRENT_EVENTS, DispatchedAndCurrentEvents.class);
-    registerDSFID(CREATE_REGION_MESSAGE,
-        CreateRegionProcessor.CreateRegionMessage.class);
+    registerDSFID(CREATE_REGION_MESSAGE, CreateRegionProcessor.CreateRegionMessage.class);
-    registerDSFID(REGION_STATE_MESSAGE,
-        InitialImageOperation.RegionStateMessage.class);
+    registerDSFID(REGION_STATE_MESSAGE, InitialImageOperation.RegionStateMessage.class);
-    registerDSFID(RESPONSE_MESSAGE,
-        SearchLoadAndWriteProcessor.ResponseMessage.class);
+    registerDSFID(RESPONSE_MESSAGE, SearchLoadAndWriteProcessor.ResponseMessage.class);
-    registerDSFID(NET_LOAD_REPLY_MESSAGE,
-        SearchLoadAndWriteProcessor.NetLoadReplyMessage.class);
+    registerDSFID(NET_LOAD_REPLY_MESSAGE, SearchLoadAndWriteProcessor.NetLoadReplyMessage.class);
-    registerDSFID(NET_WRITE_REPLY_MESSAGE,
-        SearchLoadAndWriteProcessor.NetWriteReplyMessage.class);
-    registerDSFID(DLOCK_REQUEST_MESSAGE,
-        DLockRequestProcessor.DLockRequestMessage.class);
-    registerDSFID(DLOCK_RESPONSE_MESSAGE,
-        DLockRequestProcessor.DLockResponseMessage.class);
-    registerDSFID(DLOCK_RELEASE_MESSAGE,
-        DLockReleaseProcessor.DLockReleaseMessage.class);
+    registerDSFID(NET_WRITE_REPLY_MESSAGE, SearchLoadAndWriteProcessor.NetWriteReplyMessage.class);
+    registerDSFID(DLOCK_REQUEST_MESSAGE, DLockRequestProcessor.DLockRequestMessage.class);
+    registerDSFID(DLOCK_RESPONSE_MESSAGE, DLockRequestProcessor.DLockResponseMessage.class);
+    registerDSFID(DLOCK_RELEASE_MESSAGE, DLockReleaseProcessor.DLockReleaseMessage.class);
-    registerDSFID(REQUEST_IMAGE_MESSAGE,
-        InitialImageOperation.RequestImageMessage.class);
-    registerDSFID(IMAGE_REPLY_MESSAGE,
-        InitialImageOperation.ImageReplyMessage.class);
+    registerDSFID(REQUEST_IMAGE_MESSAGE, InitialImageOperation.RequestImageMessage.class);
+    registerDSFID(IMAGE_REPLY_MESSAGE, InitialImageOperation.ImageReplyMessage.class);
-    registerDSFID(DLOCK_RELEASE_REPLY,
-        DLockReleaseProcessor.DLockReleaseReplyMessage.class);
-    registerDSFID(GRANTOR_REQUEST_MESSAGE,
-        GrantorRequestProcessor.GrantorRequestMessage.class);
+    registerDSFID(DLOCK_RELEASE_REPLY, DLockReleaseProcessor.DLockReleaseReplyMessage.class);
+    registerDSFID(GRANTOR_REQUEST_MESSAGE, GrantorRequestProcessor.GrantorRequestMessage.class);
-    registerDSFID(ELDER_INIT_REPLY_MESSAGE,
-        ElderInitProcessor.ElderInitReplyMessage.class);
-    registerDSFID(DEPOSE_GRANTOR_MESSAGE,
-        DeposeGrantorProcessor.DeposeGrantorMessage.class);
+    registerDSFID(ELDER_INIT_REPLY_MESSAGE, ElderInitProcessor.ElderInitReplyMessage.class);
+    registerDSFID(DEPOSE_GRANTOR_MESSAGE, DeposeGrantorProcessor.DeposeGrantorMessage.class);
-    registerDSFID(STARTUP_RESPONSE_WITHVERSION_MESSAGE,
-        StartupResponseWithVersionMessage.class);
+    registerDSFID(STARTUP_RESPONSE_WITHVERSION_MESSAGE, StartupResponseWithVersionMessage.class);
-    registerDSFID(DESTROY_REGION_MESSAGE,
-        DestroyRegionOperation.DestroyRegionMessage.class);
+    registerDSFID(DESTROY_REGION_MESSAGE, DestroyRegionOperation.DestroyRegionMessage.class);
-    registerDSFID(REMOTE_REMOVE_ALL_REPLY_MESSAGE, RemoteRemoveAllMessage.RemoveAllReplyMessage.class);
+    registerDSFID(REMOTE_REMOVE_ALL_REPLY_MESSAGE,
+        RemoteRemoveAllMessage.RemoveAllReplyMessage.class);
-    registerDSFID(DISTTX_ROLLBACK_REPLY_MESSAGE, DistTXRollbackMessage.DistTXRollbackReplyMessage.class);
+    registerDSFID(DISTTX_ROLLBACK_REPLY_MESSAGE,
+        DistTXRollbackMessage.DistTXRollbackReplyMessage.class);
-    registerDSFID(DISTTX_PRE_COMMIT_REPLY_MESSAGE, DistTXPrecommitMessage.DistTXPrecommitReplyMessage.class);
+    registerDSFID(DISTTX_PRE_COMMIT_REPLY_MESSAGE,
+        DistTXPrecommitMessage.DistTXPrecommitReplyMessage.class);
-    registerDSFID(INVALIDATE_MESSAGE,
-        InvalidateOperation.InvalidateMessage.class);
+    registerDSFID(INVALIDATE_MESSAGE, InvalidateOperation.InvalidateMessage.class);
-    registerDSFID(PROFILE_REPLY_MESSAGE,
-        UpdateAttributesProcessor.ProfileReplyMessage.class);
-    registerDSFID(PROFILES_REPLY_MESSAGE,
-        UpdateAttributesProcessor.ProfilesReplyMessage.class);
+    registerDSFID(PROFILE_REPLY_MESSAGE, UpdateAttributesProcessor.ProfileReplyMessage.class);
+    registerDSFID(PROFILES_REPLY_MESSAGE, UpdateAttributesProcessor.ProfilesReplyMessage.class);
-    registerDSFID(COMMIT_PROCESS_FOR_LOCKID_MESSAGE,
-        CommitProcessForLockIdMessage.class);
-    registerDSFID(COMMIT_PROCESS_FOR_TXID_MESSAGE,
-        CommitProcessForTXIdMessage.class);
+    registerDSFID(COMMIT_PROCESS_FOR_LOCKID_MESSAGE, CommitProcessForLockIdMessage.class);
+    registerDSFID(COMMIT_PROCESS_FOR_TXID_MESSAGE, CommitProcessForTXIdMessage.class);
-    registerDSFID(REMOTE_PUTALL_REPLY_MESSAGE,
-        RemotePutAllMessage.PutAllReplyMessage.class);
+    registerDSFID(REMOTE_PUTALL_REPLY_MESSAGE, RemotePutAllMessage.PutAllReplyMessage.class);
-    registerDSFID(ADD_CACHESERVER_PROFILE_UPDATE,
-        AddCacheServerProfileMessage.class);
-    registerDSFID(SERVER_INTEREST_REGISTRATION_MESSAGE,
-        ServerInterestRegistrationMessage.class);
+    registerDSFID(ADD_CACHESERVER_PROFILE_UPDATE, AddCacheServerProfileMessage.class);
+    registerDSFID(SERVER_INTEREST_REGISTRATION_MESSAGE, ServerInterestRegistrationMessage.class);
-    registerDSFID(R_DESTROY_REPLY_MESSAGE,
-        RemoteDestroyMessage.DestroyReplyMessage.class);
+    registerDSFID(R_DESTROY_REPLY_MESSAGE, RemoteDestroyMessage.DestroyReplyMessage.class);
-    registerDSFID(R_INVALIDATE_REPLY_MESSAGE,
-        RemoteInvalidateMessage.InvalidateReplyMessage.class);
+    registerDSFID(R_INVALIDATE_REPLY_MESSAGE, RemoteInvalidateMessage.InvalidateReplyMessage.class);
-    registerDSFID(R_SIZE_REPLY_MESSAGE,
-        RemoteSizeMessage.SizeReplyMessage.class);
-    registerDSFID(PR_DESTROY_REPLY_MESSAGE,
-        DestroyMessage.DestroyReplyMessage.class);
+    registerDSFID(R_SIZE_REPLY_MESSAGE, RemoteSizeMessage.SizeReplyMessage.class);
+    registerDSFID(PR_DESTROY_REPLY_MESSAGE, DestroyMessage.DestroyReplyMessage.class);
-    registerDSFID(R_FETCH_KEYS_REPLY,
-        RemoteFetchKeysMessage.RemoteFetchKeysReplyMessage.class);
-    registerDSFID(R_REMOTE_COMMIT_REPLY_MESSAGE,
-        TXRemoteCommitReplyMessage.class);
+    registerDSFID(R_FETCH_KEYS_REPLY, RemoteFetchKeysMessage.RemoteFetchKeysReplyMessage.class);
+    registerDSFID(R_REMOTE_COMMIT_REPLY_MESSAGE, TXRemoteCommitReplyMessage.class);
-    registerDSFID(UPDATE_WITH_CONTEXT_MESSAGE,
-        UpdateOperation.UpdateWithContextMessage.class);
-    registerDSFID(DESTROY_WITH_CONTEXT_MESSAGE,
-        DestroyOperation.DestroyWithContextMessage.class);
+    registerDSFID(UPDATE_WITH_CONTEXT_MESSAGE, UpdateOperation.UpdateWithContextMessage.class);
+    registerDSFID(DESTROY_WITH_CONTEXT_MESSAGE, DestroyOperation.DestroyWithContextMessage.class);
-    registerDSFID(CLEAR_REGION_MESSAGE_WITH_CONTEXT,
-        ClearRegionWithContextMessage.class);
+    registerDSFID(CLEAR_REGION_MESSAGE_WITH_CONTEXT, ClearRegionWithContextMessage.class);
-    registerDSFID(CLIENT_DATASERIALIZER_MESSAGE,
-        ClientDataSerializerMessage.class);
-    registerDSFID(REGISTRATION_MESSAGE,
-        InternalInstantiator.RegistrationMessage.class);
+    registerDSFID(CLIENT_DATASERIALIZER_MESSAGE, ClientDataSerializerMessage.class);
+    registerDSFID(REGISTRATION_MESSAGE, InternalInstantiator.RegistrationMessage.class);
-    registerDSFID(PR_BUCKET_PROFILE_UPDATE_MESSAGE,
-        BucketProfileUpdateMessage.class);
-    registerDSFID(PR_ALL_BUCKET_PROFILES_UPDATE_MESSAGE,
-        AllBucketProfilesUpdateMessage.class);
+    registerDSFID(PR_BUCKET_PROFILE_UPDATE_MESSAGE, BucketProfileUpdateMessage.class);
+    registerDSFID(PR_ALL_BUCKET_PROFILES_UPDATE_MESSAGE, AllBucketProfilesUpdateMessage.class);
-    registerDSFID(PR_PRIMARY_REQUEST_REPLY_MESSAGE,
-        PrimaryRequestReplyMessage.class);
+    registerDSFID(PR_PRIMARY_REQUEST_REPLY_MESSAGE, PrimaryRequestReplyMessage.class);
-    registerDSFID(PR_REMOVE_INDEXES_REPLY_MESSAGE,
-        RemoveIndexesReplyMessage.class);
+    registerDSFID(PR_REMOVE_INDEXES_REPLY_MESSAGE, RemoveIndexesReplyMessage.class);
-    registerDSFID(PR_CONTAINS_KEY_VALUE_REPLY_MESSAGE,
-        ContainsKeyValueReplyMessage.class);
-    registerDSFID(PR_FETCH_ENTRIES_REPLY_MESSAGE,
-        FetchEntriesReplyMessage.class);
+    registerDSFID(PR_CONTAINS_KEY_VALUE_REPLY_MESSAGE, ContainsKeyValueReplyMessage.class);
+    registerDSFID(PR_FETCH_ENTRIES_REPLY_MESSAGE, FetchEntriesReplyMessage.class);
-    registerDSFID(PR_MANAGE_BUCKET_REPLY_MESSAGE,
-        ManageBucketReplyMessage.class);
+    registerDSFID(PR_MANAGE_BUCKET_REPLY_MESSAGE, ManageBucketReplyMessage.class);
-    registerDSFID(DESTROY_PARTITIONED_REGION_MESSAGE,
-        DestroyPartitionedRegionMessage.class);
-    registerDSFID(INVALIDATE_PARTITIONED_REGION_MESSAGE,
-        InvalidatePartitionedRegionMessage.class);
-    registerDSFID(COMMIT_PROCESS_QUERY_MESSAGE,
-        CommitProcessQueryMessage.class);
-    registerDSFID(COMMIT_PROCESS_QUERY_REPLY_MESSAGE,
-        CommitProcessQueryReplyMessage.class);
+    registerDSFID(DESTROY_PARTITIONED_REGION_MESSAGE, DestroyPartitionedRegionMessage.class);
+    registerDSFID(INVALIDATE_PARTITIONED_REGION_MESSAGE, InvalidatePartitionedRegionMessage.class);
+    registerDSFID(COMMIT_PROCESS_QUERY_MESSAGE, CommitProcessQueryMessage.class);
+    registerDSFID(COMMIT_PROCESS_QUERY_REPLY_MESSAGE, CommitProcessQueryReplyMessage.class);
-    registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_MESSAGE,
-        TXLockUpdateParticipantsMessage.class);
-    registerDSFID(TX_ORIGINATOR_RECOVERY_MESSAGE,
-        TXOriginatorRecoveryMessage.class);
-    registerDSFID(TX_ORIGINATOR_RECOVERY_REPLY_MESSAGE,
-        TXOriginatorRecoveryReplyMessage.class);
+    registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_MESSAGE, TXLockUpdateParticipantsMessage.class);
+    registerDSFID(TX_ORIGINATOR_RECOVERY_MESSAGE, TXOriginatorRecoveryMessage.class);
+    registerDSFID(TX_ORIGINATOR_RECOVERY_REPLY_MESSAGE, TXOriginatorRecoveryReplyMessage.class);
-    registerDSFID(JTA_BEFORE_COMPLETION_MESSAGE,
-        JtaBeforeCompletionMessage.class);
-    registerDSFID(JTA_AFTER_COMPLETION_MESSAGE,
-        JtaAfterCompletionMessage.class);
+    registerDSFID(JTA_BEFORE_COMPLETION_MESSAGE, JtaBeforeCompletionMessage.class);
+    registerDSFID(JTA_AFTER_COMPLETION_MESSAGE, JtaAfterCompletionMessage.class);
-    registerDSFID(DLOCK_RECOVER_GRANTOR_MESSAGE,
-        DLockRecoverGrantorMessage.class);
-    registerDSFID(DLOCK_RECOVER_GRANTOR_REPLY_MESSAGE,
-        DLockRecoverGrantorReplyMessage.class);
-    registerDSFID(NON_GRANTOR_DESTROYED_REPLY_MESSAGE,
-        NonGrantorDestroyedReplyMessage.class);
-    registerDSFID(IDS_REGISTRATION_MESSAGE,
-        InternalDataSerializer.RegistrationMessage.class);
-    registerDSFID(PR_FETCH_PARTITION_DETAILS_MESSAGE,
-        FetchPartitionDetailsMessage.class);
-    registerDSFID(PR_FETCH_PARTITION_DETAILS_REPLY,
-        FetchPartitionDetailsReplyMessage.class);
-    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_MESSAGE,
-        DeposePrimaryBucketMessage.class);
-    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_REPLY,
-        DeposePrimaryBucketReplyMessage.class);
-    registerDSFID(PR_BECOME_PRIMARY_BUCKET_MESSAGE,
-        BecomePrimaryBucketMessage.class);
-    registerDSFID(PR_BECOME_PRIMARY_BUCKET_REPLY,
-        BecomePrimaryBucketReplyMessage.class);
+    registerDSFID(DLOCK_RECOVER_GRANTOR_MESSAGE, DLockRecoverGrantorMessage.class);
+    registerDSFID(DLOCK_RECOVER_GRANTOR_REPLY_MESSAGE, DLockRecoverGrantorReplyMessage.class);
+    registerDSFID(NON_GRANTOR_DESTROYED_REPLY_MESSAGE, NonGrantorDestroyedReplyMessage.class);
+    registerDSFID(IDS_REGISTRATION_MESSAGE, InternalDataSerializer.RegistrationMessage.class);
+    registerDSFID(PR_FETCH_PARTITION_DETAILS_MESSAGE, FetchPartitionDetailsMessage.class);
+    registerDSFID(PR_FETCH_PARTITION_DETAILS_REPLY, FetchPartitionDetailsReplyMessage.class);
+    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_MESSAGE, DeposePrimaryBucketMessage.class);
+    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_REPLY, DeposePrimaryBucketReplyMessage.class);
+    registerDSFID(PR_BECOME_PRIMARY_BUCKET_MESSAGE, BecomePrimaryBucketMessage.class);
+    registerDSFID(PR_BECOME_PRIMARY_BUCKET_REPLY, BecomePrimaryBucketReplyMessage.class);
-    registerDSFID(TX_MANAGER_REMOVE_TRANSACTIONS,
-        TXManagerImpl.TXRemovalMessage.class);
+    registerDSFID(TX_MANAGER_REMOVE_TRANSACTIONS, TXManagerImpl.TXRemovalMessage.class);
-    registerDSFID(ADMIN_CONSOLE_DISCONNECT_MESSAGE,
-        AdminConsoleDisconnectMessage.class);
+    registerDSFID(ADMIN_CONSOLE_DISCONNECT_MESSAGE, AdminConsoleDisconnectMessage.class);
-    registerDSFID(CANCEL_STAT_LISTENER_RESPONSE,
-        CancelStatListenerResponse.class);
+    registerDSFID(CANCEL_STAT_LISTENER_RESPONSE, CancelStatListenerResponse.class);
-    registerDSFID(FETCH_DIST_LOCK_INFO_RESPONSE,
-        FetchDistLockInfoResponse.class);
-    registerDSFID(FETCH_HEALTH_DIAGNOSIS_REQUEST,
-        FetchHealthDiagnosisRequest.class);
-    registerDSFID(FETCH_HEALTH_DIAGNOSIS_RESPONSE,
-        FetchHealthDiagnosisResponse.class);
+    registerDSFID(FETCH_DIST_LOCK_INFO_RESPONSE, FetchDistLockInfoResponse.class);
+    registerDSFID(FETCH_HEALTH_DIAGNOSIS_REQUEST, FetchHealthDiagnosisRequest.class);
+    registerDSFID(FETCH_HEALTH_DIAGNOSIS_RESPONSE, FetchHealthDiagnosisResponse.class);
-    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_REQUEST,
-        FetchResourceAttributesRequest.class);
-    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_RESPONSE,
-        FetchResourceAttributesResponse.class);
+    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_REQUEST, FetchResourceAttributesRequest.class);
+    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_RESPONSE, FetchResourceAttributesResponse.class);
-    registerDSFID(FLUSH_APP_CACHE_SNAPSHOT_MESSAGE,
-        FlushAppCacheSnapshotMessage.class);
+    registerDSFID(FLUSH_APP_CACHE_SNAPSHOT_MESSAGE, FlushAppCacheSnapshotMessage.class);
-    registerDSFID(REMOVE_HEALTH_LISTENER_REQUEST,
-        RemoveHealthListenerRequest.class);
-    registerDSFID(REMOVE_HEALTH_LISTENER_RESPONSE,
-        RemoveHealthListenerResponse.class);
+    registerDSFID(REMOVE_HEALTH_LISTENER_REQUEST, RemoveHealthListenerRequest.class);
+    registerDSFID(REMOVE_HEALTH_LISTENER_RESPONSE, RemoveHealthListenerResponse.class);
-    registerDSFID(SERVER_BUCKET_PROFILE,
-        BucketAdvisor.ServerBucketProfile.class);
+    registerDSFID(SERVER_BUCKET_PROFILE, BucketAdvisor.ServerBucketProfile.class);
-    registerDSFID(GATEWAY_SENDER_PROFILE,
-        GatewaySenderAdvisor.GatewaySenderProfile.class);
+    registerDSFID(GATEWAY_SENDER_PROFILE, GatewaySenderAdvisor.GatewaySenderProfile.class);
-    registerDSFID(PR_INVALIDATE_REPLY_MESSAGE,
-        InvalidateMessage.InvalidateReplyMessage.class);
+    registerDSFID(PR_INVALIDATE_REPLY_MESSAGE, InvalidateMessage.InvalidateReplyMessage.class);
-    registerDSFID(PREFER_BYTES_CACHED_DESERIALIZABLE,
-        PreferBytesCachedDeserializable.class);
+    registerDSFID(PREFER_BYTES_CACHED_DESERIALIZABLE, PreferBytesCachedDeserializable.class);
-    registerDSFID(GATEWAY_SENDER_EVENT_CALLBACK_ARGUMENT,
-        GatewaySenderEventCallbackArgument.class);
+    registerDSFID(GATEWAY_SENDER_EVENT_CALLBACK_ARGUMENT, GatewaySenderEventCallbackArgument.class);
-    registerDSFID(STORE_ALL_CACHED_DESERIALIZABLE,
-        StoreAllCachedDeserializable.class);
+    registerDSFID(STORE_ALL_CACHED_DESERIALIZABLE, StoreAllCachedDeserializable.class);
-    registerDSFID(STAT_ALERTS_MGR_ASSIGN_MESSAGE,
-        StatAlertsManagerAssignMessage.class);
-    registerDSFID(UPDATE_ALERTS_DEFN_MESSAGE,
-        UpdateAlertDefinitionMessage.class);
-    registerDSFID(REFRESH_MEMBER_SNAP_REQUEST,
-        RefreshMemberSnapshotRequest.class);
-    registerDSFID(REFRESH_MEMBER_SNAP_RESPONSE,
-        RefreshMemberSnapshotResponse.class);
+    registerDSFID(STAT_ALERTS_MGR_ASSIGN_MESSAGE, StatAlertsManagerAssignMessage.class);
+    registerDSFID(UPDATE_ALERTS_DEFN_MESSAGE, UpdateAlertDefinitionMessage.class);
+    registerDSFID(REFRESH_MEMBER_SNAP_REQUEST, RefreshMemberSnapshotRequest.class);
+    registerDSFID(REFRESH_MEMBER_SNAP_RESPONSE, RefreshMemberSnapshotResponse.class);
-    registerDSFID(CHANGE_REFRESH_INT_MESSAGE,
-        ChangeRefreshIntervalMessage.class);
+    registerDSFID(CHANGE_REFRESH_INT_MESSAGE, ChangeRefreshIntervalMessage.class);
-    registerDSFID(DLOCK_QUERY_MESSAGE,
-        DLockQueryProcessor.DLockQueryMessage.class);
-    registerDSFID(DLOCK_QUERY_REPLY,
-        DLockQueryProcessor.DLockQueryReplyMessage.class);
+    registerDSFID(DLOCK_QUERY_MESSAGE, DLockQueryProcessor.DLockQueryMessage.class);
+    registerDSFID(DLOCK_QUERY_REPLY, DLockQueryProcessor.DLockQueryReplyMessage.class);
-    registerDSFID(INITIAL_IMAGE_VERSIONED_OBJECT_LIST,
-        InitialImageVersionedEntryList.class);
+    registerDSFID(INITIAL_IMAGE_VERSIONED_OBJECT_LIST, InitialImageVersionedEntryList.class);
-    registerDSFID(STAT_ALERT_DEFN_NUM_THRESHOLD,
-        NumberThresholdDecoratorImpl.class);
-    registerDSFID(STAT_ALERT_DEFN_GAUGE_THRESHOLD,
-        GaugeThresholdDecoratorImpl.class);
+    registerDSFID(STAT_ALERT_DEFN_NUM_THRESHOLD, NumberThresholdDecoratorImpl.class);
+    registerDSFID(STAT_ALERT_DEFN_GAUGE_THRESHOLD, GaugeThresholdDecoratorImpl.class);
-    registerDSFID(FILTER_INFO_MESSAGE,
-        InitialImageOperation.FilterInfoMessage.class);
+    registerDSFID(FILTER_INFO_MESSAGE, InitialImageOperation.FilterInfoMessage.class);
-    registerDSFID(PR_MANAGE_BACKUP_BUCKET_MESSAGE,
-        ManageBackupBucketMessage.class);
-    registerDSFID(PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE,
-        ManageBackupBucketReplyMessage.class);
+    registerDSFID(PR_MANAGE_BACKUP_BUCKET_MESSAGE, ManageBackupBucketMessage.class);
+    registerDSFID(PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE, ManageBackupBucketReplyMessage.class);
-    registerDSFID(PR_CREATE_BUCKET_REPLY_MESSAGE,
-        CreateBucketReplyMessage.class);
+    registerDSFID(PR_CREATE_BUCKET_REPLY_MESSAGE, CreateBucketReplyMessage.class);
-    registerDSFID(REMOVE_CLIENT_FROM_BLACKLIST_MESSAGE,
-        RemoveClientFromBlacklistMessage.class);
-    registerDSFID(PR_FUNCTION_STREAMING_MESSAGE,
-        PartitionedRegionFunctionStreamingMessage.class);
-    registerDSFID(MEMBER_FUNCTION_STREAMING_MESSAGE,
-        MemberFunctionStreamingMessage.class);
-    registerDSFID(DR_FUNCTION_STREAMING_MESSAGE,
-        DistributedRegionFunctionStreamingMessage.class);
-    registerDSFID(FUNCTION_STREAMING_REPLY_MESSAGE,
-        FunctionStreamingReplyMessage.class);
+    registerDSFID(REMOVE_CLIENT_FROM_BLACKLIST_MESSAGE, RemoveClientFromBlacklistMessage.class);
+    registerDSFID(PR_FUNCTION_STREAMING_MESSAGE, PartitionedRegionFunctionStreamingMessage.class);
+    registerDSFID(MEMBER_FUNCTION_STREAMING_MESSAGE, MemberFunctionStreamingMessage.class);
+    registerDSFID(DR_FUNCTION_STREAMING_MESSAGE, DistributedRegionFunctionStreamingMessage.class);
+    registerDSFID(FUNCTION_STREAMING_REPLY_MESSAGE, FunctionStreamingReplyMessage.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REQUEST,
-        MembershipViewRequest.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REPLY,
-        MembershipViewReplyMessage.class);
-    registerDSFID(PERSISTENT_STATE_QUERY_REQUEST,
-        PersistentStateQueryMessage.class);
-    registerDSFID(PERSISTENT_STATE_QUERY_REPLY,
-        PersistentStateQueryReplyMessage.class);
-    registerDSFID(PREPARE_NEW_PERSISTENT_MEMBER_REQUEST,
-        PrepareNewPersistentMemberMessage.class);
-    registerDSFID(MISSING_PERSISTENT_IDS_REQUEST,
-        MissingPersistentIDsRequest.class);
-    registerDSFID(MISSING_PERSISTENT_IDS_RESPONSE,
-        MissingPersistentIDsResponse.class);
+    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REQUEST, MembershipViewRequest.class);
+    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REPLY, MembershipViewReplyMessage.class);
+    registerDSFID(PERSISTENT_STATE_QUERY_REQUEST, PersistentStateQueryMessage.class);
+    registerDSFID(PERSISTENT_STATE_QUERY_REPLY, PersistentStateQueryReplyMessage.class);
+    registerDSFID(PREPARE_NEW_PERSISTENT_MEMBER_REQUEST, PrepareNewPersistentMemberMessage.class);
+    registerDSFID(MISSING_PERSISTENT_IDS_REQUEST, MissingPersistentIDsRequest.class);
+    registerDSFID(MISSING_PERSISTENT_IDS_RESPONSE, MissingPersistentIDsResponse.class);
-    registerDSFID(REVOKE_PERSISTENT_ID_RESPONSE,
-        RevokePersistentIDResponse.class);
-    registerDSFID(REMOVE_PERSISTENT_MEMBER_REQUEST,
-        RemovePersistentMemberMessage.class);
+    registerDSFID(REVOKE_PERSISTENT_ID_RESPONSE, RevokePersistentIDResponse.class);
+    registerDSFID(REMOVE_PERSISTENT_MEMBER_REQUEST, RemovePersistentMemberMessage.class);
-    registerDSFID(REQUEST_SYNC_MESSAGE,
-        InitialImageOperation.RequestSyncMessage.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_FLUSH_REQUEST,
-        MembershipFlushRequest.class);
+    registerDSFID(REQUEST_SYNC_MESSAGE, InitialImageOperation.RequestSyncMessage.class);
+    registerDSFID(PERSISTENT_MEMBERSHIP_FLUSH_REQUEST, MembershipFlushRequest.class);
-    registerDSFID(REQUEST_FILTERINFO_MESSAGE,
-        InitialImageOperation.RequestFilterInfoMessage.class);
-    registerDSFID(PARALLEL_QUEUE_REMOVAL_MESSAGE,
-        ParallelQueueRemovalMessage.class);
-    registerDSFID(PARALLEL_QUEUE_BATCH_REMOVAL_MESSAGE,
-        ParallelQueueBatchRemovalMessage.class);
-    registerDSFID(PARALLEL_QUEUE_BATCH_REMOVAL_REPLY,
-        BatchRemovalReplyMessage.class);
-    registerDSFID(BATCH_DESTROY_MESSAGE,
-        BatchDestroyOperation.DestroyMessage.class);
+    registerDSFID(REQUEST_FILTERINFO_MESSAGE, InitialImageOperation.RequestFilterInfoMessage.class);
+    registerDSFID(PARALLEL_QUEUE_REMOVAL_MESSAGE, ParallelQueueRemovalMessage.class);
+    registerDSFID(PARALLEL_QUEUE_BATCH_REMOVAL_MESSAGE, ParallelQueueBatchRemovalMessage.class);
+    registerDSFID(PARALLEL_QUEUE_BATCH_REMOVAL_REPLY, BatchRemovalReplyMessage.class);
+    registerDSFID(BATCH_DESTROY_MESSAGE, BatchDestroyOperation.DestroyMessage.class);
-    registerDSFID(PREPARE_REVOKE_PERSISTENT_ID_REQUEST,
-        PrepareRevokePersistentIDRequest.class);
+    registerDSFID(PREPARE_REVOKE_PERSISTENT_ID_REQUEST, PrepareRevokePersistentIDRequest.class);
-    registerDSFID(R_FETCH_VERSION_REPLY,
-        RemoteFetchVersionMessage.FetchVersionReplyMessage.class);
+    registerDSFID(R_FETCH_VERSION_REPLY, RemoteFetchVersionMessage.FetchVersionReplyMessage.class);
-    registerDSFID(SNAPPY_COMPRESSED_CACHED_DESERIALIZABLE, SnappyCompressedCachedDeserializable.class);
+    registerDSFID(SNAPPY_COMPRESSED_CACHED_DESERIALIZABLE,
+        SnappyCompressedCachedDeserializable.class);
-    registerDSFID(PR_UPDATE_ENTRY_VERSION_MESSAGE,
-        PRUpdateEntryVersionMessage.class);
+    registerDSFID(PR_UPDATE_ENTRY_VERSION_MESSAGE, PRUpdateEntryVersionMessage.class);
-    registerDSFID(DIST_TX_PRE_COMMIT_RESPONSE, DistTXPrecommitMessage.DistTxPrecommitResponse.class);
+    registerDSFID(DIST_TX_PRE_COMMIT_RESPONSE,
+        DistTXPrecommitMessage.DistTxPrecommitResponse.class);
-    registerDSFID(PR_DESTROY_ON_DATA_STORE_MESSAGE,
-        DestroyRegionOnDataStoreMessage.class);
-    registerDSFID(SHUTDOWN_ALL_GATEWAYHUBS_REQUEST,
-        ShutdownAllGatewayHubsRequest.class);
+    registerDSFID(PR_DESTROY_ON_DATA_STORE_MESSAGE, DestroyRegionOnDataStoreMessage.class);
+    registerDSFID(SHUTDOWN_ALL_GATEWAYHUBS_REQUEST, ShutdownAllGatewayHubsRequest.class);
-   * Creates a DataSerializableFixedID or StreamableFixedID instance by deserializing it from
-   * the data input.
+   * Creates a DataSerializableFixedID or StreamableFixedID instance by deserializing it from the
+   * data input.
-  public static Object create(int dsfid, DataInput in)
-      throws IOException, ClassNotFoundException {
+  public static Object create(int dsfid, DataInput in) throws IOException, ClassNotFoundException {
-        return (DataSerializableFixedID)DataSerializer.readRegion(in);
+        return (DataSerializableFixedID) DataSerializer.readRegion(in);
-      case CONFIGURATION_REQUEST :
+      case CONFIGURATION_REQUEST:
-	  case PR_DESTROY_ON_DATA_STORE_MESSAGE:
+      case PR_DESTROY_ON_DATA_STORE_MESSAGE:
-            Object ds = cons
-                    .newInstance((Object[]) null);
+            Object ds = cons.newInstance((Object[]) null);
-        throw new DSFIDNotFoundException("Unknown DataSerializableFixedID: "
-                + dsfid, dsfid);
+        throw new DSFIDNotFoundException("Unknown DataSerializableFixedID: " + dsfid, dsfid);
- 
-  //////////////////  Reading Internal Objects  /////////////////
+
+  ////////////////// Reading Internal Objects /////////////////
-   * Reads an instance of <code>IpAddress</code> from a
-   * <code>DataInput</code>.
+   * Reads an instance of <code>IpAddress</code> from a <code>DataInput</code>.
-   * @throws IOException
-   *         A problem occurs while reading from <code>in</code>
+   * @throws IOException A problem occurs while reading from <code>in</code>
-    throws IOException, ClassNotFoundException {
+      throws IOException, ClassNotFoundException {
-  private static ResultsBag readResultsBag(DataInput in) throws IOException, ClassNotFoundException {
+  private static ResultsBag readResultsBag(DataInput in)
+      throws IOException, ClassNotFoundException {
-    Undefined o = (Undefined)QueryService.UNDEFINED;
+    Undefined o = (Undefined) QueryService.UNDEFINED;
-   * Reads an instance of <code>InterestResultPolicy</code> from a
-   * <code>DataInput</code>.
+   * Reads an instance of <code>InterestResultPolicy</code> from a <code>DataInput</code>.
-   * @throws IOException
-   *         A problem occurs while reading from <code>in</code>
+   * @throws IOException A problem occurs while reading from <code>in</code>
-  private static InterestResultPolicyImpl readInterestResultPolicy(DataInput in) throws IOException, ClassNotFoundException {
+  private static InterestResultPolicyImpl readInterestResultPolicy(DataInput in)
+      throws IOException, ClassNotFoundException {
-    return (InterestResultPolicyImpl)InterestResultPolicy.fromOrdinal(ordinal);
+    return (InterestResultPolicyImpl) InterestResultPolicy.fromOrdinal(ordinal);
-  private static DataSerializableFixedID readDestroyOnDataStore(DataInput in) 
+  private static DataSerializableFixedID readDestroyOnDataStore(DataInput in)
-  private static DataSerializableFixedID readSnappyCompressedCachedDeserializable(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  private static DataSerializableFixedID readSnappyCompressedCachedDeserializable(DataInput in)
+      throws IOException, ClassNotFoundException {
-  
-  private static DataSerializableFixedID readNullToken(DataInput in) 
-  throws IOException, ClassNotFoundException {
-    DataSerializableFixedID serializable = (NullToken)IndexManager.NULL;
+
+  private static DataSerializableFixedID readNullToken(DataInput in)
+      throws IOException, ClassNotFoundException {
+    DataSerializableFixedID serializable = (NullToken) IndexManager.NULL;
-  
-  private static DataSerializableFixedID readConfigurationRequest(DataInput in) throws IOException, ClassNotFoundException {
+
+  private static DataSerializableFixedID readConfigurationRequest(DataInput in)
+      throws IOException, ClassNotFoundException {
-  
-  private static DataSerializableFixedID readConfigurationResponse(DataInput in) throws IOException, ClassNotFoundException {
+
+  private static DataSerializableFixedID readConfigurationResponse(DataInput in)
+      throws IOException, ClassNotFoundException {
-    return serializable;  
+    return serializable;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66