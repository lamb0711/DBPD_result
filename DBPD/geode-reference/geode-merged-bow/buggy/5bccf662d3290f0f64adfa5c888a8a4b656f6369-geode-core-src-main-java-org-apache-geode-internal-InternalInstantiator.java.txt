GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.InternalInstantiator_CANNOT_REGISTER_A_NULL_INSTANTIATOR
-              .toLocalizedString());
+          "Cannot register a null Instantiator.");
-          LocalizedStrings.Instantiator_INSTANTIATOR_ID_CANNOT_BE_ZERO.toLocalizedString());
+          "Instantiator id cannot be zero");
-            LocalizedStrings.InternalInstantiator_CLASS_0_IS_ALREADY_REGISTERED_WITH_ID_1_SO_IT_CANNOT_BE_REGISTERED_WTH_ID_2
-                .toLocalizedString(
-                    new Object[] {c.getName(), Integer.valueOf(oldId), Integer.valueOf(classId)}));
+            String.format(
+                "Class  %s  is already registered with id %s so it can not be registered with id %s",
+
+                new Object[] {c.getName(), Integer.valueOf(oldId), Integer.valueOf(classId)}));
-                  LocalizedStrings.InternalInstantiator_CLASS_ID_0_IS_ALREADY_REGISTERED_FOR_CLASS_1_SO_IT_COULD_NOT_BE_REGISTED_FOR_CLASS_2
-                      .toLocalizedString(
-                          new Object[] {Integer.valueOf(classId), oldClass.getName(), cName}));
+                  String.format(
+                      "Class id %s is already registered for class %s so it could not be registered for class %s",
+
+                      new Object[] {Integer.valueOf(classId), oldClass.getName(), cName}));
-      logger.info(LocalizedMessage.create(LocalizedStrings.InternalInstantiator_REGISTERED,
-          new Object[] {Integer.valueOf(classId), c.getName()}));
+      logger
+          .info("Instantiator registered with id {} class {}",
+              Integer.valueOf(classId), c.getName());
-              LocalizedStrings.Instantiator_INSTANTIATOR_ID_CANNOT_BE_ZERO.toLocalizedString());
+              "Instantiator id cannot be zero");
-              LocalizedStrings.InternalInstantiator_CLASS_0_IS_ALREADY_REGISTERED_WITH_ID_1_SO_IT_CANNOT_BE_REGISTERED_WTH_ID_2
-                  .toLocalizedString(
-                      new Object[] {instantiatorClassName, iah.getId(), holder.getId()}));
+              String.format(
+                  "Class  %s  is already registered with id %s so it can not be registered with id %s",
+
+                  new Object[] {instantiatorClassName, iah.getId(), holder.getId()}));
-        logger.info(LocalizedMessage.create(LocalizedStrings.InternalInstantiator_REGISTERED_HOLDER,
-            new Object[] {Integer.valueOf(holder.getId()), holder.getInstantiatedClassName()}));
+        logger.info("Instantiator registered with holder id {} class {}",
+            Integer.valueOf(holder.getId()),
+            holder.getInstantiatedClassName());
-        if (cache != null && cache.getLoggerI18n() != null && cache.getLoggerI18n().infoEnabled()) {
-          cache.getLoggerI18n().info(
-              LocalizedStrings.InternalInstantiator_COULD_NOT_LOAD_INSTANTIATOR_CLASS_0,
-              new Object[] {cnfe.getMessage()});
+        if (cache != null && cache.getLogger() != null && cache.getLogger().infoEnabled()) {
+          cache.getLogger().info(
+              String.format("Could not load instantiator class: %s",
+                  new Object[] {cnfe.getMessage()}));
-          LocalizedStrings.InternalInstantiator_CANNOT_UNREGISTER_A_NULL_CLASS.toLocalizedString());
+          "Cannot unregister a null class");
-          LocalizedStrings.InternalInstantiator_CLASS_0_WAS_NOT_REGISTERED_WITH_ID_1
-              .toLocalizedString(new Object[] {c.getName(), Integer.valueOf(classId)}));
+          String.format("Class  %s  was not registered with id  %s",
+              new Object[] {c.getName(), Integer.valueOf(classId)}));
-          if (cache != null && cache.getLoggerI18n() != null
-              && cache.getLoggerI18n().infoEnabled()) {
-            cache.getLoggerI18n().info(
-                LocalizedStrings.InternalInstantiator_COULD_NOT_LOAD_INSTANTIATOR_CLASS_0,
-                new Object[] {cnfe.getMessage()});
+          if (cache != null && cache.getLogger() != null
+              && cache.getLogger().infoEnabled()) {
+            cache.getLogger().info(
+                String.format("Could not load instantiator class: %s", cnfe.getMessage()));
-          LocalizedStrings.InternalInstantiator_0_DOES_NOT_EXTEND_INSTANTIATOR
-              .toLocalizedString(instantiatorClass.getName()));
+          String.format("%s  does not extend Instantiator.",
+              instantiatorClass.getName()));
-        StringId msg =
-            LocalizedStrings.InternalInstantiator_CLASS_0_DOES_NOT_HAVE_A_TWOARGUMENT_CLASS_INT_CONSTRUCTOR;
+        String msg =
+            "Class %s does not have a two-argument (Class, int) constructor.";
-              LocalizedStrings.InternalInstantiator_CLASS_0_DOES_NOT_HAVE_A_TWOARGUMENT_CLASS_INT_CONSTRUCTOR_IT_IS_AN_INNER_CLASS_OF_1_SHOULD_IT_BE_A_STATIC_INNER_CLASS;
+              "Class %s does not have a two-argument (Class, int) constructor. It is an inner class of %s. Should it be a static inner class?";
-        throw new IllegalArgumentException(msg.toLocalizedString(msgArgs));
+        throw new IllegalArgumentException(String.format(msg, msgArgs));
-          LocalizedStrings.InternalInstantiator_COULD_NOT_ACCESS_ZEROARGUMENT_CONSTRUCTOR_OF_0
-              .toLocalizedString(instantiatorClass.getName()));
+          String.format("Could not access zero-argument constructor of  %s",
+              instantiatorClass.getName()));
-          LocalizedStrings.InternalInstantiator_COULD_NOT_INSTANTIATE_AN_INSTANCE_OF_0
-              .toLocalizedString(instantiatorClass.getName()));
+          String.format("Could not instantiate an instance of  %s",
+              instantiatorClass.getName()));
-          LocalizedStrings.InternalInstantiator_WHILE_INSTANTIATING_AN_INSTANCE_OF_0
-              .toLocalizedString(instantiatorClass.getName()));
+          String.format("While instantiating an instance of  %s",
+              instantiatorClass.getName()));
-          if (cache != null && cache.getLoggerI18n() != null
-              && cache.getLoggerI18n().infoEnabled()) {
-            cache.getLoggerI18n().info(
-                LocalizedStrings.InternalInstantiator_COULD_NOT_LOAD_INSTANTIATOR_CLASS_0,
-                new Object[] {cnfe.getMessage()});
+          if (cache != null && cache.getLogger() != null
+              && cache.getLogger().infoEnabled()) {
+            cache.getLogger().info(
+                String.format("Could not load instantiator class: %s",
+                    cnfe.getMessage()));
-              LocalizedStrings.InternalInstantiator_COULD_NOT_LOAD_INSTANTIATOR_CLASS_0
-                  .toLocalizedString(ex));
+              String.format("Could not load instantiator class: %s",
+                  ex));
-              LocalizedStrings.InternalInstantiator_COULD_NOT_LOAD_INSTANTIATED_CLASS_0
-                  .toLocalizedString(ex));
+              String.format("Could not load instantiated class: %s",
+                  ex));
-      return LocalizedStrings.InternalInstantiator_REGISTER_INSTANTIATOR_0_OF_CLASS_1_THAT_INSTANTIATES_A_2
-          .toLocalizedString(
-              new Object[] {Integer.valueOf(this.id), instatiatorName, instatiatedName});
+      return String.format("Register Instantiator %s of class %s that instantiates a %s",
+
+          new Object[] {Integer.valueOf(this.id), instatiatorName, instatiatedName});
-      logger.info(LocalizedMessage.create(LocalizedStrings.InternalInstantiator_REGISTERED,
-          new Object[] {Integer.valueOf(instantiator.getId()),
-              instantiator.getInstantiatedClass().getName()}));
+      logger
+          .info("Instantiator registered with id {} class {}",
+              Integer.valueOf(instantiator.getId()),
+              instantiator.getInstantiatedClass().getName());
-      logger.info(LocalizedMessage.create(LocalizedStrings.InternalInstantiator_REGISTERED_HOLDER,
-          new Object[] {Integer.valueOf(holder.getId()), holder.getInstantiatedClassName()}));
+      logger.info("Instantiator registered with holder id {} class {}",
+          Integer.valueOf(holder.getId()), holder.getInstantiatedClassName());

MOV12 MOV44 INS44 MOV44 MOV32 INS43 INS42 INS60 MOV21 UPD43 MOV43 MOV42 UPD42 INS42 INS45 MOV32 MOV32 INS45 INS45 UPD42 UPD42 INS45 MOV32 MOV32 INS45 MOV14 INS42 MOV43 INS59 MOV42 UPD42 UPD42 UPD42 INS45 MOV32 MOV32 UPD42 UPD42 INS45 MOV32 MOV32 MOV32 UPD42 INS42 INS45 UPD42 INS42 INS45 INS42 MOV14 UPD42 INS42 INS45 UPD42 UPD42 INS45 MOV32 MOV32 UPD42 INS42 INS45 UPD43 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 INS32 UPD42 INS45 UPD42 INS42 INS45 UPD42 INS32 INS42 MOV32 UPD42 INS42 UPD42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS45 UPD42 INS32 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS45 INS32 UPD42 UPD42 INS42 INS42 INS45 INS32 UPD42 INS42 INS45 MOV42 MOV42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32 DEL32 DEL42 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL32 DEL4 DEL3 DEL40 DEL40 DEL40 DEL42 DEL59 DEL60 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL32 DEL4 DEL3 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32 DEL40 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32