GEODE-2000 client should see server-bind-address in event memberId

The previous fix for this caused confusion as it changed the server
memberId that is used in other places and should remain unchanged.
This change set alters just the listener-invocation code in the client
cache so that client events are based on the ServerLocation information
returned by the Locator or added to the connection pool by applications.

Udo worked with me on this and we found the listener invocation code to
be somewhat convoluted, mixing server-side notification about clients
with client-side notification about servers in the same code.  This
lead to a bit of refactoring in InternalClientMembership to separate the two.

A number of changes had to be made in test code.  Some tests were
requiring that client-side listeners see the server's exact member
ID which is no longer true since the ID being fabricated out of a
ServerLocation doesn't have as much detail as the true member ID and
so is not equal() to it.  Some other test code was creating
ServerLocation objects with non-existent host names.  This is
no longer allowed so we changed these tests to use a numeric IP address.

+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.net.SocketCreator;
+   * Notifies registered listeners that a Client member has connected
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientJoined(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.JOINED);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has left
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientLeft(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.LEFT);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has crashed
+   *
+   * @param clientId the representing the client
+   */
+  public static void notifyClientCrashed(final DistributedMember clientId) {
+    notifyListeners(clientId, true, EventType.CRASHED);
+  }
+
+
+
+  /**
+   * Notifies registered listeners that a Client member has connected
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerJoined(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.JOINED);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has left
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerLeft(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.LEFT);
+  }
+
+  /**
+   * Notifies registered listeners that a Client member has crashed
+   *
+   * @param location the address of the server
+   */
+  public static void notifyServerCrashed(final ServerLocation location) {
+    DistributedMember id = new InternalDistributedMember(location);
+    notifyListeners(id, false, EventType.CRASHED);
+  }
+
+
+
+  /**
-   *
+   * 
+   * @param typeOfEvent joined/left/crashed
-  public static void notifyJoined(final DistributedMember member, final boolean client) {
+  private static void notifyListeners(final DistributedMember member, final boolean client,
+      final EventType typeOfEvent) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_JOINED);
+      doNotifyClientMembershipListener(member, client, event, typeOfEvent);
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_JOINED);
-          }
+        queuedExecutor.execute(() -> {
+          doNotifyClientMembershipListener(member, client, event, typeOfEvent);
-
-  /**
-   * Notifies registered listeners that a member has left. The departed member may be a client
-   * previously connected to this process or a server that this process was connected to.
-   *
-   * @param member the <code>DistributedMember</code>
-   * @param client true if the member is a client; false if server
-   */
-  public static void notifyLeft(final DistributedMember member, final boolean client) {
-    startMonitoring();
-    ThreadPoolExecutor queuedExecutor = executor;
-    if (queuedExecutor == null) {
-      return;
-    }
-
-
-    final ClientMembershipEvent event = new InternalClientMembershipEvent(member, client);
-    if (forceSynchronous) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_LEFT);
-    } else {
-      try {
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_LEFT);
-          }
-        });
-      } catch (RejectedExecutionException e) {
-        // executor must have been shutdown
-      }
-    }
-  }
-
-
-  /**
-   * Notifies registered listeners that a member has crashed. The departed member may be a client
-   * previously connected to this process or a server that this process was connected to.
-   *
-   * @param member the <code>DistributedMember</code>
-   * @param client true if the member is a client; false if server
-   */
-  public static void notifyCrashed(final DistributedMember member, final boolean client) {
-    ThreadPoolExecutor queuedExecutor = executor;
-    if (queuedExecutor == null) {
-      return;
-    }
-
-    final ClientMembershipEvent event = new InternalClientMembershipEvent(member, client);
-    if (forceSynchronous) {
-      doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_CRASHED);
-    } else {
-
-      try {
-        queuedExecutor.execute(new Runnable() {
-          public void run() {
-            doNotifyClientMembershipListener(member, client, event, EventType.CLIENT_CRASHED);
-          }
-        });
-      } catch (RejectedExecutionException e) {
-        // executor must have been shutdown
-      }
-    }
-  }
-
-        if (eventType.equals(EventType.CLIENT_JOINED)) {
+        if (eventType.equals(EventType.JOINED)) {
-        } else if (eventType.equals(EventType.CLIENT_LEFT)) {
+        } else if (eventType.equals(EventType.LEFT)) {
-   * Internal implementation of ClientMembershipEvent.
+   * Internal implementation of ClientMembershipEvent. This class is used in both clients and
+   * servers to notify listeners about events concerning client/server communications. In servers
+   * listeners are notified about clients connecting/disconnecting. In clients listeners notified
+   * about new connections being formed to servers. The instance variable "client" is used to
+   * distinguish between the two.
+
+    /**
+     * If true this means that a client has joined/left/crashed.
+     * <p>
+     * If false this means that a server has joined/left/crashed
+     */
-    /** Constructs new instance of event */
-    protected InternalClientMembershipEvent(DistributedMember member, boolean client) {
+    protected InternalClientMembershipEvent(DistributedMember member, boolean isClient) {
-      this.client = client;
+      this.client = isClient;
-    CLIENT_JOINED, CLIENT_LEFT, CLIENT_CRASHED
+    JOINED, LEFT, CRASHED

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 MOV83 MOV83 MOV39 UPD42 MOV42 INS44 INS8 INS29 MOV83 INS83 MOV39 UPD42 MOV42 INS44 MOV8 MOV29 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 MOV83 INS83 MOV39 INS42 INS44 MOV8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 MOV29 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 INS44 INS8 INS65 INS65 INS83 INS43 INS42 MOV21 INS65 INS65 INS83 INS43 INS42 UPD42 MOV21 INS65 INS65 INS83 INS43 INS42 INS60 INS21 INS65 INS65 INS83 UPD43 MOV43 UPD42 MOV42 INS60 INS21 UPD43 UPD42 MOV60 INS21 INS65 INS83 INS43 INS42 MOV21 MOV60 MOV25 MOV60 MOV25 INS29 UPD42 UPD42 UPD42 INS66 INS42 INS66 UPD42 MOV42 INS66 INS42 INS66 INS42 UPD66 UPD42 UPD66 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS66 INS42 INS66 UPD42 INS43 INS59 INS32 UPD66 UPD42 UPD66 UPD42 UPD43 INS32 INS42 INS66 UPD42 MOV42 UPD66 INS66 INS66 INS66 INS66 INS65 UPD42 UPD42 UPD42 INS9 UPD40 UPD42 UPD42 INS9 UPD40 UPD42 UPD42 INS9 UPD40 INS42 INS42 INS14 UPD42 MOV42 INS42 INS9 UPD40 MOV40 INS42 INS42 INS14 INS42 INS42 INS9 INS40 UPD42 UPD42 INS14 INS42 INS42 INS9 INS40 INS66 INS66 INS66 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS86 UPD40 INS8 UPD40 MOV21 INS42 DEL42 DEL42 DEL42 DEL42 DEL66 DEL42 DEL66 DEL65 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL66 DEL42 DEL66 DEL65 DEL42 DEL40 DEL40 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL8 DEL42 DEL42 DEL42 DEL43 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL8 DEL42 DEL42 DEL42 DEL43 DEL42 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31 DEL66 DEL65 DEL29