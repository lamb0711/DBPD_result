GEODE-420: Added SSLConfigurationFactory to have a single location that determines the SSLConfiguration. Amended all affected classes

+import com.gemstone.gemfire.internal.admin.SSLConfig;
-  private Map<String, SocketCreator> socketCreators = new HashMap<>();
+  private Map<SSLEnabledComponent, SocketCreator> socketCreators = new HashMap<>();
+    SSLConfigurationFactory.setDistributionConfig(this.distributionConfig);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.CLUSTER, null);
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.CLUSTER, distributionConfig.getClusterSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.CLUSTER);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.CLUSTER, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.SERVER, null, distributionConfig.getServerSSLEnabled(), distributionConfig
-        .getServerSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getServerSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getServerSSLCiphers()), distributionConfig.getServerSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.SERVER, distributionConfig.getServerSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.SERVER);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.SERVER, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.GATEWAY, null, distributionConfig.getGatewaySSLEnabled(), distributionConfig
-        .getGatewaySSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getGatewaySSLProtocols()), createStringArrayFromString(distributionConfig
-        .getGatewaySSLCiphers()), distributionConfig.getGatewaySSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.GATEWAY, distributionConfig.getGatewaySSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.GATEWAY);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.GATEWAY, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.JMX, null, distributionConfig.getJmxManagerSSLEnabled(), distributionConfig
-        .getJmxManagerSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getJmxManagerSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getJmxManagerSSLCiphers()), distributionConfig.getJmxSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.JMX, distributionConfig.getJMXManagerSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.JMX);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.JMX, sslConfigForComponent);
-    DistributionConfig distributionConfig = getInstance().distributionConfig;
-    if (distributionConfig.getSSLEnabledComponents().length == 0) {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.HTTP_SERVICE, null, distributionConfig.getHttpServiceSSLEnabled(), distributionConfig
-        .getHttpServiceSSLRequireAuthentication(), createStringArrayFromString(distributionConfig.getHttpServiceSSLProtocols()), createStringArrayFromString(distributionConfig
-        .getHttpServiceSSLCiphers()), distributionConfig.getHttpServiceSSLProperties());
-    } else {
-      return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponents.HTTP_SERVICE, distributionConfig.getHTTPServiceSSLAlias());
-    }
+    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(SSLEnabledComponent.HTTP_SERVICE);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(SSLEnabledComponent.HTTP_SERVICE, sslConfigForComponent);
-  private SocketCreator getSSLSocketCreator(String sslComponent,
-                                            String alias,
-                                            DistributionConfig distributionConfig,
-                                            final boolean useSSL,
-                                            final boolean needClientAuth,
-                                            final String[] protocols,
-                                            final String[] ciphers,
-                                            final Properties props) {
-    if (useSSL) {
+  private SocketCreator getSSLSocketCreator(final SSLEnabledComponent sslComponent, final DistributionConfig distributionConfig, final SSLConfig sslConfig) {
+    if (sslConfig.isEnabled()) {
-        return createSSLSocketCreator(SSLEnabledComponents.ALL, alias, useSSL, needClientAuth, protocols, ciphers, props);
-      } else if (distributionConfig.getSSLEnabledComponents().length == 0 || ArrayUtils.contains(distributionConfig.getSSLEnabledComponents(), sslComponent)) {
-        return createSSLSocketCreator(sslComponent, alias, useSSL, needClientAuth, protocols, ciphers, props);
+        return createSSLSocketCreator(SSLEnabledComponent.ALL, sslConfig);
+      } else if (ArrayUtils.contains(distributionConfig.getSSLEnabledComponents(), sslComponent.getConstant())) {
+        return createSSLSocketCreator(sslComponent, sslConfig);
-    return createSSLSocketCreator(NON_SSL, null, false, false, null, null, null);
+    return createSSLSocketCreator(SSLEnabledComponent.NONE, sslConfig);
-  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(String sslEnabledComponent, String alias) {
-    return getOrCreateSocketCreatorForSSLEnabledComponent(sslEnabledComponent, alias, distributionConfig.getClusterSSLEnabled(), distributionConfig.getClusterSSLRequireAuthentication(), createStringArrayFromString(distributionConfig
-      .getClusterSSLProtocols()), createStringArrayFromString(distributionConfig.getClusterSSLCiphers()), distributionConfig.getClusterSSLProperties());
-  }
-
-  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(String sslEnabledComponent,
-                                                                       String alias,
-                                                                       boolean useSSL,
-                                                                       boolean needClientAuth,
-                                                                       String[] protocols,
-                                                                       String[] ciphers,
-                                                                       Properties props) {
+  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(final SSLEnabledComponent sslEnabledComponent, final SSLConfig sslConfig) {
-      return getSSLSocketCreator(sslEnabledComponent, alias, distributionConfig, useSSL, needClientAuth, protocols, ciphers, props);
+      return getSSLSocketCreator(sslEnabledComponent, distributionConfig, sslConfig);
-  private SocketCreator createSSLSocketCreator(final String sslEnableComponent,
-                                               final String alias,
-                                               final boolean useSSL,
-                                               final boolean needClientAuth,
-                                               final String[] protocols,
-                                               final String[] ciphers,
-                                               final Properties props) {
+  private SocketCreator createSSLSocketCreator(final SSLEnabledComponent sslEnableComponent, final SSLConfig sslConfig) {
-    if (useSSL) {
-      socketCreator = new SocketCreator(useSSL, needClientAuth, protocols, ciphers, props, alias);
+    if (sslConfig.isEnabled()) {
+      socketCreator = new SocketCreator(sslConfig);
-      socketCreator = new SocketCreator();
-      addSocketCreatorForComponent(NON_SSL, socketCreator);
+      socketCreator = new SocketCreator(sslConfig);
+      addSocketCreatorForComponent(SSLEnabledComponent.NONE, socketCreator);
-  private synchronized void addSocketCreatorForComponent(String sslEnabledComponent, SocketCreator socketCreator) {
+  private synchronized void addSocketCreatorForComponent(SSLEnabledComponent sslEnabledComponent, SocketCreator socketCreator) {
-  private synchronized SocketCreator getSocketCreatorForComponent(String sslEnabledComponent) {
+  private synchronized SocketCreator getSocketCreatorForComponent(SSLEnabledComponent sslEnabledComponent) {
-   * @return
+   * @return SocketCreator for the defined properties
-    return new SocketCreator(useSSL, needClientAuth, createStringArrayFromString(protocols), createStringArrayFromString(ciphers), gfsecurityProps, null);
+    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(useSSL, needClientAuth, protocols, ciphers, gfsecurityProps, null);
+    return new SocketCreator(sslConfig);
+    SSLConfigurationFactory.close();

INS26 INS40 UPD74 MOV43 MOV43 UPD43 INS21 INS60 MOV41 INS60 MOV41 INS60 MOV41 INS60 MOV41 INS60 MOV41 INS83 UPD43 INS83 INS43 UPD42 INS83 UPD43 INS83 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 INS60 INS41 INS21 UPD42 INS32 UPD43 MOV43 INS59 UPD43 MOV43 INS59 UPD43 MOV43 INS59 UPD43 MOV43 INS59 UPD43 MOV43 INS59 UPD42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS66 INS43 INS59 INS14 INS32 INS42 INS42 INS22 UPD42 UPD42 MOV42 INS32 MOV32 UPD40 UPD42 MOV42 UPD42 UPD42 MOV42 INS32 MOV32 UPD40 UPD42 MOV42 UPD42 INS42 INS32 MOV32 UPD40 UPD42 MOV42 UPD42 INS42 INS32 MOV32 UPD40 UPD42 MOV42 UPD42 INS42 INS32 MOV32 UPD40 UPD42 MOV42 INS42 INS42 INS40 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS32 MOV43 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 UPD40 MOV40 INS42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS33 INS32 UPD42 INS40 MOV42 MOV42 MOV32 INS32 MOV43 UPD42 INS42 UPD40 UPD42 MOV42 INS42 INS42 UPD42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL42 DEL33 DEL32 DEL41 DEL8 DEL8 DEL25 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL42 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL32 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL32 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL32 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL43 DEL85 DEL5 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL9 DEL9 DEL33 DEL33 DEL33 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL33 DEL14 DEL41