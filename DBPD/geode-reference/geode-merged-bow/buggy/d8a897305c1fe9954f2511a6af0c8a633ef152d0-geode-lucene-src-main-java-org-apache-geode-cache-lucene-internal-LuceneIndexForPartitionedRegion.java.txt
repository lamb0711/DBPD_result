GEODE-2643: Combine chunk and file region into a single region

* removed file and chunk count from stat
* removed tests that were doing checks against chunk bucketRegions

-import org.apache.geode.cache.lucene.internal.filesystem.ChunkKey;
-  protected Region<String, File> fileRegion;
-  protected Region<ChunkKey, byte[]> chunkRegion;
+  protected Region fileAndChunkRegion;
-  public static final String CHUNKS_REGION_SUFFIX = ".chunks";
-    // create PR fileRegion, but not to create its buckets for now
+    // create PR fileAndChunkRegion, but not to create its buckets for now
-    if (!fileRegionExists(fileRegionName)) {
-      fileRegion =
-          createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
-    }
+
-    final String chunkRegionName = createChunkRegionName();
-    if (!chunkRegionExists(chunkRegionName)) {
-      chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes,
-          chunkRegionName, regionAttributes, lucenePrimaryBucketListener);
+
+    if (!fileRegionExists(fileRegionName)) {
+      fileAndChunkRegion = createFileRegion(regionShortCut, fileRegionName, partitionAttributes,
+          regionAttributes, lucenePrimaryBucketListener);
-    fileSystemStats.setFileSupplier(() -> (int) getFileRegion().getLocalSize());
-    fileSystemStats.setChunkSupplier(() -> (int) getChunkRegion().getLocalSize());
-    fileSystemStats.setBytesSupplier(() -> getChunkRegion().getPrStats().getDataStoreBytesInUse());
+
+    fileSystemStats
+        .setBytesSupplier(() -> getFileAndChunkRegion().getPrStats().getDataStoreBytesInUse());
-  public PartitionedRegion getFileRegion() {
-    return (PartitionedRegion) fileRegion;
-  }
-
-  public PartitionedRegion getChunkRegion() {
-    return (PartitionedRegion) chunkRegion;
+  public PartitionedRegion getFileAndChunkRegion() {
+    return (PartitionedRegion) fileAndChunkRegion;
-    return cache.<String, File>getRegion(fileRegionName) != null;
+    return cache.getRegion(fileRegionName) != null;
-      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes) {
+      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes,
+      PartitionListener listener) {
-        regionAttributes, null);
+        regionAttributes, listener);
-  boolean chunkRegionExists(String chunkRegionName) {
-    return cache.<ChunkKey, byte[]>getRegion(chunkRegionName) != null;
-  }
-
-  Region<ChunkKey, byte[]> createChunkRegion(final RegionShortcut regionShortCut,
-      final String fileRegionName, final PartitionAttributes partitionAttributes,
-      final String chunkRegionName, final RegionAttributes regionAttributes,
-      final PartitionListener lucenePrimaryBucketListener) {
-    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes,
-        regionAttributes, lucenePrimaryBucketListener);
-  }
-
-  public String createChunkRegionName() {
-    return LuceneServiceImpl.getUniqueIndexRegionName(indexName, regionPath, CHUNKS_REGION_SUFFIX);
-  }
-
-    PartitionAttributesFactory partitionAttributesFactory =
-        new PartitionAttributesFactory<String, File>();
+    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory();
-    // Destroy the chunk region (colocated with the file region)
-    // localDestroyRegion can't be used because locally destroying regions is not supported on
-    // colocated regions
-    if (!chunkRegion.isDestroyed()) {
-      chunkRegion.destroyRegion();
-      if (logger.isDebugEnabled()) {
-        logger.debug("Destroyed chunkRegion=" + chunkRegion.getName());
-      }
-    }
-
-    if (!fileRegion.isDestroyed()) {
-      fileRegion.destroyRegion();
+    if (!fileAndChunkRegion.isDestroyed()) {
+      fileAndChunkRegion.destroyRegion();
-        logger.debug("Destroyed fileRegion=" + fileRegion.getName());
+        logger.debug("Destroyed fileAndChunkRegion=" + fileAndChunkRegion.getName());

MOV43 UPD42 INS44 UPD42 MOV43 INS42 MOV38 MOV43 UPD42 INS42 MOV43 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL39 DEL42 DEL32 DEL42 DEL32 DEL11 DEL86 DEL32 DEL21 DEL42 DEL42 DEL39 DEL42 DEL32 DEL42 DEL32 DEL11 DEL86 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL33 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32