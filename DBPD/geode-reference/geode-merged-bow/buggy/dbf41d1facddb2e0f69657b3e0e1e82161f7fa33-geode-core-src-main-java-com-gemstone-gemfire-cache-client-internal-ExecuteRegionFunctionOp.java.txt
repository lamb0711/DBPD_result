GEODE-1760 Sending partial results to users ResultCollector

For non-HA functions on the client, results will now be passed to the
users result collector, even if some nodes fail due to a bucket movement
or cache close.

Signed-off-by: Dan Smith <upthewaterspout@apache.org>

+import com.gemstone.gemfire.cache.CacheClosedException;
+import com.gemstone.gemfire.cache.execute.FunctionInvocationTargetException;
+import com.gemstone.gemfire.internal.cache.execute.BucketMovedException;
+      
-    private final boolean executeOnBucketSet;
+    private final boolean executeOnBucketSet;
+    
+    private final boolean isHA;
+
+    private FunctionException functionException;
+      this.isHA = function.isHA();
+      this.isHA = isHA;
+      this.isHA = op.isHA;
+              
+              // if the function is HA throw exceptions
+              // if nonHA collect these exceptions and wait till you get last chunk
+                  if (this.functionException == null) {
+                    this.functionException = (FunctionException)result;
+                  }
+                  this.functionException.addException((FunctionException)result);
-                executeFunctionResponseMsg.clear();
-                throw ex;
+                else if(((FunctionException) result).getCause() instanceof FunctionInvocationTargetException){
+                  if (this.functionException == null) {
+                    this.functionException = ex;
+                  }
+                  this.functionException.addException(ex.getCause());
+                }
+                else if(result instanceof FunctionInvocationTargetException){
+                  if (this.functionException == null) {
+                    this.functionException = new FunctionException((FunctionInvocationTargetException)result);
+                  }
+                  this.functionException.addException(ex);
+                }
+                else if(result instanceof InternalFunctionInvocationTargetException){
+                  if (this.functionException == null) {
+                    this.functionException = new FunctionException((InternalFunctionInvocationTargetException)result);
+                  }
+                  this.functionException.addException(ex);
+                }
+                else{
+                  if (this.functionException == null) {
+                    this.functionException = ex;
+                  }
+                  this.functionException.addException(ex);
+                }
+                if (isHA) {
+                  executeFunctionResponseMsg.clear();
+                  throw ex;
+                }
-                String s = "While performing a remote " + getOpName();
-                executeFunctionResponseMsg.clear();
-                throw new ServerOperationException(s, (Throwable)result);
+                Throwable t = (Throwable)result;
+                boolean throwServerOp = false;
+                  if (this.functionException == null) {
+                    if(result instanceof BucketMovedException){
+                      FunctionInvocationTargetException fite;
+                      if(isHA){
+                        fite = new InternalFunctionInvocationTargetException(
+                                              ((BucketMovedException)result).getMessage());
+                      }else {
+                        fite = new FunctionInvocationTargetException(
+                            ((BucketMovedException)result).getMessage());
+                      }
+                      this.functionException =  new FunctionException(fite);
+                      this.functionException.addException(fite);
+                    }
+                    else if (result instanceof CacheClosedException) {
+                      FunctionInvocationTargetException fite;
+                      if(isHA) {
+                        fite = new InternalFunctionInvocationTargetException(((CacheClosedException)result).getMessage());
+                      }
+                      else{
+                        fite = new FunctionInvocationTargetException(((CacheClosedException)result).getMessage());
+                      }
+                      if (resultResponse instanceof ArrayList) {
+                        DistributedMember memberID = (DistributedMember) ((ArrayList) resultResponse)
+                            .get(1);
+                        this.failedNodes.add(memberID.getId());
+                      }                   
+                      this.functionException = new FunctionException(fite);
+                      this.functionException.addException(fite);
+                    }
+                    else {
+                      throwServerOp = true;
+                      this.functionException = new FunctionException(t);
+                      this.functionException.addException(t);
+                    }
+                  } else {
+                    this.functionException.addException(t);
+                  }
+                  
+                  if (isHA) {
+                    if (throwServerOp) {
+                      String s = "While performing a remote " + getOpName();
+                      executeFunctionResponseMsg.clear();
+                      throw new ServerOperationException(s, this.functionException);
+                    } else {
+                       throw this.functionException;
+                    }
+                  }
+            // add all the exceptions here.
+            if (this.functionException != null) {
+              throw this.functionException;
+            }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS42 INS42 INS42 INS21 INS21 INS21 INS7 INS7 INS7 INS22 INS32 INS22 INS42 INS22 INS40 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS25 INS27 INS8 INS22 INS33 INS53 INS25 INS52 INS42 INS22 INS25 MOV62 INS8 MOV8 INS52 INS42 INS25 INS42 INS8 INS60 INS60 INS25 INS25 MOV62 MOV8 INS25 MOV21 MOV53 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS8 INS25 INS21 INS62 INS8 INS25 INS42 INS42 MOV11 INS42 INS9 INS22 INS33 INS25 INS21 INS25 INS27 INS8 INS32 INS32 INS43 INS25 INS21 INS62 INS8 INS25 INS52 INS42 INS62 INS8 INS25 INS32 INS42 MOV8 INS8 INS22 INS33 INS21 INS22 INS42 INS11 INS36 INS42 INS42 INS27 INS8 INS32 INS42 INS43 INS25 INS21 INS62 INS8 INS8 INS42 INS43 INS60 INS25 INS21 INS21 INS62 INS8 INS8 INS22 INS42 INS42 INS53 INS52 INS42 INS7 INS52 INS42 INS43 INS42 INS11 INS22 INS33 INS21 INS22 INS42 INS32 INS42 INS27 INS8 INS32 INS42 INS43 INS25 INS21 INS25 INS21 INS42 INS43 INS59 INS42 INS8 INS8 INS7 INS32 INS42 INS43 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS52 INS42 INS22 INS22 INS11 INS42 INS43 INS42 INS52 INS42 INS7 INS52 INS42 INS42 INS42 INS22 INS33 INS21 INS22 INS42 INS42 INS42 INS27 INS8 INS32 INS27 INS8 INS32 INS42 INS42 INS21 INS21 INS22 INS14 INS22 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS62 INS8 INS7 INS32 INS7 INS7 INS32 INS22 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS22 INS42 INS52 INS42 INS7 INS52 INS42 INS22 INS33 INS21 INS22 INS42 INS42 INS22 INS33 INS21 INS22 INS42 INS42 INS7 INS7 INS52 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS21 INS21 INS42 INS43 INS60 INS21 INS22 INS14 INS22 INS42 INS42 INS42 INS9 INS22 INS14 INS22 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS22 INS14 INS52 INS42 INS7 INS52 INS42 INS52 INS42 INS7 INS52 INS42 INS42 INS14 INS42 INS14 INS42 INS7 INS7 INS42 INS43 INS59 INS32 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS43 INS11 INS22 INS14 INS22 INS42 INS43 INS32 INS43 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS11 INS22 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS43 INS11 INS52 INS42 INS42 INS36 INS42 INS42 INS36 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS11 INS11 INS42 INS36 INS42 INS42 INS36 INS42 INS42 INS36 INS42 INS34 INS42 INS43 INS42 INS43 INS42 INS11 INS11 INS11 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 DEL25 DEL25