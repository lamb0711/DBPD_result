Revert "GEODE-6973: Use cachelistener to synchronize typeToId with IdToType (#4014)"

This reverts commit cdca78889a052f78f44dac945ea3f5b2ca32305e.
Click too fast and the message is messy. Will re-merge.

-  private LocalReverseMap localReverseMap = new LocalReverseMap();
+  /**
+   * This map serves two purposes. It lets us look up an id based on a type, if we previously found
+   * that type in the region. And, if a type is present in this map, that means we read the type
+   * while holding the dlock, which means the type was distributed to all members.
+   */
+  private final Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
+
+  private final Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
-        Object key = event.getKey();
-        if (value != null) {
-          updateLocalMaps(key, value);
+        if (value instanceof PdxType) {
+          updateClassToTypeMap((PdxType) value);
-
-    buildTypeToIdFromIdToType();
-    Integer existingId = localReverseMap.checkIfExistsInLocal(newType);
+    Integer existingId = typeToId.get(newType);
-      if (localReverseMap.shouldReloadFromRegion()) {
-        buildTypeToIdFromIdToType();
-      }
-      localReverseMap.flushLocalMap();
-      // double check if my type is in region in case the typeToId map has been updated while
-      // waiting to obtain a lock
-      existingId = localReverseMap.checkIfExistsInLocal(newType);
-      if (existingId != null) {
-        return existingId;
+      int id = getExistingIdForType(newType);
+      if (id != -1) {
+        return id;
-      int id = allocateTypeId(newType);
+      id = allocateTypeId(newType);
+
+      typeToId.put(newType, id);
+
-      localReverseMap.flushLocalMap();
-  private void buildTypeToIdFromIdToType() {
+  /** Should be called holding the dlock */
+  private int getExistingIdForType(PdxType newType) {
+      int result = -1;
-        if (v instanceof PdxType) {
+        if (k instanceof EnumId) {
+          EnumId id = (EnumId) k;
+          EnumInfo info = (EnumInfo) v;
+          enumToId.put(info, id);
+        } else {
-            if (totalPdxTypeIdInDS >= MAX_TYPE_ID) {
-              throw new InternalGemFireError(
-                  "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
-                      + MAX_TYPE_ID);
-            }
+          }
+
+          typeToId.put(foundType, id);
+          if (foundType.equals(newType)) {
+            result = foundType.getTypeId();
-        localReverseMap.save(k, v, false);
+      if (totalPdxTypeIdInDS == MAX_TYPE_ID) {
+        throw new InternalGemFireError(
+            "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
+                + MAX_TYPE_ID);
+      }
+      return result;
+          enumToId.put(info, id);
+        } else {
+          typeToId.put((PdxType) v, (Integer) k);
-        localReverseMap.save(k, v, false);
-    final EnumId existingId = localReverseMap.checkIfExistsInLocal(newInfo);
+    final EnumId existingId = enumToId.get(newInfo);
-      localReverseMap.flushLocalMap();
-      localReverseMap.save(id, newInfo, false);
+      enumToId.put(newInfo, id);
-      localReverseMap.flushLocalMap();
-  private void updateLocalMaps(Object key, Object value) {
-    localReverseMap.save(key, value, true);
-    if (value instanceof PdxType) {
-      PdxType type = (PdxType) value;
+  private void updateClassToTypeMap(PdxType type) {
+    if (type != null) {
-
-  @VisibleForTesting
-  public int getTypeToIdSize() {
-    return localReverseMap.typeToIdSize();
-  }
-
-  @VisibleForTesting
-  public int getEnumToIdSize() {
-    return localReverseMap.enumToIdSize();
-  }
-
-  class LocalReverseMap {
-    /**
-     * When a new pdxType or a new enumInfo is added to idToType region, its
-     * listener will add the new type to the pendingTypeToId first, to make sure
-     * the distribution finished.
-     * Then any member who wants to use this new pdxType has to get the dlock to
-     * flush the pendingTypeToId map into typeToId. This design to guarantee that
-     * when using the new pdxType, it should have been distributed to all members.
-     */
-    private final Map<PdxType, Integer> pendingTypeToId =
-        Collections.synchronizedMap(new HashMap<>());
-    private final Map<EnumInfo, EnumId> pendingEnumToId =
-        Collections.synchronizedMap(new HashMap<>());
-
-    /**
-     * This map serves two purposes. It lets us look up an id based on a type, if we previously
-     * found
-     * that type in the region. And, if a type is present in this map, that means we read the type
-     * while holding the dlock, which means the type was distributed to all members.
-     */
-    private final Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
-
-    private final Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
-
-    void save(Object key, Object value, boolean isPending) {
-      if (value instanceof PdxType) {
-        PdxType type = (PdxType) value;
-        if (isPending) {
-          pendingTypeToId.put(type, (Integer) key);
-        } else {
-          typeToId.put(type, (Integer) key);
-        }
-      } else if (value instanceof EnumInfo) {
-        EnumInfo info = (EnumInfo) value;
-        if (isPending) {
-          pendingEnumToId.put(info, (EnumId) key);
-        } else {
-          enumToId.put(info, (EnumId) key);
-        }
-      }
-    }
-
-    int typeToIdSize() {
-      return typeToId.size();
-    }
-
-    int enumToIdSize() {
-      return enumToId.size();
-    }
-
-    Integer checkIfExistsInLocal(PdxType newType) {
-      return typeToId.get(newType);
-    }
-
-    EnumId checkIfExistsInLocal(EnumInfo newInfo) {
-      return enumToId.get(newInfo);
-    }
-
-    // The local maps should be loaded from the region if there is a mismatch in size between the
-    // region and all local maps
-    boolean shouldReloadFromRegion() {
-      return ((typeToId.size() + pendingTypeToId.size() + enumToId.size()
-          + pendingEnumToId.size()) != getIdToType().size());
-    }
-
-    void flushLocalMap() {
-      if (!pendingTypeToId.isEmpty()) {
-        typeToId.putAll(pendingTypeToId);
-        pendingTypeToId.clear();
-      }
-      if (!pendingEnumToId.isEmpty()) {
-        enumToId.putAll(pendingEnumToId);
-        pendingEnumToId.clear();
-      }
-    }
-  }

MOV23 MOV23 INS29 UPD39 UPD42 MOV44 MOV8 UPD42 MOV25 INS54 INS65 MOV60 MOV60 INS54 MOV43 UPD42 UPD66 MOV43 INS8 MOV8 INS66 MOV8 MOV8 MOV43 INS27 INS60 MOV25 MOV21 MOV21 MOV21 INS21 MOV41 INS60 INS70 MOV25 INS41 MOV42 MOV32 INS42 INS33 MOV42 UPD42 MOV42 INS39 INS59 INS7 INS32 INS39 INS59 MOV44 MOV32 INS8 UPD27 INS42 UPD42 MOV42 MOV42 INS42 INS32 UPD42 INS38 INS42 MOV32 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS38 MOV60 MOV60 MOV25 UPD42 UPD42 INS42 INS42 INS42 INS34 UPD42 INS34 INS8 INS8 UPD42 UPD43 INS60 INS60 INS21 INS21 INS25 INS21 INS21 MOV62 UPD42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS8 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS11 INS43 INS42 INS43 INS42 INS7 MOV43 INS42 MOV43 INS42 UPD42 MOV11 INS42 INS42 INS42 INS32 INS42 INS42 DEL66 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL59 DEL60 DEL8 DEL54 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL70 DEL54 DEL8 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL32 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL32 DEL59 DEL23 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL11 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL32 DEL42 DEL32 DEL27 DEL36 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55