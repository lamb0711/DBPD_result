GEODE-2676: fix NPE with ShowMetricsCommand.

+import java.util.HashMap;
+import java.util.Map;
-import org.apache.geode.management.internal.cli.json.GfJsonObject;
+import org.apache.geode.management.internal.cli.json.GfJsonException;
+
+
+  public CommandResultAssert tableHasRowWithValues(String... headersThenValues)
+      throws GfJsonException {
+    assertThat(headersThenValues.length % 2)
+        .describedAs("You need to pass even number of parameters.").isEqualTo(0);
+
+    int numberOfColumn = headersThenValues.length / 2;
+
+    String[] headers = Arrays.copyOfRange(headersThenValues, 0, numberOfColumn);
+    String[] expectedValues =
+        Arrays.copyOfRange(headersThenValues, numberOfColumn, headersThenValues.length);
+
+    Map<String, List<Object>> allValues = new HashMap<>();
+    int numberOfRows = -1;
+    for (String header : headers) {
+      List<Object> columnValues = actual.getCommandResult().getColumnValues(header);
+      if (numberOfRows > 0) {
+        assertThat(columnValues.size()).isEqualTo(numberOfRows);
+      }
+      numberOfRows = columnValues.size();
+      allValues.put(header, columnValues);
+    }
+
+    for (int rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {
+      Object[] rowValues = new Object[headers.length];
+      for (int columnIndex = 0; columnIndex < headers.length; columnIndex++) {
+        rowValues[columnIndex] = allValues.get(headers[columnIndex]).get(rowIndex);
+      }
+
+      // check if entire row is equal, but if not, continue to next row
+      if (Arrays.deepEquals(expectedValues, rowValues)) {
+        return this;
+      }
+    }
+
+    // did not find any matching rows, then this would pass only if we do not pass in any values
+    assertThat(headersThenValues.length).isEqualTo(0);
+    return this;
+  }
+
+  public CommandResultAssert tableHasRowCount(String anyColumnHeader, int rowSize) {
+    assertThat(actual.getCommandResult().getColumnValues(anyColumnHeader)).isEqualTo(rowSize);
+    return this;
+  }
+

INS26 INS26 INS40 INS40 UPD40 INS31 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS60 INS70 INS24 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS32 INS39 INS59 INS5 INS59 INS5 INS59 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS58 INS27 INS37 INS8 INS32 INS52 INS42 INS32 INS52 INS32 INS42 INS34 INS42 INS27 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS74 INS42 INS14 INS42 INS38 INS43 INS42 INS60 INS25 INS21 INS21 INS39 INS59 INS42 INS42 INS42 INS60 INS24 INS25 INS32 INS42 INS34 INS32 INS42 INS42 INS32 INS42 INS45 INS40 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS43 INS74 INS34 INS42 INS74 INS59 INS27 INS8 INS7 INS32 INS42 INS34 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS8 INS42 INS40 INS42 INS32 INS42 INS27 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS40 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS85 INS2 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42