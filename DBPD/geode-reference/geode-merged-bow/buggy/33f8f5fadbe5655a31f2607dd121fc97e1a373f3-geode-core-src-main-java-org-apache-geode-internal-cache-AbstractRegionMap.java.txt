Revert "GEODE-4957: fix race in concurrent create on region (#1750)" (#1812)

This reverts commit 65b52f28f4e11b9f5ec82b0e457fc0292132e5da.
+import org.apache.geode.cache.CacheWriter;
-import org.apache.geode.internal.cache.map.RegionMapPutContext;
+import org.apache.geode.internal.concurrent.MapCallbackAdapter;
+  private RegionEntry getOrCreateRegionEntry(Object ownerRegion, EntryEventImpl event, Object value,
+      MapCallbackAdapter<Object, Object, Object, Object> valueCreator, boolean onlyExisting,
+      boolean returnTombstone) {
+    Object key = event.getKey();
+    RegionEntry retVal = null;
+    retVal = getEntry(event);
+    if (onlyExisting) {
+      if (!returnTombstone && (retVal != null && retVal.isTombstone())) {
+        return null;
+      }
+      return retVal;
+    }
+    if (retVal != null) {
+      return retVal;
+    }
+    if (valueCreator != null) {
+      value = valueCreator.newValue(key, ownerRegion, value, null);
+    }
+    retVal = getEntryFactory().createEntry((RegionEntryContext) ownerRegion, key, value);
+    RegionEntry oldRe = putEntryIfAbsent(key, retVal);
+    if (oldRe != null) {
+      if (retVal instanceof OffHeapRegionEntry) {
+        ((OffHeapRegionEntry) retVal).release();
+      }
+      return oldRe;
+    }
+    return retVal;
+  }
+
-  public RegionEntry basicPut(EntryEventImpl event, final long unused, final boolean ifNew,
-      final boolean ifOld, final Object expectedOldValue, // only non-null if ifOld
-      final boolean requireOldValue, final boolean overwriteDestroyed)
+  public RegionEntry basicPut(EntryEventImpl event, final long lastModified, final boolean ifNew,
+      final boolean ifOld, Object expectedOldValue, // only non-null if ifOld
+      boolean requireOldValue, final boolean overwriteDestroyed)
-    final RegionMapPutContext putInfo = new RegionMapPutContext(owner, event, ifNew, ifOld,
-        overwriteDestroyed, requireOldValue, expectedOldValue);
-    runWhileLockedForCacheModification(event, () -> doBasicPut(putInfo));
-    if (putInfo.isCompleted()) {
-      return putInfo.getRegionEntry();
-    } else {
-      return null;
-    }
-  }
-  private void runWhileLockedForCacheModification(EntryEventImpl event, Runnable r) {
-    final LocalRegion owner = _getOwner();
+    boolean clearOccured = false;
+    if (owner == null) {
+      // "fix" for bug 32440
+      Assert.assertTrue(false, "The owner for RegionMap " + this + " is null for event " + event);
+    }
+    if (logger.isTraceEnabled(LogMarker.LRU_TOMBSTONE_COUNT_VERBOSE)
+        && !(owner instanceof HARegion)) {
+      logger.trace(LogMarker.LRU_TOMBSTONE_COUNT_VERBOSE,
+          "ARM.basicPut called for {} expectedOldValue={} requireOldValue={} ifNew={} ifOld={} initialized={} overwriteDestroyed={}",
+          event, expectedOldValue, requireOldValue, ifNew, ifOld, owner.isInitialized(),
+          overwriteDestroyed);
+    }
+
+    RegionEntry result = null;
+    long lastModifiedTime = 0;
+    // copy into local var to prevent race condition with setter
+    final CacheWriter cacheWriter = owner.basicGetWriter();
+    final boolean cacheWrite =
+        !event.isOriginRemote() && !event.isNetSearch() && event.isGenerateCallbacks()
+            && (cacheWriter != null || owner.hasServerProxy() || owner.scope.isDistributed());
+    /*
+     * For performance reason, we try to minimize object creation and do as much work as we can
+     * outside of synchronization, especially getting distribution advice.
+     */
+    final Set netWriteRecipients;
+    if (cacheWrite) {
+      if (cacheWriter == null && owner.scope.isDistributed()) {
+        netWriteRecipients =
+            ((DistributedRegion) owner).getCacheDistributionAdvisor().adviseNetWrite();
+      } else {
+        netWriteRecipients = null;
+      }
+    } else {
+      netWriteRecipients = null;
+    }
+
+    // mbid: this has been added to maintain consistency between the disk region
+    // and the region map after clear() has been called. This will set the
+    // reference of the diskSegmentRegion as a ThreadLocal so that if the diskRegionSegment
+    // is later changed by another thread, we can do the necessary.
+    boolean uninitialized = !owner.isInitialized();
+    boolean retrieveOldValueForDelta =
+        event.getDeltaBytes() != null && event.getRawNewValue() == null;
+    IndexManager oqlIndexManager = null;
-      r.run();
+      try {
+        // Fix for Bug #44431. We do NOT want to update the region and wait
+        // later for index INIT as region.clear() can cause inconsistency if
+        // happened in parallel as it also does index INIT.
+        oqlIndexManager = owner.getIndexManager();
+        if (oqlIndexManager != null) {
+          oqlIndexManager.waitForIndexInit();
+        }
+
+        // fix for bug #42169, replace must go to server if entry not on client
+        boolean replaceOnClient =
+            event.getOperation() == Operation.REPLACE && owner.getServerProxy() != null;
+        // Rather than having two different blocks for synchronizing oldRe
+        // and newRe, have only one block and synchronize re
+        RegionEntry re = null;
+        boolean eventRecorded = false;
+        boolean onlyExisting = ifOld && !replaceOnClient;
+
+        re = getOrCreateRegionEntry(owner, event,
+
+            Token.REMOVED_PHASE1, null, onlyExisting, false);
+        if (re == null) {
+          return null;
+        }
+        while (true) {
+          synchronized (re) {
+            // if the re goes into removed2 state, it will be removed
+            // from the map. otherwise we can append an event to it
+            // and change its state
+            if (re.isRemovedPhase2()) {
+              _getOwner().getCachePerfStats().incRetries();
+              getEntryMap().remove(event.getKey(), re);
+              re = getOrCreateRegionEntry(owner, event, Token.REMOVED_PHASE1, null, onlyExisting,
+                  false);
+              if (re == null) {
+                // this will happen when onlyExisting is true
+                return null;
+              }
+              continue;
+            } else {
+              @Released
+              Object oldValueForDelta = null;
+              if (retrieveOldValueForDelta) {
+                // defer the lruUpdateCallback to prevent a deadlock (see bug 51121).
+                final boolean disabled = disableLruUpdateCallback();
+                try {
+                  // Old value is faulted in from disk if not found in memory.
+                  oldValueForDelta = re.getValue(owner); // OFFHEAP: if we are synced on oldRe no
+                                                         // issue since we can use ARE's ref
+                } finally {
+                  if (disabled) {
+                    enableLruUpdateCallback();
+                  }
+                }
+              }
+
+              try {
+
+                event.setRegionEntry(re);
+                // set old value in event
+                setOldValueInEvent(event, re, cacheWrite, requireOldValue);
+                if (!continueUpdate(re, event, ifOld, replaceOnClient)) {
+                  return null;
+                }
+                // overwrite destroyed?
+                if (!continueOverwriteDestroyed(re, event, overwriteDestroyed, ifNew)) {
+                  return null;
+                }
+                // check expectedOldValue
+                if (!satisfiesExpectedOldValue(event, re, expectedOldValue, replaceOnClient)) {
+                  return null;
+                }
+                // invoke cacheWriter
+                invokeCacheWriter(re, event, cacheWrite, cacheWriter, netWriteRecipients,
+                    requireOldValue, expectedOldValue, replaceOnClient);
+
+                // notify index of an update
+                notifyIndex(re, true);
+                try {
+                  try {
+                    if ((cacheWrite && event.getOperation().isUpdate()) // if there is a
+                                                                        // cacheWriter, type of
+                                                                        // event has already been
+                                                                        // set
+                        || !re.isRemoved() || replaceOnClient) {
+                      // update
+                      updateEntry(event, requireOldValue, oldValueForDelta, re);
+                    } else {
+                      // create
+                      createEntry(event, owner, re);
+                    }
+                    owner.recordEvent(event);
+                    eventRecorded = true;
+                  } catch (RegionClearedException rce) {
+                    clearOccured = true;
+                    owner.recordEvent(event);
+                  } catch (ConcurrentCacheModificationException ccme) {
+                    VersionTag tag = event.getVersionTag();
+                    if (tag != null && tag.isTimeStampUpdated()) {
+                      // Notify gateways of new time-stamp.
+                      owner.notifyTimestampsToGateways(event);
+                    }
+                    throw ccme;
+                  }
+                  if (uninitialized) {
+                    event.inhibitCacheListenerNotification(true);
+                  }
+                  updateLru(clearOccured, re, event);
+
+                  lastModifiedTime = owner.basicPutPart2(event, re, !uninitialized,
+                      lastModifiedTime, clearOccured);
+                } finally {
+                  notifyIndex(re, false);
+                }
+                result = re;
+                break;
+              } finally {
+                OffHeapHelper.release(oldValueForDelta);
+                if (re != null && !onlyExisting && !isOpComplete(re, event)) {
+                  owner.cleanUpOnIncompleteOp(event, re);
+                } else if (re != null && owner.isUsedForPartitionedRegionBucket()) {
+                  BucketRegion br = (BucketRegion) owner;
+                  CachePerfStats stats = br.getPartitionedRegion().getCachePerfStats();
+                }
+              } // try
+            }
+          } // sync re
+        } // end while
+      } catch (DiskAccessException dae) {
+        // Asif:Feel that it is safe to destroy the region here as there appears
+        // to be no chance of deadlock during region destruction
+        result = null;
+        this._getOwner().handleDiskAccessException(dae);
+        throw dae;
+      } finally {
+        if (oqlIndexManager != null) {
+          oqlIndexManager.countDownIndexUpdaters();
+        }
+        if (result != null) {
+          try {
+            // Note we do distribution after releasing all sync to avoid deadlock
+            final boolean invokeListeners = event.basicGetNewValue() != Token.TOMBSTONE;
+            owner.basicPutPart3(event, result, !uninitialized, lastModifiedTime, invokeListeners,
+                ifNew, ifOld, expectedOldValue, requireOldValue);
+          } finally {
+            // bug 32589, post update may throw an exception if exception occurs
+            // for any recipients
+            if (!clearOccured) {
+              try {
+                lruUpdateCallback();
+              } catch (DiskAccessException dae) {
+                // Asif:Feel that it is safe to destroy the region here as there appears
+                // to be no chance of deadlock during region destruction
+                result = null;
+                this._getOwner().handleDiskAccessException(dae);
+                throw dae;
+              }
+            }
+          } // finally
+        } else {
+          resetThreadLocals();
+        }
+      }
-  }
-
-  private void doBasicPut(final RegionMapPutContext putInfo) {
-    try {
-      doWithIndexInUpdateMode(() -> {
-        do {
-          putInfo.setRegionEntry(null);
-          if (!findExistingEntry(putInfo)) {
-            return;
-          }
-          createNewEntryIfNeeded(putInfo);
-        } while (!addRegionEntryToMapAndDoPut(putInfo));
-      });
-    } catch (DiskAccessException dae) {
-      _getOwner().handleDiskAccessException(dae);
-      throw dae;
-    } finally {
-      doAfterPut(putInfo);
-    }
-  }
-
-  private void doWithIndexInUpdateMode(Runnable r) {
-    final IndexManager oqlIndexManager = getInitializedIndexManager();
-    if (oqlIndexManager != null) {
-      try {
-        r.run();
-      } finally {
-        oqlIndexManager.countDownIndexUpdaters();
-      }
-    } else {
-      r.run();
-    }
+    return result;
-   * Stores the found entry in putInfo.getRegionEntry.
-   *
-   * @return false if an existing entry was not found and this put requires
-   *         an existing one; otherwise returns true.
+   * If the value in the VM is still REMOVED_PHASE1 Token, then the operation was not completed (due
+   * to cacheWriter exception, concurrentMap operation) etc.
-  private boolean findExistingEntry(final RegionMapPutContext putInfo) {
-    final Object key = putInfo.getEvent().getKey();
-    RegionEntry re = getEntry(key);
-    if (putInfo.isOnlyExisting()) {
-      if (re == null || re.isTombstone()) {
-        return false;
-      }
+  private boolean isOpComplete(RegionEntry re, EntryEventImpl event) {
+    if (re.getValueAsToken() == Token.REMOVED_PHASE1) {
+      return false;
-    putInfo.setRegionEntry(re);
-  /**
-   * Stores the created entry in putInfo.getRegionEntry.
-   */
-  private void createNewEntryIfNeeded(final RegionMapPutContext putInfo) {
-    putInfo.setCreate(putInfo.getRegionEntry() == null);
-    if (putInfo.isCreate()) {
-      final Object key = putInfo.getEvent().getKey();
-      RegionEntry newEntry = getEntryFactory().createEntry(_getOwner(), key, Token.REMOVED_PHASE1);
-      putInfo.setRegionEntry(newEntry);
-    }
-  }
-
-  /**
-   * @return false if caller should retry
-   */
-  protected boolean addRegionEntryToMapAndDoPut(final RegionMapPutContext putInfo) {
-    synchronized (putInfo.getRegionEntry()) {
-      putIfAbsentNewEntry(putInfo);
-      return doPutOnRegionEntry(putInfo);
-    }
-  }
-
-  protected void putIfAbsentNewEntry(final RegionMapPutContext putInfo) {
-    if (putInfo.isCreate()) {
-      RegionEntry oldRe = putEntryIfAbsent(putInfo.getEvent().getKey(), putInfo.getRegionEntry());
-      if (oldRe != null) {
-        putInfo.setCreate(false);
-        putInfo.setRegionEntry(oldRe);
-      }
-    }
-  }
-
-  /**
-   * @return false if caller should retry
-   */
-  private boolean doPutOnRegionEntry(final RegionMapPutContext putInfo) {
-    final RegionEntry re = putInfo.getRegionEntry();
-
-    synchronized (re) {
-      if (isRegionEntryRemoved(putInfo)) {
-        return false;
-      }
-
-      setOldValueForDelta(putInfo);
-      try {
-        setOldValueInEvent(putInfo);
-        doCreateOrUpdate(putInfo);
-        return true;
-      } finally {
-        OffHeapHelper.release(putInfo.getOldValueForDelta());
-        putInfo.setOldValueForDelta(null);
-        if (!putInfo.isCompleted() && putInfo.isCreate()) {
-          // Region entry remove needs to be done while still synced on re.
-          removeEntry(putInfo.getEvent().getKey(), re, false);
-        }
-      }
-    }
-  }
-
-  private IndexManager getInitializedIndexManager() {
-    IndexManager oqlIndexManager;
-    // Fix for Bug #44431. We do NOT want to update the region and wait
-    // later for index INIT as region.clear() can cause inconsistency if
-    // happened in parallel as it also does index INIT.
-    oqlIndexManager = _getOwner().getIndexManager();
-    if (oqlIndexManager != null) {
-      oqlIndexManager.waitForIndexInit();
-    }
-    return oqlIndexManager;
-  }
-
-  private void doAfterPut(RegionMapPutContext putInfo) {
-    if (putInfo.isCompleted()) {
-      final LocalRegion owner = _getOwner();
-      try {
-        final boolean invokeListeners = putInfo.getEvent().basicGetNewValue() != Token.TOMBSTONE;
-        owner.basicPutPart3(putInfo.getEvent(), putInfo.getRegionEntry(),
-            !putInfo.isUninitialized(), putInfo.getLastModifiedTime(), invokeListeners,
-            putInfo.isIfNew(), putInfo.isIfOld(), putInfo.getExpectedOldValue(),
-            putInfo.isRequireOldValue());
-      } finally {
-        if (!putInfo.getClearOccured()) {
-          try {
-            lruUpdateCallback();
-          } catch (DiskAccessException dae) {
-            owner.handleDiskAccessException(dae);
-            throw dae;
-          }
-        }
-      }
-    } else {
-      resetThreadLocals();
-    }
-  }
-
-  /**
-   * @return false if an early out check indicated that
-   *         the put should not be done.
-   */
-  private boolean shouldPutContinue(final RegionMapPutContext putInfo) {
-    if (continueUpdate(putInfo) && continueOverwriteDestroyed(putInfo)
-        && satisfiesExpectedOldValue(putInfo)) {
-      return true;
-    }
-    return false;
-  }
-
-  private void doCreateOrUpdate(final RegionMapPutContext putInfo) {
-    if (!shouldPutContinue(putInfo)) {
-      return;
-    }
-    invokeCacheWriter(putInfo);
-
-    runWithIndexUpdatingInProgress(putInfo, () -> {
-      final EntryEventImpl event = putInfo.getEvent();
-      createOrUpdateEntry(putInfo);
-      if (putInfo.isUninitialized()) {
-        event.inhibitCacheListenerNotification(true);
-      }
-      updateLru(putInfo);
-
-      final RegionEntry re = putInfo.getRegionEntry();
-      long lastModTime = _getOwner().basicPutPart2(event, re, !putInfo.isUninitialized(),
-          putInfo.getLastModifiedTime(), putInfo.getClearOccured());
-      putInfo.setLastModifiedTime(lastModTime);
-      putInfo.setCompleted(true);
-    });
-  }
-
-  private void runWithIndexUpdatingInProgress(RegionMapPutContext putInfo, Runnable r) {
-    final RegionEntry re = putInfo.getRegionEntry();
-    notifyIndex(re, true);
-    try {
-      r.run();
-    } finally {
-      notifyIndex(re, false);
-    }
-  }
-
-  private void createOrUpdateEntry(final RegionMapPutContext putInfo) {
-    final EntryEventImpl event = putInfo.getEvent();
-    final LocalRegion owner = _getOwner();
-    try {
-      if (isUpdate(putInfo)) {
-        updateEntry(putInfo);
-      } else {
-        createEntry(putInfo);
-      }
-      owner.recordEvent(event);
-    } catch (RegionClearedException rce) {
-      putInfo.setClearOccured(true);
-      owner.recordEvent(event);
-    } catch (ConcurrentCacheModificationException ccme) {
-      VersionTag tag = event.getVersionTag();
-      if (tag != null && tag.isTimeStampUpdated()) {
-        owner.notifyTimestampsToGateways(event);
-      }
-      throw ccme;
-    }
-  }
-
-  private boolean isUpdate(final RegionMapPutContext putInfo) {
-    if (putInfo.isCacheWrite() && putInfo.getEvent().getOperation().isUpdate()) {
-      // if there is a cacheWriter, type of event has already been set
-      return true;
-    }
-    if (putInfo.isReplaceOnClient()) {
-      return true;
-    }
-    if (!putInfo.getRegionEntry().isRemoved()) {
-      return true;
-    }
-    return false;
-  }
-
-  private void setOldValueForDelta(final RegionMapPutContext putInfo) {
-    if (putInfo.isRetrieveOldValueForDelta()) {
-      runWhileEvictionDisabled(() -> {
-        // Old value is faulted in from disk if not found in memory.
-        putInfo.setOldValueForDelta(putInfo.getRegionEntry().getValue(_getOwner()));
-        // OFFHEAP: if we are synced on region entry no issue since we can use ARE's ref
-      });
-    }
-  }
-
-  private void runWhileEvictionDisabled(Runnable r) {
-    final boolean disabled = disableLruUpdateCallback();
-    try {
-      r.run();
-    } finally {
-      if (disabled) {
-        enableLruUpdateCallback();
-      }
-    }
-  }
-
-  /**
-   * If the re goes into removed2 state, it will be removed from the map.
-   *
-   * @return true if re was remove phase 2
-   */
-  private boolean isRegionEntryRemoved(final RegionMapPutContext putInfo) {
-    final RegionEntry re = putInfo.getRegionEntry();
-    if (re.isRemovedPhase2()) {
-      _getOwner().getCachePerfStats().incRetries();
-      getEntryMap().remove(putInfo.getEvent().getKey(), re);
-      return true;
-    } else {
-      return false;
-    }
-  }
-
-  private boolean satisfiesExpectedOldValue(final RegionMapPutContext putInfo) {
+  private boolean satisfiesExpectedOldValue(EntryEventImpl event, RegionEntry re,
+      Object expectedOldValue, boolean replaceOnClient) {
-    final EntryEventImpl event = putInfo.getEvent();
-    if (putInfo.getExpectedOldValue() != null && !putInfo.isReplaceOnClient()) {
+    if (expectedOldValue != null && !replaceOnClient) {
-      if (!AbstractRegionEntry.checkExpectedOldValue(putInfo.getExpectedOldValue(), v,
-          event.getRegion())) {
+      if (!AbstractRegionEntry.checkExpectedOldValue(expectedOldValue, v, event.getRegion())) {
-  private void setOldValueInEvent(final RegionMapPutContext putInfo) {
-    final EntryEventImpl event = putInfo.getEvent();
-    final RegionEntry re = putInfo.getRegionEntry();
-    event.setRegionEntry(re);
-    boolean needToSetOldValue = putInfo.isCacheWrite() || putInfo.isRequireOldValue()
-        || event.getOperation().guaranteesOldValue();
+  private void setOldValueInEvent(EntryEventImpl event, RegionEntry re, boolean cacheWrite,
+      boolean requireOldValue) {
+    boolean needToSetOldValue =
+        cacheWrite || requireOldValue || event.getOperation().guaranteesOldValue();
-  private void createEntry(final RegionMapPutContext putInfo) throws RegionClearedException {
-    final LocalRegion owner = _getOwner();
-    final EntryEventImpl event = putInfo.getEvent();
-    final RegionEntry re = putInfo.getRegionEntry();
+  protected void createEntry(EntryEventImpl event, final LocalRegion owner, RegionEntry re)
+      throws RegionClearedException {
-  private void updateEntry(final RegionMapPutContext putInfo) throws RegionClearedException {
-    final EntryEventImpl event = putInfo.getEvent();
-    final RegionEntry re = putInfo.getRegionEntry();
-    final boolean wasTombstone = re.isTombstone();
+  protected void updateEntry(EntryEventImpl event, boolean requireOldValue, Object oldValueForDelta,
+      RegionEntry re) throws RegionClearedException {
+    final boolean wasTombstone = re.isTombstone();
-    event.putExistingEntry(event.getRegion(), re, putInfo.isRequireOldValue(),
-        putInfo.getOldValueForDelta());
+    event.putExistingEntry(event.getRegion(), re, requireOldValue, oldValueForDelta);
-  private void updateLru(final RegionMapPutContext putInfo) {
-    if (!putInfo.getClearOccured()) {
-      if (putInfo.getEvent().getOperation().isCreate()) {
-        lruEntryCreate(putInfo.getRegionEntry());
+  private void updateLru(boolean clearOccured, RegionEntry re, EntryEventImpl event) {
+    if (!clearOccured) {
+      if (event.getOperation().isCreate()) {
+        lruEntryCreate(re);
-        lruEntryUpdate(putInfo.getRegionEntry());
+        lruEntryUpdate(re);
-  private void invokeCacheWriter(RegionMapPutContext putInfo) {
-    final EntryEventImpl event = putInfo.getEvent();
+  private void invokeCacheWriter(RegionEntry re, EntryEventImpl event, boolean cacheWrite,
+      CacheWriter cacheWriter, Set netWriteRecipients, boolean requireOldValue,
+      Object expectedOldValue, boolean replaceOnClient) {
-    if (_getOwner().isInitialized() && putInfo.isCacheWrite()) {
+    if (_getOwner().isInitialized() && cacheWrite) {
-      if (!putInfo.isReplaceOnClient()) {
-        if (putInfo.getRegionEntry().isDestroyedOrRemoved()) {
+      if (!replaceOnClient) {
+        if (re.isDestroyedOrRemoved()) {
-      _getOwner().cacheWriteBeforePut(event, putInfo.getNetWriteRecipients(),
-          putInfo.getCacheWriter(), putInfo.isRequireOldValue(), putInfo.getExpectedOldValue());
+      _getOwner().cacheWriteBeforePut(event, netWriteRecipients, cacheWriter, requireOldValue,
+          expectedOldValue);
-    if (!_getOwner().isInitialized() && !putInfo.isCacheWrite()) {
-      // block setting of old value in putNewValueNoSync, don't need it
+    if (!_getOwner().isInitialized() && !cacheWrite) {
+      // block setting of old value in putNewValueNoSync, don't
+      // need it
-  private boolean continueOverwriteDestroyed(final RegionMapPutContext putInfo) {
-    Token oldValueInVM = putInfo.getRegionEntry().getValueAsToken();
+  private boolean continueOverwriteDestroyed(RegionEntry re, EntryEventImpl event,
+      boolean overwriteDestroyed, boolean ifNew) {
+    Token oldValueInVM = re.getValueAsToken();
-    if (!putInfo.isOverwriteDestroyed()) {
+    if (!overwriteDestroyed) {
-        putInfo.getEvent().setOldValueDestroyedToken();
+        event.setOldValueDestroyedToken();
-    if (putInfo.isIfNew() && !Token.isRemoved(oldValueInVM)) {
+    if (ifNew && !Token.isRemoved(oldValueInVM)) {
-  private boolean continueUpdate(final RegionMapPutContext putInfo) {
-    if (putInfo.isIfOld()) {
-      final EntryEventImpl event = putInfo.getEvent();
-      final RegionEntry re = putInfo.getRegionEntry();
+  private boolean continueUpdate(RegionEntry re, EntryEventImpl event, boolean ifOld,
+      boolean replaceOnClient) {
+    if (ifOld) {
-      if (re.isRemoved() && !putInfo.isReplaceOnClient()) {
+      if (re.isRemoved() && !replaceOnClient) {

MOV26 INS26 UPD40 INS40 INS31 INS31 UPD83 MOV83 MOV43 UPD42 MOV42 MOV44 MOV44 MOV44 INS44 INS44 INS44 INS8 MOV78 INS83 MOV43 INS42 MOV44 INS44 MOV44 MOV44 MOV44 INS44 MOV44 MOV43 MOV43 INS8 UPD42 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 UPD83 INS44 INS44 UPD83 INS44 INS44 INS44 MOV60 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS42 INS43 UPD42 INS43 UPD42 INS74 INS42 INS39 INS42 INS39 INS42 INS60 MOV60 MOV21 INS25 INS25 INS25 INS21 MOV60 INS25 INS41 INS83 INS39 INS42 UPD43 UPD42 INS39 INS42 MOV60 MOV21 INS60 INS25 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS60 MOV60 MOV21 INS54 INS41 MOV43 INS42 UPD43 UPD42 MOV41 MOV43 INS42 UPD43 UPD42 INS39 INS42 UPD43 UPD42 MOV43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 UPD43 UPD42 MOV43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 UPD43 UPD42 INS39 INS42 MOV43 INS42 UPD43 UPD42 MOV43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 UPD43 UPD42 INS39 INS42 INS43 INS42 INS39 INS42 UPD43 UPD42 INS43 INS42 INS39 INS42 INS39 INS42 MOV43 INS42 UPD43 UPD42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS43 MOV43 MOV43 INS43 INS43 INS43 INS59 UPD43 INS7 INS42 INS8 INS27 INS8 INS27 INS8 INS7 MOV43 MOV27 INS8 INS42 UPD42 INS39 INS59 INS27 INS8 INS27 INS8 MOV43 INS59 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 MOV59 INS42 INS8 INS8 INS39 INS59 INS39 INS59 INS8 MOV8 INS42 UPD66 INS66 UPD42 INS27 MOV8 UPD42 UPD42 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 UPD42 INS33 INS42 INS32 INS25 MOV41 INS42 INS33 INS41 INS42 INS33 INS21 INS42 INS32 UPD42 MOV25 INS41 INS42 INS9 INS42 MOV33 INS21 INS32 INS38 INS21 INS42 INS33 INS42 INS34 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 INS25 MOV21 INS42 INS38 INS42 INS27 INS33 INS54 INS32 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV8 INS42 INS42 INS7 MOV32 INS42 INS11 INS42 UPD42 MOV42 UPD42 INS42 INS62 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS36 INS32 UPD42 MOV42 UPD42 MOV42 INS38 INS38 INS32 INS36 INS27 INS8 INS8 INS7 MOV32 INS27 INS27 INS8 INS12 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS38 INS36 INS42 INS32 INS43 INS42 INS42 INS43 INS21 UPD42 MOV42 UPD42 MOV42 INS9 INS27 INS62 UPD42 MOV42 INS42 INS40 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS27 INS32 INS21 MOV21 INS42 INS33 UPD42 UPD42 INS32 INS33 INS32 INS33 MOV21 MOV25 INS60 INS60 INS60 MOV60 INS21 INS25 INS61 MOV44 INS8 MOV25 INS25 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 INS42 INS32 INS45 INS52 INS45 INS42 INS42 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS32 INS42 INS33 INS40 UPD42 MOV42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS39 INS59 MOV43 INS59 INS39 MOV59 INS7 MOV27 INS8 INS9 INS8 INS21 MOV21 MOV53 MOV8 INS27 INS8 MOV8 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS32 INS36 UPD42 MOV42 INS42 INS27 INS32 INS40 INS42 INS42 INS32 INS42 INS33 INS42 INS27 INS42 INS33 UPD42 INS9 UPD42 UPD27 INS42 INS32 INS41 INS51 INS7 INS42 INS33 INS54 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS11 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS27 INS42 INS38 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS33 UPD42 MOV42 INS9 INS33 INS42 INS8 INS42 INS33 INS32 UPD42 INS42 INS8 INS8 INS43 INS42 INS36 INS42 INS32 INS40 INS32 INS33 INS42 INS25 INS52 UPD42 MOV42 INS60 INS21 MOV25 INS42 INS11 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS8 INS8 INS83 INS39 INS59 INS32 INS38 INS8 INS43 INS42 MOV21 INS21 INS21 INS25 INS18 INS60 INS25 INS54 INS42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS38 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS54 INS42 INS32 INS7 INS27 INS8 INS78 MOV43 INS59 INS42 MOV8 INS8 INS8 MOV32 INS40 INS42 MOV8 INS12 MOV32 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS33 MOV21 INS21 MOV25 MOV25 INS25 INS21 MOV21 INS54 INS21 INS10 INS21 INS25 UPD42 UPD42 MOV44 INS8 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS33 UPD42 MOV42 INS9 INS33 INS32 INS38 INS38 INS8 INS32 MOV8 MOV8 INS7 INS32 INS27 INS8 INS25 INS21 MOV21 MOV53 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS41 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 MOV25 INS21 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS38 INS21 INS27 INS8 INS7 INS32 INS7 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 UPD42 INS42 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS32 INS7 INS27 INS38 INS32 INS32 INS27 INS32 INS60 MOV60 INS42 INS33 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS32 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS43 INS52 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS7 MOV21 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS38 INS42 INS42 UPD42 MOV42 INS42 INS11 INS42 UPD42 INS32 INS36 INS38 INS42 INS42 INS9 INS7 INS42 INS43 INS42 INS32 INS42 INS27 INS32 INS42 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL83 DEL83 DEL39 DEL83 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL33 DEL32 DEL32 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL32 DEL42 DEL32 DEL32 DEL27 DEL9 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL32 DEL83 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL86 DEL32 DEL21 DEL8 DEL83 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL38 DEL19 DEL8 DEL86 DEL32 DEL21 DEL8 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL83 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL59 DEL60 DEL9 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL43 DEL42 DEL44 DEL83 DEL60 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL38 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL32 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL51 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL32 DEL83 DEL42 DEL43 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL32 DEL21 DEL83 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL9 DEL32 DEL21 DEL8 DEL86 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL9 DEL41 DEL8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32