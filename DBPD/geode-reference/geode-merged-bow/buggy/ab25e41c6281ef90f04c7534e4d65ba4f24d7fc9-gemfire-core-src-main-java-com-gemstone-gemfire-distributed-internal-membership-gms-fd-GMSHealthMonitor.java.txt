Changing HealthMonitor.checkIfAvailable() to perform "final" check

Somehow we missed modifying checkIfAvailable to use the "final" check
method after Jianxia implemented the tcp/ip checks.  This modifies
checkIfAvailable to do so.

I also noticed an exception being thrown while closing a PR during
forced-disconnect and changed the method to use getDM instead of
getDistributionManager, which can throw a cancellation exception.

+import java.util.Collections;
+import java.util.concurrent.RejectedExecutionException;
-    boolean pinged = doCheckMember((InternalDistributedMember) mbr);
-    if (!pinged && initiateRemoval) {
-      suspect((InternalDistributedMember) mbr, reason);
-    }
-    return pinged;
+    return inlineCheckIfAvailable(localAddress, currentView, initiateRemoval, (InternalDistributedMember)mbr, reason);
-              // [bruce] do we really want a timeout on the server-side?
-//              socket.setSoTimeout((int) services.getConfig().getMemberTimeout());
+            
+            } catch (RejectedExecutionException e) {
+              // this can happen during shutdown
+
-      doFinalCheck(sender, sMembers, cv, localAddress);
+      checkIfAvailable(sender, sMembers, cv);
-        doFinalCheck(sender, smbr, cv, localAddress);
+        checkIfAvailable(sender, smbr, cv);
-  private void doFinalCheck(final InternalDistributedMember initiator,
-      List<SuspectRequest> sMembers, final NetView cv, InternalDistributedMember localAddress) {
+  /**
+   * performs a "final" health check on the member.  If failure-detection
+   * socket information is available for the member (in the view) then
+   * we attempt to connect to its socket and ask if it's the expected member.
+   * Otherwise we send a heartbeat request and wait for a reply.
+   *  
+   * @param initiator
+   * @param sMembers
+   * @param cv
+   * @param initiateRemoval
+   */
+  private void checkIfAvailable(final InternalDistributedMember initiator,
+      List<SuspectRequest> sMembers, final NetView cv) {
-              services.memberSuspected(initiator, mbr, reason);
-              long startTime = System.currentTimeMillis();
-              // for some reason we used to update the timestamp for the member
-              // with the startTime, but we don't want to do that because it looks
-              // like a heartbeat has been received
-
-              logger.info("Performing final check for suspect member {} reason={}", mbr, reason);
-              boolean pinged;
-              int port = cv.getFailureDetectionPort(mbr);
-              if (port <= 0) {
-                logger.info("Unable to locate failure detection port - requesting a heartbeat");
-                if (logger.isDebugEnabled()) {
-                  logger.debug("\ncurrent view: {}\nports: {}", cv, Arrays.toString(cv.getFailureDetectionPorts()));
-                }
-                pinged = GMSHealthMonitor.this.doCheckMember(mbr);
-                GMSHealthMonitor.this.stats.incFinalCheckRequestsSent();
-                GMSHealthMonitor.this.stats.incUdpFinalCheckRequestsSent();
-                if (pinged) {
-                  GMSHealthMonitor.this.stats.incFinalCheckResponsesReceived();
-                  GMSHealthMonitor.this.stats.incUdpFinalCheckResponsesReceived();
-                }
-              } else {
-                pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr, port);
-              }
-
-              boolean failed = false;
-              if (!pinged && !isStopping) {
-                TimeStamp ts = memberTimeStamps.get(mbr);
-                if (ts == null || ts.getTime() <= startTime) {
-                  logger.info("Final check failed - requesting removal of suspect member " + mbr);
-                  services.getJoinLeave().remove(mbr, reason);
-                  failed = true;
-                } else {
-                  logger.info("Final check failed but detected recent message traffic for suspect member " + mbr);
-                }
-              }
-              if (!failed) {
-                logger.info("Final check passed for suspect member " + mbr);
-              }
-              // whether it's alive or not, at this point we allow it to
-              // be watched again
-              suspectedMemberInView.remove(mbr);
+              inlineCheckIfAvailable(initiator, cv, true, mbr,
+                  reason);
+
+          
+
+  private boolean inlineCheckIfAvailable(
+      final InternalDistributedMember initiator, final NetView cv,
+      boolean initiateRemoval,
+      final InternalDistributedMember mbr, final String reason) {
+
+    services.memberSuspected(initiator, mbr, reason);
+    long startTime = System.currentTimeMillis();
+    // for some reason we used to update the timestamp for the member
+    // with the startTime, but we don't want to do that because it looks
+    // like a heartbeat has been received
+
+    logger.info("Performing final check for suspect member {} reason={}", mbr, reason);
+    boolean pinged;
+    int port = cv.getFailureDetectionPort(mbr);
+    if (port <= 0) {
+      logger.info("Unable to locate failure detection port - requesting a heartbeat");
+      if (logger.isDebugEnabled()) {
+        logger.debug("\ncurrent view: {}\nports: {}", cv, Arrays.toString(cv.getFailureDetectionPorts()));
+      }
+      pinged = GMSHealthMonitor.this.doCheckMember(mbr);
+      GMSHealthMonitor.this.stats.incFinalCheckRequestsSent();
+      GMSHealthMonitor.this.stats.incUdpFinalCheckRequestsSent();
+      if (pinged) {
+        GMSHealthMonitor.this.stats.incFinalCheckResponsesReceived();
+        GMSHealthMonitor.this.stats.incUdpFinalCheckResponsesReceived();
+      }
+    } else {
+      pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr, port);
+    }
+
+    boolean failed = false;
+    if (!pinged && !isStopping) {
+      TimeStamp ts = memberTimeStamps.get(mbr);
+      if (ts == null || ts.getTime() <= startTime) {
+        logger.info("Final check failed - requesting removal of suspect member " + mbr);
+        if (initiateRemoval) {
+          services.getJoinLeave().remove(mbr, reason);
+        }
+        failed = true;
+      } else {
+        logger.info("Final check failed but detected recent message traffic for suspect member " + mbr);
+      }
+    }
+    if (!failed) {
+      logger.info("Final check passed for suspect member " + mbr);
+    }
+    // whether it's alive or not, at this point we allow it to
+    // be watched again
+    suspectedMemberInView.remove(mbr);
+    return !failed;
+  }
+    

INS26 INS26 INS40 INS40 MOV31 INS29 UPD42 INS44 INS44 UPD83 UPD39 INS42 MOV44 MOV44 INS44 MOV44 INS44 MOV8 INS65 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS39 INS42 INS83 UPD42 INS83 INS43 INS42 INS41 MOV32 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS25 INS42 INS8 UPD42 MOV21 INS31 MOV78 INS83 INS39 INS42 INS8 INS54 INS12 INS8 MOV12 MOV12 MOV8 INS44 INS8 INS21 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL38 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL54 DEL8