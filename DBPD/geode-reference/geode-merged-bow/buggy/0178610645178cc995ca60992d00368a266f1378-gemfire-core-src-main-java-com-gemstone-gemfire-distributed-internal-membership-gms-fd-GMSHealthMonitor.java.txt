GEODE-77 bug fixes for LocatorDUnitTest

All tests in LocatorDUnitTest now pass except the quorum check,
which needs a test hook.  GMSJoinLeaveJUnitTest, GMSHealthMonitoryJUnitTest
(except for testSuspectMembersCalledThroughSuspectThread) and
MembershipJUnitTest are all passing with these changes.

-import java.util.Date;
+import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.InstallViewMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.JoinRequestMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.JoinResponseMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.LeaveRequestMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.RemoveMemberMessage;
-import com.gemstone.gemfire.distributed.internal.membership.gms.messages.ViewAckMessage;
-        CustomTimeStamp nextNeigbourTS = GMSHealthMonitor.this.memberVsLastMsgTS.get(neighbour);
+        CustomTimeStamp nextNeighbourTS;
+        synchronized(GMSHealthMonitor.this) {
+          nextNeighbourTS = GMSHealthMonitor.this.memberVsLastMsgTS.get(neighbour);
+        }
+        if (nextNeighbourTS == null) {
+          CustomTimeStamp customTS = new CustomTimeStamp();
+          customTS.setTimeStamp(System.currentTimeMillis());
+          memberVsLastMsgTS.put(neighbour, customTS);
+          return;
+        }
+        
-        long lastTS = currentTime - nextNeigbourTS.getTimeStamp();
+        long lastTS = currentTime - nextNeighbourTS.getTimeStamp();
-    final PingRequestMessage prm = new PingRequestMessage(reqId);
+    final PingRequestMessage prm = new PingRequestMessage(pingMember, reqId);
-          logger.debug("Setting next neighbour as member {} not responded.", pingMember);
+          logger.debug("Setting next neighbour as member {} has not responded.", pingMember);
-    logger.debug(reason);
+    logger.debug("Suspecting {} reason=\"{}\"", mbr, reason);
-    logger.debug("Checking the member: {}", pingMember);
+    logger.debug("Checking member {}", pingMember);
-        logger.debug("Adding member {} to suspect for reason {}.", mbr, reason);
+        logger.info("Suspecting member {}. Reason= {}.", mbr, reason);
+    setNextNeighbour(newView, null);
-    setNextNeighbour(currentView, null);
-    if (newView.equals(currentView)) {
+    if (currentView != null &&
+        newView.getCreator().equals(currentView.getCreator()) &&
+        newView.getViewId() == currentView.getViewId()) {
-    List<InternalDistributedMember> allMembers = currentView.getMembers();
+    List<InternalDistributedMember> allMembers = newView.getMembers();
+      
-      for (int i = 0; i < allMembers.size(); i++) {
+      for (InternalDistributedMember mbr: allMembers) {
-        memberVsLastMsgTS.put(allMembers.get(i), customTS);
+        memberVsLastMsgTS.put(mbr, customTS);
-    PingResponseMessage prm = new PingResponseMessage(m.getRequestId());
-    prm.setRecipient(m.getSender());
-    Set<InternalDistributedMember> membersNotReceivedMsg = services.getMessenger().send(prm);
-    // TODO: send is throwing exception right now
-    if (membersNotReceivedMsg != null && membersNotReceivedMsg.contains(m.getSender())) {
-      logger.debug("Unable to send check response to member: {}", m.getSender());
+    // only respond if the intended recipient is this member
+    InternalDistributedMember me = services.getMessenger().getMemberID();
+    if (me.getVmViewId() < 0 || m.getTarget().equals(me)) {
+      PingResponseMessage prm = new PingResponseMessage(m.getRequestId());
+      prm.setRecipient(m.getSender());
+      Set<InternalDistributedMember> membersNotReceivedMsg = services.getMessenger().send(prm);
+      // TODO: send is throwing exception right now
+      if (membersNotReceivedMsg != null && membersNotReceivedMsg.contains(m.getSender())) {
+        logger.debug("Unable to send check response to member: {}", m.getSender());
+      }
+    } else {
+      logger.debug("Ignoring ping request intended for {}.  My ID is {}", m.getTarget(), me);
-    logger.debug("GMSHealthMonitor.processSuspectMembersRequest invoked for members {}", incomingRequest);
+            } catch (DistributedSystemDisconnectedException e) {
+              return;
-    List<InternalDistributedMember> recipients = currentView.getAllPreferredCoordinators(filter, services.getJoinLeave().getMemberID());
+    List<InternalDistributedMember> recipients = currentView.getPreferredCoordinators(filter, services.getJoinLeave().getMemberID(), 5);
-    Set<InternalDistributedMember> failedRecipients = services.getMessenger().send(rmm);
+    Set<InternalDistributedMember> failedRecipients;
+    try {
+      failedRecipients = services.getMessenger().send(rmm);
+    } catch (DistributedSystemDisconnectedException e) {
+      return;
+    }

MOV26 UPD40 MOV21 INS8 INS60 INS25 INS54 INS27 INS43 INS59 INS27 MOV8 INS8 INS8 INS12 INS45 INS42 UPD45 UPD42 INS27 INS27 INS70 INS42 INS42 INS32 INS27 INS32 INS21 INS21 INS44 INS8 INS51 INS25 INS42 INS27 INS32 INS32 INS32 UPD42 INS44 INS42 MOV8 INS32 INS42 INS32 INS34 INS32 INS42 INS42 INS32 UPD42 INS34 INS7 INS43 INS42 INS41 INS52 INS8 INS27 INS8 INS42 INS33 INS32 MOV42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 MOV32 INS42 UPD42 INS42 INS21 INS42 INS33 INS60 INS21 INS21 INS41 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS32 INS32 UPD42 UPD45 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS43 INS42 INS42 INS42 UPD45 INS12 INS44 INS8 INS43 INS42 INS41 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL32 DEL42 DEL42 DEL32 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21