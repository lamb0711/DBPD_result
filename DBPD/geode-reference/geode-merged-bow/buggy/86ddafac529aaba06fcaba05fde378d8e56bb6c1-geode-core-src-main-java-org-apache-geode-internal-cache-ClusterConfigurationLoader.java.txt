GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
+import java.io.File;
+import java.io.FileOutputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.util.Collections;
+import java.util.HashMap;
-import java.util.stream.Stream;
-import org.apache.commons.lang.ArrayUtils;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.internal.configuration.functions.DownloadJarFunction;
-   * @param cache Cache of this member
-  public void deployJarsReceivedFromClusterConfiguration(Cache cache,
-      ConfigurationResponse response) throws IOException, ClassNotFoundException {
+  public void deployJarsReceivedFromClusterConfiguration(ConfigurationResponse response)
+      throws IOException, ClassNotFoundException {
-    String[] jarFileNames = response.getJarNames();
-    byte[][] jarBytes = response.getJars();
+    List<String> jarFileNames =
+        response.getJarNames().values().stream().flatMap(Set::stream).collect(Collectors.toList());
-    if (jarFileNames != null && jarBytes != null) {
-      logger.info("Got response with jars: {}", Stream.of(jarFileNames).collect(joining(",")));
+    if (jarFileNames != null && !jarFileNames.isEmpty()) {
+      logger.info("Got response with jars: {}", jarFileNames.stream().collect(joining(",")));
-                .filter(jarName -> !ArrayUtils.contains(jarFileNames, jarName)).collect(toList());
+                .filter(jarName -> !jarFileNames.contains(jarName)).collect(toList());
-        List<DeployedJar> deployedJars = jarDeployer.deploy(jarFileNames, jarBytes);
+        Map<String, File> stagedJarFiles =
+            getJarsFromLocator(response.getMember(), response.getJarNames());
+
+        List<DeployedJar> deployedJars = jarDeployer.deploy(stagedJarFiles);
+  private Map<String, File> getJarsFromLocator(DistributedMember locator,
+      Map<String, Set<String>> jarNames) throws IOException {
+    Map<String, File> results = new HashMap<>();
+
+    for (String group : jarNames.keySet()) {
+      for (String jar : jarNames.get(group)) {
+        results.put(jar, downloadJar(locator, group, jar));
+      }
+    }
+
+    return results;
+  }
+
+  public File downloadJar(DistributedMember locator, String groupName, String jarName)
+      throws IOException {
+    ResultCollector<RemoteInputStream, List<RemoteInputStream>> rc =
+        (ResultCollector<RemoteInputStream, List<RemoteInputStream>>) CliUtil.executeFunction(
+            new DownloadJarFunction(), new Object[] {groupName, jarName},
+            Collections.singleton(locator));
+
+    List<RemoteInputStream> result = rc.getResult();
+    RemoteInputStream jarStream = result.get(0);
+
+    Set<PosixFilePermission> perms = new HashSet<>();
+    perms.add(PosixFilePermission.OWNER_READ);
+    perms.add(PosixFilePermission.OWNER_WRITE);
+    perms.add(PosixFilePermission.OWNER_EXECUTE);
+    Path tempDir =
+        Files.createTempDirectory("deploy-", PosixFilePermissions.asFileAttribute(perms));
+    Path tempJar = Paths.get(tempDir.toString(), jarName);
+    FileOutputStream fos = new FileOutputStream(tempJar.toString());
+
+    int packetId = 0;
+    while (true) {
+      byte[] data = jarStream.readPacket(packetId);
+      if (data == null) {
+        break;
+      }
+      fos.write(data);
+      packetId++;
+    }
+    fos.close();
+    jarStream.close(true);
+
+    return tempJar.toFile();
+  }
+
+        response.setMember(locator);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 INS40 INS31 INS31 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS60 INS60 INS60 INS61 INS21 INS21 INS41 INS74 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS74 INS59 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS9 INS8 INS32 INS32 INS32 INS43 INS43 UPD42 INS32 INS38 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS14 MOV43 INS42 INS42 INS42 INS70 INS43 INS43 INS74 INS42 INS11 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS34 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS44 INS32 INS8 INS42 INS42 INS43 INS43 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS74 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS43 INS32 INS5 INS59 INS27 INS8 INS32 INS37 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS60 INS43 INS43 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS14 INS3 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS74 MOV59 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 UPD42 INS43 INS43 INS43 UPD42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL85 DEL5 DEL60 DEL39 DEL85 DEL85 DEL5 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42