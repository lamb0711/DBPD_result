jgroups source is now removed from asf branch GEODE-77 and is a downloaded dependency.  Able to start/stop a locator and a server via gfsh but there is no HA or authentication in the membership system.

-import com.gemstone.gemfire.DataSerializer;
-import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.gemfire.cache.UnsupportedVersionException;
-import com.gemstone.gemfire.distributed.DistributedMember;
-import com.gemstone.gemfire.distributed.DurableClientAttributes;
-import com.gemstone.gemfire.distributed.Role;
-import com.gemstone.gemfire.distributed.internal.DistributionManager;
-import com.gemstone.gemfire.distributed.internal.DistributionAdvisor.ProfileId;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGPeerAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMember;
-import com.gemstone.gemfire.internal.Assert;
-import com.gemstone.gemfire.internal.DataSerializableFixedID;
-import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.Version;
-import com.gemstone.gemfire.internal.cache.versions.VersionSource;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-import com.gemstone.org.jgroups.stack.IpAddress;
-
-import java.io.Serializable;
+import java.net.Inet4Address;
-import java.net.Inet4Address;
+
+import com.gemstone.gemfire.DataSerializer;
+import com.gemstone.gemfire.InternalGemFireError;
+import com.gemstone.gemfire.cache.UnsupportedVersionException;
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.distributed.DurableClientAttributes;
+import com.gemstone.gemfire.distributed.Role;
+import com.gemstone.gemfire.distributed.internal.DistributionAdvisor.ProfileId;
+import com.gemstone.gemfire.distributed.internal.DistributionManager;
+import com.gemstone.gemfire.internal.Assert;
+import com.gemstone.gemfire.internal.DataSerializableFixedID;
+import com.gemstone.gemfire.internal.InternalDataSerializer;
+import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.internal.Version;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-  protected NetMember ipAddr; // the underlying member object, e.g. from JGroups
-  // private IpAddress ipAddr;
+  protected NetMember netMbr; // the underlying member object, e.g. from JGroups
-        Version.GFE_71 };
+        Version.GFE_71, Version.GFE_90 };
- // [bruce] disabled to allow loners to modify the ID post-connect
- //    Assert.assertTrue(defaultDcPort > 0); 
-
-    if (this.ipAddr instanceof JGroupMember) {
-      ((JGroupMember)this.ipAddr).getAddress().setProcessId(this.vmPid);
-    }
-//    checkHostName();
+    synchPayload();
-    this.ipAddr = MemberFactory.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, attr);
+    this.netMbr = MemberFactory.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, Version.CURRENT_ORDINAL, attr);
+    this.version = netMbr.getVersionOrdinal();
+    try {
+      this.versionObj = Version.fromOrdinal(version, false);
+    } catch (UnsupportedVersionException e) {
+      this.versionObj = Version.CURRENT;
+    }
+  
-    ipAddr = m;
+    netMbr = m;
-    this.hostName = SocketCreator.resolve_dns? SocketCreator.getHostName(m.getIpAddress()) :
-      m.getIpAddress().getHostAddress();
+    this.hostName = SocketCreator.resolve_dns? SocketCreator.getHostName(m.getInetAddress()) :
+      m.getInetAddress().getHostAddress();
-    final IpAddress addr = ((JGroupMember)m).getAddress();
-    this.version = addr.getVersionOrdinal();
+    this.version = m.getVersionOrdinal();
-  
-//  private void checkHostName() {
+
+  //  private void checkHostName() {
-    ipAddr = MemberFactory.newNetMember(i, p);
+    netMbr = MemberFactory.newNetMember(i, p);
-    GFJGBasicAdapter.insertDefaultGemFireAttributes(((JGroupMember)ipAddr).getAddress());
-    ipAddr = MemberFactory.newNetMember(i, p);
+    netMbr = MemberFactory.newNetMember(i, p);
-    GFJGBasicAdapter.insertDefaultGemFireAttributes(((JGroupMember)ipAddr).getAddress());
-    ipAddr = MemberFactory.newNetMember(i, p);
+    netMbr = MemberFactory.newNetMember(i, p);
-    ipAddr = MemberFactory.newNetMember(addr, p);
+    netMbr = MemberFactory.newNetMember(addr, p);
-  public InetAddress getIpAddress()
+  public InetAddress getInetAddress()
-    return ipAddr.getIpAddress();
+    return netMbr.getInetAddress();
-    return ipAddr;
+    return netMbr;
-    return ipAddr.getPort();
+    return netMbr.getPort();
-    ipAddr.setAttributes(new MemberAttributes(dcPort, vmPid, vmKind, 
+    netMbr.setAttributes(new MemberAttributes(dcPort, vmPid, vmKind, 
-    InetAddress myAddr = getIpAddress();
-    InetAddress otherAddr = other.getIpAddress();
+    InetAddress myAddr = getInetAddress();
+    InetAddress otherAddr = other.getInetAddress();
-     result = result + ipAddr.getIpAddress().hashCode();
+     result = result + netMbr.getInetAddress().hashCode();
-      InetAddress add = getIpAddress();
+      InetAddress add = getInetAddress();
-//        JGroupMember jgm = (JGroupMember)ipAddr;
+//        GMSMember jgm = (GMSMember)ipAddr;
-      if (ipAddr.splitBrainEnabled()) {
-        if (ipAddr.canBeCoordinator()) {
+      if (netMbr.splitBrainEnabled()) {
+        if (netMbr.preferredForCoordinator()) {
+      
+//      if (netMbr instanceof GMSMember) {
+//        sb.append("(UUID=").append(((GMSMember)netMbr).getUUID()).append(")");
+//      }
-    byte[] address = getIpAddress().getAddress();
+    byte[] address = getInetAddress().getAddress();
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
+    netMbr.writeAdditionalData(out);
-     // do it the way we like
-     ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord,
+     netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version,
-     ((JGroupMember)ipAddr).getAddress().setVersionOrdinal(this.version);
+     netMbr.readAdditionalData(in);
+    toDataPre_GFE_9_0_0_0(out);
+    getNetMember().writeAdditionalData(out);
+  }
+  
+  
+  public void toDataPre_GFE_9_0_0_0(DataOutput out) throws IOException {
-    // [bruce] disabled to allow post-connect setting of the port for loner systems
-//    Assert.assertTrue(getPort() > 0);
-//    if (this.getPort() == 0) {
-//      InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG,
-//          "Serializing ID with zero port", new Exception("Stack trace"));
-//    }
-
-    DataSerializer.writeInetAddress(getIpAddress(), out);
+    DataSerializer.writeInetAddress(getInetAddress(), out);
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    DataSerializer.writeInetAddress(getIpAddress(), out);
+    DataSerializer.writeInetAddress(getInetAddress(), out);
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    // do it the way we like it.
+    fromDataPre_9_0_0_0(in);
+    netMbr.readAdditionalData(in);
+  }
+  
+  public void fromDataPre_9_0_0_0(DataInput in)
+  throws IOException, ClassNotFoundException {
-    ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
-    ((JGroupMember)ipAddr).getAddress().setVersionOrdinal(this.version);
+    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version, attr);
-    // do it the way we like it.
-    ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
+    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, 
+        InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
-     ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
+     netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, 
+         InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
-     DataSerializer.writeInetAddress(getIpAddress(), out);
+     DataSerializer.writeInetAddress(getInetAddress(), out);
-     if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-     if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+     if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+     if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    this.ipAddr.setPort(p);
+    this.netMbr.setPort(p);
-    return this.ipAddr.getIpAddress().getCanonicalHostName();
+    return this.netMbr.getInetAddress().getCanonicalHostName();
-    if (ipAddr.getIpAddress() instanceof Inet4Address){
+    if (netMbr.getInetAddress() instanceof Inet4Address){

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 UPD42 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS83 INS39 INS42 INS44 INS43 INS43 INS8 UPD42 UPD42 MOV21 INS21 INS54 INS21 INS43 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS42 INS21 INS21 INS7 INS8 INS12 UPD42 MOV43 MOV43 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS40 UPD42 MOV22 INS32 INS21 INS44 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS42 INS42 INS7 INS43 INS42 INS21 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS32 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 INS32 INS42 INS7 UPD42 UPD42 INS32 INS42 INS32 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS9 INS22 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL22 DEL42 DEL43 DEL62 DEL8 DEL25 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL32 DEL52 DEL42 DEL22 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21