GEODE-2644: Cleanup config classes (#2518)

Add LogConfigSupplier and some additional changes to LogConfig for
logging changes.

+import java.net.InetSocketAddress;
+import java.util.HashSet;
-  protected Object checkAttribute(String attName, Object value) {
+  Object checkAttribute(String attName, Object value) {
-
-  protected void minMaxCheck(String propName, int value, int minValue, int maxValue) {
+  private void minMaxCheck(String propName, int value, int minValue, int maxValue) {
-                  new Object[] {propName, Integer.valueOf(value), Integer.valueOf(minValue)}));
+                  propName, value, minValue));
-                  new Object[] {propName, Integer.valueOf(value), Integer.valueOf(maxValue)}));
+                  propName, value, maxValue));
-                  new Object[] {TCP_PORT, Integer.valueOf(value), CLUSTER_SSL_ENABLED}));
+                  TCP_PORT, value, CLUSTER_SSL_ENABLED));
-                  new Object[] {MCAST_PORT, Integer.valueOf(value), CLUSTER_SSL_ENABLED}));
+                  MCAST_PORT, value, CLUSTER_SSL_ENABLED));
-              .toLocalizedString(new Object[] {MCAST_ADDRESS, value}));
+              .toLocalizedString(MCAST_ADDRESS, value));
-              .toLocalizedString(new Object[] {value, SocketCreator.getMyAddresses()}));
+              .toLocalizedString(value, SocketCreator.getMyAddresses()));
-              .toLocalizedString(new Object[] {value, SocketCreator.getMyAddresses()}));
+              .toLocalizedString(value, SocketCreator.getMyAddresses()));
-    if (value.booleanValue() && (getMcastPort() != 0)) {
+    if (value && getMcastPort() != 0) {
-              .toLocalizedString(new Object[] {CLUSTER_SSL_ENABLED, value, MCAST_PORT}));
+              .toLocalizedString(CLUSTER_SSL_ENABLED, value, MCAST_PORT));
-              .toLocalizedString(new Object[] {value, SocketCreator.getMyAddresses()}));
+              .toLocalizedString(value, SocketCreator.getMyAddresses()));
-    // this check is specific for Jayesh's use case of WAN BootStraping
+    // this check is specific for Jayesh's use case of WAN BootStrapping
-                .toLocalizedString(new Object[] {DISTRIBUTED_SYSTEM_ID, Integer.valueOf(value),
-                    Integer.valueOf(MIN_DISTRIBUTED_SYSTEM_ID)}));
+                .toLocalizedString(DISTRIBUTED_SYSTEM_ID, value,
+                    MIN_DISTRIBUTED_SYSTEM_ID));
-              .toLocalizedString(new Object[] {DISTRIBUTED_SYSTEM_ID, Integer.valueOf(value),
-                  Integer.valueOf(MAX_DISTRIBUTED_SYSTEM_ID)}));
+              .toLocalizedString(DISTRIBUTED_SYSTEM_ID, value,
+                  MAX_DISTRIBUTED_SYSTEM_ID));
-   * <p>
-   * <p>
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-    Set locs = new java.util.HashSet();
+    Set<InetSocketAddress> locs = new HashSet<>();
-      StringBuffer locatorsb = new StringBuffer(); // string for this locator is accumulated in this
-                                                   // buffer
+      // string for this locator is accumulated in this buffer
+      StringBuilder locatorsb = new StringBuilder();
-      int portVal = 0;
+      int portVal;
-                  .toLocalizedString(new Object[] {value, Integer.valueOf(portVal)}));
+                  .toLocalizedString(value, portVal));
-      java.net.InetSocketAddress sockAddr = new java.net.InetSocketAddress(hostAddress, portVal);
+      InetSocketAddress sockAddr = new InetSocketAddress(hostAddress, portVal);
-        locs.add(new java.net.InetSocketAddress(hostAddress, portVal));
+        locs.add(new InetSocketAddress(hostAddress, portVal));
-              .toLocalizedString(new Object[] {MCAST_FLOW_CONTROL, Integer.valueOf(value),
-                  Integer.valueOf(MIN_FC_BYTE_ALLOWANCE)}));
+              .toLocalizedString(MCAST_FLOW_CONTROL, value,
+                  MIN_FC_BYTE_ALLOWANCE));
-              .toLocalizedString(new Object[] {MCAST_FLOW_CONTROL, new Float(fvalue),
-                  new Float(MIN_FC_RECHARGE_THRESHOLD)}));
+              .toLocalizedString(MCAST_FLOW_CONTROL, fvalue,
+                  MIN_FC_RECHARGE_THRESHOLD));
-              .toLocalizedString(new Object[] {MCAST_FLOW_CONTROL, new Float(fvalue),
-                  new Float(MAX_FC_RECHARGE_THRESHOLD)}));
+              .toLocalizedString(MCAST_FLOW_CONTROL, fvalue,
+                  MAX_FC_RECHARGE_THRESHOLD));
-              .toLocalizedString(new Object[] {MCAST_FLOW_CONTROL, Integer.valueOf(value),
-                  Integer.valueOf(MIN_FC_RECHARGE_BLOCK_MS)}));
+              .toLocalizedString(MCAST_FLOW_CONTROL, value,
+                  MIN_FC_RECHARGE_BLOCK_MS));
-              .toLocalizedString(new Object[] {MCAST_FLOW_CONTROL, Integer.valueOf(value),
-                  Integer.valueOf(MAX_FC_RECHARGE_BLOCK_MS)}));
+              .toLocalizedString(MCAST_FLOW_CONTROL, value,
+                  MAX_FC_RECHARGE_BLOCK_MS));
-              .toLocalizedString(new Object[] {MEMBERSHIP_PORT_RANGE, value[0] + "-" + value[1],
-                  Integer.valueOf(3)}));
+              .toLocalizedString(MEMBERSHIP_PORT_RANGE, value[0] + "-" + value[1],
+                  3));
-              .toLocalizedString(new Object[] {SECURITY_PEER_AUTH_INIT, value, mcastInfo}));
+              .toLocalizedString(SECURITY_PEER_AUTH_INIT, value, mcastInfo));
-              .toLocalizedString(new Object[] {SECURITY_PEER_AUTHENTICATOR, value, mcastInfo}));
+              .toLocalizedString(SECURITY_PEER_AUTHENTICATOR, value, mcastInfo));
-              .toLocalizedString(new Object[] {SECURITY_LOG_LEVEL,
-                  LogWriterImpl.levelToString(value), LogWriterImpl.levelToString(MIN_LOG_LEVEL)}));
+              .toLocalizedString(SECURITY_LOG_LEVEL,
+                  LogWriterImpl.levelToString(value), LogWriterImpl.levelToString(MIN_LOG_LEVEL)));
-              .toLocalizedString(new Object[] {SECURITY_LOG_LEVEL,
-                  LogWriterImpl.levelToString(value), LogWriterImpl.levelToString(MAX_LOG_LEVEL)}));
+              .toLocalizedString(SECURITY_LOG_LEVEL,
+                  LogWriterImpl.levelToString(value), LogWriterImpl.levelToString(MAX_LOG_LEVEL)));
-        || (!protocol.equalsIgnoreCase(GemFireMemcachedServer.Protocol.ASCII.name())
-            && !protocol.equalsIgnoreCase(GemFireMemcachedServer.Protocol.BINARY.name()))) {
+        || !protocol.equalsIgnoreCase(GemFireMemcachedServer.Protocol.ASCII.name())
+            && !protocol.equalsIgnoreCase(GemFireMemcachedServer.Protocol.BINARY.name())) {
-              .toLocalizedString(new Object[] {value, SocketCreator.getMyAddresses()}));
+              .toLocalizedString(value, SocketCreator.getMyAddresses()));
-              .toLocalizedString(new Object[] {value, SocketCreator.getMyAddresses()}));
+              .toLocalizedString(value, SocketCreator.getMyAddresses()));
-                  .toLocalizedString(new Object[] {value,
+                  .toLocalizedString(value,
-                              SecurableCommunicationChannel.LOCATOR.getConstant()}, ",")}));
+                              SecurableCommunicationChannel.LOCATOR.getConstant()}, ",")));
-  // AbstractConfig overriding methods
-
+  @Override
-                .toLocalizedString(new Object[] {attName, attValue, validValueClass.getName()}));
+                .toLocalizedString(attName, attValue, validValueClass.getName()));
-      this.setSecurity(attName, attValue.toString());
+      setSecurity(attName, attValue.toString());
-      this.setSSLProperty(attName, attValue.toString());
+      setSSLProperty(attName, attValue.toString());
+  @Override
-      return LogWriterImpl.levelToString(this.getLogLevel());
+      return LogWriterImpl.levelToString(getLogLevel());
-      return LogWriterImpl.levelToString(this.getSecurityLogLevel());
+      return LogWriterImpl.levelToString(getSecurityLogLevel());
-        return this.getSecurity(attName);
+        return getSecurity(attName);
-
-  public boolean isAttributeModifiable(String attName) {
-    checkAttributeName(attName);
-    if (getModifiableAttributes().contains(attName)) {
+  @Override
+  public boolean isAttributeModifiable(String name) {
+    checkAttributeName(name);
+    if (getModifiableAttributes().contains(name)) {
-    if (getUnModifiableAttributes().contains(attName)) {
+    if (getUnModifiableAttributes().contains(name)) {
-
-  ;
-  public List<String> getUnModifiableAttributes() {
+  private List<String> getUnModifiableAttributes() {
+  @Override
-  public static Class _getAttributeType(String attName) {
+  static Class _getAttributeType(String attName) {
-  protected static final Map dcAttDescriptions;
+  static final Map dcAttDescriptions;
-    Map<String, String> m = new HashMap<String, String>();
+    Map<String, String> m = new HashMap<>();
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_ACK_WAIT_THRESHOLD),
-                Integer.valueOf(MIN_ACK_WAIT_THRESHOLD), Integer.valueOf(MIN_ACK_WAIT_THRESHOLD)}));
+            .toLocalizedString(DEFAULT_ACK_WAIT_THRESHOLD,
+                MIN_ACK_WAIT_THRESHOLD, MIN_ACK_WAIT_THRESHOLD));
-            .toLocalizedString(new Object[] {ACK_WAIT_THRESHOLD,
-                Integer.valueOf(DEFAULT_ACK_SEVERE_ALERT_THRESHOLD),
-                Integer.valueOf(MIN_ACK_SEVERE_ALERT_THRESHOLD),
-                Integer.valueOf(MAX_ACK_SEVERE_ALERT_THRESHOLD)}));
+            .toLocalizedString(ACK_WAIT_THRESHOLD,
+                DEFAULT_ACK_SEVERE_ALERT_THRESHOLD,
+                MIN_ACK_SEVERE_ALERT_THRESHOLD,
+                MAX_ACK_SEVERE_ALERT_THRESHOLD));
-        .toLocalizedString(Boolean.valueOf(DEFAULT_DISABLE_TCP)));
+        .toLocalizedString(Boolean.FALSE));
-            .toLocalizedString(new Object[] {LogWriterImpl.levelToString(DEFAULT_LOG_LEVEL),
-                LogWriterImpl.allowedLogLevels()}));
+            .toLocalizedString(LogWriterImpl.levelToString(DEFAULT_LOG_LEVEL),
+                LogWriterImpl.allowedLogLevels()));
-        .toLocalizedString(Integer.valueOf(DEFAULT_LOCATOR_WAIT_TIME)));
+        .toLocalizedString(DEFAULT_LOCATOR_WAIT_TIME));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_TCP_PORT),
-                Integer.valueOf(MIN_TCP_PORT), Integer.valueOf(MAX_TCP_PORT)}));
+            .toLocalizedString(DEFAULT_TCP_PORT,
+                MIN_TCP_PORT, MAX_TCP_PORT));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_MCAST_PORT),
-                Integer.valueOf(MIN_MCAST_PORT), Integer.valueOf(MAX_MCAST_PORT)}));
+            .toLocalizedString(DEFAULT_MCAST_PORT,
+                MIN_MCAST_PORT, MAX_MCAST_PORT));
-            new Object[] {Integer.valueOf(DEFAULT_MCAST_PORT), DEFAULT_MCAST_ADDRESS}));
+            DEFAULT_MCAST_PORT, DEFAULT_MCAST_ADDRESS));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_MCAST_TTL),
-                Integer.valueOf(MIN_MCAST_TTL), Integer.valueOf(MAX_MCAST_TTL)}));
+            .toLocalizedString(DEFAULT_MCAST_TTL,
+                MIN_MCAST_TTL, MAX_MCAST_TTL));
-            .toLocalizedString(Integer.valueOf(DEFAULT_MCAST_SEND_BUFFER_SIZE)));
+            .toLocalizedString(DEFAULT_MCAST_SEND_BUFFER_SIZE));
-            .toLocalizedString(Integer.valueOf(DEFAULT_MCAST_RECV_BUFFER_SIZE)));
+            .toLocalizedString(DEFAULT_MCAST_RECV_BUFFER_SIZE));
-        .toLocalizedString(Integer.valueOf(DEFAULT_MEMBER_TIMEOUT)));
+        .toLocalizedString(DEFAULT_MEMBER_TIMEOUT));
-            .toLocalizedString(Integer.valueOf(DEFAULT_UDP_SEND_BUFFER_SIZE)));
+            .toLocalizedString(DEFAULT_UDP_SEND_BUFFER_SIZE));
-            .toLocalizedString(Integer.valueOf(DEFAULT_UDP_RECV_BUFFER_SIZE)));
+            .toLocalizedString(DEFAULT_UDP_RECV_BUFFER_SIZE));
-        .toLocalizedString(Integer.valueOf(DEFAULT_UDP_FRAGMENT_SIZE)));
+        .toLocalizedString(DEFAULT_UDP_FRAGMENT_SIZE));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_SOCKET_LEASE_TIME),
-                Integer.valueOf(MIN_SOCKET_LEASE_TIME), Integer.valueOf(MAX_SOCKET_LEASE_TIME)}));
+            .toLocalizedString(DEFAULT_SOCKET_LEASE_TIME,
+                MIN_SOCKET_LEASE_TIME, MAX_SOCKET_LEASE_TIME));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_SOCKET_BUFFER_SIZE),
-                Integer.valueOf(MIN_SOCKET_BUFFER_SIZE), Integer.valueOf(MAX_SOCKET_BUFFER_SIZE)}));
+            .toLocalizedString(DEFAULT_SOCKET_BUFFER_SIZE,
+                MIN_SOCKET_BUFFER_SIZE, MAX_SOCKET_BUFFER_SIZE));
-        .toLocalizedString(Boolean.valueOf(DEFAULT_CONSERVE_SOCKETS)));
+        .toLocalizedString(Boolean.TRUE));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_STATISTIC_SAMPLE_RATE),
-                Integer.valueOf(MIN_STATISTIC_SAMPLE_RATE),
-                Integer.valueOf(MAX_STATISTIC_SAMPLE_RATE)}));
+            .toLocalizedString(DEFAULT_STATISTIC_SAMPLE_RATE,
+                MIN_STATISTIC_SAMPLE_RATE,
+                MAX_STATISTIC_SAMPLE_RATE));
-            .toLocalizedString(Boolean.valueOf(DEFAULT_STATISTIC_SAMPLING_ENABLED)));
+            .toLocalizedString(Boolean.TRUE));
-        .toLocalizedString(Boolean.valueOf(DEFAULT_SSL_ENABLED)));
+        .toLocalizedString(Boolean.FALSE));
-            .toLocalizedString(Boolean.valueOf(DEFAULT_SSL_REQUIRE_AUTHENTICATION)));
+            .toLocalizedString(Boolean.TRUE));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_ASYNC_DISTRIBUTION_TIMEOUT),
-                Integer.valueOf(MIN_ASYNC_DISTRIBUTION_TIMEOUT),
-                Integer.valueOf(MAX_ASYNC_DISTRIBUTION_TIMEOUT)}));
-
+            .toLocalizedString(DEFAULT_ASYNC_DISTRIBUTION_TIMEOUT,
+                MIN_ASYNC_DISTRIBUTION_TIMEOUT,
+                MAX_ASYNC_DISTRIBUTION_TIMEOUT));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_ASYNC_QUEUE_TIMEOUT),
-                Integer.valueOf(MIN_ASYNC_QUEUE_TIMEOUT),
-                Integer.valueOf(MAX_ASYNC_QUEUE_TIMEOUT)}));
+            .toLocalizedString(DEFAULT_ASYNC_QUEUE_TIMEOUT,
+                MIN_ASYNC_QUEUE_TIMEOUT,
+                MAX_ASYNC_QUEUE_TIMEOUT));
-            .toLocalizedString(new Object[] {Integer.valueOf(DEFAULT_ASYNC_MAX_QUEUE_SIZE),
-                Integer.valueOf(MIN_ASYNC_MAX_QUEUE_SIZE),
-                Integer.valueOf(MAX_ASYNC_MAX_QUEUE_SIZE)}));
+            .toLocalizedString(DEFAULT_ASYNC_MAX_QUEUE_SIZE,
+                MIN_ASYNC_MAX_QUEUE_SIZE,
+                MAX_ASYNC_MAX_QUEUE_SIZE));
-            .toLocalizedString(Integer.valueOf(DEFAULT_DURABLE_CLIENT_TIMEOUT)));
+            .toLocalizedString(DEFAULT_DURABLE_CLIENT_TIMEOUT));
-            .toLocalizedString(new Object[] {LogWriterImpl.levelToString(DEFAULT_LOG_LEVEL),
-                LogWriterImpl.allowedLogLevels()}));
+            .toLocalizedString(LogWriterImpl.levelToString(DEFAULT_LOG_LEVEL),
+                LogWriterImpl.allowedLogLevels()));
-            .toLocalizedString(Integer.valueOf(DEFAULT_SECURITY_PEER_VERIFYMEMBER_TIMEOUT)));
+            .toLocalizedString(DEFAULT_SECURITY_PEER_VERIFYMEMBER_TIMEOUT));
-
+  @Override
+  @Override
-  public static InetAddress _getDefaultMcastAddress() {
+  static InetAddress _getDefaultMcastAddress() {
-    String ipLiteral = "239.192.81.1";
+      String ipLiteral = "239.192.81.1";
-  /****************************
-   * static initializers to gather all the checkers in this class
-   *************************/
-  static final Map<String, Method> checkers = new HashMap<String, Method>();
+  static final Map<String, Method> checkers = new HashMap<>();

INS26 INS26 MOV31 MOV31 MOV31 MOV31 MOV31 INS40 INS40 UPD83 MOV77 MOV43 UPD42 MOV44 INS77 INS43 UPD42 INS44 MOV77 MOV43 UPD42 MOV44 MOV77 MOV43 UPD42 MOV44 MOV77 MOV43 UPD42 MOV44 MOV77 MOV43 UPD42 MOV44 MOV77 MOV43 UPD42 MOV44 INS78 MOV25 INS78 INS78 UPD83 INS78 INS78 UPD42 INS78 UPD42 MOV41 MOV41 MOV41 INS42 INS80 INS42 INS43 INS42 MOV41 MOV41 MOV41 MOV41 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 MOV27 MOV27 INS42 INS42 INS42 MOV42 UPD43 INS74 MOV32 MOV27 UPD74 INS42 MOV27 UPD42 MOV43 INS43 MOV27 UPD42 UPD42 UPD42 MOV60 UPD43 INS42 INS74 UPD43 UPD43 INS42 INS42 INS42 MOV32 UPD74 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS40 MOV32 MOV32 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS40 MOV42 MOV42 MOV42 INS40 INS40 INS40 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV32 MOV32 MOV42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 INS43 UPD42 INS42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 UPD42 INS42 MOV42 MOV42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 MOV42 MOV42 INS42 UPD43 UPD43 INS42 MOV42 MOV42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV43 INS42 MOV27 MOV34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 MOV32 MOV32 UPD40 INS42 MOV32 UPD40 INS42 MOV32 INS42 MOV42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 MOV32 INS42 MOV42 MOV42 UPD43 INS42 INS42 MOV32 INS42 MOV43 INS42 MOV42 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL42 DEL32 DEL36 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL66 DEL66 DEL40 DEL43 DEL34 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL40 DEL40 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL36 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL52 DEL52 DEL52 DEL52 DEL52 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL42 DEL32 DEL83 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43