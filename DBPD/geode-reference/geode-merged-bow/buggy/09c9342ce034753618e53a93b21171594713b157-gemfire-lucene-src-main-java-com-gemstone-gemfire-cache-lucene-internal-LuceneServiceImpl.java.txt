Requiring lucene index to be created before the region

At the moment, adding an AsyncEventQueue after a region is created has
issues - See GEODE-404.

Therefore, in order to create a lucene index programmatically, the
lucene index needs to be created before the region exists so that we can
create the AEQ ahead of time.

With this change, when an LuceneIndex is created, the actual creation is
deferred in a RegionListener callback. When the region is created, we
add the AEQ to the region attributes and create the colocated regions.

+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.RegionAttributes;
+import com.gemstone.gemfire.internal.cache.InternalRegionArguments;
+import com.gemstone.gemfire.internal.cache.RegionListener;
-  private final Cache cache;
-
-  private final HashMap<String, LuceneIndex> indexMap;
-  
+  
+  private final GemFireCacheImpl cache;
+  private final HashMap<String, LuceneIndex> indexMap = new HashMap<String, LuceneIndex>();;
+  
-
-    // Initialize the Map which maintains indexes
-    this.indexMap = new HashMap<String, LuceneIndex>();
-  public LuceneIndex createIndex(String indexName, String regionPath, String... fields) {
-    LuceneIndexImpl index = createIndexRegions(indexName, regionPath);
-    if (index == null) {
-      return null;
+  public void createIndex(String indexName, String regionPath, String... fields) {
+    StandardAnalyzer analyzer = new StandardAnalyzer();
+    
+    createIndex(indexName, regionPath, analyzer, fields);
+  }
+  
+  @Override
+  public void createIndex(String indexName, String regionPath, Map<String, Analyzer> analyzerPerField) {
+    Analyzer analyzer = new PerFieldAnalyzerWrapper(new StandardAnalyzer(), analyzerPerField);
+    String[] fields = (String[])analyzerPerField.keySet().toArray(new String[analyzerPerField.keySet().size()]);
+
+    createIndex(indexName, regionPath, analyzer, fields);
+  }
+
+  private void createIndex(final String indexName, String regionPath,
+      final Analyzer analyzer, final String... fields) {
+
+    if(!regionPath.startsWith("/")) {
+      regionPath = "/" + regionPath;
+    Region region = cache.getRegion(regionPath);
+    if(region != null) {
+      throw new IllegalStateException("The lucene index must be created before region");
+    }
+    
+    final String dataRegionPath = regionPath;
+    cache.addRegionListener(new RegionListener() {
+      @Override
+      public RegionAttributes beforeCreate(Region parent, String regionName,
+          RegionAttributes attrs, InternalRegionArguments internalRegionArgs) {
+        String path = parent == null ? "/" + regionName : parent.getFullPath() + "/" + regionName;
+        if(path.equals(dataRegionPath)) {
+          String aeqId = LuceneServiceImpl.getUniqueIndexName(indexName, dataRegionPath);
+          AttributesFactory af = new AttributesFactory(attrs);
+          af.addAsyncEventQueueId(aeqId);
+          return af.create();
+        } else {
+          return attrs;
+        }
+      }
+      
+      @Override
+      public void afterCreate(Region region) {
+        if(region.getFullPath().equals(dataRegionPath)) {
+          afterDataRegionCreated(indexName, analyzer, dataRegionPath, fields);
+          cache.removeRegionListener(this);
+        }
+      }
+    });
+    
+  }
+  
+  /**
+   * Finish creating the lucene index after the data region is created .
+   * 
+   * Public because this is called by the Xml parsing code
+   */
+  public void afterDataRegionCreated(final String indexName,
+      final Analyzer analyzer, final String dataRegionPath,
+      final String... fields) {
+    LuceneIndexImpl index = createIndexRegions(indexName, dataRegionPath);
-    index.setAnalyzer(null);
+    index.setAnalyzer(analyzer);
-    return index;
-  public LuceneIndex createIndex(String indexName, String regionPath, Map<String, Analyzer> analyzerPerField) {
-    LuceneIndexImpl index = createIndexRegions(indexName, regionPath);
-    if (index == null) {
-      return null;
-    }
-    
-    Analyzer analyzer = new PerFieldAnalyzerWrapper(new StandardAnalyzer(), analyzerPerField);
-    String[] fields = (String[])analyzerPerField.keySet().toArray(new String[analyzerPerField.keySet().size()]);
-    index.setSearchableFields(fields);
-    index.setAnalyzer(analyzer);
-    index.initialize();
-    registerIndex(index);
-    return index;
-  }
-
-  @Override

INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS31 INS31 INS31 UPD43 MOV78 MOV83 INS39 INS42 MOV44 MOV44 MOV44 INS8 INS39 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 MOV14 INS60 INS21 INS21 INS83 INS43 INS42 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS25 MOV60 MOV25 INS60 INS21 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 MOV21 MOV21 MOV21 MOV21 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS38 INS8 UPD43 UPD27 INS83 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS42 INS42 MOV43 INS59 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS32 INS21 UPD42 UPD42 UPD42 INS53 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS43 INS42 INS42 INS45 INS7 UPD42 UPD42 INS14 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS45 INS42 INS31 INS31 INS45 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS32 INS8 INS42 INS42 INS16 INS42 INS42 INS42 INS60 INS60 MOV21 INS41 INS41 INS32 INS42 INS42 MOV21 MOV21 INS27 INS27 INS27 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS33 INS45 INS42 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL41 DEL33 DEL41 DEL33 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31