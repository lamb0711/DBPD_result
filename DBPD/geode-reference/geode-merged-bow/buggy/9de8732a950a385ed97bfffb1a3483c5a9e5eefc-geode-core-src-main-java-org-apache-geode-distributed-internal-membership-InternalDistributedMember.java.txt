GEODE-2137 client membership IDs contain 17 bytes of useless information

This removes the UUID and member-weight bytes from the serialized form
of event IDs, version tags and client IDs while retaining them for server
IDs in general.

-   * This is the direct channel port. The underlying NetMember must be able to serialize and deliver
-   * this value.
-   */
-  private int dcPort = -1;
-
-  /**
-   * This is the process id of this member on its machine. The underlying NetMember must be able to
-   * serialize and deliver this value.
-   */
-  private int vmPid = -1;
-
-  /**
-   * This is a representation of the type of VM. The underlying NetMember must be able to serialize
-   * and deliver this value.
-   */
-  private int vmKind = DistributionManager.NORMAL_DM_TYPE;
-
-  /**
-   * This is the view identifier where this ID was born, or zero if this is a loner member
-   */
-  private int vmViewId = -1;
-
-  /**
-  /** Internal list of group/role names for this member. */
-  private String[] groups;
-
-   * The name of this member's distributed system connection.
-   * 
-   * @see org.apache.geode.distributed.DistributedSystem#getName
-   */
-  private String name = null;
-
-  /**
+  /** additional membership data */
+  private static final int NETMBR_DATA_BIT = 0x10;
+
-  private transient short version = Version.CURRENT_ORDINAL;
-  /**
-   * User-defined attributes (id and timeout) used by durable clients.
-   */
-  private DurableClientAttributes durableClientAttributes = null;
-
-  private static final Version[] dsfidVersions = new Version[] {Version.GFE_71, Version.GFE_90};
+  private static final Version[] dsfidVersions = new Version[] {Version.GFE_71};
-    this.vmPid = OSProcess.getId();
+    netMbr.setProcessId(OSProcess.getId());
-    synchPayload();
-  public InternalDistributedMember() {
-    this.groups = new String[0];
-  }
+  public InternalDistributedMember() {}
-    this.dcPort = attr.getPort();
-    this.vmPid = attr.getVmPid();
-    this.vmKind = attr.getVmKind();
-    this.vmViewId = attr.getVmViewId();
-    this.name = attr.getName();
-    this.groups = attr.getGroups();
-    this.durableClientAttributes = attr.getDurableClientAttributes();
+
+
-    this.version = netMbr.getVersionOrdinal();
+
+    short version = netMbr.getVersionOrdinal();
-    MemberAttributes attr = m.getAttributes();
-    if (attr == null) {
-      // no extended information available, so this address is crippled
-    } else {
-      this.dcPort = attr.getPort();
-      this.vmPid = attr.getVmPid();
-      this.vmKind = attr.getVmKind();
-      this.vmViewId = attr.getVmViewId();
-      this.name = attr.getName();
-      this.groups = attr.getGroups();
-      this.durableClientAttributes = attr.getDurableClientAttributes();
-    }
-    this.version = m.getVersionOrdinal();
+
+    short version = m.getVersionOrdinal();
-    this.netMbr = MemberFactory.newNetMember(addr, location.getPort());
-    this.vmKind = DistributionManager.NORMAL_DM_TYPE;
-    this.versionObj = Version.CURRENT;
+    netMbr = MemberFactory.newNetMember(addr, location.getPort());
+    netMbr.setVmKind(DistributionManager.NORMAL_DM_TYPE);
+    versionObj = Version.CURRENT;
+    netMbr.setVersion(versionObj);
-    this.vmKind = DistributionManager.NORMAL_DM_TYPE;
+    netMember.setVmKind(DistributionManager.NORMAL_DM_TYPE);
+    netMember.setVersion(version);
-    this.name = n;
+    netMbr.setName(n);
-    this.vmKind = vmKind;
-    this.dcPort = p;
-    this.durableClientAttributes = attr;
+    netMbr.setVmKind(vmKind);
+    netMbr.setDirectPort(p);
+    netMbr.setDurableClientAttributes(attr);
-    this.vmPid = OSProcess.getId();
-    this.groups = groups;
+    netMbr.setGroups(groups);
-    return dcPort;
+    return netMbr.getDirectPort();
-    return vmKind;
+    return netMbr.getVmKind();
-    return this.vmViewId;
+    return netMbr.getVmViewId();
-        final String[] tmpRoles = this.groups;
+        final String[] tmpRoles = netMbr.getGroups();
-    return Collections.unmodifiableList(Arrays.asList(this.groups));
+    return Collections.unmodifiableList(Arrays.asList(netMbr.getGroups()));
-      this.groups = newGroups;
-      synchPayload();
+      netMbr.setGroups(newGroups);
-  private void synchPayload() {
-    netMbr.setAttributes(new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
-        durableClientAttributes));
-  }
-
-    vmKind = p;
-    synchPayload();
+    netMbr.setVmKind(p);
-    this.vmViewId = p;
-    synchPayload();
+    netMbr.setVmViewId(p);
-    return vmPid;
+    return netMbr.getProcessId();
-    this.vmPid = p;
-    synchPayload();
+    netMbr.setProcessId(p);
-    String result = this.name;
+    String result = netMbr.getName();
-    return this.durableClientAttributes;
+    DurableClientAttributes attributes = netMbr.getDurableClientAttributes();
+    if (attributes == null) {
+      attributes = new DurableClientAttributes("", 300);
+      netMbr.setDurableClientAttributes(attributes);
+    }
+    return netMbr.getDurableClientAttributes();
-    if (this.name == null && other.name == null) {
+    String myName = getName();
+    String otherName = other.getName();
+    if (myName == null && otherName == null) {
-    } else if (this.name == null) {
+    } else if (myName == null) {
-    } else if (other.name == null) {
+    } else if (otherName == null) {
-      int i = this.name.compareTo(other.name);
+      int i = myName.compareTo(otherName);
-        if (this.vmViewId >= 0 && other.vmViewId >= 0) {
-          if (this.vmViewId < other.vmViewId) {
+        int thisViewId = getVmViewId();
+        int otherViewId = other.getVmViewId();
+        if (thisViewId >= 0 && otherViewId >= 0) {
+          if (thisViewId < otherViewId) {
-          } else if (this.vmViewId > other.vmViewId) {
+          } else if (thisViewId > otherViewId) {
-      return this.netMbr.compareTo(other.netMbr);
+      return this.netMbr.compareAdditionalData(other.netMbr);
+      int vmPid = netMbr.getProcessId();
+      int vmKind = netMbr.getVmKind();
-      if (this.vmViewId >= 0) {
-        sb.append("<v" + this.vmViewId + ">");
+      int vmViewId = getVmViewId();
+      if (vmViewId >= 0) {
+        sb.append("<v" + vmViewId + ">");
-        if (this.name != null && this.name.length() != 0) {
-          sb.append(":").append(this.name);
+        String name = getName();
+        if (name.length() != 0) {
+          sb.append(":").append(name);
-      if (this.version != Version.CURRENT.ordinal()) {
-        sb.append("(version:").append(Version.toString(this.version)).append(')');
+      short version = netMbr.getVersionOrdinal();
+      if (version != Version.CURRENT.ordinal()) {
+        sb.append("(version:").append(Version.toString(version)).append(')');
-  private void readVersion(int flags, DataInput in) throws IOException {
+  private short readVersion(int flags, DataInput in) throws IOException {
-      this.version = Version.readOrdinal(in);
-      this.versionObj = Version.fromOrdinalNoThrow(this.version, false);
+      short version = Version.readOrdinal(in);
+      this.versionObj = Version.fromOrdinalNoThrow(version, false);
+      return version;
-        this.version = v.ordinal();
+        return v.ordinal();
+      return Version.CURRENT_ORDINAL;
-    Assert.assertTrue(vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
-    out.writeInt(dcPort);
-    out.writeInt(vmPid);
-    out.writeInt(vmKind);
-    out.writeInt(vmViewId);
-    DataSerializer.writeStringArray(this.groups, out);
+    out.writeInt(netMbr.getDirectPort());
+    out.writeInt(netMbr.getProcessId());
+    out.writeInt(netMbr.getVmKind());
+    out.writeInt(netMbr.getVmViewId());
+    DataSerializer.writeStringArray(netMbr.getGroups(), out);
-    DataSerializer.writeString(this.name, out);
+    DataSerializer.writeString(netMbr.getName(), out);
-    DataSerializer.writeString(
-        this.durableClientAttributes == null ? "" : this.durableClientAttributes.getId(), out);
-    DataSerializer.writeInteger(
-        Integer.valueOf(
-            this.durableClientAttributes == null ? 300 : this.durableClientAttributes.getTimeout()),
+    DurableClientAttributes attributes = netMbr.getDurableClientAttributes();
+    DataSerializer.writeString(attributes == null ? "" : attributes.getId(), out);
+    DataSerializer.writeInteger(Integer.valueOf(attributes == null ? 300 : attributes.getTimeout()),
-    Version.writeOrdinal(out, this.version, true);
+    Version.writeOrdinal(out, netMbr.getVersionOrdinal(), true);
-    this.dcPort = in.readInt();
-    this.vmPid = in.readInt();
-    this.vmKind = in.readInt();
-    this.vmViewId = in.readInt();
-    this.groups = DataSerializer.readStringArray(in);
+    int dcPort = in.readInt();
+    int vmPid = in.readInt();
+    int vmKind = in.readInt();
+    int vmViewId = in.readInt();
+    String[] groups = DataSerializer.readStringArray(in);
-    this.name = DataSerializer.readString(in);
+    String name = DataSerializer.readString(in);
-    this.durableClientAttributes = new DurableClientAttributes(durableId, durableTimeout);
+    DurableClientAttributes durableClientAttributes =
+        new DurableClientAttributes(durableId, durableTimeout);
-    readVersion(flags, in);
+    short version = readVersion(flags, in);
-    if (this.version >= Version.GFE_90.ordinal()) {
+    if (version >= Version.GFE_90.ordinal()) {
-        // old version quand-meme
+        // old version
-    Assert.assertTrue(this.vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
-    toDataPre_GFE_9_0_0_0(out);
-    if (this.version >= Version.GFE_90.ordinal()) {
-      getNetMember().writeAdditionalData(out);
-    }
-  }
-
-
-  public void toDataPre_GFE_9_0_0_0(DataOutput out) throws IOException {
+    boolean writeNetMbrData = netMbr.hasAdditionalData();
+    if (writeNetMbrData) {
+      flags |= NETMBR_DATA_BIT;
+    }
-    out.writeInt(dcPort);
-    out.writeInt(vmPid);
+    out.writeInt(netMbr.getDirectPort());
+    out.writeInt(netMbr.getProcessId());
+    int vmKind = netMbr.getVmKind();
-    DataSerializer.writeStringArray(this.groups, out);
+    DataSerializer.writeStringArray(netMbr.getGroups(), out);
-    DataSerializer.writeString(this.name, out);
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    DataSerializer.writeString(netMbr.getName(), out);
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-      DataSerializer.writeString(String.valueOf(this.vmViewId), out);
+      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
-    DataSerializer.writeString(
-        this.durableClientAttributes == null ? "" : this.durableClientAttributes.getId(), out);
-    DataSerializer.writeInteger(
-        Integer.valueOf(
-            this.durableClientAttributes == null ? 300 : this.durableClientAttributes.getTimeout()),
-        out);
-    Version.writeOrdinal(out, this.version, true);
+    DurableClientAttributes durableClientAttributes = netMbr.getDurableClientAttributes();
+    DataSerializer
+        .writeString(durableClientAttributes == null ? "" : durableClientAttributes.getId(), out);
+    DataSerializer.writeInteger(Integer.valueOf(
+        durableClientAttributes == null ? 300 : durableClientAttributes.getTimeout()), out);
+    short version = netMbr.getVersionOrdinal();
+    Version.writeOrdinal(out, version, true);
+
+    if (version >= Version.GFE_90.ordinal() && writeNetMbrData) {
+      getNetMember().writeAdditionalData(out);
+    }
-    Assert.assertTrue(vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
-    out.writeInt(dcPort);
-    out.writeInt(vmPid);
-    out.writeByte(vmKind);
-    DataSerializer.writeStringArray(this.groups, out);
+    out.writeInt(netMbr.getDirectPort());
+    out.writeInt(netMbr.getProcessId());
+    out.writeByte(netMbr.getVmKind());
+    DataSerializer.writeStringArray(netMbr.getGroups(), out);
-    DataSerializer.writeString(this.name, out);
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    DataSerializer.writeString(netMbr.getName(), out);
+    int vmKind = netMbr.getVmKind();
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-      DataSerializer.writeString(String.valueOf(this.vmViewId), out);
+      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
-    DataSerializer.writeString(
-        this.durableClientAttributes == null ? "" : this.durableClientAttributes.getId(), out);
-    DataSerializer.writeInteger(
-        Integer.valueOf(
-            this.durableClientAttributes == null ? 300 : this.durableClientAttributes.getTimeout()),
-        out);
-
+    DurableClientAttributes durableClientAttributes = netMbr.getDurableClientAttributes();
+    DataSerializer
+        .writeString(durableClientAttributes == null ? "" : durableClientAttributes.getId(), out);
+    DataSerializer.writeInteger(Integer.valueOf(
+        durableClientAttributes == null ? 300 : durableClientAttributes.getTimeout()), out);
+
-    fromDataPre_GFE_9_0_0_0(in);
-    // just in case this is just a non-versioned read
-    // from a file we ought to check the version
-    if (this.version >= Version.GFE_90.ordinal()) {
-      try {
-        netMbr.readAdditionalData(in);
-      } catch (EOFException e) {
-        // nope - it's from a pre-GEODE client or WAN site
-      }
-    }
-  }
-
-  public void fromDataPre_GFE_9_0_0_0(DataInput in) throws IOException, ClassNotFoundException {
-    this.dcPort = in.readInt();
-    this.vmPid = in.readInt();
-    this.vmKind = in.readUnsignedByte();
-    this.groups = DataSerializer.readStringArray(in);
+    int dcPort = in.readInt();
+    int vmPid = in.readInt();
+    int vmKind = in.readUnsignedByte();
+    String[] groups = DataSerializer.readStringArray(in);
+    int vmViewId = -1;
-    this.name = DataSerializer.readString(in);
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    String name = DataSerializer.readString(in);
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-        this.vmViewId = Integer.parseInt(str);
+        vmViewId = Integer.parseInt(str);
-    this.durableClientAttributes = new DurableClientAttributes(durableId, durableTimeout);
+    DurableClientAttributes durableClientAttributes =
+        durableId.length() > 0 ? new DurableClientAttributes(durableId, durableTimeout) : null;
-    readVersion(flags, in);
+    short version = readVersion(flags, in);
-    MemberAttributes attr = new MemberAttributes(this.dcPort, this.vmPid, this.vmKind,
-        this.vmViewId, this.name, this.groups, this.durableClientAttributes);
+    MemberAttributes attr = new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
+        durableClientAttributes);
-    synchPayload();
-
-    Assert.assertTrue(this.vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
+
+    // just in case this is just a non-versioned read
+    // from a file we ought to check the version
+    if (version >= Version.GFE_90.ordinal() && (flags & NETMBR_DATA_BIT) == NETMBR_DATA_BIT) {
+      netMbr.readAdditionalData(in);
+    }
+
-    this.dcPort = in.readInt();
-    this.vmPid = in.readInt();
-    this.vmKind = in.readUnsignedByte();
-    this.groups = DataSerializer.readStringArray(in);
+    int dcPort = in.readInt();
+    int vmPid = in.readInt();
+    int vmKind = in.readUnsignedByte();
+    String[] groups = DataSerializer.readStringArray(in);
+    int vmViewId = -1;
-    this.name = DataSerializer.readString(in);
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    String name = DataSerializer.readString(in);
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-        this.vmViewId = Integer.parseInt(str);
+        vmViewId = Integer.parseInt(str);
-    this.durableClientAttributes = new DurableClientAttributes(durableId, durableTimeout);
+    DurableClientAttributes durableClientAttributes =
+        durableId.length() > 0 ? new DurableClientAttributes(durableId, durableTimeout) : null;
-    MemberAttributes attr = new MemberAttributes(this.dcPort, this.vmPid, this.vmKind,
-        this.vmViewId, this.name, this.groups, this.durableClientAttributes);
-    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord,
-        InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
+    short version = readVersion(flags, in);
-    synchPayload();
+    MemberAttributes attr = new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
+        durableClientAttributes);
+    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version, attr);
-    Assert.assertTrue(this.vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
-  /** this writes just the parts of the ID that are needed for comparisons and communications */
+  /** this reads an ID written with writeEssentialData */
-    this.vmKind = in.readUnsignedByte();
+    int vmKind = in.readUnsignedByte();
+    int vmViewId = -1;
-
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-        this.vmViewId = Integer.parseInt(str);
+        vmViewId = Integer.parseInt(str);
-    this.name = DataSerializer.readString(in);
+    String name = DataSerializer.readString(in);
-    MemberAttributes attr = new MemberAttributes(this.dcPort, this.vmPid, this.vmKind,
-        this.vmViewId, this.name, this.groups, this.durableClientAttributes);
+    MemberAttributes attr = new MemberAttributes(-1, -1, vmKind, vmViewId, name, null, null);
-    synchPayload();
-
-    if (InternalDataSerializer.getVersionForDataStream(in).compareTo(Version.GFE_90) >= 0) {
+    if (InternalDataSerializer.getVersionForDataStream(in).compareTo(Version.GFE_90) == 0) {
-    Assert.assertTrue(vmKind > 0);
+    Assert.assertTrue(netMbr.getVmKind() > 0);
+    byte vmKind = netMbr.getVmKind();
-    if (this.vmKind == DistributionManager.LONER_DM_TYPE) {
+    if (vmKind == DistributionManager.LONER_DM_TYPE) {
-      DataSerializer.writeString(String.valueOf(this.vmViewId), out);
+      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
-    DataSerializer.writeString(this.name, out);
+    DataSerializer.writeString(netMbr.getName(), out);
-    if (InternalDataSerializer.getVersionForDataStream(out).compareTo(Version.GFE_90) >= 0) {
+    if (InternalDataSerializer.getVersionForDataStream(out).compareTo(Version.GFE_90) == 0) {
-    dcPort = p;
-    synchPayload();
+    netMbr.setDirectPort(p);
-    assert this.vmKind == DistributionManager.LONER_DM_TYPE;
+    assert netMbr.getVmKind() == DistributionManager.LONER_DM_TYPE;
-    synchPayload();
-    return this.vmPid;
+    return netMbr.getProcessId();
-    this.version = v.ordinal();
-  @Override
-  public int getSizeInBytes() {
-
-    int size = 0;
-
-    // ipaddr: 1 byte length + 4 bytes (IPv4) or 16 bytes (IPv6)
-    if (netMbr.getInetAddress() instanceof Inet4Address) {
-      size += 5;
-    } else {
-      size += 17;
-    }
-
-    // port: 4 bytes
-    // flags: 1 byte
-    // vmKind: 1 byte
-    size += 6;
-
-    // viewID: String(1+1+numchars)
-    size += (2 + String.valueOf(this.vmViewId).length());
-
-    // empty name: String(1+1)
-    size += 2;
-
-    return size;
-  }
-

MOV31 MOV31 MOV31 INS23 INS31 INS31 MOV29 MOV83 UPD83 MOV83 UPD83 MOV83 MOV39 MOV59 MOV60 MOV8 UPD83 UPD42 MOV44 UPD42 MOV29 UPD42 MOV44 MOV29 MOV83 MOV43 UPD42 MOV42 INS8 UPD39 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 MOV44 MOV43 UPD42 MOV44 MOV43 MOV43 UPD42 UPD42 UPD42 INS34 INS60 INS21 INS21 INS21 MOV21 MOV21 MOV21 MOV6 INS60 INS25 INS41 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 MOV21 MOV21 MOV21 MOV60 MOV25 MOV25 MOV25 MOV21 INS60 INS25 MOV21 MOV21 MOV21 INS60 MOV21 MOV21 MOV21 MOV25 INS60 MOV21 MOV21 INS60 MOV21 MOV25 MOV21 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 MOV25 INS60 INS60 INS60 MOV25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 MOV25 INS60 INS60 INS60 INS41 UPD66 INS32 INS39 INS59 INS39 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV43 MOV43 INS59 INS27 INS8 INS32 INS43 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 MOV5 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS42 INS8 INS39 INS59 MOV8 INS43 INS59 INS39 INS59 INS27 INS39 INS59 MOV8 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 MOV5 INS59 INS39 MOV59 INS43 INS59 INS43 INS59 INS39 INS59 MOV43 INS59 INS27 MOV8 INS39 INS59 INS39 INS59 INS39 INS59 INS5 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS39 INS59 MOV43 UPD66 INS39 INS59 INS39 INS59 UPD43 MOV43 INS59 MOV43 MOV59 UPD27 INS39 INS59 UPD27 INS32 INS32 INS42 INS42 MOV32 INS42 MOV32 UPD42 MOV32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS33 MOV21 MOV21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS60 INS60 INS60 INS41 INS41 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV14 INS42 MOV32 INS42 INS42 INS32 INS21 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 MOV27 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 UPD42 MOV42 INS16 INS42 INS32 INS42 MOV14 MOV27 INS27 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS43 INS85 INS42 MOV32 INS42 INS38 INS42 INS42 MOV32 INS42 INS42 INS42 INS16 INS42 MOV32 INS42 MOV32 INS42 INS38 INS42 UPD42 INS42 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS42 INS40 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS7 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 MOV14 INS33 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS36 INS42 INS42 INS34 INS27 MOV14 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 MOV43 MOV38 MOV38 INS42 INS42 INS42 INS33 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 UPD42 INS42 INS42 INS60 INS60 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS60 INS25 INS42 INS32 INS42 INS42 MOV32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS34 INS39 INS59 INS39 INS59 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 MOV8 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 MOV32 MOV34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL40 DEL59 DEL23 DEL66 DEL65 DEL29 DEL23 DEL66 DEL65 DEL29 DEL83 DEL23 DEL66 DEL65 DEL40 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL83 DEL83 DEL39 DEL42 DEL40 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL40 DEL52 DEL42 DEL22 DEL7 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL34 DEL3 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL41 DEL8 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL32 DEL21 DEL39 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL83 DEL42 DEL31 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL27 DEL27 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL60 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL7 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL78 DEL39 DEL42 DEL34 DEL59 DEL60 DEL32 DEL42 DEL43 DEL62 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL32 DEL27 DEL36 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL41 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21