GEODE-6861: Have CacheElement support multi groups by default (#3749)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* Remove MultiGroupCacheElement and RuntimeIndex
* does not allow create element in multiple groups at a time
-import org.apache.geode.management.configuration.MultiGroupCacheElement;
-        if (filter.getGroup() == null || // if listing all groups
-            group.equals(filter.getGroup()) || // if filter group matches this group
-            element instanceof MultiGroupCacheElement) { // if element can span multi groups
-          element.setGroup(group);
-          resultList.add(element);
-        }
+        element.setGroup(group);
+        resultList.add(element);
-    if (resultList.get(0) instanceof MultiGroupCacheElement) {
-      List<R> multiGroupList = new ArrayList<>();
-      for (R element : resultList) {
-        int index = multiGroupList.indexOf(element);
-        if (index >= 0) {
-          MultiGroupCacheElement exist = (MultiGroupCacheElement) multiGroupList.get(index);
-          exist.getGroups().add(element.getGroup());
-        } else {
-          multiGroupList.add(element);
-        }
-      }
-      if (StringUtils.isNotBlank(filter.getGroup())) {
-        multiGroupList = multiGroupList.stream()
-            .filter(e -> ((MultiGroupCacheElement) e).getGroups().contains(filter.getConfigGroup()))
-            .collect(Collectors.toList());
-      }
-      // if "cluster" is the only group, clear it
-      for (R elem : multiGroupList) {
-        MultiGroupCacheElement element = (MultiGroupCacheElement) elem;
-        if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
-          element.getGroups().clear();
-        }
-      }
-      resultList = multiGroupList;
-    } else {
-      // for non-MultiGroup CacheElement, just clear out the "cluster" group
-      for (R element : resultList) {
-        if (CacheElement.CLUSTER.equals(element.getGroup())) {
-          element.setGroup(null);
-        }
+
+    List<R> consolidatedConfigList = new ArrayList<>();
+    for (R element : resultList) {
+      int index = consolidatedConfigList.indexOf(element);
+      if (index >= 0) {
+        R exist = consolidatedConfigList.get(index);
+        exist.getGroups().add(element.getGroup());
+      } else {
+        consolidatedConfigList.add(element);
+    if (StringUtils.isNotBlank(filter.getGroup())) {
+      consolidatedConfigList = consolidatedConfigList.stream()
+          .filter(e -> (e.getGroups().contains(filter.getConfigGroup())))
+          .collect(Collectors.toList());
+    }
+    // if "cluster" is the only group, clear it
+    for (R element : consolidatedConfigList) {
+      if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
+        element.getGroups().clear();
+      }
+    }
+    resultList = consolidatedConfigList;
+
+

MOV8 MOV60 MOV60 MOV25 MOV25 MOV60 MOV70 MOV25 MOV21 MOV41 UPD42 UPD42 UPD42 UPD42 MOV8 MOV42 UPD42 UPD42 UPD43 UPD42 INS32 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 INS36 INS32 MOV32 MOV42 MOV32 INS42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL25 DEL8 DEL42 DEL43 DEL32 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL42 DEL43 DEL62 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8