GEODE-1494: Allowing stats to be measured with callbacks

Adding support to measure statistics with suppliers that are sampled
every sample interval. The suppliers are invoked in a separate thread
than the stat sampler so that slow suppliers won't screw up all stats.

+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.DoubleSupplier;
+import java.util.function.IntSupplier;
+import java.util.function.LongSupplier;
+import java.util.function.Supplier;
+
+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.internal.util.concurrent.CopyOnWriteHashMap;
+
+import org.apache.logging.log4j.Logger;
+  /** logger - not private for tests */
+  static Logger logger = LogService.getLogger();
+  /**
+   * Suppliers of int sample values to be sampled every sample-interval
+   */
+  private final CopyOnWriteHashMap<Integer, IntSupplier> intSuppliers = new CopyOnWriteHashMap<>();
+  /**
+   * Suppliers of long sample values to be sampled every sample-interval
+   */
+  private final CopyOnWriteHashMap<Integer, LongSupplier> longSuppliers = new CopyOnWriteHashMap<>();
+  /**
+   * Suppliers of double sample values to be sampled every sample-interval
+   */
+  private final CopyOnWriteHashMap<Integer, DoubleSupplier> doubleSuppliers = new CopyOnWriteHashMap<>();
+
+  /**
+   * Suppliers that have previously failed. Tracked to avoid logging many messages about
+   * a failing supplier
+   */
+  private final Set<Object> flakySuppliers = new HashSet<Object>();
+
+   * Increments the value of the statistic of type <code>double</code> at
+   * the given offset by a given amount, but performs no type checking.
+   */
+  protected abstract void _incDouble(int offset, double delta);
+
+  /**
-   * Increments the value of the statistic of type <code>double</code> at
-   * the given offset by a given amount, but performs no type checking.
+   * Invoke sample suppliers to retrieve the current value for
+   * the suppler controlled sets and update the stats to reflect
+   * the supplied values.
+   * @return the number of callback errors that occurred while
+   * sampling stats
-  protected abstract void _incDouble(int offset, double delta);
+  public int invokeSuppliers() {
+    int errors = 0;
+    for(Map.Entry<Integer, IntSupplier> entry: intSuppliers.entrySet()) {
+      try {
+        _setInt(entry.getKey(), entry.getValue().getAsInt());
+      } catch(Throwable t) {
+        logSupplierError(t, entry.getKey(), entry.getValue());
+        errors++;
+      }
+    }
+    for(Map.Entry<Integer, LongSupplier> entry: longSuppliers.entrySet()) {
+      try {
+        _setLong(entry.getKey(), entry.getValue().getAsLong());
+      } catch(Throwable t) {
+        logSupplierError(t, entry.getKey(), entry.getValue());
+        errors++;
+      }
+    }
+    for(Map.Entry<Integer, DoubleSupplier> entry: doubleSuppliers.entrySet()) {
+      try {
+        _setDouble(entry.getKey(), entry.getValue().getAsDouble());
+      } catch(Throwable t) {
+        logSupplierError(t, entry.getKey(), entry.getValue());
+        errors++;
+      }
+    }
+
+    return errors;
+  }
+
+  private void logSupplierError(final Throwable t, int statId, Object supplier) {
+    if(flakySuppliers.add(supplier)) {
+      logger.warn("Error invoking supplier for stat {}, id {}", this.getTextId(), statId, t);
+    }
+  }
+
+  /**
+   * @return the number of statistics that are measured using supplier callbacks
+   */
+  public int getSupplierCount() {
+    return intSuppliers.size() + doubleSuppliers.size() + longSuppliers.size();
+  }
+
+  @Override
+  public IntSupplier setIntSupplier(final int id, final IntSupplier supplier) {
+    if(id >= type.getIntStatCount()) {
+      throw new IllegalArgumentException("Id " + id + " is not in range for stat" + type);
+    }
+    return intSuppliers.put(id, supplier);
+  }
+
+  @Override
+  public IntSupplier setIntSupplier(final String name, final IntSupplier supplier) {
+    return setIntSupplier(nameToId(name), supplier);
+  }
+
+  @Override
+  public IntSupplier setIntSupplier(final StatisticDescriptor descriptor, final IntSupplier supplier) {
+    return setIntSupplier(getIntId(descriptor), supplier);
+  }
+
+  @Override
+  public LongSupplier setLongSupplier(final int id, final LongSupplier supplier) {
+    if(id >= type.getLongStatCount()) {
+      throw new IllegalArgumentException("Id " + id + " is not in range for stat" + type);
+    }
+    return longSuppliers.put(id, supplier);
+  }
+
+  @Override
+  public LongSupplier setLongSupplier(final String name, final LongSupplier supplier) {
+    return setLongSupplier(nameToId(name), supplier);
+  }
+
+  @Override
+  public LongSupplier setLongSupplier(final StatisticDescriptor descriptor, final LongSupplier supplier) {
+    return setLongSupplier(getLongId(descriptor), supplier);
+  }
+
+  @Override
+  public DoubleSupplier setDoubleSupplier(final int id, final DoubleSupplier supplier) {
+    if(id >= type.getDoubleStatCount()) {
+      throw new IllegalArgumentException("Id " + id + " is not in range for stat" + type);
+    }
+    return doubleSuppliers.put(id, supplier);
+  }
+
+  @Override
+  public DoubleSupplier setDoubleSupplier(final String name, final DoubleSupplier supplier) {
+    return setDoubleSupplier(nameToId(name), supplier);
+  }
+
+  @Override
+  public DoubleSupplier setDoubleSupplier(final StatisticDescriptor descriptor, final DoubleSupplier supplier) {
+    return setDoubleSupplier(getDoubleId(descriptor), supplier);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS42 INS42 INS32 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS43 INS43 INS43 INS42 INS14 INS65 INS43 INS43 INS42 INS14 INS65 INS65 INS60 INS70 INS70 INS70 INS41 INS83 INS43 INS42 INS39 INS42 INS43 INS42 INS25 INS65 INS41 INS42 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS66 INS42 INS42 INS66 INS42 INS42 INS42 INS74 INS66 INS42 INS42 INS42 INS74 INS66 INS42 INS42 INS42 INS74 INS66 INS66 INS42 INS42 INS74 INS66 INS66 INS66 INS66 INS66 INS39 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS44 INS32 INS8 INS42 INS42 INS42 INS32 INS8 INS66 INS27 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS43 INS42 INS34 INS74 INS42 INS42 INS42 INS54 INS74 INS42 INS42 INS42 INS54 INS74 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS21 INS32 INS32 INS32 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS8 INS12 INS43 INS43 INS43 INS8 INS12 INS43 INS43 INS43 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS32 INS42 INS42 INS43 INS27 INS43 INS27 INS43 INS27 INS32 INS43 INS42 INS21 INS21 INS32 INS43 INS42 INS21 INS21 INS32 INS43 INS42 INS21 INS21 INS52 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS37 INS42 INS32 INS32 INS42 INS32 INS37 INS42 INS32 INS32 INS42 INS32 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42