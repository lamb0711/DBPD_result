Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.cache.query.internal.Bag;
-import com.gemstone.gemfire.cache.query.internal.LinkedStructSet;
-import com.gemstone.gemfire.cache.query.internal.ResultsBag;
-import com.gemstone.gemfire.cache.query.internal.StructBag;
+import com.gemstone.gemfire.cache.query.internal.StructFields;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.Chunk;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-      CompiledValue iterOp, RuntimeIterator indpndntIr,
+      @Retained CompiledValue iterOp, RuntimeIterator indpndntIr,
-  private void addToResultsBagWithUnionOrIntersection(Collection results,
+  private void addToResultsWithUnionOrIntersection(Collection results,
-  private void addToStructBagWithUnionOrIntersection(Collection results,
+  private void addToStructsWithUnionOrIntersection(Collection results,
-      if( results instanceof StructBag) {
-        ((StructBag)results).addFieldValues(values);
+      if( results instanceof StructFields) {
+        ((StructFields)results).addFieldValues(values);
-        LinkedStructSet lss = (LinkedStructSet)results;
-        StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-        lss.add(structImpl);
+        //The results could be LinkedStructSet or SortedResultsBag or StructSet
+        //LinkedStructSet lss = (LinkedStructSet)results;
+        SelectResults sr = (SelectResults)results;
+        StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+        //lss.add(structImpl);
+        sr.add(structImpl);
-        if(results instanceof StructBag) {
-          int numOcc = ((StructBag)intermediateResults).occurrences(values);
+        if(results instanceof StructFields) {
+          int numOcc = intermediateResults.occurrences(values);
-            ((StructBag)results).addFieldValues(values);
-            ((StructBag)intermediateResults).removeFieldValues(values);
+            ((StructFields)results).addFieldValues(values);
+            ((StructFields)intermediateResults).removeFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( intermediateResults.remove(structImpl)) {
+            sr.add(structImpl);
-        if( results instanceof StructBag) {
-          ((StructBag)results).addFieldValues(values);
+        if( results instanceof StructFields) {
+          ((StructFields)results).addFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( ((SelectResults)intermediateResults).remove(structImpl)) {
+            sr.add(structImpl);
-      this.addToResultsBagWithUnionOrIntersection(result, intermediateResults,
+      this.addToResultsWithUnionOrIntersection(result, intermediateResults,
-      if (result instanceof StructBag || result instanceof LinkedStructSet) {
+      //TODO : Asif : Optimize this . This condition looks ugly.
+     /* if (result instanceof StructBag || result instanceof LinkedStructSet
+          || result instanceof LinkedStructBag) {*/
+      boolean isStruct = result instanceof SelectResults 
+          && ((SelectResults)result).getCollectionType().getElementType() != null
+          && ((SelectResults)result).getCollectionType().getElementType().isStructType();
+      if (isStruct) {
-        this.addToStructBagWithUnionOrIntersection(result, intermediateResults,
+        this.addToStructsWithUnionOrIntersection(result, intermediateResults,
-        this.addToResultsBagWithUnionOrIntersection(result,
+        this.addToResultsWithUnionOrIntersection(result,
-  private void removeFromResultsBagWithUnionOrIntersection(Collection results,
+  private void removeFromResultsWithUnionOrIntersection(Collection results,
-        int numOcc = ((ResultsBag)results).occurrences(value);
+        int numOcc = ((SelectResults)results).occurrences(value);
-  private void removeFromStructBagWithUnionOrIntersection(Collection results,
+  private void removeFromStructsWithUnionOrIntersection(Collection results,
-      Object values[])
+      Object values[], ExecutionContext context)
-    if (intermediateResults == null) {
-      ((StructBag)results).removeFieldValues(values);
+    if (intermediateResults == null) {      
+        ((StructFields)results).removeFieldValues(values);      
-        int numOcc = ((StructBag)results).occurrences(values);
+        int numOcc = ((SelectResults)results).occurrences(values);
-          ((StructBag)results).removeFieldValues(values);
-          ((StructBag)intermediateResults).addFieldValues(values);
+            ((StructFields)results).removeFieldValues(values);
+            ((StructFields)intermediateResults).addFieldValues(values);
+          
-      else {
-        ((StructBag)results).removeFieldValues(values);
+      else {        
+        ((StructFields)results).removeFieldValues(values);        
-      this.removeFromResultsBagWithUnionOrIntersection(result,
+      this.removeFromResultsWithUnionOrIntersection(result,
-      if (result instanceof StructBag) {
+      if (result instanceof StructFields) {
-        this.removeFromStructBagWithUnionOrIntersection(result,
-            intermediateResults, isIntersection, values);
+        this.removeFromStructsWithUnionOrIntersection(result,
+            intermediateResults, isIntersection, values, context);
-        this.removeFromResultsBagWithUnionOrIntersection(result,
+        this.removeFromResultsWithUnionOrIntersection(result,
-      ExecutionContext context) {
+      ExecutionContext context) {   
-      if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-        if (result instanceof ResultsBag) {
-          return (((ResultsBag)result).distinctElementsSize() == limit);
-        } else if (result instanceof StructBag) {
-          return (((StructBag)result).distinctElementsSize() == limit);
-        }
+     /* if (!context.isDistinct()) {
+        return ((Bag)result).size() == limit;
-      }
+      }*/
+      return result.size() == limit;
-        Object val = re.getValueInVM(context.getPartitionedRegion()); // OFFHEAP incrc, deserialize, decrc
+        @Released Object val = re.getValueInVM(context.getPartitionedRegion());
+        Chunk valToFree = null;
+        if (val instanceof Chunk) {
+          valToFree = (Chunk)val;
+        }
+        try {
+        } finally {
+          if (valToFree != null) {
+            valToFree.release();
+          }
+        }
-        ExecutionContext context) {
+        ExecutionContext context) {     
-        if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-          if (result instanceof ResultsBag) {
-            return (((ResultsBag)result).distinctElementsSize() == limit);
-          } else if (result instanceof StructBag) {
-            return (((StructBag)result).distinctElementsSize() == limit);
-          }
+        if (!context.isDistinct()) {
+          return ((Bag)result).size() == limit;

MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 INS40 UPD40 INS40 UPD42 UPD42 UPD42 UPD42 INS44 INS8 INS78 INS43 INS42 INS25 MOV41 INS42 INS42 MOV27 MOV8 INS60 INS39 INS59 INS42 INS27 UPD43 UPD42 INS42 INS27 UPD42 UPD43 MOV32 MOV42 INS8 INS38 MOV8 UPD42 UPD43 MOV43 INS27 INS32 UPD42 INS42 UPD42 MOV60 INS60 INS25 INS54 INS32 UPD42 UPD42 UPD42 UPD43 UPD43 INS62 INS27 INS32 INS42 UPD42 UPD42 UPD43 UPD42 INS42 UPD42 INS78 INS43 INS59 INS62 INS8 MOV8 INS8 MOV42 MOV42 INS27 UPD43 MOV43 UPD42 UPD43 MOV43 UPD42 UPD43 MOV43 INS42 INS43 INS32 INS33 INS32 INS42 UPD42 INS42 INS42 INS42 INS33 INS42 INS43 INS21 INS25 MOV32 MOV42 UPD43 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS36 INS42 UPD43 INS42 INS7 INS27 INS8 UPD42 UPD42 INS42 UPD43 MOV43 UPD43 MOV43 INS36 INS42 INS11 UPD43 UPD43 UPD42 INS42 INS11 INS42 INS33 INS21 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS11 INS43 INS42 UPD42 UPD42 UPD43 UPD43 INS43 INS42 INS32 UPD43 UPD42 UPD42 INS43 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD43 UPD43 UPD42 UPD42 INS42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL27 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL27 DEL36 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL25 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL27 DEL36 DEL42 DEL43 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL27 DEL36 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL25 DEL25 DEL8