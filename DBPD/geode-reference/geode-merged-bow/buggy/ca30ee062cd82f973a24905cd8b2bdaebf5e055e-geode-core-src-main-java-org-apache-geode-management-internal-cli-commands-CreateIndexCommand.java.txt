GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.distributed.internal.InternalClusterConfigurationService;
-import org.apache.geode.management.internal.cli.domain.IndexInfo;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-public class CreateIndexCommand extends InternalGfshCommand {
+public class CreateIndexCommand extends SingleGfshCommand {
-  // TODO : Add optionContext for indexName
-          help = CliStrings.CREATE_INDEX__GROUP__HELP) final String[] group) {
+          help = CliStrings.CREATE_INDEX__GROUP__HELP) final String[] groups) {
-    Result result;
-    final Set<DistributedMember> targetMembers = findMembers(group, memberNameOrID);
+    CommandResult result;
+    final Set<DistributedMember> targetMembers = findMembers(groups, memberNameOrID);
-    IndexInfo indexInfo = new IndexInfo(indexName, indexedExpression, regionPath, indexType);
-    List<CliFunctionResult> functionResults =
-        executeAndGetFunctionResult(createIndexFunction, indexInfo, targetMembers);
-    result = ResultBuilder.buildResult(functionResults);
-    XmlEntity xmlEntity = findXmlEntity(functionResults);
-
-    if (xmlEntity != null) {
-      persistClusterConfiguration(result,
-          () -> ((InternalClusterConfigurationService) getConfigurationService())
-              .addXmlEntity(xmlEntity, group));
+    RegionConfig.Index index = new RegionConfig.Index();
+    index.setName(indexName);
+    index.setExpression(indexedExpression);
+    index.setFromClause(regionPath);
+    if (indexType == IndexType.PRIMARY_KEY) {
+      index.setKeyIndex(true);
+    } else {
+      index.setKeyIndex(false);
+      index.setType(indexType.getName());
+
+    List<CliFunctionResult> functionResults =
+        executeAndGetFunctionResult(createIndexFunction, index, targetMembers);
+    result = ResultBuilder.buildResult(functionResults);
+    result.setConfigObject(index);
+
+  String getValidRegionName(String regionPath, CacheConfig cacheConfig) {
+    // Check to see if the region path contains an alias e.g "/region1 r1"
+    // Then the first string will be the regionPath
+    String[] regionPathTokens = regionPath.trim().split(" ");
+    regionPath = regionPathTokens[0];
+    // check to see if the region path is in the form of "--region=region.entrySet() z"
+    while (regionPath.contains(".") && cacheConfig.findRegionConfiguration(regionPath) == null) {
+      regionPath = regionPath.substring(0, regionPath.lastIndexOf("."));
+    }
+    return regionPath;
+  }
+
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object element) {
+    RegionConfig.Index index = (RegionConfig.Index) element;
+    String regionPath = getValidRegionName(index.getFromClause(), config);
+
+    RegionConfig regionConfig = config.findRegionConfiguration(regionPath);
+    if (regionConfig == null) {
+      throw new EntityNotFoundException("Region " + index.getFromClause() + " not found.");
+    }
+    regionConfig.getIndex().add(index);
+  }

MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 UPD40 UPD40 UPD43 INS31 INS31 UPD42 MOV21 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD42 INS60 INS21 INS21 INS21 INS25 MOV21 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS61 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS21 UPD43 UPD43 MOV43 INS59 INS32 INS32 INS32 INS27 INS8 INS8 MOV74 INS42 INS42 INS5 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 UPD42 INS40 UPD42 MOV42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS21 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 INS43 INS85 INS42 INS32 INS42 INS2 INS32 INS27 INS21 INS40 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS42 INS42 UPD42 INS43 INS32 INS32 INS32 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS34 INS42 INS42 INS45 INS32 INS33 INS7 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS9 INS42 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS34 INS32 INS42 INS45 INS32 INS45 INS42 INS42 INS45 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL86 DEL42 DEL33 DEL27 DEL8 DEL25