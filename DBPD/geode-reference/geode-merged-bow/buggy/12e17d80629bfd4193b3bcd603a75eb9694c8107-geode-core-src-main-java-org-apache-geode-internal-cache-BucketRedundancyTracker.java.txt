GEODE-5478: Modified to not increment low redundancy bucket count twice

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
-  private boolean redundancySatisfied = false;
-  private boolean hasAnyCopies = false;
+  // if true decrement allowed; if false increment allowed
+  private boolean noCopiesDecrementOkay = false;
+  // if true decrement allowed; if false increment allowed
+  private boolean lowRedundancyDecrementOkay = false;
-  private boolean hasEverHadCopies = false;
-    if (!redundancySatisfied) {
-      regionRedundancyTracker.decrementLowRedundancyBucketCount();
-      redundancySatisfied = true;
-    }
-    if (hasEverHadCopies && !hasAnyCopies) {
-      regionRedundancyTracker.decrementNoCopiesBucketCount();
-      hasAnyCopies = true;
-    }
+    decrementLowRedundancy();
+    decrementNoCopies();
-    if (hasAnyCopies && currentBucketHosts == 0) {
-      hasAnyCopies = false;
+    if (currentBucketHosts == 0) {
+      incrementNoCopies();
+    } else if (currentBucketHosts > 0) {
+      decrementNoCopies();
+    }
+  }
+
+  private void decrementNoCopies() {
+    if (noCopiesDecrementOkay) {
+      noCopiesDecrementOkay = false;
+      regionRedundancyTracker.decrementNoCopiesBucketCount();
+    }
+  }
+
+  private void incrementNoCopies() {
+    if (!noCopiesDecrementOkay) {
+      noCopiesDecrementOkay = true;
-    } else if (!hasAnyCopies && currentBucketHosts > 0) {
-      if (hasEverHadCopies) {
-        regionRedundancyTracker.decrementNoCopiesBucketCount();
-      }
-      hasEverHadCopies = true;
-      hasAnyCopies = true;
-
-      if (redundancySatisfied) {
-        regionRedundancyTracker.incrementLowRedundancyBucketCount();
-        redundancySatisfied = false;
-      } else if (!hasAnyCopies && updatedRedundancy >= 0) {
-        regionRedundancyTracker.incrementLowRedundancyBucketCount();
-      }
-    } else if (!redundancySatisfied && updatedRedundancy == targetRedundancy) {
-      regionRedundancyTracker.decrementLowRedundancyBucketCount();
-      redundancySatisfied = true;
+      incrementLowRedundancy();
+    } else if (updatedRedundancy == targetRedundancy) {
+      decrementLowRedundancy();
+  private void decrementLowRedundancy() {
+    if (lowRedundancyDecrementOkay) {
+      lowRedundancyDecrementOkay = false;
+      regionRedundancyTracker.decrementLowRedundancyBucketCount();
+    }
+  }
+
+  private void incrementLowRedundancy() {
+    if (!lowRedundancyDecrementOkay) {
+      lowRedundancyDecrementOkay = true;
+      regionRedundancyTracker.incrementLowRedundancyBucketCount();
+    }
+  }
+

MOV23 MOV31 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD42 UPD42 UPD42 INS21 INS21 INS25 INS25 MOV25 INS25 INS25 INS32 INS32 MOV27 INS8 INS25 UPD42 INS38 MOV8 MOV27 MOV25 INS42 INS8 INS38 MOV8 INS42 INS42 MOV21 MOV27 INS8 INS21 UPD42 MOV42 MOV21 MOV27 MOV21 MOV21 UPD42 MOV42 INS21 MOV21 INS7 INS7 UPD42 INS32 INS42 INS9 UPD42 UPD9 UPD42 INS32 UPD42 UPD9 INS42 INS9 INS42 INS42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL38 DEL8 DEL25 DEL42 DEL38 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL9 DEL7 DEL21 DEL42 DEL38 DEL27 DEL42 DEL9 DEL7 DEL42 DEL38 DEL42 DEL34 DEL27 DEL27 DEL25 DEL8 DEL25 DEL42 DEL27 DEL38 DEL27 DEL25 DEL25