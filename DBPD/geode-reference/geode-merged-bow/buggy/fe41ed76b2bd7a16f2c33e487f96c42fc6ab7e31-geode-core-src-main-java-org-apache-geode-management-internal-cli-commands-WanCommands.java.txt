GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheFactory;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+
+import javax.management.ObjectName;
+
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import org.apache.geode.internal.cache.InternalCache;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicReference;
-import javax.management.ObjectName;
+
-      final Cache cache = CacheFactory.getAnyInstance();
+      final InternalCache cache = getCache();
-    if (senderId != null)
+    if (senderId != null) {
-    // if (memberNameOrId != null)
-    // memberNameOrId = memberNameOrId.trim();
-    //
-    // if (memberNameOrId != null && onGroup != null) {
-    // return ResultBuilder
-    // .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
-    // }
+    }
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-    if (senderId != null)
+    if (senderId != null) {
-    // if (memberNameOrId != null)
-    // memberNameOrId = memberNameOrId.trim();
-    //
-    // if (memberNameOrId != null && onGroup != null) {
-    // return ResultBuilder
-    // .createUserErrorResult(CliStrings.GATEWAY__MSG__OPTIONS);
-    // }
+    }
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-      //
-      // if (memberNameOrId != null && memberNameOrId.length() > 0) {
-      // InfoResultData resultData = ResultBuilder.createInfoResultData();
-      // DistributedMember memberToBeInvoked = CliUtil
-      // .getDistributedMemberByNameOrId(memberNameOrId);
-      //
-      // if (memberToBeInvoked != null) {
-      // String memberId = memberToBeInvoked.getId();
-      // if (cache.getDistributedSystem().getDistributedMember().getId()
-      // .equals(memberId)) {
-      // bean = service.getLocalGatewaySenderMXBean(senderId);
-      // } else {
-      // ObjectName objectName = service.getGatewaySenderMBeanName(memberToBeInvoked,
-      // senderId);
-      // bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-      // }
-      // if (bean != null) {
-      // if (bean.isRunning()) {
-      // if (bean.isPaused()) {
-      // bean.resume();
-      // resultData.addLine(CliStrings.format(
-      // CliStrings.GATEWAY_SENDER_0_IS_RESUMED_ON_MEMBER_1,
-      // new Object[] { senderId, memberId }));
-      // return ResultBuilder.buildResult(resultData);
-      // }
-      // resultData.addLine(CliStrings.format(
-      // CliStrings.GATEWAY_SENDER_0_IS_NOT_PAUSED_ON_MEMBER_1,
-      // new Object[] { senderId, memberId }));
-      // return ResultBuilder.buildResult(resultData);
-      // }
-      // resultData.addLine(CliStrings.format(
-      // CliStrings.GATEWAY_SENDER_0_IS_NOT_RUNNING_ON_MEMBER_1,
-      // new Object[] { senderId, memberId }));
-      // return ResultBuilder.buildResult(resultData);
-      // }
-      // return ResultBuilder.createBadConfigurationErrorResult(CliStrings
-      // .format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-      // new Object[] { senderId, memberId }));
-      // }
-      // return ResultBuilder.createUserErrorResult(CliStrings.format(
-      // CliStrings.GATEWAY_MSG_MEMBER_0_NOT_FOUND,
-      // new Object[] { memberNameOrId }));
-      // }
-      Set<DistributedMember> dsMembers = null;
-      // if (onGroup != null && onGroup.length > 0) {
-      // dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
-      // } else {
-      // dsMembers = CliUtil.getAllNormalMembers(cache);
-      // }
-      // if (dsMembers.isEmpty()) {
-      // return ResultBuilder
-      // .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
-      // }
-      dsMembers = CliUtil.findMembersOrThrow(onGroup, onMember);
+
+      Set<DistributedMember> dsMembers = CliUtil.findMembersOrThrow(onGroup, onMember);
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-      Set<DistributedMember> dsMembers = null;
-      // if (onGroup != null && onGroup.length > 0) {
-      // dsMembers = CliUtil.getDistributedMembersByGroup(cache, onGroup);
-      // } else {
-      // dsMembers = CliUtil.getAllNormalMembers(cache);
-      // }
-      // if (dsMembers.isEmpty()) {
-      // return ResultBuilder
-      // .createUserErrorResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
-      // }
-      dsMembers = CliUtil.findMembersOrThrow(onGroup, onMember);
+      Set<DistributedMember> dsMembers = CliUtil.findMembersOrThrow(onGroup, onMember);
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-
-  // CliStrings.format(
-  // CliStrings.GATEWAY_SENDER_0_IS_STARTED_ON_MEMBER_1,
-  // new Object[] {senderId, memberId });
-  //
-  // CliStrings.format(
-  // CliStrings.GATEWAY_SENDER_0_IS_ALREADY_STARTED_ON_MEMBER_1,
-  // new Object[] {senderId, memberId });
-  //
-  // CliStrings.format(
-  // CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
-  // new Object[] {senderId, memberId });
-
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS8 INS8 UPD43 INS21 INS21 INS60 UPD42 INS60 UPD43 MOV7 UPD43 MOV7 UPD43 MOV74 INS59 UPD43 UPD43 UPD43 UPD43 UPD42 MOV74 INS59 UPD43 UPD43 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL21 DEL42 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42