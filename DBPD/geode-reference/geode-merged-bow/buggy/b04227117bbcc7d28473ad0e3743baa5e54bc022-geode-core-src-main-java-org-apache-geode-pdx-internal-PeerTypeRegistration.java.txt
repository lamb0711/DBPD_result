 GEODE-2129 Make pdxType id random.

Right now pdxtype id has 4 bytes. Out of those 4 bytes, one byte
reserved for distributed-system-id, this make sure type id generated
from different cluster has different id. For rest of the three bytes we
just increment counter to create new pdxtype id. In the field, we have
observed that sometimes this pdxType Id collides. One reason could be
they end up having same distributed-system-id for the different cluster.
Thus to avoid a collision, we will be using hashcode of pdxType for
three bytes of pdxType id. That will reduce the possibility of
collision.

Apart from that changed getOldValue call to region.get in
PeerTypeRegistration.

updated

updated

updated

update

+  public static final int PLACE_HOLDER_FOR_TYPE_ID = 0xFFFFFF;
+  public static final int PLACE_HOLDER_FOR_DS_ID = 0xFF000000;
-  private int nextTypeId;
+  private int dsId;
-  private int nextEnumId;
-  private final int maxEnumId;
-    this.nextTypeId = distributedSystemId << 24;
-    this.maxTypeId = distributedSystemId << 24 | 0xFFFFFF;
-    this.nextEnumId = distributedSystemId << 24;
-    this.maxEnumId = distributedSystemId << 24 | 0xFFFFFF;
+    this.dsId = distributedSystemId << 24;
+    this.maxTypeId = 0xFFFFFF;
-        if (!event.getOldValue().equals(event.getNewValue())) {
+        if (!event.getRegion().get(event.getKey()).equals(event.getNewValue())) {
-  private int allocateTypeId() {
+  private int allocateTypeId(PdxType newType) {
+
+    int id = newType.hashCode() & PLACE_HOLDER_FOR_TYPE_ID;
+    int newTypeId = id | this.dsId;
+
-      // Find the next available type id.
-      do {
-        this.nextTypeId++;
-        if (this.nextTypeId == maxTypeId) {
+      int maxTry = maxTypeId;
+      while (r.get(newTypeId) != null) {
+        maxTry--;
+        if (maxTry == 0) {
-      } while (r.get(nextTypeId) != null);
-      this.lastAllocatedTypeId = this.nextTypeId;
-      return this.nextTypeId;
+        // Find the next available type id.
+        id++;
+        if (id > this.maxTypeId) {
+          id = 1;
+        }
+        newTypeId = id | this.dsId;
+      }
+
+      return newTypeId;
-  private EnumId allocateEnumId() {
+  private EnumId allocateEnumId(EnumInfo ei) {
-    try {
-      // Find the next available type id.
-      do {
-        this.nextEnumId++;
-        if (this.nextEnumId == maxEnumId) {
-          throw new InternalGemFireError(
-              "Used up all of the PDX enum ids for this distributed system. The maximum number of PDX types is "
-                  + maxEnumId);
-        }
-      } while (r.get(new EnumId(nextEnumId)) != null);
-      this.lastAllocatedEnumId = this.nextEnumId;
-      return new EnumId(this.nextEnumId);
+    int id = ei.hashCode() & PLACE_HOLDER_FOR_TYPE_ID;
+    int newEnumId = id | this.dsId;
+    try {
+      int maxTry = this.maxTypeId;
+      // Find the next available type id.
+      while (r.get(new EnumId(newEnumId)) != null) {
+        maxTry--;
+        if (maxTry == 0) {
+          throw new InternalGemFireError(
+              "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
+                  + this.maxTypeId);
+        }
+
+        // Find the next available type id.
+        id++;
+        if (id > this.maxTypeId) {
+          id = 1;
+        }
+        newEnumId = id | this.dsId;
+      }
+
+      return new EnumId(newEnumId);
-      id = allocateTypeId();
+      id = allocateTypeId(newType);
+    int totalPdxTypeIdInDS = 0;
+          int tmpDsId = PLACE_HOLDER_FOR_DS_ID & id.intValue();
+          if (tmpDsId == this.dsId) {
+            totalPdxTypeIdInDS++;
+          }
+
+      if (totalPdxTypeIdInDS == this.maxTypeId) {
+        throw new InternalGemFireError(
+            "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
+                + this.maxTypeId);
+      }
+    int totalEnumIdInDS = 0;
+          int tmpDsId = PLACE_HOLDER_FOR_DS_ID & id.intValue();
+          if (tmpDsId == this.dsId) {
+            totalEnumIdInDS++;
+          }
+
+      if (totalEnumIdInDS == this.maxTypeId) {
+        throw new InternalGemFireError(
+            "Used up all of the PDX enum ids for this distributed system. The maximum number of PDX types is "
+                + this.maxTypeId);
+      }
-      id = allocateEnumId();
+      id = allocateEnumId(ei);
-      id = allocateEnumId();
+      id = allocateEnumId(newInfo);

MOV23 UPD83 INS83 INS83 UPD83 INS83 INS83 INS44 INS44 UPD42 INS34 UPD42 INS34 UPD42 INS43 INS42 INS60 INS60 INS43 INS42 INS60 INS60 INS60 INS60 INS42 INS39 INS59 INS39 INS59 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS34 INS42 INS27 INS42 INS27 INS60 INS61 INS42 INS27 INS42 INS27 INS60 INS61 INS42 INS34 INS25 INS42 INS34 INS25 UPD42 INS32 INS42 INS42 INS22 INS39 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS22 INS39 INS59 INS27 INS8 MOV14 INS27 INS8 INS27 INS8 INS42 INS42 INS52 INS42 INS42 INS42 MOV32 MOV33 INS21 MOV25 INS21 INS25 MOV21 INS42 INS42 INS52 INS42 INS42 INS22 INS32 INS33 INS21 MOV25 INS21 INS25 MOV21 UPD42 INS42 INS22 INS53 INS42 INS22 INS53 UPD42 INS37 INS37 INS27 INS8 MOV52 UPD42 MOV42 INS42 INS42 MOV14 INS37 INS37 INS27 INS8 INS42 INS52 INS42 INS14 INS52 INS42 INS14 INS42 INS42 INS42 UPD42 INS34 INS42 INS42 INS22 INS21 INS42 INS27 INS42 INS42 UPD42 INS34 INS42 INS42 INS22 INS21 INS42 INS27 INS60 INS25 INS43 INS27 INS60 INS25 INS43 INS27 INS52 INS42 INS7 INS42 INS22 INS52 INS42 INS7 INS42 INS22 INS39 INS59 INS27 INS8 INS42 INS45 INS22 INS39 INS59 INS27 INS8 INS42 INS45 INS22 INS42 INS34 MOV52 UPD42 MOV42 INS42 INS34 MOV52 UPD42 MOV42 INS42 INS27 INS42 INS22 INS21 INS52 INS42 INS42 INS27 INS42 INS22 INS21 INS52 INS42 UPD45 INS22 INS42 INS32 INS52 INS42 INS37 INS42 INS32 INS52 INS42 INS37 INS32 UPD42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 DEL83 DEL42 DEL34 DEL27 DEL34 DEL27 DEL52 DEL42 DEL22 DEL42 DEL34 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL34 DEL27 DEL34 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL22 DEL52 DEL42 DEL22 DEL37 DEL21 DEL8 DEL27 DEL19 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL22 DEL22 DEL37 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL19