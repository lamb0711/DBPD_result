Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  implements SerializationVersions {
+    implements SerializationVersions {
-  
+
-  public PRTombstoneMessage() {
-  }
-  
-  public static void send(BucketRegion r, final Set<Object> keys, EventID eventID)  {
-    Set<InternalDistributedMember> recipients = r.getPartitionedRegion().getRegionAdvisor().adviseAllPRNodes();
+  public PRTombstoneMessage() {}
+
+  public static void send(BucketRegion r, final Set<Object> keys, EventID eventID) {
+    Set<InternalDistributedMember> recipients =
+        r.getPartitionedRegion().getRegionAdvisor().adviseAllPRNodes();
-    PRTombstoneMessage m = new PRTombstoneMessage(recipients, r.getPartitionedRegion().getPRId(), p,
-        keys, eventID);
+    PRTombstoneMessage m =
+        new PRTombstoneMessage(recipients, r.getPartitionedRegion().getPRId(), p, keys, eventID);
-  protected final boolean operateOnPartitionedRegion(
-      final DistributionManager dm, PartitionedRegion r, long startTime)
-      throws ForceReattemptException
-  {
+  protected final boolean operateOnPartitionedRegion(final DistributionManager dm,
+      PartitionedRegion r, long startTime) throws ForceReattemptException {
-        RegionEventImpl regionEvent = new RegionEventImpl(r, Operation.REGION_DESTROY, 
-            null, true, r.getGemFireCache().getMyId()); 
-        regionEvent.setLocalFilterInfo(fp.getLocalFilterRouting(regionEvent)); 
-        ClientUpdateMessage clientMessage = ClientTombstoneMessage.gc(r, this.keys,
-            this.eventID);
+        RegionEventImpl regionEvent = new RegionEventImpl(r, Operation.REGION_DESTROY, null, true,
+            r.getGemFireCache().getMyId());
+        regionEvent.setLocalFilterInfo(fp.getLocalFilterRouting(regionEvent));
+        ClientUpdateMessage clientMessage = ClientTombstoneMessage.gc(r, this.keys, this.eventID);
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  
+
-  public void fromData(DataInput in) throws IOException,
-          ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    for (int i=0; i<numKeys; i++) {
+    for (int i = 0; i < numKeys; i++) {
-    this.eventID = (EventID)DataSerializer.readObject(in);
+    this.eventID = (EventID) DataSerializer.readObject(in);
-  
+
-    for (Object key: keys) {
+    for (Object key : keys) {
-  
-  private static class Response extends PartitionResponse
-  {
-//    Set<InternalDistributedMember> forceReattemptSenders = new HashSet<InternalDistributedMember>();
+
+  private static class Response extends PartitionResponse {
+    // Set<InternalDistributedMember> forceReattemptSenders = new
+    // HashSet<InternalDistributedMember>();
-    public void process(DistributionMessage msg)
-    {
-      ReplyMessage reply = (ReplyMessage)msg;
+    public void process(DistributionMessage msg) {
+      ReplyMessage reply = (ReplyMessage) msg;
-          // TODO do we need to resend to these recipients?  Might they have clients that won't otherwise get
+          // TODO do we need to resend to these recipients? Might they have clients that won't
+          // otherwise get
-//          this.forceReattemptSenders.add(reply.getSender());
+          // this.forceReattemptSenders.add(reply.getSender());

