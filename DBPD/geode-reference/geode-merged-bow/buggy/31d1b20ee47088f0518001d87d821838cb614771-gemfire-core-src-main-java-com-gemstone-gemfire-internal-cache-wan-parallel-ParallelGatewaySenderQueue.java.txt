Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.cache.RegionDestroyedException;
-  private static final Logger logger = LogService.getLogger();
+  protected static final Logger logger = LogService.getLogger();
+      GatewaySenderEventImpl event = (GatewaySenderEventImpl)conflatableObject;
-        String regionPath = ColocationHelper.getLeaderRegion(
-            (PartitionedRegion)((GatewaySenderEventImpl)conflatableObject)
-                .getRegion()).getFullPath();
+        String regionPath = ColocationHelper.getLeaderRegion((PartitionedRegion)event.getRegion()).getFullPath();
-            this, deserialize(conflatableObject.getValueToConflate()), conflatableObject.getKeyToConflate(), prQ.getName());
+            this, conflatableObject.getValueToConflate(), conflatableObject.getKeyToConflate(), prQ.getName());
-      if(userPR.getDataPolicy().withPersistence() && !sender.isPersistenceEnabled()){
+      if(!isUsedForHDFS() && userPR.getDataPolicy().withPersistence() && !sender.isPersistenceEnabled()){
-            prQName, ra, null, cache, sender);
+            prQName, ra, null, cache, sender, isUsedForHDFS());
+          // at this point we should be able to assert prQ == meta; 
+  protected boolean isUsedForHDFS()
+  {
+    return false;
+  }
+//      value.freeOffHeapValue();
+      value.release();
+        value.release();
-            //value.freeOffHeapValue();
+            value.release();
-              //value.freeOffHeapValue();
+              value.release();
-          //value.freeOffHeapValue();
+          value.release();
+    boolean addedValueToQueue = false;
-        brq.addToQueue(key, value);
+        addedValueToQueue = brq.addToQueue(key, value);
+    } finally {
+      if (!addedValueToQueue) {
+        value.release();
+      }
+      try {
+      } finally {
+        event.release();
+      }
-    return object;
+    return object; // OFFHEAP: ok since only callers uses it to check for empty queue
-    Object object = null;
-    int bId = -1;
+    int bId = -1;
-        object = peekAhead(prQ, bId);
+        GatewaySenderEventImpl object = (GatewaySenderEventImpl) peekAhead(prQ, bId);
+        if (object != null) {
+          GatewaySenderEventImpl copy = object.makeHeapCopyIfOffHeap();
+          if (copy == null) {
+            continue;
+          }
+          object = copy;
+        }
-          peekedEvents.add((GatewaySenderEventImpl)object);
+          peekedEvents.add(object);
-    return object;
+    return object; // OFFHEAP: ok since callers are careful to do destroys on region queue after finished with peeked object.
+  @Override
+  public void close() {
+    // Because of bug 49060 do not close the regions of a parallel queue
+//    for (Region r: getRegions()) {
+//      if (r != null && !r.isDestroyed()) {
+//        try {
+//          r.close();
+//        } catch (RegionDestroyedException e) {
+//        }
+//      }
+//    }
+  }
+
+      this( regionName, attrs, parentRegion, cache, pgSender, false);
+    }
+    public ParallelGatewaySenderQueueMetaRegion(String regionName,
+        RegionAttributes attrs, LocalRegion parentRegion,
+        GemFireCacheImpl cache, AbstractGatewaySender pgSender, boolean isUsedForHDFS) {
-              .setParallelGatewaySender((AbstractGatewaySender)pgSender));
+              .setParallelGatewaySender((AbstractGatewaySender)pgSender)
+              .setIsUsedForHDFSParallelGatewaySenderQueue(isUsedForHDFS));

INS26 INS40 INS31 INS31 UPD83 INS83 INS39 INS42 INS8 MOV60 INS78 INS83 INS39 INS42 INS8 INS31 INS41 INS60 INS42 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS60 INS9 INS39 INS59 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS39 INS42 INS43 INS59 INS21 INS42 INS9 INS25 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS42 MOV11 INS32 INS38 INS8 INS8 INS8 MOV32 INS42 INS42 INS38 INS42 INS42 INS21 INS42 INS21 MOV60 MOV60 MOV60 MOV25 MOV25 INS21 INS60 INS25 MOV32 INS32 MOV43 INS32 INS7 INS32 INS32 MOV43 INS59 INS27 INS8 INS42 INS42 INS42 INS21 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS60 INS25 MOV21 MOV43 INS32 INS32 INS43 MOV32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS32 INS42 INS42 DEL36 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL11