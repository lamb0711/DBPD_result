GEODE-2404: Added gfsh support for destroying a lucene index

-    final String dataRegionPath = regionPath;
-    cache.addRegionListener(new RegionListener() {
-      @Override
-      public RegionAttributes beforeCreate(Region parent, String regionName, RegionAttributes attrs,
-          InternalRegionArguments internalRegionArgs) {
-        RegionAttributes updatedRA = attrs;
-        String path = parent == null ? "/" + regionName : parent.getFullPath() + "/" + regionName;
-
-        if (path.equals(dataRegionPath)) {
-
-          if (!attrs.getDataPolicy().withPartitioning()) {
-            // replicated region
-            throw new UnsupportedOperationException(
-                "Lucene indexes on replicated regions are not supported");
-          }
-
-          // For now we cannot support eviction with local destroy.
-          // Eviction with overflow to disk still needs to be supported
-          EvictionAttributes evictionAttributes = attrs.getEvictionAttributes();
-          EvictionAlgorithm evictionAlgorithm = evictionAttributes.getAlgorithm();
-          if (evictionAlgorithm != EvictionAlgorithm.NONE
-              && evictionAttributes.getAction().isLocalDestroy()) {
-            throw new UnsupportedOperationException(
-                "Lucene indexes on regions with eviction and action local destroy are not supported");
-          }
-
-          String aeqId = LuceneServiceImpl.getUniqueIndexName(indexName, dataRegionPath);
-          if (!attrs.getAsyncEventQueueIds().contains(aeqId)) {
-            AttributesFactory af = new AttributesFactory(attrs);
-            af.addAsyncEventQueueId(aeqId);
-            updatedRA = af.create();
-          }
-
-          // Add index creation profile
-          internalRegionArgs.addCacheServiceProfile(new LuceneIndexCreationProfile(indexName,
-              dataRegionPath, fields, analyzer, fieldAnalyzers));
-        }
-        return updatedRA;
-      }
-
-      @Override
-      public void afterCreate(Region region) {
-        if (region.getFullPath().equals(dataRegionPath)) {
-          afterDataRegionCreated(indexName, analyzer, dataRegionPath, fieldAnalyzers, fields);
-          cache.removeRegionListener(this);
-        }
-      }
-    });
+    cache.addRegionListener(new LuceneRegionListener(this, cache, indexName, regionPath, fields,
+        analyzer, fieldAnalyzers));
-
-      throw new IllegalArgumentException(
-          LocalizedStrings.LuceneService_INDEX_0_NOT_FOUND_IN_REGION_1.toLocalizedString(indexName,
-              regionPath));
+      destroyDefinedIndex(indexName, regionPath);
-      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_REGION_1
-          .toLocalizedString(indexName, regionPath));
+      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_1_REGION_2
+          .toLocalizedString(indexName, "initialized", regionPath));
+    }
+  }
+
+  public void destroyDefinedIndex(String indexName, String regionPath) {
+    String uniqueIndexName = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath);
+    if (definedIndexMap.containsKey(uniqueIndexName)) {
+      definedIndexMap.remove(uniqueIndexName);
+      RegionListener listenerToRemove = null;
+      for (RegionListener listener : cache.getRegionListeners()) {
+        if (listener instanceof LuceneRegionListener) {
+          LuceneRegionListener lrl = (LuceneRegionListener) listener;
+          if (lrl.getRegionPath().equals(regionPath) && lrl.getIndexName().equals(indexName)) {
+            listenerToRemove = lrl;
+            break;
+          }
+        }
+      }
+      if (listenerToRemove != null) {
+        cache.removeRegionListener(listenerToRemove);
+      }
+      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_1_REGION_2
+          .toLocalizedString(indexName, "defined", regionPath));
+    } else {
+      throw new IllegalArgumentException(
+          LocalizedStrings.LuceneService_INDEX_0_NOT_FOUND_IN_REGION_1.toLocalizedString(indexName,
+              regionPath));
-    for (LuceneIndex index : indexesToDestroy) {
-      removeFromIndexMap(index);
-      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_REGION_1
-          .toLocalizedString(index.getName(), regionPath));
+
+    // If list is empty throw an exception; otherwise iterate and destroy the defined index
+    if (indexesToDestroy.isEmpty()) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.LuceneService_NO_INDEXES_WERE_FOUND_IN_REGION_0
+              .toLocalizedString(regionPath));
+    } else {
+      for (LuceneIndex index : indexesToDestroy) {
+        removeFromIndexMap(index);
+        logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_1_REGION_2
+            .toLocalizedString(index.getName(), "initialized", regionPath));
+      }
+    }
+  }
+
+  public void destroyDefinedIndexes(String regionPath) {
+    if (!regionPath.startsWith("/")) {
+      regionPath = "/" + regionPath;
+    }
+
+    // Iterate the defined indexes to get the ones for the regionPath
+    List<LuceneIndexCreationProfile> indexesToDestroy = new ArrayList<>();
+    for (Map.Entry<String, LuceneIndexCreationProfile> entry : definedIndexMap.entrySet()) {
+      if (entry.getValue().getRegionPath().equals(regionPath)) {
+        indexesToDestroy.add(entry.getValue());
+      }
+    }
+
+    // If list is empty throw an exception; otherwise iterate and destroy the defined index
+    if (indexesToDestroy.isEmpty()) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.LuceneService_NO_INDEXES_WERE_FOUND_IN_REGION_0
+              .toLocalizedString(regionPath));
+    } else {
+      for (LuceneIndexCreationProfile profile : indexesToDestroy) {
+        destroyDefinedIndex(profile.getIndexName(), profile.getRegionPath());
+      }

INS31 INS31 INS31 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 MOV25 MOV21 MOV60 MOV25 INS21 UPD42 UPD43 UPD42 MOV60 INS25 INS25 INS43 INS42 INS25 MOV60 INS70 INS25 INS32 INS8 UPD42 MOV43 MOV32 INS8 MOV8 INS32 INS8 INS8 INS42 INS38 INS8 INS74 INS44 INS32 INS8 INS32 INS8 INS8 INS42 INS42 INS14 INS21 UPD42 INS32 UPD42 UPD42 UPD42 INS21 INS60 INS70 INS25 INS21 INS42 INS42 INS53 MOV70 INS32 INS21 INS43 INS43 UPD42 INS74 INS42 UPD42 MOV42 INS42 INS25 INS42 INS42 INS53 INS70 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS32 MOV43 INS59 INS44 INS32 INS8 INS27 INS8 INS32 INS14 UPD42 MOV42 UPD42 MOV42 INS45 INS7 UPD42 MOV42 INS42 INS74 INS43 MOV43 INS43 INS32 INS8 INS14 INS44 INS42 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS32 INS42 INS27 INS43 INS40 INS42 INS32 UPD42 MOV42 INS42 INS21 INS43 INS32 MOV43 INS42 MOV21 UPD40 INS45 UPD42 MOV42 INS62 INS8 INS32 INS40 INS42 MOV42 INS45 UPD42 MOV42 INS42 INS40 INS42 INS42 INS45 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS43 MOV60 MOV25 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS32 INS32 INS42 UPD43 UPD40 INS45 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS11 INS32 INS21 INS10 INS43 INS42 INS32 INS42 INS42 INS42 UPD42 INS7 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 DEL83 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL32 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL33 DEL27 DEL45 DEL42 DEL27 DEL42 DEL32 DEL45 DEL42 DEL27 DEL16 DEL42 DEL42 DEL32 DEL42 DEL40 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL43 DEL43 DEL42 DEL42 DEL42