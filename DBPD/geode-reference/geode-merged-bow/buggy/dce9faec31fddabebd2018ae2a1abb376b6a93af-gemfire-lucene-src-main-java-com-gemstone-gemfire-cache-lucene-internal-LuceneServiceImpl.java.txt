add class LuceneIndexImpl and its subclasses
and fixed TopEntriesFuncionCollectorJUnitTest

+import com.gemstone.gemfire.cache.GemFireCache;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.internal.cache.PartitionedRegion;
-
-  public String getUniqueIndexName(String indexName, String regionName) {
-    String name = indexName + "#" + regionName.replace('/', '_');
+  
+  public static String getUniqueIndexName(String indexName, String regionPath) {
+    String name = indexName + "#" + regionPath.replace('/', '_');
-  public LuceneIndex createIndex(String indexName, String regionName, String... fields) {
-    // TODO Auto-generated method stub
-    return null;
+  public LuceneIndex createIndex(String indexName, String regionPath, String... fields) {
+    Region dataregion = this.cache.getRegion(regionPath);
+    if (dataregion == null) {
+      cache.getLogger().info("Data region "+regionPath+" not found");
+      return null;
+    }
+    LuceneIndexImpl index = null;
+    if (dataregion instanceof PartitionedRegion) {
+      // partitioned region
+      index = new LuceneIndexForPartitionedRegion(indexName, regionPath, cache);
+      for (String field:fields) {
+        index.addSearchableField(field);
+        index.addSearchablePDXField(field);
+      }
+      registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    } else {
+      // replicated region
+      index = new LuceneIndexForReplicatedRegion(indexName, regionPath, cache);
+      registerIndex(getUniqueIndexName(indexName, regionPath), index);
+    }
+    // TODO add fields
+    return index;
-  public LuceneIndex getIndex(String indexName, String regionName) {
-    return indexMap.get(getUniqueIndexName(indexName, regionName));
+  public LuceneIndex getIndex(String indexName, String regionPath) {
+    return indexMap.get(getUniqueIndexName(indexName, regionPath));
-  public LuceneIndex createIndex(String indexName, String regionName, Map<String, Analyzer> analyzerPerField) {
+  public LuceneIndex createIndex(String indexName, String regionPath, Map<String, Analyzer> analyzerPerField) {
-    indexMap.remove(getUniqueIndexName(index.getName(), index.getRegionName()));
-    indexImpl.close();
+    indexMap.remove(getUniqueIndexName(index.getName(), index.getRegionPath()));
+//    indexImpl.close();
+  
+  public void registerIndex(final String regionAndIndex, LuceneIndex index){
+    if( !indexMap.containsKey( regionAndIndex )) {
+      indexMap.put(regionAndIndex, index);
+    }
+  }
+
+  public void unregisterIndex(final String region){
+    if( indexMap.containsKey( region )) indexMap.remove( region );
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS8 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV43 UPD42 UPD42 INS60 INS25 INS60 INS25 INS41 UPD42 INS43 INS42 INS83 INS43 INS42 INS43 INS42 INS25 INS83 INS43 INS42 INS25 MOV43 INS43 INS59 INS27 INS8 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS33 INS21 MOV41 INS42 INS42 INS33 INS42 INS43 INS21 INS70 INS21 INS21 INS21 INS32 INS21 INS42 INS42 INS42 INS32 INS22 INS42 INS42 INS32 INS42 INS7 MOV44 INS42 INS8 INS32 INS7 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS52 INS42 INS32 INS42 INS27 INS42 INS14 UPD42 INS21 INS21 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL8 DEL42 DEL42 DEL32 DEL21