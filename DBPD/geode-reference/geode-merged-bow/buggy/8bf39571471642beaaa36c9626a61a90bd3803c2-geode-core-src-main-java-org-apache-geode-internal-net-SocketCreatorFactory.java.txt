Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-      throw new GemFireConfigException("SocketCreatorFactory requires a valid distribution config.");
+      throw new GemFireConfigException(
+          "SocketCreatorFactory requires a valid distribution config.");
-      throw new GemFireConfigException("SocketCreatorFactory requires a valid distribution config.");
+      throw new GemFireConfigException(
+          "SocketCreatorFactory requires a valid distribution config.");
-  public static SocketCreator getSocketCreatorForComponent(SecurableCommunicationChannel sslEnabledComponent) {
-    SSLConfig sslConfigForComponent = SSLConfigurationFactory.getSSLConfigForComponent(sslEnabledComponent);
-    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(sslEnabledComponent, sslConfigForComponent);
+  public static SocketCreator getSocketCreatorForComponent(
+      SecurableCommunicationChannel sslEnabledComponent) {
+    SSLConfig sslConfigForComponent =
+        SSLConfigurationFactory.getSSLConfigForComponent(sslEnabledComponent);
+    return getInstance().getOrCreateSocketCreatorForSSLEnabledComponent(sslEnabledComponent,
+        sslConfigForComponent);
-  private SocketCreator getSSLSocketCreator(final SecurableCommunicationChannel sslComponent, final SSLConfig sslConfig) {
+  private SocketCreator getSSLSocketCreator(final SecurableCommunicationChannel sslComponent,
+      final SSLConfig sslConfig) {
-      if (ArrayUtils.contains(getDistributionConfig().getSecurableCommunicationChannels(), SecurableCommunicationChannel.ALL)) {
+      if (ArrayUtils.contains(getDistributionConfig().getSecurableCommunicationChannels(),
+          SecurableCommunicationChannel.ALL)) {
-        //      } else if (ArrayUtils.contains(getDistributionConfig().getSecurableCommunicationChannels(), sslComponent)) {
+        // } else if
+        // (ArrayUtils.contains(getDistributionConfig().getSecurableCommunicationChannels(),
+        // sslComponent)) {
-  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(final SecurableCommunicationChannel sslEnabledComponent, final SSLConfig sslConfig) {
+  private SocketCreator getOrCreateSocketCreatorForSSLEnabledComponent(
+      final SecurableCommunicationChannel sslEnabledComponent, final SSLConfig sslConfig) {
-  private SocketCreator createSSLSocketCreator(final SecurableCommunicationChannel sslEnableComponent, final SSLConfig sslConfig) {
+  private SocketCreator createSSLSocketCreator(
+      final SecurableCommunicationChannel sslEnableComponent, final SSLConfig sslConfig) {
-  private synchronized void registerSocketCreatorForComponent(SecurableCommunicationChannel sslEnabledComponent, SocketCreator socketCreator) {
+  private synchronized void registerSocketCreatorForComponent(
+      SecurableCommunicationChannel sslEnabledComponent, SocketCreator socketCreator) {
-  private synchronized SocketCreator getRegisteredSocketCreatorForComponent(SecurableCommunicationChannel sslEnabledComponent) {
+  private synchronized SocketCreator getRegisteredSocketCreatorForComponent(
+      SecurableCommunicationChannel sslEnabledComponent) {
+   * 
-                                                       final boolean needClientAuth,
-                                                       final String protocols,
-                                                       final String ciphers,
-                                                       final Properties gfsecurityProps) {
-    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(useSSL, needClientAuth, protocols, ciphers, gfsecurityProps, null);
+      final boolean needClientAuth, final String protocols, final String ciphers,
+      final Properties gfsecurityProps) {
+    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(useSSL, needClientAuth,
+        protocols, ciphers, gfsecurityProps, null);

