GEODE-6973: Use cachelistener to synchronize typeToId with IdToType

    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
    Co-authored-by: Donal Evans <doevans@pivotal.io>

-  /**
-   * This map serves two purposes. It lets us look up an id based on a type, if we previously found
-   * that type in the region. And, if a type is present in this map, that means we read the type
-   * while holding the dlock, which means the type was distributed to all members.
-   */
-  private final Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
-
-  private final Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
+  private LocalReverseMap localReverseMap = new LocalReverseMap();
-        if (value instanceof PdxType) {
-          updateClassToTypeMap((PdxType) value);
+        Object key = event.getKey();
+        if (value != null) {
+          updateLocalMaps(key, value);
+
+    buildTypeToIdFromIdToType();
-    Integer existingId = typeToId.get(newType);
+    Integer existingId = localReverseMap.checkIfExistsInLocal(newType);
-      int id = getExistingIdForType(newType);
-      if (id != -1) {
-        return id;
+      if (localReverseMap.shouldReloadFromRegion()) {
+        buildTypeToIdFromIdToType();
+      }
+      localReverseMap.flushLocalMap();
+      // double check if my type is in region in case the typeToId map has been updated while
+      // waiting to obtain a lock
+      existingId = localReverseMap.checkIfExistsInLocal(newType);
+      if (existingId != null) {
+        return existingId;
-      id = allocateTypeId(newType);
+      int id = allocateTypeId(newType);
-
-      typeToId.put(newType, id);
-
+      localReverseMap.flushLocalMap();
-  /** Should be called holding the dlock */
-  private int getExistingIdForType(PdxType newType) {
+  private void buildTypeToIdFromIdToType() {
-      int result = -1;
-        if (k instanceof EnumId) {
-          EnumId id = (EnumId) k;
-          EnumInfo info = (EnumInfo) v;
-          enumToId.put(info, id);
-        } else {
+        if (v instanceof PdxType) {
-          }
-
-          typeToId.put(foundType, id);
-          if (foundType.equals(newType)) {
-            result = foundType.getTypeId();
+            if (totalPdxTypeIdInDS >= MAX_TYPE_ID) {
+              throw new InternalGemFireError(
+                  "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
+                      + MAX_TYPE_ID);
+            }
+        localReverseMap.save(k, v, false);
-      if (totalPdxTypeIdInDS == MAX_TYPE_ID) {
-        throw new InternalGemFireError(
-            "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
-                + MAX_TYPE_ID);
-      }
-      return result;
-          enumToId.put(info, id);
-        } else {
-          typeToId.put((PdxType) v, (Integer) k);
+        localReverseMap.save(k, v, false);
-    final EnumId existingId = enumToId.get(newInfo);
+    final EnumId existingId = localReverseMap.checkIfExistsInLocal(newInfo);
+      localReverseMap.flushLocalMap();
-      enumToId.put(newInfo, id);
+      localReverseMap.save(id, newInfo, false);
+      localReverseMap.flushLocalMap();
-  private void updateClassToTypeMap(PdxType type) {
-    if (type != null) {
+  private void updateLocalMaps(Object key, Object value) {
+    localReverseMap.save(key, value, true);
+    if (value instanceof PdxType) {
+      PdxType type = (PdxType) value;
+
+  @VisibleForTesting
+  public int getTypeToIdSize() {
+    return localReverseMap.typeToIdSize();
+  }
+
+  @VisibleForTesting
+  public int getEnumToIdSize() {
+    return localReverseMap.enumToIdSize();
+  }
+
+  class LocalReverseMap {
+    /**
+     * When a new pdxType or a new enumInfo is added to idToType region, its
+     * listener will add the new type to the pendingTypeToId first, to make sure
+     * the distribution finished.
+     * Then any member who wants to use this new pdxType has to get the dlock to
+     * flush the pendingTypeToId map into typeToId. This design to guarantee that
+     * when using the new pdxType, it should have been distributed to all members.
+     */
+    private final Map<PdxType, Integer> pendingTypeToId =
+        Collections.synchronizedMap(new HashMap<>());
+    private final Map<EnumInfo, EnumId> pendingEnumToId =
+        Collections.synchronizedMap(new HashMap<>());
+
+    /**
+     * This map serves two purposes. It lets us look up an id based on a type, if we previously
+     * found
+     * that type in the region. And, if a type is present in this map, that means we read the type
+     * while holding the dlock, which means the type was distributed to all members.
+     */
+    private final Map<PdxType, Integer> typeToId = Collections.synchronizedMap(new HashMap<>());
+
+    private final Map<EnumInfo, EnumId> enumToId = Collections.synchronizedMap(new HashMap<>());
+
+    void save(Object key, Object value, boolean isPending) {
+      if (value instanceof PdxType) {
+        PdxType type = (PdxType) value;
+        if (isPending) {
+          pendingTypeToId.put(type, (Integer) key);
+        } else {
+          typeToId.put(type, (Integer) key);
+        }
+      } else if (value instanceof EnumInfo) {
+        EnumInfo info = (EnumInfo) value;
+        if (isPending) {
+          pendingEnumToId.put(info, (EnumId) key);
+        } else {
+          enumToId.put(info, (EnumId) key);
+        }
+      }
+    }
+
+    int typeToIdSize() {
+      return typeToId.size();
+    }
+
+    int enumToIdSize() {
+      return enumToId.size();
+    }
+
+    Integer checkIfExistsInLocal(PdxType newType) {
+      return typeToId.get(newType);
+    }
+
+    EnumId checkIfExistsInLocal(EnumInfo newInfo) {
+      return enumToId.get(newInfo);
+    }
+
+    // The local maps should be loaded from the region if there is a mismatch in size between the
+    // region and all local maps
+    boolean shouldReloadFromRegion() {
+      return ((typeToId.size() + pendingTypeToId.size() + enumToId.size()
+          + pendingEnumToId.size()) != getIdToType().size());
+    }
+
+    void flushLocalMap() {
+      if (!pendingTypeToId.isEmpty()) {
+        typeToId.putAll(pendingTypeToId);
+        pendingTypeToId.clear();
+      }
+      if (!pendingEnumToId.isEmpty()) {
+        enumToId.putAll(pendingEnumToId);
+        pendingEnumToId.clear();
+      }
+    }
+  }

INS23 INS31 INS31 INS55 INS83 INS43 INS59 UPD39 UPD42 UPD42 INS44 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS23 INS23 MOV23 MOV23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS14 INS21 MOV60 MOV25 INS54 INS43 INS42 INS43 UPD42 INS21 INS42 INS41 INS42 INS41 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS39 INS42 INS44 INS44 INS44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 MOV43 INS42 MOV44 INS8 MOV43 INS42 INS44 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS43 INS32 INS43 INS8 MOV8 INS43 INS42 INS42 INS32 MOV62 INS32 INS32 INS65 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS41 INS41 INS41 INS43 INS42 INS41 INS41 INS25 INS25 INS42 INS42 INS42 UPD42 UPD42 INS33 INS25 INS21 INS21 MOV25 INS60 MOV21 MOV21 MOV41 INS21 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS9 INS60 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 UPD66 INS66 INS42 INS42 INS62 INS8 INS25 INS32 INS32 MOV32 INS42 MOV32 INS36 INS38 INS8 INS38 INS8 INS42 UPD42 UPD42 INS32 INS8 INS32 INS7 INS39 INS59 INS32 INS42 INS42 INS42 INS32 INS32 MOV43 INS59 INS74 INS74 INS42 INS43 INS60 INS25 INS62 INS8 INS42 INS42 INS42 INS42 INS27 INS32 INS21 INS21 INS32 INS21 INS21 INS42 INS42 MOV21 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS21 INS21 INS42 INS42 UPD42 UPD42 INS42 INS9 INS42 INS42 INS42 MOV11 INS43 INS43 INS42 MOV43 INS59 INS42 MOV8 INS8 INS42 INS43 INS60 INS25 INS36 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 INS42 MOV42 INS32 INS32 INS42 INS42 INS42 INS11 INS21 INS42 INS43 INS59 INS42 INS8 INS8 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS42 UPD42 UPD43 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS32 INS42 INS42 INS11 INS21 INS21 INS32 INS32 INS32 INS32 INS42 INS43 INS59 INS27 UPD42 INS8 INS42 UPD42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 MOV21 INS25 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS27 MOV8 INS42 INS43 INS42 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL34 DEL38 DEL42 DEL59 DEL60 DEL42 DEL7 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL66 DEL65 DEL29 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL25 DEL42 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL27 DEL42 DEL11