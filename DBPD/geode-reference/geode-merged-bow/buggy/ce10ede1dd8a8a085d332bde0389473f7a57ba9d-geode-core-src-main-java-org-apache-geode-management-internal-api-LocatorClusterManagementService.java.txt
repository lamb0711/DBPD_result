GEODE-6786: Provide ability to delete a region using V2 REST API (#3610)


+import java.util.HashSet;
+import org.apache.geode.management.internal.CacheElementOperation;
-    String group = config.getConfigGroup();
+    // validate that user used the correct config object type
+    ConfigurationManager configurationManager = getConfigurationManager(config);
-    validators.get(CacheElement.class).validate(config);
+    validators.get(CacheElement.class).validate(CacheElementOperation.CREATE, config);
+    String group = config.getConfigGroup();
-      validator.validate(config);
+      validator.validate(CacheElementOperation.CREATE, config);
-      if (validator.exists(config, currentPersistedConfig)) {
-        throw new EntityExistsException("cache element " + config.getId() + " already exists.");
+      if (validator.exists(config.getId(), currentPersistedConfig)) {
+        throw new EntityExistsException("Cache element '" + config.getId() + "' already exists");
-    // validate that user used the correct config object type
-    ConfigurationManager configurationManager = managers.get(config.getClass());
-    if (configurationManager == null) {
-      throw new IllegalArgumentException(String.format("Configuration type %s is not supported.",
-          config.getClass().getSimpleName()));
-    }
-
-          "no members found in " + group + " to create cache element");
+          "No members found in group '" + group + "' to create cache element");
-        Arrays.asList(config, UpdateCacheFunction.CacheElementOperation.ADD),
+        Arrays.asList(config, CacheElementOperation.CREATE),
-      result.setStatus(false, "Failed to apply the update on all members.");
+      result.setStatus(false, "Failed to apply the update on all members");
-            "successfully persisted config for " + finalGroup);
+            "Successfully updated config for " + finalGroup);
-        String message = "failed to update cluster config for " + finalGroup;
+        String message = "Failed to update cluster config for " + finalGroup;
-    throw new NotImplementedException("Not implemented");
+    // validate that user used the correct config object type
+    ConfigurationManager configurationManager = getConfigurationManager(config);
+
+    if (persistenceService == null) {
+      return new ClusterManagementResult(false,
+          "Cluster configuration service needs to be enabled");
+    }
+
+    // first validate common attributes of all configuration object
+    validators.get(CacheElement.class).validate(CacheElementOperation.DELETE, config);
+
+    ConfigurationValidator validator = validators.get(config.getClass());
+    validator.validate(CacheElementOperation.DELETE, config);
+
+    List<String> relevantGroups = persistenceService.getGroups().stream().filter(g -> {
+      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(g);
+      if (currentPersistedConfig != null && validator != null) {
+        return validator.exists(config.getId(), currentPersistedConfig);
+      } else {
+        return false;
+      }
+    }).collect(Collectors.toList());
+
+    if (relevantGroups.isEmpty()) {
+      throw new EntityNotFoundException("Cache element '" + config.getId() + "' does not exist");
+    }
+
+    // execute function on all members
+    Set<DistributedMember> targetedMembers = new HashSet<>();
+    relevantGroups.forEach(g -> targetedMembers.addAll(findMembers(g)));
+
+    if (targetedMembers.size() == 0) {
+      return new ClusterManagementResult(false,
+          "No members found to delete cache element");
+    }
+
+    ClusterManagementResult result = new ClusterManagementResult();
+
+    List<CliFunctionResult> functionResults = executeAndGetFunctionResult(
+        new UpdateCacheFunction(),
+        Arrays.asList(config, CacheElementOperation.DELETE),
+        targetedMembers);
+    functionResults
+        .forEach(functionResult -> result.addMemberStatus(functionResult.getMemberIdOrName(),
+            functionResult.isSuccessful(),
+            functionResult.getStatusMessage()));
+
+    // if any false result is added to the member list
+    if (result.getStatusCode() != ClusterManagementResult.StatusCode.OK) {
+      result.setStatus(false, "Failed to apply the update on all members");
+      return result;
+    }
+
+    // persist configuration in cache config
+    List<String> updatedGroups = new ArrayList<>();
+    List<String> failedGroups = new ArrayList<>();
+    for (String finalGroup : relevantGroups) {
+      persistenceService.updateCacheConfig(finalGroup, cacheConfigForGroup -> {
+        try {
+          configurationManager.delete(config, cacheConfigForGroup);
+          updatedGroups.add(finalGroup);
+        } catch (Exception e) {
+          logger.error("Failed to update cluster config for " + finalGroup, e);
+          failedGroups.add(finalGroup);
+          return null;
+        }
+        return cacheConfigForGroup;
+      });
+    }
+
+    if (failedGroups.isEmpty()) {
+      result.setStatus(true, "Successfully removed config for " + updatedGroups);
+    } else {
+      String message = "Failed to update cluster config for " + failedGroups;
+      result.setStatus(ClusterManagementResult.StatusCode.FAIL_TO_PERSIST, message);
+    }
+
+    return result;
-    Stream<DistributedMember> stream =
+    Stream<DistributedMember> memberStream =
-      stream = stream.filter(m -> m.getGroups().contains(group));
+      memberStream = memberStream.filter(m -> m.getGroups().contains(group));
-    return stream.collect(Collectors.toSet());
+    return memberStream.collect(Collectors.toSet());
+
+  private ConfigurationManager getConfigurationManager(CacheElement config) {
+    ConfigurationManager configurationManager = managers.get(config.getClass());
+    if (configurationManager == null) {
+      throw new IllegalArgumentException(String.format("Configuration type %s is not supported",
+          config.getClass().getSimpleName()));
+    }
+
+    return configurationManager;
+  }

INS26 INS26 INS40 INS40 INS31 MOV60 INS8 INS83 INS43 INS42 INS44 INS8 INS60 INS60 INS25 INS21 INS60 INS21 INS60 INS25 INS60 INS21 INS25 INS60 INS60 INS21 INS25 INS60 INS60 INS70 INS25 INS41 INS42 INS43 INS42 MOV60 MOV25 INS41 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS32 INS74 INS59 INS32 INS8 INS74 INS59 INS32 INS27 INS8 INS43 INS59 INS74 INS59 INS32 INS27 INS8 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS43 INS43 INS42 INS32 INS42 INS42 MOV53 INS43 INS43 INS42 INS14 INS42 INS42 INS86 INS32 INS34 INS41 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS86 INS32 INS40 INS21 INS41 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS21 INS60 INS21 UPD42 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS57 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS14 INS32 INS42 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS32 INS32 INS43 INS59 INS32 INS40 INS32 UPD40 UPD45 INS43 INS9 INS45 INS43 INS42 INS42 INS32 INS42 INS86 INS42 INS42 UPD43 INS27 INS43 INS42 INS42 INS42 INS32 INS43 INS9 INS45 INS42 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS9 INS45 INS43 INS43 INS42 INS42 INS42 INS86 INS42 INS42 INS9 INS27 INS42 INS42 INS27 INS42 INS42 INS40 INS42 UPD42 MOV42 INS42 UPD45 UPD45 INS42 INS42 INS32 INS42 INS59 INS8 UPD42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS8 INS45 INS42 INS45 INS42 UPD42 UPD45 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS54 INS41 UPD45 UPD45 INS43 INS59 INS27 INS8 INS8 INS8 INS12 INS42 INS42 INS42 INS32 INS27 INS27 INS41 INS41 INS21 INS21 INS44 INS8 UPD45 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS32 INS9 INS32 INS32 INS43 INS42 INS21 INS21 INS41 UPD45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL45 DEL8