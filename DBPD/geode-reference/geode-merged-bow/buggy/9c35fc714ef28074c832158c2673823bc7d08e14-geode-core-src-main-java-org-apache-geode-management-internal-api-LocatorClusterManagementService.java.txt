GEODE-6174: more error handling in LocatorClusterConfigurationService (#3134)

* GEODE-6174: more error handling in LocatorClusterConfigurationService

* fail early if cluster persistence serivce is not enabled
* creating the region twice will result in status code 409
* if region creation is partially failed on members, do not update cluster configuration.
-import org.apache.geode.management.internal.exceptions.NoMembersException;
+    if (persistenceService == null) {
+      return new ClusterManagementResult(false,
+          "Cluster configuration service needs to be enabled");
+    }
+
-      validator.validate(config);
+      try {
+        validator.validate(config);
+      } catch (IllegalArgumentException e) {
+        return new ClusterManagementResult(false, e.getMessage());
+      }
-    final boolean configurationPersistenceEnabled = persistenceService != null;
-    if (configurationPersistenceEnabled) {
-      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
-      if (configurationMutator.exists(config, currentPersistedConfig)) {
-        throw new EntityExistsException("cache element " + config.getId() + " already exists.");
-      }
+    CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
+    if (configurationMutator.exists(config, currentPersistedConfig)) {
+      throw new EntityExistsException("cache element " + config.getId() + " already exists.");
-      throw new NoMembersException("no members found to create cache element");
+      return new ClusterManagementResult(false, "no members found to create cache element");
-    // persist configuration in cache config
-    if (configurationPersistenceEnabled) {
-      String finalGroup = group;
-      persistenceService.updateCacheConfig(finalGroup, cacheConfigForGroup -> {
-        try {
-          configurationMutator.add(config, cacheConfigForGroup);
-          result.setClusterConfigPersisted(true,
-              "successfully persisted config for " + finalGroup);
-        } catch (Exception e) {
-          String message = "failed to update cluster config for " + finalGroup;
-          logger.error(message, e);
-          result.setClusterConfigPersisted(false, message);
-          return null;
-        }
-
-        return cacheConfigForGroup;
-      });
+    if (!result.isSuccessfullyAppliedOnMembers()) {
+      result.setClusterConfigPersisted(false, "Failed to apply the update on all members.");
+      return result;
+    // persist configuration in cache config
+    String finalGroup = group;
+    persistenceService.updateCacheConfig(finalGroup, cacheConfigForGroup -> {
+      try {
+        configurationMutator.add(config, cacheConfigForGroup);
+        result.setClusterConfigPersisted(true,
+            "successfully persisted config for " + finalGroup);
+      } catch (Exception e) {
+        String message = "failed to update cluster config for " + finalGroup;
+        logger.error(message, e);
+        result.setClusterConfigPersisted(false, message);
+        return null;
+      }
+      return cacheConfigForGroup;
+    });
-  private Set<DistributedMember> findMembers(String[] groups, String[] members) {
+  @VisibleForTesting
+  Set<DistributedMember> findMembers(String[] groups, String[] members) {
-  private List<CliFunctionResult> executeAndGetFunctionResult(Function function, Object args,
+  @VisibleForTesting
+  List<CliFunctionResult> executeAndGetFunctionResult(Function function, Object args,

INS78 INS78 INS25 MOV60 MOV25 MOV60 MOV21 INS42 INS42 INS27 INS8 INS8 INS38 MOV42 MOV33 INS41 INS54 INS41 INS32 INS21 INS41 INS14 MOV8 INS12 INS14 INS42 INS42 INS32 INS42 INS43 INS9 INS45 INS44 INS8 UPD43 MOV43 INS9 MOV45 INS42 INS42 INS9 INS45 INS42 INS43 INS42 INS41 UPD42 INS42 INS14 INS43 INS9 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL39 DEL42 DEL27 DEL59 DEL60 DEL42 DEL8 DEL25 DEL14 DEL53 DEL42 DEL83 DEL83