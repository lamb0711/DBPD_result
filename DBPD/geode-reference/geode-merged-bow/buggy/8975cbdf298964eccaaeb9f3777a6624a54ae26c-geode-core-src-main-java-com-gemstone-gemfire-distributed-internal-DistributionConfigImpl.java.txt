GEODE-1377: Initial move of system properties from private to public

+import static com.gemstone.gemfire.distributed.SystemConfigurationProperties.*;
+
-      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT_NAME,
+      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT,
-          + SECURITY_PEER_AUTHENTICATOR_NAME, securityPeerAuthenticator);
+          + SECURITY_PEER_AUTHENTICATOR, securityPeerAuthenticator);
-        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS_NAME,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-    boolean httpServiceSSLEnabledOverriden = this.sourceMap.get(HTTP_SERVICE_SSL_ENABLED_NAME) != null;
+    boolean httpServiceSSLEnabledOverriden = this.sourceMap.get(HTTP_SERVICE_SSL_ENABLED) != null;
-    if (props.containsKey(SECURITY_PEER_AUTH_INIT_NAME)) {
-      this.setAttribute(SECURITY_PEER_AUTH_INIT_NAME, (String)props
-          .get(SECURITY_PEER_AUTH_INIT_NAME),
-          this.sourceMap.get(SECURITY_PEER_AUTH_INIT_NAME));
+    if (props.containsKey(SECURITY_PEER_AUTH_INIT)) {
+      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String)props
+          .get(SECURITY_PEER_AUTH_INIT),
+          this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
-    if (props.containsKey(SECURITY_PEER_AUTHENTICATOR_NAME)) {
-      this.setAttribute(SECURITY_PEER_AUTHENTICATOR_NAME, (String)props
-          .get(SECURITY_PEER_AUTHENTICATOR_NAME),
-          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR_NAME));
+    if (props.containsKey(SECURITY_PEER_AUTHENTICATOR)) {
+      this.setAttribute(SECURITY_PEER_AUTHENTICATOR, (String)props
+          .get(SECURITY_PEER_AUTHENTICATOR),
+          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT_NAME);
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR_NAME);
+    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT);
+    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR);
-    this.httpServicePort = (Integer)checkAttribute(HTTP_SERVICE_PORT_NAME, value);
+    this.httpServicePort = (Integer)checkAttribute(HTTP_SERVICE_PORT, value);
-    this.httpServiceBindAddress = (String)checkAttribute(HTTP_SERVICE_BIND_ADDRESS_NAME, value);
+    this.httpServiceBindAddress = (String)checkAttribute(HTTP_SERVICE_BIND_ADDRESS, value);
-    this.deltaPropagation = (Boolean)checkAttribute(DELTA_PROPAGATION_PROP_NAME, value);
+    this.deltaPropagation = (Boolean)checkAttribute(DELTA_PROPAGATION, value);
-    securityClientAuthenticator = (String)checkAttribute(SECURITY_CLIENT_AUTHENTICATOR_NAME, value);
+    securityClientAuthenticator = (String)checkAttribute(SECURITY_CLIENT_AUTHENTICATOR, value);
-    securityClientDHAlgo = (String)checkAttribute(SECURITY_CLIENT_DHALGO_NAME, value);
+    securityClientDHAlgo = (String)checkAttribute(SECURITY_CLIENT_DHALGO, value);
-    securityPeerAuthInit = (String)checkAttribute(SECURITY_PEER_AUTH_INIT_NAME, value);
+    securityPeerAuthInit = (String)checkAttribute(SECURITY_PEER_AUTH_INIT, value);
-    securityPeerAuthenticator = (String)checkAttribute(SECURITY_PEER_AUTHENTICATOR_NAME, value);
+    securityPeerAuthenticator = (String)checkAttribute(SECURITY_PEER_AUTHENTICATOR, value);
-    securityClientAccessor = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_NAME, value);
+    securityClientAccessor = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR, value);
-    securityClientAccessorPP = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_PP_NAME, value);
+    securityClientAccessorPP = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_PP, value);
-    securityLogLevel = (Integer)checkAttribute(SECURITY_LOG_LEVEL_NAME, value);
+    securityLogLevel = (Integer)checkAttribute(SECURITY_LOG_LEVEL, value);
-    securityLogFile = (File)checkAttribute(SECURITY_LOG_FILE_NAME, value);
+    securityLogFile = (File)checkAttribute(SECURITY_LOG_FILE, value);
-    securityPeerMembershipTimeout = (Integer)checkAttribute(SECURITY_PEER_VERIFYMEMBER_TIMEOUT_NAME, value);
+    securityPeerMembershipTimeout = (Integer)checkAttribute(SECURITY_PEER_VERIFY_MEMBER_TIMEOUT, value);
-    this.distributedSystemId = (Integer)checkAttribute(DISTRIBUTED_SYSTEM_ID_NAME, distributedSystemId);
+    this.distributedSystemId = (Integer)checkAttribute(DISTRIBUTED_SYSTEM_ID, distributedSystemId);
-    this.enforceUniqueHost = (Boolean)checkAttribute(ENFORCE_UNIQUE_HOST_NAME, enforceUniqueHost);
+    this.enforceUniqueHost = (Boolean)checkAttribute(ENFORCE_UNIQUE_HOST, enforceUniqueHost);
-    this.redundancyZone = (String)checkAttribute(REDUNDANCY_ZONE_NAME, redundancyZone);
+    this.redundancyZone = (String)checkAttribute(REDUNDANCY_ZONE, redundancyZone);
-    this.groups = (String)checkAttribute(GROUPS_NAME, value);
+    this.groups = (String)checkAttribute(GROUPS, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE, value);
-    value =(String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE_NAME, value);
+    value =(String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.jmxManagerPort = (Integer)checkAttribute(JMX_MANAGER_PORT_NAME, value);
+    this.jmxManagerPort = (Integer)checkAttribute(JMX_MANAGER_PORT, value);
-    this.jmxManagerBindAddress = (String)checkAttribute(JMX_MANAGER_BIND_ADDRESS_NAME, value);
+    this.jmxManagerBindAddress = (String)checkAttribute(JMX_MANAGER_BIND_ADDRESS, value);
-    this.jmxManagerHostnameForClients = (String)checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS_NAME, value);
+    this.jmxManagerHostnameForClients = (String)checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, value);
-    this.jmxManagerPasswordFile = (String)checkAttribute(JMX_MANAGER_PASSWORD_FILE_NAME, value);
+    this.jmxManagerPasswordFile = (String)checkAttribute(JMX_MANAGER_PASSWORD_FILE, value);
-    this.jmxManagerAccessFile = (String)checkAttribute(JMX_MANAGER_ACCESS_FILE_NAME, value);
+    this.jmxManagerAccessFile = (String)checkAttribute(JMX_MANAGER_ACCESS_FILE, value);
-    this.jmxManagerUpdateRate = (Integer)checkAttribute(JMX_MANAGER_UPDATE_RATE_NAME, value);
+    this.jmxManagerUpdateRate = (Integer)checkAttribute(JMX_MANAGER_UPDATE_RATE, value);
-    this.remoteLocators = (String)checkAttribute(REMOTE_LOCATORS_NAME, value);
+    this.remoteLocators = (String)checkAttribute(REMOTE_LOCATORS, value);
-    this.memcachedPort = (Integer)checkAttribute(MEMCACHED_PORT_NAME, value);
+    this.memcachedPort = (Integer)checkAttribute(MEMCACHED_PORT, value);
-    this.memcachedProtocol = (String)checkAttribute(MEMCACHED_PROTOCOL_NAME, protocol);
+    this.memcachedProtocol = (String)checkAttribute(MEMCACHED_PROTOCOL, protocol);
-    this.redisPort = (Integer)checkAttribute(REDIS_PORT_NAME, value);
+    this.redisPort = (Integer)checkAttribute(REDIS_PORT, value);
-    this.redisBindAddress = (String)checkAttribute(REDIS_BIND_ADDRESS_NAME, bindAddress);
+    this.redisBindAddress = (String)checkAttribute(REDIS_BIND_ADDRESS, bindAddress);
-    this.offHeapMemorySize = (String)checkAttribute(OFF_HEAP_MEMORY_SIZE_NAME, value);
+    this.offHeapMemorySize = (String)checkAttribute(OFF_HEAP_MEMORY_SIZE, value);
-    this.memcachedBindAddress = (String)checkAttribute(MEMCACHED_BIND_ADDRESS_NAME, bindAddress);
+    this.memcachedBindAddress = (String)checkAttribute(MEMCACHED_BIND_ADDRESS, bindAddress);
-    this.serverSSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED_NAME, value);
+    this.serverSSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    this.serverSslRequireAuthentication = (Boolean)checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.serverSslRequireAuthentication = (Boolean)checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION, value);
-    this.serverSslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS_NAME, protocols);
+    this.serverSslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.serverSslCiphers = (String)checkAttribute(SERVER_SSL_CIPHERS_NAME, ciphers);
+    this.serverSslCiphers = (String)checkAttribute(SERVER_SSL_CIPHERS, ciphers);
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_KEYSTORE, value);
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_TYPE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_TYPE, value);
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD_NAME,  value );
+    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD,  value );
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE, value);
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.gatewaySSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED_NAME, value);
+    this.gatewaySSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    this.gatewaySslRequireAuthentication = (Boolean)checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.gatewaySslRequireAuthentication = (Boolean)checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION, value);
-    this.gatewaySslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS_NAME, protocols);
+    this.gatewaySslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.gatewaySslCiphers = (String)checkAttribute(GATEWAY_SSL_CIPHERS_NAME, ciphers);
+    this.gatewaySslCiphers = (String)checkAttribute(GATEWAY_SSL_CIPHERS, ciphers);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_TYPE_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE_TYPE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_PASSWORD_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE_PASSWORD, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE_NAME, value);
+    checkAttribute(GATEWAY_SSL_TRUSTSTORE, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    checkAttribute(GATEWAY_SSL_TRUSTSTORE_PASSWORD, value);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_NAME, httpServiceSSLKeyStore);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE, httpServiceSSLKeyStore);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME, httpServiceSSLKeyStoreType);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_TYPE, httpServiceSSLKeyStoreType);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME, httpServiceSSLKeyStorePassword);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, httpServiceSSLKeyStorePassword);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_NAME, httpServiceSSLTrustStore);
+    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE, httpServiceSSLTrustStore);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);
+    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, httpServiceSSLTrustStorePassword);

INS26 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42