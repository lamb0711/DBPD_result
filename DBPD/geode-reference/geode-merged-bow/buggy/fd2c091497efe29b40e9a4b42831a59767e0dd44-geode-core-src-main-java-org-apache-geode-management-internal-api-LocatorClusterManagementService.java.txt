GEODE-6897: async operation framework for ClusterManagementService (#3801)

* GEODE-6897: create async operations framework for commands such as rebalance
-import java.util.HashMap;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import org.apache.geode.management.api.ClusterManagementOperation;
+import org.apache.geode.management.api.ClusterManagementOperationResult;
+import org.apache.geode.management.api.JsonSerializable;
+import org.apache.geode.management.internal.ClusterManagementOperationStatusResult;
+import org.apache.geode.management.internal.operation.OperationHistoryManager;
+import org.apache.geode.management.internal.operation.OperationHistoryManager.OperationInstance;
+import org.apache.geode.management.internal.operation.OperationManager;
-  private ConfigurationPersistenceService persistenceService;
-  private Map<Class, ConfigurationManager> managers;
-  private Map<Class, ConfigurationValidator> validators;
-  private MemberValidator memberValidator;
-  private CacheElementValidator commonValidator;
+  private final ConfigurationPersistenceService persistenceService;
+  private final Map<Class, ConfigurationManager> managers;
+  private final Map<Class, ConfigurationValidator> validators;
+  private final OperationManager executorManager;
+  private final MemberValidator memberValidator;
+  private final CacheElementValidator commonValidator;
-    this(persistenceService, new HashMap<>(), new HashMap<>(), null, null);
+    this(persistenceService, new ConcurrentHashMap<>(), new ConcurrentHashMap<>(),
+        new MemberValidator(cache, persistenceService), new CacheElementValidator(),
+        new OperationManager(new OperationHistoryManager()));
-    commonValidator = new CacheElementValidator();
-    memberValidator = new MemberValidator(cache, persistenceService);
-      Map<Class, ConfigurationManager> managers, Map<Class, ConfigurationValidator> validators,
-      MemberValidator memberValidator, CacheElementValidator commonValidator) {
+      Map<Class, ConfigurationManager> managers,
+      Map<Class, ConfigurationValidator> validators,
+      MemberValidator memberValidator,
+      CacheElementValidator commonValidator,
+      OperationManager executorManager) {
+    this.executorManager = executorManager;
+  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
+      A op) {
+    CompletableFuture<V> future = executorManager.submit(op).getFuture();
+
+    ClusterManagementResult result = new ClusterManagementResult(
+        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
+    return new ClusterManagementOperationResult<>(result, future);
+  }
+
+  /**
+   * this is intended for use by the REST controller. for Java usage, please use
+   * {@link #startOperation(ClusterManagementOperation)}
+   */
+  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
+      A op, String uri) {
+    OperationInstance<A, V> operationInstance = executorManager.submit(op);
+
+    ClusterManagementResult result = new ClusterManagementResult(
+        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
+
+    String opId = operationInstance.getId();
+    String instUri = uri + "/" + opId;
+    result.setUri(instUri);
+
+    return new ClusterManagementOperationResult<>(result, operationInstance.getFuture());
+  }
+
+  /**
+   * this is intended for use by the REST controller. for Java usage, please use
+   * {@link ClusterManagementOperationResult#getResult()}
+   */
+  public <V extends JsonSerializable> ClusterManagementOperationStatusResult<V> checkStatus(
+      String opId) {
+    final CompletableFuture<V> status = executorManager.getStatus(opId);
+    if (status == null) {
+      throw new EntityNotFoundException("Operation id = " + opId + " not found");
+    }
+    ClusterManagementOperationStatusResult<V> result =
+        new ClusterManagementOperationStatusResult<>();
+    if (!status.isDone()) {
+      result.setStatus(ClusterManagementResult.StatusCode.IN_PROGRESS, "in progress");
+    } else {
+      try {
+        result.setResult(status.get());
+        result.setStatus(ClusterManagementResult.StatusCode.OK, "finished successfully");
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        throw new RuntimeException(e);
+      } catch (ExecutionException e) {
+        throw new RuntimeException(e);
+      }
+    }
+    return result;
+  }
+
+  @Override
+  @Override
+  public void close() {
+    executorManager.close();
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS44 INS78 INS83 INS73 INS73 INS74 INS42 INS44 INS8 INS29 INS83 INS73 INS73 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS73 INS74 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS17 INS43 INS42 INS21 INS42 INS42 INS74 INS42 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS41 INS65 INS42 INS74 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS21 INS41 INS65 INS42 INS43 INS43 INS43 INS43 INS42 INS60 INS25 INS60 INS25 INS41 INS42 INS21 MOV42 MOV14 MOV14 MOV14 MOV14 INS14 INS42 INS7 INS43 INS43 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS14 INS66 INS65 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS14 INS66 INS65 INS42 INS42 INS42 INS42 INS83 INS74 INS59 INS27 INS8 INS74 INS59 INS38 INS8 INS8 INS42 INS32 UPD74 UPD74 INS43 INS14 INS22 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS74 INS42 INS42 INS68 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS74 INS42 INS32 INS68 INS43 INS43 INS42 INS32 INS42 INS33 INS53 INS43 INS43 INS42 INS14 INS32 INS21 INS54 INS42 INS42 UPD43 UPD43 INS42 INS43 INS52 INS42 INS42 INS42 INS32 INS42 INS43 INS40 INS45 INS43 INS42 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS74 INS42 INS42 INS32 INS8 INS12 INS12 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS40 INS45 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS40 INS45 INS42 INS32 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL33 DEL33 DEL17 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21