GEODE-3412: Add simple authentication flow to protobuf protocol. This now closes #707

This change adds a simple username/password validation to the protobuf protocol.
It also adds a new configuration parameter to specify the type of authentication required.

Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>

+import java.util.HashMap;
+import java.util.Map;
-import javax.management.ServiceNotFoundException;
-  private static ClientProtocolMessageHandler protobufProtocolHandler;
-  private static final Object protocolLoadLock = new Object();
+  private ClientProtocolMessageHandler protobufProtocolHandler;
+  private Map<String, Class<? extends StreamAuthenticator>> authenticators = null;
-  private static ClientProtocolMessageHandler findClientProtocolMessageHandler() {
-    if (protobufProtocolHandler != null) {
-      return protobufProtocolHandler;
+  public ServerConnectionFactory() {}
+
+  private synchronized void initializeAuthenticatorsMap() {
+    if (authenticators != null) {
+      return;
-
-    synchronized (protocolLoadLock) {
-      if (protobufProtocolHandler != null) {
-        return protobufProtocolHandler;
-      }
-
-      ServiceLoader<ClientProtocolMessageHandler> loader =
-          ServiceLoader.load(ClientProtocolMessageHandler.class);
-      Iterator<ClientProtocolMessageHandler> iterator = loader.iterator();
-
-      if (!iterator.hasNext()) {
-        throw new ServiceLoadingFailureException(
-            "ClientProtocolMessageHandler implementation not found in JVM");
-      }
-
-      ClientProtocolMessageHandler returnValue = iterator.next();
-
-      if (iterator.hasNext()) {
-        throw new ServiceLoadingFailureException(
-            "Multiple service implementations found for ClientProtocolMessageHandler");
-      }
-
-      return returnValue;
+    authenticators = new HashMap<>();
+    ServiceLoader<StreamAuthenticator> loader = ServiceLoader.load(StreamAuthenticator.class);
+    for (StreamAuthenticator streamAuthenticator : loader) {
+      authenticators.put(streamAuthenticator.implementationID(), streamAuthenticator.getClass());
-  public static ServerConnection makeServerConnection(Socket s, InternalCache c,
-      CachedRegionHelper helper, CacheServerStats stats, int hsTimeout, int socketBufferSize,
-      String communicationModeStr, byte communicationMode, Acceptor acceptor,
-      SecurityService securityService) throws IOException {
+  private synchronized ClientProtocolMessageHandler initializeMessageHandler() {
+    if (protobufProtocolHandler != null) {
+      return protobufProtocolHandler;
+    }
+    ServiceLoader<ClientProtocolMessageHandler> loader =
+        ServiceLoader.load(ClientProtocolMessageHandler.class);
+    Iterator<ClientProtocolMessageHandler> iterator = loader.iterator();
+
+    if (!iterator.hasNext()) {
+      throw new ServiceLoadingFailureException(
+          "There is no ClientProtocolMessageHandler implementation found in JVM");
+    }
+
+    protobufProtocolHandler = iterator.next();
+    return protobufProtocolHandler;
+  }
+
+  private StreamAuthenticator findStreamAuthenticator(String implementationID) {
+    if (authenticators == null) {
+      initializeAuthenticatorsMap();
+    }
+    Class<? extends StreamAuthenticator> streamAuthenticatorClass =
+        authenticators.get(implementationID);
+    if (streamAuthenticatorClass == null) {
+      throw new ServiceLoadingFailureException(
+          "Could not find implementation for StreamAuthenticator with implementation ID "
+              + implementationID);
+    } else {
+      try {
+        return streamAuthenticatorClass.newInstance();
+      } catch (InstantiationException | IllegalAccessException e) {
+        throw new ServiceLoadingFailureException(
+            "Unable to instantiate authenticator for ID " + implementationID, e);
+      }
+    }
+  }
+
+  private ClientProtocolMessageHandler getClientProtocolMessageHandler() {
+    if (protobufProtocolHandler == null) {
+      initializeMessageHandler();
+    }
+    return protobufProtocolHandler;
+  }
+
+  public ServerConnection makeServerConnection(Socket s, InternalCache c, CachedRegionHelper helper,
+      CacheServerStats stats, int hsTimeout, int socketBufferSize, String communicationModeStr,
+      byte communicationMode, Acceptor acceptor, SecurityService securityService)
+      throws IOException {
-        protobufProtocolHandler = findClientProtocolMessageHandler();
+        String authenticationMode =
+            System.getProperty("geode.protocol-authentication-mode", "NOOP");
+
-            communicationModeStr, communicationMode, acceptor, protobufProtocolHandler,
-            securityService);
+            communicationModeStr, communicationMode, acceptor, getClientProtocolMessageHandler(),
+            securityService, findStreamAuthenticator(authenticationMode));

MOV26 INS26 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 MOV83 INS74 INS59 INS83 INS42 INS8 INS83 INS83 INS39 INS42 INS8 UPD83 UPD42 MOV8 INS83 INS43 INS42 INS44 INS8 INS83 MOV43 INS42 INS8 INS43 INS43 INS74 INS42 INS33 INS25 INS21 INS60 INS70 INS21 INS42 INS43 INS42 INS25 INS60 INS25 INS25 INS41 INS42 INS42 INS43 INS76 INS27 INS8 INS7 INS74 INS59 INS44 INS42 INS8 MOV38 INS7 UPD42 INS42 INS27 INS8 INS74 INS59 INS27 MOV8 INS8 INS27 INS8 INS42 INS42 INS43 INS42 INS33 INS41 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 MOV32 INS42 INS33 INS21 INS43 INS76 INS42 INS32 INS42 INS33 INS54 INS42 INS33 INS21 INS42 INS74 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS8 INS12 INS32 INS43 INS43 INS42 INS42 INS32 INS32 UPD45 INS42 INS42 INS27 INS41 INS44 INS8 INS42 INS60 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS84 INS42 INS53 INS43 INS59 INS42 INS42 INS43 INS43 INS14 INS42 INS42 INS32 INS32 INS32 INS42 INS42 UPD43 MOV43 INS27 INS42 INS42 UPD42 MOV42 INS45 INS45 INS42 INS42 INS42 UPD42 INS45 INS42 DEL83 DEL83 DEL83 DEL43 DEL42 DEL14 DEL59 DEL23 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL51 DEL8 DEL45 DEL83 DEL42 DEL32 DEL7 DEL21 DEL42