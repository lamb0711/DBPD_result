GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Queue;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.concurrent.locks.LockSupport;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.*;
+import org.apache.geode.cache.CacheTransactionManager;
+import org.apache.geode.cache.CommitConflictException;
+import org.apache.geode.cache.TransactionDataRebalancedException;
+import org.apache.geode.cache.TransactionId;
+import org.apache.geode.cache.TransactionInDoubtException;
+import org.apache.geode.cache.TransactionListener;
+import org.apache.geode.cache.TransactionWriter;
+import org.apache.geode.cache.UnsupportedOperationInTransactionException;
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.MembershipListener;
-import org.apache.logging.log4j.Logger;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.*;
-import java.util.Map.Entry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.concurrent.locks.LockSupport;
- * <p>
- * {@link GemFireCacheImpl#getCacheTransactionManager}. Internal operations
+ * {@link InternalCache#getCacheTransactionManager}. Internal operations
- * </code>TransactionListener</code> invocation, Region synchronization, transaction statistics and
+ * {@code TransactionListener} invocation, Region synchronization, transaction statistics and
- * 
+
+
-  private final Cache cache;
+  private final InternalCache cache;
-  private final ArrayList<TransactionListener> txListeners = new ArrayList<TransactionListener>(8);
+  private final List<TransactionListener> txListeners = new ArrayList<>(8);
+
+
-  public final static int FAILOVER_TX_MAP_SIZE =
+  public static final int FAILOVER_TX_MAP_SIZE =
+        // TODO: inner class is serializable but outer class is not
-        };
+        }
-  private ConcurrentMap<TXId, TXStateProxy> localTxMap =
-      new ConcurrentHashMap<TXId, TXStateProxy>();
+  private ConcurrentMap<TXId, TXStateProxy> localTxMap = new ConcurrentHashMap<>();
-   *
-   * @param cachePerfStats
-  public TXManagerImpl(CachePerfStats cachePerfStats, Cache cache) {
+  public TXManagerImpl(CachePerfStats cachePerfStats, InternalCache cache) {
-    this.hostedTXStates = new HashMap<TXId, TXStateProxy>();
-    this.txContext = new ThreadLocal<TXStateProxy>();
-    this.isTXDistributed = new ThreadLocal<Boolean>();
+    this.hostedTXStates = new HashMap<>();
+    this.txContext = new ThreadLocal<>();
+    this.isTXDistributed = new ThreadLocal<>();
-  final Cache getCache() {
+  InternalCache getCache() {
-
-  public final TransactionWriter getWriter() {
+  public TransactionWriter getWriter() {
-
-  public final void setWriter(TransactionWriter writer) {
-    if (((GemFireCacheImpl) this.cache).isClient()) {
+  public void setWriter(TransactionWriter writer) {
+    if (this.cache.isClient()) {
-
-  public final TransactionListener getListener() {
+  public TransactionListener getListener() {
-  final CachePerfStats getCachePerfStats() {
+  CachePerfStats getCachePerfStats() {
-  final void noteCommitFailure(long opStart, long lifeTime, TXStateInterface tx) {
+  void noteCommitFailure(long opStart, long lifeTime, TXStateInterface tx) {
-  final void noteCommitSuccess(long opStart, long lifeTime, TXStateInterface tx) {
+  void noteCommitSuccess(long opStart, long lifeTime, TXStateInterface tx) {
-  final void noteRollbackSuccess(long opStart, long lifeTime, TXStateInterface tx) {
+  void noteRollbackSuccess(long opStart, long lifeTime, TXStateInterface tx) {
-  public final void setTXState(TXStateProxy val) {
+  public void setTXState(TXStateProxy val) {
-    {
-      TransactionListener[] listeners = getListeners();
-      for (int i = 0; i < listeners.length; i++) {
-        closeListener(listeners[i]);
-      }
+    TransactionListener[] listeners = getListeners();
+    for (int i = 0; i < listeners.length; i++) {
+      closeListener(listeners[i]);
-  public final TXStateProxy internalSuspend() {
+  public TXStateProxy internalSuspend() {
-  public final void resume(TXStateProxy tx) {
+  @Deprecated
+  public void resume(TXStateProxy tx) {
-  public final boolean isClosed() {
+  public boolean isClosed() {
-  private final void checkClosed() {
+  private void checkClosed() {
-  final DM getDM() {
+  DM getDM() {
-
-
-
-  public final static TXStateProxy getCurrentTXState() {
+  public static TXStateProxy getCurrentTXState() {
-   * @param msg
-   * @throws InterruptedException
-   * @param msg
-   * @param memberId
-   * @throws InterruptedException
-          // [sjigyasu] TODO: Conditionally create object based on distributed or non-distributed tx
-          // mode
+          // TODO: Conditionally create object based on distributed or non-distributed tx mode
-   * 
-   * @param tx
-   * @param txId
-   * @param txId
-   * @param txId
-   * @param txId
-   * @param msg
-   * @param txId
-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+      InternalCache cache = GemFireCacheImpl.getInstance();
-
-        GemFireCacheImpl cache = (GemFireCacheImpl) this.cache;
-        cache.purgeCCPTimer();
+        this.cache.purgeCCPTimer();
-  private ConcurrentMap<TransactionId, Queue<Thread>> waitMap =
-      new ConcurrentHashMap<TransactionId, Queue<Thread>>();
+  private ConcurrentMap<TransactionId, Queue<Thread>> waitMap = new ConcurrentHashMap<>();
-   * @param txId
-    final GemFireCacheImpl cache = (GemFireCacheImpl) this.cache;
+
+
+
+
-  public static final void incRefCount(AbstractRegionEntry re) {
+  public static void incRefCount(AbstractRegionEntry re) {
-  public static final boolean decRefCount(AbstractRegionEntry re) {
+  public static boolean decRefCount(AbstractRegionEntry re) {
-        ((GemFireCacheImpl) this.cache).getCCPTimer().schedule(task, timeout);
+        this.cache.getCCPTimer().schedule(task, timeout);
-        if (!((GemFireCacheImpl) this.cache).isClosed()) {
+        if (!this.cache.isClosed()) {
-      isTXDistributed.set(new Boolean(flag));
+      isTXDistributed.set(flag);
-
-      return value.booleanValue();
+      return value;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 UPD43 UPD74 INS83 MOV21 UPD43 INS78 INS65 UPD66 UPD42 UPD43 MOV43 UPD43 UPD42 MOV60 MOV24 INS42 INS66 UPD42 UPD74 UPD74 UPD42 UPD74 UPD42 MOV22 MOV22 MOV22 UPD43 UPD74 UPD74 UPD74 UPD42 INS42 INS42 MOV22 MOV32 MOV22 INS42 MOV32 MOV22 INS42 DEL66 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL83 DEL42 DEL43 DEL11 DEL36 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL8 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL59 DEL60 DEL83 DEL83 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32