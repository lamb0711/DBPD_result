GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

+import static org.apache.commons.lang.Validate.notNull;
+
- * Exists inside a process launched by ServerLauncher or LocatorLauncher. Creates the PID file and
- * ControlFileWatchdogs to monitor working directory for creation of stop or status request files.
+ * Creates the {@link PidFile} and uses {@link ControlFileWatchdog} to monitor the directory for
+ * creation of stop or status request files.
-  private final File workingDir;
-  private final File pidFile;
+  private final File directory;
-  public ControllableProcess(final ControlNotificationHandler handler, final File workingDir,
-      final ProcessType processType, boolean force)
+  public ControllableProcess(final ControlNotificationHandler handler, final File directory,
+      final ProcessType processType, final boolean force)
-    this.workingDir = workingDir;
-    this.pidFile = new File(this.workingDir, processType.getPidFileName());
+    this(directory, processType, force, createPidFile(directory, processType),
+        createStopHandler(handler), createStatusHandler(handler, directory, processType));
+  }
-    deleteFiles(this.workingDir, processType);
+  private ControllableProcess(final File directory, final ProcessType processType,
+      final boolean force, final File pidFile, final ControlRequestHandler stopHandler,
+      final ControlRequestHandler statusHandler)
+      throws FileAlreadyExistsException, IOException, PidUnavailableException {
+    this(directory, processType, createLocalProcessLauncher(pidFile, force),
+        createStopRequestFileWatchdog(directory, processType, stopHandler),
+        createStatusRequestFileWatchdog(directory, processType, statusHandler));
+  }
-    this.launcher = new LocalProcessLauncher(this.pidFile, force);
+  ControllableProcess(final File directory, final ProcessType processType,
+      final LocalProcessLauncher launcher, final ControlFileWatchdog stopRequestFileWatchdog,
+      final ControlFileWatchdog statusRequestFileWatchdog) {
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notNull(processType, "Invalid processType '" + processType + "' specified");
+    notNull(launcher, "Invalid launcher '" + launcher + "' specified");
+    notNull(stopRequestFileWatchdog,
+        "Invalid stopRequestFileWatchdog '" + stopRequestFileWatchdog + "' specified");
+    notNull(statusRequestFileWatchdog,
+        "Invalid statusRequestFileWatchdog '" + statusRequestFileWatchdog + "' specified");
-    final ControlRequestHandler stopHandler = new ControlRequestHandler() {
-      @Override
-      public void handleRequest() {
-        handler.handleStop();
-      }
-    };
-    final ControlRequestHandler statusHandler = new ControlRequestHandler() {
-      @Override
-      public void handleRequest() throws IOException {
-        final ServiceState<?> state = handler.handleStatus();
-        final File statusFile = new File(workingDir, processType.getStatusFileName());
-        if (statusFile.exists()) {
-          statusFile.delete();
-        }
-        final File statusFileTmp = new File(workingDir, processType.getStatusFileName() + ".tmp");
-        if (statusFileTmp.exists()) {
-          statusFileTmp.delete();
-        }
-        boolean created = statusFileTmp.createNewFile();
-        assert created;
-        final FileWriter writer = new FileWriter(statusFileTmp);
-        writer.write(state.toJson());
-        writer.flush();
-        writer.close();
-        boolean renamed = statusFileTmp.renameTo(statusFile);
-        assert renamed;
-      }
-    };
+    this.directory = directory;
+    this.launcher = launcher;
+    this.stopRequestFileWatchdog = stopRequestFileWatchdog;
+    this.statusRequestFileWatchdog = statusRequestFileWatchdog;
-    this.stopRequestFileWatchdog = new ControlFileWatchdog(workingDir,
-        processType.getStopRequestFileName(), stopHandler, false);
-    this.stopRequestFileWatchdog.start();
-    this.statusRequestFileWatchdog = new ControlFileWatchdog(workingDir,
-        processType.getStatusRequestFileName(), statusHandler, false);
-    this.statusRequestFileWatchdog.start();
+    deleteFiles(directory, processType);
+    stopRequestFileWatchdog.start();
+    statusRequestFileWatchdog.start();
-    return this.launcher.getPid();
+    return launcher.getPid();
-    return this.launcher.getPidFile();
+    return launcher.getPidFile();
+  }
+
+  public File getDirectory() {
+    return directory;
+    boolean interrupted = false;
-      this.statusRequestFileWatchdog.stop();
-    } catch (InterruptedException e) {
-      logger.warn("Interrupted while stopping status handler for controllable process.", e);
+      interrupted = stop(statusRequestFileWatchdog);
+      interrupted = stop(stopRequestFileWatchdog) || interrupted;
+      launcher.close();
-      try {
-        this.stopRequestFileWatchdog.stop();
-      } catch (InterruptedException e) {
-        logger.warn("Interrupted while stopping stop handler for controllable process.", e);
+      if (interrupted) {
+        Thread.currentThread().interrupt();
-      this.launcher.close();
-  protected File getWorkingDir() {
-    return this.workingDir;
+  public void stop(final boolean deletePidFileOnStop) {
+    boolean interrupted = false;
+    try {
+      interrupted = stop(statusRequestFileWatchdog);
+      interrupted = stop(stopRequestFileWatchdog) || interrupted;
+      launcher.close(deletePidFileOnStop);
+    } finally {
+      if (interrupted) {
+        Thread.currentThread().interrupt();
+      }
+    }
-  private static void deleteFiles(final File workingDir, final ProcessType processType) {
-    deleteFile(workingDir, processType.getStatusRequestFileName());
-    deleteFile(workingDir, processType.getStatusFileName());
-    deleteFile(workingDir, processType.getStopRequestFileName());
+  private boolean stop(final ControlFileWatchdog fileWatchdog) {
+    boolean interrupted = false;
+    try {
+      fileWatchdog.stop();
+    } catch (InterruptedException e) {
+      interrupted = true;
+      logger.warn("Interrupted while stopping status handler for controllable process.", e);
+    }
+    return interrupted;
-  private static void deleteFile(final File workingDir, final String fileName) {
-    final File file = new File(workingDir, fileName);
+  private void deleteFiles(final File directory, final ProcessType processType) {
+    deleteFile(directory, processType.getStatusRequestFileName());
+    deleteFile(directory, processType.getStatusFileName());
+    deleteFile(directory, processType.getStopRequestFileName());
+  }
+
+  private void deleteFile(final File directory, final String fileName) {
+    File file = new File(directory, fileName);
+
+  private static File createPidFile(final File directory, final ProcessType processType) {
+    return new File(directory, processType.getPidFileName());
+  }
+
+  private static LocalProcessLauncher createLocalProcessLauncher(final File pidFile,
+      final boolean force) throws FileAlreadyExistsException, IOException, PidUnavailableException {
+    return new LocalProcessLauncher(pidFile, force);
+  }
+
+  private static ControlRequestHandler createStopHandler(final ControlNotificationHandler handler) {
+    return handler::handleStop;
+  }
+
+  private static ControlRequestHandler createStatusHandler(final ControlNotificationHandler handler,
+      final File directory, final ProcessType processType) {
+    return () -> {
+      ServiceState<?> state = handler.handleStatus();
+
+      File statusFile = new File(directory, processType.getStatusFileName());
+      if (statusFile.exists()) {
+        boolean deleted = statusFile.delete();
+        assert deleted;
+      }
+
+      File statusFileTmp = new File(directory, processType.getStatusFileName() + ".tmp");
+      if (statusFileTmp.exists()) {
+        boolean deleted = statusFileTmp.delete();
+        assert deleted;
+      }
+
+      boolean created = statusFileTmp.createNewFile();
+      assert created;
+
+      FileWriter writer = new FileWriter(statusFileTmp);
+      writer.write(state.toJson());
+      writer.flush();
+      writer.close();
+
+      boolean renamed = statusFileTmp.renameTo(statusFile);
+      assert renamed;
+    };
+  }
+
+  private static ControlFileWatchdog createStopRequestFileWatchdog(final File directory,
+      final ProcessType processType, final ControlRequestHandler stopHandler) {
+    return new ControlFileWatchdog(directory, processType.getStopRequestFileName(), stopHandler,
+        false);
+  }
+
+  private static ControlFileWatchdog createStatusRequestFileWatchdog(final File directory,
+      final ProcessType processType, final ControlRequestHandler statusHandler) {
+    return new ControlFileWatchdog(directory, processType.getStatusRequestFileName(), statusHandler,
+        false);
+  }

INS26 MOV31 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 MOV43 INS83 INS42 INS44 MOV44 INS44 MOV44 MOV43 MOV43 MOV43 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 MOV8 INS42 INS44 INS44 INS44 INS44 INS44 INS8 MOV83 MOV43 INS42 INS8 INS83 MOV39 MOV42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS44 INS44 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 MOV43 INS43 INS8 UPD83 INS83 MOV43 INS42 INS44 INS83 INS83 MOV43 INS42 MOV44 INS44 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD66 INS65 INS66 INS65 INS66 UPD66 UPD42 INS83 INS43 INS42 UPD42 INS83 INS43 INS42 INS83 INS17 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS83 MOV43 INS42 INS83 MOV43 INS42 INS42 INS42 INS42 INS17 INS83 MOV43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS21 MOV21 MOV21 INS21 MOV21 INS21 INS21 INS21 INS21 INS21 MOV21 INS41 INS60 INS54 INS83 INS39 INS42 INS60 MOV54 INS83 INS43 INS42 INS60 INS54 INS41 INS83 MOV43 INS42 INS83 INS43 INS42 MOV43 INS42 UPD42 INS41 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS42 INS41 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS7 INS7 INS7 INS32 INS32 INS42 INS39 INS59 MOV8 INS8 INS39 INS59 INS8 INS8 INS42 INS39 INS59 INS8 MOV12 INS42 INS42 MOV43 MOV14 INS42 INS14 INS42 INS90 INS42 INS86 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS22 INS42 MOV22 INS42 MOV22 INS42 MOV22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS21 INS25 INS42 INS9 MOV21 INS21 INS21 INS25 INS42 INS9 MOV21 UPD42 UPD42 UPD42 INS42 MOV43 INS42 INS42 INS42 INS42 MOV8 MOV43 INS42 MOV32 INS42 INS9 MOV43 INS42 MOV32 INS42 INS9 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS52 INS42 INS7 INS7 INS32 INS42 INS8 INS7 INS7 INS32 INS42 INS8 INS21 MOV43 UPD42 INS42 INS32 INS42 INS27 INS42 INS42 INS21 INS42 INS32 INS42 INS27 INS42 INS42 INS42 MOV21 INS42 UPD42 INS7 INS43 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS42 INS9 INS42 INS60 INS6 INS60 INS6 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 UPD42 INS43 INS42 INS39 INS59 INS42 UPD42 INS39 INS59 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS42 MOV32 DEL83 DEL83 DEL42 DEL59 DEL23 DEL32 DEL21 DEL42 DEL42 DEL9 DEL14 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL9 DEL14 DEL52 DEL42 DEL22 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL14 DEL7 DEL21 DEL83 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL59 DEL60 DEL83 DEL42 DEL1 DEL14 DEL59 DEL60 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL45 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL52 DEL42 DEL22 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL83 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL83 DEL83 DEL42 DEL21 DEL83 DEL21 DEL83 DEL42 DEL78 DEL83 DEL39 DEL42