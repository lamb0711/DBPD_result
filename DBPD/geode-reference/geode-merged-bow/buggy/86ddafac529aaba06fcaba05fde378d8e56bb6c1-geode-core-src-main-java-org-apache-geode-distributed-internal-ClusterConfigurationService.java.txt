GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.RemoteInputStreamClient;
+import org.apache.commons.io.IOUtils;
-import org.apache.geode.management.internal.configuration.functions.UploadJarFunction;
+import org.apache.geode.management.internal.configuration.functions.DownloadJarFunction;
-   *
-   * @return true on success
-  public boolean addJarsToThisLocator(String[] jarNames, byte[][] jarBytes, String[] groups) {
+  public void addJarsToThisLocator(List<String> jarFullPaths, String[] groups) throws IOException {
-    boolean success = true;
-        for (int i = 0; i < jarNames.length; i++) {
-          String filePath = FilenameUtils.concat(groupDir, jarNames[i]);
-          try {
-            File jarFile = new File(filePath);
-            FileUtils.writeByteArrayToFile(jarFile, jarBytes[i]);
-          } catch (IOException e) {
-            logger.info(e);
-          }
+        Set<String> jarNames = new HashSet<>();
+        for (String jarFullPath : jarFullPaths) {
+          File stagedJar = new File(jarFullPath);
+          jarNames.add(stagedJar.getName());
+          String filePath = FilenameUtils.concat(groupDir, stagedJar.getName());
+          File jarFile = new File(filePath);
+          FileUtils.copyFile(stagedJar, jarFile);
-
-    } catch (Exception e) {
-      success = false;
-      logger.info(e.getMessage(), e);
-    return success;
-  /**
-   * read the jar bytes in the file system
-   * <p>
-   * used when creating cluster config response and used when uploading the jars to another locator
-   */
-  public byte[] getJarBytesFromThisLocator(String group, String jarName) throws IOException {
-    Configuration configuration = getConfiguration(group);
-
-    File jar = getPathToJarOnThisLocator(group, jarName).toFile();
-
-    if (configuration == null || !configuration.getJarNames().contains(jarName) || !jar.exists()) {
-      return null;
-    }
-
-    return FileUtils.readFileToByteArray(jar);
-  }
-
-    byte[] jarBytes = downloadJar(locators.get(0), groupName, jarName);
-
-    File jarToWrite = getPathToJarOnThisLocator(groupName, jarName).toFile();
-    FileUtils.writeByteArrayToFile(jarToWrite, jarBytes);
+    downloadJarFromLocator(groupName, jarName, locators.get(0));
-    byte[] jarBytes = downloadJar(sourceLocator, groupName, jarName);
-
-    if (jarBytes == null) {
-      throw new IllegalStateException("Could not download jar " + jarName + " in " + groupName
-          + " from " + sourceLocator.getName());
-    }
+    File jarFile = downloadJar(sourceLocator, groupName, jarName);
-    FileUtils.writeByteArrayToFile(jarToWrite, jarBytes);
+    Files.copy(jarFile.toPath(), jarToWrite.toPath(), StandardCopyOption.REPLACE_EXISTING);
-  private byte[] downloadJar(DistributedMember locator, String groupName, String jarName) {
-    ResultCollector<byte[], List<byte[]>> rc =
-        (ResultCollector<byte[], List<byte[]>>) CliUtil.executeFunction(new UploadJarFunction(),
-            new Object[] {groupName, jarName}, Collections.singleton(locator));
+  /**
+   * Retrieve a deployed jar from a locator. The retrieved file is staged in a temporary location.
+   *
+   * @param locator the DistributedMember
+   * @param groupName the group to use when retrieving the jar
+   * @param jarName the name of the deployed jar
+   * @return a File referencing the downloaded jar. The File is downloaded to a temporary location.
+   */
+  public File downloadJar(DistributedMember locator, String groupName, String jarName)
+      throws IOException {
+    ResultCollector<RemoteInputStream, List<RemoteInputStream>> rc =
+        (ResultCollector<RemoteInputStream, List<RemoteInputStream>>) CliUtil.executeFunction(
+            new DownloadJarFunction(), new Object[] {groupName, jarName},
+            Collections.singleton(locator));
-    List<byte[]> result = rc.getResult();
+    List<RemoteInputStream> result = rc.getResult();
+    RemoteInputStream jarStream = result.get(0);
-    // we should only get one byte[] back in the list
-    return result.get(0);
-  }
+    Set<PosixFilePermission> perms = new HashSet<>();
+    perms.add(PosixFilePermission.OWNER_READ);
+    perms.add(PosixFilePermission.OWNER_WRITE);
+    perms.add(PosixFilePermission.OWNER_EXECUTE);
+    Path tempDir =
+        Files.createTempDirectory("deploy-", PosixFilePermissions.asFileAttribute(perms));
+    Path tempJar = Paths.get(tempDir.toString(), jarName);
+    FileOutputStream fos = new FileOutputStream(tempJar.toString());
+    InputStream input = RemoteInputStreamClient.wrap(jarStream);
-  // used when creating cluster config response
-  public Map<String, byte[]> getAllJarsFromThisLocator(Set<String> groups) throws IOException {
-    Map<String, byte[]> jarNamesToJarBytes = new HashMap<>();
+    IOUtils.copy(input, fos);
-    for (String group : groups) {
-      Configuration groupConfig = getConfiguration(group);
-      if (groupConfig == null) {
-        break;
-      }
+    fos.close();
+    input.close();
-      Set<String> jars = groupConfig.getJarNames();
-      for (String jar : jars) {
-        byte[] jarBytes = getJarBytesFromThisLocator(group, jar);
-        jarNamesToJarBytes.put(jar, jarBytes);
-      }
-    }
-
-    return jarNamesToJarBytes;
+    return tempJar.toFile();
+          if (configuration != null) {
+            configResponse.addJar(group, configuration.getJarNames());
+          }
-        Map<String, byte[]> jarNamesToJarBytes = getAllJarsFromThisLocator(groups);
-        String[] jarNames = jarNamesToJarBytes.keySet().stream().toArray(String[]::new);
-        byte[][] jarBytes = jarNamesToJarBytes.values().toArray(new byte[jarNames.length][]);
-
-        configResponse.addJarsToBeDeployed(jarNames, jarBytes);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS31 UPD39 MOV43 MOV29 MOV83 INS43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS74 UPD42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 UPD42 MOV42 MOV60 MOV60 INS60 INS60 INS21 INS21 INS21 INS60 INS60 MOV60 MOV60 INS21 INS21 MOV21 MOV41 INS43 MOV43 MOV32 MOV32 MOV43 INS32 UPD66 MOV66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS66 INS66 UPD74 UPD74 INS43 INS59 INS74 MOV59 INS32 INS32 INS32 INS43 INS59 INS43 INS59 UPD43 INS43 INS32 INS32 INS32 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS40 MOV43 INS43 UPD74 MOV43 UPD43 UPD42 MOV42 INS42 MOV32 INS43 INS43 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS14 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS43 INS43 UPD74 UPD42 UPD42 MOV42 UPD42 MOV42 INS74 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS43 INS32 UPD42 UPD42 INS42 INS60 INS70 INS42 INS42 MOV43 INS43 UPD74 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV74 INS59 INS44 INS42 INS8 INS42 INS43 UPD43 INS42 UPD42 MOV42 INS14 MOV43 INS42 INS60 INS21 MOV60 MOV60 MOV21 INS42 UPD42 INS25 INS42 INS74 INS43 INS59 INS32 MOV43 INS27 INS8 INS43 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS33 INS21 INS42 INS43 INS42 INS42 INS42 INS32 MOV32 MOV32 INS42 INS42 INS42 UPD42 UPD42 INS42 DEL66 DEL65 DEL85 DEL5 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL41 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL38 DEL27 DEL32 DEL38 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL65 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL83 DEL39 DEL85 DEL5 DEL42 DEL41 DEL8 DEL31 DEL83 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL27 DEL10 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL70 DEL8 DEL70 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL89 DEL32 DEL59 DEL60 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL39 DEL85 DEL85 DEL5 DEL40 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21