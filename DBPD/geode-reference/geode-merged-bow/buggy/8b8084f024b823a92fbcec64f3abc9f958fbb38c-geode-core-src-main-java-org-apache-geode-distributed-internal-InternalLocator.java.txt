GEODE-2253 Locator may fail to respond to a valid request

This introduces a retry loop in the locator when a handler for an
incoming message can't be found.  It waits for an amount of time
for the handler to be installed, which I've set to the locator-
wait-time or 5 seconds if that property hasn't been set.

I've also changed InternalLocator to always install the handler
for cluster configuration status so that you can query any locator
to see if it has a cluster configuration service and, if so, what
state it's in.

-      slocator.handler.willHaveServerLocator = true;
+  public PrimaryHandler getPrimaryHandler() {
+    return this.handler;
+  }
+
-  private static class PrimaryHandler implements TcpHandler {
+  public static class PrimaryHandler implements TcpHandler {
-    boolean willHaveServerLocator; // flag to avoid warning about missing handlers during startup
+    // GEODE-2253 test condition
+    private boolean hasWaitedForHandlerInitialization = false;
-      TcpHandler handler = null;
-      if (request instanceof PeerLocatorRequest) {
-        handler = (TcpHandler) handlerMapping.get(PeerLocatorRequest.class);
-      } else {
-        handler = (TcpHandler) handlerMapping.get(request.getClass());
-      }
-
-      if (handler != null) {
-        Object result;
-        result = handler.processRequest(request);
-        return result;
-      } else {
-        Object response;
-        if (locatorListener != null) {
-          response = locatorListener.handleRequest(request);
+      long giveup = 0;
+      while (giveup == 0 || System.currentTimeMillis() < giveup) {
+        TcpHandler handler = null;
+        if (request instanceof PeerLocatorRequest) {
+          handler = (TcpHandler) handlerMapping.get(PeerLocatorRequest.class);
-          if (!(willHaveServerLocator && (request instanceof ServerLocationRequest))) {
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.InternalLocator_EXPECTED_ONE_OF_THESE_0_BUT_RECEIVED_1,
-                new Object[] {handlerMapping.keySet(), request}));
-          }
-          return null;
+          handler = (TcpHandler) handlerMapping.get(request.getClass());
-        return response;
-      }
+
+        if (handler != null) {
+          return handler.processRequest(request);
+        } else {
+          if (locatorListener != null) {
+            return locatorListener.handleRequest(request);
+          } else {
+            // either there is a configuration problem or the locator is still starting up
+            if (giveup == 0) {
+              int locatorWaitTime = internalLocator.getConfig().getLocatorWaitTime();
+              if (locatorWaitTime <= 0) {
+                locatorWaitTime = 30; // always retry some number of times
+              }
+              hasWaitedForHandlerInitialization = true;
+              giveup = System.currentTimeMillis() + (locatorWaitTime * 1000);
+              try {
+                Thread.sleep(1000);
+              } catch (InterruptedException e) {
+                // running in an executor - no need to set the interrupted flag on the thread
+                return null;
+              }
+            }
+          }
+        }
+      } // while
+      logger.info(
+          "Received a location request of class {} but the handler for this is "
+              + "either not enabled or is not ready to process requests",
+          request.getClass().getSimpleName());
+      return null;
+    }
+
+    /**
+     * GEODE-2253 test condition - has this handler waited for a subordinate handler to be
+     * installed?
+     */
+    public boolean hasWaitedForHandlerInitialization() {
+      return hasWaitedForHandlerInitialization;
+    installSharedConfigHandler();
-        logger.info("Cluster configuration service is only supported in dedicated locators");
+        logger.info("Cluster configuration service not enabled as it is only supported "
+            + "in dedicated locators");
-      this.isSharedConfigurationStarted = true;
-      installSharedConfigStatus();
-  public void installSharedConfigStatus() {
+  public void installSharedConfigHandler() {
+  public boolean hasHandlerForClass(Class messageClass) {
+    return (handler.isHandled(messageClass));
+  }
+

INS31 INS31 INS83 INS43 INS42 INS8 UPD83 INS31 UPD42 INS83 INS39 INS42 INS44 INS8 INS42 INS41 INS83 INS8 INS29 INS83 INS39 INS42 INS8 INS21 INS43 INS42 INS41 INS22 UPD42 INS9 INS60 INS61 INS21 INS41 INS65 INS41 INS32 INS42 INS36 INS52 INS42 INS39 INS59 INS27 MOV8 INS32 INS33 INS66 INS66 INS42 INS42 INS32 INS42 INS34 INS27 INS27 INS25 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS42 MOV27 INS8 INS8 INS45 INS45 INS32 INS42 INS42 INS42 INS41 INS25 INS42 INS42 MOV32 MOV27 MOV8 INS8 INS27 INS41 MOV25 INS45 INS45 MOV32 INS27 INS8 INS42 INS34 INS60 INS25 INS21 INS21 INS54 INS39 MOV59 INS27 INS8 INS7 INS7 INS8 INS12 UPD42 INS32 INS42 INS34 MOV21 INS42 INS9 INS42 INS27 MOV21 INS44 INS8 INS32 INS42 INS32 INS36 INS32 INS43 INS42 MOV41 INS42 INS42 UPD42 INS34 INS42 INS42 UPD27 MOV27 UPD42 MOV42 INS42 INS34 INS42 UPD42 INS34 DEL40 DEL9 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL4 DEL3 DEL32 DEL32 DEL42 DEL43 DEL60 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL36 DEL38 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL45 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL32 DEL21