Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  public void shutdownNode(final long timeout, final Set<DistributedMember> includeMembers) throws TimeoutException, InterruptedException, ExecutionException {
+
+  public void shutdownNode(final long timeout, final Set<DistributedMember> includeMembers)
+      throws TimeoutException, InterruptedException, ExecutionException {
-     
-   
+
+
-            //Expected Exception as the function is shutting down the target members and the result collector will get member departed exception
+            // Expected Exception as the function is shutting down the target members and the result
+            // collector will get member departed exception
-      logger.error("TimeoutException in shutting down members."+includeMembers);
+      logger.error("TimeoutException in shutting down members." + includeMembers);
-      logger.error("InterruptedException in shutting down members."+includeMembers);
+      logger.error("InterruptedException in shutting down members." + includeMembers);
-      logger.error("ExecutionException in shutting down members."+includeMembers);
+      logger.error("ExecutionException in shutting down members." + includeMembers);
-    } finally{
+    } finally {
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_LIFECYCLE },
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_LIFECYCLE},
-         @CliOption( key = CliStrings.INCLUDE_LOCATORS, unspecifiedDefaultValue="false", 
-         help=CliStrings.INCLUDE_LOCATORS_HELP) boolean shutdownLocators) {
-    try { 
+      @CliOption(key = CliStrings.INCLUDE_LOCATORS, unspecifiedDefaultValue = "false",
+          help = CliStrings.INCLUDE_LOCATORS_HELP) boolean shutdownLocators) {
+    try {
-      if(userSpecifiedTimeout < Integer.parseInt(DEFAULT_TIME_OUT)){
+      if (userSpecifiedTimeout < Integer.parseInt(DEFAULT_TIME_OUT)) {
-      
-      //convert to mili-seconds
-      long timeout = userSpecifiedTimeout * 1000 ;
-      
-      Cache cache = CacheFactory.getAnyInstance();      
-      int numDataNodes = CliUtil.getAllNormalMembers(cache).size();      
+      // convert to mili-seconds
+      long timeout = userSpecifiedTimeout * 1000;
+
+      Cache cache = CacheFactory.getAnyInstance();
+
+      int numDataNodes = CliUtil.getAllNormalMembers(cache).size();
-     
+
-      
-      locators.removeAll(dataNodes);    
-      
-      
-      
-      if(!shutdownLocators && numDataNodes == 0){
+
+      locators.removeAll(dataNodes);
+
+
+
+      if (!shutdownLocators && numDataNodes == 0) {
-      
+
-      String managerName = gemFireCache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
+      String managerName =
+          gemFireCache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
-      
+
-      
-      //shut down all data members excluding this manager if manager is a data node
+
+      // shut down all data members excluding this manager if manager is a data node
-      if(locators.contains(manager) && !shutdownLocators){ // This means manager is a locator and shutdownLocators is false. Hence we should not stop the manager
+      if (locators.contains(manager) && !shutdownLocators) { // This means manager is a locator and
+                                                             // shutdownLocators is false. Hence we
+                                                             // should not stop the manager
-    //@TODO. List all the nodes which could be successfully shutdown
+    // @TODO. List all the nodes which could be successfully shutdown
-   * @param timeout
-   *          user specified timeout
-   * @param nodesToBeStopped
-   *          list of nodes to be stopped
+   * @param timeout user specified timeout
+   * @param nodesToBeStopped list of nodes to be stopped
-  private long shutDownNodeWithTimeOut(long timeout, Set<DistributedMember> nodesToBeStopped) throws TimeoutException,
-      InterruptedException, ExecutionException {
-    
+  private long shutDownNodeWithTimeOut(long timeout, Set<DistributedMember> nodesToBeStopped)
+      throws TimeoutException, InterruptedException, ExecutionException {
+
-    if (timeElapsed > timeout || Boolean.getBoolean("ThrowTimeoutException")) { //The second check for ThrowTimeoutException is a test hook
+    if (timeElapsed > timeout || Boolean.getBoolean("ThrowTimeoutException")) { // The second check
+                                                                                // for
+                                                                                // ThrowTimeoutException
+                                                                                // is a test hook
-      
+
-      if(Boolean.getBoolean(CliStrings.IGNORE_INTERCEPTORS)){
-        return ResultBuilder
-            .createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
+      if (Boolean.getBoolean(CliStrings.IGNORE_INTERCEPTORS)) {
+        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
-      
-      Response response = readYesNo(CliStrings.SHUTDOWN__MSG__WARN_USER,
-          Response.YES);
+
+      Response response = readYesNo(CliStrings.SHUTDOWN__MSG__WARN_USER, Response.YES);
-        return ResultBuilder
-            .createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
+        return ResultBuilder.createInfoResult(CliStrings.SHUTDOWN__MSG__SHUTDOWN_ENTIRE_DS);
+
-    public Result postExecution(GfshParseResult parseResult,
-        Result commandResult) {
+    public Result postExecution(GfshParseResult parseResult, Result commandResult) {
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-      @CliOption(key = CliStrings.GC__GROUP, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.GC__GROUP__HELP)
-      String[] groups,
-      @CliOption(key = CliStrings.GC__MEMBER, optionContext = ConverterHint.ALL_MEMBER_IDNAME, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.GC__MEMBER__HELP)
-      String memberId) {
+      @CliOption(key = CliStrings.GC__GROUP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.GC__GROUP__HELP) String[] groups,
+      @CliOption(key = CliStrings.GC__MEMBER, optionContext = ConverterHint.ALL_MEMBER_IDNAME,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.GC__MEMBER__HELP) String memberId) {
-    CompositeResultData gcResultTable = ResultBuilder
-        .createCompositeResultData();
-    TabularResultData resultTable = gcResultTable.addSection().addTable(
-        "Table1");
+    CompositeResultData gcResultTable = ResultBuilder.createCompositeResultData();
+    TabularResultData resultTable = gcResultTable.addSection().addTable("Table1");
-      DistributedMember member = CliUtil
-          .getDistributedMemberByNameOrId(memberId);
+      DistributedMember member = CliUtil.getDistributedMemberByNameOrId(memberId);
-        return ResultBuilder.createGemFireErrorResult(memberId
-            + CliStrings.GC__MSG__MEMBER_NOT_FOUND);
+        return ResultBuilder
+            .createGemFireErrorResult(memberId + CliStrings.GC__MSG__MEMBER_NOT_FOUND);
-      result =  executeAndBuildResult(cache, resultTable, dsMembers);
+      result = executeAndBuildResult(cache, resultTable, dsMembers);
-      //exclude locators
+      // exclude locators
-      resultList = (List<?>) CliUtil.executeFunction(garbageCollectionFunction, null, dsMembers).getResult();
+      resultList =
+          (List<?>) CliUtil.executeFunction(garbageCollectionFunction, null, dsMembers).getResult();
-          LogWrapper.getInstance().fine("Exception in GC "+  ((Throwable) object).getMessage(),((Throwable) object));
-         continue;
+          LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
+              ((Throwable) object));
+          continue;
-          LogWrapper.getInstance().fine("Exception in GC "+  ((Throwable) object).getMessage(),((Throwable) object));
+          LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
+              ((Throwable) object));
-        if(object != null){
+        if (object != null) {
-            return ResultBuilder.createUserErrorResult((String)object);
+            return ResultBuilder.createUserErrorResult((String) object);
-                (String) resultMap.get("HeapSizeAfterGC"),
-                (String) resultMap.get("TimeSpentInGC"));
+                (String) resultMap.get("HeapSizeAfterGC"), (String) resultMap.get("TimeSpentInGC"));
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-  //TODO : Verify the auto-completion for multiple values.
-  public Result netstat(
-      @CliOption(key = CliStrings.NETSTAT__MEMBER,
-                mandatory = false,
-                unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                optionContext = ConverterHint.ALL_MEMBER_IDNAME,
-                help = CliStrings.NETSTAT__MEMBER__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] members,
-      @CliOption(key = CliStrings.NETSTAT__GROUP,
-                 mandatory = false,
-                 unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                 optionContext = ConverterHint.MEMBERGROUP,
-                 help = CliStrings.NETSTAT__GROUP__HELP)
-      String group,
-      @CliOption(key = CliStrings.NETSTAT__FILE,
-                 optionContext = ConverterHint.FILE,
-                 unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                 help = CliStrings.NETSTAT__FILE__HELP)
-      String saveAs,
-      @CliOption(key = CliStrings.NETSTAT__WITHLSOF,
-                specifiedDefaultValue = "true",
-                unspecifiedDefaultValue = "false",
-                help = CliStrings.NETSTAT__WITHLSOF__HELP)
-      boolean withlsof) {
+  // TODO : Verify the auto-completion for multiple values.
+  public Result netstat(@CliOption(key = CliStrings.NETSTAT__MEMBER, mandatory = false,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      optionContext = ConverterHint.ALL_MEMBER_IDNAME,
+      help = CliStrings.NETSTAT__MEMBER__HELP) @CliMetaData(valueSeparator = ",") String[] members,
+      @CliOption(key = CliStrings.NETSTAT__GROUP, mandatory = false,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.NETSTAT__GROUP__HELP) String group,
+      @CliOption(key = CliStrings.NETSTAT__FILE, optionContext = ConverterHint.FILE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.NETSTAT__FILE__HELP) String saveAs,
+      @CliOption(key = CliStrings.NETSTAT__WITHLSOF, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.NETSTAT__WITHLSOF__HELP) boolean withlsof) {
-    Map<String, DistributedMember> hostMemberMap     = new HashMap<String, DistributedMember>();
-    Map<String, List<String>>      hostMemberListMap = new HashMap<String, List<String>>();
+    Map<String, DistributedMember> hostMemberMap = new HashMap<String, DistributedMember>();
+    Map<String, List<String>> hostMemberListMap = new HashMap<String, List<String>>();
-        throw new IllegalArgumentException(CliStrings.NETSTAT__MSG__ONLY_ONE_OF_MEMBER_OR_GROUP_SHOULD_BE_SPECIFIED);
+        throw new IllegalArgumentException(
+            CliStrings.NETSTAT__MSG__ONLY_ONE_OF_MEMBER_OR_GROUP_SHOULD_BE_SPECIFIED);
-          throw new IllegalArgumentException(CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_FIND_MEMBERS_0, new Object[] { CliUtil.collectionToString(notFoundMembers, -1) }));
+          throw new IllegalArgumentException(
+              CliStrings.format(CliStrings.NETSTAT__MSG__COULD_NOT_FIND_MEMBERS_0,
+                  new Object[] {CliUtil.collectionToString(notFoundMembers, -1)}));
-          String memberId   = distributedMember.getId();
-          String memberIdOrName = memberName != null && !memberName.isEmpty() ? memberName : memberId;
+          String memberId = distributedMember.getId();
+          String memberIdOrName =
+              memberName != null && !memberName.isEmpty() ? memberName : memberId;
-        Set<DistributedMember> membersToExecuteOn = new HashSet<DistributedMember>(hostMemberMap.values());
-        ResultCollector<?, ?> netstatResult = CliUtil.executeFunction(NetstatFunction.INSTANCE, nfa, membersToExecuteOn);
+        Set<DistributedMember> membersToExecuteOn =
+            new HashSet<DistributedMember>(hostMemberMap.values());
+        ResultCollector<?, ?> netstatResult =
+            CliUtil.executeFunction(NetstatFunction.INSTANCE, nfa, membersToExecuteOn);
-            resultInfo.append(MessageFormat.format(netstatFunctionResult.getHeaderInfo(), CliUtil.collectionToString(membersList, 120)));
-            DeflaterInflaterData uncompressedBytes = CliUtil.uncompressBytes(deflaterInflaterData.getData(), deflaterInflaterData.getDataLength());
+            resultInfo.append(MessageFormat.format(netstatFunctionResult.getHeaderInfo(),
+                CliUtil.collectionToString(membersList, 120)));
+            DeflaterInflaterData uncompressedBytes = CliUtil.uncompressBytes(
+                deflaterInflaterData.getData(), deflaterInflaterData.getDataLength());
-            resultInfo.append("Error in some data. Reason : "+e.getMessage());
+            resultInfo.append("Error in some data. Reason : " + e.getMessage());
-        resultData.addAsFile(saveToFile, resultInfo.toString(), CliStrings.NETSTAT__MSG__SAVED_OUTPUT_IN_0, false); // Note: substitution for {0} will happen on client side.
+        resultData.addAsFile(saveToFile, resultInfo.toString(),
+            CliStrings.NETSTAT__MSG__SAVED_OUTPUT_IN_0, false); // Note: substitution for {0} will
+                                                                // happen on client side.
-      LogWrapper.getInstance().info(CliStrings.format(CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0, new Object[] {Arrays.toString(members)}));
+      LogWrapper.getInstance()
+          .info(CliStrings.format(
+              CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
+              new Object[] {Arrays.toString(members)}));
-      LogWrapper.getInstance().info(CliStrings.format(CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0, new Object[] {Arrays.toString(members)}), e);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0, new Object[] {Arrays.toString(members)}));
+      LogWrapper.getInstance()
+          .info(CliStrings.format(
+              CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
+              new Object[] {Arrays.toString(members)}), e);
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
+              new Object[] {Arrays.toString(members)}));
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-  public Result showDeadlock(
-      @CliOption(key = CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE,
+  public Result showDeadlock(@CliOption(key = CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE,
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".txt"));
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".txt"));
-          MessageFormat.format(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__REVIEW,filename), false);
+          MessageFormat.format(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__REVIEW, filename), false);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.SHOW_DEADLOCK__ERROR + " : " + e.getMessage());
+      result = ResultBuilder
+          .createGemFireErrorResult(CliStrings.SHOW_DEADLOCK__ERROR + " : " + e.getMessage());
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-      @CliOption(key = CliStrings.SHOW_LOG_MEMBER, optionContext = ConverterHint.ALL_MEMBER_IDNAME, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.SHOW_LOG_MEMBER_HELP, mandatory = true) String memberNameOrId,
-      @CliOption(key = CliStrings.SHOW_LOG_LINE_NUM, unspecifiedDefaultValue = "0", help = CliStrings.SHOW_LOG_LINE_NUM_HELP, mandatory = false) int numberOfLines) {
+      @CliOption(key = CliStrings.SHOW_LOG_MEMBER, optionContext = ConverterHint.ALL_MEMBER_IDNAME,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.SHOW_LOG_MEMBER_HELP, mandatory = true) String memberNameOrId,
+      @CliOption(key = CliStrings.SHOW_LOG_LINE_NUM, unspecifiedDefaultValue = "0",
+          help = CliStrings.SHOW_LOG_LINE_NUM_HELP, mandatory = false) int numberOfLines) {
-      SystemManagementService service = (SystemManagementService)ManagementService
-          .getExistingManagementService(cache);
+      SystemManagementService service =
+          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      DistributedMember memberToBeInvoked = CliUtil
-          .getDistributedMemberByNameOrId(memberNameOrId);
+      DistributedMember memberToBeInvoked = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(
-            memberId)) {
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(memberId)) {
-          ErrorResultData errorResultData = ResultBuilder
-              .createErrorResultData().setErrorCode(
-                  ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                  memberNameOrId + CliStrings.SHOW_LOG_MSG_MEMBER_NOT_FOUND);
+          ErrorResultData errorResultData =
+              ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                  .addLine(memberNameOrId + CliStrings.SHOW_LOG_MSG_MEMBER_NOT_FOUND);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(
-                memberNameOrId + CliStrings.SHOW_LOG_MSG_MEMBER_NOT_FOUND);
+        ErrorResultData errorResultData =
+            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
+                .addLine(memberNameOrId + CliStrings.SHOW_LOG_MSG_MEMBER_NOT_FOUND);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.SHOW_LOG_ERROR
-          + CliUtil.stackTraceAsString(e));
+      result = ResultBuilder
+          .createGemFireErrorResult(CliStrings.SHOW_LOG_ERROR + CliUtil.stackTraceAsString(e));
-  Result exportLogsPreprocessing(String dirName, String[] groups,
-      String memberId, String logLevel, boolean onlyLogLevel, boolean mergeLog,
-      String start, String end, int numOfLogFilesForTesting) {
+  Result exportLogsPreprocessing(String dirName, String[] groups, String memberId, String logLevel,
+      boolean onlyLogLevel, boolean mergeLog, String start, String end,
+      int numOfLogFilesForTesting) {
-          result = ResultBuilder
-              .createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__INVALID_TIMERANGE);
+          result =
+              ResultBuilder.createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__INVALID_TIMERANGE);
-          "Exporting logs startTime=" + startTime.toGMTString() + " "
-              + startTime.toLocaleString());
-      LogWrapper.getInstance().fine(
-          "Exporting logs endTime=" + endTime.toGMTString() + " "
-              + endTime.toLocaleString());
+          "Exporting logs startTime=" + startTime.toGMTString() + " " + startTime.toLocaleString());
+      LogWrapper.getInstance()
+          .fine("Exporting logs endTime=" + endTime.toGMTString() + " " + endTime.toLocaleString());
-        result = ResultBuilder
-            .createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__SPECIFY_ONE_OF_OPTION);
+        result =
+            ResultBuilder.createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__SPECIFY_ONE_OF_OPTION);
-          Set<DistributedMember> groupMembers = cache.getDistributedSystem()
-              .getGroupMembers(group);
+          Set<DistributedMember> groupMembers = cache.getDistributedSystem().getGroupMembers(group);
-        result = export(cache, dsMembers, dirName, logLevel,
-            onlyLogLevel ? "true" : "false", mergeLog, startTime, endTime, numOfLogFilesForTesting);
+        result = export(cache, dsMembers, dirName, logLevel, onlyLogLevel ? "true" : "false",
+            mergeLog, startTime, endTime, numOfLogFilesForTesting);
-        DistributedMember member = CliUtil
-            .getDistributedMemberByNameOrId(memberId);
+        DistributedMember member = CliUtil.getDistributedMemberByNameOrId(memberId);
-          result = ResultBuilder.createUserErrorResult(CliStrings.format(
-              CliStrings.EXPORT_LOGS__MSG__INVALID_MEMBERID, memberId));
+          result = ResultBuilder.createUserErrorResult(
+              CliStrings.format(CliStrings.EXPORT_LOGS__MSG__INVALID_MEMBERID, memberId));
-        result = export(cache, dsMembers, dirName, logLevel,
-            onlyLogLevel ? "true" : "false", mergeLog, startTime, endTime, numOfLogFilesForTesting);
+        result = export(cache, dsMembers, dirName, logLevel, onlyLogLevel ? "true" : "false",
+            mergeLog, startTime, endTime, numOfLogFilesForTesting);
-        result = export(cache, dsMembers, dirName, logLevel,
-            onlyLogLevel ? "true" : "false", mergeLog, startTime, endTime, numOfLogFilesForTesting);
+        result = export(cache, dsMembers, dirName, logLevel, onlyLogLevel ? "true" : "false",
+            mergeLog, startTime, endTime, numOfLogFilesForTesting);
+
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_SERVER, CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_SERVER, CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-      @CliOption(key = CliStrings.EXPORT_LOGS__DIR,
-          help = CliStrings.EXPORT_LOGS__DIR__HELP, mandatory=true) String dirName,
+      @CliOption(key = CliStrings.EXPORT_LOGS__DIR, help = CliStrings.EXPORT_LOGS__DIR__HELP,
+          mandatory = true) String dirName,
-      @CliOption(key = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL,
-          unspecifiedDefaultValue = "false", help = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL__HELP) boolean onlyLogLevel,
-      @CliOption(key = CliStrings.EXPORT_LOGS__MERGELOG,
-          unspecifiedDefaultValue = "false", help = CliStrings.EXPORT_LOGS__MERGELOG__HELP) boolean mergeLog,
+      @CliOption(key = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL, unspecifiedDefaultValue = "false",
+          help = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL__HELP) boolean onlyLogLevel,
+      @CliOption(key = CliStrings.EXPORT_LOGS__MERGELOG, unspecifiedDefaultValue = "false",
+          help = CliStrings.EXPORT_LOGS__MERGELOG__HELP) boolean mergeLog,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.EXPORT_LOGS__STARTTIME__HELP) String start,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.EXPORT_LOGS__STARTTIME__HELP) String start,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.EXPORT_LOGS__ENDTIME__HELP) String end) {
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.EXPORT_LOGS__ENDTIME__HELP) String end) {
-      result =  exportLogsPreprocessing(  dirName,   groups,   memberId, logLevel,  onlyLogLevel, mergeLog, start,  end, 0 );
+      result = exportLogsPreprocessing(dirName, groups, memberId, logLevel, onlyLogLevel, mergeLog,
+          start, end, 0);
-      result= ResultBuilder.createUserErrorResult(ex.getMessage()) ;
+      result = ResultBuilder.createUserErrorResult(ex.getMessage());
-    LogWrapper.getInstance().fine("Exporting logs returning =" + result );
+    LogWrapper.getInstance().fine("Exporting logs returning =" + result);
-  Time parseDate(String dateString) throws ParseException{
+  Time parseDate(String dateString) throws ParseException {
-    try{
+    try {
-    }catch(Exception e){
+    } catch (Exception e) {
-  Result export(Cache cache, Set<DistributedMember> dsMembers, String dirName,
-      String logLevel, String onlyLogLevel, boolean mergeLog, Time startTime, Time endTime, int numOfLogFilesForTesting) {
-    LogWrapper.getInstance().fine("Exporting logs in export membersize = " + dsMembers.size() + " dirname="+dirName + " logLevel="+logLevel
-        +" onlyLogLevel="+onlyLogLevel + " mergeLog="+mergeLog +" startTime="+startTime.toGMTString() + "endTime="+endTime.toGMTString());
+  Result export(Cache cache, Set<DistributedMember> dsMembers, String dirName, String logLevel,
+      String onlyLogLevel, boolean mergeLog, Time startTime, Time endTime,
+      int numOfLogFilesForTesting) {
+    LogWrapper.getInstance()
+        .fine("Exporting logs in export membersize = " + dsMembers.size() + " dirname=" + dirName
+            + " logLevel=" + logLevel + " onlyLogLevel=" + onlyLogLevel + " mergeLog=" + mergeLog
+            + " startTime=" + startTime.toGMTString() + "endTime=" + endTime.toGMTString());
-        LogWrapper.getInstance().fine("Exporting logs copy the logs for member="+member.getId());
-        try{
-        resultList = (ArrayList<?>) CliUtil.executeFunction(function, args,
-            member).getResult();
-        }catch(Exception ex){
-          LogWrapper.getInstance().fine(CliStrings.format(CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
-              member.getId()),ex);
-          //try for other members
+        LogWrapper.getInstance().fine("Exporting logs copy the logs for member=" + member.getId());
+        try {
+          resultList = (ArrayList<?>) CliUtil.executeFunction(function, args, member).getResult();
+        } catch (Exception ex) {
+          LogWrapper.getInstance()
+              .fine(CliStrings.format(
+                  CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
+                  member.getId()), ex);
+          // try for other members
-              ResultBuilder
-                  .createGemFireErrorResult(CliStrings
-                      .format(
-                          CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
-                          member.getId()));
-              LogWrapper.getInstance().fine("Exporting logs for member="+member.getId() + " exception="+ ((Throwable) object).getMessage(),((Throwable) object));
+              ResultBuilder.createGemFireErrorResult(CliStrings.format(
+                  CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
+                  member.getId()));
+              LogWrapper.getInstance().fine("Exporting logs for member=" + member.getId()
+                  + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
-              ResultBuilder
-                  .createGemFireErrorResult(CliStrings
-                      .format(
-                          CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
-                          member.getId()));
+              ResultBuilder.createGemFireErrorResult(CliStrings.format(
+                  CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
+                  member.getId()));
-              LogWrapper.getInstance().fine("Exporting logs for member="+member.getId() + " exception="+ ((Throwable) object).getMessage(),((Throwable) object) );
+              LogWrapper.getInstance().fine("Exporting logs for member=" + member.getId()
+                  + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
-        }else{
-          LogWrapper.getInstance().fine("Exporting logs for member="+member.getId() +" resultList is either null or empty") ;
+        } else {
+          LogWrapper.getInstance().fine("Exporting logs for member=" + member.getId()
+              + " resultList is either null or empty");
-        if(toContinueForRestOfmembers == true){
-          LogWrapper.getInstance().fine("Exporting logs for member="+member.getId() + " toContinueForRestOfmembers="+ toContinueForRestOfmembers);
-          //proceed for rest of the member
+        if (toContinueForRestOfmembers == true) {
+          LogWrapper.getInstance().fine("Exporting logs for member=" + member.getId()
+              + " toContinueForRestOfmembers=" + toContinueForRestOfmembers);
+          // proceed for rest of the member
-        LogWrapper.getInstance().fine("for member="+member.getId()+"Successfully exported to directory="+dirName+ " rstList="+rstList);
-        if (rstList== null || rstList.length() == 0) {
-          ResultBuilder.createGemFireErrorResult(CliStrings.format
-              (CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
+        LogWrapper.getInstance().fine("for member=" + member.getId()
+            + "Successfully exported to directory=" + dirName + " rstList=" + rstList);
+        if (rstList == null || rstList.length() == 0) {
+          ResultBuilder.createGemFireErrorResult(CliStrings.format(
+              CliStrings.EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0,
-          LogWrapper.getInstance().fine("for member="+member.getId()+"rstList is null");
+          LogWrapper.getInstance().fine("for member=" + member.getId() + "rstList is null");
-          LogWrapper.getInstance().fine("for member="+member.getId()+" does not exist or cannot be created");
-          return ResultBuilder.createInfoResult(CliStrings.format(
-              CliStrings.EXPORT_LOGS__MSG__TARGET_DIR_CANNOT_BE_CREATED,
-              dirName));
-        } else if (rstList
-            .contains(LocalizedStrings.InternalDistributedSystem_THIS_CONNECTION_TO_A_DISTRIBUTED_SYSTEM_HAS_BEEN_DISCONNECTED
+          LogWrapper.getInstance()
+              .fine("for member=" + member.getId() + " does not exist or cannot be created");
+          return ResultBuilder.createInfoResult(CliStrings
+              .format(CliStrings.EXPORT_LOGS__MSG__TARGET_DIR_CANNOT_BE_CREATED, dirName));
+        } else if (rstList.contains(
+            LocalizedStrings.InternalDistributedSystem_THIS_CONNECTION_TO_A_DISTRIBUTED_SYSTEM_HAS_BEEN_DISCONNECTED
-          LogWrapper.getInstance().fine("for member="+member.getId()+LocalizedStrings.InternalDistributedSystem_THIS_CONNECTION_TO_A_DISTRIBUTED_SYSTEM_HAS_BEEN_DISCONNECTED
-              .toLocalizedString());
-          //proceed for rest of the members
+          LogWrapper.getInstance()
+              .fine("for member=" + member.getId()
+                  + LocalizedStrings.InternalDistributedSystem_THIS_CONNECTION_TO_A_DISTRIBUTED_SYSTEM_HAS_BEEN_DISCONNECTED
+                      .toLocalizedString());
+          // proceed for rest of the members
-        //maintain list of log files to merge only when merge option is true.
-        if (mergeLog == true){
+        // maintain list of log files to merge only when merge option is true.
+        if (mergeLog == true) {
-      //merge log files
-      if (mergeLog == true){
-        LogWrapper.getInstance().fine("Successfully exported to directory="+dirName+ " and now merging logsToMerge="+logsToMerge.size());
+      // merge log files
+      if (mergeLog == true) {
+        LogWrapper.getInstance().fine("Successfully exported to directory=" + dirName
+            + " and now merging logsToMerge=" + logsToMerge.size());
-        return ResultBuilder.createInfoResult("Successfully exported and merged in directory "+dirName);
+        return ResultBuilder
+            .createInfoResult("Successfully exported and merged in directory " + dirName);
-      LogWrapper.getInstance().fine("Successfully exported to directory without merging"+dirName);
-      return ResultBuilder.createInfoResult("Successfully exported to directory "+dirName);
+      LogWrapper.getInstance().fine("Successfully exported to directory without merging" + dirName);
+      return ResultBuilder.createInfoResult("Successfully exported to directory " + dirName);
-      LogWrapper.getInstance().info(ex.getMessage(),ex);
-      return ResultBuilder.createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + ((LogFileFunction)function).getId() ) ;
+      LogWrapper.getInstance().info(ex.getMessage(), ex);
+      return ResultBuilder.createUserErrorResult(
+          CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + ((LogFileFunction) function).getId());
-    //create a new process for merging
+    // create a new process for merging
-    if (logsToMerge.size() > 1){
+    if (logsToMerge.size() > 1) {
-      commandList.add(System.getProperty("java.home") + File.separatorChar
-          + "bin" + File.separatorChar + "java");
+      commandList.add(System.getProperty("java.home") + File.separatorChar + "bin"
+          + File.separatorChar + "java");
-      commandList.add(logsToMerge.get(0).substring(0,logsToMerge.get(0).lastIndexOf(File.separator) + 1));
+      commandList
+          .add(logsToMerge.get(0).substring(0, logsToMerge.get(0).lastIndexOf(File.separator) + 1));
-        Process mergeProcess = procBuilder.redirectErrorStream(true)
-            .start();
+        Process mergeProcess = procBuilder.redirectErrorStream(true).start();
-        BufferedReader br = new BufferedReader(new InputStreamReader(
-            inputStream));
+        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
-        return ResultBuilder.createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + "Could not merge" ) ;
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + "Could not merge");
-          LogWrapper.getInstance().fine("Exporting logs after merging logs "+output);
+          LogWrapper.getInstance().fine("Exporting logs after merging logs " + output);
-      if (output.toString().contains("Sucessfully merged logs")){
+      if (output.toString().contains("Sucessfully merged logs")) {
-      }else{
+      } else {
-        return ResultBuilder.createUserErrorResult(CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + "Could not merge") ;
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.EXPORT_LOGS__MSG__FUNCTION_EXCEPTION + "Could not merge");
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_DEBUG_UTIL })
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-  public Result exportStackTrace(
-      @CliOption(key = CliStrings.EXPORT_STACKTRACE__MEMBER,
+  public Result exportStackTrace(@CliOption(key = CliStrings.EXPORT_STACKTRACE__MEMBER,
-      optionContext = ConverterHint.ALL_MEMBER_IDNAME,
-      help=CliStrings.EXPORT_STACKTRACE__GROUP) String group,
+          optionContext = ConverterHint.ALL_MEMBER_IDNAME,
+          help = CliStrings.EXPORT_STACKTRACE__GROUP) String group,
-      @CliOption(key = CliStrings.EXPORT_STACKTRACE__FILE,
-      mandatory = true,
-      help = CliStrings.EXPORT_STACKTRACE__FILE__HELP) String fileName) {
+      @CliOption(key = CliStrings.EXPORT_STACKTRACE__FILE, mandatory = true,
+          help = CliStrings.EXPORT_STACKTRACE__FILE__HELP) String fileName) {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".txt"));
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".txt"));
-      if ((group == null || group.isEmpty()) && (memberNameOrId == null || memberNameOrId.isEmpty())) {
+      if ((group == null || group.isEmpty())
+          && (memberNameOrId == null || memberNameOrId.isEmpty())) {
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(getStackTracesFunction, null, targetMembers);
+      ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(getStackTracesFunction, null, targetMembers);
-    }
-    catch (Exception ex) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.EXPORT_STACKTRACE__ERROR + ex.getMessage());
+    } catch (Exception ex) {
+      result = ResultBuilder
+          .createGemFireErrorResult(CliStrings.EXPORT_STACKTRACE__ERROR + ex.getMessage());
+   * 
-      for (Map.Entry<String, byte[]> entry: dumps.entrySet()) {
-        ps.append("*** Stack-trace for member " + entry.getKey() +" ***");
+      for (Map.Entry<String, byte[]> entry : dumps.entrySet()) {
+        ps.append("*** Stack-trace for member " + entry.getKey() + " ***");
-    }  finally {
+    } finally {
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_STATISTICS })
-  @ResourceOperation(resource = Resource.CLUSTER, operation= Operation.READ)
+  @CliMetaData(shellOnly = false, relatedTopic = {CliStrings.TOPIC_GEODE_STATISTICS})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
-      @CliOption(key = { CliStrings.SHOW_METRICS__MEMBER }, optionContext = ConverterHint.ALL_MEMBER_IDNAME, help = CliStrings.SHOW_METRICS__MEMBER__HELP) String memberNameOrId,
-      @CliOption(key = { CliStrings.SHOW_METRICS__REGION }, optionContext = ConverterHint.REGIONPATH, help = CliStrings.SHOW_METRICS__REGION__HELP) String regionName,
-      @CliOption(key = { CliStrings.SHOW_METRICS__FILE}, help = CliStrings.SHOW_METRICS__FILE__HELP) String export_to_report_to,
-      @CliOption(key = { CliStrings.SHOW_METRICS__CACHESERVER__PORT}, help = CliStrings.SHOW_METRICS__CACHESERVER__PORT__HELP) String cacheServerPortString,
-      @CliOption(key = { CliStrings.SHOW_METRICS__CATEGORY} , help = CliStrings.SHOW_METRICS__CATEGORY__HELP) @CliMetaData (valueSeparator = ",") String[] categories ) {
+      @CliOption(key = {CliStrings.SHOW_METRICS__MEMBER},
+          optionContext = ConverterHint.ALL_MEMBER_IDNAME,
+          help = CliStrings.SHOW_METRICS__MEMBER__HELP) String memberNameOrId,
+      @CliOption(key = {CliStrings.SHOW_METRICS__REGION}, optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.SHOW_METRICS__REGION__HELP) String regionName,
+      @CliOption(key = {CliStrings.SHOW_METRICS__FILE},
+          help = CliStrings.SHOW_METRICS__FILE__HELP) String export_to_report_to,
+      @CliOption(key = {CliStrings.SHOW_METRICS__CACHESERVER__PORT},
+          help = CliStrings.SHOW_METRICS__CACHESERVER__PORT__HELP) String cacheServerPortString,
+      @CliOption(key = {CliStrings.SHOW_METRICS__CATEGORY},
+          help = CliStrings.SHOW_METRICS__CATEGORY__HELP) @CliMetaData(
+              valueSeparator = ",") String[] categories) {
-          return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".csv"));
+          return ResultBuilder
+              .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".csv"));
-          return ResultBuilder.createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
+          return ResultBuilder
+              .createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
-        //MBean names contain the forward slash
+        // MBean names contain the forward slash
-          result = ResultBuilder.buildResult(getDistributedRegionMetrics(regionName, export_to_report_to, categories));
+          result = ResultBuilder.buildResult(
+              getDistributedRegionMetrics(regionName, export_to_report_to, categories));
-            result = ResultBuilder.buildResult(getRegionMetricsFromMember(regionName, member, export_to_report_to, categories));
+            result = ResultBuilder.buildResult(
+                getRegionMetricsFromMember(regionName, member, export_to_report_to, categories));
-            erd.addLine(CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberNameOrId));
+            erd.addLine(
+                CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberNameOrId));
-          result = ResultBuilder.buildResult(getMemberMetrics(member, export_to_report_to, categories, cacheServerPort));
+          result = ResultBuilder.buildResult(
+              getMemberMetrics(member, export_to_report_to, categories, cacheServerPort));
-          return ResultBuilder.createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
+          return ResultBuilder
+              .createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
-   * @return ResultData with required System wide statistics or ErrorResultData
-   *         if DS MBean is not found to gather metrics
+   * @return ResultData with required System wide statistics or ErrorResultData if DS MBean is not
+   *         found to gather metrics
-  private ResultData getSystemWideMetrics(String export_to_report_to, String[] categoriesArr) throws Exception {
+  private ResultData getSystemWideMetrics(String export_to_report_to, String[] categoriesArr)
+      throws Exception {
-      SectionResultData section =  crd.addSection();
+      SectionResultData section = crd.addSection();
-        //Checking if the categories specified by the user are valid or not
+        // Checking if the categories specified by the user are valid or not
-        writeToTableAndCsv(metricsTable, "cluster", "totalHeapSize", dsMxBean.getTotalHeapSize(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "cluster", "totalHeapSize", dsMxBean.getTotalHeapSize(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "cache", "totalRegionEntryCount", dsMxBean.getTotalRegionEntryCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalRegionCount", dsMxBean.getTotalRegionCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalMissCount", dsMxBean.getTotalMissCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalHitCount", dsMxBean.getTotalHitCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "cache", "totalRegionEntryCount",
+            dsMxBean.getTotalRegionEntryCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalRegionCount", dsMxBean.getTotalRegionCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalMissCount", dsMxBean.getTotalMissCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalHitCount", dsMxBean.getTotalHitCount(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "diskstore", "totalDiskUsage", dsMxBean.getTotalDiskUsage(), csvBuilder); // deadcoded to workaround bug 46397
-        writeToTableAndCsv(metricsTable, ""/*46608*/, "diskReadsRate", dsMxBean.getDiskReadsRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskWritesRate", dsMxBean.getDiskWritesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "flushTimeAvgLatency", dsMxBean.getDiskFlushAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalBackupInProgress", dsMxBean.getTotalBackupInProgress(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "diskstore", "totalDiskUsage",
+            dsMxBean.getTotalDiskUsage(), csvBuilder); // deadcoded to workaround bug 46397
+        writeToTableAndCsv(metricsTable, ""/* 46608 */, "diskReadsRate",
+            dsMxBean.getDiskReadsRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskWritesRate", dsMxBean.getDiskWritesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "flushTimeAvgLatency",
+            dsMxBean.getDiskFlushAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalBackupInProgress",
+            dsMxBean.getTotalBackupInProgress(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "query", "activeCQCount", dsMxBean.getActiveCQCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "queryRequestRate", dsMxBean.getQueryRequestRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "query", "activeCQCount", dsMxBean.getActiveCQCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "queryRequestRate", dsMxBean.getQueryRequestRate(),
+            csvBuilder);
-        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Cluster wide metrics exported to {0}.", false);
+        crd.addAsFile(export_to_report_to, csvBuilder.toString(),
+            "Cluster wide metrics exported to {0}.", false);
-      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Distributed System MBean not found");
+      String errorMessage =
+          CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Distributed System MBean not found");
-   * @return ResultData with required Member statistics or ErrorResultData if
-   *         MemberMbean is not found to gather metrics
-   * @throws ResultDataException
-   *           if building result fails
+   * @return ResultData with required Member statistics or ErrorResultData if MemberMbean is not
+   *         found to gather metrics
+   * @throws ResultDataException if building result fails
-  private ResultData getMemberMetrics(DistributedMember distributedMember, String export_to_report_to, String [] categoriesArr, int cacheServerPort) throws ResultDataException {
+  private ResultData getMemberMetrics(DistributedMember distributedMember,
+      String export_to_report_to, String[] categoriesArr, int cacheServerPort)
+      throws ResultDataException {
-    final SystemManagementService managementService = (SystemManagementService)ManagementService.getManagementService(cache);
+    final SystemManagementService managementService =
+        (SystemManagementService) ManagementService.getManagementService(cache);
-    MemberMXBean memberMxBean = managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);
+    MemberMXBean memberMxBean =
+        managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);
-         csMxBeanName = managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);
-         csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);
+        csMxBeanName =
+            managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);
+        csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);
-          erd.addLine(CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND, cacheServerPort, MBeanJMXAdapter.getMemberNameOrId(distributedMember)));
+          erd.addLine(CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND,
+              cacheServerPort, MBeanJMXAdapter.getMemberNameOrId(distributedMember)));
-        //Checking if the categories specified by the user are valid or not
+        // Checking if the categories specified by the user are valid or not
-            for (String category : checkSet) {
-              categoriesMap.put(category, false);
-            }
-            for (String category : categories) {
-              categoriesMap.put(category.toLowerCase(), true);
-            }
-          } else {
+          for (String category : checkSet) {
+            categoriesMap.put(category, false);
+          }
+          for (String category : categories) {
+            categoriesMap.put(category.toLowerCase(), true);
+          }
+        } else {
-      //member, jvm, region, serialization, communication, function, transaction, diskstore, lock, eviction, distribution
+      // member, jvm, region, serialization, communication, function, transaction, diskstore, lock,
+      // eviction, distribution
-        writeToTableAndCsv(metricsTable, "member", "upTime", memberMxBean.getMemberUpTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "member", "upTime", memberMxBean.getMemberUpTime(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "currentHeapSize", memberMxBean.getCurrentHeapSize(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "maximumHeapSize", memberMxBean.getMaximumHeapSize(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "currentHeapSize", memberMxBean.getCurrentHeapSize(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "maximumHeapSize", memberMxBean.getMaximumHeapSize(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "jvm ", "jvmThreads ", jvmMetrics.getTotalThreads(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "fileDescriptorLimit", memberMxBean.getFileDescriptorLimit(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalFileDescriptorOpen", memberMxBean.getTotalFileDescriptorOpen(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "jvm ", "jvmThreads ", jvmMetrics.getTotalThreads(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "fileDescriptorLimit",
+            memberMxBean.getFileDescriptorLimit(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalFileDescriptorOpen",
+            memberMxBean.getTotalFileDescriptorOpen(), csvBuilder);
-      Member wide region metrics
+       * Member wide region metrics
-        writeToTableAndCsv(metricsTable, "region ", "totalRegionCount ", memberMxBean.getTotalRegionCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "region ", "totalRegionCount ",
+            memberMxBean.getTotalRegionCount(), csvBuilder);
-          for (int i=0 ; i < regionNames.length; i++) {
+          for (int i = 0; i < regionNames.length; i++) {
-              writeToTableAndCsv(metricsTable, "", "listOfRegions", regionNames[i].substring(1), csvBuilder);
+              writeToTableAndCsv(metricsTable, "", "listOfRegions", regionNames[i].substring(1),
+                  csvBuilder);
-          for (int i=0 ; i < rootRegionNames.length; i++) {
+          for (int i = 0; i < rootRegionNames.length; i++) {
-        writeToTableAndCsv(metricsTable, "", "totalRegionEntryCount", memberMxBean.getTotalRegionEntryCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalBucketCount", memberMxBean.getTotalBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalPrimaryBucketCount", memberMxBean.getTotalPrimaryBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "getsAvgLatency", memberMxBean.getGetsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putsAvgLatency", memberMxBean.getPutsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "createsRate", memberMxBean.getCreatesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "destroyRate", memberMxBean.getDestroysRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putAllAvgLatency", memberMxBean.getPutAllAvgLatency(), csvBuilder);
-        //Not available from stats. After Stats re-org it will be avaialble
-       // writeToTableAndCsv(metricsTable, "", "getAllAvgLatency", memberMxBean.getGetAllAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalMissCount", memberMxBean.getTotalMissCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalHitCount", memberMxBean.getTotalHitCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalRegionEntryCount",
+            memberMxBean.getTotalRegionEntryCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalBucketCount", memberMxBean.getTotalBucketCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalPrimaryBucketCount",
+            memberMxBean.getTotalPrimaryBucketCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "getsAvgLatency", memberMxBean.getGetsAvgLatency(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putsAvgLatency", memberMxBean.getPutsAvgLatency(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "createsRate", memberMxBean.getCreatesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "destroyRate", memberMxBean.getDestroysRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putAllAvgLatency", memberMxBean.getPutAllAvgLatency(),
+            csvBuilder);
+        // Not available from stats. After Stats re-org it will be avaialble
+        // writeToTableAndCsv(metricsTable, "", "getAllAvgLatency",
+        // memberMxBean.getGetAllAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalMissCount", memberMxBean.getTotalMissCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalHitCount", memberMxBean.getTotalHitCount(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "cacheWriterCallsAvgLatency", memberMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency", memberMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalLoadsCompleted", memberMxBean.getTotalLoadsCompleted(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "cacheWriterCallsAvgLatency",
+            memberMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency",
+            memberMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalLoadsCompleted",
+            memberMxBean.getTotalLoadsCompleted(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "serialization", "serializationRate", memberMxBean.getSerializationRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "serializationLatency", memberMxBean.getSerializationRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "deserializationRate", memberMxBean.getDeserializationRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "deserializationLatency", memberMxBean.getDeserializationLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "deserializationAvgLatency", memberMxBean.getDeserializationAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "PDXDeserializationAvgLatency", memberMxBean.getPDXDeserializationAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "PDXDeserializationRate", memberMxBean.getPDXDeserializationRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "serialization", "serializationRate",
+            memberMxBean.getSerializationRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "serializationLatency",
+            memberMxBean.getSerializationRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "deserializationRate",
+            memberMxBean.getDeserializationRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "deserializationLatency",
+            memberMxBean.getDeserializationLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "deserializationAvgLatency",
+            memberMxBean.getDeserializationAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "PDXDeserializationAvgLatency",
+            memberMxBean.getPDXDeserializationAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "PDXDeserializationRate",
+            memberMxBean.getPDXDeserializationRate(), csvBuilder);
-      /*** Communication Metrics
+      /***
+       * Communication Metrics
-        writeToTableAndCsv(metricsTable, "communication", "bytesSentRate", memberMxBean.getBytesSentRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "bytesReceivedRate", memberMxBean.getBytesReceivedRate(), csvBuilder);
-        String [] connectedGatewayReceivers = memberMxBean.listConnectedGatewayReceivers();
-        writeToTableAndCsv(metricsTable, "", "connectedGatewayReceivers", connectedGatewayReceivers, csvBuilder);
+        writeToTableAndCsv(metricsTable, "communication", "bytesSentRate",
+            memberMxBean.getBytesSentRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "bytesReceivedRate",
+            memberMxBean.getBytesReceivedRate(), csvBuilder);
+        String[] connectedGatewayReceivers = memberMxBean.listConnectedGatewayReceivers();
+        writeToTableAndCsv(metricsTable, "", "connectedGatewayReceivers", connectedGatewayReceivers,
+            csvBuilder);
-        String [] connectedGatewaySenders = memberMxBean.listConnectedGatewaySenders();
-        writeToTableAndCsv(metricsTable, "", "connectedGatewaySenders", connectedGatewaySenders, csvBuilder);
+        String[] connectedGatewaySenders = memberMxBean.listConnectedGatewaySenders();
+        writeToTableAndCsv(metricsTable, "", "connectedGatewaySenders", connectedGatewaySenders,
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "function", "numRunningFunctions", memberMxBean.getNumRunningFunctions(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "functionExecutionRate", memberMxBean.getFunctionExecutionRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "numRunningFunctionsHavingResults", memberMxBean.getNumRunningFunctionsHavingResults(), csvBuilder);
-        //Not Avaialble from Stats
-        //writeToTableAndCsv(metricsTable, "", "funcExecutionQueueSize", memberMxBean.getFuncExecutionQueueSize(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "function", "numRunningFunctions",
+            memberMxBean.getNumRunningFunctions(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "functionExecutionRate",
+            memberMxBean.getFunctionExecutionRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "numRunningFunctionsHavingResults",
+            memberMxBean.getNumRunningFunctionsHavingResults(), csvBuilder);
+        // Not Avaialble from Stats
+        // writeToTableAndCsv(metricsTable, "", "funcExecutionQueueSize",
+        // memberMxBean.getFuncExecutionQueueSize(), csvBuilder);
-       * totalTransactionsCount
-         currentTransactionalThreadIds
-         transactionCommitsAvgLatency
-         transactionCommittedTotalCount
-         transactionRolledBackTotalCount
-         transactionCommitsRate
+       * totalTransactionsCount currentTransactionalThreadIds transactionCommitsAvgLatency
+       * transactionCommittedTotalCount transactionRolledBackTotalCount transactionCommitsRate
-        writeToTableAndCsv(metricsTable, "transaction", "totalTransactionsCount", memberMxBean.getTotalTransactionsCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "transaction", "totalTransactionsCount",
+            memberMxBean.getTotalTransactionsCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "transactionCommitsAvgLatency", memberMxBean.getTransactionCommitsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "transactionCommittedTotalCount", memberMxBean.getTransactionCommittedTotalCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "transactionRolledBackTotalCount", memberMxBean.getTransactionRolledBackTotalCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "transactionCommitsRate", memberMxBean.getTransactionCommitsRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "transactionCommitsAvgLatency",
+            memberMxBean.getTransactionCommitsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "transactionCommittedTotalCount",
+            memberMxBean.getTransactionCommittedTotalCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "transactionRolledBackTotalCount",
+            memberMxBean.getTransactionRolledBackTotalCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "transactionCommitsRate",
+            memberMxBean.getTransactionCommitsRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "diskstore", "totalDiskUsage", memberMxBean.getTotalDiskUsage(), csvBuilder); // deadcoded to workaround bug 46397
-        writeToTableAndCsv(metricsTable, ""/*46608*/, "diskReadsRate", memberMxBean.getDiskReadsRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskWritesRate", memberMxBean.getDiskWritesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "flushTimeAvgLatency", memberMxBean.getDiskFlushAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalQueueSize", memberMxBean.getTotalDiskTasksWaiting(), csvBuilder); // deadcoded to workaround bug 46397
-        writeToTableAndCsv(metricsTable, "", "totalBackupInProgress", memberMxBean.getTotalBackupInProgress(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "diskstore", "totalDiskUsage",
+            memberMxBean.getTotalDiskUsage(), csvBuilder); // deadcoded to workaround bug 46397
+        writeToTableAndCsv(metricsTable, ""/* 46608 */, "diskReadsRate",
+            memberMxBean.getDiskReadsRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskWritesRate", memberMxBean.getDiskWritesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "flushTimeAvgLatency",
+            memberMxBean.getDiskFlushAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalQueueSize",
+            memberMxBean.getTotalDiskTasksWaiting(), csvBuilder); // deadcoded to workaround bug
+                                                                  // 46397
+        writeToTableAndCsv(metricsTable, "", "totalBackupInProgress",
+            memberMxBean.getTotalBackupInProgress(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "lock", "lockWaitsInProgress", memberMxBean.getLockWaitsInProgress(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalLockWaitTime", memberMxBean.getTotalLockWaitTime(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalNumberOfLockService", memberMxBean.getTotalNumberOfLockService(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "requestQueues", memberMxBean.getLockRequestQueues(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "lock", "lockWaitsInProgress",
+            memberMxBean.getLockWaitsInProgress(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalLockWaitTime",
+            memberMxBean.getTotalLockWaitTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalNumberOfLockService",
+            memberMxBean.getTotalNumberOfLockService(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "requestQueues", memberMxBean.getLockRequestQueues(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "eviction", "lruEvictionRate", memberMxBean.getLruEvictionRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "lruDestroyRate", memberMxBean.getLruDestroyRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "eviction", "lruEvictionRate",
+            memberMxBean.getLruEvictionRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "lruDestroyRate", memberMxBean.getLruDestroyRate(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "distribution", "getInitialImagesInProgress", memberMxBean.getInitialImagesInProgres(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "getInitialImageTime", memberMxBean.getInitialImageTime(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "getInitialImageKeysReceived", memberMxBean.getInitialImageKeysReceived(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "distribution", "getInitialImagesInProgress",
+            memberMxBean.getInitialImagesInProgres(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "getInitialImageTime",
+            memberMxBean.getInitialImageTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "getInitialImageKeysReceived",
+            memberMxBean.getInitialImageKeysReceived(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "offheap", "maxMemory", memberMxBean.getOffHeapMaxMemory(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "freeMemory", memberMxBean.getOffHeapFreeMemory(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "usedMemory", memberMxBean.getOffHeapUsedMemory(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "objects", memberMxBean.getOffHeapObjects(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "fragmentation", memberMxBean.getOffHeapFragmentation(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "compactionTime", memberMxBean.getOffHeapCompactionTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "offheap", "maxMemory", memberMxBean.getOffHeapMaxMemory(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "freeMemory", memberMxBean.getOffHeapFreeMemory(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "usedMemory", memberMxBean.getOffHeapUsedMemory(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "objects", memberMxBean.getOffHeapObjects(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "fragmentation",
+            memberMxBean.getOffHeapFragmentation(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "compactionTime",
+            memberMxBean.getOffHeapCompactionTime(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "cache-server", "clientConnectionCount", csMxBean.getClientConnectionCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "hostnameForClients", csMxBean.getHostNameForClients(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "getRequestAvgLatency", csMxBean.getGetRequestAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRequestAvgLatency", csMxBean.getPutRequestAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalConnectionsTimedOut", csMxBean.getTotalConnectionsTimedOut(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "threadQueueSize", csMxBean.getPutRequestAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "connectionThreads", csMxBean.getConnectionThreads(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "connectionLoad", csMxBean.getConnectionLoad(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "loadPerConnection", csMxBean.getLoadPerConnection(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "cache-server", "clientConnectionCount",
+            csMxBean.getClientConnectionCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "hostnameForClients", csMxBean.getHostNameForClients(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "getRequestAvgLatency",
+            csMxBean.getGetRequestAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRequestAvgLatency",
+            csMxBean.getPutRequestAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalConnectionsTimedOut",
+            csMxBean.getTotalConnectionsTimedOut(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "threadQueueSize", csMxBean.getPutRequestAvgLatency(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "connectionThreads", csMxBean.getConnectionThreads(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "connectionLoad", csMxBean.getConnectionLoad(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "loadPerConnection", csMxBean.getLoadPerConnection(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "loadPerQueue", csMxBean.getLoadPerQueue(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "getRequestRate", csMxBean.getGetRequestRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRequestRate", csMxBean.getPutRequestRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "loadPerQueue", csMxBean.getLoadPerQueue(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "getRequestRate", csMxBean.getGetRequestRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRequestRate", csMxBean.getPutRequestRate(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "notification", "numClientNotificationRequests", csMxBean.getNumClientNotificationRequests(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "clientNotificationRate", csMxBean.getClientNotificationRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "clientNotificationAvgLatency", csMxBean.getClientNotificationAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "notification", "numClientNotificationRequests",
+            csMxBean.getNumClientNotificationRequests(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "clientNotificationRate",
+            csMxBean.getClientNotificationRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "clientNotificationAvgLatency",
+            csMxBean.getClientNotificationAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "query", "activeCQCount", csMxBean.getActiveCQCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "query", "queryRequestRate", csMxBean.getQueryRequestRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "query", "activeCQCount", csMxBean.getActiveCQCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "query", "queryRequestRate",
+            csMxBean.getQueryRequestRate(), csvBuilder);
-        String [] indexList = csMxBean.getIndexList();
+        String[] indexList = csMxBean.getIndexList();
-        writeToTableAndCsv(metricsTable, "", "totalIndexMaintenanceTime", csMxBean.getTotalIndexMaintenanceTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalIndexMaintenanceTime",
+            csMxBean.getTotalIndexMaintenanceTime(), csvBuilder);
-        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Member metrics exported to {0}.", false);
+        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Member metrics exported to {0}.",
+            false);
-      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Member MBean for " + MBeanJMXAdapter.getMemberNameOrId(distributedMember) + " not found");
+      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Member MBean for "
+          + MBeanJMXAdapter.getMemberNameOrId(distributedMember) + " not found");
-   * @throws ResultDataException
-   *           if building result fails
+   * @throws ResultDataException if building result fails
-  private ResultData getDistributedRegionMetrics(String regionName, String export_to_report_to, String[] categoriesArr) throws ResultDataException {
+  private ResultData getDistributedRegionMetrics(String regionName, String export_to_report_to,
+      String[] categoriesArr) throws ResultDataException {
-    	Set<String> checkSet = new HashSet<String>(categoriesMap.keySet());
+        Set<String> checkSet = new HashSet<String>(categoriesMap.keySet());
-        //Checking if the categories specified by the user are valid or not
+        // Checking if the categories specified by the user are valid or not
-      //cluster, region, partition , diskstore, callback, eviction
+      // cluster, region, partition , diskstore, callback, eviction
-        writeToTableAndCsv(metricsTable, "cluster", "member count", regionMxBean.getMemberCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "region entry count", regionMxBean.getSystemRegionEntryCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "cluster", "member count", regionMxBean.getMemberCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "region entry count",
+            regionMxBean.getSystemRegionEntryCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "region", "lastModifiedTime", regionMxBean.getLastModifiedTime(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "lastAccessedTime", regionMxBean.getLastAccessedTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "region", "lastModifiedTime",
+            regionMxBean.getLastModifiedTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "lastAccessedTime", regionMxBean.getLastAccessedTime(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "createsRate", regionMxBean.getCreatesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "destroyRate", regionMxBean.getDestroyRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putAllRate", regionMxBean.getPutAllRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "createsRate", regionMxBean.getCreatesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "destroyRate", regionMxBean.getDestroyRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putAllRate", regionMxBean.getPutAllRate(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "partition", "putLocalRate", regionMxBean.getPutLocalRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteRate", regionMxBean.getPutRemoteRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteLatency", regionMxBean.getPutRemoteLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteAvgLatency", regionMxBean.getPutRemoteAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "partition", "putLocalRate",
+            regionMxBean.getPutLocalRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteRate", regionMxBean.getPutRemoteRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteLatency", regionMxBean.getPutRemoteLatency(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteAvgLatency",
+            regionMxBean.getPutRemoteAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "bucketCount", regionMxBean.getBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "primaryBucketCount", regionMxBean.getPrimaryBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "numBucketsWithoutRedundancy", regionMxBean.getNumBucketsWithoutRedundancy(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalBucketSize", regionMxBean.getTotalBucketSize(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "averageBucketSize", regionMxBean.getAvgBucketSize(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "bucketCount", regionMxBean.getBucketCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "primaryBucketCount",
+            regionMxBean.getPrimaryBucketCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "numBucketsWithoutRedundancy",
+            regionMxBean.getNumBucketsWithoutRedundancy(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalBucketSize", regionMxBean.getTotalBucketSize(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "averageBucketSize", regionMxBean.getAvgBucketSize(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "diskstore", "totalEntriesOnlyOnDisk", regionMxBean.getTotalEntriesOnlyOnDisk(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskReadsRate", regionMxBean.getDiskReadsRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskWritesRate", regionMxBean.getDiskWritesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalDiskWriteInProgress", regionMxBean.getTotalDiskWritesProgress(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskTaskWaiting", regionMxBean.getDiskTaskWaiting(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "diskstore", "totalEntriesOnlyOnDisk",
+            regionMxBean.getTotalEntriesOnlyOnDisk(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskReadsRate", regionMxBean.getDiskReadsRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskWritesRate", regionMxBean.getDiskWritesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalDiskWriteInProgress",
+            regionMxBean.getTotalDiskWritesProgress(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskTaskWaiting", regionMxBean.getDiskTaskWaiting(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "callback", "cacheWriterCallsAvgLatency", regionMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency", regionMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "callback", "cacheWriterCallsAvgLatency",
+            regionMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency",
+            regionMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "eviction" , "lruEvictionRate", regionMxBean.getLruEvictionRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "" , "lruDestroyRate", regionMxBean.getLruDestroyRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "eviction", "lruEvictionRate",
+            regionMxBean.getLruEvictionRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "lruDestroyRate", regionMxBean.getLruDestroyRate(),
+            csvBuilder);
-        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Aggregate Region Metrics exported to {0}.", false);
+        crd.addAsFile(export_to_report_to, csvBuilder.toString(),
+            "Aggregate Region Metrics exported to {0}.", false);
-      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Distributed Region MBean for " + regionName + " not found");
+      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,
+          "Distributed Region MBean for " + regionName + " not found");
-   * @return ResultData with required Region statistics or ErrorResultData if
-   *         Region MBean is not found to gather metrics
-   * @throws ResultDataException
-   *           if building result fails
+   * @return ResultData with required Region statistics or ErrorResultData if Region MBean is not
+   *         found to gather metrics
+   * @throws ResultDataException if building result fails
-  private ResultData getRegionMetricsFromMember(String regionName, DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr) throws ResultDataException {
+  private ResultData getRegionMetricsFromMember(String regionName,
+      DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr)
+      throws ResultDataException {
-    final SystemManagementService managementService = (SystemManagementService) ManagementService
-        .getManagementService(cache);
+    final SystemManagementService managementService =
+        (SystemManagementService) ManagementService.getManagementService(cache);
-    ObjectName regionMBeanName = managementService.getRegionMBeanName(distributedMember, regionName);
-    RegionMXBean regionMxBean = managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);
+    ObjectName regionMBeanName =
+        managementService.getRegionMBeanName(distributedMember, regionName);
+    RegionMXBean regionMxBean =
+        managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);
-      metricsTable.setHeader("Metrics for region:" + regionName+ " On Member " + MBeanJMXAdapter.getMemberNameOrId(distributedMember));
+      metricsTable.setHeader("Metrics for region:" + regionName + " On Member "
+          + MBeanJMXAdapter.getMemberNameOrId(distributedMember));
-        //Checking if the categories specified by the user are valid or not
+        // Checking if the categories specified by the user are valid or not
-        writeToTableAndCsv(metricsTable, "region", "lastModifiedTime", regionMxBean.getLastModifiedTime(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "lastAccessedTime", regionMxBean.getLastAccessedTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "region", "lastModifiedTime",
+            regionMxBean.getLastModifiedTime(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "lastAccessedTime", regionMxBean.getLastAccessedTime(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "createsRate", regionMxBean.getCreatesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "destroyRate", regionMxBean.getDestroyRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putAllRate", regionMxBean.getPutAllRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "createsRate", regionMxBean.getCreatesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "destroyRate", regionMxBean.getDestroyRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putAllRate", regionMxBean.getPutAllRate(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "partition", "putLocalRate", regionMxBean.getPutLocalRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteRate", regionMxBean.getPutRemoteRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteLatency", regionMxBean.getPutRemoteLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "putRemoteAvgLatency", regionMxBean.getPutRemoteAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "partition", "putLocalRate",
+            regionMxBean.getPutLocalRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteRate", regionMxBean.getPutRemoteRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteLatency", regionMxBean.getPutRemoteLatency(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "putRemoteAvgLatency",
+            regionMxBean.getPutRemoteAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "bucketCount", regionMxBean.getBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "primaryBucketCount", regionMxBean.getPrimaryBucketCount(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "configuredRedundancy", regionMxBean.getConfiguredRedundancy(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "actualRedundancy", regionMxBean.getActualRedundancy(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "numBucketsWithoutRedundancy", regionMxBean.getNumBucketsWithoutRedundancy(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalBucketSize", regionMxBean.getTotalBucketSize(), csvBuilder);
-        //writeToTableAndCsv(metricsTable, "", "averageBucketSize", regionMxBean.getAvgBucketSize(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "bucketCount", regionMxBean.getBucketCount(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "primaryBucketCount",
+            regionMxBean.getPrimaryBucketCount(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "configuredRedundancy",
+            regionMxBean.getConfiguredRedundancy(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "actualRedundancy", regionMxBean.getActualRedundancy(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "numBucketsWithoutRedundancy",
+            regionMxBean.getNumBucketsWithoutRedundancy(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalBucketSize", regionMxBean.getTotalBucketSize(),
+            csvBuilder);
+        // writeToTableAndCsv(metricsTable, "", "averageBucketSize",
+        // regionMxBean.getAvgBucketSize(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "diskstore", "totalEntriesOnlyOnDisk", regionMxBean.getTotalEntriesOnlyOnDisk(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskReadsRate", ""+regionMxBean.getDiskReadsRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskWritesRate", regionMxBean.getDiskWritesRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "totalDiskWriteInProgress", regionMxBean.getTotalDiskWritesProgress(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "diskTaskWaiting", regionMxBean.getDiskTaskWaiting(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "diskstore", "totalEntriesOnlyOnDisk",
+            regionMxBean.getTotalEntriesOnlyOnDisk(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskReadsRate", "" + regionMxBean.getDiskReadsRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskWritesRate", regionMxBean.getDiskWritesRate(),
+            csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "totalDiskWriteInProgress",
+            regionMxBean.getTotalDiskWritesProgress(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "diskTaskWaiting", regionMxBean.getDiskTaskWaiting(),
+            csvBuilder);
-        writeToTableAndCsv(metricsTable, "callback", "cacheWriterCallsAvgLatency", regionMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency", regionMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "callback", "cacheWriterCallsAvgLatency",
+            regionMxBean.getCacheWriterCallsAvgLatency(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "cacheListenerCallsAvgLatency",
+            regionMxBean.getCacheListenerCallsAvgLatency(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "eviction" , "lruEvictionRate", regionMxBean.getLruEvictionRate(), csvBuilder);
-        writeToTableAndCsv(metricsTable, "" , "lruDestroyRate", regionMxBean.getLruDestroyRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "eviction", "lruEvictionRate",
+            regionMxBean.getLruEvictionRate(), csvBuilder);
+        writeToTableAndCsv(metricsTable, "", "lruDestroyRate", regionMxBean.getLruDestroyRate(),
+            csvBuilder);
-        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Region Metrics exported to {0}.", false);
+        crd.addAsFile(export_to_report_to, csvBuilder.toString(), "Region Metrics exported to {0}.",
+            false);
-      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, "Region MBean for " + regionName + " on member " +  MBeanJMXAdapter.getMemberNameOrId(distributedMember) + " not found");
+      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,
+          "Region MBean for " + regionName + " on member "
+              + MBeanJMXAdapter.getMemberNameOrId(distributedMember) + " not found");
-  /*** Writes an entry to a TabularResultData and writes a comma separated entry to a string builder
+  /***
+   * Writes an entry to a TabularResultData and writes a comma separated entry to a string builder
+   * 
-  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName, long metricValue, StringBuilder csvBuilder) {
+  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName,
+      long metricValue, StringBuilder csvBuilder) {
-  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName, double metricValue, StringBuilder csvBuilder) {
+  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName,
+      double metricValue, StringBuilder csvBuilder) {
+   * 
+   * 
+   * 
+   * 
-   * Converts an array of strings to a String delimited by a new line character
-   * for display purposes
+   * Converts an array of strings to a String delimited by a new line character for display purposes
-  private void writeToTableAndCsv(TabularResultData metricsTable, String type,
-      String metricName, String metricValue[], StringBuilder csvBuilder) {
+  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName,
+      String metricValue[], StringBuilder csvBuilder) {
-      for (int i=0 ; i < metricValue.length; i++) {
+      for (int i = 0; i < metricValue.length; i++) {
+   * 
-  private void writeToTableAndCsv(TabularResultData metricsTable, String type,
-      String metricName, String metricValue, StringBuilder csvBuilder) {
+  private void writeToTableAndCsv(TabularResultData metricsTable, String type, String metricName,
+      String metricValue, StringBuilder csvBuilder) {
-  
-  
+
+
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_CHANGELOGLEVEL })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_CHANGELOGLEVEL})
-      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__MEMBER, unspecifiedDefaultValue = "", help = CliStrings.CHANGE_LOGLEVEL__MEMBER__HELP) String[] memberIds, 
-      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__GROUPS, unspecifiedDefaultValue = "", help = CliStrings.CHANGE_LOGLEVEL__GROUPS__HELP) String[] grps,
-      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL, optionContext = ConverterHint.LOG_LEVEL, mandatory = true, unspecifiedDefaultValue = "", help = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL__HELP) String logLevel ) {
-    try {      
-      if( (memberIds == null || memberIds.length == 0 ) && (grps== null || grps.length == 0   ) ){
-        return ResultBuilder.createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_GRP_OR_MEMBER);
+      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__MEMBER, unspecifiedDefaultValue = "",
+          help = CliStrings.CHANGE_LOGLEVEL__MEMBER__HELP) String[] memberIds,
+      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__GROUPS, unspecifiedDefaultValue = "",
+          help = CliStrings.CHANGE_LOGLEVEL__GROUPS__HELP) String[] grps,
+      @CliOption(key = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL,
+          optionContext = ConverterHint.LOG_LEVEL, mandatory = true, unspecifiedDefaultValue = "",
+          help = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL__HELP) String logLevel) {
+    try {
+      if ((memberIds == null || memberIds.length == 0) && (grps == null || grps.length == 0)) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_GRP_OR_MEMBER);
-      
-      if(logLevel == null || logLevel.length() == 0){
-        return ResultBuilder.createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_LOG_LEVEL);
+
+      if (logLevel == null || logLevel.length() == 0) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_LOG_LEVEL);
-      
+
-      
-      boolean validLogLevel = false;     
-      
-      for(int i = 0; i < LogWriterImpl.allLevels.length -1 ; i++){        
-        if(LogWriterImpl.allLevels[i] == LogWriterImpl.levelNameToCode(logLevel)){
+
+      boolean validLogLevel = false;
+
+      for (int i = 0; i < LogWriterImpl.allLevels.length - 1; i++) {
+        if (LogWriterImpl.allLevels[i] == LogWriterImpl.levelNameToCode(logLevel)) {
-      
-      if(!validLogLevel){
-        return ResultBuilder.createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__INVALID_LOG_LEVEL);
+
+      if (!validLogLevel) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__INVALID_LOG_LEVEL);
-      
+
-      
-      
-      if(grps != null && grps.length > 0){
-        for(String grp : grps){
+
+
+      if (grps != null && grps.length > 0) {
+        for (String grp : grps) {
-      
-      if(memberIds != null && memberIds.length > 0){
-        for(String member : memberIds){          
+
+      if (memberIds != null && memberIds.length > 0) {
+        for (String member : memberIds) {
-          while(it.hasNext()){
-            DistributedMember mem = it.next();            
-            if( mem.getName() == null ? false : mem.getName().equals(member) || 
-                mem.getId().equals(member)){
+          while (it.hasNext()) {
+            DistributedMember mem = it.next();
+            if (mem.getName() == null ? false
+                : mem.getName().equals(member) || mem.getId().equals(member)) {
-              break;    
+              break;
-      }  
-      
-      if(dsMembers.size() == 0){
+      }
+
+      if (dsMembers.size() == 0) {
-      
+
-      functionArgs[0] = logLevel;      
-      
+      functionArgs[0] = logLevel;
+
-      resultTable = resultTable.setHeader("Summary");    
+      resultTable = resultTable.setHeader("Summary");
-      List<?> resultList = (List<?>) execution.execute(logFunction).getResult();  
-      
+      List<?> resultList = (List<?>) execution.execute(logFunction).getResult();
+
-            logger.warning("Exception in ChangeLogLevelFunction " + ((Throwable) object).getMessage(), ((Throwable) object));
+            logger.warning(
+                "Exception in ChangeLogLevelFunction " + ((Throwable) object).getMessage(),
+                ((Throwable) object));
-            
+
-            Map<String, String> resultMap = (Map<String, String>) object;              
+            Map<String, String> resultMap = (Map<String, String>) object;
-              
-            if(entry.getValue().contains("ChangeLogLevelFunction exception")){
+
+            if (entry.getValue().contains("ChangeLogLevelFunction exception")) {
-            }else{
+            } else {
-            }           
-              
+            }
+
-      }     
-            
+      }
+
-      logger.info("change log-level command result=" +result);      
-      return result;      
+      logger.info("change log-level command result=" + result);
+      return result;
-      return ResultBuilder.createUserErrorResult( ex.getMessage());
+      return ResultBuilder.createUserErrorResult(ex.getMessage());
-  
-  
-  @CliAvailabilityIndicator({ CliStrings.SHUTDOWN, CliStrings.GC,
-    CliStrings.SHOW_DEADLOCK, CliStrings.SHOW_METRICS, CliStrings.SHOW_LOG,
-    CliStrings.EXPORT_STACKTRACE, CliStrings.NETSTAT, CliStrings.EXPORT_LOGS, CliStrings.CHANGE_LOGLEVEL })
+
+
+  @CliAvailabilityIndicator({CliStrings.SHUTDOWN, CliStrings.GC, CliStrings.SHOW_DEADLOCK,
+      CliStrings.SHOW_METRICS, CliStrings.SHOW_LOG, CliStrings.EXPORT_STACKTRACE,
+      CliStrings.NETSTAT, CliStrings.EXPORT_LOGS, CliStrings.CHANGE_LOGLEVEL})
-    	setDifference.add(element);
+        setDifference.add(element);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66