GEODE-1726 Clean up compilation warnings in new GMS

+import java.util.stream.*;
+@SuppressWarnings("StatementWithEmptyBody")
-  public static final short JGROUPS_TYPE_JGADDRESS = 2000;
-  public static final short JGROUPS_PROTOCOL_TRANSPORT = 1000;
+  private static final short JGROUPS_TYPE_JGADDRESS = 2000;
+  private static final short JGROUPS_PROTOCOL_TRANSPORT = 1000;
-  String jgStackConfig;
+  private String jgStackConfig;
-  Services services;
+  private Services services;
-  Map<Class, MessageHandler> handlers = new ConcurrentHashMap<Class, MessageHandler>();
+  private final Map<Class, MessageHandler> handlers = new ConcurrentHashMap<>();
-  private GMSPingPonger pingPonger = new GMSPingPonger();
+  private final GMSPingPonger pingPonger = new GMSPingPonger();
-  protected AtomicLong pongsReceived = new AtomicLong(0);
+  protected final AtomicLong pongsReceived = new AtomicLong(0);
-  private Set<Address> addressesWithIoExceptionsProcessed = Collections.synchronizedSet(new HashSet<Address>());
+  private final Set<Address> addressesWithIoExceptionsProcessed = Collections.synchronizedSet(new HashSet<Address>());
-    InputStream is= null;
+    InputStream is;
-    String r = null;
+    String r;
-      StringBuffer sb = new StringBuffer(3000);
+      StringBuilder sb = new StringBuilder(3000);
-        View jgv = new View(vid, new ArrayList<Address>());
+        View jgv = new View(vid, new ArrayList<>());
-    List<JGAddress> mbrs = new ArrayList<JGAddress>(v.size());
-    for (InternalDistributedMember idm: v.getMembers()) {
-      mbrs.add(new JGAddress(idm));
-    }
+    List<JGAddress> mbrs = new ArrayList<>(v.size());
+    mbrs.addAll(v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList()));
-    View jgv = new View(vid, new ArrayList<Address>(mbrs));
+    View jgv = new View(vid, new ArrayList<>(mbrs));
+  @SuppressWarnings("UnusedParameters")
+      //noinspection ConstantConditions
-        if (senderSeqnos != null) {
-          received = String.valueOf(senderSeqnos[0]);
-        }
+        received = String.valueOf(senderSeqnos[0]);
-  public Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
+  private Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
-      Exception problem = null;
+      Exception problem;
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<>();
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<>();
-      for (Iterator<GMSMember> it=calculatedMembers.iterator(); it.hasNext(); ) {
-        GMSMember mbr = it.next();
+      for (GMSMember mbr : calculatedMembers) {
-        if ( !messages.containsKey(version) ) {
+        if (!messages.containsKey(version)) {
-        Message jmsg = (Message)messages.get(version);
+        Message jmsg = messages.get(version);
-    Set<InternalDistributedMember> result = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> result = new HashSet<>();
-      for (int i = 0; i < destinations.length; i ++) {
-        InternalDistributedMember d = destinations[i];
+      for (InternalDistributedMember d : destinations) {
-    InternalDistributedMember sender = null;
+    InternalDistributedMember sender;
-          if (digest != null) {
-            logger.trace("installing JGroups message digest {}", digest);
-            this.myChannel.getProtocolStack()
-                .getTopProtocol().down(new Event(Event.MERGE_DIGEST, digest));
-            jrsp.setMessengerData(null);
-          }
+          logger.trace("installing JGroups message digest {}", digest);
+          this.myChannel.getProtocolStack()
+              .getTopProtocol().down(new Event(Event.MERGE_DIGEST, digest));
+          jrsp.setMessengerData(null);
+  @SuppressWarnings("UnusedParameters")
-        if (((GMSMember)m.getNetMember()).equals(jgId)) {
+        if (m.getNetMember().equals(jgId)) {
-        h = (MessageHandler)services.getManager();
+        h = services.getManager();

INS26 INS40 INS79 INS42 INS45 UPD83 UPD83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS79 UPD83 MOV8 INS79 MOV21 INS42 INS45 INS50 INS42 INS45 UPD74 MOV43 MOV32 MOV49 MOV60 INS25 INS10 INS49 INS10 UPD42 INS32 INS70 INS70 MOV27 MOV8 UPD43 UPD74 INS32 INS42 INS32 MOV43 MOV8 INS44 INS42 MOV8 UPD74 INS44 INS42 MOV8 MOV60 MOV60 MOV60 INS54 UPD42 INS32 INS42 INS89 INS42 INS42 UPD74 MOV21 MOV21 INS43 INS42 MOV43 INS42 MOV8 MOV12 UPD43 MOV43 MOV32 INS42 MOV43 MOV42 MOV43 MOV60 MOV21 MOV32 UPD42 MOV32 MOV32 MOV43 UPD74 UPD74 UPD74 DEL42 DEL43 DEL42 DEL43 DEL33 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL44 DEL8 DEL70 DEL42 DEL43 DEL42 DEL33 DEL27 DEL25 DEL8 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL33 DEL42 DEL33 DEL27 DEL25 DEL54 DEL25 DEL10 DEL49 DEL10 DEL50 DEL8 DEL42 DEL43 DEL11 DEL36 DEL42 DEL43 DEL11