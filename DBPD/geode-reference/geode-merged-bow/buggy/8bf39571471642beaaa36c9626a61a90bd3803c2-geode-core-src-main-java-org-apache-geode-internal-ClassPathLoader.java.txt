Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The delegating <tt>ClassLoader</tt> used by GemFire to load classes and other resources. This <tt>ClassLoader</tt>
- * delegates to any <tt>ClassLoader</tt>s added to the list of custom class loaders, thread context <tt>ClassLoader</tt>
- * s unless they have been excluded}, the <tt>ClassLoader</tt> which loaded the GemFire classes, and finally the system
+ * The delegating <tt>ClassLoader</tt> used by GemFire to load classes and other resources. This
+ * <tt>ClassLoader</tt> delegates to any <tt>ClassLoader</tt>s added to the list of custom class
+ * loaders, thread context <tt>ClassLoader</tt> s unless they have been excluded}, the
+ * <tt>ClassLoader</tt> which loaded the GemFire classes, and finally the system
- * <li>4. <tt>ClassLoader.getSystemClassLoader()</tt> If the attempt to acquire any of the above class loaders results
- * in either a {@link java.lang.SecurityException SecurityException} or a null, then that class loader is quietly
- * skipped. Duplicate class loaders will be skipped.
+ * <li>4. <tt>ClassLoader.getSystemClassLoader()</tt> If the attempt to acquire any of the above
+ * class loaders results in either a {@link java.lang.SecurityException SecurityException} or a
+ * null, then that class loader is quietly skipped. Duplicate class loaders will be skipped.
-  public static final String ENABLE_TRACE_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "ClassPathLoader.enableTrace";
+  public static final String ENABLE_TRACE_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "ClassPathLoader.enableTrace";
-  public static final String EXCLUDE_TCCL_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "excludeThreadContextClassLoader";
+  public static final String EXCLUDE_TCCL_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "excludeThreadContextClassLoader";
-  
+
-  // location of the gemfire jar file.  If for some reason the ClassPathLoader
+  // location of the gemfire jar file. If for some reason the ClassPathLoader
-  public static final String EXT_LIB_DIR_PARENT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "ClassPathLoader.EXT_LIB_DIR";
-  public static final String EXT_LIB_DIR_PARENT_DEFAULT = ClassPathLoader.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+  public static final String EXT_LIB_DIR_PARENT_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "ClassPathLoader.EXT_LIB_DIR";
+  public static final String EXT_LIB_DIR_PARENT_DEFAULT =
+      ClassPathLoader.class.getProtectionDomain().getCodeSource().getLocation().getPath();
+
-    return new File((new File(System.getProperty(EXT_LIB_DIR_PARENT_PROPERTY, EXT_LIB_DIR_PARENT_DEFAULT))).getParent(), "ext");
+    return new File(
+        (new File(System.getProperty(EXT_LIB_DIR_PARENT_PROPERTY, EXT_LIB_DIR_PARENT_DEFAULT)))
+            .getParent(),
+        "ext");
-  private static final ClassLoader TCCL_PLACEHOLDER = new ClassLoader() { // This is never used for class loading
+  private static final ClassLoader TCCL_PLACEHOLDER = new ClassLoader() { // This is never used for
+                                                                          // class loading
-  private static final AtomicReference<ClassPathLoader> latest = new AtomicReference<ClassPathLoader>();
+  private static final AtomicReference<ClassPathLoader> latest =
+      new AtomicReference<ClassPathLoader>();
-  
+
-   * Starting at the files or directories identified by 'files', search for valid
-   * JAR files and return a list of their URLs.  Sub-directories will also be
-   * searched.
+   * Starting at the files or directories identified by 'files', search for valid JAR files and
+   * return a list of their URLs. Sub-directories will also be searched.
-            logger.warn("Invalid JAR content when attempting to create ClassLoader for file: {}", file.getAbsolutePath());
+            logger.warn("Invalid JAR content when attempting to create ClassLoader for file: {}",
+                file.getAbsolutePath());
-            logger.warn("Encountered invalid URL when attempting to create ClassLoader for file: {}:{}", file.getAbsolutePath(), muex.getMessage());
+            logger.warn(
+                "Encountered invalid URL when attempting to create ClassLoader for file: {}:{}",
+                file.getAbsolutePath(), muex.getMessage());
-    
+
-          logger.warn("Cannot read from directory when attempting to load JAR files: {}", EXT_LIB_DIR.getAbsolutePath());
+          logger.warn("Cannot read from directory when attempting to load JAR files: {}",
+              EXT_LIB_DIR.getAbsolutePath());
-          ClassLoader classLoader = new URLClassLoader(extLibJarURLs.toArray(new URL[extLibJarURLs.size()]));
+          ClassLoader classLoader =
+              new URLClassLoader(extLibJarURLs.toArray(new URL[extLibJarURLs.size()]));
-   * Add or replace the provided {@link ClassLoader} to the list held by this ClassPathLoader. Then use the resulting
-   * list to create a new ClassPathLoader and set it as the latest.
+   * Add or replace the provided {@link ClassLoader} to the list held by this ClassPathLoader. Then
+   * use the resulting list to create a new ClassPathLoader and set it as the latest.
-   * @param classLoader
-   *          {@link ClassLoader} to add
+   * @param classLoader {@link ClassLoader} to add
-   * Remove the provided {@link ClassLoader} from the list held by this ClassPathLoader. Then use the resulting list to
-   * create a new ClassPathLoader and set it as the latest. Silently ignores requests to remove non-existent
-   * ClassLoaders.
+   * Remove the provided {@link ClassLoader} from the list held by this ClassPathLoader. Then use
+   * the resulting list to create a new ClassPathLoader and set it as the latest. Silently ignores
+   * requests to remove non-existent ClassLoaders.
-   * @param classLoader
-   *          {@link ClassLoader} to remove
+   * @param classLoader {@link ClassLoader} to remove
-   * Finds the resource with the given name. This method will first search the class loader of the context class for the
-   * resource. That failing, this method will invoke {@link #getResource(String)} to find the resource.
+   * Finds the resource with the given name. This method will first search the class loader of the
+   * context class for the resource. That failing, this method will invoke
+   * {@link #getResource(String)} to find the resource.
-   * @param contextClass
-   *          The class whose class loader will first be searched
-   * @param name
-   *          The resource name
-   * @return A <tt>URL</tt> object for reading the resource, or <tt>null</tt> if the resource could not be found or the
-   *         invoker doesn't have adequate privileges to get the resource.
+   * @param contextClass The class whose class loader will first be searched
+   * @param name The resource name
+   * @return A <tt>URL</tt> object for reading the resource, or <tt>null</tt> if the resource could
+   *         not be found or the invoker doesn't have adequate privileges to get the resource.
-   * @param name
-   *          The resource name
+   * @param name The resource name
-   * @return An input stream for reading the resource, or <tt>null</tt> if the resource could not be found
+   * @return An input stream for reading the resource, or <tt>null</tt> if the resource could not be
+   *         found
-   * @param contextClass
-   *          The class whose class loader will first be searched
-   * @param name
-   *          The resource name
-   * @return An input stream for reading the resource, or <tt>null</tt> if the resource could not be found
+   * @param contextClass The class whose class loader will first be searched
+   * @param name The resource name
+   * @return An input stream for reading the resource, or <tt>null</tt> if the resource could not be
+   *         found
-   * Finds all the resources with the given name. This method will first search
-   * the class loader of the context class for the resource before searching all
-   * other {@link ClassLoader}s.
+   * Finds all the resources with the given name. This method will first search the class loader of
+   * the context class for the resource before searching all other {@link ClassLoader}s.
-   * @param  contextClass
-   *         The class whose class loader will first be searched
-   *         
-   * @param  name
-   *         The resource name
+   * @param contextClass The class whose class loader will first be searched
+   * 
+   * @param name The resource name
-   * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
-   *          the resource.  If no resources could  be found, the enumeration
-   *          will be empty.  Resources that the class loader doesn't have
-   *          access to will not be in the enumeration.
+   * @return An enumeration of {@link java.net.URL <tt>URL</tt>} objects for the resource. If no
+   *         resources could be found, the enumeration will be empty. Resources that the class
+   *         loader doesn't have access to will not be in the enumeration.
-   * @throws  IOException
-   *          If I/O errors occur
-   *          
+   * @throws IOException If I/O errors occur
+   * 
-  public Enumeration<URL> getResources(final Class<?> contextClass, final String name) throws IOException {
+  public Enumeration<URL> getResources(final Class<?> contextClass, final String name)
+      throws IOException {
-    
+
-    
+
-    
+
-    
+
-              logger.trace(new StringBuilder("getResources found by classLoader: ").append(classLoader));
+              logger.trace(
+                  new StringBuilder("getResources found by classLoader: ").append(classLoader));
-    
+
-    
+
-  
+
-   * @param  name
-   *         The resource name
+   * @param name The resource name
-   * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
-   *          the resource.  If no resources could  be found, the enumeration
-   *          will be empty.  Resources that the class loader doesn't have
-   *          access to will not be in the enumeration.
+   * @return An enumeration of {@link java.net.URL <tt>URL</tt>} objects for the resource. If no
+   *         resources could be found, the enumeration will be empty. Resources that the class
+   *         loader doesn't have access to will not be in the enumeration.
-   * @throws  IOException
-   *          If I/O errors occur
+   * @throws IOException If I/O errors occur
-    
+
-  
+
-  
+
-   * Helper method equivalent to
-   * <code>ClassPathLoader.getLatest().asClassLoader();</code>.
+   * Helper method equivalent to <code>ClassPathLoader.getLatest().asClassLoader();</code>.

UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66