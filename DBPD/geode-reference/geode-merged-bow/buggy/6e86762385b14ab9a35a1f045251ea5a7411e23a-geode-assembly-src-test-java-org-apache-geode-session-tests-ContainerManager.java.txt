GEODE-2901: Resolving possible session testing concurrency issues

Updated installation and container management to allow more container independence.
Previously, containers edited files within the installation, leading to several containers modifying the same file. Given the concurrent nature of runs, this could become a problem if containers ever wrote something to the same part of each file.
Containers now create their own separate and unique files that they use to run, hopefully removing any concurrency problems that might arise.

Also tried to optimize for long term sanity of whoever must maintain this code.

This closes #619

-import java.io.File;
-import java.util.Arrays;
-import org.apache.commons.io.FileUtils;
-import org.codehaus.cargo.container.ContainerType;
-import org.codehaus.cargo.container.InstalledLocalContainer;
-import org.codehaus.cargo.container.configuration.ConfigurationType;
-import org.codehaus.cargo.container.configuration.LocalConfiguration;
-import org.codehaus.cargo.container.deployable.WAR;
-import org.codehaus.cargo.container.property.GeneralPropertySet;
-import org.codehaus.cargo.container.property.ServletPropertySet;
-import org.codehaus.cargo.container.tomcat.TomcatPropertySet;
-import org.codehaus.cargo.generic.DefaultContainerFactory;
-import org.codehaus.cargo.generic.configuration.DefaultConfigurationFactory;
-import org.apache.geode.internal.AvailablePortHelper;
-
-  private ArrayList<InstalledLocalContainer> containers;
-  private ArrayList<ContainerInstall> installs;
-
+  private ArrayList<ServerContainer> containers;
+
-    installs = new ArrayList<>();
-   * Set the name of the current test
-   *
-   * Used for debugging so that log files can be easily identified
+   * @return the number of containers managed
-  public void setTestName(String testName) {
-    this.testName = testName;
+  public int numContainers() {
+    return containers.size();
+  }
+
+  public void cleanUp() throws IOException {
+    for (int i = 0; i < numContainers(); i++)
+      getContainer(i).cleanUp();
-  public InstalledLocalContainer addContainer(ContainerInstall install) throws IOException {
+  public ServerContainer addContainer(ContainerInstall install) throws IOException {
-   * Return the http port the given container is listening on, if the container is running
-   * 
-   * @throws IllegalStateException if the container is not running.
-   */
-  public String getContainerPort(int index) {
-    return getContainerPort(getContainer(index));
-  }
-
-  private String getContainerPort(InstalledLocalContainer container) {
-    LocalConfiguration config = container.getConfiguration();
-    config.applyPortOffset();
-
-    if (!container.getState().isStarted()) {
-      throw new IllegalStateException("Port has not yet been assigned to container");
-    }
-    return config.getPropertyValue(ServletPropertySet.PORT);
-  }
-
-  /**
-   * @return the number of containers managed
-   */
-  public int numContainers() {
-    return containers.size();
-  }
-
-  public ArrayList<Integer> getContainerIndexesWithState(String state) {
-    ArrayList<Integer> indexes = new ArrayList<>();
-    for (int i = 0; i < numContainers(); i++) {
-      if (state.equals(State.STARTED.toString()) || state.equals(State.STOPPED.toString())
-          || state.equals(State.STARTED.toString()) || state.equals(State.STOPPING.toString())
-          || state.equals(State.UNKNOWN.toString())) {
-        if (getContainer(i).getState().toString().equals(state))
-          indexes.add(i);
-      } else
-        throw new IllegalArgumentException(
-            "State must be one of the 5 specified cargo state strings (stopped, started, starting, stopping, or unknown). Given: "
-                + state);
-    }
-    return indexes;
-  }
-
-  /**
-   * Return the cargo container of all of the containers in the given state
-   */
-  public ArrayList<InstalledLocalContainer> getContainersWithState(String state) {
-    ArrayList<InstalledLocalContainer> statedContainers = new ArrayList<>();
-    for (int index : getContainerIndexesWithState(state))
-      statedContainers.add(getContainer(index));
-    return statedContainers;
-  }
-
-  private ArrayList<Integer> getInactiveContainerIndexes() {
-    ArrayList<Integer> indexes = getContainerIndexesWithState(State.STOPPED.toString());
-    indexes.addAll(getContainerIndexesWithState(State.UNKNOWN.toString()));
-    return indexes;
-  }
-
-  private ArrayList<InstalledLocalContainer> getInactiveContainers() {
-    ArrayList<InstalledLocalContainer> inactiveContainers =
-        getContainersWithState(State.STOPPED.toString());
-    inactiveContainers.addAll(getContainersWithState(State.UNKNOWN.toString()));
-    return inactiveContainers;
-  }
-
-  private ArrayList<Integer> getActiveContainerIndexes() {
-    return getContainerIndexesWithState(State.STARTED.toString());
-  }
-
-  public ArrayList<InstalledLocalContainer> getActiveContainers() {
-    return getContainersWithState(State.STARTED.toString());
-  }
-
-  public InstalledLocalContainer getContainer(int index) {
-    return containers.get(index);
-  }
-
-  public ContainerInstall getContainerInstall(int index) {
-    return installs.get(index);
-  }
-
-  /**
-   * Get a textual description of the given container.
-   */
-  public String getContainerDescription(int index) {
-    return getContainerDescription(getContainer(index), getContainerInstall(index)) + " (" + index
-        + ")";
-  }
-
-  private String getContainerDescription(InstalledLocalContainer container,
-      ContainerInstall install) {
-    String port = "<" + container.getState().toString() + ">";
-    try {
-      port = String.valueOf(getContainerPort(container));
-    } catch (IllegalStateException ise) {
-    }
-
-    return install.getContainerDescription() + ":" + port;
-  }
-
-  /**
-    InstalledLocalContainer container = getContainer(index);
-    ContainerInstall install = getContainerInstall(index);
-    String containerDescription = getContainerDescription(index);
-
-    String logFilePath =
-        new File("cargo_logs/containers/" + getUniqueContainerDescription(index) + ".log")
-            .getAbsolutePath();
-    container.setOutput(logFilePath);
-    logger.info("Sending log file output to " + logFilePath);
-
-    if (!container.getState().isStarted()) {
-      logger.info("Starting container " + containerDescription);
-      int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(3);
-      container.getConfiguration().setProperty(ServletPropertySet.PORT, Integer.toString(ports[0]));
-      container.getConfiguration().setProperty(GeneralPropertySet.RMI_PORT,
-          Integer.toString(ports[1]));
-      container.getConfiguration().setProperty(TomcatPropertySet.AJP_PORT,
-          Integer.toString(ports[2]));
-      container.getConfiguration().setProperty(GeneralPropertySet.PORT_OFFSET, "0");
-
-      try {
-        install.writeProperties();
-        container.start();
-      } catch (Exception e) {
-        throw new RuntimeException(
-            "Something very bad happened to this container when starting. Check the cargo_logs folder for container logs.",
-            e);
-      }
-      logger.info("Started container " + containerDescription);
-    } else {
-      throw new IllegalArgumentException("Cannot start container " + containerDescription
-          + " its current state is " + container.getState());
+    try {
+      getContainer(index).start();
+    } catch (Exception e) {
+      throw new RuntimeException("Something very bad happened when trying to start container "
+          + getContainerDescription(index), e);
+
+    logger.info("Started container " + getContainerDescription(index));
-   * Stop the given container
+   * Start all containers specified by the given indexes
-  public void stopContainer(int index) {
-    InstalledLocalContainer container = getContainer(index);
-    if (container.getState().isStarted()) {
-      logger.info("Stopping container" + index + " " + getContainerDescription(index));
-      container.stop();
-      logger.info("Stopped container" + index + " " + getContainerDescription(index));
-    } else
-      throw new IllegalArgumentException("Cannot stop container " + getContainerDescription(index)
-          + " it is currently " + container.getState());
-  }
-
-  public void stopContainers(ArrayList<Integer> indexes) {
-    for (int index : indexes)
-      stopContainer(index);
-  }
-
+   * Stop the given container
+   */
+  public void stopContainer(int index) {
+    getContainer(index).stop();
+
+    logger.info("Stopped container " + getContainerDescription(index));
+  }
+
+  /**
+   * Stop all containers specified by the given indexes
+   */
+  public void stopContainers(ArrayList<Integer> indexes) {
+    for (int index : indexes)
+      stopContainer(index);
+  }
+
+  /**
-  public void removeContainer(int index) {
-    stopContainer(index);
-    containers.remove(index);
-    installs.remove(index);
-  }
-
-   * Runs {@link #clean} on all containers
-   */
-  public void cleanUp() throws IOException {
-    for (int i = 0; i < numContainers(); i++)
-      clean(i);
-  }
-
-  /**
-   * Deletes the configuration directory for the specified container
-   */
-  private void clean(int index) throws IOException {
-    ContainerInstall install = getContainerInstall(index);
-
-    String baseLogFilePath = new File("cargo_logs").getAbsolutePath();
-    String configLogFolderPath = baseLogFilePath + "/configs/";
-
-    File configDir = new File(getContainer(index).getConfiguration().getHome());
-    File configLogDir = new File(configLogFolderPath + configDir.getName());
-
-    if (configDir.exists()) {
-      configLogDir.mkdirs();
-
-      logger.info("Configuration in " + configDir.getAbsolutePath());
-      FileUtils.copyDirectory(configDir, configLogDir);
-      logger.info("Copied configuration to " + configLogDir.getAbsolutePath());
-      logger.info("Deleting configuration folder " + configDir.getAbsolutePath());
-      FileUtils.deleteDirectory(configDir);
-    }
-  }
-
-  private String getUniqueContainerDescription(int index) {
-    return getUniqueContainerDescription(index, getContainerInstall(index));
-  }
-
-  /**
-   * Get a human readable unique container description for container storage.
+   * Set the name of the current test
-   * Unique descriptions currently are generated by joining
-   * {@link ContainerInstall#getContainerDescription()}, the index passed in, {@link #testName}, and
-   * the {@link System#nanoTime()} with '_' characters
+   * Used for debugging so that log files can be easily identified.
-  private String getUniqueContainerDescription(int index, ContainerInstall install) {
-    return String.join("_", Arrays.asList(install.getContainerDescription(),
-        Integer.toString(index), testName, Long.toString(System.nanoTime())));
+  public void setTestName(String testName) {
+    this.testName = testName;
+  }
+
+  /**
+   * Get the positions of the containers with the given container state
+   *
+   * @param state A string representing the Cargo state a container is in. The possible states can
+   *        be found in as static variables in the {@link State} class.
+   */
+  public ArrayList<Integer> getContainerIndexesWithState(String state) {
+    ArrayList<Integer> indexes = new ArrayList<>();
+    for (int i = 0; i < numContainers(); i++) {
+      if (state.equals(State.STARTED.toString()) || state.equals(State.STOPPED.toString())
+          || state.equals(State.STARTED.toString()) || state.equals(State.STOPPING.toString())
+          || state.equals(State.UNKNOWN.toString())) {
+        if (getContainer(i).getState().toString().equals(state))
+          indexes.add(i);
+      } else
+        throw new IllegalArgumentException(
+            "State must be one of the 5 specified cargo state strings (stopped, started, starting, stopping, or unknown). State given was: "
+                + state);
+    }
+    return indexes;
+  }
+
+  /**
+   * Return the cargo container of all of the containers in the given state
+   */
+  public ArrayList<ServerContainer> getContainersWithState(String state) {
+    ArrayList<ServerContainer> statedContainers = new ArrayList<>();
+    for (int index : getContainerIndexesWithState(state))
+      statedContainers.add(getContainer(index));
+    return statedContainers;
+  }
+
+  /**
+   * Get the port of the container at the given index
+   */
+  public String getContainerPort(int index) {
+    return getContainer(index).getPort();
+  }
+
+  /**
+   * Get the container at the given index
+   */
+  public ServerContainer getContainer(int index) {
+    return containers.get(index);
+  }
+
+  /**
+   * Get a human readable unique description for the container (calls
+   * {@link ServerContainer#toString()})
+   */
+  public String getContainerDescription(int index) {
+    return getContainer(index).toString();
-  private InstalledLocalContainer addContainer(ContainerInstall install, int index)
-      throws IOException {
-    String uniqueName = getUniqueContainerDescription(index, install);
-
-    // Create the Cargo Container instance wrapping our physical container
-    LocalConfiguration configuration = (LocalConfiguration) new DefaultConfigurationFactory()
-        .createConfiguration(install.getContainerId(), ContainerType.INSTALLED,
-            ConfigurationType.STANDALONE, "/tmp/cargo_configs/" + uniqueName);
-    configuration.setProperty(GeneralPropertySet.LOGGING, install.getLoggingLevel());
-
-    install.modifyConfiguration(configuration);
-
-    File gemfireLogFile = new File("cargo_logs/gemfire_modules/" + uniqueName);
-    gemfireLogFile.getParentFile().mkdirs();
-    install.setSystemProperty("log-file", gemfireLogFile.getAbsolutePath());
-    logger.info("Gemfire logs in " + gemfireLogFile.getAbsolutePath());
-
-    // Removes secureRandom generation so that container startup is much faster
-    configuration.setProperty(GeneralPropertySet.JVMARGS,
-        "-Djava.security.egd=file:/dev/./urandom");
-
-    // Statically deploy WAR file for servlet
-    WAR war = install.getDeployableWAR();
-    war.setContext("");
-    configuration.addDeployable(war);
-    logger.info("Deployed WAR file at " + war.getFile());
-
-    // Create the container, set it's home dir to where it was installed, and set the its output log
-    InstalledLocalContainer container = (InstalledLocalContainer) (new DefaultContainerFactory())
-        .createContainer(install.getContainerId(), ContainerType.INSTALLED, configuration);
-
-    container.setHome(install.getInstallPath());
+  private ServerContainer addContainer(ContainerInstall install, int index) throws IOException {
+    ServerContainer container = install.generateContainer(testName + "_" + index);
-    installs.add(index, install);
+
+  /**
+   * Get the indexes of all active containers
+   */
+  private ArrayList<Integer> getActiveContainerIndexes() {
+    return getContainerIndexesWithState(State.STARTED.toString());
+  }
+
+  /**
+   * Get all active containers
+   */
+  private ArrayList<ServerContainer> getActiveContainers() {
+    return getContainersWithState(State.STARTED.toString());
+  }
+
+  /**
+   * Get the indexes of all inactive containers
+   */
+  private ArrayList<Integer> getInactiveContainerIndexes() {
+    ArrayList<Integer> indexes = getContainerIndexesWithState(State.STOPPED.toString());
+    indexes.addAll(getContainerIndexesWithState(State.UNKNOWN.toString()));
+    return indexes;
+  }
+
+  /**
+   * Get all inactive containers
+   */
+  private ArrayList<ServerContainer> getInactiveContainers() {
+    ArrayList<ServerContainer> inactiveContainers =
+        getContainersWithState(State.STOPPED.toString());
+    inactiveContainers.addAll(getContainersWithState(State.UNKNOWN.toString()));
+    return inactiveContainers;
+  }

MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD74 UPD43 INS8 INS29 INS8 INS29 INS29 INS74 UPD83 MOV43 INS42 MOV44 MOV8 INS29 UPD43 UPD83 MOV43 UPD42 MOV44 UPD43 INS29 INS29 UPD83 UPD74 INS29 INS29 UPD74 MOV74 UPD43 UPD42 MOV54 MOV21 INS65 MOV21 MOV21 INS65 INS65 INS65 MOV43 INS43 INS65 UPD42 UPD42 INS65 INS65 UPD43 INS65 INS65 UPD43 UPD42 MOV8 INS66 INS66 UPD66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS74 UPD66 MOV32 INS66 UPD66 UPD66 MOV32 UPD43 INS66 INS66 UPD42 INS66 INS66 UPD42 UPD74 MOV74 INS32 INS21 MOV27 MOV32 INS42 MOV43 INS43 UPD42 MOV42 UPD42 UPD42 UPD42 INS32 UPD43 INS32 INS42 MOV32 MOV42 UPD45 UPD45 MOV32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV27 UPD42 UPD42 MOV42 MOV42 UPD42 INS42 UPD45 UPD42 INS27 INS45 MOV32 UPD45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL41 DEL8 DEL31 DEL41 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL14 DEL53 DEL25 DEL8 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL32 DEL40 DEL40 DEL32 DEL11 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL36 DEL42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74