GEODE-3870: move region entry classes to new entries package (#972)

* Move Region Entries into entries package
* Move NonLocalRegionEntry back to internal.cache package
* Regenerate region entry classes from Linux

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.entries;
+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.CachedDeserializableFactory;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.FilterProfile;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.ImageState;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.InternalCacheEvent;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.RegionClearedException;
+import org.apache.geode.internal.cache.RegionEntry;
+import org.apache.geode.internal.cache.RegionEntryContext;
+import org.apache.geode.internal.cache.RegionQueue;
+import org.apache.geode.internal.cache.TXManagerImpl;
+import org.apache.geode.internal.cache.TimestampedEntryEventImpl;
+import org.apache.geode.internal.cache.Token;
+import org.apache.geode.internal.cache.TombstoneService;
-  protected void setLastModified(long lastModified) {
+  public void setLastModified(long lastModified) {
-        entry.value = cd.getDeserializedForReading();
+        entry.setValue(cd.getDeserializedForReading());
-          entry.value = tmp;
+          entry.setValue(tmp);
-            entry.value = hdos;
+            entry.setValue(hdos);
-      entry.value = v;
+      entry.setValue(v);
-        entry.value = hdos;
+        entry.setValue(hdos);
-      if (region.concurrencyChecksEnabled && !removeRecoveredEntry
+      if (region.isConcurrencyChecksEnabled() && !removeRecoveredEntry
-  static boolean checkExpectedOldValue(@Unretained Object expectedOldValue,
+  public static boolean checkExpectedOldValue(@Unretained Object expectedOldValue,
-            verbose.append(
-                "processing tag for key " + getKey() + ", stamp=" + stamp.asVersionTag() + ", tag=")
-                .append(tag);
+            verbose.append("processing tag for key ").append(getKey()).append(", stamp=")
+                .append(stamp.asVersionTag()).append(", tag=").append(tag);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD83 INS83 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS32 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 MOV32 MOV42 MOV42 INS45 DEL40 DEL7 DEL40 DEL42 DEL7 DEL40 DEL42 DEL7 DEL40 DEL42 DEL7 DEL40 DEL42 DEL7 DEL40 DEL45 DEL45 DEL45 DEL27