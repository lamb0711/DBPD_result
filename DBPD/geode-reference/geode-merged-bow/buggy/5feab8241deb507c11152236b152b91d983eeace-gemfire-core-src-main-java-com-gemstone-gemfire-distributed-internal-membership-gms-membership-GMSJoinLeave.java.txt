GEODE-77: avoids creating a split-brain if joining times out and network partition detection is not enabled

-    boolean hasContactedALocator;
+    int locatorsContacted = 0;
+    boolean hasContactedAJoinedLocator;
+      long locatorWaitTime = services.getConfig().getLocatorWaitTime() * 1000;
+      long locatorGiveUpTime = startTime + locatorWaitTime;
-          if (System.currentTimeMillis() > giveupTime) {
+          long now = System.currentTimeMillis();
+          if (state.locatorsContacted <= 0) {
+            if (now > locatorGiveUpTime) {
+              // break out of the loop and return false
+              break;
+            }
+            // reset the tries count and timer since we haven't actually tried to join yet
+            tries = 0;
+            giveupTime = now + timeout;
+          } else if (System.currentTimeMillis() > giveupTime) {
-      if (!this.isJoined && state.hasContactedALocator) {
+      if (!this.isJoined && state.hasContactedAJoinedLocator) {
-    // TODO - should we try more than one preferred coordinator
-    // before jumping to asking view-members who the coordinator is?
-    if ( !state.alreadyTried.isEmpty() && state.view != null) {
+    // If we've already tried to bootstrap from locators that
+    // haven't joined the system (e.g., a collocated locator)
+    // then jump to using the membership view to try to find
+    // the coordinator
+    if ( !state.hasContactedAJoinedLocator && state.view != null) {
-    long waitTime = services.getConfig().getLocatorWaitTime() * 1000;
-    if (waitTime <= 0) {
-      waitTime = services.getConfig().getMemberTimeout() * 2;
-    }
-    long giveUpTime = System.currentTimeMillis() + waitTime;
+    
+    long giveUpTime = System.currentTimeMillis() + services.getConfig().getLocatorWaitTime() * 1000;
+    
+
+    state.hasContactedAJoinedLocator = false;
+    state.locatorsContacted = 0;
-          if (response != null && response.getCoordinator() != null) {
-            anyResponses = true;
-            NetView v = response.getView();
-            int viewId = v == null? -1 : v.getViewId();
-            if (viewId > state.viewId) {
-              // if the view has changed it is possible that a member
-              // that we already tried to join with will become coordinator
-              state.alreadyTried.clear();
-              state.viewId = viewId;
-              state.view = v;
-              state.registrants.clear();
-              if (response.getRegistrants() != null) {
-                state.registrants.addAll(response.getRegistrants());
-              }
+          // TODO we don't want to give up on the locators if we receive
+          // a response from a locator that's joined the system.  Otherwise
+          // we'll give up and cause a split-brain
+          if (response != null) {
+            state.locatorsContacted++;
+            if (response.getSenderId() != null && response.getSenderId().getVmViewId() >= 0) {
+              state.hasContactedAJoinedLocator = true;
-            coordinators.add(response.getCoordinator());
-            if (!flagsSet) {
-              flagsSet = true;
-              inheritSettingsFromLocator(addr, response);
+            if (response.getCoordinator() != null) {
+              anyResponses = true;
+              NetView v = response.getView();
+              int viewId = v == null? -1 : v.getViewId();
+              if (viewId > state.viewId) {
+                // if the view has changed it is possible that a member
+                // that we already tried to join with will become coordinator
+                state.alreadyTried.clear();
+                state.viewId = viewId;
+                state.view = v;
+                state.registrants.clear();
+                if (response.getRegistrants() != null) {
+                  state.registrants.addAll(response.getRegistrants());
+                }
+              }
+              coordinators.add(response.getCoordinator());
+              if (!flagsSet) {
+                flagsSet = true;
+                inheritSettingsFromLocator(addr, response);
+              }
-      if (coordinators.isEmpty()) {
-        return false;
-      }
-      if (!anyResponses) {
-        try { Thread.sleep(1000); } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          return false;
-        }
-      }
+    if (coordinators.isEmpty()) {
+      return false;
+    }
+

INS23 INS39 INS59 INS21 MOV21 MOV25 INS42 INS34 UPD42 INS7 INS60 INS60 UPD42 INS27 INS40 INS9 INS40 INS34 INS39 INS59 INS39 INS59 INS40 MOV32 MOV27 INS42 INS27 INS42 INS27 UPD40 INS32 INS34 INS42 INS42 INS8 INS32 INS42 INS60 INS25 INS25 INS42 INS42 INS39 INS59 INS27 INS8 MOV25 MOV27 INS8 INS42 INS32 INS40 INS34 INS25 INS21 INS21 INS21 INS25 MOV25 INS42 INS42 INS27 MOV8 INS7 INS7 INS37 INS27 INS8 MOV27 INS42 INS42 INS10 INS42 INS34 INS42 INS27 INS40 INS27 INS27 INS21 INS42 INS42 INS32 INS33 INS32 INS34 INS7 INS42 INS42 INS32 INS42 INS40 INS9 INS42 INS42 DEL40 DEL42 DEL32 DEL42 DEL34 DEL27 DEL8 DEL25 DEL39 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL38 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25