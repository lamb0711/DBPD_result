GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-import java.util.Arrays;
+import org.apache.geode.internal.cache.partitioned.Bucket;
- * 
-  private transient HashMap<InternalDistributedMember, RegionCommitList> msgMap = null; // Maps
-                                                                                        // receiver
-                                                                                        // Serializables
-                                                                                        // to
-                                                                                        // RegionCommitList
-                                                                                        // instances
+
+  // Maps receiver Serializables to RegionCommitList instances
+  private transient HashMap<InternalDistributedMember, RegionCommitList> msgMap = null;
+
-  private transient Set processingExceptions = Collections.EMPTY_SET;
+  private transient Set processingExceptions = Collections.emptySet();
-  /*
-   * /** this is set if this message should deserialize the WAN shadowKey sent by the sender. Sender
-   * will not send shadowKeys when there is a mix of 7.0 and 7.0.1 members
-   *
-   * private transient boolean shouldReadShadowKey; /** this is set if the sender has decided to
-   * send WAN shadowKey for 7.0.1 members
-   *
-   * private transient boolean shouldWriteShadowKey;
-   */
-  static public TXFarSideCMTracker getTracker() {
+  public static TXFarSideCMTracker getTracker() {
-  static public TXCommitMessage waitForMessage(Object id, DM dm) {
+  public static TXCommitMessage waitForMessage(Object id, DM dm) {
-      Map<InternalDistributedMember, PersistentMemberID> persistentIds =
-          getPersistentIds(this.currentRegion.r);
-      this.currentRegion.persistentIds = persistentIds;
+      this.currentRegion.persistentIds = getPersistentIds(this.currentRegion.r);
-        this.msgMap = new HashMap<InternalDistributedMember, RegionCommitList>();
+        this.msgMap = new HashMap<>();
-      { // Now deal with each existing recipient that does not care
-        // about this region
-        Iterator<Map.Entry<InternalDistributedMember, RegionCommitList>> it =
-            this.msgMap.entrySet().iterator();
-        while (it.hasNext()) {
-          Map.Entry<InternalDistributedMember, RegionCommitList> me = it.next();
-          if (!s.contains(me.getKey())) {
-            RegionCommitList rcl = me.getValue();
-            RegionCommitList trimmedRcl = rcl.trim(this.currentRegion);
-            if (trimmedRcl != rcl) {
-              me.setValue(trimmedRcl);
-            }
+
+      // Now deal with each existing recipient that does not care
+      // about this region
+      Iterator<Map.Entry<InternalDistributedMember, RegionCommitList>> it =
+          this.msgMap.entrySet().iterator();
+      while (it.hasNext()) {
+        Map.Entry<InternalDistributedMember, RegionCommitList> me = it.next();
+        if (!s.contains(me.getKey())) {
+          RegionCommitList rcl = me.getValue();
+          RegionCommitList trimmedRcl = rcl.trim(this.currentRegion);
+          if (trimmedRcl != rcl) {
+            me.setValue(trimmedRcl);
-
-
-      return ((DistributedRegion) r).getCacheDistributionAdvisor().advisePersistentMembers();
+      return ((CacheDistributionAdvisee) r).getCacheDistributionAdvisor().advisePersistentMembers();
-      return Collections.EMPTY_MAP;
+      return Collections.emptyMap();
-
-
-    viewVersions.put(dr, Long.valueOf(version));
+    viewVersions.put(dr, version);
-        long newv = dr.getDistributionAdvisor().endOperation(viewVersion.longValue());
+        long newv = dr.getDistributionAdvisor().endOperation(viewVersion);
-        (processor == null) ? Collections.EMPTY_SET : processor.getCacheClosedMembers();
+        (processor == null) ? Collections.emptySet() : processor.getCacheClosedMembers();
-        (processor == null) ? Collections.EMPTY_SET : processor.getDepartedMembers();
+        (processor == null) ? Collections.emptySet() : processor.getDepartedMembers();
-    Set regionDistributionExceptions = Collections.EMPTY_SET;
-    Set failedRegionNames = Collections.EMPTY_SET;
+    Set regionDistributionExceptions = Collections.emptySet();
+    Set failedRegionNames = Collections.emptySet();
-      Set regionDestroyedMembers = (processor == null) ? Collections.EMPTY_SET
+      Set regionDestroyedMembers = (processor == null) ? Collections.emptySet()
-        if (regionDistributionExceptions == Collections.EMPTY_SET) {
+        if (regionDistributionExceptions == Collections.emptySet()) {
-
-  private final void setRecipientsSendData(Set recipients, ReplyProcessor21 processor,
+  private void setRecipientsSendData(Set recipients, ReplyProcessor21 processor,
-  protected final void addProcessingException(Exception e) {
+  protected void addProcessingException(Exception e) {
-    if (this.processingExceptions == Collections.EMPTY_SET || e instanceof CancelException) {
+    if (this.processingExceptions == Collections.emptySet() || e instanceof CancelException) {
-
-      GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying TXCommit");
+      InternalCache cache = GemFireCacheImpl.getExisting("Applying TXCommit");
+    // do this before CacheFactory.getInstance for bug 33471
-        LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE); // do this
-                                                                                     // before
-                                                                                     // CacheFactory.getInstance
-                                                                                     // for bug
-                                                                                     // 33471
+        LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
-          {
-            Iterator it = this.regions.iterator();
-            while (it.hasNext()) {
-              boolean failedBeginProcess = true;
-              RegionCommit rc = (RegionCommit) it.next();
-              try {
-                failedBeginProcess = !rc.beginProcess(dm, this.txIdent, txEvent);
-              } catch (CacheRuntimeException problem) {
-                processCacheRuntimeException(problem);
-              } finally {
-                if (failedBeginProcess) {
-                  rc.r = null; // Cause related FarSideEntryOps to skip processing
-                  it.remove(); // Skip endProcessing as well
-                }
+          Iterator it = this.regions.iterator();
+          while (it.hasNext()) {
+            boolean failedBeginProcess = true;
+            RegionCommit rc = (RegionCommit) it.next();
+            try {
+              failedBeginProcess = !rc.beginProcess(dm, this.txIdent, txEvent);
+            } catch (CacheRuntimeException problem) {
+              processCacheRuntimeException(problem);
+            } finally {
+              if (failedBeginProcess) {
+                rc.r = null; // Cause related FarSideEntryOps to skip processing
+                it.remove(); // Skip endProcessing as well
-    {
-      List<EntryEventImpl> pendingCallbacks = new ArrayList<>(this.farSideEntryOps.size());
-      Collections.sort(this.farSideEntryOps);
-      Iterator it = this.farSideEntryOps.iterator();
-      while (it.hasNext()) {
-        try {
-          RegionCommit.FarSideEntryOp entryOp = (RegionCommit.FarSideEntryOp) it.next();
-          entryOp.process(pendingCallbacks);
-        } catch (CacheRuntimeException problem) {
-          processCacheRuntimeException(problem);
-        } catch (Exception e) {
-          addProcessingException(e);
-        }
+    List<EntryEventImpl> pendingCallbacks = new ArrayList<>(this.farSideEntryOps.size());
+    Collections.sort(this.farSideEntryOps);
+    Iterator it = this.farSideEntryOps.iterator();
+    while (it.hasNext()) {
+      try {
+        RegionCommit.FarSideEntryOp entryOp = (RegionCommit.FarSideEntryOp) it.next();
+        entryOp.process(pendingCallbacks);
+      } catch (CacheRuntimeException problem) {
+        processCacheRuntimeException(problem);
+      } catch (Exception e) {
+        addProcessingException(e);
-      firePendingCallbacks(pendingCallbacks);
+    firePendingCallbacks(pendingCallbacks);
-    StringBuffer result = new StringBuffer(256);
+    StringBuilder result = new StringBuilder(256);
-   * @param msgSet
-   * 
-   * @param other
-  public final static class RegionCommitList extends ArrayList<RegionCommit> {
+  public static class RegionCommitList extends ArrayList<RegionCommit> {
-      StringBuffer result = new StringBuffer(256);
+      StringBuilder result = new StringBuilder(256);
-
-
-      StringBuffer result = new StringBuffer(64);
+      StringBuilder result = new StringBuilder(64);
-          DataSerializer.writeString(((BucketRegion) this.r).getPartitionedRegion().getFullPath(),
-              out);
+          DataSerializer.writeString(((Bucket) this.r).getPartitionedRegion().getFullPath(), out);
-       * @throws ClassNotFoundException
-  final Object getTrackerKey() {
+  Object getTrackerKey() {
-  final boolean dontProcess() {
+  boolean dontProcess() {
-  final void setDontProcess() {
+  void setDontProcess() {
-  final boolean isProcessing() {
+  boolean isProcessing() {
-  private final void setIsProcessing(boolean isProcessing) {
+  private void setIsProcessing(boolean isProcessing) {
-  final boolean wasProcessed() {
+  boolean wasProcessed() {
-  final void setProcessed(boolean wasProcessed) {
+  void setProcessed(boolean wasProcessed) {
-  /********************* Region Commit Process Messages ***************************************/
-
-  static final public class CommitProcessForLockIdMessage extends CommitProcessMessage {
+  public static class CommitProcessForLockIdMessage extends CommitProcessMessage {
-      StringBuffer result = new StringBuffer(128);
+      StringBuilder result = new StringBuilder(128);
-  static final public class CommitProcessForTXIdMessage extends CommitProcessMessage {
+  public static class CommitProcessForTXIdMessage extends CommitProcessMessage {
-      StringBuffer result = new StringBuffer(128);
+      StringBuilder result = new StringBuilder(128);
-  static abstract public class CommitProcessMessage extends PooledDistributionMessage {
-    protected final void basicProcess(final TXCommitMessage mess, final DistributionManager dm) {
+
+  public abstract static class CommitProcessMessage extends PooledDistributionMessage {
+    protected void basicProcess(final TXCommitMessage mess, final DistributionManager dm) {
-  /********************* Commit Process Query Message ***************************************/
-
-   *
-  static final public class CommitProcessQueryMessage extends PooledDistributionMessage {
+  public static class CommitProcessQueryMessage extends PooledDistributionMessage {
-      StringBuffer result = new StringBuffer(128);
+      StringBuilder result = new StringBuilder(128);
-  static final public class CommitProcessQueryReplyMessage extends ReplyMessage {
+  public static class CommitProcessQueryReplyMessage extends ReplyMessage {
-      StringBuffer result = new StringBuffer(128);
+      StringBuilder result = new StringBuilder(128);
-  static final public class CommitProcessQueryReplyProcessor extends ReplyProcessor21 {
+  public static class CommitProcessQueryReplyProcessor extends ReplyProcessor21 {
-    final protected boolean canStopWaiting() {
+    protected boolean canStopWaiting() {
-    final public boolean receivedACommitProcessMessage() {
+    public boolean receivedACommitProcessMessage() {
-  public void memberJoined(InternalDistributedMember id) {}
+  public void memberJoined(InternalDistributedMember id) {
+    // do nothing
+  }
-  // /** Custom subclass that keeps all ReplyExceptions */
-  // private class ReliableCommitReplyProcessor extends ReliableReplyProcessor21 {
-  //
-  // /** Set of members that threw CacheClosedExceptions */
-  // private Set cacheExceptions = new HashSet();
-  // /** key=region path, value=Set of members */
-  // private Map regionExceptions = new HashMap();
-  //
-  // public ReliableCommitReplyProcessor(DM dm,
-  // Set initMembers) {
-  // super(dm, initMembers);
-  // }
-  // protected synchronized void processException(DistributionMessage msg,
-  // ReplyException re) {
-  // // only interested in CommitReplyException
-  // if (re instanceof CommitReplyException) {
-  // CommitReplyException cre = (CommitReplyException) re;
-  // Set exceptions = cre.getExceptions();
-  // for (Iterator iter = exceptions.iterator(); iter.hasNext();) {
-  // Exception ex = (Exception) iter.next();
-  // if (ex instanceof CacheClosedException) {
-  // cacheExceptions.add(msg.getSender());
-  // }
-  // else if (ex instanceof RegionDestroyedException) {
-  // String r = ((RegionDestroyedException)ex).getRegionFullPath();
-  // Set members = (Set) regionExceptions.get(r);
-  // if (members == null) {
-  // members = new HashSet();
-  // regionExceptions.put(r, members);
-  // }
-  // members.add(msg.getSender());
-  // }
-  // }
-  // }
-  // else {
-  // // allow superclass to handle all other exceptions
-  // super.processException(msg, re);
-  // }
-  // }
-  // // these two accessors should be called after wait for replies completes
-  // protected Set getCacheClosedMembers() {
-  // return this.cacheExceptions;
-  // }
-  // protected Set getRegionDestroyedMembers(String regionFullPath) {
-  // Set members = (Set) this.regionExceptions.get(regionFullPath);
-  // if (members == null) {
-  // members = Collections.EMPTY_SET;
-  // }
-  // return members;
-  // }
-  // }
-
-        return Collections.EMPTY_SET;
+        return Collections.emptySet();
-        return Collections.EMPTY_SET;
+        return Collections.emptySet();
-     * 
-     * @param msgMap
-        StringBuffer errorMessage = new StringBuffer("Incomplete commit of transaction ").append(id)
-            .append(".  Caused by the following exceptions: ");
+        StringBuilder errorMessage = new StringBuilder("Incomplete commit of transaction ")
+            .append(id).append(".  Caused by the following exceptions: ");
-        members = Collections.EMPTY_SET;
+        members = Collections.emptySet();
-     * 
-     * @param member
-     * @param exceptions

MOV26 UPD40 MOV31 UPD83 UPD83 UPD83 UPD83 MOV8 MOV8 MOV8 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS32 INS25 MOV21 MOV60 MOV51 MOV25 MOV60 MOV60 MOV78 UPD83 UPD42 UPD83 UPD42 INS42 INS42 MOV27 MOV8 MOV43 MOV43 MOV8 UPD43 MOV21 MOV25 MOV8 MOV42 INS32 INS32 MOV60 MOV60 MOV25 MOV60 MOV25 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 UPD43 MOV12 MOV8 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS54 MOV60 MOV25 INS25 MOV21 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS32 INS32 UPD43 INS32 MOV8 MOV8 MOV21 MOV27 INS8 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS21 UPD42 MOV42 MOV21 MOV32 UPD42 MOV42 MOV52 UPD42 UPD42 MOV45 MOV22 INS42 INS42 UPD74 UPD43 MOV42 INS32 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD43 UPD42 MOV21 INS21 UPD43 INS42 UPD42 INS32 UPD42 INS42 INS42 DEL40 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL25 DEL8 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL83 DEL83 DEL40 DEL54 DEL8 DEL8 DEL42 DEL65 DEL42 DEL65 DEL83 DEL42 DEL65 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL40 DEL40 DEL42 DEL65 DEL40 DEL42 DEL65 DEL42 DEL65