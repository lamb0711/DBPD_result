Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * If a member is added/removed proxy factory is responsible for creating
- * removing the corresponding proxies for that member.
+ * If a member is added/removed proxy factory is responsible for creating removing the corresponding
+ * proxies for that member.
- * It also maintains a proxy repository {@link MBeanProxyInfoRepository} for
- * quick access to the proxy instances
+ * It also maintains a proxy repository {@link MBeanProxyInfoRepository} for quick access to the
+ * proxy instances
-  private static final Logger logger = LogService.getLogger();  
+  private static final Logger logger = LogService.getLogger();
-  public MBeanProxyFactory(RemoteFilterChain remoteFilterChain,
-      MBeanJMXAdapter jmxAdapter, SystemManagementService service) {
+  public MBeanProxyFactory(RemoteFilterChain remoteFilterChain, MBeanJMXAdapter jmxAdapter,
+      SystemManagementService service) {
-   * @param member
-   *          {@link org.apache.geode.distributed.DistributedMember}
-   * @param objectName
-   *          {@link javax.management.ObjectName} of the Bean
-   * @param monitoringRegion
-   *          monitoring region containing the proxies
+   * @param member {@link org.apache.geode.distributed.DistributedMember}
+   * @param objectName {@link javax.management.ObjectName} of the Bean
+   * @param monitoringRegion monitoring region containing the proxies
-      Region<String, Object> monitoringRegion,Object newVal) {
+      Region<String, Object> monitoringRegion, Object newVal) {
-       * Check the complete filter chain to evaluate the applicability of the
-       * MBean
+       * Check the complete filter chain to evaluate the applicability of the MBean
-          .classFromName(((FederationComponent) monitoringRegion
-              .get(objectName.toString())).getMBeanInterfaceClass());
+          .classFromName(((FederationComponent) monitoringRegion.get(objectName.toString()))
+              .getMBeanInterfaceClass());
-      Object object = MBeanProxyInvocationHandler.newProxyInstance(member,
-          monitoringRegion, objectName, interfaceClass);
+      Object object = MBeanProxyInvocationHandler.newProxyInstance(member, monitoringRegion,
+          objectName, interfaceClass);
-      
+
-      
-      service.afterCreateProxy(objectName, interfaceClass, object, (FederationComponent)newVal);      
-      
+
+      service.afterCreateProxy(objectName, interfaceClass, object, (FederationComponent) newVal);
+
-      }     
-      
+      }
+
-   * This method will create all the proxies for a given DistributedMember. It
-   * does not throw any exception to its caller. It handles the error and logs
-   * error messages
+   * This method will create all the proxies for a given DistributedMember. It does not throw any
+   * exception to its caller. It handles the error and logs error messages
-   * @param member
-   *          {@link org.apache.geode.distributed.DistributedMember}
-   * @param monitoringRegion
-   *          monitoring region containing the proxies
+   * @param member {@link org.apache.geode.distributed.DistributedMember}
+   * @param monitoringRegion monitoring region containing the proxies
-  public void createAllProxies(DistributedMember member,
-      Region<String, Object> monitoringRegion) {
+  public void createAllProxies(DistributedMember member, Region<String, Object> monitoringRegion) {
-     * Check for member and server group filters if the member is filtered no
-     * need to proceed further
+     * Check for member and server group filters if the member is filtered no need to proceed
+     * further
-        createProxy(member, objectName, monitoringRegion, monitoringRegion
-            .get(objectName.toString()));
+        createProxy(member, objectName, monitoringRegion,
+            monitoringRegion.get(objectName.toString()));
-          logger.warn("Create Proxy failed for {} with exception {}", objectName, e.getMessage(), e);
+        logger.warn("Create Proxy failed for {} with exception {}", objectName, e.getMessage(), e);
-   * @param member
-   *          {@link org.apache.geode.distributed.DistributedMember}
-   * @param monitoringRegion
-   *          monitoring region containing the proxies
+   * 
+   * @param member {@link org.apache.geode.distributed.DistributedMember}
+   * @param monitoringRegion monitoring region containing the proxies
-   * @param member
-   *          {@link org.apache.geode.distributed.DistributedMember}
-   * @param objectName
-   *          {@link javax.management.ObjectName} of the Bean
+   * @param member {@link org.apache.geode.distributed.DistributedMember}
+   * @param objectName {@link javax.management.ObjectName} of the Bean
-  public void removeProxy(DistributedMember member, ObjectName objectName,
-      Object oldVal) {
+  public void removeProxy(DistributedMember member, ObjectName objectName, Object oldVal) {
-          service.afterRemoveProxy(objectName, proxyInfo.getProxyInterface(), proxyInfo.getProxyInstance(),
-              (FederationComponent)oldVal);
+          service.afterRemoveProxy(objectName, proxyInfo.getProxyInterface(),
+              proxyInfo.getProxyInstance(), (FederationComponent) oldVal);
-        
-        if (logger.isDebugEnabled())  {
+
+        if (logger.isDebugEnabled()) {
-      }     
+      }
-  public void updateProxy(ObjectName objectName, ProxyInfo proxyInfo, Object newObject, Object oldObject) {
+  public void updateProxy(ObjectName objectName, ProxyInfo proxyInfo, Object newObject,
+      Object oldObject) {
-        service.afterUpdateProxy(objectName, interfaceClass, proxyInfo.getProxyInstance(),(FederationComponent)newObject, (FederationComponent)oldObject);
+        service.afterUpdateProxy(objectName, interfaceClass, proxyInfo.getProxyInstance(),
+            (FederationComponent) newObject, (FederationComponent) oldObject);
-   * Find a particular proxy instance for a {@link javax.management.ObjectName}
-   * , {@link org.apache.geode.distributed.DistributedMember} and interface
-   * class If the proxy interface does not implement the given interface class a
-   * {@link java.lang.ClassCastException}. will be thrown
+   * Find a particular proxy instance for a {@link javax.management.ObjectName} ,
+   * {@link org.apache.geode.distributed.DistributedMember} and interface class If the proxy
+   * interface does not implement the given interface class a {@link java.lang.ClassCastException}.
+   * will be thrown
-   * @param objectName
-   *          {@link javax.management.ObjectName} of the MBean
-   * @param interfaceClass
-   *          interface class implemented by proxy
+   * @param objectName {@link javax.management.ObjectName} of the MBean
+   * @param interfaceClass interface class implemented by proxy
-  public <T> T findProxy(ObjectName objectName,
-      Class<T> interfaceClass) {
+  public <T> T findProxy(ObjectName objectName, Class<T> interfaceClass) {
-      return proxyRepo.findProxyByName(objectName, interfaceClass);
-   
+    return proxyRepo.findProxyByName(objectName, interfaceClass);
+
-  
+
-   * Find a set of proxies given a
-   * {@link org.apache.geode.distributed.DistributedMember}
+   * Find a set of proxies given a {@link org.apache.geode.distributed.DistributedMember}
-   * @param member
-   *          {@link org.apache.geode.distributed.DistributedMember}
+   * @param member {@link org.apache.geode.distributed.DistributedMember}
-
-   * @param objectName
-   *          {@link javax.management.ObjectName} of the MBean
+   * 
+   * @param objectName {@link javax.management.ObjectName} of the MBean
-    ProxyInterface proxyObj = findProxy(objectName,
-        ProxyInterface.class);
+    ProxyInterface proxyObj = findProxy(objectName, ProxyInterface.class);

MOV65 UPD66 UPD66 UPD66 UPD66 UPD65 UPD65 INS66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 INS42 UPD66 INS66 DEL66 DEL42