GEODE-77 improved suspect processing, multicast fix for Windows

GMSHealthMonitor was allowing the service to watch itself if it ran out of other members to watch.  This change set modifies that behavior to set the "next neighbor" to null, causing suspect processing to halt until a member transitions out of "suspect" state or a new membership view is installed.

I also found that GMSHealthMonitor wasn't notifying the Manager when a member goes into final-check state, so that membership listeners weren't being notified of suspect events.  This was causing a unit test failure.

JGroupsMessenger now fools the JGroups stack into thinking an IPv4 stack is being used even if IPv6 is available, so that JGroups will use an IPv4 address.  JGroups was selecting an IPv6 address, making communications with IPv4 members impossible and causing a schizm between the GemFire member address and the JGroups address.

The JGroups log level is now set to WARN in the default log4j2.xml settings file.

+  
+  /** this member's ID */
+  private InternalDistributedMember localAddress;
-    if (currentSuspects.remove(sender)) {
-      logger.info("No longer suspecting {}", sender);
-    }
+    if (currentSuspects.remove(sender)) {
+      logger.info("No longer suspecting {}", sender);
+      setNextNeighbor(currentView, null);
+    }
-      InternalDistributedMember neighbour = nextNeighbor;
+      
+      InternalDistributedMember neighbour = nextNeighbor;
+      
-          String reason = String.format("Member isn't responding to check message: %s", mbr);
+          String reason = "Member isn't responding to health checks";
-          logger.trace("Setting next neighbour as member {} has not responded.", mbr);
+          logger.trace("Setting next neighbor as member {} has not responded.", mbr);
-      nextTo = services.getJoinLeave().getMemberID();
+      nextTo = localAddress;
+    
+    Set<?> checkAllSuspected = new HashSet<>(allMembers);
+    checkAllSuspected.removeAll(currentSuspects);
+    checkAllSuspected.remove(localAddress);
+    if (checkAllSuspected.isEmpty() && allMembers.size() > 1) {
+      logger.info("All other members are suspect at this point");
+      nextNeighbor = null;
+      return;
+    }
+    
+    
+    if (nextNeighbor != null && nextNeighbor.equals(localAddress)) {
+      nextNeighbor = null;
+    }
-
+    this.localAddress = services.getMessenger().getMemberID();
+  public void memberSuspected(InternalDistributedMember initiator, InternalDistributedMember suspect) {
+  }
+
+  @Override
-    InternalDistributedMember me = services.getMessenger().getMemberID();
+    InternalDistributedMember me = localAddress;
-    InternalDistributedMember localAddress = services.getJoinLeave().getMemberID();
-
-        logger.info("received suspect message from {}: {}",
-           sender, req.getReason());
+        logger.info("received suspect message from {} for {}: {}",
+           sender, req.getSuspectMember(), req.getReason());
-      doFinalCheck(sMembers, cv, localAddress);
+      doFinalCheck(sender, sMembers, cv, localAddress);
-        doFinalCheck(smbr, cv, localAddress);
+        doFinalCheck(sender, smbr, cv, localAddress);
-  private void doFinalCheck(List<SuspectRequest> sMembers, NetView cv, InternalDistributedMember localAddress) {
+  private void doFinalCheck(final InternalDistributedMember initiator,
+      List<SuspectRequest> sMembers, NetView cv, InternalDistributedMember localAddress) {
-        logger.debug("Doing final check for member {}; reason={}", mbr, reason);
+        logger.debug("Scheduling final check for member {}; reason={}", mbr, reason);
+              services.memberSuspected(initiator, mbr);
-              logger.info("Membership: Doing final check for suspect member {}", mbr);
+              logger.info("Performing final check for suspect member {} reason={}", mbr, reason);

INS23 INS31 INS29 INS83 INS43 INS59 MOV25 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS65 INS42 INS42 MOV60 INS60 INS21 INS21 INS25 INS25 INS21 INS42 INS43 INS42 MOV43 INS42 INS83 INS43 INS42 INS66 INS74 INS59 INS32 INS32 INS27 INS8 INS27 INS8 INS7 INS42 MOV43 MOV8 INS42 INS21 INS43 INS76 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS21 INS21 INS41 INS27 INS32 INS21 INS22 MOV32 INS42 INS32 INS42 INS74 INS42 INS42 INS42 INS32 INS34 INS32 INS7 INS42 INS33 INS42 INS42 INS42 INS7 INS52 INS42 INS8 INS42 INS42 INS33 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS33 INS42 INS33 UPD42 INS42 INS70 INS21 INS42 INS44 INS32 INS8 INS32 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 UPD45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 UPD45 INS21 INS32 INS42 INS42 INS42 INS42 UPD45 INS42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8