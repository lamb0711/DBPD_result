GEODE-2367: Lucene indexes do not handle ha scenarios

* Added afterSecondary callback to partition listener to allow cleaning up
  of the index repo when the bucket losses primary
* Added lock prior to creating the bucket indexes to prevent multiple index
  writers from being available at a time
* Changed single point of lucene index creation, no longer creating on the fly

+import org.apache.geode.cache.partition.PartitionRegionHelper;
+import org.apache.geode.distributed.DistributedLockService;
+import org.apache.geode.internal.cache.PartitionedRegionHelper;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.logging.log4j.Logger;
+import org.jgroups.blocks.locking.LockService;
+  private static final Logger logger = LogService.getLogger();
+  public static final String FILE_REGION_LOCK_FOR_BUCKET_ID = "FileRegionLockForBucketId:";
+
+    boolean success = false;
-    RegionDirectory dir =
-        new RegionDirectory(fileBucket, chunkBucket, indexForPR.getFileSystemStats());
-    IndexWriterConfig config = new IndexWriterConfig(indexForPR.getAnalyzer());
-    IndexWriter writer = new IndexWriter(dir, config);
-    repo = new IndexRepositoryImpl(fileBucket, writer, serializer, indexForPR.getIndexStats(),
-        dataBucket);
-    return repo;
+    if (!fileBucket.getBucketAdvisor().isPrimary()) {
+      throw new IOException("Not creating the index because we are not the primary");
+    }
+    DistributedLockService lockService =
+        DistributedLockService.getServiceNamed(PartitionedRegionHelper.PARTITION_LOCK_SERVICE_NAME);
+    String lockName = FILE_REGION_LOCK_FOR_BUCKET_ID + fileBucket.getFullPath() + bucketId;
+    if (lockService != null) {
+      // lockService will be null for testing at this point
+      lockService.lock(lockName, -1, -1);
+    }
+    try {
+      RegionDirectory dir =
+          new RegionDirectory(fileBucket, chunkBucket, indexForPR.getFileSystemStats());
+      IndexWriterConfig config = new IndexWriterConfig(indexForPR.getAnalyzer());
+      IndexWriter writer = new IndexWriter(dir, config);
+      repo = new IndexRepositoryImpl(fileBucket, writer, serializer, indexForPR.getIndexStats(),
+          dataBucket, lockService, lockName);
+      success = true;
+      return repo;
+    } finally {
+      if (!success) {
+        if (lockService != null) {
+          lockService.unlock(lockName);
+        }
+      }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS45 INS60 INS25 INS60 INS60 INS25 INS54 INS42 INS42 INS39 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS8 INS42 INS9 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS21 MOV60 MOV60 MOV60 MOV21 INS21 MOV41 INS25 INS32 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS7 INS38 INS8 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS38 INS38 INS42 INS9 INS42 INS25 INS42 INS34 INS34 INS42 INS42 INS27 INS8 INS42 INS33 INS21 INS32 INS42 INS42 INS42