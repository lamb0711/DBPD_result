GEODE-3637: Revert changes to client queue initialization

-  private static final int HANDSHAKER_DEFAULT_POOL_SIZE = 4;
-   * A pool used to process client-queue-initializations.
-   */
-  private final ThreadPoolExecutor clientQueueInitPool;
-
-  /**
-    pool = initializeServerConnectionThreadPool();
-    hsPool = initializeHandshakerThreadPool();
-    clientQueueInitPool = initializeClientQueueInitializerThreadPool();
+    {
+      ThreadPoolExecutor tmp_pool = null;
+      String gName = "ServerConnection "
+          // + serverSock.getInetAddress()
+          + "on port " + this.localPort;
+      final ThreadGroup socketThreadGroup = LoggingThreadGroup.createThreadGroup(gName, logger);
+
+      ThreadFactory socketThreadFactory = new ThreadFactory() {
+        int connNum = -1;
+
+        public Thread newThread(final Runnable command) {
+          int tnum;
+          synchronized (this) {
+            tnum = ++connNum;
+          }
+          String tName = socketThreadGroup.getName() + " Thread " + tnum;
+          getStats().incConnectionThreadsCreated();
+          Runnable r = new Runnable() {
+            public void run() {
+              try {
+                command.run();
+              } catch (CancelException e) { // bug 39463
+                // ignore
+              } finally {
+                ConnectionTable.releaseThreadsSockets();
+              }
+            }
+          };
+          return new Thread(socketThreadGroup, r, tName);
+        }
+      };
+      try {
+        if (isSelector()) {
+          tmp_pool = new PooledExecutorWithDMStats(new LinkedBlockingQueue(), this.maxThreads,
+              getStats().getCnxPoolHelper(), socketThreadFactory, Integer.MAX_VALUE);
+        } else {
+          tmp_pool = new ThreadPoolExecutor(MINIMUM_MAX_CONNECTIONS, this.maxConnections, 0L,
+              TimeUnit.MILLISECONDS, new SynchronousQueue(), socketThreadFactory);
+        }
+      } catch (IllegalArgumentException poolInitException) {
+        this.stats.close();
+        this.serverSock.close();
+        throw poolInitException;
+      }
+      this.pool = tmp_pool;
+    }
+    {
+      ThreadPoolExecutor tmp_hsPool = null;
+      String gName = "Handshaker " + serverSock.getInetAddress() + ":" + this.localPort;
+      final ThreadGroup socketThreadGroup = LoggingThreadGroup.createThreadGroup(gName, logger);
+
+      ThreadFactory socketThreadFactory = new ThreadFactory() {
+        int connNum = -1;
+
+        public Thread newThread(Runnable command) {
+          int tnum;
+          synchronized (this) {
+            tnum = ++connNum;
+          }
+          String tName = socketThreadGroup.getName() + " Thread " + tnum;
+          getStats().incAcceptThreadsCreated();
+          return new Thread(socketThreadGroup, command, tName);
+        }
+      };
+      try {
+        final BlockingQueue bq = new SynchronousQueue();
+        final RejectedExecutionHandler reh = new RejectedExecutionHandler() {
+          public void rejectedExecution(Runnable r, ThreadPoolExecutor pool) {
+            try {
+              bq.put(r);
+            } catch (InterruptedException ex) {
+              Thread.currentThread().interrupt(); // preserve the state
+              throw new RejectedExecutionException(
+                  LocalizedStrings.AcceptorImpl_INTERRUPTED.toLocalizedString(), ex);
+            }
+          }
+        };
+        tmp_hsPool = new ThreadPoolExecutor(1, HANDSHAKE_POOL_SIZE, 60, TimeUnit.SECONDS, bq,
+            socketThreadFactory, reh);
+      } catch (IllegalArgumentException poolInitException) {
+        this.stats.close();
+        this.serverSock.close();
+        this.pool.shutdownNow();
+        throw poolInitException;
+      }
+      this.hsPool = tmp_hsPool;
+    }
-  private ThreadPoolExecutor initializeHandshakerThreadPool() throws IOException {
-    String gName = "Handshaker " + serverSock.getInetAddress() + ":" + this.localPort;
-    final ThreadGroup socketThreadGroup = LoggingThreadGroup.createThreadGroup(gName, logger);
-
-    ThreadFactory socketThreadFactory = new ThreadFactory() {
-      AtomicInteger connNum = new AtomicInteger(-1);
-
-      @Override
-      public Thread newThread(Runnable command) {
-        String threadName = socketThreadGroup.getName() + " Thread " + connNum.incrementAndGet();
-        getStats().incAcceptThreadsCreated();
-        return new Thread(socketThreadGroup, command, threadName);
-      }
-    };
-    try {
-      final BlockingQueue blockingQueue = new SynchronousQueue();
-      final RejectedExecutionHandler rejectedExecutionHandler = new RejectedExecutionHandler() {
-        public void rejectedExecution(Runnable r, ThreadPoolExecutor pool) {
-          try {
-            blockingQueue.put(r);
-          } catch (InterruptedException ex) {
-            Thread.currentThread().interrupt(); // preserve the state
-            throw new RejectedExecutionException(
-                LocalizedStrings.AcceptorImpl_INTERRUPTED.toLocalizedString(), ex);
-          }
-        }
-      };
-      logger.warn("Handshaker max Pool size: " + HANDSHAKE_POOL_SIZE);
-      return new ThreadPoolExecutor(1, HANDSHAKE_POOL_SIZE, 60, TimeUnit.SECONDS, blockingQueue,
-          socketThreadFactory, rejectedExecutionHandler);
-    } catch (IllegalArgumentException poolInitException) {
-      this.stats.close();
-      this.serverSock.close();
-      this.pool.shutdownNow();
-      throw poolInitException;
-    }
-  }
-
-  private ThreadPoolExecutor initializeClientQueueInitializerThreadPool() throws IOException {
-    final ThreadGroup clientQueueThreadGroup =
-        LoggingThreadGroup.createThreadGroup("Client Queue Initialization ", logger);
-
-    ThreadFactory clientQueueThreadFactory = new ThreadFactory() {
-      AtomicInteger connNum = new AtomicInteger(-1);
-
-      @Override
-      public Thread newThread(final Runnable command) {
-        String threadName =
-            clientQueueThreadGroup.getName() + " Thread " + connNum.incrementAndGet();
-        Runnable runnable = new Runnable() {
-          public void run() {
-            try {
-              command.run();
-            } catch (CancelException e) {
-              logger.debug("Client Queue Initialization was canceled.", e);
-            }
-          }
-        };
-        return new Thread(clientQueueThreadGroup, runnable, threadName);
-      }
-    };
-    return new PooledExecutorWithDMStats(new SynchronousQueue(), 16, getStats().getCnxPoolHelper(),
-        clientQueueThreadFactory, 60000);
-  }
-
-  private ThreadPoolExecutor initializeServerConnectionThreadPool() throws IOException {
-    String gName = "ServerConnection "
-        // + serverSock.getInetAddress()
-        + "on port " + this.localPort;
-    final ThreadGroup socketThreadGroup = LoggingThreadGroup.createThreadGroup(gName, logger);
-
-    ThreadFactory socketThreadFactory = new ThreadFactory() {
-      AtomicInteger connNum = new AtomicInteger(-1);
-
-      @Override
-      public Thread newThread(final Runnable command) {
-        String tName = socketThreadGroup.getName() + " Thread " + connNum.incrementAndGet();
-        getStats().incConnectionThreadsCreated();
-        Runnable r = new Runnable() {
-          public void run() {
-            try {
-              command.run();
-            } catch (CancelException e) { // bug 39463
-              // ignore
-            } finally {
-              ConnectionTable.releaseThreadsSockets();
-            }
-          }
-        };
-        return new Thread(socketThreadGroup, r, tName);
-      }
-    };
-    try {
-      if (isSelector()) {
-        return new PooledExecutorWithDMStats(new LinkedBlockingQueue(), this.maxThreads,
-            getStats().getCnxPoolHelper(), socketThreadFactory, Integer.MAX_VALUE);
-      } else {
-        return new ThreadPoolExecutor(MINIMUM_MAX_CONNECTIONS, this.maxConnections, 0L,
-            TimeUnit.MILLISECONDS, new SynchronousQueue(), socketThreadFactory);
-      }
-    } catch (IllegalArgumentException poolInitException) {
-      this.stats.close();
-      this.serverSock.close();
-      throw poolInitException;
-    }
-  }
-
-  private static final int HANDSHAKE_POOL_SIZE = Integer
-      .getInteger("BridgeServer.HANDSHAKE_POOL_SIZE", HANDSHAKER_DEFAULT_POOL_SIZE).intValue();
+  private static final int HANDSHAKE_POOL_SIZE =
+      Integer.getInteger("BridgeServer.HANDSHAKE_POOL_SIZE", 4).intValue();
-    if (emergencyClassesLoaded) {
+    if (emergencyClassesLoaded)
-    }
-    if (!WORKAROUND_SELECTOR_BUG) {
+    if (!WORKAROUND_SELECTOR_BUG)
-    }
-      if (sc == null) {
+      if (sc == null)
-      }
+          // zeroEventsCount++;
+          // if (zeroEventsCount > 0) {
+          // zeroEventsCount = 0;
+
+          // try {
+          // this.selector.close(); // this selector is sick!
+          // } catch (IOException ignore) {
+          // }
+          // this.selector = Selector.open();
+          // {
+          // Iterator it = selectorRegistrations.iterator();
+          // while (it.hasNext()) {
+          // ServerConnection sc = (ServerConnection)it.next();
+          // sc.registerWithSelector2(this.selector);
+          // }
+          // }
+          // }
+          // ArrayList al = new ArrayList();
+          // Iterator keysIt = this.selector.keys().iterator();
+          // while (keysIt.hasNext()) {
+          // SelectionKey sk = (SelectionKey)keysIt.next();
+          // al.add(sk.attachment());
+          // sk.cancel();
+          // }
+          // events = this.selector.selectNow();
+          // Iterator alIt = al.iterator();
+          // while (alIt.hasNext()) {
+          // ServerConnection sc = (ServerConnection)alIt.next();
+          // sc.registerWithSelector2(this.selector);
+          // }
+          // events = this.selector.select();
+          // } else {
+          // zeroEventsCount = 0;
+                // } else if (key.isValid() && key.isConnectable()) {
+                // logger.info("DEBUG isConnectable and isValid key=" + key);
+                // finishCon(sc);
+                  // } else {
+                  // logger.info("DEBUG !isValid key=" + key);
-  public boolean isNotifyBySubscription() {
-    return notifyBySubscription;
-  }
-
-    // GEODE-3637 - If the communicationMode is client Subscriptions, hand-off the client queue
-    // initialization to be done in another threadPool
-    if (initializeClientPools(socket, communicationMode)) {
+    if (communicationMode.isSubscriptionFeed()) {
+      boolean primary = communicationMode == CommunicationMode.PrimaryServerToClient;
+      logger.debug(":Bridge server: Initializing {} server-to-client communication socket: {}",
+          primary ? "primary" : "secondary", socket);
+      AcceptorImpl.this.clientNotifier.registerClient(socket, primary, this.acceptorId,
+          this.notifyBySubscription);
-  private boolean initializeClientPools(Socket socket, CommunicationMode communicationMode) {
-    if (communicationMode.isSubscriptionFeed()) {
-      boolean isPrimaryServerToClient =
-          communicationMode == CommunicationMode.PrimaryServerToClient;
-      clientQueueInitPool
-          .execute(new ClientQueueInitializerTask(socket, isPrimaryServerToClient, this));
-      return true;
-    }
-    return false;
-  }
-
+   *
+   *
-
-  private class ClientQueueInitializerTask implements Runnable {
-    private final Socket socket;
-    private final boolean isPrimaryServerToClient;
-    private final AcceptorImpl acceptor;
-
-    public ClientQueueInitializerTask(Socket socket, boolean isPrimaryServerToClient,
-        AcceptorImpl acceptor) {
-      this.socket = socket;
-      this.acceptor = acceptor;
-      this.isPrimaryServerToClient = isPrimaryServerToClient;
-    }
-
-    @Override
-    public void run() {
-      logger.info(":Bridge server: Initializing {} server-to-client communication socket: {}",
-          isPrimaryServerToClient ? "primary" : "secondary", socket);
-      try {
-        acceptor.getCacheClientNotifier().registerClient(socket, isPrimaryServerToClient,
-            acceptor.getAcceptorId(), acceptor.isNotifyBySubscription());
-      } catch (IOException ex) {
-        closeSocket(socket);
-        if (isRunning()) {
-          if (!acceptor.loggedAcceptError) {
-            acceptor.loggedAcceptError = true;
-            if (ex instanceof SocketTimeoutException) {
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION_DUE_TO_SOCKET_TIMEOUT));
-            } else {
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION__0,
-                  ex), ex);
-            }
-          }
-        }
-      }
-    }
-  }

INS8 INS8 INS60 MOV60 MOV60 INS60 INS54 INS21 INS60 MOV60 MOV60 INS60 INS54 MOV21 INS41 INS41 MOV32 INS8 MOV43 INS59 MOV43 INS59 INS8 MOV12 INS7 MOV43 INS59 MOV43 INS59 INS8 MOV12 INS34 INS60 INS21 INS21 MOV41 INS42 INS33 INS42 INS14 INS25 INS22 INS42 INS42 INS33 INS42 INS14 INS60 INS60 MOV21 INS22 INS42 INS18 INS39 INS59 INS32 INS32 MOV43 INS1 MOV32 INS8 INS8 INS52 INS42 MOV43 INS1 INS83 MOV43 INS59 INS83 MOV43 INS59 INS52 INS42 INS42 MOV27 INS42 INS42 INS45 INS16 INS42 INS22 UPD42 MOV42 MOV42 INS42 INS22 INS22 INS23 INS31 MOV21 INS21 INS23 INS31 INS42 MOV14 INS42 INS14 UPD42 INS14 INS42 INS45 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS39 INS59 INS83 MOV43 INS42 MOV44 INS8 INS7 INS39 INS59 INS83 MOV43 INS42 MOV44 INS8 MOV43 INS1 MOV43 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 MOV38 INS60 INS51 INS60 MOV21 MOV60 MOV41 UPD42 MOV14 INS42 MOV14 INS42 MOV38 INS60 INS51 INS60 MOV21 INS41 INS31 INS39 INS59 INS52 INS8 MOV43 INS59 INS39 INS59 INS52 INS8 MOV43 INS59 INS14 INS83 INS39 INS42 MOV44 MOV44 INS8 INS42 INS21 INS42 INS27 INS42 INS21 INS42 INS27 MOV43 INS42 INS42 INS42 INS54 INS7 MOV32 INS45 INS42 INS7 MOV32 INS45 INS42 INS8 MOV12 INS42 INS38 INS42 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL83 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL83 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL34 DEL42 DEL34 DEL40 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL34 DEL42 DEL32 DEL42 DEL32 DEL42 DEL34 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL38 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL41 DEL8 DEL41 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42 DEL41 DEL8 DEL41 DEL8 DEL18 DEL8 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL14 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL16 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL40 DEL38 DEL40 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31 DEL55