GEODE-915: fix FORCE_INVALIDATE_EVENT
  - new unit test ClientServerForceInvalidateDUnitTest
  - ProxyRegionMap now checks for force invalidate before it throws EntryNotFound
  - AbstractRegionMap invalidate now does force invalidate unless the region is not initialized

As part of the work also did the following code cleanup work:
1. Removed the isInvalidate parameter from shouldCreateCBEvent since this method did the exact same thing all values of this parameter.
2. Changed cacheWriteBeforeInvalidate to be serverInvalidate since all this method does is possibly send the invalidate to the server.
3. EntryEventImpl toString will now include inhibitCacheListenerNotification if it is true
4. Removed the unused parameter invokeCallbacks and forceNewEntry from serverInvalidate

-              boolean invokeCallbacks = shouldCreateCBEvent(owner, false/*isInvalidate*/, isRegionReady || inRI);
+              boolean invokeCallbacks = shouldCreateCBEvent(owner, isRegionReady || inRI);
-                    boolean invokeCallbacks = shouldCreateCBEvent(owner, false, isRegionReady || inRI);
+                    boolean invokeCallbacks = shouldCreateCBEvent(owner, isRegionReady || inRI);
-              boolean invokeCallbacks = shouldCreateCBEvent(owner, false, isRegionReady || inRI);
+              boolean invokeCallbacks = shouldCreateCBEvent(owner, isRegionReady || inRI);
+   * If the region is not initialized then callbacks will not be done.
+   * This property only applies to non-transactional invalidates.
+   * Transactional invalidates ignore this property.
+   * Note that empty "proxy" regions on a client will not be sent invalidates
+   * from the server unless they also set the proxy InterestPolicy to ALL.
+   * If the invalidate is not sent then this property will not cause a listener 
+   * on that client to be notified of the invalidate.
+   * A non-empty "caching-proxy" will receive invalidates from the server.
-  void forceInvalidateEvent(EntryEventImpl event) {
+  static void forceInvalidateEvent(EntryEventImpl event, LocalRegion owner) {
-      event.invokeCallbacks(_getOwner(), false, false);
+      event.invokeCallbacks(owner, false, false);
-
+    boolean ownerIsInitialized = owner.isInitialized();
+    try {
-                      forceInvalidateEvent(event);
-                      owner.cacheWriteBeforeInvalidate(event, invokeCallbacks, forceNewEntry);
+                      owner.serverInvalidate(event);
-                  event.inhibitCacheListenerNotification(true);
+                  if (!FORCE_INVALIDATE_EVENT) {
+                    event.inhibitCacheListenerNotification(true);
+                  }
-                owner.cacheWriteBeforeInvalidate(event, invokeCallbacks, forceNewEntry);
+                owner.serverInvalidate(event);
-                  if (!owner.isInitialized() && owner.getDataPolicy().withReplication()) {
+                  ownerIsInitialized = owner.isInitialized();
+                  if (!ownerIsInitialized && owner.getDataPolicy().withReplication()) {
-            if (!owner.isInitialized()) {
+            ownerIsInitialized = owner.isInitialized();
+            if (!ownerIsInitialized) {
-                owner.cacheWriteBeforeInvalidate(event, true, false);
+                owner.serverInvalidate(event);
-                  forceInvalidateEvent(event);
-                  owner.cacheWriteBeforeInvalidate(event, invokeCallbacks, forceNewEntry);
+                  owner.serverInvalidate(event);
-            forceInvalidateEvent(event);
+    } finally {
+      if (ownerIsInitialized) {
+        forceInvalidateEvent(event, owner);
+      }
+    }
-                    boolean invokeCallbacks = shouldCreateCBEvent(owner, true, owner.isInitialized());
+                    boolean invokeCallbacks = shouldCreateCBEvent(owner, owner.isInitialized());
-                boolean invokeCallbacks = shouldCreateCBEvent( owner, true /* isInvalidate */, owner.isInitialized());
+                boolean invokeCallbacks = shouldCreateCBEvent( owner, owner.isInitialized());
-                boolean invokeCallbacks = shouldCreateCBEvent(owner, true, owner.isInitialized());
+                boolean invokeCallbacks = shouldCreateCBEvent(owner, owner.isInitialized());
-    boolean invokeCallbacks = shouldCreateCBEvent(owner, false /*isInvalidate*/, isRegionReady);
+    boolean invokeCallbacks = shouldCreateCBEvent(owner, isRegionReady);
-      final boolean isInvalidate, final boolean isInitialized)
+      final boolean isInitialized)
-    if (isInvalidate) { // ignore shouldNotifyGatewayHub check for invalidates
-      return (isPartitioned || isInitialized)
+    return (isPartitioned || isInitialized)
-    } else {
-      return (isPartitioned || isInitialized)
-          && (lr.shouldDispatchListenerEvent()
-            || lr.shouldNotifyBridgeClients()
-            || lr.getConcurrencyChecksEnabled());
-    }

INS83 INS44 MOV8 INS43 INS42 INS60 INS54 MOV60 MOV60 MOV25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS39 INS59 INS8 INS8 INS42 INS32 MOV60 MOV25 MOV21 MOV54 MOV41 INS25 INS42 INS42 INS42 INS8 UPD42 MOV42 INS21 INS32 INS42 INS42 INS42 INS21 INS7 INS42 MOV32 INS42 INS8 INS25 UPD42 INS21 INS38 MOV8 INS7 INS42 INS42 MOV32 INS42 UPD42 UPD42 UPD42 DEL9 DEL9 DEL9 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL9 DEL9 DEL9 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL41 DEL8 DEL25 DEL8