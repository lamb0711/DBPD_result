GEODE-835: replace geode-joptsimple with jopt-simple dependency

* remove geode-joptsimple module
* add dependency on jopt-simple 5.0.1
* wrap value of --J option with quotes
* create tests OptionJFormatterTest, CommentSkipHelperTest, GfshParserIntegrationTest
* invalid arguments are silently ignored
* This closes #162 [klund@apache.org]

+
-  private final static Short EXACT_TARGET     = (short)0;
-  private final static Short MATCHING_TARGETS = (short)1;
+  private final static Short EXACT_TARGET = (short) 0;
+  private final static Short MATCHING_TARGETS = (short) 1;
+
+   *
-  public int complete(String buffer, int cursor,
-      List<String> completionCandidates) {
+  public int complete(String buffer, int cursor, List<String> completionCandidates) {
+   *
-  public int completeAdvanced(String buffer, int cursor,
-      List<Completion> completionCandidates) {
+  public int completeAdvanced(String buffer, int cursor, List<Completion> completionCandidates) {
-    if (cursor <= buffer.length() - 1
-        && !PreprocessorUtils.containsOnlyWhiteSpaces(buffer.substring(cursor))
-        || (ParserUtils.contains(buffer, SyntaxConstants.COMMAND_DELIMITER))) {
+    if (cursor <= buffer.length() - 1 && !PreprocessorUtils.containsOnlyWhiteSpaces(buffer.substring(cursor)) || (ParserUtils
+                                                                                                                    .contains(buffer, SyntaxConstants.COMMAND_DELIMITER))) {
-          completionCandidates.add(new Completion(padding + commandTarget
-              .getGfshMethodTarget().getKey()));
+          completionCandidates.add(new Completion(padding + commandTarget.getGfshMethodTarget().getKey()));
-          if (simpleTrim.getString().length() >= commandTarget
-              .getGfshMethodTarget().getKey().length()) {
+          if (simpleTrim.getString().length() >= commandTarget.getGfshMethodTarget().getKey().length()) {
-            return completeParameters(commandTarget, desiredCursorPosition
-                + commandTarget.getGfshMethodTarget().getKey().length(),
-                commandTarget.getGfshMethodTarget().getRemainingBuffer(),
-                cursor, completionCandidates);
+            return completeParameters(commandTarget, desiredCursorPosition + commandTarget.getGfshMethodTarget()
+                                                                                          .getKey()
+                                                                                          .length(), commandTarget.getGfshMethodTarget()
+                                                                                                                  .getRemainingBuffer(), cursor, completionCandidates);
-            completionCandidates.add(new Completion(padding + commandTarget
-                .getGfshMethodTarget().getKey()));
+            completionCandidates.add(new Completion(padding + commandTarget.getGfshMethodTarget().getKey()));
-  private void updateCompletionCandidates(
-      List<Completion> completionCandidates, String buffer, int position) {
+  private void updateCompletionCandidates(List<Completion> completionCandidates, String buffer, int position) {
-      completionCandidates.add(new Completion(buffer.substring(0, position)
-          + completion.getValue(), completion.getFormattedValue(), completion
-          .getHeading(), completion.getOrder()));
+      completionCandidates.add(new Completion(buffer.substring(0, position) + completion.getValue(), completion.getFormattedValue(), completion
+        .getHeading(), completion.getOrder()));
-  private int completeParameters(CommandTarget commandTarget, int cursorStart,
-      String remainingBuffer, int cursor, List<Completion> completionCandidates) {
+  private int completeParameters(CommandTarget commandTarget,
+                                 int cursorStart,
+                                 String remainingBuffer,
+                                 int cursor,
+                                 List<Completion> completionCandidates) {
-            if (getAllPossibleValuesForParameter(completionCandidates,
-                argument, userOptionSet.getValue(argument),
-                commandTarget.getGfshMethodTarget())) {
+            if (getAllPossibleValuesForParameter(completionCandidates, argument, userOptionSet.getValue(argument), commandTarget
+              .getGfshMethodTarget())) {
-                  modifyCompletionCandidates(completionCandidates,
-                      argumentSeparator,
-                      userOptionSet.getValue(argument));
+                  modifyCompletionCandidates(completionCandidates, argumentSeparator, userOptionSet.getValue(argument));
-            }else{
+            } else {
-              desiredCursorPosition += userOptionSet.getValue(argument).length()
-                  + argumentSeparator.length();
+              desiredCursorPosition += userOptionSet.getValue(argument).length() + argumentSeparator.length();
-              if (getAllPossibleValuesForParameter(completionCandidates,
-                  argument, null, commandTarget.getGfshMethodTarget())) {
+              if (getAllPossibleValuesForParameter(completionCandidates, argument, null, commandTarget.getGfshMethodTarget())) {
-                getAllPossibleValuesForParameter(completionCandidates,
-                    argument, null, commandTarget.getGfshMethodTarget());
+                getAllPossibleValuesForParameter(completionCandidates, argument, null, commandTarget.getGfshMethodTarget());
-              modifyCompletionCandidates(completionCandidates,
-                  argumentSeparator, (String[]) null);
+              modifyCompletionCandidates(completionCandidates, argumentSeparator, (String[]) null);
-            String argMessage = argument.getArgumentName() +
-                ((argument.getHelp() != null && !argument.getHelp()
-                    .equals("")) ? ": " + argument.getHelp() : "");
+            String argMessage = argument.getArgumentName() + ((argument.getHelp() != null && !argument.getHelp()
+                                                                                                      .equals("")) ? ": " + argument
+              .getHelp() : "");
-              string = StringUtils.removeStart(string,
-                  SyntaxConstants.LONG_OPTION_SPECIFIER);
+              string = StringUtils.removeStart(string, SyntaxConstants.LONG_OPTION_SPECIFIER);
-              string = StringUtils.removeEnd(string,
-                  SyntaxConstants.OPTION_VALUE_SPECIFIER);
+              string = StringUtils.removeEnd(string, SyntaxConstants.OPTION_VALUE_SPECIFIER);
-                  desiredCursorPosition += /* space */1
-                      + SyntaxConstants.LONG_OPTION_SPECIFIER.length()
-                      + option.getLongOption().length();
+                  desiredCursorPosition += /* space */1 + SyntaxConstants.LONG_OPTION_SPECIFIER.length() + option.getLongOption()
+                                                                                                                 .length();
-                      desiredCursorPosition += /* space */1
-                          + SyntaxConstants.LONG_OPTION_SPECIFIER.length()
-                          + optionSynonym.length();
+                      desiredCursorPosition += /* space */1 + SyntaxConstants.LONG_OPTION_SPECIFIER.length() + optionSynonym
+                        .length();
-              if (!endsWithOptionSpecifiers(userOptionSet.getUserInput())
-                  && getAllPossibleValuesForParameter(completionCandidates,
-                      option, value, commandTarget.getGfshMethodTarget())) {
+              if (!endsWithOptionSpecifiers(userOptionSet.getUserInput()) && getAllPossibleValuesForParameter(completionCandidates, option, value, commandTarget
+                .getGfshMethodTarget())) {
-                  if (PreprocessorUtils.isSyntaxValid(value)
-                      && bufferEndsWithValueSeparator) {
+                  if (PreprocessorUtils.isSyntaxValid(value) && bufferEndsWithValueSeparator) {
-                    } else if(value.startsWith("\n")){
+                    } else if (value.startsWith("\n")) {
-                    }else{
+                    } else {
-            lengthToBeAdded = value.substring(0,
-                (lastIndexOf > 0 ? lastIndexOf : value.length())).length();
+            lengthToBeAdded = value.substring(0, (lastIndexOf > 0 ? lastIndexOf : value.length())).length();
-              desiredCursorPosition += /* value specifier length */SyntaxConstants.OPTION_VALUE_SPECIFIER
-                  .length()
-                  + lengthToBeAdded
-                  + ((considerLastValue) ? value.length() - lengthToBeAdded : 0);
+              desiredCursorPosition += /* value specifier length */SyntaxConstants.OPTION_VALUE_SPECIFIER.length() + lengthToBeAdded + ((considerLastValue) ? value
+                                                                                                                                                                .length() - lengthToBeAdded : 0);
-              if (getAllPossibleValuesForParameter(completionCandidates,
-                  option, null, commandTarget.getGfshMethodTarget())) {
+              if (getAllPossibleValuesForParameter(completionCandidates, option, null, commandTarget.getGfshMethodTarget())) {
-                  modifyCompletionCandidates(completionCandidates,
-                      SyntaxConstants.OPTION_VALUE_SPECIFIER,
-                      new String[] { null });
+                  modifyCompletionCandidates(completionCandidates, SyntaxConstants.OPTION_VALUE_SPECIFIER, new String[] {
+                    null
+                  });
-              }else{
+              } else {
-              userOptString = StringUtils.removeStart(userOptString,
-                  SyntaxConstants.LONG_OPTION_SPECIFIER);
-              if (option.getLongOption().startsWith(userOptString)
-                  && !userOptString.equals("")
-                  && !option.getLongOption().equals(userOptString)
-                  && !optionsPresentMap.containsKey(userOptString)) {
-                                
-                completionCandidates.add(new Completion(" "
-                    + SyntaxConstants.LONG_OPTION_SPECIFIER
-                    + option.getLongOption(), option.getLongOption(), "", 0));
-              }else{
+              userOptString = StringUtils.removeStart(userOptString, SyntaxConstants.LONG_OPTION_SPECIFIER);
+              if (option.getLongOption()
+                        .startsWith(userOptString) && !userOptString.equals("") && !option.getLongOption()
+                                                                                          .equals(userOptString) && !optionsPresentMap
+                .containsKey(userOptString)) {
+
+                completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption(), option
+                  .getLongOption(), "", 0));
+              } else {
-                  if (optionSynonym.startsWith(userOptString)
-                      && !userOptString.equals("")
-                      && !optionSynonym.equals(userOptString)) {
-                    completionCandidates.add(new Completion(" "
-                        + SyntaxConstants.LONG_OPTION_SPECIFIER
-                        + optionSynonym, optionSynonym, "", 0));
+                  if (optionSynonym.startsWith(userOptString) && !userOptString.equals("") && !optionSynonym.equals(userOptString)) {
+                    completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + optionSynonym, optionSynonym, "", 0));
-        String optionMsg = warningOption.getLongOption() +
-            ((warningOption.getHelp() != null && !warningOption.getHelp()
-            .equals("")) ? ": " + warningOption.getHelp() : "");
+        String optionMsg = warningOption.getLongOption() + ((warningOption.getHelp() != null && !warningOption.getHelp()
+                                                                                                              .equals("")) ? ": " + warningOption
+          .getHelp() : "");
-        completionCandidates.add(new Completion(
-            SyntaxConstants.OPTION_VALUE_SPECIFIER, "", null, 0));
+        completionCandidates.add(new Completion(SyntaxConstants.OPTION_VALUE_SPECIFIER, "", null, 0));
-    int newCursor = desiredCursorPosition
-        + ((userOptionSet != null) ? userOptionSet.getNoOfSpacesRemoved() : 0);
+    int newCursor = desiredCursorPosition + ((userOptionSet != null) ? userOptionSet.getNoOfSpacesRemoved() : 0);
-      subString = remainingBuffer.substring(
-          newCursor + (sizeReduced ? -1 : 0) - cursorStart).trim();
+      subString = remainingBuffer.substring(newCursor + (sizeReduced ? -1 : 0) - cursorStart).trim();
-    
+
-    if (coe != null
-        && newCursor < cursor
-        && completionCandidates.size() == 0
-        && !(PreprocessorUtils.containsOnlyWhiteSpaces(subString) || ((subString
-            .endsWith(SyntaxConstants.LONG_OPTION_SPECIFIER) && subString
-            .startsWith(SyntaxConstants.LONG_OPTION_SPECIFIER)) || (subString
-            .startsWith(SyntaxConstants.SHORT_OPTION_SPECIFIER) && subString
-            .endsWith(SyntaxConstants.SHORT_OPTION_SPECIFIER))))) {
+    if (coe != null && newCursor < cursor && completionCandidates.size() == 0 && !(PreprocessorUtils.containsOnlyWhiteSpaces(subString) || ((subString
+                                                                                                                                               .endsWith(SyntaxConstants.LONG_OPTION_SPECIFIER) && subString
+                                                                                                                                               .startsWith(SyntaxConstants.LONG_OPTION_SPECIFIER)) || (subString
+                                                                                                                                                                                                         .startsWith(SyntaxConstants.SHORT_OPTION_SPECIFIER) && subString
+                                                                                                                                                                                                         .endsWith(SyntaxConstants.SHORT_OPTION_SPECIFIER))))) {
-        
+
-          completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption(),
-              option.getLongOption(), "", 0));
+          completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption(), option
+            .getLongOption(), "", 0));
-          completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption(),
-              option.getLongOption(), "", 0));
+          completionCandidates.add(new Completion(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption(), option
+            .getLongOption(), "", 0));
-  private List<Option> getUnspecifiedOptionsWithMode(List<Option> unspecifiedOptions, CommandTarget commandTarget,
-      Map<String, Option> optionsPresentMap) {
-                 
+  private List<Option> getUnspecifiedOptionsWithMode(List<Option> unspecifiedOptions,
+                                                     CommandTarget commandTarget,
+                                                     Map<String, Option> optionsPresentMap) {
+
-      
+
-      CommandMode defaultMode = CommandModes.getInstance().getCommandMode(commandTarget.getCommandName(),
-          CommandModes.DEFAULT_MODE);      
+      CommandMode defaultMode = CommandModes.getInstance()
+                                            .getCommandMode(commandTarget.getCommandName(), CommandModes.DEFAULT_MODE);
-          if (option.getLongOption().equals(opt))
+          if (option.getLongOption().equals(opt)) {
+          }
-      
+
-                if (option.getLongOption().equals(opt))
+                if (option.getLongOption().equals(opt)) {
+                }
-          break;          
+          break;
-      
-      if(leadOptionFound)
+
+      if (leadOptionFound) {
-      
-      if(optionsPresentMap.isEmpty()) {
+      }
+
+      if (optionsPresentMap.isEmpty()) {
-            if (option2.getLongOption().equals(cmd2.leadOption))
+            if (option2.getLongOption().equals(cmd2.leadOption)) {
+            }
-    } else
-        return unspecifiedOptions;           
+    } else {
+      return unspecifiedOptions;
+    }
-  private void checkOptionSetForValidCommandModes(OptionSet userOptionSet,
- CommandTarget commandTarget)
-      throws CliCommandMultiModeOptionException {
+  private void checkOptionSetForValidCommandModes(OptionSet userOptionSet, CommandTarget commandTarget)
+    throws CliCommandMultiModeOptionException {
-    Collection<CommandMode> cmodes = modes.getCommandModes(commandTarget.getCommandName());    
-    
+    Collection<CommandMode> cmodes = modes.getCommandModes(commandTarget.getCommandName());
+
-        if (userOptions.containsKey(cmd.leadOption))
+        if (userOptions.containsKey(cmd.leadOption)) {
+        }
-          throw new CliCommandMultiModeOptionException(commandTarget, userOptions.get(cmd.leadOption), sb.toString(),
-              CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS);
+          throw new CliCommandMultiModeOptionException(commandTarget, userOptions.get(cmd.leadOption), sb.toString(), CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS);
-          if (!isDefaultOption(opt.getLongOption(),defaultMode)) {
+          if (!isDefaultOption(opt.getLongOption(), defaultMode)) {
-            if(modeDetected.options.length>0) {
+            if (modeDetected.options.length > 0) {
-                  isOptionFromDetectedMode = true;                
+                  isOptionFromDetectedMode = true;
-              if (!isOptionFromDetectedMode)
-                throw new CliCommandMultiModeOptionException(commandTarget, opt, opt.getLongOption(),
-                    CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES);
-            }            
+              if (!isOptionFromDetectedMode) {
+                throw new CliCommandMultiModeOptionException(commandTarget, opt, opt.getLongOption(), CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES);
+              }
+            }
-    for(String str : commandMode.options){
-      if(longOption.equals(str))
+    for (String str : commandMode.options) {
+      if (longOption.equals(str)) {
+      }
-    if (userInput.endsWith(" "+SyntaxConstants.LONG_OPTION_SPECIFIER)
-        || userInput.endsWith(" "+SyntaxConstants.SHORT_OPTION_SPECIFIER)) {
+    if (userInput.endsWith(" " + SyntaxConstants.LONG_OPTION_SPECIFIER) || userInput.endsWith(" " + SyntaxConstants.SHORT_OPTION_SPECIFIER)) {
-  private boolean perfectMatch(List<Completion> completionCandidates,
-      String... argumentValue) {
+  private boolean perfectMatch(List<Completion> completionCandidates, String... argumentValue) {
-        if (completion.getValue().equals(
-            argumentValue[argumentValue.length - 1])) {
+        if (completion.getValue().equals(argumentValue[argumentValue.length - 1])) {
-  private void modifyCompletionCandidates(
-      List<Completion> completionCandidates, String prefix,
-      String... existingData) {
+  private void modifyCompletionCandidates(List<Completion> completionCandidates,
+                                          String prefix,
+                                          String... existingData) {
-  private void modifyCompletionCandidates(
-      List<Completion> completionCandidates, String prefix, boolean endsWithValueSeparator,
-      String... existingData) {
+  private void modifyCompletionCandidates(List<Completion> completionCandidates,
+                                          String prefix,
+                                          boolean endsWithValueSeparator,
+                                          String... existingData) {
-          if (existingData[existingData.length - 1] != null
-              && (!value.startsWith(existingData[existingData.length - 1])
-                  && !endsWithValueSeparator)) {
+          if (existingData[existingData.length - 1] != null && (!value.startsWith(existingData[existingData.length - 1]) && !endsWithValueSeparator)) {
-        completionCandidates.add(new Completion(prefix + completion.getValue(),
-            completion.getValue(), "", 0));
+        completionCandidates.add(new Completion(prefix + completion.getValue(), completion.getValue(), "", 0));
-  private boolean getAllPossibleValuesForParameter(
-      List<Completion> completionCandidates, Parameter parameter,
-      String existingData, GfshMethodTarget gfshMethodTarget) {
+  private boolean getAllPossibleValuesForParameter(List<Completion> completionCandidates,
+                                                   Parameter parameter,
+                                                   String existingData,
+                                                   GfshMethodTarget gfshMethodTarget) {
-      parameter.setConverter(commandManager.getConverter(
-          parameter.getDataType(), parameter.getContext()));
+      parameter.setConverter(commandManager.getConverter(parameter.getDataType(), parameter.getContext()));
-        ((MultipleValueConverter) converter).getAllPossibleValues(
-            completionCandidates,
-            parameter.getDataType(),
-            ParserUtils.splitValues(existingData, valueSeparator),
-            parameter.getContext(),
-            new MethodTarget(gfshMethodTarget.getMethod(), gfshMethodTarget
-                .getTarget(), gfshMethodTarget.getRemainingBuffer(),
-                gfshMethodTarget.getKey()));
+        ((MultipleValueConverter) converter).getAllPossibleValues(completionCandidates, parameter.getDataType(), ParserUtils
+          .splitValues(existingData, valueSeparator), parameter.getContext(), new MethodTarget(gfshMethodTarget.getMethod(), gfshMethodTarget
+          .getTarget(), gfshMethodTarget.getRemainingBuffer(), gfshMethodTarget.getKey()));
-        converter.getAllPossibleValues(
-            completionCandidates,
-            parameter.getDataType(),
-            existingData,
-            parameter.getContext(),
-            new MethodTarget(gfshMethodTarget.getMethod(), gfshMethodTarget
-                .getTarget(), gfshMethodTarget.getRemainingBuffer(),
-                gfshMethodTarget.getKey()));
+        converter.getAllPossibleValues(completionCandidates, parameter.getDataType(), existingData, parameter.getContext(), new MethodTarget(gfshMethodTarget
+          .getMethod(), gfshMethodTarget.getTarget(), gfshMethodTarget.getRemainingBuffer(), gfshMethodTarget.getKey()));
-    if ((ParserUtils.contains(userInput, SyntaxConstants.COMMAND_DELIMITER) && StringUtils.endsWithIgnoreCase(
-        userInput, SyntaxConstants.COMMAND_DELIMITER))) {
+    if ((ParserUtils.contains(userInput, SyntaxConstants.COMMAND_DELIMITER) && StringUtils.endsWithIgnoreCase(userInput, SyntaxConstants.COMMAND_DELIMITER))) {
-    
+
-          handleCondition(CliStrings.format(
-              CliStrings.GFSHPARSER__MSG__AMBIGIOUS_COMMAND_0_FOR_ASSISTANCE_USE_1_OR_HINT_HELP, new Object[] {
-                  userInput, AbstractShell.completionKeys }), CommandProcessingException.COMMAND_NAME_AMBIGUOUS,
-              userInput);
+          handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__AMBIGIOUS_COMMAND_0_FOR_ASSISTANCE_USE_1_OR_HINT_HELP, new Object[] {
+            userInput, AbstractShell.completionKeys
+          }), CommandProcessingException.COMMAND_NAME_AMBIGUOUS, userInput);
-          
+
-          
+
-            parse = commandTarget.getOptionParser().parse(
-                gfshMethodTarget.getRemainingBuffer());
-          } catch (CliException ce) {            
+            // TODO: next call invokes OptionJFormatter
+            parse = commandTarget.getOptionParser().parse(gfshMethodTarget.getRemainingBuffer());
+          } catch (CliException ce) {
-          
+
-          
+
+          // TODO: next call throws when space before closing "
-          
+
-            parseResult = new GfshParseResult(gfshMethodTarget.getMethod(), gfshMethodTarget.getTarget(),
-                methodParameters, userInput, commandTarget.getCommandName() , paramValMap);
+            parseResult = new GfshParseResult(gfshMethodTarget.getMethod(), gfshMethodTarget.getTarget(), methodParameters, userInput, commandTarget
+              .getCommandName(), paramValMap);
-            if (coe != null) {              
+            if (coe != null) {
-                handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__INVALID_COMMAND_STRING_0, userInput),
-                    coe, CommandProcessingException.COMMAND_INVALID, userInput);
-              }              
+                handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__INVALID_COMMAND_STRING_0, userInput), coe, CommandProcessingException.COMMAND_INVALID, userInput);
+              }
-          
+
-                commandName, availabilityIndicator.getAvailabilityDescription() });
+              commandName, availabilityIndicator.getAvailabilityDescription()
+            });
-  private boolean processOptions(OptionSet parse, CommandTarget commandTarget, Map<String, String> paramValMap,
-      List<MethodParameter> parameters, boolean errorState) {
+  private boolean processOptions(OptionSet parse,
+                                 CommandTarget commandTarget,
+                                 Map<String, String> paramValMap,
+                                 List<MethodParameter> parameters,
+                                 boolean errorState) {
-          handleCondition(
-              CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_REQUIRED_FOR_OPTION_0, option.getLongOption()),
-              CommandProcessingException.OPTION_VALUE_REQUIRED, option.getLongOption());
+          handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_REQUIRED_FOR_OPTION_0, option.getLongOption()), CommandProcessingException.OPTION_VALUE_REQUIRED, option
+            .getLongOption());
-          handleCondition(
-              CliStrings.format(CliStrings.GFSHPARSER__MSG__COMMAND_OPTION_0_IS_REQUIRED_USE_HELP,
-                  option.getLongOption()), CommandProcessingException.REQUIRED_OPTION_MISSING,
-              option.getLongOption());
+          handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__COMMAND_OPTION_0_IS_REQUIRED_USE_HELP, option.getLongOption()), CommandProcessingException.REQUIRED_OPTION_MISSING, option
+            .getLongOption());
-      Object object = getConversionObject(option.getConverter(), value, option.getDataType(),
-          option.getContext(), valueSeparator);
+      Object object = getConversionObject(option.getConverter(), value, option.getDataType(), option.getContext(), valueSeparator);
-        handleCondition(
-            CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_0_IS_NOT_APPLICABLE_FOR_1,
-                new Object[] { value.trim(), option.getLongOption() }),
-            CommandProcessingException.OPTION_VALUE_INVALID, option.getLongOption() + "=" + value);
+        handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_0_IS_NOT_APPLICABLE_FOR_1, new Object[] {
+          value.trim(),
+          option.getLongOption()
+        }), CommandProcessingException.OPTION_VALUE_INVALID, option.getLongOption() + "=" + value);
-  private boolean processArguments(OptionSet parse, CommandTarget commandTarget, Map<String, String> paramValMap,
-      List<MethodParameter> parameters, boolean errorState) {
+  private boolean processArguments(OptionSet parse,
+                                   CommandTarget commandTarget,
+                                   Map<String, String> paramValMap,
+                                   List<MethodParameter> parameters,
+                                   boolean errorState) {
-      
+
-          handleCondition(
-              CliStrings.format(CliStrings.GFSHPARSER__MSG__COMMAND_ARGUMENT_0_IS_REQUIRED_USE_HELP,
-                  argument.getArgumentName()), CommandProcessingException.REQUIRED_ARGUMENT_MISSING,
-              argument.getArgumentName());
+          handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__COMMAND_ARGUMENT_0_IS_REQUIRED_USE_HELP, argument
+            .getArgumentName()), CommandProcessingException.REQUIRED_ARGUMENT_MISSING, argument.getArgumentName());
-      Object conversionObject = getConversionObject(argument.getConverter(), value, argument.getDataType(),
-          argument.getContext(), SyntaxConstants.VALUE_SEPARATOR);
+      Object conversionObject = getConversionObject(argument.getConverter(), value, argument.getDataType(), argument.getContext(), SyntaxConstants.VALUE_SEPARATOR);
-        handleCondition(
-            CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_0_IS_NOT_APPLICABLE_FOR_1,
-                new Object[] { value.trim(), argument.getArgumentName() }),
-            CommandProcessingException.ARGUMENT_INVALID, argument.getArgumentName() + "=" + value);
-        logWrapper
-            .fine("Value '" + value.trim() + "' not applicable for argument: " + argument.getArgumentName());
+        handleCondition(CliStrings.format(CliStrings.GFSHPARSER__MSG__VALUE_0_IS_NOT_APPLICABLE_FOR_1, new Object[] {
+          value.trim(),
+          argument.getArgumentName()
+        }), CommandProcessingException.ARGUMENT_INVALID, argument.getArgumentName() + "=" + value);
+        logWrapper.fine("Value '" + value.trim() + "' not applicable for argument: " + argument.getArgumentName());
-  private Object getConversionObject(Converter<?> converter, String string,
-      Class<?> dataType, String context, String valueSeparator) {
+  private Object getConversionObject(Converter<?> converter,
+                                     String string,
+                                     Class<?> dataType,
+                                     String context,
+                                     String valueSeparator) {
-          return ((MultipleValueConverter) converter).convertFromText(
-              ParserUtils.splitValues(
-                  ((string != null) ? string.trim() : null),
-                  valueSeparator), dataType, context);
+        return ((MultipleValueConverter) converter).convertFromText(ParserUtils.splitValues(((string != null) ? string.trim() : null), valueSeparator), dataType, context);
-      if (string != null && ((string.endsWith("\"") && string.endsWith("\""))
-          || (string.startsWith("\'") && string.endsWith("\'")))) {
+      if (string != null && ((string.endsWith("\"") && string.endsWith("\"")) || (string.startsWith("\'") && string.endsWith("\'")))) {
-      return converter.convertFromText((string != null) ? string.trim()
-          : null, dataType, context);
+        return converter.convertFromText((string != null) ? string.trim() : null, dataType, context);
-        } else if (Byte.class.isAssignableFrom(dataType)
-            || byte.class.isAssignableFrom(dataType)) {
+        } else if (Byte.class.isAssignableFrom(dataType) || byte.class.isAssignableFrom(dataType)) {
-        } else if (Short.class.isAssignableFrom(dataType)
-            || short.class.isAssignableFrom(dataType)) {
+        } else if (Short.class.isAssignableFrom(dataType) || short.class.isAssignableFrom(dataType)) {
-        } else if (Boolean.class.isAssignableFrom(dataType)
-            || boolean.class.isAssignableFrom(dataType)) {
+        } else if (Boolean.class.isAssignableFrom(dataType) || boolean.class.isAssignableFrom(dataType)) {
-        } else if (Integer.class.isAssignableFrom(dataType)
-            || int.class.isAssignableFrom(dataType)) {
+        } else if (Integer.class.isAssignableFrom(dataType) || int.class.isAssignableFrom(dataType)) {
-        } else if (Long.class.isAssignableFrom(dataType)
-            || long.class.isAssignableFrom(dataType)) {
+        } else if (Long.class.isAssignableFrom(dataType) || long.class.isAssignableFrom(dataType)) {
-        } else if (Float.class.isAssignableFrom(dataType)
-            || float.class.isAssignableFrom(dataType)) {
+        } else if (Float.class.isAssignableFrom(dataType) || float.class.isAssignableFrom(dataType)) {
-        } else if (Double.class.isAssignableFrom(dataType)
-            || double.class.isAssignableFrom(dataType)) {
+        } else if (Double.class.isAssignableFrom(dataType) || double.class.isAssignableFrom(dataType)) {
-        } else if (Character.class.isAssignableFrom(dataType)
-            || char.class.isAssignableFrom(dataType)) {
+        } else if (Character.class.isAssignableFrom(dataType) || char.class.isAssignableFrom(dataType)) {
-      throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
+    throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-      throws IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
+    throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-          if (remainingBuffer.length() == 0
-              || remainingBuffer.startsWith(" ")
-              || remainingBuffer.startsWith(GfshParser.LINE_SEPARATOR)) {
+          if (remainingBuffer.length() == 0 || remainingBuffer.startsWith(" ") || remainingBuffer.startsWith(GfshParser.LINE_SEPARATOR)) {
-              commandTargets.add(commandTarget.duplicate(commandName,
-                  remainingBuffer));
+              commandTargets.add(commandTarget.duplicate(commandName, remainingBuffer));
-      throws IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
+    throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-    boolean  commandWordsMatch = true;
+    boolean commandWordsMatch = true;
-    String[] userInputWords   = userInput.split(" ");
+    String[] userInputWords = userInput.split(" ");
-  private Map<Short, List<CommandTarget>> findMatchingCommands(String userSpecifiedCommand, Set<String> requiredCommands)
-      throws IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
+  private Map<Short, List<CommandTarget>> findMatchingCommands(String userSpecifiedCommand,
+                                                               Set<String> requiredCommands)
+    throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-       // This check is done to remove commands that are synonyms as
+      // This check is done to remove commands that are synonyms as
-    commandTargetsArr.put(EXACT_TARGET,     exactCommandTargets);
+    commandTargetsArr.put(EXACT_TARGET, exactCommandTargets);
-      throws IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
-    AvailabilityTarget availabilityIndicator = commandTarget
-        .getAvailabilityIndicator();
+    throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
+    AvailabilityTarget availabilityIndicator = commandTarget.getAvailabilityIndicator();
-      if(userInput == null) {
-        userInput="";
+      if (userInput == null) {
+        userInput = "";
-      List<CommandTarget> exactCommandTargets    = matchingCommandsMap.get(EXACT_TARGET);
+      List<CommandTarget> exactCommandTargets = matchingCommandsMap.get(EXACT_TARGET);
-            helpText.append(
-              Gfsh.wrapText(CliStrings.format(CliStrings.GFSHPARSER__MSG__USE_0_HELP_COMMAND_TODISPLAY_DETAILS,
-                  appName), 0)).append(GfshParser.LINE_SEPARATOR);
-            helpText.append(Gfsh.wrapText(CliStrings.format(
-              CliStrings.GFSHPARSER__MSG__HELP_CAN_ALSO_BE_OBTAINED_BY_0_KEY, AbstractShell.completionKeys), 0));
+            helpText.append(Gfsh.wrapText(CliStrings.format(CliStrings.GFSHPARSER__MSG__USE_0_HELP_COMMAND_TODISPLAY_DETAILS, appName), 0))
+                    .append(GfshParser.LINE_SEPARATOR);
+            helpText.append(Gfsh.wrapText(CliStrings.format(CliStrings.GFSHPARSER__MSG__HELP_CAN_ALSO_BE_OBTAINED_BY_0_KEY, AbstractShell.completionKeys), 0));
-        if(key.startsWith(string)){
+        if (key.startsWith(string)) {
-//  private void logInfo(String message) {
-//    if (consoleLogger != null) {
-//      consoleLogger.info(message);
-//    } else {
-//      Gfsh.println(message);
-//    }
-//  }
+  //  private void logInfo(String message) {
+  //    if (consoleLogger != null) {
+  //      consoleLogger.info(message);
+  //    } else {
+  //      Gfsh.println(message);
+  //    }
+  //  }

INS8 MOV41 INS8 INS8 MOV41 MOV41 INS8 MOV21 INS8 MOV21 INS8 MOV21 INS8 MOV53 INS8 MOV21