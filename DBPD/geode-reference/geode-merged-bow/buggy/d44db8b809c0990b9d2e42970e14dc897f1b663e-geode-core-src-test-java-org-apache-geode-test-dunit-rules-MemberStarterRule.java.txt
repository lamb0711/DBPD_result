GEODE-2395: use random ports when starting the jmx manager and http services

* be able to configure the various aspects of the rules before starting the server when declaring the rules.
* delete the unnecessary abstract test classes
* allowing tests to use default ports if needed
* created HttpClientRule to ease the connection to to pulse server

-import org.apache.commons.io.FileUtils;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_BIND_ADDRESS;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;
+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;
+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.NAME;
+
+import org.apache.geode.internal.AvailablePortHelper;
+import java.io.IOException;
+import java.util.Properties;
-public abstract class MemberStarterRule extends ExternalResource implements Member {
-  protected TemporaryFolder temporaryFolder;
+public abstract class MemberStarterRule<T> extends ExternalResource implements Member {
+  protected transient TemporaryFolder temporaryFolder;
-  protected String name;
+  protected int httpPort = -1;
-  @Override
-  public void before() throws Exception {
+  protected String name;
+  protected Properties properties = new Properties();
+
+  public MemberStarterRule() {
+    this(null);
+  }
+
+  public MemberStarterRule(File workDir) {
+    workingDir = workDir;
-      temporaryFolder.create();
-      workingDir = temporaryFolder.newFolder("locator").getAbsoluteFile();
+      try {
+        temporaryFolder.create();
+      } catch (IOException e) {
+        throw new RuntimeException(e.getMessage(), e);
+      }
+      workingDir = temporaryFolder.getRoot().getAbsoluteFile();
+
+    // initial values
+    properties.setProperty(MCAST_PORT, "0");
+    properties.setProperty(LOCATORS, "");
-    FileUtils.deleteQuietly(workingDir);
+  public T withProperty(String key, String value) {
+    properties.setProperty(key, value);
+    return (T) this;
+  }
+
+  public T withProperties(Properties props) {
+    if (props != null) {
+      this.properties.putAll(props);
+    }
+    return (T) this;
+  }
+
+  public T withName(String name) {
+    this.name = name;
+    properties.setProperty(NAME, name);
+    // if log-file is not already set
+    properties.putIfAbsent(LOG_FILE, new File(name + ".log").getAbsolutePath().toString());
+    return (T) this;
+  }
+
+  public T withConnectionToLocator(int locatorPort) {
+    if (locatorPort > 0) {
+      properties.setProperty(LOCATORS, "localhost[" + locatorPort + "]");
+    }
+    return (T) this;
+  }
+
+  /**
+   * be able to start JMX manager and admin rest on default ports
+   */
+  public T withJMXManager(boolean useDefault) {
+    // the real port numbers will be set after we started the server/locator.
+    this.jmxPort = 0;
+    this.httpPort = 0;
+    if (!useDefault) {
+      // do no override these properties if already exists
+      properties.putIfAbsent(JMX_MANAGER_PORT,
+          AvailablePortHelper.getRandomAvailableTCPPort() + "");
+      properties.putIfAbsent(HTTP_SERVICE_PORT,
+          AvailablePortHelper.getRandomAvailableTCPPort() + "");
+    }
+    properties.putIfAbsent(JMX_MANAGER, "true");
+    properties.putIfAbsent(JMX_MANAGER_START, "true");
+    properties.putIfAbsent(HTTP_SERVICE_BIND_ADDRESS, "localhost");
+    return (T) this;
+  }
+
+  /**
+   * start the jmx manager and admin rest on a random ports
+   */
+  public T withJMXManager() {
+    return withJMXManager(false);
+  }
+
+  protected void normalizeProperties() {
+    // if name is set via property, not with API
+    if (name == null) {
+      if (properties.containsKey(NAME)) {
+        name = properties.getProperty(NAME);
+      } else {
+        if (this instanceof ServerStarterRule)
+          name = "server";
+        else {
+          name = "locator";
+        }
+      }
+      withName(name);
+    }
+
+    // if jmxPort is set via property, not with API
+    if (jmxPort < 0 && properties.containsKey(JMX_MANAGER_PORT)) {
+      // this will make sure we have all the missing properties, but it won't override
+      // the existing properties
+      withJMXManager(false);
+    }
+  }
+
+  public int getHttpPort() {
+    return httpPort;
+  }
+
+  @Override

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS73 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS8 UPD42 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 MOV78 INS83 INS39 INS42 INS8 INS42 INS38 INS42 INS42 INS14 INS17 INS43 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS21 INS21 INS21 INS41 INS42 INS39 INS42 INS25 INS41 INS65 INS42 INS39 INS42 INS21 INS21 INS25 INS21 INS21 INS21 INS41 INS65 INS42 INS41 INS25 INS25 INS41 INS34 INS43 INS33 UPD42 MOV42 INS7 INS32 INS32 INS42 INS42 INS32 INS11 INS42 INS27 INS8 INS11 INS42 INS7 INS32 INS32 INS11 INS27 INS8 INS11 INS66 INS7 INS7 INS38 INS8 INS32 INS32 INS32 INS11 INS66 INS32 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS52 INS42 INS33 INS21 INS43 INS52 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS52 INS42 INS34 INS21 INS43 INS52 INS22 INS34 INS22 INS34 INS42 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS52 INS42 INS9 INS42 INS33 INS25 INS21 INS27 INS32 INS21 INS8 INS12 INS42 INS32 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS42 INS32 INS8 INS8 INS32 INS42 INS34 INS42 INS42 INS42 INS32 MOV21 INS44 INS8 INS22 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS21 INS25 INS42 INS42 INS42 INS9 INS43 INS42 INS53 INS52 INS42 INS43 INS27 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS7 INS62 INS21 INS8 INS42 INS14 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS43 INS7 INS21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS42 INS42 INS45 DEL39 DEL43 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21