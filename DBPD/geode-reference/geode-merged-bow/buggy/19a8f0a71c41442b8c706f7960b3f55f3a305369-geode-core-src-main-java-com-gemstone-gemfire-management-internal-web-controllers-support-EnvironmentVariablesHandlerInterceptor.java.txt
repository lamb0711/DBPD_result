GEODE-17: WIP adding JMX security

+import java.lang.reflect.Method;
+import java.security.Principal;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.Set;
+import java.util.Map.Entry;
+
+import javax.management.remote.JMXPrincipal;
+import javax.security.auth.Subject;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.distributed.DistributedSystem;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.ClassLoadUtil;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.logging.InternalLogWriter;
+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.management.ManagementService;
+import com.gemstone.gemfire.management.internal.SystemManagementService;
+import com.gemstone.gemfire.management.internal.security.CLIOperationContext;
+import com.gemstone.gemfire.management.internal.security.MBeanServerWrapper;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+import com.gemstone.gemfire.security.AccessControl;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
+import com.gemstone.gemfire.security.AuthenticationRequiredException;
+import com.gemstone.gemfire.security.Authenticator;
+
+import org.apache.logging.log4j.Logger;
+
+  private static final Logger logger = LogService.getLogger();
+
+  private Cache cache;
+
+  private Authenticator auth = null;
+
+
+  public static final ThreadLocal<Properties> CREDENTIALS = new ThreadLocal<Properties>();
+
+
+  protected static final String SECURITY_VARIABLE_REQUEST_HEADER_PREFIX = "security-";
+
+
+
+    for (Enumeration<String> requestHeaders = request.getHeaderNames(); requestHeaders.hasMoreElements();) {
+
+      final String requestHeader = requestHeaders.nextElement();
+
+      if (requestHeader.startsWith(SECURITY_VARIABLE_REQUEST_HEADER_PREFIX)) {
+        requestParameterValues.put(requestHeader, request.getHeader(requestHeader));
+      }
+
+    }
+
+    securityCheck(requestParameterValues);
+
+
+
+  protected void securityCheck(final Map<String, String> environment) {
+
+    Properties credentials = new Properties();
+
+    Iterator<Entry<String, String>> it = environment.entrySet().iterator();
+    while (it.hasNext()) {
+      Entry<String, String> entry = it.next();
+      if (entry.getKey().startsWith(SECURITY_VARIABLE_REQUEST_HEADER_PREFIX)) {
+        credentials.put(entry.getKey(), entry.getValue());
+      }
+
+    }
+    GemFireCacheImpl instance = GemFireCacheImpl.getInstance();
+    if(instance != null){
+      SystemManagementService service = (SystemManagementService) ManagementService
+          .getExistingManagementService(instance);
+      service.getAuthManager().verifyCredentials(credentials);
+      CREDENTIALS.set(credentials);
+    }
+
+
+  }
+
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS24 INS21 INS83 INS74 INS42 INS60 INS60 INS61 INS60 INS25 INS42 INS42 INS42 INS42 INS74 INS58 INS32 INS8 INS32 INS43 INS43 INS43 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS43 INS74 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS42 INS42 INS43 INS43 INS42 INS32 INS83 INS43 INS59 INS32 INS8 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS21 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42