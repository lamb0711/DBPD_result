Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * It works in two phases. The first phase parses the XML and instantiates
- * {@link Declarable}s. If any problems occur, a {@link CacheXmlException} is
- * thrown. The second phase actually {@linkplain CacheCreation#create creates}
- * the {@link Cache}/{@link ClientCache},{@link Region}s, etc.
+ * It works in two phases. The first phase parses the XML and instantiates {@link Declarable}s. If
+ * any problems occur, a {@link CacheXmlException} is thrown. The second phase actually
+ * {@linkplain CacheCreation#create creates} the {@link Cache}/{@link ClientCache},{@link Region}s,
+ * etc.
-  
+
-  private static final String DISALLOW_DOCTYPE_DECL_FEATURE = "http://apache.org/xml/features/disallow-doctype-decl";
+  private static final String DISALLOW_DOCTYPE_DECL_FEATURE =
+      "http://apache.org/xml/features/disallow-doctype-decl";
-  private static final String JAXP_SCHEMA_LANGUAGE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
+  private static final String JAXP_SCHEMA_LANGUAGE =
+      "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
-  
+
-   * Parses XML data and from it creates an instance of
-   * <code>CacheXmlParser</code> that can be used to {@link #create}the
-   * {@link Cache}, etc.
+   * Parses XML data and from it creates an instance of <code>CacheXmlParser</code> that can be used
+   * to {@link #create}the {@link Cache}, etc.
-   * @return a <code>CacheXmlParser</code>, typically used to create a cache
-   *         from the parsed XML
+   * @return a <code>CacheXmlParser</code>, typically used to create a cache from the parsed XML
-	  
+
-     * The API doc
-     * http://java.sun.com/javase/6/docs/api/org/xml/sax/InputSource.html for
-     * the SAX InputSource says: "... standard processing of both byte and
-     * character streams is to close them on as part of end-of-parse cleanup, so
-     * applications should not attempt to re-use such streams after they have
-     * been handed to a parser."
+     * The API doc http://java.sun.com/javase/6/docs/api/org/xml/sax/InputSource.html for the SAX
+     * InputSource says: "... standard processing of both byte and character streams is to close
+     * them on as part of end-of-parse cleanup, so applications should not attempt to re-use such
+     * streams after they have been handed to a parser."
-     * In order to block the parser from closing the stream, we wrap the
-     * InputStream in a filter, i.e., UnclosableInputStream, whose close()
-     * function does nothing.
+     * In order to block the parser from closing the stream, we wrap the InputStream in a filter,
+     * i.e., UnclosableInputStream, whose close() function does nothing.
-      public void close() {
-      }
+      public void close() {}
-	 
+
-      factory.setNamespaceAware(true);     
+      factory.setNamespaceAware(true);
-        if (null != e.getCause() && e.getCause().getMessage().contains(DISALLOW_DOCTYPE_DECL_FEATURE)) {
+        if (null != e.getCause()
+            && e.getCause().getMessage().contains(DISALLOW_DOCTYPE_DECL_FEATURE)) {
-          SAXParser parser = factory.newSAXParser();      
+          SAXParser parser = factory.newSAXParser();
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        while (true /*ex instanceof CacheXmlException*/) {
+        while (true /* ex instanceof CacheXmlException */) {
-          }
-          else {
+          } else {
-      }
-      else if (ex instanceof SAXException) {
+      } else if (ex instanceof SAXException) {
-          while (true /*cause instanceof CacheXmlException*/) {
+          while (true /* cause instanceof CacheXmlException */) {
-            }
-            else {
+            } else {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_PARSING_XML.toLocalizedString(), ex);
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_WHILE_PARSING_XML.toLocalizedString(), ex);
-    }
-    catch (NumberFormatException ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
+    } catch (NumberFormatException ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
-    }
-    catch (NumberFormatException ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
+    } catch (NumberFormatException ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
-    }
-    catch (NumberFormatException ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_MALFORMED_FLOAT_0.toLocalizedString(s), ex);
+    } catch (NumberFormatException ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_MALFORMED_FLOAT_0.toLocalizedString(s), ex);
-   * Creates cache artifacts ({@link Cache}s, etc.) based upon the XML parsed
-   * by this parser.
+   * Creates cache artifacts ({@link Cache}s, etc.) based upon the XML parsed by this parser.
-  public void create(GemFireCacheImpl cache) throws TimeoutException,
-                                         GatewayException,
-                                         CacheWriterException,
-                                         RegionExistsException
-  {
+  public void create(GemFireCacheImpl cache)
+      throws TimeoutException, GatewayException, CacheWriterException, RegionExistsException {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_NO_CACHE_ELEMENT_SPECIFIED.toLocalizedString());
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_NO_CACHE_ELEMENT_SPECIFIED.toLocalizedString());
-   * When a <code>cache</code> element is first encountered, we create a
-   * {@link CacheCreation}and fill it in appropriately
+   * When a <code>cache</code> element is first encountered, we create a {@link CacheCreation}and
+   * fill it in appropriately
+
-    if(v != null) {
+    if (v != null) {
+
-    PoolFactory f = (PoolFactory)stack.pop();
-    String name = (String)stack.pop();
+    PoolFactory f = (PoolFactory) stack.pop();
+    String name = (String) stack.pop();
+
-    PoolFactory f = (PoolFactory)stack.peek();
+    PoolFactory f = (PoolFactory) stack.peek();
+
-    PoolFactory f = (PoolFactory)stack.peek();
+    PoolFactory f = (PoolFactory) stack.peek();
-   * When a <code>cache-server</code> element is first encountered, we create
-   * a new {@link CacheCreation#addCacheServer() CacheServer} in the cache.
+   * When a <code>cache-server</code> element is first encountered, we create a new
+   * {@link CacheCreation#addCacheServer() CacheServer} in the cache.
-    String maxConnections= atts.getValue(MAX_CONNECTIONS);
+    String maxConnections = atts.getValue(MAX_CONNECTIONS);
-    String maxThreads= atts.getValue(MAX_THREADS);
+    String maxThreads = atts.getValue(MAX_THREADS);
-    
+
-    if(parallel == null){
+    if (parallel == null) {
-    }else{
-      gatewaySenderFactory.setParallel(Boolean.parseBoolean(parallel));  
+    } else {
+      gatewaySenderFactory.setParallel(Boolean.parseBoolean(parallel));
-    
-    //manual-start 
+
+    // manual-start
-    if(manualStart == null){
+    if (manualStart == null) {
-    }else{
-      gatewaySenderFactory.setManualStart(Boolean.parseBoolean(manualStart));  
+    } else {
+      gatewaySenderFactory.setManualStart(Boolean.parseBoolean(manualStart));
-    
-   //socket-buffer-size
+
+    // socket-buffer-size
-    if(socketBufferSize == null){
+    if (socketBufferSize == null) {
-    }else{
-      gatewaySenderFactory.setSocketBufferSize(Integer.parseInt(socketBufferSize)); 
+    } else {
+      gatewaySenderFactory.setSocketBufferSize(Integer.parseInt(socketBufferSize));
-    
-    //socket-read-timeout
+
+    // socket-read-timeout
-    if(socketReadTimeout == null){
+    if (socketReadTimeout == null) {
-    }else{
-      gatewaySenderFactory.setSocketReadTimeout(Integer.parseInt(socketReadTimeout)); 
+    } else {
+      gatewaySenderFactory.setSocketReadTimeout(Integer.parseInt(socketReadTimeout));
-    
-    //batch-conflation
+
+    // batch-conflation
-    if(batchConflation == null){
+    if (batchConflation == null) {
-    }else{
-      gatewaySenderFactory.setBatchConflationEnabled(Boolean.parseBoolean(batchConflation)); 
+    } else {
+      gatewaySenderFactory.setBatchConflationEnabled(Boolean.parseBoolean(batchConflation));
-    
-    //batch-size
+
+    // batch-size
-    if(batchSize == null){
+    if (batchSize == null) {
-    }else{
+    } else {
-    
-    //batch-time-interval
+
+    // batch-time-interval
-    if(batchTimeInterval == null){
+    if (batchTimeInterval == null) {
-    }else{
+    } else {
-    
-    //enable-persistence
+
+    // enable-persistence
-    if(enablePersistence == null){
+    if (enablePersistence == null) {
-    }else{
+    } else {
-    
+
-    if(diskStoreName == null){
+    if (diskStoreName == null) {
-    }else{
+    } else {
-    
+
-    
-    //maximum-queue-memory
+
+    // maximum-queue-memory
-    if(maxQueueMemory == null){
+    if (maxQueueMemory == null) {
-    }else{
+    } else {
-    
-    
+
+
-    if(alertThreshold == null){
+    if (alertThreshold == null) {
-    }else{
+    } else {
-    
+
-      gatewaySenderFactory
-          .setDispatcherThreads(GatewaySender.DEFAULT_DISPATCHER_THREADS);
+      gatewaySenderFactory.setDispatcherThreads(GatewaySender.DEFAULT_DISPATCHER_THREADS);
-      gatewaySenderFactory.setDispatcherThreads(Integer
-          .parseInt(dispatcherThreads));
+      gatewaySenderFactory.setDispatcherThreads(Integer.parseInt(dispatcherThreads));
-    
+
-        gatewaySenderFactory.setOrderPolicy(GatewaySender.OrderPolicy.valueOf(orderPolicy.toUpperCase()));
+        gatewaySenderFactory
+            .setOrderPolicy(GatewaySender.OrderPolicy.valueOf(orderPolicy.toUpperCase()));
-                .toLocalizedString(new Object[] { id, orderPolicy }));
+                .toLocalizedString(new Object[] {id, orderPolicy}));
-    
+
-//    GatewaySender sender = gatewaySenderFactory.create(id, Integer.parseInt(remoteDS));
-//    stack.push(sender);
+    // GatewaySender sender = gatewaySenderFactory.create(id, Integer.parseInt(remoteDS));
+    // stack.push(sender);
-    
-    //port 
+
+    // port
-    if(startPort == null){
+    if (startPort == null) {
-    }else{
-      receiverFactory.setStartPort(Integer.parseInt(startPort));  
+    } else {
+      receiverFactory.setStartPort(Integer.parseInt(startPort));
-    
+
-    if(endPort == null){
+    if (endPort == null) {
-    }else{
-      receiverFactory.setEndPort(Integer.parseInt(endPort));  
+    } else {
+      receiverFactory.setEndPort(Integer.parseInt(endPort));
-    
+
-    if(bindAddress == null){
+    if (bindAddress == null) {
-    }else{
-      receiverFactory.setBindAddress(bindAddress);  
+    } else {
+      receiverFactory.setBindAddress(bindAddress);
-    
-    //maximum-time-between-pings  
+
+    // maximum-time-between-pings
-    if(maxTimeBetweenPings == null){
-      receiverFactory.setMaximumTimeBetweenPings(GatewayReceiver.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS);
-    }else{
-      receiverFactory.setMaximumTimeBetweenPings(Integer.parseInt(maxTimeBetweenPings));  
+    if (maxTimeBetweenPings == null) {
+      receiverFactory
+          .setMaximumTimeBetweenPings(GatewayReceiver.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS);
+    } else {
+      receiverFactory.setMaximumTimeBetweenPings(Integer.parseInt(maxTimeBetweenPings));
-    
-    //socket-buffer-size   
+
+    // socket-buffer-size
-    if(socketBufferSize == null){
+    if (socketBufferSize == null) {
-    }else{
-      receiverFactory.setSocketBufferSize(Integer.parseInt(socketBufferSize));  
+    } else {
+      receiverFactory.setSocketBufferSize(Integer.parseInt(socketBufferSize));
-    
-  //manual-start 
+
+    // manual-start
-    if(manualStart == null){
+    if (manualStart == null) {
-    }else{
-      receiverFactory.setManualStart(Boolean.parseBoolean(manualStart));  
+    } else {
+      receiverFactory.setManualStart(Boolean.parseBoolean(manualStart));
-    
+
-      receiverFactory
-          .setHostnameForSenders(GatewayReceiver.DEFAULT_HOSTNAME_FOR_SENDERS);
+      receiverFactory.setHostnameForSenders(GatewayReceiver.DEFAULT_HOSTNAME_FOR_SENDERS);
-    } 
+    }
-  
+
-    
-    if(stack.peek() instanceof ServerLoadProbe) {
+
+    if (stack.peek() instanceof ServerLoadProbe) {
-    
-    
-    
-    if(stack.peek() instanceof ClientHaQueueCreation) {
-      haCreation = (ClientHaQueueCreation)stack.pop();
+
+
+
+    if (stack.peek() instanceof ClientHaQueueCreation) {
+      haCreation = (ClientHaQueueCreation) stack.pop();
-    
+
-    CacheServer bs = (CacheServer)stack.pop();
+    CacheServer bs = (CacheServer) stack.pop();
-    if(probe != null) {
+    if (probe != null) {
-      if (diskStoreName!=null) {
+      if (diskStoreName != null) {
-        csc.setOverflowDirectory(haCreation.getOverflowDirectory()==null?ClientSubscriptionConfig.DEFAULT_OVERFLOW_DIRECTORY:haCreation.getOverflowDirectory());
+        csc.setOverflowDirectory(haCreation.getOverflowDirectory() == null
+            ? ClientSubscriptionConfig.DEFAULT_OVERFLOW_DIRECTORY
+            : haCreation.getOverflowDirectory());
-  
+
-   * When a <code>load-probe</code> element is encountered,
-   * create a new probe for the current <code>CacheServer</code>.
+   * When a <code>load-probe</code> element is encountered, create a new probe for the current
+   * <code>CacheServer</code>.
-      throw new CacheXmlException(
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), 
-                                            "BridgeLoadProbe"}));
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
+          .toLocalizedString(new Object[] {d.getClass().getName(), "BridgeLoadProbe"}));
-    GatewaySenderFactory senderFactory = (GatewaySenderFactory)stack.pop();
-    String remoteDSString = (String)stack.pop();
-    String id = (String)stack.pop();
+    GatewaySenderFactory senderFactory = (GatewaySenderFactory) stack.pop();
+    String remoteDSString = (String) stack.pop();
+    String id = (String) stack.pop();
-  
+
-    GatewayReceiverFactory receiverFactory = (GatewayReceiverFactory)stack.pop();
+    GatewayReceiverFactory receiverFactory = (GatewayReceiverFactory) stack.pop();
-  
+
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-        dir = (File)o;
-        stack.pop(); //dir size to be popped out. being used by persistent directories
+        dir = (File) o;
+        stack.pop(); // dir size to be popped out. being used by persistent directories
-    String poolName = (String)stack.pop();
-    String disableRegisterInterest = (String)stack.pop();
-    String disablePersistBackup = (String)stack.pop();
+    String poolName = (String) stack.pop();
+    String disableRegisterInterest = (String) stack.pop();
+    String disablePersistBackup = (String) stack.pop();
-            !Boolean.valueOf(disablePersistBackup).booleanValue(),
-            !Boolean.valueOf(disableRegisterInterest).booleanValue());
-    CacheCreation cache = (CacheCreation)stack.peek();
+        !Boolean.valueOf(disablePersistBackup).booleanValue(),
+        !Boolean.valueOf(disableRegisterInterest).booleanValue());
+    CacheCreation cache = (CacheCreation) stack.peek();
-   * When a <code>gateway-conflict-resolver</code> element is encountered,
-   * create a new listener for the <code>Cache</code>.
+   * When a <code>gateway-conflict-resolver</code> element is encountered, create a new listener for
+   * the <code>Cache</code>.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_GATEWAYCONFLICTRESOLVER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_GATEWAYCONFLICTRESOLVER
+              .toLocalizedString(d.getClass().getName()));
-    CacheCreation c = (CacheCreation)stack.peek();
-    c.setGatewayConflictResolver((GatewayConflictResolver)d);
+    CacheCreation c = (CacheCreation) stack.peek();
+    c.setGatewayConflictResolver((GatewayConflictResolver) d);
-   * When a <code>region</code> element is first encountered, we create a
-   * {@link RegionCreation}and push it on the stack.
+   * When a <code>region</code> element is first encountered, we create a {@link RegionCreation}and
+   * push it on the stack.
-   * When a <code>cache-transaction-manager</code> element is found, create a
-   * container for the potential <code>transaction-listener</code> and push it
-   * on the stack
+   * When a <code>cache-transaction-manager</code> element is found, create a container for the
+   * potential <code>transaction-listener</code> and push it on the stack
-   * After popping the current <code>RegionCreation</code> off the stack, if
-   * the element on top of the stack is a <code>RegionCreation</code>, then
-   * it is the parent region.
+   * After popping the current <code>RegionCreation</code> off the stack, if the element on top of
+   * the stack is a <code>RegionCreation</code>, then it is the parent region.
-  private void endRegion()
-      throws RegionExistsException {
+  private void endRegion() throws RegionExistsException {
-    }
-    else {
+    } else {
-   * Add the <code>transaction-manager</code> creation code to the cache
-   * creation code
+   * Add the <code>transaction-manager</code> creation code to the cache creation code
-    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack
-        .pop();
+    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack.pop();
-   * Create a <code>transaction-listener</code> using the declarable interface
-   * and set the transaction manager with the newly instantiated listener.
+   * Create a <code>transaction-listener</code> using the declarable interface and set the
+   * transaction manager with the newly instantiated listener.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER
+              .toLocalizedString(d.getClass().getName()));
-    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack
-        .peek();
+    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack.peek();
-   * When a <code>disk-store</code> element is first encountered, we
-   * create a {@link DiskStoreAttributes}, populate it accordingly, and
-   * push it on the stack.
+   * When a <code>disk-store</code> element is first encountered, we create a
+   * {@link DiskStoreAttributes}, populate it accordingly, and push it on the stack.
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_NULL_DiskStoreName.toLocalizedString());
-    }
-    else {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_NULL_DiskStoreName.toLocalizedString());
+    } else {
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-                .toLocalizedString(new Object[] { maxInputFileSizeMB, param }),
+                .toLocalizedString(new Object[] {maxInputFileSizeMB, param}),
-  
+
-   * Create a <code>transaction-writer</code> using the declarable interface
-   * and set the transaction manager with the newly instantiated writer.
+   * Create a <code>transaction-writer</code> using the declarable interface and set the transaction
+   * manager with the newly instantiated writer.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_TRANSACTION_WRITER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_TRANSACTION_WRITER
+              .toLocalizedString(d.getClass().getName()));
-    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack
-        .peek();
+    CacheTransactionManagerCreation txMgrCreation = (CacheTransactionManagerCreation) stack.peek();
-  
+
-   * When a <code>region-attributes</code> element is first encountered, we
-   * create a {@link RegionAttributesCreation}, populate it accordingly, and
-   * push it on the stack.
+   * When a <code>region-attributes</code> element is first encountered, we create a
+   * {@link RegionAttributesCreation}, populate it accordingly, and push it on the stack.
-    }
-    else if (scope.equals(LOCAL)) {
+    } else if (scope.equals(LOCAL)) {
-    }
-    else if (scope.equals(DISTRIBUTED_NO_ACK)) {
+    } else if (scope.equals(DISTRIBUTED_NO_ACK)) {
-    }
-    else if (scope.equals(DISTRIBUTED_ACK)) {
+    } else if (scope.equals(DISTRIBUTED_ACK)) {
-    }
-    else if (scope.equals(GLOBAL)) {
+    } else if (scope.equals(GLOBAL)) {
-    }
-    else {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_UNKNOWN_SCOPE_0.toLocalizedString(scope));
+    } else {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_UNKNOWN_SCOPE_0.toLocalizedString(scope));
-    }
-    else if (mirror.equals(NONE)) {
+    } else if (mirror.equals(NONE)) {
-    }
-    else if (mirror.equals(KEYS)) {
+    } else if (mirror.equals(KEYS)) {
-    }
-    else if (mirror.equals(KEYS_VALUES)) {
+    } else if (mirror.equals(KEYS_VALUES)) {
-    }
-    else {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));
+    } else {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));
-      }
-      else if (dp.equals(NORMAL_DP)) {
+      } else if (dp.equals(NORMAL_DP)) {
-      }
-      else if (dp.equals(PRELOADED_DP)) {
+      } else if (dp.equals(PRELOADED_DP)) {
-      }
-      else if (dp.equals(EMPTY_DP)) {
+      } else if (dp.equals(EMPTY_DP)) {
-      }
-      else if (dp.equals(REPLICATE_DP)) {
+      } else if (dp.equals(REPLICATE_DP)) {
-      }
-      else if (dp.equals(PERSISTENT_REPLICATE_DP)) {
+      } else if (dp.equals(PERSISTENT_REPLICATE_DP)) {
-      }
-      else if (dp.equals(PARTITION_DP)) {
+      } else if (dp.equals(PARTITION_DP)) {
-      }
-      else if (dp.equals(PERSISTENT_PARTITION_DP)) {
+      } else if (dp.equals(PERSISTENT_PARTITION_DP)) {
-      }
-      else {
-        throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));
+      } else {
+        throw new InternalGemFireException(
+            LocalizedStrings.CacheXmlParser_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));
-      attrs.setStatisticsEnabled(Boolean.valueOf(statisticsEnabled)
-          .booleanValue());
+      attrs.setStatisticsEnabled(Boolean.valueOf(statisticsEnabled).booleanValue());
-    attrs.setIndexMaintenanceSynchronous(indexUpdateType == null
-        || indexUpdateType.equals(INDEX_UPDATE_TYPE_SYNCH));
+    attrs.setIndexMaintenanceSynchronous(
+        indexUpdateType == null || indexUpdateType.equals(INDEX_UPDATE_TYPE_SYNCH));
-      attrs.setEnableSubscriptionConflation(Boolean.valueOf(enableSubscriptionConflation).booleanValue());
+      attrs.setEnableSubscriptionConflation(
+          Boolean.valueOf(enableSubscriptionConflation).booleanValue());
-        attrs.setEnableSubscriptionConflation(Boolean.valueOf(enableBridgeConflation).booleanValue());
+        attrs.setEnableSubscriptionConflation(
+            Boolean.valueOf(enableBridgeConflation).booleanValue());
-    /* deprecated in prPersistSprint1
-    String publisherStr = atts.getValue(PUBLISHER);
-    if (publisherStr != null) {
-      attrs.setPublisher(Boolean.valueOf(publisherStr).booleanValue());
-    }
-    */
+    /*
+     * deprecated in prPersistSprint1 String publisherStr = atts.getValue(PUBLISHER); if
+     * (publisherStr != null) { attrs.setPublisher(Boolean.valueOf(publisherStr).booleanValue()); }
+     */
-    String cloningEnabledStr = atts.getValue(CLONING_ENABLED); 
+    String cloningEnabledStr = atts.getValue(CLONING_ENABLED);
-    if(gatewaySenderIds != null && (gatewaySenderIds.length() != 0)){
+    if (gatewaySenderIds != null && (gatewaySenderIds.length() != 0)) {
-      while(st.hasMoreElements()){
+      while (st.hasMoreElements()) {
-    if(asyncEventQueueIds != null && (asyncEventQueueIds.length() != 0)){
+    if (asyncEventQueueIds != null && (asyncEventQueueIds.length() != 0)) {
-      while(st.hasMoreElements()){
+      while (st.hasMoreElements()) {
-    if(offHeapStr != null) {
+    if (offHeapStr != null) {
-  
+
-   * After popping the current <code>DiskStoreAttributesCreation</code> off the
-   * stack, we add it to the <code>DiskStoreAttionCreation</code> that should be on the
-   * top of the stack.
+   * After popping the current <code>DiskStoreAttributesCreation</code> off the stack, we add it to
+   * the <code>DiskStoreAttionCreation</code> that should be on the top of the stack.
-    }
-    else {
-      String s = "Did not expected a " + top.getClass().getName()
-          + " on top of the stack.";
+    } else {
+      String s = "Did not expected a " + top.getClass().getName() + " on top of the stack.";
-   * After popping the current <code>RegionAttributesCreation</code> off the
-   * stack, we add it to the <code>RegionCreation</code> that should be on the
-   * top of the stack.
+   * After popping the current <code>RegionAttributesCreation</code> off the stack, we add it to the
+   * <code>RegionCreation</code> that should be on the top of the stack.
-    }
-    else if (top instanceof CacheCreation) {
+    } else if (top instanceof CacheCreation) {
-    }
-    else {
-      String s = "Did not expected a " + top.getClass().getName()
-          + " on top of the stack.";
+    } else {
+      String s = "Did not expected a " + top.getClass().getName() + " on top of the stack.";
-  private void endCache() {
-  }
+  private void endCache() {}
-  private void endClientCache() {
-  }
+  private void endClientCache() {}
+
-   * When the end of a <code>string</code> element is encountered, convert the
-   * data to a <code>String</code>
+   * When the end of a <code>string</code> element is encountered, convert the data to a
+   * <code>String</code>
+   * 
-   * When an <code>entry</code> element is finished, the <code>value</code>
-   * should be on the stop of the stack followed by the <code>key</code>. The
-   * <code>RegionCreation</code> for the region being created should be below
-   * that.
+   * When an <code>entry</code> element is finished, the <code>value</code> should be on the stop of
+   * the stack followed by the <code>key</code>. The <code>RegionCreation</code> for the region
+   * being created should be below that.
-    //changed by mitul after modifying code for Region implements Map
+    // changed by mitul after modifying code for Region implements Map
-   * When a <code>key-constraint</code> element is finished, the name of the
-   * class should be on top of the stack.
+   * When a <code>key-constraint</code> element is finished, the name of the class should be on top
+   * of the stack.
-    }
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_KEYCONSTRAINT_CLASS_0.toLocalizedString(className), ex);
+    } catch (Exception ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_KEYCONSTRAINT_CLASS_0
+              .toLocalizedString(className),
+          ex);
-   * When a <code>value-constraint</code> element is finished, the name of the
-   * class should be on top of the stack.
+   * When a <code>value-constraint</code> element is finished, the name of the class should be on
+   * top of the stack.
-    }
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_VALUECONSTRAINT_CLASS_0.toLocalizedString(className), ex);
+    } catch (Exception ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_VALUECONSTRAINT_CLASS_0
+              .toLocalizedString(className),
+          ex);
-   * When a <code>region-time-to-live</code> element is finished, the
-   * {@link ExpirationAttributes} are on top of the stack followed by the
-   * {@link RegionAttributesCreation} to which the expiration attributes are
-   * assigned.
+   * When a <code>region-time-to-live</code> element is finished, the {@link ExpirationAttributes}
+   * are on top of the stack followed by the {@link RegionAttributesCreation} to which the
+   * expiration attributes are assigned.
-   * When a <code>region-idle-time</code> element is finished, the
-   * {@link ExpirationAttributes} are on top of the stack followed by the
-   * {@link RegionAttributesCreation} to which the expiration attributes are
-   * assigned.
+   * When a <code>region-idle-time</code> element is finished, the {@link ExpirationAttributes} are
+   * on top of the stack followed by the {@link RegionAttributesCreation} to which the expiration
+   * attributes are assigned.
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES.toLocalizedString(dependentElement));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
+              .toLocalizedString(dependentElement));
-        throw new CacheXmlException(
+      throw new CacheXmlException(
-            .toLocalizedString(dependentElement));
+              .toLocalizedString(dependentElement));
-   * When a <code>entry-time-to-live</code> element is finished, an optional
-   * Declarable (the custom-expiry) is followed by the
-   * {@link ExpirationAttributes} are on top of the stack followed by either the
-   * {@link RegionAttributesCreation} to which the expiration attributes are
-   * assigned, or the attributes for a {@link PartitionAttributes} to which the attributes are
-   * assigned.
+   * When a <code>entry-time-to-live</code> element is finished, an optional Declarable (the
+   * custom-expiry) is followed by the {@link ExpirationAttributes} are on top of the stack followed
+   * by either the {@link RegionAttributesCreation} to which the expiration attributes are assigned,
+   * or the attributes for a {@link PartitionAttributes} to which the attributes are assigned.
-      custom = (Declarable)stack.pop();
+      custom = (Declarable) stack.pop();
-//    if (a instanceof PartitionAttributesFactory) {
-//      ((PartitionAttributesFactory) a).setEntryTimeToLive(expire);
-//    } else
+    // if (a instanceof PartitionAttributesFactory) {
+    // ((PartitionAttributesFactory) a).setEntryTimeToLive(expire);
+    // } else
-      ((RegionAttributesCreation)a).setEntryTimeToLive(expire);
+      ((RegionAttributesCreation) a).setEntryTimeToLive(expire);
-        ((RegionAttributesCreation)a).setCustomEntryTimeToLive((CustomExpiry)custom);
+        ((RegionAttributesCreation) a).setCustomEntryTimeToLive((CustomExpiry) custom);
-    }
-    else {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES.toLocalizedString(ENTRY_TIME_TO_LIVE));
+    } else {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES
+              .toLocalizedString(ENTRY_TIME_TO_LIVE));
-   * When a <code>entry-idle-time</code> element is finished, an optional
-   * Declarable (the custom-expiry) is followed by the
-   * {@link ExpirationAttributes} are on top of the stack followed by the
-   * {@link RegionAttributesCreation} to which the expiration attributes are
-   * assigned.
+   * When a <code>entry-idle-time</code> element is finished, an optional Declarable (the
+   * custom-expiry) is followed by the {@link ExpirationAttributes} are on top of the stack followed
+   * by the {@link RegionAttributesCreation} to which the expiration attributes are assigned.
-      custom = (Declarable)stack.pop();
+      custom = (Declarable) stack.pop();
-//    if (a instanceof PartitionAttributesFactory) {
-//      ((PartitionAttributesFactory) a).setEntryIdleTimeout(expire);
-//    } else
+    // if (a instanceof PartitionAttributesFactory) {
+    // ((PartitionAttributesFactory) a).setEntryIdleTimeout(expire);
+    // } else
-      ((RegionAttributesCreation)a).setEntryIdleTimeout(expire);
+      ((RegionAttributesCreation) a).setEntryIdleTimeout(expire);
-        ((RegionAttributesCreation)a).setCustomEntryIdleTimeout((CustomExpiry)custom);
+        ((RegionAttributesCreation) a).setCustomEntryIdleTimeout((CustomExpiry) custom);
-    }
-    else {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES.toLocalizedString(ENTRY_IDLE_TIME));
+    } else {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES
+              .toLocalizedString(ENTRY_IDLE_TIME));
-   * When a <code>partition-attributes</code> element is finished, the
-   * {@link PartitionAttributes} are on top of the stack followed by the
-   * {@link RegionAttributesCreation} to which the partition attributes are
-   * assigned.
+   * When a <code>partition-attributes</code> element is finished, the {@link PartitionAttributes}
+   * are on top of the stack followed by the {@link RegionAttributesCreation} to which the partition
+   * attributes are assigned.
-    
+
-  
+
-  private void endFixedPartitionAttributes() {
-  }
+  private void endFixedPartitionAttributes() {}
-   * When a <code>membership-attributes</code> element is finished, the
-   * arguments for constructing the MembershipAttributes are on the stack.
+   * When a <code>membership-attributes</code> element is finished, the arguments for constructing
+   * the MembershipAttributes are on the stack.
-      (String[]) roles.toArray(new String[roles.size()]), laction, raction);
+        (String[]) roles.toArray(new String[roles.size()]), laction, raction);
-   * When a <code>disk-write-attributes</code> element is finished, the
-   * {@link DiskWriteAttributes} is on top of the stack followed by the
-   * {@link RegionAttributesCreation} to which the expiration attributes are
-   * assigned.
+   * When a <code>disk-write-attributes</code> element is finished, the {@link DiskWriteAttributes}
+   * is on top of the stack followed by the {@link RegionAttributesCreation} to which the expiration
+   * attributes are assigned.
-   * When a <code>disk-dir</code> element is finished, the name of the
-   * directory is on top of the stack. Create a new {@link File}and push it on
-   * the stack.
+   * When a <code>disk-dir</code> element is finished, the name of the directory is on top of the
+   * stack. Create a new {@link File}and push it on the stack.
-    if(!dir.exists()){
+    if (!dir.exists()) {
-   * When a <code>disk-dirs</code> element is finished, the directory
-   * {@link File}s are on the stack followed by the {@link
-   * RegionAttributesCreation} to which the expiration attributes are assigned.
+   * When a <code>disk-dirs</code> element is finished, the directory {@link File}s are on the stack
+   * followed by the {@link RegionAttributesCreation} to which the expiration attributes are
+   * assigned.
-    
-    //should set the disk-dirs and sizes in reverse order since parsers would have reversed
-    //the order because of pushing into stack
+
+    // should set the disk-dirs and sizes in reverse order since parsers would have reversed
+    // the order because of pushing into stack
-    for(int i=0; i<dirsLength; i++) {
-      disks[i] = (File)dirs.get((dirsLength - 1)- i);
+    for (int i = 0; i < dirsLength; i++) {
+      disks[i] = (File) dirs.get((dirsLength - 1) - i);
-    for(int i=0; i<dirsLength; i++) {
-      diskSizes[i] = ((Integer)sizes.get((dirsLength - 1)- i)).intValue();
+    for (int i = 0; i < dirsLength; i++) {
+      diskSizes[i] = ((Integer) sizes.get((dirsLength - 1) - i)).intValue();
-      attrs.setDiskDirsAndSize(disks,diskSizes);
+      attrs.setDiskDirsAndSize(disks, diskSizes);
-      DiskStoreAttributesCreation attrs = (DiskStoreAttributesCreation)a;
-      attrs.setDiskDirsAndSize(disks,diskSizes);
+      DiskStoreAttributesCreation attrs = (DiskStoreAttributesCreation) a;
+      attrs.setDiskDirsAndSize(disks, diskSizes);
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES.toLocalizedString(DISK_DIRS));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
+              .toLocalizedString(DISK_DIRS));
-    int maxOplogSize = ((Integer)stack.pop()).intValue();
-    String rollOplog = (String)stack.pop();
-    //convery megabytes to bytes for DiskWriteAttributes creation
+    int maxOplogSize = ((Integer) stack.pop()).intValue();
+    String rollOplog = (String) stack.pop();
+    // convery megabytes to bytes for DiskWriteAttributes creation
-    props.setProperty(MAX_OPLOG_SIZE,String.valueOf(maxOplogSizeInBytes));
+    props.setProperty(MAX_OPLOG_SIZE, String.valueOf(maxOplogSizeInBytes));
-    int maxOplogSize = ((Integer)stack.pop()).intValue();
-    String rollOplog = (String)stack.pop();
-//  convery megabytes to bytes for DiskWriteAttributes creation
+    int maxOplogSize = ((Integer) stack.pop()).intValue();
+    String rollOplog = (String) stack.pop();
+    // convery megabytes to bytes for DiskWriteAttributes creation
-    props.setProperty(MAX_OPLOG_SIZE,String.valueOf(maxOplogSizeInBytes));
-    props.setProperty(ROLL_OPLOG,rollOplog);
-    props.setProperty(TIME_INTERVAL,String.valueOf(timeInterval));
-    props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY,"false");
-    props.setProperty(BYTES_THRESHOLD,String.valueOf(bytesThreshold));
+    props.setProperty(MAX_OPLOG_SIZE, String.valueOf(maxOplogSizeInBytes));
+    props.setProperty(ROLL_OPLOG, rollOplog);
+    props.setProperty(TIME_INTERVAL, String.valueOf(timeInterval));
+    props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY, "false");
+    props.setProperty(BYTES_THRESHOLD, String.valueOf(bytesThreshold));
-   * When a <code>parition-attributes</code> element is encountered, we push a
-   * ParitionAttributes?? for configuring paritioned storage on the
-   * stack.
+   * When a <code>parition-attributes</code> element is encountered, we push a ParitionAttributes??
+   * for configuring paritioned storage on the stack.
-    if (colocatedWith != null) {      
+    if (colocatedWith != null) {
-    if (recoveryDelay != null) {      
+    if (recoveryDelay != null) {
-    if (startupRecoveryDelay != null) {      
+    if (startupRecoveryDelay != null) {
-  
+
-   * When a <code>fixed-partition-attributes</code> element is encountered, we
-   * create an instance of FixedPartitionAttributesImpl and add it to the
-   * PartitionAttributesImpl stack.
+   * When a <code>fixed-partition-attributes</code> element is encountered, we create an instance of
+   * FixedPartitionAttributesImpl and add it to the PartitionAttributesImpl stack.
-      ((PartitionAttributesImpl)a).addFixedPartitionAttributes(fpai);
+      ((PartitionAttributesImpl) a).addFixedPartitionAttributes(fpai);
-   * When a <code>membership-attributes</code> element is encountered, we push
-   * an array of attributes for creation of a MembershipAttributes.
+   * When a <code>membership-attributes</code> element is encountered, we push an array of
+   * attributes for creation of a MembershipAttributes.
-    attrs[0] = atts.getValue(LOSS_ACTION) == null 
-        ? LossAction.NO_ACCESS.toString() : atts.getValue(LOSS_ACTION);
-    attrs[1] = atts.getValue(RESUMPTION_ACTION) == null 
-        ? ResumptionAction.REINITIALIZE.toString() : atts.getValue(RESUMPTION_ACTION);
-    
+    attrs[0] = atts.getValue(LOSS_ACTION) == null ? LossAction.NO_ACCESS.toString()
+        : atts.getValue(LOSS_ACTION);
+    attrs[1] = atts.getValue(RESUMPTION_ACTION) == null ? ResumptionAction.REINITIALIZE.toString()
+        : atts.getValue(RESUMPTION_ACTION);
+
-   * When a <code>subscription-attributes</code> element is first encountered,
-   * we create an SubscriptionAttibutes?? object from the element's
-   * attributes and stick it in the current region attributes.
+   * When a <code>subscription-attributes</code> element is first encountered, we create an
+   * SubscriptionAttibutes?? object from the element's attributes and stick it in the current region
+   * attributes.
-    }
-    else if (ip.equals(ALL)) {
+    } else if (ip.equals(ALL)) {
-    }
-    else if (ip.equals(CACHE_CONTENT)) {
+    } else if (ip.equals(CACHE_CONTENT)) {
-    }
-    else {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));
+    } else {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));
+
-   * When a <code>required-role</code> element is encountered, we push a string
-   * for creation of MembershipAttributes.
+   * When a <code>required-role</code> element is encountered, we push a string for creation of
+   * MembershipAttributes.
-   * When a <code>index</code> element is encounter, we create the
-   * IndexCreationData object from the Stack. Set the required parameters in the
-   * IndexCreationData object & push it on stack.
+   * When a <code>index</code> element is encounter, we create the IndexCreationData object from the
+   * Stack. Set the required parameters in the IndexCreationData object & push it on stack.
-  
+
-      } 
+      }
-    
+
-        }
-        else if (type.equals(RANGE_INDEX_TYPE)){
+        } else if (type.equals(RANGE_INDEX_TYPE)) {
-        }
-        else {
-          logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(LocalizedStrings.CacheXmlParser_UNKNOWN_INDEX_TYPE, type));
+        } else {
+          logger.trace(LogMarker.CACHE_XML_PARSER,
+              LocalizedMessage.create(LocalizedStrings.CacheXmlParser_UNKNOWN_INDEX_TYPE, type));
-    } 
+    }
-  
+
-   * When index element is ending we need to verify all attributes because of
-   * new index tag definition since 6.6.1 and support previous definition also. 
+   * When index element is ending we need to verify all attributes because of new index tag
+   * definition since 6.6.1 and support previous definition also.
-   * if <code>functional</code> element was not there then we need to validate
-   * expression and fromClause as not null.
+   * if <code>functional</code> element was not there then we need to validate expression and
+   * fromClause as not null.
-    
+
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_CACHEXMLPARSERENDINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED.toLocalizedString());
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERENDINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED
+              .toLocalizedString());
-   * When a <code>functional</code> element is encounter, we pop the
-   * IndexCreationData object from the Stack. Set the required parameters in the
-   * IndexCreationData object & set it in RegionCreation object.
+   * When a <code>functional</code> element is encounter, we pop the IndexCreationData object from
+   * the Stack. Set the required parameters in the IndexCreationData object & set it in
+   * RegionCreation object.
-    //icd.setIndexType(FUNCTIONAL);
+    // icd.setIndexType(FUNCTIONAL);
-      if (len == 3) importStr = atts.getValue(IMPORTS);
+      if (len == 3)
+        importStr = atts.getValue(IMPORTS);
-        icd.setIndexData(IndexType.FUNCTIONAL, fromClause, 
-          expression, importStr);
+        icd.setIndexData(IndexType.FUNCTIONAL, fromClause, expression, importStr);
-    }
-    else {
+    } else {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTFUNCTIONALINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED.toLocalizedString());
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTFUNCTIONALINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED
+              .toLocalizedString());
-   * When a <code>primary-key</code> element is encounter, we pop the
-   * IndexCreationData object from the Stack. Set the required parameters in the
-   * IndexCreationData object & set it in RegionCreation object.
+   * When a <code>primary-key</code> element is encounter, we pop the IndexCreationData object from
+   * the Stack. Set the required parameters in the IndexCreationData object & set it in
+   * RegionCreation object.
-    //icd.setIndexType(PRIMARY_KEY);
+    // icd.setIndexType(PRIMARY_KEY);
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTPRIMARYKEYINDEXPRIMARYKEY_INDEX_CREATION_FIELD_IS_NULL.toLocalizedString());
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTPRIMARYKEYINDEXPRIMARYKEY_INDEX_CREATION_FIELD_IS_NULL
+              .toLocalizedString());
-   * When a <code>expiration-attributes</code> element is first encountered,
-   * we create an ExpirationAttibutes?? object from the element's
-   * attributes and push it on the stack.
+   * When a <code>expiration-attributes</code> element is first encountered, we create an
+   * ExpirationAttibutes?? object from the element's attributes and push it on the stack.
-    }
-    else if (action.equals(INVALIDATE)) {
+    } else if (action.equals(INVALIDATE)) {
-    }
-    else if (action.equals(DESTROY)) {
+    } else if (action.equals(DESTROY)) {
-    }
-    else if (action.equals(LOCAL_INVALIDATE)) {
-      expire = new ExpirationAttributes(timeout,
-          ExpirationAction.LOCAL_INVALIDATE);
-    }
-    else if (action.equals(LOCAL_DESTROY)) {
+    } else if (action.equals(LOCAL_INVALIDATE)) {
+      expire = new ExpirationAttributes(timeout, ExpirationAction.LOCAL_INVALIDATE);
+    } else if (action.equals(LOCAL_DESTROY)) {
-    }
-    else {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlParser_UNKNOWN_EXPIRATION_ACTION_0.toLocalizedString(action));
+    } else {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_UNKNOWN_EXPIRATION_ACTION_0.toLocalizedString(action));
-  
+
-   * When a <code>serializer-registration element is first encountered, we need
-   * to create the wrapper object to hold the data, and put it on the stack.
+   * When a <code>serializer-registration element is first encountered, we need to create the
+   * wrapper object to hold the data, and put it on the stack.
-  private void startSerializerRegistration(){
+  private void startSerializerRegistration() {
-  
+
-   * When an <code>instantiator</code> element is first encountered,
-   * we need to hang on to the id attribute for use in registration in the end
-   * tag function.
+   * When an <code>instantiator</code> element is first encountered, we need to hang on to the id
+   * attribute for use in registration in the end tag function.
-   * Creates and initializes an instance of {@link Declarable} from the contents
-   * of the stack.
+   * Creates and initializes an instance of {@link Declarable} from the contents of the stack.
-   * @throws CacheXmlException Something goes wrong while instantiating or
-   *           initializing the declarable
+   * @throws CacheXmlException Something goes wrong while instantiating or initializing the
+   *         declarable
-    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_PROPERTIES__0, props));
+    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage
+        .create(LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_PROPERTIES__0, props));
-    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_CLASS_NAME_0, className));
+    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(
+        LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_CLASS_NAME_0, className));
-    }
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
+    } catch (Exception ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE.toLocalizedString(className));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE
+              .toLocalizedString(className));
-    
+
-    
+
-  
+
-   * Ending the <code>compressor</code> registration should leave us with a
-   * class name on the stack.  Pull it off and setup the {@link Compressor}
-   * on the region attributes.
+   * Ending the <code>compressor</code> registration should leave us with a class name on the stack.
+   * Pull it off and setup the {@link Compressor} on the region attributes.
-    if(!Compressor.class.isAssignableFrom(klass)) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_COMPRESSOR
-          .toLocalizedString(klass.getName()));
+    if (!Compressor.class.isAssignableFrom(klass)) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_COMPRESSOR
+              .toLocalizedString(klass.getName()));
-    
+
+    } catch (Exception ex) {
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0
+          .toLocalizedString(klass.getName()), ex);
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(klass.getName()), ex);
-    }
-    
+
-    
+
-    }
-    else {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1.toLocalizedString(new Object[] {COMPRESSOR, DYNAMIC_REGION_FACTORY}));
+    } else {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1
+              .toLocalizedString(new Object[] {COMPRESSOR, DYNAMIC_REGION_FACTORY}));
-   * When a <code>cache-loader</code> element is finished, the {@link
-   * Parameter}s and class names are popped off the stack. The cache loader is
-   * instantiated and initialized with the parameters, if appropriate.
-   * When the loader is being created in a dynamic-region-factory, there may
-   * be a disk-dir element on the stack, represented by a File object.
-   * Otherwise, dynamic-region-factory uses a RegionAttributesCreation, just
-   * like a region, and is treated the same.<p)
-   * The loader may also be created in the context of partition-attributes.
+   * When a <code>cache-loader</code> element is finished, the {@link Parameter}s and class names
+   * are popped off the stack. The cache loader is instantiated and initialized with the parameters,
+   * if appropriate. When the loader is being created in a dynamic-region-factory, there may be a
+   * disk-dir element on the stack, represented by a File object. Otherwise, dynamic-region-factory
+   * uses a RegionAttributesCreation, just like a region, and is treated the same.<p) The loader may
+   * also be created in the context of partition-attributes.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELOADER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELOADER
+              .toLocalizedString(d.getClass().getName()));
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_CACHELOADER_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES.toLocalizedString());
+        throw new CacheXmlException(
+            LocalizedStrings.CacheXmlParser_A_CACHELOADER_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
+                .toLocalizedString());
-    }
-    else {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1.toLocalizedString(new Object[] {CACHE_LOADER, DYNAMIC_REGION_FACTORY}));
+    } else {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1
+              .toLocalizedString(new Object[] {CACHE_LOADER, DYNAMIC_REGION_FACTORY}));
-   * When a <code>cache-writer</code> element is finished, the {@link
-   * Parameter}s and class names are popped off the stack. The cache writer is
-   * instantiated and initialized with the parameters, if appropriate.
-   * <p>A cache-writer may be created in the context of region-attributes or
-   * dynamic-region-factory.  In the latter case, there may be a disk-dir on
-   * top of the stack, represented by a File object.
+   * When a <code>cache-writer</code> element is finished, the {@link Parameter}s and class names
+   * are popped off the stack. The cache writer is instantiated and initialized with the parameters,
+   * if appropriate.
+   * <p>
+   * A cache-writer may be created in the context of region-attributes or dynamic-region-factory. In
+   * the latter case, there may be a disk-dir on top of the stack, represented by a File object.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHEWRITER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHEWRITER
+              .toLocalizedString(d.getClass().getName()));
-//  check for partition-attributes
-//    if (a instanceof PartitionAttributesFactory) {
-//      PartitionAttributesFactory fac = (PartitionAttributesFactory) a;
-//      fac.setCacheWriter((CacheWriter) d);
-//    }
-//    else
+    // check for partition-attributes
+    // if (a instanceof PartitionAttributesFactory) {
+    // PartitionAttributesFactory fac = (PartitionAttributesFactory) a;
+    // fac.setCacheWriter((CacheWriter) d);
+    // }
+    // else
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_1.toLocalizedString(new Object[] {CACHE_WRITER, DYNAMIC_REGION_FACTORY}));
+        throw new CacheXmlException(
+            LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_1
+                .toLocalizedString(new Object[] {CACHE_WRITER, DYNAMIC_REGION_FACTORY}));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES.toLocalizedString(CACHE_WRITER));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
+              .toLocalizedString(CACHE_WRITER));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_CUSTOMEXPIRY.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_CUSTOMEXPIRY
+              .toLocalizedString(d.getClass().getName()));
-  
-  
+
+
-   * Create an <code>lru-entry-count</code> eviction controller, assigning
-   * it to the enclosed <code>region-attributes</code>.  Allow any combination
-   * of attributes to be provided.  Use the default values for any attribute that is not provided.
+   * Create an <code>lru-entry-count</code> eviction controller, assigning it to the enclosed
+   * <code>region-attributes</code>. Allow any combination of attributes to be provided. Use the
+   * default values for any attribute that is not provided.
+   * 
-   * Start the configuration of a <code>lru-memory-size</code> eviction controller.  Allow
-   * for any of the attributes to be missing.  Store the attributes on the stack
-   * anticipating the declaration of an {@link ObjectSizer}.
+   * Start the configuration of a <code>lru-memory-size</code> eviction controller. Allow for any of
+   * the attributes to be missing. Store the attributes on the stack anticipating the declaration of
+   * an {@link ObjectSizer}.
+   * 
-    if(lruAction != null){
-        action = EvictionAction.parseAction(lruAction);
+    if (lruAction != null) {
+      action = EvictionAction.parseAction(lruAction);
-   * Complete the configuration of a <code>lru-memory-size</code> eviction controller.
-   * Check for the declaration of an {@link ObjectSizer}.  Assign the attributes to the
-   * enclose <code>region-attributes</code>
+   * Complete the configuration of a <code>lru-memory-size</code> eviction controller. Check for the
+   * declaration of an {@link ObjectSizer}. Assign the attributes to the enclose
+   * <code>region-attributes</code>
-    if (declCheck instanceof String ||
-        declCheck instanceof Parameter) {
-        d = createDeclarable();
-        if (!(d instanceof ObjectSizer)) {
-          throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_OBJECTSIZER.toLocalizedString(d.getClass().getName()));
-        }
+    if (declCheck instanceof String || declCheck instanceof Parameter) {
+      d = createDeclarable();
+      if (!(d instanceof ObjectSizer)) {
+        throw new CacheXmlException(
+            LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_OBJECTSIZER
+                .toLocalizedString(d.getClass().getName()));
+      }
-        eai.setObjectSizer((ObjectSizer) d);
+      eai.setObjectSizer((ObjectSizer) d);
-   * Create an <code>lru-heap-percentage</code> eviction controller, assigning
-   * it to the enclosed <code>region-attributes</code>
+   * Create an <code>lru-heap-percentage</code> eviction controller, assigning it to the enclosed
+   * <code>region-attributes</code>
+   * 
-   * Complete the configuration of a <code>lru-heap-percentage</code> eviction controller.
-   * Check for the declaration of an {@link ObjectSizer}.  Assign the attributes to the
-   * enclosed <code>region-attributes</code>
+   * Complete the configuration of a <code>lru-heap-percentage</code> eviction controller. Check for
+   * the declaration of an {@link ObjectSizer}. Assign the attributes to the enclosed
+   * <code>region-attributes</code>
-    if (declCheck instanceof String ||
-        declCheck instanceof Parameter) {
-        d = createDeclarable();
-        if (!(d instanceof ObjectSizer)) {
-          String s = "A " + d.getClass().getName()
-              + " is not an instance of a ObjectSizer";
-          throw new CacheXmlException(s);
-        }
+    if (declCheck instanceof String || declCheck instanceof Parameter) {
+      d = createDeclarable();
+      if (!(d instanceof ObjectSizer)) {
+        String s = "A " + d.getClass().getName() + " is not an instance of a ObjectSizer";
+        throw new CacheXmlException(s);
+      }
-        eai.setObjectSizer((ObjectSizer) d);
+      eai.setObjectSizer((ObjectSizer) d);
-   * When a <code>cache-listener</code> element is finished, the {@link
-   * Parameter}s and class names are popped off the stack. The cache listener is
-   * instantiated and initialized with the parameters, if appropriate.
+   * When a <code>cache-listener</code> element is finished, the {@link Parameter}s and class names
+   * are popped off the stack. The cache listener is instantiated and initialized with the
+   * parameters, if appropriate.
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER
+              .toLocalizedString(d.getClass().getName()));
-  
+
-    //id
+    // id
-    
+
-    if(parallel == null){
+    if (parallel == null) {
-    }else{
-      asyncEventQueueCreation.setParallel(Boolean.parseBoolean(parallel));  
+    } else {
+      asyncEventQueueCreation.setParallel(Boolean.parseBoolean(parallel));
-    //batch-size
+    // batch-size
-    if(batchSize == null){
+    if (batchSize == null) {
-    }else{
+    } else {
-    
-    //batch-time-interval
+
+    // batch-time-interval
-    if(batchTimeInterval == null){
+    if (batchTimeInterval == null) {
-    }else{
+    } else {
-    
-    //batch-conflation
+
+    // batch-conflation
-    if(batchConflation == null){
+    if (batchConflation == null) {
-    }else{
-      asyncEventQueueCreation.setBatchConflationEnabled(Boolean.parseBoolean(batchConflation)); 
+    } else {
+      asyncEventQueueCreation.setBatchConflationEnabled(Boolean.parseBoolean(batchConflation));
-    
-    //maximum-queue-memory
+
+    // maximum-queue-memory
-    if(maxQueueMemory == null){
+    if (maxQueueMemory == null) {
-    }else{
+    } else {
-    
-    //persistent
+
+    // persistent
-    if(persistent == null){
+    if (persistent == null) {
-    }else{
+    } else {
-    
-    //diskStoreName
+
+    // diskStoreName
-    if(diskStoreName == null){
+    if (diskStoreName == null) {
-    }else{
+    } else {
-    
-    //diskSynchronous
+
+    // diskSynchronous
-    
+
-      asyncEventQueueCreation
-          .setDispatcherThreads(GatewaySender.DEFAULT_DISPATCHER_THREADS);
+      asyncEventQueueCreation.setDispatcherThreads(GatewaySender.DEFAULT_DISPATCHER_THREADS);
-      asyncEventQueueCreation.setDispatcherThreads(Integer
-          .parseInt(dispatcherThreads));
+      asyncEventQueueCreation.setDispatcherThreads(Integer.parseInt(dispatcherThreads));
-    
+
-        asyncEventQueueCreation.setOrderPolicy(GatewaySender.OrderPolicy.valueOf(orderPolicy.toUpperCase()));
+        asyncEventQueueCreation
+            .setOrderPolicy(GatewaySender.OrderPolicy.valueOf(orderPolicy.toUpperCase()));
-        throw new InternalGemFireException(
-            LocalizedStrings.AsyncEventQueue_UNKNOWN_ORDER_POLICY_0_1
-                .toLocalizedString(new Object[] { id, orderPolicy }));
+        throw new InternalGemFireException(LocalizedStrings.AsyncEventQueue_UNKNOWN_ORDER_POLICY_0_1
+            .toLocalizedString(new Object[] {id, orderPolicy}));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_ASYNCEVENTLISTENER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_ASYNCEVENTLISTENER
+              .toLocalizedString(d.getClass().getName()));
-  
+
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_ASYNCEVENTQUEUE.toLocalizedString(dependentElement));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_ASYNCEVENTQUEUE
+              .toLocalizedString(dependentElement));
-  
+
-    List<GatewayEventFilter> gatewayEventFilters = asyncEventChannelCreation.getGatewayEventFilters();
+    List<GatewayEventFilter> gatewayEventFilters =
+        asyncEventChannelCreation.getGatewayEventFilters();
-    factory.setGatewayEventSubstitutionListener(asyncEventChannelCreation.getGatewayEventSubstitutionFilter());
-    AsyncEventQueue asyncEventChannel = 
-      factory.create(asyncEventChannelCreation.getId(), asyncEventChannelCreation.getAsyncEventListener());
-    
+    factory.setGatewayEventSubstitutionListener(
+        asyncEventChannelCreation.getGatewayEventSubstitutionFilter());
+    AsyncEventQueue asyncEventChannel = factory.create(asyncEventChannelCreation.getId(),
+        asyncEventChannelCreation.getAsyncEventListener());
+
-  
+
-   * When a <code>partition-resolver</code> element is finished, the {@link
-   * Parameter}s and class names are popped off the stack. The
-   * <code>PartitionResolver</code> is instantiated and initialized with the
-   * parameters, if appropriate.
+   * When a <code>partition-resolver</code> element is finished, the {@link Parameter}s and class
+   * names are popped off the stack. The <code>PartitionResolver</code> is instantiated and
+   * initialized with the parameters, if appropriate.
-      throw new CacheXmlException(
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), "PartitionResolver"}));
-    
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
+          .toLocalizedString(new Object[] {d.getClass().getName(), "PartitionResolver"}));
+
-  
+
-   * When a <code>partition-listener</code> element is finished, the {@link
-   * Parameter}s and class names are popped off the stack. The
-   * <code>PartitionListener</code> is instantiated and initialized with the
-   * parameters, if appropriate.
+   * When a <code>partition-listener</code> element is finished, the {@link Parameter}s and class
+   * names are popped off the stack. The <code>PartitionListener</code> is instantiated and
+   * initialized with the parameters, if appropriate.
-      throw new CacheXmlException(
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), "PartitionListener"}));
-    
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
+          .toLocalizedString(new Object[] {d.getClass().getName(), "PartitionListener"}));
+
-   * When we have encountered a FunctionService element, we create the object 
-   * and push it onto stack
+   * When we have encountered a FunctionService element, we create the object and push it onto stack
-  private void startFunctionService() {    
+  private void startFunctionService() {
-   * When we have finished a FunctionService element, we create the object 
-   * and push it onto stack
+   * When we have finished a FunctionService element, we create the object and push it onto stack
-  private void endFunctionService() {        
+  private void endFunctionService() {
-    if (! (top instanceof FunctionServiceCreation)) {
-      throw new CacheXmlException(LocalizedStrings.
-        CacheXmlParser_EXPECTED_A_FUNCTIONSERVICECREATION_INSTANCE
-          .toLocalizedString());
+    if (!(top instanceof FunctionServiceCreation)) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_EXPECTED_A_FUNCTIONSERVICECREATION_INSTANCE
+              .toLocalizedString());
-    FunctionServiceCreation fsc = (FunctionServiceCreation)top;
+    FunctionServiceCreation fsc = (FunctionServiceCreation) top;
-   * Start the Resource Manager element configuration 
+   * Start the Resource Manager element configuration
+   * 
-    
+
-  
+
-    if (! (top instanceof ResourceManagerCreation)) {
+    if (!(top instanceof ResourceManagerCreation)) {
-    ResourceManagerCreation rmc = (ResourceManagerCreation)top;
+    ResourceManagerCreation rmc = (ResourceManagerCreation) top;
-  
+
-   * When we have finished a function element, we create the Declarable 
-   * and push it onto stack
+   * When we have finished a function element, we create the Declarable and push it onto stack
-      String s = LocalizedStrings.
-        CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_FUNCTION
+      String s = LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_FUNCTION
-    } 
+    }
-    if (! (fs instanceof FunctionServiceCreation)) {
+    if (!(fs instanceof FunctionServiceCreation)) {
-        LocalizedStrings.
-          CacheXmlParser_A_0_IS_ONLY_ALLOWED_IN_THE_CONTEXT_OF_1_MJTDEBUG_E_2
-            .toLocalizedString(new Object[] {FUNCTION, FUNCTION_SERVICE, fs}));
+          LocalizedStrings.CacheXmlParser_A_0_IS_ONLY_ALLOWED_IN_THE_CONTEXT_OF_1_MJTDEBUG_E_2
+              .toLocalizedString(new Object[] {FUNCTION, FUNCTION_SERVICE, fs}));
-  
+
-    if(! (o instanceof String)) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_NO_CLASSNAME_FOUND
-          .toLocalizedString());
+    if (!(o instanceof String)) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_NO_CLASSNAME_FOUND.toLocalizedString());
-    String className = (String)this.stack.pop();
-    
+    String className = (String) this.stack.pop();
+
+    } catch (Exception e) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_CLASS_NOT_FOUND.toLocalizedString(className), e);
-    catch(Exception e) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_CLASS_NOT_FOUND
-          .toLocalizedString(className), e);
-    }    
-  
+
-   * Ending the top level <code>serialization-registration</code> element and
-   * actually doing the work of registering all the components.
+   * Ending the top level <code>serialization-registration</code> element and actually doing the
+   * work of registering all the components.
-  
+
-   * Ending the serialization registration should leave us with a class name
-   * on the stack.  We will call the DataSerializer.register() with the class
-   * once we find it. 
+   * Ending the serialization registration should leave us with a class name on the stack. We will
+   * call the DataSerializer.register() with the class once we find it.
-    if(! (DataSerializer.class.isAssignableFrom(c))) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_NOT_A_SERIALIZER
-          .toLocalizedString(c.getName()));
+    if (!(DataSerializer.class.isAssignableFrom(c))) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_NOT_A_SERIALIZER.toLocalizedString(c.getName()));
-    
+
-   * Ending the instantiator registration should leave us with a class name
-   * and an Integer ID on the stack.  Pull them off, and setup the instantiator
-   * with an anonymous inner class to do the work.
+   * Ending the instantiator registration should leave us with a class name and an Integer ID on the
+   * stack. Pull them off, and setup the instantiator with an anonymous inner class to do the work.
-    for(Class clazz : ifaces){
-      if(clazz == DataSerializable.class) {
+    for (Class clazz : ifaces) {
+      if (clazz == DataSerializable.class) {
-    if(!found) {
+    if (!found) {
-          .toLocalizedString(c.getName()));      
+          .toLocalizedString(c.getName()));
-    
-    //the next thing on the stack should be the Integer registration ID
+
+    // the next thing on the stack should be the Integer registration ID
-    if(!(o instanceof Integer)) {
-      String s = LocalizedStrings.CacheXmlParser_NO_SERIALIZATION_ID
-        .toLocalizedString();
+    if (!(o instanceof Integer)) {
+      String s = LocalizedStrings.CacheXmlParser_NO_SERIALIZATION_ID.toLocalizedString();
-    
+
-    sc.registerInstantiator(c, id);    
+    sc.registerInstantiator(c, id);
-   * When we first encounter a <code>parameter</code> element, we push its
-   * name element on to the stack.
+   * When we first encounter a <code>parameter</code> element, we push its name element on to the
+   * stack.
-   * When we have finished a <code>parameter</code> element, create a
-   * {@link Parameter}from the top two elements of the stack.
+   * When we have finished a <code>parameter</code> element, create a {@link Parameter}from the top
+   * two elements of the stack.
-   * When we have finished a <code>declarable</code>, instantiate an instance
-   * of the {@link Declarable}and push it on the stack.
+   * When we have finished a <code>declarable</code>, instantiate an instance of the
+   * {@link Declarable}and push it on the stack.
-  public void startElement(String namespaceURI, String localName, String qName,
-      Attributes atts) throws SAXException {
+  public void startElement(String namespaceURI, String localName, String qName, Attributes atts)
+      throws SAXException {
-    }
-    else if (qName.equals(CLIENT_CACHE)) {
+    } else if (qName.equals(CLIENT_CACHE)) {
-    }
-    else if (qName.equals(BRIDGE_SERVER)) {
+    } else if (qName.equals(BRIDGE_SERVER)) {
-    } 
-    else if (qName.equals(CACHE_SERVER)) {
+    } else if (qName.equals(CACHE_SERVER)) {
-    } 
-    else if (qName.equals(LOAD_PROBE)) {
-    } 
-    else if (qName.equals(CONNECTION_POOL)) {
+    } else if (qName.equals(LOAD_PROBE)) {
+    } else if (qName.equals(CONNECTION_POOL)) {
-    }
-    else if(qName.equals(CLIENT_SUBSCRIPTION)){
+    } else if (qName.equals(CLIENT_SUBSCRIPTION)) {
-    }
-    else if (qName.equals(DYNAMIC_REGION_FACTORY)) {
+    } else if (qName.equals(DYNAMIC_REGION_FACTORY)) {
-    }
-    else if (qName.equals(GATEWAY_SENDER)) {
+    } else if (qName.equals(GATEWAY_SENDER)) {
-    }
-    else if (qName.equals(GATEWAY_RECEIVER)) {
+    } else if (qName.equals(GATEWAY_RECEIVER)) {
-    }
-    else if (qName.equals(GATEWAY_EVENT_FILTER)) {
-    }
-    else if (qName.equals(GATEWAY_TRANSPORT_FILTER)) {
-    }
-    else if (qName.equals(GATEWAY_EVENT_LISTENER)) {
-    }
-    else if (qName.equals(GATEWAY_EVENT_SUBSTITUTION_FILTER)) {
-    }
-    else if (qName.equals(ASYNC_EVENT_QUEUE)) {
+    } else if (qName.equals(GATEWAY_EVENT_FILTER)) {
+    } else if (qName.equals(GATEWAY_TRANSPORT_FILTER)) {
+    } else if (qName.equals(GATEWAY_EVENT_LISTENER)) {
+    } else if (qName.equals(GATEWAY_EVENT_SUBSTITUTION_FILTER)) {
+    } else if (qName.equals(ASYNC_EVENT_QUEUE)) {
-    }
-    else if (qName.equals(GATEWAY_CONFLICT_RESOLVER)) {
-    }
-    else if (qName.equals(LOCATOR)) {
+    } else if (qName.equals(GATEWAY_CONFLICT_RESOLVER)) {
+    } else if (qName.equals(LOCATOR)) {
-    }
-    else if (qName.equals(REGION)) {
+    } else if (qName.equals(REGION)) {
-    }
-    else if (qName.equals(VM_ROOT_REGION)) {
+    } else if (qName.equals(VM_ROOT_REGION)) {
-    }
-    else if (qName.equals(REGION_ATTRIBUTES)) {
+    } else if (qName.equals(REGION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(DISK_STORE)) {
+    } else if (qName.equals(DISK_STORE)) {
-    }
-    else if (qName.equals(KEY_CONSTRAINT)) {
-    }
-    else if (qName.equals(VALUE_CONSTRAINT)) {
-    }
-    else if (qName.equals(INDEX_UPDATE_TYPE)) {
-    }
-    else if (qName.equals(REGION_TIME_TO_LIVE)) {
-    }
-    else if (qName.equals(REGION_IDLE_TIME)) {
-    }
-    else if (qName.equals(ENTRY_TIME_TO_LIVE)) {
-    }
-    else if (qName.equals(ENTRY_IDLE_TIME)) {
-    }
-    else if (qName.equals(EXPIRATION_ATTRIBUTES)) {
+    } else if (qName.equals(KEY_CONSTRAINT)) {
+    } else if (qName.equals(VALUE_CONSTRAINT)) {
+    } else if (qName.equals(INDEX_UPDATE_TYPE)) {
+    } else if (qName.equals(REGION_TIME_TO_LIVE)) {
+    } else if (qName.equals(REGION_IDLE_TIME)) {
+    } else if (qName.equals(ENTRY_TIME_TO_LIVE)) {
+    } else if (qName.equals(ENTRY_IDLE_TIME)) {
+    } else if (qName.equals(EXPIRATION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(SERVER)) {
+    } else if (qName.equals(SERVER)) {
-    }
-    else if (qName.equals(CUSTOM_EXPIRY)) {
-    }
-    else if (qName.equals(SUBSCRIPTION_ATTRIBUTES)) {
+    } else if (qName.equals(CUSTOM_EXPIRY)) {
+    } else if (qName.equals(SUBSCRIPTION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(ENTRY)) {
-    }
-    else if (qName.equals(CLASS_NAME)) {
-    }
-    else if (qName.equals(PARAMETER)) {
+    } else if (qName.equals(ENTRY)) {
+    } else if (qName.equals(CLASS_NAME)) {
+    } else if (qName.equals(PARAMETER)) {
-    }
-    else if (qName.equals(DISK_WRITE_ATTRIBUTES)) {
+    } else if (qName.equals(DISK_WRITE_ATTRIBUTES)) {
-    }
-    else if (qName.equals(SYNCHRONOUS_WRITES)) {
+    } else if (qName.equals(SYNCHRONOUS_WRITES)) {
-    }
-    else if (qName.equals(ASYNCHRONOUS_WRITES)) {
+    } else if (qName.equals(ASYNCHRONOUS_WRITES)) {
-    }
-    else if (qName.equals(DISK_DIRS)) {
-    }
-    else if (qName.equals(DISK_DIR)) {
+    } else if (qName.equals(DISK_DIRS)) {
+    } else if (qName.equals(DISK_DIR)) {
-    }
-    else if (qName.equals(GROUP)) {
-    }
-    else if (qName.equals(PARTITION_ATTRIBUTES)) {
+    } else if (qName.equals(GROUP)) {
+    } else if (qName.equals(PARTITION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(FIXED_PARTITION_ATTRIBUTES)) {
+    } else if (qName.equals(FIXED_PARTITION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(REQUIRED_ROLE)) {
+    } else if (qName.equals(REQUIRED_ROLE)) {
-    }
-    else if (qName.equals(MEMBERSHIP_ATTRIBUTES)) {
+    } else if (qName.equals(MEMBERSHIP_ATTRIBUTES)) {
-    }
-    else if (qName.equals(LOCAL_PROPERTIES)) {
+    } else if (qName.equals(LOCAL_PROPERTIES)) {
-    }
-    else if (qName.equals(GLOBAL_PROPERTIES)) {
+    } else if (qName.equals(GLOBAL_PROPERTIES)) {
-    }
-    else if (qName.equals(CACHE_LOADER)) {
-    }
-    else if (qName.equals(CACHE_WRITER)) {
-    }
-    else if (qName.equals(EVICTION_ATTRIBUTES)) {
-    }
-    else if (qName.equals(LRU_ENTRY_COUNT)) {
-      startLRUEntryCount(atts);  // internal to eviction-attributes
-    }
-    else if (qName.equals(LRU_MEMORY_SIZE)) {
+    } else if (qName.equals(CACHE_LOADER)) {
+    } else if (qName.equals(CACHE_WRITER)) {
+    } else if (qName.equals(EVICTION_ATTRIBUTES)) {
+    } else if (qName.equals(LRU_ENTRY_COUNT)) {
+      startLRUEntryCount(atts); // internal to eviction-attributes
+    } else if (qName.equals(LRU_MEMORY_SIZE)) {
-    }
-    else if (qName.equals(LRU_HEAP_PERCENTAGE)) {
+    } else if (qName.equals(LRU_HEAP_PERCENTAGE)) {
-    }
-    else if (qName.equals(CACHE_LISTENER)) {
+    } else if (qName.equals(CACHE_LISTENER)) {
-    }
-    else if (qName.equals(KEY)) {
-    }
-    else if (qName.equals(VALUE)) {
-    }
-    else if (qName.equals(STRING)) {
-    }
-    else if (qName.equals(DECLARABLE)) {
-    }
-    else if (qName.equals(INDEX)) {
-      //Asif: Create an object of type IndexCreationData &
-      //push it in stack
+    } else if (qName.equals(KEY)) {
+    } else if (qName.equals(VALUE)) {
+    } else if (qName.equals(STRING)) {
+    } else if (qName.equals(DECLARABLE)) {
+    } else if (qName.equals(INDEX)) {
+      // Asif: Create an object of type IndexCreationData &
+      // push it in stack
-      //this.stack.push(new IndexCreationData(atts.getValue(NAME)));
-    }
-    else if (qName.equals(FUNCTIONAL)) {
+      // this.stack.push(new IndexCreationData(atts.getValue(NAME)));
+    } else if (qName.equals(FUNCTIONAL)) {
-    }
-    else if (qName.equals(PRIMARY_KEY)) {
+    } else if (qName.equals(PRIMARY_KEY)) {
-    }
-    else if (qName.equals(TRANSACTION_MANAGER)) {
+    } else if (qName.equals(TRANSACTION_MANAGER)) {
-    }
-    else if (qName.equals(TRANSACTION_LISTENER)) {
-    }
-    else if (qName.equals(TRANSACTION_WRITER)) {
-    }
-    else if (qName.equals(JNDI_BINDINGS)) { // added by Nand Kishor
-    }
-    else if (qName.equals(JNDI_BINDING)) { // added by Nand Kishor
-      //Asif: Push the BindingCreation object in the stack
+    } else if (qName.equals(TRANSACTION_LISTENER)) {
+    } else if (qName.equals(TRANSACTION_WRITER)) {
+    } else if (qName.equals(JNDI_BINDINGS)) { // added by Nand Kishor
+    } else if (qName.equals(JNDI_BINDING)) { // added by Nand Kishor
+      // Asif: Push the BindingCreation object in the stack
-    }
-    else if (qName.equals(CONFIG_PROPERTY_BINDING)) {
-      //Asif : Peek at the BindingCreation object from stack
+    } else if (qName.equals(CONFIG_PROPERTY_BINDING)) {
+      // Asif : Peek at the BindingCreation object from stack
-    }
-    else if (qName.equals(CONFIG_PROPERTY_NAME)) {
-    }
-    else if (qName.equals(CONFIG_PROPERTY_VALUE)) {
-    }
-    else if (qName.equals(CONFIG_PROPERTY_TYPE)) {
-    }
-    else if (qName.equals(PARTITION_RESOLVER)) {
-    }
-    else if (qName.equals(PARTITION_LISTENER)) {
-    }
-    else if (qName.equals(FUNCTION_SERVICE)) {
+    } else if (qName.equals(CONFIG_PROPERTY_NAME)) {
+    } else if (qName.equals(CONFIG_PROPERTY_VALUE)) {
+    } else if (qName.equals(CONFIG_PROPERTY_TYPE)) {
+    } else if (qName.equals(PARTITION_RESOLVER)) {
+    } else if (qName.equals(PARTITION_LISTENER)) {
+    } else if (qName.equals(FUNCTION_SERVICE)) {
-    }
-    else if (qName.equals(FUNCTION)) {
-    }
-    else if (qName.equals(TOP_SERIALIZER_REGISTRATION)) {
+    } else if (qName.equals(FUNCTION)) {
+    } else if (qName.equals(TOP_SERIALIZER_REGISTRATION)) {
-    }
-    else if (qName.equals(INITIALIZER)) {
+    } else if (qName.equals(INITIALIZER)) {
-    }
-    else if (qName.equals(INSTANTIATOR_REGISTRATION)) {
+    } else if (qName.equals(INSTANTIATOR_REGISTRATION)) {
-    }
-    else if (qName.equals(SERIALIZER_REGISTRATION)) {
-      //do nothing
-    }
-    else if (qName.equals(RESOURCE_MANAGER)) {
+    } else if (qName.equals(SERIALIZER_REGISTRATION)) {
+      // do nothing
+    } else if (qName.equals(RESOURCE_MANAGER)) {
-    }
-    else if (qName.equals(BACKUP)) {
-      //do nothing
-    }
-    else if (qName.equals(PDX)) {
+    } else if (qName.equals(BACKUP)) {
+      // do nothing
+    } else if (qName.equals(PDX)) {
-    } else if(qName.equals(PDX_SERIALIZER)) {
-      //do nothing
-    }
-    else if (qName.equals(COMPRESSOR)) {
-    }
-    else {
+    } else if (qName.equals(PDX_SERIALIZER)) {
+      // do nothing
+    } else if (qName.equals(COMPRESSOR)) {
+    } else {
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
+        throw new CacheXmlException(
+            LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
-      
+
-   * @param namespaceUri
-   *          to find {@link XmlParser} for.
+   * @param namespaceUri to find {@link XmlParser} for.
-        final ServiceLoader<XmlParser> serviceLoader = ServiceLoader.load(XmlParser.class, ClassPathLoader.getLatestAsClassLoader());
+        final ServiceLoader<XmlParser> serviceLoader =
+            ServiceLoader.load(XmlParser.class, ClassPathLoader.getLatestAsClassLoader());
-    if(readSerialized != null) {
+    if (readSerialized != null) {
-    if(ignoreUnreadFields != null) {
+    if (ignoreUnreadFields != null) {
-    if(persistent != null) {
+    if (persistent != null) {
-    if(diskStoreName != null) {
+    if (diskStoreName != null) {
-   * When a <code>client-subscription</code> element is first encountered, 
-   * create a new {@link ClientSubscriptionConfig } to store the 
-   * <code>eviction-policy</code>,<p>
-   * <code>capacity</code> and
-   * <code>overflow-directory</code>, then pass these values to Bridge Server
+   * When a <code>client-subscription</code> element is first encountered, create a new
+   * {@link ClientSubscriptionConfig } to store the <code>eviction-policy</code>,
+   * <p>
+   * <code>capacity</code> and <code>overflow-directory</code>, then pass these values to Bridge
+   * Server
+   * 
-   String size = atts.getValue(DIR_SIZE);
-   Integer diskSize = null;
-   if(size==null) {
-     diskSize = Integer.valueOf(DiskStoreFactory.DEFAULT_DISK_DIR_SIZE);
-   }
-   else {
-     diskSize = Integer.valueOf(size);
-   }
-   stack.push(diskSize);
+    String size = atts.getValue(DIR_SIZE);
+    Integer diskSize = null;
+    if (size == null) {
+      diskSize = Integer.valueOf(DiskStoreFactory.DEFAULT_DISK_DIR_SIZE);
+    } else {
+      diskSize = Integer.valueOf(size);
+    }
+    stack.push(diskSize);
-  private void startDiskWriteAttributes(Attributes atts)
-  {
+  private void startDiskWriteAttributes(Attributes atts) {
-    }
-    else {
+    } else {
-  public void endElement(String namespaceURI, String localName, String qName)
-      throws SAXException {
+  public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-//      logger.debug("endElement namespaceURI=" + namespaceURI
-//          + "; localName = " + localName + "; qName = " + qName);
+      // logger.debug("endElement namespaceURI=" + namespaceURI
+      // + "; localName = " + localName + "; qName = " + qName);
-      }
-      else if (qName.equals(CLIENT_CACHE)) {
+      } else if (qName.equals(CLIENT_CACHE)) {
-      }
-      else if (qName.equals(BRIDGE_SERVER)) {
-          endCacheServer();
-      }
-      else if (qName.equals(CACHE_SERVER)) {
-          endCacheServer();
+      } else if (qName.equals(BRIDGE_SERVER)) {
+        endCacheServer();
+      } else if (qName.equals(CACHE_SERVER)) {
+        endCacheServer();
-          endLoadProbe();
-      }else if(qName.equals(CLIENT_SUBSCRIPTION)){
+        endLoadProbe();
+      } else if (qName.equals(CLIENT_SUBSCRIPTION)) {
-      }
-      else if (qName.equals(CONNECTION_POOL)) {
-          endPool();
-      }
-      else if (qName.equals(DYNAMIC_REGION_FACTORY)) {
+      } else if (qName.equals(CONNECTION_POOL)) {
+        endPool();
+      } else if (qName.equals(DYNAMIC_REGION_FACTORY)) {
-      }
-      else if (qName.equals(GATEWAY_SENDER)) {
+      } else if (qName.equals(GATEWAY_SENDER)) {
-      }
-      else if (qName.equals(GATEWAY_RECEIVER)) {
+      } else if (qName.equals(GATEWAY_RECEIVER)) {
-      }
-      else if (qName.equals(GATEWAY_EVENT_FILTER)) {
+      } else if (qName.equals(GATEWAY_EVENT_FILTER)) {
-      }
-      else if (qName.equals(GATEWAY_EVENT_SUBSTITUTION_FILTER)) {
+      } else if (qName.equals(GATEWAY_EVENT_SUBSTITUTION_FILTER)) {
-      }
-      else if (qName.equals(GATEWAY_TRANSPORT_FILTER)) {
+      } else if (qName.equals(GATEWAY_TRANSPORT_FILTER)) {
-      }
-      else if (qName.equals(ASYNC_EVENT_QUEUE)) {
+      } else if (qName.equals(ASYNC_EVENT_QUEUE)) {
-      }
-      else if (qName.equals(REGION)) {
+      } else if (qName.equals(REGION)) {
-      }
-      else if (qName.equals(GATEWAY_CONFLICT_RESOLVER)) {
+      } else if (qName.equals(GATEWAY_CONFLICT_RESOLVER)) {
-      }
-      else if (qName.equals(VM_ROOT_REGION)) {
+      } else if (qName.equals(VM_ROOT_REGION)) {
-      }
-      else if (qName.equals(REGION_ATTRIBUTES)) {
+      } else if (qName.equals(REGION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(DISK_STORE)) {
+      } else if (qName.equals(DISK_STORE)) {
-      }
-      else if (qName.equals(KEY_CONSTRAINT)) {
+      } else if (qName.equals(KEY_CONSTRAINT)) {
-      }
-      else if (qName.equals(VALUE_CONSTRAINT)) {
+      } else if (qName.equals(VALUE_CONSTRAINT)) {
-      }
-      else if (qName.equals(REGION_TIME_TO_LIVE)) {
+      } else if (qName.equals(REGION_TIME_TO_LIVE)) {
-      }
-      else if (qName.equals(REGION_IDLE_TIME)) {
+      } else if (qName.equals(REGION_IDLE_TIME)) {
-      }
-      else if (qName.equals(ENTRY_TIME_TO_LIVE)) {
+      } else if (qName.equals(ENTRY_TIME_TO_LIVE)) {
-      }
-      else if (qName.equals(ENTRY_IDLE_TIME)) {
+      } else if (qName.equals(ENTRY_IDLE_TIME)) {
-      }
-      else if (qName.equals(CUSTOM_EXPIRY)) {
+      } else if (qName.equals(CUSTOM_EXPIRY)) {
-      }
-      else if (qName.equals(DISK_WRITE_ATTRIBUTES)) {
+      } else if (qName.equals(DISK_WRITE_ATTRIBUTES)) {
-      }
-      else if (qName.equals(SYNCHRONOUS_WRITES)) {
-      }
-      else if (qName.equals(ASYNCHRONOUS_WRITES)) {
-      }
-      else if (qName.equals(DISK_DIRS)) {
+      } else if (qName.equals(SYNCHRONOUS_WRITES)) {
+      } else if (qName.equals(ASYNCHRONOUS_WRITES)) {
+      } else if (qName.equals(DISK_DIRS)) {
-      }
-      else if (qName.equals(DISK_DIR)) {
+      } else if (qName.equals(DISK_DIR)) {
-      }
-      else if (qName.equals(GROUP)) {
+      } else if (qName.equals(GROUP)) {
-      }
-      else if (qName.equals(PARTITION_ATTRIBUTES)) {
+      } else if (qName.equals(PARTITION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(FIXED_PARTITION_ATTRIBUTES)) {
+      } else if (qName.equals(FIXED_PARTITION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(LOCAL_PROPERTIES)) {
+      } else if (qName.equals(LOCAL_PROPERTIES)) {
-      }
-      else if (qName.equals(GLOBAL_PROPERTIES)) {
+      } else if (qName.equals(GLOBAL_PROPERTIES)) {
-      }
-      else if (qName.equals(MEMBERSHIP_ATTRIBUTES)) {
+      } else if (qName.equals(MEMBERSHIP_ATTRIBUTES)) {
-      }
-      else if (qName.equals(REQUIRED_ROLE)) {
+      } else if (qName.equals(REQUIRED_ROLE)) {
-      }
-      else if (qName.equals(EXPIRATION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(CUSTOM_EXPIRY)) {
+      } else if (qName.equals(EXPIRATION_ATTRIBUTES)) {
+      } else if (qName.equals(CUSTOM_EXPIRY)) {
-      }
-      else if (qName.equals(SUBSCRIPTION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(ENTRY)) {
+      } else if (qName.equals(SUBSCRIPTION_ATTRIBUTES)) {
+      } else if (qName.equals(ENTRY)) {
-      }
-      else if (qName.equals(CLASS_NAME)) {
+      } else if (qName.equals(CLASS_NAME)) {
-      }
-      else if (qName.equals(PARAMETER)) {
+      } else if (qName.equals(PARAMETER)) {
-      }
-      else if (qName.equals(CACHE_LOADER)) {
+      } else if (qName.equals(CACHE_LOADER)) {
-      }
-      else if (qName.equals(CACHE_WRITER)) {
+      } else if (qName.equals(CACHE_WRITER)) {
-      }
-      else if (qName.equals(EVICTION_ATTRIBUTES)) {
-      }
-      else if (qName.equals(LRU_ENTRY_COUNT)) {
+      } else if (qName.equals(EVICTION_ATTRIBUTES)) {
+      } else if (qName.equals(LRU_ENTRY_COUNT)) {
-      }
-      else if (qName.equals(LRU_MEMORY_SIZE)) {
+      } else if (qName.equals(LRU_MEMORY_SIZE)) {
-      }
-      else if (qName.equals(LRU_HEAP_PERCENTAGE)) {
+      } else if (qName.equals(LRU_HEAP_PERCENTAGE)) {
-      }
-      else if (qName.equals(CACHE_LISTENER)) {
+      } else if (qName.equals(CACHE_LISTENER)) {
-      }
-      else if (qName.equals(KEY)) {
-      }
-      else if (qName.equals(VALUE)) {
-      }
-      else if (qName.equals(STRING)) {
+      } else if (qName.equals(KEY)) {
+      } else if (qName.equals(VALUE)) {
+      } else if (qName.equals(STRING)) {
-      }
-      else if (qName.equals(DECLARABLE)) {
+      } else if (qName.equals(DECLARABLE)) {
-      }
-      else if (qName.equals(FUNCTIONAL)) {
-      }
-      else if (qName.equals(INDEX)) {
+      } else if (qName.equals(FUNCTIONAL)) {
+      } else if (qName.equals(INDEX)) {
-      }
-      else if (qName.equals(PRIMARY_KEY)) {
-      }
-      else if (qName.equals(TRANSACTION_MANAGER)) {
+      } else if (qName.equals(PRIMARY_KEY)) {
+      } else if (qName.equals(TRANSACTION_MANAGER)) {
-      }
-      else if (qName.equals(TRANSACTION_LISTENER)) {
+      } else if (qName.equals(TRANSACTION_LISTENER)) {
-      }
-      else if (qName.equals(TRANSACTION_WRITER)) {
+      } else if (qName.equals(TRANSACTION_WRITER)) {
-      }
-      else if (qName.equals(JNDI_BINDINGS)) {
-      }
-      else if (qName.equals(JNDI_BINDING)) {
-        //Asif Pop the BindingCreation object
+      } else if (qName.equals(JNDI_BINDINGS)) {
+      } else if (qName.equals(JNDI_BINDING)) {
+        // Asif Pop the BindingCreation object
-        JNDIInvoker.mapDatasource(bc.getGFSpecificMap(), bc
-            .getVendorSpecificList());
-      }
-      else if (qName.equals(CONFIG_PROPERTY_BINDING)) {
-      }
-      else if (qName.equals(CONFIG_PROPERTY_NAME)) {
+        JNDIInvoker.mapDatasource(bc.getGFSpecificMap(), bc.getVendorSpecificList());
+      } else if (qName.equals(CONFIG_PROPERTY_BINDING)) {
+      } else if (qName.equals(CONFIG_PROPERTY_NAME)) {
-        // Pop the config-property-name element value from the stack.
-            name = ((StringBuffer) this.stack.pop()).toString();
+          // Pop the config-property-name element value from the stack.
+          name = ((StringBuffer) this.stack.pop()).toString();
-          String excep = LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD.toLocalizedString( qName );
+          String excep =
+              LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD
+                  .toLocalizedString(qName);
-        }
-        else {
+        } else {
-      }
-      else if (qName.equals(CONFIG_PROPERTY_VALUE)) {
+      } else if (qName.equals(CONFIG_PROPERTY_VALUE)) {
-            value = ((StringBuffer) this.stack.pop()).toString();
+          value = ((StringBuffer) this.stack.pop()).toString();
-      }
-      else if (qName.equals(CONFIG_PROPERTY_TYPE)) {
+      } else if (qName.equals(CONFIG_PROPERTY_TYPE)) {
-            type = ((StringBuffer) this.stack.pop()).toString();
+          type = ((StringBuffer) this.stack.pop()).toString();
-          String excep = LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD.toLocalizedString( qName );
+          String excep =
+              LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD
+                  .toLocalizedString(qName);
-        }
-        else {
+        } else {
-      }
-      else if (qName.equals(LRU_MEMORY_SIZE)) { // internal to eviction-attributes
+      } else if (qName.equals(LRU_MEMORY_SIZE)) { // internal to eviction-attributes
-      }
-      else if (qName.equals(LOCATOR)) {
+      } else if (qName.equals(LOCATOR)) {
-      }
-      else if (qName.equals(SERVER)) {
+      } else if (qName.equals(SERVER)) {
-      }
-      else if (qName.equals(PARTITION_RESOLVER)) {
+      } else if (qName.equals(PARTITION_RESOLVER)) {
-      }
-      else if (qName.equals(PARTITION_LISTENER)) {
+      } else if (qName.equals(PARTITION_LISTENER)) {
-      }
-      else if (qName.equals(FUNCTION)) {
-        endFunctionName();        
-      }
-      else if (qName.equals(FUNCTION_SERVICE)) {
-        endFunctionService();      
-      }
-      else if (qName.equals(TOP_SERIALIZER_REGISTRATION)) {
+      } else if (qName.equals(FUNCTION)) {
+        endFunctionName();
+      } else if (qName.equals(FUNCTION_SERVICE)) {
+        endFunctionService();
+      } else if (qName.equals(TOP_SERIALIZER_REGISTRATION)) {
-      }
-      else if (qName.equals(INITIALIZER)) {
+      } else if (qName.equals(INITIALIZER)) {
-      }
-      else if (qName.equals(SERIALIZER_REGISTRATION)) {
+      } else if (qName.equals(SERIALIZER_REGISTRATION)) {
-      }
-      else if (qName.equals(INSTANTIATOR_REGISTRATION)) {
+      } else if (qName.equals(INSTANTIATOR_REGISTRATION)) {
-      }
-      else if (qName.equals(RESOURCE_MANAGER)) {
+      } else if (qName.equals(RESOURCE_MANAGER)) {
-      }
-      else if (qName.equals(BACKUP)) {
+      } else if (qName.equals(BACKUP)) {
-      }
-      else if (qName.equals(PDX)) {
-        //nothing needed
-      }
-      else if (qName.equals(PDX_SERIALIZER)) {
+      } else if (qName.equals(PDX)) {
+        // nothing needed
+      } else if (qName.equals(PDX_SERIALIZER)) {
-      }
-      else if (qName.equals(COMPRESSOR)) {
+      } else if (qName.equals(COMPRESSOR)) {
-      }
-      else {
+      } else {
-          throw new CacheXmlException(LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
+          throw new CacheXmlException(
+              LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
-        
+
-    }
-    catch (CacheException ex) {
-      throw new SAXException(LocalizedStrings.CacheXmlParser_A_CACHEEXCEPTION_WAS_THROWN_WHILE_PARSING_XML.toLocalizedString(), ex);
+    } catch (CacheException ex) {
+      throw new SAXException(
+          LocalizedStrings.CacheXmlParser_A_CACHEEXCEPTION_WAS_THROWN_WHILE_PARSING_XML
+              .toLocalizedString(),
+          ex);
-      throw new CacheXmlException(
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), "GatewayTransportFilter"}));
-    
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
+          .toLocalizedString(new Object[] {d.getClass().getName(), "GatewayTransportFilter"}));
+
-    if(a instanceof GatewaySenderFactory){
-      GatewaySenderFactory senderFactory = (GatewaySenderFactory)a;
-      senderFactory.addGatewayTransportFilter((GatewayTransportFilter)d);
-    }else if (a instanceof GatewayReceiverFactory){
-      GatewayReceiverFactory receiverFactory = (GatewayReceiverFactory)a;
-      receiverFactory.addGatewayTransportFilter((GatewayTransportFilter)d);
-    }else{
+    if (a instanceof GatewaySenderFactory) {
+      GatewaySenderFactory senderFactory = (GatewaySenderFactory) a;
+      senderFactory.addGatewayTransportFilter((GatewayTransportFilter) d);
+    } else if (a instanceof GatewayReceiverFactory) {
+      GatewayReceiverFactory receiverFactory = (GatewayReceiverFactory) a;
+      receiverFactory.addGatewayTransportFilter((GatewayTransportFilter) d);
+    } else {
-            .toLocalizedString(GATEWAY_TRANSPORT_FILTER));
+              .toLocalizedString(GATEWAY_TRANSPORT_FILTER));
-  
+
-      throw new CacheXmlException(
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), "GatewayEventFilter"}));
+      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
+          .toLocalizedString(new Object[] {d.getClass().getName(), "GatewayEventFilter"}));
-      senderFactory.addGatewayEventFilter((GatewayEventFilter)d);
+      senderFactory.addGatewayEventFilter((GatewayEventFilter) d);
-      asyncEventQueueCreation.addGatewayEventFilter((GatewayEventFilter)d);
+      asyncEventQueueCreation.addGatewayEventFilter((GatewayEventFilter) d);
-            .toLocalizedString("GatewayEventFilter"));
+              .toLocalizedString("GatewayEventFilter"));
-  
+
-        LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] { d.getClass().getName(), "GatewayEventSubstitutionFilter"}));
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1.toLocalizedString(
+              new Object[] {d.getClass().getName(), "GatewayEventSubstitutionFilter"}));
-            .toLocalizedString("GatewayEventSubstitutionFilter"));
+              .toLocalizedString("GatewayEventSubstitutionFilter"));
-        throw new CacheXmlException(
+      throw new CacheXmlException(
-            .toLocalizedString(dependentElement));
+              .toLocalizedString(dependentElement));
-    return (GatewaySenderFactory)a;
+    return (GatewaySenderFactory) a;
-  
+
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_PDX_SERIALIZER.toLocalizedString(d.getClass().getName()));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_PDX_SERIALIZER
+              .toLocalizedString(d.getClass().getName()));
-  
+
-    
+
-  
+
-    }
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
+    } catch (Exception ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE.toLocalizedString(className));
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE
+              .toLocalizedString(className));
+   * 
-  private void endClientHaQueue() {
-  }
+  private void endClientHaQueue() {}
-   * @param globalOrLocal either the string {@link CacheXml#LOCAL_PROPERTIES} or {@link CacheXml#GLOBAL_PROPERTIES}
+   * 
+   * @param globalOrLocal either the string {@link CacheXml#LOCAL_PROPERTIES} or
+   *        {@link CacheXml#GLOBAL_PROPERTIES}
-  private void endPartitionProperites(String globalOrLocal)
-  {
+  private void endPartitionProperites(String globalOrLocal) {
-    while (! top.equals(globalOrLocal)) {
+    while (!top.equals(globalOrLocal)) {
-        throw new CacheXmlException(LocalizedStrings.CacheXmlParser_ONLY_A_PARAMETER_IS_ALLOWED_IN_THE_CONTEXT_OF_0.toLocalizedString(globalOrLocal));
+        throw new CacheXmlException(
+            LocalizedStrings.CacheXmlParser_ONLY_A_PARAMETER_IS_ALLOWED_IN_THE_CONTEXT_OF_0
+                .toLocalizedString(globalOrLocal));
-    }
-    catch (EmptyStackException firstTime) {
+    } catch (EmptyStackException firstTime) {
-    }
-    finally {
+    } finally {
-        logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_APPENDED_CHARACTER_DATA_0, chars));
-      }
-      else {
+        logger.trace(LogMarker.CACHE_XML_PARSER,
+            LocalizedMessage.create(
+                LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_APPENDED_CHARACTER_DATA_0,
+                chars));
+      } else {
-        logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_NEW_CHARACTER_DATA_0, chars));
+        logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(
+            LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_NEW_CHARACTER_DATA_0, chars));
-  public void startDocument() throws SAXException {
-  }
+  public void startDocument() throws SAXException {}
-  public void endDocument() throws SAXException {
-  }
+  public void endDocument() throws SAXException {}
-  public void startPrefixMapping(String prefix, String uri) throws SAXException {
-  }
+  public void startPrefixMapping(String prefix, String uri) throws SAXException {}
-  public void endPrefixMapping(String prefix) throws SAXException {
-  }
+  public void endPrefixMapping(String prefix) throws SAXException {}
-  public void ignorableWhitespace(char[] ch, int start, int length)
-      throws SAXException {
-  }
+  public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {}
-  public void processingInstruction(String target, String data)
-      throws SAXException {
-  }
+  public void processingInstruction(String target, String data) throws SAXException {}
-  public void skippedEntity(String name) throws SAXException {
-  }
+  public void skippedEntity(String name) throws SAXException {}
-   * Binds a jndi name of datasource to a context. @param atts Attributes of
-   * <jndi-name> jndi name and Datasource related information.
+   * Binds a jndi name of datasource to a context. @param atts Attributes of <jndi-name> jndi name
+   * and Datasource related information.
-   * Class that delegates all of the methods of a {@link
-   * org.xml.sax.helpers.DefaultHandler} to a
-   * {@link CacheXmlParser} that implements all of the methods of
-   * <code>DefaultHandler</code>, but <B>is not </B> a
-   * <code>DefaultHandler</code>.
+   * Class that delegates all of the methods of a {@link org.xml.sax.helpers.DefaultHandler} to a
+   * {@link CacheXmlParser} that implements all of the methods of <code>DefaultHandler</code>, but
+   * <B>is not </B> a <code>DefaultHandler</code>.
-  static class DefaultHandlerDelegate extends DefaultHandler2  {
+  static class DefaultHandlerDelegate extends DefaultHandler2 {
-     * Creates a new <code>DefaultHandlerDelegate</code> that delegates to the
-     * given <code>CacheXmlParser</code>.
+     * Creates a new <code>DefaultHandlerDelegate</code> that delegates to the given
+     * <code>CacheXmlParser</code>.
-    
+
-    public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws SAXException, IOException {
+    public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId)
+        throws SAXException, IOException {
-    public void startPrefixMapping(String prefix, String uri)
-        throws SAXException {
+    public void startPrefixMapping(String prefix, String uri) throws SAXException {
-    public void startElement(String uri, String localName, String qName,
-        Attributes attributes) throws SAXException {
+    public void startElement(String uri, String localName, String qName, Attributes attributes)
+        throws SAXException {
-    public void endElement(String uri, String localName, String qName)
-        throws SAXException {
+    public void endElement(String uri, String localName, String qName) throws SAXException {
-    public void characters(char[] ch, int start, int length)
-        throws SAXException {
+    public void characters(char[] ch, int start, int length) throws SAXException {
-    public void ignorableWhitespace(char[] ch, int start, int length)
-        throws SAXException {
+    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
-    public void processingInstruction(String target, String data)
-        throws SAXException {
+    public void processingInstruction(String target, String data) throws SAXException {
-  static class Parameter  {
+  static class Parameter {

