GEODE-3103: GfshRule no longer clutters output

 - GfshRule writes via a logger rather than StdOut.  This will make it no longer clutter precheckin runs or the nightly build.
 - Introduce ProcessLogger to capture output from the Gfsh JVM so that tests can assert against the output.

+import java.util.stream.Collectors;
+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;
-  private List<Process> processes = new ArrayList<>();
+  private List<GfshExecution> gfshExecutions;
-  public Process execute(String... commands) {
+  public GfshExecution execute(String... commands) {
-  public Process execute(GfshScript gfshScript) {
-    Process process;
+  protected GfshExecution execute(GfshScript gfshScript) {
+    GfshExecution gfshExecution;
-      process = gfshScript.toProcessBuilder(gfsh, temporaryFolder.getRoot()).start();
+      File workingDir = temporaryFolder.newFolder(gfshScript.getName());
+      Process process = toProcessBuilder(gfshScript, gfsh, workingDir).start();
+      gfshExecution = new GfshExecution(process, workingDir);
+      gfshExecutions.add(gfshExecution);
+      gfshScript.awaitIfNecessary(process);
-    processes.add(process);
-    gfshScript.awaitIfNecessary(process);
-
-    return process;
+    return gfshExecution;
+    gfshExecutions = new ArrayList<>();
-    stopMembersQuietly();
-    processes.forEach(Process::destroyForcibly);
-    processes.forEach((Process process) -> {
-      try {
-        // Process.destroyForcibly() may not terminate immediately
-        process.waitFor(1, TimeUnit.MINUTES);
-      } catch (InterruptedException ignore) {
-        // We ignore this exception so that we still attempt the rest of the cleanup.
-      }
-    });
+    gfshExecutions.stream().map(GfshExecution::getWorkingDir).collect(Collectors.toList())
+        .forEach(this::stopMembersQuietly);
+
+    gfshExecutions.stream().map(GfshExecution::getProcess).map(Process::destroyForcibly)
+        .forEach((Process process) -> {
+          try {
+            // Process.destroyForcibly() may not terminate immediately
+            process.waitFor(1, TimeUnit.MINUTES);
+          } catch (InterruptedException ignore) {
+            // We ignore this exception so that we still attempt the rest of the cleanup.
+          }
+        });
+
-  private void stopMembersQuietly() {
-    File[] directories = temporaryFolder.getRoot().listFiles(File::isDirectory);
+  protected ProcessBuilder toProcessBuilder(GfshScript gfshScript, Path gfshPath, File workingDir) {
+    List<String> commandsToExecute = new ArrayList<>();
+    commandsToExecute.add(gfshPath.toAbsolutePath().toString());
+
+    for (String command : gfshScript.getCommands()) {
+      commandsToExecute.add("-e " + command);
+    }
+
+    return new ProcessBuilder(commandsToExecute).directory(workingDir);
+  }
+
+  private void stopMembersQuietly(File parentDirectory) {
+    File[] potentalMemberDirectories = parentDirectory.listFiles(File::isDirectory);
-    Arrays.stream(directories).filter(isServerDir).forEach(this::stopServerInDir);
-    Arrays.stream(directories).filter(isLocatorDir).forEach(this::stopLocatorInDir);
+    Arrays.stream(potentalMemberDirectories).filter(isServerDir).forEach(this::stopServerInDir);
+    Arrays.stream(potentalMemberDirectories).filter(isLocatorDir).forEach(this::stopLocatorInDir);
-    GfshScript stopServerScript = new GfshScript("stop server --dir=" + dir.getAbsolutePath())
-        .awaitQuietlyAtMost(1, TimeUnit.MINUTES);
+    String stopServerCommand =
+        new CommandStringBuilder("stop server").addOption("dir", dir).toString();
+    GfshScript stopServerScript = new GfshScript(stopServerCommand).awaitQuietly();
-    GfshScript stopServerScript = new GfshScript("stop locator --dir=" + dir.getAbsolutePath())
-        .awaitQuietlyAtMost(1, TimeUnit.MINUTES);
+    String stopLocatorCommand =
+        new CommandStringBuilder("stop locator").addOption("dir", dir).toString();
+    GfshScript stopServerScript = new GfshScript(stopLocatorCommand).awaitQuietly();
+

INS26 INS26 INS40 INS40 INS31 INS31 UPD74 UPD43 UPD83 MOV83 UPD43 MOV43 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS44 MOV44 MOV44 UPD43 UPD42 UPD42 UPD42 MOV60 MOV54 INS41 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV21 INS70 MOV41 INS43 INS42 INS60 MOV21 INS60 MOV21 UPD42 INS43 INS42 INS7 INS32 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS42 INS43 MOV43 INS59 INS43 MOV43 INS59 INS42 UPD42 INS60 INS60 INS21 INS21 MOV21 INS42 MOV14 INS32 MOV42 INS90 INS32 INS43 INS43 INS42 INS14 UPD42 INS32 INS43 INS42 INS42 INS42 INS21 INS14 INS42 INS42 UPD42 INS42 UPD42 INS42 INS32 INS42 UPD42 INS42 INS32 INS43 INS59 MOV43 INS59 INS7 INS32 INS32 INS42 INS32 INS52 INS42 INS32 INS42 MOV90 INS42 INS42 INS74 INS32 INS42 INS42 INS32 INS43 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS14 INS42 INS32 UPD42 MOV42 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS90 UPD42 MOV42 INS42 INS32 INS42 INS90 INS43 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 UPD42 UPD42 INS14 INS42 INS45 MOV42 MOV43 INS42 INS14 INS42 INS45 MOV42 MOV43 INS42 INS42 INS42 INS32 MOV32 MOV42 INS43 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS45 INS43 INS45 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL27 DEL14 DEL42 DEL34 DEL40 DEL45 DEL32 DEL27 DEL14 DEL42 DEL34 DEL40