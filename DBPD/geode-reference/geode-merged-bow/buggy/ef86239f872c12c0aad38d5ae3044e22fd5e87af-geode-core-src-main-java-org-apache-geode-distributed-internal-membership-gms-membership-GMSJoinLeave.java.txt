GEODE-2193 a member is kicked out immediately after joining

The problem is happening because we send a shutdown message, initiating
election of a new coordinator, but the old ViewCreator is allowed to
send out a view announcing a new member.  The new coordinator manages
to send out a new view before the old ViewCreator sends out the new
member's view.  Other members ignore the old ViewCreator's view
because its view ID is old.  Then the reject the new member because
it has an old view ID and it isn't in their membership view.

initial view ID is x

new coordinator prepares view x+10
old coordinator prepares view x+1
other members install x+10, reject view x+1
new member joins in view x+1 when it receives view-prepare message
new member is rejected by other members because x+1 < x+10

-  private void sendJoinResponses(NetView newView, List<InternalDistributedMember> newMbrs) {
-    for (InternalDistributedMember mbr : newMbrs) {
-      JoinResponseMessage response = new JoinResponseMessage(mbr, newView, 0);
-      services.getMessenger().send(response);
-    }
-  }
-
+    if (services.getCancelCriterion().isCancelInProgress()
+        || services.getManager().shutdownInProgress()) {
+      throw new InterruptedException("shutting down");
+    }
+    if (services.getCancelCriterion().isCancelInProgress()
+        || services.getManager().shutdownInProgress()) {
+      throw new InterruptedException("shutting down");
+    }
-              it.remove();
+              if (currentView.contains(((JoinRequestMessage) m).getMemberID())) {
+                it.remove();
+              }
+      try {
+        viewCreator.join(1000);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+      }
-    services.getMessenger().addHandler(JoinRequestMessage.class, this);
-    services.getMessenger().addHandler(JoinResponseMessage.class, this);
-      boolean joinResponseSent = false;
+
-        return joinResponseSent;
+        return false;
-      ArrayList<DistributionMessage> requests = new ArrayList<>();
-      synchronized (viewRequests) {
-        if (viewRequests.size() > 0) {
-          requests.addAll(viewRequests);
-        } else {
-          return joinResponseSent;
-        }
-        viewRequests.clear();
-      }
-
-      for (DistributionMessage msg : requests) {
-        switch (msg.getDSFID()) {
-          case JOIN_REQUEST:
-            logger.debug("Informing to pending join requests {} myid {} coord {}", msg,
-                localAddress, v.getCoordinator());
-            if (!v.getCoordinator().equals(localAddress)) {
-              joinResponseSent = true;
-              // lets inform that coordinator has been changed
-              JoinResponseMessage jrm =
-                  new JoinResponseMessage(((JoinRequestMessage) msg).getMemberID(), v,
-                      ((JoinRequestMessage) msg).getRequestId());
-              services.getMessenger().send(jrm);
-            }
-          default:
-            break;
+      if (v.getCoordinator().equals(localAddress)) {
+        return false;
+      }
+
+      ArrayList<JoinRequestMessage> requests = new ArrayList<>();
+      synchronized (viewRequests) {
+        if (viewRequests.isEmpty()) {
+          return false;
+        }
+        for (Iterator<DistributionMessage> iterator = viewRequests.iterator(); iterator
+            .hasNext();) {
+          DistributionMessage msg = iterator.next();
+          switch (msg.getDSFID()) {
+            case JOIN_REQUEST:
+              requests.add((JoinRequestMessage) msg);
+              // TODO [bruce] if the view creator is just spinning up I don't think we should do
+              // this remove
+              iterator.remove();
+              break;
+            default:
+              break;
+          }
-      return joinResponseSent;
+      if (requests.isEmpty()) {
+        return false;
+      }
+
+      for (JoinRequestMessage msg : requests) {
+        logger.debug("Sending coordinator to pending join request from {} myid {} coord {}",
+            msg.getSender(), localAddress, v.getCoordinator());
+        JoinResponseMessage jrm = new JoinResponseMessage(msg.getMemberID(), v, msg.getRequestId());
+        services.getMessenger().send(jrm);
+      }
+
+      return true;

INS25 INS25 MOV60 INS27 INS8 INS27 INS8 INS25 INS25 INS32 INS32 INS53 INS32 INS32 INS53 INS54 MOV38 INS8 MOV32 UPD74 INS32 INS8 INS9 INS32 INS42 INS32 INS42 INS14 INS32 INS42 INS32 INS42 INS14 INS8 INS12 INS41 INS43 INS25 INS24 INS42 INS42 INS41 INS43 INS21 MOV60 MOV21 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS45 INS21 INS44 INS8 INS9 INS9 INS42 INS32 INS8 INS58 INS32 INS8 INS9 INS42 MOV32 MOV43 INS42 INS42 INS32 INS43 INS42 INS21 MOV42 UPD42 MOV42 INS41 INS74 INS59 INS42 INS42 INS60 INS50 UPD45 INS32 INS42 INS42 INS34 INS42 INS32 INS9 INS43 MOV43 INS42 INS32 MOV43 INS59 MOV32 MOV49 INS21 INS21 INS10 INS49 INS10 MOV42 INS42 MOV43 INS32 INS32 INS42 INS42 MOV42 INS42 INS42 INS32 MOV32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 MOV11 UPD42 UPD42 INS8 INS25 INS32 MOV8 INS42 INS42 INS32 INS36 INS42 INS11 INS43 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL52 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL52 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL36 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL41 DEL8 DEL25 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL21 DEL38 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL49 DEL10 DEL50 DEL42