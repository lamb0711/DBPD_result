GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.CancelException;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.distributed.internal.ClusterConfigurationService;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.distributed.internal.DistributionConfigImpl;
-import org.apache.geode.distributed.internal.DistributionStats;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.distributed.internal.PoolStatHelper;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
-import org.apache.geode.internal.DSFIDFactory;
-import org.apache.geode.internal.GemFireVersion;
-import org.apache.geode.internal.Version;
-import org.apache.geode.internal.VersionedDataInputStream;
-import org.apache.geode.internal.VersionedDataOutputStream;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.tier.Acceptor;
-import org.apache.geode.internal.cache.tier.sockets.HandShake;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.net.SocketCreator;
-import org.apache.geode.internal.net.SocketCreatorFactory;
-import org.apache.geode.internal.security.SecurableCommunicationChannel;
-import org.apache.logging.log4j.Logger;
-
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.CancelException;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.distributed.internal.ClusterConfigurationService;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionConfigImpl;
+import org.apache.geode.distributed.internal.DistributionStats;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.PoolStatHelper;
+import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
+import org.apache.geode.internal.DSFIDFactory;
+import org.apache.geode.internal.GemFireVersion;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.VersionedDataInputStream;
+import org.apache.geode.internal.VersionedDataOutputStream;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.tier.Acceptor;
+import org.apache.geode.internal.cache.tier.sockets.HandShake;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.net.SocketCreator;
+import org.apache.geode.internal.net.SocketCreatorFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
+
-  private static int MAX_POOL_SIZE = Integer
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.MAX_POOL_SIZE", 100).intValue();
+  private static int MAX_POOL_SIZE =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.MAX_POOL_SIZE", 100);
-      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000)
-          .intValue();
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000);
-  private static final int P2P_BACKLOG = Integer.getInteger("p2p.backlog", 1000).intValue();
-  private static final int BACKLOG = Integer
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.BACKLOG", P2P_BACKLOG).intValue();
+  private static final int P2P_BACKLOG = Integer.getInteger("p2p.backlog", 1000);
+  private static final int BACKLOG =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.BACKLOG", P2P_BACKLOG);
-  /**
+  /*
-  public void restarting(InternalDistributedSystem ds, GemFireCacheImpl cache,
+  public void restarting(InternalDistributedSystem ds, InternalCache cache,
-    this.log.info("TcpServer@" + System.identityHashCode(this)
-        + " restarting: completed.  Server thread=" + serverThread + "@"
-        + System.identityHashCode(serverThread) + ";alive=" + serverThread.isAlive());
+    log.info("TcpServer@" + System.identityHashCode(this)
+        + " restarting: completed.  Server thread=" + this.serverThread + '@'
+        + System.identityHashCode(this.serverThread) + ";alive=" + this.serverThread.isAlive());
-        } catch (IOException e) {
+        } catch (IOException ignore) {
-      } catch (InterruptedException e) {
+      } catch (InterruptedException ignore) {
-      } catch (EOFException ex) {
+      } catch (EOFException ignore) {
-      } catch (CancelException ex) {
+      } catch (CancelException ignore) {
-        } catch (IOException e) {
+        } catch (IOException ignore) {
-   * @param ordinal
-   *
-        short o = ((Short) entry.getValue()).shortValue();
+        short o = (Short) entry.getValue();
-          return ((Integer) entry.getKey()).intValue();
+          return (Integer) entry.getKey();
-          closestGV = ((Integer) entry.getKey()).intValue();
+          closestGV = (Integer) entry.getKey();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 MOV32 MOV32 MOV32 MOV32 UPD43 UPD42 INS42 INS22 INS13 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 UPD42 MOV11 UPD42 UPD42 UPD42 MOV11 UPD42 MOV11 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL45 DEL42 DEL42 DEL42 DEL65 DEL36 DEL42 DEL32 DEL36 DEL42 DEL32 DEL36 DEL42 DEL32