GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import java.util.Collections;
-import org.apache.geode.cache.Cache;
+import org.apache.geode.internal.cache.InternalCache;
-  private static final Set loggedClasses = new HashSet();
-
-  private static final ConcurrentHashMap<String, DataSerializer> classesToSerializers =
-      new ConcurrentHashMap<String, DataSerializer>();
+  private static final Map<String, DataSerializer> classesToSerializers = new ConcurrentHashMap<>();
-  private static enum SERIALIZATION_VERSION {
+  private enum SERIALIZATION_VERSION {
-    v660, // includes 6.6.0.x and 6.6.1.x. Note that no serialization changes were made in
-          // 6.6 until 6.6.2
-    v662 // 6.6.2.x or later
-    // NOTE if you add a new constant make sure and update "latestVersion".
+    // includes 6.6.0.x and 6.6.1.x. Note that no serialization changes were made in 6.6 until 6.6.2
+    v660,
+    // 6.6.2.x or later NOTE if you add a new constant make sure and update "latestVersion".
+    v662
-    if (serializationVersionTxt == null || serializationVersionTxt.equals("")) {
+    if (serializationVersionTxt == null || serializationVersionTxt.isEmpty()) {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-          public final boolean toData(Object o, DataOutput out) throws IOException {
+          public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-    // We can't add this here because it would cause writeObject to not be compatible with previous
-    // releases
-    // classesToSerializers.put("java.util.concurrent.ConcurrentHashMap",
-    // new WellKnownDS() {
-    // @Override
-    // public final boolean toData(Object o, DataOutput out)
-    // throws IOException {
-    // out.writeByte(CONCURRENT_HASH_MAP);
-    // writeConcurrentHashMap((ConcurrentHashMap<?, ?>) o, out);
-    // return true;
-    // }});
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-      public final boolean toData(Object o, DataOutput out) throws IOException {
+      public boolean toData(Object o, DataOutput out) throws IOException {
-        public final boolean toData(Object o, DataOutput out) throws IOException {
+        public boolean toData(Object o, DataOutput out) throws IOException {
-        public final boolean toData(Object o, DataOutput out) throws IOException {
+        public boolean toData(Object o, DataOutput out) throws IOException {
-        public final boolean toData(Object o, DataOutput out) throws IOException {
+        public boolean toData(Object o, DataOutput out) throws IOException {
-        public final boolean toData(Object o, DataOutput out) throws IOException {
+        public boolean toData(Object o, DataOutput out) throws IOException {
-   * Maps the id of a serializer to its <code>DataSerializer</code>.
+   * Maps the id of a serializer to its {@code DataSerializer}.
-      new ConcurrentHashMap<String, SerializerAttributesHolder>();
+      new ConcurrentHashMap<>();
-      new ConcurrentHashMap<Integer, SerializerAttributesHolder>();
+      new ConcurrentHashMap<>();
-      new ConcurrentHashMap<String, SerializerAttributesHolder>();
+      new ConcurrentHashMap<>();
-   * <code>RegistrationListener</code>s that receive callbacks when <code>DataSerializer</code>s and
-   * <code>Instantiator</code>s are registered. Note: copy-on-write access used for this set
+   * {@code RegistrationListener}s that receive callbacks when {@code DataSerializer}s and
+   * {@code Instantiator}s are registered. Note: copy-on-write access used for this set
-  private static final Object listenersSync = new Object();
-  //////////////////// Static Methods ////////////////////
+  private static final Object listenersSync = new Object();
-  private static final int ubyteToInt(byte ub) {
+  private static int ubyteToInt(byte ub) {
-   * Instantiates an instance of <code>DataSerializer</code>
+   * Instantiates an instance of {@code DataSerializer}
-    } catch (NoSuchMethodException ex) {
+    } catch (NoSuchMethodException ignored) {
-    } catch (IllegalAccessException ex) {
+    } catch (IllegalAccessException ignored) {
-      RuntimeException ex2 = new IllegalArgumentException(
+      throw new IllegalArgumentException(
-              .toLocalizedString(c.getName()));
-      ex2.initCause(ex);
-      throw ex2;
+              .toLocalizedString(c.getName()),
+          ex);
-      RuntimeException ex2 = new IllegalArgumentException(
+      throw new IllegalArgumentException(
-              .toLocalizedString(c.getName()));
-      ex2.initCause(ex);
-      throw ex2;
+              .toLocalizedString(c.getName()),
+          ex);
-    // This method is only called when server connection and
-    // CacheClientUpdaterThread
+    // This method is only called when server connection and CacheClientUpdaterThread
-   * Registers a <code>DataSerializer</code> instance with the data serialization framework.
+   * Registers a {@code DataSerializer} instance with the data serialization framework.
-   * @param distribute Should the registered <code>DataSerializer</code> be distributed to other
-   *        members of the distributed system?
+   * @param distribute Should the registered {@code DataSerializer} be distributed to other members
+   *        of the distributed system?
-    {
-      for (int i = 0; i < classes.length; i++) {
-        if (classes[i] == null) {
-          final StringId msg =
-              LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_A_NULL_ELEMENT;
-          throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
-        } else if (classes[i].isArray()) {
-          final StringId msg =
-              LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_AN_ARRAY_CLASS_WHICH_IS_NOT_ALLOWED_SINCE_ARRAYS_HAVE_BUILTIN_SUPPORT;
-          throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
-        }
+
+    for (Class aClass : classes) {
+      if (aClass == null) {
+        final StringId msg =
+            LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_A_NULL_ELEMENT;
+        throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
+      } else if (aClass.isArray()) {
+        final StringId msg =
+            LocalizedStrings.InternalDataSerializer_THE_DATASERIALIZER_GETSUPPORTEDCLASSES_METHOD_FOR_0_RETURNED_AN_ARRAY_THAT_CONTAINED_AN_ARRAY_CLASS_WHICH_IS_NOT_ALLOWED_SINCE_ARRAYS_HAVE_BUILTIN_SUPPORT;
+        throw new IllegalArgumentException(msg.toLocalizedString(s.getClass().getName()));
-    final Integer idx = Integer.valueOf(id);
+    final Integer idx = id;
-                  .toLocalizedString(
-                      new Object[] {other.getClass().getName(), Integer.valueOf(other.getId())}));
+                  .toLocalizedString(new Object[] {other.getClass().getName(), other.getId()}));
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = GemFireCacheImpl.getInstance();
-   * Marks a <code>DataSerializer</code> className for registration with the data serialization
+   * Marks a {@code DataSerializer} className for registration with the data serialization
-   * Marks a <code>DataSerializer</code> className for registration with the data serialization
+   * Marks a {@code DataSerializer} className for registration with the data serialization
-   * @param className
-    if (className == null || className.trim().equals("")) {
+    if (className == null || className.trim().isEmpty()) {
-                .toLocalizedString(new Object[] {oldValue.getClass().getName(),
-                    Integer.valueOf(oldValue.getId())}));
+                .toLocalizedString(new Object[] {oldValue.getClass().getName(), oldValue.getId()}));
-    public SerializerAttributesHolder() {}
+    SerializerAttributesHolder() {}
-    public SerializerAttributesHolder(String name, EventID event, ClientProxyMembershipID proxy,
-        int id) {
+    SerializerAttributesHolder(String name, EventID event, ClientProxyMembershipID proxy, int id) {
+    @Override
-          + this.eventId + "]";
+          + this.eventId + ']';
-    Cache cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = GemFireCacheImpl.getInstance();
-      {
-        byte[] idBytes = new byte[4];
-        Part.encodeInt(dataSerializer.getId(), idBytes);
-        serializedDataSerializer[1] = idBytes;
-      }
-    } catch (IOException e) {
+
+      byte[] idBytes = new byte[4];
+      Part.encodeInt(dataSerializer.getId(), idBytes);
+      serializedDataSerializer[1] = idBytes;
+    } catch (IOException ignored) {
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = GemFireCacheImpl.getInstance();
-   * Unregisters a <code>Serializer</code> that was previously registered with the data
-   * serialization framework.
+   * Unregisters a {@code Serializer} that was previously registered with the data serialization
+   * framework.
-    final Integer idx = Integer.valueOf(id);
+    final Integer idx = id;
-   * Returns the <code>DataSerializer</code> for the given class. If no class has been registered,
-   * <code>null</code> is returned. Remember that it is okay to return <code>null</code> in this
-   * case. This method is invoked when writing an object. If a serializer isn't available, then its
-   * the user's fault.
+   * Returns the {@code DataSerializer} for the given class. If no class has been registered,
+   * {@code null} is returned. Remember that it is okay to return {@code null} in this case. This
+   * method is invoked when writing an object. If a serializer isn't available, then its the user's
+   * fault.
-  public static DataSerializer getSerializer(Class c) {
+  private static DataSerializer getSerializer(Class c) {
-        } catch (ClassNotFoundException cnfe) {
+        } catch (ClassNotFoundException ignored) {
-   * Returns the <code>DataSerializer</code> with the given id.
+   * Returns the {@code DataSerializer} with the given id.
-    final Integer idx = Integer.valueOf(id);
+    final Integer idx = id;
-      // SerializerAttributesHolder sah = idsToHolders.get(idx);
-        } catch (ClassNotFoundException cnfe) {
+        } catch (ClassNotFoundException ignored) {
-    Iterator it = idsToSerializers.values().iterator();
-    while (it.hasNext()) {
-      Object v = it.next();
+    for (Object v : idsToSerializers.values()) {
-      } catch (ClassNotFoundException cnfe) {
+      } catch (ClassNotFoundException ignored) {
-    Collection<SerializerAttributesHolder> coll =
-        new ArrayList<InternalDataSerializer.SerializerAttributesHolder>(size);
+    Collection<SerializerAttributesHolder> coll = new ArrayList<>(size);
-    Iterator it = idsToSerializers.values().iterator();
-    while (it.hasNext()) {
-      Object v = it.next();
+    for (Object v : idsToSerializers.values()) {
-    Iterator<Entry<String, SerializerAttributesHolder>> iterator =
-        dsClassesToHolders.entrySet().iterator();
-    while (iterator.hasNext()) {
-      SerializerAttributesHolder v = iterator.next().getValue();
+    for (final Entry<String, SerializerAttributesHolder> stringSerializerAttributesHolderEntry : dsClassesToHolders
+        .entrySet()) {
+      SerializerAttributesHolder v = stringSerializerAttributesHolderEntry.getValue();
-   * Persist this class's map to out
+   * Persist this class's map to out TODO: saveRegistrations is unused
-    Iterator it = idsToSerializers.values().iterator();
-    while (it.hasNext()) {
-      Object v = it.next();
+    for (Object v : idsToSerializers.values()) {
-        } catch (ClassNotFoundException cnfe) {
+        } catch (ClassNotFoundException ignored) {
-   * Read the data from in and register it with this class.
+   * Read the data from in and register it with this class. TODO: loadRegistrations is unused
-      } catch (ClassNotFoundException ex) {
+      } catch (ClassNotFoundException ignored) {
-   * Adds a <code>RegistrationListener</code> that will receive callbacks when
-   * <code>DataSerializer</code>s and <code>Instantiator</code>s are registered.
+   * Adds a {@code RegistrationListener} that will receive callbacks when {@code DataSerializer}s
+   * and {@code Instantiator}s are registered.
-   * Removes a <code>RegistrationListener</code> so that it no longer receives callbacks.
+   * Removes a {@code RegistrationListener} so that it no longer receives callbacks.
-   * Alerts all <code>RegistrationListener</code>s that a new <code>DataSerializer</code> has been
-   * registered
+   * Alerts all {@code RegistrationListener}s that a new {@code DataSerializer} has been registered
-    Iterator iter = listeners.iterator();
-    while (iter.hasNext()) {
-      RegistrationListener listener = (RegistrationListener) iter.next();
+    for (Object listener1 : listeners) {
+      RegistrationListener listener = (RegistrationListener) listener1;
-   * Alerts all <code>RegistrationListener</code>s that a new <code>Instantiator</code> has been
-   * registered
+   * Alerts all {@code RegistrationListener}s that a new {@code Instantiator} has been registered
-    Iterator iter = listeners.iterator();
-    while (iter.hasNext()) {
-      RegistrationListener listener = (RegistrationListener) iter.next();
+    for (Object listener1 : listeners) {
+      RegistrationListener listener = (RegistrationListener) listener1;
-  ///////////////// START DataSerializer Implementation Methods ///////////
-
-  public static final void writeDSFIDHeader(int dsfid, DataOutput out) throws IOException {
+  public static void writeDSFIDHeader(int dsfid, DataOutput out) throws IOException {
-  public static final void writeDSFID(DataSerializableFixedID o, DataOutput out)
-      throws IOException {
+  public static void writeDSFID(DataSerializableFixedID o, DataOutput out) throws IOException {
-        String existingClassName =
-            (String) dsfidToClassMap.putIfAbsent(Integer.valueOf(dsfid), newClassName);
+        String existingClassName = (String) dsfidToClassMap.putIfAbsent(dsfid, newClassName);
-    } catch (CancelException ex) {
+    } catch (CancelException | ToDataException | GemFireRethrowable ex) {
-    } catch (ToDataException ex) {
-      throw ex;
-    } catch (GemFireRethrowable ex) {
-      throw ex;
-   * Data serializes an instance of a well-known class to the given <code>DataOutput</code>.
+   * Data serializes an instance of a well-known class to the given {@code DataOutput}.
-   * @return <code>true</code> if <code>o</code> was actually written to <code>out</code>
+   * @return {@code true} if {@code o} was actually written to {@code out}
-  public static boolean writeWellKnownObject(Object o, DataOutput out,
+  private static boolean writeWellKnownObject(Object o, DataOutput out,
-   * registered <code>DataSerializer</code>) to the given <code>DataOutput</code>.
+   * registered {@code DataSerializer}) to the given {@code DataOutput}.
-   * @return <code>true</code> if <code>o</code> was written to <code>out</code>.
+   * @return {@code true} if {@code o} was written to {@code out}.
-      boolean toDataResult = false;
+      boolean toDataResult;
-      } catch (ToDataException ex) {
-        throw ex;
-      } catch (CancelException ex) {
+      } catch (CancelException | ToDataException | GemFireRethrowable ex) {
-      } catch (GemFireRethrowable ex) {
-        throw ex;
-                .toLocalizedString(new Object[] {Integer.valueOf(serializer.getId()),
-                    serializer.getClass().getName(), o.getClass().getName()}));
+                .toLocalizedString(serializer.getId(), serializer.getClass().getName(),
+                    o.getClass().getName()));
-      if (pdxSerializer != null) {
-        return writePdx(out, null, o, pdxSerializer);
-      }
-      return false;
+      return pdxSerializer != null && writePdx(out, null, o, pdxSerializer);
-        GemFireCacheImpl gfc = GemFireCacheImpl
+        InternalCache internalCache = GemFireCacheImpl
-        TypeRegistry tr = gfc.getPdxRegistry();
+        TypeRegistry tr = internalCache.getPdxRegistry();
-        PdxWriterImpl writer;
-        {
-          PdxOutputStream os;
-          if (out instanceof HeapDataOutputStream) {
-            os = new PdxOutputStream((HeapDataOutputStream) out);
-          } else {
-            os = new PdxOutputStream();
-          }
-          writer = new PdxWriterImpl(tr, o, aci, os);
+        PdxOutputStream os;
+        if (out instanceof HeapDataOutputStream) {
+          os = new PdxOutputStream((HeapDataOutputStream) out);
+        } else {
+          os = new PdxOutputStream();
+        PdxWriterImpl writer = new PdxWriterImpl(tr, o, aci, os);
+
-        } catch (ToDataException ex) {
-          throw ex;
-        } catch (CancelException ex) {
-          // Serializing a PDX can result in a cache closed exception. Just rethrow
-          throw ex;
-        } catch (NonPortableClassException ex) {
-          throw ex;
-        } catch (GemFireRethrowable ex) {
+        } catch (ToDataException | CancelException | NonPortableClassException
+            | GemFireRethrowable ex) {
-        getDMStats(gfc).incPdxSerialization(bytesWritten);
+        getDMStats(internalCache).incPdxSerialization(bytesWritten);
-  public static void checkPdxCompatible(Object o, boolean ensurePdxCompatibility) {
+  private static void checkPdxCompatible(Object o, boolean ensurePdxCompatibility) {
-    return ((o instanceof Function) // fixes 43691
+    return (o instanceof Function // fixes 43691
-   * Reads an object that was serialized by a customer ("user") <code>DataSerializer</code> from the
-   * given <code>DataInput</code>.
+   * Reads an object that was serialized by a customer ("user") {@code DataSerializer} from the
+   * given {@code DataInput}.
-          .toLocalizedString(new Object[] {Integer.valueOf(serializerId)}));
+          .toLocalizedString(new Object[] {serializerId}));
-   * Checks to make sure a <code>DataOutput</code> is not <code>null</code>.
+   * Checks to make sure a {@code DataOutput} is not {@code null}.
-   * @throws NullPointerException If <code>out</code> is <code>null</code>
+   * @throws NullPointerException If {@code out} is {@code null}
-   * Checks to make sure a <code>DataInput</code> is not <code>null</code>.
+   * Checks to make sure a {@code DataInput} is not {@code null}.
-   * @throws NullPointerException If <code>in</code> is <code>null</code>
+   * @throws NullPointerException If {@code in} is {@code null}
-
-
-   * Writes a <code>Set</code> to a <code>DataOutput</code>.
-   *
+   * Writes a {@code Set} to a {@code DataOutput}.
-   *
-   * <code>Set</code>) are different from the <code>write</code>XXX methods of the external
-   * <code>DataSerializer</code>.
+   * {@code Set}) are different from the {@code write}XXX methods of the external
+   * {@code DataSerializer}.
-   * @throws IOException A problem occurs while writing to <code>out</code>
+   * @throws IOException A problem occurs while writing to {@code out}
-
-
-   * Reads a <code>Set</code> from a <code>DataInput</code>.
+   * Reads a {@code Set} from a {@code DataInput}.
-   * @throws IOException A problem occurs while writing to <code>out</code>
-   * @throws ClassNotFoundException The class of one of the <Code>HashSet</code>'s elements cannot
-   *         be found.
+   * @throws IOException A problem occurs while writing to {@code out}
+   * @throws ClassNotFoundException The class of one of the {@code HashSet}'s elements cannot be
+   *         found.
-   * Reads a <code>Set</code> from a <code>DataInput</code> into the given non-null collection.
-   * Returns true if collection read is non-null else returns false.
+   * Reads a {@code Set} from a {@code DataInput} into the given non-null collection. Returns true
+   * if collection read is non-null else returns false. TODO: readCollection is unused
-   * @throws IOException A problem occurs while reading from <code>in</code>
-   * @throws ClassNotFoundException The class of one of the <Code>Set</code>'s elements cannot be
-   *         found.
+   * @throws IOException A problem occurs while reading from {@code in}
+   * @throws ClassNotFoundException The class of one of the {@code Set}'s elements cannot be found.
-      E element;
-        element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.<E>readObject(in);
-      for (Iterator it = set.iterator(); it.hasNext();) {
-        Long l = (Long) it.next();
+      for (Object aSet : set) {
+        Long l = (Long) aSet;
-          out.writeLong(l.longValue());
+          out.writeLong(l);
-        result.add(Long.valueOf(l));
+        result.add(l);
-   * write a set of Long objects
+   * write a set of Long objects TODO: writeListOfLongs is unused
-      for (Iterator it = list.iterator(); it.hasNext();) {
-        Long l = (Long) it.next();
+      for (Object aList : list) {
+        Long l = (Long) aList;
-          out.writeLong(l.longValue());
+          out.writeLong(l);
-        result.add(Long.valueOf(l));
+        result.add(l);
-   * Writes the type code for a primitive type Class to <code>DataOutput</code>.
+   * Writes the type code for a primitive type Class to {@code DataOutput}.
-  public static final void writePrimitiveClass(Class c, DataOutput out) throws IOException {
+  public static void writePrimitiveClass(Class c, DataOutput out) throws IOException {
-  public static final Class decodePrimitiveClass(byte typeCode) {
+  public static Class decodePrimitiveClass(byte typeCode) {
-            .toLocalizedString(Byte.valueOf(typeCode)));
+            .toLocalizedString(typeCode));
-   * Reads a <code>TimeUnit</code> from a <code>DataInput</code>.
+   * Reads a {@code TimeUnit} from a {@code DataInput}.
-   * @throws IOException A problem occurs while writing to <code>out</code>
+   * @throws IOException A problem occurs while writing to {@code out}
-  public static TimeUnit readTimeUnit(DataInput in) throws IOException {
-
+  private static TimeUnit readTimeUnit(DataInput in) throws IOException {
-        throw new IOException(LocalizedStrings.DataSerializer_UNKNOWN_TIMEUNIT_TYPE_0
-            .toLocalizedString(Byte.valueOf(type)));
+        throw new IOException(
+            LocalizedStrings.DataSerializer_UNKNOWN_TIMEUNIT_TYPE_0.toLocalizedString(type));
-  public static void writeTimestamp(Timestamp o, DataOutput out) throws IOException {
+  private static void writeTimestamp(Timestamp o, DataOutput out) throws IOException {
-  public static Timestamp readTimestamp(DataInput in) throws IOException {
+  private static Timestamp readTimestamp(DataInput in) throws IOException {
-  public static void writeUUID(java.util.UUID o, DataOutput out) throws IOException {
+  private static void writeUUID(java.util.UUID o, DataOutput out) throws IOException {
-  public static UUID readUUID(DataInput in) throws IOException {
+  private static UUID readUUID(DataInput in) throws IOException {
-  public static void writeBigDecimal(BigDecimal o, DataOutput out) throws IOException {
+  private static void writeBigDecimal(BigDecimal o, DataOutput out) throws IOException {
-  public static BigDecimal readBigDecimal(DataInput in) throws IOException {
+  private static BigDecimal readBigDecimal(DataInput in) throws IOException {
-  public static void writeBigInteger(BigInteger o, DataOutput out) throws IOException {
+  private static void writeBigInteger(BigInteger o, DataOutput out) throws IOException {
-  public static BigInteger readBigInteger(DataInput in) throws IOException {
+  private static BigInteger readBigInteger(DataInput in) throws IOException {
-
-  // private static final HashSet seenClassNames = DEBUG_DSFID ? new HashSet(): null;
-  public static final void writeUserDataSerializableHeader(int classId, DataOutput out)
+  public static void writeUserDataSerializableHeader(int classId, DataOutput out)
-   * Writes given number of characters from array of <code>char</code>s to a
-   * <code>DataOutput</code>.
+   * Writes given number of characters from array of {@code char}s to a {@code DataOutput}.
-   * @throws IOException A problem occurs while writing to <code>out</code>
+   * @throws IOException A problem occurs while writing to {@code out}
-
-  public static final boolean isSerializedNull(byte[] serializedForm) {
+  public static boolean isSerializedNull(byte[] serializedForm) {
-  public static final void basicWriteObject(Object o, DataOutput out,
-      boolean ensurePdxCompatibility) throws IOException {
-
+  public static void basicWriteObject(Object o, DataOutput out, boolean ensurePdxCompatibility)
+      throws IOException {
-        // if (DEBUG_DSFID) {
-        // if (logger.infoEnabled()) {
-        // boolean alreadySeen;
-        // synchronized (seenClassNames) {
-        // alreadySeen = seenClassNames.add(c.getName());
-        // }
-        // if (alreadySeen) {
-        // // this class should be made a DSFID if it is a product class
-        // logger.info("DataSerialized class " + c.getName(), new RuntimeException("CALLSTACK"));
-        // }
-        // }
-        // }
-      if (disallowJavaSerialization() && (o instanceof Serializable)) {
+      if (disallowJavaSerialization() && o instanceof Serializable) {
-      // if (out instanceof DSDataOutput) {
-      // // Unwrap the DSDataOutput to avoid one layer of
-      // // delegation. This also prevents us from having to flush
-      // // the ObjectOutputStream.
-      // out = ((DSDataOutput) out).out;
-      // }
-   * @throws IOException
-    int enumId = (dsId << 24) | (tmp & 0xFFFFFF);
+    int enumId = dsId << 24 | tmp & 0xFFFFFF;
-    GemFireCacheImpl gfc = GemFireCacheImpl
+    InternalCache internalCache = GemFireCacheImpl
-    TypeRegistry tr = gfc.getPdxRegistry();
+    TypeRegistry tr = internalCache.getPdxRegistry();
-      getDMStats(gfc).incPdxInstanceCreations();
+      getDMStats(internalCache).incPdxInstanceCreations();
-    GemFireCacheImpl gfc = GemFireCacheImpl.getInstance();
-    if (gfc != null && gfc.getPdxReadSerializedByAnyGemFireServices()) {
+    InternalCache internalCache = GemFireCacheImpl.getInstance();
+    if (internalCache != null && internalCache.getPdxReadSerializedByAnyGemFireServices()) {
-      getDMStats(gfc).incPdxInstanceCreations();
+      getDMStats(internalCache).incPdxInstanceCreations();
-
-   * @throws IOException
-  public static final void writeSerializableObject(Object o, DataOutput out) throws IOException {
+  public static void writeSerializableObject(Object o, DataOutput out) throws IOException {
-
-          // public void write(byte[] b) throws IOException {
-          // out.write(b);
-          // }
-
-          // public void write(byte[] b, int off, int len)
-          // throws IOException {
-          // out.write(b, off, len);
-          // }
-  public static final void invokeToData(Object ds, DataOutput out) throws IOException {
-    boolean isDSFID = (ds instanceof DataSerializableFixedID);
+  public static void invokeToData(Object ds, DataOutput out) throws IOException {
+    boolean isDSFID = ds instanceof DataSerializableFixedID;
-      Version[] versions = null;
+        Version[] versions = null;
-          for (int i = 0; i < versions.length; i++) {
+          for (Version version : versions) {
-            if (v.compareTo(versions[i]) < 0) {
-              ds.getClass().getMethod("toDataPre_" + versions[i].getMethodSuffix(),
+            if (v.compareTo(version) < 0) {
+              ds.getClass().getMethod("toDataPre_" + version.getMethodSuffix(),
-    } catch (ToDataException ex) {
-      throw ex;
-    } catch (CancelException ex) {
+    } catch (CancelException | ToDataException | GemFireRethrowable ex) {
-    } catch (GemFireRethrowable ex) {
-      throw ex;
-  public static final void invokeFromData(Object ds, DataInput in)
+  public static void invokeFromData(Object ds, DataInput in)
-      Version[] versions = null;
+        Version[] versions = null;
-          for (int i = 0; i < versions.length; i++) {
+          for (Version version : versions) {
-            if (v.compareTo(versions[i]) < 0) {
-              ds.getClass().getMethod("fromDataPre" + "_" + versions[i].getMethodSuffix(),
+            if (v.compareTo(version) < 0) {
+              ds.getClass().getMethod("fromDataPre" + '_' + version.getMethodSuffix(),
-    } catch (EOFException ex) {
+    } catch (EOFException | ClassNotFoundException | CacheClosedException ex) {
-    } catch (ClassNotFoundException ex) {
-      throw ex;
-    } catch (CacheClosedException cce) {
-      throw cce;
-      SerializationException ex2 = new SerializationException(
+      throw new SerializationException(
-      throw ex2;
-  private static final Object readDataSerializable(final DataInput in)
+  private static Object readDataSerializable(final DataInput in)
-      SerializationException ex2 = new SerializationException(
+      throw new SerializationException(
-      throw ex2;
-  private static final Object readDataSerializableFixedID(final DataInput in)
+  private static Object readDataSerializableFixedID(final DataInput in)
-      SerializationException ex2 = new SerializationException(
+      throw new SerializationException(
-      throw ex2;
-  public static final Version getVersionForDataStream(DataInput in) {
+  public static Version getVersionForDataStream(DataInput in) {
-  public static final Version getVersionForDataStreamOrNull(DataInput in) {
+  public static Version getVersionForDataStreamOrNull(DataInput in) {
-  public static final Version getVersionForDataStream(DataOutput out) {
+  public static Version getVersionForDataStream(DataOutput out) {
-  public static final Version getVersionForDataStreamOrNull(DataOutput out) {
+  public static Version getVersionForDataStreamOrNull(DataOutput out) {
-  public static final byte NULL_ARRAY = -1; // array is null
+  // array is null
+  public static final byte NULL_ARRAY = -1;
+
+   * array len encoded as unsigned short in next 2 bytes
+   *
-  private static final byte SHORT_ARRAY_LEN = -2; // array len encoded as unsigned short in next 2
-                                                  // bytes
+  private static final byte SHORT_ARRAY_LEN = -2;
+
+   * array len encoded as int in next 4 bytes
+   *
-  public static final byte INT_ARRAY_LEN = -3; // array len encoded as int in next 4 bytes
-  private static final int MAX_BYTE_ARRAY_LEN = ((byte) -4) & 0xFF;
+  public static final byte INT_ARRAY_LEN = -3;
+
+  private static final int MAX_BYTE_ARRAY_LEN = (byte) -4 & 0xFF;
+   *
+   * TODO: writeListOfIntegers is unused
-        out.writeInt(list.get(i).intValue());
+        out.writeInt(list.get(i));
-  /**
-   * Reads a list of integers serialized by writeListOfIntegers. This will return null if the object
-   * serialized by writeListOfIntegers was null.
-   */
-  public List<Integer> readListOfIntegers(DataInput in) throws IOException {
-    int size = InternalDataSerializer.readArrayLength(in);
-    if (size > 0) {
-      List<Integer> list = new ArrayList<Integer>(size);
-      for (int i = 0; i < size; i++) {
-        list.add(Integer.valueOf(in.readInt()));
-      }
-      return list;
-    } else if (size == 0) {
-      return Collections.<Integer>emptyList();
-    } else {
-      return null;
-    }
-  }
-
-  /**
-   * Reads and discards an array of <code>byte</code>s from a <code>DataInput</code>.
-   *
-   * @throws IOException A problem occurs while writing to <code>out</code>
-   *
-   * @see #writeByteArray(byte[], DataOutput)
-   */
-  public static void skipByteArray(DataInput in) throws IOException {
-
-    InternalDataSerializer.checkIn(in);
-
-    int length = InternalDataSerializer.readArrayLength(in);
-    if (length != -1) {
-      in.skipBytes(length);
-      if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
-        logger.trace(LogMarker.SERIALIZER, "Skipped byte array of length {}", length);
-      }
-    }
-  }
-
-  public static final Object readDSFID(final DataInput in)
-      throws IOException, ClassNotFoundException {
+  public static Object readDSFID(final DataInput in) throws IOException, ClassNotFoundException {
-  public static final int readDSFIDHeader(final DataInput in)
-      throws IOException, ClassNotFoundException {
+  public static int readDSFIDHeader(final DataInput in) throws IOException, ClassNotFoundException {
-      return Integer.MAX_VALUE;// is that correct??
+      // is that correct??
+      return Integer.MAX_VALUE;
-   * Reads an instance of <code>String</code> from a <code>DataInput</code> given the header byte
-   * already being read. The return value may be <code>null</code>.
+   * Reads an instance of {@code String} from a {@code DataInput} given the header byte already
+   * being read. The return value may be {@code null}.
-   * @throws IOException A problem occurs while reading from <code>in</code>
+   * @throws IOException A problem occurs while reading from {@code in}
+  // TODO: registerDVDDeserializer is unused
-  public static final <T> T readNonPdxInstanceObject(final DataInput in)
+  public static <T> T readNonPdxInstanceObject(final DataInput in)
-  public static final Object basicReadObject(final DataInput in)
+  public static Object basicReadObject(final DataInput in)
-
-        Object serializableResult = null;
+        Object serializableResult;
-                } catch (EOFException enfOfStream) {
-                  // InputStream.read() should return -1 on EOF
+                } catch (EOFException ignored) {
-
-  private static final Object readUserDataSerializable(final DataInput in, int classId)
+  private static Object readUserDataSerializable(final DataInput in, int classId)
-        SerializationException ex2 = new SerializationException(
+        throw new SerializationException(
-        throw ex2;
-  private static final ThreadLocal<Boolean> pdxSerializationInProgress = new ThreadLocal<Boolean>();
+  private static final ThreadLocal<Boolean> pdxSerializationInProgress = new ThreadLocal<>();
-  public final static boolean writePdx(DataOutput out, GemFireCacheImpl gfc, Object pdx,
+  public static boolean writePdx(DataOutput out, InternalCache internalCache, Object pdx,
-    if (gfc != null) {
-      tr = gfc.getPdxRegistry();
+    if (internalCache != null) {
+      tr = internalCache.getPdxRegistry();
-    PdxWriterImpl writer;
-    {
-      PdxOutputStream os;
-      if (out instanceof HeapDataOutputStream) {
-        os = new PdxOutputStream((HeapDataOutputStream) out);
-      } else {
-        os = new PdxOutputStream();
-      }
-      writer = new PdxWriterImpl(tr, pdx, os);
+    PdxOutputStream os;
+    if (out instanceof HeapDataOutputStream) {
+      os = new PdxOutputStream((HeapDataOutputStream) out);
+    } else {
+      os = new PdxOutputStream();
+    PdxWriterImpl writer = new PdxWriterImpl(tr, pdx, os);
+
-    } catch (ToDataException ex) {
-      throw ex;
-    } catch (CancelException ex) {
-      // Serializing a PDX can result in a cache closed exception. Just rethrow
-      throw ex;
-    } catch (NonPortableClassException ex) {
-      throw ex;
-    } catch (GemFireRethrowable ex) {
+    } catch (ToDataException | CancelException | NonPortableClassException
+        | GemFireRethrowable ex) {
-    getDMStats(gfc).incPdxSerialization(bytesWritten);
+    getDMStats(internalCache).incPdxSerialization(bytesWritten);
-  public static DMStats getDMStats(GemFireCacheImpl gfc) {
-    if (gfc != null) {
-      return gfc.getDistributionManager().getStats();
+  public static DMStats getDMStats(InternalCache internalCache) {
+    if (internalCache != null) {
+      return internalCache.getDistributionManager().getStats();
-  private static final Object readPdxSerializable(final DataInput in)
+  private static Object readPdxSerializable(final DataInput in)
-
-    GemFireCacheImpl gfc = GemFireCacheImpl
+    InternalCache internalCache = GemFireCacheImpl
-    PdxType pdxType = gfc.getPdxRegistry().getType(typeId);
+    PdxType pdxType = internalCache.getPdxRegistry().getType(typeId);
-    DMStats dmStats = getDMStats(gfc);
+    DMStats dmStats = getDMStats(internalCache);
-    if (pdxType.getNoDomainClass() || gfc.getPdxReadSerializedByAnyGemFireServices()) {
-      // if (logger.isDebugEnabled()) {
-      // gfc.getLogger().info("returning PdxInstance", new Exception("stack trace"));
-      // }
+    if (pdxType.getNoDomainClass() || internalCache.getPdxReadSerializedByAnyGemFireServices()) {
-      // if (logger.isDebugEnabled()) {
-      // gfc.getLogger().info("returning domain object", new Exception("stack trace"));
-      // }
-      // return domain object.
-  public static final PdxInstance readPdxInstance(final byte[] dataBytes, GemFireCacheImpl gfc) {
+  public static PdxInstance readPdxInstance(final byte[] dataBytes, InternalCache internalCache) {
-        PdxType pdxType = gfc.getPdxRegistry().getType(typeId);
-        // gfc.getLogger().info("logger.isDebugEnabled(): pdxType="+ pdxType);
+        PdxType pdxType = internalCache.getPdxRegistry().getType(typeId);
-        int enumId = (dsId << 24) | (tmp & 0xFFFFFF);
-        TypeRegistry tr = gfc.getPdxRegistry();
+        int enumId = dsId << 24 | tmp & 0xFFFFFF;
+        TypeRegistry tr = internalCache.getPdxRegistry();
-  ///////////////////////////// START Test only methods /////////////////////////////
-  public final static Map getDsClassesToHoldersMap() {
+  public static Map getDsClassesToHoldersMap() {
-  public final static Map getIdsToHoldersMap() {
+  public static Map getIdsToHoldersMap() {
-  public final static Map getSupportedClassesToHoldersMap() {
+  public static Map getSupportedClassesToHoldersMap() {
-  ///////////////////////////// END Test only methods /////////////////////////////
-
-
-  ///////////////// END DataSerializer Implementation Methods ///////////
-
-  /////////////////////// Inner Classes ///////////////////////
-   * A marker object for <Code>DataSerializer</code>s that have not been registered. Using this
-   * marker object allows us to asynchronously send <Code>DataSerializer</code> registration
-   * updates. If the serialized bytes arrive at a VM before the registration message does, the
-   * deserializer will wait an amount of time for the registration message to arrive.
+   * A marker object for {@code DataSerializer}s that have not been registered. Using this marker
+   * object allows us to asynchronously send {@code DataSerializer} registration updates. If the
+   * serialized bytes arrive at a VM before the registration message does, the deserializer will
+   * wait an amount of time for the registration message to arrive.
-  static abstract class Marker {
+  abstract static class Marker {
+
-    protected boolean hasBeenSet = false;
+    boolean hasBeenSet = false;
-   * A marker object for <Code>DataSerializer</code>s that have not been registered. Using this
-   * marker object allows us to asynchronously send <Code>DataSerializer</code> registration
-   * updates. If the serialized bytes arrive at a VM before the registration message does, the
-   * deserializer will wait an amount of time for the registration message to arrive. Made public
-   * for unit test access.
+   * A marker object for {@code DataSerializer}s that have not been registered. Using this marker
+   * object allows us to asynchronously send {@code DataSerializer} registration updates. If the
+   * serialized bytes arrive at a VM before the registration message does, the deserializer will
+   * wait an amount of time for the registration message to arrive. Made public for unit test
+   * access.
-     * wait for too long, then <code>null</code> is returned.
+     * wait for too long, then {@code null} is returned.
-      boolean firstTime = true;
-      long endTime = 0;
+        boolean firstTime = true;
+        long endTime = 0;
-              // if (!this.hasBeenSet) {
-              // logger.info("logger.isDebugEnabled() getSerializer had to wait for " + remainingMs
-              // + "ms",
-              // new Exception("STACK"));
-              // }
-          } catch (InterruptedException ex) {
+          } catch (InterruptedException ignored) {
-   * A marker object for <Code>DataSerializer</code>s that is in the process of being registered. It
-   * is possible for getSerializer to return <code>null</code>
+   * A marker object for {@code DataSerializer}s that is in the process of being registered. It is
+   * possible for getSerializer to return {@code null}
-    /**
+    /*
-     * wait for too long, then <code>null</code> is returned.
+     * wait for too long, then {@code null} is returned.
-          } catch (InterruptedException ex) {
+          } catch (InterruptedException ignored) {
-   * <code>DataSerializer</code> being registered.
+   * {@code DataSerializer} being registered.
-     * The id of the <code>DataSerializer</code> that was registered since 5.7 an int instead of a
-     * byte
+     * The id of the {@code DataSerializer} that was registered since 5.7 an int instead of a byte
-     * The eventId of the <codE>DataSerializer</code> that was registered
+     * The eventId of the {@code DataSerializer} that was registered
-    /** The name of the <code>DataSerializer</code> class */
+    /** The name of the {@code DataSerializer} class */
+
-     * Constructor for <code>DataSerializable</code>
+     * Constructor for {@code DataSerializable}
-    public RegistrationMessage() {
-
-    }
+    public RegistrationMessage() {}
-     * Creates a new <code>RegistrationMessage</code> that broadcasts that the given
-     * <code>DataSerializer</code> was registered.
+     * Creates a new {@code RegistrationMessage} that broadcasts that the given
+     * {@code DataSerializer} was registered.
-    public static String getFullMessage(Throwable t) {
+    static String getFullMessage(Throwable t) {
-
-
-        Class<?> c = null;
+        Class<?> c;
-        DataSerializer s = null;
+        DataSerializer s;
-          return;
-          return;
-          return;
-          return;
+    @Override
-
-          .toLocalizedString(new Object[] {Integer.valueOf(this.id), this.className});
+          .toLocalizedString(this.id, this.className);
-
-     * Invoked when a new <code>Instantiator</code> is
-     * {@linkplain Instantiator#register(Instantiator) registered}.
-     */
-    public void newInstantiator(Instantiator instantiator);
-
-    /**
-     * Invoked when a new <code>DataSerializer</code> is {@linkplain DataSerializer#register(Class)
+     * Invoked when a new {@code Instantiator} is {@linkplain Instantiator#register(Instantiator)
-    public void newDataSerializer(DataSerializer ds);
+    void newInstantiator(Instantiator instantiator);
+    /**
+     * Invoked when a new {@code DataSerializer} is {@linkplain DataSerializer#register(Class)
+     * registered}.
+     */
+    void newDataSerializer(DataSerializer ds);
-   * An <code>ObjectInputStream</code> whose {@link #resolveClass} method loads classes from the
-   * current context class loader.
+   * An {@code ObjectInputStream} whose {@link #resolveClass} method loads classes from the current
+   * context class loader.
-     * Creates a new <code>DSObjectInputStream</code> that delegates its behavior to a given
-     * <code>InputStream</code>.
+     * Creates a new {@code DSObjectInputStream} that delegates its behavior to a given
+     * {@code InputStream}.
-    public DSObjectInputStream(InputStream stream) throws IOException {
+    DSObjectInputStream(InputStream stream) throws IOException {
-        Class clazz = getCachedClass(className);
-        return clazz;
-      } catch (ClassNotFoundException ex) {
+        return getCachedClass(className);
+      } catch (ClassNotFoundException ignored) {
-  // /**
-  // * A <code>DataOutput</code> that writes special header information
-  // * before it writes any other data. It is passed to a
-  // * <code>DataSerializer</code>'s {@link
-  // * DataSerializer#toData(Object, DataOutput)} method to ensure
-  // * that the stream has the correct format.
-  // */
-  // private static class DSDataOutput implements DataOutput {
-  // /** Has the header information been written? */
-  // private boolean headerWritten = false;
-
-  // /** The id of serializer that is writing to this output */
-  // private byte serializerId;
-
-  // /** The output stream to which this DSDataOutput writes */
-  // protected DataOutput out;
-
-  // ////////////////////// Constructors //////////////////////
-
-  // /**
-  // * Creates a new <code>DSDataOutput</code> that write to the
-  // * given output stream.
-  // */
-  // DSDataOutput(DataOutput out) {
-  // this.out = out;
-  // }
-
-  // ///////////////////// Instance Methods ////////////////////
-
-  // /**
-  // * Sets the id of the serializer that will possibly write to
-  // * this stream.
-  // */
-  // void setSerializerId(byte id) {
-  // this.serializerId = id;
-  // }
-
-  // /**
-  // * Returns whether or not any data hass been written to this
-  // * stream.
-  // */
-  // boolean hasWritten() {
-  // return this.headerWritten;
-  // }
-
-  // /**
-  // * Write the {@link #USER_CLASS} "class id" followed by the id
-  // * of the serializer.
-  // */
-  // private void writeHeader() throws IOException {
-  // if (!headerWritten) {
-  // out.writeByte(USER_CLASS);
-  // out.writeByte(serializerId);
-  // this.headerWritten = true;
-  // }
-  // }
-
-  // public void write(int b) throws IOException {
-  // writeHeader();
-  // out.write(b);
-  // }
-
-  // public void write(byte[] b) throws IOException {
-  // writeHeader();
-  // out.write(b);
-  // }
-
-  // public void write(byte[] b, int off, int len)
-  // throws IOException {
-  // writeHeader();
-  // out.write(b, off, len);
-  // }
-
-  // public void writeBoolean(boolean v) throws IOException {
-  // writeHeader();
-  // out.writeBoolean(v);
-  // }
-
-  // public void writeByte(int v) throws IOException {
-  // writeHeader();
-  // out.writeByte(v);
-  // }
-
-  // public void writeShort(int v) throws IOException {
-  // writeHeader();
-  // out.writeShort(v);
-  // }
-
-  // public void writeChar(int v) throws IOException {
-  // writeHeader();
-  // out.writeChar(v);
-  // }
-
-  // public void writeInt(int v) throws IOException {
-  // writeHeader();
-  // out.writeInt(v);
-  // }
-
-  // public void writeLong(long v) throws IOException {
-  // writeHeader();
-  // out.writeLong(v);
-  // }
-
-  // public void writeFloat(float v) throws IOException {
-  // writeHeader();
-  // out.writeFloat(v);
-  // }
-
-  // public void writeDouble(double v) throws IOException {
-  // writeHeader();
-  // out.writeDouble(v);
-  // }
-
-  // public void writeBytes(String s) throws IOException {
-  // writeHeader();
-  // out.writeBytes(s);
-  // }
-
-  // public void writeChars(String s) throws IOException {
-  // writeHeader();
-  // out.writeChars(s);
-  // }
-
-  // public void writeUTF(String str) throws IOException {
-  // writeHeader();
-  // out.writeUTF(str);
-  // }
-
-  // }
-  protected static abstract class WellKnownDS extends DataSerializer {
+  protected abstract static class WellKnownDS extends DataSerializer {
+
-  protected static abstract class WellKnownPdxDS extends WellKnownDS {
+  protected abstract static class WellKnownPdxDS extends WellKnownDS {
-  private static final byte INT_VL = 126; // Variable Length long encoded as int
-  // in next 4 bytes
-  private static final byte LONG_VL = 127; // Variable Length long encoded as
-  // long in next 8 bytes
+  // Variable Length long encoded as int in next 4 bytes
+  private static final byte INT_VL = 126;
+
+  // Variable Length long encoded as long in next 8 bytes
+  private static final byte LONG_VL = 127;
+
-      out.write((((int) data >>> 8) | 0x80) & 0xFF);
-      out.write(((int) data >>> 0) & 0xFF);
+      out.write(((int) data >>> 8 | 0x80) & 0xFF);
+      out.write((int) data >>> 0 & 0xFF);
-        out.writeByte(((int) data & 0x7F) | 0x80);
+        out.writeByte((int) data & 0x7F | 0x80);
-   * numbers will be respresented more compactly. For unsigned values, writeUnsignedVL will be more
+   * numbers will be represented more compactly. For unsigned values, writeUnsignedVL will be more
-   * 
-   * numbers will be respresented more compactly. For unsigned values, writeUnsignedVL will be more
+   * numbers will be represented more compactly. For unsigned values, writeUnsignedVL will be more
-   * 
-  public static long decodeZigZag64(final long n) {
-    return (n >>> 1) ^ -(n & 1);
+  private static long decodeZigZag64(final long n) {
+    return n >>> 1 ^ -(n & 1);
-  public static long encodeZigZag64(final long n) {
+  private static long encodeZigZag64(final long n) {
-    return (n << 1) ^ (n >> 63);
+    return n << 1 ^ n >> 63;
-    } catch (IOException e) {
+    } catch (IOException ignored) {
+
-      LOAD_CLASS_EACH_TIME ? null : new CopyOnWriteHashMap<String, WeakReference<Class<?>>>();
+      LOAD_CLASS_EACH_TIME ? null : new CopyOnWriteHashMap<>();
+

MOV26 UPD40 UPD74 INS59 MOV59 MOV8 UPD83 UPD83 UPD83 INS8 INS8 MOV8 MOV8 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 MOV29 MOV29 INS83 INS83 INS83 UPD83 UPD83 INS43 INS42 INS14 UPD42 INS70 INS78 INS60 MOV25 MOV60 INS54 MOV60 MOV21 MOV60 INS70 INS70 INS70 INS70 INS70 INS70 MOV65 MOV65 INS25 MOV60 INS25 MOV60 INS65 INS65 UPD43 UPD42 MOV60 MOV25 UPD43 UPD42 UPD43 UPD42 MOV65 INS65 MOV65 INS78 INS42 INS74 UPD66 INS65 INS66 UPD74 UPD74 UPD74 INS65 UPD66 INS65 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 INS44 INS42 MOV8 UPD43 INS66 INS65 UPD66 INS66 INS65 UPD66 INS42 INS43 MOV59 MOV8 INS12 UPD43 INS66 INS65 UPD66 UPD66 INS66 INS65 UPD66 INS65 UPD66 INS65 INS66 UPD66 UPD66 INS66 INS65 UPD66 INS44 MOV32 MOV8 INS44 MOV32 MOV8 INS44 INS32 MOV8 UPD66 INS44 MOV32 MOV8 UPD66 INS66 INS65 UPD66 INS65 INS66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 INS66 INS65 UPD66 INS44 INS42 INS8 INS66 INS65 INS66 INS65 UPD66 INS44 INS42 INS8 UPD66 INS65 INS66 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 UPD66 INS65 INS66 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 UPD66 INS65 INS66 INS66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 UPD66 INS65 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 UPD66 INS65 INS66 UPD66 INS66 INS65 INS66 INS65 UPD66 UPD66 UPD66 INS65 UPD66 INS65 UPD66 MOV27 MOV8 INS8 MOV27 MOV8 INS8 UPD66 MOV27 MOV8 MOV27 MOV8 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 UPD43 UPD43 INS12 MOV12 INS66 INS66 MOV11 INS66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 UPD74 UPD42 UPD42 UPD43 MOV43 UPD42 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 UPD66 UPD66 INS66 INS66 INS65 UPD66 MOV66 UPD66 MOV66 INS65 INS65 UPD66 INS42 INS66 INS65 INS66 UPD66 UPD66 UPD66 UPD66 MOV43 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV43 INS42 INS42 UPD42 INS66 INS66 INS42 MOV21 INS44 MOV8 UPD42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 MOV43 INS42 INS43 INS42 UPD42 MOV42 INS83 INS74 INS42 MOV42 MOV42 MOV43 INS42 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 MOV43 INS42 MOV60 MOV21 UPD66 MOV66 INS66 INS43 INS42 MOV60 MOV21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV21 MOV21 INS70 MOV60 MOV60 INS24 MOV41 MOV21 MOV21 INS70 MOV60 MOV60 MOV41 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 UPD42 UPD42 UPD42 UPD42 MOV62 MOV8 MOV44 INS8 INS66 INS66 INS66 INS66 UPD42 MOV14 UPD42 UPD42 UPD42 INS66 INS66 INS66 INS66 UPD66 INS65 INS66 INS66 UPD66 MOV66 INS66 UPD66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 UPD66 INS65 UPD66 MOV32 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD66 MOV66 INS66 INS65 UPD66 INS65 INS66 MOV27 MOV27 MOV27 UPD74 UPD42 UPD42 UPD42 UPD42 INS13 MOV43 INS42 UPD74 UPD42 MOV42 MOV43 MOV43 MOV43 MOV43 UPD42 MOV42 MOV43 INS84 INS44 INS42 INS8 MOV58 MOV27 MOV37 INS8 INS44 INS42 MOV8 MOV27 MOV27 UPD42 UPD42 UPD42 INS84 INS84 INS53 INS84 UPD42 UPD42 UPD42 INS66 MOV60 MOV60 INS66 INS66 INS66 INS66 INS66 INS66 MOV12 MOV12 INS40 UPD42 MOV22 INS66 UPD66 INS66 INS66 UPD66 MOV66 UPD42 MOV14 MOV14 INS42 MOV44 MOV43 MOV43 MOV43 MOV8 MOV60 MOV25 MOV62 INS60 INS43 INS42 INS60 INS25 MOV60 INS21 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV42 MOV42 MOV60 MOV43 MOV43 MOV43 MOV60 INS43 MOV43 MOV43 MOV14 MOV14 MOV14 MOV43 MOV43 MOV43 MOV43 UPD42 MOV32 UPD42 MOV43 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV43 INS42 MOV43 INS42 MOV43 INS84 MOV60 UPD43 MOV43 INS59 INS42 MOV43 INS59 INS42 INS8 MOV8 INS32 UPD42 MOV42 INS42 MOV43 UPD42 UPD42 MOV42 MOV32 MOV32 UPD42 UPD42 MOV43 MOV44 MOV44 MOV44 MOV44 UPD27 MOV27 INS44 MOV43 MOV43 MOV43 INS27 UPD42 UPD42 MOV14 INS42 MOV32 INS42 INS11 INS21 INS42 INS42 INS42 MOV42 INS70 INS70 UPD42 INS42 MOV14 INS12 MOV12 UPD34 MOV27 UPD42 UPD42 MOV43 INS42 MOV43 MOV32 MOV32 MOV32 MOV27 MOV32 UPD42 INS84 UPD42 INS42 MOV43 INS42 INS32 MOV43 INS42 INS44 INS42 MOV8 INS44 INS42 MOV8 INS44 MOV8 INS27 MOV27 MOV42 MOV43 MOV43 MOV43 MOV43 INS42 INS42 INS42 MOV42 INS43 INS42 INS43 INS42 UPD42 MOV27 MOV27 UPD42 MOV43 INS42 UPD42 MOV27 INS34 MOV32 INS42 INS42 MOV62 INS42 INS42 MOV32 INS13 INS42 INS42 UPD42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL45 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL65 DEL45 DEL42 DEL42 DEL32 DEL83 DEL83 DEL45 DEL42 DEL44 DEL12 DEL54 DEL8 DEL42 DEL43 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL61 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL83 DEL83 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL9 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL4 DEL3 DEL25 DEL9 DEL41 DEL8 DEL42 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL36 DEL42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL59 DEL58 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL83 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL83 DEL83 DEL36 DEL42 DEL65 DEL36 DEL36 DEL42 DEL65 DEL83 DEL83 DEL36 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL12 DEL83 DEL42 DEL42 DEL2 DEL45 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL43 DEL42 DEL53 DEL8 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL53 DEL8 DEL12 DEL83 DEL83 DEL83 DEL83 DEL36 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL42 DEL34 DEL27 DEL42 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL39 DEL85 DEL5 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL83 DEL83 DEL33 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL83 DEL42 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL83 DEL83 DEL36 DEL36 DEL83 DEL83 DEL83 DEL83 DEL83 DEL65 DEL42 DEL44 DEL12 DEL83 DEL33 DEL33 DEL41 DEL41 DEL41 DEL41 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL32 DEL83 DEL83 DEL83 DEL42 DEL59 DEL60 DEL42 DEL83 DEL83 DEL36 DEL34 DEL27 DEL36 DEL36 DEL36 DEL36 DEL36 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74