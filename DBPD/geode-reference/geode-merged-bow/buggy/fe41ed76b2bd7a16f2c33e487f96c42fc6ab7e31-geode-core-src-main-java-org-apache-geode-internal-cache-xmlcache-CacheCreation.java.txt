GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import java.util.Iterator;
+import java.util.Map.Entry;
+import org.apache.geode.cache.TransactionListener;
+import org.apache.geode.cache.asyncqueue.internal.AsyncEventQueueImpl;
-import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.query.internal.QueryMonitor;
+import org.apache.geode.distributed.internal.DistributionAdvisor;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.cache.DiskStoreAttributes;
+import org.apache.geode.internal.cache.DiskStoreMonitor;
+import org.apache.geode.internal.cache.EventTracker.ExpiryTask;
+import org.apache.geode.internal.cache.TXEntryStateFactory;
+import org.apache.geode.internal.cache.persistence.BackupManager;
+import org.apache.geode.management.internal.JmxManagerAdvisor;
+import org.apache.geode.management.internal.RestAgent;
-  /** The amount of time to wait for a <code>netSearch</code> */
+  /** The amount of time to wait for a {@code netSearch} */
-  protected final Map roots = new LinkedHashMap();
+  protected final Map<String, Region<?, ?>> roots = new LinkedHashMap<>();
-  private final List bridgeServers = new ArrayList();
+  private final List<CacheServer> bridgeServers = new ArrayList<>();
-  private final Map<Declarable, Properties> declarablePropertiesMap =
-      new HashMap<Declarable, Properties>();
+  private final Map<Declarable, Properties> declarablePropertiesMap = new HashMap<>();
-  private Set<GatewaySender> gatewaySenders = new HashSet<GatewaySender>();
+  private final Set<GatewaySender> gatewaySenders = new HashSet<>();
-  private Set<GatewayReceiver> gatewayReceivers = new HashSet<GatewayReceiver>();
+  private final Set<GatewayReceiver> gatewayReceivers = new HashSet<>();
-  private Set<AsyncEventQueue> asyncEventQueues = new HashSet<AsyncEventQueue>();
+  private final Set<AsyncEventQueue> asyncEventQueues = new HashSet<>();
-  protected CacheTransactionManagerCreation txMgrCreation = null;
-
-  /** JNDI Context associated with the Gemfire */
-  // private static Context ctx;
+  CacheTransactionManagerCreation txMgrCreation = null;
-  private final Map namedRegionAttributes = new HashMap();
+  private final Map<String, RegionAttributes<?, ?>> namedRegionAttributes = new HashMap<>();
-  protected final List regionAttributesNames = new ArrayList();
+  final List<String> regionAttributesNames = new ArrayList<>();
-  protected final Map diskStores = new LinkedHashMap();
+  protected final Map<String, DiskStore> diskStores = new LinkedHashMap<>();
-  private final List<File> backups = new ArrayList<File>();
+  private final List<File> backups = new ArrayList<>();
-  private CacheConfig cacheConfig = new CacheConfig();
+  private final CacheConfig cacheConfig = new CacheConfig();
-  private InternalLogWriter logWriter = new LocalLogWriter(InternalLogWriter.ALL_LEVEL, System.out);
+  private final InternalLogWriter logWriter =
+      new LocalLogWriter(InternalLogWriter.ALL_LEVEL, System.out);
-  private InternalLogWriter securityLogWriter = LogWriterFactory.toSecurityLogWriter(logWriter);
+  private final InternalLogWriter securityLogWriter =
+      LogWriterFactory.toSecurityLogWriter(this.logWriter);
-  private SimpleExtensionPoint<Cache> extensionPoint = new SimpleExtensionPoint<Cache>(this, this);
-
-  //////////////////////// Constructors ////////////////////////
+  private final SimpleExtensionPoint<Cache> extensionPoint = new SimpleExtensionPoint<>(this, this);
-   * Creates a new <code>CacheCreation</code> with no root regions
+   * Creates a new {@code CacheCreation} with no root regions
-    createInProgress = new ThreadLocal<>();
+    createInProgress.remove();
-      createInProgress.set(this.pm);
+      createInProgress.set(this.poolManager);
-  public void startingGenerate() {
+  void startingGenerate() {
-  ////////////////////// Instance Methods //////////////////////
-
-  static final private RegionAttributes defaults = new AttributesFactory().create();
+  private static final RegionAttributes defaults = new AttributesFactory().create();
-   *         <code>root</code>.
+   *         {@code root}.
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public Set rootRegions() {
-    Set regions = new LinkedHashSet();
-    for (Iterator itr = this.roots.values().iterator(); itr.hasNext();) {
-      regions.add(itr.next());
-    }
+  @Override
+  public Set<Region<?, ?>> rootRegions() {
+    Set<Region<?, ?>> regions = new LinkedHashSet<>(this.roots.values());
+  @Override
-  private static ThreadLocal createInProgress = new ThreadLocal();
+  private static final ThreadLocal<PoolManagerImpl> createInProgress = new ThreadLocal<>();
-  public static final PoolManagerImpl getCurrentPoolManager() {
-    return (PoolManagerImpl) createInProgress.get();
+  public static PoolManagerImpl getCurrentPoolManager() {
+    return createInProgress.get();
-   *
-   * @throws TimeoutException
-   * @throws CacheWriterException
-   * @throws RegionExistsException
-   * @throws GatewayException
-  void create(GemFireCacheImpl cache)
+  void create(InternalCache cache)
-    extensionPoint.beforeCreate(cache);
+    this.extensionPoint.beforeCreate(cache);
-    cache.setDeclarativeCacheConfig(cacheConfig);
+    cache.setDeclarativeCacheConfig(this.cacheConfig);
-    // if (this.hasCopyOnRead()) {
-    // cache.setCopyOnRead(this.copyOnRead);
-    // }
-    { // create connection pools
-      Map m = getPools();
-      if (!m.isEmpty()) {
-        Iterator it = m.values().iterator();
-        while (it.hasNext()) {
-          Pool cp = (Pool) it.next();
-          PoolFactoryImpl f;
-          f = (PoolFactoryImpl) PoolManager.createFactory();
-          f.init(cp);
-          PoolImpl p = (PoolImpl) f.create(cp.getName());
-        }
+    // create connection pools
+    Map<String, Pool> pools = getPools();
+    if (!pools.isEmpty()) {
+      for (Pool pool : pools.values()) {
+        PoolFactoryImpl poolFactory = (PoolFactoryImpl) PoolManager.createFactory();
+        poolFactory.init(pool);
+        poolFactory.create(pool.getName());
-    for (Iterator iter = this.diskStores.values().iterator(); iter.hasNext();) {
-      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) iter.next();
+    for (DiskStore diskStore : this.diskStores.values()) {
+      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) diskStore;
-      GatewaySenderFactory factory = (GatewaySenderFactory) cache.createGatewaySenderFactory();
+      GatewaySenderFactory factory = cache.createGatewaySenderFactory();
-      // AsyncEventQueue asyncEventQueue =
-      // asyncQueueFactory.create(asyncEventQueueCreation.getId(),
-      // asyncEventQueueCreation.getAsyncEventListener());
-
-    for (Iterator iter = this.regionAttributesNames.iterator(); iter.hasNext();) {
-      String id = (String) iter.next();
+    for (String id : this.regionAttributesNames) {
-      RegionAttributes attrs;
-      AttributesFactory factory = new AttributesFactory(creation);
-      attrs = factory.create();
+      AttributesFactory<?, ?> factory = new AttributesFactory<>(creation);
+      RegionAttributes<?, ?> attrs = factory.create();
-    // Create and start the CacheServers after the gateways have been intialized
+    // Create and start the CacheServers after the gateways have been initialized
-    startCacheServers(this.getCacheServers(), cache, serverPort, serverBindAdd,
-        disableDefaultServer);
+    startCacheServers(getCacheServers(), cache, serverPort, serverBindAdd, disableDefaultServer);
-    // UnitTest CacheXml81Test.testCacheExtension
-    extensionPoint.fireCreate(cache);
+    this.extensionPoint.fireCreate(cache);
-  protected void initializeRegions(Map declarativeRegions, Cache cache) {
-    Iterator it = declarativeRegions.values().iterator();
-    while (it.hasNext()) {
-      RegionCreation r = (RegionCreation) it.next();
-      r.createRoot(cache);
+  void initializeRegions(Map<String, Region<?, ?>> declarativeRegions, Cache cache) {
+    for (Region region : declarativeRegions.values()) {
+      RegionCreation regionCreation = (RegionCreation) region;
+      regionCreation.createRoot(cache);
-  protected void startCacheServers(List declarativeCacheServers, Cache cache, Integer serverPort,
+  void startCacheServers(List<CacheServer> declarativeCacheServers, Cache cache, Integer serverPort,
-    CacheServerCreation defaultServer = null;
-    if (declarativeCacheServers.isEmpty() && (serverPort != null || serverBindAdd != null)
-        && (disableDefaultServer == null || !disableDefaultServer)) {
+    CacheServerCreation defaultServer = null;
+    boolean hasServerPortOrBindAddress = serverPort != null || serverBindAdd != null;
+    boolean isDefaultServerDisabled = disableDefaultServer == null || !disableDefaultServer;
+    if (declarativeCacheServers.isEmpty() && hasServerPortOrBindAddress
+        && isDefaultServerDisabled) {
-        defaultServer = new CacheServerCreation((GemFireCacheImpl) cache, false);
+        defaultServer = new CacheServerCreation((InternalCache) cache, false);
-    for (Iterator iter = declarativeCacheServers.iterator(); iter.hasNext();) {
-      CacheServerCreation declaredCacheServer = (CacheServerCreation) iter.next();
+    for (CacheServer declarativeCacheServer : declarativeCacheServers) {
+      CacheServerCreation declaredCacheServer = (CacheServerCreation) declarativeCacheServer;
-        if (!impl.isRunning())
+        if (!impl.isRunning()) {
+        }
-  protected DiskStoreAttributesCreation initializePdxDiskStore(GemFireCacheImpl cache) {
+  DiskStoreAttributesCreation initializePdxDiskStore(InternalCache cache) {
-  protected void createDiskStore(DiskStoreAttributesCreation creation, GemFireCacheImpl cache) {
+  protected void createDiskStore(DiskStoreAttributesCreation creation, InternalCache cache) {
-   * Returns whether or not this <code>CacheCreation</code> is equivalent to another
-   * <code>Cache</code>.
+   * Returns whether or not this {@code CacheCreation} is equivalent to another {@code Cache}.
-      Collection myBridges = this.getCacheServers();
-      Collection otherBridges = other.getCacheServers();
+      Collection<CacheServer> myBridges = this.getCacheServers();
+      Collection<CacheServer> otherBridges = other.getCacheServers();
-      for (Iterator myIter = myBridges.iterator(); myIter.hasNext();) {
-        CacheServerCreation myBridge = (CacheServerCreation) myIter.next();
+      for (CacheServer myBridge1 : myBridges) {
+        CacheServerCreation myBridge = (CacheServerCreation) myBridge1;
-        for (Iterator otherIter = otherBridges.iterator(); otherIter.hasNext();) {
-          CacheServer otherBridge = (CacheServer) otherIter.next();
+        for (CacheServer otherBridge : otherBridges) {
-      { // compare connection pools
-        Map m1 = getPools();
-        Map m2 = (other instanceof CacheCreation) ? ((CacheCreation) other).getPools()
-            : PoolManager.getAll();
-        int m1Size = m1.size();
-        {
-          // ignore any gateway instances
-          Iterator it1 = m1.values().iterator();
-          while (it1.hasNext()) {
-            Pool cp = (Pool) it1.next();
-            if (((PoolImpl) cp).isUsedByGateway()) {
-              m1Size--;
-            }
-          }
-        }
-        int m2Size = m2.size();
-        {
-          // ignore any gateway instances
-          Iterator it2 = m2.values().iterator();
-          while (it2.hasNext()) {
-            Pool cp = (Pool) it2.next();
-            if (((PoolImpl) cp).isUsedByGateway()) {
-              m2Size--;
-            }
-          }
-        }
-        if (m2Size == 1) {
-          // if it is just the DEFAULT pool then ignore it
-          Pool p = (Pool) m2.values().iterator().next();
-          if (p.getName().equals("DEFAULT")) {
-            m2Size = 0;
-          }
-        }
+      // compare connection pools
+      Map<String, Pool> m1 = getPools();
+      Map<String, Pool> m2 = other instanceof CacheCreation ? ((CacheCreation) other).getPools()
+          : PoolManager.getAll();
+      int m1Size = m1.size();
-        if (m1Size != m2Size) {
-          throw new RuntimeException("pool sizes differ m1Size=" + m1Size + " m2Size=" + m2Size
-              + " m1=" + m1.values() + " m2=" + m2.values());
+      // ignore any gateway instances
+      for (Pool cp : m1.values()) {
+        if (((PoolImpl) cp).isUsedByGateway()) {
+          m1Size--;
+      }
-        if (m1Size > 0) {
-          Iterator it1 = m1.values().iterator();
-          while (it1.hasNext()) {
-            PoolImpl cp = (PoolImpl) it1.next();
-            // ignore any gateway instances
-            if (!(cp).isUsedByGateway()) {
-              cp.sameAs(m2.get(cp.getName()));
-            }
+      int m2Size = m2.size();
+
+      // ignore any gateway instances
+      for (Pool cp : m2.values()) {
+        if (((PoolImpl) cp).isUsedByGateway()) {
+          m2Size--;
+        }
+      }
+
+      if (m2Size == 1) {
+        // if it is just the DEFAULT pool then ignore it
+        Pool p = (Pool) m2.values().iterator().next();
+        if (p.getName().equals("DEFAULT")) {
+          m2Size = 0;
+        }
+      }
+
+      if (m1Size != m2Size) {
+        throw new RuntimeException("pool sizes differ m1Size=" + m1Size + " m2Size=" + m2Size
+            + " m1=" + m1.values() + " m2=" + m2.values());
+      }
+
+      if (m1Size > 0) {
+        for (Pool pool : m1.values()) {
+          PoolImpl poolImpl = (PoolImpl) pool;
+          // ignore any gateway instances
+          if (!poolImpl.isUsedByGateway()) {
+            poolImpl.sameAs(m2.get(poolImpl.getName()));
-      for (Iterator myIter = diskStores.values().iterator(); myIter.hasNext();) {
-        DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation) myIter.next();
+      for (DiskStore diskStore : this.diskStores.values()) {
+        DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation) diskStore;
-      Map myNamedAttributes = this.listRegionAttributes();
-      Map otherNamedAttributes = other.listRegionAttributes();
+      Map<String, RegionAttributes<?, ?>> myNamedAttributes = this.listRegionAttributes();
+      Map<String, RegionAttributes<Object, Object>> otherNamedAttributes =
+          other.listRegionAttributes();
-      for (Iterator myIter = myNamedAttributes.entrySet().iterator(); myIter.hasNext();) {
-        Map.Entry myEntry = (Map.Entry) myIter.next();
+      for (Object object : myNamedAttributes.entrySet()) {
+        Entry myEntry = (Entry) object;
-        RegionAttributes otherAttrs = other.getRegionAttributes(myId);
+        RegionAttributes<Object, Object> otherAttrs = other.getRegionAttributes(myId);
-      Collection myRoots = this.roots.values();
-      Collection otherRoots = other.rootRegions();
+      Collection<Region<?, ?>> myRoots = this.roots.values();
+      Collection<Region<?, ?>> otherRoots = other.rootRegions();
-      Iterator it = myRoots.iterator();
-      while (it.hasNext()) {
-        RegionCreation r = (RegionCreation) it.next();
-        Region r2 = other.getRegion(r.getName());
-        if (r2 == null) {
+
+      for (final Region<?, ?> myRoot : myRoots) {
+        RegionCreation rootRegion = (RegionCreation) myRoot;
+        Region<Object, Object> otherRegion = other.getRegion(rootRegion.getName());
+        if (otherRegion == null) {
-              LocalizedStrings.CacheCreation_NO_ROOT_0.toLocalizedString(r.getName()));
-        } else if (!r.sameAs(r2)) {
+              LocalizedStrings.CacheCreation_NO_ROOT_0.toLocalizedString(rootRegion.getName()));
+        } else if (!rootRegion.sameAs(otherRegion)) {
-        List otherTxListeners = Arrays.asList(other.getCacheTransactionManager().getListeners());
-        List thisTxListeners = Arrays.asList(getCacheTransactionManager().getListeners());
+        List<TransactionListener> otherTxListeners =
+            Arrays.asList(other.getCacheTransactionManager().getListeners());
+        List<TransactionListener> thisTxListeners =
+            Arrays.asList(getCacheTransactionManager().getListeners());
-  ////////// Inherited methods that don't do anything //////////
-
+  @Override
-  public void close(boolean keepalive) {
+  @Override
+  public void close(boolean keepAlive) {
-  // public Region createRootRegion(RegionAttributes aRegionAttributes)
-  // throws RegionExistsException, TimeoutException {
-  //
-  // throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  // }
-
-  // see Cache.isReconnecting()
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  // see Cache.waitUntilReconnected(long, TimeUnit)
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  // see Cache.stopReconnecting()
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  // see Cache.getReconnectedCache()
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public org.apache.geode.cache.query.QueryService getQueryService() {
-    return queryService;
+  @Override
+  public QueryService getQueryService() {
+    return this.queryService;
-  public <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut atts) {
+  @Override
+  public <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut shortcut) {
+  @Override
+  @Override
+  @Override
-  public Region createVMRegion(String name, RegionAttributes attrs)
+  @Override
+  public Region createVMRegion(String name, RegionAttributes aRegionAttributes)
-    return createRegion(name, attrs);
+    return createRegion(name, aRegionAttributes);
-  public Region createRegion(String name, RegionAttributes attrs)
+  @Override
+  public Region createRegion(String name, RegionAttributes aRegionAttributes)
-    if (attrs instanceof RegionAttributesCreation) {
-      ((RegionAttributesCreation) attrs).inheritAttributes(this);
-      ((RegionAttributesCreation) attrs).prepareForValidation();
+    if (aRegionAttributes instanceof RegionAttributesCreation) {
+      ((RegionAttributesCreation) aRegionAttributes).inheritAttributes(this);
+      ((RegionAttributesCreation) aRegionAttributes).prepareForValidation();
-    AttributesFactory.validateAttributes(attrs);
+    AttributesFactory.validateAttributes(aRegionAttributes);
-    region.setAttributes(attrs);
+    region.setAttributes(aRegionAttributes);
+  @Override
-    if (path.indexOf('/') != -1) {
-      throw new UnsupportedOperationException();
+    if (path.contains("/")) {
+      throw new UnsupportedOperationException("Region path '" + path + "' contains '/'");
-    return (Region) this.roots.get(path);
+    return this.roots.get(path);
+  @Override
-  public void addDeclarableProperties(final Declarable declarable, final Properties properties) {
+  @Override
+  public void setReadSerialized(final boolean value) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public PdxInstanceFactory createPdxInstanceFactory(final String className,
+      final boolean expectDomainClass) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void waitForRegisterInterestsInProgress() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  void addDeclarableProperties(final Declarable declarable, final Properties properties) {
-  public List getCacheServers() {
+  @Override
+  public List<CacheServer> getCacheServers() {
-  public GatewaySender addGatewaySender(GatewaySender sender) {
+  @Override
+  public void addGatewaySender(GatewaySender sender) {
-    return sender;
-  public GatewayReceiver addGatewayReceiver(GatewayReceiver receiver) {
+  @Override
+  public void addAsyncEventQueue(final AsyncEventQueueImpl asyncQueue) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void removeAsyncEventQueue(final AsyncEventQueue asyncQueue) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public QueryMonitor getQueryMonitor() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void close(final String reason, final Throwable systemFailureCause,
+      final boolean keepAlive, final boolean keepDS) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public JmxManagerAdvisor getJmxManagerAdvisor() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public List<Properties> getDeclarableProperties(final String className) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public int getUpTime() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public Set<Region<?, ?>> rootRegions(final boolean includePRAdminRegions) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public Set<LocalRegion> getAllRegions() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public DistributedRegion getRegionInDestroy(final String path) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void addRegionOwnedDiskStore(final DiskStoreImpl dsi) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public DiskStoreMonitor getDiskStoreMonitor() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void close(final String reason, final Throwable optionalCause) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public LocalRegion getRegionByPathForProcessing(final String path) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public List getCacheServersAndGatewayReceiver() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public boolean isGlobalRegionInitializing(final String fullPath) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public DistributionAdvisor getDistributionAdvisor() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void setQueryMonitorRequiredForResourceManager(final boolean required) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public boolean isQueryMonitorDisabledForLowMemory() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public boolean isRESTServiceRunning() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public InternalLogWriter getInternalLogWriter() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public InternalLogWriter getSecurityInternalLogWriter() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public Set<LocalRegion> getApplicationRegions() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void removeGatewaySender(final GatewaySender sender) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public DistributedLockService getGatewaySenderLockService() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public RestAgent getRestAgent() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public Properties getDeclarableProperties(final Declarable declarable) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void setRESTServiceRunning(final boolean isRESTServiceRunning) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void close(final String reason, final boolean keepAlive, final boolean keepDS) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public void addGatewayReceiver(GatewayReceiver receiver) {
-    return receiver;
-  public AsyncEventQueue addAsyncEventQueue(AsyncEventQueue asyncEventQueue) {
+  public void addAsyncEventQueue(AsyncEventQueue asyncEventQueue) {
-    return asyncEventQueue;
+  @Override
-    Set<GatewaySender> tempSet = new HashSet<GatewaySender>();
+    Set<GatewaySender> tempSet = new HashSet<>();
-  public GatewaySender getGatewaySender(String Id) {
+  @Override
+  public GatewaySender getGatewaySender(String id) {
-      if (sender.getId().equals(Id)) {
+      if (sender.getId().equals(id)) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    if (!this.isServer) {
-      return (this.bridgeServers.size() > 0);
-    } else {
-      return true;
-    }
+    return this.isServer || !this.bridgeServers.isEmpty();
-  public DynamicRegionFactory.Config getDynamicRegionFactoryConfig() {
+  DynamicRegionFactory.Config getDynamicRegionFactoryConfig() {
+  @Override
+  @Override
+  @Override
+  @Override
-  // It's not used
-  public DiskStore findDiskStore(String storeName) {
-    String s = storeName;
-    if (s == null) {
-      s = GemFireCacheImpl.getDefaultDiskStoreName();
+  @Override
+  public DiskStore findDiskStore(String name) {
+    if (name == null) {
+      name = GemFireCacheImpl.getDefaultDiskStoreName();
-    return (DiskStore) this.diskStores.get(s);
+    return this.diskStores.get(name);
-  public Collection<DiskStoreImpl> listDiskStores() {
+  @Override
+  public Collection<DiskStore> listDiskStores() {
-  public void setDiskStore(String name, DiskStoreAttributesCreation dsac) {
-    // Assert.assertTrue(ds instanceof DiskStoreAttributesCreation,
-    // "Attributes are a " + ds.getClass().getName());
+  void setDiskStore(String name, DiskStoreAttributesCreation dsac) {
+  @Override
-    return (RegionAttributes) this.namedRegionAttributes.get(id);
+    return this.namedRegionAttributes.get(id);
+  @Override
-  public Map listRegionAttributes() {
+  @Override
+  public Map<String, RegionAttributes<?, ?>> listRegionAttributes() {
+  @Override
-
+  @Override
-  private final PoolManagerImpl pm = new PoolManagerImpl(false);
+  private final PoolManagerImpl poolManager = new PoolManagerImpl(false);
+
-  public Map getPools() {
-    return this.pm.getMap();
+  public Map<String, Pool> getPools() {
+    return this.poolManager.getMap();
-    return (new PoolFactoryImpl(this.pm)).setStartDisabled(true);
+    return new PoolFactoryImpl(this.poolManager).setStartDisabled(true);
-  public Pool findPool(String name) {
-    return this.pm.find(name);
-  }
-
-  public void setFunctionServiceCreation(FunctionServiceCreation f) {
-    this.functionServiceCreation = f;
-  }
-
-  public FunctionServiceCreation getFunctionServiceCreation() {
-    return this.functionServiceCreation;
+  public void setFunctionServiceCreation(FunctionServiceCreation functionServiceCreation) {
+    this.functionServiceCreation = functionServiceCreation;
+
-  public void setResourceManagerCreation(ResourceManagerCreation rmc) {
+  public void setResourceManagerCreation(ResourceManagerCreation resourceManagerCreation) {
-    this.resourceManagerCreation = rmc;
+    this.resourceManagerCreation = resourceManagerCreation;
+  @Override
-  public boolean hasResourceManager() {
+  boolean hasResourceManager() {
-  private volatile boolean hasSerializerRegistration = false;
-  public void setSerializerCreation(SerializerCreation sc) {
-    this.hasSerializerRegistration = true;
-    this.serializerCreation = sc;
+  public void setSerializerCreation(SerializerCreation serializerCreation) {
+    this.serializerCreation = serializerCreation;
-  public SerializerCreation getSerializerCreation() {
+  SerializerCreation getSerializerCreation() {
-  public boolean hasSerializerCreation() {
-    return this.hasSerializerRegistration;
-  }
-
-  public FunctionService getFunctionService() {
-    throw new UnsupportedOperationException();
-  }
-
+  @Override
-  public void addRegionListener(final RegionListener l) {
+  public void addRegionListener(final RegionListener regionListener) {
-  public void removeRegionListener(final RegionListener l) {
+  public void removeRegionListener(final RegionListener regionListener) {
+  @Override
+  @Override
+  @Override
-    cacheConfig.setPdxReadSerialized(readSerialized);
+    this.cacheConfig.setPdxReadSerialized(readSerialized);
-    cacheConfig.setPdxIgnoreUnreadFields(ignore);
+    this.cacheConfig.setPdxIgnoreUnreadFields(ignore);
-    cacheConfig.setPdxSerializer(serializer);
+    this.cacheConfig.setPdxSerializer(serializer);
-    cacheConfig.setPdxDiskStore(diskStore);
+    this.cacheConfig.setPdxDiskStore(diskStore);
-    cacheConfig.setPdxPersistent(persistent);
+    this.cacheConfig.setPdxPersistent(persistent);
+  @Override
-    return cacheConfig.isPdxReadSerialized();
+    return this.cacheConfig.isPdxReadSerialized();
+  @Override
-    return cacheConfig.getPdxSerializer();
+    return this.cacheConfig.getPdxSerializer();
+  @Override
-    return cacheConfig.getPdxDiskStore();
+    return this.cacheConfig.getPdxDiskStore();
+  @Override
-    return cacheConfig.isPdxPersistent();
+    return this.cacheConfig.isPdxPersistent();
+  @Override
-    return cacheConfig.getPdxIgnoreUnreadFields();
+    return this.cacheConfig.getPdxIgnoreUnreadFields();
-
+  @Override
-    return cacheConfig;
+    return this.cacheConfig;
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.Cache#getMembers()
-   */
+  @Override
+  public boolean getPdxReadSerializedByAnyGemFireServices() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public BackupManager getBackupManager() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void setDeclarativeCacheConfig(final CacheConfig cacheConfig) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void initializePdxRegistry() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void readyDynamicRegionFactory() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void setBackupFiles(final List<File> backups) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void addDeclarableProperties(final Map<Declarable, Properties> mapOfNewDeclarableProps) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
-    return Collections.EMPTY_SET;
+    return Collections.emptySet();
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.Cache#getAdminMembers()
-   */
+  @Override
-    return Collections.EMPTY_SET;
+    return Collections.emptySet();
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.Cache#getMembers(org.apache.geode.cache.Region)
-   */
+  @Override
-    return Collections.EMPTY_SET;
+    return Collections.emptySet();
+
+  @Override
+  @Override
-  public void setInitializer(Declarable d, Properties props) {
-    this.initializer = d;
+  @Override
+  public void setInitializer(Declarable declarable, Properties props) {
+    this.initializer = declarable;
-  protected void runInitializer() {
+  @Override
+  public boolean hasPool() {
+    return false;
+  }
+
+  @Override
+  public DiskStoreFactory createDiskStoreFactory(final DiskStoreAttributes attrs) {
+    return null;
+  }
+
+  @Override
+  public void determineDefaultPool() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public <K, V> Region<K, V> basicCreateRegion(final String name,
+      final RegionAttributes<K, V> attrs) throws RegionExistsException, TimeoutException {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public BackupManager startBackup(final InternalDistributedMember sender) throws IOException {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public Throwable getDisconnectCause() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void addPartitionedRegion(final PartitionedRegion region) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void removePartitionedRegion(final PartitionedRegion region) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void addDiskStore(final DiskStoreImpl dsi) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public TXEntryStateFactory getTXEntryStateFactory() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public ExpiryTask getEventTrackerTask() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void removeDiskStore(final DiskStoreImpl diskStore) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  void runInitializer() {
-  public void setGatewayConflictResolver(GatewayConflictResolver g) {
-    this.gatewayConflictResolver = g;
+  @Override
+  public void setGatewayConflictResolver(GatewayConflictResolver resolver) {
+    this.gatewayConflictResolver = resolver;
+  @Override
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  public PdxInstanceFactory createPdxInstanceFactory(String className, boolean b) {
-    throw new UnsupportedOperationException();
-  }
-
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  @Override
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-    return extensionPoint;
+    return this.extensionPoint;
-  public DistributedMember getMyId() {
+  public InternalDistributedMember getMyId() {
-  public Collection<DiskStoreImpl> listDiskStoresIncludingRegionOwned() {
+  public Collection<DiskStore> listDiskStoresIncludingRegionOwned() {
-  public QueryService queryService = new org.apache.geode.cache.query.QueryService() {
+  private final QueryService queryService = new QueryService() {
-    private Map<String, List> indexes = new HashMap<String, List>();
+    private final Map<String, List<Index>> indexes = new HashMap<>();
-    @Override
+    @Override
-      List indexesForRegion = indexes.get(fromClause);
+      List<Index> indexesForRegion = this.indexes.get(fromClause);
-        indexesForRegion = new ArrayList();
-        indexes.put(fromClause, indexesForRegion);
+        indexesForRegion = new ArrayList<>();
+        this.indexes.put(fromClause, indexesForRegion);
-      return indexes.get(region.getFullPath());
+      return this.indexes.get(region.getFullPath());
-    public void defineKeyIndex(String indexName, String indexedExpression, String fromClause)
+    public void defineKeyIndex(String indexName, String indexedExpression, String regionPath)
-    throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  public RegionAttributes invokeRegionBefore(final LocalRegion parent, final String name,
-      final RegionAttributes attrs, final InternalRegionArguments internalRegionArgs) {
+  public <K, V> RegionAttributes<K, V> invokeRegionBefore(final LocalRegion parent,
+      final String name, final RegionAttributes<K, V> attrs,
+      final InternalRegionArguments internalRegionArgs) {

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS74 INS74 INS83 MOV59 INS83 INS83 MOV59 INS74 INS74 MOV59 INS74 MOV59 INS83 INS83 INS83 INS43 INS83 INS83 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS74 INS42 INS8 INS78 INS83 INS74 MOV60 INS78 INS78 INS39 INS42 INS44 INS78 INS39 INS42 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS39 UPD42 INS78 INS43 INS42 INS78 INS78 UPD43 INS78 INS78 INS73 INS73 INS8 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 MOV43 INS42 INS44 INS44 MOV8 INS78 INS83 INS39 INS42 INS8 INS78 INS74 INS78 INS39 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 UPD43 UPD42 INS78 INS39 UPD42 MOV44 INS44 INS44 INS44 INS78 INS83 INS43 INS42 INS8 INS78 INS74 INS42 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS42 INS44 INS44 INS78 UPD43 INS42 MOV44 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 UPD42 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 UPD43 UPD42 INS78 INS43 INS42 INS78 INS83 MOV43 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS39 INS39 INS78 INS78 INS44 INS78 INS78 INS78 INS78 INS78 MOV8 INS78 INS78 INS78 INS78 INS78 INS44 INS78 INS74 INS78 MOV43 INS78 INS78 INS74 INS78 MOV78 INS83 INS39 INS42 INS8 INS83 UPD74 MOV74 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 MOV44 MOV8 INS78 INS78 MOV44 INS8 MOV44 INS8 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS43 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 MOV74 INS78 MOV74 INS78 INS78 INS78 INS78 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 MOV73 MOV73 INS74 UPD42 INS44 INS43 INS43 INS78 INS43 UPD42 INS43 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 MOV78 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS78 INS83 MOV43 INS42 MOV44 INS8 INS78 INS78 INS78 UPD43 MOV8 UPD74 MOV74 MOV8 UPD83 INS83 INS73 INS73 INS74 MOV43 INS43 INS74 MOV43 INS43 UPD42 UPD42 MOV43 INS43 INS74 MOV43 INS43 UPD42 MOV43 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS74 INS60 MOV41 INS42 MOV43 MOV43 MOV14 UPD43 MOV60 MOV25 INS70 INS70 INS74 INS70 INS74 INS60 INS60 INS70 UPD43 UPD43 INS42 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 UPD42 INS42 MOV43 UPD42 INS42 INS42 INS42 INS83 INS39 INS42 INS53 INS42 INS83 MOV43 INS42 INS83 INS39 INS42 INS42 INS53 INS42 MOV43 INS43 INS42 INS42 INS83 INS43 INS42 INS53 INS42 INS83 MOV43 INS42 INS53 INS42 UPD42 INS53 INS42 INS83 UPD42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS53 INS42 INS42 INS53 INS42 MOV43 INS43 INS83 UPD42 INS53 INS42 INS53 INS42 INS43 INS74 INS83 INS39 INS42 INS53 INS42 INS43 INS43 INS53 INS42 INS42 INS83 INS43 INS42 INS53 INS42 INS83 MOV43 INS42 INS53 INS42 INS42 INS53 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS53 INS42 UPD42 INS83 UPD42 INS53 INS42 INS53 INS42 INS83 INS43 INS42 INS53 INS42 INS42 INS53 INS42 INS83 INS39 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS42 INS53 INS42 INS43 INS43 INS53 INS42 INS83 MOV43 INS42 INS53 INS42 UPD42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS83 INS39 INS42 INS42 INS83 MOV43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 MOV43 INS43 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS53 UPD42 MOV43 INS41 INS41 UPD42 INS21 UPD42 INS42 UPD42 INS42 UPD42 INS53 UPD42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS53 INS42 INS83 MOV43 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS83 INS74 INS42 INS53 INS42 INS83 INS74 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS41 INS42 INS53 INS42 INS43 INS43 INS43 INS83 UPD42 INS83 INS74 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS53 INS42 INS83 INS43 INS42 INS53 INS42 INS83 INS43 INS42 INS53 INS42 INS83 MOV43 INS42 INS53 INS42 INS42 INS53 INS42 INS42 INS53 INS83 INS43 INS42 INS53 INS42 UPD42 INS42 INS42 INS53 INS42 INS42 INS42 UPD42 INS43 INS42 INS42 MOV43 INS43 INS43 INS74 UPD66 INS65 INS66 INS42 INS43 INS76 INS76 INS74 INS42 INS74 UPD74 UPD74 UPD74 UPD74 INS42 INS42 INS43 INS76 INS76 INS74 INS42 UPD74 UPD42 MOV42 INS42 INS74 INS74 INS22 UPD74 INS66 INS65 UPD66 INS32 INS65 INS66 INS43 INS76 INS76 INS74 MOV59 MOV32 UPD42 INS74 INS44 MOV32 MOV8 INS44 MOV22 MOV8 MOV43 MOV43 INS74 INS44 MOV32 INS8 MOV43 INS43 INS39 INS59 INS39 INS59 INS44 INS42 MOV8 UPD42 UPD42 UPD66 INS65 INS66 INS65 INS66 INS22 INS14 MOV21 INS32 MOV32 INS14 INS14 INS42 INS42 INS14 INS14 INS14 INS42 INS14 INS14 INS42 INS14 INS14 INS42 MOV43 INS76 INS76 INS14 INS42 INS42 INS14 INS42 INS14 INS14 INS14 INS42 INS42 INS14 INS14 INS14 INS42 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS42 INS42 INS14 INS14 INS42 INS14 INS42 UPD27 MOV27 INS42 MOV32 INS42 MOV32 INS42 INS42 INS43 INS76 INS76 INS14 INS32 INS32 INS7 INS14 INS14 INS22 INS14 INS14 INS14 INS14 INS14 INS43 INS43 INS14 INS43 INS43 INS43 INS14 INS32 INS32 INS32 INS9 INS42 INS33 INS14 INS42 INS42 INS42 MOV43 INS43 INS43 INS42 INS14 INS42 INS14 INS42 INS14 INS14 INS14 INS14 INS42 INS14 INS14 INS22 INS42 UPD43 INS42 INS42 INS43 INS43 INS43 INS66 INS42 MOV43 MOV43 INS42 MOV43 MOV43 MOV43 INS52 INS42 INS66 INS42 INS42 UPD66 MOV66 INS42 MOV43 INS74 UPD42 INS14 INS22 INS22 MOV43 MOV43 MOV43 UPD42 INS70 INS43 INS42 INS43 INS42 INS60 INS22 INS43 INS76 INS76 INS43 INS42 MOV60 MOV21 INS42 INS42 MOV27 UPD42 MOV42 MOV27 INS42 INS42 INS43 INS42 INS66 UPD66 MOV66 INS70 MOV60 MOV60 MOV60 INS70 MOV60 INS70 MOV25 MOV25 MOV25 INS70 INS60 INS60 INS70 INS70 INS32 INS32 INS32 INS32 INS52 INS42 INS43 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS32 INS43 INS32 MOV22 INS38 UPD42 UPD42 INS42 INS43 INS32 INS22 INS42 INS14 INS42 INS9 MOV22 INS42 UPD42 UPD42 INS43 INS32 INS43 INS32 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS52 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS32 INS42 INS42 INS32 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 UPD42 INS43 INS32 INS32 INS32 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS76 INS76 INS74 MOV32 INS52 INS42 INS52 INS42 UPD42 INS44 INS32 INS8 UPD42 MOV42 MOV43 MOV43 UPD42 MOV42 INS74 INS74 INS59 INS52 INS42 INS42 UPD42 MOV42 MOV43 INS42 MOV43 INS74 INS74 INS44 INS42 MOV8 INS74 INS74 INS44 MOV32 MOV8 INS44 MOV32 MOV8 INS44 INS32 MOV8 INS74 MOV59 INS74 MOV59 INS44 MOV32 MOV8 INS74 INS74 INS44 INS42 MOV8 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 UPD74 MOV32 INS42 INS40 INS42 INS52 INS42 MOV43 INS22 INS42 INS40 INS42 INS42 INS40 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS83 INS74 INS29 INS78 INS40 INS42 INS42 MOV43 MOV43 INS42 UPD42 MOV42 MOV42 MOV60 MOV21 INS21 MOV32 MOV43 INS76 INS76 MOV43 INS76 INS76 INS42 MOV32 UPD42 UPD42 MOV43 INS43 MOV43 INS43 MOV43 INS42 INS70 MOV43 INS43 INS43 MOV43 INS43 MOV43 MOV43 INS42 MOV43 INS42 INS70 MOV43 INS42 INS22 MOV42 MOV43 INS43 INS74 MOV43 INS43 INS74 INS43 INS42 MOV43 INS74 MOV43 INS74 INS83 INS74 INS42 UPD42 INS52 UPD42 INS27 UPD42 UPD42 UPD42 INS52 INS42 MOV43 INS43 INS74 INS65 INS42 MOV43 INS42 UPD42 MOV43 INS32 MOV43 INS42 INS74 MOV43 INS42 MOV43 INS42 INS8 INS42 INS42 UPD42 MOV42 MOV43 INS44 INS42 MOV8 INS42 INS42 INS42 MOV62 INS44 MOV32 INS8 INS52 INS42 MOV43 INS42 INS43 INS76 INS76 INS42 INS43 INS43 INS43 INS42 UPD43 INS74 INS42 INS43 INS76 INS76 INS43 INS76 INS76 INS43 INS76 INS76 MOV43 INS74 INS74 INS74 INS45 INS42 INS45 INS42 MOV43 INS43 UPD74 INS66 INS66 INS74 UPD42 MOV11 UPD42 UPD42 UPD42 MOV42 MOV42 MOV32 MOV43 MOV21 MOV43 INS42 MOV43 INS42 MOV60 MOV25 INS42 UPD42 MOV42 INS42 INS42 INS42 MOV43 INS43 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV43 INS43 INS43 UPD42 UPD42 MOV43 INS43 MOV43 INS43 UPD42 UPD42 INS42 INS43 INS43 INS22 UPD42 MOV43 MOV43 INS42 MOV43 MOV43 INS42 UPD43 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS22 INS52 INS42 UPD43 UPD42 INS42 UPD42 UPD42 UPD42 INS52 INS42 INS22 UPD42 MOV43 INS42 INS42 INS74 INS52 INS42 UPD42 UPD42 MOV43 UPD42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL7 DEL83 DEL83 DEL42 DEL32 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL43 DEL14 DEL83 DEL11 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL83 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL83 DEL36 DEL36 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL36 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL8 DEL8 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL60 DEL60 DEL40 DEL40 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL39 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL40 DEL42 DEL52 DEL13 DEL32 DEL34 DEL38 DEL27 DEL11 DEL83 DEL42 DEL43 DEL42 DEL41 DEL52 DEL42 DEL22 DEL32 DEL41 DEL52 DEL42 DEL22 DEL14 DEL36 DEL42 DEL9 DEL32 DEL41 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL41 DEL39 DEL42 DEL42 DEL43 DEL42 DEL41 DEL42 DEL41 DEL34 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL59 DEL60 DEL11 DEL83 DEL11 DEL41 DEL83 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL39 DEL42 DEL83 DEL42 DEL74 DEL40 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42