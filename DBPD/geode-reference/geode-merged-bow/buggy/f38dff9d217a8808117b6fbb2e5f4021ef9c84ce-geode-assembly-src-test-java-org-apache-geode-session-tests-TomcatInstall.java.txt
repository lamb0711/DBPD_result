GEODE-3434: Allow the modules to be interoperable with current and older versions of tomcat 7

  * Modified DeltaSessions to use reflection to handle attributes fields incase an earlier tomcat 7 is used
  * Modified DeltaSession7 and DeltaSession8 to extend from DeltaSession
  * Added session backward compatibility tests
  * Modified aseembly build to download old product installs
  * Minor refactor of VersionManager to reuse property file load code

+  public static final String GEODE_BUILD_HOME_LIB = GEODE_BUILD_HOME + "/lib/";
+
+    TOMCAT755(7,
+        "http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.55/bin/apache-tomcat-7.0.55.zip"),
+    TOMCAT779(7,
+        "http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.79/bin/apache-tomcat-7.0.79.zip"),
-          throw new IllegalArgumentException("Illegal tomcat version option");
+          return getVersion();
+        case TOMCAT755:
+        case TOMCAT779:
-      {"antlr", "commons-lang", "fastutil", "geode-core", "geode-modules", "geode-modules-tomcat7",
-          "geode-modules-tomcat8", "javax.transaction-api", "jgroups", "log4j-api", "log4j-core",
-          "log4j-jul", "shiro-core", "slf4j-api", "slf4j-jdk14", "commons-validator"};
+      {"antlr", "commons-lang", "fastutil", "geode-core", "javax.transaction-api", "jgroups",
+          "log4j-api", "log4j-core", "log4j-jul", "shiro-core", "commons-validator"};
-  public TomcatInstall(TomcatVersion version) throws Exception {
-    this(version, ConnectionType.PEER_TO_PEER, DEFAULT_INSTALL_DIR);
-  }
-
-    this(version, ConnectionType.PEER_TO_PEER, installDir);
+    this(version, ConnectionType.PEER_TO_PEER, installDir, DEFAULT_MODULE_LOCATION,
+        GEODE_BUILD_HOME_LIB);
-  public TomcatInstall(TomcatVersion version, ConnectionType connType) throws Exception {
-    this(version, connType, DEFAULT_INSTALL_DIR);
+  public TomcatInstall(TomcatVersion version, ConnectionType connType, String installDir)
+      throws Exception {
+    this(version, connType, installDir, DEFAULT_MODULE_LOCATION, GEODE_BUILD_HOME_LIB);
-   * Specifically, this function uses {@link #copyTomcatGeodeReqFiles(String)} to install geode
-   * session into Tomcat, {@link #setupDefaultSettings()} to modify the context and server XML files
-   * within the installation's 'conf' folder, and {@link #updateProperties()} to set the jar
+   * Specifically, this function uses {@link #copyTomcatGeodeReqFiles(String, String)} to install
+   * geode session into Tomcat, {@link #setupDefaultSettings()} to modify the context and server XML
+   * files within the installation's 'conf' folder, and {@link #updateProperties()} to set the jar
-  public TomcatInstall(TomcatVersion version, ConnectionType connType, String installDir)
-      throws Exception {
+  public TomcatInstall(TomcatVersion version, ConnectionType connType, String installDir,
+      String modulesJarLocation, String extraJarsPath) throws Exception {
-    super(installDir, version.getDownloadURL(), connType, "tomcat");
+    super(installDir, version.getDownloadURL(), connType, "tomcat", modulesJarLocation);
+    modulesJarLocation = getModulePath() + "/lib/";
-    copyTomcatGeodeReqFiles(GEODE_BUILD_HOME + "/lib/");
+    copyTomcatGeodeReqFiles(modulesJarLocation, extraJarsPath);
-  private void copyTomcatGeodeReqFiles(String extraJarsPath) throws IOException {
+  private void copyTomcatGeodeReqFiles(String moduleJarDir, String extraJarsPath)
+      throws IOException {
-    String versionRegex = "-[0-9]+.*\\.jar";
+    String versionRegex = "-?[0-9]*.*\\.jar";
-    if (tomcatLib.exists()) {
-      try {
-        for (File file : tomcatLib.listFiles())
-          patterns.removeIf(pattern -> pattern.matcher(file.getName()).find());
-      } catch (NullPointerException e) {
-        throw new IOException("No files found in tomcat lib directory " + tomcatLibPath);
-      }
-    } else {
-      tomcatLib.mkdir();
-    }
-      for (File file : (new File(getModulePath() + "/lib/")).listFiles()) {
-        for (Pattern pattern : patterns) {
-          if (pattern.matcher(file.getName()).find()) {
-            requiredFiles.add(file);
-            patterns.remove(pattern);
-            break;
-          }
+      for (File file : (new File(moduleJarDir)).listFiles()) {
+        if (file.isFile() && file.getName().endsWith(".jar")) {
+          requiredFiles.add(file);
-            patterns.remove(pattern);

INS23 INS83 INS83 INS83 INS43 INS59 INS72 INS72 INS44 INS44 INS44 INS44 INS42 INS42 MOV27 INS42 INS34 INS45 INS42 INS34 INS45 INS43 INS42 INS43 INS42 INS43 INS42 INS21 MOV43 INS42 MOV49 INS42 INS42 INS42 INS42 UPD42 INS42 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS7 INS43 INS8 INS41 INS49 INS49 INS42 MOV27 INS42 INS42 INS42 UPD45 MOV70 INS32 INS42 INS42 INS69 INS8 MOV44 MOV32 MOV8 INS42 INS43 INS25 INS42 INS27 MOV8 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS8 INS42 INS42 MOV21 INS10 DEL42 DEL43 DEL45 DEL14 DEL53 DEL45 DEL45 DEL45 DEL45 DEL45 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL42 DEL17 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL86 DEL32 DEL21 DEL70 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL8 DEL70 DEL8