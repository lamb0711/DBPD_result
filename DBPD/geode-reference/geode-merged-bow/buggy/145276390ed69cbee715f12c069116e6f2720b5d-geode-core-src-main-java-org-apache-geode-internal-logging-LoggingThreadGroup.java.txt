GEODE-2644: Cleanup logging related files

Cleanup files that helped fix logging related test failures or helped
with reviewing and understanding code while working on GEODE-2644.

* Remove warnings and improve code cleanliness
* Improve testing and failure messages

+import static org.apache.geode.internal.logging.InternalLogWriter.ALL_LEVEL;
+
-  private static final StandardErrorPrinter stderr =
-      new StandardErrorPrinter(InternalLogWriter.ALL_LEVEL);
+  private static final StandardErrorPrinter stderr = new StandardErrorPrinter(ALL_LEVEL);
-  private static final Collection<LoggingThreadGroup> loggingThreadGroups =
-      new ArrayList<LoggingThreadGroup>();
+  private static final Collection<LoggingThreadGroup> loggingThreadGroups = new ArrayList<>();
-   *        author David Whitlock
-        LoggingThreadGroup group2 = (LoggingThreadGroup) iter.next();
+        LoggingThreadGroup group2 = iter.next();
-   *        author David Whitlock
-        LoggingThreadGroup group2 = (LoggingThreadGroup) iter.next();
+        LoggingThreadGroup group2 = iter.next();
-  // /**
-  // * @deprecated Only for use by hydra for backwards compatability reasons.
-  // * Returns a <code>ThreadGroup</code> whose {@link
-  // * ThreadGroup#uncaughtException} method logs to both {#link
-  // * System#err} and the given <code>LogWriterI18n</code>.
-  // *
-  // * @param name
-  // * The name of the <code>ThreadGroup</code>
-  // * @param logger
-  // * A <code>LogWriter</code> to log uncaught exceptions to. It
-  // * is okay for this argument to be <code>null</code>.
-  // *
-  // * author kbanks
-  // * @since GemFire 6.0
-  // */
-  // @Deprecated public static LoggingThreadGroup createThreadGroup(final String name,
-  // final LogWriter logger) {
-  // return createThreadGroup(name,
-  // logger != null ? logger.convertToLogWriterI18n() : null);
-  // }
-
-      LoggingThreadGroup group;
-      Iterator<?> itr = loggingThreadGroups.iterator();
-      while (itr.hasNext()) {
-        group = (LoggingThreadGroup) itr.next();
-        if (!group.getName().equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME)
-            && !group.getName().equals("GemFireConnectionFactory Shutdown Hook")) {
-          group.cleanup();
+      for (LoggingThreadGroup loggingThreadGroup : loggingThreadGroups) {
+        if (!loggingThreadGroup.getName().equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME)
+            && !loggingThreadGroup.getName().equals("GemFireConnectionFactory Shutdown Hook")) {
+          loggingThreadGroup.cleanup();
-  private Object dispatchLock = new Object();
+  private final Object dispatchLock = new Object();
-    synchronized (this.dispatchLock) {
+    synchronized (dispatchLock) {
-        if (this.logger != null) {
-          this.logger.info(String.format(msg, msgArgs));
+        if (logger != null) {
+          logger.info(String.format(msg, msgArgs));
-        if (this.logWriter != null) {
-          this.logWriter.info(String.format(msg, msgArgs));
+        if (logWriter != null) {
+          logWriter.info(String.format(msg, msgArgs));
-        if (this.logger != null) {
-          this.logger.fatal(String.format("Uncaught exception in thread %s", t), ex);
+        if (logger != null) {
+          logger.fatal(String.format("Uncaught exception in thread %s", t), ex);
-        if (this.logWriter != null) {
-          this.logWriter.severe(String.format("Uncaught exception in thread %s", t), ex);
+        if (logWriter != null) {
+          logWriter.severe(String.format("Uncaught exception in thread %s", t), ex);
-      // if (!(ex instanceof RuntimeException) && (ex instanceof Exception)) {
-      // something's fishy - checked exceptions shouldn't get here
-      // this.logger.severe("stack trace showing origin of uncaught checked exception", new
-      // Exception("stack trace");
-      // }
-      this.uncaughtExceptionsCount++;
+      uncaughtExceptionsCount++;
-    synchronized (this.dispatchLock) {
-      this.uncaughtExceptionsCount = 0;
+    synchronized (dispatchLock) {
+      uncaughtExceptionsCount = 0;
-    synchronized (this.dispatchLock) {
+    synchronized (dispatchLock) {
-    this.logger = null;
-    this.logWriter = null;
+    logger = null;
+    logWriter = null;

INS26 INS40 INS83 INS42 UPD74 INS42 INS42 INS42 INS70 INS42 INS42 INS44 INS42 INS8 MOV25 MOV25 MOV43 INS42 MOV25 INS42 INS42 MOV32 MOV32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 DEL40 DEL42 DEL43 DEL66 DEL42 DEL43 DEL11 DEL66 DEL42 DEL43 DEL11 DEL42 DEL59 DEL60 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL61 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22