GEODE-749: refactor the code to look for the war file in multiple places w/o version number and look for them in the classpath as well.

Closes #73

+import java.net.URL;
-  private static final String TOOLS_WEB_API_WAR = "/tools/Extensions/gemfire-web-api-";
-  private static final String LIB_WEB_API_WAR = "/lib/gemfire-web-api-";
-  private static final String TOOLS_WEB_WAR = "/tools/Extensions/gemfire-web-";
-  private static final String LIB_WEB_WAR = "/lib/gemfire-web-";
-  private static final String TOOLS_PULSE_WAR = "/tools/Pulse/pulse.war";
-  private static final String LIB_PULSE_WAR = "/lib/pulse.war";
+
-  public String getGemFireWebApiWarLocation() {
+  /**
+   * this method will try to find the named war files in the following order:
+   * 1. if GEMFIRE is defined, it will look under tools/Extensions, tools/Pulse and lib folder (in this order) to find
+   *    either the name-version.war or the name.war file
+   * 2. If GEMFIRE is not defined, it will try to find either the name-version.war/name.war (in that order) on the
+   *    classpath
+   *
+   * @param warFilePrefix : the prefix of the war file, e.g. gemfire-web, gemfire-pulse, or gemfire-web-api
+   * @return
+     */
+  public String findWarLocation(String warFilePrefix) {
-    assert !StringUtils.isBlank(gemfireHome) : ERROR_VARIABLE_NOT_SET;
-
-    String toolsWebApiWar = gemfireHome + TOOLS_WEB_API_WAR + gemfireVersion + ".war";
-    String libWebApiWar = gemfireHome + LIB_WEB_API_WAR + gemfireVersion + ".war";
-
-    if (new File(toolsWebApiWar).isFile()) {
-      logger.info("GemFire Dev REST API war: {}", toolsWebApiWar);
-      return toolsWebApiWar;
-    } else if (new File(libWebApiWar).isFile()) {
-      logger.info("GemFire Dev REST API war: {}", libWebApiWar);
-      return libWebApiWar;
-    } else {
-      logger.warn("GemFire Dev REST API war not found - neither {} or {} exist", toolsWebApiWar, libWebApiWar);
-      return null;
+    if(!StringUtils.isBlank(gemfireHome)) {
+      String[] possibleFiles = {
+              gemfireHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              gemfireHome + "/tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              gemfireHome + "/lib/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              gemfireHome + "/tools/Extensions/" + warFilePrefix + ".war",
+              gemfireHome + "/tools/Pulse/" + warFilePrefix + ".war",
+              gemfireHome + "/lib/" + warFilePrefix + ".war"
+      };
+      for (String possibleFile : possibleFiles) {
+        if (new File(possibleFile).isFile()) {
+          logger.info(warFilePrefix + " war found: {}", possibleFile);
+          return possibleFile;
+        }
+      }
-  }
-  /*
-   * Use the GEMFIRE environment variable to find the GemFire product tree.
-   * First, look in the $GEMFIRE/tools/Management directory Second, look in the
-   * $GEMFIRE/lib directory Finally, if we cannot find Management WAR file then
-   * return null...
-   */
-  public String getGemFireWebWarLocation() {
-    String gemfireHome = getGemFireHome();
-    assert !StringUtils.isBlank(gemfireHome) : ERROR_VARIABLE_NOT_SET;
-
-    String toolsWebWar = gemfireHome + TOOLS_WEB_WAR + gemfireVersion + ".war";
-    String libWebWar = gemfireHome + LIB_WEB_WAR + gemfireVersion + ".war";
-
-    if (new File(toolsWebWar).isFile()) {
-      logger.info("GemFire Admin REST war: {}", toolsWebWar);
-      return toolsWebWar;
-    } else if (new File(libWebWar).isFile()) {
-      logger.info("GemFire Admin REST war: {}", libWebWar);
-      return libWebWar;
-    } else {
-      logger.warn("GemFire Admin REST war not found - neither {} or {} exist", toolsWebWar, libWebWar);
-      return null;
+    // if $GEMFIRE is not set or we are not able to find it in all the possible locations under $GEMFIRE, try to
+    // find in the classpath
+    String[] possibleFiles = {
+            warFilePrefix + "-" + gemfireVersion + ".war",
+            warFilePrefix + ".war"
+    };
+    for(String possibleFile:possibleFiles){
+      URL url = this.getClass().getClassLoader().getResource(possibleFile);
+      if(url!=null){
+        // found the war file
+        logger.info(warFilePrefix + " war found: {}", possibleFile);
+        return url.getPath();
+      }
-  }
-  // Use the GEMFIRE environment variable to find the GemFire product tree.
-  // First, look in the $GEMFIRE/tools/Pulse directory
-  // Second, look in the $GEMFIRE/lib directory
-  // Finally, if we cannot find the Management WAR file then return null...
-  public String getPulseWarLocation() {
-    String gemfireHome = getGemFireHome();
-    assert !StringUtils.isBlank(gemfireHome) : ERROR_VARIABLE_NOT_SET;
-
-    String toolsPulseWar = gemfireHome + TOOLS_PULSE_WAR;
-    String libPulseWar = gemfireHome + LIB_PULSE_WAR;
-
-    if (new File(toolsPulseWar).isFile()) {
-      logger.info("GemFire Pulse war: {}", toolsPulseWar);
-      return toolsPulseWar;
-    } else if (new File(libPulseWar).isFile()) {
-      logger.info("GemFire Pulse war: {}", libPulseWar);
-      return libPulseWar;
-    } else {
-      logger.warn("GemFire Pulse war not found - neither {} or {} exist", toolsPulseWar, libPulseWar);
-      return null;
-    }
+    // we still couldn't find the war file
+    logger.warn(warFilePrefix+" war file was not found");
+    return null;

INS26 INS40 INS31 INS29 INS83 MOV43 INS42 INS44 INS8 INS65 INS65 INS65 MOV43 INS42 MOV60 INS25 INS60 INS70 MOV21 MOV41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 MOV38 INS8 INS5 INS59 INS44 INS42 INS8 INS60 INS70 MOV43 INS85 INS42 INS4 MOV43 INS42 INS60 INS25 INS27 INS5 INS59 INS44 INS42 INS8 INS27 INS27 INS43 INS59 INS27 MOV8 INS42 INS45 MOV43 INS85 INS42 INS4 MOV43 INS42 INS25 INS42 INS45 INS42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS32 INS42 INS33 INS27 INS27 INS27 INS27 INS27 INS27 MOV32 MOV8 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS45 MOV42 INS45 UPD42 MOV42 INS45 MOV42 MOV45 MOV42 INS45 UPD42 MOV42 INS45 MOV42 MOV45 INS42 INS45 INS42 INS45 MOV42 INS45 UPD42 MOV42 MOV45 MOV42 INS45 UPD42 MOV42 MOV45 INS32 UPD42 MOV42 INS27 UPD42 INS42 INS42 UPD42 UPD42 INS52 UPD42 MOV42 INS42 INS45 INS27 UPD42 INS42 INS45 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL45 DEL45 DEL42 DEL45 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL6 DEL42 DEL27 DEL59 DEL60 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL6 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL6 DEL42 DEL42 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL43 DEL42 DEL14 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL33 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31