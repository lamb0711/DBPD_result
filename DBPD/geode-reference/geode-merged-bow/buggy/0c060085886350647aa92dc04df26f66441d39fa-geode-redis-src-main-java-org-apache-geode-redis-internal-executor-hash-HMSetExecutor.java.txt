GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
-import java.util.HashMap;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
+/**
+ * <pre>
+ *
+ * Implements the HMSet command.
+ *
+ * This command will set the specified fields to their given values in the hash stored at key.
+ * This command overwrites any specified fields already in the hash.
+ * A new key holding a hash is created, if the key does not exist.
+ *
+ * Examples:
+ *
+ * redis> HMSET myhash field1 "Hello" field2 "World"
+ * "OK"
+ * redis> HGET myhash field1
+ * "Hello"
+ * redis> HGET myhash field2
+ * "World"
+ *
+ * </pre>
+ */
-  private final String SUCCESS = "OK";
+  private static final String SUCCESS = "OK";
-    if (commandElems.size() < 3 || commandElems.size() % 2 == 1) {
+    if (commandElems.size() < 4 || commandElems.size() % 2 == 1) {
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion =
-        getOrCreateRegion(context, key, RedisDataType.REDIS_HASH);
+      for (int i = 2; i < commandElems.size(); i += 2) {
+        byte[] fieldArray = commandElems.get(i);
+        ByteArrayWrapper field = new ByteArrayWrapper(fieldArray);
+        byte[] value = commandElems.get(i + 1);
+        map.put(field, new ByteArrayWrapper(value));
+      }
-    Map<ByteArrayWrapper, ByteArrayWrapper> map = new HashMap<ByteArrayWrapper, ByteArrayWrapper>();
-    for (int i = 2; i < commandElems.size(); i += 2) {
-      byte[] fieldArray = commandElems.get(i);
-      ByteArrayWrapper field = new ByteArrayWrapper(fieldArray);
-      byte[] value = commandElems.get(i + 1);
-      map.put(field, new ByteArrayWrapper(value));
+      saveMap(map, context, key);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
+      return;
-
-    keyRegion.putAll(map);
-
+    context.getKeyRegistrar().register(key, RedisDataType.REDIS_HASH);
-

MOV26 UPD40 UPD40 INS29 INS65 INS83 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS54 INS58 INS8 INS12 INS12 INS43 INS59 MOV60 MOV24 INS21 INS44 INS8 INS44 INS8 INS32 UPD42 UPD42 INS40 UPD34 UPD42 MOV42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS42 UPD42 MOV42 INS32 INS45 INS42 INS42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL43 DEL43 DEL43 DEL74 DEL42 DEL40 DEL32 DEL59 DEL60