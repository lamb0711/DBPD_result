GEODE-77 adding new unit tests for GMSJoinLeave

This adds a bunch of new unit tests to GMSJoinLeaveJUnitTest and
fixes a number of problems exposed by the new tests.

Members were in the view multiple times.
Members were in the shutdownMembers collection multiple times.
Members could be in the crashedMembers collection multiple times.
View preparation was actually installing the view in the coordinator.
A rogue process could request removal of a member.

-
+    
+    
+    InternalDistributedMember mbr = incomingRequest.getMemberID();
+    
+
+    if (!v.contains(mbr) && mbr.getVmViewId() < v.getViewId()) {
+      logger.debug("ignoring leave request from old member");
+      return;
+    }
-      services.getManager().forceDisconnect(incomingRequest.getReason());
+      forceDisconnect(incomingRequest.getReason());
+    
-      services.getManager().forceDisconnect(incomingRequest.getReason());
+      forceDisconnect(incomingRequest.getReason());
-  //for testing purposes, returns a copy of the view requests for verification
+  // for testing purposes, returns a copy of the view requests for verification
+  // for testing purposes, returns the view-creation thread
+  ViewCreator getViewCreator() {
+    return viewCreator;
+  }
+  
-  private void becomeCoordinator() {
+  void becomeCoordinator() { // package access for unit testing
-          mbrs.add(localAddress);
+          if (!mbrs.contains(localAddress)) {
+            mbrs.add(localAddress);
+          }
+
-    installView(view);
+
+
+    logger.info((preparing? "preparing" : "sending") + " new view " + view);
+
+    if (preparing) {
+      this.preparedView = view;
+    } else {
+      installView(view);
+    }
+    
+    
-
-    logger.info((preparing? "preparing" : "sending") + " new view " + view);
-          services.getManager().forceDisconnect("This node is no longer in the membership view");
+          forceDisconnect("This node is no longer in the membership view");
+  private void forceDisconnect(String reason) {
+    this.isStopping = true;
+    services.getManager().forceDisconnect(reason);
+  }
+  
+    
+    logger.info("received new view: {}", newView);
+    
-      if (checkForPartition(newView)) {
+      if (isNetworkPartition(newView)) {
+  /**
+   * returns true if this member thinks it is the membership coordinator
+   * for the distributed system
+   */
+  public boolean isCoordinator() {
+    return this.isCoordinator;
+  }
+  
+  /**
+   * return true if we're stopping or are stopped
+   */
+  public boolean isStopping() {
+    return this.isStopping;
+  }
+  
+  /**
+   * returns the currently prepared view, if any
+   */
+  public NetView getPreparedView() {
+    return this.preparedView;
+  }
+  
-  private boolean checkForPartition(NetView newView) {
+  private boolean isNetworkPartition(NetView newView) {
+        logger.warn("total weight lost in this view change is {} of {}.  Quorum has been lost!",
+            failedWeight, oldWeight);
+    
+    volatile boolean waiting = false;
+    
+    boolean isWaiting() {
+      return waiting;
+    }
+                waiting = true;
+              } finally {
+                waiting = false;
-          if (!oldMembers.contains(mbr)) {
+          if (!oldMembers.contains(mbr) && !joinReqs.contains(mbr)) {
-          if (oldMembers.contains(mbr)) {
+          if (oldMembers.contains(mbr) && !leaveReqs.contains(mbr)) {
-          if (oldMembers.contains(mbr)) {
+          if (oldMembers.contains(mbr) && !leaveReqs.contains(mbr) && !removalReqs.contains(mbr)) {
-          // TODO: handle removals
+      // if there are no membership changes then abort creation of
+      // the new view
+      if (newView.getMembers().equals(currentView.getMembers())) {
+        logger.info("membership hasn't changed - aborting new view {}", newView);
+        return true;
+      }
+      
-      if ( !(checkForPartition(newView) && quorumRequired) ) {
+      if ( !(isNetworkPartition(newView) && quorumRequired) ) {

INS31 INS31 INS31 INS31 INS31 INS43 INS42 INS8 MOV21 INS83 INS39 INS42 INS44 MOV8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 UPD42 INS23 INS31 INS60 INS25 INS42 INS41 INS25 INS43 INS42 INS21 INS21 INS65 INS41 INS65 INS41 INS65 INS42 INS41 INS83 INS39 INS59 INS39 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS8 INS8 INS42 INS7 INS32 INS66 INS66 INS22 INS66 INS22 INS66 INS22 INS42 INS9 INS41 INS25 INS42 INS42 INS32 INS38 INS27 INS21 INS41 INS21 MOV21 INS22 INS9 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS32 INS7 INS52 INS42 INS32 INS42 INS32 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS42 UPD42 INS21 INS42 INS42 INS42 INS42 INS32 INS9 INS52 INS42 INS8 INS32 INS42 INS42 INS45 INS42 INS25 INS21 INS42 INS42 INS45 INS42 INS42 INS27 UPD42 INS38 INS8 INS32 MOV38 INS38 INS27 INS32 MOV21 INS42 INS45 INS32 MOV32 INS38 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 INS38 INS38 INS8 INS42 INS42 INS42 INS32 INS32 INS21 INS21 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS7 INS7 INS42 INS9 INS42 INS9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL45