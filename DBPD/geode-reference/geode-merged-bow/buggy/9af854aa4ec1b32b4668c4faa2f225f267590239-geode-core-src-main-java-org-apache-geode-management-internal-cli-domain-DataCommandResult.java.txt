GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500

-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
+import org.apache.commons.lang.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
- * Domain object used for Data Commands Functions
- * 
- * TODO : Implement DataSerializable
- *
+ * Domain object used for Data Commands Functions TODO : Implement DataSerializable
-  /**
-   * 
-   */
+  private static Logger logger = LogManager.getLogger();
+
-  // Aggreagated Data.
+  public static final String MISSING_VALUE = "<NULL>";
+
+  // Aggregated Data.
-      if (getResult != null)
+      if (getResult != null) {
+      }
-      if (putResult != null)
+      if (putResult != null) {
+      }
-      if (removeResult != null)
+      if (removeResult != null) {
+      }
-    if (errorString != null)
+    if (errorString != null) {
+    }
-    if (CliStrings.GET.equals(command))
-      return true;
-    else
-      return false;
+    return CliStrings.GET.equals(command);
-    if (CliStrings.PUT.equals(command))
-      return true;
-    else
-      return false;
+    return CliStrings.PUT.equals(command);
-    if (CliStrings.REMOVE.equals(command))
-      return true;
-    else
-      return false;
+    return CliStrings.REMOVE.equals(command);
-    if (CliStrings.LOCATE_ENTRY.equals(command))
-      return true;
-    else
-      return false;
+    return CliStrings.LOCATE_ENTRY.equals(command);
-    if (CliStrings.QUERY.equals(command))
-      return true;
-    else
-      return false;
+    return CliStrings.QUERY.equals(command);
-    if (keyClass == null || keyClass.isEmpty())
+    if (StringUtils.isEmpty(keyClass)) {
+    }
-    if (valueClass == null || valueClass.isEmpty())
+    if (StringUtils.isEmpty(valueClass)) {
+    }
+    }
+
+    CompositeResultData data = ResultBuilder.createCompositeResultData();
+    SectionResultData section = data.addSection();
+    TabularResultData table = section.addTable();
+
+    section.addData(RESULT_FLAG, operationCompletedSuccessfully);
+    if (infoString != null) {
+      section.addData("Message", infoString);
+    }
+
+    if (isGet()) {
+      toCommandResult_isGet(section, table);
+    } else if (isLocateEntry()) {
+      toCommandResult_isLocate(section, table);
+    } else if (isPut()) {
+      toCommandResult_isPut(section, table);
+    } else if (isRemove()) {
+      toCommandResult_isRemove(section, table);
+    } else if (isSelect()) {
+      // its moved to its separate method
+    }
+    return ResultBuilder.buildResult(data);
+  }
+
+  private void toCommandResult_isGet(SectionResultData section, TabularResultData table) {
+    section.addData("Key Class", getKeyClass());
+    if (!isDeclaredPrimitive(keyClass)) {
+      addJSONStringToTable(table, inputKey);
-      CompositeResultData data = ResultBuilder.createCompositeResultData();
-      SectionResultData section = data.addSection();
-      TabularResultData table = section.addTable();
+      section.addData("Key", inputKey);
+    }
-      section.addData(RESULT_FLAG, operationCompletedSuccessfully);
-      if (infoString != null)
-        section.addData("Message", infoString);
+    section.addData("Value Class", getValueClass());
+    if (!isDeclaredPrimitive(valueClass)) {
+      addJSONStringToTable(table, getResult);
+    } else {
+      section.addData("Value", getResult);
+    }
+  }
-      if (isGet()) {
+  private void toCommandResult_isLocate(SectionResultData section, TabularResultData table) {
-        section.addData("Key Class", getKeyClass());
-        if (!isDeclaredPrimitive(keyClass))
-          addJSONStringToTable(table, inputKey);
-        else
-          section.addData("Key", inputKey);
+    section.addData("Key Class", getKeyClass());
+    if (!isDeclaredPrimitive(keyClass)) {
+      addJSONStringToTable(table, inputKey);
+    } else {
+      section.addData("Key", inputKey);
+    }
-        section.addData("Value Class", getValueClass());
-        if (!isDeclaredPrimitive(valueClass))
-          addJSONStringToTable(table, getResult);
-        else
-          section.addData("Value", getResult);
+    if (locateEntryLocations != null) {
+      TabularResultData locationTable = section.addTable();
+      int totalLocations = 0;
-      } else if (isLocateEntry()) {
+      for (KeyInfo info : locateEntryLocations) {
+        List<Object[]> locations = info.getLocations();
-        section.addData("Key Class", getKeyClass());
-        if (!isDeclaredPrimitive(keyClass))
-          addJSONStringToTable(table, inputKey);
-        else
-          section.addData("Key", inputKey);
-
-        if (locateEntryLocations != null) {
-          TabularResultData locationTable = section.addTable();
-
-          int totalLocations = 0;
-
-          for (KeyInfo info : locateEntryLocations) {
-            List<Object[]> locations = info.getLocations();
-
-            if (locations != null) {
-              if (locations.size() == 1) {
-                Object array[] = locations.get(0);
-                // String regionPath = (String)array[0];
-                boolean found = (Boolean) array[1];
-                if (found) {
-                  totalLocations++;
-                  boolean primary = (Boolean) array[3];
-                  String bucketId = (String) array[4];
-                  locationTable.accumulate("MemberName", info.getMemberName());
-                  locationTable.accumulate("MemberId", info.getMemberId());
-                  if (bucketId != null) {// PR
-                    if (primary)
-                      locationTable.accumulate("Primary", "*Primary PR*");
-                    else
-                      locationTable.accumulate("Primary", "No");
-                    locationTable.accumulate("BucketId", bucketId);
-                  }
+        if (locations != null) {
+          if (locations.size() == 1) {
+            Object array[] = locations.get(0);
+            // String regionPath = (String)array[0];
+            boolean found = (Boolean) array[1];
+            if (found) {
+              totalLocations++;
+              boolean primary = (Boolean) array[3];
+              String bucketId = (String) array[4];
+              locationTable.accumulate("MemberName", info.getMemberName());
+              locationTable.accumulate("MemberId", info.getMemberId());
+              if (bucketId != null) {// PR
+                if (primary) {
+                  locationTable.accumulate("Primary", "*Primary PR*");
+                } else {
+                  locationTable.accumulate("Primary", "No");
-              } else {
-                for (Object[] array : locations) {
-                  String regionPath = (String) array[0];
-                  boolean found = (Boolean) array[1];
-                  if (found) {
-                    totalLocations++;
-                    boolean primary = (Boolean) array[3];
-                    String bucketId = (String) array[4];
-                    locationTable.accumulate("MemberName", info.getMemberName());
-                    locationTable.accumulate("MemberId", info.getMemberId());
-                    locationTable.accumulate("RegionPath", regionPath);
-                    if (bucketId != null) {// PR
-                      if (primary)
-                        locationTable.accumulate("Primary", "*Primary PR*");
-                      else
-                        locationTable.accumulate("Primary", "No");
-                      locationTable.accumulate("BucketId", bucketId);
-                    }
+                locationTable.accumulate("BucketId", bucketId);
+              }
+            }
+          } else {
+            for (Object[] array : locations) {
+              String regionPath = (String) array[0];
+              boolean found = (Boolean) array[1];
+              if (found) {
+                totalLocations++;
+                boolean primary = (Boolean) array[3];
+                String bucketId = (String) array[4];
+                locationTable.accumulate("MemberName", info.getMemberName());
+                locationTable.accumulate("MemberId", info.getMemberId());
+                locationTable.accumulate("RegionPath", regionPath);
+                if (bucketId != null) {// PR
+                  if (primary) {
+                    locationTable.accumulate("Primary", "*Primary PR*");
+                  } else {
+                    locationTable.accumulate("Primary", "No");
+                  locationTable.accumulate("BucketId", bucketId);
-          section.addData("Locations Found", totalLocations);
-        } else {
-          section.addData("Location Info ", "Could not find location information");
-
-      } else if (isPut()) {
-        section.addData("Key Class", getKeyClass());
-
-        if (!isDeclaredPrimitive(keyClass)) {
-          addJSONStringToTable(table, inputKey);
-        } else
-          section.addData("Key", inputKey);
-
-        section.addData("Value Class", getValueClass());
-        if (!isDeclaredPrimitive(valueClass)) {
-          addJSONStringToTable(table, putResult);
-        } else
-          section.addData("Old Value", putResult);
-
-      } else if (isRemove()) {
-        if (inputKey != null) {// avoids printing key when remove ALL is called
-          section.addData("Key Class", getKeyClass());
-          if (!isDeclaredPrimitive(keyClass))
-            addJSONStringToTable(table, inputKey);
-          else
-            section.addData("Key", inputKey);
-        }
-        /*
-         * if(valueClass!=null && !valueClass.isEmpty()){ section.addData("Value Class",
-         * getValueClass()); addJSONStringToTable(table,removeResult); }else
-         * section.addData("Value", removeResult);
-         */
-      } else if (isSelect()) {
-        // its moved to its separate method
-      return ResultBuilder.buildResult(data);
+      section.addData("Locations Found", totalLocations);
+    } else {
+      section.addData("Location Info ", "Could not find location information");
+    }
+  }
+
+  private void toCommandResult_isPut(SectionResultData section, TabularResultData table) {
+    section.addData("Key Class", getKeyClass());
+
+    if (!isDeclaredPrimitive(keyClass)) {
+      addJSONStringToTable(table, inputKey);
+    } else {
+      section.addData("Key", inputKey);
+    }
+
+    section.addData("Value Class", getValueClass());
+    if (!isDeclaredPrimitive(valueClass)) {
+      addJSONStringToTable(table, putResult);
+    } else {
+      section.addData("Old Value", putResult);
+    }
+
+  }
+
+  private void toCommandResult_isRemove(SectionResultData section, TabularResultData table) {
+    if (inputKey != null) {// avoids printing key when remove ALL is called
+      section.addData("Key Class", getKeyClass());
+      if (!isDeclaredPrimitive(keyClass)) {
+        addJSONStringToTable(table, inputKey);
+      } else {
+        section.addData("Key", inputKey);
+      }
-          if (this.queryTraceString != null)
+          if (this.queryTraceString != null) {
+          }
-    List<String> fields = new ArrayList<String>();
+    List<String> fields = new ArrayList<>();
-          String[] headers = null;
-          Object[][] rows = null;
+          String[] headers;
+          Object[][] rows;
-      } else
+      } else {
+      }
-    int rowCount = 0;
-    // Introspect first using tabular data
-    for (int i = startCount; i <= endCount; i++) {
-      if (i >= selectResult.size())
-        break;
-      else
-        rowCount++;
+    // Three steps:
+    // 1a. Convert each row object to a Json object.
+    // 1b. Build a list of keys that are used for each object
+    // 2. Pad MISSING_VALUE into Json objects for those data that are missing any particular key
+    // 3. Build the table from these Json objects.
-      SelectResultRow row = selectResult.get(i);
-      switch (row.type) {
-        case ROW_TYPE_BEAN:
-          addJSONStringToTable(table, row.value);
-          break;
-        case ROW_TYPE_STRUCT_RESULT:
-          addJSONStringToTable(table, row.value);
-          break;
-        case ROW_TYPE_PRIMITIVE:
-          table.accumulate(RESULT_FLAG, row.value);
-          break;
+    // 1.
+    int lastRowExclusive = Math.min(selectResult.size(), endCount + 1);
+    List<SelectResultRow> paginatedRows = selectResult.subList(startCount, lastRowExclusive);
+
+    List<GfJsonObject> tableRows = new ArrayList<>();
+    List<GfJsonObject> rowsWithRealJsonObjects = new ArrayList<>();
+    Set<String> columns = new HashSet<>();
+
+    for (SelectResultRow row : paginatedRows) {
+      GfJsonObject object = new GfJsonObject();
+      try {
+        if (row.value == null || MISSING_VALUE.equals(row.value)) {
+          object.put("Value", MISSING_VALUE);
+        } else if (row.type == ROW_TYPE_PRIMITIVE) {
+          object.put(RESULT_FLAG, row.value);
+        } else {
+          object = buildGfJsonFromRawObject(row.value);
+          rowsWithRealJsonObjects.add(object);
+          object.keys().forEachRemaining(columns::add);
+        }
+        tableRows.add(object);
+      } catch (GfJsonException e) {
+        JSONObject errJson =
+            new JSONObject().put("Value", "Error getting bean properties " + e.getMessage());
+        tableRows.add(new GfJsonObject(errJson, false));
-    return rowCount;
+
+    // 2.
+    for (GfJsonObject tableRow : rowsWithRealJsonObjects) {
+      for (String key : columns) {
+        if (!tableRow.has(key)) {
+          try {
+            tableRow.put(key, MISSING_VALUE);
+          } catch (GfJsonException e) {
+            // TODO: Address this unlikely possibility.
+            logger.warn("Ignored GfJsonException:", e);
+          }
+        }
+      }
+    }
+
+    // 3.
+    for (GfJsonObject jsonObject : tableRows) {
+      addJSONObjectToTable(table, jsonObject);
+    }
+
+    return paginatedRows.size();
+
-  private void addJSONStringToTable(TabularResultData table, Object object) {
-    if (object == null || "<NULL>".equals(object)) {
-      table.accumulate("Value", "<NULL>");
-    } else {
-      try {
-        Class klass = object.getClass();
-        GfJsonObject jsonObject = null;
-        if (String.class.equals(klass)) {
-          // InputString in JSON Form but with round brackets
-          String json = (String) object;
-          String newString = json.replaceAll("'", "\"");
-          if (newString.charAt(0) == '(') {
-            int len = newString.length();
-            StringBuilder sb = new StringBuilder();
-            sb.append("{").append(newString.substring(1, len - 1)).append("}");
-            newString = sb.toString();
-          }
-          jsonObject = new GfJsonObject(newString);
-        } else {
-          jsonObject = new GfJsonObject(object, true);
-        }
-
-        Iterator<String> keys = jsonObject.keys();
-        while (keys.hasNext()) {
-          String k = keys.next();
-          // filter out meta-field type-class used to identify java class of json obbject
-          if (!"type-class".equals(k)) {
-            Object value = jsonObject.get(k);
-            if (value != null) {
-              table.accumulate(k, getDomainValue(value));
-            }
-          }
-        }
-      } catch (Exception e) {
-        table.accumulate("Value", "Error getting bean properties " + e.getMessage());
-      }
-    }
-  }
-
-      } else
+      } else {
+      }
-
-      if (this.locations == null)
-        locations = new ArrayList<Object[]>();
+      if (this.locations == null) {
+        locations = new ArrayList<>();
+      }
-      if (locations == null)
+      if (locations == null) {
-      else {
+      } else {
-          if (found)
+          if (found) {
+          }
-
+
-    if (isLocateEntry()) {
-      /* Right now only called for LocateEntry */
+    /* Right now only called for LocateEntry */
+    if (!isLocateEntry()) {
+      return;
+    }
-      if (this.locateEntryLocations == null) {
-        locateEntryLocations = new ArrayList<KeyInfo>();
+    if (this.locateEntryLocations == null) {
+      locateEntryLocations = new ArrayList<>();
+    }
+
+    if (result == null) {// self-transform result from single to aggregate when numMember==1
+      if (this.locateEntryResult != null) {
+        locateEntryLocations.add(locateEntryResult);
+        // TODO : Decide whether to show value or not this.getResult = locateEntryResult.getValue();
+      return;
+    }
-      if (result == null) {// self-transform result from single to aggregate when numMember==1
-        if (this.locateEntryResult != null) {
-          locateEntryLocations.add(locateEntryResult);
-          // TODO : Decide whether to show value or not this.getResult =
-          // locateEntryResult.getValue();
-        }
-        return;
-      }
+    if (result.errorString != null && !result.errorString.equals(errorString)) {
+      // append errorString only if differs
+      errorString = result.errorString + " " + errorString;
+    }
-      if (result.errorString != null && !result.errorString.equals(errorString)) {
-        // append errorString only if differs
-        String newString = result.errorString + " " + errorString;
-        errorString = newString;
-      }
+    // append message only when it differs for negative results
+    if (!operationCompletedSuccessfully && result.infoString != null
+        && !result.infoString.equals(infoString)) {
+      infoString = result.infoString;
+    }
-      // append messsage only when it differs for negative results
-      if (!operationCompletedSuccessfully && result.infoString != null
-          && !result.infoString.equals(infoString)) {
-        infoString = result.infoString;
-      }
-
-      if (result.hasResultForAggregation /* && result.errorString==null */) {
-        this.operationCompletedSuccessfully = true;// override this
-                                                   // result.operationCompletedSuccessfully
-        infoString = result.infoString;
-        if (result.locateEntryResult != null)
-          locateEntryLocations.add(result.locateEntryResult);
+    if (result.hasResultForAggregation) {
+      this.operationCompletedSuccessfully = true;
+      infoString = result.infoString;
+      if (result.locateEntryResult != null) {
+        locateEntryLocations.add(result.locateEntryResult);
+
+  private void addJSONObjectToTable(TabularResultData table, GfJsonObject object) {
+    Iterator<String> keys;
+
+    keys = object.keys();
+    while (keys.hasNext()) {
+      String k = keys.next();
+      // filter out meta-field type-class used to identify java class of json object
+      if (!"type-class".equals(k)) {
+        Object value = object.get(k);
+
+        if (value != null) {
+          table.accumulate(k, getDomainValue(value));
+        }
+      }
+    }
+  }
+
+  private GfJsonObject buildGfJsonFromRawObject(Object object) throws GfJsonException {
+    GfJsonObject jsonObject;
+    if (String.class.equals(object.getClass())) {
+      jsonObject = new GfJsonObject(sanitizeJsonString((String) object));
+    } else {
+      jsonObject = new GfJsonObject(object, true);
+    }
+
+    return jsonObject;
+  }
+
+  private String sanitizeJsonString(String s) {
+    // InputString in JSON Form but with round brackets
+    String newString = s.replaceAll("'", "\"");
+    if (newString.charAt(0) == '(') {
+      int len = newString.length();
+      newString = "{" + newString.substring(1, len - 1) + "}";
+    }
+    return newString;
+  }
+
+  private void addJSONStringToTable(TabularResultData table, Object object) {
+    if (object == null || MISSING_VALUE.equals(object)) {
+      table.accumulate("Value", MISSING_VALUE);
+    } else {
+      try {
+        GfJsonObject jsonObject = buildGfJsonFromRawObject(object);
+        addJSONObjectToTable(table, jsonObject);
+      } catch (Exception e) {
+        table.accumulate("Value", "Error getting bean properties " + e.getMessage());
+      }
+    }
+  }
+
+
-
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 MOV8 UPD83 INS39 UPD42 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS8 MOV8 INS83 INS39 INS42 MOV44 INS44 MOV8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS44 UPD66 INS42 INS42 INS32 INS42 INS42 INS45 INS41 INS41 INS41 INS41 INS41 INS25 INS25 INS25 MOV60 MOV60 MOV60 MOV21 INS25 INS25 MOV41 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 MOV25 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS70 INS70 INS70 INS25 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 MOV43 INS42 INS60 MOV25 INS41 INS43 INS42 INS42 INS42 INS8 MOV32 MOV32 MOV32 MOV32 MOV32 INS32 INS8 INS32 INS8 MOV27 MOV8 INS27 INS8 MOV32 INS8 INS25 INS42 INS42 MOV38 INS8 INS8 INS8 INS8 INS42 INS42 INS8 INS8 INS42 INS42 MOV38 MOV8 INS8 INS8 INS42 INS42 MOV27 INS8 INS74 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS32 MOV41 INS38 INS8 INS42 INS7 INS42 INS43 INS59 MOV32 INS8 MOV8 INS42 MOV43 INS59 INS42 INS42 MOV21 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 MOV21 INS42 INS33 INS21 INS21 MOV32 INS8 INS25 INS21 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 MOV25 INS42 INS32 INS43 INS43 UPD42 MOV42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 MOV43 INS42 INS14 MOV43 INS42 INS60 INS54 INS43 INS42 INS70 INS43 INS42 INS21 INS42 INS42 INS8 INS8 MOV32 INS41 INS42 INS32 INS42 INS42 MOV32 INS21 INS42 INS32 INS8 INS32 INS32 INS21 MOV32 INS8 INS25 INS32 MOV32 INS8 INS8 UPD74 INS8 INS42 INS42 MOV32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS74 MOV43 INS59 INS8 INS12 INS42 INS44 INS42 INS8 INS42 MOV32 INS8 MOV21 MOV41 INS8 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS42 INS45 INS45 INS7 INS42 INS8 MOV21 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS21 MOV32 INS8 MOV25 INS42 INS42 INS42 INS21 MOV21 MOV41 INS42 INS34 INS43 INS43 INS43 INS42 INS14 INS25 INS21 INS44 INS8 MOV43 INS42 INS25 UPD42 UPD42 UPD42 MOV41 MOV27 MOV21 INS42 INS14 INS42 INS27 INS42 INS60 INS21 MOV21 INS8 INS42 INS42 INS42 INS32 INS21 INS32 INS42 INS42 INS42 INS43 INS27 INS8 INS25 INS32 INS43 INS42 MOV60 MOV21 INS38 INS8 UPD74 MOV43 INS43 INS32 INS45 MOV32 INS45 INS43 INS59 INS32 MOV21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS21 UPD27 MOV27 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS54 UPD74 INS8 INS42 INS42 MOV11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS40 INS33 INS42 INS42 INS40 INS32 INS40 UPD42 INS21 INS21 INS21 INS21 INS42 UPD42 INS42 INS42 MOV14 INS42 INS42 INS42 INS8 INS12 MOV41 UPD42 INS42 INS42 MOV21 INS42 INS42 INS45 INS42 INS32 INS7 INS32 INS32 INS14 UPD42 INS45 INS27 UPD42 INS9 INS21 INS44 INS8 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS90 INS43 INS45 INS32 MOV32 INS43 INS42 INS21 INS25 INS42 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS42 MOV32 MOV27 INS8 UPD42 INS42 INS45 UPD42 INS25 MOV21 MOV25 INS42 INS8 INS8 MOV21 MOV21 INS8 INS8 MOV21 MOV21 DEL66 DEL29 DEL9 DEL41 DEL9 DEL41 DEL25 DEL9 DEL41 DEL9 DEL41 DEL25 DEL9 DEL41 DEL9 DEL41 DEL25 DEL9 DEL41 DEL9 DEL41 DEL25 DEL9 DEL41 DEL25 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL42 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL25 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL33 DEL33 DEL42 DEL34 DEL42 DEL42 DEL7 DEL40 DEL40 DEL40 DEL39 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL10 DEL42 DEL37 DEL21 DEL25 DEL40 DEL42 DEL49 DEL21 DEL10 DEL42 DEL49 DEL21 DEL10 DEL42 DEL49 DEL21 DEL10 DEL50 DEL8 DEL24 DEL42 DEL85 DEL5 DEL9 DEL41 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL25 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL45 DEL45 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL45 DEL45