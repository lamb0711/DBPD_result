GEODE-17: WIP integrating Pulse with new security

- After refactoring some Pulse test code, various tests are broken as
  they seem to depend on prior test state.

-import javax.management.MBeanServerFactory;
+import java.lang.management.ManagementFactory;
+import java.util.HashMap;
+import java.util.Map;
-  private final MBeanServer mbs;
-  private final JMXConnectorServer cs;
+  private MBeanServer mbs;
+  private JMXConnectorServer cs;
-  public Server(int port, String properties, boolean secure) throws IOException, JSONException {
-    Properties props = new Properties();
-    props.put(DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME, JSONAuthorization.class.getName() + ".create");
-    props.put(DistributionConfig.SECURITY_CLIENT_ACCESSOR_NAME, JSONAuthorization.class.getName() + ".create");
-    JSONAuthorization.setUpWithJsonFile("cacheServer.json");
-    ManagementInterceptor interceptor = new ManagementInterceptor(props);
-    MBeanServerWrapper wrapper = new MBeanServerWrapper(interceptor);
+  public Server(int port, String properties, String jsonAuthFile) throws IOException, JSONException {
+    this.propFile = properties;
+    mbs = ManagementFactory.getPlatformMBeanServer();
+    url = new JMXServiceURL(formJMXServiceURLString(DEFAULT_HOST, port));
-    if(secure){
-      //System.setProperty(JMXConnectorServer.AUTHENTICATOR, interceptor);
+    // Load the beans first, otherwise we get access denied
+    loadMBeans();
+
+    if (jsonAuthFile != null) {
+      Properties props = new Properties();
+      props.put(DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME, JSONAuthorization.class.getName() + ".create");
+      props.put(DistributionConfig.SECURITY_CLIENT_ACCESSOR_NAME, JSONAuthorization.class.getName() + ".create");
+      JSONAuthorization.setUpWithJsonFile(jsonAuthFile);
+      Map<String, Object> env = new HashMap<>();
+
+      ManagementInterceptor interceptor = new ManagementInterceptor(props);
+      env.put(JMXConnectorServer.AUTHENTICATOR, interceptor);
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs);
+      cs.setMBeanServerForwarder(new MBeanServerWrapper(interceptor));
+    } else {
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
-
-    this.propFile = properties;
-    mbs = MBeanServerFactory.createMBeanServer();
-    url = new JMXServiceURL(formJMXServiceURLString(DEFAULT_HOST, "" + port));
-    cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
-
-    if(secure) {
-      cs.setMBeanServerForwarder(wrapper);
-    }
-
-
-    loadMBeans();
-  private String formJMXServiceURLString(String host, String port)
-      throws UnknownHostException {
-    /*
-     * String jmxSerURL = "service:jmx:rmi://" + serverName + "/jndi/rmi://" +
-     * serverName + ":" + port + "/jmxrmi";
-     */
+  private String formJMXServiceURLString(String host, int port) throws UnknownHostException {
-      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":"
-          + port + "/jmxrmi";
+      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":" + port + "/jmxrmi";
-      jmxSerURL = "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:"
-          + port + "/jmxrmi";
+      jmxSerURL = "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:" + port + "/jmxrmi";
-    unregisterAll();
-
-  private void addMemberMBean(String m) throws InstanceAlreadyExistsException,
-      MBeanRegistrationException, NotCompliantMBeanException,
-      MalformedObjectNameException, NullPointerException {
+  private void addMemberMBean(
+      String m) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-  private void addGemFireXDMemberMBean(String xdm)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addGemFireXDMemberMBean(
+      String xdm) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-    mbs.registerMBean(xdmo, new ObjectName(GemFireXDMember.OBJECT_NAME
-        + ",member=" + xdm));
+    mbs.registerMBean(xdmo, new ObjectName(GemFireXDMember.OBJECT_NAME + ",member=" + xdm));
-  private void addRegionMBean(String reg)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addRegionMBean(
+      String reg) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-              PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObject.getFullPath() + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + member));
+          PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObject.getFullPath() + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + member));
-  private void addServerMBean(String server)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addServerMBean(
+      String server) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-  private void unregisterAll() {
-    Set<ObjectName> thisSet = mbs.queryNames(null, null);
-    for (ObjectName objectName : thisSet) {
-//      System.out.println("Removing ..." + objectName.getCanonicalName());
-
-      /*try {
-        mbs.unregisterMBean(objectName);
-      } catch (MBeanRegistrationException e) {
-        e.printStackTrace();
-      } catch (InstanceNotFoundException e) {
-        e.printStackTrace();
-      }*/
-    }
-  }
-
-  public static void main(String[] args) throws MalformedObjectNameException,
-      NullPointerException {
-    int port = DEFAULT_PORT;
-    String props = null;
-    if (args.length >= 2) {
-      try {
-        port = Integer.parseInt(args[0]);
-        props = args[1];
-
-      } catch (NumberFormatException nfe) {
-        port = DEFAULT_PORT;
-        props = null;
-        nfe.printStackTrace();
-      }
-    }
-
-    createServer(port, props);
-  }
-
-  public static Server createServer(int port, String properties)
+  public static Server createServer(int port, String properties, String jsonAuthFile)
-      s = new Server(port, properties, true);
+      s = new Server(port, properties, jsonAuthFile);

MOV26 INS26 INS26 MOV23 UPD40 INS40 INS40 MOV54 MOV21 MOV44 MOV43 UPD42 INS39 MOV43 UPD42 INS27 INS8 INS42 INS33 MOV60 MOV21 MOV21 INS21 INS60 MOV60 INS21 INS21 MOV21 UPD42 UPD42 INS32 INS74 INS59 INS32 INS7 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS32 MOV14 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL33 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL2 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL85 DEL5 DEL9