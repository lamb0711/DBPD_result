GEODE-837: update tests from JUnit3 to JUnit4

* convert JUnit3 tests to use JUnit4 syntax and classes
* remove unused junit3 classes
* rename misnamed tests
* fixup and organize imports
* remove empty or worthless javadocs
* remove deadcode
* update from junit.framework.Assert to org.junit.Assert
* fix exception eating
* add usage of junit Assume
* remove some empty constructors
* increase getRepeatTimeoutMs to 2 minutes
* use getDiskDirs() and getUniqueName() for disk dirs in some tests
* move some setup code from ctor to setup
* change scope of some methods and vars to private
* add TODOs for further cleanup work
* remove some unecessary type casts
* annotate disabled tests with @Ignore and @Test
* change assertEquals with floats to call three arg version
* add some missing categories

-
+import static org.junit.Assert.*;
+
-import junit.framework.TestCase;
-
-import com.gemstone.gemfire.cache.query.internal.parse.OQLLexerTokenTypes;
+ * Used by these tests:
+ *
+ * <li/>EquiJoinIntegrationTest
+ * <li/>IUMRCompositeIteratorJUnitTest
+ * <li/>IUMRMultiIndexesMultiRegionJUnitTest
+ * <li/>IUMRShuffleIteratorsJUnitTest
+ * <li/>IUMRSingleRegionJUnitTest
+ * <li/>IndexCreationJUnitTest
+ * <li/>IndexHintJUnitTest
+ * <li/>IndexMaintainceJUnitTest
+ * <li/>IndexUseJUnitTest
+ * <li/>IndexedMergeEquiJoinScenariosJUnitTest
+ * <li/>MultiRegionIndexUsageJUnitTest
+ * <li/>NonDistinctOrderByPartitionedJUnitTest
+ * <li/>NonDistinctOrderByReplicatedJUnitTest
+ * <li/>NonDistinctOrderByTestImplementation
+ * <li/>OrderByPartitionedJUnitTest
+ * <li/>OrderByReplicatedJUnitTest
+ * <li/>OrderByTestImplementation
+ * <li/>QueryIndexUsingXMLDUnitTest
+ * <li/>QueryREUpdateInProgressJUnitTest
+ * <li/>QueryUsingFunctionContextDUnitTest
+ * <li/>QueryUsingPoolDUnitTest
+ * <li/>TestNewFunctionSSorRSIntegrationTest
+ *
+ * Also used by:
+ *
+ * <li/>GroupByTestImpl
+ * <li/>PdxGroupByTestImpl
+ * <li/>PRQueryDUnitHelper
-public class StructSetOrResultsSet extends TestCase {
+public class StructSetOrResultsSet {
- 
-  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len,
-      String queries[]) {
+  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len, String queries[]) {
-  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len,
-      boolean checkOrder, String queries[]) {
+  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-  public void compareExternallySortedQueriesWithOrderBy(String[] queries,
-      Object[][] baseResults) throws Exception {
+  public void compareExternallySortedQueriesWithOrderBy(String[] queries, Object[][] baseResults) throws Exception {
-        fail("query with index=" + i + " has failed. failed query="
-            + queries[i]);
+        throw new AssertionError("query with index=" + i + " has failed. failed query=" + queries[i], e);
-
-  private void compareQueryResultsWithExternallySortedResults(SelectResults sr,
-      Object[] externallySorted, String query, Wrapper wrapper) {
+  private void compareQueryResultsWithExternallySortedResults(SelectResults sr, Object[] externallySorted, String query, Wrapper wrapper) {
-  public Wrapper getOrderByComparatorAndLimitForQuery(String orderByQuery,
-      int unorderedResultSize) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException,
-      QueryInvocationTargetException, NoSuchFieldException, SecurityException,
-      IllegalArgumentException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
+  public Wrapper getOrderByComparatorAndLimitForQuery(String orderByQuery, int unorderedResultSize)
+  throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
-
-  public void CompareCountStarQueryResultsWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, String queries[]) {
+  public void CompareCountStarQueryResultsWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-      
-   *
-   * @param r
-   *          Array of ArrayLists
-   * @param len
-   *          Length of array of ArrayLists
-   * @param checkOrder
-   * @param queries
-  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, String queries[]) {
+  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, boolean checkClass, String queries[]) {
+  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, boolean checkClass, String queries[]) {
-  public void compareQueryResultLists(List r1, List r2,
-      int len, boolean checkOrder, boolean checkClass, String query) {
+  public void compareQueryResultLists(List r1, List r2, int len, boolean checkOrder, boolean checkClass, String query) {
-  
-  
+

MOV26 UPD40 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS53 INS14 INS43 MOV27 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65