GEODE-4182: Add JdbcConnectorException (#1529)


  * This runtime exception is used to warp failures in communication with
    an external database when using a JDBC data source

+import org.apache.geode.connectors.jdbc.JdbcConnectorException;
-import org.apache.geode.pdx.internal.PdxInstanceImpl;
-  Connection getConnection(ConnectionConfiguration config) {
-    try {
-      return manager.getDataSource(config).getConnection();
-    } catch (SQLException e) {
-      throw new IllegalStateException("Could not connect to " + config.getUrl(), e);
-    }
+  Connection getConnection(ConnectionConfiguration config) throws SQLException {
+    return manager.getDataSource(config).getConnection();
-  public <K, V> PdxInstance read(Region<K, V> region, K key) {
+  public <K, V> PdxInstance read(Region<K, V> region, K key) throws SQLException {
-    PdxInstance result = null;
+    PdxInstance result;
-          getPreparedStatement(connection, columnList, tableName, Operation.GET, 0)) {
+          getPreparedStatement(connection, columnList, tableName, Operation.GET)) {
-    } catch (SQLException e) {
-      handleSQLException(e);
-      PdxInstanceFactory factory, RegionMapping regionMapping, String keyColumnName) {
+      PdxInstanceFactory factory, RegionMapping regionMapping, String keyColumnName)
+      throws SQLException {
-    try {
-      setValuesInStatement(statement, columnList);
-      try (ResultSet resultSet = statement.executeQuery()) {
-        if (resultSet.next()) {
-          ResultSetMetaData metaData = resultSet.getMetaData();
-          int ColumnsNumber = metaData.getColumnCount();
-          for (int i = 1; i <= ColumnsNumber; i++) {
-            Object columnValue = resultSet.getObject(i);
-            String columnName = metaData.getColumnName(i);
-            String fieldName = mapColumnNameToFieldName(columnName, regionMapping);
-            if (regionMapping.isPrimaryKeyInValue()
-                || !keyColumnName.equalsIgnoreCase(columnName)) {
-              factory.writeField(fieldName, columnValue, Object.class);
-            }
+    setValuesInStatement(statement, columnList);
+    try (ResultSet resultSet = statement.executeQuery()) {
+      if (resultSet.next()) {
+        ResultSetMetaData metaData = resultSet.getMetaData();
+        int ColumnsNumber = metaData.getColumnCount();
+        for (int i = 1; i <= ColumnsNumber; i++) {
+          Object columnValue = resultSet.getObject(i);
+          String columnName = metaData.getColumnName(i);
+          String fieldName = mapColumnNameToFieldName(columnName, regionMapping);
+          if (regionMapping.isPrimaryKeyInValue() || !keyColumnName.equalsIgnoreCase(columnName)) {
+            factory.writeField(fieldName, columnValue, Object.class);
-          if (resultSet.next()) {
-            throw new IllegalStateException(
-                "Multiple rows returned for query: " + resultSet.getStatement().toString());
-          }
-          pdxInstance = factory.create();
+        if (resultSet.next()) {
+          throw new JdbcConnectorException(
+              "Multiple rows returned for query: " + resultSet.getStatement().toString());
+        }
+        pdxInstance = factory.create();
-    } catch (SQLException e) {
-      handleSQLException(e);
-  public <K, V> void write(Region<K, V> region, Operation operation, K key, PdxInstance value) {
+  public <K, V> void write(Region<K, V> region, Operation operation, K key, PdxInstance value)
+      throws SQLException {
-    int pdxTypeId = value == null ? 0 : ((PdxInstanceImpl) value).getPdxType().getTypeId();
-          getPreparedStatement(connection, columnList, tableName, operation, pdxTypeId)) {
-        updateCount = executeWriteStatement(statement, columnList, operation, false);
+          getPreparedStatement(connection, columnList, tableName, operation)) {
+        updateCount = executeWriteStatement(statement, columnList);
+      } catch (SQLException e) {
+        if (operation.isDestroy()) {
+          throw e;
+        }
-            getPreparedStatement(connection, columnList, tableName, upsertOp, pdxTypeId)) {
-          updateCount = executeWriteStatement(upsertStatement, columnList, upsertOp, true);
+            getPreparedStatement(connection, columnList, tableName, upsertOp)) {
+          updateCount = executeWriteStatement(upsertStatement, columnList);
-    } catch (SQLException e) {
-      handleSQLException(e);
-  private int executeWriteStatement(PreparedStatement statement, List<ColumnValue> columnList,
-      Operation operation, boolean handleException) {
-    int updateCount = 0;
-    try {
-      setValuesInStatement(statement, columnList);
-      updateCount = statement.executeUpdate();
-    } catch (SQLException e) {
-      if (handleException || operation.isDestroy()) {
-        handleSQLException(e);
-      }
-    }
-    return updateCount;
+  private int executeWriteStatement(PreparedStatement statement, List<ColumnValue> columnList)
+      throws SQLException {
+    setValuesInStatement(statement, columnList);
+    return statement.executeUpdate();
-      List<ColumnValue> columnList, String tableName, Operation operation, int pdxTypeId) {
+      List<ColumnValue> columnList, String tableName, Operation operation) throws SQLException {
-    PreparedStatement statement = null;
-    try {
-      statement = connection.prepareStatement(sqlStr);
-    } catch (SQLException e) {
-      handleSQLException(e);
-    }
-    return statement;
+    return connection.prepareStatement(sqlStr);
-
-  static void handleSQLException(SQLException e) {
-    throw new IllegalStateException("JDBC connector detected unexpected SQLException", e);
-  }

MOV26 UPD40 INS43 MOV8 INS43 INS43 MOV8 INS43 INS43 MOV8 INS43 MOV42 INS42 MOV42 MOV60 MOV41 INS42 MOV42 INS41 INS42 MOV32 MOV32 INS12 MOV43 MOV44 INS8 INS25 INS42 MOV32 INS8 MOV43 INS53 UPD43 INS42 UPD42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL33 DEL34 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL42 DEL33 DEL27 DEL34 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL9 DEL42 DEL42 DEL9 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL31