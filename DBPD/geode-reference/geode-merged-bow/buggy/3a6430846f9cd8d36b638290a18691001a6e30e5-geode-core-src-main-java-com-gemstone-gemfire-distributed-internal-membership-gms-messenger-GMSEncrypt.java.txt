GEODE-1372 Added support to keep multiple copies of cipher as those
are not thread safe. Added unit test for it.

+import java.util.ArrayList;
-
-
-  private Map<InternalDistributedMember, PeerEncryptor> memberToPeerEncryptor = new ConcurrentHashMap<>();
+  private int numberOfPeerEncryptorCopies = 10;
+  private ConcurrentHashMap<InternalDistributedMember, PeerEncryptor>[] copyOfPeerEncryptors;
+  private ClusterEncryptor[] clusterEncryptors;
+  private Map<InternalDistributedMember, byte[]> memberToPeerEncryptor = new ConcurrentHashMap<>();
+
+      
-    
+    initEncryptors();
+    initEncryptors();
+    initEncryptors();
+  
+  void initEncryptors() {
+    copyOfPeerEncryptors = new  ConcurrentHashMap[numberOfPeerEncryptorCopies];
+    clusterEncryptors = new ClusterEncryptor[numberOfPeerEncryptorCopies];
+  }
-    return this.clusterEncryptor.decryptBytes(data);
+    return getClusterEncryptor().decryptBytes(data);
-    return this.clusterEncryptor.encryptBytes(data);
+    return getClusterEncryptor().encryptBytes(data);
-      createPeerEncryptor(mbr, publickey);
+      //createPeerEncryptor(mbr, publickey);
+      memberToPeerEncryptor.put(mbr, publickey);
-    PeerEncryptor result = memberToPeerEncryptor.get(member);
+    Map<InternalDistributedMember, PeerEncryptor> m = getPeerEncryptorMap();
+
+    PeerEncryptor result = m.get(member);
-        result = memberToPeerEncryptor.get(member);
+        result = m.get(member);
-          result = createPeerEncryptor(member, (byte[]) view.getPublicKey(member));
+          byte[] pk = (byte[])memberToPeerEncryptor.get(member);
+          result = createPeerEncryptor(member, pk != null ? pk : (byte[]) view.getPublicKey(member));
+          m.put(member, result);
+  private Map<InternalDistributedMember, PeerEncryptor> getPeerEncryptorMap() {
+    int h = Math.abs(Thread.currentThread().getName().hashCode() % numberOfPeerEncryptorCopies);
+    ConcurrentHashMap m = copyOfPeerEncryptors[h];
+    
+    if(m == null) {
+      synchronized (copyOfPeerEncryptors) {
+        m = copyOfPeerEncryptors[h];
+        if(m == null) {
+          m = new ConcurrentHashMap<InternalDistributedMember, PeerEncryptor>();
+          copyOfPeerEncryptors[h] = m;          
+        }
+      }
+    }
+    return m;
+  }
+  
+  private ClusterEncryptor getClusterEncryptor() {
+    int h = Math.abs(Thread.currentThread().getName().hashCode() % numberOfPeerEncryptorCopies);
+    ClusterEncryptor c = clusterEncryptors[h];
+    
+    if(c == null) {
+      synchronized (copyOfPeerEncryptors) {
+        c = clusterEncryptors[h];
+        if(c == null) {
+          c = new ClusterEncryptor(getClusterSecretKey());
+          clusterEncryptors[h] = c;          
+        }
+      }
+    }
+    return c;
+  }
+  
-    PeerEncryptor result = new PeerEncryptor(peerKeyBytes);
-    memberToPeerEncryptor.put(member, result);
+    PeerEncryptor result = new PeerEncryptor(peerKeyBytes);    
-  static public byte[] encryptBytes(byte[] data, Cipher encrypt) throws Exception{
-    synchronized(GMSEncrypt.class) {
-      encodingsPerformed++;
-    }
+  static public byte[] encryptBytes(byte[] data, Cipher encrypt) throws Exception {
-      synchronized(GMSEncrypt.class) {
-        decodingsPerformed++;
-      }
-  protected static Cipher getEncryptCipher(String dhSKAlgo, PrivateKey privateKey, PublicKey peerPublicKey) 
-    throws Exception{
+  //this needs to synchronize as it uses private key of that member
+  protected static synchronized Cipher getEncryptCipher(String dhSKAlgo, PrivateKey privateKey, PublicKey peerPublicKey) throws Exception {
-      return encrypt;
-    }
-  
-  protected static Cipher getDecryptCipher(String dhSKAlgo, PrivateKey privateKey, PublicKey publicKey) throws Exception {
+    return encrypt;
+  }
+
+  //this needs to synchronize as it uses private key of that member
+  protected static synchronized Cipher getDecryptCipher(String dhSKAlgo, PrivateKey privateKey, PublicKey publicKey) throws Exception {
-            if(encrypt == null)
+            if (encrypt == null) {
-          }          
+            }
+          }
-          if(decrypt == null)
+          if (decrypt == null) {
-        }        
+          }
+        }

INS26 MOV31 MOV31 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS39 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS83 INS74 MOV59 INS39 INS42 INS8 UPD42 UPD42 INS83 MOV74 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS42 INS34 INS74 INS85 INS42 INS43 INS85 INS42 INS43 INS43 INS5 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS60 INS25 INS41 INS42 INS60 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS42 INS42 INS39 INS85 INS32 INS32 INS32 INS7 INS7 INS74 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS3 INS32 UPD42 INS32 UPD42 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS2 INS42 INS33 INS51 INS42 INS32 INS42 INS42 INS2 INS42 INS33 INS51 INS5 INS42 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS8 INS43 INS85 INS43 INS85 UPD42 INS42 INS32 INS42 INS21 INS25 INS32 INS42 INS21 INS25 INS42 INS42 INS32 INS42 INS7 INS27 INS8 INS32 INS42 INS7 INS27 INS8 INS32 INS60 INS21 INS32 INS42 INS42 INS2 INS42 INS33 INS21 INS21 INS32 INS42 INS42 INS2 INS42 INS33 INS21 INS21 INS8 INS42 INS42 INS42 INS5 INS59 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS7 INS7 MOV21 INS39 INS85 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS14 INS2 INS42 INS42 INS14 INS2 INS42 INS8 INS5 MOV32 INS16 INS74 INS42 INS42 INS43 INS32 INS42 INS42 MOV21 INS39 INS85 INS27 INS42 MOV11 INS43 INS43 INS43 INS42 INS42 INS42 INS33 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL57 DEL42 DEL37 DEL21 DEL8 DEL51 DEL42 DEL43 DEL57 DEL42 DEL37 DEL21 DEL8 DEL51