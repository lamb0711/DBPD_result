GEODE-3130: Refactoring AcceptorImpl

We extracted a switch statement in AcceptorImpl.handleNewClientConnection to a new method.

Signed-off-by: Alexander Murmann <amurmann@pivotal.io>

This closes #602

-    switch (communicationMode) {
-      default:
-        throw new IOException("Acceptor received unknown communication mode: " + communicationMode);
-
-      case PRIMARY_SERVER_TO_CLIENT:
-        logger.debug(
-            ":Bridge server: Initializing primary server-to-client communication socket: {}",
-            socket);
-        AcceptorImpl.this.clientNotifier.registerClient(socket, true, this.acceptorId,
-            this.notifyBySubscription);
-        return;
-
-      case SECONDARY_SERVER_TO_CLIENT:
-        logger.debug(
-            ":Bridge server: Initializing secondary server-to-client communication socket: {}",
-            socket);
-        AcceptorImpl.this.clientNotifier.registerClient(socket, false, this.acceptorId,
-            this.notifyBySubscription);
-        return;
-
-      case CLIENT_TO_SERVER:
-        communicationModeStr = "client";
-        break;
-      case GATEWAY_TO_GATEWAY:
-        communicationModeStr = "gateway";
-        break;
-      case MONITOR_TO_SERVER:
-        communicationModeStr = "monitor";
-        break;
-      case CLIENT_TO_SERVER_FOR_QUEUE:
-        communicationModeStr = "clientToServerForQueue";
-        break;
-      case PROTOBUF_CLIENT_SERVER_PROTOCOL:
-        communicationModeStr = "Protobuf client";
-        break;
+    if (communicationMode == PRIMARY_SERVER_TO_CLIENT
+        || communicationMode == SECONDARY_SERVER_TO_CLIENT) {
+      boolean primary = communicationMode == PRIMARY_SERVER_TO_CLIENT;
+      logger.debug(":Bridge server: Initializing {} server-to-client communication socket: {}",
+          primary ? "primary" : "secondary", socket);
+      AcceptorImpl.this.clientNotifier.registerClient(socket, primary, this.acceptorId,
+          this.notifyBySubscription);
+      return;
+    communicationModeStr = getCommunicationMode(communicationMode);
+  private String getCommunicationMode(byte communicationMode) throws IOException {
+    switch (communicationMode) {
+      default:
+        throw new IOException("Acceptor received unknown communication mode: " + communicationMode);
+      case CLIENT_TO_SERVER:
+        return "client";
+      case GATEWAY_TO_GATEWAY:
+        return "gateway";
+      case MONITOR_TO_SERVER:
+        return "monitor";
+      case CLIENT_TO_SERVER_FOR_QUEUE:
+        return "clientToServerForQueue";
+      case PROTOBUF_CLIENT_SERVER_PROTOCOL:
+        return "Protobuf client";
+    }
+  }
+

INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS25 INS21 INS42 INS39 INS42 INS42 INS50 INS27 INS8 INS7 INS42 INS49 MOV53 MOV49 INS41 MOV49 INS41 MOV49 INS41 MOV49 INS41 MOV49 INS41 INS27 INS27 INS60 INS21 MOV21 INS41 MOV42 INS32 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS39 INS59 MOV32 INS42 INS42 INS42 INS27 UPD45 INS16 INS42 INS42 INS42 INS42 INS45 INS45 DEL9 DEL42 DEL49 DEL42 DEL49 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL41 DEL42 DEL49 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL21 DEL41 DEL45 DEL7 DEL21 DEL10 DEL42 DEL45 DEL7 DEL21 DEL10 DEL42 DEL45 DEL7 DEL21 DEL10 DEL42 DEL45 DEL7 DEL21 DEL10 DEL42 DEL45 DEL7 DEL21 DEL10 DEL50