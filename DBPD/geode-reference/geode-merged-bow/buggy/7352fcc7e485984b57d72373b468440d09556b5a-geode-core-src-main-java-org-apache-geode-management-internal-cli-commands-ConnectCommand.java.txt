GEODE-3328: refactor ConnectCommand

* connect command will prompt for missing ssl configs if ssl is indicated by any options
* command ssl options will override the properties loaded in the file
* reworked connect with ssl so that the configuration won't get cached accidentally.
* have auto connect also prompt for missing ssl configs, not in the socket creator
* change the properties file type in the start server and start locator command to be File instead of String

-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
-import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_CIPHERS;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_PASSWORD;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_PROTOCOLS;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;
-import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;
-import static org.apache.geode.management.internal.cli.shell.Gfsh.SSL_ENABLED_CIPHERS;
-import static org.apache.geode.management.internal.cli.shell.Gfsh.SSL_ENABLED_PROTOCOLS;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_PREFIX;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_PREFIX;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_SSL_PREFIX;
-import java.net.URL;
+import java.net.MalformedURLException;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
+import java.util.Arrays;
+import java.util.Objects;
+import java.util.Properties;
+import org.apache.geode.internal.admin.SSLConfig;
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.internal.util.PasswordUtil;
+import org.apache.geode.internal.net.SSLConfigurationFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
-import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.internal.security.ResourceConstants;
+  static UserInputProperty[] USERINPUTPROPERTIES =
+      {UserInputProperty.KEYSTORE, UserInputProperty.KEYSTORE_PASSWORD,
+          UserInputProperty.KEYSTORE_TYPE, UserInputProperty.TRUSTSTORE,
+          UserInputProperty.TRUSTSTORE_PASSWORD, UserInputProperty.TRUSTSTORE_TYPE,
+          UserInputProperty.CIPHERS, UserInputProperty.PROTOCOL, UserInputProperty.COMPONENT};
+
-          help = CliStrings.CONNECT__LOCATOR__HELP) ConnectionEndpoint locatorTcpHostPort,
+          help = CliStrings.CONNECT__LOCATOR__HELP) ConnectionEndpoint locatorEndPoint,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          help = CliStrings.CONNECT__JMX_MANAGER__HELP) ConnectionEndpoint memberRmiHostPort,
-      @CliOption(key = {CliStrings.CONNECT__USE_HTTP}, mandatory = false,
-          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
+          help = CliStrings.CONNECT__JMX_MANAGER__HELP) ConnectionEndpoint jmxManagerEndPoint,
+      @CliOption(key = {CliStrings.CONNECT__USE_HTTP}, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
-      @CliOption(key = {CliStrings.CONNECT__URL}, mandatory = false,
+      @CliOption(key = {CliStrings.CONNECT__URL},
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.CONNECT__SECURITY_PROPERTIES,
-          optionContext = ConverterHint.FILE_PATH,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          help = CliStrings.CONNECT__SECURITY_PROPERTIES__HELP) final String gfSecurityPropertiesPath,
+      @CliOption(key = CliStrings.CONNECT__SECURITY_PROPERTIES, optionContext = ConverterHint.FILE,
+          help = CliStrings.CONNECT__SECURITY_PROPERTIES__HELP) final File gfSecurityPropertiesFile,
-          help = CliStrings.CONNECT__USE_SSL__HELP) final boolean useSsl) {
-    Result result;
-    String passwordToUse = PasswordUtil.decrypt(password);
-    String keystoreToUse = keystore;
-    String keystorePasswordToUse = keystorePassword;
-    String truststoreToUse = truststore;
-    String truststorePasswordToUse = truststorePassword;
-    String sslCiphersToUse = sslCiphers;
-    String sslProtocolsToUse = sslProtocols;
+          help = CliStrings.CONNECT__USE_SSL__HELP) boolean useSsl)
+      throws MalformedURLException {
+    Result result;
+
+    // bail out if gfsh is already connected.
-    Map<String, String> sslConfigProps = null;
-    try {
-      if (userName != null && userName.length() > 0) {
-        if (passwordToUse == null || passwordToUse.length() == 0) {
-          passwordToUse = gfsh.readPassword(CliStrings.CONNECT__PASSWORD + ": ");
-        }
-        if (passwordToUse == null || passwordToUse.length() == 0) {
-          return ResultBuilder
-              .createConnectionErrorResult(CliStrings.CONNECT__MSG__JMX_PASSWORD_MUST_BE_SPECIFIED);
-        }
-      }
+    // ssl options are passed in in the order defined in USERINPUTPROPERTIES, note the two types
+    // are null, because we don't have connect command options for them yet
+    Properties gfProperties = resolveSslProperties(gfsh, useSsl, null, gfSecurityPropertiesFile,
+        keystore, keystorePassword, null, truststore, truststorePassword, null, sslCiphers,
+        sslProtocols, null);
-      sslConfigProps = this.readSSLConfiguration(useSsl, keystoreToUse, keystorePasswordToUse,
-          truststoreToUse, truststorePasswordToUse, sslCiphersToUse, sslProtocolsToUse,
-          gfSecurityPropertiesPath);
-    } catch (IOException e) {
-      return handleExcpetion(e, null);
+    if (containsSSLConfig(gfProperties) || containsLegacySSLConfig(gfProperties)) {
+      useSsl = true;
+    // if username is specified in the option but password is not, prompt for the password
+    // note if gfProperties has username but no password, we would not prompt for password yet,
+    // because we may not need username/password combination to connect.
+    if (userName != null) {
+      gfProperties.setProperty(ResourceConstants.USER_NAME, userName);
+      if (password == null) {
+        password = UserInputProperty.PASSWORD.promptForAcceptableValue(gfsh);
+      }
+      gfProperties.setProperty(UserInputProperty.PASSWORD.getKey(), password);
+    }
+
+    // TODO: refactor this to be more readable, like
+    /*
+     * if(useHttp) connectOverHttp else if(jmxManagerEndPoint==null) connectToLocator to get the
+     * jmxManagerEndPoint else connectTo jmxManagerEndPoint
+     */
-      result = httpConnect(sslConfigProps, useSsl, url, userName, passwordToUse);
+      result = httpConnect(gfProperties, url);
-      result = jmxConnect(sslConfigProps, memberRmiHostPort, locatorTcpHostPort, useSsl, userName,
-          passwordToUse, gfSecurityPropertiesPath, false);
+      result = jmxConnect(gfProperties, useSsl, jmxManagerEndPoint, locatorEndPoint, false);
+  /**
+   *
+   * @param gfsh
+   * @param useSsl if true, and no files/options passed, we would still insist on prompting for ssl
+   *        config (considered only when the last three parameters are null)
+   * @param gfPropertiesFile gemfire properties file, can be null
+   * @param gfSecurityPropertiesFile gemfire security properties file, can be null
+   * @param sslOptionValues an array of 9 in this order, as defined in USERINPUTPROPERTIES
+   * @return the properties
+   */
+  Properties resolveSslProperties(Gfsh gfsh, boolean useSsl, File gfPropertiesFile,
+      File gfSecurityPropertiesFile, String... sslOptionValues) {
-  private Result httpConnect(Map<String, String> sslConfigProps, boolean useSsl, String url,
-      String userName, String passwordToUse) {
+    // first trying to load the sslProperties from the file
+    Properties gfProperties = loadProperties(gfPropertiesFile, gfSecurityPropertiesFile);
+
+    // if the security file is a legacy ssl security file, then the rest of the command options, if
+    // any, are ignored. Because we are not trying to add/replace the legacy ssl values using the
+    // command line values. all command line ssl values updates the ssl-* options.
+    if (containsLegacySSLConfig(gfProperties)) {
+      return gfProperties;
+    }
+
+    // if nothing indicates we should prompt for missing ssl config info, return immediately
+    if (!(useSsl || containsSSLConfig(gfProperties) || isSslImpliedBySslOptions(sslOptionValues))) {
+      return gfProperties;
+    }
+
+    // if use ssl is implied by any of the options, then command option will add to/update the
+    // properties loaded from file. If the ssl config is not specified anywhere, prompt user for it.
+    for (int i = 0; i < USERINPUTPROPERTIES.length; i++) {
+      UserInputProperty userInputProperty = USERINPUTPROPERTIES[i];
+      String sslOptionValue = null;
+      if (sslOptionValues != null && sslOptionValues.length > i) {
+        sslOptionValue = sslOptionValues[i];
+      }
+      String sslConfigValue = gfProperties.getProperty(userInputProperty.getKey());
+
+      // if this option is specified, always use this value
+      if (sslOptionValue != null) {
+        gfProperties.setProperty(userInputProperty.getKey(), sslOptionValue);
+      }
+      // if option is not specified and not present in the original properties, prompt for it
+      else if (sslConfigValue == null) {
+        gfProperties.setProperty(userInputProperty.getKey(),
+            userInputProperty.promptForAcceptableValue(gfsh));
+      }
+    }
+
+    return gfProperties;
+  }
+
+  boolean isSslImpliedBySslOptions(String... sslOptions) {
+    if (sslOptions == null) {
+      return false;
+    }
+    return Arrays.stream(sslOptions).anyMatch(Objects::nonNull);
+  }
+
+  Properties loadProperties(File... files) {
+    Properties properties = new Properties();
+    if (files == null) {
+      return properties;
+    }
+    for (File file : files) {
+      if (file != null) {
+        properties.putAll(ShellCommands.loadProperties(file));
+      }
+    }
+    return properties;
+  }
+
+  static boolean containsLegacySSLConfig(Properties properties) {
+    return properties.stringPropertyNames().stream()
+        .anyMatch(key -> key.startsWith(CLUSTER_SSL_PREFIX)
+            || key.startsWith(JMX_MANAGER_SSL_PREFIX) || key.startsWith(HTTP_SERVICE_SSL_PREFIX));
+  }
+
+  static boolean containsSSLConfig(Properties properties) {
+    return properties.stringPropertyNames().stream().anyMatch(key -> key.startsWith("ssl-"));
+  }
+
+
+  Result httpConnect(Properties gfProperties, String url) {
-      Map<String, String> securityProperties = new HashMap<String, String>();
-
-      // at this point, if userName is not empty, password should not be empty either
-      if (userName != null && userName.length() > 0) {
-        securityProperties.put("security-username", userName);
-        securityProperties.put("security-password", passwordToUse);
-      }
-
-      if (useSsl) {
-        configureHttpsURLConnection(sslConfigProps);
+      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(gfProperties,
+          SecurableCommunicationChannel.WEB);
+      if (sslConfig.isEnabled()) {
+        configureHttpsURLConnection(sslConfig);
-      Iterator<String> it = sslConfigProps.keySet().iterator();
-      while (it.hasNext()) {
-        String secKey = it.next();
-        securityProperties.put(secKey, sslConfigProps.get(secKey));
-      }
-
-          new SimpleHttpRequester(gfsh, CONNECT_LOCATOR_TIMEOUT_MS, securityProperties)
+          new SimpleHttpRequester(gfsh, CONNECT_LOCATOR_TIMEOUT_MS, (Map) gfProperties)
-          new RestHttpOperationInvoker(linkIndex, gfsh, url, securityProperties);
+          new RestHttpOperationInvoker(linkIndex, gfsh, url, (Map) gfProperties);
-      if (userName != null) {
+      if (gfProperties.containsKey(ResourceConstants.USER_NAME)) {
-      try {
-        userName = gfsh.readText(CliStrings.CONNECT__USERNAME + ": ");
-        passwordToUse = gfsh.readPassword(CliStrings.CONNECT__PASSWORD + ": ");
-        return httpConnect(sslConfigProps, useSsl, url, userName, passwordToUse);
-      } catch (IOException ioe) {
-        return handleExcpetion(ioe, null);
-      }
+      gfProperties.setProperty(UserInputProperty.USERNAME.getKey(),
+          UserInputProperty.USERNAME.promptForAcceptableValue(gfsh));
+      gfProperties.setProperty(UserInputProperty.PASSWORD.getKey(),
+          UserInputProperty.PASSWORD.promptForAcceptableValue(gfsh));
+      return httpConnect(gfProperties, url);
+
-  private Result jmxConnect(Map<String, String> sslConfigProps,
-      ConnectionEndpoint memberRmiHostPort, ConnectionEndpoint locatorTcpHostPort, boolean useSsl,
-      String userName, String passwordToUse, String gfSecurityPropertiesPath, boolean retry) {
-    ConnectionEndpoint hostPortToConnect = null;
+  Result jmxConnect(Properties gfProperties, boolean useSsl, ConnectionEndpoint memberRmiHostPort,
+      ConnectionEndpoint locatorTcpHostPort, boolean retry) {
+    ConnectionEndpoint jmxHostPortToConnect = null;
-
-      // trying to find the hostPortToConnect, if rmi host port exists, use that, otherwise, use
+      // trying to find the rmi host and port, if rmi host port exists, use that, otherwise, use
-        hostPortToConnect = memberRmiHostPort;
+        jmxHostPortToConnect = memberRmiHostPort;
-        // Props required to configure a SocketCreator with SSL.
-        // Used for gfsh->locator connection & not needed for gfsh->manager connection
-        if (useSsl || !sslConfigProps.isEmpty()) {
-          sslConfigProps.put(MCAST_PORT, String.valueOf(0));
-          sslConfigProps.put(LOCATORS, "");
-
-          String sslInfoLogMsg = "Connecting to Locator via SSL.";
-          if (useSsl) {
-            sslInfoLogMsg = CliStrings.CONNECT__USE_SSL + " is set to true. " + sslInfoLogMsg;
-          }
-          gfsh.logToFile(sslInfoLogMsg, null);
+        if (useSsl) {
+          gfsh.logToFile(
+              CliStrings.CONNECT__USE_SSL + " is set to true. Connecting to Locator via SSL.",
+              null);
-                CONNECT_LOCATOR_TIMEOUT_MS, sslConfigProps);
-        hostPortToConnect = connectToLocatorResult.getMemberEndpoint();
+                CONNECT_LOCATOR_TIMEOUT_MS, gfProperties);
+        jmxHostPortToConnect = connectToLocatorResult.getMemberEndpoint();
-        if ((useSsl || !sslConfigProps.isEmpty())
-            && !connectToLocatorResult.isJmxManagerSslEnabled()) {
+        if (useSsl && !connectToLocatorResult.isJmxManagerSslEnabled()) {
-          sslConfigProps.clear();
+          useSsl = false;
-      if (!sslConfigProps.isEmpty()) {
+      if (useSsl) {
-            new Object[] {hostPortToConnect.toString(false)}));
+            new Object[] {jmxHostPortToConnect.toString(false)}));
-      JmxOperationInvoker operationInvoker =
-          new JmxOperationInvoker(hostPortToConnect.getHost(), hostPortToConnect.getPort(),
-              userName, passwordToUse, sslConfigProps, gfSecurityPropertiesPath);
+      JmxOperationInvoker operationInvoker = new JmxOperationInvoker(jmxHostPortToConnect.getHost(),
+          jmxHostPortToConnect.getPort(), gfProperties);
-      infoResultData.addLine(
-          CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
-      LogWrapper.getInstance().info(
-          CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, hostPortToConnect.toString(false)));
+      infoResultData.addLine(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS,
+          jmxHostPortToConnect.toString(false)));
+      LogWrapper.getInstance().info(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS,
+          jmxHostPortToConnect.toString(false)));
-        return handleExcpetion(e, hostPortToConnect);
+        return handleExcpetion(e, jmxHostPortToConnect);
-      if (userName != null) {
-        return handleExcpetion(e, hostPortToConnect);
+      if (gfProperties.containsKey(ResourceConstants.USER_NAME)) {
+        return handleExcpetion(e, jmxHostPortToConnect);
-      try {
-        userName = gfsh.readText(CliStrings.CONNECT__USERNAME + ": ");
-        passwordToUse = gfsh.readPassword(CliStrings.CONNECT__PASSWORD + ": ");
-        // GEODE-2250 If no value for both username and password, at this point we need to error to
-        // avoid a stack overflow.
-        if (userName == null && passwordToUse == null)
-          return handleExcpetion(e, hostPortToConnect);
-        return jmxConnect(sslConfigProps, hostPortToConnect, null, useSsl, userName, passwordToUse,
-            gfSecurityPropertiesPath, true);
-      } catch (IOException ioe) {
-        return handleExcpetion(ioe, hostPortToConnect);
-      }
+      gfProperties.setProperty(UserInputProperty.USERNAME.getKey(),
+          UserInputProperty.USERNAME.promptForAcceptableValue(gfsh));
+      gfProperties.setProperty(UserInputProperty.PASSWORD.getKey(),
+          UserInputProperty.PASSWORD.promptForAcceptableValue(gfsh));
+      return jmxConnect(gfProperties, useSsl, jmxHostPortToConnect, null, true);
+
-  /**
-   * Common code to read SSL information. Used by JMX, Locator & HTTP mode connect
-   */
-  private Map<String, String> readSSLConfiguration(boolean useSsl, String keystoreToUse,
-      String keystorePasswordToUse, String truststoreToUse, String truststorePasswordToUse,
-      String sslCiphersToUse, String sslProtocolsToUse, String gfSecurityPropertiesPath)
-      throws IOException {
-
-    Gfsh gfshInstance = getGfsh();
-    final Map<String, String> sslConfigProps = new LinkedHashMap<String, String>();
-
-    // JMX SSL Config 1:
-    // First from gfsecurity properties file if it's specified OR
-    // if the default gfsecurity.properties exists useSsl==true
-    if (useSsl || gfSecurityPropertiesPath != null) {
-      // reference to hold resolved gfSecurityPropertiesPath
-      String gfSecurityPropertiesPathToUse = CliUtil.resolvePathname(gfSecurityPropertiesPath);
-      URL gfSecurityPropertiesUrl = null;
-
-      // Case 1: User has specified gfSecurity properties file
-      if (StringUtils.isNotBlank(gfSecurityPropertiesPathToUse)) {
-        // User specified gfSecurity properties doesn't exist
-        if (!IOUtils.isExistingPathname(gfSecurityPropertiesPathToUse)) {
-          gfshInstance
-              .printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-                  "Security ", gfSecurityPropertiesPathToUse));
-        } else {
-          gfSecurityPropertiesUrl = new File(gfSecurityPropertiesPathToUse).toURI().toURL();
-        }
-      } else if (useSsl && gfSecurityPropertiesPath == null) {
-        // Case 2: User has specified to useSsl but hasn't specified
-        // gfSecurity properties file. Use default "gfsecurity.properties"
-        // in current dir, user's home or classpath
-        gfSecurityPropertiesUrl = ShellCommands.getFileUrl("gfsecurity.properties");
-      }
-      // if 'gfSecurityPropertiesPath' OR gfsecurity.properties has resolvable path
-      if (gfSecurityPropertiesUrl != null) {
-        gfshInstance.logToFile("Using security properties file : "
-            + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()), null);
-        Map<String, String> gfsecurityProps =
-            ShellCommands.loadPropertiesFromURL(gfSecurityPropertiesUrl);
-        // command line options (if any) would override props in gfsecurity.properties
-        sslConfigProps.putAll(gfsecurityProps);
-      }
-    }
-
-    int numTimesPrompted = 0;
-    /*
-     * Using do-while here for a case when --use-ssl=true is specified but no SSL options were
-     * specified & there was no gfsecurity properties specified or readable in default gfsh
-     * directory.
-     *
-     * NOTE: 2nd round of prompting is done only when sslConfigProps map is empty & useSsl is true -
-     * so we won't over-write any previous values.
-     */
-    do {
-      // JMX SSL Config 2: Now read the options
-      if (numTimesPrompted > 0) {
-        Gfsh.println("Please specify these SSL Configuration properties: ");
-      }
-
-      if (numTimesPrompted > 0) {
-        // NOTE: sslConfigProps map was empty
-        keystoreToUse = gfshInstance.readText(CliStrings.CONNECT__KEY_STORE + ": ");
-      }
-      if (keystoreToUse != null && keystoreToUse.length() > 0) {
-        if (keystorePasswordToUse == null || keystorePasswordToUse.length() == 0) {
-          // Check whether specified in gfsecurity props earlier
-          keystorePasswordToUse = sslConfigProps.get(SSL_KEYSTORE_PASSWORD);
-          if (keystorePasswordToUse == null || keystorePasswordToUse.length() == 0) {
-            // not even in properties file, prompt user for it
-            keystorePasswordToUse =
-                gfshInstance.readPassword(CliStrings.CONNECT__KEY_STORE_PASSWORD + ": ");
-            sslConfigProps.put(SSL_KEYSTORE_PASSWORD, keystorePasswordToUse);
-          }
-        } else {// For cases where password is already part of command option
-          sslConfigProps.put(SSL_KEYSTORE_PASSWORD, keystorePasswordToUse);
-        }
-        sslConfigProps.put(SSL_KEYSTORE, keystoreToUse);
-      }
-
-      if (numTimesPrompted > 0) {
-        truststoreToUse = gfshInstance.readText(CliStrings.CONNECT__TRUST_STORE + ": ");
-      }
-      if (truststoreToUse != null && truststoreToUse.length() > 0) {
-        if (truststorePasswordToUse == null || truststorePasswordToUse.length() == 0) {
-          // Check whether specified in gfsecurity props earlier?
-          truststorePasswordToUse = sslConfigProps.get(SSL_TRUSTSTORE_PASSWORD);
-          if (truststorePasswordToUse == null || truststorePasswordToUse.length() == 0) {
-            // not even in properties file, prompt user for it
-            truststorePasswordToUse =
-                gfshInstance.readPassword(CliStrings.CONNECT__TRUST_STORE_PASSWORD + ": ");
-            sslConfigProps.put(SSL_TRUSTSTORE_PASSWORD, truststorePasswordToUse);
-          }
-        } else {// For cases where password is already part of command option
-          sslConfigProps.put(SSL_TRUSTSTORE_PASSWORD, truststorePasswordToUse);
-        }
-        sslConfigProps.put(SSL_TRUSTSTORE, truststoreToUse);
-      }
-
-      if (numTimesPrompted > 0) {
-        sslCiphersToUse = gfshInstance.readText(CliStrings.CONNECT__SSL_CIPHERS + ": ");
-      }
-      if (sslCiphersToUse != null && sslCiphersToUse.length() > 0) {
-        // sslConfigProps.put(DistributionConfig.CLUSTER_SSL_CIPHERS_NAME, sslCiphersToUse);
-        sslConfigProps.put(SSL_ENABLED_CIPHERS, sslCiphersToUse);
-      }
-
-      if (numTimesPrompted > 0) {
-        sslProtocolsToUse = gfshInstance.readText(CliStrings.CONNECT__SSL_PROTOCOLS + ": ");
-      }
-      if (sslProtocolsToUse != null && sslProtocolsToUse.length() > 0) {
-        // sslConfigProps.put(DistributionConfig.CLUSTER_SSL_PROTOCOLS_NAME, sslProtocolsToUse);
-        sslConfigProps.put(SSL_ENABLED_PROTOCOLS, sslProtocolsToUse);
-      }
-
-      // SSL is required to be used but no SSL config found
-    } while (useSsl && sslConfigProps.isEmpty() && (0 == numTimesPrompted++)
-        && !gfshInstance.isQuietMode());
-    return sslConfigProps;
-  }
-
-
-      Map<String, String> props) throws IOException {
+      Properties props) throws IOException, ClassNotFoundException {
-  private void configureHttpsURLConnection(Map<String, String> sslConfigProps) throws Exception {
-    String keystoreToUse = sslConfigProps.get(SSL_KEYSTORE);
-    String keystorePasswordToUse = sslConfigProps.get(SSL_KEYSTORE_PASSWORD);
-    String truststoreToUse = sslConfigProps.get(SSL_TRUSTSTORE);
-    String truststorePasswordToUse = sslConfigProps.get(SSL_TRUSTSTORE_PASSWORD);
-    // Ciphers are not passed to HttpsURLConnection. Could not find a clean way
-    // to pass this attribute to socket layer (see #51645)
-    String sslCiphersToUse = sslConfigProps.get(SSL_CIPHERS);
-    String sslProtocolsToUse = sslConfigProps.get(SSL_PROTOCOLS);
-
-    // Commenting the code to set cipher suites in GFSH rest connect (see #51645)
-    /*
-     * if(sslCiphersToUse != null){ System.setProperty("https.cipherSuites", sslCiphersToUse); }
-     */
+  private void configureHttpsURLConnection(SSLConfig sslConfig) throws Exception {
-
-      if (StringUtils.isNotBlank(keystoreToUse)) {
-        KeyStore clientKeys = KeyStore.getInstance("JKS");
-        keyStoreStream = new FileInputStream(keystoreToUse);
-        clientKeys.load(keyStoreStream, keystorePasswordToUse.toCharArray());
+      if (StringUtils.isNotBlank(sslConfig.getKeystore())) {
+        KeyStore clientKeys = KeyStore.getInstance(sslConfig.getKeystoreType());
+        keyStoreStream = new FileInputStream(sslConfig.getKeystore());
+        clientKeys.load(keyStoreStream, sslConfig.getKeystorePassword().toCharArray());
-        keyManagerFactory.init(clientKeys, keystorePasswordToUse.toCharArray());
+        keyManagerFactory.init(clientKeys, sslConfig.getKeystorePassword().toCharArray());
-      if (StringUtils.isNotBlank(truststoreToUse)) {
-        KeyStore serverPub = KeyStore.getInstance("JKS");
-        trustStoreStream = new FileInputStream(truststoreToUse);
-        serverPub.load(trustStoreStream, truststorePasswordToUse.toCharArray());
+      if (StringUtils.isNotBlank(sslConfig.getTruststore())) {
+        KeyStore serverPub = KeyStore.getInstance(sslConfig.getTruststoreType());
+        trustStoreStream = new FileInputStream(sslConfig.getTruststore());
+        serverPub.load(trustStoreStream, sslConfig.getTruststorePassword().toCharArray());
-          SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslProtocolsToUse)));
+          SSLContext.getInstance(SSLUtil.getSSLAlgo(SSLUtil.readArray(sslConfig.getProtocols())));
-
-
-
-
-

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 MOV44 MOV44 INS83 INS5 INS59 INS43 INS8 INS29 INS43 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS39 INS42 MOV44 INS8 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS44 INS43 INS43 INS85 INS42 INS4 UPD42 UPD42 UPD43 UPD42 UPD42 MOV42 MOV60 MOV60 MOV25 INS60 MOV25 INS25 MOV25 MOV41 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 MOV42 MOV43 INS42 UPD43 UPD42 UPD43 UPD42 MOV43 UPD42 INS60 INS25 INS25 INS24 INS41 UPD42 MOV25 INS41 INS42 INS43 INS42 INS60 INS25 INS70 INS41 INS43 INS42 INS41 INS43 INS42 INS41 INS43 UPD42 UPD43 UPD42 INS43 INS42 UPD42 MOV42 INS43 UPD42 UPD42 MOV42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD42 INS43 INS59 MOV27 INS8 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 UPD42 INS43 INS59 INS32 INS8 INS38 INS8 INS58 INS27 INS37 INS8 INS42 INS27 INS32 INS42 INS43 INS59 INS27 INS8 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 MOV25 UPD42 UPD42 MOV42 UPD42 MOV42 UPD40 INS42 INS42 INS32 INS32 MOV32 INS21 MOV25 MOV21 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS41 INS36 INS41 INS39 INS59 UPD42 MOV42 INS40 INS42 MOV60 MOV60 MOV25 INS60 MOV25 UPD42 MOV42 MOV33 INS41 INS32 UPD42 MOV42 INS90 INS42 INS42 INS14 UPD42 MOV42 MOV33 INS41 MOV43 INS42 MOV25 INS32 UPD42 MOV42 INS86 INS32 UPD42 MOV42 INS86 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 UPD42 UPD42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 UPD43 MOV43 INS27 MOV43 INS59 INS8 INS25 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS27 INS32 INS42 INS59 INS27 INS32 INS42 INS59 INS32 INS43 INS32 MOV25 MOV25 MOV21 MOV21 MOV41 INS42 MOV43 INS21 INS21 MOV41 UPD42 INS9 INS42 INS42 INS40 INS42 UPD42 MOV42 MOV33 INS21 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 UPD42 INS2 UPD42 INS27 INS27 INS42 INS32 UPD42 MOV21 INS27 INS8 INS42 UPD42 MOV42 MOV33 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV21 INS32 MOV21 INS7 INS40 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS11 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 INS42 MOV43 UPD42 INS42 INS42 INS40 INS42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 UPD42 INS33 INS42 UPD42 MOV42 MOV43 INS42 UPD42 MOV42 MOV43 INS42 INS32 INS42 INS2 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV32 INS42 INS32 UPD42 UPD42 INS32 UPD42 INS11 MOV43 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 UPD42 INS21 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS40 UPD42 MOV42 INS40 INS42 MOV42 INS40 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS42 INS32 UPD42 INS7 UPD42 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV33 INS42 INS9 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 MOV40 UPD45 MOV45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL40 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL83 DEL42 DEL33 DEL27 DEL34 DEL27 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL40 DEL32 DEL41 DEL8 DEL42 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL40 DEL45 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL83 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL43 DEL74 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL33 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL41 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL34 DEL27 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL40 DEL45 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL34 DEL42 DEL37 DEL27 DEL36 DEL32 DEL38 DEL27 DEL19 DEL42 DEL41 DEL8 DEL31 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL45 DEL42