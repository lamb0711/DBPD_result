GEODE-332: use thread pools for p2p readers and async close

The old code always created a brand new thread when it
wanted to async close a socket or create a new p2p reader
or handshake with a p2p reader. Now it will reuse threads
which improves latency and having a hard cap on the maximum
number of closer threads prevents a large number of close
threads causing an OutOfMemory exception.

Introduced a new SocketCloser class for async close.
The ConnectionTable has a SocketCloser instance
for closing peer-to-peer sockets and the
CacheClientNotifier has one for closing sockets
used by a cache server to send queue data to clients.

The ConnectionTable closer will have at most 8 threads
per address its sockets are connected to. If these
threads are not used for 120 seconds they will timeout.
This timeout can be configured using the
p2p.ASYNC_CLOSE_POOL_KEEP_ALIVE_SECONDS system property.
The maximum threads per address can be changed from 8
using the p2p.ASYNC_CLOSE_POOL_MAX_THREADS system property.
By default when an async socket close request is made
the requestor does not wait for request to be done.
In previous releases the requestor waited 50 milliseconds.
Now a wait can be configured using the
p2p.ASYNC_CLOSE_WAIT_MILLISECONDS system property.

The CacheClientNotifier closer will have at most 1 thread
per address its sockets are connected to. If these
threads are not used for 120 seconds they will timeout.
This timeout can be configured using the
p2p.ASYNC_CLOSE_POOL_KEEP_ALIVE_SECONDS system property.
Also this closer forces all requestors to wait 50 milliseconds
for the close to be done.

ConnectionTable also uses a thread pool for when ever
it needs a thread for a p2p reader or when a p2p sender
needs a thread to do the initial handshake. This pool
has an unlimited number of threads but if a thread is
not used for 120 seconds it will timeout. This timeout
can be configured using the p2p.READER_POOL_KEEP_ALIVE_TIME
system property.

+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import com.gemstone.gemfire.internal.SocketCloser;
+import com.gemstone.gemfire.internal.logging.LoggingThreadGroup;
-
+  /**
+   * Executor used by p2p reader and p2p handshaker threads.
+   */
+  private final Executor p2pReaderThreadPool;
+  /** Number of seconds to wait before timing out an unused p2p reader thread. Default is 120 (2 minutes). */
+  private final static long READER_POOL_KEEP_ALIVE_TIME = Long.getLong("p2p.READER_POOL_KEEP_ALIVE_TIME", 120).longValue();
+  
+  private final SocketCloser socketCloser;
+  
+    this.p2pReaderThreadPool = createThreadPoolForIO(c.getDM().getSystem().isShareSockets());
+    this.socketCloser = new SocketCloser();
+  
+  private Executor createThreadPoolForIO(boolean conserveSockets) { 
+    Executor executor = null; 
+    final ThreadGroup connectionRWGroup = LoggingThreadGroup.createThreadGroup("P2P Reader Threads", logger);
+    if (conserveSockets) { 
+      executor = new Executor() { 
+        @Override 
+        public void execute(Runnable command) { 
+          Thread th = new Thread(connectionRWGroup, command); 
+          th.setDaemon(true); 
+          th.start(); 
+        } 
+      }; 
+    } 
+    else { 
+      BlockingQueue synchronousQueue = new SynchronousQueue(); 
+      ThreadFactory tf = new ThreadFactory() { 
+        public Thread newThread(final Runnable command) { 
+          Thread thread = new Thread(connectionRWGroup, command); 
+          thread.setDaemon(true); 
+          return thread; 
+        } 
+      }; 
+      executor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, READER_POOL_KEEP_ALIVE_TIME, 
+          TimeUnit.SECONDS, synchronousQueue, tf); 
+    } 
+    return executor; 
+  } 
+    {
+      Executor localExec = this.p2pReaderThreadPool;
+      if (localExec != null) {
+        if (localExec instanceof ExecutorService) {
+          ((ExecutorService)localExec).shutdown();
+        }
+      }
+    }
+    this.socketCloser.close();
+  public void executeCommand(Runnable runnable) { 
+    Executor local = this.p2pReaderThreadPool;
+    if (local != null) {
+      local.execute(runnable);
+    }
+  }
+  
+      InternalDistributedMember remoteAddress = null;
-           closeCon(reason, this.orderedConnectionMap.remove(stub));
+        Object c = this.orderedConnectionMap.remove(stub);
+        if (c instanceof Connection) {
+          remoteAddress = ((Connection) c).getRemoteAddress();
+        }
+        closeCon(reason, c);
-         closeCon(reason, this.unorderedConnectionMap.remove(stub));
+        Object c = this.unorderedConnectionMap.remove(stub);
+        if (remoteAddress == null && (c instanceof Connection)) {
+          remoteAddress = ((Connection) c).getRemoteAddress();
+        }
+        closeCon(reason, c);
-              for (Iterator it=al.iterator(); it.hasNext();)
-                closeCon(reason, it.next());
+              for (Iterator it=al.iterator(); it.hasNext();) {
+                Object c = it.next();
+                if (remoteAddress == null && (c instanceof Connection)) {
+                  remoteAddress = ((Connection) c).getRemoteAddress();
+                }
+                closeCon(reason, c);
+              }
+      
+      if (remoteAddress != null) {
+        this.socketCloser.releaseResourcesForAddress(remoteAddress.toString());
+      }
+  SocketCloser getSocketCloser() {
+    return this.socketCloser;
+  }
+  

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS8 INS65 INS42 INS42 INS65 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS39 INS42 INS60 INS60 INS25 INS41 INS8 INS21 INS43 INS42 INS60 INS25 INS42 INS41 INS66 INS66 INS32 INS42 INS7 INS7 INS43 INS59 INS83 INS43 INS59 INS42 INS8 INS8 INS42 INS60 INS25 INS32 INS42 INS43 INS59 INS27 INS8 INS22 INS42 INS42 INS45 INS34 INS22 INS32 INS22 INS14 INS42 INS42 INS33 INS42 INS42 INS32 INS21 INS60 INS60 INS21 INS43 INS59 INS27 INS8 INS22 INS42 INS42 INS42 INS22 INS42 INS33 INS21 INS60 INS25 INS52 INS42 INS52 INS42 INS42 INS32 INS52 INS42 INS43 INS42 INS42 INS45 INS42 INS7 INS43 INS59 INS43 INS59 INS7 INS42 INS42 INS22 INS42 INS33 INS25 INS52 INS42 INS52 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS14 INS52 INS42 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS60 INS25 INS42 INS33 INS21 INS32 INS42 INS43 INS1 INS43 INS43 INS1 INS43 INS34 INS40 INS42 INS40 INS42 INS42 INS42 INS43 INS21 INS43 INS59 INS62 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS31 INS42 INS42 INS31 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS43 INS21 INS42 INS42 INS42 MOV32 INS27 INS36 INS21 INS42 INS22 INS42 INS32 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS36 INS42 INS42 INS7 INS42 INS33 INS62 INS7 INS52 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS21 INS21 INS42 INS83 INS43 INS42 INS60 INS21 INS41 INS11 INS42 INS32 INS42 INS43 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS42 INS36 INS42 INS42 INS36 INS42 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS11 INS11 INS8 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 MOV32 INS42 INS42 MOV32 INS27 INS36 INS21 INS42 INS42 INS33 INS62 INS7 INS42 INS43 INS42 INS32 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL21