GEODE-4771: Defaults in ConfigurePDXCommand

- Refactored `ConfigurePDXCommand` to allow unit testing.
- Added a custom `Interceptor` to validate command input.
- Added unit and integration tests for `ConfigurePDXCommand`.
- Fixed help strings for `auto-serializable-classes` and
  `portable-auto-serializable-classes`.
- Fixed `ConfigurePDXCommand` to set `check-portability=false` when
  `--auto-serializable-classes` is used.

+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+
+  /**
+   *
+   * @param checkPortability
+   * @param patterns
+   */
+  protected ReflectionBasedAutoSerializer createReflectionBasedAutoSerializer(
+      boolean checkPortability, String[] patterns) {
+    return new ReflectionBasedAutoSerializer(checkPortability, patterns);
+  }
+
+  /**
+   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
+   *        for generating xml.
+   * @since GemFire 5.7
+   */
+  protected CacheCreation getCacheCreation(boolean forParsing) {
+    return new CacheCreation(forParsing);
+  }
+
+  /**
+   * Creates the XmlEntity associated to the PDX configuration.
+   */
+  protected XmlEntity createXmlEntity(CacheCreation cache) {
+    final StringWriter stringWriter = new StringWriter();
+    final PrintWriter printWriter = new PrintWriter(stringWriter);
+    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    printWriter.close();
+    String xmlDefinition = stringWriter.toString();
+
+    return XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
+  }
+
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION,
+      interceptor = "org.apache.geode.management.internal.cli.commands.ConfigurePDXCommand$Interceptor")
-          help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP) String[] patterns,
+          help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP) String[] nonPortableClassesPatterns,
-          help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP) String[] portablePatterns) {
+          help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP) String[] portableClassesPatterns) {
+
+      ReflectionBasedAutoSerializer autoSerializer;
+      CacheCreation cache = getCacheCreation(true);
-      CacheCreation cache = new CacheCreation(true);
-      if ((portablePatterns != null && portablePatterns.length > 0)
-          && (patterns != null && patterns.length > 0)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
-      }
+
+
+
-
+
-
-      if (portablePatterns != null) {
-        ReflectionBasedAutoSerializer autoSerializer =
-            new ReflectionBasedAutoSerializer(portablePatterns);
+      // Auto Serializer Configuration
+      if (portableClassesPatterns != null) {
+        autoSerializer = createReflectionBasedAutoSerializer(true, portableClassesPatterns);
-        ird.addLine("PDX Serializer " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Portable classes " + Arrays.toString(portablePatterns));
+        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+        ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-      if (patterns != null) {
-        ReflectionBasedAutoSerializer nonPortableAutoSerializer =
-            new ReflectionBasedAutoSerializer(true, patterns);
-        cache.setPdxSerializer(nonPortableAutoSerializer);
-        ird.addLine("PDX Serializer : " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Non portable classes :" + Arrays.toString(patterns));
+      if (nonPortableClassesPatterns != null) {
+        autoSerializer = createReflectionBasedAutoSerializer(false, nonPortableClassesPatterns);
+        cache.setPdxSerializer(autoSerializer);
+        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+        ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
-      final StringWriter stringWriter = new StringWriter();
-      final PrintWriter printWriter = new PrintWriter(stringWriter);
-      CacheXmlGenerator.generate(cache, printWriter, true, false, false);
-      printWriter.close();
-      String xmlDefinition = stringWriter.toString();
-      // TODO jbarrett - shouldn't this use the same loadXmlDefinition that other constructors use?
-      XmlEntity xmlEntity =
-          XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
-
+      XmlEntity xmlEntity = createXmlEntity(cache);
-
+
+
+  /**
+   * Interceptor to validate command parameters.
+   */
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      Object portableClassesPatterns =
+          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES);
+      Object nonPortableClassesPatterns =
+          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES);
+
+      if ((nonPortableClassesPatterns != null && ((String[]) nonPortableClassesPatterns).length > 0)
+          && (portableClassesPatterns != null && ((String[]) portableClassesPatterns).length > 0)) {
+
+        return ResultBuilder.createUserErrorResult(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS55 INS29 INS83 MOV43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS31 INS65 INS65 INS39 INS42 INS5 INS42 INS41 INS65 INS65 INS42 INS39 INS42 INS41 INS65 MOV43 INS42 MOV60 MOV60 MOV21 MOV21 MOV60 INS41 INS80 UPD42 UPD42 INS65 INS42 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS43 INS85 MOV14 INS42 INS66 INS66 INS66 MOV14 INS66 MOV32 INS42 INS45 MOV60 INS66 INS42 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS42 UPD42 INS42 INS60 INS42 INS43 INS59 INS43 INS59 INS27 MOV8 INS32 MOV43 INS43 INS59 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS36 INS36 INS42 INS42 INS45 UPD42 INS42 INS42 INS32 UPD42 INS21 MOV21 UPD42 INS21 MOV21 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS27 INS27 INS42 INS9 INS7 INS7 INS42 INS42 INS27 INS27 INS27 INS27 INS42 INS32 INS42 INS32 UPD42 INS42 INS33 INS22 INS34 INS42 INS33 INS22 INS34 INS42 INS9 INS42 UPD45 UPD45 INS42 INS9 INS42 UPD45 UPD45 INS36 INS42 INS36 INS42 UPD42 UPD42 INS11 INS11 INS5 INS42 INS5 INS42 INS43 INS85 INS43 INS85 INS42 INS42 DEL9 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL36 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL36 DEL27 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL9 DEL42 DEL14 DEL59 DEL60