Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Every field of a pdx must have one of these types.
- * The type of that field can never change.
- * If you do want to be able to change a field's class then its field type needs to be {@link #OBJECT}.
- * Some field types are always serialized with a certain number of bytes; these are called "fixed-width".
- * Others are serialized with a variable number of bytes; these are called "variable-width".
+ * Every field of a pdx must have one of these types. The type of that field can never change. If
+ * you do want to be able to change a field's class then its field type needs to be {@link #OBJECT}.
+ * Some field types are always serialized with a certain number of bytes; these are called
+ * "fixed-width". Others are serialized with a variable number of bytes; these are called
+ * "variable-width".
-  BOOLEAN(true, DataSize.BOOLEAN_SIZE, "boolean", new byte[]{0},false),
-  BYTE(true, DataSize.BYTE_SIZE, "byte", new byte[]{0},0),
-  CHAR(true, DataSize.CHAR_SIZE, "char", new byte[]{0, 0},(char)0),
-  SHORT(true, DataSize.SHORT_SIZE, "short", new byte[]{0, 0},0),
-  INT(true, DataSize.INTEGER_SIZE, "int", new byte[]{0, 0, 0, 0},0),
-  LONG(true, DataSize.LONG_SIZE, "long", new byte[]{0, 0, 0, 0, 0, 0, 0, 0},0),
-  FLOAT(true, DataSize.FLOAT_SIZE, "float", new byte[]{0, 0, 0, 0},0),
-  DOUBLE(true, DataSize.DOUBLE_SIZE, "double", new byte[]{0, 0, 0, 0, 0, 0, 0, 0},0),
-  DATE(true, DataSize.DATE_SIZE, "Date", new byte[]{-1, -1, -1, -1, -1, -1, -1, -1},null),
-  STRING(false, -1, "String", new byte[]{DSCODE.NULL_STRING},null),
-  OBJECT(false, -1, "Object", new byte[]{DSCODE.NULL},null),
-  BOOLEAN_ARRAY(false, -1, "boolean[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  CHAR_ARRAY(false, -1, "char[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  BYTE_ARRAY(false, -1, "byte[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  SHORT_ARRAY(false, -1, "short[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  INT_ARRAY(false, -1, "int[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  LONG_ARRAY(false, -1, "long[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  FLOAT_ARRAY(false, -1, "float[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  DOUBLE_ARRAY(false, -1, "double[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  STRING_ARRAY(false, -1, "String[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  OBJECT_ARRAY(false, -1, "Object[]", new byte[]{InternalDataSerializer.NULL_ARRAY},null),
-  ARRAY_OF_BYTE_ARRAYS(false, -1, "byte[][]", new byte[]{InternalDataSerializer.NULL_ARRAY},null);
-  
+  BOOLEAN(true, DataSize.BOOLEAN_SIZE, "boolean", new byte[] {0}, false), BYTE(true,
+      DataSize.BYTE_SIZE, "byte", new byte[] {0},
+      0), CHAR(true, DataSize.CHAR_SIZE, "char", new byte[] {0, 0}, (char) 0), SHORT(true,
+          DataSize.SHORT_SIZE, "short", new byte[] {0, 0},
+          0), INT(true, DataSize.INTEGER_SIZE, "int", new byte[] {0, 0, 0, 0}, 0), LONG(true,
+              DataSize.LONG_SIZE, "long", new byte[] {0, 0, 0, 0, 0, 0, 0, 0},
+              0), FLOAT(true, DataSize.FLOAT_SIZE, "float", new byte[] {0, 0, 0, 0}, 0), DOUBLE(
+                  true, DataSize.DOUBLE_SIZE, "double", new byte[] {0, 0, 0, 0, 0, 0, 0, 0},
+                  0), DATE(true, DataSize.DATE_SIZE, "Date",
+                      new byte[] {-1, -1, -1, -1, -1, -1, -1, -1}, null), STRING(false, -1,
+                          "String", new byte[] {DSCODE.NULL_STRING}, null), OBJECT(false, -1,
+                              "Object", new byte[] {DSCODE.NULL}, null), BOOLEAN_ARRAY(false, -1,
+                                  "boolean[]", new byte[] {InternalDataSerializer.NULL_ARRAY},
+                                  null), CHAR_ARRAY(false, -1, "char[]",
+                                      new byte[] {InternalDataSerializer.NULL_ARRAY},
+                                      null), BYTE_ARRAY(false, -1, "byte[]",
+                                          new byte[] {InternalDataSerializer.NULL_ARRAY},
+                                          null), SHORT_ARRAY(false, -1, "short[]",
+                                              new byte[] {InternalDataSerializer.NULL_ARRAY},
+                                              null), INT_ARRAY(false, -1, "int[]",
+                                                  new byte[] {InternalDataSerializer.NULL_ARRAY},
+                                                  null), LONG_ARRAY(false, -1, "long[]",
+                                                      new byte[] {
+                                                          InternalDataSerializer.NULL_ARRAY},
+                                                      null), FLOAT_ARRAY(false, -1, "float[]",
+                                                          new byte[] {
+                                                              InternalDataSerializer.NULL_ARRAY},
+                                                          null), DOUBLE_ARRAY(false, -1, "double[]",
+                                                              new byte[] {
+                                                                  InternalDataSerializer.NULL_ARRAY},
+                                                              null), STRING_ARRAY(false, -1,
+                                                                  "String[]",
+                                                                  new byte[] {
+                                                                      InternalDataSerializer.NULL_ARRAY},
+                                                                  null), OBJECT_ARRAY(false, -1,
+                                                                      "Object[]",
+                                                                      new byte[] {
+                                                                          InternalDataSerializer.NULL_ARRAY},
+                                                                      null), ARRAY_OF_BYTE_ARRAYS(
+                                                                          false, -1, "byte[][]",
+                                                                          new byte[] {
+                                                                              InternalDataSerializer.NULL_ARRAY},
+                                                                          null);
+
-  private FieldType(boolean isFixedWidth, int width, String name, byte[] defaultBytes, Object defaultValue) {
+  private FieldType(boolean isFixedWidth, int width, String name, byte[] defaultBytes,
+      Object defaultValue) {
-  
+
-   * Returns the number of bytes used to serialize fixed-width fields;
-   * -1 is returned for variable-width fields.
+   * Returns the number of bytes used to serialize fixed-width fields; -1 is returned for
+   * variable-width fields.
-  
+
+
+

UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66