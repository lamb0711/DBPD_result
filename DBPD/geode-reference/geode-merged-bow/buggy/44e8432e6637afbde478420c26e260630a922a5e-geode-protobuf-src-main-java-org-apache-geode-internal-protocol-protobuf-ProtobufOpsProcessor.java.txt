GEODE-3705: Refactor code to process authentication message as per normal message framework

-import org.apache.geode.internal.cache.tier.sockets.MessageExecutionContext;
+import org.apache.geode.internal.protocol.MessageExecutionContext;
-import org.apache.geode.internal.protocol.protobuf.registry.OperationContextRegistry;
-import org.apache.geode.internal.protocol.protobuf.statistics.ProtobufClientStatistics;
+import org.apache.geode.internal.protocol.Failure;
+import org.apache.geode.internal.protocol.OperationContext;
+import org.apache.geode.internal.protocol.Result;
+import org.apache.geode.internal.protocol.protobuf.registry.ProtobufOperationContextRegistry;
+import org.apache.geode.internal.protocol.security.SecurityProcessor;
+import org.apache.geode.security.AuthenticationRequiredException;
+import org.apache.geode.security.NotAuthorizedException;
-import static org.apache.geode.internal.protocol.protobuf.ProtocolErrorCode.*;
+import static org.apache.geode.internal.protocol.ProtocolErrorCode.*;
-  private final OperationContextRegistry operationContextRegistry;
+  private final ProtobufOperationContextRegistry protobufOperationContextRegistry;
-      OperationContextRegistry operationContextRegistry) {
+      ProtobufOperationContextRegistry protobufOperationContextRegistry) {
-    this.operationContextRegistry = operationContextRegistry;
+    this.protobufOperationContextRegistry = protobufOperationContextRegistry;
-      MessageExecutionContext context) {
+      MessageExecutionContext messageExecutionContext) {
-    OperationContext operationContext = operationContextRegistry.getOperationContext(requestType);
-    ClientProtocol.Response.Builder builder;
+    OperationContext operationContext =
+        protobufOperationContextRegistry.getOperationContext(requestType);
+
+    SecurityProcessor securityProcessor = messageExecutionContext.getSecurityProcessor();
-      if (context.getAuthorizer().authorize(context.getSubject(),
-          operationContext.getAccessPermissionRequired())) {
-        result = operationContext.getOperationHandler().process(serializationService,
-            operationContext.getFromRequest().apply(request), context);
-      } else {
-        logger.warn("Received unauthorized request");
-        recordAuthorizationViolation(context);
-        result = Failure.of(ProtobufResponseUtilities.makeErrorResponse(AUTHORIZATION_FAILED,
-            "User isn't authorized for this operation."));
-      }
-    } catch (InvalidExecutionContextException exception) {
-      logger.error("Invalid execution context found for operation {}", requestType);
-      result = Failure.of(ProtobufResponseUtilities.makeErrorResponse(UNSUPPORTED_OPERATION,
-          "Invalid execution context found for operation."));
+      securityProcessor.validateOperation(request, messageExecutionContext, operationContext);
+      result = processOperation(request, messageExecutionContext, requestType, operationContext);
+    } catch (AuthenticationRequiredException e) {
+      logger.warn(e);
+      result = Failure
+          .of(ProtobufResponseUtilities.makeErrorResponse(AUTHENTICATION_FAILED, e.getMessage()));
+    } catch (NotAuthorizedException e) {
+      logger.warn(e);
+      messageExecutionContext.getStatistics().incAuthorizationViolations();
+      result = Failure.of(ProtobufResponseUtilities.makeErrorResponse(AUTHORIZATION_FAILED,
+          "The user is not authorized to complete this operation"));
-    builder = (ClientProtocol.Response.Builder) result.map(operationContext.getToResponse(),
-        operationContext.getToErrorResponse());
-    return builder.build();
+    return ((ClientProtocol.Response.Builder) result.map(operationContext.getToResponse(),
+        operationContext.getToErrorResponse())).build();
-  private void recordAuthorizationViolation(MessageExecutionContext context) {
-    ProtobufClientStatistics statistics = context.getStatistics();
-    statistics.incAuthorizationViolations();
+  private Result processOperation(ClientProtocol.Request request, MessageExecutionContext context,
+      ClientProtocol.Request.RequestAPICase requestType, OperationContext operationContext) {
+    try {
+      return operationContext.getOperationHandler().process(serializationService,
+          operationContext.getFromRequest().apply(request), context);
+    } catch (InvalidExecutionContextException exception) {
+      logger.error("Invalid execution context found for operation {}", requestType);
+      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(UNSUPPORTED_OPERATION,
+          "Invalid execution context found for operation."));
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 UPD40 INS31 INS31 UPD43 MOV83 MOV43 MOV42 INS44 INS44 INS8 INS83 INS43 INS42 MOV44 MOV44 INS44 INS44 INS8 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS43 INS42 MOV60 MOV21 MOV60 MOV60 MOV60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 MOV54 UPD42 INS40 INS42 UPD43 INS8 INS12 INS12 INS32 INS40 INS42 MOV8 UPD42 INS42 UPD42 INS32 INS21 MOV21 INS44 INS8 INS44 INS8 INS36 INS42 INS41 UPD42 UPD42 INS42 INS42 INS32 INS43 INS42 INS21 INS21 UPD43 MOV43 UPD42 MOV42 INS21 INS21 MOV21 MOV11 MOV32 INS41 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS32 INS7 UPD42 INS32 INS32 INS7 MOV32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 DEL40 DEL32 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL7 DEL21 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31