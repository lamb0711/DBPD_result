GEODE-2325: Improve tests for JarDeployer

This closes #361

+import org.apache.geode.SystemFailure;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.logging.log4j.Logger;
+
-import org.apache.logging.log4j.Logger;
-
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.logging.LogService;
-
+  public static final String JAR_PREFIX_FOR_REGEX = "^vf\\.gf#";
-  public static final Pattern versionedPattern = Pattern.compile("^(.*)#(\\d++)$");
+  public static final Pattern versionedPattern =
+      Pattern.compile(JAR_PREFIX_FOR_REGEX + "(.*)#(\\d++)$");
-   * @param latestJarName The previous most recent version of the JAR file or original name if there
-   *        wasn't one
+   * @param latestVersionedJarName The previous most recent version of the JAR file or original name
+   *        if there wasn't one
-  private File getNextVersionJarFile(final String latestJarName) {
+  protected File getNextVersionJarFile(final String latestVersionedJarName) {
-    final Matcher matcher = versionedPattern.matcher(latestJarName);
+    final Matcher matcher = versionedPattern.matcher(latestVersionedJarName);
-      newFileName = matcher.group(1) + "#" + (Integer.parseInt(matcher.group(2)) + 1);
+      newFileName = JAR_PREFIX + matcher.group(1) + "#" + (Integer.parseInt(matcher.group(2)) + 1);
-      newFileName = JAR_PREFIX + latestJarName + "#1";
+      newFileName = JAR_PREFIX + latestVersionedJarName + "#1";
-    final Matcher matcher = versionedPattern.matcher(file.getAbsolutePath());
+    final Matcher matcher = versionedPattern.matcher(file.getName());
-  private Set<String> findDistinctDeployedJars() {
-    final Pattern pattern = Pattern.compile("^" + JAR_PREFIX + "(.*)#\\d++$");
+  protected Set<String> findDistinctDeployedJars() {
-        return pattern.matcher(name).matches();
+        return versionedPattern.matcher(name).matches();
-      Matcher matcher = pattern.matcher(oldFile.getName());
+      Matcher matcher = versionedPattern.matcher(oldFile.getName());
-  private File[] findSortedOldVersionsOfJar(final String jarFilename) {
+  protected File[] findSortedOldVersionsOfJar(final String jarFilename) {
-    final Pattern pattern = Pattern.compile("^" + JAR_PREFIX + jarFilename + "#\\d++$");
+    final Pattern pattern = Pattern.compile(JAR_PREFIX_FOR_REGEX + jarFilename + "#\\d++$");

MOV26 MOV26 MOV26 INS23 INS83 INS83 INS83 INS43 INS59 UPD83 UPD83 UPD83 INS42 INS42 INS45 UPD42 INS27 UPD42 UPD66 UPD66 INS42 INS45 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 DEL45 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL45