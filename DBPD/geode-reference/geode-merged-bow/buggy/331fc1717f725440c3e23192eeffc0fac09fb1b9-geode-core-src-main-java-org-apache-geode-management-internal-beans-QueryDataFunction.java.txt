GEODE-1906: fix misspelling of Successfully

fix misspelling of Successfully, organize imports, reformat and
cleanup classes

- * 
- * 
+@SuppressWarnings({ "deprecation", "unchecked" })
+  private static final long serialVersionUID = 1L;
+
-  
+
+  private static final String MEMBER_KEY = "member";
+  private static final String RESULT_KEY = "result";
+  private static final String NO_DATA_FOUND = "No Data Found";
+  private static final String QUERY_EXEC_SUCCESS = "Query Executed Successfully";
+  private static final int DISPLAY_MEMBERWISE = 0;
+  private static final int QUERY = 1;
+  private static final int REGION = 2;
+  private static final int LIMIT = 3;
+  private static final int QUERY_RESULTSET_LIMIT = 4;
+  private static final int QUERY_COLLECTIONS_DEPTH = 5;
+  private static final String SELECT_EXPR = "\\s*SELECT\\s+.+\\s+FROM\\s+.+";
+  private static final Pattern SELECT_EXPR_PATTERN = Pattern.compile(SELECT_EXPR, Pattern.CASE_INSENSITIVE);
+  private static final String SELECT_WITH_LIMIT_EXPR = "\\s*SELECT\\s+.+\\s+FROM(\\s+|(.*\\s+))LIMIT\\s+[0-9]+.*";
+  private static final Pattern SELECT_WITH_LIMIT_EXPR_PATTERN = Pattern.compile(SELECT_WITH_LIMIT_EXPR, Pattern.CASE_INSENSITIVE);
+
-  private static final long serialVersionUID = 1L;
-
-  public void execute(FunctionContext context) {
+  public void execute(final FunctionContext context) {
-    
+
-    
+
-    
-    
+
-      context.getResultSender().lastResult(
-          selectWithType(context, queryString, showMember, regionName, limit, queryResultSetLimit,
-              queryCollectionsDepth));
+      context.getResultSender().lastResult(selectWithType(context, queryString, showMember, regionName, limit, queryResultSetLimit, queryCollectionsDepth));
-
-  @SuppressWarnings( { "unchecked" })
-  public QueryDataFunctionResult selectWithType(FunctionContext context, String queryString, boolean showMember,
-      String regionName, int limit, int queryResultSetLimit, int queryCollectionsDepth) throws Exception {
-
+  private QueryDataFunctionResult selectWithType(final FunctionContext context,
+                                                 String queryString,
+                                                 final boolean showMember,
+                                                 final String regionName,
+                                                 final int limit,
+                                                 final int queryResultSetLimit,
+                                                 final int queryCollectionsDepth) throws Exception {
-
-    Function loclQueryFunc = new LocalQueryFunction("LocalQueryFunction", regionName, showMember)
-        .setOptimizeForWrite(true);
-
+    Function loclQueryFunc = new LocalQueryFunction("LocalQueryFunction", regionName, showMember).setOptimizeForWrite(true);
-
-        throw new Exception(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBER.toLocalizedString(regionName,
-            cache.getDistributedSystem().getDistributedMember().getId()));
+        throw new Exception(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBER.toLocalizedString(regionName, cache.getDistributedSystem().getDistributedMember().getId()));
-      
+
-        
+
-        if(parRegion != null && showMember){
-          if(parRegion.isDataStore()){
-            
+        if (parRegion != null && showMember) {
+          if (parRegion.isDataStore()) {
+
-            Set<Integer> localPrimaryBucketSet = new HashSet<Integer>();
+            Set<Integer> localPrimaryBucketSet = new HashSet<>();
-            DefaultQuery query = (DefaultQuery)cache.getQueryService().newQuery(
-                queryString);
-            SelectResults selectResults = (SelectResults)lds.executeQuery(query, null, localPrimaryBucketSet);
+            DefaultQuery query = (DefaultQuery) cache.getQueryService().newQuery(queryString);
+            SelectResults selectResults = (SelectResults) lds.executeQuery(query, null, localPrimaryBucketSet);
-        }else{
-          rcollector = FunctionService.onRegion(cache.getRegion(regionName)).withArgs(queryString)
-              .execute(loclQueryFunc);
-          results = (ArrayList) rcollector.getResult();
+        } else {
+          rcollector = FunctionService.onRegion(cache.getRegion(regionName)).withArgs(queryString).execute(loclQueryFunc);
+          results = rcollector.getResult();
-
-        
-        for (Iterator iter = selectResults.iterator(); iter.hasNext();) {
+        for (Iterator iter = selectResults.iterator(); iter.hasNext(); ) {
-          result.add(RESULT_KEY,object);
+          result.add(RESULT_KEY, object);
-        ArrayList actualResult = (ArrayList)listResults.get(0);
+        ArrayList actualResult = (ArrayList) listResults.get(0);
-      } 
-      
+      }
+
-        result.add(MEMBER_KEY,cache.getDistributedSystem().getDistributedMember().getId());
+        result.add(MEMBER_KEY, cache.getDistributedSystem().getDistributedMember().getId());
-    } finally {
-
-
-
-   * 
-   * @param query
-   *          input query
-   * @param limit
-   *          limit on the result set
+   *
+   * @param query input query
+   * @param limit limit on the result set
+   *
-  static String applyLimitClause(String query, int limit, int queryResultSetLimit) {
-	  
-    Matcher matcher = SELECT_EXPR_PATTERN.matcher(query); 
+  private static String applyLimitClause(final String query, int limit, final int queryResultSetLimit) {
+
+    Matcher matcher = SELECT_EXPR_PATTERN.matcher(query);
-  @SuppressWarnings( { "unchecked" })
-  static Object callFunction(Object functionArgs, Set<DistributedMember> members, boolean zipResult) throws Exception {
+  private static Object callFunction(final Object functionArgs, final Set<DistributedMember> members, final boolean zipResult) throws Exception {
-        ResultCollector collector = FunctionService.onMember(member).withArgs(functionArgs).execute(
-            ManagementConstants.QUERY_DATA_FUNCTION);
+        ResultCollector collector = FunctionService.onMember(member)
+                                                   .withArgs(functionArgs)
+                                                   .execute(ManagementConstants.QUERY_DATA_FUNCTION);
-          Throwable error = (Throwable) object;
-          throw error;
+          throw (Throwable) object;
-                           // member.
+            // member.
-        ResultCollector coll = FunctionService.onMembers(members).withArgs(functionArgs).execute(
-            ManagementConstants.QUERY_DATA_FUNCTION);
+        ResultCollector coll = FunctionService.onMembers(members)
+                                              .withArgs(functionArgs)
+                                              .execute(ManagementConstants.QUERY_DATA_FUNCTION);
-          Throwable error = (Throwable) object;
-          throw error;
+          throw (Throwable) object;
-  static String wrapResult(String str) {
+  private static String wrapResult(final String str) {
-  
- 
-  public static Object queryData(String query, String members, int limit, boolean zipResult, int queryResultSetLimit, int queryCollectionsDepth)  throws Exception {
+  public static Object queryData(final String query,
+                                 final String members,
+                                 final int limit,
+                                 final boolean zipResult,
+                                 final int queryResultSetLimit,
+                                 final int queryCollectionsDepth) throws Exception {
-      
-      // Validate region existance
+
+      // Validate region existence
-            Set<DistributedMember> associatedMembers = DataCommands
-                .getRegionAssociatedMembers(regionPath, cache, true);
+            Set<DistributedMember> associatedMembers = DataCommands.getRegionAssociatedMembers(regionPath, cache, true);
-                return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBERS
-                    .toLocalizedString(regionPath)).toString();
+                return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBERS.toLocalizedString(regionPath))
+                  .toString();
-            }            
+            }
-        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__INVALID_QUERY
-            .toLocalizedString("Region mentioned in query probably missing /")).toString();
+        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__INVALID_QUERY.toLocalizedString("Region mentioned in query probably missing /")).toString();
-          if (regionMBean.getRegionType().equals(DataPolicy.PARTITION.toString())
-              || regionMBean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
+          if (regionMBean.getRegionType().equals(DataPolicy.PARTITION.toString()) || 
+              regionMBean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
-
-      
-      Set<DistributedMember> associatedMembers = DataCommands.getQueryRegionsAssociatedMembers(regionsInQuery, cache,
-          false);// First available member
+      Set<DistributedMember> associatedMembers = DataCommands.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);// First available member
-          Object result = QueryDataFunction.callFunction(functionArgs, inputMembers, zipResult);
+          Object result = callFunction(functionArgs, inputMembers, zipResult);
-          Object result = QueryDataFunction.callFunction(functionArgs, associatedMembers, zipResult);
+          Object result = callFunction(functionArgs, associatedMembers, zipResult);
-        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND.toLocalizedString(regionsInQuery
-            .toString())).toString();
+        return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND.toLocalizedString(regionsInQuery.toString())).toString();
-    } 
+    }
-  
-  
+
-    public JsonisedErroMessage(String errorMessage) throws Exception {
+    public JsonisedErroMessage(final String errorMessage) throws Exception {
+    @Override
-
+    
-   * 
-   * @param cache
-   *          current cache
-   * @param query
-   *          input query
+   *
+   * @param cache current cache
+   * @param query input query
+   *
+   *
-  @SuppressWarnings("deprecation")
-  public static Set<String> compileQuery(Cache cache, String query) throws QueryInvalidException {
+  private static Set<String> compileQuery(final Cache cache, final String query) throws QueryInvalidException {
-   * 
-   * 
+    private final String id;
+
-
-
+    public LocalQueryFunction(final String id, final String regionName, final boolean showMembers) {
+      super();
+      this.id = id;
+      this.regionName = regionName;
+      this.showMembers = showMembers;
+    }
+
-    private final String id;
-
-    public LocalQueryFunction setOptimizeForWrite(boolean optimizeForWrite) {
+    public LocalQueryFunction setOptimizeForWrite(final boolean optimizeForWrite) {
-    public LocalQueryFunction(String id, String regionName, boolean showMembers) {
-      super();
-      this.id = id;
-      this.regionName = regionName;
-      this.showMembers = showMembers;
-
-    }
-    
-    @SuppressWarnings("unchecked")
-    public void execute(FunctionContext context) {
+    public void execute(final FunctionContext context) {
-  private static String MEMBER_KEY = "member";
+  private static class QueryDataFunctionResult implements Serializable {
-  private static String RESULT_KEY = "result";
-
-  private static String NO_DATA_FOUND = "No Data Found";
-  
-  private static String QUERY_EXEC_SUCCESS = "Query Executed Successfuly";
-
-  private static int DISPLAY_MEMBERWISE = 0;
-
-  private static int QUERY = 1;
-
-  private static int REGION = 2;
-
-  private static int LIMIT = 3;
-  
-  private static int QUERY_RESULTSET_LIMIT = 4;
-  
-  private static int QUERY_COLLECTIONS_DEPTH = 5;
-
-  static final String SELECT_EXPR = "\\s*SELECT\\s+.+\\s+FROM\\s+.+";
-
-  static Pattern SELECT_EXPR_PATTERN = Pattern.compile(SELECT_EXPR, Pattern.CASE_INSENSITIVE);
-
-  static final String SELECT_WITH_LIMIT_EXPR = "\\s*SELECT\\s+.+\\s+FROM(\\s+|(.*\\s+))LIMIT\\s+[0-9]+.*";
-
-  static Pattern SELECT_WITH_LIMIT_EXPR_PATTERN = Pattern.compile(SELECT_WITH_LIMIT_EXPR, Pattern.CASE_INSENSITIVE);
-
-
-  public static class QueryDataFunctionResult implements Serializable {
-    public QueryDataFunctionResult(String message, byte[] compressedBytes) {
+    public QueryDataFunctionResult(final String message, final byte[] compressedBytes) {
-    /**
-     * @return the message
-     */
-    /**
-     * @return the compressedBytes
-     */

MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV55 MOV31 MOV55 INS79 MOV23 MOV31 INS42 INS4 INS83 INS83 INS83 INS83 MOV43 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS44 UPD83 MOV44 INS83 INS83 INS83 INS44 MOV44 UPD83 MOV44 UPD83 INS45 INS45 UPD45 INS83 MOV43 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV43 INS42 INS83 INS83 UPD42 INS83 INS83 INS83 INS83 INS78 INS83 INS83 UPD66 UPD66 INS83 INS43 INS42 UPD66 UPD66 INS83 UPD42 INS83 MOV43 UPD42 INS83 INS83 INS83 INS83 INS83 INS42 MOV42 INS25 MOV25 MOV62 INS8 INS53 MOV11 MOV11 MOV43 MOV43 MOV32 UPD74 DEL42 DEL45 DEL4 DEL79 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL11 DEL8 DEL42 DEL45 DEL4 DEL79 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL53 DEL8 DEL25 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29