GEODE-5059: Move basicPut functionality to RegionMapPut (#1858)

* Move the methods to RegionMapPut
* Add tests to RegionMapPut

-  final IdentityHashMap<LocalRegion, TXRegionState> regions;
+  final IdentityHashMap<InternalRegion, TXRegionState> regions;
-    this.regions = new IdentityHashMap<LocalRegion, TXRegionState>();
+    this.regions = new IdentityHashMap<>();
-  public TXRegionState readRegion(LocalRegion r) {
+  public TXRegionState readRegion(InternalRegion r) {
-  public TXRegionState writeRegion(LocalRegion r) {
+  public TXRegionState writeRegion(InternalRegion r) {
-  private void lockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+  private void lockTXRegions(IdentityHashMap<InternalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-  private void unlockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+  private void unlockTXRegions(IdentityHashMap<InternalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-      Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+      Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-        Map.Entry<LocalRegion, TXRegionState> me = it.next();
-        LocalRegion r = me.getKey();
+        Map.Entry<InternalRegion, TXRegionState> me = it.next();
+        InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      Map.Entry<LocalRegion, TXRegionState> me = it.next();
-      LocalRegion r = me.getKey();
+      Map.Entry<InternalRegion, TXRegionState> me = it.next();
+      InternalRegion r = me.getKey();
-    for (Map.Entry<LocalRegion, TXRegionState> me : this.regions.entrySet()) {
-      LocalRegion r = me.getKey();
+    for (Map.Entry<InternalRegion, TXRegionState> me : this.regions.entrySet()) {
+      InternalRegion r = me.getKey();
-    for (Map.Entry<LocalRegion, TXRegionState> me : this.regions.entrySet()) {
-      LocalRegion r = me.getKey();
+    for (Map.Entry<InternalRegion, TXRegionState> me : this.regions.entrySet()) {
+      InternalRegion r = me.getKey();
-      Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+      Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-        Map.Entry<LocalRegion, TXRegionState> me = it.next();
-        LocalRegion r = me.getKey();
+        Map.Entry<InternalRegion, TXRegionState> me = it.next();
+        InternalRegion r = me.getKey();
-    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    Iterator<Map.Entry<InternalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      LocalRegion r = (LocalRegion) me.getKey();
+      InternalRegion r = (InternalRegion) me.getKey();
-      LocalRegion r = (LocalRegion) me.getKey();
+      InternalRegion r = (InternalRegion) me.getKey();
-    public final LocalRegion r;
+    public final InternalRegion r;
-    public TXEntryStateWithRegionAndKey(TXEntryState es, LocalRegion r, Object key) {
+    public TXEntryStateWithRegionAndKey(TXEntryState es, InternalRegion r, Object key) {
-  public Collection<LocalRegion> getRegions() {
+  public Collection<InternalRegion> getRegions() {
-  public TXRegionState txWriteRegion(final LocalRegion localRegion, final KeyInfo entryKey) {
-    LocalRegion lr = localRegion.getDataRegionForWrite(entryKey);
-    return writeRegion(lr);
+  public TXRegionState txWriteRegion(final InternalRegion internalRegion, final KeyInfo entryKey) {
+    InternalRegion ir = internalRegion.getDataRegionForWrite(entryKey);
+    return writeRegion(ir);
-  public TXRegionState txReadRegion(LocalRegion localRegion) {
-    return readRegion(localRegion);
+  public TXRegionState txReadRegion(InternalRegion internalRegion) {
+    return readRegion(internalRegion);
+   * @param ifNew only write the entry if it currently does not exist
-   * @param ifNew only write the entry if it currently does not exist
-  TXEntryState txWriteEntry(LocalRegion region, EntryEventImpl event, boolean ifNew,
+  TXEntryState txWriteEntry(InternalRegion region, EntryEventImpl event, boolean ifNew,
-    LocalRegion region = event.getRegion();
+    InternalRegion region = event.getRegion();
-    final LocalRegion region = event.getRegion();
+    final InternalRegion region = event.getRegion();
-    final LocalRegion region = event.getRegion();
+    final InternalRegion region = event.getRegion();
-  protected TXEntryState txReadEntry(KeyInfo keyInfo, LocalRegion localRegion, boolean rememberRead,
-      Object expectedOldValue, boolean createIfAbsent) throws EntryNotFoundException {
-    LocalRegion dataReg = localRegion.getDataRegionForWrite(keyInfo);
+  protected TXEntryState txReadEntry(KeyInfo keyInfo, InternalRegion internalRegion,
+      boolean rememberRead, Object expectedOldValue, boolean createIfAbsent)
+      throws EntryNotFoundException {
+    InternalRegion dataReg = internalRegion.getDataRegionForWrite(keyInfo);
-        txr = txWriteRegion(localRegion, keyInfo);
+        txr = txWriteRegion(internalRegion, keyInfo);
-        if (!AbstractRegionEntry.checkExpectedOldValue(expectedOldValue, val, localRegion)) {
-          txr.cleanupNonDirtyEntries(localRegion);
+        if (!AbstractRegionEntry.checkExpectedOldValue(expectedOldValue, val, internalRegion)) {
+          txr.cleanupNonDirtyEntries(internalRegion);
-      final VersionedObjectList successfulPuts, LocalRegion reg) {
+      final VersionedObjectList successfulPuts, InternalRegion reg) {
-    final LocalRegion theRegion;
+    final InternalRegion theRegion;
-      final VersionedObjectList successfulOps, LocalRegion reg) {
-    final LocalRegion theRegion;
+      final VersionedObjectList successfulOps, InternalRegion reg) {
+    final InternalRegion theRegion;

UPD74 UPD74 MOV65 UPD43 UPD43 UPD43 UPD74 UPD74 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD74 UPD43 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD74 UPD42 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD43 UPD74 UPD43 UPD43 UPD74 UPD43 UPD43 UPD74 UPD43 UPD43 UPD74 UPD43 UPD74 UPD43 UPD74 UPD43 UPD43 UPD74 UPD43 UPD43 UPD74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD74 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD74 UPD43 UPD42 UPD42 UPD42 UPD43 UPD74 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL43