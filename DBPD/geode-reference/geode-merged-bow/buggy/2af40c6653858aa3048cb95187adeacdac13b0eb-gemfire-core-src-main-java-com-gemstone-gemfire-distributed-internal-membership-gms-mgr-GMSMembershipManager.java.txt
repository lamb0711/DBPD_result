install the messenger's JGAddress into the JGroups stack so it will be transmitted with messages.  Add conversion from JGAddress to GMSMember and InternalDistributedMember for setting the sender of a message.  This shortens the length of JGroups messages by removing the GMSMember that was being serialized at the beginning of every message.

-import java.util.Timer;
-  private volatile JGroupsQuorumChecker quorumChecker;
+  private volatile QuorumChecker quorumChecker;
-   * A general use timer
-   */
-  private Timer timer = new Timer("Membership Timer", true);
-  
-  
-  /**
-    this.timer.cancel();
-    
-  private Set directChannelSend(InternalDistributedMember[] destinations,
+  private Set<InternalDistributedMember> directChannelSend(InternalDistributedMember[] destinations,
-      com.gemstone.gemfire.distributed.internal.DistributionStats theStats)
+      DMStats theStats)
-      return new HashSet(members);
+      return new HashSet<InternalDistributedMember>(members);
-  public JGroupsQuorumChecker getQuorumCheckerImpl() {
+  public QuorumChecker getQuorumCheckerImpl() {
-      // TODO: we really need JChannel instead of a datagram socket because jgroup
-      // doesn't have the "ping" handling that I built into the TP protocol.  Maybe we should just
-      // keep the JGroupsMessenger and use it to send PingMessages.  We'd want to
-      // bypass UNICAST and wipe out all message handlers except for the Pings.
+      // TODO: creation of the quorum checker should be delegated to the
+      // Messenger component.  For JGroups we we really need JChannel instead
+      // of a datagram socket because jgroup
+      // doesn't have the "ping" handling that I built into the TP protocol.s
-      com.gemstone.gemfire.distributed.internal.DistributionStats theStats)
+      DMStats theStats)
-  /**
-   * returns the general purpose membership timer
-   */
-  public Timer getTimer() {
-    return this.timer;
-  }
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("MembershipManager: initial view is {}", latestView);
-      }
+      logger.debug("MembershipManager: initial view is {}", latestView);
-  public void send(DistributionMessage m) {
-    // TODO Auto-generated method stub
-
-  }
-
-  @Override
-  public InternalDistributedMember getMemberID(NetMember m) {
-    // TODO Auto-generated method stub
-    return null;
+  public Set<InternalDistributedMember> send(DistributionMessage m) throws NotSerializableException {
+    return send(m.getRecipients(), m, this.services.getStatistics());
-    services.setSecurityLogWriter(writer);
+    Services.setSecurityLogWriter(writer);

INS31 UPD43 INS74 UPD43 MOV78 INS83 INS74 INS42 MOV44 INS43 INS8 UPD42 MOV43 INS43 UPD43 UPD42 UPD43 INS43 MOV43 UPD42 MOV42 INS41 INS42 INS42 INS42 UPD42 MOV42 INS32 MOV21 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS22 INS42 MOV52 UPD42 MOV42 INS74 MOV43 INS43 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL43 DEL45 DEL9 DEL14 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL40 DEL40 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL8 DEL25 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31