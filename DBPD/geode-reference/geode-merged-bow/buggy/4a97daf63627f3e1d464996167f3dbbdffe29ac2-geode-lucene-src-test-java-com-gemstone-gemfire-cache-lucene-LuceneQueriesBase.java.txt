GEODE-11: Fixing some races in Lucene Query DUnits

The tests in LuceneQueryBase had a couple of race conditions. The first
test didn't actually wait for entries to be flushed, so it could run the
query before the flush happens.

The wait for flush test had a test hook with a 1 second pause, but that
may not be long enough depending on what happens on the system. I
changed the test to pause the sender instead, for a deterministic test.

+import static com.gemstone.gemfire.cache.lucene.test.LuceneTestUtilities.*;
-  protected static final String INDEX_NAME = "index";
-  protected static final String REGION_NAME = "index";
+    assertTrue(waitForFlushBeforeExecuteTextSearch(accessor, 60000));
-    try {
-      dataStore1.invoke(() -> setTestHook());
-      putDataInRegion(accessor);
-      waitForFlushBeforeExecuteTextSearch(accessor, 10);
-      executeTextSearch(accessor);
-    } finally {
-      dataStore1.invoke(() -> checkResultAndresetTestHook());
-    }
+    //Pause the sender to make sure some entries are queued up
+    dataStore1.invoke(() -> pauseSender(getCache()));
+    dataStore2.invoke(() -> pauseSender(getCache()));
+    putDataInRegion(accessor);
+    assertFalse(waitForFlushBeforeExecuteTextSearch(accessor, 500));
+    dataStore1.invoke(() -> resumeSender(getCache()));
+    dataStore2.invoke(() -> resumeSender(getCache()));
+    assertTrue(waitForFlushBeforeExecuteTextSearch(accessor, 60000));
+    executeTextSearch(accessor);
-  protected void waitForFlushBeforeExecuteTextSearch(VM vm, final int expectKeyNum) {
-    vm.invoke(() -> {
+  protected boolean waitForFlushBeforeExecuteTextSearch(VM vm, int ms) {
+    return vm.invoke(() -> {
-      Region<Object, Object> region = cache.getRegion(REGION_NAME);
-      assertNotNull(index);
-      LuceneQuery<Integer, TestObject> query;
-      String aeqId = LuceneServiceImpl.getUniqueIndexName(INDEX_NAME, REGION_NAME);
-      AsyncEventQueue queue = cache.getAsyncEventQueue(aeqId);
-      assertNotNull(queue);
-      assertTrue(queue.size()>0);
-      index.waitUntilFlushed(30000);
-      return null;
+      return index.waitUntilFlushed(ms);
-  public static void setTestHook() {
-    LuceneEventListener.testHook = new LuceneEventListener.TestHook() {
-
-      @Override
-      public void doTestHook(String spot) {
-        if (spot.equals("FOUND_AND_BEFORE_PROCESSING_A_EVENT")) {
-          try {
-            Thread.sleep(1000);
-            LogService.getLogger().debug("Waited in test hook");
-          }
-          catch (InterruptedException e) {
-          }
-        }
-      }
-    };
-  }
-  
-  public static void checkResultAndresetTestHook()
-  {
-    LuceneEventListener.testHook = null;
-  }
-

INS26 INS40 UPD39 INS21 MOV21 INS21 MOV21 MOV21 MOV21 INS21 INS21 MOV21 UPD42 INS41 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS86 INS42 INS32 INS42 INS42 INS86 INS42 INS32 MOV42 MOV42 MOV86 INS42 INS42 INS34 INS32 INS32 MOV42 MOV42 UPD34 MOV34 INS32 INS42 INS42 INS34 INS42 INS32 INS42 INS32 UPD42 INS32 INS42 INS32 INS41 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV42 MOV42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL32 DEL32 DEL8 DEL8 DEL54 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL21 DEL34 DEL32 DEL21 DEL33 DEL41 DEL32 DEL21 DEL83 DEL83 DEL39 DEL42 DEL40 DEL40 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL7 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL40 DEL33 DEL7 DEL21 DEL8 DEL31