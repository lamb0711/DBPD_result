Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private final ExportSharedConfigurationFunction exportSharedConfigurationFunction = new ExportSharedConfigurationFunction();
-  private final ImportSharedConfigurationArtifactsFunction importSharedConfigurationFunction = new ImportSharedConfigurationArtifactsFunction();
-  private final LoadSharedConfigurationFunction loadSharedConfiguration = new LoadSharedConfigurationFunction();
+  private final ExportSharedConfigurationFunction exportSharedConfigurationFunction =
+      new ExportSharedConfigurationFunction();
+  private final ImportSharedConfigurationArtifactsFunction importSharedConfigurationFunction =
+      new ImportSharedConfigurationArtifactsFunction();
+  private final LoadSharedConfigurationFunction loadSharedConfiguration =
+      new LoadSharedConfigurationFunction();
-  @CliCommand(value = { CliStrings.EXPORT_SHARED_CONFIG }, help = CliStrings.EXPORT_SHARED_CONFIG__HELP)
-  @CliMetaData(interceptor = "org.apache.geode.management.internal.cli.commands.ExportImportSharedConfigurationCommands$ExportInterceptor",  readsSharedConfiguration=true, relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
+  @CliCommand(value = {CliStrings.EXPORT_SHARED_CONFIG},
+      help = CliStrings.EXPORT_SHARED_CONFIG__HELP)
+  @CliMetaData(
+      interceptor = "org.apache.geode.management.internal.cli.commands.ExportImportSharedConfigurationCommands$ExportInterceptor",
+      readsSharedConfiguration = true, relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
-  public Result exportSharedConfig(
-      @CliOption(key = { CliStrings.EXPORT_SHARED_CONFIG__FILE}, 
-      mandatory = true,
-      help = CliStrings.EXPORT_SHARED_CONFIG__FILE__HELP)
-      String zipFileName,
+  public Result exportSharedConfig(@CliOption(key = {CliStrings.EXPORT_SHARED_CONFIG__FILE},
+      mandatory = true, help = CliStrings.EXPORT_SHARED_CONFIG__FILE__HELP) String zipFileName,
-      @CliOption(key = { CliStrings.EXPORT_SHARED_CONFIG__DIR},
-      help = CliStrings.EXPORT_SHARED_CONFIG__DIR__HELP)
-      String dir
-      ) {
+      @CliOption(key = {CliStrings.EXPORT_SHARED_CONFIG__DIR},
+          help = CliStrings.EXPORT_SHARED_CONFIG__DIR__HELP) String dir) {
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
-    byte [] byteData;
+    Set<DistributedMember> locators = new HashSet<DistributedMember>(
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
+    byte[] byteData;
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(exportSharedConfigurationFunction, null, locator);
+        ResultCollector<?, ?> rc =
+            CliUtil.executeFunction(exportSharedConfigurationFunction, null, locator);
-          infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY, CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
+          infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY,
+              CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.SHARED_CONFIGURATION_NO_LOCATORS_WITH_SHARED_CONFIGURATION);
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.SHARED_CONFIGURATION_NO_LOCATORS_WITH_SHARED_CONFIGURATION);
-  @CliCommand(value = { CliStrings.IMPORT_SHARED_CONFIG }, help = CliStrings.IMPORT_SHARED_CONFIG__HELP)
-  @CliMetaData(interceptor = "org.apache.geode.management.internal.cli.commands.ExportImportSharedConfigurationCommands$ImportInterceptor", writesToSharedConfiguration=true, relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
+  @CliCommand(value = {CliStrings.IMPORT_SHARED_CONFIG},
+      help = CliStrings.IMPORT_SHARED_CONFIG__HELP)
+  @CliMetaData(
+      interceptor = "org.apache.geode.management.internal.cli.commands.ExportImportSharedConfigurationCommands$ImportInterceptor",
+      writesToSharedConfiguration = true, relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
-  public Result importSharedConfig(
-      @CliOption(key = { CliStrings.IMPORT_SHARED_CONFIG__ZIP},
-      mandatory = true,
-      help = CliStrings.IMPORT_SHARED_CONFIG__ZIP__HELP)
-      String zip) {
+  public Result importSharedConfig(@CliOption(key = {CliStrings.IMPORT_SHARED_CONFIG__ZIP},
+      mandatory = true, help = CliStrings.IMPORT_SHARED_CONFIG__ZIP__HELP) String zip) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.IMPORT_SHARED_CONFIG__CANNOT__IMPORT__MSG);
+      return ResultBuilder
+          .createGemFireErrorResult(CliStrings.IMPORT_SHARED_CONFIG__CANNOT__IMPORT__MSG);
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
+    Set<DistributedMember> locators = new HashSet<DistributedMember>(
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
-    Object [] args = new Object[] {zipFileName, zipBytes};
+    Object[] args = new Object[] {zipFileName, zipBytes};
-    ResultCollector<?, ?> rc =  CliUtil.executeFunction(importSharedConfigurationFunction, args, locators);
-    List<CliFunctionResult> functionResults =  CliFunctionResult.cleanResults((List<CliFunctionResult>) rc.getResult());
+    ResultCollector<?, ?> rc =
+        CliUtil.executeFunction(importSharedConfigurationFunction, args, locators);
+    List<CliFunctionResult> functionResults =
+        CliFunctionResult.cleanResults((List<CliFunctionResult>) rc.getResult());
-    if (!copySuccess ) {
+    if (!copySuccess) {
-    
+
-        break; 
+        break;
-      
+
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".zip"));
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, ".zip"));
-          
+
-                return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_A_DIRECTORY, dir));
+                return ResultBuilder.createGemFireErrorResult(
+                    CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_A_DIRECTORY, dir));
-              return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__CANNOT_CREATE_DIR, dir));
+              return ResultBuilder.createGemFireErrorResult(
+                  CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__CANNOT_CREATE_DIR, dir));
-              return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_WRITEABLE, saveDirFile
-                  .getCanonicalPath()));
+              return ResultBuilder.createGemFireErrorResult(
+                  CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_WRITEABLE,
+                      saveDirFile.getCanonicalPath()));
-          return ResultBuilder.createShellClientErrorResult(CliStrings.EXPORT_SHARED_CONFIG__UNABLE__TO__EXPORT__CONFIG);
+          return ResultBuilder.createShellClientErrorResult(
+              CliStrings.EXPORT_SHARED_CONFIG__UNABLE__TO__EXPORT__CONFIG);
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.IMPORT_SHARED_CONFIG__PROVIDE__ZIP, CliStrings.IMPORT_SHARED_CONFIG__ZIP));
-      } 
+        return ResultBuilder.createUserErrorResult(CliStrings.format(
+            CliStrings.IMPORT_SHARED_CONFIG__PROVIDE__ZIP, CliStrings.IMPORT_SHARED_CONFIG__ZIP));
+      }
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, CliStrings.ZIP_FILE_EXTENSION));
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.INVALID_FILE_EXTENTION, CliStrings.ZIP_FILE_EXTENSION));
-        fileResult = new FileResult(new String[] { zip });
+        fileResult = new FileResult(new String[] {zip});
-        return ResultBuilder.createGemFireErrorResult(ioex.getClass().getName() + ": "
-            + ioex.getMessage());
+        return ResultBuilder
+            .createGemFireErrorResult(ioex.getClass().getName() + ": " + ioex.getMessage());
+
-  
+

