GEODE-1006: View Creator thread blocked by JGroups FlowControl when alerting

Added a test showing that e40962cf6 fixed the problem.

-    // GemFire uses its own reply processors so there is no need
-    // to maintain message order
-    msg.setFlag(Flag.OOB);
-    // Bundling is mostly only useful if we're doing no-ack work,
-    // which is fairly rare
-    msg.setFlag(Flag.DONT_BUNDLE);
-
-    if (gfmsg.getProcessorType() == DistributionManager.HIGH_PRIORITY_EXECUTOR
-        || gfmsg instanceof HighPriorityDistributionMessage
-        || AlertAppender.isThreadAlerting()) {
-      msg.setFlag(Flag.NO_FC);
-      msg.setFlag(Flag.SKIP_BARRIER);
-    }
-    if (gfmsg instanceof DistributedCacheOperation.CacheOperationMessage) {
-      // we don't want to see our own cache operation messages
-      msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
-    }
+    setMessageFlags(gfmsg, msg);
+  void setMessageFlags(DistributionMessage gfmsg, Message msg) {
+    // GemFire uses its own reply processors so there is no need
+    // to maintain message order
+    msg.setFlag(Flag.OOB);
+    // Bundling is mostly only useful if we're doing no-ack work,
+    // which is fairly rare
+    msg.setFlag(Flag.DONT_BUNDLE);
+
+    if (gfmsg.getProcessorType() == DistributionManager.HIGH_PRIORITY_EXECUTOR
+        || gfmsg instanceof HighPriorityDistributionMessage
+        || AlertAppender.isThreadAlerting()) {
+      msg.setFlag(Flag.NO_FC);
+      msg.setFlag(Flag.SKIP_BARRIER);
+    }
+    if (gfmsg instanceof DistributedCacheOperation.CacheOperationMessage) {
+      // we don't want to see our own cache operation messages
+      msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
+    }
+  }
+

INS31 INS39 INS42 INS44 INS44 INS8 INS21 INS43 INS42 INS43 INS42 MOV21 MOV21 MOV25 MOV25 INS32 INS42 INS42 INS42 INS42 INS42