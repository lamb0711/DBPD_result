Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Creates the log writer for a distributed system based on the system's
-   * parsed configuration. The initial banner and messages are also entered into
-   * the log by this method.
-   * @param isLoner
-   *                Whether the distributed system is a loner or not
-   * @param isSecure
-   *                Whether a logger for security related messages has to be
-   *                created
-   * @param config
-   *                The DistributionConfig for the target distributed system
+   * Creates the log writer for a distributed system based on the system's parsed configuration. The
+   * initial banner and messages are also entered into the log by this method.
+   * 
+   * @param isLoner Whether the distributed system is a loner or not
+   * @param isSecure Whether a logger for security related messages has to be created
+   * @param config The DistributionConfig for the target distributed system
-                                                        final boolean isSecure,
-                                                        final LogConfig config,
-                                                        final boolean logConfig) {
+      final boolean isSecure, final LogConfig config, final boolean logConfig) {
-    if (isSecure){
+    if (isSecure) {
-    
+
-    final LogWriterLogger logger = LogService.createLogWriterLogger(name, config.getName(), isSecure);
-    
+    final LogWriterLogger logger =
+        LogService.createLogWriterLogger(name, config.getName(), isSecure);
+
-        logger.setLogWriterLevel(config.getLogLevel()); 
+        logger.setLogWriterLevel(config.getLogLevel());
-    
+
-      if (InternalDistributedSystem.getReconnectAttemptCounter() == 0 // avoid filling up logs during auto-reconnect
-          && !isSecure //&& !isLoner /* do this on a loner to fix bug 35602 */
-          ) {
+      if (InternalDistributedSystem.getReconnectAttemptCounter() == 0 // avoid filling up logs
+                                                                      // during auto-reconnect
+          && !isSecure // && !isLoner /* do this on a loner to fix bug 35602 */
+      ) {
-        logger.info(LogMarker.CONFIG, LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_STARTUP_CONFIGURATIONN_0, config.toLoggerString()));
+        logger.info(LogMarker.CONFIG,
+            LocalizedMessage.create(
+                LocalizedStrings.InternalDistributedSystem_STARTUP_CONFIGURATIONN_0,
+                config.toLoggerString()));

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66