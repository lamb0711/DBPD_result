GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-  // private transient PRQueryResultCollector resultCollector = new PRQueryResultCollector();
-  private transient List<Collection> resultCollector = new ArrayList<Collection>();
-  private transient int tokenCount = 0; // counts how many end of stream tokens received
-  private transient Iterator currentResultIterator;
-  private transient Iterator<Collection> currentSelectResultIterator;
-  private transient boolean isTraceInfoIteration = false;
-  private transient boolean isStructType = false;
+  private final List<Collection> resultCollector = new ArrayList<>();
+  private Iterator currentResultIterator;
+  private Iterator<Collection> currentSelectResultIterator;
+  private boolean isTraceInfoIteration = false;
+  private boolean isStructType = false;
-  public QueryMessage() {}
+  public QueryMessage() {
+    // do nothing
+  }
-
-    if (Thread.interrupted())
+    if (Thread.interrupted()) {
+    }
-    while ((this.currentResultIterator == null || !this.currentResultIterator.hasNext())) {
+    while (this.currentResultIterator == null || !this.currentResultIterator.hasNext()) {
-        // Assert.assertTrue(this.resultCollector.isEmpty());
-    // Asif: There is a bug in older versions of GFE such that the query node expects the structs to
-    // have
+
+    // There is a bug in older versions of GFE such that the query node expects the structs to have
-    // inaccurate
-    // struct type for backward compatibility.
+    // inaccurate struct type for backward compatibility.
-      Struct s = (Struct) data;
-      ObjectType[] fieldTypes = s.getStructType().getFieldTypes();
+      Struct struct = (Struct) data;
+      ObjectType[] fieldTypes = struct.getStructType().getFieldTypes();
-
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
-    // calculate trace start time if trace is on
-    // this is because the start time is only set if enableClock stats is on
-    // in this case we still want to see trace time even if clock is not enabled
+    // calculate trace start time if trace is on this is because the start time is only set if
+    // enableClock stats is on in this case we still want to see trace time even if clock is not
+    // enabled
-    PRQueryTraceInfo queryTraceInfo = null;
-    List queryTraceList = null;
-    if (Thread.interrupted())
+    if (Thread.interrupted()) {
+    }
-          r.getFullPath(), buckets);
+          pr.getFullPath(), this.buckets);
-    r.waitOnInitialization();
+    pr.waitOnInitialization();
-    // PartitionedRegionDataStore ds = r.getDataStore();
-
-    // if (ds != null) {
-    DefaultQuery query = new DefaultQuery(this.queryString, r.getCache(), false);
+    DefaultQuery query = new DefaultQuery(this.queryString, pr.getCache(), false);
-    DefaultQuery.setPdxReadSerialized(r.getCache(), true);
-    // In case of "select *" queries we can keep the results in serialized
-    // form and send
+    DefaultQuery.setPdxReadSerialized(pr.getCache(), true);
+    // In case of "select *" queries we can keep the results in serialized form and send
+    List queryTraceList = null;
+
-      // ds.queryLocalNode(query, this.parameters, this.buckets,
-      // this.resultCollector);
-      PRQueryProcessor qp = new PRQueryProcessor(r, query, parameters, buckets);
+      PRQueryProcessor qp = new PRQueryProcessor(pr, query, this.parameters, this.buckets);
+
+      PRQueryTraceInfo queryTraceInfo = null;
-
-      // Add the trace info list object after the NWayMergeResults is created so as to
-      // exclude it from the sorted collection of NWayMergeResults
+      // Add the trace info list object after the NWayMergeResults is created so as to exclude it
+      // from the sorted collection of NWayMergeResults
-      // If trace is enabled, we will generate a trace object to send back
-      // The time info will be slightly different than the one logged on this
-      // node
-      // due to generating the trace object information here rather than the
-      // finally
-      // block.
+      // If trace is enabled, we will generate a trace object to send back. The time info will be
+      // slightly different than the one logged on this node due to generating the trace object
+      // information here rather than the finally block.
+
-        int traceSize = 0;
-        traceSize = queryTraceInfo.calculateNumberOfResults(resultCollector);
-        traceSize -= 1; // subtract the query trace info object
+        int traceSize = queryTraceInfo.calculateNumberOfResults(this.resultCollector);
+        // subtract the query trace info object
+        traceSize -= 1;
+
-          StringBuffer buf = new StringBuffer();
-          buf.append(" indexesUsed(").append(indexesUsed.size()).append(")");
+          StringBuilder sb = new StringBuilder();
+          sb.append(" indexesUsed(").append(indexesUsed.size()).append(")");
-            buf.append(":");
+            sb.append(":");
-              buf.append(entry.getKey().toString() + entry.getValue());
+              sb.append(entry.getKey()).append(entry.getValue());
-                buf.append(",");
+                sb.append(",");
-          queryTraceInfo.setIndexesUsed(buf.toString());
+          queryTraceInfo.setIndexesUsed(sb.toString());
-      // resultSize = this.resultCollector.size() - this.buckets.size(); //Minus
-      // END_OF_BUCKET elements.
-      super.operateOnPartitionedRegion(dm, r, startTime);
+      super.operateOnPartitionedRegion(dm, pr, startTime);
-      // remove trace info so that it is not included in the num results when
-      // logged
+      // remove trace info so that it is not included in the num results when logged
-        resultCollector.remove(queryTraceList);
+        this.resultCollector.remove(queryTraceList);
-      DefaultQuery.setPdxReadSerialized(r.getCache(), false);
+      DefaultQuery.setPdxReadSerialized(pr.getCache(), false);
-    // }
-    // else {
-    // l.warning(LocalizedStrings.QueryMessage_QUERYMESSAGE_DATA_STORE_NOT_CONFIGURED_FOR_THIS_MEMBER);
-    // }
-  protected void appendFields(StringBuffer buff) {
+  protected void appendFields(StringBuilder buff) {
+  @Override

INS31 UPD83 MOV60 INS78 MOV83 MOV39 MOV42 MOV8 UPD42 UPD43 INS42 UPD74 INS8 MOV27 INS8 UPD42 MOV53 MOV53 UPD42 MOV60 UPD42 MOV43 INS22 UPD42 INS60 UPD42 UPD42 UPD42 INS52 INS42 MOV43 UPD42 INS22 INS22 MOV39 INS59 UPD42 INS52 INS42 INS52 INS42 MOV42 INS32 INS22 UPD42 MOV42 MOV42 INS22 UPD43 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 MOV32 MOV32 MOV32 UPD42 INS42 UPD42 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL83 DEL36 DEL42 DEL42 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL27 DEL42 DEL31