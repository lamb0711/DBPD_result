 GEODE-2668: build tabular command result from a list of function results  (#1127)

* GEODE-2668: build tabular command result from a list of function results

* reduce duplicate code to create the tabular results
* promote presentation consistency
* Add more validation for CreateGatewaySender/Receiver command and reworked the tests

+import joptsimple.internal.Strings;
-import org.apache.geode.cache.execute.FunctionAdapter;
+import org.apache.geode.cache.execute.Function;
-import org.apache.geode.management.internal.cli.CliUtil;
-public class GatewayReceiverCreateFunction extends FunctionAdapter implements InternalEntity {
+public class GatewayReceiverCreateFunction implements Function, InternalEntity {
-    String memberNameOrId =
-        CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
+    String memberNameOrId = context.getMemberName();
-
-
-      resultSender.lastResult(handleException(memberNameOrId, e.getMessage(), e));
+      // no need to log the stack trace
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, e, e.getMessage()));
-      String exceptionMsg = e.getMessage();
-      if (exceptionMsg == null) {
-        exceptionMsg = CliUtil.stackTraceAsString(e);
-      }
-      resultSender.lastResult(handleException(memberNameOrId, exceptionMsg, e));
+      logger.error(e.getMessage(), e);
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, e, e.getMessage()));
-  private CliFunctionResult handleException(final String memberNameOrId, final String exceptionMsg,
-      final Exception e) {
-    if (e != null && logger.isDebugEnabled()) {
-      logger.debug(e.getMessage(), e);
-    }
-    if (exceptionMsg != null) {
-      return new CliFunctionResult(memberNameOrId, false, exceptionMsg);
-    }
-
-    return new CliFunctionResult(memberNameOrId);
-  }
-
-  private static GatewayReceiver createGatewayReceiver(Cache cache,
-      GatewayReceiverFunctionArgs gatewayReceiverCreateArgs) {
+  GatewayReceiver createGatewayReceiver(Cache cache,
+      GatewayReceiverFunctionArgs gatewayReceiverCreateArgs)
+      throws IllegalAccessException, InstantiationException, ClassNotFoundException {
-        Class gatewayTransportFilterKlass = forName(gatewayTransportFilter,
-            CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER);
-            (GatewayTransportFilter) newInstance(gatewayTransportFilterKlass,
-                CliStrings.CREATE_GATEWAYRECEIVER__GATEWAYTRANSPORTFILTER));
+            (GatewayTransportFilter) newInstance(gatewayTransportFilter));
-  @SuppressWarnings("unchecked")
-  private static Class forName(String classToLoadName, String neededFor) {
-    Class loadedClass = null;
-    try {
-      // Set Constraints
-      ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
-      if (classToLoadName != null && !classToLoadName.isEmpty()) {
-        loadedClass = classPathLoader.forName(classToLoadName);
-      }
-    } catch (ClassNotFoundException e) {
-      throw new RuntimeException(
-          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULD_NOT_FIND_CLASS_0_SPECIFIED_FOR_1,
-              classToLoadName, neededFor),
-          e);
-    } catch (ClassCastException e) {
-      throw new RuntimeException(CliStrings.format(
-          CliStrings.CREATE_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
-          classToLoadName, neededFor), e);
+
+  private Object newInstance(String className)
+      throws ClassNotFoundException, IllegalAccessException, InstantiationException {
+    if (Strings.isNullOrEmpty(className)) {
+      return null;
-    return loadedClass;
-  }
-
-  private static Object newInstance(Class klass, String neededFor) {
-    Object instance = null;
-    try {
-      instance = klass.newInstance();
-    } catch (InstantiationException e) {
-      throw new RuntimeException(CliStrings.format(
-          CliStrings.CREATE_GATEWAYSENDER__MSG__COULD_NOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
-          klass, neededFor), e);
-    } catch (IllegalAccessException e) {
-      throw new RuntimeException(CliStrings.format(
-          CliStrings.CREATE_GATEWAYSENDER__MSG__COULD_NOT_ACCESS_CLASS_0_SPECIFIED_FOR_1, klass,
-          neededFor), e);
-    }
-    return instance;
+    return ClassPathLoader.getLatest().forName(className).newInstance();

MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 MOV43 MOV43 INS43 MOV44 MOV43 INS43 INS43 INS8 INS42 INS42 UPD42 UPD42 MOV42 MOV42 INS25 INS41 INS12 INS32 INS8 INS32 MOV44 MOV44 MOV8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS41 INS32 INS42 UPD42 UPD42 INS21 INS33 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 INS14 UPD42 UPD42 INS42 INS42 INS14 MOV43 INS42 INS42 MOV32 MOV43 INS42 INS42 MOV32 UPD42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL12 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL9 DEL42 DEL14 DEL41 DEL8 DEL25 DEL42 DEL14 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL40 DEL42 DEL45 DEL79 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL43 DEL40 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8