GEODE-4996: Addressed NPE by always using the region entry key


+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.VMCachedDeserializable;
+import org.apache.geode.internal.util.BlobHelper;
+  public Object updateHAEventWrapper(InternalDistributedMember sender,
+      CachedDeserializable newValueCd, String regionName) {
+    Object inputValue;
+    try {
+      inputValue = BlobHelper.deserializeBlob(newValueCd.getSerializedValue(),
+          sender.getVersionObject(), null);
+      newValueCd = new VMCachedDeserializable(inputValue, newValueCd.getSizeInBytes());
+    } catch (IOException | ClassNotFoundException e) {
+      throw new RuntimeException("Unable to deserialize HA event for region " + regionName);
+    }
+    if (inputValue instanceof HAEventWrapper) {
+      HAEventWrapper inputHaEventWrapper = (HAEventWrapper) inputValue;
+      // Key was removed at sender side so not putting it into the HARegion
+      if (inputHaEventWrapper.getClientUpdateMessage() == null) {
+        return null;
+      }
+      // Getting the instance from singleton CCN..This assumes only one bridge
+      // server in the VM
+      HAContainerWrapper haContainer =
+          (HAContainerWrapper) CacheClientNotifier.getInstance().getHaContainer();
+      if (haContainer == null) {
+        return null;
+      }
+      HAEventWrapper entryHaEventWrapper = null;
+      // synchronized (haContainer) {
+      do {
+        ClientUpdateMessageImpl entryMessage = (ClientUpdateMessageImpl) haContainer
+            .putIfAbsent(inputHaEventWrapper, inputHaEventWrapper.getClientUpdateMessage());
+        if (entryMessage != null) {
+          entryHaEventWrapper = (HAEventWrapper) haContainer.getKey(inputHaEventWrapper);
+          if (entryHaEventWrapper == null) {
+            continue;
+          }
+          synchronized (entryHaEventWrapper) {
+            if (haContainer.getKey(entryHaEventWrapper) != null) {
+              entryHaEventWrapper.incAndGetReferenceCount();
+              // If the input and entry HAEventWrappers are not the same (which is the normal
+              // case), add the CQs and interest list from the input to the entry and create a new
+              // value from the entry.
+              if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
+                addClientCQsAndInterestList(entryMessage, inputHaEventWrapper, haContainer,
+                    regionName);
+                inputHaEventWrapper.setClientUpdateMessage(null);
+                newValueCd =
+                    new VMCachedDeserializable(entryHaEventWrapper, newValueCd.getSizeInBytes());
+              }
+            } else {
+              entryHaEventWrapper = null;
+            }
+          }
+        } else { // putIfAbsent successful
+          entryHaEventWrapper = (HAEventWrapper) haContainer.getKey(inputHaEventWrapper);
+          synchronized (entryHaEventWrapper) {
+            entryHaEventWrapper.incAndGetReferenceCount();
+            entryHaEventWrapper.setHAContainer(haContainer);
+            // If the input and entry HAEventWrappers are not the same (which is not the normal
+            // case), get the entry message, add the CQs and interest list from the input to the
+            // entry and create a new value from the entry.
+            if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
+              entryMessage = (ClientUpdateMessageImpl) haContainer.get(inputHaEventWrapper);
+              addClientCQsAndInterestList(entryMessage, inputHaEventWrapper, haContainer,
+                  regionName);
+              inputHaEventWrapper.setClientUpdateMessage(null);
+              newValueCd =
+                  new VMCachedDeserializable(entryHaEventWrapper, newValueCd.getSizeInBytes());
+            }
+            entryHaEventWrapper.setClientUpdateMessage(null);
+            entryHaEventWrapper.setIsRefFromHAContainer(true);
+          }
+          break;
+        }
+        // try until we either get a reference to HAEventWrapper from
+        // HAContainer or successfully put one into it.
+      } while (entryHaEventWrapper == null);
+    }
+    return newValueCd;
+  }
+
-  public static void addClientCQsAndInterestList(ClientUpdateMessageImpl msg,
+  private void addClientCQsAndInterestList(ClientUpdateMessageImpl msg,

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD83 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS54 INS25 INS41 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS62 INS8 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS43 INS60 INS25 INS60 INS25 INS60 INS19 INS7 INS7 INS84 INS42 INS53 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS27 INS42 INS32 INS42 INS14 INS43 INS43 INS14 INS42 INS42 INS11 INS32 INS33 INS41 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS33 INS60 INS25 INS42 INS33 INS42 INS42 INS32 INS32 INS33 INS43 INS42 INS32 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS42 INS33 INS43 INS32 INS33 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS25 INS51 INS21 INS51 INS10 INS42 INS42 INS43 INS32 INS7 INS27 INS8 INS42 INS8 INS7 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS33 INS18 INS25 INS42 INS11 INS21 INS21 INS25 INS21 INS21 INS42 INS42 INS43 INS32 INS27 INS8 INS8 INS43 INS32 INS32 INS32 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS33 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS33 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS27 INS8 INS7 INS7 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS33 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS14 INS32 INS32 INS7 INS43 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 DEL83