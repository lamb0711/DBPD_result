GEODE-6174: ClusterManagementResult should have a cleaner way to indicate the status code and message (#3251)

Co-authored-by: Peter Tran <ptran@pivotal.io>

* add status code to indicate different types of failure
* make sure we always have a statusCode in the ClusterManagementService
* removed unnecessary getter methods.
+  // this error code should include a one-to-one mapping to the http status code returned
+  // by the controller
+  public enum StatusCode {
+    // configuration failed validation
+    ILLEGAL_ARGUMENT,
+    // user is not authenticated
+    UNAUTHENTICATED,
+    // user is not authorized to do this operation
+    UNAUTHORIZED,
+    // entity you are trying to create already exists
+    ENTITY_EXISTS,
+    // entity you are trying to modify/delete is not found
+    ENTITY_NOT_FOUND,
+    // operation not successful, this includes precondition is not met (either service is not
+    // running
+    // or no servers available, or the configuration encountered some error when trying to be
+    // realized
+    // on one member (configuration is not fully realized on all applicable members).
+    ERROR,
+    // configuration is realized on members, but encountered some error when persisting the
+    // configuration.
+    // the operation is still deemed unsuccessful.
+    FAIL_TO_PERSIST,
+    // operation is successful, configuration is realized and persisted
+    OK
+  }
+
-  private Status persistenceStatus = new Status();
+  // we will always have statusCode when the object is created
+  private StatusCode statusCode = StatusCode.OK;
+  private String statusMessage;
-    this.persistenceStatus = new Status(success, message);
+    setStatus(success, message);
+  }
+
+  public ClusterManagementResult(StatusCode statusCode, String message) {
+    this.statusCode = statusCode;
+    this.statusMessage = message;
+    // if any member failed, status code will be error
+    if (!success) {
+      statusCode = StatusCode.ERROR;
+    }
-  public void setPersistenceStatus(boolean success, String message) {
-    this.persistenceStatus = new Status(success, message);
+  public void setStatus(boolean success, String message) {
+    if (!success) {
+      statusCode = StatusCode.ERROR;
+    }
+    this.statusMessage = message;
+  }
+
+  public void setStatus(StatusCode code, String message) {
+    this.statusCode = code;
+    this.statusMessage = message;
-  public Status getPersistenceStatus() {
-    return persistenceStatus;
-  }
-
-  @JsonIgnore
-  public boolean isRealizedOnAllOrNone() {
-    return memberStatuses.values().stream().allMatch(x -> x.success);
-  }
-
-  @JsonIgnore
-  public boolean isPersisted() {
-    return persistenceStatus.isSuccess();
+  public String getStatusMessage() {
+    return statusMessage;
-    return isPersisted() && isRealizedOnAllOrNone();
+    return statusCode == StatusCode.OK;
+  public StatusCode getStatusCode() {
+    return statusCode;
+  }

MOV31 INS71 INS23 INS23 INS31 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS72 INS72 INS72 MOV83 UPD43 MOV43 INS59 INS83 INS43 INS59 INS83 INS42 MOV44 MOV44 INS8 INS44 INS44 UPD42 INS39 INS42 INS44 INS44 INS43 UPD42 MOV78 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS25 INS25 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS7 INS38 INS8 INS38 INS8 UPD42 MOV42 INS42 INS7 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS21 INS42 INS21 INS42 INS22 INS42 INS22 INS42 INS42 INS40 INS52 INS42 UPD42 INS7 INS7 UPD42 INS52 INS42 INS52 INS42 INS42 INS40 INS42 INS40 DEL43 DEL14 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL14 DEL43 DEL42 DEL42 DEL41 DEL42 DEL78 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL40 DEL86 DEL32 DEL42 DEL78 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27