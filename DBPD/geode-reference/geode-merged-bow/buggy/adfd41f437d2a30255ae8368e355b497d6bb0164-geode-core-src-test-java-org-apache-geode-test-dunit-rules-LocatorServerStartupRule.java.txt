[GEODE-2196] Add test for Cluster Config. Refactor LocatorServerStartupRule.

* Add ClusterConfigDUnitTest
* Refactor LocatorServerStartupRule
* this closes #309

+ *
+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;
+import org.junit.rules.TemporaryFolder;
+import java.io.File;
- * this rule can help you start up locator/server in different VMs you can multiple locators/servers
- * combination
+ * A rule to help you start locators and servers inside of a
+ * <a href="https://cwiki.apache.org/confluence/display/GEODE/Distributed-Unit-Tests">DUnit
+ * test</a>. This rule will start Servers and Locators inside of the four remote {@link VM}s created
+ * by the DUnit framework.
-  // these are only avaialbe in each VM
+  /**
+   * This is only available in each Locator/Server VM, not in the controller (test) VM.
+   */
+
+  /**
+   * This is only available in each Locator/Server VM, not in the controller (test) VM.
+   */
-  public int[] ports = new int[4];
-  private Host host = getHost(0);
+
+  private TemporaryFolder temporaryFolder = new SerializableTemporaryFolder();
+  private Member[] members;
-  public void before() {
-    after();
+  public void before() throws IOException {
+    temporaryFolder.create();
+    Invoke.invokeInEveryVM("Stop each VM", this::stop);
+    members = new Member[4];
-    stop();
-    Invoke.invokeInEveryVM("Stop each VM", () -> stop());
+    temporaryFolder.delete();
+    Invoke.invokeInEveryVM("Stop each VM", this::stop);
-   * Returns getHost(0).getVM(0) as a locator instance with the given configuration properties.
-   * 
-   * @param locatorProperties
+   * Starts a locator instance with the given configuration properties inside
+   * {@code getHost(0).getVM(index)}.
-   *
-   * @throws IOException
-  public VM getLocatorVM(int index, Properties locatorProperties) throws IOException {
-    VM locatorVM = host.getVM(index);
-    locatorProperties.setProperty(NAME, "locator-" + index);
+  public Member startLocatorVM(int index, Properties locatorProperties) throws IOException {
+    String name = "locator-" + index;
+    locatorProperties.setProperty(NAME, name);
+    File workingDir = createWorkingDirForMember(name);
+
+    VM locatorVM = getHost(0).getVM(index);
+      System.setProperty("user.dir", workingDir.getCanonicalPath());
-    ports[index] = locatorPort;
-    return locatorVM;
+    members[index] = new Member(locatorVM, locatorPort, workingDir);
+    return members[index];
-
-  public VM getServerVM(int index, Properties properties) {
-    return getServerVM(index, properties, 0);
+  public Member startServerVM(int index, Properties properties) throws IOException {
+    return startServerVM(index, properties, 0);
-   * starts a cache server that connect to the locator running at the given port.
-   * 
-   * @param index
-   * @param properties
-   * @param locatorPort
-   * @return
+   * Starts a cache server that connect to the locator running at the given port.
-  public VM getServerVM(int index, Properties properties, int locatorPort) {
-    VM nodeVM = getNodeVM(index);
-    properties.setProperty(NAME, "server-" + index);
-    int port = nodeVM.invoke(() -> {
+  public Member startServerVM(int index, Properties properties, int locatorPort)
+      throws IOException {
+    String name = "server-" + index;
+    properties.setProperty(NAME, name);
+    File workingDir = createWorkingDirForMember(name);
+
+    VM serverVM = getHost(0).getVM(index);
+    int port = serverVM.invoke(() -> {
+      System.setProperty("user.dir", workingDir.getCanonicalPath());
-    ports[index] = port;
-    return nodeVM;
+    members[index] = new Member(serverVM, port, workingDir);
+    return members[index];
-
-
-   * this will simply returns the node
-   * 
-   * @param index
-   * @return
+   * Returns the {@link Member} running inside the VM with the specified {@code index}
-  public VM getNodeVM(int index) {
-    return host.getVM(index);
+  public Member getMember(int index) {
+    return members[index];
-  public int getPort(int index) {
-    return ports[index];
+  public TemporaryFolder getRootFolder() {
+    return temporaryFolder;
-
+  private File createWorkingDirForMember(String dirName) throws IOException {
+    File workingDir = new File(temporaryFolder.getRoot(), dirName);
+    if (!workingDir.exists()) {
+      temporaryFolder.newFolder(dirName);
+    }
+
+    return workingDir;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS29 UPD83 INS43 INS5 INS59 INS43 UPD43 UPD42 UPD43 UPD42 INS43 UPD43 UPD42 INS43 UPD43 UPD42 MOV83 INS43 UPD42 MOV42 INS8 INS83 INS43 INS42 MOV44 INS43 MOV8 UPD66 UPD66 INS66 INS65 INS66 INS66 INS65 INS65 INS42 UPD42 INS14 INS43 INS85 INS42 INS42 INS21 INS21 INS65 UPD42 INS60 INS60 UPD42 INS42 UPD42 INS42 INS60 INS60 INS65 UPD42 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS66 INS66 INS43 UPD42 MOV42 INS32 INS7 UPD66 MOV66 INS65 INS66 INS43 INS59 INS43 INS59 MOV43 MOV59 INS2 UPD66 INS43 INS43 INS59 MOV43 INS59 INS2 UPD66 MOV66 INS65 INS66 INS65 INS2 INS42 INS42 INS43 INS59 INS38 INS8 INS42 INS42 UPD42 INS42 INS42 INS42 INS45 INS90 INS42 INS3 UPD42 INS42 INS90 INS66 INS42 INS42 MOV27 INS42 INS42 INS42 INS32 UPD42 INS32 INS14 INS42 INS42 UPD42 INS42 UPD42 MOV27 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS42 UPD42 MOV42 INS66 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS52 INS42 INS5 INS34 INS52 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL34 DEL3 DEL43 DEL42 DEL32 DEL86 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL42 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL42 DEL32 DEL42 DEL42 DEL65 DEL65 DEL65 DEL42 DEL42 DEL42 DEL32 DEL39 DEL31 DEL39 DEL42 DEL42 DEL42 DEL2 DEL41