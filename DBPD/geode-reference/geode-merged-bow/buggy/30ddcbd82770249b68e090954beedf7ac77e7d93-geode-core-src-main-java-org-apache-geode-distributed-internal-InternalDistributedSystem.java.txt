GEODE-6588: Cleanup static analyzer warnings and generics (#3646)


+
+import java.util.concurrent.atomic.AtomicInteger;
-  public static final CreationStackGenerator DEFAULT_CREATION_STACK_GENERATOR =
-      new CreationStackGenerator() {
-        @Override
-        public Throwable generateCreationStack(final DistributionConfig config) {
-          return null;
-        }
-      };
+  public static final CreationStackGenerator DEFAULT_CREATION_STACK_GENERATOR = config -> null;
+  @Deprecated
+  @Deprecated
-  private static final Set<ConnectListener> connectListeners = new LinkedHashSet();
+  private static final Set<ConnectListener> connectListeners = new LinkedHashSet<>();
-  public static final String APPEND_TO_LOG_FILE = GEMFIRE_PREFIX + "append-log";
+  private static final String APPEND_TO_LOG_FILE = GEMFIRE_PREFIX + "append-log";
-  public static boolean removeSystem(InternalDistributedSystem oldSystem) {
-    return DistributedSystem.removeSystem(oldSystem);
+  public static void removeSystem(InternalDistributedSystem oldSystem) {
+    DistributedSystem.removeSystem(oldSystem);
-        InternalDistributedSystem existingSystem =
-            (InternalDistributedSystem) existingSystems.get(0);
+        InternalDistributedSystem existingSystem = existingSystems.get(0);
+  @Deprecated
+  @Deprecated
+  @Deprecated
-    return this.logWriter;
+    return logWriter;
+  @Deprecated
-    reconnectAttemptCounter = 0;
+    reconnectAttemptCounter.set(0);
-    ((DistributionConfigImpl) this.originalConfig).checkForDisallowedDefaults(); // throws
-                                                                                 // IllegalStateEx
-    this.shareSockets = this.originalConfig.getConserveSockets();
-    this.startTime = System.currentTimeMillis();
-    this.grc = new GrantorRequestProcessor.GrantorRequestContext(stopper);
+    ((DistributionConfigImpl) originalConfig).checkForDisallowedDefaults(); // throws
+                                                                            // IllegalStateEx
+    shareSockets = originalConfig.getConserveSockets();
+    startTime = System.currentTimeMillis();
+    grc = new GrantorRequestProcessor.GrantorRequestContext(stopper);
-    this.creationStack =
-        TEST_CREATION_STACK_GENERATOR.get().generateCreationStack(this.originalConfig);
+    creationStack =
+        TEST_CREATION_STACK_GENERATOR.get().generateCreationStack(originalConfig);
-    return this.securityService;
+    return securityService;
-    return this.isLoner;
+    return isLoner;
-    return this.offHeapStore;
+    return offHeapStore;
-    if (this.originalConfig.getLocators().equals("")) {
-      if (this.originalConfig.getMcastPort() != 0) {
+    if (originalConfig.getLocators().equals("")) {
+      if (originalConfig.getMcastPort() != 0) {
-        this.isLoner = true;
+        isLoner = true;
-    this.config = new RuntimeDistributionConfigImpl(this);
+    config = new RuntimeDistributionConfigImpl(this);
-    this.securityService = SecurityServiceFactory.create(
-        this.config.getSecurityProps(),
+    securityService = SecurityServiceFactory.create(
+        config.getSecurityProps(),
-    if (!this.isLoner) {
-      this.attemptingToReconnect = (reconnectAttemptCounter > 0);
+    if (!isLoner) {
+      attemptingToReconnect = (reconnectAttemptCounter.get() > 0);
-      if (this.logWriter == null) {
-        this.logWriter =
-            LogWriterFactory.createLogWriterLogger(this.config, false);
-        this.logWriter.fine("LogWriter is created.");
+      if (logWriter == null) {
+        logWriter =
+            LogWriterFactory.createLogWriterLogger(config, false);
+        logWriter.fine("LogWriter is created.");
-      if (this.securityLogWriter == null) {
+      if (securityLogWriter == null) {
-        this.securityLogWriter =
-            LogWriterFactory.createLogWriterLogger(this.config, true);
-        this.securityLogWriter.fine("SecurityLogWriter is created.");
+        securityLogWriter =
+            LogWriterFactory.createLogWriterLogger(config, true);
+        securityLogWriter.fine("SecurityLogWriter is created.");
-      this.clock = new DSClock(this.isLoner);
+      clock = new DSClock(isLoner);
-      if (this.attemptingToReconnect && logger.isDebugEnabled()) {
+      if (attemptingToReconnect && logger.isDebugEnabled()) {
-        this.locatorDMTypeForced = true;
+        locatorDMTypeForced = true;
-        EncryptorImpl.initCertsMap(this.config.getSecurityProps());
-        EncryptorImpl.initPrivateKey(this.config.getSecurityProps());
-        EncryptorImpl.initDHKeys(this.config);
+        EncryptorImpl.initCertsMap(config.getSecurityProps());
+        EncryptorImpl.initPrivateKey(config.getSecurityProps());
+        EncryptorImpl.initDHKeys(config);
-      this.offHeapStore = OffHeapStorage.createOffHeapStorage(this, offHeapMemorySize, this);
+      offHeapStore = OffHeapStorage.createOffHeapStorage(this, offHeapMemorySize, this);
-      synchronized (this.isConnectedMutex) {
-        this.isConnected = true;
+      synchronized (isConnectedMutex) {
+        isConnected = true;
-      if (!this.isLoner) {
+      if (!isLoner) {
-          if (this.quorumChecker != null) {
-            this.quorumChecker.suspend();
+          if (quorumChecker != null) {
+            quorumChecker.suspend();
-          this.dm = ClusterDistributionManager.create(this);
+          dm = ClusterDistributionManager.create(this);
-          if (this.dm == null && this.quorumChecker != null) {
-            this.quorumChecker.resume();
+          if (dm == null && quorumChecker != null) {
+            quorumChecker.resume();
-        this.dm = new LonerDistributionManager(this, this.logWriter);
+        dm = new LonerDistributionManager(this, logWriter);
-      Assert.assertTrue(this.dm != null);
-      Assert.assertTrue(this.dm.getSystem() == this);
+      Assert.assertTrue(dm != null);
+      Assert.assertTrue(dm.getSystem() == this);
-        this.id = this.dm.getMembershipPort();
+        id = dm.getMembershipPort();
-      synchronized (this.isConnectedMutex) {
-        this.isConnected = true;
+      synchronized (isConnectedMutex) {
+        isConnected = true;
-      if (attemptingToReconnect && (this.startedLocator == null)) {
+      if (attemptingToReconnect && (startedLocator == null)) {
-      this.config.close();
+      config.close();
-    this.reconnected = this.attemptingToReconnect;
-    this.attemptingToReconnect = false;
-    reconnectAttemptCounter = 0; // reset reconnect count since we just got a new connection
+    reconnected = attemptingToReconnect;
+    attemptingToReconnect = false;
+    reconnectAttemptCounter.set(0);
-    this.sampler.start();
+    sampler.start();
-    String locatorString = this.originalConfig.getStartLocator();
+    String locatorString = originalConfig.getStartLocator();
-    if (attemptingToReconnect && !this.isConnected) {
-      if (this.quorumChecker != null) {
+    if (attemptingToReconnect && !isConnected) {
+      if (quorumChecker != null) {
-        if (!quorumChecker.checkForQuorum(3L * this.config.getMemberTimeout())) {
+        if (!quorumChecker.checkForQuorum(3L * config.getMemberTimeout())) {
-      this.startedLocator =
+      startedLocator =
-      this.startedLocator.getConfig().setEnableClusterConfiguration(false);
+      startedLocator.getConfig().setEnableClusterConfiguration(false);
-        this.startedLocator.startPeerLocation();
+        startedLocator.startPeerLocation();
-          this.startedLocator.stop();
+          startedLocator.stop();
-    InternalLocator loc = this.startedLocator;
+    InternalLocator loc = startedLocator;
-  public void setDependentLocator(InternalLocator theLocator) {
-    this.startedLocator = theLocator;
+  void setDependentLocator(InternalLocator theLocator) {
+    startedLocator = theLocator;
-    if (this.dm == null) {
+    if (dm == null) {
-    if (this.dm.getCancelCriterion().isCancelInProgress()) {
+    if (dm.getCancelCriterion().isCancelInProgress()) {
-    if (this.isDisconnecting) {
+    if (isDisconnecting) {
-    return this.isConnected;
+    return isConnected;
-    return !this.isConnected;
+    return !isConnected;
-    return this.id;
+    return id;
-    return this.startTime;
+    return startTime;
-    if (this.dm == null) {
+    if (dm == null) {
-    if (this.dm.getCancelCriterion().isCancelInProgress()) {
+    if (dm.getCancelCriterion().isCancelInProgress()) {
-    if (!this.isConnected) {
+    if (!isConnected) {
-    return this.isDisconnecting;
+    return isDisconnecting;
-    return this.logWriter;
+    return logWriter;
-    return this.clock;
+    return clock;
-    return this.securityLogWriter;
+    return securityLogWriter;
-    return this.sampler;
+    return sampler;
-   * @param cause an optional exception showing the reason for abnormal disconnect
-  public void disconnect(String reason, Throwable cause, boolean shunned) {
+  public void disconnect(String reason, boolean shunned) {
-    this.reconnected = false;
-    if (isForcedDisconnect && !this.isReconnectingDS) {
-      this.forcedDisconnect = true;
+    reconnected = false;
+    if (isForcedDisconnect && !isReconnectingDS) {
+      forcedDisconnect = true;
-      Long.getLong("DistributionManager.DISCONNECT_WAIT", 10 * 1000).longValue();
+      Long.getLong("DistributionManager.DISCONNECT_WAIT", 10 * 1000);
-    Runnable r = new Runnable() {
-      @Override
-      public void run() {
-        try {
-          isDisconnectThread.set(Boolean.TRUE);
-          dc.onDisconnect(InternalDistributedSystem.this);
-        } catch (CancelException e) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("Disconnect listener <{}> thwarted by cancellation: {}", dc, e,
-                logger.isTraceEnabled() ? e : null);
-          }
+    // Launch it and wait a little bit
+    Thread t = new LoggingThread(dc.toString(), false, () -> {
+      try {
+        isDisconnectThread.set(Boolean.TRUE);
+        dc.onDisconnect(InternalDistributedSystem.this);
+      } catch (CancelException e) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("Disconnect listener <{}> thwarted by cancellation: {}", dc, e,
+              traceException(e));
-    };
-
-    // Launch it and wait a little bit
-    Thread t = new LoggingThread(dc.toString(), false, r);
+    });
+  private Exception traceException(CancelException e) {
+    return logger.isTraceEnabled() ? e : null;
+  }
+
-    return this.isDisconnectThread.get();
+    return isDisconnectThread.get();
-    this.isDisconnectThread.set(Boolean.TRUE);
+    isDisconnectThread.set(Boolean.TRUE);
-        logger.debug("Disconnect listener <{}> thwarted by shutdown: {}", dc, e,
-            logger.isTraceEnabled() ? e : null);
+        logger.debug("Disconnect listener <{}> thwarted by shutdown: {}", dc, e, traceException(e));
-      synchronized (this.disconnectListeners) {
+      synchronized (disconnectListeners) {
-      DisconnectListener dcListener = null;
+      DisconnectListener dcListener;
-      synchronized (this.disconnectListeners) {
+      synchronized (disconnectListeners) {
-    final boolean DEBUG = SystemFailure.TRACE_CLOSE;
-        if (DEBUG) {
-          System.err.println("DEBUG: closing membership manager");
-        }
-        if (DEBUG) {
-          System.err.println("DEBUG: back from closing membership manager");
-        }
-    this.isConnected = false;
+    isConnected = false;
-    this.isDisconnecting = true;
-    this.disconnectListeners.clear();
-    if (DEBUG) {
-      System.err.println("DEBUG: done with InternalDistributedSystem#emergencyClose");
-    }
+    isDisconnecting = true;
+    disconnectListeners.clear();
-    synchronized (this.isConnectedMutex) {
-      this.isConnected = false;
+    synchronized (isConnectedMutex) {
+      isConnected = false;
-    synchronized (this.isConnectedMutex) {
-      while (this.isConnected) {
+    synchronized (isConnectedMutex) {
+      while (isConnected) {
-          this.isConnectedMutex.wait();
+          isConnectedMutex.wait();
-            if (this.isDisconnecting) {
+            if (isDisconnecting) {
-            this.isDisconnecting = true;
+            isDisconnecting = true;
-              if (this.reconnectDS != null) {
+              if (reconnectDS != null) {
-                  logger.debug("disconnecting reconnected DS: {}", this.reconnectDS);
+                  logger.debug("disconnecting reconnected DS: {}", reconnectDS);
-                InternalDistributedSystem r = this.reconnectDS;
-                this.reconnectDS = null;
+                InternalDistributedSystem r = reconnectDS;
+                reconnectDS = null;
-        if (!this.attemptingToReconnect) {
+        if (!attemptingToReconnect) {
-          this.dm.close();
+          dm.close();
-          if (this.startedLocator != null) {
-            this.startedLocator.stop(forcedDisconnect, preparingForReconnect, false);
-            this.startedLocator = null;
+          if (startedLocator != null) {
+            startedLocator.stop(forcedDisconnect, preparingForReconnect, false);
+            startedLocator = null;
-      if (this.sampler != null) {
-        this.sampler.stop();
-        this.sampler = null;
+      if (sampler != null) {
+        sampler.stop();
+        sampler = null;
-      if (!this.attemptingToReconnect) {
+      if (!attemptingToReconnect) {
-          if (!this.attemptingToReconnect) {
+          if (!attemptingToReconnect) {
-          this.config.close();
+          config.close();
-    return this.dm;
+    return dm;
-    return this.dm;
+    return dm;
-  public QuorumChecker getQuorumChecker() {
-    return this.quorumChecker;
+  QuorumChecker getQuorumChecker() {
+    return quorumChecker;
-      return !this.shareSockets;
+      return !shareSockets;
-      return b.booleanValue();
+      return b;
-    DistributionConfig me = this.getConfig();
+    DistributionConfig me = getConfig();
-    SortedSet sorted = new TreeSet();
+    SortedSet<String> sorted = new TreeSet<>();
-      canonical.append(String.valueOf(locId.getPort()));
+      canonical.append(locId.getPort());
-    return this.config;
+    return config;
-    return String.valueOf(this.dm.getId());
+    return String.valueOf(dm.getId());
-    return this.dm.getId();
+    return dm.getId();
+  @SuppressWarnings("unchecked")
-    return this.originalConfig;
+    return originalConfig;
-    String name = this.getName();
+    String name = getName();
-    int port = this.config.getMcastPort();
+    int port = config.getMcastPort();
-      sb.append(this.config.getLocators());
+      sb.append(config.getLocators());
-    File logFile = this.config.getLogFile();
+    File logFile = config.getLogFile();
-    sb.append((new Date(this.startTime)).toString());
+    sb.append((new Date(startTime)).toString());
-    if (!this.isConnected()) {
+    if (!isConnected()) {
-    synchronized (this.disconnectListeners) {
-      this.disconnectListeners.add(listener);
+    synchronized (disconnectListeners) {
+      disconnectListeners.add(listener);
-        String reason = this.stopper.cancelInProgress();
+        String reason = stopper.cancelInProgress();
-          this.disconnectListeners.remove(listener); // don't leave in the list!
+          disconnectListeners.remove(listener); // don't leave in the list!
-    synchronized (this.disconnectListeners) {
-      this.disconnectListeners.remove(listener);
+    synchronized (disconnectListeners) {
+      disconnectListeners.remove(listener);
-    return this.config.toProperties();
+    return config.toProperties();
-    return this.config.getSecurityProps();
+    return config.getSecurityProps();
-  private static volatile int reconnectAttemptCounter = 0;
+  private static final AtomicInteger reconnectAttemptCounter = new AtomicInteger();
-    InternalDistributedSystem rds = this.reconnectDS;
+    InternalDistributedSystem rds = reconnectDS;
-    boolean newDsConnected = (rds == null || !rds.isConnected());
-    return newDsConnected;
+    return (rds == null || !rds.isConnected());
-  public boolean isReconnectingDS() {
-    return this.isReconnectingDS;
+  boolean isReconnectingDS() {
+    return isReconnectingDS;
-  public MembershipInformation oldDSMembershipInfo() {
-    if (this.quorumChecker != null) {
-      return this.quorumChecker.getMembershipInfo();
+  MembershipInformation oldDSMembershipInfo() {
+    if (quorumChecker != null) {
+      return quorumChecker.getMembershipInfo();
-    return this.reconnected;
+    return reconnected;
-    return this.forcedDisconnect;
+    return forcedDisconnect;
-    this.reconnectCancelled = true;
+    reconnectCancelled = true;
-      synchronized (this.reconnectLock) { // should the synchronized be first on this and
+      synchronized (reconnectLock) { // should the synchronized be first on this and
-        this.reconnectLock.notifyAll();
+        reconnectLock.notifyAll();
-    if (this.isReconnectingDS && forcedDisconnect) {
+    if (isReconnectingDS && forcedDisconnect) {
-        synchronized (this.reconnectLock) {
+        synchronized (reconnectLock) {
-            if (this.config.getDisableAutoReconnect()) {
+            if (config.getDisableAutoReconnect()) {
-          return this.reconnectDS != null && this.reconnectDS.isConnected();
+          return reconnectDS != null && reconnectDS.isConnected();
-    return reconnectAttemptCounter;
+    return reconnectAttemptCounter.get();
-    this.attemptingToReconnect = true;
+    attemptingToReconnect = true;
-    Properties configProps = this.config.toProperties();
-    configProps.putAll(this.config.toSecurityProperties());
+    Properties configProps = config.toProperties();
+    configProps.putAll(config.toSecurityProperties());
-    MembershipManager mbrMgr = this.dm.getMembershipManager();
-    this.quorumChecker = mbrMgr.getQuorumChecker();
+    MembershipManager mbrMgr = dm.getMembershipManager();
+    quorumChecker = mbrMgr.getQuorumChecker();
-      while (this.reconnectDS == null || !this.reconnectDS.isConnected()) {
+      while (reconnectDS == null || !reconnectDS.isConnected()) {
-          if (reconnectAttemptCounter >= maxTries) {
+          if (reconnectAttemptCounter.get() >= maxTries) {
-        reconnectAttemptCounter++;
+        reconnectAttemptCounter.getAndIncrement();
-        int saveNumberOfTries = reconnectAttemptCounter;
+        int saveNumberOfTries = reconnectAttemptCounter.get();
-          notifyReconnectListeners(this, this.reconnectDS, true);
+          notifyReconnectListeners(this, reconnectDS, true);
-          if (this.locatorDMTypeForced) {
+          if (locatorDMTypeForced) {
-          if (this.reconnectCancelled) {
+          if (reconnectCancelled) {
-          this.reconnectDS = newDS;
+          reconnectDS = newDS;
-          if (this.locatorDMTypeForced) {
+          if (locatorDMTypeForced) {
-          reconnectAttemptCounter = saveNumberOfTries;
+          reconnectAttemptCounter.set(saveNumberOfTries);
-        DistributionManager newDM = this.reconnectDS.getDistributionManager();
+        DistributionManager newDM = reconnectDS.getDistributionManager();
-                    reconnectAttemptCounter = 0;
+                    reconnectAttemptCounter.set(0);
-          notifyReconnectListeners(this, this.reconnectDS, false);
+          notifyReconnectListeners(this, reconnectDS, false);
-    if (!this.sameAs(propsToCheck, isConnected)) {
+    if (!sameAs(propsToCheck, isConnected)) {
-      String[] validAttributeNames = this.originalConfig.getAttributeNames();
+      String[] validAttributeNames = originalConfig.getAttributeNames();
-        Object actualAtt = this.originalConfig.getAttributeObject(attName);
+        Object actualAtt = originalConfig.getAttributeObject(attName);
-      if (this.creationStack == null) {
+      if (creationStack == null) {
-            this.creationStack);
+            creationStack);
-    synchronized (this.reconnectLock) {
+    synchronized (reconnectLock) {
-        if (this.reconnectCancelled) {
+        if (reconnectCancelled) {
-          this.reconnectLock.wait(sleepTime);
+          reconnectLock.wait(sleepTime);
-      InternalDistributedSystem recon = this.reconnectDS;
+      InternalDistributedSystem recon = reconnectDS;
-    return this.reconnectDS;
+    return reconnectDS;
-    this.reconnectCancelled = true;
-    synchronized (this.reconnectLock) {
-      this.reconnectLock.notify();
+    reconnectCancelled = true;
+    synchronized (reconnectLock) {
+      reconnectLock.notify();
-    this.attemptingToReconnect = false;
+    attemptingToReconnect = false;
-    this.reconnectCancelled = true;
-    synchronized (this.reconnectLock) {
-      this.reconnectLock.notify();
+    reconnectCancelled = true;
+    synchronized (reconnectLock) {
+      reconnectLock.notify();
-    this.attemptingToReconnect = false;
+    attemptingToReconnect = false;
-    this.dm.setCache(instance);
+    dm.setCache(instance);
-    return this.dm == null ? null : this.dm.getCache();
+    return dm == null ? null : dm.getCache();

INS26 INS40 INS31 INS78 INS78 UPD83 UPD39 INS78 INS78 INS78 INS78 MOV25 MOV25 MOV78 MOV25 MOV25 MOV43 MOV78 MOV43 INS83 INS43 INS42 INS44 MOV8 INS79 MOV78 MOV43 MOV78 MOV43 UPD83 INS43 INS86 INS42 INS42 INS21 INS42 INS42 INS42 INS42 MOV32 INS42 INS43 INS42 INS41 INS42 INS45 INS42 INS14 INS59 INS33 INS74 MOV32 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS42 INS27 INS38 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV16 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS43 MOV36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 UPD42 INS42 INS42 MOV25 INS42 INS42 INS42 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV32 INS9 INS86 INS42 INS42 MOV27 INS42 INS42 INS42 INS74 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV8 MOV32 MOV21 INS42 INS42 INS42 INS42 MOV43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL42 DEL43 DEL11 DEL52 DEL42 DEL22 DEL42 DEL34 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL34 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL42 DEL9 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL33 DEL16 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL34 DEL52 DEL42 DEL22 DEL39 DEL42 DEL59 DEL60 DEL42 DEL83 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL37 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL34 DEL7 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22