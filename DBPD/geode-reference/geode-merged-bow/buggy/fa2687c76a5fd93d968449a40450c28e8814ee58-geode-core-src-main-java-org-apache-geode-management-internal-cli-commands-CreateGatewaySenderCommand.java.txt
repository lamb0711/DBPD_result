 GEODE-2668: build tabular command result from a list of function results  (#1127)

* GEODE-2668: build tabular command result from a list of function results

* reduce duplicate code to create the tabular results
* promote presentation consistency
* Add more validation for CreateGatewaySender/Receiver command and reworked the tests

-import java.util.concurrent.atomic.AtomicReference;
-import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.cache.wan.GatewaySender.OrderPolicy;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.LogWrapper;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-  public CreateGatewaySenderCommand() {}
-
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN,
+      interceptor = "org.apache.geode.management.internal.cli.commands.CreateGatewaySenderCommand$Interceptor")
-      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__PARALLEL,
-          help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) Boolean parallel,
+      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__PARALLEL, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) boolean parallel,
-          help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) String orderPolicy,
+          help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) OrderPolicy orderPolicy,
-    Result result;
+    GatewaySenderFunctionArgs gatewaySenderFunctionArgs =
+        new GatewaySenderFunctionArgs(id, remoteDistributedSystemId, parallel, manualStart,
+            socketBufferSize, socketReadTimeout, enableBatchConflation, batchSize,
+            batchTimeInterval, enablePersistence, diskStoreName, diskSynchronous, maxQueueMemory,
+            alertThreshold, dispatcherThreads, orderPolicy == null ? null : orderPolicy.name(),
+            gatewayEventFilters, gatewayTransportFilter);
-    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<XmlEntity>();
-    try {
-      GatewaySenderFunctionArgs gatewaySenderFunctionArgs = new GatewaySenderFunctionArgs(id,
-          remoteDistributedSystemId, parallel, manualStart, socketBufferSize, socketReadTimeout,
-          enableBatchConflation, batchSize, batchTimeInterval, enablePersistence, diskStoreName,
-          diskSynchronous, maxQueueMemory, alertThreshold, dispatcherThreads, orderPolicy,
-          gatewayEventFilters, gatewayTransportFilter);
+    Set<DistributedMember> membersToCreateGatewaySenderOn = findMembers(onGroups, onMember);
-      Set<DistributedMember> membersToCreateGatewaySenderOn =
-          CliUtil.findMembers(onGroups, onMember);
-
-      if (membersToCreateGatewaySenderOn.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> resultCollector =
-          CliUtil.executeFunction(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs,
-              membersToCreateGatewaySenderOn);
-      @SuppressWarnings("unchecked")
-      List<CliFunctionResult> gatewaySenderCreateResults =
-          (List<CliFunctionResult>) resultCollector.getResult();
-
-      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
-      final String errorPrefix = "ERROR: ";
-      for (CliFunctionResult gatewaySenderCreateResult : gatewaySenderCreateResults) {
-        boolean success = gatewaySenderCreateResult.isSuccessful();
-        tabularResultData.accumulate("Member", gatewaySenderCreateResult.getMemberIdOrName());
-        tabularResultData.accumulate("Status",
-            (success ? "" : errorPrefix) + gatewaySenderCreateResult.getMessage());
-
-        if (success && xmlEntity.get() == null) {
-          xmlEntity.set(gatewaySenderCreateResult.getXmlEntity());
-        }
-      }
-      result = ResultBuilder.buildResult(tabularResultData);
-    } catch (IllegalArgumentException e) {
-      LogWrapper.getInstance().info(e.getMessage());
-      result = ResultBuilder.createUserErrorResult(e.getMessage());
+    if (membersToCreateGatewaySenderOn.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-    if (xmlEntity.get() != null) {
+    List<CliFunctionResult> gatewaySenderCreateResults =
+        executeAndGetFunctionResult(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs,
+            membersToCreateGatewaySenderOn);
+
+    CommandResult result = ResultBuilder.buildResult(gatewaySenderCreateResults);
+    XmlEntity xmlEntity = findXmlEntity(gatewaySenderCreateResults);
+    if (xmlEntity != null) {
-          () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), onGroups));
+          () -> getSharedConfiguration().addXmlEntity(xmlEntity, onGroups));
+
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      Integer dispatcherThreads =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__DISPATCHERTHREADS);
+      OrderPolicy orderPolicy =
+          (OrderPolicy) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY);
+      Boolean parallel =
+          (Boolean) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__PARALLEL);
+      if (dispatcherThreads != null && dispatcherThreads > 1 && orderPolicy == null) {
+        return ResultBuilder.createUserErrorResult(
+            "Must specify --order-policy when --dispatcher-threads is larger than 1.");
+      }
+
+      if (parallel && orderPolicy == OrderPolicy.THREAD) {
+        return ResultBuilder.createUserErrorResult(
+            "Parallel Gateway Sender can not be created with THREAD OrderPolicy");
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }
+  }

MOV26 UPD40 UPD40 UPD40 UPD40 INS55 INS83 INS83 INS42 INS43 MOV31 INS80 INS39 UPD43 MOV60 MOV60 MOV25 MOV60 MOV60 INS60 INS42 INS78 MOV43 INS42 INS44 INS8 INS42 INS45 INS80 INS80 UPD42 MOV43 MOV74 UPD43 MOV43 INS59 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS25 INS41 INS42 INS45 INS42 INS45 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS27 INS8 INS27 INS8 INS32 MOV43 INS16 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS11 INS27 INS27 INS41 INS42 INS27 INS41 INS42 INS42 INS45 INS27 INS33 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS27 INS27 INS42 INS33 INS32 INS42 INS40 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS45 MOV42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL16 DEL36 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL8