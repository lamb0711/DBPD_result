GEODE-3277: Fix error path constructors of Launcher inner State classess

Updated tests for changes in the error constructors for ServerState and
LocatorState.

Minor spelling corrections.

This reintroduces changes that were reverted due to merge conflicts with
the previous state of the develop branch

-import org.apache.geode.internal.process.StartupStatusListener;
+import org.apache.geode.management.internal.cli.util.HostUtils;
- * 
+ *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-      // NOTE returning localhost/127.0.0.1 implies the bindAddress was null and no IP address for
+      // Returning localhost/127.0.0.1 implies the bindAddress was null and no IP address for
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-            new StartupStatusListener() {
-              @Override
-              public void setStatus(final String statusMessage) {
-                LocatorLauncher.this.statusMessage = statusMessage;
-              }
-            });
+            statusMessage -> LocatorLauncher.this.statusMessage = statusMessage);
-    Properties properties = super.getDistributedSystemProperties(getProperties());
-    return properties;
+    return super.getDistributedSystemProperties(getProperties());
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    // launcher
-    // is used to get the Locator's status).
+    // launcher is used to get the Locator's status).
-      return createNoResponseState(handled, "Failed to connect to locator " + getId());
+      return createNoResponseState(handled,
+          "Failed to connect to locator " + getBindAddressAsString() + "[" + getPort() + "]");
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    // else if (this.workingDirectorySpecified) {
-    debug(cause);
+    debug(cause + ": " + errorMessage);
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-  public static enum Command {
+  public enum Command {
-          : Collections.<String>emptyList());
+          : Collections.emptyList());
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-   * 
+   *
-     * 
+     *
-          null, // locatorLocation
+          getLocatorLocation(launcher), // locatorLocation
-          Collections.<String>emptyList(), // jvmArguments
+          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
-          null, // javaVersion
+          System.getProperty("java.version"), // javaVersion
-          null, // host
-          null, // port
+          getBindAddressAsString(launcher), // host
+          launcher.getPortAsString(), // port
+    /*
+     * Guards against throwing NPEs due to incorrect or missing host information while constructing
+     * error states
+     */
+    private static String getLocatorLocation(LocatorLauncher launcher) {
+      if (launcher.getPort() == null) {
+        return launcher.getId();
+      }
+      if (launcher.getBindAddress() == null) {
+        return HostUtils.getLocatorId(HostUtils.getLocalHost(), launcher.getPort());
+      }
+      return HostUtils.getLocatorId(launcher.getBindAddressAsString(), launcher.getPort());
+    }
+
-          if (isBlank(bindAddress.getHostAddress())) {
+          if (isNotBlank(bindAddress.getHostAddress())) {
-                                                  // safe
-            // check none-the-less.
+            // safe check none-the-less.

MOV26 UPD40 MOV43 INS31 INS83 INS83 MOV43 INS42 INS44 INS8 MOV48 INS43 INS42 INS25 INS25 INS41 INS27 INS32 INS32 INS32 INS32 INS32 INS42 INS27 INS8 INS27 INS8 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS33 INS41 INS32 INS33 INS41 INS42 INS42 INS32 INS32 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 MOV32 MOV32 INS86 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS59 MOV7 INS42 UPD42 UPD42 INS42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL83 DEL42 DEL43 DEL33 DEL32 DEL33 DEL33 DEL33