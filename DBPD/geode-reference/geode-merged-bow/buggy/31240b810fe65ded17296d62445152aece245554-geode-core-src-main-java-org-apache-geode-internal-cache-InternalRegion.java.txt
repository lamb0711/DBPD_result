GEODE-5059: Move basicPut functionality to RegionMapPut (#1858)

* Move the methods to RegionMapPut
* Add tests to RegionMapPut

+import java.util.List;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.TransactionId;
+import org.apache.geode.cache.util.ObjectSizer;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.internal.cache.persistence.DiskExceptionHandler;
+import org.apache.geode.internal.cache.tier.sockets.VersionedObjectList;
+import org.apache.geode.internal.util.concurrent.StoppableCountDownLatch;
-    RegionAttributes, HasDiskRegion, RegionMapOwner {
+    RegionAttributes, HasDiskRegion, RegionMapOwner, DiskExceptionHandler {
-  /** Throws CacheClosedException or RegionDestroyedException */
+  /**
+   * Throws CacheClosedException or RegionDestroyedException
+   */
+  void waitOnInitialization(StoppableCountDownLatch latch);
+
-   * SingleWriteSingleReadRegionQueue.SingleReadWriteMetaRegion to return false as the event
-   * propagation from those regions do not need EventID objects. This method is made abstract to
-   * directly use it in clear operations. (clear and localclear)
+   * SingleWriteSingleReadRegionQueue.SingleReadWriteMetaRegion
+   * to return false as the event propagation from those regions do not need EventID objects. This
+   * method is made abstract to directly use it in clear operations. (clear and localclear)
+
+  CacheWriter basicGetWriter();
+
+  void basicPutPart3(EntryEventImpl event, RegionEntry regionEntry, boolean isInitialized,
+      long lastModifiedTime, boolean invokeListeners, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue);
+
+  long basicPutPart2(EntryEventImpl event, RegionEntry re, boolean isInitialized,
+      long lastModifiedTime, boolean clearOccured);
+
+  int calculateValueSize(Object v);
+
+  void cacheWriteBeforePut(EntryEventImpl event, Set netWriteRecipients, CacheWriter cacheWriter,
+      boolean requireOldValue, Object expectedOldValue);
+
+  void updateSizeOnPut(Object key, int oldSize, int newBucketSize);
+
+  void updateSizeOnCreate(Object key, int newBucketSize);
+
+  boolean isCopyOnRead();
+
+  Object getValueInVMOrDiskWithoutFaultIn(Object key);
+
+  boolean isRegionInvalid();
+
+  void setRegionInvalid(boolean b);
+
+  ObjectSizer getObjectSizer();
+
+  boolean hasSeenEvent(EntryEventImpl entryEvent);
+
+  TXId getTXId();
+
+  KeyInfo getKeyInfo(Object key, Object newVal, Object callbackArgument);
+
+  void invokeTXCallbacks(EnumListenerEvent afterDestroy, EntryEventImpl ee, boolean b);
+
+  LocalRegion getPartitionedRegion();
+
+  void checkIfAboveThreshold(EntryEventImpl event);
+
+  LocalRegion getDataRegionForRead(KeyInfo keyInfo);
+
+  InternalRegion getDataRegionForWrite(KeyInfo keyInfo);
+
+  TXEntryState createReadEntry(TXRegionState txr, KeyInfo keyInfo, boolean createIfAbsent);
+
+  void syncBulkOp(Runnable task, EventID eventId);
+
+  Object getDataView();
+
+  boolean basicPut(EntryEventImpl ev, boolean b, boolean b1, Object o, boolean b2);
+
+  void basicDestroy(EntryEventImpl ev, boolean b, Object o);
+
+  DistributedMember getOwnerForKey(KeyInfo key);
+
+  boolean isMetaRegionWithTransactions();
+
+  void setInUseByTransaction(boolean b);
+
+  void txLRUStart();
+
+  void txLRUEnd();
+
+  void txDecRefCount(RegionEntry refCountEntry);
+
+  Object getDisplayName();
+
+  Object basicGetEntryUserAttribute(Object key);
+
+  boolean requiresReliabilityCheck();
+
+  boolean lockGII();
+
+  void unlockGII();
+
+  boolean hasSeenEvent(EventID eventID);
+
+  void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event,
+      boolean needTokensForGII, Operation op, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, boolean isOriginRemote, TXEntryState txEntryState,
+      VersionTag versionTag, long tailKey);
+
+
+  void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
+      TransactionId transactionId, TXRmtEvent event, boolean localOp, EventID eventId,
+      Object aCallbackArgument, List<EntryEventImpl> pendingCallbacks,
+      FilterRoutingInfo filterRoutingInfo, ClientProxyMembershipID bridgeContext,
+      TXEntryState txEntryState, VersionTag versionTag, long tailKey);
+
+  void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
+      TransactionId transactionId, TXRmtEvent event, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag,
+      long tailKey);
+
+  void handleReliableDistribution(Set successfulRecipients);
+
+  StoppableCountDownLatch getInitializationLatchBeforeGetInitialImage();
+
+  StoppableCountDownLatch getInitializationLatchAfterGetInitialImage();
+
+  boolean mapDestroy(EntryEventImpl event, boolean cacheWrite, boolean b, Object expectedOldValue);
+
+  boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld, Object expectedOldValue,
+      boolean requireOldValue, long lastModified, boolean overwriteDestroyed);
+
+  long postPutAllSend(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts);
+
+  void postPutAllFireEvents(DistributedPutAllOperation putallOp,
+      VersionedObjectList successfulPuts);
+
+  long postRemoveAllSend(DistributedRemoveAllOperation op, VersionedObjectList successfulOps);
+
+  void postRemoveAllFireEvents(DistributedRemoveAllOperation op, VersionedObjectList successfulOps);
+
+  VersionTag findVersionTagForEvent(EventID eventId);
+
+  Object getIMSync();
+
+  IndexManager setIndexManager(IndexManager idxMgr);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS39 INS42 INS44 INS43 INS42 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS39 INS42 INS43 INS42 INS44 INS39 INS42 INS39 INS42 INS44 INS43 INS42 INS39 INS42 INS44 INS43 INS42 INS43 INS42 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS43 INS42 INS39 INS42 INS44 INS43 INS42 INS44 INS43 INS42 INS44 INS43 INS42 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS43 INS42 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS43 INS42 INS44 INS39 INS42 INS39 INS42 INS44 INS39 INS42 INS39 INS42 INS39 INS42 INS44 INS43 INS42 INS43 INS42 INS44 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS43 INS42 INS43 INS42 INS39 INS42 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS44 INS44 INS39 INS42 INS44 INS44 INS39 INS42 INS44 INS44 INS39 INS42 INS44 INS44 INS43 INS42 INS44 INS43 INS42 INS43 INS42 INS44 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 UPD66 INS42 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42