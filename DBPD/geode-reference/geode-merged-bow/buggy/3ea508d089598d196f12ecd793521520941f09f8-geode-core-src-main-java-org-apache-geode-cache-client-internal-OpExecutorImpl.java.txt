GEODE-6580: Cleanup static analyzer warnings. (#3432)


+
-import java.io.EOFException;
-import java.net.ConnectException;
-  private final ThreadLocal<Boolean> serverAffinity = new ThreadLocal<Boolean>() {
-    @Override
-    protected Boolean initialValue() {
-      return Boolean.FALSE;
-    };
-  };
+  private final ThreadLocal<Boolean> serverAffinity = ThreadLocal.withInitial(() -> Boolean.FALSE);
-  private final ThreadLocal<ServerLocation> affinityServerLocation =
-      new ThreadLocal<ServerLocation>();
+  private final ThreadLocal<ServerLocation> affinityServerLocation = new ThreadLocal<>();
-  private final ThreadLocal<Integer> affinityRetryCount = new ThreadLocal<Integer>() {
-    @Override
-    protected Integer initialValue() {
-      return 0;
-    };
-  };
+  private final ThreadLocal<Integer> affinityRetryCount = ThreadLocal.withInitial(() -> 0);
-  public OpExecutorImpl(ConnectionManager manager, QueueManager queueManager,
+  public OpExecutorImpl(ConnectionManager connectionManager, QueueManager queueManager,
-    this.connectionManager = manager;
+    this.connectionManager = connectionManager;
-    if (this.serverAffinity.get()) {
-      ServerLocation loc = this.affinityServerLocation.get();
+    if (serverAffinity.get()) {
+      ServerLocation loc = affinityServerLocation.get();
-        this.affinityServerLocation.set(loc);
+        affinityServerLocation.set(loc);
-          logger.debug("setting server affinity to {}", this.affinityServerLocation.get());
+          logger.debug("setting server affinity to {}", affinityServerLocation.get());
-    boolean success = false;
-          Object result = executeWithPossibleReAuthentication(conn, op);
-          success = true;
-          return result;
+          return executeWithPossibleReAuthentication(conn, op);
-        if (!this.serverAffinityFailover || e instanceof ServerOperationException) {
+        if (!serverAffinityFailover || e instanceof ServerOperationException) {
-      this.affinityServerLocation.set(null);
+      affinityServerLocation.set(null);
-      TXFailoverOp.execute(this.pool, transactionId);
+      TXFailoverOp.execute(pool, transactionId);
-        op = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
-            (byte) 1/* isReExecute */, new HashSet<String>());
+        op = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op, (byte) 1,
+            new HashSet<>());
-      return this.pool.execute(op);
+      return pool.execute(op);
-    this.serverAffinityFailover = allowFailover;
-    this.serverAffinity.set(Boolean.TRUE);
+    serverAffinityFailover = allowFailover;
+    serverAffinity.set(Boolean.TRUE);
-    this.serverAffinity.set(Boolean.FALSE);
-    this.affinityServerLocation.set(null);
+    serverAffinity.set(Boolean.FALSE);
+    affinityServerLocation.set(null);
-    return this.affinityServerLocation.get();
+    return affinityServerLocation.get();
-    assert this.affinityServerLocation.get() == null;
-    this.affinityServerLocation.set(serverLocation);
+    assert affinityServerLocation.get() == null;
+    affinityServerLocation.set(serverLocation);
-      this.connectionManager.returnConnection(conn);
+      connectionManager.returnConnection(conn);
-    if (this.serverAffinity.get()) {
-      ServerLocation affinityserver = this.affinityServerLocation.get();
+    if (serverAffinity.get()) {
+      ServerLocation affinityserver = affinityServerLocation.get();
-        this.affinityServerLocation.set(server);
+        affinityServerLocation.set(server);
-    ServerLocation server = p_server;
-      if (this.queueManager != null) {
+      if (queueManager != null) {
-        Endpoint ep = (Endpoint) this.endpointManager.getEndpointMap().get(server);
+        Endpoint ep = endpointManager.getEndpointMap().get(p_server);
-          QueueConnections qcs = this.queueManager.getAllConnectionsNoWait();
+          QueueConnections qcs = queueManager.getAllConnectionsNoWait();
-      conn = connectionManager.borrowConnection(server, serverTimeout, onlyUseExistingCnx);
+      conn = connectionManager.borrowConnection(p_server, serverTimeout, onlyUseExistingCnx);
-    boolean success = true;
-      success = false;
-      if (this.serverAffinity.get() && this.affinityServerLocation.get() == null) {
+      if (serverAffinity.get() && affinityServerLocation.get() == null) {
-        this.affinityServerLocation.set(conn.getServer());
+        affinityServerLocation.set(conn.getServer());
-    HashSet attemptedPrimaries = new HashSet();
+    HashSet<ServerLocation> attemptedPrimaries = new HashSet<>();
-    List backups = connections.getBackups();
-    for (int i = 0; i < backups.size(); i++) {
-      Connection conn = (Connection) backups.get(i);
+    List<Connection> backups = connections.getBackups();
+    for (Connection conn : backups) {
-    HashSet attemptedPrimaries = new HashSet();
+    HashSet<ServerLocation> attemptedPrimaries = new HashSet<>();
-      if ((t instanceof ConnectException) || (t instanceof SocketException)
-          || (t instanceof SocketTimeoutException) || (t instanceof IOException)
+      if ((t instanceof IOException)
-        final StringBuffer sb = getExceptionMessage(title, retryCount, finalAttempt, conn, e);
+        final StringBuffer sb = getExceptionMessage(title, retryCount, finalAttempt, conn);
-      boolean finalAttempt, Connection connection, Throwable ex) {
+      boolean finalAttempt, Connection connection) {
-    if (this.pool == null) {
+    if (pool == null) {
-          (PoolImpl) PoolManagerImpl.getPMI().find(this.endpointManager.getPoolName());
+          (PoolImpl) PoolManagerImpl.getPMI().find(endpointManager.getPoolName());
-      this.pool = poolImpl;
+      pool = poolImpl;
-    if (this.pool.getMultiuserAuthentication()) {
+    if (pool.getMultiuserAuthentication()) {
-            authenticateMultiuser(this.pool, conn, ua);
+            authenticateMultiuser(pool, conn, ua);
-        } else {
-          // This should never be reached.
-        conn.getServer().setUserId((Long) AuthenticateUserOp.executeOn(connImpl, this.pool));
+        conn.getServer().setUserId((Long) AuthenticateUserOp.executeOn(connImpl, pool));
-      if (cause instanceof SocketException || cause instanceof EOFException
-          || cause instanceof IOException || cause instanceof BufferUnderflowException
+      if (cause instanceof IOException || cause instanceof BufferUnderflowException
-              && (sce.getMessage().indexOf("Could not create a new connection to server") != -1
-                  || sce.getMessage().indexOf("socket timed out on client") != -1
-                  || sce.getMessage().indexOf("connection was asynchronously destroyed") != -1))) {
+              && (sce.getMessage().contains("Could not create a new connection to server")
+                  || sce.getMessage().contains("socket timed out on client")
+                  || sce.getMessage().contains("connection was asynchronously destroyed")))) {
-            (PoolImpl) PoolManagerImpl.getPMI().find(this.endpointManager.getPoolName());
+            (PoolImpl) PoolManagerImpl.getPMI().find(endpointManager.getPoolName());

INS32 INS32 UPD42 INS70 INS42 INS42 INS86 UPD74 INS42 INS42 INS86 INS74 INS74 INS44 INS42 MOV8 INS74 INS40 INS34 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS43 MOV43 INS43 INS42 MOV43 INS43 INS42 INS42 INS42 INS42 INS74 MOV42 INS42 INS42 INS74 MOV43 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 UPD27 MOV27 INS42 INS42 UPD42 INS42 MOV43 MOV62 MOV62 MOV62 INS42 INS42 INS32 INS42 INS42 UPD27 MOV27 MOV43 MOV32 MOV32 MOV42 UPD42 MOV42 INS42 MOV27 INS36 INS42 UPD74 INS42 UPD27 MOV27 MOV43 INS42 INS42 INS42 INS32 INS32 INS42 MOV32 INS42 INS45 MOV32 INS42 INS45 UPD42 UPD45 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL34 DEL41 DEL8 DEL31 DEL1 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL32 DEL11 DEL52 DEL42 DEL22 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL34 DEL38 DEL42 DEL45 DEL32 DEL34 DEL38 DEL27 DEL42 DEL45 DEL32 DEL34 DEL38 DEL27 DEL27 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL36 DEL27 DEL52 DEL42 DEL22