GEODE-7088: Using ConcurrentSets for interested clients


+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.internal.concurrent.ConcurrentHashSet;
-  /*
-   * private void writeCqInfo(ObjectOutput out) throws IOException { // Write Client CQ Size
-   * out.writeInt(this._clientCqs.size()); // For each client. Iterator entries =
-   * this._clientCqs.entrySet().iterator(); while (entries.hasNext()) { Map.Entry entry =
-   * (Map.Entry)entries.next();
-   *
-   * // Write ProxyId. ClientProxyMembershipID proxyId = (ClientProxyMembershipID)entry.getKey();
-   * proxyId.toData(out);
-   *
-   * HashMap cqs = (HashMap)entry.getValue(); // Write CQ size for each Client.
-   * out.writeInt(cqs.size()); Iterator clients = cqs.entrySet().iterator(); while
-   * (clients.hasNext()) { Map.Entry client = (Map.Entry)clients.next(); // Write CQ Name. String cq
-   * = (String)client.getKey(); out.writeObject(cq); // Write CQ OP. int cqOp =
-   * ((Integer)client.getValue()).intValue(); out.writeInt(cqOp); } } // while }
-   */
-
-  /*
-   * private void readCqInfo(ObjectInput in) throws IOException, ClassNotFoundException { // Read
-   * Client CQ Size int numClientIds = in.readInt(); this._clientCqs = new HashMap();
-   *
-   * // For each Client. for (int cCnt=0; cCnt < numClientIds; cCnt++){ ClientProxyMembershipID
-   * proxyId = new ClientProxyMembershipID();
-   *
-   * // Read Proxy id. proxyId.fromData(in); // read CQ size for each Client. int numCqs =
-   * in.readInt(); HashMap cqs = new HashMap();
-   *
-   * for (int cqCnt=0; cqCnt < numCqs; cqCnt++){ // Get CQ Name and CQ Op. // Read CQ Name. String
-   * cqName = (String)in.readObject(); int cqOp = in.readInt();
-   *
-   * // Read CQ Op. cqs.put(cqName, Integer.valueOf(cqOp)); } this._clientCqs.put(proxyId, cqs); } }
-   */
-
-  public void addClientInterestList(Set clientIds, boolean receiveValues) {
+  void addClientInterestList(Set<ClientProxyMembershipID> clientIds, boolean receiveValues) {
-    HashSet<ClientProxyMembershipID> newInterests;
-        newInterests = new HashSet<ClientProxyMembershipID>();
-      } else {
-        newInterests = new HashSet<ClientProxyMembershipID>(this._clientInterestList);
+        this._clientInterestList = new ConcurrentHashSet<>();
-      newInterests.add(clientId);
-      this._clientInterestList = newInterests;
+      this._clientInterestList.add(clientId);
-        newInterests = new HashSet<ClientProxyMembershipID>();
-      } else {
-        newInterests = new HashSet<ClientProxyMembershipID>(this._clientInterestListInv);
+        this._clientInterestListInv = new ConcurrentHashSet<>();
-      newInterests.add(clientId);
-      this._clientInterestListInv = newInterests;
+      this._clientInterestListInv.add(clientId);
+  @VisibleForTesting
+  boolean hasClientsInterestedInUpdates() {
+    return this._clientInterestList != null;
+  }
+
+  @VisibleForTesting
+  boolean hasClientsInterestedInInvalidates() {
+    return this._clientInterestListInv != null;
+  }
+
-    // DataSerializer.writeObject(_eventIdentifier,out);
-    // if (_hasCqs) {
-    // DataSerializer.writeHashMap(this._clientCqs, out);
-    // }
-    DataSerializer.writeHashSet((HashSet) this._clientInterestList, out);
-    DataSerializer.writeHashSet((HashSet) this._clientInterestListInv, out);
+
+    HashSet<ClientProxyMembershipID> clientInterestListSnapshot =
+        this._clientInterestList != null
+            ? new HashSet<>(this._clientInterestList)
+            : null;
+    DataSerializer.writeHashSet(clientInterestListSnapshot, out);
+
+    HashSet<ClientProxyMembershipID> clientInterestListInvSnapshot =
+        this._clientInterestListInv != null
+            ? new HashSet<>(this._clientInterestListInv)
+            : null;
+    DataSerializer.writeHashSet(clientInterestListInvSnapshot, out);
+
-    // this._eventIdentifier = (EventID)DataSerializer.readObject(in);;
-
-    // if (this._hasCqs) {
-    // this._clientCqs = DataSerializer.readHashMap(in);
-    // }
-    HashSet ids = DataSerializer.readHashSet(in);
+    Set<ClientProxyMembershipID> clientInterestList = DataSerializer.readHashSet(in);
+    this._clientInterestList = ccn != null && clientInterestList != null
+        ? ccn.getProxyIDs(clientInterestList)
+        : null;
-    if (ccn != null && ids != null) { // use canonical IDs in servers
-      ids = (HashSet) ccn.getProxyIDs(ids);
-    }
-    this._clientInterestList = ids;
+    Set<ClientProxyMembershipID> clientInterestListInv = DataSerializer.readHashSet(in);
+    this._clientInterestListInv = ccn != null && clientInterestListInv != null
+        ? ccn.getProxyIDs(clientInterestListInv)
+        : null;
-    ids = DataSerializer.readHashSet(in);
-    if (ccn != null && ids != null) {
-      ids = (HashSet) ccn.getProxyIDs(ids);
-    }
-    this._clientInterestListInv = ids;
-
-    this.versionTag = (VersionTag) DataSerializer.readObject(in);
+    this.versionTag = DataSerializer.readObject(in);

INS26 INS26 INS40 INS40 INS31 INS31 INS31 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS78 INS39 INS42 INS8 INS78 INS39 INS42 INS8 MOV60 INS74 INS25 INS42 INS41 INS42 INS41 INS60 INS60 INS60 MOV21 MOV43 INS43 MOV42 INS8 INS8 INS27 INS27 MOV74 INS59 MOV74 INS59 INS74 INS59 INS74 INS42 INS25 MOV21 INS25 MOV21 INS22 INS33 INS22 INS33 INS42 INS16 INS42 INS42 INS16 INS42 INS43 INS43 INS42 MOV32 INS16 INS43 INS43 UPD42 MOV22 INS16 MOV32 MOV27 MOV8 INS32 MOV27 MOV8 INS32 INS52 INS42 INS52 INS42 INS27 INS14 INS33 INS27 INS14 INS33 UPD42 MOV42 INS42 MOV27 INS32 INS33 UPD42 MOV42 INS42 MOV27 INS32 INS33 MOV22 INS42 INS42 MOV22 INS42 INS42 INS22 INS33 INS74 MOV22 INS22 INS33 INS74 MOV22 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS52 INS42 MOV43 INS52 INS42 MOV43 UPD42 UPD42 MOV22 MOV22 UPD74 UPD74 UPD43 UPD43 UPD42 UPD42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL7 DEL42 DEL42 DEL43 DEL42 DEL7 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL11 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42 DEL43 DEL11