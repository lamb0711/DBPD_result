Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PDXCommands extends AbstractCommandsSupport{
+public class PDXCommands extends AbstractCommandsSupport {
-  @CliCommand (value = CliStrings.CONFIGURE_PDX, help = CliStrings.CONFIGURE_PDX__HELP)
-  @CliMetaData (relatedTopic = CliStrings.TOPIC_GEODE_REGION, writesToSharedConfiguration = true)
-  @ResourceOperation( resource= Resource.DATA, operation = Operation.MANAGE)
-  public Result configurePDX(
-      @CliOption (key = CliStrings.CONFIGURE_PDX__READ__SERIALIZED,
+  @CliCommand(value = CliStrings.CONFIGURE_PDX, help = CliStrings.CONFIGURE_PDX__HELP)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION, writesToSharedConfiguration = true)
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  public Result configurePDX(@CliOption(key = CliStrings.CONFIGURE_PDX__READ__SERIALIZED,
-      help = CliStrings.CONFIGURE_PDX__READ__SERIALIZED__HELP) 
-      Boolean readSerialized,
+      help = CliStrings.CONFIGURE_PDX__READ__SERIALIZED__HELP) Boolean readSerialized,
-      @CliOption (key = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS__HELP) 
-      Boolean ignoreUnreadFields,
+      @CliOption(key = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS__HELP) Boolean ignoreUnreadFields,
-      @CliOption (key = CliStrings.CONFIGURE_PDX__DISKSTORE,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      specifiedDefaultValue = "",
-      help = CliStrings.CONFIGURE_PDX__DISKSTORE__HELP)
-      String diskStore, 
+      @CliOption(key = CliStrings.CONFIGURE_PDX__DISKSTORE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, specifiedDefaultValue = "",
+          help = CliStrings.CONFIGURE_PDX__DISKSTORE__HELP) String diskStore,
-      @CliMetaData (valueSeparator = ",")
-      @CliOption (key = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      specifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP)
-      String[] patterns,
+      @CliMetaData(valueSeparator = ",") @CliOption(
+          key = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          specifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP) String[] patterns,
-      @CliMetaData (valueSeparator = ",")
-      @CliOption (key = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      specifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP)
-      String[] portablePatterns){
+      @CliMetaData(valueSeparator = ",") @CliOption(
+          key = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          specifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP) String[] portablePatterns) {
-      InfoResultData ird  = ResultBuilder.createInfoResultData();
+      InfoResultData ird = ResultBuilder.createInfoResultData();
-      if ((portablePatterns != null && portablePatterns.length > 0) && (patterns != null && patterns.length > 0)) {
+      if ((portablePatterns != null && portablePatterns.length > 0)
+          && (patterns != null && patterns.length > 0)) {
-      //Set persistent and the disk-store
+      // Set persistent and the disk-store
-      //Set read-serialized
+      // Set read-serialized
-      ird.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
+      ird.addLine(
+          CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
-      //Set ingoreUnreadFields
+      // Set ingoreUnreadFields
-      ird.addLine(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + cache.getPdxIgnoreUnreadFields());
+      ird.addLine(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = "
+          + cache.getPdxIgnoreUnreadFields());
-        ReflectionBasedAutoSerializer autoSerializer =  new ReflectionBasedAutoSerializer(portablePatterns);
+        ReflectionBasedAutoSerializer autoSerializer =
+            new ReflectionBasedAutoSerializer(portablePatterns);
-      } 
+      }
-      if (patterns!=null) {
-        ReflectionBasedAutoSerializer nonPortableAutoSerializer =  new ReflectionBasedAutoSerializer(true, patterns);
+      if (patterns != null) {
+        ReflectionBasedAutoSerializer nonPortableAutoSerializer =
+            new ReflectionBasedAutoSerializer(true, patterns);
-      XmlEntity xmlEntity = XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
+      XmlEntity xmlEntity =
+          XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
-  @CliCommand (value = CliStrings.PDX_RENAME, help = CliStrings.PDX_RENAME__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEODE_DISKSTORE})
+  @CliCommand(value = CliStrings.PDX_RENAME, help = CliStrings.PDX_RENAME__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = {CliStrings.TOPIC_GEODE_DISKSTORE})
-  public Result pdxRename(
-      @CliOption (key = CliStrings.PDX_RENAME_OLD,
-      mandatory=true,
-      help = CliStrings.PDX_RENAME_OLD__HELP) 
-      String oldClassName,
+  public Result pdxRename(@CliOption(key = CliStrings.PDX_RENAME_OLD, mandatory = true,
+      help = CliStrings.PDX_RENAME_OLD__HELP) String oldClassName,
-      @CliOption (key = CliStrings.PDX_RENAME_NEW,
-      mandatory=true,
-      help = CliStrings.PDX_RENAME_NEW__HELP) 
-      String newClassName,
+      @CliOption(key = CliStrings.PDX_RENAME_NEW, mandatory = true,
+          help = CliStrings.PDX_RENAME_NEW__HELP) String newClassName,
-      @CliOption (key = CliStrings.PDX_DISKSTORE,
-      mandatory=true,
-      help = CliStrings.PDX_DISKSTORE__HELP)
-      String diskStore, 
+      @CliOption(key = CliStrings.PDX_DISKSTORE, mandatory = true,
+          help = CliStrings.PDX_DISKSTORE__HELP) String diskStore,
-      @CliOption (key = CliStrings.PDX_DISKDIR,
-      mandatory=true,
-      help = CliStrings.PDX_DISKDIR__HELP)
-      @CliMetaData (valueSeparator = ",")
-      String[] diskDirs){
-    
+      @CliOption(key = CliStrings.PDX_DISKDIR, mandatory = true,
+          help = CliStrings.PDX_DISKDIR__HELP) @CliMetaData(
+              valueSeparator = ",") String[] diskDirs) {
+
-      
-      Collection<Object> results = DiskStoreImpl.pdxRename(diskStore, dirs, oldClassName, newClassName);
-      
-      if(results.isEmpty()) {
-        return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.PDX_RENAME__EMPTY));
+
+      Collection<Object> results =
+          DiskStoreImpl.pdxRename(diskStore, dirs, oldClassName, newClassName);
+
+      if (results.isEmpty()) {
+        return ResultBuilder
+            .createGemFireErrorResult(CliStrings.format(CliStrings.PDX_RENAME__EMPTY));
-      
+
-      for(Object p : results) {
-        if(p instanceof PdxType) {
-          ((PdxType)p).toStream(printStream, false);
+      for (Object p : results) {
+        if (p instanceof PdxType) {
+          ((PdxType) p).toStream(printStream, false);
-          ((EnumInfo)p).toStream(printStream);
+          ((EnumInfo) p).toStream(printStream);
-      String resultString = CliStrings.format(CliStrings.PDX_RENAME__SUCCESS, outputStream.toString());
+      String resultString =
+          CliStrings.format(CliStrings.PDX_RENAME__SUCCESS, outputStream.toString());
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.PDX_RENAME__ERROR, e.getMessage()));
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.PDX_RENAME__ERROR, e.getMessage()));
-    
+

