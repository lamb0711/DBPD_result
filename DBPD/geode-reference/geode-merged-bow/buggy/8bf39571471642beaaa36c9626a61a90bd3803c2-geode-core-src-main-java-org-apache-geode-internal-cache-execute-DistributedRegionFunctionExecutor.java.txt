Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * For DistributedRegions with DataPolicy.NORMAL, it throws
- * UnsupportedOperationException. <br>
- * For DistributedRegions with DataPolicy.EMPTY, execute the function on any
- * random member which has DataPolicy.REPLICATE <br>
- * For DistributedRegions with DataPolicy.REPLICATE, execute the function
- * locally.
+ * For DistributedRegions with DataPolicy.NORMAL, it throws UnsupportedOperationException. <br>
+ * For DistributedRegions with DataPolicy.EMPTY, execute the function on any random member which has
+ * DataPolicy.REPLICATE <br>
+ * For DistributedRegions with DataPolicy.REPLICATE, execute the function locally.
-    this.region = (LocalRegion)r;
+    this.region = (LocalRegion) r;
-  private DistributedRegionFunctionExecutor(
-      DistributedRegionFunctionExecutor drfe) {
+  private DistributedRegionFunctionExecutor(DistributedRegionFunctionExecutor drfe) {
-    }
-    else if (memberMappedArg != null) {
+    } else if (memberMappedArg != null) {
-  
+
-    
+
-    
+
-    
+
-      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor,
-      ResultCollector rs) {    super(distributedRegionFunctionExecutor);
-      
-      this.region = distributedRegionFunctionExecutor.getRegion();
-      this.filter.clear();
-      this.filter.addAll(distributedRegionFunctionExecutor.filter);
-      this.sender = distributedRegionFunctionExecutor.getServerResultSender();
-      
-      this.rc = rs;
-  }
-
-  private DistributedRegionFunctionExecutor(
-      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor,
-      Object args) {
+      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor, ResultCollector rs) {
-    
+
-    
+
+    this.rc = rs;
+  }
+
+  private DistributedRegionFunctionExecutor(
+      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor, Object args) {
+    super(distributedRegionFunctionExecutor);
+
+    this.region = distributedRegionFunctionExecutor.getRegion();
+    this.filter.clear();
+    this.filter.addAll(distributedRegionFunctionExecutor.filter);
+    this.sender = distributedRegionFunctionExecutor.getServerResultSender();
+
-  
+
-      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor,
-      Set filter2) {
+      DistributedRegionFunctionExecutor distributedRegionFunctionExecutor, Set filter2) {
-    
+
-    
+
-  
-  private DistributedRegionFunctionExecutor(
-      DistributedRegionFunctionExecutor drfe, boolean isReExecute) {
+
+  private DistributedRegionFunctionExecutor(DistributedRegionFunctionExecutor drfe,
+      boolean isReExecute) {
-  
-  public ResultCollector execute(String functionName, boolean hasResult)
-      throws FunctionException {
+
+  public ResultCollector execute(String functionName, boolean hasResult) throws FunctionException {
-    byte registeredFunctionState = AbstractExecution.getFunctionState(
-        functionObject.isHA(), functionObject.hasResult(), functionObject
-            .optimizeForWrite());
+    byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
+        functionObject.hasResult(), functionObject.optimizeForWrite());
-    byte functionState = AbstractExecution.getFunctionState(hasResult,
-        hasResult, false);
+    byte functionState = AbstractExecution.getFunctionState(hasResult, hasResult, false);
-  public ResultCollector execute(String functionName, boolean hasResult,
-      boolean isHA) throws FunctionException {
+  public ResultCollector execute(String functionName, boolean hasResult, boolean isHA)
+      throws FunctionException {
-          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH
-              .toLocalizedString());
+          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-    byte registeredFunctionState = AbstractExecution.getFunctionState(
-        functionObject.isHA(), functionObject.hasResult(), functionObject
-            .optimizeForWrite());
+    byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
+        functionObject.hasResult(), functionObject.optimizeForWrite());
-    byte functionState = AbstractExecution.getFunctionState(isHA, hasResult,
-        false);
+    byte functionState = AbstractExecution.getFunctionState(isHA, hasResult, false);
-  public ResultCollector execute(String functionName, boolean hasResult,
-      boolean isHA, boolean isOptimizeForWrite) throws FunctionException {
+  public ResultCollector execute(String functionName, boolean hasResult, boolean isHA,
+      boolean isOptimizeForWrite) throws FunctionException {
-          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH
-              .toLocalizedString());
+          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-    byte registeredFunctionState = AbstractExecution.getFunctionState(
-        functionObject.isHA(), functionObject.hasResult(), functionObject
-            .optimizeForWrite());
+    byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
+        functionObject.hasResult(), functionObject.optimizeForWrite());
-    byte functionState = AbstractExecution.getFunctionState(isHA, hasResult,
-        isOptimizeForWrite);
+    byte functionState = AbstractExecution.getFunctionState(isHA, hasResult, isOptimizeForWrite);
-  public ResultCollector execute(final Function function){
+  public ResultCollector execute(final Function function) {
-          .toLocalizedString("function instance"));
+              .toLocalizedString("function instance"));
-          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH
-              .toLocalizedString());
+          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-      throw new FunctionException(LocalizedStrings.ExecuteFunction_THE_FUNCTION_GET_ID_RETURNED_NULL.toLocalizedString());
+      throw new FunctionException(
+          LocalizedStrings.ExecuteFunction_THE_FUNCTION_GET_ID_RETURNED_NULL.toLocalizedString());
-  protected ResultCollector executeFunction(Function function){
+  protected ResultCollector executeFunction(Function function) {
-        return this.region.executeFunction(this,function, args, defaultCollector,
-            this.filter, this.sender);
-      }
-      else { // Custome Result COllector
-        return this.region.executeFunction(this, function, args, rc, this.filter,
+        return this.region.executeFunction(this, function, args, defaultCollector, this.filter,
+      } else { // Custome Result COllector
+        return this.region.executeFunction(this, function, args, rc, this.filter, this.sender);
-    }
-    else { // No results
-      this.region.executeFunction(this,function, args, null, this.filter,
-          this.sender);
+    } else { // No results
+      this.region.executeFunction(this, function, args, null, this.filter, this.sender);
-    
-    return new DistributedRegionFunctionExecutor(this,filter);
+
+    return new DistributedRegionFunctionExecutor(this, filter);
-  
+
-    if(bucketIDs != null && !bucketIDs.isEmpty()) {
+    if (bucketIDs != null && !bucketIDs.isEmpty()) {
-          LocalizedStrings.ExecuteRegionFunction_BUCKET_FILTER_ON_NON_PR.toLocalizedString(region.getName()));      
+          LocalizedStrings.ExecuteRegionFunction_BUCKET_FILTER_ON_NON_PR
+              .toLocalizedString(region.getName()));
+
-    return new DistributedRegionFunctionExecutor(this, args); 
+    return new DistributedRegionFunctionExecutor(this, args);
-    return new DistributedRegionFunctionExecutor(this,rs);
+    return new DistributedRegionFunctionExecutor(this, rs);
-  public InternalExecution withMemberMappedArgument(
-      MemberMappedArgument argument) {
+  public InternalExecution withMemberMappedArgument(MemberMappedArgument argument) {
-          .toLocalizedString("MemberMappedArgument"));
+              .toLocalizedString("MemberMappedArgument"));
-    return new DistributedRegionFunctionExecutor(this,argument);
+    return new DistributedRegionFunctionExecutor(this, argument);
-  
+
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.execute.AbstractExecution#validateExecution(org.apache.geode.cache.execute.Function, java.util.Set)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.execute.AbstractExecution#validateExecution(org.apache.geode.
+   * cache.execute.Function, java.util.Set)
-        throw new TransactionException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE
-            .toLocalizedString());
+        throw new TransactionException(
+            LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE
+                .toLocalizedString());
-        DistributedMember funcTarget = (DistributedMember)targetMembers.iterator().next();
+        DistributedMember funcTarget = (DistributedMember) targetMembers.iterator().next();
-          throw new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED_0_1
-              .toLocalizedString(new Object[] {target,funcTarget}));
+          throw new TransactionDataNotColocatedException(
+              LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED_0_1
+                  .toLocalizedString(new Object[] {target, funcTarget}));
-        throw new LowMemoryException(LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1.toLocalizedString(
-            new Object[] {function.getId(), htrm}), htrm);
+        throw new LowMemoryException(
+            LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+                .toLocalizedString(new Object[] {function.getId(), htrm}),
+            htrm);

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66