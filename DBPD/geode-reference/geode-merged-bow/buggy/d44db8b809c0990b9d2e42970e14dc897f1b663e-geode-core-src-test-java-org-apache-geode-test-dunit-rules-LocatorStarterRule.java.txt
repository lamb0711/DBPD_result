GEODE-2395: use random ports when starting the jmx manager and http services

* be able to configure the various aspects of the rules before starting the server when declaring the rules.
* delete the unnecessary abstract test classes
* allowing tests to use default ports if needed
* created HttpClientRule to ease the connection to to pulse server

-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;
-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;
-import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;
-import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.NAME;
+import org.apache.geode.distributed.internal.DistributionConfig;
-import java.util.Properties;
-public class LocatorStarterRule extends MemberStarterRule implements Locator {
+public class LocatorStarterRule extends MemberStarterRule<LocatorStarterRule> implements Locator {
-    this.workingDir = workingDir.getAbsoluteFile();
+    super(workingDir);
-    return startLocator(new Properties());
-  }
-
-  public LocatorStarterRule startLocator(Properties properties) {
-    if (properties == null)
-      properties = new Properties();
-    if (!properties.containsKey(NAME)) {
-      properties.setProperty(NAME, "locator");
+    normalizeProperties();
+    // start locator will start a jmx manager by default, if withJmxManager is not called explicitly
+    // the tests will use random ports by default.
+    if (jmxPort < 0) {
+      withJMXManager();
-    name = properties.getProperty(NAME);
-    if (!properties.containsKey(LOG_FILE)) {
-      properties.setProperty(LOG_FILE, new File(name + ".log").getAbsolutePath());
-    }
-
-    if (!properties.containsKey(MCAST_PORT)) {
-      properties.setProperty(MCAST_PORT, "0");
-    }
-    if (properties.containsKey(JMX_MANAGER_PORT)) {
-      jmxPort = Integer.parseInt(properties.getProperty(JMX_MANAGER_PORT));
-      if (jmxPort > 0) {
-        if (!properties.containsKey(JMX_MANAGER)) {
-          properties.put(JMX_MANAGER, "true");
-        }
-        if (!properties.containsKey(JMX_MANAGER_START)) {
-          properties.put(JMX_MANAGER_START, "true");
-        }
-      }
-    }
+      // this will start a jmx manager and admin rest service by default
+    DistributionConfig config = locator.getConfig();
+    jmxPort = config.getJmxManagerPort();
+    httpPort = config.getHttpServicePort();
-    if (locator.getConfig().getEnableClusterConfiguration()) {
+    if (config.getEnableClusterConfiguration()) {

MOV26 UPD40 INS74 MOV43 MOV43 INS46 INS21 INS60 MOV21 INS21 INS42 INS32 INS27 INS43 INS59 INS7 INS42 INS42 INS34 UPD42 MOV42 INS42 MOV32 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32