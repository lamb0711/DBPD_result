GEODE-1377: Initial move of system properties from private to public

-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.PrintStream;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.distributed.internal.InternalLocator;
+import com.gemstone.gemfire.internal.FileUtil;
+import org.apache.commons.io.FileUtils;
+
+import java.io.*;
-import com.gemstone.gemfire.distributed.internal.InternalLocator;
-import org.apache.commons.io.FileUtils;
-
-import com.gemstone.gemfire.internal.FileUtil;
-import com.gemstone.gemfire.internal.logging.LogService;
-
-  
+
-    if(processes.containsKey(vmNum)) {
+    if (processes.containsKey(vmNum)) {
-    
+
-    } catch(IOException e) {
+    } catch (IOException e) {
-      System.err.println("Unable to delete " + workingDir + ". Currently contains " 
-                          + Arrays.asList(workingDir.list()));
+      System.err.println("Unable to delete " + workingDir + ". Currently contains "
+          + Arrays.asList(workingDir.list()));
-    
+
-  
+
-    for(ProcessHolder process : processes.values()) {
-      if(process != null) {
+    for (ProcessHolder process : processes.values()) {
+      if (process != null) {
-  
+
-    for(ProcessHolder process : processes.values()) {
-      if(process != null && process.isAlive()) {
+    for (ProcessHolder process : processes.values()) {
+      if (process != null && process.isAlive()) {
-  
+
-    if(!processes.containsKey(vmNum)) {
+    if (!processes.containsKey(vmNum)) {
-   
+
-        String vmName = (vmNum==-2)? "[locator]" : "[vm_"+vmNum+"]";
+        String vmName = (vmNum == -2) ? "[locator]" : "[vm_" + vmNum + "]";
-          while(line != null) {
+          while (line != null) {
-        } catch(Exception e) {
-          if(!holder.isKilled()) {
+        } catch (Exception e) {
+          if (!holder.isKilled()) {
-    String cmd = System.getProperty( "java.home" ) + File.separator + "bin" + File.separator + "java";
+    String cmd = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
-    cmds.add("-classpath"); 
+    cmds.add("-classpath");
-    if (DUnitLauncher.LOG4J!=null) {
-      cmds.add("-Dlog4j.configurationFile="+DUnitLauncher.LOG4J);
+    if (DUnitLauncher.LOG4J != null) {
+      cmds.add("-Dlog4j.configurationFile=" + DUnitLauncher.LOG4J);
-    cmds.add("-Dgemfire.DEFAULT_MAX_OPLOG_SIZE=10");
-    cmds.add("-Dgemfire.disallowMcastDefaults=true");
+    cmds.add("-D" + DistributionConfig.GEMFIRE_PREFIX + "DEFAULT_MAX_OPLOG_SIZE=10");
+    cmds.add("-D" + DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults=true");
-    
+
-  
+
-      for(String arg: runtimeBean.getInputArguments()) {
-        if(arg.contains("-javaagent:")) {
+      for (String arg : runtimeBean.getInputArguments()) {
+        if (arg.contains("-javaagent:")) {
-    
+
-  
+
-    while(pendingVMs > 0) {
+    while (pendingVMs > 0) {
-      if(remaining <= 0) {
+      if (remaining <= 0) {
-    
+
-  
+
-    
+
-      
+
-    
+

MOV26 MOV26 MOV26 UPD40 UPD40 INS27 INS27 INS45 INS40 INS45 INS45 INS40 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL45