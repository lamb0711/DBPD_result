Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class DataCommandResult implements /*Data*/ Serializable{
+public class DataCommandResult implements /* Data */ Serializable {
-  
-  public static final String QUERY_PAGE_START ="startCount";
-  public static final String QUERY_PAGE_END ="endCount";
-  public static final String QUERY_TRACE ="Query Trace";
-  
+
+  public static final String QUERY_PAGE_START = "startCount";
+  public static final String QUERY_PAGE_END = "endCount";
+  public static final String QUERY_TRACE = "Query Trace";
+
-  //Aggreagated Data.
+  // Aggreagated Data.
-  
+
-  private boolean operationCompletedSuccessfully; //used for validation purposes.
-  
-  
+  private boolean operationCompletedSuccessfully; // used for validation purposes.
+
+
-  
-  public String toString(){
+
+  public String toString() {
-    if(isGet()){
+    if (isGet()) {
-      if(getResult!=null)
+      if (getResult != null)
-    }else if(isPut()){
+    } else if (isPut()) {
-      if(putResult!=null)
+      if (putResult != null)
-      sb.append(" Value  : ").append(inputValue).append(NEW_LINE);      
-    }else if(isRemove()){
+      sb.append(" Value  : ").append(inputValue).append(NEW_LINE);
+    } else if (isRemove()) {
-      if(removeResult!=null)
+      if (removeResult != null)
-      sb.append(" ReturnValue  : ").append(removeResult).append(NEW_LINE);      
-    }else if(isLocateEntry()){
-      sb.append(" Type  : Locate Entry" );
+      sb.append(" ReturnValue  : ").append(removeResult).append(NEW_LINE);
+    } else if (isLocateEntry()) {
+      sb.append(" Type  : Locate Entry");
-      //Assume here that this is aggregated result
+      // Assume here that this is aggregated result
-    if(errorString!=null)
+    if (errorString != null)
-  
-  public boolean isGet(){
-    if(CliStrings.GET.equals(command))
+
+  public boolean isGet() {
+    if (CliStrings.GET.equals(command))
-    else return false;
-  }
-  
-  public boolean isPut(){
-    if(CliStrings.PUT.equals(command))
-      return true;
-    else return false;
-  }
-  
-  public boolean isRemove(){
-    if(CliStrings.REMOVE.equals(command))
-      return true;
-    else return false;
+    else
+      return false;
-  
-  public boolean isLocateEntry(){
-    if(CliStrings.LOCATE_ENTRY.equals(command))
+  public boolean isPut() {
+    if (CliStrings.PUT.equals(command))
-    else return false;
+    else
+      return false;
-  
-  public boolean isSelect(){
-    if(CliStrings.QUERY.equals(command))
+
+  public boolean isRemove() {
+    if (CliStrings.REMOVE.equals(command))
-    else return false;
+    else
+      return false;
-  
+
+
+  public boolean isLocateEntry() {
+    if (CliStrings.LOCATE_ENTRY.equals(command))
+      return true;
+    else
+      return false;
+  }
+
+  public boolean isSelect() {
+    if (CliStrings.QUERY.equals(command))
+      return true;
+    else
+      return false;
+  }
+
-  
-  
-  public static DataCommandResult createGetResult(Object inputKey, Object value, Throwable error, String errorString, boolean flag){
+
+
+  public static DataCommandResult createGetResult(Object inputKey, Object value, Throwable error,
+      String errorString, boolean flag) {
-    result.errorString = errorString;    
+    result.errorString = errorString;
-  
-  public static DataCommandResult createGetInfoResult(Object inputKey, Object value, Throwable error, String infoString, boolean flag){
+
+  public static DataCommandResult createGetInfoResult(Object inputKey, Object value,
+      Throwable error, String infoString, boolean flag) {
-  
-  public static DataCommandResult createLocateEntryResult(Object inputKey, KeyInfo locationResult, Throwable error, String errorString, boolean flag){
+
+  public static DataCommandResult createLocateEntryResult(Object inputKey, KeyInfo locationResult,
+      Throwable error, String errorString, boolean flag) {
-    
-    if(flag){
+
+    if (flag) {
-    
+
-    
+
-    result.errorString = errorString;    
+    result.errorString = errorString;
-  
-  public static DataCommandResult createLocateEntryInfoResult(Object inputKey, KeyInfo locationResult, Throwable error, String infoString, boolean flag){
+
+  public static DataCommandResult createLocateEntryInfoResult(Object inputKey,
+      KeyInfo locationResult, Throwable error, String infoString, boolean flag) {
-    
-    if(flag){
-      result.hasResultForAggregation = true;      
+
+    if (flag) {
+      result.hasResultForAggregation = true;
-    
+
-    
+
-  
-  public static DataCommandResult createPutResult(Object inputKey, Object value, Throwable error, String errorString, boolean flag){
+
+  public static DataCommandResult createPutResult(Object inputKey, Object value, Throwable error,
+      String errorString, boolean flag) {
-  
-  public static DataCommandResult createPutInfoResult(Object inputKey, Object value, Throwable error, String infoString, boolean flag){
+
+  public static DataCommandResult createPutInfoResult(Object inputKey, Object value,
+      Throwable error, String infoString, boolean flag) {
-  
-  public static DataCommandResult createRemoveResult(Object inputKey, Object value, Throwable error, String errorString, boolean flag){
+
+  public static DataCommandResult createRemoveResult(Object inputKey, Object value, Throwable error,
+      String errorString, boolean flag) {
-  
-  public static DataCommandResult createRemoveInfoResult(Object inputKey, Object value, Throwable error, String infoString, boolean flag){
+
+  public static DataCommandResult createRemoveInfoResult(Object inputKey, Object value,
+      Throwable error, String infoString, boolean flag) {
-  
-  public static DataCommandResult createSelectResult(Object inputQuery, List<SelectResultRow> value,String queryTraceString, Throwable error, String errorString, boolean flag){
+
+  public static DataCommandResult createSelectResult(Object inputQuery, List<SelectResultRow> value,
+      String queryTraceString, Throwable error, String errorString, boolean flag) {
-    //result.limit = limit;
+    // result.limit = limit;
-  
-  public static DataCommandResult createSelectInfoResult(Object inputQuery, List<SelectResultRow> value,int limit, Throwable error, String infoString, boolean flag){
+
+  public static DataCommandResult createSelectInfoResult(Object inputQuery,
+      List<SelectResultRow> value, int limit, Throwable error, String infoString, boolean flag) {
-  
-  
+
+
+
+
+
+
+
+
+
+
+
+
+
-  }  
+  }
-  }   
+  }
-  
+
-    
-    if(keyClass==null || keyClass.isEmpty())
+
+    if (keyClass == null || keyClass.isEmpty())
-    
-    if(valueClass==null || valueClass.isEmpty())
+
+    if (valueClass == null || valueClass.isEmpty())
-    
-    if(errorString!=null){
-      //return ResultBuilder.createGemFireErrorResult(errorString);
+
+    if (errorString != null) {
+      // return ResultBuilder.createGemFireErrorResult(errorString);
-    }
-    else{
+    } else {
-      
+
-      if(infoString!=null)
+      if (infoString != null)
-      
-      if(isGet()){
-        
-       section.addData("Key Class", getKeyClass());
-       if(!isDeclaredPrimitive(keyClass))
-         addJSONStringToTable(table,inputKey);
-       else
-         section.addData("Key", inputKey);
-      
-       section.addData("Value Class", getValueClass());
-       if(!isDeclaredPrimitive(valueClass))
-           addJSONStringToTable(table,getResult);
-       else
-          section.addData("Value", getResult);
-        
-        
-      }else if(isLocateEntry()){
-        
+
+      if (isGet()) {
+
-        if(!isDeclaredPrimitive(keyClass))
-          addJSONStringToTable(table,inputKey);
+        if (!isDeclaredPrimitive(keyClass))
+          addJSONStringToTable(table, inputKey);
-        
-        if(locateEntryLocations!=null){
+
+        section.addData("Value Class", getValueClass());
+        if (!isDeclaredPrimitive(valueClass))
+          addJSONStringToTable(table, getResult);
+        else
+          section.addData("Value", getResult);
+
+
+      } else if (isLocateEntry()) {
+
+        section.addData("Key Class", getKeyClass());
+        if (!isDeclaredPrimitive(keyClass))
+          addJSONStringToTable(table, inputKey);
+        else
+          section.addData("Key", inputKey);
+
+        if (locateEntryLocations != null) {
-          
+
-          
-          for(KeyInfo info : locateEntryLocations){
+
+          for (KeyInfo info : locateEntryLocations) {
-            
-            if(locations!=null){
-              if(locations.size()==1){
+
+            if (locations != null) {
+              if (locations.size() == 1) {
-                //String regionPath = (String)array[0];
-                boolean found = (Boolean)array[1];
-                if(found){
+                // String regionPath = (String)array[0];
+                boolean found = (Boolean) array[1];
+                if (found) {
-                  boolean primary = (Boolean)array[3];
-                  String bucketId = (String)array[4];
+                  boolean primary = (Boolean) array[3];
+                  String bucketId = (String) array[4];
-                  if(bucketId!=null){//PR
-                    if(primary)
+                  if (bucketId != null) {// PR
+                    if (primary)
-                    locationTable.accumulate("BucketId",bucketId);
+                    locationTable.accumulate("BucketId", bucketId);
-              }else{                
-                for(Object[] array : locations){                  
-                  String regionPath = (String)array[0];
-                  boolean found = (Boolean)array[1];
-                  if(found){
+              } else {
+                for (Object[] array : locations) {
+                  String regionPath = (String) array[0];
+                  boolean found = (Boolean) array[1];
+                  if (found) {
-                    boolean primary = (Boolean)array[3];        
-                    String bucketId = (String)array[4];  
+                    boolean primary = (Boolean) array[3];
+                    String bucketId = (String) array[4];
-                    if(bucketId!=null){//PR
-                      if(primary)
+                    if (bucketId != null) {// PR
+                      if (primary)
-                      locationTable.accumulate("BucketId",bucketId);
+                      locationTable.accumulate("BucketId", bucketId);
-          }          
-          section.addData("Locations Found", totalLocations);          
-        }else{
+          }
+          section.addData("Locations Found", totalLocations);
+        } else {
-        }         
-         
-       }
-      else if(isPut()){
+        }
+
+      } else if (isPut()) {
-        
-        if(!isDeclaredPrimitive(keyClass)){          
-          addJSONStringToTable(table,inputKey);
-        }
-        else
-         section.addData("Key", inputKey);
-        
+
+        if (!isDeclaredPrimitive(keyClass)) {
+          addJSONStringToTable(table, inputKey);
+        } else
+          section.addData("Key", inputKey);
+
-        if(!isDeclaredPrimitive(valueClass)){           
-           addJSONStringToTable(table,putResult);
+        if (!isDeclaredPrimitive(valueClass)) {
+          addJSONStringToTable(table, putResult);
+        } else
+          section.addData("Old Value", putResult);
+
+      } else if (isRemove()) {
+        if (inputKey != null) {// avoids printing key when remove ALL is called
+          section.addData("Key Class", getKeyClass());
+          if (!isDeclaredPrimitive(keyClass))
+            addJSONStringToTable(table, inputKey);
+          else
+            section.addData("Key", inputKey);
-        else
-          section.addData("Old Value", putResult);         
-         
-      }else if(isRemove()){
-        if(inputKey!=null){//avoids printing key when remove ALL is called
-            section.addData("Key Class", getKeyClass());
-            if(!isDeclaredPrimitive(keyClass))
-              addJSONStringToTable(table,inputKey);
-            else
-              section.addData("Key", inputKey);         
-        }        
-         /*if(valueClass!=null && !valueClass.isEmpty()){
-           section.addData("Value Class", getValueClass());
-           addJSONStringToTable(table,removeResult);
-         }else
-           section.addData("Value", removeResult);*/
+        /*
+         * if(valueClass!=null && !valueClass.isEmpty()){ section.addData("Value Class",
+         * getValueClass()); addJSONStringToTable(table,removeResult); }else
+         * section.addData("Value", removeResult);
+         */
-        //its moved to its separate method
-      }       
-    return ResultBuilder.buildResult(data);     
-    }    
+        // its moved to its separate method
+      }
+      return ResultBuilder.buildResult(data);
+    }
-  
+
-   * instead of Result as Command Step is required to add NEXT_STEP information to guide executionStragey
-   * to route it through final step.
+   * instead of Result as Command Step is required to add NEXT_STEP information to guide
+   * executionStragey to route it through final step.
-    if(errorString!=null){
-      //return ResultBuilder.createGemFireErrorResult(errorString);
+    if (errorString != null) {
+      // return ResultBuilder.createGemFireErrorResult(errorString);
-    }
-    else{
+    } else {
-      if(infoString!=null){
+      if (infoString != null) {
-          if(this.queryTraceString!=null)
+          if (this.queryTraceString != null)
-  
+
-   * This method returns a "Page" as dictated by arguments startCount and endCount.
-   * Returned result is not standard CommandResult and its consumed by Display Step
+   * This method returns a "Page" as dictated by arguments startCount and endCount. Returned result
+   * is not standard CommandResult and its consumed by Display Step
-  @SuppressWarnings({ "rawtypes", "unchecked" })
+  @SuppressWarnings({"rawtypes", "unchecked"})
-    fields.add(RESULT_FLAG);values.add(operationCompletedSuccessfully);
-    fields.add(QUERY_PAGE_START);values.add(startCount);
-    fields.add(QUERY_PAGE_END);values.add(endCount);
+    fields.add(RESULT_FLAG);
+    values.add(operationCompletedSuccessfully);
+    fields.add(QUERY_PAGE_START);
+    values.add(startCount);
+    fields.add(QUERY_PAGE_END);
+    values.add(endCount);
-      fields.add("Message");values.add(errorString);
+      fields.add("Message");
+      values.add(errorString);
-      
+
-        fields.add("Message");values.add(infoString);
+        fields.add("Message");
+        values.add(infoString);
-          if(queryTraceString!=null){
-            fields.add(QUERY_TRACE);values.add(queryTraceString);
+          if (queryTraceString != null) {
+            fields.add(QUERY_TRACE);
+            values.add(queryTraceString);
-          String[] headers = new String[] { "Error" };
-          Object[][] rows = { { e.getMessage() } };
-          String fieldsArray[] = { QUERY_PAGE_START, QUERY_PAGE_END };
-          Object valuesArray[] = { startCount, endCount};
+          String[] headers = new String[] {"Error"};
+          Object[][] rows = {{e.getMessage()}};
+          String fieldsArray[] = {QUERY_PAGE_START, QUERY_PAGE_END};
+          Object valuesArray[] = {startCount, endCount};
-  
-  private int buildTable(TabularResultData table,int startCount, int endCount){
-    int rowCount=0;
-    //Introspect first using tabular data
-    for (int i = startCount; i <= endCount; i++) {      
-      if(i >= selectResult.size())
+
+  private int buildTable(TabularResultData table, int startCount, int endCount) {
+    int rowCount = 0;
+    // Introspect first using tabular data
+    for (int i = startCount; i <= endCount; i++) {
+      if (i >= selectResult.size())
-      else rowCount++;
-      
+      else
+        rowCount++;
+
-      case ROW_TYPE_BEAN:
-        addJSONStringToTable(table, row.value);
-        break;
-      case ROW_TYPE_STRUCT_RESULT:
-        addJSONStringToTable(table, row.value);
-        break;
-      case ROW_TYPE_PRIMITIVE:
-        table.accumulate(RESULT_FLAG, row.value);
-        break;
+        case ROW_TYPE_BEAN:
+          addJSONStringToTable(table, row.value);
+          break;
+        case ROW_TYPE_STRUCT_RESULT:
+          addJSONStringToTable(table, row.value);
+          break;
+        case ROW_TYPE_PRIMITIVE:
+          table.accumulate(RESULT_FLAG, row.value);
+          break;
-  } 
-
-  private boolean isDeclaredPrimitive(String keyClass2) {
-    try{
-      Class klass =  ClassPathLoader.getLatest().forName(keyClass2);
-      return JsonUtil.isPrimitiveOrWrapper(klass);
-    }catch(ClassNotFoundException e){
-      return false;
-    }    
-  private void addJSONStringToTable(TabularResultData table, Object object) {    
-    if(object==null || "<NULL>".equals(object)){
-      table.accumulate("Value", "<NULL>");
+  private boolean isDeclaredPrimitive(String keyClass2) {
+    try {
+      Class klass = ClassPathLoader.getLatest().forName(keyClass2);
+      return JsonUtil.isPrimitiveOrWrapper(klass);
+    } catch (ClassNotFoundException e) {
+      return false;
-    else{
+  }
+
+  private void addJSONStringToTable(TabularResultData table, Object object) {
+    if (object == null || "<NULL>".equals(object)) {
+      table.accumulate("Value", "<NULL>");
+    } else {
-          // InputString in JSON Form but with round brackets          
+          // InputString in JSON Form but with round brackets
-          }         
-          jsonObject = new GfJsonObject(newString);          
+          }
+          jsonObject = new GfJsonObject(newString);
-  
+
-          //filter out meta-field type-class used to identify java class of json obbject
-          if(!"type-class".equals(k)){
+          // filter out meta-field type-class used to identify java class of json obbject
+          if (!"type-class".equals(k)) {
-            if (value != null){                         
-                table.accumulate(k, getDomainValue(value));              
+            if (value != null) {
+              table.accumulate(k, getDomainValue(value));
-      } catch (Exception e) {        
+      } catch (Exception e) {
-  
-  
+
+
-    if(value instanceof String){
+    if (value instanceof String) {
-      if(str.contains("{") && str.contains("}")){// small filter to see if its json string
+      if (str.contains("{") && str.contains("}")) {// small filter to see if its json string
-      }else return str;
+      } else
+        return str;
-  public static class KeyInfo implements /*Data*/ Serializable{
-    
+  public static class KeyInfo implements /* Data */ Serializable {
+
-    
-    //Indexes : regionName = 0, found=1, value=2 primary=3 bucketId=4
-    private ArrayList<Object[]> locations = null;   
-    
-    public void addLocation(Object[] locationArray){
-      if(this.locations==null)
+
+    // Indexes : regionName = 0, found=1, value=2 primary=3 bucketId=4
+    private ArrayList<Object[]> locations = null;
+
+    public void addLocation(Object[] locationArray) {
+      if (this.locations == null)
-        
-      locations.add(locationArray);  
+
+      locations.add(locationArray);
-    
+
+
+
+
+
+
+
+
-   
-    public String toString(){
+
+    public String toString() {
-      for(Object[] array : locations){
-        boolean primary = (Boolean)array[3];        
-        String bucketId = (String)array[4];                
-        sb.append(" [ Primary : ").append(primary).append(" , BucketId : ").append(bucketId).append(" ]");
+      for (Object[] array : locations) {
+        boolean primary = (Boolean) array[3];
+        String bucketId = (String) array[4];
+        sb.append(" [ Primary : ").append(primary).append(" , BucketId : ").append(bucketId)
+            .append(" ]");
-      if(locations==null)
+      if (locations == null)
-      else{
-        for(Object[] array:locations){
-          boolean found = (Boolean)array[1];
-          if(found)
+      else {
+        for (Object[] array : locations) {
+          boolean found = (Boolean) array[1];
+          if (found)
-    return false;
-   }
-
-    //@Override
-    public void toData(DataOutput out) throws IOException {
-      DataSerializer.writeString(memberId,out);
-      DataSerializer.writeString(memberName,out);
-      DataSerializer.writeString(host,out);
-      DataSerializer.writePrimitiveInt(pid, out);
-      DataSerializer.writeArrayList(locations, out);      
-      
-      
+      return false;
-    //@Override
+    // @Override
+    public void toData(DataOutput out) throws IOException {
+      DataSerializer.writeString(memberId, out);
+      DataSerializer.writeString(memberName, out);
+      DataSerializer.writeString(host, out);
+      DataSerializer.writePrimitiveInt(pid, out);
+      DataSerializer.writeArrayList(locations, out);
+
+
+    }
+
+    // @Override
-      locations = DataSerializer.readArrayList(in);      
+      locations = DataSerializer.readArrayList(in);
-  
-  public void aggregate(DataCommandResult result) {    
-    if(isLocateEntry()){
-      /*Right now only called for LocateEntry*/
-      
-      if(this.locateEntryLocations==null){
+
+  public void aggregate(DataCommandResult result) {
+    if (isLocateEntry()) {
+      /* Right now only called for LocateEntry */
+
+      if (this.locateEntryLocations == null) {
-      
-      if(result==null){//self-transform result from single to aggregate when numMember==1
-        if(this.locateEntryResult!=null){          
+
+      if (result == null) {// self-transform result from single to aggregate when numMember==1
+        if (this.locateEntryResult != null) {
-          //TODO : Decide whether to show value or not this.getResult = locateEntryResult.getValue();
-        }        
+          // TODO : Decide whether to show value or not this.getResult =
+          // locateEntryResult.getValue();
+        }
-      
-      if(result.errorString!=null && !result.errorString.equals(errorString)){
-        //append errorString only if differs
-        String newString = result.errorString  + " " + errorString;
+
+      if (result.errorString != null && !result.errorString.equals(errorString)) {
+        // append errorString only if differs
+        String newString = result.errorString + " " + errorString;
-      
-      //append messsage only when it differs for negative results
-      if (!operationCompletedSuccessfully && result.infoString != null 
-          && !result.infoString.equals(infoString) ) {
+
+      // append messsage only when it differs for negative results
+      if (!operationCompletedSuccessfully && result.infoString != null
+          && !result.infoString.equals(infoString)) {
-      
-      if(result.hasResultForAggregation /*&& result.errorString==null*/){
-        this.operationCompletedSuccessfully = true;//override this result.operationCompletedSuccessfully
+
+      if (result.hasResultForAggregation /* && result.errorString==null */) {
+        this.operationCompletedSuccessfully = true;// override this
+                                                   // result.operationCompletedSuccessfully
-        if(result.locateEntryResult!=null)
-          locateEntryLocations.add(result.locateEntryResult);        
+        if (result.locateEntryResult != null)
+          locateEntryLocations.add(result.locateEntryResult);
-  //@Override
+  // @Override
-      DataSerializer.writeString(command, out);
-      out.writeUTF(command);
-      DataSerializer.writeObject(putResult,out);
-      DataSerializer.writeObject(getResult,out);
-      DataSerializer.writeObject(locateEntryResult, out);
-      DataSerializer.writeArrayList((ArrayList<?>) locateEntryLocations, out);
-      DataSerializer.writeBoolean(hasResultForAggregation, out);
-      DataSerializer.writeObject(removeResult,out);
-      DataSerializer.writeObject(inputKey,out);
-      DataSerializer.writeObject(inputValue,out);
-      DataSerializer.writeObject(error, out);
-      DataSerializer.writeString(errorString, out);
-      DataSerializer.writeString(infoString, out);
-      DataSerializer.writeString(keyClass, out);
-      DataSerializer.writeString(valueClass, out);
-      DataSerializer.writeBoolean(operationCompletedSuccessfully, out);
+    DataSerializer.writeString(command, out);
+    out.writeUTF(command);
+    DataSerializer.writeObject(putResult, out);
+    DataSerializer.writeObject(getResult, out);
+    DataSerializer.writeObject(locateEntryResult, out);
+    DataSerializer.writeArrayList((ArrayList<?>) locateEntryLocations, out);
+    DataSerializer.writeBoolean(hasResultForAggregation, out);
+    DataSerializer.writeObject(removeResult, out);
+    DataSerializer.writeObject(inputKey, out);
+    DataSerializer.writeObject(inputValue, out);
+    DataSerializer.writeObject(error, out);
+    DataSerializer.writeString(errorString, out);
+    DataSerializer.writeString(infoString, out);
+    DataSerializer.writeString(keyClass, out);
+    DataSerializer.writeString(valueClass, out);
+    DataSerializer.writeBoolean(operationCompletedSuccessfully, out);
-  //@Override
+  // @Override
-    getResult = DataSerializer.readObject(in);    
+    getResult = DataSerializer.readObject(in);
-    hasResultForAggregation = DataSerializer.readBoolean(in);  
+    hasResultForAggregation = DataSerializer.readBoolean(in);
-    operationCompletedSuccessfully = DataSerializer.readBoolean(in);    
-  }  
-  
+    operationCompletedSuccessfully = DataSerializer.readBoolean(in);
+  }
+

UPD66 UPD66 UPD66 UPD66