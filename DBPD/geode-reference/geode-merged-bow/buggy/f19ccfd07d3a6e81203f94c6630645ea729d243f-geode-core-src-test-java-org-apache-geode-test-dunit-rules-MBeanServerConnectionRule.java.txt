GEODE-1716: refactor JMXMBeanDunitTest

* refactor MBeanServerConnectRule for easier usage.
* refactor LocatorServerStartupRule to be able to start up locator/server in VM out of sequence

-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+
+import org.apache.geode.management.internal.security.AccessControlMXBean;
+import org.apache.geode.test.junit.rules.DescribedExternalResource;
+import org.awaitility.Awaitility;
+import org.junit.runner.Description;
-
+import java.util.concurrent.TimeUnit;
-import org.junit.runner.Description;
-
-import org.apache.geode.management.internal.security.AccessControlMXBean;
-import org.apache.geode.test.junit.rules.DescribedExternalResource;
-
- * Class which eases the creation of MBeans for security testing. When combined with
- * {@link ConnectionConfiguration} it allows for the creation of per-test connections with different
- * user/password combinations.
+ * This rules handles connection to the MBean Server. If used with {@link ConnectionConfiguration},
+ * you will need to construct the rule with a port number, then the rule will call connect for you
+ * before running your test.
+ *
+ * If constructed with no port number, you can connect to any port in your test at anytime, and the
+ * rule will handle the closing of the connection for you.
-  private final int jmxServerPort;
+  private int jmxServerPort = -1;
+  public MBeanServerConnectionRule() {}
+
+  @Override
-    ConnectionConfiguration config = description.getAnnotation(ConnectionConfiguration.class);
-    Map<String, String[]> env = new HashMap<>();
-    if (config != null) {
-      String user = config.user();
-      String password = config.password();
-      env.put(JMXConnector.CREDENTIALS, new String[] {user, password});
+    // do not auto connect if port is not set
+    if (jmxServerPort < 0)
+      return;
-      JMXServiceURL url =
-          new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:" + jmxServerPort + "/jmxrmi");
-      jmxConnector = JMXConnectorFactory.connect(url, env);
-      con = jmxConnector.getMBeanServerConnection();
+    // do not auto connect if no ConnectionConfiguration is defined.
+    ConnectionConfiguration config = description.getAnnotation(ConnectionConfiguration.class);
+    if (config == null)
+      return;
+
+    Map<String, String[]> env = new HashMap<>();
+    String user = config.user();
+    String password = config.password();
+    env.put(JMXConnector.CREDENTIALS, new String[] {user, password});
+    connect(null, jmxServerPort, env);
+  }
+
+  public void connect(int jmxPort) throws Exception {
+    connect(null, jmxPort, null);
+  }
+
+  public void connect(int jmxPort, Map<String, ?> environment) throws Exception {
+    connect(null, jmxPort, environment);
+  }
+
+  public void connect(String jmxServer, int jmxPort) throws Exception {
+    connect(jmxServer, jmxPort, null);
+  }
+
+  public void connect(String jmxServer, int jmxPort, final Map<String, ?> environment)
+      throws Exception {
+    if (jmxServer == null) {
+      jmxServer = "";
+
+    // ServiceUrl: service:jmx:rmi:///jndi/rmi://<TARGET_MACHINE>:<RMI_REGISTRY_PORT>/jmxrmi
+    JMXServiceURL url =
+        new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + jmxServer + ":" + jmxPort + "/jmxrmi");
+
+    // same as GfshShellConnectorRule: if we connect before the RMI server is ready, we get "Failed
+    // to retrieve RMIServer stub: javax.naming.CommunicationException [Root exception is
+    // java.rmi.NoSuchObjectException: no such object in table]" Exception
+    // Have to implement a wait mechanism here. We can use Awaitility here
+    Awaitility.await().atMost(2, TimeUnit.MINUTES).pollDelay(2, TimeUnit.SECONDS).until(() -> {
+      Map<String, ?> env = new HashMap<>();
+      if (environment != null) {
+        env = new HashMap<>(environment);
+      }
+      try {
+        jmxConnector = JMXConnectorFactory.connect(url, env);
+      } catch (Exception e) {
+        if (e.getMessage().contains("no such object in table")) {
+          // keep waiting
+          return false;
+        }
+        throw e;
+      }
+      return true;
+    });
+    con = jmxConnector.getMBeanServerConnection();
+  @Override
+    disconnect();
+  }
+
+  public void disconnect() throws Exception {
+      con = null;
-
-    con = null;

MOV26 MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 MOV29 INS78 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD83 UPD42 INS43 UPD66 INS66 UPD66 INS66 INS66 UPD66 INS38 INS42 INS25 INS25 MOV60 MOV60 MOV21 INS21 INS39 INS42 INS42 INS21 INS39 INS42 INS74 INS42 INS42 INS21 INS43 INS42 INS39 INS42 INS42 INS21 INS43 INS42 INS39 INS42 INS83 INS74 INS42 INS42 INS25 INS60 INS21 MOV21 INS42 INS21 INS42 INS34 INS27 INS41 UPD27 MOV27 INS41 INS32 INS32 INS43 INS43 INS76 INS32 INS42 INS32 INS42 INS43 INS43 INS76 INS27 INS8 MOV43 INS59 INS32 INS32 INS42 INS34 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS21 INS42 INS14 INS32 INS42 INS86 INS42 MOV21 INS7 MOV43 INS27 INS32 INS42 INS34 INS40 INS8 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS34 INS40 INS60 INS25 INS54 INS41 INS42 INS42 INS74 INS59 INS27 INS8 INS8 INS12 INS9 INS43 INS43 INS76 INS42 INS14 INS42 INS33 INS21 MOV21 INS44 INS8 INS42 INS42 INS74 INS7 INS43 INS42 INS25 INS53 INS43 INS42 INS14 INS42 INS32 INS8 INS42 INS42 INS74 INS42 INS32 INS42 INS45 INS41 INS43 INS42 INS42 INS9 INS42 DEL83 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL8 DEL25