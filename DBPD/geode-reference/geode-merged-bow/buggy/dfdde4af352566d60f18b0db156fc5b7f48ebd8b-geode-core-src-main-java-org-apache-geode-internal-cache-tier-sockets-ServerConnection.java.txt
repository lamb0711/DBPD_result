GEODE-3075: Initial refactor adding NewProtocolServerConnection

subclassing `ServerConnection`.

The new code is broken but it won't be called under normal operation,
since it's gated on a system property, "geode.feature-protobuf-protocol"

Further refactoring and feature work to come.

-public class ServerConnection implements Runnable {
+public abstract class ServerConnection implements Runnable {
-  private static final Logger logger = LogService.getLogger();
+  protected static final Logger logger = LogService.getLogger();
-  private Socket theSocket;
+  protected Socket theSocket;
-  private final CachedRegionHelper crHelper;
-  private String name = null;
+  protected final CachedRegionHelper crHelper;
+  protected String name = null;
-  private ClientHandShake handshake;
+  protected ClientHandShake handshake;
-  private final byte communicationMode;
+  protected final byte communicationMode;
-  private Principal principal;
+  protected Principal principal;
-  private boolean acceptHandShake(byte epType, int qSize) {
-    try {
-      this.handshake.accept(theSocket.getOutputStream(), theSocket.getInputStream(), epType, qSize,
-          this.communicationMode, this.principal);
-    } catch (IOException ioe) {
-      if (!crHelper.isShutdown() && !isTerminated()) {
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ServerConnection_0_HANDSHAKE_ACCEPT_FAILED_ON_SOCKET_1_2,
-            new Object[] {this.name, this.theSocket, ioe}));
-      }
-      cleanup();
-      return false;
-    }
+  protected boolean acceptHandShake(byte epType, int qSize) {
+    return doHandShake(epType, qSize) && handshakeAccepted();
+  }
+
+  protected abstract boolean doHandShake(byte epType, int qSize);
+
+
+  protected boolean handshakeAccepted() {
+  /**
+   * @return whether this is a connection to a client, regardless of protocol.
+   */
+  public boolean isClientServerConnection() {
+    return communicationMode == Acceptor.CLIENT_TO_SERVER
+        || communicationMode == Acceptor.PRIMARY_SERVER_TO_CLIENT
+        || communicationMode == Acceptor.SECONDARY_SERVER_TO_CLIENT
+        || communicationMode == Acceptor.CLIENT_TO_SERVER_FOR_QUEUE;
+  }
+
-  // public void setUserAuthAttributes(ClientProxyMembershipID proxyId, AuthorizeRequest
-  // authzRequest, AuthorizeRequestPP postAuthzRequest) {
-  // UserAuthAttributes uaa = new UserAuthAttributes(authzRequest, postAuthzRequest);
-  // }
-
-  /**
-   * Set to false once handshake has been done
-   */
-  private boolean doHandshake = true;
-
-  private void doHandshake() {
+  protected void doHandshake() {
-  private void doNormalMsg() {
+  protected void doNormalMsg() {
-  private void doOneMessage() {
-    if (this.doHandshake) {
-      doHandshake();
-      this.doHandshake = false;
-    } else {
-      this.resetTransientData();
-      doNormalMsg();
-    }
-  }
+  protected abstract void doOneMessage();
-   * 
+   *
-   * 
+   *

INS83 INS31 INS31 INS31 INS31 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 INS39 INS42 MOV44 MOV44 INS8 UPD83 MOV83 INS83 UPD39 MOV39 UPD42 MOV42 INS44 INS44 UPD83 UPD42 INS29 INS83 INS39 INS42 INS8 UPD83 UPD83 INS83 INS83 INS39 INS42 INS41 INS39 INS42 INS39 INS42 INS65 INS41 INS27 INS66 INS27 INS32 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS40 INS27 INS27 INS42 INS40 INS42 INS40 INS42 INS40 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL4 DEL3 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL52 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31