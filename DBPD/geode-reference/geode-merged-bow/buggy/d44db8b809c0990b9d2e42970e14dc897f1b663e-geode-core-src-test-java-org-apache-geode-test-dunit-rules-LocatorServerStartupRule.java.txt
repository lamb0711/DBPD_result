GEODE-2395: use random ports when starting the jmx manager and http services

* be able to configure the various aspects of the rules before starting the server when declaring the rules.
* delete the unnecessary abstract test classes
* allowing tests to use default ports if needed
* created HttpClientRule to ease the connection to to pulse server

+import org.apache.geode.internal.AvailablePortHelper;
-  public MemberVM startLocatorVM(int index) throws IOException {
+  public MemberVM startLocatorVM(int index) throws Exception {
-  public MemberVM<Locator> startLocatorVM(int index, Properties locatorProperties)
-      throws IOException {
+  public MemberVM<Locator> startLocatorVM(int index, Properties properties) throws Exception {
-    locatorProperties.setProperty(NAME, name);
+    properties.setProperty(NAME, name);
-      locatorStarter.before();
-      return locatorStarter.startLocator(locatorProperties);
+      return locatorStarter.withProperties(properties).startLocator();
+
-  /**
-   * starts a cache server that does not connect to a locator
-   * 
-   * @return VM node vm
-   */
-  public MemberVM startServerVM(int index, Properties properties) throws IOException {
-    return startServerVM(index, properties, -1);
-  }
-
-  public MemberVM startServerAsJmxManager(int index, int jmxManagerPort) throws IOException {
-    Properties properties = new Properties();
-    properties.setProperty(JMX_MANAGER_PORT, jmxManagerPort + "");
-    return startServerVM(index, properties);
+  public MemberVM startServerVM(int index, Properties properties) throws IOException {
+    return startServerVM(index, properties, -1);
-  public MemberVM startServerAsEmbededLocator(int index, int locatorPort, int jmxManagerPort)
-      throws IOException {
+  public MemberVM startServerAsJmxManager(int index) throws IOException {
-    properties.setProperty("start-locator", "localhost[" + locatorPort + "]");
-    if (jmxManagerPort > 0) {
-      properties.setProperty(JMX_MANAGER_PORT, jmxManagerPort + "");
-    }
-    return startServerVM(index, properties);
+    properties.setProperty(JMX_MANAGER_PORT, AvailablePortHelper.getRandomAvailableTCPPort() + "");
+    return startServerVM(index, properties, -1);
+  }
+
+  public MemberVM startServerAsEmbededLocator(int index) throws IOException {
+    String name = "server-" + index;
+    File workingDir = createWorkingDirForMember(name);
+    VM serverVM = getHost(0).getVM(index);
+    Server server = serverVM.invoke(() -> {
+      serverStarter = new ServerStarterRule(workingDir);
+      return serverStarter.withEmbeddedLocator().withName(name).withJMXManager().startServer();
+    });
+    members[index] = new MemberVM(server, serverVM);
+    return members[index];
-   * Starts a cache server that connect to the locator running at the given port.
+   * Starts a cache server with given properties
-
-      serverStarter.before();
-      return serverStarter.startServer(properties, locatorPort);
+      return serverStarter.withProperties(properties).withConnectionToLocator(locatorPort)
+          .startServer();

INS26 MOV31 INS40 INS43 UPD43 MOV43 MOV43 INS8 INS42 UPD42 UPD42 INS60 MOV60 INS60 INS60 INS21 INS41 INS43 INS59 UPD43 INS43 INS59 INS43 INS59 INS7 INS2 UPD66 UPD42 INS38 INS42 INS42 INS27 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS2 INS14 INS42 INS42 INS32 INS34 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS8 INS42 INS21 INS41 INS32 INS7 INS32 INS32 INS32 INS42 INS42 INS14 INS32 INS42 INS32 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS32 INS42 INS32 INS42 MOV42 INS42 INS32 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL32