GEODE-2395: use random ports when starting the jmx manager and http services

* be able to configure the various aspects of the rules before starting the server when declaring the rules.
* delete the unnecessary abstract test classes
* allowing tests to use default ports if needed
* created HttpClientRule to ease the connection to to pulse server

-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;
-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;
-import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
-import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;
-import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
-import static org.apache.geode.distributed.ConfigurationProperties.NAME;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_BIND_ADDRESS;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.START_DEV_REST_API;
+import org.apache.geode.cache.RegionShortcut;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.AvailablePortHelper;
- * You can create this rule either with a property or without a property. If created with a
- * property, The rule will automatically start the server for you with the properties given.
- *
- * If created without a property, the rule won't start the server until you specicially call one of
- * the startServer function.
- *
- * Either way, the rule will handle properly stopping the server for you.
- *
-public class ServerStarterRule extends MemberStarterRule implements Server {
+public class ServerStarterRule extends MemberStarterRule<ServerStarterRule> implements Server {
+  private int embeddedLocatorPort = -1;
-   * up to the caller's responsibility to delete it.
+   * the caller's responsibility to delete it.
-    this.workingDir = workingDir;
+    super(workingDir);
+  public ServerStarterRule withEmbeddedLocator() {
+    embeddedLocatorPort = AvailablePortHelper.getRandomAvailableTCPPort();
+    properties.setProperty("start-locator", "localhost[" + embeddedLocatorPort + "]");
+    return this;
+  }
+
+  public ServerStarterRule withRestService() {
+    return withRestService(false);
+  }
+
+  public ServerStarterRule withRestService(boolean useDefaultPort) {
+    properties.setProperty(START_DEV_REST_API, "true");
+    properties.setProperty(HTTP_SERVICE_BIND_ADDRESS, "localhost");
+    if (!useDefaultPort) {
+      httpPort = AvailablePortHelper.getRandomAvailableTCPPort();
+      properties.setProperty(HTTP_SERVICE_PORT, httpPort + "");
+    }
+    return this;
+  }
+
-    return startServer(new Properties(), -1, false);
+    return startServer(false);
-  public ServerStarterRule startServer(int locatorPort) {
-    return startServer(new Properties(), locatorPort, false);
-  }
-
-  public ServerStarterRule startServer(int locatorPort, boolean pdxPersistent) {
-    return startServer(new Properties(), locatorPort, pdxPersistent);
-  }
-
-  public ServerStarterRule startServer(Properties properties) {
-    return startServer(properties, -1, false);
+  public ServerStarterRule createRegion(RegionShortcut type, String name) {
+    cache.createRegionFactory(type).create(name);
+    return this;
-    return startServer(properties, locatorPort, false);
+    return withProperties(properties).withConnectionToLocator(locatorPort).startServer();
-  public ServerStarterRule startServer(Properties properties, int locatorPort,
-      boolean pdxPersistent) {
-    if (properties == null) {
-      properties = new Properties();
-    }
-    if (!properties.containsKey(NAME)) {
-      properties.setProperty(NAME, "server");
-    }
-    name = properties.getProperty(NAME);
-    if (!properties.containsKey(LOG_FILE)) {
-      properties.setProperty(LOG_FILE, new File(name + ".log").getAbsolutePath().toString());
-    }
-
-    if (locatorPort > 0) {
-      properties.setProperty(LOCATORS, "localhost[" + locatorPort + "]");
-    }
-    if (!properties.containsKey(MCAST_PORT)) {
-      properties.setProperty(MCAST_PORT, "0");
-    }
-
-    if (!properties.containsKey(LOCATORS)) {
-      properties.setProperty(LOCATORS, "");
-    }
-    if (properties.containsKey(JMX_MANAGER_PORT)) {
-      jmxPort = Integer.parseInt(properties.getProperty(JMX_MANAGER_PORT));
-      if (jmxPort > 0) {
-        if (!properties.containsKey(JMX_MANAGER))
-          properties.put(JMX_MANAGER, "true");
-        if (!properties.containsKey(JMX_MANAGER_START))
-          properties.put(JMX_MANAGER_START, "true");
-      }
-    }
-    CacheFactory cf = new CacheFactory(properties);
+  public ServerStarterRule startServer(boolean pdxPersistent) {
+    normalizeProperties();
+    CacheFactory cf = new CacheFactory(this.properties);
+    DistributionConfig config =
+        ((InternalDistributedSystem) cache.getDistributedSystem()).getConfig();
+    jmxPort = config.getJmxManagerPort();
+    httpPort = config.getHttpServicePort();
+
+  public int getEmbeddedLocatorPort() {
+    return embeddedLocatorPort;
+  }
+

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS74 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV43 INS43 INS83 INS39 INS59 MOV83 MOV43 UPD42 MOV42 INS8 MOV43 UPD42 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 MOV44 MOV44 INS8 INS83 MOV43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS42 INS42 MOV38 INS46 INS21 INS21 INS41 UPD39 UPD42 INS21 MOV21 INS25 INS41 INS41 INS43 INS42 INS43 INS42 MOV21 INS41 INS42 INS41 MOV21 INS60 MOV21 MOV21 MOV21 INS60 MOV21 MOV21 MOV54 MOV21 INS21 INS21 MOV41 INS41 UPD66 INS42 INS7 INS32 INS52 INS32 INS38 INS8 INS52 INS32 INS42 INS42 INS32 INS52 INS32 INS32 MOV43 INS59 INS43 INS59 INS7 INS7 INS42 INS42 INS32 UPD42 MOV42 INS42 INS45 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 UPD45 INS42 MOV21 MOV21 UPD42 MOV42 INS9 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV43 INS22 INS36 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS27 INS42 MOV42 INS52 INS42 INS11 UPD42 UPD42 UPD42 MOV42 UPD45 MOV45 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL14 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL14 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL38 DEL42 DEL42 DEL43 DEL27 DEL14 DEL42 DEL32 DEL42 DEL32 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL45 DEL32 DEL21 DEL25 DEL42 DEL32 DEL38 DEL42 DEL45 DEL32 DEL21 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31