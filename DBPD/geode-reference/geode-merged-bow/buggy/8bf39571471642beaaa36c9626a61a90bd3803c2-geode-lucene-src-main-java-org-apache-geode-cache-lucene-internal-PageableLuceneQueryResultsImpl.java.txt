Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of PageableLuceneQueryResults that fetchs a page at a time
- * from the server, given a set of EntryScores (key and score).
+ * Implementation of PageableLuceneQueryResults that fetchs a page at a time from the server, given
+ * a set of EntryScores (key and score).
-public class PageableLuceneQueryResultsImpl<K,V> implements PageableLuceneQueryResults<K,V> {
+public class PageableLuceneQueryResultsImpl<K, V> implements PageableLuceneQueryResults<K, V> {
-   *  list of docs matching search query
+   * list of docs matching search query
-  private List<LuceneResultStruct<K,V>> currentPage;
+  private List<LuceneResultStruct<K, V>> currentPage;
-  
+
-  
+
-   * The start of the next page of results we want to fetch 
+   * The start of the next page of results we want to fetch
-  
+
-  
-  public PageableLuceneQueryResultsImpl(List<EntryScore<K>> hits, Region<K,V> userRegion, int pageSize) {
+
+  public PageableLuceneQueryResultsImpl(List<EntryScore<K>> hits, Region<K, V> userRegion,
+      int pageSize) {
-  public List<LuceneResultStruct<K,V>> getHitEntries(int fromIndex, int toIndex) {
+  public List<LuceneResultStruct<K, V>> getHitEntries(int fromIndex, int toIndex) {
-    for(EntryScore<K> score : scores) {
+    for (EntryScore<K> score : scores) {
-    Map<K,V> values = userRegion.getAll(keys);
+    Map<K, V> values = userRegion.getAll(keys);
-    ArrayList<LuceneResultStruct<K,V>> results = new ArrayList<LuceneResultStruct<K,V>>(scores.size());
-    for(EntryScore<K> score : scores) {
+    ArrayList<LuceneResultStruct<K, V>> results =
+        new ArrayList<LuceneResultStruct<K, V>>(scores.size());
+    for (EntryScore<K> score : scores) {
-      if (value!=null)
+      if (value != null)
-  public List<LuceneResultStruct<K,V>> next() {
-    if(!hasNext()) {
+  public List<LuceneResultStruct<K, V>> next() {
+    if (!hasNext()) {
-    List<LuceneResultStruct<K,V>> result = advancePage();
+    List<LuceneResultStruct<K, V>> result = advancePage();
-    if(currentPage != null) {
+    if (currentPage != null) {
-    currentPage = new ArrayList<LuceneResultStruct<K,V>>(resultSize);
-    while (currentPage.size()<pageSize && currentHit < hits.size()) {
+    currentPage = new ArrayList<LuceneResultStruct<K, V>>(resultSize);
+    while (currentPage.size() < pageSize && currentHit < hits.size()) {
-    if ( currentPage.isEmpty() ) {
+    if (currentPage.isEmpty()) {
-    if(maxScore == Float.MIN_VALUE) {
-      for(EntryScore<K> score : hits) {
+    if (maxScore == Float.MIN_VALUE) {
+      for (EntryScore<K> score : hits) {
-    
+

UPD66 UPD66 UPD66