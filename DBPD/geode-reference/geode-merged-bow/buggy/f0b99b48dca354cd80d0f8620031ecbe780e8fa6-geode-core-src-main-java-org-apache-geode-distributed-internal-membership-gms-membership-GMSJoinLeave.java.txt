GEODE-2875 shutdown is taking as long as 20 seconds

The band-aid fix for this problem was to reduce the wait-time on joining a
thread sending shutdown messages.

This change set alters the membership manager, reviving the path of sending
certain messages like ShutdownMessage over UDP instead of TCP/IP stream
sockets.  This avenue doesn't block trying to form point-to-point
connections so the join() can complete in a short amount of time.

+  
+  boolean isShuttingDown() {
+    return services.getCancelCriterion().isCancelInProgress()
+        || services.getManager().shutdownInProgress()
+        || services.getManager().isShutdownStarted();
+  }
-    if (services.getCancelCriterion().isCancelInProgress()
-        || services.getManager().shutdownInProgress()
-        || services.getManager().isShutdownStarted()) {
+    // GEODE-2193 - don't send a view with new members if we're shutting down
+    if (isShuttingDown()) {
-    if (services.getCancelCriterion().isCancelInProgress()
-        || services.getManager().shutdownInProgress()
-        || services.getManager().isShutdownStarted()) {
+    if (isShuttingDown()) {
-    StringBuilder stringBuilder = new StringBuilder();
-    int[] ports = view.getFailureDetectionPorts();
-    int numMembers = view.size();
-    for (int i = 0; i < numMembers; i++) {
-      if (i > 0) {
-        stringBuilder.append(' ');
-      }
-      stringBuilder.append(ports[i]);
-    }
-    logger.info((preparing ? "preparing" : "sending") + " new view " + view
-        + "\nfailure detection ports: " + stringBuilder.toString());
+    logger.info((preparing ? "preparing" : "sending") + " new view " + view);
-        if (conflictingView != null && !conflictingView.getCreator().equals(localAddress)
-            && conflictingView.getViewId() > newView.getViewId() && (lastConflictingView == null
-                || conflictingView.getViewId() > lastConflictingView.getViewId())) {
-          lastConflictingView = conflictingView;
-          logger.info(
-              "adding these crashed members from a conflicting view to the crash-set for the next view: {}\nconflicting view: {}",
-              unresponsive, conflictingView);
-          failures.addAll(conflictingView.getCrashedMembers());
-          // this member may have been kicked out of the conflicting view
-          if (failures.contains(localAddress)) {
-            forceDisconnect("I am no longer a member of the distributed system");
-            shutdown = true;
-            return;
-          }
-          List<InternalDistributedMember> newMembers = conflictingView.getNewMembers();
-          if (!newMembers.isEmpty()) {
-            logger.info("adding these new members from a conflicting view to the new view: {}",
-                newMembers);
-            for (InternalDistributedMember mbr : newMembers) {
-              int port = conflictingView.getFailureDetectionPort(mbr);
-              newView.add(mbr);
-              newView.setFailureDetectionPort(mbr, port);
-              joinReqs.add(mbr);
+        boolean conflictingViewNotFromMe = conflictingView != null && !conflictingView.getCreator().equals(localAddress)
+            && conflictingView.getViewId() > newView.getViewId();
+        if (conflictingViewNotFromMe) {
+          boolean conflictingViewIsMostRecent = (lastConflictingView == null
+              || conflictingView.getViewId() > lastConflictingView.getViewId());
+          if (conflictingViewIsMostRecent) {
+            lastConflictingView = conflictingView;
+            logger.info(
+                "adding these crashed members from a conflicting view to the crash-set for the next view: {}\nconflicting view: {}",
+                unresponsive, conflictingView);
+            failures.addAll(conflictingView.getCrashedMembers());
+            // this member may have been kicked out of the conflicting view
+            if (failures.contains(localAddress)) {
+              forceDisconnect("I am no longer a member of the distributed system");
+              shutdown = true;
+              return;
-          }
-          // trump the view ID of the conflicting view so mine will be accepted
-          if (conflictingView.getViewId() >= newView.getViewId()) {
-            newView = new NetView(newView, conflictingView.getViewId() + 1);
+            List<InternalDistributedMember> newMembers = conflictingView.getNewMembers();
+            if (!newMembers.isEmpty()) {
+              logger.info("adding these new members from a conflicting view to the new view: {}",
+                  newMembers);
+              for (InternalDistributedMember mbr : newMembers) {
+                int port = conflictingView.getFailureDetectionPort(mbr);
+                newView.add(mbr);
+                newView.setFailureDetectionPort(mbr, port);
+                joinReqs.add(mbr);
+              }
+            }
+            // trump the view ID of the conflicting view so mine will be accepted
+            if (conflictingView.getViewId() >= newView.getViewId()) {
+              newView = new NetView(newView, conflictingView.getViewId() + 1);
+            }

INS31 INS39 INS42 MOV8 INS8 INS41 INS25 MOV41 MOV27 INS32 MOV8 INS32 INS42 UPD42 MOV42 INS60 INS39 INS59 INS42 INS8 INS42 MOV27 INS60 INS25 INS39 INS59 INS42 MOV8 INS42 MOV36 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL45 DEL42 DEL42 DEL32 DEL27