GEODE-6918: Cleanup InternalLocator use of workingDirectory (#3782)

* Pass workingDirectory to InternalConfigurationPersistenceService
* Fixup InternalConfigurationPersistenceService constructors
* Create InternalLocatorIntegrationTest
* Use Path instead of String or File
* Cleanup InternalConfigurationPersistenceService and JAXBService

+import java.nio.file.Path;
+import java.nio.file.Paths;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.internal.config.JAXBService;
-  private final File workingDirectory;
+  private final Path workingDirectory;
+   *
+   * @deprecated Please use
+   *             {@link #createLocator(int, LoggingSession, File, InternalLogWriter, InternalLogWriter, InetAddress, String, Properties, Path)}
+   *             instead.
+  @Deprecated
-        hostnameForClients, distributedSystemProperties, startDistributedSystem,
-        new File(System.getProperty("user.dir")));
+        hostnameForClients, distributedSystemProperties,
+        Paths.get(System.getProperty("user.dir")));
-   * @param startDistributedSystem if true then this locator will also start its own ds
-      String hostnameForClients, Properties distributedSystemProperties,
-      boolean startDistributedSystem, File workingDirectory) {
+      String hostnameForClients, Properties distributedSystemProperties, Path workingDirectory) {
-              startDistributedSystem, workingDirectory);
+              workingDirectory);
-        new File(System.getProperty("user.dir")));
+        Paths.get(System.getProperty("user.dir")));
-      Properties distributedSystemProperties, String hostnameForClients, File workingDirectory)
+      Properties distributedSystemProperties, String hostnameForClients, Path workingDirectory)
-          bindAddress, hostnameForClients, distributedSystemProperties, startDistributedSystem,
+          bindAddress, hostnameForClients, distributedSystemProperties,
-   * @param startDistributedSystem if true locator will start its own distributed system
+   * @param workingDirectory the working directory to use for files
-  private InternalLocator(int port, LoggingSession loggingSession, File logFile,
+  @VisibleForTesting
+  InternalLocator(int port, LoggingSession loggingSession, File logFile,
-      DistributionConfigImpl distributionConfig, boolean startDistributedSystem,
-      File workingDirectory) {
-    // TODO: the following three assignments are already done in superclass
+      DistributionConfigImpl distributionConfig, Path workingDirectory) {
-    File productUseFile = new File(workingDirectory, "locator" + boundPort + "views.log");
+    File productUseFile = workingDirectory.resolve("locator" + boundPort + "views.log").toFile();
-            new InternalConfigurationPersistenceService(newCache);
+            new InternalConfigurationPersistenceService(newCache, workingDirectory,
+                JAXBService.create());
-            new InternalConfigurationPersistenceService(locator.internalCache);
+            new InternalConfigurationPersistenceService(locator.internalCache, workingDirectory,
+                JAXBService.create());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD43 INS78 INS78 UPD42 INS65 INS42 UPD43 UPD43 INS42 UPD43 INS66 INS65 INS66 UPD42 UPD42 UPD42 UPD66 UPD42 MOV43 INS68 INS32 INS32 INS32 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 UPD42 MOV42 INS42 MOV32 MOV43 INS42 INS42 MOV32 INS32 INS42 INS39 INS43 MOV43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 DEL14 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14