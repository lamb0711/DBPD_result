GEODE-6964: Move geode log4j core classes to geode-log4j

Introduce new Logging and Alerting SPIs. Extract all log4j-core code to
geode-log4j module.

The geode-core module no longer contains log4j2.xml and no longer has a
dependency on log4j-core.

All code that uses log4j-core has moved to the new module geode-log4j.
The log4j2.xml for Geode now lives in geode-log4j as well. These
changes ensure that users have better control over logging including
which backend to use. This should improve user experience when using
Spring Boot.

Co-authored-by: Mark Hanson <mhanson@pivotal.io>

-package org.apache.geode.internal.alerting;
+package org.apache.geode.alerting.internal;
-import java.util.Date;
+import java.time.Instant;
+import org.apache.geode.alerting.internal.spi.AlertLevel;
+import org.apache.geode.annotations.VisibleForTesting;
-/**
- * Provides the ability to send messages about {@code Alert}s to local or remote {@code Alert}
- * listeners.
- */
-public class AlertMessaging {
+public class ClusterAlertMessaging implements AlertMessaging {
-  public AlertMessaging(final InternalDistributedSystem system) {
-    this(system, system.getDistributionManager(), new AlertListenerMessageFactory());
+  public ClusterAlertMessaging(final InternalDistributedSystem system) {
+    this(system,
+        system.getDistributionManager(),
+        new AlertListenerMessageFactory());
-  AlertMessaging(final InternalDistributedSystem system,
+  @VisibleForTesting
+  ClusterAlertMessaging(final InternalDistributedSystem system,
+  @Override
-      final Date date,
+      final Instant timestamp,
+      final long threadId,
-      AlertListenerMessage message = alertListenerMessageFactory.createAlertListenerMessage(member,
-          alertLevel, date, connectionName, threadName, formattedMessage, stackTrace);
+      AlertListenerMessage message =
+          alertListenerMessageFactory.createAlertListenerMessage(member, alertLevel, timestamp,
+              connectionName, threadName, threadId, formattedMessage, stackTrace);
-        logger.debug("Processing local alert message: {}, {}, {}, {}, {}, [{}], [{}].",
-            member, alertLevel, date, connectionName, threadName, formattedMessage, stackTrace);
+        logger.debug("Processing local alert message: {}, {}, {}, {}, {}, {}, [{}], [{}].",
+            member, alertLevel, timestamp, connectionName, threadName, threadId, formattedMessage,
+            stackTrace);
-        logger.debug("Sending remote alert message: {}, {}, {}, {}, {}, [{}], [{}].",
-            member, alertLevel, date, connectionName, threadName, formattedMessage, stackTrace);
+        logger.debug("Sending remote alert message: {}, {}, {}, {}, {}, {}, [{}], [{}].",
+            member, alertLevel, timestamp, connectionName, threadName, threadId, formattedMessage,
+            stackTrace);
+  public void close() {
+    // nothing
+  }
+
+  @Override
+  public String toString() {
+    return getClass().getName() + "@" + Integer.toHexString(hashCode());
+  }
+
+  @VisibleForTesting

INS26 INS26 UPD40 UPD40 INS40 INS40 INS42 INS43 INS31 INS31 INS42 UPD42 INS78 UPD42 INS78 INS44 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS42 INS42 UPD43 UPD42 INS83 INS39 INS42 INS42 INS42 INS41 INS42 UPD42 INS27 INS32 INS45 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 UPD45 UPD42 INS42 UPD45 UPD42 INS42 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42