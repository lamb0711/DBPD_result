GEODE-420: Locator ssl config.

-import java.net.*;
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Socket;
+import javax.net.ssl.SSLHandshakeException;
+
-import com.gemstone.gemfire.cache.client.internal.locator.*;
-import com.gemstone.gemfire.internal.net.*;
+import com.gemstone.gemfire.internal.net.SSLEnabledComponent;
+import com.gemstone.gemfire.internal.net.SocketCreator;
+import com.gemstone.gemfire.internal.net.SocketCreatorFactory;
-  
+
-  
+
-  
+
-    this(SocketCreatorFactory.getClusterSSLSocketCreator());
+    this(SocketCreatorFactory.getSSLSocketCreatorForComponent(SSLEnabledComponent.LOCATOR));
-   * 
+   *
+   *
+   *
+   *
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected)
-    throws IOException, ClassNotFoundException {
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected) throws IOException, ClassNotFoundException {
-    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
+    Socket sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
-          sock.setSoLinger(true, 0);
+          if (!sock.isClosed() && !socketCreator.useSSL()) {
+            sock.setSoLinger(true, 0);
+          }
-    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-    sock.setSoTimeout(timeout);
+    Socket sock = null;
+    try {
+      sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
+      sock.setSoTimeout(timeout);
+    } catch (SSLHandshakeException e) {
+      throw new LocatorCancelException("Unrecognisable response received");
+    }
-      DataInputStream in = new DataInputStream(sock.getInputStream());
+      InputStream inputStream = sock.getInputStream();
+      DataInputStream in = new DataInputStream(inputStream);
-        VersionResponse response = DataSerializer.readObject(in);
+        Object readObject = DataSerializer.readObject(in);
+        if (!(readObject instanceof VersionResponse)) {
+          throw new LocatorCancelException("Unrecognisable response received");
+          //          throw new IOException("Unexpected response received from locator");
+        }
+        VersionResponse response = (VersionResponse) readObject;
-        sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
-        sock.close();
+          sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
+          sock.close();
-    synchronized(serverVersions) {
+    synchronized (serverVersions) {

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 UPD40 INS54 INS8 INS12 UPD42 INS40 INS33 INS21 MOV21 INS44 INS8 INS60 UPD42 MOV42 INS7 INS43 INS42 INS53 INS43 MOV43 INS59 INS25 INS42 MOV32 INS42 INS14 INS42 UPD42 MOV32 INS42 INS14 INS25 INS60 INS42 INS8 UPD42 MOV42 INS43 INS45 MOV43 INS42 INS43 INS38 INS8 MOV43 INS59 MOV25 INS42 INS42 UPD42 INS36 INS53 INS42 INS11 INS27 INS62 INS14 INS43 INS42 INS38 INS38 INS42 INS43 INS43 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14