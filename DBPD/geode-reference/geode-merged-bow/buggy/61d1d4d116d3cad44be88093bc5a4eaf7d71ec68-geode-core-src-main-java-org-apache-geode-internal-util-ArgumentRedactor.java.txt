GEODE-4309: Refactor ArgumentRedactor for improved robustness. (#1313)


-import java.util.Map;
-import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+  private static final String redacted = "********";
+
+  // All taboo words should be entirely lowercase.
+  private static final List<String> tabooWords = ArrayUtils.asList("password");
+
+  // This pattern consists of three capture groups:
+  // The option, consisting of
+  // (a) one or two hyphens
+  // (b) one or more non-whitespace, non-"=" characters, matching greedily
+  // The option-value separator, consisting of: any amount of whitespace surrounding at most 1 "="
+  // The value, consisting of:
+  // (a) If not wrapped in quotes, all non-whitespace characters, matching greedily.
+  // (b) If wrapped in quotes, any non-quote character, matching greedily, until the closing quote.
+  // -- -- This will therefore break on, e.g., --opt="escaped \" quote" and only redact "escaped."
+  // Positive lookahead between groups 1 and 2 to require space or "=", while * and ? match empty.
+  // Negative lookahead between groups 2 and 3 to avoid "--boolFlag --newOption" matching as a pair.
+  private static final Pattern optionWithValuePattern =
+      Pattern.compile("(--?[^\\s=]+)(?=[ =])( *=? *)(?!-)((?:\"[^\"]*\"|\\S+))");
-  public static String redact(final List<String> args) {
-    StringBuilder redacted = new StringBuilder();
-    for (String arg : args) {
-      redacted.append(redact(arg)).append(" ");
-    }
-    return redacted.toString().trim();
-  }
-
-   * Accept a map of key/value pairs and produce a printable string, redacting any necessary values.
+   * Parse a string to find key-value pairs and redact the values if necessary.<br>
-   * @param map A {@link Map} of key/value pairs such as a collection of properties
-   *
-   * @return A printable string with redacted fields. E.g., "username=jdoe password=********"
-   */
-  public static String redact(final Map<String, String> map) {
-    StringBuilder redacted = new StringBuilder();
-    for (Entry<String, String> entry : map.entrySet()) {
-      redacted.append(entry.getKey());
-      redacted.append("=");
-      redacted.append(redact(entry));
-      redacted.append(" ");
-    }
-    return redacted.toString().trim();
-  }
-
-  /**
-   * Returns the redacted value of the {@link Entry} if the key indicates redaction is necessary.
-   * Otherwise, value is returned, unchanged.
-   *
-   * @param entry A key/value pair
-   *
-   * @return The redacted string for value.
-   */
-  public static String redact(Entry<String, String> entry) {
-    return redact(entry.getKey(), entry.getValue());
-  }
-
-  /**
-   * Parse a string to find key=value pairs and redact the values if necessary. If more than one
-   * key=value pair exists in the input, each pair must be preceded by a hyphen '-' to delineate the
-   * pairs. <br>
-   * Example:<br>
-   * Single value: "password=secret" or "--password=secret" Multiple values: "-Dflag -Dkey=value
-   * --classpath=."
+   * The following format is expected:<br>
+   * - Each key-value pair should be separated by spaces.<br>
+   * - The key of each key-value pair must be preceded by a hyphen '-'.<br>
+   * - Values may or may not be wrapped in quotation marks.<br>
+   * - If a value is wrapped in quotation marks, the actual value should not contain any quotation
+   * mark.<br>
+   * - Keys and values may be separated by an equals sign '=' or any number of spaces.<br>
+   * <br>
+   * Examples:<br>
+   * "--password=secret"<br>
+   * "--user me --password secret"<br>
+   * "-Dflag -Dkey=value"<br>
+   * "--classpath=."<br>
+   * @param permitFirstPairWithoutHyphen When true, prepends the line with a "-", which is later
+   *        removed. This allows the use on, e.g., "password=secret" rather than "--password=secret"
+   *
-  public static String redact(String line) {
-    StringBuilder redacted = new StringBuilder();
-    if (line.startsWith("-")) {
-      line = " " + line;
-      String[] args = line.split(" -");
-      StringBuilder param = new StringBuilder();
-      for (String arg : args) {
-        if (arg.isEmpty()) {
-          param.append("-");
-        } else {
-          String[] pair = arg.split("=", 2);
-          param.append(pair[0].trim());
-          if (pair.length == 1) {
-            redacted.append(param);
-          } else {
-            redacted.append(param).append("=").append(redact(param.toString(), pair[1].trim()));
-          }
-          redacted.append(" ");
-        }
-        param.setLength(0);
-        param.append("-");
-      }
-    } else {
-      String[] args = line.split("=", 2);
-      if (args.length == 1) {
-        redacted.append(line);
-      } else {
-        redacted.append(args[0].trim()).append("=").append(redact(args[0], args[1]));
-      }
-      redacted.append(" ");
+  public static String redact(String line, boolean permitFirstPairWithoutHyphen) {
+
+    boolean wasPaddedWithHyphen = false;
+    if (!line.trim().startsWith("-") && permitFirstPairWithoutHyphen) {
+      line = "-" + line.trim();
+      wasPaddedWithHyphen = true;
-    return redacted.toString().trim();
+
+    // We capture the key, separator, and values separately, replacing only the value at print.
+    Matcher matcher = optionWithValuePattern.matcher(line);
+    while (matcher.find()) {
+      String option = matcher.group(1);
+      if (!containsTabooWord(option)) {
+        continue;
+      }
+
+      String separator = matcher.group(2);
+      String withRedaction = option + separator + redacted;
+      line = line.replace(matcher.group(), withRedaction);
+    }
+
+    if (wasPaddedWithHyphen) {
+      line = line.substring(1);
+    }
+    return line;
-  public static String redactScriptLine(String line) {
-    return line.replaceAll("password=[\\S]+", "password=********");
+  /**
+   * This alias permits the first key-value pair to be given without a leading hyphen, so that
+   * "password=secret" will be properly redacted.
+   *
+   * See {@link org.apache.geode.internal.util.ArgumentRedactor#redact(java.lang.String, boolean)}
+   */
+  public static String redact(String line) {
+    return redact(line, true);
+  }
+
+  public static String redact(final List<String> args) {
+    return redact(String.join(" ", args));
-  public static String redact(String key, String value) {
-    if (shouldBeRedacted(key)) {
-      return "********";
+  public static String redactValueIfNecessary(String key, String value) {
+    if (containsTabooWord(key)) {
+      return redacted;
-    return value.trim();
+    return value;
+
-   * @param key The key in question.
+   * @param key The option key in question.
-  private static boolean shouldBeRedacted(String key) {
+  private static boolean containsTabooWord(String key) {
-
-    // Clean off any flags such as -J and -D to get to the actual start of the parameter
-    String compareKey = key;
-    if (key.startsWith("-J")) {
-      compareKey = key.substring(2);
+    for (String taboo : tabooWords) {
+      if (key.toLowerCase().contains(taboo)) {
+        return true;
+      }
-    if (compareKey.startsWith("-D")) {
-      compareKey = compareKey.substring(2);
-    }
-    return compareKey.toLowerCase().contains("password");
+    return false;

UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 MOV83 MOV83 MOV43 MOV42 MOV44 INS44 INS8 INS29 INS83 INS83 MOV43 INS42 MOV44 INS8 MOV43 UPD42 MOV44 UPD42 UPD42 MOV42 INS45 UPD43 MOV43 MOV43 INS42 INS32 UPD42 MOV42 INS42 INS32 INS65 INS39 INS42 INS60 INS25 MOV60 INS61 INS25 INS41 INS65 MOV41 INS70 UPD42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 INS45 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 INS66 INS66 UPD66 INS42 INS66 INS66 INS39 MOV59 INS27 INS8 UPD43 INS32 INS8 INS42 INS8 INS42 INS66 INS66 INS66 INS65 INS32 INS32 INS42 UPD66 INS44 INS42 INS8 INS9 UPD42 INS9 INS38 INS42 MOV21 INS21 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV60 MOV25 MOV60 INS60 INS21 INS21 INS68 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS32 UPD42 MOV43 INS42 MOV25 INS32 INS7 INS42 INS42 INS42 MOV43 INS38 MOV43 MOV43 INS59 INS7 INS7 INS40 INS42 INS69 INS69 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 INS42 INS32 INS8 INS32 MOV42 MOV45 INS42 INS9 UPD42 INS32 INS18 UPD42 INS42 INS27 INS42 INS32 INS42 INS32 INS43 INS39 INS32 INS42 UPD42 MOV42 INS41 MOV42 INS42 UPD45 INS32 UPD42 UPD42 UPD34 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 INS42 INS34 INS40 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS42 UPD42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL85 DEL5 DEL45 DEL40 DEL34 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL2 DEL42 DEL32 DEL32 DEL32 DEL21 DEL85 DEL5 DEL45 DEL42 DEL34 DEL2 DEL32 DEL42 DEL32 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL60 DEL32 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL8 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL32 DEL45 DEL32 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL45 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL32 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32