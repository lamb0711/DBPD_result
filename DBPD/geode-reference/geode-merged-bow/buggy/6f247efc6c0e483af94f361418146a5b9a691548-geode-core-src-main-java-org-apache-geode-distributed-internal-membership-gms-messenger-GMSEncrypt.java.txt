GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-public final class GMSEncrypt {
+public final class GMSEncrypt<ID extends MemberIdentifier> {
-  private Services services;
+  private Services<ID> services;
-  private GMSMembershipView view;
+  private GMSMembershipView<ID> view;
-  private final ConcurrentHashMap<MemberIdentifier, GMSEncryptionCipherPool> peerEncryptors =
+  private final ConcurrentHashMap<ID, GMSEncryptionCipherPool<ID>> peerEncryptors =
-  private GMSEncryptionCipherPool clusterEncryptor;
+  private GMSEncryptionCipherPool<ID> clusterEncryptor;
-  protected void installView(GMSMembershipView view) {
+  protected void installView(GMSMembershipView<ID> view) {
-  void overrideInstallViewForTest(GMSMembershipView view) {
+  void overrideInstallViewForTest(GMSMembershipView<ID> view) {
-      this.clusterEncryptor = new GMSEncryptionCipherPool(this, generateSecret(dhPublicKey));
+      this.clusterEncryptor = new GMSEncryptionCipherPool<>(this, generateSecret(dhPublicKey));
-    this.clusterEncryptor = new GMSEncryptionCipherPool(this, secretBytes);
+    this.clusterEncryptor = new GMSEncryptionCipherPool<>(this, secretBytes);
-  private byte[] getPublicKeyIfIAmLocator(MemberIdentifier mbr) {
-    GMSLocator locator = (GMSLocator) services.getLocator();
+  private byte[] getPublicKeyIfIAmLocator(ID mbr) {
+    GMSLocator<ID> locator = (GMSLocator<ID>) services.getLocator();
-  GMSEncrypt(Services services, String dhSKAlgo) throws Exception {
+  GMSEncrypt(Services<ID> services, String dhSKAlgo) throws Exception {
-  byte[] decryptData(byte[] data, MemberIdentifier member) throws Exception {
+  byte[] decryptData(byte[] data, ID member) throws Exception {
-  byte[] encryptData(byte[] data, MemberIdentifier member) throws Exception {
+  byte[] encryptData(byte[] data, ID member) throws Exception {
-    GMSEncryptionCipherPool encryptor = new GMSEncryptionCipherPool(this, generateSecret(pkBytes));
+    GMSEncryptionCipherPool<ID> encryptor =
+        new GMSEncryptionCipherPool<>(this, generateSecret(pkBytes));
-  private byte[] lookupKeyByMember(MemberIdentifier member) {
+  private byte[] lookupKeyByMember(ID member) {
-  protected byte[] getPublicKey(MemberIdentifier member) {
+  protected byte[] getPublicKey(ID member) {
-      MemberIdentifier localMbr = services.getMessenger().getMemberID();
+      ID localMbr = services.getMessenger().getMemberID();
-  protected void setPublicKey(byte[] publickey, MemberIdentifier mbr) {
+  protected void setPublicKey(byte[] publickey, ID mbr) {
-      peerEncryptors.replace(mbr, new GMSEncryptionCipherPool(this, generateSecret(publickey)));
+      peerEncryptors.replace(mbr, new GMSEncryptionCipherPool<>(this, generateSecret(publickey)));
-  private GMSEncryptionCipherPool getPeerEncryptor(MemberIdentifier member)
+  private GMSEncryptionCipherPool<ID> getPeerEncryptor(ID member)
-        return new GMSEncryptionCipherPool(this, generateSecret(lookupKeyByMember(member)));
+        return new GMSEncryptionCipherPool<>(this, generateSecret(lookupKeyByMember(member)));

INS73 INS42 MOV43 INS74 INS74 UPD74 INS74 INS74 MOV43 INS43 MOV43 INS43 INS43 INS74 MOV43 INS43 INS74 INS74 UPD43 INS74 UPD43 UPD43 UPD43 UPD43 UPD43 MOV43 INS43 UPD43 INS42 INS42 INS42 MOV43 INS43 UPD42 MOV42 MOV43 INS43 MOV43 INS43 UPD42 INS74 MOV43 INS43 UPD42 UPD42 INS74 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV43 INS43 INS42 MOV43 INS43 INS74 INS42 INS74 INS42 INS74 UPD43 MOV43 MOV43 INS43 MOV43 UPD42 INS74 INS42 INS74 MOV43 MOV43 INS74 MOV43