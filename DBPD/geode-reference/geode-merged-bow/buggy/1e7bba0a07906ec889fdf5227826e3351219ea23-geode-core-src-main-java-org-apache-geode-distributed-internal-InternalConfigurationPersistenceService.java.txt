GEODE-7398 :show deployer and deploy time (#4509)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>

+import static java.util.Arrays.asList;
+import java.nio.file.Paths;
+import java.time.Instant;
-import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.function.Function;
-import java.util.stream.Collectors;
+import org.apache.shiro.subject.Subject;
+import org.apache.geode.management.configuration.Deployment;
-
-      if (groups == null || groups.length == 0) {
-        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
-      }
-      for (String group : groups) {
+      for (String group : listOf(groups)) {
-      if (groups == null) {
-        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
-      }
-      for (String group : groups) {
+      for (String group : listOf(groups)) {
+    addJarsToThisLocator(getDeployedBy(), Instant.now().toString(), jarFullPaths, groups);
+  }
+
+  @VisibleForTesting
+  void addJarsToThisLocator(String deployedBy, String deployedTime,
+      List<String> jarFullPaths, String[] groups) throws IOException {
-      if (groups == null) {
-        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
-      }
-      Region<String, Configuration> configRegion = getConfigurationRegion();
-      for (String group : groups) {
-        Configuration configuration = configRegion.get(group);
-
-        if (configuration == null) {
-          configuration = new Configuration(group);
-          createConfigDirIfNecessary(group);
-        }
-
-        Path groupDir = configDirPath.resolve(group);
-        Set<String> jarNames = new HashSet<>();
-        for (String jarFullPath : jarFullPaths) {
-          File stagedJar = new File(jarFullPath);
-          String jarFileName = stagedJar.getName();
-          jarNames.add(jarFileName);
-          Path filePath = groupDir.resolve(jarFileName);
-          FileUtils.copyFile(stagedJar, filePath.toFile());
-          // remove old version for the same artifact id
-          String artifactId = JarDeployer.getArtifactId(jarFileName);
-          for (File file : groupDir.toFile().listFiles()) {
-            if (file.getName().equals(jarFileName)) {
-              continue;
-            }
-            if (JarDeployer.getArtifactId(file.getName()).equals(artifactId)) {
-              FileUtils.deleteQuietly(file);
-            }
-          }
-        }
-
-        // update the record after writing the jars to the file system, since the listener
-        // will need the jars on file to upload to other locators. Need to update the jars
-        // using a new copy of the Configuration so that the change listener will pick up the jar
-        // name changes.
-        String memberId = cache.getMyId().getId();
-
-        Configuration configurationCopy = new Configuration(configuration);
-        configurationCopy.addJarNames(jarNames);
-        configRegion.put(group, configurationCopy, memberId);
-      }
+      addJarsToGroups(listOf(groups), jarFullPaths, deployedBy, deployedTime);
+  private void addJarsToGroups(List<String> groups, List<String> jarFullPaths, String deployedBy,
+      String deployedTime) throws IOException {
+    for (String group : groups) {
+      copyJarsToGroupDir(group, jarFullPaths);
+      addJarsToGroupConfig(group, jarFullPaths, deployedBy, deployedTime);
+    }
+  }
+
+  private void addJarsToGroupConfig(String group, List<String> jarFullPaths, String deployedBy,
+      String deployedTime) throws IOException {
+    Region<String, Configuration> configRegion = getConfigurationRegion();
+    Configuration configuration = getConfigurationCopy(configRegion, group);
+
+    jarFullPaths.stream()
+        .map(toFileName())
+        .map(jarFileName -> new Deployment(jarFileName, deployedBy, deployedTime))
+        .forEach(configuration::putDeployment);
+
+    String memberId = cache.getMyId().getId();
+    configRegion.put(group, configuration, memberId);
+  }
+
+  private static List<String> listOf(String[] groups) {
+    if (groups == null || groups.length == 0) {
+      return Collections.singletonList(ConfigurationPersistenceService.CLUSTER_CONFIG);
+    }
+    return asList(groups);
+  }
+
+  private static Function<String, String> toFileName() {
+    return fullPath -> Paths.get(fullPath).getFileName().toString();
+  }
+
+  private void copyJarsToGroupDir(String group, List<String> jarFullPaths) throws IOException {
+    Path groupDir = configDirPath.resolve(group);
+    for (String jarFullPath : jarFullPaths) {
+      File stagedJarFile = new File(jarFullPath);
+      String jarFileName = stagedJarFile.getName();
+      Path destinationJarPath = groupDir.resolve(jarFileName);
+      FileUtils.copyFile(stagedJarFile, destinationJarPath.toFile());
+      removeOtherVersionsOf(groupDir, jarFileName);
+    }
+  }
+
+  private static void removeOtherVersionsOf(Path groupDir, String jarFileName) throws IOException {
+    String artifactId = JarDeployer.getArtifactId(jarFileName);
+    for (File file : groupDir.toFile().listFiles()) {
+      if (file.getName().equals(jarFileName)) {
+        continue;
+      }
+      if (JarDeployer.getArtifactId(file.getName()).equals(artifactId)) {
+        FileUtils.deleteQuietly(file);
+      }
+    }
+  }
+
+  private Configuration getConfigurationCopy(Region<String, Configuration> configRegion,
+      String group) throws IOException {
+    Configuration configuration = configRegion.get(group);
+
+    if (configuration == null) {
+      configuration = new Configuration(group);
+      createConfigDirIfNecessary(group);
+    } else {
+      configuration = new Configuration(configuration);
+    }
+    return configuration;
+  }
+
+    if (configRegion != null) {
+      return configRegion;
+    }
-      if (configRegion == null) {
-        File diskDir = configDiskDirPath.toFile();
+      File diskDir = configDiskDirPath.toFile();
-        if (!diskDir.exists() && !diskDir.mkdirs()) {
-          throw new IOException("Cannot create directory at " + configDiskDirPath);
-        }
-
-        File[] diskDirs = {diskDir};
-        cache.createDiskStoreFactory().setDiskDirs(diskDirs).setAutoCompact(true)
-            .setMaxOplogSize(10).create(CLUSTER_CONFIG_DISK_STORE_NAME);
-
-        AttributesFactory<String, Configuration> regionAttrsFactory = new AttributesFactory<>();
-        regionAttrsFactory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);
-        regionAttrsFactory.setCacheListener(new ConfigurationChangeListener(this, cache));
-        regionAttrsFactory.setDiskStoreName(CLUSTER_CONFIG_DISK_STORE_NAME);
-        regionAttrsFactory.setScope(Scope.DISTRIBUTED_ACK);
-        InternalRegionArguments internalArgs = new InternalRegionArguments();
-        internalArgs.setIsUsedForMetaRegion(true);
-        internalArgs.setMetaRegionWithTransactions(false);
-
-        configRegion = cache.createVMRegion(CONFIG_REGION_NAME, regionAttrsFactory.create(),
-            internalArgs);
+      if (!diskDir.exists() && !diskDir.mkdirs()) {
+        throw new IOException("Cannot create directory at " + configDiskDirPath);
+
+      File[] diskDirs = {diskDir};
+      cache.createDiskStoreFactory().setDiskDirs(diskDirs).setAutoCompact(true)
+          .setMaxOplogSize(10).create(CLUSTER_CONFIG_DISK_STORE_NAME);
+
+      AttributesFactory<String, Configuration> regionAttrsFactory = new AttributesFactory<>();
+      regionAttrsFactory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);
+      regionAttrsFactory.setCacheListener(new ConfigurationChangeListener(this, cache));
+      regionAttrsFactory.setDiskStoreName(CLUSTER_CONFIG_DISK_STORE_NAME);
+      regionAttrsFactory.setScope(Scope.DISTRIBUTED_ACK);
+      InternalRegionArguments internalArgs = new InternalRegionArguments();
+      internalArgs.setIsUsedForMetaRegion(true);
+      internalArgs.setMetaRegionWithTransactions(false);
+
+      return cache.createVMRegion(CONFIG_REGION_NAME, regionAttrsFactory.create(),
+          internalArgs);
-      if (configRegion == null) {
-        status.set(SharedConfigurationStatus.STOPPED);
-      }
+      status.set(SharedConfigurationStatus.STOPPED);
-      if (configRegion == null) {
-        status.set(SharedConfigurationStatus.STOPPED);
-      }
+      status.set(SharedConfigurationStatus.STOPPED);
-
-    return configRegion;
-    Set<String> jarFileNames = Arrays.stream(groupConfigDir.list())
-        .filter((String filename) -> filename.endsWith(".jar")).collect(Collectors.toSet());
-    configuration.addJarNames(jarFileNames);
+    String deployedBy = getDeployedBy();
+    String deployedTime = Instant.now().toString();
+    List<String> fileNames = asList(groupConfigDir.list());
+    loadDeploymentsFromFileNames(fileNames, configuration, deployedBy, deployedTime);
+  private String getDeployedBy() {
+    Subject subject = cache.getSecurityService().getSubject();
+    return subject == null ? null : subject.getPrincipal().toString();
+  }
+
+  @VisibleForTesting
+  static void loadDeploymentsFromFileNames(Collection<String> fileNames,
+      Configuration configuration, String deployedBy, String deployedTime) {
+    fileNames.stream()
+        .filter(filename -> filename.endsWith(".jar"))
+        .map(jarFileName -> new Deployment(jarFileName, deployedBy, deployedTime))
+        .forEach(configuration::putDeployment);
+  }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 INS44 MOV44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 MOV44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 MOV43 MOV8 INS83 MOV43 INS42 INS44 MOV44 INS43 INS8 MOV8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS74 INS42 INS42 INS21 INS42 MOV43 INS42 MOV43 INS42 INS74 INS42 INS5 INS42 INS42 MOV21 INS54 UPD74 MOV74 INS42 INS74 INS42 MOV43 INS42 INS43 INS42 INS42 MOV70 INS43 INS42 INS74 INS42 MOV43 INS42 INS43 INS42 INS42 MOV60 INS60 MOV21 MOV60 MOV21 INS43 INS43 INS5 INS42 INS25 INS41 INS43 INS43 INS43 INS41 INS43 INS42 INS42 MOV60 INS70 INS43 INS42 INS43 INS42 INS74 INS42 INS42 MOV60 MOV25 INS41 MOV60 INS54 INS60 INS60 INS42 INS60 INS41 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS43 INS32 INS43 INS43 INS43 MOV85 INS8 MOV8 UPD43 UPD43 MOV43 INS43 INS42 INS44 INS42 INS8 INS42 INS43 INS43 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS85 MOV27 INS8 INS32 INS42 INS42 INS42 INS86 INS42 MOV44 INS42 INS8 INS42 INS42 INS43 INS43 INS43 INS8 INS42 UPD27 INS8 MOV8 INS12 INS12 MOV43 INS59 INS43 INS59 UPD74 INS43 INS59 INS16 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS21 UPD42 UPD42 INS42 INS43 INS42 INS21 INS21 INS42 INS42 MOV42 INS42 INS32 INS32 INS42 INS90 UPD42 INS42 INS41 INS42 INS42 INS59 INS32 MOV60 INS60 MOV60 INS21 INS21 INS42 INS42 INS42 INS21 MOV41 INS41 MOV44 INS8 MOV44 INS8 INS42 INS32 INS42 INS42 INS32 UPD43 UPD42 MOV32 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS27 INS33 INS32 INS42 INS42 INS32 INS42 INS90 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS7 MOV32 MOV21 MOV53 MOV21 MOV53 INS42 INS32 INS42 UPD42 UPD42 INS32 INS42 INS42 INS33 INS32 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS59 INS14 INS42 INS42 INS40 INS32 INS42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV86 INS59 INS14 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL85 DEL5 DEL40 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL42 DEL85 DEL5 DEL40 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL5 DEL40 DEL4 DEL3 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL74 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL8 DEL70 DEL8 DEL54 DEL8 DEL31 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL12 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL44