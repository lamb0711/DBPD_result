GEODE-7167: eliminate NPE when parsing locators property (#4018)


+   *
+   * @see org.apache.geode.distributed.ConfigurationProperties#LOCATORS for format
-    int port;
+      String str = parts.nextToken();
+
+      final int portSpecificationStart = str.indexOf('[');
+
+      if (portSpecificationStart == -1) {
+        throw createBadPortException(str);
+      }
+
+      host = str.substring(0, portSpecificationStart);
+
+      int idx = host.lastIndexOf('@');
+      if (idx < 0) {
+        idx = host.lastIndexOf(':');
+      }
+      String start = host.substring(0, idx > -1 ? idx : host.length());
+      if (start.indexOf(':') >= 0) { // a single numeric ipv6 address
+        idx = host.lastIndexOf('@');
+      }
+      if (idx >= 0) {
+        host = host.substring(idx + 1, host.length());
+      }
+
+      int startIdx = portSpecificationStart + 1;
+      int endIdx = str.indexOf(']');
+
+      if (endIdx == -1) {
+        throw createBadPortException(str);
+      }
+
+      final int port;
+
-        String str = parts.nextToken();
-        host = str.substring(0, str.indexOf('['));
-        int idx = host.lastIndexOf('@');
-        if (idx < 0) {
-          idx = host.lastIndexOf(':');
-        }
-        String start = host.substring(0, idx > -1 ? idx : host.length());
-        if (start.indexOf(':') >= 0) { // a single numeric ipv6 address
-          idx = host.lastIndexOf('@');
-        }
-        if (idx >= 0) {
-          host = host.substring(idx + 1, host.length());
-        }
-
-        int startIdx = str.indexOf('[') + 1;
-        int endIdx = str.indexOf(']');
-        if (port <= 0) {
-          continue;
-        }
-        InetSocketAddress isa = new InetSocketAddress(host, port);
-
-        if (checkLoopback) {
-          if (isLoopback && !isa.getAddress().isLoopbackAddress()) {
-            throw new GemFireConfigException(
-                "This process is attempting to join with a loopback address (" + bindAddress
-                    + ") using a locator that does not have a local address (" + isa
-                    + ").  On Unix this usually means that /etc/hosts is misconfigured.");
-          }
-        }
-        HostAddress la = new HostAddress(isa, host);
-        if (!inetAddresses.contains(isa)) {
-          inetAddresses.add(isa);
-          result.add(la);
-        }
-        // this shouldn't happen because the config has already been parsed and
-        // validated
+        throw createBadPortException(str);
+      }
+
+      final InetSocketAddress isa = new InetSocketAddress(host, port);
+
+      final InetAddress locatorAddress = isa.getAddress();
+
+      if (locatorAddress == null) {
+        throw new GemFireConfigException("This process is attempting to use a locator" +
+            " at an unknown address or FQDN: " + host);
+      }
+
+      if (checkLoopback && isLoopback && !locatorAddress.isLoopbackAddress()) {
+        throw new GemFireConfigException(
+            "This process is attempting to join with a loopback address (" + bindAddress
+                + ") using a locator that does not have a local address (" + isa
+                + ").  On Unix this usually means that /etc/hosts is misconfigured.");
+      }
+
+      HostAddress la = new HostAddress(isa, host);
+      if (!inetAddresses.contains(isa)) {
+        inetAddresses.add(isa);
+        result.add(la);
+  private static GemFireConfigException createBadPortException(final String str) {
+    return new GemFireConfigException("This process is attempting to use a locator" +
+        " with a malformed port specification: " + str);
+  }
+

INS31 MOV8 INS83 INS83 INS43 INS42 INS44 INS8 INS65 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 INS61 MOV41 INS42 INS83 INS43 INS42 INS41 INS67 INS66 MOV32 MOV8 INS42 INS14 INS40 INS42 INS60 INS25 MOV60 INS54 INS60 MOV25 INS43 INS27 INS83 INS39 INS59 INS27 INS8 UPD27 INS83 INS8 INS12 INS83 INS83 INS43 INS59 INS27 INS42 INS45 INS45 INS42 INS42 MOV32 INS42 INS38 INS53 UPD42 INS38 INS53 MOV21 MOV44 INS8 INS42 INS42 MOV32 INS42 INS33 INS53 INS42 INS34 INS32 INS42 INS42 INS34 INS32 INS53 INS14 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS45 INS42 DEL42 DEL42 DEL13 DEL32 DEL34 DEL18 DEL42 DEL8 DEL12 DEL54 DEL61 DEL8