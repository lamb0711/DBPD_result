Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.offheap.Releasable;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+  protected boolean isHDFSQueue;
+  
-  protected volatile ConcurrentLinkedQueue<GatewaySenderEventImpl> tmpQueuedEvents = new ConcurrentLinkedQueue<GatewaySenderEventImpl>();
+  protected volatile ConcurrentLinkedQueue<TmpQueueEvent> tmpQueuedEvents = new ConcurrentLinkedQueue<>();
+    this.isHDFSQueue = attrs.isHDFSQueue();
-      initializeEventIdIndex();
+      if (!attrs.isHDFSQueue())
+        initializeEventIdIndex();
-      initializeEventIdIndex();
+      if (!attrs.isHDFSQueue())
+        initializeEventIdIndex();
+    this.isHDFSQueue = attrs.isHDFSQueue();
+  public boolean getIsHDFSQueue() {
+    return this.isHDFSQueue;
+  }
+  
-  
+
+  final public RegionQueue getQueue() {
+    if (this.eventProcessor != null) {
+      if (!(this.eventProcessor instanceof ConcurrentSerialGatewaySenderEventProcessor)) {
+        return this.eventProcessor.getQueue();
+      }
+      else {
+        throw new IllegalArgumentException(
+            "getQueue() for concurrent serial gateway sender");
+      }
+    }
+    return null;
+  }
+
+    if (getIsHDFSQueue() && event.getOperation().isEviction()) {
+      if (logger.isDebugEnabled())
+        logger.debug("Eviction event not queued: " + event);
+      stats.incEventsNotQueued();
+      return;
+    }
+    
+    EntryEventImpl clonedEvent = new EntryEventImpl(event, false);
+    boolean freeClonedEvent = true;
+    try {
-    EntryEventImpl clonedEvent = new EntryEventImpl(event/*, true*/); //this boolean is merged through 43643. looks like offheaprelated change.
-    //below try block is introduced in cheetah. This is offheap related change. 
-//    boolean freeClonedEvent = true;
-//    try {
+    Region region = event.getRegion();
-        if (getEventProcessor() != null && !(getEventProcessor().getDispatcher() instanceof GatewaySenderEventCallbackDispatcher)) {
+          AbstractGatewaySenderEventProcessor ep = getEventProcessor();
+        if (ep != null && !(ep.getDispatcher() instanceof GatewaySenderEventCallbackDispatcher)) {
-      try {
-        synchronized (this.queuedEventsSync) {
-          if (!this.enqueuedAllTempQueueEvents) {
-            if (!this.lifeCycleLock.readLock().tryLock()) {
-              // Get substitution value to enqueue if necessary
-              Object substituteValue = getSubstituteValue(clonedEvent, operation);
-              GatewaySenderEventImpl senderEvent = new GatewaySenderEventImpl(
-                  operation, clonedEvent, substituteValue, false);
-              if (isDebugEnabled) {
-                logger.debug("Event : {} is added to TempQueue", clonedEvent);
-              }
-              this.tmpQueuedEvents.add(senderEvent);
-              stats.incTempQueueSize();
-              return;
+      synchronized (this.queuedEventsSync) {
+        if (!this.enqueuedAllTempQueueEvents) {
+          if (!this.lifeCycleLock.readLock().tryLock()) {
+            Object substituteValue = getSubstituteValue(clonedEvent, operation);
+            this.tmpQueuedEvents.add(new TmpQueueEvent(operation, clonedEvent, substituteValue));
+            freeClonedEvent = false;
+            stats.incTempQueueSize();
+            if (isDebugEnabled) {
+              logger.debug("Event : {} is added to TempQueue", clonedEvent);
+            return;
-      } catch (IOException e) {
-        logger.fatal(LocalizedMessage.create(
-                LocalizedStrings.GatewayImpl_0_AN_EXCEPTION_OCCURRED_WHILE_QUEUEING_1_TO_PERFORM_OPERATION_2_FOR_3,
-                new Object[] { this, getId(), operation, clonedEvent }), e);
-        return;
-//    } finally {
-//      if (freeClonedEvent) {
-//        clonedEvent.release(); // fix for bug 48035
-//      }
-//    }
+    } finally {
+      if (freeClonedEvent) {
+        clonedEvent.release(); // fix for bug 48035
+      }
+    }
-      GatewaySenderEventImpl nextEvent = null;
+      TmpQueueEvent nextEvent = null;
+          try {
-            this.eventProcessor.enqueueEvent(nextEvent.getEnumListenerEvent(),
-                nextEvent.getEntryEvent(), nextEvent.getSubstituteValue());
-            // below commented code is from cheetah. Offheap is considered here.
-            // Once we consider offheap in cedar, should we consider below code
-//=======
-//            try {
-//              if (!beforeEnqueue(nextEvent)) {
-//                // Yogesh: this should not be a warning message in SQLFire or
-//                // GemFire. In SQLFire it should be logged only TraceDBSynchronizer
-//                // is ON
-//                // logger.warning(LocalizedStrings
-//                // .GatewayEventProcessor_EVENT_0_IS_NOT_ADDED_TO_QUEUE, event);
-//                stats.incEventsFiltered();
-//                continue;
-//              }
-//              this.eventProcessor.enqueueEvent(nextEvent.getEventType(), nextEvent);
-//            } finally {
-//              nextEvent.freeOffHeapReferences();
-//            }
-//>>>>>>> .merge-right.r43020
+            this.eventProcessor.enqueueEvent(nextEvent.getOperation(),
+                nextEvent.getEvent(), nextEvent.getSubstituteValue());
+          } finally {
+            nextEvent.release();
+          }
-                new Object[] { this, getId(), nextEvent.getEnumListenerEvent(), nextEvent }), e);
+                new Object[] { this, getId(), nextEvent.getOperation(), nextEvent }), e);
-	synchronized (this.queuedEventsSync) {
-      Iterator<GatewaySenderEventImpl> itr = this.tmpQueuedEvents.iterator();
+    synchronized (this.queuedEventsSync) {
+      Iterator<TmpQueueEvent> itr = this.tmpQueuedEvents.iterator();
-        GatewaySenderEventImpl event = itr.next();
-        if (tailKey.equals(((EntryEventImpl) event.getEntryEvent()).getTailKey())) {
+        TmpQueueEvent event = itr.next();
+        if (tailKey.equals(event.getEvent().getTailKey())) {
-          //event.release(); //related to off-heap. Merged from cheetah r45415
+          event.release();
-    tmpQueuedEvents.clear(); // ultimately it poll on queue which will take
-                             // time. hence below synchronization
+    TmpQueueEvent nextEvent = null;
+    while ((nextEvent = tmpQueuedEvents.poll()) != null) {
+      nextEvent.release();
+    }
-      tmpQueuedEvents.clear();
+      while ((nextEvent = tmpQueuedEvents.poll()) != null) {
+        nextEvent.release();
+      }
+  
+  /**
+   * Instances of this class allow us to delay queuing an incoming event.
+   * What used to happen was that the tmpQ would have a GatewaySenderEventImpl
+   * added to it. But then when we took it out we had to ask it for its EntryEventImpl.
+   * Then we created another GatewaySenderEventImpl.
+   * As part of the off-heap work, the GatewaySenderEventImpl no longer has a EntryEventImpl.
+   * So this class allows us to defer creation of the GatewaySenderEventImpl until we
+   * are ready to actually enqueue it.
+   * The caller is responsible for giving us an EntryEventImpl that we own and that
+   * we will release. This is done by making a copy/clone of the original event.
+   * This fixes bug 52029.
+   * 
+   * @author dschneider
+   *
+   */
+  public static class TmpQueueEvent implements Releasable {
+    private final EnumListenerEvent operation;
+    private final @Retained EntryEventImpl event;
+    private final Object substituteValue;
+    public TmpQueueEvent(EnumListenerEvent op, @Retained EntryEventImpl e, Object subValue) {
+      this.operation = op;
+      this.event = e;
+      this.substituteValue = subValue;
+    }
+    
+    public EnumListenerEvent getOperation() {
+      return this.operation;
+    }
+    
+    public @Unretained EntryEventImpl getEvent() {
+      return this.event;
+    }
+    
+    public Object getSubstituteValue() {
+      return this.substituteValue;
+    }
+
+    @Override
+    public void release() {
+      this.event.release();
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS55 INS83 INS39 INS59 UPD74 MOV74 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 INS8 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 UPD43 INS21 INS21 INS41 INS42 INS25 INS41 INS25 INS60 INS54 INS60 INS61 MOV51 INS65 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS78 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS78 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 UPD74 MOV74 INS7 INS7 INS22 INS27 INS8 INS33 INS27 INS8 MOV43 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS78 MOV43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS42 INS42 INS41 INS42 INS41 INS42 INS21 INS22 INS32 INS25 INS25 INS22 INS32 INS52 INS42 INS22 INS33 INS25 INS32 INS32 INS25 INS21 INS41 INS42 INS9 INS60 MOV21 MOV60 MOV25 MOV25 MOV25 MOV54 INS25 INS42 INS42 INS33 INS36 INS33 MOV21 INS61 MOV21 INS42 INS42 INS42 INS7 INS7 INS7 INS22 INS22 INS22 INS32 INS52 INS42 INS42 INS42 INS38 MOV21 INS38 MOV21 INS52 INS42 INS42 INS42 INS52 INS42 INS38 INS8 INS8 INS42 INS32 INS42 INS32 INS21 INS32 MOV43 INS9 INS43 INS59 MOV8 INS42 INS8 UPD43 UPD74 INS7 INS27 INS8 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS32 INS32 INS36 INS41 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV25 INS21 UPD42 UPD43 INS42 INS32 UPD42 UPD42 INS36 INS33 MOV21 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS62 INS32 INS14 INS42 INS42 INS27 INS42 INS42 INS32 UPD42 UPD43 INS42 INS42 INS7 INS22 INS43 INS22 INS42 INS43 INS45 INS45 INS42 INS60 INS42 INS42 UPD42 INS21 INS42 INS32 UPD42 UPD42 INS52 INS42 INS42 INS52 INS42 INS42 INS43 INS59 INS8 INS32 INS32 INS42 INS42 INS42 INS42 MOV32 INS54 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV25 MOV8 INS8 INS21 INS21 INS32 INS7 INS32 UPD42 INS42 MOV22 INS42 INS14 INS42 INS9 INS42 INS42 UPD43 MOV43 MOV42 MOV42 MOV42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL42 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL32 DEL42 DEL42 DEL4 DEL3 DEL32 DEL42 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8 DEL32 DEL11 DEL36 DEL8 DEL8