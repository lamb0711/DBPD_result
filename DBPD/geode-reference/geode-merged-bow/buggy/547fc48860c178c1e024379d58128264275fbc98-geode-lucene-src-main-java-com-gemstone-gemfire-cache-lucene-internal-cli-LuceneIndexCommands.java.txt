This closes #219

GEODE-11: Added Limit to lucene search gfsh commands

Added an option to specify limit in gfsh search. Added a dunit test to verify.

GEODE-11 : Pagination for gfsh lucene search command

Added pagination for gfsh lucene search results. Added junit test to verify.

GEODE-11 : Fixing display messages in pagination

+import java.io.IOException;
+
+import com.gemstone.gemfire.management.internal.cli.result.CommandResult;
+import com.gemstone.gemfire.management.internal.cli.shell.Gfsh;
+  private List<LuceneSearchResults> searchResults=null;
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
+  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
-      mandatory=true,
+      mandatory = true,
-    @CliOption (key = LuceneCliStrings.LUCENE__REGION_PATH,
+    @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH,
-    @CliOption (key = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING,
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING,
-    @CliOption (key = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD,
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD,
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD__HELP) final String defaultField) {
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD__HELP) final String defaultField,
+
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT,
+      mandatory = false,
+      unspecifiedDefaultValue = "-1",
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT__HELP) final int limit,
+
+    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE,
+      mandatory = false,
+      unspecifiedDefaultValue = "-1",
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize)
+  {
-
-      LuceneQueryInfo queryInfo=new LuceneQueryInfo(indexName,regionPath,queryString, defaultField);
-      return getSearchResults(queryInfo);
-
+      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit);
+      if (pageSize == -1) {
+        pageSize = Integer.MAX_VALUE;
+      }
+      searchResults = getSearchResults(queryInfo);
+      return displayResults(pageSize);
-  private Result getSearchResults(final LuceneQueryInfo queryInfo) throws Exception {
+  private Result displayResults(int pageSize) throws IOException {
+    if (searchResults.size() == 0) {
+      return ResultBuilder.createInfoResult(LuceneCliStrings.LUCENE_SEARCH_INDEX__NO_RESULTS_MESSAGE);
+    }
+
+    Gfsh gfsh = initGfsh();
+    boolean pagination = searchResults.size() > pageSize;
+    int fromIndex = 0;
+    int toIndex = pageSize < searchResults.size() ? pageSize : searchResults.size();
+    int currentPage = 1;
+    int totalPages = (int) Math.ceil((float) searchResults.size() / pageSize);
+    boolean skipDisplay = false;
+    String step = null;
+    do {
+
+      if (!skipDisplay) {
+        CommandResult commandResult = (CommandResult) getResults(fromIndex, toIndex);
+        if (!pagination) {
+          return commandResult;
+        }
+        Gfsh.println();
+        while (commandResult.hasNextLine()) {
+          gfsh.printAsInfo(commandResult.nextLine());
+        }
+        gfsh.printAsInfo("\t\tPage " + currentPage + " of " + totalPages);
+        String message = ("Press n to move to next page, q to quit and p to previous page : ");
+        step = gfsh.interact(message);
+      }
+
+      switch (step) {
+        case "n":
+        {
+          if (currentPage == totalPages) {
+            gfsh.printAsInfo("No more results to display.");
+            step = gfsh.interact("Press p to move to last page and q to quit.");
+            skipDisplay = true;
+            continue;
+          }
+
+          if(skipDisplay) {
+            skipDisplay=false;
+          }
+          else {
+            currentPage++;
+            int current = fromIndex;
+            fromIndex = toIndex;
+            toIndex = (pageSize + fromIndex >= searchResults.size()) ? searchResults.size() : pageSize + fromIndex;
+          }
+          break;
+        }
+        case "p": {
+          if (currentPage == 1) {
+            gfsh.printAsInfo("At the top of the search results.");
+            step = gfsh.interact("Press n to move to the first page and q to quit.");
+            skipDisplay=true;
+            continue;
+          }
+
+          if (skipDisplay) {
+            skipDisplay = false;
+          }
+          else {
+            currentPage--;
+            int current = fromIndex;
+            toIndex = fromIndex;
+            fromIndex = current - pageSize <= 0 ? 0 : current - pageSize;
+          }
+          break;
+        }
+        case "q":
+          return ResultBuilder.createInfoResult("Search complete.");
+        default:
+          Gfsh.println("Invalid option");
+          break;
+      }
+    } while(true);
+  }
+
+  protected Gfsh initGfsh() {
+    return Gfsh.getCurrentInstance();
+  }
+
+  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws CommandResultException {
-    List<LuceneSearchResults> results = functionResults.stream()
+    return functionResults.stream()
-    if (results.size() != 0) {
-      final TabularResultData data = ResultBuilder.createTabularResultData();
-      for (LuceneSearchResults struct : results) {
-        data.accumulate("key", struct.getKey());
-        data.accumulate("value", struct.getValue());
-        data.accumulate("score", struct.getScore());
-      }
-      return ResultBuilder.buildResult(data);
+  }
+
+  private Result getResults(int fromIndex, int toIndex){
+    final TabularResultData data = ResultBuilder.createTabularResultData();
+    for (int i = fromIndex; i < toIndex; i++) {
+      data.accumulate("key", searchResults.get(i).getKey());
+      data.accumulate("value", searchResults.get(i).getValue());
+      data.accumulate("score", searchResults.get(i).getScore());
-    else {
-      return ResultBuilder.createInfoResult(LuceneCliStrings.LUCENE_SEARCH_INDEX__NO_RESULTS_MESSAGE);
-    }
-    //@TODO : Pagination
+    return ResultBuilder.buildResult(data);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS74 INS59 INS44 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS8 MOV74 UPD43 INS83 MOV43 INS42 INS44 INS44 INS8 INS43 INS43 INS42 INS33 INS77 INS83 INS39 INS42 INS77 INS39 INS42 INS42 INS39 INS42 INS42 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS19 INS42 INS41 UPD42 INS41 INS39 INS42 INS39 INS42 MOV60 INS24 MOV41 INS42 INS42 INS42 INS80 INS80 INS80 INS80 INS42 INS80 INS80 INS80 INS80 INS27 MOV8 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS8 INS9 INS32 MOV32 INS58 INS27 INS37 INS8 INS42 INS40 INS42 INS9 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS45 INS42 INS40 INS25 INS21 INS32 INS34 INS42 INS42 INS32 INS42 INS27 INS42 INS34 INS42 INS16 INS42 INS34 INS42 INS11 INS42 INS9 INS42 INS42 INS33 INS25 INS50 INS42 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS21 INS21 MOV43 INS27 INS8 INS7 INS32 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS39 INS32 INS38 INS8 INS42 INS49 INS8 INS49 INS8 INS49 INS41 INS49 INS21 INS10 INS42 INS42 INS32 INS32 INS32 INS42 INS38 INS21 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS60 INS25 INS21 INS61 INS21 INS60 INS21 INS45 INS25 INS25 INS10 INS45 INS25 INS25 INS10 INS45 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 MOV43 INS42 INS34 INS7 INS42 INS42 INS11 INS42 INS43 INS59 INS38 INS8 INS32 INS32 INS8 INS32 INS43 INS59 INS7 INS27 INS8 INS42 INS8 INS8 INS27 INS8 INS42 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS39 INS32 INS42 INS42 INS11 INS42 INS41 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS18 INS21 INS21 INS60 INS21 INS21 INS42 INS34 INS21 INS21 INS21 INS18 INS21 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS37 INS39 INS59 INS7 INS7 INS32 INS7 INS7 INS7 INS37 INS39 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS45 INS42 INS32 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS45 INS36 INS32 INS27 INS42 INS42 INS45 INS27 INS34 INS27 INS27 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25