GEODE-787: MemoryIndexStore needs unit tests

Minor refactoring and adding of unit tests
Long term plan is to remove the reference to the cache

+import com.gemstone.gemfire.cache.Cache;
+  private Cache cache;
-    this.region = region;
-    RegionAttributes ra = region.getAttributes();
-    // Initialize the reverse-map if in-place modification is set by the
-    // application.
-    if (IndexManager.isObjectModificationInplace()) {
-      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(),
-          ra.getLoadFactor(), ra.getConcurrencyLevel());
-    }
-    this.internalIndexStats = internalIndexStats;
+    this(region, internalIndexStats, GemFireCacheImpl.getInstance());
+  
+  public MemoryIndexStore(Region region,
+	      InternalIndexStatistics internalIndexStats, Cache cache) {
+	    this.region = region;
+	    RegionAttributes ra = region.getAttributes();
+	    // Initialize the reverse-map if in-place modification is set by the
+	    // application.
+	    if (IndexManager.isObjectModificationInplace()) {
+	      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(),
+	          ra.getLoadFactor(), ra.getConcurrencyLevel());
+	    }
+	    this.internalIndexStats = internalIndexStats;
+	    this.cache = cache;
+	  }
-  public boolean basicRemoveMapping(Object key, RegionEntry entry, boolean findOldKey)
+  protected boolean basicRemoveMapping(Object key, RegionEntry entry, boolean findOldKey)
-      Object newKey;
-      if (IndexManager.isObjectModificationInplace()
-          && this.entryToValuesMap.containsKey(entry)) {
-        newKey = this.entryToValuesMap.get(entry);
-      }
-      else {
-        newKey = TypeUtils.indexKeyFor(key);
-      }
+      Object newKey = convertToIndexKey(key, entry);
+private Object convertToIndexKey(Object key, RegionEntry entry)
+		throws TypeMismatchException {
+	Object newKey;
+	if (IndexManager.isObjectModificationInplace()
+          && this.entryToValuesMap.containsKey(entry)) {
+        newKey = this.entryToValuesMap.get(entry);
+      }
+      else {
+        newKey = TypeUtils.indexKeyFor(key);
+      }
+	return newKey;
+}
+
-    final long iteratorStartTime = GemFireCacheImpl.getInstance().cacheTimeMillis();
-    protected MemoryIndexStoreEntry currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
+    final long iteratorStartTime;
+    protected MemoryIndexStoreEntry currentEntry;
-      this.map = submap;
-      this.indexKey = indexKey;
-      this.keysToRemove = keysToRemove;
+      this (submap, indexKey, keysToRemove, GemFireCacheImpl.getInstance().cacheTimeMillis());
+    
+    private MemoryIndexStoreIterator(Map submap,
+            Object indexKey, Collection keysToRemove, long iteratorStartTime) {
+		this.map = submap;
+		this.indexKey = indexKey;
+		this.keysToRemove = keysToRemove;
+		this.iteratorStartTime = iteratorStartTime;
+		currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
+	}

INS26 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS44 UPD83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS31 INS42 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV25 INS41 INS83 INS42 INS44 INS44 INS44 INS8 INS44 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS39 INS42 INS21 INS21 INS42 INS42 INS22 INS42 INS60 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS7 INS7 INS52 INS42 INS43 INS59 INS22 INS42 INS42 MOV14 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42