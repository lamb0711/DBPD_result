Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents an operation that can be performed in a client by sending
- * a message to a server.
+ * Represents an operation that can be performed in a client by sending a message to a server.
+ * 
-  
+
-  
+
+
-    
+
+
-    if (participateInTransaction()
-        && getMessage().getTransactionId() == TXManagerImpl.NOTX) {
+    if (participateInTransaction() && getMessage().getTransactionId() == TXManagerImpl.NOTX) {
-   * Attempts to send this operation's message out on the
-   * given connection
+   * Attempts to send this operation's message out on the given connection
+   * 
-    getMessage().setComms(cnx.getSocket(), cnx.getInputStream(),
-        cnx.getOutputStream(), cnx.getCommBuffer(), cnx.getStats());
+    getMessage().setComms(cnx.getSocket(), cnx.getInputStream(), cnx.getOutputStream(),
+        cnx.getCommBuffer(), cnx.getStats());
-  /** returns the class name w/o package information.  useful in logging */
+  /** returns the class name w/o package information. useful in logging */
-    return cname.substring(getClass().getPackage().getName().length()+1);
+    return cname.substring(getClass().getPackage().getName().length() + 1);
-   * New implementations of AbstractOp should override this method if the
-   * implementation should be excluded from client authentication. e.g.
-   * PingOp#sendMessage(Connection cnx)
+   * New implementations of AbstractOp should override this method if the implementation should be
+   * excluded from client authentication. e.g. PingOp#sendMessage(Connection cnx)
-        Object id = UserAttributes.userAttributes.get().getServerToId().get(
-            cnx.getServer());
+        Object id = UserAttributes.userAttributes.get().getServerToId().get(cnx.getServer());
-          throw new ServerConnectivityException(
-              "Connection error while authenticating user");
+          throw new ServerConnectivityException("Connection error while authenticating user");
-        userId = (Long)id;
+        userId = (Long) id;
-        getMessage().setSecurePart(
-            ((ConnectionImpl)cnx).getHandShake().encryptBytes(
-                hdos.toByteArray()));
+        getMessage()
+            .setSecurePart(((ConnectionImpl) cnx).getHandShake().encryptBytes(hdos.toByteArray()));
-   * Attempts to read a response to this operation by reading it from the
-   * given connection, and returning it.
+   * Attempts to read a response to this operation by reading it from the given connection, and
+   * returning it.
+   * 
-   * @return the result of the operation
-   *         or <code>null</code> if the operation has no result.
+   * @return the result of the operation or <code>null</code> if the operation has no result.
-      msg.setComms(cnx.getSocket(), cnx.getInputStream(),
-          cnx.getOutputStream(), cnx.getCommBuffer(), cnx.getStats());
+      msg.setComms(cnx.getSocket(), cnx.getInputStream(), cnx.getOutputStream(),
+          cnx.getCommBuffer(), cnx.getStats());
-   * New implementations of AbstractOp should override this method if the
-   * implementation should be excluded from client authentication. e.g.
-   * PingOp#processSecureBytes(Connection cnx, Message message)
+   * New implementations of AbstractOp should override this method if the implementation should be
+   * excluded from client authentication. e.g. PingOp#processSecureBytes(Connection cnx, Message
+   * message)
-  protected void processSecureBytes(Connection cnx, Message message)
-      throws Exception {
+  protected void processSecureBytes(Connection cnx, Message message) throws Exception {
-          logger.trace(LogMarker.BRIDGE_SERVER, "Response message from {} for {} has no secure part.", cnx, this);
+          logger.trace(LogMarker.BRIDGE_SERVER,
+              "Response message from {} for {} has no secure part.", cnx, this);
-      byte[] bytes = ((ConnectionImpl)cnx).getHandShake().decryptBytes(
-          partBytes);
+      byte[] bytes = ((ConnectionImpl) cnx).getHandShake().decryptBytes(partBytes);
-   * By default just create a normal one part msg.
-   * Subclasses can override this.
+   * By default just create a normal one part msg. Subclasses can override this.
-  
+
-  
+
-   * Processes the given response message returning the result, if any,
-   * of the processing.
+   * Processes the given response message returning the result, if any, of the processing.
+   * 
-   * @throws Exception if response could not be processed or
-   * we received a response with a server exception.
+   * @throws Exception if response could not be processed or we received a response with a server
+   *         exception.
-   * Return true of <code>msgType</code> indicates the operation
-   * had an error on the server.
+   * Return true of <code>msgType</code> indicates the operation had an error on the server.
+
+   * 
-   * @throws Exception if response could not be processed or
-   * we received a response with a server exception.
+   * @throws Exception if response could not be processed or we received a response with a server
+   *         exception.
-  protected void processAck(Message msg, String opName)
-    throws Exception
-  {
+  protected void processAck(Message msg, String opName) throws Exception {
-          throw (PutAllPartialResultException)t;
+          throw (PutAllPartialResultException) t;
-        throw new InternalGemFireError("Unexpected message type "
-                                       + MessageType.getString(msgType));
+        throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));
+
+   * 
-   * @throws Exception if response could not be processed or
-   * we received a response with a server exception.
+   * @throws Exception if response could not be processed or we received a response with a server
+   *         exception.
-  protected final Object processObjResponse(Message msg, String opName)
-    throws Exception
-  {
+  protected final Object processObjResponse(Message msg, String opName) throws Exception {
-        throw new InternalGemFireError("Unexpected message type "
-                                       + MessageType.getString(msgType));
+        throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));
+     * 
+
+   * 
-   * @throws Exception if response could not be processed or
-   * we received a response with a server exception.
+   * @throws Exception if response could not be processed or we received a response with a server
+   *         exception.
-  protected final void processChunkedResponse(ChunkedMessage msg, String opName, ChunkHandler callback)
-    throws Exception
-  {
+  protected final void processChunkedResponse(ChunkedMessage msg, String opName,
+      ChunkHandler callback) throws Exception {
-        throw new InternalGemFireError("Unexpected message type "
-                                       + MessageType.getString(msgType));
+        throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));
-  /* (non-Javadoc)
-   * @see org.apache.geode.cache.client.internal.Op#attempt(org.apache.geode.cache.client.internal.Connection)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.cache.client.internal.Op#attempt(org.apache.geode.cache.client.internal.
+   * Connection)
+
+
+
+
+
-   * New implementations of AbstractOp should override this method to return
-   * false if the implementation should be excluded from client authentication.
-   * e.g. PingOp#needsUserId()
+   * New implementations of AbstractOp should override this method to return false if the
+   * implementation should be excluded from client authentication. e.g. PingOp#needsUserId()
-   * Also, such an operation's <code>MessageType</code> must be added in the
-   * 'if' condition in {@link ServerConnection#updateAndGetSecurityPart()}
+   * Also, such an operation's <code>MessageType</code> must be added in the 'if' condition in
+   * {@link ServerConnection#updateAndGetSecurityPart()}
-  
+
-   * Subclasses for AbstractOp should override this method to return
-   * false in this message should not participate in any existing transaction
+   * Subclasses for AbstractOp should override this method to return false in this message should
+   * not participate in any existing transaction
+   * 
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66