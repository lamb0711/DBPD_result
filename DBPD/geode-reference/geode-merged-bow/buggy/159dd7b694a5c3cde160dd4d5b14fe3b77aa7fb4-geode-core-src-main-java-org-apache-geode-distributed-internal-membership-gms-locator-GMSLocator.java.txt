GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

-import org.apache.geode.cache.GemFireCache;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember.InternalDistributedMemberWrapper;
-import org.apache.geode.distributed.internal.membership.MembershipManager;
-import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
-import org.apache.geode.distributed.internal.membership.gms.NetLocator;
-import org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager;
-import org.apache.geode.distributed.internal.tcpserver.TcpServer;
-public class GMSLocator implements Locator, NetLocator {
+public class GMSLocator implements Locator {
-  private final Set<InternalDistributedMember> registrants = new HashSet<>();
-  private final Map<InternalDistributedMemberWrapper, byte[]> publicKeys =
+  private final Set<GMSMember> registrants = new HashSet<>();
+  private final Map<GMSMember.GMSMemberWrapper, byte[]> publicKeys =
-  private InternalDistributedMember localAddress;
+  private GMSMember localAddress;
-  private NetView view;
+  private GMSMembershipView view;
-  private NetView recoveredView;
+  private GMSMembershipView recoveredView;
-  @Override
-  public synchronized boolean setMembershipManager(MembershipManager mgr) {
+  public synchronized boolean setServices(Services pservices) {
-      services = ((GMSMembershipManager) mgr).getServices();
+      services = pservices;
-      NetView newView = services.getJoinLeave().getView();
+      GMSMembershipView newView = services.getJoinLeave().getView();
-  @Override
-  public void init(TcpServer server) throws InternalGemFireException {
+  public void init(String persistentFileIdentifier) throws InternalGemFireException {
-      viewFile = workingDirectory.resolve("locator" + server.getPort() + "view.dat").toFile();
+      viewFile =
+          workingDirectory.resolve("locator" + persistentFileIdentifier + "view.dat").toFile();
-  public void installView(NetView view) {
+  public void installView(GMSMembershipView view) {
-  @Override
-        publicKeys.put(new InternalDistributedMemberWrapper(findRequest.getMemberID()),
+        publicKeys.put(new GMSMember.GMSMemberWrapper(findRequest.getMemberID()),
-    NetView responseView = view;
+    GMSMembershipView responseView = view;
-    InternalDistributedMember coordinator = null;
+    GMSMember coordinator = null;
-      InternalDistributedMember requestingMemberID = findRequest.getMemberID();
-      for (InternalDistributedMember id : responseView.getMembers()) {
+      GMSMember requestingMemberID = findRequest.getMemberID();
+      for (GMSMember id : responseView.getMembers()) {
-          NetView newView = new NetView(responseView, responseView.getViewId());
+          GMSMembershipView newView = new GMSMembershipView(responseView, responseView.getViewId());
-      Collection<InternalDistributedMember> rejections = findRequest.getRejectedCoordinators();
+      Collection<GMSMember> rejections = findRequest.getRejectedCoordinators();
-        for (InternalDistributedMember mbr : registrants) {
+        for (GMSMember mbr : registrants) {
-            if (!rejections.contains(mbr) && (mbr.getNetMember().preferredForCoordinator()
-                || !mbr.getNetMember().isNetworkPartitionDetectionEnabled())) {
+            if (!rejections.contains(mbr) && (mbr.preferredForCoordinator()
+                || !mbr.isNetworkPartitionDetectionEnabled())) {
-  private void saveView(NetView view) {
+  private void saveView(GMSMembershipView view) {
-  @Override
-  @Override
-  public byte[] getPublicKey(InternalDistributedMember member) {
-    return publicKeys.get(new InternalDistributedMemberWrapper(member));
+  public byte[] getPublicKey(GMSMember member) {
+    return publicKeys.get(new GMSMember.GMSMemberWrapper(member));
-  @Override
-  public List<InternalDistributedMember> getMembers() {
+  public List<GMSMember> getMembers() {
-  @Override
-  public void restarting(DistributedSystem ds, GemFireCache cache,
-      InternalConfigurationPersistenceService sharedConfig) {
-    setMembershipManager(((InternalDistributedSystem) ds).getDM().getMembershipManager());
-  }
-
+        if (version > Version.CURRENT_ORDINAL) {
+          return false;
+        }
-      List<InternalDistributedMember> members = new ArrayList<>(recoveredView.getMembers());
+      List<GMSMember> members = new ArrayList<>(recoveredView.getMembers());
-      for (InternalDistributedMember member : members) {
-        if (member.getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
+      for (GMSMember member : members) {
+        if (member.getVmKind() == GMSMember.LOCATOR_DM_TYPE) {

MOV26 MOV26 UPD40 UPD40 UPD74 UPD74 UPD43 UPD43 UPD43 UPD42 UPD74 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 INS40 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD74 UPD43 UPD74 INS42 UPD42 UPD42 UPD43 UPD43 INS40 INS25 UPD43 UPD43 UPD42 UPD42 INS27 INS8 UPD42 UPD42 UPD43 INS42 INS40 INS41 UPD40 INS42 UPD43 UPD43 UPD42 INS9 INS40 UPD42 UPD43 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL78 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL78 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL78 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31