GEODE-6626: Fix getStartPort in GatewayReceiverMBeanBridge

Co-authored-by: Michael Oleske <moleske@pivotal.io>

+import org.apache.geode.annotations.VisibleForTesting;
-  private GatewayReceiver rcv;
+  private final GatewayReceiver gatewayReceiver;
-
-
-
-  public GatewayReceiverMBeanBridge(GatewayReceiver rcv) {
-    super();
-    this.rcv = rcv;
-    initializeReceiverStats();
-  }
-
-  void destroyServer() {
-    removeServer();
-  }
-
-  protected void startServer() {
-    CacheServer server = rcv.getServer();
-    addServer(server);
-  }
-
-  protected void stopServer() {
-    removeServer();
-  }
-
+  @VisibleForTesting
-    super();
+    this(null);
+  }
+
+  GatewayReceiverMBeanBridge(GatewayReceiver gatewayReceiver) {
+    this.gatewayReceiver = gatewayReceiver;
-  public void addGatewayReceiverStats(GatewayReceiverStats stats) {
-    monitor.addStatisticsToMonitor(stats.getStats());
+  @Override
+  public int getClientConnectionCount() {
+    // we can't rely on ServerBridge as the HostStatSampler might not have ran between the last
+    // statistical update and the time at which this method is called.
+    return !isRunning() ? 0
+        : ((CacheServerImpl) gatewayReceiver.getServer()).getAcceptor().getClientServerCnxCount();
-
-  public String getBindAddress() {
-    return rcv.getBindAddress();
+  public void addGatewayReceiverStats(GatewayReceiverStats stats) {
+    monitor.addStatisticsToMonitor(stats.getStats());
+  public String getBindAddress() {
+    return gatewayReceiver.getBindAddress();
+  }
-    return rcv.getPort();
+    return gatewayReceiver.getPort();
-    return rcv.getSocketBufferSize();
+    return gatewayReceiver.getSocketBufferSize();
-
-    return rcv.isRunning();
+    return gatewayReceiver.isRunning();
-
-      rcv.start();
+      gatewayReceiver.start();
-
-      rcv.stop();
+      gatewayReceiver.stop();
-
-    return rcv.getEndPort();
+    return gatewayReceiver.getEndPort();
-
-    List<GatewayTransportFilter> transPortfilters = rcv.getGatewayTransportFilters();
-    String[] filtersStr = null;
-    if (transPortfilters != null && transPortfilters.size() > 0) {
-      filtersStr = new String[transPortfilters.size()];
+    List<GatewayTransportFilter> transportFilters = gatewayReceiver.getGatewayTransportFilters();
+    String[] transportFiltersStringArray = null;
+    if (transportFilters != null && !transportFilters.isEmpty()) {
+      transportFiltersStringArray = new String[transportFilters.size()];
-      return filtersStr;
+      return transportFiltersStringArray;
-    for (GatewayTransportFilter filter : transPortfilters) {
-      filtersStr[j] = filter.toString();
+    for (GatewayTransportFilter filter : transportFilters) {
+      transportFiltersStringArray[j] = filter.toString();
-    return filtersStr;
-
+    return transportFiltersStringArray;
-
-    return rcv.getEndPort();
+    return gatewayReceiver.getStartPort();
-
-    return rcv.getMaximumTimeBetweenPings();
-  }
-
-
-  /** Statistics Related Counters **/
-
-
-  private void initializeReceiverStats() {
-    createRequestRate = new StatsRate(StatsKey.CREAT_REQUESTS, StatType.INT_TYPE, monitor);
-    updateRequestRate = new StatsRate(StatsKey.UPDATE_REQUESTS, StatType.INT_TYPE, monitor);
-    destroyRequestRate = new StatsRate(StatsKey.DESTROY_REQUESTS, StatType.INT_TYPE, monitor);
-    eventsReceivedRate = new StatsRate(StatsKey.EVENTS_RECEIVED, StatType.INT_TYPE, monitor);
+    return gatewayReceiver.getMaximumTimeBetweenPings();
-  @Override
-  public int getClientConnectionCount() {
-    // See GEODE-5248: we can't rely on ServerBridge as the HostStatSampler might not have ran
-    // between the last statistical update and the time at which this method is called.
-    return (!isRunning()) ? 0
-        : ((CacheServerImpl) rcv.getServer()).getAcceptor().getClientServerCnxCount();
+  protected void startServer() {
+    CacheServer server = gatewayReceiver.getServer();
+    addServer(server);
+  }
+
+  protected void stopServer() {
+    removeServer();
+  }
+
+  void destroyServer() {
+    removeServer();
-    Set<String> uniqueIds;
-    AcceptorImpl acceptor = ((CacheServerImpl) rcv.getServer()).getAcceptor();
+    AcceptorImpl acceptor = ((CacheServerImpl) gatewayReceiver.getServer()).getAcceptor();
-    if (serverConnections != null && serverConnections.size() > 0) {
-      uniqueIds = new HashSet<>();
+    if (serverConnections != null && !serverConnections.isEmpty()) {
+      Set<String> uniqueIds = new HashSet<>();
-    } else {
-      return 0;
-
+    return 0;
+  private void initializeReceiverStats() {
+    createRequestRate = new StatsRate(StatsKey.CREAT_REQUESTS, StatType.INT_TYPE, monitor);
+    updateRequestRate = new StatsRate(StatsKey.UPDATE_REQUESTS, StatType.INT_TYPE, monitor);
+    destroyRequestRate = new StatsRate(StatsKey.DESTROY_REQUESTS, StatType.INT_TYPE, monitor);
+    eventsReceivedRate = new StatsRate(StatsKey.EVENTS_RECEIVED, StatType.INT_TYPE, monitor);
+  }

INS26 MOV31 MOV31 MOV31 MOV31 MOV31 INS40 INS31 INS83 INS78 INS42 MOV44 MOV8 MOV78 INS39 INS42 INS8 UPD42 INS42 INS17 UPD42 INS21 INS41 MOV41 INS33 INS7 INS16 UPD42 UPD42 INS22 INS42 MOV38 INS34 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS38 UPD42 UPD42 UPD42 INS38 MOV60 INS52 INS42 INS32 INS42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS36 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV14 INS11 UPD42 MOV43 MOV43 INS32 UPD42 UPD42 INS42 INS42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL46 DEL42 DEL32 DEL34 DEL27 DEL83 DEL39 DEL42 DEL36 DEL34 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL32 DEL34 DEL27 DEL42 DEL7 DEL21 DEL8 DEL66 DEL65 DEL29