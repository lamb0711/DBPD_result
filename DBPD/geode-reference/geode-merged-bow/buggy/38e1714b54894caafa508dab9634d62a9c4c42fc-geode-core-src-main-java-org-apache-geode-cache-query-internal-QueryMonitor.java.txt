GEODE-577: rewrite QueryMonitorDUnitTest (#2179)

* code cleanup.
* add QueryMonitor unit test
* do not add cq query to the monitor queue

-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import org.apache.geode.cache.query.Query;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-  private boolean testingQueryMonitor = false;
-  private static final ThreadLocal<AtomicBoolean> queryExecutionStatus =
+  private static final ThreadLocal<AtomicBoolean> queryCancelled =
-  /** For DUnit test purpose TODO: delete this ConcurrentMap */
-  private ConcurrentMap queryMonitorTasks = null;
-
-  public void monitorQueryThread(Thread queryThread, Query query) {
+  public void monitorQueryThread(Thread queryThread, DefaultQuery query) {
+    // cq query is not monitored
+    if (query.isCqQuery()) {
+      return;
+    }
+
-      ((DefaultQuery) query).setCanceled(true, new QueryExecutionLowMemoryException(reason));
+      query.setCanceled(new QueryExecutionLowMemoryException(reason));
-    QueryThreadTask queryTask = new QueryThreadTask(queryThread, query, queryExecutionStatus.get());
+    QueryThreadTask queryTask = new QueryThreadTask(queryThread, query, queryCancelled.get());
-    // For dunit test purpose
-    if (cache != null && testingQueryMonitor) {
-      if (this.queryMonitorTasks == null) {
-        this.queryMonitorTasks = new ConcurrentHashMap();
-      }
-      this.queryMonitorTasks.put(queryThread, queryTask);
-    }
-  public void stopMonitoringQueryThread(Thread queryThread, Query query) {
+  public void stopMonitoringQueryThread(Thread queryThread, DefaultQuery query) {
-    DefaultQuery defaultQuery = (DefaultQuery) query;
-    boolean[] queryCompleted = defaultQuery.getQueryCompletedForMonitoring();
+    boolean[] queryCompleted = query.getQueryCompletedForMonitoring();
-      queryExecutionStatus.get().getAndSet(Boolean.FALSE);
-
-      defaultQuery.setQueryCompletedForMonitoring(true);
+      queryCancelled.get().getAndSet(Boolean.FALSE);
+      query.setQueryCompletedForMonitoring(true);
-    if (queryExecutionStatus.get() != null && queryExecutionStatus.get().get()) {
+    if (queryCancelled.get() != null && queryCancelled.get().get()) {
-      // TODO: while-block cannot complete without throwing
-          // Empty queue.
-        long currentTime = System.currentTimeMillis();
-
+        long executionTime = System.currentTimeMillis() - queryTask.StartTime;
-        if (currentTime - queryTask.StartTime < this.maxQueryExecutionTime) {
-          sleepTime = this.maxQueryExecutionTime - (currentTime - queryTask.StartTime);
+        if (executionTime < this.maxQueryExecutionTime) {
+          sleepTime = this.maxQueryExecutionTime - executionTime;
-
-        // Query execution has taken more than the max time, Set queryExecutionStatus flag
-        // to canceled (TRUE).
-        boolean[] queryCompleted =
-            ((DefaultQuery) queryTask.query).getQueryCompletedForMonitoring();
+        // Query execution has taken more than the max time, Set queryCancelled flag
+        // to true.
+        boolean[] queryCompleted = queryTask.query.getQueryCompletedForMonitoring();
-          if (!queryCompleted[0] && !((DefaultQuery) queryTask.query).isCqQuery()) { // Check if the
-                                                                                     // query is
-                                                                                     // already
-                                                                                     // completed.
-            ((DefaultQuery) queryTask.query).setCanceled(true,
-                new QueryExecutionTimeoutException(
-                    LocalizedStrings.QueryMonitor_LONG_RUNNING_QUERY_CANCELED
-                        .toLocalizedString(GemFireCacheImpl.MAX_QUERY_EXECUTION_TIME)));
-            queryTask.queryExecutionStatus.set(Boolean.TRUE);
-            // Remove the task from queue.
+          // check if query is already completed
+          if (!queryCompleted[0]) {
+            queryTask.query.setCanceled(new QueryExecutionTimeoutException(String
+                .format("Query execution cancelled after exceeding max execution time %sms.",
+                    this.maxQueryExecutionTime)));
+            queryTask.queryCancelled.set(Boolean.TRUE);
+            // remove the query threads from monitoring queue
+            logger.info(String.format(
+                "%s is set as canceled after %s milliseconds", queryTask.toString(),
+                executionTime));
-
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GemFireCache_LONG_RUNNING_QUERY_EXECUTION_CANCELED,
-            new Object[] {queryTask.query.getQueryString(), queryTask.queryThread.getId()}));
-
-        if (logger.isDebugEnabled()) {
-          logger.debug("Query Execution for the thread {} got canceled.", queryTask.queryThread);
-        }
-    boolean[] queryCompleted = ((DefaultQuery) queryTask.query).getQueryCompletedForMonitoring();
+    boolean[] queryCompleted = queryTask.query.getQueryCompletedForMonitoring();
-        ((DefaultQuery) queryTask.query).setCanceled(true,
+        queryTask.query.setCanceled(
-        queryTask.queryExecutionStatus.set(Boolean.TRUE);
+        queryTask.queryCancelled.set(Boolean.TRUE);
-    final Query query;
+    final DefaultQuery query;
-    final AtomicBoolean queryExecutionStatus;
+    final AtomicBoolean queryCancelled;
-    QueryThreadTask(Thread queryThread, Query query, AtomicBoolean queryExecutionStatus) {
+    QueryThreadTask(Thread queryThread, DefaultQuery query, AtomicBoolean queryCancelled) {
-      this.queryExecutionStatus = queryExecutionStatus;
+      this.queryCancelled = queryCancelled;
-          .append(", queryExecutionStatus:").append(this.queryExecutionStatus).append(']')
+          .append(", queryCancelled:").append(this.queryCancelled).append(']')

UPD42 MOV43 INS25 MOV43 MOV43 INS32 INS8 MOV43 UPD42 MOV43 UPD42 INS42 INS42 INS41 MOV43 UPD42 INS40 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS51 UPD42 UPD42 MOV42 INS8 UPD42 INS27 UPD42 MOV42 INS25 INS40 UPD40 UPD45 UPD42 MOV32 INS40 INS40 MOV38 INS8 MOV21 MOV21 MOV21 MOV21 UPD42 MOV42 INS40 UPD40 UPD42 INS42 INS45 INS32 UPD42 MOV42 UPD42 INS42 INS45 INS22 INS42 UPD42 MOV42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL42 DEL43 DEL42 DEL11 DEL36 DEL9 DEL42 DEL33 DEL27 DEL42 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL40 DEL27 DEL40 DEL27 DEL36 DEL42 DEL43 DEL40 DEL11 DEL36 DEL42 DEL43 DEL40 DEL11 DEL36 DEL9 DEL40 DEL40 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL32 DEL40 DEL32 DEL4 DEL3 DEL42 DEL43 DEL40 DEL11 DEL36 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL51 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL11 DEL36 DEL40 DEL11 DEL36 DEL9 DEL42 DEL43 DEL42 DEL43