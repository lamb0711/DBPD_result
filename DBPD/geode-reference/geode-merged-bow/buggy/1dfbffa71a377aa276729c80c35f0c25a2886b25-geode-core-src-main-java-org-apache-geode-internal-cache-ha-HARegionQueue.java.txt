GEODE-5166: NPE thrown while processing InitialImage of subscription region

* Fix NPE in updateHAEventWrapper
* Clean up code (renaming variables) in putEventInHARegion
* Removing old/commented out code

-            if (haContainer.getKey(entryHaEventWrapper) != null) {
+            if ((HAEventWrapper) haContainer.getKey(entryHaEventWrapper) != null) {
-              // If the input and entry HAEventWrappers are not the same (which is the normal
-              // case), add the CQs and interest list from the input to the entry and create a new
-              // value from the entry.
-              if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
-                addClientCQsAndInterestList(entryMessage, inputHaEventWrapper, haContainer,
-                    regionName);
-                inputHaEventWrapper.setClientUpdateMessage(null);
-                newValueCd =
-                    new VMCachedDeserializable(entryHaEventWrapper, newValueCd.getSizeInBytes());
-              }
-            } else {
-              entryHaEventWrapper = null;
-            }
-          }
-        } else { // putIfAbsent successful
-          entryHaEventWrapper = (HAEventWrapper) haContainer.getKey(inputHaEventWrapper);
-          synchronized (entryHaEventWrapper) {
-            entryHaEventWrapper.incAndGetReferenceCount();
-            entryHaEventWrapper.setHAContainer(haContainer);
-            // If the input and entry HAEventWrappers are not the same (which is not the normal
-            // case), get the entry message, add the CQs and interest list from the input to the
-            // entry and create a new value from the entry.
-            if (entryHaEventWrapper != inputHaEventWrapper) { // See GEODE-4957
-              entryMessage = (ClientUpdateMessageImpl) haContainer.get(inputHaEventWrapper);
+            } else {
+              entryHaEventWrapper = null;
-            entryHaEventWrapper.setClientUpdateMessage(null);
-            entryHaEventWrapper.setIsRefFromHAContainer(true);
+          }
+        } else { // putIfAbsent successful
+          synchronized (inputHaEventWrapper) {
+            inputHaEventWrapper.incAndGetReferenceCount();
+            inputHaEventWrapper.setHAContainer(haContainer);
+            inputHaEventWrapper.setClientUpdateMessage(null);
+            inputHaEventWrapper.setIsRefFromHAContainer(true);
-      HAEventWrapper haEventWrapper = (HAEventWrapper) event;
+      HAEventWrapper inputHaEventWrapper = (HAEventWrapper) event;
-        if (haEventWrapper.getIsRefFromHAContainer()) {
-          putEntryConditionallyIntoHAContainer(haEventWrapper);
+        if (inputHaEventWrapper.getIsRefFromHAContainer()) {
+          putEntryConditionallyIntoHAContainer(inputHaEventWrapper);
-          // This means that the haEvenWrapper reference we have is not
+          // This means that the haEventWrapper reference we have is not
-          boolean entryFound;
-          // synchronized (this.haContainer) {
-          HAEventWrapper original = null;
+          HAEventWrapper haContainerKey = null;
-            ClientUpdateMessageImpl old =
+            ClientUpdateMessageImpl haContainerEntry =
-                    .putIfAbsent(haEventWrapper, haEventWrapper.getClientUpdateMessage());
-            if (old != null) {
-              original =
-                  (HAEventWrapper) ((HAContainerWrapper) this.haContainer).getKey(haEventWrapper);
-              if (original == null) {
+                    .putIfAbsent(inputHaEventWrapper, inputHaEventWrapper.getClientUpdateMessage());
+            if (haContainerEntry != null) {
+              haContainerKey = (HAEventWrapper) ((HAContainerWrapper) this.haContainer)
+                  .getKey(inputHaEventWrapper);
+              if (haContainerKey == null) {
-              synchronized (original) {
+              synchronized (haContainerKey) {
-                if (((HAContainerWrapper) this.haContainer).getKey(original) != null) {
-                  original.incAndGetReferenceCount();
-                  addClientCQsAndInterestList(old, haEventWrapper, this.haContainer,
-                      this.regionName);
-                  haEventWrapper = original;
+                if (((HAContainerWrapper) this.haContainer).getKey(haContainerKey) != null) {
+                  haContainerKey.incAndGetReferenceCount();
+                  addClientCQsAndInterestList(haContainerEntry, inputHaEventWrapper,
+                      this.haContainer, this.regionName);
+                  inputHaEventWrapper = haContainerKey;
-                  original = null;
+                  haContainerKey = null;
-              synchronized (haEventWrapper) {
-                haEventWrapper.incAndGetReferenceCount();
-                haEventWrapper.setHAContainer(this.haContainer);
-                if (!haEventWrapper.getPutInProgress()) {
+              synchronized (inputHaEventWrapper) {
+                inputHaEventWrapper.incAndGetReferenceCount();
+                inputHaEventWrapper.setHAContainer(this.haContainer);
+                if (!inputHaEventWrapper.getPutInProgress()) {
-                  haEventWrapper.setClientUpdateMessage(null);
+                  inputHaEventWrapper.setClientUpdateMessage(null);
-                haEventWrapper.setIsRefFromHAContainer(true);
+                inputHaEventWrapper.setIsRefFromHAContainer(true);
-          } while (original == null);
-          /*
-           * entry = (Map.Entry)((HAContainerWrapper)this.haContainer) .getEntry(haEventWrapper); if
-           * (entry == null) { entryFound = false;
-           * putEntryConditionallyIntoHAContainer(haEventWrapper); } else { entryFound = true; // Do
-           * not assign entry.getKey() to haEventWrapper right now.
-           * ((HAEventWrapper)entry.getKey()).incAndGetReferenceCount(); } }//haContainer
-           * synchronized ends if (entryFound) { addClientCQsAndInterestList(entry, haEventWrapper,
-           * haContainer, regionName); haEventWrapper = (HAEventWrapper)entry.getKey(); } else { //
-           * entry not found if (!haEventWrapper.getPutInProgress()) { // This means that this is a
-           * GII'ed event. Hence we must // explicitly set 'clientUpdateMessage' to null.
-           * haEventWrapper.setClientUpdateMessage(null); }
-           * haEventWrapper.setIsRefFromHAContainer(true); }
-           */
+          } while (haContainerKey == null);
-      // This has now been taken care of in AbstractRegionMap.initialImagePut()
-      // else{
-      // if(!haEventWrapper.getIsRefFromHAContainer()){
-      // haEventWrapper =(HAEventWrapper)((HAContainerWrapper)haContainer).getKey(haEventWrapper);
-      // }
-      // }
-      this.region.put(position, haEventWrapper);
+      this.region.put(position, inputHaEventWrapper);

UPD42 UPD42 UPD42 UPD42 MOV43 MOV21 UPD42 UPD42 UPD42 MOV8 MOV43 INS11 MOV21 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 MOV32 MOV32 MOV7 MOV43 MOV32 UPD42 UPD42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS32 UPD42 UPD42 MOV43 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV43 MOV42 MOV42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL27 DEL25 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL33 DEL32 DEL21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32