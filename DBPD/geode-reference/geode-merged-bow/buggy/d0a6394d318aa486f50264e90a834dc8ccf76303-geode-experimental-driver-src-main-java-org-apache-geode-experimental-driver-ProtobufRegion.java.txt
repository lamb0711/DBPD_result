GEODE-4168 Can't get json object stored as PDX using the new protocol
GEODE-4116 Can't get PDX objects using the new protocol

Added a distributed test to ensure end-to-end handling of JSON documents
is functioning correctly.  For GEODE-4168 I changed the class-check from
equals() to isAssignableFrom().  For GEODE-4116 I modified the Get and
GetAll operation handlers to inhibit deserialization of PdxInstances
when reading values from the cache.  The test for 4116 ensures that
the value is in serialized form by putting it into a distributed Region
in another JVM.

There are unrelated javadoc changes in this commit for DM.java and
a couple of classes in the protobuf Driver module.  I also added
constraints to the Regions in the Driver's unit test to get rid of
compilation warnings.

This closes #1209

-  /**
-   * Captures a snapshot of the attributes (e.g., size) of this region.
-   *
-   * @return Attributes associated with this region.
-   * @throws IOException
-   */
-  @Override
-  public RegionAttributes getRegionAttributes() throws IOException {
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder()
-        .setRequest(ClientProtocol.Request.newBuilder()
-            .setGetRegionRequest(RegionAPI.GetRegionRequest.newBuilder().setRegionName(name)))
-        .build().writeDelimitedTo(outputStream);
-
-    final InputStream inputStream = socket.getInputStream();
-    return new RegionAttributes(ClientProtocol.Message.parseDelimitedFrom(inputStream).getResponse()
-        .getGetRegionResponse().getRegion());
-  }
-
-  /**
-   * Gets the value, if any, contained in this region for the <code>key</code>.
-   *
-   * @param key Unique key associated with a value.
-   * @return Value, if any, associated with <code>key</code>.
-   * @throws IOException
-   */
-  /**
-   * Gets the values, if any, contained in this region for the collection of <code>keys</code>.
-   *
-   * @param keys Collection of unique keys associated with values.
-   * @return Map from <code>keys</code> to their associated values.
-   * @throws IOException
-   */
+  @Override
+  public RegionAttributes getRegionAttributes() throws IOException {
+    final OutputStream outputStream = socket.getOutputStream();
+    ClientProtocol.Message.newBuilder()
+        .setRequest(ClientProtocol.Request.newBuilder()
+            .setGetRegionRequest(RegionAPI.GetRegionRequest.newBuilder().setRegionName(name)))
+        .build().writeDelimitedTo(outputStream);
+
+    final InputStream inputStream = socket.getInputStream();
+    return new RegionAttributes(ClientProtocol.Message.parseDelimitedFrom(inputStream).getResponse()
+        .getGetRegionResponse().getRegion());
+  }
+
+
-  /**
-   * Puts the <code>value</code> into this region for the <code>key</code>.
-   *
-   * @param key Unique key to associate with the <code>value</code>.
-   * @param value Value to associate with the <code>key</code>.
-   * @throws IOException
-   */
-  /**
-   * Puts the map from keys to <code>values</code> into this region. If any one key/value pair can
-   * not be inserted, the remaining pair insertions will be attempted.
-   *
-   * @param values Map from <code>keys</code> to their associated values.
-   * @throws IOException
-   */
-  /**
-   * Removes any value associated with the <code>key</code> from this region.
-   *
-   * @param key Unique key associated with a value.
-   * @throws IOException
-   */
+

MOV31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29