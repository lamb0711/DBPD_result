GEODE-982: refactor off-heap

- removed unused MemoryChunk implementations
- collapsed OffHeapCacheDeserializable into StoredObject
- Added Slab, SlabFactory, SlabImpl, and AddressableMemoryManager.
- collapsed MemoryChunkWithRefCount into StoredObject
- methods that access and modify the data now have Data in their name
- collapsed AddressableStoredObject into StoredObject
- changed product code to use the StoredObject interface
  instead of internal class implementations of it
- renamed DataAsAddress to TinyStoredObject
- renamed ObjectChunk to OffHeapStoredObject
- renamed ObjectChunkWithHeapForm to OffHeapStoredObjectWithHeapForm
- renamed allocateChunk to allocateOffHeapStoredObject
- renamed FakeChunk to SearchMarker
- renamed ObjectChunkSlice to OffHeapStoredObjectSlice
- renamed SyncChunkStack to OffHeapStoredObjectAddressStack
- renamed ChunkValueWrapper to OffHeapValueWrapper

-    if (v instanceof ObjectChunk) return ((ObjectChunk) v).getMemoryAddress();
-    if (v instanceof DataAsAddress) return ((DataAsAddress) v).getEncodedAddress();
+    if (v instanceof StoredObject) return ((StoredObject) v).getAddress();
-      @Unretained ObjectChunk chunk =  new ObjectChunk(ohAddress);
+      @Unretained OffHeapStoredObject chunk =  new OffHeapStoredObject(ohAddress);
-      DataAsAddress daa = new DataAsAddress(ohAddress);
+      TinyStoredObject daa = new TinyStoredObject(ohAddress);
-  public static int getSerializedLengthFromDataAsAddress(DataAsAddress dataAsAddress) {
-    final long ohAddress = dataAsAddress.getEncodedAddress();
+  public static int getSerializedLengthFromDataAsAddress(TinyStoredObject dataAsAddress) {
+    final long ohAddress = dataAsAddress.getAddress();
-      ObjectChunk.release(ohAddress);
+      OffHeapStoredObject.release(ohAddress);
-  public static void releaseEntry(@Unretained OffHeapRegionEntry re, @Released MemoryChunkWithRefCount expectedValue) {
+  public static void releaseEntry(@Unretained OffHeapRegionEntry re, @Released StoredObject expectedValue) {
+  static int decodeAddressToDataSize(long addr) {
+    assert (addr & ENCODED_BIT) != 0;
+    boolean isLong = (addr & LONG_BIT) != 0;
+    if (isLong) {
+      return 9;
+    }
+    return (int) ((addr & SIZE_MASK) >> SIZE_SHIFT);
+  }
+  
-      if (ObjectChunk.retain(addr)) {
+      if (OffHeapStoredObject.retain(addr)) {
-          ObjectChunk.release(addr);
+          OffHeapStoredObject.release(addr);

INS31 INS83 INS39 INS42 INS44 INS8 UPD43 UPD43 INS39 INS42 INS6 INS60 INS25 INS41 UPD42 UPD42 INS27 INS39 INS59 INS42 INS8 INS11 UPD43 INS36 INS34 INS42 INS27 INS41 INS39 INS36 UPD42 UPD42 UPD43 UPD42 INS27 INS36 INS34 INS34 INS27 UPD42 UPD43 UPD42 INS42 INS42 INS27 INS36 INS42 UPD42 UPD43 UPD43 UPD42 INS42 INS42 INS27 UPD42 UPD42 UPD43 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL25