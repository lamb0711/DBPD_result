GEODE-3055: The old primary's the shadow bucket is not
initialized when rebalance remove it. Thus the new primary candidate can
never initialize from it. The fix is to wait until new primary exists before
remove the old primary's bucket in rebalance.

When the colocated child bucket failed to initialize, remove the leader
bucket since all these buckets should be created atomically.

This closes #570

+    } catch (RuntimeException validationException) {
+      // GEODE-3055
+      PartitionedRegion leader = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      boolean isLeader = leader.equals(this.partitionedRegion);
+      if (!isLeader) {
+        leader.getDataStore().removeBucket(possiblyFreeBucketId, true);
+        logger.info(
+            "For bucket " + possiblyFreeBucketId + ", failed to create cololcated child bucket for "
+                + this.partitionedRegion.getFullPath() + ", removed leader region "
+                + leader.getFullPath() + " bucket.");
+      }
+      throw validationException;
+  public boolean isRemotePrimaryReadyForColocatedChildren(int bucketId) {
+    boolean isRemotePrimaryReady = true;
+    InternalDistributedMember myId =
+        this.partitionedRegion.getDistributionManager().getDistributionManagerId();
+
+    List<PartitionedRegion> colocatedChildPRs =
+        ColocationHelper.getColocatedChildRegions(this.partitionedRegion);
+    if (colocatedChildPRs != null) {
+      for (PartitionedRegion pr : colocatedChildPRs) {
+        InternalDistributedMember primaryChild = pr.getBucketPrimary(bucketId);
+        if (logger.isDebugEnabled()) {
+          logger.debug("Checking colocated child bucket " + pr + ", bucketId=" + bucketId
+              + ", primary is " + primaryChild);
+        }
+        if (primaryChild == null || myId.equals(primaryChild)) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Colocated bucket region " + pr + " " + bucketId
+                + " does not have a remote primary yet. Not to remove.");
+          }
+          return false;
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger
+                .debug(pr + " bucketId=" + bucketId + " has remote primary, checking its children");
+          }
+          isRemotePrimaryReady = isRemotePrimaryReady
+              && pr.getDataStore().isRemotePrimaryReadyForColocatedChildren(bucketId);
+        }
+      }
+    }
+    return isRemotePrimaryReady;
+  }
+
-    if (!this.partitionedRegion.getRedundancyProvider().isPersistentRecoveryComplete()) {
+    if (!forceRemovePrimary
+        && !this.partitionedRegion.getRedundancyProvider().isPersistentRecoveryComplete()) {
+      PartitionedRegion leader = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      boolean isLeader = leader.equals(this.partitionedRegion);
+      InternalDistributedMember myId =
+          this.partitionedRegion.getDistributionManager().getDistributionManagerId();
+        // forceRemovePrimary==true will enable remove the bucket even when:
+        // 1) it's primary
+        // 2) no other primary ready yet
+        // 3) colocated bucket and its child is not completely ready
+        if (isLeader) {
+          if (!forceRemovePrimary && !isRemotePrimaryReadyForColocatedChildren(bucketId)) {
+            return false;
+          }
+
+          InternalDistributedMember primary = bucketAdvisor.getPrimary();
+          if (!forceRemovePrimary && (primary == null || myId.equals(primary))) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("Bucket region " + bucketRegion
+                  + " does not have a remote primary yet. Not to remove.");
+            }
+            return false;
+          }
+
+          if (logger.isDebugEnabled()) {
+            logger.debug("Bucket region " + bucketRegion + " has primary at " + primary);
+          }
+        }
+
-      InternalDistributedMember myId =
-          this.partitionedRegion.getDistributionManager().getDistributionManagerId();

INS31 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS60 INS60 INS60 INS25 INS41 INS12 INS39 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS42 INS27 MOV60 INS44 INS8 INS42 INS9 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS38 MOV38 INS60 INS60 INS43 INS42 INS60 INS60 INS25 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS44 INS42 INS8 INS42 INS43 INS59 INS39 INS59 INS42 INS43 INS59 INS39 INS59 INS38 INS8 INS42 INS22 INS42 INS52 INS42 INS43 INS42 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS32 INS25 INS42 INS42 INS32 INS42 INS32 INS42 INS21 INS21 INS52 INS42 INS42 INS43 INS59 INS32 INS8 INS27 INS8 INS8 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS8 INS42 INS42 INS22 INS42 INS42 INS22 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS27 INS32 INS25 INS41 INS25 INS21 INS52 INS42 INS52 INS42 INS25 INS60 INS25 INS25 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS32 INS8 INS9 INS32 INS8 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS8 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS27 INS38 INS38 INS41 INS42 INS42 INS32 INS38 INS36 INS25 INS41 INS42 INS42 INS21 INS22 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS27 INS32 INS8 INS9 INS32 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS21 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS45 INS42 INS45