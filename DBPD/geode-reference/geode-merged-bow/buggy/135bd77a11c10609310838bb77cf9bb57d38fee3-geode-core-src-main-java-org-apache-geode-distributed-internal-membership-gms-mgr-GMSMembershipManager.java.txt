GEODE-2497 surprise members are never timed out during startup

Merge of 8d45ca22737282abe279d3c863478f904f2e1926 and
a6dfa4ca630a82fcf92942a834f8255e86d2bfcb from feature/GEODE-2497.

Moved the creation of the timer to GMSMembershipManager.started()

Removed write-lock in timer-creation method since it's only called from
one place now

Altered the way that the timer-creation method finds the
InternalDistributedSystem.  The old way of using getAnyInstance() was
the primary source of the problem since it returns null until startup
is completed.

Altered the surprise-member unit test to ensure that it's using the
timer and not relying on installation of a new membership view to clean
things up.

Altered the surprise-member unit test to run faster.  It now completes in
under 10 seconds.

This closes #402

-   * 
+   *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-     * 
+     *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
-   * 
+   *
+   *
-     * 
+     *
-     * 
+     *
-                                           // view
+          // view
-          surpriseMembers.entrySet().iterator(); it.hasNext();) {
+           surpriseMembers.entrySet().iterator(); it.hasNext();) {
-        startCleanupTimer();
+  public boolean isCleanupTimerStarted() {
+    return this.cleanupTimer != null;
+  }
+
-   * 
+   *
-   * 
+   *
-  public void started() {}
+  public void started() {
+    startCleanupTimer();
+  }
-   * 
+   *
-   * 
+   *
-        // Now that we're sure the member is new, add them.
-        // make sure the surprise-member cleanup task is running
-        if (this.cleanupTimer == null) {
-          startCleanupTimer();
-        } // cleanupTimer == null
-
+    if (this.dcReceiver == null) {
+      // junit tests don't provide a direct-channel receiver
+      return;
+    }
+    DistributedSystem ds = this.dcReceiver.getDM().getSystem();
+    this.cleanupTimer = new SystemTimer(ds, true);
+    SystemTimer.SystemTimerTask st = new SystemTimer.SystemTimerTask() {
+      @Override
+      public void run2() {
+        cleanUpSurpriseMembers();
+      }
+    };
+    this.cleanupTimer.scheduleAtFixedRate(st, surpriseMemberTimeout, surpriseMemberTimeout / 3);
+  }
+
+  // invoked from the cleanupTimer task
+  private void cleanUpSurpriseMembers() {
-      if (this.cleanupTimer != null) {
-        return;
+      long oldestAllowed = System.currentTimeMillis() - surpriseMemberTimeout;
+      for (Iterator it = surpriseMembers.entrySet().iterator(); it.hasNext();) {
+        Map.Entry entry = (Map.Entry) it.next();
+        Long birthtime = (Long) entry.getValue();
+        if (birthtime.longValue() < oldestAllowed) {
+          it.remove();
+          InternalDistributedMember m = (InternalDistributedMember) entry.getKey();
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.GroupMembershipService_MEMBERSHIP_EXPIRING_MEMBERSHIP_OF_SURPRISE_MEMBER_0,
+              m));
+          removeWithViewLock(m, true,
+              "not seen in membership view in " + surpriseMemberTimeout + "ms");
+        }
-      DistributedSystem ds = InternalDistributedSystem.getAnyInstance();
-      if (ds != null && ds.isConnected()) {
-        this.cleanupTimer = new SystemTimer(ds, true);
-        SystemTimer.SystemTimerTask st = new SystemTimer.SystemTimerTask() {
-          @Override
-          public void run2() {
-            latestViewWriteLock.lock();
-            try {
-              long oldestAllowed = System.currentTimeMillis() - surpriseMemberTimeout;
-              for (Iterator it = surpriseMembers.entrySet().iterator(); it.hasNext();) {
-                Map.Entry entry = (Map.Entry) it.next();
-                Long birthtime = (Long) entry.getValue();
-                if (birthtime.longValue() < oldestAllowed) {
-                  it.remove();
-                  InternalDistributedMember m = (InternalDistributedMember) entry.getKey();
-                  logger.info(LocalizedMessage.create(
-                      LocalizedStrings.GroupMembershipService_MEMBERSHIP_EXPIRING_MEMBERSHIP_OF_SURPRISE_MEMBER_0,
-                      m));
-                  removeWithViewLock(m, true,
-                      "not seen in membership view in " + surpriseMemberTimeout + "ms");
-                }
-              }
-            } finally {
-              latestViewWriteLock.unlock();
-            }
-          }
-        };
-        this.cleanupTimer.scheduleAtFixedRate(st, surpriseMemberTimeout, surpriseMemberTimeout / 3);
-      } // ds != null && ds.isConnected()
-   * 
+   *
-   * 
+   *
-                   // hanging
+      // hanging
-   * 
+   *
-      InternalDistributedMember suspect, String reason) {
+                              InternalDistributedMember suspect, String reason) {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-                                                                                                   // need
-                                                                                                   // to
-                                                                                                   // return
-                                                                                                   // this
-                                                                                                   // list
-                                                                                                   // of
-                                                                                                   // failures
+      // need
+      // to
+      // return
+      // this
+      // list
+      // of
+      // failures
-                                                        // members
+      // members
-      DistributionMessage msg, DMStats theStats) throws NotSerializableException {
+                                             DistributionMessage msg, DMStats theStats) throws NotSerializableException {
-                                                           // msg.sendViaUDP();
+    // msg.sendViaUDP();
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *

INS31 MOV31 INS83 INS39 INS42 INS8 MOV8 INS8 UPD83 UPD42 INS41 MOV25 MOV60 MOV21 MOV60 MOV21 MOV27 INS27 MOV43 INS22 INS33 INS32 INS52 INS42 INS32 INS42 MOV43 INS22 UPD42 MOV42 INS31 INS52 INS42 MOV78 INS83 INS39 INS42 INS8 INS21 INS32 INS42 DEL42 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL33 DEL27 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8