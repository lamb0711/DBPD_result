Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * TCP server which listens on a port and delegates requests to a request
- * handler. The server uses expects messages containing a global version number,
- * followed by a DataSerializable object
+ * TCP server which listens on a port and delegates requests to a request handler. The server uses
+ * expects messages containing a global version number, followed by a DataSerializable object
- * This code was factored out of GossipServer.java to allow multiple handlers to
- * share the same gossip server port.
+ * This code was factored out of GossipServer.java to allow multiple handlers to share the same
+ * gossip server port.
+ * 
-   * 1000 - gemfire 5.5 - using java serialization
-   * 1001 - 5.7 - using DataSerializable and supporting server locator messages.
-   * 1002 - 7.1 - sending GemFire version along with GOSSIP_VERSION in each request.
+   * 1000 - gemfire 5.5 - using java serialization 1001 - 5.7 - using DataSerializable and
+   * supporting server locator messages. 1002 - 7.1 - sending GemFire version along with
+   * GOSSIP_VERSION in each request.
-   * with the addition of support for all old versions of clients you can no
-   * longer change this version number
+   * with the addition of support for all old versions of clients you can no longer change this
+   * version number
-  // This GOSSIPVERSION is used in _getVersionForAddress request for getting GemFire version of a GossipServer.
+  // This GOSSIPVERSION is used in _getVersionForAddress request for getting GemFire version of a
+  // GossipServer.
-  private static int MAX_POOL_SIZE = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.MAX_POOL_SIZE", 100).intValue();
+  private static int MAX_POOL_SIZE = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.MAX_POOL_SIZE", 100).intValue();
-  protected/*GemStoneAddition*/ final/*GemStoneAddition*/ static int READ_TIMEOUT = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000)
-                                                                                           .intValue();
-  //This is for backwards compatibility. The p2p.backlog flag used to be the only way to configure the locator backlog.
+  protected/* GemStoneAddition */ final/* GemStoneAddition */ static int READ_TIMEOUT =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.READ_TIMEOUT", 60 * 1000)
+          .intValue();
+  // This is for backwards compatibility. The p2p.backlog flag used to be the only way to configure
+  // the locator backlog.
-  private static final int BACKLOG = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.BACKLOG", P2P_BACKLOG).intValue();
+  private static final int BACKLOG = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "TcpServer.BACKLOG", P2P_BACKLOG).intValue();
-  private/*GemStoneAddition*/ ServerSocket srv_sock = null;
+  private/* GemStoneAddition */ ServerSocket srv_sock = null;
-  private/*GemStoneAddition*/ final TcpHandler handler;
+  private/* GemStoneAddition */ final TcpHandler handler;
-   * GemStoneAddition - Initialize versions map.
-   * Warning: This map must be compatible with all GemFire versions being
-   * handled by this member "With different GOSSIPVERION". If GOSSIPVERIONS
+   * GemStoneAddition - Initialize versions map. Warning: This map must be compatible with all
+   * GemFire versions being handled by this member "With different GOSSIPVERION". If GOSSIPVERIONS
-  public TcpServer(int port,
-                   InetAddress bind_address,
-                   Properties sslConfig,
-                   DistributionConfigImpl cfg,
-                   TcpHandler handler,
-                   PoolStatHelper poolHelper,
-                   ThreadGroup threadGroup,
-                   String threadName) {
+  public TcpServer(int port, InetAddress bind_address, Properties sslConfig,
+      DistributionConfigImpl cfg, TcpHandler handler, PoolStatHelper poolHelper,
+      ThreadGroup threadGroup, String threadName) {
-      this.socketCreator = SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR);
+      this.socketCreator =
+          SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR);
-  private static PooledExecutorWithDMStats createExecutor(PoolStatHelper poolHelper, final ThreadGroup threadGroup) {
+  private static PooledExecutorWithDMStats createExecutor(PoolStatHelper poolHelper,
+      final ThreadGroup threadGroup) {
-        Thread thread = new Thread(threadGroup, r, "locator request thread[" + threadNum.incrementAndGet() + "]");
+        Thread thread = new Thread(threadGroup, r,
+            "locator request thread[" + threadNum.incrementAndGet() + "]");
-    return new PooledExecutorWithDMStats(new SynchronousQueue(), MAX_POOL_SIZE, poolHelper, factory, POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy());
+    return new PooledExecutorWithDMStats(new SynchronousQueue(), MAX_POOL_SIZE, poolHelper, factory,
+        POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy());
-  public void restarting(InternalDistributedSystem ds, GemFireCacheImpl cache, SharedConfiguration sharedConfig) throws IOException {
+  public void restarting(InternalDistributedSystem ds, GemFireCacheImpl cache,
+      SharedConfiguration sharedConfig) throws IOException {
-    this.log.info("TcpServer@" + System.identityHashCode(this) + " restarting: completed.  Server thread=" + serverThread + "@" + System.identityHashCode(serverThread) + ";alive=" + serverThread
-      .isAlive());
+    this.log.info("TcpServer@" + System.identityHashCode(this)
+        + " restarting: completed.  Server thread=" + serverThread + "@"
+        + System.identityHashCode(serverThread) + ";alive=" + serverThread.isAlive());
-    //    this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
+    // this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked. Server
+    // thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
-   * Returns the value of the bound port. If the server was initialized with a port of 0 indicating that any
-   * ephemeral port should be used, this method will return the actual bound port.
+   * Returns the value of the bound port. If the server was initialized with a port of 0 indicating
+   * that any ephemeral port should be used, this method will return the actual bound port.
+   * 
-        //        this.shutDown = true;
+        // this.shutDown = true;
-   * fix for bug 33711 - client requests are spun off to another thread for
-   * processing. Requests are synchronized in processGossip.
+   * fix for bug 33711 - client requests are spun off to another thread for processing. Requests are
+   * synchronized in processGossip.
-          //sock.setSoLinger(true, 500);
+          // sock.setSoLinger(true, 500);
-            log.debug("Discarding illegal request from " + (sock.getInetAddress().getHostAddress() + ":" + sock.getPort()), e);
+            log.debug("Discarding illegal request from "
+                + (sock.getInetAddress().getHostAddress() + ":" + sock.getPort()), e);
-          if (gossipVersion <= getCurrentGossipVersion() && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
+          if (gossipVersion <= getCurrentGossipVersion()
+              && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
-            //            if (gossipVersion < getCurrentGossipVersion()) {
-            //              if (log.isTraceEnabled()) {
-            //                log.debug(
-            //                    "Received request from "
-            //                        + sock.getInetAddress().getHostAddress()
-            //                        + " This locator is running: " + getCurrentGossipVersion()
-            //                        + ", but request was version: " + gossipVersion
-            //                        + ", version ordinal: " + versionOrdinal);
-            //              }
-            //            }
+            // if (gossipVersion < getCurrentGossipVersion()) {
+            // if (log.isTraceEnabled()) {
+            // log.debug(
+            // "Received request from "
+            // + sock.getInetAddress().getHostAddress()
+            // + " This locator is running: " + getCurrentGossipVersion()
+            // + ", but request was version: " + gossipVersion
+            // + ", version ordinal: " + versionOrdinal);
+            // }
+            // }
-            log.debug("Locator reading request from " + sock.getInetAddress() + " with version " + Version.fromOrdinal(versionOrdinal, false));
+            log.debug("Locator reading request from " + sock.getInetAddress() + " with version "
+                + Version.fromOrdinal(versionOrdinal, false));
-            //Don't call shutdown from within the worker thread, see java bug #6576792. This bug exists
-            // in the backport as well. Closing the socket will cause our acceptor thread to shutdown
-            //the executor
-            //executor.shutdown();
+            // Don't call shutdown from within the worker thread, see java bug #6576792. This bug
+            // exists
+            // in the backport as well. Closing the socket will cause our acceptor thread to
+            // shutdown
+            // the executor
+            // executor.shutdown();
-              output = new VersionedDataOutputStream(output, Version.fromOrdinal(versionOrdinal, false));
+              output =
+                  new VersionedDataOutputStream(output, Version.fromOrdinal(versionOrdinal, false));
-            //IOException could be caused by a client failure. Don't
-            //log with severe.
+            // IOException could be caused by a client failure. Don't
+            // log with severe.
-          // If this ever returns, rethrow the error.  We're poisoned
+          // If this ever returns, rethrow the error. We're poisoned
-          // catch VirtualMachineError (see above).  However, there is
+          // catch VirtualMachineError (see above). However, there is
-            // If this ever returns, rethrow the error.  We're poisoned
+            // If this ever returns, rethrow the error. We're poisoned
-            // catch VirtualMachineError (see above).  However, there is
+            // catch VirtualMachineError (see above). However, there is
+   * 

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66