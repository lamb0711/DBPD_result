Adding option partition-resolver in gfsh while creating a region.

+import joptsimple.internal.Strings;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.cache.PartitionResolver;
+    if (regionCreateArgs.isPartitionResolverSet()) {
+      Class<?> partitionResolverClass = forName(regionCreateArgs.getPartitionResolver(),
+          CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+      prAttrFactory
+          .setPartitionResolver((PartitionResolver<K, V>) newInstance(partitionResolverClass,
+              CliStrings.CREATE_REGION__PARTITION_RESOLVER));
+    }
+
+  private static Class<?> forName(String className, String neededFor) {
+    if (Strings.isNullOrEmpty(className)) {
+      return null;
+    }
+    try {
+      return ClassPathLoader.getLatest().forName(className);
+    } catch (ClassNotFoundException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_REGION_PARTITION_RESOLVER__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {className, neededFor}), e);
+    } catch (ClassCastException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_REGION__MSG__PARTITION_RESOLVER__CLASS_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
+          new Object[] {className, neededFor}), e);
+    }
+  }
+
+  private static Object newInstance(Class<?> klass, String neededFor) {
+    try {
+      return klass.newInstance();
+    } catch (InstantiationException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_REGION__MSG__PARTITION_RESOLVER__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {klass, neededFor}), e);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_REGION__MSG__PARTITION_RESOLVER__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {klass, neededFor}), e);
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS25 INS43 INS76 INS43 INS42 INS43 INS42 INS25 INS54 INS42 INS74 INS42 INS43 INS42 INS54 INS32 INS8 INS42 INS42 INS42 INS32 INS8 INS8 INS12 INS12 INS43 INS76 INS42 INS8 INS12 INS12 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS41 INS41 INS44 INS8 INS44 INS8 INS42 INS41 INS44 INS8 INS44 INS8 INS74 INS59 INS32 INS33 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS76 INS42 INS32 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS40 INS74 INS32 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42