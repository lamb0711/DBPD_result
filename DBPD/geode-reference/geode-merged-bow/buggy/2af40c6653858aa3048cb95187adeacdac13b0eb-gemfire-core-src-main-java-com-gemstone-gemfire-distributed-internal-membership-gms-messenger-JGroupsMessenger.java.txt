install the messenger's JGAddress into the JGroups stack so it will be transmitted with messages.  Add conversion from JGAddress to GMSMember and InternalDistributedMember for setting the sender of a message.  This shortens the length of JGroups messages by removing the GMSMember that was being serialized at the beginning of every message.

-    findLocalAddress();
+    establishLocalAddress();
+    
-  private void findLocalAddress() {
+  private void establishLocalAddress() {
+    myChannel.down(new Event(Event.SET_LOCAL_ADDRESS, this.jgAddress));
-//    msg.setSrc(src.asIpAddress());
+    msg.setSrc(src);
-        // TODO: preserialize this when the address is established
-        DataSerializer.writeObject(this.localAddress.getNetMember(), out_stream);
+//        DataSerializer.writeObject(this.localAddress.getNetMember(), out_stream);
+
+  /**
+   * deserialize a jgroups payload.  If it's a DistributionMessage find
+   * the ID of the sender and establish it as the message's sender
+   */
+  Object readJGMessage(Message jgmsg) {
+    Object result = null;
+    
+    int messageLength = jgmsg.getLength();
+    
+    if (messageLength == 0) {
+      // jgroups messages with no payload are used for protocol interchange, such
+      // as STABLE_GOSSIP
+      logger.debug("Message length is zero - ignoring");
+      return null;
+    }
+
+    InternalDistributedMember sender = null;
+
+    Exception problem = null;
+    try {
+      byte[] buf = jgmsg.getRawBuffer();
+      DataInputStream dis = new DataInputStream(new ByteArrayInputStream(buf, 
+          jgmsg.getOffset(), jgmsg.getLength()));
+
+      short ordinal = Version.readOrdinal(dis);
+      
+      if (ordinal < Version.CURRENT_ORDINAL) {
+        dis = new VersionedDataInputStream(dis, Version.fromOrdinalNoThrow(
+            ordinal, true));
+      }
+      
+      Address s = jgmsg.getSrc();
+      sender = getMemberFromView(s, ordinal);
+
+      result = DataSerializer.readObject(dis);
+      if (result instanceof DistributionMessage) {
+        ((DistributionMessage) result).setSender(sender);
+      }
+
+      logger.debug("JGroupsReceiver deserialized {}", result);
+
+    }
+    catch (ClassNotFoundException e) {
+      problem = e;
+    }
+    catch (IOException e) {
+      problem = e;
+    }
+    catch (RuntimeException e) {
+      problem = e;
+    }
+    if (problem != null) {
+      logger.error(LocalizedMessage.create(
+            LocalizedStrings.GroupMembershipService_EXCEPTION_DESERIALIZING_MESSAGE_PAYLOAD_0, jgmsg), problem);
+      return null;
+    }
+
+    return result;
+  }
+  
-      // TODO: does the new JGroups need to have the NAKACK digest transmitted
+      // TODO: for mcast does the new JGroups need to have the NAKACK digest transmitted
+  /**
+   * returns the member ID for the given GMSMember object
+   */
+  private InternalDistributedMember getMemberFromView(Address jgId, short version) {
+    NetView v = services.getJoinLeave().getView();
+    GMSMember gm = null;
+    
+    if ( !(jgId instanceof JGAddress) ) {
+      // not one of our addresses - gather info from JGroups to form
+      // a GMSAddress or fish for the ID using the UUID
+      IpAddress pa = (IpAddress)myChannel.down(new Event(Event.GET_PHYSICAL_ADDRESS, jgId));
+      if (pa == null) {
+        // worst-case scenario - we only have a UUID
+        for (InternalDistributedMember m: v.getMembers()) {
+          if (((GMSMember)m.getNetMember()).getUUID().equals(jgId)) {
+            return m;
+          }
+        }
+      }
+      gm = new GMSMember(pa.getIpAddress(), pa.getPort(),
+          false/*unknown*/, false/*unknown*/, version);
+    }
+    else {
+      JGAddress addr = (JGAddress)jgId;
+      gm = new GMSMember(addr.getInetAddress(), addr.getPort(),
+          false/*unknown*/, false/*unknown*/, version);
+    }
+    
+    if (v != null) {
+      for (InternalDistributedMember m: v.getMembers()) {
+        if (m.getNetMember().equals(jgId)) {
+          return m;
+        }
+      }
+    }
+    return new InternalDistributedMember(gm);
+  }
+
+
-      Object o = null;
-      int messageLength = jgmsg.getLength();
-      
-      if (messageLength == 0) {
-        // jgroups messages with no payload are used for protocol interchange, such
-        // as STABLE_GOSSIP
-        logger.debug("Message length is zero - ignoring");
-        return;
-      }
-
-      GMSMember sender = null;
-
-      Exception problem = null;
-      try {
-        byte[] buf = jgmsg.getRawBuffer();
-        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(buf, 
-            jgmsg.getOffset(), jgmsg.getLength()));
-
-        short ordinal = Version.readOrdinal(dis);
-        
-        if (ordinal < Version.CURRENT_ORDINAL) {
-          dis = new VersionedDataInputStream(dis, Version.fromOrdinalNoThrow(
-              ordinal, true));
-        }
-        
-        sender = DataSerializer.readObject(dis);
-        o = DataSerializer.readObject(dis);
-      }
-      catch (ClassNotFoundException e) {
-        problem = e;
-      }
-      catch (IOException e) {
-        problem = e;
-      }
-      catch (RuntimeException e) {
-        problem = e;
-      }
-      if (problem != null) {
-        logger.error(LocalizedMessage.create(
-              LocalizedStrings.GroupMembershipService_EXCEPTION_DESERIALIZING_MESSAGE_PAYLOAD_0, jgmsg), problem);
-        return;
-      }
-      
+      Object o = readJGMessage(jgmsg);
-        logger.warn("Received something other than a message from " + sender + " ("+jgmsg.getSrc()+") : " + o);
+        logger.warn("Received something other than a message from " + jgmsg.getSrc() + ": " + o);
-      msg.setBytesRead(messageLength);
+      msg.setBytesRead(jgmsg.getLength());
-      if (sender == null) {
+      if (msg.getSender() == null) {
-      InternalDistributedMember dm = getMemberFromView(sender);
-      msg.setSender(dm);
-
-      logger.debug("JGroupsReceiver deserialized {}", msg);
-
-    /**
-     * returns the member ID for the given GMSMember object
-     */
-    private InternalDistributedMember getMemberFromView(GMSMember mbr) {
-      NetView v = services.getJoinLeave().getView();
-      InternalDistributedMember dm = null;
-      if (v != null) {
-        for (InternalDistributedMember m: v.getMembers()) {
-          if (m.getNetMember().equals(mbr)) {
-            dm = m;
-            break;
-          }
-        }
-      }
-      if (dm == null) {
-        dm = new InternalDistributedMember(mbr);
-      }
-      return dm;
-    }
-
-

INS31 INS31 UPD42 INS29 INS43 INS42 INS44 INS8 MOV29 INS83 MOV43 INS42 INS44 INS44 INS8 INS21 INS21 INS65 INS42 INS43 INS42 INS60 MOV60 MOV25 MOV60 MOV60 MOV54 MOV25 INS41 INS43 INS42 INS39 INS42 MOV60 INS60 INS25 MOV25 INS41 INS32 INS32 INS66 INS66 INS42 MOV43 INS59 MOV43 MOV21 INS42 INS42 MOV43 INS59 INS38 INS8 INS8 INS14 INS60 INS21 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS21 INS42 INS33 INS36 INS60 INS25 INS21 INS60 INS21 MOV43 INS42 INS43 MOV59 INS32 INS43 INS40 INS22 INS33 INS43 INS59 INS62 INS8 INS32 INS33 INS62 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS7 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS52 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS43 INS21 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS11 INS42 INS33 INS70 INS42 INS14 INS42 INS42 INS11 INS42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS43 INS32 INS44 INS32 INS8 INS43 INS32 INS32 INS9 INS9 INS42 INS43 INS42 MOV43 INS32 INS32 INS9 INS9 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS41 INS11 INS43 INS40 INS42 INS42 INS32 INS8 INS42 UPD45 INS43 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS36 INS42 INS42 INS11 INS43 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL10 DEL42 DEL33 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL60 DEL42 DEL32 DEL21 DEL42 DEL45 DEL32 DEL21 DEL83 DEL42 DEL42 DEL44 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31