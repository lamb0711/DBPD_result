GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-      logger.error(LocalizedMessage.create(LocalizedStrings.HeapMemoryMonitor_NO_POOL_FOUND_POOLS_0,
-          getAllMemoryPoolNames()));
+      logger.error("No tenured pools found.  Known pools are: {}",
+          getAllMemoryPoolNames());
-    throw new IllegalStateException(LocalizedStrings.HeapMemoryMonitor_NO_POOL_FOUND_POOLS_0
-        .toLocalizedString(getAllMemoryPoolNames()));
+    throw new IllegalStateException(String.format("No tenured pools found.  Known pools are: %s",
+        getAllMemoryPoolNames()));
-            LocalizedStrings.MemoryThresholds_CRITICAL_PERCENTAGE_GT_ZERO_AND_LTE_100
-                .toLocalizedString());
+            "Critical percentage must be greater than 0.0 and less than or equal to 100.0.");
-        throw new IllegalStateException(LocalizedStrings.HeapMemoryMonitor_NO_POOL_FOUND_POOLS_0
-            .toLocalizedString(getAllMemoryPoolNames()));
+        throw new IllegalStateException(
+            String.format("No tenured pools found.  Known pools are: %s",
+                getAllMemoryPoolNames()));
-            LocalizedStrings.MemoryThresholds_CRITICAL_PERCENTAGE_GTE_EVICTION_PERCENTAGE
-                .toLocalizedString());
+            "Critical percentage must be greater than the eviction percentage.");
-            LocalizedStrings.MemoryThresholds_EVICTION_PERCENTAGE_GT_ZERO_AND_LTE_100
-                .toLocalizedString());
+            "Eviction percentage must be greater than 0.0 and less than or equal to 100.0.");
-        throw new IllegalStateException(LocalizedStrings.HeapMemoryMonitor_NO_POOL_FOUND_POOLS_0
-            .toLocalizedString(getAllMemoryPoolNames()));
+        throw new IllegalStateException(
+            String.format("No tenured pools found.  Known pools are: %s",
+                getAllMemoryPoolNames()));
-            LocalizedStrings.MemoryMonitor_EVICTION_PERCENTAGE_LTE_CRITICAL_PERCENTAGE
-                .toLocalizedString());
+            "Eviction percentage must be less than the critical percentage.");
-    this.cache.getLoggerI18n().info(
-        LocalizedStrings.HeapMemoryMonitor_OVERRIDDING_MEMORYPOOLMXBEAN_HEAP_0_NAME_1,
-        new Object[] {usageThreshold, memoryPoolMXBean.getName()});
+    this.cache.getLogger().info(
+        String.format("Overridding MemoryPoolMXBean heap threshold bytes %s on pool %s",
+            new Object[] {usageThreshold, memoryPoolMXBean.getName()}));
-      this.cache.getLoggerI18n().error(
-          LocalizedStrings.MemoryMonitor_MEMBER_ABOVE_CRITICAL_THRESHOLD,
-          new Object[] {event.getMember(), "heap"});
+      this.cache.getLogger().error(
+          String.format("Member: %s above %s critical threshold",
+              new Object[] {event.getMember(), "heap"}));
-      this.cache.getLoggerI18n().error(
-          LocalizedStrings.MemoryMonitor_MEMBER_BELOW_CRITICAL_THRESHOLD,
-          new Object[] {event.getMember(), "heap"});
+      this.cache.getLogger().error(
+          String.format("Member: %s below %s critical threshold",
+              new Object[] {event.getMember(), "heap"}));
-      this.cache.getLoggerI18n().info(LocalizedStrings.MemoryMonitor_MEMBER_ABOVE_HIGH_THRESHOLD,
-          new Object[] {event.getMember(), "heap"});
+      this.cache.getLogger().info(String.format("Member: %s above %s eviction threshold",
+          new Object[] {event.getMember(), "heap"}));
-      this.cache.getLoggerI18n().info(LocalizedStrings.MemoryMonitor_MEMBER_BELOW_HIGH_THRESHOLD,
-          new Object[] {event.getMember(), "heap"});
+      this.cache.getLogger().info(String.format("Member: %s below %s eviction threshold",
+          new Object[] {event.getMember(), "heap"}));
-        this.cache.getLoggerI18n()
-            .error(LocalizedStrings.MemoryMonitor_EXCEPTION_OCCURRED_WHEN_NOTIFYING_LISTENERS, t);
+        this.cache.getLogger()
+            .error("Exception occurred when notifying listeners ", t);
-            LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
-                .toLocalizedString(function.getId(), criticalMembersFrom),
+            String.format(
+                "Function: %s cannot be executed because the members %s are running low on memory",
+                function.getId(), criticalMembersFrom),
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.ResourceManager_REJECTED_EXECUTION_CAUSE_NOHEAP_EVENTS));
+          logger.warn("No memory events will be delivered because of RejectedExecutionException");

INS32 UPD42 INS42 INS45 UPD42 INS42 INS42 INS45 MOV3 INS45 MOV32 INS32 INS32 UPD42 INS42 INS42 INS45 MOV3 INS32 UPD42 INS42 INS42 INS45 MOV3 INS32 INS45 INS45 INS45 INS45 UPD42 INS42 INS42 INS45 MOV3 UPD42 INS42 INS42 INS45 MOV3 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 UPD42 INS42 INS45 UPD42 INS45 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32