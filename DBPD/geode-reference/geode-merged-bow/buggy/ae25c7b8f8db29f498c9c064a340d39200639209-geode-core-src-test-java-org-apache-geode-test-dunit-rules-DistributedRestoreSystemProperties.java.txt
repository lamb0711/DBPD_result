GEODE-4789: upgrade system-rules from 1.16.1 to 1.17.1

Make DistributedRestoreSystemProperties delegate to RestoreSystemProperties

-import static java.lang.System.*;
+import static org.apache.geode.test.dunit.Host.getHost;
+import static org.assertj.core.api.Assertions.assertThat;
-import java.util.Properties;
-
-import org.junit.contrib.java.lang.system.RestoreSystemProperties;
-
-import org.apache.geode.test.dunit.SerializableRunnable;
+import org.apache.geode.test.junit.rules.accessible.AccessibleRestoreSystemProperties;
-public class DistributedRestoreSystemProperties extends RestoreSystemProperties
+public class DistributedRestoreSystemProperties extends AccessibleRestoreSystemProperties
-  private static volatile Properties originalProperties;
+  private static final AccessibleRestoreSystemProperties restoreSystemProperties =
+      new AccessibleRestoreSystemProperties();
+  private volatile int beforeVmCount;
+
-    super.before();
-    this.invoker.invokeInEveryVMAndController(new SerializableRunnable() {
-      @Override
-      public void run() {
-        if (originalProperties == null) {
-          originalProperties = getProperties();
-          setProperties(copyOf(originalProperties));
-        }
-      }
-    });
-  }
+    beforeVmCount = getVMCount();
-  private Properties copyOf(Properties source) {
-    Properties copy = new Properties();
-    copy.putAll(source);
-    return copy;
+    invoker.invokeInEveryVMAndController(() -> invokeBefore());
-    super.after();
-    this.invoker.invokeInEveryVMAndController(new SerializableRunnable() {
-      @Override
-      public void run() {
-        if (originalProperties != null) {
-          setProperties(originalProperties);
-          originalProperties = null;
-        }
+    int afterVmCount = getVMCount();
+    assertThat(afterVmCount).isEqualTo(beforeVmCount);
+
+    invoker.invokeInEveryVMAndController(() -> invokeAfter());
+  }
+
+  private void invokeBefore() throws Exception {
+    try {
+      restoreSystemProperties.before();
+    } catch (Throwable throwable) {
+      if (throwable instanceof Exception) {
+        throw (Exception) throwable;
-    });
+      throw new RuntimeException(throwable);
+    }
+  }
+
+  private void invokeAfter() {
+    restoreSystemProperties.after();
+  }
+
+  private int getVMCount() {
+    try {
+      return getHost(0).getVMCount();
+    } catch (IllegalArgumentException e) {
+      throw new IllegalStateException("DUnit VMs have not been launched");
+    }

UPD40 UPD40 UPD40 UPD43 INS23 INS31 INS31 INS31 INS31 UPD42 UPD83 UPD43 INS83 INS83 INS39 INS59 MOV78 MOV83 MOV39 MOV42 MOV43 INS8 MOV78 MOV83 MOV39 UPD42 MOV42 MOV8 INS39 INS42 UPD43 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 UPD42 UPD42 INS14 INS42 MOV21 INS21 INS60 INS21 MOV21 UPD42 INS54 MOV21 INS54 INS43 INS7 INS32 INS39 INS59 INS32 INS8 INS12 INS32 INS8 INS12 INS42 INS42 INS32 INS42 MOV42 INS86 INS42 INS32 INS32 INS42 INS42 UPD42 UPD42 MOV42 INS86 INS21 INS44 INS8 INS42 INS42 INS41 INS44 INS8 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS32 UPD43 MOV43 UPD42 MOV42 INS25 INS53 INS32 INS43 INS42 INS53 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS62 INS8 INS14 INS32 UPD42 MOV42 INS42 INS14 INS42 INS43 INS53 INS43 INS42 UPD42 MOV42 INS34 INS43 INS45 UPD42 MOV42 INS11 INS42 INS42 INS43 INS42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL48 DEL32 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL44 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL48 DEL42 DEL78 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL78 DEL42 DEL33 DEL27 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31