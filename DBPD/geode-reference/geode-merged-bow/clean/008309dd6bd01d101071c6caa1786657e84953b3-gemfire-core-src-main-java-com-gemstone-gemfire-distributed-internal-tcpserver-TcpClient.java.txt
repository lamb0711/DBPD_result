Merge branch 'release/1.0.0-incubating.M1'

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import java.net.InetSocketAddress;
+import org.apache.logging.log4j.Logger;
+
-import com.gemstone.org.jgroups.stack.IpAddress;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+import com.gemstone.gemfire.internal.logging.LogService;
-  private static final GemFireTracer LOG=GemFireTracer.getLog(TcpClient.class);
+  private static final Logger logger = LogService.getLogger();
+  
-  private static Map<IpAddress, Short> serverVersions = new HashMap<IpAddress, Short>();
+  private static Map<InetSocketAddress, Short> serverVersions = new HashMap<InetSocketAddress, Short>();
-      LOG.error("TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error("TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-      LOG.error("TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error("TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-    IpAddress ipAddr;
+    InetSocketAddress ipAddr;
-      ipAddr = new IpAddress(port);
+      ipAddr = new InetSocketAddress(port);
-      ipAddr = new IpAddress(addr, port); // fix for bug 30810
+      ipAddr = new InetSocketAddress(addr, port); // fix for bug 30810
+    
+    logger.debug("TcpClient sending {} to {}", request, ipAddr);
+    long giveupTime = System.currentTimeMillis() + timeout;
+    
-    short serverVersion = getServerVersion(ipAddr, REQUEST_TIMEOUT).shortValue();
+    short serverVersion = getServerVersion(ipAddr, timeout).shortValue();
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getIpAddress(), ipAddr.getPort(), timeout, null, false);
-    sock.setSoTimeout(timeout);
+    long newTimeout = giveupTime - System.currentTimeMillis();
+    if (newTimeout <= 0) {
+      return null;
+    }
+    
+    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), (int)newTimeout, null, false);
+    sock.setSoTimeout((int)newTimeout);
+    DataOutputStream out = null;
-      DataOutputStream out=new DataOutputStream(sock.getOutputStream());
+      out=new DataOutputStream(sock.getOutputStream());
+      
+          logger.debug("received response: {}", response);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Remote TcpServer version: " + serverVersion
+      if (logger.isDebugEnabled()) {
+        logger.debug("Remote TcpServer version: " + serverVersion
+      if (out != null) {
+        out.close();
+      }
-        LOG.error("Error closing socket ", e);
+        logger.error("Error closing socket ", e);
-  public static Short getServerVersion(IpAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
+  public static Short getServerVersion(InetSocketAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getIpAddress(), ipAddr.getPort(), timeout, null, false);
+    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-        LOG.error("Error closing socket ", e);
+        logger.error("Error closing socket ", e);
-    if (LOG.getLogWriter().fineEnabled()) {
-      LOG.getLogWriter().fine("Locator " + ipAddr + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");
+    if (logger.isDebugEnabled()) {
+      logger.debug("Locator " + ipAddr + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");

MOV26 INS26 UPD40 INS40 UPD40 UPD43 UPD74 UPD42 UPD42 UPD43 INS21 INS60 INS60 INS25 INS60 UPD43 UPD42 UPD42 UPD42 UPD74 UPD43 INS32 INS39 INS59 INS39 INS59 INS27 INS8 MOV43 INS59 UPD42 UPD43 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS34 INS41 INS11 INS42 INS33 INS21 INS25 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS33 INS11 INS39 INS42 INS7 INS27 INS8 INS42 INS42 UPD42 INS42 INS42 UPD42 INS39 INS42 INS42 MOV14 INS42 INS33 INS21 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 INS32 UPD42 UPD42 INS21 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS45 INS42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32