GEODE-4858: Update *DiskStore commands to use ResultModel and SingleGfshCommand (#1996)


-import java.io.IOException;
+import java.util.concurrent.TimeUnit;
-import org.apache.geode.management.internal.cli.GfshParser;
+import org.apache.geode.management.internal.cli.LogWrapper;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result validateDiskStore(
+  public ResultModel validateDiskStore(
+
+    ResultModel result = new ResultModel();
+    InfoResultModel infoResult = result.addInfo();
+    LogWrapper logWrapper = LogWrapper.getInstance(getCache());
+    Process validateDiskStoreProcess = null;
+
-      StringBuilder output = new StringBuilder();
-      String errorString = "";
+      procBuilder.redirectErrorStream(true);
-      Process validateDiskStoreProcess = procBuilder.redirectErrorStream(true).start();
+      validateDiskStoreProcess = procBuilder.redirectErrorStream(true).start();
+
-
-        output.append(line).append(GfshParser.LINE_SEPARATOR);
+        infoResult.addLine(line);
-      validateDiskStoreProcess.destroy();
-      output.append(errorString).append(GfshParser.LINE_SEPARATOR);
-      String resultString =
-          "Validating " + diskStoreName + GfshParser.LINE_SEPARATOR + output.toString();
-      return ResultBuilder.createInfoResult(resultString);
-    } catch (IOException ex) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.VALIDATE_DISK_STORE__MSG__IO_ERROR, diskStoreName, ex.getMessage()));
-    } catch (Exception ex) {
-      // StringPrintWriter s = new StringPrintWriter();
-      // ex.printStackTrace(s);
-      return ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.VALIDATE_DISK_STORE__MSG__ERROR, diskStoreName, ex.getMessage()));
+      validateDiskStoreProcess.waitFor(2, TimeUnit.SECONDS);
+      if (validateDiskStoreProcess.exitValue() != 0) {
+        result.setStatus(Result.Status.ERROR);
+      }
+    } catch (Exception e) {
+      infoResult.addLine(
+          String.format("Error compacting disk store %s: %s", diskStoreName, e.getMessage()));
+      result.setStatus(Result.Status.ERROR);
+      logWrapper.warning(e.getMessage(), e);
+    } finally {
+      if (validateDiskStoreProcess != null) {
+        try {
+          // just to check whether the process has exited
+          // Process.exitValue() throws IllegalThreadStateException if Process
+          // is alive
+          validateDiskStoreProcess.exitValue();
+        } catch (IllegalThreadStateException ise) {
+          // not yet terminated, destroy the process
+          validateDiskStoreProcess.destroy();
+        }
+      }
+
+    return result;

MOV26 INS26 UPD40 UPD40 INS40 UPD40 UPD43 UPD42 INS60 INS60 INS60 INS60 INS41 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS12 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS25 MOV44 INS8 INS25 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS27 INS8 UPD42 INS21 INS21 INS21 INS27 INS8 INS42 INS42 INS42 INS42 INS9 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS34 UPD40 MOV32 INS34 INS21 INS32 INS32 INS32 INS42 INS33 INS54 INS32 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS8 INS12 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS45 UPD42 INS21 INS44 INS8 UPD42 INS32 INS43 INS42 MOV21 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL59 DEL60 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL45 DEL42 DEL40 DEL27 DEL59 DEL60 DEL42 DEL32 DEL41 DEL40 DEL42 DEL43 DEL42 DEL44 DEL32 DEL41 DEL8 DEL12 DEL40 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12