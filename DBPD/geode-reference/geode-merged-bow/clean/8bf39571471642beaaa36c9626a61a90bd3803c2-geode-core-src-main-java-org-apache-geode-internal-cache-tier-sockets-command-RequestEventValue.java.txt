Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private RequestEventValue() {
-  }
+  private RequestEventValue() {}
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException {
-    
+
-      logger.warn(LocalizedMessage.create(LocalizedStrings.RequestEventValue_0_THE_EVENT_ID_FOR_THE_GET_EVENT_VALUE_REQUEST_IS_NULL, servConn.getName()));
-      errMessage
-          .append(" The event id for the get event value request is null.");
-      writeErrorResponse(msg, MessageType.REQUESTDATAERROR, errMessage
-          .toString(), servConn);
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.RequestEventValue_0_THE_EVENT_ID_FOR_THE_GET_EVENT_VALUE_REQUEST_IS_NULL,
+          servConn.getName()));
+      errMessage.append(" The event id for the get event value request is null.");
+      writeErrorResponse(msg, MessageType.REQUESTDATAERROR, errMessage.toString(), servConn);
-    }
-    else {
+    } else {
-        event = (EventID)eventIDPart.getObject();
-      }
-      catch (Exception e) {
+        event = (EventID) eventIDPart.getObject();
+      } catch (Exception e) {
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
-        logger.trace("{}: Received get event value request ({} bytes) from {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString());
+        logger.trace("{}: Received get event value request ({} bytes) from {}", servConn.getName(),
+            msg.getPayloadLength(), servConn.getSocketString());
-      HAContainerWrapper haContainer = (HAContainerWrapper)ccn.getHaContainer();
+      HAContainerWrapper haContainer = (HAContainerWrapper) ccn.getHaContainer();
-      }
-      else {
+      } else {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.RequestEventValue_UNABLE_TO_FIND_A_CLIENT_UPDATE_MESSAGE_FOR_0, event));
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.RequestEventValue_UNABLE_TO_FIND_A_CLIENT_UPDATE_MESSAGE_FOR_0,
+                event));
-          }
-          else {
+          } else {
-            Object val = ((ClientUpdateMessageImpl)data).getValueToConflate();
+            Object val = ((ClientUpdateMessageImpl) data).getValueToConflate();
-              if(val instanceof CachedDeserializable) {
+              if (val instanceof CachedDeserializable) {
-              ((ClientUpdateMessageImpl)data).setLatestValue(val);
+              ((ClientUpdateMessageImpl) data).setLatestValue(val);
-            valueAndIsObject[1] = Boolean.valueOf(((ClientUpdateMessageImpl)data).valueIsObject());
+            valueAndIsObject[1] = Boolean.valueOf(((ClientUpdateMessageImpl) data).valueIsObject());
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
-        boolean isObject = (Boolean)valueAndIsObject[1];
+        boolean isObject = (Boolean) valueAndIsObject[1];
-          logger.debug("{}: Wrote get event value response back to {} for ha container {}", servConn.getName(), servConn.getSocketString(), haContainer.getName());
+          logger.debug("{}: Wrote get event value response back to {} for ha container {}",
+              servConn.getName(), servConn.getSocketString(), haContainer.getName());

