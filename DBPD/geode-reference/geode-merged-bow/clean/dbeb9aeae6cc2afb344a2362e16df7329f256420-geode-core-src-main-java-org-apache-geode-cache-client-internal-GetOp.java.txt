Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-   * Does a region get on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region get on a server using connections from the given pool to communicate with the
+   * server.
+   * 
-  public static Object execute(ExecutablePool pool, LocalRegion region,
-      Object key, Object callbackArg, boolean prSingleHopEnabled, EntryEventImpl clientEvent) {
-    ClientMetadataService cms = ((GemFireCacheImpl)region.getCache())
-        .getClientMetadataService();
-    GetOpImpl op = new GetOpImpl(region, key, callbackArg,
-        prSingleHopEnabled, clientEvent);
+  public static Object execute(ExecutablePool pool, LocalRegion region, Object key,
+      Object callbackArg, boolean prSingleHopEnabled, EntryEventImpl clientEvent) {
+    ClientMetadataService cms = ((GemFireCacheImpl) region.getCache()).getClientMetadataService();
+    GetOpImpl op = new GetOpImpl(region, key, callbackArg, prSingleHopEnabled, clientEvent);
-      ServerLocation server = cms.getBucketServerLocation(region,
-          Operation.GET, key, null, callbackArg);
-        if (server != null) {
-          try {
-            PoolImpl poolImpl = (PoolImpl)pool;
-            boolean onlyUseExistingCnx = ((poolImpl.getMaxConnections() != -1 && poolImpl
-                .getConnectionCount() >= poolImpl.getMaxConnections()) ? true
-                : false);
-            op.setAllowDuplicateMetadataRefresh(! onlyUseExistingCnx);
-            return pool.executeOn(new ServerLocation(server.getHostName(),
-                server.getPort()), op, true, onlyUseExistingCnx);
+      ServerLocation server =
+          cms.getBucketServerLocation(region, Operation.GET, key, null, callbackArg);
+      if (server != null) {
+        try {
+          PoolImpl poolImpl = (PoolImpl) pool;
+          boolean onlyUseExistingCnx = ((poolImpl.getMaxConnections() != -1
+              && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);
+          op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);
+          return pool.executeOn(new ServerLocation(server.getHostName(), server.getPort()), op,
+              true, onlyUseExistingCnx);
+        } catch (AllConnectionsInUseException e) {
+        } catch (ServerConnectivityException e) {
+          if (e instanceof ServerOperationException) {
+            throw e; // fixed 44656
-          catch (AllConnectionsInUseException e) {
-          }
-          catch (ServerConnectivityException e) {
-            if (e instanceof ServerOperationException) {
-              throw e; // fixed 44656
-            }
+          cms.removeBucketServerLocation(server);
+        } catch (CacheLoaderException e) {
+          if (e.getCause() instanceof ServerConnectivityException)
-          }
-          catch (CacheLoaderException e) {
-            if (e.getCause() instanceof ServerConnectivityException)
-              cms.removeBucketServerLocation(server);
-          }
+      }
-                                                               
+
-  
+
-    
-    private LocalRegion region=null ;
-    
+
+    private LocalRegion region = null;
+
-      return "GetOpImpl(key="+key+")";
+      return "GetOpImpl(key=" + key + ")";
-    
+
-    public GetOpImpl(LocalRegion region,
-                     Object key,
-                     Object callbackArg,
-                     boolean prSingleHopEnabled, 
-                     EntryEventImpl clientEvent) {
+    public GetOpImpl(LocalRegion region, Object key, Object callbackArg, boolean prSingleHopEnabled,
+        EntryEventImpl clientEvent) {
-        logger.debug("constructing a GetOp for key {}", key/*, new Exception("stack trace")*/);
+        logger.debug("constructing a GetOp for key {}", key/* , new Exception("stack trace") */);
-      this.region = region ;
+      this.region = region;
-      this.key = key ;
+      this.key = key;
-    
+
-    
+
-        if ((object == null)  &&  ((flags & VALUE_IS_INVALID) != 0)) {
+        if ((object == null) && ((flags & VALUE_IS_INVALID) != 0)) {
-          VersionTag tag = (VersionTag)msg.getPart(partIdx++).getObject();
+          VersionTag tag = (VersionTag) msg.getPart(partIdx++).getObject();
-          assert con.getEndpoint() != null; //for debugging
+          assert con.getEndpoint() != null; // for debugging
-          if (noOfMsgParts == partIdx+1) {
+          if (noOfMsgParts == partIdx + 1) {
-                  int myVersion = cms.getMetaDataVersion(region, Operation.UPDATE,
-                    key, null, callbackArg);
+                  int myVersion =
+                      cms.getMetaDataVersion(region, Operation.UPDATE, key, null, callbackArg);
-                }
-                catch (CacheClosedException e) {
+                } catch (CacheClosedException e) {
-          }
-          else if (noOfMsgParts == partIdx+2) {
+          } else if (noOfMsgParts == partIdx + 2) {
-                  version = cms.getMetaDataVersion(region, Operation.UPDATE, key,
-                      null, callbackArg);
-                }
-                catch (CacheClosedException e) {
+                  version =
+                      cms.getMetaDataVersion(region, Operation.UPDATE, key, null, callbackArg);
+                } catch (CacheClosedException e) {
-                  cms.scheduleGetPRMetaData(region, false,bytesReceived[1]);
+                  cms.scheduleGetPRMetaData(region, false, bytesReceived[1]);
+
+
+

UPD66 UPD66