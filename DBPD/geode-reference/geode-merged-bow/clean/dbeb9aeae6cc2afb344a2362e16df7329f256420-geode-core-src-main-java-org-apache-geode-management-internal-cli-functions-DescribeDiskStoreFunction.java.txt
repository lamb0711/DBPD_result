Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The DescribeDiskStoreFunction class is an implementation of a GemFire Function used to collect information
- * and details about a particular disk store for a particular GemFire distributed system member.
+ * The DescribeDiskStoreFunction class is an implementation of a GemFire Function used to collect
+ * information and details about a particular disk store for a particular GemFire distributed system
+ * member.
-  protected static void assertState(final boolean condition, final String message, final Object... args) {
+  protected static void assertState(final boolean condition, final String message,
+      final Object... args) {
-  public void init(final Properties props) {
-  }
+  public void init(final Properties props) {}
-            diskStore.getName(), memberId, memberName);
+              diskStore.getName(), memberId, memberName);
-          diskStoreDetails.setDiskUsageCriticalPercentage(diskStore.getDiskUsageCriticalPercentage());
-          
+          diskStoreDetails
+              .setDiskUsageCriticalPercentage(diskStore.getDiskUsageCriticalPercentage());
+
-        }
-        else {
-          context.getResultSender().sendException(new DiskStoreNotFoundException(String.format(
-            "A disk store with name (%1$s) was not found on member (%2$s).",
-              diskStoreName, memberName)));
+        } else {
+          context.getResultSender()
+              .sendException(new DiskStoreNotFoundException(
+                  String.format("A disk store with name (%1$s) was not found on member (%2$s).",
+                      diskStoreName, memberName)));
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-  private void setDiskDirDetails(final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  private void setDiskDirDetails(final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-      "The number of disk directories with a specified size (%1$d) does not match the number of disk directories (%2$d)!",
+        "The number of disk directories with a specified size (%1$d) does not match the number of disk directories (%2$d)!",
-        ArrayUtils.getElementAtIndex(diskDirSizes, index, 0)));
+          ArrayUtils.getElementAtIndex(diskDirSizes, index, 0)));
-      DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
+        DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
-    return (region.getAttributes().getEvictionAttributes() != null && EvictionAction.OVERFLOW_TO_DISK.equals(
-      region.getAttributes().getEvictionAttributes().getAction()));
+    return (region.getAttributes().getEvictionAttributes() != null
+        && EvictionAction.OVERFLOW_TO_DISK
+            .equals(region.getAttributes().getEvictionAttributes().getAction()));
-    return ((isPersistent(region) || isOverflowToDisk(region)) && ObjectUtils.equals(getDiskStoreName(region), diskStore.getName()));
+    return ((isPersistent(region) || isOverflowToDisk(region))
+        && ObjectUtils.equals(getDiskStoreName(region), diskStore.getName()));
-  protected void setRegionDetails(final InternalCache cache, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  protected void setRegionDetails(final InternalCache cache, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-  private void setRegionDetails(final Region<?, ?> region, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  private void setRegionDetails(final Region<?, ?> region, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-      DiskStoreDetails.RegionDetails regionDetails = new DiskStoreDetails.RegionDetails(regionFullPath,
-        StringUtils.defaultIfBlank(region.getName(), regionFullPath));
+      DiskStoreDetails.RegionDetails regionDetails = new DiskStoreDetails.RegionDetails(
+          regionFullPath, StringUtils.defaultIfBlank(region.getName(), regionFullPath));
-    return (cacheServer.getClientSubscriptionConfig() == null ? null : StringUtils.defaultIfBlank(
-      cacheServer.getClientSubscriptionConfig().getDiskStoreName(), DiskStoreDetails.DEFAULT_DISK_STORE_NAME));
+    return (cacheServer.getClientSubscriptionConfig() == null ? null
+        : StringUtils.defaultIfBlank(cacheServer.getClientSubscriptionConfig().getDiskStoreName(),
+            DiskStoreDetails.DEFAULT_DISK_STORE_NAME));
-  protected void setCacheServerDetails(final InternalCache cache, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  protected void setCacheServerDetails(final InternalCache cache, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-        DiskStoreDetails.CacheServerDetails cacheServerDetails = new DiskStoreDetails.CacheServerDetails(
-          cacheServer.getBindAddress(), cacheServer.getPort());
+        DiskStoreDetails.CacheServerDetails cacheServerDetails =
+            new DiskStoreDetails.CacheServerDetails(cacheServer.getBindAddress(),
+                cacheServer.getPort());
-    return StringUtils.defaultIfBlank(gateway.getDiskStoreName(), DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
+    return StringUtils.defaultIfBlank(gateway.getDiskStoreName(),
+        DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
-  
+
-  
+
-  protected void setGatewayDetails(final InternalCache cache, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  protected void setGatewayDetails(final InternalCache cache, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-        DiskStoreDetails.GatewayDetails gatewayDetails = new DiskStoreDetails.GatewayDetails(gatewaySender.getId());
+        DiskStoreDetails.GatewayDetails gatewayDetails =
+            new DiskStoreDetails.GatewayDetails(gatewaySender.getId());
-  protected void setPdxSerializationDetails(final InternalCache cache, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  protected void setPdxSerializationDetails(final InternalCache cache, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {
-      String diskStoreName = StringUtils.defaultIfBlank(cache.getPdxDiskStore(), DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
-      diskStoreDetails.setPdxSerializationMetaDataStored(ObjectUtils.equals(diskStoreName, diskStore.getName()));
+      String diskStoreName = StringUtils.defaultIfBlank(cache.getPdxDiskStore(),
+          DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
+      diskStoreDetails.setPdxSerializationMetaDataStored(
+          ObjectUtils.equals(diskStoreName, diskStore.getName()));
-    return StringUtils.defaultIfBlank(queue.getDiskStoreName(), DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
+    return StringUtils.defaultIfBlank(queue.getDiskStoreName(),
+        DiskStoreDetails.DEFAULT_DISK_STORE_NAME);
-    return (queue.isPersistent() && ObjectUtils.equals(getDiskStoreName(queue), diskStore.getName()));
+    return (queue.isPersistent()
+        && ObjectUtils.equals(getDiskStoreName(queue), diskStore.getName()));
-  protected void setAsyncEventQueueDetails(final InternalCache cache, final DiskStore diskStore, final DiskStoreDetails diskStoreDetails) {
+  protected void setAsyncEventQueueDetails(final InternalCache cache, final DiskStore diskStore,
+      final DiskStoreDetails diskStoreDetails) {

UPD66 UPD66 INS66