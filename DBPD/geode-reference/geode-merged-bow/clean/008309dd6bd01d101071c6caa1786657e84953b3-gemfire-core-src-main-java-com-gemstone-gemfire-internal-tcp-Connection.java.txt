Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.i18n.StringId;
-import com.gemstone.org.jgroups.util.StringId;
+  /** string used as the reason for initiating suspect processing */
+  public static final String INITIATING_SUSPECT_PROCESSING = "member unexpectedly shut down shared, unordered connection";
+
+  
+  /** Set to false once run() is terminating. Using this instead of Thread.isAlive  
+    * as the reader thread may be a pooled thread.
+    */ 
+  private volatile boolean isRunning = false; 
-  // return true if this thread is a reader thread
-    isReaderThread.set(Boolean.TRUE);
+    makeReaderThread(true);
+  private final static void makeReaderThread(boolean v) {
+    isReaderThread.set(v);
+  }
+  // return true if this thread is a reader thread
-  /** remoteId identifies the remote conduit's listener.  It does NOT
-     identify the "port" that this connection's socket is attached
-     to, which is a different thing altogether */
-  Stub remoteId;
-
-  Thread readerThread;
+  private volatile Thread readerThread;
-      c.startReader();
+      c.startReader(t);
-  private Connection(ConnectionTable t, Socket s)
+  protected Connection(ConnectionTable t, Socket s)
-        SocketCreator.asyncClose(s, this.remoteAddr.toString(), null);
+        t.getSocketCloser().asyncClose(s, this.remoteAddr.toString(), null);
+              // late in the life of jdk 1.7 we started seeing connections accepted
+              // when accept() was not even being called.  This started causing timeouts
+              // to occur in the handshake threads instead of causing failures in
+              // connection-formation.  So, we need to initiate suspect processing here
+              owner.getDM().getMembershipManager().suspectMember(this.remoteAddr,
+                  LocalizedStrings.Connection_CONNECTION_HANDSHAKE_WITH_0_TIMED_OUT_AFTER_WAITING_1_MILLISECONDS.toLocalizedString(
+                      new Object[] {peerName, Integer.valueOf(HANDSHAKE_TIMEOUT_MS)}));
-              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr, this.remoteId);
+              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr);
+  private final AtomicBoolean asyncCloseCalled = new AtomicBoolean();
+  
-    // note: remoteId may be null if this is a receiver that hasn't finished its handshake
+    // note: remoteAddr may be null if this is a receiver that hasn't finished its handshake
-    Runnable r = new Runnable() {
-      public void run() {
-        boolean rShuttingDown = readerShuttingDown;
-        synchronized(stateLock) {
-          if (readerThread != null && readerThread.isAlive() &&
-              !rShuttingDown && connectionState == STATE_READING
-              || connectionState == STATE_READING_ACK) {
-            readerThread.interrupt();
-          }
-        }
-      }
-    };
+
-      r.run();
+      prepareForAsyncClose();
-      SocketCreator.asyncClose(this.socket, String.valueOf(this.remoteAddr), r);
+      if (this.asyncCloseCalled.compareAndSet(false, true)) {
+        Socket s = this.socket;
+        if (s != null && !s.isClosed()) {
+          prepareForAsyncClose();
+          this.owner.getSocketCloser().asyncClose(s, String.valueOf(this.remoteAddr), null);
+        }
+      }
+  private void prepareForAsyncClose() {
+    synchronized(stateLock) {
+      if (readerThread != null && isRunning && !readerShuttingDown
+          && (connectionState == STATE_READING || connectionState == STATE_READING_ACK)) {
+        readerThread.interrupt();
+      }
+    }
+  }
-  private void handshakeNio() throws IOException {
-    // We jump through some extra hoops to use a MsgOutputStream
-    // This keeps us from allocating an extra DirectByteBuffer.
+  /**
+   * waits until we've joined the distributed system
+   * before returning
+   */
+  private void waitForAddressCompletion() {
-      while (myAddr.getIpAddress() == null) {
+      while ((owner.getConduit().getCancelCriterion().cancelInProgress() == null)
+          && myAddr.getInetAddress() == null && myAddr.getVmViewId() < 0) {
-          myAddr.wait(); // spurious wakeup ok
+          myAddr.wait(100); // spurious wakeup ok
+      Assert.assertTrue(myAddr.getDirectChannelPort() == this.owner.getConduit().getPort());
+  }
-    Assert.assertTrue(myAddr.getDirectChannelPort() == this.owner.getConduit().getPort());
-
+  private void handshakeNio() throws IOException {
+    waitForAddressCompletion();
+    
+    InternalDistributedMember myAddr = this.owner.getConduit().getLocalAddress();
+    waitForAddressCompletion();
+
-  private void attemptHandshake() throws IOException {
+  private void attemptHandshake(ConnectionTable connTable) throws IOException {
-    startReader(); // this reader only reads the handshake and then exits
+    startReader(connTable); // this reader only reads the handshake and then exits
-                                           final Stub key,
-                                           final InternalDistributedMember remoteAddr,
+                                           final DistributedMember remoteAddr,
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
-            throw new IOException("Member for stub " + key + " left the group");
+          if (!mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress()) {
+            throw new IOException("Member " + remoteAddr + " left the system");
-            throw new IOException("Cannot form connection to alert listener " + key);
+            // do not change the text of this exception - it is looked for in exception handlers
+            throw new IOException("Cannot form connection to alert listener " + remoteAddr);
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
-            throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
+          if (giveUpOnMember(mgr, remoteAddr)) {
+            throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
-            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, m));
+            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, remoteAddr));
-          conn = new Connection(mgr, t, preserveOrder, key, remoteAddr, sharedResource);
+          conn = new Connection(mgr, t, preserveOrder, remoteAddr, sharedResource);
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
+          if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m, ioe}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr, ioe}));
-            conn.attemptHandshake();
+            conn.attemptHandshake(t);
-              InternalDistributedMember m = mgr.getMemberForStub(key, true);
-              if (m == null) {
-                throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
+              if (giveUpOnMember(mgr, remoteAddr)) {
+                throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
-            InternalDistributedMember m = mgr.getMemberForStub(key, true);
-            if (m == null) {
+            if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m,e}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
-            InternalDistributedMember m = mgr.getMemberForStub(key, true);
-            if (m == null) {
+            if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m,e}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
-          .toLocalizedString(mgr.getMemberForStub(key, true)));
+          .toLocalizedString(remoteAddr));
+  
+  private static boolean giveUpOnMember(MembershipManager mgr, DistributedMember remoteAddr) {
+    return !mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress();
+  }
-  private void setRemoteAddr(InternalDistributedMember m, Stub stub) {
+  private void setRemoteAddr(DistributedMember m) {
-    this.remoteId = stub;
-    mgr.addSurpriseMember(m, stub);
+    mgr.addSurpriseMember(m);
-                     Stub key,
-                     InternalDistributedMember remoteAddr,
+                     DistributedMember remoteID,
+    InternalDistributedMember remoteAddr = (InternalDistributedMember)remoteID;
-    setRemoteAddr(remoteAddr, key);
+    setRemoteAddr(remoteAddr);
-    InetSocketAddress addr = new InetSocketAddress(remoteId.getInetAddress(), remoteId.getPort());
+    InetSocketAddress addr = new InetSocketAddress(remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort());
-        //  .createSocket(remoteId.getInetAddress(), remoteId.getPort());
+        //  .createSocket(remoteAddr.getInetAddress(), remoteAddr.getPort());
-        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteId.getInetAddress(), remoteId.getPort(), socketBufferSize );
+        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort(), socketBufferSize );
-        //socket = new Socket(remoteId.getInetAddress(), remoteId.getPort());
+        //socket = new Socket(remoteAddr.getInetAddress(), remoteAddr.getPort());
-        this.owner.owner.getLocalId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
-        this.owner.owner.getLocalId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
+        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
+        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
-    if (!beingSick && this.readerThread != null && !isIBM && this.readerThread.isAlive()
-        && this.readerThread != Thread.currentThread()) {
-      try {
-        this.readerThread.join(500);
-        if (this.readerThread.isAlive() && !this.readerShuttingDown
-            && owner.getDM().getRootCause() == null) { // don't wait twice if there's a system failure
-          this.readerThread.join(1500);
-          if (this.readerThread.isAlive()) {
-            logger.info(LocalizedMessage.create(LocalizedStrings.Connection_TIMED_OUT_WAITING_FOR_READERTHREAD_ON_0_TO_FINISH, this));
+    {
+      // Now that readerThread is returned to a pool after we close
+      // we need to be more careful not to join on a thread that belongs
+      // to someone else.
+      Thread readerThreadSnapshot = this.readerThread;
+      if (!beingSick && readerThreadSnapshot != null && !isIBM
+          && this.isRunning && !this.readerShuttingDown
+          && readerThreadSnapshot != Thread.currentThread()) {
+        try {
+          readerThreadSnapshot.join(500);
+          readerThreadSnapshot = this.readerThread;
+          if (this.isRunning && !this.readerShuttingDown
+              && readerThreadSnapshot != null
+              && owner.getDM().getRootCause() == null) { // don't wait twice if there's a system failure
+            readerThreadSnapshot.join(1500);
+            if (this.isRunning) {
+              logger.info(LocalizedMessage.create(LocalizedStrings.Connection_TIMED_OUT_WAITING_FOR_READERTHREAD_ON_0_TO_FINISH, this));
+            }
+        catch (IllegalThreadStateException ignore) {
+          // ignored - thread already stopped
+        }
+        catch (InterruptedException ignore) {
+          Thread.currentThread().interrupt();
+          // but keep going, we're trying to close.
+        }
-      catch (IllegalThreadStateException ignore) {
-        // ignored - thread already stopped
-      }
-      catch (InterruptedException ignore) {
-        Thread.currentThread().interrupt();
-        // but keep going, we're trying to close.
-      }
-    } // !onlyCleanup
+    }
-                this.owner.removeEndpoint(this.remoteId, reason);
+                this.owner.removeEndpoint(this.remoteAddr, reason);
-            this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
+            this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteId, this);
+          this.owner.removeThreadConnection(this.remoteAddr, this);
-          this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
+          this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteId, this);
+          this.owner.removeThreadConnection(this.remoteAddr, this);
-  private void startReader() {
-    ThreadGroup group =
-      LoggingThreadGroup.createThreadGroup("P2P Reader Threads", logger);
-    Assert.assertTrue(this.readerThread == null);
-    this.readerThread =
-      new Thread(group, this, p2pReaderName());
-    this.readerThread.setDaemon(true);
-    stopped = false;
-    this.readerThread.start();
-  }
+  private void startReader(ConnectionTable connTable) { 
+    Assert.assertTrue(!this.isRunning); 
+    stopped = false; 
+    this.isRunning = true; 
+    connTable.executeCommand(this);  
+  } 
+    this.readerThread = Thread.currentThread();
+    this.readerThread.setName(p2pReaderName());
-    if (this.isReceiver) {
-      makeReaderThread();
-    }
+    makeReaderThread(this.isReceiver);
-        logger.debug("Stopping {} for {}", p2pReaderName(), remoteId);
+        logger.debug("Stopping {} for {}", p2pReaderName(), remoteAddr);
+      initiateSuspicionIfSharedUnordered();
+      this.readerThread.setName("unused p2p reader");
+      synchronized (this.stateLock) {
+        this.isRunning = false;
+        this.readerThread = null;
+      }
+  /** initiate suspect processing if a shared/ordered connection is lost and we're not shutting down */
+  private void initiateSuspicionIfSharedUnordered() {
+    if (this.isReceiver && this.handshakeRead && !this.preserveOrder && this.sharedResource) {
+      if (this.owner.getConduit().getCancelCriterion().cancelInProgress() == null) {
+        this.owner.getDM().getMembershipManager().suspectMember(this.getRemoteAddress(),
+            INITIATING_SUSPECT_PROCESSING);
+      }
+    }
+  }
+
-              Stub stub = new Stub(remote.getIpAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
-              setRemoteAddr(remote, stub);
+              setRemoteAddr(remote);
-                logger.debug("{} remoteId is {} {}", p2pReaderName(), this.remoteId,
+                logger.debug("{} remoteAddr is {} {}", p2pReaderName(), this.remoteAddr,
-      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteId));
+      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteAddr));
+  /**
+   * For testing we want to configure the connection without having
+   * to read a handshake
+   */
+  protected void setSharedUnorderedForTest() {
+    this.preserveOrder = false;
+    this.sharedResource = true;
+    this.handshakeRead = true;
+  }
+  
-          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteId));
+          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteAddr));
-      this.owner.removeEndpoint(this.remoteId, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
+      this.owner.removeEndpoint(this.remoteAddr, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
-    this.owner.removeEndpoint(this.remoteId, 
+    this.owner.removeEndpoint(this.remoteAddr, 
-        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteId, remoteAddr);
+        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteAddr, remoteAddr);
-  protected byte connectionState;
+  protected byte connectionState = STATE_IDLE;
-                Stub stub = new Stub(remote.getIpAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
-                setRemoteAddr(remote, stub);
+                setRemoteAddr(remote);
-                logger.debug("P2P handshake remoteId is {}{}", this.remoteId,
+                logger.debug("P2P handshake remoteAddr is {}{}", this.remoteAddr,
-  /** returns the ConnectionKey stub representing the other side of
-      this connection (host:port) */
-  public final Stub getRemoteId() {
-    return remoteId;
-  }
-

MOV26 INS26 MOV31 MOV31 INS40 UPD40 INS23 INS23 INS31 INS23 INS31 MOV31 INS31 INS31 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS42 INS8 UPD83 INS44 INS83 INS83 UPD83 INS83 INS83 INS43 INS59 MOV29 INS83 INS39 INS42 MOV44 INS8 UPD83 UPD42 INS29 INS83 INS39 INS42 INS8 MOV60 INS44 INS83 UPD39 UPD42 INS44 INS44 INS8 INS44 INS8 INS29 INS83 INS39 INS42 INS8 UPD83 INS39 INS42 INS8 MOV29 INS83 INS39 INS59 INS65 INS42 INS42 INS45 INS65 INS42 INS9 INS21 INS39 INS42 INS42 INS42 INS14 INS25 MOV65 INS60 MOV51 INS21 INS43 INS42 UPD43 INS43 INS42 INS43 INS42 INS41 UPD43 UPD42 UPD43 UPD42 INS60 MOV25 INS43 INS42 INS21 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 INS65 INS25 INS21 INS21 INS21 INS42 INS42 INS66 INS66 INS66 INS32 INS43 INS42 INS8 INS8 UPD66 UPD66 INS43 INS59 INS32 INS32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 UPD42 MOV43 INS59 MOV43 UPD42 UPD42 MOV42 INS32 INS32 INS7 INS66 INS27 INS8 UPD66 UPD66 INS7 INS7 INS7 INS42 INS9 INS42 INS42 INS21 INS25 UPD42 MOV42 UPD42 MOV42 INS32 INS21 UPD42 MOV42 INS42 INS42 INS38 INS32 INS32 INS42 INS11 INS8 MOV25 UPD42 MOV42 UPD42 MOV42 INS38 INS22 INS9 INS42 INS42 INS52 MOV22 INS32 UPD42 MOV32 INS22 INS21 INS21 INS51 MOV22 INS22 INS38 INS22 INS25 INS22 INS9 INS22 INS9 INS22 INS9 INS32 INS32 INS8 MOV27 INS32 INS42 INS27 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 MOV27 INS60 MOV25 INS42 INS8 INS22 INS52 INS42 UPD42 MOV42 INS42 INS52 INS42 INS32 INS32 INS22 INS8 INS52 INS42 INS22 INS52 INS42 INS27 INS8 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 INS42 INS22 INS42 INS9 INS9 INS60 MOV25 INS36 INS22 INS42 INS27 INS27 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS27 MOV43 INS59 INS27 INS25 INS52 INS42 INS42 MOV22 INS42 INS45 INS52 INS42 INS21 MOV21 INS52 INS42 INS32 INS33 INS21 INS52 INS42 INS43 INS59 INS27 INS27 INS52 INS42 INS36 INS27 INS32 INS34 UPD42 MOV42 MOV32 INS27 UPD40 INS42 MOV22 INS27 MOV27 MOV22 INS8 MOV25 MOV22 INS25 INS7 INS7 INS32 INS42 INS32 UPD42 INS42 INS42 MOV22 INS27 INS38 INS21 INS42 UPD42 MOV27 MOV27 INS27 MOV32 MOV33 INS42 INS42 INS42 INS25 INS25 INS32 INS40 MOV27 MOV38 INS42 INS25 MOV38 INS38 MOV8 UPD42 INS22 INS9 MOV22 INS33 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 INS32 INS42 INS33 INS32 INS32 MOV32 INS32 INS33 UPD42 INS27 MOV8 INS32 MOV8 INS32 INS42 UPD42 INS22 INS21 MOV38 INS8 INS8 MOV22 INS22 INS52 INS42 INS22 INS42 INS32 INS42 INS52 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 INS33 INS32 INS42 INS34 INS38 INS32 INS32 INS42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 MOV22 INS42 MOV52 UPD42 MOV42 INS32 INS7 INS27 INS25 INS21 MOV52 MOV42 INS52 INS42 INS52 INS42 INS22 INS42 UPD42 INS22 UPD42 MOV42 INS32 INS42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 MOV22 INS27 MOV27 MOV38 INS8 INS32 UPD42 UPD42 INS52 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 INS25 INS32 INS32 INS42 INS22 INS38 INS27 INS22 INS25 MOV22 INS42 INS42 INS22 MOV22 INS52 UPD42 UPD42 UPD42 UPD45 UPD42 UPD45 UPD42 UPD40 UPD42 UPD42 INS32 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS33 INS42 MOV52 UPD42 MOV42 MOV22 INS8 INS52 INS42 INS21 INS42 MOV42 UPD42 MOV42 MOV52 UPD42 MOV42 INS21 INS32 MOV5 MOV5 INS32 INS32 INS42 INS22 INS32 INS5 MOV43 MOV43 UPD42 UPD42 MOV22 INS42 INS22 INS42 UPD45 UPD45 INS32 INS42 INS52 INS42 INS40 INS42 INS3 INS43 INS85 UPD42 UPD40 UPD42 INS52 INS42 UPD42 UPD42 INS42 INS42 INS5 INS4 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL29 DEL43 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL27 DEL66 DEL27 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL9 DEL32 DEL43 DEL42 DEL43 DEL1 DEL14 DEL59 DEL60 DEL8 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL27 DEL52 DEL42 DEL22 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL27 DEL42 DEL34 DEL32 DEL22 DEL42 DEL32 DEL27 DEL22 DEL42 DEL32 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL52 DEL32 DEL21 DEL8 DEL42 DEL52 DEL42 DEL22 DEL52 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL42 DEL8 DEL25 DEL42 DEL52 DEL14 DEL43 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL8 DEL32 DEL9 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42