Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-    
+
-    values = new ResultsBag(((GemFireCacheImpl)region.getCache()).getCachePerfStats());
+    values = new ResultsBag(((GemFireCacheImpl) region.getCache()).getCachePerfStats());
-    entries.setElementType(TypeUtils.getRegionEntryType(region)); // gets key and value types from region
+    entries.setElementType(TypeUtils.getRegionEntryType(region)); // gets key and value types from
+                                                                  // region
-  
+
-  public boolean equals(Object o) { //  for findbugs
+  public boolean equals(Object o) { // for findbugs
-  
+
-  
-  public void setEntry(RegionEntry e){
+
+  public void setEntry(RegionEntry e) {
-  
-  public RegionEntry getEntry(){
+
+  public RegionEntry getEntry() {
-  
+
-    if(keys == null){
+    if (keys == null) {
-  
+
-    return (ResultsSet)getKeys();
+    return (ResultsSet) getKeys();
-  
+
-  
+
-   return getValues();
+    return getValues();
-  
+
-    return getValues().asSet(); 
+    return getValues().asSet();
-  
+
-    if(valueInList == null){
-      valueInList = new  ArrayList(1);      
+    if (valueInList == null) {
+      valueInList = new ArrayList(1);
-      @Retained @Released StoredObject ohval = (StoredObject) val;
+      @Retained
+      @Released
+      StoredObject ohval = (StoredObject) val;
-      val = ((CachedDeserializable)val).getDeserializedValue(getRegion(), this.entry);
-    } 
+      val = ((CachedDeserializable) val).getDeserializedValue(getRegion(), this.entry);
+    }
-  
+
-    if(valueInArray == null){
-      valueInArray = new  Object[1];      
-    }   
+    if (valueInArray == null) {
+      valueInArray = new Object[1];
+    }
-    if (val instanceof StoredObject) {      
-      @Retained @Released StoredObject ohval = (StoredObject) val;
+    if (val instanceof StoredObject) {
+      @Retained
+      @Released
+      StoredObject ohval = (StoredObject) val;
-      val = ((CachedDeserializable)val).getDeserializedValue(getRegion(), this.entry);
-    } 
+      val = ((CachedDeserializable) val).getDeserializedValue(getRegion(), this.entry);
+    }
-  
+
-    if(values == null){
-      values = new ResultsBag(((GemFireCacheImpl)getRegion().getCache()).getCachePerfStats());
+    if (values == null) {
+      values = new ResultsBag(((GemFireCacheImpl) getRegion().getCache()).getCachePerfStats());
-      @Retained @Released StoredObject ohval = (StoredObject) val;
+      @Retained
+      @Released
+      StoredObject ohval = (StoredObject) val;
-      val = ((CachedDeserializable)val).getDeserializedValue(getRegion(), this.entry);
-    } 
+      val = ((CachedDeserializable) val).getDeserializedValue(getRegion(), this.entry);
+    }
-  
+
-    if(entries == null){
+    if (entries == null) {
-      rgn = ((QRegion)TypeUtils.checkCast(rgn, QRegion.class)).getRegion();
+      rgn = ((QRegion) TypeUtils.checkCast(rgn, QRegion.class)).getRegion();
-    entries.add(((LocalRegion)rgn).new NonTXEntry(entry));
+    entries.add(((LocalRegion) rgn).new NonTXEntry(entry));
-  
+
-  
+
-    return (ResultsSet)getEntries();
+    return (ResultsSet) getEntries();
-  
+
-    LocalRegion.NonTXEntry e =(LocalRegion.NonTXEntry)super.getEntry(key);
+    LocalRegion.NonTXEntry e = (LocalRegion.NonTXEntry) super.getEntry(key);
-    if(e != null &&  this.entry == e.getRegionEntry()) {
-        retVal = e;
-     } 
+    if (e != null && this.entry == e.getRegionEntry()) {
+      retVal = e;
+    }
-  
+
-  
+
-  } 
-  
+  }
+
-    throw new RuntimeException(LocalizedStrings.DummyQRegion_NOT_YET_IMPLEMENTED.toLocalizedString());
+    throw new RuntimeException(
+        LocalizedStrings.DummyQRegion_NOT_YET_IMPLEMENTED.toLocalizedString());
-  
+
-  public String toString(){
-    return "DQR "+super.toString();
+  public String toString() {
+    return "DQR " + super.toString();

