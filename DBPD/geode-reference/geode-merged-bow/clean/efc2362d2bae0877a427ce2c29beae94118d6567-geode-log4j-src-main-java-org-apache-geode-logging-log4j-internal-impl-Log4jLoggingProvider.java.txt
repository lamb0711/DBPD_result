GEODE-6964: Move geode log4j core classes to geode-log4j

Introduce new Logging and Alerting SPIs. Extract all log4j-core code to
geode-log4j module.

The geode-core module no longer contains log4j2.xml and no longer has a
dependency on log4j-core.

All code that uses log4j-core has moved to the new module geode-log4j.
The log4j2.xml for Geode now lives in geode-log4j as well. These
changes ensure that users have better control over logging including
which backend to use. This should improve user experience when using
Spring Boot.

Co-authored-by: Mark Hanson <mhanson@pivotal.io>

-package org.apache.geode.internal.logging.log4j;
+package org.apache.geode.logging.log4j.internal.impl;
-import static org.apache.geode.internal.logging.Configuration.GEODE_LOGGER_PREFIX;
-import static org.apache.geode.internal.logging.Configuration.MAIN_LOGGER_NAME;
-import static org.apache.geode.internal.logging.Configuration.SECURITY_LOGGER_NAME;
-import static org.apache.geode.internal.logging.log4j.LogWriterLevelConverter.toLevel;
+import static org.apache.geode.logging.internal.log4j.LogWriterLevelConverter.toLevel;
+import org.apache.logging.log4j.core.filter.Filterable;
-import org.apache.geode.internal.logging.LogConfig;
-import org.apache.geode.internal.logging.LogLevelUpdateOccurs;
-import org.apache.geode.internal.logging.LogLevelUpdateScope;
-import org.apache.geode.internal.logging.LogWriterLevel;
-import org.apache.geode.internal.logging.ProviderAgent;
+import org.apache.geode.logging.internal.spi.LogConfig;
+import org.apache.geode.logging.internal.spi.LogLevelUpdateOccurs;
+import org.apache.geode.logging.internal.spi.LogLevelUpdateScope;
+import org.apache.geode.logging.internal.spi.LogWriterLevel;
+import org.apache.geode.logging.internal.spi.LoggingProvider;
+import org.apache.geode.logging.log4j.internal.FastLogger;
+import org.apache.geode.logging.log4j.internal.impl.message.GemFireParameterizedMessageFactory;
- * Log4J 2 implementation of {@link ProviderAgent}.
+ * Log4J 2 implementation of {@link LoggingProvider}.
+ *
+ * <p>
+ * Returned Logger is wrapped inside an instance of {@link FastLogger} which skips expensive
+ * filtering, debug and trace handling with a volatile boolean. This optimization is turned on only
+ * when using the default Geode {@code log4j2.xml} by checking for the existence of this property:
+ *
+ * <pre>
+ * &lt;Property name="geode-default"&gt;true&lt;/Property&gt;
+ * </pre>
+ *
+ * <p>
+ * Returned Logger uses {@code GemFireParameterizedMessageFactory} to create
+ * {@code GemFireParameterizedMessage} which excludes {@code Region}s from being handled as a
+ * {@code Map} and {@code EntriesCollection} from being handled as a {@code Collection}. Without
+ * this change, using a {@code Region} or {@code EntriesCollection} in a log statement can result in
+ * an expensive operation or even a hang in the case of a {@code PartitionedRegion}.
-public class Log4jAgent implements ProviderAgent {
+public class Log4jLoggingProvider implements LoggingProvider {
-  static final String ALERT_APPENDER_NAME = "ALERT";
-  public Log4jAgent() {
+  public Log4jLoggingProvider() {
-      LoggerConfig loggerConfig = log4jConfiguration.getLoggerConfig(SECURITY_LOGGER_NAME);
+      LoggerConfig loggerConfig = log4jConfiguration.getLoggerConfig(
+          SECURITY_LOGGER_NAME);
-    if (GeodeConsoleAppender.class.isInstance(appender)) {
-      GeodeConsoleAppender geodeConsoleAppender = (GeodeConsoleAppender) appender;
+    if (appender instanceof PausableAppender) {
+      PausableAppender geodeConsoleAppender = (PausableAppender) appender;
-    if (GeodeConsoleAppender.class.isInstance(appender)) {
-      GeodeConsoleAppender geodeConsoleAppender = (GeodeConsoleAppender) appender;
+    if (appender instanceof PausableAppender) {
+      PausableAppender geodeConsoleAppender = (PausableAppender) appender;
+  public org.apache.logging.log4j.Logger getLogger(final String name) {
+    return new FastLogger(LogManager.getLogger(name, GemFireParameterizedMessageFactory.get()));
+  }
+
+  @Override
+  public int getPriority() {
+    return 0;
+  }
+
+  @Override
-        if (((AbstractFilterable) appender).hasFilter()) {
+        if (((Filterable) appender).hasFilter()) {
-      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isRoot = loggerConfig.getName().isEmpty();
-      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isRoot = loggerConfig.getName().isEmpty();

MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD43 INS31 INS31 UPD42 INS83 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS39 UPD42 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS40 INS83 MOV43 INS42 INS41 INS42 INS41 UPD42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS62 INS62 INS14 INS34 INS42 INS43 INS42 INS43 INS43 INS32 INS60 MOV60 UPD42 MOV42 UPD43 UPD42 MOV42 UPD43 INS42 INS42 INS42 INS42 INS32 INS39 INS59 UPD42 UPD42 INS42 INS42 INS42 INS32 UPD43 UPD43 MOV32 INS42 UPD42 UPD42 UPD42 UPD43 UPD42 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL43 DEL57 DEL42 DEL42 DEL32 DEL43 DEL57 DEL42 DEL42 DEL32 DEL45 DEL39 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60