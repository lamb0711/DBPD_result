GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import static org.apache.geode.internal.protocol.protobuf.v1.BasicTypes.ErrorCode.AUTHORIZATION_FAILED;
+import java.util.HashMap;
+import java.util.Map;
+
-import org.apache.shiro.util.ThreadState;
-import org.apache.geode.cache.Region;
-import org.apache.geode.internal.protocol.protobuf.v1.Failure;
-import org.apache.geode.internal.protocol.protobuf.v1.serialization.SerializationService;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
-import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionAuthorizingStateProcessor;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.ResourcePermission;
-    Region region = messageExecutionContext.getCache().getRegion(regionName);
-    if (region == null) {
-      logger.error("Received put-all request for nonexistent region: {}", regionName);
-      return Failure.of(BasicTypes.ErrorCode.SERVER_ERROR,
-          "Region \"" + regionName + "\" not found");
-    }
-
-    ThreadState threadState = null;
-    SecurityService securityService = messageExecutionContext.getCache().getSecurityService();
-    boolean perKeyAuthorization = false;
-    if (messageExecutionContext
-        .getConnectionStateProcessor() instanceof ProtobufConnectionAuthorizingStateProcessor) {
-      threadState = ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-          .getConnectionStateProcessor()).prepareThreadForAuthorization();
-      // Check if authorized for entire region
-      try {
-        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
-            ResourcePermission.Operation.WRITE, regionName));
-        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-            .getConnectionStateProcessor()).restoreThreadState(threadState);
-        threadState = null;
-      } catch (NotAuthorizedException ex) {
-        // Not authorized for the region, have to check keys individually
-        perKeyAuthorization = true;
-      }
-    }
-    final boolean authorizeKeys = perKeyAuthorization; // Required for use in lambda
-
-    long startTime = messageExecutionContext.getStatistics().startOperation();
-    try {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(true);
+    AuthorizingCache cache = messageExecutionContext.getAuthorizingCache();
+    Map<Object, Object> entries = new HashMap<>(putAllRequest.getEntryList().size());
-      putAllRequest.getEntryList().stream().forEach((entry) -> processSinglePut(builder,
-          serializationService, region, entry, securityService, authorizeKeys));
+    putAllRequest.getEntryList()
+        .forEach(entry -> entries.put(serializationService.decode(entry.getKey()),
+            serializationService.decode(entry.getValue())));
+    cache.putAll(regionName, entries,
+        (key, exception) -> addError(builder, serializationService.encode(key), exception));
-    } finally {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(false);
-      if (threadState != null) {
-        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-            .getConnectionStateProcessor()).restoreThreadState(threadState);
-      }
-    }
+
-  private void processSinglePut(RegionAPI.PutAllResponse.Builder builder,
-      SerializationService serializationService, Region region, BasicTypes.Entry entry,
-      SecurityService securityService, boolean authorizeKeys) {
-    try {
+  private void addError(RegionAPI.PutAllResponse.Builder builder, BasicTypes.EncodedValue key,
+      Exception exception) {
-      Object decodedKey = serializationService.decode(entry.getKey());
-      Object decodedValue = serializationService.decode(entry.getValue());
-      if (decodedKey == null || decodedValue == null) {
-        builder.addFailedKeys(
-            buildKeyedError(entry, INVALID_REQUEST, "Key and value must both be non-NULL"));
-      }
-      if (authorizeKeys) {
-        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
-            ResourcePermission.Operation.WRITE, region.getName(), decodedKey.toString()));
-      }
-      region.put(decodedKey, decodedValue);
-
-    } catch (NotAuthorizedException ex) {
-      builder.addFailedKeys(
-          buildKeyedError(entry, BasicTypes.ErrorCode.AUTHORIZATION_FAILED, "Unauthorized access"));
-    } catch (DecodingException ex) {
-      logger.info("Encoding not supported: " + ex);
-      builder.addFailedKeys(this.buildKeyedError(entry, INVALID_REQUEST, "Encoding not supported"));
-    } catch (ClassCastException ex) {
-      builder.addFailedKeys(buildKeyedError(entry, SERVER_ERROR, ex.toString()));
-    } catch (Exception ex) {
-      logger.warn("Error processing putAll entry", ex);
-      builder.addFailedKeys(buildKeyedError(entry, SERVER_ERROR, ex.toString()));
+    BasicTypes.ErrorCode errorCode;
+    if (exception instanceof NotAuthorizedException) {
+      errorCode = AUTHORIZATION_FAILED;
+    } else if (exception instanceof DecodingException) {
+      errorCode = INVALID_REQUEST;
+    } else {
+      errorCode = SERVER_ERROR;
-  }
-  private BasicTypes.KeyedError buildKeyedError(BasicTypes.Entry entry,
-      BasicTypes.ErrorCode errorCode, String message) {
-    return BasicTypes.KeyedError.newBuilder().setKey(entry.getKey())
-        .setError(BasicTypes.Error.newBuilder().setErrorCode(errorCode).setMessage(message))
-        .build();
+    builder.addFailedKeys(BasicTypes.KeyedError.newBuilder().setKey(key).setError(
+        BasicTypes.Error.newBuilder().setErrorCode(errorCode).setMessage(exception.toString())));

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 MOV60 UPD42 MOV44 MOV8 INS60 MOV21 INS21 UPD43 UPD42 UPD42 INS60 INS25 INS21 UPD43 INS74 INS59 INS32 INS32 UPD40 MOV43 INS59 INS62 INS8 INS25 MOV32 MOV32 UPD42 UPD42 INS32 INS43 MOV43 MOV43 UPD42 MOV42 INS14 MOV32 INS42 INS86 UPD42 MOV42 INS42 INS42 INS42 INS86 INS42 INS42 MOV43 INS21 INS62 INS8 INS8 UPD42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS32 MOV59 INS32 INS59 INS59 MOV32 INS7 INS42 MOV43 INS21 INS21 INS43 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 UPD42 MOV42 INS42 UPD42 INS32 UPD42 INS42 INS42 INS7 INS7 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL32 DEL41 DEL8 DEL25 DEL43 DEL33 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL40 DEL40 DEL42 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL83 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL42 DEL86 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL40 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL45 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL83 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31