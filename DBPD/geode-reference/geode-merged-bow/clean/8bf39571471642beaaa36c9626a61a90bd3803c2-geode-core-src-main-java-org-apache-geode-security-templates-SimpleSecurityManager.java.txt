Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class provides a simple implementation of {@link SecurityManager} for
- * authentication and authorization solely based on the username and password provided.
+ * This class provides a simple implementation of {@link SecurityManager} for authentication and
+ * authorization solely based on the username and password provided.
- * Authentiation: All users whose password matches the username are authenticated.
- * e.g. username/password = test/test, user/user, admin/admin
+ * Authentiation: All users whose password matches the username are authenticated. e.g.
+ * username/password = test/test, user/user, admin/admin
- * Authorization: users whose username is a substring (case insensitive) of the permission
- * required are authorized.
- * e.g. username = data: is authorized for all data operations:
- *        data;
- *        data:manage
- *        data:read
- *        data:write
- *      username = dataWrite: is authorized for data writes on all regions:
- *        data:write
- *        data:write:regionA
- *      username = cluster: authorized for all cluster operations
- *      username = cluserRead: authorzed for all cluster read operations
+ * Authorization: users whose username is a substring (case insensitive) of the permission required
+ * are authorized. e.g. username = data: is authorized for all data operations: data; data:manage
+ * data:read data:write username = dataWrite: is authorized for data writes on all regions:
+ * data:write data:write:regionA username = cluster: authorized for all cluster operations username
+ * = cluserRead: authorzed for all cluster read operations
-    if(username!=null && username.equals(password)){
+    if (username != null && username.equals(password)) {
-    String permissionString = permission.toString().replace(":","").toLowerCase();
+    String permissionString = permission.toString().replace(":", "").toLowerCase();

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66