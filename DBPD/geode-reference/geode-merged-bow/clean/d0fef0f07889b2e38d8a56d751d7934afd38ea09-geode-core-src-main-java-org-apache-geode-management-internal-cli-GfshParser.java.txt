GEODE-3915: use ClassName type for cache-loader, writer and listeners (#1327)

* GEODE-3915: use ClassName type for cache-loader, writer and listeners

* use json string to specify the init properties
* make sure the parser works when multiple ClassNames are specified in the command line.
* rework AlterRegionCommandDUnitTest
* make sure AnalyzeSerializableJunitTest works in IDEA.

Signed-off-by: Patrick Rhomberg <prhomberg@pivotal.io>

-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-  // pattern used to split the user input with whitespaces except those in quotes (single or double)
-  private static Pattern PATTERN =
-      Pattern.compile("\\s*([^\\s']*)'([^']*)'\\s+|\\s*([^\\s\"]*)\"([^\"]*)\"\\s+|\\S+");
-
-  static List<String> splitUserInput(String userInput) {
-    // make sure the userInput ends with a white space, because our regex expects the the quotes
-    // ends with at least one white space. We will trim the results after we found it.
-    userInput = userInput + " ";
-    // first split with whitespaces except in quotes
-    List<String> splitWithWhiteSpaces = new ArrayList<>();
-    Matcher m = PATTERN.matcher(userInput);
-    while (m.find()) {
-      splitWithWhiteSpaces.add(m.group().trim());
+  /**
+   * it's assumed that the quoted string should not have escaped quotes inside it.
+   */
+  public static List<String> splitWithWhiteSpace(String input) {
+    List<String> tokensList = new ArrayList<>();
+    StringBuilder token = new StringBuilder();
+    char insideQuoteOf = Character.MIN_VALUE;
+
+    for (char c : input.toCharArray()) {
+      if (Character.isWhitespace(c)) {
+        // if we are in the quotes
+        if (insideQuoteOf != Character.MIN_VALUE) {
+          token.append(c);
+        }
+        // if we are not in the quotes, terminate this token and add it to the list
+        else {
+          if (token.length() > 0) {
+            tokensList.add(token.toString());
+          }
+          token = new StringBuilder();
+        }
+      }
+      // not a white space
+      else {
+        token.append(c);
+        // if encountering a quote
+        if (c == '\'' || c == '\"') {
+          // if this is the beginning of quote
+          if (insideQuoteOf == Character.MIN_VALUE) {
+            insideQuoteOf = c;
+          }
+          // this is the ending of quote
+          else if (insideQuoteOf == c) {
+            insideQuoteOf = Character.MIN_VALUE;
+          }
+        }
+      }
+    if (token.length() > 0) {
+      tokensList.add(token.toString());
+    }
+    return tokensList;
+  }
+
+  static List<String> splitUserInput(String userInput) {
+    // first split with whitespaces except in quotes
+    List<String> splitWithWhiteSpaces = splitWithWhiteSpace(userInput);

INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS65 INS43 INS43 INS43 INS42 MOV60 INS60 INS60 INS70 INS25 INS41 INS60 INS66 UPD42 MOV42 INS42 INS42 INS43 INS59 INS39 INS59 INS44 INS32 INS8 INS27 INS8 INS42 INS74 MOV59 UPD42 INS42 INS42 INS14 INS42 INS40 INS39 INS42 INS42 INS42 INS25 INS32 INS34 INS21 INS43 INS43 UPD42 INS43 INS32 INS8 INS8 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS25 INS21 INS25 INS42 INS42 INS32 INS27 INS8 INS8 INS32 INS27 INS8 INS42 INS42 INS42 INS40 INS21 INS25 INS21 INS42 INS42 INS42 INS27 INS27 INS25 INS32 INS27 INS8 INS7 INS42 INS13 INS42 INS13 INS27 INS8 INS25 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS34 INS21 INS42 INS14 INS42 INS40 INS21 INS27 INS8 INS42 INS42 INS32 INS43 INS7 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS40 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL43 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL42 DEL42 DEL45 DEL27 DEL7 DEL21 DEL43 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61