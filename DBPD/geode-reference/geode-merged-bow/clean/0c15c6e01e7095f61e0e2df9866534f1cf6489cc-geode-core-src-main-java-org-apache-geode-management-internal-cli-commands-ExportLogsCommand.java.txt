GEODE-2420: Add classes to estimated the size of exported logs

- New Function class added with tests
- Code to invoke new function added, but disabled, in ExportLogsCommand
- New option added, but disabled, for specifying size limit for exported
  logs
- Refactoring: extracted the interceptor from ExportLogsCommand
- Refactoring: renamed ExportLogCommand to ExportLogsCommand
- New Serializable class to return the log size estimate to the command
- Tests for the log sizing related classes

-import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
-import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.functions.ExportedLogsSizeInfo;
+import org.apache.geode.management.internal.cli.functions.SizeExportLogsFunction;
-import org.apache.geode.internal.logging.log4j.LogLevel;
-import java.io.IOException;
-import java.time.LocalDateTime;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-public class ExportLogCommand implements CommandMarker {
-  public final static String FORMAT = "yyyy/MM/dd/HH/mm/ss/SSS/z";
-  public final static String ONLY_DATE_FORMAT = "yyyy/MM/dd";
-  private final static Logger logger = LogService.getLogger();
+public class ExportLogsCommand implements CommandMarker {
+
+  private static final Logger logger = LogService.getLogger();
+
+  public static final String FORMAT = "yyyy/MM/dd/HH/mm/ss/SSS/z";
+  public static final String ONLY_DATE_FORMAT = "yyyy/MM/dd";
+
+  private static final Pattern DISK_SPACE_LIMIT_PATTERN = Pattern.compile("(\\d+)([mgtMGT]?)");
-      interceptor = "org.apache.geode.management.internal.cli.commands.ExportLogCommand$ExportLogsInterceptor",
+      interceptor = "org.apache.geode.management.internal.cli.commands.ExportLogsInterceptor",
+    // @CliOption(key = CliStrings.EXPORT_LOGS__FILESIZELIMIT,
+    // unspecifiedDefaultValue = CliStrings.EXPORT_LOGS__FILESIZELIMIT__UNSPECIFIED_DEFAULT,
+    // specifiedDefaultValue = CliStrings.EXPORT_LOGS__FILESIZELIMIT__SPECIFIED_DEFAULT,
+    // help = CliStrings.EXPORT_LOGS__FILESIZELIMIT__HELP) String fileSizeLimit) {
+      if (false) {
+        // TODO: get estimated size of exported logs from all servers first
+        Map<String, Integer> fileSizesFromMembers = new HashMap<>();
+        for (DistributedMember server : targetMembers) {
+          SizeExportLogsFunction.Args args = new SizeExportLogsFunction.Args(start, end, logLevel,
+              onlyLogLevel, logsOnly, statsOnly);
+
+          List<Object> results = (List<Object>) CliUtil
+              .executeFunction(new SizeExportLogsFunction(), args, server).getResult();
+          long estimatedSize = 0;
+          long diskAvailable = 0;
+          long diskSize = 0;
+          List<?> res = (List<?>) results.get(0);
+          if (res.get(0) instanceof ExportedLogsSizeInfo) {
+            ExportedLogsSizeInfo sizeInfo = (ExportedLogsSizeInfo) res.get(0);
+            estimatedSize = sizeInfo.getLogsSize();
+            diskAvailable = sizeInfo.getDiskAvailable();
+            diskSize = sizeInfo.getDiskSize();
+          } else {
+            estimatedSize = 0;
+          }
+
+
+          logger.info("Received file size from member {}: {}", server.getId(), estimatedSize);
+        }
+
+        // TODO: Check log size limits on the locator
+      }
+
+      // get zipped files from all servers next
+
+      // try {
+      // isFileSizeCheckEnabledAndWithinLimit(parseFileSizeLimit(fileSizeLimit),
+      // exportedLogsZipFile.toFile());
+      // } catch (IllegalArgumentException e) {
+      // return ResultBuilder.createUserErrorResult("TOO BIG: fileSizeLimit = " + fileSizeLimit);
+      // }
+
-      logger.error(ex, ex);
+      logger.error(ex.getMessage(), ex);
-   * after the export logs, will need to copy the tempFile to the desired location and delete the
-   * temp file.
+   * Returns file size limit in bytes
-  public static class ExportLogsInterceptor extends AbstractCliAroundInterceptor {
-    @Override
-    public Result preExecution(GfshParseResult parseResult) {
-      // the arguments are in the order of it's being declared
-      Map<String, String> arguments = parseResult.getParamValueStrings();
-
-      // validates groupId and memberIds not both set
-      if (arguments.get("group") != null && arguments.get("member") != null) {
-        return ResultBuilder.createUserErrorResult("Can't specify both group and member.");
-      }
-
-      // validate log level
-      String logLevel = arguments.get("log-level");
-      if (StringUtils.isBlank(logLevel) || LogLevel.getLevel(logLevel) == null) {
-        return ResultBuilder.createUserErrorResult("Invalid log level: " + logLevel);
-      }
-
-      // validate start date and end date
-      String start = arguments.get("start-time");
-      String end = arguments.get("end-time");
-      if (start != null && end != null) {
-        // need to make sure end is later than start
-        LocalDateTime startTime = ExportLogsFunction.parseTime(start);
-        LocalDateTime endTime = ExportLogsFunction.parseTime(end);
-        if (startTime.isAfter(endTime)) {
-          return ResultBuilder.createUserErrorResult("start-time has to be earlier than end-time.");
-        }
-      }
-
-      // validate onlyLogs and onlyStats
-      boolean onlyLogs = Boolean.parseBoolean(arguments.get("logs-only"));
-      boolean onlyStats = Boolean.parseBoolean(arguments.get("stats-only"));
-      if (onlyLogs && onlyStats) {
-        return ResultBuilder.createUserErrorResult("logs-only and stats-only can't both be true");
-      }
-
-      return ResultBuilder.createInfoResult("");
+  int parseFileSizeLimit(String fileSizeLimit) {
+    if (StringUtils.isEmpty(fileSizeLimit)) {
+      return 0;
-    @Override
-    public Result postExecution(GfshParseResult parseResult, Result commandResult, Path tempFile) {
-      // in the command over http case, the command result is in the downloaded temp file
-      if (tempFile != null) {
-        Path dirPath;
-        String dirName = parseResult.getParamValueStrings().get("dir");
-        if (StringUtils.isBlank(dirName)) {
-          dirPath = Paths.get(System.getProperty("user.dir"));
-        } else {
-          dirPath = Paths.get(dirName);
-        }
-        String fileName = "exportedLogs_" + System.currentTimeMillis() + ".zip";
-        File exportedLogFile = dirPath.resolve(fileName).toFile();
-        try {
-          FileUtils.copyFile(tempFile.toFile(), exportedLogFile);
-          FileUtils.deleteQuietly(tempFile.toFile());
-          commandResult = ResultBuilder
-              .createInfoResult("Logs exported to: " + exportedLogFile.getAbsolutePath());
-        } catch (IOException e) {
-          logger.error(e.getMessage(), e);
-          commandResult = ResultBuilder.createGemFireErrorResult(e.getMessage());
-        }
-      } else if (commandResult.getStatus() == Result.Status.OK) {
-        commandResult = ResultBuilder.createInfoResult(
-            "Logs exported to the connected member's file system: " + commandResult.nextLine());
-      }
-      return commandResult;
+    int sizeLimit = parseSize(fileSizeLimit);
+    int byteMultiplier = parseByteMultiplier(fileSizeLimit);
+
+    return sizeLimit * byteMultiplier;
+  }
+
+  /**
+   * Throws IllegalArgumentException if file size is over fileSizeLimitBytes
+   */
+  void checkOverDiskSpaceThreshold(int fileSizeLimitBytes, File file) {
+    // TODO:GEODE-2420: warn user if exportedLogsZipFile size > threshold
+    if (FileUtils.sizeOf(file) > fileSizeLimitBytes) {
+      throw new IllegalArgumentException("TOO BIG"); // FileTooBigException
+  /**
+   * Throws IllegalArgumentException if file size is over fileSizeLimitBytes false == limit is zero
+   * true == file size is less than limit exception == file size is over limit
+   */
+  boolean isFileSizeCheckEnabledAndWithinLimit(int fileSizeLimitBytes, File file) {
+    // TODO:GEODE-2420: warn user if exportedLogsZipFile size > threshold
+    if (fileSizeLimitBytes < 1) {
+      return false;
+    }
+    if (FileUtils.sizeOf(file) < fileSizeLimitBytes) {
+      return true;
+    }
+    throw new IllegalArgumentException("TOO BIG: fileSizeLimit = " + fileSizeLimitBytes
+        + ", fileSize = " + FileUtils.sizeOf(file)); // FileTooBigException
+  }
+
+  static int parseSize(String diskSpaceLimit) {
+    Matcher matcher = DISK_SPACE_LIMIT_PATTERN.matcher(diskSpaceLimit);
+    if (matcher.matches()) {
+      return Integer.parseInt(matcher.group(1));
+    } else {
+      throw new IllegalArgumentException();
+    }
+  }
+
+  static int parseByteMultiplier(String diskSpaceLimit) {
+    Matcher matcher = DISK_SPACE_LIMIT_PATTERN.matcher(diskSpaceLimit);
+    if (!matcher.matches()) {
+      throw new IllegalArgumentException();
+    }
+    switch (matcher.group(2).toLowerCase()) {
+      case "t":
+        return (int) Math.pow(1024, 4);
+      case "g":
+        return (int) Math.pow(1024, 3);
+      case "m":
+      default:
+        return (int) Math.pow(1024, 2);
+    }
+  }
+
+  static final int MEGABYTE = (int) Math.pow(1024, 2);
+  static final int GIGABYTE = (int) Math.pow(1024, 3);
+  static final int TERABYTE = (int) Math.pow(1024, 4);
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 INS23 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS23 INS83 INS83 INS83 INS83 INS83 INS83 INS43 INS59 INS29 INS39 INS42 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 UPD42 MOV42 INS42 INS32 INS65 MOV43 INS42 MOV25 MOV60 MOV60 INS41 INS65 INS39 INS42 INS43 INS42 MOV25 INS65 INS39 INS42 MOV43 INS42 MOV25 INS25 INS53 MOV43 INS42 INS60 MOV25 MOV43 INS42 INS60 INS25 INS50 INS42 INS11 INS42 INS11 INS42 INS11 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD45 INS66 INS32 INS39 INS39 INS27 INS66 UPD42 MOV42 INS27 INS8 INS66 INS66 UPD27 INS27 INS8 INS14 UPD43 MOV43 MOV59 INS43 MOV59 INS38 INS8 INS32 INS49 INS41 INS49 INS41 INS49 INS49 INS41 INS39 INS32 INS39 INS32 INS39 INS32 INS25 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS53 UPD42 INS34 INS32 INS42 INS41 INS43 INS27 UPD42 UPD42 UPD42 UPD42 INS41 INS53 INS42 UPD42 INS32 INS32 INS53 INS32 UPD42 MOV42 INS45 INS11 INS45 INS11 INS45 INS11 UPD42 MOV42 UPD42 MOV42 INS34 INS34 UPD42 MOV42 UPD42 MOV42 INS34 INS34 UPD42 MOV42 UPD42 MOV42 INS34 INS34 INS9 INS8 INS34 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS9 UPD42 MOV42 UPD42 MOV42 INS42 INS9 UPD42 MOV42 INS45 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS34 INS39 INS32 INS39 INS32 INS39 INS32 INS60 INS70 INS43 INS45 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS43 INS43 INS42 UPD42 MOV42 INS34 INS34 UPD42 MOV42 UPD42 MOV42 INS34 INS34 INS42 INS42 INS34 INS34 INS74 INS59 INS44 INS42 INS8 INS32 INS42 UPD42 UPD42 INS34 INS42 INS42 MOV43 MOV43 INS43 INS42 INS14 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS21 MOV42 INS42 INS42 INS74 INS42 INS43 INS59 INS74 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS62 INS8 INS8 INS32 INS43 INS40 INS42 INS14 INS43 INS43 INS42 INS11 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS76 INS42 INS11 INS32 INS43 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS74 INS32 INS42 INS42 INS34 INS42 INS43 INS59 INS7 INS7 INS7 INS7 INS42 INS42 INS40 INS43 INS43 INS32 INS42 INS43 INS76 INS42 INS42 INS34 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS34 INS42 DEL83 DEL83 DEL83 DEL32 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL42 DEL43 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL43 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL42 DEL32 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL33 DEL27 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL45 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL59 DEL60 DEL60 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL55