Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-        HeapDataOutputStream hdos = new HeapDataOutputStream(1000, null);
-        if (this.cqs == null) {
-          hdos.writeBoolean(false);
-        } else {
-          hdos.writeBoolean(true);
-          InternalDataSerializer.writeArrayLength(cqs.size(), hdos);
-          for (Iterator it=this.cqs.entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry e = (Map.Entry)it.next();
-            // most cq IDs and all event types are small ints, so we use an optimized
-            // write that serializes 7 bits at a time in a compact form
-            InternalDataSerializer.writeUnsignedVL(((Long)e.getKey()).longValue(), hdos);
-            InternalDataSerializer.writeUnsignedVL(((Integer)e.getValue()).intValue(), hdos);
-          }
+      HeapDataOutputStream hdos;
+      int size = 9;
+      size += interestedClients == null ? 4 : interestedClients.size() * 8 + 5;
+      size += interestedClientsInv == null ? 4 : interestedClientsInv.size() * 8 + 5;
+      size += cqs == null ? 0 : cqs.size() * 12;
+      hdos = new HeapDataOutputStream(size, null);
+      if (this.cqs == null) {
+        hdos.writeBoolean(false);
+      } else {
+        hdos.writeBoolean(true);
+        InternalDataSerializer.writeArrayLength(cqs.size(), hdos);
+        for (Iterator it = this.cqs.entrySet().iterator(); it.hasNext();) {
+          Map.Entry e = (Map.Entry) it.next();
+          // most cq IDs and all event types are small ints, so we use an optimized
+          // write that serializes 7 bits at a time in a compact form
+          InternalDataSerializer.writeUnsignedVL(((Long) e.getKey()).longValue(), hdos);
+          InternalDataSerializer.writeUnsignedVL(((Integer) e.getValue()).intValue(), hdos);
-        InternalDataSerializer.writeSetOfLongs(this.interestedClients, this.longIDs, hdos);
-        InternalDataSerializer.writeSetOfLongs(this.interestedClientsInv, this.longIDs, hdos);
-        byte[] myData = hdos.toByteArray();
-        DataSerializer.writeByteArray(myData, out);
+      }
+      InternalDataSerializer.writeSetOfLongs(this.interestedClients, this.longIDs, hdos);
+      InternalDataSerializer.writeSetOfLongs(this.interestedClientsInv, this.longIDs, hdos);
+      byte[] myData = hdos.toByteArray();
+      DataSerializer.writeByteArray(myData, out);

INS60 INS21 INS21 INS21 INS21 INS39 INS59 INS7 INS7 INS7 INS7 INS42 INS34 INS42 INS16 INS42 INS16 INS42 INS16 INS42 MOV14 INS27 INS34 INS27 INS27 INS34 INS27 INS27 INS34 INS27 INS42 INS42 INS33 INS27 INS34 INS42 INS33 INS27 INS34 INS42 INS33 INS32 INS34 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 DEL34