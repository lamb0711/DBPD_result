Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A dummy implementation of the {@link Authenticator} interface that expects a
- * user name and password allowing authentication depending on the format of the
- * user name.
+ * A dummy implementation of the {@link Authenticator} interface that expects a user name and
+ * password allowing authentication depending on the format of the user name.
-    return userName.startsWith("user") ||
-           userName.startsWith("reader") ||
-           userName.startsWith("writer") ||
-           userName.equals("admin") ||
-           userName.equals("root") ||
-           userName.equals("administrator");
+    return userName.startsWith("user") || userName.startsWith("reader")
+        || userName.startsWith("writer") || userName.equals("admin") || userName.equals("root")
+        || userName.equals("administrator");
-  public void init(final Properties securityProperties, final LogWriter systemLogWriter, final LogWriter securityLogWriter) throws AuthenticationFailedException {
-  }
+  public void init(final Properties securityProperties, final LogWriter systemLogWriter,
+      final LogWriter securityLogWriter) throws AuthenticationFailedException {}
-  public Principal authenticate(final Properties credentials, final DistributedMember member) throws AuthenticationFailedException {
+  public Principal authenticate(final Properties credentials, final DistributedMember member)
+      throws AuthenticationFailedException {
-      throw new AuthenticationFailedException("DummyAuthenticator: user name property [" + UserPasswordAuthInit.USER_NAME + "] not provided");
+      throw new AuthenticationFailedException("DummyAuthenticator: user name property ["
+          + UserPasswordAuthInit.USER_NAME + "] not provided");
-      throw new AuthenticationFailedException( "DummyAuthenticator: password property [" + UserPasswordAuthInit.PASSWORD + "] not provided");
+      throw new AuthenticationFailedException("DummyAuthenticator: password property ["
+          + UserPasswordAuthInit.PASSWORD + "] not provided");
-      throw new AuthenticationFailedException("DummyAuthenticator: Invalid user name [" + userName + "], password supplied.");
+      throw new AuthenticationFailedException(
+          "DummyAuthenticator: Invalid user name [" + userName + "], password supplied.");
-  public void close() {
-  }
+  public void close() {}

UPD66 UPD66 DEL66