Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Create a new Member based on the given inputs.
- * TODO: need to implement a real factory implementation based on gemfire.properties
+ * Create a new Member based on the given inputs. TODO: need to implement a real factory
+ * implementation based on gemfire.properties
-  
+
-   * @param i the name of the host for the specified NetMember, the current host (hopefully)
-   * if there are any problems.
+   * @param i the name of the host for the specified NetMember, the current host (hopefully) if
+   *        there are any problems.
-  static public NetMember newNetMember(InetAddress i, int p,
-      boolean splitBrainEnabled, boolean canBeCoordinator, short version, MemberAttributes payload) {
+  static public NetMember newNetMember(InetAddress i, int p, boolean splitBrainEnabled,
+      boolean canBeCoordinator, short version, MemberAttributes payload) {
+   * 
-  
+
-   * Create a new MembershipManager.  Be sure to send the manager a postConnect() message
-   * before you start using it.
+   * Create a new MembershipManager. Be sure to send the manager a postConnect() message before you
+   * start using it.
-   * @param transport holds configuration information that can be used by the manager to configure itself
+   * @param transport holds configuration information that can be used by the manager to configure
+   *        itself
-          DistributionConfig config,
-          RemoteTransportConfig transport,
-          DMStats stats)
-  {
+      DistributionConfig config, RemoteTransportConfig transport, DMStats stats) {
-  
+
-   * currently this is a test method but it ought to be used by InternalLocator
-   * to create the peer location TcpHandler
+   * currently this is a test method but it ought to be used by InternalLocator to create the peer
+   * location TcpHandler
-  static public NetLocator newLocatorHandler(InetAddress bindAddress,
-          File stateFile,
-          String locatorString,
-          boolean usePreferredCoordinators,
-          boolean networkPartitionDetectionEnabled, LocatorStats stats, String securityUDPDHAlgo) {
+  static public NetLocator newLocatorHandler(InetAddress bindAddress, File stateFile,
+      String locatorString, boolean usePreferredCoordinators,
+      boolean networkPartitionDetectionEnabled, LocatorStats stats, String securityUDPDHAlgo) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66