Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
-import java.util.HashSet;
-import java.util.Set;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-  private static final int MOVED = 1;
+  private final int MOVED = 1;
-  private static final int NOT_MOVED = 0;
+  private final int NOT_MOVED = 0;
-    if (commandElems.size() != 4) {
+    if (commandElems.size() < 4) {
-    ByteArrayWrapper member = new ByteArrayWrapper(commandElems.get(3));
+    ByteArrayWrapper mem = new ByteArrayWrapper(commandElems.get(3));
+    @SuppressWarnings("unchecked")
+    Region<ByteArrayWrapper, Boolean> sourceRegion =
+        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(source);
-    Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
-
-    try (AutoCloseableLock regionLock = withRegionLock(context, source)) {
-      Set<ByteArrayWrapper> sourceSet = region.get(source);
-
-      if (sourceSet == null) {
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
-        return;
-      }
-
-      sourceSet = new HashSet<>(sourceSet); // copy to support transactions;
-      boolean removed = sourceSet.remove(member);
-
-      if (!removed) {
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
-      } else {
-        try (AutoCloseableLock destinationLock = withRegionLock(context, destination)) {
-          Set<ByteArrayWrapper> destinationSet = region.get(destination);
-
-          if (destinationSet == null) {
-            destinationSet = new HashSet<>();
-          } else {
-            destinationSet = new HashSet<>(destinationSet); // copy to support transactions
-          }
-
-          destinationSet.add(member);
-
-          region.put(destination, destinationSet);
-          context.getKeyRegistrar().register(destination, RedisDataType.REDIS_SET);
-
-          region.put(source, sourceSet);
-          context.getKeyRegistrar().register(source, RedisDataType.REDIS_SET);
-
-          command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), MOVED));
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          System.out.println("Interrupt exception!!");
-          command.setResponse(
-              Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-          return;
-        } catch (TimeoutException e) {
-          System.out.println("Timeout exception!!");
-          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-              "Timeout acquiring lock. Please try again."));
-          return;
-        } catch (Exception e) {
-          System.out.println("Unexpected exception: " + e);
-          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-              "Unexpected exception."));
-        }
-      }
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      System.out.println("Interrupt exception!!");
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+    if (sourceRegion == null) {
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
-    } catch (TimeoutException e) {
-      System.out.println("Timeout exception!!");
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
-    } catch (Exception e) {
-      System.out.println("Unexpected exception: " + e);
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Unexpected exception."));
+
+    Object oldVal = sourceRegion.get(mem);
+    sourceRegion.remove(mem);
+
+    if (oldVal == null) {
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
+      return;
+    }
+
+    @SuppressWarnings("unchecked")
+    Region<ByteArrayWrapper, Boolean> destinationRegion =
+        (Region<ByteArrayWrapper, Boolean>) getOrCreateRegion(context, destination,
+            RedisDataType.REDIS_SET);
+    destinationRegion.put(mem, true);
+
+    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), MOVED));
+

INS60 INS25 MOV60 MOV21 MOV25 INS60 MOV21 MOV21 UPD27 INS79 INS74 INS59 INS27 MOV8 INS43 INS79 INS74 INS59 INS32 UPD42 INS42 INS45 INS43 MOV43 INS43 UPD42 MOV42 INS11 INS42 INS33 INS41 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS45 INS43 MOV43 INS43 INS42 INS11 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS42 UPD42 MOV42 UPD74 MOV74 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS74 INS32 UPD43 MOV43 INS32 UPD42 MOV42 MOV42 INS43 MOV43 INS43 UPD42 MOV42 MOV42 INS42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL74 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL43 DEL42 DEL44 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL43 DEL42 DEL44 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL43 DEL42 DEL44 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54