Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.apache.shiro.subject.Subject;
+import org.springframework.security.core.authority.AuthorityUtils;
-import org.apache.geode.internal.security.IntegratedSecurityService;
-import org.apache.geode.security.AuthenticationFailedException;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.security.GemFireSecurityException;
+  private SecurityService securityService = SecurityService.getSecurityService();
-      Subject subject = IntegratedSecurityService.getSecurityService().login(username, password);
-      if (subject != null) {
-        return new GeodeAuthentication(subject.getPrincipal(), authentication.getCredentials());
-      }
-    } catch (AuthenticationFailedException authFailedEx) {
-      throw new BadCredentialsException("Invalid username or password");
+      securityService.login(username, password);
+      return new UsernamePasswordAuthenticationToken(username, password,
+          AuthorityUtils.NO_AUTHORITIES);
+    } catch (GemFireSecurityException e) {
+      throw new BadCredentialsException(e.getLocalizedMessage(), e);
-    return authentication;
-    return authentication.equals(UsernamePasswordAuthenticationToken.class);
+    return authentication.isAssignableFrom(UsernamePasswordAuthenticationToken.class);
-}
+}

MOV26 UPD40 UPD40 UPD40 INS23 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS21 MOV41 UPD42 INS32 UPD43 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD43 INS42 INS42 INS40 UPD42 UPD42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL45 DEL42 DEL41