Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Domain class to determine the order of an element Currently being used to
- * store order information of child elements of "cache"
+ * Domain class to determine the order of an element Currently being used to store order information
+ * of child elements of "cache"
-  private static final String XSD_COMPLEX_TYPE_CHILDREN = "xsd:group|xsd:all|xsd:choice|xsd:sequence";
-  private static final String XSD_CHOICE_OR_SEQUENCE_CHILDREN = "xsd:element|xsd:group|xsd:choice|xsd:sequence|xsd:any";
+  private static final String XSD_COMPLEX_TYPE_CHILDREN =
+      "xsd:group|xsd:all|xsd:choice|xsd:sequence";
+  private static final String XSD_CHOICE_OR_SEQUENCE_CHILDREN =
+      "xsd:element|xsd:group|xsd:choice|xsd:sequence|xsd:any";
-  static final String CACHE_TYPE_EMBEDDED = "/xsd:schema/xsd:element[@name='cache']/xsd:complexType";
+  static final String CACHE_TYPE_EMBEDDED =
+      "/xsd:schema/xsd:element[@name='cache']/xsd:complexType";
-   * Build <code>cache</code> element map for given <cod>doc</code>'s
-   * schemaLocation for {@link CacheXml#GEODE_NAMESPACE}.
+   * Build <code>cache</code> element map for given <cod>doc</code>'s schemaLocation for
+   * {@link CacheXml#GEODE_NAMESPACE}.
-   * @param doc
-   *          {@link Document} to parse schema for.
+   * @param doc {@link Document} to parse schema for.
-   * @throws ParserConfigurationException 
-   * @throws SAXException 
-   * @throws XPathExpressionException 
+   * @throws ParserConfigurationException
+   * @throws SAXException
+   * @throws XPathExpressionException
-  public static LinkedHashMap<String, CacheElement> buildElementMap(final Document doc) throws IOException, XPathExpressionException, SAXException, ParserConfigurationException {
-    final Map<String, List<String>> schemaLocationMap = XmlUtils.buildSchemaLocationMap(
-        getAttribute(doc.getFirstChild(), W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION, W3C_XML_SCHEMA_INSTANCE_NS_URI));
+  public static LinkedHashMap<String, CacheElement> buildElementMap(final Document doc)
+      throws IOException, XPathExpressionException, SAXException, ParserConfigurationException {
+    final Map<String, List<String>> schemaLocationMap =
+        XmlUtils.buildSchemaLocationMap(getAttribute(doc.getFirstChild(),
+            W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION, W3C_XML_SCHEMA_INSTANCE_NS_URI));
-    final LinkedHashMap<String, CacheElement> elementMap = new LinkedHashMap<String, CacheElement>();
+    final LinkedHashMap<String, CacheElement> elementMap =
+        new LinkedHashMap<String, CacheElement>();
-    buildElementMapCacheType(elementMap, resolveSchema(schemaLocationMap, CacheXml.GEODE_NAMESPACE));
+    buildElementMapCacheType(elementMap,
+        resolveSchema(schemaLocationMap, CacheXml.GEODE_NAMESPACE));
-   * Resolve schema from <code>schemaLocationsNape</code> or
-   * <code>namespaceUri</code> for given <code>namespaceUri</code>.
+   * Resolve schema from <code>schemaLocationsNape</code> or <code>namespaceUri</code> for given
+   * <code>namespaceUri</code>.
-   * @param schemaLocationMap
-   *          {@link Map} of namespaceUri to URLs.
-   * @param namespaceUri
-   *          Namespace URI for schema.
+   * @param schemaLocationMap {@link Map} of namespaceUri to URLs.
+   * @param namespaceUri Namespace URI for schema.
-   * @throws IOException
-   *           if unable to open {@link InputSource}.
+   * @throws IOException if unable to open {@link InputSource}.
-  private static final InputSource resolveSchema(final Map<String, List<String>> schemaLocationMap, String namespaceUri) throws IOException {
+  private static final InputSource resolveSchema(final Map<String, List<String>> schemaLocationMap,
+      String namespaceUri) throws IOException {
-   * @param elementMap
-   *          to add elements to.
-   * @param inputSource
-   *          to parse elements from.
+   * @param elementMap to add elements to.
+   * @param inputSource to parse elements from.
-   * @throws ParserConfigurationException 
-   * @throws XPathExpressionException 
+   * @throws ParserConfigurationException
+   * @throws XPathExpressionException
-  private static final void buildElementMapCacheType(final LinkedHashMap<String, CacheElement> elementMap, final InputSource inputSource) throws SAXException,
-      IOException, ParserConfigurationException, XPathExpressionException {
+  private static final void buildElementMapCacheType(
+      final LinkedHashMap<String, CacheElement> elementMap, final InputSource inputSource)
+      throws SAXException, IOException, ParserConfigurationException, XPathExpressionException {
-    final XPathContext xPathContext = new XPathContext(XSD_PREFIX, XMLConstants.W3C_XML_SCHEMA_NS_URI);
+    final XPathContext xPathContext =
+        new XPathContext(XSD_PREFIX, XMLConstants.W3C_XML_SCHEMA_NS_URI);
-    rank = buildElementMapXPath(elementMap, doc, cacheType, rank, XSD_COMPLEX_TYPE_CHILDREN, xPathContext);
+    rank = buildElementMapXPath(elementMap, doc, cacheType, rank, XSD_COMPLEX_TYPE_CHILDREN,
+        xPathContext);
-   * Build element map for elements matching <code>xPath</code> relative to
-   * <code>parent</code> into <code>elementMap</code> .
+   * Build element map for elements matching <code>xPath</code> relative to <code>parent</code> into
+   * <code>elementMap</code> .
-   * @param elementMap
-   *          to add elements to
-   * @param schema
-   *          {@link Document} for schema.
-   * @param parent
-   *          {@link Element} to query XPath.
-   * @param rank
-   *          current rank of elements.
-   * @param xPath
-   *          XPath to query for elements.
-   * @param xPathContext
-   *          XPath context for queries.
+   * @param elementMap to add elements to
+   * @param schema {@link Document} for schema.
+   * @param parent {@link Element} to query XPath.
+   * @param rank current rank of elements.
+   * @param xPath XPath to query for elements.
+   * @param xPathContext XPath context for queries.
-   * @throws XPathExpressionException 
+   * @throws XPathExpressionException
-  private static int buildElementMapXPath(final LinkedHashMap<String, CacheElement> elementMap, final Document schema, final Node parent, int rank,
-      final String xPath, final XPathContext xPathContext) throws XPathExpressionException {
+  private static int buildElementMapXPath(final LinkedHashMap<String, CacheElement> elementMap,
+      final Document schema, final Node parent, int rank, final String xPath,
+      final XPathContext xPathContext) throws XPathExpressionException {
-      case XSD_ALL_CHILDREN:
-        final String name = getAttribute(child, "name");
-        elementMap.put(name, new CacheElement(name, rank++, isMultiple(child)));
-        break;
-      // TODO group support as XSD matures
-      // case "xsd:group":
-      // buildElementMapGroup(elementMap, doc, child, rank, xPathContext);
-      // break;
-      case "xsd:choice":
-      case "xsd:sequence":
-        rank = buildElementMapXPath(elementMap, schema, child, rank, XSD_CHOICE_OR_SEQUENCE_CHILDREN, xPathContext);
-        break;
-      case "xsd:any":
-        // ignore extensions
-        break;
-      default:
-        // TODO jbarrett - localize
-        throw new UnsupportedOperationException("Unsupported child type '" + child.getNodeName() + "'");
+        case XSD_ALL_CHILDREN:
+          final String name = getAttribute(child, "name");
+          elementMap.put(name, new CacheElement(name, rank++, isMultiple(child)));
+          break;
+        // TODO group support as XSD matures
+        // case "xsd:group":
+        // buildElementMapGroup(elementMap, doc, child, rank, xPathContext);
+        // break;
+        case "xsd:choice":
+        case "xsd:sequence":
+          rank = buildElementMapXPath(elementMap, schema, child, rank,
+              XSD_CHOICE_OR_SEQUENCE_CHILDREN, xPathContext);
+          break;
+        case "xsd:any":
+          // ignore extensions
+          break;
+        default:
+          // TODO jbarrett - localize
+          throw new UnsupportedOperationException(
+              "Unsupported child type '" + child.getNodeName() + "'");
-   * @param element
-   *          to test for multiple.
+   * @param element to test for multiple.

UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66