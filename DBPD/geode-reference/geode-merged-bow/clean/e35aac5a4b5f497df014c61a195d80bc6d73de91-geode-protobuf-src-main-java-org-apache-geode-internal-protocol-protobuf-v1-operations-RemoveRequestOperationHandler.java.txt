Merge branch 'release/1.5.0'

-import static org.apache.geode.internal.protocol.ProtocolErrorCode.INVALID_REQUEST;
-import static org.apache.geode.internal.protocol.ProtocolErrorCode.SERVER_ERROR;
-
-import org.apache.geode.internal.protocol.Failure;
-import org.apache.geode.internal.protocol.MessageExecutionContext;
-import org.apache.geode.internal.protocol.Result;
-import org.apache.geode.internal.protocol.Success;
-import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol;
+import org.apache.geode.internal.protocol.protobuf.v1.BasicTypes;
+import org.apache.geode.internal.protocol.protobuf.v1.Failure;
+import org.apache.geode.internal.protocol.protobuf.v1.MessageExecutionContext;
-import org.apache.geode.internal.protocol.protobuf.v1.utilities.ProtobufResponseUtilities;
-import org.apache.geode.internal.protocol.serialization.exception.EncodingException;
+import org.apache.geode.internal.protocol.protobuf.v1.Result;
+import org.apache.geode.internal.protocol.protobuf.v1.Success;
+import org.apache.geode.internal.protocol.protobuf.v1.serialization.exception.DecodingException;
+import org.apache.geode.security.ResourcePermission;
-  public Result<RegionAPI.RemoveResponse, ClientProtocol.ErrorResponse> process(
-      ProtobufSerializationService serializationService, RegionAPI.RemoveRequest request,
-      MessageExecutionContext messageExecutionContext) throws InvalidExecutionContextException {
+  public Result<RegionAPI.RemoveResponse> process(ProtobufSerializationService serializationService,
+      RegionAPI.RemoveRequest request, MessageExecutionContext messageExecutionContext)
+      throws InvalidExecutionContextException, DecodingException {
-      logger.error("Received Remove request for non-existing region {}", regionName);
-      return Failure
-          .of(ProtobufResponseUtilities.makeErrorResponse(SERVER_ERROR, "Region not found"));
+      logger.error("Received remove request for nonexistent region: {}", regionName);
+      return Failure.of(BasicTypes.ErrorCode.SERVER_ERROR,
+          "Region \"" + regionName + "\" not found");
-    try {
-      Object decodedKey = serializationService.decode(request.getKey());
-      region.remove(decodedKey);
-
-      return Success.of(RegionAPI.RemoveResponse.newBuilder().build());
-    } catch (EncodingException ex) {
-      // can be thrown by encoding or decoding.
-      logger.error("Received Remove request with unsupported encoding: {}", ex);
-      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(INVALID_REQUEST,
-          "Encoding not supported: " + ex.getMessage()));
+    Object decodedKey = serializationService.decode(request.getKey());
+    if (decodedKey == null) {
+      return Failure.of(BasicTypes.ErrorCode.INVALID_REQUEST,
+          "NULL is not a valid key for removal.");
+    region.remove(decodedKey);
+
+    return Success.of(RegionAPI.RemoveResponse.newBuilder().build());
+  }
+
+  public static ResourcePermission determineRequiredPermission(RegionAPI.RemoveRequest request,
+      ProtobufSerializationService serializer) throws DecodingException {
+    return new ResourcePermission(ResourcePermission.Resource.DATA,
+        ResourcePermission.Operation.WRITE, request.getRegionName(),
+        serializer.decode(request.getKey()).toString());

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 UPD74 INS43 MOV8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 UPD42 MOV42 MOV60 MOV60 INS25 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS41 MOV27 INS8 INS27 INS8 INS40 INS42 INS14 INS21 INS41 INS42 INS33 INS41 INS43 INS40 INS40 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS45 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL41 DEL8 DEL25 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8