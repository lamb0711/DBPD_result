GEODE-1597: use Spring shell's parser and delete our own parsing code

* Use Spring's SimpleParser as a basis for command parsing
* reworked help/hint
* removing singleton CommandManager

+import org.apache.commons.lang.StringUtils;
+import org.apache.geode.management.cli.CliMetaData;
+import org.apache.geode.management.internal.cli.shell.GfshExecutionStrategy;
+import org.apache.geode.management.internal.cli.shell.OperationInvoker;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+import org.springframework.shell.event.ParseResult;
+
+import java.lang.annotation.Annotation;
-import org.springframework.shell.event.ParseResult;
-
-import org.apache.geode.management.cli.CliMetaData;
-import org.apache.geode.management.internal.cli.shell.GfshExecutionStrategy;
-import org.apache.geode.management.internal.cli.shell.OperationInvoker;
-
-  private Map<String, String> paramValueStringMap;
+  private Map<String, String> paramValueStringMap = new HashMap<>();
-      final String userInput, final String commandName,
-      final Map<String, String> parametersAsString) {
+      final String userInput) {
-    this.userInput = userInput;
-    this.commandName = commandName;
-    this.paramValueStringMap = new HashMap<String, String>(parametersAsString);
+    this.userInput = userInput.trim();
+
+    CliCommand cliCommand = method.getAnnotation(CliCommand.class);
+    commandName = cliCommand.value()[0];
+
+    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
+    if (arguments == null) {
+      return;
+    }
+
+    for (int i = 0; i < arguments.length; i++) {
+      Object argument = arguments[i];
+      if (argument == null) {
+        continue;
+      }
+
+      CliOption cliOption = getCliOption(parameterAnnotations, i);
+
+      String argumentAsString;
+      if (argument instanceof Object[]) {
+        argumentAsString = StringUtils.join((Object[]) argument, ",");
+      } else {
+        argumentAsString = argument.toString();
+      }
+      // need to quote the argument with single quote if it contains white space.
+      // these will be used for the http request parameters, when turned into the
+      // commands again, the options will be quoted.
+      if (argumentAsString.contains(" ")) {
+        argumentAsString = "'" + argumentAsString + "'";
+      }
+      paramValueStringMap.put(cliOption.key()[0], argumentAsString);
+    }
+  public String getParamValue(String param) {
+    return paramValueStringMap.get(param);
+  }
-  @Override
-  public String toString() {
-    StringBuilder builder = new StringBuilder();
-    builder.append(GfshParseResult.class.getSimpleName());
-    builder.append(" [method=").append(getMethod());
-    builder.append(", instance=").append(getInstance());
-    builder.append(", arguments=").append(CliUtil.arrayToString(getArguments()));
-    builder.append("]");
-    return builder.toString();
-  }
-
+
+  private CliOption getCliOption(Annotation[][] parameterAnnotations, int index) {
+    Annotation[] annotations = parameterAnnotations[index];
+    for (Annotation annotation : annotations) {
+      if (annotation instanceof CliOption) {
+        return (CliOption) annotation;
+      }
+    }
+    return null;
+  }

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 MOV29 MOV83 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS83 MOV43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS14 MOV46 MOV21 INS60 MOV21 INS60 INS25 INS24 MOV43 INS42 INS41 INS42 INS5 INS42 INS39 INS42 INS60 INS70 INS41 INS74 INS43 INS59 INS5 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS32 INS43 INS85 INS85 INS5 INS59 INS44 INS42 INS8 INS33 MOV43 INS32 INS42 INS42 INS32 INS42 INS2 INS43 INS85 INS85 INS42 INS32 INS42 INS33 INS41 INS39 INS59 INS42 INS40 INS42 INS60 INS25 MOV60 INS60 INS25 INS25 INS21 INS42 UPD42 MOV42 INS42 INS42 INS43 INS85 INS42 INS2 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS57 INS32 INS34 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 UPD43 MOV43 INS59 INS62 INS8 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS62 INS8 INS43 INS42 INS42 UPD42 MOV42 INS42 INS2 INS42 INS33 INS18 UPD42 UPD42 INS32 INS42 INS42 INS5 INS21 INS21 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS21 INS42 INS42 INS2 UPD42 MOV42 INS42 INS43 MOV41 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS7 INS7 INS7 INS32 INS34 INS42 INS11 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS42 INS11 UPD45 MOV45 UPD42 MOV42 INS42 INS45 INS42 INS45 INS42 INS5 INS42 INS43 INS85 INS42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL14 DEL83 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32