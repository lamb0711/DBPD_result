GEODE-6603: Create StoppableCountDownLatch unit tests (#3413)

* Create StoppableCountDownLatchTest and fixup any issues uncovered by
testing.
* Remove unused class StoppableCountDownOrUpLatch.
* Improve ExecutorServiceRule for StoppableCountDownLatchTest.

+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
+import static org.apache.geode.distributed.internal.DistributionConfig.GEMFIRE_PREFIX;
+
-import org.apache.geode.distributed.internal.DistributionConfig;
-  /**
-   * This is how often waiters will wake up to check for cancellation
-   */
-  static final long RETRY_TIME = Long
-      .getLong(DistributionConfig.GEMFIRE_PREFIX + "stoppable-retry-interval", 2000).longValue();
+  static final String RETRY_TIME_MILLIS_PROPERTY = GEMFIRE_PREFIX + "stoppable-retry-interval";
+  static final long RETRY_TIME_MILLIS_DEFAULT = 2000;
+  private final CountDownLatch delegate;
-  /**
-   * The underlying latch
-   */
-  private final CountDownLatch latch;
-
-  /**
-   * The cancellation criterion
-   */
+   * This is how often waiters will wake up to check for cancellation
+   */
+  private final long retryIntervalNanos;
+
+  private final NanoTimer nanoTimer;
+
+  /**
+   * @param stopper the CancelCriterion to check before awaiting
-  public StoppableCountDownLatch(CancelCriterion stopper, int count) {
+  public StoppableCountDownLatch(final CancelCriterion stopper, final int count) {
+    this(stopper, count,
+        MILLISECONDS.toNanos(Long.getLong(RETRY_TIME_MILLIS_PROPERTY, RETRY_TIME_MILLIS_DEFAULT)),
+        System::nanoTime);
+  }
+
+  StoppableCountDownLatch(final CancelCriterion stopper, final int count,
+      final long retryIntervalNanos, final NanoTimer nanoTimer) {
-    this.latch = new CountDownLatch(count);
+    delegate = new CountDownLatch(count);
+    this.retryIntervalNanos = retryIntervalNanos;
+    this.nanoTimer = nanoTimer;
-    for (;;) {
+    do {
-      if (latch.await(RETRY_TIME, TimeUnit.MILLISECONDS)) {
-        break;
-      }
-    }
-  }
-
-  /**
-   * @param msTimeout how long to wait in milliseconds
-   *
-   * @return true if it was unlatched
-   */
-  public boolean await(long msTimeout) throws InterruptedException {
-    stopper.checkCancelInProgress(null);
-    return latch.await(msTimeout, TimeUnit.MILLISECONDS);
+    } while (!delegate.await(retryIntervalNanos, NANOSECONDS));
-    return latch.await(timeout, unit);
-  }
-
-  public synchronized void countDown() {
-    latch.countDown();
+    long timeoutNanos = unit.toNanos(timeout);
+    if (timeoutNanos > retryIntervalNanos) {
+      return awaitWithCheck(timeoutNanos);
+    }
+    return delegate.await(timeoutNanos, NANOSECONDS);
-   * @return the current count
+   * @param timeoutMillis how long to wait in milliseconds
+   *
+   * @return true if it was unlatched
+  public boolean await(final long timeoutMillis) throws InterruptedException {
+    stopper.checkCancelInProgress(null);
+    long timeoutNanos = MILLISECONDS.toNanos(timeoutMillis);
+    if (timeoutNanos > retryIntervalNanos) {
+      return awaitWithCheck(timeoutNanos);
+    }
+    return delegate.await(timeoutNanos, NANOSECONDS);
+  }
+
+  public void countDown() {
+    delegate.countDown();
+  }
+
-    return latch.getCount();
+    return delegate.getCount();
-  /**
-   * @return a string identifying this latch, as well as its state
-   */
-    return "(Stoppable) " + latch.toString();
+    return "(Stoppable) " + delegate;
+  }
+
+  long retryIntervalNanos() {
+    return retryIntervalNanos;
+  }
+
+  private boolean awaitWithCheck(final long timeoutNanos) throws InterruptedException {
+    long startNanos = nanoTimer.nanoTime();
+    boolean unlatched;
+    do {
+      stopper.checkCancelInProgress(null);
+      unlatched = delegate.await(retryIntervalNanos, NANOSECONDS);
+    } while (!unlatched && nanoTimer.nanoTime() - startNanos < timeoutNanos);
+    return unlatched;
+  }
+
+  @FunctionalInterface
+  interface NanoTimer {
+    long nanoTime();

MOV26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS55 MOV83 MOV83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 MOV43 INS59 MOV29 INS39 INS83 INS83 INS43 INS59 INS8 INS42 INS44 INS44 INS44 INS44 MOV8 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS42 INS31 INS42 INS42 INS27 INS42 INS34 INS42 UPD42 INS42 INS42 INS65 INS83 INS83 INS17 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS21 INS21 INS19 MOV21 INS60 INS25 INS41 INS83 UPD42 MOV21 INS60 INS25 INS41 INS83 INS39 INS42 INS42 INS60 INS60 INS19 INS41 INS42 INS39 INS42 INS42 MOV45 INS42 INS66 INS42 INS42 INS32 INS90 INS42 INS42 INS7 INS7 MOV8 INS38 INS39 INS59 INS27 INS8 INS32 UPD42 INS39 INS59 INS27 INS8 INS42 INS39 INS59 INS39 INS59 INS8 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS32 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS41 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS21 INS21 INS38 INS27 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL42 DEL40 DEL27 DEL34 DEL32 DEL42 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL40 DEL32 DEL10 DEL8 DEL25 DEL8 DEL24 DEL8 DEL40 DEL83 DEL39 DEL42 DEL31 DEL83 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32