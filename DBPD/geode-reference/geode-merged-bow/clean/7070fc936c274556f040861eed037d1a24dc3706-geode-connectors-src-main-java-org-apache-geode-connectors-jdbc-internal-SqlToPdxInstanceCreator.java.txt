GEODE-4872: handle Blob when reading from JDBC (#1692)

When a pdx BYTE_ARRAY or OBJECT field is read and
the column type is BLOB, getBlob is called and
its value is converted to a byte[].

+import java.sql.Blob;
+  private final PdxInstanceFactory factory;
+    this.factory = createPdxInstanceFactory();
-    PdxInstanceFactory factory = getPdxInstanceFactory(cache, regionMapping);
-    PdxInstance pdxInstance = null;
-    if (resultSet.next()) {
-      ResultSetMetaData metaData = resultSet.getMetaData();
-      int ColumnsNumber = metaData.getColumnCount();
-      TypeRegistry typeRegistry = cache.getPdxRegistry();
-      for (int i = 1; i <= ColumnsNumber; i++) {
-        String columnName = metaData.getColumnName(i);
-        if (regionMapping.isPrimaryKeyInValue()
-            || !tableMetaData.getKeyColumnName().equalsIgnoreCase(columnName)) {
-          String fieldName = regionMapping.getFieldNameForColumn(columnName, typeRegistry);
-          FieldType fieldType =
-              getFieldType(typeRegistry, regionMapping.getPdxClassName(), fieldName);
-          writeField(factory, resultSet, i, fieldName, fieldType, columnName);
-        }
-      }
-      if (resultSet.next()) {
-        throw new JdbcConnectorException(
-            "Multiple rows returned for query: " + resultSet.getStatement().toString());
-      }
-      pdxInstance = factory.create();
+    if (!resultSet.next()) {
+      return null;
-    return pdxInstance;
+    TypeRegistry typeRegistry = cache.getPdxRegistry();
+    ResultSetMetaData metaData = resultSet.getMetaData();
+    final int columnCount = metaData.getColumnCount();
+    for (int i = 1; i <= columnCount; i++) {
+      String columnName = metaData.getColumnName(i);
+      if (regionMapping.isPrimaryKeyInValue()
+          || !tableMetaData.getKeyColumnName().equalsIgnoreCase(columnName)) {
+        String fieldName = regionMapping.getFieldNameForColumn(columnName, typeRegistry);
+        FieldType fieldType = getFieldType(typeRegistry, fieldName);
+        writeField(columnName, i, fieldName, fieldType);
+      }
+    }
+    if (resultSet.next()) {
+      throw new JdbcConnectorException(
+          "Multiple rows returned for query: " + resultSet.getStatement());
+    }
+    return factory.create();
-  private PdxInstanceFactory getPdxInstanceFactory(InternalCache cache,
-      RegionMapping regionMapping) {
+  private PdxInstanceFactory createPdxInstanceFactory() {
-    PdxInstanceFactory factory;
-      factory = cache.createPdxInstanceFactory(valueClassName);
+      return cache.createPdxInstanceFactory(valueClassName);
-      factory = cache.createPdxInstanceFactory("no class", false);
+      return cache.createPdxInstanceFactory("no class", false);
-    return factory;
-  private void writeField(PdxInstanceFactory factory, ResultSet resultSet, int columnIndex,
-      String fieldName, FieldType fieldType, String columnName) throws SQLException {
+  private void writeField(String columnName, int columnIndex, String fieldName, FieldType fieldType)
+      throws SQLException {
-        factory.writeByteArray(fieldName, resultSet.getBytes(columnIndex));
+        byte[] byteData;
+        if (isBlobColumn(columnName)) {
+          byteData = getBlobData(columnIndex);
+        } else {
+          byteData = resultSet.getBytes(columnIndex);
+        }
+        factory.writeByteArray(fieldName, byteData);
-      case OBJECT:
-        Object v = resultSet.getObject(columnIndex);
-        if (v instanceof java.util.Date) {
-          if (v instanceof java.sql.Date) {
-            java.sql.Date sqlDate = (java.sql.Date) v;
-            v = new java.util.Date(sqlDate.getTime());
-          } else if (v instanceof java.sql.Time) {
-            java.sql.Time sqlTime = (java.sql.Time) v;
-            v = new java.util.Date(sqlTime.getTime());
-          } else if (v instanceof java.sql.Timestamp) {
-            java.sql.Timestamp sqlTimestamp = (java.sql.Timestamp) v;
-            v = new java.util.Date(sqlTimestamp.getTime());
+      case OBJECT: {
+        Object v;
+        if (isBlobColumn(columnName)) {
+          v = getBlobData(columnIndex);
+        } else {
+          v = resultSet.getObject(columnIndex);
+          if (v instanceof java.util.Date) {
+            if (v instanceof java.sql.Date) {
+              java.sql.Date sqlDate = (java.sql.Date) v;
+              v = new java.util.Date(sqlDate.getTime());
+            } else if (v instanceof java.sql.Time) {
+              java.sql.Time sqlTime = (java.sql.Time) v;
+              v = new java.util.Date(sqlTime.getTime());
+            } else if (v instanceof java.sql.Timestamp) {
+              java.sql.Timestamp sqlTimestamp = (java.sql.Timestamp) v;
+              v = new java.util.Date(sqlTimestamp.getTime());
+            }
+      }
+    }
+  }
+
+  private boolean isBlobColumn(String columnName) throws SQLException {
+    return this.tableMetaData.getColumnDataType(columnName) == Types.BLOB;
+  }
+
+  /**
+   * If the given column contains a Blob returns its data as a byte array;
+   * otherwise return null.
+   *
+   * @throws JdbcConnectorException if blob is too big to fit in a byte array
+   */
+  private byte[] getBlobData(int columnIndex) throws SQLException {
+    Blob blob = resultSet.getBlob(columnIndex);
+    if (blob == null) {
+      return null;
+    }
+    try {
+      long blobLength = blob.length();
+      if (blobLength > Integer.MAX_VALUE) {
+        throw new JdbcConnectorException(
+            "Blob of length " + blobLength + " is too big to be converted to a byte array.");
+      }
+      return blob.getBytes(1, (int) blobLength);
+    } finally {
+      blob.free();
-  private FieldType getFieldType(TypeRegistry typeRegistry, String pdxClassName, String fieldName) {
+  private FieldType getFieldType(TypeRegistry typeRegistry, String fieldName) {
+    String pdxClassName = regionMapping.getPdxClassName();
-
-
-
-

INS26 INS40 INS23 MOV44 INS31 INS31 INS83 INS83 MOV43 MOV59 MOV8 MOV60 UPD42 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS21 INS25 INS41 INS43 INS42 INS42 INS41 INS65 INS65 INS39 INS85 INS39 INS42 INS42 INS60 INS25 INS54 INS60 INS7 INS38 INS8 INS83 MOV32 INS60 INS25 INS21 INS8 INS42 INS27 INS66 INS66 INS42 INS66 INS43 INS59 INS27 INS8 INS8 INS8 MOV43 MOV59 INS22 INS32 MOV32 INS41 UPD42 UPD42 INS41 INS41 INS5 INS59 INS32 INS8 INS8 INS32 INS60 INS25 MOV21 INS10 INS32 INS40 INS42 INS42 INS32 INS42 INS33 INS41 INS60 INS25 INS41 INS21 INS42 MOV32 INS52 INS42 INS42 INS33 MOV32 MOV32 INS39 INS85 INS42 INS42 INS42 INS21 MOV21 INS42 INS42 INS42 INS42 MOV43 MOV59 INS32 INS8 INS8 INS22 INS42 INS42 INS42 INS42 INS42 INS33 INS39 INS59 INS27 INS8 INS32 INS32 INS7 INS7 INS42 INS42 INS21 INS21 MOV25 INS52 INS42 INS42 INS32 INS42 INS40 INS53 INS42 INS42 INS34 INS11 INS42 INS42 INS59 MOV32 INS42 INS32 INS42 MOV32 INS7 INS7 INS42 INS42 INS14 INS39 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 MOV32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL25 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL60 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL41 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL60 DEL10 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32