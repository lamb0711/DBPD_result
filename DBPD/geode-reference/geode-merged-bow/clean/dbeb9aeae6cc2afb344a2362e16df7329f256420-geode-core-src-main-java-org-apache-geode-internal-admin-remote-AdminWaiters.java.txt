Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
- * Used by {@link AdminRequest} to wait for a {@link AdminResponse}.
- * Prior to GemFire 4.0, a singleton instance of this would keep track
- * of <code>AdminRequest</code>s that were waiting for replies and
- * would cancel them, if desired.  However, in order to fix bug 31562,
- * <code>AdminRequest</code> were modified to use an {@link
- * AdminReplyProcessor} and this class was refactored to be more
- * static. 
+ * Used by {@link AdminRequest} to wait for a {@link AdminResponse}. Prior to GemFire 4.0, a
+ * singleton instance of this would keep track of <code>AdminRequest</code>s that were waiting for
+ * replies and would cancel them, if desired. However, in order to fix bug 31562,
+ * <code>AdminRequest</code> were modified to use an {@link AdminReplyProcessor} and this class was
+ * refactored to be more static.
- * Eventually, the waiting/cancelling code can be factored into
- * <code>AdminRequest</code> and this class can go away.
+ * Eventually, the waiting/cancelling code can be factored into <code>AdminRequest</code> and this
+ * class can go away.
-  
-  //private static final long TIMEOUT = 10000L;
+
+  // private static final long TIMEOUT = 10000L;
+   * 
-   * @throws RuntimeAdminException if this method is interrupted, times out, cancelled ({@link #cancelWaiters}), or failed with an exception on the server side.
+   * @throws RuntimeAdminException if this method is interrupted, times out, cancelled
+   *         ({@link #cancelWaiters}), or failed with an exception on the server side.
-    // the VM that sent it.  However, now that the admin API can be
+    // the VM that sent it. However, now that the admin API can be
-    // information about its own VM.  Unfortunately, a distribution
-    // manager cannot send a message to itself (see bug 31734).  So,
+    // information about its own VM. Unfortunately, a distribution
+    // manager cannot send a message to itself (see bug 31734). So,
-      synchronized(msg) {
+      synchronized (msg) {
-            throw new RuntimeAdminException(LocalizedStrings.AdminWaiters_COULD_NOT_SEND_REQUEST_0.toLocalizedString(s));
+            throw new RuntimeAdminException(
+                LocalizedStrings.AdminWaiters_COULD_NOT_SEND_REQUEST_0.toLocalizedString(s));
-          throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1.toLocalizedString(new Object[] {msg.getRecipient(), ""}));
+          throw new OperationCancelledException(
+              LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1
+                  .toLocalizedString(new Object[] {msg.getRecipient(), ""}));
-        
+
-            //no one ever replied
-            StringBuffer sb =
-              new StringBuffer("Administration request ");
+            // no one ever replied
+            StringBuffer sb = new StringBuffer("Administration request ");
-          throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1.toLocalizedString(new Object[] {msg.getRecipient(), s}));
+          throw new OperationCancelledException(
+              LocalizedStrings.AdminWaiters_REQUEST_SENT_TO_0_FAILED_SINCE_MEMBER_DEPARTED_1
+                  .toLocalizedString(new Object[] {msg.getRecipient(), s}));
-        
+
-    } 
-    catch (InterruptedException ex) {
+    } catch (InterruptedException ex) {
-      throw new OperationCancelledException(LocalizedStrings.AdminWaiters_REQUEST_SEND_TO_0_WAS_CANCELLED_1.toLocalizedString(new Object[] {msg.getRecipient(), s}));
+      throw new OperationCancelledException(
+          LocalizedStrings.AdminWaiters_REQUEST_SEND_TO_0_WAS_CANCELLED_1
+              .toLocalizedString(new Object[] {msg.getRecipient(), s}));
-      throw new RuntimeAdminException(LocalizedStrings.AdminWaiters_REQUEST_FAILED.toLocalizedString(), ((AdminFailureResponse)result).getCause());
+      throw new RuntimeAdminException(
+          LocalizedStrings.AdminWaiters_REQUEST_FAILED.toLocalizedString(),
+          ((AdminFailureResponse) result).getCause());
-    ReplyProcessor21 processor =
-      (ReplyProcessor21) ReplyProcessor21.getProcessor(id);
+    ReplyProcessor21 processor = (ReplyProcessor21) ReplyProcessor21.getProcessor(id);
-      return; //must've been cancelled
+      return; // must've been cancelled
+
-   * Call with the id of a RemoteGfManager that no longer exists.
-   * All outstanding requests to that manager will be cancelled.
+   * Call with the id of a RemoteGfManager that no longer exists. All outstanding requests to that
+   * manager will be cancelled.
-    // do anything here.  The ReplyProcessor takes care of members
+    // do anything here. The ReplyProcessor takes care of members
-    AdminReplyProcessor processor =
-      (AdminReplyProcessor) ReplyProcessor21.getProcessor(msgId);
+    AdminReplyProcessor processor = (AdminReplyProcessor) ReplyProcessor21.getProcessor(msgId);
-    }    
+    }
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66