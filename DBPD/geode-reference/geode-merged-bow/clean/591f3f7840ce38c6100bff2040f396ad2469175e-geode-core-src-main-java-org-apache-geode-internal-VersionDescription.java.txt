GEODE-2644: Make LogWriterAppender optional and support log4j2.xml

LogWriterAppender is now configured in log4j2.xml and it supports
sessions that correspond with Cache lifecycle. This allows Geode to
pause and resume LogWriterAppender and GeodeConsoleAppender without
resorting to dynamically adding and removing appenders.

When the Cache exists, log events stop going to the Console and instead
go to the Geode log file. Whenever the Cache does not exist, log events
go only to the Console.

These changes remove as much of the Log4j2 Core manipulation as
possible.

Also fixed:
* GEODE-5789: Geode now updates log level of all Geode loggers.

List of changes:
* Change LogWriterAppender to be pausable and session-oriented
* Add GeodeConsoleAppender which is pausable
* Log4j2 Core dependency is now optional
* Internal Logging interfaces allow Logging service to be pluggable
* Log4j2 xml integration testing now uses JUnit Rule from Log4j2
* Reduce coupling between Logging and the rest of Geode
* Greatly increase test coverage for Logging

+import java.net.UnknownHostException;
-import org.apache.geode.SystemFailure;
+  static final String NATIVE_VERSION = "Native version";
+
+  static final String RUNNING_ON = "Running on";
+
-    pw.println("Native version: " + getNativeCodeVersion());
-    printHostInfo(pw);
+    pw.println(NATIVE_VERSION + ": " + getNativeCodeVersion());
+    pw.println(getRunningOnInfo());
-  private void printHostInfo(PrintWriter pw) throws Error {
+  private static String getRunningOnInfo() {
+    String line = getLocalHost() + ", " + Runtime.getRuntime().availableProcessors() + " cpu(s), "
+        + getOsArchitecture() + ' ' + getOsName() + ' ' + getOsVersion() + ' ';
+    return String.format(RUNNING_ON + ": %s", line);
+  }
+
+  private static String getLocalHost() {
-      String sb = SocketCreator.getLocalHost().toString() + ", "
-          + Runtime.getRuntime().availableProcessors() + " cpu(s), " + getOsArchitecture() + ' '
-          + getOsName() + ' ' + getOsVersion() + ' ';
-      pw.println(String.format("Running on: %s", sb));
-    } catch (VirtualMachineError err) {
-      SystemFailure.initiateFailure(err);
-      // If this ever returns, rethrow the error. We're poisoned
-      // now, so don't let this thread continue.
-      throw err;
-    } catch (Throwable t) {
-      // Whenever you catch Error or Throwable, you must also
-      // catch VirtualMachineError (see above). However, there is
-      // _still_ a possibility that you are dealing with a cascading
-      // error condition, so you also need to check to see if the JVM
-      // is still usable:
-      SystemFailure.checkFailure();
+      return SocketCreator.getLocalHost().toString();
+    } catch (UnknownHostException e) {
+      return e.getMessage();

MOV26 UPD40 INS23 INS23 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS42 MOV8 INS83 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 MOV42 INS41 INS42 INS54 INS32 INS8 INS12 INS42 UPD42 INS32 UPD42 MOV42 MOV42 INS27 UPD42 MOV42 INS41 INS44 INS8 INS42 UPD45 UPD42 MOV42 INS32 INS42 INS45 MOV32 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8