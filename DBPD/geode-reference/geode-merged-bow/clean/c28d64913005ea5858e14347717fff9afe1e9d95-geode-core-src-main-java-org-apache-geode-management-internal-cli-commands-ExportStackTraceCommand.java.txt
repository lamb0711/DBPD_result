Merge branch 'release/1.4.0'

-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.management.internal.cli.CliUtil;
-   * Current implementation supports writing it to a file and returning the location of the file
+   * Current implementation supports writing it to a locator/server side file and returning the
+   * location of the file
-          unspecifiedDefaultValue = "false",
-          help = CliStrings.EXPORT_STACKTRACE__FAIL__IF__FILE__PRESENT__HELP) boolean failIfFilePresent) {
-
-    Result result;
-    StringBuilder filePrefix = new StringBuilder("stacktrace");
+          unspecifiedDefaultValue = "false", specifiedDefaultValue = "true",
+          help = CliStrings.EXPORT_STACKTRACE__FAIL__IF__FILE__PRESENT__HELP) boolean failIfFilePresent)
+      throws IOException {
+      StringBuilder filePrefix = new StringBuilder("stacktrace");
-    try {
-      if (outFile.exists() && failIfFilePresent) {
-        return ResultBuilder.createShellClientErrorResult(CliStrings.format(
-            CliStrings.EXPORT_STACKTRACE__ERROR__FILE__PRESENT, outFile.getCanonicalPath()));
-      }
-
-      InternalCache cache = getCache();
-      InternalDistributedSystem ads = cache.getInternalDistributedSystem();
-
-      InfoResultData resultData = ResultBuilder.createInfoResultData();
-
-      Map<String, byte[]> dumps = new HashMap<>();
-      Set<DistributedMember> targetMembers = CliUtil.findMembers(group, memberNameOrId);
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> rc =
-          CliUtil.executeFunction(getStackTracesFunction, null, targetMembers);
-      ArrayList<Object> resultList = (ArrayList<Object>) rc.getResult();
-
-      for (Object resultObj : resultList) {
-        if (resultObj instanceof StackTracesPerMember) {
-          StackTracesPerMember stackTracePerMember = (StackTracesPerMember) resultObj;
-          dumps.put(stackTracePerMember.getMemberNameOrId(), stackTracePerMember.getStackTraces());
-        }
-      }
-
-      String filePath = writeStacksToFile(dumps, fileName);
-      resultData.addLine(CliStrings.format(CliStrings.EXPORT_STACKTRACE__SUCCESS, filePath));
-      resultData.addLine(CliStrings.EXPORT_STACKTRACE__HOST + ads.getDistributedMember().getHost());
-
-      result = ResultBuilder.buildResult(resultData);
-    } catch (IOException ex) {
-      result = ResultBuilder
-          .createGemFireErrorResult(CliStrings.EXPORT_STACKTRACE__ERROR + ex.getMessage());
+    if (outFile.exists() && failIfFilePresent) {
+      return ResultBuilder.createUserErrorResult(CliStrings
+          .format(CliStrings.EXPORT_STACKTRACE__ERROR__FILE__PRESENT, outFile.getCanonicalPath()));
-    return result;
+
+    Map<String, byte[]> dumps = new HashMap<>();
+    Set<DistributedMember> targetMembers = getMembers(group, memberNameOrId);
+
+    InfoResultData resultData = ResultBuilder.createInfoResultData();
+
+    ResultCollector<?, ?> rc = executeFunction(getStackTracesFunction, null, targetMembers);
+    ArrayList<Object> resultList = (ArrayList<Object>) rc.getResult();
+
+    for (Object resultObj : resultList) {
+      if (resultObj instanceof StackTracesPerMember) {
+        StackTracesPerMember stackTracePerMember = (StackTracesPerMember) resultObj;
+        dumps.put(stackTracePerMember.getMemberNameOrId(), stackTracePerMember.getStackTraces());
+      }
+    }
+
+    InternalDistributedSystem ads = getCache().getInternalDistributedSystem();
+    String filePath = writeStacksToFile(dumps, fileName);
+    resultData.addLine(CliStrings.format(CliStrings.EXPORT_STACKTRACE__SUCCESS, filePath));
+    resultData.addLine(CliStrings.EXPORT_STACKTRACE__HOST + ads.getDistributedMember().getHost());
+
+    return ResultBuilder.buildResult(resultData);
+

MOV43 MOV8 MOV60 MOV60 MOV25 MOV60 INS41 UPD66 INS66 INS80 MOV43 MOV32 INS42 INS45 MOV60 UPD42 MOV42 UPD42 INS32 UPD42 MOV32 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8