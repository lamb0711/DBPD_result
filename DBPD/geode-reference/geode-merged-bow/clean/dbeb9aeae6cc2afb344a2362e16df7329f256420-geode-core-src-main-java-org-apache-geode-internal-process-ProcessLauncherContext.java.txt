Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Thread based context for launching a process. GemFire internals can acquire
- * optional configuration details from a process launcher via this context.
+ * Thread based context for launching a process. GemFire internals can acquire optional
+ * configuration details from a process launcher via this context.
-  public static final String OVERRIDDEN_DEFAULTS_PREFIX = DistributionConfig.GEMFIRE_PREFIX + "default.";
+  public static final String OVERRIDDEN_DEFAULTS_PREFIX =
+      DistributionConfig.GEMFIRE_PREFIX + "default.";
-    new ThreadLocal<ProcessLauncherContext>();
+      new ThreadLocal<ProcessLauncherContext>();
+   * 
-   * Returns the gemfire properties to be used if none of the specified
-   * properties are defined by any other mechanism. This will only override
-   * default values. If a property is defined by System property, API, or
-   * within gemfire.properties then the contingent value will be ignored.
-   * @return the contingent gemfire properties values to be used as an
-   *         alternative default value
+   * Returns the gemfire properties to be used if none of the specified properties are defined by
+   * any other mechanism. This will only override default values. If a property is defined by System
+   * property, API, or within gemfire.properties then the contingent value will be ignored.
+   * 
+   * @return the contingent gemfire properties values to be used as an alternative default value
-  public static void set(final boolean redirectOutput,
-                         final Properties contingentProperties,
-                         final StartupStatusListener startupListener) {
+  public static void set(final boolean redirectOutput, final Properties contingentProperties,
+      final StartupStatusListener startupListener) {
-    //DATA.get().restoreErrorStream();
+    // DATA.get().restoreErrorStream();
-  private ProcessLauncherContext(final boolean redirectOutput,
-                                 final Properties overriddenDefaults,
-                                 final StartupStatusListener startupListener) {
+  private ProcessLauncherContext(final boolean redirectOutput, final Properties overriddenDefaults,
+      final StartupStatusListener startupListener) {
-  
+
-      }
-      else if (branch instanceof PrintStream) {
+      } else if (branch instanceof PrintStream) {
-      }
-      else {
+      } else {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66