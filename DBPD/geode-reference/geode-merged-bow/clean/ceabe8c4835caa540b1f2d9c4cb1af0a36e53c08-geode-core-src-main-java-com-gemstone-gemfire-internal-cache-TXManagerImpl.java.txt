Merge branch 'feature/GEODE-1571' of ssh://github.com/jinmeiliao/incubator-geode into feature/GEODE-1571

+import com.gemstone.gemfire.internal.concurrent.ConcurrentHashSet;
-
+  /**
+   * The number of seconds to keep transaction states for disconnected clients.
+   * This allows the client to fail over to another server and still find
+   * the transaction state to complete the transaction.
+   */
+  private int transactionTimeToLive;
+  
+    this.transactionTimeToLive = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "cacheServer.transactionTimeToLive", 180);
+    expireClientTransactionsSentFromDepartedProxy(id);
-   * retrieve the transaction states for the given client
+   * retrieve the transaction TXIds for the given client
-   * @return a set of the currently open transaction states
+   * @return a set of the currently open TXIds
+  
+  /**
+   * retrieve the transaction states for the given client
+   * @param id the client's membership ID
+   * @return a set of the currently open transaction states
+   */
+  public Set<TXStateProxy> getTransactionStatesForClient(InternalDistributedMember id) {
+    Set<TXStateProxy> result = new HashSet<TXStateProxy>();
+    synchronized (this.hostedTXStates) {
+      for (Map.Entry<TXId, TXStateProxy> entry: this.hostedTXStates.entrySet()) {
+        if (entry.getKey().getMemberId().equals(id)) {
+          result.add(entry.getValue());
+        }
+      }
+    }
+    return result;
+  }
+  public void setTransactionTimeToLiveForTest(int seconds) {
+    this.transactionTimeToLive = seconds;
+  }
+  
+  /**
+   * @return the time-to-live for abandoned transactions, in seconds
+   */
+  public int getTransactionTimeToLive() {
+    return this.transactionTimeToLive;
+  }
+  
+  public InternalDistributedMember getMemberId() {
+    return this.distributionMgrId;
+  }
+  
+  //expire the transaction states for the lost proxy server based on timeout setting.  
+  private void expireClientTransactionsSentFromDepartedProxy(InternalDistributedMember proxyServer) {
+    if (this.cache.isClosed()) {
+      return; 
+    }
+    long timeout = getTransactionTimeToLive() * 1000;
+    if (timeout <= 0) {
+      removeTransactionsSentFromDepartedProxy(proxyServer);
+    } else {
+      if (departedProxyServers != null) departedProxyServers.add(proxyServer);  
+      SystemTimerTask task = new SystemTimerTask() {
+        @Override
+        public void run2() {
+          removeTransactionsSentFromDepartedProxy(proxyServer);
+          if (departedProxyServers != null) departedProxyServers.remove(proxyServer);
+        }
+      };
+      try {
+        ((GemFireCacheImpl)this.cache).getCCPTimer().schedule(task, timeout);
+      } catch (IllegalStateException ise) {
+        if (!((GemFireCacheImpl)this.cache).isClosed()) {
+          throw ise;
+        }
+        //task not able to be scheduled due to cache is closing,
+        //do not set it in the test hook.
+        if (departedProxyServers != null) departedProxyServers.remove(proxyServer);
+      }
+    }
+  }
+  
+  private final Set<InternalDistributedMember> departedProxyServers = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "trackScheduledToBeRemovedTx") ?
+      new ConcurrentHashSet<InternalDistributedMember>() : null;
+
+  /**
+   * provide a test hook to track departed peers
+   */
+  public Set<InternalDistributedMember> getDepartedProxyServers() {
+    return departedProxyServers;
+  }
+  
+  /**
+   * Find all client originated transactions sent from the departed proxy server.
+   * Remove them from the hostedTXStates map after the set TransactionTimeToLive period.
+   * @param proxyServer the departed proxy server
+   */
+  public void removeTransactionsSentFromDepartedProxy(InternalDistributedMember proxyServer) {
+    final Set<TXId> txIds = getTransactionsSentFromDepartedProxy(proxyServer);
+    if (txIds.isEmpty()) {
+      return;
+    }
+    if (logger.isDebugEnabled()) {
+      logger.debug("expiring the following transactions: {}", txIds);
+    }
+    synchronized (this.hostedTXStates) {
+      Iterator<Map.Entry<TXId, TXStateProxy>> iterator = this.hostedTXStates.entrySet().iterator();
+      while (iterator.hasNext()) {
+        Map.Entry<TXId,TXStateProxy> entry = iterator.next();
+        if (txIds.contains(entry.getKey())) {
+          //The TXState was not updated by any other proxy server, 
+          //The client would fail over to another proxy server.
+          //Remove it after waiting for transactionTimeToLive period.
+          entry.getValue().close();
+          iterator.remove();
+        }
+      }
+    }
+  }
+  
+  /*
+   * retrieve the transaction states for the given client from a certain proxy server.
+   * if transactions failed over, the new proxy server information should be stored
+   * in the TXState
+   * @param id the proxy server
+   * @return a set of the currently open transaction states
+   */
+  private Set<TXId> getTransactionsSentFromDepartedProxy(InternalDistributedMember proxyServer) {
+    Set<TXId> result = new HashSet<TXId>();
+    synchronized (this.hostedTXStates) {
+      for (Map.Entry<TXId, TXStateProxy> entry: this.hostedTXStates.entrySet()) {
+        TXStateProxy tx = entry.getValue();
+        if (tx.isRealDealLocal() && tx.isOnBehalfOfClient()) {
+          TXState txstate = (TXState) ((TXStateProxyImpl)tx).realDeal;          
+          if (proxyServer.equals(txstate.getProxyServer())) {
+            result.add(entry.getKey());
+          }
+        }
+      }
+    }
+    return result;
+  }
+  

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS23 INS31 INS31 INS31 INS29 INS83 INS39 INS59 INS29 MOV29 INS83 INS74 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS74 INS59 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS65 INS42 INS21 INS21 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS51 INS41 INS39 INS42 INS21 INS65 INS41 INS42 INS41 INS43 INS42 INS25 INS60 INS25 INS43 INS43 INS42 INS16 INS65 INS43 INS43 INS41 INS65 INS65 INS43 INS42 INS60 INS25 INS25 INS51 INS43 INS43 INS43 INS42 INS60 INS51 INS41 INS66 INS66 INS66 INS7 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS22 INS8 INS42 INS7 INS66 INS22 INS22 INS42 INS32 INS8 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS14 INS33 INS66 INS42 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS83 INS74 INS59 INS32 INS8 INS32 INS8 INS22 INS8 INS42 INS42 INS42 INS74 INS59 INS22 INS8 INS42 INS22 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS52 INS42 INS70 INS22 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS41 INS42 INS27 INS42 INS34 INS21 INS25 INS60 INS54 INS42 INS42 INS27 INS74 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS21 INS52 INS42 INS60 INS61 INS43 INS43 INS42 INS14 INS52 INS42 INS70 INS52 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS74 INS44 INS32 INS8 INS52 INS42 INS52 INS42 INS32 INS34 INS32 INS27 INS21 INS43 INS59 INS8 INS12 INS40 INS45 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS74 INS59 INS32 INS8 INS42 INS42 INS74 INS44 INS32 INS8 INS40 INS45 INS43 INS43 INS74 INS42 INS22 INS42 INS25 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS43 INS43 INS74 INS42 INS22 INS42 INS60 INS25 INS42 INS42 INS43 INS43 INS43 INS52 INS42 INS32 INS8 INS42 INS42 INS42 INS43 INS1 INS32 INS43 INS42 INS25 INS25 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS43 INS43 INS43 INS52 INS42 INS43 INS59 INS27 INS8 INS40 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS31 INS32 INS42 INS42 INS42 INS42 INS38 INS8 INS27 INS21 INS40 INS42 INS42 INS22 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS60 INS25 INS32 INS42 INS32 INS78 INS83 INS39 INS42 INS8 INS36 INS42 INS32 INS53 INS42 INS33 INS32 INS52 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS25 INS11 INS36 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS27 INS21 INS43 INS22 INS11 INS42 INS42 INS43 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS32 INS42 INS52 INS42 INS43 INS22 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS11 INS42 INS42 INS43 INS42 INS42