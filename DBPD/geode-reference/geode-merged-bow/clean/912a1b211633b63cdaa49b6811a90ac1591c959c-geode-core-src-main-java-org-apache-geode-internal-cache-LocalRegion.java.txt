GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    if (logger.isTraceEnabled(LogMarker.RVV) && getVersionVector() != null) {
-      logger.trace(LogMarker.RVV, "version vector for {} is {}", getName(),
+    if (logger.isTraceEnabled(LogMarker.RVV_VERBOSE) && getVersionVector() != null) {
+      logger.trace(LogMarker.RVV_VERBOSE, "version vector for {} is {}", getName(),
-    if (logger.isTraceEnabled(LogMarker.TOMBSTONE_COUNT)) {
-      logger.trace(LogMarker.TOMBSTONE_COUNT,
+    if (logger.isTraceEnabled(LogMarker.TOMBSTONE_COUNT_VERBOSE)) {
+      logger.trace(LogMarker.TOMBSTONE_COUNT_VERBOSE,
-      // this can be useful for debugging tombstone count problems if there aren't a lot of
-      // concurrent threads
-      // if (TombstoneService.DEBUG_TOMBSTONE_COUNT && this.entries instanceof AbstractRegionMap) {
-      // ((AbstractRegionMap)this.entries).verifyTombstoneCount(tombstoneCount);
-      // }
-    if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
-      logger.trace(LogMarker.TOMBSTONE,
+    if (logger.isTraceEnabled(LogMarker.TOMBSTONE_VERBOSE)) {
+      logger.trace(LogMarker.TOMBSTONE_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.TOMBSTONE_COUNT) && validate) {
+    if (logger.isTraceEnabled(LogMarker.TOMBSTONE_COUNT_VERBOSE) && validate) {
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.trace(LogMarker.DM, "LR.basicInvalidate: this cache has already seen this event {}",
-            event);
+      if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+        logger.trace(LogMarker.DM_VERBOSE,
+            "LR.basicInvalidate: this cache has already seen this event {}", event);
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.trace(LogMarker.DM, "LR.basicDestroy: this cache has already seen this event {}",
-            event);
+      if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+        logger.trace(LogMarker.DM_VERBOSE,
+            "LR.basicDestroy: this cache has already seen this event {}", event);
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.trace(LogMarker.DM, "LR.basicDestroy: this cache has already seen this event {}",
-            event);
+      if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+        logger.trace(LogMarker.DM_VERBOSE,
+            "LR.basicDestroy: this cache has already seen this event {}", event);
-    final boolean isRvvDebugEnabled = logger.isTraceEnabled(LogMarker.RVV);
+    final boolean isRvvDebugEnabled = logger.isTraceEnabled(LogMarker.RVV_VERBOSE);
-        logger.trace(LogMarker.RVV, "waiting for my version vector to dominate{}mine={}{} other={}",
-            getLineSeparator(), getLineSeparator(), this.versionVector.fullToString(), rvv);
+        logger.trace(LogMarker.RVV_VERBOSE,
+            "waiting for my version vector to dominate{}mine={}{} other={}", getLineSeparator(),
+            getLineSeparator(), this.versionVector.fullToString(), rvv);
-          logger.trace(LogMarker.RVV, "incrementing clearTimeouts for {} rvv={}", getName(),
+          logger.trace(LogMarker.RVV_VERBOSE, "incrementing clearTimeouts for {} rvv={}", getName(),
-        logger.trace(LogMarker.RVV, "processing version information for {}", regionEvent);
+        logger.trace(LogMarker.RVV_VERBOSE, "processing version information for {}", regionEvent);
-          logger.trace(LogMarker.RVV, "generated version tag for clear: {}", tag);
+          logger.trace(LogMarker.RVV_VERBOSE, "generated version tag for clear: {}", tag);
-            logger.trace(LogMarker.RVV, "recording version tag for clear: {}", tag);
+            logger.trace(LogMarker.RVV_VERBOSE, "recording version tag for clear: {}", tag);
-          logger.trace(LogMarker.RVV, "Clear: Saved current rvv: {}",
+          logger.trace(LogMarker.RVV_VERBOSE, "Clear: Saved current rvv: {}",

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40