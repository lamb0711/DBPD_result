Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Gathers together a number of {@link StatisticDescriptor statistics}
- * into one logical type.
+ * Gathers together a number of {@link StatisticDescriptor statistics} into one logical type.
-  /////////////////////  Static Methods  /////////////////////
+  ///////////////////// Static Methods /////////////////////
-  public static StatisticsType[] fromXml(Reader reader,
-                                         StatisticsTypeFactory factory)
-    throws IOException {
+  public static StatisticsType[] fromXml(Reader reader, StatisticsTypeFactory factory)
+      throws IOException {
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>StatisticsType</code> with the given name,
-   * description, and statistics.
+   * Creates a new <code>StatisticsType</code> with the given name, description, and statistics.
-   * @param name
-   *        The name of this statistics type (for example,
-   *        <code>"DatabaseStatistics"</code>)
-   * @param description
-   *        A description of this statistics type (for example,
-   *        "Information about the application's use of the
-   *        database").
-   * @param stats
-   *        Descriptions of the individual statistics grouped together
-   *        in this statistics type.
+   * @param name The name of this statistics type (for example, <code>"DatabaseStatistics"</code>)
+   * @param description A description of this statistics type (for example, "Information about the
+   *        application's use of the database").
+   * @param stats Descriptions of the individual statistics grouped together in this statistics
+   *        type.
-   * @throws NullPointerException
-   *         If either <code>name</code> or <code>stats</code> is
+   * @throws NullPointerException If either <code>name</code> or <code>stats</code> is
-  public StatisticsTypeImpl(String name, String description,
-                            StatisticDescriptor[] stats) {
+  public StatisticsTypeImpl(String name, String description, StatisticDescriptor[] stats) {
-   * Creates a new <code>StatisticsType</code> with the given name,
-   * description, and statistics.
+   * Creates a new <code>StatisticsType</code> with the given name, description, and statistics.
-   * @param name
-   *        The name of this statistics type (for example,
-   *        <code>"DatabaseStatistics"</code>)
-   * @param description
-   *        A description of this statistics type (for example,
-   *        "Information about the application's use of the
-   *        database").
-   * @param stats
-   *        Descriptions of the individual statistics grouped together
-   *        in this statistics type.
-   * @param wrapsSharedClass
-   *        True if this type is a wrapper around a SharedClass??.
-   *        False if its a dynamic type created at run time.        
+   * @param name The name of this statistics type (for example, <code>"DatabaseStatistics"</code>)
+   * @param description A description of this statistics type (for example, "Information about the
+   *        application's use of the database").
+   * @param stats Descriptions of the individual statistics grouped together in this statistics
+   *        type.
+   * @param wrapsSharedClass True if this type is a wrapper around a SharedClass??. False if its a
+   *        dynamic type created at run time.
-   * @throws NullPointerException
-   *         If either <code>name</code> or <code>stats</code> is
+   * @throws NullPointerException If either <code>name</code> or <code>stats</code> is
-  public StatisticsTypeImpl(String name, String description,
-                            StatisticDescriptor[] stats, boolean wrapsSharedClass) {
+  public StatisticsTypeImpl(String name, String description, StatisticDescriptor[] stats,
+      boolean wrapsSharedClass) {
-      throw new NullPointerException(LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTICS_TYPE_NAME.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTICS_TYPE_NAME
+              .toLocalizedString());
-      throw new NullPointerException(LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTIC_DESCRIPTORS.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.StatisticsTypeImpl_CANNOT_HAVE_A_NULL_STATISTIC_DESCRIPTORS
+              .toLocalizedString());
-      throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeImpl_THE_REQUESTED_DESCRIPTOR_COUNT_0_EXCEEDS_THE_MAXIMUM_WHICH_IS_1.toLocalizedString(new Object[] {Integer.valueOf(stats.length), Integer.valueOf(StatisticsTypeFactory.MAX_DESCRIPTORS_PER_TYPE)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.StatisticsTypeImpl_THE_REQUESTED_DESCRIPTOR_COUNT_0_EXCEEDS_THE_MAXIMUM_WHICH_IS_1
+              .toLocalizedString(new Object[] {Integer.valueOf(stats.length),
+                  Integer.valueOf(StatisticsTypeFactory.MAX_DESCRIPTORS_PER_TYPE)}));
-    this.statsMap = new HashMap(stats.length*2);
+    this.statsMap = new HashMap(stats.length * 2);
-    for (int i=0; i < stats.length; i++) {
-      StatisticDescriptorImpl sd = (StatisticDescriptorImpl)stats[i];
+    for (int i = 0; i < stats.length; i++) {
+      StatisticDescriptorImpl sd = (StatisticDescriptorImpl) stats[i];
-        throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeImpl_DUPLICATE_STATISTICDESCRIPTOR_NAMED_0.toLocalizedString(stats[i].getName()));
+        throw new IllegalArgumentException(
+            LocalizedStrings.StatisticsTypeImpl_DUPLICATE_STATISTICDESCRIPTOR_NAMED_0
+                .toLocalizedString(stats[i].getName()));
-  //////////////////////  StatisticsType Methods  //////////////////////
+  ////////////////////// StatisticsType Methods //////////////////////
-  
+
-    StatisticDescriptorImpl stat = (StatisticDescriptorImpl)statsMap.get(name);
+    StatisticDescriptorImpl stat = (StatisticDescriptorImpl) statsMap.get(name);
-      throw new IllegalArgumentException(LocalizedStrings.StatisticsTypeImpl_THERE_IS_NO_STATISTIC_NAMED_0.toLocalizedString(name));
+      throw new IllegalArgumentException(
+          LocalizedStrings.StatisticsTypeImpl_THERE_IS_NO_STATISTIC_NAMED_0
+              .toLocalizedString(name));
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
+
+
-//  @Override
-//  public String toString() {
-//    return "StatisticType with " + this.stats.length + " stats";
-//  }
+  // @Override
+  // public String toString() {
+  // return "StatisticType with " + this.stats.length + " stats";
+  // }
-  
+
+
-    StatisticsType other = (StatisticsType)o;
+    StatisticsType other = (StatisticsType) o;
-    for (int i=0; i < myStats.length; i++) {
+    for (int i = 0; i < myStats.length; i++) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66