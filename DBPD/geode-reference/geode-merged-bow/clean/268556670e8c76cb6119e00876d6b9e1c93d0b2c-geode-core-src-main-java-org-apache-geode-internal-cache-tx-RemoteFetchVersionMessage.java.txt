GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.RegionEntry;
+import org.apache.geode.internal.cache.RemoteOperationException;
- * DistributedRegions with DataPolicy EMPTY, NORMAL, PRELOADED, can use this message to fetch
- * VersionTag for a key.
+ * DistributedRegions with DataPolicy NORMAL, PRELOADED, use this message to fetch VersionTag for a
+ * key when a tx is in progress (see TXEntryState.fetchRemoteVersionTag).
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-  @Override
-  public int getProcessorType() {
-    return ClusterDistributionManager.SERIAL_EXECUTOR;
-  }
-
-  @Override
-    if (!(r instanceof PartitionedRegion)) {
-      r.waitOnInitialization();
-    }
-    VersionTag tag;
+    r.waitOnInitialization();
+    VersionTag<?> tag;
-    private VersionTag tag;
+    private VersionTag<?> tag;
-    private FetchVersionReplyMessage(int processorId, VersionTag tag) {
+    private FetchVersionReplyMessage(int processorId, VersionTag<?> tag) {
-    public static void send(InternalDistributedMember recipient, int processorId, VersionTag tag,
+    public static void send(InternalDistributedMember recipient, int processorId, VersionTag<?> tag,
-    private volatile VersionTag tag;
+    private volatile VersionTag<?> tag;
-    public VersionTag waitForResponse() throws RemoteOperationException {
+    public VersionTag<?> waitForResponse() throws RemoteOperationException {
-        waitForCacheException();
+        waitForRemoteResponse();

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD66 UPD66 MOV21 INS74 INS44 MOV44 INS74 INS74 INS74 MOV43 INS76 INS74 INS42 INS74 MOV43 INS76 MOV43 INS76 MOV43 INS76 MOV43 INS76 MOV43 INS76 UPD42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL8 DEL25 DEL42 DEL44