Merge branch 'release/1.4.0'

-import org.apache.geode.test.dunit.AsyncInvocation;
-import org.apache.geode.test.dunit.SerializableRunnableIF;
+import org.apache.geode.test.junit.rules.VMProvider;
-public class MemberVM<T extends Member> implements Member {
-  private T member;
-  private VM vm;
-  private boolean tempWorkingDir;
+public class MemberVM extends VMProvider implements Member {
+  protected Member member;
+  protected VM vm;
+  protected boolean tempWorkingDir;
-  public MemberVM(T member, VM vm) {
+  public MemberVM(Member member, VM vm) {
-  public MemberVM(T member, VM vm, boolean tempWorkingDir) {
+  public MemberVM(Member member, VM vm, boolean tempWorkingDir) {
-  public void invoke(final SerializableRunnableIF runnable) {
-    vm.invoke(runnable);
-  }
-
-  public AsyncInvocation invokeAsync(final SerializableRunnableIF runnable) {
-    return vm.invokeAsync(runnable);
-  }
-
-  public T getMember() {
+  public Member getMember() {
-  public void stopMember() {
-    this.invoke(LocatorServerStartupRule::stopMemberInThisVM);
+  public void stopVM(boolean cleanWorkingDir) {
+    super.stopVM(cleanWorkingDir);
+
+    if (!cleanWorkingDir) {
+      return;
+    }
+
-      Arrays.stream(getWorkingDir().listFiles((dir, name) -> {
-        return !name.startsWith("locator0view");
-      })).forEach(FileUtils::deleteQuietly);
+      Arrays.stream(getWorkingDir().listFiles((dir, name) -> !name.startsWith("locator0view")))
+          .forEach(FileUtils::deleteQuietly);
+  }
+
+  /**
+   * this should called on a locatorVM or a serverVM with jmxManager enabled
+   */
+  public void waitTillRegionsAreReadyOnServers(String regionPath, int serverCount) {
+    vm.invoke(() -> ClusterStartupRule.memberStarter.waitTillRegionIsReadyOnServers(regionPath,
+        serverCount));
+  }
+
+  public void waitTillDiskstoreIsReady(String diskstoreName, int serverCount) {
+    vm.invoke(() -> ClusterStartupRule.memberStarter.waitTillDiskStoreIsReady(diskstoreName,
+        serverCount));
+  }
+
+  public void waitTillAsyncEventQueuesAreReadyOnServers(String queueId, int serverCount) {
+    vm.invoke(() -> ClusterStartupRule.memberStarter
+        .waitTillAsyncEventQueuesAreReadyOnServers(queueId, serverCount));
+  }
+
+  public void waitTilGatewaySendersAreReady(int expectedGatewayObjectCount) throws Exception {
+    vm.invoke(() -> ClusterStartupRule.memberStarter
+        .waitTilGatewaySendersAreReady(expectedGatewayObjectCount));

MOV26 MOV31 MOV31 UPD40 INS43 INS23 INS31 INS31 INS31 INS42 UPD83 MOV83 MOV43 MOV59 UPD83 UPD83 INS83 INS43 INS42 MOV8 UPD42 INS44 INS29 UPD42 INS44 MOV83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 MOV8 INS39 INS42 INS44 UPD43 INS8 UPD43 UPD43 UPD42 MOV42 INS39 INS42 INS21 INS25 INS65 UPD43 UPD42 INS39 INS42 INS43 INS42 INS39 INS42 INS21 UPD43 MOV43 UPD42 MOV42 INS39 INS42 INS21 INS39 INS42 UPD42 INS21 UPD42 UPD42 INS48 INS38 INS8 INS66 UPD42 UPD42 MOV42 INS32 UPD42 INS32 INS32 INS42 INS42 INS42 INS41 INS86 INS42 INS42 INS86 MOV42 UPD42 MOV42 INS86 INS42 INS42 INS86 INS32 INS32 INS32 INS32 INS40 INS42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS40 UPD42 MOV42 INS42 INS42 INS40 INS42 INS42 MOV38 DEL40 DEL26 DEL42 DEL73 DEL43 DEL23 DEL43 DEL42 DEL83 DEL44 DEL31 DEL52 DEL42 DEL42 DEL42 DEL90 DEL32 DEL21 DEL41 DEL8 DEL83 DEL32 DEL41 DEL42