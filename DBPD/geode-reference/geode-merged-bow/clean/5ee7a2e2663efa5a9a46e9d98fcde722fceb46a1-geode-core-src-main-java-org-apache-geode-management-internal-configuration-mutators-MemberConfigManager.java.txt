GEODE-6745 Added unit test coverage for MemberConfigManager and refactored (#3620)


Co-authored-by: Peter Tran <ptran@gmail.com>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
+import java.util.Optional;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-
-    Set<DistributedMember> distributedMembers =
-        cache.getDistributionManager().getDistributionManagerIds()
-            .stream().filter(internalDistributedMember -> (filter.getId() == null
-                || filter.getId().equals(internalDistributedMember.getName())))
-            .map(DistributedMember.class::cast).collect(Collectors.toSet());
-
+    Set<DistributedMember> distributedMembers = getDistributedMembers(filter);
+  @VisibleForTesting
+  Set<DistributedMember> getDistributedMembers(MemberConfig filter) {
+    Set<InternalDistributedMember> distributionManagerIds =
+        cache.getDistributionManager().getDistributionManagerIds();
+    if (filter.getId() != null) {
+      distributionManagerIds = distributionManagerIds.stream().filter(
+          internalDistributedMember -> (filter.getId().equals(internalDistributedMember.getName())))
+          .collect(Collectors.toSet());
+    }
+
+    return distributionManagerIds.stream()
+        .map(DistributedMember.class::cast).collect(Collectors.toSet());
+  }
+
-  private List<MemberConfig> generateMemberConfigs(ArrayList<MemberInformation> memberInformation) {
-
+  @VisibleForTesting
+  List<MemberConfig> generateMemberConfigs(ArrayList<MemberInformation> memberInformation) {
-    List<MemberConfig> memberConfigs = new ArrayList<>();
-    for (MemberInformation memberInfo : memberInformation) {
-      MemberConfig member = generateMemberConfig(coordinatorId, memberInfo);
-      memberConfigs.add(member);
-    }
-
-    return memberConfigs;
+    return memberInformation.stream().map(
+        memberInfo -> generateMemberConfig(coordinatorId, memberInfo)).collect(Collectors.toList());
-  private MemberConfig generateMemberConfig(String coordinatorId, MemberInformation memberInfo) {
+  @VisibleForTesting
+  MemberConfig generateMemberConfig(String coordinatorId, MemberInformation memberInfo) {
-    member.setGroups(Arrays.asList(memberInfo.getGroups().split(",")));
-    member.setClientConnections(memberInfo.getClientCount());
-    if (memberInfo.isServer() && memberInfo.getCacheServeInfo() != null) {
+    if (memberInfo.isServer()) {
-        MemberConfig.CacheServerConfig csConfig = new MemberConfig.CacheServerConfig();
-        csConfig.setPort(info.getPort());
-        csConfig.setMaxConnections(info.getMaxConnections());
-        csConfig.setMaxThreads(info.getMaxThreads());
-        member.addCacheServer(csConfig);
+        MemberConfig.CacheServerConfig cacheServerConfig = new MemberConfig.CacheServerConfig();
+        cacheServerConfig.setPort(info.getPort());
+        cacheServerConfig.setMaxConnections(info.getMaxConnections());
+        cacheServerConfig.setMaxThreads(info.getMaxThreads());
+        member.addCacheServer(cacheServerConfig);
+      member.setGroups(Arrays.asList(memberInfo.getGroups().split(",")));
+      member.setClientConnections(memberInfo.getClientCount());
-  private String getCoordinatorId() {
-    final MembershipManager membershipManager =
-        cache.getDistributionManager().getMembershipManager();
-    if (membershipManager == null) {
-      return null;
-    }
-
-    final DistributedMember coordinator = membershipManager.getCoordinator();
-    if (coordinator == null) {
-      return null;
-    }
-
-    return coordinator.getId();
+  @VisibleForTesting
+  String getCoordinatorId() {
+    return Optional.ofNullable(cache.getDistributionManager())
+        .map(DistributionManager::getMembershipManager)
+        .map(MembershipManager::getCoordinator)
+        .map(DistributedMember::getId)
+        .orElse(null);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS8 INS78 MOV74 INS42 INS44 MOV8 INS78 INS78 INS78 INS60 MOV25 MOV60 MOV41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS41 INS42 INS42 INS41 INS74 INS59 INS42 INS74 INS59 UPD27 MOV27 INS8 INS32 INS32 MOV32 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 MOV32 INS21 INS32 MOV42 MOV32 INS32 INS42 INS32 MOV21 MOV21 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 MOV90 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS90 INS42 MOV32 INS42 INS42 INS42 INS42 INS59 MOV32 INS32 INS42 INS90 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV32 MOV32 INS42 INS90 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV32 DEL27 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL83 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41