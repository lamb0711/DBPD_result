Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-abstract class RegionExpiryTask extends ExpiryTask
-  {
+abstract class RegionExpiryTask extends ExpiryTask {
-  
+
+
-  protected final long getLastAccessedTime()
-  {
+  protected final long getLastAccessedTime() {
-  protected final long getLastModifiedTime()
-  {
+  protected final long getLastModifiedTime() {
-  protected final boolean destroy(boolean isPending) throws CacheException
-  {
+  protected final boolean destroy(boolean isPending) throws CacheException {
-  protected final boolean invalidate() throws TimeoutException
-  {
+  protected final boolean invalidate() throws TimeoutException {
-  protected final boolean localDestroy() throws CacheException
-  {
+  protected final boolean localDestroy() throws CacheException {
-  protected final boolean localInvalidate()
-  {
+  protected final boolean localInvalidate() {
-  public boolean cancel()
-  {
+  public boolean cancel() {
-  protected final void performTimeout() throws CacheException
-  {
+  protected final void performTimeout() throws CacheException {
-  protected final void basicPerformTimeout(boolean isPending) throws CacheException
-  {
+  protected final void basicPerformTimeout(boolean isPending) throws CacheException {
-  final protected void reschedule() throws CacheException
-  {
+  final protected void reschedule() throws CacheException {
-  public String toString()
-  {
+  public String toString() {
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable e) {
+    } catch (Throwable e) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-    return super.toString() + " for " + getLocalRegion().getFullPath()
-        + ", expiration time: " + expireTime + " [now: "
- + getNow() + "]";
+    return super.toString() + " for " + getLocalRegion().getFullPath() + ", expiration time: "
+        + expireTime + " [now: " + getNow() + "]";

