GEODE-8330: Structural Improvements to Versioning

Follow-on to GEODE-8240, this commit eliminates redundancy in 
versioning code and provides a single way to convert a short
to a version and a single way to acquire a known version from
a (possibly unknown) version.
-public class VersionOrdinalImpl implements VersionOrdinal {
+/**
+ * Extend this class to get short ordinal storage and access,
+ * and comparison, hashing, and toString implementations.
+ *
+ * Package private since this class is an implementation detail.
+ */
+abstract class AbstractVersion implements VersionOrdinal {
-  protected final short ordinal;
+  private final short ordinal;
-   * Package-private so only the Versioning factory can access this constructor.
-   *
+   * Protected to require subclassing.
-  VersionOrdinalImpl(final short ordinal) {
+  protected AbstractVersion(final short ordinal) {
-  /**
-   * TODO: eliminate this legacy method in favor of requiring callers to construct a
-   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).
-   */
-  public int compareTo(final short other) {
-    // short min/max can't overflow int, so use (a-b)
-    final int thisOrdinal = this.ordinal;
-    final int otherOrdinal = other;
-    return thisOrdinal - otherOrdinal;
-  }
-
-    if (other instanceof VersionOrdinalImpl) {
-      return this.ordinal == ((VersionOrdinalImpl) other).ordinal;
+    if (other instanceof VersionOrdinal) {
+      return ordinal() == ((VersionOrdinal) other).ordinal();
-  public boolean equals(final VersionOrdinal other) {
-    return other != null && this.ordinal == other.ordinal();
-  }
-
-    result = mult * result + this.ordinal;
+    result = mult * result + ordinal();
-    return toString(ordinal);
+    return getClass().getSimpleName() + "[ordinal=" + ordinal() + ']';
-   * TODO: eliminate this legacy method in favor of requiring callers to construct a
-   * VersionOrdinalImpl. Inline this logic up in toString().
-   */
-  public static String toString(short ordinal) {
-    return "VersionOrdinal[ordinal=" + ordinal + ']';
-  }
-
-
-  /**
+  private int compareTo(final short other) {
+    // short min/max can't overflow int, so use (a-b)
+    final int thisOrdinal = ordinal();
+    final int otherOrdinal = other;
+    return thisOrdinal - otherOrdinal;
+  }
+

MOV31 INS29 UPD83 UPD42 INS65 UPD83 INS83 UPD42 MOV78 MOV43 UPD83 INS66 INS66 INS66 UPD66 MOV43 INS32 UPD45 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS36 INS42 MOV11 UPD43 UPD42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL36 DEL42 DEL22 DEL83 DEL39 DEL42 DEL83 DEL42 DEL44 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL27 DEL27 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL66 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22