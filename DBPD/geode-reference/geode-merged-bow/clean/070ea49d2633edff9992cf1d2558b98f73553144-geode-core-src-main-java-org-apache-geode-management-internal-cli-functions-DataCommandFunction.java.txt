GEODE-3217: Reimplement gfsh query as a single-step command

(cherry picked from commit 564a94b)

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.logging.log4j.Logger;
+import org.json.JSONArray;
+
-import org.apache.geode.cache.query.QueryInvalidException;
-import org.apache.geode.cache.query.internal.CompiledValue;
-import org.apache.geode.cache.query.internal.QCompiler;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.commands.DataCommands;
-import org.apache.geode.management.internal.cli.multistep.CLIMultiStepHelper;
-import org.apache.geode.management.internal.cli.remote.CommandExecutionContext;
-import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.CompositeResultData.SectionResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-import org.apache.logging.log4j.Logger;
-import org.apache.shiro.subject.Subject;
-import org.json.JSONArray;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicInteger;
-  protected static final String SELECT_STEP_DISPLAY = "SELECT_DISPLAY";
-  protected static final String SELECT_STEP_MOVE = "SELECT_PAGE_MOVE";
-  protected static final String SELECT_STEP_END = "SELECT_END";
-  protected static final String SELECT_STEP_EXEC = "SELECT_EXEC";
-
-  private static DataCommandResult cachedResult = null;
-
-  public static class SelectDisplayStep extends CLIMultiStepHelper.LocalStep {
-
-    public SelectDisplayStep(Object[] arguments) {
-      super(SELECT_STEP_DISPLAY, arguments);
-    }
-
-    @Override
-    public Result exec() {
-      boolean interactive = (Boolean) commandArguments[2];
-      GfJsonObject args = CLIMultiStepHelper.getStepArgs();
-      int startCount = args.getInt(DataCommandResult.QUERY_PAGE_START);
-      int endCount = args.getInt(DataCommandResult.QUERY_PAGE_END);
-      int rows = args.getInt(DataCommandResult.NUM_ROWS); // returns Zero if no rows added so it
-      // works.
-      boolean flag = args.getBoolean(DataCommandResult.RESULT_FLAG);
-      CommandResult commandResult = CLIMultiStepHelper.getDisplayResultFromArgs(args);
-      Gfsh.println();
-      while (commandResult.hasNextLine()) {
-        Gfsh.println(commandResult.nextLine());
-      }
-
-      if (flag) {
-        boolean paginationNeeded = startCount < rows && endCount < rows && interactive;
-        if (paginationNeeded) {
-          while (true) {
-            String message = ("Press n to move to next page, q to quit and p to previous page : ");
-            try {
-              String step = Gfsh.getCurrentInstance().interact(message);
-              if ("n".equals(step)) {
-                int nextStart = startCount + getPageSize();
-                return CLIMultiStepHelper.createBannerResult(
-                    new String[] {DataCommandResult.QUERY_PAGE_START,
-                        DataCommandResult.QUERY_PAGE_END,},
-                    new Object[] {nextStart, (nextStart + getPageSize())}, SELECT_STEP_MOVE);
-              } else if ("p".equals(step)) {
-                int nextStart = startCount - getPageSize();
-                if (nextStart < 0) {
-                  nextStart = 0;
-                }
-                return CLIMultiStepHelper.createBannerResult(
-                    new String[] {DataCommandResult.QUERY_PAGE_START,
-                        DataCommandResult.QUERY_PAGE_END},
-                    new Object[] {nextStart, (nextStart + getPageSize())}, SELECT_STEP_MOVE);
-              } else if ("q".equals(step)) {
-                return CLIMultiStepHelper.createBannerResult(new String[] {}, new Object[] {},
-                    SELECT_STEP_END);
-              } else {
-                Gfsh.println("Unknown option ");
-              }
-            } catch (IOException e) {
-              throw new RuntimeException(e);
-            }
-          }
-        }
-      }
-      return CLIMultiStepHelper.createBannerResult(new String[] {}, new Object[] {},
-          SELECT_STEP_END);
-    }
-  }
-
-  public static class SelectMoveStep extends CLIMultiStepHelper.RemoteStep {
-
-    private static final long serialVersionUID = 1L;
-
-    public SelectMoveStep(Object[] arguments) {
-      super(SELECT_STEP_MOVE, arguments);
-    }
-
-    @Override
-    public Result exec() {
-      GfJsonObject args = CLIMultiStepHelper.getStepArgs();
-      int startCount = args.getInt(DataCommandResult.QUERY_PAGE_START);
-      int endCount = args.getInt(DataCommandResult.QUERY_PAGE_END);
-      return cachedResult.pageResult(startCount, endCount, SELECT_STEP_DISPLAY);
-    }
-  }
-
-  public static class SelectExecStep extends CLIMultiStepHelper.RemoteStep {
-
-    private static final long serialVersionUID = 1L;
-
-    private static SecurityService securityService = SecurityService.getSecurityService();
-
-    public SelectExecStep(Object[] arguments) {
-      super(SELECT_STEP_EXEC, arguments);
-    }
-
-    @Override
-    public Result exec() {
-      String remainingQuery = (String) commandArguments[0];
-      boolean interactive = (Boolean) commandArguments[2];
-      DataCommandResult result = _select(remainingQuery);
-      int endCount = 0;
-      cachedResult = result;
-      if (interactive) {
-        endCount = getPageSize();
-      } else {
-        if (result.getSelectResult() != null) {
-          endCount = result.getSelectResult().size();
-        }
-      }
-      if (interactive) {
-        return result.pageResult(0, endCount, SELECT_STEP_DISPLAY);
-      } else {
-        return CLIMultiStepHelper.createBannerResult(new String[] {}, new Object[] {},
-            SELECT_STEP_END);
-      }
-    }
-
-    public DataCommandResult _select(String query) {
-      InternalCache cache = (InternalCache) CacheFactory.getAnyInstance();
-      DataCommandResult dataResult;
-
-      if (StringUtils.isEmpty(query)) {
-        dataResult = DataCommandResult.createSelectInfoResult(null, null, -1, null,
-            CliStrings.QUERY__MSG__QUERY_EMPTY, false);
-        return dataResult;
-      }
-
-      Object array[] = DataCommands.replaceGfshEnvVar(query, CommandExecutionContext.getShellEnv());
-      query = (String) array[1];
-      query = addLimit(query);
-
-      @SuppressWarnings("deprecation")
-      QCompiler compiler = new QCompiler();
-      Set<String> regionsInQuery;
-      try {
-        CompiledValue compiledQuery = compiler.compileQuery(query);
-        Set<String> regions = new HashSet<>();
-        compiledQuery.getRegionsInQuery(regions, null);
-
-        // authorize data read on these regions
-        for (String region : regions) {
-          securityService.authorizeRegionRead(region);
-        }
-
-        regionsInQuery = Collections.unmodifiableSet(regions);
-        if (regionsInQuery.size() > 0) {
-          Set<DistributedMember> members =
-              DataCommands.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
-          if (members != null && members.size() > 0) {
-            DataCommandFunction function = new DataCommandFunction();
-            DataCommandRequest request = new DataCommandRequest();
-            request.setCommand(CliStrings.QUERY);
-            request.setQuery(query);
-            Subject subject = securityService.getSubject();
-            if (subject != null) {
-              request.setPrincipal(subject.getPrincipal());
-            }
-            dataResult = DataCommands.callFunctionForRegion(request, function, members);
-            dataResult.setInputQuery(query);
-            return dataResult;
-          } else {
-            return DataCommandResult.createSelectInfoResult(null, null, -1, null, CliStrings.format(
-                CliStrings.QUERY__MSG__REGIONS_NOT_FOUND, regionsInQuery.toString()), false);
-          }
-        } else {
-          return DataCommandResult.createSelectInfoResult(null, null, -1, null,
-              CliStrings.format(CliStrings.QUERY__MSG__INVALID_QUERY,
-                  "Region mentioned in query probably missing /"),
-              false);
-        }
-      } catch (QueryInvalidException qe) {
-        logger.error("{} Failed Error {}", query, qe.getMessage(), qe);
-        return DataCommandResult.createSelectInfoResult(null, null, -1, null,
-            CliStrings.format(CliStrings.QUERY__MSG__INVALID_QUERY, qe.getMessage()), false);
-      }
-    }
-
-    private String addLimit(String query) {
-      if (StringUtils.containsIgnoreCase(query, " limit")
-          || StringUtils.containsIgnoreCase(query, " count(")) {
-        return query;
-      }
-      return query + " limit " + getFetchSize();
-    }
-  }
-
-  public static class SelectQuitStep extends CLIMultiStepHelper.RemoteStep {
-
-    public SelectQuitStep(Object[] arguments) {
-      super(SELECT_STEP_END, arguments);
-    }
-
-    private static final long serialVersionUID = 1L;
-
-    @Override
-    public Result exec() {
-      boolean interactive = (Boolean) commandArguments[2];
-      GfJsonObject args = CLIMultiStepHelper.getStepArgs();
-      DataCommandResult dataResult = cachedResult;
-      cachedResult = null;
-      if (interactive) {
-        return CLIMultiStepHelper.createEmptyResult("END");
-      } else {
-        CompositeResultData rd = dataResult.toSelectCommandResult();
-        SectionResultData section = rd.addSection(CLIMultiStepHelper.STEP_SECTION);
-        section.addData(CLIMultiStepHelper.NEXT_STEP_NAME, "END");
-        return ResultBuilder.buildResult(rd);
-      }
-    }
-  }
-
-  public static int getPageSize() {
-    int pageSize = -1;
-    Map<String, String> session;
-    if (CliUtil.isGfshVM()) {
-      session = Gfsh.getCurrentInstance().getEnv();
-    } else {
-      session = CommandExecutionContext.getShellEnv();
-    }
-    if (session != null) {
-      String size = session.get(Gfsh.ENV_APP_COLLECTION_LIMIT);
-      if (StringUtils.isEmpty(size)) {
-        pageSize = Gfsh.DEFAULT_APP_COLLECTION_LIMIT;
-      } else {
-        pageSize = Integer.parseInt(size);
-      }
-    }
-    if (pageSize == -1) {
-      pageSize = Gfsh.DEFAULT_APP_COLLECTION_LIMIT;
-    }
-    return pageSize;
-  }
-
-  private static int getFetchSize() {
-    return CommandExecutionContext.getShellFetchSize();
-  }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV83 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL83 DEL42 DEL40 DEL43 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL42 DEL39 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL27 DEL59 DEL60 DEL42 DEL9 DEL42 DEL43 DEL42 DEL45 DEL36 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL27 DEL36 DEL4 DEL3 DEL42 DEL32 DEL41 DEL8 DEL45 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL27 DEL36 DEL4 DEL3 DEL42 DEL32 DEL41 DEL8 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL40 DEL43 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL40 DEL43 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL33 DEL34 DEL38 DEL33 DEL40 DEL9 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL85 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL33 DEL33 DEL34 DEL38 DEL33 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL9 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL33 DEL33 DEL34 DEL38 DEL33 DEL42 DEL42 DEL40 DEL45 DEL32 DEL9 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL33 DEL34 DEL38 DEL33 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL9 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL45 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL40 DEL43 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL46 DEL8 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL34 DEL2 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL55 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31