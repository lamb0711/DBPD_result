Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-public class LuceneSearchIndexFunction<K,V> extends FunctionAdapter implements InternalEntity {
+public class LuceneSearchIndexFunction<K, V> extends FunctionAdapter implements InternalEntity {
-  public void execute(final FunctionContext context)   {
-
-    Set<LuceneSearchResults> result=new HashSet<>();
+  public void execute(final FunctionContext context) {
+    Set<LuceneSearchResults> result = new HashSet<>();
-      if (cache.getRegion(queryInfo.getRegionPath())!=null) {
-        final LuceneQuery<K, V> query = luceneService.createLuceneQueryFactory().create(
-          queryInfo.getIndexName(), queryInfo.getRegionPath(), queryInfo.getQueryString(), queryInfo.getDefaultField());
+      if (luceneService.getIndex(queryInfo.getIndexName(), queryInfo.getRegionPath()) == null) {
+        throw new Exception("Index " + queryInfo.getIndexName() + " not found on region " + queryInfo.getRegionPath());
+      }
+      final LuceneQuery<K, V> query = luceneService.createLuceneQueryFactory()
+        .setResultLimit(queryInfo.getLimit())
+        .create(queryInfo.getIndexName(), queryInfo.getRegionPath(), queryInfo.getQueryString(),
+          queryInfo.getDefaultField());
+      if (queryInfo.getKeysOnly()) {
+        query.findKeys().forEach(key -> result.add(new LuceneSearchResults(key.toString())));
+      }
+      else {
-              result.add(new LuceneSearchResults<K,V>(searchResult.getKey().toString(),searchResult.getValue().toString(),searchResult.getScore())));
+              result.add(
+                new LuceneSearchResults<K, V>(searchResult.getKey().toString(), searchResult.getValue().toString(),
+                  searchResult.getScore())));
-      context.getResultSender().lastResult(result);
+      if (result != null) {
+        context.getResultSender().lastResult(result);
+      }
-      context.getResultSender().lastResult(e);
+      result.add(new LuceneSearchResults(true, e.getRootCause().getMessage()));
+      context.getResultSender().lastResult(result);
+    }
+    catch (Exception e) {
+      result.add(new LuceneSearchResults(true, e.getMessage()));
+      context.getResultSender().lastResult(result);
+

INS12 INS25 MOV60 INS25 MOV44 INS8 INS44 UPD27 MOV27 INS8 INS32 INS8 INS27 INS8 INS21 MOV21 INS43 INS42 INS21 INS53 INS42 INS42 INS21 INS42 INS33 INS21 INS32 INS42 INS32 UPD42 UPD42 INS32 INS14 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 INS42 INS42 INS43 INS27 MOV32 INS42 INS32 INS32 INS42 INS86 INS32 INS42 INS42 INS43 INS9 INS32 INS43 INS9 INS32 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS42 INS42