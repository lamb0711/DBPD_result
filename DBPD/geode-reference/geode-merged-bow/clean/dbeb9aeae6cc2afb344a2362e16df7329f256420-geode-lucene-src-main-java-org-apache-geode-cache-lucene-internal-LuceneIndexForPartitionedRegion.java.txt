Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.cache.partition.PartitionListener;
+import org.apache.geode.distributed.internal.DM;
-    final boolean withPersistence = withPersistence(); 
+    final boolean withPersistence = withPersistence();
-    final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory()>0;
+    final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory() > 0;
-    //       2) Persistence to Persistence
-    //       3) Replicate to Replicate, Partition To Partition
-    //       4) Offheap to Offheap
+    // 2) Persistence to Persistence
+    // 3) Replicate to Replicate, Partition To Partition
+    // 4) Offheap to Offheap
-      throw new IllegalStateException("The data region to create lucene index should be with storage");
-    }
-    if (withPersistence) {
+      regionShortCut = RegionShortcut.PARTITION_PROXY;
+    } else if (withPersistence) {
-    
+
-      fileRegion = createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+      fileRegion =
+          createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+
+    // we will create RegionDirectories on the fly when data comes in
+    HeterogeneousLuceneSerializer mapper = new HeterogeneousLuceneSerializer(getFieldNames());
+    PartitionedRepositoryManager partitionedRepositoryManager =
+        new PartitionedRepositoryManager(this, mapper);
+    DM dm = ((GemFireCacheImpl) getCache()).getDistributedSystem().getDistributionManager();
+    LucenePrimaryBucketListener lucenePrimaryBucketListener =
+        new LucenePrimaryBucketListener(partitionedRepositoryManager, dm);
-      chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes, chunkRegionName, regionAttributes);
+      chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes,
+          chunkRegionName, regionAttributes, lucenePrimaryBucketListener);
-    // we will create RegionDirectories on the fly when data comes in
-    HeterogeneousLuceneSerializer mapper = new HeterogeneousLuceneSerializer(getFieldNames());
-    return new PartitionedRepositoryManager(this, mapper);
+    return partitionedRepositoryManager;
-  
+
-  
+
-    return cache.<String, File> getRegion(fileRegionName) != null;
+    return cache.<String, File>getRegion(fileRegionName) != null;
-  Region createFileRegion(final RegionShortcut regionShortCut,
-                                final String fileRegionName,
-                                final PartitionAttributes partitionAttributes,
-                                final RegionAttributes regionAttributes) {
-    return createRegion(fileRegionName, regionShortCut, this.regionPath, partitionAttributes, regionAttributes);
+  Region createFileRegion(final RegionShortcut regionShortCut, final String fileRegionName,
+      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes) {
+    return createRegion(fileRegionName, regionShortCut, this.regionPath, partitionAttributes,
+        regionAttributes, null);
-    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".files";
-    return cache.<ChunkKey, byte[]> getRegion(chunkRegionName) != null;
+    return cache.<ChunkKey, byte[]>getRegion(chunkRegionName) != null;
-                           final String fileRegionName,
-                           final PartitionAttributes partitionAttributes, final String chunkRegionName, final RegionAttributes regionAttributes) {
-    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+      final String fileRegionName, final PartitionAttributes partitionAttributes,
+      final String chunkRegionName, final RegionAttributes regionAttributes,
+      final PartitionListener lucenePrimaryBucketListener) {
+    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes,
+        regionAttributes, lucenePrimaryBucketListener);
-  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(PartitionAttributesFactory attributesFactory, PartitionAttributes<?,?> dataRegionAttributes) {
+  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(
+      PartitionAttributesFactory attributesFactory,
+      PartitionAttributes<?, ?> dataRegionAttributes) {
-                                             final RegionShortcut regionShortCut,
-                                             final String colocatedWithRegionName,
-                                             final PartitionAttributes partitionAttributes,
-                                             final RegionAttributes regionAttributes)
-  {
-    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory<String, File>();
+      final RegionShortcut regionShortCut, final String colocatedWithRegionName,
+      final PartitionAttributes partitionAttributes, final RegionAttributes regionAttributes,
+      PartitionListener lucenePrimaryBucketListener) {
+    PartitionAttributesFactory partitionAttributesFactory =
+        new PartitionAttributesFactory<String, File>();
+    if (lucenePrimaryBucketListener != null) {
+      partitionAttributesFactory.addPartitionListener(lucenePrimaryBucketListener);
+    }
-    
+
-      .withArgs(new String[] {directory, indexName})
-      .execute(DumpDirectoryFiles.ID);
+        .withArgs(new String[] {directory, indexName}).execute(DumpDirectoryFiles.ID);

INS26 INS26 INS40 INS40 MOV60 INS44 INS44 INS60 INS60 INS60 INS83 INS43 INS42 INS43 INS42 INS25 MOV25 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS42 INS42 INS27 INS8 INS21 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS42 INS14 INS33 INS42 INS42 INS33 INS21 INS7 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS40 INS36 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS32 INS42 INS42 DEL42 DEL43 DEL45 DEL14 DEL53