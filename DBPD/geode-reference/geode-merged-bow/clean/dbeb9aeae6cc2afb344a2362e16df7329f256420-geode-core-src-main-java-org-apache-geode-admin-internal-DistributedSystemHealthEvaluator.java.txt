Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Contains the logic for evaluating the health of an entire GemFire
- * distributed system according to the thresholds provided in a {@link
- * DistributedSystemHealthConfig}.
+ * Contains the logic for evaluating the health of an entire GemFire distributed system according to
+ * the thresholds provided in a {@link DistributedSystemHealthConfig}.
- * Note that unlike other evaluators, the
- * <code>DistributedSystemHealthEvaluator</code> resides in the
- * "administrator" VM and not in the member VMs.  This is because
- * there only needs to be one
- * <code>DistributedSystemHealthEvaluator</code> per distributed
- * system.
+ * Note that unlike other evaluators, the <code>DistributedSystemHealthEvaluator</code> resides in
+ * the "administrator" VM and not in the member VMs. This is because there only needs to be one
+ * <code>DistributedSystemHealthEvaluator</code> per distributed system.
- * */
-class DistributedSystemHealthEvaluator
-  extends AbstractHealthEvaluator implements MembershipListener {
+ */
+class DistributedSystemHealthEvaluator extends AbstractHealthEvaluator
+    implements MembershipListener {
-  /** The distribution manager with which this MembershipListener is
-   * registered */
+  /**
+   * The distribution manager with which this MembershipListener is registered
+   */
-  /** The number of application members that have unexpectedly left
-   * since the previous evaluation */
+  /**
+   * The number of application members that have unexpectedly left since the previous evaluation
+   */
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-  DistributedSystemHealthEvaluator(DistributedSystemHealthConfig config,
-                                   DM dm) {
+  DistributedSystemHealthEvaluator(DistributedSystemHealthConfig config, DM dm) {
-      desc = 
-        ((DistributionManager) dm).getDistributionConfigDescription();
-    } 
+      desc = ((DistributionManager) dm).getDistributionConfigDescription();
+    }
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-  /**  
-   * Checks to make sure that the number of application members of
-   * the distributed system that have left unexpected since the last
-   * evaluation is less than the {@linkplain
-   * DistributedSystemHealthConfig#getMaxDepartedApplications
-   * threshold}.  If not, the status is "poor" health.
+  /**
+   * Checks to make sure that the number of application members of the distributed system that have
+   * left unexpected since the last evaluation is less than the
+   * {@linkplain DistributedSystemHealthConfig#getMaxDepartedApplications threshold}. If not, the
+   * status is "poor" health.
-        String s = LocalizedStrings.DistributedSystemHealth_THE_NUMBER_OF_APPLICATIONS_THAT_HAVE_LEFT_THE_DISTRIBUTED_SYSTEM_0_EXCEEDS_THE_THRESHOLD_1.toLocalizedString(new Object[] { Long.valueOf(this.crashedApplications), Long.valueOf(threshold)});
+        String s =
+            LocalizedStrings.DistributedSystemHealth_THE_NUMBER_OF_APPLICATIONS_THAT_HAVE_LEFT_THE_DISTRIBUTED_SYSTEM_0_EXCEEDS_THE_THRESHOLD_1
+                .toLocalizedString(
+                    new Object[] {Long.valueOf(this.crashedApplications), Long.valueOf(threshold)});
-        int kind = id.getVmKind();
-        switch (kind) {
+      int kind = id.getVmKind();
+      switch (kind) {
-        }
+      }
-  public void quorumLost(Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {
-  }
+  public void quorumLost(Set<InternalDistributedMember> failures,
+      List<InternalDistributedMember> remaining) {}
-  public void memberSuspect(InternalDistributedMember id,
-      InternalDistributedMember whoSuspected, String reason) {
-  }
-  
+  public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected,
+      String reason) {}
+

UPD66 UPD66 UPD66 UPD66 UPD66 MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66