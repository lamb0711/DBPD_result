Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright Copyright (c) 2000-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * $Id: DefaultQuery.java,v 1.1 2005/01/27 06:26:33 vaibhav Exp $
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.query.QueryException;
+import com.gemstone.gemfire.cache.query.QueryInvalidException;
-  public DefaultQuery(String queryString, Cache cache) {
+  public DefaultQuery(String queryString, Cache cache, boolean isForRemote) {
+    CompiledSelect cs = this.getSimpleSelect();
+    if(cs != null && !isForRemote && (cs.isGroupBy() || cs.isOrderBy())) {
+      QueryExecutionContext ctx = new QueryExecutionContext(null, cache);
+      try {
+        cs.computeDependencies(ctx);       
+      }catch(QueryException qe) {
+        throw new QueryInvalidException("",qe);
+      }
+    }
-        if(!isRemoteQuery() && !this.cache.getPdxReadSerialized() && result instanceof SelectResults) {
+        if(needsPDXDeserializationWrapper(true /* is query on PR*/) 
+            && result instanceof SelectResults ) {
-      if(!isRemoteQuery() && !this.cache.getPdxReadSerialized() && result instanceof SelectResults) {
+      if(needsPDXDeserializationWrapper(false /* is query on PR*/) && result instanceof SelectResults) {
+  //For Order by queries ,since they are already ordered by the comparator 
+  //&& it takes care of conversion, we do not have to wrap it in a wrapper
+  public boolean needsPDXDeserializationWrapper(boolean isQueryOnPR) {
+      if( !isRemoteQuery() && !this.cache.getPdxReadSerialized() ) {
+        return true;
+        /*if(isQueryOnPR) {
+          // if the query is on PR we need a top level pdx deserialization wrapper only in case of 
+          //order by query or non distinct query
+          CompiledSelect cs = this.getSimpleSelect();
+          if(cs != null) {
+            return cs.getOrderByAttrs() != null ;
+          }else {
+           return true; 
+          }
+        }else {
+          return true;
+        }*/
+      }else {
+        return false;
+      }
+  }
+ 
-      QueryExecutor root = null;
+      QueryExecutor other = null;
-
+          other = allPRs;
-        if (!colocated && root != null) {
+        if (!colocated) { 
-                  root.getName() }));
+                  other.getName() }));
-        root = eachPR;
-          && cs.getProjectionAttributes() == null && !cs.isDistinct()) {
+          && cs.getProjectionAttributes() == null && !cs.isDistinct()
+          && cs.getOrderByAttrs() == null
+          ) {
-  public void setKeepSerialized(boolean keepSerialized) {
+  private void setKeepSerialized(boolean keepSerialized) {

INS26 INS26 INS40 INS40 INS31 INS44 INS83 INS39 INS42 INS44 INS8 UPD83 INS39 INS42 INS60 INS25 INS39 INS42 INS25 INS43 INS59 INS27 INS8 MOV27 INS8 INS8 INS42 INS42 INS32 INS27 INS36 INS60 INS54 INS41 INS41 INS52 INS42 INS27 INS38 INS27 INS43 INS59 INS8 INS12 INS27 INS9 INS9 INS27 INS42 INS33 INS42 INS32 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS32 MOV62 MOV27 INS27 INS42 INS42 INS42 INS42 INS43 INS33 INS42 INS32 INS43 INS42 INS53 INS42 INS9 UPD42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS14 INS32 MOV62 MOV38 INS42 INS42 INS43 INS45 INS42 UPD42 MOV42 INS9 INS21 INS42 INS7 INS42 INS42 UPD42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21