Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  public static void getJsonFromPrimitiveBoolArray(JsonGenerator jg, boolean[] array, String pf) throws JsonGenerationException, IOException{
+
+  public static void getJsonFromPrimitiveBoolArray(JsonGenerator jg, boolean[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (boolean obj : array)
-    {
-      jg.writeBoolean(obj); 
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromPrimitiveByteArray(JsonGenerator jg, byte[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (byte obj : array)
-    {
-      jg.writeNumber(obj);   
+    for (boolean obj : array) {
+      jg.writeBoolean(obj);
-  public static void getJsonFromPrimitiveShortArray(JsonGenerator jg, short[] array, String pf) throws JsonGenerationException, IOException{
+  public static void getJsonFromPrimitiveByteArray(JsonGenerator jg, byte[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (short obj : array)
-    {
-      jg.writeNumber(obj);   
+    for (byte obj : array) {
+      jg.writeNumber(obj);
-  public static void getJsonFromPrimitiveIntArray(JsonGenerator jg, int[] array, String pf) throws JsonGenerationException, IOException{
+  public static void getJsonFromPrimitiveShortArray(JsonGenerator jg, short[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (int obj : array)
-    {
-      jg.writeNumber(obj);   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromPrimitiveLongArray(JsonGenerator jg, long[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (long obj : array)
-    {
-      jg.writeNumber(obj);   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromPrimitiveFloatArray(JsonGenerator jg, float[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (float obj : array)
-    {
-      jg.writeNumber(obj);   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromPrimitiveDoubleArray(JsonGenerator jg, double[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (double obj : array)
-    {
-      jg.writeNumber(obj);   
-    }
-    jg.writeEndArray();
-  }
-  
-  
-  public static void getJsonFromWrapperBoolArray(JsonGenerator jg, Boolean[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (Boolean obj : array)
-    {
-      jg.writeBoolean(obj.booleanValue());   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromWrapperByteArray(JsonGenerator jg, Byte[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (Byte obj : array)
-    {
-      jg.writeNumber(obj.byteValue());   
+    for (short obj : array) {
+      jg.writeNumber(obj);
-  public static void getJsonFromWrapperShortArray(JsonGenerator jg, Short[] array, String pf) throws JsonGenerationException, IOException{
+  public static void getJsonFromPrimitiveIntArray(JsonGenerator jg, int[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (Short obj : array)
-    {
-      jg.writeNumber(obj.shortValue());   
+    for (int obj : array) {
+      jg.writeNumber(obj);
-  public static void getJsonFromWrapperIntArray(JsonGenerator jg, Integer[] array, String pf) throws JsonGenerationException, IOException{
+  public static void getJsonFromPrimitiveLongArray(JsonGenerator jg, long[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (Integer obj : array)
-    {
-      jg.writeNumber(obj.intValue());   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromWrapperLongArray(JsonGenerator jg, Long[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (Long obj : array)
-    {
-      jg.writeNumber(obj.longValue());   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromWrapperFloatArray(JsonGenerator jg, Float[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (Float obj : array)
-    {
-      jg.writeNumber(obj.floatValue());   
-    }
-    jg.writeEndArray();
-  }
-  
-  public static void getJsonFromWrapperDoubleArray(JsonGenerator jg, Double[] array, String pf) throws JsonGenerationException, IOException{
-    jg.writeStartArray();
-    for (Double obj : array)
-    {
-      jg.writeNumber(obj.doubleValue());   
+    for (long obj : array) {
+      jg.writeNumber(obj);
-  public static void getJsonFromBigIntArray(JsonGenerator jg, BigInteger[] array, String pf) throws JsonGenerationException, IOException{
+  public static void getJsonFromPrimitiveFloatArray(JsonGenerator jg, float[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (BigInteger obj : array)
-    {
-      jg.writeNumber(obj);   
+    for (float obj : array) {
+      jg.writeNumber(obj);
-  
-  public static void getJsonFromBigDecimalArray(JsonGenerator jg, BigDecimal[] array, String pf) throws JsonGenerationException, IOException{
+
+  public static void getJsonFromPrimitiveDoubleArray(JsonGenerator jg, double[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (BigDecimal obj : array)
-    {
-      jg.writeNumber(obj);   
+    for (double obj : array) {
+      jg.writeNumber(obj);
-  
-  public static void getJsonFromStringArray(JsonGenerator jg, String[] array, String pf) throws JsonGenerationException, IOException{
+
+
+  public static void getJsonFromWrapperBoolArray(JsonGenerator jg, Boolean[] array, String pf)
+      throws JsonGenerationException, IOException {
-    for (String obj : array)
-    {
-      jg.writeString(obj);   
+    for (Boolean obj : array) {
+      jg.writeBoolean(obj.booleanValue());
-  
+
+  public static void getJsonFromWrapperByteArray(JsonGenerator jg, Byte[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Byte obj : array) {
+      jg.writeNumber(obj.byteValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromWrapperShortArray(JsonGenerator jg, Short[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Short obj : array) {
+      jg.writeNumber(obj.shortValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromWrapperIntArray(JsonGenerator jg, Integer[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Integer obj : array) {
+      jg.writeNumber(obj.intValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromWrapperLongArray(JsonGenerator jg, Long[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Long obj : array) {
+      jg.writeNumber(obj.longValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromWrapperFloatArray(JsonGenerator jg, Float[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Float obj : array) {
+      jg.writeNumber(obj.floatValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromWrapperDoubleArray(JsonGenerator jg, Double[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (Double obj : array) {
+      jg.writeNumber(obj.doubleValue());
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromBigIntArray(JsonGenerator jg, BigInteger[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (BigInteger obj : array) {
+      jg.writeNumber(obj);
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromBigDecimalArray(JsonGenerator jg, BigDecimal[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (BigDecimal obj : array) {
+      jg.writeNumber(obj);
+    }
+    jg.writeEndArray();
+  }
+
+  public static void getJsonFromStringArray(JsonGenerator jg, String[] array, String pf)
+      throws JsonGenerationException, IOException {
+    jg.writeStartArray();
+    for (String obj : array) {
+      jg.writeString(obj);
+    }
+    jg.writeEndArray();
+  }
+

