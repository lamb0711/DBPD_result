Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.InternalDataSerializer;
+import com.gemstone.gemfire.internal.Version;
+  /*TODO [DISTTX] Convert into flag*/
+  protected boolean isTransactionDistributed = false;
+    setIfTransactionDistributed();
+    setIfTransactionDistributed();
+    if (txState != null) {
+      // [DISTTX] Lets not throw this exception for Dist Tx
+      if (canStartRemoteTransaction() && txState.isRealDealLocal() && !txState.isDistTx()) {
+        //logger.error("sending rmt txId even though tx is local! txState=" + txState, new RuntimeException("STACK"));
+        throw new IllegalStateException("Sending remote txId even though transaction is local. This should never happen: txState=" + txState);
+      }
+    }
+    this.isTransactionDistributed = other.isTransactionDistributed;
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    // extra field post 9.0
+    if (InternalDataSerializer.getVersionForDataStream(in).compareTo(
+        Version.GFE_90) >= 0) {
+      this.isTransactionDistributed = in.readBoolean();
+    }
-
+ 
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
+    // extra field post 9.0
+    if (InternalDataSerializer.getVersionForDataStream(out).compareTo(
+        Version.GFE_90) >= 0) {
+      out.writeBoolean(this.isTransactionDistributed);
+    }
+  
+  protected final boolean _mayAddToMultipleSerialGateways(DistributionManager dm) {
+    try {
+      PartitionedRegion pr = PartitionedRegion.getPRFromId(this.regionId);
+      if (pr == null) {
+        return false;
+      }
+      return pr.notifiesMultipleSerialGateways();
+    } catch (PRLocallyDestroyedException e) {
+      return false;
+    } catch (CancelException ignore) {
+      return false;
+    }
+  }
+
+  
+  @Override
+  public boolean isTransactionDistributed() {
+    return this.isTransactionDistributed;
+  }
+  
+  /*
+   * For Distributed Tx
+   */
+  public void setTransactionDistributed(boolean isDistTx) {
+   this.isTransactionDistributed = isDistTx;
+  }
+  
+  /*
+   * For Distributed Tx
+   */
+  private void setIfTransactionDistributed() {
+    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    if (cache != null) {
+      if (cache.getTxManager() != null) {
+        this.isTransactionDistributed = cache.getTxManager().isDistributed();
+      }
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS9 INS21 INS21 INS25 INS21 INS25 INS25 INS43 INS42 INS54 INS42 INS41 INS39 INS42 INS21 INS60 INS25 INS32 INS32 INS27 INS8 INS7 INS27 INS8 INS27 INS8 INS42 INS8 INS12 INS12 INS22 INS7 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS33 INS25 INS22 INS40 INS32 INS34 INS21 INS32 INS34 INS21 INS60 INS25 INS41 INS44 INS8 INS44 INS8 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS27 INS8 INS52 INS42 INS32 INS42 INS40 INS7 INS32 INS42 INS40 INS32 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS41 INS43 INS42 INS41 INS52 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS38 INS53 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS9 INS42 INS9 INS32 INS33 INS21 INS42 INS42 INS42 INS32 INS14 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS22 INS9 INS42 INS42 INS7 INS42 INS42 INS43 INS27 INS52 INS42 INS22 INS32 INS42 INS45 INS42 INS52 INS42 INS32 INS42 INS42 INS42