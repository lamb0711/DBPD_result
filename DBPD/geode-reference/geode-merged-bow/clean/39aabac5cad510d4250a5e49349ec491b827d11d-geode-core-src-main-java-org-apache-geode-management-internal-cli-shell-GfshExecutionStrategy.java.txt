Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-import org.springframework.util.ReflectionUtils;
-import org.apache.geode.management.cli.CommandProcessingException;
+import org.apache.geode.management.internal.cli.remote.CommandExecutor;
- * Defines the {@link ExecutionStrategy} for commands that are executed in GemFire SHell (gfsh).
- * 
+ * Defines the {@link ExecutionStrategy} for commands that are executed in GemFire Shell (gfsh).
-  //////////////// ExecutionStrategy interface Methods Start ///////////////////
-  ///////////////////////// Implemented Methods ////////////////////////////////
-    Result result = null;
+    Result result;
-    try {
-      // check if it's a shell only command
-      if (isShellOnly(method)) {
-        Assert.notNull(parseResult, "Parse result required");
-        synchronized (mutex) {
-          Assert.isTrue(isReadyForCommands(),
-              "ProcessManagerHostedExecutionStrategy not yet ready for commands");
-          return ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(),
-              parseResult.getArguments());
-        }
-      }
+    // check if it's a shell only command
+    if (isShellOnly(method)) {
+      Assert.notNull(parseResult, "Parse result required");
+      synchronized (mutex) {
+        Assert.isTrue(isReadyForCommands(), "Not yet ready for commands");
-      // check if it's a GfshParseResult
-      if (!GfshParseResult.class.isInstance(parseResult)) {
-        throw new IllegalStateException("Configuration error!");
+        return new CommandExecutor().execute(parseResult);
-
-      result = executeOnRemote((GfshParseResult) parseResult);
-    } catch (NotAuthorizedException e) {
-      result = ResultBuilder
-          .createGemFireUnAuthorizedErrorResult("Unauthorized. Reason: " + e.getMessage());
-    } catch (JMXInvocationException | IllegalStateException e) {
-      Gfsh.getCurrentInstance().logWarning(e.getMessage(), e);
-    } catch (CommandProcessingException e) {
-      Gfsh.getCurrentInstance().logWarning(e.getMessage(), null);
-      Object errorData = e.getErrorData();
-      if (errorData != null && errorData instanceof Throwable) {
-        logWrapper.warning(e.getMessage(), (Throwable) errorData);
-      } else {
-        logWrapper.warning(e.getMessage());
-      }
-    } catch (Exception e) {
-      Gfsh.getCurrentInstance().logWarning("Unexpected exception occurred. " + e.getMessage(), e);
-      // Log other exceptions in gfsh log
-      logWrapper.warning("Unexpected error occurred while executing command : "
-          + ((GfshParseResult) parseResult).getUserInput(), e);
+
+    // check if it's a GfshParseResult
+    if (!GfshParseResult.class.isInstance(parseResult)) {
+      throw new IllegalStateException("Configuration error!");
+    }
+
+    result = executeOnRemote((GfshParseResult) parseResult);
-  //////////////// ExecutionStrategy interface Methods End /////////////////////
-   * @param parseResult
-   * 
-   * 
+    Path tempFile = null;
-      if (interceptor != null) {
-        Result preExecResult = interceptor.preExecution(parseResult);
-        if (Status.ERROR.equals(preExecResult.getStatus())) {
-          return preExecResult;
-        } else if (preExecResult instanceof FileResult) {
-          FileResult fileResult = (FileResult) preExecResult;
-          fileData = fileResult.toBytes();
-        }
-      } else {
+
+      if (interceptor == null) {
+
+      Result preExecResult = interceptor.preExecution(parseResult);
+      if (Status.ERROR.equals(preExecResult.getStatus())) {
+        return preExecResult;
+      }
+
+      // when the preExecution yields a FileResult, we will get the fileData out of it
+      if (preExecResult instanceof FileResult) {
+        FileResult fileResult = (FileResult) preExecResult;
+        fileData = fileResult.toBytes();
+      }
+      if (response == null) {
+        return ResultBuilder
+            .createBadResponseErrorResult("Response was null for: " + parseResult.getUserInput());
+      }
+      e.printStackTrace();
+      return ResultBuilder.createBadResponseErrorResult(
+          "Error occurred while executing \"" + parseResult.getUserInput() + "\" on manager.");
-    if (response == null) {
-      shell.logWarning("Response was null for: \"" + parseResult.getUserInput()
-          + "\". (gfsh.isConnected=" + shell.isConnectedAndReady() + ")", null);
-      return ResultBuilder.createBadResponseErrorResult(
-          " Error occurred while " + "executing \"" + parseResult.getUserInput() + "\" on manager. "
-              + "Please check manager logs for error.");
-    }
-
-    }
-
-    Path tempFile = null;
-    if (response instanceof Path) {
+    } else if (response instanceof Path) {
+    if (commandResult == null) {
+      commandResult = ResultBuilder
+          .createGemFireErrorResult("Unable to build commandResult using the remote response.");
+    }
+

MOV26 UPD40 MOV8 MOV25 MOV60 UPD66 INS60 MOV60 MOV41 MOV25 MOV43 INS59 MOV38 INS8 MOV25 INS42 MOV54 INS25 MOV60 INS25 MOV25 INS25 UPD42 INS21 INS27 MOV8 MOV32 MOV8 INS27 INS8 INS21 INS41 INS7 INS42 INS33 INS42 INS33 INS41 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS27 MOV42 UPD42 MOV42 INS45 UPD45 INS14 UPD42 MOV42 MOV42 INS42 INS42 INS27 INS45 MOV32 INS45 INS43 INS45 MOV32 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL65 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL33 DEL32 DEL21 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL32 DEL41