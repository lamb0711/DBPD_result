Extract tests to their own distributed test classes

- * 
+ *
+import java.io.IOException;
+
+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.internal.cache.tier.sockets.*;
+import com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Message;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Part;
+import com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-import com.gemstone.gemfire.cache.AttributesFactory;
-import com.gemstone.gemfire.cache.Region;
-
-import java.io.IOException;
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException {
-//    start = DistributionStats.getStatTime();
+    //    start = DistributionStats.getStatTime();
-      logger.debug("{}: Received create region request ({} bytes) from {} for parent region {} region {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), parentRegionName, regionName);
+      logger.debug("{}: Received create region request ({} bytes) from {} for parent region {} region {}", servConn.getName(), msg
+        .getPayloadLength(), servConn.getSocketString(), parentRegionName, regionName);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.CreateRegion_0_THE_INPUT_PARENT_REGION_NAME_FOR_THE_CREATE_REGION_REQUEST_IS_NULL, servConn.getName()));
+        logger.warn(LocalizedMessage.create(LocalizedStrings.CreateRegion_0_THE_INPUT_PARENT_REGION_NAME_FOR_THE_CREATE_REGION_REQUEST_IS_NULL, servConn
+          .getName()));
-        logger.warn(LocalizedMessage.create(LocalizedStrings.CreateRegion_0_THE_INPUT_REGION_NAME_FOR_THE_CREATE_REGION_REQUEST_IS_NULL, servConn.getName())); 
+        logger.warn(LocalizedMessage.create(LocalizedStrings.CreateRegion_0_THE_INPUT_REGION_NAME_FOR_THE_CREATE_REGION_REQUEST_IS_NULL, servConn
+          .getName()));
-      writeErrorResponse(msg, MessageType.CREATE_REGION_DATA_ERROR, errMessage,
-          servConn);
+      writeErrorResponse(msg, MessageType.CREATE_REGION_DATA_ERROR, errMessage, servConn);
+      return;
-    else {
-      Region parentRegion = crHelper.getRegion(parentRegionName);
-      if (parentRegion == null) {
-        String reason = LocalizedStrings.CreateRegion__0_WAS_NOT_FOUND_DURING_SUBREGION_CREATION_REQUEST.toLocalizedString(parentRegionName);
-        writeRegionDestroyedEx(msg, parentRegionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
-      }
-      else {
-        AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-        if (authzRequest != null) {
-          try {
-            authzRequest.createRegionAuthorize(parentRegionName + '/'
-                + regionName);
-          }
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
-        }
-        // Create or get the subregion
-        Region region = parentRegion.getSubregion(regionName);
-        if (region == null) {
-          AttributesFactory factory = new AttributesFactory(parentRegion
-              .getAttributes());
-          region = parentRegion.createSubregion(regionName, factory.create());
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Created region {}", servConn.getName(), region);
-          }
-        }
-        else {
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Retrieved region {}", servConn.getName(), region);
-          }
-        }
-        // Update the statistics and write the reply
-        // start = DistributionStats.getStatTime(); WHY ARE WE GETTING START AND
-        // NOT USING IT
-        // bserverStats.incLong(processDestroyTimeId,
-        // DistributionStats.getStatTime() - start);
-        writeReply(msg, servConn);
+    Region parentRegion = crHelper.getRegion(parentRegionName);
+    if (parentRegion == null) {
+      String reason = LocalizedStrings.CreateRegion__0_WAS_NOT_FOUND_DURING_SUBREGION_CREATION_REQUEST.toLocalizedString(parentRegionName);
+      writeRegionDestroyedEx(msg, parentRegionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    GeodeSecurityUtil.authorizeDataManage();
+
+    AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+    if (authzRequest != null) {
+      try {
+        authzRequest.createRegionAuthorize(parentRegionName + '/' + regionName);
+      } catch (NotAuthorizedException ex) {
+        writeException(msg, ex, false, servConn);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Sent create region response for parent region {} region {}", servConn.getName(), parentRegionName, regionName);
-        }
-        // bserverStats.incLong(writeDestroyResponseTimeId,
-        // DistributionStats.getStatTime() - start);
-        // bserverStats.incInt(destroyResponsesId, 1);
+        return;
+    // Create or get the subregion
+    Region region = parentRegion.getSubregion(regionName);
+    if (region == null) {
+      AttributesFactory factory = new AttributesFactory(parentRegion.getAttributes());
+      region = parentRegion.createSubregion(regionName, factory.create());
+      if (logger.isDebugEnabled()) {
+        logger.debug("{}: Created region {}", servConn.getName(), region);
+      }
+    } else {
+      if (logger.isDebugEnabled()) {
+        logger.debug("{}: Retrieved region {}", servConn.getName(), region);
+      }
+    }
+
+    // Update the statistics and write the reply
+    // start = DistributionStats.getStatTime(); WHY ARE WE GETTING START AND
+    // NOT USING IT
+    // bserverStats.incLong(processDestroyTimeId,
+    // DistributionStats.getStatTime() - start);
+    writeReply(msg, servConn);
+    servConn.setAsTrue(RESPONDED);
+    if (logger.isDebugEnabled()) {
+      logger.debug("{}: Sent create region response for parent region {} region {}", servConn.getName(), parentRegionName, regionName);
+    }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 MOV8 MOV60 MOV60 MOV60 MOV21 MOV60 MOV60 MOV21 MOV21 MOV25 INS25 MOV60 INS25 INS21 MOV27 MOV8 MOV27 MOV8 INS32 INS41 INS41 INS42 INS42 DEL25 DEL8 DEL25 DEL8