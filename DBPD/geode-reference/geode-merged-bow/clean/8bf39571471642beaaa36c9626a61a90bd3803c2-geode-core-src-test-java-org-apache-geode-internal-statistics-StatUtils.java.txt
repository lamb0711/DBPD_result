Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * final File expectedStatArchiveFile = new File(TestUtil.getResourcePath(getClass(), "StatArchiveWriterReaderJUnitTest_" + this.testName.getMethodName() + "_expected.gfs"));
+   * final File expectedStatArchiveFile = new File(TestUtil.getResourcePath(getClass(),
+   * "StatArchiveWriterReaderJUnitTest_" + this.testName.getMethodName() + "_expected.gfs"));
-  public static void compareStatArchiveFiles(final File expectedStatArchiveFile, final File actualStatArchiveFile) throws IOException {
+  public static void compareStatArchiveFiles(final File expectedStatArchiveFile,
+      final File actualStatArchiveFile) throws IOException {
-  public static Set<ResourceInst> findResourceInsts(final File archiveFile, final String specString) throws IOException {
+  public static Set<ResourceInst> findResourceInsts(final File archiveFile, final String specString)
+      throws IOException {
-  private static void addResourceInstsToSet(final File archiveFile, final Set<ResourceInst> resourceInsts) throws IOException {
-    StatArchiveReader reader = new StatArchiveReader(new File[] {archiveFile}, new StatSpec[]{}, true);
+  private static void addResourceInstsToSet(final File archiveFile,
+      final Set<ResourceInst> resourceInsts) throws IOException {
+    StatArchiveReader reader =
+        new StatArchiveReader(new File[] {archiveFile}, new StatSpec[] {}, true);
-  private static void addResourceInstsToSet(final File archiveFile, final String specString, final Set<ResourceInst> resourceInsts) throws IOException {
+  private static void addResourceInstsToSet(final File archiveFile, final String specString,
+      final Set<ResourceInst> resourceInsts) throws IOException {
-    StatArchiveReader reader = new StatArchiveReader(new File[] { archiveFile }, new StatSpec[] { statSpec }, true);
+    StatArchiveReader reader =
+        new StatArchiveReader(new File[] {archiveFile}, new StatSpec[] {statSpec}, true);
-    int byteCount = (int)file.length();
+    int byteCount = (int) file.length();

INS66 UPD66