GEODE-6291: change create mapping to define column and pdx field information  (#3155)

Create mapping now requires that the pdx class exists on the server.
It generates a FieldMapping definition for each column/field. It will load the pdx class and
generate a pdx type for it, failing if it can not do so.
If the pdx type field count does not match the table column count then it will fail.
The pdx field names can differ in case from the column names as long as only one field matches the column.

Authored-by: Benjamin Ross <bross@pivotal.io>
Authored-by: Darrel Schneider <dschneider@pivotal.io>

-import java.sql.Blob;
-import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
-import java.sql.SQLException;
-import java.sql.Types;
-
-import org.apache.geode.connectors.jdbc.JdbcConnectorException;
+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;
-import org.apache.geode.pdx.PdxInstance;
-import org.apache.geode.pdx.internal.PdxField;
-import org.apache.geode.pdx.internal.PdxType;
-import org.apache.geode.pdx.internal.TypeRegistry;
-class SqlToPdxInstanceCreator {
+public class SqlToPdxInstanceCreator {
-  private final ResultSet resultSet;
-  private final TableMetaDataView tableMetaData;
-  private final PdxInstanceFactory factory;
-  public SqlToPdxInstanceCreator(InternalCache cache, RegionMapping regionMapping,
-      ResultSet resultSet, TableMetaDataView tableMetaData) {
+  public SqlToPdxInstanceCreator(InternalCache cache, RegionMapping regionMapping) {
-    this.resultSet = resultSet;
-    this.tableMetaData = tableMetaData;
-    this.factory = createPdxInstanceFactory();
-  public PdxInstance create() throws SQLException {
-    if (!resultSet.next()) {
-      return null;
+  public SqlToPdxInstance create() {
+    SqlToPdxInstance result = new SqlToPdxInstance();
+    PdxInstanceFactory templateFactory = createPdxInstanceFactory();
+    for (FieldMapping columnMapping : regionMapping.getFieldMappings()) {
+      String columnName = columnMapping.getJdbcName();
+      String fieldName = columnMapping.getPdxName();
+      FieldType fieldType = FieldType.valueOf(columnMapping.getPdxType());
+      result.addMapping(columnName, fieldName, fieldType);
+      writeField(templateFactory, columnMapping, fieldName, fieldType);
-    TypeRegistry typeRegistry = cache.getPdxRegistry();
-    ResultSetMetaData metaData = resultSet.getMetaData();
-    final int columnCount = metaData.getColumnCount();
-    for (int i = 1; i <= columnCount; i++) {
-      String columnName = metaData.getColumnName(i);
-      String fieldName = regionMapping.getFieldNameForColumn(columnName, typeRegistry);
-      FieldType fieldType = getFieldType(typeRegistry, fieldName);
-      writeField(columnName, i, fieldName, fieldType);
-    }
-    if (resultSet.next()) {
-      throw new JdbcConnectorException(
-          "Multiple rows returned for query: " + resultSet.getStatement());
-    }
-    return factory.create();
+    result.setPdxTemplate(templateFactory.create());
+    return result;
-  /**
-   * @throws SQLException if the column value get fails
-   */
-  private void writeField(String columnName, int columnIndex, String fieldName, FieldType fieldType)
-      throws SQLException {
+  public static void writeField(PdxInstanceFactory factory, FieldMapping columnMapping,
+      String fieldName,
+      FieldType fieldType) {
-        factory.writeString(fieldName, resultSet.getString(columnIndex));
+        factory.writeString(fieldName, null);
-        char charValue = 0;
-        String columnValue = resultSet.getString(columnIndex);
-        if (columnValue != null && columnValue.length() > 0) {
-          charValue = columnValue.toCharArray()[0];
-        }
-        factory.writeChar(fieldName, charValue);
+        factory.writeChar(fieldName, (char) 0);
-        factory.writeShort(fieldName, resultSet.getShort(columnIndex));
+        factory.writeShort(fieldName, (short) 0);
-        factory.writeInt(fieldName, resultSet.getInt(columnIndex));
+        factory.writeInt(fieldName, 0);
-        factory.writeLong(fieldName, resultSet.getLong(columnIndex));
+        factory.writeLong(fieldName, 0L);
-        factory.writeFloat(fieldName, resultSet.getFloat(columnIndex));
+        factory.writeFloat(fieldName, 0);
-        factory.writeDouble(fieldName, resultSet.getDouble(columnIndex));
+        factory.writeDouble(fieldName, 0);
-        factory.writeByte(fieldName, resultSet.getByte(columnIndex));
+        factory.writeByte(fieldName, (byte) 0);
-        factory.writeBoolean(fieldName, resultSet.getBoolean(columnIndex));
+        factory.writeBoolean(fieldName, false);
-      case DATE: {
-        int columnType = this.tableMetaData.getColumnDataType(columnName);
-        java.util.Date sqlDate;
-        switch (columnType) {
-          case Types.DATE:
-            sqlDate = resultSet.getDate(columnIndex);
-            break;
-          case Types.TIME:
-          case Types.TIME_WITH_TIMEZONE:
-            sqlDate = resultSet.getTime(columnIndex);
-            break;
-          default:
-            sqlDate = resultSet.getTimestamp(columnIndex);
-            break;
-        }
-        java.util.Date pdxDate = null;
-        if (sqlDate != null) {
-          pdxDate = new java.util.Date(sqlDate.getTime());
-        }
-        factory.writeDate(fieldName, pdxDate);
+      case DATE:
+        factory.writeDate(fieldName, null);
-      }
-        byte[] byteData;
-        if (isBlobColumn(columnName)) {
-          byteData = getBlobData(columnIndex);
-        } else {
-          byteData = resultSet.getBytes(columnIndex);
-        }
-        factory.writeByteArray(fieldName, byteData);
+        factory.writeByteArray(fieldName, null);
-        factory.writeBooleanArray(fieldName,
-            convertJdbcObjectToJavaType(boolean[].class, resultSet.getObject(columnIndex)));
+        factory.writeBooleanArray(fieldName, null);
-        factory.writeCharArray(fieldName,
-            convertJdbcObjectToJavaType(char[].class, resultSet.getObject(columnIndex)));
+        factory.writeCharArray(fieldName, null);
-        factory.writeShortArray(fieldName,
-            convertJdbcObjectToJavaType(short[].class, resultSet.getObject(columnIndex)));
+        factory.writeShortArray(fieldName, null);
-        factory.writeIntArray(fieldName,
-            convertJdbcObjectToJavaType(int[].class, resultSet.getObject(columnIndex)));
+        factory.writeIntArray(fieldName, null);
-        factory.writeLongArray(fieldName,
-            convertJdbcObjectToJavaType(long[].class, resultSet.getObject(columnIndex)));
+        factory.writeLongArray(fieldName, null);
-        factory.writeFloatArray(fieldName,
-            convertJdbcObjectToJavaType(float[].class, resultSet.getObject(columnIndex)));
+        factory.writeFloatArray(fieldName, null);
-        factory.writeDoubleArray(fieldName,
-            convertJdbcObjectToJavaType(double[].class, resultSet.getObject(columnIndex)));
+        factory.writeDoubleArray(fieldName, null);
-        factory.writeStringArray(fieldName,
-            convertJdbcObjectToJavaType(String[].class, resultSet.getObject(columnIndex)));
+        factory.writeStringArray(fieldName, null);
-        factory.writeObjectArray(fieldName,
-            convertJdbcObjectToJavaType(Object[].class, resultSet.getObject(columnIndex)));
+        factory.writeObjectArray(fieldName, null);
-        factory.writeArrayOfByteArrays(fieldName,
-            convertJdbcObjectToJavaType(byte[][].class, resultSet.getObject(columnIndex)));
+        factory.writeArrayOfByteArrays(fieldName, null);
-      case OBJECT: {
-        Object v;
-        if (isBlobColumn(columnName)) {
-          v = getBlobData(columnIndex);
-        } else {
-          v = resultSet.getObject(columnIndex);
-          if (v instanceof java.util.Date) {
-            if (v instanceof java.sql.Date) {
-              java.sql.Date sqlDate = (java.sql.Date) v;
-              v = new java.util.Date(sqlDate.getTime());
-            } else if (v instanceof java.sql.Time) {
-              java.sql.Time sqlTime = (java.sql.Time) v;
-              v = new java.util.Date(sqlTime.getTime());
-            } else if (v instanceof java.sql.Timestamp) {
-              java.sql.Timestamp sqlTimestamp = (java.sql.Timestamp) v;
-              v = new java.util.Date(sqlTimestamp.getTime());
-            }
-          }
-        }
-        factory.writeObject(fieldName, v);
+      case OBJECT:
+        factory.writeObject(fieldName, null);
-      }
+      default:
+        throw new IllegalStateException("unhandled pdx field type " + fieldType);
-
-  private boolean isBlobColumn(String columnName) throws SQLException {
-    return this.tableMetaData.getColumnDataType(columnName) == Types.BLOB;
-  }
-
-  /**
-   * If the given column contains a Blob returns its data as a byte array;
-   * otherwise return null.
-   *
-   * @throws JdbcConnectorException if blob is too big to fit in a byte array
-   */
-  private byte[] getBlobData(int columnIndex) throws SQLException {
-    Blob blob = resultSet.getBlob(columnIndex);
-    if (blob == null) {
-      return null;
-    }
-    try {
-      long blobLength = blob.length();
-      if (blobLength > Integer.MAX_VALUE) {
-        throw new JdbcConnectorException(
-            "Blob of length " + blobLength + " is too big to be converted to a byte array.");
-      }
-      return blob.getBytes(1, (int) blobLength);
-    } finally {
-      blob.free();
-    }
-  }
-
-  private <T> T convertJdbcObjectToJavaType(Class<T> javaType, Object jdbcObject) {
-    try {
-      return javaType.cast(jdbcObject);
-    } catch (ClassCastException classCastException) {
-      throw JdbcConnectorException.createException("Could not convert "
-          + jdbcObject.getClass().getTypeName() + " to " + javaType.getTypeName(),
-          classCastException);
-    }
-  }
-
-  private FieldType getFieldType(TypeRegistry typeRegistry, String fieldName) {
-    String pdxClassName = regionMapping.getPdxName();
-    PdxType pdxType = typeRegistry.getPdxTypeForField(fieldName, pdxClassName);
-    if (pdxType != null) {
-      PdxField pdxField = pdxType.getPdxField(fieldName);
-      if (pdxField != null) {
-        return pdxField.getFieldType();
-      }
-    }
-    throw new JdbcConnectorException("Could not find PdxType for field " + fieldName
-        + ". Add class " + pdxClassName + " with " + fieldName + " to pdx registry.");
-  }

UPD40 INS83 INS42 INS31 UPD43 INS8 UPD83 MOV83 INS83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 UPD42 INS60 INS60 INS70 INS21 MOV41 UPD43 UPD42 INS43 UPD42 INS50 INS43 INS59 MOV43 MOV59 INS44 INS32 INS8 INS32 INS42 UPD42 INS42 MOV42 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 INS21 INS10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV49 INS21 INS10 INS49 INS53 UPD42 MOV42 INS42 INS14 UPD42 MOV32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV60 MOV60 MOV60 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 MOV32 MOV14 INS43 UPD42 MOV42 MOV43 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 INS33 INS11 INS11 INS34 INS34 INS34 INS34 INS11 INS9 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 UPD43 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 INS39 INS34 INS39 INS34 INS39 INS34 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL38 DEL33 DEL41 DEL8 DEL25 DEL43 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL32 DEL42 DEL43 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL39 DEL85 DEL85 DEL5 DEL57 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL34 DEL2 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL59 DEL60 DEL42 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL40 DEL49 DEL40 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL50 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL21 DEL10 DEL8 DEL39 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL43 DEL62 DEL42 DEL40 DEL43 DEL62 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL40 DEL43 DEL62 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL40 DEL43 DEL62 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL25 DEL21 DEL10 DEL8 DEL50 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL40 DEL27 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL34 DEL39 DEL42 DEL11 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL53 DEL8 DEL31