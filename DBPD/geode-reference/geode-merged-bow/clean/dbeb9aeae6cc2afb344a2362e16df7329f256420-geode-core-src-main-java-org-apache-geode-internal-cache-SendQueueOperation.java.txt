Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  //private ReplyProcessor21 processor = null;
+  // private ReplyProcessor21 processor = null;
-   * Returns true if distribution successful. Also modifies message list by
-   * removing messages sent to the required role.
+   * Returns true if distribution successful. Also modifies message list by removing messages sent
+   * to the required role.
-    this.r.getCachePerfStats().incReliableQueuedOps(- l.size());
+    this.r.getCachePerfStats().incReliableQueuedOps(-l.size());
-   * A batch of queued messages. Once they are processed on the other side
-   * an ack is sent.
+   * A batch of queued messages. Once they are processed on the other side an ack is sent.
-  public static final class SendQueueMessage
-    extends SerialDistributionMessage
-    implements MessageWithReply
-  {
+  public static final class SendQueueMessage extends SerialDistributionMessage
+      implements MessageWithReply {
+
+
+
+
+
-        GemFireCacheImpl gfc = (GemFireCacheImpl)CacheFactory.getInstance(dm.getSystem());
+        GemFireCacheImpl gfc = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
-            QueuedOperation op = (QueuedOperation)it.next();
+            QueuedOperation op = (QueuedOperation) it.next();
-    
+
-        for (int i=0; i < opCount; i++) {
+        for (int i = 0; i < opCount; i++) {
-    
+
-        for (int i=0; i < opCount; i++) {
-          QueuedOperation op = (QueuedOperation)this.ops.get(i);
+        for (int i = 0; i < opCount; i++) {
+          QueuedOperation op = (QueuedOperation) this.ops.get(i);

UPD66 UPD66 UPD66 DEL66