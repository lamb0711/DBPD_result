Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2005-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  
+
+  public static SelectResults createResultCollection(ExecutionContext context, ObjectType elementType) {
+    return context.isDistinct() ? new ResultsSet(elementType) :
+      new ResultsBag(elementType, context.getCachePerfStats());
+  }
+  
+  public static SelectResults createStructCollection(ExecutionContext context, StructType elementType) {
+    return context.isDistinct() ? new StructSet(elementType) :
+      new StructBag(elementType, context.getCachePerfStats()) ;
+  }
+  
+  public static SelectResults createResultCollection(boolean distinct, ObjectType elementType,
+      ExecutionContext context) {
+    return distinct ? new ResultsSet(elementType) :
+      new ResultsBag(elementType, context.getCachePerfStats());
+  }
+  
+  public static SelectResults createStructCollection(boolean distinct, StructType elementType, 
+      ExecutionContext context) {
+    return distinct ? new StructSet(elementType) :
+      new StructBag(elementType, context.getCachePerfStats()) ;
+  }
+  
-    ResultsBag rs = new ResultsBag(small,
-                                   contextOrNull == null ?
-                                   null : contextOrNull.getCachePerfStats());
+    
+    SelectResults rs ;
+    if(contextOrNull != null) {
+        rs =  contextOrNull.isDistinct() ? new ResultsSet(small) :new ResultsBag(small,
+            contextOrNull.getCachePerfStats());
+    }else {
+      rs =new ResultsBag(small,null);
+    }
+    
-    ResultsBag rs = new ResultsBag(large, contextOrNull == null ?
-                                   null : contextOrNull.getCachePerfStats());
-    for (Iterator itr = small.iterator(); itr.hasNext(); ) {
+    SelectResults rs;
+    if(contextOrNull != null) {
+      rs =  contextOrNull.isDistinct() ? new ResultsSet(large) :new ResultsBag(large,
+          contextOrNull.getCachePerfStats());
+    }else {
+      rs =new ResultsBag(large, null);
+    }
+    
+   for (Iterator itr = small.iterator(); itr.hasNext(); ) {
-        returnSet = new StructBag((StructTypeImpl) type, context.getCachePerfStats());
+        returnSet = QueryUtils.createStructCollection(context,(StructTypeImpl) type) ;
-        return new ResultsBag(type, context.getCachePerfStats());
+        return QueryUtils.createResultCollection(context, type);
-      returnSet = new StructBag(
-          (StructTypeImpl) createStructTypeForRuntimeIterators(finalList),
-                                context.getCachePerfStats());
+      StructType structType = createStructTypeForRuntimeIterators(finalList);
+      returnSet = QueryUtils.createStructCollection(context, structType);
-        if (select) ((StructBag) returnSet).addFieldValues(values);
+        if (select) {
+          
+            ((StructFields) returnSet).addFieldValues(values);
+          
+        }
+    boolean useLinkedDataStructure = false; 
+    boolean nullValuesAtStart = true;
+    Boolean orderByClause = (Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);
+    if(orderByClause != null && orderByClause.booleanValue()) {
+      List orderByAttrs = (List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);        
+      useLinkedDataStructure = orderByAttrs.size()==1; 
+      nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
+    }
-      returnSet = new ResultsBag(
-          ((RuntimeIterator) finalItrs.iterator().next()).getElementType(),
-                                 context.getCachePerfStats());
+      ObjectType resultType = ((RuntimeIterator) finalItrs.iterator().next()).getElementType();
+      if (useLinkedDataStructure) {
+        returnSet = context.isDistinct() ? new LinkedResultSet(resultType): 
+          new SortedResultsBag(resultType, nullValuesAtStart); 
+      } else {
+        returnSet =QueryUtils.createResultCollection(context, resultType);
+      }
+    
-      returnSet = new StructBag(
-          (StructTypeImpl) createStructTypeForRuntimeIterators(finalItrs),
-                                context.getCachePerfStats());
+      StructTypeImpl resultType =  (StructTypeImpl) createStructTypeForRuntimeIterators(finalItrs);
+      if(useLinkedDataStructure) {
+        returnSet = context.isDistinct() ? new LinkedStructSet(resultType)
+        : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
+      }else {
+        returnSet = QueryUtils.createStructCollection(context, resultType);
+      }
+      
+        boolean isOrdered = resultSet.getCollectionType().isOrdered();
+        StructTypeImpl elementType = (StructTypeImpl)resultSet.getCollectionType().getElementType();
+        //TODO:Asif Optimize the LinkedStructSet implementation so that
+        // Object[] can be added rather than Struct
+        
-          ((StructBag) resultSet).addFieldValues(values);
+          if(isOrdered) {
+            //((LinkedStructSet) resultSet).add(new StructImpl(elementType, values));
+            // Can be LinkedStructSet or SortedResultsBag ( containing underlying LinkedHashMap)
+            resultSet.add(new StructImpl(elementType, values));
+          }else {
+            
+              ((StructFields) resultSet).addFieldValues(values);
+            
+          }
-      SelectResults returnSet = new StructBag(
-          (StructTypeImpl) createStructTypeForRuntimeIterators(finalList),
-                                              context.getCachePerfStats());
+      StructType stype = createStructTypeForRuntimeIterators(finalList);
+      SelectResults returnSet = QueryUtils.createStructCollection(context, stype) ;
-      SelectResults returnSet = new StructBag(
-          (StructTypeImpl) createStructTypeForRuntimeIterators(finalList),
-                                              context.getCachePerfStats());
+      StructType stype = createStructTypeForRuntimeIterators(finalList);
+      SelectResults returnSet = QueryUtils.createStructCollection(context, stype) ;
-        singlUsblIndxRes = new StructBag(
-            (StructTypeImpl) singlUsblIndxResType,
-                                         context.getCachePerfStats());
+        singlUsblIndxRes = QueryUtils.createStructCollection(context,(StructTypeImpl) singlUsblIndxResType);
-        singlUsblIndxRes = new ResultsBag(singlUsblIndxResType,
-                                          context.getCachePerfStats());
+        singlUsblIndxRes = QueryUtils.createResultCollection(context, singlUsblIndxResType);
-    SelectResults returnSet = new StructBag(
-        (StructTypeImpl) createStructTypeForRuntimeIterators(totalFinalList),
-                                            context.getCachePerfStats());
+    StructType stype = createStructTypeForRuntimeIterators(totalFinalList);
+    SelectResults returnSet = QueryUtils.createStructCollection(context, stype) ; 
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if (useLinkedSet) {
-          checkSet = new LinkedStructSet((StructTypeImpl) checkType);
+        if (useLinkedDataStructure) {
+          checkSet = context.isDistinct() ? new LinkedStructSet((StructTypeImpl) checkType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)checkType, nullValuesAtStart);
-          checkSet = new StructBag((StructTypeImpl) checkType,
-                                 context.getCachePerfStats());
+          checkSet = QueryUtils.createStructCollection(context, (StructTypeImpl)checkType) ;
-        if (useLinkedSet) {
-          checkSet = new LinkedResultSet(checkType); 
+        if (useLinkedDataStructure) {
+          checkSet = context.isDistinct() ? new LinkedResultSet(checkType) :
+            new SortedResultsBag(checkType, nullValuesAtStart); 
-          checkSet = new ResultsBag(checkType,
-                                  context.getCachePerfStats());
+          checkSet = QueryUtils.createResultCollection(context, checkType) ;

INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 MOV8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS41 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS25 INS60 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS8 INS43 INS59 INS32 INS14 INS14 INS32 INS14 MOV14 INS42 INS14 MOV14 INS42 INS14 MOV14 INS42 INS42 MOV42 MOV33 INS21 INS21 INS42 INS42 INS42 INS33 INS21 INS21 INS60 INS42 INS9 INS42 INS9 INS42 INS42 INS11 INS27 INS32 INS60 INS21 INS21 INS60 INS25 INS60 INS25 INS60 INS42 INS42 MOV32 INS32 INS60 INS42 INS42 INS43 INS42 MOV43 INS42 MOV32 INS42 INS42 INS43 INS42 INS42 INS43 INS42 MOV43 UPD42 INS43 INS42 INS42 INS7 INS7 INS7 INS7 INS8 INS43 INS59 INS43 INS32 INS42 INS33 INS42 INS42 INS43 INS59 INS7 INS7 INS43 INS59 INS42 MOV8 INS8 MOV43 INS59 INS42 MOV8 INS8 INS43 INS59 INS43 INS60 INS60 INS42 INS42 MOV42 UPD42 MOV42 INS39 INS59 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS14 INS42 INS16 INS42 INS14 INS41 INS42 INS42 MOV32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS11 INS42 INS27 INS42 INS38 INS42 INS42 MOV32 INS21 INS42 MOV11 INS21 INS60 INS60 INS42 INS42 MOV32 INS42 INS32 UPD43 MOV43 INS59 MOV43 MOV59 UPD42 INS42 INS9 INS21 INS32 INS14 INS14 MOV43 INS42 INS33 INS32 INS14 INS14 MOV43 MOV42 INS33 INS32 INS42 INS42 INS42 INS42 INS8 INS43 INS32 INS32 INS34 INS32 INS7 INS7 INS39 INS59 MOV43 INS59 INS8 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 INS42 MOV32 INS32 INS7 UPD42 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 MOV32 INS42 INS42 INS42 INS43 INS42 INS43 INS42 MOV32 MOV42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS36 INS42 INS16 INS42 INS32 INS16 INS42 INS32 INS42 INS32 INS42 INS11 INS25 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 INS42 INS38 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 MOV11 MOV32 INS11 INS32 INS14 INS14 INS42 INS42 INS42 INS42 INS32 INS14 INS14 INS42 INS42 INS42 INS42 INS32 INS42 MOV43 INS32 INS42 INS8 MOV8 INS32 INS32 INS32 INS43 INS32 INS42 INS42 INS43 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS43 INS42 INS74 INS11 INS42 INS42 INS42 INS32 INS42 INS21 INS42 INS42 MOV42 MOV11 INS42 INS42 MOV42 UPD42 MOV42 INS36 INS42 INS16 INS32 INS16 INS32 INS42 INS42 INS42 INS34 INS42 UPD42 INS42 INS43 INS43 MOV43 INS42 INS42 INS42 INS32 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 UPD42 MOV42 UPD43 INS42 UPD42 MOV42 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS74 MOV11 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS42 INS42 UPD43 INS42 INS42 UPD42 DEL11 DEL42 DEL42 DEL27 DEL33 DEL16 DEL14 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL33 DEL16 DEL14 DEL59 DEL60 DEL21 DEL14 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43 DEL11 DEL32 DEL14 DEL42 DEL43 DEL11 DEL32 DEL14 DEL60 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL11 DEL32 DEL14 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL32 DEL14