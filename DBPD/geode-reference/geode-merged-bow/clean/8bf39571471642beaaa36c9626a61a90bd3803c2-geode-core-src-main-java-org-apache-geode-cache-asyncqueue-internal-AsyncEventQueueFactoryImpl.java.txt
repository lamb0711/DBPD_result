Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-   * Used internally to pass the attributes from this factory to the real
-   * GatewaySender it is creating.
+   * Used internally to pass the attributes from this factory to the real GatewaySender it is
+   * creating.
-  
+
-  
-  
+
+
-  
+
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public AsyncEventQueueFactory removeGatewayEventFilter(
-      GatewayEventFilter filter) {
+  public AsyncEventQueueFactory removeGatewayEventFilter(GatewayEventFilter filter) {
+
-  
+
-  
-  public AsyncEventQueueFactory addAsyncEventListener(
-      AsyncEventListener listener) {
+
+  public AsyncEventQueueFactory addAsyncEventListener(AsyncEventListener listener) {
-    
+
-      
-      //TODO: Suranjan .separate asynceventqueue from gatewaysender
-      //GatewaySenderFactory senderFactory = this.cache.createGatewaySenderFactory();
-      //senderFactory.setMaximumQueueMemory(attrs.getMaximumQueueMemory());
-      //senderFactory.setBatchSize(attrs.getBatchSize());
-      //senderFactory.setBatchTimeInterval(attrs.getBatchTimeInterval());
-      //if (attrs.isPersistenceEnabled()) {
-        //senderFactory.setPersistenceEnabled(true);
-      //}
-      //senderFactory.setDiskStoreName(attrs.getDiskStoreName());
-      //senderFactory.setDiskSynchronous(attrs.isDiskSynchronous());
-      //senderFactory.setBatchConflationEnabled(attrs.isBatchConflationEnabled());
-      //senderFactory.setParallel(attrs.isParallel());
-      //senderFactory.setDispatcherThreads(attrs.getDispatcherThreads());
-      //if OrderPolicy is not null, set it, otherwise, let the default OrderPolicy take the charge
-      //if (attrs.getOrderPolicy() != null) {
-    	//senderFactory.setOrderPolicy(attrs.getOrderPolicy());
-      //}
-      //for (GatewayEventFilter filter : attrs.eventFilters) {
-        //senderFactory.addGatewayEventFilter(filter);
-      //}
-      //senderFactory.setGatewayEventSubstitutionFilter(attrs.getGatewayEventSubstitutionFilter());
-      //Type cast to GatewaySenderFactory implementation impl to add the async event listener 
-      //and set the isForInternalUse to true. These methods are not exposed on GatewaySenderFactory
-      //GatewaySenderFactory factoryImpl = (GatewaySenderFactoryImpl) senderFactory;
-      //senderFactory.setForInternalUse(true);
-      //senderFactory.addAsyncEventListener(listener);
-      //senderFactory.setBucketSorted(attrs.isBucketSorted());
-      // add member id to differentiate between this region and the redundant bucket 
-      // region created for this queue. 
-      //GatewaySender sender = 
-        //  senderFactory.create(
-          //  AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId(asyncQueueId));
+
+      // TODO: Suranjan .separate asynceventqueue from gatewaysender
+      // GatewaySenderFactory senderFactory = this.cache.createGatewaySenderFactory();
+      // senderFactory.setMaximumQueueMemory(attrs.getMaximumQueueMemory());
+      // senderFactory.setBatchSize(attrs.getBatchSize());
+      // senderFactory.setBatchTimeInterval(attrs.getBatchTimeInterval());
+      // if (attrs.isPersistenceEnabled()) {
+      // senderFactory.setPersistenceEnabled(true);
+      // }
+      // senderFactory.setDiskStoreName(attrs.getDiskStoreName());
+      // senderFactory.setDiskSynchronous(attrs.isDiskSynchronous());
+      // senderFactory.setBatchConflationEnabled(attrs.isBatchConflationEnabled());
+      // senderFactory.setParallel(attrs.isParallel());
+      // senderFactory.setDispatcherThreads(attrs.getDispatcherThreads());
+      // if OrderPolicy is not null, set it, otherwise, let the default OrderPolicy take the charge
+      // if (attrs.getOrderPolicy() != null) {
+      // senderFactory.setOrderPolicy(attrs.getOrderPolicy());
+      // }
+      // for (GatewayEventFilter filter : attrs.eventFilters) {
+      // senderFactory.addGatewayEventFilter(filter);
+      // }
+      // senderFactory.setGatewayEventSubstitutionFilter(attrs.getGatewayEventSubstitutionFilter());
+      // Type cast to GatewaySenderFactory implementation impl to add the async event listener
+      // and set the isForInternalUse to true. These methods are not exposed on GatewaySenderFactory
+      // GatewaySenderFactory factoryImpl = (GatewaySenderFactoryImpl) senderFactory;
+      // senderFactory.setForInternalUse(true);
+      // senderFactory.addAsyncEventListener(listener);
+      // senderFactory.setBucketSorted(attrs.isBucketSorted());
+      // add member id to differentiate between this region and the redundant bucket
+      // region created for this queue.
+      // GatewaySender sender =
+      // senderFactory.create(
+      // AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId(asyncQueueId));
-      GatewaySender sender = create(AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId(asyncQueueId));
+      GatewaySender sender =
+          create(AsyncEventQueueImpl.getSenderIdFromAsyncEventQueueId(asyncQueueId));
-  
+
-    if(this.attrs.getDispatcherThreads() <= 0) {
+    if (this.attrs.getDispatcherThreads() <= 0) {
-    
+
-      
+
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-    }
-    else {
-//      if (this.attrs.getOrderPolicy() != null) {
-//        if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
-//          throw new AsyncEventQueueConfigurationException(
-//              LocalizedStrings.AsyncEventQueue_INVALID_ORDER_POLICY_CONCURRENCY_0
-//                  .toLocalizedString(id));
-//        }
-//      }
+    } else {
+      // if (this.attrs.getOrderPolicy() != null) {
+      // if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
+      // throw new AsyncEventQueueConfigurationException(
+      // LocalizedStrings.AsyncEventQueue_INVALID_ORDER_POLICY_CONCURRENCY_0
+      // .toLocalizedString(id));
+      // }
+      // }
-         this.attrs.policy = GatewaySender.DEFAULT_ORDER_POLICY;
+        this.attrs.policy = GatewaySender.DEFAULT_ORDER_POLICY;
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-  
+
-    this.attrs.isBucketSorted = ((AsyncEventQueueCreation)asyncQueueCreation).isBucketSorted();
+    this.attrs.isBucketSorted = ((AsyncEventQueueCreation) asyncQueueCreation).isBucketSorted();
+
+

UPD66 UPD66