GEODE-1570: add a test to verify rest security with SSL.

-import org.apache.http.HttpEntity;
-import org.apache.http.client.AuthCache;
-import org.apache.http.client.ClientProtocolException;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.BasicAuthCache;
-import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
-import org.junit.Assert;
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.net.MalformedURLException;
+import java.security.KeyStore;
+import java.security.SecureRandom;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
-
-  public final static String PROTOCOL = "http";
+  private String protocol = "http";
+  private boolean useHttps = false;
+  private KeyStore keyStore;
-  public HttpResponse doHEAD(String query, String username, String password)
-      throws MalformedURLException {
-    HttpHead httpHead = new HttpHead(CONTEXT + query);
-    return doRequest(httpHead, username, password);
-  }
-
-  public HttpResponse doPost(String query, String username, String password, String body)
-      throws MalformedURLException {
-    HttpPost httpPost = new HttpPost(CONTEXT + query);
-    httpPost.addHeader("content-type", "application/json");
-    httpPost.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
-    return doRequest(httpPost, username, password);
-  }
-
-  public HttpResponse doPut(String query, String username, String password, String body)
-      throws MalformedURLException {
-    HttpPut httpPut = new HttpPut(CONTEXT + query);
-    httpPut.addHeader("content-type", "application/json");
-    httpPut.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
-    return doRequest(httpPut, username, password);
-  }
-
-  public HttpResponse doGet(String uri, String username, String password)
-      throws MalformedURLException {
-    HttpGet getRequest = new HttpGet(CONTEXT + uri);
-    return doRequest(getRequest, username, password);
-  }
-
-  public HttpResponse doGetRequest(String url) throws MalformedURLException {
-    HttpGet getRequest = new HttpGet(url);
-    return doRequest(getRequest, null, null);
-  }
-
-
-  public HttpResponse doDelete(String uri, String username, String password)
-      throws MalformedURLException {
-    HttpDelete httpDelete = new HttpDelete(CONTEXT + uri);
-    return doRequest(httpDelete, username, password);
+  public GeodeRestClient(String bindAddress, int restPort, boolean useHttps) {
+    if (useHttps) {
+      this.protocol = "https";
+      this.useHttps = true;
+    } else {
+      this.protocol = "http";
+      this.useHttps = false;
+    }
+    this.bindAddress = bindAddress;
+    this.restPort = restPort;
-   *
+   * 
-   *
+  public HttpResponse doHEAD(String query, String username, String password) throws Exception {
+    HttpHead httpHead = new HttpHead(CONTEXT + query);
+    return doRequest(httpHead, username, password);
+  }
+
+  public HttpResponse doPost(String query, String username, String password, String body)
+      throws Exception {
+    HttpPost httpPost = new HttpPost(CONTEXT + query);
+    httpPost.addHeader("content-type", "application/json");
+    httpPost.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
+    return doRequest(httpPost, username, password);
+  }
+
+  public HttpResponse doPut(String query, String username, String password, String body)
+      throws Exception {
+    HttpPut httpPut = new HttpPut(CONTEXT + query);
+    httpPut.addHeader("content-type", "application/json");
+    httpPut.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
+    return doRequest(httpPut, username, password);
+  }
+
+  public HttpResponse doGet(String uri, String username, String password) throws Exception {
+    HttpGet getRequest = new HttpGet(CONTEXT + uri);
+    return doRequest(getRequest, username, password);
+  }
+
+  public HttpResponse doGetRequest(String url) throws Exception {
+    HttpGet getRequest = new HttpGet(url);
+    return doRequest(getRequest, null, null);
+  }
+
+  public HttpResponse doDelete(String uri, String username, String password) throws Exception {
+    HttpDelete httpDelete = new HttpDelete(CONTEXT + uri);
+    return doRequest(httpDelete, username, password);
+  }
+
-      throws MalformedURLException {
-    HttpHost targetHost = new HttpHost(bindAddress, restPort, PROTOCOL);
-    CloseableHttpClient httpclient = HttpClients.custom().build();
+      throws Exception {
+    HttpHost targetHost = new HttpHost(bindAddress, restPort, protocol);
+
+    HttpClientBuilder clientBuilder = HttpClients.custom();
-    // if username is null, do not put in authentication
+
+    // configures the clientBuilder and clientContext
-      httpclient = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();
-      AuthCache authCache = new BasicAuthCache();
-      BasicScheme basicAuth = new BasicScheme();
-      authCache.put(targetHost, basicAuth);
-      clientContext.setCredentialsProvider(credsProvider);
-      clientContext.setAuthCache(authCache);
+      clientBuilder.setDefaultCredentialsProvider(credsProvider);
-    try {
-      return httpclient.execute(targetHost, request, clientContext);
-    } catch (ClientProtocolException e) {
-      e.printStackTrace();
-      Assert.fail("Rest GET should not have thrown ClientProtocolException!");
-    } catch (IOException e) {
-      e.printStackTrace();
-      Assert.fail("Rest GET Request should not have thrown IOException!");
+    if (useHttps) {
+      SSLContext ctx = SSLContext.getInstance("TLS");
+      ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()},
+          new SecureRandom());
+      clientBuilder.setSSLContext(ctx);
+      clientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());
-    return null;
+
+    return clientBuilder.build().execute(targetHost, request, clientContext);
+  }
+
+  private static class DefaultTrustManager implements X509TrustManager {
+
+    @Override
+    public void checkClientTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {
+    }
+
+    @Override
+    public void checkServerTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {
+    }
+
+    @Override
+    public X509Certificate[] getAcceptedIssuers() {
+      return null;
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS55 UPD83 MOV83 MOV43 INS59 UPD83 MOV83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 UPD43 MOV43 INS8 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS42 INS45 INS42 INS9 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS25 INS21 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV60 INS60 MOV60 MOV25 INS25 MOV41 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS5 INS42 INS8 INS42 INS42 INS8 INS8 INS7 INS7 MOV43 UPD43 MOV43 INS59 INS42 INS8 INS42 INS5 UPD42 MOV42 INS43 INS42 INS42 INS42 INS5 INS42 UPD43 MOV43 UPD42 MOV42 INS42 INS42 INS43 INS85 MOV41 INS21 INS21 INS21 INS21 INS22 INS42 INS22 INS42 UPD42 UPD42 MOV42 MOV32 INS60 INS21 INS21 INS21 INS32 INS43 INS85 INS42 INS43 INS85 UPD42 INS42 INS7 INS7 INS7 INS7 INS52 INS42 INS52 INS42 MOV43 UPD42 INS43 INS59 INS32 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS22 INS45 INS22 INS9 INS22 INS45 INS22 INS9 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS3 INS3 INS14 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS5 INS34 INS5 INS4 INS43 INS43 INS43 INS85 INS43 INS85 INS14 INS42 INS42 INS42 INS42 INS43 INS42 DEL83 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL32 DEL59 DEL60 DEL8 DEL43 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31