Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.internal.cache.KeyWithRegionContext;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
- * @since 6.0
+ * @since GemFire 6.0
-  protected static final short FETCH_FROM_HDFS = (SKIP_CALLBACKS << 1);
-  //using the left most bit for IS_PUT_DML, the last available bit
-  protected static final short IS_PUT_DML = (short) (FETCH_FROM_HDFS << 1);
-  /** whether this operation should fetch oldValue from HDFS */
-  private boolean fetchFromHDFS;
-  
-  private boolean isPutDML;
-      boolean posDup, boolean skipCallbacks, Object callbackArg, boolean fetchFromHDFS, boolean isPutDML) {
+      boolean posDup, boolean skipCallbacks, Object callbackArg) {
-    this.fetchFromHDFS = fetchFromHDFS;
-    this.isPutDML = isPutDML; 
-      // get the "keyRequiresRegionContext" flag from first element assuming
-      // all key objects to be uniform
-      final boolean requiresRegionContext =
-        (this.putAllPRData[0].getKey() instanceof KeyWithRegionContext);
-        putAllPRData[i].toData(out, requiresRegionContext);
+        putAllPRData[i].toData(out);
-    if (this.fetchFromHDFS) s |= FETCH_FROM_HDFS;
-    if (this.isPutDML) s |= IS_PUT_DML;
-    this.fetchFromHDFS = ((s & FETCH_FROM_HDFS) != 0);
-    this.isPutDML = ((s & IS_PUT_DML) != 0);
+  @Retained
-    EntryEventImpl ev = EntryEventImpl.create(r, 
+    @Retained EntryEventImpl ev = EntryEventImpl.create(r, 
-    EntryEventImpl baseEvent = null;
+    @Released EntryEventImpl baseEvent = null;
-    final boolean keyRequiresRegionContext = r.keyRequiresRegionContext();
-      if (keyRequiresRegionContext) {
-        ((KeyWithRegionContext)keys[i]).setRegionContext(r);
-      }
-            EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+            @Released EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
-            // set the fetchFromHDFS flag
-            ev.setFetchFromHDFS(this.fetchFromHDFS);
-            
-        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
+  @Retained
-      boolean posDup, boolean skipCallbacks, boolean isPutDML) {
+      boolean posDup, boolean skipCallbacks) {
-    EntryEventImpl ev = EntryEventImpl.create(r, prd.getOp(), prd.getKey(), prd
+    @Retained EntryEventImpl ev = EntryEventImpl.create(r, prd.getOp(), prd.getKey(), prd
-    ev.setPutDML(isPutDML);
-   * @since 5.8
+   * @since GemFire 5.8

MOV26 INS26 UPD40 INS40 INS78 INS78 UPD66 INS42 INS42 INS78 INS78 INS78 UPD66 INS42 INS42 INS42 INS78 INS42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL34 DEL2 DEL42 DEL32 DEL42 DEL43 DEL62 DEL36 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL7 DEL21 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL7 DEL21 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL36 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL36 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21