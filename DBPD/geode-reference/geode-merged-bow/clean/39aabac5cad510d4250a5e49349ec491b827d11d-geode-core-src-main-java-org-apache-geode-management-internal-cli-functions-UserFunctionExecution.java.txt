Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

+import java.util.Optional;
+import java.util.Properties;
-import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.security.SecurityService;
- * 
-      Cache cache = CacheFactory.getAnyInstance();
+      Cache cache = context.getCache();
-      if (args != null) {
-        String functionId = ((String) args[0]);
-        String filterString = ((String) args[1]);
-        String resultCollectorName = ((String) args[2]);
-        String argumentsString = ((String) args[3]);
-        String onRegion = ((String) args[4]);
-
-        try {
-          if (argumentsString != null && argumentsString.length() > 0) {
-            functionArgs = argumentsString.split(",");
-          }
-          Set<String> filters = new HashSet<>();
-          ResultCollector resultCollectorInstance = null;
-          if (resultCollectorName != null && resultCollectorName.length() > 0) {
-            resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-                .forName(resultCollectorName).newInstance();
-          }
-          if (filterString != null && filterString.length() > 0) {
-            filters.add(filterString);
-          }
-          Function function = FunctionService.getFunction(functionId);
-
-          if (function == null) {
-            context.getResultSender().lastResult(CliStrings.format(
-                CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
-          } else {
-            Execution execution = null;
-            if (onRegion != null && onRegion.length() > 0) {
-              Region region = cache.getRegion(onRegion);
-              if (region != null) {
-                execution = FunctionService.onRegion(region);
-              }
-            } else {
-              execution = FunctionService.onMember(member);
-            }
-
-            if (execution != null) {
-              if (resultCollectorInstance != null) {
-                execution = execution.withCollector(resultCollectorInstance);
-              }
-
-              if (functionArgs != null && functionArgs.length > 0) {
-                execution = execution.setArguments(functionArgs);
-              }
-              if (filters.size() > 0) {
-                execution = execution.withFilter(filters);
-              }
-
-              List<Object> results = (List<Object>) execution.execute(function).getResult();
-
-              StringBuilder resultMessage = new StringBuilder();
-              if (results != null) {
-                for (Object resultObj : results) {
-                  if (resultObj != null) {
-                    if (resultObj instanceof String) {
-                      resultMessage.append(((String) resultObj));
-                      resultMessage.append(GfshParser.LINE_SEPARATOR);
-                    } else if (resultObj instanceof Exception) {
-                      resultMessage.append(((IllegalArgumentException) resultObj).getMessage());
-                    } else {
-                      resultMessage.append(resultObj);
-                      resultMessage.append(GfshParser.LINE_SEPARATOR);
-                    }
-                  }
-                }
-              }
-              context.getResultSender().lastResult(resultMessage);
-            } else {
-              context.getResultSender()
-                  .lastResult(CliStrings.format(
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
-                      functionId, member.getId(), onRegion,
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
-            }
-          }
-
-        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                  resultCollectorName, e.getMessage()));
-        } catch (Exception e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                  functionId, member.getId(), e.getMessage()));
-        }
-      } else {
+      if (args == null) {
+        return;
+      }
+
+      String functionId = ((String) args[0]);
+      String filterString = ((String) args[1]);
+      String resultCollectorName = ((String) args[2]);
+      String argumentsString = ((String) args[3]);
+      String onRegion = ((String) args[4]);
+      Properties credentials = (Properties) args[5];
+
+      SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
+
+      try {
+        securityService.login(credentials);
+
+        if (argumentsString != null && argumentsString.length() > 0) {
+          functionArgs = argumentsString.split(",");
+        }
+        Set<String> filters = new HashSet<>();
+        ResultCollector resultCollectorInstance = null;
+        if (resultCollectorName != null && resultCollectorName.length() > 0) {
+          resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
+              .forName(resultCollectorName).newInstance();
+        }
+        if (filterString != null && filterString.length() > 0) {
+          filters.add(filterString);
+        }
+
+        Function<?> function = FunctionService.getFunction(functionId);
+        if (function == null) {
+          context.getResultSender().lastResult(CliStrings.format(
+              CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
+          return;
+        }
+
+        // security check
+        function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
+
+        Execution execution = null;
+        if (onRegion != null && onRegion.length() > 0) {
+          Region region = cache.getRegion(onRegion);
+          if (region == null) {
+            context.getResultSender().lastResult(onRegion + "does not exist.");
+            return;
+          }
+          execution = FunctionService.onRegion(region);
+        } else {
+          execution = FunctionService.onMember(member);
+        }
+
+        if (execution == null) {
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
+                  functionId, member.getId(), onRegion,
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
+          return;
+        }
+
+        if (resultCollectorInstance != null) {
+          execution = execution.withCollector(resultCollectorInstance);
+        }
+
+        if (functionArgs != null && functionArgs.length > 0) {
+          execution = execution.setArguments(functionArgs);
+        }
+        if (filters.size() > 0) {
+          execution = execution.withFilter(filters);
+        }
+
+        List<Object> results = (List<Object>) execution.execute(function).getResult();
+
+        StringBuilder resultMessage = new StringBuilder();
+        if (results != null) {
+          for (Object resultObj : results) {
+            if (resultObj != null) {
+              if (resultObj instanceof String) {
+                resultMessage.append(((String) resultObj));
+                resultMessage.append(GfshParser.LINE_SEPARATOR);
+              } else if (resultObj instanceof Exception) {
+                resultMessage.append(((IllegalArgumentException) resultObj).getMessage());
+              } else {
+                resultMessage.append(resultObj);
+                resultMessage.append(GfshParser.LINE_SEPARATOR);
+              }
+            }
+          }
+        }
+        context.getResultSender().lastResult(resultMessage);
+
+      } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
+        context.getResultSender()
+            .lastResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                resultCollectorName, e.getMessage()));
+      } catch (Exception e) {
+        context.getResultSender()
+            .lastResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
+                functionId, member.getId(), e.getMessage()));
+      } finally {
+        securityService.logout();
-  public boolean hasResult() {
-    return true;
-  }
-
-  @Override
-  public boolean optimizeForWrite() {
-    // no need of optimization since read-only.
-    return false;
-  }
-
-  @Override

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 MOV8 INS54 MOV8 MOV12 INS60 MOV60 MOV60 MOV60 INS25 MOV60 MOV60 MOV60 MOV60 MOV60 INS60 INS60 INS54 MOV43 INS59 UPD27 MOV27 INS8 INS43 INS59 INS43 INS59 MOV8 MOV12 MOV12 INS8 INS42 INS32 UPD42 MOV21 INS41 INS42 INS42 INS11 INS42 INS42 INS32 INS21 MOV25 MOV60 MOV60 MOV25 MOV25 MOV60 INS25 INS21 MOV60 MOV25 INS25 INS21 INS42 INS42 INS43 INS2 INS36 INS42 INS32 INS74 MOV27 MOV8 INS32 INS27 INS8 MOV21 INS32 INS42 INS42 INS34 INS11 INS42 INS42 INS42 MOV43 INS76 INS41 INS32 INS42 INS90 MOV21 INS42 INS33 INS21 INS41 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 UPD27 INS32 MOV32 INS42 INS42 INS42 INS21 INS41 INS32 INS42 INS32 MOV42 UPD40 MOV42 MOV32 MOV32 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 MOV40 UPD42 MOV42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL54 DEL8 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31