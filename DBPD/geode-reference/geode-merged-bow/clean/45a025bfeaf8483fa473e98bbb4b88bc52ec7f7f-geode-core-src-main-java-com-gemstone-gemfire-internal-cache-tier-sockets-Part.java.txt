Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-import com.gemstone.gemfire.internal.*;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
+import java.nio.channels.SocketChannel;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+import com.gemstone.gemfire.internal.Assert;
+import com.gemstone.gemfire.internal.DSCODE;
+import com.gemstone.gemfire.internal.HeapDataOutputStream;
+import com.gemstone.gemfire.internal.Version;
-import java.io.*;
-import java.nio.*;
-import java.nio.channels.*;
-
+  //TODO Check non-enum callers. Don't want to cache all ints, just known ones.
+  private static final Map<Integer,byte[]> CACHED_INTS = new ConcurrentHashMap<Integer,byte[]>();
+  
-    byte[] bytes = new byte[4];
-    encodeInt(v, bytes);
+    byte[] bytes = CACHED_INTS.get(v);
+    if (bytes == null) {
+      bytes = new byte[4];
+      encodeInt(v, bytes);
+      CACHED_INTS.put(v, bytes);
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS83 INS74 INS59 INS43 INS43 INS5 INS42 INS14 INS25 INS42 INS42 INS39 INS85 INS74 INS27 INS8 INS43 INS43 INS5 INS32 INS42 INS33 INS21 MOV21 INS21 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS7 INS32 INS42 MOV3 INS42 INS42 INS42 INS42