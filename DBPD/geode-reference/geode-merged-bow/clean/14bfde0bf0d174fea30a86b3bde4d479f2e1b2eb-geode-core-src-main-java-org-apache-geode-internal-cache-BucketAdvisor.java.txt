Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-  private final ReadWriteLock primaryMoveLock = new ReentrantReadWriteLock();
-  private final Lock activeWriteLock = primaryMoveLock.readLock();
-  private final Lock activePrimaryMoveLock = primaryMoveLock.writeLock();
+  private final ReadWriteLock primaryMoveReadWriteLock = new ReentrantReadWriteLock();
+  private final Lock primaryMoveReadLock = primaryMoveReadWriteLock.readLock();
+  private final Lock primaryMoveWriteLock = primaryMoveReadWriteLock.writeLock();
-  private void assignStartingBucketAdvisor() {
+  private void assignStartingBucketAdvisorIfFixedPartitioned() {
+    if (startingBucketAdvisor != null) {
+      // already assigned
+      return;
+    }
-  public Lock getActiveWriteLock() {
-    return this.activeWriteLock;
+  public Lock getPrimaryMoveReadLock() {
+    return primaryMoveReadLock;
-  Lock getParentActiveWriteLock() {
-    if (this.parentAdvisor != null) {
-      return this.parentAdvisor.getActiveWriteLock();
+  Lock getParentPrimaryMoveReadLock() {
+    if (parentAdvisor != null) {
+      return parentAdvisor.getPrimaryMoveReadLock();
-        this.activePrimaryMoveLock.lock();
+        this.primaryMoveWriteLock.lock();
-        this.activePrimaryMoveLock.unlock();
+        this.primaryMoveWriteLock.unlock();
-      this.activePrimaryMoveLock.lock();
+      this.primaryMoveWriteLock.lock();
-        this.activePrimaryMoveLock.unlock();
+        this.primaryMoveWriteLock.unlock();
-    long timeout = config.getMemberTimeout() * 3;
+    long timeout = config.getMemberTimeout() * 3L;
-        15 * 1000);
+        15000L);
-    activePrimaryMoveLock.lock();
+    primaryMoveWriteLock.lock();
-        activePrimaryMoveLock.unlock();
+        primaryMoveWriteLock.unlock();
-        childBA.activePrimaryMoveLock.lock();
+        childBA.primaryMoveWriteLock.lock();
-          childBA.activePrimaryMoveLock.unlock();
+          childBA.primaryMoveWriteLock.unlock();
-              ba.activePrimaryMoveLock.lock();
+              ba.primaryMoveWriteLock.lock();
-                ba.activePrimaryMoveLock.unlock();
+                ba.primaryMoveWriteLock.unlock();
-                  .warn(LocalizedMessage.create(LocalizedStrings.BucketAdvisor_WAITING_FOR_PRIMARY,
-                      new Object[] {warnTime / 1000L, this, this.adviseInitialized()}));
+                  .warn(
+                      "{} secs have elapsed waiting for a primary for bucket {}. Current bucket owners {}",
+                      new Object[] {warnTime / 1000L, this, this.adviseInitialized()});
-              LocalizedMessage.create(LocalizedStrings.BucketAdvisor_WAITING_FOR_PRIMARY_DONE));
+              "Wait for primary completed");
-    if (startingBucketAdvisor == null) {
-      assignStartingBucketAdvisor();
-      if (startingBucketAdvisor != null) {
-        return;
-      }
-    } else {
+    assignStartingBucketAdvisorIfFixedPartitioned();
+    if (startingBucketAdvisor != null) {
-    // TODO fix this method to not release any locks if the
-    // redundancy is zero, since no locks are grabbed.
-      } else {
-        // InternalDistributedSystem.isDisconnecting probably prevented us from
-        // creating the DLS... hope there's a thread closing this advisor but
-        // it's probably not safe to assert that it already happened
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-            throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1
-                .toLocalizedString(new Object[] {this.primaryStateToString(),
+            throw new IllegalStateException(String.format("Cannot change from %s to %s",
+                new Object[] {this.primaryStateToString(),
-                LocalizedStrings.BucketAdvisor_ATTEMPTED_TO_CLOSE_BUCKETADVISOR_THAT_IS_ALREADY_CLOSED
-                    .toLocalizedString());
-            logger.warn(
-                LocalizedMessage.create(
-                    LocalizedStrings.BucketAdvisor_ATTEMPTED_TO_CLOSE_BUCKETADVISOR_THAT_IS_ALREADY_CLOSED),
+                "Attempted to close BucketAdvisor that is already CLOSED");
+            logger.warn("Attempted to close BucketAdvisor that is already CLOSED",
-                LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1_FOR_BUCKET_2
-                    .toLocalizedString(new Object[] {this.primaryStateToString(),
+                String.format("Cannot change from %s to %s for bucket %s",
+                    new Object[] {this.primaryStateToString(),
-          // Holding the activePrimaryMoveLock here instead prevents any
+          // Holding the primaryMoveWriteLock here instead prevents any
-          BucketAdvisor.this.activePrimaryMoveLock.lock();
+          BucketAdvisor.this.primaryMoveWriteLock.lock();
-              // the advisor, becuase that might deadlock with a user thread.
+              // the advisor, because that might deadlock with a user thread.
-              if (startingBucketAdvisor == null) {
-                assignStartingBucketAdvisor();
-              }
+              assignStartingBucketAdvisorIfFixedPartitioned();
-            BucketAdvisor.this.activePrimaryMoveLock.unlock();
+            BucketAdvisor.this.primaryMoveWriteLock.unlock();
-              LocalizedStrings.BucketAdvisor_BUCKETADVISOR_WAS_NOT_CLOSED_PROPERLY
-                  .toLocalizedString());
+              "BucketAdvisor was not closed properly.");
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.BucketAdvisor_BUCKETADVISOR_WAS_NOT_CLOSED_PROPERLY), e);
+          logger.warn("BucketAdvisor was not closed properly.", e);

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS25 MOV21 MOV25 UPD42 UPD42 INS27 INS8 INS42 INS42 INS33 INS41 INS42 UPD42 UPD42 UPD34 INS34 MOV43 INS42 UPD42 INS45 UPD42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV43 INS45 UPD42 INS42 INS45 UPD42 UPD40 UPD42 UPD42 UPD42 INS45 UPD40 INS45 UPD42 INS45 MOV21 UPD42 MOV32 UPD42 UPD40 UPD42 UPD42 INS45 UPD40 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL34 DEL34 DEL27 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL33 DEL27 DEL8 DEL41 DEL8 DEL25 DEL8 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32