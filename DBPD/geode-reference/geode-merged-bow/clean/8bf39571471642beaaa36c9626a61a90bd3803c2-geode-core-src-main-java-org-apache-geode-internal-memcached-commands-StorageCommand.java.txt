Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  * general format of the command is:<br/>
-  * <code>
-  * &lt;command name&gt; &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; [noreply]\r\n
-  * </code><br/>
-  * After this line, the client sends the data block:<br/>
-  * <code>
-  * &lt;data block&gt;\r\n
-  * </code>
-  * 
-  */
+ * general format of the command is:<br/>
+ * <code>
+ * &lt;command name&gt; &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; [noreply]\r\n
+ * </code><br/>
+ * After this line, the client sends the data block:<br/>
+ * <code>
+ * &lt;data block&gt;\r\n
+ * </code>
+ * 
+ */
-  private static ScheduledExecutorService expiryExecutor = new ScheduledThreadPoolExecutor(1, new ThreadFactory() {
-    @Override
-    public Thread newThread(Runnable r) {
-      Thread t = new Thread(r);
-      t.setName("memcached-expiryExecutor");
-      t.setDaemon(true);
-      return t;
-    }
-  });
+  private static ScheduledExecutorService expiryExecutor =
+      new ScheduledThreadPoolExecutor(1, new ThreadFactory() {
+        @Override
+        public Thread newThread(Runnable r) {
+          Thread t = new Thread(r);
+          t.setName("memcached-expiryExecutor");
+          t.setDaemon(true);
+          return t;
+        }
+      });
-  private static ConcurrentMap<Object, ScheduledFuture> expiryFutures = new ConcurrentHashMap<Object, ScheduledFuture>();
+  private static ConcurrentMap<Object, ScheduledFuture> expiryFutures =
+      new ConcurrentHashMap<Object, ScheduledFuture>();
-  private static final long secsIn30Days = 60*60*24*30;
-  
+  private static final long secsIn30Days = 60 * 60 * 24 * 30;
+
-      for (int i=0; i<numBytes; i++) {
+      for (int i = 0; i < numBytes; i++) {
-      getLogger().fine("key:"+key);
-      getLogger().fine("value:"+Arrays.toString(value));
+      getLogger().fine("key:" + key);
+      getLogger().fine("value:" + Arrays.toString(value));
-    
+
-    
+
-    
+
-    
+
-      getLogger().fine("key:"+key);
-      getLogger().fine("value:"+Arrays.toString(value));
+      getLogger().fine("key:" + key);
+      getLogger().fine("value:" + Arrays.toString(value));
-   * Schedules the entry to expire based on the following:
-   * the expiration time sent may either be
-   * Unix time (number of seconds since January 1, 1970, as a 32-bit
-   * value), or a number of seconds starting from current time. In the
-   * latter case, this number of seconds may not exceed 60*60*24*30 (number
-   * of seconds in 30 days); if the number sent by a client is larger than
-   * that, the server will consider it to be real Unix time value rather
-   * than an offset from current time.
+   * Schedules the entry to expire based on the following: the expiration time sent may either be
+   * Unix time (number of seconds since January 1, 1970, as a 32-bit value), or a number of seconds
+   * starting from current time. In the latter case, this number of seconds may not exceed
+   * 60*60*24*30 (number of seconds in 30 days); if the number sent by a client is larger than that,
+   * the server will consider it to be real Unix time value rather than an offset from current time.
+   * 
-        getLogger().info("Invalid expiration time passed, key:"+key+" will not expire");
+        getLogger().info("Invalid expiration time passed, key:" + key + " will not expire");
-    ScheduledFuture f = expiryExecutor.schedule(new ExpiryTask(cache, key), expTime, TimeUnit.SECONDS);
+    ScheduledFuture f =
+        expiryExecutor.schedule(new ExpiryTask(cache, key), expTime, TimeUnit.SECONDS);
-  public abstract ByteBuffer processStorageCommand(String key, byte[] value, int flags, Cache cache);
+  public abstract ByteBuffer processStorageCommand(String key, byte[] value, int flags,
+      Cache cache);
-  public abstract ByteBuffer processBinaryStorageCommand(Object key, byte[] value, long cas, int flags, Cache cache, RequestReader request);
+  public abstract ByteBuffer processBinaryStorageCommand(Object key, byte[] value, long cas,
+      int flags, Cache cache, RequestReader request);
+   * 
-        ScheduledFuture f2 = expiryExecutor.schedule(new ExpiryTask(cache, key), newExpTime, TimeUnit.SECONDS);
+        ScheduledFuture f2 =
+            expiryExecutor.schedule(new ExpiryTask(cache, key), newExpTime, TimeUnit.SECONDS);
-        cache.getLogger().fine("expiration removed key:"+key);
+        cache.getLogger().fine("expiration removed key:" + key);

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66