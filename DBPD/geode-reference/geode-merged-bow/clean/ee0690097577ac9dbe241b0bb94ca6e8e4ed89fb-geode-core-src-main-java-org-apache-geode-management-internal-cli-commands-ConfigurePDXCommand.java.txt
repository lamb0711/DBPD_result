GEODE-4794: ConfigurePDXCommand Fails When Using Defaults (#1852)


-import java.io.PrintWriter;
-import java.io.StringWriter;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.configuration.ParameterType;
+import org.apache.geode.cache.configuration.PdxType;
+import org.apache.geode.cache.configuration.StringType;
-import org.apache.geode.internal.cache.CacheConfig;
-import org.apache.geode.internal.cache.xmlcache.CacheCreation;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.internal.cache.xmlcache.CacheXmlGenerator;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-  /**
-   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
-   *        for generating xml.
-   * @since GemFire 5.7
-   */
-  protected CacheCreation getCacheCreation(boolean forParsing) {
-    return new CacheCreation(forParsing);
-  }
-
-  /**
-   * Creates the XmlEntity associated to the PDX configuration.
-   */
-  protected XmlEntity createXmlEntity(CacheCreation cache) {
-    final StringWriter stringWriter = new StringWriter();
-    final PrintWriter printWriter = new PrintWriter(stringWriter);
-    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
-    printWriter.close();
-    String xmlDefinition = stringWriter.toString();
-
-    return XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
-  }
-
+          unspecifiedDefaultValue = "false",
+          unspecifiedDefaultValue = "false",
-      @CliOption(key = CliStrings.CONFIGURE_PDX__DISKSTORE, specifiedDefaultValue = "",
+      @CliOption(key = CliStrings.CONFIGURE_PDX__DISKSTORE, specifiedDefaultValue = "DEFAULT",
-    ReflectionBasedAutoSerializer autoSerializer;
-    CacheCreation cache = getCacheCreation(true);
-    InfoResultData ird = ResultBuilder.createInfoResultData();
+    ReflectionBasedAutoSerializer autoSerializer = null;
+
+    if (getConfigurationService() == null) {
+      return ResultBuilder
+          .createUserErrorResult("Configure pdx failed because cluster configuration is disabled.");
+    }
+
+    InfoResultData infoResultData = ResultBuilder.createInfoResultData();
-      ird.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
-      cache.setPdxPersistent(true);
-      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
-
-      if (!diskStore.equals("")) {
-        cache.setPdxDiskStore(diskStore);
-        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + cache.getPdxDiskStore());
-      } else {
-        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + "DEFAULT");
-      }
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = true");
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + diskStore);
-      cache.setPdxPersistent(CacheConfig.DEFAULT_PDX_PERSISTENT);
-      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = false");
-    // Set read-serialized
-    if (readSerialized != null) {
-      cache.setPdxReadSerialized(readSerialized);
-    } else {
-      cache.setPdxReadSerialized(CacheConfig.DEFAULT_PDX_READ_SERIALIZED);
-    }
-
-    ird.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
-
-    // Set ignoreUnreadFields
-    if (ignoreUnreadFields != null) {
-      cache.setPdxIgnoreUnreadFields(ignoreUnreadFields);
-    } else {
-      cache.setPdxIgnoreUnreadFields(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS);
-    }
-
-    ird.addLine(
-        CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + cache.getPdxIgnoreUnreadFields());
+    infoResultData.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + readSerialized);
+    infoResultData
+        .addLine(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + ignoreUnreadFields);
-      cache.setPdxSerializer(autoSerializer);
-      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-      ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
+      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoResultData.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-      cache.setPdxSerializer(autoSerializer);
-      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-      ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
+      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoResultData
+          .addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
-    XmlEntity xmlEntity = createXmlEntity(cache);
-    result = ResultBuilder.buildResult(ird);
-    persistClusterConfiguration(result,
-        () -> ((InternalClusterConfigurationService) getConfigurationService())
-            .addXmlEntity(xmlEntity, null));
+    result = ResultBuilder.buildResult(infoResultData);
+    ReflectionBasedAutoSerializer finalAutoSerializer = autoSerializer;
+    getConfigurationService().updateCacheConfig(InternalClusterConfigurationService.CLUSTER_CONFIG,
+        config -> {
+          if (config.getPdx() == null) {
+            config.setPdx(new PdxType());
+          }
+          config.getPdx().setReadSerialized(readSerialized);
+          config.getPdx().setIgnoreUnreadFields(ignoreUnreadFields);
+          config.getPdx().setDiskStoreName(diskStore);
+          config.getPdx().setPersistent(diskStore != null);
+
+          if (portableClassesPatterns != null || nonPortableClassesPatterns != null) {
+            PdxType.PdxSerializer pdxSerializer = new PdxType.PdxSerializer();
+            pdxSerializer.setClassName(ReflectionBasedAutoSerializer.class.getName());
+
+            List<ParameterType> parameters =
+                finalAutoSerializer.getConfig().entrySet().stream().map(entry -> {
+                  ParameterType parameterType = new ParameterType();
+                  parameterType.setName((String) entry.getKey());
+                  parameterType.setString(new StringType((String) entry.getValue()));
+                  return parameterType;
+                }).collect(Collectors.toList());
+            pdxSerializer.getParameter().addAll(parameters);
+
+            config.getPdx().setPdxSerializer(pdxSerializer);
+          }
+          return config;
+        });

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS25 INS25 MOV21 MOV21 INS21 INS60 INS21 INS80 INS80 INS43 INS27 INS8 MOV27 INS8 MOV8 INS7 MOV43 INS59 INS32 INS42 INS45 INS42 INS45 UPD45 INS42 INS33 INS32 INS33 INS41 UPD42 MOV21 MOV21 UPD42 UPD42 INS27 UPD42 INS42 INS32 INS42 INS42 MOV32 INS42 INS40 INS86 INS42 INS32 INS40 INS45 INS42 UPD40 INS42 INS42 INS42 INS42 INS59 INS8 INS42 UPD42 MOV42 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS25 MOV21 INS21 INS21 MOV21 INS25 INS41 UPD45 INS42 UPD40 UPD45 UPD27 MOV27 MOV8 INS32 INS32 INS27 INS8 INS42 INS32 INS32 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD27 INS27 INS27 INS60 MOV21 INS60 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 MOV33 INS42 INS33 INS43 INS59 INS74 INS59 INS32 UPD42 UPD42 INS14 INS40 INS42 INS14 UPD42 UPD42 INS32 INS43 INS43 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS43 INS43 INS57 INS42 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS43 INS32 INS42 INS86 INS42 INS42 INS42 INS32 UPD42 MOV42 INS59 INS8 INS32 INS42 INS42 INS60 MOV21 INS21 INS41 UPD42 MOV42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS14 UPD42 UPD42 INS11 INS42 INS42 INS14 INS43 MOV43 INS32 INS43 INS11 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL25 DEL8 DEL25 DEL27 DEL8 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL40 DEL40 DEL45 DEL42 DEL42 DEL32 DEL42 DEL40 DEL45 DEL32 DEL27 DEL42 DEL43 DEL11 DEL36 DEL42 DEL33 DEL32 DEL86 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21