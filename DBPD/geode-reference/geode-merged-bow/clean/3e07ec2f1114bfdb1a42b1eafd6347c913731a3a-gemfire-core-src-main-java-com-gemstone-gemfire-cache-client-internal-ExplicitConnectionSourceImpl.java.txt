Merge remote-tracking branch 'origin/develop' into feature/GEODE-11

-import java.net.InetAddress;
-import java.net.UnknownHostException; 
-import com.gemstone.gemfire.cache.util.EndpointDoesNotExistException;
-import com.gemstone.gemfire.cache.util.EndpointExistsException;
-import com.gemstone.gemfire.cache.util.EndpointInUseException;
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  /**
-   * Remove an endpoint from this connection source.
-   * 
-   * @param host
-   * @param port
-   * @throws EndpointDoesNotExistException if the <code>Endpoint</code> to be
-   * removed doesn't exist.
-   */
-  public synchronized void removeEndpoint(String host,int port) throws EndpointInUseException,EndpointDoesNotExistException {
-    serverList = new ArrayList(serverList);
-    Iterator it = serverList.iterator();
-    boolean found = false;
-    host = lookupHostName(host);
-    while(it.hasNext()) {
-      ServerLocation loc = (ServerLocation)it.next();
-      if(loc.getHostName().equalsIgnoreCase(host)) {
-        if(loc.getPort()==port) {
-          EndpointManager em = pool.getEndpointManager();
-          if(em.getEndpointMap().containsKey(loc)) {
-            throw new EndpointInUseException("Endpoint in use cannot be removed:"+loc);
-          } else {
-            it.remove();
-            found = true;
-          }
-        }
-      }
-    }
-    serverList = Collections.unmodifiableList(serverList);
-    if(!found) {
-      throw new EndpointDoesNotExistException("endpointlist:"+serverList,host,port);
-    }
-  }
-  
-  /**
-   * Add an endpoint to this connection source.
-   * 
-   * @param host
-   * @param port
-   * @throws EndpointExistsException if the <code>Endpoint</code> to be
-   * added already exists.
-   */
-  public synchronized void addEndpoint(String host,int port) throws EndpointExistsException {
-    Iterator it = serverList.iterator();
-    host = lookupHostName(host);
-    while(it.hasNext()) {
-      ServerLocation loc = (ServerLocation)it.next();
-      if(loc.getHostName().equalsIgnoreCase(host)) {
-        if(loc.getPort()==port) {
-          throw new EndpointExistsException("Endpoint already exists host="+host+" port="+port);
-        }
-      }
-    }
-    serverList = new ArrayList(serverList);
-    serverList.add(new ServerLocation(host,port));
-    serverList = Collections.unmodifiableList(serverList);
-  }
- 
-  /**
-   * When we create an ExplicitConnectionSource, we convert a the hostname of an
-   * endpoint from a string to an InetAddress and back. This method duplicates
-   * that process for endpoints that are added or removed after the fact.
-   */
-  private String lookupHostName(String host) {
-    try {
-      InetAddress hostAddr = InetAddress.getByName(host);
-      host = hostAddr.getHostName();
-    } catch (UnknownHostException cause) {
-      IllegalArgumentException ex = new IllegalArgumentException("Unknown host " + host);
-      ex.initCause(cause);
-      throw ex;
-    }
-    return host;
-  } 
-
+  @Override

MOV31 INS31 INS78 INS78 INS42 INS8 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL38 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL31