Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is helper class used by CacheFactory to pass the cache configuration
- *  values to cache creation code.
- *  
+ * This is helper class used by CacheFactory to pass the cache configuration values to cache
+ * creation code.
+ * 
-  
+
-   * cacheXMLDescription is used to reinitialize the cache after a reconnect.
-   * It overrides any cache.xml filename setting in distributed system properties.
+   * cacheXMLDescription is used to reinitialize the cache after a reconnect. It overrides any
+   * cache.xml filename setting in distributed system properties.
-  
+
-   * This indicates if the pdxReadSerialized value is set by user. This is used 
-   * during cache xml parsing. The value set by user api overrides the 
-   * value set in cache.xml value.
+   * This indicates if the pdxReadSerialized value is set by user. This is used during cache xml
+   * parsing. The value set by user api overrides the value set in cache.xml value.
-  
+
-  
-  
+
+
-  
+
-  
+
-  
-  
+
+
-    if (this.pdxReadSerializedUserSet && this.pdxReadSerialized != cacheInstance.getPdxReadSerialized()) {
-      throw new IllegalStateException(LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG.toLocalizedString("pdxReadSerialized: " + cacheInstance.getPdxReadSerialized()));
+    if (this.pdxReadSerializedUserSet
+        && this.pdxReadSerialized != cacheInstance.getPdxReadSerialized()) {
+      throw new IllegalStateException(
+          LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG
+              .toLocalizedString("pdxReadSerialized: " + cacheInstance.getPdxReadSerialized()));
-      throw new IllegalStateException(LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG.toLocalizedString("pdxDiskStore: " + cacheInstance.getPdxDiskStore()));
+      throw new IllegalStateException(
+          LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG
+              .toLocalizedString("pdxDiskStore: " + cacheInstance.getPdxDiskStore()));
-      throw new IllegalStateException(LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG.toLocalizedString("pdxPersistent: " + cacheInstance.getPdxPersistent()));
+      throw new IllegalStateException(
+          LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG
+              .toLocalizedString("pdxPersistent: " + cacheInstance.getPdxPersistent()));
-    if (this.pdxIgnoreUnreadFieldsUserSet && this.pdxIgnoreUnreadFields != cacheInstance.getPdxIgnoreUnreadFields()) {
-      throw new IllegalStateException(LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG.toLocalizedString("pdxIgnoreUnreadFields: " + cacheInstance.getPdxIgnoreUnreadFields()));
+    if (this.pdxIgnoreUnreadFieldsUserSet
+        && this.pdxIgnoreUnreadFields != cacheInstance.getPdxIgnoreUnreadFields()) {
+      throw new IllegalStateException(
+          LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG
+              .toLocalizedString(
+                  "pdxIgnoreUnreadFields: " + cacheInstance.getPdxIgnoreUnreadFields()));
-    if (this.pdxSerializerUserSet && !samePdxSerializer(this.pdxSerializer, cacheInstance.getPdxSerializer())) {
-      throw new IllegalStateException(LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG.toLocalizedString("pdxSerializer: " + cacheInstance.getPdxSerializer()));
+    if (this.pdxSerializerUserSet
+        && !samePdxSerializer(this.pdxSerializer, cacheInstance.getPdxSerializer())) {
+      throw new IllegalStateException(
+          LocalizedStrings.CacheFactory_0_EXISTING_CACHE_WITH_DIFFERENT_CACHE_CONFIG
+              .toLocalizedString("pdxSerializer: " + cacheInstance.getPdxSerializer()));
-    if (s1 instanceof ReflectionBasedAutoSerializer && s2 instanceof ReflectionBasedAutoSerializer) {
+    if (s1 instanceof ReflectionBasedAutoSerializer
+        && s2 instanceof ReflectionBasedAutoSerializer) {
-    if(o1 == null)  {
+    if (o1 == null) {
-    if(o2 == null) {
+    if (o2 == null) {
-    if(!this.pdxDiskStoreUserSet) {
+    if (!this.pdxDiskStoreUserSet) {
-    if(!this.pdxPersistentUserSet) {
+    if (!this.pdxPersistentUserSet) {
-    if(!this.pdxReadSerializedUserSet) {
-      this.pdxReadSerialized= cacheConfig.isPdxReadSerialized();
-      this.pdxReadSerializedUserSet= cacheConfig.pdxReadSerializedUserSet;
+    if (!this.pdxReadSerializedUserSet) {
+      this.pdxReadSerialized = cacheConfig.isPdxReadSerialized();
+      this.pdxReadSerializedUserSet = cacheConfig.pdxReadSerializedUserSet;
-    if(!this.pdxSerializerUserSet) {
+    if (!this.pdxSerializerUserSet) {
-    if(!this.pdxIgnoreUnreadFieldsUserSet) {
+    if (!this.pdxIgnoreUnreadFieldsUserSet) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66