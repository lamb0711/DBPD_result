GEODE-7497: Check CQs prior to change authorizer (#4385)

The QueryConfigurationService now requires an extra flag to determine,
in the presence of continuous queries, whether to update the configured
MethodInvocationAuthorizer and invalidate the CQ's internal cache or
throw an exception and abort the update.

- Fixed minor warnings.
- Added unit and distributed tests.
- Updated docs for alter query-service command.
- Added 'forceUpdate' flag to 'AlterQueryServiceFunction' and
  'AlterQueryServiceCommand'.
- Fixed 'AlterQueryServiceCommand' to always require the
  'method-authorizer' parameter.
+  /**
+   * Returns the currently configured {@link MethodInvocationAuthorizer} instance.
+   *
+   * @return the currently configured {@link MethodInvocationAuthorizer}
+   */
-  void updateMethodAuthorizer(Cache cache, QueryMethodAuthorizerCreation creation)
-      throws ClassNotFoundException;
+  /**
+   * Sets the configured {@link MethodInvocationAuthorizer} when creating the cache using a
+   * declarative approach.
+   *
+   * @param cache the cache on which the {@link MethodInvocationAuthorizer} instance will be
+   *        configured.
+   * @param forceUpdate {@code true} to apply the configuration change even when there are
+   *        continuous queries running, {@code false} otherwise.
+   * @param creation the authorizer creation parameters.
+   * @throws QueryConfigurationServiceException when there is an error while updating the new
+   *         {@link MethodInvocationAuthorizer}.
+   */
+  void updateMethodAuthorizer(Cache cache, boolean forceUpdate,
+      QueryMethodAuthorizerCreation creation) throws QueryConfigurationServiceException;
-  void updateMethodAuthorizer(Cache cache, String className, Set<String> parameters)
-      throws ClassNotFoundException, QueryConfigurationServiceException;
-
+  /**
+   * Updates the configured {@link MethodInvocationAuthorizer}.
+   *
+   * @param cache the cache on which the {@link MethodInvocationAuthorizer} instance will be
+   *        configured.
+   * @param forceUpdate {@code true} to apply the configuration change even when there are
+   *        continuous queries running, {@code false} otherwise.
+   * @param className the fully qualified name of the class that will be created and configured as
+   *        the new {@link MethodInvocationAuthorizer}.
+   * @param parameters the set of parameters that will be used to initialize the new
+   *        {@link MethodInvocationAuthorizer}.
+   * @throws QueryConfigurationServiceException when there is an error while updating the new
+   *         {@link MethodInvocationAuthorizer}.
+   */
+  void updateMethodAuthorizer(Cache cache, boolean forceUpdate, String className,
+      Set<String> parameters) throws QueryConfigurationServiceException;

INS29 INS29 INS44 UPD43 INS29 INS44 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS66 INS66 INS42 INS42 INS42 INS66 INS66 INS42 INS42 INS42 DEL42 DEL43