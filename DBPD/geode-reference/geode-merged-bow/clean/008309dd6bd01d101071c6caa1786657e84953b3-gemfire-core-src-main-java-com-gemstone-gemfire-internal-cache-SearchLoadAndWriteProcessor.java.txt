Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.offheap.StoredObject;
-      InternalDistributedMember whoSuspected) {
+      InternalDistributedMember whoSuspected, String reason) {
-    CacheEvent event = getEventForListener(pevent);
-    if (event instanceof EntryEventImpl) {
-      if (((EntryEventImpl)event).inhibitAllNotifications()){
+    if (pevent instanceof EntryEventImpl) {
+      if (((EntryEventImpl)pevent).inhibitAllNotifications()){
-          logger.debug("Notification inhibited for key {}", event);
+          logger.debug("Notification inhibited for key {}", pevent);
+    CacheEvent event = getEventForListener(pevent);
+    try {
+    } finally {
+      if (event != pevent) {
+        if (event instanceof EntryEventImpl) {
+          ((EntryEventImpl) event).release();
+        }
+      }
+    }
-                        {
+                        if (eov instanceof StoredObject && !((StoredObject) eov).isSerialized()) {
+                          isSer = false;
+                          ebv = (byte[]) ((StoredObject)eov).getDeserializedForReading();
+                          ebvLen = ebv.length;
+                        } else {

INS26 INS40 INS44 INS43 INS42 INS25 INS54 INS42 INS62 INS8 INS8 INS8 INS42 INS43 INS25 MOV50 INS25 INS42 INS32 INS8 INS27 INS8 INS36 INS42 INS25 MOV41 INS42 INS42 MOV25 INS11 MOV32 INS8 INS43 INS42 INS21 MOV21 INS42 INS32 MOV32 INS42 INS42 INS45 INS42 UPD42 INS25 INS27 INS8 MOV8 INS62 INS38 INS21 INS21 INS21 INS42 INS43 INS32 INS7 INS7 INS7 INS42 INS36 INS42 INS42 INS9 INS42 INS11 INS42 INS40 INS11 INS5 INS32 INS43 INS42 INS39 INS85 INS36 INS42 INS42 INS11 INS43 INS42 INS42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25