Applying review feedback

- Refactored tests to reduce code duplication
- Refactored to condense duplicated Restore and Status command code into
one class
- Refactored to condense unit tests for the above classes into one class

Authored-by: Donal Evans <doevans@pivotal.io>

-import static org.apache.geode.management.internal.cli.commands.RedundancyCommandUtils.REDUNDANCY_COMMAND_ADDED_VERSION;
-import static org.apache.geode.management.internal.functions.CliFunctionResult.StatusState.ERROR;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_EXCLUDE_REGION_HELP;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_INCLUDE_REGION_HELP;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES;
+import static org.apache.geode.management.internal.i18n.CliStrings.REDUNDANCY_REASSIGN_PRIMARIES_HELP;
+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY;
+import static org.apache.geode.management.internal.i18n.CliStrings.RESTORE_REDUNDANCY_HELP;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.functions.RedundancyCommandFunction;
-import org.apache.geode.management.internal.functions.CliFunctionResult;
-import org.apache.geode.management.internal.operation.RebalanceOperationPerformer;
-public class RestoreRedundancyCommand extends GfshCommand {
-  static final String COMMAND_NAME = "restore redundancy";
-  private static final String COMMAND_HELP =
-      "Restore redundancy and optionally reassign primary bucket hosting for partitioned regions in connected members. The default is for all regions to have redundancy restored and for primary buckets to be reassigned for better load balance.";
-  static final String INCLUDE_REGION = "include-region";
-  private static final String INCLUDE_REGION_HELP =
-      "Partitioned regions to be included when restoring redundancy. If a colocated region is included, all regions colocated with that region will also be included automatically. Includes take precedence over excludes.";
-  static final String EXCLUDE_REGION = "exclude-region";
-  private static final String EXCLUDE_REGION_HELP =
-      "Partitioned regions to be excluded when restoring redundancy.";
-  static final String REASSIGN_PRIMARIES = "reassign-primaries";
-  private static final String REASSIGN_PRIMARIES_HELP =
-      "If false, this operation will not attempt to reassign which members host primary buckets.";
-
-  @CliCommand(value = COMMAND_NAME, help = COMMAND_HELP)
+public class RestoreRedundancyCommand extends RedundancyCommand {
+  @CliCommand(value = RESTORE_REDUNDANCY, help = RESTORE_REDUNDANCY_HELP)
-  public ResultModel execute(
-      @CliOption(key = INCLUDE_REGION, help = INCLUDE_REGION_HELP) String[] includeRegions,
-      @CliOption(key = EXCLUDE_REGION, help = EXCLUDE_REGION_HELP) String[] excludeRegions,
-      @CliOption(key = REASSIGN_PRIMARIES, help = REASSIGN_PRIMARIES_HELP,
+  public ResultModel executeRestoreRedundancy(
+      @CliOption(key = REDUNDANCY_INCLUDE_REGION,
+          help = REDUNDANCY_INCLUDE_REGION_HELP) String[] includeRegions,
+      @CliOption(key = REDUNDANCY_EXCLUDE_REGION,
+          help = REDUNDANCY_EXCLUDE_REGION_HELP) String[] excludeRegions,
+      @CliOption(key = REDUNDANCY_REASSIGN_PRIMARIES, help = REDUNDANCY_REASSIGN_PRIMARIES_HELP,
-
-    RedundancyCommandUtils utils = getUtils();
-
-    List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion = new ArrayList<>();
-    List<String> includedRegionsWithNoMembers = new ArrayList<>();
-
-    utils.populateLists(membersForEachRegion, includedRegionsWithNoMembers, includeRegions,
-        excludeRegions, (InternalCache) getCache());
-
-    for (RebalanceOperationPerformer.MemberPRInfo prInfo : membersForEachRegion) {
-      // Filter out any members using older versions of Geode
-      List<DistributedMember> viableMembers =
-          utils.filterViableMembersForVersion(prInfo, REDUNDANCY_COMMAND_ADDED_VERSION);
-
-      if (viableMembers.size() == 0) {
-        // If no viable members were found, return with error status
-        return utils.getNoViableMembersResult(REDUNDANCY_COMMAND_ADDED_VERSION, prInfo.region);
-      } else {
-        // Update the MemberPRInfo with the viable members
-        prInfo.dsMemberList = viableMembers;
-      }
-    }
-
-    List<CliFunctionResult> functionResults = executeFunctionOnMembers(includeRegions,
-        excludeRegions, reassignPrimaries, membersForEachRegion);
-
-    return utils.buildResultModelFromFunctionResults(functionResults, includedRegionsWithNoMembers,
-        false);
-  }
-
-  List<CliFunctionResult> executeFunctionOnMembers(String[] includeRegions, String[] excludeRegions,
-      boolean shouldReassignPrimaries,
-      List<RebalanceOperationPerformer.MemberPRInfo> membersForEachRegion) {
-    List<CliFunctionResult> functionResults = new ArrayList<>();
-    Object[] functionArgs =
-        new Object[] {includeRegions, excludeRegions, shouldReassignPrimaries};
-    List<DistributedMember> completedMembers = new ArrayList<>();
-
-    for (RebalanceOperationPerformer.MemberPRInfo memberPRInfo : membersForEachRegion) {
-
-      // Check to see if an earlier function execution has already targeted a member hosting this
-      // region. If one has, there is no point sending a function for this region as it has already
-      // had redundancy restored
-      if (!Collections.disjoint(completedMembers, memberPRInfo.dsMemberList)) {
-        continue;
-      }
-      // Try the function on the first member for this region
-      DistributedMember targetMember = memberPRInfo.dsMemberList.get(0);
-      CliFunctionResult functionResult = executeFunctionAndGetFunctionResult(
-          new RedundancyCommandFunction(), functionArgs, targetMember);
-      if (functionResult.getStatus().equals(ERROR.name())) {
-        // Record the error and then give up
-        functionResults.add(functionResult);
-        break;
-      }
-      functionResults.add(functionResult);
-      completedMembers.add(targetMember);
-    }
-    return functionResults;
-  }
-
-  // Extracted for testing
-  RedundancyCommandUtils getUtils() {
-    return new RedundancyCommandUtils();
+    return super.execute(includeRegions, excludeRegions, reassignPrimaries);

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD42 UPD42 MOV5 MOV5 INS41 UPD42 UPD42 INS48 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL32 DEL21 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL40 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31