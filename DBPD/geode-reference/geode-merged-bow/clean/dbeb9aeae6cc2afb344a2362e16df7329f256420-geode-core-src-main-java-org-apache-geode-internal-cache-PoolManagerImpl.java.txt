Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
-  private volatile Map<String,Pool> pools = Collections.emptyMap();
-  private volatile Iterator<Map.Entry<String,Pool>> itrForEmergencyClose = null;
+
+  private volatile Map<String, Pool> pools = Collections.emptyMap();
+  private volatile Iterator<Map.Entry<String, Pool>> itrForEmergencyClose = null;
-   * True if this manager is a normal one owned by the PoolManager.
-   * False if this is a special one owned by a xml CacheCreation.
+   * True if this manager is a normal one owned by the PoolManager. False if this is a special one
+   * owned by a xml CacheCreation.
-   * @param addListener will be true if the is a real manager that needs to
-   *                    register a connect listener. False if it is a fake
-   *                    manager used internally by the XML code.
+   * @param addListener will be true if the is a real manager that needs to register a connect
+   *        listener. False if it is a fake manager used internally by the XML code.
-   * Returns true if this is a normal manager; false if it is a fake one used
-   * for xml parsing.
+   * Returns true if this is a normal manager; false if it is a fake one used for xml parsing.
-  
+
-   * Creates a new {@link PoolFactory pool factory},
-   * which is used to configure and create new {@link Pool}s.
+   * Creates a new {@link PoolFactory pool factory}, which is used to configure and create new
+   * {@link Pool}s.
+   * 
+
-   * Find by name an existing connection pool returning
-   * the existing pool or <code>null</code> if it does not exist.
+   * Find by name an existing connection pool returning the existing pool or <code>null</code> if it
+   * does not exist.
+   * 
-  
+
-    synchronized(poolLock) {
-      for (Iterator<Map.Entry<String,Pool>> itr = pools.entrySet().iterator(); itr.hasNext(); ) {
-        Map.Entry<String,Pool> entry = itr.next();
-        PoolImpl pool = (PoolImpl)entry.getValue();
+    synchronized (poolLock) {
+      for (Iterator<Map.Entry<String, Pool>> itr = pools.entrySet().iterator(); itr.hasNext();) {
+        Map.Entry<String, Pool> entry = itr.next();
+        PoolImpl pool = (PoolImpl) entry.getValue();
-  
+
-  public Map<String,Pool> getMap() {
-    //debugStack("getMap: " + this.pools);
-    return new HashMap<String,Pool>(this.pools);
+  public Map<String, Pool> getMap() {
+    // debugStack("getMap: " + this.pools);
+    return new HashMap<String, Pool>(this.pools);
+
+   * 
-      Map<String,Pool> copy = new HashMap<String,Pool>(pools);
+      Map<String, Pool> copy = new HashMap<String, Pool>(pools);
-      //debugStack("register pool=" + name);
+      // debugStack("register pool=" + name);
-        throw new IllegalStateException(LocalizedStrings.
-            PoolManagerImpl_POOL_NAMED_0_ALREADY_EXISTS.toLocalizedString(name));
+        throw new IllegalStateException(
+            LocalizedStrings.PoolManagerImpl_POOL_NAMED_0_ALREADY_EXISTS.toLocalizedString(name));
-//      Boolean specialCase=Boolean.getBoolean("gemfire.SPECIAL_DURABLE");
-//      if(specialCase && copy.size()>1){
-//          throw new IllegalStateException("Using SPECIAL_DURABLE system property"
-//          + " and more than one pool already exists in client.");
-//      }
+      // Boolean specialCase=Boolean.getBoolean("gemfire.SPECIAL_DURABLE");
+      // if(specialCase && copy.size()>1){
+      // throw new IllegalStateException("Using SPECIAL_DURABLE system property"
+      // + " and more than one pool already exists in client.");
+      // }
+   * 
-    synchronized(this.poolLock) {
-      Map<String,Pool> copy = new HashMap<String,Pool>(pools);
+    synchronized (this.poolLock) {
+      Map<String, Pool> copy = new HashMap<String, Pool>(pools);
-      //debugStack("unregister pool=" + name);
+      // debugStack("unregister pool=" + name);
-  
+
-    result.append(super.toString())
-      .append("-")
-      .append(this.normalManager? "normal":"xml");
+    result.append(super.toString()).append("-").append(this.normalManager ? "normal" : "xml");
-    Map<String,Pool> pools = PoolManager.getAll();
-    for(Iterator<Pool> itr = pools.values().iterator(); itr.hasNext(); ) {
+    Map<String, Pool> pools = PoolManager.getAll();
+    for (Iterator<Pool> itr = pools.values().iterator(); itr.hasNext();) {
-        //TODO - handle an exception and attempt on all pools?
+        // TODO - handle an exception and attempt on all pools?
-      throw new IllegalStateException(LocalizedStrings.PoolManagerImpl_ONLY_DURABLE_CLIENTS_SHOULD_CALL_READYFOREVENTS.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.PoolManagerImpl_ONLY_DURABLE_CLIENTS_SHOULD_CALL_READYFOREVENTS
+              .toLocalizedString());
-    for(Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext(); ) {
+    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
-        if(eventId == null) {
-          //cache must not exist, do nothing
-        } else {
-          RegisterInstantiatorsOp.execute(next, instantiators, InternalInstantiator.generateEventId());
-        }
-      } catch(RuntimeException e) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
-      } finally {
-        next.releaseThreadLocalConnection();
-      }
-    }
-  }
-  
-  public static void allPoolsRegisterInstantiator(InstantiatorAttributesHolder holder) {
-    InstantiatorAttributesHolder[] holders = new InstantiatorAttributesHolder[1];
-    holders[0] = holder;
-    for(Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext(); ) {
-      PoolImpl next = (PoolImpl) itr.next();
-      try {
-        EventID eventId = InternalInstantiator.generateEventId();
-        if(eventId == null) {
-          //cache must not exist, do nothing
-        } else {
-          RegisterInstantiatorsOp.execute(next, holders, InternalInstantiator.generateEventId());
-        }
-      } catch(RuntimeException e) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
-      } finally {
-        next.releaseThreadLocalConnection();
-      }
-    }
-  }
-  
-  public static void allPoolsRegisterDataSerializers(
-      DataSerializer dataSerializer) {
-    DataSerializer[] dataSerializers = new DataSerializer[1];
-    dataSerializers[0] = dataSerializer;
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr
-        .hasNext();) {
-      PoolImpl next = (PoolImpl)itr.next();
-      try {
-        EventID eventId = (EventID)dataSerializer.getEventId();
-        if (eventId == null) {
-          eventId = InternalDataSerializer.generateEventId();
-        }
+        } else {
+          RegisterInstantiatorsOp.execute(next, instantiators,
+              InternalInstantiator.generateEventId());
-        else {
-          RegisterDataSerializersOp.execute(next, dataSerializers, eventId);
-        }
-      }
-      catch (RuntimeException e) {
-        logger.warn(LocalizedMessage.create(
-                LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL),
-                e);
-      }
-      finally {
+      } catch (RuntimeException e) {
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
+      } finally {
-  public static void allPoolsRegisterDataSerializers(
-      SerializerAttributesHolder holder) {
+  public static void allPoolsRegisterInstantiator(InstantiatorAttributesHolder holder) {
+    InstantiatorAttributesHolder[] holders = new InstantiatorAttributesHolder[1];
+    holders[0] = holder;
+    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
+      PoolImpl next = (PoolImpl) itr.next();
+      try {
+        EventID eventId = InternalInstantiator.generateEventId();
+        if (eventId == null) {
+          // cache must not exist, do nothing
+        } else {
+          RegisterInstantiatorsOp.execute(next, holders, InternalInstantiator.generateEventId());
+        }
+      } catch (RuntimeException e) {
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
+      } finally {
+        next.releaseThreadLocalConnection();
+      }
+    }
+  }
+
+  public static void allPoolsRegisterDataSerializers(DataSerializer dataSerializer) {
+    DataSerializer[] dataSerializers = new DataSerializer[1];
+    dataSerializers[0] = dataSerializer;
+    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
+      PoolImpl next = (PoolImpl) itr.next();
+      try {
+        EventID eventId = (EventID) dataSerializer.getEventId();
+        if (eventId == null) {
+          eventId = InternalDataSerializer.generateEventId();
+        }
+        if (eventId == null) {
+          // cache must not exist, do nothing
+        } else {
+          RegisterDataSerializersOp.execute(next, dataSerializers, eventId);
+        }
+      } catch (RuntimeException e) {
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
+      } finally {
+        next.releaseThreadLocalConnection();
+      }
+    }
+  }
+
+  public static void allPoolsRegisterDataSerializers(SerializerAttributesHolder holder) {
-    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr
-        .hasNext();) {
-      PoolImpl next = (PoolImpl)itr.next();
+    for (Iterator<Pool> itr = PoolManager.getAll().values().iterator(); itr.hasNext();) {
+      PoolImpl next = (PoolImpl) itr.next();
-        EventID eventId = (EventID)holder.getEventId();
+        EventID eventId = (EventID) holder.getEventId();
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL),
-            e);
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.PoolmanagerImpl_ERROR_REGISTERING_INSTANTIATOR_ON_POOL), e);
-    if(impl == null) {
+    if (impl == null) {
-    Iterator<Map.Entry<String,Pool>> itr= impl.itrForEmergencyClose;
-    if(itr == null) {
+    Iterator<Map.Entry<String, Pool>> itr = impl.itrForEmergencyClose;
+    if (itr == null) {
-    while(itr.hasNext()) {
+    while (itr.hasNext()) {
-  public Pool find(Region<?,?> region) {
+  public Pool find(Region<?, ?> region) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66