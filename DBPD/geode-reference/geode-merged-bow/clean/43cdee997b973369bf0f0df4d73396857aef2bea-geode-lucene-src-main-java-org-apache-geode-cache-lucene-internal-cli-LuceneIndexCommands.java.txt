GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests

-import org.apache.geode.cache.Region;
-import org.apache.geode.management.internal.cli.LogWrapper;
-          help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP) final String[] analyzers) {
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP) final String[] analyzers)
+      throws CommandResultException {
-    try {
-      final InternalCache cache = getCache();
+    final InternalCache cache = getCache();
-      // trim fields for any leading trailing spaces.
-      String[] trimmedFields = Arrays.stream(fields).map(String::trim).toArray(String[]::new);
-      LuceneIndexInfo indexInfo =
-          new LuceneIndexInfo(indexName, regionPath, trimmedFields, analyzers);
+    // trim fields for any leading trailing spaces.
+    String[] trimmedFields = Arrays.stream(fields).map(String::trim).toArray(String[]::new);
+    LuceneIndexInfo indexInfo =
+        new LuceneIndexInfo(indexName, regionPath, trimmedFields, analyzers);
-      final ResultCollector<?, ?> rc =
-          this.executeFunctionOnAllMembers(createIndexFunction, indexInfo);
-      final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
+    final ResultCollector<?, ?> rc = executeFunctionOnAllMembers(createIndexFunction, indexInfo);
+    final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
-      final TabularResultData tabularResult = ResultBuilder.createTabularResultData();
-      for (final CliFunctionResult cliFunctionResult : funcResults) {
-        tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
+    final TabularResultData tabularResult = ResultBuilder.createTabularResultData();
+    for (final CliFunctionResult cliFunctionResult : funcResults) {
+      tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
-        if (cliFunctionResult.isSuccessful()) {
-          tabularResult.accumulate("Status", "Successfully created lucene index");
-          // if (xmlEntity == null) {
-          // xmlEntity = cliFunctionResult.getXmlEntity();
-          // }
-        } else {
-          tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
-        }
+      if (cliFunctionResult.isSuccessful()) {
+        tabularResult.accumulate("Status", "Successfully created lucene index");
+        // if (xmlEntity == null) {
+        // xmlEntity = cliFunctionResult.getXmlEntity();
+        // }
+      } else {
+        tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
-      result = ResultBuilder.buildResult(tabularResult);
-    } catch (IllegalArgumentException iae) {
-      LogWrapper.getInstance().info(iae.getMessage());
-      result = ResultBuilder.createUserErrorResult(iae.getMessage());
-    } catch (CommandResultException crex) {
-      result = crex.getResult();
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
-    // TODO - store in cluster config
-    // if (xmlEntity != null) {
-    // result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,
-    // groups));
-    // }
+    result = ResultBuilder.buildResult(tabularResult);
+
-    if (StringUtils.isBlank(regionPath) || regionPath.equals(Region.SEPARATOR)) {
-      return ResultBuilder.createInfoResult(
-          CliStrings.format(LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__REGION_CANNOT_BE_EMPTY));
-    }
-
-
-    try {
-      List<CliFunctionResult> accumulatedResults = new ArrayList<>();
-      final XmlEntity xmlEntity =
-          executeDestroyIndexFunction(accumulatedResults, indexName, regionPath);
-      result = getDestroyIndexResult(accumulatedResults, indexName, regionPath);
-      if (xmlEntity != null) {
-        persistClusterConfiguration(result, () -> {
-          // Delete the xml entity to remove the index(es) in all groups
-          getSharedConfiguration().deleteXmlEntity(xmlEntity, null);
-        });
-      }
-    } catch (FunctionInvocationTargetException ignore) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESTROY_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      result = ResultBuilder.createInfoResult(e.getMessage());
-    } catch (Throwable t) {
-      t.printStackTrace();
-      SystemFailure.checkFailure();
-      getCache().getLogger().warning(LuceneCliStrings.LUCENE_DESTROY_INDEX__EXCEPTION_MESSAGE, t);
-      result = ResultBuilder.createGemFireErrorResult(t.getMessage());
+    List<CliFunctionResult> accumulatedResults = new ArrayList<>();
+    final XmlEntity xmlEntity =
+        executeDestroyIndexFunction(accumulatedResults, indexName, regionPath);
+    result = getDestroyIndexResult(accumulatedResults, indexName, regionPath);
+    if (xmlEntity != null) {
+      persistClusterConfiguration(result, () -> {
+        // Delete the xml entity to remove the index(es) in all groups
+        getSharedConfiguration().deleteXmlEntity(xmlEntity, null);
+      });
+

MOV43 MOV8 MOV8 MOV60 MOV60 MOV21 MOV41 MOV25 MOV21 MOV60 MOV41 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8