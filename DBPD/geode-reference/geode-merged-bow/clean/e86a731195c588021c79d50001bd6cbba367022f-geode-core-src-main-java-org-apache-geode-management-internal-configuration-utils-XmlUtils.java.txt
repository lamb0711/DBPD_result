Merge branch 'release/1.3.0'

-import static javax.xml.XMLConstants.NULL_NS_URI;
-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.internal.cache.xmlcache.CacheXmlParser;
-import org.apache.geode.management.internal.configuration.domain.CacheElement;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import java.util.ArrayList;
-import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+import org.apache.geode.internal.cache.xmlcache.CacheXml;
+import org.apache.geode.internal.cache.xmlcache.CacheXmlParser;
+import org.apache.geode.management.internal.configuration.domain.CacheElement;
+import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+
-    Document doc = null;
+    Document doc;
-          // TODO this should really be checking all attributes in xmlEntity.getAttributes
-   * @param xmlDefintion
+   * @param xmlDefinition
-  private static Node createNode(Document owner, String xmlDefintion)
+  private static Node createNode(Document owner, String xmlDefinition)
-    InputSource inputSource = new InputSource(new StringReader(xmlDefintion));
+    InputSource inputSource = new InputSource(new StringReader(xmlDefinition));
-  public static Map<String, List<String>> buildSchemaLocationMap(final String schemaLocation) {
-    return buildSchemaLocationMap(new HashMap<String, List<String>>(), schemaLocation);
-  }
-
-  /**
-   * Build schema location map of schemas used in given <code>schemaLocationAttribute</code> and
-   * adds them to the given <code>schemaLocationMap</code>.
-   * 
-   * @see <a href="http://www.w3.org/TR/xmlschema-0/#schemaLocation">XML Schema Part 0: Primer
-   *      Second Edition | 5.6 schemaLocation</a>
-   * 
-   * @param schemaLocationMap {@link Map} to add schema locations to.
-   * @param schemaLocation attribute value to build schema location map from.
-   * @return {@link Map} of schema namespace URIs to location URLs.
-   * @since GemFire 8.1
-   */
-  static Map<String, List<String>> buildSchemaLocationMap(
-      Map<String, List<String>> schemaLocationMap, final String schemaLocation) {
-    if (null == schemaLocation) {
-      return schemaLocationMap;
-    }
-
-    if (null == schemaLocation || schemaLocation.isEmpty()) {
-      // should really ever be null but being safe.
+  public static Map<String, String> buildSchemaLocationMap(final String schemaLocation) {
+    Map<String, String> schemaLocationMap = new HashMap<>();
+    if (StringUtils.isBlank(schemaLocation)) {
-      List<String> locs = schemaLocationMap.get(ns);
-      if (null == locs) {
-        locs = new ArrayList<>();
-        schemaLocationMap.put(ns, locs);
-      }
-      if (!locs.contains(loc)) {
-        locs.add(loc);
-      }
+      schemaLocationMap.put(ns, loc);
-   * Deletes all the node from the document which match the definition provided by xmlentity
+   * Deletes all the node from the document which match the definition provided by xmlEntity
-    private HashMap<String, String> prefixToUri = new HashMap<String, String>();
-    private HashMap<String, String> uriToPrefix = new HashMap<String, String>();
+    private HashMap<String, String> prefixToUri = new HashMap<>();
+    private HashMap<String, String> uriToPrefix = new HashMap<>();
-      throws IOException, TransformerFactoryConfigurationError, TransformerException {
+      throws TransformerFactoryConfigurationError, TransformerException {
-    String xmlString = result.getWriter().toString();
-    return xmlString;
+    return result.getWriter().toString();
-  // UnitTest SharedConfigurationTest.testCreateAndUpgradeDocumentFromXml()
-      // doc.setDocType(null);
-
-
+    // since root is the cache element, then this oldNamespace will be the cache's namespaceURI
+    String oldNamespaceUri = root.getNamespaceURI();
-    final Map<String, String> namespacePrefixMap = buildNamespacePrefixMap(root);
-
-    // Add CacheXml namespace if missing.
-    String cachePrefix = namespacePrefixMap.get(namespaceUri);
-    if (null == cachePrefix) {
-      // Default to null prefix.
-      cachePrefix = NULL_NS_URI;
-      // Move all into new namespace
-      changeNamespace(root, NULL_NS_URI, namespaceUri);
-      namespacePrefixMap.put(namespaceUri, cachePrefix);
+    // update the namespace
+    if (!namespaceUri.equals(oldNamespaceUri)) {
+      changeNamespace(root, oldNamespaceUri, namespaceUri);
-    // Add schema instance namespace if missing.
-    String xsiPrefix = namespacePrefixMap.get(W3C_XML_SCHEMA_INSTANCE_NS_URI);
-    if (null == xsiPrefix) {
+    // update the version
+    root.setAttribute("version", schemaVersion);
+
+    // update the schemaLocation attribute
+    Node schemaLocationAttr = root.getAttributeNodeNS(W3C_XML_SCHEMA_INSTANCE_NS_URI,
+        W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION);
+    String xsiPrefix = findPrefix(root, W3C_XML_SCHEMA_INSTANCE_NS_URI);;
+    Map<String, String> uriToLocation = new HashMap<>();
+    if (schemaLocationAttr != null) {
+      uriToLocation = buildSchemaLocationMap(schemaLocationAttr.getNodeValue());
+    } else if (xsiPrefix == null) {
+      // this namespace is not defined yet, define it
-      namespacePrefixMap.put(W3C_XML_SCHEMA_INSTANCE_NS_URI, xsiPrefix);
-    // Create schemaLocation attribute if missing.
-    final String schemaLocationAttribute = getAttribute(root,
-        W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION, W3C_XML_SCHEMA_INSTANCE_NS_URI);
+    uriToLocation.remove(oldNamespaceUri);
+    uriToLocation.put(namespaceUri, schemaLocation);
-    // Update schemaLocation for namespace.
-    final Map<String, List<String>> schemaLocationMap =
-        buildSchemaLocationMap(schemaLocationAttribute);
-    List<String> schemaLocations = schemaLocationMap.get(namespaceUri);
-    if (null == schemaLocations) {
-      schemaLocations = new ArrayList<String>();
-      schemaLocationMap.put(namespaceUri, schemaLocations);
-    }
-    schemaLocations.clear();
-    schemaLocations.add(schemaLocation);
-    String schemaLocationValue = getSchemaLocationValue(schemaLocationMap);
-        xsiPrefix + ":" + W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION, schemaLocationValue);
-
-    // Set schema version
-    if (cachePrefix == null || cachePrefix.isEmpty()) {
-      root.setAttribute("version", schemaVersion);
-    } else {
-      root.setAttributeNS(namespaceUri, cachePrefix + ":version", schemaVersion);
-    }
+        xsiPrefix + ":" + W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION,
+        getSchemaLocationValue(uriToLocation));
-  private static String getSchemaLocationValue(final Map<String, List<String>> schemaLocationMap) {
+  private static String getSchemaLocationValue(final Map<String, String> schemaLocationMap) {
-    for (final Map.Entry<String, List<String>> entry : schemaLocationMap.entrySet()) {
-      for (final String schemaLocation : entry.getValue()) {
-        if (sb.length() > 0) {
-          sb.append(' ');
-        }
-        sb.append(entry.getKey()).append(' ').append(schemaLocation);
+    for (final Map.Entry<String, String> entry : schemaLocationMap.entrySet()) {
+      if (sb.length() > 0) {
+        sb.append(' ');
+      sb.append(entry.getKey()).append(' ').append(entry.getValue());
-  /**
-   * Build {@link Map} of namespace URIs to prefixes.
-   * 
-   * @param root {@link Element} to get namespaces and prefixes from.
-   * @return {@link Map} of namespace URIs to prefixes.
-   * @since GemFire 8.1
-   */
-  private static Map<String, String> buildNamespacePrefixMap(final Element root) {
-    final HashMap<String, String> namespacePrefixMap = new HashMap<>();
-
-    // Look for all of the attributes of cache that start with
-    // xmlns
+  static String findPrefix(final Element root, final String namespaceUri) {
+    // Look for all of the attributes of cache that start with xmlns
-        // Anything after the colon is the prefix
-        // eg xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-        // has a prefix of xsi
-        String[] splitName = item.getNodeName().split(":");
-        String prefix;
-        if (splitName.length > 1) {
-          prefix = splitName[1];
-        } else {
-          prefix = "";
+        if (item.getNodeValue().equals(namespaceUri)) {
+          String[] splitName = item.getNodeName().split(":");
+          if (splitName.length > 1) {
+            return splitName[1];
+          } else {
+            return "";
+          }
-        String uri = item.getTextContent();
-        namespacePrefixMap.put(uri, prefix);
-
-    return namespacePrefixMap;
+    return null;
-  public static void modifyRootAttributes(Document doc, XmlEntity xmlEntity) throws IOException {
+  public static void modifyRootAttributes(Document doc, XmlEntity xmlEntity) {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV29 INS83 MOV74 MOV8 MOV43 INS42 INS44 UPD42 MOV43 MOV43 MOV43 INS60 INS61 MOV74 MOV74 INS25 MOV21 INS20 MOV21 MOV74 MOV60 MOV41 INS83 INS43 INS42 UPD42 MOV42 MOV42 UPD74 MOV74 INS59 INS32 MOV32 INS8 UPD66 MOV32 MOV43 INS38 MOV8 INS43 MOV43 UPD74 UPD27 MOV25 MOV44 MOV32 MOV42 INS33 UPD43 INS43 INS42 INS14 INS42 INS42 INS42 MOV60 MOV60 MOV21 UPD74 UPD74 UPD42 INS32 INS42 UPD42 UPD42 UPD43 MOV43 MOV43 UPD42 MOV14 UPD42 INS33 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV27 INS32 UPD74 UPD42 INS42 UPD74 MOV74 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 UPD42 INS33 INS42 UPD42 MOV42 MOV43 INS8 UPD42 UPD43 UPD42 UPD42 INS42 INS32 MOV32 INS25 UPD42 INS42 INS32 INS32 MOV8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS41 MOV2 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL33 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL33 DEL42 DEL27 DEL33 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL25 DEL83 DEL42 DEL83 DEL74 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL8 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL70 DEL8 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43