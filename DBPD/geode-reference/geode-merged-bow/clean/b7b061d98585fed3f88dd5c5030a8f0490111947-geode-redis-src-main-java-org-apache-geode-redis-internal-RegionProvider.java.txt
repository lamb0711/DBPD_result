GEODE-7747: Refactor - extract class KeyRegistrar (#4647)

KeyRegistrar encapsulates info about keys that are inserted via the
Redis API. It uses a Geode Region to store a map from key -> RedisDataType
-import java.util.Set;
-  private final Region<String, RedisDataType> redisMetaRegion;
+  private final KeyRegistrar keyRegistrar;
-      Region<String, RedisDataType> redisMetaRegion,
+      KeyRegistrar redisMetaRegion,
-    this.redisMetaRegion = redisMetaRegion;
+    this.keyRegistrar = redisMetaRegion;
-  public boolean existsKey(ByteArrayWrapper key) {
-    return this.redisMetaRegion.containsKey(key.toString());
-  }
-
-  public Set<String> metaKeySet() {
-    return this.redisMetaRegion.keySet();
-  }
-
-  public Set<Map.Entry<String, RedisDataType>> metaEntrySet() {
-    return this.redisMetaRegion.entrySet();
-  }
-
-  public int getMetaSize() {
-    return this.redisMetaRegion.size() - RedisConstants.NUM_DEFAULT_KEYS;
-  }
-
-  private boolean metaRemoveEntry(ByteArrayWrapper key) {
-    return this.redisMetaRegion.remove(key.toString()) != null;
-  }
-
-  public RedisDataType metaPutIfAbsent(ByteArrayWrapper key, RedisDataType value) {
-    return this.redisMetaRegion.putIfAbsent(key.toString(), value);
-  }
-
-  public RedisDataType metaPut(ByteArrayWrapper key, RedisDataType value) {
-    return this.redisMetaRegion.put(key.toString(), value);
-  }
-
-  public RedisDataType metaGet(ByteArrayWrapper key) {
-    return this.redisMetaRegion.get(key.toString());
-  }
-
-    RedisDataType type = getRedisDataType(key);
+    RedisDataType type = this.keyRegistrar.getType(key);
-      metaRemoveEntry(key);
+      this.keyRegistrar.unregister(key);
-    checkDataType(key, type);
+    this.keyRegistrar.validate(key, type);
-              RedisDataType existingType = metaPutIfAbsent(key, type);
-              if (existingType != null && existingType != type)
-                throw new RedisDataTypeMismatchException(
-                    "The key name \"" + key + "\" is already used by a " + existingType.toString());
+              this.keyRegistrar.register(key, type);
-  /**
-   * Checks if the given key is associated with the passed data type. If there is a mismatch, a
-   * {@link RuntimeException} is thrown
-   *
-   * @param key Key to check
-   * @param type Type to check to
-   */
-  protected void checkDataType(ByteArrayWrapper key, RedisDataType type) {
-    RedisDataType currentType = redisMetaRegion.get(key.toString());
-    if (currentType == null)
-      return;
-    if (currentType == RedisDataType.REDIS_PROTECTED)
-      throw new RedisDataTypeMismatchException("The key name \"" + key + "\" is protected");
-    if (currentType != type)
-      throw new RedisDataTypeMismatchException(
-          "The key name \"" + key + "\" is already used by a " + currentType.toString());
-  }
-
-  private RedisDataType getRedisDataType(String key) {
-    return this.redisMetaRegion.get(key);
-  }
-
-  public RedisDataType getRedisDataType(ByteArrayWrapper key) {
-    return getRedisDataType(key.toString());
-  }
-
-    RedisDataType type = getRedisDataType(key);
+    RedisDataType type = this.keyRegistrar.getType(key);
-    RedisDataType type = getRedisDataType(key);
+    RedisDataType type = this.keyRegistrar.getType(key);

INS43 UPD42 MOV42 UPD42 INS43 UPD42 MOV42 MOV43 MOV43 INS22 UPD42 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 INS22 UPD42 INS52 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS21 INS32 INS22 INS42 MOV42 MOV42 INS52 INS42 DEL40 DEL26 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL40 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL25 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL25 DEL42 DEL40 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL25 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43