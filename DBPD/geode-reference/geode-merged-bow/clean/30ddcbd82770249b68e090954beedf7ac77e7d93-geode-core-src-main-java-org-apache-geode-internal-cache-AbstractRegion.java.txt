GEODE-6588: Cleanup static analyzer warnings and generics (#3646)


-  private boolean isGatewaySenderEnabled = false;
-
-  protected AbstractRegion(InternalCache cache, RegionAttributes attrs, String regionName,
+  protected AbstractRegion(InternalCache cache, RegionAttributes<?, ?> attrs, String regionName,
-    this.serialNumber = DistributionAdvisor.createSerialNumber();
-    this.isPdxTypesRegion = PeerTypeRegistration.REGION_NAME.equals(regionName);
-    this.lastAccessedTime = new AtomicLong(cacheTimeMillis());
-    this.lastModifiedTime = new AtomicLong(this.lastAccessedTime.get());
-    this.dataPolicy = attrs.getDataPolicy(); // do this one first
-    this.scope = attrs.getScope();
+    serialNumber = DistributionAdvisor.createSerialNumber();
+    isPdxTypesRegion = PeerTypeRegistration.REGION_NAME.equals(regionName);
+    lastAccessedTime = new AtomicLong(cacheTimeMillis());
+    lastModifiedTime = new AtomicLong(lastAccessedTime.get());
+    dataPolicy = attrs.getDataPolicy(); // do this one first
+    scope = attrs.getScope();
-    this.offHeap = attrs.getOffHeap();
+    offHeap = attrs.getOffHeap();
-    if (this.offHeap && partitionAttributes1 != null) {
+    if (offHeap && partitionAttributes1 != null) {
-    if (attrs.getPartitionAttributes() != null && this.evictionAttributes.getAlgorithm()
+    if (attrs.getPartitionAttributes() != null && evictionAttributes.getAlgorithm()
-        && this.evictionAttributes
+        && evictionAttributes
-          new Object[] {regionName, this.evictionAttributes.getMaximum(),
+          new Object[] {regionName, evictionAttributes.getMaximum(),
-      this.evictionAttributes.setMaximum(attrs.getPartitionAttributes().getLocalMaxMemory());
+      evictionAttributes.setMaximum(attrs.getPartitionAttributes().getLocalMaxMemory());
-    this.regionTimeToLive = attrs.getRegionTimeToLive().getTimeout();
-    this.regionTimeToLiveExpirationAction = attrs.getRegionTimeToLive().getAction();
+    regionTimeToLive = attrs.getRegionTimeToLive().getTimeout();
+    regionTimeToLiveExpirationAction = attrs.getRegionTimeToLive().getAction();
-    this.regionIdleTimeout = attrs.getRegionIdleTimeout().getTimeout();
-    this.regionIdleTimeoutExpirationAction = attrs.getRegionIdleTimeout().getAction();
+    regionIdleTimeout = attrs.getRegionIdleTimeout().getTimeout();
+    regionIdleTimeoutExpirationAction = attrs.getRegionIdleTimeout().getAction();
-    this.entryTimeToLive = attrs.getEntryTimeToLive().getTimeout();
-    this.entryTimeToLiveExpirationAction = attrs.getEntryTimeToLive().getAction();
+    entryTimeToLive = attrs.getEntryTimeToLive().getTimeout();
+    entryTimeToLiveExpirationAction = attrs.getEntryTimeToLive().getAction();
-    this.customEntryTimeToLive = attrs.getCustomEntryTimeToLive();
-    this.entryIdleTimeout = attrs.getEntryIdleTimeout().getTimeout();
-    this.entryIdleTimeoutExpirationAction = attrs.getEntryIdleTimeout().getAction();
+    customEntryTimeToLive = attrs.getCustomEntryTimeToLive();
+    entryIdleTimeout = attrs.getEntryIdleTimeout().getTimeout();
+    entryIdleTimeoutExpirationAction = attrs.getEntryIdleTimeout().getAction();
-    this.customEntryIdleTimeout = attrs.getCustomEntryIdleTimeout();
+    customEntryIdleTimeout = attrs.getCustomEntryIdleTimeout();
-    this.statisticsEnabled = attrs.getStatisticsEnabled();
-    this.ignoreJTA = attrs.getIgnoreJTA();
-    this.isLockGrantor = attrs.isLockGrantor();
-    this.keyConstraint = attrs.getKeyConstraint();
-    this.valueConstraint = attrs.getValueConstraint();
-    this.initialCapacity = attrs.getInitialCapacity();
-    this.loadFactor = attrs.getLoadFactor();
-    this.concurrencyLevel = attrs.getConcurrencyLevel();
-    this.setConcurrencyChecksEnabled(
+    statisticsEnabled = attrs.getStatisticsEnabled();
+    ignoreJTA = attrs.getIgnoreJTA();
+    isLockGrantor = attrs.isLockGrantor();
+    keyConstraint = attrs.getKeyConstraint();
+    valueConstraint = attrs.getValueConstraint();
+    initialCapacity = attrs.getInitialCapacity();
+    loadFactor = attrs.getLoadFactor();
+    concurrencyLevel = attrs.getConcurrencyLevel();
+    setConcurrencyChecksEnabled(
-    this.earlyAck = attrs.getEarlyAck();
-    this.gatewaySenderIds = attrs.getGatewaySenderIds();
-    this.asyncEventQueueIds = attrs.getAsyncEventQueueIds();
+    earlyAck = attrs.getEarlyAck();
+    gatewaySenderIds = attrs.getGatewaySenderIds();
+    asyncEventQueueIds = attrs.getAsyncEventQueueIds();
-    this.enableSubscriptionConflation = attrs.getEnableSubscriptionConflation();
-    this.publisher = attrs.getPublisher();
-    this.enableAsyncConflation = attrs.getEnableAsyncConflation();
-    this.indexMaintenanceSynchronous = attrs.getIndexMaintenanceSynchronous();
-    this.mcastEnabled = attrs.getMulticastEnabled();
-    this.partitionAttributes = attrs.getPartitionAttributes();
-    this.membershipAttributes = attrs.getMembershipAttributes();
-    this.subscriptionAttributes = attrs.getSubscriptionAttributes();
-    this.cloningEnable = attrs.getCloningEnabled();
-    this.poolName = attrs.getPoolName();
-    if (this.poolName != null) {
+    enableSubscriptionConflation = attrs.getEnableSubscriptionConflation();
+    publisher = attrs.getPublisher();
+    enableAsyncConflation = attrs.getEnableAsyncConflation();
+    indexMaintenanceSynchronous = attrs.getIndexMaintenanceSynchronous();
+    mcastEnabled = attrs.getMulticastEnabled();
+    partitionAttributes = attrs.getPartitionAttributes();
+    membershipAttributes = attrs.getMembershipAttributes();
+    subscriptionAttributes = attrs.getSubscriptionAttributes();
+    cloningEnable = attrs.getCloningEnabled();
+    poolName = attrs.getPoolName();
+    if (poolName != null) {
-                this.poolName));
+                poolName));
-      if (cp.getMultiuserAuthentication() && !this.getDataPolicy().isEmpty()) {
+      if (cp.getMultiuserAuthentication() && !getDataPolicy().isEmpty()) {
-    this.diskStoreName = attrs.getDiskStoreName();
-    this.isDiskSynchronous = attrs.isDiskSynchronous();
-    if (this.diskStoreName == null) {
-      this.diskWriteAttributes = attrs.getDiskWriteAttributes();
-      this.isDiskSynchronous = this.diskWriteAttributes.isSynchronous(); // fixes bug 41313
-      this.diskDirs = attrs.getDiskDirs();
-      this.diskSizes = attrs.getDiskDirSizes();
+    diskStoreName = attrs.getDiskStoreName();
+    isDiskSynchronous = attrs.isDiskSynchronous();
+    if (diskStoreName == null) {
+      diskWriteAttributes = attrs.getDiskWriteAttributes();
+      isDiskSynchronous = diskWriteAttributes.isSynchronous(); // fixes bug 41313
+      diskDirs = attrs.getDiskDirs();
+      diskSizes = attrs.getDiskDirSizes();
-    this.compressor = attrs.getCompressor();
+    compressor = attrs.getCompressor();
-    this.cache = null;
-    this.serialNumber = 0;
-    this.isPdxTypesRegion = false;
-    this.lastAccessedTime = new AtomicLong(0);
-    this.lastModifiedTime = new AtomicLong(0);
+    cache = null;
+    serialNumber = 0;
+    isPdxTypesRegion = false;
+    lastAccessedTime = new AtomicLong(0);
+    lastModifiedTime = new AtomicLong(0);
-    this.ignoreJTA = ignore;
+    ignoreJTA = ignore;
+  @SuppressWarnings("unchecked")
+  @SuppressWarnings("unchecked")
-        .append("';dataPolicy=").append(this.getDataPolicy());
-    if (this.getConcurrencyChecksEnabled()) {
+        .append("';dataPolicy=").append(getDataPolicy());
+    if (getConcurrencyChecksEnabled()) {
-      return this.cacheLoader;
+      return cacheLoader;
-      return this.cacheWriter;
+      return cacheWriter;
-    return this.cacheLoader;
+    return cacheLoader;
-    return this.cacheWriter;
+    return cacheWriter;
-    return this.keyConstraint;
+    return keyConstraint;
-    return this.valueConstraint;
+    return valueConstraint;
-    this.regionTimeToLiveAtts =
-        new ExpirationAttributes(this.regionTimeToLive, this.regionTimeToLiveExpirationAction);
+    regionTimeToLiveAtts =
+        new ExpirationAttributes(regionTimeToLive, regionTimeToLiveExpirationAction);
-    return this.regionTimeToLiveAtts;
+    return regionTimeToLiveAtts;
-    this.regionIdleTimeoutAttributes =
-        new ExpirationAttributes(this.regionIdleTimeout, this.regionIdleTimeoutExpirationAction);
+    regionIdleTimeoutAttributes =
+        new ExpirationAttributes(regionIdleTimeout, regionIdleTimeoutExpirationAction);
-    return this.regionIdleTimeoutAttributes;
+    return regionIdleTimeoutAttributes;
-    this.entryTimeToLiveAtts =
-        new ExpirationAttributes(this.entryTimeToLive, this.entryTimeToLiveExpirationAction);
+    entryTimeToLiveAtts =
+        new ExpirationAttributes(entryTimeToLive, entryTimeToLiveExpirationAction);
-    return this.entryTimeToLiveAtts;
+    return entryTimeToLiveAtts;
-    return this.customEntryTimeToLive;
+    return customEntryTimeToLive;
-    this.entryIdleTimeoutAttributes =
-        new ExpirationAttributes(this.entryIdleTimeout, this.entryIdleTimeoutExpirationAction);
+    entryIdleTimeoutAttributes =
+        new ExpirationAttributes(entryIdleTimeout, entryIdleTimeoutExpirationAction);
-    return this.entryIdleTimeoutAttributes;
+    return entryIdleTimeoutAttributes;
-    return this.customEntryIdleTimeout;
+    return customEntryIdleTimeout;
-    if (this.getDataPolicy().isNormal() || this.getDataPolicy().isPreloaded()
-        || this.getDataPolicy().isEmpty() || this.getDataPolicy().withPartitioning()) {
+    if (getDataPolicy().isNormal() || getDataPolicy().isPreloaded()
+        || getDataPolicy().isEmpty() || getDataPolicy().withPartitioning()) {
-    } else if (this.getDataPolicy().withReplication()) {
+    } else if (getDataPolicy().withReplication()) {
-              this.getDataPolicy()));
+              getDataPolicy()));
-    return this.poolName;
+    return poolName;
-    return this.dataPolicy;
+    return dataPolicy;
-    return this.scope;
+    return scope;
-    return this.isPdxTypesRegion;
+    return isPdxTypesRegion;
-    return this.gatewaySenderIds;
+    return gatewaySenderIds;
-    return this.asyncEventQueueIds;
+    return asyncEventQueueIds;
-    return this.visibleAsyncEventQueueIds;
+    return visibleAsyncEventQueueIds;
-    return this.allGatewaySenderIds;
+    return allGatewaySenderIds;
-    Set<GatewaySender> allGatewaySenders = this.cache.getAllGatewaySenders();
-    if ((sz > 0 || this.isPdxTypesRegion) && !allGatewaySenders.isEmpty()) {
+    Set<GatewaySender> allGatewaySenders = cache.getAllGatewaySenders();
+    if ((sz > 0 || isPdxTypesRegion) && !allGatewaySenders.isEmpty()) {
-        if (!this.isPdxTypesRegion) {
+        if (!isPdxTypesRegion) {
-  boolean isGatewaySenderEnabled() {
-    return this.isGatewaySenderEnabled;
-  }
-
-    synchronized (this.clSync) {
+    synchronized (clSync) {
-      this.cacheListeners = value;
+      cacheListeners = value;
-    return this.cacheListeners;
+    return cacheListeners;
-    return this.initialCapacity;
+    return initialCapacity;
-    return this.loadFactor;
+    return loadFactor;
-    return this.isLockGrantor;
+    return isLockGrantor;
-    return this.mcastEnabled;
+    return mcastEnabled;
-    return this.statisticsEnabled;
+    return statisticsEnabled;
-    return this.ignoreJTA;
+    return ignoreJTA;
-    return this.concurrencyLevel;
+    return concurrencyLevel;
-    return this.concurrencyChecksEnabled;
+    return concurrencyChecksEnabled;
-    return this.earlyAck;
+    return earlyAck;
-    return this.publisher;
+    return publisher;
-    return this.enableSubscriptionConflation;
+    return enableSubscriptionConflation;
-    return this.enableAsyncConflation;
+    return enableAsyncConflation;
-    return this.diskWriteAttributes;
+    return diskWriteAttributes;
-    return this.diskStoreName;
+    return diskStoreName;
-    return this.isDiskSynchronous;
+    return isDiskSynchronous;
-    return this.indexMaintenanceSynchronous;
+    return indexMaintenanceSynchronous;
-    return this.partitionAttributes;
+    return partitionAttributes;
-    return this.membershipAttributes;
+    return membershipAttributes;
-    return this.subscriptionAttributes;
+    return subscriptionAttributes;
-    return this.indexManager;
+    return indexManager;
-  public IndexManager setIndexManager(IndexManager indexManager) {
+  public void setIndexManager(IndexManager indexManager) {
-    IndexManager oldIdxManager = this.indexManager;
-    return oldIdxManager;
-    return this.imSync;
+    return imSync;
-      this.allGatewaySenderIds = Collections.emptySet(); // fix for bug 45774
+      allGatewaySenderIds = Collections.emptySet(); // fix for bug 45774
-    Set<String> tmp = new HashSet<String>(this.getGatewaySenderIds());
-    for (String asyncQueueId : this.getAsyncEventQueueIds()) {
+    Set<String> tmp = new HashSet<>(getGatewaySenderIds());
+    for (String asyncQueueId : getAsyncEventQueueIds()) {
-    this.allGatewaySenderIds = Collections.unmodifiableSet(tmp);
+    allGatewaySenderIds = Collections.unmodifiableSet(tmp);
-    Set<String> visibleAsyncEventQueueIds = new CopyOnWriteArraySet<>();
-    // Add all configured aeqIds
-    visibleAsyncEventQueueIds.addAll(getAsyncEventQueueIds());
+    Set<String> visibleAsyncEventQueueIds = new CopyOnWriteArraySet<>(getAsyncEventQueueIds());
-    synchronized (this.clSync) {
-      CacheListener[] oldListeners = this.cacheListeners;
+    synchronized (clSync) {
+      CacheListener[] oldListeners = cacheListeners;
-        this.cacheListeners = new CacheListener[] {wcl};
+        cacheListeners = new CacheListener[] {wcl};
-          this.cacheListeners =
+          cacheListeners =
-    synchronized (this.clSync) {
+    synchronized (clSync) {
-      for (int i = 0; i < this.cacheListeners.length; i++) {
-        CacheListener cl = this.cacheListeners[i];
+      for (int i = 0; i < cacheListeners.length; i++) {
+        CacheListener cl = cacheListeners[i];
-              members = (DistributedMember[]) initialMembers
-                  .toArray(new DistributedMember[initialMembers.size()]);
+              members = (DistributedMember[]) initialMembers.toArray(new DistributedMember[0]);
-              newListeners = new CacheListener[this.cacheListeners.length];
-              System.arraycopy(this.cacheListeners, 0, newListeners, 0, newListeners.length);
+              newListeners = new CacheListener[cacheListeners.length];
+              System.arraycopy(cacheListeners, 0, newListeners, 0, newListeners.length);
-        this.cacheListeners = newListeners;
+        cacheListeners = newListeners;
-    synchronized (this.clSync) {
-      oldListeners = this.cacheListeners;
+    synchronized (clSync) {
+      oldListeners = cacheListeners;
-        this.cacheListeners = EMPTY_LISTENERS;
+        cacheListeners = EMPTY_LISTENERS;
-        this.cacheListeners = newCacheListeners;
+        cacheListeners = newCacheListeners;
-    synchronized (this.clSync) {
-      CacheListener[] oldListeners = this.cacheListeners;
+    synchronized (clSync) {
+      CacheListener[] oldListeners = cacheListeners;
-        List newListeners = new ArrayList(Arrays.asList(oldListeners));
+        List<CacheListener> newListeners = new ArrayList<>(Arrays.asList(oldListeners));
-            this.cacheListeners = EMPTY_LISTENERS;
+            cacheListeners = EMPTY_LISTENERS;
-            this.cacheListeners = newCacheListeners;
+            cacheListeners = newCacheListeners;
-      this.cacheLoader = cl;
+      cacheLoader = cl;
-    if ((this.getDataPolicy().withReplication() || this.getDataPolicy().withPartitioning())
+    if ((getDataPolicy().withReplication() || getDataPolicy().withPartitioning())
-    if (!this.statisticsEnabled) {
+    if (!statisticsEnabled) {
-    this.entryIdleTimeout = idleTimeout.getTimeout();
-    this.entryIdleTimeoutExpirationAction = idleTimeout.getAction();
+    entryIdleTimeout = idleTimeout.getTimeout();
+    entryIdleTimeoutExpirationAction = idleTimeout.getAction();
-    if (custom != null && !this.statisticsEnabled) {
+    if (custom != null && !statisticsEnabled) {
-    this.customEntryIdleTimeout = custom;
+    customEntryIdleTimeout = custom;
-    if (!this.statisticsEnabled) {
+    if (!statisticsEnabled) {
-    this.entryTimeToLive = timeToLive.getTimeout();
-    this.entryTimeToLiveExpirationAction = timeToLive.getAction();
+    entryTimeToLive = timeToLive.getTimeout();
+    entryTimeToLiveExpirationAction = timeToLive.getAction();
-    if (custom != null && !this.statisticsEnabled) {
+    if (custom != null && !statisticsEnabled) {
-    this.customEntryTimeToLive = custom;
+    customEntryTimeToLive = custom;
-    if (this.getAttributes().getDataPolicy().withPartitioning()) {
+    if (getAttributes().getDataPolicy().withPartitioning()) {
-        && this.getDataPolicy().withReplication()) {
+        && getDataPolicy().withReplication()) {
-    if (!this.statisticsEnabled) {
+    if (!statisticsEnabled) {
-    this.regionIdleTimeout = idleTimeout.getTimeout();
-    this.regionIdleTimeoutExpirationAction = idleTimeout.getAction();
-    this.setRegionIdleTimeoutAttributes();
+    regionIdleTimeout = idleTimeout.getTimeout();
+    regionIdleTimeoutExpirationAction = idleTimeout.getAction();
+    setRegionIdleTimeoutAttributes();
-    if (this.getAttributes().getDataPolicy().withPartitioning()) {
+    if (getAttributes().getDataPolicy().withPartitioning()) {
-        && this.getDataPolicy().withReplication()) {
+        && getDataPolicy().withReplication()) {
-    if (!this.statisticsEnabled) {
+    if (!statisticsEnabled) {
-    this.regionTimeToLive = timeToLive.getTimeout();
-    this.regionTimeToLiveExpirationAction = timeToLive.getAction();
-    this.setRegionTimeToLiveAtts();
+    regionTimeToLive = timeToLive.getTimeout();
+    regionTimeToLiveExpirationAction = timeToLive.getAction();
+    setRegionTimeToLiveAtts();
-    if (this.scope != Scope.GLOBAL) {
+    if (scope != Scope.GLOBAL) {
-    this.isLockGrantor = true;
+    isLockGrantor = true;
-    if (!this.statisticsEnabled) {
+    if (!statisticsEnabled) {
-    return this.lastModifiedTime.get();
+    return lastModifiedTime.get();
-    return this.lastAccessedTime.get();
+    return lastAccessedTime.get();
-    this.lastModifiedTime.set(t);
+    lastModifiedTime.set(t);
-    this.lastAccessedTime.set(t);
+    lastAccessedTime.set(t);
-    if (time > this.lastModifiedTime.get()) {
-      this.lastModifiedTime.set(time);
+    if (time > lastModifiedTime.get()) {
+      lastModifiedTime.set(time);
-    if (time > this.lastAccessedTime.get()) {
-      this.lastAccessedTime.set(time);
+    if (time > lastAccessedTime.get()) {
+      lastAccessedTime.set(time);
-    this.lastAccessedTime.set(time);
+    lastAccessedTime.set(time);
-        this.hitCount.getAndIncrement();
+        hitCount.getAndIncrement();
-        this.missCount.getAndIncrement();
+        missCount.getAndIncrement();
-    return this.hitCount.get();
+    return hitCount.get();
-    return this.missCount.get();
+    return missCount.get();
-      this.missCount.set(0);
+      missCount.set(0);
-      this.hitCount.set(0);
+      hitCount.set(0);
-      if (this.cacheLoader != oldLoader) {
+      if (cacheLoader != oldLoader) {
-      if (this.cacheWriter != oldWriter) {
+      if (cacheWriter != oldWriter) {
-    this.entryExpiryPossible = !isProxy() && (hasTimeToLive() || hasIdleTimeout());
+    entryExpiryPossible = !isProxy() && (hasTimeToLive() || hasIdleTimeout());
-    return this.entryTimeToLive > 0 || this.customEntryTimeToLive != null;
+    return entryTimeToLive > 0 || customEntryTimeToLive != null;
-    return this.entryIdleTimeout > 0 || this.customEntryIdleTimeout != null;
+    return entryIdleTimeout > 0 || customEntryIdleTimeout != null;
-    return this.entryExpiryPossible;
+    return entryExpiryPossible;
-    if (this.entryIdleTimeoutExpirationAction != null) {
-      return this.entryIdleTimeoutExpirationAction;
+    if (entryIdleTimeoutExpirationAction != null) {
+      return entryIdleTimeoutExpirationAction;
-    if (this.entryTimeToLiveExpirationAction != null) {
-      return this.entryTimeToLiveExpirationAction;
+    if (entryTimeToLiveExpirationAction != null) {
+      return entryTimeToLiveExpirationAction;
-    return this.evictionAttributes != null && !this.evictionAttributes.getAlgorithm().isNone();
+    return evictionAttributes != null && !evictionAttributes.getAlgorithm().isNone();
-    return this.evictionAttributes;
+    return evictionAttributes;
-    return new EvictionAttributesMutatorImpl(this, this.evictionAttributes);
+    return new EvictionAttributesMutatorImpl(this, evictionAttributes);
-    return this.serialNumber;
+    return serialNumber;
-    return this.cache;
+    return cache;
-    return this.cache.getInternalDistributedSystem().getClock().cacheTimeMillis();
+    return cache.getInternalDistributedSystem().getClock().cacheTimeMillis();
-    return this.cache;
+    return cache;
-    return this.cloningEnable;
+    return cloningEnable;
-    return this.cache;
+    return cache;
+  @SuppressWarnings("unchecked")
-    return this.compressor;
+    return compressor;
-    return this.extensionPoint;
+    return extensionPoint;
-    return this.offHeap;
+    return offHeap;

MOV21 INS79 INS79 MOV78 MOV78 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV78 MOV74 MOV78 MOV78 MOV74 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 INS39 MOV44 MOV44 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 INS79 MOV78 INS74 INS42 INS45 INS42 INS45 INS25 INS21 INS21 INS25 INS21 INS21 MOV25 MOV21 MOV21 MOV25 MOV21 MOV21 INS42 INS45 MOV43 INS76 INS76 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 MOV8 INS7 INS7 INS27 INS38 MOV8 INS7 INS7 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 MOV32 MOV27 INS38 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 MOV43 INS42 INS42 MOV43 INS42 INS42 MOV43 INS42 INS42 INS42 UPD74 MOV32 MOV5 MOV5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 MOV43 INS42 INS42 INS42 MOV5 MOV5 INS40 MOV5 INS34 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL52 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL27 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22