GEODE-6365: Add server group support for list and destroy jdbc-mapping (#3175)

Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>




-import java.util.Collection;
-import java.util.Set;
+import java.util.ArrayList;
+import org.springframework.shell.core.annotation.CliOption;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.connectors.util.internal.MappingCommandUtils;
+import org.apache.geode.distributed.ConfigurationPersistenceService;
+import org.apache.geode.management.cli.ConverterHint;
-import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
+  private static final String LIST_MAPPING__GROUPS_NAME__HELP =
+      "Server Group(s) of the JDBC mappings to list.";
+
-  public ResultModel listMapping() {
-    Collection<RegionMapping> mappings = null;
+  public ResultModel listMapping(@CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
+      optionContext = ConverterHint.MEMBERGROUP,
+      help = LIST_MAPPING__GROUPS_NAME__HELP) String[] groups) {
+    ArrayList<RegionMapping> mappings = new ArrayList<>();
-    Set<DistributedMember> members = findMembers(null, null);
-    if (members.size() > 0) {
-      DistributedMember targetMember = members.iterator().next();
-      CliFunctionResult result =
-          executeFunctionAndGetFunctionResult(new ListMappingFunction(), null, targetMember);
-      if (result != null) {
-        mappings = (Collection<RegionMapping>) result.getResultObject();
+    try {
+      ConfigurationPersistenceService configService = checkForClusterConfiguration();
+      if (groups == null) {
+        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
-    } else {
-      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+      for (String group : groups) {
+        CacheConfig cacheConfig = getCacheConfig(configService, group);
+        for (RegionConfig regionConfig : cacheConfig.getRegions()) {
+          mappings.addAll(
+              MappingCommandUtils.getMappingsFromRegionConfig(cacheConfig, regionConfig, group));
+        }
+      }
+    } catch (PreconditionException ex) {
+      return ResultModel.createError(ex.getMessage());
-  private boolean fillTabularResultData(Collection<RegionMapping> mappings,
+  private boolean fillTabularResultData(ArrayList<RegionMapping> mappings,
+  private CacheConfig getCacheConfig(ConfigurationPersistenceService configService, String group)
+      throws PreconditionException {
+    CacheConfig result = configService.getCacheConfig(group);
+    if (result == null) {
+      throw new PreconditionException(
+          "Cache Configuration not found"
+              + ((group.equals(ConfigurationPersistenceService.CLUSTER_CONFIG)) ? "."
+                  : " for group " + group + "."));
+    }
+    return result;
+  }
+
+  private ConfigurationPersistenceService checkForClusterConfiguration()
+      throws PreconditionException {
+    ConfigurationPersistenceService result = getConfigurationPersistenceService();
+    if (result == null) {
+      throw new PreconditionException("Cluster Configuration must be enabled.");
+    }
+    return result;
+  }
+

MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 MOV77 MOV77 MOV77 MOV83 MOV43 MOV42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS45 INS77 INS5 INS42 INS60 INS54 MOV60 MOV60 MOV25 UPD74 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV25 INS41 INS42 INS42 INS60 INS25 INS41 INS42 INS80 INS80 INS80 INS43 INS85 UPD74 MOV74 INS59 INS8 INS12 UPD43 INS42 INS42 UPD43 UPD27 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS4 INS42 INS40 INS42 INS42 UPD42 MOV42 UPD43 MOV42 INS14 INS60 INS25 INS70 INS44 INS8 UPD42 UPD42 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS40 INS40 UPD42 INS74 INS43 INS59 INS27 INS8 INS44 INS42 INS8 INS43 INS42 INS41 UPD42 INS42 UPD42 INS14 UPD42 MOV42 INS14 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS60 INS70 UPD42 MOV42 INS32 INS43 INS27 INS43 INS45 INS42 INS42 INS7 UPD42 MOV42 INS43 MOV59 INS44 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS45 INS36 INS42 INS42 INS3 INS42 UPD42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS16 INS5 INS4 UPD42 INS42 INS42 INS42 INS32 INS36 INS45 INS27 INS43 INS85 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS45 INS42 INS45 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 DEL33 DEL33 DEL42 DEL43 DEL43 DEL74 DEL33 DEL59 DEL60 DEL43 DEL43 DEL74 DEL60 DEL32 DEL34 DEL27 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL40 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL14 DEL33 DEL42 DEL32 DEL11 DEL7 DEL21