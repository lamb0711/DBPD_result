Merge branch 'release/1.1.0'

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
- * Abstract implementation for attributes. Should be sub-classed to provide
- * differing implementations for synchronous or delta propagation. The backing
- * store used is defined by the session manager.
+ * Abstract implementation for attributes. Should be sub-classed to provide differing
+ * implementations for synchronous or delta propagation. The backing store used is defined by the
+ * session manager.
-   * {@inheritDoc} The actual de-serialization of any domain objects is deferred
-   * until the point at which they are actually retrieved by the application
-   * layer.
+   * {@inheritDoc} The actual de-serialization of any domain objects is deferred until the point at
+   * which they are actually retrieved by the application layer.
-        LOG.error("Attribute '" + name +
-            " contains a byte[] that cannot be deserialized due "
+        LOG.error("Attribute '" + name + " contains a byte[] that cannot be deserialized due "
-   * {@inheritDoc} This method calls back into the session to flush the whole
-   * session including its attributes.
+   * {@inheritDoc} This method calls back into the session to flush the whole session including its
+   * attributes.
-   * Use DeltaEvents to propagate the actual attribute data - DeltaEvents turn
-   * the values into byte arrays which means that the actual domain classes are
-   * not required on the server.
+   * Use DeltaEvents to propagate the actual attribute data - DeltaEvents turn the values into byte
+   * arrays which means that the actual domain classes are not required on the server.
-        DeltaEvent delta = new DeltaEvent(true, entry.getKey(),
-            entry.getValue());
+        DeltaEvent delta = new DeltaEvent(true, entry.getKey(), entry.getValue());
-  public void fromData(
-      DataInput in) throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66