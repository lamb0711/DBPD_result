GEODE-1958: Working on removing PasswordUtil and all related commands, classes, etc. Keeping decrypt() method to maintain backwards compatibility.

* this closes #578

-import org.apache.geode.internal.i18n.LocalizedStrings;
-
-   * Encrypts a password string
-   * 
-   * @param password String to be encrypted.
-   * @return String encrypted String
-   */
-  public static String encrypt(String password) {
-    return encrypt(password, true);
-  }
-
-  /**
-   * 
-   * @param password String to be encrypted
-   * @param echo if true prints result to system.out
-   * @return String encrypted String
-   */
-  public static String encrypt(String password, boolean echo) {
-    String encryptedString = null;
-    try {
-      SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
-      Cipher cipher = Cipher.getInstance("Blowfish");
-      cipher.init(Cipher.ENCRYPT_MODE, key);
-      byte[] encrypted = cipher.doFinal(password.getBytes());
-      encryptedString = byteArrayToHexString(encrypted);
-      if (echo) {
-        System.out.println(
-            LocalizedStrings.PasswordUtil_ENCRYPTED_TO_0.toLocalizedString(encryptedString));
-      }
-    } catch (Exception e) {
-      e.printStackTrace();
-    }
-    return encryptedString;
-  }
-
-  /**
-   * 
+   *
+  @Deprecated
+    String toDecrypt;
-      byte[] decrypted = null;
-      try {
-        String toDecrypt = password.substring(10, password.length() - 1);
-        SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
-        Cipher cipher = Cipher.getInstance("Blowfish");
-        cipher.init(Cipher.DECRYPT_MODE, key);
-        decrypted = cipher.doFinal(hexStringToByteArray(toDecrypt));
-        return new String(decrypted);
-      } catch (Exception e) {
-        e.printStackTrace();
-      }
+      toDecrypt = password.substring(10, password.length() - 1);
+    } else {
+      toDecrypt = password;
-    return password;
-  }
-
-  private static String byteArrayToHexString(byte[] b) {
-    StringBuilder sb = new StringBuilder(b.length * 2);
-    for (int i = 0; i < b.length; i++) {
-      int v = b[i] & 0xff;
-      if (v < 16) {
-        sb.append('0');
-      }
-      sb.append(Integer.toHexString(v));
+    byte[] decrypted;
+    try {
+      SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
+      Cipher cipher = Cipher.getInstance("Blowfish");
+      cipher.init(Cipher.DECRYPT_MODE, key);
+      decrypted = cipher.doFinal(hexStringToByteArray(toDecrypt));
+      return new String(decrypted);
+    } catch (Exception e) {
+      e.printStackTrace();
-    return sb.toString().toUpperCase();
+    return toDecrypt;

INS78 MOV8 INS42 INS60 INS25 INS41 MOV43 INS59 MOV27 INS8 INS8 MOV5 INS42 INS42 INS21 INS21 INS7 INS7 INS42 MOV32 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL39 DEL85 DEL5 DEL33 DEL42 DEL43 DEL42 DEL59 DEL60 DEL25 DEL42 DEL41 DEL8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL34 DEL27 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31