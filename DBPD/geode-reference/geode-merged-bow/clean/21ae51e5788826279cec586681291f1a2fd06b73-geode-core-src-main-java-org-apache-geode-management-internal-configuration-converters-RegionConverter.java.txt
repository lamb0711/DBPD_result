GEODE-7193: add entry-idle-time and entry-time-to-live to region attributes

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

+import java.util.ArrayList;
+import java.util.List;
+import org.apache.commons.lang3.StringUtils;
+
+
+      RegionAttributesType.ExpirationAttributesType entryIdleTime =
+          regionAttributes.getEntryIdleTime();
+      List<Region.Expiration> expirations = new ArrayList<>();
+      if (entryIdleTime != null) {
+        expirations.add(convertFrom(Region.ExpirationType.ENTRY_IDLE_TIME, entryIdleTime));
+      }
+      RegionAttributesType.ExpirationAttributesType entryTimeToLive =
+          regionAttributes.getEntryTimeToLive();
+      if (entryTimeToLive != null) {
+        expirations.add(convertFrom(Region.ExpirationType.ENTRY_TIME_TO_LIVE, entryTimeToLive));
+      }
+
+      RegionAttributesType.ExpirationAttributesType regionIdleTime =
+          regionAttributes.getRegionIdleTime();
+      if (regionIdleTime != null) {
+        expirations.add(convertFrom(Region.ExpirationType.UNSUPPORTED, regionIdleTime));
+      }
+
+      RegionAttributesType.ExpirationAttributesType regionTimeToLive =
+          regionAttributes.getRegionTimeToLive();
+      if (regionTimeToLive != null) {
+        expirations.add(convertFrom(Region.ExpirationType.UNSUPPORTED, regionTimeToLive));
+      }
+
+      if (!expirations.isEmpty()) {
+        region.setExpirations(expirations);
+      }
+    attributesType.setStatisticsEnabled(true);
+
+    List<Region.Expiration> expirations = configObject.getExpirations();
+    if (expirations != null) {
+      for (Region.Expiration expiration : expirations) {
+        switch (expiration.getType()) {
+          case ENTRY_IDLE_TIME:
+            attributesType.setEntryIdleTime(convertFrom(expiration));
+            break;
+          case ENTRY_TIME_TO_LIVE:
+            attributesType.setEntryTimeToLive(convertFrom(expiration));
+            break;
+        }
+      }
+    }
+  RegionAttributesType.ExpirationAttributesType convertFrom(Region.Expiration expiration) {
+    RegionAttributesType.ExpirationAttributesType xmlExpiration =
+        new RegionAttributesType.ExpirationAttributesType();
+    xmlExpiration.setTimeout(expiration.getTimeInSeconds().toString());
+    // when action is null from the management api, the default action is DESTROY
+    if (expiration.getAction() == null) {
+      xmlExpiration.setAction(Region.ExpirationAction.DESTROY.name().toLowerCase());
+    } else {
+      xmlExpiration.setAction(expiration.getAction().name().toLowerCase());
+    }
+    return xmlExpiration;
+  }
+
+  Region.Expiration convertFrom(Region.ExpirationType type,
+      RegionAttributesType.ExpirationAttributesType xmlExpiration) {
+    Region.Expiration expiration = new Region.Expiration();
+    expiration.setType(type);
+    if (StringUtils.isBlank(xmlExpiration.getTimeout())) {
+      expiration.setTimeInSeconds(0);
+    } else {
+      expiration.setTimeInSeconds(Integer.parseInt(xmlExpiration.getTimeout()));
+    }
+
+    // in the xml, the default expiration action is INVALIDATE
+    if (StringUtils.isBlank(xmlExpiration.getAction())) {
+      expiration.setAction(Region.ExpirationAction.INVALIDATE);
+    } else {
+      try {
+        expiration.setAction(
+            Region.ExpirationAction.valueOf(xmlExpiration.getAction().toUpperCase()));
+      } catch (Exception e) {
+        expiration.setAction(Region.ExpirationAction.UNSUPPORTED);
+      }
+    }
+    return expiration;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS8 INS21 INS60 INS25 INS40 INS43 INS42 INS60 INS21 INS25 INS41 INS40 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS25 INS41 INS32 INS74 INS59 INS27 INS8 INS40 INS43 INS59 INS32 INS27 INS8 INS8 INS42 INS40 INS40 INS43 INS59 INS32 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS25 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS40 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS21 INS21 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS21 INS54 INS43 INS59 INS74 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS42 INS40 INS42 INS42 INS44 INS42 INS8 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS8 INS12 INS40 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS40 INS42 INS32 INS42 INS33 INS21 INS40 INS42 INS32 INS42 INS33 INS21 INS40 INS42 INS32 INS42 INS33 INS21 INS32 INS21 INS43 INS42 INS50 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS40 INS21 INS44 INS8 INS42 INS42 INS42 INS40 INS74 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42