Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Create the GUI and show it.  For thread safety,
-   * this method should be invoked from the
+   * Create the GUI and show it. For thread safety, this method should be invoked from the
-   * @param lineMapper 
+   * @param lineMapper
-    //Create and set up the window.
+    // Create and set up the window.
-    //        for (GraphID id : graphs.getMap().keySet()) {
-    //            showSubDiagram(id);
+    // for (GraphID id : graphs.getMap().keySet()) {
+    // showSubDiagram(id);
-    //        }
+    // }
-    //Display the window.
+    // Display the window.
-    sequenceMenu.getAccessibleContext().setAccessibleDescription(
-        "The only menu in this program that has menu items");
+    sequenceMenu.getAccessibleContext()
+        .setAccessibleDescription("The only menu in this program that has menu items");
-    JMenuItem selectGraphs = new JMenuItem("Choose Graphs",
-        KeyEvent.VK_G);
-    selectGraphs.setAccelerator(KeyStroke.getKeyStroke(
-        KeyEvent.VK_G, ActionEvent.ALT_MASK));
-    selectGraphs.getAccessibleContext().setAccessibleDescription(
-        "Select what graphs to display");
+    JMenuItem selectGraphs = new JMenuItem("Choose Graphs", KeyEvent.VK_G);
+    selectGraphs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, ActionEvent.ALT_MASK));
+    selectGraphs.getAccessibleContext().setAccessibleDescription("Select what graphs to display");
-    List<GraphID> existingDiagrams =(List) sequenceDiagram.getSubDiagramsNames();
-    for(GraphID id : selectedIds) {
+    List<GraphID> existingDiagrams = (List) sequenceDiagram.getSubDiagramsNames();
+    for (GraphID id : selectedIds) {
-    for(GraphID id : existingDiagrams) {
+    for (GraphID id : existingDiagrams) {
-    //        sequenceDiagram.revalidate();
-    //        sequenceDiagram.repaint();
+    // sequenceDiagram.revalidate();
+    // sequenceDiagram.repaint();
-  //  private static SequenceDiagram createSequenceDiagram() {
-  //      long startTime = System.currentTimeMillis();
-  //      List<Lifeline> lines = new ArrayList<Lifeline>();
-  //      List<Arrow> arrows = new ArrayList<Arrow>();
-  //      for(int i =0 ; i < 10; i++) {
-  //          List<LifelineState> states = new ArrayList<LifelineState>();
-  //          for(int j =0; j < 5; j++) {
-  //              LifelineState state = new LifelineState(startTime  + 20* j, startTime  + 20 * j + 20);
-  //              states.add(state);
-  //          }
-  //          Lifeline line = new Lifeline(i, states);
-  //          lines.add(line);
+  // private static SequenceDiagram createSequenceDiagram() {
+  // long startTime = System.currentTimeMillis();
+  // List<Lifeline> lines = new ArrayList<Lifeline>();
+  // List<Arrow> arrows = new ArrayList<Arrow>();
+  // for(int i =0 ; i < 10; i++) {
+  // List<LifelineState> states = new ArrayList<LifelineState>();
+  // for(int j =0; j < 5; j++) {
+  // LifelineState state = new LifelineState(startTime + 20* j, startTime + 20 * j + 20);
+  // states.add(state);
+  // }
+  // Lifeline line = new Lifeline(i, states);
+  // lines.add(line);
-  //          if(i > 0) {
-  //              Arrow arrow = new Arrow("arrow" + i, line, lines.get(i - 1), line.getStates().get(2));
-  //              arrows.add(arrow);
-  //          }
-  //      }
+  // if(i > 0) {
+  // Arrow arrow = new Arrow("arrow" + i, line, lines.get(i - 1), line.getStates().get(2));
+  // arrows.add(arrow);
+  // }
+  // }
-  //      SequenceDiagram diag = new SequenceDiagram(startTime, startTime + 20 * 5, lines, arrows);
-  //      return diag;
-  //  }
+  // SequenceDiagram diag = new SequenceDiagram(startTime, startTime + 20 * 5, lines, arrows);
+  // return diag;
+  // }
-      Map<String, Lifeline> lines = new LinkedHashMap<String, Lifeline>(graphs.getLocations().size());
+      Map<String, Lifeline> lines =
+          new LinkedHashMap<String, Lifeline>(graphs.getLocations().size());
-    sequenceDiagram = new SequenceDiagram(graphs.getMinTime(), graphs.getMaxTime(), graphs.getLocations(), lineMapper);
+    sequenceDiagram = new SequenceDiagram(graphs.getMinTime(), graphs.getMaxTime(),
+        graphs.getLocations(), lineMapper);
-    long end = dest.getNextVertexOnDest() == null ? graphs.getMaxTime() : dest.getNextVertexOnDest().getTimestamp();
+    long end = dest.getNextVertexOnDest() == null ? graphs.getMaxTime()
+        : dest.getNextVertexOnDest().getTimestamp();
-      for (int i =0; i < args.length; i++) {
+      for (int i = 0; i < args.length; i++) {
-        if(arg.equals("-filterkey")) {
-          keyFilters.add(args[i+1]);
+        if (arg.equals("-filterkey")) {
+          keyFilters.add(args[i + 1]);
-        } else if(arg.equals("-logs")) {
+        } else if (arg.equals("-logs")) {
-        }
-        else {
+        } else {
-        
+
-      System.err.println("Usage: java -jar sequence.jar (-logs) (-filterkey key)* <file>+\n\n" +
-                "\t-logs (expiremental) instead of using .graph files, parse the gemfire logs to generate the sequence display" +
-      		"\t-filterkey a java regular expression to match against key names. If specified\n" +
-      		"The list of key sequence diagrams will only contain matching keys");
+      System.err.println("Usage: java -jar sequence.jar (-logs) (-filterkey key)* <file>+\n\n"
+          + "\t-logs (expiremental) instead of using .graph files, parse the gemfire logs to generate the sequence display"
+          + "\t-filterkey a java regular expression to match against key names. If specified\n"
+          + "The list of key sequence diagrams will only contain matching keys");
-    
+
-    
+
-    //Schedule a job for the event-dispatching thread:
-    //creating and showing this application's GUI.
+    // Schedule a job for the event-dispatching thread:
+    // creating and showing this application's GUI.
-    
-    
+
+
-    if(keyFilters.isEmpty()) {
+    if (keyFilters.isEmpty()) {
-   * @param files 
+   * @param files
-    if(HydraLineMapper.isInHydraRun(files)) {
+    if (HydraLineMapper.isInHydraRun(files)) {
-  
+
-    
+
-      for(String filterString : keyFilters) {
+      for (String filterString : keyFilters) {
-    public boolean accept(GraphType graphType, String name, String edgeName,
-        String source, String dest) {
-      if(graphType.equals(GraphType.KEY)) {
-        for(Pattern pattern : patterns) {
-          if(pattern.matcher(name).find()) {
+    public boolean accept(GraphType graphType, String name, String edgeName, String source,
+        String dest) {
+      if (graphType.equals(GraphType.KEY)) {
+        for (Pattern pattern : patterns) {
+          if (pattern.matcher(name).find()) {
-        
+
-    public boolean acceptPattern(GraphType graphType, Pattern pattern,
-        String edgeName, String source, String dest) {
+    public boolean acceptPattern(GraphType graphType, Pattern pattern, String edgeName,
+        String source, String dest) {
-    
+

UPD66 DEL66 DEL66 DEL66