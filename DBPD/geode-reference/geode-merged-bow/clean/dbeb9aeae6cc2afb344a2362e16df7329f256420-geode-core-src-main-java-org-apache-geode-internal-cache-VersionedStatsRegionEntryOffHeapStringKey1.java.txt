Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+
- * Do not modify this class. It was generated.
- * Instead modify LeafRegionEntry.cpp and then run
- * bin/generateRegionEntryClasses.sh from the directory
- * that contains your build.xml.
+ * Do not modify this class. It was generated. Instead modify LeafRegionEntry.cpp and then run
+ * ./dev-tools/generateRegionEntryClasses.sh (it must be run from the top level directory).
-  public VersionedStatsRegionEntryOffHeapStringKey1 (RegionEntryContext context, String key,
-      @Retained
-      Object value
-      , boolean byteEncode
-      ) {
-    super(context,
-          value
-        );
+  public VersionedStatsRegionEntryOffHeapStringKey1(RegionEntryContext context, String key,
+      @Retained Object value, boolean byteEncode) {
+    super(context, value);
-      for (int i=key.length()-1; i >= 0; i--) {
-        // Note: we know each byte is <= 0x7f so the "& 0xff" is not needed. But I added it in to keep findbugs happy.
-        tmpBits1 |= (byte)key.charAt(i) & 0xff;
+      for (int i = key.length() - 1; i >= 0; i--) {
+        // Note: we know each byte is <= 0x7f so the "& 0xff" is not needed. But I added it in to
+        // keep findbugs happy.
+        tmpBits1 |= (byte) key.charAt(i) & 0xff;
-      tmpBits1 |= 1<<6;
+      tmpBits1 |= 1 << 6;
-      for (int i=key.length()-1; i >= 0; i--) {
+      for (int i = key.length() - 1; i >= 0; i--) {
+
-  private static final AtomicLongFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> lastModifiedUpdater
-    = AtomicLongFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class, "lastModified");
+  private static final AtomicLongFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> lastModifiedUpdater =
+      AtomicLongFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class,
+          "lastModified");
-  @Retained @Released private volatile long ohAddress;
+  @Retained
+  @Released
+  private volatile long ohAddress;
-   * I needed to add this because I wanted clear to call setValue which normally can only be called while the re is synced.
-   * But if I sync in that code it causes a lock ordering deadlock with the disk regions because they also get a rw lock in clear.
-   * Some hardware platforms do not support CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync
-   * on the re and we will once again be deadlocked.
-   * I don't know if we support any of the hardware platforms that do not have a 64bit CAS. If we do then we can expect deadlocks
-   * on disk regions.
+   * I needed to add this because I wanted clear to call setValue which normally can only be called
+   * while the re is synced. But if I sync in that code it causes a lock ordering deadlock with the
+   * disk regions because they also get a rw lock in clear. Some hardware platforms do not support
+   * CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync on the
+   * re and we will once again be deadlocked. I don't know if we support any of the hardware
+   * platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk regions.
-  private final static AtomicLongFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> ohAddrUpdater = AtomicLongFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class, "ohAddress");
+  private final static AtomicLongFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> ohAddrUpdater =
+      AtomicLongFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class,
+          "ohAddress");
+
+
+
+
+
+
+
+
-//    if (this instanceof VMThinRegionEntryLongKey) {
-//      factory.returnToPool((VMThinRegionEntryLongKey)this);
-//    }
+    // if (this instanceof VMThinRegionEntryLongKey) {
+    // factory.returnToPool((VMThinRegionEntryLongKey)this);
+    // }
+
+
+
+
+
+
+
-  public final void updateStatsForGet(boolean hit, long time)
-  {
+  public final void updateStatsForGet(boolean hit, long time) {
+
-  protected final void setLastModified(long lastModified) {
+  protected final void setLastModifiedAndAccessedTimes(long lastModified, long lastAccessed) {
-      setLastAccessed(lastModified);
+      setLastAccessed(lastAccessed);
+
-  private static final AtomicIntegerFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> hitCountUpdater
-    = AtomicIntegerFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class, "hitCount");
-  private static final AtomicIntegerFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> missCountUpdater
-    = AtomicIntegerFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class, "missCount");
+  private static final AtomicIntegerFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> hitCountUpdater =
+      AtomicIntegerFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class,
+          "hitCount");
+  private static final AtomicIntegerFieldUpdater<VersionedStatsRegionEntryOffHeapStringKey1> missCountUpdater =
+      AtomicIntegerFieldUpdater.newUpdater(VersionedStatsRegionEntryOffHeapStringKey1.class,
+          "missCount");
+
+
+
+
+
+
+
-    hitCountUpdater.set(this,0);
-    missCountUpdater.set(this,0);
+    hitCountUpdater.set(this, 0);
+    missCountUpdater.set(this, 0);
+
+
+
+
+
-    return (((long)regionVersionHighBytes) << 32) | (regionVersionLowBytes & 0x00000000FFFFFFFFL);
+    return (((long) regionVersionHighBytes) << 32) | (regionVersionLowBytes & 0x00000000FFFFFFFFL);
+
+
+
+
+
-    this.entryVersionLowBytes = (short)(eVersion & 0xffff);
-    this.entryVersionHighByte = (byte)((eVersion & 0xff0000) >> 16);
+    this.entryVersionLowBytes = (short) (eVersion & 0xffff);
+    this.entryVersionHighByte = (byte) ((eVersion & 0xff0000) >> 16);
-    this.distributedSystemId = (byte)(tag.getDistributedSystemId() & 0xff);
+    this.distributedSystemId = (byte) (tag.getDistributedSystemId() & 0xff);
+
+
+
-  public void processVersionTag(LocalRegion r, VersionTag tag,
-      boolean isTombstoneFromGII, boolean hasDelta,
-      VersionSource thisVM, InternalDistributedMember sender, boolean checkForConflicts) {
+
+  public void processVersionTag(LocalRegion r, VersionTag tag, boolean isTombstoneFromGII,
+      boolean hasDelta, VersionSource thisVM, InternalDistributedMember sender,
+      boolean checkForConflicts) {
+
-    // this keeps Eclipse happy.  without it the sender chain becomes confused
+    // this keeps Eclipse happy. without it the sender chain becomes confused
-  /** get rvv internal high byte.  Used by region entries for transferring to storage */
+
+  /** get rvv internal high byte. Used by region entries for transferring to storage */
-  /** get rvv internal low bytes.  Used by region entries for transferring to storage */
+
+  /** get rvv internal low bytes. Used by region entries for transferring to storage */
+
+
+
+
-      for (int i=0; i < keylen; i++) {
+      for (int i = 0; i < keylen; i++) {
-      chars[i] = (char) (tmpBits1 & 0x00ff);
+        chars[i] = (char) (tmpBits1 & 0x00ff);
-      for (int i=0; i < keylen; i++) {
+      for (int i = 0; i < keylen; i++) {
+
-      String str = (String)k;
+      String str = (String) k;
-          for (int i=0; i < keylen; i++) {
+          for (int i = 0; i < keylen; i++) {
-          for (int i=0; i < keylen; i++) {
+          for (int i = 0; i < keylen; i++) {

UPD42 INS44 UPD66 UPD66 INS39 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 DEL66 DEL66