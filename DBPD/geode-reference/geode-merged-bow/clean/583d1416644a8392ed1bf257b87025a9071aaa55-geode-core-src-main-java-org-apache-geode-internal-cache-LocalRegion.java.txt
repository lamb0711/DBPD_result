GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and DistributedRegion.memoryThresholdReachedMembers must be atomic (#2320)

* GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and
           DistributedRegion.memoryThresholdReachedMembers must be atomic.
-  public final AtomicBoolean memoryThresholdReached = new AtomicBoolean(false);
+  private final AtomicBoolean memoryThresholdReached = new AtomicBoolean(false);
-                  this.cache.getResourceAdvisor().adviseCritialMembers());
+                  this.cache.getResourceAdvisor().adviseCriticalMembers());
-                  this.cache.getResourceAdvisor().adviseCritialMembers());
+                  this.cache.getResourceAdvisor().adviseCriticalMembers());
-    return this.memoryThresholdReached.get();
+    return isMemoryThresholdReached();
-    if (this.memoryThresholdReached.get()) {
-      Set<DistributedMember> membersThatReachedThreshold = getMemoryThresholdReachedMembers();
-
+    MemoryThresholdInfo info = getAtomicThresholdInfo();
+    if (info.isMemoryThresholdReached()) {
+      Set<DistributedMember> membersThatReachedThreshold = info.getMembersThatReachedThreshold();
-
+  @Override
+  public MemoryThresholdInfo getAtomicThresholdInfo() {
+    if (!isMemoryThresholdReached()) {
+      return MemoryThresholdInfo.getNotReached();
+    }
+    return new MemoryThresholdInfo(isMemoryThresholdReached(),
+        Collections.singleton(this.cache.getMyId()));
+  }
+
-    if (function.optimizeForWrite() && this.memoryThresholdReached.get()
+    if (function.optimizeForWrite()
-      Set<DistributedMember> members = getMemoryThresholdReachedMembers();
-      throw new LowMemoryException(
-          LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
-              .toLocalizedString(function.getId(), members),
-          members);
+      MemoryThresholdInfo info = getAtomicThresholdInfo();
+      if (info.isMemoryThresholdReached()) {
+        Set<DistributedMember> members = info.getMembersThatReachedThreshold();
+        throw new LowMemoryException(
+            LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+                .toLocalizedString(function.getId(), members),
+            members);
+      }
-  /**
-   * @return the set of members which are known to be critical
-   */
-  public Set<DistributedMember> getMemoryThresholdReachedMembers() {
-    return Collections.singleton(this.cache.getMyId());
-  }
-
-        this.memoryThresholdReached.set(true);
+        setMemoryThresholdReached(true);
-        this.memoryThresholdReached.set(false);
+        setMemoryThresholdReached(false);
-  public void removeMemberFromCriticalList(DistributedMember member) {
+  public void removeCriticalMember(DistributedMember member) {
-      this.memoryThresholdReached.set(true);
+      setMemoryThresholdReached(true);
+
+  public boolean isMemoryThresholdReached() {
+    return memoryThresholdReached.get();
+  }
+
+  protected void setMemoryThresholdReached(boolean reached) {
+    this.memoryThresholdReached.set(reached);
+  }
+

INS31 INS31 INS31 UPD83 INS78 MOV83 INS43 INS42 MOV8 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 UPD42 MOV42 INS44 MOV8 INS60 INS42 UPD42 MOV42 INS25 INS41 INS39 INS42 INS43 INS59 INS38 INS8 INS14 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 INS32 INS41 INS43 INS32 MOV32 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 MOV8 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL74 DEL31 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL9