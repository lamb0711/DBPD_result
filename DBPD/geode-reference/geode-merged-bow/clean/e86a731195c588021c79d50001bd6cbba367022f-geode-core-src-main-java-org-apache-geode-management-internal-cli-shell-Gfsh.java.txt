Merge branch 'release/1.3.0'

+import org.apache.geode.management.internal.cli.CommandManager;
+import org.apache.geode.management.internal.cli.converters.RegionPathConverter;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.CompositeResultData.SectionResultData;
- * <p />
+ *
+ * <p>
- * environment TODO
+ * environment
+ * <p>
+ * Additionally, this class is used to maintain GemFire SHell (gfsh) specific information
-  // TODO merge find a better place for these
-  // SSL Configuration properties. keystore/truststore type is not include
-  public static final String SSL_KEYSTORE = "javax.net.ssl.keyStore";
-  public static final String SSL_KEYSTORE_PASSWORD = "javax.net.ssl.keyStorePassword";
-  public static final String SSL_TRUSTSTORE = "javax.net.ssl.trustStore";
-  public static final String SSL_TRUSTSTORE_PASSWORD = "javax.net.ssl.trustStorePassword";
-  public static final String SSL_ENABLED_CIPHERS = "javax.rmi.ssl.client.enabledCipherSuites";
-  public static final String SSL_ENABLED_PROTOCOLS = "javax.rmi.ssl.client.enabledProtocols";
+
-  public static boolean SUPPORT_MUTLIPLESHELL = false;
-  // private static final String ANIMATION_SLOT = "A"; //see 46072
-  protected static ThreadLocal<Gfsh> gfshThreadLocal = new ThreadLocal<Gfsh>();
+  protected static ThreadLocal<Gfsh> gfshThreadLocal = new ThreadLocal<>();
-  private static ThreadLocal<Boolean> resultTypeTL = new ThreadLocal<Boolean>();
+  private static ThreadLocal<Boolean> resultTypeTL = new ThreadLocal<>();
-  private final Map<String, String> env = new TreeMap<String, String>();
-  private final List<String> readonlyAppEnv = new ArrayList<String>();
+  private final Map<String, String> env = new TreeMap<>();
+  private final List<String> readonlyAppEnv = new ArrayList<>();
-  private final Map<String, String> expandedPropCommandsMap = new HashMap<String, String>();
+  private final Map<String, String> expandedPropCommandsMap = new HashMap<>();
-  private boolean supressScriptCmdOutput;
+  private boolean suppressScriptCmdOutput;
-  protected Gfsh() throws ClassNotFoundException, IOException {
+  public Gfsh() {
-  protected Gfsh(String[] args) throws ClassNotFoundException, IOException {
+  protected Gfsh(String[] args) {
-  protected Gfsh(boolean launchShell, String[] args, GfshConfig gfshConfig)
-      throws ClassNotFoundException, IOException {
+  protected Gfsh(boolean launchShell, String[] args, GfshConfig gfshConfig) {
-    this.ansiHandler = ANSIHandler.getInstance(this.gfshConfig.isANSISupported()); // TODO -
-    // Abhishek :
-    // should take it
-    // from
-    // ConsoleReader.terminal??
+    this.ansiHandler = ANSIHandler.getInstance(this.gfshConfig.isANSISupported());
-    this.parser = new GfshParser();
+    this.parser = new GfshParser(new CommandManager());
-      signalHandler = (CliUtil.isGfshVM() ? new GfshSignalHandler()
-          : new AbstractSignalNotificationHandler() {});
+      signalHandler = new GfshSignalHandler();
-  public static Gfsh getInstance(boolean launchShell, String[] args, GfshConfig gfshConfig)
-      throws ClassNotFoundException, IOException {
+  public static Gfsh getInstance(boolean launchShell, String[] args, GfshConfig gfshConfig) {
-    String readLine = null;
+    String readLine;
-          // System.out.println(loggerName);
-    if (!SUPPORT_MUTLIPLESHELL) {
-      return instance;
-    } else {
-      return gfshThreadLocal.get();
-    }
+    return instance;
-        // If no spaces were found then there's no logical wayto split the string
+        // If no spaces were found then there's no logical way to split the string
-    env.put(ENV_APP_NAME, org.apache.geode.management.internal.cli.shell.Gfsh.GFSH_APP_NAME);
+    env.put(ENV_APP_NAME, Gfsh.GFSH_APP_NAME);
-  public String readPassword(String textToPrompt) throws IOException {
+  public String readPassword(String textToPrompt) {
-  public String readText(String textToPrompt) throws IOException {
+  public String readText(String textToPrompt) {
-    // flashMessage("\b"); // see 46072
+    instance = null;
-    // return Collections.singleton(ClassPathLoader.getLatest().getResource(resourceName));
-        gfshFileLogger.fine(logMessage + withPropsExpanded);
+        gfshFileLogger.fine(logMessage + ArgumentRedactor.redactScriptLine(withPropsExpanded));
-      // TODO: should there be a way to differentiate error in shell & error on
-      // server. May be by exception type.
-  public String interact(String textToPrompt) throws IOException {
-    return reader.readLine(textToPrompt);
+  public String interact(String textToPrompt) {
+    try {
+      return reader.readLine(textToPrompt);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
-  public String readWithMask(String textToPrompt, Character mask) throws IOException {
-    return reader.readLine(textToPrompt, mask);
+  public String readWithMask(String textToPrompt, Character mask) {
+    try {
+      return reader.readLine(textToPrompt, mask);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
-          } else if (!supressScriptCmdOutput) {
+          } else if (!suppressScriptCmdOutput) {
-    return !(OS.indexOf("win") >= 0);
+    return !(OS.contains("win"));
-    Result result = null;
+    Result result;
-        this.supressScriptCmdOutput = quiet;
+        this.suppressScriptCmdOutput = quiet;
-        String linesBufferString = ""; // used to check whether the string in a buffer contains a
-        // ";".
+        String linesBufferString = "";
-            // String command = null;
-    Map<String, String> map = new TreeMap<String, String>();
+    Map<String, String> map = new TreeMap<>();
-  @Override
-  public void setPromptPath(String currentContext) {
-    super.setPromptPath(currentContext);
-    // Enable when "use region" command is required. See #46110
-    // env.put(CliConstants.ENV_APP_CONTEXT_PATH, currentContext);
-  }
-
-    String contextPath = /* getEnvProperty(CliConstants.ENV_APP_CONTEXT_PATH) */ "";
+    String contextPath = "";
-      // //As "use region" is not in scope for 7.0, see 46110.
-      // if (contextPath == null) {
-      // contextPath = "." + CliConstants.DEFAULT_APP_CONTEXT_PATH;
-      // } else {
-      // contextPath = "." + contextPath;
-      // }
-      // } else {
-      // contextPath = "." + CliConstants.DEFAULT_APP_CONTEXT_PATH;
-    setPromptPath(
-        org.apache.geode.management.internal.cli.converters.RegionPathConverter.DEFAULT_APP_CONTEXT_PATH);
+    setPromptPath(RegionPathConverter.DEFAULT_APP_CONTEXT_PATH);
-    String foundInLine = null;
+    String foundInLine;
-
-
-class ScriptExecutionDetails {
-  private final String filePath;
-  private final List<CommandAndStatus> commandAndStatusList;
-
-  ScriptExecutionDetails(String filePath) {
-    this.filePath = filePath;
-    this.commandAndStatusList = new ArrayList<CommandAndStatus>();
-  }
-
-  void addCommandAndStatus(String command, String status) {
-    this.commandAndStatusList.add(new CommandAndStatus(command, status));
-  }
-
-  Result getResult() {
-    CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
-    compositeResultData.setHeader(
-        "************************* Execution Summary ***********************\nScript file: "
-            + filePath);
-
-    for (int i = 0; i < this.commandAndStatusList.size(); i++) {
-      int commandSrNo = i + 1;
-      SectionResultData section = compositeResultData.addSection("" + (i + 1));
-      CommandAndStatus commandAndStatus = commandAndStatusList.get(i);
-      section.addData("Command-" + String.valueOf(commandSrNo), commandAndStatus.command);
-      section.addData("Status", commandAndStatus.status);
-      if (commandAndStatus.status.equals("FAILED")) {
-        compositeResultData.setStatus(org.apache.geode.management.cli.Result.Status.ERROR);
-      }
-      if (i != this.commandAndStatusList.size()) {
-        section.setFooter(Gfsh.LINE_SEPARATOR);
-      }
-    }
-
-    return ResultBuilder.buildResult(compositeResultData);
-  }
-
-  void logScriptExecutionInfo(LogWrapper logWrapper, Result result) {
-    logWrapper.info(ResultBuilder.resultAsString(result));
-  }
-
-  static class CommandAndStatus {
-    private final String command;
-    private final String status;
-
-    public CommandAndStatus(String command, String status) {
-      this.command = command;
-      this.status = status;
-    }
-
-    @Override
-    public String toString() {
-      return command + "     " + status;
-    }
-  }
-}

MOV26 MOV26 UPD40 UPD40 UPD83 MOV8 INS8 INS8 UPD66 UPD66 INS66 INS66 UPD42 INS21 INS54 INS54 UPD74 UPD74 UPD74 UPD74 UPD74 INS7 MOV8 INS12 MOV8 INS12 UPD40 INS42 INS33 INS44 INS8 INS44 INS8 UPD40 INS14 MOV43 INS42 INS53 MOV43 INS42 INS53 INS32 UPD74 INS43 MOV14 INS14 INS14 MOV42 UPD42 MOV42 MOV45 INS42 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS42 UPD42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL1 DEL14 DEL16 DEL36 DEL42 DEL43 DEL42 DEL43 DEL33 DEL42 DEL38 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL32 DEL34 DEL27 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL48 DEL21 DEL8 DEL31 DEL33 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL34 DEL27 DEL36 DEL27 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL40 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL32 DEL21 DEL40 DEL42 DEL45 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL27 DEL41 DEL8 DEL31 DEL55 DEL55