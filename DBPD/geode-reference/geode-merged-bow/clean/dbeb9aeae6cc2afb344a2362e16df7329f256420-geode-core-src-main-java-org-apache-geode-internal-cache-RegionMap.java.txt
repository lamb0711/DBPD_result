Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Internal interface used by {@link LocalRegion} to access the map that holds
- * its entries. Note that the value of every entry in this map will
- * implement {@link RegionEntry}.
+ * Internal interface used by {@link LocalRegion} to access the map that holds its entries. Note
+ * that the value of every entry in this map will implement {@link RegionEntry}.
-  
+
-   * Parameter object used to facilitate construction of an EntriesMap.
-   * Modification of fields after the map is constructed has no effect.
+   * Parameter object used to facilitate construction of an EntriesMap. Modification of fields after
+   * the map is constructed has no effect.
-    /** The initial capacity. The implementation
-     * performs internal sizing to accommodate this many elements. */
+    /**
+     * The initial capacity. The implementation performs internal sizing to accommodate this many
+     * elements.
+     */
-    
+
-    
-    /** the estimated number of concurrently
-     * updating threads. The implementation performs internal sizing
-     * to try to accommodate this many threads. */
+
+    /**
+     * the estimated number of concurrently updating threads. The implementation performs internal
+     * sizing to try to accommodate this many threads.
+     */
-    
+
-    
+
-//    boolean lru = false;
+    // boolean lru = false;
-   * This method should be called before region is initialized
-   * to ensure there is no mix of region entries
+   * This method should be called before region is initialized to ensure there is no mix of region
+   * entries
-  
+
+
-  
-  /** Returns a collection of RegionEntry instances.
+
+  /**
+   * Returns a collection of RegionEntry instances.
+   * 
+
-   * fetches the entry from the backing ConcurrentHashMap. 
+   * fetches the entry from the backing ConcurrentHashMap.
+   * 
-   * fetches the entry from the backing ConcurrentHashMap only if the entry
-   * is considered to be in operational data i.e. does not have
-   * isMarkedForEviction() bit set.
+   * fetches the entry from the backing ConcurrentHashMap only if the entry is considered to be in
+   * operational data i.e. does not have isMarkedForEviction() bit set.
+   * 
-  //   /**
-//    * Removes any entry associated with <code>key</code>.
-//    * Do nothing if the map has no entry for key.
-//    */
-//   public void remove(Object key);
+  // /**
+  // * Removes any entry associated with <code>key</code>.
+  // * Do nothing if the map has no entry for key.
+  // */
+  // public void remove(Object key);
-//   /**
-//    * Removes the entry associated with <code>key</code>
-//    * if it is <code>entry</code>.
-//    * Otherwise do nothing.
-//    */
-//   public void remove(Object key, RegionEntry entry);
+  // /**
+  // * Removes the entry associated with <code>key</code>
+  // * if it is <code>entry</code>.
+  // * Otherwise do nothing.
+  // */
+  // public void remove(Object key, RegionEntry entry);
-   * Clear the region and, if the parameter rvv is not null,
-   * return a collection of the IDs of version sources that are
-   * still in the map when the operation completes.
+   * Clear the region and, if the parameter rvv is not null, return a collection of the IDs of
+   * version sources that are still in the map when the operation completes.
-   * Used by disk regions when recovering data from backup.
-   * Currently this "put" is done at a very low level to keep it from
-   * generating events or pushing updates to others.
+   * Used by disk regions when recovering data from backup. Currently this "put" is done at a very
+   * low level to keep it from generating events or pushing updates to others.
+   * 
+
-   * Used by disk regions when recovering data from backup and
-   * initRecoveredEntry has already been called for the given key.
-   * Currently this "put" is done at a very low level to keep it from
+   * Used by disk regions when recovering data from backup and initRecoveredEntry has already been
+   * called for the given key. Currently this "put" is done at a very low level to keep it from
+   * 
+
-   * Used to modify an existing RegionEntry or create a new one
-   * when processing the values obtained during a getInitialImage.
-   * @param wasRecovered true if the current entry in the cache was
-   *        recovered from disk.
+   * Used to modify an existing RegionEntry or create a new one when processing the values obtained
+   * during a getInitialImage.
+   * 
+   * @param wasRecovered true if the current entry in the cache was recovered from disk.
-   * @param sender the sender of the initial image, if IIO.  Not needed on clients
+   * @param sender the sender of the initial image, if IIO. Not needed on clients
-  public boolean initialImagePut(Object key,
-                                 long lastModified,
-                                 Object newValue,
-                                 boolean wasRecovered, 
-                                 boolean deferLRUCallback,
-                                 VersionTag entryVersion, InternalDistributedMember sender, boolean forceValue);
+  public boolean initialImagePut(Object key, long lastModified, Object newValue,
+      boolean wasRecovered, boolean deferLRUCallback, VersionTag entryVersion,
+      InternalDistributedMember sender, boolean forceValue);
+   * 
-   * @param expectedOldValue if non-null, only destroy if key exists and value is
-   *        is equal to expectedOldValue
+   * @param expectedOldValue if non-null, only destroy if key exists and value is is equal to
+   *        expectedOldValue
-  public boolean destroy(EntryEventImpl event,
-                         boolean inTokenMode,
-                         boolean duringRI,
-                         boolean cacheWrite,
-                         boolean isEviction,
-                         Object expectedOldValue,
-                         boolean removeRecoveredEntry)
-    throws CacheWriterException, EntryNotFoundException, TimeoutException;
+  public boolean destroy(EntryEventImpl event, boolean inTokenMode, boolean duringRI,
+      boolean cacheWrite, boolean isEviction, Object expectedOldValue, boolean removeRecoveredEntry)
+      throws CacheWriterException, EntryNotFoundException, TimeoutException;
-   * @param forceNewEntry
-   *          used during GII, this forces us to leave an invalid token in the
-   *          cache, even if the entry doesn't exist
-   * @param forceCallbacks
-   *          using for PRs with eviction enabled, this forces invalidate
-   *          callbacks and events even if the entry doesn't exist in the cache.
-   *          This differs from the forceNewEntry mode in that it doesn't leave
-   *          an Invalid token in the cache.
+   * @param forceNewEntry used during GII, this forces us to leave an invalid token in the cache,
+   *        even if the entry doesn't exist
+   * @param forceCallbacks using for PRs with eviction enabled, this forces invalidate callbacks and
+   *        events even if the entry doesn't exist in the cache. This differs from the forceNewEntry
+   *        mode in that it doesn't leave an Invalid token in the cache.
-  public boolean invalidate(EntryEventImpl event,
-                            boolean invokeCallbacks,
-                            boolean forceNewEntry,
-                            boolean forceCallbacks)
-    throws EntryNotFoundException;
-                      
+  public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean forceNewEntry,
+      boolean forceCallbacks) throws EntryNotFoundException;
+
-   * @param event the event object for this operation, with the exception that
-   * the oldValue parameter is not yet filled in. The oldValue will be filled
-   * in by this operation.
+   * @param event the event object for this operation, with the exception that the oldValue
+   *        parameter is not yet filled in. The oldValue will be filled in by this operation.
-   * @param lastModified the lastModified time to set with the value; if 0L,
-   *        then the lastModified time will be set to now.
+   * @param lastModified the lastModified time to set with the value; if 0L, then the lastModified
+   *        time will be set to now.
-   * @param expectedOldValue
-   *          only succeed if old value is equal to this value. If null,
-   *          then doesn't matter what old value is. If INVALID token,
-   *          must be INVALID.
-   * @param requireOldValue if old value needs to be returned to caller in event
-   *        (e.g. failed putIfAbsent)
-   * @param overwriteDestroyed true if okay to overwrite the DESTROYED token:
-   *         when this is true has the following effect:
-   *           even when ifNew is true will write over DESTROYED token
-   *         when overwriteDestroyed is false and ifNew or ifOld is true
-   *           then if the put doesn't occur because there is a DESTROYED token
-   *           present then the entry flag blockedDestroyed is set.
+   * @param expectedOldValue only succeed if old value is equal to this value. If null, then doesn't
+   *        matter what old value is. If INVALID token, must be INVALID.
+   * @param requireOldValue if old value needs to be returned to caller in event (e.g. failed
+   *        putIfAbsent)
+   * @param overwriteDestroyed true if okay to overwrite the DESTROYED token: when this is true has
+   *        the following effect: even when ifNew is true will write over DESTROYED token when
+   *        overwriteDestroyed is false and ifNew or ifOld is true then if the put doesn't occur
+   *        because there is a DESTROYED token present then the entry flag blockedDestroyed is set.
-  public RegionEntry basicPut(EntryEventImpl event,
-                              long lastModified,
-                              boolean ifNew,
-                              boolean ifOld,
-                              Object expectedOldValue,
-                              boolean requireOldValue,
-                              boolean overwriteDestroyed)
-    throws CacheWriterException, TimeoutException;
+  public RegionEntry basicPut(EntryEventImpl event, long lastModified, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, boolean overwriteDestroyed)
+      throws CacheWriterException, TimeoutException;
-   * Write synchronizes the given entry and invokes the runable
-   * while holding the lock. Does nothing if the entry does not exist.
+   * Write synchronizes the given entry and invokes the runable while holding the lock. Does nothing
+   * if the entry does not exist.
-   * Remove the entry with the given key if it has been marked as destroyed
-   * This is currently used in the cleanup phase of getInitialImage.
+   * Remove the entry with the given key if it has been marked as destroyed This is currently used
+   * in the cleanup phase of getInitialImage.
+
-   * @param inTokenMode true if caller has determined we are in destroy token
-   *        mode and will keep us in that mode while this call is executing.
+   * @param inTokenMode true if caller has determined we are in destroy token mode and will keep us
+   *        in that mode while this call is executing.
-   * @param filterRoutingInfo 
+   * @param filterRoutingInfo
-   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass versionTag to TXCommitMessage)
-   * @param versionTag when not null, it is the tag generated on near-side to be associated with the entry on far-side
-   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with entry on far-side for WAN
+   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass
+   *        versionTag to TXCommitMessage)
+   * @param versionTag when not null, it is the tag generated on near-side to be associated with the
+   *        entry on far-side
+   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with
+   *        entry on far-side for WAN
-  public void txApplyDestroy(Object key,
-                             TransactionId rmtOrigin,
-                             TXRmtEvent event,
-                             boolean inTokenMode, boolean inRI,
-                             Operation op,
-                             EventID eventId,
-                             Object aCallbackArgument,
-                             List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
-                             ClientProxyMembershipID bridgeContext,
-                             boolean isOperationRemote, TXEntryState txEntryState, VersionTag versionTag, long tailKey);
+  public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event,
+      boolean inTokenMode, boolean inRI, Operation op, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, boolean isOperationRemote, TXEntryState txEntryState,
+      VersionTag versionTag, long tailKey);
+
-   * @param filterRoutingInfo 
-   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass versionTag to TXCommitMessage)
-   * @param versionTag when not null, it is the tag generated on near-side to be associated with the entry on far-side 
-   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with entry on far-side for WAN
+   * @param filterRoutingInfo
+   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass
+   *        versionTag to TXCommitMessage)
+   * @param versionTag when not null, it is the tag generated on near-side to be associated with the
+   *        entry on far-side
+   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with
+   *        entry on far-side for WAN
-  public void txApplyInvalidate(Object key,
-                                Object newValue,
-                                boolean didDestroy,
-                                TransactionId rmtOrigin,
-                                TXRmtEvent event,
-                                boolean localOp,
-                                EventID eventId,
-                                Object aCallbackArgument,
-                                List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
-                                ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag, long tailKey);
+  public void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
+      TransactionId rmtOrigin, TXRmtEvent event, boolean localOp, EventID eventId,
+      Object aCallbackArgument, List<EntryEventImpl> pendingCallbacks,
+      FilterRoutingInfo filterRoutingInfo, ClientProxyMembershipID bridgeContext,
+      TXEntryState txEntryState, VersionTag versionTag, long tailKey);
+
-   * @param filterRoutingInfo 
-   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass versionTag to TXCommitMessage)
-   * @param versionTag when not null, it is the tag generated on near-side to be associated with the entry on far-side
-   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with entry on far-side for WAN
+   * @param filterRoutingInfo
+   * @param txEntryState when not null, txEntryState.versionTag is set (used on near-side to pass
+   *        versionTag to TXCommitMessage)
+   * @param versionTag when not null, it is the tag generated on near-side to be associated with the
+   *        entry on far-side
+   * @param tailKey when not -1, it is the tailKey generated on near-side to be associated with
+   *        entry on far-side for WAN
-  public void txApplyPut(Operation putOp,
-                         Object key,
-                         Object newValue,
-                         boolean didDestroy,
-                         TransactionId rmtOrigin,
-                         TXRmtEvent event,
-                         EventID eventId,
-                         Object aCallbackArgument,
-                         List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
-                         ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag, long tailKey);
-  
+  public void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
+      TransactionId rmtOrigin, TXRmtEvent event, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag,
+      long tailKey);
+
-   * removes the given key if the enclosing RegionEntry is still in
-   * this map
+   * removes the given key if the enclosing RegionEntry is still in this map
-   * Removes the given key if the enclosing RegionEntry is still in this map for
-   * the given EntryEvent
+   * Removes the given key if the enclosing RegionEntry is still in this map for the given
+   * EntryEvent
-  public void removeEntry(Object key, RegionEntry re, boolean updateStat,
-      EntryEventImpl event, LocalRegion owner);
+  public void removeEntry(Object key, RegionEntry re, boolean updateStat, EntryEventImpl event,
+      LocalRegion owner);
-  public boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction, boolean isScheduledTombstone);
-  
+  public boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction,
+      boolean isScheduledTombstone);
+
-
+   * 
-  
+
-  
+
-   * Decrements the transaction reference count.
-   * Some features, like eviction and expiration, will
+   * Decrements the transaction reference count. Some features, like eviction and expiration, will
-  
+
+  default void lockRegionForAtomicTX(LocalRegion r) {}
+
+  default void unlockRegionForAtomicTX(LocalRegion r) {}
+
-  
+

INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 INS43 INS42 INS43 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66