Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Contains the logic for evaluating the health of a GemFire
- * <code>Cache</code> instance according to the thresholds provided in
- * a {@link CacheHealthConfig}.
+ * Contains the logic for evaluating the health of a GemFire <code>Cache</code> instance according
+ * to the thresholds provided in a {@link CacheHealthConfig}.
-class CacheHealthEvaluator extends AbstractHealthEvaluator 
-  implements CacheLifecycleListener {
+class CacheHealthEvaluator extends AbstractHealthEvaluator implements CacheLifecycleListener {
-  
+
-  /** Statistics about the <code>Cache</code> instance.  If no cache
-   * has been created in this VM, this field will be <code>null</code>
+  /**
+   * Statistics about the <code>Cache</code> instance. If no cache has been created in this VM, this
+   * field will be <code>null</code>
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-  CacheHealthEvaluator(GemFireHealthConfig config,
-                       DM dm) {
+  CacheHealthEvaluator(GemFireHealthConfig config, DM dm) {
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Initializes the state of this evaluator based on the given cache
-   * instance. 
+   * Initializes the state of this evaluator based on the given cache instance.
-    InternalDistributedSystem system =
-      (InternalDistributedSystem) cache.getDistributedSystem();
+    InternalDistributedSystem system = (InternalDistributedSystem) cache.getDistributedSystem();
-   * Checks to make sure that the average <code>netSearch</code> time
-   * during the previous health check interval is less than the
-   * {@linkplain CacheHealthConfig#getMaxNetSearchTime threshold}.  If
-   * not, the status is "okay" health.
+   * Checks to make sure that the average <code>netSearch</code> time during the previous health
+   * check interval is less than the {@linkplain CacheHealthConfig#getMaxNetSearchTime threshold}.
+   * If not, the status is "okay" health.
-    if (this.cacheStats == null || isFirstEvaluation() ||
-        this.cacheStats.isClosed()) {
+    if (this.cacheStats == null || isFirstEvaluation() || this.cacheStats.isClosed()) {
-    long deltaNetsearchTime =
-      this.cacheStats.getNetsearchTime() - this.prevNetsearchTime;
+    long deltaNetsearchTime = this.cacheStats.getNetsearchTime() - this.prevNetsearchTime;
-      this.cacheStats.getNetsearchesCompleted() -
-      this.prevNetsearchesCompleted;
+        this.cacheStats.getNetsearchesCompleted() - this.prevNetsearchesCompleted;
-        
+
-        String s = LocalizedStrings.CacheHealthEvaluator_THE_AVERAGE_DURATION_OF_A_CACHE_NETSEARCH_0_MS_EXCEEDS_THE_THRESHOLD_1_MS.toLocalizedString(new Object[] { ratio, threshold });
+        String s =
+            LocalizedStrings.CacheHealthEvaluator_THE_AVERAGE_DURATION_OF_A_CACHE_NETSEARCH_0_MS_EXCEEDS_THE_THRESHOLD_1_MS
+                .toLocalizedString(new Object[] {ratio, threshold});
-   * Checks to make sure that the average <code>load</code> time
-   * during the previous health check interval is less than the
-   * {@linkplain CacheHealthConfig#getMaxLoadTime threshold}.  If
-   * not, the status is "okay" health.
+   * Checks to make sure that the average <code>load</code> time during the previous health check
+   * interval is less than the {@linkplain CacheHealthConfig#getMaxLoadTime threshold}. If not, the
+   * status is "okay" health.
-    if (this.cacheStats == null || isFirstEvaluation() ||
-        this.cacheStats.isClosed()) {
+    if (this.cacheStats == null || isFirstEvaluation() || this.cacheStats.isClosed()) {
-      long deltaLoadTime =
-        this.cacheStats.getLoadTime() - this.prevLoadTime;
-      long deltaLoadsCompleted =
-        this.cacheStats.getLoadsCompleted() -
-        this.prevLoadsCompleted;
+      long deltaLoadTime = this.cacheStats.getLoadTime() - this.prevLoadTime;
+      long deltaLoadsCompleted = this.cacheStats.getLoadsCompleted() - this.prevLoadsCompleted;
-        
+
-          String s = LocalizedStrings.CacheHealthEvaluator_THE_AVERAGE_DURATION_OF_A_CACHE_LOAD_0_MS_EXCEEDS_THE_THRESHOLD_1_MS.toLocalizedString(new Object[] { ratio, threshold });
+          String s =
+              LocalizedStrings.CacheHealthEvaluator_THE_AVERAGE_DURATION_OF_A_CACHE_LOAD_0_MS_EXCEEDS_THE_THRESHOLD_1_MS
+                  .toLocalizedString(new Object[] {ratio, threshold});
-   * Checks to make sure that the cache hit ratio during the previous
-   * health check interval is less than the {@linkplain
-   * CacheHealthConfig#getMinHitRatio threshold}.  If not, the status
-   * is "okay" health.
+   * Checks to make sure that the cache hit ratio during the previous health check interval is less
+   * than the {@linkplain CacheHealthConfig#getMinHitRatio threshold}. If not, the status is "okay"
+   * health.
-    if (this.cacheStats == null || isFirstEvaluation() ||
-        this.cacheStats.isClosed()) {
+    if (this.cacheStats == null || isFirstEvaluation() || this.cacheStats.isClosed()) {
-      long deltaLoadsCompleted =
-        this.cacheStats.getLoadsCompleted() - this.prevLoadsCompleted;
+      long deltaLoadsCompleted = this.cacheStats.getLoadsCompleted() - this.prevLoadsCompleted;
-        this.cacheStats.getNetsearchesCompleted() -
-        this.prevNetsearchesCompleted;
+          this.cacheStats.getNetsearchesCompleted() - this.prevNetsearchesCompleted;
-      double hits =
-        (deltaGets -
-                (deltaLoadsCompleted + deltaNetsearchesCompleted));
+      double hits = (deltaGets - (deltaLoadsCompleted + deltaNetsearchesCompleted));
-        String s = "The hit ratio of this Cache (" + hitRatio +
-          ") is below the threshold (" + threshold + ")";
+        String s = "The hit ratio of this Cache (" + hitRatio + ") is below the threshold ("
+            + threshold + ")";
-   * Checks to make sure that the {@linkplain
-   * CachePerfStats#getEventQueueSize cache event queue size} does
-   * not exceed the {@linkplain CacheHealthConfig#getMaxEventQueueSize
-   * threshold}.  If it does, the status is "okay" health.
+   * Checks to make sure that the {@linkplain CachePerfStats#getEventQueueSize cache event queue
+   * size} does not exceed the {@linkplain CacheHealthConfig#getMaxEventQueueSize threshold}. If it
+   * does, the status is "okay" health.
-    if (this.cacheStats == null || isFirstEvaluation() ||
-        this.cacheStats.isClosed()) {
+    if (this.cacheStats == null || isFirstEvaluation() || this.cacheStats.isClosed()) {
-      String s = LocalizedStrings.CacheHealthEvaluator_THE_SIZE_OF_THE_CACHE_EVENT_QUEUE_0_MS_EXCEEDS_THE_THRESHOLD_1_MS.toLocalizedString(new Object[] { Long.valueOf(eventQueueSize), Long.valueOf(threshold) });
+      String s =
+          LocalizedStrings.CacheHealthEvaluator_THE_SIZE_OF_THE_CACHE_EVENT_QUEUE_0_MS_EXCEEDS_THE_THRESHOLD_1_MS
+              .toLocalizedString(
+                  new Object[] {Long.valueOf(eventQueueSize), Long.valueOf(threshold)});
-      this.prevNetsearchesCompleted =
-        this.cacheStats.getNetsearchesCompleted();
+      this.prevNetsearchesCompleted = this.cacheStats.getNetsearchesCompleted();

UPD66 UPD66 MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 DEL66 DEL66