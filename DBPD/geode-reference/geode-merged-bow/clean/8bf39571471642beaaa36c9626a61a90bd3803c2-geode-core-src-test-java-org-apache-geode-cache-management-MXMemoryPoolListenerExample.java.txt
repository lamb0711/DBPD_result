Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * java -cp geode-dependencies.jar:. -Dgemfire.log-file=system.log -Dgemfire.statistic-archive-file=statsArchive.gfs org.apache.geode.cache.control.MXMemoryPoolListenerExample  
+ * java -cp geode-dependencies.jar:. -Dgemfire.log-file=system.log
+ * -Dgemfire.statistic-archive-file=statsArchive.gfs
+ * org.apache.geode.cache.control.MXMemoryPoolListenerExample
-  /* (non-Javadoc)
-   * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see javax.management.NotificationListener#handleNotification(javax.management.Notification,
+   * java.lang.Object)
-    this.logger.info("Notification: " + arg0 + 
-        "; o: " + arg1 + 
-        "; m: " + arg0.getMessage());
+    this.logger.info("Notification: " + arg0 + "; o: " + arg1 + "; m: " + arg0.getMessage());
-  
+
-    
+
-    DistributedSystem ds = DistributedSystem.connect(dsProps);  
+    DistributedSystem ds = DistributedSystem.connect(dsProps);
-    logger.info("Usage threshold: " + threshold +
-        "; percent tenured: " + percentTenured + 
-        "; Runtime Maximum memory: " + (Runtime.getRuntime().maxMemory() / (1024*1024)) + "Mb" +
-        "; Heap Maximum memory: " + (mbean.getHeapMemoryUsage().getMax() / (1024*1024)) + "Mb");
+    logger.info("Usage threshold: " + threshold + "; percent tenured: " + percentTenured
+        + "; Runtime Maximum memory: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + "Mb"
+        + "; Heap Maximum memory: " + (mbean.getHeapMemoryUsage().getMax() / (1024 * 1024)) + "Mb");
-    
+
-    NotificationEmitter emitter = (NotificationEmitter)mbean;
+    NotificationEmitter emitter = (NotificationEmitter) mbean;
-        logger.info("Pool which supports collection usage threshold: " + p.getName() + "; " + p.getCollectionUsage()); 
+        logger.info("Pool which supports collection usage threshold: " + p.getName() + "; "
+            + p.getCollectionUsage());
-      if (p.getType().equals(MemoryType.HEAP) && p.isUsageThresholdSupported() &&
-          !p.getName().startsWith("Nursery")) {
+      if (p.getType().equals(MemoryType.HEAP) && p.isUsageThresholdSupported()
+          && !p.getName().startsWith("Nursery")) {
-        logger.info("Setting threshold " + (byteThreshold/(1024*1024)) + "Mb on: " + p.getName() + "; " + p.getCollectionUsage());
+        logger.info("Setting threshold " + (byteThreshold / (1024 * 1024)) + "Mb on: " + p.getName()
+            + "; " + p.getCollectionUsage());
-  
+
-    private final String name; 
+    private final String name;
-      for (int i=100;;i++) {
+      for (int i = 100;; i++) {
-        byte[] val = new byte[1012]; // 1024 less 4 bytes for obj ref, less 8 bytes for Integer key == 1012
+        byte[] val = new byte[1012]; // 1024 less 4 bytes for obj ref, less 8 bytes for Integer key
+                                     // == 1012
-        val[percentTenured] = (byte) i; 
+        val[percentTenured] = (byte) i;
-        
+
-        
+
-          logger.info(this.name + ": Clearing tenured data: size=" + (this.tenuredData.size() / 1024) + "Mb");
+          logger.info(this.name + ": Clearing tenured data: size="
+              + (this.tenuredData.size() / 1024) + "Mb");
-    
+
-      this.cache.getLogger().info("Tenured data size: " + this.tenuredData.getName() + 
-          ": " + this.tenuredData.size());
+      this.cache.getLogger().info(
+          "Tenured data size: " + this.tenuredData.getName() + ": " + this.tenuredData.size());
-  
+

UPD66 INS66 INS66