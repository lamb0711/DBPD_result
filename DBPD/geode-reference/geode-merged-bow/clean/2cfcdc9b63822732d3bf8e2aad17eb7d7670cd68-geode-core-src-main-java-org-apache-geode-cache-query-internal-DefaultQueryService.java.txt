GEODE-6990: Add xml persistence for OQL authorization (#4161)

- Added new cache.xml infrastructure for query-config-service including the
method authorizer
- Added a new CacheService QueryConfigurationService to store long
lasting configuration details for the QueryService
- Added testing for both of the above

Co-authored-by: Benjamin Ross <bross@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>
-import org.apache.geode.annotations.Immutable;
-import org.apache.geode.cache.query.security.RestrictedMethodAuthorizer;
-  @Immutable
-  static final MethodInvocationAuthorizer NO_OP_AUTHORIZER = (method, target) -> true;
-      .valueOf(System.getProperty(
-          GEMFIRE_PREFIX + "QueryService.QueryHeterogeneousObjects", "true"))
-      .booleanValue();
+      .parseBoolean(System.getProperty(
+          GEMFIRE_PREFIX + "QueryService.QueryHeterogeneousObjects", "true"));
-      .valueOf(System.getProperty(
-          GEMFIRE_PREFIX + "QueryService.CopyOnReadAtEntryLevel", "false"))
-      .booleanValue();
-
-  /**
-   * Instead of the below property, please use the UnrestrictedMethodAuthorizer
-   * implementation of MethodInvocationAuthorizer, which provides the same functionality.
-   */
-  @Deprecated
-  public static final boolean ALLOW_UNTRUSTED_METHOD_INVOCATION;
-
-  public static final String DEPRECATION_WARNING = "The property " + GEMFIRE_PREFIX +
-      "QueryService.allowUntrustedMethodInvocation is deprecated. " +
-      "Please use the UnrestrictedMethodAuthorizer implementation of MethodInvocationAuthorizer " +
-      "instead";
-
-  static {
-    String deprecatedValue =
-        System.getProperty(GEMFIRE_PREFIX + "QueryService.allowUntrustedMethodInvocation");
-    if (deprecatedValue != null) {
-      logger.warn(DEPRECATION_WARNING);
-    }
-    ALLOW_UNTRUSTED_METHOD_INVOCATION = Boolean.valueOf(deprecatedValue);
-  }
+      .parseBoolean(System.getProperty(
+          GEMFIRE_PREFIX + "QueryService.CopyOnReadAtEntryLevel", "false"));
-      Collections.synchronizedMap(new HashMap<Region, HashSet<IndexCreationData>>());
+      Collections.synchronizedMap(new HashMap<>());
-      throw new IllegalArgumentException(
-          "cache must not be null");
+      throw new IllegalArgumentException("cache must not be null");
-    if (!cache.getSecurityService().isIntegratedSecurity() || ALLOW_UNTRUSTED_METHOD_INVOCATION) {
-      // A no-op authorizer, allow method invocation
-      this.methodInvocationAuthorizer = NO_OP_AUTHORIZER;
-    } else {
-      this.methodInvocationAuthorizer = new RestrictedMethodAuthorizer(cache);
-    }
+    QueryConfigurationService queryConfigurationService =
+        cache.getService(QueryConfigurationService.class);
+    this.methodInvocationAuthorizer = queryConfigurationService.getMethodAuthorizer();

MOV32 MOV32 INS60 MOV21 UPD42 UPD42 INS43 INS59 UPD74 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS57 INS42 INS42 INS43 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL59 DEL42 DEL59 DEL9 DEL86 DEL59 DEL23 DEL42 DEL32 DEL42 DEL32 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL27 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL28 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL27 DEL8 DEL52 DEL42 DEL22 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25