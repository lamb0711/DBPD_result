GEODE-4308: Allow two caches in the same JVM if a feature flag is on

If the system property gemfire.ALLOW_MULTIPLE_SYSTEMS is set, then we will
allow multiple caches in the same JVM. Otherwise, the we will have the
same behavior as before.

If the system property is set, we will not retain any static instance of
the cache or distributed system.

Removed the static instance variables from GemFireCacheImpl.
GemFireCacheImpl.getInstance calls now look up the cache instance from
the distributed system.

Note that a single distributed system can still only have a single
cache. Users should create caches and distributed systems using
CacheFactory.create.

+import static org.apache.geode.distributed.internal.InternalDistributedSystem.ALLOW_MULTIPLE_SYSTEMS;
+import static org.apache.geode.distributed.internal.InternalDistributedSystem.getAnyInstance;
+
-  /** the last instance of GemFireCache created */
-  private static volatile GemFireCacheImpl instance = null;
-
-  /**
-   * Just like instance but is valid for a bit longer so that pdx can still find the cache during a
-   * close.
-   */
-  private static volatile GemFireCacheImpl pdxInstance = null;
-
-    return instance;
+    InternalDistributedSystem system = InternalDistributedSystem.getAnyInstance();
+    if (system == null) {
+      return null;
+    }
+    GemFireCacheImpl cache = (GemFireCacheImpl) system.getCache();
+    if (cache == null) {
+      return null;
+    }
+
+    if (cache.isClosing) {
+      return null;
+    }
+
+    return cache;
+
-    final GemFireCacheImpl result = instance;
+    final GemFireCacheImpl result = getInstance();
-    GemFireCacheImpl result = pdxInstance;
-    if (result == null) {
+
+    InternalDistributedSystem system = getAnyInstance();
+    if (system == null) {
-    return result;
+    GemFireCacheImpl cache = (GemFireCacheImpl) system.getCache();
+    if (cache == null) {
+      throw new CacheClosedException(reason);
+    }
+
+    return cache;
-        GemFireCacheImpl instance = checkExistingCache(existingOk, cacheConfig);
+        GemFireCacheImpl instance = checkExistingCache(existingOk, cacheConfig, system);
-  private static GemFireCacheImpl checkExistingCache(boolean existingOk, CacheConfig cacheConfig) {
-    GemFireCacheImpl instance = getInstance();
+  private static GemFireCacheImpl checkExistingCache(boolean existingOk, CacheConfig cacheConfig,
+      InternalDistributedSystem system) {
+    GemFireCacheImpl instance =
+        ALLOW_MULTIPLE_SYSTEMS ? (GemFireCacheImpl) system.getCache() : getInstance();
-    if (GemFireCacheImpl.instance != null) {
-      Assert.assertTrue(GemFireCacheImpl.instance == null,
-          "Cache instance already in place: " + instance);
-    }
-    GemFireCacheImpl.instance = this;
-    GemFireCacheImpl.pdxInstance = this;
-
-    GemFireCacheImpl cache = GemFireCacheImpl.instance;
+    GemFireCacheImpl cache = getInstance();
-    GemFireCacheImpl.instance = null;
-    GemFireCacheImpl.pdxInstance = null;
-      // Before anything else...make sure that this instance is not
-      // available to anyone "fishing" for a cache...
-      if (GemFireCacheImpl.instance == this) {
-        GemFireCacheImpl.instance = null;
-      }
-
-          if (GemFireCacheImpl.pdxInstance == this) {
-            GemFireCacheImpl.pdxInstance = null;
-          }

INS26 INS26 INS40 INS40 INS31 MOV29 MOV78 INS83 INS83 MOV43 INS42 INS8 INS44 INS60 INS25 INS60 INS25 INS25 MOV41 INS60 INS25 INS43 INS42 INS43 INS59 INS27 INS8 MOV43 INS59 INS27 INS8 INS40 INS8 UPD42 INS43 MOV43 INS59 INS27 INS8 UPD42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS11 INS42 INS33 INS41 INS41 MOV32 INS42 UPD42 INS32 UPD42 INS42 INS11 INS42 INS33 INS53 INS16 INS32 INS42 INS42 INS33 MOV43 INS32 INS33 INS33 INS42 INS42 INS43 INS32 INS14 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL33 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL33 DEL59 DEL23 DEL83 DEL83 DEL42 DEL8 DEL31 DEL42 DEL42 DEL40 DEL33 DEL27 DEL42 DEL42 DEL40 DEL33 DEL27 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL40 DEL52 DEL7 DEL21 DEL40 DEL52 DEL7 DEL21 DEL40 DEL40 DEL33 DEL7 DEL21 DEL40 DEL33 DEL7 DEL21 DEL40 DEL52 DEL27 DEL40 DEL33 DEL7 DEL21 DEL8 DEL25 DEL40 DEL52 DEL27 DEL40 DEL33 DEL7 DEL21 DEL8 DEL25