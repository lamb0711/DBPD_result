GEODE-7949: Geode Redis - Get/Set commands for RedisString datatype to cover new parameters (#4907)


Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Sarah <sabbey@pivotal.io>
+import static org.apache.geode.redis.internal.RedisConstants.ERROR_INVALID_EXPIRE_TIME;
+import static org.apache.geode.redis.internal.RedisConstants.ERROR_NOT_INTEGER;
+import static org.apache.geode.redis.internal.RedisConstants.ERROR_SYNTAX;
+
+import org.apache.geode.redis.internal.RedisDataTypeMismatchException;
+  private boolean NX = false; // Set only if not exists, incompatible with XX
+  private boolean XX = false; // Set only if exists, incompatible with NX
+  private boolean KEEPTTL = false; // Keep existing TTL on key
+  private long expiration = 0L;
+
-    Region<ByteArrayWrapper, ByteArrayWrapper> r = context.getRegionProvider().getStringsRegion();
-
-    checkDataType(key, RedisDataType.REDIS_STRING, context);
-    byte[] value = commandElems.get(VALUE_INDEX);
-    ByteArrayWrapper valueWrapper = new ByteArrayWrapper(value);
+    ByteArrayWrapper value = getValue(commandElems);
-    boolean NX = false; // Set only if not exists
-    boolean XX = false; // Set only if exists
-    long expiration = 0L;
-
-    if (commandElems.size() >= 6) {
-      String elem4;
-      String elem5;
-      String elem6;
-
-      elem4 = Coder.bytesToString(commandElems.get(3));
-      elem5 = Coder.bytesToString(commandElems.get(4));
-      elem6 = Coder.bytesToString(commandElems.get(5));
-
-      if (elem4.equalsIgnoreCase("XX") || elem6.equalsIgnoreCase("XX")) {
-        XX = true;
-      } else if (elem4.equalsIgnoreCase("NX") || elem6.equalsIgnoreCase("NX")) {
-        NX = true;
-      }
-
-      if (elem4.equalsIgnoreCase("PX")) {
-        expiration = getExpirationMillis(elem4, elem5);
-      } else if (elem5.equalsIgnoreCase("PX")) {
-        expiration = getExpirationMillis(elem5, elem6);
-      } else if (elem4.equalsIgnoreCase("EX")) {
-        expiration = getExpirationMillis(elem4, elem5);
-      } else if (elem5.equalsIgnoreCase("EX")) {
-        expiration = getExpirationMillis(elem5, elem6);
-      }
-
-    } else if (commandElems.size() >= 5) {
-      String elem4;
-      String expiry;
-
-      elem4 = Coder.bytesToString(commandElems.get(3));
-      expiry = Coder.bytesToString(commandElems.get(4));
-
-      expiration = getExpirationMillis(elem4, expiry);
-    } else if (commandElems.size() >= 4) {
-      byte[] elem4 = commandElems.get(3);
-      if (elem4.length == 2 && Character.toUpperCase(elem4[1]) == 'X') {
-        if (Character.toUpperCase(elem4[0]) == 'N') {
-          NX = true;
-        } else if (Character.toUpperCase(elem4[0]) == 'X') {
-          XX = true;
-        }
-      }
+    if (context.getKeyRegistrar().isProtected(key)) {
+      throw new RedisDataTypeMismatchException("The key name \"" + key + "\" is protected");
-    boolean keyWasSet = false;
+    String parseError = parseCommandElems(commandElems);
+    if (parseError != null) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), parseError));
+      return;
+    }
+
+    Region<ByteArrayWrapper, ByteArrayWrapper> region =
+        context.getRegionProvider().getStringsRegion();
-      keyWasSet = setNX(r, command, key, valueWrapper, context);
-    } else if (XX) {
-      keyWasSet = setXX(r, command, key, valueWrapper, context);
-    } else {
-      checkAndSetDataType(key, context);
-      r.put(key, valueWrapper);
-      command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), SUCCESS));
-      keyWasSet = true;
+      setNX(region, command, key, value, context);
+      return;
-    if (keyWasSet && expiration > 0L) {
-      context.getRegionProvider().setExpiration(key, expiration);
+    if (XX) {
+      setXX(region, command, key, value, context);
+      return;
+    set(command, context, region, key, value);
-  private boolean setNX(Region<ByteArrayWrapper, ByteArrayWrapper> r, Command command,
-      ByteArrayWrapper key, ByteArrayWrapper valueWrapper,
-      ExecutionHandlerContext context) {
-    checkAndSetDataType(key, context);
-    Object oldValue = r.putIfAbsent(key, valueWrapper);
-    if (oldValue != null) {
-      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-      return false;
-    } else {
-      command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), SUCCESS));
-      return true;
-    }
+  private ByteArrayWrapper getValue(List<byte[]> commandElems) {
+    byte[] value = commandElems.get(VALUE_INDEX);
+    return new ByteArrayWrapper(value);
-  private boolean setXX(Region<ByteArrayWrapper, ByteArrayWrapper> r, Command command,
-      ByteArrayWrapper key, ByteArrayWrapper valueWrapper,
-      ExecutionHandlerContext context) {
-    if (r.containsKey(key)) {
-      checkAndSetDataType(key, context);
-      r.put(key, valueWrapper);
-      command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), SUCCESS));
-      return true;
-    } else {
-      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-      return false;
-    }
+  private Region getRegion(ExecutionHandlerContext context, ByteArrayWrapper key) {
+    RedisDataType redisDataType = context.getKeyRegistrar().getType(key);
+    return context.getRegionProvider().getRegionForType(redisDataType);
-  private long getExpirationMillis(String expx, String expirationString) {
+  private String parseCommandElems(List<byte[]> commandElems) {
+    // Set only if exists, incompatible with EX
+    boolean PX = false;
+    // Set only if not exists, incompatible with PX
+    boolean EX = false;
+
+    NX = XX = EX = PX = KEEPTTL = false;
+
+    expiration = 0L;
+    for (int i = 3; i < commandElems.size(); i++) {
+      String current_arg = Coder.bytesToString(commandElems.get(i)).toUpperCase();
+      switch (current_arg) {
+        case "KEEPTTL":
+          KEEPTTL = true;
+          break;
+        case "EX":
+          EX = true;
+          i++;
+          expiration = parseExpirationTime(current_arg, i, commandElems);
+          break;
+        case "PX":
+          PX = true;
+          i++;
+          expiration = parseExpirationTime(current_arg, i, commandElems);
+          break;
+        case "NX":
+          NX = true;
+          break;
+        case "XX":
+          XX = true;
+          break;
+        default:
+          return ERROR_SYNTAX;
+      }
+    }
+
+    if (EX && PX) {
+      return ERROR_SYNTAX;
+    }
+
+    if (NX && XX) {
+      return ERROR_SYNTAX;
+    }
+
+    if (EX || PX) {
+      if (expiration == -2L) {
+        return ERROR_SYNTAX;
+      }
+      if (expiration == -1L) {
+        return ERROR_NOT_INTEGER;
+      }
+      if (expiration == 0L) {
+        return ERROR_INVALID_EXPIRE_TIME;
+      }
+    }
+
+    return null;
+  }
+
+  private long parseExpirationTime(String arg, int index, List<byte[]> commandElems) {
+    String expirationString;
+
+    try {
+      expirationString = Coder.bytesToString(commandElems.get(index));
+    } catch (IndexOutOfBoundsException e) {
+      return -2L;
+    }
+
+      return -1L;
+    }
+
+    if (expiration <= 0) {
-    if (expx.equalsIgnoreCase("EX")) {
+    if (arg.equalsIgnoreCase("EX")) {
-    } else if (expx.equalsIgnoreCase("PX")) {
+    } else if (arg.equalsIgnoreCase("PX")) {
-      return 0L;
+      return -1L;
+  private void setNX(Region<ByteArrayWrapper, ByteArrayWrapper> region, Command command,
+      ByteArrayWrapper key, ByteArrayWrapper valueWrapper,
+      ExecutionHandlerContext context) {
+    if (keyAlreadyExistsForDifferentDataType(context, key)) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+      return;
+    }
+
+    checkAndSetDataType(key, context);
+    Object oldValue = region.putIfAbsent(key, valueWrapper);
+
+    if (oldValue != null) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+      return;
+    }
+
+    command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), SUCCESS));
+    handleExpiration(context, key);
+  }
+
+  private void setXX(Region<ByteArrayWrapper, ByteArrayWrapper> region, Command command,
+      ByteArrayWrapper key, ByteArrayWrapper valueWrapper,
+      ExecutionHandlerContext context) {
+    if (region.containsKey(key) || keyAlreadyExistsForDifferentDataType(context, key)) {
+      set(command, context, region, key, valueWrapper);
+    } else {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+    }
+  }
+
+  private void set(Command command, ExecutionHandlerContext context,
+      Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion, ByteArrayWrapper key,
+      ByteArrayWrapper valueWrapper) {
+    if (keyAlreadyExistsForDifferentDataType(context, key)) {
+      removeOldValueAndDataTypeAssociation(context, key);
+    }
+    checkAndSetDataType(key, context);
+    stringsRegion.put(key, valueWrapper);
+    command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), SUCCESS));
+    handleExpiration(context, key);
+  }
+
+  private boolean keyAlreadyExistsForDifferentDataType(ExecutionHandlerContext context,
+      ByteArrayWrapper key) {
+    try {
+      checkDataType(key, RedisDataType.REDIS_STRING, context);
+    } catch (RedisDataTypeMismatchException e) {
+      return true;
+    }
+
+    return false;
+  }
+
+  private void removeOldValueAndDataTypeAssociation(ExecutionHandlerContext context,
+      ByteArrayWrapper key) {
+    Region oldRegion = getRegion(context, key);
+    oldRegion.remove(key);
+    context.getKeyRegistrar().unregister(key);
+  }
+
+  private void handleExpiration(ExecutionHandlerContext context, ByteArrayWrapper key) {
+    if (expiration > 0L) {
+      context.getRegionProvider().setExpiration(key, expiration);
+    } else {
+      if (!KEEPTTL) {
+        context.getRegionProvider().cancelKeyExpiration(key);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 MOV44 INS31 INS31 INS31 INS31 INS31 INS83 INS39 MOV59 INS83 INS39 MOV59 INS83 INS39 INS59 INS83 INS39 INS59 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 MOV43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS44 INS8 UPD42 INS44 UPD39 INS44 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 INS44 MOV44 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS9 MOV42 MOV34 MOV60 MOV25 MOV60 MOV60 INS25 INS60 INS25 MOV60 INS25 INS25 INS21 INS74 INS42 MOV60 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS74 INS42 INS60 INS60 MOV21 INS21 INS24 INS25 INS25 MOV25 INS41 UPD42 INS39 UPD42 INS74 INS42 INS60 INS54 INS25 INS74 INS42 INS25 MOV21 INS21 UPD42 MOV25 INS43 INS42 INS43 INS42 UPD42 INS43 INS42 INS43 INS42 INS25 INS21 INS43 INS42 INS43 INS42 INS54 MOV41 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS43 INS42 INS43 INS42 MOV25 UPD43 INS32 INS8 MOV43 INS59 INS27 INS8 INS42 INS8 INS42 INS8 INS32 INS43 INS5 MOV14 INS42 INS42 INS43 INS59 INS32 INS43 MOV5 INS39 INS59 INS39 INS59 INS7 INS7 INS58 UPD27 MOV27 INS37 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS33 INS43 INS5 MOV43 INS59 INS8 INS12 INS27 MOV8 INS43 INS43 INS43 INS32 INS8 INS32 INS27 MOV8 MOV8 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 MOV27 INS8 UPD42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS53 INS42 INS32 INS42 INS33 MOV21 INS41 UPD42 INS21 INS41 INS21 INS41 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS39 INS85 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS9 INS42 INS9 INS42 INS7 INS42 INS34 INS39 INS59 INS42 INS42 INS60 INS50 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS25 INS25 INS25 INS42 INS39 INS85 INS42 INS21 INS44 INS8 INS8 INS42 INS34 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS41 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS21 UPD42 INS42 INS42 INS42 MOV21 INS44 INS8 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 INS34 MOV43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS21 INS21 INS10 INS49 INS21 INS21 INS21 INS10 INS49 MOV21 INS10 INS49 MOV21 INS10 INS49 INS41 INS42 INS42 INS27 INS8 MOV27 MOV8 MOV27 MOV8 INS7 INS43 INS42 INS41 INS41 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS32 INS32 INS43 INS42 MOV41 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS38 INS8 INS43 INS27 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS7 INS42 INS32 INS45 INS7 INS45 INS7 INS37 MOV7 INS45 INS7 INS37 MOV7 INS45 INS45 INS42 INS42 INS38 INS41 INS42 INS38 INS41 INS42 INS34 INS41 INS42 INS32 INS42 INS38 INS38 INS38 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS45 INS42 INS45 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS7 INS32 INS42 INS42 INS9 INS42 INS9 INS42 UPD42 INS42 INS9 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS34 INS34 INS34 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 UPD42 INS42 INS9 MOV42 MOV42 MOV32 UPD42 UPD42 INS42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL7 DEL34 DEL34 DEL42 DEL34 DEL32 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL13 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL13 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL13 DEL27 DEL27 DEL25 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL59 DEL60 DEL39 DEL60 DEL39 DEL60 DEL39 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL32 DEL7 DEL21 DEL42 DEL34 DEL32 DEL32 DEL7 DEL21 DEL42 DEL45 DEL32 DEL45 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL45 DEL32 DEL45 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL21 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL8 DEL25 DEL25 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL31 DEL34 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL7 DEL42 DEL32 DEL21 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL25 DEL9 DEL41 DEL42 DEL27