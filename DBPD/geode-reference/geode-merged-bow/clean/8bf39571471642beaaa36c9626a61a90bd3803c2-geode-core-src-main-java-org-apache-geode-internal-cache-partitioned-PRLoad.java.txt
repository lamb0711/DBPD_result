Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A class which holds the load for a partitioned region
- * on a given VM.
+ * A class which holds the load for a partitioned region on a given VM.
-  
+
-   * Creates a new immutable instance of PRLoad from the provided DataInput.
-   * Actually {@link #addBucket(int, float, float)} will allow the bucket
-   * loads to be mutated.
+   * Creates a new immutable instance of PRLoad from the provided DataInput. Actually
+   * {@link #addBucket(int, float, float)} will allow the bucket loads to be mutated.
-   * @throws IOException if DataSerializer failed to read object from input 
-   * stream
-   * @throws ClassNotFoundException if DataSerializer failed to find class to
-   * read object from input
+   * @throws IOException if DataSerializer failed to read object from input stream
+   * @throws ClassNotFoundException if DataSerializer failed to find class to read object from input
-  public static PRLoad createFromDataInput(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public static PRLoad createFromDataInput(DataInput in)
+      throws IOException, ClassNotFoundException {
-  
+
-    throw new UnsupportedOperationException(
-        "Use PRLoad#createFromDataInput(DataInput) instead.");
+    throw new UnsupportedOperationException("Use PRLoad#createFromDataInput(DataInput) instead.");
-   * Constructs a new PRLoad. Please use {@link #addBucket(int, float, float)}
-   * to add bucket loads.
+   * Constructs a new PRLoad. Please use {@link #addBucket(int, float, float)} to add bucket loads.
-   * Constructs a new PRLoad. The bucket read and writes loads are backed by
-   * the provided arrays which will be owned and potentially modified by this
-   * instance.
+   * Constructs a new PRLoad. The bucket read and writes loads are backed by the provided arrays
+   * which will be owned and potentially modified by this instance.
-  
+
-    this.bucketReadLoads[bucketId] =  readLoad;
-    this.bucketWriteLoads[bucketId] =  writeLoad;
+    this.bucketReadLoads[bucketId] = readLoad;
+    this.bucketWriteLoads[bucketId] = writeLoad;
+   * 
+   * 
-    sb.append(Integer.toHexString(hashCode())); 
+    sb.append(Integer.toHexString(hashCode()));
-  
+
-  
+
-  public void fromData(DataInput in) 
-  throws IOException, ClassNotFoundException {
-    throw new UnsupportedOperationException(
-        "Use PRLoad#createFromDataInput(DataInput) instead.");
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    throw new UnsupportedOperationException("Use PRLoad#createFromDataInput(DataInput) instead.");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66