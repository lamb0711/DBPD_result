GEODE-6450: ClientClusterManagementService supports ssl connection (#3276)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* provide capability for the client to configure ssl connection when getting the cluster management service.
* from the server side, create the SSLContext from the ssl configuration specified on the server
* refactor ssl code

+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLContext;
+
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
+import org.apache.geode.internal.admin.SSLConfig;
+import org.apache.geode.internal.net.SSLConfigurationFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
-import org.apache.geode.management.internal.ClientClusterManagementService;
+import org.apache.geode.management.internal.SSLUtil;
-public class GeodeClusterManagementServiceFactory extends
-    JavaClientClusterManagementServiceFactory {
+public class GeodeClusterManagementServiceFactory
+    extends JavaClientClusterManagementServiceFactory {
+  public ClusterManagementService create() {
+    return create(null, null);
+  }
+
-  public ClusterManagementService create() throws IllegalStateException {
+  public ClusterManagementService create(String username, String password) {
-      String serviceAddress = getHttpServiceAddress(locatorsWithClusterConfig);
-      return new ClientClusterManagementService(serviceAddress);
+      MemberInformation memberInformation = getHttpServiceAddress(locatorsWithClusterConfig);
+
+      SSLContext sslContext = null;
+      HostnameVerifier hostnameVerifier = null;
+      if (memberInformation.isSsl()) {
+        SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
+            ((GemFireCacheImpl) cache).getSystem().getConfig(), SecurableCommunicationChannel.WEB);
+        if (sslConfig.getTruststore() == null) {
+          throw new IllegalStateException(
+              "The server needs to have truststore specified in order to use cluster management service.");
+        }
+
+        sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
+        hostnameVerifier = new NoopHostnameVerifier();
+      }
+
+      return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
+          sslContext, hostnameVerifier, username, password);
-          "Under construction. To retrieve an instance of ClusterManagementService from a Geode client, please use either create(clusterUrl) or create(requestFactory) methods");
+          "Under construction. To retrieve an instance of ClusterManagementService from a Geode client, please use other methods");
-  private String getHttpServiceAddress(Set<InternalDistributedMember> locators) {
-    for (InternalDistributedMember locator : locators) {
+  private MemberInformation getHttpServiceAddress(Set<InternalDistributedMember> locators) {
+    for (InternalDistributedMember locator : locators) {
-        List<MemberInformation> memberInformation =
+        List<MemberInformation> memberInformations =
-        if (memberInformation.isEmpty()) {
+        if (memberInformations.isEmpty()) {
-        // What address to use
-        String host;
-        if (StringUtils.isNotBlank(memberInformation.get(0).getHttpServiceBindAddress())) {
-          host = memberInformation.get(0).getHttpServiceBindAddress();
-        } else if (StringUtils.isNotBlank(memberInformation.get(0).getServerBindAddress())) {
-          host = memberInformation.get(0).getServerBindAddress();
-        } else {
-          host = memberInformation.get(0).getHost();
-        }
-
-        return String.format("http://%s:%d", host, memberInformation.get(0).getHttpServicePort());
+        // return the first available one. Later for HA, we can return the entire list
+        return memberInformations.get(0);
+
+  private String getHostName(MemberInformation memberInformation) {
+    String host;
+    if (StringUtils.isNotBlank(memberInformation.getHttpServiceBindAddress())) {
+      host = memberInformation.getHttpServiceBindAddress();
+    } else if (StringUtils.isNotBlank(memberInformation.getServerBindAddress())) {
+      host = memberInformation.getServerBindAddress();
+    } else {
+      host = memberInformation.getHost();
+    }
+    return host;
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS31 INS31 INS83 INS43 INS42 INS8 INS44 INS44 INS43 INS83 MOV43 INS42 INS44 INS8 INS42 INS41 INS43 INS42 MOV43 INS42 INS42 INS43 INS42 MOV60 INS25 INS41 INS32 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS33 INS33 INS60 INS60 INS25 INS42 INS42 INS32 INS21 INS32 INS8 INS8 INS43 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS7 INS42 INS42 INS32 INS21 INS21 INS42 UPD42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 MOV43 UPD45 INS42 INS32 INS42 INS42 INS7 INS7 INS43 INS59 INS27 INS8 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS53 INS42 INS32 INS42 INS14 UPD42 UPD42 UPD42 MOV42 MOV42 MOV34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS43 INS32 INS42 MOV43 INS45 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL32