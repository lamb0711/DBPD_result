GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
+import org.apache.geode.redis.internal.CoderException;
+import org.apache.geode.redis.internal.RedisConstants;
-    if (commandElems.size() < 2) {
+    if (commandElems.size() != 2) {
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> keyRegion =
-        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
-    if (keyRegion == null) {
-      command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+    Set<ByteArrayWrapper> members;
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
+
+      // companies:ea64fe8c-e0a0-4439-a05d-d0738dd5ef80:idx
+      Set<ByteArrayWrapper> set = region.get(key);
+
+      if (set == null) {
+        command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+        return;
+      }
+
+      members = new HashSet<>(set); // Emulate copy on read
+
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
-    Set<ByteArrayWrapper> members = new HashSet(keyRegion.keySet()); // Emulate copy on read
-    respondBulkStrings(command, context, members);
+    try {
+      command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), members));
+    } catch (CoderException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          RedisConstants.SERVER_ERROR_MESSAGE));
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS60 INS54 INS54 UPD27 INS74 INS59 INS58 INS8 INS12 INS12 INS8 INS12 UPD43 MOV43 MOV43 INS42 INS43 INS59 INS60 MOV60 MOV25 INS21 INS44 INS8 INS44 INS8 MOV21 INS44 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD74 MOV74 INS59 INS7 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS42 MOV42 UPD42 MOV42 INS74 INS42 INS32 UPD42 INS32 UPD42 INS42 INS14 INS42 INS32 INS32 INS42 INS32 INS42 UPD42 INS32 INS42 INS32 INS43 UPD43 MOV43 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS74 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV43 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 MOV42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL14 DEL42 DEL45 DEL79 DEL43 DEL74 DEL32 DEL32 DEL11 DEL59 DEL60