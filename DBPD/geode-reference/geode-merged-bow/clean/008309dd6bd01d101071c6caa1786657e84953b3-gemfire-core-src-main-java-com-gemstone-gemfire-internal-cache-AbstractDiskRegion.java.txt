Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.Iterator;
+import java.util.Map;
+import com.gemstone.gemfire.internal.util.concurrent.CustomEntryConcurrentHashMap;
+  private boolean offHeap;
+  
+      this.offHeap = drv.getOffHeap();
+    this.offHeap = drv.getOffHeap();
-                        String compressorClassName) {
+                        String compressorClassName, boolean offHeap) {
+    this.offHeap = offHeap;
+      if (this.entries != null) {
+        CustomEntryConcurrentHashMap<Object, Object> other = ((AbstractRegionMap)this.entries)._getMap();
+        Iterator<Map.Entry<Object, Object>> it = other
+            .entrySetWithReusableEntries().iterator();
+        while (it.hasNext()) {
+          Map.Entry<Object, Object> me = it.next();
+          RegionEntry oldRe = (RegionEntry)me.getValue();
+          if (oldRe instanceof OffHeapRegionEntry) {
+            ((OffHeapRegionEntry) oldRe).release();
+          } else {
+            // no need to keep iterating; they are all either off heap or on heap.
+            break;
+          }
+        }
+      }
+      + " -offHeap=" + getOffHeap()
+    sb.append("-offHeap=" + getOffHeap()); sb.append(lineSeparator);
+    msg.append("\n\toffHeap=").append(getOffHeap());
+  @Override
+  public boolean getOffHeap() {
+    return this.offHeap;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS44 MOV21 MOV21 INS78 INS83 INS39 INS42 INS8 INS42 INS21 INS39 INS42 INS21 INS25 INS21 INS21 INS21 INS42 INS41 INS7 INS7 MOV32 INS8 INS32 INS32 INS32 INS22 INS21 INS22 INS32 INS22 INS42 MOV21 MOV21 INS25 MOV21 MOV21 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS7 INS52 INS42 INS42 INS42 INS52 INS42 INS27 INS8 INS45 INS32 INS45 INS32 INS42 INS42 INS45 INS42 INS22 INS32 INS22 INS33 INS60 INS60 INS61 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS43 INS43 INS43 INS42 INS32 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS60 MOV25 INS42 INS42 INS42 INS36 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS43 INS59 INS62 INS8 INS11 INS40 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS11 INS42 INS43 INS21 INS10 INS43 INS22 INS40 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS36 INS42 INS11 INS43 INS42 INS42