Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+    if (threadName.startsWith("Cache Client Updater Thread")) {
+      return stackSize == 13 && thread.get(2).contains("SocketInputStream.socketRead0");
+    }
+    if (threadName.startsWith("Client Message Dispatcher")) {
+      return stackSize == 13 && thread.get(1).contains("TIMED_WAITING");
+    }
+    if (threadName.startsWith("Geode Failure Detection Server")) {
+      return stackSize < 11 && thread.getFirstFrame().contains("socketAccept");
+    }
+    if (threadName.startsWith("Geode Membership Timer")) {
+//      System.out.println("gf timer stack size = " + stackSize + "; frame = " + thread.get(1));
+      return stackSize < 9 && !thread.isRunnable();
+    }
+    if (threadName.startsWith("Geode Membership View Creator")) {
+//    System.out.println("gf view creator stack size = " + stackSize + "; frame = " + thread.get(1));
+    return stackSize < 8 && !thread.isRunnable();
+    }
+    if (threadName.startsWith("Geode Heartbeat Sender")) {
+      return stackSize <= 8 && !thread.isRunnable();
+    }
+    // thread currently disabled
+//    if (threadName.startsWith("Geode Suspect Message Collector")) {
+//      return stackSize <= 7 && thread.get(1).contains("Thread.State: WAITING");
+//    }
+    if (threadName.startsWith("multicast receiver")) {
+    return (stackSize > 2 && thread.get(2).contains("PlainDatagramSocketImpl.receive"));
+  }
+    if (threadName.startsWith("P2P Listener")) {
+//      System.out.println("p2p listener stack size = " + stackSize + "; frame = " + thread.get(2));
+      return (stackSize == 8 && thread.get(2).contains("SocketChannelImpl.accept"));
+    }
-      return (stackSize == 11 && 
+      return (stackSize <= 14 && 
-          && (stackSize > 5 && thread.get(5).contains("fetchHeader"))) return true; // reading from a client
+          && (stackSize > 6 && thread.get(6).contains("fetchHeader"))) return true; // reading from a client
+    if (threadName.startsWith("TCP Check ServerSocket Thread")) {
+      return (stackSize >= 3 && thread.get(2).contains("socketAccept"));
+    }
+    if (threadName.startsWith("Timer runner")) {
+//      System.out.println("timer runner stack size = " + stackSize + "; frame = " + thread.get(1));
+      return (stackSize <= 10 && thread.get(1).contains("TIMED_WAITING"));
+    }
+    if (threadName.startsWith("TransferQueueBundler")) {
+//      System.out.println("transfer bundler stack size = " + stackSize + "; frame = " + thread.get(2));
+      return (stackSize == 9 && thread.get(2).contains("sun.misc.Unsafe.park"));
+    }
+    if (threadName.startsWith("unicast receiver")) {
+//      System.out.println("unicast receiver stack size = " + stackSize + "; frame = " + thread.get(3));
+      return (stackSize > 2 && thread.get(2).contains("PlainDatagramSocketImpl.receive"));
+    }
-    if (threadName.startsWith("FD_SOCK ClientConnectionHandler")) {
-      return true;
-    }
-    if (threadName.startsWith("FD_SOCK Ping thread")) {
-      return (stackSize <= 9 && thread.getFirstFrame().contains("socketRead"));
-    }
-    if (threadName.startsWith("FD_SOCK listener thread")) {
-      return (stackSize <= 9  && thread.getFirstFrame().contains("socketAccept"));
-    }
-    if (threadName.startsWith("UDP Loopback Message Handler")) {
-      return !thread.isRunnable() && (stackSize <= 9 && thread.getFirstFrame().contains("Object.wait"));
-    }
-    if (threadName.startsWith("UDP ucast receiver")) {
-      return (stackSize == 11 && thread.getFirstFrame().contains("SocketImpl.receive"));
-    }
-    if (threadName.startsWith("VERIFY_SUSPECT")) {
-      return !thread.isRunnable() && (stackSize <=9 && thread.getFirstFrame().contains("Object.wait"));
-    }
-    if (threadName.startsWith("View Message Processor")) {
-      return isIdleExecutor(thread);
-    }
-    if (threadName.startsWith("ViewHandler")) {
-      return !thread.isRunnable() && (stackSize <= 8);
-    }

MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 INS25 INS25 INS25 INS25 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS45 INS41 UPD45 UPD45 INS42 INS42 INS45 INS41 INS42 INS42 INS45 INS41 UPD45 INS42 INS42 INS45 INS41 UPD45 UPD45 UPD45 UPD45 UPD45 INS27 INS27 MOV27 INS27 INS27 INS36 INS36 INS36 INS36 INS27 INS32 INS27 INS32 UPD27 INS27 MOV38 INS27 MOV38 MOV27 INS27 MOV27 MOV27 INS27 INS42 INS34 INS32 INS42 INS45 INS42 INS34 INS32 INS42 INS45 UPD34 INS42 INS34 INS42 INS34 INS27 INS32 UPD27 UPD27 UPD27 UPD27 UPD27 INS27 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS34 INS32 INS42 INS45 UPD34 UPD45 UPD34 UPD34 UPD45 UPD34 UPD45 UPD45 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 UPD42 INS34 UPD34 UPD42 INS34 UPD42 INS34 UPD42 INS34 MOV42 INS42 INS34 UPD34 DEL9 DEL36 DEL36 DEL36 DEL27 DEL36 DEL27 DEL42 DEL32