GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
-  private static final Logger logger = LogService.getLogger();
-    Region region = messageExecutionContext.getCache().getRegion(regionName);
-    if (region == null) {
-      logger.error("Received get request for nonexistent region: {}", regionName);
-      return Failure.of(BasicTypes.ErrorCode.SERVER_ERROR,
-          "Region \"" + regionName + "\" not found");
+
+
+    Object decodedKey = serializationService.decode(request.getKey());
+    if (decodedKey == null) {
+      return Failure.of(BasicTypes.ErrorCode.INVALID_REQUEST, "Performing a get on a NULL key.");
-    try {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(true);
+    AuthorizingCache authorizingCache = messageExecutionContext.getAuthorizingCache();
+    Object resultValue = authorizingCache.get(regionName, decodedKey);
-      Object decodedKey = serializationService.decode(request.getKey());
-      if (decodedKey == null) {
-        return Failure.of(BasicTypes.ErrorCode.INVALID_REQUEST, "Performing a get on a NULL key.");
-      }
-      Object resultValue = region.get(decodedKey);
-
-      BasicTypes.EncodedValue encodedValue = serializationService.encode(resultValue);
-      return Success.of(RegionAPI.GetResponse.newBuilder().setResult(encodedValue).build());
-    } finally {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(false);
-    }
-  }
-
-  public static ResourcePermission determineRequiredPermission(RegionAPI.GetRequest request,
-      ProtobufSerializationService serializer) throws DecodingException {
-    return new ResourcePermission(ResourcePermission.Resource.DATA,
-        ResourcePermission.Operation.READ, request.getRegionName(),
-        serializer.decode(request.getKey()).toString());
+    BasicTypes.EncodedValue encodedValue = serializationService.encode(resultValue);
+    return Success.of(RegionAPI.GetResponse.newBuilder().setResult(encodedValue).build());

INS26 INS40 MOV8 MOV60 INS60 INS43 INS59 INS42 INS42 INS32 MOV42 UPD42 MOV42 UPD42 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL40 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31