Revert " GEODE-6580: Cleanup static analyzer warnings. (#3415)"

This reverts commit 80a32b19c3cdbfe75c37d7b70104ea708739d2cd.

+import org.apache.geode.internal.cache.EntryEventImpl;
-  private final Queue<Runnable> volunteeringQueue = new ConcurrentLinkedQueue<>();
+  private final Queue volunteeringQueue = new ConcurrentLinkedQueue();
-    synchronized (preInitQueueMonitor) {
-      preInitQueue = new ConcurrentLinkedQueue<>();
+    synchronized (this.preInitQueueMonitor) {
+      this.preInitQueue = new ConcurrentLinkedQueue<>();
-    clientBucketProfilesMap = new ConcurrentHashMap<>();
+    this.clientBucketProfilesMap = new ConcurrentHashMap<>();
-    if (buckets != null) {
+    if (this.buckets != null) {
-    buckets = bucs;
+    this.buckets = bucs;
-    synchronized (preInitQueueMonitor) {
-      Iterator pi = preInitQueue.iterator();
+    synchronized (this.preInitQueueMonitor) {
+      Iterator pi = this.preInitQueue.iterator();
-            for (ProxyBucketRegion bucket : buckets) {
+            for (ProxyBucketRegion bucket : this.buckets) {
-            for (int i = 0; i < buckets.length; i++) {
-              BucketAdvisor ba = buckets[i].getBucketAdvisor();
+            for (int i = 0; i < this.buckets.length; i++) {
+              BucketAdvisor ba = this.buckets[i].getBucketAdvisor();
-        preInitQueue = null; // prevent further additions to the queue
-        preInitQueueMonitor.notifyAll();
+        this.preInitQueue = null; // prevent further additions to the queue
+        this.preInitQueueMonitor.notifyAll();
-  public Queue<Runnable> getVolunteeringQueue() {
-    return volunteeringQueue;
+  public Queue getVolunteeringQueue() {
+    return this.volunteeringQueue;
-    return volunteeringSemaphore;
+    return this.volunteeringSemaphore;
-    for (Integer bucketId : clientBucketProfilesMap.keySet()) {
+    for (Integer bucketId : this.clientBucketProfilesMap.keySet()) {
-      for (BucketProfile profile : clientBucketProfilesMap.get(bucketId)) {
+      for (BucketProfile profile : this.clientBucketProfilesMap.get(bucketId)) {
-      Set<ServerBucketProfile> parr = new HashSet<>(clientBucketProfilesMap.get(bucketId));
+      Set<ServerBucketProfile> parr = new HashSet<>(this.clientBucketProfilesMap.get(bucketId));
-    return clientBucketProfilesMap.get(bucketId);
+    return this.clientBucketProfilesMap.get(bucketId);
-    clientBucketProfilesMap.put(bucketId, Collections.unmodifiableSet(profiles));
+    this.clientBucketProfilesMap.put(bucketId, Collections.unmodifiableSet(profiles));
+   *
+   * @return returns a list of primary bucket IDs
+   *
-  public void closeBucketAdvisors() {
+  public List closeBucketAdvisors() {
+    List<Integer> primariesHeld = Collections.emptyList();
-      for (ProxyBucketRegion pbr : buckets) {
+      for (int i = 0; i < buckets.length; i++) {
+        ProxyBucketRegion pbr = buckets[i];
+        if (pbr.isPrimary()) {
+          if (primariesHeld.isEmpty()) {
+            primariesHeld = new ArrayList<>();
+          }
+          primariesHeld.add(i);
+        }
+    return primariesHeld;
-    if (buckets != null) {
+    if (this.buckets != null) {
-    synchronized (preInitQueueMonitor) {
+    synchronized (this.preInitQueueMonitor) {
-          getPartitionedRegion().getName(), memberId, removedId, crashed);
+          this.getPartitionedRegion().getName(), memberId, removedId, crashed);
-          getPartitionedRegion().getName(), memberId,
+          this.getPartitionedRegion().getName(), memberId,
-    synchronized (preInitQueueMonitor) {
-      if (preInitQueue != null) {
+    synchronized (this.preInitQueueMonitor) {
+      if (this.preInitQueue != null) {
-        preInitQueue.add(qbf);
+        this.preInitQueue.add(qbf);
-    if (buckets != null) {
+    if (this.buckets != null) {
-      for (int i = 0; i < buckets.length; i++) {
+      for (int i = 0; i < this.buckets.length; i++) {
-          buckets[i].getBucketAdvisor().removeIdWithSerial(memberId, s, regionDestroyed);
+          this.buckets[i].getBucketAdvisor().removeIdWithSerial(memberId, s, regionDestroyed);
-      if (sick && !buckets[i].getBucketOwners().contains(member)) {
+      if (sick && !this.buckets[i].getBucketOwners().contains(member)) {
-      buckets[i].setBucketSick(member, sick);
+      this.buckets[i].setBucketSick(member, sick);
-            (buckets[i].isBucketSick() ? "sick" : "healthy"));
+            (this.buckets[i].isBucketSick() ? "sick" : "healthy"));
-      buckets[bucketId].setBucketSick(member, false);
+      this.buckets[bucketId].setBucketSick(member, false);
-      buckets[bucketId].setBucketSick(member, sick);
+      this.buckets[bucketId].setBucketSick(member, sick);
-    assert buckets != null;
-    assert buckets[bucketId] != null;
-    if (buckets[bucketId].isBucketSick()) {
-      Set<DistributedMember> sm = buckets[bucketId].getSickMembers();
+    assert this.buckets != null;
+    assert this.buckets[bucketId] != null;
+    if (this.buckets[bucketId].isBucketSick()) {
+      Set<DistributedMember> sm = this.buckets[bucketId].getSickMembers();
-      isPartitioned = true;
+      this.isPartitioned = true;
-      if (requiresNotification)
+      if (this.requiresNotification)
-      requiresNotification = (s & REQUIRES_NOTIFICATION_MASK) != 0;
+      this.requiresNotification = (s & REQUIRES_NOTIFICATION_MASK) != 0;
-      localMaxMemory = in.readInt();
-      isDataStore = localMaxMemory > 0;
-      fixedPAttrs = DataSerializer.readObject(in);
-      shutDownAllStatus = in.readInt();
+      this.localMaxMemory = in.readInt();
+      this.isDataStore = this.localMaxMemory > 0;
+      this.fixedPAttrs = DataSerializer.readObject(in);
+      this.shutDownAllStatus = in.readInt();
-      out.writeInt(localMaxMemory);
-      DataSerializer.writeObject(fixedPAttrs, out);
-      out.writeInt(shutDownAllStatus);
+      out.writeInt(this.localMaxMemory);
+      DataSerializer.writeObject(this.fixedPAttrs, out);
+      out.writeInt(this.shutDownAllStatus);
-      sb.append("; isDataStore=").append(isDataStore).append("; requiresNotification=")
-          .append(requiresNotification).append("; localMaxMemory=").append(localMaxMemory)
-          .append("; numBuckets=").append(numBuckets);
-      if (fixedPAttrs != null) {
-        sb.append("; FixedPartitionAttributes=").append(fixedPAttrs);
+      sb.append("; isDataStore=").append(this.isDataStore).append("; requiresNotification=")
+          .append(this.requiresNotification).append("; localMaxMemory=").append(this.localMaxMemory)
+          .append("; numBuckets=").append(this.numBuckets);
+      if (this.fixedPAttrs != null) {
+        sb.append("; FixedPartitionAttributes=").append(this.fixedPAttrs);
-      sb.append("; filterProfile=").append(filterProfile);
-      sb.append("; shutDownAllStatus=").append(shutDownAllStatus);
+      sb.append("; filterProfile=").append(this.filterProfile);
+      sb.append("; shutDownAllStatus=").append(this.shutDownAllStatus);
-    if (lastActiveProfiles != numProfs) {
-      numDataStores = adviseDataStore().size();
-      lastActiveProfiles = numProfs;
+    if (this.lastActiveProfiles != numProfs) {
+      this.numDataStores = adviseDataStore().size();
+      this.lastActiveProfiles = numProfs;
-    return numDataStores;
+    return this.numDataStores;
-    return adviseDataStore(false);
+    return this.adviseDataStore(false);
-  public Set<InternalDistributedMember> adviseAllPRNodes() {
+  public Set adviseAllPRNodes() {
-  public Set<InternalDistributedMember> adviseRequiresNotification() {
+  public Set adviseRequiresNotification(final EntryEventImpl event) {
-    if (buckets == null) {
+    if (this.buckets == null) {
-    return buckets[bucketId].isPrimary();
+    return this.buckets[bucketId].isPrimary();
-    if (buckets == null) {
+    if (this.buckets == null) {
-    return buckets[bucketId].getHostedBucketRegion() != null;
+    return this.buckets[bucketId].getHostedBucketRegion() != null;
-    return buckets != null;
+    return this.buckets != null;
-    Assert.assertTrue(buckets != null);
-    ProxyBucketRegion pbr = buckets[bucketId];
+    Assert.assertTrue(this.buckets != null);
+    ProxyBucketRegion pbr = this.buckets[bucketId];
-    Assert.assertTrue(buckets != null);
-    ProxyBucketRegion pbr = buckets[bucketId];
+    Assert.assertTrue(this.buckets != null);
+    ProxyBucketRegion pbr = this.buckets[bucketId];
-    Assert.assertTrue(buckets != null);
+    Assert.assertTrue(this.buckets != null);
-    if (buckets == null) {
+    if (this.buckets == null) {
-    int[] result = new int[buckets.length];
+    int[] result = new int[this.buckets.length];
-      ProxyBucketRegion pbr = buckets[i];
+      ProxyBucketRegion pbr = this.buckets[i];
-    synchronized (preInitQueueMonitor) {
+    synchronized (this.preInitQueueMonitor) {
-        while (preInitQueue != null) {
+        while (this.preInitQueue != null) {
-            preInitQueueMonitor.wait(); // spurious wakeup ok
+            this.preInitQueueMonitor.wait(); // spurious wakeup ok
-            getAdvisee().getCancelCriterion().checkCancelInProgress(e);
+            this.getAdvisee().getCancelCriterion().checkCancelInProgress(e);
-    Assert.assertTrue(buckets != null);
-    Bucket b = buckets[bucketId];
+    Assert.assertTrue(this.buckets != null);
+    Bucket b = this.buckets[bucketId];
-    Assert.assertTrue(buckets != null);
-    Bucket b = buckets[bucketId];
+    Assert.assertTrue(this.buckets != null);
+    Bucket b = this.buckets[bucketId];
-    Assert.assertTrue(buckets != null);
-    return buckets[bucketId].getBucketRedundancy() >= 0;
+    Assert.assertTrue(this.buckets != null);
+    return this.buckets[bucketId].getBucketRedundancy() >= 0;
-      Assert.assertTrue(buckets != null);
-      return buckets[bucketId].getBucketAdvisor().waitForRedundancy(minRedundancy);
+      Assert.assertTrue(this.buckets != null);
+      return this.buckets[bucketId].getBucketAdvisor().waitForRedundancy(minRedundancy);
-    Assert.assertTrue(buckets != null);
-    return buckets[bucketId].getBucketRedundancy();
+    Assert.assertTrue(this.buckets != null);
+    return this.buckets[bucketId].getBucketRedundancy();
-    Assert.assertTrue(buckets != null);
-    return buckets[bucketId].getBucketOwners();
+    Assert.assertTrue(this.buckets != null);
+    return this.buckets[bucketId].getBucketOwners();
-    Assert.assertTrue(buckets != null);
+    Assert.assertTrue(this.buckets != null);
-    return buckets;
+    return this.buckets;
-      pbrs = buckets;
-      Assert.assertTrue(pbrs != null);
+      this.pbrs = RegionAdvisor.this.buckets;
+      Assert.assertTrue(this.pbrs != null);
-      return pbrs.length;
+      return this.pbrs.length;
-          if (currentItem + 1 < pbrs.length) {
-            int possibleBucketId = currentItem;
+          if (this.currentItem + 1 < BucketSet.this.pbrs.length) {
+            int possibleBucketId = this.currentItem;
-            while (++possibleBucketId < pbrs.length && !bucketExists) {
+            while (++possibleBucketId < BucketSet.this.pbrs.length && !bucketExists) {
-          return currentItem + 1 < pbrs.length;
+          return this.currentItem + 1 < BucketSet.this.pbrs.length;
-        if (++currentItem < pbrs.length) {
-          if (isStorageAssignedForBucket(currentItem)) {
-            return currentItem;
+        if (++this.currentItem < BucketSet.this.pbrs.length) {
+          if (isStorageAssignedForBucket(this.currentItem)) {
+            return this.currentItem;
-                  if (fpa.hasBucket(currentItem)) {
+                  if (fpa.hasBucket(this.currentItem)) {
-                  currentItem++;
+                  this.currentItem++;
-              } while (currentItem < pbrs.length && !bucketExists);
+              } while (this.currentItem < BucketSet.this.pbrs.length && !bucketExists);
-                getPartitionedRegion().createBucket(currentItem, 0, null);
-                return currentItem;
+                getPartitionedRegion().createBucket(this.currentItem, 0, null);
+                return this.currentItem;
-              getPartitionedRegion().createBucket(currentItem, 0, null);
-              return currentItem;
+              getPartitionedRegion().createBucket(this.currentItem, 0, null);
+              return this.currentItem;
-    for (ProxyBucketRegion pbr : buckets) {
+    for (ProxyBucketRegion pbr : this.buckets) {
-      logger.debug("[dumpProfiles] dumping {}", toStringWithProfiles());
+      logger.debug("[dumpProfiles] dumping {}", this.toStringWithProfiles());
-    ProxyBucketRegion[] pbrs = buckets;
+    ProxyBucketRegion[] pbrs = this.buckets;
-    Assert.assertTrue(buckets != null);
-    ProxyBucketRegion b = buckets[bucketId];
+    Assert.assertTrue(this.buckets != null);
+    ProxyBucketRegion b = this.buckets[bucketId];
-    Assert.assertTrue(buckets != null);
-    ProxyBucketRegion[] bucs = buckets;
+    Assert.assertTrue(this.buckets != null);
+    ProxyBucketRegion[] bucs = this.buckets;
-    final ProxyBucketRegion[] bucs = buckets;
+    final ProxyBucketRegion[] bucs = this.buckets;
-    synchronized (preInitQueueMonitor) {
-      if (preInitQueue != null) {
+    synchronized (this.preInitQueueMonitor) {
+      if (this.preInitQueue != null) {
-        preInitQueue.add(qbf);
+        this.preInitQueue.add(qbf);
-      bucketId = bId;
-      bucketProfile = p;
-      isRemoval = false;
-      crashed = false;
-      memberDeparted = false;
-      memberId = null;
-      serials = null;
-      destroyed = false;
-      fromMembershipListener = false;
+      this.bucketId = bId;
+      this.bucketProfile = p;
+      this.isRemoval = false;
+      this.crashed = false;
+      this.memberDeparted = false;
+      this.memberId = null;
+      this.serials = null;
+      this.destroyed = false;
+      this.fromMembershipListener = false;
-      bucketId = 0;
-      bucketProfile = null;
-      isRemoval = true;
+      this.bucketId = 0;
+      this.bucketProfile = null;
+      this.isRemoval = true;
-      memberDeparted = true;
-      memberId = mbr;
-      serials = null;
+      this.memberDeparted = true;
+      this.memberId = mbr;
+      this.serials = null;
-      bucketId = 0;
-      bucketProfile = null;
-      isRemoval = true;
-      crashed = false;
-      memberDeparted = false;
-      memberId = mbr;
+      this.bucketId = 0;
+      this.bucketProfile = null;
+      this.isRemoval = true;
+      this.crashed = false;
+      this.memberDeparted = false;
+      this.memberId = mbr;
-      fromMembershipListener = false;
+      this.fromMembershipListener = false;
-  public Set<InternalDistributedMember> adviseBucketProfileExchange() {
+  public Set adviseBucketProfileExchange() {
-    final ProxyBucketRegion[] bucs = buckets;
+    final ProxyBucketRegion[] bucs = this.buckets;
-    final ProxyBucketRegion[] bucs = buckets;
+    final ProxyBucketRegion[] bucs = this.buckets;
-    if (buckets != null) {
-      for (ProxyBucketRegion bucket : buckets) {
+    if (this.buckets != null) {
+      for (ProxyBucketRegion bucket : this.buckets) {
-      return id;
+      return this.id;
-      return bp;
+      return this.bp;
-      id = in.readInt();
-      isServerBucketProfile = in.readBoolean();
-      if (isServerBucketProfile)
-        bp = new ServerBucketProfile();
+      this.id = in.readInt();
+      this.isServerBucketProfile = in.readBoolean();
+      if (this.isServerBucketProfile)
+        this.bp = new ServerBucketProfile();
-        bp = new BucketProfile();
+        this.bp = new BucketProfile();
-      InternalDataSerializer.invokeFromData(bp, in);
+      InternalDataSerializer.invokeFromData(this.bp, in);
-      out.writeInt(id);
-      out.writeBoolean(isServerBucketProfile);
-      InternalDataSerializer.invokeToData(bp, out);
+      out.writeInt(this.id);
+      out.writeBoolean(this.isServerBucketProfile);
+      InternalDataSerializer.invokeToData(this.bp, out);
-            wait(1000);
+            this.wait(1000);
-        profileChanged = false;
+        this.profileChanged = false;
-        profileChanged = true;
-        notifyAll();
+        this.profileChanged = true;
+        this.notifyAll();
-        profileChanged = true;
-        notifyAll();
+        this.profileChanged = true;
+        this.notifyAll();

INS26 INS40 MOV43 MOV43 INS43 INS43 INS43 INS42 INS44 INS43 INS65 INS42 INS60 INS41 MOV21 MOV21 MOV42 MOV42 INS83 INS43 INS42 INS60 MOV60 MOV42 MOV78 MOV44 MOV78 MOV44 INS43 INS22 INS22 INS22 INS22 INS66 INS74 INS59 INS42 INS22 INS22 INS22 UPD42 MOV42 MOV8 MOV8 MOV43 MOV43 MOV5 INS22 MOV43 MOV43 INS22 INS22 MOV5 INS59 INS5 INS22 MOV5 MOV42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS43 INS43 INS42 INS32 INS24 INS22 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS22 INS52 INS42 INS52 INS22 INS22 INS22 INS22 INS60 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS42 INS22 UPD42 INS22 INS43 INS85 INS22 INS52 INS42 MOV85 INS22 INS22 INS22 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS58 MOV27 INS37 INS8 INS52 INS42 INS52 INS42 INS27 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS52 INS42 MOV5 INS22 INS43 INS59 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS42 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS39 INS59 INS42 MOV60 INS25 MOV21 INS22 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS2 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS42 INS34 INS32 INS8 INS52 INS42 INS22 INS42 INS22 INS22 INS22 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS22 INS42 INS52 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS22 INS52 INS52 INS42 INS22 INS22 INS22 INS42 INS42 INS25 INS21 INS52 INS52 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS8 INS32 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS22 INS22 INS42 INS22 INS22 INS42 INS42 INS52 INS42 INS22 INS52 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS22 INS52 INS22 INS42 INS14 INS22 INS22 INS52 INS42 INS22 INS22 INS42 MOV32 INS22 INS52 INS42 INS52 INS42 INS22 INS74 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS22 INS42 INS43 INS42 INS52 INS42 INS22 INS42 MOV32 INS22 INS52 INS42 INS52 INS42 INS42 INS52 INS52 INS42 INS52 INS42 INS22 INS22 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 DEL42 DEL43 DEL74 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL42 DEL40 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42