GEODE-6459:  add create jdbc-mapping option to specify the PDX class file (#3249)

Added a new --pdx-class-file option to gfsh create jdbc-mapping that can take a jar or class that contains the named pdx class.
This file needs to be accessible by the gfsh process. It will be transferred to the server and used to define the pdx info in the jdbc-mapping.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>

+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.SimpleRemoteInputStream;
+import com.healthmarketscience.rmiio.exporter.RemoteStreamExporter;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.ManagementAgent;
+import org.apache.geode.management.internal.SystemManagementService;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.remote.CommandExecutionContext;
+import org.apache.geode.management.internal.cli.result.FileResult;
+import org.apache.geode.management.internal.cli.result.ModelCommandResult;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
+  private static final String CREATE_MAPPING__PDX_CLASS_FILE = MappingConstants.PDX_CLASS_FILE;
+  private static final String CREATE_MAPPING__PDX_CLASS_FILE__HELP =
+      "The file that contains the PDX class. It must be a file with the \".jar\" or \".class\" extension. By default, the PDX class must be on the server's classpath or gfsh deployed.";
-  @CliMetaData(relatedTopic = CliStrings.DEFAULT_TOPIC_GEODE)
+  @CliMetaData(
+      interceptor = "org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand$Interceptor",
+      relatedTopic = {CliStrings.DEFAULT_TOPIC_GEODE})
+      @CliOption(key = CREATE_MAPPING__PDX_CLASS_FILE,
+          help = CREATE_MAPPING__PDX_CLASS_FILE__HELP) String pdxClassFile,
-          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
+          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups)
+      throws IOException {
+    String tempPdxClassFilePath = null;
+    String remoteInputStreamName = null;
+    RemoteInputStream remoteInputStream = null;
+    if (pdxClassFile != null) {
+      List<String> pdxClassFilePaths = getFilePathFromShell();
+      if (pdxClassFilePaths.size() != 1) {
+        throw new IllegalStateException(
+            "Expected only one element in the list returned by getFilePathFromShell, but it returned: "
+                + pdxClassFilePaths);
+      }
+      tempPdxClassFilePath = pdxClassFilePaths.get(0);
+    }
+
-    CliFunctionResult preconditionCheckResult =
-        executeFunctionAndGetFunctionResult(new CreateMappingPreconditionCheckFunction(), mapping,
-            targetMembers.iterator().next());
+    if (pdxClassFile != null) {
+      ManagementAgent agent =
+          ((SystemManagementService) getManagementService()).getManagementAgent();
+      RemoteStreamExporter exporter = agent.getRemoteStreamExporter();
+      remoteInputStreamName = FilenameUtils.getName(tempPdxClassFilePath);
+      remoteInputStream =
+          exporter.export(createSimpleRemoteInputStream(tempPdxClassFilePath));
+    }
+
+    CliFunctionResult preconditionCheckResult = null;
+    try {
+      preconditionCheckResult =
+          executeFunctionAndGetFunctionResult(new CreateMappingPreconditionCheckFunction(),
+              new Object[] {mapping, remoteInputStreamName, remoteInputStream},
+              targetMembers.iterator().next());
+    } finally {
+      if (remoteInputStream != null) {
+        try {
+          remoteInputStream.close(true);
+        } catch (IOException ex) {
+          // Ignored. the stream may have already been closed.
+        }
+      }
+    }
+  SimpleRemoteInputStream createSimpleRemoteInputStream(String tempPdxClassFilePath)
+      throws FileNotFoundException {
+    return new SimpleRemoteInputStream(new FileInputStream(tempPdxClassFilePath));
+  }
+
+
+  /**
+   * Interceptor used by gfsh to intercept execution of create jdbc-mapping command at "shell".
+   */
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      String pdxClassFileName = (String) parseResult.getParamValue(CREATE_MAPPING__PDX_CLASS_FILE);
+
+      if (StringUtils.isBlank(pdxClassFileName)) {
+        return new ModelCommandResult(ResultModel.createInfo(""));
+      }
+
+      FileResult fileResult = new FileResult();
+      File pdxClassFile = new File(pdxClassFileName);
+      if (!pdxClassFile.exists()) {
+        return ResultBuilder.createUserErrorResult(pdxClassFile + " not found.");
+      }
+      if (!pdxClassFile.isFile()) {
+        return ResultBuilder.createUserErrorResult(pdxClassFile + " is not a file.");
+      }
+      String fileExtension = FilenameUtils.getExtension(pdxClassFileName);
+      if (!fileExtension.equalsIgnoreCase("jar") && !fileExtension.equalsIgnoreCase("class")) {
+        return ResultBuilder
+            .createUserErrorResult(pdxClassFile + " must end with \".jar\" or \".class\".");
+      }
+      fileResult.addFile(pdxClassFile);
+
+      return fileResult;
+    }
+  }
+
+  // For testing purpose
+  List<String> getFilePathFromShell() {
+    return CommandExecutionContext.getFilePathFromShell();
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS55 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS43 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS42 INS43 INS31 INS74 INS42 INS8 INS42 INS42 INS40 INS42 INS42 INS45 INS80 INS77 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS54 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS78 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS41 INS42 INS45 INS4 INS42 INS80 INS80 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS8 INS42 INS14 INS66 INS42 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS33 INS60 INS25 INS21 INS42 INS33 INS60 INS60 INS21 INS21 INS33 INS21 INS25 INS43 INS14 INS42 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS38 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS7 INS43 INS59 INS43 INS59 INS7 INS7 INS7 INS27 INS8 INS42 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS41 INS32 INS41 INS42 INS42 INS32 INS38 INS38 INS41 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS33 INS54 INS42 INS43 INS32 INS14 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS3 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS27 INS43 INS27 INS11 INS42 INS42 INS5 INS4 INS21 INS44 INS8 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS32 INS43 INS85 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 DEL40 DEL42