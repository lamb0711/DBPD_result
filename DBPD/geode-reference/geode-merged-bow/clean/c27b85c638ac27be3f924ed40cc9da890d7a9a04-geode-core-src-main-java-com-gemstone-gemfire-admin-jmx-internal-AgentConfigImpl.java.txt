GEODE-420: Initial Alias defintion and removal of deprecated SSL-ENABLED properties

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+import static com.gemstone.gemfire.distributed.internal.DistributionConfig.*;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.net.InetAddress;
+import java.net.URL;
+import java.util.Enumeration;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.StringTokenizer;
+
-import java.io.*;
-import java.net.InetAddress;
-import java.net.URL;
-import java.util.Enumeration;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.StringTokenizer;
-
-import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
-
- *
-public class AgentConfigImpl extends DistributedSystemConfigImpl
-    implements AgentConfig {
+public class AgentConfigImpl extends DistributedSystemConfigImpl implements AgentConfig {
-  public static final String LOCATOR_HOST_NAME =
-      "locator.host-";
+  public static final String LOCATOR_HOST_NAME = "locator.host-";
-  public static final String LOCATOR_PORT_NAME =
-      "locator.port-";
+  public static final String LOCATOR_PORT_NAME = "locator.port-";
-  public static final String LOCATOR_PRODUCT_DIRECTORY_NAME =
-      "locator.product-directory-";
+  public static final String LOCATOR_PRODUCT_DIRECTORY_NAME = "locator.product-directory-";
-  public static final String LOCATOR_WORKING_DIRECTORY_NAME =
-      "locator.working-directory-";
+  public static final String LOCATOR_WORKING_DIRECTORY_NAME = "locator.working-directory-";
-  public static final String LOCATOR_REMOTE_COMMAND =
-      "locator.remote-command-";
+  public static final String LOCATOR_REMOTE_COMMAND = "locator.remote-command-";
-  public static final String LOCATOR_BIND_ADDRESS =
-      "locator.bind-address-";
+  public static final String LOCATOR_BIND_ADDRESS = "locator.bind-address-";
-  public static final String LOCATOR_DS_PROPERTIES =
-      "locator.ds-properties";
+  public static final String LOCATOR_DS_PROPERTIES = "locator.ds-properties";
-    props.setProperty(AUTO_CONNECT_NAME,
-        String.valueOf(DEFAULT_AUTO_CONNECT));
+    props.setProperty(AUTO_CONNECT_NAME, String.valueOf(DEFAULT_AUTO_CONNECT));
-    props.setProperty(HTTP_ENABLED_NAME,
-        String.valueOf(DEFAULT_HTTP_ENABLED));
-    props.setProperty(HTTP_BIND_ADDRESS_NAME,
-        String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
-    props.setProperty(HTTP_PORT_NAME,
-        String.valueOf(DEFAULT_HTTP_PORT));
-    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
-    props.setProperty(HTTP_AUTHENTICATION_USER_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
-    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
+    props.setProperty(HTTP_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_ENABLED));
+    props.setProperty(HTTP_BIND_ADDRESS_NAME, String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
+    props.setProperty(HTTP_PORT_NAME, String.valueOf(DEFAULT_HTTP_PORT));
+    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
+    props.setProperty(HTTP_AUTHENTICATION_USER_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
+    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
-    props.setProperty(RMI_ENABLED_NAME,
-        String.valueOf(DEFAULT_RMI_ENABLED));
-    props.setProperty(RMI_REGISTRY_ENABLED_NAME,
-        String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
-    props.setProperty(RMI_BIND_ADDRESS_NAME,
-        String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
-    props.setProperty(RMI_PORT_NAME,
-        String.valueOf(DEFAULT_RMI_PORT));
-    props.setProperty(RMI_SERVER_PORT_NAME,
-        String.valueOf(DEFAULT_RMI_SERVER_PORT));
+    props.setProperty(RMI_ENABLED_NAME, String.valueOf(DEFAULT_RMI_ENABLED));
+    props.setProperty(RMI_REGISTRY_ENABLED_NAME, String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
+    props.setProperty(RMI_BIND_ADDRESS_NAME, String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
+    props.setProperty(RMI_PORT_NAME, String.valueOf(DEFAULT_RMI_PORT));
+    props.setProperty(RMI_SERVER_PORT_NAME, String.valueOf(DEFAULT_RMI_SERVER_PORT));
-    props.setProperty(SNMP_ENABLED_NAME,
-        String.valueOf(DEFAULT_SNMP_ENABLED));
-    props.setProperty(SNMP_DIRECTORY_NAME,
-        String.valueOf(DEFAULT_SNMP_DIRECTORY));
+    props.setProperty(SNMP_ENABLED_NAME, String.valueOf(DEFAULT_SNMP_ENABLED));
+    props.setProperty(SNMP_DIRECTORY_NAME, String.valueOf(DEFAULT_SNMP_DIRECTORY));
-    props.setProperty(AGENT_SSL_ENABLED_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
-    props.setProperty(AGENT_SSL_PROTOCOLS_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
-    props.setProperty(AGENT_SSL_CIPHERS_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
-    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,
-        String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(AGENT_SSL_ENABLED_NAME, String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
+    props.setProperty(AGENT_SSL_PROTOCOLS_NAME, String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
+    props.setProperty(AGENT_SSL_CIPHERS_NAME, String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
+    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-   *
-    props.setProperty(AUTO_CONNECT_NAME,
-        String.valueOf(DEFAULT_AUTO_CONNECT));
+    props.setProperty(AUTO_CONNECT_NAME, String.valueOf(DEFAULT_AUTO_CONNECT));
-    props.setProperty(HTTP_ENABLED_NAME,
-        String.valueOf(DEFAULT_HTTP_ENABLED));
+    props.setProperty(HTTP_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_ENABLED));
-    props.setProperty(HTTP_BIND_ADDRESS_NAME,
-        String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
+    props.setProperty(HTTP_BIND_ADDRESS_NAME, String.valueOf(DEFAULT_HTTP_BIND_ADDRESS));
-    props.setProperty(HTTP_PORT_NAME,
-        String.valueOf(DEFAULT_HTTP_PORT));
+    props.setProperty(HTTP_PORT_NAME, String.valueOf(DEFAULT_HTTP_PORT));
-    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
+    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
-    props.setProperty(HTTP_AUTHENTICATION_USER_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
+    props.setProperty(HTTP_AUTHENTICATION_USER_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
-    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,
-        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
+    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
-    props.setProperty(RMI_ENABLED_NAME,
-        String.valueOf(DEFAULT_RMI_ENABLED));
+    props.setProperty(RMI_ENABLED_NAME, String.valueOf(DEFAULT_RMI_ENABLED));
-    props.setProperty(RMI_REGISTRY_ENABLED_NAME,
-        String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
+    props.setProperty(RMI_REGISTRY_ENABLED_NAME, String.valueOf(DEFAULT_RMI_REGISTRY_ENABLED));
-    props.setProperty(RMI_BIND_ADDRESS_NAME,
-        String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
+    props.setProperty(RMI_BIND_ADDRESS_NAME, String.valueOf(DEFAULT_RMI_BIND_ADDRESS));
-    props.setProperty(RMI_PORT_NAME,
-        String.valueOf(DEFAULT_RMI_PORT));
+    props.setProperty(RMI_PORT_NAME, String.valueOf(DEFAULT_RMI_PORT));
-    props.setProperty(RMI_SERVER_PORT_NAME,
-        String.valueOf(DEFAULT_RMI_SERVER_PORT));
+    props.setProperty(RMI_SERVER_PORT_NAME, String.valueOf(DEFAULT_RMI_SERVER_PORT));
-    props.setProperty(SNMP_ENABLED_NAME,
-        String.valueOf(DEFAULT_SNMP_ENABLED));
+    props.setProperty(SNMP_ENABLED_NAME, String.valueOf(DEFAULT_SNMP_ENABLED));
-    props.setProperty(SNMP_DIRECTORY_NAME,
-        String.valueOf(DEFAULT_SNMP_DIRECTORY));
+    props.setProperty(SNMP_DIRECTORY_NAME, String.valueOf(DEFAULT_SNMP_DIRECTORY));
-    props.setProperty(AGENT_SSL_ENABLED_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
+    props.setProperty(AGENT_SSL_ENABLED_NAME, String.valueOf(DEFAULT_AGENT_SSL_ENABLED));
-    props.setProperty(AGENT_SSL_PROTOCOLS_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
+    props.setProperty(AGENT_SSL_PROTOCOLS_NAME, String.valueOf(DEFAULT_AGENT_SSL_PROTOCOLS));
-    props.setProperty(AGENT_SSL_CIPHERS_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
+    props.setProperty(AGENT_SSL_CIPHERS_NAME, String.valueOf(DEFAULT_AGENT_SSL_CIPHERS));
-    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,
-        String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,
-        String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(SNMP_BIND_ADDRESS_NAME,
-        String.valueOf(DEFAULT_SNMP_BIND_ADDRESS));
+    props.setProperty(SNMP_BIND_ADDRESS_NAME, String.valueOf(DEFAULT_SNMP_BIND_ADDRESS));
-    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,
-        String.valueOf(DEFAULT_EMAIL_NOTIFICATIONS_ENABLED));
+    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME, String.valueOf(DEFAULT_EMAIL_NOTIFICATIONS_ENABLED));
-    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME,
-        String.valueOf(DEFAULT_EMAIL_HOST));
+    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME, String.valueOf(DEFAULT_EMAIL_HOST));
-    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME,
-        String.valueOf(DEFAULT_EMAIL_FROM));
+    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME, String.valueOf(DEFAULT_EMAIL_FROM));
-    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME,
-        String.valueOf(DEFAULT_EMAIL_TO_LIST));
+    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME, String.valueOf(DEFAULT_EMAIL_TO_LIST));
-    props.setProperty(STATE_SAVE_FILE_NAME,
-        String.valueOf(DEFAULT_STATE_SAVE_FILE));
+    props.setProperty(STATE_SAVE_FILE_NAME, String.valueOf(DEFAULT_STATE_SAVE_FILE));
-    props.setProperty(SSL_ENABLED,
-        String.valueOf(DEFAULT_SSL_ENABLED));
+    props.setProperty(CLUSTER_SSL_ENABLED, String.valueOf(DEFAULT_CLUSTER_SSL_ENABLED));
-    props.setProperty(SSL_PROTOCOLS_NAME,
-        String.valueOf(DEFAULT_SSL_PROTOCOLS));
+    props.setProperty(CLUSTER_SSL_PROTOCOLS, String.valueOf(DEFAULT_CLUSTER_SSL_PROTOCOLS));
-    props.setProperty(SSL_CIPHERS_NAME,
-        String.valueOf(DEFAULT_SSL_CIPHERS));
+    props.setProperty(CLUSTER_SSL_CIPHERS, String.valueOf(DEFAULT_CLUSTER_SSL_CIPHERS));
-    props.setProperty(SSL_REQUIRE_AUTHENTICATION_NAME,
-        String.valueOf(DEFAULT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION, String.valueOf(DEFAULT_CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(ENTITY_CONFIG_XML_FILE_NAME,
-        String.valueOf(DEFAULT_ENTITY_CONFIG_XML_FILE));
+    props.setProperty(ENTITY_CONFIG_XML_FILE_NAME, String.valueOf(DEFAULT_ENTITY_CONFIG_XML_FILE));
-    props.setProperty(MCAST_PORT,
-        String.valueOf(DEFAULT_MCAST_PORT));
+    props.setProperty(MCAST_PORT, String.valueOf(DEFAULT_MCAST_PORT));
-    props.setProperty(MCAST_ADDRESS,
-        String.valueOf(DEFAULT_MCAST_ADDRESS));
+    props.setProperty(MCAST_ADDRESS, String.valueOf(DEFAULT_MCAST_ADDRESS));
-    props.setProperty(LOCATORS,
-        String.valueOf(DEFAULT_LOCATORS));
+    props.setProperty(LOCATORS, String.valueOf(DEFAULT_LOCATORS));
-    props.setProperty(BIND_ADDRESS,
-        String.valueOf(DEFAULT_BIND_ADDRESS));
+    props.setProperty(BIND_ADDRESS, String.valueOf(DEFAULT_BIND_ADDRESS));
-    props.setProperty(REMOTE_COMMAND_NAME,
-        String.valueOf(DEFAULT_REMOTE_COMMAND));
+    props.setProperty(REMOTE_COMMAND_NAME, String.valueOf(DEFAULT_REMOTE_COMMAND));
-    props.setProperty(LOG_FILE_NAME,
-        String.valueOf(DEFAULT_LOG_FILE));
+    props.setProperty(LOG_FILE_NAME, String.valueOf(DEFAULT_LOG_FILE));
-    props.setProperty(LOG_LEVEL_NAME,
-        String.valueOf(DEFAULT_LOG_LEVEL));
+    props.setProperty(LOG_LEVEL_NAME, String.valueOf(DEFAULT_LOG_LEVEL));
-    props.setProperty(LOG_DISK_SPACE_LIMIT_NAME,
-        String.valueOf(DEFAULT_LOG_DISK_SPACE_LIMIT));
+    props.setProperty(LOG_DISK_SPACE_LIMIT_NAME, String.valueOf(DEFAULT_LOG_DISK_SPACE_LIMIT));
-    props.setProperty(LOG_FILE_SIZE_LIMIT_NAME,
-        String.valueOf(DEFAULT_LOG_FILE_SIZE_LIMIT));
+    props.setProperty(LOG_FILE_SIZE_LIMIT_NAME, String.valueOf(DEFAULT_LOG_FILE_SIZE_LIMIT));
-    props.setProperty(REFRESH_INTERVAL_NAME,
-        String.valueOf(DEFAULT_REFRESH_INTERVAL));
+    props.setProperty(REFRESH_INTERVAL_NAME, String.valueOf(DEFAULT_REFRESH_INTERVAL));
-   *
-   *
-   *
-   *
-      throw new IllegalStateException(
-          LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT.toLocalizedString());
+      throw new IllegalStateException(LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT.toLocalizedString());
-      return LocalizedStrings.AgentConfigImpl_CONFIGURATION_LOADED_FROM_0
-          .toLocalizedString(this.url);
+      return LocalizedStrings.AgentConfigImpl_CONFIGURATION_LOADED_FROM_0.toLocalizedString(this.url);
-        f = new File(System.getProperty("user.dir"),
-            retrievePropertyFile());
+        f = new File(System.getProperty("user.dir"), retrievePropertyFile());
-   *
-   *
-   *
-   *                            <code>Properties</code> object?  See bug 32682.
+   * <code>Properties</code> object?  See bug 32682.
+   *
-    props.setProperty(SSL_ENABLED, toString(SSL_ENABLED, isSSLEnabled()));
-    props.setProperty(SSL_PROTOCOLS_NAME, toString(SSL_PROTOCOLS_NAME, getSSLProtocols()));
-    props.setProperty(SSL_CIPHERS_NAME, toString(SSL_CIPHERS_NAME, getSSLCiphers()));
-    props.setProperty(SSL_REQUIRE_AUTHENTICATION_NAME, toString(SSL_REQUIRE_AUTHENTICATION_NAME, isSSLAuthenticationRequired()));
+    props.setProperty(CLUSTER_SSL_ENABLED, toString(CLUSTER_SSL_ENABLED, isSSLEnabled()));
+    props.setProperty(CLUSTER_SSL_PROTOCOLS, toString(CLUSTER_SSL_PROTOCOLS, getSSLProtocols()));
+    props.setProperty(CLUSTER_SSL_CIPHERS, toString(CLUSTER_SSL_CIPHERS, getSSLCiphers()));
+    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION, toString(CLUSTER_SSL_REQUIRE_AUTHENTICATION, isSSLAuthenticationRequired()));
-      DistributionLocatorConfig[] configs =
-          this.getDistributionLocatorConfigs();
+      DistributionLocatorConfig[] configs = this.getDistributionLocatorConfigs();
-   *
+   *
-   *
+   *
-   *
-    this.autoConnect = validateBoolean(props.getProperty(
-        AUTO_CONNECT_NAME),
-        DEFAULT_AUTO_CONNECT);
+    this.autoConnect = validateBoolean(props.getProperty(AUTO_CONNECT_NAME), DEFAULT_AUTO_CONNECT);
-    this.httpEnabled = validateBoolean(props.getProperty(
-        HTTP_ENABLED_NAME),
-        DEFAULT_HTTP_ENABLED);
-    this.httpBindAddress = validateHttpBindAddress(props.getProperty(
-        HTTP_BIND_ADDRESS_NAME));
-    this.httpPort = validateHttpPort(props.getProperty(
-        HTTP_PORT_NAME));
+    this.httpEnabled = validateBoolean(props.getProperty(HTTP_ENABLED_NAME), DEFAULT_HTTP_ENABLED);
+    this.httpBindAddress = validateHttpBindAddress(props.getProperty(HTTP_BIND_ADDRESS_NAME));
+    this.httpPort = validateHttpPort(props.getProperty(HTTP_PORT_NAME));
-    this.rmiEnabled = validateBoolean(props.getProperty(
-        RMI_ENABLED_NAME),
-        DEFAULT_RMI_ENABLED);
-    this.rmiRegistryEnabled = validateBoolean(props.getProperty(
-        RMI_REGISTRY_ENABLED_NAME),
-        DEFAULT_RMI_REGISTRY_ENABLED);
+    this.rmiEnabled = validateBoolean(props.getProperty(RMI_ENABLED_NAME), DEFAULT_RMI_ENABLED);
+    this.rmiRegistryEnabled = validateBoolean(props.getProperty(RMI_REGISTRY_ENABLED_NAME), DEFAULT_RMI_REGISTRY_ENABLED);
-    this.rmiBindAddress = validateRmiBindAddress(props.getProperty(
-        RMI_BIND_ADDRESS_NAME));
-    this.rmiPort = validateRmiPort(props.getProperty(
-        RMI_PORT_NAME));
-    this.rmiServerPort = validateRmiServerPort(props.getProperty(
-        RMI_SERVER_PORT_NAME));
+    this.rmiBindAddress = validateRmiBindAddress(props.getProperty(RMI_BIND_ADDRESS_NAME));
+    this.rmiPort = validateRmiPort(props.getProperty(RMI_PORT_NAME));
+    this.rmiServerPort = validateRmiServerPort(props.getProperty(RMI_SERVER_PORT_NAME));
-    this.snmpEnabled = validateBoolean(props.getProperty(
-        SNMP_ENABLED_NAME),
-        DEFAULT_SNMP_ENABLED);
-    this.snmpDirectory = validateSnmpDirectory(props.getProperty(
-        SNMP_DIRECTORY_NAME));
+    this.snmpEnabled = validateBoolean(props.getProperty(SNMP_ENABLED_NAME), DEFAULT_SNMP_ENABLED);
+    this.snmpDirectory = validateSnmpDirectory(props.getProperty(SNMP_DIRECTORY_NAME));
-    this.agentSSLEnabled = validateBoolean(props.getProperty(
-        AGENT_SSL_ENABLED_NAME),
-        DEFAULT_AGENT_SSL_ENABLED);
-    this.agentSSLProtocols = validateNonEmptyString(props.getProperty(
-        AGENT_SSL_PROTOCOLS_NAME),
-        DEFAULT_AGENT_SSL_PROTOCOLS);
-    this.agentSSLCiphers = validateNonEmptyString(props.getProperty(
-        AGENT_SSL_CIPHERS_NAME),
-        DEFAULT_AGENT_SSL_CIPHERS);
-    this.agentSSLRequireAuth = validateBoolean(props.getProperty(
-        AGENT_SSL_REQUIRE_AUTHENTICATION_NAME),
-        DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION);
-    this.httpSSLRequireAuth = validateBoolean(props.getProperty(
-        HTTP_SSL_REQUIRE_AUTHENTICATION_NAME),
-        DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION);
+    this.agentSSLEnabled = validateBoolean(props.getProperty(AGENT_SSL_ENABLED_NAME), DEFAULT_AGENT_SSL_ENABLED);
+    this.agentSSLProtocols = validateNonEmptyString(props.getProperty(AGENT_SSL_PROTOCOLS_NAME), DEFAULT_AGENT_SSL_PROTOCOLS);
+    this.agentSSLCiphers = validateNonEmptyString(props.getProperty(AGENT_SSL_CIPHERS_NAME), DEFAULT_AGENT_SSL_CIPHERS);
+    this.agentSSLRequireAuth = validateBoolean(props.getProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME), DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION);
+    this.httpSSLRequireAuth = validateBoolean(props.getProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME), DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION);
-    this.httpAuthEnabled = validateBoolean(props.getProperty(
-        HTTP_AUTHENTICATION_ENABLED_NAME),
-        DEFAULT_HTTP_AUTHENTICATION_ENABLED);
-    this.httpAuthUser = validateNonEmptyString(props.getProperty(
-        HTTP_AUTHENTICATION_USER_NAME),
-        DEFAULT_HTTP_AUTHENTICATION_USER);
-    this.httpAuthPassword = validateNonEmptyString(props.getProperty(
-        HTTP_AUTHENTICATION_PASSWORD_NAME),
-        DEFAULT_HTTP_AUTHENTICATION_PASSWORD);
+    this.httpAuthEnabled = validateBoolean(props.getProperty(HTTP_AUTHENTICATION_ENABLED_NAME), DEFAULT_HTTP_AUTHENTICATION_ENABLED);
+    this.httpAuthUser = validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_USER_NAME), DEFAULT_HTTP_AUTHENTICATION_USER);
+    this.httpAuthPassword = validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_PASSWORD_NAME), DEFAULT_HTTP_AUTHENTICATION_PASSWORD);
-    this.sslEnabled = validateBoolean(props.getProperty(
-        SSL_ENABLED),
-        DEFAULT_SSL_ENABLED);
-    this.sslProtocols = validateNonEmptyString(props.getProperty(
-        SSL_PROTOCOLS_NAME),
-        DEFAULT_SSL_PROTOCOLS);
-    this.sslCiphers = validateNonEmptyString(props.getProperty(
-        SSL_CIPHERS_NAME),
-        DEFAULT_SSL_CIPHERS);
-    this.sslAuthenticationRequired = validateBoolean(props.getProperty(
-        SSL_REQUIRE_AUTHENTICATION_NAME),
-        DEFAULT_SSL_REQUIRE_AUTHENTICATION);
+    this.sslEnabled = validateBoolean(props.getProperty(CLUSTER_SSL_ENABLED), DEFAULT_CLUSTER_SSL_ENABLED);
+    this.sslProtocols = validateNonEmptyString(props.getProperty(CLUSTER_SSL_PROTOCOLS), DEFAULT_CLUSTER_SSL_PROTOCOLS);
+    this.sslCiphers = validateNonEmptyString(props.getProperty(CLUSTER_SSL_CIPHERS), DEFAULT_CLUSTER_SSL_CIPHERS);
+    this.sslAuthenticationRequired = validateBoolean(props.getProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION), DEFAULT_CLUSTER_SSL_REQUIRE_AUTHENTICATION);
-      if (value == null)
+      if (value == null) {
+      }
-      if (!st.hasMoreTokens())
+      if (!st.hasMoreTokens()) {
+      }
-      if (!st.hasMoreTokens())
+      if (!st.hasMoreTokens()) {
+      }
-    this.isEmailNotificationEnabled = validateBoolean(props.getProperty(
-        AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME),
-        DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
-    this.emailNotificationHostName = validateNonEmptyString(props.getProperty(
-        AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME),
-        DEFAULT_EMAIL_HOST);
-    this.emailNotificationFrom = validateNonEmptyString(props.getProperty(
-        AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME),
-        DEFAULT_EMAIL_FROM);
-    this.emailNotificationToList = validateNonEmptyString(props.getProperty(
-        AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME),
-        DEFAULT_EMAIL_TO_LIST);
+    this.isEmailNotificationEnabled = validateBoolean(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME), DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
+    this.emailNotificationHostName = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME), DEFAULT_EMAIL_HOST);
+    this.emailNotificationFrom = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME), DEFAULT_EMAIL_FROM);
+    this.emailNotificationToList = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME), DEFAULT_EMAIL_TO_LIST);
-    this.stateSaveFile = validateNonEmptyString(props.getProperty(
-        AgentConfig.STATE_SAVE_FILE_NAME),
-        DEFAULT_STATE_SAVE_FILE);
+    this.stateSaveFile = validateNonEmptyString(props.getProperty(AgentConfig.STATE_SAVE_FILE_NAME), DEFAULT_STATE_SAVE_FILE);
-        if (isEmpty(hostProp))
+        if (isEmpty(hostProp)) {
+        }
-        int port = Integer.parseInt(
-            props.getProperty(LOCATOR_PORT_NAME + i));
-        File workDir = validateWorkingDirectory(
-            props.getProperty(LOCATOR_WORKING_DIRECTORY_NAME + i));
-        File prodDir = new File(validateProductDirectory(
-            props.getProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i)));
-        String remoteCmd =
-            props.getProperty(LOCATOR_REMOTE_COMMAND + i);
-        String bindAddr =
-            props.getProperty(LOCATOR_BIND_ADDRESS + i);
+        int port = Integer.parseInt(props.getProperty(LOCATOR_PORT_NAME + i));
+        File workDir = validateWorkingDirectory(props.getProperty(LOCATOR_WORKING_DIRECTORY_NAME + i));
+        File prodDir = new File(validateProductDirectory(props.getProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i)));
+        String remoteCmd = props.getProperty(LOCATOR_REMOTE_COMMAND + i);
+        String bindAddr = props.getProperty(LOCATOR_BIND_ADDRESS + i);
-        DistributionLocatorConfig config =
-            this.createDistributionLocatorConfig();
+        DistributionLocatorConfig config = this.createDistributionLocatorConfig();
-   *
+   *
-   *
-    if (!(props.containsKey(DistributedSystemConfig.LOG_FILE_NAME)
-        || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {
+    if (!(props.containsKey(DistributedSystemConfig.LOG_FILE_NAME) || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {
-   *
-        throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(
-            url.toString()), e);
+        throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(url.toString()), e);
-   *
-   *                                  configuration property
+   * configuration property
-          .toLocalizedString();
+        .toLocalizedString();
-    } else if (prop.equals(SSL_ENABLED)) {
+    } else if (prop.equals(CLUSTER_SSL_ENABLED)) {
-    } else if (prop.equals(SSL_PROTOCOLS_NAME)) {
+    } else if (prop.equals(CLUSTER_SSL_PROTOCOLS)) {
-    } else if (prop.equals(SSL_CIPHERS_NAME)) {
+    } else if (prop.equals(CLUSTER_SSL_CIPHERS)) {
-    } else if (prop.equals(SSL_REQUIRE_AUTHENTICATION_NAME)) {
+    } else if (prop.equals(CLUSTER_SSL_REQUIRE_AUTHENTICATION)) {
-   *
-   *
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)
+      }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
+      }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
+      }));
-  private String validateNonEmptyString(String value,
-      String defaultValue) {
+  private String validateNonEmptyString(String value, String defaultValue) {
-    if (isEmpty(value))
+    if (isEmpty(value)) {
+    }
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)
+      }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
+      }));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-          .toLocalizedString(new Object[] { RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT) }));
+      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
+        RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
+      }));
-   *
-   *
+   *
-      if (obj == null)
+      if (obj == null) {
+      }
-  private boolean sslEnabled = DEFAULT_SSL_ENABLED;
-  private String sslProtocols = DEFAULT_SSL_PROTOCOLS;
-  private String sslCiphers = DEFAULT_SSL_CIPHERS;
-  private boolean sslAuthenticationRequired = DEFAULT_SSL_REQUIRE_AUTHENTICATION;
+  private boolean sslEnabled = DEFAULT_CLUSTER_SSL_ENABLED;
+  private String sslProtocols = DEFAULT_CLUSTER_SSL_PROTOCOLS;
+  private String sslCiphers = DEFAULT_CLUSTER_SSL_CIPHERS;
+  private boolean sslAuthenticationRequired = DEFAULT_CLUSTER_SSL_REQUIRE_AUTHENTICATION;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 MOV43 MOV43 UPD42 UPD42 UPD42 UPD42 MOV25 MOV60 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV41 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS8 INS8 INS8 INS8 UPD42 UPD42 UPD42 UPD42 INS10 INS10 INS10 MOV41 INS8 INS10 UPD42 UPD42 UPD42 UPD42 DEL10 DEL10 DEL10 DEL10