GEODE-6322: refactor createRegionCommand to use RegionConfig only (#3156)

* get rid of usages of xxxArgs and RegionConfigFactory
* the resulting cluster configuration xml for region does not have excessive default values

-  private RegionFactory getRegionFactory(Cache cache, RegionAttributesType regionAttributes) {
+  RegionFactory getRegionFactory(Cache cache, RegionAttributesType regionAttributes) {
-          PartitionAttributesImpl.fromConfig(regionAttributes.getPartitionAttributes(), cache));
+          convertToRegionFactoryPartitionAttributes(regionAttributes.getPartitionAttributes(),
+              cache));
+  PartitionAttributesImpl convertToRegionFactoryPartitionAttributes(
+      RegionAttributesType.PartitionAttributes configAttributes, Cache cache) {
+    PartitionAttributesImpl partitionAttributes = new PartitionAttributesImpl();
+    if (configAttributes == null) {
+      return null;
+    }
+
+    if (configAttributes.getRedundantCopies() != null) {
+      partitionAttributes
+          .setRedundantCopies(Integer.valueOf(configAttributes.getRedundantCopies()));
+    }
+
+    if (configAttributes.getTotalMaxMemory() != null) {
+      partitionAttributes.setTotalMaxMemory(Integer.valueOf(configAttributes.getTotalMaxMemory()));
+    }
+
+    if (configAttributes.getTotalNumBuckets() != null) {
+      partitionAttributes
+          .setTotalNumBuckets(Integer.valueOf(configAttributes.getTotalNumBuckets()));
+    }
+
+    if (configAttributes.getLocalMaxMemory() != null) {
+      partitionAttributes.setLocalMaxMemory(Integer.valueOf(configAttributes.getLocalMaxMemory()));
+    }
+
+    if (configAttributes.getColocatedWith() != null) {
+      partitionAttributes.setColocatedWith(configAttributes.getColocatedWith());
+    }
+
+    if (configAttributes.getPartitionResolver() != null) {
+      partitionAttributes.setPartitionResolver(
+          DeclarableTypeInstantiator.newInstance(configAttributes.getPartitionResolver(), cache));
+    }
+
+    if (configAttributes.getRecoveryDelay() != null) {
+      partitionAttributes.setRecoveryDelay(Long.valueOf(configAttributes.getRecoveryDelay()));
+    }
+
+    if (configAttributes.getStartupRecoveryDelay() != null) {
+      partitionAttributes
+          .setStartupRecoveryDelay(Long.valueOf(configAttributes.getStartupRecoveryDelay()));
+    }
+
+    if (configAttributes.getPartitionListeners() != null) {
+      List<DeclarableType> configListeners = configAttributes.getPartitionListeners();
+      for (int i = 0; i < configListeners.size(); i++) {
+        partitionAttributes.addPartitionListener(
+            DeclarableTypeInstantiator.newInstance(configListeners.get(i), cache));
+      }
+    }
+
+    return partitionAttributes;
+  }
+

INS31 INS43 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS40 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS14 INS42 INS33 INS41 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS60 INS24 INS43 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS21 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL83 DEL42