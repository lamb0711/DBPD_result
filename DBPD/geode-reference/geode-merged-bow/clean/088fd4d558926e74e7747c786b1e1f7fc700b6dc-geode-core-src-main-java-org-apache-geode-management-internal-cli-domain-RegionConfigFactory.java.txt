GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes

-import java.util.Optional;
-import java.util.function.Consumer;
-import java.util.function.Function;
+import java.util.Objects;
+import org.apache.geode.cache.CustomExpiry;
+import org.apache.geode.cache.ExpirationAction;
+import org.apache.geode.cache.ExpirationAttributes;
-import org.apache.geode.cache.configuration.ExpirationAttributesType;
+    RegionAttributesType regionAttributesType = new RegionAttributesType();
+    regionConfig.setRegionAttributes(regionAttributesType);
+
-      addAttribute(regionConfig, a -> a.setKeyConstraint(args.getKeyConstraint()));
+      regionAttributesType.setKeyConstraint(args.getKeyConstraint());
-      addAttribute(regionConfig, a -> a.setValueConstraint(args.getValueConstraint()));
+      regionAttributesType.setValueConstraint(args.getValueConstraint());
-      addAttribute(regionConfig, a -> a.setStatisticsEnabled(args.getStatisticsEnabled()));
+      regionAttributesType.setStatisticsEnabled(args.getStatisticsEnabled());
-      addAttribute(regionConfig, a -> a.setStatisticsEnabled(regionAttributes
-          .getStatisticsEnabled()));
+      regionAttributesType.setStatisticsEnabled(regionAttributes.getStatisticsEnabled());
-    if (args.getEntryExpirationIdleTime() != null) {
-      RegionAttributesType.EntryIdleTime entryIdleTime = new RegionAttributesType.EntryIdleTime();
-      entryIdleTime.setExpirationAttributes(
-          args.getEntryExpirationIdleTime().getExpirationAttributes().toConfigType());
-      addAttribute(regionConfig, a -> a.setEntryIdleTime(entryIdleTime));
-    } else if (regionAttributes != null &&
-        regionAttributes.getEntryIdleTimeout() != null &&
-        !regionAttributes.getEntryIdleTimeout().isDefault()) {
-      RegionAttributesType.EntryIdleTime entryIdleTime = new RegionAttributesType.EntryIdleTime();
-      entryIdleTime.setExpirationAttributes(regionAttributes
-          .getEntryIdleTimeout().toConfigType());
-      addAttribute(regionConfig, a -> a.setEntryIdleTime(entryIdleTime));
-    }
+    // first get the expiration attributes from the command options
+    regionAttributesType.setEntryIdleTime(getExpirationAttributes(args.getEntryExpirationIdleTime(),
+        args.getEntryIdleTimeCustomExpiry()));
+    regionAttributesType.setEntryTimeToLive(
+        getExpirationAttributes(args.getEntryExpirationTTL(), args.getEntryTTLCustomExpiry()));
+    regionAttributesType
+        .setRegionIdleTime(getExpirationAttributes(args.getRegionExpirationIdleTime(), null));
+    regionAttributesType
+        .setRegionTimeToLive(getExpirationAttributes(args.getRegionExpirationTTL(), null));
-    if (args.getEntryIdleTimeCustomExpiry() != null) {
-      Object maybeEntryIdleAttr = getAttribute(regionConfig, a -> a.getEntryIdleTime());
-      RegionAttributesType.EntryIdleTime entryIdleTime =
-          maybeEntryIdleAttr != null ? (RegionAttributesType.EntryIdleTime) maybeEntryIdleAttr
-              : new RegionAttributesType.EntryIdleTime();
-
-      ExpirationAttributesType expirationAttributes;
-      if (entryIdleTime.getExpirationAttributes() == null) {
-        expirationAttributes = new ExpirationAttributesType();
-        expirationAttributes.setTimeout("0");
-      } else {
-        expirationAttributes = entryIdleTime.getExpirationAttributes();
+    // if regionAttributes has these attributes, then use that
+    if (regionAttributes != null) {
+      if (regionAttributesType.getEntryIdleTime() == null) {
+        regionAttributesType.setEntryIdleTime(getExpirationAttributes(
+            regionAttributes.getEntryIdleTimeout(), regionAttributes.getCustomEntryIdleTimeout()));
+      }
+      if (regionAttributesType.getEntryTimeToLive() == null) {
+        regionAttributesType.setEntryTimeToLive(getExpirationAttributes(
+            regionAttributes.getEntryTimeToLive(), regionAttributes.getCustomEntryTimeToLive()));
-      DeclarableType customExpiry = new DeclarableType();
-      customExpiry.setClassName(args.getEntryIdleTimeCustomExpiry().getClassName());
-      expirationAttributes.setCustomExpiry(customExpiry);
-      entryIdleTime.setExpirationAttributes(expirationAttributes);
+      if (regionAttributesType.getRegionIdleTime() == null) {
+        regionAttributesType.setRegionIdleTime(
+            getExpirationAttributes(regionAttributes.getRegionIdleTimeout(), null));
+      }
-      if (maybeEntryIdleAttr == null) {
-        addAttribute(regionConfig, a -> a.setEntryIdleTime(entryIdleTime));
+      if (regionAttributesType.getRegionTimeToLive() == null) {
+        regionAttributesType.setRegionTimeToLive(
+            getExpirationAttributes(regionAttributes.getRegionTimeToLive(), null));
-    if (args.getEntryExpirationTTL() != null) {
-      RegionAttributesType.EntryTimeToLive entryExpTime =
-          new RegionAttributesType.EntryTimeToLive();
-      entryExpTime.setExpirationAttributes(
-          args.getEntryExpirationTTL().getExpirationAttributes().toConfigType());
-      addAttribute(regionConfig, a -> a.setEntryTimeToLive(entryExpTime));
-    } else if (regionAttributes != null
-        && regionAttributes.getEntryTimeToLive() != null
-        && !regionAttributes.getEntryTimeToLive().isDefault()) {
-      RegionAttributesType.EntryTimeToLive entryExpTime =
-          new RegionAttributesType.EntryTimeToLive();
-      entryExpTime.setExpirationAttributes(
-          regionAttributes.getEntryTimeToLive().toConfigType());
-      addAttribute(regionConfig, a -> a.setEntryTimeToLive(entryExpTime));
-    }
-
-    if (args.getRegionExpirationIdleTime() != null) {
-      RegionAttributesType.RegionIdleTime regionIdleTime =
-          new RegionAttributesType.RegionIdleTime();
-      regionIdleTime.setExpirationAttributes(
-          args.getRegionExpirationIdleTime().getExpirationAttributes().toConfigType());
-      addAttribute(regionConfig, a -> a.setRegionIdleTime(regionIdleTime));
-    } else if (regionAttributes != null
-        && regionAttributes.getRegionIdleTimeout() != null
-        && !regionAttributes.getRegionIdleTimeout().isDefault()) {
-      RegionAttributesType.RegionIdleTime regionIdleTime =
-          new RegionAttributesType.RegionIdleTime();
-      regionIdleTime.setExpirationAttributes(
-          regionAttributes.getRegionIdleTimeout().toConfigType());
-      addAttribute(regionConfig, a -> a.setRegionIdleTime(regionIdleTime));
-    }
-
-    if (args.getRegionExpirationTTL() != null) {
-      RegionAttributesType.RegionTimeToLive regionExpTime =
-          new RegionAttributesType.RegionTimeToLive();
-      regionExpTime.setExpirationAttributes(
-          args.getRegionExpirationTTL().getExpirationAttributes().toConfigType());
-      addAttribute(regionConfig, a -> a.setRegionTimeToLive(regionExpTime));
-    } else if (regionAttributes != null
-        && regionAttributes.getRegionTimeToLive() != null
-        && !regionAttributes.getRegionTimeToLive().isDefault()) {
-      RegionAttributesType.RegionTimeToLive regionExpTime =
-          new RegionAttributesType.RegionTimeToLive();
-      regionExpTime.setExpirationAttributes(
-          regionAttributes.getRegionTimeToLive().toConfigType());
-      addAttribute(regionConfig, a -> a.setRegionTimeToLive(regionExpTime));
-    }
-
-    if (args.getEntryTTLCustomExpiry() != null) {
-      Object maybeEntryTTLAttr = getAttribute(regionConfig, a -> a.getEntryTimeToLive());
-      RegionAttributesType.EntryTimeToLive entryTimeToLive =
-          maybeEntryTTLAttr != null ? (RegionAttributesType.EntryTimeToLive) maybeEntryTTLAttr
-              : new RegionAttributesType.EntryTimeToLive();
-
-      ExpirationAttributesType expirationAttributes;
-      if (entryTimeToLive.getExpirationAttributes() == null) {
-        expirationAttributes = new ExpirationAttributesType();
-        expirationAttributes.setTimeout("0");
-      } else {
-        expirationAttributes = entryTimeToLive.getExpirationAttributes();
-      }
-
-      DeclarableType customExpiry = new DeclarableType();
-      customExpiry.setClassName(args.getEntryTTLCustomExpiry().getClassName());
-      expirationAttributes.setCustomExpiry(customExpiry);
-      entryTimeToLive.setExpirationAttributes(expirationAttributes);
-
-      if (maybeEntryTTLAttr == null) {
-        addAttribute(regionConfig, a -> a.setEntryTimeToLive(entryTimeToLive));
-      }
-    }
-      addAttribute(regionConfig, a -> a.setDiskStoreName(args.getDiskStore()));
+      regionAttributesType.setDiskStoreName(args.getDiskStore());
-      addAttribute(regionConfig, a -> a.setDiskStoreName(regionAttributes.getDiskStoreName()));
+      regionAttributesType.setDiskStoreName(regionAttributes.getDiskStoreName());
-      addAttribute(regionConfig, a -> a.setDiskSynchronous(args.getDiskSynchronous()));
+      regionAttributesType.setDiskSynchronous(args.getDiskSynchronous());
-      addAttribute(regionConfig, a -> a.setDiskSynchronous(regionAttributes.isDiskSynchronous()));
+      regionAttributesType.setDiskSynchronous(regionAttributes.isDiskSynchronous());
-      addAttribute(regionConfig, a -> a.setEnableAsyncConflation(args.getEnableAsyncConflation()));
+      regionAttributesType.setEnableAsyncConflation(args.getEnableAsyncConflation());
-      addAttribute(regionConfig, a -> a.setEnableAsyncConflation(regionAttributes
-          .getEnableAsyncConflation()));
+      regionAttributesType.setEnableAsyncConflation(regionAttributes.getEnableAsyncConflation());
-      addAttribute(regionConfig,
-          a -> a.setEnableSubscriptionConflation(args.getEnableSubscriptionConflation()));
+      regionAttributesType.setEnableSubscriptionConflation(args.getEnableSubscriptionConflation());
-      addAttribute(regionConfig, a -> a.setEnableSubscriptionConflation(regionAttributes
-          .getEnableSubscriptionConflation()));
+      regionAttributesType
+          .setEnableSubscriptionConflation(regionAttributes.getEnableSubscriptionConflation());
-      addAttribute(regionConfig, a -> a.setConcurrencyChecksEnabled(
-          args.getConcurrencyChecksEnabled()));
+      regionAttributesType.setConcurrencyChecksEnabled(args.getConcurrencyChecksEnabled());
-      addAttribute(regionConfig, a -> a.setConcurrencyChecksEnabled(regionAttributes
-          .getConcurrencyChecksEnabled()));
+      regionAttributesType
+          .setConcurrencyChecksEnabled(regionAttributes.getConcurrencyChecksEnabled());
-      addAttribute(regionConfig, a -> a.setCloningEnabled(args.getCloningEnabled()));
+      regionAttributesType.setCloningEnabled(args.getCloningEnabled());
-      addAttribute(regionConfig, a -> a.setCloningEnabled(regionAttributes
-          .getCloningEnabled()));
+      regionAttributesType.setCloningEnabled(regionAttributes.getCloningEnabled());
-      addAttribute(regionConfig, a -> a.setOffHeap(args.getOffHeap()));
+      regionAttributesType.setOffHeap(args.getOffHeap());
-      addAttribute(regionConfig, a -> a.setOffHeap(regionAttributes.getOffHeap()));
+      regionAttributesType.setOffHeap(regionAttributes.getOffHeap());
-      addAttribute(regionConfig, a -> a.setMulticastEnabled(args.getMcastEnabled()));
+      regionAttributesType.setMulticastEnabled(args.getMcastEnabled());
-      addAttribute(regionConfig, a -> a.setMulticastEnabled(regionAttributes
-          .getMulticastEnabled()));
+      regionAttributesType.setMulticastEnabled(regionAttributes.getMulticastEnabled());
-      partitionAttributes.setLocalMaxMemory(int2string(partitionArgs.getPrLocalMaxMemory()));
-      partitionAttributes.setRecoveryDelay(long2string(partitionArgs.getPrRecoveryDelay()));
-      partitionAttributes.setRedundantCopies(int2string(partitionArgs.getPrRedundantCopies()));
+      partitionAttributes.setLocalMaxMemory(Objects.toString(partitionArgs.getPrLocalMaxMemory()));
+      partitionAttributes.setRecoveryDelay(Objects.toString(partitionArgs.getPrRecoveryDelay()));
-          .setStartupRecoveryDelay(long2string(partitionArgs.getPrStartupRecoveryDelay()));
-      partitionAttributes.setTotalMaxMemory(long2string(partitionArgs.getPrTotalMaxMemory()));
-      partitionAttributes.setTotalNumBuckets(int2string(partitionArgs.getPrTotalNumBuckets()));
+          .setRedundantCopies(Objects.toString(partitionArgs.getPrRedundantCopies()));
+      partitionAttributes
+          .setStartupRecoveryDelay(Objects.toString(partitionArgs.getPrStartupRecoveryDelay()));
+      partitionAttributes.setTotalMaxMemory(Objects.toString(partitionArgs.getPrTotalMaxMemory()));
+      partitionAttributes
+          .setTotalNumBuckets(Objects.toString(partitionArgs.getPrTotalNumBuckets()));
-      addAttribute(regionConfig, a -> a.setPartitionAttributes(partitionAttributes));
+      regionAttributesType.setPartitionAttributes(partitionAttributes);
-      addAttribute(regionConfig, a -> a.setPartitionAttributes(
-          regionAttributes.getPartitionAttributes().convertToConfigPartitionAttributes()));
+      regionAttributesType.setPartitionAttributes(
+          regionAttributes.getPartitionAttributes().convertToConfigPartitionAttributes());
-      addAttribute(regionConfig, a -> a.setGatewaySenderIds(String.join(",",
-          args.getGatewaySenderIds())));
+      regionAttributesType.setGatewaySenderIds(String.join(",", args.getGatewaySenderIds()));
-      addAttribute(regionConfig, a -> a.setEvictionAttributes(
-          args.getEvictionAttributes().convertToConfigEvictionAttributes()));
+      regionAttributesType
+          .setEvictionAttributes(args.getEvictionAttributes().convertToConfigEvictionAttributes());
-      addAttribute(regionConfig, a -> a.setEvictionAttributes(
-          regionAttributes.getEvictionAttributes().convertToConfigEvictionAttributes()));
+      regionAttributesType.setEvictionAttributes(
+          regionAttributes.getEvictionAttributes().convertToConfigEvictionAttributes());
-      addAttribute(regionConfig,
-          a -> a.setAsyncEventQueueIds(String.join(",", args.getAsyncEventQueueIds())));
+      regionAttributesType.setAsyncEventQueueIds(String.join(",", args.getAsyncEventQueueIds()));
-      addAttribute(regionConfig, a -> a.getCacheListeners().addAll(
-          args.getCacheListeners().stream().map(l -> {
-            DeclarableType declarableType = new DeclarableType();
-            declarableType.setClassName(l.getClassName());
-            return declarableType;
-          }).collect(Collectors.toList())));
+      regionAttributesType.getCacheListeners().addAll(args.getCacheListeners().stream().map(l -> {
+        DeclarableType declarableType = new DeclarableType();
+        declarableType.setClassName(l.getClassName());
+        return declarableType;
+      }).collect(Collectors.toList()));
-      addAttribute(regionConfig, a -> a.setCacheLoader(declarableType));
+      regionAttributesType.setCacheLoader(declarableType);
-      addAttribute(regionConfig, a -> a.setCacheWriter(declarableType));
+      regionAttributesType.setCacheWriter(declarableType);
-      addAttribute(regionConfig, a -> a.setCompressor(new ClassNameType(args.getCompressor())));
-      addAttribute(regionConfig, a -> a.setCloningEnabled(true));
+      regionAttributesType.setCompressor(new ClassNameType(args.getCompressor()));
+      regionAttributesType.setCloningEnabled(true);
-      addAttribute(regionConfig, a -> a.setConcurrencyLevel(args.getConcurrencyLevel().toString()));
+      regionAttributesType.setConcurrencyLevel(args.getConcurrencyLevel().toString());
-      addAttribute(regionConfig, a -> a.setConcurrencyLevel(Integer.toString(
-          regionAttributes.getConcurrencyLevel())));
+      regionAttributesType
+          .setConcurrencyLevel(Integer.toString(regionAttributes.getConcurrencyLevel()));
-      addAttribute(regionConfig,
-          a -> a.setDataPolicy(regionAttributes.getDataPolicy().toConfigType()));
+      regionAttributesType.setDataPolicy(regionAttributes.getDataPolicy().toConfigType());
-      addAttribute(regionConfig,
-          a -> a.setScope(
-              RegionAttributesScope.fromValue(regionAttributes.getScope().toConfigTypeString())));
+      regionAttributesType.setScope(
+          RegionAttributesScope.fromValue(regionAttributes.getScope().toConfigTypeString()));
-  private String int2string(Integer i) {
-    return Optional.ofNullable(i).map(j -> j.toString()).orElse(null);
+  public static RegionAttributesType.ExpirationAttributesType getExpirationAttributes(
+      ExpirationAttributes entryIdleTimeout, CustomExpiry<?, ?> customEntryIdleTimeout) {
+
+    if ((entryIdleTimeout == null || entryIdleTimeout.isDefault())
+        && customEntryIdleTimeout == null) {
+      return null;
+    }
+
+    if (entryIdleTimeout == null || entryIdleTimeout.isDefault()) {
+      return getExpirationAttributes(null, null,
+          new ClassName<>(customEntryIdleTimeout.getClass().getName()));
+    } else if (customEntryIdleTimeout == null) {
+      return getExpirationAttributes(entryIdleTimeout.getTimeout(), entryIdleTimeout.getAction(),
+          null);
+    } else {
+      return getExpirationAttributes(entryIdleTimeout.getTimeout(), entryIdleTimeout.getAction(),
+          new ClassName<>(customEntryIdleTimeout.getClass().getName()));
+    }
-  private String long2string(Long i) {
-    return Optional.ofNullable(i).map(j -> j.toString()).orElse(null);
+  public static RegionAttributesType.ExpirationAttributesType getExpirationAttributes(
+      RegionFunctionArgs.ExpirationAttrs expirationAttrs, ClassName<CustomExpiry> customExpiry) {
+    if (expirationAttrs == null) {
+      return getExpirationAttributes(null, null, customExpiry);
+    } else {
+      return getExpirationAttributes(expirationAttrs.getTime(), expirationAttrs.getAction(),
+          customExpiry);
+    }
+  public static RegionAttributesType.ExpirationAttributesType getExpirationAttributes(
+      Integer timeout, ExpirationAction action, ClassName<CustomExpiry> expiry) {
+    if (timeout == null && action == null && expiry == null) {
+      return null;
+    }
+    RegionAttributesType.ExpirationAttributesType attributesType =
+        new RegionAttributesType.ExpirationAttributesType();
+
+    attributesType.setTimeout(Objects.toString(timeout, "0"));
+    if (action == null) {
+      action = ExpirationAction.INVALIDATE;
+    }
+    attributesType.setAction(action.toXmlString());
+
+    if (expiry != null) {
+      attributesType
+          .setCustomExpiry(new DeclarableType(expiry.getClassName(), expiry.getInitProperties()));
+    }
+
+    return attributesType;
+  }
+
+
-
-  private void addAttribute(RegionConfig config, Consumer<RegionAttributesType> consumer) {
-    if (config.getRegionAttributes() == null) {
-      config.setRegionAttributes(new RegionAttributesType());
-    }
-
-    consumer.accept(config.getRegionAttributes());
-  }
-
-  private Object getAttribute(RegionConfig config,
-      Function<RegionAttributesType, Object> function) {
-    if (config.getRegionAttributes() == null) {
-      return null;
-    }
-
-    return function.apply(config.getRegionAttributes());
-  }

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 INS31 UPD83 MOV83 INS83 INS43 INS42 INS44 INS44 INS8 UPD83 INS83 INS43 UPD42 UPD83 INS83 UPD43 UPD42 MOV44 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 INS25 INS40 INS43 INS42 INS74 INS42 INS25 INS25 INS40 UPD43 UPD42 UPD74 UPD42 INS25 INS40 UPD42 UPD43 UPD42 UPD74 UPD42 INS60 INS21 INS25 INS21 INS25 INS41 UPD43 MOV43 INS59 MOV27 INS8 UPD42 MOV42 INS43 INS76 INS76 INS27 INS8 INS27 INS8 INS25 INS40 UPD43 UPD43 MOV27 MOV8 INS8 UPD42 UPD43 UPD43 INS27 INS43 INS59 INS32 INS27 INS8 INS32 INS27 INS8 INS42 UPD42 UPD42 MOV42 MOV14 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV32 UPD42 UPD42 MOV32 UPD42 UPD42 INS32 UPD42 UPD42 MOV32 INS25 INS25 MOV25 MOV25 INS42 INS36 INS27 INS41 INS27 INS32 INS41 INS27 INS8 INS8 UPD42 UPD42 INS42 INS41 INS41 UPD42 UPD42 INS27 INS27 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 MOV32 MOV32 MOV32 MOV32 MOV32 UPD42 MOV32 MOV32 UPD42 MOV42 MOV32 INS33 MOV32 INS33 UPD27 MOV27 MOV8 UPD27 MOV27 MOV8 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS27 INS42 INS33 INS33 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS33 INS41 MOV41 INS32 INS32 INS27 INS27 INS42 INS33 INS43 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS32 UPD42 MOV42 UPD42 UPD42 UPD42 MOV32 INS32 INS33 INS32 INS33 INS32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV42 MOV42 MOV32 UPD42 UPD42 MOV32 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 MOV42 MOV9 UPD42 MOV32 UPD42 UPD42 INS27 INS32 UPD42 MOV42 MOV33 INS33 INS14 INS32 UPD42 MOV42 INS33 INS33 INS42 UPD42 MOV42 INS32 MOV32 INS42 INS42 INS33 INS42 MOV33 INS40 INS42 INS40 UPD42 MOV42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS33 INS42 UPD42 MOV42 INS74 INS32 INS42 INS32 INS32 INS33 UPD42 MOV42 INS32 INS32 INS14 UPD42 MOV42 INS42 UPD42 UPD42 MOV43 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 INS42 UPD42 MOV42 INS32 UPD42 UPD42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS74 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 MOV32 MOV42 MOV32 INS33 UPD42 MOV42 MOV32 INS33 UPD42 MOV42 INS42 INS42 INS43 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL33 DEL27 DEL33 DEL27 DEL27 DEL32 DEL42 DEL32 DEL38 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL42 DEL33 DEL27 DEL33 DEL27 DEL27 DEL32 DEL42 DEL32 DEL38 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL32 DEL7 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL33 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL38 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL25 DEL25 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL33 DEL27 DEL40 DEL43 DEL42 DEL11 DEL40 DEL43 DEL14 DEL16 DEL59 DEL60 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL33 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL42 DEL33 DEL27 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL8 DEL25 DEL25 DEL33 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL25 DEL25 DEL33 DEL27 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL25 DEL25 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL33 DEL27 DEL40 DEL43 DEL42 DEL11 DEL40 DEL43 DEL14 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL42 DEL42 DEL42 DEL59 DEL86 DEL32 DEL32 DEL42 DEL59 DEL32 DEL86 DEL32 DEL33 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL32 DEL86 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL25 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL32 DEL32 DEL41