Merge branch 'release/1.8.0'

+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.concurrent.TimeUnit;
+import com.google.common.collect.Streams;
+
+  private static final String DOUBLE_QUOTE = "\"";
+
+
+  protected void awaitTermination(GfshScript script) throws InterruptedException {
+    boolean exited = process.waitFor(script.getTimeout(), script.getTimeoutTimeUnit());
+
+    try {
+      assertThat(exited).isTrue();
+      assertThat(process.exitValue()).isEqualTo(script.getExpectedExitValue());
+    } catch (AssertionError error) {
+      printLogFiles();
+      throw error;
+    }
+  }
+
+  /**
+   * this only kills the process of "gfsh -e command", it does not kill the child processes started
+   * by this command.
+   */
+  public void killProcess() {
+    process.destroyForcibly();
+    if (process.isAlive()) {
+      // process may not terminate immediately after destroyForcibly
+      boolean exited = false;
+      try {
+        exited = process.waitFor(1, TimeUnit.MINUTES);
+      } catch (InterruptedException e) {
+        throw new RuntimeException(e.getMessage(), e);
+      }
+      if (!exited) {
+        throw new RuntimeException("failed to destroy the process of " + workingDir.getName());
+      }
+    }
+  }
+
+  String[] getStopMemberCommands() {
+    Stream<String> stopServers =
+        getServerDirs().stream().map(f -> "stop server --dir=" + quoteArgument(f.toString()));
+    Stream<String> stopLocators =
+        getLocatorDirs().stream().map(f -> "stop locator --dir=" + quoteArgument(f.toString()));
+    return Streams.concat(stopServers, stopLocators).toArray(String[]::new);
+  }
+
+  private String quoteArgument(String argument) {
+    if (!argument.startsWith(DOUBLE_QUOTE)) {
+      argument = DOUBLE_QUOTE + argument;
+    }
+
+    if (!argument.endsWith(DOUBLE_QUOTE)) {
+      argument = argument + DOUBLE_QUOTE;
+    }
+
+    return argument;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS5 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS43 INS42 INS42 INS60 INS54 INS65 INS21 INS25 INS43 INS85 INS60 INS60 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS39 INS59 INS8 INS12 INS66 INS66 INS32 INS32 INS8 INS42 INS74 INS59 INS74 INS59 INS32 INS42 INS38 INS8 INS38 INS8 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS60 INS54 INS25 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS42 INS89 INS32 INS21 INS32 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS53 INS39 INS59 INS8 INS12 INS38 INS8 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS9 INS21 INS44 INS8 INS42 INS53 INS32 INS42 INS59 INS27 INS32 INS42 INS59 INS27 INS43 INS85 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS34 INS40 INS43 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42