GEODE-5010: Introduce *ResultModel objects to replace *ResultData (#1870)


- The changes here are intended to allow for support of both the old and new
  model for producing results. As such the interface structures are a mess but
  will be cleaned up once all commands have been converted.
- Not all types of return values are supported but will be added as commands
  are converted. In particular commands that return actual result data in the
  form of files or file content.
- Sub-sections are not supported anymore.
- All commands should now return a ResultModel object

-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.DataResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-  public Result describeClient(@CliOption(key = CliStrings.DESCRIBE_CLIENT__ID, mandatory = true,
-      help = CliStrings.DESCRIBE_CLIENT__ID__HELP) String clientId) throws Exception {
-    Result result;
+  public ResultModel describeClient(@CliOption(key = CliStrings.DESCRIBE_CLIENT__ID,
+      mandatory = true, help = CliStrings.DESCRIBE_CLIENT__ID__HELP) String clientId)
+      throws Exception {
+    ResultModel result = new ResultModel();
-    CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
-    CompositeResultData.SectionResultData sectionResult =
-        compositeResultData.addSection("InfoSection");
-
-      return ResultBuilder.createGemFireErrorResult(
+      return result.createCommandProcessingError(
-              return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+              return result.createCommandProcessingError(CliStrings.format(
-            return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+            return result.createCommandProcessingError(CliStrings.format(
-      return ResultBuilder.createGemFireErrorResult(
+      return result.createCommandProcessingError(
-      buildTableResult(sectionResult, clientHealthStatus, isDurable, primaryServers,
-          secondaryServers);
-      result = ResultBuilder.buildResult(compositeResultData);
+      buildTableResult(result, clientHealthStatus, isDurable, primaryServers, secondaryServers);
-      return ResultBuilder.createGemFireErrorResult(CliStrings.DESCRIBE_CLIENT_NO_MEMBERS);
+      result.createCommandProcessingError(CliStrings.DESCRIBE_CLIENT_NO_MEMBERS);
-  private void buildTableResult(CompositeResultData.SectionResultData sectionResult,
-      ClientHealthStatus clientHealthStatus, String isDurable, List<String> primaryServers,
-      List<String> secondaryServers) {
+  private void buildTableResult(ResultModel result, ClientHealthStatus clientHealthStatus,
+      String isDurable, List<String> primaryServers, List<String> secondaryServers) {
+
+    DataResultModel dataSection = result.addData("InfoSection");
-      sectionResult.addSeparator('-');
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PRIMARY_SERVERS, primServers);
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_SECONDARY_SERVERS, secondServers);
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_CPU, clientHealthStatus.getCpus());
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_LISTENER_CALLS,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PRIMARY_SERVERS, primServers);
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_SECONDARY_SERVERS, secondServers);
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_CPU, clientHealthStatus.getCpus());
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_LISTENER_CALLS,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_GETS,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_GETS,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_MISSES,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_MISSES,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PUTS,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PUTS,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_THREADS,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_THREADS,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PROCESS_CPU_TIME,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_PROCESS_CPU_TIME,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_QUEUE_SIZE,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_QUEUE_SIZE,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_UP_TIME,
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_UP_TIME,
-      sectionResult.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_DURABLE, isDurable);
-      sectionResult.addSeparator('-');
+      dataSection.addData(CliStrings.DESCRIBE_CLIENT_COLUMN_DURABLE, isDurable);
-          TabularResultData poolStatsResultTable =
-              sectionResult.addTable("Pool Stats For Pool Name = " + entry.getKey());
+          TabularResultModel poolStatsResultTable =
+              result.addTable("Pool Stats For Pool Name = " + entry.getKey());

UPD40 UPD40 UPD40 UPD43 UPD42 INS60 UPD43 UPD42 INS60 UPD43 MOV43 INS59 INS42 INS43 INS59 UPD42 MOV42 INS14 INS21 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS45 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL41 DEL40 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL21