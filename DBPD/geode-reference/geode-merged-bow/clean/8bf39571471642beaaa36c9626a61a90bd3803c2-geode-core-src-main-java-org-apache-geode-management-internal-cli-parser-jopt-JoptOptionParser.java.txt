Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Newly constructed JoptOptionParser must be loaded with arguments and
- * options before parsing command strings.
+ * Newly constructed JoptOptionParser must be loaded with arguments and options before parsing
+ * command strings.
-    optionBuilder = parser.acceptsAll(option.getAggregate(),
-        option.getHelp());
+    optionBuilder = parser.acceptsAll(option.getAggregate(), option.getHelp());
-    //   argumentSpecs.required();
+    // argumentSpecs.required();
-    optionSet.setUserInput(userInput!=null?userInput.trim():"");
+    optionSet.setUserInput(userInput != null ? userInput.trim() : "");
-      String[] preProcessedInput = preProcess(new HyphenFormatter().formatCommand(input.getString()));
+      String[] preProcessedInput =
+          preProcess(new HyphenFormatter().formatCommand(input.getString()));
-          String unknownString = (String)joptOptionSet.nonOptionArguments().get(arguments.size()); // added cast when geode-joptsimple was removed
-          // If the first option is un-parseable then it will be returned as "<option>=<value>" since it's
-          // been interpreted as an argument. However, all subsequent options will be returned as "<option>".
+          String unknownString = (String) joptOptionSet.nonOptionArguments().get(arguments.size()); // added
+                                                                                                    // cast
+                                                                                                    // when
+                                                                                                    // geode-joptsimple
+                                                                                                    // was
+                                                                                                    // removed
+          // If the first option is un-parseable then it will be returned as "<option>=<value>"
+          // since it's
+          // been interpreted as an argument. However, all subsequent options will be returned as
+          // "<option>".
-          // TODO: ce = processException(OptionException.createUnrecognizedOptionException(unknownString, joptOptionSet)); // removed when geode-joptsimple was removed
+          // TODO: ce =
+          // processException(OptionException.createUnrecognizedOptionException(unknownString,
+          // joptOptionSet)); // removed when geode-joptsimple was removed
-        
+
-        if(argument.length()>0){
+        if (argument.length() > 0) {
-          optionSet.put(arguments.get(j),argument.toString());
+          optionSet.put(arguments.get(j), argument.toString());
-                  inputSplit = StringUtils.removeStart(inputSplit,
-                      SyntaxConstants.LONG_OPTION_SPECIFIER);
+                  inputSplit =
+                      StringUtils.removeStart(inputSplit, SyntaxConstants.LONG_OPTION_SPECIFIER);
-                  inputSplit = StringUtils.removeEnd(inputSplit,
-                      SyntaxConstants.OPTION_VALUE_SPECIFIER);
+                  inputSplit =
+                      StringUtils.removeEnd(inputSplit, SyntaxConstants.OPTION_VALUE_SPECIFIER);
-                  if (arguments.size() > 1 && !(option.getConverter() instanceof MultipleValueConverter) && option.getValueSeparator() == null) {
+                  if (arguments.size() > 1
+                      && !(option.getConverter() instanceof MultipleValueConverter)
+                      && option.getValueSeparator() == null) {
-                    // TODO: ce = processException(new MultipleArgumentsForOptionException(optionList, joptOptionSet)); // removed when geode-joptsimple was removed
-                  } else if ((arguments.size() == 1 && !(option.getConverter() instanceof MultipleValueConverter)) || option.getValueSeparator() == null) {
+                    // TODO: ce = processException(new
+                    // MultipleArgumentsForOptionException(optionList, joptOptionSet)); // removed
+                    // when geode-joptsimple was removed
+                  } else if ((arguments.size() == 1
+                      && !(option.getConverter() instanceof MultipleValueConverter))
+                      || option.getValueSeparator() == null) {
-      optionSet
-          .setNoOfSpacesRemoved(input.getNoOfSpacesRemoved() /* + factor */);
+      optionSet.setNoOfSpacesRemoved(input.getNoOfSpacesRemoved() /* + factor */);
-        /* inner: */while(iterator.hasNext()) {
+        /* inner: */while (iterator.hasNext()) {
-    
+

UPD66 UPD66