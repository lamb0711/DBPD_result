Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-  
+
-   * Does a region entry destroy on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region entry destroy on a server using connections from the given pool to communicate
+   * with the server.
+   * 
-  public static Object execute(ExecutablePool pool, LocalRegion region,
-      Object key,
-      Object expectedOldValue, Operation operation,
-      EntryEventImpl event, Object callbackArg,
+  public static Object execute(ExecutablePool pool, LocalRegion region, Object key,
+      Object expectedOldValue, Operation operation, EntryEventImpl event, Object callbackArg,
-    DestroyOpImpl op = new DestroyOpImpl(region, key, expectedOldValue,
-        operation, event, callbackArg, prSingleHopEnabled);
+    DestroyOpImpl op = new DestroyOpImpl(region, key, expectedOldValue, operation, event,
+        callbackArg, prSingleHopEnabled);
-      ClientMetadataService cms = region.getCache()
-          .getClientMetadataService();
-      ServerLocation server = cms.getBucketServerLocation(region,
-          Operation.DESTROY, key, null, callbackArg);
+      ClientMetadataService cms = region.getCache().getClientMetadataService();
+      ServerLocation server =
+          cms.getBucketServerLocation(region, Operation.DESTROY, key, null, callbackArg);
-          PoolImpl poolImpl = (PoolImpl)pool;
-          boolean onlyUseExistingCnx = ((poolImpl.getMaxConnections() != -1 && poolImpl
-              .getConnectionCount() >= poolImpl.getMaxConnections()) ? true
-              : false);
-          op.setAllowDuplicateMetadataRefresh(! onlyUseExistingCnx);
+          PoolImpl poolImpl = (PoolImpl) pool;
+          boolean onlyUseExistingCnx = ((poolImpl.getMaxConnections() != -1
+              && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);
+          op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);
-        }
-        catch (AllConnectionsInUseException e) {
-        }
-        catch (ServerConnectivityException e) {
+        } catch (AllConnectionsInUseException e) {
+        } catch (ServerConnectivityException e) {
-  
+
-   * Does a region entry destroy on a server using the given connection to
-   * communicate with the server.
+   * Does a region entry destroy on a server using the given connection to communicate with the
+   * server.
-   * @param con
-   *                the connection to use to send to the server
-   * @param pool
-   *                the pool to use to communicate with the server.
-   * @param region
-   *                the region to do the entry destroy on
-   * @param key
-   *                the entry key to do the destroy on
-   * @param event
-   *                the event for this destroy operation
-   * @param callbackArg
-   *                an optional callback arg to pass to any cache callbacks
+   * @param con the connection to use to send to the server
+   * @param pool the pool to use to communicate with the server.
+   * @param region the region to do the entry destroy on
+   * @param key the entry key to do the destroy on
+   * @param event the event for this destroy operation
+   * @param callbackArg an optional callback arg to pass to any cache callbacks
-  public static void execute(Connection con,
-                             ExecutablePool pool,
-                             String region,
-                             Object key,
-                             Object expectedOldValue,
-                             Operation operation,
-                             EntryEventImpl event,
-                             Object callbackArg)
-  {
-    AbstractOp op = new DestroyOpImpl(region, key, expectedOldValue,
-        operation, event, callbackArg);
+  public static void execute(Connection con, ExecutablePool pool, String region, Object key,
+      Object expectedOldValue, Operation operation, EntryEventImpl event, Object callbackArg) {
+    AbstractOp op = new DestroyOpImpl(region, key, expectedOldValue, operation, event, callbackArg);
-                                                               
+
-  
+
-    
+
-    
-    private LocalRegion region;       
+
+    private LocalRegion region;
-    
+
-    
+
-    public DestroyOpImpl(LocalRegion region,
-                         Object key,
-                         Object expectedOldValue,
-                         Operation operation,
-                         EntryEventImpl event,
-                         Object callbackArg,
-                         boolean prSingleHopEnabled) {
+    public DestroyOpImpl(LocalRegion region, Object key, Object expectedOldValue,
+        Operation operation, EntryEventImpl event, Object callbackArg, boolean prSingleHopEnabled) {
-      this.region = region ;
+      this.region = region;
-      this.callbackArg = callbackArg ;
+      this.callbackArg = callbackArg;
-      getMessage().addObjPart(operation==Operation.DESTROY? null : operation); // server interprets null as DESTROY
+      getMessage().addObjPart(operation == Operation.DESTROY ? null : operation); // server
+                                                                                  // interprets null
+                                                                                  // as DESTROY
-    public DestroyOpImpl(String region, Object key, Object expectedOldValue,
-        Operation operation, EntryEventImpl event, 
-        Object callbackArg) {
+    public DestroyOpImpl(String region, Object key, Object expectedOldValue, Operation operation,
+        EntryEventImpl event, Object callbackArg) {
-      getMessage().addObjPart(operation==Operation.DESTROY? null : operation); // server interprets null as DESTROY
+      getMessage().addObjPart(operation == Operation.DESTROY ? null : operation); // server
+                                                                                  // interprets null
+                                                                                  // as DESTROY
-    
+
-    
-    
+
+
-          VersionTag tag = (VersionTag)msg.getPart(partIdx++).getObject();
+          VersionTag tag = (VersionTag) msg.getPart(partIdx++).getObject();
-            }
+          }
-//        if (log.fineEnabled()) {
-//          log.fine("reading prSingleHop part #" + (partIdx+1));
-//        }
+        // if (log.fineEnabled()) {
+        // log.fine("reading prSingleHop part #" + (partIdx+1));
+        // }
-              int myVersion = cms.getMetaDataVersion(region, Operation.UPDATE,
-                key, null, callbackArg);
+              int myVersion =
+                  cms.getMetaDataVersion(region, Operation.UPDATE, key, null, callbackArg);
-            }
-            catch (CacheClosedException e) {
+            } catch (CacheClosedException e) {
-        return new EntryNotFoundException(LocalizedStrings.AbstractRegionMap_ENTRY_NOT_FOUND_WITH_EXPECTED_VALUE.toLocalizedString());
+        return new EntryNotFoundException(
+            LocalizedStrings.AbstractRegionMap_ENTRY_NOT_FOUND_WITH_EXPECTED_VALUE
+                .toLocalizedString());
+
+
+
-      return "DestroyOp:"+key;
+      return "DestroyOp:" + key;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66