GEODE-6384: Create consistent API to retrieve instances of ClusterManagementService (#3221)

* rename classes
* move classes to internal packages
-import java.util.ArrayList;
-import java.util.List;
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.geode.management.spi.ClusterManagementServiceProviderFactory;
+import org.apache.geode.management.internal.ClusterManagementServiceFactory;
- * Calling {@code getFactory(context)} will return an explicit instance of {@link
- * ClusterManagementServiceProviderFactory}. Methods on this factory can then be called to create or
+ * Calling {@code getServiceFactory(context)} will return an explicit instance of {@link
+ * ClusterManagementServiceFactory}. Methods on this factory can then be called to create or
-  private static List<ClusterManagementServiceProviderFactory> providerFactories = null;
+  private static Map<String, ClusterManagementServiceFactory> serviceFactories = null;
-    ClusterManagementServiceProviderFactory factory;
-    try {
-      factory = getFactory(GEODE_CONTEXT);
-      try {
-        ClusterManagementService cms = factory.create();
-        return cms;
-      } catch (IllegalStateException ex) {
-        // Ignored
-      }
-    } catch (IllegalArgumentException iex) {
-      // Ig
-    } catch (Exception iex) {
-      iex.printStackTrace();
-    }
-
-    throw new IllegalStateException(
-        "Unable to get ClusterManagementService using any of the default contexts");
+    return getServiceFactory(GEODE_CONTEXT).create();
-    return getFactory(JAVA_CLIENT_CONTEXT).create(clusterUrl);
+    return getServiceFactory(JAVA_CLIENT_CONTEXT).create(clusterUrl);
-    return getFactory(JAVA_CLIENT_CONTEXT).create(requestFactory);
+    return getServiceFactory(JAVA_CLIENT_CONTEXT).create(requestFactory);
-  public static synchronized ClusterManagementServiceProviderFactory getFactory(String context) {
-    if (providerFactories == null) {
-      loadClusterManagementServiceProviderFactories();
+  private static synchronized ClusterManagementServiceFactory getServiceFactory(String context) {
+    if (serviceFactories == null) {
+      loadClusterManagementServiceFactories();
-
-    ClusterManagementServiceProviderFactory factory = providerFactories.stream()
-        .filter(x -> x.getContext().equalsIgnoreCase(context))
-        .findFirst()
-        .orElseThrow(
-            () -> new IllegalArgumentException("Did not find provider for context: " + context));
-
+    ClusterManagementServiceFactory factory = serviceFactories.get(context);
+    if (factory == null) {
+      throw new IllegalArgumentException("Did not find provider for context: " + context);
+    }
-  private static void loadClusterManagementServiceProviderFactories() {
-    providerFactories = new ArrayList<>();
+  private static void loadClusterManagementServiceFactories() {
+    serviceFactories = new HashMap<>();
-    for (ClusterManagementServiceProviderFactory factory : ServiceLoader
-        .load(ClusterManagementServiceProviderFactory.class)) {
-      providerFactories.add(factory);
+    for (ClusterManagementServiceFactory factory : ServiceLoader
+        .load(ClusterManagementServiceFactory.class)) {
+      serviceFactories.put(factory.getContext(), factory);

UPD40 UPD40 UPD40 UPD74 INS8 UPD83 UPD43 UPD42 UPD42 UPD43 INS43 UPD43 UPD42 INS41 UPD42 INS25 UPD66 UPD42 UPD42 INS42 UPD42 INS32 UPD43 INS27 INS8 INS32 MOV42 UPD42 UPD42 INS32 INS42 INS33 INS53 UPD42 UPD43 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV14 UPD74 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 INS42 UPD42 MOV42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL32 DEL42 DEL32 DEL86 DEL32 DEL42 DEL32 DEL42 DEL86 DEL32