GEODE-6387: Replace CachePerfStats.Clock with LongSupplier

Use LongSupplier to wrap NanoTimer.getTime and/or
DistributionStats.getStatsTime for constructor injection to improve
testability.

We have been using LongSupplier in the other stats classes, but I had
previously introduced a custom inner-class interface to CachePerfStats
that I decided to replace with LongSupplier and delete the inner-class.

+import java.util.function.LongSupplier;
+
-  private final Clock clock;
+  private final LongSupplier clock;
-  CachePerfStats(StatisticsFactory factory, String textId, Clock clock) {
+  public CachePerfStats(StatisticsFactory factory, String textId, LongSupplier clock) {
-   * @deprecated Please use instance method {@link #getClockTime()} instead.
+   * @deprecated Please use instance method {@link #getTime()} instead.
-  protected long getClockTime() {
-    return clock.getTime();
+  protected long getTime() {
+    return clock.getAsLong();
-    return getClockTime();
+    return getTime();
-      stats.incLong(compressionCompressTimeId, getClockTime() - startTime);
+      stats.incLong(compressionCompressTimeId, getTime() - startTime);
-    return getClockTime();
+    return getTime();
-      stats.incLong(compressionDecompressTimeId, getClockTime() - startTime);
+      stats.incLong(compressionDecompressTimeId, getTime() - startTime);
-    return getClockTime();
+    return getTime();
-      stats.incLong(netloadTimeId, getClockTime() - start);
+      stats.incLong(netloadTimeId, getTime() - start);
-    return getClockTime();
+    return getTime();
-      stats.incLong(cacheWriterCallTimeId, getClockTime() - start);
+      stats.incLong(cacheWriterCallTimeId, getTime() - start);
-    return getClockTime();
+    return getTime();
-      stats.incLong(cacheListenerCallTimeId, getClockTime() - start);
+      stats.incLong(cacheListenerCallTimeId, getTime() - start);
-    return getClockTime();
+    return getTime();
-      stats.incLong(getInitialImageTimeId, getClockTime() - start);
+      stats.incLong(getInitialImageTimeId, getTime() - start);
-      stats.incLong(getInitialImageTimeId, getClockTime() - start);
+      stats.incLong(getInitialImageTimeId, getTime() - start);
-    return getClockTime();
+    return getTime();
-    long ts = getClockTime();
+    long ts = getTime();
-    return getClockTime();
+    return getTime();
-    long ts = getClockTime();
+    long ts = getTime();
-    return getClockTime();
+    return getTime();
-      long delta = getClockTime() - start;
+      long delta = getTime() - start;
-        total = getClockTime() - start;
+        total = getTime() - start;
-        total = getClockTime() - start;
+        total = getTime() - start;
-      stats.incLong(putAllTimeId, getClockTime() - start);
+      stats.incLong(putAllTimeId, getTime() - start);
-      stats.incLong(removeAllTimeId, getClockTime() - start);
+      stats.incLong(removeAllTimeId, getTime() - start);
-      stats.incLong(queryResultsHashCollisionProbeTimeId, getClockTime() - start);
+      stats.incLong(queryResultsHashCollisionProbeTimeId, getTime() - start);
-      stats.incLong(deltaUpdatesTimeId, getClockTime() - start);
+      stats.incLong(deltaUpdatesTimeId, getTime() - start);
-      stats.incLong(deltasPreparedTimeId, getClockTime() - start);
+      stats.incLong(deltasPreparedTimeId, getTime() - start);
-      stats.incLong(importTimeId, getClockTime() - start);
+      stats.incLong(importTimeId, getTime() - start);
-      stats.incLong(exportTimeId, getClockTime() - start);
+      stats.incLong(exportTimeId, getTime() - start);
-
-  interface Clock {
-    long getTime();
-  }

INS26 INS40 UPD43 INS83 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL39 DEL42 DEL31 DEL55