GEODE-6687: replace ByteArrayInputStream+DataInputStream with ByteArrayDataInput (#3547)

* Code that used DataInputStream(ByteArrayInputStream) as a DataInput now use ByteArrayDataInput.
* Added a unit test that showed that ByteArrayDataInput.readFully(byte[])
would throw IndexOutOfBoundsException instead of EOFException.
To fix this changed readFully(byte[]) to call readFully(byte[],int,int)
which was correctly implemented to throw EOFException.

* readLine is now implemented on ByteArrayDataInput.
The old implementation just threw an exception.

+  public ByteArrayDataInput(byte[] bytes) {
+    initialize(bytes, null);
+  }
+
+  public ByteArrayDataInput(byte[] bytes, Version version) {
+    initialize(bytes, version);
+  }
+
-    final int len = b.length;
-    System.arraycopy(this.bytes, this.pos, b, 0, len);
-    this.pos += len;
+    readFully(b, 0, b.length);
+   * Behaves like InputStream.read()
+   * Returns the next byte as an int in the range [0..255]
+   * or -1 if at EOF.
+   */
+  private int readByteAsInt() {
+    if (this.pos >= this.nBytes) {
+      return -1;
+    } else {
+      return this.bytes[this.pos++] & 0xff;
+    }
+  }
+
+  /**
-    throw new UnsupportedOperationException();
+    if (this.pos >= this.nBytes) {
+      return null;
+    }
+    // index of the first byte in the line
+    int startIdx = this.pos;
+    // index of the last byte in the line
+    int lastIdx = -1;
+    while (lastIdx == -1) {
+      int c = readByteAsInt();
+      switch (c) {
+        case -1:
+          lastIdx = this.pos;
+          break;
+        case '\n':
+          lastIdx = this.pos - 1;
+          break;
+        case '\r':
+          lastIdx = this.pos - 1;
+          int c2 = readByteAsInt();
+          if (c2 != '\n' && c2 != -1) {
+            this.pos--;
+          }
+          break;
+      }
+    }
+    return new String(this.bytes, 0, startIdx, lastIdx - startIdx);

INS31 INS31 INS31 INS31 MOV83 INS42 INS44 INS8 INS83 INS42 INS44 INS44 INS8 MOV29 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS8 INS5 INS42 INS21 INS5 INS42 INS43 INS42 INS21 MOV21 INS65 INS25 INS25 INS60 INS60 INS61 INS41 INS39 INS85 INS32 INS39 INS85 INS42 INS32 INS66 INS66 INS66 INS27 INS8 INS8 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS14 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 INS40 MOV22 INS22 INS41 INS41 INS22 INS22 INS41 INS42 MOV22 INS42 INS38 INS42 INS38 INS60 INS50 UPD43 MOV43 MOV22 INS34 INS42 INS27 INS52 INS42 INS38 INS27 INS52 INS42 INS52 INS42 INS33 INS34 INS34 INS39 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS60 INS25 INS10 UPD42 INS42 INS42 INS34 INS2 INS34 INS42 INS32 INS38 INS7 INS13 INS7 INS13 INS7 INS39 INS59 INS27 INS8 INS22 INS37 INS42 INS34 INS42 INS22 INS42 INS27 INS42 INS27 INS42 INS32 INS27 INS27 INS21 INS52 INS42 INS22 INS52 INS42 INS22 INS34 INS22 INS34 INS42 INS42 INS13 INS42 INS38 INS37 INS52 INS42 INS52 INS42 INS52 INS42 INS34 INS22 INS52 INS42 DEL42 DEL42 DEL39 DEL42 DEL83 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL31 DEL14 DEL53