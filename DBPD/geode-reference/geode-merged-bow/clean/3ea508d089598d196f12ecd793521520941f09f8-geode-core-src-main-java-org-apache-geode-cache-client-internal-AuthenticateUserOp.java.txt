GEODE-6580: Cleanup static analyzer warnings. (#3432)


+
-import org.apache.geode.internal.cache.tier.sockets.ChunkedMessage;
-    AbstractOp op = new AuthenticateUserOpImpl(con, pool);
+    AbstractOp op = new AuthenticateUserOpImpl(con);
-    AbstractOp op = new AuthenticateUserOpImpl(pool, securityProps);
+    AbstractOp op = new AuthenticateUserOpImpl(securityProps);
-    public AuthenticateUserOpImpl(Connection con, ExecutablePool pool) {
+    AuthenticateUserOpImpl(Connection con) {
-      byte[] credentialBytes = null;
+      byte[] credentialBytes;
-      HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT);
-      try {
+      try (HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT)) {
-      } finally {
-        heapdos.close();
-    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps) {
-      this(pool, securityProps, false);
+    AuthenticateUserOpImpl(Properties securityProps) {
+      this(securityProps, false);
-    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps,
+    AuthenticateUserOpImpl(Properties securityProps,
-      this.securityProperties = securityProps;
-      this.needsServerLocation = needsServer;
+      securityProperties = securityProps;
+      needsServerLocation = needsServer;
-      byte[] secureBytes = null;
+      byte[] secureBytes;
-      if (this.securityProperties != null) {
-        byte[] credentialBytes = null;
+      if (securityProperties != null) {
-        Properties credentials = Handshake.getCredentials(authInitMethod, this.securityProperties,
+        Properties credentials = Handshake.getCredentials(authInitMethod, securityProperties,
-        HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT);
-        try {
+        byte[] credentialBytes;
+        try (HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT)) {
-        } finally {
-          heapdos.close();
-    protected Object attemptReadResponse(Connection cnx) throws Exception {
-      Message msg = createResponseMessage();
-      if (msg != null) {
-        msg.setComms(cnx.getSocket(), cnx.getInputStream(), cnx.getOutputStream(),
-            cnx.getCommBuffer(), cnx.getStats());
-        if (msg instanceof ChunkedMessage) {
-          try {
-            return processResponse(cnx, msg);
-          } finally {
-            msg.unsetComms();
-            processSecureBytes(cnx, msg);
-          }
-        } else {
-          try {
-            msg.receive();
-          } finally {
-            msg.unsetComms();
-            processSecureBytes(cnx, msg);
-          }
-          return processResponse(cnx, msg);
-        }
-      } else {
-        return null;
-      }
-    }
-
-    protected Object processResponse(Connection cnx, Message msg) throws Exception {
-      byte[] bytes = null;
+    protected Object processResponse(Message msg, Connection cnx) throws Exception {
+      byte[] bytes;
-        if (this.needsServerLocation) {
+        if (needsServerLocation) {

MOV44 MOV78 INS58 MOV60 MOV43 MOV59 INS42 INS42 INS42 INS58 INS42 MOV43 MOV59 INS42 DEL40 DEL26 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL33 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL33 DEL52 DEL42 DEL22