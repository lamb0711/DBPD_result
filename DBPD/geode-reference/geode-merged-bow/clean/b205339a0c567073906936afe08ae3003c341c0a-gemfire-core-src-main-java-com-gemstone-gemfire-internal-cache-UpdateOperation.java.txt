Merge branch 'feature/GEODE-8' into develop

+import java.util.Arrays;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.NewValueImporter;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.SerializedCacheValueImpl;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ENTRY_EVENT_NEW_VALUE;
-    CachedDeserializable cd = (CachedDeserializable)ev
-        .getSerializedNewValue();
-    if (cd != null) {
-      {
-        // don't serialize here if it is not already serialized
-        Object tmp = cd.getValue();
-        if (tmp instanceof byte[]) {
-          byte[] bb = (byte[])tmp;
-          m.newValue = bb;
-          m.newValueLimit = bb.length;
-        }
-        else {
-          m.newValueObj = tmp;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-      }
+    if (CachedDeserializableFactory.preferObject() || ev.hasDelta()) {
+      m.deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
+    } else {
+      m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-    else {
-      Object v = ev.getRawNewValue();
-      if (v == null) {
-        m.newValue = null;
-        m.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
-      }
-      else if (v instanceof byte[]) {
-        m.newValue = (byte[])v;
-        m.newValueLimit = m.newValue.length;
-        m.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
-      }
-      else if (ev.hasDelta()) {
-        if (ev.getCachedSerializedNewValue() != null) {
-          m.newValue = ev.getCachedSerializedNewValue();
-          m.newValueLimit = m.newValue.length;
-        } else {
-          m.newValueObj = v;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
-      }
-      else {
-        if (ev.getCachedSerializedNewValue() != null) {
-          m.newValue = ev.getCachedSerializedNewValue();
-          m.newValueLimit = m.newValue.length;
-        } else {
-          m.newValueObj = v;
-        }
-        m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-      }
-    }
+    ev.exportNewValue(m);
-  public static class UpdateMessage extends AbstractUpdateMessage
-  {
+  public static class UpdateMessage extends AbstractUpdateMessage implements NewValueImporter {
-    protected transient int newValueLimit; // used by toData only
-
+    @Unretained(ENTRY_EVENT_NEW_VALUE) 
-      this.newValueLimit = upMsg.newValueLimit;
+      boolean evReturned = false;
+      try {
+      evReturned = true;
+      } finally {
+        if (!evReturned) {
+          ev.release();
+        }
+      }
-      EntryEventImpl result = new EntryEventImpl(rgn, getOperation(), this.key,
+      EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key,
-        if (this.newValue != null) {
-          this.newValueLimit = this.newValue.length;
-        }
-      }
-      else {
-        if (this.newValueObj != null) {
-          byte[] newValueBytes = BlobHelper.serializeToBlob(this.newValueObj);
-          this.event.setCachedSerializedNewValue(newValueBytes);
-          // for eager deserialization avoid extra byte array serialization
-          if (this.deserializationPolicy ==
-              DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-            out.write(newValueBytes);
-          }
-          else {
-            DataSerializer.writeByteArray(newValueBytes, out);
-          }
-        }
-        else {
-          if (this.deserializationPolicy ==
-              DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-            out.write(this.newValue, 0, this.newValueLimit);
-          } else {
-            DataSerializer.writeByteArray(this.newValue, this.newValueLimit, out);
-          }
-        }
+      } else {
+          // TODO OFFHEAP MERGE: add a writeValue that will cache in the event like so:
+          //byte[] newValueBytes = BlobHelper.serializeToBlob(this.newValueObj);
+          //this.event.setCachedSerializedNewValue(newValueBytes);
+        DistributedCacheOperation.writeValue(this.deserializationPolicy, this.newValueObj, this.newValue, out);
-      else if (this.newValue.length == this.newValueLimit) {
-        valueBytes = this.newValue;
-      }
-        valueBytes = new byte[this.newValueLimit];
-        System.arraycopy(this.newValue, 0, valueBytes, 0, valueBytes.length);
+        valueBytes = this.newValue;
+    @Override
+    public boolean prefersNewSerialized() {
+      return true;
+    }
+    @Override
+    public boolean isUnretainedNewReferenceOk() {
+      return true;
+    }
+    @Override
+    public void importNewObject(@Unretained(ENTRY_EVENT_NEW_VALUE) Object nv, boolean isSerialized) {
+      if (nv == null) {
+        this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+        this.newValue = null;
+      } else {
+        if (!isSerialized) {
+          this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+        }
+        this.newValueObj = nv;
+      }
+    }
+    @Override
+    public void importNewBytes(byte[] nv, boolean isSerialized) {
+      if (!isSerialized) {
+        this.deserializationPolicy = DESERIALIZATION_POLICY_NONE;
+      }
+      this.newValue = nv;
+    }
-      EntryEventImpl ev = new EntryEventImpl(rgn, getOperation(), this.key,
+      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS8 INS43 INS31 INS31 INS31 INS31 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 MOV25 MOV21 INS42 INS79 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 UPD27 INS32 INS42 INS42 MOV60 INS60 INS54 INS42 INS41 INS42 INS41 INS42 INS79 MOV43 INS42 INS39 INS42 INS25 INS42 MOV5 INS42 INS39 INS42 INS25 INS21 MOV32 MOV21 MOV21 MOV42 UPD42 MOV42 INS42 INS39 INS59 MOV8 INS8 MOV8 MOV8 INS9 INS9 INS42 INS42 INS27 INS8 INS8 INS38 INS8 INS7 UPD42 UPD42 INS42 INS9 INS21 INS25 INS32 MOV25 INS42 INS33 INS21 MOV21 INS25 INS21 INS42 INS21 MOV22 INS42 INS32 INS7 INS38 INS8 INS42 INS42 INS42 MOV32 MOV22 INS42 MOV22 INS42 MOV32 INS42 INS7 INS38 INS8 INS7 INS7 INS42 INS42 INS42 MOV32 MOV22 INS42 MOV22 INS42 MOV32 INS42 INS42 INS9 INS42 INS21 UPD42 UPD42 MOV22 MOV22 INS42 MOV22 INS33 INS42 INS21 INS22 INS42 INS22 INS42 INS32 UPD42 MOV52 UPD42 INS7 INS52 INS42 INS52 INS42 INS42 INS42 MOV22 INS42 DEL33 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL40 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL40 DEL32 DEL7 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL40 DEL40 DEL7 DEL21 DEL8 DEL40 DEL42 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL7 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL33 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL8 DEL42 DEL39 DEL85 DEL5 DEL62 DEL40 DEL39 DEL85 DEL5 DEL42 DEL11 DEL7 DEL21 DEL40 DEL40 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL8 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL40 DEL7 DEL21 DEL8 DEL40 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL40 DEL27 DEL42 DEL42 DEL52 DEL42 DEL22 DEL34 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL42 DEL52 DEL42 DEL22 DEL3 DEL7 DEL21 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14