GEODE-6897: implement CMS rebalance operation (#3820)


+import org.apache.geode.management.api.ClusterManagementListOperationsResult;
+import org.apache.geode.management.api.ClusterManagementRealizationResult;
+import org.apache.geode.management.api.ClusterManagementResult.StatusCode;
-import org.apache.geode.management.api.JsonSerializable;
+import org.apache.geode.management.internal.operation.TaggedWithOperator;
+import org.apache.geode.management.runtime.OperationResult;
-  private final OperationManager executorManager;
+  private final OperationManager operationManager;
-        new OperationManager(new OperationHistoryManager()));
+        new OperationManager(cache, new OperationHistoryManager()));
-      OperationManager executorManager) {
+      OperationManager operationManager) {
-    this.executorManager = executorManager;
+    this.operationManager = operationManager;
-  public <T extends CacheElement> ClusterManagementResult create(T config) {
+  public <T extends CacheElement> ClusterManagementRealizationResult create(T config) {
-      return new ClusterManagementResult(false,
+      return new ClusterManagementRealizationResult(false,
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementRealizationResult result = new ClusterManagementRealizationResult();
-    if (result.getStatusCode() != ClusterManagementResult.StatusCode.OK) {
+    if (result.getStatusCode() != StatusCode.OK) {
-        result.setStatus(ClusterManagementResult.StatusCode.FAIL_TO_PERSIST, message);
+        result.setStatus(StatusCode.FAIL_TO_PERSIST, message);
-  public <T extends CacheElement> ClusterManagementResult delete(
+  public <T extends CacheElement> ClusterManagementRealizationResult delete(
-      return new ClusterManagementResult(false,
+      return new ClusterManagementRealizationResult(false,
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementRealizationResult result = new ClusterManagementRealizationResult();
-    if (result.getStatusCode() != ClusterManagementResult.StatusCode.OK) {
+    if (result.getStatusCode() != StatusCode.OK) {
-      result.setStatus(ClusterManagementResult.StatusCode.FAIL_TO_PERSIST, message);
+      result.setStatus(StatusCode.FAIL_TO_PERSIST, message);
-  public <T extends CacheElement> ClusterManagementResult update(
+  public <T extends CacheElement> ClusterManagementRealizationResult update(
-  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> start(
-    CompletableFuture<V> future = executorManager.submit(op).getFuture();
+    OperationInstance<A, V> operationInstance = operationManager.submit(op);
+    CompletableFuture<V> future = operationInstance.getFutureResult();
+    if (op instanceof TaggedWithOperator) {
+      operationInstance.setOperator(((TaggedWithOperator) op).getOperator());
+    }
-        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
-    return new ClusterManagementOperationResult<>(result, future);
+        StatusCode.ACCEPTED,
+        "async operation started (GET uri to check status)");
+
+    return toClusterManagementListOperationsResult(result, operationInstance);
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> list(
+      A opType) {
+    return new ClusterManagementListOperationsResult<>(
+        operationManager.listOperationInstances(opType).stream()
+            .map(this::toClusterManagementListOperationsResult).collect(Collectors.toList()));
+  }
+
+  /**
+   * builds a base status from the state of a future result
+   */
+  private static <V extends OperationResult> ClusterManagementResult getStatus(
+      CompletableFuture<V> future) {
+    if (future.isCompletedExceptionally()) {
+      return new ClusterManagementResult(StatusCode.ERROR, "failed");
+    } else if (future.isDone()) {
+      return new ClusterManagementResult(StatusCode.OK, "finished successfully");
+    } else {
+      return new ClusterManagementResult(StatusCode.IN_PROGRESS, "in progress");
+    }
+  }
+
+  /**
+   * builds a result object from a base status and an operation instance
+   */
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
+      ClusterManagementResult status, OperationInstance<A, V> operationInstance) {
+    ClusterManagementOperationResult<V> result = new ClusterManagementOperationResult<>(status,
+        operationInstance.getFutureResult(), operationInstance.getOperationStart(),
+        operationInstance.getFutureOperationEnded(), operationInstance.getOperator());
+    result.setUri(RestfulEndpoint.URI_CONTEXT + RestfulEndpoint.URI_VERSION
+        + operationInstance.getOperation().getEndpoint() + "/" + operationInstance.getId());
+    return result;
+  }
+
+  /**
+   * builds a result object from an operation instance
+   */
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
+      OperationInstance<A, V> operationInstance) {
+    return toClusterManagementListOperationsResult(getStatus(operationInstance.getFutureResult()),
+        operationInstance);
-   * {@link #startOperation(ClusterManagementOperation)}
+   * {@link ClusterManagementOperationResult#getFutureResult()}
-  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
-      A op, String uri) {
-    OperationInstance<A, V> operationInstance = executorManager.submit(op);
-
-    ClusterManagementResult result = new ClusterManagementResult(
-        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
-
-    String opId = operationInstance.getId();
-    String instUri = uri + "/" + opId;
-    result.setUri(instUri);
-
-    return new ClusterManagementOperationResult<>(result, operationInstance.getFuture());
-  }
-
-  /**
-   * this is intended for use by the REST controller. for Java usage, please use
-   * {@link ClusterManagementOperationResult#getResult()}
-   */
-  public <V extends JsonSerializable> ClusterManagementOperationStatusResult<V> checkStatus(
+  public <V extends OperationResult> ClusterManagementOperationStatusResult<V> checkStatus(
-    final CompletableFuture<V> status = executorManager.getStatus(opId);
-    if (status == null) {
+    final OperationInstance<?, V> operationInstance = operationManager.getOperationInstance(opId);
+    if (operationInstance == null) {
+    final CompletableFuture<V> status = operationInstance.getFutureResult();
+    result.setOperator(operationInstance.getOperator());
+    result.setOperationStart(operationInstance.getOperationStart());
-      result.setStatus(ClusterManagementResult.StatusCode.IN_PROGRESS, "in progress");
+      result.setStatus(StatusCode.IN_PROGRESS, "in progress");
+        result.setOperationEnded(operationInstance.getFutureOperationEnded().get());
-        result.setStatus(ClusterManagementResult.StatusCode.OK, "finished successfully");
+        result.setStatus(StatusCode.OK, "finished successfully");
-    executorManager.close();
+    operationManager.close();

MOV26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 UPD43 UPD43 INS43 UPD42 MOV78 INS83 INS73 MOV73 INS74 INS42 MOV44 INS8 INS29 INS83 INS83 INS73 MOV43 INS42 MOV44 INS8 INS29 INS83 MOV73 INS73 MOV74 INS42 INS44 INS44 INS8 INS29 INS83 INS73 INS73 INS74 INS42 INS44 INS8 INS78 UPD42 UPD42 UPD42 UPD42 INS42 UPD43 MOV60 INS60 INS25 INS42 INS74 UPD43 INS43 INS43 UPD42 INS41 INS65 INS42 INS43 INS74 INS42 INS25 INS65 INS42 INS43 MOV43 INS42 INS74 INS42 MOV60 MOV21 INS41 INS65 INS42 INS74 INS42 INS43 INS43 INS43 INS74 INS42 MOV41 UPD43 INS60 INS21 INS21 INS42 UPD43 INS43 UPD42 MOV74 INS59 INS62 INS8 MOV43 INS32 INS43 INS43 UPD42 INS42 INS42 INS14 INS66 INS42 INS43 INS43 INS32 INS8 INS25 INS66 INS42 INS43 INS43 INS43 INS74 INS42 INS66 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS32 UPD42 INS74 INS83 MOV74 INS59 INS32 INS32 INS42 UPD42 UPD42 UPD40 INS42 INS14 UPD40 MOV42 INS32 INS42 INS43 INS21 INS42 INS42 INS42 MOV42 INS42 INS74 INS32 UPD42 MOV42 INS42 INS42 INS42 INS41 INS32 INS8 INS8 UPD42 MOV42 INS42 INS42 INS43 INS43 INS42 INS14 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS76 INS43 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD43 INS43 UPD42 INS42 INS42 INS42 INS32 MOV43 UPD40 UPD45 INS43 INS32 INS42 INS32 MOV14 INS42 INS42 INS41 INS41 UPD42 MOV42 INS42 MOV74 INS42 INS32 INS32 INS32 INS32 INS40 INS40 INS32 INS45 MOV32 INS42 INS32 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD43 INS42 UPD40 INS42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS90 INS42 INS42 UPD40 UPD45 INS14 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 UPD40 INS21 UPD42 UPD42 INS36 UPD42 MOV42 INS32 INS42 INS52 INS42 MOV43 INS40 INS45 INS40 INS45 UPD42 MOV42 INS42 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS32 UPD40 INS43 INS42 INS32 INS42 INS42 INS42 INS42 UPD40 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL14 DEL43 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL14 DEL66 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL29 DEL83 DEL42 DEL42 DEL59 DEL60 DEL43 DEL42 DEL59 DEL60 DEL8 DEL31