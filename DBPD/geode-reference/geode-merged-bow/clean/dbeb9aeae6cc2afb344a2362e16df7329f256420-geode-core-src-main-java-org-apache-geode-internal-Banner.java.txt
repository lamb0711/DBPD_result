Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.internal.util.ArgumentRedactor;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.StringTokenizer;
+import java.util.TreeMap;
-      StringTokenizer st =
-          new StringTokenizer(path, System.getProperty("path.separator"));
+      StringTokenizer st = new StringTokenizer(path, System.getProperty("path.separator"));
+
+   *
-  private static void print(PrintWriter out, String args[]) {
-    Map sp = new TreeMap((Properties)System.getProperties().clone()); // fix for 46822
+  static void print(PrintWriter out, String args[]) {
+    Map sp = new TreeMap((Properties) System.getProperties().clone()); // fix for 46822
-    final String SEPERATOR = "---------------------------------------------------------------------------";
+    final String SEPERATOR =
+        "---------------------------------------------------------------------------";
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-    List<String> allArgs = new ArrayList<String>();
+    List<String> allArgs = new ArrayList<>();
-        allArgs.addAll(runtimeBean.getInputArguments()); // fixes  45353
+        allArgs.addAll(runtimeBean.getInputArguments()); // fixes 45353
-      for (int i=0; i < args.length; i++) {
-        allArgs.add(args[i]);
-      }
+      Collections.addAll(allArgs, args);
-      for (String arg: allArgs) {
-        out.println("  " + arg);
+      for (String arg : allArgs) {
+        out.println("  " + ArgumentRedactor.redact(arg));
+
-    prettyPrintPath((String)sp.get("java.class.path"), out);
+    prettyPrintPath((String) sp.get("java.class.path"), out);
-    prettyPrintPath((String)sp.get("java.library.path"), out);
+    prettyPrintPath((String) sp.get("java.library.path"), out);
-        Map.Entry me = (Map.Entry)it.next();
+        Map.Entry me = (Map.Entry) it.next();
-        // SW: Filter out the security properties since they may contain
-        // sensitive information.
-        if (!key.startsWith(DistributionConfig.GEMFIRE_PREFIX
-            + DistributionConfig.SECURITY_PREFIX_NAME)
-            && !key.startsWith(DistributionConfigImpl.SECURITY_SYSTEM_PREFIX
-            + DistributionConfig.SECURITY_PREFIX_NAME)
-            && !key.toLowerCase().contains("password") /* bug 45381 */) {
-          out.println("    " + key + " = " + me.getValue());
-        } else {
-          out.println("    " + key + " = " + "********");
-        }
+        out.println("    " + key + " = " + ArgumentRedactor.redact(String.valueOf(me.getValue())));
+   *

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS8 MOV21 UPD74 UPD42 UPD42 INS42 INS42 INS21 INS32 MOV42 MOV42 INS27 INS32 MOV45 MOV42 MOV45 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 MOV32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL42 DEL42 DEL42 DEL40 DEL40 DEL27 DEL32 DEL38 DEL42 DEL42 DEL40 DEL40 DEL27 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL27 DEL27 DEL32 DEL21 DEL8 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25