GEODE-2811: close OffHeapEvictor when cache is closed

Rejected executions are now ignored if shutting down.
execute now used instead of submit.
Close logic on HeapEvictor improved to prevent race conditions and NPEs.

-  private final ArrayList testTaskSetSizes = new ArrayList();
+  private final ArrayList<Integer> testTaskSetSizes = new ArrayList<>();
-  private AtomicBoolean isRunning = new AtomicBoolean(true);
+  private final AtomicBoolean isRunning = new AtomicBoolean(true);
-  private void submitRegionEvictionTask(Callable<Object> task) {
-    evictorThreadPool.submit(task);
+  private void executeInThreadPool(Runnable task) {
+    try {
+      evictorThreadPool.execute(task);
+    } catch (RejectedExecutionException ex) {
+      // ignore rejection if evictor no longer running
+      if (isRunning()) {
+        throw ex;
+      }
+    }
-    if (isRunning.get()) {
+    if (isRunning()) {
-    if (isRunning.get()) {
+    if (isRunning()) {
-        submitRegionEvictionTask(
-            new RegionEvictorTask(regionsForSingleTask, this, bytesToEvictPerTask));
+        executeInThreadPool(new RegionEvictorTask(regionsForSingleTask, this, bytesToEvictPerTask));
-  private Set<Callable<Object>> createRegionEvictionTasks() {
-    Set<Callable<Object>> evictorTaskSet = new HashSet<Callable<Object>>();
-    int threadsAvailable = getEvictorThreadPool().getCorePoolSize();
+  private Set<RegionEvictorTask> createRegionEvictionTasks() {
+    ThreadPoolExecutor pool = getEvictorThreadPool();
+    if (pool == null) {
+      return Collections.emptySet();
+    }
+    int threadsAvailable = pool.getCorePoolSize();
+    if (allRegionList.isEmpty()) {
+      return Collections.emptySet();
+    }
-    if (allRegionList.isEmpty()) {
-      return evictorTaskSet;
-    }
+    Set<RegionEvictorTask> evictorTaskSet = new HashSet<>();
-        Callable<Object> task = new RegionEvictorTask(regionList, this, bytesToEvictPerTask);
+        RegionEvictorTask task = new RegionEvictorTask(regionList, this, bytesToEvictPerTask);
-      Iterator iterator = evictorTaskSet.iterator();
-      while (iterator.hasNext()) {
-        RegionEvictorTask regionEvictorTask = (RegionEvictorTask) iterator.next();
+      for (RegionEvictorTask regionEvictorTask : evictorTaskSet) {
-    Iterator iterator = evictorTaskSet.iterator();
-    while (iterator.hasNext()) {
-      RegionEvictorTask regionEvictorTask = (RegionEvictorTask) iterator.next();
+    for (RegionEvictorTask regionEvictorTask : evictorTaskSet) {
-    if (this.isRunning.get() && event.isLocal()) {
+    if (isRunning() && event.isLocal()) {
-                  for (Callable<Object> task : createRegionEvictionTasks()) {
-                    submitRegionEvictionTask(task);
+                  for (RegionEvictorTask task : createRegionEvictionTasks()) {
+                    executeInThreadPool(task);
-                  HeapEvictor.this.evictorThreadPool.submit(this);
+                  executeInThreadPool(this);
-                  HeapEvictor.this.evictorThreadPool.submit(this);
+                  executeInThreadPool(this);
-        this.evictorThreadPool.execute(evictionManagerTask);
+        executeInThreadPool(evictionManagerTask);
-    getEvictorThreadPool().shutdownNow();
-    isRunning.set(false);
+    if (isRunning.compareAndSet(true, false)) {
+      evictorThreadPool.shutdownNow();
+    }
-  public ArrayList testOnlyGetSizeOfTasks() {
-    if (isRunning.get())
+  public boolean isRunning() {
+    return isRunning.get();
+  }
+
+  public ArrayList<Integer> testOnlyGetSizeOfTasks() {
+    if (isRunning())

MOV31 MOV31 INS74 INS83 UPD42 INS8 UPD74 MOV25 MOV60 MOV78 UPD42 MOV44 INS8 UPD42 INS8 UPD39 INS42 INS8 INS74 MOV43 INS43 INS43 INS54 MOV43 UPD43 MOV43 INS25 INS60 INS70 MOV25 INS25 MOV25 INS41 MOV43 INS43 INS42 INS74 UPD42 MOV42 INS8 INS12 UPD42 INS43 INS27 INS8 INS39 MOV59 INS74 INS44 INS42 MOV8 MOV27 MOV8 INS32 MOV32 INS42 INS32 MOV43 MOV21 INS44 INS8 INS42 INS42 MOV32 INS42 INS33 INS41 UPD42 INS32 MOV43 INS43 INS42 INS14 INS70 MOV43 INS42 INS42 UPD42 MOV42 INS9 INS9 INS42 INS43 INS42 INS25 INS32 INS42 INS42 INS32 UPD42 MOV42 INS74 INS44 INS42 MOV8 INS42 MOV32 INS8 INS8 UPD42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 MOV60 MOV25 MOV25 MOV21 MOV21 MOV25 INS60 INS21 INS21 INS42 UPD42 INS42 INS53 MOV43 INS83 MOV43 INS59 INS32 INS32 INS42 UPD42 UPD42 MOV42 INS42 INS14 INS42 INS42 MOV22 INS42 MOV9 MOV43 INS1 INS31 MOV78 INS83 INS39 INS42 MOV8 MOV25 MOV27 MOV8 INS54 INS8 INS12 MOV25 MOV21 MOV51 INS25 MOV44 INS8 MOV32 INS8 MOV25 INS21 INS32 MOV43 INS42 INS52 INS42 UPD42 DEL43 DEL42 DEL43 DEL74 DEL8 DEL42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL60 DEL39 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL8 DEL8 DEL12 DEL54 DEL83 DEL42 DEL1 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8