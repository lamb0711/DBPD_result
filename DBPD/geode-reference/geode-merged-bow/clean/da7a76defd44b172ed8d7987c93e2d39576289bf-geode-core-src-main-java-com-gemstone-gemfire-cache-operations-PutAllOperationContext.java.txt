Merge branch 'develop' into feature/GEODE-17-2

-import java.io.Serializable;
-import java.util.AbstractCollection;
-import java.util.AbstractSet;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.Set;
-import java.util.Map.Entry;
-import com.gemstone.gemfire.internal.cache.CachedDeserializable;
-import com.gemstone.gemfire.internal.cache.Token;
+import com.gemstone.gemfire.cache.operations.internal.UpdateOnlyMap;
-  
-  /**
-   * This map only allows updates. No creates or removes.
-   * It was adapted from UnmodifiableMap in the jdk's Collections class.
-   * It was added to fix bug 51604.
-   * It also make sure that customers do not see Token.INVALID and
-   * CachedDeserializable to fix bug 51625.
-   * @author dschneider
-   */
-  private static class UpdateOnlyMap implements Map, Serializable {
-    private static final long serialVersionUID = -1034234728574286014L;
-
-    private final Map m;
-
-    UpdateOnlyMap(Map m) {
-      if (m==null) {
-        throw new NullPointerException();
-      }
-      this.m = m;
-    }
-
-    public int size()                        {return m.size();}
-    public boolean isEmpty()                 {return m.isEmpty();}
-    public boolean containsKey(Object key)   {return m.containsKey(key);}
-    public boolean containsValue(Object val) {
-      return values().contains(val);
-    }
-    public Object get(Object key) {
-      return exportValue(m.get(key));
-    }
-    
-    private static Object exportValue(Object v) {
-      Object result;
-      if (v == Token.INVALID) {
-        result = null;
-      } else if (v instanceof CachedDeserializable) {
-        result = ((CachedDeserializable) v).getDeserializedForReading();
-      } else {
-        result = v;
-      }
-      return result;
-    }
-
-    public Object put(Object key, Object value) {
-      if (containsKey(key)) {
-        return m.put(key,  value);
-      } else {
-        throw new UnsupportedOperationException("can not add the key \"" + key + "\"");
-      }
-    }
-    public void putAll(Map m) {
-      if (m != null) {
-        for (Object i: m.entrySet()) {
-          Map.Entry me = (Map.Entry) i;
-          put(me.getKey(), me.getValue());
-        }
-      }
-    }
-    public Object remove(Object key) {
-        throw new UnsupportedOperationException();
-    }
-    public void clear() {
-        throw new UnsupportedOperationException();
-    }
-
-    private transient Set keySet = null;
-    private transient Set entrySet = null;
-    private transient Collection values = null;
-
-    public Set keySet() {
-      if (keySet==null) {
-        keySet = Collections.unmodifiableSet(m.keySet());
-      }
-      return keySet;
-    }
-
-    public Set entrySet() {
-      if (entrySet==null) {
-        entrySet = Collections.unmodifiableSet(new EntrySet());
-      }
-      return entrySet;
-    }
-
-    private final class EntrySet extends AbstractSet {
-      public Iterator iterator() {
-          return new EntryIterator();
-      }
-      @Override
-      public int size() {
-          return m.size();
-      }
-    }
-    private class EntryIterator implements Iterator {
-      private Iterator mIterator = m.entrySet().iterator();
-
-      @Override
-      public boolean hasNext() {
-          return this.mIterator.hasNext();
-      }
-
-      @Override
-      public Object next() {
-        Entry me = (Entry) this.mIterator.next();
-        return new ExportableEntry(me);
-      }
-
-      @Override
-      public void remove() {
-        throw new UnsupportedOperationException();
-      }
-    }
-    private static class ExportableEntry implements Map.Entry {
-      private final Map.Entry e;
-
-      ExportableEntry(Map.Entry e) {
-        this.e = e;
-      }
-      public Object getKey() {
-        return this.e.getKey();
-      }
-      public Object getValue() {
-        return exportValue(this.e.getValue());
-      }
-      public Object setValue(Object value) {
-        return exportValue(this.e.setValue(value));
-      }
-      public int hashCode() {
-        return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());
-      }
-      public boolean equals(Object o) {
-        if (this == o) {
-          return true;
-        }
-        if (!(o instanceof Map.Entry)) {
-          return false;
-        }
-        Entry other = (Entry) o;
-        return eq(getKey(), other.getKey()) && eq(getValue(), other.getValue());
-      }
-      public String toString() {
-        return getKey() + "=" + getValue();
-      }
-    }
-    private static boolean eq(Object o1, Object o2) {
-      return o1==null ? o2==null : o1.equals(o2);
-    }
-    
-    public Collection values() {
-      if (values==null) {
-        values = Collections.unmodifiableCollection(new Values());
-      }
-      return values;
-    }
-    
-    private final class Values extends AbstractCollection {
-      @Override
-      public Iterator iterator() {
-        return new ValueIterator();
-      }
-      @Override
-      public int size() {
-        return m.size();
-      }
-    }
-    private class ValueIterator implements Iterator {
-      private Iterator mIterator = m.values().iterator();
-
-      @Override
-      public boolean hasNext() {
-          return this.mIterator.hasNext();
-      }
-
-      @Override
-      public Object next() {
-        return exportValue(this.mIterator.next());
-      }
-
-      @Override
-      public void remove() {
-        throw new UnsupportedOperationException();
-      }
-    }
-
-    
-    /**
-     * equals is over-ridden to make sure it is based on
-     * the objects we expose and not the internal CachedDeserializables.
-     */
-    @Override
-    public boolean equals(Object o) {
-      if (o == this) {
-        return true;
-      }
-
-      if (!(o instanceof Map)) {
-        return false;
-      }
-      Map m = (Map) o;
-      if (m.size() != size()) {
-        return false;
-      }
-
-      try {
-        Iterator<Entry> i = entrySet().iterator();
-        while (i.hasNext()) {
-          Entry e = i.next();
-          Object key = e.getKey();
-          Object value = e.getValue();
-          if (value == null) {
-            if (!(m.get(key)==null && m.containsKey(key))) {
-              return false;
-            }
-          } else {
-            if (!value.equals(m.get(key))) {
-              return false;
-            }
-          }
-        }
-      } catch (ClassCastException unused) {
-        return false;
-      } catch (NullPointerException unused) {
-        return false;
-      }
-
-      return true;
-  }
-
-  /**
-   * hashCode is over-ridden to make sure it is based on
-   * the objects we expose and not the internal CachedDeserializables.
-   */
-  @Override
-  public int hashCode() {
-    int h = 0;
-    Iterator<Entry> i = entrySet().iterator();
-    while (i.hasNext()) {
-      h += i.next().hashCode();
-    }
-    return h;
-  }
-
-    @Override
-    public String toString() {
-      Iterator<Entry> i = entrySet().iterator();
-      if (! i.hasNext()) {
-        return "{}";
-      }
-      StringBuilder sb = new StringBuilder();
-      sb.append('{');
-      for (;;) {
-        Entry e = i.next();
-        Object key = e.getKey();
-        Object value = e.getValue();
-        sb.append(key   == this ? "(this Map)" : key);
-        sb.append('=');
-        sb.append(value == this ? "(this Map)" : value);
-        if (! i.hasNext()) {
-          return sb.append('}').toString();
-        }
-        sb.append(',').append(' ');
-      }
-    }
-  }

UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL40 DEL43 DEL83 DEL83 DEL40 DEL43 DEL42 DEL59 DEL23 DEL42 DEL40 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL40 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL55 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL9 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL45 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL52 DEL27 DEL45 DEL42 DEL16 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL42 DEL52 DEL27 DEL45 DEL42 DEL16 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL13 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL13 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31 DEL55