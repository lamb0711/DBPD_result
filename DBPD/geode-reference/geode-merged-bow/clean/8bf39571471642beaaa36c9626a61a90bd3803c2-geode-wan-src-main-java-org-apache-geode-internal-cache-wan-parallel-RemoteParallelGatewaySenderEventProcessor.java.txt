Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  protected RemoteParallelGatewaySenderEventProcessor(
-      AbstractGatewaySender sender) {
+
+  protected RemoteParallelGatewaySenderEventProcessor(AbstractGatewaySender sender) {
-  
+
-  protected RemoteParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,  Set<Region> userRegions, int id, int nDispatcher) {
-    super(sender,  userRegions, id, nDispatcher);
+  protected RemoteParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,
+      Set<Region> userRegions, int id, int nDispatcher) {
+    super(sender, userRegions, id, nDispatcher);
-  
+
-        GatewaySenderEventRemoteDispatcher remoteDispatcher = (GatewaySenderEventRemoteDispatcher) this.dispatcher;
+        GatewaySenderEventRemoteDispatcher remoteDispatcher =
+            (GatewaySenderEventRemoteDispatcher) this.dispatcher;
-  
+
-  
+
-   * Returns if corresponding receiver WAN site of this GatewaySender has
-   * GemfireVersion > 7.0.1
+   * Returns if corresponding receiver WAN site of this GatewaySender has GemfireVersion > 7.0.1
-      try {
-        GatewaySenderEventRemoteDispatcher remoteDispatcher = (GatewaySenderEventRemoteDispatcher) disp;
-        // This will create a new connection if no batch has been sent till
-        // now.
-        Connection conn = remoteDispatcher.getConnection(false);
-        if (conn != null) {
-          short remoteSiteVersion = conn.getWanSiteVersion();
-          if (Version.GFE_701.compareTo(remoteSiteVersion) <= 0) {
-            return true;
-          }
+    try {
+      GatewaySenderEventRemoteDispatcher remoteDispatcher =
+          (GatewaySenderEventRemoteDispatcher) disp;
+      // This will create a new connection if no batch has been sent till
+      // now.
+      Connection conn = remoteDispatcher.getConnection(false);
+      if (conn != null) {
+        short remoteSiteVersion = conn.getWanSiteVersion();
+        if (Version.GFE_701.compareTo(remoteSiteVersion) <= 0) {
+          return true;
-      } catch (GatewaySenderException e) {
-        Throwable cause = e.getCause();
-        if (cause instanceof IOException
-            || e instanceof GatewaySenderConfigurationException
-            || cause instanceof ConnectionDestroyedException) {
-          try {
-            int sleepInterval = GatewaySender.CONNECTION_RETRY_INTERVAL;
-            if (logger.isDebugEnabled()) {
-              logger.debug("Sleeping for {} milliseconds", sleepInterval);
-            }
-            Thread.sleep(sleepInterval);
-          } catch (InterruptedException ie) {
-            // log the exception
-            if (logger.isDebugEnabled()){
-              logger.debug(ie.getMessage(), ie);
-            }
-          }
-        }
-        throw e;
+    } catch (GatewaySenderException e) {
+      Throwable cause = e.getCause();
+      if (cause instanceof IOException || e instanceof GatewaySenderConfigurationException
+          || cause instanceof ConnectionDestroyedException) {
+        try {
+          int sleepInterval = GatewaySender.CONNECTION_RETRY_INTERVAL;
+          if (logger.isDebugEnabled()) {
+            logger.debug("Sleeping for {} milliseconds", sleepInterval);
+          }
+          Thread.sleep(sleepInterval);
+        } catch (InterruptedException ie) {
+          // log the exception
+          if (logger.isDebugEnabled()) {
+            logger.debug(ie.getMessage(), ie);
+          }
+        }
+      }
+      throw e;
+    }

UPD66 DEL66