Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-    return ((LocalRegion) this.region).new NonTXEntry(entry);
+    return new CachedEntryWrapper(((LocalRegion) this.region).new NonTXEntry(entry));
+    protected Object currValue; //RegionEntry
-          currentEntry.setMemoryIndexStoreEntry(currKey, (RegionEntry) values);
+          currValue = values;
+        currentEntry.setMemoryIndexStoreEntry(currKey, (RegionEntry) currValue);
-    private long iteratorStartTime;
+    private long iteratorStartTime;    
+  
+  class CachedEntryWrapper {
+
+    private Object key, value;
+
+    public CachedEntryWrapper(LocalRegion.NonTXEntry entry) {
+      this.key = entry.getKey();
+      this.value = entry.getValue();
+    }
+
+    public Object getKey() {
+      return this.key;
+    }
+
+    public Object getValue() {
+      return this.value;
+    }
+
+    public String toString() {
+      return new StringBuilder("CachedEntryWrapper@").append(
+          Integer.toHexString(System.identityHashCode(this))).append(' ')
+          .append(this.key).append(' ').append(this.value).toString();
+    }
+  }
+

INS55 INS23 INS42 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS41 INS43 MOV14 MOV8 INS40 INS7 INS7 INS22 INS22 INS32 INS42 MOV41 INS22 INS32 INS22 INS32 INS52 INS42 INS52 INS42 INS32 INS42 INS8 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS22 MOV21 INS21 INS32 INS42 INS13 INS52 INS42 INS7 UPD42 INS32 INS42 INS22 INS42 INS42 INS32 INS42 INS13 INS52 INS42 INS14 INS42 INS32 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS52 DEL8