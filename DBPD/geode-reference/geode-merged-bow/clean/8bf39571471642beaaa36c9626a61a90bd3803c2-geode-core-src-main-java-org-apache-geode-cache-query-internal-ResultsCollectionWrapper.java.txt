Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of SelectResults that wraps an existing java.util.Collection
- * and optionally adds a specified element type. Considered ordered if the base
- * collection is a List; duplicates allowed unless base collection is a Set.
- * Defaults to modifiable unless set otherwise.
+ * Implementation of SelectResults that wraps an existing java.util.Collection and optionally adds a
+ * specified element type. Considered ordered if the base collection is a List; duplicates allowed
+ * unless base collection is a Set. Defaults to modifiable unless set otherwise.
-public final class ResultsCollectionWrapper
-  implements SelectResults, DataSerializableFixedID {
+public final class ResultsCollectionWrapper implements SelectResults, DataSerializableFixedID {
-  
+
-  private  int limit ; 
-  
-  private final boolean hasLimitIterator ;
-  private final boolean limitImposed ;
-  
+  private int limit;
+
+  private final boolean hasLimitIterator;
+  private final boolean limitImposed;
+
-    validateConstraint(constraint);    
+    validateConstraint(constraint);
-    this.collectionType = new CollectionTypeImpl(getBaseClass(), constraint);    
+    this.collectionType = new CollectionTypeImpl(getBaseClass(), constraint);
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-  
+
-    validateConstraint(constraint);    
+    validateConstraint(constraint);
-    this.limitImposed = false;    
+    this.limitImposed = false;
-        throw new IllegalArgumentException(LocalizedStrings.ResultsCollectionWrapper_CONSTRAINT_CANNOT_BE_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.ResultsCollectionWrapper_CONSTRAINT_CANNOT_BE_NULL.toLocalizedString());
-        throw new IllegalArgumentException(LocalizedStrings.ResultsCollectionWrapper_CONSTRAINT_CLASS_MUST_BE_PUBLIC.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.ResultsCollectionWrapper_CONSTRAINT_CLASS_MUST_BE_PUBLIC
+              .toLocalizedString());
-    if (!elementType.resolveClass().isInstance(obj)) { 
-        throw new InternalGemFireError(
-          LocalizedStrings.
-            ResultsCollectionWrapper_CONSTRAINT_VIOLATION_0_IS_NOT_A_1
-            .toLocalizedString( new Object[] { 
-            obj.getClass().getName(), elementType})); }
+    if (!elementType.resolveClass().isInstance(obj)) {
+      throw new InternalGemFireError(
+          LocalizedStrings.ResultsCollectionWrapper_CONSTRAINT_VIOLATION_0_IS_NOT_A_1
+              .toLocalizedString(new Object[] {obj.getClass().getName(), elementType}));
+    }
-    if (!this.collectionType.equals(((SelectResults)obj).getCollectionType())) {
+    if (!this.collectionType.equals(((SelectResults) obj).getCollectionType())) {
-  ///java.util.Collection interface
+  /// java.util.Collection interface
-    //    checkConstraint(o);
+    // checkConstraint(o);
-    //    boolean changed = false;
-    //    Iterator i = c.iterator();
-    //    while (i.hasNext())
-    //      checkConstraint(i.next());
-    //    changed |= this.base.addAll(c);
-    //    return changed;
+    // boolean changed = false;
+    // Iterator i = c.iterator();
+    // while (i.hasNext())
+    // checkConstraint(i.next());
+    // changed |= this.base.addAll(c);
+    // return changed;
-    //Asif: If the number of elements in Collection is more than limit, size is 
+    // Asif: If the number of elements in Collection is more than limit, size is
-    }
-    else {
+    } else {
-    }    
+    }
-    if(this.hasLimitIterator) {
-      return new LimitIterator();      
-    }else {
+    if (this.hasLimitIterator) {
+      return new LimitIterator();
+    } else {
-    /*if( this.limit > -1) {
-      throw new UnsupportedOperationException("Clearing the SelectResults not allowed as  the query result is constrained by LIMIT");
-    }*/
+    /*
+     * if( this.limit > -1) { throw new
+     * UnsupportedOperationException("Clearing the SelectResults not allowed as  the query result is constrained by LIMIT"
+     * ); }
+     */
-  
+
-   *Asif: May throw ConcurrentModificationException 
+   * Asif: May throw ConcurrentModificationException
-      //Keith: Optimize case where contains is false, avoids iteration
+      // Keith: Optimize case where contains is false, avoids iteration
-      if(!peak) {
+      if (!peak) {
-    }
-    else {
+    } else {
-  
+
-    }
-    else {
+    } else {
-  
- // Asif: May throw ConucrrentModificationException
+
+  // Asif: May throw ConucrrentModificationException
-     * if( this.limit > -1) { throw new UnsupportedOperationException("Removal
-     * from the SelectResults not allowed as the query result is constrained by
-     * LIMIT"); }
+     * if( this.limit > -1) { throw new UnsupportedOperationException("Removal from the
+     * SelectResults not allowed as the query result is constrained by LIMIT"); }
-    }
-    else {
+    } else {
-     * if( this.limit > -1) { throw new UnsupportedOperationException("Removal
-     * from the SelectResults not allowed as the query result is constrained by
-     * LIMIT"); }
+     * if( this.limit > -1) { throw new UnsupportedOperationException("Removal from the
+     * SelectResults not allowed as the query result is constrained by LIMIT"); }
-    }
-    else {
+    } else {
-     * if( this.limit > -1) { throw new
-     * UnsupportedOperationException("Modification of the SelectResults not
-     * allowed as the query result is constrained by LIMIT"); }
+     * if( this.limit > -1) { throw new UnsupportedOperationException("Modification of the
+     * SelectResults not allowed as the query result is constrained by LIMIT"); }
-    }
-    else {
+    } else {
-        while (idx < len && itr.hasNext()) {
-            arr[idx++] = itr.next();
+      while (idx < len && itr.hasNext()) {
+        arr[idx++] = itr.next();
+      }
+      if (!itr.hasNext()) {
+        if (idx == len)
+          return arr;
+        // otherwise have to trim
+        return Arrays.copyOf(arr, idx, Object[].class);
+      }
+      // otherwise, have to grow
+      int newcap = ((arr.length / 2) + 1) * 3;
+      if (newcap < arr.length) {
+        // overflow
+        if (arr.length < Integer.MAX_VALUE) {
+          newcap = Integer.MAX_VALUE;
+        } else {
+          throw new OutOfMemoryError("required array size too large");
-        if (!itr.hasNext()) {
-            if (idx == len) return arr;
-            // otherwise have to trim
-            return Arrays.copyOf(arr, idx, Object[].class);
-        }
-        // otherwise, have to grow
-        int newcap = ((arr.length/2)+1)*3;
-        if (newcap < arr.length) {
-            // overflow
-            if (arr.length < Integer.MAX_VALUE) {
-                newcap = Integer.MAX_VALUE;
-            }
-            else {
-                throw new OutOfMemoryError("required array size too large");
-            }
-        }
-        arr = Arrays.copyOf(arr, newcap, Object[].class);
-        len = newcap;
+      }
+      arr = Arrays.copyOf(arr, newcap, Object[].class);
+      len = newcap;
-    Object[] arr = (a.length >= len ? a :
-                    (Object[])Array.newInstance(aType.getComponentType(), len));
+    Object[] arr =
+        (a.length >= len ? a : (Object[]) Array.newInstance(aType.getComponentType(), len));
-        while (idx < len && itr.hasNext()) {
-            arr[idx++] = itr.next();
+      while (idx < len && itr.hasNext()) {
+        arr[idx++] = itr.next();
+      }
+      if (!itr.hasNext()) {
+        if (idx == len)
+          return arr;
+        if (arr == a) {
+          // orig array -> null terminate
+          a[idx] = null;
+          return a;
+        } else {
+          // have to trim
+          return Arrays.copyOf(arr, idx, aType);
-        if (!itr.hasNext()) {
-            if (idx == len) return arr;
-            if (arr == a) {
-                // orig array -> null terminate
-                a[idx] = null;
-                return a;
-            }
-            else {
-                // have to trim
-                return Arrays.copyOf(arr, idx, aType);
-            }
+      }
+      // otherwise, have to grow
+      int newcap = ((arr.length / 2) + 1) * 3;
+      if (newcap < arr.length) {
+        // overflow
+        if (arr.length < Integer.MAX_VALUE) {
+          newcap = Integer.MAX_VALUE;
+        } else {
+          throw new OutOfMemoryError("required array size too large");
-        // otherwise, have to grow
-        int newcap = ((arr.length/2)+1)*3;
-        if (newcap < arr.length) {
-            // overflow
-            if (arr.length < Integer.MAX_VALUE) {
-                newcap = Integer.MAX_VALUE;
-            }
-            else {
-                throw new OutOfMemoryError("required array size too large");
-            }
-        }
-        arr = Arrays.copyOf(arr, newcap, aType);
-        len = newcap;
+      }
+      arr = Arrays.copyOf(arr, newcap, aType);
+      len = newcap;
+
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-        }
-        else {
-          ListIterator li = ((List)this.base).listIterator(this.base.size());
+        } else {
+          ListIterator li = ((List) this.base).listIterator(this.base.size());
-          returnList = (List)this.base;
+          returnList = (List) this.base;
-      }
-      else {
+      } else {
-    }
-    else {
-      return this.base instanceof List ? (List)this.base : new ArrayList(
-          this.base);
+    } else {
+      return this.base instanceof List ? (List) this.base : new ArrayList(this.base);
-        returnSet = (Set)this.base;
-      }
-      else {
+        returnSet = (Set) this.base;
+      } else {
-    }
-    else {
-      return this.base instanceof Set ? (Set)this.base : new HashSet(this.base);
+    } else {
+      return this.base instanceof Set ? (Set) this.base : new HashSet(this.base);
-    this.collectionType = new CollectionTypeImpl(getBaseClass(),
-        elementType);
+    this.collectionType = new CollectionTypeImpl(getBaseClass(), elementType);
-  
- // Asif : If the underlying collection is a ordered
+
+  // Asif : If the underlying collection is a ordered
-  
-  
+
+
-    * Writes the state of this object as primitive data to the given
-   * <code>DataOutput</code>.
+   * Writes the state of this object as primitive data to the given <code>DataOutput</code>.
-   * @throws IOException
-   *         A problem occurs while writing to <code>out</code>
+   * @throws IOException A problem occurs while writing to <code>out</code>
-      InternalDataSerializer.writeSet((Set)this.base, out);
-    }
-    else {
+      InternalDataSerializer.writeSet((Set) this.base, out);
+    } else {
-  
+
-   * Reads the state of this object as primitive data from the given
-   * <code>DataInput</code>. 
+   * Reads the state of this object as primitive data from the given <code>DataInput</code>.
-   * @throws IOException
-   *         A problem occurs while reading from <code>in</code>
-   * @throws ClassNotFoundException
-   *         A class could not be loaded while reading from
-   *         <code>in</code> 
+   * @throws IOException A problem occurs while reading from <code>in</code>
+   * @throws ClassNotFoundException A class could not be loaded while reading from <code>in</code>
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
-      boolean isBagSetView = in.readBoolean();
-      if (isBagSetView) {
-        this.base = (Set)InternalDataSerializer.readSet(in);
-      }
-      else {
-        this.base = (Collection)DataSerializer.readObject(in);
-      }
-      this.collectionType = (CollectionType)DataSerializer.readObject(in);
-      this.modifiable = in.readBoolean();
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    boolean isBagSetView = in.readBoolean();
+    if (isBagSetView) {
+      this.base = (Set) InternalDataSerializer.readSet(in);
+    } else {
+      this.base = (Collection) DataSerializer.readObject(in);
-    
+    this.collectionType = (CollectionType) DataSerializer.readObject(in);
+    this.modifiable = in.readBoolean();
+  }
+
-   * Abstract the base class to Set if it implements Set
-   * (instead of using the concrete class as the type).
-   * Fix for #41249: Prevents the class ResultsBag.SetView from being
-   * serialized to an older version client.
+   * Abstract the base class to Set if it implements Set (instead of using the concrete class as the
+   * type). Fix for #41249: Prevents the class ResultsBag.SetView from being serialized to an older
+   * version client.
-   * This kind of abstraction could be done in the future for
-   * Lists, etc., as well, if desired, but there is no requirement for this
-   * at this time
+   * This kind of abstraction could be done in the future for Lists, etc., as well, if desired, but
+   * there is no requirement for this at this time
-    if (this.base instanceof Ordered)
-    {
+    if (this.base instanceof Ordered) {
-    }else if (this.base instanceof TreeSet) {
+    } else if (this.base instanceof TreeSet) {
-    }    
-    else if (this.base instanceof Set) {
+    } else if (this.base instanceof Set) {
-    
+
-      }
-      else {
+      } else {
-      }
-      else {
+      } else {
-  
-  public void setKeepSerialized(boolean keepSerialized){
-    if(base instanceof EntriesSet){
-      ((EntriesSet)base).setKeepSerialized(keepSerialized);
+
+  public void setKeepSerialized(boolean keepSerialized) {
+    if (base instanceof EntriesSet) {
+      ((EntriesSet) base).setKeepSerialized(keepSerialized);
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66