add class LuceneIndexImpl and its subclasses
and fixed TopEntriesFuncionCollectorJUnitTest

+import java.util.Collection;
-import java.util.Set;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.execute.RegionFunctionContext;
+import com.gemstone.gemfire.cache.lucene.internal.filesystem.ChunkKey;
+import com.gemstone.gemfire.cache.lucene.internal.filesystem.File;
+import com.gemstone.gemfire.cache.lucene.internal.repository.IndexRepository;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-/* wrapper of IndexWriter */
-public class LuceneIndexImpl implements LuceneIndex {
+public abstract class LuceneIndexImpl implements LuceneIndex {
+  static private final boolean CREATE_CACHE = Boolean.getBoolean("lucene.createCache");
+  static private final boolean USE_FS = Boolean.getBoolean("lucene.useFileSystem");
+  
+  protected HashSet<String> searchableFieldNames = new HashSet<String>();
+  protected HashSet<String> searchablePDXFieldNames = new HashSet<String>();
+  
-  HashSet<String> searchableFieldNames;
+  Region<String, File> fileRegion;
+  Region<ChunkKey, byte[]> chunkRegion;
-  HashSet<String> searchablePDXFieldNames;
-  
+  protected String indexName;
+  protected String regionPath;
+  protected boolean hasInitialized = false;
+
-    // TODO Auto-generated method stub
-    return null;
+    return this.indexName;
-  public String getRegionName() {
-    // TODO Auto-generated method stub
-    return null;
+  public String getRegionPath() {
+    return this.regionPath;
+  }
+  
+  protected void addSearchableField(String field) {
+    searchableFieldNames.add(field);
+  }
+  
+  protected void addSearchablePDXField(String field) {
+    searchablePDXFieldNames.add(field);
-    // TODO Auto-generated method stub
-    return null;
-  }
-
-  public void initialize() {
-    // TODO Auto-generated method stub
-    
-  }
-
-  public void close() {
-    // TODO Auto-generated method stub
-    
+    String[] fieldNames = new String[searchableFieldNames.size()];
+    return searchableFieldNames.toArray(fieldNames);
+  public String[] getPDXFieldNames() {
+    String[] pdxFieldNames = new String[searchablePDXFieldNames.size()];;
+    return searchablePDXFieldNames.toArray(pdxFieldNames);
+  }
+  
+  @Override
+    // Will do that later: Gester
+    return null;
+  }
+
+  @Override
+  public Collection<IndexRepository> getRepository(RegionFunctionContext ctx) {

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS83 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS74 INS83 INS74 INS74 INS59 INS74 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 MOV78 MOV43 MOV43 UPD42 UPD83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS44 MOV78 MOV5 UPD42 INS78 INS83 INS5 INS42 INS8 INS78 INS83 INS74 INS42 INS44 MOV8 INS42 INS32 INS42 INS32 INS43 INS43 UPD42 INS14 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 INS42 INS43 INS43 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS21 INS43 INS42 INS21 INS60 INS41 INS42 INS43 INS85 INS60 INS20 INS41 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 MOV74 INS42 INS42 MOV74 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS22 INS22 INS42 INS32 INS42 INS32 INS5 INS59 INS32 INS42 INS5 INS59 INS32 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 DEL33 DEL33 DEL42 DEL39