GEODE-8205: feature flag unsupported Redis commands (#5185)

- In order to enable unsupported Redis commands, set the Java
  system parameter `enable-unsupported-redis-commands=true`.
- The list of un/supported commands can be seen in `RedisCommandType`.

* Introduce RedisClusterStartupRule

Removes boiler plate code for starting a Redis server. By default starts
on an ephemeral port.
- Expose getRedisPort()
- Expose setEnableUnsupported()

Authored-by: Jens Deppe <jdeppe@vmware.com>
Co-authored-by: john Hutchison <hutchisonjo@vmware.com>
- * command. It provides access to the {@link RegionProvider} and anything
- * else an executing {@link Command} may need.
+ * command. It provides access to the {@link RegionProvider} and anything else an executing {@link
+ * Command} may need.
+  private static final boolean RUN_UNSUPPORTED_COMMANDS = true;
-    if (isAuthenticated) {
-      if (command.isOfType(RedisCommandType.SHUTDOWN)) {
-        this.server.shutdown();
-        return;
-      }
-      response = command.execute(this);
-
-    } else if (command.isOfType(RedisCommandType.AUTH)) {
-      response = command.execute(this);
-    } else {
-      response = RedisResponse.error(RedisConstants.ERROR_NOT_AUTH);
+    if (!isAuthenticated) {
+      response = handleUnAuthenticatedCommand(command);
+      writeToChannel(response);
+      return;
-    logResponse(response);
+    if (!(command.isSupported() || allowUnsupportedCommands())) {
+      writeToChannel(RedisResponse.error(RedisConstants.ERROR_UNSUPPORTED_COMMAND));
+      return;
+    }
+    if (command.isOfType(RedisCommandType.SHUTDOWN)) {
+      this.server.shutdown();
+      return;
+    }
+
+    response = command.execute(this);
+
+    logResponse(response);
+  private boolean allowUnsupportedCommands() {
+    return this.server.allowUnsupportedCommands();
+  }
+
+
+  private RedisResponse handleUnAuthenticatedCommand(Command command) {
+    RedisResponse response;
+    if (command.isOfType(RedisCommandType.AUTH)) {
+      response = command.execute(this);
+    } else {
+      response = RedisResponse.error(RedisConstants.ERROR_NOT_AUTH);
+    }
+    return response;
+  }
+
+

INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 UPD66 INS42 INS9 INS25 MOV25 MOV21 INS41 INS42 INS43 INS42 INS60 MOV25 INS41 INS38 INS38 INS8 INS32 INS42 INS43 INS59 INS42 INS42 INS21 INS21 INS41 INS36 INS21 INS41 INS22 INS42 INS42 INS42 INS7 INS32 INS27 INS32 INS52 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 DEL66 DEL42