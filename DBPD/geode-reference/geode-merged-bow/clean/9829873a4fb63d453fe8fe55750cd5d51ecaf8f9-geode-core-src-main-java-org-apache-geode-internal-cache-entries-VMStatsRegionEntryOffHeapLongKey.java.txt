GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-// macros whose definition changes this class:
-// disk: DISK
-// lru: LRU
-// stats: STATS
-// versioned: VERSIONED
-// offheap: OFFHEAP
-// One of the following key macros must be defined:
-// key object: KEY_OBJECT
-// key int: KEY_INT
-// key long: KEY_LONG
-// key uuid: KEY_UUID
-// key string1: KEY_STRING1
-// key string2: KEY_STRING2
+/*
+ * macros whose definition changes this class:
+ *
+ * disk: DISK lru: LRU stats: STATS versioned: VERSIONED offheap: OFFHEAP
+ *
+ * One of the following key macros must be defined:
+ *
+ * key object: KEY_OBJECT key int: KEY_INT key long: KEY_LONG key uuid: KEY_UUID key string1:
+ * KEY_STRING1 key string2: KEY_STRING2
+ */
-  public VMStatsRegionEntryOffHeapLongKey(RegionEntryContext context, long key,
-      @Retained Object value) {
+  // --------------------------------------- common fields ----------------------------------------
+  private static final AtomicLongFieldUpdater<VMStatsRegionEntryOffHeapLongKey> LAST_MODIFIED_UPDATER =
+      AtomicLongFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "lastModified");
+  protected int hash;
+  private HashEntry<Object, Object> nextEntry;
+  @SuppressWarnings("unused")
+  private volatile long lastModified;
+  // --------------------------------------- offheap fields ---------------------------------------
+  /**
+   * All access done using OFF_HEAP_ADDRESS_UPDATER so it is used even though the compiler can not
+   * tell it is.
+   */
+  @SuppressWarnings("unused")
+  @Retained
+  @Released
+  private volatile long offHeapAddress;
+  /**
+   * I needed to add this because I wanted clear to call setValue which normally can only be called
+   * while the re is synced. But if I sync in that code it causes a lock ordering deadlock with the
+   * disk regions because they also get a rw lock in clear. Some hardware platforms do not support
+   * CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync on the
+   * RegionEntry and we will once again be deadlocked. I don't know if we support any of the
+   * hardware platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk
+   * regions.
+   */
+  private static final AtomicLongFieldUpdater<VMStatsRegionEntryOffHeapLongKey> OFF_HEAP_ADDRESS_UPDATER =
+      AtomicLongFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "offHeapAddress");
+  // --------------------------------------- stats fields -----------------------------------------
+  private volatile long lastAccessed;
+  private volatile int hitCount;
+  private volatile int missCount;
+  private static final AtomicIntegerFieldUpdater<VMStatsRegionEntryOffHeapLongKey> HIT_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "hitCount");
+  private static final AtomicIntegerFieldUpdater<VMStatsRegionEntryOffHeapLongKey> MISS_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "missCount");
+  // ----------------------------------------- key code -------------------------------------------
+  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
+  private final long key;
+
+  public VMStatsRegionEntryOffHeapLongKey(final RegionEntryContext context, final long key,
+      @Retained final Object value) {
-  // common code
-  protected int hash;
-  private HashEntry<Object, Object> next;
-  @SuppressWarnings("unused")
-  private volatile long lastModified;
-  private static final AtomicLongFieldUpdater<VMStatsRegionEntryOffHeapLongKey> lastModifiedUpdater =
-      AtomicLongFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "lastModified");
-  /**
-   * All access done using ohAddrUpdater so it is used even though the compiler can not tell it is.
-   */
-  @SuppressWarnings("unused")
-  @Retained
-  @Released
-  private volatile long ohAddress;
-  /**
-   * I needed to add this because I wanted clear to call setValue which normally can only be called
-   * while the re is synced. But if I sync in that code it causes a lock ordering deadlock with the
-   * disk regions because they also get a rw lock in clear. Some hardware platforms do not support
-   * CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync on the
-   * re and we will once again be deadlocked. I don't know if we support any of the hardware
-   * platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk regions.
-   */
-  private final static AtomicLongFieldUpdater<VMStatsRegionEntryOffHeapLongKey> ohAddrUpdater =
-      AtomicLongFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "ohAddress");
-
-  protected void setValueField(@Unretained Object v) {
-    OffHeapRegionEntryHelper.setValue(this, v);
+  protected void setValueField(@Unretained final Object value) {
+    OffHeapRegionEntryHelper.setValue(this, value);
-  public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+  public Object getValueRetain(final RegionEntryContext context, final boolean decompress) {
-    return ohAddrUpdater.get(this);
+    return OFF_HEAP_ADDRESS_UPDATER.get(this);
-  public boolean setAddress(long expectedAddr, long newAddr) {
-    return ohAddrUpdater.compareAndSet(this, expectedAddr, newAddr);
+  public boolean setAddress(final long expectedAddress, long newAddress) {
+    return OFF_HEAP_ADDRESS_UPDATER.compareAndSet(this, expectedAddress, newAddress);
-    // Deadcoded for now; never was working
+    // never implemented
+  @Override
-    return lastModifiedUpdater.get(this);
+    return LAST_MODIFIED_UPDATER.get(this);
-  protected boolean compareAndSetLastModifiedField(long expectedValue, long newValue) {
-    return lastModifiedUpdater.compareAndSet(this, expectedValue, newValue);
+  @Override
+  protected boolean compareAndSetLastModifiedField(final long expectedValue, final long newValue) {
+    return LAST_MODIFIED_UPDATER.compareAndSet(this, expectedValue, newValue);
-  /**
-   * @see HashEntry#getEntryHash()
-   */
+  @Override
-  protected void setEntryHash(int v) {
-    this.hash = v;
-  }
-
-  /**
-   * @see HashEntry#getNextEntry()
-   */
-  public HashEntry<Object, Object> getNextEntry() {
-    return this.next;
-  }
-
-  /**
-   * @see HashEntry#setNextEntry
-   */
-  public void setNextEntry(final HashEntry<Object, Object> n) {
-    this.next = n;
-  }
-
-  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
-  // stats code
-  public void updateStatsForGet(boolean hit, long time) {
+  protected void setEntryHash(final int hash) {
+    this.hash = hash;
+  }
+
+  @Override
+  public HashEntry<Object, Object> getNextEntry() {
+    return this.nextEntry;
+  }
+
+  @Override
+  public void setNextEntry(final HashEntry<Object, Object> nextEntry) {
+    this.nextEntry = nextEntry;
+  }
+
+  // ---------------------------------------- stats code ------------------------------------------
+  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
+  @Override
+  public void updateStatsForGet(final boolean isHit, final long time) {
-    if (hit) {
+    if (isHit) {
-  protected void setLastModifiedAndAccessedTimes(long lastModified, long lastAccessed) {
+  protected void setLastModifiedAndAccessedTimes(final long lastModified, final long lastAccessed) {
-  private volatile long lastAccessed;
-  private volatile int hitCount;
-  private volatile int missCount;
-  private static final AtomicIntegerFieldUpdater<VMStatsRegionEntryOffHeapLongKey> hitCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "hitCount");
-  private static final AtomicIntegerFieldUpdater<VMStatsRegionEntryOffHeapLongKey> missCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsRegionEntryOffHeapLongKey.class, "missCount");
-
-  public void setLastAccessed(long lastAccessed) {
+  public void setLastAccessed(final long lastAccessed) {
-    hitCountUpdater.incrementAndGet(this);
+    HIT_COUNT_UPDATER.incrementAndGet(this);
-    missCountUpdater.incrementAndGet(this);
+    MISS_COUNT_UPDATER.incrementAndGet(this);
-    hitCountUpdater.set(this, 0);
-    missCountUpdater.set(this, 0);
+    HIT_COUNT_UPDATER.set(this, 0);
+    MISS_COUNT_UPDATER.set(this, 0);
-  public void txDidDestroy(long currTime) {
-    setLastModified(currTime);
-    setLastAccessed(currTime);
+  public void txDidDestroy(long timeStamp) {
+    setLastModified(timeStamp);
+    setLastAccessed(timeStamp);
+  // ----------------------------------------- key code -------------------------------------------
-  // key code
-  private final long key;
-
-  public boolean isKeyEqual(Object k) {
-    if (k instanceof Long) {
-      return ((Long) k).longValue() == this.key;
+  public boolean isKeyEqual(final Object key) {
+    if (key instanceof Long) {
+      return ((Long) key).longValue() == this.key;

MOV31 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 INS83 INS44 MOV78 UPD42 MOV44 MOV78 INS78 INS78 INS78 INS78 INS78 INS78 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS83 MOV43 INS42 INS83 INS83 INS83 MOV43 UPD42 INS83 INS83 INS83 UPD42 UPD42 INS42 INS42 INS83 INS83 INS42 INS42 INS83 UPD42 INS42 INS42 UPD42 INS83 UPD42 INS83 INS83 INS83 INS83 UPD42 INS83 MOV43 UPD42 UPD66 INS66 UPD66 UPD66 INS66 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL42 DEL67 DEL65 DEL29