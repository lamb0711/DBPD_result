GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

-import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSMemberData;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberData;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
-  GMSMember localAddress;
+  MemberIdentifier localAddress;
-  protected final Map<GMSMember, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
+  protected final Map<MemberIdentifier, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
-  private Set<GMSMember> usedMemberIdentifiers = new HashSet<>();
+  private Set<MemberIdentifier> usedMemberIdentifiers = new HashSet<>();
-  public boolean isOldMembershipIdentifier(GMSMember id) {
+  public boolean isOldMembershipIdentifier(MemberIdentifier id) {
-  public void memberSuspected(GMSMember initiator,
-      GMSMember suspect, String reason) {}
+  public void memberSuspected(MemberIdentifier initiator,
+      MemberIdentifier suspect, String reason) {}
-      for (GMSMember mbr : v.getCrashedMembers()) {
+      for (MemberIdentifier mbr : v.getCrashedMembers()) {
-      for (GMSMember mbr : v.getShutdownMembers()) {
+      for (MemberIdentifier mbr : v.getShutdownMembers()) {
-      List<GMSMember> members = v.getMembers();
-      GMSMember recipient = null;
-      for (GMSMember gmsMbr : members) {
-        if (jgMbr.getUUIDLsbs() == gmsMbr.getUuidLSBs()
-            && jgMbr.getUUIDMsbs() == gmsMbr.getUuidMSBs()
-            && jgMbr.getVmViewId() == gmsMbr.getVmViewId()) {
+      List<MemberIdentifier> members = v.getMembers();
+      MemberIdentifier recipient = null;
+      for (MemberIdentifier gmsMbr : members) {
+        MemberData memberData = gmsMbr.getMemberData();
+        if (jgMbr.getUUIDLsbs() == memberData.getUuidLeastSignificantBits()
+            && jgMbr.getUUIDMsbs() == memberData.getUuidMostSignificantBits()
+            && jgMbr.getVmViewId() == memberData.getVmViewId()) {
-        .getVmKind() == GMSMember.LOCATOR_DM_TYPE)
+        .getVmKind() == MemberIdentifier.LOCATOR_DM_TYPE)
-    GMSMember gmsMember = new GMSMember(jgAddress.getInetAddress(),
+    GMSMemberData gmsMember = new GMSMemberData(jgAddress.getInetAddress(),
-        jgAddress.getUUIDMsbs(), jgAddress.getUUIDLsbs());
-    gmsMember.setMemberWeight((byte) (services.getConfig().getMemberWeight() & 0xff));
-    gmsMember.setNetworkPartitionDetectionEnabled(
-        services.getConfig().getEnableNetworkPartitionDetection());
-    localAddress = gmsMember;
+        jgAddress.getUUIDMsbs(), jgAddress.getUUIDLsbs(),
+        (byte) (services.getConfig().getMemberWeight() & 0xff));
+    localAddress = services.getMemberFactory().create(gmsMember);
-  public void getMessageState(GMSMember target, Map<String, Long> state,
+  public void getMessageState(MemberIdentifier target, Map<String, Long> state,
-  public void waitForMessageState(GMSMember sender, Map<String, Long> state)
+  public void waitForMessageState(MemberIdentifier sender, Map<String, Long> state)
-  public Set<GMSMember> sendUnreliably(GMSMessage msg) {
+  public Set<MemberIdentifier> sendUnreliably(GMSMessage msg) {
-  public Set<GMSMember> send(GMSMessage msg) {
+  public Set<MemberIdentifier> send(GMSMessage msg) {
-  private Set<GMSMember> send(GMSMessage msg, boolean reliably) {
+  private Set<MemberIdentifier> send(GMSMessage msg, boolean reliably) {
-    List<GMSMember> destinations = msg.getRecipients();
+    List<MemberIdentifier> destinations = msg.getRecipients();
-      List<GMSMember> calculatedMembers; // explicit list of members
+      List<MemberIdentifier> calculatedMembers; // explicit list of members
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<MemberIdentifier>();
-          GMSMember m = (GMSMember) v.get(i);
-          calculatedMembers.add((GMSMember) m);
+          MemberIdentifier m = (MemberIdentifier) v.get(i);
+          calculatedMembers.add((MemberIdentifier) m);
-        calculatedMembers = new LinkedList<GMSMember>();
+        calculatedMembers = new LinkedList<MemberIdentifier>();
-          calculatedMembers.add((GMSMember) destinations.get(i));
+          calculatedMembers.add((MemberIdentifier) destinations.get(i));
-      for (GMSMember mbr : calculatedMembers) {
+      for (MemberIdentifier mbr : calculatedMembers) {
-      for (GMSMember mbr : calculatedMembers) {
+      for (MemberIdentifier mbr : calculatedMembers) {
-    Set<GMSMember> result = new HashSet<>();
+    Set<MemberIdentifier> result = new HashSet<>();
-      for (GMSMember d : destinations) {
+      for (MemberIdentifier d : destinations) {
-  Message createJGMessage(GMSMessage gfmsg, JGAddress src, GMSMember dst, short version) {
+  Message createJGMessage(GMSMessage gfmsg, JGAddress src, MemberIdentifier dst, short version) {
-  void writeEncryptedMessage(GMSMessage gfmsg, GMSMember recipient, short version,
+  void writeEncryptedMessage(GMSMessage gfmsg, MemberIdentifier recipient, short version,
-      GMSMember pkMbr = null;
+      MemberIdentifier pkMbr = null;
-  int getRequestId(GMSMessage gfmsg, GMSMember destination, boolean add) {
+  int getRequestId(GMSMessage gfmsg, MemberIdentifier destination, boolean add) {
-    GMSMember m = this.localAddress;
-    m.writeEssentialData(out_stream,
+    MemberIdentifier m = this.localAddress;
+    m.getMemberData().writeEssentialData(out_stream,
-  void setSender(GMSMessage dm, GMSMember m, short ordinal) {
-    GMSMember sender = null;
+  void setSender(GMSMessage dm, MemberIdentifier m, short ordinal) {
+    MemberIdentifier sender = null;
-      GMSMember pkMbr = null;
+      MemberIdentifier pkMbr = null;
-          setPublicKey(pk, (GMSMember) result.getSender());
+          setPublicKey(pk, (MemberIdentifier) result.getSender());
-    GMSMember m = new GMSMember();
-    m.readEssentialData(in, services.getSerializer().createDeserializationContext(in));
+    GMSMemberData info = new GMSMemberData();
+    info.readEssentialData(in, services.getSerializer().createDeserializationContext(in));
+    MemberIdentifier m = services.getMemberFactory().create(info);
-  public GMSMember getMemberID() {
+  public MemberIdentifier getMemberID() {
-  private GMSMember getMemberFromView(GMSMember jgId, short version) {
+  private MemberIdentifier getMemberFromView(MemberIdentifier jgId, short version) {
-            .getVmKind() == GMSMember.ADMIN_ONLY_DM_TYPE)
+            .getVmKind() == MemberIdentifier.ADMIN_ONLY_DM_TYPE)
-    private void recordScheduledSeqno(GMSMember member, long seqno) {
+    private void recordScheduledSeqno(MemberIdentifier member, long seqno) {
-  public Set<GMSMember> send(GMSMessage msg, GMSMembershipView alternateView) {
+  public Set<MemberIdentifier> send(GMSMessage msg, GMSMembershipView alternateView) {
-  public byte[] getPublicKey(GMSMember mbr) {
+  public byte[] getPublicKey(MemberIdentifier mbr) {
-  public void setPublicKey(byte[] publickey, GMSMember mbr) {
+  public void setPublicKey(byte[] publickey, MemberIdentifier mbr) {
-  private HashMap<Integer, GMSMember> requestIdVsRecipients = new HashMap<>();
+  private HashMap<Integer, MemberIdentifier> requestIdVsRecipients = new HashMap<>();
-  GMSMember getRequestedMember(int requestId) {
+  MemberIdentifier getRequestedMember(int requestId) {
-  void addRequestId(int requestId, GMSMember mbr) {
+  void addRequestId(int requestId, MemberIdentifier mbr) {

INS26 INS26 UPD40 INS40 INS40 UPD43 UPD74 UPD74 UPD74 UPD74 UPD74 UPD43 UPD43 UPD74 UPD74 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS60 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD74 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 INS43 INS59 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD43 UPD43 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD74 UPD43 UPD43 MOV11 MOV32 INS42 UPD42 MOV42 UPD42 UPD74 UPD42 UPD43 MOV42 INS42 UPD43 UPD43 INS32 INS42 INS42 UPD43 UPD43 UPD43 UPD42 UPD43 INS60 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS59 UPD40 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD74 UPD43 UPD74 UPD40 UPD42 INS42 INS42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21