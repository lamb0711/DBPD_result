Merge branch 'release/1.0.0-incubating.M3'

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.apache.logging.log4j.Logger;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.i18n.StringId;
-import com.gemstone.gemfire.internal.cache.partitioned.Bucket;
-import com.gemstone.gemfire.internal.cache.partitioned.BucketBackupMessage;
-import com.gemstone.gemfire.internal.cache.partitioned.CreateBucketMessage;
-import com.gemstone.gemfire.internal.cache.partitioned.CreateMissingBucketsTask;
-import com.gemstone.gemfire.internal.cache.partitioned.EndBucketCreationMessage;
-import com.gemstone.gemfire.internal.cache.partitioned.FetchPartitionDetailsMessage;
+import com.gemstone.gemfire.internal.cache.partitioned.*;
-import com.gemstone.gemfire.internal.cache.partitioned.InternalPRInfo;
-import com.gemstone.gemfire.internal.cache.partitioned.InternalPartitionDetails;
-import com.gemstone.gemfire.internal.cache.partitioned.LoadProbe;
-import com.gemstone.gemfire.internal.cache.partitioned.ManageBackupBucketMessage;
-import com.gemstone.gemfire.internal.cache.partitioned.ManageBucketMessage;
-import com.gemstone.gemfire.internal.cache.partitioned.OfflineMemberDetails;
-import com.gemstone.gemfire.internal.cache.partitioned.OfflineMemberDetailsImpl;
-import com.gemstone.gemfire.internal.cache.partitioned.PRLoad;
-import com.gemstone.gemfire.internal.cache.partitioned.PartitionMemberInfoImpl;
-import com.gemstone.gemfire.internal.cache.partitioned.PartitionRegionInfoImpl;
-import com.gemstone.gemfire.internal.cache.partitioned.PartitionedRegionObserverAdapter;
-import com.gemstone.gemfire.internal.cache.partitioned.PartitionedRegionObserverHolder;
-import com.gemstone.gemfire.internal.cache.partitioned.PartitionedRegionRebalanceOp;
-import com.gemstone.gemfire.internal.cache.partitioned.RecoveryRunnable;
-import com.gemstone.gemfire.internal.cache.partitioned.RedundancyLogger;
-import com.gemstone.gemfire.internal.cache.partitioned.RegionAdvisor;
-import com.gemstone.gemfire.i18n.StringId;
+import org.apache.logging.log4j.Logger;
+
+import java.util.*;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
-  
-  private static final boolean DISABLE_CREATE_BUCKET_RANDOMNESS 
-  = Boolean.getBoolean("gemfire.DISABLE_CREATE_BUCKET_RANDOMNESS");
+
+    private static final boolean DISABLE_CREATE_BUCKET_RANDOMNESS
+        = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISABLE_CREATE_BUCKET_RANDOMNESS");
-    "gemfire.partitionedRegionDatastoreDiscoveryTimeout";
+      DistributionConfig.GEMFIRE_PREFIX + "partitionedRegionDatastoreDiscoveryTimeout";
-    TimeUnit.SECONDS.toNanos(Integer.getInteger("gemfire.InsufficientLoggingThrottleTime", 2).intValue());
+      TimeUnit.SECONDS.toNanos(Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "InsufficientLoggingThrottleTime", 2).intValue());
-      // remove uninitialized members for bucket creation
-      this.prRegion.getCache().removeUnInitializedMembers(available);
-        // remove nodes that are not fully initialized
-        this.prRegion.getCache().removeUnInitializedMembers(allStores);
-              || (prRegion.getCancelCriterion().cancelInProgress() != null)) {
+              || (prRegion.getCancelCriterion().isCancelInProgress())) {
-      this.prRegion.getCache().removeUnInitializedMembers(acceptedMembers);
-    if(prRegion.getCancelCriterion().cancelInProgress()  != null || prRegion.isDestroyed()) {
+    if(prRegion.getCancelCriterion().isCancelInProgress() || prRegion.isDestroyed()) {
-   * @since gemfire59poc
+   * @since GemFire 5.9
-   * @since gemfire5.8
+   * @since GemFire 5.8
-   * @since gemfire5.8
+   * @since GemFire 5.8
-   * @since 5.8Beta
+   * @since GemFire 5.8Beta
-      movePrimaries = !Boolean.getBoolean("gemfire.DISABLE_MOVE_PRIMARIES_ON_STARTUP");
+      movePrimaries = !Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISABLE_MOVE_PRIMARIES_ON_STARTUP");
-    if (cache.isUnInitializedMember(cache.getMyId())) {
-      return;
-    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS27 INS27 INS40 INS45 UPD27 MOV27 UPD66 UPD66 UPD66 UPD66 INS40 INS45 MOV32 INS27 UPD42 INS40 INS45 INS27 INS40 INS45 UPD27 MOV27 MOV62 MOV62 INS36 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL45 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL33 DEL36 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL33 DEL27 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25