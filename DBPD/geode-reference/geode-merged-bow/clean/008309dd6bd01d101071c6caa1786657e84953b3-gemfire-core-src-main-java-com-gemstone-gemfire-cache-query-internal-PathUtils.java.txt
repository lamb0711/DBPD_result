Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright Copyright (c) 2000-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * $Id: PathUtils.java,v 1.1 2005/01/27 06:26:33 vaibhav Exp $
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.query.internal.parse.OQLLexerTokenTypes;
+  
+  /**
+   * Collects all the compiled values in the path , starting from the self at
+   * position 0 in the returned List
+   * 
+   * @param expr
+   * @return List of CompiledValues ( includes the RuntimeIterator)
+   * @throws TypeMismatchException
+   * @throws AmbiguousNameException
+   */
+  public static List<CompiledValue> collectCompiledValuesInThePath(
+      CompiledValue expr, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException {
+    boolean toContinue = true;
+    List<CompiledValue> retList = new ArrayList<CompiledValue>();
+
+    int exprType = expr.getType();
+    while (toContinue) {
+      switch (exprType) {
+      case OQLLexerTokenTypes.RegionPath:
+        retList.add(expr);
+        toContinue = false;
+        break;
+      case OQLLexerTokenTypes.METHOD_INV:
+        retList.add(expr);
+        CompiledOperation operation = (CompiledOperation) expr;
+        expr = operation.getReceiver(null/*
+                                          * pass the ExecutionContext as null,
+                                          * thus never implicitly resolving to
+                                          * RuntimeIterator
+                                          */);
+        if (expr == null) {
+          expr = operation;
+          toContinue = false;
+        }
+        break;
+      case CompiledValue.PATH:
+        retList.add(expr);
+        expr = ((CompiledPath) expr).getReceiver();
+        break;
+      case OQLLexerTokenTypes.ITERATOR_DEF:
+        retList.add(expr);
+        toContinue = false;
+        break;
+      case OQLLexerTokenTypes.TOK_LBRACK:
+        retList.add(expr);
+        expr = ((CompiledIndexOperation) expr).getReceiver();
+        break;
+      case OQLLexerTokenTypes.Identifier:
+        CompiledID cid = (CompiledID) expr;
+        expr = context.resolve(cid.getId());
+        break;
+      default:
+        toContinue = false;
+        break;
+      }
+
+      if (toContinue)
+        exprType = expr.getType();
+    }
+    return retList;
+  }

INS26 INS40 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS61 INS41 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS74 INS59 INS39 INS59 INS42 INS8 INS42 INS42 INS9 INS43 INS43 INS42 INS14 INS42 INS32 INS50 INS25 INS42 INS42 INS74 INS42 INS42 INS42 INS49 INS21 INS21 INS10 INS49 INS21 INS60 INS21 INS25 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS60 INS21 INS10 INS49 INS21 INS10 INS42 INS21 INS43 INS43 INS40 INS32 INS7 INS40 INS32 INS43 INS59 INS7 INS27 INS8 INS40 INS32 INS7 INS40 INS32 INS7 INS40 INS32 INS7 INS40 INS43 INS59 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS32 INS42 INS9 INS42 INS32 INS43 INS42 INS42 INS42 INS33 INS7 INS7 INS36 INS42 INS36 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS11 INS11 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42