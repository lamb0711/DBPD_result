Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is an admin (meta) region used by the client health monitoring service
- * to publish the client health details to the cache-server.
+ * This is an admin (meta) region used by the client health monitoring service to publish the client
+ * health details to the cache-server.
-   * This is an accessor method used to get the reference of this region. If
-   * this region is not yet initialized, then it attempts to create it.
+   * This is an accessor method used to get the reference of this region. If this region is not yet
+   * initialized, then it attempts to create it.
-    if (currentInstance != null && currentInstance.getCache() == c 
-        && !c.isClosed()) {
+    if (currentInstance != null && currentInstance.getCache() == c && !c.isClosed()) {
-   * @param cache
-   *                The current GemFire Cache
+   * @param cache The current GemFire Cache
-      factory.setEntryTimeToLive(new ExpirationAttributes(
-          ADMIN_REGION_EXPIRY_INTERVAL, ExpirationAction.DESTROY));
+      factory.setEntryTimeToLive(
+          new ExpirationAttributes(ADMIN_REGION_EXPIRY_INTERVAL, ExpirationAction.DESTROY));
-      currentInstance = cache.createVMRegion(ADMIN_REGION_NAME, regionAttrs,
-          internalArgs);
-    }
-    catch (Exception ex) {
-      cache.getLoggerI18n().error(LocalizedStrings.
-        ClientHealthMonitoringRegion_ERROR_WHILE_CREATING_AN_ADMIN_REGION, ex);
+      currentInstance = cache.createVMRegion(ADMIN_REGION_NAME, regionAttrs, internalArgs);
+    } catch (Exception ex) {
+      cache.getLoggerI18n().error(
+          LocalizedStrings.ClientHealthMonitoringRegion_ERROR_WHILE_CREATING_AN_ADMIN_REGION, ex);
-   * This method prepares a CacheListener, responsible for the cleanup of
-   * reference of admin region, upon the cache closure.
+   * This method prepares a CacheListener, responsible for the cleanup of reference of admin region,
+   * upon the cache closure.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66