GEODE-6696: EntryEvenImpl.offHeapLock created only if off-heap in use (#3581)


+import org.apache.geode.distributed.internal.InternalDistributedSystem;
-    // do nothing
+    this.offHeapLock = null;
+    InternalDistributedSystem ds =
+        (InternalDistributedSystem) region.getCache().getDistributedSystem();
+    if (ds.getOffHeapStore() != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
+    InternalDistributedSystem ds =
+        (InternalDistributedSystem) region.getCache().getDistributedSystem();
+    if (ds.getOffHeapStore() != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
+    if (other.offHeapLock != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
-  public EntryEventImpl(Object key2) {
+  public EntryEventImpl(Object key2, boolean isOffHeap) {
+    if (isOffHeap) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
-  private final Object offHeapLock = new Object();
+  private final Object offHeapLock;
-      try {
+      if (mayHaveOffHeapReferences()) {
-          ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+          try {
+            ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+          } catch (IllegalStateException ignore) {
+            buf.append("OFFHEAP_VALUE_FREED");
+          }
-      } catch (IllegalStateException ignore) {
-        buf.append("OFFHEAP_VALUE_FREED");
+      } else {
+        ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+
-      try {
+      if (mayHaveOffHeapReferences()) {
-          ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+          try {
+            ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+          } catch (IllegalStateException ignore) {
+            buf.append("OFFHEAP_VALUE_FREED");
+          }
-      } catch (IllegalStateException ignore) {
-        buf.append("OFFHEAP_VALUE_FREED");
+      } else {
+        ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+    if (this.offHeapLock == null) {
+      return false;
+    }
+
-    synchronized (this.offHeapLock) {
+    if (mayHaveOffHeapReferences()) {
+      synchronized (this.offHeapLock) {
+        this.offHeapOk = false;
+      }
+    } else {
+

INS26 INS40 INS44 INS21 INS60 INS25 INS60 INS25 INS25 INS39 INS42 INS25 INS25 INS25 INS7 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS8 INS42 INS8 INS8 INS27 INS8 INS32 INS8 INS8 INS22 INS33 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS40 INS33 INS21 INS21 INS21 INS21 INS25 INS25 INS22 INS33 INS41 INS42 MOV51 INS21 INS52 INS42 INS43 INS32 INS42 INS42 INS7 INS7 INS43 INS32 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS8 MOV8 INS32 INS8 MOV8 INS52 INS42 INS9 INS7 INS42 INS32 INS42 INS22 INS14 INS22 INS33 INS42 INS32 INS42 INS22 INS14 INS22 INS33 INS22 INS14 INS22 INS33 INS22 MOV14 INS22 INS33 INS42 INS51 INS42 INS51 INS22 INS9 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS52 INS42 MOV22 INS8 MOV22 INS8 INS52 INS42 INS42 INS42 INS42 MOV54 MOV54 INS21 INS21 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL51 DEL51