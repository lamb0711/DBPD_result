Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.admin.DistributedSystemConfig;
-//import org.apache.geode.admin.ManagedEntity;
+// import org.apache.geode.admin.DistributedSystemConfig;
+// import org.apache.geode.admin.ManagedEntity;
- * The abstract superclass of objects that configure a managed entity
- * such as a GemFire cache server or a distribution locator.
- * It contains configuration state and behavior common to all managed
+ * The abstract superclass of objects that configure a managed entity such as a GemFire cache server
+ * or a distribution locator. It contains configuration state and behavior common to all managed
-public abstract class ManagedEntityConfigImpl
-  implements ManagedEntityConfig {
+public abstract class ManagedEntityConfigImpl implements ManagedEntityConfig {
-  /** The managed entity configured by this object.
+  /**
+   * The managed entity configured by this object.
-   * @see #isReadOnly */
+   * @see #isReadOnly
+   */
-  /////////////////////  Static Methods  /////////////////////
+  ///////////////////// Static Methods /////////////////////
-   * Returns the {@linkplain InetAddress#getCanonicalHostName
-   * canonical name} of the local machine.
+   * Returns the {@linkplain InetAddress#getCanonicalHostName canonical name} of the local machine.
-      IllegalStateException ex2 = new IllegalStateException(LocalizedStrings.ManagedEntityConfigImpl_COULD_NOT_DETERMINE_LOCALHOST.toLocalizedString());
+      IllegalStateException ex2 = new IllegalStateException(
+          LocalizedStrings.ManagedEntityConfigImpl_COULD_NOT_DETERMINE_LOCALHOST
+              .toLocalizedString());
-   * Returns the location of the GemFire product installation.  This
-   * is determined by finding the location of the gemfire jar
-   * and working backwards.
+   * Returns the location of the GemFire product installation. This is determined by finding the
+   * location of the gemfire jar and working backwards.
-      throw new IllegalStateException(LocalizedStrings.ManagedEntityConfigImpl_COULD_NOT_FIND_GEMFIREJAR.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.ManagedEntityConfigImpl_COULD_NOT_FIND_GEMFIREJAR.toLocalizedString());
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a <code>ManagedEntityConfigImpl</code> with the default
-   * configuration.
+   * Creates a <code>ManagedEntityConfigImpl</code> with the default configuration.
-    this.workingDirectory =
-      getCurrentWorkingDirectory().getAbsolutePath(); 
-    this.productDirectory =
-      getGemFireInstallation().getAbsolutePath();
-    this.remoteCommand = null;  // Delegate to AdminDistributedSystem
+    this.workingDirectory = getCurrentWorkingDirectory().getAbsolutePath();
+    this.productDirectory = getGemFireInstallation().getAbsolutePath();
+    this.remoteCommand = null; // Delegate to AdminDistributedSystem
-   * Creates a new <code>ManagedEntityConfigImpl</code> based on the
-   * configuration of a running <code>GemFireVM</code>
+   * Creates a new <code>ManagedEntityConfigImpl</code> based on the configuration of a running
+   * <code>GemFireVM</code>
-    this.productDirectory = vm.getGemFireDir().getAbsolutePath();
+    this.productDirectory = vm.getGeodeHomeDir().getAbsolutePath();
-   * A copy constructor that creates a new
-   * <code>ManagedEntityConfigImpl</code> with the same configuration
-   * as another <code>ManagedEntityConfig</code>.
+   * A copy constructor that creates a new <code>ManagedEntityConfigImpl</code> with the same
+   * configuration as another <code>ManagedEntityConfig</code>.
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Checks to see if this config object is "read only".  If it is,
-   * then an {@link IllegalStateException} is thrown.  It should be
-   * called by every setter method.
+   * Checks to see if this config object is "read only". If it is, then an
+   * {@link IllegalStateException} is thrown. It should be called by every setter method.
-      throw new IllegalStateException(LocalizedStrings.ManagedEntityConfigImpl_THIS_CONFIGURATION_CANNOT_BE_MODIFIED_WHILE_ITS_MANAGED_ENTITY_IS_RUNNING.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.ManagedEntityConfigImpl_THIS_CONFIGURATION_CANNOT_BE_MODIFIED_WHILE_ITS_MANAGED_ENTITY_IS_RUNNING
+              .toLocalizedString());
-   * Returns whether or not this <code>ManagedEntityConfigImpl</code>
-   * is read-only (can be modified).
+   * Returns whether or not this <code>ManagedEntityConfigImpl</code> is read-only (can be
+   * modified).
-   * Sets the entity that is configured by this config object.  Once
-   * the entity is running, the config object cannot be modified.
+   * Sets the entity that is configured by this config object. Once the entity is running, the
+   * config object cannot be modified.
-   * Notifies any configuration listeners that this configuration has
-   * changed.
+   * Notifies any configuration listeners that this configuration has changed.
-   * @throws IllegalStateException
-   *         If this config is not valid
+   * @throws IllegalStateException If this config is not valid
-      throw new IllegalStateException(LocalizedStrings.ManagedEntityConfigImpl_INVALID_HOST_0.toLocalizedString(this.host));
+      throw new IllegalStateException(
+          LocalizedStrings.ManagedEntityConfigImpl_INVALID_HOST_0.toLocalizedString(this.host));
-    ManagedEntityConfigImpl clone =
-      (ManagedEntityConfigImpl) super.clone();
+    ManagedEntityConfigImpl clone = (ManagedEntityConfigImpl) super.clone();
-    
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66