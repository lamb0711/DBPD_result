Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.cache.tier.Acceptor;
-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.SecurityManager;
-import org.apache.geode.security.server.Authenticator;
-
+import java.net.InetSocketAddress;
+import org.apache.geode.cache.IncompatibleVersionException;
+import org.apache.geode.cache.client.PoolFactory;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.ServerLocation;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.tier.Acceptor;
+import org.apache.geode.internal.cache.tier.CachedRegionHelper;
+import org.apache.geode.internal.cache.tier.CommunicationMode;
+import org.apache.geode.internal.security.SecurityService;
+
-  private final ClientProtocolMessageHandler messageHandler;
-  private final SecurityManager securityManager;
-  private final Authenticator authenticator;
+  private final ClientProtocolProcessor protocolPipeline;
+  private boolean cleanedUp;
+  private ClientProxyMembershipID clientProxyMembershipID;
-  public GenericProtocolServerConnection(Socket s, InternalCache c, CachedRegionHelper helper,
+  public GenericProtocolServerConnection(Socket socket, InternalCache c, CachedRegionHelper helper,
-      byte communicationMode, Acceptor acceptor, ClientProtocolMessageHandler newClientProtocol,
-      SecurityService securityService, Authenticator authenticator) {
-    super(s, c, helper, stats, hsTimeout, socketBufferSize, communicationModeStr, communicationMode,
-        acceptor, securityService);
-    securityManager = securityService.getSecurityManager();
-    this.messageHandler = newClientProtocol;
-    this.authenticator = authenticator;
+      byte communicationMode, Acceptor acceptor, ClientProtocolProcessor clientProtocolProcessor,
+      SecurityService securityService) {
+    super(socket, c, helper, stats, hsTimeout, socketBufferSize, communicationModeStr,
+        communicationMode, acceptor, securityService);
+    this.protocolPipeline = clientProtocolProcessor;
+
+    setClientProxyMembershipId();
+
+    doHandShake(CommunicationMode.ProtobufClientServerProtocol.getModeNumber(), 0);
-      if (!authenticator.isAuthenticated()) {
-        authenticator.authenticate(inputStream, outputStream, securityManager);
-      } else {
-        messageHandler.receiveMessage(inputStream, outputStream,
-            new MessageExecutionContext(this.getCache(), authenticator.getAuthorizer()));
-      }
+      protocolPipeline.processMessage(inputStream, outputStream);
-    } catch (IOException e) {
+      logger.debug("Encountered EOF while processing message: {}", e);
+    } catch (IOException | IncompatibleVersionException e) {
+    } finally {
+      acceptor.getClientHealthMonitor().receivedPing(this.clientProxyMembershipID);
+  private void setClientProxyMembershipId() {
+    ServerLocation serverLocation = new ServerLocation(
+        ((InetSocketAddress) this.getSocket().getRemoteSocketAddress()).getHostName(),
+        this.getSocketPort());
+    DistributedMember distributedMember = new InternalDistributedMember(serverLocation);
+    // no handshake for new client protocol.
+    clientProxyMembershipID = new ClientProxyMembershipID(distributedMember);
+  }
+
+  @Override
+  public boolean cleanup() {
+    synchronized (this) {
+      if (!cleanedUp) {
+        cleanedUp = true;
+        protocolPipeline.close();
+      }
+    }
+    return super.cleanup();
+  }
+
-    // no handshake for new client protocol.
+    ClientHealthMonitor clientHealthMonitor = getAcceptor().getClientHealthMonitor();
+    clientHealthMonitor.registerClient(clientProxyMembershipID);
+    clientHealthMonitor.addConnection(clientProxyMembershipID, this);
+
+  protected int getClientReadTimeout() {
+    return PoolFactory.DEFAULT_READ_TIMEOUT;
+  }
+
+  @Override

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 UPD43 MOV83 INS39 INS59 UPD83 MOV83 UPD43 MOV43 MOV59 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD43 UPD42 INS21 INS60 INS60 INS21 INS42 INS51 INS41 INS60 INS21 INS21 INS42 INS41 UPD42 UPD42 INS32 INS32 INS8 INS43 INS59 INS43 INS59 INS7 INS52 INS8 INS48 INS43 INS59 INS32 INS32 INS40 UPD42 INS42 INS42 INS32 INS34 MOV21 INS21 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS14 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 UPD42 INS40 INS42 INS21 INS84 INS32 INS43 INS32 INS32 INS43 INS42 INS43 INS42 INS38 INS8 INS32 INS42 UPD42 UPD42 INS32 MOV43 INS43 INS32 INS42 INS22 INS42 INS36 INS42 INS52 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS11 INS7 INS32 INS43 INS32 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS52 INS42 DEL23 DEL83 DEL83 DEL43 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL43 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25