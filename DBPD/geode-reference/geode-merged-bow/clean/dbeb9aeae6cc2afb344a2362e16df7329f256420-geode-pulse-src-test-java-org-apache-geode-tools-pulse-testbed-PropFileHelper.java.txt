Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  private String filePath=null;
-  private Properties pr=null;
-  
-  public PropFileHelper(String filePath) throws FileNotFoundException, IOException{
+
+  private String filePath = null;
+  private Properties pr = null;
+
+  public PropFileHelper(String filePath) throws FileNotFoundException, IOException {
-  
+
-    this.pr =pr2;
+    this.pr = pr2;
-  public String[] readValues(String property){
-    return readValues(property,",");
+  public String[] readValues(String property) {
+    return readValues(property, ",");
-  
-  public String[] readValues(String property, String separator){
+
+  public String[] readValues(String property, String separator) {
-    if(value!=null){
+    if (value != null) {
-    }else{
+    } else {
-  
-  public String readKey(String key){
+
+  public String readKey(String key) {
-    if(value!=null)
+    if (value != null)
-    else return value;
+    else
+      return value;
-  
-  public Map<String,String> readObject(String leadingkey){
-    Map<String,String> map = new HashMap<String,String>();
-    String leadingKeyString = leadingkey+"."; 
-    for(Object keyObject : pr.keySet()){
-      String key = (String)keyObject;
+
+  public Map<String, String> readObject(String leadingkey) {
+    Map<String, String> map = new HashMap<String, String>();
+    String leadingKeyString = leadingkey + ".";
+    for (Object keyObject : pr.keySet()) {
+      String key = (String) keyObject;
-      if(key.startsWith(leadingKeyString)){
+      if (key.startsWith(leadingKeyString)) {
-        /* inner object stuff
-        if(checkForMultipleValues){
-          if(innerProp.contains(separator)){
-            String array[] = readValues(key);
-          }
-        }else*/
+        /*
+         * inner object stuff if(checkForMultipleValues){ if(innerProp.contains(separator)){ String
+         * array[] = readValues(key); } }else
+         */
-          //System.out.println("Adding prop with key " + innerProp + " k=" + leadingkey);
+          // System.out.println("Adding prop with key " + innerProp + " k=" + leadingkey);
-        }      
+        }
-    }    
+    }
-  
+
-    
+
-    
+
-    
+
-    for(String topology : topologies){
-      Map<String,String> topologyMap = helper.readObject(topology);
+    for (String topology : topologies) {
+      Map<String, String> topologyMap = helper.readObject(topology);
-    
+

