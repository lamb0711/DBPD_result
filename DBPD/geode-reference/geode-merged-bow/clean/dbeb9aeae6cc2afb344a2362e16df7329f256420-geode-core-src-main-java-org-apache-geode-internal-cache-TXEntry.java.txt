Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class TXEntry implements Region.Entry
-{
+public class TXEntry implements Region.Entry {
-   * Create an Entry given a key. The returned Entry may or may not be
-   * destroyed
+   * Create an Entry given a key. The returned Entry may or may not be destroyed
-    this(localRegion, key, tx, true/*rememberReads*/);
+    this(localRegion, key, tx, true/* rememberReads */);
+
-  protected void checkTX()
-  {
-    // Protect against the case where this instance was handed to a different thread w/ or w/o a transaction
-    // Protect against the case where the transaction associated with this entry is not in progress 
-    if (! this.myTX.isInProgressAndSameAs(this.localRegion.getTXState())) {
-      throw new IllegalStateException(LocalizedStrings.LocalRegion_REGIONENTRY_WAS_CREATED_WITH_TRANSACTION_THAT_IS_NO_LONGER_ACTIVE.toLocalizedString(this.myTX.getTransactionId()));
-    } 
+  protected void checkTX() {
+    // Protect against the case where this instance was handed to a different thread w/ or w/o a
+    // transaction
+    // Protect against the case where the transaction associated with this entry is not in progress
+    if (!this.myTX.isInProgressAndSameAs(this.localRegion.getTXState())) {
+      throw new IllegalStateException(
+          LocalizedStrings.LocalRegion_REGIONENTRY_WAS_CREATED_WITH_TRANSACTION_THAT_IS_NO_LONGER_ACTIVE
+              .toLocalizedString(this.myTX.getTransactionId()));
+    }
-  public boolean isDestroyed()
-  {
+  public boolean isDestroyed() {
-    }
-    catch (RegionDestroyedException ex) {
+    } catch (RegionDestroyedException ex) {
-    }
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-  public Object getKey()
-  {
+  public Object getKey() {
-  public Object getValue()
-  {
+  public Object getValue() {
-//    Object value = this.localRegion.getDeserialized(this.key, false, this.myTX, this.rememberReads);
-    @Unretained Object value = this.myTX.getDeserializedValue(keyInfo, this.localRegion, false, false, false, null, false,
-      false);
+    // Object value = this.localRegion.getDeserialized(this.key, false, this.myTX,
+    // this.rememberReads);
+    @Unretained
+    Object value = this.myTX.getDeserializedValue(keyInfo, this.localRegion, false, false, false,
+        null, false, false);
-    }
-    else if (Token.isInvalid(value)) {
+    } else if (Token.isInvalid(value)) {
-  public Region getRegion()
-  {
+  public Region getRegion() {
-  public CacheStatistics getStatistics()
-  {
+  public CacheStatistics getStatistics() {
-      throw new StatisticsDisabledException(LocalizedStrings.LocalRegion_STATISTICS_DISABLED_FOR_REGION_0.toLocalizedString(this.localRegion.getFullPath()));
+      throw new StatisticsDisabledException(
+          LocalizedStrings.LocalRegion_STATISTICS_DISABLED_FOR_REGION_0
+              .toLocalizedString(this.localRegion.getFullPath()));
-      public long getLastModifiedTime()
-      {
-        return (getRegion() != null) ? ((LocalRegion) getRegion())
-            .cacheTimeMillis() : System.currentTimeMillis();
+      public long getLastModifiedTime() {
+        return (getRegion() != null) ? ((LocalRegion) getRegion()).cacheTimeMillis()
+            : System.currentTimeMillis();
-      public long getLastAccessedTime()
-      {
-        return (getRegion() != null) ? ((LocalRegion) getRegion())
-            .cacheTimeMillis() : System.currentTimeMillis();
+      public long getLastAccessedTime() {
+        return (getRegion() != null) ? ((LocalRegion) getRegion()).cacheTimeMillis()
+            : System.currentTimeMillis();
-      public long getMissCount()
-      {
+      public long getMissCount() {
-      public long getHitCount()
-      {
+      public long getHitCount() {
-      public float getHitRatio()
-      {
+      public float getHitRatio() {
-      public void resetCounts()
-      {
-      }
+      public void resetCounts() {}
-  public Object getUserAttribute()
-  {
+  public Object getUserAttribute() {
-    }
-    else {
+    } else {
-  public Object setUserAttribute(Object value)
-  {
+  public Object setUserAttribute(Object value) {
-    }
-    else {
+    } else {
-      throw new UnsupportedOperationException(LocalizedStrings.
-          TXEntry_UA_NOT_SUPPORTED_FOR_PR.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.TXEntry_UA_NOT_SUPPORTED_FOR_PR.toLocalizedString());
-  public boolean equals(Object obj)
-  {
+  public boolean equals(Object obj) {
-    TXEntry lre = (TXEntry)obj;
-    return this.keyInfo.getKey().equals(lre.keyInfo.getKey()) && this.getRegion() == lre.getRegion();
+    TXEntry lre = (TXEntry) obj;
+    return this.keyInfo.getKey().equals(lre.keyInfo.getKey())
+        && this.getRegion() == lre.getRegion();
-  public int hashCode()
-  {
+  public int hashCode() {
-   * throws CacheClosedException or EntryDestroyedException if this entry is
-   * destroyed.
+   * throws CacheClosedException or EntryDestroyedException if this entry is destroyed.
-  private void checkEntryDestroyed()
-  {
+  private void checkEntryDestroyed() {
-  private final TXEntryUserAttrState txReadUA(KeyInfo ki)
-  {
+  private final TXEntryUserAttrState txReadUA(KeyInfo ki) {
-    }
-    else {
+    } else {
-  protected final TXEntryUserAttrState txWriteUA(KeyInfo ki)
-  {
+  protected final TXEntryUserAttrState txWriteUA(KeyInfo ki) {
-    }
-    else {
+    } else {
-  public Object setValue(Object arg0)
-  {
+  public Object setValue(Object arg0) {
-  
+

UPD66 DEL66