Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final String SIZE_OF_CLASS_NAME = System
-      .getProperty(DistributionConfig.GEMFIRE_PREFIX + "ObjectSizer.SIZE_OF_CLASS", ReflectionSingleObjectSizer.class.getName());
+  private static final String SIZE_OF_CLASS_NAME =
+      System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "ObjectSizer.SIZE_OF_CLASS",
+          ReflectionSingleObjectSizer.class.getName());
-    
+
-  static
-  {
+  static {
-  
+
-   * Find the size of an object and all objects reachable from it using breadth
-   * first search. This is equivalent to calling
+   * Find the size of an object and all objects reachable from it using breadth first search. This
+   * is equivalent to calling
-  public static long size(Object root) throws IllegalArgumentException,
-      IllegalAccessException {
+  public static long size(Object root) throws IllegalArgumentException, IllegalAccessException {
-  
+
-   * Find the size of an object and all objects reachable from it using breadth
-   * first search. This is equivalent to calling set(root, filter,
-   * includeStatics) where the filter will accept all objects.
+   * Find the size of an object and all objects reachable from it using breadth first search. This
+   * is equivalent to calling set(root, filter, includeStatics) where the filter will accept all
+   * objects.
-  
+
-   * Find the size of an object and all objects reachable from it using breadth
-   * first search. This method will include objects reachable from static
-   * fields. Using this method requires some heap space - probably between 8 -
-   * 30 bytes per reachable object.
+   * Find the size of an object and all objects reachable from it using breadth first search. This
+   * method will include objects reachable from static fields. Using this method requires some heap
+   * space - probably between 8 - 30 bytes per reachable object.
-   * Objects reachable only through weak or soft references will not be
-   * considered part of the total size.
+   * Objects reachable only through weak or soft references will not be considered part of the total
+   * size.
-   * @param root
-   *                the object to size
-   * @param filter
-   *                that can exclude objects from being counted in the results.
-   *                If an object is not accepted, it's size will not be included
-   *                and it's children will not be visited unless they are
-   *                reachable by some other path.
-   * @param includeStatics
-   *                if set to true, static members of a class will be traversed
-   *                the first time that a class is encountered.
+   * @param root the object to size
+   * @param filter that can exclude objects from being counted in the results. If an object is not
+   *        accepted, it's size will not be included and it's children will not be visited unless
+   *        they are reachable by some other path.
+   * @param includeStatics if set to true, static members of a class will be traversed the first
+   *        time that a class is encountered.
-  public static long size(Object root, ObjectFilter filter,
-      boolean includeStatics) throws IllegalArgumentException,
-      IllegalAccessException {
+  public static long size(Object root, ObjectFilter filter, boolean includeStatics)
+      throws IllegalArgumentException, IllegalAccessException {
-    
+
-  
+
-  
+
-  
+
-      if(count == null) {
+      if (count == null) {
-      
+
-      
+
-      if(size == null) {
+      if (size == null) {
-      
+
-      
+
-    
+
-      for(HistogramEntry entry : orderedSize) {
+      for (HistogramEntry entry : orderedSize) {
-        result.append(clazz + "\t"+ size + "\t" + count + "\n");
+        result.append(clazz + "\t" + size + "\t" + count + "\n");
-    
+
-      for(Map.Entry<Class, Long> entry : sizeHisto.entrySet()) {
+      for (Map.Entry<Class, Long> entry : sizeHisto.entrySet()) {
-    
+
-      
+
-        this.count =count;
+        this.count = count;
-        if(diff == 0) {
+        if (diff == 0) {
-      
+
-  
+
-      return !(object instanceof WeakReference)
-          && !(object instanceof SoftReference);
+      return !(object instanceof WeakReference) && !(object instanceof SoftReference);
-  
-  
-  
-  
+
+
-  
-  private ObjectGraphSizer() { }
-  
+
+  private ObjectGraphSizer() {}
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66