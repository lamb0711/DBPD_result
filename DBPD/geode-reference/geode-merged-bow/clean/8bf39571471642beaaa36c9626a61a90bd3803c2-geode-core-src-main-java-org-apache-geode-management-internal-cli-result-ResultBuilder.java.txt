Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final int CODE_SHELLCLIENT_ABORT_OP   = 110;
-//  public static final int OKCODE  = 200;
-  
+  public static final int CODE_SHELLCLIENT_ABORT_OP = 110;
+  // public static final int OKCODE = 200;
+
-  public static final int ERRORCODE_DEFAULT           = 400;
-  public static final int ERRORCODE_CONNECTION_ERROR  = 405;
+  public static final int ERRORCODE_DEFAULT = 400;
+  public static final int ERRORCODE_CONNECTION_ERROR = 405;
-  public static final int ERRORCODE_UNAUTHORIZED      = 415;
-  
+  public static final int ERRORCODE_UNAUTHORIZED = 415;
+
-  public static final int ERRORCODE_PARSING_ERROR     = 501;
-  public static final int ERRORCODE_GEMFIRE_ERROR     = 505;
+  public static final int ERRORCODE_PARSING_ERROR = 501;
+  public static final int ERRORCODE_GEMFIRE_ERROR = 505;
-  public static final int ERRORCODE_BADCONFIG_ERROR   = 515;
-  public static final int ERRORCODE_USER_ERROR        = 520;
-  
+  public static final int ERRORCODE_BADCONFIG_ERROR = 515;
+  public static final int ERRORCODE_USER_ERROR = 520;
+
-  public static final Result ERROR_RESULT_DEFAULT = 
-                createErrorResult(ERRORCODE_DEFAULT, 
-                                  "Error occurred while executing command.");
-  
+  public static final Result ERROR_RESULT_DEFAULT =
+      createErrorResult(ERRORCODE_DEFAULT, "Error occurred while executing command.");
+
-   * Note: To build your own error result, use {@link #createErrorResultData()}
-   * to build {@link ErrorResultData} & then use
-   * {@link #buildResult(ResultData)}
+   * Note: To build your own error result, use {@link #createErrorResultData()} to build
+   * {@link ErrorResultData} & then use {@link #buildResult(ResultData)}
-   * @param message
-   *          Message to be shown to the user
+   * @param message Message to be shown to the user
-    String errorMessage = message != null ? message: "Connection Error occurred."; 
-    
+    String errorMessage = message != null ? message : "Connection Error occurred.";
+
-  
+
-   * Note: To build your own error result, use {@link #createErrorResultData()} 
-   * to build {@link ErrorResultData} & then use
-   * {@link #buildResult(ResultData)}
+   * Note: To build your own error result, use {@link #createErrorResultData()} to build
+   * {@link ErrorResultData} & then use {@link #buildResult(ResultData)}
-   * @param message
-   *          Message to be shown to the user
+   * @param message Message to be shown to the user
-    return createErrorResult(ERRORCODE_PARSING_ERROR, 
-                  "Could not parse command string. "+message);
+    return createErrorResult(ERRORCODE_PARSING_ERROR, "Could not parse command string. " + message);
-  
+
-    return createErrorResult(ERRORCODE_BADCONFIG_ERROR, 
-                  "Configuration error. " + message);
+    return createErrorResult(ERRORCODE_BADCONFIG_ERROR, "Configuration error. " + message);
-   * Method for convenience to create error result for error in GemFire while
-   * executing command.
+   * Method for convenience to create error result for error in GemFire while executing command.
-   * Note: To build your own error result, use {@link #createErrorResultData()} 
-   * to build {@link ErrorResultData} & then use
-   * {@link #buildResult(ResultData)}
+   * Note: To build your own error result, use {@link #createErrorResultData()} to build
+   * {@link ErrorResultData} & then use {@link #buildResult(ResultData)}
-   * @param message
-   *          Message to be shown to the user
+   * @param message Message to be shown to the user
-    return createErrorResult(ERRORCODE_GEMFIRE_ERROR, 
-                  "Could not process command due to GemFire error. " + message);
+    return createErrorResult(ERRORCODE_GEMFIRE_ERROR,
+        "Could not process command due to GemFire error. " + message);
-   * Method for convenience to create error result for unreadable command
-   * response.
+   * Method for convenience to create error result for unreadable command response.
-   * Note: To build your own error result, use {@link #createErrorResultData()} 
-   * to build {@link ErrorResultData} & then use
-   * {@link #buildResult(ResultData)}
+   * Note: To build your own error result, use {@link #createErrorResultData()} to build
+   * {@link ErrorResultData} & then use {@link #buildResult(ResultData)}
-   * @param message
-   *          Message to be shown to the user
+   * @param message Message to be shown to the user
-    return createErrorResult(ERRORCODE_BADRESPONSE_ERROR, 
-                  "Could not read command response. " + message);
+    return createErrorResult(ERRORCODE_BADRESPONSE_ERROR,
+        "Could not read command response. " + message);
-  
+
-   * Note: To build your own error result, use {@link #createErrorResultData()} 
-   * to build {@link ErrorResultData} & then use
-   * {@link #buildResult(ResultData)}
+   * Note: To build your own error result, use {@link #createErrorResultData()} to build
+   * {@link ErrorResultData} & then use {@link #buildResult(ResultData)}
-   * @param errorCode
-   *          error code should be one of ResultBuilder.ERRORCODE_**
-   * @param message
-   *          message for the error
-   * @return Result object with the given error code & message. If there's an
-   *         exception while building result object, returns
-   *         {@link #ERROR_RESULT_DEFAULT}
+   * @param errorCode error code should be one of ResultBuilder.ERRORCODE_**
+   * @param message message for the error
+   * @return Result object with the given error code & message. If there's an exception while
+   *         building result object, returns {@link #ERROR_RESULT_DEFAULT}
-  
+
-   * @param message
-   *          Message for the OK Result
+   * @param message Message for the OK Result
-  public static Result createInfoResult(String message) {    
+  public static Result createInfoResult(String message) {
-  
+
-   * Creates a {@link TabularResultData} object to start building result that
-   * should be shown in a Tabular Format.
+   * Creates a {@link TabularResultData} object to start building result that should be shown in a
+   * Tabular Format.
-  
+
-  
+
-  
-//  public static CatalogedResultData createCatalogedResultData() {
-//    return new CatalogedResultData();
-//  }
-  
+
+  // public static CatalogedResultData createCatalogedResultData() {
+  // return new CatalogedResultData();
+  // }
+
-   * Creates a {@link InfoResultData} object to start building result that
-   * is required to be shown as an information without any specific format.
+   * Creates a {@link InfoResultData} object to start building result that is required to be shown
+   * as an information without any specific format.
-  
+
-   * Creates a {@link ErrorResultData} object to start building result for an
-   * error.
+   * Creates a {@link ErrorResultData} object to start building result for an error.
-  
+
-   * @param resultData
-   *          data to use to build Result
+   * @param resultData data to use to build Result
-  
+
-   * Prepare Result from JSON. Type of result is expected to there in the JSON
-   * as 'contentType' which should be one of {@link ResultData#TYPE_TABULAR},
-   * {@link ResultData#TYPE_COMPOSITE}, {@link ResultData#TYPE_INFO},
-   * {@link ResultData#TYPE_ERROR}, {@link ResultData#TYPE_OBJECT}.
+   * Prepare Result from JSON. Type of result is expected to there in the JSON as 'contentType'
+   * which should be one of {@link ResultData#TYPE_TABULAR}, {@link ResultData#TYPE_COMPOSITE},
+   * {@link ResultData#TYPE_INFO}, {@link ResultData#TYPE_ERROR}, {@link ResultData#TYPE_OBJECT}.
-   * @param gfJsonObject
-   *          GemFire JSON Object to use to prepare Result
+   * @param gfJsonObject GemFire JSON Object to use to prepare Result
-  
-  
+
+
-   * Prepare a Result object from a JSON String. This is useful on gfsh/client
-   * to read the response & prepare a Result object from the JSON response
+   * Prepare a Result object from a JSON String. This is useful on gfsh/client to read the response
+   * & prepare a Result object from the JSON response
-   * @param json
-   *          JSON string for Result
-   * @return Result object prepare from the JSON string. If it fails, creates an
-   *         error Result for Bad Response.
+   * @param json JSON string for Result
+   * @return Result object prepare from the JSON string. If it fails, creates an error Result for
+   *         Bad Response.
-      GfJsonObject jsonObject  = new GfJsonObject(json);
-      String       contentType = jsonObject.getString("contentType");
-      GfJsonObject data        = jsonObject.getJSONObject("data");
-      
+      GfJsonObject jsonObject = new GfJsonObject(json);
+      String contentType = jsonObject.getString("contentType");
+      GfJsonObject data = jsonObject.getJSONObject("data");
+
-      } /*else if (ResultData.TYPE_CATALOGED.equals(contentType)) {
-        resultData = new CatalogedResultData(new GfJsonObject(String.valueOf(content)));
-      }*/ else if (ResultData.TYPE_INFO.equals(contentType)) {
+      } /*
+         * else if (ResultData.TYPE_CATALOGED.equals(contentType)) { resultData = new
+         * CatalogedResultData(new GfJsonObject(String.valueOf(content))); }
+         */ else if (ResultData.TYPE_INFO.equals(contentType)) {
-        errorResultData.addLine("Can not detect result type, unknown response format: "+json);
+        errorResultData.addLine("Can not detect result type, unknown response format: " + json);
-      
+
-      
+
-    
+
-  
+
-    
+
-      //TODO - Abhishek - what to do with incoming files??
+      // TODO - Abhishek - what to do with incoming files??
-    
+
-   * Wraps a given ResultData and wraps it into appropriate ResultData of the
-   * same type but the returned object is immutable & throws
-   * UnsupportedOperationException on invoking those methods.
+   * Wraps a given ResultData and wraps it into appropriate ResultData of the same type but the
+   * returned object is immutable & throws UnsupportedOperationException on invoking those methods.
-        public ResultData addAsFile(String fileName, byte[] data, int fileType,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addAsFile(String fileName, String fileContents,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, String fileContents, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addByteDataFromFileFile(String filePath,
-            int fileType, String message, boolean addTimeStampToName)
-            throws FileNotFoundException, IOException {
+        public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+            boolean addTimeStampToName) throws FileNotFoundException, IOException {
-        
+
-        public ResultData addAsFile(String fileName, byte[] data, int fileType,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addAsFile(String fileName, String fileContents,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, String fileContents, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addByteDataFromFileFile(String filePath,
-            int fileType, String message, boolean addTimeStampToName)
-            throws FileNotFoundException, IOException {
+        public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+            boolean addTimeStampToName) throws FileNotFoundException, IOException {
-        
+
-        public ResultData addAsFile(String fileName, byte[] data, int fileType,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addAsFile(String fileName, String fileContents,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, String fileContents, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addByteDataFromFileFile(String filePath,
-            int fileType, String message, boolean addTimeStampToName)
-            throws FileNotFoundException, IOException {
+        public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+            boolean addTimeStampToName) throws FileNotFoundException, IOException {
-        
+
-        
+
-        public ResultData addAsFile(String fileName, byte[] data, int fileType,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addAsFile(String fileName, String fileContents,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, String fileContents, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addByteDataFromFileFile(String filePath,
-            int fileType, String message, boolean addTimeStampToName)
-            throws FileNotFoundException, IOException {
+        public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+            boolean addTimeStampToName) throws FileNotFoundException, IOException {
-        
+
-        
+
-        
+
-        public ResultData addAsFile(String fileName, byte[] data, int fileType,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addAsFile(String fileName, String fileContents,
-            String message, boolean addTimeStampToName) {
+        public ResultData addAsFile(String fileName, String fileContents, String message,
+            boolean addTimeStampToName) {
-        
+
-        public ResultData addByteDataFromFileFile(String filePath,
-            int fileType, String message, boolean addTimeStampToName)
-            throws FileNotFoundException, IOException {
+        public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+            boolean addTimeStampToName) throws FileNotFoundException, IOException {
-        
+
-        
+
-        
+
-      errorResultData.addLine("Can not detect result type, unknown result data format for: "+resultData);
+      errorResultData
+          .addLine("Can not detect result type, unknown result data format for: " + resultData);
-    
+

MOV65 MOV65 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66