Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-@SuppressWarnings({ "serial", "unused" })
+@SuppressWarnings({"serial", "unused"})
-      @Override public void evaluate() throws Throwable {
+      @Override
+      public void evaluate() throws Throwable {
-      }
-      else if (description.getTestClass().isAnnotationPresent(IgnoreUntil.class)) {
-        IgnoreUntil testClassAnnotation = description.getTestClass().getAnnotation(IgnoreUntil.class);
+      } else if (description.getTestClass().isAnnotationPresent(IgnoreUntil.class)) {
+        IgnoreUntil testClassAnnotation =
+            description.getTestClass().getAnnotation(IgnoreUntil.class);
-      || evaluateUntil(conditionalIgnoreAnnotation.until()));
+        || evaluateUntil(conditionalIgnoreAnnotation.until()));
-  protected boolean evaluateCondition(Class<? extends IgnoreCondition> ignoreConditionType, Description description) {
+  protected boolean evaluateCondition(Class<? extends IgnoreCondition> ignoreConditionType,
+      Description description) {
-    }
-    catch (Exception e) {
-      throw new IgnoreConditionEvaluationException(String.format("failed to evaluate IgnoreCondition: %1$s",
-        ignoreConditionType.getName()), e);
+    } catch (Exception e) {
+      throw new IgnoreConditionEvaluationException(
+          String.format("failed to evaluate IgnoreCondition: %1$s", ignoreConditionType.getName()),
+          e);
-    }
-    catch (ParseException e) {
+    } catch (ParseException e) {

