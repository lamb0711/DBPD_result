Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PdxType implements DataSerializable {  
-  
+public class PdxType implements DataSerializable {
+
-  private int cachedHash = 0; 
-  
+  private int cachedHash = 0;
+
+   * 
-  
+
-  
+
-    for (PdxField ft: copy.fields) {
+    for (PdxField ft : copy.fields) {
-  
+
-   
+
-    if(hash == 0) {
+    if (hash == 0) {
-      for(PdxField field : this.fields) {
+      for (PdxField field : this.fields) {
-      if(hash == 0) {
+      if (hash == 0) {
-      cachedHash = hash;      
+      cachedHash = hash;
-    PdxType otherVT = (PdxType)other;
+    PdxType otherVT = (PdxType) other;
-    if (otherVT.fields.size() != this.fields.size()
-        || otherVT.vlfCount != this.vlfCount) {
+    if (otherVT.fields.size() != this.fields.size() || otherVT.vlfCount != this.vlfCount) {
-  
+
-   * Return true if two pdx types have same class name and the same fields
-   * but, unlike equals, field order does not matter.
-   * Note a type that expects a domain class can be compatible with
-   * one that does not expect a domain class.
+   * Return true if two pdx types have same class name and the same fields but, unlike equals, field
+   * order does not matter. Note a type that expects a domain class can be compatible with one that
+   * does not expect a domain class.
+   * 
-    if (other == null) return false;
-    if(!getClassName().equals(other.getClassName())) {
+    if (other == null)
+      return false;
+    if (!getClassName().equals(other.getClassName())) {
-  
+
-  
+
-          .toLocalizedString(getClassName()), e);
+              .toLocalizedString(getClassName()),
+          e);
-  
+
-  
+
-  
+
-  
+
-  
+
- 
+
-   * This method is use to create Pdxtype for which classname is not available; while creating PdxInstance
+   * This method is use to create Pdxtype for which classname is not available; while creating
+   * PdxInstance
-  } 
+  }
+
-      throw new PdxFieldAlreadyExistsException("The field \"" + ft.getFieldName() + "\" already exists.");
+      throw new PdxFieldAlreadyExistsException(
+          "The field \"" + ft.getFieldName() + "\" already exists.");
-  
+
-        for (int j = (i+1); j < size; j++) {
+        for (int j = (i + 1); j < size; j++) {
-      // System.out.println("Printing the position array:");
-      // for (int i = 0; i < this.positionArray.length; i++) {
-      // System.out.println("[" + i + "][0]=" + this.positionArray[i][0] + ", ["
-      // + i + "][1]=" + this.positionArray[i][1]);
-      // }
+    // System.out.println("Printing the position array:");
+    // for (int i = 0; i < this.positionArray.length; i++) {
+    // System.out.println("[" + i + "][0]=" + this.positionArray[i][0] + ", ["
+    // + i + "][1]=" + this.positionArray[i][1]);
+    // }
-  
+
-  
+
-  
+
+
-    for (PdxField f: this.fields) {
+    for (PdxField f : this.fields) {
+
-      sb.append(/*vft.getFieldName() + ":" + vft.getTypeId()*/ vft.toString());
+      sb.append(/* vft.getFieldName() + ":" + vft.getTypeId() */ vft.toString());
-      sb.append(/*vft.getFieldName() + ":" + vft.getTypeId()*/ vft.toString()).append(", ");
+      sb.append(/* vft.getFieldName() + ":" + vft.getTypeId() */ vft.toString()).append(", ");
-    for (PdxField ft: this.fields) {
+    for (PdxField ft : this.fields) {
+   * 
-    for (PdxField ft: this.fields) {
+    for (PdxField ft : this.fields) {
-  
+
-    if(this.sortedIdentityFields == null) {
+    if (this.sortedIdentityFields == null) {
-      for(PdxField field: fields) {
-        if(field.isIdentityField() && !field.isDeleted()) {
+      for (PdxField field : fields) {
+        if (field.isIdentityField() && !field.isDeleted()) {
-      //If we don't find any marked identity fields, use all of the fields.
-      if(sortedSet.isEmpty()) {
-        for (PdxField field: fields) {
+      // If we don't find any marked identity fields, use all of the fields.
+      if (sortedSet.isEmpty()) {
+        for (PdxField field : fields) {
-    for (PdxField pf: this.fields) {
+    for (PdxField pf : this.fields) {
-    for (PdxField f: this.fields) {
+    for (PdxField f : this.fields) {
-  private transient final AtomicReference<AutoClassInfo> autoClassInfo = new AtomicReference<AutoClassInfo>();
-  
+  private transient final AtomicReference<AutoClassInfo> autoClassInfo =
+      new AtomicReference<AutoClassInfo>();
+
-  
+
-      for (PdxField field: this.fields) {
+      for (PdxField field : this.fields) {
+

UPD66 UPD66 UPD66 DEL66