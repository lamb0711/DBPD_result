GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.TreeSet;
+
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.*;
-
-// import org.apache.geode.internal.*;
-
-  public RemoteCacheInfo(GemFireCacheImpl c) {
-    this.name = c.getName();
-    this.id = System.identityHashCode(c);
-    this.closed = c.isClosed();
-    this.lockTimeout = c.getLockTimeout();
-    this.lockLease = c.getLockLease();
-    this.searchTimeout = c.getSearchTimeout();
-    this.upTime = c.getUpTime();
+  public RemoteCacheInfo(InternalCache internalCache) {
+    this.name = internalCache.getName();
+    this.id = System.identityHashCode(internalCache);
+    this.closed = internalCache.isClosed();
+    this.lockTimeout = internalCache.getLockTimeout();
+    this.lockLease = internalCache.getLockLease();
+    this.searchTimeout = internalCache.getSearchTimeout();
+    this.upTime = internalCache.getUpTime();
-          roots = c.rootRegions();
+          roots = internalCache.rootRegions();
-          roots = c.rootRegions(true);
+          roots = internalCache.rootRegions(true);
-        Iterator it = roots.iterator();
-        while (it.hasNext()) {
-          Region r = (Region) it.next();
+        for (Object root : roots) {
+          Region r = (Region) root;
-      this.perfStats = new RemoteStatResource(c.getCachePerfStats().getStats());
+      this.perfStats = new RemoteStatResource(internalCache.getCachePerfStats().getStats());
-      Collection bridges = c.getCacheServers();
+      Collection<CacheServer> bridges = internalCache.getCacheServers();
-      Iterator iter = bridges.iterator();
+      Iterator<CacheServer> iter = bridges.iterator();
-        CacheServer bridge = (CacheServer) iter.next();
+        CacheServer bridge = iter.next();
-      this.isServer = c.isServer();
+      this.isServer = internalCache.isServer();
-  public RemoteCacheInfo() {}
+  public RemoteCacheInfo() {
+    // do nothing
+  }
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-        .toLocalizedString(new Object[] {this.name, Integer.valueOf(this.bridgeServerIds.length)});
+        .toLocalizedString(this.name, this.bridgeServerIds.length);

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS40 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS40 UPD42 MOV22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS74 INS74 INS70 MOV43 INS43 MOV43 MOV43 INS44 INS42 MOV8 INS42 UPD42 MOV43 UPD42 MOV43 INS42 MOV32 MOV43 UPD42 UPD42 UPD42 MOV43 INS42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL11 DEL42 DEL40 DEL42 DEL85 DEL5 DEL4 DEL3 DEL32