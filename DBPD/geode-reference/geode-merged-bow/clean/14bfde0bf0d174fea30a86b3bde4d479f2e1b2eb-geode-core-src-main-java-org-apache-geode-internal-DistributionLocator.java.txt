Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-            LocalizedStrings.DistributionLocator_THE_PORT_ARGUMENT_MUST_BE_GREATER_THAN_0_AND_LESS_THAN_65536
-                .toLocalizedString());
+            "The -port= argument must be greater than 0 and less than 65536.");
-    logger.info(LocalizedStrings.DistributionLocator_LOCATOR_STOPPED);
+    logger.info("Locator stopped");
-      System.err.println(LocalizedStrings.DistributionLocator_USAGE.toLocalizedString()
-          + ": port [bind-address] [peerLocator] [serverLocator] [hostname-for-clients]");
+      System.err.println(
+          "Usage: port [bind-address] [peerLocator] [serverLocator] [hostname-for-clients]");
-          .println(LocalizedStrings.DistributionLocator_A_ZEROLENGTH_ADDRESS_WILL_BIND_TO_LOCALHOST
-              .toLocalizedString());
+          .println("A zero-length address will bind to localhost");
-          LocalizedStrings.DistributionLocator_A_ZEROLENGTH_GEMFIREPROPERTIESFILE_WILL_MEAN_USE_THE_DEFAULT_SEARCH_PATH
-              .toLocalizedString());
+          "A zero-length gemfire-properties-file will mean use the default search path");
-          LocalizedStrings.DistributionLocator_PEERLOCATOR_AND_SERVERLOCATOR_BOTH_DEFAULT_TO_TRUE
-              .toLocalizedString());
+          "peerLocator and serverLocator both default to true");
-          LocalizedStrings.DistributionLocator_A_ZEROLENGTH_HOSTNAMEFORCLIENTS_WILL_DEFAULT_TO_BINDADDRESS
-              .toLocalizedString());
+          "A zero-length hostname-for-clients will default to bind-address");
-              LocalizedStrings.DistributionLocator__0_IS_NOT_A_VALID_IP_ADDRESS_FOR_THIS_MACHINE
-                  .toLocalizedString(args[1]));
+              String.format("'%s' is not a valid IP address for this machine",
+                  args[1]));
-        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
-          public void run() {
-            try {
-              DistributionLocator.shutdown(port, faddress);
-            } catch (IOException e) {
-              e.printStackTrace();
-            }
-          }
-        }));
+        Runtime.getRuntime()
+            .addShutdownHook(new LoggingThread("LocatorShutdownThread", false, () -> {
+              try {
+                DistributionLocator.shutdown(port, faddress);
+              } catch (IOException e) {
+                e.printStackTrace();
+              }
+            }));
-      logger.fatal(LocalizedMessage.create(
-          LocalizedStrings.DistributionLocator_COULD_NOT_BIND_LOCATOR_TO__0__1,
-          new Object[] {address, port}));
+      logger.fatal("Could not bind locator to {}[{}]",
+          new Object[] {address, port});
-      logger.fatal(
-          LocalizedMessage.create(LocalizedStrings.DistributionLocator_COULD_NOT_START_LOCATOR),
+      logger.fatal("Could not start locator",

UPD40 INS45 INS45 INS45 INS45 INS45 INS45 MOV32 UPD42 UPD42 INS45 INS45 INS45 MOV14 UPD43 INS45 INS9 INS86 UPD42 MOV8 UPD42 INS42 INS45 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL45 DEL27 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL83 DEL39 DEL42 DEL31 DEL1 DEL42 DEL43 DEL14 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32