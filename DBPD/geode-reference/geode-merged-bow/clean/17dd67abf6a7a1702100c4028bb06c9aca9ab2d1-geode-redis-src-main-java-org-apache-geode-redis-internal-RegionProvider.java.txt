GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>
-  /**
-   * This is the Redis meta data {@link Region} that holds the {@link RedisDataType} information for
-   * all Regions created. The mapping is a {@link String} key which is the name of the {@link
-   * Region} created to hold the data to the RedisDataType it contains.
-   */
-  private final KeyRegistrar keyRegistrar;
-
-  /**
-   * This is the {@link RedisDataType#REDIS_STRING} {@link Region}. This is the Region that stores
-   * all string contents
-   */
-  private final Region<ByteArrayWrapper, RedisData> stringsRegion;
-  public RegionProvider(Region<ByteArrayWrapper, RedisData> stringsRegion,
-      KeyRegistrar redisMetaRegion,
+  public RegionProvider(
-    if (stringsRegion == null || redisMetaRegion == null) {
-      throw new NullPointerException();
-    }
-    this.stringsRegion = stringsRegion;
-    keyRegistrar = redisMetaRegion;
-  public Region<ByteArrayWrapper, ?> getRegionForType(RedisDataType redisDataType) {
-    if (redisDataType == null) {
-      return null;
-    }
-
-    switch (redisDataType) {
-      case REDIS_STRING:
-        return stringsRegion;
-
-      case REDIS_HASH:
-      case REDIS_SET:
-        return dataRegion;
-
-      case REDIS_PUBSUB:
-      default:
-        return null;
-    }
-  }
-
-  public boolean removeKey(ByteArrayWrapper key) {
-    RedisDataType type = keyRegistrar.getType(key);
-    return removeKey(key, type);
-  }
-
-  public boolean removeKey(ByteArrayWrapper key, RedisDataType type) {
-    return removeKey(key, type, true);
-  }
-
-  private boolean typeStoresDataInKeyRegistrar(RedisDataType type) {
-    if (type == RedisDataType.REDIS_SET) {
-      return true;
-    }
-    if (type == RedisDataType.REDIS_HASH) {
-      return true;
-    }
-    return false;
-  }
-
-  public boolean removeKey(ByteArrayWrapper key, RedisDataType type, boolean cancelExpiration) {
-    if (!typeStoresDataInKeyRegistrar(type)) {
-      keyRegistrar.unregister(key);
-    }
+  public boolean expireKey(ByteArrayWrapper key, RedisDataType type, boolean cancelExpiration) {
-      if (type == RedisDataType.REDIS_STRING) {
-        return stringsRegion.remove(key) != null;
-      } else if (type == RedisDataType.REDIS_SET || type == RedisDataType.REDIS_HASH) {
-        return redisKeyCommands.del(key);
-      } else {
-        return false;
-      }
+      return redisKeyCommands.del(key);
-  public Region<ByteArrayWrapper, RedisData> getStringsRegion() {
-    return stringsRegion;
-  }
-
-    RedisDataType type = keyRegistrar.getType(key);
-    if (type == null) {
+
+    if (!getDataRegion().containsKey(key)) {
-        .schedule(new ExpirationExecutor(key, type, this), delay, TimeUnit.MILLISECONDS);
+        .schedule(new ExpirationExecutor(key, null, this), delay, TimeUnit.MILLISECONDS);
-    RedisDataType type = keyRegistrar.getType(key);
-    if (type == null) {
+    if (!getDataRegion().containsKey(key)) {
-        .schedule(new ExpirationExecutor(key, type, this), delay, TimeUnit.MILLISECONDS);
+        .schedule(new ExpirationExecutor(key, null, this), delay, TimeUnit.MILLISECONDS);

UPD42 INS25 INS25 MOV8 INS38 MOV8 MOV74 INS38 MOV8 MOV74 INS32 INS32 INS32 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV43 INS33 UPD42 MOV42 MOV43 INS33 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL49 DEL33 DEL41 DEL50 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL40 DEL27 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42