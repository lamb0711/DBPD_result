GEODE-8217: Deserialize attribute before update and remove. (#5256)

When preferDeserializedForm is true we deserialize the previous attributes before update or remove.

Deprecates preferDeserializedForm since when false it's unclear when you will get serialized or unserialized forms of attributes.

+import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;
+import javax.servlet.http.HttpSession;
+
-public abstract class DeltaSessionManager<CommitSessionValveT extends AbstractCommitSessionValve>
+public abstract class DeltaSessionManager<CommitSessionValveT extends AbstractCommitSessionValve<?>>
-    implements Lifecycle, PropertyChangeListener, SessionManager {
+    implements Lifecycle, PropertyChangeListener, SessionManager, DeltaSessionManagerConfiguration {
-  private AtomicInteger rejectedSessions;
+  private final AtomicInteger rejectedSessions;
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-                                     // peer-to-peer
+  // peer-to-peer
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-    this.rejectedSessions = new AtomicInteger(0);
+    rejectedSessions = new AtomicInteger(0);
-    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
-    return this.regionName;
+    return regionName;
+  @Override
-    if (this.regionAttributesId == null) {
-      this.regionAttributesId = getSessionCache().getDefaultRegionAttributesId();
+    if (regionAttributesId == null) {
+      regionAttributesId = getSessionCache().getDefaultRegionAttributesId();
-    return this.regionAttributesId;
+    return regionAttributesId;
-  @SuppressWarnings("unused")
+  @Override
-    this.regionAttributesId = regionType;
+    regionAttributesId = regionType;
-    if (this.enableLocalCache == null) {
-      this.enableLocalCache = getSessionCache().getDefaultEnableLocalCache();
+    if (enableLocalCache == null) {
+      enableLocalCache = getSessionCache().getDefaultEnableLocalCache();
-    return this.enableLocalCache;
+    return enableLocalCache;
-  @SuppressWarnings("unused")
+  @Override
-  @SuppressWarnings("unused")
+  @Override
-    return this.maxActiveSessions;
+    return maxActiveSessions;
-  @SuppressWarnings("unused")
+  @Override
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableGatewayReplication;
+    return enableGatewayReplication;
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableDebugListener;
+    return enableDebugListener;
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableCommitValve;
+    return enableCommitValve;
+  @Override
-    this.enableCommitValve = enable;
+    enableCommitValve = enable;
-    return this.enableCommitValveFailfast;
+    return enableCommitValveFailfast;
-  @SuppressWarnings("unused")
+  @Override
-    this.enableCommitValveFailfast = enable;
+    enableCommitValveFailfast = enable;
-  @SuppressWarnings("unused")
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
+  @Override
-    this.preferDeserializedForm = enable;
+    log.warn("Use of deprecated preferDeserializedForm property to be removed in future release.");
+    if (!enable) {
+      log.warn(
+          "Use of HttpSessionAttributeListener may result in serialized form in HttpSessionBindingEvent.");
+    }
+    preferDeserializedForm = enable;
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-    return this.preferDeserializedForm;
+    return preferDeserializedForm;
-    return this.sessionCache;
+    return sessionCache;
-  @SuppressWarnings("unused")
-  public Session findSession(String id) throws IOException {
+  public Session findSession(String id) {
-    this.sessionCache = cache.isClient() ? new ClientServerSessionCache(this, cache)
+    sessionCache = cache.isClient() ? new ClientServerSessionCache(this, cache)
-    this.sessionCache.initialize();
+    sessionCache.initialize();
-    remove(session, false);
-  }
-
-  public void remove(Session session, @SuppressWarnings("unused") boolean update) {
-    // super.remove(session);
-    return this.rejectedSessions.get();
+    return rejectedSessions.get();
-    this.sessionsToTouch.add(sessionId);
+    sessionsToTouch.add(sessionId);
-    return this.sessionsToTouch;
+    return sessionsToTouch;
-  boolean removeTouchedSession(String sessionId) {
-    return this.sessionsToTouch.remove(sessionId);
+  void removeTouchedSession(String sessionId) {
+    sessionsToTouch.remove(sessionId);
-    this.timer = new Timer("Timer for " + toString(), true);
+    timer = new Timer("Timer for " + toString(), true);
-    this.timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
+    timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
-      this.timer.cancel();
+      timer.cancel();
-    this.timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
+    timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
-    SelectResults results;
+    SelectResults<String> results;
-      results = (SelectResults) query.execute();
+      results = uncheckedCast(query.execute());
-    ObjectOutputStream oos = null;
+    final ObjectOutputStream oos;
-        if (oos != null) {
-          try {
-            oos.close();
-          } catch (IOException ioe) {
-            // Ignore
-          }
-        }
-    @SuppressWarnings("unchecked")
-    Iterator<String> elements = (Iterator<String>) results.iterator();
-    while (elements.hasNext()) {
-      String id = elements.next();
+    for (final String id : results) {
-    if (getLogger().isDebugEnabled())
+    if (getLogger().isDebugEnabled()) {
+    }
-   * mechanism, if any. If persistence is not supported, this method returns without doing anything.
+   * mechanism, if any. If persistence is not supported, this method returns without doing
+   * anything.
-        Region region = getSessionCache().getOperatingRegion();
-        DeltaSessionInterface existingSession = (DeltaSessionInterface) region.get(session.getId());
+        final Region<String, HttpSession> region = getSessionCache().getOperatingRegion();
+        final DeltaSessionInterface existingSession =
+            (DeltaSessionInterface) region.get(session.getId());
-  void writeToObjectOutputStream(ObjectOutputStream oos, List listToWrite) throws IOException {
+  void writeToObjectOutputStream(ObjectOutputStream oos, List<?> listToWrite) throws IOException {
-        + getTheContext() + "; regionName=" + this.regionName
-        + "; regionAttributesId=" + this.regionAttributesId + "]";
+        + getTheContext() + "; regionName=" + regionName
+        + "; regionAttributesId=" + regionAttributesId + "]";

INS26 INS26 INS40 INS40 INS43 INS74 INS42 INS83 INS29 INS78 INS29 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV78 INS78 MOV78 INS78 MOV78 MOV44 MOV78 MOV78 INS29 INS78 INS78 MOV44 INS29 INS78 INS78 MOV78 MOV44 UPD39 MOV44 MOV43 INS76 INS65 INS42 INS65 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS42 INS42 INS21 INS25 INS65 INS42 INS42 INS21 INS70 INS74 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS32 INS38 INS8 INS66 INS42 INS42 INS42 INS32 INS74 INS83 INS44 INS42 MOV8 INS8 UPD66 INS66 MOV43 INS76 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 MOV43 MOV43 INS83 MOV43 INS42 MOV21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 MOV32 INS83 INS74 INS83 MOV43 MOV43 INS43 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL42 DEL45 DEL79 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL11 DEL33 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL79 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22