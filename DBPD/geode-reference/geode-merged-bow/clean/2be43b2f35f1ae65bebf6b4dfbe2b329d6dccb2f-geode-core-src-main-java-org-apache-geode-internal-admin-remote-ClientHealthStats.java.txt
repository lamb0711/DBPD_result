GEODE-6334: Change cache operation stats to longs (#3142)

* Change cache operation stats to longs
* Use long instead of int for CqQueryOptimized Tests
* Clean up easy parts of CqQueryOptimized Tests
* Fix usages of CachePerfStats from ints to longs
* Add CacheStatistics integration test
* Remove cachePerfStats.getPuts() testing in backwards compatibility
DUnit test because it was trying to test old versions when this is all internal
* Update sanctioned data serializables

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Galen O'Sullivan <gosullivan@pivotal.io>
Co-authored-by: Kirk Lund <klund@pivotal.io>

-   * "numOfGets", IntCounter, "The total number of times a successful get has been done on this
+   * "numOfGets", "The total number of times a successful get has been done on this
-  protected int numOfGets;
+  private long numOfGets;
-   * "numOfPuts", IntCounter, "The total number of times an entry is added or replaced in this cache
+   * "numOfPuts", "The total number of times an entry is added or replaced in this cache
-  protected int numOfPuts;
+  private long numOfPuts;
-   * Represents number of cache misses in this client. IntCounter, "Total number of times a get on
+   * Represents number of cache misses in this client. "Total number of times a get on
-  protected int numOfMisses;
+  private long numOfMisses;
-   * Represents number of cache listners calls completed. IntCounter, "Total number of times a cache
+   * Represents number of cache listners calls completed. "Total number of times a cache
-  protected int numOfCacheListenerCalls;
+  private long numOfCacheListenerCalls;
-   * Represents total number of active threads in the client VM. IntCounter, "Current number of live
+   * Represents total number of active threads in the client VM. "Current number of live
-  protected int numOfThreads;
+  private int numOfThreads;
-   * Represents the CPU time used by the process (in nanoseconds). LongCounter, "CPU timed used by
+   * Represents the CPU time used by the process (in nanoseconds). "CPU timed used by
-   * Represents the number of cpus available to the java VM on its machine. IntCounter, "Number of
+   * Represents the number of cpus available to the java VM on its machine. "Number of
-  protected Date updateTime;
+  private Date updateTime;
-  private HashMap<String, String> poolStats = new HashMap<String, String>();
+  private HashMap<String, String> poolStats = new HashMap<>();
-  private static final Version[] dsfidVersions = new Version[] {Version.GFE_80};
+  private static final Version[] dsfidVersions = new Version[] {Version.GFE_80, Version.GEODE_190};
-  public int getNumOfGets() {
+  public long getNumOfGets() {
-  public void setNumOfGets(int numOfGets) {
+  public void setNumOfGets(long numOfGets) {
-  public int getNumOfPuts() {
+  public long getNumOfPuts() {
-  public void setNumOfPuts(int numOfPuts) {
+  public void setNumOfPuts(long numOfPuts) {
-  public int getNumOfMisses() {
+  public long getNumOfMisses() {
-  public void setNumOfMisses(int numOfMisses) {
+  public void setNumOfMisses(long numOfMisses) {
-  public int getNumOfCacheListenerCalls() {
+  public long getNumOfCacheListenerCalls() {
-  public void setNumOfCacheListenerCalls(int numOfCacheListenerCalls) {
+  public void setNumOfCacheListenerCalls(long numOfCacheListenerCalls) {
-    DataSerializer.writePrimitiveInt(numOfGets, out);
-    DataSerializer.writePrimitiveInt(numOfPuts, out);
-    DataSerializer.writePrimitiveInt(numOfMisses, out);
-    DataSerializer.writePrimitiveInt(numOfCacheListenerCalls, out);
+    DataSerializer.writePrimitiveLong(numOfGets, out);
+    DataSerializer.writePrimitiveLong(numOfPuts, out);
+    DataSerializer.writePrimitiveLong(numOfMisses, out);
+    DataSerializer.writePrimitiveLong(numOfCacheListenerCalls, out);
+    DataSerializer.writePrimitiveInt(numOfThreads, out);
+    DataSerializer.writePrimitiveInt(cpus, out);
+    DataSerializer.writePrimitiveLong(processCpuTime, out);
+    DataSerializer.writeDate(updateTime, out);
+    DataSerializer.writeHashMap((poolStats), out);
+  }
+
+  /**
+   * We changed some ints to longs in this version, give back the int truncation so that it's
+   * something like what we would have gotten before.
+   */
+  public void toDataPre_GEODE_1_9_0_0(DataOutput out) throws IOException {
+    DataSerializer.writePrimitiveInt((int) numOfGets, out);
+    DataSerializer.writePrimitiveInt((int) numOfPuts, out);
+    DataSerializer.writePrimitiveInt((int) numOfMisses, out);
+    DataSerializer.writePrimitiveInt((int) numOfCacheListenerCalls, out);
-    DataSerializer.writePrimitiveInt(numOfGets, out);
-    DataSerializer.writePrimitiveInt(numOfPuts, out);
-    DataSerializer.writePrimitiveInt(numOfMisses, out);
-    DataSerializer.writePrimitiveInt(numOfCacheListenerCalls, out);
+    DataSerializer.writePrimitiveInt((int) numOfGets, out);
+    DataSerializer.writePrimitiveInt((int) numOfPuts, out);
+    DataSerializer.writePrimitiveInt((int) numOfMisses, out);
+    DataSerializer.writePrimitiveInt((int) numOfCacheListenerCalls, out);
+    this.numOfGets = DataSerializer.readPrimitiveLong(in);
+    this.numOfPuts = DataSerializer.readPrimitiveLong(in);
+    this.numOfMisses = DataSerializer.readPrimitiveLong(in);
+    this.numOfCacheListenerCalls = DataSerializer.readPrimitiveLong(in);
+    this.numOfThreads = DataSerializer.readPrimitiveInt(in);
+    this.cpus = DataSerializer.readPrimitiveInt(in);
+    this.processCpuTime = DataSerializer.readPrimitiveLong(in);
+    this.updateTime = DataSerializer.readDate(in);
+    this.poolStats = DataSerializer.readHashMap(in);
+  }
+
+  public void fromDataPre_GEODE_1_9_0_0(DataInput in) throws IOException, ClassNotFoundException {

INS31 INS31 UPD83 UPD39 UPD83 UPD39 UPD83 UPD39 UPD83 UPD39 UPD83 UPD83 UPD39 UPD39 UPD39 UPD39 INS29 INS83 INS39 INS42 INS44 INS43 INS8 MOV78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 UPD42 UPD39 UPD39 UPD39 UPD39 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS21 MOV21 MOV21 MOV21 MOV21 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD74 INS66 INS66 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS40 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS36 INS42 INS11 INS11 INS11 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42