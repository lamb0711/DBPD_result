Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
-//import org.apache.geode.internal.*;
+// import org.apache.geode.internal.*;
-  //private boolean hasRoot = false;
+  // private boolean hasRoot = false;
-  
+
-   * Returns a <code>RootRegionResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of the local manager's
-   * system config.
+   * Returns a <code>RootRegionResponse</code> that will be returned to the specified recipient. The
+   * message will contains a copy of the local manager's system config.
-  public static RootRegionResponse create(DistributionManager dm, InternalDistributedMember recipient) {
+  public static RootRegionResponse create(DistributionManager dm,
+      InternalDistributedMember recipient) {
-        roots = ((GemFireCacheImpl)cache).rootRegions(true);
+        roots = ((GemFireCacheImpl) cache).rootRegions(true);
-      for (Iterator iter = roots.iterator(); iter.hasNext(); ) {
-        Region r = (Region)iter.next();
+      for (Iterator iter = roots.iterator(); iter.hasNext();) {
+        Region r = (Region) iter.next();
-        userAttributes
-          .add(CacheDisplay.
-               getCachedObjectDisplay(r.getUserAttribute(), GemFireVM.LIGHTWEIGHT_CACHE_VALUE));
+        userAttributes.add(CacheDisplay.getCachedObjectDisplay(r.getUserAttribute(),
+            GemFireVM.LIGHTWEIGHT_CACHE_VALUE));
-      
+
-      m.regions = (String[])regionNames.toArray(temp);
-      m.userAttrs = (String[])userAttributes.toArray(temp);;
-      
-    } 
-    catch (CancelException cce){ /*no cache yet*/ }    
-    
-    m.setRecipient(recipient);    
+      m.regions = (String[]) regionNames.toArray(temp);
+      m.userAttrs = (String[]) userAttributes.toArray(temp);;
+
+    } catch (CancelException cce) {
+      /* no cache yet */ }
+
+    m.setRecipient(recipient);
-  
+
-  
+
-    if (regions.length > 0) {      
+    if (regions.length > 0) {
-      for (int i=0; i<regions.length; i++) {
+      for (int i = 0; i < regions.length; i++) {
-  
+
-  @Override  
+  @Override
-  @Override  
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    regions = (String[])DataSerializer.readObject(in);
-    userAttrs = (String[])DataSerializer.readObject(in);
+    regions = (String[]) DataSerializer.readObject(in);
+    userAttrs = (String[]) DataSerializer.readObject(in);
-  @Override  
+  @Override

UPD66 UPD66 DEL66