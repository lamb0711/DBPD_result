Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class ClientUserAuths
-{
+public class ClientUserAuths {
- // private AtomicLong counter = new AtomicLong(1);
+  // private AtomicLong counter = new AtomicLong(1);
-  private ConcurrentHashMap<Long, UserAuthAttributes> uniqueIdVsUserAuth = new ConcurrentHashMap<Long, UserAuthAttributes>();
-  private ConcurrentHashMap<String, UserAuthAttributes> cqNameVsUserAuth = new ConcurrentHashMap<String, UserAuthAttributes>();
-  private ConcurrentHashMap<Long, Subject> uniqueIdVsSubject = new ConcurrentHashMap<Long, Subject>();
+  private ConcurrentHashMap<Long, UserAuthAttributes> uniqueIdVsUserAuth =
+      new ConcurrentHashMap<Long, UserAuthAttributes>();
+  private ConcurrentHashMap<String, UserAuthAttributes> cqNameVsUserAuth =
+      new ConcurrentHashMap<String, UserAuthAttributes>();
+  private ConcurrentHashMap<Long, Subject> uniqueIdVsSubject =
+      new ConcurrentHashMap<Long, Subject>();
-  public long putUserAuth(UserAuthAttributes userAuthAttr)
-  {
-    //TODO:hitesh should we do random here
-    //long newId = counter.getAndIncrement();
+  public long putUserAuth(UserAuthAttributes userAuthAttr) {
+    // TODO:hitesh should we do random here
+    // long newId = counter.getAndIncrement();
-  public long putSubject(Subject subject){
+  public long putSubject(Subject subject) {
-  
-  public ClientUserAuths(int clientProxyHashcode)
-  {
+
+  public ClientUserAuths(int clientProxyHashcode) {
-  
-  synchronized private long getNextID()
-  {
+
+  synchronized private long getNextID() {
-    if (uniqueId == m_firstId)
-    { 
+    if (uniqueId == m_firstId) {
-      //now every user need to reauthenticate as we are short of Ids..
-      //though possibility of this is rare.
+      // now every user need to reauthenticate as we are short of Ids..
+      // though possibility of this is rare.
-  
-  public UserAuthAttributes getUserAuthAttributes(long userId)
-  {
+
+  public UserAuthAttributes getUserAuthAttributes(long userId) {
-  public Subject getSubject(long userId){
+  public Subject getSubject(long userId) {
-    if(subject == null)
+    if (subject == null)
-  
-  public UserAuthAttributes getUserAuthAttributes(String cqName)
-  {
-    //Long uniqueId = cqNameVsUserAuth.get(cqName);
-    //return uniqueIdVsUserAuth.get(uniqueId);
+
+  public UserAuthAttributes getUserAuthAttributes(String cqName) {
+    // Long uniqueId = cqNameVsUserAuth.get(cqName);
+    // return uniqueIdVsUserAuth.get(uniqueId);
-  
-  public void setUserAuthAttributesForCq(String cqName, long uniqueId, boolean isDurable)
-  {
+
+  public void setUserAuthAttributesForCq(String cqName, long uniqueId, boolean isDurable) {
-    
-    if (uaa != null)
-    {      
+
+    if (uaa != null) {
-      else 
-      {
+      else {
-        if(oldUaa != null)
-        {
-          if(oldUaa != uaa)//clean earlier one
+        if (oldUaa != null) {
+          if (oldUaa != uaa)// clean earlier one
-            //add durable(increment)
+            // add durable(increment)
+          } else {
+            // if looks extra call from client
-          else
-          {            
-            //if looks extra call from client
-          }
-        }
-        else
-        {
+        } else {
-  
-  public void removeUserAuthAttributesForCq(String cqName, boolean isDurable)
-  {
+
+  public void removeUserAuthAttributesForCq(String cqName, boolean isDurable) {
-    if(uaa != null && isDurable)
-      uaa.unsetDurable();        
+    if (uaa != null && isDurable)
+      uaa.unsetDurable();
-  
+
-  
-  public void cleanUserAuth(UserAuthAttributes userAuth)
-  {
-    if (userAuth != null)
-    {
+
+  public void cleanUserAuth(UserAuthAttributes userAuth) {
+    if (userAuth != null) {
+      } catch (Exception ex) {
+        // TODO:hitesh
+        /*
+         * if (securityLogger.warningEnabled()) { securityLogger.warning( LocalizedStrings.
+         * ServerConnection_0_AN_EXCEPTION_WAS_THROWN_WHILE_CLOSING_CLIENT_AUTHORIZATION_CALLBACK_1,
+         * new Object[] {"", ex}); }
+         */
+      }
+      try {
+        AuthorizeRequestPP postAuthzReq = userAuth.getPostAuthzRequest();
+        if (postAuthzReq != null) {
+          postAuthzReq.close();
+          postAuthzReq = null;
-        catch (Exception ex) {
-          //TODO:hitesh
-          /*if (securityLogger.warningEnabled()) {
-            securityLogger.warning(
-              LocalizedStrings.ServerConnection_0_AN_EXCEPTION_WAS_THROWN_WHILE_CLOSING_CLIENT_AUTHORIZATION_CALLBACK_1,
-              new Object[] {"", ex});
-          }*/
-        }
-        try {
-          AuthorizeRequestPP postAuthzReq = userAuth.getPostAuthzRequest(); 
-          if (postAuthzReq != null) {
-            postAuthzReq.close();
-            postAuthzReq = null;
-          }
-        }
-        catch (Exception ex) {
-          //TODO:hitesh
-          /*if (securityLogger.warningEnabled()) {
-            securityLogger.warning(
-              LocalizedStrings.ServerConnection_0_AN_EXCEPTION_WAS_THROWN_WHILE_CLOSING_CLIENT_POSTPROCESS_AUTHORIZATION_CALLBACK_1,
-              new Object[] {"", ex});
-          }*/
-        }
+      } catch (Exception ex) {
+        // TODO:hitesh
+        /*
+         * if (securityLogger.warningEnabled()) { securityLogger.warning( LocalizedStrings.
+         * ServerConnection_0_AN_EXCEPTION_WAS_THROWN_WHILE_CLOSING_CLIENT_POSTPROCESS_AUTHORIZATION_CALLBACK_1,
+         * new Object[] {"", ex}); }
+         */
+      }
-    
+
-  public void cleanup(boolean fromCacheClientProxy)
-  {
-    for (UserAuthAttributes  userAuth : this.uniqueIdVsUserAuth.values()) {
-      //isDurable is checked for multiuser in CQ 
-      if (!fromCacheClientProxy && !userAuth.isDurable()) {//from serverConnection class
+
+  public void cleanup(boolean fromCacheClientProxy) {
+    for (UserAuthAttributes userAuth : this.uniqueIdVsUserAuth.values()) {
+      // isDurable is checked for multiuser in CQ
+      if (!fromCacheClientProxy && !userAuth.isDurable()) {// from serverConnection class
+        cleanUserAuth(userAuth);
+      } else if (fromCacheClientProxy && userAuth.isDurable()) {// from cacheclientProxy class
-      else if (fromCacheClientProxy && userAuth.isDurable()) {//from cacheclientProxy class
-        cleanUserAuth(userAuth);
-      }
-    }       
+    }
-  
-  public void fillPreviousCQAuth(ClientUserAuths previousClientUserAuths)
-  {
-     for (Iterator<Map.Entry<String, UserAuthAttributes>> iter = previousClientUserAuths.cqNameVsUserAuth.entrySet().iterator(); iter.hasNext(); ) {
-       Map.Entry<String, UserAuthAttributes> ent = iter.next();
-       String cqName = ent.getKey();
-       UserAuthAttributes prevUaa = ent.getValue();
-       UserAuthAttributes newUaa = this.cqNameVsUserAuth.putIfAbsent(cqName, prevUaa);
-       
-       if(newUaa != null)
-       {
-         previousClientUserAuths.cleanUserAuth(prevUaa);
-       }
-    }     
+
+  public void fillPreviousCQAuth(ClientUserAuths previousClientUserAuths) {
+    for (Iterator<Map.Entry<String, UserAuthAttributes>> iter =
+        previousClientUserAuths.cqNameVsUserAuth.entrySet().iterator(); iter.hasNext();) {
+      Map.Entry<String, UserAuthAttributes> ent = iter.next();
+      String cqName = ent.getKey();
+      UserAuthAttributes prevUaa = ent.getValue();
+      UserAuthAttributes newUaa = this.cqNameVsUserAuth.putIfAbsent(cqName, prevUaa);
+
+      if (newUaa != null) {
+        previousClientUserAuths.cleanUserAuth(prevUaa);
+      }
+    }

