GEODE-5780: remove LoggingThreadGroup

GEODE-5783: have a single source for ThreadFactory

LoggingThreadGroup is no longer used and has been removed.

LoggingUnhandledExceptionHandler creates a single handler that logs
to a static logger. All geode threads should use this singleton.

LoggingThread should be used when creating a Thread.
It will automatically set a LoggingUnhandledExceptionHandler on the thread.

LoggingThreadFactory makes it easy to create a ThreadFactory instance that
uses LoggingThread and gives each thread a unique name.

LoggingExecutors should be used in place of Executors.
Each executor it creates will have a LoggingThreadFactory.

All the places geode used Thread, ThreadGroup, ThreadFactory, and Executors have
been changed to use these classes. The only exception is some of the add on modules
(like redis, and memcached) were not changed so that they would not use new internal
geode APIs.
This checkin uses these new classes in every place the previously used
LoggingThreadGroup. The code should also be reviewed for other places
we create Thread or ThreadFactory instances without using the LoggingThreadGroup.

-import org.apache.geode.internal.logging.LoggingThreadGroup;
+import org.apache.geode.internal.logging.LoggingThread;
-  private final ThreadGroup threadGroup =
-      LoggingThreadGroup.createThreadGroup("GatewaySenderAdvisor Threads");
-
-    this.lockObtainingThread = new Thread(threadGroup, new Runnable() {
-      @SuppressWarnings("synthetic-access")
-      public void run() {
-        GatewaySenderAdvisor.this.sender.getLifeCycleLock().readLock().lock();
-        try {
-          // Attempt to obtain the lock
-          if (!(GatewaySenderAdvisor.this.sender.isRunning())) {
-            return;
-          }
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Obtaining the lock on {}", this, GatewaySenderAdvisor.this.lockToken);
-          }
-
-          if (volunteerForPrimary()) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("{}: Obtained the lock on {}", this,
-                  GatewaySenderAdvisor.this.lockToken);
-            }
-            logger.info(LocalizedMessage.create(
-                LocalizedStrings.GatewaySender_0_IS_BECOMING_PRIMARY_GATEWAY_Sender,
-                GatewaySenderAdvisor.this));
-
-            // As soon as the lock is obtained, set primary
-            GatewaySenderAdvisor.this.makePrimary();
-          }
-        } catch (CancelException e) {
-          // no action necessary
-        } catch (Exception e) {
-          if (!sender.getStopper().isCancelInProgress()) {
-            logger.fatal(LocalizedMessage.create(
-                LocalizedStrings.GatewaySenderAdvisor_0_THE_THREAD_TO_OBTAIN_THE_FAILOVER_LOCK_WAS_INTERRUPTED__THIS_GATEWAY_SENDER_WILL_NEVER_BECOME_THE_PRIMARY,
-                GatewaySenderAdvisor.this), e);
-          }
-        } finally {
-          GatewaySenderAdvisor.this.sender.getLifeCycleLock().readLock().unlock();
+    String threadName = "Gateway Sender Primary Lock Acquisition Thread Volunteer";
+    this.lockObtainingThread = new LoggingThread(threadName, () -> {
+      GatewaySenderAdvisor.this.sender.getLifeCycleLock().readLock().lock();
+      try {
+        // Attempt to obtain the lock
+        if (!(GatewaySenderAdvisor.this.sender.isRunning())) {
+          return;
-      }
-    }, "Gateway Sender Primary Lock Acquisition Thread Volunteer");
+        if (logger.isDebugEnabled()) {
+          logger.debug("{}: Obtaining the lock on {}", this, GatewaySenderAdvisor.this.lockToken);
+        }
-    this.lockObtainingThread.setDaemon(true);
+        if (volunteerForPrimary()) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("{}: Obtained the lock on {}", this,
+                GatewaySenderAdvisor.this.lockToken);
+          }
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.GatewaySender_0_IS_BECOMING_PRIMARY_GATEWAY_Sender,
+              GatewaySenderAdvisor.this));
+
+          // As soon as the lock is obtained, set primary
+          GatewaySenderAdvisor.this.makePrimary();
+        }
+      } catch (CancelException e) {
+        // no action necessary
+      } catch (Exception e) {
+        if (!sender.getStopper().isCancelInProgress()) {
+          logger.fatal(LocalizedMessage.create(
+              LocalizedStrings.GatewaySenderAdvisor_0_THE_THREAD_TO_OBTAIN_THE_FAILOVER_LOCK_WAS_INTERRUPTED__THIS_GATEWAY_SENDER_WILL_NEVER_BECOME_THE_PRIMARY,
+              GatewaySenderAdvisor.this), e);
+        }
+      } finally {
+        GatewaySenderAdvisor.this.sender.getLifeCycleLock().readLock().unlock();
+      }
+    });

UPD40 MOV31 UPD42 INS8 INS60 INS21 MOV21 INS43 INS59 INS7 INS42 INS42 INS45 MOV22 INS14 INS43 INS42 INS86 INS42 MOV8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL45 DEL79 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL1 DEL14 DEL45 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31