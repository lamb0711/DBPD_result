Merge branch 'release/1.4.0'

-import org.apache.geode.internal.util.BlobHelper;
+import org.apache.geode.internal.cache.entries.AbstractOplogDiskRegionEntry;
+import org.apache.geode.internal.cache.entries.AbstractRegionEntry;
+import org.apache.geode.internal.cache.entries.DiskEntry;
+import org.apache.geode.internal.cache.entries.OffHeapRegionEntry;
+import org.apache.geode.internal.cache.eviction.EvictableEntry;
-import org.apache.geode.internal.cache.lru.LRUEntry;
+import org.apache.geode.internal.util.BlobHelper;
-   * This test hook is used to force the conditions for defect 48182. This hook is used by
-   * Bug48182JUnitTest.
+   * This test hook is used to force the conditions during entry destroy. This hook is used by
+   * DestroyEntryWithConcurrentOperationJUnitTest.
-  static Runnable testHookRunnableFor48182 = null;
+  static Runnable testHookRunnableForConcurrentOperation = null;
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-      Object v = re._getValue();
+      Object v = re.getValue();
+  @Override
+  @Override
-      final LocalRegion owner) {
+      final InternalRegion owner) {
+  @Override
-    /*
-     * for (SuspectEntryList l: this.suspectEntries.values()) { for (EntryEventImpl e: l) {
-     * e.release(); } }
-     */
+  @Override
-                  GatewaySenderEventImpl.release(re._getValue()); // OFFHEAP _getValue ok
+                  GatewaySenderEventImpl.release(re.getValue()); // OFFHEAP _getValue ok
+  @Override
-  public void lruUpdateCallback(int i) {
-    // By default do nothing; LRU maps needs to override this method
-  }
-
+  @Override
+  @Override
+  @Override
-  public boolean lruLimitExceeded(DiskRegionView drv) {
+  public boolean lruLimitExceeded(DiskRegionView diskRegionView) {
+  @Override
-  public void lruEntryFaultIn(LRUEntry entry) {
+  @Override
+  public void lruEntryFaultIn(EvictableEntry entry) {
-   * 
+   *
+  @Override
-            ._getValueRetain((RegionEntryContext) ((AbstractRegionMap) rm)._getOwnerObject(), true);
+            .getValueRetain((RegionEntryContext) ((AbstractRegionMap) rm)._getOwnerObject(), true);
+  @Override
+  @Override
+  @Override
+  @Override
-        if (null != testHookRunnableFor48182) {
-          testHookRunnableFor48182.run();
+        if (null != testHookRunnableForConcurrentOperation) {
+          testHookRunnableForConcurrentOperation.run();
+                owner.checkReadiness();
+                    owner.checkReadiness();
+  @Override
+  @Override
-   * 
+   *
+  @Override
+  @Override
+  @Override
-          event.setOldValue(oldValueInVMOrDisk, needToSetOldValue);
+          event.setOldValue(oldValueInVMOrDisk, true);
-        Object oldValueInVM = re._getValueRetain(event.getLocalRegion(), true); // OFFHEAP: re
-                                                                                // synced so can use
-                                                                                // its ref.
-
+        Object oldValueInVM = re.getValueRetain(event.getLocalRegion(), true); // OFFHEAP: re
+                                                                               // synced so can use
+                                                                               // its ref.
+        if (oldValueInVM == null) {
+          oldValueInVM = Token.NOT_AVAILABLE;
+        }
-          event.setOldValue(oldValueInVM, needToSetOldValue);
+          event.setOldValue(oldValueInVM);
-      Object ov = re._getValue(); // OFFHEAP _getValue is ok since re is synced and we only use it
-                                  // if its a GatewaySenderEventImpl.
+      Object ov = re.getValue(); // OFFHEAP _getValue is ok since re is synced and we only use it
+                                 // if its a GatewaySenderEventImpl.
+  @Override
-   * 
-   * @param op
+   *
+  @Override
+  @Override
-   * 
+   *
+  @Override
+  @Override
+  @Override
+  public long getEvictions() {
+    return 0;
+  }
+
+  @Override
+  public void incRecentlyUsed() {
+    // nothing by default
+  }
+
+  @Override
-

MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS31 INS31 INS31 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV8 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 UPD66 UPD66 UPD42 UPD42 INS34 INS25 UPD42 INS27 INS8 UPD42 UPD42 INS42 INS33 INS21 UPD42 UPD42 INS7 UPD42 INS9 INS42 INS40 INS21 INS32 INS42 INS42 INS21 UPD42 INS32 INS42 INS42 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31 DEL31 DEL42 DEL42 DEL42 DEL65