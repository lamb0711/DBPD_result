GEODE-7504: region eviction support (#4428)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>

* added eviction support to RegionConverter and RegionConfigValidator
+  private final ClassNameConverter classNameConverter = new ClassNameConverter();
+
+
+      if (regionAttributes.getEvictionAttributes() != null) {
+        RegionAttributesType.EvictionAttributes evictionAttributes =
+            regionAttributes.getEvictionAttributes();
+        if (evictionAttributes.getLruMemorySize() != null) {
+          region.setEviction(convertFrom(evictionAttributes.getLruMemorySize()));
+        }
+        if (evictionAttributes.getLruEntryCount() != null) {
+          region.setEviction(convertFrom(evictionAttributes.getLruEntryCount()));
+        }
+        if (evictionAttributes.getLruHeapPercentage() != null) {
+          region.setEviction(convertFrom(evictionAttributes.getLruHeapPercentage()));
+        }
+      }
-    region.setRegionAttributes(attributesType);
+
+    if (configObject.getEviction() != null) {
+      attributesType.setEvictionAttributes(convertFrom(configObject.getEviction()));
+    }
+
+    region.setRegionAttributes(attributesType);
+  private RegionAttributesType.EvictionAttributes convertFrom(Region.Eviction eviction) {
+    return RegionAttributesType.EvictionAttributes.generate(getEvictionActionString(eviction),
+        eviction.getMemorySizeMb(), eviction.getEntryCount(), eviction.getObjectSizer());
+  }
+
+  private String getEvictionActionString(Region.Eviction eviction) {
+    if (eviction.getAction() == null) {
+      return "local-destroy";
+    } else {
+      switch (eviction.getAction()) {
+        case LOCAL_DESTROY:
+          return "local-destroy";
+        case OVERFLOW_TO_DISK:
+          return "overflow-to-disk";
+        default:
+          throw new IllegalStateException("Unhandled eviction action: " + eviction.getAction());
+      }
+    }
+  }
+
+  private Region.EvictionAction getEvictionAction(EnumActionDestroyOverflow evictionAction) {
+    switch (evictionAction) {
+      case LOCAL_DESTROY:
+        return Region.EvictionAction.LOCAL_DESTROY;
+      case OVERFLOW_TO_DISK:
+        return Region.EvictionAction.OVERFLOW_TO_DISK;
+      default:
+        throw new IllegalStateException("Unhandled eviction action xml: " + evictionAction);
+    }
+  }
+
+  Region.Eviction convertFrom(
+      RegionAttributesType.EvictionAttributes.LruMemorySize evictionAttributes) {
+    Region.Eviction eviction = new Region.Eviction();
+    eviction.setAction(getEvictionAction(evictionAttributes.getAction()));
+    eviction.setMemorySizeMb(Integer.parseInt(evictionAttributes.getMaximum()));
+    eviction.setObjectSizer(classNameConverter.fromXmlObject(evictionAttributes));
+    return eviction;
+  }
+
+  Region.Eviction convertFrom(
+      RegionAttributesType.EvictionAttributes.LruEntryCount evictionAttributes) {
+    Region.Eviction eviction = new Region.Eviction();
+    eviction.setAction(getEvictionAction(evictionAttributes.getAction()));
+    eviction.setEntryCount(Integer.parseInt(evictionAttributes.getMaximum()));
+    return eviction;
+  }
+
+  Region.Eviction convertFrom(
+      RegionAttributesType.EvictionAttributes.LruHeapPercentage evictionAttributes) {
+    Region.Eviction eviction = new Region.Eviction();
+    eviction.setAction(getEvictionAction(evictionAttributes.getAction()));
+    eviction.setObjectSizer(classNameConverter.fromXmlObject(evictionAttributes));
+    eviction.setType(Region.EvictionType.HEAP_PERCENTAGE);
+    return eviction;
+  }
+

INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 MOV21 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS42 INS42 INS14 INS25 INS40 INS43 INS42 INS41 INS42 INS43 INS42 INS25 INS40 INS43 INS42 INS50 INS40 INS43 INS42 INS60 INS21 INS21 INS21 INS41 INS40 INS43 INS42 INS60 INS21 INS21 INS41 INS40 INS43 INS42 INS60 INS21 INS21 INS21 INS41 INS43 INS27 INS8 INS40 INS32 INS40 INS27 INS8 INS8 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS53 INS40 INS43 INS59 INS32 INS32 INS32 INS42 INS40 INS43 INS59 INS32 INS32 INS42 INS40 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS25 INS32 INS33 INS21 INS40 INS42 INS32 INS32 INS32 INS32 INS32 INS33 INS41 INS50 INS42 INS40 INS42 INS40 INS14 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS49 INS41 INS49 INS41 INS49 INS53 INS43 INS27 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS60 INS25 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS14 INS42 INS45 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS32 INS43 INS27 INS40 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42