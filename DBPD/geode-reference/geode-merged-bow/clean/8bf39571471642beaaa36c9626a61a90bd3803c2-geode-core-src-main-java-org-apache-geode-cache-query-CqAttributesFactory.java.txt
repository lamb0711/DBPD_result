Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The factory class for the CqAttributes instance. This provides the CqListener 
- * setter methods. This class maintains state for and creates new instances of the 
- * CqAttributes interface for new CqQuery instances.
- * If you create a factory with the default constructor, then the factory is set 
- * up to create attributes with all default settings. You can also create a factory 
- * by providing a <code>CqAttributes</code>, which will set up the new factory with 
- * the settings provided in that attributes instance.
+ * The factory class for the CqAttributes instance. This provides the CqListener setter methods.
+ * This class maintains state for and creates new instances of the CqAttributes interface for new
+ * CqQuery instances. If you create a factory with the default constructor, then the factory is set
+ * up to create attributes with all default settings. You can also create a factory by providing a
+ * <code>CqAttributes</code>, which will set up the new factory with the settings provided in that
+ * attributes instance.
- * <p>Once a <code>CqAttributes</code> is created, it can only be modified
- * after it has been used to create a <code>CqQuery</code>.
+ * <p>
+ * Once a <code>CqAttributes</code> is created, it can only be modified after it has been used to
+ * create a <code>CqQuery</code>.
-  
+
-   * Creates a new instance of AttributesFactory ready to create a
-   * <code>CqAttributes</code> with default settings.
+   * Creates a new instance of AttributesFactory ready to create a <code>CqAttributes</code> with
+   * default settings.
-  public CqAttributesFactory() {
-  }
-  
+  public CqAttributesFactory() {}
+
-   * Creates a new instance of CqAttributesFactory ready to create a
-   * <code>CqAttributes</code> with the same settings as those in the
-   * specified <code>CqAttributes</code>.
+   * Creates a new instance of CqAttributesFactory ready to create a <code>CqAttributes</code> with
+   * the same settings as those in the specified <code>CqAttributes</code>.
-   * @param cqAttributes
-   *          the <code>CqAttributes</code> used to initialize this
-   *          AttributesFactory
+   * @param cqAttributes the <code>CqAttributes</code> used to initialize this AttributesFactory
-    
+
+   * 
-      throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL
+              .toLocalizedString());
-  
+
-   * @param cqListeners a possibly null or empty array of listeners to add to this 
-   * factory.
-   * @throws IllegalArgumentException if the <code>cqListeners</code> array has a 
-   * null element
+   * 
+   * @param cqListeners a possibly null or empty array of listeners to add to this factory.
+   * @throws IllegalArgumentException if the <code>cqListeners</code> array has a null element
-        throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());
+        throw new IllegalArgumentException(
+            LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT
+                .toLocalizedString());
-      
-  /** 
+
+  /**
+   * 
-    return (CqAttributes)this.cqAttributes.clone();
+    return (CqAttributes) this.cqAttributes.clone();

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66