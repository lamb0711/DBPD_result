Merge branch 'develop' into feature/GEODE-17-2

-import com.gemstone.gemfire.cache.RegionDestroyedException;
-  
+
+  /**
+   * The peekedEventsProcessing queue is used when the batch size is reduced due to a MessageTooLargeException
+   */
+  private BlockingQueue<GatewaySenderEventImpl> peekedEventsProcessing = new LinkedBlockingQueue<GatewaySenderEventImpl>();
+
+  /**
+   * The peekedEventsProcessingInProgress boolean denotes that processing existing peeked events is in progress
+   */
+  private boolean peekedEventsProcessingInProgress = false;
+
+
+    // Reset the in progress boolean and queue for peeked events in progress
+    this.peekedEventsProcessingInProgress = false;
+    this.peekedEventsProcessing.clear();
-    if (this.resetLastPeeked) {
-      batch.addAll(peekedEvents);
-      this.resetLastPeeked = false;
-      if (isDebugEnabled) {
-        StringBuffer buffer = new StringBuffer();
-        for (GatewaySenderEventImpl ge : peekedEvents) {
-          buffer.append("event :");
-          buffer.append(ge);
-        }
-        logger.debug("Adding already peeked events to the batch {}", buffer);
-      }
-    }
-    
+    // Add peeked events
+    addPeekedEvents(batch, batchSize);
+
+  private void addPeekedEvents(List batch, int batchSize) {
+    if (this.resetLastPeeked) {
+      if (this.peekedEventsProcessingInProgress) {
+        // Peeked event processing is in progress. This means that the original peekedEvents
+        // contained > batch size events due to a reduction in the batch size. Create a batch
+        // from the peekedEventsProcessing queue.
+        addPreviouslyPeekedEvents(batch, batchSize);
+      } else if (peekedEvents.size() <= batchSize) {
+        // This is the normal case. The connection was lost while processing a batch.
+        // This recreates the batch from the current peekedEvents.
+        batch.addAll(peekedEvents);
+        this.resetLastPeeked = false;
+      } else {
+        // The peekedEvents queue is > batch size. This means that the previous batch size was
+        // reduced due to MessageTooLargeException. Create a batch from the peekedEventsProcessing queue.
+        this.peekedEventsProcessing.addAll(this.peekedEvents);
+        this.peekedEventsProcessingInProgress = true;
+        addPreviouslyPeekedEvents(batch, batchSize);
+      }
+      if (logger.isDebugEnabled()) {
+        StringBuffer buffer = new StringBuffer();
+        for (Object ge : batch) {
+          buffer.append("event :");
+          buffer.append(ge);
+        }
+        logger.debug("Adding already peeked events to the batch {}", buffer);
+      }
+    }
+  }
+
+  private void addPreviouslyPeekedEvents(List batch, int batchSize) {
+    for (int i=0; i<batchSize; i++) {
+      batch.add(this.peekedEventsProcessing.remove());
+      if (this.peekedEventsProcessing.isEmpty()) {
+        this.resetLastPeeked = false;
+        this.peekedEventsProcessingInProgress = false;
+        break;
+      }
+    }
+  }
+

INS23 INS23 INS31 INS31 INS29 INS83 INS74 INS59 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS43 INS43 INS42 INS14 INS65 INS42 INS9 INS21 INS21 INS21 INS43 INS42 INS39 INS42 MOV25 INS43 INS42 INS39 INS42 INS24 INS66 INS42 INS42 INS74 INS66 INS7 INS32 INS32 INS42 INS42 INS58 INS27 INS37 INS8 INS43 MOV43 INS22 INS9 INS22 INS42 INS42 INS42 INS42 INS25 INS39 INS59 INS42 INS42 INS42 INS21 INS25 INS42 INS52 INS42 INS52 INS42 INS22 INS8 INS25 INS32 INS42 INS34 INS32 INS32 INS8 INS52 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS21 INS21 INS10 INS32 INS32 INS42 MOV21 MOV21 INS21 INS21 INS21 UPD42 INS22 INS42 INS52 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS43 INS52 INS42 INS22 INS9 INS22 INS9 INS22 INS42 INS22 INS22 INS9 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL42