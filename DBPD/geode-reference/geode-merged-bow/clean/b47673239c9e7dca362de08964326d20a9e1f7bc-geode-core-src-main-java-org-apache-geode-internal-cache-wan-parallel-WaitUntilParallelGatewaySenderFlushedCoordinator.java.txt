GEODE-2852: Enforce lucene waitUntilFlushed timeout for all buckets

* Since we are now batching waitUntilFlushed threads, do not submit more WaitUntilFlushed Callables if timeout exceeded
* create the WaitUntilFlushed Callables just prior to submitting for execution so the remaining nanoSeconds can be passed in and applied for each bucket.
* updated tests to accommodate changes

+import java.util.HashSet;
+import java.util.Set;
-    // Create callables for local buckets
-    List<WaitUntilBucketRegionQueueFlushedCallable> callables =
-        buildWaitUntilBucketRegionQueueFlushedCallables(pr);
-
-    // Submit local callables for execution
-    if (logger.isDebugEnabled()) {
-      logger.debug("WaitUntilParallelGatewaySenderFlushedCoordinator: Created and being submitted "
-          + callables.size() + " callables=" + callables);
-    }
-    for (Callable<Boolean> callable : callables) {
+    long nanosRemaining = unit.toNanos(timeout);
+    long endTime = System.nanoTime() + nanosRemaining;
+    Set<BucketRegion> localBucketRegions = getLocalBucketRegions(pr);
+    for (BucketRegion br : localBucketRegions) {
+      // timeout exceeded, do not submit more callables, return localResult false
+      if (System.nanoTime() >= endTime) {
+        localResult = false;
+        break;
+      }
+      // create and submit callable with updated timeout
+      Callable<Boolean> callable = createWaitUntilBucketRegionQueueFlushedCallable(
+          (BucketRegionQueue) br, nanosRemaining, TimeUnit.NANOSECONDS);
+      if (logger.isDebugEnabled()) {
+        logger.debug(
+            "WaitUntilParallelGatewaySenderFlushedCoordinator: Submitting callable for bucket "
+                + br.getId() + " callable=" + callable + " nanosRemaining=" + nanosRemaining);
+      }
-      if ((callableCount % CALLABLES_CHUNK_SIZE) == 0 || callableCount == callables.size()) {
+      if ((callableCount % CALLABLES_CHUNK_SIZE) == 0
+          || callableCount == localBucketRegions.size()) {
+      nanosRemaining = endTime - System.nanoTime();
-  protected List<WaitUntilBucketRegionQueueFlushedCallable> buildWaitUntilBucketRegionQueueFlushedCallables(
-      PartitionedRegion pr) {
-    List<WaitUntilBucketRegionQueueFlushedCallable> callables = new ArrayList<>();
+  protected Set<BucketRegion> getLocalBucketRegions(PartitionedRegion pr) {
+    Set<BucketRegion> localBucketRegions = new HashSet<BucketRegion>();
-      for (BucketRegion br : pr.getDataStore().getAllLocalBucketRegions()) {
-        callables.add(new WaitUntilBucketRegionQueueFlushedCallable((BucketRegionQueue) br,
-            this.timeout, this.unit));
-      }
+      localBucketRegions = pr.getDataStore().getAllLocalBucketRegions();
-    return callables;
+    return localBucketRegions;
+  }
+
+  protected WaitUntilBucketRegionQueueFlushedCallable createWaitUntilBucketRegionQueueFlushedCallable(
+      BucketRegionQueue br, long timeout, TimeUnit unit) {
+    return new WaitUntilBucketRegionQueueFlushedCallable(br, timeout, unit);

INS26 INS26 INS40 INS40 INS31 INS31 MOV60 MOV83 UPD74 MOV74 UPD42 MOV42 MOV44 INS8 INS83 MOV43 INS42 INS44 INS44 INS44 INS8 INS60 INS60 UPD43 UPD43 MOV60 INS25 INS41 INS43 INS42 INS39 INS42 INS43 INS42 MOV41 INS39 INS59 INS39 INS59 UPD74 UPD42 UPD42 UPD42 UPD74 MOV32 INS8 INS42 MOV42 INS42 INS14 INS42 INS32 INS42 INS27 UPD43 UPD43 UPD42 MOV43 MOV42 INS25 INS60 INS25 INS21 UPD43 INS43 UPD42 INS21 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS27 INS8 MOV74 INS59 MOV32 INS8 INS7 UPD42 INS42 UPD74 INS7 INS42 INS42 INS32 INS42 INS21 INS10 INS42 INS32 INS21 INS42 INS27 UPD43 INS43 INS42 MOV32 INS42 INS42 INS7 INS42 MOV11 INS42 INS40 INS32 INS42 INS32 UPD42 INS42 INS42 INS9 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31