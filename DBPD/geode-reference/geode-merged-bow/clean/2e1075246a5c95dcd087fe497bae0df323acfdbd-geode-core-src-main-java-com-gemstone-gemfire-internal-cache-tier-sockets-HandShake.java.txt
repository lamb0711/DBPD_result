Merge branch 'release/1.0.0-incubating.M3'

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
-import java.io.DataOutput;
+import java.io.DataOutput;
-import com.gemstone.gemfire.internal.SocketUtils;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-  /** @since 6.0.3
+  /** @since GemFire 6.0.3
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-        InputStream is = SocketUtils.getInputStream(sock);//sock.getInputStream();
+        InputStream is = sock.getInputStream();
-          DataOutputStream dos = new DataOutputStream(SocketUtils.getOutputStream(sock));//sock.getOutputStream());
+          DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
-          String authenticator = this.system.getProperties().getProperty(
-              DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME);
-            this.credentials = readCredentials(dis, dos, authenticator, sys);
+            this.credentials = readCredentials(dis, dos, sys);
-            this.credentials = this
-                .readCredential(dis, dos, authenticator, sys);
+            this.credentials = this.readCredential(dis, dos, sys);
-     String clientConflationValue = this.system.getProperties().getProperty(
-         DistributionConfig.CLIENT_CONFLATION_PROP_NAME);
+     String clientConflationValue = this.system.getProperties().getProperty(CONFLATE_EVENTS);
-        String authInitMethod = this.system.getProperties().getProperty(
-            DistributionConfig.SECURITY_CLIENT_AUTH_INIT_NAME);
+        String authInitMethod = this.system.getProperties().getProperty(SECURITY_CLIENT_AUTH_INIT);
-  public Properties readCredential(DataInputStream dis,
-      DataOutputStream dos, String authenticator, DistributedSystem system)
+  public Properties readCredential(DataInputStream dis, DataOutputStream dos, DistributedSystem system)
-    boolean requireAuthentication = (authenticator != null && authenticator
-        .length() > 0);
+    boolean requireAuthentication = GeodeSecurityUtil.isClientSecurityRequired();
-    String authenticator = config.getSecurityClientAuthenticator();
-        || (authenticator != null && authenticator.length() > 0)) {
+        || GeodeSecurityUtil.isClientSecurityRequired()) {
-      DataOutputStream dos = new DataOutputStream(SocketUtils.getOutputStream(sock));//sock.getOutputStream());
-      final InputStream in = SocketUtils.getInputStream(sock);//sock.getInputStream();
+      DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
+      final InputStream in = sock.getInputStream();
-      String authInit = this.system.getProperties().getProperty(
-          DistributionConfig.SECURITY_CLIENT_AUTH_INIT_NAME);
+      String authInit = this.system.getProperties().getProperty(SECURITY_CLIENT_AUTH_INIT);
-      DataOutputStream dos = new DataOutputStream(SocketUtils.getOutputStream(sock));//sock.getOutputStream());
-      final InputStream in = SocketUtils.getInputStream(sock);//sock.getInputStream());
+      DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
+      final InputStream in = sock.getInputStream();
-        Method instanceGetter = ClassLoadUtil.methodFromName(authInitMethod);
-        AuthInitialize auth = (AuthInitialize)instanceGetter.invoke(null,
-            (Object[])null);
-        if (auth != null) {
-          auth.init(logWriter, 
-                    securityLogWriter);
-          try {
-            credentials = auth.getCredentials(securityProperties, server,
-                isPeer);
-          }
-          finally {
-            auth.close();
-          }
+        AuthInitialize auth = GeodeSecurityUtil.getObjectOfType(authInitMethod, AuthInitialize.class);
+        auth.init(logWriter, securityLogWriter);
+        try {
+          credentials = auth.getCredentials(securityProperties, server, isPeer);
+        }
+        finally {
+          auth.close();
-    String authInitMethod = this.system.getProperties().getProperty(
-        DistributionConfig.SECURITY_CLIENT_AUTH_INIT_NAME);
+    String authInitMethod = this.system.getProperties().getProperty(SECURITY_CLIENT_AUTH_INIT);
-      DataOutputStream dos, String authenticator, DistributedSystem system)
+      DataOutputStream dos, DistributedSystem system)
+    boolean requireAuthentication = GeodeSecurityUtil.isClientSecurityRequired();
-    boolean requireAuthentication = (authenticator != null && authenticator
-        .length() > 0);
-  
-  public static Principal verifyCredentials(String authenticatorMethod,
+
+  /**
+   * this could return either a Subject or a Principal depending on if it's integrated security or not
+   */
+  public static Object verifyCredentials(String authenticatorMethod,
+    if (!AcceptorImpl.isAuthenticationRequired()) {
+      return null;
+    }
+
-      if (authenticatorMethod == null || authenticatorMethod.length() == 0) {
-        return null;
+      if(AcceptorImpl.isIntegratedSecurity()){
+        String username = credentials.getProperty("security-username");
+        String password = credentials.getProperty("security-password");
+        return GeodeSecurityUtil.login(username, password);
-      Method instanceGetter = ClassLoadUtil.methodFromName(authenticatorMethod);
-      auth = (Authenticator)instanceGetter.invoke(null, (Object[])null);
+      else {
+        Method instanceGetter = ClassLoadUtil.methodFromName(authenticatorMethod);
+        auth = (Authenticator) instanceGetter.invoke(null, (Object[]) null);
+        auth.init(securityProperties, logWriter, securityLogWriter);
+        return auth.authenticate(credentials, member);
+      }
+    }
+    catch(AuthenticationFailedException ex){
+      throw ex;
-      throw new AuthenticationFailedException(
-          LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
-    }
-    if (auth == null) {
-      throw new AuthenticationFailedException(
-        LocalizedStrings.HandShake_AUTHENTICATOR_INSTANCE_COULD_NOT_BE_OBTAINED.toLocalizedString()); 
-    }
-    auth.init(securityProperties, logWriter, securityLogWriter);
-    Principal principal;
-    try {
-      principal = auth.authenticate(credentials, member);
+      throw new AuthenticationFailedException(ex.getMessage(), ex);
-      auth.close();
+      if(auth!=null) auth.close();
-    return principal;
-  public Principal verifyCredentials() throws AuthenticationRequiredException,
+  public Object verifyCredentials() throws AuthenticationRequiredException,
-        DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME);
+        SECURITY_CLIENT_AUTHENTICATOR);
-        DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME);
-    Properties peerWanProps = readCredentials(dis, dos, authenticator,
-        this.system);
+        SECURITY_CLIENT_AUTHENTICATOR);
+    Properties peerWanProps = readCredentials(dis, dos, this.system);

MOV26 MOV26 MOV26 UPD40 UPD40 MOV8 MOV60 INS29 UPD43 MOV25 MOV43 MOV60 INS54 MOV41 INS65 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV8 MOV12 MOV12 INS66 INS38 MOV8 INS8 INS12 INS8 INS32 MOV32 INS32 INS32 INS25 INS44 INS8 INS25 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV43 MOV43 MOV27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS8 MOV8 MOV43 INS42 INS53 MOV27 MOV21 INS42 INS42 INS60 INS42 INS42 INS60 INS60 INS41 MOV21 INS41 INS42 MOV43 UPD42 INS42 MOV43 UPD42 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS32 MOV32 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS45 INS42 INS42 INS45 MOV43 UPD42 MOV22 MOV22 DEL42 DEL42 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL40 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL34 DEL27 DEL27 DEL36 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL85 DEL5 DEL33 DEL11 DEL32 DEL11 DEL59 DEL60 DEL25 DEL54 DEL8 DEL40 DEL42 DEL44 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL36 DEL42 DEL33 DEL27 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL25 DEL40 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL8 DEL54 DEL42 DEL41 DEL42 DEL43 DEL40 DEL40 DEL42