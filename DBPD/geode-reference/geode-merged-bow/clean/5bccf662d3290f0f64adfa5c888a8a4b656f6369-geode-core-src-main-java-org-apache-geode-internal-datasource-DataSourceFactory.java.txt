GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE));
+      logger.error("DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL));
+      logger.error("DataSourceFactory::getSimpleDataSource:URL String to Database is null");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL
-              .toLocalizedString());
+          "DataSourceFactory::getSimpleDataSource:URL String to Database is null");
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0,
-          ex.getLocalizedMessage()), ex);
+      logger.error(String.format(
+          "DataSourceFactory::getSimpleDataSource:Exception while creating GemfireBasicDataSource.Exception String=%s",
+          ex.getLocalizedMessage()),
+          ex);
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0
-              .toLocalizedString(ex.getLocalizedMessage()),
+          String.format(
+              "DataSourceFactory::getSimpleDataSource:Exception while creating GemfireBasicDataSource.Exception String=%s",
+              ex.getLocalizedMessage()),
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE));
+      logger.error(
+          "DataSourceFactory::getManagedDataSource:Managed Connection factory class is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getManagedDataSource:Managed Connection factory class is not available");
-        logger.error(LocalizedMessage.create(
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
-            ex), null);
+        logger.error(String.format(
+            "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+            ex));
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-                .toLocalizedString(ex));
+            String.format(
+                "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+                ex));
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
-          ex), null);
+      logger.error(
+          "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+          ex.toString());
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-              .toLocalizedString(ex));
+          String.format(
+              "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+              ex));
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
+      logger.error(
+          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0
-              .toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0,
-          ex), ex);
+          String.format(
+              "DataSourceFactory::getPooledDataSource:Exception creating ConnectionPoolDataSource.Exception string=%s",
+              new Object[] {ex});
+      logger.error(String.format(
+          "DataSourceFactory::getPooledDataSource:Exception creating ConnectionPoolDataSource.Exception string=%s",
+          ex),
+          ex);
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
+      logger.error(
+          "DataSourceFactory::getTranxDataSource:XADataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getTranxDataSource:XADataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0
-              .toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0,
-          ex), ex);
+          String.format(
+              "DataSourceFactory::getTranxDataSource:Exception in creating GemFireTransactionDataSource. Exception string=%s",
+              new Object[] {ex});
+      logger.error(String.format(
+          "DataSourceFactory::getTranxDataSource:Exception in creating GemFireTransactionDataSource. Exception string=%s",
+          ex),
+          ex);
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_CLASS_WITH_THE_GIVEN_CONFIGPROPERTYTYPE_CLASSNAME_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating Class with the given config-property-type classname. Exception string=%s",
+                ex.toString());
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_METHOD_USING_CONFIGPROPERTYNAME_PROPERTY_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating method using config-property-name property. Exception string=%s",
+                ex.toString());
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_INSTANCE_OF_THE_CLASS_USING_THE_CONSTRUCTOR_WITH_A_STRING_PARAMETER_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating instance of the class using the constructor with a String parameter. Exception string=%s",
+                ex.toString());

MOV12 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 MOV44 INS44 MOV44 MOV32 MOV32 INS45 INS43 INS42 MOV42 UPD42 INS42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 UPD42 INS45 UPD42 INS42 INS45 UPD42 UPD42 INS45 INS42 UPD42 MOV42 UPD42 UPD42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL33 DEL40 DEL40 DEL42 DEL33 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40