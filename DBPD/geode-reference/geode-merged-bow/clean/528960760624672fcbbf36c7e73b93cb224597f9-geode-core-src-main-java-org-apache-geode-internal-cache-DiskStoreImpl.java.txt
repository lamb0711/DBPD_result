GEODE-5780: remove LoggingThreadGroup

GEODE-5783: have a single source for ThreadFactory

LoggingThreadGroup is no longer used and has been removed.

LoggingUnhandledExceptionHandler creates a single handler that logs
to a static logger. All geode threads should use this singleton.

LoggingThread should be used when creating a Thread.
It will automatically set a LoggingUnhandledExceptionHandler on the thread.

LoggingThreadFactory makes it easy to create a ThreadFactory instance that
uses LoggingThread and gives each thread a unique name.

LoggingExecutors should be used in place of Executors.
Each executor it creates will have a LoggingThreadFactory.

All the places geode used Thread, ThreadGroup, ThreadFactory, and Executors have
been changed to use these classes. The only exception is some of the add on modules
(like redis, and memcached) were not changed so that they would not use new internal
geode APIs.
This checkin uses these new classes in every place the previously used
LoggingThreadGroup. The code should also be reviewed for other places
we create Thread or ThreadFactory instances without using the LoggingThreadGroup.

+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
+import org.apache.geode.internal.logging.LoggingExecutors;
+import org.apache.geode.internal.logging.LoggingThread;
-  private final ThreadPoolExecutor diskStoreTaskPool;
+  private final ExecutorService diskStoreTaskPool;
-  private final ThreadPoolExecutor delayedWritePool;
+  private final ExecutorService delayedWritePool;
-    int MAXT = DiskStoreImpl.MAX_CONCURRENT_COMPACTIONS;
-    final ThreadGroup compactThreadGroup =
-        LoggingThreadGroup.createThreadGroup("Oplog Compactor Thread Group", logger);
-    final ThreadFactory compactThreadFactory =
-        GemfireCacheHelper.CreateThreadFactory(compactThreadGroup, "Idle OplogCompactor");
-    this.diskStoreTaskPool = new ThreadPoolExecutor(MAXT, MAXT, 10, TimeUnit.SECONDS,
-        new LinkedBlockingQueue(), compactThreadFactory);
-    this.diskStoreTaskPool.allowCoreThreadTimeOut(true);
-
-
-    final ThreadGroup deleteThreadGroup =
-        LoggingThreadGroup.createThreadGroup("Oplog Delete Thread Group", logger);
-
-    final ThreadFactory deleteThreadFactory =
-        GemfireCacheHelper.CreateThreadFactory(deleteThreadGroup, "Oplog Delete Task");
-    this.delayedWritePool = new ThreadPoolExecutor(1, 1, 10, TimeUnit.SECONDS,
-        new LinkedBlockingQueue(MAX_PENDING_TASKS), deleteThreadFactory,
-        new ThreadPoolExecutor.CallerRunsPolicy());
-    this.delayedWritePool.allowCoreThreadTimeOut(true);
+    this.diskStoreTaskPool = LoggingExecutors.newFixedThreadPoolWithFeedSize("Idle OplogCompactor",
+        MAX_CONCURRENT_COMPACTIONS, Integer.MAX_VALUE);
+    this.delayedWritePool =
+        LoggingExecutors.newFixedThreadPoolWithFeedSize("Oplog Delete Task", 1, MAX_PENDING_TASKS);
-    this.flusherThread = new Thread(
-        LoggingThreadGroup.createThreadGroup(
-            LocalizedStrings.DiskRegion_DISK_WRITERS.toLocalizedString(), logger),
-        new FlusherThread(this), thName);
-    this.flusherThread.setDaemon(true);
+    this.flusherThread = new LoggingThread(thName, new FlusherThread(this));
-    final ThreadGroup exceptionHandlingGroup =
-        LoggingThreadGroup.createThreadGroup("Disk Store Exception Handling Group", logger);
+    Thread thread = new LoggingThread("Disk store exception handler", false, () -> {
+      try {
+        // now close the cache
+        getCache().close(sid.toLocalizedString(DiskStoreImpl.this.getName(), dae), dae);
+        _testHandleDiskAccessException.countDown();
-    Thread thread = new Thread(exceptionHandlingGroup, "Disk store exception handler") {
-      public void run() {
-        try {
-          // now close the cache
-          getCache().close(sid.toLocalizedString(DiskStoreImpl.this.getName(), dae), dae);
-          _testHandleDiskAccessException.countDown();
-
-        } catch (Exception e) {
-          logger.error(LocalizedMessage.create(
-              LocalizedStrings.LocalRegion_AN_EXCEPTION_OCCURRED_WHILE_CLOSING_THE_CACHE), e);
-        }
+      } catch (Exception e) {
+        logger.error(LocalizedMessage.create(
+            LocalizedStrings.LocalRegion_AN_EXCEPTION_OCCURRED_WHILE_CLOSING_THE_CACHE), e);
-    };
+    });
-    return executeDiskStoreAsyncTask(runnable, this.diskStoreTaskPool);
+    return executeAsyncTask(runnable, this.diskStoreTaskPool);
-    Future<?> f = executeDiskStoreTask(task, this.delayedWritePool);
+    Future<?> f = executeTask(task, this.delayedWritePool);
-  private Future<?> executeDiskStoreTask(final Runnable runnable, ThreadPoolExecutor executor) {
+  private Future<?> executeTask(final Runnable runnable, ExecutorService executor) {
-  private boolean executeDiskStoreAsyncTask(final Runnable runnable, ThreadPoolExecutor executor) {
+  private boolean executeAsyncTask(final Runnable runnable, ExecutorService executor) {
-  private Future<?> executeDiskStoreTask(DiskStoreTask r, ThreadPoolExecutor executor) {
+  private Future<?> executeDiskStoreTask(DiskStoreTask r, ExecutorService executor) {
-  private boolean executeDiskStoreAsyncTask(DiskStoreTask r, ThreadPoolExecutor executor) {
+  private boolean executeDiskStoreAsyncTask(DiskStoreTask r, ExecutorService executor) {

MOV26 MOV26 UPD40 UPD40 UPD40 MOV31 UPD43 UPD43 UPD42 MOV44 INS8 UPD42 UPD42 UPD42 UPD42 INS21 MOV60 MOV25 MOV25 MOV60 MOV21 INS60 MOV21 UPD43 UPD43 UPD43 UPD43 INS7 MOV43 INS59 UPD42 UPD42 UPD42 UPD42 INS32 MOV22 INS32 MOV14 INS42 INS14 UPD42 INS42 INS42 INS45 INS42 INS40 UPD42 MOV42 INS42 MOV45 INS34 INS42 UPD43 INS43 INS45 INS9 INS86 UPD42 UPD42 INS42 MOV8 DEL40 DEL26 DEL39 DEL42 DEL40 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL34 DEL40 DEL42 DEL43 DEL14 DEL42 DEL14 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL34 DEL34 DEL34 DEL40 DEL42 DEL43 DEL42 DEL14 DEL42 DEL40 DEL43 DEL14 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL1 DEL14 DEL59 DEL60 DEL8 DEL31