Merge pull request #2670 from onichols-pivotal/GEODE-5905

GEODE-5905 no need for Java 12 in pipeline yet
+import java.io.IOException;
-import java.util.ArrayList;
-import org.apache.commons.io.FileUtils;
+import org.junit.rules.TemporaryFolder;
- *
- * The rule will try to clean up the working dir as best as it can. Any first level children
- * created in the test will be cleaned up after the test.
+
+  protected String oldUserDir;
+
+  protected transient TemporaryFolder temporaryFolder;
+  protected File workingDir;
-  private List<File> firstLevelChildrenFile = new ArrayList<>();
-  private boolean cleanWorkingDir = true;
-
+    oldUserDir = System.getProperty("user.dir");
-    firstLevelChildrenFile = Arrays.asList(getWorkingDir().listFiles());
-    // delete the first-level children files that are created in the tests
-    if (cleanWorkingDir)
-      Arrays.stream(getWorkingDir().listFiles())
-          // do not delete the pre-existing files
-          .filter(f -> !firstLevelChildrenFile.contains(f))
-          // do not delete the dunit folder that might have been created by dunit launcher
-          .filter(f -> !(f.isDirectory() && f.getName().equals("dunit")))
-          .forEach(FileUtils::deleteQuietly);
+    if (temporaryFolder != null) {
+      temporaryFolder.delete();
+    }
+
+    if (oldUserDir == null) {
+      System.clearProperty("user.dir");
+    } else {
+      System.setProperty("user.dir", oldUserDir);
+    }
+  public T withWorkingDir(File workingDir) {
+    this.workingDir = workingDir;
+    if (workingDir != null) {
+      System.setProperty("user.dir", workingDir.toString());
+    }
+    return (T) this;
+  }
+
+  /**
+   * create a working dir using temporaryFolder. Use with caution, this sets "user.dir" system
+   * property that not approved by JDK
+   */
+  public T withWorkingDir() {
+    temporaryFolder = new TemporaryFolder();
+    try {
+      temporaryFolder.create();
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
+    withWorkingDir(temporaryFolder.getRoot().getAbsoluteFile());
+    return (T) this;
+  }
+
-  public void setCleanWorkingDir(boolean cleanWorkingDir) {
-    this.cleanWorkingDir = cleanWorkingDir;
-  }
-
-    return new File(System.getProperty("user.dir"));
+    return workingDir;

MOV26 MOV26 MOV23 MOV31 UPD40 UPD40 INS23 INS23 INS31 INS31 UPD83 MOV83 INS43 INS59 INS83 INS83 INS43 INS59 UPD83 MOV43 MOV78 MOV83 MOV39 MOV42 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS21 MOV21 MOV21 MOV21 INS25 INS25 INS42 MOV43 INS42 INS21 INS25 INS41 INS65 INS42 INS54 INS21 INS41 INS7 INS27 INS8 INS27 INS8 INS8 INS7 INS27 INS8 INS11 INS66 INS66 INS8 INS12 INS32 INS11 INS42 INS42 MOV32 INS42 INS33 INS21 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS33 INS21 INS43 INS52 INS42 INS14 INS21 INS44 INS8 INS42 INS32 INS43 INS52 INS32 INS32 INS32 INS52 INS42 INS32 INS42 INS43 INS32 INS43 INS42 INS53 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 MOV42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL39 DEL9 DEL43 DEL74 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL59 DEL42 DEL32 DEL38 DEL86 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL27 DEL36 DEL38 DEL86 DEL32 DEL42 DEL42 DEL90 DEL32 DEL21 DEL25 DEL8 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL14