GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.CacheFactory;
-   * <code>char</code>.
+   * {@code char}.
-   * <code>boolean</code>.
+   * {@code boolean}.
-   * <code>byte</code>.
+   * {@code byte}.
-   * <code>short</code>.
+   * {@code short}.
-   * <code>int</code>.
+   * {@code int}.
-   * <code>long</code>.
+   * {@code long}.
-   * <code>float</code>.
+   * {@code float}.
-   * <code>double</code>.
+   * {@code double}.
-   * <code>Date</code>.
+   * {@code Date}.
-   * <code>String</code>.
+   * {@code String}.
-   * <code>Object</code>.
+   * {@code Object}.
-   * <code>Object</code>.
+   * {@code Object}.
-   * languages. To ensure that only portable objects are serialized set the
-   * <code>checkPortability</code> parameter to true. The following is a list of the Java classes
-   * that are portable and the .NET class they are mapped to:
+   * languages. To ensure that only portable objects are serialized set the {@code checkPortability}
+   * parameter to true. The following is a list of the Java classes that are portable and the .NET
+   * class they are mapped to:
-   * <li>Object[]: System.Collections.Generic.List<Object>
-   * <li>java.util.HashMap: System.Collections.Generics.IDictionary<Object, Object>
+   * <li>Object[]: System.Collections.Generic.List&lt;Object&gt;
+   * <li>java.util.HashMap: System.Collections.Generics.IDictionary&lt;Object, Object&gt;
-   * <li>java.util.ArrayList: System.Collections.Generic.IList<Object>
+   * <li>java.util.ArrayList: System.Collections.Generic.IList&lt;Object&gt;
-   * <code>boolean[]</code>.
+   * {@code boolean[]}.
-   * <code>char[]</code>.
+   * {@code char[]}.
-   * <code>byte[]</code>.
+   * {@code byte[]}.
-   * <code>short[]</code>.
+   * {@code short[]}.
-   * <code>int[]</code>.
+   * {@code int[]}.
-   * <code>long[]</code>.
+   * {@code long[]}.
-   * <code>float[]</code>.
+   * {@code float[]}.
-   * <code>double[]</code>.
+   * {@code double[]}.
-   * <code>String[]</code>.
+   * {@code String[]}.
-   * <code>Object[]</code>.
+   * {@code Object[]}.
-   * Java Object[] is mapped to .NET System.Collections.Generic.List<Object>. For how each element
-   * of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
-   * Note that this call may serialize elements that are not compatible with non-java languages. To
-   * ensure that only portable objects are serialized use
+   * Java Object[] is mapped to .NET System.Collections.Generic.List&lt;Object&gt;. For how each
+   * element of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean)
+   * writeObject}. Note that this call may serialize elements that are not compatible with non-java
+   * languages. To ensure that only portable objects are serialized use
-   * <code>Object[]</code>.
+   * {@code Object[]}.
-   * Java Object[] is mapped to .NET System.Collections.Generic.List<Object>. For how each element
-   * of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
-   * Note that this call may serialize elements that are not compatible with non-java languages. To
-   * ensure that only portable objects are serialized use
-   * {@link #writeObjectArray(String, Object[], boolean)}.
+   * Java Object[] is mapped to .NET System.Collections.Generic.List&lt;Object&gt;. For how each
+   * element of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean)
+   * writeObject}. Note that this call may serialize elements that are not compatible with non-java
+   * languages. To ensure that only portable objects are serialized use
+   * {@code writeObjectArray(String, Object[], boolean)}.
-   * <code>byte[][]</code>.
+   * {@code byte[][]}.
-   * the <code>fieldType</code> to determine which writeXXX method it should call. If it can not
-   * find a specific match to a writeXXX method it will call {@link #writeObject(String, Object)
+   * the {@code fieldType} to determine which writeXXX method it should call. If it can not find a
+   * specific match to a writeXXX method it will call {@link #writeObject(String, Object)
-   *        <code>fieldType</code>
+   *        {@code fieldType}
-   * the <code>fieldType</code> to determine which writeXXX method it should call. If it can not
-   * find a specific match to a writeXXX method it will call
-   * {@link #writeObject(String, Object, boolean) writeObject}. To ensure that only objects that are
-   * portable to non-java languages are serialized set the <code>checkPortability</code> parameter
-   * to true.
+   * the {@code fieldType} to determine which writeXXX method it should call. If it can not find a
+   * specific match to a writeXXX method it will call {@link #writeObject(String, Object, boolean)
+   * writeObject}. To ensure that only objects that are portable to non-java languages are
+   * serialized set the {@code checkPortability} parameter to true.
-   *        <code>fieldType</code>
+   *        {@code fieldType}

MOV31 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 UPD66 INS65 UPD66 UPD66 UPD66 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 INS65 INS66 UPD66 UPD66 UPD66 UPD66 MOV65 INS65 INS66 UPD66 UPD66 UPD66 UPD66 INS65 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD66 UPD66 UPD66 UPD66 INS65 UPD66 INS65 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 UPD66 UPD66 MOV66 UPD66 INS66 UPD66 MOV66 INS66 UPD66 MOV66 INS66 UPD66 INS66 UPD66 MOV66 DEL40 DEL26 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL85 DEL5 DEL69 DEL39 DEL69 DEL68 DEL65 DEL66