Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An abstract standalone implementation of {@link StatisticsFactory}.
- * It can be used in contexts that do not have the GemFire product
- * or in vm's that do not have a distributed system nor a gemfire connection.
+ * An abstract standalone implementation of {@link StatisticsFactory}. It can be used in contexts
+ * that do not have the GemFire product or in vm's that do not have a distributed system nor a
+ * gemfire connection.
-public abstract class AbstractStatisticsFactory 
-    implements StatisticsFactory, StatisticsManager {
+public abstract class AbstractStatisticsFactory implements StatisticsFactory, StatisticsManager {
-    
+
-  public void close() {
-  }
-  
+  public void close() {}
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    throw new RuntimeException(LocalizedStrings.PureStatSampler_COULD_NOT_FIND_STATISTICS_INSTANCE.toLocalizedString());
+    throw new RuntimeException(
+        LocalizedStrings.PureStatSampler_COULD_NOT_FIND_STATISTICS_INSTANCE.toLocalizedString());
-  
+
-    return (Statistics[])statsList.toArray(new Statistics[statsList.size()]);
+    return (Statistics[]) statsList.toArray(new Statistics[statsList.size()]);
-  
+
-  
+
-  
+
-  
+
-  
-  protected Statistics createOsStatistics(StatisticsType type, String textId, long numericId, int osStatFlags) {
+
+  protected Statistics createOsStatistics(StatisticsType type, String textId, long numericId,
+      int osStatFlags) {
-    Statistics result = new LocalStatisticsImpl(type, textId, numericId, myUniqueId, false, osStatFlags, this);
+    Statistics result =
+        new LocalStatisticsImpl(type, textId, numericId, myUniqueId, false, osStatFlags, this);
-      Statistics s = (Statistics)it.next();
+      Statistics s = (Statistics) it.next();
-    return (Statistics[])hits.toArray(result);
+    return (Statistics[]) hits.toArray(result);
-  
+
-      Statistics s = (Statistics)it.next();
+      Statistics s = (Statistics) it.next();
-    return (Statistics[])hits.toArray(result);
+    return (Statistics[]) hits.toArray(result);
-  
+
-      Statistics s = (Statistics)it.next();
+      Statistics s = (Statistics) it.next();
-    return (Statistics[])hits.toArray(result);
+    return (Statistics[]) hits.toArray(result);
-  
+
-      Statistics s = (Statistics)it.next();
+      Statistics s = (Statistics) it.next();
-  
+
-  
+
-  
+
-  public final StatisticsType createType(String name, String description, StatisticDescriptor[] stats) {
+  public final StatisticsType createType(String name, String description,
+      StatisticDescriptor[] stats) {
-  
+
-  
+
-  public final StatisticsType[] createTypesFromXml(Reader reader)
-    throws IOException {
+  public final StatisticsType[] createTypesFromXml(Reader reader) throws IOException {
-  
+
-  public final StatisticDescriptor createLongCounter(String name, String description, String units) {
+  public final StatisticDescriptor createLongCounter(String name, String description,
+      String units) {
-  
+
-  public final StatisticDescriptor createDoubleCounter(String name, String description, String units) {
+  public final StatisticDescriptor createDoubleCounter(String name, String description,
+      String units) {
-  
+
-  
+
-  
+
-  public final StatisticDescriptor createDoubleGauge(String name, String description, String units) {
+  public final StatisticDescriptor createDoubleGauge(String name, String description,
+      String units) {
-  
+
-  public final StatisticDescriptor createIntCounter(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createIntCounter(String name, String description, String units,
+      boolean largerBetter) {
-  
+
-  public final StatisticDescriptor createLongCounter(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createLongCounter(String name, String description, String units,
+      boolean largerBetter) {
-  
+
-  public final StatisticDescriptor createDoubleCounter(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createDoubleCounter(String name, String description,
+      String units, boolean largerBetter) {
-  
+
-  public final StatisticDescriptor createIntGauge(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createIntGauge(String name, String description, String units,
+      boolean largerBetter) {
-  
+
-  public final StatisticDescriptor createLongGauge(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createLongGauge(String name, String description, String units,
+      boolean largerBetter) {
-  
+
-  public final StatisticDescriptor createDoubleGauge(String name, String description, String units, boolean largerBetter) {
+  public final StatisticDescriptor createDoubleGauge(String name, String description, String units,
+      boolean largerBetter) {

UPD66 UPD66 UPD66