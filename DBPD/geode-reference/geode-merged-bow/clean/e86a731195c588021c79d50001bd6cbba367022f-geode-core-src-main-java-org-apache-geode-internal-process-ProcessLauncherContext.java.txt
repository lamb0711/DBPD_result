Merge branch 'release/1.3.0'

-
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.io.TeeOutputStream;
-import org.apache.geode.internal.io.TeePrintStream;
+import static org.apache.commons.lang.Validate.notNull;
-import java.io.*;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
-  private static final ThreadLocal<ProcessLauncherContext> DATA =
-      new ThreadLocal<ProcessLauncherContext>();
+  private static final ThreadLocal<ProcessLauncherContext> DATA = new ThreadLocal<>();
+
+  private final boolean redirectOutput;
+  private final Properties overriddenDefaults;
+  private final StartupStatusListener startupListener;
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-  public static void set(final boolean redirectOutput, final Properties contingentProperties,
+  public static void set(final boolean redirectOutput, final Properties overriddenDefaults,
-    DATA.set(new ProcessLauncherContext(redirectOutput, contingentProperties, startupListener));
+    notNull(overriddenDefaults,
+        "Invalid overriddenDefaults '" + overriddenDefaults + "' specified");
+
+    DATA.set(new ProcessLauncherContext(redirectOutput, overriddenDefaults, startupListener));
-    // DATA.get().restoreErrorStream();
-  private static void installLogListener(StartupStatusListener startupListener) {
+  private static void installLogListener(final StartupStatusListener startupListener) {
-  private final boolean redirectOutput;
-  private final Properties overriddenDefaults;
-  private final StartupStatusListener startupListener;
-  private PrintStream err;
-
-    return this.redirectOutput;
+    return redirectOutput;
-    return this.overriddenDefaults;
+    return overriddenDefaults;
-    return this.startupListener;
-  }
-
-  @SuppressWarnings("unused")
-  private void teeErrorStream() {
-    final FileOutputStream fdErr = new FileOutputStream(FileDescriptor.err);
-    this.err = new PrintStream(new BufferedOutputStream(fdErr, 128), true);
-    System.setErr(new TeePrintStream(new TeeOutputStream(new BufferedOutputStream(fdErr, 128))));
-  }
-
-  @SuppressWarnings("unused")
-  private void restoreErrorStream() {
-    if (System.err instanceof TeePrintStream) {
-      final TeePrintStream tee = ((TeePrintStream) System.err);
-      final OutputStream branch = tee.getTeeOutputStream().getBranchOutputStream();
-
-      PrintStream newStdErr = null;
-      if (branch == null) {
-        newStdErr = this.err;
-      } else if (branch instanceof PrintStream) {
-        newStdErr = (PrintStream) branch;
-      } else {
-        newStdErr = new PrintStream(new BufferedOutputStream(branch, 128), true);
-      }
-      System.setErr(newStdErr);
-    }
+    return startupListener;

MOV26 MOV23 MOV23 MOV23 UPD40 UPD42 INS21 INS83 UPD74 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL34 DEL14 DEL9 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL34 DEL14 DEL14 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL45 DEL79 DEL83 DEL39 DEL42 DEL40 DEL42 DEL43 DEL62 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL11 DEL36 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL34 DEL14 DEL9 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31