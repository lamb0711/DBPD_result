GEODE-5055: Handle index in progress for old clients (#1961)

* If the Lucene query function is executed by an old client (< 1.6.0) on a new server, it will wait for the index to be created.
            * Server wont return a LuceneIndexCreationInProgressException back to the old client resulting in a ClassNotFoundException.
	    * LuceneIndexCreationInProgressException is wrapped in a FunctionException and sent to the caller function
	    * The caller unwraps and send the LuceneQueryException back to the user.
+import org.apache.geode.cache.lucene.internal.distributed.IndexingInProgressFunction;
+    FunctionService.registerFunction(new IndexingInProgressFunction());
+
+  public boolean isIndexingInProgress(String indexName, String regionPath) {
+    Region region = this.cache.getRegion(regionPath);
+    if (region == null) {
+      logger.info("Data region " + regionPath + " not found");
+      return false;
+    }
+    // If it is called from a client then we assume that all servers are already
+    // rolled to a version more than or equal to client's
+    // hence we don't need to validate the servers.
+    if (!cache.isClient()) {
+      // Also a check for PartitionedRegion. As we cannot use the same method calls to
+      // to get the members hosting the region for RR (future implementation)
+      if (region instanceof PartitionedRegion) {
+        PartitionedRegion dataRegion = (PartitionedRegion) region;
+        // Validate all members are Apache Geode v1.7.0 or above
+        Set<InternalDistributedMember> remoteMembers =
+            dataRegion.getRegionAdvisor().adviseAllPRNodes();
+        if (isAnyRemoteMemberVersionLessThanGeode1_7_0(remoteMembers)) {
+          throw new IllegalStateException(
+              LocalizedStrings.LuceneIndexingInProgress_CANNOT_BE_DETERMINED_BECAUSE_OF_VERSION_MISMATCH
+                  .toLocalizedString(regionPath));
+        }
+      }
+    }
+    Execution execution = FunctionService.onRegion(region);
+    ResultCollector resultCollector =
+        execution.setArguments(indexName).execute(IndexingInProgressFunction.ID);
+    List<Boolean> results = (List<Boolean>) resultCollector.getResult();
+    for (Boolean result : results) {
+      if (result == true) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean isAnyRemoteMemberVersionLessThanGeode1_7_0(
+      Set<InternalDistributedMember> remoteMembers) {
+    for (InternalDistributedMember remoteMember : remoteMembers) {
+      if (remoteMember.getVersionObject().ordinal() < Version.GEODE_170.ordinal()) {
+        return true;
+      }
+    }
+    return false;
+  }

INS26 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS21 INS43 INS42 INS43 INS42 INS60 INS25 INS25 INS60 INS60 INS60 INS70 INS41 INS74 INS42 INS70 INS41 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS9 INS43 INS43 INS44 INS42 INS8 INS9 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS11 INS43 INS42 INS25 INS42 INS42 INS43 INS42 INS25 INS43 INS22 INS42 INS42 INS32 INS9 INS42 INS42 INS62 INS8 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS74 INS32 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS52 INS42 INS42 INS42 INS27 INS42 INS43 INS60 INS60 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS9 INS41 INS32 INS32 INS41 INS45 INS42 INS45 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS42 INS42 INS9 INS32 INS42 INS40 INS42 INS9 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS40 INS42 INS42