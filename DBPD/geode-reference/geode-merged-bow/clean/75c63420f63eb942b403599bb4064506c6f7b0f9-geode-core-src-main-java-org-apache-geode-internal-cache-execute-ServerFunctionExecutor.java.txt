GEODE-7184: Add function execution timers (#4135)

- Add micrometer timers for recording function executions
- Refactor FunctionStats and FunctionServiceStats
- Change static fields to instance fields on FunctionStatsManager
- Mark static field as @Immutable on NoopMeterRegistry
- Rename FunctionServiceStats.endFunctionExecutionWithElapsedTime to
distinguish it from FunctionStats.endFunctionExecution which takes a
start time.
- Remove extra call to FunctionStats.getTime() in
MemberFunctionStreamingMessage and add boolean to prevent calling
endFunctionExecutionWithException before startFunctionExecution was
called.
- Remove FunctionStats.getTime() in favor of returning the time from
FunctionStats.startFunctionExecution()

Functions with hasResult()=false execute asynchronously on an executor.
Previously, the instrumentation code recorded a successful function
execution after submitting a function to an executor, which is incorrect
because the function has not necessarily executed at that point. Now, we
record the execution time only after the function actually executes.

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Mark Hanson <mhanson@pivotal.io>
+import org.apache.geode.internal.cache.execute.metrics.FunctionStats;
+import org.apache.geode.internal.cache.execute.metrics.FunctionStatsManager;
-    FunctionStats stats = FunctionStats.getFunctionStats(function.getId());
+    FunctionStats stats = FunctionStatsManager.getFunctionStats(function.getId());
+    long start = stats.startFunctionExecution(true);
-      long start = stats.startTime();
-      stats.startFunctionExecution(true);
-      stats.endFunctionExecutionWithException(true);
+      stats.endFunctionExecutionWithException(start, true);
-      stats.endFunctionExecutionWithException(true);
+      stats.endFunctionExecutionWithException(start, true);
-    FunctionStats stats = FunctionStats.getFunctionStats(functionId);
+    FunctionStats stats = FunctionStatsManager.getFunctionStats(functionId);
+    long start = stats.startFunctionExecution(true);
-      long start = stats.startTime();
-      stats.startFunctionExecution(true);
-      stats.endFunctionExecutionWithException(true);
+      stats.endFunctionExecutionWithException(start, true);
-      stats.endFunctionExecutionWithException(true);
+      stats.endFunctionExecutionWithException(start, true);
-    FunctionStats stats = FunctionStats.getFunctionStats(function.getId());
+    FunctionStats stats = FunctionStatsManager.getFunctionStats(function.getId());
+    long start = stats.startFunctionExecution(false);
-      long start = stats.startTime();
-      stats.startFunctionExecution(false);
-      stats.endFunctionExecutionWithException(false);
+      stats.endFunctionExecutionWithException(start, false);
-      stats.endFunctionExecutionWithException(false);
+      stats.endFunctionExecutionWithException(start, false);
-    FunctionStats stats = FunctionStats.getFunctionStats(functionId);
+    FunctionStats stats = FunctionStatsManager.getFunctionStats(functionId);
+    long start = stats.startFunctionExecution(false);
-      long start = stats.startTime();
-      stats.startFunctionExecution(false);
-      stats.endFunctionExecutionWithException(false);
+      stats.endFunctionExecutionWithException(start, false);
-      stats.endFunctionExecutionWithException(false);
+      stats.endFunctionExecutionWithException(start, false);

INS26 INS26 INS40 INS40 INS60 INS60 INS60 INS60 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL21