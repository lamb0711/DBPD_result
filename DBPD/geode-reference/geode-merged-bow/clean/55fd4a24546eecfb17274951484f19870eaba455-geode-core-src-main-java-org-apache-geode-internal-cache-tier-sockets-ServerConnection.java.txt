GEODE-6639: Use AtomicLong for processingMessageStartTime

Removes unnecessary lock object and synchronize.

+import java.util.concurrent.atomic.AtomicLong;
-  private ProcessingMessageTimer processingMessageTimer = new ProcessingMessageTimer();
+  private final ProcessingMessageTimer processingMessageTimer = new ProcessingMessageTimer();
-      synchronized (processingMessageTimer.processingMessageLock) {
-        // If a message is currently being processed and it has been
-        // being processed for more than the client read timeout,
-        // then return true
-        if (getCurrentMessageProcessingTime() > timeout) {
-          return true;
-        }
-      }
+      return getCurrentMessageProcessingTime() > timeout;
-    public static final long NOT_PROCESSING = -1l;
+    @VisibleForTesting
+    static final long NOT_PROCESSING = -1L;
-    private long processingMessageStartTime = NOT_PROCESSING;
-    private final Object processingMessageLock = new Object();
+    @VisibleForTesting
+    final AtomicLong processingMessageStartTime = new AtomicLong(NOT_PROCESSING);
+    /**
+     * Set or resets time regardless if already set.
+     */
-      synchronized (processingMessageLock) {
-        // go ahead and reset it if it is already set
-        processingMessageStartTime = System.currentTimeMillis();
-      }
+      processingMessageStartTime.set(System.currentTimeMillis());
+    /**
+     * Updates time if previously set.
+     */
-      synchronized (processingMessageLock) {
-        // only update it if it was already set by setProcessingMessage
-        if (processingMessageStartTime != NOT_PROCESSING) {
-          processingMessageStartTime = System.currentTimeMillis();
+      final long current = processingMessageStartTime.get();
+      if (NOT_PROCESSING != current) {
+        final long now = System.currentTimeMillis();
+        if (now > current) {
+          // if another thread sets to -1 or updates the time we don't need to update the time.
+          processingMessageStartTime.compareAndSet(current, now);
-      synchronized (processingMessageLock) {
-        processingMessageStartTime = NOT_PROCESSING;
-      }
+      processingMessageStartTime.set(NOT_PROCESSING);
-      long result;
-      synchronized (processingMessageLock) {
-        result = processingMessageStartTime;
-      }
+      long result = processingMessageStartTime.get();

INS26 INS40 INS83 INS23 INS78 INS78 MOV83 UPD43 MOV43 MOV59 INS29 MOV8 INS29 INS8 INS42 INS42 UPD42 UPD42 INS65 INS65 INS60 MOV25 MOV21 INS60 MOV41 UPD34 UPD43 INS42 INS66 INS32 INS66 INS83 INS39 INS59 INS8 INS32 MOV39 INS59 MOV27 UPD42 INS42 INS42 MOV32 INS42 INS32 INS42 INS60 INS25 INS42 INS42 INS42 MOV42 INS32 INS42 INS42 INS83 INS39 INS59 INS27 MOV8 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL9 DEL40 DEL8 DEL25 DEL8 DEL51 DEL83 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL83 DEL23 DEL42 DEL7 DEL42 DEL51 DEL8 DEL42 DEL42 DEL7 DEL42 DEL8 DEL51 DEL42 DEL42 DEL7 DEL42 DEL8 DEL51 DEL8 DEL59 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21 DEL8 DEL51