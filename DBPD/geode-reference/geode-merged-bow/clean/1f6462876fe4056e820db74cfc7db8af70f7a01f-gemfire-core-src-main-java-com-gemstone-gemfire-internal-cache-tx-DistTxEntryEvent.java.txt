[DISTTX] Bringing pending changes for distributed transactions (still work in progress) from one of the internal gemfire branch (develop_dist_tx) to ASF i.e.

2053a3ae by vbhaskar
[DISTTX] Fixed a PutAll issue related to DistTxStateOnCoordinator when txState is set null in tx-manager during (pre)commit.
    There is a related issue in removeall that also need to be fixed. Added test for same.

ccdf76d5 by sjigyasu
Added a test for concurrent tx and non tx ops.

61a536a0 by sjigyasu
Added WAN test for distributed tx (disabled)

9e6c1b8e by sjigyasu
Changes for adjunct messaging for serial WAN.  For details read comments in DistTXState commit.

3d5c4f84 by vbhaskar
[DISTTX] Fixed an remoteall issue and enabled respective testcase.

226bf623 by shirishd
[DISTTX] Test changes only
Removed @Category and @Ignore Junit4 unsupported tags from disttx dunit tests

9fdfbe2c by shirishd
[DISTTX] Test change only
Remove few more @Category tags from dist tx dunit tests

ea00015c by shirishd
[DISTTX] Added entries for tests

f74a12b3 by shirishd
[DISTTX] Enabling few more existing tests with "distributed-transactions" set to true

b52ee0c5 by vivek bhaskar
[DISTTX] On Tx Coordinator, verify if there any change of region distribution.

a480794c by shirishd
[DISTTX] Some tests for conflict detection at commit time

be3dd356 by vivek bhaskar
[DISTTX] Clean txState even if final commit fails.

95ba17f9 by shirishd
[DISTTX] Added tests for conflict detection at commit time

cd50dbbc by shirishd
[DISTTX] Optimization in DistTxEntryEvent toData/fromData

Tests:
DUnits and Junits for Distributed Transactions

-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.cache.CacheEvent;
-import com.gemstone.gemfire.cache.EntryEvent;
-import com.gemstone.gemfire.internal.cache.KeyInfo;
-import com.gemstone.gemfire.internal.cache.KeyWithRegionContext;
-import com.gemstone.gemfire.internal.logging.LogService;
+  
+  protected static final byte HAS_PUTALL_OP = 0x1;
+  protected static final byte HAS_REMOVEALL_OP = 0x2;
+    byte flags = 0;
+    if (this.putAllOp != null) {
+      flags |= HAS_PUTALL_OP;
+    }
+    if (this.removeAllOp != null) {
+      flags |= HAS_REMOVEALL_OP;
+    }
+    DataSerializer.writeByte(flags, out);
+    
-    } else {
-      DataSerializer.writeInteger(0, out);
-    }
-
+    } 
-    } else {
-      DataSerializer.writeInteger(0, out);
-    }
+    } 
-    int putAllSize = DataSerializer.readInteger(in);
-    if (putAllSize > 0) {
-      putAllFromData(in, putAllSize);
+    
+    byte flags = DataSerializer.readByte(in);
+    if ((flags & HAS_PUTALL_OP) != 0 ) {
+      putAllFromData(in);
-    int removeAllSize = DataSerializer.readInteger(in);
-    if (removeAllSize > 0) {
-      removeAllFromData(in, removeAllSize);
+    
+    if ((flags & HAS_REMOVEALL_OP) != 0 ) {
+      removeAllFromData(in);
-   * @param putAllSize
-  private void putAllFromData(DataInput in, int putAllSize)
+  private void putAllFromData(DataInput in)
+    int putAllSize = DataSerializer.readInteger(in);
-   * @param removeAllSize
-  private void removeAllFromData(DataInput in, int removeAllSize)
+  private void removeAllFromData(DataInput in)
+    int removeAllSize = DataSerializer.readInteger(in);
+    buf.append(getShortClassName());
+    buf.append("[");
+    buf.append("eventID=");
+    buf.append(this.eventID);
+    if (this.region != null) {
+      buf.append(";r=").append(this.region.getName());
+    }
+    buf.append(";op=");
+    buf.append(getOperation());
+    buf.append(";key=");
+    buf.append(this.getKey());
+    buf.append(";bucket=");
+    buf.append(this.getKeyInfo().getBucketId());
+    buf.append(";oldValue=");
-      buf.append("putAllDataSize :" + this.putAllOp.putAllDataSize);
+      buf.append(";putAllDataSize :" + this.putAllOp.putAllDataSize);
-      buf.append("removeAllDataSize :" + this.removeAllOp.removeAllDataSize);
+      buf.append(";removeAllDataSize :" + this.removeAllOp.removeAllDataSize);
-    return buf.toString(); 
+    buf.append("]");
+    return buf.toString();

INS23 INS23 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS42 INS34 INS42 INS34 INS60 INS25 INS25 INS21 INS60 MOV60 MOV60 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS39 INS59 UPD27 UPD27 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS34 INS22 INS33 INS21 INS22 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS36 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS22 INS22 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS52 INS42 INS7 INS52 INS42 INS7 INS42 INS42 INS42 INS27 INS27 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS45 INS22 INS42 UPD45 UPD45 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL65 DEL39 DEL42 DEL44 DEL42 DEL65 DEL39 DEL42 DEL44