GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

+import static org.apache.geode.redis.internal.RedisCommandType.HEXISTS;
+import static org.apache.geode.redis.internal.RedisCommandType.HGET;
+import static org.apache.geode.redis.internal.RedisCommandType.HINCRBY;
+import static org.apache.geode.redis.internal.RedisCommandType.HINCRBYFLOAT;
+import static org.apache.geode.redis.internal.RedisCommandType.HKEYS;
+import static org.apache.geode.redis.internal.RedisCommandType.HLEN;
+import static org.apache.geode.redis.internal.RedisCommandType.HMGET;
+import static org.apache.geode.redis.internal.RedisCommandType.HSCAN;
+import static org.apache.geode.redis.internal.RedisCommandType.HVALS;
+import java.util.regex.Pattern;
+
+  @Override
+  public int hexists(ByteArrayWrapper key, ByteArrayWrapper field) {
+    return CommandFunction.execute(HEXISTS, key, field, region);
+  }
+
+  @Override
+  public ByteArrayWrapper hget(ByteArrayWrapper key, ByteArrayWrapper field) {
+    return CommandFunction.execute(HGET, key, field, region);
+  }
+
+  @Override
+  public int hlen(ByteArrayWrapper key) {
+    return CommandFunction.execute(HLEN, key, null, region);
+  }
+
+  @Override
+  public List<ByteArrayWrapper> hmget(ByteArrayWrapper key,
+      List<ByteArrayWrapper> fields) {
+    return CommandFunction.execute(HMGET, key, fields, region);
+  }
+
+  @Override
+  public Collection<ByteArrayWrapper> hvals(ByteArrayWrapper key) {
+    return CommandFunction.execute(HVALS, key, null, region);
+  }
+
+  @Override
+  public Collection<ByteArrayWrapper> hkeys(ByteArrayWrapper key) {
+    return CommandFunction.execute(HKEYS, key, null, region);
+  }
+
+  @Override
+  public List<Object> hscan(ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {
+    return CommandFunction.execute(HSCAN, key, new Object[] {matchPattern, count, cursor}, region);
+  }
+
+  @Override
+  public long hincrby(ByteArrayWrapper key, ByteArrayWrapper field, long increment) {
+    return CommandFunction.execute(HINCRBY, key, new Object[] {field, increment}, region);
+  }
+
+  @Override
+  public double hincrbyfloat(ByteArrayWrapper key, ByteArrayWrapper field, double increment) {
+    return CommandFunction.execute(HINCRBYFLOAT, key, new Object[] {field, increment}, region);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS74 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS5 INS4 INS5 INS4 INS5 INS4 INS43 INS85 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42