GEODE-7435 - Improve performance of GMSMembershipManager.handleOrDefeâ€¦ (#4373)

* GEODE-7435 - Improve performance of GMSMembershipManager.handleOrDeferMessage

Modified the method to avoid synchronization unless we're in an initialization phase.
While initializaing we synchronize and queue messages unless we're told the
queue has been drained.

* re-enabled check in handleOrDeferMessage

* moved return statement into startup-queue block

* empty commit

-import org.apache.geode.internal.cache.partitioned.PartitionMessageWithDirectReply;
+   * Set to true under startupLock when processingEvents has been set to true
+   * and startup messages have been removed from the queue and dispatched
+   */
+  private boolean startupMessagesDrained = false;
+
+  /**
-    synchronized (startupLock) {
-      if (!processingEvents) {
-        startupMessages.add(new StartupEvent(member));
-        return;
+    if (!processingEvents) {
+      synchronized (startupLock) {
+        if (!startupMessagesDrained) {
+          startupMessages.add(new StartupEvent(member));
+          return;
+        }
-    synchronized (startupLock) {
-      if (beingSick || playingDead) {
-        // cache operations are blocked in a "sick" member
-        if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
+    if (!processingEvents) {
+      synchronized (startupLock) {
+        if (!startupMessagesDrained) {
-      if (!processingEvents) {
-        startupMessages.add(new StartupEvent(msg));
-        return;
-      }
-      synchronized (startupLock) {
-        if (!processingEvents) {
-          startupMessages.add(new StartupEvent(viewArg));
-          return;
+      if (!processingEvents) {
+        synchronized (startupLock) {
+          if (!startupMessagesDrained) {
+            startupMessages.add(new StartupEvent(viewArg));
+            return;
+          }
-      synchronized (startupLock) {
-        if (!processingEvents) {
-          return;
-        }
+      if (!processingEvents) {
+        return;
-            // no more events get put into startupMessages, and
-            // notify all waiters to proceed.
+            // no more events get put into startupMessages
+            startupMessagesDrained = true;
+            // set the volatile boolean that states that queueing is completely done now
+            // notify any threads waiting for event processing that we're open for business
-            break; // ...and we're done.
+            break;
-        if (processingEvents)
+        if (processingEvents && startupMessagesDrained) {
+        }

INS23 INS29 INS83 INS39 INS59 MOV8 INS65 INS42 INS9 INS25 MOV21 INS66 INS66 MOV38 INS8 MOV38 INS8 MOV32 MOV51 INS51 INS25 MOV25 INS42 MOV8 MOV38 INS8 MOV51 INS38 INS38 INS27 INS8 INS42 INS42 INS42 INS42 INS10 INS38 INS42 INS21 INS7 INS42 INS9 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL25 DEL42 DEL51 DEL8 DEL42 DEL8 DEL51 DEL42 DEL10