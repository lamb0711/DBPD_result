GEODE-4996: Addressed NPE by always using the region entry key


-import java.io.IOException;
-import org.apache.geode.internal.cache.ha.HAContainerWrapper;
-import org.apache.geode.internal.cache.ha.HARegionQueue;
-import org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier;
-import org.apache.geode.internal.cache.tier.sockets.ClientUpdateMessageImpl;
-import org.apache.geode.internal.cache.tier.sockets.HAEventWrapper;
-import org.apache.geode.internal.util.BlobHelper;
-      Object actualVal = null;
-      CachedDeserializable newValueCd = (CachedDeserializable) newValue;
-      try {
-        actualVal = BlobHelper.deserializeBlob(newValueCd.getSerializedValue(),
-            sender.getVersionObject(), null);
-        newValue = new VMCachedDeserializable(actualVal, newValueCd.getSizeInBytes());
-      } catch (IOException | ClassNotFoundException e) {
-        throw new RuntimeException("Unable to deserialize HA event for region " + owner);
-      }
-      if (actualVal instanceof HAEventWrapper) {
-        HAEventWrapper haEventWrapper = (HAEventWrapper) actualVal;
-        // Key was removed at sender side so not putting it into the HARegion
-        if (haEventWrapper.getClientUpdateMessage() == null) {
-          return false;
-        }
-        // Getting the instance from singleton CCN..This assumes only one bridge
-        // server in the VM
-        HAContainerWrapper haContainer =
-            (HAContainerWrapper) CacheClientNotifier.getInstance().getHaContainer();
-        if (haContainer == null) {
-          return false;
-        }
-        HAEventWrapper original = null;
-        // synchronized (haContainer) {
-        do {
-          ClientUpdateMessageImpl oldMsg = (ClientUpdateMessageImpl) haContainer
-              .putIfAbsent(haEventWrapper, haEventWrapper.getClientUpdateMessage());
-          if (oldMsg != null) {
-            original = (HAEventWrapper) haContainer.getKey(haEventWrapper);
-            if (original == null) {
-              continue;
-            }
-            synchronized (original) {
-              if ((HAEventWrapper) haContainer.getKey(original) != null) {
-                original.incAndGetReferenceCount();
-                HARegionQueue.addClientCQsAndInterestList(oldMsg, haEventWrapper, haContainer,
-                    owner.getName());
-                haEventWrapper.setClientUpdateMessage(null);
-                newValue = new VMCachedDeserializable(original, newValueCd.getSizeInBytes());
-              } else {
-                original = null;
-              }
-            }
-          } else { // putIfAbsent successful
-            synchronized (haEventWrapper) {
-              haEventWrapper.incAndGetReferenceCount();
-              haEventWrapper.setHAContainer(haContainer);
-              haEventWrapper.setClientUpdateMessage(null);
-              haEventWrapper.setIsRefFromHAContainer(true);
-            }
-            break;
-          }
-          // try until we either get a reference to HAEventWrapper from
-          // HAContainer or successfully put one into it.
-        } while (original == null);
-        /*
-         * entry = (Map.Entry)haContainer.getEntry(haEventWrapper); if (entry != null) { original =
-         * (HAEventWrapper)entry.getKey(); original.incAndGetReferenceCount(); } else {
-         * haEventWrapper.incAndGetReferenceCount(); haEventWrapper.setHAContainer(haContainer);
-         * haContainer.put(haEventWrapper, haEventWrapper .getClientUpdateMessage());
-         * haEventWrapper.setClientUpdateMessage(null);
-         * haEventWrapper.setIsRefFromHAContainer(true); } } if (entry != null) {
-         * HARegionQueue.addClientCQsAndInterestList(entry, haEventWrapper, haContainer,
-         * owner.getName()); haEventWrapper.setClientUpdateMessage(null); newValue =
-         * CachedDeserializableFactory.create(original,
-         * ((CachedDeserializable)newValue).getSizeInBytes()); }
-         */
+      newValue = ((HARegion) owner).updateHAEventWrapper(sender, (CachedDeserializable) newValue);
+      if (newValue == null) {
+        return false;

MOV21 MOV25 UPD42 INS42 INS36 UPD42 MOV42 MOV42 MOV11 INS11 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL18 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL51 DEL10 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL19 DEL8 DEL25