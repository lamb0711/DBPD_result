Merge branch 'release/1.3.0'

-import org.apache.geode.distributed.internal.DistributionConfig;
+import static org.apache.commons.lang.Validate.notNull;
+import static org.apache.geode.internal.process.ProcessUtils.identifyPid;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
- * <p/>
+ *
+ * <p>
+ *
+ * </ul>
-public class LocalProcessLauncher {
+class LocalProcessLauncher {
-  public static final String PROPERTY_IGNORE_IS_PID_ALIVE =
+  static final String PROPERTY_IGNORE_IS_PID_ALIVE =
-  public LocalProcessLauncher(final File pidFile, final boolean force)
+  LocalProcessLauncher(final File pidFile, final boolean force)
-    this.pid = ProcessUtils.identifyPid();
+    notNull(pidFile, "Invalid pidFile '" + pidFile + "' specified");
+
+    this.pid = identifyPid();
-  public int getPid() {
-    return this.pid;
+  int getPid() {
+    return pid;
-  public File getPidFile() {
-    return this.pidFile;
+  File getPidFile() {
+    return pidFile;
+   *
-    this.pidFile.delete();
+    pidFile.delete();
+  }
+
+  /**
+   * Delete the pid file now. {@link java.io.File#deleteOnExit()} is set on the pid file.
+   *
+   * @param deletePidFileOnClose if true then the pid file will be deleted now instead of during JVM
+   *        exit
+   */
+  void close(final boolean deletePidFileOnClose) {
+    if (deletePidFileOnClose) {
+      pidFile.delete();
+    }
-    final boolean created = this.pidFile.createNewFile();
-    if (!created && !force) {
-      int otherPid = 0;
-      try {
-        otherPid = ProcessUtils.readPid(this.pidFile);
-      } catch (IOException e) {
-        // suppress
-      } catch (NumberFormatException e) {
-        // suppress
+    if (pidFile.exists()) {
+      if (!force) {
+        checkOtherPid(readOtherPid());
-      boolean ignorePidFile = false;
-      if (otherPid != 0 && !ignoreIsPidAlive()) {
-        ignorePidFile = !ProcessUtils.isProcessAlive(otherPid);
-      }
-      if (!ignorePidFile) {
-        throw new FileAlreadyExistsException("Pid file already exists: " + this.pidFile + " for "
-            + (otherPid > 0 ? "process " + otherPid : "unknown process"));
-      }
+      pidFile.delete();
-    this.pidFile.deleteOnExit();
-    final FileWriter writer = new FileWriter(this.pidFile);
-    writer.write(String.valueOf(this.pid));
-    writer.flush();
-    writer.close();
+
+    File tempPidFile = new File(pidFile.getParent(), pidFile.getName() + ".tmp");
+    tempPidFile.createNewFile();
+
+    try (FileWriter writer = new FileWriter(tempPidFile)) {
+      writer.write(String.valueOf(pid));
+      writer.flush();
+    }
+
+    tempPidFile.renameTo(pidFile);
+    pidFile.deleteOnExit();
+  }
+
+  private int readOtherPid() {
+    int otherPid = 0;
+    try {
+      otherPid = ProcessUtils.readPid(pidFile);
+    } catch (NumberFormatException | IOException ignore) {
+      // suppress
+    }
+    return otherPid;
+  }
+
+  private void checkOtherPid(final int otherPid) throws FileAlreadyExistsException {
+    if (ignoreIsPidAlive() || otherPid != 0 && isProcessAlive(otherPid)) {
+      throw new FileAlreadyExistsException("Pid file already exists: " + pidFile + " for "
+          + (otherPid > 0 ? "process " + otherPid : "unknown process"));
+    }
+  }
+
+  private boolean isProcessAlive(final int pid) {
+    return ignoreIsPidAlive() || ProcessUtils.isProcessAlive(pid);

MOV26 INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS29 MOV39 UPD42 MOV42 INS44 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV43 MOV43 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 MOV8 INS83 INS39 INS42 INS44 INS8 UPD66 INS66 INS21 INS65 INS65 INS83 INS39 INS42 INS25 INS25 MOV60 INS21 INS54 MOV21 INS21 MOV60 INS54 INS41 INS83 INS39 INS42 INS42 INS83 INS39 INS42 INS41 INS32 INS42 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS8 INS32 INS8 INS43 INS59 INS32 INS58 INS8 INS32 INS8 INS12 INS42 UPD27 MOV27 INS27 INS42 INS42 INS27 INS42 INS68 INS21 INS42 UPD42 MOV42 MOV25 MOV21 INS42 INS42 INS14 INS42 INS42 MOV43 MOV59 MOV21 MOV21 UPD42 INS42 UPD42 INS42 INS42 INS21 INS44 INS8 MOV32 INS27 INS32 INS32 INS45 INS42 INS45 INS40 INS42 INS32 MOV38 INS8 INS43 INS32 INS27 INS7 INS84 INS42 MOV27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 UPD42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 MOV43 MOV43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 DEL83 DEL83 DEL83 DEL42 DEL83 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL38 DEL27 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL54 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL7 DEL21 DEL8 DEL25 DEL38 DEL42 DEL38 DEL52 DEL42 DEL22 DEL83 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL8 DEL31