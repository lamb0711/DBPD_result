GEODE-6450: ClientClusterManagementService supports ssl connection (#3276)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* provide capability for the client to configure ssl connection when getting the cluster management service.
* from the server side, create the SSLContext from the ssl configuration specified on the server
* refactor ssl code

+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLContext;
+
-   * Without any options, this method will try to retrieve the correct
-   * {@code ClusterManagementService} dependent on the context in which it is called - relevant
-   * contexts are locators, servers and geode clients (essentially wherever a {@code Cache} or
-   * {@code ClientCache} exist).
-   *
-   * @return a {@code ClusterManagementService} instance configured to connect to the service
-   *         endpoint.
-   * @throws IllegalArgumentException if the service instance cannot be retrieved, for example if
-   *         not called from a suitable context.
+   * use this to get the ClusterManagementService from the locator, or from a server that connects
+   * to a locator with no security manager.
+   * use this retrieve a ClusterManagementService from a server that connects to a secured locator
+   */
+  public static ClusterManagementService getService(String username, String password) {
+    return getServiceFactory(GEODE_CONTEXT).create(username, password);
+  }
+
+  /**
-   * endpoint.
+   * endpoint. this is good for end point with no ssl nor security turned on.
-   * ClusterManagementServiceProvider.getService("http://locator-host:7070/geode-management")
+   * ClusterManagementServiceProvider.getService("locatorHost", "7070")
-   * @param clusterUrl the URL of the Cluster Management Service running on a locator. The port
-   *        used is as configured by the <i>http-service-port</i> property on the Geode locator.
-   * @return a {@code ClusterManagementService} instance configured to connect to the service
-   *         endpoint.
-  public static ClusterManagementService getService(String clusterUrl) {
-    return getServiceFactory(JAVA_CLIENT_CONTEXT).create(clusterUrl);
+  public static ClusterManagementService getService(String host, int port) {
+    return getServiceFactory(JAVA_CLIENT_CONTEXT).create(host, port, null, null, null, null);
+  }
+
+  /**
+   * Retrieve a {@code ClusterManagementService} instance configured with an explicit service
+   * endpoint. This service will allow you to connect to ssl enabled and security enabled end point
+   * with the specified sslContext and hostnameVerifier
+   *
+   * @param host the locator's host name
+   * @param port http port of the locator
+   * @param sslContext a pre configured sslContext to connect with
+   * @param hostnameVerifier a pre configured hostnameVerifier to connect with
+   * @param username if cluster has security manager, use this username to connect
+   * @param password if cluster has security manager, use this password to connect
+   */
+  public static ClusterManagementService getService(String host, int port, SSLContext sslContext,
+      HostnameVerifier hostnameVerifier, String username, String password) {
+    return getServiceFactory(JAVA_CLIENT_CONTEXT).create(host, port, sslContext, hostnameVerifier,
+        username, password);
-   * {@link ClientHttpRequestFactory}. This would be required when connecting to a SSL enabled
-   * endpoint.
-   * <p/>
-   * For example:
-   *
-   * <pre>
-   *   String clusterUrl = "https://locator-host:7070/geode-management";
-   *
-   *   HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
-   *   DefaultHttpClient httpClient = (DefaultHttpClient) requestFactory.getHttpClient();
-   *   TrustStrategy acceptingTrustStrategy = (cert, authType) -> true;
-   *   SSLSocketFactory sf = new SSLSocketFactory(acceptingTrustStrategy, ALLOW_ALL_HOSTNAME_VERIFIER);
-   *   httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", 7070, sf));
-   *
-   *   RestTemplate restTemplate = new RestTemplate(requestFactory);
-   *
-   *   DefaultUriTemplateHandler templateHandler = new DefaultUriTemplateHandler();
-   *   templateHandler.setBaseUrl(clusterUrl);
-   *   restTemplate.setUriTemplateHandler(templateHandler);
-   *
-   *   ClusterManagementServiceProvider.getService(restTemplate);
-   * </pre>
+   * {@link ClientHttpRequestFactory} with a general requestFactory. you can configure the
+   * requestFactory to tailor to your need to connect to the end point.
+
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS83 MOV43 INS42 MOV8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 MOV83 MOV83 MOV43 MOV42 MOV44 INS44 INS8 INS43 INS44 INS44 INS44 INS44 INS44 INS44 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS41 INS65 MOV65 UPD42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS42 INS42 INS32 UPD66 MOV66 MOV65 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS32 MOV66 MOV65 MOV66 UPD66 MOV66 UPD66 MOV66 INS42 UPD66 MOV66 UPD42 UPD66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS42 INS42 INS42 INS42 UPD66 UPD66 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL65 DEL65 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL31 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66