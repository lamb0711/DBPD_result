GEODE-8303: refactor Redis (String)SetExecutor (#5216)


Co-authored-by: john Hutchison <hutchisonjo@vmware.com>
+import static java.lang.Long.parseLong;
+import java.util.Arrays;
+import java.util.stream.Collectors;
-    List<byte[]> commandElems = command.getProcessedCommand();
-    ByteArrayWrapper valueToSet = getValueToSet(commandElems);
-
+    List<byte[]> commandElementsBytes = command.getProcessedCommand();
+    List<byte[]> optionalParameterBytes = getOptionalParameters(commandElementsBytes);
+    ByteArrayWrapper valueToSet = getValueToSet(commandElementsBytes);
+
-      setOptions = parseCommandElems(commandElems);
+      setOptions = parseOptionalParameters(optionalParameterBytes);
-    return doSet(command, context, keyToSet, valueToSet, redisStringCommands, setOptions);
+    return doSet(keyToSet, valueToSet, redisStringCommands, setOptions);
-  private RedisResponse doSet(Command command, ExecutionHandlerContext context,
-      ByteArrayWrapper key,
-      ByteArrayWrapper value, RedisStringCommands redisStringCommands, SetOptions setOptions) {
+  private List<byte[]> getOptionalParameters(List<byte[]> commandElementsBytes) {
+    return commandElementsBytes.subList(3, commandElementsBytes.size());
+  }
-    boolean result = redisStringCommands.set(key, value, setOptions);
+  private RedisResponse doSet(ByteArrayWrapper key,
+      ByteArrayWrapper value,
+      RedisStringCommands redisStringCommands,
+      SetOptions setOptions) {
-    if (result) {
+    boolean setCompletedSuccessfully = redisStringCommands.set(key, value, setOptions);
+
+    if (setCompletedSuccessfully) {
+    } else {
+      return RedisResponse.nil();
-
-    return RedisResponse.nil();
+  private SetOptions parseOptionalParameters(List<byte[]> optionalParameterBytes)
+      throws IllegalArgumentException {
-  private SetOptions parseCommandElems(List<byte[]> commandElems) throws IllegalArgumentException {
-    long expiration = 0L;
+    long millisecondsUntilExpiration = 0L;
-    for (int i = 3; i < commandElems.size(); i++) {
-      String current_arg = Coder.bytesToString(commandElems.get(i)).toUpperCase();
-      switch (current_arg) {
-        case "KEEPTTL":
-          throw new IllegalArgumentException(ERROR_SYNTAX);
-          // KEEPTTL is part of Redis 6
-          // keepTTL = true;
-          // break;
-        case "EX":
-          if (expiration != 0) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          i++;
-          expiration = parseExpirationTime(i, commandElems);
-          expiration = SECONDS.toMillis(expiration);
-          break;
-        case "PX":
-          if (expiration != 0) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          i++;
-          expiration = parseExpirationTime(i, commandElems);
-          break;
-        case "NX":
-          if (existsOption != SetOptions.Exists.NONE) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          existsOption = SetOptions.Exists.NX;
-          break;
-        case "XX":
-          if (existsOption != SetOptions.Exists.NONE) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          existsOption = SetOptions.Exists.XX;
-          break;
-        default:
-          throw new IllegalArgumentException(ERROR_SYNTAX);
-      }
+    List<String> optionalParametersStrings =
+        optionalParameterBytes.stream()
+            .map(item -> Coder.bytesToString(item).toUpperCase())
+            .collect(Collectors.toList());
+
+    throwExceptionIfIncompatableParameterOptions(optionalParametersStrings);
+    throwErrorIfNumberInWrongPosition(optionalParametersStrings);
+    throwExceptionIfUnknownParameter(optionalParametersStrings);
+
+    // uncomment below when this functionality is reimplemented see GEODE-8263
+    // keepTTL = optionalParametersStrings.contains("KEEPTTL");
+
+    if (optionalParametersStrings.contains("PX")) {
+      millisecondsUntilExpiration =
+          handleExpiration(optionalParametersStrings, "PX");
+
+    } else if (optionalParametersStrings.contains("EX")) {
+      millisecondsUntilExpiration =
+          handleExpiration(optionalParametersStrings, "EX");
-    return new SetOptions(existsOption, expiration, keepTTL);
+    if (optionalParametersStrings.contains("NX")) {
+      existsOption = SetOptions.Exists.NX;
+    } else if (optionalParametersStrings.contains("XX")) {
+      existsOption = SetOptions.Exists.XX;
+    }
+
+    return new SetOptions(existsOption, millisecondsUntilExpiration, keepTTL);
-  private long parseExpirationTime(int index, List<byte[]> commandElems)
-      throws IllegalArgumentException {
-    String expirationString;
+  private long handleExpiration(List<String> optionalParametersStrings, String expirationType) {
+    long timeUntilExpiration;
+    long millisecondsUntilExpiration;
+    String nextParameter =
+        getNextParameter(expirationType, optionalParametersStrings);
+
+    timeUntilExpiration =
+        convertToLongOrThrowException(nextParameter);
+
+    if (timeUntilExpiration <= 0) {
+      throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
+    }
+
+    if (expirationType.equals("EX")) {
+      millisecondsUntilExpiration =
+          SECONDS.toMillis(timeUntilExpiration);
+    } else {
+      millisecondsUntilExpiration = timeUntilExpiration;
+    }
+    return millisecondsUntilExpiration;
+  }
+
+  private String getNextParameter(String currentParameter,
+      List<String> optionalParametersStrings) {
+    int index = optionalParametersStrings.indexOf(currentParameter);
+    if (optionalParametersStrings.size() <= index + 1) {
+      throw new IllegalArgumentException(ERROR_SYNTAX);
+    }
+    return optionalParametersStrings.get(index + 1);
+  }
+
+  private void throwExceptionIfUnknownParameter(List<String> optionalParameters) {
+    List<String> validOptionalParamaters = Arrays.asList("EX", "PX", "NX", "XX");
+
+    List<String> parametersInQuestion =
+        optionalParameters
+            .stream()
+            .filter(parameter -> (!validOptionalParamaters.contains(parameter)))
+            .collect(Collectors.toList());
+
+    parametersInQuestion.forEach(parameter -> {
+
+      int index = optionalParameters.indexOf(parameter);
+
+      if (!isANumber(parameter)) {
+        if (index == 0) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+
+        String previousParameter = optionalParameters.get(index - 1);
+        if (previousOptionIsValidAndExpectsANumber(previousParameter)) {
+          throw new IllegalArgumentException(ERROR_NOT_INTEGER);
+        }
+
+        throw new IllegalArgumentException(ERROR_SYNTAX);
+      }
+    });
+  }
+
+  private boolean previousOptionIsValidAndExpectsANumber(String previousParameter) {
+    List<String> validParamaters = Arrays.asList("EX", "PX");
+    return validParamaters.contains(previousParameter);
+  }
+
+  private void throwErrorIfNumberInWrongPosition(List<String> optionalParameters) {
+    for (int i = 0; i < optionalParameters.size(); i++) {
+      String parameter = optionalParameters.get(i);
+      if (isANumber(parameter)) {
+        if (i == 0) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+        String previousParameter = optionalParameters.get(i - 1);
+        if (!previousOptionIsValidAndExpectsANumber(previousParameter)) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+      }
+    }
+  }
+
+  private boolean isANumber(String parameter) {
-      expirationString = Coder.bytesToString(commandElems.get(index));
-    } catch (IndexOutOfBoundsException e) {
+      Long.parseLong(parameter);
+      return true;
+    } catch (NumberFormatException e) {
+      return false;
+    }
+  }
+
+  private void throwExceptionIfIncompatableParameterOptions(List<String> passedParametersStrings) {
+
+    if (passedParametersStrings.contains("PX")
+        && passedParametersStrings.contains("EX")) {
+    if (passedParametersStrings.contains("XX")
+        && passedParametersStrings.contains("NX")) {
+      throw new IllegalArgumentException(ERROR_SYNTAX);
+    }
+  }
+
+  private long convertToLongOrThrowException(String expirationTime) {
-      long expiration = Long.parseLong(expirationString);
-      if (expiration <= 0) {
-        throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
-      }
-      return expiration;
+      return parseLong(expirationTime);
-

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV60 MOV83 INS74 INS42 MOV44 INS8 INS83 MOV43 INS42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV83 UPD39 MOV39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS60 INS43 INS5 UPD42 INS41 UPD42 MOV60 MOV60 MOV60 INS60 INS21 INS21 INS21 INS25 INS25 INS41 INS74 INS42 MOV43 INS42 INS60 INS60 INS60 INS21 MOV25 INS25 INS41 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS74 INS42 INS60 INS60 INS21 INS43 INS42 INS60 MOV41 INS74 INS42 INS24 INS43 INS42 INS54 INS74 INS42 MOV25 INS25 INS43 INS42 INS54 INS74 INS59 INS42 INS39 INS85 INS32 UPD42 INS8 INS74 INS59 INS32 INS32 INS32 INS32 INS8 INS25 INS32 INS8 INS25 INS14 INS43 INS43 INS39 INS59 INS39 INS59 MOV43 INS59 MOV7 INS32 INS8 INS8 INS42 INS42 INS43 INS43 INS39 INS59 INS27 MOV8 INS32 INS43 INS43 INS74 INS59 INS74 INS59 INS32 INS42 INS74 INS59 INS32 INS43 INS43 INS58 INS27 MOV37 INS8 INS42 INS8 MOV12 INS43 INS43 UPD27 INS27 INS8 INS42 INS8 MOV12 UPD42 INS43 INS5 INS42 INS32 INS42 INS42 INS34 INS32 UPD42 MOV41 UPD42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS21 INS32 INS8 INS42 INS42 INS45 MOV21 INS32 INS8 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS42 INS32 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS86 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS32 MOV60 INS25 INS21 INS41 INS8 INS42 INS42 INS32 INS32 INS32 INS32 INS53 MOV41 INS42 INS39 INS85 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS45 INS21 INS42 INS42 INS45 MOV21 INS42 INS42 INS42 UPD42 UPD42 MOV7 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS45 UPD42 MOV42 INS42 INS32 INS42 INS32 INS59 INS8 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS34 INS42 INS42 INS43 INS32 INS8 INS32 INS9 UPD43 INS41 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS14 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS32 INS7 UPD42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 UPD42 MOV42 MOV25 INS60 MOV25 INS42 INS42 INS42 UPD42 INS9 INS43 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS59 INS32 INS42 INS42 INS45 INS42 INS32 UPD42 INS42 INS42 INS59 INS36 INS39 INS59 INS38 INS8 INS42 INS42 INS42 UPD27 INS43 INS59 INS38 INS42 INS42 MOV32 MOV42 INS42 INS42 INS45 INS42 INS38 INS42 INS32 INS32 MOV25 INS60 INS25 MOV53 UPD42 INS34 INS42 INS42 INS32 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 UPD27 INS43 INS59 INS32 INS8 UPD42 MOV42 MOV42 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 INS34 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS34 INS42 INS42 INS27 INS14 INS42 INS34 MOV43 UPD42 MOV42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL42 DEL14 DEL42 DEL40 DEL42 DEL34 DEL27 DEL42 DEL34 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL49 DEL45 DEL49 DEL42 DEL37 DEL21 DEL21 DEL21 DEL10 DEL45 DEL49 DEL42 DEL37 DEL21 DEL42 DEL32 DEL7 DEL21 DEL10 DEL45 DEL49 DEL10 DEL45 DEL49 DEL10 DEL49 DEL43 DEL14 DEL53 DEL50 DEL8 DEL24 DEL8 DEL31 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL54 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL31