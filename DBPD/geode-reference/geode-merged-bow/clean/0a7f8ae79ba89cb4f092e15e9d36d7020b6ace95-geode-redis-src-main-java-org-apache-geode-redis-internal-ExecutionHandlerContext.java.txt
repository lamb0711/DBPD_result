GEODE-8168: Redis pipelined command responses can be corrupted (#5145)


-import static org.apache.geode.redis.internal.RedisCommandType.PUBLISH;
+import static org.apache.geode.redis.internal.RedisCommandType.SUBSCRIBE;
+import java.util.concurrent.CountDownLatch;
+import io.netty.buffer.UnpooledByteBufAllocator;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.EventLoopGroup;
+  private final EventLoopGroup subscriberEventLoopGroup;
-      RedisLockService lockService) {
+      RedisLockService lockService, EventLoopGroup subscriberEventLoopGroup) {
+    this.subscriberEventLoopGroup = subscriberEventLoopGroup;
-      logResponse(command);
-
-    // PUBLISH responses are always deferred
+    logResponse(response);
+
+    moveSubscribeToNewEventLoopGroup(ctx, command);
+
-    if (response == null && !command.isOfType(PUBLISH)) {
+    if (response == null) {
-  private void logResponse(Command command) {
-    if (logger.isDebugEnabled() && command.getResponse() != null) {
-      ByteBuf response = null;
-      try {
-        response = command.getResponse()
-            .copy(0, Math.min(command.getResponse().readableBytes(), 100));
-        logger.debug("Redis command returned: {}", getPrintableByteBuf(response));
-      } finally {
-        if (response != null) {
-          response.release();
-        }
-      }
+  /**
+   * SUBSCRIBE commands run in their own {@link EventLoopGroup}
+   */
+  private void moveSubscribeToNewEventLoopGroup(ChannelHandlerContext ctx, Command command)
+      throws InterruptedException {
+    if (command.isOfType(SUBSCRIBE)) {
+      CountDownLatch latch = new CountDownLatch(0);
+      ctx.channel().deregister().addListener((ChannelFutureListener) future -> {
+        subscriberEventLoopGroup.register(ctx.channel()).sync();
+        latch.countDown();
+      });
+      latch.await();
-  private String getPrintableByteBuf(ByteBuf buf) {
-    StringBuilder builder = new StringBuilder();
-    for (int i = 0; i < buf.readableBytes(); i++) {
-      byte aByte = buf.getByte(i);
-      if (aByte > 31 && aByte < 127) {
-        builder.append((char) aByte);
-      } else {
-        builder.append(String.format("\\x%02x", aByte));
-      }
+  private void logResponse(RedisResponse response) {
+    if (logger.isDebugEnabled() && response != null) {
+      ByteBuf buf = response.encode(new UnpooledByteBufAllocator(false));
+      logger.debug("Redis command returned: {}",
+          Command.getHexEncodedString(buf.array(), buf.readableBytes()));
-
-    return builder.toString();
-

INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS44 INS29 UPD42 INS44 INS43 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS65 INS43 INS42 INS42 INS43 INS42 INS25 INS42 INS7 INS32 INS32 MOV27 INS66 INS65 INS42 INS32 UPD42 MOV42 INS27 INS8 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS21 MOV21 MOV32 MOV27 MOV60 MOV21 INS52 INS42 UPD43 INS32 MOV43 UPD42 UPD42 INS14 INS32 UPD42 MOV42 INS11 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 INS43 INS34 MOV32 UPD42 MOV42 INS43 INS86 UPD42 UPD42 INS14 INS42 UPD42 INS32 MOV32 INS42 UPD42 UPD42 INS42 INS59 INS8 INS43 INS9 UPD42 MOV42 UPD42 MOV42 INS42 INS21 MOV21 INS42 INS32 INS32 UPD42 MOV42 UPD42 UPD42 INS42 INS42 MOV32 UPD42 UPD42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL32 DEL33 DEL27 DEL27 DEL33 DEL45 DEL42 DEL42 DEL32 DEL42 DEL34 DEL42 DEL32 DEL34 DEL32 DEL32 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL54 DEL39 DEL42 DEL45 DEL42 DEL43 DEL42 DEL42 DEL44 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL41 DEL8