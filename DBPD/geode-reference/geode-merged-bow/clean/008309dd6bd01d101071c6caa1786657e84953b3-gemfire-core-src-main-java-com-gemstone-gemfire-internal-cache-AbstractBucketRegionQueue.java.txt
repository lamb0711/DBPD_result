Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.concurrent.atomic.AtomicReference;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSBucketRegionQueue;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSGatewayEventImpl;
+import com.gemstone.gemfire.internal.cache.versions.RegionVersionVector;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.offheap.OffHeapRegionEntryHelper;
-  private static final Logger logger = LogService.getLogger();
+  protected static final Logger logger = LogService.getLogger();
-      //merge42180: are we considering offheap in cedar. Comment freeOffHeapReference intentionally
-      //event.freeOffHeapReferences();
+      event.release();
-              /*if (event != null) {
-                event.release();  // merge44873: this is offheap related change from cheetah
-              }*/
+              if (event != null) {
+                event.release();
+              }
-              /*for (GatewaySenderEventImpl e: tempQueue) {
-                e.release(); // merge44873: this is offheap related change from cheetah
-              }*/
+              for (GatewaySenderEventImpl e: tempQueue) {
+                e.release();
+              }
-     
+       GatewaySenderEventImpl.release(event.getRawOldValue());
+	GatewaySenderEventImpl.release(event.getRawOldValue());
-    EntryEventImpl event = new EntryEventImpl(this, Operation.UPDATE, key,
+    EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key,
-    //event.copyOffHeapToHeap();
+    event.copyOffHeapToHeap();
-
+    
+    int sizeOfHdfsEvent = -1;
+      if (this instanceof HDFSBucketRegionQueue) {
+        // need to fetch the size before event is inserted in queue.
+        // fix for #50016
+        if (this.getBucketAdvisor().isPrimary()) {
+          HDFSGatewayEventImpl hdfsEvent = (HDFSGatewayEventImpl)event.getValue();
+          sizeOfHdfsEvent = hdfsEvent.getSizeOnHDFSInBytes(!((HDFSBucketRegionQueue)this).isBucketSorted);
+        }
+      }
+      
-      //if (!didPut) {
-      //  GatewaySenderEventImpl gwVal = (GatewaySenderEventImpl) value;
-      //  gwVal.release();
-      //}
+      if (!didPut) {
+        GatewaySenderEventImpl.release(value);
+      }
-      addToEventQueue(key, didPut, event);
+      addToEventQueue(key, didPut, event, sizeOfHdfsEvent);
+  @Override
+  public void closeEntries() {
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        AbstractBucketRegionQueue.super.closeEntries();
+      }
+    });
+    clearQueues();
+    
+  }
-//  @Override
-//  public void closeEntries() {
-//    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
-//      @Override
-//      public void run() {
-//        AbstractBucketRegionQueue.super.closeEntries();
-//      }
-//    });
-//    clearQueues();
-//    
-//  }
-//  
-//  @Override
-//  public Set<VersionSource> clearEntries(final RegionVersionVector rvv) {
-//    final AtomicReference<Set<VersionSource>> result = new AtomicReference<Set<VersionSource>>();
-//    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
-//      @Override
-//      public void run() {
-//        result.set(AbstractBucketRegionQueue.super.clearEntries(rvv));
-//      }
-//    });
-//    clearQueues();
-//    return result.get();
-//  }
+  @Override
+  public Set<VersionSource> clearEntries(final RegionVersionVector rvv) {
+    final AtomicReference<Set<VersionSource>> result = new AtomicReference<Set<VersionSource>>();
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        result.set(AbstractBucketRegionQueue.super.clearEntries(rvv));
+      }
+    });
+    clearQueues();
+    return result.get();
+  }
-  protected abstract void addToEventQueue(Object key, boolean didPut, EntryEventImpl event);
+  protected abstract void addToEventQueue(Object key, boolean didPut, EntryEventImpl event, 
+      int sizeOfHdfsEvent);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 UPD83 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS44 INS21 INS21 INS60 INS42 INS21 INS21 INS42 INS43 INS43 INS83 INS43 INS42 INS60 INS21 INS21 INS41 INS39 INS42 INS32 MOV43 INS59 INS32 INS39 INS59 INS8 INS8 INS32 INS32 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS32 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS38 INS25 MOV21 MOV21 INS25 INS42 INS42 INS14 INS42 INS43 INS74 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS52 INS40 INS42 INS42 INS33 INS9 MOV32 INS34 INS62 INS8 INS38 INS8 INS43 INS1 INS42 INS43 INS43 INS74 INS43 INS1 INS42 INS42 INS42 INS42 INS32 INS52 INS43 INS25 INS42 INS21 INS42 INS42 INS31 INS42 INS42 INS43 INS74 INS42 INS31 INS42 INS42 INS42 INS32 INS8 INS32 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS78 INS83 INS39 INS42 INS8 INS32 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS52 INS42 INS43 INS59 INS7 INS48 INS32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS48 INS8 INS43 INS32 INS42 INS42 INS38 INS42 INS42 INS42 INS70 MOV21 INS42 INS42 INS42 INS22 INS8 INS44 INS42 INS8 INS36 INS42 INS25 INS43 INS42 INS21 INS11 INS27 INS8 INS42 INS32 INS43 INS52 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 DEL8 DEL8 DEL42 DEL43 DEL42 DEL52 DEL40 DEL42 DEL42 DEL33 DEL9 DEL14 DEL59 DEL8 DEL8