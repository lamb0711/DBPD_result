Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public CommandTarget(String commandName, String[] synonyms,
-      GfshMethodTarget methodTarget, GfshOptionParser optionParser,
-      AvailabilityTarget availabilityIndicator, String commandHelp) {
+  public CommandTarget(String commandName, String[] synonyms, GfshMethodTarget methodTarget,
+      GfshOptionParser optionParser, AvailabilityTarget availabilityIndicator, String commandHelp) {
-  public boolean isAvailable() throws IllegalArgumentException,
-      IllegalAccessException, InvocationTargetException {
+  public boolean isAvailable()
+      throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-      return (Boolean) availabilityIndicator.getMethod().invoke(
-          availabilityIndicator.getTarget());
+      return (Boolean) availabilityIndicator.getMethod().invoke(availabilityIndicator.getTarget());
-    return new CommandTarget(commandName, synonyms, new GfshMethodTarget(
-        gfshMethodTarget.getMethod(), gfshMethodTarget.getTarget(),
-        remainingBuffer, key), optionParser, availabilityIndicator, commandHelp);
+    return new CommandTarget(
+        commandName, synonyms, new GfshMethodTarget(gfshMethodTarget.getMethod(),
+            gfshMethodTarget.getTarget(), remainingBuffer, key),
+        optionParser, availabilityIndicator, commandHelp);
-  
+
-    result = prime * result
-        + ((commandName == null) ? 0 : commandName.hashCode());
-    result = prime * result
-        + ((commandHelp == null) ? 0 : commandHelp.hashCode());
-    result = prime * result
-        + ((gfshMethodTarget == null) ? 0 : gfshMethodTarget.hashCode());
-    result = prime * result
-        + ((optionParser == null) ? 0 : optionParser.hashCode());
-    result = prime
-        * result
-        + ((availabilityIndicator == null) ? 0 : availabilityIndicator
-            .hashCode());
+    result = prime * result + ((commandName == null) ? 0 : commandName.hashCode());
+    result = prime * result + ((commandHelp == null) ? 0 : commandHelp.hashCode());
+    result = prime * result + ((gfshMethodTarget == null) ? 0 : gfshMethodTarget.hashCode());
+    result = prime * result + ((optionParser == null) ? 0 : optionParser.hashCode());
+    result =
+        prime * result + ((availabilityIndicator == null) ? 0 : availabilityIndicator.hashCode());
-    } else if (!availabilityIndicator.equals(commandTarget
-        .getAvailabilityIndicator())) {
+    } else if (!availabilityIndicator.equals(commandTarget.getAvailabilityIndicator())) {
-    builder.append(CommandTarget.class.getSimpleName())
-        .append("[" + "commandName=" + commandName)
+    builder.append(CommandTarget.class.getSimpleName()).append("[" + "commandName=" + commandName)
-    } 
+    }
-  
+

