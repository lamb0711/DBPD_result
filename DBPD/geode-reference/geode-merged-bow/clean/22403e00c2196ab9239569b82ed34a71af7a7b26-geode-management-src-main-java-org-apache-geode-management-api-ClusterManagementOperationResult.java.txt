GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import org.apache.geode.management.internal.Dormant;
- * This is normally returned by
+ * Returned by
- * launching the async operation, and if successful, the {@link CompletableFuture} to access the
- * status, result, and start/end times of the async operation.
+ * launching the async operation,
+ * and by {@link ClusterManagementService#get(ClusterManagementOperation, String)} to
+ * describe the status of
+ * a started async operation.
-public class ClusterManagementOperationResult<V extends OperationResult>
+public class ClusterManagementOperationResult<A extends ClusterManagementOperation<V>, V extends OperationResult>
-  @JsonIgnore
-  private final CompletableFuture<V> operationResult;
-  @JsonIgnore
-  private final CompletableFuture<Date> futureOperationEnded;
+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
+  private volatile Date operationEnd;
-  private String operator;
+  private A operation;
+  private V operationResult;
+  private Throwable throwable;
-  public ClusterManagementOperationResult() {
-    this.operationResult = null;
-    this.futureOperationEnded = null;
-    this.operator = null;
-  }
+  public ClusterManagementOperationResult() {}
-  public ClusterManagementOperationResult(ClusterManagementResult result,
-      CompletableFuture<V> operationResult, Date operationStart,
-      CompletableFuture<Date> futureOperationEnded, String operator, String operationId) {
-    super(result);
-    this.operationResult = operationResult;
+  public ClusterManagementOperationResult(StatusCode statusCode, String message,
+      Date operationStart, Date operationEnd,
+      A operation, String operationId, V operationResult,
+      Throwable throwable) {
+    super(statusCode, message);
-    this.futureOperationEnded = futureOperationEnded;
-    this.operator = operator;
+    this.operationEnd = operationEnd;
+    this.operation = operation;
+    this.operationResult = operationResult;
+    this.throwable = throwable;
-   * Returns the future result of the async operation
+   * Returns the async operation.
-  @JsonIgnore
-  public CompletableFuture<V> getFutureResult() {
-    if (operationResult instanceof Dormant)
-      ((Dormant) operationResult).wakeUp();
-    return operationResult;
-  }
-
-  /**
-   * Returns the completed result of the async operation (blocks until complete, if necessary)
-   */
-  @JsonIgnore
-  public V getResult() throws ExecutionException, InterruptedException {
-    return getFutureResult().get();
-  }
-
-  /**
-   * Returns the time at which the async operation was requested
-   */
-  public Date getOperationStart() {
-    return operationStart;
-  }
-
-  /**
-   * Returns the future time the async operation completed. This is guaranteed to complete before
-   * {@link #getFutureResult()}. Note: subsequent stages must be chained to
-   * {@link #getFutureResult()}, not here.
-   */
-  @JsonIgnore
-  public CompletableFuture<Date> getFutureOperationEnded() {
-    return futureOperationEnded;
-  }
-
-  /**
-   * Returns the actual time the async operation completed, or null if not yet completed
-   */
-  @JsonProperty
-  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
-  public Date getOperationEnded() {
-    return futureOperationEnded.getNow(null);
-  }
-
-  /**
-   * Returns the user who initiated the async operation, if initiated externally and security is
-   * enabled
-   */
-  public String getOperator() {
-    return operator;
+  public A getOperation() {
+    return operation;
+
+  /**
+   * Returns the time the operation was started
+   */
+  public Date getOperationStart() {
+    return this.operationStart;
+  }
+
+  /**
+   * Returns the time the operation was completed. This value is null while the operation is in
+   * process.
+   */
+  public Date getOperationEnd() {
+    return this.operationEnd;
+  }
+
+  /**
+   * Returns the operation result as an extension of {@link OperationResult}
+   */
+  public V getOperationResult() {
+    return this.operationResult;
+  }
+
+  /**
+   * Returns any exceptions that might be returned as a result of the operation. Null in case
+   * no exceptions occurred.
+   */
+  public Throwable getThrowable() {
+    return this.throwable;
+  }

MOV31 INS73 INS23 INS23 INS23 MOV44 MOV44 MOV44 INS42 UPD74 MOV74 MOV77 MOV83 UPD83 MOV83 MOV43 INS59 MOV83 INS43 MOV59 INS83 MOV43 MOV59 UPD43 INS44 INS44 MOV21 INS43 UPD42 MOV43 UPD42 UPD42 MOV43 UPD42 UPD43 UPD42 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD43 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 MOV43 INS42 INS43 INS42 MOV43 INS43 UPD42 INS21 UPD42 MOV42 UPD42 INS68 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS7 UPD66 UPD42 UPD66 INS22 UPD66 INS66 INS22 UPD66 MOV22 UPD66 UPD66 INS22 INS42 INS42 INS69 INS69 UPD42 UPD42 INS22 INS42 INS52 INS42 INS52 INS42 INS42 INS52 INS42 INS43 INS43 UPD42 UPD42 INS52 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL78 DEL23 DEL42 DEL78 DEL83 DEL43 DEL42 DEL43 DEL74 DEL23 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL43 DEL74 DEL43 DEL74 DEL42 DEL78 DEL43 DEL74 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL25 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL68 DEL66 DEL42 DEL68 DEL65 DEL66 DEL42 DEL78 DEL42 DEL43 DEL74 DEL42 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL42