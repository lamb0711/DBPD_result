GEODE-6918: Cleanup CacheCreation and CacheCreationJUnitTest

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>

+import static java.lang.String.format;
+import static org.apache.geode.internal.logging.LogWriterFactory.toSecurityLogWriter;
+import org.apache.logging.log4j.Logger;
+import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.query.CqException;
-import org.apache.geode.cache.query.CqExistsException;
-import org.apache.geode.cache.query.IndexExistsException;
-import org.apache.geode.cache.query.IndexNameConflictException;
-import org.apache.geode.cache.query.MultiIndexCreationException;
-import org.apache.geode.cache.query.RegionNotFoundException;
-import org.apache.geode.internal.logging.LogWriterFactory;
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+
+  @Immutable
+  private static final RegionAttributes defaults = new AttributesFactory().create();
+
+  /**
+   * Store the current CacheCreation that is doing a create. Used from PoolManager to defer to
+   * CacheCreation as a manager of pools.
+   *
+   * @since GemFire 5.7
+   */
+  private static final ThreadLocal<PoolManagerImpl> createInProgress = new ThreadLocal<>();
+
-  private boolean hasLockTimeout = false;
+  private boolean hasLockTimeout;
-  private boolean hasLockLease = false;
+  private boolean hasLockLease;
-  private boolean hasSearchTimeout = false;
+  private boolean hasSearchTimeout;
-  private boolean hasMessageSyncInterval = false;
+  private boolean hasMessageSyncInterval;
-  private DynamicRegionFactory.Config dynamicRegionFactoryConfig = null;
-  private boolean hasDynamicRegionFactory = false;
+  private DynamicRegionFactory.Config dynamicRegionFactoryConfig;
+  private boolean hasDynamicRegionFactory;
-  private boolean isServer = false;
-  private boolean hasServer = false;
+  private boolean isServer;
+  private boolean hasServer;
-  private static class DeclarableAndProperties {
-    private final Declarable declarable;
-    private final Properties properties;
-
-    public DeclarableAndProperties(Declarable d, Properties p) {
-      declarable = d;
-      properties = p;
-    }
-
-    public Declarable getDeclarable() {
-      return declarable;
-    }
-
-    public Properties getProperties() {
-      return properties;
-    }
-  }
-
-  private boolean hasCopyOnRead = false;
+  private boolean hasCopyOnRead;
-  CacheTransactionManagerCreation txMgrCreation = null;
+  private CacheTransactionManagerCreation cacheTransactionManagerCreation;
-  final List<String> regionAttributesNames = new ArrayList<>();
+  private final List<String> regionAttributesNames = new ArrayList<>();
-  protected final Map<String, DiskStore> diskStores = new LinkedHashMap<>();
+  private final Map<String, DiskStore> diskStores = new LinkedHashMap<>();
-  private final InternalLogWriter logWriter =
-      new LocalLogWriter(ALL.intLevel(), System.out);
+  private final InternalLogWriter logWriter = new LocalLogWriter(ALL.intLevel(), System.out);
-  private final InternalLogWriter securityLogWriter =
-      LogWriterFactory.toSecurityLogWriter(this.logWriter);
+  private final InternalLogWriter securityLogWriter = toSecurityLogWriter(logWriter);
+  private final PoolManagerImpl poolManager = new PoolManagerImpl(false);
+
+  private volatile FunctionServiceCreation functionServiceCreation;
+
+  private volatile boolean hasFunctionService;
+
+  private volatile boolean hasResourceManager;
+
+  private volatile ResourceManagerCreation resourceManagerCreation;
+
+  private volatile SerializerCreation serializerCreation;
+
+  private Declarable initializer;
+
+  private Properties initializerProps;
+
+  private final InternalQueryService queryService = createInternalQueryService();
+
+   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
+   *        for generating xml.
+   *
+   * @since GemFire 5.7
+   */
+  public CacheCreation(boolean forParsing) {
+    initializeRegionShortcuts();
+    if (!forParsing) {
+      createInProgress.set(poolManager);
+    }
+  }
+
+  /**
-   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
-   *        for generating xml.
-   * @since GemFire 5.7
-   */
-  public CacheCreation(boolean forParsing) {
-    initializeRegionShortcuts();
-    if (!forParsing) {
-      createInProgress.set(this.poolManager);
-    }
-  }
-
-  /**
-  @Immutable
-  private static final RegionAttributes defaults = new AttributesFactory().create();
-
-
-    RegionCreation existing = (RegionCreation) this.roots.get(name);
+    RegionCreation existing = (RegionCreation) roots.get(name);
+
-
-    } else {
-      this.roots.put(root.getName(), root);
+
+    roots.put(root.getName(), root);
-    return this.lockTimeout;
+    return lockTimeout;
-    this.lockTimeout = seconds;
-    this.hasLockTimeout = true;
+    lockTimeout = seconds;
+    hasLockTimeout = true;
-    return this.hasLockTimeout;
+    return hasLockTimeout;
-    return this.lockLease;
+    return lockLease;
-    this.lockLease = seconds;
-    this.hasLockLease = true;
+    lockLease = seconds;
+    hasLockLease = true;
-    return this.hasLockLease;
+    return hasLockLease;
-    return this.searchTimeout;
+    return searchTimeout;
-    this.searchTimeout = seconds;
-    this.hasSearchTimeout = true;
+    searchTimeout = seconds;
+    hasSearchTimeout = true;
-    return this.hasSearchTimeout;
+    return hasSearchTimeout;
-    this.hasMessageSyncInterval = true;
+    hasMessageSyncInterval = true;
-    return this.hasMessageSyncInterval;
+    return hasMessageSyncInterval;
-    Set<Region<?, ?>> regions = new LinkedHashSet<>(this.roots.values());
-    return Collections.unmodifiableSet(regions);
+    return Collections.unmodifiableSet(new LinkedHashSet<>(roots.values()));
-   * Store the current CacheCreation that is doing a create. Used from PoolManager to defer to
-   * CacheCreation as a manager of pools.
-   *
-   * @since GemFire 5.7
-   */
-  private static final ThreadLocal<PoolManagerImpl> createInProgress = new ThreadLocal<>();
-
-  /**
-    this.extensionPoint.beforeCreate(cache);
+    extensionPoint.beforeCreate(cache);
-    cache.setDeclarativeCacheConfig(this.cacheConfig);
+    cache.setDeclarativeCacheConfig(cacheConfig);
-    if (this.hasLockLease()) {
-      cache.setLockLease(this.lockLease);
+    if (hasLockLease()) {
+      cache.setLockLease(lockLease);
-    if (this.hasLockTimeout()) {
-      cache.setLockTimeout(this.lockTimeout);
+    if (hasLockTimeout()) {
+      cache.setLockTimeout(lockTimeout);
-    if (this.hasSearchTimeout()) {
-      cache.setSearchTimeout(this.searchTimeout);
+    if (hasSearchTimeout()) {
+      cache.setSearchTimeout(searchTimeout);
-    if (this.hasMessageSyncInterval()) {
-      cache.setMessageSyncInterval(this.getMessageSyncInterval());
+    if (hasMessageSyncInterval()) {
+      cache.setMessageSyncInterval(getMessageSyncInterval());
-    if (this.gatewayConflictResolver != null) {
-      cache.setGatewayConflictResolver(this.gatewayConflictResolver);
+    if (gatewayConflictResolver != null) {
+      cache.setGatewayConflictResolver(gatewayConflictResolver);
+
-      // moved this up to fix bug 42128
-    for (DiskStore diskStore : this.diskStores.values()) {
+    for (DiskStore diskStore : diskStores.values()) {
-    if (this.hasDynamicRegionFactory()) {
-      DynamicRegionFactory.get().open(this.getDynamicRegionFactoryConfig());
+    if (hasDynamicRegionFactory()) {
+      DynamicRegionFactory.get().open(getDynamicRegionFactoryConfig());
-    if (this.hasServer()) {
-      cache.setIsServer(this.isServer);
+    if (hasServer()) {
+      cache.setIsServer(isServer);
-    if (this.hasCopyOnRead()) {
-      cache.setCopyOnRead(this.copyOnRead);
+    if (hasCopyOnRead()) {
+      cache.setCopyOnRead(copyOnRead);
-    if (this.txMgrCreation != null && this.txMgrCreation.getListeners().length > 0
+    if (cacheTransactionManagerCreation != null
+        && cacheTransactionManagerCreation.getListeners().length > 0
-      cache.getCacheTransactionManager().initListeners(this.txMgrCreation.getListeners());
+      cache.getCacheTransactionManager()
+          .initListeners(cacheTransactionManagerCreation.getListeners());
-    if (this.txMgrCreation != null && cache.getCacheTransactionManager() != null) {
-      cache.getCacheTransactionManager().setWriter(this.txMgrCreation.getWriter());
+    if (cacheTransactionManagerCreation != null && cache.getCacheTransactionManager() != null) {
+      cache.getCacheTransactionManager().setWriter(cacheTransactionManagerCreation.getWriter());
-    for (GatewaySender senderCreation : this.getGatewaySenders()) {
+    for (GatewaySender senderCreation : getGatewaySenders()) {
-        cache.getLogger().info(
-            String.format("%s is not being started since it is configured for manual start",
-                gatewaySender));
+        logger.info("{} is not being started since it is configured for manual start",
+            gatewaySender);
-    for (AsyncEventQueue asyncEventQueueCreation : this.getAsyncEventQueues()) {
+    for (AsyncEventQueue asyncEventQueueCreation : getAsyncEventQueues()) {
-    for (String id : this.regionAttributesNames) {
+    for (String id : regionAttributesNames) {
-    initializeRegions(this.roots, cache);
+    initializeRegions(roots, cache);
-    // Create and start the BridgeServers. This code was moved from
-    // before region initialization to after it to fix bug 33587.
-    // to fix bug 39736.
-    for (GatewayReceiver receiverCreation : this.getGatewayReceivers()) {
+    for (GatewayReceiver receiverCreation : getGatewayReceivers()) {
-        cache.getLogger().info(
-            String.format("%s is not being started since it is configured for manual start",
-                receiver));
+        logger.info("{} is not being started since it is configured for manual start", receiver);
-    cache.setBackupFiles(this.backups);
+    cache.setBackupFiles(backups);
-    this.extensionPoint.fireCreate(cache);
+    extensionPoint.fireCreate(cache);
-    for (DeclarableAndProperties struct : this.declarablePropertiesList) {
+    for (DeclarableAndProperties struct : declarablePropertiesList) {
-        declarable.init(properties); // for backwards compatibility
+        // for backwards compatibility
+        declarable.init(properties);
-      this.declarablePropertiesMap.put(declarable, properties);
+      declarablePropertiesMap.put(declarable, properties);
-    cache.addDeclarableProperties(this.declarablePropertiesMap);
+    cache.addDeclarableProperties(declarablePropertiesMap);
-  void reconfigureServer(CacheServerImpl serverImpl, ServerLauncherParameters parameters) {
-    if (parameters == null)
+  private void reconfigureServer(CacheServerImpl serverImpl, ServerLauncherParameters parameters) {
+    if (parameters == null) {
+    }
-        && parameters.getPort() != CacheServer.DEFAULT_PORT)
+        && parameters.getPort() != CacheServer.DEFAULT_PORT) {
+    }
-        && parameters.getMaxThreads() != CacheServer.DEFAULT_MAX_THREADS)
+        && parameters.getMaxThreads() != CacheServer.DEFAULT_MAX_THREADS) {
+    }
-        && parameters.getMaxConnections() != CacheServer.DEFAULT_MAX_CONNECTIONS)
+        && parameters.getMaxConnections() != CacheServer.DEFAULT_MAX_CONNECTIONS) {
+    }
-        && parameters.getMaxMessageCount() != CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT)
+        && parameters.getMaxMessageCount() != CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT) {
+    }
-        && parameters.getSocketBufferSize() != CacheServer.DEFAULT_SOCKET_BUFFER_SIZE)
+        && parameters.getSocketBufferSize() != CacheServer.DEFAULT_SOCKET_BUFFER_SIZE) {
+    }
-        && parameters.getBindAddress() != CacheServer.DEFAULT_BIND_ADDRESS)
+        && parameters.getBindAddress() != CacheServer.DEFAULT_BIND_ADDRESS) {
+    }
-        && parameters.getMessageTimeToLive() != CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE)
+        && parameters.getMessageTimeToLive() != CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE) {
+    }
-        && parameters.getHostnameForClients() != CacheServer.DEFAULT_HOSTNAME_FOR_CLIENTS)
+        && parameters.getHostnameForClients() != CacheServer.DEFAULT_HOSTNAME_FOR_CLIENTS) {
+    }
-        throw new GemFireIOException(
-            String.format("While starting cache server %s", impl),
-            ex);
+        throw new GemFireIOException(format("While starting cache server %s", impl), ex);
-  void removeCacheServers(List<CacheServer> declarativeCacheServers, Cache cache,
-      Integer serverPort, String serverBindAdd, Boolean disableDefaultServer) {
-
-    throw new UnsupportedOperationException("Should not be invoked");
-  }
-
-    // to fix bug 44271 create the disk store used by the pdx registry first.
+    // Create the disk store used by the pdx registry first.
-      // make sure pdxRegDSC gets set to fix for bug 44914
-      pdxRegDSC = (DiskStoreAttributesCreation) this.diskStores.get(pdxRegDsName);
+      pdxRegDSC = (DiskStoreAttributesCreation) diskStores.get(pdxRegDsName);
-    boolean sameConfig = other.getLockLease() == this.getLockLease()
-        && other.getLockTimeout() == this.getLockTimeout()
-        && other.getSearchTimeout() == this.getSearchTimeout()
-        && other.getMessageSyncInterval() == this.getMessageSyncInterval()
-        && other.getCopyOnRead() == this.getCopyOnRead() && other.isServer() == this.isServer();
+    boolean sameConfig = other.getLockLease() == getLockLease()
+        && other.getLockTimeout() == getLockTimeout()
+        && other.getSearchTimeout() == getSearchTimeout()
+        && other.getMessageSyncInterval() == getMessageSyncInterval()
+        && other.getCopyOnRead() == getCopyOnRead() && other.isServer() == isServer();
+    }
+
+    DynamicRegionFactory.Config drc1 = getDynamicRegionFactoryConfig();
+    if (drc1 != null) {
+      // we have a dynamic region factory
+      DynamicRegionFactory.Config drc2;
+      if (other instanceof CacheCreation) {
+        drc2 = ((CacheCreation) other).getDynamicRegionFactoryConfig();
+      } else {
+        drc2 = DynamicRegionFactory.get().getConfig();
+      }
+      if (drc2 == null) {
+        return false;
+      }
+      if (!drc1.equals(drc2)) {
+        return false;
+      }
-      DynamicRegionFactory.Config drc1 = this.getDynamicRegionFactoryConfig();
-      if (drc1 != null) {
-        // we have a dynamic region factory
-        DynamicRegionFactory.Config drc2 = null;
-        if (other instanceof CacheCreation) {
-          drc2 = ((CacheCreation) other).getDynamicRegionFactoryConfig();
-        } else {
-          drc2 = DynamicRegionFactory.get().getConfig();
-        }
-        if (drc2 == null) {
-          return false;
-        }
-        if (!drc1.equals(drc2)) {
+      // we have no dynamic region factory; how about other?
+      if (other instanceof CacheCreation) {
+        if (((CacheCreation) other).getDynamicRegionFactoryConfig() != null) {
-        // we have no dynamic region factory; how about other?
-        if (other instanceof CacheCreation) {
-          if (((CacheCreation) other).getDynamicRegionFactoryConfig() != null) {
-            return false;
-          }
-        } else {
-          // other must be real cache in which case we compare to DynamicRegionFactory
-          if (DynamicRegionFactory.get().isOpen()) {
-            return false;
-          }
+        // other must be real cache in which case we compare to DynamicRegionFactory
+        if (DynamicRegionFactory.get().isOpen()) {
+          return false;
+        }
+      }
+    }
+
+    Collection<CacheServer> myBridges = getCacheServers();
+    Collection<CacheServer> otherBridges = other.getCacheServers();
+    if (myBridges.size() != otherBridges.size()) {
+      throw new RuntimeException("cacheServers size");
+    }
+
+    for (CacheServer myBridge1 : myBridges) {
+      CacheServerCreation myBridge = (CacheServerCreation) myBridge1;
+      boolean found = false;
+      for (CacheServer otherBridge : otherBridges) {
+        if (myBridge.sameAs(otherBridge)) {
+          found = true;
+          break;
-      Collection<CacheServer> myBridges = this.getCacheServers();
-      Collection<CacheServer> otherBridges = other.getCacheServers();
-      if (myBridges.size() != otherBridges.size()) {
-        throw new RuntimeException(
-            "cacheServers size");
+      if (!found) {
+        throw new RuntimeException(format("cache server %s not found", myBridge));
+    }
-      for (CacheServer myBridge1 : myBridges) {
-        CacheServerCreation myBridge = (CacheServerCreation) myBridge1;
-        boolean found = false;
-        for (CacheServer otherBridge : otherBridges) {
-          if (myBridge.sameAs(otherBridge)) {
-            found = true;
-            break;
-          }
-        }
+    // compare connection pools
+    Map<String, Pool> connectionPools1 = getPools();
+    Map<String, Pool> connectionPools2 =
+        other instanceof CacheCreation ? ((CacheCreation) other).getPools()
+            : PoolManager.getAll();
+    int connectionPools1Size = connectionPools1.size();
-        if (!found) {
-          throw new RuntimeException(
-              String.format("cache server %s not found", myBridge));
+    // ignore any gateway instances
+    for (Pool connectionPool : connectionPools1.values()) {
+      if (((PoolImpl) connectionPool).isUsedByGateway()) {
+        connectionPools1Size--;
+      }
+    }
+
+    int connectionPools2Size = connectionPools2.size();
+
+    // ignore any gateway instances
+    for (Pool connectionPool : connectionPools2.values()) {
+      if (((PoolImpl) connectionPool).isUsedByGateway()) {
+        connectionPools2Size--;
+      }
+    }
+
+    if (connectionPools2Size == 1) {
+      // if it is just the DEFAULT pool then ignore it
+      Pool connectionPool = connectionPools2.values().iterator().next();
+      if (connectionPool.getName().equals("DEFAULT")) {
+        connectionPools2Size = 0;
+      }
+    }
+
+    if (connectionPools1Size != connectionPools2Size) {
+      throw new RuntimeException("pool sizes differ connectionPools1Size=" + connectionPools1Size
+          + " connectionPools2Size=" + connectionPools2Size
+          + " connectionPools1=" + connectionPools1.values() + " connectionPools2="
+          + connectionPools2.values());
+    }
+
+    if (connectionPools1Size > 0) {
+      for (Pool pool : connectionPools1.values()) {
+        PoolImpl poolImpl = (PoolImpl) pool;
+        // ignore any gateway instances
+        if (!poolImpl.isUsedByGateway()) {
+          poolImpl.sameAs(connectionPools2.get(poolImpl.getName()));
+    }
-      // compare connection pools
-      Map<String, Pool> m1 = getPools();
-      Map<String, Pool> m2 = other instanceof CacheCreation ? ((CacheCreation) other).getPools()
-          : PoolManager.getAll();
-      int m1Size = m1.size();
-
-      // ignore any gateway instances
-      for (Pool cp : m1.values()) {
-        if (((PoolImpl) cp).isUsedByGateway()) {
-          m1Size--;
-        }
+    // compare disk stores
+    for (DiskStore diskStore : diskStores.values()) {
+      DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation) diskStore;
+      String name = dsac.getName();
+      DiskStore otherDiskStore = other.findDiskStore(name);
+      if (otherDiskStore == null) {
+        logger.debug("Disk store {} not found.", name);
+        throw new RuntimeException(format("Disk store %s not found", name));
-
-      int m2Size = m2.size();
-
-      // ignore any gateway instances
-      for (Pool cp : m2.values()) {
-        if (((PoolImpl) cp).isUsedByGateway()) {
-          m2Size--;
-        }
+      if (!dsac.sameAs(otherDiskStore)) {
+        logger.debug("Attributes for disk store {} do not match", name);
+        throw new RuntimeException(format("Attributes for disk store %s do not match", name));
+    }
-      if (m2Size == 1) {
-        // if it is just the DEFAULT pool then ignore it
-        Pool p = (Pool) m2.values().iterator().next();
-        if (p.getName().equals("DEFAULT")) {
-          m2Size = 0;
-        }
+    Map<String, RegionAttributes<?, ?>> myNamedAttributes = listRegionAttributes();
+    Map<String, RegionAttributes<Object, Object>> otherNamedAttributes =
+        other.listRegionAttributes();
+    if (myNamedAttributes.size() != otherNamedAttributes.size()) {
+      throw new RuntimeException("namedAttributes size");
+    }
+
+    for (Object object : myNamedAttributes.entrySet()) {
+      Entry myEntry = (Entry) object;
+      String myId = (String) myEntry.getKey();
+      Assert.assertTrue(myEntry.getValue() instanceof RegionAttributesCreation,
+          "Entry value is a " + myEntry.getValue().getClass().getName());
+      RegionAttributesCreation myAttrs = (RegionAttributesCreation) myEntry.getValue();
+      RegionAttributes<Object, Object> otherAttrs = other.getRegionAttributes(myId);
+      if (otherAttrs == null) {
+        logger.debug("No attributes for {}", myId);
+        throw new RuntimeException(format("No attributes for %s", myId));
-
-      if (m1Size != m2Size) {
-        throw new RuntimeException("pool sizes differ m1Size=" + m1Size + " m2Size=" + m2Size
-            + " m1=" + m1.values() + " m2=" + m2.values());
+      if (!myAttrs.sameAs(otherAttrs)) {
+        logger.debug("Attributes for " + myId + " do not match");
+        throw new RuntimeException(format("Attributes for %s do not match", myId));
+    }
-      if (m1Size > 0) {
-        for (Pool pool : m1.values()) {
-          PoolImpl poolImpl = (PoolImpl) pool;
-          // ignore any gateway instances
-          if (!poolImpl.isUsedByGateway()) {
-            poolImpl.sameAs(m2.get(poolImpl.getName()));
-          }
-        }
+    Collection<Region<?, ?>> myRoots = roots.values();
+    Collection<Region<?, ?>> otherRoots = other.rootRegions();
+    if (myRoots.size() != otherRoots.size()) {
+      throw new RuntimeException("roots size");
+    }
+
+    for (final Region<?, ?> myRoot : myRoots) {
+      RegionCreation rootRegion = (RegionCreation) myRoot;
+      Region<Object, Object> otherRegion = other.getRegion(rootRegion.getName());
+      if (otherRegion == null) {
+        throw new RuntimeException(format("no root %s", rootRegion.getName()));
-
-      // compare disk stores
-      for (DiskStore diskStore : this.diskStores.values()) {
-        DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation) diskStore;
-        String name = dsac.getName();
-        DiskStore ds = other.findDiskStore(name);
-        if (ds == null) {
-          getLogger().fine("Disk store " + name + " not found.");
-          throw new RuntimeException(
-              String.format("Disk store %s not found", name));
-        } else {
-          if (!dsac.sameAs(ds)) {
-            getLogger().fine("Attributes for disk store " + name + " do not match");
-            throw new RuntimeException(
-                String.format("Attributes for disk store %s do not match",
-                    name));
-          }
-        }
+      if (!rootRegion.sameAs(otherRegion)) {
+        throw new RuntimeException("regions differ");
+    }
-      Map<String, RegionAttributes<?, ?>> myNamedAttributes = this.listRegionAttributes();
-      Map<String, RegionAttributes<Object, Object>> otherNamedAttributes =
-          other.listRegionAttributes();
-      if (myNamedAttributes.size() != otherNamedAttributes.size()) {
-        throw new RuntimeException(
-            "namedAttributes size");
-      }
+    // If both have a listener, make sure they are equal.
+    if (getCacheTransactionManager() != null) {
+      // Currently the GemFireCache always has a CacheTransactionManager,
+      // whereas that is not true for CacheTransactionManagerCreation.
-      for (Object object : myNamedAttributes.entrySet()) {
-        Entry myEntry = (Entry) object;
-        String myId = (String) myEntry.getKey();
-        Assert.assertTrue(myEntry.getValue() instanceof RegionAttributesCreation,
-            "Entry value is a " + myEntry.getValue().getClass().getName());
-        RegionAttributesCreation myAttrs = (RegionAttributesCreation) myEntry.getValue();
-        RegionAttributes<Object, Object> otherAttrs = other.getRegionAttributes(myId);
-        if (otherAttrs == null) {
-          getLogger().fine("No attributes for " + myId);
-          throw new RuntimeException(
-              String.format("No attributes for %s", myId));
+      List<TransactionListener> otherTxListeners =
+          Arrays.asList(other.getCacheTransactionManager().getListeners());
+      List<TransactionListener> thisTxListeners =
+          Arrays.asList(getCacheTransactionManager().getListeners());
-        } else {
-          if (!myAttrs.sameAs(otherAttrs)) {
-            getLogger().fine("Attributes for " + myId + " do not match");
-            throw new RuntimeException(String.format("Attributes for %s do not match",
-                myId));
-          }
-        }
-      }
-
-      Collection<Region<?, ?>> myRoots = this.roots.values();
-      Collection<Region<?, ?>> otherRoots = other.rootRegions();
-      if (myRoots.size() != otherRoots.size()) {
-        throw new RuntimeException("roots size");
-      }
-
-      for (final Region<?, ?> myRoot : myRoots) {
-        RegionCreation rootRegion = (RegionCreation) myRoot;
-        Region<Object, Object> otherRegion = other.getRegion(rootRegion.getName());
-        if (otherRegion == null) {
-          throw new RuntimeException(
-              String.format("no root %s", rootRegion.getName()));
-        } else if (!rootRegion.sameAs(otherRegion)) {
-          throw new RuntimeException(
-              "regions differ");
-        }
-      }
-
-      // If both have a listener, make sure they are equal.
-      if (getCacheTransactionManager() != null) {
-        // Currently the GemFireCache always has a CacheTransactionManager,
-        // whereas that is not true for CacheTransactionManagerCreation.
-
-        List<TransactionListener> otherTxListeners =
-            Arrays.asList(other.getCacheTransactionManager().getListeners());
-        List<TransactionListener> thisTxListeners =
-            Arrays.asList(getCacheTransactionManager().getListeners());
-
-        if (!thisTxListeners.equals(otherTxListeners)) {
-          throw new RuntimeException("txListener");
-        }
+      if (!thisTxListeners.equals(otherTxListeners)) {
+        throw new RuntimeException("txListener");
-  public boolean waitUntilReconnected(long time, TimeUnit units) throws InterruptedException {
+  public boolean waitUntilReconnected(long time, TimeUnit units) {
-    return this.logWriter;
+    return logWriter;
-    return this.securityLogWriter;
+    return securityLogWriter;
-    return this.logWriter.convertToLogWriterI18n();
+    return logWriter.convertToLogWriterI18n();
-    return this.securityLogWriter.convertToLogWriterI18n();
+    return securityLogWriter.convertToLogWriterI18n();
-    return this.queryService;
+    return queryService;
-    this.addRootRegion(region);
+    addRootRegion(region);
-    this.addRootRegion(region);
+    addRootRegion(region);
-    return this.roots.get(path);
+    return roots.get(path);
-    this.bridgeServers.add(bridge);
+    bridgeServers.add(bridge);
-  public void reLoadClusterConfiguration() throws IOException, ClassNotFoundException {
+  public void reLoadClusterConfiguration() {
-    this.declarablePropertiesList.add(new DeclarableAndProperties(declarable, properties));
+    declarablePropertiesList.add(new DeclarableAndProperties(declarable, properties));
-    return this.bridgeServers;
+    return bridgeServers;
-    this.gatewaySenders.add(sender);
+    gatewaySenders.add(sender);
-    this.gatewayReceivers.add(receiver);
+    gatewayReceivers.add(receiver);
-    this.asyncEventQueues.add(asyncEventQueue);
+    asyncEventQueues.add(asyncEventQueue);
-    for (GatewaySender sender : this.gatewaySenders) {
+    for (GatewaySender sender : gatewaySenders) {
-    for (GatewaySender sender : this.gatewaySenders) {
+    for (GatewaySender sender : gatewaySenders) {
-    return this.gatewayReceivers;
+    return gatewayReceivers;
-    return this.asyncEventQueues;
+    return asyncEventQueues;
-    return this.asyncEventQueues;
+    return asyncEventQueues;
-    for (AsyncEventQueue asyncEventQueue : this.asyncEventQueues) {
+    for (AsyncEventQueue asyncEventQueue : asyncEventQueues) {
-    this.hasServer = true;
+    hasServer = true;
-    return this.isServer || !this.bridgeServers.isEmpty();
+    return isServer || !bridgeServers.isEmpty();
-    return this.hasServer;
+    return hasServer;
-    this.dynamicRegionFactoryConfig = v;
-    this.hasDynamicRegionFactory = true;
+    dynamicRegionFactoryConfig = v;
+    hasDynamicRegionFactory = true;
-    return this.hasDynamicRegionFactory;
+    return hasDynamicRegionFactory;
-    return this.dynamicRegionFactoryConfig;
+    return dynamicRegionFactoryConfig;
-    return this.txMgrCreation;
+    return cacheTransactionManagerCreation;
-    this.hasCopyOnRead = true;
+    hasCopyOnRead = true;
-    return this.copyOnRead;
+    return copyOnRead;
-    return this.hasCopyOnRead;
+    return hasCopyOnRead;
-  public void addCacheTransactionManagerCreation(CacheTransactionManagerCreation txm) {
-    this.txMgrCreation = txm;
+  public void addCacheTransactionManagerCreation(
+      CacheTransactionManagerCreation cacheTransactionManagerCreation) {
+    this.cacheTransactionManagerCreation = cacheTransactionManagerCreation;
-    return this.diskStores.get(name);
+    return diskStores.get(name);
-    this.diskStores.put(ds.getName(), ds);
+    diskStores.put(ds.getName(), ds);
-    return this.diskStores.values();
+    return diskStores.values();
-  void setDiskStore(String name, DiskStoreAttributesCreation dsac) {
-    this.diskStores.put(name, dsac);
+  void setDiskStore(String name, DiskStoreAttributesCreation diskStoreAttributesCreation) {
+    diskStores.put(name, diskStoreAttributesCreation);
-    return this.namedRegionAttributes.get(id);
+    return namedRegionAttributes.get(id);
-    RegionAttributes a = attrs;
-    if (!(a instanceof RegionAttributesCreation)) {
-      a = new RegionAttributesCreation(this, a, false);
+    RegionAttributes regionAttributes = attrs;
+    if (!(regionAttributes instanceof RegionAttributesCreation)) {
+      regionAttributes = new RegionAttributesCreation(this, regionAttributes, false);
-    this.namedRegionAttributes.put(id, a);
-    this.regionAttributesNames.add(id);
+    namedRegionAttributes.put(id, regionAttributes);
+    regionAttributesNames.add(id);
-    return Collections.unmodifiableMap(this.namedRegionAttributes);
+    return Collections.unmodifiableMap(namedRegionAttributes);
-  private final PoolManagerImpl poolManager = new PoolManagerImpl(false);
-
-  private volatile FunctionServiceCreation functionServiceCreation;
-
-    return this.poolManager.getMap();
+    return poolManager.getMap();
-    return new PoolFactoryImpl(this.poolManager).setStartDisabled(true);
+    return new PoolFactoryImpl(poolManager).setStartDisabled(true);
-  private volatile boolean hasFunctionService = false;
-
-    return this.hasFunctionService;
+    return hasFunctionService;
-    this.hasFunctionService = true;
+    hasFunctionService = true;
-  public FunctionServiceCreation getFunctionServiceCreation() {
-    return this.functionServiceCreation;
+  FunctionServiceCreation getFunctionServiceCreation() {
+    return functionServiceCreation;
-  private volatile boolean hasResourceManager = false;
-
-  private volatile ResourceManagerCreation resourceManagerCreation;
-
-    this.hasResourceManager = true;
+    hasResourceManager = true;
-    return this.resourceManagerCreation;
+    return resourceManagerCreation;
-    return this.hasResourceManager;
+    return hasResourceManager;
-  private volatile SerializerCreation serializerCreation;
-
-    return this.serializerCreation;
+    return serializerCreation;
-    this.backups.add(backup);
+    backups.add(backup);
-    return Collections.unmodifiableList(this.backups);
+    return Collections.unmodifiableList(backups);
-    this.cacheConfig.setPdxReadSerialized(readSerialized);
+    cacheConfig.setPdxReadSerialized(readSerialized);
-    this.cacheConfig.setPdxIgnoreUnreadFields(ignore);
+    cacheConfig.setPdxIgnoreUnreadFields(ignore);
-    this.cacheConfig.setPdxSerializer(serializer);
+    cacheConfig.setPdxSerializer(serializer);
-    this.cacheConfig.setPdxDiskStore(diskStore);
+    cacheConfig.setPdxDiskStore(diskStore);
-    this.cacheConfig.setPdxPersistent(persistent);
+    cacheConfig.setPdxPersistent(persistent);
-   * @see org.apache.geode.cache.CacheFactory#setPdxReadSerialized(boolean)
+   * @see CacheFactory#setPdxReadSerialized(boolean)
-    return this.cacheConfig.isPdxReadSerialized();
+    return cacheConfig.isPdxReadSerialized();
-    return this.cacheConfig.getPdxSerializer();
+    return cacheConfig.getPdxSerializer();
-    return this.cacheConfig.getPdxDiskStore();
+    return cacheConfig.getPdxDiskStore();
-    return this.cacheConfig.isPdxPersistent();
+    return cacheConfig.isPdxPersistent();
-    return this.cacheConfig.getPdxIgnoreUnreadFields();
+    return cacheConfig.getPdxIgnoreUnreadFields();
-    return this.cacheConfig;
+    return cacheConfig;
-  private Declarable initializer = null;
-
-  private Properties initializerProps = null;
-
-    return this.initializer;
+    return initializer;
-    return this.initializerProps;
+    return initializerProps;
-    this.initializer = declarable;
-    this.initializerProps = props;
+    initializer = declarable;
+    initializerProps = props;
-      initializer.init(getInitializerProps()); // for backwards compatibility
+      // for backwards compatibility
+      initializer.init(getInitializerProps());
-    this.gatewayConflictResolver = resolver;
+    gatewayConflictResolver = resolver;
-    return this.gatewayConflictResolver;
+    return gatewayConflictResolver;
-    return this.extensionPoint;
+    return extensionPoint;
-  private final InternalQueryService queryService = new InternalQueryService() {
+  private InternalQueryService createInternalQueryService() {
+    return new InternalQueryService() {
-    private final Map<String, List<Index>> indexes = new HashMap<>();
+      private final Map<String, List<Index>> indexes = new HashMap<>();
-    @Override
-    public Query newQuery(String queryString) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
-
-    @Override
-    public Index createHashIndex(String indexName, String indexedExpression, String regionPath)
-        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-        RegionNotFoundException, UnsupportedOperationException {
-      return createHashIndex(indexName, indexedExpression, regionPath, "");
-    }
-
-    @Override
-    public Index createHashIndex(String indexName, String indexedExpression, String regionPath,
-        String imports) throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-      return createIndex(indexName, IndexType.HASH, indexedExpression, regionPath, imports);
-    }
-
-    @Override
-    public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
-        String fromClause) throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-      return createIndex(indexName, indexType, indexedExpression, fromClause, "");
-    }
-
-    /**
-     * Due to not having the full implementation to determine region names etc this implementation
-     * will only match a single region with no alias at this time
-     */
-    @Override
-    public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
-        String fromClause, String imports) throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-      IndexCreationData indexData = new IndexCreationData(indexName);
-      indexData.setFunctionalIndexData(fromClause, indexedExpression, imports);
-      indexData.setIndexType(indexType.toString());
-      List<Index> indexesForRegion = this.indexes.get(fromClause);
-      if (indexesForRegion == null) {
-        indexesForRegion = new ArrayList<>();
-        this.indexes.put(fromClause, indexesForRegion);
+      @Override
+      public Query newQuery(String queryString) {
+        throw new UnsupportedOperationException("Should not be invoked");
-      indexesForRegion.add(indexData);
-      return indexData;
-    }
-    @Override
-    public Index createIndex(String indexName, String indexedExpression, String regionPath)
-        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-        RegionNotFoundException, UnsupportedOperationException {
-      return createIndex(indexName, indexedExpression, regionPath, "");
-    }
+      @Override
+      public Index createHashIndex(String indexName, String indexedExpression, String regionPath)
+          throws IndexInvalidException, UnsupportedOperationException {
+        return createHashIndex(indexName, indexedExpression, regionPath, "");
+      }
-    @Override
-    public Index createIndex(String indexName, String indexedExpression, String regionPath,
-        String imports) throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-      return createIndex(indexName, IndexType.FUNCTIONAL, indexedExpression, regionPath, imports);
+      @Override
+      public Index createHashIndex(String indexName, String indexedExpression, String regionPath,
+          String imports) throws IndexInvalidException, UnsupportedOperationException {
+        return createIndex(indexName, IndexType.HASH, indexedExpression, regionPath, imports);
+      }
-    }
+      @Override
+      public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+          String fromClause) throws IndexInvalidException, UnsupportedOperationException {
+        return createIndex(indexName, indexType, indexedExpression, fromClause, "");
+      }
-    @Override
-    public Index createKeyIndex(String indexName, String indexedExpression, String regionPath)
-        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-        RegionNotFoundException, UnsupportedOperationException {
-      return createIndex(indexName, IndexType.PRIMARY_KEY, indexedExpression, regionPath, "");
+      /**
+       * Due to not having the full implementation to determine region names etc this implementation
+       * will only match a single region with no alias at this time
+       */
+      @Override
+      public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+          String fromClause, String imports)
+          throws IndexInvalidException, UnsupportedOperationException {
+        IndexCreationData indexData = new IndexCreationData(indexName);
+        indexData.setFunctionalIndexData(fromClause, indexedExpression, imports);
+        indexData.setIndexType(indexType.toString());
+        List<Index> indexesForRegion = indexes.get(fromClause);
+        if (indexesForRegion == null) {
+          indexesForRegion = new ArrayList<>();
+          indexes.put(fromClause, indexesForRegion);
+        }
+        indexesForRegion.add(indexData);
+        return indexData;
+      }
-    }
+      @Override
+      public Index createIndex(String indexName, String indexedExpression, String regionPath)
+          throws IndexInvalidException, UnsupportedOperationException {
+        return createIndex(indexName, indexedExpression, regionPath, "");
+      }
-    @Override
-    public Index getIndex(Region<?, ?> region, String indexName) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public Index createIndex(String indexName, String indexedExpression, String regionPath,
+          String imports) throws IndexInvalidException, UnsupportedOperationException {
+        return createIndex(indexName, IndexType.FUNCTIONAL, indexedExpression, regionPath, imports);
+      }
-    @Override
-    public Collection<Index> getIndexes() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public Index createKeyIndex(String indexName, String indexedExpression, String regionPath)
+          throws IndexInvalidException, UnsupportedOperationException {
+        return createIndex(indexName, IndexType.PRIMARY_KEY, indexedExpression, regionPath, "");
+      }
-    @Override
-    public Collection<Index> getIndexes(Region<?, ?> region) {
-      Collection<Index> indexes = this.indexes.get(region.getFullPath());
-      return (indexes != null) ? indexes : Collections.emptyList();
-    }
+      @Override
+      public Index getIndex(Region<?, ?> region, String indexName) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public Collection<Index> getIndexes(Region<?, ?> region, IndexType indexType) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public Collection<Index> getIndexes() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void removeIndex(Index index) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public Collection<Index> getIndexes(Region<?, ?> region) {
+        Collection<Index> indexes = this.indexes.get(region.getFullPath());
+        return indexes != null ? indexes : Collections.emptyList();
+      }
-    @Override
-    public void removeIndexes() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public Collection<Index> getIndexes(Region<?, ?> region, IndexType indexType) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void removeIndexes(Region<?, ?> region) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void removeIndex(Index index) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery newCq(String queryString, CqAttributes cqAttr)
-        throws QueryInvalidException, CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void removeIndexes() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery newCq(String queryString, CqAttributes cqAttr, boolean isDurable)
-        throws QueryInvalidException, CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void removeIndexes(Region<?, ?> region) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery newCq(String name, String queryString, CqAttributes cqAttr)
-        throws QueryInvalidException, CqExistsException, CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery newCq(String queryString, CqAttributes cqAttr) throws QueryInvalidException {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery newCq(String name, String queryString, CqAttributes cqAttr, boolean isDurable)
-        throws QueryInvalidException, CqExistsException, CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery newCq(String queryString, CqAttributes cqAttr, boolean isDurable)
+          throws QueryInvalidException {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void closeCqs() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery newCq(String name, String queryString, CqAttributes cqAttr)
+          throws QueryInvalidException {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery[] getCqs() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery newCq(String name, String queryString, CqAttributes cqAttr, boolean isDurable)
+          throws QueryInvalidException {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery[] getCqs(String regionName) throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void closeCqs() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqQuery getCq(String cqName) {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery[] getCqs() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void executeCqs() throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery[] getCqs(String regionName) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void stopCqs() throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public CqQuery getCq(String cqName) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void executeCqs(String regionName) throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void executeCqs() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void stopCqs(String regionName) throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void stopCqs() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public List<String> getAllDurableCqsFromServer() throws CqException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void executeCqs(String regionName) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public CqServiceStatistics getCqStatistics() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void stopCqs(String regionName) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
+
+      @Override
+      public List<String> getAllDurableCqsFromServer() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
+
+      @Override
+      public CqServiceStatistics getCqStatistics() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void defineKeyIndex(String indexName, String indexedExpression, String regionPath)
-        throws RegionNotFoundException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void defineKeyIndex(String indexName, String indexedExpression, String regionPath) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void defineHashIndex(String indexName, String indexedExpression, String regionPath)
-        throws RegionNotFoundException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void defineHashIndex(String indexName, String indexedExpression, String regionPath) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void defineHashIndex(String indexName, String indexedExpression, String regionPath,
-        String imports) throws RegionNotFoundException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void defineHashIndex(String indexName, String indexedExpression, String regionPath,
+          String imports) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void defineIndex(String indexName, String indexedExpression, String regionPath)
-        throws RegionNotFoundException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void defineIndex(String indexName, String indexedExpression, String regionPath) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public void defineIndex(String indexName, String indexedExpression, String regionPath,
-        String imports) throws RegionNotFoundException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public void defineIndex(String indexName, String indexedExpression, String regionPath,
+          String imports) {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public List<Index> createDefinedIndexes() throws MultiIndexCreationException {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public List<Index> createDefinedIndexes() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public boolean clearDefinedIndexes() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
+      @Override
+      public boolean clearDefinedIndexes() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
-    @Override
-    public MethodInvocationAuthorizer getMethodInvocationAuthorizer() {
-      throw new UnsupportedOperationException("Should not be invoked");
-    }
-  };
+      @Override
+      public MethodInvocationAuthorizer getMethodInvocationAuthorizer() {
+        throw new UnsupportedOperationException("Should not be invoked");
+      }
+    };
+  }
-  public void cleanupForClient(final CacheClientNotifier ccn,
+  public void cleanupForClient(final CacheClientNotifier cacheClientNotifier,
-      throws RegionExistsException, TimeoutException, IOException, ClassNotFoundException {
+      throws RegionExistsException, TimeoutException {
+
+  CacheTransactionManagerCreation getCacheTransactionManagerCreation() {
+    return cacheTransactionManagerCreation;
+  }
+
+  List<String> getRegionAttributesNames() {
+    return regionAttributesNames;
+  }
+
+  private static class DeclarableAndProperties {
+    private final Declarable declarable;
+    private final Properties properties;
+
+    private DeclarableAndProperties(Declarable d, Properties p) {
+      declarable = d;
+      properties = p;
+    }
+
+    public Declarable getDeclarable() {
+      return declarable;
+    }
+
+    public Properties getProperties() {
+      return properties;
+    }
+  }

MOV26 MOV26 MOV26 MOV26 MOV55 MOV31 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 UPD83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 MOV78 MOV78 MOV78 MOV78 INS83 MOV8 MOV70 MOV60 MOV78 MOV43 MOV78 MOV43 MOV43 MOV78 MOV43 MOV78 MOV78 MOV8 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 INS83 MOV43 INS42 INS8 INS43 INS42 INS8 INS74 INS42 INS8 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS41 MOV60 INS25 MOV25 MOV41 UPD42 UPD42 INS41 UPD42 INS42 INS41 INS43 INS43 INS41 UPD83 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV38 MOV8 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV27 MOV27 INS42 INS42 INS42 INS42 INS41 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS25 MOV25 MOV25 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV31 MOV31 MOV31 MOV31 MOV43 MOV74 MOV32 INS42 MOV43 UPD42 MOV42 UPD42 INS42 MOV43 MOV27 MOV8 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 INS32 MOV43 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 MOV78 MOV43 MOV44 MOV44 MOV8 MOV78 MOV43 MOV44 MOV44 MOV43 MOV8 MOV78 MOV43 MOV44 MOV44 MOV44 MOV43 MOV8 MOV78 MOV43 MOV44 MOV44 MOV44 MOV8 MOV78 MOV8 MOV78 MOV8 MOV78 MOV44 MOV8 MOV44 MOV8 MOV78 MOV8 MOV78 UPD42 MOV8 MOV78 UPD42 MOV8 MOV78 MOV44 MOV8 MOV78 UPD42 MOV8 MOV78 UPD42 MOV44 MOV8 MOV78 MOV8 INS42 INS42 MOV32 MOV42 UPD42 UPD45 UPD42 UPD45 UPD42 UPD45 UPD45 UPD42 UPD42 INS42 UPD42 MOV42 UPD45 MOV45 MOV42 UPD42 MOV42 UPD45 MOV45 MOV42 INS42 MOV43 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 INS45 INS42 MOV43 UPD42 MOV42 UPD42 INS45 INS42 MOV43 UPD42 MOV42 UPD42 INS45 INS42 MOV43 UPD42 MOV42 UPD42 MOV43 UPD42 MOV42 MOV42 MOV45 MOV42 UPD42 MOV27 INS42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL9 DEL9 DEL9 DEL9 DEL33 DEL9 DEL9 DEL9 DEL9 DEL33 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL74 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL41 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL33 DEL52 DEL42 DEL32 DEL42 DEL42 DEL43 DEL32 DEL11 DEL52 DEL42 DEL22 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL8 DEL25 DEL52 DEL32 DEL45 DEL42 DEL27 DEL42 DEL8 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL25 DEL8 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL33 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL36 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL43 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43