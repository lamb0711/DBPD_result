GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import java.util.Collections;
-import org.apache.geode.admin.OperationCancelledException;
+import org.apache.geode.internal.cache.EntrySnapshot;
+import org.apache.geode.internal.cache.KeyInfo;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.NonLocalRegionEntry;
+import org.apache.geode.internal.cache.RemoteOperationException;
- * {@link org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}.
+ * {@link org.apache.geode.internal.cache.tx.RemoteFetchEntryMessage.FetchEntryReplyMessage}.
-   * @param key the object to which the value should be feteched
+   * @param key the object to which the value should be fetched
-    FetchEntryResponse p =
-        new FetchEntryResponse(r.getSystem(), Collections.singleton(recipient), r, key);
+    FetchEntryResponse p = new FetchEntryResponse(r.getSystem(), recipient, r, key);
-    Set failures = r.getDistributionManager().putOutgoing(m);
+    Set<?> failures = r.getDistributionManager().putOutgoing(m);
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-  @Override
-    // RemoteFetchEntryMessage is used in refreshing client caches during interest list recovery,
-    // so don't be too verbose or hydra tasks may time out
-
-    if (!(r instanceof PartitionedRegion)) {
-      r.waitOnInitialization(); // bug #43371 - accessing a region before it's initialized
-    }
+    r.waitOnInitialization(); // bug #43371 - accessing a region before it's initialized
-      Region.Entry re = r.getDataView().getEntry(keyInfo, r, true);
+      Region.Entry<?, ?> re = r.getDataView().getEntry(keyInfo, r, true);
-      // r.getPrStats().endRemoteOperationMessagesProcessing(startTime);
-    } catch (PrimaryBucketException pbe) {
-      FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(pbe));
-        // since the Entry object shares state with the PartitionedRegion,
-        // we have to find the region and ask it to create a new Entry instance
-        // to be populated from the DataInput
-        FetchEntryResponse processor =
-            (FetchEntryResponse) ReplyProcessor21.getProcessor(this.processorId);
-        if (processor == null) {
-          throw new OperationCancelledException("This operation was cancelled (null processor)");
-        }
-        this.value = new EntrySnapshot(in, processor.region);
+        // EntrySnapshot.setRegion is called later
+        this.value = new EntrySnapshot(in, null);
-   * {@link org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}
+   * {@link org.apache.geode.internal.cache.tx.RemoteFetchEntryMessage.FetchEntryReplyMessage}
-    public FetchEntryResponse(InternalDistributedSystem ds, Set recipients, LocalRegion theRegion,
-        Object key) {
-      super(ds, recipients);
+    public FetchEntryResponse(InternalDistributedSystem ds, InternalDistributedMember recipient,
+        LocalRegion theRegion, Object key) {
+      super(ds, recipient);
+          if (this.returnValue != null) {
+            this.returnValue.setRegion(this.region);
+          }
-     * @throws EntryNotFoundException
-     * @throws EntryNotFoundException
-        // waitForRepliesUninterruptibly();
-        waitForCacheException();
-      } catch (RemoteOperationException e) {
-        e.checkKey(key);
-        final String msg = "FetchEntryResponse got remote RemoteOperationException; rethrowing";
-        logger.debug(msg, e);
-        throw e;
+        waitForRemoteResponse();
-        logger.debug("FetchEntryResponse got remote CacheException; forcing reattempt.", ce);
-        throw new RemoteOperationException(
-            LocalizedStrings.RemoteFetchEntryMessage_FETCHENTRYRESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT
-                .toLocalizedString(),
+        logger.debug("FetchEntryResponse failed with remote CacheException", ce);
+        throw new RemoteOperationException("FetchEntryResponse failed with remote CacheException",

MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 UPD40 INS40 UPD40 MOV21 UPD40 UPD66 INS74 MOV25 UPD43 UPD42 MOV43 INS76 MOV38 UPD40 UPD42 UPD42 INS42 INS74 MOV21 MOV43 INS76 INS76 INS25 UPD42 INS33 INS27 INS8 UPD45 MOV43 INS45 INS22 INS33 INS21 INS52 INS42 INS32 INS22 INS42 INS22 INS52 INS42 INS52 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL12 DEL42 DEL33 DEL27 DEL40 DEL42 DEL43 DEL45 DEL14 DEL53 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL11 DEL59 DEL60 DEL8 DEL25 DEL42 DEL65 DEL42 DEL65 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL40 DEL42 DEL32