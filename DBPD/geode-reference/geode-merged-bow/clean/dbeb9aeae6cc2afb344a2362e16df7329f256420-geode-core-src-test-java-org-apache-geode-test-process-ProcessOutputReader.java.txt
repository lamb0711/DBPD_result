Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Starts the stdout and stderr reader threads for a running process. Provides
- * a mechanism to waitFor the process to terminate.
+ * Starts the stdout and stderr reader threads for a running process. Provides a mechanism to
+ * waitFor the process to terminate.
-  
+
-  
-  public ProcessOutputReader(final Process process, final ProcessStreamReader stdout, final ProcessStreamReader stderr) {
+
+  public ProcessOutputReader(final Process process, final ProcessStreamReader stdout,
+      final ProcessStreamReader stderr) {
-    synchronized(this) {
+    synchronized (this) {
-  
+
-    synchronized(this) {
+    synchronized (this) {
-    
+
-    
+
-  private boolean waitForProcess(final long timeout, final TimeUnit unit) throws InterruptedException {
+  private boolean waitForProcess(final long timeout, final TimeUnit unit)
+      throws InterruptedException {
-      } catch(IllegalThreadStateException ex) {
+      } catch (IllegalThreadStateException ex) {
-          long millisToSleep =Math.min(TimeUnit.NANOSECONDS.toMillis(nanosRemaining) + 1, 100);
+          long millisToSleep = Math.min(TimeUnit.NANOSECONDS.toMillis(nanosRemaining) + 1, 100);

UPD66 UPD66