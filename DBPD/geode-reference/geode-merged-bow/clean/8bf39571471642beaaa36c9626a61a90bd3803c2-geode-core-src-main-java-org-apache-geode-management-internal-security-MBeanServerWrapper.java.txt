Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  public MBeanServerWrapper(){
-  }
+  public MBeanServerWrapper() {}
-  private void checkDomain(ObjectName name){
+  private void checkDomain(ObjectName name) {
-  public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature)
-      throws ReflectionException, InstanceAlreadyExistsException, MBeanException,
-      NotCompliantMBeanException {
+  public ObjectInstance createMBean(String className, ObjectName name, Object[] params,
+      String[] signature) throws ReflectionException, InstanceAlreadyExistsException,
+      MBeanException, NotCompliantMBeanException {
-  public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params,
-      String[] signature) throws ReflectionException, InstanceAlreadyExistsException,
-      MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
+  public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName,
+      Object[] params, String[] signature)
+      throws ReflectionException, InstanceAlreadyExistsException, MBeanException,
+      NotCompliantMBeanException, InstanceNotFoundException {
-  public ObjectInstance registerMBean(Object object, ObjectName name) throws InstanceAlreadyExistsException,
-      MBeanRegistrationException, NotCompliantMBeanException {
+  public ObjectInstance registerMBean(Object object, ObjectName name)
+      throws InstanceAlreadyExistsException, MBeanRegistrationException,
+      NotCompliantMBeanException {
-  public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
+  public void unregisterMBean(ObjectName name)
+      throws InstanceNotFoundException, MBeanRegistrationException {
-  private static QueryExp notAccessControlMBean = Query.not(Query.isInstanceOf(Query.value(AccessControlMXBean.class.getName())));
+  private static QueryExp notAccessControlMBean =
+      Query.not(Query.isInstanceOf(Query.value(AccessControlMXBean.class.getName())));
+
-    if(query!=null)
+    if (query != null)
-      return mbs.queryMBeans(name,notAccessControlMBean);
+      return mbs.queryMBeans(name, notAccessControlMBean);
-    if(query!=null)
+    if (query != null)
-      return mbs.queryNames(name,notAccessControlMBean);
+      return mbs.queryNames(name, notAccessControlMBean);
-  public Object getAttribute(ObjectName name, String attribute) throws MBeanException, InstanceNotFoundException,
-      ReflectionException {
+  public Object getAttribute(ObjectName name, String attribute)
+      throws MBeanException, InstanceNotFoundException, ReflectionException {
-  public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException,
-      ReflectionException {
+  public AttributeList getAttributes(ObjectName name, String[] attributes)
+      throws InstanceNotFoundException, ReflectionException {
-    for(String attribute:attributes){
+    for (String attribute : attributes) {
-        throw new GemFireSecurityException("error getting value of "+attribute+" from "+name, e);
+        throw new GemFireSecurityException("error getting value of " + attribute + " from " + name,
+            e);
-  public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException,
-      AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {
+  public void setAttribute(ObjectName name, Attribute attribute)
+      throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,
+      MBeanException, ReflectionException {
-  public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException,
-      ReflectionException {
+  public AttributeList setAttributes(ObjectName name, AttributeList attributes)
+      throws InstanceNotFoundException, ReflectionException {
-    for(Attribute attribute:attributes.asList()){
+    for (Attribute attribute : attributes.asList()) {
-        throw new GemFireSecurityException("error setting attribute "+attribute+" of "+name, e);
+        throw new GemFireSecurityException("error setting attribute " + attribute + " of " + name,
+            e);
-  private ResourcePermission getOperationContext(ObjectName objectName, String featureName, boolean isOp)
-      throws InstanceNotFoundException, ReflectionException {
+  private ResourcePermission getOperationContext(ObjectName objectName, String featureName,
+      boolean isOp) throws InstanceNotFoundException, ReflectionException {
-      throw new GemFireSecurityException("error getting beanInfo of "+objectName, e);
+      throw new GemFireSecurityException("error getting beanInfo of " + objectName, e);
-    // If there is no annotation defined either in the class level or method level, we should consider this operation/attribute freely accessible
+    // If there is no annotation defined either in the class level or method level, we should
+    // consider this operation/attribute freely accessible
-    if(isOp){
+    if (isOp) {
-    }
-    else{
+    } else {
-    for(MBeanFeatureInfo info:featureInfos){
-      if(info.getName().equals(featureName)){
+    for (MBeanFeatureInfo info : featureInfos) {
+      if (info.getName().equals(featureName)) {
-  private ResourcePermission getOperationContext(Descriptor descriptor, ResourcePermission defaultValue){
-    String resource = (String)descriptor.getFieldValue("resource");
-    String operationCode = (String)descriptor.getFieldValue("operation");
-    if(resource!=null && operationCode!=null){
+  private ResourcePermission getOperationContext(Descriptor descriptor,
+      ResourcePermission defaultValue) {
+    String resource = (String) descriptor.getFieldValue("resource");
+    String operationCode = (String) descriptor.getFieldValue("operation");
+    if (resource != null && operationCode != null) {
-  public String[] getDomains() {    
+  public String[] getDomains() {
-  public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter,
-      Object handback) throws InstanceNotFoundException {
+  public void addNotificationListener(ObjectName name, NotificationListener listener,
+      NotificationFilter filter, Object handback) throws InstanceNotFoundException {
-  public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback)
-      throws InstanceNotFoundException {
+  public void addNotificationListener(ObjectName name, ObjectName listener,
+      NotificationFilter filter, Object handback) throws InstanceNotFoundException {
-  public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException,
-      ListenerNotFoundException {
+  public void removeNotificationListener(ObjectName name, ObjectName listener)
+      throws InstanceNotFoundException, ListenerNotFoundException {
-  public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter,
-      Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
+  public void removeNotificationListener(ObjectName name, ObjectName listener,
+      NotificationFilter filter, Object handback)
+      throws InstanceNotFoundException, ListenerNotFoundException {
-  public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter,
-      Object handback) throws InstanceNotFoundException, ListenerNotFoundException {    
+  public void removeNotificationListener(ObjectName name, NotificationListener listener,
+      NotificationFilter filter, Object handback)
+      throws InstanceNotFoundException, ListenerNotFoundException {
-  public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException,
-      ReflectionException {
+  public MBeanInfo getMBeanInfo(ObjectName name)
+      throws InstanceNotFoundException, IntrospectionException, ReflectionException {
-  public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {    
+  public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {
-  public Object instantiate(String className, ObjectName loaderName) throws ReflectionException, MBeanException,
-      InstanceNotFoundException {
+  public Object instantiate(String className, ObjectName loaderName)
+      throws ReflectionException, MBeanException, InstanceNotFoundException {
-  public Object instantiate(String className, Object[] params, String[] signature) throws ReflectionException,
-      MBeanException {
+  public Object instantiate(String className, Object[] params, String[] signature)
+      throws ReflectionException, MBeanException {
-  public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature)
-      throws ReflectionException, MBeanException, InstanceNotFoundException {
+  public Object instantiate(String className, ObjectName loaderName, Object[] params,
+      String[] signature) throws ReflectionException, MBeanException, InstanceNotFoundException {
-  public ObjectInputStream deserialize(ObjectName name, byte[] data) throws InstanceNotFoundException,
-      OperationsException {
+  public ObjectInputStream deserialize(ObjectName name, byte[] data)
+      throws InstanceNotFoundException, OperationsException {
-  public ObjectInputStream deserialize(String className, byte[] data) throws OperationsException, ReflectionException {    
+  public ObjectInputStream deserialize(String className, byte[] data)
+      throws OperationsException, ReflectionException {
-      throws InstanceNotFoundException, OperationsException, ReflectionException {    
+      throws InstanceNotFoundException, OperationsException, ReflectionException {
-  public ClassLoaderRepository getClassLoaderRepository() {    
+  public ClassLoaderRepository getClassLoaderRepository() {
-  public MBeanServer getMBeanServer() {    
+  public MBeanServer getMBeanServer() {

