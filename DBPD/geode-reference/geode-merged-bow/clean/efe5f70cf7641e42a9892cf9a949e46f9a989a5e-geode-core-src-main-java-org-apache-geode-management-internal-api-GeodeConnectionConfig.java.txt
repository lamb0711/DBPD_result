GEODE-7715: Introduce Transport and Config interfaces to ClusterManagementServiceBuilder (#4601)

This introduces several new interfaces to the `ClusterManagementService`. These are:

- `ClusterManagmentServiceTransport` which represents the message exchange between client and endpoint.
- `ClusterManagementServiceConnectionConfig` which is a data object and represents various properties required to establish a connection.

+ *
+import javax.net.ssl.HostnameVerifier;
-import org.apache.http.conn.ssl.NoopHostnameVerifier;
+import org.apache.geode.annotations.Experimental;
+import org.apache.geode.cache.Cache;
-import org.apache.geode.management.api.ClusterManagementService;
-import org.apache.geode.management.builder.ClusterManagementServiceBuilder;
-import org.apache.geode.management.internal.PlainClusterManagementServiceBuilder;
+import org.apache.geode.management.api.BaseConnectionConfig;
+import org.apache.geode.management.api.ConnectionConfig;
+import org.apache.geode.management.client.ClusterManagementServiceBuilder;
+/**
+ * Concrete implementation of {@link ConnectionConfig} which can be used
+ * to derive most (if not all) of the connection properties from an existing {@link Cache} or
+ * {@link ClientCache}.
+ *
+ * @see ClusterManagementServiceBuilder
+ */
+@Experimental
+public class GeodeConnectionConfig
+    implements ConnectionConfig {
-public class GeodeClusterManagementServiceBuilder implements
-    ClusterManagementServiceBuilder.GeodeBuilder {
+  private static final Logger logger = LogService.getLogger();
+
+  private BaseConnectionConfig connectionConfig;
-  private static final Logger logger = LogService.getLogger();
-
-  private GemFireCache cache;
-
-  private PlainClusterManagementServiceBuilder javaBuilder =
-      new PlainClusterManagementServiceBuilder();
-
-  public GeodeClusterManagementServiceBuilder setCredentials(String username,
-      String password) {
-    javaBuilder.setCredentials(username, password);
-    return this;
-  }
-
-  @Override
-  public ClusterManagementServiceBuilder.GeodeBuilder setAuthToken(String authToken) {
-    javaBuilder.setAuthToken(authToken);
-    return this;
-  }
-
-  public GeodeClusterManagementServiceBuilder setCache(GemFireCache cache) {
+  public GeodeConnectionConfig(GemFireCache cache) {
+  }
-    this.cache = cache;
+  @Override
+  public String getHost() {
+    return connectionConfig.getHost();
+  }
+
+  @Override
+  public int getPort() {
+    return connectionConfig.getPort();
+  }
+
+  @Override
+  public String getAuthToken() {
+    return connectionConfig.getAuthToken();
+  }
+
+  public GeodeConnectionConfig setAuthToken(String authToken) {
+    connectionConfig.setAuthToken(authToken);
-  public ClusterManagementService build() {
-    if (cache == null) {
-      throw new IllegalArgumentException("Need a cache instance in order to build the service.");
-    }
-    return javaBuilder.build();
+  @Override
+  public SSLContext getSslContext() {
+    return connectionConfig.getSslContext();
+  }
+
+  @Override
+  public String getUsername() {
+    return connectionConfig.getUsername();
+  }
+
+  public GeodeConnectionConfig setUsername(String username) {
+    connectionConfig.setUsername(username);
+    return this;
+  }
+
+  @Override
+  public String getPassword() {
+    return connectionConfig.getPassword();
+  }
+
+  public GeodeConnectionConfig setPassword(String password) {
+    connectionConfig.setPassword(password);
+    return this;
+  }
+
+  @Override
+  public HostnameVerifier getHostnameVerifier() {
+    return connectionConfig.getHostnameVerifier();
+  }
+
+  @Override
+  public boolean getFollowRedirects() {
+    return connectionConfig.getFollowRedirects();
+  }
+
+  public GeodeConnectionConfig setFollowRedirects(boolean followRedirects) {
+    connectionConfig.setFollowRedirects(followRedirects);
+    return this;
+  }
+
+  public GeodeConnectionConfig setHostnameVerifier(
+      HostnameVerifier hostnameVerifier) {
+    connectionConfig.setHostnameVerifier(hostnameVerifier);
+    return this;
+    DistributionConfig config;
+    ClusterManagementServiceInfo cmsInfo;
+
-    DistributionConfig config = ((GemFireCacheImpl) clientCache).getSystem().getConfig();
+    config = ((GemFireCacheImpl) clientCache).getSystem().getConfig();
-    ClusterManagementServiceInfo cmsInfo = null;
+    cmsInfo = null;
-        cmsInfo =
-            (ClusterManagementServiceInfo) client.requestToServer(locator,
-                new ClusterManagementServiceInfoRequest(), 1000, true);
+        cmsInfo = (ClusterManagementServiceInfo) client.requestToServer(locator,
+            new ClusterManagementServiceInfoRequest(), 1000, true);
+
-    javaBuilder.setHostAddress(cmsInfo.getHostName(), cmsInfo.getHttpPort());
+    connectionConfig = new BaseConnectionConfig(cmsInfo.getHostName(),
+        cmsInfo.getHttpPort());
+
-    if (cmsInfo.isSecured() && javaBuilder.getUsername() == null) {
+    if (cmsInfo.isSecured() && getUsername() == null) {
-      javaBuilder.setCredentials(username, password);
+      connectionConfig.setUsername(username);
+      connectionConfig.setPassword(password);
-      SSLContext sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
-      javaBuilder.setSslContext(sslContext);
-      javaBuilder.setHostnameVerifier(new NoopHostnameVerifier());
+      connectionConfig.setSslContext(SSLUtil.createAndConfigureSSLContext(sslConfig, false));
-

MOV26 INS26 INS26 MOV23 MOV31 UPD40 INS40 INS40 UPD40 UPD40 UPD40 INS29 INS78 UPD42 UPD43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS65 INS42 INS42 UPD43 INS42 MOV78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 UPD43 UPD42 INS78 INS83 INS43 INS42 INS8 UPD43 UPD42 MOV44 INS78 MOV83 UPD43 MOV43 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 MOV60 MOV60 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 UPD42 UPD42 UPD42 MOV42 INS41 INS42 INS41 INS42 UPD42 MOV42 INS41 INS42 INS21 MOV41 INS42 INS41 INS42 INS42 INS41 UPD42 INS42 INS42 INS41 INS42 MOV41 INS42 UPD42 INS41 INS42 INS41 UPD42 MOV42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS21 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS52 INS42 INS32 INS52 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 INS33 INS42 INS14 INS21 INS21 INS43 MOV32 MOV32 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 MOV42 UPD42 MOV32 DEL40 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL40 DEL42 DEL33 DEL27 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL32 DEL41 DEL8 DEL31 DEL33 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21