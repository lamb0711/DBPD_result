GEODE-7001: Add region entry count gauge (#3850)

* GEODE-7001: Add region entry count gauge

Add 'member.region.entries' gauge in RegionPerfStats
- Add region.name and data.policy tags
- Add an AtomicLong to track the entry count
- Configure the member.region.entries gauge to fetch from new
  getLocalSize() method (see below).
- Configure the 'entryCount' stat to be supplied by new getLocalSize()
  method.

Add getLocalSize() method to InternalRegion, and implement it in
LocalRegion and PartitionedRegion
- In LocalRegion, the method returns the region map size minus the
  number of tombstones.
- In PartitionedRegion, the method sums the local sizes of all local
  bucket regions.

Also refactored the following:
- Reorganize CachePerfStats/RegionPerfStats constructors
- Remove CachePerfStats.getEntries()
- Remove use of CachePerfStats.getEntries() from
  PartitionedRegionStatus.
- Add @Override to ValidatingStatisticsType methods in StatisticsTypeImpl
- Extracted invokeSuppliers() to new SuppliableStatistics interface and
  rename as updateSuppliedValues()
- Move responsibility to prepend 'RegionStats-' onto region statistics
  textID into the classes that create RegionPerfStats and
  CachePerfStats.

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>
Co-Authored-By: Aaron Lindsey <alindsey@pivotal.io>

* empty commit to trigger precheckin

* Remove leftover atMost

* Spotless found unused import

-  public long getLocalSize() {
+  public long getLocalSizeForTest() {
+  @Override
+  public int getLocalSize() {
+    return dataStore.getLocalBucket2RegionMap().values().stream()
+        .mapToInt(BucketRegion::getLocalSize)
+        .sum();
+  }
+

INS31 UPD42 INS78 INS83 INS39 INS42 INS8 INS42 INS41 INS32 INS32 INS42 INS32 INS42 INS90 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42