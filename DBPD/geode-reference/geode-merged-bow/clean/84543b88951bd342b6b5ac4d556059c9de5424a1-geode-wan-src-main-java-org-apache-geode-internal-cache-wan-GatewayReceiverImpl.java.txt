Merge branch 'develop' into feature/GEODE-3762
-  private String host;
+  private String hostnameForSenders;
-    /*
-     * If user has set hostNameForSenders then it should take precedence over bindAddress. If user
-     * hasn't set either hostNameForSenders or bindAddress then getLocalHost().getHostName() should
-     * be used.
-     */
-    if (hostnameForSenders == null || hostnameForSenders.isEmpty()) {
-      if (bindAdd == null || bindAdd.isEmpty()) {
-        try {
-          logger
-              .warn(LocalizedMessage.create(LocalizedStrings.GatewayReceiverImpl_USING_LOCAL_HOST));
-          this.host = SocketCreator.getLocalHost().getHostName();
-        } catch (UnknownHostException e) {
-          throw new IllegalStateException(
-              LocalizedStrings.GatewayReceiverImpl_COULD_NOT_GET_HOST_NAME.toLocalizedString(), e);
-        }
-      } else {
-        this.host = bindAdd;
-      }
-    } else {
-      this.host = hostnameForSenders;
-    }
-
+    this.hostnameForSenders = hostnameForSenders;
+  public String getHostnameForSenders() {
+    return hostnameForSenders;
+  }
+
+  public String getHost() {
+    if (receiver != null) {
+      return ((CacheServerImpl) receiver).getExternalAddress();
+    }
+
+    if (hostnameForSenders != null && !hostnameForSenders.isEmpty()) {
+      return hostnameForSenders;
+    }
+
+    if (bindAdd != null && !bindAdd.isEmpty()) {
+      return bindAdd;
+    }
+
+    try {
+      return SocketCreator.getLocalHost().getHostName();
+    } catch (UnknownHostException e) {
+      throw new IllegalStateException(
+          LocalizedStrings.GatewayReceiverImpl_COULD_NOT_GET_HOST_NAME.toLocalizedString(), e);
+    }
+  }
+
-      receiver.setHostnameForClients(host);
+      if (hostnameForSenders != null && !hostnameForSenders.isEmpty()) {
+        receiver.setHostnameForClients(hostnameForSenders);
+      }
-  public String getHost() {
-    return this.host;
-  }
-
-        .append(Integer.toHexString(hashCode())).append(" [").append("host='").append(getHost())
-        .append("'; port=").append(getPort()).append("; bindAddress=").append(getBindAddress())
-        .append("; maximumTimeBetweenPings=").append(getMaximumTimeBetweenPings())
-        .append("; socketBufferSize=").append(getSocketBufferSize()).append("; isManualStart=")
-        .append(isManualStart()).append("; group=")
-        .append(Arrays.toString(new String[] {GatewayReceiver.RECEIVER_GROUP})).append("]")
-        .toString();
+        .append(Integer.toHexString(hashCode())).append("'; port=").append(getPort())
+        .append("; bindAddress=").append(getBindAddress()).append("'; hostnameForSenders=")
+        .append(getHostnameForSenders()).append("; maximumTimeBetweenPings=")
+        .append(getMaximumTimeBetweenPings()).append("; socketBufferSize=")
+        .append(getSocketBufferSize()).append("; isManualStart=").append(isManualStart())
+        .append("; group=").append(Arrays.toString(new String[] {GatewayReceiver.RECEIVER_GROUP}))
+        .append("]").toString();

MOV31 INS31 INS43 UPD42 INS83 MOV43 INS42 MOV8 UPD42 MOV21 INS42 INS25 INS25 INS25 MOV54 INS42 INS27 MOV8 UPD27 MOV27 INS8 UPD27 MOV27 INS8 MOV32 INS42 INS33 INS41 UPD27 INS38 INS41 UPD27 INS38 INS41 INS41 INS25 UPD42 UPD42 INS32 MOV32 INS42 MOV32 INS42 MOV32 INS27 INS8 INS45 INS36 INS42 INS27 INS38 MOV21 MOV32 INS11 INS42 INS33 INS32 INS45 INS43 INS42 INS42 INS42 UPD42 MOV32 INS42 INS45 MOV32 INS45 MOV32 INS45 INS32 INS45 INS42 MOV32 INS45 MOV32 UPD45 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL45 DEL42 DEL32 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL32