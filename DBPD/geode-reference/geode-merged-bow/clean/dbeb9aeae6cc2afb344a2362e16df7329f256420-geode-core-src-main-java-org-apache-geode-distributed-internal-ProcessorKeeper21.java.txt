Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message processor class typically creates an instance of
- * ProcessorKeeper and holds it in a static variable.  In the
- * constructor of the processor class, do this:
+ * A message processor class typically creates an instance of ProcessorKeeper and holds it in a
+ * static variable. In the constructor of the processor class, do this:
- *  
+ * 
- * <p>Processor ids are always greater than 0.</p>
+ * <p>
+ * Processor ids are always greater than 0.
+ * </p>
-  
-  /** 
+
+  /**
-  private final ObjIdConcurrentMap<Object> map =
-    new ObjIdConcurrentMap<Object>();
+  private final ObjIdConcurrentMap<Object> map = new ObjIdConcurrentMap<Object>();
-  
+
-   * Save the processor in this keeper, generate an id for the processor,
-   * and return that id so it can be used to retrieve the processor later.
-   * This keeper keeps a weak reference to the processor.
+   * Save the processor in this keeper, generate an id for the processor, and return that id so it
+   * can be used to retrieve the processor later. This keeper keeps a weak reference to the
+   * processor.
+   * 
-    }
-    else {
+    } else {
-   * Retrieve a processor that was previously put() in this keeper.  The
-   * id is the value returned from put().  If there is no processor by
-   * that id, or it has been garbage collected, null is returned.
+   * Retrieve a processor that was previously put() in this keeper. The id is the value returned
+   * from put(). If there is no processor by that id, or it has been garbage collected, null is
+   * returned.
-      final WeakReference<?> ref = (WeakReference<?>)this.map.get(id);
+      final WeakReference<?> ref = (WeakReference<?>) this.map.get(id);
-   * Remove the processor with the given id.  It's okay if no
-   * processor with that id exists.
+   * Remove the processor with the given id. It's okay if no processor with that id exists.

UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66