GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and DistributedRegion.memoryThresholdReachedMembers must be atomic (#2320)

* GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and
           DistributedRegion.memoryThresholdReachedMembers must be atomic.
+import java.util.Collections;
+import java.util.HashSet;
+import org.apache.geode.cache.LowMemoryException;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.internal.SetUtils;
-  /**
-   * Given a set of members, determine if any member in the set is above critical threshold.
-   *
-   * @param members The set of members to check.
-   * @return True if the set contains a member above critical threshold, false otherwise
-   */
-  public boolean containsHeapCriticalMembers(final Set<InternalDistributedMember> members) {
-    if (members.contains(this.cache.getMyId()) && this.mostRecentEvent.getState().isCritical()) {
-      return true;
-    }
-
-    return SetUtils.intersectsWith(members, this.resourceAdvisor.adviseCritialMembers());
+  protected Set<DistributedMember> getHeapCriticalMembersFrom(Set<DistributedMember> members) {
+    Set<DistributedMember> criticalMembers = getCriticalMembers();
+    criticalMembers.retainAll(members);
+    return criticalMembers;
+  private Set<DistributedMember> getCriticalMembers() {
+    Set<DistributedMember> criticalMembers = new HashSet<>(resourceAdvisor.adviseCriticalMembers());
+    if (this.mostRecentEvent.getState().isCritical()) {
+      criticalMembers.add(cache.getMyId());
+    }
+    return criticalMembers;
+  }
+
+  public void checkForLowMemory(Function function, DistributedMember targetMember) {
+    Set<DistributedMember> targetMembers = Collections.singleton(targetMember);
+    checkForLowMemory(function, targetMembers);
+  }
+
+  public void checkForLowMemory(Function function, Set<DistributedMember> dest) {
+    LowMemoryException exception = createLowMemoryIfNeeded(function, dest);
+    if (exception != null) {
+      throw exception;
+    }
+  }
+
+  public LowMemoryException createLowMemoryIfNeeded(Function function,
+      DistributedMember targetMember) {
+    Set<DistributedMember> targetMembers = Collections.singleton(targetMember);
+    return createLowMemoryIfNeeded(function, targetMembers);
+  }
+
+  public LowMemoryException createLowMemoryIfNeeded(Function function,
+      Set<DistributedMember> memberSet) {
+    if (function.optimizeForWrite()
+        && !MemoryThresholds.isLowMemoryExceptionDisabled()) {
+      Set<DistributedMember> criticalMembersFrom = getHeapCriticalMembersFrom(memberSet);
+      if (!criticalMembersFrom.isEmpty()) {
+        return new LowMemoryException(
+            LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+                .toLocalizedString(function.getId(), criticalMembersFrom),
+            criticalMembersFrom);
+      }
+    }
+    return null;
+  }
+
+
+  protected MemoryEvent getMostRecentEvent() {
+    return mostRecentEvent;
+  }
+
+  protected HeapMemoryMonitor setMostRecentEvent(
+      MemoryEvent mostRecentEvent) {
+    this.mostRecentEvent = mostRecentEvent;
+    return this;
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 UPD74 MOV74 INS42 INS44 INS8 INS83 INS74 INS42 INS8 MOV83 UPD39 MOV39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 UPD43 INS74 INS42 INS60 INS21 INS41 INS43 INS43 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS60 INS21 INS43 INS42 INS74 INS42 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS74 UPD42 MOV42 MOV25 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 UPD42 INS43 INS43 INS74 INS59 INS32 INS42 INS42 INS42 INS74 INS59 MOV32 INS8 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS42 INS74 INS59 INS32 INS42 INS43 INS43 INS8 INS33 INS42 INS42 INS7 INS52 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS60 INS25 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS74 INS59 INS38 MOV8 MOV52 UPD42 MOV42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL9 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL83 DEL44 DEL42 DEL42 DEL42 DEL22 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31