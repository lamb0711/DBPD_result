Merge branch 'develop' into feature/GEODE-7049

+import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
-      http.httpBasic().authenticationEntryPoint(new AuthenticationEntryPoint() {
-        @Override
-        public void commence(HttpServletRequest request, HttpServletResponse response,
-            AuthenticationException authException)
-            throws IOException, ServletException {
-          response.addHeader("WWW-Authenticate", "Basic realm=\"GEODE\"");
-          response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
-          response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
-          ClusterManagementResult result =
-              new ClusterManagementResult(ClusterManagementResult.StatusCode.UNAUTHENTICATED,
-                  authException.getMessage());
-          objectMapper.writeValue(response.getWriter(), result);
-        }
-      });
+      // if auth token is enabled, add a filter to parse the request header. The filter still
+      // saves the token in the form of UsernamePasswordAuthenticationToken
+      if (authProvider.isAuthTokenEnabled()) {
+        JwtAuthenticationFilter tokenEndpointFilter = new JwtAuthenticationFilter();
+        tokenEndpointFilter.setAuthenticationSuccessHandler((request, response, authentication) -> {
+        });
+        tokenEndpointFilter.setAuthenticationFailureHandler((request, response, exception) -> {
+        });
+        http.addFilterBefore(tokenEndpointFilter, BasicAuthenticationFilter.class);
+      }
+      http.httpBasic().authenticationEntryPoint(new AuthenticationFailedHandler());
+
+  private class AuthenticationFailedHandler implements AuthenticationEntryPoint {
+    @Override
+    public void commence(HttpServletRequest request, HttpServletResponse response,
+        AuthenticationException authException)
+        throws IOException, ServletException {
+      response.addHeader("WWW-Authenticate", "Basic realm=\"GEODE\"");
+      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
+      response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
+      ClusterManagementResult result =
+          new ClusterManagementResult(ClusterManagementResult.StatusCode.UNAUTHENTICATED,
+              authException.getMessage());
+      objectMapper.writeValue(response.getWriter(), result);
+    }
+  }

INS26 INS40 INS55 INS83 INS42 MOV43 MOV31 INS25 INS32 INS8 INS42 INS42 INS60 INS21 INS21 INS21 INS43 INS59 INS32 INS32 INS32 INS43 INS42 INS42 INS14 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS42 INS57 INS42 INS43 INS59 INS59 INS59 INS8 INS59 INS59 INS59 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL1