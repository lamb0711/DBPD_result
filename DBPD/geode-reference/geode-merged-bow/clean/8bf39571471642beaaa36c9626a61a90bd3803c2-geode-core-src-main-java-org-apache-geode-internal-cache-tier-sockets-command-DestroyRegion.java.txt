Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+      throws IOException, InterruptedException {
-    //    callbackArgPart = null; (redundant assignment)
+    // callbackArgPart = null; (redundant assignment)
-          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn
-            .getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
+          logger.debug(
+              "{} ignoring message of type {} from client {} because shutdown occurred during message processing.",
+              servConn.getName(), MessageType.getString(msg.getMessageType()),
+              servConn.getProxyID());
-      logger.debug("{}: Received destroy region request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn
-        .getSocketString(), regionName);
+      logger.debug("{}: Received destroy region request ({} bytes) from {} for region {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.DestroyRegion_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL, servConn
-        .getName()));
-      errMessage.append(LocalizedStrings.DestroyRegion__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL.toLocalizedString());
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.DestroyRegion_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL,
+          servConn.getName()));
+      errMessage.append(
+          LocalizedStrings.DestroyRegion__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL
+              .toLocalizedString());
-      writeErrorResponse(msg, MessageType.DESTROY_REGION_DATA_ERROR, errMessage.toString(), servConn);
+      writeErrorResponse(msg, MessageType.DESTROY_REGION_DATA_ERROR, errMessage.toString(),
+          servConn);
-      String reason = LocalizedStrings.DestroyRegion_REGION_WAS_NOT_FOUND_DURING_DESTROY_REGION_REQUEST.toLocalizedString();
+      String reason =
+          LocalizedStrings.DestroyRegion_REGION_WAS_NOT_FOUND_DURING_DESTROY_REGION_REQUEST
+              .toLocalizedString();
-        RegionDestroyOperationContext destroyContext = authzRequest.destroyRegionAuthorize(regionName, callbackArg);
+        RegionDestroyOperationContext destroyContext =
+            authzRequest.destroyRegionAuthorize(regionName, callbackArg);
-      region.basicBridgeDestroyRegion(callbackArg, servConn.getProxyID(), true /* boolean from cache Client */, eventId);
+      region.basicBridgeDestroyRegion(callbackArg, servConn.getProxyID(),
+          true /* boolean from cache Client */, eventId);
-      if (servConn.getCachedRegionHelper().getCache().getCancelCriterion().cancelInProgress() != null) {
+      if (servConn.getCachedRegionHelper().getCache().getCancelCriterion()
+          .cancelInProgress() != null) {
-          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn
-            .getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
+          logger.debug(
+              "{} ignoring message of type {} from client {} because shutdown occurred during message processing.",
+              servConn.getName(), MessageType.getString(msg.getMessageType()),
+              servConn.getProxyID());
-      logger.debug("{}: Sent destroy region response for region {}", servConn.getName(), regionName);
+      logger.debug("{}: Sent destroy region response for region {}", servConn.getName(),
+          regionName);

