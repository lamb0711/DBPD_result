Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Removes a batch of events from the remote secondary queues  
+ * Removes a batch of events from the remote secondary queues
+ * 
-  
-  private HashMap regionToDispatchedKeysMap; 
-  public ParallelQueueRemovalMessage() {
-  }
+  private HashMap regionToDispatchedKeysMap;
+
+  public ParallelQueueRemovalMessage() {}
-      int oldLevel = LocalRegion
-          .setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
+      int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
-          final String regionName = (String)name;
-          final PartitionedRegion region = (PartitionedRegion)cache
-              .getRegion(regionName);
+          final String regionName = (String) name;
+          final PartitionedRegion region = (PartitionedRegion) cache.getRegion(regionName);
-          }
-          else {
-            AbstractGatewaySender abstractSender = region.getParallelGatewaySender(); 
+          } else {
+            AbstractGatewaySender abstractSender = region.getParallelGatewaySender();
-            Map bucketIdToDispatchedKeys = (Map)this.regionToDispatchedKeysMap
-                .get(regionName);
+            Map bucketIdToDispatchedKeys = (Map) this.regionToDispatchedKeysMap.get(regionName);
-              final String bucketFullPath = Region.SEPARATOR
-                  + PartitionedRegionHelper.PR_ROOT_REGION_NAME
-                  + Region.SEPARATOR + region.getBucketName((Integer)bId);
-              AbstractBucketRegionQueue brq = (AbstractBucketRegionQueue)cache
-                  .getRegionByPath(bucketFullPath);
+              final String bucketFullPath =
+                  Region.SEPARATOR + PartitionedRegionHelper.PR_ROOT_REGION_NAME + Region.SEPARATOR
+                      + region.getBucketName((Integer) bId);
+              AbstractBucketRegionQueue brq =
+                  (AbstractBucketRegionQueue) cache.getRegionByPath(bucketFullPath);
-                logger.debug("ParallelQueueRemovalMessage : The bucket in the cache is bucketRegionName : {} bucket: {}", bucketFullPath, brq);
+                logger.debug(
+                    "ParallelQueueRemovalMessage : The bucket in the cache is bucketRegionName : {} bucket: {}",
+                    bucketFullPath, brq);
-              List dispatchedKeys = (List)bucketIdToDispatchedKeys
-                  .get((Integer)bId);
+              List dispatchedKeys = (List) bucketIdToDispatchedKeys.get((Integer) bId);
-                  //First, clear the Event from tempQueueEvents at AbstractGatewaySender level, if exists
-                  //synchronize on AbstractGatewaySender.queuedEventsSync while doing so
+                  // First, clear the Event from tempQueueEvents at AbstractGatewaySender level, if
+                  // exists
+                  // synchronize on AbstractGatewaySender.queuedEventsSync while doing so
-                  
+
-                        logger.debug("ParallelQueueRemovalMessage : The bucket {} is initialized. Destroying the key {} from BucketRegionQueue.", bucketFullPath, key);
+                        logger.debug(
+                            "ParallelQueueRemovalMessage : The bucket {} is initialized. Destroying the key {} from BucketRegionQueue.",
+                            bucketFullPath, key);
-                      //fix for #48082
+                      // fix for #48082
-                    }
-                    else {
-                      //if bucket is not initialized, the event should either be in bucket or tempQueue 
+                    } else {
+                      // if bucket is not initialized, the event should either be in bucket or
+                      // tempQueue
-                        logger.debug("ParallelQueueRemovalMessage : The bucket {} is not yet initialized.", bucketFullPath);
+                        logger.debug(
+                            "ParallelQueueRemovalMessage : The bucket {} is not yet initialized.",
+                            bucketFullPath);
-                          //fix for #48082
+                          // fix for #48082
-                        else {
-                          // if BucketRegionQueue does not have the key, it
-                          // should be in tempQueue
-                          // remove it from there..defect #49196
-                          isDestroyed = destroyFromTempQueue(brq.getPartitionedRegion(),
-                              (Integer) bId,
-                              key);
-                        }
-                        if (!isDestroyed) {
-                    	  //event is neither destroyed from BucketRegionQueue nor from tempQueue
-                    	  brq.addToFailedBatchRemovalMessageKeys(key);
-                          if (isDebugEnabled) {
-                            logger.debug("Event is neither destroyed from BucketRegionQueue not from tempQueue. Added to failedBatchRemovalMessageKeys: {}", key);
-                          }
-                    	}
+
+                        // Even if BucketRegionQueue does not have the key, it could be in the
+                        // tempQueue
+                        // remove it from there..defect #49196
+                        destroyFromTempQueue(brq.getPartitionedRegion(), (Integer) bId, key);
+
+                        // Finally, add the key to the failed batch removal keys so that it is
+                        // definitely removed from the bucket region queue
+                        brq.addToFailedBatchRemovalMessageKeys(key);
-                    	brq.getInitializationLock().readLock().unlock();
+                        brq.getInitializationLock().readLock().unlock();
-                  }
-                  else {// brq is null. Destroy the event from tempQueue. Defect #49196
+                  } else {// brq is null. Destroy the event from tempQueue. Defect #49196
-        } //for loop regionToDispatchedKeysMap.keySet()
+        } // for loop regionToDispatchedKeysMap.keySet()
-  //fix for #48082
-  private void afterAckForSecondary_EventInBucket(
-      AbstractGatewaySender abstractSender, AbstractBucketRegionQueue brq,
-      Object key) {
+  // fix for #48082
+  private void afterAckForSecondary_EventInBucket(AbstractGatewaySender abstractSender,
+      AbstractBucketRegionQueue brq, Object key) {
-      GatewayQueueEvent eventForFilter = (GatewayQueueEvent)brq.get(key);
+      GatewayQueueEvent eventForFilter = (GatewayQueueEvent) brq.get(key);
-      }
-      catch (Exception e) {
-        logger
-            .fatal(
-                LocalizedMessage
-                    .create(
-                        LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
-                        new Object[] { filter.toString(), eventForFilter }), e);
+      } catch (Exception e) {
+        logger.fatal(LocalizedMessage.create(
+            LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
+            new Object[] {filter.toString(), eventForFilter}), e);
-  
-  private void destroyKeyFromBucketQueue(AbstractBucketRegionQueue brq,
-      Object key, PartitionedRegion prQ) {
+
+  private void destroyKeyFromBucketQueue(AbstractBucketRegionQueue brq, Object key,
+      PartitionedRegion prQ) {
-        logger.debug("Destroyed the key {} for shadowPR {} for bucket {}", key, prQ.getName(), brq.getId());
+        logger.debug("Destroyed the key {} for shadowPR {} for bucket {}", key, prQ.getName(),
+            brq.getId());
-        logger.debug("Got EntryNotFoundException while destroying the key {} for bucket {}", key, brq.getId());
+        logger.debug("Got EntryNotFoundException while destroying the key {} for bucket {}", key,
+            brq.getId());
-      //add the key to failedBatchRemovalMessageQueue. 
-      //This is to handle the last scenario in #49196
+      // add the key to failedBatchRemovalMessageQueue.
+      // This is to handle the last scenario in #49196
-      
+
-        logger.debug("Got ForceReattemptException while getting bucket {} to destroyLocally the keys.", brq.getId());
+        logger.debug(
+            "Got ForceReattemptException while getting bucket {} to destroyLocally the keys.",
+            brq.getId());
-          new Object[] { key, prQ.getName() }), e);
+          new Object[] {key, prQ.getName()}), e);
-  
+
-	boolean isDestroyed = false;
+    boolean isDestroyed = false;
-      ConcurrentParallelGatewaySenderQueue prq = (ConcurrentParallelGatewaySenderQueue)queues
-          .toArray()[0];
-      BlockingQueue<GatewaySenderEventImpl> tempQueue = prq
-    		  .getBucketTmpQueue(bId);
+      ConcurrentParallelGatewaySenderQueue prq =
+          (ConcurrentParallelGatewaySenderQueue) queues.toArray()[0];
+      BlockingQueue<GatewaySenderEventImpl> tempQueue = prq.getBucketTmpQueue(bId);
-          //fix for #48082
+          // fix for #48082
-  
-  //fix for #48082
+
+  // fix for #48082
-      AbstractGatewaySender parallelGatewaySenderImpl,
-      GatewaySenderEventImpl eventForFilter) {
-    for (GatewayEventFilter filter : parallelGatewaySenderImpl
-        .getGatewayEventFilters()) {
+      AbstractGatewaySender parallelGatewaySenderImpl, GatewaySenderEventImpl eventForFilter) {
+    for (GatewayEventFilter filter : parallelGatewaySenderImpl.getGatewayEventFilters()) {
-      }
-      catch (Exception e) {
-        logger
-            .fatal(
-                LocalizedMessage
-                    .create(
-                        LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
-                        new Object[] { filter.toString(), eventForFilter }), e);
+      } catch (Exception e) {
+        logger.fatal(LocalizedMessage.create(
+            LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
+            new Object[] {filter.toString(), eventForFilter}), e);
-  
+
-  
+

UPD66 MOV21 MOV21 MOV32 DEL8 DEL42 DEL7 DEL42 DEL38 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25