Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.org.jgroups.stack.GFBasicAdapter;
+import com.gemstone.org.jgroups.spi.GFBasicAdapter;
+import com.gemstone.org.jgroups.util.ExternalStrings;
-    return DataSerializer.readObject(in);
+    try {
+      return DataSerializer.readObject(in);
+    } catch (InternalGemFireError e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  
+  static boolean DEBUG_SERIALIZATION = false;
+    GemFireTracer log = GemFireTracer.getLog(GFJGBasicAdapter.class);
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote version " + serVersion);
+    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote leading byte " + leading);
+    }
+           if (DEBUG_SERIALIZATION) {
+             log.info("wrote Ipaddress " + msg.getSrc());
+           }
+            if (DEBUG_SERIALIZATION) {
+              log.info("wrote address using Util " + msg.getSrc());
+            }
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote gfFlags " + gfFlags);
+    }
-        out.writeInt(msg.getLength()-msg.getOffset());
-        out.write(msg.getRawBuffer(), msg.getOffset(), msg.getLength());
+        int length = msg.getLength();
+        out.writeInt(length);
+        out.write(msg.getRawBuffer(), msg.getOffset(), length);
+        if (DEBUG_SERIALIZATION) {
+          log.info("wrote " + length + " payload bytes");
+        }
-//    if (log.isTraceEnabled()) {
-//      log.trace("writing " + size + " headers");
-//    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("writing " + size + " headers");
+    }
-//        if (log.isTraceEnabled()) {
-//          log.trace("writing header " + entry.getKey() + " length=" + headerBytes.length);
-//        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("writing header " + entry.getKey() + " length=" + headerBytes.length);
+        }
+    GemFireTracer log = GemFireTracer.getLog(GFJGBasicAdapter.class);
+
+    if (DEBUG_SERIALIZATION) {
+      log.info("read version " + sv);
+    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("read leading byte " + leading);
+    }
+              if (DEBUG_SERIALIZATION) {
+                log.info("read src_addr " + src_addr);
+              }
+            if (DEBUG_SERIALIZATION) {
+              log.info("read address using Util " + msg.getSrc());
+            }
+    if (DEBUG_SERIALIZATION) {
+      log.info("read gfFlags " + gfFlags);
+    }
+        if (65535 < len  ||  len < 0) {
+          String sender = msg.getSrc() != null?  msg.getSrc().toString() : "(unknown sender)";
+          log.getLogWriter().warning(ExternalStrings.CORRUPTED_MESSAGE_RECEIVED, sender);
+          throw new IOException(ExternalStrings.CORRUPTED_MESSAGE_RECEIVED.toLocalizedString(sender));
+        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("reading " + len + " payload bytes");
+        }
+    if (DEBUG_SERIALIZATION) {
+      log.info("reading " + len + " headers");
+    }
-//        if (log.isTraceEnabled()) {
-//          log.trace("reading header " + hdr_name + " of length " + hlen);
-//        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("reading header " + hdr_name + " of length " + hlen);
+        }
-//          if (log.isTraceEnabled()) {
-//            log.trace("read " + hdr.toString());
-//          }
+          if (DEBUG_SERIALIZATION) {
+            log.info("read " + hdr.toString());
+          }
-          GemFireTracer log = GemFireTracer.getLog(getClass());
+          log = GemFireTracer.getLog(getClass());

INS26 INS26 INS40 UPD40 INS40 INS23 INS8 INS83 INS39 INS59 INS54 INS42 INS9 INS60 INS25 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS25 MOV8 INS12 INS43 INS59 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 MOV43 INS59 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS44 INS8 INS42 INS42 INS32 INS21 INS21 INS21 INS60 INS21 INS25 INS21 INS25 INS42 INS32 INS21 INS21 INS21 INS25 INS25 INS21 INS25 INS43 INS42 INS53 INS42 INS42 INS57 INS32 INS32 INS32 INS39 INS59 INS32 INS42 INS8 INS32 INS42 INS8 INS42 INS42 INS57 INS32 INS32 INS32 INS27 INS8 INS42 INS8 INS32 INS42 INS8 INS42 INS14 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS25 INS25 INS42 INS42 INS27 INS42 MOV32 MOV42 MOV42 INS42 UPD42 MOV42 INS21 INS42 INS42 INS27 INS21 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS25 INS42 INS42 INS27 INS27 INS27 INS60 INS21 INS53 INS21 INS42 INS42 INS27 INS21 INS25 INS43 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS8 INS42 INS8 INS45 INS42 INS32 INS45 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS8 INS45 INS42 INS34 INS42 INS42 INS34 INS43 INS59 INS32 INS14 INS32 INS45 INS42 INS45 INS32 INS42 INS8 INS21 INS42 INS42 INS42 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS27 INS25 INS21 INS42 INS42 INS16 INS32 INS42 INS40 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS21 INS7 INS32 INS32 INS45 INS42 INS45 INS45 INS32 INS45 INS40 INS42 INS8 INS32 INS27 INS32 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS32 INS42 MOV32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS27 INS32 INS33 INS32 INS42 INS42 INS42 INS27 INS45 INS32 INS45 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL59 DEL60