Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A builder that caches the singleton value. 
+ * A builder that caches the singleton value.
- * {@code Callable}.  Concurrent requests will block and be notified once the
- * originating request has completed.  Once the result has been cached, all 
- * subsequent invocations will return the cached result until it has been cleared.
- * When the value type acquires resources, it is recommended that the type implement
- * {@link Closeable}.  This will allow the resources to be freed if a temporary
- * value is created by a concurrent clear operation.  In all other cases the user
- * is responsible for clearing an resources held by the cached value.
+ * {@code Callable}. Concurrent requests will block and be notified once the originating request has
+ * completed. Once the result has been cached, all subsequent invocations will return the cached
+ * result until it has been cleared. When the value type acquires resources, it is recommended that
+ * the type implement {@link Closeable}. This will allow the resources to be freed if a temporary
+ * value is created by a concurrent clear operation. In all other cases the user is responsible for
+ * clearing an resources held by the cached value.
- * The caching technique is most useful as a defense against a call that is invoked by
- * multiple threads but executes blocking operations serially.  Even when the call
- * supports timeouts, the serial execution penalty can cause "timeout stacking"
- * and thus unbounded delays on the invoking threads.
+ * The caching technique is most useful as a defense against a call that is invoked by multiple
+ * threads but executes blocking operations serially. Even when the call supports timeouts, the
+ * serial execution penalty can cause "timeout stacking" and thus unbounded delays on the invoking
+ * threads.
-    
+
-    
+
-  
-  /** 
-   * Defines the value state.  Allowable transitions are:
+
+  /**
+   * Defines the value state. Allowable transitions are:
-   *  <li>{@code NOT_SET} -> {@code IN_PROGRESS}
-   *  <li>{@code IN_PROGRESS} -> {@code NOT_SET}, {@code SET}, {@code CLEARED}
-   *  <li>{@code SET} -> {@code NOT_SET}, {@code CLEARED}
+   * <li>{@code NOT_SET} -> {@code IN_PROGRESS}
+   * <li>{@code IN_PROGRESS} -> {@code NOT_SET}, {@code SET}, {@code CLEARED}
+   * <li>{@code SET} -> {@code NOT_SET}, {@code CLEARED}
-  private enum ValueState { NOT_SET, IN_PROGRESS, SET, CLEARED }
-  
+  private enum ValueState {
+    NOT_SET, IN_PROGRESS, SET, CLEARED
+  }
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    
+
+
+   * 
-  
+
+   * 
+   * 
-  
+
-   * Clears the cached result.  Any threads waiting for the result will retry unless
+   * Clears the cached result. Any threads waiting for the result will retry unless
-      
+
-      
+
-      
+
-  
+
-      
+
-      
+
-  
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(
-      value="UL_UNRELEASED_LOCK", 
-      justification="findbugs is wrong and Darrel agrees")
+
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "UL_UNRELEASED_LOCK",
+      justification = "findbugs is wrong and Darrel agrees")
-    
+
-      case NOT_SET:
-        assert current == null;
-        current = Thread.currentThread();
-        state = ValueState.IN_PROGRESS;
-        
-        doUnlock = false;
-        sync.unlock();
-        
-        // invoke the task while NOT locked
-        return acquireValue();
-        
-      case IN_PROGRESS:
-        builder.createInProgress();
-        while (state == ValueState.IN_PROGRESS) {
-          try {
-            change.await();
-          } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
-            throw new InterruptedIOException();
-          }
-        }
-  
-        if (error != null) {
-          throw error;
-        }
-        
-        doUnlock = false;
-        sync.unlock();
+        case NOT_SET:
+          assert current == null;
+          current = Thread.currentThread();
+          state = ValueState.IN_PROGRESS;
-        // try again
-        return get();
-        
-      case SET:
-        return value;
-        
-      case CLEARED:
-        throw new IOException("Value has been cleared and cannot be reset");
-        
-      default:
-        throw new IllegalStateException("Unknown ValueState: " + state);
+          doUnlock = false;
+          sync.unlock();
+
+          // invoke the task while NOT locked
+          return acquireValue();
+
+        case IN_PROGRESS:
+          builder.createInProgress();
+          while (state == ValueState.IN_PROGRESS) {
+            try {
+              change.await();
+            } catch (InterruptedException e) {
+              Thread.currentThread().interrupt();
+              throw new InterruptedIOException();
+            }
+          }
+
+          if (error != null) {
+            throw error;
+          }
+
+          doUnlock = false;
+          sync.unlock();
+
+          // try again
+          return get();
+
+        case SET:
+          return value;
+
+        case CLEARED:
+          throw new IOException("Value has been cleared and cannot be reset");
+
+        default:
+          throw new IllegalStateException("Unknown ValueState: " + state);
-  
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(
-      value="UL_UNRELEASED_LOCK", 
-      justification="findbugs is wrong and Darrel agrees")
+
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "UL_UNRELEASED_LOCK",
+      justification = "findbugs is wrong and Darrel agrees")
-    
+
-        
+
-        
+
-      
+
-      
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66