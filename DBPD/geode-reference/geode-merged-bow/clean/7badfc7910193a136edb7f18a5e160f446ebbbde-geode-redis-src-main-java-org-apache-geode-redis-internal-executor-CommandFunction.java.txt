GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-import java.util.concurrent.Callable;
+import org.apache.geode.redis.internal.data.CommandHelper;
-import org.apache.geode.redis.internal.data.RedisHashInRegion;
-import org.apache.geode.redis.internal.data.RedisKeyInRegion;
-import org.apache.geode.redis.internal.data.RedisSetInRegion;
-import org.apache.geode.redis.internal.data.RedisStringInRegion;
+import org.apache.geode.redis.internal.data.RedisHashCommandsFunctionExecutor;
+import org.apache.geode.redis.internal.data.RedisKeyCommandsFunctionExecutor;
+import org.apache.geode.redis.internal.data.RedisSetCommandsFunctionExecutor;
+import org.apache.geode.redis.internal.data.RedisStringCommandsFunctionExecutor;
-  private final transient StripedExecutor stripedExecutor;
-  private final RedisStats redisStats;
+  private final transient RedisKeyCommandsFunctionExecutor keyCommands;
+  private final transient RedisHashCommandsFunctionExecutor hashCommands;
+  private final transient RedisSetCommandsFunctionExecutor setCommands;
+  private final transient RedisStringCommandsFunctionExecutor stringCommands;
-  public static void register(StripedExecutor stripedExecutor,
+  public static void register(Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    FunctionService.registerFunction(new CommandFunction(stripedExecutor, redisStats));
+    FunctionService.registerFunction(new CommandFunction(dataRegion, stripedExecutor, redisStats));
-  public static <T> T execute(RedisCommandType command,
+  public static <T> T invoke(RedisCommandType command,
-  public CommandFunction(StripedExecutor stripedExecutor,
+  public CommandFunction(Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    this.stripedExecutor = stripedExecutor;
-    this.redisStats = redisStats;
+    super(dataRegion);
+    CommandHelper helper = new CommandHelper(dataRegion, redisStats, stripedExecutor);
+    keyCommands = new RedisKeyCommandsFunctionExecutor(helper);
+    hashCommands = new RedisHashCommandsFunctionExecutor(helper);
+    setCommands = new RedisSetCommandsFunctionExecutor(helper);
+    stringCommands = new RedisStringCommandsFunctionExecutor(helper);
-  protected Object compute(Region localRegion, ByteArrayWrapper key,
-      RedisCommandType command, Object[] args) {
-    Callable<Object> callable;
-    boolean useStripedExecutor = true;
+  protected Object compute(ByteArrayWrapper key, Object[] args) {
+    RedisCommandType command = (RedisCommandType) args[0];
-        callable = () -> new RedisKeyInRegion(localRegion, redisStats).del(key);
-        break;
+        return keyCommands.del(key);
-        callable = () -> new RedisKeyInRegion(localRegion, redisStats).exists(key);
-        break;
+        return keyCommands.exists(key);
-        callable = () -> new RedisKeyInRegion(localRegion, redisStats).type(key);
-        break;
+        return keyCommands.type(key);
-        callable =
-            () -> new RedisKeyInRegion(localRegion, redisStats).pexpireat(key, timestamp);
-        break;
+        return keyCommands.pexpireat(key, timestamp);
-        callable = () -> new RedisKeyInRegion(localRegion, redisStats).persist(key);
-        break;
+        return keyCommands.persist(key);
-        callable = () -> new RedisKeyInRegion(localRegion, redisStats).pttl(key);
-        break;
+        return keyCommands.pttl(key);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).append(key, valueToAdd);
-        break;
+        return stringCommands.append(key, valueToAdd);
-      case GET: {
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).get(key);
-        break;
-      }
-      case MGET: {
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).mget(key);
-        break;
-      }
-      case STRLEN: {
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).strlen(key);
-        break;
-      }
+      case GET:
+        return stringCommands.get(key);
+      case MGET:
+        return stringCommands.mget(key);
+      case STRLEN:
+        return stringCommands.strlen(key);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).set(key, value, options);
-        break;
+        return stringCommands.set(key, value, options);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).getset(key, value);
-        break;
+        return stringCommands.getset(key, value);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).getrange(key, start, end);
-        break;
+        return stringCommands.getrange(key, start, end);
-        callable =
-            () -> new RedisStringInRegion(localRegion, redisStats).setrange(key, offset, value);
-        break;
+        return stringCommands.setrange(key, offset, value);
-          callable = () -> new RedisStringInRegion(localRegion, redisStats).bitcount(key);
+          return stringCommands.bitcount(key);
-          callable =
-              () -> new RedisStringInRegion(localRegion, redisStats).bitcount(key, start, end);
+          return stringCommands.bitcount(key, start, end);
-        break;
-        callable =
-            () -> new RedisStringInRegion(localRegion, redisStats).bitpos(key, bit, start, end);
-        break;
+        return stringCommands.bitpos(key, bit, start, end);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).getbit(key, offset);
-        break;
+        return stringCommands.getbit(key, offset);
-        callable =
-            () -> new RedisStringInRegion(localRegion, redisStats).setbit(key, offset, value);
-        break;
+        return stringCommands.setbit(key, offset, value);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).bitop(stripedExecutor,
-            operation, key,
-            sources);
-        useStripedExecutor = false;
-        break;
+        return stringCommands.bitop(operation, key, sources);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).incr(key);
-        break;
+        return stringCommands.incr(key);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).decr(key);
-        break;
+        return stringCommands.decr(key);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).incrby(key, increment);
-        break;
+        return stringCommands.incrby(key, increment);
-        callable =
-            () -> new RedisStringInRegion(localRegion, redisStats).incrbyfloat(key, increment);
-        break;
+        return stringCommands.incrbyfloat(key, increment);
-        callable = () -> new RedisStringInRegion(localRegion, redisStats).decrby(key, decrement);
-        break;
+        return stringCommands.decrby(key, decrement);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).sadd(key, membersToAdd);
-        break;
+        return setCommands.sadd(key, membersToAdd);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).srem(key, membersToRemove);
-        break;
+        return setCommands.srem(key, membersToRemove);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).smembers(key);
-        break;
+        return setCommands.smembers(key);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).scard(key);
-        break;
+        return setCommands.scard(key);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).sismember(key, member);
-        break;
+        return setCommands.sismember(key, member);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).srandmember(key, count);
-        break;
+        return setCommands.srandmember(key, count);
-        callable = () -> new RedisSetInRegion(localRegion, redisStats).spop(key, popCount);
-        break;
+        return setCommands.spop(key, popCount);
-        Pattern matchPattern = (Pattern) args[0];
-        int count = (int) args[1];
-        int cursor = (int) args[2];
-        callable =
-            () -> new RedisSetInRegion(localRegion, redisStats).sscan(key, matchPattern, count,
-                cursor);
-        break;
+        Object[] sscanArgs = (Object[]) args[1];
+        Pattern matchPattern = (Pattern) sscanArgs[0];
+        int count = (int) sscanArgs[1];
+        int cursor = (int) sscanArgs[2];
+        return setCommands.sscan(key, matchPattern, count, cursor);
-        callable =
-            () -> new RedisSetInRegion(localRegion, redisStats).sunionstore(stripedExecutor, key,
-                setKeys);
-        useStripedExecutor = false;
-        break;
+        return setCommands.sunionstore(key, setKeys);
-        callable =
-            () -> new RedisSetInRegion(localRegion, redisStats).sinterstore(stripedExecutor, key,
-                setKeys);
-        useStripedExecutor = false;
-        break;
+        return setCommands.sinterstore(key, setKeys);
-        callable =
-            () -> new RedisSetInRegion(localRegion, redisStats).sdiffstore(stripedExecutor, key,
-                setKeys);
-        useStripedExecutor = false;
-        break;
+        return setCommands.sdiffstore(key, setKeys);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hset(key, fieldsToSet, NX);
-        break;
+        return hashCommands.hset(key, fieldsToSet, NX);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hdel(key, fieldsToRemove);
-        break;
+        return hashCommands.hdel(key, fieldsToRemove);
-      case HGETALL: {
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hgetall(key);
-        break;
-      }
+      case HGETALL:
+        return hashCommands.hgetall(key);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hexists(key, field);
-        break;
+        return hashCommands.hexists(key, field);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hget(key, field);
-        break;
+        return hashCommands.hget(key, field);
-      case HLEN: {
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hlen(key);
-        break;
-      }
+      case HLEN:
+        return hashCommands.hlen(key);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hstrlen(key, field);
-        break;
+        return hashCommands.hstrlen(key, field);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hmget(key, fields);
-        break;
+        return hashCommands.hmget(key, fields);
-      case HVALS: {
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hvals(key);
-        break;
-      }
-      case HKEYS: {
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hkeys(key);
-        break;
-      }
+      case HVALS:
+        return hashCommands.hvals(key);
+      case HKEYS:
+        return hashCommands.hkeys(key);
-        Object[] hsetArgs = (Object[]) args[1];
-        Pattern pattern = (Pattern) hsetArgs[0];
-        int count = (int) hsetArgs[1];
-        int cursor = (int) hsetArgs[2];
-        callable =
-            () -> new RedisHashInRegion(localRegion, redisStats).hscan(key, pattern, count, cursor);
-        break;
+        Object[] hscanArgs = (Object[]) args[1];
+        Pattern pattern = (Pattern) hscanArgs[0];
+        int count = (int) hscanArgs[1];
+        int cursor = (int) hscanArgs[2];
+        return hashCommands.hscan(key, pattern, count, cursor);
-        callable =
-            () -> new RedisHashInRegion(localRegion, redisStats).hincrby(key, field, increment);
-        break;
+        return hashCommands.hincrby(key, field, increment);
-        callable = () -> new RedisHashInRegion(localRegion, redisStats).hincrbyfloat(key, field,
-            increment);
-        break;
+        return hashCommands.hincrbyfloat(key, field, increment);
-    if (useStripedExecutor) {
-      return stripedExecutor.execute(key, callable);
-    } else {
-      try {
-        return callable.call();
-      } catch (RuntimeException re) {
-        throw re;
-      } catch (Exception e) {
-        throw new RuntimeException(e);
-      }
-    }

MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD43 INS83 UPD43 INS44 UPD42 INS44 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS74 INS42 INS74 INS42 INS46 INS60 INS21 INS21 MOV60 MOV8 MOV8 MOV8 MOV8 INS43 INS43 INS43 MOV43 INS43 INS43 INS42 INS43 INS59 INS7 INS7 INS43 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS8 INS41 INS41 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 UPD42 INS32 INS32 INS32 INS41 INS32 INS32 INS41 INS32 INS32 INS32 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS32 INS32 INS41 INS41 INS41 INS41 INS41 INS32 INS32 INS41 INS41 INS41 INS60 INS60 MOV60 MOV60 INS41 INS41 INS41 INS41 INS41 INS41 INS32 INS41 INS41 INS32 INS41 INS41 INS32 INS32 INS41 INS41 INS41 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS32 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS32 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS32 INS32 INS32 INS5 INS59 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 MOV42 MOV42 INS32 INS32 INS42 MOV42 MOV42 INS32 INS32 INS42 MOV42 MOV42 INS42 MOV42 MOV42 MOV43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS41 INS41 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV43 INS85 INS42 INS11 INS42 INS11 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 INS42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 UPD42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS32 INS32 INS5 INS2 MOV43 INS2 MOV43 INS42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS43 INS85 INS42 INS34 INS42 INS34 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL86 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL42 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL86 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL86 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL86 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL86 DEL7 DEL21 DEL10 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25