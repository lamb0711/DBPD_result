GEODE-6488: Migrating cancellation state to execution context (#3322)

This work solves two problems.  One is that the query cancellation task
reference in DefaultQuery could be overwritten and thus never removed
from monitoring upon successful completion of a query.  Second is that
once a query execution timed out once, the query object was in an
unusable state which is undesirable.

The solution is to attach the cancellation state to the execution
context rather than the query object, so that cancellation is associated
with each independent execution of a query rather than having
cancellation state that applies to the entire query object.
-import java.util.Optional;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.atomic.AtomicBoolean;
-import org.apache.geode.cache.CacheRuntimeException;
-  private Optional<ScheduledFuture> cancelationTask;
-
-  private volatile CacheRuntimeException queryCancelledException;
-
-  static final ThreadLocal<AtomicBoolean> queryCanceled =
-      ThreadLocal.withInitial(AtomicBoolean::new);
-
-  public Optional<ScheduledFuture> getCancelationTask() {
-    return cancelationTask;
-  }
-
-  public void setCancelationTask(final ScheduledFuture cancelationTask) {
-    this.cancelationTask = Optional.of(cancelationTask);
-  }
-
-    this.cancelationTask = Optional.empty();
+    final ExecutionContext context = new QueryExecutionContext(params, this.cache, this);
+
-      ExecutionContext context = new QueryExecutionContext(params, this.cache, this);
-              this);
+              this, context);
-        result = qe.executeQuery(this, params, null);
+        result = qe.executeQuery(this, context, params, null);
-        queryMonitor.monitorQueryThread(this);
+        queryMonitor.monitorQueryExecution(context);
-      context.setCqQueryContext(this.isCqQuery);
-      return reinterpretQueryExecutionCanceledException();
+      return context.reinterpretQueryExecutionCanceledException();
-        queryMonitor.stopMonitoringQueryThread(this);
+        queryMonitor.stopMonitoringQueryExecution(context);
-   * This method attempts to reintrepret a {@link QueryExecutionCanceledException} using the
-   * the value returned by {@link #getQueryCanceledException} (set by the {@link QueryMonitor}).
-   *
-   * @throws if {@link #getQueryCanceledException} doesn't return {@code null} then throw that
-   *         {@link CacheRuntimeException}, otherwise throw {@link QueryExecutionCanceledException}
-   */
-  private Object reinterpretQueryExecutionCanceledException() {
-    final CacheRuntimeException queryCanceledException = getQueryCanceledException();
-    if (queryCanceledException != null) {
-      throw queryCanceledException;
-    } else {
-      throw new QueryExecutionCanceledException(
-          "Query was canceled. It may be due to low memory or the query was running longer than the MAX_QUERY_EXECUTION_TIME.");
-    }
-  }
-
-  /**
-    ExecutionContext context = new QueryExecutionContext(parameters, this.cache, this);
+    final ExecutionContext context = new QueryExecutionContext(parameters, this.cache, this);
-    context.setCqQueryContext(this.isCqQuery);
-      queryMonitor.monitorQueryThread(this);
+      queryMonitor.monitorQueryExecution(context);
-        queryMonitor.stopMonitoringQueryThread(this);
+        queryMonitor.stopMonitoringQueryExecution(context);
-        DefaultQuery.testHook.doTestHook(TestHook.SPOTS.BEFORE_QUERY_DEPENDENCY_COMPUTATION, this);
+        DefaultQuery.testHook.doTestHook(TestHook.SPOTS.BEFORE_QUERY_DEPENDENCY_COMPUTATION, this,
+            context);
-          testHook.doTestHook(DefaultQuery.TestHook.SPOTS.BEFORE_QUERY_EXECUTION, this);
+          testHook.doTestHook(DefaultQuery.TestHook.SPOTS.BEFORE_QUERY_EXECUTION, this, context);
-        reinterpretQueryExecutionCanceledException();
+        context.reinterpretQueryExecutionCanceledException();
-      queryCanceled.remove();
+      ExecutionContext.isCanceled.remove();
-  /**
-   * Check to see if the query execution got canceled. The query gets canceled by the QueryMonitor
-   * if it takes more than the max query execution time or low memory situations
-   */
-  public boolean isCanceled() {
-    return getQueryCanceledException() != null;
-  }
-
-  public CacheRuntimeException getQueryCanceledException() {
-    return queryCancelledException;
-  }
-
-  /**
-   * The query gets canceled by the QueryMonitor with the reason being specified
-   */
-  public void setQueryCanceledException(final CacheRuntimeException queryCanceledException) {
-    this.queryCancelledException = queryCanceledException;
-  }
-
-    sb.append(';');
-    sb.append("isCancelled = ");
-    sb.append(this.isCanceled());
-        result = qe.executeQuery(this, params, buckets);
+        final ExecutionContext executionContext = new ExecutionContext(null, cache);
+        result = qe.executeQuery(this, executionContext, params, buckets);
-    void doTestHook(SPOTS spot, DefaultQuery query);
+    void doTestHook(SPOTS spot, DefaultQuery query,
+        ExecutionContext executionContext);

MOV60 MOV25 INS44 INS83 INS83 INS43 INS42 MOV25 INS42 MOV27 MOV27 UPD42 INS42 INS40 INS60 INS42 INS83 INS43 INS59 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS33 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL89 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL52 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL32 DEL32 DEL21