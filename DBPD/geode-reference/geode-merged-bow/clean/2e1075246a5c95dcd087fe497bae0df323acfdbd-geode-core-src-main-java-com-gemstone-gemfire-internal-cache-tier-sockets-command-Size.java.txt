Merge branch 'release/1.0.0-incubating.M3'

- * 
+ *
-import java.nio.ByteBuffer;
-import com.gemstone.gemfire.cache.EntryNotFoundException;
-import com.gemstone.gemfire.i18n.LogWriterI18n;
-import com.gemstone.gemfire.internal.cache.EventID;
-import com.gemstone.gemfire.internal.cache.PartitionedRegion;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+  private Size() {
+  }
+
-  private Size() {
+  private static void writeSizeResponse(Integer sizeCount, Message origMsg, ServerConnection servConn)
+    throws IOException {
+    Message responseMsg = servConn.getResponseMessage();
+    responseMsg.setMessageType(MessageType.RESPONSE);
+    responseMsg.setNumberOfParts(1);
+    responseMsg.setTransactionId(origMsg.getTransactionId());
+    responseMsg.addObjPart(sizeCount);
+    responseMsg.send(servConn);
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException, InterruptedException {
-    Part regionNamePart = null, keyPart = null, callbackArgPart = null;
-    String regionName = null;
-    Part eventPart = null;
-    StringBuffer errMessage = new StringBuffer();
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
+    StringBuilder errMessage = new StringBuilder();
-    {
-      long oldStart = start;
-      start = DistributionStats.getStatTime();
-      stats.incReadSizeRequestTime(start - oldStart);
-    }
+    long oldStart = start;
+    start = DistributionStats.getStatTime();
+    stats.incReadSizeRequestTime(start - oldStart);
-    regionNamePart = msg.getPart(0);
-    regionName = regionNamePart.getString();
-    
+    Part regionNamePart = msg.getPart(0);
+    String regionName = regionNamePart.getString();
+
-      errMessage
-            .append(LocalizedStrings.BaseCommand__THE_INPUT_REGION_NAME_FOR_THE_0_REQUEST_IS_NULL.toLocalizedString("size"));
-      writeErrorResponse(msg, MessageType.SIZE_ERROR, errMessage
-          .toString(), servConn);
+      errMessage.append(LocalizedStrings.BaseCommand__THE_INPUT_REGION_NAME_FOR_THE_0_REQUEST_IS_NULL.toLocalizedString("size"));
+      writeErrorResponse(msg, MessageType.SIZE_ERROR, errMessage.toString(), servConn);
+      return;
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = LocalizedStrings.BaseCommand__0_WAS_NOT_FOUND_DURING_1_REQUEST.toLocalizedString(regionName,"size");
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
-      }
-      else {
-        // Size the entry
-        try {
+    LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = LocalizedStrings.BaseCommand__0_WAS_NOT_FOUND_DURING_1_REQUEST.toLocalizedString(regionName, "size");
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    GeodeSecurityUtil.authorizeRegionRead(regionName);
+    // Size the entry
+    try {
-           * 
+           *
-           * 
+           *
-          writeSizeResponse(region.size(), msg, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-        catch (RegionDestroyedException rde) {
-          writeException(msg, rde, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-        catch (Exception e) {
-          // If an interrupted exception is thrown , rethrow it
-          checkForInterrupt(servConn, e);
+      writeSizeResponse(region.size(), msg, servConn);
+    } catch (RegionDestroyedException rde) {
+      writeException(msg, rde, false, servConn);
+    } catch (Exception e) {
+      // If an interrupted exception is thrown , rethrow it
+      checkForInterrupt(servConn, e);
-          // If an exception occurs during the destroy, preserve the connection
-          writeException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          if (e instanceof GemFireSecurityException) {
-            // Fine logging for security exceptions since these are already
-            // logged by the security logger
-            if (logger.isDebugEnabled())
-              logger.debug("{}: Unexpected Security exception", servConn.getName(), e);
-          }
-          else {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.BaseCommand_0_UNEXPECTED_EXCEPTION, servConn.getName()), e); 
-          }
-          servConn.setAsTrue(RESPONDED);
-          return;
-        } finally {
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Sent size response for region {}", servConn.getName(), regionName);
-          }
-          stats.incWriteSizeResponseTime(DistributionStats.getStatTime()
-            - start);
+      // If an exception occurs during the destroy, preserve the connection
+      writeException(msg, e, false, servConn);
+      if (e instanceof GemFireSecurityException) {
+        // Fine logging for security exceptions since these are already
+        // logged by the security logger
+        if (logger.isDebugEnabled()) {
+          logger.debug("{}: Unexpected Security exception", servConn.getName(), e);
+      } else {
+        logger.warn(LocalizedMessage.create(LocalizedStrings.BaseCommand_0_UNEXPECTED_EXCEPTION, servConn.getName()), e);
+    } finally {
+      if (logger.isDebugEnabled()) {
+        logger.debug("{}: Sent size response for region {}", servConn.getName(), regionName);
+      }
+      servConn.setAsTrue(RESPONDED);
+      stats.incWriteSizeResponseTime(DistributionStats.getStatTime() - start);
-    
-    
-
-  
-  private static void writeSizeResponse(Integer sizeCount, Message origMsg,
-      ServerConnection servConn) throws IOException {
-    Message responseMsg = servConn.getResponseMessage();
-    responseMsg.setMessageType(MessageType.RESPONSE);
-    responseMsg.setNumberOfParts(1);
-    responseMsg.setTransactionId(origMsg.getTransactionId());
-    responseMsg.addObjPart(sizeCount);
-    responseMsg.send(servConn);
-  }
-

MOV26 MOV31 MOV31 UPD40 MOV8 INS60 MOV60 MOV60 MOV21 MOV60 MOV21 MOV21 INS60 INS60 INS25 MOV60 INS25 INS21 INS43 INS59 MOV43 INS59 MOV43 INS59 MOV27 MOV8 MOV27 MOV8 INS32 INS42 INS42 INS14 INS42 MOV32 INS42 MOV32 INS41 INS41 INS42 INS42 INS42 MOV21 INS43 INS42 INS8 MOV21 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL41 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL42 DEL43 DEL42 DEL33 DEL59 DEL42 DEL33 DEL59 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL8 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL25 DEL8 DEL25 DEL8