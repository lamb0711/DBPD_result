GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-import org.apache.geode.annotations.Immutable;
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheTransactionManager;
-import org.apache.geode.cache.RegionShortcut;
-import org.apache.geode.cache.TransactionId;
-import org.apache.geode.cache.query.IndexExistsException;
-import org.apache.geode.cache.query.IndexInvalidException;
-import org.apache.geode.cache.query.IndexNameConflictException;
-import org.apache.geode.cache.query.Query;
-import org.apache.geode.cache.query.QueryInvalidException;
-import org.apache.geode.cache.query.QueryService;
-import org.apache.geode.cache.query.RegionNotFoundException;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.hll.HyperLogLogPlus;
-import org.apache.geode.management.cli.Result.Status;
-import org.apache.geode.management.internal.cli.commands.CreateRegionCommand;
-import org.apache.geode.management.internal.cli.result.model.ResultModel;
-import org.apache.geode.redis.internal.executor.ListQuery;
-import org.apache.geode.redis.internal.executor.SortedSetQuery;
-/**
- * This class stands between {@link Executor} and {@link Cache#getRegion(String)}. This is needed
- * because some keys for Redis represented as a {@link Region} in {@link GeodeRedisServer} come with
- * additional state. Therefore getting, creating, or destroying a {@link Region} needs to be
- * synchronized, which is done away with and abstracted by this class.
- */
-  private final ConcurrentHashMap<ByteArrayWrapper, Region<Object, Object>> dynamicRegions;
-
-  /**
-   * This is the {@link RedisDataType#REDIS_HLL} {@link Region}. This is the Region that stores all
-   * HyperLogLog contents
-   */
-  private final Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion;
-
-  private final Cache cache;
-  private final QueryService queryService;
-  private final ConcurrentMap<ByteArrayWrapper, Map<Enum<?>, Query>> preparedQueries =
-      new ConcurrentHashMap<>();
-  private final RegionShortcut defaultRegionType;
-  @Immutable
-  private static final CreateRegionCommand createRegionCmd = new CreateRegionCommand();
-  private final ConcurrentHashMap<ByteArrayWrapper, Lock> dynamicRegionLocks;
-  @SuppressWarnings("deprecation")
-      Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion,
-      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
+      ScheduledExecutorService expirationExecutor,
-
-    this(stringsRegion, hLLRegion, redisMetaRegion, expirationsMap, expirationExecutor,
-        defaultShortcut, dataRegion, GemFireCacheImpl.getInstance());
-  }
-
-  public RegionProvider(Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion,
-      Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion,
-      KeyRegistrar redisMetaRegion,
-      ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap,
-      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
-      Region<ByteArrayWrapper, RedisData> dataRegion, Cache cache) {
-    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null) {
+    if (stringsRegion == null || redisMetaRegion == null) {
-    dynamicRegions = new ConcurrentHashMap<>();
-    this.hLLRegion = hLLRegion;
-    this.cache = cache;
-    queryService = cache.getQueryService();
-    defaultRegionType = defaultShortcut;
-    dynamicRegionLocks = new ConcurrentHashMap<>();
-  }
-
-  public Region<?, ?> getRegion(ByteArrayWrapper key) {
-    if (key == null) {
-      return null;
-    }
-
-    return dynamicRegions.get(key);
-
-      case REDIS_HLL:
-        return hLLRegion;
-
-      case REDIS_PROTECTED:
-      case NONE:
-      case REDIS_LIST:
-      case REDIS_SORTEDSET:
-  public void removeRegionReferenceLocally(ByteArrayWrapper key, RedisDataType type) {
-    if (!typeUsesDynamicRegions(type)) {
-      return;
-    }
-    if (getRegion(key) == null) {
-      return;
-    }
-    Lock lock = dynamicRegionLocks.get(key);
-    if (lock == null) {
-      return;
-    }
-    boolean locked = lock.tryLock();
-    if (!locked) {
-      // If we cannot get the lock we ignore this remote event, this key has local event
-      // that started independently, ignore this event to prevent deadlock
-      return;
-    }
-    try {
-      cancelKeyExpiration(key);
-      removeRegionState(key, type);
-    } finally {
-      lock.unlock();
-    }
-  }
-
-    if (type == RedisDataType.REDIS_PROTECTED) {
+    if (!typeStoresDataInKeyRegistrar(type)) {
+      keyRegistrar.unregister(key);
+    }
+    RedisKeyCommands redisKeyCommands = new RedisKeyCommandsFunctionExecutor(dataRegion);
+    try {
+      if (type == RedisDataType.REDIS_STRING) {
+        return stringsRegion.remove(key) != null;
+      } else if (type == RedisDataType.REDIS_SET || type == RedisDataType.REDIS_HASH) {
+        return redisKeyCommands.del(key);
+      } else {
+        return false;
+      }
+    } catch (Exception exc) {
-    }
-    Lock lock = dynamicRegionLocks.get(key);
-    try {
-      if (lock != null) { // only typeUsesDynamicRegions will have a lock
-        lock.lock();
-      }
-      if (!typeStoresDataInKeyRegistrar(type)) {
-        keyRegistrar.unregister(key);
-      }
-      RedisKeyCommands redisKeyCommands = new RedisKeyCommandsFunctionExecutor(dataRegion);
-      try {
-        if (type == RedisDataType.REDIS_STRING) {
-          return stringsRegion.remove(key) != null;
-        } else if (type == RedisDataType.REDIS_HLL) {
-          return hLLRegion.remove(key) != null;
-        } else if (type == RedisDataType.REDIS_LIST || type == RedisDataType.REDIS_SORTEDSET) {
-          return destroyRegion(key, type);
-        } else if (type == RedisDataType.REDIS_SET || type == RedisDataType.REDIS_HASH) {
-          return redisKeyCommands.del(key);
-        } else {
-          return false;
-        }
-      } catch (Exception exc) {
-        return false;
-      } finally {
-        if (cancelExpiration) {
-          cancelKeyExpiration(key);
-        } else {
-          removeKeyExpiration(key);
-        }
-        if (lock != null) {
-          dynamicRegionLocks.remove(key);
-        }
-      }
-      if (lock != null) {
-        lock.unlock();
+      if (cancelExpiration) {
+        cancelKeyExpiration(key);
+      } else {
+        removeKeyExpiration(key);
-  public Region<?, ?> getOrCreateRegion(ByteArrayWrapper key, RedisDataType type,
-      ExecutionHandlerContext context) {
-    return getOrCreateRegion0(key, type, context, true);
-  }
-
-  public boolean typeUsesDynamicRegions(RedisDataType type) {
-    return type == RedisDataType.REDIS_LIST || type == RedisDataType.REDIS_SORTEDSET;
-  }
-
-  public void createRemoteRegionReferenceLocally(ByteArrayWrapper key, RedisDataType type) {
-    if (!typeUsesDynamicRegions(type)) {
-      return;
-    }
-    Region<Object, Object> r = dynamicRegions.get(key);
-    if (r != null) {
-      return;
-    }
-    Lock lock = dynamicRegionLocks.get(key);
-    if (lock == null) {
-      Lock newLock = new ReentrantLock();
-      lock = dynamicRegionLocks.putIfAbsent(key, newLock);
-      if (lock == null) {
-        lock = newLock;
-      }
-    }
-    boolean locked = lock.tryLock();
-    // If we cannot get the lock then this remote event may have been initialized
-    // independently on this machine, so if we wait on the lock it is more than
-    // likely we will deadlock just to do the same task. This event can be ignored
-    if (locked) {
-      try {
-        r = cache.getRegion(key.toString());
-        // If r is null, this implies that we are after a create/destroy
-        // simply ignore. Calls to getRegion or getOrCreate will work correctly
-        if (r == null) {
-          // TODO: one caller of this method only calls it if getRegion returned null. It was
-          // expecting us to create it locally. If someone else will create it locally then this
-          // method does not need to be called.
-          return;
-        }
-
-        if (type == RedisDataType.REDIS_LIST) {
-          doInitializeList(key, r);
-        } else if (type == RedisDataType.REDIS_SORTEDSET) {
-          try {
-            doInitializeSortedSet(key, r);
-          } catch (RegionNotFoundException | IndexInvalidException e) {
-            // ignore
-          }
-        }
-        dynamicRegions.put(key, r);
-      } finally {
-        lock.unlock();
-      }
-    }
-  }
-
-  private Region<?, ?> getOrCreateRegion0(ByteArrayWrapper key, RedisDataType type,
-      ExecutionHandlerContext context, boolean addToMeta) {
-
-    keyRegistrar.validate(key, type);
-    Region<Object, Object> r = dynamicRegions.get(key);
-    if (r != null && r.isDestroyed()) {
-      removeKey(key, type);
-      r = null;
-    }
-    if (r == null) {
-      Lock lock = dynamicRegionLocks.get(key);
-      if (lock == null) {
-        Lock newLock = new ReentrantLock();
-        lock = dynamicRegionLocks.putIfAbsent(key, newLock);
-        if (lock == null) {
-          lock = newLock;
-        }
-      }
-
-      lock.lock();
-      try {
-        r = dynamicRegions.get(key);
-        if (r == null) {
-          boolean hasTransaction = context != null && context.hasTransaction(); // Can create
-          // without context
-          CacheTransactionManager txm = null;
-          TransactionId transactionId = null;
-          try {
-            if (hasTransaction) {
-              txm = cache.getCacheTransactionManager();
-              transactionId = txm.suspend();
-            }
-            Exception concurrentCreateDestroyException;
-            do {
-              concurrentCreateDestroyException = null;
-
-              r = createRegionGlobally(key.toString());
-
-              try {
-                if (type == RedisDataType.REDIS_LIST) {
-                  doInitializeList(key, r);
-                } else if (type == RedisDataType.REDIS_SORTEDSET) {
-                  try {
-                    doInitializeSortedSet(key, r);
-                  } catch (RegionNotFoundException | IndexInvalidException e) {
-                    concurrentCreateDestroyException = e;
-                  }
-                }
-              } catch (QueryInvalidException e) {
-                if (e.getCause() instanceof RegionNotFoundException) {
-                  concurrentCreateDestroyException = e;
-                }
-              }
-            } while (concurrentCreateDestroyException != null);
-            dynamicRegions.put(key, r);
-            if (addToMeta) {
-              keyRegistrar.register(key, type);
-            }
-          } finally {
-            if (hasTransaction) {
-              txm.resume(transactionId);
-            }
-          }
-        }
-      } finally {
-        lock.unlock();
-      }
-    }
-    return r;
-  }
-
-  /**
-   * SYNCHRONIZE EXTERNALLY OF this.locks.get(key)!!!!!
-   *
-   * @param key Key of region to destroy
-   * @param type Type of region to destroyu
-   * @return Flag if destroyed
-   */
-  private boolean destroyRegion(ByteArrayWrapper key, RedisDataType type) {
-    Region<?, ?> r = dynamicRegions.get(key);
-    if (r != null) {
-      try {
-        r.destroyRegion();
-      } catch (Exception e) {
-        return false;
-      } finally {
-        removeRegionState(key, type);
-      }
-    }
-    return true;
-  }
-
-  /**
-   * Do not call this method if you are not synchronized on the lock associated with this key
-   *
-   * @param key Key of region to remove
-   * @param type Type of key to remove all state
-   */
-  private void removeRegionState(ByteArrayWrapper key, RedisDataType type) {
-    preparedQueries.remove(key);
-    dynamicRegions.remove(key);
-  }
-
-  private void doInitializeSortedSet(ByteArrayWrapper key, Region<?, ?> r)
-      throws RegionNotFoundException, IndexInvalidException {
-    String fullpath = r.getFullPath();
-    try {
-      queryService.createIndex("scoreIndex", "entry.value.score",
-          r.getFullPath() + ".entrySet entry");
-      queryService.createIndex("scoreIndex2", "value.score", r.getFullPath() + ".values value");
-    } catch (IndexNameConflictException | IndexExistsException | UnsupportedOperationException e) {
-      // ignore, these indexes already exist or unsupported but make sure prepared queries are made
-    }
-    HashMap<Enum<?>, Query> queryList = new HashMap<>();
-    for (SortedSetQuery lq : SortedSetQuery.values()) {
-      String queryString = lq.getQueryString(fullpath);
-      Query query = queryService.newQuery(queryString);
-      queryList.put(lq, query);
-    }
-    preparedQueries.put(key, queryList);
-  }
-
-  private void doInitializeList(ByteArrayWrapper key, Region<Object, Object> r) {
-    r.put("head", 0);
-    r.put("tail", 0);
-    String fullpath = r.getFullPath();
-    HashMap<Enum<?>, Query> queryList = new HashMap<>();
-    for (ListQuery lq : ListQuery.values()) {
-      String queryString = lq.getQueryString(fullpath);
-      Query query = queryService.newQuery(queryString);
-      queryList.put(lq, query);
-    }
-    preparedQueries.put(key, queryList);
-  }
-
-  /**
-   * This method creates a Region globally with the given name. If there is an error in the
-   * creation, a runtime exception will be thrown.
-   *
-   * @param regionPath Name of Region to create
-   * @return Region Region created globally
-   */
-  private Region<Object, Object> createRegionGlobally(String regionPath) {
-    Region<Object, Object> r;
-    r = cache.getRegion(regionPath);
-    if (r != null) {
-      return r;
-    }
-    do {
-      createRegionCmd.setCache(cache);
-      ResultModel resultModel =
-          createRegionCmd.createRegion(regionPath, defaultRegionType, null, null, true,
-              null, null, null, null, null, null, null, null, false, false, true, false, false,
-              false,
-              true, null, null, null, null, null, null, null, null, null, null, null, null, null,
-              false,
-              null, null, null, null, null, null, null, null, null, null, null);
-
-      r = cache.getRegion(regionPath);
-      if (resultModel.getStatus() == Status.ERROR && r == null) {
-        String err = "Unable to create region named \"" + regionPath + "\":\n";
-        // TODO: check this
-        throw new RegionCreationException(err + resultModel.toJson());
-      }
-    } while (r == null); // The region can be null in the case that it is concurrently destroyed by
-    // a remote even triggered internally by Geode
-    return r;
-  }
-
-  public Query getQuery(ByteArrayWrapper key, Enum<?> query) {
-    return preparedQueries.get(key).get(query);
-  }
-
-  public boolean regionExists(ByteArrayWrapper key) {
-    return dynamicRegions.containsKey(key);
-  }
-
-  public Region<ByteArrayWrapper, HyperLogLogPlus> gethLLRegion() {
-    return hLLRegion;
-  }
-
-  public void close() {
-    preparedQueries.clear();
-  }
-
-  public String dumpRegionsCache() {
-    StringBuilder builder = new StringBuilder();
-    for (Entry<ByteArrayWrapper, Region<Object, Object>> e : dynamicRegions.entrySet()) {
-      builder.append(e.getKey()).append(" --> {").append(e.getValue()).append("}\n");
-    }
-    return builder.toString();
-  }
+  public void close() {}

MOV8 MOV49 MOV27 MOV25 MOV42 MOV33 MOV27 MOV8 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL65 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL59 DEL23 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL45 DEL79 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL41 DEL42 DEL49 DEL42 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL49 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL25 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL19 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL45 DEL34 DEL32 DEL21 DEL42 DEL42 DEL45 DEL34 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL33 DEL9 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL9 DEL9 DEL9 DEL9 DEL9 DEL9 DEL9 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL9 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL19 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31