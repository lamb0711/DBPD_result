Merge branch 'release/1.4.0'

+import org.apache.geode.cache.UnsupportedVersionException;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolProcessor;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolService;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolServiceLoader;
+import org.apache.geode.internal.cache.client.protocol.exception.ServiceLoadingFailureException;
+import org.apache.geode.internal.cache.client.protocol.exception.ServiceVersionNotFoundException;
-import org.apache.geode.internal.cache.tier.sockets.ClientProtocolProcessor;
-import org.apache.geode.internal.cache.tier.sockets.ClientProtocolService;
- * 
+ *
-  public final static int GOSSIPVERSION = 1002;
-  public final static int NON_GOSSIP_REQUEST_VERSION = 0;
+  public static final int GOSSIPVERSION = 1002;
+
-  public final static int OLDGOSSIPVERSION = 1001;
+  public static final int OLDGOSSIPVERSION = 1001;
-  private static/* GemStoneAddition */ final Map GOSSIP_TO_GEMFIRE_VERSION_MAP = new HashMap();
-
-  /**
-   * For the new client-server protocol, which ignores the usual handshake mechanism.
-   */
-  public static final byte PROTOBUF_CLIENT_SERVER_PROTOCOL = (byte) 110;
+  private static final Map GOSSIP_TO_GEMFIRE_VERSION_MAP = new HashMap();
-  protected/* GemStoneAddition */ final/* GemStoneAddition */ static int READ_TIMEOUT =
+  protected static final int READ_TIMEOUT =
-  private final int port;
-  private int serverSocketPortAtClose;
+  private int port;
-  private volatile boolean shuttingDown = false; // GemStoneAddition
+  private volatile boolean shuttingDown = false;
-  private final ClientProtocolService clientProtocolService;
+  private final ClientProtocolServiceLoader clientProtocolServiceLoader;
-   * GemStoneAddition - Initialize versions map. Warning: This map must be compatible with all
-   * GemFire versions being handled by this member "With different GOSSIPVERION". If GOSSIPVERIONS
-   * are same for then current GOSSIPVERSION should be used.
-   *
-   * @since GemFire 7.1
+   * Initialize versions map. Warning: This map must be compatible with all GemFire versions being
+   * handled by this member "With different GOSSIPVERION". If GOSSIPVERIONS are same for then
+   * current GOSSIPVERSION should be used.
-  /**
-   * returns the message handler used for client/locator communications processing
-   */
-  public ClientProtocolService getClientProtocolService() {
-    return clientProtocolService;
-  }
-
-      ClientProtocolService clientProtocolService) {
+      ClientProtocolServiceLoader clientProtocolServiceLoader) {
-    this.clientProtocolService = clientProtocolService;
+    this.clientProtocolServiceLoader = clientProtocolServiceLoader;
+    initializeServerSocket();
+    if (serverThread == null || !serverThread.isAlive()) {
+      serverThread = new Thread(threadGroup, threadName) {
+        @Override
+        public void run() {
+          TcpServer.this.run();
+        }
+      };
+      serverThread.setDaemon(true);
+      serverThread.start();
+    }
+  }
+
+  private void initializeServerSocket() throws IOException {
+      // GEODE-4176 - set the port from a wild-card bind so that handlers know the correct value
+      if (this.port <= 0) {
+        this.port = srv_sock.getLocalPort();
+      }
-      srv_sock.setReuseAddress(true); // GemStoneAddition
-    }
-    if (serverThread == null || !serverThread.isAlive()) {
-      serverThread = new Thread(threadGroup, threadName) {
-        @Override // GemStoneAddition
-        public void run() {
-          TcpServer.this.run();
-        }
-      };
-      serverThread.setDaemon(true);
-      serverThread.start();
+      srv_sock.setReuseAddress(true);
-   * 
-   * @return the locator's tcp/ip port. This will be zero if the locator hasn't been started.
+   *
+   * @return the locator's tcp/ip port. This will be zero if the TcpServer hasn't been started.
-    if (srv_sock != null && !srv_sock.isClosed()) {
-      return srv_sock.getLocalPort();
-    }
-    return serverSocketPortAtClose;
+    return port;
+          return;
+      if (srv_sock.isClosed()) {
+        shuttingDown = true;
+        break;
+      }
-        // looping=false; GemStoneAddition change
-    try {
-      srv_sock.close();
-
-    } catch (java.io.IOException ex) {
-      log.warn("exception closing server socket during shutdown", ex);
+    if (!srv_sock.isClosed()) {
+      try {
+        srv_sock.close();
+      } catch (java.io.IOException ex) {
+        log.warn("exception closing server socket during shutdown", ex);
+      }
-      Object request, response;
-        int gossipVersion = readGossipVersion(socket, input);
+        // read the first byte & check for an improperly configured client pool trying
+        // to contact a cache server
+        int firstByte = input.readUnsignedByte();
+        if (firstByte == CommunicationMode.ReservedForGossip.getModeNumber()) {
+          processOneConnection(socket, startTime, input);
+        } else if (firstByte == CommunicationMode.ProtobufClientServerProtocol.getModeNumber()) {
+          handleProtobufConnection(socket, input);
+        } else if (CommunicationMode.isValidMode(firstByte)) {
+          socket.getOutputStream().write(HandShake.REPLY_SERVER_IS_LOCATOR);
+          throw new Exception("Improperly configured client detected - use addPoolLocator to "
+              + "configure its locators instead of addPoolServer.");
-        short versionOrdinal;
-        if (gossipVersion == NON_GOSSIP_REQUEST_VERSION) {
-          if (input.readUnsignedByte() == PROTOBUF_CLIENT_SERVER_PROTOCOL
-              && Boolean.getBoolean("geode.feature-protobuf-protocol")) {
-            if (clientProtocolService == null) {
-              // this shouldn't happen.
-              log.error("Client protocol service not initialized but a request was received");
-              socket.close();
-              throw new IOException(
-                  "Client protocol service not initialized but a request was received");
-            } else {
-              try (ClientProtocolProcessor pipeline =
-                  clientProtocolService.createProcessorForLocator(internalLocator)) {
-                pipeline.processMessage(input, socket.getOutputStream());
-              } catch (IncompatibleVersionException e) {
-                // should not happen on the locator as there is no handshake.
-                log.error("Unexpected exception in client message processing", e);
-              }
-            }
-          } else {
-            rejectUnknownProtocolConnection(socket, gossipVersion);
-          }
-        } else if (gossipVersion <= getCurrentGossipVersion()
-            && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
-          // Create a versioned stream to remember sender's GemFire version
-          versionOrdinal = (short) GOSSIP_TO_GEMFIRE_VERSION_MAP.get(gossipVersion);
-
-          if (Version.GFE_71.compareTo(versionOrdinal) <= 0) {
-            // Recent versions of TcpClient will send the version ordinal
-            versionOrdinal = input.readShort();
-          }
-
-          if (log.isDebugEnabled() && versionOrdinal != Version.CURRENT_ORDINAL) {
-            log.debug("Locator reading request from " + socket.getInetAddress() + " with version "
-                + Version.fromOrdinal(versionOrdinal, false));
-          }
-          input = new VersionedDataInputStream(input, Version.fromOrdinal(versionOrdinal, false));
-          request = DataSerializer.readObject(input);
-          if (log.isDebugEnabled()) {
-            log.debug("Locator received request " + request + " from " + socket.getInetAddress());
-          }
-          if (request instanceof ShutdownRequest) {
-            shuttingDown = true;
-            // Don't call shutdown from within the worker thread, see java bug #6576792.
-            // Closing the socket will cause our acceptor thread to shutdown the executor
-            this.serverSocketPortAtClose = srv_sock.getLocalPort();
-            srv_sock.close();
-            response = new ShutdownResponse();
-          } else if (request instanceof InfoRequest) {
-            response = handleInfoRequest(request);
-          } else if (request instanceof VersionRequest) {
-            response = handleVersionRequest(request);
-          } else {
-            response = handler.processRequest(request);
-          }
-
-          handler.endRequest(request, startTime);
-
-          startTime = DistributionStats.getStatTime();
-          if (response != null) {
-            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
-            if (versionOrdinal != Version.CURRENT_ORDINAL) {
-              output =
-                  new VersionedDataOutputStream(output, Version.fromOrdinal(versionOrdinal, false));
-            }
-            DataSerializer.writeObject(response, output);
-            output.flush();
-          }
-
-          handler.endResponse(request, startTime);
-          // Close the socket. We can not accept requests from a newer version
-          rejectUnknownProtocolConnection(socket, gossipVersion);
+          rejectUnknownProtocolConnection(socket, firstByte);
-  private void rejectUnknownProtocolConnection(Socket socket, int gossipVersion)
-      throws IOException {
-    try {
-      socket.getOutputStream().write("unknown protocol version".getBytes());
-      socket.getOutputStream().flush();
-    } catch (IOException e) {
-      log.debug("exception in sending reply to process using unknown protocol " + gossipVersion, e);
-    }
-    socket.close();
-  }
-
-  private int readGossipVersion(Socket sock, DataInputStream input) throws Exception {
-    // read the first byte & check for an improperly configured client pool trying
-    // to contact a cache server
-    int firstByte = input.readUnsignedByte();
-    if (CommunicationMode.isValidMode(firstByte)) {
-      sock.getOutputStream().write(HandShake.REPLY_SERVER_IS_LOCATOR);
-      throw new Exception("Improperly configured client detected - use addPoolLocator to "
-          + "configure its locators instead of addPoolServer.");
-    }
-
-    int gossipVersion = firstByte;
+  private void processOneConnection(Socket socket, long startTime, DataInputStream input)
+      throws IOException, UnsupportedVersionException, ClassNotFoundException {
+    // At this point we've read the leading byte of the gossip version and found it to be 0,
+    // continue reading the next three bytes
+    int gossipVersion = 0;
-    return gossipVersion;
+
+    Object request;
+    Object response;
+    short versionOrdinal;
+    if (gossipVersion <= getCurrentGossipVersion()
+        && GOSSIP_TO_GEMFIRE_VERSION_MAP.containsKey(gossipVersion)) {
+      // Create a versioned stream to remember sender's GemFire version
+      versionOrdinal = (short) GOSSIP_TO_GEMFIRE_VERSION_MAP.get(gossipVersion);
+
+      if (Version.GFE_71.compareTo(versionOrdinal) <= 0) {
+        // Recent versions of TcpClient will send the version ordinal
+        versionOrdinal = input.readShort();
+      }
+
+      if (log.isDebugEnabled() && versionOrdinal != Version.CURRENT_ORDINAL) {
+        log.debug("Locator reading request from " + socket.getInetAddress() + " with version "
+            + Version.fromOrdinal(versionOrdinal, false));
+      }
+      input = new VersionedDataInputStream(input, Version.fromOrdinal(versionOrdinal, false));
+      request = DataSerializer.readObject(input);
+      if (log.isDebugEnabled()) {
+        log.debug("Locator received request " + request + " from " + socket.getInetAddress());
+      }
+      if (request instanceof ShutdownRequest) {
+        shuttingDown = true;
+        // Don't call shutdown from within the worker thread, see java bug #6576792.
+        // Closing the socket will cause our acceptor thread to shutdown the executor
+        srv_sock.close();
+        response = new ShutdownResponse();
+      } else if (request instanceof InfoRequest) {
+        response = handleInfoRequest(request);
+      } else if (request instanceof VersionRequest) {
+        response = handleVersionRequest(request);
+      } else {
+        response = handler.processRequest(request);
+      }
+
+      handler.endRequest(request, startTime);
+
+      startTime = DistributionStats.getStatTime();
+      if (response != null) {
+        DataOutputStream output = new DataOutputStream(socket.getOutputStream());
+        if (versionOrdinal != Version.CURRENT_ORDINAL) {
+          output =
+              new VersionedDataOutputStream(output, Version.fromOrdinal(versionOrdinal, false));
+        }
+        DataSerializer.writeObject(response, output);
+        output.flush();
+      }
+
+      handler.endResponse(request, startTime);
+    } else {
+      // Close the socket. We can not accept requests from a newer version
+      rejectUnknownProtocolConnection(socket, gossipVersion);
+    }
+  }
+
+  private void rejectUnknownProtocolConnection(Socket socket, int gossipVersion) {
+    try {
+      socket.getOutputStream().write("unknown protocol version".getBytes());
+      socket.getOutputStream().flush();
+      socket.close();
+    } catch (IOException e) {
+      log.debug("exception in sending reply to process using unknown protocol " + gossipVersion, e);
+    }
+  }
+
+  private void handleProtobufConnection(Socket socket, DataInputStream input) throws Exception {
+    if (!Boolean.getBoolean("geode.feature-protobuf-protocol")) {
+      log.warn("Incoming protobuf connection, but protobuf not enabled on this locator.");
+      socket.close();
+      return;
+    }
+
+    try {
+      ClientProtocolService clientProtocolService = clientProtocolServiceLoader.lookupService();
+      clientProtocolService.initializeStatistics("LocatorStats",
+          internalLocator.getDistributedSystem());
+      try (ClientProtocolProcessor pipeline = clientProtocolService.createProcessorForLocator(
+          internalLocator, internalLocator.getCache().getSecurityService())) {
+        while (!pipeline.socketProcessingIsFinished()) {
+          pipeline.processMessage(input, socket.getOutputStream());
+        }
+      } catch (IncompatibleVersionException e) {
+        // should not happen on the locator as there is no handshake.
+        log.error("Unexpected exception in client message processing", e);
+      }
+    } catch (ServiceLoadingFailureException e) {
+      log.error("There was an error looking up the client protocol service", e);
+      socket.close();
+      throw new IOException("There was an error looking up the client protocol service", e);
+    } catch (ServiceVersionNotFoundException e) {
+      log.error("Unable to find service matching the client protocol version byte", e);
+      socket.close();
+      throw new IOException("Unable to find service matching the client protocol version byte", e);
+    }
-  /**
-   * Returns GossipVersion for older Gemfire versions.
-   * 
-   * @return gossip version
-   */
-  public static int getGossipVersionForOrdinal(short ordinal) {
-
-    // Sanity check
-    short closest = -1;
-    int closestGV = getCurrentGossipVersion();
-
-    if (ordinal < Version.CURRENT_ORDINAL) {
-      Iterator<Map.Entry> itr = TcpServer.GOSSIP_TO_GEMFIRE_VERSION_MAP.entrySet().iterator();
-      while (itr.hasNext()) {
-        Map.Entry entry = itr.next();
-        short o = (Short) entry.getValue();
-        if (o == ordinal) {
-          return (Integer) entry.getKey();
-        } else if (o < ordinal && o > closest) {
-          closest = o;
-          closestGV = (Integer) entry.getKey();
-        }
-      }
-    }
-
-    return closestGV;
-  }
-

MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS83 MOV83 MOV83 MOV83 MOV39 MOV59 INS83 UPD43 UPD83 INS39 INS42 INS43 UPD42 INS8 UPD39 UPD42 INS44 MOV43 INS43 INS43 MOV8 UPD83 UPD39 INS42 INS44 INS44 MOV43 MOV8 UPD42 UPD42 INS43 UPD42 INS42 INS21 MOV25 MOV41 INS25 UPD42 INS39 INS42 INS42 UPD42 MOV42 INS60 MOV24 MOV60 INS60 MOV25 INS43 INS42 INS43 INS42 INS25 INS54 INS42 INS32 UPD66 INS42 MOV38 INS8 MOV39 INS59 INS43 MOV59 UPD42 MOV42 UPD42 MOV42 INS38 INS8 MOV8 INS12 INS12 UPD42 INS42 INS25 INS25 MOV54 MOV42 INS34 INS42 MOV21 MOV32 INS21 MOV21 INS41 INS60 INS21 INS44 INS8 INS44 INS8 UPD42 INS27 INS8 INS32 INS8 INS32 MOV43 INS59 INS32 INS8 INS43 INS42 MOV21 INS21 MOV53 INS43 INS42 INS21 INS21 INS53 INS22 INS34 INS21 INS42 INS42 INS21 INS10 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS32 INS61 INS42 INS32 INS42 INS32 INS32 INS14 INS52 INS42 INS7 INS7 INS8 INS42 INS42 INS42 INS42 INS38 MOV8 UPD45 INS42 INS42 INS42 UPD45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS22 MOV32 INS41 INS42 INS9 MOV21 MOV21 MOV54 MOV60 INS25 INS32 INS32 INS42 INS52 INS42 INS27 INS8 INS25 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS27 INS8 INS25 MOV42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS21 MOV32 INS8 INS8 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS21 MOV53 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL11 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL41 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL27 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL27 DEL43 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL41 DEL8