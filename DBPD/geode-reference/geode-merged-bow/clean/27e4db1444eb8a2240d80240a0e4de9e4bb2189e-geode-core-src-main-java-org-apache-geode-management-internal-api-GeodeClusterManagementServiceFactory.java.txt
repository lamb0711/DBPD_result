GEODE-6384: Use consistent API to retrieve instances of ClusterManageâ€¦ (#3359)



+import java.util.Properties;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.security.AuthInitialize;
-    MemberInformation memberInformation = getLocatorInformation(locatorsWithClusterConfig);
+    ClusterManagementServiceInfo cmsInfo =
+        getClusterManagementServiceInfo(locatorsWithClusterConfig);
-    SSLContext sslContext = null;
-    HostnameVerifier hostnameVerifier = null;
-    if (memberInformation.isWebSSL()) {
-      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
-          cache.getSystem().getConfig(), SecurableCommunicationChannel.WEB);
-      if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
-        throw new IllegalStateException(
-            "The server needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
-      }
-
-      sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
-      hostnameVerifier = new NoopHostnameVerifier();
-    }
-
-    return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
-        sslContext, hostnameVerifier, username, password);
+    return createClusterManagementService(username, password, cache.getSystem().getConfig(),
+        cmsInfo);
-    TcpClient client = new TcpClient();
+    DistributionConfig config = ((GemFireCacheImpl) clientCache).getSystem().getConfig();
+    TcpClient client = new TcpClient(config);
-        logger.info(
+        logger.warn(
+    return createClusterManagementService(username, password, config, cmsInfo);
-    return create(cmsInfo.getHostName(), cmsInfo.getHttpPort(), null, new NoopHostnameVerifier(),
+  }
+
+  private ClusterManagementService createClusterManagementService(String username, String password,
+      DistributionConfig config,
+      ClusterManagementServiceInfo cmsInfo) {
+    // if user didn't pass in a username and the locator requires credentials, use the credentials
+    // user used to create the client cache
+    if (cmsInfo.isSecured() && username == null) {
+      Properties securityProps = config.getSecurityProps();
+      username = securityProps.getProperty(AuthInitialize.SECURITY_USERNAME);
+      password = securityProps.getProperty(AuthInitialize.SECURITY_PASSWORD);
+      if (StringUtils.isBlank(username)) {
+        String message = String.format("You will need to either call getService with username and "
+            + "password or specify security-username and security-password in the properties when "
+            + "starting this geode server/client.");
+        throw new IllegalStateException(message);
+      }
+    }
+
+    SSLContext sslContext = null;
+    HostnameVerifier hostnameVerifier = null;
+    if (cmsInfo.isSSL()) {
+      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
+          config, SecurableCommunicationChannel.WEB);
+      if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
+        throw new IllegalStateException(
+            "This server/client needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
+      }
+
+      sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
+      hostnameVerifier = new NoopHostnameVerifier();
+    }
+
+    return create(cmsInfo.getHostName(), cmsInfo.getHttpPort(), sslContext, hostnameVerifier,
-  private MemberInformation getLocatorInformation(Set<InternalDistributedMember> locators) {
+  private ClusterManagementServiceInfo getClusterManagementServiceInfo(
+      Set<InternalDistributedMember> locators) {
+    ClusterManagementServiceInfo info = new ClusterManagementServiceInfo();
+    MemberInformation memberInfo = null;
-
-        // return the first available one. Later for HA, we can return the entire list
-        return memberInformations.get(0);
+        memberInfo = memberInformations.get(0);
+        break;
-        throw new IllegalStateException(e);
-    throw new IllegalStateException("Unable to determine ClusterManagementService endpoint");
+    if (memberInfo == null) {
+      throw new IllegalStateException("Unable to determine ClusterManagementService endpoint");
+    }
+
+    info.setHostName(getHostName(memberInfo));
+    info.setHttpPort(memberInfo.getHttpServicePort());
+    info.setSSL(memberInfo.isWebSSL());
+    info.setSecured(memberInfo.isSecured());
+    return info;

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS83 MOV43 INS42 MOV44 MOV44 MOV44 INS8 INS43 INS42 INS44 INS44 INS44 INS44 UPD43 UPD42 MOV60 INS60 INS41 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 UPD42 INS60 INS60 INS25 INS21 INS21 INS21 INS21 INS41 INS43 INS59 MOV32 INS43 INS59 MOV43 INS32 INS42 INS42 INS42 INS42 INS27 INS8 INS43 INS59 MOV43 INS59 INS27 INS8 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 MOV42 MOV42 INS42 INS42 INS32 INS27 INS60 INS21 INS21 INS25 UPD42 UPD42 INS42 INS42 INS14 INS42 INS33 INS42 INS33 MOV53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 INS33 INS43 INS59 INS7 INS7 INS32 INS8 MOV42 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 MOV60 MOV53 INS32 INS53 INS42 INS21 INS10 INS11 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS40 INS14 INS7 INS43 INS42 INS42 UPD42 INS42 MOV43 INS45 INS42 MOV32 INS42 UPD42 UPD42 UPD42 INS27 INS45 INS45 INS45 DEL40 DEL42 DEL33 DEL42 DEL43 DEL14 DEL32 DEL41 DEL42 DEL45 DEL42 DEL41 DEL42 DEL14 DEL53