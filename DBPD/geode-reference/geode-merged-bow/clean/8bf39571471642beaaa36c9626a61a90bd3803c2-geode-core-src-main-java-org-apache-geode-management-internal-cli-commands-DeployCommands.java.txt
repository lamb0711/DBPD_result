Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * @param groups
-   *          Group(s) to deploy the JAR to or null for all members
-   * @param jar
-   *          JAR file to deploy
-   * @param dir
-*          Directory of JAR files to deploy
+   * @param groups Group(s) to deploy the JAR to or null for all members
+   * @param jar JAR file to deploy
+   * @param dir Directory of JAR files to deploy
-  @CliCommand(value = { CliStrings.DEPLOY }, help = CliStrings.DEPLOY__HELP)
-  @CliMetaData(interceptor = "org.apache.geode.management.internal.cli.commands.DeployCommands$Interceptor", relatedTopic={CliStrings.TOPIC_GEODE_CONFIG}, writesToSharedConfiguration=true)
+  @CliCommand(value = {CliStrings.DEPLOY}, help = CliStrings.DEPLOY__HELP)
+  @CliMetaData(
+      interceptor = "org.apache.geode.management.internal.cli.commands.DeployCommands$Interceptor",
+      relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG}, writesToSharedConfiguration = true)
-    @CliOption(key = { CliStrings.DEPLOY__GROUP }, help = CliStrings.DEPLOY__GROUP__HELP, optionContext=ConverterHint.MEMBERGROUP)
-    @CliMetaData (valueSeparator = ",")
-    String[] groups,
-    @CliOption(key = { CliStrings.DEPLOY__JAR }, help = CliStrings.DEPLOY__JAR__HELP)
-    String jar,
-    @CliOption(key = { CliStrings.DEPLOY__DIR }, help = CliStrings.DEPLOY__DIR__HELP)
-    String dir)
-  {
+      @CliOption(key = {CliStrings.DEPLOY__GROUP}, help = CliStrings.DEPLOY__GROUP__HELP,
+          optionContext = ConverterHint.MEMBERGROUP) @CliMetaData(
+              valueSeparator = ",") String[] groups,
+      @CliOption(key = {CliStrings.DEPLOY__JAR}, help = CliStrings.DEPLOY__JAR__HELP) String jar,
+      @CliOption(key = {CliStrings.DEPLOY__DIR}, help = CliStrings.DEPLOY__DIR__HELP) String dir) {
-}
+      }
-        new Object[] { jarNames, jarBytes }, targetMembers);
+          new Object[] {jarNames, jarBytes}, targetMembers);
-      List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) resultCollector.getResult());
+      List<CliFunctionResult> results =
+          CliFunctionResult.cleanResults((List<?>) resultCollector.getResult());
-          tabularData.accumulate("Deployed JAR Location", "ERROR: " + result.getThrowable().getClass().getName() + ": "
-            + result.getThrowable().getMessage());
+          tabularData.accumulate("Deployed JAR Location",
+              "ERROR: " + result.getThrowable().getClass().getName() + ": "
+                  + result.getThrowable().getMessage());
-     
-      
+
+
-        // This really should never happen since if a JAR file is already deployed a result is returned indicating that.
+        // This really should never happen since if a JAR file is already deployed a result is
+        // returned indicating that.
-      
+
-      if (tabularData.getStatus().equals(Status.OK)){
-        result.setCommandPersisted((new SharedConfigurationWriter()).addJars(jarNames, jarBytes, groups));
+      if (tabularData.getStatus().equals(Status.OK)) {
+        result.setCommandPersisted(
+            (new SharedConfigurationWriter()).addJars(jarNames, jarBytes, groups));
-      return ResultBuilder.createGemFireErrorResult(String.format("Exception while attempting to deploy: (%1$s)",
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(String
+          .format("Exception while attempting to deploy: (%1$s)", toString(t, isDebugging())));
-   * @param groups
-   *          Group(s) to undeploy the JAR from or null for all members
-   * @param jars
-   *          JAR(s) to undeploy (separated by comma)
+   * @param groups Group(s) to undeploy the JAR from or null for all members
+   * @param jars JAR(s) to undeploy (separated by comma)
-  @CliCommand(value = { CliStrings.UNDEPLOY }, help = CliStrings.UNDEPLOY__HELP)
-  @CliMetaData(relatedTopic={CliStrings.TOPIC_GEODE_CONFIG}, writesToSharedConfiguration=true)
+  @CliCommand(value = {CliStrings.UNDEPLOY}, help = CliStrings.UNDEPLOY__HELP)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG}, writesToSharedConfiguration = true)
-      @CliOption(key = { CliStrings.UNDEPLOY__GROUP },
-                 help = CliStrings.UNDEPLOY__GROUP__HELP, 
-                 optionContext=ConverterHint.MEMBERGROUP)
-      @CliMetaData (valueSeparator = ",") String[] groups,
-      @CliOption(key = { CliStrings.UNDEPLOY__JAR },
-                 help = CliStrings.UNDEPLOY__JAR__HELP, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE)
-      @CliMetaData (valueSeparator = ",") String jars) {
+      @CliOption(key = {CliStrings.UNDEPLOY__GROUP}, help = CliStrings.UNDEPLOY__GROUP__HELP,
+          optionContext = ConverterHint.MEMBERGROUP) @CliMetaData(
+              valueSeparator = ",") String[] groups,
+      @CliOption(key = {CliStrings.UNDEPLOY__JAR}, help = CliStrings.UNDEPLOY__JAR__HELP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE) @CliMetaData(
+              valueSeparator = ",") String jars) {
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(this.undeployFunction, new Object[] { jars }, targetMembers);
+      ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(this.undeployFunction, new Object[] {jars}, targetMembers);
-          tabularData.accumulate("Un-Deployed JAR Location", "ERROR: " + result.getThrowable().getClass().getName() + ": "
-              + result.getThrowable().getMessage());
+          tabularData.accumulate("Un-Deployed JAR Location",
+              "ERROR: " + result.getThrowable().getClass().getName() + ": "
+                  + result.getThrowable().getMessage());
-      
+
-        result.setCommandPersisted((new SharedConfigurationWriter()).deleteJars(jars == null ? null : jars.split(","), groups));
+        result.setCommandPersisted((new SharedConfigurationWriter())
+            .deleteJars(jars == null ? null : jars.split(","), groups));
-      return ResultBuilder.createGemFireErrorResult("Exception while attempting to un-deploy: " + th.getClass().getName() + ": "
-          + th.getMessage());
+      return ResultBuilder.createGemFireErrorResult("Exception while attempting to un-deploy: "
+          + th.getClass().getName() + ": " + th.getMessage());
-   * @param group
-   *          Group for which to list JARs or null for all members
+   * @param group Group for which to list JARs or null for all members
-  @CliCommand(value = { CliStrings.LIST_DEPLOYED }, help = CliStrings.LIST_DEPLOYED__HELP)
-  @CliMetaData(relatedTopic={CliStrings.TOPIC_GEODE_CONFIG})
-  @ResourceOperation(resource = Resource.CLUSTER, operation= Operation.READ)
-  public final Result listDeployed(
-      @CliOption(key = { CliStrings.LIST_DEPLOYED__GROUP },
-                 help = CliStrings.LIST_DEPLOYED__GROUP__HELP)
-      @CliMetaData (valueSeparator = ",") String group) {
+  @CliCommand(value = {CliStrings.LIST_DEPLOYED}, help = CliStrings.LIST_DEPLOYED__HELP)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  public final Result listDeployed(@CliOption(key = {CliStrings.LIST_DEPLOYED__GROUP},
+      help = CliStrings.LIST_DEPLOYED__GROUP__HELP) @CliMetaData(
+          valueSeparator = ",") String group) {
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(this.listDeployedFunction, null, targetMembers);
+      ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(this.listDeployedFunction, null, targetMembers);
-          tabularData.accumulate("JAR Location", "ERROR: " + result.getThrowable().getClass().getName() + ": "
-              + result.getThrowable().getMessage());
+          tabularData.accumulate("JAR Location",
+              "ERROR: " + result.getThrowable().getClass().getName() + ": "
+                  + result.getThrowable().getMessage());
-      return ResultBuilder.createGemFireErrorResult("Exception while attempting to list deployed: " + th.getClass().getName() + ": "
-          + th.getMessage());
+      return ResultBuilder.createGemFireErrorResult("Exception while attempting to list deployed: "
+          + th.getClass().getName() + ": " + th.getMessage());
-  @CliAvailabilityIndicator({ CliStrings.DEPLOY, CliStrings.UNDEPLOY, CliStrings.LIST_DEPLOYED })
+  @CliAvailabilityIndicator({CliStrings.DEPLOY, CliStrings.UNDEPLOY, CliStrings.LIST_DEPLOYED})
-  
+
-      
+
-      
+
-        return ResultBuilder.createUserErrorResult("Parameter \"jar\" or \"dir\" is required. Use \"help <command name>\" for assistance.");
+        return ResultBuilder.createUserErrorResult(
+            "Parameter \"jar\" or \"dir\" is required. Use \"help <command name>\" for assistance.");
-        fileResult = new FileResult(new String[] { jar != null ? jar : dir });
+        fileResult = new FileResult(new String[] {jar != null ? jar : dir});
-        return ResultBuilder.createGemFireErrorResult("I/O error when reading jar/dir: " + ioex.getClass().getName() + ": "
-            + ioex.getMessage());
+        return ResultBuilder.createGemFireErrorResult("I/O error when reading jar/dir: "
+            + ioex.getClass().getName() + ": " + ioex.getMessage());
-        String message = "\nDeploying files: " + fileResult.getFormattedFileList() + "\nTotal file size is: "
-            + this.numFormatter.format(((double) fileResult.computeFileSizeTotal() / 1048576)) + "MB\n\nContinue? ";
+        String message =
+            "\nDeploying files: " + fileResult.getFormattedFileList() + "\nTotal file size is: "
+                + this.numFormatter.format(((double) fileResult.computeFileSizeTotal() / 1048576))
+                + "MB\n\nContinue? ";
-          return ResultBuilder.createShellClientAbortOperationResult("Aborted deploy of " + jarOrDir + ".");
+          return ResultBuilder
+              .createShellClientAbortOperationResult("Aborted deploy of " + jarOrDir + ".");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66