Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An abstract implementation of {@link CachedDeserializable} that prefers serialization and compresses
- * the internal serialized value.
+ * An abstract implementation of {@link CachedDeserializable} that prefers serialization and
+ * compresses the internal serialized value.
-public abstract class CompressedCachedDeserializable implements
-    CachedDeserializable, DataSerializableFixedID {
+public abstract class CompressedCachedDeserializable
+    implements CachedDeserializable, DataSerializableFixedID {
-   * +PER_OBJECT_OVERHEAD for CompressedCachedDeserializable object
-   * +4 for value field
+   * +PER_OBJECT_OVERHEAD for CompressedCachedDeserializable object +4 for value field
-  
+
-  public CompressedCachedDeserializable() {
-  }
+  public CompressedCachedDeserializable() {}
-  
+
-  
+
+   * 
-  public CompressedCachedDeserializable(final byte[] serializedValue) {    
+  public CompressedCachedDeserializable(final byte[] serializedValue) {
-      throw new NullPointerException(LocalizedStrings.PreferBytesCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.PreferBytesCachedDeserializable_VALUE_MUST_NOT_BE_NULL
+              .toLocalizedString());
-    
+
-  
+
+   * 
-      throw new NullPointerException(LocalizedStrings.PreferBytesCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
-    
+      throw new NullPointerException(
+          LocalizedStrings.PreferBytesCachedDeserializable_VALUE_MUST_NOT_BE_NULL
+              .toLocalizedString());
+
-  
+
-  
+
-   * Returns the serialized value of the region entry contained by this CompressedCachedDeserializable.  This value 
-   * is the uncompressed value.
+   * Returns the serialized value of the region entry contained by this
+   * CompressedCachedDeserializable. This value is the uncompressed value.
+   * 
-   * Returns the deserialized value.  However, unlike the specification of this method as described in
-   * {@link CachedDeserializable#getDeserializedForReading()} this method does not 
-   * optimize for future calls leaving the value serialized and compressed.
+   * Returns the deserialized value. However, unlike the specification of this method as described
+   * in {@link CachedDeserializable#getDeserializedForReading()} this method does not optimize for
+   * future calls leaving the value serialized and compressed.
-    return getDeserializedValue(null,null);
+    return getDeserializedValue(null, null);
-    return getDeserializedValue(r,re);
+    return getDeserializedValue(r, re);
-  public void fillSerializedValue(BytesAndBitsForCompactor wrapper,
-      byte userBits) {
+  public void fillSerializedValue(BytesAndBitsForCompactor wrapper, byte userBits) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66