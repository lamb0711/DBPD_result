Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class CustomMappingJackson2HttpMessageConverter extends
-    MappingJackson2HttpMessageConverter {
+public class CustomMappingJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter {
-  protected void writeInternal(final Object object,
-      final HttpOutputMessage outputMessage) throws IOException,
-      HttpMessageNotWritableException {
-    HttpOutputMessageWrapper outputMessageWrapper = new BufferingHttpOutputMessageWrapper(
-        outputMessage);
+  protected void writeInternal(final Object object, final HttpOutputMessage outputMessage)
+      throws IOException, HttpMessageNotWritableException {
+    HttpOutputMessageWrapper outputMessageWrapper =
+        new BufferingHttpOutputMessageWrapper(outputMessage);
-  protected static final class BufferingHttpOutputMessageWrapper implements
-      HttpOutputMessageWrapper {
+  protected static final class BufferingHttpOutputMessageWrapper
+      implements HttpOutputMessageWrapper {
-    protected BufferingHttpOutputMessageWrapper(
-        final HttpOutputMessage httpOutputMessage) {
-      Assert.notNull(httpOutputMessage,
-          "The HttpOutputMessage instance to wrap must not be null!");
+    protected BufferingHttpOutputMessageWrapper(final HttpOutputMessage httpOutputMessage) {
+      Assert.notNull(httpOutputMessage, "The HttpOutputMessage instance to wrap must not be null!");
-      this.outputStream = new ByteArrayOutputStream(
-          INITIAL_BYTE_ARRAY_BUFFER_SIZE);
+      this.outputStream = new ByteArrayOutputStream(INITIAL_BYTE_ARRAY_BUFFER_SIZE);
-   * While sound idea in theory to "count the bytes as you stream/write", thus
-   * preserving memory, this does not work in practice since the HTTP headers
-   * must be written to the HTTP output stream response before the body!
+   * While sound idea in theory to "count the bytes as you stream/write", thus preserving memory,
+   * this does not work in practice since the HTTP headers must be written to the HTTP output stream
+   * response before the body!
-  protected static class ContentLengthAccessibleHttpOutputMessageWrapper implements
-      HttpOutputMessageWrapper {
+  protected static class ContentLengthAccessibleHttpOutputMessageWrapper
+      implements HttpOutputMessageWrapper {
-      Assert.notNull(httpOutputMessage,
-          "The HttpOutputMessage instance to wrap must not be null!");
+      Assert.notNull(httpOutputMessage, "The HttpOutputMessage instance to wrap must not be null!");
-      this.outputStream = new ByteCountingOutputStream(
-          this.httpOutputMessage.getBody());
+      this.outputStream = new ByteCountingOutputStream(this.httpOutputMessage.getBody());
-      Assert
-          .notNull(outputStream, "The OutputStream to wrap must not be null!");
+      Assert.notNull(outputStream, "The OutputStream to wrap must not be null!");

UPD66 UPD66 UPD66