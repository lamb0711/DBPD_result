Merge branch 'release/1.8.0'

+import java.util.stream.Collectors;
+/**
+ * All the commands represented in this script is executed within one gfsh session.
+ *
+ * all the commands in this script are executed using this bash command:
+ * gfsh -e command1 -e command2 -e command3 ....
+ *
+ * You can chain commands together to create a gfshScript
+ * GfshScript.of("command1").and("command2").and("command3", "command4")
+ *
+ * If your command started another process and you want to that process to be debuggable, you can do
+ * GfshScript.of("start locator", 30000).and("start server", 30001)
+ * this will allow locator to be debuggable at 30000 and the server to be debuggable at 30001
+ *
+ * By default, each scripts await at most 4 minutes for all the commands to finish
+ * and will expect success. if you want to change this, you can use:
+ * gfshScript.awaitAtMost(1, TimeUnit.MINUTES).expectFailure()
+ *
+ * if you want this gfsh session to be debuggable, you can use:
+ * gfshScript.withDebugPort(30000)
+ * This will allow gfsh to be debuggable at port 30000.
+ *
+ */
-  private final String[] commands;
+  private List<DebuggableCommand> commands = new ArrayList<>();
-  private boolean awaitQuietly = false;
+  private int debugPort = -1;
-  public GfshScript(String... commands) {
-    this.commands = commands;
+  public GfshScript() {
-  /**
-   * By default, this GfshScript will await at most 2 minutes and will expect success.
-   */
-    return new GfshScript(commands);
+    GfshScript script = new GfshScript();
+    script.and(commands);
+    return script;
+  }
+
+  public static GfshScript of(String command, int debugPort) {
+    GfshScript script = new GfshScript();
+    script.and(command, debugPort);
+    return script;
+  }
+
+  public GfshScript and(String... commands) {
+    for (String command : commands) {
+      this.commands.add(new DebuggableCommand(command));
+    }
+    return this;
+  }
+
+  public GfshScript and(String command, int debugPort) {
+    this.commands.add(new DebuggableCommand(command, debugPort));
+    return this;
-   * Will cause the thread that executes {@link GfshScript#awaitIfNecessary} to wait, if necessary,
+   * Will cause the thread that executes to wait, if necessary,
-  /**
-   * Will cause the thread that executes {@link GfshScript#awaitIfNecessary} to wait, if necessary,
-   * until the subprocess executing this Gfsh script has terminated, or the specified waiting time
-   * elapses.
-   */
-  public GfshScript awaitQuietlyAtMost(int timeout, TimeUnit timeUnit) {
-    this.awaitQuietly = true;
-
-    return awaitAtMost(timeout, timeUnit);
-  }
-
-  public GfshScript awaitQuietly() {
-    this.awaitQuietly = true;
-
+  public GfshScript withDebugPort(int debugPort) {
+    this.debugPort = debugPort;
-  protected void awaitIfNecessary(GfshExecution gfshExecution) {
-    if (shouldAwaitQuietly()) {
-      awaitQuietly(gfshExecution);
-    } else if (shouldAwaitLoudly()) {
-      awaitLoudly(gfshExecution);
-    }
-
-    try {
-      assertThat(gfshExecution.getProcess().exitValue()).isEqualTo(expectedExitValue);
-    } catch (AssertionError e) {
-      gfshExecution.printLogFiles();
-      throw e;
-    }
-
-  }
-
-  private void awaitQuietly(GfshExecution gfshExecution) {
-    try {
-      gfshExecution.getProcess().waitFor(timeout, timeoutTimeUnit);
-    } catch (InterruptedException ignore) {
-      // ignore since we are waiting *quietly*
-    }
-  }
-
-  private void awaitLoudly(GfshExecution gfshExecution) {
-    boolean exited;
-    try {
-      exited = gfshExecution.getProcess().waitFor(timeout, timeoutTimeUnit);
-    } catch (InterruptedException e) {
-      throw new RuntimeException(e);
-    }
-
-    try {
-      assertThat(exited).isTrue();
-    } catch (AssertionError e) {
-      gfshExecution.printLogFiles();
-      throw e;
-    }
-  }
-
-  private boolean shouldAwait() {
-    return timeoutTimeUnit != null;
-  }
-
-  private boolean shouldAwaitQuietly() {
-    return shouldAwait() && awaitQuietly;
-  }
-
-  private boolean shouldAwaitLoudly() {
-    return shouldAwait() && !awaitQuietly;
-  }
-
-  public String[] getCommands() {
+  public List<DebuggableCommand> getCommands() {
+  public TimeUnit getTimeoutTimeUnit() {
+    return timeoutTimeUnit;
+  }
+
+  public int getTimeout() {
+    return timeout;
+  }
+
+  public int getExpectedExitValue() {
+    return expectedExitValue;
+  }
+
+  public int getDebugPort() {
+    return debugPort;
+  }
+
-
-
+  public String toString() {
+    StringBuilder builder = new StringBuilder();
+    builder.append(name).append(": gfsh ");
+    builder.append(commands.stream().map(c -> "-e " + c.command).collect(Collectors.joining(" ")));
+    return builder.toString();
+  }

INS26 MOV23 MOV31 INS40 INS29 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS74 UPD39 INS83 UPD42 INS44 INS8 MOV83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS44 INS8 UPD83 MOV83 INS74 INS42 MOV8 INS83 INS43 INS42 INS8 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS14 UPD42 INS38 INS60 INS21 INS41 MOV43 INS42 UPD42 INS60 INS21 INS41 INS42 INS70 INS41 INS42 MOV43 INS42 INS39 INS42 MOV21 INS41 INS39 UPD42 MOV42 MOV21 MOV41 INS43 INS43 INS42 INS41 INS41 INS41 INS41 INS42 INS60 MOV21 INS21 MOV41 INS42 INS42 INS74 INS34 MOV43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS44 INS42 INS8 INS52 INS52 UPD66 INS7 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS14 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 MOV21 INS22 UPD42 MOV42 INS14 INS22 INS42 UPD42 MOV42 INS42 INS14 UPD42 INS45 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS43 UPD42 INS52 INS42 INS43 INS42 INS42 INS52 INS42 UPD43 MOV43 UPD42 UPD42 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 MOV22 UPD42 INS14 INS42 UPD42 INS32 INS42 INS86 INS42 INS42 INS45 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS59 INS27 INS42 INS42 INS45 INS40 DEL83 DEL85 DEL5 DEL9 DEL42 DEL7 DEL21 DEL66 DEL65 DEL29 DEL42 DEL14 DEL41 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL67 DEL65 DEL66 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL32 DEL8 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL42 DEL43 DEL44 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL85 DEL5 DEL42 DEL31 DEL32 DEL42 DEL38 DEL27