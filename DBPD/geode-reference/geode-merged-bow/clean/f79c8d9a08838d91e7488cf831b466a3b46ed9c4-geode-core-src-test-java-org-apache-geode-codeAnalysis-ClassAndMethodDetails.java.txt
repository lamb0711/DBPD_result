Merge branch 'develop' into add-extensions-to-classpath-155484283
-import org.apache.geode.codeAnalysis.decode.CompiledClass;
- * A class used to store the names of dataserializable classes and the sizes of their
+ * A class used to store the names of data-serializable classes and the sizes of their
-
-
-  public String className;
-  public Map<String, byte[]> methodCode = new HashMap<String, byte[]>();
+  String className;
+  Map<String, Integer> methods = new HashMap<>();
-  public ClassAndMethodDetails(CompiledClass dclass) {
-    this.className = dclass.fullyQualifiedName();
+  private ClassAndMethodDetails() {
+    // Do nothing.
-  private ClassAndMethodDetails() {}
-
-        String codeString = fields[2].trim();
-        int codeStringLength = codeString.length();
-        if (codeStringLength != codeLength * 2) {
-          System.err.println("Code string has been tampered with on line " + in.getLineNumber());
+        if (fields.length != 2) {
+          System.err.println("Method detail has been tampered with on line " + in.getLineNumber());
-        byte[] code = new byte[codeLength];
-        int codeIdx = 0;
-        for (int j = 0; j < codeStringLength; j += 2) {
-          String substr = codeString.substring(j, j + 2);
-          // System.out.println("parsing " + j + ": '" + substr + "'");
-          code[codeIdx++] = (byte) (0xff & Integer.parseInt(substr, 16));
-        }
-        instance.methodCode.put(methodName, code);
+        instance.methods.put(methodName, codeLength);
-   * returns a string that can be parsed by ClassAndMethodDetails(String)
-   */
-  public String valuesAsString() {
-    StringBuilder sb = new StringBuilder(80);
-    sb.append(className).append(',').append(methodCode.size()).append("\n");
-    for (Map.Entry<String, byte[]> entry : methodCode.entrySet()) {
-      sb.append(entry.getKey()).append(',');
-      byte[] code = entry.getValue();
-      for (int i = 0; i < code.length; i++) {
-        sb.append(hexChars[(code[i] & 0xff)]);
-      }
-      sb.append("\n");
-    }
-    return sb.toString();
-  }
-
-  /**
-    return valuesAsString();
+    StringBuilder sb = new StringBuilder(80);
+    sb.append(className).append(',').append(methods.size()).append("\n");
+    for (Map.Entry<String, Integer> entry : methods.entrySet()) {
+      sb.append(entry.getKey()).append(',');
+      sb.append(entry.getValue());
+      sb.append("\n");
+    }
+    return sb.toString();

MOV31 UPD74 MOV78 UPD42 UPD66 INS43 UPD42 INS42 UPD74 UPD74 UPD42 MOV21 INS43 UPD42 INS42 MOV32 INS40 MOV34 UPD40 UPD42 UPD45 DEL40 DEL26 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL43 DEL39 DEL85 DEL5 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL34 DEL7 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL37 DEL2 DEL39 DEL34 DEL42 DEL42 DEL42 DEL34 DEL32 DEL27 DEL36 DEL11 DEL7 DEL21 DEL8 DEL24 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL36 DEL2 DEL39 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31