Merge remote-tracking branch 'upstream/develop' into develop

-import org.apache.geode.internal.logging.InternalLogWriter;
+import org.apache.geode.internal.logging.LogWriterLevel;
- * This class provides utility methods to hold all valid log4j levels and legacy geode log levels
- * and the mapping between the two level hierarchy.
+ * Provides lookup of any string representation of a logging level to Log4J2 {@code Level} or
+ * {@code LogWriterLevel} int value.
-  private static Map<String, Level> LEVELS = new HashMap<>();
-  private static Map<String, Integer> S2I = new HashMap<>();
-  private static Map<Integer, String> I2S = new HashMap<>();
+  private static final Map<String, Level> ANY_NAME_TO_LEVEL = new HashMap<>();
+  private static final Map<String, LogWriterLevel> ANY_NAME_TO_LOGWRITERLEVEL = new HashMap<>();
-    // logwriter int level to log4j level string
-    I2S.put(InternalLogWriter.NONE_LEVEL, "OFF");
-    I2S.put(InternalLogWriter.SEVERE_LEVEL, "FATAL");
-    I2S.put(InternalLogWriter.ERROR_LEVEL, "ERROR");
-    I2S.put(InternalLogWriter.WARNING_LEVEL, "WARN");
-    I2S.put(InternalLogWriter.INFO_LEVEL, "INFO");
-    I2S.put(InternalLogWriter.CONFIG_LEVEL, "INFO");
-    I2S.put(InternalLogWriter.FINE_LEVEL, "DEBUG");
-    I2S.put(InternalLogWriter.FINER_LEVEL, "TRACE");
-    I2S.put(InternalLogWriter.FINEST_LEVEL, "TRACE");
-    I2S.put(InternalLogWriter.ALL_LEVEL, "ALL");
+    // LogWriterLevel name to LogWriterLevel
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.NONE.name(), LogWriterLevel.NONE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.SEVERE.name(), LogWriterLevel.SEVERE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.ERROR.name(), LogWriterLevel.ERROR);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.WARNING.name(), LogWriterLevel.WARNING);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.INFO.name(), LogWriterLevel.INFO);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.CONFIG.name(), LogWriterLevel.CONFIG);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.FINE.name(), LogWriterLevel.FINE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.FINER.name(), LogWriterLevel.FINER);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.FINEST.name(), LogWriterLevel.FINEST);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(LogWriterLevel.ALL.name(), LogWriterLevel.ALL);
-    // logwriter strings to integer
-    S2I.put("NONE", InternalLogWriter.NONE_LEVEL);
-    S2I.put("SEVERE", InternalLogWriter.SEVERE_LEVEL);
-    S2I.put("ERROR", InternalLogWriter.ERROR_LEVEL);
-    S2I.put("WARNING", InternalLogWriter.WARNING_LEVEL);
-    S2I.put("INFO", InternalLogWriter.INFO_LEVEL);
-    S2I.put("CONFIG", InternalLogWriter.CONFIG_LEVEL);
-    S2I.put("FINE", InternalLogWriter.FINE_LEVEL);
-    S2I.put("FINER", InternalLogWriter.FINER_LEVEL);
-    S2I.put("FINEST", InternalLogWriter.FINEST_LEVEL);
-    S2I.put("ALL", InternalLogWriter.ALL_LEVEL);
-
-    // additional log4j strings to integer
-    S2I.put("OFF", InternalLogWriter.NONE_LEVEL);
-    S2I.put("FATAL", InternalLogWriter.SEVERE_LEVEL);
-    S2I.put("WARN", InternalLogWriter.WARNING_LEVEL);
-    S2I.put("DEBUG", InternalLogWriter.FINE_LEVEL);
-    S2I.put("TRACE", InternalLogWriter.FINEST_LEVEL);
+    // additional Log4J2 names to LogWriterLevel
+    ANY_NAME_TO_LOGWRITERLEVEL.put(Level.OFF.name(), LogWriterLevel.NONE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(Level.FATAL.name(), LogWriterLevel.SEVERE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(Level.WARN.name(), LogWriterLevel.WARNING);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(Level.DEBUG.name(), LogWriterLevel.FINE);
+    ANY_NAME_TO_LOGWRITERLEVEL.put(Level.TRACE.name(), LogWriterLevel.FINEST);
-      LEVELS.put(level.name(), level);
+      ANY_NAME_TO_LEVEL.put(level.name(), level);
-    LEVELS.put("SEVERE", getLog4jLevel(InternalLogWriter.SEVERE_LEVEL));
-    LEVELS.put("WARNING", getLog4jLevel(InternalLogWriter.WARNING_LEVEL));
-    LEVELS.put("CONFIG", getLog4jLevel(InternalLogWriter.CONFIG_LEVEL));
-    LEVELS.put("FINE", getLog4jLevel(InternalLogWriter.FINE_LEVEL));
-    LEVELS.put("FINER", getLog4jLevel(InternalLogWriter.FINER_LEVEL));
-    LEVELS.put("FINEST", getLog4jLevel(InternalLogWriter.FINEST_LEVEL));
-    LEVELS.put("NONE", getLog4jLevel(InternalLogWriter.NONE_LEVEL));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.SEVERE.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.SEVERE.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.WARNING.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.WARNING.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.CONFIG.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.CONFIG.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.FINE.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.FINE.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.FINER.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.FINER.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.FINEST.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.FINEST.intLevel())));
+    ANY_NAME_TO_LEVEL.put(LogWriterLevel.NONE.name(),
+        LogWriterLevelConverter.toLevel(LogWriterLevel.find(LogWriterLevel.NONE.intLevel())));
-   * resolve the log4j level from any log statement in the log file.
+   * Convert any string representation of a logging level to a Log4J2 {@code Level}. Returns
+   * {@code Level.OFF} if invalid.
-   * @param level either legacy level string or log4j level string
-   * @return log4j level. Level.OFF is invalid string
+   * <p>
+   * resolve the log4j level from any log statement in the log file.
-  public static Level resolveLevel(final String level) {
-    Level log4jLevel = LEVELS.get(level.toUpperCase());
+  public static Level resolveLevel(final String anyLevelName) {
+    Level log4jLevel = ANY_NAME_TO_LEVEL.get(anyLevelName.toUpperCase());
+   * Convert any string representation of a logging level to a Log4J2 {@code Level}. Returns null
+   * if invalid.
+   *
+   * <p>
-   *
-   * @param level either legacy level string or log4j level string
-   * @return log4j level. null if invalid level string
-  public static Level getLevel(String level) {
-    return LEVELS.get(level.toUpperCase());
+  public static Level getLevel(String anyLevelName) {
+    return ANY_NAME_TO_LEVEL.get(anyLevelName.toUpperCase());
-   * convert log4j level to logwriter code
+   * Convert any string representation of a logging level to a {@code LogWriterLevel} int value.
-   * @param log4jLevel log4j level object
-   * @return legacy logwriter code
-   */
-  public static int getLogWriterLevel(final Level log4jLevel) {
-    Integer result = S2I.get(log4jLevel.name());
-
-    if (result == null)
-      throw new IllegalArgumentException("Unknown Log4J level [" + log4jLevel + "].");
-
-    return result;
-  }
-
-  /**
-   * convert legacy logwriter code to log4j level
-   *
-   * @param logWriterLevel logwriter code
-   * @return log4j level
-   */
-  public static Level getLog4jLevel(final int logWriterLevel) {
-    String log4jLevel = I2S.get(logWriterLevel);
-    if (log4jLevel == null)
-      throw new IllegalArgumentException("Unknown LogWriter level [" + logWriterLevel + "].");
-    return Level.getLevel(log4jLevel);
-  }
-
-  /**
+   * <p>
-   *
-   * @param levelName a string of level name
-   * @return logwriter code
-  public static int getLogWriterLevel(final String levelName) {
-    if (levelName == null) {
+  public static int getLogWriterLevel(final String anyLevelName) {
+    if (anyLevelName == null) {
-    Integer level = S2I.get(levelName.toUpperCase());
-    if (level != null)
-      return level;
+    if (ANY_NAME_TO_LOGWRITERLEVEL.get(anyLevelName.toUpperCase()) != null) {
+      return ANY_NAME_TO_LOGWRITERLEVEL.get(anyLevelName.toUpperCase()).intLevel();
+    }
-    if (levelName.startsWith("level-")) {
-      String levelValue = levelName.substring("level-".length());
+    if (anyLevelName.toLowerCase().startsWith("level-")) {
+      String levelValue = anyLevelName.toLowerCase().substring("level-".length());
-        "Unknown log-level \"" + levelName + "\". Valid levels are: " + values + ".");
-  }
-
-  /**
-   * convert a legacy logwriter code to log4j level string
-   *
-   * @param logWriterLevel integer code
-   * @return log4j level string
-   */
-  public static String getLog4jLevelAsString(final int logWriterLevel) {
-    return getLog4jLevel(logWriterLevel).name().toLowerCase();
+        "Unknown log-level \"" + anyLevelName + "\". Valid levels are: " + values + ".");

MOV31 UPD40 INS28 INS83 INS83 UPD74 INS83 INS8 MOV43 UPD42 MOV44 UPD66 INS65 INS66 INS65 INS66 UPD42 UPD43 UPD42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 UPD42 INS65 UPD42 INS65 UPD42 INS25 UPD66 MOV66 INS66 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD66 MOV66 INS65 INS66 INS65 INS66 INS66 INS66 UPD66 MOV66 INS65 INS66 INS66 INS66 UPD66 MOV66 UPD66 MOV66 INS65 INS66 INS66 UPD66 MOV66 INS27 INS8 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 INS32 INS40 UPD42 MOV42 MOV42 INS32 UPD40 MOV40 UPD42 INS32 UPD40 UPD42 INS32 UPD40 UPD42 INS32 UPD40 UPD42 INS32 UPD40 UPD42 INS32 UPD40 UPD42 MOV42 MOV42 INS32 INS32 UPD42 MOV42 MOV42 INS32 INS32 UPD42 MOV42 MOV42 INS32 INS32 UPD42 MOV42 MOV42 MOV32 INS32 UPD42 MOV42 MOV42 MOV32 INS32 UPD42 MOV42 MOV42 MOV32 INS32 INS42 UPD42 MOV42 MOV32 INS32 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD42 MOV42 UPD42 MOV42 INS32 UPD66 MOV66 UPD42 INS32 INS33 INS41 INS32 MOV43 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 UPD40 MOV40 UPD42 MOV42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD40 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD40 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD40 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS42 INS32 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 INS40 UPD42 UPD40 MOV40 INS42 UPD40 MOV40 INS42 INS40 UPD42 INS40 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS32 UPD42 UPD42 UPD42 MOV42 INS42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL45 DEL32 DEL21 DEL42 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL40 DEL32 DEL21 DEL42 DEL45 DEL40 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL40 DEL32 DEL21 DEL42 DEL45 DEL40 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL40 DEL32 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL8 DEL28 DEL65 DEL42 DEL65 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL65 DEL42 DEL65 DEL65 DEL42 DEL43 DEL83 DEL39 DEL42 DEL44 DEL32 DEL32 DEL65 DEL42 DEL65 DEL65 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL25 DEL42 DEL43