Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class IndexUtils  {
+public class IndexUtils {
-  public static final boolean indexesEnabled = System
-      .getProperty("query.disableIndexes") == null;
+  public static final boolean indexesEnabled = System.getProperty("query.disableIndexes") == null;
-  public static IndexManager getIndexManager(Region region,
-      boolean createIfNotAvailable) {
-    if (region == null || region.isDestroyed()) return null;
+  public static IndexManager getIndexManager(Region region, boolean createIfNotAvailable) {
+    if (region == null || region.isDestroyed())
+      return null;
-      // JUst before creating new IndexManager. 
+      // JUst before creating new IndexManager.
-        //Double checked locking
+        // Double checked locking
-        }
-        else {
+        } else {
-      boolean usePrimaryIndex, ExecutionContext context) throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
-    DefaultQueryService qs = (DefaultQueryService) ((GemFireCacheImpl)cache).getLocalQueryService();
-    //IndexProtocol index = null;
+      boolean usePrimaryIndex, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
+    DefaultQueryService qs =
+        (DefaultQueryService) ((GemFireCacheImpl) cache).getLocalQueryService();
+    // IndexProtocol index = null;
-        indxData = qs.getIndex(regionpath, defintions, IndexType.PRIMARY_KEY,
-            indexedExpression, context);
+        indxData =
+            qs.getIndex(regionpath, defintions, IndexType.PRIMARY_KEY, indexedExpression, context);
-        indxData = qs.getBestMatchIndex(regionpath, defintions,
-            IndexType.PRIMARY_KEY, indexedExpression, context);
+        indxData = qs.getBestMatchIndex(regionpath, defintions, IndexType.PRIMARY_KEY,
+            indexedExpression, context);
-      //If we cannot find a primary key index, we can now look for a hash index
-      //because both rely on usePrimaryIndex evaluating to true only if the query
-      //is and equality or not equals condition
+      // If we cannot find a primary key index, we can now look for a hash index
+      // because both rely on usePrimaryIndex evaluating to true only if the query
+      // is and equality or not equals condition
-          indxData = qs.getIndex(regionpath, defintions, IndexType.HASH,
-              indexedExpression, context);
+          indxData =
+              qs.getIndex(regionpath, defintions, IndexType.HASH, indexedExpression, context);
-          indxData = qs.getBestMatchIndex(regionpath, defintions,
-              IndexType.HASH, indexedExpression, context);
+          indxData = qs.getBestMatchIndex(regionpath, defintions, IndexType.HASH, indexedExpression,
+              context);
-      
-    //If Primary Key Index not found or is not valid search for FUNCTIONAL
+
+    // If Primary Key Index not found or is not valid search for FUNCTIONAL
-    if (indxData == null || !indxData._index.isValid() ) {
+    if (indxData == null || !indxData._index.isValid()) {
-        indxData = qs.getIndex(regionpath, defintions, IndexType.FUNCTIONAL,
-            indexedExpression, context);
+        indxData =
+            qs.getIndex(regionpath, defintions, IndexType.FUNCTIONAL, indexedExpression, context);
-        indxData = qs.getBestMatchIndex(regionpath, defintions,
-            IndexType.FUNCTIONAL, indexedExpression, context);
+        indxData = qs.getBestMatchIndex(regionpath, defintions, IndexType.FUNCTIONAL,
+            indexedExpression, context);
-    }
-    else {
-      //if exact PRIMARY_KEY Index not found then try to find exact FUNCTIONAL
+    } else {
+      // if exact PRIMARY_KEY Index not found then try to find exact FUNCTIONAL
-      //if (!fromClause.equals(index.getCanonicalizedFromClause())) {
-      if (indxData._matchLevel != 0 ) {
+      // if (!fromClause.equals(index.getCanonicalizedFromClause())) {
+      if (indxData._matchLevel != 0) {
-            IndexType.FUNCTIONAL /* do not use pk index*/, indexedExpression, context);
-        //if FUNCTIONAL Index is exact match then use or else use PRIMARY_KEY
+            IndexType.FUNCTIONAL /* do not use pk index */, indexedExpression, context);
+        // if FUNCTIONAL Index is exact match then use or else use PRIMARY_KEY
-        //if (functionalIndxInfo != null &&
+        // if (functionalIndxInfo != null &&
-  
+

