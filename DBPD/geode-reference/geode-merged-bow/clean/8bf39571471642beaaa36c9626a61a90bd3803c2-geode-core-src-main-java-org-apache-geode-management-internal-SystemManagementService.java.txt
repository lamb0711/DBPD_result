Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is the concrete implementation of ManagementService
- * which is the gateway to various JMX operations over a GemFire
- * System
+ * This is the concrete implementation of ManagementService which is the gateway to various JMX
+ * operations over a GemFire System
-   * The concrete implementation of DistributedSystem that provides
-   * internal-only functionality.
+   * The concrete implementation of DistributedSystem that provides internal-only functionality.
-   * This is a notification hub to listen all the notifications emitted from all
-   * the MBeans in a peer cache./cache server
+   * This is a notification hub to listen all the notifications emitted from all the MBeans in a
+   * peer cache./cache server
-   * whether the service is closed or not if cache is closed automatically this
-   * service will be closed
+   * whether the service is closed or not if cache is closed automatically this service will be
+   * closed
-  
+
-   * This membership listener will listen on membership events after the node
-   * has transformed into a Managing node.
+   * This membership listener will listen on membership events after the node has transformed into a
+   * Managing node.
-  
-  
+
+
-   * GemFire comes with a default aggregator. 
+   * GemFire comes with a default aggregator.
-  
+
-    // Most likely scenario when this will happen is when a cache is closed and we are at this point.
+    // Most likely scenario when this will happen is when a cache is closed and we are at this
+    // point.
-    this.jmxAdapter = new MBeanJMXAdapter();      
+    this.jmxAdapter = new MBeanJMXAdapter();
-   * This method will initialize all the internal components for Management and
-   * Monitoring
+   * This method will initialize all the internal components for Management and Monitoring
-   * It will a)start an JMX connectorServer b) create a notification hub
-   * c)register the ManagementFunction
+   * It will a)start an JMX connectorServer b) create a notification hub c)register the
+   * ManagementFunction
-      this.localManager = new LocalManager(repo, system, this,cache);
+      this.localManager = new LocalManager(repo, system, this, cache);
-      throw e;      
+      throw e;
-   *For internal Use only
+   * For internal Use only
-  
+
-  
+
-  
+
-  
+
-  
+
-          ManagementStrings.Management_Service_MANAGEMENT_SERVICE_IS_CLOSED
-              .toLocalizedString());
+          ManagementStrings.Management_Service_MANAGEMENT_SERVICE_IS_CLOSED.toLocalizedString());
-      if(listener != null && system.isConnected()){
-        system.getDistributionManager().removeMembershipListener(listener);  
+      if (listener != null && system.isConnected()) {
+        system.getDistributionManager().removeMembershipListener(listener);
-      // while un-registering 
+      // while un-registering
-      localManager  = null;
+      localManager = null;
-    if (!objectName.getDomain().equalsIgnoreCase(
-        ManagementConstants.OBJECTNAME__DEFAULTDOMAIN)) {
+    if (!objectName.getDomain().equalsIgnoreCase(ManagementConstants.OBJECTNAME__DEFAULTDOMAIN)) {
-          ManagementStrings.Management_Service_NOT_A_GEMFIRE_DOMAIN_MBEAN
-              .toLocalizedString());
+          ManagementStrings.Management_Service_NOT_A_GEMFIRE_DOMAIN_MBEAN.toLocalizedString());
-   
-    if(!jmxAdapter.isRegistered(objectName)){
+
+    if (!jmxAdapter.isRegistered(objectName)) {
-    if(notificationEmitter && !jmxAdapter.hasNotificationSupport(objectName)){
+    if (notificationEmitter && !jmxAdapter.hasNotificationSupport(objectName)) {
-    
-    //All validation Passed. Now create the federation Component
+
+    // All validation Passed. Now create the federation Component
-    FederationComponent fedComp = new FederationComponent(object, objectName,
-        interfaceClass, notificationEmitter);
+    FederationComponent fedComp =
+        new FederationComponent(object, objectName, interfaceClass, notificationEmitter);
-        fedComp.refreshObjectState(true);// Fixes 46387
+      fedComp.refreshObjectState(true);// Fixes 46387
-    
+
-    CacheServerMXBean bean =  jmxAdapter.getClientServiceMXBean(serverPort);
+    CacheServerMXBean bean = jmxAdapter.getClientServiceMXBean(serverPort);
-    DiskStoreMXBean bean =  jmxAdapter.getLocalDiskStoreMXBean(diskStoreName);
+    DiskStoreMXBean bean = jmxAdapter.getLocalDiskStoreMXBean(diskStoreName);
-    LockServiceMXBean bean =  jmxAdapter.getLocalLockServiceMXBean(lockSreviceName);
+    LockServiceMXBean bean = jmxAdapter.getLocalLockServiceMXBean(lockSreviceName);
-  
+
-  
+
-    
+
-        afterRemoveProxy(objectName, removedObj.getInterfaceClass(), removedObj.getMBeanObject(), removedObj);
+        afterRemoveProxy(objectName, removedObj.getInterfaceClass(), removedObj.getMBeanObject(),
+            removedObj);
-    
+
-  
+
-    if(!isStartedAndOpen()){
+    if (!isStartedAndOpen()) {
-      throw new ManagementException("Could not start the manager because the gemfire property \"jmx-manager\" is false.");
+      throw new ManagementException(
+          "Could not start the manager because the gemfire property \"jmx-manager\" is false.");
-            ManagementStrings.Management_Service_MANAGER_ALREADY_RUNNING
-                .toLocalizedString());
+            ManagementStrings.Management_Service_MANAGER_ALREADY_RUNNING.toLocalizedString());
-  
+
-    return (GemFireCacheImpl)this.cache;
+    return (GemFireCacheImpl) this.cache;
-      } 
+      }
-  public DistributedLockServiceMXBean getDistributedLockServiceMXBean(
-      String lockServiceName) {
+  public DistributedLockServiceMXBean getDistributedLockServiceMXBean(String lockServiceName) {
-  
+
-  
+
-  public ObjectName getCacheServerMBeanName(int serverPort,DistributedMember member) {
-    return MBeanJMXAdapter.getClientServiceMBeanName(serverPort,member);
+  public ObjectName getCacheServerMBeanName(int serverPort, DistributedMember member) {
+    return MBeanJMXAdapter.getClientServiceMBeanName(serverPort, member);
-     return MBeanJMXAdapter.getDiskStoreMBeanName(member, diskName);
+    return MBeanJMXAdapter.getDiskStoreMBeanName(member, diskName);
-     return MBeanJMXAdapter.getDistributedLockServiceName(lockService);
+    return MBeanJMXAdapter.getDistributedLockServiceName(lockService);
-      return MBeanJMXAdapter.getDistributedRegionMbeanName(regionPath);
+    return MBeanJMXAdapter.getDistributedRegionMbeanName(regionPath);
-  public ObjectName getGatewaySenderMBeanName(DistributedMember member,
-      String gatwaySenderId) {
+  public ObjectName getGatewaySenderMBeanName(DistributedMember member, String gatwaySenderId) {
-  
+
-  public ObjectName getLockServiceMBeanName(DistributedMember member,
-      String lockServiceName) {
+  public ObjectName getLockServiceMBeanName(DistributedMember member, String lockServiceName) {
-  
+
-  
-  public boolean afterPseudoCreateProxy(ObjectName objectName, Class interfaceClass, Object proxyObject,
-      FederationComponent newVal) {    
+
+  public boolean afterPseudoCreateProxy(ObjectName objectName, Class interfaceClass,
+      Object proxyObject, FederationComponent newVal) {
-  
+
-  
-  
+
+
-  
-  public void logFine(String s){
+
+  public void logFine(String s) {
-  
+
-  public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected, String reason) {
+  public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected,
+      String reason) {
-  
-  public void quorumLost(Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {
+
+  public void quorumLost(Set<InternalDistributedMember> failures,
+      List<InternalDistributedMember> remaining) {
-  
-  
-  
+
+
+
-    private List<MembershipListener> membershipListeners = new CopyOnWriteArrayList<MembershipListener>();
+    private List<MembershipListener> membershipListeners =
+        new CopyOnWriteArrayList<MembershipListener>();
-     * Registers a listener that receives call backs when a member joins or
-     * leaves the distributed system.
+     * Registers a listener that receives call backs when a member joins or leaves the distributed
+     * system.
-    
+
-    universalListenerContainer.removeMembershipListener(listener);    
+    universalListenerContainer.removeMembershipListener(listener);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66