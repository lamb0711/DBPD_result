Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * Decodes the encoded String value using the default encoding, UTF-8.  It is assumed the String value was encoded
-   * with the URLEncoder using the UTF-8 encoding.  This method handles UnsupportedEncodingException by just returning
-   * the encodedValue.  Since it is possible for a String value to have been encoded multiple times, the String value
-   * is decoded until the value stops changing (in other words, until the value is completely decoded).
+   * Decodes the encoded String value using the default encoding, UTF-8. It is assumed the String
+   * value was encoded with the URLEncoder using the UTF-8 encoding. This method handles
+   * UnsupportedEncodingException by just returning the encodedValue. Since it is possible for a
+   * String value to have been encoded multiple times, the String value is decoded until the value
+   * stops changing (in other words, until the value is completely decoded).
+   * 
-   * @return the decoded value of the String.  If UTF-8 is unsupported, then the encodedValue is returned.
+   * @return the decoded value of the String. If UTF-8 is unsupported, then the encodedValue is
+   *         returned.
-   * Decodes the encoded String value using the specified encoding (such as UTF-8).  It is assumed the String value
-   * was encoded with the URLEncoder using the specified encoding.  This method handles UnsupportedEncodingException
-   * by just returning the encodedValue.  Since it is possible for a String value to have been encoded multiple times,
-   * the String value is decoded until the value stops changing (in other words, until the value is completely decoded).
+   * Decodes the encoded String value using the specified encoding (such as UTF-8). It is assumed
+   * the String value was encoded with the URLEncoder using the specified encoding. This method
+   * handles UnsupportedEncodingException by just returning the encodedValue. Since it is possible
+   * for a String value to have been encoded multiple times, the String value is decoded until the
+   * value stops changing (in other words, until the value is completely decoded).
+   * 
-   * @return the decoded value of the String.  If the encoding is unsupported, then the encodedValue is returned.
+   * @return the decoded value of the String. If the encoding is unsupported, then the encodedValue
+   *         is returned.
-        }
-        while (!encodedValue.equals(previousEncodedValue));
+        } while (!encodedValue.equals(previousEncodedValue));
-    }
-    catch (UnsupportedEncodingException ignore) {
+    } catch (UnsupportedEncodingException ignore) {
-   * Decodes the array of String values using the default encoding, UTF-8.  Each String value in the array is decoded
-   * individually and placed back in the array at the exact same index.  Each String value is decoded until the value
-   * stops changing (in other words, until the value is completely decoded).
+   * Decodes the array of String values using the default encoding, UTF-8. Each String value in the
+   * array is decoded individually and placed back in the array at the exact same index. Each String
+   * value is decoded until the value stops changing (in other words, until the value is completely
+   * decoded).
+   * 
-   * @return the same String array with each String value decoded using the default encoding of UTF-8.
+   * @return the same String array with each String value decoded using the default encoding of
+   *         UTF-8.
-   * Decodes the array of String values using the specified encoding (e.g. UTF-8).  Each String value in the array
-   * is decoded individually and placed back in the array at the exact same index.  Each String value is decoded until
-   * the value stops changing (in other words, until the value is completely decoded).
+   * Decodes the array of String values using the specified encoding (e.g. UTF-8). Each String value
+   * in the array is decoded individually and placed back in the array at the exact same index. Each
+   * String value is decoded until the value stops changing (in other words, until the value is
+   * completely decoded).
+   * 
-   * @return the same String array with each String value decoded using the specified encoding (e.g. UTF-8).
+   * @return the same String array with each String value decoded using the specified encoding (e.g.
+   *         UTF-8).
-   * Decodes the encoded String values in the Map using the default encoding, UTF-8.  The Map is structurally similar
-   * to a key/value data store but with the contents from an HTML form.  Keys with String values are searched
-   * and decoded, which then get repaired with the same Key.  The String value is decoded until the value stops changing
-   * (in other words, until the value is completely decoded).
+   * Decodes the encoded String values in the Map using the default encoding, UTF-8. The Map is
+   * structurally similar to a key/value data store but with the contents from an HTML form. Keys
+   * with String values are searched and decoded, which then get repaired with the same Key. The
+   * String value is decoded until the value stops changing (in other words, until the value is
+   * completely decoded).
+   * 
-   * Decodes the encoded String values in the Map using the specified encoding (e.g. UTF-8).  The Map is structurally
-   * similar to a key/value data store but with the contents from an HTML form.  Keys with String values are searched
-   * and decoded, which then get repaired with the same Key.  The String value is decoded until the value stops changing
-   * (in other words, until the value is completely decoded).
+   * Decodes the encoded String values in the Map using the specified encoding (e.g. UTF-8). The Map
+   * is structurally similar to a key/value data store but with the contents from an HTML form. Keys
+   * with String values are searched and decoded, which then get repaired with the same Key. The
+   * String value is decoded until the value stops changing (in other words, until the value is
+   * completely decoded).
+   * 
+   * 
-   * @return an encoded value of the String using the default encoding, UTF-8.  If UTF-8 is unsupported,
-   * then value is returned.
+   * @return an encoded value of the String using the default encoding, UTF-8. If UTF-8 is
+   *         unsupported, then value is returned.
+   * 
-   * @return an encoded value of the String using the specified encoding.  If the encoding is unsupported,
-   * then value is returned.
+   * @return an encoded value of the String using the specified encoding. If the encoding is
+   *         unsupported, then value is returned.
-    }
-    catch (UnsupportedEncodingException ignore) {
+    } catch (UnsupportedEncodingException ignore) {
-   * Encodes the array of String values using the default encoding, UTF-8.  Each String value in the array is encoded
-   * individually and placed back in the array at the exact same index.
+   * Encodes the array of String values using the default encoding, UTF-8. Each String value in the
+   * array is encoded individually and placed back in the array at the exact same index.
+   * 
-   * @return the same String array with each String value encoded using the default encoding of UTF-8.
+   * @return the same String array with each String value encoded using the default encoding of
+   *         UTF-8.
-   * Encodes the array of String values using the specified encoding (e.g. UTF-8).  Each String value in the array
-   * is encoded individually and placed back in the array at the exact same index.
+   * Encodes the array of String values using the specified encoding (e.g. UTF-8). Each String value
+   * in the array is encoded individually and placed back in the array at the exact same index.
+   * 
-   * @return the same String array with each String value encoded using the default encoding of UTF-8.
+   * @return the same String array with each String value encoded using the default encoding of
+   *         UTF-8.
-   * Encodes the String values in the Map using the default encoding, UTF-8.  The Map is structurally similar
-   * to a key/value data store but with the contents from an HTML form.  Keys with String values are searched
-   * and encoded, which then get repaired with the same Key.
+   * Encodes the String values in the Map using the default encoding, UTF-8. The Map is structurally
+   * similar to a key/value data store but with the contents from an HTML form. Keys with String
+   * values are searched and encoded, which then get repaired with the same Key.
+   * 
-   * Encodes the String values in the Map using the specified encoding (e.g. UTF-8).  The Map is structurally similar
-   * to a key/value data store but with the contents from an HTML form.  Keys with String values are searched
-   * and encoded, which then get repaired with the same Key.
+   * Encodes the String values in the Map using the specified encoding (e.g. UTF-8). The Map is
+   * structurally similar to a key/value data store but with the contents from an HTML form. Keys
+   * with String values are searched and encoded, which then get repaired with the same Key.
+   * 

UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66