Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Use this EnumConverter instead of SHL's EnumConverter. Added null check for
- * existingData in getAllPossibleValues 
+ * Use this EnumConverter instead of SHL's EnumConverter. Added null check for existingData in
+ * getAllPossibleValues
-	public Enum convertFromText(final String value, final Class<?> requiredType, final String optionContext) {
-		Class<Enum> enumClass = (Class<Enum>) requiredType;
-		return Enum.valueOf(enumClass, value);
-	}
+  public Enum convertFromText(final String value, final Class<?> requiredType,
+      final String optionContext) {
+    Class<Enum> enumClass = (Class<Enum>) requiredType;
+    return Enum.valueOf(enumClass, value);
+  }
-	public boolean getAllPossibleValues(final List<Completion> completions, 
-	    final Class<?> requiredType, final String existingData, 
-	    final String optionContext, final MethodTarget target) {
-		Class<Enum> enumClass = (Class<Enum>) requiredType;
-		for (Enum enumValue : enumClass.getEnumConstants()) {
-			String candidate = enumValue.name();
-      // GemFire/gfsh addition - check 'existingData == null'. GfshParser can 
-			// pass existingData as null  
-      if ("".equals(existingData) || existingData == null
-          || candidate.startsWith(existingData)
+  public boolean getAllPossibleValues(final List<Completion> completions,
+      final Class<?> requiredType, final String existingData, final String optionContext,
+      final MethodTarget target) {
+    Class<Enum> enumClass = (Class<Enum>) requiredType;
+    for (Enum enumValue : enumClass.getEnumConstants()) {
+      String candidate = enumValue.name();
+      // GemFire/gfsh addition - check 'existingData == null'. GfshParser can
+      // pass existingData as null
+      if ("".equals(existingData) || existingData == null || candidate.startsWith(existingData)
-				completions.add(new Completion(candidate));
-			}
-		}
-		return true;
-	}
+        completions.add(new Completion(candidate));
+      }
+    }
+    return true;
+  }
-	public boolean supports(final Class<?> requiredType, final String optionContext) {
-		return Enum.class.isAssignableFrom(requiredType);
-	}
+  public boolean supports(final Class<?> requiredType, final String optionContext) {
+    return Enum.class.isAssignableFrom(requiredType);
+  }

