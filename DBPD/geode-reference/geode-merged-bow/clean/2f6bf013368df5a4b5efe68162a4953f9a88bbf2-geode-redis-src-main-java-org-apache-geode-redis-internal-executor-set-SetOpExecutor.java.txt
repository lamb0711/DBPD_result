GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

-import java.util.HashMap;
-import java.util.Map;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-  @SuppressWarnings("unchecked")
+
-    RegionProvider rC = context.getRegionProvider();
+
+    RegionProvider regionProvider = context.getRegionProvider();
-    if (isStorage())
+    if (isStorage()) {
+    }
-    if (!isStorage())
-      checkDataType(firstSetKey, RedisDataType.REDIS_SET, context);
-    Region<ByteArrayWrapper, Boolean> region =
-        (Region<ByteArrayWrapper, Boolean>) rC.getRegion(firstSetKey);
-    Set<ByteArrayWrapper> firstSet = null;
-    if (region != null) {
-      firstSet = new HashSet<ByteArrayWrapper>(region.keySet());
+    if (destination != null) {
+      try (AutoCloseableLock regionLock = withRegionLock(context, destination)) {
+        doActualSetOperation(command, context, commandElems, setsStartIndex, regionProvider,
+            destination, firstSetKey);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        command.setResponse(
+            Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      } catch (TimeoutException e) {
+        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+            "Timeout acquiring lock. Please try again."));
+      }
+    } else {
+      doActualSetOperation(command, context, commandElems, setsStartIndex, regionProvider,
+          destination, firstSetKey);
-    ArrayList<Set<ByteArrayWrapper>> setList = new ArrayList<Set<ByteArrayWrapper>>();
+  }
+
+  private boolean doActualSetOperation(Command command, ExecutionHandlerContext context,
+      List<byte[]> commandElems, int setsStartIndex,
+      RegionProvider regionProvider, ByteArrayWrapper destination,
+      ByteArrayWrapper firstSetKey) {
+    Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = this.getRegion(context);
+    Set<ByteArrayWrapper> firstSet = region.get(firstSetKey);
+
+    List<Set<ByteArrayWrapper>> setList = new ArrayList<>();
-      checkDataType(key, RedisDataType.REDIS_SET, context);
-      region = (Region<ByteArrayWrapper, Boolean>) rC.getRegion(key);
-      if (region != null)
-        setList.add(region.keySet());
-      else if (this instanceof SInterExecutor)
-        setList.add(null);
-    }
-    if (setList.isEmpty()) {
-      if (isStorage()) {
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), 0));
-        context.getRegionProvider().removeKey(destination);
-      } else {
-        respondBulkStrings(command, context, firstSet);
+
+      Set<ByteArrayWrapper> entry = region.get(key);
+      if (entry != null) {
+        setList.add(entry);
+      } else if (this instanceof SInterExecutor) {
+        setList.add(new HashSet<>());
-      return;
+    }
+
+    if (setList.isEmpty() && !isStorage()) {
+      respondBulkStrings(command, context, firstSet);
+      return true;
-      Region<ByteArrayWrapper, Boolean> newRegion = null; // (Region<ByteArrayWrapper, Boolean>)
-                                                          // rC.getRegion(destination);
-      rC.removeKey(destination);
+      Set<ByteArrayWrapper> newSet = null;
+      regionProvider.removeKey(destination);
-        Map<ByteArrayWrapper, Boolean> map = new HashMap<ByteArrayWrapper, Boolean>();
-        for (ByteArrayWrapper entry : resultSet)
-          map.put(entry, Boolean.TRUE);
-        if (!map.isEmpty()) {
-          newRegion = (Region<ByteArrayWrapper, Boolean>) rC.getOrCreateRegion(destination,
-              RedisDataType.REDIS_SET, context);
-          newRegion.putAll(map);
+        Set<ByteArrayWrapper> set = new HashSet<>();
+        for (ByteArrayWrapper entry : resultSet) {
+          set.add(entry);
+        }
+        if (!set.isEmpty()) {
+          newSet = new HashSet<>(set);
+          region.put(destination, newSet);
+          context.getKeyRegistrar().register(destination, RedisDataType.REDIS_SET);
-            .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
+            .setResponse(
+                Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
-      if (resultSet == null || resultSet.isEmpty())
+      if (resultSet == null || resultSet.isEmpty()) {
-      else
+      } else {
+      }
+    return false;

MOV26 MOV26 UPD40 UPD40 INS31 INS31 MOV78 MOV83 MOV39 MOV42 INS44 INS44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV25 MOV60 MOV60 MOV25 MOV60 INS25 INS74 INS42 INS39 INS42 INS43 INS42 MOV43 INS42 MOV43 INS42 INS60 MOV60 MOV60 INS24 MOV25 MOV60 MOV25 INS41 INS42 INS42 INS8 INS27 INS8 INS8 INS43 INS5 INS42 UPD74 MOV74 INS59 UPD74 MOV74 MOV58 MOV27 MOV37 INS8 INS27 INS9 UPD42 MOV21 INS42 INS33 INS54 MOV21 INS42 INS39 INS85 INS43 UPD43 INS42 INS32 INS32 INS43 MOV60 INS60 MOV25 MOV32 MOV38 INS41 INS58 INS8 INS12 INS12 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS74 INS59 INS8 INS9 UPD74 INS8 INS8 INS43 INS59 INS21 INS44 INS8 INS44 MOV8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV43 UPD43 MOV43 MOV43 INS42 INS32 UPD42 INS21 INS8 UPD43 UPD43 UPD42 UPD42 MOV21 MOV21 UPD42 MOV42 INS42 INS32 INS32 INS43 INS42 INS21 MOV21 INS43 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS21 UPD42 UPD42 UPD74 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS32 INS42 UPD42 MOV42 MOV32 UPD43 UPD42 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS32 MOV14 UPD42 UPD74 MOV32 UPD42 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS45 UPD42 INS45 UPD74 UPD43 UPD42 UPD42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 INS40 INS42 INS42 UPD42 INS74 INS42 INS42 UPD42 MOV42 UPD43 MOV43 UPD42 DEL42 DEL7 DEL34 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL40 DEL33 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL33 DEL21 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL40 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL32 DEL11 DEL7 DEL21 DEL42 DEL45 DEL79 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL25 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL43 DEL74 DEL32 DEL11 DEL7 DEL21 DEL8 DEL24 DEL41 DEL8 DEL25 DEL8 DEL31