jgroups source is now removed from asf branch GEODE-77 and is a downloaded dependency.  Able to start/stop a locator and a server via gfsh but there is no HA or authentication in the membership system.

-package com.gemstone.gemfire.distributed.internal.membership.jgroup;
+package com.gemstone.gemfire.distributed.internal.membership.gms.messenger;
+import java.util.Collection;
+import java.util.List;
-import java.util.Vector;
-import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.distributed.internal.membership.InternalDistributedMember;
+import com.gemstone.gemfire.distributed.internal.membership.NetView;
-import com.gemstone.org.jgroups.View;
-import com.gemstone.org.jgroups.protocols.pbcast.GMS;
-import com.gemstone.org.jgroups.stack.IpAddress;
-public class QuorumCheckerImpl implements QuorumChecker {
+public class JGroupsQuorumChecker implements QuorumChecker {
-  private View lastView;
+  private NetView lastView;
-  private Set<IpAddress> receivedAcks;
+  private Set<InternalDistributedMember> receivedAcks;
-  private Map<SocketAddress, IpAddress> addressConversionMap;
+  private Map<SocketAddress, InternalDistributedMember> addressConversionMap;
-      Vector<IpAddress> members = this.lastView.getMembers();
-      for (int i=0; i<members.size(); i++) {
-        IpAddress addr = members.get(i);
+      List<InternalDistributedMember> members = this.lastView.getMembers();
+      for (InternalDistributedMember addr: members) {
-          SocketAddress sockaddr = new InetSocketAddress(addr.getIpAddress(), addr.getPort());
+          SocketAddress sockaddr = new InetSocketAddress(addr.getNetMember().getInetAddress(), addr.getPort());
-      int weight = GMS.getWeight(this.lastView.getMembers(), this.lastView.getLeadMember());
-      int ackedWeight = GMS.getWeight(receivedAcks, this.lastView.getLeadMember());
+      int weight = getWeight(this.lastView.getMembers(), this.lastView.getLeadMember());
+      int ackedWeight = getWeight(receivedAcks, this.lastView.getLeadMember());
+  private int getWeight(Collection<InternalDistributedMember> idms, InternalDistributedMember leader) {
+    int weight = 0;
+    for (InternalDistributedMember mbr: idms) {
+      int thisWeight = mbr.getNetMember().getMemberWeight();
+      if (mbr.getVmKind() == 10 /* NORMAL_DM_KIND */) {
+        thisWeight += 10;
+        if (leader != null && mbr.equals(leader)) {
+          thisWeight += 5;
+        }
+      } else if (mbr.getNetMember().preferredForCoordinator()) {
+        thisWeight += 3;
+      }
+      weight += thisWeight;
+    }
+    return weight;
+  }
+
-  protected QuorumCheckerImpl(View jgView, int partitionThreshold, DatagramSocket jgSock) {
+  public JGroupsQuorumChecker(NetView jgView, int partitionThreshold, DatagramSocket jgSock) {
-  protected void initialize() {
+  public void initialize() {
-    receivedAcks = new ConcurrentHashSet<IpAddress>(this.lastView.size());
-    addressConversionMap = new ConcurrentHashMap<SocketAddress, IpAddress>(this.lastView.size());
-    Vector<IpAddress> members = this.lastView.getMembers();
-    for (int i=0; i<members.size(); i++) {
-      IpAddress addr = members.get(i);
-      SocketAddress sockaddr = new InetSocketAddress(addr.getIpAddress(), addr.getPort());
+    receivedAcks = new ConcurrentHashSet<InternalDistributedMember>(this.lastView.size());
+    addressConversionMap = new ConcurrentHashMap<SocketAddress, InternalDistributedMember>(this.lastView.size());
+    List<InternalDistributedMember> members = this.lastView.getMembers();
+    for (InternalDistributedMember addr: members) {
+      SocketAddress sockaddr = new InetSocketAddress(addr.getNetMember().getInetAddress(), addr.getPort());
-            boolean sleep = QuorumCheckerImpl.this.suspended;
+            boolean sleep = JGroupsQuorumChecker.this.suspended;
-    IpAddress memberAddr = addressConversionMap.get(senderSockAddr);
+    InternalDistributedMember memberAddr = addressConversionMap.get(senderSockAddr);
-  protected void teardown() {
+  public void teardown() {

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 INS31 UPD43 UPD74 UPD74 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 UPD42 UPD83 UPD83 UPD42 UPD43 UPD43 INS74 INS42 INS43 INS42 INS60 INS70 INS41 UPD43 INS70 UPD42 UPD42 INS43 INS43 INS42 INS39 INS59 INS44 INS42 INS8 INS42 UPD42 UPD74 INS44 INS42 MOV8 UPD43 INS70 INS42 INS42 INS42 INS34 INS43 INS42 INS60 INS25 INS21 UPD43 UPD43 INS43 INS42 UPD42 UPD74 INS44 INS42 MOV8 INS42 INS39 INS59 INS27 INS8 INS25 INS7 UPD74 UPD74 UPD42 UPD42 INS42 UPD43 UPD43 INS43 INS42 INS42 INS32 INS32 INS34 INS21 INS25 INS32 INS8 INS42 INS42 UPD43 UPD43 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS7 INS27 INS8 INS32 INS42 INS21 UPD42 UPD42 INS42 INS42 INS42 INS34 INS27 INS32 INS21 INS42 INS42 INS7 INS32 UPD42 INS42 INS33 INS42 INS42 INS42 INS7 INS42 INS34 MOV42 INS42 INS42 INS34 INS32 UPD42 MOV42 INS42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24