GEODE-5971: refactor misc commands to use ResultModel (#3363)


+import java.util.Objects;
-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class ListIndexCommand extends InternalGfshCommand {
+public class ListIndexCommand extends GfshCommand {
-  public Result listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS,
+  public ResultModel listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS,
-    return toTabularResult(getIndexListing(), showStats);
-  }
-
-  private Result toTabularResult(final List<IndexDetails> indexDetailsList,
-      final boolean showStats) {
-    if (!indexDetailsList.isEmpty()) {
-      final TabularResultData indexData = ResultBuilder.createTabularResultData();
-
-      for (final IndexDetails indexDetails : indexDetailsList) {
-        indexData.accumulate("Member Name",
-            StringUtils.defaultString(indexDetails.getMemberName()));
-        indexData.accumulate("Member ID", indexDetails.getMemberId());
-        indexData.accumulate("Region Path", indexDetails.getRegionPath());
-        indexData.accumulate("Name", indexDetails.getIndexName());
-        if (indexDetails.getIndexType() == null) {
-          indexData.accumulate("Type", "");
-        } else {
-          indexData.accumulate("Type", indexDetails.getIndexType().getName());
-        }
-        indexData.accumulate("Indexed Expression", indexDetails.getIndexedExpression());
-        indexData.accumulate("From Clause", indexDetails.getFromClause());
-        indexData.accumulate("Valid Index", indexDetails.getIsValid());
-
-        if (showStats) {
-          final IndexStatisticsDetailsAdapter adapter =
-              new IndexStatisticsDetailsAdapter(indexDetails.getIndexStatisticsDetails());
-
-          indexData.accumulate("Uses", adapter.getTotalUses());
-          indexData.accumulate("Updates", adapter.getNumberOfUpdates());
-          indexData.accumulate("Update Time", adapter.getTotalUpdateTime());
-          indexData.accumulate("Keys", adapter.getNumberOfKeys());
-          indexData.accumulate("Values", adapter.getNumberOfValues());
-        }
-      }
-
-      return ResultBuilder.buildResult(indexData);
-    } else {
-      return ResultBuilder.createInfoResult(CliStrings.LIST_INDEX__INDEXES_NOT_FOUND_MESSAGE);
+    ResultModel result = new ResultModel();
+    TabularResultModel indexTable = result.addTable("indices");
+    final List<IndexDetails> indexDetailsList = getIndexListing();
+    if (indexDetailsList.isEmpty()) {
+      return ResultModel.createInfo(CliStrings.LIST_INDEX__INDEXES_NOT_FOUND_MESSAGE);
+
+    for (final IndexDetails indexDetails : indexDetailsList) {
+      indexTable.accumulate("Member Name",
+          StringUtils.defaultString(indexDetails.getMemberName()));
+      indexTable.accumulate("Member ID", indexDetails.getMemberId());
+      indexTable.accumulate("Region Path", indexDetails.getRegionPath());
+      indexTable.accumulate("Name", indexDetails.getIndexName());
+      if (indexDetails.getIndexType() == null) {
+        indexTable.accumulate("Type", "");
+      } else {
+        indexTable.accumulate("Type", indexDetails.getIndexType().getName());
+      }
+      indexTable.accumulate("Indexed Expression", indexDetails.getIndexedExpression());
+      indexTable.accumulate("From Clause", indexDetails.getFromClause());
+      indexTable.accumulate("Valid Index", indexDetails.getIsValid() + "");
+
+      if (showStats) {
+        final IndexStatisticsDetailsAdapter adapter =
+            new IndexStatisticsDetailsAdapter(indexDetails.getIndexStatisticsDetails());
+
+        indexTable.accumulate("Uses", adapter.getTotalUses());
+        indexTable.accumulate("Updates", adapter.getNumberOfUpdates());
+        indexTable.accumulate("Update Time", adapter.getTotalUpdateTime());
+        indexTable.accumulate("Keys", adapter.getNumberOfKeys());
+        indexTable.accumulate("Values", adapter.getNumberOfValues());
+      }
+    }
+
+    return result;
-      return getIndexStatisticsDetails() != null
-          ? StringUtils.defaultString(getIndexStatisticsDetails().getNumberOfKeys()) : "";
+      return (getIndexStatisticsDetails() != null)
+          ? Objects.toString(getIndexStatisticsDetails().getNumberOfKeys(), "") : "";
-          ? StringUtils.defaultString(getIndexStatisticsDetails().getNumberOfUpdates()) : "";
+          ? Objects.toString(getIndexStatisticsDetails().getNumberOfUpdates(), "") : "";
-          ? StringUtils.defaultString(getIndexStatisticsDetails().getNumberOfValues()) : "";
+          ? Objects.toString(getIndexStatisticsDetails().getNumberOfValues(), "") : "";
-          ? StringUtils.defaultString(getIndexStatisticsDetails().getTotalUpdateTime()) : "";
+          ? Objects.toString(getIndexStatisticsDetails().getTotalUpdateTime(), "") : "";
-          ? StringUtils.defaultString(getIndexStatisticsDetails().getTotalUses()) : "";
+          ? Objects.toString(getIndexStatisticsDetails().getTotalUses(), "") : "";

INS26 INS40 UPD40 UPD40 UPD40 UPD43 UPD42 MOV77 MOV77 MOV77 UPD83 UPD43 INS42 MOV44 MOV8 UPD42 INS60 INS60 INS25 INS41 INS43 INS59 UPD43 INS83 MOV74 INS59 MOV32 INS8 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 MOV32 MOV41 INS43 UPD42 UPD42 INS45 INS36 INS42 UPD42 UPD42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS27 MOV27 UPD42 UPD42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 MOV32 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL83 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL38 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL25 DEL8