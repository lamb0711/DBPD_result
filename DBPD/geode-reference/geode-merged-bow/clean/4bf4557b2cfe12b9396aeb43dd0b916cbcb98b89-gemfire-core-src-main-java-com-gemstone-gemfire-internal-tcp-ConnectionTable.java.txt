Revert "Revert "Removing TCPConduit's Stub ID class""

This reverts commit 507f2f3a905e70fcabed9b83d4dc966ef3e9e6ec.

+import com.gemstone.gemfire.distributed.DistributedMember;
-    by generic Stubs.</p>
+    by generic DistributedMembers.</p>
-   * @param id Stub on which the connection is created
+   * @param id DistributedMember on which the connection is created
-  private Connection handleNewPendingConnection(Stub id, boolean sharedResource,
+  private Connection handleNewPendingConnection(DistributedMember id, boolean sharedResource,
-                                    id, this.owner.getMemberForStub(id, false),
+                                    id,
-   * @param id the Stub on which we are creating a connection
+   * @param id the DistributedMember on which we are creating a connection
-  private Connection getUnorderedOrConserveSockets(Stub id, 
+  private Connection getUnorderedOrConserveSockets(DistributedMember id, 
-  Connection getOrderedAndOwned(Stub id, long startTime, long ackTimeout, long ackSATimeout) 
+  Connection getOrderedAndOwned(DistributedMember id, long startTime, long ackTimeout, long ackSATimeout) 
-        this.owner.getMemberForStub(id, false), false /* shared */,
+        false /* shared */,
-      // First connection for this Stub.  Make sure list for this
+      // First connection for this DistributedMember.  Make sure list for this
-   * @param id the Stub on which to create the connection
+   * @param id the DistributedMember on which to create the connection
-  protected Connection get(Stub id, boolean preserveOrder,
+  protected Connection get(DistributedMember id, boolean preserveOrder,
-  protected boolean isEndpointShuttingDown(Stub stub) {
-    return this.owner.getMemberForStub(stub, true) == null;
+  protected boolean isEndpointShuttingDown(DistributedMember id) {
+    return giveUpOnMember(owner.getDM().getMembershipManager(), id);
+  protected boolean giveUpOnMember(MembershipManager mgr, DistributedMember remoteAddr) {
+    return !mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress();
+  }
+
-  protected void removeEndpoint(Stub stub, String reason) {
+  protected void removeEndpoint(DistributedMember stub, String reason) {
-  protected void removeEndpoint(Stub stub, String reason, boolean notifyDisconnect) {
+  protected void removeEndpoint(DistributedMember memberID, String reason, boolean notifyDisconnect) {
-      if (this.orderedConnectionMap.get(stub) != null)
+      if (this.orderedConnectionMap.get(memberID) != null)
-        if (this.unorderedConnectionMap.get(stub) != null)
+        if (this.unorderedConnectionMap.get(memberID) != null)
-        ArrayList al = (ArrayList)cm.get(stub);
+        ArrayList al = (ArrayList)cm.get(memberID);
-        Object c = this.orderedConnectionMap.remove(stub);
+        Object c = this.orderedConnectionMap.remove(memberID);
-        Object c = this.unorderedConnectionMap.remove(stub);
+        Object c = this.unorderedConnectionMap.remove(memberID);
-          ArrayList al = (ArrayList)cm.remove(stub);
+          ArrayList al = (ArrayList)cm.remove(memberID);
-          if (info.peerAddress.equals(stub.getInetAddress())) {
+          if (info.peerAddress.equals(((InternalDistributedMember)memberID).getInetAddress())) {
-            logger.debug("caught exception while trying to close connecting socket for {}", stub, e);
+            logger.debug("caught exception while trying to close connecting socket for {}", memberID, e);
-          if (stub.equals(con.getRemoteId())) {
+          if (memberID.equals(con.getRemoteAddress())) {
-      // call memberDeparted after doing the closeCon calls
-      // so it can recursively call removeEndpoint
-        owner.getMemberForStub(stub, false);
+        // Before the removal of TCPConduit Stub addresses this used
+        // to call MembershipManager.getMemberForStub, which checked
+        // for a shutdown in progress and threw this exception:
+        if (owner.getDM().shutdownInProgress()) {
+          throw new DistributedSystemDisconnectedException("Shutdown in progress", owner.getDM().getMembershipManager().getShutdownCause());
+        }
-  protected boolean hasReceiversFor(Stub endPoint) {
+  protected boolean hasReceiversFor(DistributedMember endPoint) {
-        if (endPoint.equals(con.getRemoteId())) {
+        if (endPoint.equals(con.getRemoteAddress())) {
-  private static void removeFromThreadConMap(ConcurrentMap cm, Stub stub, Connection c) {
+  private static void removeFromThreadConMap(ConcurrentMap cm, DistributedMember stub, Connection c) {
-  protected void removeThreadConnection(Stub stub, Connection c) {
+  protected void removeThreadConnection(DistributedMember stub, Connection c) {
-  void removeSharedConnection(String reason, Stub stub, boolean ordered, Connection c) {
+  void removeSharedConnection(String reason, DistributedMember stub, boolean ordered, Connection c) {
-         Stub stub = (Stub)me.getKey();
+         DistributedMember stub = (DistributedMember)me.getKey();
-  protected void getThreadOwnedOrderedConnectionState(Stub member,
+  protected void getThreadOwnedOrderedConnectionState(DistributedMember member,
-  protected void waitForThreadOwnedOrderedConnectionState(Stub member,
+  protected void waitForThreadOwnedOrderedConnectionState(DistributedMember member,
-          && member.equals(con.getRemoteId())) {
+          && member.equals(con.getRemoteAddress())) {
-                  con.getRemoteId(), con.getUniqueId(), con.getMessagesReceived(), count);
+                  con.getRemoteAddress(), con.getUniqueId(), con.getMessagesReceived(), count);
-    private final Stub id;
+    private final DistributedMember id;
-    public PendingConnection(boolean preserveOrder, Stub id) {
+    public PendingConnection(boolean preserveOrder, DistributedMember id) {
-      InternalDistributedMember targetMember = null;
+      DistributedMember targetMember = null;
-        targetMember =
-          ((GMSMembershipManager)mgr).getMemberForStub(this.id, false);
+        targetMember = this.id;

INS26 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS8 UPD66 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 INS43 INS42 INS43 INS42 INS41 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD66 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD42 INS32 INS42 INS42 INS27 UPD42 UPD42 MOV22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS42 INS32 UPD42 MOV42 INS38 INS32 INS32 UPD42 UPD43 MOV9 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 MOV21 MOV22 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS25 MOV22 UPD42 MOV21 MOV43 INS32 MOV8 MOV22 MOV43 INS32 INS42 INS53 UPD42 MOV22 UPD42 MOV43 UPD42 UPD42 INS42 INS42 INS14 UPD42 UPD43 UPD42 MOV43 UPD42 INS43 INS45 INS32 UPD42 UPD42 INS36 UPD42 INS42 INS32 UPD42 MOV42 UPD43 INS11 INS32 UPD42 MOV42 UPD42 INS43 INS42 UPD42 MOV42 INS42 INS42 UPD42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL9 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL9 DEL52 DEL42 DEL22 DEL9 DEL32 DEL33 DEL27 DEL42 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL9 DEL32