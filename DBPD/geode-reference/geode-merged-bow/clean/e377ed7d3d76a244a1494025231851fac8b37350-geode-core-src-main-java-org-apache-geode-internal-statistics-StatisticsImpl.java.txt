GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.
-  private final StatisticsTypeImpl type;
+  protected final StatisticsTypeImpl type;
-    setInt(nameToDescriptor(name), value);
+    setLong(name, value);
-    setInt(getIntId(descriptor), value);
+    setLong(descriptor, value);
-    if (isOpen()) {
-      _setInt(id, value);
-    }
+    setLong(id, value);
-    return getInt(nameToDescriptor(name));
+    return (int) getLong(name);
-    try {
-      return getInt(getIntId(descriptor));
-    } catch (IllegalArgumentException e) {
-      if (descriptor.getType() == long.class) {
-        return (int) getLong(descriptor);
-      }
-      throw e;
-    }
+    return (int) getLong(descriptor);
-    if (isOpen()) {
-      return _getInt(id);
-    } else {
-      return 0;
-    }
+    return (int) getLong(id);
+      if (!type.isValidLongId(id)) {
+        throw new IllegalArgumentException("Id, " + id + ", is not a long statistic.");
+      }
-    incInt(nameToDescriptor(name), delta);
+    incLong(name, delta);
-    incInt(getIntId(descriptor), delta);
+    incLong(descriptor, delta);
-    if (isOpen()) {
-      _incInt(id, delta);
-    }
+    incLong(id, delta);
-    if (id >= type.getIntStatCount()) {
+    // setIntSupplier is deprecated but it is too much of a pain to wrap the IntSupplier
+    // in a LongSupplier. So the implementation continues to store IntSupplier instances
+    // but all the checks and actions are long based instead of int based.
+    if (!type.isValidLongId(id)) {
-    return setIntSupplier(getIntId(descriptor), supplier);
+    return setIntSupplier(getLongId(descriptor), supplier);
-    if (id >= type.getLongStatCount()) {
+    if (!type.isValidLongId(id)) {
-    if (id >= type.getDoubleStatCount()) {
+    if (!type.isValidDoubleId(id)) {
-   * Sets the value of a statistic of type {@code int} at the given offset, but performs no
+   * Sets the value of a statistic of type {@code long} at the given id, but performs no
-  protected abstract void _setInt(int offset, int value);
+  protected abstract void _setLong(int id, long value);
-   * Sets the value of a statistic of type {@code long} at the given offset, but performs no
+   * Sets the value of a statistic of type {@code double} at the given id, but performs no
-  protected abstract void _setLong(int offset, long value);
+  protected abstract void _setDouble(int id, double value);
-   * Sets the value of a statistic of type {@code double} at the given offset, but performs no
-   * type checking.
-   */
-  protected abstract void _setDouble(int offset, double value);
-
-  /**
-   * Returns the value of the statistic of type {@code int} at the given offset, but performs
+   * Returns the value of the statistic of type {@code long} at the given id, but performs
-  protected abstract int _getInt(int offset);
+  protected abstract long _getLong(int id);
-   * Returns the value of the statistic of type {@code long} at the given offset, but performs
-   * no type checking.
-   */
-  protected abstract long _getLong(int offset);
-
-  /**
-   * Returns the value of the statistic of type {@code double} at the given offset, but
+   * Returns the value of the statistic of type {@code double} at the given id, but
-  protected abstract double _getDouble(int offset);
+  protected abstract double _getDouble(int id);
-   * Increments the value of the statistic of type {@code int} at the given offset by a given
+   * Increments the value of the statistic of type {@code long} at the given id by a given
-  protected abstract void _incInt(int offset, int delta);
+  protected abstract void _incLong(int id, long delta);
-   * Increments the value of the statistic of type {@code long} at the given offset by a given
-   * amount, but performs no type checking.
-   */
-  protected abstract void _incLong(int offset, long delta);
-
-  /**
-   * Increments the value of the statistic of type {@code double} at the given offset by a
+   * Increments the value of the statistic of type {@code double} at the given id by a
-  protected abstract void _incDouble(int offset, double delta);
+  protected abstract void _incDouble(int id, double delta);
-        _setInt(entry.getKey(), entry.getValue().getAsInt());
+        _setLong(entry.getKey(), entry.getValue().getAsInt());
-      case StatisticDescriptorImpl.INT:
-        return _getInt(descriptor.getId());
-      case StatisticDescriptorImpl.INT:
-        return _getInt(descriptor.getId());
-  private static int getIntId(StatisticDescriptor descriptor) {
-    return ((StatisticDescriptorImpl) descriptor).checkInt();
-  }
-

UPD83 INS8 MOV8 INS8 MOV78 MOV44 MOV78 MOV44 MOV78 MOV44 INS8 MOV21 MOV41 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV49 MOV49 INS11 INS11 INS8 INS38 INS38 INS38 MOV65 UPD66 MOV65 UPD66 MOV65 UPD66 MOV65 UPD66 MOV65 UPD66 MOV65 UPD66 UPD42 MOV42 UPD42 MOV42 UPD42 INS39 INS32 INS39 INS32 INS25 MOV41 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS38 MOV8 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS32 INS53 INS42 INS42 INS42 INS14 MOV43 INS27 UPD42 INS45 INS42 INS45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL44 DEL42 DEL42 DEL32 DEL39 DEL57 DEL27 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL32 DEL42 DEL32 DEL8 DEL34 DEL41 DEL8 DEL25 DEL8 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL32 DEL27 DEL42 DEL32 DEL27 DEL42 DEL32 DEL27 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL31 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL40 DEL49 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL40 DEL49 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL31