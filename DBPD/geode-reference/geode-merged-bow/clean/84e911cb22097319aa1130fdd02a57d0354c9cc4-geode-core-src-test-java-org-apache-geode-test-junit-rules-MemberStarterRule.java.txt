GEODE-5295: Improve member WaitUntilX methods (#2039)

* Improve error reporting in the event of a WaitUntil timeout.
* Renamed methods to avoid future developer error similar to GEODE-5299

+import static org.hamcrest.CoreMatchers.notNullValue;
-import java.util.Map;
+import java.util.List;
+import java.util.Objects;
+import java.util.function.Consumer;
+import java.util.function.Function;
+import java.util.function.Supplier;
+import org.assertj.core.api.Assertions;
+import org.awaitility.core.ConditionTimeoutException;
+  public static void setWaitUntilTimeout(int waitUntilTimeout) {
+    WAIT_UNTIL_TIMEOUT = waitUntilTimeout;
+  }
+
+  private static int WAIT_UNTIL_TIMEOUT = 30;
+
-  public void waitTillRegionIsReadyOnServers(String regionName, int serverCount) {
-    await().atMost(30, TimeUnit.SECONDS).until(() -> getRegionMBean(regionName) != null);
-    await().atMost(30, TimeUnit.SECONDS)
-        .until(() -> getRegionMBean(regionName).getMembers() != null
-            && getRegionMBean(regionName).getMembers().length == serverCount);
+  public void waitUntilRegionIsReadyOnExactlyThisManyServers(String regionName,
+      int exactServerCount) throws Exception {
+    // First wait until the region mbean is not null...
+    waitUntilEqual(
+        () -> getRegionMBean(regionName),
+        Objects::nonNull,
+        true,
+        String.format("Expecting to find an mbean for region '%s'", regionName),
+        WAIT_UNTIL_TIMEOUT, TimeUnit.SECONDS);
+
+    // Now actually wait for the members to receive the region
+    String assertionConditionDescription = String.format(
+        "Expecting region '%s' to be found on exactly %d servers", regionName, exactServerCount);
+    waitUntilSatisfied(
+        () -> Arrays.asList(getRegionMBean(regionName).getMembers()),
+        Function.identity(),
+        members -> Assertions.assertThat(members).isNotNull().hasSize(exactServerCount),
+        assertionConditionDescription,
+        WAIT_UNTIL_TIMEOUT, TimeUnit.SECONDS);
-  private long getDiskStoreCount(String diskStoreName) {
+  public void waitUntilGatewaySendersAreReadyOnExactlyThisManyServers(int exactGatewaySenderCount)
+      throws Exception {
-    Map<String, String[]> diskstores = dsMXBean.listMemberDiskstore();
-    long count =
-        diskstores.values().stream().filter(x -> ArrayUtils.contains(x, diskStoreName)).count();
+    String predicateDescription = String.format(
+        "Expecting to find exactly %d gateway sender beans.", exactGatewaySenderCount);
-    return count;
+    waitUntilEqual(() -> dsMXBean.listGatewaySenderObjectNames(),
+        array -> array.length, exactGatewaySenderCount, predicateDescription, WAIT_UNTIL_TIMEOUT,
+        TimeUnit.SECONDS);
-  public void waitTilGatewaySendersAreReady(int expectedGatewayObjectCount) throws Exception {
-    DistributedSystemMXBean dsMXBean = getManagementService().getDistributedSystemMXBean();
-    await().atMost(30, TimeUnit.SECONDS)
-        .until(() -> assertThat(dsMXBean.listGatewaySenderObjectNames().length,
-            is(expectedGatewayObjectCount)));
+  public void waitUntilDiskStoreIsReadyOnExactlyThisManyServers(String diskStoreName,
+      int exactServerCount) throws Exception {
+    final Supplier<DistributedSystemMXBean> distributedSystemMXBeanSupplier =
+        () -> getManagementService().getDistributedSystemMXBean();
+
+    waitUntilSatisfied(distributedSystemMXBeanSupplier,
+        Function.identity(),
+        bean -> assertThat(bean, notNullValue()),
+        "Distributed System MXBean should not be null",
+        WAIT_UNTIL_TIMEOUT, TimeUnit.SECONDS);
+
+    DistributedSystemMXBean dsMXBean = distributedSystemMXBeanSupplier.get();
+
+    String predicateDescription = String.format(
+        "Expecting exactly %d servers to present mbeans for a disk store with name %s.",
+        exactServerCount, diskStoreName);
+    Supplier<List<String[]>> diskStoreSupplier = () -> dsMXBean.listMemberDiskstore()
+        .values().stream().filter(x1 -> ArrayUtils.contains(x1, diskStoreName))
+        .collect(Collectors.toList());
+
+    waitUntilEqual(diskStoreSupplier,
+        x -> x.size(),
+        exactServerCount,
+        predicateDescription,
+        WAIT_UNTIL_TIMEOUT, TimeUnit.SECONDS);
-  public void waitTillDiskStoreIsReady(String diskstoreName, int serverCount) {
-    await().atMost(30, TimeUnit.SECONDS)
-        .until(() -> getDiskStoreCount(diskstoreName) == serverCount);
+  public void waitUntilAsyncEventQueuesAreReadyOnExactlyThisManyServers(String queueId,
+      int exactServerCount)
+      throws Exception {
+    String examinerDescription = String.format(
+        "Expecting exactly %d servers to have an AEQ with id '%s'.", exactServerCount, queueId);
+    waitUntilEqual(
+        () -> CliUtil.getMembersWithAsyncEventQueue(getCache(), queueId),
+        membersWithAEQ -> membersWithAEQ.size(),
+        exactServerCount,
+        examinerDescription,
+        WAIT_UNTIL_TIMEOUT, TimeUnit.SECONDS);
-  public void waitTillAsyncEventQueuesAreReadyOnServers(String queueId, int serverCount) {
-    await().atMost(30, TimeUnit.SECONDS).until(
-        () -> CliUtil.getMembersWithAsyncEventQueue(getCache(), queueId).size() == serverCount);
+
+  /**
+   * This method wraps an {@link org.awaitility.Awaitility#await} call for more meaningful error
+   * reporting.
+   *
+   * @param supplier Method to retrieve the result to be tested, e.g.,
+   *        get a list of visible region mbeans
+   * @param examiner Method to evaluate the result provided by {@code provider}, e.g.,
+   *        get the length of the provided list.
+   *        Use {@link java.util.function.Function#identity()} if {@code assertionConsumer}
+   *        directly tests the value provided by {@code supplier}.
+   * @param assertionConsumer assertThat styled condition on the output of {@code examiner} against
+   *        which
+   *        the {@code await().until(...)} will be called. E.g.,
+   *        {@code beanCount -> assertThat(beanCount, is(5))}
+   * @param assertionConsumerDescription A description of the {@code assertionConsumer} method,
+   *        for additional failure information should this call time out.
+   *        E.g., "Visible region mbean count should be 5"
+   * @param timeout With {@code unit}, the maximum time to wait before raising an exception.
+   * @param unit With {@code timeout}, the maximum time to wait before raising an exception.
+   * @throws org.awaitility.core.ConditionTimeoutException The timeout has been reached
+   * @throws Exception Any exception produced by {@code provider.call()}
+   */
+  public <K, J> void waitUntilSatisfied(Supplier<K> supplier, Function<K, J> examiner,
+      Consumer<J> assertionConsumer, String assertionConsumerDescription, long timeout,
+      TimeUnit unit)
+      throws Exception {
+    try {
+      await(assertionConsumerDescription)
+          .atMost(timeout, unit)
+          .until(() -> assertionConsumer.accept(examiner.apply(supplier.get())));
+    } catch (ConditionTimeoutException e) {
+      // There is a very slight race condition here, where the above could conceivably time out,
+      // and become satisfied before the next supplier.get()
+      throw new ConditionTimeoutException(
+          "The observed result '" + String.valueOf(supplier.get())
+              + "' does not satisfy the provided assertionConsumer. \n" + e.getMessage());
+    }
+  }
+
+  /**
+   * Convenience alias for {@link #waitUntilSatisfied},
+   * requiring equality rather than a generic assertion.
+   */
+  public <K, J> void waitUntilEqual(Supplier<K> provider,
+      Function<K, J> examiner,
+      J expectation,
+      String expectationDesription,
+      long timeout, TimeUnit unit)
+      throws Exception {
+    Consumer<J> assertionConsumer = examined -> assertThat(examined, is(expectation));
+    waitUntilSatisfied(provider, examiner, assertionConsumer, expectationDesription, timeout, unit);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS59 UPD42 INS43 INS83 INS39 INS42 INS44 MOV43 INS8 UPD83 UPD39 INS42 INS44 INS43 UPD42 MOV44 INS43 INS29 INS73 INS73 UPD42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS73 INS73 UPD42 INS44 INS44 INS44 INS44 INS44 INS43 INS39 INS42 INS21 INS42 INS34 UPD42 INS42 INS21 INS60 INS39 INS42 MOV60 INS60 INS21 INS39 INS42 INS42 INS21 INS60 INS21 UPD42 INS42 INS60 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS43 INS42 UPD39 UPD42 INS43 INS42 INS42 INS54 INS65 INS42 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS43 INS42 UPD39 UPD42 INS43 INS42 INS42 INS60 INS7 INS32 MOV43 INS59 MOV43 INS59 INS32 INS83 INS74 INS32 INS43 INS59 INS43 INS74 INS32 INS43 INS59 MOV32 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS40 INS66 INS42 INS66 INS65 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS8 INS12 INS66 INS65 INS66 INS66 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS74 INS59 INS42 INS42 INS42 MOV86 INS90 INS9 MOV32 UPD42 MOV42 MOV40 INS42 INS32 INS42 INS86 INS32 INS42 INS42 INS40 INS42 INS32 INS42 MOV86 INS86 INS42 INS42 INS42 INS40 INS43 INS43 UPD42 INS86 INS42 INS42 INS32 INS86 INS45 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS43 UPD74 MOV74 UPD42 INS86 INS42 INS42 INS86 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS86 INS86 INS42 INS42 INS42 INS40 INS67 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS44 INS8 INS67 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS86 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 MOV32 INS42 INS42 INS42 UPD42 INS45 INS42 INS42 INS42 INS45 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS59 INS32 INS42 INS42 INS45 INS42 MOV32 INS59 INS40 INS42 MOV42 INS32 INS42 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 UPD43 INS32 MOV59 INS32 INS42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 MOV32 INS59 INS32 INS40 INS42 INS40 INS42 INS43 INS42 INS53 INS42 INS42 INS42 INS59 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS32 INS42 INS42 INS42 MOV32 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV42 INS42 INS14 INS42 INS42 INS42 INS32 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 UPD42 UPD42 INS42 INS59 INS42 INS42 UPD42 MOV42 INS32 INS42 INS45 INS32 INS45 INS32 MOV32 INS42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL33 DEL27 DEL34 DEL32 DEL32 DEL21 DEL32 DEL34 DEL40 DEL32 DEL32 DEL33 DEL27 DEL42 DEL22 DEL42 DEL27 DEL27 DEL42 DEL42 DEL22 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL32 DEL42 DEL39 DEL42 DEL32 DEL42 DEL41 DEL32 DEL34 DEL40 DEL32 DEL32 DEL21 DEL42 DEL34 DEL40 DEL32 DEL42 DEL27 DEL8 DEL32 DEL34 DEL40 DEL32 DEL42 DEL27 DEL86