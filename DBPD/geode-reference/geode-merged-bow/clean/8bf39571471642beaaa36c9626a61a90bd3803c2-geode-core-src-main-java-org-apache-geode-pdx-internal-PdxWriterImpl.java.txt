Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A new instance of this class is created for each (nested) instance of
- * {@link PdxSerializable}. But it may share the underlying instance
- * of {@link HeapDataOutputStream} with other instances of this class.
+ * A new instance of this class is created for each (nested) instance of {@link PdxSerializable}.
+ * But it may share the underlying instance of {@link HeapDataOutputStream} with other instances of
+ * this class.
-  public static final byte HEADER_SIZE = TYPE_ID_SIZE + DataSize.INTEGER_SIZE
-      + DataSize.BYTE_SIZE;
+  public static final byte HEADER_SIZE = TYPE_ID_SIZE + DataSize.INTEGER_SIZE + DataSize.BYTE_SIZE;
-   * The number of variable length fields that need an offset.
-   * The first VLF does not need an offset.
+   * The number of variable length fields that need an offset. The first VLF does not need an
+   * offset.
-  
+
-   * If true then extra validation is done to detect if mistakes have been made in
-   * the way PdxWriter is used.
-   * Currently this will cause PdxSerializationException to be thrown if the number,
-   * names, or types of fields are changed or if different identity fields are marked
-   * on the same instance of a class.
-   * This property should only be set when debugging new code since it will slow down
+   * If true then extra validation is done to detect if mistakes have been made in the way PdxWriter
+   * is used. Currently this will cause PdxSerializationException to be thrown if the number, names,
+   * or types of fields are changed or if different identity fields are marked on the same instance
+   * of a class. This property should only be set when debugging new code since it will slow down
-  private static final boolean sysPropDoExtraPdxValidation = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "validatePdxWriters");
+  private static final boolean sysPropDoExtraPdxValidation =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "validatePdxWriters");
-  
+
-    this.newType = pt; 
+    this.newType = pt;
-  public PdxWriterImpl(TypeRegistry tr, Object pdx, AutoClassInfo aci,
-      PdxOutputStream os) {
+  public PdxWriterImpl(TypeRegistry tr, Object pdx, AutoClassInfo aci, PdxOutputStream os) {
-  
+
-      int c = this.existingType.getVariableLengthFieldCount(); 
+      int c = this.existingType.getVariableLengthFieldCount();
-  
+
-  
+
+
+
+
+
+
+
+
+
-      throw new IllegalArgumentException("writeDate only accepts instances of Date. Subclasses are not supported. Use writeObject for subclasses of Date.");
+      throw new IllegalArgumentException(
+          "writeDate only accepts instances of Date. Subclasses are not supported. Use writeObject for subclasses of Date.");
+
-      throw new IllegalArgumentException("writeDate only accepts instances of Date. Subclasses are not supported. Use writeObject for subclasses of Date.");
+      throw new IllegalArgumentException(
+          "writeDate only accepts instances of Date. Subclasses are not supported. Use writeObject for subclasses of Date.");
+
+
+
+
+
+
+
+
+
+
+
+
+
-  
-  public PdxWriter writeObjectArray(String fieldName, Object[] array,
-      boolean onlyPortableObjects) {
+
+  public PdxWriter writeObjectArray(String fieldName, Object[] array, boolean onlyPortableObjects) {
+
+
+
-   * Must be invoked only after
-   * {@link PdxSerializable#toData(PdxWriter)}
+   * Must be invoked only after {@link PdxSerializable#toData(PdxWriter)}
+   * 
-      this.alreadyGenerated = true;  
-    if (!fieldsWritten()) {
-      initialize();
-    }
-    writeUnreadData();
-    appendOffsets();
-    int typeId;
-    if (definingNewPdxType()) {
-      this.newType.initialize(this);
-      if (this.unreadData != null && !this.unreadData.isEmpty()) {
-        // We created a new type that had unreadData.
-        // In this case we don't define a local type
-        // but we do set the serialized type.
-        typeId = this.tr.defineType(newType);
-        this.unreadData.setSerializedType(newType);
-      } else {
-        this.newType = this.tr.defineLocalType(this.pdx, newType);
-        typeId = this.newType.getTypeId();
+      this.alreadyGenerated = true;
+      if (!fieldsWritten()) {
+        initialize();
-    } else {
-      if (doExtraValidation()) {
-        int fieldCount = this.fieldId+1;
-        if (this.existingType.getFieldCount() != fieldCount) {
-          throw new PdxSerializationException("Expected the number of fields for class " + this.existingType.getClassName() + " to be " + this.existingType.getFieldCount() + " but instead it was " + fieldCount);
+      writeUnreadData();
+      appendOffsets();
+      int typeId;
+      if (definingNewPdxType()) {
+        this.newType.initialize(this);
+        if (this.unreadData != null && !this.unreadData.isEmpty()) {
+          // We created a new type that had unreadData.
+          // In this case we don't define a local type
+          // but we do set the serialized type.
+          typeId = this.tr.defineType(newType);
+          this.unreadData.setSerializedType(newType);
+        } else {
+          this.newType = this.tr.defineLocalType(this.pdx, newType);
+          typeId = this.newType.getTypeId();
+      } else {
+        if (doExtraValidation()) {
+          int fieldCount = this.fieldId + 1;
+          if (this.existingType.getFieldCount() != fieldCount) {
+            throw new PdxSerializationException("Expected the number of fields for class "
+                + this.existingType.getClassName() + " to be " + this.existingType.getFieldCount()
+                + " but instead it was " + fieldCount);
+          }
+        }
+        typeId = this.existingType.getTypeId();
-      typeId = this.existingType.getTypeId();
-    }
-    // Now write length of the byte stream (does not include bytes for DSCODE and the length itself.)
-    long bits = ((long)getCurrentOffset())<<32 | (0x00000000FFFFFFFFL & typeId); // fixes 45005
-    this.lu.update(bits);
+      // Now write length of the byte stream (does not include bytes for DSCODE and the length
+      // itself.)
+      long bits = ((long) getCurrentOffset()) << 32 | (0x00000000FFFFFFFFL & typeId); // fixes 45005
+      this.lu.update(bits);
-    
+
-   * Returns the pdx type that can be used by the auto serializer
-   * to always serialize this class.
+   * Returns the pdx type that can be used by the auto serializer to always serialize this class.
+
-  
+
-   * Must be invoked only after
-   * {@link PdxSerializable#toData(PdxWriter)}
+   * Must be invoked only after {@link PdxSerializable#toData(PdxWriter)}
-          this.os.write((byte)this.vlfOffsets[i]);
+          this.os.write((byte) this.vlfOffsets[i]);
-          this.os.writeShort((short)this.vlfOffsets[i]);
+          this.os.writeShort((short) this.vlfOffsets[i]);
-   * @param offsetCount
-   *          Number of offsets to appended in this byte stream.
-   * @param size
-   *          Size of the byte stream (excluding DSCODE, length int and the
-   *          offsets.)
+   * @param offsetCount Number of offsets to appended in this byte stream.
+   * @param size Size of the byte stream (excluding DSCODE, length int and the offsets.)
-          "Values cannot be negative. offsetCount: " + offsetCount + ", size: "
-              + size + " bytes");
+          "Values cannot be negative. offsetCount: " + offsetCount + ", size: " + size + " bytes");
+
-  
+
-  
-  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue, Class<CT> fieldType) {
+
+  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType) {
-  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue, Class<CT> fieldType, boolean onlyPortableObjects) {
+
+  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType, boolean onlyPortableObjects) {
-  
+
-  void writeField(PdxField f, Object value)  {
+  void writeField(PdxField f, Object value) {
-    case CHAR:
-      writeChar(null, (Character)value);
-      break;
-    case BOOLEAN:
-      writeBoolean(null, (Boolean)value);
-      break;
-    case BYTE:
-      writeByte(null, (Byte)value);
-      break;
-    case SHORT:
-      writeShort(null, (Short)value);
-      break;
-    case INT:
-      writeInt(null, (Integer)value);
-      break;
-    case FLOAT:
-      writeFloat(null, (Float)value);
-      break;
-    case DOUBLE:
-      writeDouble(null, (Double)value);
-      break;
-    case LONG:
-      writeLong(null, (Long)value);
-      break;
-    case DATE:
-      writeDate(null, (Date)value);
-      break;
-    case STRING:
-      writeString(null, (String)value);
-      break;
-    case BOOLEAN_ARRAY:
-      writeBooleanArray(null, (boolean[])value);
-      break;
-    case CHAR_ARRAY:
-      writeCharArray(null, (char[])value);
-      break;
-    case BYTE_ARRAY:
-      writeByteArray(null, (byte[])value);
-      break;
-    case SHORT_ARRAY:
-      writeShortArray(null, (short[])value);
-      break;
-    case INT_ARRAY:
-      writeIntArray(null, (int[])value);
-      break;
-    case LONG_ARRAY:
-      writeLongArray(null, (long[])value);
-      break;
-    case FLOAT_ARRAY:
-      writeFloatArray(null, (float[])value);
-      break;
-    case DOUBLE_ARRAY:
-      writeDoubleArray(null, (double[])value);
-      break;
-    case STRING_ARRAY:
-      writeStringArray(null, (String[])value);
-      break;
-    case ARRAY_OF_BYTE_ARRAYS:
-      writeArrayOfByteArrays(null, (byte[][])value);
-      break;
-    case OBJECT_ARRAY:
-      writeObjectArray(null, (Object[])value);
-      break;
-    case OBJECT:
-      writeObject(null, value);
-      break;
-    default:
-      throw new InternalGemFireException("Unhandled field type " + f.getFieldType());
+      case CHAR:
+        writeChar(null, (Character) value);
+        break;
+      case BOOLEAN:
+        writeBoolean(null, (Boolean) value);
+        break;
+      case BYTE:
+        writeByte(null, (Byte) value);
+        break;
+      case SHORT:
+        writeShort(null, (Short) value);
+        break;
+      case INT:
+        writeInt(null, (Integer) value);
+        break;
+      case FLOAT:
+        writeFloat(null, (Float) value);
+        break;
+      case DOUBLE:
+        writeDouble(null, (Double) value);
+        break;
+      case LONG:
+        writeLong(null, (Long) value);
+        break;
+      case DATE:
+        writeDate(null, (Date) value);
+        break;
+      case STRING:
+        writeString(null, (String) value);
+        break;
+      case BOOLEAN_ARRAY:
+        writeBooleanArray(null, (boolean[]) value);
+        break;
+      case CHAR_ARRAY:
+        writeCharArray(null, (char[]) value);
+        break;
+      case BYTE_ARRAY:
+        writeByteArray(null, (byte[]) value);
+        break;
+      case SHORT_ARRAY:
+        writeShortArray(null, (short[]) value);
+        break;
+      case INT_ARRAY:
+        writeIntArray(null, (int[]) value);
+        break;
+      case LONG_ARRAY:
+        writeLongArray(null, (long[]) value);
+        break;
+      case FLOAT_ARRAY:
+        writeFloatArray(null, (float[]) value);
+        break;
+      case DOUBLE_ARRAY:
+        writeDoubleArray(null, (double[]) value);
+        break;
+      case STRING_ARRAY:
+        writeStringArray(null, (String[]) value);
+        break;
+      case ARRAY_OF_BYTE_ARRAYS:
+        writeArrayOfByteArrays(null, (byte[][]) value);
+        break;
+      case OBJECT_ARRAY:
+        writeObjectArray(null, (Object[]) value);
+        break;
+      case OBJECT:
+        writeObject(null, value);
+        break;
+      default:
+        throw new InternalGemFireException("Unhandled field type " + f.getFieldType());
-  
+
-  
+
+
+
-    if (definingNewPdxType()) { 
+    if (definingNewPdxType()) {
-      if(ft == null) {
-        throw new PdxFieldDoesNotExistException("Field " + fieldName + " must be written before calling markIdentityField");
+      if (ft == null) {
+        throw new PdxFieldDoesNotExistException(
+            "Field " + fieldName + " must be written before calling markIdentityField");
-      if(ft == null) {
-        throw new PdxFieldDoesNotExistException("Field " + fieldName + " must be written before calling markIdentityField");
+      if (ft == null) {
+        throw new PdxFieldDoesNotExistException(
+            "Field " + fieldName + " must be written before calling markIdentityField");
-        throw new PdxSerializationException("Expected field " + fieldName + " to not be marked as an identity field since it was not for the first serialization");
+        throw new PdxSerializationException("Expected field " + fieldName
+            + " to not be marked as an identity field since it was not for the first serialization");
-  
+
-      throw new PdxFieldAlreadyExistsException("writeUnreadFields must be called before any other fields are written.");
+      throw new PdxFieldAlreadyExistsException(
+          "writeUnreadFields must be called before any other fields are written.");
-    this.unreadData = (PdxUnreadData)unread;
+    this.unreadData = (PdxUnreadData) unread;
+
-      PdxField ft = new PdxField(fieldName, this.fieldId,
-                                 this.vlfCount, type, isIdentityField);
+      PdxField ft = new PdxField(fieldName, this.fieldId, this.vlfCount, type, isIdentityField);
-        throw new PdxSerializationException("Did not expect field " + fieldName + " to be serialized since it was not the first time this class was serialized.");
+        throw new PdxSerializationException("Did not expect field " + fieldName
+            + " to be serialized since it was not the first time this class was serialized.");
-        throw new PdxSerializationException("Detected that the order in which the fields are serialized changed since the first time this class was serialized.");
+        throw new PdxSerializationException(
+            "Detected that the order in which the fields are serialized changed since the first time this class was serialized.");
-        throw new PdxSerializationException("Expected field " + fieldName + " to be of type " + ft.getFieldType() + " not of type " + type);
+        throw new PdxSerializationException("Expected field " + fieldName + " to be of type "
+            + ft.getFieldType() + " not of type " + type);
-  
+
-  
+

MOV66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66