GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalCache;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.Set;
-
-  private final GemFireCacheImpl cache;
+  /**
+   * package-private to avoid synthetic accessor
+   * <p>
+   * TODO: if this is only in inside client then this should be InternalClientCache
+   */
+  final InternalCache cache;
+
-  public ProxyCache(Properties properties, GemFireCacheImpl cache, PoolImpl pool) {
+  public ProxyCache(Properties properties, InternalCache cache, PoolImpl pool) {
+  @Override
-      Iterator<ServerLocation> iter = this.userAttributes.getServerToId().keySet().iterator();
-      while (iter.hasNext()) {
-        ProxyCacheCloseOp.executeOn(iter.next(), (PoolImpl) this.userAttributes.getPool(),
+      for (final ServerLocation serverLocation : this.userAttributes.getServerToId().keySet()) {
+        ProxyCacheCloseOp.executeOn(serverLocation, (ExecutablePool) this.userAttributes.getPool(),
-      ArrayList<ProxyCache> proxyCache =
-          ((PoolImpl) this.userAttributes.getPool()).getProxyCacheList();
+      List<ProxyCache> proxyCache = ((PoolImpl) this.userAttributes.getPool()).getProxyCacheList();
-      // @todo I think some NPE will be caused by this code.
+      // TODO: I think some NPE will be caused by this code.
-  // TODO remove this method
-  public String getName() {
-    return this.cache.getName();
-  }
-
+  @Override
-          new ProxyQueryService(this, userAttributes.getPool().getQueryService());
+          new ProxyQueryService(this, this.userAttributes.getPool().getQueryService());
+  @Override
-    // TODO Auto-generated method stub
-    // ProxyRegion region = this.proxyRegionList.get(path);
-    // if (region != null) {
-    // return region;
-    // }
-    // else {
-    // }
+  @Override
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.geode.CancelCriterion#cancelInProgress()
-     */
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.geode.CancelCriterion#generateCancelledException(java.lang.Throwable)
-     */
-      } catch (IllegalStateException e2) {
+      } catch (IllegalStateException ignore) {
+  @Override
+  @Override
-  public PdxInstanceFactory createPdxInstanceFactory(String className, boolean b) {
-    return PdxInstanceFactoryImpl.newCreator(className, b);
+  public PdxInstanceFactory createPdxInstanceFactory(String className, boolean expectDomainClass) {
+    return PdxInstanceFactoryImpl.newCreator(className, expectDomainClass);
+  @Override

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS29 UPD43 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS65 UPD42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS66 INS66 INS66 UPD42 INS70 UPD42 INS44 MOV32 MOV8 UPD74 INS83 MOV43 INS42 UPD43 UPD42 UPD42 UPD42 MOV42 UPD43 INS22 UPD42 INS52 INS42 DEL83 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42