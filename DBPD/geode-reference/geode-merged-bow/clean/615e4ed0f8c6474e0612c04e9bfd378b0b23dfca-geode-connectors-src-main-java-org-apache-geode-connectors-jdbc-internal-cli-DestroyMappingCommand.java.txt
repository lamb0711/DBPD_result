GEODE-6068: change destroy jdbc-mapping to undo create (#2905)

All the changes made by create jdbc-mapping are now undone
by destroy jdbc-mapping. This includes the cluster config changes
and the changes to the live regions and caches on servers.

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import org.apache.geode.cache.configuration.CacheConfig.AsyncEventQueue;
+import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.connectors.jdbc.JdbcLoader;
+import org.apache.geode.connectors.jdbc.JdbcWriter;
-  private static final String ERROR_PREFIX = "ERROR: ";
-
-    String region = (String) configObject;
-    RegionMapping existingCacheElement = cacheConfig.findCustomRegionElement("/" + region,
-        RegionMapping.ELEMENT_ID, RegionMapping.class);
+    String regionName = (String) configObject;
+    RegionConfig regionConfig = findRegionConfig(cacheConfig, regionName);
+    if (regionConfig == null) {
+      return false;
+    }
+    boolean modified = false;
+    modified |= removeJdbcMappingFromRegion(regionConfig);
+    modified |= removeJdbcQueueFromCache(cacheConfig, regionName);
+    RegionAttributesType attributes = getRegionAttributes(regionConfig);
+    modified |= removeJdbcLoader(attributes);
+    modified |= removeJdbcWriter(attributes);
+    modified |= removeJdbcAsyncEventQueueId(attributes, regionName);
+    return modified;
+  }
-    if (existingCacheElement != null) {
-      cacheConfig
-          .getRegions()
-          .stream()
-          .filter(regionConfig -> regionConfig.getName().equals(region))
-          .forEach(
-              regionConfig -> regionConfig.getCustomRegionElements().remove(existingCacheElement));
+  private boolean removeJdbcLoader(RegionAttributesType attributes) {
+    DeclarableType cacheLoader = attributes.getCacheLoader();
+    if (cacheLoader != null) {
+      if (JdbcLoader.class.getName().equals(cacheLoader.getClassName())) {
+        attributes.setCacheLoader(null);
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcWriter(RegionAttributesType attributes) {
+    DeclarableType cacheWriter = attributes.getCacheWriter();
+    if (cacheWriter != null) {
+      if (JdbcWriter.class.getName().equals(cacheWriter.getClassName())) {
+        attributes.setCacheWriter(null);
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcAsyncEventQueueId(RegionAttributesType attributes, String regionName) {
+    String queueName = CreateMappingCommand.createAsyncEventQueueName(regionName);
+    String queueIds = attributes.getAsyncEventQueueIds();
+    if (queueIds == null) {
+      return false;
+    }
+    List<String> queues = new ArrayList<>(Arrays.asList(queueIds.split(",")));
+    if (queues.contains(queueName)) {
+      queues.remove(queueName);
+      String newQueueIds = String.join(",", queues);
+      attributes.setAsyncEventQueueIds(newQueueIds);
+  private boolean removeJdbcQueueFromCache(CacheConfig cacheConfig, String regionName) {
+    String queueName = CreateMappingCommand.createAsyncEventQueueName(regionName);
+    Iterator<AsyncEventQueue> iterator = cacheConfig.getAsyncEventQueues().iterator();
+    while (iterator.hasNext()) {
+      AsyncEventQueue queue = iterator.next();
+      if (queueName.equals(queue.getId())) {
+        iterator.remove();
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcMappingFromRegion(RegionConfig regionConfig) {
+    Iterator<CacheElement> iterator = regionConfig.getCustomRegionElements().iterator();
+    while (iterator.hasNext()) {
+      CacheElement element = iterator.next();
+      if (element instanceof RegionMapping) {
+        iterator.remove();
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private RegionConfig findRegionConfig(CacheConfig cacheConfig, String regionName) {
+    return cacheConfig.getRegions().stream()
+        .filter(region -> region.getName().equals(regionName)).findFirst().orElse(null);
+  }
+
+  private RegionAttributesType getRegionAttributes(RegionConfig regionConfig) {
+    RegionAttributesType attributes;
+    List<RegionAttributesType> attributesList = regionConfig.getRegionAttributes();
+    if (attributesList.isEmpty()) {
+      attributes = new RegionAttributesType();
+      attributesList.add(attributes);
+    } else {
+      attributes = attributesList.get(0);
+    }
+    return attributes;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 MOV83 MOV39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 MOV60 INS60 INS25 INS60 INS21 INS21 INS60 INS21 INS21 INS21 INS41 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS41 INS43 INS42 INS43 INS42 MOV60 INS60 INS61 INS41 INS43 INS42 INS60 INS61 MOV41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS43 INS59 INS27 INS8 INS39 INS59 INS7 INS7 INS43 INS59 INS7 INS7 INS7 INS42 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS32 INS8 INS9 INS42 INS42 UPD43 INS74 INS59 INS32 INS8 INS9 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS8 INS42 UPD42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS41 INS43 MOV43 UPD42 MOV42 INS14 INS42 INS42 INS42 INS21 INS60 INS21 INS41 UPD42 UPD42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS43 INS43 INS42 MOV32 INS42 INS42 INS60 INS25 INS32 UPD42 MOV42 INS33 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS74 INS32 INS32 INS43 INS59 INS32 INS9 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS8 INS42 INS42 UPD42 INS43 INS59 INS62 INS8 MOV32 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS42 INS32 INS21 MOV41 INS32 INS42 INS32 INS21 INS41 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS41 INS42 INS42 INS32 INS42 MOV43 INS21 INS41 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS57 INS42 INS42 INS42 INS32 INS57 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS32 INS9 INS43 INS42 INS42 INS34 INS43 INS42 INS42 INS33 INS43 INS42 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 DEL83 DEL83 DEL83 DEL45 DEL59 DEL23 DEL45 DEL42 DEL27 DEL40 DEL57 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL59 DEL86 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31