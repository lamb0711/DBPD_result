Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is used as a wrapper over all the results of PR which are of non
- * distinct type
+ * This is used as a wrapper over all the results of PR which are of non distinct type
-public class CumulativeNonDistinctResults<E> implements SelectResults<E>,
-    DataSerializableFixedID {
+public class CumulativeNonDistinctResults<E> implements SelectResults<E>, DataSerializableFixedID {
-  public CumulativeNonDistinctResults() {
-  }
+  public CumulativeNonDistinctResults() {}
-  public CumulativeNonDistinctResults(
-      Collection<? extends Collection<E>> results, int limit,
+  public CumulativeNonDistinctResults(Collection<? extends Collection<E>> results, int limit,
-    this.collectionType = new CollectionTypeImpl(
-        CumulativeNonDistinctResults.class, elementType);
-    this.data = new CumulativeNonDistinctResultsCollection(results, limit,
-        collectionsMetadata);
+    this.collectionType = new CollectionTypeImpl(CumulativeNonDistinctResults.class, elementType);
+    this.data = new CumulativeNonDistinctResultsCollection(results, limit, collectionsMetadata);
-    throw new UnsupportedOperationException(
-        "Addition to collection not supported");
+    throw new UnsupportedOperationException("Addition to collection not supported");
-    throw new UnsupportedOperationException(
-        "Removal from collection not supported");
+    throw new UnsupportedOperationException("Removal from collection not supported");
-    throw new UnsupportedOperationException(
-        "Addition to collection not supported");
+    throw new UnsupportedOperationException("Addition to collection not supported");
-    throw new UnsupportedOperationException(
-        "Removal from collection not supported");
+    throw new UnsupportedOperationException("Removal from collection not supported");
-    throw new UnsupportedOperationException(
-        "Removal from collection not supported");
+    throw new UnsupportedOperationException("Removal from collection not supported");
-    throw new UnsupportedOperationException(
-        "Removal from collection not supported");
+    throw new UnsupportedOperationException("Removal from collection not supported");
-    for (Iterator<E> itr = this.iterator()/* this.base.iterator() */; itr
-        .hasNext();) {
+    for (Iterator<E> itr = this.iterator()/* this.base.iterator() */; itr.hasNext();) {
-  private class CumulativeNonDistinctResultsCollection extends
-      AbstractCollection<E> {
+  private class CumulativeNonDistinctResultsCollection extends AbstractCollection<E> {
-    public CumulativeNonDistinctResultsCollection(
-        Collection<? extends Collection<E>> results, int limit,
-        List<Metadata> collectionsMetadata) {
+    public CumulativeNonDistinctResultsCollection(Collection<? extends Collection<E>> results,
+        int limit, List<Metadata> collectionsMetadata) {
-     * @Override public boolean isEmpty() { boolean isEmpty = true; for
-     * (SelectResults<E> result : this.sortedResults) { isEmpty =
-     * result.isEmpty(); if (!isEmpty) { break; } } return isEmpty; }
+     * @Override public boolean isEmpty() { boolean isEmpty = true; for (SelectResults<E> result :
+     * this.sortedResults) { isEmpty = result.isEmpty(); if (!isEmpty) { break; } } return isEmpty;
+     * }
+
-        Object e =  PDXUtils.convertPDX(original, isStruct,
-            metadata.getDomainObjectForPdx, metadata.getDeserializedObject,
-            metadata.localResults, objectChangedMarker, false);
-        if(isStruct) {
-          if(objectChangedMarker[0]) {
-            return (E)new StructImpl((StructTypeImpl)collectionType.getElementType(), (Object[])e);
-          }else {
+        Object e = PDXUtils.convertPDX(original, isStruct, metadata.getDomainObjectForPdx,
+            metadata.getDeserializedObject, metadata.localResults, objectChangedMarker, false);
+        if (isStruct) {
+          if (objectChangedMarker[0]) {
+            return (E) new StructImpl((StructTypeImpl) collectionType.getElementType(),
+                (Object[]) e);
+          } else {
-        }else {
-          return (E)e;
+        } else {
+          return (E) e;
-    this.collectionType = new CollectionTypeImpl(
-        CumulativeNonDistinctResults.class, elementType);
+    this.collectionType = new CollectionTypeImpl(CumulativeNonDistinctResults.class, elementType);
-    private Metadata(boolean getDomainObjectForPdx,
-        boolean getDeserializedObject, boolean localResults) {
+    private Metadata(boolean getDomainObjectForPdx, boolean getDeserializedObject,
+        boolean localResults) {
-    return new Metadata(getDomainObjectForPdx, getDeserializedObject,
-        localResults);
+    return new Metadata(getDomainObjectForPdx, getDeserializedObject, localResults);

UPD66 DEL66