GEODE-181: Add new unit and integration tests for FastLogger

Add new TestSuites for logging tests. Extract default config testing to
FastLoggerWithDefaultConfigJUnitTest. Move FastLoggerJUnitTest integration
tests to FastLoggerIntegrationJUnitTest. Create new unit tests in
FastLoggerJUnitTest. Update tests to full JUnit 4 syntax and use Rules
(GEODE-89).

Add mockito dependency to build for unit testing.

Completes: GEODE-89, GEODE-181, GEODE-10

+import org.apache.logging.log4j.core.Appender;
+import org.apache.logging.log4j.core.filter.AbstractFilterable;
-      LogService.setFastLoggerDebugAvailableFlag();
+      LogService.configureFastLoggerDelegating();
+
+  public static boolean hasContextWideFilter(final Configuration config) {
+    return config.hasFilter();
+  }
+  
+  public static boolean hasAppenderFilter(final Configuration config) {
+    for (Appender appender : config.getAppenders().values()) {
+      if (appender instanceof AbstractFilterable) {
+        if (((AbstractFilterable) appender).hasFilter()) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasDebugOrLower(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isDebugOrLower = loggerConfig.getLevel().isLessSpecificThan(Level.DEBUG);
+      if (isDebugOrLower) {
+        return true;
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasLoggerFilter(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isGemFire = loggerConfig.getName().startsWith(LogService.BASE_LOGGER_NAME);
+      boolean hasFilter = loggerConfig.hasFilter();
+      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
+      
+      if (isRoot || isGemFire) {
+        // check for Logger Filter
+        if (hasFilter && !isGemFireVerboseFilter) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasAppenderRefFilter(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isGemFire = loggerConfig.getName().startsWith(LogService.BASE_LOGGER_NAME);
+      boolean hasFilter = loggerConfig.hasFilter();
+      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
+      
+      if (isRoot || isGemFire) {
+        // check for AppenderRef Filter
+        for (AppenderRef appenderRef : loggerConfig.getAppenderRefs()) {
+          if (appenderRef.getFilter() != null) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS42 INS32 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS42 INS43 INS42 INS32 INS42 INS25 INS43 INS42 INS32 INS42 INS60 INS25 INS43 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS43 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS62 INS8 INS42 INS42 INS42 INS39 INS59 INS42 INS8 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 UPD42 INS42 INS43 INS25 INS42 INS32 INS41 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS25 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS70 INS42 INS32 INS8 INS32 INS42 INS40 INS9 INS32 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS36 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS38 INS41 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS11 INS9 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS41 INS42 INS42 INS42 INS9