GEODE-7626: Break dependency on LocalViewMessage in membership (#4538)

* GEODE-7626: Break dependency on LocalViewMessage in membership

LocalViewMessage was a DistributionMessage executed in an executor owned
by ClusterDistributionmanager.  This arrangement was very convoluted
because CDM only had upstream involvement in membership view
installation.

This PR moves view installation into GMSMembership using a
single-threaded executor similar to what CDM used but without
statistics.  Stats for the view installation thread have never been
useful so I have not retained that functionality.

There are already many tests for view installation, so while I've
modified a couple I haven't added any new tests.

* make constructor private

* simplifying the executor

-  private static final int viewThreadStartsId;
-  private static final int viewThreadsId;
-  private static final int viewProcessorThreadJobsId;
-  private static final int udpFinalCheckRequestsReceivedId;
-  private static final int udpFinalCheckResponsesSentId;
-    final String viewThreadsDesc = "The number of threads currently processing view messages.";
-    final String viewThreadJobsDesc =
-        "The number of messages currently being processed by view threads.";
-        f.createLongCounter("viewThreadStarts",
-            "Total number of times a thread has been created for the view message executor.",
-            "starts", false),
-        f.createIntGauge("viewThreads", viewThreadsDesc, "threads"),
-        f.createIntGauge("viewThreadJobs", viewThreadJobsDesc, "messages"),
-    viewThreadStartsId = type.nameToId("viewThreadStarts");
-    viewThreadsId = type.nameToId("viewThreads");
-    viewProcessorThreadJobsId = type.nameToId("viewThreadJobs");
-    udpFinalCheckRequestsReceivedId = type.nameToId("udpFinalCheckRequestsReceived");
-    udpFinalCheckResponsesSentId = type.nameToId("udpFinalCheckResponsesSent");
-  public void incViewThreadStarts() {
-    stats.incLong(viewThreadStartsId, 1);
-  }
-
-  public void incNumViewThreads(int threads) {
-    this.stats.incInt(viewThreadsId, threads);
-  }
-
-  public PoolStatHelper getViewProcessorHelper() {
-    return new PoolStatHelper() {
-      @Override
-      public void startJob() {
-        incViewProcessorThreadJobs(1);
-        if (logger.isTraceEnabled()) {
-          logger.trace("[DM.SerialQueuedExecutor.execute] numViewThreads={}", getNumViewThreads());
-        }
-      }
-
-      @Override
-      public void endJob() {
-        incViewProcessorThreadJobs(-1);
-      }
-    };
-  }
-
-  public int getNumViewThreads() {
-    return this.stats.getInt(viewThreadsId);
-  }
-
-  protected void incViewProcessorThreadJobs(int jobs) {
-    this.stats.incInt(viewProcessorThreadJobsId, jobs);
-  }
-

DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL45 DEL9 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL34 DEL38 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31