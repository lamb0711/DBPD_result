Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.i18n.LogWriterI18n;
-  private final static int ucastWriteTimeId;
-  private final static int mcastWriteTimeId;
-  private final static int ucastFlushesId;
-  private final static int ucastFlushTimeId;
-
-  private final static int flowControlWaitsInProgressId;
-  private final static int flowControlThrottleWaitsInProgressId;
-  private final static int flowControlRequestsId;
-  private final static int flowControlResponsesId;
-
-  private final static int jgUNICASTdataReceivedTimeId;
-
-  private final static int jgReceivedMessagesSizeId;
-  private final static int jgQueuedMessagesSizeId;
-  private final static int jgSentMessagesPoolSizeId;
-
-  private final static int jgUcastReceivedMessagesSizeId;
-  private final static int jgUcastSentMessagesSizeId;
-  private final static int jgUcastSentHighPriorityMessagesSizeId;
-
-  private final static int jgSTABLEsuspendTimeId;
-  private final static int jgSTABLEmessagesId;
-  private final static int jgSTABLEmessagesSentId;
-  private final static int jgSTABILITYmessagesId;
-
-  private final static int jgDownTimeId;
-  private final static int jgUpTimeId;
-  private final static int jChannelUpTimeId;
-
-  private final static int jgFCsendBlocksId;
-  private final static int jgFCautoRequestsId;
-  private final static int jgFCreplenishId;
-  private final static int jgFCresumesId;
-  private final static int jgFCsentCreditsId;
-  private final static int jgFCsentThrottleRequestsId;
-  private final static int jgNAKACKwaitsId;
-
-  private final static int jgFragmentationsPerformedId;
-  private final static int jgFragmentsCreatedId;
-
+  
+  //For GMSHealthMonitor
+  private final static int heartbeatRequestsSentId;  
+  private final static int heartbeatRequestsReceivedId;  
+  private final static int heartbeatsSentId;  
+  private final static int heartbeatsReceivedId;  
+  private final static int suspectsSentId;  
+  private final static int suspectsReceivedId;
+  private final static int finalCheckRequestsSentId;  
+  private final static int finalCheckRequestsReceivedId;  
+  private final static int finalCheckResponsesSentId;  
+  private final static int finalCheckResponsesReceivedId;  
+  private final static int tcpFinalCheckRequestsSentId; 
+  private final static int tcpFinalCheckRequestsReceivedId;  
+  private final static int tcpFinalCheckResponsesSentId;  
+  private final static int tcpFinalCheckResponsesReceivedId;
+  private final static int udpFinalCheckRequestsSentId;
+  private final static int udpFinalCheckRequestsReceivedId;
+  private final static int udpFinalCheckResponsesSentId;
+  private final static int udpFinalCheckResponsesReceivedId;
+    //For GMSHealthMonitor
+    final String heartbeatRequestsSentDesc = "Heartbeat request messages that this member has sent.";
+    final String heartbeatRequestsReceivedDesc = "Heartbeat request messages that this member has received.";
+    
+    final String heartbeatsSentDesc = "Heartbeat messages that this member has sent.";
+    final String heartbeatsReceivedDesc = "Heartbeat messages that this member has received.";
+    
+    final String suspectsSentDesc = "Suspect member messages that this member has sent.";
+    final String suspectsReceivedDesc = "Suspect member messages that this member has received.";
+    
+    final String finalCheckRequestsSentDesc = "Final check requests that this member has sent.";
+    final String finalCheckRequestsReceivedDesc = "Final check requests that this member has received.";
+    
+    final String finalCheckResponsesSentDesc = "Final check responses that this member has sent.";
+    final String finalCheckResponsesReceivedDesc = "Final check responses that this member has received.";    
+    
+    final String tcpFinalCheckRequestsSentDesc = "TCP final check requests that this member has sent.";
+    final String tcpFinalCheckRequestsReceivedDesc = "TCP final check requests that this member has received.";
+    
+    final String tcpFinalCheckResponsesSentDesc = "TCP final check responses that this member has sent.";
+    final String tcpFinalCheckResponsesReceivedDesc = "TCP final check responses that this member has received.";
+
+    final String udpFinalCheckRequestsSentDesc = "UDP final check requests that this member has sent.";
+    final String udpFinalCheckRequestsReceivedDesc = "UDP final check requests that this member has received.";
+    
+    final String udpFinalCheckResponsesSentDesc = "UDP final check responses that this member has sent.";
+    final String udpFinalCheckResponsesReceivedDesc = "UDP final check responses that this member has received.";
-        f.createLongCounter("ucastWriteTime", "Total amount of time, in nanoseconds, spent in unicast datagram socket write calls.", "nanoseconds"),
-        f.createLongCounter("mcastWriteTime", "Total amount of time, in nanoseconds, spent in multicast datagram socket write calls.", "nanoseconds"),
-        f.createIntCounter("ucastFlushes", "Total number of flushes of the unicast datagram protocol, prior to sending a multicast message", "flushes"),
-        f.createLongCounter("ucastFlushTime", "Total amount of time, in nanoseconds, spent waiting for acknowledgements for outstanding unicast datagram messages", "nanoseconds"),
-
-        f.createIntCounter("flowControlRequests", "Total number of flow control credit requests sent to other processes", "messages"),
-        f.createIntCounter("flowControlResponses", "Total number of flow control credit responses sent to a requestor", "messages"),
-        f.createIntGauge("flowControlWaitsInProgress", "Number of threads blocked waiting for flow-control recharges from other processes", "threads"),
-        f.createLongCounter("flowControlWaitTime", "Total amount of time, in nanoseconds, spent waiting for other processes to recharge the flow of control meter", "nanoseconds"),
-        f.createIntGauge("flowControlThrottleWaitsInProgress", "Number of threads blocked waiting due to flow-control throttle requests from other members", "threads"),
-
-        f.createLongGauge("jgNAKACKreceivedMessages", "Number of received messages awaiting stability in NAKACK", "messages"),
-        f.createLongGauge("jgNAKACKsentMessages", "Number of sent messages awaiting stability in NAKACK", "messages"),
-
-        f.createLongGauge("jgQueuedMessages", "Number of messages queued by transport and awaiting processing", "messages"),
-
-        f.createLongGauge("jgUNICASTreceivedMessages", "Number of received messages awaiting receipt of prior messages", "messages"),
-        f.createLongGauge("jgUNICASTsentMessages", "Number of un-acked normal priority messages", "messages"),
-        f.createLongGauge("jgUNICASTsentHighPriorityMessages", "Number of un-acked high priority messages", "messages"),
-
-        f.createLongCounter("jgUNICASTdataReceivedTime", "Amount of time spent in JGroups UNICAST send", "nanoseconds"),
-        f.createLongCounter("jgSTABLEsuspendTime", "Amount of time JGroups STABLE is suspended", "nanoseconds"),
-        f.createLongCounter("jgSTABLEmessages", "Number of STABLE messages received by JGroups", "messages"),
-        f.createLongCounter("jgSTABLEmessagesSent", "Number of STABLE messages sent by JGroups", "messages"),
-        f.createLongCounter("jgSTABILITYmessages", "Number of STABILITY messages received by JGroups", "messages"),
-
-//        f.createLongCounter("jgUDPupTime", "Time spent in JGroups UDP processing up events", "nanoseconds"),
-//        f.createLongCounter("jgUDPdownTime", "Time spent in JGroups UDP processing down events", "nanoseconds"),
-//        f.createLongCounter("jgNAKACKupTime", "Time spent in JGroups NAKACK processing up events", "nanoseconds"),
-//        f.createLongCounter("jgNAKACKdownTime", "Time spent in JGroups NAKACK processing down events", "nanoseconds"),
-//        f.createLongCounter("jgUNICASTupTime", "Time spent in JGroups UNICAST processing up events", "nanoseconds"),
-//        f.createLongCounter("jgUNICASTdownTime", "Time spent in JGroups UNICAST processing down events", "nanoseconds"),
-//        f.createLongCounter("jgSTABLEupTime", "Time spent in JGroups STABLE processing up events", "nanoseconds"),
-//        f.createLongCounter("jgSTABLEdownTime", "Time spent in JGroups STABLE processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFRAG2upTime", "Time spent in JGroups FRAG2 processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFRAG2downTime", "Time spent in JGroups FRAG2 processing down events", "nanoseconds"),
-//        f.createLongCounter("jgGMSupTime", "Time spent in JGroups GMS processing up events", "nanoseconds"),
-//        f.createLongCounter("jgGMSdownTime", "Time spent in JGroups GMS processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFCupTime", "Time spent in JGroups FC processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFCdownTime", "Time spent in JGroups FC processing down events", "nanoseconds"),
-//        f.createLongCounter("jgDirAckupTime", "Time spent in JGroups DirAck processing up events", "nanoseconds"),
-//        f.createLongCounter("jgDirAckdownTime", "Time spent in JGroups DirAck processing down events", "nanoseconds"),
-//
-//        f.createLongCounter("jgVIEWSYNCdownTime", "Time spent in JGroups VIEWSYNC processing down events", "nanoseconds"),
-//        f.createLongCounter("jgVIEWSYNCupTime", "Time spent in JGroups VIEWSYNC processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFDdownTime", "Time spent in JGroups FD processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFDupTime", "Time spent in JGroups FD processing up events", "nanoseconds"),
-//        f.createLongCounter("jgTCPGOSSIPdownTime", "Time spent in JGroups TCPGOSSIP processing down events", "nanoseconds"),
-//        f.createLongCounter("jgTCPGOSSIPupTime", "Time spent in JGroups TCPGOSSIP processing up events", "nanoseconds"),
-//        f.createLongCounter("jgDISCOVERYdownTime", "Time spent in JGroups DISCOVERY processing down events", "nanoseconds"),
-//        f.createLongCounter("jgDISCOVERYupTime", "Time spent in JGroups DISCOVERY processing up events", "nanoseconds"),
-
-        f.createLongCounter("jgDownTime", "Down Time spent in JGroups stacks", "nanoseconds"),
-        f.createLongCounter("jgUpTime", "Up Time spent in JGroups stacks", "nanoseconds"),
-        f.createLongCounter("jChannelUpTime", "Up Time spent in JChannel including jgroup stack", "nanoseconds"),
-
-        f.createLongCounter("jgFCsendBlocks", "Number of times JGroups FC halted sends due to backpressure", "events"),
-        f.createLongCounter("jgFCautoRequests", "Number of times JGroups FC automatically sent replenishment requests", "events"),
-        f.createLongCounter("jgFCreplenish", "Number of times JGroups FC received replenishments from receivers", "messages"),
-        f.createLongCounter("jgFCresumes", "Number of times JGroups FC resumed sends due to backpressure", "events"),
-        f.createLongCounter("jgFCsentCredits", "Number of times JGroups FC sent credits to a sender", "events"),
-        f.createLongCounter("jgFCsentThrottleRequests","Number of times JGroups FC sent throttle requests to a sender", "events"),
-
-        f.createLongCounter("jgNAKACKwaits", "Number of delays created by NAKACK sent_msgs overflow", "events"),
-        f.createLongCounter("jgFragmentationsPerformed", "Number of message fragmentation operations performed", "operations"),
-        f.createLongCounter("jgFragmentsCreated", "Number of message fragments created", "fragments"),
-
+        
+        //For GMSHealthMonitor
+        f.createLongCounter("heartbeatRequestsSent", heartbeatRequestsSentDesc, "messages"),
+        f.createLongCounter("heartbeatRequestsReceived", heartbeatRequestsReceivedDesc, "messages"),
+        f.createLongCounter("heartbeatsSent", heartbeatsSentDesc, "messages"),
+        f.createLongCounter("heartbeatsReceived", heartbeatsReceivedDesc, "messages"),
+        f.createLongCounter("suspectsSent", suspectsSentDesc, "messages"),
+        f.createLongCounter("suspectsReceived", suspectsReceivedDesc, "messages"),
+        f.createLongCounter("finalCheckRequestsSent", finalCheckRequestsSentDesc, "messages"),
+        f.createLongCounter("finalCheckRequestsReceived", finalCheckRequestsReceivedDesc, "messages"),
+        f.createLongCounter("finalCheckResponsesSent", finalCheckResponsesSentDesc, "messages"),
+        f.createLongCounter("finalCheckResponsesReceived", finalCheckResponsesReceivedDesc, "messages"),
+        f.createLongCounter("tcpFinalCheckRequestsSent", tcpFinalCheckRequestsSentDesc, "nanoseconds", false),
+        f.createLongCounter("tcpFinalCheckRequestsReceived", tcpFinalCheckRequestsReceivedDesc, "nanoseconds", false),
+        f.createLongCounter("tcpFinalCheckResponsesSent", tcpFinalCheckResponsesSentDesc, "nanoseconds", false),
+        f.createLongCounter("tcpFinalCheckResponsesReceived", tcpFinalCheckResponsesReceivedDesc, "nanoseconds", false),
+        f.createLongCounter("udpFinalCheckRequestsSent", udpFinalCheckRequestsSentDesc, "messages"),
+        f.createLongCounter("udpFinalCheckRequestsReceived", udpFinalCheckRequestsReceivedDesc, "messages"),
+        f.createLongCounter("udpFinalCheckResponsesSent", udpFinalCheckResponsesSentDesc, "messages"),
+        f.createLongCounter("udpFinalCheckResponsesReceived", udpFinalCheckResponsesReceivedDesc, "messages"),
-    ucastWriteTimeId = type.nameToId("ucastWriteTime");
-    mcastWriteTimeId = type.nameToId("mcastWriteTime");
-    ucastFlushesId = type.nameToId("ucastFlushes");
-    ucastFlushTimeId = type.nameToId("ucastFlushTime");
-
-    flowControlRequestsId = type.nameToId("flowControlRequests");
-    flowControlResponsesId = type.nameToId("flowControlResponses");
-    flowControlWaitsInProgressId = type.nameToId("flowControlWaitsInProgress");
-    flowControlThrottleWaitsInProgressId = type.nameToId("flowControlThrottleWaitsInProgress");
-
-    jgUNICASTdataReceivedTimeId = type.nameToId("jgUNICASTdataReceivedTime");
-
-    jgReceivedMessagesSizeId = type.nameToId("jgNAKACKreceivedMessages");
-    jgSentMessagesPoolSizeId = type.nameToId("jgNAKACKsentMessages");
-    jgQueuedMessagesSizeId = type.nameToId("jgQueuedMessages");
-    jgSTABLEsuspendTimeId = type.nameToId("jgSTABLEsuspendTime");
-    jgSTABLEmessagesId = type.nameToId("jgSTABLEmessages");
-    jgSTABLEmessagesSentId = type.nameToId("jgSTABLEmessagesSent");
-    jgSTABILITYmessagesId = type.nameToId("jgSTABILITYmessages");
-    jgFragmentationsPerformedId = type.nameToId("jgFragmentationsPerformed");
-    jgFragmentsCreatedId = type.nameToId("jgFragmentsCreated");
-
-    jgUcastReceivedMessagesSizeId = type.nameToId("jgUNICASTreceivedMessages");
-    jgUcastSentMessagesSizeId = type.nameToId("jgUNICASTsentMessages");
-    jgUcastSentHighPriorityMessagesSizeId = type.nameToId("jgUNICASTsentHighPriorityMessages");
-
-    jgDownTimeId = type.nameToId("jgDownTime");
-    jgUpTimeId = type.nameToId("jgUpTime");
-    jChannelUpTimeId = type.nameToId("jChannelUpTime");
-
-    jgFCsendBlocksId = type.nameToId("jgFCsendBlocks");
-    jgFCautoRequestsId = type.nameToId("jgFCautoRequests");
-    jgFCreplenishId = type.nameToId("jgFCreplenish");
-    jgFCresumesId = type.nameToId("jgFCresumes");
-    jgFCsentCreditsId = type.nameToId("jgFCsentCredits");
-    jgFCsentThrottleRequestsId = type.nameToId("jgFCsentThrottleRequests");
-
-    jgNAKACKwaitsId = type.nameToId("jgNAKACKwaits");
-
+    
+    //For GMSHealthMonitor
+    heartbeatRequestsSentId = type.nameToId("heartbeatRequestsSent");
+    heartbeatRequestsReceivedId = type.nameToId("heartbeatRequestsReceived");
+    heartbeatsSentId = type.nameToId("heartbeatsSent");
+    heartbeatsReceivedId = type.nameToId("heartbeatsReceived");
+    suspectsSentId = type.nameToId("suspectsSent");
+    suspectsReceivedId = type.nameToId("suspectsReceived");
+    finalCheckRequestsSentId = type.nameToId("finalCheckRequestsSent");
+    finalCheckRequestsReceivedId = type.nameToId("finalCheckRequestsReceived");
+    finalCheckResponsesSentId = type.nameToId("finalCheckResponsesSent");
+    finalCheckResponsesReceivedId = type.nameToId("finalCheckResponsesReceived");
+    tcpFinalCheckRequestsSentId = type.nameToId("tcpFinalCheckRequestsSent");
+    tcpFinalCheckRequestsReceivedId = type.nameToId("tcpFinalCheckRequestsReceived");
+    tcpFinalCheckResponsesSentId = type.nameToId("tcpFinalCheckResponsesSent");
+    tcpFinalCheckResponsesReceivedId = type.nameToId("tcpFinalCheckResponsesReceived");
+    udpFinalCheckRequestsSentId = type.nameToId("udpFinalCheckRequestsSent");
+    udpFinalCheckRequestsReceivedId = type.nameToId("udpFinalCheckRequestsReceived");
+    udpFinalCheckResponsesSentId = type.nameToId("udpFinalCheckResponsesSent");
+    udpFinalCheckResponsesReceivedId = type.nameToId("udpFinalCheckResponsesReceived");
-  public long startUcastWrite() {
-    return getStatTime();
-  }
-  public void endUcastWrite(long start, int bytesWritten) {
-    if (enableClockStats) {
-      stats.incLong(ucastWriteTimeId, getStatTime()-start);
-    }
+  public void incUcastWriteBytes(int bytesWritten) {
-  public long startMcastWrite() {
-    return getStatTime();
-  }
-  public void endMcastWrite(long start, int bytesWritten) {
+  public void incMcastWriteBytes(int bytesWritten) {
-    if (enableClockStats) {
-      stats.incLong(mcastWriteTimeId, getStatTime()-start);
-    }
-  public void incMcastReadBytes(long amount) {
+  public int getMcastReads() {
+    return stats.getInt(mcastReadsId);
+  }
+  public void incMcastReadBytes(int amount) {
-  public void incUcastReadBytes(long amount) {
+  public void incUcastReadBytes(int amount) {
-  public long startUcastFlush() {
-    stats.incInt(ucastFlushesId, 1);
-    return getStatTime();
-  }
-  public void endUcastFlush(long start) {
-    if (enableClockStats) {
-      stats.incLong(ucastFlushTimeId, getStatTime()-start);
-    }
-  }
-  public void incFlowControlRequests() {
-    stats.incInt(flowControlRequestsId, 1);
-  }
-  public void incFlowControlResponses() {
-    stats.incInt(flowControlResponsesId, 1);
-  }
-  public long startFlowControlWait() {
-    stats.incInt(flowControlWaitsInProgressId, 1);
-    return 1;
-  }
-  public void endFlowControlWait(long start) {
-    stats.incInt(flowControlWaitsInProgressId, -1);
-  }
-  public long startFlowControlThrottleWait() {
-    stats.incInt(flowControlThrottleWaitsInProgressId, 1);
-    return 1;
-  }
-
-  public void endFlowControlThrottleWait(long start) {
-    stats.incInt(flowControlThrottleWaitsInProgressId, -1);
-  }
-  public void incJgUNICASTdataReceived(long amount) {
-    stats.incLong(jgUNICASTdataReceivedTimeId, amount);
-  }
-
-//  public void incjgUDPup(long amount) {
-//    stats.incLong(jgUDPupId, amount);
-//  }
-//  public void incjgUDPdown(long amount) {
-//    stats.incLong(jgUDPdownId, amount);
-//  }
-//  public void incjgNAKACKup(long amount) {
-//    stats.incLong(jgNAKACKupId, amount);
-//  }
-//  public void incjgNAKACKdown(long amount) {
-//    stats.incLong(jgNAKACKdownId, amount);
-//  }
-//  public void incjgUNICASTup(long amount) {
-//    stats.incLong(jgUNICASTupId, amount);
-//  }
-//  public void incjgUNICASTdown(long amount) {
-//    stats.incLong(jgUNICASTdownId, amount);
-//  }
-//  public void incjgSTABLEup(long amount) {
-//    stats.incLong(jgSTABLEupId, amount);
-//  }
-//  public void incjgSTABLEdown(long amount) {
-//    stats.incLong(jgSTABLEdownId, amount);
-//  }
-//  public void incjgFRAG2up(long amount) {
-//    stats.incLong(jgFRAG2upId, amount);
-//  }
-//  public void incjgFRAG2down(long amount) {
-//    stats.incLong(jgFRAG2downId, amount);
-//  }
-//  public void incjgGMSup(long amount) {
-//    stats.incLong(jgGMSupId, amount);
-//  }
-//  public void incjgGMSdown(long amount) {
-//    stats.incLong(jgGMSdownId, amount);
-//  }
-//  public void incjgFCup(long amount) {
-//    stats.incLong(jgFCupId, amount);
-//  }
-//  public void incjgFCdown(long amount) {
-//    stats.incLong(jgFCdownId, amount);
-//  }
-
-  public void setJgQueuedMessagesSize(long amount) {
-    stats.setLong(jgQueuedMessagesSizeId, amount);
-  }
-
-  public void setJgSTABLEreceivedMessagesSize(long amount) {
-    stats.setLong(jgReceivedMessagesSizeId, amount);
-  }
-  public void setJgSTABLEsentMessagesSize(long amount) {
-    stats.setLong(jgSentMessagesPoolSizeId, amount);
-  }
-  public void incJgSTABLEsuspendTime(long value)
-  {
-    stats.incLong(jgSTABLEsuspendTimeId, value);
-  }
-  public void incJgSTABLEmessages(long value)
-  {
-    stats.incLong(jgSTABLEmessagesId, value);
-  }
-  public void incJgSTABLEmessagesSent(long value)
-  {
-    stats.incLong(jgSTABLEmessagesSentId, value);
-  }
-  public void incJgSTABILITYmessages(long value)
-  {
-    stats.incLong(jgSTABILITYmessagesId, value);
-  }
-  public void incJgFragmentationsPerformed() {
-    stats.incLong(jgFragmentationsPerformedId, 1);
-  }
-  public void incJgFragmentsCreated(long numFrags) {
-    stats.incLong(jgFragmentsCreatedId, numFrags);
-  }
-  public void setJgUNICASTreceivedMessagesSize(long amount) {
-    stats.setLong(jgUcastReceivedMessagesSizeId, amount);
-  }
-  public void setJgUNICASTsentMessagesSize(long amount) {
-    stats.setLong(jgUcastSentMessagesSizeId, amount);
-  }
-  public void setJgUNICASTsentHighPriorityMessagesSize(long amount) {
-    stats.setLong(jgUcastSentHighPriorityMessagesSizeId, amount);
-  }
-
-
-  public void incjgDownTime(long value)
-  {
-    stats.incLong(jgDownTimeId, value);
-  }
-
-  public void incjgUpTime(long value)
-  {
-    stats.incLong(jgUpTimeId, value);
-  }
-
-  public void incjChannelUpTime(long value)
-  {
-    stats.incLong(jChannelUpTimeId, value);
-  }
-
-  public void incJgFCsendBlocks(long value)
-  {
-   stats.incLong(jgFCsendBlocksId, value);
-
-  }
-  public void incJgFCautoRequests(long value)
-  {
-    stats.incLong(jgFCautoRequestsId, value);
-
-  }
-  public void incJgFCreplenish(long value)
-  {
-    stats.incLong(jgFCreplenishId, value);
-
-  }
-  public void incJgFCresumes(long value)
-  {
-   stats.incLong(jgFCresumesId, value);
-  }
-  public void incJgFCsentCredits(long value)
-  {
-    stats.incLong(jgFCsentCreditsId, value);
-  }
-  public void incJgFCsentThrottleRequests(long value)
-  {
-    stats.incLong(jgFCsentThrottleRequestsId, value);
-  }
-
-  public void incJgNAKACKwaits(long value) {
-    stats.incLong(jgNAKACKwaitsId, value);
-  }
+  
+  //For GMSHealthMonitor
+  public long getHeartbeatRequestsSent() {
+    return this.stats.getLong(heartbeatRequestsSentId);
+  }
+  
+  public void incHeartbeatRequestsSent() {
+    this.stats.incLong(heartbeatRequestsSentId, 1L);
+  }
+  
+  public long getHeartbeatRequestsReceived() {
+    return this.stats.getLong(heartbeatRequestsReceivedId);
+  }
+  
+  public void incHeartbeatRequestsReceived() {
+    this.stats.incLong(heartbeatRequestsReceivedId, 1L);
+  }
+  
+  public long getHeartbeatsSent() {
+    return this.stats.getLong(heartbeatsSentId);
+  }
+  
+  public void incHeartbeatsSent() {
+    this.stats.incLong(heartbeatsSentId, 1L);
+  }
+  
+  public long getHeartbeatsReceived() {
+    return this.stats.getLong(heartbeatsReceivedId);
+  }
+  
+  public void incHeartbeatsReceived() {
+    this.stats.incLong(heartbeatsReceivedId, 1L);
+  }
+  
+  public long getSuspectsSent() {
+    return this.stats.getLong(suspectsSentId);
+  }
+  
+  public void incSuspectsSent() {
+    this.stats.incLong(suspectsSentId, 1L);
+  }
+
+  public long getSuspectsReceived() {
+    return this.stats.getLong(suspectsReceivedId);
+  }
+  
+  public void incSuspectsReceived() {
+    this.stats.incLong(suspectsReceivedId, 1L);
+  }
+  
+  public long getFinalCheckRequestsSent() {
+    return this.stats.getLong(finalCheckRequestsSentId);
+  }
+  
+  public void incFinalCheckRequestsSent() {
+    this.stats.incLong(finalCheckRequestsSentId, 1L);
+  }
+  
+  public long getFinalCheckRequestsReceived() {
+    return this.stats.getLong(finalCheckRequestsReceivedId);
+  }
+  
+  public void incFinalCheckRequestsReceived() {
+    this.stats.incLong(finalCheckRequestsReceivedId, 1L);
+  }
+  
+  public long getFinalCheckResponsesSent() {
+    return this.stats.getLong(finalCheckResponsesSentId);
+  }
+  
+  public void incFinalCheckResponsesSent() {
+    this.stats.incLong(finalCheckResponsesSentId, 1L);
+  }
+  
+  public long getFinalCheckResponsesReceived() {
+    return this.stats.getLong(finalCheckResponsesReceivedId);
+  }
+  
+  public void incFinalCheckResponsesReceived() {
+    this.stats.incLong(finalCheckResponsesReceivedId, 1L);
+  }
+  
+///
+  public long getTcpFinalCheckRequestsSent() {
+    return this.stats.getLong(tcpFinalCheckRequestsSentId);
+  }
+  
+  public void incTcpFinalCheckRequestsSent() {
+    this.stats.incLong(tcpFinalCheckRequestsSentId, 1L);
+  }
+  
+  public long getTcpFinalCheckRequestsReceived() {
+    return this.stats.getLong(tcpFinalCheckRequestsReceivedId);
+  }
+  
+  public void incTcpFinalCheckRequestsReceived() {
+    this.stats.incLong(tcpFinalCheckRequestsReceivedId, 1L);
+  }
+  
+  public long getTcpFinalCheckResponsesSent() {
+    return this.stats.getLong(tcpFinalCheckResponsesSentId);
+  }
+  
+  public void incTcpFinalCheckResponsesSent() {
+    this.stats.incLong(tcpFinalCheckResponsesSentId, 1L);
+  }
+  
+  public long getTcpFinalCheckResponsesReceived() {
+    return this.stats.getLong(tcpFinalCheckResponsesReceivedId);
+  }
+  
+  public void incTcpFinalCheckResponsesReceived() {
+    this.stats.incLong(tcpFinalCheckResponsesReceivedId, 1L);
+  }
+ 
+///
+  public long getUdpFinalCheckRequestsSent() {
+    return this.stats.getLong(udpFinalCheckRequestsSentId);
+  }
+  
+  public void incUdpFinalCheckRequestsSent() {
+    this.stats.incLong(udpFinalCheckRequestsSentId, 1L);
+  }
+
+//  UDP final check is implemented using HeartbeatRequestMessage and HeartbeatMessage
+//  So the following code is commented out  
+//  public long getUdpFinalCheckRequestsReceived() {
+//    return this.stats.getLong(udpFinalCheckRequestsReceivedId);
+//  }
+//  
+//  public void incUdpFinalCheckRequestsReceived() {
+//    this.stats.incLong(udpFinalCheckRequestsReceivedId, 1L);
+//  }
+//  
+//  public long getUdpFinalCheckResponsesSent() {
+//    return this.stats.getLong(udpFinalCheckResponsesSentId);
+//  }
+//  
+//  public void incUdpFinalCheckResponsesSent() {
+//    this.stats.incLong(udpFinalCheckResponsesSentId, 1L);
+//  }
+  
+  public long getUdpFinalCheckResponsesReceived() {
+    return this.stats.getLong(udpFinalCheckResponsesReceivedId);
+  }
+  
+  public void incUdpFinalCheckResponsesReceived() {
+    this.stats.incLong(udpFinalCheckResponsesReceivedId, 1L);
+  }
+

MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD42 UPD39 UPD42 UPD42 UPD39 UPD42 INS39 INS42 INS8 UPD42 UPD39 UPD42 UPD39 UPD42 INS39 INS42 UPD39 UPD42 INS39 INS42 INS42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 INS42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 UPD39 UPD39 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS22 UPD42 INS42 INS22 UPD42 UPD42 UPD34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 UPD34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 UPD34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 UPD34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 INS34 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV45 UPD42 UPD45 INS42 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV45 UPD42 UPD45 INS42 UPD42 UPD45 INS42 UPD42 UPD45 INS42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV45 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV45 UPD45 INS42 UPD45 INS42 UPD45 INS42 INS9 UPD45 INS42 INS9 UPD45 INS42 INS9 UPD45 INS42 UPD45 INS9 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV45 UPD45 INS42 UPD45 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 UPD45 INS42 UPD45 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL32 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL45 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL34 DEL41 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL34 DEL38 DEL32 DEL21 DEL42 DEL34 DEL41 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL34 DEL38 DEL32 DEL21 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL44 DEL42 DEL42