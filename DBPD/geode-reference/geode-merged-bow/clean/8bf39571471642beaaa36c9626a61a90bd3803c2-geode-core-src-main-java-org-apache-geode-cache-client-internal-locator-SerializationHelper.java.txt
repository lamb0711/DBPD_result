Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static void writeServerLocations(Collection/*<ServerLocation>*/ serverLocations, DataOutput out) throws IOException {
-    if(serverLocations == null) {
+  private static void writeServerLocations(Collection/* <ServerLocation> */ serverLocations,
+      DataOutput out) throws IOException {
+    if (serverLocations == null) {
-    for(Iterator itr = serverLocations.iterator(); itr.hasNext(); ) {
+    for (Iterator itr = serverLocations.iterator(); itr.hasNext();) {
-  private static void writeBucketServerLocations(Collection<BucketServerLocation66> bucketServerLocations, DataOutput out) throws IOException {
-    if(bucketServerLocations == null) {
+  private static void writeBucketServerLocations(
+      Collection<BucketServerLocation66> bucketServerLocations, DataOutput out) throws IOException {
+    if (bucketServerLocations == null) {
-    for(Iterator itr = bucketServerLocations.iterator(); itr.hasNext(); ) {
+    for (Iterator itr = bucketServerLocations.iterator(); itr.hasNext();) {
-  
-  public static ArrayList/*<ServerLocation>*/ readServerLocationList(DataInput in) throws IOException, ClassNotFoundException {
+
+  public static ArrayList/* <ServerLocation> */ readServerLocationList(DataInput in)
+      throws IOException, ClassNotFoundException {
-    if(size < 0) {
+    if (size < 0) {
-    ArrayList serverLocations  = new ArrayList(size);
-    for(int i = 0; i < size; i++) {
+    ArrayList serverLocations = new ArrayList(size);
+    for (int i = 0; i < size; i++) {
-  
-  public static void writeServerLocationList(List/*<ServerLocation>*/ serverLocations, DataOutput out) throws IOException {
+
+  public static void writeServerLocationList(List/* <ServerLocation> */ serverLocations,
+      DataOutput out) throws IOException {
-  public static void writeServerLocationSet(Set/*<ServerLocation>*/ serverLocations, DataOutput out) throws IOException {
+  public static void writeServerLocationSet(Set/* <ServerLocation> */ serverLocations,
+      DataOutput out) throws IOException {
-  public static void writeBucketServerLocationSet(Set<BucketServerLocation66> bucketServerLocations, DataOutput out) throws IOException {
+  public static void writeBucketServerLocationSet(Set<BucketServerLocation66> bucketServerLocations,
+      DataOutput out) throws IOException {
-  
-  public static HashSet/*<ServerLocation>*/ readServerLocationSet(DataInput in) throws IOException, ClassNotFoundException {
+
+  public static HashSet/* <ServerLocation> */ readServerLocationSet(DataInput in)
+      throws IOException, ClassNotFoundException {
-    if(size < 0) {
+    if (size < 0) {
-    HashSet serverLocations  = new HashSet(size);
-    for(int i = 0; i < size; i++) {
+    HashSet serverLocations = new HashSet(size);
+    for (int i = 0; i < size; i++) {
-  
-  public static HashSet<BucketServerLocation66> readBucketServerLocationSet(DataInput in) throws IOException, ClassNotFoundException {
+
+  public static HashSet<BucketServerLocation66> readBucketServerLocationSet(DataInput in)
+      throws IOException, ClassNotFoundException {
-    if(size < 0) {
+    if (size < 0) {
-    HashSet bucketServerLocations  = new HashSet(size);
-    for(int i = 0; i < size; i++) {
+    HashSet bucketServerLocations = new HashSet(size);
+    for (int i = 0; i < size; i++) {
-  
-  private SerializationHelper() {
-  }
+
+  private SerializationHelper() {}

