GEODE-653: Add unit test for GMSHealthMonitor checkIfAvailable
Removed unused code
Minor javadoc corrections

- * to initiate suspect processing for any member. First is checks whether member is
- * responding or not. Then it informs to probable coordinators to remove that member from
+ * to initiate suspect processing for any member. First is checks whether the member is
+ * responding or not. Then it informs probable coordinators to remove that member from
- * if that member is alive. Then based on removal flag it initiate the suspect processing
+ * if that member is alive. Then based on removal flag it initiates the suspect processing
-//  List<SuspectRequest> suspectRequests = new ArrayList<SuspectRequest>();
-//  private RequestCollector<SuspectRequest> suspectRequestCollectorThread;
-
-   * Check for recent messaging activity from the given member
-   * @param suspectMember
-   * @return whether there has been activity within memberTimeout ms
-   */
-  private boolean checkRecentActivity(InternalDistributedMember suspectMember) {
-    TimeStamp ts = memberTimeStamps.get(suspectMember);
-    return (ts != null && (System.currentTimeMillis() - ts.getTime()) <= memberTimeout);
-  }
-  
-
-  /**
-  interface Callback<T> {
-    public void process(List<T> requests);
-  }
-
-  /***
-   * this thread will collect suspect message for some time interval
-   * then it send message to current coordinator first if its not in
-   * suspected list. if its in then it will send message to next probable
-   * coordinator. NOTE: this thread will not check-server for verification
-   * assuming many servers are going down and lets coordinator deals with it.
-   * 
-   * Should we wait for ack from coordinator/probable coordinator that I got
-   * request to suspect these members.
-   * 
-   */
-  class RequestCollector<T> extends Thread {
-    volatile boolean shutdown = false;
-    final List<T> listToTrack;
-    final Callback<T> callback;
-    final long timeout;
-
-    public RequestCollector(String name, ThreadGroup tg, List<T> l, Callback<T> c, long t) {
-      super(tg, name);
-      listToTrack = l;
-      callback = c;
-      timeout = t;
-    }
-
-    void shutdown() {
-      shutdown = true;
-      synchronized (listToTrack) {
-        listToTrack.notify();
-        interrupt();
-      }
-    }
-
-    boolean isShutdown() {
-      return shutdown;
-    }
-
-    @Override
-    public void run() {
-      List<T> requests = null;
-      logger.debug("Suspect thread is starting");
-      long okayToSendSuspectRequest = System.currentTimeMillis() + timeout;
-      try {
-        for (;;) {
-          synchronized (listToTrack) {
-            if (shutdown || services.getCancelCriterion().isCancelInProgress()) {
-              return;
-            }
-            if (listToTrack.isEmpty()) {
-              try {
-                logger.trace("Result collector is waiting");
-                listToTrack.wait();
-              } catch (InterruptedException e) {
-                return;
-              }
-            } else {
-              long now = System.currentTimeMillis();
-              if (now < okayToSendSuspectRequest) {
-                // sleep to let more suspect requests arrive
-                try {
-                  sleep(okayToSendSuspectRequest - now);
-                  continue;
-                } catch (InterruptedException e) {
-                  return;
-                }
-              } else {
-                if (requests == null) {
-                  requests = new ArrayList<T>(listToTrack);
-                } else {
-                  requests.addAll(listToTrack);
-                }
-                listToTrack.clear();
-                okayToSendSuspectRequest = System.currentTimeMillis() + timeout;
-              }
-            }
-          } // synchronized
-          if (requests != null && !requests.isEmpty()) {
-            if (logger != null && logger.isDebugEnabled()) {
-              logger.info("Health Monitor is sending {} member suspect requests to coordinator", requests.size());
-            }
-            callback.process(requests);
-            requests = null;
-          }
-        }
-      } finally {
-        shutdown = true;
-        logger.debug("Suspect thread is stopped");
-      }
-    }
-  }
-

UPD66 UPD66 UPD66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL27 DEL27 DEL36 DEL41 DEL8 DEL31 DEL42 DEL42 DEL73 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL31 DEL55 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL73 DEL42 DEL43 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL46 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL27 DEL32 DEL21 DEL18 DEL8 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL55