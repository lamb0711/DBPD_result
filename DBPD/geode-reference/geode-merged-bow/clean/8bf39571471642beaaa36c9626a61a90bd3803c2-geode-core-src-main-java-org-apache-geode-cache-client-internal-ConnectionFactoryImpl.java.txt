Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Creates connections, using a connection source to determine
- * which server to connect to.
+ * Creates connections, using a connection source to determine which server to connect to.
+ * 
-  
+
-  
-  //TODO  - GEODE-1746, the handshake holds state. It seems like the code depends 
-  //on all of the handshake operations happening in a single thread. I don't think we
-  //want that, need to refactor.
+
+  // TODO - GEODE-1746, the handshake holds state. It seems like the code depends
+  // on all of the handshake operations happening in a single thread. I don't think we
+  // want that, need to refactor.
-  
+
+   * 
-  
+
-    
-  public ConnectionFactoryImpl(ConnectionSource source,
-      EndpointManager endpointManager, InternalDistributedSystem sys,
-      int socketBufferSize, int handShakeTimeout, int readTimeout,
-      ClientProxyMembershipID proxyId, CancelCriterion cancelCriterion,
-      boolean usedByGateway, GatewaySender sender,long pingInterval,
-      boolean multiuserSecureMode, PoolImpl pool) {
+
+  public ConnectionFactoryImpl(ConnectionSource source, EndpointManager endpointManager,
+      InternalDistributedSystem sys, int socketBufferSize, int handShakeTimeout, int readTimeout,
+      ClientProxyMembershipID proxyId, CancelCriterion cancelCriterion, boolean usedByGateway,
+      GatewaySender sender, long pingInterval, boolean multiuserSecureMode, PoolImpl pool) {
-      this.socketCreator = SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.GATEWAY);
-      if (sender!= null && !sender.getGatewayTransportFilters().isEmpty()) {
+      this.socketCreator =
+          SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.GATEWAY);
+      if (sender != null && !sender.getGatewayTransportFilters().isEmpty()) {
-      //If configured use SSL properties for cache-server
-      this.socketCreator = SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.SERVER);
+      // If configured use SSL properties for cache-server
+      this.socketCreator =
+          SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.SERVER);
-  
+
-    } else if(forQueue) {
+    } else if (forQueue) {
-  
-  public ServerBlackList getBlackList() { 
+
+  public ServerBlackList getBlackList() {
-  
-  public Connection createClientToServerConnection(ServerLocation location, boolean forQueue)  throws GemFireSecurityException {
+
+  public Connection createClientToServerConnection(ServerLocation location, boolean forQueue)
+      throws GemFireSecurityException {
-    
+
-    
+
-      connection.connect(endpointManager, location, connHandShake,
-                         socketBufferSize, handShakeTimeout, readTimeout, 
-                         getCommMode(forQueue), this.gatewaySender, this.socketCreator);
+      connection.connect(endpointManager, location, connHandShake, socketBufferSize,
+          handShakeTimeout, readTimeout, getCommMode(forQueue), this.gatewaySender,
+          this.socketCreator);
-    } catch(CancelException e) {
-      //propagate this up, don't retry
+    } catch (CancelException e) {
+      // propagate this up, don't retry
-    } catch(GemFireSecurityException e) {
-      //propagate this up, don't retry
+    } catch (GemFireSecurityException e) {
+      // propagate this up, don't retry
-    } catch(GatewayConfigurationException e) {
-    //propagate this up, don't retry
+    } catch (GatewayConfigurationException e) {
+      // propagate this up, don't retry
-    } catch(ServerRefusedConnectionException src) {
-      //propagate this up, don't retry      	
-      logger.warn(LocalizedMessage.create(LocalizedStrings.AutoConnectionSourceImpl_COULD_NOT_CREATE_A_NEW_CONNECTION_TO_SERVER_0, src.getMessage()));
+    } catch (ServerRefusedConnectionException src) {
+      // propagate this up, don't retry
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.AutoConnectionSourceImpl_COULD_NOT_CREATE_A_NEW_CONNECTION_TO_SERVER_0,
+          src.getMessage()));
-      if (e.getMessage() != null &&
-          (e.getMessage().equals("Connection refused")
-           || e.getMessage().equals("Connection reset"))) { // this is the most common case, so don't print an exception
+      if (e.getMessage() != null && (e.getMessage().equals("Connection refused")
+          || e.getMessage().equals("Connection reset"))) { // this is the most common case, so don't
+                                                           // print an exception
-      } else {//print a warning with the exception stack trace
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectException_COULD_NOT_CONNECT_TO_0, location), e);
+      } else {// print a warning with the exception stack trace
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.ConnectException_COULD_NOT_CONNECT_TO_0, location), e);
-      if(!initialized) {
+      if (!initialized) {
-    
+
-          Long uniqueID = (Long)AuthenticateUserOp.executeOn(conn, pool);
+          Long uniqueID = (Long) AuthenticateUserOp.executeOn(conn, pool);
-    Set blackListedServers = blackList.getBadServers();  
+    Set blackListedServers = blackList.getBadServers();
-  
-  public Connection createClientToServerConnection(Set excludedServers) throws GemFireSecurityException {
+
+  public Connection createClientToServerConnection(Set excludedServers)
+      throws GemFireSecurityException {
-    Set blackListedServers = blackList.getBadServers();  
+    Set blackListedServers = blackList.getBadServers();
-//    long startTime = System.currentTimeMillis();
+    // long startTime = System.currentTimeMillis();
-    
+
-      if(server == null) {
-        
-        if(tryBlackList) {
+      if (server == null) {
+
+        if (tryBlackList) {
-          if(excludedServers.size()<size) {
+          if (excludedServers.size() < size) {
-        if(fatalException!=null) {
+        if (fatalException != null) {
-    
+
-      } catch(CancelException e) {
-      //propagate this up immediately
+      } catch (CancelException e) {
+        // propagate this up immediately
-      } catch(GemFireSecurityException e) {
-        //propagate this up immediately
-        throw e; 
-      } catch(GatewayConfigurationException e) {
-        //propagate this up immediately
+      } catch (GemFireSecurityException e) {
+        // propagate this up immediately
-      } catch(ServerRefusedConnectionException srce) {
+      } catch (GatewayConfigurationException e) {
+        // propagate this up immediately
+        throw e;
+      } catch (ServerRefusedConnectionException srce) {
-          logger.debug("ServerRefusedConnectionException attempting to connect to {}", server , srce);
+          logger.debug("ServerRefusedConnectionException attempting to connect to {}", server,
+              srce);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ConnectException_COULD_NOT_CONNECT_TO_0, server), e);
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.ConnectException_COULD_NOT_CONNECT_TO_0, server), e);
-      
+
-    } while(conn == null);
-      
-//    if(conn == null) {
-//      logger.fine("Unable to create a connection in the allowed time.");
-//      
-//      if(fatalException!=null) {
-//        throw fatalException;
-//      }
-//    }
+    } while (conn == null);
+
+    // if(conn == null) {
+    // logger.fine("Unable to create a connection in the allowed time.");
+    //
+    // if(fatalException!=null) {
+    // throw fatalException;
+    // }
+    // }
-  
-  public ClientUpdater createServerToClientConnection(Endpoint endpoint,
-      QueueManager qManager, boolean isPrimary, ClientUpdater failedUpdater) {
-    String clientUpdateName = CacheClientUpdater.CLIENT_UPDATER_THREAD_NAME
-    + " on " + endpoint.getMemberId() + " port " + endpoint.getLocation().getPort();
+
+  public ClientUpdater createServerToClientConnection(Endpoint endpoint, QueueManager qManager,
+      boolean isPrimary, ClientUpdater failedUpdater) {
+    String clientUpdateName = CacheClientUpdater.CLIENT_UPDATER_THREAD_NAME + " on "
+        + endpoint.getMemberId() + " port " + endpoint.getLocation().getPort();
-//  Launch the thread
-    CacheClientUpdater updater = new CacheClientUpdater(clientUpdateName,
-        endpoint.getLocation(), isPrimary, ds, new HandShake(this.handshake), qManager,
-        endpointManager, endpoint, handShakeTimeout, this.socketCreator);
-    
-    if(!updater.isConnected()) {
+    // Launch the thread
+    CacheClientUpdater updater = new CacheClientUpdater(clientUpdateName, endpoint.getLocation(),
+        isPrimary, ds, new HandShake(this.handshake), qManager, endpointManager, endpoint,
+        handShakeTimeout, this.socketCreator);
+
+    if (!updater.isConnected()) {
-    
+
-//  Wait for the client update thread to be ready
-//    if (!updater.waitForInitialization()) {
-      // Yogesh : This doesn't wait for notify if the updater
-      // thread exits from the run in case of Exception in CCU thread
-      // Yogesh : fix for 36690
-      // because when CCU thread gets a ConnectException, it comes out of run method
-      // and when a thread is no more running it notifies all the waiting threads on the thread object.
-      // so above wait will come out irrelevant of notify from CCU thread, when CCU thread has got an exception
-      // To avoid this problem we check isAlive before returning from this method.
-//      if (logger != null && logger.infoEnabled()) {
-//        logger.info(LocalizedStrings.AutoConnectionSourceImpl_0_NOT_STARTED_1, new Object[] {this, clientUpdateName});
-//      }
-//      return null;
-//    }else {
-//      if (logger != null && logger.infoEnabled()) {
-//        logger.info(LocalizedStrings.AutoConnectionSourceImpl_0_STARTED_1, new Object[] {this, clientUpdateName});
-//      }
-//    }
+    // Wait for the client update thread to be ready
+    // if (!updater.waitForInitialization()) {
+    // Yogesh : This doesn't wait for notify if the updater
+    // thread exits from the run in case of Exception in CCU thread
+    // Yogesh : fix for 36690
+    // because when CCU thread gets a ConnectException, it comes out of run method
+    // and when a thread is no more running it notifies all the waiting threads on the thread
+    // object.
+    // so above wait will come out irrelevant of notify from CCU thread, when CCU thread has got an
+    // exception
+    // To avoid this problem we check isAlive before returning from this method.
+    // if (logger != null && logger.infoEnabled()) {
+    // logger.info(LocalizedStrings.AutoConnectionSourceImpl_0_NOT_STARTED_1, new Object[] {this,
+    // clientUpdateName});
+    // }
+    // return null;
+    // }else {
+    // if (logger != null && logger.infoEnabled()) {
+    // logger.info(LocalizedStrings.AutoConnectionSourceImpl_0_STARTED_1, new Object[] {this,
+    // clientUpdateName});
+    // }
+    // }

UPD66 DEL66