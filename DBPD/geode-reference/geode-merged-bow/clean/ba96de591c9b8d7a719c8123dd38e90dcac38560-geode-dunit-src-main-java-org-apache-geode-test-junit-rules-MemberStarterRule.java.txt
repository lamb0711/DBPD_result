GEODE-5892: test rules should not modify the user.dir system property (#2651)


-import java.io.IOException;
+import java.util.ArrayList;
+import org.apache.commons.io.FileUtils;
-import org.junit.rules.TemporaryFolder;
+ *
+ * The rule will try to clean up the working dir as best as it can. Any first level children
+ * created in the test will be cleaned up after the test.
-
-  protected String oldUserDir;
-
-  protected transient TemporaryFolder temporaryFolder;
-  protected File workingDir;
+  private List<File> firstLevelChildrenFile = new ArrayList<>();
+  private boolean cleanWorkingDir = true;
+
-    oldUserDir = System.getProperty("user.dir");
+    firstLevelChildrenFile = Arrays.asList(getWorkingDir().listFiles());
-    if (temporaryFolder != null) {
-      temporaryFolder.delete();
-    }
-
-    if (oldUserDir == null) {
-      System.clearProperty("user.dir");
-    } else {
-      System.setProperty("user.dir", oldUserDir);
-    }
+    // delete the first-level children files that are created in the tests
+    if (cleanWorkingDir)
+      Arrays.stream(getWorkingDir().listFiles())
+          // do not delete the pre-existing files
+          .filter(f -> !firstLevelChildrenFile.contains(f))
+          // do not delete the dunit folder that might have been created by dunit launcher
+          .filter(f -> !(f.isDirectory() && f.getName().equals("dunit")))
+          .forEach(FileUtils::deleteQuietly);
-  public T withWorkingDir(File workingDir) {
-    this.workingDir = workingDir;
-    if (workingDir != null) {
-      System.setProperty("user.dir", workingDir.toString());
-    }
-    return (T) this;
-  }
-
-  /**
-   * create a working dir using temporaryFolder. Use with caution, this sets "user.dir" system
-   * property that not approved by JDK
-   */
-  public T withWorkingDir() {
-    temporaryFolder = new TemporaryFolder();
-    try {
-      temporaryFolder.create();
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage(), e);
-    }
-    withWorkingDir(temporaryFolder.getRoot().getAbsoluteFile());
-    return (T) this;
-  }
-
+  public void setCleanWorkingDir(boolean cleanWorkingDir) {
+    this.cleanWorkingDir = cleanWorkingDir;
+  }
+
-    return workingDir;
+    return new File(System.getProperty("user.dir"));

MOV26 MOV26 MOV23 MOV23 MOV31 UPD40 UPD40 INS31 UPD83 INS74 UPD83 INS39 MOV78 MOV83 MOV39 MOV42 INS8 INS39 INS42 INS44 INS66 INS66 INS43 MOV43 UPD42 INS14 UPD42 INS9 INS21 MOV21 MOV21 MOV21 INS25 INS39 INS42 UPD42 MOV42 INS74 INS7 INS42 INS21 INS14 INS43 INS42 INS32 INS32 INS22 INS42 MOV43 MOV32 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS90 INS52 INS42 INS32 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS32 UPD42 MOV42 INS86 INS59 INS38 UPD42 MOV42 UPD42 MOV42 INS32 INS59 INS38 INS42 INS36 INS32 UPD42 MOV42 INS42 INS32 INS27 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD45 MOV45 INS42 UPD42 MOV42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL45 DEL32 DEL21 DEL8 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL52 DEL11 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL52 DEL11 DEL41 DEL42