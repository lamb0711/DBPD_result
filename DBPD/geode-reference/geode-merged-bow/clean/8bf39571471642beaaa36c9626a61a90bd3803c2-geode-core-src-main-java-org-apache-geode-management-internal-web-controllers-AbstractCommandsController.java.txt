Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The AbstractCommandsController class is the abstract base class encapsulating common functionality across all
- * Management Controller classes that expose REST API web service endpoints (URLs/URIs) for GemFire shell (Gfsh)
- * commands.
+ * The AbstractCommandsController class is the abstract base class encapsulating common
+ * functionality across all Management Controller classes that expose REST API web service endpoints
+ * (URLs/URIs) for GemFire shell (Gfsh) commands.
-  
+
-  @ResponseStatus(value=HttpStatus.UNAUTHORIZED, reason="Not authenticated")  // 401
+  @ResponseStatus(value = HttpStatus.UNAUTHORIZED, reason = "Not authenticated") // 401
-  @ResponseStatus(value=HttpStatus.FORBIDDEN, reason="Access Denied")  // 403
+  @ResponseStatus(value = HttpStatus.FORBIDDEN, reason = "Access Denied") // 403
-   * Asserts the argument is valid, as determined by the caller passing the result of an evaluated expression to this
-   * assertion.
+   * Asserts the argument is valid, as determined by the caller passing the result of an evaluated
+   * expression to this assertion.
-   * @param validArg a boolean value indicating the evaluation of the expression validating the argument.
-   * @param message a String value used as the message when constructing an IllegalArgumentException.
+   * @param validArg a boolean value indicating the evaluation of the expression validating the
+   *        argument.
+   * @param message a String value used as the message when constructing an
+   *        IllegalArgumentException.
-  protected static void assertArgument(final boolean validArg, final String message, final Object... args) {
+  protected static void assertArgument(final boolean validArg, final String message,
+      final Object... args) {
-   * @param message the String value used as the message when constructing and throwing a NullPointerException.
+   * @param message the String value used as the message when constructing and throwing a
+   *        NullPointerException.
-  protected static void assertNotNull(final Object obj, final String message, final Object... args) {
+  protected static void assertNotNull(final Object obj, final String message,
+      final Object... args) {
-   * Asserts whether state, based on the evaluation of a conditional expression, passed to this assertion is valid.
+   * Asserts whether state, based on the evaluation of a conditional expression, passed to this
+   * assertion is valid.
-   * @param validState a boolean value indicating the evaluation of the expression from which the conditional state
-   * is based.  For example, a caller might use an expression of the form (initableObj.isInitialized()).
+   * @param validState a boolean value indicating the evaluation of the expression from which the
+   *        conditional state is based. For example, a caller might use an expression of the form
+   *        (initableObj.isInitialized()).
-  protected static void assertState(final boolean validState, final String message, final Object... args) {
+  protected static void assertState(final boolean validState, final String message,
+      final Object... args) {
-   * Decodes the encoded String value using the default encoding UTF-8.  It is assumed the String value was encoded
-   * with the URLEncoder using the UTF-8 encoding.  This method handles UnsupportedEncodingException by just returning
-   * the encodedValue.
+   * Decodes the encoded String value using the default encoding UTF-8. It is assumed the String
+   * value was encoded with the URLEncoder using the UTF-8 encoding. This method handles
+   * UnsupportedEncodingException by just returning the encodedValue.
-   * Decodes the encoded String value using the specified encoding (such as UTF-8).  It is assumed the String value
-   * was encoded with the URLEncoder using the specified encoding.  This method handles UnsupportedEncodingException
-   * by just returning the encodedValue.
+   * Decodes the encoded String value using the specified encoding (such as UTF-8). It is assumed
+   * the String value was encoded with the URLEncoder using the specified encoding. This method
+   * handles UnsupportedEncodingException by just returning the encodedValue.
-   * @return the decoded value of the String or encodedValue if the specified encoding is unsupported.
+   * @return the decoded value of the String or encodedValue if the specified encoding is
+   *         unsupported.
-   * @return an encoded value of the String using the default encoding UTF-8 or value if the UTF-8 encoding
-   * is unsupported.
+   * @return an encoded value of the String using the default encoding UTF-8 or value if the UTF-8
+   *         encoding is unsupported.
-   * @return an encoded value of the String using the specified encoding or value if the specified encoding
-   * is unsupported.
+   * @return an encoded value of the String using the specified encoding or value if the specified
+   *         encoding is unsupported.
-   * Determines whether the specified Object has value, which is determined by a non-null Object reference.
+   * Determines whether the specified Object has value, which is determined by a non-null Object
+   * reference.
-      : (value instanceof String ? hasValue((String) value) : value != null));
+        : (value instanceof String ? hasValue((String) value) : value != null));
-   * Determines whether the specified String has value, determined by whether the String is non-null, not empty
-   * and not blank.
+   * Determines whether the specified String has value, determined by whether the String is
+   * non-null, not empty and not blank.
-   * Determines whether the specified String array has any value, which is determined by a non-null String array
-   * reference along with containing at least 1 non-null, not empty and not blank element.
+   * Determines whether the specified String array has any value, which is determined by a non-null
+   * String array reference along with containing at least 1 non-null, not empty and not blank
+   * element.
-  protected /*static*/ URI toUri(final String path, final String scheme) {
-    return ServletUriComponentsBuilder.fromCurrentContextPath()
-        .path(REST_API_VERSION).path(path).scheme(scheme).build().toUri();
+  protected /* static */ URI toUri(final String path, final String scheme) {
+    return ServletUriComponentsBuilder.fromCurrentContextPath().path(REST_API_VERSION).path(path)
+        .scheme(scheme).build().toUri();
-   * Handles any Exception thrown by a REST API web service endpoint, HTTP request handler method during the invocation
-   * and processing of a command.
+   * Handles any Exception thrown by a REST API web service endpoint, HTTP request handler method
+   * during the invocation and processing of a command.
-   * @return a ResponseEntity with an appropriate HTTP status code (500 - Internal Server Error) and HTTP response body
-   * containing the stack trace of the Exception.
+   * @return a ResponseEntity with an appropriate HTTP status code (500 - Internal Server Error) and
+   *         HTTP response body containing the stack trace of the Exception.
-    dataBinder.registerCustomEditor(String[].class, new StringArrayPropertyEditor(
-      StringArrayPropertyEditor.DEFAULT_SEPARATOR, false));
+    dataBinder.registerCustomEditor(String[].class,
+        new StringArrayPropertyEditor(StringArrayPropertyEditor.DEFAULT_SEPARATOR, false));
-   * Logs the client's HTTP (web) request including details of the HTTP headers and request parameters along with the
-   * web request context and description.
+   * Logs the client's HTTP (web) request including details of the HTTP headers and request
+   * parameters along with the web request context and description.
-      for (Iterator<String> it = request.getHeaderNames(); it.hasNext(); ) {
+      for (Iterator<String> it = request.getHeaderNames(); it.hasNext();) {
-        headers.put(headerName, ArrayUtils.toString((Object[]) request.getHeaderValues(headerName)));
+        headers.put(headerName,
+            ArrayUtils.toString((Object[]) request.getHeaderValues(headerName)));
-      final Map<String, String> parameters = new HashMap<String, String>(request.getParameterMap().size());
+      final Map<String, String> parameters =
+          new HashMap<String, String>(request.getParameterMap().size());
-      for (Iterator<String> it = request.getParameterNames(); it.hasNext(); ) {
+      for (Iterator<String> it = request.getParameterNames(); it.hasNext();) {
-        parameters.put(parameterName, ArrayUtils.toString((Object[]) request.getParameterValues(parameterName)));
+        parameters.put(parameterName,
+            ArrayUtils.toString((Object[]) request.getParameterValues(parameterName)));
-        request.getDescription(false), request.getContextPath(), headers, parameters);
+          request.getDescription(false), request.getContextPath(), headers, parameters);
-  
+
-   * Gets a reference to the platform MBeanServer running in this JVM process.  The MBeanServer instance constitutes
-   * a connection to the MBeanServer.
+   * Gets a reference to the platform MBeanServer running in this JVM process. The MBeanServer
+   * instance constitutes a connection to the MBeanServer.
-   * Gets the MemberMXBean from the JVM Platform MBeanServer for the specified member, identified by name or ID
-   * in the GemFire cluster.
+   * Gets the MemberMXBean from the JVM Platform MBeanServer for the specified member, identified by
+   * name or ID in the GemFire cluster.
-   * @throws IllegalStateException if no MemberMXBean could be found for GemFire member with ID or name.
-   * @throws RuntimeException wrapping the MalformedObjectNameException if the ObjectName pattern is malformed.
+   * @throws IllegalStateException if no MemberMXBean could be found for GemFire member with ID or
+   *         name.
+   * @throws RuntimeException wrapping the MalformedObjectNameException if the ObjectName pattern is
+   *         malformed.
-   * @see javax.management.MBeanServer#queryNames(javax.management.ObjectName, javax.management.QueryExp)
-   * @see javax.management.JMX#newMXBeanProxy(javax.management.MBeanServerConnection, javax.management.ObjectName, Class)
+   * @see javax.management.MBeanServer#queryNames(javax.management.ObjectName,
+   *      javax.management.QueryExp)
+   * @see javax.management.JMX#newMXBeanProxy(javax.management.MBeanServerConnection,
+   *      javax.management.ObjectName, Class)
-      final String objectNamePattern = ManagementConstants.OBJECTNAME__PREFIX.concat("type=Member,*");
+      final String objectNamePattern =
+          ManagementConstants.OBJECTNAME__PREFIX.concat("type=Member,*");
-      // NOTE throws a MalformedObjectNameException, but this should not happen since we constructed the ObjectName above
+      // NOTE throws a MalformedObjectNameException, but this should not happen since we constructed
+      // the ObjectName above
-      final QueryExp query = Query.or(
-        Query.eq(Query.attr("Name"), Query.value(memberNameId)),
-        Query.eq(Query.attr("Id"), Query.value(memberNameId))
-      );
+      final QueryExp query = Query.or(Query.eq(Query.attr("Name"), Query.value(memberNameId)),
+          Query.eq(Query.attr("Id"), Query.value(memberNameId)));
-        "No MemberMXBean with ObjectName (%1$s) based on Query (%2$s) was found in the Platform MBeanServer for member (%3$s)!",
+          "No MemberMXBean with ObjectName (%1$s) based on Query (%2$s) was found in the Platform MBeanServer for member (%3$s)!",
-    }
-    catch (MalformedObjectNameException e) {
+    } catch (MalformedObjectNameException e) {
-   * Determines whether the desired MemberMXBean, identified by name or ID, was found in the platform MBeanServer
-   * of this JVM process.
+   * Determines whether the desired MemberMXBean, identified by name or ID, was found in the
+   * platform MBeanServer of this JVM process.
-   * Lookup operation for the MemberMXBean representing the Manager in the GemFire cluster.  This method gets
-   * an instance fo the Platform MBeanServer for this JVM process and uses it to lookup the MemberMXBean for the
-   * GemFire Manager based on the ObjectName declared in the DistributedSystemMXBean.getManagerObjectName() operation.
+   * Lookup operation for the MemberMXBean representing the Manager in the GemFire cluster. This
+   * method gets an instance fo the Platform MBeanServer for this JVM process and uses it to lookup
+   * the MemberMXBean for the GemFire Manager based on the ObjectName declared in the
+   * DistributedSystemMXBean.getManagerObjectName() operation.
-   * @see #createMemberMXBeanForManagerUsingProxy(javax.management.MBeanServer, javax.management.ObjectName)
+   * @see #createMemberMXBeanForManagerUsingProxy(javax.management.MBeanServer,
+   *      javax.management.ObjectName)
-        MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
+          MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
-        distributedSystemMXBean.getMemberObjectName());
+          distributedSystemMXBean.getMemberObjectName());
-   * Creates a Proxy using the Platform MBeanServer and ObjectName in order to access attributes and invoke operations
-   * on the GemFire Manager's MemberMXBean.
+   * Creates a Proxy using the Platform MBeanServer and ObjectName in order to access attributes and
+   * invoke operations on the GemFire Manager's MemberMXBean.
-   * @param managingMemberObjectName the ObjectName of the GemFire Manager's MemberMXBean registered in
-   * the Platform MBeanServer.
-   * @return a Proxy for accessing attributes and invoking operations on the GemFire Manager's MemberMXBean.
-   * @see javax.management.JMX#newMXBeanProxy(javax.management.MBeanServerConnection, javax.management.ObjectName, Class)
+   * @param managingMemberObjectName the ObjectName of the GemFire Manager's MemberMXBean registered
+   *        in the Platform MBeanServer.
+   * @return a Proxy for accessing attributes and invoking operations on the GemFire Manager's
+   *         MemberMXBean.
+   * @see javax.management.JMX#newMXBeanProxy(javax.management.MBeanServerConnection,
+   *      javax.management.ObjectName, Class)
-  private MemberMXBean createMemberMXBeanForManagerUsingProxy(final MBeanServer server, final ObjectName managingMemberObjectName) {
+  private MemberMXBean createMemberMXBeanForManagerUsingProxy(final MBeanServer server,
+      final ObjectName managingMemberObjectName) {
-   * Gets the environment setup during this HTTP/command request for the current command process execution.
+   * Gets the environment setup during this HTTP/command request for the current command process
+   * execution.
-   * Adds the named option to the command String to be processed if the named option has value or the named option is
-   * present in the HTTP request.
+   * Adds the named option to the command String to be processed if the named option has value or
+   * the named option is present in the HTTP request.
-   * @param request the WebRequest object encapsulating the details (headers, request parameters and message body)
-   * of the user HTTP request.
+   * @param request the WebRequest object encapsulating the details (headers, request parameters and
+   *        message body) of the user HTTP request.
-  protected void addCommandOption(final WebRequest request,
-                                  final CommandStringBuilder command,
-                                  final String optionName,
-                                  final Object optionValue)
-  {
+  protected void addCommandOption(final WebRequest request, final CommandStringBuilder command,
+      final String optionName, final Object optionValue) {
-      final String optionValueString = (optionValue instanceof String[] ?
-        StringUtils.concat((String[]) optionValue, StringUtils.COMMA_DELIMITER) : String.valueOf(optionValue));
+      final String optionValueString = (optionValue instanceof String[]
+          ? StringUtils.concat((String[]) optionValue, StringUtils.COMMA_DELIMITER)
+          : String.valueOf(optionValue));
-    }
-    else if (request != null && request.getParameterMap().containsKey(optionName)) {
+    } else if (request != null && request.getParameterMap().containsKey(optionName)) {
-    }
-    else {
+    } else {
-   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh).  Note, Gfsh performs
-   * validation of the command during parsing before sending the command to the Manager for processing.
+   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh). Note,
+   * Gfsh performs validation of the command during parsing before sending the command to the
+   * Manager for processing.
-   * @param command a String value containing a valid command String as would be entered by the user in Gfsh.
-   * @return a result of the command execution as a String, typically marshalled in JSON to be serialized back to Gfsh.
+   * @param command a String value containing a valid command String as would be entered by the user
+   *        in Gfsh.
+   * @return a result of the command execution as a String, typically marshalled in JSON to be
+   *         serialized back to Gfsh.
-  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command){
+  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command) {
-  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command, final Map<String, String> environment, final byte[][] fileData){
+  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command,
+      final Map<String, String> environment, final byte[][] fileData) {
-        }
-        catch(NotAuthorizedException ex){
+        } catch (NotAuthorizedException ex) {
-        }
-        catch(Exception ex){
+        } catch (Exception ex) {
-   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh).  Note, Gfsh performs
-   * validation of the command during parsing before sending the command to the Manager for processing.
+   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh). Note,
+   * Gfsh performs validation of the command during parsing before sending the command to the
+   * Manager for processing.
-   * @param command a String value containing a valid command String as would be entered by the user in Gfsh.
-   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file data streamed to
-   * the Manager, usually for the 'deploy' Gfsh command.
-   * @return a result of the command execution as a String, typically marshalled in JSON to be serialized back to Gfsh.
+   * @param command a String value containing a valid command String as would be entered by the user
+   *        in Gfsh.
+   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file
+   *        data streamed to the Manager, usually for the 'deploy' Gfsh command.
+   * @return a result of the command execution as a String, typically marshalled in JSON to be
+   *         serialized back to Gfsh.
-   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh).  Note, Gfsh performs
-   * validation of the command during parsing before sending the command to the Manager for processing.
+   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh). Note,
+   * Gfsh performs validation of the command during parsing before sending the command to the
+   * Manager for processing.
-   * @param command a String value containing a valid command String as would be entered by the user in Gfsh.
-   * @param environment a Map containing any environment configuration settings to be used by the Manager during
-   * command execution.  For example, when executing commands originating from Gfsh, the key/value pair (APP_NAME=gfsh)
-   * is a specified mapping in the "environment.  Note, it is common for the REST API to act as a bridge, or an adapter
-   * between Gfsh and the Manager, and thus need to specify this key/value pair mapping.
-   * @return a result of the command execution as a String, typically marshalled in JSON to be serialized back to Gfsh.
+   * @param command a String value containing a valid command String as would be entered by the user
+   *        in Gfsh.
+   * @param environment a Map containing any environment configuration settings to be used by the
+   *        Manager during command execution. For example, when executing commands originating from
+   *        Gfsh, the key/value pair (APP_NAME=gfsh) is a specified mapping in the "environment.
+   *        Note, it is common for the REST API to act as a bridge, or an adapter between Gfsh and
+   *        the Manager, and thus need to specify this key/value pair mapping.
+   * @return a result of the command execution as a String, typically marshalled in JSON to be
+   *         serialized back to Gfsh.
-   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh).  Note, Gfsh performs
-   * validation of the command during parsing before sending the command to the Manager for processing.
+   * Executes the specified command as entered by the user using the GemFire Shell (Gfsh). Note,
+   * Gfsh performs validation of the command during parsing before sending the command to the
+   * Manager for processing.
-   * @param command a String value containing a valid command String as would be entered by the user in Gfsh.
-   * @param environment a Map containing any environment configuration settings to be used by the Manager during
-   * command execution.  For example, when executing commands originating from Gfsh, the key/value pair (APP_NAME=gfsh)
-   * is a specified mapping in the "environment.  Note, it is common for the REST API to act as a bridge, or an adapter
-   * between Gfsh and the Manager, and thus need to specify this key/value pair mapping.
-   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file data streamed to
-   * the Manager, usually for the 'deploy' Gfsh command.
-   * @return a result of the command execution as a String, typically marshalled in JSON to be serialized back to Gfsh.
+   * @param command a String value containing a valid command String as would be entered by the user
+   *        in Gfsh.
+   * @param environment a Map containing any environment configuration settings to be used by the
+   *        Manager during command execution. For example, when executing commands originating from
+   *        Gfsh, the key/value pair (APP_NAME=gfsh) is a specified mapping in the "environment.
+   *        Note, it is common for the REST API to act as a bridge, or an adapter between Gfsh and
+   *        the Manager, and thus need to specify this key/value pair mapping.
+   * @param fileData is a two-dimensional byte array containing the pathnames and contents of file
+   *        data streamed to the Manager, usually for the 'deploy' Gfsh command.
+   * @return a result of the command execution as a String, typically marshalled in JSON to be
+   *         serialized back to Gfsh.
-  protected String processCommand(final String command, final Map<String, String> environment, final byte[][] fileData) {
-    logger.info(LogMarker.CONFIG, "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
-      environment, (fileData != null));
-    return getManagingMemberMXBean().processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+  protected String processCommand(final String command, final Map<String, String> environment,
+      final byte[][] fileData) {
+    logger.info(LogMarker.CONFIG,
+        "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
+        environment, (fileData != null));
+    return getManagingMemberMXBean().processCommand(command, environment,
+        ArrayUtils.toByteArray(fileData));

