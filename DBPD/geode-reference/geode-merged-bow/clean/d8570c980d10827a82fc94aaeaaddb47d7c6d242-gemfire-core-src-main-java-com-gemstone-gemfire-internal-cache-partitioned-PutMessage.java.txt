GEODE-324: defer deserialization of old value in PR put

When a PR put returns the old value our internal messages were deserializing
the values before we get back to the user thread that initiated the operation.
If a thread local class loader is used for the class we need to load during
deserialization then the early deserialization will fail.

Now the deserialization is delayed until the serialized old value gets through
our messaging layer and back to the thread that performed the pr put.

Added junit tests that verify that both PutReplyMessage classes no longer
deserialize their old value.

+import com.gemstone.gemfire.internal.cache.RemotePutMessage;
+import com.gemstone.gemfire.internal.cache.VMCachedDeserializable;
+    /**
+     * Set to true by the import methods if the oldValue
+     * is already serialized. In that case toData
+     * should just copy the bytes to the stream.
+     * In either case fromData just calls readObject.
+     */
+    private transient boolean oldValueIsSerialized;
+
-    private PutReplyMessage(int processorId,
+    // package access for unit test
+    PutReplyMessage(int processorId,
-    @Override
+   @Override
-      DataSerializer.writeObject(this.oldValue, out);
+      Object ov = getOldValue();
+      RemotePutMessage.PutReplyMessage.oldValueToData(out, getOldValue(), this.oldValueIsSerialized);
+      this.oldValueIsSerialized = isSerialized;
-      this.oldValue = ov;
+      importOldObject(ov, isSerialized);

INS26 INS26 INS40 INS40 INS23 INS29 INS83 INS83 INS39 INS59 INS65 INS42 INS60 INS21 INS66 INS66 INS66 INS66 INS43 INS59 MOV7 INS7 INS32 INS42 INS42 INS32 INS40 UPD42 UPD42 INS32 MOV22 MOV42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV52 MOV42 INS52 INS42 DEL83 DEL42