GEODE-5971: refactor StartJvisualvm command to use new ResultModel (#2974)


+import java.io.IOException;
+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.GemFireException;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.InfoResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result startJVisualVM(
+  public ResultModel startJVisualVM(
-          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs) {
-    try {
-      String[] jvisualvmCommandLine = createJVisualVMCommandLine(jvmArgs);
+          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs)
+      throws IOException {
-      if (isDebugging()) {
-        getGfsh().printAsInfo(
-            String.format("JVisualVM command-line (%1$s)", Arrays.toString(jvisualvmCommandLine)));
-      }
+    String jvisualvmProcessOutput = getProcessOutput(jvmArgs);
-      Process jvisualvmProcess = Runtime.getRuntime().exec(jvisualvmCommandLine);
+    ResultModel result = new ResultModel();
+    InfoResultModel infoResultModel = result.addInfo();
-      getGfsh().printAsInfo(CliStrings.START_JVISUALVM__RUN);
-
-      String jvisualvmProcessOutput = waitAndCaptureProcessStandardErrorStream(jvisualvmProcess);
-
-      InfoResultData infoResultData = ResultBuilder.createInfoResultData();
-
-      if (StringUtils.isNotBlank(jvisualvmProcessOutput)) {
-        infoResultData.addLine(StringUtils.LINE_SEPARATOR);
-        infoResultData.addLine(jvisualvmProcessOutput);
-      }
-
-      return ResultBuilder.buildResult(infoResultData);
-    } catch (GemFireException | IllegalStateException | IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createShellClientErrorResult(
-          String.format(CliStrings.START_JVISUALVM__ERROR_MESSAGE, t.getMessage()));
+    if (StringUtils.isNotBlank(jvisualvmProcessOutput)) {
+      infoResultModel.addLine(System.lineSeparator());
+      infoResultModel.addLine(jvisualvmProcessOutput);
+
+    return result;
+
-  protected String[] createJVisualVMCommandLine(final String[] jvmArgs) {
+  String getProcessOutput(String[] jvmArgs) throws IOException {
+    String[] jvisualvmCommandLine = createJVisualVMCommandLine(jvmArgs);
+
+    if (isDebugging()) {
+      getGfsh().printAsInfo(
+          String.format("JVisualVM command-line (%1$s)", Arrays.toString(jvisualvmCommandLine)));
+    }
+
+    Process jvisualvmProcess = Runtime.getRuntime().exec(jvisualvmCommandLine);
+    getGfsh().printAsInfo(CliStrings.START_JVISUALVM__RUN);
+    return waitAndCaptureProcessStandardErrorStream(jvisualvmProcess);
+  }
+
+  String[] createJVisualVMCommandLine(final String[] jvmArgs) {

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 MOV77 MOV77 MOV83 UPD43 MOV43 MOV42 MOV44 INS43 INS8 MOV43 INS42 INS44 INS43 MOV8 UPD42 UPD42 MOV42 INS60 INS60 INS60 INS25 INS41 INS5 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 MOV32 INS8 INS42 INS43 INS85 MOV32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS14 UPD42 MOV42 INS42 INS32 INS21 MOV21 INS42 INS42 UPD42 MOV42 INS43 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL43 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL43 DEL42 DEL44 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83