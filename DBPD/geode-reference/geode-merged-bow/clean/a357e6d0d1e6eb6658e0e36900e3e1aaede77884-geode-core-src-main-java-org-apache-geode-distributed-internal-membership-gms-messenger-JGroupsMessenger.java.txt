GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import java.util.concurrent.TimeoutException;
-import org.apache.geode.ForcedDisconnectException;
-import org.apache.geode.GemFireConfigException;
-import org.apache.geode.GemFireIOException;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.InternalGemFireException;
-import org.apache.geode.SystemConnectException;
-import org.apache.geode.distributed.DistributedSystemDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberShunnedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.internal.tcp.MemberShunnedException;
+
-      throw new InternalGemFireException("unable to establish a JGroups receiver", e);
+      throw new IllegalStateException("unable to establish a JGroups receiver", e);
-  public void init(Services<ID> s) {
+  public void init(Services<ID> s) throws MembershipConfigurationException {
-      throw new GemFireConfigException(
+      throw new MembershipConfigurationException(
-      throw new GemFireConfigException(
+      throw new MembershipConfigurationException(
-        throw new GemFireConfigException(e.getMessage(), e);
+        throw new MembershipConfigurationException(e.getMessage(), e);
-        throw new GemFireConfigException("problem initializing encryption protocol", e);
+        throw new MembershipConfigurationException("problem initializing encryption protocol", e);
-  public void start() {
+  public void start() throws MemberStartupException {
-      throw new GemFireConfigException("unable to create jgroups channel", e);
+      throw new MembershipConfigurationException("unable to create jgroups channel", e);
-      setChannelReceiver(myChannel, jgroupsReceiver);
+      try {
+        setChannelReceiver(myChannel, jgroupsReceiver);
+      } catch (IllegalStateException e) {
+        throw new MemberStartupException("problem initializing JGroups", e);
+      }
-      throw new SystemConnectException("unable to create jgroups channel", e);
+      throw new MemberStartupException("unable to create jgroups channel", e);
-      throw new SystemConnectException("failing for test");
+      throw new MemberStartupException("failing for test");
-  private void establishLocalAddress() {
+  private void establishLocalAddress() throws MemberStartupException {
-        throw new InternalGemFireError(
+        throw new MemberStartupException(
-      throws InterruptedException {
+      throws InterruptedException, TimeoutException {
-        throw new GemFireIOException("Multicast operations from " + sender
+        throw new TimeoutException("Multicast operations from " + sender
-      throw new DistributedSystemDisconnectedException("Distributed System is shutting down");
+      throw new MembershipClosedException("Distributed System is shutting down");
+    Set<ID> failedRecipients = new HashSet<>();
-
-      org.jgroups.Message jmsg =
-          createJGMessage(msg, local, null, Version.getCurrentVersion().ordinal());
-      theStats.endMsgSerialization(startSer);
+      org.jgroups.Message jmsg;
+      try {
+        jmsg =
+            createJGMessage(msg, local, null, Version.getCurrentVersion().ordinal());
+      } catch (IOException e) {
+        return new HashSet<>(msg.getRecipients());
+      } finally {
+        theStats.endMsgSerialization(startSer);
+      }
-        if (cause instanceof ForcedDisconnectException) {
+        if (cause instanceof MemberDisconnectedException) {
-          if (shutdownCause instanceof ForcedDisconnectException) {
+          if (shutdownCause instanceof MemberDisconnectedException) {
-        throw new DistributedSystemDisconnectedException(channelClosed, problem);
+        throw new MembershipClosedException(channelClosed, problem);
-          org.jgroups.Message jmsg = createJGMessage(msg, local, mbr, version);
-          messages.put(version, jmsg);
+          org.jgroups.Message jmsg;
+          try {
+            jmsg = createJGMessage(msg, local, mbr, version);
+            messages.put(version, jmsg);
+          } catch (IOException e) {
+            failedRecipients.add(mbr);
+            continue;
+          }
+        if (jmsg == null) {
+          continue; // failed for all recipients
+        }
-            if (cause instanceof ForcedDisconnectException) {
+            if (cause instanceof MemberDisconnectedException) {
-          throw new DistributedSystemDisconnectedException(channelClosed, problem);
+          throw new MembershipClosedException(channelClosed, problem);
-    if (msg.forAll()) {
+    if (failedRecipients.isEmpty() && msg.forAll()) {
-    Set<ID> result = new HashSet<>();
-          result.add(d);
+          failedRecipients.add(d);
-    return result;
+    return failedRecipients;
-      short version) {
+      short version) throws IOException {
-    } catch (IOException | GemFireIOException ex) {
+    } catch (IOException ex) {
-      if (ex instanceof GemFireIOException) {
-        throw (GemFireIOException) ex;
-      } else {
-        GemFireIOException ioe = new GemFireIOException("Error serializing message");
-        ioe.initCause(ex);
-        throw ioe;
-      }
+      throw ex;
-      GemFireIOException ioe = new GemFireIOException("Error serializing message");
-      ioe.initCause(ex.getCause());
+      IOException ioe =
+          new IOException("Error serializing message", ex.getCause());
-        throw new GemFireConfigException("Got remote message as encrypted");
+        throw new MembershipConfigurationException("Got remote message as encrypted");

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 INS43 INS43 INS43 MOV60 INS43 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS54 UPD42 INS54 INS32 MOV32 INS8 INS8 INS12 INS8 INS12 INS8 INS42 INS42 MOV43 MOV21 MOV53 UPD43 MOV21 INS44 INS8 UPD43 UPD43 INS21 INS44 INS8 MOV21 INS25 INS42 UPD43 UPD43 UPD42 UPD43 UPD43 INS43 INS42 INS53 UPD43 UPD42 UPD42 INS7 INS43 INS42 INS41 INS27 INS8 UPD42 UPD42 UPD42 UPD42 INS42 INS14 UPD42 UPD43 INS42 MOV32 INS42 INS14 INS54 INS42 INS33 INS18 UPD43 MOV32 UPD43 UPD43 UPD43 INS43 INS45 INS42 UPD43 UPD42 INS74 INS32 UPD43 UPD43 INS8 INS12 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS43 INS42 INS42 UPD42 UPD42 INS21 MOV21 INS44 INS8 UPD43 UPD42 INS42 UPD43 INS7 INS43 INS42 INS21 INS18 UPD42 UPD42 INS42 MOV32 INS42 INS32 UPD43 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL84 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21