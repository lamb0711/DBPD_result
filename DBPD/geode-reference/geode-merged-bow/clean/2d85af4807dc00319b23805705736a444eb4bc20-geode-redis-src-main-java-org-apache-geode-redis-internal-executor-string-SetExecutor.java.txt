GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+import static java.util.concurrent.TimeUnit.SECONDS;
-import org.apache.geode.redis.internal.executor.AbstractExecutor;
-      handleExpiration(context, key, setOptions);
-    SetOptions.ExpireUnit expireUnitOption = SetOptions.ExpireUnit.NONE;
-    Long expiration = null;
+    long expiration = 0L;
-          if (expireUnitOption != SetOptions.ExpireUnit.NONE) {
+          if (expiration != 0) {
-          expireUnitOption = SetOptions.ExpireUnit.EX;
-          expiration = parseExpirationTime(current_arg, i, commandElems);
+          expiration = parseExpirationTime(i, commandElems);
+          expiration = SECONDS.toMillis(expiration);
-          if (expireUnitOption != SetOptions.ExpireUnit.NONE) {
+          if (expiration != 0) {
-          expireUnitOption = SetOptions.ExpireUnit.PX;
-          expiration = parseExpirationTime(current_arg, i, commandElems);
+          expiration = parseExpirationTime(i, commandElems);
-    return new SetOptions(existsOption, expiration, expireUnitOption, keepTTL);
+    return new SetOptions(existsOption, expiration, keepTTL);
-  private long parseExpirationTime(String arg, int index, List<byte[]> commandElems)
+  private long parseExpirationTime(int index, List<byte[]> commandElems)
-    long expiration = 0L;
-      expiration = Long.parseLong(expirationString);
+      long expiration = Long.parseLong(expirationString);
+      if (expiration <= 0) {
+        throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
+      }
+      return expiration;
-    if (expiration <= 0) {
-      throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
-    }
-
-    if (arg.equalsIgnoreCase("EX")) {
-      return expiration * AbstractExecutor.millisInSecond;
-    } else if (arg.equalsIgnoreCase("PX")) {
-      return expiration;
-    } else {
-      throw new IllegalArgumentException(ERROR_NOT_INTEGER);
-    }
-  }
-
-  private void handleExpiration(ExecutionHandlerContext context, ByteArrayWrapper key,
-      SetOptions setOptions) {
-    if (setOptions.getExpiration() != null) {
-      context.getRegionProvider().setExpiration(key, setOptions.getExpiration());
-    } else {
-      if (!setOptions.isKeepTTL()) {
-        context.getRegionProvider().cancelKeyExpiration(key);
-      }
-    }

MOV26 UPD40 MOV39 MOV42 MOV34 MOV21 INS60 MOV25 MOV41 INS10 INS39 INS59 INS42 MOV32 UPD42 INS34 UPD42 INS32 UPD42 INS34 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL33 DEL40 DEL42 DEL40 DEL7 DEL21 DEL42 DEL40 DEL10 DEL40 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL40 DEL27 DEL41 DEL8 DEL42 DEL42 DEL45 DEL32 DEL8 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31