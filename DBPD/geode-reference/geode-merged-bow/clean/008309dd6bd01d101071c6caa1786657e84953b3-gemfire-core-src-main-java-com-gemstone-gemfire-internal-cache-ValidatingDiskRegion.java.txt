Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-          drv.getCompressorClassName());
+          drv.getCompressorClassName(), drv.getOffHeap());
-              drv.getCompressorClassName());
+              drv.getCompressorClassName(), drv.getOffHeap());
-    public Object _getValueUse(RegionEntryContext context, boolean decompress) {
+    public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+    @Override
+    @Override
+    public void handleValueOverflow(RegionEntryContext context) {throw new IllegalStateException("should never be called");}
+    
+    @Override
+    public void afterValueOverflow(RegionEntryContext context) {throw new IllegalStateException();}
+    
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }
+    public Object getValueRetain(RegionEntryContext context) {
+      return null;
+    }
+    @Override
+    public boolean isMarkedForEviction() {
+      // TODO Auto-generated method stub
+      return false;
+    }
+    @Override
+    public void setMarkedForEviction() {
+      // TODO Auto-generated method stub
+    }
+    @Override
+    public void clearMarkedForEviction() {
+      // TODO Auto-generated method stub
+    }
+    @Override
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val,
+        EntryEventImpl event, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS32 INS42 INS42 INS43 INS42 INS53 INS42 INS43 INS42 INS53 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS53 INS42 INS42 INS43 INS42 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS33 INS9 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS45 INS43 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42