GEODE-3192,GEODE-3229: Change API and implementation of protobuf PutAll. This closes #643

* We will now dispatch incoming protobuf PutAlls as a series of put operations
* The PutAllResponse will contain a set of failed keys and the error they failed with

Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.Objects;
+import java.util.stream.Collectors;
-      RegionAPI.PutAllRequest request, Cache cache) {
-    String regionName = request.getRegionName();
-    Region region = cache.getRegion(regionName);
+      RegionAPI.PutAllRequest putAllRequest, Cache cache) {
+    Region region = cache.getRegion(putAllRequest.getRegionName());
-          "Region passed by client did not exist: " + regionName, logger, null));
+          "Region passed by client did not exist: " + putAllRequest.getRegionName(), logger, null));
-    Map entries = extractPutAllEntries(serializationService, request);
-    try {
-      region.putAll(entries);
-    } catch (Exception ex) {
-      return Failure
-          .of(ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex));
-    }
-
-    return Success.of(RegionAPI.PutAllResponse.newBuilder().build());
+    RegionAPI.PutAllResponse.Builder builder = RegionAPI.PutAllResponse.newBuilder()
+        .addAllFailedKeys(putAllRequest.getEntryList().stream()
+            .map((entry) -> singlePut(serializationService, region, entry)).filter(Objects::nonNull)
+            .collect(Collectors.toList()));
+    return Success.of(builder.build());
-  // Read all of the entries out of the protobuf and return an error (without performing any puts)
-  // if any of the entries can't be decoded
-  private Map extractPutAllEntries(SerializationService serializationService,
-      RegionAPI.PutAllRequest putAllRequest) {
-    Map entries = new HashMap();
+  private BasicTypes.KeyedErrorResponse singlePut(SerializationService serializationService,
+      Region region, BasicTypes.Entry entry) {
-      for (BasicTypes.Entry entry : putAllRequest.getEntryList()) {
-        Object decodedValue = ProtobufUtilities.decodeValue(serializationService, entry.getValue());
-        Object decodedKey = ProtobufUtilities.decodeValue(serializationService, entry.getKey());
+      Object decodedValue = ProtobufUtilities.decodeValue(serializationService, entry.getValue());
+      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, entry.getKey());
-        entries.put(decodedKey, decodedValue);
-      }
+      region.put(decodedKey, decodedValue);
-      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
+      return buildAndLogKeyedError(entry, "Encoding not supported", ex);
-      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
+      return buildAndLogKeyedError(entry, "Codec error in protobuf deserialization", ex);
+    } catch (ClassCastException ex) {
+      return buildAndLogKeyedError(entry, "Invalid key or value type for region", ex);
+    return null;
+  }
-    return entries;
+  private BasicTypes.KeyedErrorResponse buildAndLogKeyedError(BasicTypes.Entry entry,
+      String message, Exception ex) {
+    logger.error(message, ex);
+    BasicTypes.ErrorResponse errorResponse =
+        BasicTypes.ErrorResponse.newBuilder().setMessage(message).build();
+    return BasicTypes.KeyedErrorResponse.newBuilder().setKey(entry.getKey()).setError(errorResponse)
+        .build();

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS31 INS31 MOV78 MOV83 MOV74 MOV42 MOV44 MOV44 MOV44 INS8 INS43 INS42 INS44 MOV44 MOV8 INS83 INS43 INS42 INS44 INS44 MOV44 INS8 MOV60 MOV25 MOV60 INS41 INS40 UPD43 MOV43 UPD42 MOV42 INS54 INS41 INS40 INS43 INS42 MOV43 INS42 INS21 INS60 MOV41 UPD43 INS32 UPD42 MOV8 INS12 INS12 INS12 INS33 INS40 INS32 INS43 INS59 INS32 INS40 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 MOV44 INS8 MOV44 INS8 INS44 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS40 INS42 INS32 INS32 INS42 INS32 MOV32 INS42 INS32 UPD42 MOV42 INS42 INS41 INS43 INS42 INS41 INS43 INS42 INS41 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS32 UPD42 INS32 INS42 INS32 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV32 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS40 UPD42 MOV42 UPD42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS42 MOV32 INS42 INS59 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL42 DEL32 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL70 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL32