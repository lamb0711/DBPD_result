GEODE-4858: CreateAsyncEventQueue and tests refactor. (#1969)

* Unsupported ModelCommandResult methods failedToPersist, setCommandPersisted, and setFileToDownload now throw exceptions to avoid accidental use in testing.
* Extracted cluster configuration messages in CommandExecutor to public class fields, for test consumption.
* Extracted several message strings in ModelCommandResult to public class fields, for test consumption
* Serialized necessary AsyncEventQueue configuration classes and updated sanctioned-geode-core-serializables

+import java.util.List;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.ClassNameType;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.ParameterType;
-import org.apache.geode.internal.cache.execute.InternalFunction;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.cli.CliFunction;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult.StatusState;
-public class CreateAsyncEventQueueFunction implements InternalFunction {
+public class CreateAsyncEventQueueFunction extends CliFunction {
-  @SuppressWarnings("deprecation")
-  public void execute(FunctionContext context) {
+  public CliFunctionResult executeFunction(FunctionContext context) {
-      AsyncEventQueueFunctionArgs aeqArgs = (AsyncEventQueueFunctionArgs) context.getArguments();
+      CacheConfig.AsyncEventQueue config = (CacheConfig.AsyncEventQueue) context.getArguments();
-      AsyncEventQueueFactory asyncEventQueueFactory = cache.createAsyncEventQueueFactory()
-          .setParallel(aeqArgs.isParallel())
-          .setBatchConflationEnabled(aeqArgs.isEnableBatchConflation())
-          .setBatchSize(aeqArgs.getBatchSize()).setBatchTimeInterval(aeqArgs.getBatchTimeInterval())
-          .setPersistent(aeqArgs.isPersistent()).setDiskStoreName(aeqArgs.getDiskStoreName())
-          .setDiskSynchronous(aeqArgs.isDiskSynchronous())
-          .setForwardExpirationDestroy(aeqArgs.isForwardExpirationDestroy())
-          .setMaximumQueueMemory(aeqArgs.getMaxQueueMemory())
-          .setDispatcherThreads(aeqArgs.getDispatcherThreads())
-          .setOrderPolicy(OrderPolicy.valueOf(aeqArgs.getOrderPolicy()));
+      AsyncEventQueueFactory asyncEventQueueFactory =
+          cache.createAsyncEventQueueFactory().setParallel(config.isParallel())
+              .setBatchConflationEnabled(config.isEnableBatchConflation())
+              .setBatchSize(Integer.parseInt(config.getBatchSize()))
+              .setBatchTimeInterval(Integer.parseInt(config.getBatchTimeInterval()))
+              .setPersistent(config.isPersistent()).setDiskStoreName(config.getDiskStoreName())
+              .setDiskSynchronous(config.isDiskSynchronous())
+              .setForwardExpirationDestroy(config.isForwardExpirationDestroy())
+              .setMaximumQueueMemory(Integer.parseInt(config.getMaximumQueueMemory()))
+              .setDispatcherThreads(Integer.parseInt(config.getDispatcherThreads()))
+              .setOrderPolicy(OrderPolicy.valueOf(config.getOrderPolicy()));
-      String[] gatewayEventFilters = aeqArgs.getGatewayEventFilters();
+      String[] gatewayEventFilters = config.getGatewayEventFilter().stream()
+          .map(ClassNameType::getClassName).toArray(String[]::new);
+
-      String gatewaySubstitutionFilter = aeqArgs.getGatewaySubstitutionFilter();
-      if (gatewaySubstitutionFilter != null) {
+      DeclarableType gatewayEventSubstitutionFilter = config.getGatewayEventSubstitutionFilter();
+
+      if (gatewayEventSubstitutionFilter != null) {
+        String gatewaySubstitutionFilter = gatewayEventSubstitutionFilter.getClassName();
-      String listenerClassName = aeqArgs.getListenerClassName();
+      String listenerClassName = config.getAsyncEventListener().getClassName();
-      Properties listenerProperties = aeqArgs.getListenerProperties();
-      if (listenerProperties != null && !listenerProperties.isEmpty()) {
+      List<ParameterType> parameters = config.getAsyncEventListener().getParameter();
+      Properties listenerProperties = new Properties();
+      for (ParameterType p : parameters) {
+        listenerProperties.put(p.getName(), p.getString());
+      }
+
+      if (!listenerProperties.isEmpty()) {
-        Map<Declarable, Properties> declarablesMap = new HashMap<Declarable, Properties>();
+        Map<Declarable, Properties> declarablesMap = new HashMap<>();
-      asyncEventQueueFactory.create(aeqArgs.getAsyncEventQueueId(),
-          (AsyncEventListener) listenerInstance);
+      asyncEventQueueFactory.create(config.getId(), (AsyncEventListener) listenerInstance);
-      XmlEntity xmlEntity =
-          new XmlEntity(CacheXml.ASYNC_EVENT_QUEUE, "id", aeqArgs.getAsyncEventQueueId());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, xmlEntity, "Success"));
-
+      return new CliFunctionResult(memberId, StatusState.OK, "Success");
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, false, null));
+      return new CliFunctionResult(memberId, StatusState.ERROR, null);
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, null));
+      return new CliFunctionResult(memberId, e, null);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 UPD40 UPD43 UPD42 INS43 UPD42 INS42 INS60 INS70 INS21 INS41 UPD43 INS43 MOV43 INS74 MOV43 INS59 INS44 INS42 INS8 MOV38 INS32 INS14 INS41 INS41 INS40 UPD42 INS32 INS42 UPD42 UPD42 INS60 INS43 INS43 UPD42 INS32 INS42 INS14 INS43 INS42 INS21 INS42 INS42 MOV32 MOV11 MOV43 MOV42 INS40 MOV45 INS14 MOV14 UPD43 INS32 INS42 INS89 UPD42 UPD42 MOV43 INS59 INS32 UPD42 INS42 INS42 INS32 INS42 MOV43 INS42 INS32 UPD42 UPD42 MOV43 MOV42 INS40 MOV33 INS40 INS32 INS32 INS42 INS90 INS5 INS42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS32 INS42 INS42 MOV32 UPD42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD74 INS42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 DEL42 DEL45 DEL79 DEL39 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL9 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21