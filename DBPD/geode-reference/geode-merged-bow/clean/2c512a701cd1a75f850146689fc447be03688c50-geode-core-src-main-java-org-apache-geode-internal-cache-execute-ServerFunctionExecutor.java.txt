Merge pull request #3888 from Nordix/feature/GEODE-7049

GEODE-7049: Add timeout to Java client Execute::execute() methods
+import java.util.concurrent.TimeUnit;
-      boolean optimizeForWrite) {
+      boolean optimizeForWrite, long timeout, TimeUnit unit) {
+      final int timeoutMs = TimeoutHelper.toMillis(timeout, unit);
-          return executeOnServer(functionId, defaultCollector, hasResult, isHA, optimizeForWrite);
+          return executeOnServer(functionId, defaultCollector, hasResult, isHA, optimizeForWrite,
+              timeoutMs);
-          return executeOnServer(functionId, rc, hasResult, isHA, optimizeForWrite);
+          return executeOnServer(functionId, rc, hasResult, isHA, optimizeForWrite, timeoutMs);
-  protected ResultCollector executeFunction(final Function function) {
+  protected ResultCollector executeFunction(final Function function, long timeout, TimeUnit unit) {
+        final int timeoutMs = TimeoutHelper.toMillis(timeout, unit);
+
-          return executeOnServer(function, defaultCollector, hasResult);
+          return executeOnServer(function, defaultCollector, hasResult, timeoutMs);
-          return executeOnServer(function, rc, hasResult);
+          return executeOnServer(function, rc, hasResult, timeoutMs);
-  private ResultCollector executeOnServer(Function function, ResultCollector rc, byte hasResult) {
+  private ResultCollector executeOnServer(Function function, ResultCollector rc, byte hasResult,
+      int timeoutMs) {
-              getTimeoutMs());
+              timeoutMs);
-              false, false, getTimeoutMs());
+              false, false, timeoutMs);
-              this.isIgnoreDepartedMembers(), getTimeoutMs());
+              this.isIgnoreDepartedMembers(), timeoutMs);
-      boolean isHA, boolean optimizeForWrite) {
+      boolean isHA, boolean optimizeForWrite, int timeoutMs) {
-              this.isIgnoreDepartedMembers(), getTimeoutMs());
+              this.isIgnoreDepartedMembers(), timeoutMs);
-              null/* onGroups does not use single-hop for now */, false, false, getTimeoutMs());
+              null/* onGroups does not use single-hop for now */, false, false, timeoutMs);
-              groups, allServers, this.isIgnoreDepartedMembers(), getTimeoutMs());
+              groups, allServers, this.isIgnoreDepartedMembers(), timeoutMs);
-  public ResultCollector execute(final String functionName) {
+  public ResultCollector execute(final String functionName, long timeout, TimeUnit unit) {
-
-      return executeFunction(functionName, hasResult, isHA, optimizeForWrite);
+      return executeFunction(functionName, hasResult, isHA, optimizeForWrite, timeout, unit);
-      return executeFunction(functionObject);
+      return executeFunction(functionObject, timeout, unit);
+
+  }
+
+  @Override
+  public ResultCollector execute(final String functionName) {
+    return execute(functionName, getTimeoutMs(), TimeUnit.MILLISECONDS);

INS26 INS40 INS31 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS78 INS83 INS43 INS42 INS44 INS8 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS32 INS60 INS42 INS42 MOV32 INS40 INS83 INS39 INS59 MOV74 MOV74 INS42 INS32 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS42 MOV43 MOV11 MOV32 INS42 INS42 INS32 INS42 INS42 MOV43 MOV11 INS42 MOV43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32