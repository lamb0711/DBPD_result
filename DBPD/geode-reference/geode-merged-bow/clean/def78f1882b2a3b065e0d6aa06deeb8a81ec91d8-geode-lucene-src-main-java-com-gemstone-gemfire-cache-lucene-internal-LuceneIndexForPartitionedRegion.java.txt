Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/CreateAlterDestroyRegionCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DiskStoreCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/GemfireDataCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/IndexCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ListAndDescribeRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart3DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ShellCommandsDUnitTest.java

+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.asyncqueue.AsyncEventQueueFactory;
-  
+
-      PartitionedRegion dataRegion = (PartitionedRegion)cache.getRegion(regionPath);
-      assert dataRegion != null;
+      PartitionedRegion dataRegion = (PartitionedRegion) cache.getRegion(regionPath);
+      //assert dataRegion != null;
-      final String fileRegionName = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
-      fileRegion = cache.<String, File> getRegion(fileRegionName);
+      final String fileRegionName = createFileRegionName();
-      if (null == fileRegion) {
-        fileRegion = cache.<String, File> createRegionFactory(regionShortCut)
-            .setPartitionAttributes(new PartitionAttributesFactory<String, File>().setColocatedWith(regionPath)
-                .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-                .create())
-                .create(fileRegionName);
+      if (!fileRegionExists(fileRegionName)) {
+        fileRegion = createFileRegion(regionShortCut, fileRegionName, partitionAttributes);
-      final String chunkRegionName = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".chunks";
-      chunkRegion = cache.<ChunkKey, byte[]> getRegion(chunkRegionName);
-      if (null == chunkRegion) {
-        chunkRegion = cache.<ChunkKey, byte[]> createRegionFactory(regionShortCut)
-            .setPartitionAttributes(new PartitionAttributesFactory<ChunkKey, byte[]>().setColocatedWith(fileRegionName)
-                .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-                .create())
-                .create(chunkRegionName);
+      final String chunkRegionName = createChunkRegionName();
+      if (!chunkRegionExists(chunkRegionName)) {
+        chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes, chunkRegionName);
-      // we will create RegionDirectorys on the fly when data coming
+      // we will create RegionDirectories on the fly when data comes in
-      // create AEQ, AEQ listner and specify the listener to repositoryManager
-      AsyncEventQueueFactoryImpl factory = (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
+      // create AEQ, AEQ listener and specify the listener to repositoryManager
-        factory.setPersistent(true);
+        createAEQWithPersistence();
-      factory.setParallel(true); // parallel AEQ for PR
-      factory.setMaximumQueueMemory(1000);
-      factory.setDispatcherThreads(1);
-      factory.setIsMetaQueue(true);
-      
-      LuceneEventListener listener = new LuceneEventListener(repositoryManager);
-      String aeqId = LuceneServiceImpl.getUniqueIndexName(getName(), regionPath);
-      AsyncEventQueueImpl aeq = (AsyncEventQueueImpl)cache.getAsyncEventQueue(aeqId);
-      AsyncEventQueue indexQueue = factory.create(aeqId, listener);
+      else {
+        createAEQ();
+      }
+  private AsyncEventQueueFactoryImpl createAEQFactory() {
+    AsyncEventQueueFactoryImpl factory = (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
+    factory.setParallel(true); // parallel AEQ for PR
+    factory.setMaximumQueueMemory(1000);
+    factory.setDispatcherThreads(1);
+    factory.setIsMetaQueue(true);
+    return factory;
+  }
+
+  AsyncEventQueue createAEQWithPersistence() {
+    AsyncEventQueueFactoryImpl factory = createAEQFactory();
+    factory.setPersistent(true);
+    return createAEQ(factory);
+  }
+
+  AsyncEventQueue createAEQ() {
+    return createAEQ(createAEQFactory());
+  }
+
+  private AsyncEventQueue createAEQ(AsyncEventQueueFactoryImpl factory) {
+    LuceneEventListener listener = new LuceneEventListener(repositoryManager);
+    String aeqId = LuceneServiceImpl.getUniqueIndexName(getName(), regionPath);
+    AsyncEventQueueImpl aeq = (AsyncEventQueueImpl)cache.getAsyncEventQueue(aeqId);
+    AsyncEventQueue indexQueue = factory.create(aeqId, listener);
+    return indexQueue;
+  }
+
+
+  boolean fileRegionExists(String fileRegionName) {
+    return cache.<String, File> getRegion(fileRegionName) != null;
+  }
+
+  Region createFileRegion(final RegionShortcut regionShortCut,
+                                final String fileRegionName,
+                                final PartitionAttributes partitionAttributes)
+  {
+    return cache.<String, File> createRegionFactory(regionShortCut)
+        .setPartitionAttributes(new PartitionAttributesFactory<String, File>().setColocatedWith(regionPath)
+            .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
+            .create())
+            .create(fileRegionName);
+  }
+
+  String createFileRegionName() {
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
+  }
+
+  boolean chunkRegionExists(String chunkRegionName) {
+    return cache.<ChunkKey, byte[]> getRegion(chunkRegionName) != null;
+  }
+
+  Region<ChunkKey, byte[]> createChunkRegion(final RegionShortcut regionShortCut,
+                           final String fileRegionName,
+                           final PartitionAttributes partitionAttributes, final String chunkRegionName)
+  {
+    return cache.<ChunkKey, byte[]> createRegionFactory(regionShortCut)
+      .setPartitionAttributes(new PartitionAttributesFactory<ChunkKey, byte[]>().setColocatedWith(fileRegionName)
+        .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
+        .create())
+      .create(chunkRegionName);
+  }
+
+  String createChunkRegionName() {
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".chunks";
+  }
+
+
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS43 INS42 MOV8 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS44 MOV8 MOV43 INS42 INS8 INS39 INS42 INS44 INS8 INS74 INS42 INS44 INS44 INS44 INS44 MOV8 MOV43 INS42 INS8 INS42 MOV60 MOV21 MOV21 MOV21 MOV21 INS41 INS42 INS60 INS41 INS42 INS41 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV60 INS41 INS43 INS42 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS41 INS43 INS42 INS41 INS43 INS43 INS5 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS41 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 MOV32 MOV27 INS42 INS27 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 MOV32 MOV27 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS32 MOV32 INS33 MOV32 INS33 INS43 INS38 INS8 INS43 INS38 INS8 INS8 INS8 INS42 INS42 INS42 INS32 INS32 MOV21 INS42 INS32 INS32 MOV21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL6 DEL33 DEL42 DEL27 DEL25 DEL33 DEL42 DEL27 DEL25 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21