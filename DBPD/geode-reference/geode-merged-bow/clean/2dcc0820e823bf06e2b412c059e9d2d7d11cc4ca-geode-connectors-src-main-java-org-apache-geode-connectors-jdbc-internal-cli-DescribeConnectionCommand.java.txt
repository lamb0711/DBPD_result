GEODE-5070: Use a random member for describe & list jdbc connector commands (#1849)

         Retrieves connections & mappings from CC(if running) 
         or from a random member(if CC not running)
+import java.util.Set;
-import org.apache.geode.management.cli.ConverterHint;
-  static final String DESCRIBE_CONNECTION__HELP =
-      "Describe the specified jdbc connection found in cluster configuration.";
+  static final String DESCRIBE_CONNECTION__HELP = "Describe the specified jdbc connection.";
-  static final String DESCRIBE_CONNECTION_MEMBER__HELP =
-      "Member(s) from which the specified jdbc connections is retrieved.";
-  public Result describeConnection(
-      @CliOption(key = DESCRIBE_CONNECTION__NAME, mandatory = true,
-          help = DESCRIBE_CONNECTION__NAME__HELP) String name,
-      @CliOption(key = {CliStrings.MEMBER}, optionContext = ConverterHint.MEMBERIDNAME,
-          help = DESCRIBE_CONNECTION_MEMBER__HELP) String onMember) {
+  public Result describeConnection(@CliOption(key = DESCRIBE_CONNECTION__NAME, mandatory = true,
+      help = DESCRIBE_CONNECTION__NAME__HELP) String name) {
+    ConnectorService.Connection connection = null;
-    // when member is specified, we go to each member and describe what are on the members
-    if (onMember != null) {
-      DistributedMember member = getMember(onMember);
-      if (member == null) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      List<?> result =
-          (List<?>) executeFunction(new DescribeConnectionFunction(), name, member).getResult();
-      ConnectorService.Connection connection = (ConnectorService.Connection) result.get(0);
-      CompositeResultData resultData = ResultBuilder.createCompositeResultData();
-      fillResultData(connection, resultData);
-
-      return ResultBuilder.buildResult(resultData);
-    }
-
-    // otherwise, use cluster configuration to describe the connections
+    // check if CC is available and use it to describe the connection
-    if (ccService == null) {
-      return ResultBuilder.createInfoResult(
-          "cluster configuration service is not running. Use --member option to describe connections on specific members.");
+    if (ccService != null) {
+      ConnectorService service =
+          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
+      if (service != null) {
+        connection = CacheElement.findElement(service.getConnection(), name);
+      }
+    } else {
+      // otherwise get it from any member
+      Set<DistributedMember> members = findMembers(null, null);
+      if (members.size() > 0) {
+        DistributedMember targetMember = members.iterator().next();
+        List<?> result =
+            (List<?>) executeFunction(new DescribeConnectionFunction(), name, targetMember)
+                .getResult();
+        if (!result.isEmpty()) {
+          connection = (ConnectorService.Connection) result.get(0);
+        }
+      }
-    // search for the connection that has this id to see if it exists
-    ConnectorService service =
-        ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
-    if (service == null) {
-      throw new EntityNotFoundException("connection named '" + name + "' not found");
-    }
-    ConnectorService.Connection connection =
-        CacheElement.findElement(service.getConnection(), name);
+
-  private void fillResultData(ConnectorService.Connection config, CompositeResultData resultData) {
+  private void fillResultData(ConnectorService.Connection connection,
+      CompositeResultData resultData) {
-    sectionResult.addData(CREATE_CONNECTION__NAME, config.getName());
-    sectionResult.addData(CREATE_CONNECTION__URL, config.getUrl());
-    if (config.getUser() != null) {
-      sectionResult.addData(CREATE_CONNECTION__USER, config.getUser());
+    sectionResult.addData(CREATE_CONNECTION__NAME, connection.getName());
+    sectionResult.addData(CREATE_CONNECTION__URL, connection.getUrl());
+    if (connection.getUser() != null) {
+      sectionResult.addData(CREATE_CONNECTION__USER, connection.getUser());
-    if (config.getPassword() != null) {
+    if (connection.getPassword() != null) {
-    config.getParameterMap().entrySet().forEach((entry) -> {
+    connection.getParameterMap().entrySet().forEach((entry) -> {

MOV26 UPD40 UPD45 INS60 INS25 MOV43 UPD42 MOV43 INS59 UPD27 MOV27 INS8 INS8 INS42 INS33 MOV60 MOV25 MOV60 MOV25 UPD27 INS74 UPD27 UPD42 UPD42 UPD42 UPD42 INS21 INS43 INS43 UPD42 INS32 INS32 INS34 INS25 UPD42 INS7 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS38 INS8 UPD42 INS42 MOV32 UPD42 INS32 INS32 MOV21 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 MOV11 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL40 DEL4 DEL80 DEL42 DEL40 DEL80 DEL42 DEL42 DEL80 DEL77 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL42 DEL33 DEL32 DEL42 DEL33 DEL27 DEL40 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL25 DEL40 DEL43