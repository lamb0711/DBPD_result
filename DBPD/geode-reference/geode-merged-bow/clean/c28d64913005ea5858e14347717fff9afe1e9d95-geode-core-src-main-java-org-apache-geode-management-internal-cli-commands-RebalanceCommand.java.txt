Merge branch 'release/1.4.0'

-import static org.apache.geode.management.internal.cli.commands.DataCommandsUtils.checkResultList;
-import static org.apache.geode.management.internal.cli.commands.DataCommandsUtils.toCompositeResultData;
-import static org.apache.geode.management.internal.cli.commands.DataCommandsUtils.tokenize;
-
+import java.util.Arrays;
+import org.apache.commons.collections.CollectionUtils;
-          help = CliStrings.REBALANCE__SIMULATE__HELP) boolean simulate) {
+          help = CliStrings.REBALANCE__SIMULATE__HELP) boolean simulate)
+      throws Exception {
-
-
-    } catch (Exception ex) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.REBALANCE__MSG__EXCEPTION_OCCURRED_WHILE_REBALANCING_0, ex.getMessage()));
+  private boolean checkResultList(CompositeResultData rebalanceResultData, List resultList,
+      DistributedMember member) {
+    boolean toContinueForOtherMembers = false;
+    if (CollectionUtils.isNotEmpty(resultList)) {
+      for (Object object : resultList) {
+        if (object instanceof Exception) {
+          rebalanceResultData.addSection().addData(
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
+              ((Exception) object).getMessage());
+
+          LogWrapper.getInstance().info(CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
+              + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
+
+          toContinueForOtherMembers = true;
+          break;
+        } else if (object instanceof Throwable) {
+          rebalanceResultData.addSection().addData(
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
+              ((Throwable) object).getMessage());
+
+          LogWrapper.getInstance().info(CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
+              + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
+
+          toContinueForOtherMembers = true;
+          break;
+        }
+      }
+    } else {
+      LogWrapper.getInstance().info(
+          "Rebalancing for member=" + member.getId() + ", resultList is either null or empty");
+      rebalanceResultData.addSection().addData("Rebalancing for member=" + member.getId(),
+          ", resultList is either null or empty");
+      toContinueForOtherMembers = true;
+    }
+    return toContinueForOtherMembers;
+  }
+
+  private CompositeResultData toCompositeResultData(CompositeResultData rebalanceResultData,
+      List<String> rstlist, int index, boolean simulate, InternalCache cache) {
+    int resultItemCount = 9;
+    // add only if there are any valid regions in results
+    if (rstlist.size() > resultItemCount && StringUtils.isNotEmpty(rstlist.get(resultItemCount))) {
+      TabularResultData table1 = rebalanceResultData.addSection().addTable("Table" + index);
+      String newLine = System.getProperty("line.separator");
+      StringBuilder resultStr = new StringBuilder();
+      resultStr.append(newLine);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
+      table1.accumulate("Value", rstlist.get(0));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+          .append(rstlist.get(0)).append(newLine);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
+      table1.accumulate("Value", rstlist.get(1));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+          .append(rstlist.get(1)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED);
+      table1.accumulate("Value", rstlist.get(2));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+          .append(rstlist.get(2)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES);
+      table1.accumulate("Value", rstlist.get(3));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+          .append(rstlist.get(3)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
+      table1.accumulate("Value", rstlist.get(4));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+          .append(rstlist.get(4)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats",
+          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED);
+      table1.accumulate("Value", rstlist.get(5));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(5)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME);
+      table1.accumulate("Value", rstlist.get(6));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+          .append(rstlist.get(6)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats",
+          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED);
+      table1.accumulate("Value", rstlist.get(7));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+          .append(rstlist.get(7)).append(newLine);
+
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALTIME);
+      table1.accumulate("Value", rstlist.get(8));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ").append(rstlist.get(8))
+          .append(newLine);
+
+      String headerText;
+      if (simulate) {
+        headerText = "Simulated partition regions ";
+      } else {
+        headerText = "Rebalanced partition regions ";
+      }
+      for (int i = resultItemCount; i < rstlist.size(); i++) {
+        headerText = headerText + " " + rstlist.get(i);
+      }
+      table1.setHeader(headerText);
+      cache.getLogger().info(headerText + resultStr);
+    }
+    return rebalanceResultData;
+  }
+
+
+
-                  resultList = (ArrayList) CliUtil
-                      .executeFunction(rebalanceFunction, functionArgs, member).getResult();
+                  resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, member)
+                      .getResult();
-                List<String> rstList = tokenize((String) resultList.get(0), ",");
+                List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
-                    (ArrayList) rstList, index, true, cache));
+                result = ResultBuilder.buildResult(
+                    toCompositeResultData(rebalanceResultData, rstList, index, true, cache));
-                  resultList = (ArrayList) CliUtil
-                      .executeFunction(rebalanceFunction, functionArgs, member).getResult();
+                  resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, member)
+                      .getResult();
-                List<String> rstList = tokenize((String) resultList.get(0), ",");
+                List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
-                    (ArrayList) rstList, index, false, cache));
+                result = ResultBuilder.buildResult(
+                    toCompositeResultData(rebalanceResultData, rstList, index, false, cache));
-                resultList = (ArrayList) CliUtil
-                    .executeFunction(rebalanceFunction, functionArgs, dsMember).getResult();
+                resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, dsMember)
+                    .getResult();
-                List<String> rstList = tokenize((String) resultList.get(0), ",");
+                List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
-                    (ArrayList) rstList, index, simulate.equals("true"), cache));
+                    rstList, index, simulate.equals("true"), cache));
-            List<String> rstList = tokenize((String) resultList.get(0), ",");
-            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
-                (ArrayList) rstList, index, simulate.equals("true"), cache));
+            List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
+            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData, rstList,
+                index, simulate.equals("true"), cache));

MOV26 MOV26 UPD40 UPD40 INS31 INS31 INS43 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 MOV74 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS39 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS42 INS42 INS9 INS42 INS42 INS42 INS70 INS21 INS21 INS21 INS42 INS34 INS27 INS32 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS24 INS21 INS21 INS44 INS42 INS8 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS42 INS8 INS8 INS58 INS27 INS37 INS8 INS32 INS32 INS43 INS42 INS25 INS32 INS42 INS27 INS32 INS42 INS27 INS45 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS39 INS59 INS42 INS32 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS62 INS8 INS25 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS45 INS32 INS32 INS42 INS27 INS42 INS42 INS45 INS43 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS43 INS21 INS21 INS21 INS10 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS32 INS32 INS7 INS42 INS43 INS21 INS21 INS21 INS10 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS27 INS36 INS42 INS9 INS42 INS32 INS32 INS7 INS42 INS42 INS42 MOV60 INS42 INS42 INS42 INS42 INS40 INS32 INS36 INS42 INS42 INS42 INS40 INS32 INS45 INS32 INS11 INS32 INS42 INS32 INS32 INS32 INS42 INS27 INS36 INS42 INS9 MOV8 INS74 INS42 INS42 INS11 INS42 INS42 INS36 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS36 INS42 INS42 INS42 INS40 INS32 INS45 INS32 INS11 INS43 INS43 INS32 MOV43 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS36 INS42 INS43 INS42 INS60 INS42 INS42 INS42 INS42 MOV32 INS43 INS42 INS43 INS42 INS11 INS42 INS74 INS59 INS36 UPD42 INS42 MOV32 INS42 INS42 INS43 INS42 INS32 INS43 INS43 INS42 INS32 MOV74 MOV11 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS36 UPD42 INS42 UPD9 INS36 INS42 INS45 INS42 UPD9 MOV42 UPD42 INS42 INS32 MOV43 MOV11 MOV11 MOV42 INS36 INS42 MOV45 INS42 MOV32 MOV42 INS43 INS32 MOV11 INS42 INS42 INS42 INS34 MOV32 MOV42 DEL40 DEL26 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL42 DEL11 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL11