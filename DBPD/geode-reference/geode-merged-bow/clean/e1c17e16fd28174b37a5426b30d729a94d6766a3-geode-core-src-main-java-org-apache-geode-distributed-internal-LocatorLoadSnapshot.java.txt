Revert "GEODE-7565: Allow gateway receivers with same host and port (#4824)" (#4974)

This reverts commit dd23ee8200cba67cea82e57e2e4ccedcdf9e8266.
-  private final Map<String, Map<ServerLocationAndMemberId, LoadHolder>> connectionLoadMap =
-      new HashMap<>();
+  private final Map<String, Map<ServerLocation, LoadHolder>> connectionLoadMap = new HashMap<>();
+  public void addServer(ServerLocation location, String[] groups, ServerLoad initialLoad) {
+    addServer(location, groups, initialLoad, 30000);
+  }
+
-  public synchronized void addServer(ServerLocation location, String memberId, String[] groups,
+  public synchronized void addServer(ServerLocation location, String[] groups,
-    LoadHolder connectionLoad =
-        new LoadHolder(location, initialLoad.getConnectionLoad(),
-            initialLoad.getLoadPerConnection(), loadPollInterval);
-    addGroups(connectionLoadMap, groups, connectionLoad, memberId);
-    LoadHolder queueLoad = new LoadHolder(location,
-        initialLoad.getSubscriptionConnectionLoad(),
+    LoadHolder connectionLoad = new LoadHolder(location, initialLoad.getConnectionLoad(),
+        initialLoad.getLoadPerConnection(), loadPollInterval);
+    addGroups(connectionLoadMap, groups, connectionLoad);
+    LoadHolder queueLoad = new LoadHolder(location, initialLoad.getSubscriptionConnectionLoad(),
-    updateLoad(location, memberId, initialLoad);
+    updateLoad(location, initialLoad);
-  public synchronized void removeServer(ServerLocation location, String memberId) {
+  public synchronized void removeServer(ServerLocation location) {
-      removeFromMap(connectionLoadMap, groups, location, memberId);
+      removeFromMap(connectionLoadMap, groups, location);
-  public void updateLoad(ServerLocation location, String memberId, ServerLoad newLoad) {
-    updateLoad(location, memberId, newLoad, null);
+  public void updateLoad(ServerLocation location, ServerLoad newLoad) {
+    updateLoad(location, newLoad, null);
-  synchronized void updateLoad(ServerLocation location, String memberId, ServerLoad newLoad,
+  synchronized void updateLoad(ServerLocation location, ServerLoad newLoad,
-
-    updateMap(connectionLoadMap, location, memberId, newLoad.getConnectionLoad(),
+    updateMap(connectionLoadMap, location, newLoad.getConnectionLoad(),
-    Map<ServerLocationAndMemberId, LoadHolder> groupServers = connectionLoadMap.get(group);
+    Map<ServerLocation, LoadHolder> groupServers = connectionLoadMap.get(group);
-  private synchronized boolean isBalanced(Map<ServerLocationAndMemberId, LoadHolder> groupServers) {
+  private synchronized boolean isBalanced(Map<ServerLocation, LoadHolder> groupServers) {
-  private synchronized boolean isBalanced(Map<ServerLocationAndMemberId, LoadHolder> groupServers,
+  private synchronized boolean isBalanced(Map<ServerLocation, LoadHolder> groupServers,
-    for (Entry<ServerLocationAndMemberId, LoadHolder> loadHolderEntry : groupServers.entrySet()) {
+    for (Entry<ServerLocation, LoadHolder> loadHolderEntry : groupServers.entrySet()) {
-    Map<ServerLocationAndMemberId, LoadHolder> groupServers = connectionLoadMap.get(group);
+    Map<ServerLocation, LoadHolder> groupServers = connectionLoadMap.get(group);
-      List bestLHs = findBestServersUsingMemberId(groupServers, excludedServers, 1);
+      List bestLHs = findBestServers(groupServers, excludedServers, 1);
-    Map<ServerLocationAndMemberId, LoadHolder> groupServers = connectionLoadMap.get(group);
+    Map<ServerLocation, LoadHolder> groupServers = connectionLoadMap.get(group);
-    ArrayList result = new ArrayList<>();
-    for (ServerLocationAndMemberId locationAndMemberId : groupServers.keySet()) {
-      result.add(locationAndMemberId.getServerLocation());
-    }
-    return result;
+
+    return new ArrayList<>(groupServers.keySet());
-   * Pick the least loaded server in the given group if currentServer is the most loaded server.
+   * Pick the least loaded server in the given group if currentServer is the most loaded server. n
-    Map<ServerLocationAndMemberId, LoadHolder> groupServers = connectionLoadMap.get(group);
+    Map<ServerLocation, LoadHolder> groupServers = connectionLoadMap.get(group);
-      List<LoadHolder> bestLHs = findBestServersUsingMemberId(groupServers, excludedServers, 1);
+      List<LoadHolder> bestLHs = findBestServers(groupServers, excludedServers, 1);
-    Map<ServerLocationAndMemberId, LoadHolder> connectionMap = connectionLoadMap.get(null);
+    Map<ServerLocation, LoadHolder> connectionMap = connectionLoadMap.get(null);
-    for (Entry<ServerLocationAndMemberId, LoadHolder> entry : connectionMap
+    for (Entry<ServerLocation, LoadHolder> entry : connectionMap
-      ServerLocation location = entry.getKey().getServerLocation();
+      ServerLocation location = entry.getKey();
-  private void addGroups(Map<String, Map<ServerLocationAndMemberId, LoadHolder>> map,
-      String[] groups,
-      LoadHolder holder, String memberId) {
-    for (String group : groups) {
-      Map<ServerLocationAndMemberId, LoadHolder> groupMap =
-          map.computeIfAbsent(group, k -> new HashMap<>());
-      groupMap.put(new ServerLocationAndMemberId(holder.getLocation(), memberId), holder);
-    }
-    // Special case for GatewayReceiver where we don't put those serverlocation against holder
-    if (!(groups.length > 0 && groups[0].equals(GatewayReceiver.RECEIVER_GROUP))) {
-      Map<ServerLocationAndMemberId, LoadHolder> groupMap =
-          map.computeIfAbsent(null, k -> new HashMap<>());
-      groupMap.put(new ServerLocationAndMemberId(holder.getLocation(), memberId), holder);
-    }
-  }
-
-  private void removeFromMap(Map<String, Map<ServerLocationAndMemberId, LoadHolder>> map,
-      String[] groups,
-      ServerLocation location, String memberId) {
-    ServerLocationAndMemberId locationAndMemberId =
-        new ServerLocationAndMemberId(location, memberId);
-    for (String group : groups) {
-      Map<ServerLocationAndMemberId, LoadHolder> groupMap = map.get(group);
-      if (groupMap != null) {
-        groupMap.remove(locationAndMemberId);
-        if (groupMap.size() == 0) {
-          map.remove(group);
-        }
-      }
-    }
-    Map groupMap = map.get(null);
-    groupMap.remove(locationAndMemberId);
-  }
-
-  private void updateMap(Map map, ServerLocation location, String memberId, float load,
-      float loadPerConnection) {
-    Map groupMap = (Map) map.get(null);
-    ServerLocationAndMemberId locationAndMemberId =
-        new ServerLocationAndMemberId(location, memberId);
-    LoadHolder holder =
-        (LoadHolder) groupMap.get(locationAndMemberId);
-
-    if (holder != null) {
-      holder.setLoad(load, loadPerConnection);
-    }
-  }
-
-  /**
-   *
-   * @param groupServers the servers to consider
-   * @param excludedServers servers to exclude
-   * @param count how many you want. a negative number means all of them in order of best to worst
-   * @return a list of best...worst server LoadHolders
-   */
-  private List<LoadHolder> findBestServersUsingMemberId(
-      Map<ServerLocationAndMemberId, LoadHolder> groupServers,
-      Set<ServerLocation> excludedServers, int count) {
-
-    TreeSet<LoadHolder> bestEntries = new TreeSet<>((l1, l2) -> {
-      int difference = Float.compare(l1.getLoad(), l2.getLoad());
-      if (difference != 0) {
-        return difference;
-      }
-      ServerLocation sl1 = l1.getLocation();
-      ServerLocation sl2 = l2.getLocation();
-      return sl1.compareTo(sl2);
-    });
-
-    boolean retainAll = (count < 0);
-    float lastBestLoad = Float.MAX_VALUE;
-
-    for (Map.Entry<ServerLocationAndMemberId, LoadHolder> loadEntry : groupServers.entrySet()) {
-      ServerLocation location = loadEntry.getKey().getServerLocation();
-      if (excludedServers.contains(location)) {
-        continue;
-      }
-
-      LoadHolder nextLoadReference = loadEntry.getValue();
-      float nextLoad = nextLoadReference.getLoad();
-
-      if ((bestEntries.size() < count) || retainAll || (nextLoad < lastBestLoad)) {
-        bestEntries.add(nextLoadReference);
-        if (!retainAll && (bestEntries.size() > count)) {
-          bestEntries.remove(bestEntries.last());
-        }
-        LoadHolder lastBestHolder = bestEntries.last();
-        lastBestLoad = lastBestHolder.getLoad();
-      }
-    }
-
-    return new ArrayList<>(bestEntries);
-  }
-
-
-      Map<ServerLocationAndMemberId, LoadHolder> groupServers) {
-
-    // Check if there are keys in the map that contains currentServer.
-    LoadHolder currentLH = null;
-    for (ServerLocationAndMemberId locationAndMemberId : groupServers.keySet()) {
-      if (currentServer.equals(locationAndMemberId.getServerLocation())) {
-        currentLH = groupServers.get(locationAndMemberId);
-        break;
-      }
-    }
+      Map<ServerLocation, LoadHolder> groupServers) {
+    final LoadHolder currentLH = groupServers.get(currentServer);
-    for (Map.Entry<ServerLocationAndMemberId, LoadHolder> loadEntry : groupServers.entrySet()) {
-      ServerLocation location = loadEntry.getKey().getServerLocation();
+    for (Map.Entry<ServerLocation, LoadHolder> loadEntry : groupServers.entrySet()) {
+      ServerLocation location = loadEntry.getKey();

MOV31 MOV31 UPD74 UPD83 INS42 MOV44 MOV44 UPD83 UPD42 MOV44 MOV44 INS8 UPD74 UPD43 UPD42 INS21 MOV21 UPD74 UPD74 UPD74 INS60 UPD43 UPD42 INS32 UPD74 UPD43 UPD43 UPD74 UPD74 MOV14 UPD66 UPD74 UPD74 MOV43 MOV43 MOV43 INS83 MOV43 INS59 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS34 UPD42 UPD42 UPD42 INS33 UPD43 UPD42 UPD42 UPD74 UPD43 UPD43 MOV32 UPD43 UPD43 UPD74 INS42 INS32 UPD74 MOV60 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 MOV43 MOV42 MOV42 UPD42 MOV42 MOV43 MOV43 MOV43 MOV43 UPD42 UPD42 UPD42 MOV32 MOV32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL33 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL43 DEL74 DEL14 DEL86 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL21 DEL8 DEL70 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL42 DEL40 DEL32 DEL27 DEL36 DEL38 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL33 DEL42 DEL59 DEL42 DEL43 DEL74 DEL14 DEL86 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL59 DEL42 DEL59 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL86 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL42 DEL42 DEL42 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL38 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL74 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60