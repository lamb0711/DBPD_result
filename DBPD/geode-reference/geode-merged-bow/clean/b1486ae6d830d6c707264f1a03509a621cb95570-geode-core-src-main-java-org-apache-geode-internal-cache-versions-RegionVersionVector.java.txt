GEODE-4083: fix infinite loop caused by thread race changing version (#1161)

* GEODE-4083: fix infinite loop caused by thread race changing version


-import java.util.*;
+import java.util.Collections;
+import java.util.ConcurrentModificationException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import org.apache.geode.annotations.TestingOnly;
-  /** create a live version vector for a region */
-  public RegionVersionVector(T ownerId) {
-    this(ownerId, null);
+  /**
+   * constructor used to create a cloned vector
+   */
+  protected RegionVersionVector(T ownerId, ConcurrentHashMap<T, RegionVersionHolder<T>> vector,
+      long version, ConcurrentHashMap<T, Long> gcVersions, long gcVersion, boolean singleMember,
+      RegionVersionHolder<T> localExceptions) {
+    this.myId = ownerId;
+    this.memberToVersion = vector;
+    this.memberToGCVersion = gcVersions;
+    this.localGCVersion.set(gcVersion);
+    this.localVersion.set(version);
+    this.singleMember = singleMember;
+    this.localExceptions = localExceptions;
-  /** create a live version vector for a region */
-  public RegionVersionVector(T ownerId, LocalRegion owner) {
-    this.myId = ownerId;
-    this.isLiveVector = true;
-    this.region = owner;
-
-    this.localExceptions = new RegionVersionHolder<T>(0);
+  /**
+   * deserialize a cloned vector
+   */
+  public RegionVersionVector() {
+   * create a live version vector for a region
+   */
+  public RegionVersionVector(T ownerId) {
+    this(ownerId, null);
+  }
+
+  /**
+   * create a live version vector for a region
+   */
+  public RegionVersionVector(T ownerId, LocalRegion owner) {
+    this(ownerId, owner, 0);
+  }
+
+  @TestingOnly
+  RegionVersionVector(T ownerId, LocalRegion owner, long version) {
+    this.myId = ownerId;
+    this.isLiveVector = true;
+    this.region = owner;
+    this.localExceptions = new RegionVersionHolder<T>(0);
+    this.memberToVersion =
+        new ConcurrentHashMap<>(INITIAL_CAPACITY, LOAD_FACTOR, CONCURRENCY_LEVEL);
+    this.memberToGCVersion =
+        new ConcurrentHashMap<>(INITIAL_CAPACITY, LOAD_FACTOR, CONCURRENCY_LEVEL);
+    this.localVersion.set(version);
+  }
+
+  /**
-  private void updateLocalVersion(long version) {
-    boolean repeat = false;
+  void updateLocalVersion(long newVersion) {
+    boolean needToTrySetAgain;
-      long myVersion = this.localVersion.get();
-      if (myVersion < version) {
-        repeat = !this.localVersion.compareAndSet(myVersion, version);
+      needToTrySetAgain = false;
+      long currentVersion = this.localVersion.get();
+      if (currentVersion < newVersion) {
+        needToTrySetAgain = !compareAndSetVersion(currentVersion, newVersion);
-    } while (repeat);
+    } while (needToTrySetAgain);
-
+  boolean compareAndSetVersion(long currentVersion, long newVersion) {
+    return this.localVersion.compareAndSet(currentVersion, newVersion);
+  }
-   * constructor used to create a cloned vector
-   *
-   * @param localExceptions
-   */
-  protected RegionVersionVector(T ownerId, ConcurrentHashMap<T, RegionVersionHolder<T>> vector,
-      long version, ConcurrentHashMap<T, Long> gcVersions, long gcVersion, boolean singleMember,
-      RegionVersionHolder<T> localExceptions) {
-    this.myId = ownerId;
-    this.memberToVersion = vector;
-    this.memberToGCVersion = gcVersions;
-    this.localGCVersion.set(gcVersion);
-    this.localVersion.set(version);
-    this.singleMember = singleMember;
-    this.localExceptions = localExceptions;
-  }
-
-
-  /** deserialize a cloned vector */
-  public RegionVersionVector() {
-    this.memberToVersion = new ConcurrentHashMap<T, RegionVersionHolder<T>>(INITIAL_CAPACITY,
-        LOAD_FACTOR, CONCURRENCY_LEVEL);
-    this.memberToGCVersion =
-        new ConcurrentHashMap<T, Long>(INITIAL_CAPACITY, LOAD_FACTOR, CONCURRENCY_LEVEL);
-  }
-
-  /**

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS31 INS31 INS31 INS29 UPD83 MOV83 INS42 INS44 INS44 INS8 INS78 INS44 MOV39 MOV42 MOV44 MOV8 INS39 INS42 INS44 INS44 MOV8 INS65 INS43 INS42 INS43 INS42 INS17 INS42 INS39 INS42 INS21 UPD42 INS39 INS42 INS39 INS42 INS41 UPD66 UPD66 INS66 INS42 INS42 INS42 INS42 INS34 INS32 UPD42 MOV32 INS22 INS42 INS42 UPD42 INS21 UPD42 UPD42 UPD74 MOV74 INS74 INS52 INS42 INS7 INS8 MOV43 INS42 INS9 UPD42 UPD42 UPD42 INS21 INS7 INS42 INS38 INS32 INS42 INS42 INS42 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL9 DEL42 DEL38 DEL7 DEL21 DEL31