Merge branch 'develop' into feature/GEODE-7049

+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.Operation;
+import org.apache.geode.cache.client.AllConnectionsInUseException;
+import org.apache.geode.cache.client.ServerConnectivityException;
+import org.apache.geode.cache.client.ServerOperationException;
+import org.apache.geode.distributed.internal.ServerLocation;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.tier.sockets.Part;
-   * @param region the name of the region to do the entry keySet on
+   * @param regionName the name of the region to do the entry invalidate on.
+   * @param region the region to do the entry invalidate on.
+   * @param event the event for this invalidate operation
-  public static void execute(ExecutablePool pool, String region, EntryEventImpl event) {
-    AbstractOp op = new InvalidateOpImpl(region, event);
-    pool.execute(op);
+  public static Object execute(ExecutablePool pool, String regionName, EntryEventImpl event,
+      boolean prSingleHopEnabled,
+      LocalRegion region) {
+    AbstractOp op = new InvalidateOpImpl(regionName, event, prSingleHopEnabled, region);
+
+    if (prSingleHopEnabled) {
+      ClientMetadataService cms = region.getCache().getClientMetadataService();
+      ServerLocation server =
+          cms.getBucketServerLocation(region, Operation.INVALIDATE, event.getKey(), null,
+              event.getCallbackArgument());
+      if (server != null) {
+        try {
+          PoolImpl poolImpl = (PoolImpl) pool;
+          boolean onlyUseExistingCnx = (poolImpl.getMaxConnections() != -1
+              && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections());
+          op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);
+          return pool.executeOn(new ServerLocation(server.getHostName(), server.getPort()), op,
+              true, onlyUseExistingCnx);
+        } catch (AllConnectionsInUseException e) {
+        } catch (ServerConnectivityException e) {
+          if (e instanceof ServerOperationException) {
+            throw e; // fixed 44656
+          }
+          cms.removeBucketServerLocation(server);
+        }
+      }
+    }
+    return pool.execute(op);
+    private boolean prSingleHopEnabled = false;
+
+    private LocalRegion region = null;
+
-    public InvalidateOpImpl(String region, EntryEventImpl event) {
+    public InvalidateOpImpl(String regionName, EntryEventImpl event, boolean prSingleHopEnabled,
+        LocalRegion region) {
-      getMessage().addStringPart(region, true);
+      this.prSingleHopEnabled = prSingleHopEnabled;
+      this.region = region;
+
+      getMessage().addStringPart(regionName, true);
+
+      if (prSingleHopEnabled) {
+        Part part = msg.getPart(partIdx++);
+        byte[] bytesReceived = part.getSerializedForm();
+        if (bytesReceived[0] != ClientMetadataService.INITIAL_VERSION
+            && bytesReceived.length == ClientMetadataService.SIZE_BYTES_ARRAY_RECEIVED) {
+          if (this.region != null) {
+            try {
+              ClientMetadataService cms = region.getCache().getClientMetadataService();
+              int myVersion =
+                  cms.getMetaDataVersion(region, Operation.UPDATE, event.getKey(), null,
+                      event.getCallbackArgument());
+              if (myVersion != bytesReceived[0] || isAllowDuplicateMetadataRefresh()) {
+                cms.scheduleGetPRMetaData(region, false, bytesReceived[1]);
+              }
+            } catch (CacheClosedException e) {
+              return null;
+            }
+          }
+        }
+      }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS44 INS44 INS23 INS23 INS65 INS65 INS42 UPD42 INS39 INS42 INS43 INS42 INS25 INS41 INS83 INS39 INS59 INS83 INS43 INS59 INS44 INS44 INS42 INS66 UPD66 INS42 INS66 INS42 INS42 INS8 MOV32 INS42 INS9 INS42 INS42 INS33 UPD42 INS39 INS42 INS43 INS42 INS21 INS21 INS25 INS60 INS60 INS25 INS42 INS7 INS7 INS42 INS8 UPD42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS22 INS42 INS22 INS42 UPD42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS54 INS52 INS42 INS52 INS42 INS43 INS59 INS5 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS33 INS32 INS8 INS12 INS12 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS27 INS27 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 MOV21 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS37 INS42 INS42 INS2 INS40 INS40 INS40 INS27 INS8 INS43 INS59 INS39 INS59 INS32 INS32 INS43 INS42 INS43 INS42 INS25 INS21 INS42 INS42 INS34 INS22 INS33 INS54 INS42 INS42 INS11 INS42 INS36 INS42 INS42 INS38 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS42 INS62 INS8 INS32 INS52 INS42 INS8 INS12 INS43 INS42 INS27 INS42 INS43 INS32 INS32 INS42 INS43 INS53 INS42 INS42 INS42 INS60 INS60 INS25 INS44 INS8 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS41 INS32 INS38 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS32 INS21 INS42 INS33 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS33 INS32 INS42 INS2 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS9 INS2 INS42 INS34 DEL39