GEODE-5010: refactor commands and CommandExecutor to use ResultModel (#1896)



+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-
+    if (this.status == Result.Status.ERROR && status != this.status) {
+      throw new IllegalStateException("Can't change the error state of the result.");
+    }
-  /**
-   * Convenience method which creates an {@code InfoResultModel} section. The provided message is
-   * prepended with the string "Error processing command:". The status will be set to
-   * {@code Result.Status.ERROR}
-   */
-  public ResultModel createCommandProcessingError(String message) {
+  public String toJson() {
+    ObjectMapper mapper = new ObjectMapper();
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    try {
+      mapper.writeValue(baos, this);
+    } catch (IOException e) {
+      return e.getMessage();
+    }
+    return baos.toString();
+  }
+
+  @Override
+  public String toString() {
+    return toJson();
+  }
+
+
+  // ********************************************
+  // static convenience methods
+  // ********************************************
+
+  public static ResultModel createCommandProcessingError(String message) {
-  public ResultModel createError(String message) {
-    addInfo().addLine(message);
-    setStatus(Result.Status.ERROR);
+  public static ResultModel createError(String message) {
+    ResultModel result = new ResultModel();
+    result.addInfo().addLine(message);
+    result.setStatus(Result.Status.ERROR);
+    return result;
+  }
-    return this;
+  public static ResultModel createInfo(String message) {
+    ResultModel result = new ResultModel();
+    result.addInfo().addLine(message);
+    result.setStatus(Result.Status.OK);
+    return result;
+  }
+
+  public static ResultModel createMemberStatusResult(List<CliFunctionResult> functionResults) {
+    return createMemberStatusResult(functionResults, null, null);
+  }
+
+  public static ResultModel createMemberStatusResult(List<CliFunctionResult> functionResults,
+      String header, String footer) {
+    ResultModel result = new ResultModel();
+    boolean atLeastOneSuccess = false;
+    TabularResultModel tabularResultModel = result.addTable();
+    tabularResultModel.setHeader(header);
+    tabularResultModel.setFooter(footer);
+    tabularResultModel.setColumnHeader("Member", "Status");
+    for (CliFunctionResult functionResult : functionResults) {
+      tabularResultModel.addRow(functionResult.getMemberIdOrName(), functionResult.getStatus());
+      if (functionResult.isSuccessful()) {
+        atLeastOneSuccess = true;
+      }
+    }
+    if (!atLeastOneSuccess) {
+      result.setStatus(Result.Status.ERROR);
+    }
+    return result;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 MOV43 INS42 INS44 INS44 INS44 INS8 INS25 MOV21 INS42 INS60 INS60 INS54 INS41 INS42 INS42 INS41 INS42 INS60 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS42 INS74 INS42 INS41 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS70 INS25 INS41 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS32 INS43 INS59 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS43 INS32 INS43 INS43 INS42 INS42 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS32 INS32 INS44 INS42 INS8 INS38 INS8 INS42 INS27 INS27 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS21 INS25 INS42 INS21 INS22 INS40 INS42 INS22 INS14 INS43 INS43 INS32 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS52 INS42 INS52 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS9 DEL8 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL65 DEL29 DEL52