Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    if (!this.processedMarker) {     
+    if (!this.processedMarker) {
-    
+
-        if (region.getAttributes().getPoolName()!=null && region.getAttributes().getPoolName().equals(qManager.getPool().getName())) {
+        if (region.getAttributes().getPoolName() != null
+            && region.getAttributes().getPoolName().equals(qManager.getPool().getName())) {
-      }
-      catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException e) {
+
-  
-  /** test hook - access to this map should be synchronized on the
-   * map to avoid concurrent modification exceptions
+
+  /**
+   * test hook - access to this map should be synchronized on the map to avoid concurrent
+   * modification exceptions
-  
+
-    return verifyIfDuplicate(eid, true);  
+    return verifyIfDuplicate(eid, true);
-  
+
-    ThreadIdentifier tid = new ThreadIdentifier(eid.getMembershipID(), eid
-        .getThreadID());
+    ThreadIdentifier tid = new ThreadIdentifier(eid.getMembershipID(), eid.getThreadID());
-    //    2.1)if putAll, check via real thread id again, 
-    //        if duplicate, reject (because one non-putall operation with bigger 
-    //        seqno has happened) 
-    //        otherwise save the putAllSeqno for real thread id 
-    //        and save seqno for tid
-    //    2.2) if not putAll, 
-    //        check putAllSequenceId with real thread id
-    //        if request's seqno is smaller, reject (because one putAll operation
-    //         with bigger seqno has happened)
-    //        otherwise, update the seqno for tid
+    // 2.1)if putAll, check via real thread id again,
+    // if duplicate, reject (because one non-putall operation with bigger
+    // seqno has happened)
+    // otherwise save the putAllSeqno for real thread id
+    // and save seqno for tid
+    // 2.2) if not putAll,
+    // check putAllSequenceId with real thread id
+    // if request's seqno is smaller, reject (because one putAll operation
+    // with bigger seqno has happened)
+    // otherwise, update the seqno for tid
-      }
-      else if (addToMap) {
-        ThreadIdentifier real_tid = new ThreadIdentifier(eid.getMembershipID(), 
+      } else if (addToMap) {
+        ThreadIdentifier real_tid = new ThreadIdentifier(eid.getMembershipID(),
-        if  (ThreadIdentifier.isPutAllFakeThreadID(eid.getThreadID())) {
+        if (ThreadIdentifier.isPutAllFakeThreadID(eid.getThreadID())) {
-              logger.debug("got a duplicate putAll entry with eventId {}. Other operation with same thread id and bigger seqno {} has happened. Ignoring the entry", eid, seo.getSequenceId());
+              logger.debug(
+                  "got a duplicate putAll entry with eventId {}. Other operation with same thread id and bigger seqno {} has happened. Ignoring the entry",
+                  eid, seo.getSequenceId());
-          }
-          else {
-            // save the seqno for real thread id into a putAllSequenceId 
+          } else {
+            // save the seqno for real thread id into a putAllSequenceId
-            this.threadIdToSequenceId.put(real_tid, seo == null? 
-                new SequenceIdAndExpirationObject(-1, seqId): 
-                new SequenceIdAndExpirationObject(seo.getSequenceId(), seqId));
+            this.threadIdToSequenceId.put(real_tid,
+                seo == null ? new SequenceIdAndExpirationObject(-1, seqId)
+                    : new SequenceIdAndExpirationObject(seo.getSequenceId(), seqId));
-              logger.debug("got a duplicate non-putAll entry with eventId {}. One putAll operation with same real thread id and bigger seqno {} has happened. Ignoring the entry", eid, seo.getPutAllSequenceId());
+              logger.debug(
+                  "got a duplicate non-putAll entry with eventId {}. One putAll operation with same real thread id and bigger seqno {} has happened. Ignoring the entry",
+                  eid, seo.getPutAllSequenceId());
-          }
-          else {
+          } else {
-            this.threadIdToSequenceId.put(tid, seo == null? 
-                new SequenceIdAndExpirationObject(seqId, -1):
-                new SequenceIdAndExpirationObject(seqId, seo.getPutAllSequenceId()));
+            this.threadIdToSequenceId.put(tid,
+                seo == null ? new SequenceIdAndExpirationObject(seqId, -1)
+                    : new SequenceIdAndExpirationObject(seqId, seo.getPutAllSequenceId()));
+
-    timer.scheduleWithFixedDelay(new ThreadIdToSequenceIdExpiryTask(),
-                              interval, interval, TimeUnit.MILLISECONDS);
+    timer.scheduleWithFixedDelay(new ThreadIdToSequenceIdExpiryTask(), interval, interval,
+        TimeUnit.MILLISECONDS);
-  
+
-   * 1)It will send an ack primary server for all threadIds for which it has not
-   * send an ack. 2)It will expire the entries which have exceeded the specified
-   * expiry time and for which ack has been alerady sent.
+   * 1)It will send an ack primary server for all threadIds for which it has not send an ack. 2)It
+   * will expire the entries which have exceeded the specified expiry time and for which ack has
+   * been alerady sent.
-//     private final long ackTime;
-//       ackTime = QueueStateImpl.this.qManager.getPool().getQueueAckInterval();
+    // private final long ackTime;
+    // ackTime = QueueStateImpl.this.qManager.getPool().getQueueAckInterval();
-//     /**
-//      * boolean to specify if the thread should continue running
-//      */
-//     private volatile boolean continueRunning = true;
+    // /**
+    // * boolean to specify if the thread should continue running
+    // */
+    // private volatile boolean continueRunning = true;
-      expiryTime = QueueStateImpl.this.qManager.getPool()
-          .getSubscriptionMessageTrackingTimeout();
+      expiryTime = QueueStateImpl.this.qManager.getPool().getSubscriptionMessageTrackingTimeout();
-    
+
-      //if ((qManager.getPool().getSubscriptionRedundancy() != 0) || (qManager.getPool().isDurableClient())) {
-        sendPeriodicAck();
-      //}
+      // if ((qManager.getPool().getSubscriptionRedundancy() != 0) ||
+      // (qManager.getPool().isDurableClient())) {
+      sendPeriodicAck();
+      // }
-//     void shutdown() {
-//       synchronized (this) {
-//         continueRunning = false;
-//         this.notify();
-//         // Since the wait is timed, it is not necessary to interrupt
-//         // the thread; it will wake up of its own accord.
-//         // this.interrupt();
-//       }
-//       try {
-//         this.join();
-//       } catch (InterruptedException e) {
-//         Thread.currentThread().interrupt();
-//         // TODO:
-//       }
-//     }
+    // void shutdown() {
+    // synchronized (this) {
+    // continueRunning = false;
+    // this.notify();
+    // // Since the wait is timed, it is not necessary to interrupt
+    // // the thread; it will wake up of its own accord.
+    // // this.interrupt();
+    // }
+    // try {
+    // this.join();
+    // } catch (InterruptedException e) {
+    // Thread.currentThread().interrupt();
+    // // TODO:
+    // }
+    // }
-            if (seo.getAckSend()
-                || (qManager.getPool().getSubscriptionRedundancy() == 0 && !qManager.getPool().isDurableClient())) {
+            if (seo.getAckSend() || (qManager.getPool().getSubscriptionRedundancy() == 0
+                && !qManager.getPool().isDurableClient())) {
-     * Sends Periodic ack to the primary server for all threadIds for which it
-     * has not send an ack.
+     * Sends Periodic ack to the primary server for all threadIds for which it has not send an ack.
-          SequenceIdAndExpirationObject seo = (SequenceIdAndExpirationObject) entry
-              .getValue();
+          SequenceIdAndExpirationObject seo = (SequenceIdAndExpirationObject) entry.getValue();
-            events.add(new EventID(tid.getMembershipID(), tid.getThreadID(),
-                seo.getSequenceId()));
+            events.add(new EventID(tid.getMembershipID(), tid.getThreadID(), seo.getSequenceId()));
-          }// if ends
-        }// while ends
-      }// synchronized ends
+          } // if ends
+        } // while ends
+      } // synchronized ends
-          PrimaryAckOp.execute(qManager.getAllConnections().getPrimary(), qManager.getPool(), events);
+          PrimaryAckOp.execute(qManager.getAllConnections().getPrimary(), qManager.getPool(),
+              events);
-              ThreadIdentifier tid = new ThreadIdentifier(
-                  eid.getMembershipID(), eid.getThreadID());
+              ThreadIdentifier tid = new ThreadIdentifier(eid.getMembershipID(), eid.getThreadID());
-                SequenceIdAndExpirationObject seo = (SequenceIdAndExpirationObject) threadIdToSequenceId
-                    .get(tid);
+                SequenceIdAndExpirationObject seo =
+                    (SequenceIdAndExpirationObject) threadIdToSequenceId.get(tid);
-                  seo = (SequenceIdAndExpirationObject) threadIdToSequenceId
-                      .remove(tid);
+                  seo = (SequenceIdAndExpirationObject) threadIdToSequenceId.remove(tid);
-                }// if ends
-              }// synchronized ends
-            }// while ends
-          }// if(!success) ends
-        }// finally ends
-      }// if(events.size() > 0)ends
+                } // if ends
+              } // synchronized ends
+            } // while ends
+          } // if(!success) ends
+        } // finally ends
+      } // if(events.size() > 0)ends
-   * A class to store sequenceId and the creation time of the object to be used
-   * for expiring the entry
+   * A class to store sequenceId and the creation time of the object to be used for expiring the
+   * entry

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66