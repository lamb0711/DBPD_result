GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_REMOTE_DS_ID_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_2_REMOTE_DS_ID
-              .toString(new Object[] {sp.Id, sp.remoteDSId, sender.remoteDSId}));
+          String.format(
+              "Cannot create Gateway Sender %s with remote ds id %s because another cache has the same Gateway Sender defined with remote ds id %s.",
+              sp.Id, sp.remoteDSId, sender.remoteDSId));
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_AS_PARALLEL_GATEWAY_SENDER_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_AS_SERIAL_GATEWAY_SENDER
-              .toString(new Object[] {sp.Id}));
+          String.format(
+              "Cannot create Gateway Sender %s as parallel gateway sender because another cache has the same sender as serial gateway sender",
+              sp.Id));
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_AS_SERIAL_GATEWAY_SENDER_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_AS_PARALLEL_GATEWAY_SENDER
-              .toString(new Object[] {sp.Id}));
+          String.format(
+              "Cannot create Gateway Sender %s as serial gateway sender because another cache has the same sender as parallel gateway sender",
+              sp.Id));
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_IS_BACTH_CONFLATION_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_IS_BATCH_CONFLATION_2
-              .toString(new Object[] {sp.Id, sp.isBatchConflationEnabled,
-                  sender.isBatchConflationEnabled()}));
+          String.format(
+              "Cannot create Gateway Sender %s with isBatchConflationEnabled %s because another cache has the same Gateway Sender defined with isBatchConflationEnabled %s",
+              sp.Id, sp.isBatchConflationEnabled,
+              sender.isBatchConflationEnabled()));
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_IS_PERSISTENT_ENABLED_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_IS_PERSISTENT_ENABLED_2
-              .toString(
-                  new Object[] {sp.Id, sp.isPersistenceEnabled, sender.isPersistenceEnabled()}));
+          String.format(
+              "Cannot create Gateway Sender %s with isPersistentEnabled %s because another cache has the same Gateway Sender defined with isPersistentEnabled %s",
+              sp.Id, sp.isPersistenceEnabled, sender.isPersistenceEnabled()));
-          LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_ALERT_THRESHOLD_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_ALERT_THRESHOLD_2
-              .toString(new Object[] {sp.Id, sp.alertThreshold, sender.getAlertThreshold()}));
+          String.format(
+              "Cannot create Gateway Sender %s with alertThreshold %s because another cache has the same Gateway Sender defined with alertThreshold %s",
+              sp.Id, sp.alertThreshold, sender.getAlertThreshold()));
-            LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_MANUAL_START_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_MANUAL_START_2
-                .toString(new Object[] {sp.Id, sp.manualStart, sender.isManualStart()}));
+            String.format(
+                "Cannot create Gateway Sender %s with manual start %s because another cache has the same Gateway Sender defined with manual start %s",
+                sp.Id, sp.manualStart, sender.isManualStart()));
-            LocalizedStrings.GatewaySenderAdvisor_CANNOT_CREATE_GATEWAYSENDER_0_WITH_ORDER_POLICY_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_SENDER_WITH_ORDER_POLICY_2
-                .toString(new Object[] {sp.Id, sp.orderPolicy, sender.getOrderPolicy()}));
+            String.format(
+                "Cannot create Gateway Sender %s with orderPolicy %s because another cache has the same Gateway Sender defined with orderPolicy %s",
+                sp.Id, sp.orderPolicy, sender.getOrderPolicy()));
-          LocalizedStrings.GatewaySenderAdvisor_GATEWAY_EVENT_FILTERS_MISMATCH.toString(
-              new Object[] {sp.Id, sp.eventFiltersClassNames, senderEventFilterClassNames}));
+          String.format(
+              "Cannot create Gateway Sender %s with GatewayEventFilters %s because another cache has the same Gateway Sender defined with GatewayEventFilters %s",
+              sp.Id, sp.eventFiltersClassNames, senderEventFilterClassNames));
-              LocalizedStrings.GatewaySenderAdvisor_GATEWAY_EVENT_FILTERS_MISMATCH.toString(
-                  new Object[] {sp.Id, sp.eventFiltersClassNames, senderEventFilterClassNames}));
+              String.format(
+                  "Cannot create Gateway Sender %s with GatewayEventFilters %s because another cache has the same Gateway Sender defined with GatewayEventFilters %s",
+                  sp.Id, sp.eventFiltersClassNames, senderEventFilterClassNames));
-          LocalizedStrings.GatewaySenderAdvisor_GATEWAY_TRANSPORT_FILTERS_MISMATCH.toString(
-              new Object[] {sp.Id, sp.transFiltersClassNames, senderTransportFilterClassNames}));
+          String.format(
+              "Cannot create Gateway Sender %s with GatewayTransportFilters %s because another cache has the same Gateway Sender defined with GatewayTransportFilters %s",
+              sp.Id, sp.transFiltersClassNames, senderTransportFilterClassNames));
-              LocalizedStrings.GatewaySenderAdvisor_GATEWAY_TRANSPORT_FILTERS_MISMATCH
-                  .toString(new Object[] {sp.Id, sp.transFiltersClassNames,
-                      senderTransportFilterClassNames}));
+              String.format(
+                  "Cannot create Gateway Sender %s with GatewayTransportFilters %s because another cache has the same Gateway Sender defined with GatewayTransportFilters %s",
+                  sp.Id, sp.transFiltersClassNames,
+                  senderTransportFilterClassNames));
-          LocalizedStrings.GatewaySenderAdvisor_GATEWAY_SENDER_LISTENER_MISMATCH
-              .toString(new Object[] {sp.Id, sp.senderEventListenerClassNames,
-                  senderEventListenerClassNames}));
+          String.format(
+              "Cannot create Gateway Sender %s with AsyncEventListeners %s because another cache has the same Gateway Sender defined with AsyncEventListener %s",
+              sp.Id, sp.senderEventListenerClassNames,
+              senderEventListenerClassNames));
-              LocalizedStrings.GatewaySenderAdvisor_GATEWAY_SENDER_LISTENER_MISMATCH
-                  .toString(new Object[] {sp.Id, sp.senderEventListenerClassNames,
-                      senderEventListenerClassNames}));
+              String.format(
+                  "Cannot create Gateway Sender %s with AsyncEventListeners %s because another cache has the same Gateway Sender defined with AsyncEventListener %s",
+                  sp.Id, sp.senderEventListenerClassNames,
+                  senderEventListenerClassNames));
-          LocalizedStrings.GatewaySenderAdvisor_GATEWAY_SENDER_IS_DISK_SYNCHRONOUS_MISMATCH
-              .toString(new Object[] {sp.Id, sp.isDiskSynchronous, sender.isDiskSynchronous()}));
+          String.format(
+              "Cannot create Gateway Sender %s with isDiskSynchronous %s because another cache has the same Gateway Sender defined with isDiskSynchronous %s",
+              sp.Id, sp.isDiskSynchronous, sender.isDiskSynchronous()));
-    logger.info(LocalizedMessage
-        .create(LocalizedStrings.SerialGatewaySenderImpl_0__STARTING_AS_PRIMARY, this.sender));
+    logger.info("{} : Starting as primary", this.sender);
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.SerialGatewaySenderImpl_0__BECOMING_PRIMARY_GATEWAYSENDER, this.sender));
+    logger.info("{} : Becoming primary gateway sender", this.sender);
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.SerialGatewaySenderImpl_0__STARTING_AS_SECONDARY_BECAUSE_PRIMARY_GATEWAY_SENDER_IS_AVAIALABLE_ON_MEMBER_2,
-        new Object[] {this.sender.getId(), advisePrimaryGatewaySender()}));
+    logger.info(
+        "{} starting as secondary because primary gateway sender is available on member :{}",
+        new Object[] {this.sender.getId(), advisePrimaryGatewaySender()});
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GatewaySender_0_IS_BECOMING_PRIMARY_GATEWAY_Sender,
-              GatewaySenderAdvisor.this));
+          logger.info("{} is becoming primary gateway Sender.",
+              GatewaySenderAdvisor.this);
-          logger.fatal(LocalizedMessage.create(
-              LocalizedStrings.GatewaySenderAdvisor_0_THE_THREAD_TO_OBTAIN_THE_FAILOVER_LOCK_WAS_INTERRUPTED__THIS_GATEWAY_SENDER_WILL_NEVER_BECOME_THE_PRIMARY,
-              GatewaySenderAdvisor.this), e);
+          logger.fatal(String.format(
+              "%s: The thread to obtain the failover lock was interrupted. This gateway sender will never become the primary.",
+              GatewaySenderAdvisor.this),
+              e);
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_0__WAITING_TO_BECOME_PRIMARY_GATEWAY, this.sender.getId()));
+      logger.info("{} : Waiting to become primary gateway", this.sender.getId());

MOV21 MOV21 MOV32 MOV32 MOV32 UPD42 UPD42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 INS45 MOV32 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 UPD42 INS45 UPD42 INS42 INS45 INS40 INS40 INS40 UPD42 INS42 INS45 INS40 UPD42 INS42 INS45 INS40 UPD42 INS42 INS45 INS40 INS40 MOV32 UPD42 INS42 INS45 INS40 INS40 MOV32 UPD42 INS42 INS45 INS40 INS40 MOV32 UPD42 INS42 INS45 INS40 INS40 INS42 UPD42 INS42 INS45 INS40 INS40 INS42 UPD42 INS42 INS45 INS40 INS40 INS42 UPD42 INS42 INS45 INS40 INS40 MOV32 UPD42 INS42 INS45 INS40 INS40 MOV32 UPD42 INS42 INS45 INS40 INS40 MOV32 MOV43 MOV43 MOV43 UPD42 INS42 INS45 INS40 INS40 INS42 UPD42 INS42 INS45 INS40 INS40 INS42 UPD42 INS42 INS45 INS40 INS40 INS42 INS45 MOV52 UPD42 UPD42 INS45 MOV52 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL42 DEL4 DEL3 DEL40 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL42 DEL32