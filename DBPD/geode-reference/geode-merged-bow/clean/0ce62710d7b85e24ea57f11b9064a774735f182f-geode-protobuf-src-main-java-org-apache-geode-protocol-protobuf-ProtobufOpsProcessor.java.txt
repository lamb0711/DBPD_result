GEODE-3129 - Added error messages to protobuf protocol. This now closes #621

added a new ErrorResponse type to ClientProtocol
removed success field from several RegionAPI response objects and refactored operation handlers to instead return ErrorResponses
made all op handlers take ClientProtocol.Requests and return ClientProtocol.Responses instead of operation specific types
moved the protobuf specific response building code from operation handlers to ProtobufResponseUtilities
moved the request building functions from MessageUtil (under Test) to ProtobufRequestUtilities
moved all utility classes to ...protocol.protobuf.utilities and added javadoc comments throughout
changed GetRegions to GetRegionNames, returns strings instead of Regions
replaced logging through the cache's LogWriter with log4j logging
updated all imports to be in the correct order for the new geode style guide

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Hitesh Khamesra <hiteshk25@yahoo.com>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-    Object responseMessage =
-        opsHandler.process(serializationService, getRequestForOperationTypeID(request), cache);
-    return wrapResponseForOperationTypeID(requestType, responseMessage);
-  }
-
-  // package visibility for testing
-  static Object getRequestForOperationTypeID(ClientProtocol.Request request)
-      throws InvalidProtocolMessageException {
-    switch (request.getRequestAPICase()) {
-      case PUTREQUEST:
-        return request.getPutRequest();
-      case GETREQUEST:
-        return request.getGetRequest();
-      case PUTALLREQUEST:
-        return request.getPutAllRequest();
-      case GETREGIONSREQUEST:
-        return request.getGetRegionsRequest();
-      default:
-        throw new InvalidProtocolMessageException(
-            "Unknown request type: " + request.getRequestAPICase().getNumber());
-    }
-  }
-
-  static ClientProtocol.Response wrapResponseForOperationTypeID(
-      ClientProtocol.Request.RequestAPICase requestType, Object response)
-      throws InvalidProtocolMessageException {
-    ClientProtocol.Response.Builder builder = ClientProtocol.Response.newBuilder();
-    switch (requestType) {
-      case PUTREQUEST:
-        return builder.setPutResponse((RegionAPI.PutResponse) response).build();
-      case GETREQUEST:
-        return builder.setGetResponse((RegionAPI.GetResponse) response).build();
-      case PUTALLREQUEST:
-        return builder.setPutAllResponse((RegionAPI.PutAllResponse) response).build();
-      case GETREGIONSREQUEST:
-        return builder.setGetRegionsResponse((RegionAPI.GetRegionsResponse) response).build();
-      default:
-        throw new InvalidProtocolMessageException(
-            "Unknown request type: " + requestType.getNumber());
-    }
+    return (ClientProtocol.Response) opsHandler.process(serializationService, request, cache);

INS41 INS11 MOV43 INS32 MOV42 MOV42 MOV42 MOV42 MOV42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL49 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL32 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL83 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL49 DEL42 DEL42 DEL40 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL40 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL40 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL40 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31