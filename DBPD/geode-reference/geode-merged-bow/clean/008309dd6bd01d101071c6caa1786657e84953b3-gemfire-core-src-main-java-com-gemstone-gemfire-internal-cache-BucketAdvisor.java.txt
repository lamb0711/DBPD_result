Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-  } 
+  }
+  
+  /**
+   * If the current member is primary for this bucket return true, otherwise, 
+   * give some time for the current member to become primary and
+   * then return whether it is a primary (true/false).
+   */
+  public final boolean isPrimaryWithWait() {
+    if (this.isPrimary()) {
+      return true;
+    }
+    // wait for the current member to become primary holder
+    InternalDistributedMember primary = waitForNewPrimary(); 
+    if(primary != null) {
+        return true;
+    }
+    return false;
+  }
+        Bucket br = this.regionAdvisor.getBucket(getBucket().getId());
+        if( br != null && br instanceof BucketRegion) {
+          ((BucketRegion)br).beforeReleasingPrimaryLockDuringDemotion();
+        }
+
+
+  private final static long BUCKET_STORAGE_WAIT = Long.getLong("gemfire.BUCKET_STORAGE_WAIT", 15000).longValue(); // 15 seconds
+  public boolean waitForStorage() {
+    synchronized (this) {
+      // let's park this thread and wait for storage!
+      StopWatch timer = new StopWatch(true);
+      try {
+        for (;;) {
+          if (this.regionAdvisor.isBucketLocal(getBucket().getId())) {
+            return true;
+          }
+          getProxyBucketRegion().getPartitionedRegion().checkReadiness();
+          if (isClosed()) {
+            return false;
+          }
+          long timeLeft = BUCKET_STORAGE_WAIT - timer.elapsedTimeMillis();
+          if (timeLeft <= 0) {
+            return false;
+          }
+          if (logger.isDebugEnabled()) {
+            logger.debug("Waiting for bucket storage" + this);
+          }
+          this.wait(timeLeft); // spurious wakeup ok
+        }
+      }
+      catch (InterruptedException e) {
+        // abort and return null
+        Thread.currentThread().interrupt();
+      }
+      return false;
+    }
+  }
-        BridgeServerImpl server = (BridgeServerImpl)object;
+        CacheServerImpl server = (CacheServerImpl)object;

INS31 INS23 INS31 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS65 INS25 INS60 INS25 INS41 INS42 INS32 INS51 INS66 INS66 INS66 INS32 INS8 INS43 INS59 INS27 INS8 INS9 INS32 INS42 INS52 INS8 INS52 INS42 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS45 INS34 INS60 INS54 INS41 INS9 INS42 INS9 INS43 INS59 INS8 INS12 INS9 INS60 INS25 INS42 INS42 INS14 INS24 INS44 INS8 INS43 INS59 INS27 INS8 INS43 INS9 INS8 INS43 INS42 INS21 UPD43 INS42 INS42 INS32 INS27 INS62 INS21 INS42 INS25 INS21 INS25 INS60 INS25 INS25 INS21 INS42 INS32 UPD42 INS22 INS42 INS32 INS42 INS33 INS42 INS43 INS32 INS32 INS8 INS32 INS32 INS8 INS39 INS59 INS27 INS8 INS32 INS8 INS32 INS32 INS42 UPD43 INS52 INS42 INS32 INS42 INS42 INS36 INS42 INS22 INS42 INS32 INS41 INS32 INS42 INS42 INS41 INS42 INS27 INS42 INS34 INS41 INS42 INS42 INS21 INS52 INS42 INS42 INS42 INS42 UPD42 INS42 INS11 INS52 INS42 INS32 INS42 INS9 INS32 INS42 INS9 INS42 INS32 INS9 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS52