Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//    valuePart = null;  (redundant assignment)
+    // valuePart = null; (redundant assignment)
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug("{}: Received 7.0 get request ({} bytes) from {} for region {} key {} txId {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key, msg.getTransactionId());
+      logger.debug("{}: Received 7.0 get request ({} bytes) from {} for region {} key {} txId {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key,
+          msg.getTransactionId());
-        errMessage = LocalizedStrings.Request_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_GET_REQUEST_ARE_NULL;
+        errMessage =
+            LocalizedStrings.Request_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_GET_REQUEST_ARE_NULL;
-        errMessage = LocalizedStrings.Request_THE_INPUT_KEY_FOR_THE_GET_REQUEST_IS_NULL;   
+        errMessage = LocalizedStrings.Request_THE_INPUT_KEY_FOR_THE_GET_REQUEST_IS_NULL;
-      String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST.toLocalizedString(regionName);
+      String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST
+          .toLocalizedString(regionName);
-        getContext = authzRequest
-          .getAuthorize(regionName, key, callbackArg);
+        getContext = authzRequest.getAuthorize(regionName, key, callbackArg);
-    }
-    catch (NotAuthorizedException ex) {
+    } catch (NotAuthorizedException ex) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    @Retained final Object originalData = entry.value;
+    @Retained
+    final Object originalData = entry.value;
-            getContext = postAuthzRequest.getAuthorize(regionName, key, data,
-              isObject, getContext);
+            getContext = postAuthzRequest.getAuthorize(regionName, key, data, isObject, getContext);
-          }
-          finally {
+          } finally {
-      }
-      catch (NotAuthorizedException ex) {
+      } catch (NotAuthorizedException ex) {
-          writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject,
-            servConn, pr, pr.getNetworkHopType(), versionTag, keyNotPresent);
+          writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject, servConn, pr,
+              pr.getNetworkHopType(), versionTag, keyNotPresent);
-        }
-        else {
+        } else {
-      }
-      else {
+      } else {
-    }
-    finally {
+    } finally {
-      logger.debug("{}: Wrote get response back to {} for region {} {}", servConn.getName(), servConn.getSocketString(), regionName, entry);
+      logger.debug("{}: Wrote get response back to {} for region {} {}", servConn.getName(),
+          servConn.getSocketString(), regionName, entry);
-   * This method was added so that Get70 could, by default,
-   * call getEntryRetained, but the subclass GetEntry70
-   * could override it and call getValueAndIsObject.
-   * If we ever get to the point that no code needs to
-   * call getValueAndIsObject then this method can go away.
+   * This method was added so that Get70 could, by default, call getEntryRetained, but the subclass
+   * GetEntry70 could override it and call getValueAndIsObject. If we ever get to the point that no
+   * code needs to call getValueAndIsObject then this method can go away.
-  protected Entry getEntry(Region region, Object key,
-      Object callbackArg, ServerConnection servConn) {
+  protected Entry getEntry(Region region, Object key, Object callbackArg,
+      ServerConnection servConn) {
-  
+
-  // for large number of entries like in getAll.  Third element added in
+  // for large number of entries like in getAll. Third element added in
-  public Entry getValueAndIsObject(Region region, Object key,
-      Object callbackArg, ServerConnection servConn) {
+  public Entry getValueAndIsObject(Region region, Object key, Object callbackArg,
+      ServerConnection servConn) {
-//    Region.Entry entry;
+    // Region.Entry entry;
-//    LocalRegion lregion = (LocalRegion)region;
+    // LocalRegion lregion = (LocalRegion)region;
-//    entry = lregion.getEntry(key, true);
+    // entry = lregion.getEntry(key, true);
-//    if (entry != null && region.getAttributes().getConcurrencyChecksEnabled()) {
-//      RegionEntry re;
-//      if (entry instanceof NonTXEntry) {
-//        re = ((NonTXEntry)entry).getRegionEntry();
-//      } else if (entry instanceof EntrySnapshot) {
-//        re = ((EntrySnapshot)entry).getRegionEntry();
-//      } else if (entry instanceof TXEntry) {
-//        re = null; // versioning not supported in tx yet
-//        data = entry.getValue(); // can I get a serialized form??
-//      } else {
-//        re = (RegionEntry)entry;
-//      }
-//      if (re != null) {
-//        data = re.getValueInVM();
-//        VersionStamp stamp = re.getVersionStamp();
-//        if (stamp != null) {
-//          versionHolder.setVersionTag(stamp.asVersionTag());
-//        }
-//      }
-//    } else {
-      ClientProxyMembershipID id = servConn == null ? null : servConn.getProxyID();
-      VersionTagHolder versionHolder = new VersionTagHolder();
-      data  = ((LocalRegion) region).get(key, callbackArg, true, true, true, id, versionHolder, true);
-//    }
+    // if (entry != null && region.getAttributes().getConcurrencyChecksEnabled()) {
+    // RegionEntry re;
+    // if (entry instanceof NonTXEntry) {
+    // re = ((NonTXEntry)entry).getRegionEntry();
+    // } else if (entry instanceof EntrySnapshot) {
+    // re = ((EntrySnapshot)entry).getRegionEntry();
+    // } else if (entry instanceof TXEntry) {
+    // re = null; // versioning not supported in tx yet
+    // data = entry.getValue(); // can I get a serialized form??
+    // } else {
+    // re = (RegionEntry)entry;
+    // }
+    // if (re != null) {
+    // data = re.getValueInVM();
+    // VersionStamp stamp = re.getVersionStamp();
+    // if (stamp != null) {
+    // versionHolder.setVersionTag(stamp.asVersionTag());
+    // }
+    // }
+    // } else {
+    ClientProxyMembershipID id = servConn == null ? null : servConn.getProxyID();
+    VersionTagHolder versionHolder = new VersionTagHolder();
+    data = ((LocalRegion) region).get(key, callbackArg, true, true, true, id, versionHolder, true);
+    // }
-    
+
-    }
-    else if (data == Token.REMOVED_PHASE1 || data == Token.REMOVED_PHASE2 || data == Token.DESTROYED) {
+    } else if (data == Token.REMOVED_PHASE1 || data == Token.REMOVED_PHASE2
+        || data == Token.DESTROYED) {
-    }
-    else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
+    } else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
-    }
-    else if (data instanceof byte[]) {
+    } else if (data instanceof byte[]) {
-  public Entry getEntryRetained(Region region, Object key,
-      Object callbackArg, ServerConnection servConn) {
+  public Entry getEntryRetained(Region region, Object key, Object callbackArg,
+      ServerConnection servConn) {
-//    Region.Entry entry;
+    // Region.Entry entry;
-//    LocalRegion lregion = (LocalRegion)region;
+    // LocalRegion lregion = (LocalRegion)region;
-//    entry = lregion.getEntry(key, true);
+    // entry = lregion.getEntry(key, true);
-    @Retained Object data = null;
+    @Retained
+    Object data = null;
-    data = ((LocalRegion) region).getRetained(key, callbackArg, true, true, id, versionHolder, true);
+    data =
+        ((LocalRegion) region).getRetained(key, callbackArg, true, true, id, versionHolder, true);
-    
+
-    }
-    else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
+    } else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
-    }
-    else if (data instanceof byte[]) {
+    } else if (data instanceof byte[]) {
-    
+
-      return "value=" + value + " isObject=" + isObject + " notPresent=" + keyNotPresent + " version=" + versionTag;
+      return "value=" + value + " isObject=" + isObject + " notPresent=" + keyNotPresent
+          + " version=" + versionTag;
-  
+
-  protected void writeReply(Message origMsg, ServerConnection servConn)
-      throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn) throws IOException {
-  protected void writeReplyWithRefreshMetadata(Message origMsg,
-      ServerConnection servConn, PartitionedRegion pr, byte nwHop) throws IOException {
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+      PartitionedRegion pr, byte nwHop) throws IOException {
-  private void writeResponse(@Unretained Object data, Object callbackArg,
-      Message origMsg, boolean isObject, VersionTag versionTag, boolean keyNotPresent, ServerConnection servConn)
+  private void writeResponse(@Unretained Object data, Object callbackArg, Message origMsg,
+      boolean isObject, VersionTag versionTag, boolean keyNotPresent, ServerConnection servConn)
-    
+
-    } else if (data == null  &&  isObject) {
+    } else if (data == null && isObject) {
-//    logger.debug("returning flags " + Integer.toBinaryString(flags));
-    
+    // logger.debug("returning flags " + Integer.toBinaryString(flags));
+
-    
+
-  
-  protected static void writeResponse(Object data, Object callbackArg,
-      Message origMsg, boolean isObject, ServerConnection servConn)
-      throws IOException {
+
+  protected static void writeResponse(Object data, Object callbackArg, Message origMsg,
+      boolean isObject, ServerConnection servConn) throws IOException {
-  private void writeResponseWithRefreshMetadata(@Unretained Object data,
-      Object callbackArg, Message origMsg, boolean isObject,
-      ServerConnection servConn, PartitionedRegion pr, byte nwHop,
-      VersionTag versionTag, boolean keyNotPresent) throws IOException {
+  private void writeResponseWithRefreshMetadata(@Unretained Object data, Object callbackArg,
+      Message origMsg, boolean isObject, ServerConnection servConn, PartitionedRegion pr,
+      byte nwHop, VersionTag versionTag, boolean keyNotPresent) throws IOException {
-    
+
-    } else if (data == null  &&  isObject) {
+    } else if (data == null && isObject) {
-//    logger.debug("returning flags " + Integer.toBinaryString(flags));
-    
+    // logger.debug("returning flags " + Integer.toBinaryString(flags));
+
-    
+
-    
+
-    responseMsg.addBytesPart(new byte[]{pr.getMetadataVersion(),nwHop});
+    responseMsg.addBytesPart(new byte[] {pr.getMetadataVersion(), nwHop});

UPD66 UPD66 UPD66 DEL66 DEL66