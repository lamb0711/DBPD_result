Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.cache.query.internal.cq.ServerCQ;
+import com.gemstone.gemfire.internal.cache.CacheDistributionAdvisor.CacheProfile;
+import com.gemstone.gemfire.internal.cache.tier.MessageType;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
-   * @since 5.7
+   * @since GemFire 5.7
-   * Deserialization policy: deserialize eagerly (for Deltas)
-   * 
-   * @since 5.7
-   */
-  public static final byte DESERIALIZATION_POLICY_EAGER = (byte)1;
-
-  /**
-   * @since 5.7
+   * @since GemFire 5.7
-   * @param deserializationPolicy must be one of the following: DESERIALIZATION_POLICY_NONE, DESERIALIZATION_POLICY_EAGER, DESERIALIZATION_POLICY_LAZY.
+   * @param deserializationPolicy must be one of the following: DESERIALIZATION_POLICY_NONE, DESERIALIZATION_POLICY_LAZY.
-      if (deserializationPolicy == DESERIALIZATION_POLICY_EAGER) {
-        // for DESERIALIZATION_POLICY_EAGER avoid extra byte array serialization
-        DataSerializer.writeObject(vObj, out);
-      } else if (deserializationPolicy == DESERIALIZATION_POLICY_NONE) {
+      if (deserializationPolicy == DESERIALIZATION_POLICY_NONE) {
-        // TODO OFFHEAP MERGE: cache the oldValue that is serialized here
-        // into the event
-      if (deserializationPolicy == DESERIALIZATION_POLICY_EAGER) {
-        // object is already in serialized form in the byte array.
-        // So just write the bytes to the stream.
-        // fromData will call readObject which will deserialize to object form.
-        out.write(vBytes);
-      } else {
-        DataSerializer.writeByteArray(vBytes, out);
-      }
+      DataSerializer.writeByteArray(vBytes, out);
-    if (CachedDeserializableFactory.preferObject()) return DESERIALIZATION_POLICY_EAGER;
-    case DESERIALIZATION_POLICY_EAGER:
-      return "EAGER";
-   * @since 5.0
+   * @since GemFire 5.0
-          msg.appendOldValueToMessage((EntryEventImpl)this.event); // TODO OFFHEAP optimize
+          msg.appendOldValueToMessage((EntryEventImpl)this.event);
+      if (region.isUsedForPartitionedRegionBucket() && filterRouting != null) {
+        removeDestroyTokensFromCqResultKeys(filterRouting);
+      }
+
+
+  /**
+   * Cleanup destroyed events in CQ result cache for remote CQs.
+   * While maintaining the CQ results key caching. the destroy event
+   * keys are marked as destroyed instead of removing them, this is
+   * to take care, arrival of duplicate events. The key marked as
+   * destroyed are  removed after the event is placed in clients 
+   * HAQueue or distributed to the peers.
+   *
+   * This is similar to CacheClientNotifier.removeDestroyTokensFromCqResultKeys()
+   * where the destroyed events for local CQs are handled.
+   */
+  private void removeDestroyTokensFromCqResultKeys(FilterRoutingInfo filterRouting) {
+    for (InternalDistributedMember m : filterRouting.getMembers()) {
+      FilterInfo filterInfo = filterRouting.getFilterInfo(m);
+      if (filterInfo.getCQs() == null) {
+        continue;
+      }
+
+      CacheProfile cf = (CacheProfile) ((BucketRegion)getRegion()).getPartitionedRegion()
+          .getCacheDistributionAdvisor().getProfile(m);
+
+      if (cf == null || cf.filterProfile == null || cf.filterProfile.isLocalProfile() 
+          || cf.filterProfile.getCqMap().isEmpty()) {
+        continue;
+      }
+
+
+      for (Object value : cf.filterProfile.getCqMap().values()) {
+        ServerCQ cq = (ServerCQ)value;
+
+        for (Map.Entry<Long, Integer> e: filterInfo.getCQs().entrySet()) {
+          Long cqID = e.getKey();
+          // For the CQs satisfying the event with destroy CQEvent, remove
+          // the entry form CQ cache.
+          if (cq.getFilterID() == cqID && (e.getValue().equals(Integer.valueOf(
+              MessageType.LOCAL_DESTROY)))) {
+            cq.removeFromCqResultKeys(((EntryEventImpl)event).getKey(), true);
+          }
+        }
+      }
+    }
+  }
+
+
-	protected final static short FETCH_FROM_HDFS = 0x200;
-    
-    protected final static short IS_PUT_DML = 0x100;
-
-     * @since 5.5
+     * @since GemFire 5.5
-     * @since 5.5
+     * @since GemFire 5.5
-     * @since 6.1
+     * @since GemFire 6.1
-     * @since 4.2.3
+     * @since GemFire 4.2.3
-      InternalCacheEvent event = null;
-        event = createEvent(rgn);
+        @Released InternalCacheEvent event = createEvent(rgn);
-	  if (this instanceof PutAllMessage) {
-        ((PutAllMessage) this).setFetchFromHDFS((extBits & FETCH_FROM_HDFS) != 0);
-        ((PutAllMessage) this).setPutDML((extBits & IS_PUT_DML) != 0);
-      }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 MOV8 INS29 INS83 INS39 INS42 INS44 INS8 MOV49 MOV65 INS43 INS42 INS70 UPD66 UPD66 UPD66 MOV27 INS8 MOV8 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS42 INS44 INS32 INS8 MOV25 MOV25 INS25 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS70 UPD66 UPD66 UPD66 UPD66 MOV27 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS44 INS32 INS8 INS60 MOV21 INS32 INS27 INS21 INS42 INS42 INS32 INS32 INS33 INS18 INS42 UPD42 MOV42 INS11 INS27 INS32 INS18 INS43 INS42 INS32 INS42 INS60 INS70 INS78 MOV43 INS59 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS27 INS32 INS32 INS42 INS42 INS40 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS40 INS42 INS40 INS42 INS42 INS42 INS11 INS74 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS42 INS33 INS40 INS33 INS43 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS27 INS8 INS36 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS27 INS36 INS21 INS11 INS42 INS42 INS32 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS36 INS42 INS11 INS43 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL39 DEL34 DEL11 DEL59 DEL23 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL41 DEL25 DEL45 DEL41 DEL42 DEL49 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL52 DEL42 DEL43 DEL62 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL32 DEL21 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL32 DEL21 DEL8 DEL25