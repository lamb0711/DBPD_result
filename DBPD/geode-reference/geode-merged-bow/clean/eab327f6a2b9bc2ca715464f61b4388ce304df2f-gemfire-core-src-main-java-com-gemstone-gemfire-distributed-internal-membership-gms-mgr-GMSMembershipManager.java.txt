GEODE-77 fixes for failing unit and integration tests

  if the coordinator returned by locators doesn't work we now
  ask other members in the view returned by the locator

  leave & crash events now ack the view currently being installed
  so that it won't wait for the associated members

  views are always installed using the two-phase protocol.
  GemFire did this and some algorithms, such as rebalancing,
  are thrown off if departed members are in the view when
  a rebalance starts.

  views are always transmitted by the View Creator thread.
  GMSJoinLeave.becomeCoordinator() installs an initial view
  into the View Creator before starting it if there is a view
  to prepare and install.

  Rebalance operations targetting a new member were failing to
  achieve balance if an old ID for that member was still in the
  membership view.  We now detect those old IDs and remove them
  when the new member joins.

  ClientProxyMembershipID was not being deserialized properly
  after being transmitted from one member to another.

  HealthMonitor classes with Ping in their names are renamed to
  Check.  I've found that Ping confuses people - they
  sometimes think that gemfire is using network ping protocol

  HealthMonitor beSick/playDead were tightened up

  HealthMonitor was not recording activity from other members unless
  it was currently watching that member.  This caused a lot of
  unnecessary suspicion when switching from one member to another.

  HealthMonitor wasn't clear about who was raising suspicion and
  who was the target of the suspicion.

  FindCoordinatorRequest was using java serialization for rejected
  coordinator IDs.

  GMSMembershipManager's latestViewLock use wasn't quite the same
  as in the membership manager in GemFire 8.2 and caused a deadlock.

  fixing GEODE-360: PRTombstoneMessage should ignore
  ForceReattemptException

  LogFileParser wasn't recognizing timestamps for thread dumps, causing
  them to be mis-sorted when merging log files.

-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.writeLock().lock();
-    try {
-      addSurpriseMember(member, stub);
-    } finally {
-      latestViewLock.writeLock().unlock();
-    }
+    addSurpriseMember(member, stub);
-      latestViewLock.readLock().lock();
-      Set keySet = memberToStubMap.keySet();
-      keys = new InternalDistributedMember[keySet.size()];
-      keys = (InternalDistributedMember[])keySet.toArray(keys);
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().lock();
+      try {
+        Set keySet = memberToStubMap.keySet();
+        keys = new InternalDistributedMember[keySet.size()];
+        keys = (InternalDistributedMember[])keySet.toArray(keys);
+      } finally {
+        latestViewLock.writeLock().unlock();
+      }
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-  /**
-   * return the member address for the given GMS address, or null if it's not a member
-   */
-  public InternalDistributedMember getMemberForAddress(InetSocketAddress addr) {
-    latestViewLock.readLock().lock();
-    try {
-      for (InternalDistributedMember idm: latestView.getMembers()) {
-        if (idm.getInetAddress().equals(addr.getAddress())
-              && idm.getPort() == addr.getPort()) {
-            return idm;
-        }
-      }
-      return null;
-    } finally {
-      latestViewLock.readLock().unlock();
-    }
-  }
-  
+    latestViewLock.writeLock().lock();
+    latestViewLock.writeLock().unlock();
-    result = (Stub)memberToStubMap.get(address);
-    latestViewLock.readLock().unlock();
+    try {
+      result = (Stub)memberToStubMap.get(address);
+    } finally {
+      latestViewLock.readLock().unlock();
+    }
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-        wait = this.latestView.contains(idm);
-        latestViewLock.readLock().unlock();
+        try {
+          wait = this.latestView.contains(idm);
+        } finally {
+          latestViewLock.readLock().unlock();
+        }
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-    latestViewLock.readLock().lock();
+    latestViewLock.writeLock().lock();
-      latestViewLock.readLock().unlock();
+      latestViewLock.writeLock().unlock();
-      if (logger.isDebugEnabled()) {
-        logger.debug("GroupMembershipService.beSick invoked for {} - simulating sickness", this.address);
+      if (logger.isInfoEnabled()) {
+        logger.info("GroupMembershipService.beSick invoked for {} - simulating sickness", this.address);

MOV8 INS39 INS42 MOV21 MOV21 MOV21 INS54 MOV32 INS8 INS8 INS8 INS8 MOV42 MOV21 INS21 INS54 MOV21 MOV21 INS21 MOV42 UPD42 UPD42 MOV32 INS32 MOV8 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS21 INS32 INS42 INS54 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS8 MOV8 UPD42 UPD42 UPD42 INS32 INS42 MOV21 UPD42 INS42 INS42 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41 DEL8 DEL8 DEL54 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21