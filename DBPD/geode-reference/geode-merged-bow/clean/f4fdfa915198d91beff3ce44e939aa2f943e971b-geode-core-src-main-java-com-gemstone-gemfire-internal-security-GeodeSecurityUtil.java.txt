GEODE-1571: revert previous two changes

-import java.lang.reflect.Method;
-import org.apache.commons.lang.NullArgumentException;
-import org.apache.geode.security.GeodePermission;
-import org.apache.geode.security.GeodePermission.Operation;
-import org.apache.geode.security.GeodePermission.Resource;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.SecurityManager;
+import org.apache.shiro.UnavailableSecurityManagerException;
+import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.GeodePermission.Operation;
+import org.apache.geode.security.GeodePermission.Resource;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
-    if (!isIntegratedSecure) {
+    if (!isSecured()) {
-    if (!isIntegratedSecure) {
+    if (!isSecured()) {
+  private static boolean isSecured() {
+    try {
+      SecurityUtils.getSecurityManager();
+    }
+    catch (UnavailableSecurityManagerException e) {
+      return false;
+    }
+    return true;
+  }
+
-  private static boolean isSecure;
-  private static boolean isIntegratedSecure;
-    String clientAuthenticatorConfig = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
-      isSecure = true;
-      isIntegratedSecure = true;
+
-      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
-      isSecure = true;
-      isIntegratedSecure = true;
-    }
-    else if( !StringUtils.isBlank(clientAuthenticatorConfig)) {
-      isSecure = true;
-      isIntegratedSecure = false;
-      isSecure = false;
-      isIntegratedSecure = false;
-      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
+      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
-    isSecure = false;
-    isIntegratedSecure = false;
-    return (isIntegratedSecure && postProcessor != null);
+    Subject subject = getSubject();
+    return (subject != null && postProcessor != null);
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param className
-   * @param expectedClazz
-   * @param <T>
-   * @return
-   */
-  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
+  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param factoryMethodName
-   * @param expectedClazz
-   * @param <T>
-   * @return
-   */
-  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
-    try {
-      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
-      T actualObject = (T)factoryMethod.invoke(null, (Object[])null);
-
-      if(actualObject == null){
-        throw new NullArgumentException("Factory method "+ factoryMethodName + " should not return null.");
-      }
-
-      return actualObject;
-    } catch (Exception e) {
-      throw new GemFireSecurityException(e.toString(), e);
-    }
-  }
-
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param classOrMethod
-   * @param expectedClazz
-   * @param <T>
-   * @return an object of type expectedClazz. This method would never return null. It either returns an non-null
-   * object or throws exception.
-   */
-  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
-    T object = null;
-    try{
-      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
-    }
-    catch (Exception e){
-      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
-    }
-    return object;
-  }
-
-  public static boolean isSecurityRequired(){
-    return isSecure;
+  public static boolean isSecurityRequired(Properties securityProps){
+    String authenticator = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
+    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
+    return !StringUtils.isEmpty(authenticator) || !StringUtils.isEmpty(securityManager);
-  public static boolean isIntegratedSecurity(){
-    return isIntegratedSecure;
+  public static boolean isIntegratedSecurity(Properties securityProps){
+    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
+    return !StringUtils.isEmpty(securityManager);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 INS31 INS31 INS83 INS83 INS39 INS42 MOV8 UPD42 INS39 INS42 MOV83 MOV83 MOV39 UPD42 MOV42 INS44 MOV8 INS41 INS60 INS43 INS42 MOV60 INS60 INS41 INS43 INS42 INS60 INS9 INS43 INS59 UPD42 MOV42 MOV43 INS59 INS27 INS42 MOV43 INS59 INS38 INS32 INS32 INS21 MOV8 INS42 INS42 INS32 UPD42 INS42 INS32 INS38 INS38 INS42 INS32 INS32 INS42 INS42 INS32 UPD43 INS41 INS42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS9 UPD42 MOV42 INS33 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL31 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL66 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL44 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL31