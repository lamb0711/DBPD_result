Merge branch 'release/1.5.0'

-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+  private final int subscriptionTimeoutMultiplier;
+  private InternalCache cache;
-      List<HostAddress> locatorAddresses) {
-    PoolImpl pool = new PoolImpl(pm, name, attributes, locatorAddresses);
+      List<HostAddress> locatorAddresses, InternalDistributedSystem distributedSystem,
+      InternalCache cache) {
+    PoolImpl pool = new PoolImpl(pm, name, attributes, locatorAddresses, distributedSystem, cache);
-      List<HostAddress> locAddresses) {
+      List<HostAddress> locAddresses, InternalDistributedSystem distributedSystem,
+      InternalCache cache) {
+    this.subscriptionTimeoutMultiplier = attributes.getSubscriptionTimeoutMultiplier();
+    if (this.subscriptionTimeoutMultiplier < 0) {
+      throw new IllegalArgumentException("The subscription timeout multipler must not be negative");
+    }
-    // if (this.subscriptionEnabled && this.multiuserSecureModeEnabled) {
-    // throw new IllegalStateException(
-    // "subscription-enabled and multiuser-authentication both cannot be true.");
-    // }
-    InternalDistributedSystem ds = InternalDistributedSystem.getAnyInstance();
-    if (ds == null) {
+    this.dsys = distributedSystem;
+    if (this.dsys == null) {
-    this.securityLogWriter = ds.getSecurityInternalLogWriter();
-    if (!ds.getConfig().getStatisticSamplingEnabled() && this.statisticInterval > 0) {
+    this.cache = cache;
+    this.securityLogWriter = this.dsys.getSecurityInternalLogWriter();
+    if (!this.dsys.getConfig().getStatisticSamplingEnabled() && this.statisticInterval > 0) {
-    this.dsys = ds;
-      this.proxyId = ClientProxyMembershipID.getNewProxyMembership(ds);
+      this.proxyId = ClientProxyMembershipID.getNewProxyMembership(this.dsys);
-      this.proxyId = ClientProxyMembershipID.getNewProxyMembership(ds);
+      this.proxyId = ClientProxyMembershipID.getNewProxyMembership(this.dsys);
-      statFactory = ds;
+      statFactory = this.dsys;
-    endpointManager = new EndpointManagerImpl(name, ds, this.cancelCriterion, this.stats);
-    connectionFactory = new ConnectionFactoryImpl(source, endpointManager, ds, socketBufferSize,
-        socketConnectTimeout, readTimeout, proxyId, this.cancelCriterion, usedByGateway,
-        gatewaySender, pingInterval, multiuserSecureModeEnabled, this);
+    endpointManager = new EndpointManagerImpl(name, this.dsys, this.cancelCriterion, this.stats);
+    connectionFactory = new ConnectionFactoryImpl(source, endpointManager, this.dsys,
+        socketBufferSize, socketConnectTimeout, readTimeout, proxyId, this.cancelCriterion,
+        usedByGateway, gatewaySender, pingInterval, multiuserSecureModeEnabled, this);
-            if (!CacheFactory.getAnyInstance().isClosed()
-                && this.getPoolOrCacheCancelInProgress() == null) {
-              Set<Region<?, ?>> regions = CacheFactory.getInstance(dsys).rootRegions();
+            if (cache == null && dsys != null) {
+              cache = dsys.getCache();
+              if (cache == null) {
+                throw new IllegalStateException(
+                    LocalizedStrings.PoolImpl_CACHE_MUST_BE_CREATED_BEFORE_CREATING_POOL
+                        .toLocalizedString());
+              }
+            }
+            if (!cache.isClosed() && this.getPoolOrCacheCancelInProgress() == null) {
+              Set<Region<?, ?>> regions = cache.rootRegions();
-    InternalDistributedSystem system = InternalDistributedSystem.getAnyInstance();
-    DistributionConfig config = system.getConfig();
+    DistributionConfig config = dsys.getConfig();
-    Cache cache = CacheFactory.getInstance(InternalDistributedSystem.getAnyInstance());
-    DefaultQueryService queryService = new DefaultQueryService((InternalCache) cache);
+    DefaultQueryService queryService = new DefaultQueryService(cache);
-    Cache cache = CacheFactory.getInstance(InternalDistributedSystem.getAnyInstance());
-    ProxyCache proxy = new ProxyCache(props, (InternalCache) cache, this);
+    if (cache == null && dsys != null) {
+      cache = dsys.getCache();
+      if (cache == null) {
+        throw new IllegalStateException(
+            LocalizedStrings.PoolImpl_CACHE_MUST_BE_CREATED_BEFORE_CREATING_POOL
+                .toLocalizedString());
+      }
+    }
+    ProxyCache proxy = new ProxyCache(props, cache, this);
-    InternalCache cache = GemFireCacheImpl.getInstance();
+      if (cache == null && dsys != null) {
+        cache = dsys.getCache();
+        if (cache == null) {
+          throw new IllegalStateException(
+              LocalizedStrings.PoolImpl_CACHE_MUST_BE_CREATED_BEFORE_CREATING_POOL
+                  .toLocalizedString());
+        }
+      }
-      InternalCache cache = GemFireCacheImpl.getInstance();
+        if (cache == null && dsys != null) {
+          cache = dsys.getCache();
+          if (cache == null) {
+            throw new IllegalStateException(
+                LocalizedStrings.PoolImpl_CACHE_MUST_BE_CREATED_BEFORE_CREATING_POOL
+                    .toLocalizedString());
+          }
+        }
-    InternalCache cache = GemFireCacheImpl.getInstance();
+
+  @Override
+  public int getSubscriptionTimeoutMultiplier() {
+    return subscriptionTimeoutMultiplier;
+  }

INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 MOV43 INS59 INS44 INS44 INS44 INS44 MOV25 MOV25 INS78 INS83 INS39 INS42 INS8 INS42 INS42 MOV43 INS42 MOV43 INS42 MOV43 INS42 MOV43 INS42 INS21 INS25 INS21 INS25 INS42 INS41 MOV43 INS7 INS27 INS8 INS7 MOV43 INS27 INS8 MOV43 INS42 INS22 INS32 INS22 INS34 INS53 INS22 INS42 MOV22 INS22 INS42 MOV22 INS32 INS27 INS27 INS21 INS25 INS25 MOV43 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS22 INS22 UPD42 MOV43 INS42 INS42 INS33 INS42 INS33 INS7 INS27 INS8 MOV43 INS42 INS27 INS8 INS43 INS45 MOV52 MOV42 MOV22 MOV22 INS22 INS52 INS42 INS52 INS42 INS42 INS32 INS42 INS33 INS53 INS27 INS27 INS21 INS25 INS25 INS42 INS22 INS22 INS22 INS52 INS42 INS42 UPD42 MOV42 INS14 INS42 INS33 INS42 INS33 INS7 INS27 INS8 INS27 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS32 INS42 INS32 INS42 INS33 INS53 INS27 INS27 INS21 INS25 INS42 INS40 UPD42 MOV42 INS42 INS42 INS14 INS42 INS33 INS42 INS33 INS7 INS27 INS8 INS25 INS43 INS32 INS42 INS32 INS42 INS33 INS53 INS27 INS8 INS42 INS40 INS42 INS42 INS42 INS14 INS27 INS27 INS21 INS25 INS43 INS32 INS42 INS33 INS42 INS33 INS7 INS27 INS8 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS53 UPD42 MOV42 INS42 INS42 INS14 UPD42 MOV42 INS43 INS32 INS42 INS40 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL11 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60