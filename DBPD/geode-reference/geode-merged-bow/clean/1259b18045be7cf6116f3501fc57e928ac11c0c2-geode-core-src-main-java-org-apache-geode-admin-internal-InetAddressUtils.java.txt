GEODE-7808: standardize on use of HostAndPort for connection formation  (#4778)

* GEODE-7808: standardize on use of HostAndPort for connection formation

Adding two tests that limit the use of InetAddress and of
InetSocketAddress.getAddress().  Ideally we could whittle down the
list of exceptions currently being "sanctioned" by the InetAddress test.

I tried using the PMD tool that's already built into our gradle builds
to perform these restrictions but it fails with parsing errors.  Instead
I turned to the "decode" package that's used by
AnalyzeSerializablesTestBase and refactored that into a Rule that can be
used by any test to load its module's class files in partially
decompiled form.  I added a couple of query methods to CompiledClass to
search for uses of InetAddress and InetSocketAddress.getAddress().

The InetAddress test turned up 74 violations.  I removed some of these
by getting rid of unnecessary code or moving it to LocalHostUtil and
categorized the other violations and moved them into a "sanctioned" list
that we should work on making as small as possible.

* adding missing test and rule

* finished analyzing classes having InetAddress in method signatures

* modified the test to only restrict InetAddress lookup by name

* added another test to restrict use of Admin API's InetAddress utilities
-package org.apache.geode.internal.net;
+package org.apache.geode.admin.internal;
-import java.net.NetworkInterface;
-import java.net.SocketException;
-import java.util.Enumeration;
-import org.apache.geode.GemFireIOException;
-import org.apache.geode.annotations.Immutable;
-  @Immutable
-  private static final InetAddress LOCALHOST = getLocalHost();
-
-  private static final String LOOPBACK_ADDRESS =
-      LocalHostUtil.preferIPv6Addresses() ? "::1" : "127.0.0.1";
-
-  @Immutable
-  private static final InetAddress LOOPBACK = toInetAddress(LOOPBACK_ADDRESS);
-
-  public static InetAddress getLoopback() {
-    return LOOPBACK;
-  }
-
-  public static String getLoopbackAddress() {
-    return LOOPBACK_ADDRESS;
-  }
-
-   * Converts the string host to an instance of {@code InetAddress}. Returns null if the string is
-   * empty. Any leading slashes on host will be ignored. The checked exception
-   * {@code UnknownHostException} is captured and an AssertionError is generated instead.
-   *
-   * @param host The string version the InetAddress
-   *
-   * @return The host converted to InetAddress instance
-   *
-   * @throws AssertionError If conversion of host results in {@code UnknownHostException}
-   */
-  public static InetAddress toInetAddress(String host) {
-    try {
-      return toInetAddressOrThrow(host);
-    } catch (UnknownHostException e) {
-      throw new AssertionError("Failed to get InetAddress: " + host, e);
-    }
-  }
-
-  /**
-   * Returns true if host matches the LOCALHOST.
-   */
-  public static boolean isLocalHost(InetAddress host) {
-    if (LOCALHOST.equals(host)) {
-      return true;
-    }
-
-    try {
-      Enumeration en = NetworkInterface.getNetworkInterfaces();
-      while (en.hasMoreElements()) {
-        NetworkInterface i = (NetworkInterface) en.nextElement();
-        for (Enumeration en2 = i.getInetAddresses(); en2.hasMoreElements();) {
-          InetAddress addr = (InetAddress) en2.nextElement();
-          if (host.equals(addr)) {
-            return true;
-          }
-        }
-      }
-
-      return false;
-    } catch (SocketException e) {
-      throw new GemFireIOException("Unable to query network interface", e);
-    }
-  }
-
-  /**
-   * Returns true if host matches the LOCALHOST.
-   */
-  public static boolean isLocalHost(String host) {
-    return isLocalHost(toInetAddress(host));
-  }
-
-  /**
-   * Returns true if host matches the LOOPBACK (127.0.0.1).
-   */
-  public static boolean isLoopback(InetAddress host) {
-    return LOOPBACK.equals(host);
-  }
-
-  /**
-   * Returns true if host matches the LOOPBACK (127.0.0.1).
-   */
-  public static boolean isLoopback(String host) {
-    return isLoopback(toInetAddress(host));
-  }
-
-  /**

UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL16 DEL59 DEL23 DEL42 DEL78 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL61 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31