Merge branch 'release/1.4.0'

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Properties;
+import org.apache.geode.DataSerializable;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.distributed.ConfigurationProperties;
+
+  @Override
+  public Properties getDistributedSystemProperties() {
+    Properties result = super.getDistributedSystemProperties();
+    result.put(ConfigurationProperties.SERIALIZABLE_OBJECT_FILTER,
+        "org.apache.geode.internal.cache.execute.**;org.apache.geode.test.dunit.**");
+    return result;
+  }
+
+
+
+  /**
+   * Test the a result collector will timeout using the timeout provided
+   */
+  @Test
+  public void resultCollectorHonorsFunctionTimeout() throws InterruptedException {
+    Function sleepingFunction = context -> {
+      try {
+        long endTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(30);
+        while (!context.getCache().isClosed() && System.nanoTime() < endTime) {
+          Thread.sleep(10);
+        }
+      } catch (InterruptedException e) {
+        // exit
+      }
+      context.getResultSender().sendResult("FAILED");
+    };
+
+    ResultCollector collector = getExecution().execute(sleepingFunction);
+    thrown.expect(FunctionException.class);
+    collector.getResult(1, TimeUnit.SECONDS);
+  }
+
-  private class CacheClosingNonHAFunction implements Function {
+  public static class CacheClosingNonHAFunction implements Function, DataSerializable {
-    private final InternalDistributedMember member;
+    private InternalDistributedMember member;
+
+    public CacheClosingNonHAFunction() {} // for serialization
-        getCache().close();
+        CacheFactory.getAnyInstance().close();
+
+    @Override
+    public void toData(DataOutput out) throws IOException {
+      DataSerializer.writeObject(member, out);
+    }
+
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+      member = DataSerializer.readObject(in);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 UPD83 INS83 INS43 INS31 INS31 INS31 INS42 INS42 INS60 INS21 INS41 INS65 INS42 INS42 INS60 INS60 INS21 INS21 INS42 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS43 INS59 INS32 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS48 INS42 INS42 INS40 INS45 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS57 INS42 INS42 INS34 INS40 INS42 INS32 INS42 INS7 INS42 INS59 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS54 INS21 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS32 INS60 INS61 INS44 INS8 INS32 INS42 INS45 INS42 UPD42 INS39 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS27 INS38 INS27 INS21 INS42 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 DEL83