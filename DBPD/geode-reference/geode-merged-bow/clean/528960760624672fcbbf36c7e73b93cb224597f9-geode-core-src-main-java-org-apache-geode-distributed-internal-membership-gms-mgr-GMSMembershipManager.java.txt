GEODE-5780: remove LoggingThreadGroup

GEODE-5783: have a single source for ThreadFactory

LoggingThreadGroup is no longer used and has been removed.

LoggingUnhandledExceptionHandler creates a single handler that logs
to a static logger. All geode threads should use this singleton.

LoggingThread should be used when creating a Thread.
It will automatically set a LoggingUnhandledExceptionHandler on the thread.

LoggingThreadFactory makes it easy to create a ThreadFactory instance that
uses LoggingThread and gives each thread a unique name.

LoggingExecutors should be used in place of Executors.
Each executor it creates will have a LoggingThreadFactory.

All the places geode used Thread, ThreadGroup, ThreadFactory, and Executors have
been changed to use these classes. The only exception is some of the add on modules
(like redis, and memcached) were not changed so that they would not use new internal
geode APIs.
This checkin uses these new classes in every place the previously used
LoggingThreadGroup. The code should also be reviewed for other places
we create Thread or ThreadFactory instances without using the LoggingThreadGroup.

+import org.apache.geode.internal.logging.LoggingThread;
-        new Thread(Thread.currentThread().getThreadGroup(),
-            "Removing shunned GemFire node " + member) {
-          @Override
-          public void run() {
-            // fix for bug #42548
-            // this is an old member that shouldn't be added
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GroupMembershipService_Invalid_Surprise_Member,
-                new Object[] {member, latestView}));
-            try {
-              requestMemberRemoval(member,
-                  "this member is no longer in the view but is initiating connections");
-            } catch (CancelException e) {
-              // okay to ignore
-            }
+        new LoggingThread("Removing shunned GemFire node " + member, false, () -> {
+          // fix for bug #42548
+          // this is an old member that shouldn't be added
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.GroupMembershipService_Invalid_Surprise_Member,
+              new Object[] {member, latestView}));
+          try {
+            requestMemberRemoval(member,
+                "this member is no longer in the view but is initiating connections");
+          } catch (CancelException e) {
+            // okay to ignore
-        }.start();
+        }).start();
-      // if (crashed) {
-      // dc.closeEndpoint(member, reason);
-      // }
-      // else
-      { // fix for bug 34010
-        Thread t = new Thread() {
-          @Override
-          public void run() {
-            try {
-              Thread.sleep(Integer.getInteger("p2p.disconnectDelay", 3000).intValue());
-            } catch (InterruptedException ie) {
-              Thread.currentThread().interrupt();
-              // Keep going, try to close the endpoint.
-            }
-            if (!dc.isOpen()) {
-              return;
-            }
-            if (logger.isDebugEnabled())
-              logger.debug("Membership: closing connections for departed member {}", member);
-            // close connections, but don't do membership notification since it's already been done
-            dc.closeEndpoint(member, reason, false);
-          }
-        };
-        t.setDaemon(true);
-        t.setName("disconnect thread for " + member);
-        t.start();
-      } // fix for bug 34010
+      // fix for bug 34010
+      new LoggingThread("disconnect thread for " + member, () -> {
+        try {
+          Thread.sleep(Integer.getInteger("p2p.disconnectDelay", 3000).intValue());
+        } catch (InterruptedException ie) {
+          Thread.currentThread().interrupt();
+          // Keep going, try to close the endpoint.
+        }
+        if (!dc.isOpen()) {
+          return;
+        }
+        if (logger.isDebugEnabled())
+          logger.debug("Membership: closing connections for departed member {}", member);
+        // close connections, but don't do membership notification since it's already been done
+        dc.closeEndpoint(member, reason, false);
+      }).start();
-    Thread reconnectThread = new Thread(() -> {
+    Thread reconnectThread = new LoggingThread("DisconnectThread", false, () -> {
-
-
-    reconnectThread.setName("DisconnectThread");
-    reconnectThread.setDaemon(false);

INS26 INS40 MOV31 MOV29 UPD83 UPD42 MOV44 MOV44 INS8 MOV21 MOV54 MOV21 MOV25 MOV60 INS25 MOV27 INS8 MOV43 INS21 INS32 INS43 INS45 INS9 INS14 INS42 INS42 INS43 MOV27 INS86 INS42 MOV8 UPD43 INS9 INS86 UPD42 MOV8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21