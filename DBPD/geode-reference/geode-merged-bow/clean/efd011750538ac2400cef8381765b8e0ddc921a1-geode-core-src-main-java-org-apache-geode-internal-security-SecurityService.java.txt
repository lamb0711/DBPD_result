Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

+import java.lang.reflect.Method;
+import org.apache.geode.internal.ClassLoadUtil;
+import org.apache.geode.management.internal.security.ResourceConstants;
+import org.apache.geode.management.internal.security.ResourceOperation;
+import org.apache.geode.security.GemFireSecurityException;
-import org.apache.geode.management.internal.security.ResourceOperation;
-
-  boolean isJmxSecurityRequired();
-  boolean isGatewaySecurityRequired();
-  boolean isHttpSecurityRequired();
-  boolean isPeerSecurityRequired();
+  boolean isPeerSecurityRequired();
-  static <T> T getObjectOfType(String factoryName, Class<T> clazz) {
-    return IntegratedSecurityService.getObjectOfType(factoryName, clazz);
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   */
+  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
+    Class actualClass = null;
+    try {
+      actualClass = ClassLoadUtil.classFromName(className);
+    }
+    catch (Exception ex) {
+      throw new GemFireSecurityException("Instance could not be obtained, " + ex.toString(), ex);
+    }
+
+    if(!expectedClazz.isAssignableFrom(actualClass)){
+      throw new GemFireSecurityException("Instance could not be obtained. Expecting a "+expectedClazz.getName()+" class.");
+    }
+
+    T actualObject = null;
+    try {
+      actualObject =  (T)actualClass.newInstance();
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Instance could not be obtained. Error instantiating "+actualClass.getName(), e);
+    }
+    return actualObject;
-  static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz) {
-    return IntegratedSecurityService.getObjectOfTypeFromFactoryMethod(factoryMethodName, expectedClazz);
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   */
+  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
+    T actualObject = null;
+    try {
+      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
+      actualObject = (T)factoryMethod.invoke(null, (Object[])null);
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName, e);
+    }
+
+    if(actualObject == null){
+      throw new GemFireSecurityException("Instance could not be obtained from " + factoryMethodName);
+    }
+
+    return actualObject;
-  static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
-    return IntegratedSecurityService.getObjectOfTypeFromClassName(className, expectedClazz);
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   *
+   * @return an object of type expectedClazz. This method would never return
+   * null. It either returns an non-null object or throws exception.
+   */
+  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
+    T object = null;
+    try{
+      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
+    }
+    catch (Exception e){
+      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
+    }
+    return object;
+  }
+
+  public static Properties getCredentials(Properties securityProps){
+    Properties credentials = null;
+    if(securityProps.containsKey(ResourceConstants.USER_NAME) && securityProps.containsKey(ResourceConstants.PASSWORD)){
+      credentials = new Properties();
+      credentials.setProperty(ResourceConstants.USER_NAME, securityProps.getProperty(ResourceConstants.USER_NAME));
+      credentials.setProperty(ResourceConstants.PASSWORD, securityProps.getProperty(ResourceConstants.PASSWORD));
+    }
+    return credentials;
+

MOV26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS83 MOV73 MOV43 INS42 MOV44 MOV44 INS8 INS29 INS83 MOV73 MOV43 UPD42 MOV44 MOV44 INS8 INS29 INS83 MOV73 MOV43 UPD42 MOV44 INS44 INS83 INS43 UPD42 INS44 INS8 INS65 INS60 INS54 INS25 INS60 INS54 INS41 INS65 INS60 INS54 INS25 INS41 INS65 INS65 UPD42 INS74 INS42 INS60 INS54 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS66 INS66 MOV43 INS59 INS8 INS12 INS38 INS8 MOV43 INS59 INS8 INS12 INS42 INS66 INS66 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS66 INS66 INS66 INS66 INS43 INS43 INS43 INS59 INS8 INS12 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS53 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS33 INS60 INS21 INS44 INS8 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS33 INS32 INS32 INS21 INS21 INS21 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS14 INS7 INS43 INS42 INS53 INS43 INS59 INS7 INS43 INS42 INS53 INS14 INS7 INS43 INS42 INS21 INS42 INS42 INS40 INS42 INS42 INS40 INS7 INS32 INS32 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS11 INS42 INS14 INS42 INS42 INS32 INS42 INS11 INS42 INS14 INS43 INS27 INS42 INS32 INS42 INS7 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS45 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS40 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS33 INS11 INS42 INS45 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS5 INS33 INS43 INS85 INS42 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL41 DEL32 DEL41 DEL8