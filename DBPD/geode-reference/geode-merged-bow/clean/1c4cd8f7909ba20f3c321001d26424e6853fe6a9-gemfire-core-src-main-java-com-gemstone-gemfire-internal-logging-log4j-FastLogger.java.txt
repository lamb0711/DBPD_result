GEODE-181: Add new unit and integration tests for FastLogger

Add new TestSuites for logging tests. Extract default config testing to
FastLoggerWithDefaultConfigJUnitTest. Move FastLoggerJUnitTest integration
tests to FastLoggerIntegrationJUnitTest. Create new unit tests in
FastLoggerJUnitTest. Update tests to full JUnit 4 syntax and use Rules
(GEODE-89).

Add mockito dependency to build for unit testing.

Completes: GEODE-89, GEODE-181, GEODE-10

-import org.apache.logging.log4j.Level;
- * Overrides is enabled checks for log levels below INFO to avoid performance
- * penalties when the log level is INFO or above.
+ * Overrides is-enabled checks for log levels below INFO to avoid performance
+ * penalties when the log level is INFO or above. If delegating is true
+ * then it will always delegate to ExtendedLoggerWrapper for is-enabled checks.
-  private static volatile boolean debugAvailable = true;
+  private static volatile boolean delegating = true;
-  public static void setDebugAvailable(final boolean newValue) {
-    StatusLogger.getLogger().debug("Setting debugAvailable to {}", newValue);
-    debugAvailable = newValue;
+  public static void setDelegating(final boolean newValue) {
+    StatusLogger.getLogger().debug("Setting delegating to {}", newValue);
+    delegating = newValue;
-  /**
-   * Checks whether this Logger is enabled for the {@link Level#DEBUG DEBUG} Level.
-   *
-   * @return boolean - {@code true} if this Logger is enabled for level DEBUG, {@code false} otherwise.
-   */
-    return debugAvailable && super.isDebugEnabled();
+    return delegating && super.isDebugEnabled();
-  /**
-   * Checks whether this Logger is enabled for the {@link Level#DEBUG DEBUG} Level.
-   *
-   * @param marker The marker data specific to this log statement.
-   * @return boolean - {@code true} if this Logger is enabled for level DEBUG, {@code false} otherwise.
-   */
-    return debugAvailable && super.isDebugEnabled(marker);
+    return delegating && super.isDebugEnabled(marker);
-  /**
-   * Checks whether this Logger is enabled for the {@link Level#TRACE TRACE} level.
-   *
-   * @return boolean - {@code true} if this Logger is enabled for level TRACE, {@code false} otherwise.
-   */
-    return debugAvailable && super.isTraceEnabled();
+    return delegating && super.isTraceEnabled();
-  /**
-   * Checks whether this Logger is enabled for the {@link Level#TRACE TRACE} level.
-   *
-   * @param marker The marker data specific to this log statement.
-   * @return boolean - {@code true} if this Logger is enabled for level TRACE, {@code false} otherwise.
-   */
-    return debugAvailable && super.isTraceEnabled(marker);
+    return delegating && super.isTraceEnabled(marker);
-  public boolean isDebugAvailable() {
-    return debugAvailable;
+  public boolean isDelegating() {
+    return delegating;

UPD42 UPD42 UPD66 UPD66 INS66 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL42 DEL42 DEL67 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29