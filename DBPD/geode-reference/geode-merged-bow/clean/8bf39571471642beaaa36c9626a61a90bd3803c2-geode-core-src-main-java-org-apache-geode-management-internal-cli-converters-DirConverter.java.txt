Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public String[] convertFromText(String[] values, Class<?> targetType,
-      String context) {
+  public String[] convertFromText(String[] values, Class<?> targetType, String context) {
-  public boolean getAllPossibleValues(List<Completion> completions,
-      Class<?> targetType, String[] existingData, String context,
-      MethodTarget target) {
-    String adjustedUserInput = convertUserInputIntoAFullyQualifiedPath((existingData != null) ? existingData[existingData.length - 1]
-        : "");
+  public boolean getAllPossibleValues(List<Completion> completions, Class<?> targetType,
+      String[] existingData, String context, MethodTarget target) {
+    String adjustedUserInput = convertUserInputIntoAFullyQualifiedPath(
+        (existingData != null) ? existingData[existingData.length - 1] : "");
-    String directoryData = adjustedUserInput.substring(0,
-        adjustedUserInput.lastIndexOf(File.separator) + 1);
-    adjustedUserInput = adjustedUserInput.substring(adjustedUserInput
-        .lastIndexOf(File.separator) + 1);
+    String directoryData =
+        adjustedUserInput.substring(0, adjustedUserInput.lastIndexOf(File.separator) + 1);
+    adjustedUserInput =
+        adjustedUserInput.substring(adjustedUserInput.lastIndexOf(File.separator) + 1);
-        ((existingData != null) ? existingData[existingData.length - 1] : ""),
-        directoryData);
+        ((existingData != null) ? existingData[existingData.length - 1] : ""), directoryData);
-  protected void populate(final List<Completion> completions,
-      final String adjustedUserInput, final String originalUserInput,
-      final String directoryData) {
+  protected void populate(final List<Completion> completions, final String adjustedUserInput,
+      final String originalUserInput, final String directoryData) {
-      if (adjustedUserInput == null
-          || adjustedUserInput.length() == 0
-          || file.getName().toLowerCase()
-              .startsWith(adjustedUserInput.toLowerCase())) {
+      if (adjustedUserInput == null || adjustedUserInput.length() == 0
+          || file.getName().toLowerCase().startsWith(adjustedUserInput.toLowerCase())) {
-        completion = convertCompletionBackIntoUserInputStyle(originalUserInput,
-            completion);
+        completion = convertCompletionBackIntoUserInputStyle(originalUserInput, completion);
-  private String convertCompletionBackIntoUserInputStyle(
-      final String originalUserInput, final String completion) {
+  private String convertCompletionBackIntoUserInputStyle(final String originalUserInput,
+      final String completion) {
-      Assert.notNull(home,
-          "Home directory could not be determined from system properties");
+      Assert.notNull(home, "Home directory could not be determined from system properties");
-   * If the user input starts with a tilde character (~), replace the tilde
-   * character with the user's home directory. If the user input does not start
-   * with a tilde, simply return the original user input without any changes if
-   * the input specifies an absolute path, or return an absolute path based on
-   * the working directory if the input specifies a relative path.
+   * If the user input starts with a tilde character (~), replace the tilde character with the
+   * user's home directory. If the user input does not start with a tilde, simply return the
+   * original user input without any changes if the input specifies an absolute path, or return an
+   * absolute path based on the working directory if the input specifies a relative path.
-   * @param userInput
-   *          the user input, which may commence with a tilde (required)
-   * @return a string that is guaranteed to no longer contain a tilde as the
-   *         first character (never null)
+   * @param userInput the user input, which may commence with a tilde (required)
+   * @return a string that is guaranteed to no longer contain a tilde as the first character (never
+   *         null)
-      Assert.notNull(home,
-          "Home directory could not be determined from system properties");
+      Assert.notNull(home, "Home directory could not be determined from system properties");
-   * @return the "current working directory" this {@link DirConverter} should
-   *         use if the user fails to provide an explicit directory in their
-   *         input (required)
+   * @return the "current working directory" this {@link DirConverter} should use if the user fails
+   *         to provide an explicit directory in their input (required)
-    if (String[].class.isAssignableFrom(type)
-        && optionContext.equals(ConverterHint.DIRS)) {
+    if (String[].class.isAssignableFrom(type) && optionContext.equals(ConverterHint.DIRS)) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66