Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Property resolver for resolving ${} like strings with system or Gemfire
- * properties in Cache.xml
+ * Property resolver for resolving ${} like strings with system or Gemfire properties in Cache.xml
-public class CacheXmlPropertyResolver implements PropertyResolver{
+public class CacheXmlPropertyResolver implements PropertyResolver {
-   * Would not throw any exception {@link IllegalArgumentException} if property
-   * could not be resolved
+   * Would not throw any exception {@link IllegalArgumentException} if property could not be
+   * resolved
-   * A properties object to hold all user specified properties passed through
-   * .properties file or passed as {@link Properties} objects. It will be set
-   * by <code>CacheXmlParser</code> if gemfire.properties has to be included during
-   * replacement.
+   * A properties object to hold all user specified properties passed through .properties file or
+   * passed as {@link Properties} objects. It will be set by <code>CacheXmlParser</code> if
+   * gemfire.properties has to be included during replacement.
-  public CacheXmlPropertyResolver(boolean ignoreUnresolvedProperties,
-      int propertyOverridden, Properties props) {
+  public CacheXmlPropertyResolver(boolean ignoreUnresolvedProperties, int propertyOverridden,
+      Properties props) {
-   * Sets <code>propertyOverridden</code> with one of the constants specified in
-   * this {@link CacheXmlPropertyResolver} class.
+   * Sets <code>propertyOverridden</code> with one of the constants specified in this
+   * {@link CacheXmlPropertyResolver} class.
-   * Resolves the given property string either from system properties or given
-   * properties. and returns the replacement of the property found in available
-   * properties. If no string replacement is found then {@link IllegalArgumentException}
-   * would be thrown based on <code>ignoreUnresolvedProperties</code> flag being set by
-   * {@link CacheXmlParser}.
+   * Resolves the given property string either from system properties or given properties. and
+   * returns the replacement of the property found in available properties. If no string replacement
+   * is found then {@link IllegalArgumentException} would be thrown based on
+   * <code>ignoreUnresolvedProperties</code> flag being set by {@link CacheXmlParser}.
-    //Get System property first.
+    // Get System property first.
-    //Override system property if replacement is null or we want to override system property.
-    if((replacement == null || getPropertyOverridden() == SYSTEM_PROPERTIES_OVERRIDE) && props != null){
+    // Override system property if replacement is null or we want to override system property.
+    if ((replacement == null || getPropertyOverridden() == SYSTEM_PROPERTIES_OVERRIDE)
+        && props != null) {
-      if(userDefined != null){
+      if (userDefined != null) {
-  public String processUnresolvableString(String stringWithPrefixAndSuffix, String prefix, String suffix){
+  public String processUnresolvableString(String stringWithPrefixAndSuffix, String prefix,
+      String suffix) {
-    try{
-      if (helper == null){
+    try {
+      if (helper == null) {
-      /** A <code>resolvedString</code> can be same as <code>stringWithPrefixAndSuffix</code> if 
+      /**
+       * A <code>resolvedString</code> can be same as <code>stringWithPrefixAndSuffix</code> if
-      resolvedString = helper.parseResolvablePropString(stringWithPrefixAndSuffix, this, new HashSet<String>());
+      resolvedString =
+          helper.parseResolvablePropString(stringWithPrefixAndSuffix, this, new HashSet<String>());
-      if(ignoreUnresolvedProperties) {
-        //Do Nothing
+      if (ignoreUnresolvedProperties) {
+        // Do Nothing
-        logger.error(LocalizedMessage.create(LocalizedStrings.CacheXmlPropertyResolver_UNSEROLVAVLE_STRING_FORMAT_ERROR__0, stringWithPrefixAndSuffix));
-      }      
+        logger.error(LocalizedMessage.create(
+            LocalizedStrings.CacheXmlPropertyResolver_UNSEROLVAVLE_STRING_FORMAT_ERROR__0,
+            stringWithPrefixAndSuffix));
+      }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 DEL66 DEL66 DEL66