Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides an implementation of <code>DistributionConfig</code> that
- * knows how to read the configuration file.
+ * Provides an implementation of <code>DistributionConfig</code> that knows how to read the
+ * configuration file.
- * Note that if you add a property to this interface, should should
- * update  the {@link
- * #DistributionConfigImpl(DistributionConfig) copy constructor}.
+ * Note that if you add a property to this interface, should should update the
+ * {@link #DistributionConfigImpl(DistributionConfig) copy constructor}.
+ * 
-   * The address server socket's in a  client-server topology should listen on
+   * The address server socket's in a client-server topology should listen on
-  protected File deployWorkingDir = DEFAULT_DEPLOY_WORKING_DIR;
+  protected File deployWorkingDir = new File(System.getProperty("user.dir"));
+   * 
-   * port of locator to start.  use bind-address as host name
+   * port of locator to start. use bind-address as host name
-   * The amount of time to wait for a ACK message after the ackWaitThreshold
-   * before shunning members that haven't responded.  If zero, this feature
-   * is disabled.
+   * The amount of time to wait for a ACK message after the ackWaitThreshold before shunning members
+   * that haven't responded. If zero, this feature is disabled.
-  private File cacheXmlFile = Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE) ? new File("") : DEFAULT_CACHE_XML_FILE;
+  private File cacheXmlFile = Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE)
+      ? new File("") : DEFAULT_CACHE_XML_FILE;
-   * max datagram message size, in bytes.  This should be < 64k
+   * max datagram message size, in bytes. This should be < 64k
-   * Max wait time for the member before reconnecting to the DS in case of
-   * required role loss.
+   * Max wait time for the member before reconnecting to the DS in case of required role loss.
+   * 
-   * Prefix to use for properties that are put as JVM java properties for use
-   * with layers (e.g. jgroups membership) that do not have a
-   * <code>DistributionConfig</code> object.
+   * Prefix to use for properties that are put as JVM java properties for use with layers (e.g.
+   * jgroups membership) that do not have a <code>DistributionConfig</code> object.
-  protected boolean enableSharedConfiguration = DistributionConfig.DEFAULT_ENABLE_CLUSTER_CONFIGURATION;
+  protected boolean enableSharedConfiguration =
+      DistributionConfig.DEFAULT_ENABLE_CLUSTER_CONFIGURATION;
-  protected boolean loadSharedConfigurationFromDir = DistributionConfig.DEFAULT_LOAD_CLUSTER_CONFIG_FROM_DIR;
+  protected boolean loadSharedConfigurationFromDir =
+      DistributionConfig.DEFAULT_LOAD_CLUSTER_CONFIG_FROM_DIR;
-  private boolean jmxManager = Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE) ? true : DEFAULT_JMX_MANAGER;
+  private boolean jmxManager =
+      Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE) ? true : DEFAULT_JMX_MANAGER;
-  private boolean jmxManagerSslRequireAuthentication = DEFAULT_JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION;
+  private boolean jmxManagerSslRequireAuthentication =
+      DEFAULT_JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION;
-  private boolean httpServiceSSLRequireAuthentication = DEFAULT_HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION;
+  private boolean httpServiceSSLRequireAuthentication =
+      DEFAULT_HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION;
-  private SecurableCommunicationChannel[] securableCommunicationChannels = DEFAULT_SSL_ENABLED_COMPONENTS;
+  private SecurableCommunicationChannel[] securableCommunicationChannels =
+      DEFAULT_SSL_ENABLED_COMPONENTS;
-  private boolean sslWebServiceRequireAuthentication = DEFAULT_SSL_WEB_SERVICE_REQUIRE_AUTHENTICATION;
+  private boolean sslWebServiceRequireAuthentication =
+      DEFAULT_SSL_WEB_SERVICE_REQUIRE_AUTHENTICATION;
-  private Map<String, ConfigSource> sourceMap = Collections.synchronizedMap(new HashMap<String, ConfigSource>());
+  private Map<String, ConfigSource> sourceMap =
+      Collections.synchronizedMap(new HashMap<String, ConfigSource>());
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Create a new <code>DistributionConfigImpl</code> from the
-   * contents of another <code>DistributionConfig</code>.
+   * Create a new <code>DistributionConfigImpl</code> from the contents of another
+   * <code>DistributionConfig</code>.
-    //Similar to this.security, assigning userDefinedProps
+    // Similar to this.security, assigning userDefinedProps
-    this.securableCommunicationChannels = ((DistributionConfigImpl) other).securableCommunicationChannels;
+    this.securableCommunicationChannels =
+        ((DistributionConfigImpl) other).securableCommunicationChannels;
-   * Set to true to make attributes writable.
-   * Set to false to make attributes read only.
-   * By default they are read only.
+   * Set to true to make attributes writable. Set to false to make attributes read only. By default
+   * they are read only.
-   * Creates a default application config. Does not read any
-   * properties. Currently only used by DistributionConfigImpl.main.
+   * Creates a default application config. Does not read any properties. Currently only used by
+   * DistributionConfigImpl.main.
-   * Creates a new <code>DistributionConfigImpl</code> with the given
-   * non-default configuration properties.  See {@link
-   * org.apache.geode.distributed.DistributedSystem#connect} for a
-   * list of exceptions that may be thrown.
+   * Creates a new <code>DistributionConfigImpl</code> with the given non-default configuration
+   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * exceptions that may be thrown.
+   * 
-   * Creates a new <code>DistributionConfigImpl</code> with the given
-   * non-default configuration properties. See
-   * {@link org.apache.geode.distributed.DistributedSystem#connect} for a
-   * list of exceptions that may be thrown.
+   * Creates a new <code>DistributionConfigImpl</code> with the given non-default configuration
+   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * exceptions that may be thrown.
+   * 
-   * gemfire.properties file
+   *        gemfire.properties file
-   * Creates a new <code>DistributionConfigImpl</code> with the given
-   * non-default configuration properties. See
-   * {@link org.apache.geode.distributed.DistributedSystem#connect} for a
-   * list of exceptions that may be thrown.
+   * Creates a new <code>DistributionConfigImpl</code> with the given non-default configuration
+   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * exceptions that may be thrown.
+   * 
-   * gemfire.properties file
-   * @param isConnected whether to skip Validation for SSL properties and copy of ssl
-   * properties to other ssl properties. This parameter will be used
-   * till we provide support for ssl-* properties.
+   *        gemfire.properties file
+   * @param isConnected whether to skip Validation for SSL properties and copy of ssl properties to
+   *        other ssl properties. This parameter will be used till we provide support for ssl-*
+   *        properties.
-  public DistributionConfigImpl(Properties nonDefault, boolean ignoreGemFirePropsFile, boolean isConnected) {
+  public DistributionConfigImpl(Properties nonDefault, boolean ignoreGemFirePropsFile,
+      boolean isConnected) {
-    if (!ignoreGemFirePropsFile) {//For admin bug #40434
+    if (!ignoreGemFirePropsFile) {// For admin bug #40434
-    //Now remove all user defined properties from props.
+    // Now remove all user defined properties from props.
-      if (attNameSet.contains(sysName) || sysName.startsWith(GEMFIRE_PREFIX + SECURITY_PREFIX_NAME) || sysName.startsWith(GEMFIRE_PREFIX + SSL_SYSTEM_PROPS_NAME)) {
+      if (attNameSet.contains(sysName) || sysName.startsWith(GEMFIRE_PREFIX + SECURITY_PREFIX_NAME)
+          || sysName.startsWith(GEMFIRE_PREFIX + SSL_SYSTEM_PROPS_NAME)) {
-    sysProps.clear(); //clearing cloned SysProps
+    sysProps.clear(); // clearing cloned SysProps
-        final String property = key.substring(ProcessLauncherContext.OVERRIDDEN_DEFAULTS_PREFIX.length());
+        final String property =
+            key.substring(ProcessLauncherContext.OVERRIDDEN_DEFAULTS_PREFIX.length());
-      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR, securityPeerAuthenticator);
+      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR,
+          securityPeerAuthenticator);
-      System.setProperty(SECURITY_SYSTEM_PREFIX + (String) entry.getKey(), (String) entry.getValue());
+      System.setProperty(SECURITY_SYSTEM_PREFIX + (String) entry.getKey(),
+          (String) entry.getValue());
-        throw new InternalGemFireException("error invoking getter for property" + ConfigurationProperties.SSL_ENABLED_COMPONENTS);
+        throw new InternalGemFireException(
+            "error invoking getter for property" + ConfigurationProperties.SSL_ENABLED_COMPONENTS);
-        throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_INVALID_ALIAS_OPTIONS.toLocalizedString());
+        throw new IllegalArgumentException(
+            LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_INVALID_ALIAS_OPTIONS
+                .toLocalizedString());
-  private boolean isAliasCorrectlyConfiguredForComponents(final SecurableCommunicationChannel component) {
+  private boolean isAliasCorrectlyConfiguredForComponents(
+      final SecurableCommunicationChannel component) {
-        //If the default alias is not set, then check that all the other component aliases are set
+        // If the default alias is not set, then check that all the other component aliases are set
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.CLUSTER);
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.GATEWAY);
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.WEB);
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.JMX);
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.LOCATOR);
-          correctAlias &= isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.SERVER);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.CLUSTER);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.GATEWAY);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.WEB);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.JMX);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.LOCATOR);
+          correctAlias &=
+              isAliasCorrectlyConfiguredForComponents(SecurableCommunicationChannel.SERVER);
-        return StringUtils.isEmpty(getClusterSSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getClusterSSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-        return StringUtils.isEmpty(getGatewaySSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getGatewaySSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-        return StringUtils.isEmpty(getHTTPServiceSSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getHTTPServiceSSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-        return StringUtils.isEmpty(getJMXSSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getJMXSSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-        return StringUtils.isEmpty(getLocatorSSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getLocatorSSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-        return StringUtils.isEmpty(getServerSSLAlias()) ? true : (getSecurableCommunicationChannels().length > 1 ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getServerSSLAlias()) ? true
+            : (getSecurableCommunicationChannels().length > 1
+                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
-   * Here we will validate the correctness of the set properties as per the CheckAttributeChecker annotations defined in #AbstractDistributionConfig
+   * Here we will validate the correctness of the set properties as per the CheckAttributeChecker
+   * annotations defined in #AbstractDistributionConfig
+   * 
-   * if jmx-manager-ssl is true and jmx-manager-ssl-enabled is false then override jmx-manager-ssl-enabled with jmx-manager-ssl
-   * if jmx-manager-ssl-enabled is false, then use the properties from cluster-ssl-* properties
-   * if jmx-manager-ssl-*properties are given then use them, and copy the unspecified jmx-manager properties from cluster-properties 
+   * if jmx-manager-ssl is true and jmx-manager-ssl-enabled is false then override
+   * jmx-manager-ssl-enabled with jmx-manager-ssl if jmx-manager-ssl-enabled is false, then use the
+   * properties from cluster-ssl-* properties if jmx-manager-ssl-*properties are given then use
+   * them, and copy the unspecified jmx-manager properties from cluster-properties
-        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION,
+            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-   * if http-service-ssl-enabled is false, then use the properties from cluster-ssl-* properties
-   * if http-service-ssl-*properties are given then use them, and copy the unspecified http-service properties from cluster-properties 
+   * if http-service-ssl-enabled is false, then use the properties from cluster-ssl-* properties if
+   * http-service-ssl-*properties are given then use them, and copy the unspecified http-service
+   * properties from cluster-properties
-        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION,
+            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-   * if server-ssl-enabled is false, then use the properties from cluster-ssl-* properties
-   * if server-ssl-*properties are given then use them, and copy the unspecified server properties from cluster-properties 
+   * if server-ssl-enabled is false, then use the properties from cluster-ssl-* properties if
+   * server-ssl-*properties are given then use them, and copy the unspecified server properties from
+   * cluster-properties
-        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION,
+            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-   * if gateway-ssl-enabled is false, then use the properties from cluster-ssl-* properties
-   * if gateway-ssl-*properties are given then use them, and copy the unspecified gateway properties from cluster-properties 
+   * if gateway-ssl-enabled is false, then use the properties from cluster-ssl-* properties if
+   * gateway-ssl-*properties are given then use them, and copy the unspecified gateway properties
+   * from cluster-properties
-        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION,
+            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    return propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED) || propName.equals(SECURITY_PEER_AUTH_INIT) || propName.equals(SECURITY_PEER_AUTHENTICATOR) || propName
-      .equals(LOG_WRITER_NAME) || propName.equals(DS_CONFIG_NAME) || propName.equals(SECURITY_LOG_WRITER_NAME) || propName.equals(LOG_OUTPUTSTREAM_NAME) || propName
-             .equals(SECURITY_LOG_OUTPUTSTREAM_NAME);
+    return propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED)
+        || propName.equals(SECURITY_PEER_AUTH_INIT) || propName.equals(SECURITY_PEER_AUTHENTICATOR)
+        || propName.equals(LOG_WRITER_NAME) || propName.equals(DS_CONFIG_NAME)
+        || propName.equals(SECURITY_LOG_WRITER_NAME) || propName.equals(LOG_OUTPUTSTREAM_NAME)
+        || propName.equals(SECURITY_LOG_OUTPUTSTREAM_NAME);
-   * Loads the properties from gemfire.properties & gfsecurity.properties files
-   * into given Properties object.
+   * Loads the properties from gemfire.properties & gfsecurity.properties files into given
+   * Properties object.
+   * 
-   * Loads the properties from gemfire.properties & gfsecurity.properties files
-   * into given Properties object. if <code>ignoreGemFirePropsFile</code> is
-   * <code>true</code>, properties are not read from gemfire.properties.
+   * Loads the properties from gemfire.properties & gfsecurity.properties files into given
+   * Properties object. if <code>ignoreGemFirePropsFile</code> is <code>true</code>, properties are
+   * not read from gemfire.properties.
+   * 
-  public static void loadGemFireProperties(Properties p, boolean ignoreGemFirePropsFile) throws GemFireIOException {
+  public static void loadGemFireProperties(Properties p, boolean ignoreGemFirePropsFile)
+      throws GemFireIOException {
-        throw new GemFireIOException(LocalizedStrings.DistributionConfigImpl_FAILED_READING_0.toLocalizedString(url), io);
+        throw new GemFireIOException(
+            LocalizedStrings.DistributionConfigImpl_FAILED_READING_0.toLocalizedString(url), io);
-      if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string properties
+      if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string
+                                                            // properties
-      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get(CLUSTER_SSL_ENABLED), this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get(CLUSTER_SSL_ENABLED),
+          this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String) props.get(SECURITY_PEER_AUTH_INIT), this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
+      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String) props.get(SECURITY_PEER_AUTH_INIT),
+          this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
-      this.setAttribute(SECURITY_PEER_AUTHENTICATOR, (String) props.get(SECURITY_PEER_AUTHENTICATOR), this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
+      this.setAttribute(SECURITY_PEER_AUTHENTICATOR,
+          (String) props.get(SECURITY_PEER_AUTHENTICATOR),
+          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
-      return propVal.replace(","," ");
+    return propVal.replace(",", " ");
-  ////////////////////  Configuration Methods  ////////////////////
+  //////////////////// Configuration Methods ////////////////////
-        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "[" + this.startLocatorPort + "]";
+        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "[" + this.startLocatorPort
+            + "]";
-   * the locator startup code must be able to modify the locator log file in order
-   * to establish a default log file if one hasn't been specified by the user.
-   * This method will change the log file, but only in the configuration settings -
-   * it won't affect a running distributed system's log file
+   * the locator startup code must be able to modify the locator log file in order to establish a
+   * default log file if one hasn't been specified by the user. This method will change the log
+   * file, but only in the configuration settings - it won't affect a running distributed system's
+   * log file
-           .info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE + " instead of the requested " + value + " because VSD does not work with sub-second sampling.");
+            .info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE
+                + " instead of the requested " + value
+                + " because VSD does not work with sub-second sampling.");
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, value);
+    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        value);
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, value);
+    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        value);
-      this.jmxManagerSslProperties.setProperty(attName.substring(0, attName.length() - JMX_SSL_PROPS_SUFFIX.length()), attValue);
+      this.jmxManagerSslProperties.setProperty(
+          attName.substring(0, attName.length() - JMX_SSL_PROPS_SUFFIX.length()), attValue);
-        // use sslProperties as base and let props with suffix JMX_SSL_PROPS_SUFFIX override that base
+        // use sslProperties as base and let props with suffix JMX_SSL_PROPS_SUFFIX override that
+        // base
-        // use sslProperties as base and let props with suffix CACHESERVER_SSL_PROPS_SUFFIX override that base
+        // use sslProperties as base and let props with suffix CACHESERVER_SSL_PROPS_SUFFIX override
+        // that base
-        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override that base
+        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override
+        // that base
-        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override that base
+        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override
+        // that base
-        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override that base
+        // use sslProperties as base and let props with suffix GATEWAY_SSL_PROPS_SUFFIX override
+        // that base
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, value);
+    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        value);
-  public void setSecurableCommunicationChannels(final SecurableCommunicationChannel[] sslEnabledComponents) {
+  public void setSecurableCommunicationChannels(
+      final SecurableCommunicationChannel[] sslEnabledComponents) {
-    //This conversion is required due to backwards compatibility of the existing protocols code
+    // This conversion is required due to backwards compatibility of the existing protocols code
-    //This conversion is required due to backwards compatibility of the existing cipher code
+    // This conversion is required due to backwards compatibility of the existing cipher code
-  ///////////////////////  Utility Methods  ///////////////////////
+  /////////////////////// Utility Methods ///////////////////////
-   * Two instances of <code>DistributedConfigImpl</code> are equal if all of
-   * their configuration properties are the same. Be careful if you need to
-   * remove final and override this. See bug #50939.
+   * Two instances of <code>DistributedConfigImpl</code> are equal if all of their configuration
+   * properties are the same. Be careful if you need to remove final and override this. See bug
+   * #50939.
-    return new EqualsBuilder().append(tcpPort, that.tcpPort)
-                              .append(mcastPort, that.mcastPort)
-                              .append(mcastTtl, that.mcastTtl)
-                              .append(socketLeaseTime, that.socketLeaseTime)
-                              .append(socketBufferSize, that.socketBufferSize)
-                              .append(conserveSockets, that.conserveSockets)
-                              .append(locatorWaitTime, that.locatorWaitTime)
-                              .append(logLevel, that.logLevel)
-                              .append(startLocatorPort, that.startLocatorPort)
-                              .append(statisticSamplingEnabled, that.statisticSamplingEnabled)
-                              .append(statisticSampleRate, that.statisticSampleRate)
-                              .append(ackWaitThreshold, that.ackWaitThreshold)
-                              .append(ackForceDisconnectThreshold, that.ackForceDisconnectThreshold)
-                              .append(archiveDiskSpaceLimit, that.archiveDiskSpaceLimit)
-                              .append(archiveFileSizeLimit, that.archiveFileSizeLimit)
-                              .append(logDiskSpaceLimit, that.logDiskSpaceLimit)
-                              .append(logFileSizeLimit, that.logFileSizeLimit)
-                              .append(clusterSSLEnabled, that.clusterSSLEnabled)
-                              .append(clusterSSLRequireAuthentication, that.clusterSSLRequireAuthentication)
-                              .append(mcastSendBufferSize, that.mcastSendBufferSize)
-                              .append(mcastRecvBufferSize, that.mcastRecvBufferSize)
-                              .append(udpSendBufferSize, that.udpSendBufferSize)
-                              .append(udpRecvBufferSize, that.udpRecvBufferSize)
-                              .append(udpFragmentSize, that.udpFragmentSize)
-                              .append(disableTcp, that.disableTcp)
-                              .append(enableTimeStatistics, that.enableTimeStatistics)
-                              .append(memberTimeout, that.memberTimeout)
-                              .append(maxWaitTimeForReconnect, that.maxWaitTimeForReconnect)
-                              .append(maxNumReconnectTries, that.maxNumReconnectTries)
-                              .append(asyncDistributionTimeout, that.asyncDistributionTimeout)
-                              .append(asyncQueueTimeout, that.asyncQueueTimeout)
-                              .append(asyncMaxQueueSize, that.asyncMaxQueueSize)
-                              .append(durableClientTimeout, that.durableClientTimeout)
-                              .append(securityLogLevel, that.securityLogLevel)
-                              .append(enableNetworkPartitionDetection, that.enableNetworkPartitionDetection)
-                              .append(disableAutoReconnect, that.disableAutoReconnect)
-                              .append(securityPeerMembershipTimeout, that.securityPeerMembershipTimeout)
-                              .append(removeUnresponsiveClient, that.removeUnresponsiveClient)
-                              .append(deltaPropagation, that.deltaPropagation)
-                              .append(distributedSystemId, that.distributedSystemId)
-                              .append(enforceUniqueHost, that.enforceUniqueHost)
-                              .append(enableSharedConfiguration, that.enableSharedConfiguration)
-                              .append(useSharedConfiguration, that.useSharedConfiguration)
-                              .append(loadSharedConfigurationFromDir, that.loadSharedConfigurationFromDir)
-                              .append(httpServicePort, that.httpServicePort)
-                              .append(startDevRestApi, that.startDevRestApi)
-                              .append(memcachedPort, that.memcachedPort)
-                              .append(distributedTransactions, that.distributedTransactions)
-                              .append(redisPort, that.redisPort)
-                              .append(jmxManager, that.jmxManager)
-                              .append(jmxManagerStart, that.jmxManagerStart)
-                              .append(jmxManagerPort, that.jmxManagerPort)
-                              .append(jmxManagerHttpPort, that.jmxManagerHttpPort)
-                              .append(jmxManagerUpdateRate, that.jmxManagerUpdateRate)
-                              .append(jmxManagerSSLEnabled, that.jmxManagerSSLEnabled)
-                              .append(jmxManagerSslRequireAuthentication, that.jmxManagerSslRequireAuthentication)
-                              .append(serverSSLEnabled, that.serverSSLEnabled)
-                              .append(serverSslRequireAuthentication, that.serverSslRequireAuthentication)
-                              .append(gatewaySSLEnabled, that.gatewaySSLEnabled)
-                              .append(gatewaySslRequireAuthentication, that.gatewaySslRequireAuthentication)
-                              .append(httpServiceSSLEnabled, that.httpServiceSSLEnabled)
-                              .append(httpServiceSSLRequireAuthentication, that.httpServiceSSLRequireAuthentication)
-                              .append(sslRequireAuthentication, that.sslRequireAuthentication)
-                              .append(sslWebServiceRequireAuthentication, that.sslWebServiceRequireAuthentication)
-                              .append(lockMemory, that.lockMemory)
-                              .append(modifiable, that.modifiable)
-                              .append(name, that.name)
-                              .append(roles, that.roles)
-                              .append(mcastAddress, that.mcastAddress)
-                              .append(bindAddress, that.bindAddress)
-                              .append(serverBindAddress, that.serverBindAddress)
-                              .append(locators, that.locators)
-                              .append(logFile, that.logFile)
-                              .append(deployWorkingDir, that.deployWorkingDir)
-                              .append(startLocator, that.startLocator)
-                              .append(statisticArchiveFile, that.statisticArchiveFile)
-                              .append(cacheXmlFile, that.cacheXmlFile)
-                              .append(clusterSSLProtocols, that.clusterSSLProtocols)
-                              .append(clusterSSLCiphers, that.clusterSSLCiphers)
-                              .append(clusterSSLKeyStore, that.clusterSSLKeyStore)
-                              .append(clusterSSLKeyStoreType, that.clusterSSLKeyStoreType)
-                              .append(clusterSSLKeyStorePassword, that.clusterSSLKeyStorePassword)
-                              .append(clusterSSLTrustStore, that.clusterSSLTrustStore)
-                              .append(clusterSSLTrustStorePassword, that.clusterSSLTrustStorePassword)
-                              .append(clusterSSLAlias, that.clusterSSLAlias)
-                              .append(mcastFlowControl, that.mcastFlowControl)
-                              .append(membershipPortRange, that.membershipPortRange)
-                              .append(clientConflation, that.clientConflation)
-                              .append(durableClientId, that.durableClientId)
-                              .append(securityClientAuthInit, that.securityClientAuthInit)
-                              .append(securityClientAuthenticator, that.securityClientAuthenticator)
-                              .append(securityManager, that.securityManager)
-                              .append(postProcessor, that.postProcessor)
-                              .append(securityClientDHAlgo, that.securityClientDHAlgo)
-                              .append(securityPeerAuthInit, that.securityPeerAuthInit)
-                              .append(securityPeerAuthenticator, that.securityPeerAuthenticator)
-                              .append(securityClientAccessor, that.securityClientAccessor)
-                              .append(securityClientAccessorPP, that.securityClientAccessorPP)
-                              .append(securityLogFile, that.securityLogFile)
-                              .append(security, that.security)
-                              .append(userDefinedProps, that.userDefinedProps)
-                              .append(props, that.props)
-                              .append(remoteLocators, that.remoteLocators)
-                              .append(redundancyZone, that.redundancyZone)
-                              .append(sslProperties, that.sslProperties)
-                              .append(clusterSSLProperties, that.clusterSSLProperties)
-                              .append(groups, that.groups)
-                              .append(clusterConfigDir, that.clusterConfigDir)
-                              .append(httpServiceBindAddress, that.httpServiceBindAddress)
-                              .append(memcachedProtocol, that.memcachedProtocol)
-                              .append(memcachedBindAddress, that.memcachedBindAddress)
-                              .append(redisBindAddress, that.redisBindAddress)
-                              .append(redisPassword, that.redisPassword)
-                              .append(jmxManagerBindAddress, that.jmxManagerBindAddress)
-                              .append(jmxManagerHostnameForClients, that.jmxManagerHostnameForClients)
-                              .append(jmxManagerPasswordFile, that.jmxManagerPasswordFile)
-                              .append(jmxManagerAccessFile, that.jmxManagerAccessFile)
-                              .append(jmxManagerSslProtocols, that.jmxManagerSslProtocols)
-                              .append(jmxManagerSslCiphers, that.jmxManagerSslCiphers)
-                              .append(jmxManagerSslProperties, that.jmxManagerSslProperties)
-                              .append(jmxManagerSSLKeyStore, that.jmxManagerSSLKeyStore)
-                              .append(jmxManagerSSLKeyStoreType, that.jmxManagerSSLKeyStoreType)
-                              .append(jmxManagerSSLKeyStorePassword, that.jmxManagerSSLKeyStorePassword)
-                              .append(jmxManagerSSLTrustStore, that.jmxManagerSSLTrustStore)
-                              .append(jmxManagerSSLTrustStorePassword, that.jmxManagerSSLTrustStorePassword)
-                              .append(jmxManagerSSLAlias, that.jmxManagerSSLAlias)
-                              .append(serverSslProtocols, that.serverSslProtocols)
-                              .append(serverSslCiphers, that.serverSslCiphers)
-                              .append(serverSslProperties, that.serverSslProperties)
-                              .append(serverSSLKeyStore, that.serverSSLKeyStore)
-                              .append(serverSSLKeyStoreType, that.serverSSLKeyStoreType)
-                              .append(serverSSLKeyStorePassword, that.serverSSLKeyStorePassword)
-                              .append(serverSSLTrustStore, that.serverSSLTrustStore)
-                              .append(serverSSLTrustStorePassword, that.serverSSLTrustStorePassword)
-                              .append(serverSSLAlias, that.serverSSLAlias)
-                              .append(gatewaySslProtocols, that.gatewaySslProtocols)
-                              .append(gatewaySslCiphers, that.gatewaySslCiphers)
-                              .append(gatewaySslProperties, that.gatewaySslProperties)
-                              .append(gatewaySSLKeyStore, that.gatewaySSLKeyStore)
-                              .append(gatewaySSLKeyStoreType, that.gatewaySSLKeyStoreType)
-                              .append(gatewaySSLKeyStorePassword, that.gatewaySSLKeyStorePassword)
-                              .append(gatewaySSLTrustStore, that.gatewaySSLTrustStore)
-                              .append(gatewaySSLTrustStorePassword, that.gatewaySSLTrustStorePassword)
-                              .append(gatewaySSLAlias, that.gatewaySSLAlias)
-                              .append(httpServiceSSLProtocols, that.httpServiceSSLProtocols)
-                              .append(httpServiceSSLCiphers, that.httpServiceSSLCiphers)
-                              .append(httpServiceSSLProperties, that.httpServiceSSLProperties)
-                              .append(httpServiceSSLKeyStore, that.httpServiceSSLKeyStore)
-                              .append(httpServiceSSLKeyStoreType, that.httpServiceSSLKeyStoreType)
-                              .append(httpServiceSSLKeyStorePassword, that.httpServiceSSLKeyStorePassword)
-                              .append(httpServiceSSLTrustStore, that.httpServiceSSLTrustStore)
-                              .append(httpServiceSSLTrustStorePassword, that.httpServiceSSLTrustStorePassword)
-                              .append(httpServiceSSLAlias, that.httpServiceSSLAlias)
-                              .append(securableCommunicationChannels, that.securableCommunicationChannels)
-                              .append(sslProtocols, that.sslProtocols)
-                              .append(sslCiphers, that.sslCiphers)
-                              .append(sslKeyStore, that.sslKeyStore)
-                              .append(sslKeyStoreType, that.sslKeyStoreType)
-                              .append(sslKeyStorePassword, that.sslKeyStorePassword)
-                              .append(sslTrustStore, that.sslTrustStore)
-                              .append(sslTrustStorePassword, that.sslTrustStorePassword)
-                              .append(locatorSSLAlias, that.locatorSSLAlias)
-                              .append(sslDefaultAlias, that.sslDefaultAlias)
-                              .append(sourceMap, that.sourceMap)
-                              .append(userCommandPackages, that.userCommandPackages)
-                              .append(offHeapMemorySize, that.offHeapMemorySize)
-                              .append(shiroInit, that.shiroInit)
-                              .isEquals();
+    return new EqualsBuilder().append(tcpPort, that.tcpPort).append(mcastPort, that.mcastPort)
+        .append(mcastTtl, that.mcastTtl).append(socketLeaseTime, that.socketLeaseTime)
+        .append(socketBufferSize, that.socketBufferSize)
+        .append(conserveSockets, that.conserveSockets).append(locatorWaitTime, that.locatorWaitTime)
+        .append(logLevel, that.logLevel).append(startLocatorPort, that.startLocatorPort)
+        .append(statisticSamplingEnabled, that.statisticSamplingEnabled)
+        .append(statisticSampleRate, that.statisticSampleRate)
+        .append(ackWaitThreshold, that.ackWaitThreshold)
+        .append(ackForceDisconnectThreshold, that.ackForceDisconnectThreshold)
+        .append(archiveDiskSpaceLimit, that.archiveDiskSpaceLimit)
+        .append(archiveFileSizeLimit, that.archiveFileSizeLimit)
+        .append(logDiskSpaceLimit, that.logDiskSpaceLimit)
+        .append(logFileSizeLimit, that.logFileSizeLimit)
+        .append(clusterSSLEnabled, that.clusterSSLEnabled)
+        .append(clusterSSLRequireAuthentication, that.clusterSSLRequireAuthentication)
+        .append(mcastSendBufferSize, that.mcastSendBufferSize)
+        .append(mcastRecvBufferSize, that.mcastRecvBufferSize)
+        .append(udpSendBufferSize, that.udpSendBufferSize)
+        .append(udpRecvBufferSize, that.udpRecvBufferSize)
+        .append(udpFragmentSize, that.udpFragmentSize).append(disableTcp, that.disableTcp)
+        .append(enableTimeStatistics, that.enableTimeStatistics)
+        .append(memberTimeout, that.memberTimeout)
+        .append(maxWaitTimeForReconnect, that.maxWaitTimeForReconnect)
+        .append(maxNumReconnectTries, that.maxNumReconnectTries)
+        .append(asyncDistributionTimeout, that.asyncDistributionTimeout)
+        .append(asyncQueueTimeout, that.asyncQueueTimeout)
+        .append(asyncMaxQueueSize, that.asyncMaxQueueSize)
+        .append(durableClientTimeout, that.durableClientTimeout)
+        .append(securityLogLevel, that.securityLogLevel)
+        .append(enableNetworkPartitionDetection, that.enableNetworkPartitionDetection)
+        .append(disableAutoReconnect, that.disableAutoReconnect)
+        .append(securityPeerMembershipTimeout, that.securityPeerMembershipTimeout)
+        .append(removeUnresponsiveClient, that.removeUnresponsiveClient)
+        .append(deltaPropagation, that.deltaPropagation)
+        .append(distributedSystemId, that.distributedSystemId)
+        .append(enforceUniqueHost, that.enforceUniqueHost)
+        .append(enableSharedConfiguration, that.enableSharedConfiguration)
+        .append(useSharedConfiguration, that.useSharedConfiguration)
+        .append(loadSharedConfigurationFromDir, that.loadSharedConfigurationFromDir)
+        .append(httpServicePort, that.httpServicePort).append(startDevRestApi, that.startDevRestApi)
+        .append(memcachedPort, that.memcachedPort)
+        .append(distributedTransactions, that.distributedTransactions)
+        .append(redisPort, that.redisPort).append(jmxManager, that.jmxManager)
+        .append(jmxManagerStart, that.jmxManagerStart).append(jmxManagerPort, that.jmxManagerPort)
+        .append(jmxManagerHttpPort, that.jmxManagerHttpPort)
+        .append(jmxManagerUpdateRate, that.jmxManagerUpdateRate)
+        .append(jmxManagerSSLEnabled, that.jmxManagerSSLEnabled)
+        .append(jmxManagerSslRequireAuthentication, that.jmxManagerSslRequireAuthentication)
+        .append(serverSSLEnabled, that.serverSSLEnabled)
+        .append(serverSslRequireAuthentication, that.serverSslRequireAuthentication)
+        .append(gatewaySSLEnabled, that.gatewaySSLEnabled)
+        .append(gatewaySslRequireAuthentication, that.gatewaySslRequireAuthentication)
+        .append(httpServiceSSLEnabled, that.httpServiceSSLEnabled)
+        .append(httpServiceSSLRequireAuthentication, that.httpServiceSSLRequireAuthentication)
+        .append(sslRequireAuthentication, that.sslRequireAuthentication)
+        .append(sslWebServiceRequireAuthentication, that.sslWebServiceRequireAuthentication)
+        .append(lockMemory, that.lockMemory).append(modifiable, that.modifiable)
+        .append(name, that.name).append(roles, that.roles).append(mcastAddress, that.mcastAddress)
+        .append(bindAddress, that.bindAddress).append(serverBindAddress, that.serverBindAddress)
+        .append(locators, that.locators).append(logFile, that.logFile)
+        .append(deployWorkingDir, that.deployWorkingDir).append(startLocator, that.startLocator)
+        .append(statisticArchiveFile, that.statisticArchiveFile)
+        .append(cacheXmlFile, that.cacheXmlFile)
+        .append(clusterSSLProtocols, that.clusterSSLProtocols)
+        .append(clusterSSLCiphers, that.clusterSSLCiphers)
+        .append(clusterSSLKeyStore, that.clusterSSLKeyStore)
+        .append(clusterSSLKeyStoreType, that.clusterSSLKeyStoreType)
+        .append(clusterSSLKeyStorePassword, that.clusterSSLKeyStorePassword)
+        .append(clusterSSLTrustStore, that.clusterSSLTrustStore)
+        .append(clusterSSLTrustStorePassword, that.clusterSSLTrustStorePassword)
+        .append(clusterSSLAlias, that.clusterSSLAlias)
+        .append(mcastFlowControl, that.mcastFlowControl)
+        .append(membershipPortRange, that.membershipPortRange)
+        .append(clientConflation, that.clientConflation)
+        .append(durableClientId, that.durableClientId)
+        .append(securityClientAuthInit, that.securityClientAuthInit)
+        .append(securityClientAuthenticator, that.securityClientAuthenticator)
+        .append(securityManager, that.securityManager).append(postProcessor, that.postProcessor)
+        .append(securityClientDHAlgo, that.securityClientDHAlgo)
+        .append(securityPeerAuthInit, that.securityPeerAuthInit)
+        .append(securityPeerAuthenticator, that.securityPeerAuthenticator)
+        .append(securityClientAccessor, that.securityClientAccessor)
+        .append(securityClientAccessorPP, that.securityClientAccessorPP)
+        .append(securityLogFile, that.securityLogFile).append(security, that.security)
+        .append(userDefinedProps, that.userDefinedProps).append(props, that.props)
+        .append(remoteLocators, that.remoteLocators).append(redundancyZone, that.redundancyZone)
+        .append(sslProperties, that.sslProperties)
+        .append(clusterSSLProperties, that.clusterSSLProperties).append(groups, that.groups)
+        .append(clusterConfigDir, that.clusterConfigDir)
+        .append(httpServiceBindAddress, that.httpServiceBindAddress)
+        .append(memcachedProtocol, that.memcachedProtocol)
+        .append(memcachedBindAddress, that.memcachedBindAddress)
+        .append(redisBindAddress, that.redisBindAddress).append(redisPassword, that.redisPassword)
+        .append(jmxManagerBindAddress, that.jmxManagerBindAddress)
+        .append(jmxManagerHostnameForClients, that.jmxManagerHostnameForClients)
+        .append(jmxManagerPasswordFile, that.jmxManagerPasswordFile)
+        .append(jmxManagerAccessFile, that.jmxManagerAccessFile)
+        .append(jmxManagerSslProtocols, that.jmxManagerSslProtocols)
+        .append(jmxManagerSslCiphers, that.jmxManagerSslCiphers)
+        .append(jmxManagerSslProperties, that.jmxManagerSslProperties)
+        .append(jmxManagerSSLKeyStore, that.jmxManagerSSLKeyStore)
+        .append(jmxManagerSSLKeyStoreType, that.jmxManagerSSLKeyStoreType)
+        .append(jmxManagerSSLKeyStorePassword, that.jmxManagerSSLKeyStorePassword)
+        .append(jmxManagerSSLTrustStore, that.jmxManagerSSLTrustStore)
+        .append(jmxManagerSSLTrustStorePassword, that.jmxManagerSSLTrustStorePassword)
+        .append(jmxManagerSSLAlias, that.jmxManagerSSLAlias)
+        .append(serverSslProtocols, that.serverSslProtocols)
+        .append(serverSslCiphers, that.serverSslCiphers)
+        .append(serverSslProperties, that.serverSslProperties)
+        .append(serverSSLKeyStore, that.serverSSLKeyStore)
+        .append(serverSSLKeyStoreType, that.serverSSLKeyStoreType)
+        .append(serverSSLKeyStorePassword, that.serverSSLKeyStorePassword)
+        .append(serverSSLTrustStore, that.serverSSLTrustStore)
+        .append(serverSSLTrustStorePassword, that.serverSSLTrustStorePassword)
+        .append(serverSSLAlias, that.serverSSLAlias)
+        .append(gatewaySslProtocols, that.gatewaySslProtocols)
+        .append(gatewaySslCiphers, that.gatewaySslCiphers)
+        .append(gatewaySslProperties, that.gatewaySslProperties)
+        .append(gatewaySSLKeyStore, that.gatewaySSLKeyStore)
+        .append(gatewaySSLKeyStoreType, that.gatewaySSLKeyStoreType)
+        .append(gatewaySSLKeyStorePassword, that.gatewaySSLKeyStorePassword)
+        .append(gatewaySSLTrustStore, that.gatewaySSLTrustStore)
+        .append(gatewaySSLTrustStorePassword, that.gatewaySSLTrustStorePassword)
+        .append(gatewaySSLAlias, that.gatewaySSLAlias)
+        .append(httpServiceSSLProtocols, that.httpServiceSSLProtocols)
+        .append(httpServiceSSLCiphers, that.httpServiceSSLCiphers)
+        .append(httpServiceSSLProperties, that.httpServiceSSLProperties)
+        .append(httpServiceSSLKeyStore, that.httpServiceSSLKeyStore)
+        .append(httpServiceSSLKeyStoreType, that.httpServiceSSLKeyStoreType)
+        .append(httpServiceSSLKeyStorePassword, that.httpServiceSSLKeyStorePassword)
+        .append(httpServiceSSLTrustStore, that.httpServiceSSLTrustStore)
+        .append(httpServiceSSLTrustStorePassword, that.httpServiceSSLTrustStorePassword)
+        .append(httpServiceSSLAlias, that.httpServiceSSLAlias)
+        .append(securableCommunicationChannels, that.securableCommunicationChannels)
+        .append(sslProtocols, that.sslProtocols).append(sslCiphers, that.sslCiphers)
+        .append(sslKeyStore, that.sslKeyStore).append(sslKeyStoreType, that.sslKeyStoreType)
+        .append(sslKeyStorePassword, that.sslKeyStorePassword)
+        .append(sslTrustStore, that.sslTrustStore)
+        .append(sslTrustStorePassword, that.sslTrustStorePassword)
+        .append(locatorSSLAlias, that.locatorSSLAlias).append(sslDefaultAlias, that.sslDefaultAlias)
+        .append(sourceMap, that.sourceMap).append(userCommandPackages, that.userCommandPackages)
+        .append(offHeapMemorySize, that.offHeapMemorySize).append(shiroInit, that.shiroInit)
+        .isEquals();
-   * The hash code of a <code>DistributionConfigImpl</code> is based on the
-   * value of all of its configuration properties. Be careful if you need to
-   * remove final and override this. See bug #50939.
+   * The hash code of a <code>DistributionConfigImpl</code> is based on the value of all of its
+   * configuration properties. Be careful if you need to remove final and override this. See bug
+   * #50939.
-    return new HashCodeBuilder(17, 37).append(name)
-                                      .append(tcpPort)
-                                      .append(mcastPort)
-                                      .append(mcastTtl)
-                                      .append(socketLeaseTime)
-                                      .append(socketBufferSize)
-                                      .append(conserveSockets)
-                                      .append(roles)
-                                      .append(mcastAddress)
-                                      .append(bindAddress)
-                                      .append(serverBindAddress)
-                                      .append(locators)
-                                      .append(locatorWaitTime)
-                                      .append(logFile)
-                                      .append(deployWorkingDir)
-                                      .append(logLevel)
-                                      .append(startLocator)
-                                      .append(startLocatorPort)
-                                      .append(statisticSamplingEnabled)
-                                      .append(statisticSampleRate)
-                                      .append(statisticArchiveFile)
-                                      .append(ackWaitThreshold)
-                                      .append(ackForceDisconnectThreshold)
-                                      .append(cacheXmlFile)
-                                      .append(archiveDiskSpaceLimit)
-                                      .append(archiveFileSizeLimit)
-                                      .append(logDiskSpaceLimit)
-                                      .append(logFileSizeLimit)
-                                      .append(clusterSSLEnabled)
-                                      .append(clusterSSLProtocols)
-                                      .append(clusterSSLCiphers)
-                                      .append(clusterSSLRequireAuthentication)
-                                      .append(clusterSSLKeyStore)
-                                      .append(clusterSSLKeyStoreType)
-                                      .append(clusterSSLKeyStorePassword)
-                                      .append(clusterSSLTrustStore)
-                                      .append(clusterSSLTrustStorePassword)
-                                      .append(clusterSSLAlias)
-                                      .append(mcastSendBufferSize)
-                                      .append(mcastRecvBufferSize)
-                                      .append(mcastFlowControl)
-                                      .append(udpSendBufferSize)
-                                      .append(udpRecvBufferSize)
-                                      .append(udpFragmentSize)
-                                      .append(disableTcp)
-                                      .append(enableTimeStatistics)
-                                      .append(memberTimeout)
-                                      .append(membershipPortRange)
-                                      .append(maxWaitTimeForReconnect)
-                                      .append(maxNumReconnectTries)
-                                      .append(asyncDistributionTimeout)
-                                      .append(asyncQueueTimeout)
-                                      .append(asyncMaxQueueSize)
-                                      .append(clientConflation)
-                                      .append(durableClientId)
-                                      .append(durableClientTimeout)
-                                      .append(securityClientAuthInit)
-                                      .append(securityClientAuthenticator)
-                                      .append(securityManager)
-                                      .append(postProcessor)
-                                      .append(securityClientDHAlgo)
-                                      .append(securityPeerAuthInit)
-                                      .append(securityPeerAuthenticator)
-                                      .append(securityClientAccessor)
-                                      .append(securityClientAccessorPP)
-                                      .append(securityLogLevel)
-                                      .append(enableNetworkPartitionDetection)
-                                      .append(disableAutoReconnect)
-                                      .append(securityLogFile)
-                                      .append(securityPeerMembershipTimeout)
-                                      .append(security)
-                                      .append(userDefinedProps)
-                                      .append(removeUnresponsiveClient)
-                                      .append(deltaPropagation)
-                                      .append(props)
-                                      .append(distributedSystemId)
-                                      .append(remoteLocators)
-                                      .append(enforceUniqueHost)
-                                      .append(redundancyZone)
-                                      .append(sslProperties)
-                                      .append(clusterSSLProperties)
-                                      .append(groups)
-                                      .append(enableSharedConfiguration)
-                                      .append(useSharedConfiguration)
-                                      .append(loadSharedConfigurationFromDir)
-                                      .append(clusterConfigDir)
-                                      .append(httpServicePort)
-                                      .append(httpServiceBindAddress)
-                                      .append(startDevRestApi)
-                                      .append(memcachedPort)
-                                      .append(memcachedProtocol)
-                                      .append(memcachedBindAddress)
-                                      .append(distributedTransactions)
-                                      .append(redisPort)
-                                      .append(redisBindAddress)
-                                      .append(redisPassword)
-                                      .append(jmxManager)
-                                      .append(jmxManagerStart)
-                                      .append(jmxManagerPort)
-                                      .append(jmxManagerBindAddress)
-                                      .append(jmxManagerHostnameForClients)
-                                      .append(jmxManagerPasswordFile)
-                                      .append(jmxManagerAccessFile)
-                                      .append(jmxManagerHttpPort)
-                                      .append(jmxManagerUpdateRate)
-                                      .append(jmxManagerSSLEnabled)
-                                      .append(jmxManagerSslRequireAuthentication)
-                                      .append(jmxManagerSslProtocols)
-                                      .append(jmxManagerSslCiphers)
-                                      .append(jmxManagerSslProperties)
-                                      .append(jmxManagerSSLKeyStore)
-                                      .append(jmxManagerSSLKeyStoreType)
-                                      .append(jmxManagerSSLKeyStorePassword)
-                                      .append(jmxManagerSSLTrustStore)
-                                      .append(jmxManagerSSLTrustStorePassword)
-                                      .append(jmxManagerSSLAlias)
-                                      .append(serverSSLEnabled)
-                                      .append(serverSslRequireAuthentication)
-                                      .append(serverSslProtocols)
-                                      .append(serverSslCiphers)
-                                      .append(serverSslProperties)
-                                      .append(serverSSLKeyStore)
-                                      .append(serverSSLKeyStoreType)
-                                      .append(serverSSLKeyStorePassword)
-                                      .append(serverSSLTrustStore)
-                                      .append(serverSSLTrustStorePassword)
-                                      .append(serverSSLAlias)
-                                      .append(gatewaySSLEnabled)
-                                      .append(gatewaySslRequireAuthentication)
-                                      .append(gatewaySslProtocols)
-                                      .append(gatewaySslCiphers)
-                                      .append(gatewaySslProperties)
-                                      .append(gatewaySSLKeyStore)
-                                      .append(gatewaySSLKeyStoreType)
-                                      .append(gatewaySSLKeyStorePassword)
-                                      .append(gatewaySSLTrustStore)
-                                      .append(gatewaySSLTrustStorePassword)
-                                      .append(gatewaySSLAlias)
-                                      .append(httpServiceSSLEnabled)
-                                      .append(httpServiceSSLRequireAuthentication)
-                                      .append(httpServiceSSLProtocols)
-                                      .append(httpServiceSSLCiphers)
-                                      .append(httpServiceSSLProperties)
-                                      .append(httpServiceSSLKeyStore)
-                                      .append(httpServiceSSLKeyStoreType)
-                                      .append(httpServiceSSLKeyStorePassword)
-                                      .append(httpServiceSSLTrustStore)
-                                      .append(httpServiceSSLTrustStorePassword)
-                                      .append(httpServiceSSLAlias)
-                                      .append(securableCommunicationChannels)
-                                      .append(sslProtocols)
-                                      .append(sslCiphers)
-                                      .append(sslRequireAuthentication)
-                                      .append(sslKeyStore)
-                                      .append(sslKeyStoreType)
-                                      .append(sslKeyStorePassword)
-                                      .append(sslTrustStore)
-                                      .append(sslTrustStorePassword)
-                                      .append(sslWebServiceRequireAuthentication)
-                                      .append(locatorSSLAlias)
-                                      .append(sslDefaultAlias)
-                                      .append(sourceMap)
-                                      .append(userCommandPackages)
-                                      .append(offHeapMemorySize)
-                                      .append(lockMemory)
-                                      .append(shiroInit)
-                                      .append(modifiable)
-                                      .toHashCode();
+    return new HashCodeBuilder(17, 37).append(name).append(tcpPort).append(mcastPort)
+        .append(mcastTtl).append(socketLeaseTime).append(socketBufferSize).append(conserveSockets)
+        .append(roles).append(mcastAddress).append(bindAddress).append(serverBindAddress)
+        .append(locators).append(locatorWaitTime).append(logFile).append(deployWorkingDir)
+        .append(logLevel).append(startLocator).append(startLocatorPort)
+        .append(statisticSamplingEnabled).append(statisticSampleRate).append(statisticArchiveFile)
+        .append(ackWaitThreshold).append(ackForceDisconnectThreshold).append(cacheXmlFile)
+        .append(archiveDiskSpaceLimit).append(archiveFileSizeLimit).append(logDiskSpaceLimit)
+        .append(logFileSizeLimit).append(clusterSSLEnabled).append(clusterSSLProtocols)
+        .append(clusterSSLCiphers).append(clusterSSLRequireAuthentication)
+        .append(clusterSSLKeyStore).append(clusterSSLKeyStoreType)
+        .append(clusterSSLKeyStorePassword).append(clusterSSLTrustStore)
+        .append(clusterSSLTrustStorePassword).append(clusterSSLAlias).append(mcastSendBufferSize)
+        .append(mcastRecvBufferSize).append(mcastFlowControl).append(udpSendBufferSize)
+        .append(udpRecvBufferSize).append(udpFragmentSize).append(disableTcp)
+        .append(enableTimeStatistics).append(memberTimeout).append(membershipPortRange)
+        .append(maxWaitTimeForReconnect).append(maxNumReconnectTries)
+        .append(asyncDistributionTimeout).append(asyncQueueTimeout).append(asyncMaxQueueSize)
+        .append(clientConflation).append(durableClientId).append(durableClientTimeout)
+        .append(securityClientAuthInit).append(securityClientAuthenticator).append(securityManager)
+        .append(postProcessor).append(securityClientDHAlgo).append(securityPeerAuthInit)
+        .append(securityPeerAuthenticator).append(securityClientAccessor)
+        .append(securityClientAccessorPP).append(securityLogLevel)
+        .append(enableNetworkPartitionDetection).append(disableAutoReconnect)
+        .append(securityLogFile).append(securityPeerMembershipTimeout).append(security)
+        .append(userDefinedProps).append(removeUnresponsiveClient).append(deltaPropagation)
+        .append(props).append(distributedSystemId).append(remoteLocators).append(enforceUniqueHost)
+        .append(redundancyZone).append(sslProperties).append(clusterSSLProperties).append(groups)
+        .append(enableSharedConfiguration).append(useSharedConfiguration)
+        .append(loadSharedConfigurationFromDir).append(clusterConfigDir).append(httpServicePort)
+        .append(httpServiceBindAddress).append(startDevRestApi).append(memcachedPort)
+        .append(memcachedProtocol).append(memcachedBindAddress).append(distributedTransactions)
+        .append(redisPort).append(redisBindAddress).append(redisPassword).append(jmxManager)
+        .append(jmxManagerStart).append(jmxManagerPort).append(jmxManagerBindAddress)
+        .append(jmxManagerHostnameForClients).append(jmxManagerPasswordFile)
+        .append(jmxManagerAccessFile).append(jmxManagerHttpPort).append(jmxManagerUpdateRate)
+        .append(jmxManagerSSLEnabled).append(jmxManagerSslRequireAuthentication)
+        .append(jmxManagerSslProtocols).append(jmxManagerSslCiphers).append(jmxManagerSslProperties)
+        .append(jmxManagerSSLKeyStore).append(jmxManagerSSLKeyStoreType)
+        .append(jmxManagerSSLKeyStorePassword).append(jmxManagerSSLTrustStore)
+        .append(jmxManagerSSLTrustStorePassword).append(jmxManagerSSLAlias).append(serverSSLEnabled)
+        .append(serverSslRequireAuthentication).append(serverSslProtocols).append(serverSslCiphers)
+        .append(serverSslProperties).append(serverSSLKeyStore).append(serverSSLKeyStoreType)
+        .append(serverSSLKeyStorePassword).append(serverSSLTrustStore)
+        .append(serverSSLTrustStorePassword).append(serverSSLAlias).append(gatewaySSLEnabled)
+        .append(gatewaySslRequireAuthentication).append(gatewaySslProtocols)
+        .append(gatewaySslCiphers).append(gatewaySslProperties).append(gatewaySSLKeyStore)
+        .append(gatewaySSLKeyStoreType).append(gatewaySSLKeyStorePassword)
+        .append(gatewaySSLTrustStore).append(gatewaySSLTrustStorePassword).append(gatewaySSLAlias)
+        .append(httpServiceSSLEnabled).append(httpServiceSSLRequireAuthentication)
+        .append(httpServiceSSLProtocols).append(httpServiceSSLCiphers)
+        .append(httpServiceSSLProperties).append(httpServiceSSLKeyStore)
+        .append(httpServiceSSLKeyStoreType).append(httpServiceSSLKeyStorePassword)
+        .append(httpServiceSSLTrustStore).append(httpServiceSSLTrustStorePassword)
+        .append(httpServiceSSLAlias).append(securableCommunicationChannels).append(sslProtocols)
+        .append(sslCiphers).append(sslRequireAuthentication).append(sslKeyStore)
+        .append(sslKeyStoreType).append(sslKeyStorePassword).append(sslTrustStore)
+        .append(sslTrustStorePassword).append(sslWebServiceRequireAuthentication)
+        .append(locatorSSLAlias).append(sslDefaultAlias).append(sourceMap)
+        .append(userCommandPackages).append(offHeapMemorySize).append(lockMemory).append(shiroInit)
+        .append(modifiable).toHashCode();
-   * Used by gemfire build.xml to generate a default gemfire.properties
-   * for use by applications. See bug 30995 for the feature request.
+   * Used by gemfire build.xml to generate a default gemfire.properties for use by applications. See
+   * bug 30995 for the feature request.
-   * For dunit tests we do not allow use of the default multicast address/port.
-   * Please use AvailablePort.getRandomAvailablePort(AvailablePort.JGROUPS)
-   * to obtain a free port for your test.
+   * For dunit tests we do not allow use of the default multicast address/port. Please use
+   * AvailablePort.getRandomAvailablePort(AvailablePort.JGROUPS) to obtain a free port for your
+   * test.
-        if (getMcastAddress().equals(DistributionConfig.DEFAULT_MCAST_ADDRESS) && getMcastPort() == DistributionConfig.DEFAULT_MCAST_PORT) {
-          throw new IllegalStateException(DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults set and default address and port are being used");
+        if (getMcastAddress().equals(DistributionConfig.DEFAULT_MCAST_ADDRESS)
+            && getMcastPort() == DistributionConfig.DEFAULT_MCAST_PORT) {
+          throw new IllegalStateException(DistributionConfig.GEMFIRE_PREFIX
+              + "disallowMcastDefaults set and default address and port are being used");
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, value);
+    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        value);
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, value);
+    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        value);
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, value);
+    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        value);
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, value);
+    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        value);
-  //Adding HTTP Service SSL properties
+  // Adding HTTP Service SSL properties
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, httpServiceSSLKeyStore);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME,
+        httpServiceSSLKeyStore);
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, httpServiceSSLKeyStoreType);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME,
+        httpServiceSSLKeyStoreType);
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, httpServiceSSLKeyStorePassword);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        httpServiceSSLKeyStorePassword);
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, httpServiceSSLTrustStore);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME,
+        httpServiceSSLTrustStore);
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);
+    this.getHttpServiceSSLProperties().setProperty(
+        SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);

UPD66 UPD66 UPD66 INS14 UPD66 INS43 INS32 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS45 DEL66 DEL42 DEL66 DEL66 DEL66 DEL66