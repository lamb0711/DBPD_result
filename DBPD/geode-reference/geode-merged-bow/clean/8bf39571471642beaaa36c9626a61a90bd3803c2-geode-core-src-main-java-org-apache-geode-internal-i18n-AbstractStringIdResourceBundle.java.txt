Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @see java.util.ResourceBundle 
+ * 
+ * @see java.util.ResourceBundle
-  /** 
-   * The {@link java.util.ResourceBundle} that implements the message lookup
-   * English has a special implementation for speed.
+  /**
+   * The {@link java.util.ResourceBundle} that implements the message lookup English has a special
+   * implementation for speed.
-  
+
-   * The default bundle, English, will be
-   * <code>data = null</code>
+   * The default bundle, English, will be <code>data = null</code>
-      //We do not have a logger yet
-      System.err.println("A SecurityException occurred while attempting to load the resource bundle, defaulting to English." + se.toString());
+      // We do not have a logger yet
+      System.err.println(
+          "A SecurityException occurred while attempting to load the resource bundle, defaulting to English."
+              + se.toString());
-    if ( is == null ) {
-      //No matching data file for the requested langauge, 
-      //defaulting to English
+    if (is == null) {
+      // No matching data file for the requested langauge,
+      // defaulting to English
-	
+
-       input = new BufferedReader(new InputStreamReader(is, "UTF-8"));
-       String line = null;
-       while((line = input.readLine()) != null ) {
-         int equalSign = line.indexOf('=');
-         String idAsString = line.substring(0, equalSign-1).trim();
-         //The +2 is because we need to skip the "= ", we dont use trim because some messages want leading whitespace
-         String message = line.substring(equalSign+2).replaceAll("\\\\n", "\n");
-         try {
-           int id = Integer.parseInt(idAsString);
-           map.put(id, message);
-         } catch(NumberFormatException nfe) {
-           //unit tests should prevent this from happening in a customer situation
-           throw new InternalGemFireException(nfe);
-         }
-         complete = true;
-       }
-    } catch( IOException ioe ) {
-      //@TODO log this exception
-    } finally {
-      if ( ! complete ) {
-        //something went wrong, clean up and revert back to English
+      input = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+      String line = null;
+      while ((line = input.readLine()) != null) {
+        int equalSign = line.indexOf('=');
+        String idAsString = line.substring(0, equalSign - 1).trim();
+        // The +2 is because we need to skip the "= ", we dont use trim because some messages want
+        // leading whitespace
+        String message = line.substring(equalSign + 2).replaceAll("\\\\n", "\n");
-          if ( input != null ) {
+          int id = Integer.parseInt(idAsString);
+          map.put(id, message);
+        } catch (NumberFormatException nfe) {
+          // unit tests should prevent this from happening in a customer situation
+          throw new InternalGemFireException(nfe);
+        }
+        complete = true;
+      }
+    } catch (IOException ioe) {
+      // @TODO log this exception
+    } finally {
+      if (!complete) {
+        // something went wrong, clean up and revert back to English
+        try {
+          if (input != null) {
-        } catch (IOException ignore ) {}
-        //set map back to null so we default to English
+        } catch (IOException ignore) {
+        }
+        // set map back to null so we default to English
-  
+
-    //Intentionally blank  
+    // Intentionally blank
-  
+
-   * @param key
-   *        StringId passed to {@link #getString java.util.ResourceBundle} 
-   *        for translation.
+   * @param key StringId passed to {@link #getString java.util.ResourceBundle} for translation.
-    String txt = (String) data.get(((StringId)key).id);
-    if( txt != null ) {
+    String txt = (String) data.get(((StringId) key).id);
+    if (txt != null) {
-      //found an untranslated message, use the English as a fall back
+      // found an untranslated message, use the English as a fall back
-    
+
-   
+

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66