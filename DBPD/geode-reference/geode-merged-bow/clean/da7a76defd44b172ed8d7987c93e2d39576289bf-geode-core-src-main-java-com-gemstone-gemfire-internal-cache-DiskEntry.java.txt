Merge branch 'develop' into feature/GEODE-17-2

-import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
-import com.gemstone.gemfire.internal.offheap.ObjectChunk;
+import com.gemstone.gemfire.internal.offheap.AddressableMemoryManager;
-import com.gemstone.gemfire.internal.offheap.Releasable;
-import com.gemstone.gemfire.internal.offheap.UnsafeMemoryChunk;
-     * This method is used for concurrent map operations, SQLFabric and CQ processing
+     * This method is used for concurrent map operations and CQ processing
-        if (v instanceof ObjectChunk) {
-          @Released ObjectChunk ohv = (ObjectChunk) v;
-          try {
-            v = ohv.getDeserializedValue(null, null);
-            if (v == ohv) {
-              throw new IllegalStateException("sqlf tried to use getValueOnDiskOrBuffer");
-            }
-          } finally {
-            ohv.release(); // OFFHEAP the offheap ref is decremented here
-          }
-        } else {
-          v = ((CachedDeserializable)v).getDeserializedValue(null, null);
+        CachedDeserializable cd = (CachedDeserializable) v;
+        try {
+          v = cd.getDeserializedValue(null, null);
+        } finally {
+          OffHeapHelper.release(cd); // If v was off-heap it is released here
+        CachedDeserializable cd = (CachedDeserializable) v;
-          if (v instanceof StoredObject && !((StoredObject) v).isSerialized()) {
+          if (!cd.isSerialized()) {
-            entry.value = ((StoredObject) v).getDeserializedForReading();
+            entry.value = cd.getDeserializedForReading();
-            Object tmp = ((CachedDeserializable)v).getValue();
+            Object tmp = cd.getValue();
-     * Note that the Chunk this ValueWrapper is created with
+     * Note that the StoredObject this ValueWrapper is created with
-     * the chunk releases it.
+     * the StoredObject releases it.
-     * Note that this class is only used with uncompressed chunks.
+     * Note that this class is only used with uncompressed StoredObjects.
-    public static class ChunkValueWrapper implements ValueWrapper {
-      private final @Unretained ObjectChunk chunk;
-      public ChunkValueWrapper(ObjectChunk c) {
-        assert !c.isCompressed();
-        this.chunk = c;
+    public static class OffHeapValueWrapper implements ValueWrapper {
+      private final @Unretained StoredObject offHeapData;
+      public OffHeapValueWrapper(StoredObject so) {
+        assert so.hasRefCount();
+        assert !so.isCompressed();
+        this.offHeapData = so;
-        return this.chunk.isSerialized();
+        return this.offHeapData.isSerialized();
-        return this.chunk.getDataSize();
+        return this.offHeapData.getDataSize();
-          ByteBuffer chunkbb = this.chunk.createDirectByteBuffer();
+          ByteBuffer chunkbb = this.offHeapData.createDirectByteBuffer();
-        final long bbAddress = ObjectChunk.getDirectByteBufferAddress(bb);
+        final long bbAddress = AddressableMemoryManager.getDirectByteBufferAddress(bb);
-          long addrToRead = this.chunk.getAddressForReading(0, maxOffset);
+          long addrToRead = this.offHeapData.getAddressForReadingData(0, maxOffset);
-              UnsafeMemoryChunk.copyMemory(addrToRead, addrToWrite, availableSpace);
+              AddressableMemoryManager.copyMemory(addrToRead, addrToWrite, availableSpace);
-          UnsafeMemoryChunk.copyMemory(addrToRead, addrToWrite, bytesRemaining);
+          AddressableMemoryManager.copyMemory(addrToRead, addrToWrite, bytesRemaining);
-          long addr = this.chunk.getAddressForReading(0, maxOffset);
+          long addr = this.offHeapData.getAddressForReadingData(0, maxOffset);
-            bb.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+            bb.put(AddressableMemoryManager.readByte(addr));
-        return this.chunk.getStringForm();
+        return this.offHeapData.getStringForm();
+    /**
+     * Returns true if the given object is off-heap
+     * and it is worth wrapping a reference to it
+     * instead of copying its data to the heap.
+     * Currently all StoredObject's with a refCount are
+     * wrapped.
+     */
+    public static boolean wrapOffHeapReference(Object o) {
+      if (o instanceof StoredObject) {
+        StoredObject so = (StoredObject) o;
+        if (so.hasRefCount()) {
+          // 
+          return true;
+        }
+      }
+      return false;
+    }
+    
-          if (proxy instanceof ObjectChunk) {
-            return new ChunkValueWrapper((ObjectChunk) proxy);
+          if (wrapOffHeapReference(proxy)) {
+            return new OffHeapValueWrapper((StoredObject) proxy);
-          if (proxy instanceof StoredObject) {
-            StoredObject ohproxy = (StoredObject) proxy;
-            isSerializedObject = ohproxy.isSerialized();
-            if (isSerializedObject) {
-              bytes = ohproxy.getSerializedValue();
-            } else {
-              bytes = (byte[]) ohproxy.getDeserializedForReading();
-            }
-          } else {
+          isSerializedObject = proxy.isSerialized();
+          if (isSerializedObject) {
+          } else {
+            bytes = (byte[]) proxy.getDeserializedForReading();
-        // to the file with using the off-heap memory with no extra copying.
+        // to the file using the off-heap memory with no extra copying.
-          if (rawValue instanceof ObjectChunk) {
-            return new ChunkValueWrapper((ObjectChunk) rawValue);
+          if (wrapOffHeapReference(rawValue)) {
+            return new OffHeapValueWrapper((StoredObject) rawValue);
-      if (result instanceof StoredObject) {
-        ((StoredObject) result).release();
-        throw new IllegalStateException("sqlf tried to use getValueInVMOrDiskWithoutFaultIn");
-      }

MOV26 UPD40 INS31 INS8 UPD42 INS29 INS83 INS83 INS39 INS42 INS44 INS8 MOV8 MOV60 MOV25 MOV41 MOV43 UPD42 MOV78 MOV78 INS65 INS43 INS42 INS25 INS41 INS25 UPD66 MOV62 UPD66 UPD66 UPD66 UPD42 MOV43 INS42 INS6 INS66 INS66 INS66 INS66 INS66 INS42 MOV62 INS8 INS9 MOV27 MOV8 INS25 INS32 UPD42 INS60 INS25 MOV27 MOV8 INS25 UPD43 MOV60 INS42 INS42 UPD42 MOV43 INS59 INS32 INS8 MOV27 MOV8 MOV8 UPD42 UPD42 MOV11 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS11 INS42 INS42 INS41 MOV60 MOV60 INS25 MOV41 INS42 UPD42 MOV11 UPD42 MOV43 INS42 INS9 MOV62 MOV8 MOV25 INS32 UPD42 INS42 INS38 UPD42 UPD42 MOV60 INS25 INS25 MOV62 INS8 INS42 INS42 UPD42 MOV32 INS60 UPD42 UPD42 UPD42 INS32 INS8 MOV27 INS8 MOV42 MOV5 MOV21 MOV25 INS42 MOV43 INS59 UPD42 UPD42 INS42 INS42 INS41 INS21 UPD43 INS42 INS32 UPD42 INS14 UPD42 INS42 INS33 INS32 UPD42 MOV43 INS42 INS42 INS42 INS43 MOV11 INS42 INS42 INS42 UPD42 MOV42 MOV8 INS42 UPD42 MOV42 MOV32 MOV42 MOV33 MOV21 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL62 DEL42 DEL78 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL36 DEL42 DEL33 DEL33 DEL32 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL36 DEL42 DEL32 DEL42 DEL11 DEL36 DEL42 DEL62 DEL38 DEL27 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL11 DEL14 DEL41 DEL25 DEL25 DEL25 DEL8 DEL25 DEL25 DEL25 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25