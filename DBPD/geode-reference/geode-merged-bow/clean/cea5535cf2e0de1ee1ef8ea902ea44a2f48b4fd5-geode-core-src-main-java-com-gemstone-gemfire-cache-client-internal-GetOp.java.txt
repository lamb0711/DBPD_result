GEODE-1761 Clients don't fail back when servers are bounced

Servers will send a refresh hint to clients if they detect that a request
had to be send to a different server who owned the primary bucket
affected by the operation.  Clients should always refresh when this
happens unless they have connection-pool size constraints that force
them to use non-optimal servers.

Client-side operation classes have been modified to initiate the refresh.
I've added code in the meta-data service class to avoid performing
multiple concurrent refreshes on the same region.

On the server-side I've cleaned up some of the network-hop detection
code to stop using hard-coded integers and to consolidate some of
the code that resets the ThreadLocals being used to record network-
hops detected.

-    AbstractOp op = new GetOpImpl(region, key, callbackArg,
+    GetOpImpl op = new GetOpImpl(region, key, callbackArg,
+            op.setAllowDuplicateMetadataRefresh(! onlyUseExistingCnx);
-    
+
-                ClientMetadataService cms;
-                  cms = region.getCache().getClientMetadataService();
-                  version = cms.getMetaDataVersion(region, Operation.UPDATE, key,
-                      null, callbackArg);
+                  ClientMetadataService cms = region.getCache().getClientMetadataService();
+                  int myVersion = cms.getMetaDataVersion(region, Operation.UPDATE,
+                    key, null, callbackArg);
+                  if (myVersion != bytesReceived[0] || isAllowDuplicateMetadataRefresh()) {
+                    cms.scheduleGetPRMetaData(region, false, bytesReceived[1]);
+                  }
-                if (bytesReceived[0] != version) {
-                  cms.scheduleGetPRMetaData(region, false,bytesReceived[1]);
-                }

UPD43 UPD42 INS21 INS32 INS42 INS42 INS38 INS42 INS60 INS60 INS25 MOV43 INS59 INS39 INS59 INS27 MOV8 INS42 MOV32 INS42 MOV32 INS27 INS32 MOV21 INS42 MOV2 INS42 MOV32 DEL42 DEL59 DEL60 DEL42 DEL7 DEL42 DEL7 DEL21 DEL42 DEL27 DEL25