Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Reads the InputStream per-byte instead of per-line. Uses BufferedReader.ready() 
- * to ensure that calls to read() will not block. Uses continueReadingMillis to
- * continue reading after the Process terminates in order to fully read the last
- * of that Process' output (such as a stack trace).
+ * Reads the InputStream per-byte instead of per-line. Uses BufferedReader.ready() to ensure that
+ * calls to read() will not block. Uses continueReadingMillis to continue reading after the Process
+ * terminates in order to fully read the last of that Process' output (such as a stack trace).
-  /** millis to continue reading after Process terminates in order to fully read the last of its output */
+  /**
+   * millis to continue reading after Process terminates in order to fully read the last of its
+   * output
+   */
-  
+
-  
+
-      StringBuilder sb = new StringBuilder(); 
+      StringBuilder sb = new StringBuilder();
-          sb.append((char)ch);
-          if ((char)ch == '\n') {
+          sb.append((char) ch);
+          if ((char) ch == '\n') {

UPD66 UPD66 UPD66 UPD66 INS66 DEL66