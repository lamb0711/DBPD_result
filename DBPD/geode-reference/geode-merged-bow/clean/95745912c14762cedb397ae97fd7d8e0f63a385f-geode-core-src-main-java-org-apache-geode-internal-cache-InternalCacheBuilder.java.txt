GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>
-import java.util.HashSet;
-import java.util.Set;
-import java.util.function.Consumer;
-import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import org.apache.geode.internal.metrics.CacheLifecycleMetricsSession;
-import org.apache.geode.internal.metrics.CacheMeterRegistryFactory;
-import org.apache.geode.internal.metrics.CompositeMeterRegistryFactory;
+import org.apache.geode.metrics.internal.InternalDistributedSystemMetricsService;
+import org.apache.geode.metrics.internal.MetricsService;
-  private final Set<MeterRegistry> meterSubregistries = new HashSet<>();
-
-  private final CompositeMeterRegistryFactory compositeMeterRegistryFactory;
-  private final Consumer<CompositeMeterRegistry> metricsSessionInitializer;
+  private final MetricsService.Builder metricsSessionBuilder;
-        new CacheMeterRegistryFactory(),
-        CacheLifecycleMetricsSession.builder()::build,
+        new InternalDistributedSystemMetricsService.Builder(),
-        (isClient1, poolFactory1, internalDistributedSystem, cacheConfig1, useAsyncEventListeners1,
-            typeRegistry1, meterRegistry, addedMeterSubregistries) -> new GemFireCacheImpl(
-                isClient1, poolFactory1, internalDistributedSystem, cacheConfig1,
-                useAsyncEventListeners1, typeRegistry1, meterRegistry, addedMeterSubregistries));
+        GemFireCacheImpl::new);
-      CompositeMeterRegistryFactory compositeMeterRegistryFactory,
-      Consumer<CompositeMeterRegistry> metricsSessionInitializer,
+      MetricsService.Builder metricsSessionBuilder,
-    this.compositeMeterRegistryFactory = compositeMeterRegistryFactory;
-    this.metricsSessionInitializer = metricsSessionInitializer;
+    this.metricsSessionBuilder = metricsSessionBuilder;
+    this.metricsSessionBuilder.setIsClient(isClient);
-          .orElseGet(() -> createInternalDistributedSystem());
+          .orElseGet(this::createInternalDistributedSystem);
-
-            int systemId = internalDistributedSystem.getConfig().getDistributedSystemId();
-            String memberName = internalDistributedSystem.getName();
-            String hostName = internalDistributedSystem.getDistributedMember().getHost();
-
-            CompositeMeterRegistry compositeMeterRegistry = compositeMeterRegistryFactory
-                .create(systemId, memberName, hostName, isClient);
-
-            for (MeterRegistry meterSubregistry : meterSubregistries) {
-              compositeMeterRegistry.add(meterSubregistry);
-            }
-
-            metricsSessionInitializer.accept(compositeMeterRegistry);
-
-                    cacheConfig, useAsyncEventListeners, typeRegistry, compositeMeterRegistry,
-                    meterSubregistries);
+                    cacheConfig, useAsyncEventListeners, typeRegistry);
-
+    metricsSessionBuilder.setIsClient(isClient);
-    meterSubregistries.add(subregistry);
+    requireNonNull(subregistry, "meter registry");
+    metricsSessionBuilder.addPersistentMeterRegistry(subregistry);
-    return internalDistributedSystemConstructor.construct(configProperties, securityConfig);
+    return internalDistributedSystemConstructor
+        .construct(configProperties, securityConfig, metricsSessionBuilder);
+
-  interface InternalCacheConstructor {
+  public interface InternalCacheConstructor {
-        boolean useAsyncEventListeners, TypeRegistry typeRegistry, MeterRegistry meterRegistry,
-        Set<MeterRegistry> addedMeterSubregistries);
+        boolean useAsyncEventListeners, TypeRegistry typeRegistry);
-  interface InternalDistributedSystemConstructor {
-    InternalDistributedSystem construct(Properties configProperties, SecurityConfig securityConfig);
+  public interface InternalDistributedSystemConstructor {
+    InternalDistributedSystem construct(Properties configProperties, SecurityConfig securityConfig,
+        MetricsService.Builder metricsSessionBuilder);

MOV23 UPD40 UPD40 INS43 MOV21 MOV21 INS83 INS83 INS40 UPD42 INS43 UPD42 INS21 INS21 INS44 INS89 INS40 INS32 INS32 INS32 INS43 INS42 UPD43 MOV43 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 UPD42 INS42 INS40 INS40 UPD42 MOV52 UPD42 MOV42 INS90 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL90 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL86 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL22 DEL42 DEL7 DEL42 DEL32 DEL86 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44