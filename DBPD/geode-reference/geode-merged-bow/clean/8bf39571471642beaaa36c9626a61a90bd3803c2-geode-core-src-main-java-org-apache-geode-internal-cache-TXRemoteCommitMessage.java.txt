Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  public TXRemoteCommitMessage() {
+  public TXRemoteCommitMessage() {}
+
+  public TXRemoteCommitMessage(int txUniqId, InternalDistributedMember onBehalfOfClientMember,
+      ReplyProcessor21 processor) {
+    super(txUniqId, onBehalfOfClientMember, processor);
-  public TXRemoteCommitMessage(int txUniqId,InternalDistributedMember onBehalfOfClientMember, ReplyProcessor21 processor) {
-    super(txUniqId,onBehalfOfClientMember, processor);
-  }
-  
-  public static RemoteCommitResponse send(Cache cache,
-      int txUniqId,InternalDistributedMember onBehalfOfClientMember, DistributedMember recipient) {
-    final InternalDistributedSystem system = 
-                    (InternalDistributedSystem)cache.getDistributedSystem();
+  public static RemoteCommitResponse send(Cache cache, int txUniqId,
+      InternalDistributedMember onBehalfOfClientMember, DistributedMember recipient) {
+    final InternalDistributedSystem system =
+        (InternalDistributedSystem) cache.getDistributedSystem();
-    RemoteCommitResponse p = new RemoteCommitResponse(system,recipients);
-    TXMessage msg = new TXRemoteCommitMessage(txUniqId,onBehalfOfClientMember, p);
-    
+    RemoteCommitResponse p = new RemoteCommitResponse(system, recipients);
+    TXMessage msg = new TXRemoteCommitMessage(txUniqId, onBehalfOfClientMember, p);
+
-    system.getDistributionManager().putOutgoing(msg); 
+    system.getDistributionManager().putOutgoing(msg);
-  protected boolean operateOnTx(TXId txId,DistributionManager dm) throws RemoteOperationException {
+  protected boolean operateOnTx(TXId txId, DistributionManager dm) throws RemoteOperationException {
-    
+
-    
+
-     * return false so there isn't another reply */
+     * return false so there isn't another reply
+     */
-  
+
-  
-  
-  
+
+
-   * This message is used for the reply to a
-   * remote commit operation: a commit from a stub to the tx host. This is the
-   * reply to a {@link TXRemoteCommitMessage}.
+   * This message is used for the reply to a remote commit operation: a commit from a stub to the tx
+   * host. This is the reply to a {@link TXRemoteCommitMessage}.
-  public static final class TXRemoteCommitReplyMessage extends ReplyMessage
-   {
+  public static final class TXRemoteCommitReplyMessage extends ReplyMessage {
-     * Used on the fromData side to transfer the value bytes to the requesting
-     * thread
+     * Used on the fromData side to transfer the value bytes to the requesting thread
-    public TXRemoteCommitReplyMessage() {
-    }
+    public TXRemoteCommitReplyMessage() {}
-    public TXRemoteCommitReplyMessage(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public TXRemoteCommitReplyMessage(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-     * Return the value from the get operation, serialize it bytes as late as
-     * possible to avoid making un-neccesary byte[] copies.  De-serialize those 
-     * same bytes as late as possible to avoid using precious threads (aka P2P readers). 
+     * Return the value from the get operation, serialize it bytes as late as possible to avoid
+     * making un-neccesary byte[] copies. De-serialize those same bytes as late as possible to avoid
+     * using precious threads (aka P2P readers).
+     * 
-     * @param val the raw value that will eventually be serialized 
+     * @param val the raw value that will eventually be serialized
-    public static void send(InternalDistributedMember recipient, 
-        int processorId, TXCommitMessage val, ReplySender replySender)
-        throws RemoteOperationException
-    {
-      Assert.assertTrue(recipient != null,
-          "TXRemoteCommitReply NULL reply message");
+    public static void send(InternalDistributedMember recipient, int processorId,
+        TXCommitMessage val, ReplySender replySender) throws RemoteOperationException {
+      Assert.assertTrue(recipient != null, "TXRemoteCommitReply NULL reply message");
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, ReplyProcessor21 processor) {
-        logger.trace(LogMarker.DM, "TXRemoteCommitReply process invoking reply processor with processorId:{}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "TXRemoteCommitReply process invoking reply processor with processorId:{}",
+            this.processorId);
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.commitMessage = (TXCommitMessage)DataSerializer.readObject(in);
+      this.commitMessage = (TXCommitMessage) DataSerializer.readObject(in);
-    public String toString()
-    {
+    public String toString() {
-      sb.append("TXRemoteCommitReplyMessage ").append("processorid=").append(
-          this.processorId).append(" reply to sender ")
-          .append(this.getSender());
+      sb.append("TXRemoteCommitReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender());
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.TXRemoteCommitMessage.TXRemoteCommitReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.TXRemoteCommitMessage.TXRemoteCommitReplyMessage}
-  public static class RemoteCommitResponse extends RemoteOperationResponse
-   {
+  public static class RemoteCommitResponse extends RemoteOperationResponse {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-        TXRemoteCommitReplyMessage reply = (TXRemoteCommitReplyMessage)msg;
+        TXRemoteCommitReplyMessage reply = (TXRemoteCommitReplyMessage) msg;
-    public TXCommitMessage waitForResponse() 
-        throws RemoteOperationException {
+    public TXCommitMessage waitForResponse() throws RemoteOperationException {
-//        waitForRepliesUninterruptibly();
-          waitForCacheException();
-          if (DistributionStats.enableClockStats) {
-            getDistributionManager().getStats().incReplyHandOffTime(this.start);
-          }
-      }
-      catch (RemoteOperationException e) {
+        // waitForRepliesUninterruptibly();
+        waitForCacheException();
+        if (DistributionStats.enableClockStats) {
+          getDistributionManager().getStats().incReplyHandOffTime(this.start);
+        }
+      } catch (RemoteOperationException e) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66