Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private final Map/*<ServerLocation, ConnectionStats>*/<ServerLocation, ConnectionStats> statMap = new HashMap<ServerLocation, ConnectionStats>();
+  private final Map/* <ServerLocation, ConnectionStats> */<ServerLocation, ConnectionStats> statMap =
+      new HashMap<ServerLocation, ConnectionStats>();
-  
-  public EndpointManagerImpl(String poolName, DistributedSystem ds,CancelCriterion cancelCriterion, PoolStats poolStats) {
+
+  public EndpointManagerImpl(String poolName, DistributedSystem ds, CancelCriterion cancelCriterion,
+      PoolStats poolStats) {
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.cache.client.internal.EndpointManager#referenceEndpoint(org.apache.geode.distributed.internal.ServerLocation)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.cache.client.internal.EndpointManager#referenceEndpoint(org.apache.geode.
+   * distributed.internal.ServerLocation)
-    //logger.warn("REFENDPOINT server:"+server+" memberId:"+memberId);
+    // logger.warn("REFENDPOINT server:"+server+" memberId:"+memberId);
-    if(endpoint == null || endpoint.isClosed()) {
-      synchronized(this) {
+    if (endpoint == null || endpoint.isClosed()) {
+      synchronized (this) {
-        if(endpoint == null || endpoint.isClosed()) {
-          ConnectionStats stats  = getStats(server);
-          Map<ServerLocation, Endpoint> endpointMapTemp = new HashMap<ServerLocation, Endpoint>(endpointMap);
+        if (endpoint == null || endpoint.isClosed()) {
+          ConnectionStats stats = getStats(server);
+          Map<ServerLocation, Endpoint> endpointMapTemp =
+              new HashMap<ServerLocation, Endpoint>(endpointMap);
+          listener.clearPdxRegistry(endpoint);
-    
+
-    
-    if(addedEndpoint) {
-      //logger.warn("EMANFIRE2:JOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId());
+
+    if (addedEndpoint) {
+      // logger.warn("EMANFIRE2:JOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId());
-      //logger.warn("EMANFIRE33:NOJOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId());
+      // logger.warn("EMANFIRE33:NOJOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId());
-    
+
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.cache.client.internal.EndpointManager#serverCrashed(org.apache.geode.cache.client.internal.Endpoint)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.cache.client.internal.EndpointManager#serverCrashed(org.apache.geode.cache.
+   * client.internal.Endpoint)
-  
+
-  
+
-    synchronized(this) {
-      Map<ServerLocation, Endpoint> endpointMapTemp = new HashMap<ServerLocation, Endpoint>(endpointMap);
+    synchronized (this) {
+      Map<ServerLocation, Endpoint> endpointMapTemp =
+          new HashMap<ServerLocation, Endpoint>(endpointMap);
-      if(endpoint != null) {
+      if (endpoint != null) {
-    if(removedEndpoint) {
-      PoolImpl pool = (PoolImpl)PoolManager.find(this.poolName);
+    if (removedEndpoint) {
+      PoolImpl pool = (PoolImpl) PoolManager.find(this.poolName);
-        for (ProxyCache proxyCache : proxyCaches) {
-          try {
-            Long userId = proxyCache.getUserAttributes().getServerToId().remove(
-                endpoint.getLocation());
-            if (userId != null) {
-              ++size;
+          for (ProxyCache proxyCache : proxyCaches) {
+            try {
+              Long userId =
+                  proxyCache.getUserAttributes().getServerToId().remove(endpoint.getLocation());
+              if (userId != null) {
+                ++size;
+              }
+            } catch (CacheClosedException cce) {
+              // If this call is triggered by a Cache.close(), then this can be
+              // expected.
-          } catch (CacheClosedException cce) {
-            // If this call is triggered by a Cache.close(), then this can be
-            // expected.
-        }
-        if (logger.isDebugEnabled()) {
-          logger.debug("EndpointManagerImpl.removeEndpoint() Removed server {} from {} user's ProxyCache", endpoint.getLocation(), size);
-        }
+          if (logger.isDebugEnabled()) {
+            logger.debug(
+                "EndpointManagerImpl.removeEndpoint() Removed server {} from {} user's ProxyCache",
+                endpoint.getLocation(), size);
+          }
-            logger.debug("EndpointManagerImpl.removeEndpoint() Removed server {} from thread local variable", endpoint.getLocation());
+            logger.debug(
+                "EndpointManagerImpl.removeEndpoint() Removed server {} from thread local variable",
+                endpoint.getLocation());
-      if(crashed) {
+      if (crashed) {
-      }
-      else {
+      } else {
-  
-  
-  /* (non-Javadoc)
+
+
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    for(Iterator<ConnectionStats> itr = statMap.values().iterator(); itr.hasNext(); ) {
+    for (Iterator<ConnectionStats> itr = statMap.values().iterator(); itr.hasNext();) {
-    
+
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.cache.client.internal.EndpointManager#addListener(org.apache.geode.cache.client.internal.EndpointManagerImpl.EndpointListener)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.cache.client.internal.EndpointManager#addListener(org.apache.geode.cache.
+   * client.internal.EndpointManagerImpl.EndpointListener)
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.cache.client.internal.EndpointManager#removeListener(org.apache.geode.cache.client.internal.EndpointManagerImpl.EndpointListener)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.cache.client.internal.EndpointManager#removeListener(org.apache.geode.cache.
+   * client.internal.EndpointManagerImpl.EndpointListener)
-  
+
-    if(stats == null) {
+    if (stats == null) {
-      PoolImpl pool = (PoolImpl)PoolManager.find(this.poolName);
+      PoolImpl pool = (PoolImpl) PoolManager.find(this.poolName);
-              this.poolStats/*, this.gatewayStats*/);
+              this.poolStats/* , this.gatewayStats */);
-        stats = new ConnectionStats(ds, statName, this.poolStats/*,
-            this.gatewayStats*/);
+        stats = new ConnectionStats(ds, statName, this.poolStats/*
+                                                                 * , this.gatewayStats
+                                                                 */);
-    
+
-  
+
-  
+
-    //do nothing
+    // do nothing
-  
+
-  
-    private volatile Set/*<EndpointListener>*/<EndpointListener> endpointListeners = Collections.emptySet();
-    
+
+    private volatile Set/* <EndpointListener> */<EndpointListener> endpointListeners =
+        Collections.emptySet();
+
-      for(Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext(); ) {
+      for (Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext();) {
-      for(Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext(); ) {
+      for (Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext();) {
-      //logger.warn("HIGHUP:JOIN:"+endpoint.getLocation());
-      for(Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext(); ) {
+      // logger.warn("HIGHUP:JOIN:"+endpoint.getLocation());
+      for (Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext();) {
-        listener.endpointNowInUse(endpoint);
+        if (!(listener instanceof PdxRegistryRecoveryListener)) {
+          listener.endpointNowInUse(endpoint);
+        }
+
+    public void clearPdxRegistry(Endpoint endpoint) {
+      for (Iterator<EndpointListener> itr = endpointListeners.iterator(); itr.hasNext();) {
+        EndpointManager.EndpointListener listener = itr.next();
+        if (listener instanceof PdxRegistryRecoveryListener) {
+          listener.endpointNowInUse(endpoint);
+        }
+      }
+    }
+
-  
-  
-  
+
+
+
-    
+
-      if(endpoint.getMemberId()==null || cancelCriterion.isCancelInProgress()) {
+      if (cancelCriterion.isCancelInProgress()) {
-      //logger.warn("EMANFIRE:CRASH:"+endpoint.getLocation());
-      InternalClientMembership.notifyCrashed(endpoint.getMemberId(), false);
+      // logger.warn("EMANFIRE:CRASH:"+endpoint.getLocation());
+      InternalClientMembership.notifyServerCrashed(endpoint.getLocation());
-      if(endpoint.getMemberId()==null || cancelCriterion.isCancelInProgress()) {
+      if (cancelCriterion.isCancelInProgress()) {
-      //logger.warn("EMANFIRE:LEFT:"+endpoint.getLocation());
-      InternalClientMembership.notifyLeft(endpoint.getMemberId(), false);
+      // logger.warn("EMANFIRE:LEFT:"+endpoint.getLocation());
+      InternalClientMembership.notifyServerLeft(endpoint.getLocation());
-      if(cancelCriterion.isCancelInProgress()) {
+      if (cancelCriterion.isCancelInProgress()) {
-      //logger.warn("EMANFIRE:JOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId(),new Exception());
-      InternalClientMembership.notifyJoined(endpoint.getMemberId(), false);
+      // logger.warn("EMANFIRE:JOIN:"+endpoint.getLocation()+" mid:"+endpoint.getMemberId(),new
+      // Exception());
+      InternalClientMembership.notifyServerJoined(endpoint.getLocation());
-  }  
-  
+  }
+

MOV31 INS31 INS83 INS39 INS42 MOV44 INS8 UPD42 INS42 MOV44 UPD42 INS44 INS8 INS24 INS43 INS42 INS25 MOV21 INS58 INS32 INS8 INS32 INS42 INS32 MOV8 INS25 INS74 INS59 INS42 INS42 INS60 INS25 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 INS38 INS8 INS43 INS43 INS42 INS32 INS43 INS59 INS62 INS8 UPD42 UPD42 UPD42 INS36 MOV21 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS43 INS21 INS21 INS62 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL32 DEL27 DEL9 DEL9 DEL42 DEL42 DEL32 DEL33 DEL27 DEL32 DEL27 DEL25 DEL8