Revert GEODE-2644 because offline diskstore commands generate info level logs

GFSH forks the offline diskstore commands in a JVM using log4j2-cli.xml
which sets the log level to WARN. However, the forked JVM creates a
Cache which then starts generating info level statements to STDOUT.

Revert "GEODE-2644: Remove log level from MonitorQueryUnderContentionBenchmark"
This reverts commit 6691d310e1263966991e584f712156d919dabecf.

Revert "GEODE-2644: Update session state caching dependencies for logging"
This reverts commit 688f58a4a75cc1297faa1dda201b971346c3a9fe.

Revert "GEODE-5637: Fix flaky SingleHopClientExecutorWithLoggingIntegrationTest"
This reverts commit 0a8f3dffa1ebaa618fafecc15bbc92ba8ba83696.

Revert "GEODE-2644: Make LogWriterAppender optional and support log4j2.xml"
This reverts commit 591f3f7840ce38c6100bff2040f396ad2469175e.

Revert "GEODE-2644: Expand DistributedSystemMXBean tests"
This reverts commit cd2bba13e2fb7e79f7634053a6c612050b328e11.

Revert "GEODE-2644: Make AlertAppender optional and support log4j2.xml"
This reverts commit 02c3cae1d38098259ff6aa4635c6e74f795bdc50.

Revert "GEODE-2644: Add LogConfig and StatisticsConfig for logging"
This reverts commit a77c94b349b3ed7fc873fc29f6852f9936843790.

Revert "GEODE-2644: Add AlertingTest JUnit Category"
This reverts commit 731cd2a7d35b086d34f8bbcb94a83c40739ae8ee.

Revert "GEODE-2644: Add LogFileAssert and LogLevelAssert assertions"
This reverts commit 5e61da5301469cdbd71ac186573f56c38e9a6cf0.

Revert "GEODE-2644: Cleanup logging related files"
This reverts commit 763e4177f201eff9b140654e6858152a1a184b8c.

Revert "GEODE-2644: Define interfaces for new Log4j2 Appenders"
This reverts commit efd8a14027195b6dae1dd3e4d53a33696ed318bb.

-import java.util.StringTokenizer;
-import org.apache.geode.LogWriter;
- * Parses a log file written by a {@link LogWriter} into {@link LogFileParser.LogEntry}s. It
- * behaves sort of like an {@link StringTokenizer}.
+ * Parses a log file written by a {@link org.apache.geode.LogWriter} into
+ * {@link LogFileParser.LogEntry}s. It behaves sort of like an {@link java.util.StringTokenizer}.
+ *
-
+  /////////////////////// Instance Fields ///////////////////////
+
-  private final BufferedReader br;
+  private BufferedReader br;
+  /** The pattern used to match the first line of a log entry */
+  // private Pattern pattern;
+
-  private final boolean suppressBlanks;
+  private boolean suppressBlanks;
+
+  ////////////////////// Constructors //////////////////////
-  public LogFileParser(final String logFileName, final BufferedReader br) {
+  public LogFileParser(String logFileName, BufferedReader br) {
-  public LogFileParser(final String logFileName, final BufferedReader br, final boolean tabOut,
-      final boolean suppressBlanks) {
+  public LogFileParser(String logFileName, BufferedReader br, boolean tabOut,
+      boolean suppressBlanks) {
-    hasMoreEntries = true;
-    timestamp = null;
-    sb = new StringBuffer();
+    this.hasMoreEntries = true;
+    // this.pattern =
+    // Pattern.compile("\\[\\w+ (\\d\\d\\d\\d/\\d\\d/\\d\\d \\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d) .*");
+    this.timestamp = null;
+    this.sb = new StringBuffer();
-    whiteFileName = new StringBuffer();
+    this.whiteFileName = new StringBuffer();
-      for (int i = (logFileName.length() + 2) % 8; i > 0; i--) {
+      for (int i = ((logFileName.length() + 2) % 8); i > 0; i--) {
-      extLogFileName = this.logFileName + ": ";
+      this.extLogFileName = this.logFileName + ": ";
-      extLogFileName = null;
+      this.extLogFileName = null;
+  //////////////////// Instance Methods ////////////////////
+
-    return hasMoreEntries;
+    return this.hasMoreEntries;
-  private String getTimestamp(final String line) {
+  private String getTimestamp(String line) {
-        if (line.charAt(1) == 'i' && line.charAt(2) == 'n'
-            && line.charAt(3) == 'f' ||
+        if ((line.charAt(1) == 'i' && line.charAt(2) == 'n'
+            && line.charAt(3) == 'f' /*
+                                      * && line.charAt(4) == 'o'
+                                      */) ||
-            line.charAt(1) == 'f' && line.charAt(2) == 'i'
-                && line.charAt(3) == 'n'
+            (line.charAt(1) == 'f' && line.charAt(2) == 'i'
+                && line.charAt(3) == 'n' /*
+                                          * && line.charAt(4) == 'e'
+                                          */)
-            line.charAt(1) == 'w' && line.charAt(2) == 'a'
-                && line.charAt(3) == 'r'
+            (line.charAt(1) == 'w' && line.charAt(2) == 'a'
+                && line.charAt(3) == 'r' /*
+                                          * && line.charAt(4) == 'n' && line.charAt(5) == 'i' &&
+                                          * line.charAt(6) == 'n' && line.charAt(7) == 'g'
+                                          */)
-            line.charAt(1) == 'd' && line.charAt(2) == 'e'
-                && line.charAt(3) == 'b'
+            (line.charAt(1) == 'd' && line.charAt(2) == 'e'
+                && line.charAt(3) == 'b'/*
+                                         * && line.charAt(4) == 'u' && line.charAt(5) == 'g'
+                                         */)
-            line.charAt(1) == 't' && line.charAt(2) == 'r'
-                && line.charAt(3) == 'a'
+            (line.charAt(1) == 't' && line.charAt(2) == 'r'
+                && line.charAt(3) == 'a' /*
+                                          * && line.charAt(4) == 'c' && line.charAt(5) == 'e'
+                                          */)
-            line.charAt(1) == 's' && line.charAt(2) == 'e'
-                && line.charAt(3) == 'v'
+            (line.charAt(1) == 's' && line.charAt(2) == 'e'
+                && line.charAt(3) == 'v' /*
+                                          * && line.charAt(4) == 'e' && line.charAt(5) == 'r' &&
+                                          * line.charAt(6) == 'e'
+                                          */)
-            line.charAt(1) == 'c' && line.charAt(2) == 'o'
-                && line.charAt(3) == 'n'
+            (line.charAt(1) == 'c' && line.charAt(2) == 'o'
+                && line.charAt(3) == 'n' /*
+                                          * && line.charAt(4) == 'f' && line.charAt(5) == 'i' &&
+                                          * line.charAt(6) == 'g'
+                                          */)
-            line.charAt(1) == 'e' && line.charAt(2) == 'r'
-                && line.charAt(3) == 'r'
+            (line.charAt(1) == 'e' && line.charAt(2) == 'r'
+                && line.charAt(3) == 'r' /*
+                                          * && line.charAt(4) == 'o' && line.charAt(5) == 'r'
+                                          */)
-            line.charAt(1) == 's' && line.charAt(2) == 'e' && line.charAt(3) == 'c'
-                && line.charAt(4) == 'u' && line.charAt(5) == 'r') {
+            (line.charAt(1) == 's' && line.charAt(2) == 'e' && line.charAt(3) == 'c'
+                && line.charAt(4) == 'u' && line.charAt(5) == 'r')) {
-      if (suppressBlanks || firstEntry) {
+      if (this.suppressBlanks || this.firstEntry) {
+          // System.out.println(this.logFileName + ": skipping line '" + lineStr + "'");
-          entry = new LogEntry(timestamp, sb.toString(), suppressBlanks);
+          entry = new LogEntry(timestamp, sb.toString(), this.suppressBlanks);
-        if (!firstEntry) {
+        if (!this.firstEntry) {
-          firstEntry = false;
+          this.firstEntry = false;
-        if (extLogFileName != null) {
-          sb.append(extLogFileName);
+        if (this.extLogFileName != null) {
+          sb.append(this.extLogFileName);
-          if (extLogFileName != null) {
-            sb.append(extLogFileName);
+          if (this.extLogFileName != null) {
+            sb.append(this.extLogFileName);
-        sb.append(whiteFileName);
+        sb.append(this.whiteFileName);
-      sb.insert(0, extLogFileName);
+      sb.insert(0, this.extLogFileName);
-    sb = null;
-    hasMoreEntries = false;
+    this.sb = null;
+    this.hasMoreEntries = false;
+  ////////////////////// Main Program ///////////////////////
+
-  public static void main(final String[] args) throws Exception {
+  public static void main(String[] args) throws Throwable {
+
+  ////////////////////// Inner Classes //////////////////////
+
-   * <code>String</code>. {@link DateFormat#parse(String) Parsing} it was too
+   * <code>String</code>. {@link java.text.DateFormat#parse(java.lang.String) Parsing} it was too
-    private final String timestamp;
+    private String timestamp;
-    private final String contents;
+    private String contents;
+    //////////////////// Constructors ////////////////////
+
-    public LogEntry(final String timestamp, final String contents) {
+    public LogEntry(String timestamp, String contents) {
-    public LogEntry(final String timestamp, final String contents, final boolean suppressBlanks) {
+    public LogEntry(String timestamp, String contents, boolean suppressBlanks) {
+    //////////////////// Instance Methods ////////////////////
+
-      return timestamp;
+      return this.timestamp;
-      return contents;
+      return this.contents;
-    public void writeTo(final PrintWriter pw) {
-      pw.println(contents);
-      if (!suppressBlanks) {
+    public void writeTo(PrintWriter pw) {
+      pw.println(this.contents);
+      if (!this.suppressBlanks) {
-
-    public LastLogEntry(final String timestamp, final String contents) {
+    public LastLogEntry(String timestamp, String contents) {
+

UPD43 MOV44 UPD66 UPD66 UPD42 INS44 MOV44 INS40 INS40 INS22 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 INS22 INS22 INS22 INS22 INS52 INS42 INS22 INS22 MOV42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS40 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS43 INS52 INS42 INS52 INS42 INS36 INS52 INS42 INS52 INS42 MOV27 INS52 INS42 INS52 INS42 INS52 INS42 INS40 MOV27 INS36 INS36 INS36 INS36 INS36 INS36 INS36 INS36 INS36 INS22 INS22 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS22 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL27 DEL27 DEL27 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL83 DEL83 DEL83 DEL83 DEL42 DEL44 DEL83 DEL83 DEL83 DEL42 DEL42 DEL83 DEL42 DEL42 DEL83 DEL83