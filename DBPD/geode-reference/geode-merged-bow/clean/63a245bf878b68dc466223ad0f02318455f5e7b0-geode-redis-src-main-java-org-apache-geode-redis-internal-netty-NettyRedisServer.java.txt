GEODE-8310:  remove numThreads redis sys prop (#5311)

* removed the numThreads redis sys prop
* also simplified initialization of the NettyRedisServer to have
  all final instance fields and do all its initialization in the constructor.
-import io.netty.channel.ServerChannel;
-  /**
-   * System property name that can be used to set the number of threads to be used by the
-   * GeodeRedisServer
-   */
-  private static final String NUM_THREADS_SYS_PROP_NAME = "gemfireredis.numthreads";
-
-  private static final int connectTimeoutMillis = 1000;
-
-  /**
-   * The number of threads that will work on handling requests
-   */
-  private final int numWorkerThreads;
-
-  /**
-   * The number of threads that will work socket selectors
-   */
-  private final int numSelectorThreads;
-
-  /**
-   * whether to use old single thread per connection model for worker group
-   */
-  private final boolean singleThreadPerConnection;
+  private static final int CONNECT_TIMEOUT_MILLIS = 1000;
-
-
-  private Channel serverChannel;
-  private EventLoopGroup bossGroup;
-  private EventLoopGroup workerGroup;
-  private EventLoopGroup subscriberGroup;
-
+  private final EventLoopGroup selectorGroup;
+  private final EventLoopGroup workerGroup;
+  private final EventLoopGroup subscriberGroup;
-  private int serverPort;
+  private final Channel serverChannel;
+  private final int serverPort;
-    serverPort = port;
-    numWorkerThreads = setNumWorkerThreads();
-    singleThreadPerConnection = numWorkerThreads == 0;
-    numSelectorThreads = 1;
+    selectorGroup = createEventLoopGroup("Selector", false, 1);
+    workerGroup = createEventLoopGroup("Worker", true, 0);
+    subscriberGroup = createEventLoopGroup("Subscriber", true, 0);
+    serverChannel = createChannel(port);
+    serverPort = getActualPort();
+    logStartupMessage();
-
-  public void start() {
-    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();
+  private Channel createChannel(int port) {
-    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)
+    serverBootstrap.group(selectorGroup, workerGroup).channel(NioServerSocketChannel.class)
-        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)
+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, CONNECT_TIMEOUT_MILLIS)
-    serverChannel = createBoundChannel(serverBootstrap);
+    return createBoundChannel(serverBootstrap, port);
-    Future<?> bossFuture = bossGroup.shutdownGracefully();
+    Future<?> bossFuture = selectorGroup.shutdownGracefully();
-  private Class<? extends ServerChannel> initializeEventLoopGroups() {
-    ThreadFactory selectorThreadFactory =
-        new LoggingThreadFactory("GeodeRedisServer-SelectorThread-", false);
-
-    ThreadFactory workerThreadFactory =
-        new LoggingThreadFactory("GeodeRedisServer-WorkerThread-", true);
-
-    if (singleThreadPerConnection) {
-      return initializeOioGroups(selectorThreadFactory, workerThreadFactory);
-    } else {
-      ThreadFactory subscriberThreadFactory =
-          new LoggingThreadFactory("GeodeRedisServer-SubscriberThread-", true);
-      bossGroup = new NioEventLoopGroup(numSelectorThreads, selectorThreadFactory);
-      workerGroup = new NioEventLoopGroup(numWorkerThreads, workerThreadFactory);
-      subscriberGroup = new NioEventLoopGroup(numWorkerThreads, subscriberThreadFactory);
-      return NioServerSocketChannel.class;
-    }
-  }
-
-  @SuppressWarnings("deprecation")
-  private Class<? extends ServerChannel> initializeOioGroups(ThreadFactory selectorThreadFactory,
-      ThreadFactory workerThreadFactory) {
-    bossGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, selectorThreadFactory);
-    workerGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, workerThreadFactory);
-    return io.netty.channel.socket.oio.OioServerSocketChannel.class;
-  }
-
-  private Channel createBoundChannel(ServerBootstrap serverBootstrap) {
-    int port = serverPort == RANDOM_PORT_INDICATOR ? 0 : serverPort;
+  private Channel createBoundChannel(ServerBootstrap serverBootstrap, int requestedPort) {
+    int port = requestedPort == RANDOM_PORT_INDICATOR ? 0 : requestedPort;
-    Channel channel = channelFuture.channel();
-    serverPort = ((InetSocketAddress) channel.localAddress()).getPort();
-    logStartupMessage();
-    return channel;
+    return channelFuture.channel();
+  }
+
+  private int getActualPort() {
+    return ((InetSocketAddress) serverChannel.localAddress()).getPort();
-    String logMessage = "GeodeRedisServer started {" + bindAddress + ":" + serverPort
-        + "}, Selector threads: " + numSelectorThreads;
-    if (singleThreadPerConnection) {
-      logMessage += ", One worker thread per connection";
-    } else {
-      logMessage += ", Worker threads: " + numWorkerThreads;
-    }
+    String logMessage = "GeodeRedisServer started {" + bindAddress + ":" + serverPort + "}";
-
-  /**
-   * Helper method to set the number of worker threads
-   *
-   * @return If the System property {@value #NUM_THREADS_SYS_PROP_NAME} is set then that number is
-   *         used, otherwise {@link Runtime#availableProcessors()}.
-   */
-  private static int setNumWorkerThreads() {
-    String prop = System.getProperty(NUM_THREADS_SYS_PROP_NAME);
-    int defaultThreads = Runtime.getRuntime().availableProcessors();
-    if (prop == null || prop.isEmpty()) {
-      return defaultThreads;
-    }
-    int threads;
-    try {
-      threads = Integer.parseInt(prop);
-    } catch (NumberFormatException e) {
-      return defaultThreads;
-    }
-    return threads;
+  private static EventLoopGroup createEventLoopGroup(String name, boolean isDaemon, int nThreads) {
+    String fullName = "GeodeRedisServer-" + name + "Thread-";
+    ThreadFactory threadFactory = new LoggingThreadFactory(fullName, isDaemon);
+    return new NioEventLoopGroup(nThreads, threadFactory);

MOV23 MOV23 MOV23 MOV31 INS31 INS43 INS83 INS83 INS83 MOV59 MOV21 INS83 MOV43 INS42 INS44 MOV8 INS44 INS39 INS42 INS8 MOV43 INS42 INS44 INS44 INS44 INS8 UPD42 INS42 UPD42 INS21 MOV21 INS39 INS42 INS41 INS39 INS42 MOV41 MOV43 INS42 INS39 INS42 INS39 INS42 INS60 MOV60 MOV41 INS7 INS32 MOV32 MOV43 MOV43 INS59 MOV43 MOV14 UPD42 INS32 UPD42 UPD42 INS32 INS42 INS32 INS42 INS32 MOV42 MOV42 INS42 INS36 UPD42 INS42 INS27 MOV42 UPD42 UPD42 UPD42 INS42 INS45 INS9 INS34 UPD42 INS45 INS9 INS34 INS42 INS45 INS9 INS34 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS11 UPD45 INS45 INS42 INS45 INS42 INS42 UPD42 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 MOV57 UPD42 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL39 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL59 DEL83 DEL39 DEL23 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL39 DEL42 DEL31 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL40 DEL43 DEL40 DEL42 DEL14 DEL7 DEL21 DEL42 DEL40 DEL43 DEL40 DEL42 DEL14 DEL7 DEL21 DEL40 DEL43 DEL57 DEL41 DEL8 DEL31 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL9 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL9 DEL14 DEL59 DEL60 DEL42 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL7 DEL21 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL66 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL45 DEL9 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8