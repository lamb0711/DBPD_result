GEODE-7585: Create API for starting a locator in the membership package

Creating a new MembershipLocator and MembershipLocatorBuilder that are used to
create the membership locator. These classes encapsulate the TcpServer,
PrimaryHandler, and GMSLocator that were previously held by InternalLocator.

Getting rid of some intermdiate classes that wrapped the GMSLocator -
NetLocator and GMSLocatorAdapter.

Refactoring the restart logic out of PrimaryHandler. There is now a separate
RestartHandler, and a separate collection that tracks RestartHandlers. Removing
RestartableTcpHandler.

Removing TcpServerFactory.

-package org.apache.geode.distributed.internal;
+package org.apache.geode.distributed.internal.membership.gms.locator;
-import org.apache.geode.cache.GemFireCache;
-import org.apache.geode.cache.client.internal.locator.wan.LocatorMembershipListener;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.membership.gms.locator.PeerLocatorRequest;
-public class PrimaryHandler implements RestartableTcpHandler {
+public class PrimaryHandler implements TcpHandler {
-  private final LocatorMembershipListener locatorListener;
-  private final InternalLocator internalLocator;
+  private final TcpHandler fallbackHandler;
-  private volatile Map<Class, RestartableTcpHandler> handlerMapping = new HashMap<>();
-  private volatile Set<RestartableTcpHandler> allHandlers = new HashSet<>();
+  private volatile Map<Class<?>, TcpHandler> handlerMapping = new HashMap<>();
+  private volatile Set<TcpHandler> allHandlers = new HashSet<>();
+  private int locatorWaitTime;
-  PrimaryHandler(InternalLocator locator, LocatorMembershipListener listener) {
-    locatorListener = listener;
-    internalLocator = locator;
+  PrimaryHandler(TcpHandler fallbackHandler, int locatorWaitTime) {
+    this.locatorWaitTime = locatorWaitTime;
+    this.fallbackHandler = fallbackHandler;
+    allHandlers.add(fallbackHandler);
-    if (locatorListener != null) {
-      // This is deferred until now as the initial requested port could have been 0
-      locatorListener.setPort(internalLocator.getPort());
-    }
-  public void restarting(DistributedSystem ds, GemFireCache cache,
-      InternalConfigurationPersistenceService sharedConfig) {
-    if (ds != null) {
-      for (RestartableTcpHandler handler : allHandlers) {
-        handler.restarting(ds, cache, sharedConfig);
-      }
-    }
-  }
-
-  @Override
-  public void restartCompleted(DistributedSystem ds) {
-    if (ds != null) {
-      for (RestartableTcpHandler handler : allHandlers) {
-        handler.restartCompleted(ds);
-      }
-    }
-  }
-
-  @Override
-      if (locatorListener != null) {
-        return locatorListener.handleRequest(request);
+      if (fallbackHandler != null) {
+        return fallbackHandler.processRequest(request);
-        int locatorWaitTime = internalLocator.getConfig().getLocatorWaitTime();
+        int locatorWaitTime = this.locatorWaitTime;
-    try {
-      for (TcpHandler handler : allHandlers) {
+    for (TcpHandler handler : allHandlers) {
+      try {
+      } catch (Throwable e) {
+        logger.error("Caught exception shutting down handler", e);
-    } finally {
-      internalLocator.handleShutdown();
-  synchronized boolean isHandled(Class clazz) {
+  synchronized boolean isHandled(Class<?> clazz) {
-  public synchronized void addHandler(Class clazz, RestartableTcpHandler handler) {
-    Map<Class, RestartableTcpHandler> tmpHandlerMapping = new HashMap<>(handlerMapping);
-    Set<RestartableTcpHandler> tmpAllHandlers = new HashSet<>(allHandlers);
+  public synchronized void addHandler(Class<?> clazz, TcpHandler handler) {
+    Map<Class<?>, TcpHandler> tmpHandlerMapping = new HashMap<>(handlerMapping);
+    Set<TcpHandler> tmpAllHandlers = new HashSet<>(allHandlers);

MOV23 UPD40 UPD43 INS31 UPD42 UPD43 UPD74 UPD74 INS39 MOV42 MOV44 MOV44 INS8 MOV8 UPD42 UPD42 INS74 UPD43 UPD43 UPD42 UPD43 UPD42 INS39 INS42 MOV21 MOV21 MOV21 INS74 INS74 UPD43 MOV43 INS76 UPD42 UPD42 UPD42 INS8 MOV43 INS76 MOV43 INS76 UPD42 UPD74 UPD74 INS22 UPD42 INS22 UPD42 UPD42 UPD42 UPD42 INS54 INS74 UPD43 UPD43 INS52 INS42 INS52 INS42 MOV8 INS12 MOV43 INS76 UPD42 UPD42 UPD42 INS44 INS8 INS43 INS42 INS21 UPD42 UPD42 INS22 INS42 INS32 INS52 INS42 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8