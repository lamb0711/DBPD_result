Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Type-safe enumeration for {@link org.apache.geode.admin.Alert
- * Alert} level.
+ * Type-safe enumeration for {@link org.apache.geode.admin.Alert Alert} level.
- * @since GemFire     3.5
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
+ * @since GemFire 3.5
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
-    
-  public static final AlertLevel WARNING =
-    new AlertLevel(Alert.WARNING, "WARNING");
-  public static final AlertLevel ERROR = 
-    new AlertLevel(Alert.ERROR, "ERROR");
-  public static final AlertLevel SEVERE =
-    new AlertLevel(Alert.SEVERE, "SEVERE");
-  
-  public static final AlertLevel OFF =
-    new AlertLevel(Alert.OFF, "OFF");
+
+  public static final AlertLevel WARNING = new AlertLevel(Alert.WARNING, "WARNING");
+  public static final AlertLevel ERROR = new AlertLevel(Alert.ERROR, "ERROR");
+  public static final AlertLevel SEVERE = new AlertLevel(Alert.SEVERE, "SEVERE");
+
+  public static final AlertLevel OFF = new AlertLevel(Alert.OFF, "OFF");
-  
+
-  
+
-  
-  private static final AlertLevel[] VALUES =
-    { WARNING, ERROR, SEVERE, OFF };
+
+  private static final AlertLevel[] VALUES = {WARNING, ERROR, SEVERE, OFF};
-    return VALUES[ordinal];  // Canonicalize
+    return VALUES[ordinal]; // Canonicalize
-  
+
-    
+
-   * @throws IllegalArgumentException
-   *         If there is no alert level with the given
-   *         <code>severity</code> 
+   * @throws IllegalArgumentException If there is no alert level with the given
+   *         <code>severity</code>
-    case Alert.WARNING:
-      return AlertLevel.WARNING;
-    case Alert.ERROR:
-      return AlertLevel.ERROR;
-    case Alert.SEVERE:
-      return AlertLevel.SEVERE;
-    case Alert.OFF:
-      return AlertLevel.OFF;
-    default:
-      throw new IllegalArgumentException(LocalizedStrings.AlertLevel_UNKNOWN_ALERT_SEVERITY_0.toLocalizedString(Integer.valueOf(severity)));
+      case Alert.WARNING:
+        return AlertLevel.WARNING;
+      case Alert.ERROR:
+        return AlertLevel.ERROR;
+      case Alert.SEVERE:
+        return AlertLevel.SEVERE;
+      case Alert.OFF:
+        return AlertLevel.OFF;
+      default:
+        throw new IllegalArgumentException(LocalizedStrings.AlertLevel_UNKNOWN_ALERT_SEVERITY_0
+            .toLocalizedString(Integer.valueOf(severity)));
-   * @throws IllegalArgumentException
-   *         If there is no alert level named <code>name</code>
+   * @throws IllegalArgumentException If there is no alert level named <code>name</code>
-    throw new IllegalArgumentException(LocalizedStrings.AlertLevel_THERE_IS_NO_ALERT_LEVEL_0.toLocalizedString(name));
+    throw new IllegalArgumentException(
+        LocalizedStrings.AlertLevel_THERE_IS_NO_ALERT_LEVEL_0.toLocalizedString(name));
-  
+
-  
-  /** 
+
+  /**
-	/**
-	 * Indicates whether some other object is "equal to" this one.
-	 *
-	 * @param  other  the reference object with which to compare.
-	 * @return true if this object is the same as the obj argument;
-	 *         false otherwise.
-	 */
+  /**
+   * Indicates whether some other object is "equal to" this one.
+   *
+   * @param other the reference object with which to compare.
+   * @return true if this object is the same as the obj argument; false otherwise.
+   */
-	public boolean equals(Object other) {
-		if (other == this) return true;
-		if (other == null) return false;
-		if (!(other instanceof AlertLevel)) return  false;
-		final AlertLevel that = (AlertLevel) other;
+  public boolean equals(Object other) {
+    if (other == this)
+      return true;
+    if (other == null)
+      return false;
+    if (!(other instanceof AlertLevel))
+      return false;
+    final AlertLevel that = (AlertLevel) other;
-		if (this.severity != that.severity) return false;
-		if (this.name != null &&
-	  		!this.name.equals(that.name)) return false;
+    if (this.severity != that.severity)
+      return false;
+    if (this.name != null && !this.name.equals(that.name))
+      return false;
-		return true;
-	}
+    return true;
+  }
-	/**
-	 * Returns a hash code for the object. This method is supported for the
-	 * benefit of hashtables such as those provided by java.util.Hashtable.
-	 *
-	 * @return the integer 0 if description is null; otherwise a unique integer.
-	 */
+  /**
+   * Returns a hash code for the object. This method is supported for the benefit of hashtables such
+   * as those provided by java.util.Hashtable.
+   *
+   * @return the integer 0 if description is null; otherwise a unique integer.
+   */
-	public int hashCode() {
-		int result = 17;
-		final int mult = 37;
+  public int hashCode() {
+    int result = 17;
+    final int mult = 37;
-		result = mult * result + this.severity;
-		result = mult * result + 
-			(this.name == null ? 0 : this.name.hashCode());
+    result = mult * result + this.severity;
+    result = mult * result + (this.name == null ? 0 : this.name.hashCode());
-		return result;
-	}
+    return result;
+  }

UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66