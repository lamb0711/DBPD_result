Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.logging.log4j.ConfigLocator;
-  private static final String DEFAULT_CONFIG = "/com/gemstone/gemfire/internal/logging/log4j/log4j2-default.xml";
+  public static final String DEFAULT_CONFIG = "/com/gemstone/gemfire/internal/logging/log4j/log4j2-default.xml";
+  public static final String CLI_CONFIG = "/com/gemstone/gemfire/internal/logging/log4j/log4j2-cli.xml";
+  /** Set with info for Banner to log anytime LogService is reinitialized */
+  private static String configFileInformation;
+  
-  
+    // fix bug #52175
+    final URL configInClasspath = ConfigLocator.findConfigInClasspath();
+    if (configInClasspath != null ) {
+      // Log4J 2 will find the configuration file in classpath so do nothing
+      configFileInformation = "Using log4j configuration found in classpath: '" + configInClasspath.toString() + "'";
+      StatusLogger.getLogger().info(configFileInformation);
+      return;
+    }
+    
-        StatusLogger.getLogger().info("Using log4j configuration file '{}'", configFileName);
+        configFileInformation = "Using log4j configuration file specified by " + ConfigurationFactory.CONFIGURATION_FILE_PROPERTY + ": '" + configFileName + "'";
+        StatusLogger.getLogger().info(configFileInformation);
-        StatusLogger.getLogger().info("Using log4j configuration file '{}'", configUrl.getPath());
-        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, configUrl.toString());
+        String configFilePropertyValue = configUrl.toString();
+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, configFilePropertyValue);
+        configFileInformation = "Using log4j configuration file specified by " + ConfigurationFactory.CONFIGURATION_FILE_PROPERTY + ": '" + configFilePropertyValue + "'";
+        StatusLogger.getLogger().info(configFileInformation);
-      System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, 
-          new File(filePath).toURI().toString());
-      StatusLogger.getLogger().debug("Using log4j configuration file '{}'", value);
+      String configFilePropertyValue = new File(filePath).toURI().toString();
+      System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, configFilePropertyValue);
+      configFileInformation = "Setting " + ConfigurationFactory.CONFIGURATION_FILE_PROPERTY + " to specify log4j configuration file in current directory: '" + configFilePropertyValue + "'";
+      StatusLogger.getLogger().debug(configFileInformation);
-    StatusLogger.getLogger().info("Using log4j configuration file '{}'", configUrl.getPath());
-    System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, configUrl.toString());
+    String configFilePropertyValue = configUrl.toString();
+    System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, configFilePropertyValue);
+    configFileInformation = "Setting " + ConfigurationFactory.CONFIGURATION_FILE_PROPERTY + " to specify log4j configuration file: '" + configFilePropertyValue + "'";
+    StatusLogger.getLogger().info(configFileInformation);
+  
+  public static String getConfigInformation() {
+    return configFileInformation;
+  }
-    for (final String fileExtension : new String[] { "-test.json", "-test.jsn", "-test.xml", "-test.yaml", "-test.yml", ".json", ".jsn", ".xml", ".yaml", ".yml" }) {
-      final File log4jConfigFile = new File(System.getProperty("user.dir"), "log4j2" + fileExtension);
-      if (log4jConfigFile.isFile()) {
-        return log4jConfigFile;
-      }
-    }
-
-    return null;
+    return ConfigLocator.findConfigInWorkingDirectory();

INS26 INS40 INS23 INS23 INS31 INS31 UPD83 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS42 INS8 MOV29 INS83 INS83 MOV43 INS42 INS8 MOV42 INS42 INS45 INS65 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS60 INS21 INS21 INS41 MOV41 INS66 INS83 INS43 INS59 INS27 MOV8 INS43 INS59 INS7 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS21 MOV21 INS42 INS42 MOV32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS8 MOV43 INS59 INS7 INS45 INS40 INS45 INS42 INS45 INS42 INS42 INS42 INS27 UPD42 INS21 MOV21 INS41 INS60 INS21 MOV21 INS42 INS42 MOV32 INS42 INS42 INS27 UPD42 UPD42 MOV42 INS45 INS32 INS45 INS7 INS43 INS59 INS7 INS45 INS40 INS45 INS42 INS45 INS42 INS42 INS42 INS27 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS42 INS27 UPD42 MOV42 INS45 INS40 INS45 INS42 INS45 INS45 INS40 INS45 INS42 INS45 DEL45 DEL45 DEL45 DEL42 DEL32 DEL45 DEL42 DEL32 DEL42 DEL83 DEL83 DEL42 DEL83 DEL42 DEL44 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41 DEL8 DEL31