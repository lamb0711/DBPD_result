Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Factory for creating instances of {@link DiskStore}.
- * To get an instance of this factory call {@link Cache#createDiskStoreFactory}.
- * If all you want to do is find an existing disk store see {@link Cache#findDiskStore}.
+ * Factory for creating instances of {@link DiskStore}. To get an instance of this factory call
+ * {@link Cache#createDiskStoreFactory}. If all you want to do is find an existing disk store see
+ * {@link Cache#findDiskStore}.
- * To use this factory configure it with the <code>set</code> methods and then
- * call {@link #create} to produce a disk store instance.
+ * To use this factory configure it with the <code>set</code> methods and then call {@link #create}
+ * to produce a disk store instance.
-public interface DiskStoreFactory
-{
+public interface DiskStoreFactory {
-   * The name of the default disk store is "DEFAULT".
-   * This name can be used to redefine the default disk store.
-   * Regions that have not had their disk-store-name set will
-   * use this disk store.
+   * The name of the default disk store is "DEFAULT". This name can be used to redefine the default
+   * disk store. Regions that have not had their disk-store-name set will use this disk store.
-   * The default setting for auto compaction. 
-   * <p>Current value: <code>true</code>.
+   * The default setting for auto compaction.
+   * <p>
+   * Current value: <code>true</code>.
-  
+
-   * <p>Current value: <code>50</code>.
+   * <p>
+   * Current value: <code>50</code>.
-   * <p>Current value: <code>false</code>.
+   * <p>
+   * Current value: <code>false</code>.
-   * <p>Current value: <code>1024</code> which is one gigabyte.
+   * <p>
+   * Current value: <code>1024</code> which is one gigabyte.
-  public static final long DEFAULT_MAX_OPLOG_SIZE = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "DEFAULT_MAX_OPLOG_SIZE", 1024L)
-      .longValue(); // 1024 == 1 GB; // sys prop used by dunit and junit
+  public static final long DEFAULT_MAX_OPLOG_SIZE =
+      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "DEFAULT_MAX_OPLOG_SIZE", 1024L).longValue(); // 1024
+                                                                                                     // ==
+                                                                                                     // 1
+                                                                                                     // GB;
+                                                                                                     // //
+                                                                                                     // sys
+                                                                                                     // prop
+                                                                                                     // used
+                                                                                                     // by
+                                                                                                     // dunit
+                                                                                                     // and
+                                                                                                     // junit
-   * <p>Current value: <code>1000</code>.
+   * <p>
+   * Current value: <code>1000</code>.
-  
+
-   * <p>Current value: <code>32768</code>.
+   * <p>
+   * Current value: <code>32768</code>.
-   * <p>Current value: <code>0</code>.
+   * <p>
+   * Current value: <code>0</code>.
-  
+
-   * <p>Current value: <code>current directory</code>.
+   * <p>
+   * Current value: <code>current directory</code>.
-  public static final File[] DEFAULT_DISK_DIRS = new File[] { new File(".") };
-  
+  public static final File[] DEFAULT_DISK_DIRS = new File[] {new File(".")};
+
-   * <p>Current value: <code>2,147,483,647</code> which is two petabytes.
+   * <p>
+   * Current value: <code>2,147,483,647</code> which is two petabytes.
-  
+
-   * <p>Current value: {@link #DEFAULT_DISK_DIR_SIZE} which is two petabytes each.
+   * <p>
+   * Current value: {@link #DEFAULT_DISK_DIR_SIZE} which is two petabytes each.
-   * <p>Current value: <code>90</code>.
+   * <p>
+   * Current value: <code>90</code>.
-  
+
-   * <p>Current value: <code>99</code>.
+   * <p>
+   * Current value: <code>99</code>.
-  
-  /** 
-   * Set to <code>true</code> to cause the disk files to be automatically compacted.
-   * Set to <code>false</code> if no compaction is needed or manual compaction will be used.
+
+  /**
+   * Set to <code>true</code> to cause the disk files to be automatically compacted. Set to
+   * <code>false</code> if no compaction is needed or manual compaction will be used.
+   * 
-   * Sets the threshold at which an oplog will become compactable. Until it
-   * reaches this threshold the oplog will not be compacted. The threshold is a
-   * percentage in the range 0..100. When the amount of live data in an oplog
-   * becomes less than this percentage then when a compaction is done this
-   * garbage will be cleaned up freeing up disk space. Garbage is created by
-   * entry destroys, entry updates, and region destroys.
+   * Sets the threshold at which an oplog will become compactable. Until it reaches this threshold
+   * the oplog will not be compacted. The threshold is a percentage in the range 0..100. When the
+   * amount of live data in an oplog becomes less than this percentage then when a compaction is
+   * done this garbage will be cleaned up freeing up disk space. Garbage is created by entry
+   * destroys, entry updates, and region destroys.
-   * @param compactionThreshold
-   *          percentage of remaining live data in the oplog at which an oplog
-   *          is compactable
+   * @param compactionThreshold percentage of remaining live data in the oplog at which an oplog is
+   *        compactable
-  /** 
-   * Set to <code>true</code> to allow {@link DiskStore#forceCompaction} to be called
-   * on regions using this disk store.
+  /**
+   * Set to <code>true</code> to allow {@link DiskStore#forceCompaction} to be called on regions
+   * using this disk store.
-  /** 
-   * Sets the maximum size in megabytes a single oplog (operation log) is allowed to be.
-   * When an oplog is created this amount of file space will be immediately reserved.
+  /**
+   * Sets the maximum size in megabytes a single oplog (operation log) is allowed to be. When an
+   * oplog is created this amount of file space will be immediately reserved.
-   * Sets the number of milliseconds that can elapse before
-   * data written asynchronously is flushed to disk.
-   * <p>For how to configure a region to be asynchronous see: {@link AttributesFactory#setDiskSynchronous}.
+   * Sets the number of milliseconds that can elapse before data written asynchronously is flushed
+   * to disk.
+   * <p>
+   * For how to configure a region to be asynchronous see:
+   * {@link AttributesFactory#setDiskSynchronous}.
-   * @param timeInterval number of milliseconds that can elapse before
-   * async data is flushed to disk.
+   * @param timeInterval number of milliseconds that can elapse before async data is flushed to
+   *        disk.
-   * Sets the maximum number of operations that can be asynchronously queued.
-   * Once this many pending async operations have been queued async ops will
-   * begin blocking until some of the queued ops have been flushed to disk.
+   * Sets the maximum number of operations that can be asynchronously queued. Once this many pending
+   * async operations have been queued async ops will begin blocking until some of the queued ops
+   * have been flushed to disk.
-   * @param queueSize
-   *          number of operations that can be asynchronously queued. If 0, the
-   *          queue will be unlimited.
+   * @param queueSize number of operations that can be asynchronously queued. If 0, the queue will
+   *        be unlimited.
-   * Sets the directories to which this disk store's data is written. If multiple
-   * directories are used, GemFire will attempt to distribute the data evenly
-   * amongst them.
-   * The size of each directory will be set to the default of {@link #DEFAULT_DISK_DIR_SIZE}.
+   * Sets the directories to which this disk store's data is written. If multiple directories are
+   * used, GemFire will attempt to distribute the data evenly amongst them. The size of each
+   * directory will be set to the default of {@link #DEFAULT_DISK_DIR_SIZE}.
-   * Sets the directories to which this disk store's data is written
-   * and also set the sizes in megabytes of each directory.
+   * Sets the directories to which this disk store's data is written and also set the sizes in
+   * megabytes of each directory.
-   * @throws IllegalArgumentException if length of the size array
-   * does not match to the length of the dir array
+   * @throws IllegalArgumentException if length of the size array does not match to the length of
+   *         the dir array
-  public DiskStoreFactory setDiskDirsAndSizes(File[] diskDirs,int[] diskDirSizes);
+  public DiskStoreFactory setDiskDirsAndSizes(File[] diskDirs, int[] diskDirSizes);
-   * Sets the warning threshold for disk usage as a percentage of the total disk
-   * volume.
+   * Sets the warning threshold for disk usage as a percentage of the total disk volume.
-   * Sets the critical threshold for disk usage as a percentage of the total disk
-   * volume.
+   * Sets the critical threshold for disk usage as a percentage of the total disk volume.
-   * @throws IllegalStateException if a disk store with the given name already exists
-   * and its configuration is not consistent with this factory.
+   * @throws IllegalStateException if a disk store with the given name already exists and its
+   *         configuration is not consistent with this factory.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66