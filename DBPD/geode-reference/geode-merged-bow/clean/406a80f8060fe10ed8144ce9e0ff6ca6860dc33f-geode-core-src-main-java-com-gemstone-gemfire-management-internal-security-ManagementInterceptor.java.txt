GEODE-17: Initial integration work

- Fix failing tests

-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.ACCESS_DENIED_MESSAGE;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.GET_ATTRIBUTE;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.GET_ATTRIBUTES;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.GET_PREFIX;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.PASSWORD;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.PROCESS_COMMAND;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.SET_ATTRIBUTE;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.SET_ATTRIBUTES;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.SET_PREFIX;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.USER_NAME;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.WRONGE_CREDENTIALS_MESSAGE;
-
-import java.lang.management.ManagementFactory;
-import java.lang.reflect.Method;
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.Principal;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map.Entry;
-import java.util.Properties;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.distributed.DistributedSystem;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.ClassLoadUtil;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.lang.StringUtils;
+import com.gemstone.gemfire.internal.logging.InternalLogWriter;
+import com.gemstone.gemfire.management.internal.ManagementConstants;
+import com.gemstone.gemfire.security.AccessControl;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
+import com.gemstone.gemfire.security.Authenticator;
+import org.apache.logging.log4j.Logger;
+import java.lang.management.ManagementFactory;
+import java.lang.reflect.Method;
+import java.security.AccessControlContext;
+import java.security.AccessController;
+import java.security.Principal;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.GemFireConfigException;
-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.distributed.DistributedSystem;
-import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.internal.ClassLoadUtil;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-import com.gemstone.gemfire.internal.lang.StringUtils;
-import com.gemstone.gemfire.internal.logging.InternalLogWriter;
-import com.gemstone.gemfire.management.internal.ManagementConstants;
-import com.gemstone.gemfire.security.AccessControl;
-import com.gemstone.gemfire.security.AuthenticationFailedException;
-import com.gemstone.gemfire.security.Authenticator;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
-      com.gemstone.gemfire.management.internal.security.AccessControl acc = new com.gemstone.gemfire.management.internal.security.AccessControl(this);
+      AccessControlMBean acc = new AccessControlMBean(this);
-      for(int i=0;i<list.size();i++) {
+      for (int i = 0; i < list.size(); i++) {
-        setterContext = buildContext(name,setter,null);
+        setterContext = buildContext(name, setter, null);
-          logger.debug("Name=" + name + " methodName=" + methodName + " result=" + authorized + " principal="
-              + principal.getName());
+          logger.debug(
+              "Name=" + name + " methodName=" + methodName + " result=" + authorized + " principal=" + principal.getName());
-		if(!authorized)
+        if (!authorized) {
-        else
+        } else {
+        }
-        logger.debug("Name=" + name + " methodName=" + methodName + " result=" + authorized + " principal="
-            + principal.getName());
+        logger.debug(
+            "Name=" + name + " methodName=" + methodName + " result=" + authorized + " principal=" + principal.getName());
-      if (!authorized)
-        throw new SecurityException(ACCESS_DENIED_MESSAGE);
+      if (!authorized) throw new SecurityException(ACCESS_DENIED_MESSAGE);
-	}
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD43 INS42 UPD43 INS8 INS8 INS42 MOV53 MOV21 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL40