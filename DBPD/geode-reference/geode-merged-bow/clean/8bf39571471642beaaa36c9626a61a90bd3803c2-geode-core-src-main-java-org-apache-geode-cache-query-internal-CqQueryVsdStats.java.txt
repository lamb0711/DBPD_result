Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class CqQueryVsdStats
-{
+public class CqQueryVsdStats {
-  
+
-  
+
-  
+
-  
+
-  
+
-    _type = f.createType(statName, statName, new StatisticDescriptor[] {
-        f.createLongCounter(CQ_INITIAL_RESULTS_TIME, "The total amount of time, in nanoseconds, it took to do this initial query and send the results to the client.",
-        "nanoseconds"),
+    _type = f.createType(statName, statName,
+        new StatisticDescriptor[] {f.createLongCounter(CQ_INITIAL_RESULTS_TIME,
+            "The total amount of time, in nanoseconds, it took to do this initial query and send the results to the client.",
+            "nanoseconds"),
-        f.createLongCounter(CQ_INSERTS, "Total number of inserts done on this cq.",
-            "operations"),
+            f.createLongCounter(CQ_INSERTS, "Total number of inserts done on this cq.",
+                "operations"),
-        f.createLongCounter(CQ_UPDATES,
-            "Total number of updates done on this cq.", "operations"),
+            f.createLongCounter(CQ_UPDATES, "Total number of updates done on this cq.",
+                "operations"),
-        f.createLongCounter(CQ_DELETES,
-            "Total number of deletes done on this cq.", "operations"),
+            f.createLongCounter(CQ_DELETES, "Total number of deletes done on this cq.",
+                "operations"),
-        f.createLongCounter(CQ_EVENTS,
-            "Total number of inserts, updates, and deletes done on this cq.", "operations"),
-            
-        f.createLongGauge(NUM_HA_QUEUED_CQ_EVENTS,
-            "Number of events in this cq.", "events"),
-            
-        f.createLongCounter(CQ_LISTENER_INVOCATIONS,
-            "Total number of CqListener invocations.", "operations"),
-        
-        f.createLongGauge(QUEUED_CQ_LISTENER_EVENTS,
-            "Number of events queued while CQ registration is in progress. This is not the main cq queue but a temporary internal one used while the cq is starting up.", "events"),
-    });
+            f.createLongCounter(CQ_EVENTS,
+                "Total number of inserts, updates, and deletes done on this cq.", "operations"),
+
+            f.createLongGauge(NUM_HA_QUEUED_CQ_EVENTS, "Number of events in this cq.", "events"),
+
+            f.createLongCounter(CQ_LISTENER_INVOCATIONS, "Total number of CqListener invocations.",
+                "operations"),
+
+            f.createLongGauge(QUEUED_CQ_LISTENER_EVENTS,
+                "Number of events queued while CQ registration is in progress. This is not the main cq queue but a temporary internal one used while the cq is starting up.",
+                "events"),});
-   * @param factory
-   *          The <code>StatisticsFactory</code> which creates the
-   *          <code>Statistics</code> instance
-   * @param name
-   *          The name of the <code>Statistics</code>
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
+   * @param name The name of the <code>Statistics</code>
-    this._stats = factory.createAtomicStatistics(_type, "CqQueryStats-"
-        + name);
+    this._stats = factory.createAtomicStatistics(_type, "CqQueryStats-" + name);
-  public void close()
-  {
+  public void close() {
-  
+
-  public long getCqInitialResultsTime()
-  {
+  public long getCqInitialResultsTime() {
-  
+
-  public void setCqInitialResultsTime(long time)
-  {
+  public void setCqInitialResultsTime(long time) {
-  public long getNumInserts()
-  {
+  public long getNumInserts() {
-  public void incNumInserts()
-  {
+  public void incNumInserts() {
-  public long getNumUpdates()
-  {
+  public long getNumUpdates() {
-  public void incNumUpdates()
-  {
+  public void incNumUpdates() {
-  
+
-  public long getNumDeletes()
-  {
+  public long getNumDeletes() {
-  public void incNumDeletes()
-  {
+  public void incNumDeletes() {
-  public long getNumEvents()
-  {
+  public long getNumEvents() {
-  public void incNumEvents()
-  {
+  public void incNumEvents() {
-  
+
-  public long getNumHAQueuedEvents()
-  {
+  public long getNumHAQueuedEvents() {
-  public void incNumHAQueuedEvents(long incAmount)
-  {
+  public void incNumHAQueuedEvents(long incAmount) {
-  
+
-  public long getNumCqListenerInvocations()
-  {
+  public long getNumCqListenerInvocations() {
-  public long getQueuedCqListenerEvents()
-  {
+  public long getQueuedCqListenerEvents() {
-  public void incNumCqListenerInvocations()
-  {
+  public void incNumCqListenerInvocations() {
-  
-  public void incQueuedCqListenerEvents()
-  {
+
+  public void incQueuedCqListenerEvents() {
-  
-  public void decQueuedCqListenerEvents()
-  {
+
+  public void decQueuedCqListenerEvents() {
-  
+
+   * 
-  
+
+   * 
-          return;
+        return;

UPD66 UPD66 UPD66