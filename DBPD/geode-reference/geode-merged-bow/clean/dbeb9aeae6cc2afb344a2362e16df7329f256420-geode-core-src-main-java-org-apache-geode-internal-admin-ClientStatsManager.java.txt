Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-   * @param pool
-   *                Connection pool which may be used for admin region.
+   * @param pool Connection pool which may be used for admin region.
-      InternalDistributedSystem ds = (InternalDistributedSystem)
-          currentCache.getDistributedSystem();
-      ServerRegionProxy regionProxy = new ServerRegionProxy(ClientHealthMonitoringRegion.ADMIN_REGION_NAME, pool);
-      
+      InternalDistributedSystem ds =
+          (InternalDistributedSystem) currentCache.getDistributedSystem();
+      ServerRegionProxy regionProxy =
+          new ServerRegionProxy(ClientHealthMonitoringRegion.ADMIN_REGION_NAME, pool);
+
-      @Released EntryEventImpl event = new EntryEventImpl((Object)null);
+      @Released
+      EntryEventImpl event = new EntryEventImpl((Object) null);
-      event.setEventId(eventId);
-      regionProxy.putForMetaRegion(ds.getMemberId(), stats, null, event, null, true);
+        event.setEventId(eventId);
+        regionProxy.putForMetaRegion(ds.getMemberId(), stats, null, event, null, true);
-    }
-    catch (DistributedSystemDisconnectedException e) {
+    } catch (DistributedSystemDisconnectedException e) {
-    }
-    catch (CacheWriterException cwx) {
+    } catch (CacheWriterException cwx) {
-      logger.warning(LocalizedStrings.ClientStatsManager_FAILED_TO_SEND_CLIENT_HEALTH_STATS_TO_CACHESERVER, cwx);
-    }
-    catch (Exception e) {
+      logger.warning(
+          LocalizedStrings.ClientStatsManager_FAILED_TO_SEND_CLIENT_HEALTH_STATS_TO_CACHESERVER,
+          cwx);
+    } catch (Exception e) {
-  
+
-   
+
-    InternalDistributedSystem ds = (InternalDistributedSystem)currentCache.getDistributedSystem();
+    InternalDistributedSystem ds = (InternalDistributedSystem) currentCache.getDistributedSystem();
-    
+
-    
-    if(restart) {
-      if(logger.infoEnabled()) {
-        logger.info(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_INTIALIZING_THE_STATISTICS);
+
+    if (restart) {
+      if (logger.infoEnabled()) {
+        logger.info(
+            LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_INTIALIZING_THE_STATISTICS);
-      
-    if(cachePerfStats == null) {
+
+    if (cachePerfStats == null) {
-      if(type != null) {
+      if (type != null) {
-        if(statistics != null && statistics.length > 0) {
+        if (statistics != null && statistics.length > 0) {
-      
-    if(vmStats == null) {
+
+    if (vmStats == null) {
-      if(type != null) {
+      if (type != null) {
-        if(statistics != null && statistics.length > 0) {
+        if (statistics != null && statistics.length > 0) {
-    
+
-    if(cachePerfStats == null && restart) {
-     logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE, "CachePerfStats");
+    if (cachePerfStats == null && restart) {
+      logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE,
+          "CachePerfStats");
-      
+
-    if(vmStats == null && restart) {
-     logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE, "VMStats");
+    if (vmStats == null && restart) {
+      logger.warning(LocalizedStrings.ClientStatsManager_CLIENTSTATSMANAGER_0_ARE_NOT_AVAILABLE,
+          "VMStats");
-   
+
-   * This method queries the client stats & prepares the client health stats
-   * object to be published to the server.
+   * This method queries the client stats & prepares the client health stats object to be published
+   * to the server.
-  private static ClientHealthStats getClientHealthStats(GemFireCacheImpl currentCache, PoolImpl pool) {
+  private static ClientHealthStats getClientHealthStats(GemFireCacheImpl currentCache,
+      PoolImpl pool) {
-      if(cachePerfStats != null) {
+      if (cachePerfStats != null) {
-      if(vmStats != null) {
+      if (vmStats != null) {
-        threads =vmStats.getInt("threads");
+        threads = vmStats.getInt("threads");
-        String poolStatsStr = "MinConnections=" + pool.getMinConnections() + ";MaxConnections=" + pool.getMaxConnections() 
-            + ";Redudancy=" + pool.getSubscriptionRedundancy() + ";CQS=" + pool.getQueryService().getCqs().length  ;
-        logger.info(LocalizedStrings.DEBUG,"ClientHealthStats for poolname " + poolName  + " poolStatsStr=" + poolStatsStr);
+        String poolStatsStr = "MinConnections=" + pool.getMinConnections() + ";MaxConnections="
+            + pool.getMaxConnections() + ";Redudancy=" + pool.getSubscriptionRedundancy() + ";CQS="
+            + pool.getQueryService().getCqs().length;
+        logger.info(LocalizedStrings.DEBUG,
+            "ClientHealthStats for poolname " + poolName + " poolStatsStr=" + poolStatsStr);
-       newPoolStats.put(poolName, poolStatsStr);
+        newPoolStats.put(poolName, poolStatsStr);
-       Region clientHealthMonitoringRegion = ClientHealthMonitoringRegion.getInstance(currentCache);
+        Region clientHealthMonitoringRegion =
+            ClientHealthMonitoringRegion.getInstance(currentCache);
-       if (clientHealthMonitoringRegion != null) {
-         InternalDistributedSystem ds = (InternalDistributedSystem) currentCache.getDistributedSystem();            
-         ClientHealthStats oldStats = (ClientHealthStats) clientHealthMonitoringRegion.get(ds.getMemberId());
-         logger.info(LocalizedStrings.DEBUG,"getClientHealthStats got oldStats  "  + oldStats);
-         if (oldStats != null) {              
-           Map<String, String> oldPoolStats = oldStats.getPoolStats();
-           logger.info(LocalizedStrings.DEBUG,"getClientHealthStats got oldPoolStats  "  + oldPoolStats);
-           if (oldPoolStats != null) {
-             Iterator<Entry<String, String>> it = oldPoolStats.entrySet().iterator();
-             while (it.hasNext()) {
-               Entry<String, String> entry = it.next();                  
-               if (!poolName.equals(entry.getKey())) {
-                 stats.getPoolStats().put(entry.getKey(), entry.getValue());
-               }
-             }
-           }
-         }
-       } 
+        if (clientHealthMonitoringRegion != null) {
+          InternalDistributedSystem ds =
+              (InternalDistributedSystem) currentCache.getDistributedSystem();
+          ClientHealthStats oldStats =
+              (ClientHealthStats) clientHealthMonitoringRegion.get(ds.getMemberId());
+          logger.info(LocalizedStrings.DEBUG, "getClientHealthStats got oldStats  " + oldStats);
+          if (oldStats != null) {
+            Map<String, String> oldPoolStats = oldStats.getPoolStats();
+            logger.info(LocalizedStrings.DEBUG,
+                "getClientHealthStats got oldPoolStats  " + oldPoolStats);
+            if (oldPoolStats != null) {
+              Iterator<Entry<String, String>> it = oldPoolStats.entrySet().iterator();
+              while (it.hasNext()) {
+                Entry<String, String> entry = it.next();
+                if (!poolName.equals(entry.getKey())) {
+                  stats.getPoolStats().put(entry.getKey(), entry.getValue());
+                }
+              }
+            }
+          }
+        }
-     } catch (Exception e) {
-         logger.fine("Exception in getting pool stats in  getClientHealthStats " + CliUtil.stackTraceAsString(e));
-     }      
+      } catch (Exception e) {
+        logger.fine("Exception in getting pool stats in  getClientHealthStats "
+            + CliUtil.stackTraceAsString(e));
+      }

UPD66 UPD66 UPD66