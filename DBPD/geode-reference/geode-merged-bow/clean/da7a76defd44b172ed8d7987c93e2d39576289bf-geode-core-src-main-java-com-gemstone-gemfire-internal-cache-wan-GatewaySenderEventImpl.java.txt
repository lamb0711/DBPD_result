Merge branch 'develop' into feature/GEODE-17-2

-import com.gemstone.gemfire.internal.offheap.ObjectChunk;
-import com.gemstone.gemfire.internal.offheap.ObjectChunkWithHeapForm;
+  private transient boolean serializedValueNotAvailable;
+
+  private static final int DEFAULT_SERIALIZED_VALUE_SIZE = -1;
+
+  private volatile int serializedValueSize = DEFAULT_SERIALIZED_VALUE_SIZE;
+
+      rawValue = this.substituteValue;
+    }
+    if (rawValue == null) {
+      result = this.substituteValue;
+      if (result == null) {
-      if (result instanceof ObjectChunk) {
+      if (result instanceof StoredObject && ((StoredObject) result).hasRefCount()) {
-          ObjectChunk ohref = (ObjectChunk) result;
+          StoredObject ohref = (StoredObject) result;
+      }
-   * This method is meant for internal use by the SimpleMemoryAllocatorImpl.
-   * Others should use getRawValue instead.
-   * @return if the result is an off-heap reference then callers must use it before this event is released.
-   */
-  @Unretained(OffHeapIdentifier.GATEWAY_SENDER_EVENT_IMPL_VALUE)
-  public Object getValueObject() {
-    return this.valueObj;
-  }
-
-  /**
-// TODO OFFHEAP MERGE: handle substituteValue here?
+        } else if (this.substituteValue != null) {
+          // If the substitute value is set, return it.
+          return this.substituteValue;
-// TODO OFFHEAP MERGE: handle substituteValue here?
+    if (v == null) {
+      v = this.substituteValue;
+    }
+  public boolean isSerializedValueNotAvailable() {
+    return this.serializedValueNotAvailable;
+  }
+
+      if (this.substituteValue != null) {
+        // The substitute value is set. Serialize it
+        isSerializingValue.set(Boolean.TRUE);
+        result = EntryEventImpl.serialize(this.substituteValue);
+        isSerializingValue.set(Boolean.FALSE);
+        return result;
+      }
+            isSerializingValue.set(Boolean.TRUE);
+            isSerializingValue.set(Boolean.FALSE);
+              this.serializedValueNotAvailable = true;
-      if (so instanceof ObjectChunkWithHeapForm) {
-        so = ((ObjectChunkWithHeapForm) so).getChunkWithoutHeapForm(); // fixes 51999
-      }
+      so = so.getStoredObjectWithoutHeapForm(); // fixes 51999
-        // The substituteValue represents null. Set the value to null.
+        // The substituteValue represents null. Set the value and substituteValue to null.
+        this.substituteValue = null;
-        // The substituteValue is an object. Serialize it.
-        isSerializingValue.set(Boolean.TRUE);
-        this.value = CacheServerHelper.serialize(this.substituteValue);
-        isSerializingValue.set(Boolean.FALSE);
-        event.setCachedSerializedNewValue(this.value);
+        // The substituteValue is an object. Leave it as is.
+    int localSerializedValueSize = this.serializedValueSize;
+    if (localSerializedValueSize != DEFAULT_SERIALIZED_VALUE_SIZE) {
+      return localSerializedValueSize;
+    }
-      return ((StoredObject) vo).getSizeInBytes();
+      localSerializedValueSize = ((StoredObject) vo).getSizeInBytes();
-      return CachedDeserializableFactory.calcMemSize(getSerializedValue());
+      if (this.substituteValue != null) {
+        localSerializedValueSize = sizeOf(this.substituteValue);
+      } else {
+        localSerializedValueSize = CachedDeserializableFactory.calcMemSize(getSerializedValue());
+      }
+    this.serializedValueSize = localSerializedValueSize;
+    return localSerializedValueSize;
-    if (this.value != null) {
+    if (this.value != null || this.substituteValue != null) {
-      if (v instanceof ObjectChunk) {
+      if (v instanceof StoredObject && ((StoredObject) v).hasRefCount()) {

INS23 INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS42 MOV8 INS42 INS42 INS38 INS42 INS42 INS25 INS25 INS25 INS60 INS25 INS21 INS41 INS34 INS27 INS8 INS27 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS8 INS7 INS42 INS27 INS42 INS33 INS21 INS42 INS33 INS21 MOV25 INS42 INS33 INS21 UPD42 INS25 INS42 INS22 INS42 INS42 INS41 INS21 INS25 INS22 INS42 MOV27 INS27 INS7 INS7 INS7 INS27 INS8 INS52 INS42 INS42 INS7 INS27 INS8 MOV8 INS52 INS42 INS22 INS33 INS27 INS42 INS22 INS42 INS22 INS42 INS22 INS22 INS33 INS21 INS21 INS21 INS41 MOV21 INS42 MOV32 INS22 INS33 INS21 INS21 INS52 INS42 INS62 INS32 INS52 INS42 INS52 INS42 INS27 INS25 INS52 INS42 INS52 INS42 INS32 INS7 INS32 INS42 INS21 INS52 INS42 INS7 INS7 MOV42 UPD43 MOV43 INS36 INS42 INS62 INS32 INS27 INS8 MOV8 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS7 INS42 INS32 INS42 MOV32 UPD42 INS11 MOV42 UPD43 MOV43 INS36 INS42 INS22 INS33 INS41 INS42 INS42 MOV22 INS42 UPD42 INS22 INS33 INS42 INS22 INS43 INS42 UPD42 INS11 INS52 INS42 INS22 MOV21 MOV21 INS52 INS42 INS52 INS42 INS42 INS43 INS42 UPD43 INS52 INS42 INS42 UPD42 UPD43 INS21 UPD42 INS7 INS22 INS9 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL62 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL40 DEL79 DEL83 DEL42 DEL43 DEL42 DEL31 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL41 DEL41 DEL62