Merge branch 'release/1.5.0'

+import java.util.Iterator;
+import org.apache.lucene.store.AlreadyClosedException;
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.internal.cache.BucketNotFoundException;
+import org.apache.geode.internal.cache.BucketRegion;
+import org.apache.geode.internal.cache.PrimaryBucketException;
+    // We must always register the index (this is where IndexAlreadyExistsException is detected)
+    // If the region does not yet exist, install LuceneRegionListener and return
-
-    LuceneRegionListener regionListener = new LuceneRegionListener(this, cache, indexName,
-        regionPath, fields, analyzer, fieldAnalyzers, serializer);
+      LuceneRegionListener regionListener = new LuceneRegionListener(this, cache, indexName,
+          regionPath, fields, analyzer, fieldAnalyzers, serializer);
-
+    // do work normally handled by LuceneRegionListener (if region already exists)
-
+
+    createLuceneIndexOnDataRegion(region, luceneIndex);
+  }
+
+  protected boolean createLuceneIndexOnDataRegion(final PartitionedRegion userRegion,
+      final LuceneIndexImpl luceneIndex) {
+    try {
+      AbstractPartitionedRepositoryManager repositoryManager =
+          (AbstractPartitionedRepositoryManager) luceneIndex.getRepositoryManager();
+      if (userRegion.getDataStore() == null) {
+        return true;
+      }
+      Set<Integer> primaryBucketIds = userRegion.getDataStore().getAllLocalPrimaryBucketIds();
+      Iterator primaryBucketIterator = primaryBucketIds.iterator();
+      while (primaryBucketIterator.hasNext()) {
+        int primaryBucketId = (Integer) primaryBucketIterator.next();
+        try {
+          BucketRegion userBucket = userRegion.getDataStore().getLocalBucketById(primaryBucketId);
+          if (!userBucket.isEmpty()) {
+            /**
+             *
+             * Calling getRepository will in turn call computeRepository
+             * which is responsible for indexing the user region.
+             *
+             **/
+            repositoryManager.getRepository(primaryBucketId);
+          }
+        } catch (BucketNotFoundException | PrimaryBucketException e) {
+          logger.debug("Bucket ID : " + primaryBucketId
+              + " not found while saving to lucene index: " + e.getMessage(), e);
+        }
+      }
+      return true;
+    } catch (RegionDestroyedException e) {
+      logger.debug("Bucket not found while saving to lucene index: " + e.getMessage(), e);
+      return false;
+    } catch (CacheClosedException e) {
+      logger.debug("Unable to save to lucene index, cache has been closed", e);
+      return false;
+    } catch (AlreadyClosedException e) {
+      logger.debug("Unable to commit, the lucene index is already closed", e);
+      return false;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS54 INS32 INS42 INS42 INS8 INS12 INS12 INS12 MOV60 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS61 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS59 INS27 INS8 INS74 INS59 INS43 INS59 INS32 INS8 INS9 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS41 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS54 INS42 INS32 INS9 INS42 INS32 INS9 INS42 INS32 INS9 INS43 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS39 INS59 INS8 INS12 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS60 INS25 INS44 INS8 INS45 INS32 INS43 INS32 INS43 INS59 INS38 INS8 INS84 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS43 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42