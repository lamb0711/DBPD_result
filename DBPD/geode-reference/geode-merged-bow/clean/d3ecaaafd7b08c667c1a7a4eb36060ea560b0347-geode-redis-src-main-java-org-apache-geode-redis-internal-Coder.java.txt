GEODE-7778: Add PUBLISH, SUBSCRIBE and UNSUBSCRIBE Redis commands (#4682)

Redis PUBLISH/SUBSCRIBE is described here: https://redis.io/topics/pubsub

This implementation introduces 3 new command classes to support this:
`SubscribeExecutor`, `PublishExecutor` and `UnsubscribeExecutor`. At a high
level, the flow is as follows:
- A Redis client issues a SUBSCRIBE command. The server maintains a list of
  subscribed clients and associate channel(s) in the `Subscribers` class. A
  subscribed `Client` uses Netty's notion of a `uniqueID` to identify itself
  uniquely.
- When a client PUBLISHes a message on a channel, the publish 'event' uses an
  `onMembers` function call to distribute the channel/message to all members.
  Each member then publishes the message to any `Client`s registered on the
  channel.

Points to note:
Redis pub/sub is not HA. i.e. A subscriber only receives those messages
published after it has successfully subscribed. If the client is disconnected
and reconnects, it will not receive messages published during the disconnect
window.

When clients subscribe, an open connection is established to the server and the
client blocks waiting for messages.

This implementation does not require messages to be published on the same
server to which the clients, executing subscribe, are connected since the
published message is distributed to all servers.


Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Prasath Durairaj <vdurairaj@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
- *
- *
-      return response;
+      writeStringResponse(response, toWrite);
+      writeStringResponse(response, toWrite);
+      writeStringResponse(response, toWrite);
+      writeStringResponse(response, toWrite);
+    } else if (v instanceof Integer) {
+      response = alloc.buffer(15);
+      response.writeByte(INTEGER_ID);
+      response.writeBytes(intToBytes((Integer) v));
+      response.writeBytes(CRLFar);
+    } else if (v instanceof Long) {
+      response = alloc.buffer(15);
+      response.writeByte(INTEGER_ID);
+      response.writeBytes(intToBytes(((Long) v).intValue()));
+      response.writeBytes(CRLFar);
+    return response;
+  }
+
+  private static void writeStringResponse(ByteBuf response, byte[] toWrite) {
-
-    return response;
-  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, Collection<?> items)
+  public static ByteBuf getArrayResponse(ByteBufAllocator alloc, Collection<?> items)
-          tmp = getBulkStringArrayResponse(alloc, nextItems);
+          tmp = getArrayResponse(alloc, nextItems);
-    if (list.isEmpty())
+    if (list.isEmpty()) {
+    }
-    for (int i = 0; i < length; i++)
+    for (int i = 0; i < length; i++) {
+    }
-    if (bytes == null)
+    if (bytes == null) {
+    }
-    if (d == Double.POSITIVE_INFINITY)
+    if (d == Double.POSITIVE_INFINITY) {
-    else if (d == Double.NEGATIVE_INFINITY)
+    }
+    if (d == Double.NEGATIVE_INFINITY) {
+    }
+
-    if (string == null || string.equals(""))
+    if (string == null || string.equals("")) {
+    }
-    if (d.equalsIgnoreCase(P_INF))
+    if (d.equalsIgnoreCase(P_INF)) {
-    else if (d.equalsIgnoreCase(N_INF))
+    } else if (d.equalsIgnoreCase(N_INF)) {
-    else
+    } else {
+    }

INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS43 INS42 INS5 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 MOV25 INS42 INS39 INS85 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV41 MOV21 MOV41 MOV41 MOV41 MOV41 MOV41 INS8 INS8 INS21 MOV41 MOV41 INS32 INS21 INS42 INS42 INS42 INS32 INS21 INS25 INS42 INS42 INS42 INS32 INS21 INS62 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS43 INS21 INS21 INS21 INS21 INS62 INS8 MOV8 INS42 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS42 INS43 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS32 INS32 UPD42 INS42 INS42 INS34 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL42 DEL41