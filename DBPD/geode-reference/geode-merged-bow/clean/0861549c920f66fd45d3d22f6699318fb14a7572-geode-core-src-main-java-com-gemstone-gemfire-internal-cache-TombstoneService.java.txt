refactored currentTombstone code

-     * The sweeper thread's current tombstone
+     * The sweeper thread's current tombstone.
+     * Only set by the run() thread while holding the currentTombstoneLock.
+     * Read by other threads while holding the currentTombstoneLock.
-        final Set<DistributedRegion> regionsAffected = new HashSet<DistributedRegion>();
-        long removalSize = 0;
-        expiredTombstones = new HashSet<Tombstone>();
-        if (expired.size() == 0) {
+        if (expired.isEmpty()) {
+        expiredTombstones = new HashSet<Tombstone>();
+        final Set<DistributedRegion> regionsAffected = new HashSet<DistributedRegion>();
+        long removalSize = 0;
+      Tombstone myTombstone = null;
-      currentTombstone = null;
-          if (currentTombstone == null) {
-            try {
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = tombstones.remove();
-              } finally {
-                currentTombstoneLock.unlock();
+          if (myTombstone == null) {
+            myTombstone = setCurrentToNextTombstone();
+          }
+          long sleepTime = 0;
+          boolean expireMyTombstone = false;
+          if (myTombstone == null) {
+            sleepTime = expiryTime;
+          } else {
+            long msTillMyTombstoneExpires = myTombstone.getVersionTimeStamp() + expiryTime - now;
+            if (forceExpirationCount > 0) {
+              if (msTillMyTombstoneExpires > 0 && msTillMyTombstoneExpires <= minimumRetentionMs) {
+                sleepTime = msTillMyTombstoneExpires;
+              } else {
+                forceExpirationCount--;
+                expireMyTombstone = true;
-              if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
-                logger.trace(LogMarker.TOMBSTONE, "current tombstone is {}", currentTombstone);
-              }
-            } catch (NoSuchElementException e) {
-              // expected
-              if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
-                logger.trace(LogMarker.TOMBSTONE, "queue is empty - will sleep");
-              }
-              forceExpirationCount = 0;
+            } else if (msTillMyTombstoneExpires > 0) {
+              sleepTime = msTillMyTombstoneExpires;
+            } else {
+              expireMyTombstone = true;
-          long sleepTime;
-          if (currentTombstone == null) {
-            sleepTime = expiryTime;
-          } else if (currentTombstone.getVersionTimeStamp()+expiryTime > now && (forceExpirationCount <= 0 || (currentTombstone.getVersionTimeStamp() + expiryTime - now) <= minimumRetentionMs)) {
-            sleepTime = currentTombstone.getVersionTimeStamp()+expiryTime - now;
-          } else {
-            if (forceExpirationCount > 0) {
-              forceExpirationCount--;
-            }
-            sleepTime = 0;
+          if (expireMyTombstone) {
-                  logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", currentTombstone);
+                  logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", myTombstone);
-                expiredTombstones.add(currentTombstone);
+                expiredTombstones.add(myTombstone);
-                  logger.trace(LogMarker.TOMBSTONE, "removing expired tombstone {}", currentTombstone);
+                  logger.trace(LogMarker.TOMBSTONE, "removing expired tombstone {}", myTombstone);
-                queueSize.addAndGet(-currentTombstone.getSize());
-                currentTombstone.region.getRegionMap().removeTombstone(currentTombstone.entry, currentTombstone, false, true);
+                queueSize.addAndGet(-myTombstone.getSize());
+                myTombstone.region.getRegionMap().removeTombstone(myTombstone.entry, myTombstone, false, true);
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = null;
-              } finally {
-                currentTombstoneLock.unlock();
-              }
+              myTombstone = null;
+              clearCurrentTombstone();
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = null;
-              } finally {
-                currentTombstoneLock.unlock();
-              }
+              myTombstone = null;
+              clearCurrentTombstone();
-                    if (test == currentTombstone) {
-                      currentTombstoneLock.lock();
-                      try {
-                        currentTombstone = null;
-                      } finally {
-                        currentTombstoneLock.unlock();
-                      }
+                    if (test == myTombstone) {
+                      myTombstone = null;
+                      clearCurrentTombstone();
-                  } else if (batchMode && test != currentTombstone && (test.getVersionTimeStamp()+expiryTime) <= now) {
+                  } else if (batchMode && test != myTombstone && (test.getVersionTimeStamp()+expiryTime) <= now) {
-                      logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", currentTombstone);
+                      logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", test);
-                    if (test == currentTombstone) {
-                      currentTombstoneLock.lock();
-                      try {
-                        currentTombstone = null;
-                      } finally {
-                        currentTombstoneLock.unlock();
-                      }
+                    if (test == myTombstone) {
+                      myTombstone = null;
+                      clearCurrentTombstone();
+
+    private void clearCurrentTombstone() {
+      currentTombstoneLock.lock();
+      currentTombstone = null;
+      currentTombstoneLock.unlock();
+    }
+
+    /**
+     * Returns the new currentTombstone taken from the tombstones queue; null if no next tombstone
+     */
+    private Tombstone setCurrentToNextTombstone() {
+      Tombstone result;
+      currentTombstoneLock.lock();
+      try {
+        result = tombstones.poll();
+        if (result != null) {
+          if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
+            logger.trace(LogMarker.TOMBSTONE, "current tombstone is {}", result);
+          }
+          currentTombstone = result;
+        } else {
+          if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
+            logger.trace(LogMarker.TOMBSTONE, "queue is empty - will sleep");
+          }
+          forceExpirationCount = 0;
+        }
+      } finally {
+        currentTombstoneLock.unlock();
+      }
+      return result;
+    }

INS31 INS31 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS60 MOV21 MOV21 INS21 INS65 INS42 INS60 MOV21 INS54 INS41 UPD66 INS66 INS66 INS43 INS59 INS32 INS66 INS43 INS59 INS8 MOV8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS21 INS25 MOV60 MOV60 MOV21 INS7 INS27 INS8 MOV8 INS60 INS25 INS25 INS42 INS32 INS42 INS33 INS25 INS21 INS32 INS8 INS39 INS59 MOV27 MOV8 INS8 INS42 INS8 INS42 INS42 MOV32 INS8 INS7 MOV42 UPD42 MOV42 UPD42 MOV21 INS34 INS42 INS9 UPD42 INS60 INS25 MOV54 INS21 INS42 INS42 INS39 INS59 MOV27 INS8 INS25 INS32 UPD42 INS42 INS27 INS25 INS27 INS8 INS8 MOV21 MOV21 INS42 INS42 INS40 INS45 INS42 UPD42 MOV27 MOV42 INS27 MOV8 MOV8 INS42 INS34 MOV21 INS21 MOV21 MOV21 UPD27 MOV27 MOV27 INS21 INS7 UPD42 UPD42 UPD42 UPD42 INS42 INS7 INS42 INS42 INS9 MOV32 MOV32 UPD42 UPD42 INS42 INS42 INS9 UPD42 UPD40 UPD42 UPD40 UPD42 UPD42 UPD42 INS8 UPD42 MOV21 MOV21 UPD42 MOV21 INS21 MOV21 UPD42 INS32 UPD42 UPD42 UPD42 INS42 UPD42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL40 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL27 DEL34 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL42 DEL8 DEL8 DEL54 DEL27 DEL27 DEL36 DEL27 DEL25 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL8 DEL54 DEL8