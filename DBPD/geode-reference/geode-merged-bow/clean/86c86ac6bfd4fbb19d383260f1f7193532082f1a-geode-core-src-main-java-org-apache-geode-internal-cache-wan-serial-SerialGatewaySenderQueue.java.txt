GEODE-5985 Possible integer overflow

We had a number of calculations that were taking place with ints instead
of longs.  I've modified them to, in most places, just add an L to the
constant multiplier.  In other places I had to change a variable type
from int to long.

There were a few places that were also assigning a long to an int
variable or an int to a byte variable.  In these I added bit AND
operators to reduce the chances of overflow.

IndexElemArray needed a lot of work due to its "size" instvar being
a byte.

This closes #2783

-import java.util.PriorityQueue;
-  private final boolean keyPutNoSync;
-  private final int maxPendingPuts;
-  private final PriorityQueue<Long> pendingPuts;
-
-    if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "gateway-queue-sync")) {
-      this.keyPutNoSync = false;
-      this.maxPendingPuts = 0;
-      this.pendingPuts = null;
-    } else {
-      this.keyPutNoSync = true;
-      this.maxPendingPuts = Math.max(this.batchSize, 100);
-      this.pendingPuts = new PriorityQueue<Long>(this.maxPendingPuts + 5);
-    }
-                this.wait(messageSyncInterval * 1000);
+                this.wait(messageSyncInterval * 1000L);

UPD34 DEL40 DEL26 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL34 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL34 DEL27 DEL14 DEL7 DEL21 DEL8 DEL25