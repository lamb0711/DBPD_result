Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The DiskStoreDetails class captures information about a particular disk store for a GemFire distributed system
- * member.  Each disk store for a member should be captured in separate instance of this class.
+ * The DiskStoreDetails class captures information about a particular disk store for a GemFire
+ * distributed system member. Each disk store for a member should be captured in separate instance
+ * of this class.
+ * 
-public class DiskStoreDetails implements Comparable<DiskStoreDetails>, MutableIdentifiable<UUID>, Iterable<DiskStoreDetails.DiskDirDetails>, Serializable {
+public class DiskStoreDetails implements Comparable<DiskStoreDetails>, MutableIdentifiable<UUID>,
+    Iterable<DiskStoreDetails.DiskDirDetails>, Serializable {
-  
-  private Set<AsyncEventQueueDetails> asyncEventQueueDetailsSet = new TreeSet<AsyncEventQueueDetails>();
+
+  private Set<AsyncEventQueueDetails> asyncEventQueueDetailsSet =
+      new TreeSet<AsyncEventQueueDetails>();
-  protected static void assertNotNull(final Object obj, final String message, final Object... args) {
+  protected static void assertNotNull(final Object obj, final String message,
+      final Object... args) {
-    return (obj1 == null && obj2 == null ? 0 : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
+    return (obj1 == null && obj2 == null ? 0
+        : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
-  public DiskStoreDetails(final UUID id, final String name, final String memberId, final String memberName) {
+  public DiskStoreDetails(final UUID id, final String name, final String memberId,
+      final String memberName) {
-    assertNotNull(memberId, "The id of the member to which the disk store (%1$s) belongs cannot be null!", name);
+    assertNotNull(memberId,
+        "The id of the member to which the disk store (%1$s) belongs cannot be null!", name);
-  public String getOfflineAsString(final String online, final String offline, final String nullValue) {
+  public String getOfflineAsString(final String online, final String offline,
+      final String nullValue) {
-  
+
-  
+
-  
+
-    assertNotNull(asyncEventQueueDetails, "Details concerning Asynchronous Event Queues that use this disk store ($1%s) cannot be null!", getName());
+    assertNotNull(asyncEventQueueDetails,
+        "Details concerning Asynchronous Event Queues that use this disk store ($1%s) cannot be null!",
+        getName());
-    assertNotNull(cacheServerDetails, "Details concerning Cache Servers that use this disk store (%1$s) cannot be null!", getName());
+    assertNotNull(cacheServerDetails,
+        "Details concerning Cache Servers that use this disk store (%1$s) cannot be null!",
+        getName());
-    assertNotNull(diskDirDetails, "Details for the disk store's (%1$s) directory information cannot be null!", getName());
+    assertNotNull(diskDirDetails,
+        "Details for the disk store's (%1$s) directory information cannot be null!", getName());
-    assertNotNull(gatewayDetails, "Details concerning Gateways that use this disk store (%1$s) cannot be null!", getName());
+    assertNotNull(gatewayDetails,
+        "Details concerning Gateways that use this disk store (%1$s) cannot be null!", getName());
-    assertNotNull(regionDetails, "Details concerning Regions that use this disk store (%1$%s) cannot be null!", getName());
+    assertNotNull(regionDetails,
+        "Details concerning Regions that use this disk store (%1$%s) cannot be null!", getName());
-    comparisonValue = (comparisonValue != 0 ? comparisonValue : compare(getMemberId(), diskStoreDetails.getMemberId()));
-    return (comparisonValue != 0 ? comparisonValue : getName().compareTo(diskStoreDetails.getName()));
+    comparisonValue = (comparisonValue != 0 ? comparisonValue
+        : compare(getMemberId(), diskStoreDetails.getMemberId()));
+    return (comparisonValue != 0 ? comparisonValue
+        : getName().compareTo(diskStoreDetails.getName()));
-      && ObjectUtils.equals(getName(), that.getName())
-      && ObjectUtils.equals(getMemberId(), that.getMemberId());
+        && ObjectUtils.equals(getName(), that.getName())
+        && ObjectUtils.equals(getMemberId(), that.getMemberId());
-    buffer.append(", pdxSerializationMetaDataStored = ").append(getPdxSerializationMetaDataStored());
+    buffer.append(", pdxSerializationMetaDataStored = ")
+        .append(getPdxSerializationMetaDataStored());
-  public static class AsyncEventQueueDetails implements Comparable<AsyncEventQueueDetails>, Serializable {
+  public static class AsyncEventQueueDetails
+      implements Comparable<AsyncEventQueueDetails>, Serializable {
-      final int valueOfBindAddressComparison = getBindAddress().compareTo(cacheServerDetails.getBindAddress());
-      return (valueOfBindAddressComparison != 0 ? valueOfBindAddressComparison : (getPort() - cacheServerDetails.getPort()));
+      final int valueOfBindAddressComparison =
+          getBindAddress().compareTo(cacheServerDetails.getBindAddress());
+      return (valueOfBindAddressComparison != 0 ? valueOfBindAddressComparison
+          : (getPort() - cacheServerDetails.getPort()));
-        && ObjectUtils.equals(getPort(), that.getPort());
+          && ObjectUtils.equals(getPort(), that.getPort());
-      DiskStoreDetails.assertNotNull(absolutePath, "The directory location of the disk store cannot be null!");
+      DiskStoreDetails.assertNotNull(absolutePath,
+          "The directory location of the disk store cannot be null!");

UPD66 UPD66 INS66