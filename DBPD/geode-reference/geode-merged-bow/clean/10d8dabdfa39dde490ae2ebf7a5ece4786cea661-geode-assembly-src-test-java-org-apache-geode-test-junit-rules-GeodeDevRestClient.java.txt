GEODE-5336: create integration tests to test region rest apis and conâ€¦ (#2071)

Co-authored-by: Biju Kunjummen <bkunjummen@pivotal.io>

* create integration tests to test region rest apis and concurrent requests
* consolidate code in GeodeRestClient and GeodeHttpClient and refactor tests to use HttpResponseAssert

-package org.apache.geode.rest.internal.web;
+package org.apache.geode.test.junit.rules;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.security.KeyStore;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-public class GeodeRestClient {
+/**
+ * this doesn't need to be a rule, since there is no setup and cleanup to do, just a utility
+ * to issue rest call. It's different from GeodeHttpClientRule in that it creates a httpClient
+ * in every rest call, while GeodeHttpClientRule uses one httpClient for the duration of the
+ * entire test.
+ */
+public class GeodeDevRestClient {
-  private int restPort = 0;
-  private String bindAddress = null;
-  private String protocol = "http";
-  private boolean useHttps = false;
-  private KeyStore keyStore;
+  private String bindAddress;
+  private int restPort;
+  private boolean useSsl;
+  private HttpHost host;
-  public GeodeRestClient(String bindAddress, int restPort) {
+  public GeodeDevRestClient(int restPort) {
+    this("localhost", restPort, false);
+  }
+
+  public GeodeDevRestClient(String bindAddress, int restPort) {
+    this(bindAddress, restPort, false);
+  }
+
+  public GeodeDevRestClient(String bindAddress, int restPort, boolean useSsl) {
+    this.useSsl = useSsl;
+    host = new HttpHost(bindAddress, restPort, useSsl ? "https" : "http");
-  public GeodeRestClient(String bindAddress, int restPort, boolean useHttps) {
-    if (useHttps) {
-      this.protocol = "https";
-      this.useHttps = true;
-    } else {
-      this.protocol = "http";
-      this.useHttps = false;
-    }
-    this.bindAddress = bindAddress;
-    this.restPort = restPort;
-  }
-
-  public static String getContentType(HttpResponse response) {
-    return response.getEntity().getContentType().getValue();
-  }
-
-  /**
-   * Retrieve the status code of the HttpResponse
-   *
-   * @param response The HttpResponse message received from the server
-   * @return a numeric value
-   */
-  public static int getCode(HttpResponse response) {
-    return response.getStatusLine().getStatusCode();
-  }
-
-  public static JSONObject getJsonObject(HttpResponse response) throws IOException, JSONException {
-    JSONTokener tokener = new JSONTokener(new InputStreamReader(response.getEntity().getContent()));
-    return new JSONObject(tokener);
-  }
-
-  public static JSONArray getJsonArray(HttpResponse response) throws IOException, JSONException {
-    JSONTokener tokener = new JSONTokener(new InputStreamReader(response.getEntity().getContent()));
-    return new JSONArray(tokener);
-  }
-
-  public HttpResponse doHEAD(String query, String username, String password) throws Exception {
+  public HttpResponse doHEAD(String query, String username, String password) {
-  public HttpResponse doPost(String query, String username, String password, String body)
-      throws Exception {
+  public HttpResponse doPost(String query, String username, String password, String body) {
-  public HttpResponse doPut(String query, String username, String password, String body)
-      throws Exception {
+  public HttpResponse doPut(String query, String username, String password, String body) {
-  public HttpResponse doGet(String uri, String username, String password) throws Exception {
+  public HttpResponse doGet(String uri, String username, String password) {
-  public HttpResponse doGetRequest(String url) throws Exception {
-    HttpGet getRequest = new HttpGet(url);
-    return doRequest(getRequest, null, null);
-  }
-
-  public HttpResponse doDelete(String uri, String username, String password) throws Exception {
+  public HttpResponse doDelete(String uri, String username, String password) {
-  public HttpResponse doRequest(HttpRequestBase request, String username, String password)
-      throws Exception {
-    HttpHost targetHost = new HttpHost(bindAddress, restPort, protocol);
+  public HttpResponseAssert doGetAndAssert(String uri) {
+    return new HttpResponseAssert("Get " + uri, doGet(uri, null, null));
+  }
+  public HttpResponseAssert doPutAndAssert(String uri, String body) {
+    return new HttpResponseAssert("Put " + uri, doPut(uri, null, null, body));
+  }
+
+  public HttpResponseAssert doPostAndAssert(String uri, String body) {
+    return new HttpResponseAssert("Post " + uri, doPost(uri, null, null, body));
+  }
+
+  public HttpResponseAssert doDeleteAndAssert(String uri) {
+    return new HttpResponseAssert("Delete " + uri, doDelete(uri, null, null));
+  }
+
+  /**
+   * this handles rest calls. each request creates a different httpClient object
+   */
+  public HttpResponse doRequest(HttpRequestBase request, String username, String password) {
-      credsProvider.setCredentials(new AuthScope(targetHost.getHostName(), targetHost.getPort()),
+      credsProvider.setCredentials(new AuthScope(bindAddress, restPort),
-    if (useHttps) {
-      SSLContext ctx = SSLContext.getInstance("TLS");
-      ctx.init(new KeyManager[0], new TrustManager[] {new DefaultTrustManager()},
-          new SecureRandom());
-      clientBuilder.setSSLContext(ctx);
-      clientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());
-    }
+    try {
+      if (useSsl) {
+        SSLContext ctx = SSLContext.getInstance("TLS");
+        ctx.init(new KeyManager[0], new TrustManager[] {new DefaultTrustManager()},
+            new SecureRandom());
+        clientBuilder.setSSLContext(ctx);
+        clientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());
+      }
-    return clientBuilder.build().execute(targetHost, request, clientContext);
+      return clientBuilder.build().execute(host, request, clientContext);
+    } catch (Exception e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
-  private static class DefaultTrustManager implements X509TrustManager {
+  public static class DefaultTrustManager implements X509TrustManager {

MOV31 MOV31 MOV31 MOV31 UPD40 INS29 UPD42 INS31 INS31 INS65 INS39 MOV43 MOV83 UPD42 MOV42 MOV44 INS8 INS83 INS42 MOV44 MOV44 INS8 UPD42 MOV44 MOV44 MOV8 INS43 INS42 UPD43 UPD42 INS44 UPD43 UPD42 INS44 UPD43 UPD42 INS29 UPD83 INS66 INS66 INS66 INS66 UPD42 UPD42 UPD42 UPD39 UPD42 INS17 INS17 INS39 INS42 INS21 INS21 INS42 UPD43 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS41 UPD42 UPD43 UPD42 INS43 INS42 INS41 UPD42 UPD42 INS41 INS65 INS54 INS45 INS42 INS9 INS42 INS42 INS9 INS7 INS7 UPD42 INS14 UPD42 UPD42 MOV42 INS14 UPD42 UPD42 MOV42 INS14 INS14 INS66 INS8 INS12 INS22 INS42 INS42 INS14 INS43 INS27 INS32 UPD43 MOV43 INS27 MOV32 UPD43 MOV43 INS27 MOV32 INS43 INS27 INS32 MOV25 INS41 INS44 INS8 INS52 INS42 MOV43 INS42 INS42 INS16 INS42 INS45 INS42 UPD42 MOV42 INS42 INS33 INS33 UPD42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS33 INS33 UPD42 UPD42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS33 INS33 UPD42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 MOV33 MOV33 UPD42 INS32 MOV43 INS42 INS53 INS42 INS45 INS45 MOV32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL33 DEL42 DEL43 DEL45 DEL9 DEL42 DEL43 DEL31 DEL83 DEL42 DEL42 DEL52 DEL42 DEL22 DEL45 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL45 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL32 DEL83 DEL43 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL83 DEL43 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41