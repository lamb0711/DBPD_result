Merge branch 'release/1.5.0'

-import java.io.File;
-import org.apache.geode.cache.persistence.PersistentID;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.backup.BackupManager;
-import org.apache.geode.internal.cache.eviction.EvictionStatistics;
-import org.apache.geode.management.DiskBackupResult;
-import org.apache.geode.management.ManagementException;
-  private DM dm;
+  private DistributionManager dm;
-    if (dm instanceof DistributionManager) {
-      DistributionManager distManager = (DistributionManager) system.getDistributionManager();
+    if (dm instanceof ClusterDistributionManager) {
+      ClusterDistributionManager distManager =
+          (ClusterDistributionManager) system.getDistributionManager();
-          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService());
+          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService(), cache);
-    LocalRegion l = (LocalRegion) region;
-    if (l.getEvictionController() != null) {
-      EvictionStatistics stats = l.getEvictionController().getStatistics();
-      if (stats != null) {
-        addLRUStats(stats);
-      }
-    }
-
-    DiskRegion dr = l.getDiskRegion();
+    InternalRegion internalRegion = (InternalRegion) region;
+    addLRUStats(internalRegion.getEvictionStatistics());
+    DiskRegion dr = internalRegion.getDiskRegion();
-  public void addLRUStats(EvictionStatistics lruStats) {
-    regionMonitor.addStatisticsToMonitor(lruStats.getStats());
+  public void addLRUStats(Statistics lruStats) {
+    if (lruStats != null) {
+      regionMonitor.addStatisticsToMonitor(lruStats);
+    }
-    if (l.getEvictionController() != null) {
-      EvictionStatistics stats = l.getEvictionController().getStatistics();
-      if (stats != null) {
-        removeLRUStats(stats);
-      }
-    }
+    removeLRUStats(l.getEvictionStatistics());
-  public void removeLRUStats(EvictionStatistics lruStats) {
-    regionMonitor.removeLRUStatistics(lruStats.getStats());
+  public void removeLRUStats(Statistics statistics) {
+    if (statistics != null) {
+      regionMonitor.removeLRUStatistics(statistics);
+    }
-   * backs up all the disk to the targeted directory
-   *
-   * @param targetDirPath path of the directory where back up is to be taken
-   * @return array of DiskBackup results which might get aggregated at Managing node Check the
-   *         validity of this mbean call. When does it make sense to backup a single member of a
-   *         gemfire system in isolation of the other members?
-   */
-  public DiskBackupResult[] backupMember(String targetDirPath) {
-    if (cache != null) {
-      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
-      for (DiskStore store : diskStores) {
-        store.flush();
-      }
-    }
-
-    DiskBackupResult[] diskBackUpResult = null;
-    File targetDir = new File(targetDirPath);
-
-    if (cache == null) {
-      return null;
-
-    } else {
-      try {
-        BackupManager manager =
-            cache.startBackup(cache.getInternalDistributedSystem().getDistributedMember());
-        boolean abort = true;
-        Set<PersistentID> existingDataStores;
-        Set<PersistentID> successfulDataStores;
-        try {
-          existingDataStores = manager.prepareForBackup();
-          abort = false;
-        } finally {
-          successfulDataStores = manager.doBackup(targetDir, null/* TODO rishi */, abort);
-        }
-        diskBackUpResult = new DiskBackupResult[existingDataStores.size()];
-        int j = 0;
-
-        for (PersistentID id : existingDataStores) {
-          if (successfulDataStores.contains(id)) {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), false);
-          } else {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), true);
-          }
-          j++;
-        }
-
-      } catch (IOException e) {
-        throw new ManagementException(e);
-      }
-    }
-    return diskBackUpResult;
-  }
-
-  /**
-    Set<LocalRegion> listOfAppRegions = cache.getApplicationRegions();
+    Set<InternalRegion> listOfAppRegions = cache.getApplicationRegions();
-      for (LocalRegion rg : listOfAppRegions) {
+      for (InternalRegion rg : listOfAppRegions) {
+
+  public String getReleaseVersion() {
+    return GemFireVersion.getGemFireVersion();
+  }

MOV26 MOV31 UPD40 UPD40 UPD43 INS8 INS8 MOV43 INS42 INS8 UPD42 INS21 UPD43 INS25 INS21 UPD43 UPD42 INS25 INS41 UPD43 INS32 UPD42 INS27 INS8 INS32 UPD42 INS27 INS8 UPD74 INS32 UPD43 UPD42 UPD42 INS42 INS32 INS42 INS33 MOV21 INS42 INS32 INS42 INS33 MOV21 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 UPD43 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD43 UPD43 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL33 DEL42 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL43 DEL32 DEL9 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL32 DEL9 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL37 DEL21 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8