Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final long	serialVersionUID	= 1L;
+  private static final long serialVersionUID = 1L;
-    
+
-        FixedPartitionAttributes fpa = (FixedPartitionAttributes)iters.next();
+        FixedPartitionAttributes fpa = (FixedPartitionAttributes) iters.next();
-    
+
-      nonDefaultAttributes.put(RegionAttributesNames.TOTAL_NUM_BUCKETS, Integer.toString(this.totalNumBuckets));
+      nonDefaultAttributes.put(RegionAttributesNames.TOTAL_NUM_BUCKETS,
+          Integer.toString(this.totalNumBuckets));
-    if (this.localMaxMemory != ((PartitionAttributesImpl) partitionAttributes).getLocalMaxMemoryDefault()) {
-      nonDefaultAttributes.put(RegionAttributesNames.LOCAL_MAX_MEMORY, Integer.toString(this.localMaxMemory));
+    if (this.localMaxMemory != ((PartitionAttributesImpl) partitionAttributes)
+        .getLocalMaxMemoryDefault()) {
+      nonDefaultAttributes.put(RegionAttributesNames.LOCAL_MAX_MEMORY,
+          Integer.toString(this.localMaxMemory));
-      nonDefaultAttributes.put(RegionAttributesNames.REDUNDANT_COPIES, Integer.toString(this.redundantCopies));
+      nonDefaultAttributes.put(RegionAttributesNames.REDUNDANT_COPIES,
+          Integer.toString(this.redundantCopies));
-    if (this.colocatedWith != null && !this.colocatedWith.equals(RegionAttributesDefault.COLOCATED_WITH)) {
+    if (this.colocatedWith != null
+        && !this.colocatedWith.equals(RegionAttributesDefault.COLOCATED_WITH)) {
-      nonDefaultAttributes.put(RegionAttributesNames.RECOVERY_DELAY, Long.toString(this.recoveryDelay));
+      nonDefaultAttributes.put(RegionAttributesNames.RECOVERY_DELAY,
+          Long.toString(this.recoveryDelay));
-      nonDefaultAttributes.put(RegionAttributesNames.STARTUP_RECOVERY_DELAY, Long.toString(this.startupRecoveryDelay));
+      nonDefaultAttributes.put(RegionAttributesNames.STARTUP_RECOVERY_DELAY,
+          Long.toString(this.startupRecoveryDelay));
-    if (this.partitionResolverName != null && !this.partitionResolverName.equals(RegionAttributesDefault.PARTITION_RESOLVER)) {
-      nonDefaultAttributes.put(RegionAttributesNames.PARTITION_RESOLVER, this.partitionResolverName);
+    if (this.partitionResolverName != null
+        && !this.partitionResolverName.equals(RegionAttributesDefault.PARTITION_RESOLVER)) {
+      nonDefaultAttributes.put(RegionAttributesNames.PARTITION_RESOLVER,
+          this.partitionResolverName);
-  public boolean equals (Object obj) {
+  public boolean equals(Object obj) {
-             && this.getLocalMaxMemory() == paInfo.getLocalMaxMemory()
-             && StringUtils.equals(this.getPartitionResolverName(), paInfo.getPartitionResolverName())
-             && this.getRecoveryDelay()  == paInfo.getRecoveryDelay()
-             && this.getRedundantCopies() == paInfo.getRedundantCopies()
-             && this.getStartupRecoveryDelay() == paInfo.getStartupRecoveryDelay()
-             && this.getTotalNumBuckets()  == paInfo.getTotalNumBuckets()
-             && this.getFixedPartitionAttributesInfo().equals(paInfo.getFixedPartitionAttributesInfo());
+          && this.getLocalMaxMemory() == paInfo.getLocalMaxMemory()
+          && StringUtils.equals(this.getPartitionResolverName(), paInfo.getPartitionResolverName())
+          && this.getRecoveryDelay() == paInfo.getRecoveryDelay()
+          && this.getRedundantCopies() == paInfo.getRedundantCopies()
+          && this.getStartupRecoveryDelay() == paInfo.getStartupRecoveryDelay()
+          && this.getTotalNumBuckets() == paInfo.getTotalNumBuckets() && this
+              .getFixedPartitionAttributesInfo().equals(paInfo.getFixedPartitionAttributesInfo());
-  
+
-    
+

