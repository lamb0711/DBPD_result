Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-public final class MapTypeImpl extends CollectionTypeImpl
-implements MapType {
+public final class MapTypeImpl extends CollectionTypeImpl implements MapType {
-  
+
-  * Empty constructor to satisfy <code>DataSerializer</code> requirements
+   * Empty constructor to satisfy <code>DataSerializer</code> requirements
-  public MapTypeImpl() {
-  }
+  public MapTypeImpl() {}
-  
+
-  throws ClassNotFoundException {
+      throws ClassNotFoundException {
-  
-  @Override  
+
+  @Override
-    return super.equals(obj) &&
-            (obj instanceof MapTypeImpl) &&
-            this.keyType.equals(((MapTypeImpl)obj).keyType);
+    return super.equals(obj) && (obj instanceof MapTypeImpl)
+        && this.keyType.equals(((MapTypeImpl) obj).keyType);
-  
-  @Override  
+
+  @Override
-  
-  @Override  
-  public String toString(){
-    return resolveClass().getName() +
-            "<key:" + this.keyType.resolveClass().getName() +
-            ",value:" + getElementType().resolveClass().getName() + ">";
+
+  @Override
+  public String toString() {
+    return resolveClass().getName() + "<key:" + this.keyType.resolveClass().getName() + ",value:"
+        + getElementType().resolveClass().getName() + ">";
-  
-  @Override  
-  public boolean isMapType() { return true; }
+
+  @Override
+  public boolean isMapType() {
+    return true;
+  }
-    ObjectType[] fieldTypes = new ObjectType[] { this.keyType, getElementType() };
-    return new StructTypeImpl( new String[] { "key", "value" }, fieldTypes);
+    ObjectType[] fieldTypes = new ObjectType[] {this.keyType, getElementType()};
+    return new StructTypeImpl(new String[] {"key", "value"}, fieldTypes);
-  
-  @Override  
+
+  @Override
-  @Override  
+  @Override
-    this.keyType = (ObjectType)DataSerializer.readObject(in);
+    this.keyType = (ObjectType) DataSerializer.readObject(in);
-  
-  @Override  
+
+  @Override

