Merge branch 'release/1.5.0'

+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.versions.RegionVersionVector;
+    setEventSeqNum();
-  protected void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+  public void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
-      if (this.partitionedRegion.isShadowPR()
-          && this.partitionedRegion.getColocatedWith() != null) {
-        PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
-        BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
-        // needs to be set only once.
-        if (parentBucket.eventSeqNum == null) {
-          parentBucket.eventSeqNum = new AtomicLong5(getId());
-        }
-      }
-      if (this.partitionedRegion.getColocatedWith() == null) {
-        this.eventSeqNum = new AtomicLong5(getId());
-      } else {
-        PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
-        BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
-        if (parentBucket == null && logger.isDebugEnabled()) {
-          logger.debug("The parentBucket of region {} bucketId {} is NULL",
-              this.partitionedRegion.getFullPath(), getId());
-        }
-        Assert.assertTrue(parentBucket != null);
-        this.eventSeqNum = parentBucket.eventSeqNum;
-      }
-
+  private void setEventSeqNum() {
+    if (this.partitionedRegion.isShadowPR() && this.partitionedRegion.getColocatedWith() != null) {
+      PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
+      // needs to be set only once.
+      if (parentBucket.eventSeqNum == null) {
+        parentBucket.eventSeqNum = new AtomicLong5(getId());
+      }
+    }
+    if (this.partitionedRegion.getColocatedWith() == null) {
+      this.eventSeqNum = new AtomicLong5(getId());
+    } else {
+      PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
+      if (parentBucket == null && logger.isDebugEnabled()) {
+        logger.debug("The parentBucket of region {} bucketId {} is NULL",
+            this.partitionedRegion.getFullPath(), getId());
+      }
+      Assert.assertTrue(parentBucket != null);
+      this.eventSeqNum = parentBucket.eventSeqNum;
+    }
+  }
-      throw new CacheClosedException("Cache is shutting down");
+      throw cache.getCacheClosedException("Cache is shutting down");
-        throw new CacheClosedException("Cache is shutting down");
+        throw cache.getCacheClosedException("Cache is shutting down");
-  void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
+  public void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
-    return this.concurrencyChecksEnabled
+    return this.getConcurrencyChecksEnabled()
-  protected void basicDestroy(final EntryEventImpl event, final boolean cacheWrite,
+  public void basicDestroy(final EntryEventImpl event, final boolean cacheWrite,
-  protected void basicDestroyBeforeRemoval(RegionEntry entry, EntryEventImpl event) {
+  public void basicDestroyBeforeRemoval(RegionEntry entry, EntryEventImpl event) {
-    LocalRegion lr = event.getLocalRegion();
+    LocalRegion lr = event.getRegion();
-      arm.releaseCacheModificationLock(event.getLocalRegion(), event);
+      arm.releaseCacheModificationLock(event.getRegion(), event);
-  public int getRegionSize(DistributedMember target) {
-    // GEODE-3679. Do not forward the request again.
-    return getRegionSize();
-  }
-
-  @Override
-  void updateSizeOnRemove(Object key, int oldSize) {
+  public void updateSizeOnRemove(Object key, int oldSize) {
-    closeCacheCallback(getEvictionController());
+    EvictionController evictionController = getEvictionController();
+    if (evictionController != null) {
+      evictionController.closeBucket(this);
+    }
-  public void incEvictions(long delta) {
-    this.evictions.getAndAdd(delta);
+  @Override
+  public void incBucketEvictions() {
+    this.evictions.getAndAdd(1);
-  public long getEvictions() {
+  public long getBucketEvictions() {
+
+  @Override
+  public EvictionController getExistingController(InternalRegionArguments internalArgs) {
+    return internalArgs.getPartitionedRegion().getEvictionController();
+  }
+
+  @Override
+  public String getNameForStats() {
+    return this.getPartitionedRegion().getFullPath();
+  }
+
+  @Override
+  public void closeEntries() {
+    this.entries.close(this);
+  }
+
+  @Override
+  public Set<VersionSource> clearEntries(RegionVersionVector rvv) {
+    return this.entries.clear(rvv, this);
+  }
+

INS26 INS26 MOV31 INS40 INS40 INS31 INS31 INS31 INS31 INS31 MOV78 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV8 UPD83 UPD42 MOV8 INS83 UPD83 UPD83 INS83 MOV78 INS83 INS39 INS42 INS8 MOV78 UPD42 UPD42 INS78 INS83 INS43 INS42 MOV44 MOV8 INS78 INS83 INS43 INS42 INS8 INS78 UPD83 UPD42 INS78 INS83 INS74 INS42 INS44 INS8 INS21 MOV21 INS60 INS25 INS42 INS42 UPD43 UPD42 INS42 INS42 INS41 INS42 INS42 INS43 INS43 INS43 INS42 INS41 INS32 INS8 INS43 INS59 INS27 INS8 UPD42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 MOV60 MOV25 MOV21 INS32 INS42 INS42 MOV32 INS42 INS33 INS21 INS34 INS32 INS42 INS32 INS42 INS22 UPD42 INS52 INS22 INS42 INS42 INS52 INS32 INS52 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS52 INS32 UPD42 INS42 INS42 INS45 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL45 DEL14 DEL52 DEL42 DEL22 DEL31 DEL39 DEL42 DEL44 DEL42 DEL32