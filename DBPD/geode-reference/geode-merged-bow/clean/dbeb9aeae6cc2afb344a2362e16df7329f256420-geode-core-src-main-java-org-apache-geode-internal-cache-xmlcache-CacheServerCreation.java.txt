Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>BridgeServerCreation</code> with the default
-   * configuration.
+   * Creates a new <code>BridgeServerCreation</code> with the default configuration.
-   * @param cache
-   *        The cache being served
+   * @param cache The cache being served
-  
+
+   * 
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-   * Returns whether or not this bridge server has the same
-   * configuration as another bridge server.
+   * Returns whether or not this bridge server has the same configuration as another bridge server.
-    boolean result = isCacheServerPortEquals(other) &&
-        this.getSocketBufferSize() == other.getSocketBufferSize() &&
-        this.getMaximumTimeBetweenPings() == other.getMaximumTimeBetweenPings() &&
-        this.getNotifyBySubscription() == other.getNotifyBySubscription() &&
-        this.getMaxConnections() == other.getMaxConnections() &&
-        this.getMaxThreads() == other.getMaxThreads() &&
-        this.getMaximumMessageCount() == other.getMaximumMessageCount() &&
-        this.getMessageTimeToLive() == other.getMessageTimeToLive() &&
-        this.getTcpNoDelay() == other.getTcpNoDelay() &&
-        cscThis.getCapacity() == cscOther.getCapacity() &&
-        cscThis.getEvictionPolicy().equals(cscOther.getEvictionPolicy());
+    boolean result =
+        isCacheServerPortEquals(other) && this.getSocketBufferSize() == other.getSocketBufferSize()
+            && this.getMaximumTimeBetweenPings() == other.getMaximumTimeBetweenPings()
+            && this.getNotifyBySubscription() == other.getNotifyBySubscription()
+            && this.getMaxConnections() == other.getMaxConnections()
+            && this.getMaxThreads() == other.getMaxThreads()
+            && this.getMaximumMessageCount() == other.getMaximumMessageCount()
+            && this.getMessageTimeToLive() == other.getMessageTimeToLive()
+            && this.getTcpNoDelay() == other.getTcpNoDelay()
+            && cscThis.getCapacity() == cscOther.getCapacity()
+            && cscThis.getEvictionPolicy().equals(cscOther.getEvictionPolicy());
-   * Compare configured cacheServer port against the running cacheServer port.
-   * If the current cacheServer port is set to 0 a random ephemeral
-   * port will be used so there is no need to compare returning <code>true</code>.
-   * If a port is specified, return the proper comparison.
+   * Compare configured cacheServer port against the running cacheServer port. If the current
+   * cacheServer port is set to 0 a random ephemeral port will be used so there is no need to
+   * compare returning <code>true</code>. If a port is specified, return the proper comparison.
+   * 
-  public String toString()
-  {
-    return "BridgeServerCreation on port " + this.getPort() +
-    " notify by subscription " + this.getNotifyBySubscription() +
-    " maximum time between pings " + this.getMaximumTimeBetweenPings() + 
-    " socket buffer size " + this.getSocketBufferSize() + 
-    " maximum connections " + this.getMaxConnections() +
-    " maximum threads " + this.getMaxThreads() +
-    " maximum message count " + this.getMaximumMessageCount() +
-    " message time to live " + this.getMessageTimeToLive() +
-    " groups " + Arrays.asList(getGroups()) +
-    " loadProbe " + loadProbe +
-    " loadPollInterval " + loadPollInterval +
-    this.getClientSubscriptionConfig().toString();
+  public String toString() {
+    return "BridgeServerCreation on port " + this.getPort() + " notify by subscription "
+        + this.getNotifyBySubscription() + " maximum time between pings "
+        + this.getMaximumTimeBetweenPings() + " socket buffer size " + this.getSocketBufferSize()
+        + " maximum connections " + this.getMaxConnections() + " maximum threads "
+        + this.getMaxThreads() + " maximum message count " + this.getMaximumMessageCount()
+        + " message time to live " + this.getMessageTimeToLive() + " groups "
+        + Arrays.asList(getGroups()) + " loadProbe " + loadProbe + " loadPollInterval "
+        + loadPollInterval + this.getClientSubscriptionConfig().toString();
-  
-  public ClientSubscriptionConfig getClientSubscriptionConfig(){
+
+  public ClientSubscriptionConfig getClientSubscriptionConfig() {
-    //TODO Yogesh : implement me 
+    // TODO Yogesh : implement me
-  public void registerInterestRegistrationListener(
-      InterestRegistrationListener listener) {
-    //TODO Yogesh : implement me
+  public void registerInterestRegistrationListener(InterestRegistrationListener listener) {
+    // TODO Yogesh : implement me
-  public void unregisterInterestRegistrationListener(
-      InterestRegistrationListener listener) {
-    //TODO Yogesh : implement me
+  public void unregisterInterestRegistrationListener(InterestRegistrationListener listener) {
+    // TODO Yogesh : implement me

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66