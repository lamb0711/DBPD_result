Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    
+
-      regionPath = "/"+regionPath;
+      regionPath = "/" + regionPath;
-    if(fields == null || fields.length == 0) {
+    if (fields == null || fields.length == 0) {
-    
+
-  
+
-  public void createIndex(String indexName, String regionPath, Map<String, Analyzer> fieldAnalyzers) {
-    if(fieldAnalyzers == null || fieldAnalyzers.isEmpty()) {
+  public void createIndex(String indexName, String regionPath,
+      Map<String, Analyzer> fieldAnalyzers) {
+    if (fieldAnalyzers == null || fieldAnalyzers.isEmpty()) {
-    String[] fields = (String[])fieldsSet.toArray(new String[fieldsSet.size()]);
+    String[] fields = (String[]) fieldsSet.toArray(new String[fieldsSet.size()]);
-  public void createIndex(final String indexName, String regionPath,
-      final Analyzer analyzer, final Map<String, Analyzer> fieldAnalyzers,
-      final String... fields) {
+  public void createIndex(final String indexName, String regionPath, final Analyzer analyzer,
+      final Map<String, Analyzer> fieldAnalyzers, final String... fields) {
-    if(!regionPath.startsWith("/")) {
+    if (!regionPath.startsWith("/")) {
-                                new LuceneIndexCreationProfile(indexName, regionPath, fields, analyzer, fieldAnalyzers));
+        new LuceneIndexCreationProfile(indexName, regionPath, fields, analyzer, fieldAnalyzers));
-    if(region != null) {
+    if (region != null) {
-      public RegionAttributes beforeCreate(Region parent, String regionName,
-          RegionAttributes attrs, InternalRegionArguments internalRegionArgs) {
+      public RegionAttributes beforeCreate(Region parent, String regionName, RegionAttributes attrs,
+          InternalRegionArguments internalRegionArgs) {
-        if(path.equals(dataRegionPath)) {
+        if (path.equals(dataRegionPath)) {
-            throw new UnsupportedOperationException("Lucene indexes on replicated regions are not supported");
+            throw new UnsupportedOperationException(
+                "Lucene indexes on replicated regions are not supported");
-          //For now we cannot support eviction with local destroy.
-          //Eviction with overflow to disk still needs to be supported
+          // For now we cannot support eviction with local destroy.
+          // Eviction with overflow to disk still needs to be supported
-          if (evictionAlgorithm != EvictionAlgorithm.NONE && evictionAttributes.getAction().isLocalDestroy()) {
-            throw new UnsupportedOperationException("Lucene indexes on regions with eviction and action local destroy are not supported");
+          if (evictionAlgorithm != EvictionAlgorithm.NONE
+              && evictionAttributes.getAction().isLocalDestroy()) {
+            throw new UnsupportedOperationException(
+                "Lucene indexes on regions with eviction and action local destroy are not supported");
-          internalRegionArgs.addCacheServiceProfile(new LuceneIndexCreationProfile(indexName, dataRegionPath, fields, analyzer, fieldAnalyzers));
+          internalRegionArgs.addCacheServiceProfile(new LuceneIndexCreationProfile(indexName,
+              dataRegionPath, fields, analyzer, fieldAnalyzers));
-      
+
-        if(region.getFullPath().equals(dataRegionPath)) {
+        if (region.getFullPath().equals(dataRegionPath)) {
-  public void afterDataRegionCreated(final String indexName,
-      final Analyzer analyzer, final String dataRegionPath,
-      final Map<String, Analyzer> fieldAnalyzers, final String... fields) {
+  public void afterDataRegionCreated(final String indexName, final Analyzer analyzer,
+      final String dataRegionPath, final Map<String, Analyzer> fieldAnalyzers,
+      final String... fields) {
-  
+
-      logger.info("Data region "+regionPath+" not found");
+      logger.info("Data region " + regionPath + " not found");
-    //Convert the region name into a canonical form
+    // Convert the region name into a canonical form
-  private void registerDefinedIndex(final String regionAndIndex, final LuceneIndexCreationProfile luceneIndexCreationProfile) {
+  private void registerDefinedIndex(final String regionAndIndex,
+      final LuceneIndexCreationProfile luceneIndexCreationProfile) {
-    if(region == null) {
+    if (region == null) {
-//    indexImpl.close();
+    // indexImpl.close();
-    //This is called when CacheCreation (source) is turned into a GemfireCacheImpl (target)
-    //nothing to do there.
+    // This is called when CacheCreation (source) is turned into a GemfireCacheImpl (target)
+    // nothing to do there.
-  public void registerIndex(LuceneIndex index){
-    String regionAndIndex = getUniqueIndexName(index.getName(), index.getRegionPath()); 
-    if( !indexMap.containsKey( regionAndIndex )) {
+  public void registerIndex(LuceneIndex index) {
+    String regionAndIndex = getUniqueIndexName(index.getName(), index.getRegionPath());
+    if (!indexMap.containsKey(regionAndIndex)) {
-  public void unregisterIndex(final String region){
-    if( indexMap.containsKey( region )) indexMap.remove( region );
+  public void unregisterIndex(final String region) {
+    if (indexMap.containsKey(region))
+      indexMap.remove(region);
-  /**Public for test purposes */
+  /** Public for test purposes */
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_CHUNK_KEY,
-        ChunkKey.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_FILE,
-        File.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_FUNCTION_CONTEXT,
-        LuceneFunctionContext.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_STRING_QUERY_PROVIDER,
-        StringQueryProvider.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR_MANAGER,
-        TopEntriesCollectorManager.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_ENTRY_SCORE,
-        EntryScore.class);
-    
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_TOP_ENTRIES,
-        TopEntries.class);
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_CHUNK_KEY, ChunkKey.class);
-    DSFIDFactory.registerDSFID(
-        DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR,
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_FILE, File.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_FUNCTION_CONTEXT,
+        LuceneFunctionContext.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_STRING_QUERY_PROVIDER,
+        StringQueryProvider.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR_MANAGER,
+        TopEntriesCollectorManager.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_ENTRY_SCORE, EntryScore.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES, TopEntries.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR,
-    return definedIndexMap.get(getUniqueIndexName(indexName , regionPath));
+    return definedIndexMap.get(getUniqueIndexName(indexName, regionPath));

