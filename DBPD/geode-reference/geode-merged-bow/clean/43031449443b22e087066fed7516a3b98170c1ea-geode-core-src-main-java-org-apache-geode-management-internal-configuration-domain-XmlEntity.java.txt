GEODE-6588: Cleanup static analyzer warnings. (#3570)


+
-    this.cacheProvider = createDefaultCacheProvider();
+    cacheProvider = createDefaultCacheProvider();
-    this.cacheProvider = createDefaultCacheProvider();
+    cacheProvider = createDefaultCacheProvider();
-    this.attributes.put(key, value);
+    attributes.put(key, value);
-    this.cacheProvider = createDefaultCacheProvider();
+    cacheProvider = createDefaultCacheProvider();
-    this.type = childType;
-    initializeSearchString(parentKey, parentValue, this.prefix, childKey, childValue);
+    type = childType;
+    initializeSearchString(parentKey, parentValue, prefix, childKey, childValue);
-    this.cacheProvider = createDefaultCacheProvider();
+    cacheProvider = createDefaultCacheProvider();
-    this.type = childType;
+    type = childType;
-    this.type = childType;
-    this.prefix = childPrefix;
-    this.namespace = childNamespace;
+    type = childType;
+    prefix = childPrefix;
+    namespace = childNamespace;
-    this.attributes.put(key, value);
+    attributes.put(key, value);
-    StringBuilder sb = new StringBuilder();
-    sb.append("//").append(this.parentType);
-    sb.append('/').append(childPrefix).append(':').append(this.type);
-    this.searchString = sb.toString();
-    this.xmlDefinition = parseXmlForDefinition();
+    searchString = "//" + this.parentType + '/' + childPrefix + ':' + type;
+    xmlDefinition = parseXmlForDefinition();
-    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    CacheXmlGenerator.generate(cache, printWriter, false, false);
-    sb.append("//").append(this.prefix).append(':').append(this.parentType);
+    sb.append("//").append(prefix).append(':').append(parentType);
-    sb.append('/').append(childPrefix).append(':').append(this.type);
+    sb.append('/').append(childPrefix).append(':').append(type);
-    this.searchString = sb.toString();
+    searchString = sb.toString();
-    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    CacheXmlGenerator.generate(cache, printWriter, false, false);
-  public String loadXmlDefinition(final Document document)
+  private String loadXmlDefinition(final Document document)
-    this.searchString = createQueryString(prefix, type, attributes);
-    logger.info("XmlEntity:searchString: {}", this.searchString);
+    searchString = createQueryString(prefix, type, attributes);
+    logger.info("XmlEntity:searchString: {}", searchString);
-      Node element = XmlUtils.querySingleElement(document, this.searchString, xpathContext);
+      Node element = XmlUtils.querySingleElement(document, searchString, xpathContext);
-    return this.searchString;
+    return searchString;
-    return this.type;
+    return type;
-    return this.attributes;
+    return attributes;
-    return this.attributes.get(key);
+    return attributes.get(key);
-    if (this.attributes.containsKey("name")) {
-      return this.attributes.get("name");
+    if (attributes.containsKey("name")) {
+      return attributes.get("name");
-    return this.attributes.get("id");
+    return attributes.get("id");
-    return this.xmlDefinition;
+    return xmlDefinition;
-    return this.childPrefix;
+    return childPrefix;
-    return this.childNamespace;
+    return childNamespace;
-    return "XmlEntity [namespace=" + namespace + ", type=" + this.type + ", attributes="
-        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + ']';
+    return "XmlEntity [namespace=" + namespace + ", type=" + type + ", attributes="
+        + attributes + ", xmlDefinition=" + xmlDefinition + ']';
-    result = prime * result + ((this.attributes == null) ? 0 : this.attributes.hashCode());
-    result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
+    result = prime * result + ((attributes == null) ? 0 : attributes.hashCode());
+    result = prime * result + ((type == null) ? 0 : type.hashCode());
-    if (this.attributes == null) {
+    if (attributes == null) {
-    } else if (!this.attributes.equals(other.attributes))
+    } else if (!attributes.equals(other.attributes))
-    if (this.namespace == null) {
+    if (namespace == null) {
-    } else if (!this.namespace.equals(other.namespace))
+    } else if (!namespace.equals(other.namespace))
-    if (this.type == null) {
-      if (other.type != null)
-        return false;
-    } else if (!this.type.equals(other.type))
-      return false;
-    return true;
+    if (type == null) {
+      return other.type == null;
+    } else
+      return type.equals(other.type);
-    DataSerializer.writeString(this.childPrefix, out);
-    DataSerializer.writeString(this.childNamespace, out);
+    DataSerializer.writeString(childPrefix, out);
+    DataSerializer.writeString(childNamespace, out);
-    DataSerializer.writeString(this.type, out);
-    DataSerializer.writeObject(this.attributes, out);
-    DataSerializer.writeString(this.xmlDefinition, out);
-    DataSerializer.writeString(this.searchString, out);
-    DataSerializer.writeString(this.prefix, out);
-    DataSerializer.writeString(this.namespace, out);
+    DataSerializer.writeString(type, out);
+    DataSerializer.writeObject(attributes, out);
+    DataSerializer.writeString(xmlDefinition, out);
+    DataSerializer.writeString(searchString, out);
+    DataSerializer.writeString(prefix, out);
+    DataSerializer.writeString(namespace, out);
-    this.childPrefix = DataSerializer.readString(in);
-    this.childNamespace = DataSerializer.readString(in);
+    childPrefix = DataSerializer.readString(in);
+    childNamespace = DataSerializer.readString(in);
-    this.type = DataSerializer.readString(in);
-    this.attributes = DataSerializer.readObject(in);
-    this.xmlDefinition = DataSerializer.readString(in);
-    this.searchString = DataSerializer.readString(in);
-    this.prefix = DataSerializer.readString(in);
-    this.namespace = DataSerializer.readString(in);
-    this.cacheProvider = createDefaultCacheProvider();
+    type = DataSerializer.readString(in);
+    attributes = DataSerializer.readObject(in);
+    xmlDefinition = DataSerializer.readString(in);
+    searchString = DataSerializer.readString(in);
+    prefix = DataSerializer.readString(in);
+    namespace = DataSerializer.readString(in);
+    cacheProvider = createDefaultCacheProvider();
+    @SuppressWarnings("deprecation")
+    @SuppressWarnings("deprecation")
-     * @param xmlDocument Config XML document.
-     * @return this XmlEntityBuilder
-     * @since GemFire 8.1
-     */
-    public XmlEntityBuilder withConfig(final String xmlDocument) {
-      xmlEntity.xmlDefinition = xmlEntity.loadXmlDefinition(xmlDocument);
-
-      return this;
-    }
-
-    /**
-     * Sets a config xml document source to get the entity XML Definition from as returned by
-     * {@link XmlEntity#getXmlDefinition()}. Defaults to current active configuration for
-     * {@link Cache}.
-     *
-     * <b>Should only be used for testing.</b>
-     *

UPD83 MOV43 MOV43 MOV43 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 INS79 INS79 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV41 INS42 MOV41 INS42 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 MOV22 INS13 INS42 INS13 INS42 MOV27 MOV27 INS27 INS42 MOV42 MOV40 INS42 INS42 INS42 INS42 MOV40 MOV33 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL9 DEL41 DEL25 DEL52 DEL42 DEL22 DEL32 DEL38 DEL9 DEL41 DEL25 DEL9 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31