Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class can be used to connect to a locator and ask it to find a jmx
- * manager. If the locator can find a jmx manager that is already running it
- * returns it. Otherwise the locator will attempt to start a jmx manager and
- * then return it.
+ * This class can be used to connect to a locator and ask it to find a jmx manager. If the locator
+ * can find a jmx manager that is already running it returns it. Otherwise the locator will attempt
+ * to start a jmx manager and then return it.
- * This code does not depend on gemfire.jar but in order to do this some of
- * GemFire's internal serialization codes and byte sequences have been hard
- * coded into this code.
+ * This code does not depend on gemfire.jar but in order to do this some of GemFire's internal
+ * serialization codes and byte sequences have been hard coded into this code.
-   * public static void main(String[] args) throws IOException { if (args.length
-   * != 2) { System.err.println(
-   * "Usage: JmxManagerFinder locatorHost locatorPort. Expected two arguments but found "
-   * + args.length); return; } String locatorHost = args[0]; int locatorPort =
+   * public static void main(String[] args) throws IOException { if (args.length != 2) {
+   * System.err.println(
+   * "Usage: JmxManagerFinder locatorHost locatorPort. Expected two arguments but found " +
+   * args.length); return; } String locatorHost = args[0]; int locatorPort =
-   * InetAddress addr = InetAddress.getByName(locatorHost); JmxManagerInfo
-   * locRes = askLocatorForJmxManager(addr, locatorPort, 15000);
+   * InetAddress addr = InetAddress.getByName(locatorHost); JmxManagerInfo locRes =
+   * askLocatorForJmxManager(addr, locatorPort, 15000);
-   * if (locRes.port == 0) {
-   * System.out.println("Locator could not find a jmx manager"); } else {
-   * System.out.println("Locator on host " + locRes.host + " port " +
-   * locRes.port + (locRes.ssl ? " ssl" : "")); } }
+   * if (locRes.port == 0) { System.out.println("Locator could not find a jmx manager"); } else {
+   * System.out.println("Locator on host " + locRes.host + " port " + locRes.port + (locRes.ssl ?
+   * " ssl" : "")); } }
-   * Describes the location of a jmx manager. If a jmx manager does not exist
-   * then port will be 0.
+   * Describes the location of a jmx manager. If a jmx manager does not exist then port will be 0.
-   * Ask a locator to find a jmx manager. The locator will start one if one is
-   * not already running.
+   * Ask a locator to find a jmx manager. The locator will start one if one is not already running.
-   * @param addr
-   *          the host address the locator is listening on
-   * @param port
-   *          the port the locator is listening on
-   * @param timeout
-   *          the number of milliseconds to wait for a response; 15000 is a
-   *          reasonable default
-   * @return describes the location of the jmx manager. The port will be zero if
-   *         no jmx manager was found.
-   * @throws IOException
-   *           if a problem occurs trying to connect to the locator or
-   *           communicate with it.
+   * @param addr the host address the locator is listening on
+   * @param port the port the locator is listening on
+   * @param timeout the number of milliseconds to wait for a response; 15000 is a reasonable default
+   * @return describes the location of the jmx manager. The port will be zero if no jmx manager was
+   *         found.
+   * @throws IOException if a problem occurs trying to connect to the locator or communicate with
+   *         it.
-  public static JmxManagerInfo askLocatorForJmxManager(InetAddress addr,
-      int port, int timeout, boolean usessl) throws IOException {
+  public static JmxManagerInfo askLocatorForJmxManager(InetAddress addr, int port, int timeout,
+      boolean usessl) throws IOException {
-        throw new IllegalStateException("Expected " + DS_FIXED_ID_SHORT
-            + " but found " + header);
+        throw new IllegalStateException("Expected " + DS_FIXED_ID_SHORT + " but found " + header);
-        throw new IllegalStateException("Expected "
-            + JMX_MANAGER_LOCATOR_RESPONSE + " but found " + msgType);
+        throw new IllegalStateException(
+            "Expected " + JMX_MANAGER_LOCATOR_RESPONSE + " but found " + msgType);
-        throw new IllegalStateException("Expected " + STRING_BYTES + " or "
-            + NULL_STRING + " but found " + hostHeader);
+        throw new IllegalStateException(
+            "Expected " + STRING_BYTES + " or " + NULL_STRING + " but found " + hostHeader);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66