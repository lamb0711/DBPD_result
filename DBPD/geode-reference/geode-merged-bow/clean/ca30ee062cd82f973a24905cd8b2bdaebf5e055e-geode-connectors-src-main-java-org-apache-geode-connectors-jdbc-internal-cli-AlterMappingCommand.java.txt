GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
+import static org.apache.geode.distributed.ClusterConfigurationService.CLUSTER_CONFIG;
+
+import org.apache.geode.cache.configuration.CacheConfig;
-import org.apache.geode.management.internal.cli.commands.InternalGfshCommand;
+import org.apache.geode.management.cli.SingleGfshCommand;
-public class AlterMappingCommand extends InternalGfshCommand {
+public class AlterMappingCommand extends SingleGfshCommand {
+      CacheConfig cacheConfig = ccService.getCacheConfig(CLUSTER_CONFIG);
-          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
+          cacheConfig.findCustomCacheElement("connector-service", ConnectorService.class);
-
-    boolean persisted = false;
-    // update the cc with the merged connection returned from the server
-    if (ccService != null && results.stream().filter(CliFunctionResult::isSuccessful).count() > 0) {
-      ConnectorService service =
-          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
-      if (service == null) {
-        service = new ConnectorService();
-      }
-      CliFunctionResult successResult =
-          results.stream().filter(CliFunctionResult::isSuccessful).findAny().get();
-      ConnectorService.RegionMapping mergedMapping =
-          (ConnectorService.RegionMapping) successResult.getResultObject();
-      CacheElement.removeElement(service.getRegionMapping(), connectionName);
-      service.getRegionMapping().add(mergedMapping);
-      ccService.saveCustomCacheElement("cluster", service);
-      persisted = true;
-    }
-
-    commandResult.setCommandPersisted(persisted);
+
+    // find the merged regionMapping from the function result
+    CliFunctionResult successResult =
+        results.stream().filter(CliFunctionResult::isSuccessful).findAny().get();
+    ConnectorService.RegionMapping mergedMapping =
+        (ConnectorService.RegionMapping) successResult.getResultObject();
+    commandResult.setConfigObject(mergedMapping);
+
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object element) {
+    ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) element;
+    ConnectorService service =
+        config.findCustomCacheElement("connector-service", ConnectorService.class);
+    // service is not nul at this point
+    CacheElement.removeElement(service.getRegionMapping(), mapping.getId());
+    service.getRegionMapping().add(mapping);
+  }

INS26 INS26 INS40 INS40 UPD40 UPD43 INS31 UPD42 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV60 MOV60 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV60 INS21 MOV21 INS42 INS42 INS42 INS43 INS59 INS32 INS60 UPD42 UPD42 INS40 INS42 INS11 INS42 INS42 MOV32 INS32 UPD42 INS43 INS59 INS43 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 UPD42 UPD42 DEL45 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL45