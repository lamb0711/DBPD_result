Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
+
-   * Constructs the EdlerState for the given dm. Note that this
-   * constructor does not complete until elder recovery is complete.
+   * Constructs the EdlerState for the given dm. Note that this constructor does not complete until
+   * elder recovery is complete.
-    }
-    catch (NullPointerException e) {
+    } catch (NullPointerException e) {
-      } 
-      finally {
-        if (true) throw e; // conditional prevents eclipse warning
+      } finally {
+        if (true)
+          throw e; // conditional prevents eclipse warning
-    }
-    catch (InternalGemFireError e) {
+    } catch (InternalGemFireError e) {
-      } 
-      finally {
-        if (true) throw e; // conditional prevents eclipse warning
+      } finally {
+        if (true)
+          throw e; // conditional prevents eclipse warning
-    }
-    finally {
+    } finally {
-        StringBuffer sb = new StringBuffer(
-            "ElderState initialized with:");
-        for (Iterator grantors = this.nameToInfo.keySet().iterator(); 
-             grantors.hasNext();) {
+        StringBuffer sb = new StringBuffer("ElderState initialized with:");
+        for (Iterator grantors = this.nameToInfo.keySet().iterator(); grantors.hasNext();) {
-  
+
-      logger.warn(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_SYSTEM_0, checkDM.getSystem()));
+      logger.warn(LogMarker.DLS, LocalizedMessage
+          .create(LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_SYSTEM_0, checkDM.getSystem()));
-      logger.warn(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_SYSTEM_DISTRIBUTIONMANAGER_0,
-          checkDM.getSystem().getDistributionManager()));
+      logger.warn(LogMarker.DLS,
+          LocalizedMessage.create(
+              LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_SYSTEM_DISTRIBUTIONMANAGER_0,
+              checkDM.getSystem().getDistributionManager()));
-      logger.warn(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_DM_0_BUT_SYSTEM_DISTRIBUTIONMANAGER_1,
-          new Object[] {checkDM, checkDM.getSystem().getDistributionManager()}));
+      logger.warn(LogMarker.DLS,
+          LocalizedMessage.create(
+              LocalizedStrings.ElderState_ELDERSTATE_PROBLEM_DM_0_BUT_SYSTEM_DISTRIBUTIONMANAGER_1,
+              new Object[] {checkDM, checkDM.getSystem().getDistributionManager()}));
-  
+
-   * Atomically determine who is the current grantor of the given service.
-   * If no current grantor exists then the caller is made the grantor.
+   * Atomically determine who is the current grantor of the given service. If no current grantor
+   * exists then the caller is made the grantor.
+   * 
-   * @return the current grantor of <code>serviceName</code>
-   *   and recoveryNeeded will be true if requestor has become the grantor
-   *   and needs to recover lock info.
+   * @return the current grantor of <code>serviceName</code> and recoveryNeeded will be true if
+   *         requestor has become the grantor and needs to recover lock info.
-  public GrantorInfo getGrantor(String serviceName, 
-                                InternalDistributedMember requestor,
-                                int dlsSerialNumberRequestor) {
+  public GrantorInfo getGrantor(String serviceName, InternalDistributedMember requestor,
+      int dlsSerialNumberRequestor) {
-      GrantorInfo gi = (GrantorInfo)this.nameToInfo.get(serviceName);
+      GrantorInfo gi = (GrantorInfo) this.nameToInfo.get(serviceName);
-            logger.trace(LogMarker.DLS, "Elder setting grantor for {} to {} because {} ", serviceName, requestor,
-                (currentGrantor != null ? "current grantor crashed" : "of unclean grantor shutdown"));
+            logger.trace(LogMarker.DLS, "Elder setting grantor for {} to {} because {} ",
+                serviceName, requestor, (currentGrantor != null ? "current grantor crashed"
+                    : "of unclean grantor shutdown"));
-          this.nameToInfo.put(serviceName, new GrantorInfo(requestor, myVersion, dlsSerialNumberRequestor, false));
+          this.nameToInfo.put(serviceName,
+              new GrantorInfo(requestor, myVersion, dlsSerialNumberRequestor, false));
-          logger.trace(LogMarker.DLS, "Elder setting grantor for {} to {} because of clean grantor shutdown", serviceName, requestor);
+          logger.trace(LogMarker.DLS,
+              "Elder setting grantor for {} to {} because of clean grantor shutdown", serviceName,
+              requestor);
+
+   * 
-   * @return the current grantor of <code>serviceName</code>
-   *   and recoveryNeeded will be true if requestor has become the grantor
-   *   and needs to recover lock info.
+   * @return the current grantor of <code>serviceName</code> and recoveryNeeded will be true if
+   *         requestor has become the grantor and needs to recover lock info.
-      GrantorInfo gi = (GrantorInfo)this.nameToInfo.get(serviceName);
+      GrantorInfo gi = (GrantorInfo) this.nameToInfo.get(serviceName);
+
-   * Atomically sets the current grantor of the given service to
-   * <code>newGrantor</code>.
+   * Atomically sets the current grantor of the given service to <code>newGrantor</code>.
+   * 
-   * @return the previous grantor, which may be null, of <code>serviceName</code>
-   *   and recoveryNeeded will be true if new grantor needs to recover lock info
+   * @return the previous grantor, which may be null, of <code>serviceName</code> and recoveryNeeded
+   *         will be true if new grantor needs to recover lock info
-  public GrantorInfo becomeGrantor(String serviceName,
-                                   InternalDistributedMember newGrantor,
-                                   int newGrantorSerialNumber,
-                                   InternalDistributedMember oldTurk) {
-    GrantorInfo newInfo = null; 
+  public GrantorInfo becomeGrantor(String serviceName, InternalDistributedMember newGrantor,
+      int newGrantorSerialNumber, InternalDistributedMember oldTurk) {
+    GrantorInfo newInfo = null;
-    synchronized (this) {
-      GrantorInfo gi = (GrantorInfo)this.nameToInfo.get(serviceName);
-      while (gi != null && gi.isInitiatingTransfer()) {
-        waitWhileInitiatingTransfer(gi);
-        gi = (GrantorInfo)this.nameToInfo.get(serviceName);
-      }
-      if (gi != null) {
-        previousGrantor = gi.getId();
-        // Note that elder recovery may put GrantorInfo instances in
-        // the map whose id is null and whose needRecovery is true
-        
-        // if previousGrantor still exists...
-        if (previousGrantor != null
-            && this.dm.getDistributionManagerIds().contains(previousGrantor)) {
-              
-          // if newGrantor is not previousGrantor...
-          if (!newGrantor.equals(previousGrantor)) {
-            
-            // problem: specified oldTurk is not previousGrantor... 
-            if (oldTurk != null && !oldTurk.equals(previousGrantor)) {
-              if (logger.isTraceEnabled(LogMarker.DLS)) {
-                logger.trace(LogMarker.DLS, "Elder did not become grantor for {} to {} because oldT was {} and the current grantor is {}", serviceName, newGrantor, oldTurk, previousGrantor);
-              }
-            } 
-            
-            // no oldTurk or oldTurk matches previousGrantor... transfer might occur
-            else {
-              // install new grantor
-              if (logger.isTraceEnabled(LogMarker.DLS)) {
-                logger.trace(LogMarker.DLS, "Elder forced to set grantor for {} to {}", serviceName, newGrantor);
-              }
-              long myVersion = gi.getVersionId() + 1;
-              newGrantorVersion = myVersion;
-              newInfo = new GrantorInfo(newGrantor, myVersion, newGrantorSerialNumber, false);
-              this.nameToInfo.put(serviceName, newInfo);
-              
-              if (gi.getId() != null
-                  && (oldTurk == null || gi.getId().equals(oldTurk))
-                  && !gi.getId().equals(newGrantor)) {
-                beginInitiatingTransfer(newInfo);
-              }
-              
-            }
-          }
-          // return previous grantor
-          return new GrantorInfo(gi.getId(), gi.getVersionId(), gi.getSerialNumber(), true);
+      synchronized (this) {
+        GrantorInfo gi = (GrantorInfo) this.nameToInfo.get(serviceName);
+        while (gi != null && gi.isInitiatingTransfer()) {
+          waitWhileInitiatingTransfer(gi);
+          gi = (GrantorInfo) this.nameToInfo.get(serviceName);
-        
-        // no previousGrantor in existence...
+        if (gi != null) {
+          previousGrantor = gi.getId();
+          // Note that elder recovery may put GrantorInfo instances in
+          // the map whose id is null and whose needRecovery is true
+
+          // if previousGrantor still exists...
+          if (previousGrantor != null
+              && this.dm.getDistributionManagerIds().contains(previousGrantor)) {
+
+            // if newGrantor is not previousGrantor...
+            if (!newGrantor.equals(previousGrantor)) {
+
+              // problem: specified oldTurk is not previousGrantor...
+              if (oldTurk != null && !oldTurk.equals(previousGrantor)) {
+                if (logger.isTraceEnabled(LogMarker.DLS)) {
+                  logger.trace(LogMarker.DLS,
+                      "Elder did not become grantor for {} to {} because oldT was {} and the current grantor is {}",
+                      serviceName, newGrantor, oldTurk, previousGrantor);
+                }
+              }
+
+              // no oldTurk or oldTurk matches previousGrantor... transfer might occur
+              else {
+                // install new grantor
+                if (logger.isTraceEnabled(LogMarker.DLS)) {
+                  logger.trace(LogMarker.DLS, "Elder forced to set grantor for {} to {}",
+                      serviceName, newGrantor);
+                }
+                long myVersion = gi.getVersionId() + 1;
+                newGrantorVersion = myVersion;
+                newInfo = new GrantorInfo(newGrantor, myVersion, newGrantorSerialNumber, false);
+                this.nameToInfo.put(serviceName, newInfo);
+
+                if (gi.getId() != null && (oldTurk == null || gi.getId().equals(oldTurk))
+                    && !gi.getId().equals(newGrantor)) {
+                  beginInitiatingTransfer(newInfo);
+                }
+
+              }
+            }
+            // return previous grantor
+            return new GrantorInfo(gi.getId(), gi.getVersionId(), gi.getSerialNumber(), true);
+          }
+
+          // no previousGrantor in existence...
+          else {
+            long myVersion = gi.getVersionId() + 1;
+
+            // problem: oldTurk was specified but there is no previousGrantor...
+            if (oldTurk != null) {
+              if (logger.isTraceEnabled(LogMarker.DLS)) {
+                logger.trace(LogMarker.DLS,
+                    "Elder did not become grantor for {} to {} because oldT was {} and the current grantor {} had crashed",
+                    serviceName, newGrantor, oldTurk, previousGrantor);
+              }
+            }
+
+            // no oldTurk was specified...
+            else {
+              if (logger.isTraceEnabled(LogMarker.DLS)) {
+                logger.trace(LogMarker.DLS,
+                    "Elder forced to set grantor for {} to {} and noticed previous grantor had crashed",
+                    serviceName, newGrantor);
+              }
+              // current grantor crashed; make new guy grantor and force recovery
+              this.nameToInfo.put(serviceName,
+                  new GrantorInfo(newGrantor, myVersion, newGrantorSerialNumber, false));
+            }
+
+            return new GrantorInfo(null, myVersion - 1, gi.getSerialNumber(), true);
+          }
+        }
+
+        // GrantorInfo was null...
-          long myVersion = gi.getVersionId() + 1;
-          
-          // problem: oldTurk was specified but there is no previousGrantor...
+          // problem: no oldTurk was specified
-              logger.trace(LogMarker.DLS, "Elder did not become grantor for {} to {} because oldT was {} and the current grantor {} had crashed", serviceName, newGrantor, oldTurk, previousGrantor);
+              logger.trace(LogMarker.DLS,
+                  "Elder did not become grantor for {} to {} because oldT was {} and elder had no current grantor",
+                  serviceName, newGrantor, oldTurk);
-          } 
-          
-          // no oldTurk was specified...
+          }
+
+          // no oldTurk was specified
-              logger.trace(LogMarker.DLS, "Elder forced to set grantor for {} to {} and noticed previous grantor had crashed", serviceName, newGrantor);
+              logger.trace(LogMarker.DLS,
+                  "Elder forced to set grantor for {} to {} because of clean grantor shutdown",
+                  serviceName, newGrantor);
-            // current grantor crashed; make new guy grantor and force recovery
-            this.nameToInfo.put(serviceName, new GrantorInfo(newGrantor, myVersion, newGrantorSerialNumber, false));
+            // no current grantor; last one shutdown cleanly
+            gi = new GrantorInfo(newGrantor, 1, newGrantorSerialNumber, false);
+            this.nameToInfo.put(serviceName, gi);
-          
-          return new GrantorInfo(null, myVersion-1, gi.getSerialNumber(), true);
+          return new GrantorInfo(null, 0, 0, false);
-      } 
-      
-      // GrantorInfo was null...
-      else {
-        // problem: no oldTurk was specified
-        if (oldTurk != null) {
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "Elder did not become grantor for {} to {} because oldT was {} and elder had no current grantor", serviceName,newGrantor, oldTurk);
-          }
-        } 
-        
-        // no oldTurk was specified
-        else {
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "Elder forced to set grantor for {} to {} because of clean grantor shutdown", serviceName,  newGrantor);
-          }
-          // no current grantor; last one shutdown cleanly
-          gi = new GrantorInfo(newGrantor, 1, newGrantorSerialNumber, false);
-          this.nameToInfo.put(serviceName, gi);
-        }
-        return new GrantorInfo(null, 0, 0, false);
-    }
-    }
-    finally {
+    } finally {
-        DeposeGrantorProcessor.send(
-            serviceName, previousGrantor, newGrantor, newGrantorVersion, newGrantorSerialNumber, dm);
+        DeposeGrantorProcessor.send(serviceName, previousGrantor, newGrantor, newGrantorVersion,
+            newGrantorSerialNumber, dm);
+
-   * Atomically clears the current grantor of the given service if
-   * the current grantor is <code>oldGrantor</code>.
-   * The next grantor for this service will not need to recover
-   * unless <code>locksHeld</code> is true.
+   * Atomically clears the current grantor of the given service if the current grantor is
+   * <code>oldGrantor</code>. The next grantor for this service will not need to recover unless
+   * <code>locksHeld</code> is true.
+   * 
-  public void clearGrantor(long grantorVersion,
-                           String serviceName,
-                           int dlsSerialNumber,
-                           InternalDistributedMember oldGrantor,
-                           boolean locksHeld) {
+  public void clearGrantor(long grantorVersion, String serviceName, int dlsSerialNumber,
+      InternalDistributedMember oldGrantor, boolean locksHeld) {
-      
-      GrantorInfo currentGI = (GrantorInfo)this.nameToInfo.get(serviceName);
+
+      GrantorInfo currentGI = (GrantorInfo) this.nameToInfo.get(serviceName);
-        return; // KIRK added this null check because becomeGrantor may not have talked to elder before destroy dls
+        return; // KIRK added this null check because becomeGrantor may not have talked to elder
+                // before destroy dls
-      if (currentGI.getVersionId() != grantorVersion ||
-          currentGI.getSerialNumber() != dlsSerialNumber) {
+      if (currentGI.getVersionId() != grantorVersion
+          || currentGI.getSerialNumber() != dlsSerialNumber) {
-        
+
-        gi = (GrantorInfo)this.nameToInfo.put(serviceName, new GrantorInfo(null, currentGI.getVersionId(), 0, true));
+        gi = (GrantorInfo) this.nameToInfo.put(serviceName,
+            new GrantorInfo(null, currentGI.getVersionId(), 0, true));
-        gi = (GrantorInfo)this.nameToInfo.remove(serviceName);
+        gi = (GrantorInfo) this.nameToInfo.remove(serviceName);
-            logger.trace(LogMarker.DLS, "Elder not making {} grantor shutdown for {} by {} because the current grantor is {}",
+            logger.trace(LogMarker.DLS,
+                "Elder not making {} grantor shutdown for {} by {} because the current grantor is {}",
-    if (gi == null) return false;
+    if (gi == null)
+      return false;
-  
+
-  
+
-  
+
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-      }
-      finally {
-        if (interrupted) Thread.currentThread().interrupt();
+      } finally {
+        if (interrupted)
+          Thread.currentThread().interrupt();
-       GrantorInfo gi = (GrantorInfo)this.nameToInfo.get(serviceName);
-       if (gi.isInitiatingTransfer()) {
-         throw new IllegalStateException(LocalizedStrings.ElderState_CANNOT_FORCE_GRANTOR_RECOVERY_FOR_GRANTOR_THAT_IS_TRANSFERRING.toLocalizedString()); 
-       }
-       this.nameToInfo.put(
-          serviceName,
+      GrantorInfo gi = (GrantorInfo) this.nameToInfo.get(serviceName);
+      if (gi.isInitiatingTransfer()) {
+        throw new IllegalStateException(
+            LocalizedStrings.ElderState_CANNOT_FORCE_GRANTOR_RECOVERY_FOR_GRANTOR_THAT_IS_TRANSFERRING
+                .toLocalizedString());
+      }
+      this.nameToInfo.put(serviceName,
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66