GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
+import java.util.ArrayList;
+import java.util.List;
+
- * 
- * 
-   * 
-   * @param headerText
+   * @param headerText Text to set to header.
-   * 
-   * @param footerText
+   * @param footerText Text to set to footer.
-  public Map<String, String> retrieveDataByValueInColumn(String columnName, String valueToSearch) {
-    Map<String, String> foundValues = Collections.emptyMap();
-    try {
-      GfJsonArray jsonArray = contentObject.getJSONArray(columnName);
-      int size = jsonArray.size();
-      int foundIndex = -1;
-      for (int i = 0; i < size; i++) {
-        Object object = jsonArray.get(i);
-        if (object != null && object.equals(valueToSearch)) {
-          foundIndex = i;
-          break;
-        }
-      }
-
-      if (foundIndex != -1) {
-        foundValues = new LinkedHashMap<String, String>();
-        for (Iterator<String> iterator = contentObject.keys(); iterator.hasNext();) {
-          String storedColumnNames = (String) iterator.next();
-          GfJsonArray storedColumnValues = contentObject.getJSONArray(storedColumnNames);
-          foundValues.put(storedColumnNames, String.valueOf(storedColumnValues.get(foundIndex)));
-        }
-      }
-    } catch (GfJsonException e) {
-      throw new ResultDataException(e.getMessage());
-    }
-    return foundValues;
-  }
-
-  public List<Map<String, String>> retrieveAllDataByValueInColumn(String columnName,
-      String valueToSearch) {
-    List<Map<String, String>> foundValuesList = new ArrayList<Map<String, String>>();
-    try {
-      GfJsonArray jsonArray = contentObject.getJSONArray(columnName);
-      int size = jsonArray.size();
-      for (int i = 0; i < size; i++) {
-        Object object = jsonArray.get(i);
-        if (object != null && object.equals(valueToSearch)) {
-          Map<String, String> foundValues = new LinkedHashMap<String, String>();
-
-          for (Iterator<String> iterator = contentObject.keys(); iterator.hasNext();) {
-            String storedColumnNames = (String) iterator.next();
-            GfJsonArray storedColumnValues = contentObject.getJSONArray(storedColumnNames);
-            foundValues.put(storedColumnNames, String.valueOf(storedColumnValues.get(i)));
-          }
-
-          foundValuesList.add(foundValues);
-        }
-      }
-    } catch (GfJsonException e) {
-      throw new ResultDataException(e.getMessage());
-    }
-    return foundValuesList;
-  }
-
-    List<String> values = new ArrayList<String>();
+    List<String> values = new ArrayList<>();

MOV26 MOV26 INS66 INS66 UPD74 MOV43 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43