Merge branch 'release/1.0.0-incubating.M3'

-import java.io.File;
-import java.net.UnknownHostException;
-import java.util.List;
-
-import org.apache.logging.log4j.Logger;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.statistics.CallbackSampler;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.net.UnknownHostException;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
-  
-  public static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY = "gemfire.stats.test.fileSizeLimitInKB";
+
+  public static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "stats.test.fileSizeLimitInKB";
-  protected static final String INITIALIZATION_TIMEOUT_PROPERTY = "gemfire.statSamplerInitializationTimeout";
-  protected static final int INITIALIZATION_TIMEOUT_DEFAULT = 3000;
+  protected static final String INITIALIZATION_TIMEOUT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "statSamplerInitializationTimeout";
+  protected static final int INITIALIZATION_TIMEOUT_DEFAULT = 30000;
-  private static final long STAT_SAMPLER_DELAY_THRESHOLD = Long.getLong("gemfire.statSamplerDelayThreshold", 3000);
+  private static final long STAT_SAMPLER_DELAY_THRESHOLD = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "statSamplerDelayThreshold", 3000);
+
+  private final CallbackSampler callbackSampler;
+    this.callbackSampler = new CallbackSampler(stopper, samplerStats);
+
+      this.callbackSampler.start(getStatisticsManager(), group, getSampleRate(), TimeUnit.MILLISECONDS);
+      this.callbackSampler.stop();
-   * @since 3.5
+   * @since GemFire 3.5
-   * @since 7.0
+   * @since GemFire 7.0
-   * @since 3.5
+   * @since GemFire 3.5
-    return stopper.cancelInProgress() != null || this.stopRequested;
+    return stopper.isCancelInProgress() || this.stopRequested;
-    synchronized (statsList) {
-      for (Statistics s : statsList) {
-        if (stopRequested()) return;
-        if (s instanceof StatisticsImpl) {
-          ((StatisticsImpl)s).prepareForSample();
-        }
+    for (Statistics s : statsList) {
+      if (stopRequested()) return;
+      if (s instanceof StatisticsImpl) {
+        ((StatisticsImpl)s).prepareForSample();

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 MOV8 INS27 INS27 UPD34 INS42 INS42 INS21 MOV60 MOV25 MOV21 INS40 INS45 INS40 INS45 INS27 INS7 UPD66 UPD66 UPD66 INS40 INS45 INS22 INS14 INS21 INS21 MOV32 INS52 INS42 INS43 INS42 INS42 INS32 INS32 UPD42 INS42 INS22 INS42 INS32 INS42 INS32 INS40 INS22 INS42 INS52 INS42 INS42 INS42 INS52 INS42 DEL45 DEL45 DEL45 DEL33 DEL27 DEL42 DEL51 DEL8