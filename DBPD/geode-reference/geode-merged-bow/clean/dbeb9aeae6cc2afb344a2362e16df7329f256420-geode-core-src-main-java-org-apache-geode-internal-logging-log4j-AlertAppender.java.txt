Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.util.concurrent.atomic.AtomicReference;
- * A Log4j Appender which will notify listeners whenever a message of the
- * requested level is written to the log file.
+ * A Log4j Appender which will notify listeners whenever a message of the requested level is written
+ * to the log file.
-  private static final AlertAppender instance = new AlertAppender();
+  private static final AlertAppender instance = createAlertAppender();
-  
+
-  
+
+  private final AtomicReference<InternalDistributedSystem> systemRef = new AtomicReference<>();
+
-  
+
+  private static AlertAppender createAlertAppender() {
+    AlertAppender alertAppender = new AlertAppender();
+    alertAppender.start();
+    return alertAppender;
+  }
+
-    start();
-  
+
+  public void onConnect(final InternalDistributedSystem system) {
+    this.systemRef.set(system);
+  }
+
-  
+
-   * Returns true if the current thread is in the process of delivering an
-   * alert message.
+   * Returns true if the current thread is in the process of delivering an alert message.
-  
+
- 
+
-  
+
-    alerting.set(isAlerting? Boolean.TRUE : Boolean.FALSE);
+    alerting.set(isAlerting ? Boolean.TRUE : Boolean.FALSE);
-  
+
-   * This method is optimized with the assumption that at least one listener
-   * has set a level which requires that the event be sent. This is ensured
-   * by modifying the appender's configuration whenever a listener is added
-   * or removed. 
+   * This method is optimized with the assumption that at least one listener has set a level which
+   * requires that the event be sent. This is ensured by modifying the appender's configuration
+   * whenever a listener is added or removed.
-    
+
-    
+
-      
+
-          
-      InternalDistributedSystem ds = InternalDistributedSystem.getConnectedInstance();
+
+      InternalDistributedSystem ds = this.systemRef.get();
-      
+
-      
+
-            
+
-          AlertListenerMessage alertMessage = AlertListenerMessage.create(listener.getMember(), intLevel, date,
-              connectionName, threadName, Thread.currentThread().getId(), logMessage, stackTrace);
-          
+          AlertListenerMessage alertMessage =
+              AlertListenerMessage.create(listener.getMember(), intLevel, date, connectionName,
+                  threadName, Thread.currentThread().getId(), logMessage, stackTrace);
+
-              logger.debug("Delivering local alert message: {}, {}, {}, {}, {}, [{}], [{}].", listener.getMember(), intLevel, date,
-                  connectionName, threadName, logMessage, stackTrace);
+              logger.debug("Delivering local alert message: {}, {}, {}, {}, {}, [{}], [{}].",
+                  listener.getMember(), intLevel, date, connectionName, threadName, logMessage,
+                  stackTrace);
-              logger.debug("Delivering remote alert message: {}, {}, {}, {}, {}, [{}], [{}].", listener.getMember(), intLevel, date,
-                  connectionName, threadName, logMessage, stackTrace);
+              logger.debug("Delivering remote alert message: {}, {}, {}, {}, {}, [{}], [{}].",
+                  listener.getMember(), intLevel, date, connectionName, threadName, logMessage,
+                  stackTrace);
-    
+
-    
+
-    
+
-        
+
-  
-  public synchronized boolean hasAlertListener(final DistributedMember member, final int alertLevel) {
+
+  public synchronized boolean hasAlertListener(final DistributedMember member,
+      final int alertLevel) {
-    
-    for (Listener listener: this.listeners) {
+
+    for (Listener listener : this.listeners) {
-    // Special case for alert level Alert.OFF (NONE_LEVEL), because we can never have an actual listener with
+    // Special case for alert level Alert.OFF (NONE_LEVEL), because we can never have an actual
+    // listener with
-      for (Listener listener: this.listeners) {
+      for (Listener listener : this.listeners) {
-      logger.debug("Responding to a property change event. Property name is {}.", evt.getPropertyName());
+      logger.debug("Responding to a property change event. Property name is {}.",
+          evt.getPropertyName());
-  
+
-   * Will add (or replace) a listener to the list of sorted listeners such that
-   * listeners with a narrower level (e.g. FATAL) will be at the end of the
-   * list.
+   * Will add (or replace) a listener to the list of sorted listeners such that listeners with a
+   * narrower level (e.g. FATAL) will be at the end of the list.
-   * @param listener
-   *          The listener to add to the list.
+   * @param listener The listener to add to the list.
-    
+
-    
+
-  
+
-   * @param alertLevel
-   *          The int value for the alert level
+   * @param alertLevel The int value for the alert level
-   * @throws java.lang.IllegalArgumentException
-   *           If there is no matching log level
+   * @throws java.lang.IllegalArgumentException If there is no matching log level
-    case Alert.SEVERE:
-      return Level.FATAL.intLevel();
-    case Alert.ERROR:
-      return Level.ERROR.intLevel();
-    case Alert.WARNING:
-      return Level.WARN.intLevel();
-    case Alert.OFF:
-      return Level.OFF.intLevel();
+      case Alert.SEVERE:
+        return Level.FATAL.intLevel();
+      case Alert.ERROR:
+        return Level.ERROR.intLevel();
+      case Alert.WARNING:
+        return Level.WARN.intLevel();
+      case Alert.OFF:
+        return Level.OFF.intLevel();
-  
+
-   * @param logLevel
-   *          The int value for the log level
+   * @param logLevel The int value for the log level
-   * @throws java.lang.IllegalArgumentException
-   *           If there is no matching log level
+   * @throws java.lang.IllegalArgumentException If there is no matching log level
-    
+
-  
+
+    this.systemRef.set(null);
-  
+
-    
+
-    
+

INS26 INS40 INS23 INS31 INS31 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS60 INS21 INS41 INS83 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS74 MOV43 MOV59 INS32 INS42 INS42 INS32 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 INS43 UPD42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS33 INS42 INS52 INS42 INS52 INS42 INS22 UPD42 INS52 INS42 DEL42 DEL32 DEL21 DEL66 DEL66 DEL42 DEL66