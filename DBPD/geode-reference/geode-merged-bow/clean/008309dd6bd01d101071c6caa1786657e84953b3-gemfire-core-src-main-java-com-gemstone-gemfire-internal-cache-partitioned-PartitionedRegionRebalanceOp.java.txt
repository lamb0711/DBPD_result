Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.CancelException;
+import com.gemstone.gemfire.internal.cache.partitioned.rebalance.ParallelBucketOperator;
+  private static final int MAX_PARALLEL_OPERATIONS = Integer.getInteger("gemfire.MAX_PARALLEL_BUCKET_RECOVERIES", 8);
+  private final boolean DEBUG = Boolean.getBoolean("gemfire.LOG_REBALANCE");
+  
-      BucketOperatorWrapper operator = getBucketOperator(detailsMap);
-      model = buildModel(operator, detailsMap, resourceManager);
-      for(PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {
+      BucketOperatorWrapper serialOperator = getBucketOperator(detailsMap);
+      ParallelBucketOperator parallelOperator = new ParallelBucketOperator(MAX_PARALLEL_OPERATIONS, cache.getDistributionManager().getWaitingThreadPool(), serialOperator);
+      model = buildModel(parallelOperator, detailsMap, resourceManager);
+      for(PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("Rebalancing {} detected membership changes. Refetching details", leaderRegion);
-          }
+          debug("Rebalancing {} detected membership changes. Refetching details", leaderRegion);
+          model.waitForOperations();
-          model = buildModel(operator, detailsMap, resourceManager);
+          model = buildModel(parallelOperator, detailsMap, resourceManager);
-      if (logger.isDebugEnabled()) {
-        logger.debug("Rebalancing {} complete. Model:{}\n", leaderRegion, model);
-      }
+      debug("Rebalancing {} complete. Model:{}\n", leaderRegion, model);
-      for(PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {
+      for(PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {
-      return Collections.<PartitionRebalanceInfo>unmodifiableSet(operator.getDetailSet());
+      return Collections.<PartitionRebalanceInfo>unmodifiableSet(serialOperator.getDetailSet());
+        } catch (CancelException e) {
+          // lock service has been destroyed
-    boolean enforceLocalMaxMemory = !leaderRegion.isEntryEvictionPossible();
-    Set<InternalDistributedMember> criticalMembers = resourceManager.getHeapCriticalMembers();
+    Set<InternalDistributedMember> criticalMembers = resourceManager.getResourceAdvisor().adviseCritialMembers();;
+    
+    debug("Building Model for rebalancing " + leaderRegion
+        + ". redundantCopies=" + redundantCopies + ", totalNumBuckets="
+        + totalNumberOfBuckets + ", criticalMembers=" + criticalMembers
+        + ", simulate=" + simulate);
+
+    
-        totalNumberOfBuckets, comparor, enforceLocalMaxMemory, 
-        criticalMembers, leaderRegion);
+        totalNumberOfBuckets, comparor, criticalMembers, leaderRegion);
-      if (isDebugEnabled) {
-        logger.debug("Added Region to model region={} details=", region);
-      }
-      for(PartitionMemberInfo memberDetails: details.getPartitionMemberInfo()) {
-        if (isDebugEnabled) {
-          logger.debug("Member: {} LOAD={}", memberDetails.getDistributedMember(), ((InternalPartitionDetails) memberDetails).getPRLoad());
-        }
-      }
-      Set<InternalPartitionDetails> memberDetailSet = 
-          details.getInternalPartitionDetails();
+      
-      model.addRegion(region.getFullPath(), memberDetailSet, offlineDetails);
+      boolean enforceLocalMaxMemory = !region.isEntryEvictionPossible();
+
+      debug("Added Region to model region=" + region + ", offlineDetails=" + offlineDetails 
+          + ", enforceLocalMaxMemory=" + enforceLocalMaxMemory);
+
+      for(PartitionMemberInfo memberDetails: details.getPartitionMemberInfo()) {
+        debug(
+            "For Region: " + region + ", Member: " + memberDetails.getDistributedMember() + "LOAD="
+                + ((InternalPartitionDetails) memberDetails).getPRLoad() 
+                +", equivalentMembers=" 
+                + dm.getMembersInSameZone((InternalDistributedMember) memberDetails.getDistributedMember()));
+      }
+      Set<InternalPartitionDetails> memberDetailSet = 
+          details.getInternalPartitionDetails();
+      
+      model.addRegion(region.getFullPath(), memberDetailSet, offlineDetails, enforceLocalMaxMemory);
+    debug("Rebalancing {} starting. Model:\n{}", leaderRegion, model);
+    
+  private void debug(String message, Object ...params) {
+    if(logger.isDebugEnabled()) {
+      logger.debug(message, params);
+    } else if(logger.isInfoEnabled() && DEBUG) {
+      logger.info(message, params);
+    }
+    
+  }
+
-        InternalDistributedMember whoSuspected) {
+        InternalDistributedMember whoSuspected, String reason) {
+    @Override
+    @Override
-    public boolean createRedundantBucket(
+    @Override
+    public void createRedundantBucket(
-        Map<String, Long> colocatedRegionBytes) {
-      return createRedundantBucketForRegion(targetMember, bucketId,
+        Map<String, Long> colocatedRegionBytes, Completion completion) {
+      boolean result = false;
+      try {
+        result = createRedundantBucketForRegion(targetMember, bucketId,
+      } finally {
+        if(result) {
+          completion.onSuccess();
+        } else {
+          completion.onFailure();
+        }
+      }
+    }
+    
+    @Override
+    public void waitForOperations() {
+      //do nothing, all operations are synchronous
+    @Override
-    
+    @Override
-    public boolean createRedundantBucket(
-        InternalDistributedMember targetMember, int i, 
-        Map<String, Long> colocatedRegionBytes) {
-      boolean result = false;
-      long elapsed = 0;
-      long totalBytes = 0;
-      
+    @Override
+    public void createRedundantBucket(
+        final InternalDistributedMember targetMember, final int i, 
+        final Map<String, Long> colocatedRegionBytes, final Completion completion) {
-      try {
-        long start = System.nanoTime();
-        result = delegate.createRedundantBucket(targetMember, i,  
-            colocatedRegionBytes);
-        elapsed= System.nanoTime() - start;
-        if (result) {
+      
+      final long start = System.nanoTime();
+      delegate.createRedundantBucket(targetMember, i,  
+          colocatedRegionBytes, new Completion() {
+
+        @Override
+        public void onSuccess() {
+          long totalBytes = 0;
+          long elapsed= System.nanoTime() - start;
-        } else {
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, true, totalBytes, elapsed);
+          }
+
+        }
+
+        @Override
+        public void onFailure() {
+          long elapsed= System.nanoTime() - start;
+
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, false, 0, elapsed);
+          }
-      } finally {
-        if(stats != null) {
-          stats.endBucketCreate(regionCount, result, totalBytes, elapsed);
-        }
-      }
-      
-      return result;
+      });
+    @Override
+    @Override
+    
+    @Override
+    public void waitForOperations() {
+      delegate.waitForOperations();
+    }

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 MOV60 INS83 INS39 INS42 INS44 INS44 INS8 INS31 INS31 INS42 INS32 INS42 INS32 INS20 INS21 INS21 INS43 INS42 INS43 INS42 INS25 INS44 INS78 INS78 INS78 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS78 INS78 UPD39 INS44 MOV8 INS78 INS78 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS45 INS34 INS42 INS42 INS45 MOV74 INS32 MOV70 MOV60 INS32 INS42 INS42 MOV32 INS8 INS25 INS43 INS42 INS42 INS42 INS42 INS43 INS42 MOV60 INS54 INS42 INS42 INS42 INS42 INS83 INS83 INS83 INS83 INS43 INS42 MOV25 INS42 INS42 INS42 INS21 INS60 MOV21 UPD42 INS32 INS42 INS27 INS60 MOV21 INS42 INS45 INS42 INS42 INS21 INS27 INS8 INS42 INS42 MOV8 INS8 INS42 INS83 INS32 INS32 INS43 INS59 INS32 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS39 INS59 MOV8 INS32 INS32 INS42 INS21 INS21 INS25 MOV42 MOV42 MOV42 MOV42 MOV42 INS14 INS42 INS42 UPD42 INS42 INS42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS38 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS8 INS8 INS43 INS1 INS43 INS42 INS32 INS42 UPD42 UPD42 INS12 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 INS21 INS42 INS31 INS31 INS42 INS32 INS42 MOV21 INS21 INS44 INS8 INS42 INS42 INS27 INS32 INS32 INS78 INS83 INS39 INS42 MOV8 INS78 INS83 INS39 INS42 MOV8 INS42 INS42 INS32 INS43 INS42 INS45 INS42 INS45 MOV32 INS45 MOV32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 MOV60 INS60 INS25 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS11 INS39 INS59 MOV27 INS8 INS39 INS59 INS27 INS8 UPD42 INS43 INS32 INS42 MOV27 INS21 INS42 INS27 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS34 INS42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL8 DEL25 DEL39 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL8 DEL25 DEL42 DEL45 DEL42 DEL42 DEL45 DEL42 DEL25 DEL8 DEL39 DEL42 DEL41 DEL42 DEL32 DEL7 DEL42 DEL7 DEL21 DEL42 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL41 DEL8