Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  //1. Load Commands, availability indicators - Take from GfshParser
-  //2. Load Converters - Take from GfshParser
-  //3. Load Result Converters - Add  
-  
+  // 1. Load Commands, availability indicators - Take from GfshParser
+  // 2. Load Converters - Take from GfshParser
+  // 3. Load Result Converters - Add
+
-  public static final String USER_CMD_PACKAGES_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + USER_COMMAND_PACKAGES;
+  public static final String USER_CMD_PACKAGES_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + USER_COMMAND_PACKAGES;
-  
+
-  
+
-  
-  private CommandManager(final boolean loadDefaultCommands, final Properties cacheProperties) throws ClassNotFoundException, IOException {
+
+  private CommandManager(final boolean loadDefaultCommands, final Properties cacheProperties)
+      throws ClassNotFoundException, IOException {
-    
+
-        logWrapper.fine("Commands Loaded: "+commands.keySet());
-        logWrapper.fine("Command Availability Indicators Loaded: "+availabilityIndicators.keySet());
-        logWrapper.fine("Converters Loaded: "+converters);
+        logWrapper.fine("Commands Loaded: " + commands.keySet());
+        logWrapper
+            .fine("Command Availability Indicators Loaded: " + availabilityIndicators.keySet());
+        logWrapper.fine("Converters Loaded: " + converters);
-  
+
-    
+
-      StringTokenizer tokenizer = new StringTokenizer(System.getProperty(USER_CMD_PACKAGES_PROPERTY), ",");
+      StringTokenizer tokenizer =
+          new StringTokenizer(System.getProperty(USER_CMD_PACKAGES_PROPERTY), ",");
-    
+
-      StringTokenizer tokenizer = new StringTokenizer(System.getenv().get(USER_CMD_PACKAGES_ENV_VARIABLE), ",");
+      StringTokenizer tokenizer =
+          new StringTokenizer(System.getenv().get(USER_CMD_PACKAGES_ENV_VARIABLE), ",");
-    
-    // Find by  packages specified in the distribution config
+
+    // Find by packages specified in the distribution config
-      String cacheUserCmdPackages = this.cacheProperties.getProperty(ConfigurationProperties.USER_COMMAND_PACKAGES);
+      String cacheUserCmdPackages =
+          this.cacheProperties.getProperty(ConfigurationProperties.USER_COMMAND_PACKAGES);
-    
+
-        Set<Class<?>> foundClasses = ClasspathScanLoadHelper.loadAndGet(userCommandPackage, CommandMarker.class, true);
+        Set<Class<?>> foundClasses =
+            ClasspathScanLoadHelper.loadAndGet(userCommandPackage, CommandMarker.class, true);
-            logWrapper.warning("Could not load User Commands from: " + klass+" due to "+e.getLocalizedMessage()); // continue
+            logWrapper.warning("Could not load User Commands from: " + klass + " due to "
+                + e.getLocalizedMessage()); // continue
-        logWrapper.warning("Could not load User Commands due to "+ e.getLocalizedMessage());
+        logWrapper.warning("Could not load User Commands due to " + e.getLocalizedMessage());
-        logWrapper.warning("Could not load User Commands due to "+ e.getLocalizedMessage());
+        logWrapper.warning("Could not load User Commands due to " + e.getLocalizedMessage());
-   * Loads commands via {@link ServiceLoader} from {@link ClassPathLoader}. 
+   * Loads commands via {@link ServiceLoader} from {@link ClassPathLoader}.
-    final Iterator<CommandMarker> iterator  = ServiceLoader.load(CommandMarker.class, ClassPathLoader.getLatest().asClassLoader()).iterator();
+    final Iterator<CommandMarker> iterator = ServiceLoader
+        .load(CommandMarker.class, ClassPathLoader.getLatest().asClassLoader()).iterator();
-          logWrapper.warning("Could not load Command from: " + commandMarker.getClass() + " due to " + e.getLocalizedMessage(), e); // continue
+          logWrapper.warning("Could not load Command from: " + commandMarker.getClass() + " due to "
+              + e.getLocalizedMessage(), e); // continue
-  
+
-    
+
-    
-    //CommandMarkers
+
+    // CommandMarkers
-      foundClasses = ClasspathScanLoadHelper.loadAndGet("org.apache.geode.management.internal.cli.commands", CommandMarker.class, true);
+      foundClasses = ClasspathScanLoadHelper.loadAndGet(
+          "org.apache.geode.management.internal.cli.commands", CommandMarker.class, true);
-          add((CommandMarker)klass.newInstance());
+          add((CommandMarker) klass.newInstance());
-          logWrapper.warning("Could not load Command from: "+ klass +" due to "+e.getLocalizedMessage()); // continue
+          logWrapper.warning(
+              "Could not load Command from: " + klass + " due to " + e.getLocalizedMessage()); // continue
-      logWrapper.warning("Could not load Commands due to "+ e.getLocalizedMessage());
+      logWrapper.warning("Could not load Commands due to " + e.getLocalizedMessage());
-      logWrapper.warning("Could not load Commands due to "+ e.getLocalizedMessage());
+      logWrapper.warning("Could not load Commands due to " + e.getLocalizedMessage());
-    
-    //Converters
+
+    // Converters
-      foundClasses = ClasspathScanLoadHelper.loadAndGet("org.apache.geode.management.internal.cli.converters", Converter.class, true);
+      foundClasses = ClasspathScanLoadHelper
+          .loadAndGet("org.apache.geode.management.internal.cli.converters", Converter.class, true);
-          add((Converter<?>)klass.newInstance());
+          add((Converter<?>) klass.newInstance());
-          logWrapper.warning("Could not load Converter from: "+ klass + " due to "+e.getLocalizedMessage()); // continue
+          logWrapper.warning(
+              "Could not load Converter from: " + klass + " due to " + e.getLocalizedMessage()); // continue
-      logWrapper.warning("Could not load Converters due to "+ e.getLocalizedMessage());
+      logWrapper.warning("Could not load Converters due to " + e.getLocalizedMessage());
-      logWrapper.warning("Could not load Converters due to "+ e.getLocalizedMessage());
+      logWrapper.warning("Could not load Converters due to " + e.getLocalizedMessage());
-    
-    //Roo's Converters
+
+    // Roo's Converters
-      foundClasses = ClasspathScanLoadHelper.loadAndGet("org.springframework.shell.converters", Converter.class, true);
+      foundClasses = ClasspathScanLoadHelper.loadAndGet("org.springframework.shell.converters",
+          Converter.class, true);
-            add((Converter<?>)klass.newInstance());
+            add((Converter<?>) klass.newInstance());
-          logWrapper.warning("Could not load Converter from: "+klass+ " due to "+e.getLocalizedMessage()); // continue
+          logWrapper.warning(
+              "Could not load Converter from: " + klass + " due to " + e.getLocalizedMessage()); // continue
-      logWrapper.warning("Could not load Default Converters due to "+ e.getLocalizedMessage());//TODO - Abhishek: Should these converters be moved in GemFire?
+      logWrapper.warning("Could not load Default Converters due to " + e.getLocalizedMessage());// TODO
+                                                                                                // -
+                                                                                                // Abhishek:
+                                                                                                // Should
+                                                                                                // these
+                                                                                                // converters
+                                                                                                // be
+                                                                                                // moved
+                                                                                                // in
+                                                                                                // GemFire?
-      logWrapper.warning("Could not load Default Converters due to "+ e.getLocalizedMessage());//TODO - Abhishek: Should these converters be moved in GemFire?
+      logWrapper.warning("Could not load Default Converters due to " + e.getLocalizedMessage());// TODO
+                                                                                                // -
+                                                                                                // Abhishek:
+                                                                                                // Should
+                                                                                                // these
+                                                                                                // converters
+                                                                                                // be
+                                                                                                // moved
+                                                                                                // in
+                                                                                                // GemFire?
-  private static void raiseExceptionIfEmpty(Set<Class<?>> foundClasses, String errorFor) throws IllegalStateException {
+  private static void raiseExceptionIfEmpty(Set<Class<?>> foundClasses, String errorFor)
+      throws IllegalStateException {
-      throw new IllegalStateException("Required " + errorFor + " classes were not loaded. Check logs for errors.");
+      throw new IllegalStateException(
+          "Required " + errorFor + " classes were not loaded. Check logs for errors.");
-  
-  public static CommandManager getInstance(Properties cacheProperties) throws ClassNotFoundException, IOException {
+
+  public static CommandManager getInstance(Properties cacheProperties)
+      throws ClassNotFoundException, IOException {
-  
+
-  
-  //This method exists for test code use only ...
-  /*package*/static CommandManager getInstance(boolean loadDefaultCommands) 
+
+  // This method exists for test code use only ...
+  /* package */static CommandManager getInstance(boolean loadDefaultCommands)
-  
-  private static CommandManager getInstance(boolean loadDefaultCommands, Properties cacheProperties) 
+
+  private static CommandManager getInstance(boolean loadDefaultCommands, Properties cacheProperties)
-  
+
-//    if (INSTANCE == null) {
-//      throw new IllegalStateException("CommandManager doesn't exist.");
-//    }
+    // if (INSTANCE == null) {
+    // throw new IllegalStateException("CommandManager doesn't exist.");
+    // }
-  /** Skip some of the Converters from Spring Shell for our customization  */
+  /** Skip some of the Converters from Spring Shell for our customization */
-    //Over-ridden by cggm.internal.cli.converters.BooleanConverter
+    // Over-ridden by cggm.internal.cli.converters.BooleanConverter
-    //Over-ridden by cggm.internal.cli.converters.EnumConverter
+    // Over-ridden by cggm.internal.cli.converters.EnumConverter
-   * List of converters which should be populated first before any command can
-   * be added
+   * List of converters which should be populated first before any command can be added
-  private final Map<String, AvailabilityTarget> availabilityIndicators = new HashMap<String, AvailabilityTarget>();
+  private final Map<String, AvailabilityTarget> availabilityIndicators =
+      new HashMap<String, AvailabilityTarget>();
-  
+
- // First we need to find out all the methods marked with
+    // First we need to find out all the methods marked with
-              Argument argumentToAdd = createArgument((CliArgument) annotation, parameterType, parameterNo);
+              Argument argumentToAdd =
+                  createArgument((CliArgument) annotation, parameterType, parameterNo);
-              Option createdOption = createOption((CliOption) annotation, parameterType, parameterNo);
-              if (!CliMetaData.ANNOTATION_NULL_VALUE.equals(valueSeparator)) { // CliMetaData was found earlier
+              Option createdOption =
+                  createOption((CliOption) annotation, parameterType, parameterNo);
+              if (!CliMetaData.ANNOTATION_NULL_VALUE.equals(valueSeparator)) { // CliMetaData was
+                                                                               // found earlier
-              valueSeparator = ((CliMetaData)annotation).valueSeparator();
+              valueSeparator = ((CliMetaData) annotation).valueSeparator();
-                if (paramFound) { //CliOption was detected earlier
+                if (paramFound) { // CliOption was detected earlier
-        GfshMethodTarget gfshMethodTarget = new GfshMethodTarget(method,
-            commandMarker);
+        GfshMethodTarget gfshMethodTarget = new GfshMethodTarget(method, commandMarker);
-        CommandTarget commandTarget = new CommandTarget(commandName, synonyms,
-            gfshMethodTarget, optionParser, null, cliCommand.help());
+        CommandTarget commandTarget = new CommandTarget(commandName, synonyms, gfshMethodTarget,
+            optionParser, null, cliCommand.help());
-          if(commands.get(string)==null){
+          if (commands.get(string) == null) {
-            //TODO Handle collision
-            logWrapper.info("Multiple commands configured with the same name: "+string);
+            // TODO Handle collision
+            logWrapper.info("Multiple commands configured with the same name: " + string);
-//            System.out.println("relatedTopic :: "+Arrays.toString(relatedTopics));
+            // System.out.println("relatedTopic :: "+Arrays.toString(relatedTopics));
-        
+
-        CliAvailabilityIndicator cliAvailabilityIndicator = method
-            .getAnnotation(CliAvailabilityIndicator.class);
+        CliAvailabilityIndicator cliAvailabilityIndicator =
+            method.getAnnotation(CliAvailabilityIndicator.class);
-        AvailabilityTarget availabilityIndicator = new AvailabilityTarget(
-            commandMarker, method);
+        AvailabilityTarget availabilityIndicator = new AvailabilityTarget(commandMarker, method);
-  
-/**
+
+  /**
-        commandTarget.setAvailabilityIndicator(availabilityIndicators
-            .get(string));
+        commandTarget.setAvailabilityIndicator(availabilityIndicators.get(string));
-  public Option createOption(CliOption cliOption, Class<?> parameterType,
-      int parameterNo) {
+  public Option createOption(CliOption cliOption, Class<?> parameterType, int parameterNo) {
-  public Argument createArgument(CliArgument cliArgument,
-      Class<?> parameterType, int parameterNo) {
+  public Argument createArgument(CliArgument cliArgument, Class<?> parameterType, int parameterNo) {
-   * For the time being this method returns a {@link JoptOptionParser} object
-   * but in the future we can change which optionParser should be returned.
+   * For the time being this method returns a {@link JoptOptionParser} object but in the future we
+   * can change which optionParser should be returned.
-      
+

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66