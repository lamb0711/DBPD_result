GEODE-7177: Logging as a submodule (#4129)

* GEODE-7177: Extract LogService to a separate submodule

- Extracting LogService and it's dependencies to a separate geode-logging
submodule so that other modules not in geode-core can still use LogService to
get a Logger.

- Removing the use of the logging SPI from LogService
LogService had a dependency on the logging SPI in geode-core. However, this
dependency was unecessary - the LoggingProvider loaded statically in this class
never had `configure` called on it. In addition, the getLogger methods of this
class are merely creating FastLoggers which can live inside geode-logging and
do not need to be pluggable.

- Moved executors that are not dependent on geode-core to geode-logging and
renamed the remaining executors to be CoreLoggingExecutors.

- Refactor the marker interface from Loggable to EntriesCollection

- EntriesCollection put back into internal.cache and AbstractRegion now implements the marker
- Formerly known as Loggable renamed to LogWithToString

- Remove marker interface called EntriesCollection completely, replace with LogWithToString.

-import static org.apache.geode.distributed.internal.InternalDistributedSystem.SHUTDOWN_HOOK_NAME;
-
-import org.apache.geode.SystemFailure;
-      new Implementation(LogService.getLogger(), error -> SystemFailure.setFailure(error));
+      new Implementation(LogService.getLogger());
+  public static void setFailureSetter(final FailureSetter failureSetter) {
+    handler.setFailureSetter(failureSetter);
+  }
+
-  interface FailureSetter {
-
+  public interface FailureSetter {
-    private final FailureSetter failureSetter;
+    private FailureSetter failureSetter;
-    Implementation(final Logger logger, final FailureSetter failureSetter) {
+    Implementation(final Logger logger) {
-      this.failureSetter = failureSetter;
-      if (e instanceof VirtualMachineError) {
+      if (e instanceof VirtualMachineError && failureSetter != null) {
-      if (e instanceof NoClassDefFoundError && t.getName().equals(SHUTDOWN_HOOK_NAME)) {
+      if (e instanceof NoClassDefFoundError && !((LoggingThread) t).isTreatExceptionAsFatal()) {
+    void setFailureSetter(final FailureSetter failureSetter) {
+      this.failureSetter = failureSetter;
+    }
+

INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS31 INS83 INS43 INS42 INS21 INS39 INS42 MOV44 INS8 INS42 INS32 MOV21 INS42 INS42 INS42 INS27 MOV62 INS27 INS38 INS42 INS33 INS32 INS36 UPD42 MOV42 INS11 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL83 DEL42 DEL32 DEL42 DEL42 DEL32