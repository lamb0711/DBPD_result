Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An instance of ThrottlingMemLinkedQueue allows the instantiator to
- * specify a maximum queue footprint (M) and a size to begin throttling (B) 
- * (which must be between 1 and the M).  When adding an element to
- * the queue, if the size of the queue is less than B, the element is
- * added immediately.  In case of udp, If the size of the queue has reached M, 
- * the add will block until the size is less than M.  If the size of the
- * queue is between B and M, the add will block with a sleep time that
- * is at least 1 millisecond, and is proportional to the size of the 
- * queue.
+ * An instance of ThrottlingMemLinkedQueue allows the instantiator to specify a maximum queue
+ * footprint (M) and a size to begin throttling (B) (which must be between 1 and the M). When adding
+ * an element to the queue, if the size of the queue is less than B, the element is added
+ * immediately. In case of udp, If the size of the queue has reached M, the add will block until the
+ * size is less than M. If the size of the queue is between B and M, the add will block with a sleep
+ * time that is at least 1 millisecond, and is proportional to the size of the queue.
- * ThrottlingMemLinkedQueue objects can currently hold only Sizeable objects.
- * Inserting other types of objects will cause class cast exceptions to be thrown
- * on put/take.
+ * ThrottlingMemLinkedQueue objects can currently hold only Sizeable objects. Inserting other types
+ * of objects will cause class cast exceptions to be thrown on put/take.
-  
+
-  
+
-  
+
-  public ThrottlingMemLinkedQueueWithDMStats(int maxMemSize, int startThrottleMemSize,
-                                             int maxSize, int startThrottleSize,
-                                          ThrottledMemQueueStatHelper stats) {
+  public ThrottlingMemLinkedQueueWithDMStats(int maxMemSize, int startThrottleMemSize, int maxSize,
+      int startThrottleSize, ThrottledMemQueueStatHelper stats) {
-  
+
-  public int getThrottleTime() {    
+  public int getThrottleTime() {
-  
+
-      sleep = (int)(((float)(myMemSize - startThrottleMemSize) / (float)(maxMemSize - startThrottleMemSize)) * 100); 
+      sleep = (int) (((float) (myMemSize - startThrottleMemSize)
+          / (float) (maxMemSize - startThrottleMemSize)) * 100);
-        sleep = (int)(((float)(qSize - startThrottleSize) / (float)(maxSize - startThrottleSize)) * 100);
+        sleep = (int) (((float) (qSize - startThrottleSize) / (float) (maxSize - startThrottleSize))
+            * 100);
-       
+
-    
+
-  
+
-    } 
-    catch (InterruptedException ex) {
+    } catch (InterruptedException ex) {
+
-    if (Thread.interrupted()) throw new InterruptedException();
-    // only block threads reading from tcp stream sockets.  blocking udp
+    if (Thread.interrupted())
+      throw new InterruptedException();
+    // only block threads reading from tcp stream sockets. blocking udp
-          ((ThrottledMemQueueStatHelper)this.stats).throttleTime(endTime-startTime);
+          ((ThrottledMemQueueStatHelper) this.stats).throttleTime(endTime - startTime);
-      
-      ((ThrottledMemQueueStatHelper)this.stats).incThrottleCount();
+
+      ((ThrottledMemQueueStatHelper) this.stats).incThrottleCount();
-      int mem = ((Sizeable)o).getSize();
-      ((ThrottledMemQueueStatHelper)this.stats).addMem(mem);
+      int mem = ((Sizeable) o).getSize();
+      ((ThrottledMemQueueStatHelper) this.stats).addMem(mem);
-  
+
-      int mem = ((Sizeable)o).getSize();
+      int mem = ((Sizeable) o).getSize();
-      ((ThrottledMemQueueStatHelper)this.stats).removeMem(mem);
+      ((ThrottledMemQueueStatHelper) this.stats).removeMem(mem);
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66