Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.query.Struct;
+import com.gemstone.gemfire.cache.query.internal.PRQueryTraceInfo;
+import com.gemstone.gemfire.cache.query.internal.StructImpl;
+import com.gemstone.gemfire.cache.query.internal.types.StructTypeImpl;
+import com.gemstone.gemfire.cache.query.types.ObjectType;
+import com.gemstone.gemfire.internal.InternalDataSerializer;
+import com.gemstone.gemfire.internal.Version;
+    
+      Version senderVersion = InternalDataSerializer.getVersionForDataStream(in);
+      boolean isSenderAbove_8_1 = senderVersion.compareTo(Version.GFE_81) > 0;
+          ObjectType elementType = null;
+          if(isQueryMessageProcessor) {
+            elementType = ((PartitionedRegionQueryEvaluator.
+                StreamingQueryPartitionResponse)messageProcessor).getResultType();            
+          }
+          
+            if(isQueryMessageProcessor && elementType != null && elementType.isStructType()) {
+              boolean convertToStruct = isSenderAbove_8_1 ;
+              if(convertToStruct && i == 0) {
+                convertToStruct = !(o instanceof PRQueryTraceInfo);
+              }
+              if(convertToStruct) {
+                o = new StructImpl( (StructTypeImpl)elementType, (Object[])o);
+              }
+            }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS60 INS60 INS43 INS59 INS39 INS59 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS40 INS60 INS25 INS43 INS59 INS42 INS8 INS42 INS42 INS33 INS21 INS25 INS7 INS27 INS8 INS42 INS32 INS27 INS32 INS60 INS25 INS25 INS36 INS42 INS42 INS27 INS42 INS42 INS39 INS59 INS27 INS8 INS42 INS8 INS11 INS42 INS33 INS42 INS42 INS42 INS27 INS21 INS21 INS43 INS42 INS42 INS34 INS7 INS7 INS40 INS42 INS38 INS42 INS14 INS36 INS43 INS11 INS11 INS62 INS42 INS43 INS42 INS5 INS42 INS42 INS43 INS42 INS43 INS85 INS42 INS42