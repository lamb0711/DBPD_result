Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.backup.BackupService;
-  final ConcurrentMap<Integer, BucketRegion> localBucket2RegionMap;
+  private final ConcurrentMap<Integer, BucketRegion> localBucket2RegionMap;
-  // /**
-  // * Checks whether there is room in this Map to accommodate more data without
-  // * pushing the Map over its rebalance threshold.
-  // *
-  // * @param bytes
-  // * the size to check in bytes
-  // */
-  // boolean canAccommodateMoreBytesSafely(long bytes)
-  // {
-  //
-  // if (this.partitionedRegion.getLocalMaxMemory() == 0) {
-  // return false;
-  // }
-  // long allocatedMemory = currentAllocatedMemory();
-  // // precision coercion from int to long on bytes
-  // long newAllocatedSize = allocatedMemory + bytes;
-  // if (newAllocatedSize < (this.partitionedRegion.getLocalMaxMemory()
-  // * PartitionedRegionHelper.BYTES_PER_MB * this.partitionedRegion.rebalanceThreshold)) {
-  // return true;
-  // }
-  // else {
-  // return false;
-  // }
-  // }
+  ConcurrentMap<Integer, BucketRegion> getLocalBucket2RegionMap() {
+    return this.localBucket2RegionMap;
+  }
-    factory.setConcurrencyChecksEnabled(this.partitionedRegion.concurrencyChecksEnabled);
+    factory.setConcurrencyChecksEnabled(this.partitionedRegion.getConcurrencyChecksEnabled());
-        int executor = DistributionManager.WAITING_POOL_EXECUTOR;
+        int executor = ClusterDistributionManager.WAITING_POOL_EXECUTOR;
-    BackupManager backupManager = getPartitionedRegion().getGemFireCache().getBackupManager();
-    if (getPartitionedRegion().getDataPolicy().withPersistence() && backupManager != null) {
-      backupManager.waitForBackup();
+    BackupService backupService = getPartitionedRegion().getGemFireCache().getBackupService();
+    if (getPartitionedRegion().getDataPolicy().withPersistence()) {
+      backupService.waitForBackup();
-    AbstractLRURegionMap map = (AbstractLRURegionMap) br.getRegionMap();
-    return map.getEntryOverHead();
+    return br.getRegionMap().getEntryOverhead();
-    final DM dm = this.partitionedRegion.getDistributionManager();
+    final DistributionManager dm = this.partitionedRegion.getDistributionManager();

UPD40 UPD40 INS31 INS83 INS74 INS42 INS8 INS43 INS43 INS43 INS41 INS42 INS42 INS42 INS22 INS32 UPD43 MOV32 UPD43 INS52 INS42 INS42 INS42 MOV32 UPD42 UPD42 MOV32 UPD42 UPD42 MOV22 UPD42 UPD42 UPD42 UPD40 DEL42 DEL42 DEL22 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL42