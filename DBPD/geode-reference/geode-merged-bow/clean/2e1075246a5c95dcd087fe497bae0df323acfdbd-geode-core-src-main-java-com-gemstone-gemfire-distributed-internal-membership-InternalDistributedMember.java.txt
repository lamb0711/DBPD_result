Merge branch 'release/1.0.0-incubating.M3'

-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.EOFException;
-import java.io.Externalizable;
-import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectOutput;
-import java.net.Inet4Address;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.internal.Assert;
-import com.gemstone.gemfire.internal.DataSerializableFixedID;
-import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.OSProcess;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.Version;
+import com.gemstone.gemfire.internal.*;
+import java.io.*;
+import java.net.Inet4Address;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.*;
+
-  private final boolean SHOW_NETMEMBER = Boolean.getBoolean("gemfire.show_netmembers");
+  private final boolean SHOW_NETMEMBER = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "show_netmembers");
-  /** serialization bit mask */
-  private static final int SB_ENABLED_MASK = 0x1;
+  /** serialization bit flag */
+  private static final int NPD_ENABLED_BIT = 0x1;
-  /** serialization bit mask */
-  private static final int COORD_ENABLED_MASK = 0x2;
+  /** serialization bit flag */
+  private static final int COORD_ENABLED_BIT = 0x2;
-  /** partial ID bit mask */
-  private static final int PARTIAL_ID_MASK = 0x4;
+  /** partial ID bit flag */
+  private static final int PARTIAL_ID_BIT = 0x4;
-  /** product version bit mask */
-  private static final int VERSION_MASK = 0x8;
+  /** product version bit flag */
+  private static final int VERSION_BIT = 0x8;
-   * @since 4.0
+   * @since GemFire 4.0
-   * @since 4.0
+   * @since GemFire 4.0
-    if ((flags & VERSION_MASK) != 0) {
+    if ((flags & VERSION_BIT) != 0) {
-    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    if (this.isPartial) flags |= PARTIAL_ID_MASK;
+    if (netMbr.isNetworkPartitionDetectionEnabled()) flags |= NPD_ENABLED_BIT;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_BIT;
+    if (this.isPartial) flags |= PARTIAL_ID_BIT;
-    flags |= VERSION_MASK;
+    flags |= VERSION_BIT;
-     boolean sbEnabled = (flags & SB_ENABLED_MASK) != 0;
-     boolean elCoord = (flags & COORD_ENABLED_MASK) != 0;
-     this.isPartial = (flags & PARTIAL_ID_MASK) != 0;
+     boolean sbEnabled = (flags & NPD_ENABLED_BIT) != 0;
+     boolean elCoord = (flags & COORD_ENABLED_BIT) != 0;
+     this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
-    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    if (this.isPartial) flags |= PARTIAL_ID_MASK;
+    if (netMbr.isNetworkPartitionDetectionEnabled()) flags |= NPD_ENABLED_BIT;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_BIT;
+    if (this.isPartial) flags |= PARTIAL_ID_BIT;
-    flags |= VERSION_MASK;
+    flags |= VERSION_BIT;
-    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    if (this.isPartial) flags |= PARTIAL_ID_MASK;
+    if (netMbr.isNetworkPartitionDetectionEnabled()) flags |= NPD_ENABLED_BIT;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_BIT;
+    if (this.isPartial) flags |= PARTIAL_ID_BIT;
-    boolean sbEnabled = (flags & SB_ENABLED_MASK) != 0;
-    boolean elCoord = (flags & COORD_ENABLED_MASK) != 0;
-    this.isPartial = (flags & PARTIAL_ID_MASK) != 0;
+    boolean sbEnabled = (flags & NPD_ENABLED_BIT) != 0;
+    boolean elCoord = (flags & COORD_ENABLED_BIT) != 0;
+    this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
-    boolean sbEnabled = (flags & SB_ENABLED_MASK) != 0;
-    boolean elCoord = (flags & COORD_ENABLED_MASK) != 0;
-    this.isPartial = (flags & PARTIAL_ID_MASK) != 0;
+    boolean sbEnabled = (flags & NPD_ENABLED_BIT) != 0;
+    boolean elCoord = (flags & COORD_ENABLED_BIT) != 0;
+    this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
-     boolean sbEnabled = (flags & SB_ENABLED_MASK) != 0;
-     boolean elCoord = (flags & COORD_ENABLED_MASK) != 0;
+     boolean sbEnabled = (flags & NPD_ENABLED_BIT) != 0;
+     boolean elCoord = (flags & COORD_ENABLED_BIT) != 0;
-     if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-     if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-     flags |= PARTIAL_ID_MASK;
+     if (netMbr.isNetworkPartitionDetectionEnabled()) flags |= NPD_ENABLED_BIT;
+     if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_BIT;
+     flags |= PARTIAL_ID_BIT;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD42 UPD42 UPD42 UPD42 INS27 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS40 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45