GEODE-6301: Add call stack support to ExecutorServiceRule

+import java.lang.management.ManagementFactory;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.lang.ref.WeakReference;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+  protected transient volatile DedicatedThreadFactory threadFactory;
-    executor = Executors.newCachedThreadPool();
+    threadFactory = new DedicatedThreadFactory();
+    executor = Executors.newCachedThreadPool(threadFactory);
+  /**
+   * Returns the {@code Thread}s that are directly in the {@code ExecutorService}'s
+   * {@code ThreadGroup} excluding subgroups.
+   */
+  public Set<Thread> getThreads() {
+    return threadFactory.getThreads();
+  }
+
+  /**
+   * Returns an array of {@code Thread Ids} that are directly in the {@code ExecutorService}'s
+   * {@code ThreadGroup} excluding subgroups. {@code long[]} is returned to facilitate using JDK
+   * APIs such as {@code ThreadMXBean#getThreadInfo(long[], int)}.
+   */
+  public long[] getThreadIds() {
+    Set<Thread> threads = getThreads();
+    long[] threadIds = new long[threads.size()];
+
+    int i = 0;
+    for (Thread thread : threads) {
+      threadIds[i++] = thread.getId();
+    }
+
+    return threadIds;
+  }
+
+  /**
+   * Returns formatted call stacks of the {@code Thread}s that are directly in the
+   * {@code ExecutorService}'s {@code ThreadGroup} excluding subgroups.
+   */
+  public String dumpThreads() {
+    StringBuilder dump = new StringBuilder();
+    ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
+    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(getThreadIds(), 100);
+    for (ThreadInfo threadInfo : threadInfos) {
+      dump.append('"');
+      dump.append(threadInfo.getThreadName());
+      dump.append("\" ");
+      final Thread.State state = threadInfo.getThreadState();
+      dump.append("\n   java.lang.Thread.State: ");
+      dump.append(state);
+      final StackTraceElement[] stackTraceElements = threadInfo.getStackTrace();
+      for (final StackTraceElement stackTraceElement : stackTraceElements) {
+        dump.append("\n        at ");
+        dump.append(stackTraceElement);
+      }
+      dump.append("\n\n");
+    }
+    return dump.toString();
+  }
+
+  /**
+   * Modified version of {@code java.util.concurrent.Executors$DefaultThreadFactory} that uses
+   * a {@code Set<WeakReference<Thread>>} to track the {@code Thread}s in the factory's
+   * {@code ThreadGroup} excluding subgroups.
+   */
+  static class DedicatedThreadFactory implements ThreadFactory {
+    private static final AtomicInteger poolNumber = new AtomicInteger(1);
+    private final ThreadGroup group;
+    private final AtomicInteger threadNumber = new AtomicInteger(1);
+    private final String namePrefix;
+    private final Set<WeakReference<Thread>> directThreads = new HashSet<>();
+
+    DedicatedThreadFactory() {
+      group = new ThreadGroup(ExecutorServiceRule.class.getSimpleName() + "-ThreadGroup");
+      namePrefix = "pool-" + poolNumber.getAndIncrement() + "-thread-";
+    }
+
+    @Override
+    public Thread newThread(Runnable r) {
+      Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
+      if (t.isDaemon()) {
+        t.setDaemon(false);
+      }
+      if (t.getPriority() != Thread.NORM_PRIORITY) {
+        t.setPriority(Thread.NORM_PRIORITY);
+      }
+      directThreads.add(new WeakReference<>(t));
+      return t;
+    }
+
+    Set<Thread> getThreads() {
+      Set<Thread> value = new HashSet<>();
+      for (WeakReference<Thread> reference : directThreads) {
+        Thread thread = reference.get();
+        if (thread != null) {
+          value.add(thread);
+        }
+      }
+      return value;
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS42 INS21 INS65 INS43 INS43 INS41 INS65 INS39 INS85 INS60 INS60 INS60 INS70 INS41 INS65 INS42 INS60 INS60 INS60 INS70 INS41 INS65 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS74 INS42 INS8 INS7 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS32 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS74 INS59 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS43 INS59 INS43 INS59 INS5 INS59 INS44 INS42 INS8 INS32 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS74 INS42 INS14 INS21 INS21 INS42 INS42 INS43 INS42 INS60 INS25 INS25 INS21 INS41 INS43 INS43 INS60 INS70 INS41 INS42 INS14 INS66 INS66 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS42 INS32 INS39 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS66 INS66 INS66 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS21 INS21 INS60 INS21 INS21 INS60 INS70 INS21 INS42 INS42 INS66 INS66 INS66 INS66 INS43 INS34 INS43 INS34 INS42 INS43 INS43 INS74 INS7 INS7 INS42 INS43 INS59 INS32 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS32 INS32 INS32 INS83 INS43 INS59 INS32 INS32 INS83 INS5 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS14 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS21 INS32 INS40 INS21 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS74 INS42 INS60 INS25 INS42 INS39 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS45 INS40 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS83 INS43 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS43 INS27 INS45 INS32 INS45 INS43 INS42 INS42 INS27 INS34 INS32 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS40 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42