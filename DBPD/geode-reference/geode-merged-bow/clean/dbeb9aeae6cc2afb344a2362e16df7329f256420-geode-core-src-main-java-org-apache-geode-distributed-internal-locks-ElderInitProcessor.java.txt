Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A processor for initializing the ElderState. This may involve sending
- * a message to every existing member to discover what services they have.
+ * A processor for initializing the ElderState. This may involve sending a message to every existing
+ * member to discover what services they have.
-  
+
-  
+
-   * Initializes ElderState map by recovering all existing grantors
-   * and crashed grantors in the current ds.
+   * Initializes ElderState map by recovering all existing grantors and crashed grantors in the
+   * current ds.
-        ElderInitProcessor processor = new ElderInitProcessor(dm, others,
-                                                              map,
-                                                              crashedGrantors);
+        ElderInitProcessor processor = new ElderInitProcessor(dm, others, map, crashedGrantors);
-    GrantorRequestProcessor.readyForElderRecovery(
-        dm.getSystem(),
-        null, null);
+    GrantorRequestProcessor.readyForElderRecovery(dm.getSystem(), null, null);
-  ////////////  Instance methods //////////////
-  
-  /** Creates a new instance of ElderInitProcessor
+  //////////// Instance methods //////////////
+
+  /**
+   * Creates a new instance of ElderInitProcessor
-  private ElderInitProcessor(DM dm, Set others, HashMap grantors,
-                             HashSet crashedGrantors) {
-    super(dm/*fix bug 33297*/, others);
+  private ElderInitProcessor(DM dm, Set others, HashMap grantors, HashSet crashedGrantors) {
+    super(dm/* fix bug 33297 */, others);
-  private synchronized void processData(ArrayList rmtGrantors, ArrayList rmtGrantorVersions, ArrayList rmtGrantorSerialNumbers, ArrayList rmtNonGrantors, InternalDistributedMember rmtId) {
+  private synchronized void processData(ArrayList rmtGrantors, ArrayList rmtGrantorVersions,
+      ArrayList rmtGrantorSerialNumbers, ArrayList rmtNonGrantors,
+      InternalDistributedMember rmtId) {
-        String serviceName = (String)iterGrantorServices.next();
-        long versionId = ((Long)iterGrantorVersions.next()).longValue();
-        int serialNumber = ((Integer)iterGrantorSerialNumbers.next()).intValue();
-        GrantorInfo oldgi = (GrantorInfo)this.grantors.get(serviceName);
-        if (oldgi == null
-            || oldgi.getVersionId() < versionId) {
+        String serviceName = (String) iterGrantorServices.next();
+        long versionId = ((Long) iterGrantorVersions.next()).longValue();
+        int serialNumber = ((Integer) iterGrantorSerialNumbers.next()).intValue();
+        GrantorInfo oldgi = (GrantorInfo) this.grantors.get(serviceName);
+        if (oldgi == null || oldgi.getVersionId() < versionId) {
-        String serviceName = (String)it.next();
+        String serviceName = (String) it.next();
+
-      ElderInitReplyMessage eiMsg = (ElderInitReplyMessage)msg;
-      processData(eiMsg.getGrantors(), eiMsg.getGrantorVersions(), eiMsg.getGrantorSerialNumbers(), eiMsg.getNonGrantors(), eiMsg.getSender());
+      ElderInitReplyMessage eiMsg = (ElderInitReplyMessage) msg;
+      processData(eiMsg.getGrantors(), eiMsg.getGrantorVersions(), eiMsg.getGrantorSerialNumbers(),
+          eiMsg.getNonGrantors(), eiMsg.getSender());
-      Assert.assertTrue(false, "Expected instance of ElderInitReplyMessage but got " + msg.getClass());
+      Assert.assertTrue(false,
+          "Expected instance of ElderInitReplyMessage but got " + msg.getClass());
-  
-  ///////////////   Inner message classes  //////////////////
-  
-  public static final class ElderInitMessage
-    extends PooledDistributionMessage implements MessageWithReply
-  {
+
+  /////////////// Inner message classes //////////////////
+
+  public static final class ElderInitMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-    
-    protected static void send(Set others,
-                             DM dm, 
-                             ReplyProcessor21 proc)
-    {
+
+    protected static void send(Set others, DM dm, ReplyProcessor21 proc) {
-  
+
-    private void reply(DM dm, ArrayList grantors, ArrayList grantorVersions, ArrayList grantorSerialNumbers, ArrayList nonGrantors) {
-      ElderInitReplyMessage.send(this, dm, grantors, grantorVersions, grantorSerialNumbers, nonGrantors);
+    private void reply(DM dm, ArrayList grantors, ArrayList grantorVersions,
+        ArrayList grantorSerialNumbers, ArrayList nonGrantors) {
+      ElderInitReplyMessage.send(this, dm, grantors, grantorVersions, grantorSerialNumbers,
+          nonGrantors);
-    
+
-      ArrayList grantors = new ArrayList();        // svc names grantor for
+      ArrayList grantors = new ArrayList(); // svc names grantor for
-      ArrayList nonGrantors = new ArrayList();     // svc names non-grantor for
+      ArrayList nonGrantors = new ArrayList(); // svc names non-grantor for
-        GrantorRequestProcessor.readyForElderRecovery(
-            dm.getSystem(),
-            this.getSender(), null);
-        DLockService.recoverRmtElder(grantors, grantorVersions, 
-            grantorSerialNumbers, nonGrantors);
+        GrantorRequestProcessor.readyForElderRecovery(dm.getSystem(), this.getSender(), null);
+        DLockService.recoverRmtElder(grantors, grantorVersions, grantorSerialNumbers, nonGrantors);
-      }
-      else
-      if (dm.getOtherNormalDistributionManagerIds().isEmpty())
-      { // bug 38690
-        // Either we're alone (and received a message from an unknown member) 
-        // or else we haven't yet processed a view, In either case, we clearly 
-        // don't have any grantors, so we return empty lists.
-        logger.info(LogMarker.DLS, LocalizedMessage.create(
-            LocalizedStrings.ElderInitProcessor__0_RETURNING_EMPTY_LISTS_BECAUSE_I_KNOW_OF_NO_OTHER_MEMBERS, this));
+      } else if (dm.getOtherNormalDistributionManagerIds().isEmpty()) { // bug 38690
+                                                                        // Either we're alone (and
+                                                                        // received a message from
+                                                                        // an unknown member)
+                                                                        // or else we haven't yet
+                                                                        // processed a view, In
+                                                                        // either case, we clearly
+                                                                        // don't have any grantors,
+                                                                        // so we return empty lists.
+        logger.info(LogMarker.DLS,
+            LocalizedMessage.create(
+                LocalizedStrings.ElderInitProcessor__0_RETURNING_EMPTY_LISTS_BECAUSE_I_KNOW_OF_NO_OTHER_MEMBERS,
+                this));
-      }
-      else { // TODO make this fine level?
+      } else { // TODO make this fine level?
-    
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    
+
-      buff.append("ElderInitMessage (processorId='")
-        .append(this.processorId)
-        .append(")");
+      buff.append("ElderInitMessage (processorId='").append(this.processorId).append(")");
-  
-  public static final class ElderInitReplyMessage extends ReplyMessage {
-    private ArrayList grantors;         // svc names
-    private ArrayList grantorVersions;  // grantor version longs
-    private ArrayList grantorSerialNumbers; // grantor dls serial number ints
-    private ArrayList nonGrantors;      // svc names
-    public static void send(MessageWithReply reqMsg, 
-                            DM dm,
-                            ArrayList grantors, 
-                            ArrayList grantorVersions, 
-                            ArrayList grantorSerialNumbers, 
-                            ArrayList nonGrantors)
-    {
+  public static final class ElderInitReplyMessage extends ReplyMessage {
+    private ArrayList grantors; // svc names
+    private ArrayList grantorVersions; // grantor version longs
+    private ArrayList grantorSerialNumbers; // grantor dls serial number ints
+    private ArrayList nonGrantors; // svc names
+
+    public static void send(MessageWithReply reqMsg, DM dm, ArrayList grantors,
+        ArrayList grantorVersions, ArrayList grantorSerialNumbers, ArrayList nonGrantors) {
+
+
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-      buff.append("ElderInitReplyMessage")
-        .append("; sender=")
-        .append(getSender())
-        .append("; processorId=")
-        .append(super.processorId)
-        .append("; grantors=")
-        .append(this.grantors)
-        .append("; grantorVersions=")
-        .append(this.grantorVersions)
-        .append("; grantorSerialNumbers=")
-        .append(this.grantorSerialNumbers)
-        .append("; nonGrantors=")
-        .append(this.nonGrantors)
-        .append(")");
+      buff.append("ElderInitReplyMessage").append("; sender=").append(getSender())
+          .append("; processorId=").append(super.processorId).append("; grantors=")
+          .append(this.grantors).append("; grantorVersions=").append(this.grantorVersions)
+          .append("; grantorSerialNumbers=").append(this.grantorSerialNumbers)
+          .append("; nonGrantors=").append(this.nonGrantors).append(")");

UPD66 UPD66 UPD66 UPD66