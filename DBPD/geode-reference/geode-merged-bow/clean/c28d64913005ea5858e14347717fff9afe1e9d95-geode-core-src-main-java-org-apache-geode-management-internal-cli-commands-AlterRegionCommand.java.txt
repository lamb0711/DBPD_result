Merge branch 'release/1.4.0'

-import java.util.concurrent.atomic.AtomicReference;
-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.cache.ExpirationAttributes;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.LogWrapper;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-          specifiedDefaultValue = "-1",
-          specifiedDefaultValue = "-1",
-          specifiedDefaultValue = "-1",
-      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTL, specifiedDefaultValue = "-1",
+      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTL,
-      @CliOption(key = CliStrings.ALTER_REGION__CLONINGENABLED, specifiedDefaultValue = "false",
-          help = CliStrings.ALTER_REGION__CLONINGENABLED__HELP) Boolean cloningEnabled,
+      @CliOption(key = CliStrings.ALTER_REGION__CLONINGENABLED, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.ALTER_REGION__CLONINGENABLED__HELP) boolean cloningEnabled,
-    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
-
-    try {
-      InternalCache cache = getCache();
+    InternalCache cache = getCache();
-      if (groups != null) {
-        RegionCommandsUtils.validateGroups(cache, groups);
-      }
-
-      RegionFunctionArgs.ExpirationAttrs entryIdle = null;
-      if (entryExpirationIdleTime != null || entryExpirationIdleTimeAction != null) {
-        if (entryExpirationIdleTime != null && entryExpirationIdleTime == -1) {
-          entryExpirationIdleTime = ExpirationAttributes.DEFAULT.getTimeout();
-        }
-        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(entryExpirationIdleTimeAction)) {
-          entryExpirationIdleTimeAction = ExpirationAttributes.DEFAULT.getAction().toString();
-        }
-        entryIdle = new RegionFunctionArgs.ExpirationAttrs(
-            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_IDLE, entryExpirationIdleTime,
-            entryExpirationIdleTimeAction);
-      }
-      RegionFunctionArgs.ExpirationAttrs entryTTL = null;
-      if (entryExpirationTTL != null || entryExpirationTTLAction != null) {
-        if (entryExpirationTTL != null && entryExpirationTTL == -1) {
-          entryExpirationTTL = ExpirationAttributes.DEFAULT.getTimeout();
-        }
-        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(entryExpirationTTLAction)) {
-          entryExpirationTTLAction = ExpirationAttributes.DEFAULT.getAction().toString();
-        }
-        entryTTL = new RegionFunctionArgs.ExpirationAttrs(
-            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_TTL, entryExpirationTTL,
-            entryExpirationTTLAction);
-      }
-      RegionFunctionArgs.ExpirationAttrs regionIdle = null;
-      if (regionExpirationIdleTime != null || regionExpirationIdleTimeAction != null) {
-        if (regionExpirationIdleTime != null && regionExpirationIdleTime == -1) {
-          regionExpirationIdleTime = ExpirationAttributes.DEFAULT.getTimeout();
-        }
-        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(regionExpirationIdleTimeAction)) {
-          regionExpirationIdleTimeAction = ExpirationAttributes.DEFAULT.getAction().toString();
-        }
-        regionIdle = new RegionFunctionArgs.ExpirationAttrs(
-            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_IDLE, regionExpirationIdleTime,
-            regionExpirationIdleTimeAction);
-      }
-      RegionFunctionArgs.ExpirationAttrs regionTTL = null;
-      if (regionExpirationTTL != null || regionExpirationTTLAction != null) {
-        if (regionExpirationTTL != null && regionExpirationTTL == -1) {
-          regionExpirationTTL = ExpirationAttributes.DEFAULT.getTimeout();
-        }
-        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(regionExpirationTTLAction)) {
-          regionExpirationTTLAction = ExpirationAttributes.DEFAULT.getAction().toString();
-        }
-        regionTTL = new RegionFunctionArgs.ExpirationAttrs(
-            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_TTL, regionExpirationTTL,
-            regionExpirationTTLAction);
-      }
-
-      cacheLoader = convertDefaultValue(cacheLoader, StringUtils.EMPTY);
-      cacheWriter = convertDefaultValue(cacheWriter, StringUtils.EMPTY);
-
-      RegionFunctionArgs regionFunctionArgs;
-      regionFunctionArgs = new RegionFunctionArgs(regionPath, null, null, false, null, null, null,
-          entryIdle, entryTTL, regionIdle, regionTTL, null, null, null, null, cacheListeners,
-          cacheLoader, cacheWriter, asyncEventQueueIds, gatewaySenderIds, null, cloningEnabled,
-          null, null, null, null, null, null, null, null, evictionMax, null, null, null, null);
-
-      Set<String> cacheListenersSet = regionFunctionArgs.getCacheListeners();
-      if (cacheListenersSet != null && !cacheListenersSet.isEmpty()) {
-        for (String cacheListener : cacheListenersSet) {
-          if (!RegionCommandsUtils.isClassNameValid(cacheListener)) {
-            throw new IllegalArgumentException(CliStrings.format(
-                CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELISTENER_0_IS_INVALID,
-                new Object[] {cacheListener}));
-          }
-        }
-      }
-
-      if (cacheLoader != null && !RegionCommandsUtils.isClassNameValid(cacheLoader)) {
-        throw new IllegalArgumentException(CliStrings.format(
-            CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELOADER_0_IS_INVALID,
-            new Object[] {cacheLoader}));
-      }
-
-      if (cacheWriter != null && !RegionCommandsUtils.isClassNameValid(cacheWriter)) {
-        throw new IllegalArgumentException(CliStrings.format(
-            CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHEWRITER_0_IS_INVALID,
-            new Object[] {cacheWriter}));
-      }
-
-      if (evictionMax != null && evictionMax < 0) {
-        throw new IllegalArgumentException(CliStrings.format(
-            CliStrings.ALTER_REGION__MSG__SPECIFY_POSITIVE_INT_FOR_EVICTIONMAX_0_IS_NOT_VALID,
-            new Object[] {evictionMax}));
-      }
-
-      Set<DistributedMember> targetMembers = CliUtil.findMembers(groups, null);
-
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> resultCollector =
-          CliUtil.executeFunction(new RegionAlterFunction(), regionFunctionArgs, targetMembers);
-      List<CliFunctionResult> regionAlterResults =
-          (List<CliFunctionResult>) resultCollector.getResult();
-
-      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
-      final String errorPrefix = "ERROR: ";
-      for (CliFunctionResult regionAlterResult : regionAlterResults) {
-        boolean success = regionAlterResult.isSuccessful();
-        tabularResultData.accumulate("Member", regionAlterResult.getMemberIdOrName());
-        if (success) {
-          tabularResultData.accumulate("Status", regionAlterResult.getMessage());
-          xmlEntity.set(regionAlterResult.getXmlEntity());
-        } else {
-          tabularResultData.accumulate("Status", errorPrefix + regionAlterResult.getMessage());
-          tabularResultData.setStatus(Result.Status.ERROR);
-        }
-      }
-      result = ResultBuilder.buildResult(tabularResultData);
-    } catch (IllegalArgumentException | IllegalStateException e) {
-      LogWrapper.getInstance().info(e.getMessage());
-      result = ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (RuntimeException e) {
-      LogWrapper.getInstance().info(e.getMessage(), e);
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+    if (groups != null) {
+      RegionCommandsUtils.validateGroups(cache, groups);
-    if (xmlEntity.get() != null) {
+    RegionFunctionArgs regionFunctionArgs = new RegionFunctionArgs();
+    regionFunctionArgs.setRegionPath(regionPath);
+    regionFunctionArgs.setEntryExpirationIdleTime(entryExpirationIdleTime,
+        entryExpirationIdleTimeAction);
+    regionFunctionArgs.setEntryExpirationTTL(entryExpirationTTL, entryExpirationTTLAction);
+    regionFunctionArgs.setRegionExpirationIdleTime(regionExpirationIdleTime,
+        regionExpirationIdleTimeAction);
+    regionFunctionArgs.setRegionExpirationTTL(regionExpirationTTL, regionExpirationTTLAction);
+    regionFunctionArgs.setCacheListeners(cacheListeners);
+    regionFunctionArgs.setCacheLoader(cacheLoader);
+    regionFunctionArgs.setCacheWriter(cacheWriter);
+    regionFunctionArgs.setAsyncEventQueueIds(asyncEventQueueIds);
+    regionFunctionArgs.setGatewaySenderIds(gatewaySenderIds);
+    regionFunctionArgs.setCloningEnabled(cloningEnabled);
+    regionFunctionArgs.setEvictionMax(evictionMax);
+
+
+    Set<String> cacheListenersSet = regionFunctionArgs.getCacheListeners();
+    if (cacheListenersSet != null && !cacheListenersSet.isEmpty()) {
+      for (String cacheListener : cacheListenersSet) {
+        if (!RegionCommandsUtils.isClassNameValid(cacheListener)) {
+          throw new IllegalArgumentException(CliStrings.format(
+              CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELISTENER_0_IS_INVALID,
+              cacheListener));
+        }
+      }
+    }
+
+    if (cacheLoader != null && !RegionCommandsUtils.isClassNameValid(cacheLoader)) {
+      throw new IllegalArgumentException(CliStrings.format(
+          CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELOADER_0_IS_INVALID,
+          cacheLoader));
+    }
+
+    if (cacheWriter != null && !RegionCommandsUtils.isClassNameValid(cacheWriter)) {
+      throw new IllegalArgumentException(CliStrings.format(
+          CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHEWRITER_0_IS_INVALID,
+          cacheWriter));
+    }
+
+    if (evictionMax != null && evictionMax < 0) {
+      throw new IllegalArgumentException(CliStrings.format(
+          CliStrings.ALTER_REGION__MSG__SPECIFY_POSITIVE_INT_FOR_EVICTIONMAX_0_IS_NOT_VALID,
+          evictionMax));
+    }
+
+    Set<DistributedMember> targetMembers = findMembers(groups, null);
+
+    if (targetMembers.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+
+    List<CliFunctionResult> regionAlterResults =
+        executeAndGetFunctionResult(new RegionAlterFunction(), regionFunctionArgs, targetMembers);
+    result = ResultBuilder.buildResult(regionAlterResults);
+
+    XmlEntity xmlEntity = findXmlEntity(regionAlterResults);
+    if (xmlEntity != null) {
-          () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), groups));
+          () -> getSharedConfiguration().addXmlEntity(xmlEntity, groups));
-
-

MOV60 INS39 MOV60 MOV25 MOV21 INS21 INS21 INS21 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 MOV25 MOV25 MOV25 MOV25 MOV60 MOV25 MOV60 MOV21 INS60 INS80 MOV43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD74 MOV43 INS59 INS42 INS45 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV43 MOV43 UPD42 INS42 INS32 INS42 MOV43 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV43 MOV43 INS42 INS42 INS42 MOV42 MOV43 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL45 DEL80 DEL42 DEL45 DEL80 DEL42 DEL45 DEL80 DEL42 DEL45 DEL80 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL40 DEL32 DEL32 DEL7 DEL42 DEL40 DEL32 DEL32 DEL7 DEL42 DEL40 DEL43 DEL40 DEL42 DEL42 DEL14 DEL7 DEL42 DEL40 DEL32 DEL32 DEL7 DEL42 DEL40 DEL43 DEL40 DEL42 DEL42 DEL14 DEL7 DEL42 DEL40 DEL32 DEL7 DEL42 DEL40 DEL32 DEL7 DEL42 DEL42 DEL33 DEL33 DEL9 DEL33 DEL33 DEL33 DEL42 DEL42 DEL42 DEL42 DEL33 DEL33 DEL33 DEL33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL42 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL33 DEL42 DEL33 DEL33 DEL33 DEL33 DEL14 DEL7 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL76 DEL76 DEL42 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL40 DEL43 DEL40 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL40 DEL43 DEL40 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL40 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL32