Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The GetEnvironmentHandlerInterceptor class handles extracting Gfsh environment variables encoded in the HTTP request
- * message as request parameters.
+ * The GetEnvironmentHandlerInterceptor class handles extracting Gfsh environment variables encoded
+ * in the HTTP request message as request parameters.
+ * 
-  private static final ThreadLocal<Map<String, String>> ENV = new ThreadLocal<Map<String, String>>() {
-    @Override
-    protected Map<String, String> initialValue() {
-      return Collections.emptyMap();
-    }
-  };
+  private static final ThreadLocal<Map<String, String>> ENV =
+      new ThreadLocal<Map<String, String>>() {
+        @Override
+        protected Map<String, String> initialValue() {
+          return Collections.emptyMap();
+        }
+      };
-  protected static final String SECURITY_VARIABLE_REQUEST_HEADER_PREFIX = DistributionConfig.SECURITY_PREFIX_NAME;
+  protected static final String SECURITY_VARIABLE_REQUEST_HEADER_PREFIX =
+      DistributionConfig.SECURITY_PREFIX_NAME;
-  public boolean preHandle(final HttpServletRequest request, final HttpServletResponse response, final Object handler)
-    throws Exception
-  {
+  public boolean preHandle(final HttpServletRequest request, final HttpServletResponse response,
+      final Object handler) throws Exception {
-    for (Enumeration<String> requestParameters = request.getParameterNames(); requestParameters.hasMoreElements(); ) {
+    for (Enumeration<String> requestParameters = request.getParameterNames(); requestParameters
+        .hasMoreElements();) {
-        //GEODE-1469: since we enced stepArgs, we will need to decode it here. See #ClientHttpRequest
-        if(requestParameter.contains(CLIMultiStepHelper.STEP_ARGS)){
+        // GEODE-1469: since we enced stepArgs, we will need to decode it here. See
+        // #ClientHttpRequest
+        if (requestParameter.contains(CLIMultiStepHelper.STEP_ARGS)) {
-        requestParameterValues.put(requestParameter.substring(ENVIRONMENT_VARIABLE_REQUEST_PARAMETER_PREFIX.length()),
-          requestValue);
+        requestParameterValues.put(
+            requestParameter.substring(ENVIRONMENT_VARIABLE_REQUEST_PARAMETER_PREFIX.length()),
+            requestValue);
-    for (Enumeration<String> requestHeaders = request.getHeaderNames(); requestHeaders.hasMoreElements();) {
+    for (Enumeration<String> requestHeaders = request.getHeaderNames(); requestHeaders
+        .hasMoreElements();) {
-      final String requestHeader = requestHeaders.nextElement();
+      // since http request headers are case-insensitive and all our security-* properties
+      // are in lower case, it's safe to do toLowerCase here.
+      final String requestHeader = requestHeaders.nextElement().toLowerCase();
-
-  public void afterCompletion(final HttpServletRequest request,
-                              final HttpServletResponse response,
-                              final Object handler,
-                              final Exception ex)
-    throws Exception
-  {
+  public void afterCompletion(final HttpServletRequest request, final HttpServletResponse response,
+      final Object handler, final Exception ex) throws Exception {
-  public void afterConcurrentHandlingStarted(
-    HttpServletRequest request, HttpServletResponse response, Object handler)
-    throws Exception {
+  public void afterConcurrentHandlingStarted(HttpServletRequest request,
+      HttpServletResponse response, Object handler) throws Exception {

UPD66 UPD66 INS32 MOV32 INS42