Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
-  private StatsRate diskWritesRate;  
-  
+
+  private StatsRate diskWritesRate;
+
-  
+
-  
+
-  
-  
+
+
-  
+
-    this.diskStore = (DiskStoreImpl)ds;
+    this.diskStore = (DiskStoreImpl) ds;
-    this.monitor = new MBeanStatsMonitor(ManagementStrings.DISKSTORE_MONITOR
-        .toLocalizedString());
+    this.monitor = new MBeanStatsMonitor(ManagementStrings.DISKSTORE_MONITOR.toLocalizedString());
-    
+
-  
-  
-  public void stopMonitor(){
+
+
+  public void stopMonitor() {
-   * Allows a disk compaction to be forced on this disk store. The compaction is
-   * done even if automatic compaction is not configured. If the current active
-   * oplog has had data written to it and it is compactable then an implicit
-   * call to forceRoll will be made so that the active oplog can be compacted.
-   * This method will block until the compaction completes. return true if one
-   * or more oplogs were compacted; False indicates that no oplogs were ready to
-   * be compacted or that a compaction was already in progress.
+   * Allows a disk compaction to be forced on this disk store. The compaction is done even if
+   * automatic compaction is not configured. If the current active oplog has had data written to it
+   * and it is compactable then an implicit call to forceRoll will be made so that the active oplog
+   * can be compacted. This method will block until the compaction completes. return true if one or
+   * more oplogs were compacted; False indicates that no oplogs were ready to be compacted or that a
+   * compaction was already in progress.
-   * Asks the disk store to start writing to a new oplog. The old oplog will be
-   * asynchronously compressed if compaction is set to true. The new oplog will
-   * be created in the next available directory with free space. If there is no
-   * directory with free space available and compaction is set to false, then a
-   * DiskAccessException saying that the disk is full will be thrown. If
-   * compaction is true then the application will wait for the other oplogs to
-   * be compacted and more space to be created
+   * Asks the disk store to start writing to a new oplog. The old oplog will be asynchronously
+   * compressed if compaction is set to true. The new oplog will be created in the next available
+   * directory with free space. If there is no directory with free space available and compaction is
+   * set to false, then a DiskAccessException saying that the disk is full will be thrown. If
+   * compaction is true then the application will wait for the other oplogs to be compacted and more
+   * space to be created
-   * Causes any data that is currently in the asynchronous queue to be written
-   * to disk. Does not return until the flush is complete.
+   * Causes any data that is currently in the asynchronous queue to be written to disk. Does not
+   * return until the flush is complete.
-  
+
-    this.monitor = new MBeanStatsMonitor(ManagementStrings.DISKSTORE_MONITOR
-        .toLocalizedString());
+    this.monitor = new MBeanStatsMonitor(ManagementStrings.DISKSTORE_MONITOR.toLocalizedString());
-  
-  public void addDiskStoreStats(DiskStoreStats stats){
+
+  public void addDiskStoreStats(DiskStoreStats stats) {
-  
-  private void initializeStats(){
-    
-    String[] diskReads = new String[] { StatsKey.DISK_READ_BYTES, StatsKey.DISK_RECOVERED_BYTES };
+
+  private void initializeStats() {
+
+    String[] diskReads = new String[] {StatsKey.DISK_READ_BYTES, StatsKey.DISK_RECOVERED_BYTES};
-    
-    diskWritesRate =  new StatsRate(
-        StatsKey.DISK_WRITEN_BYTES, StatType.LONG_TYPE, monitor);
-    
-    diskFlushTimeAvgLatency = new StatsAverageLatency(
-        StatsKey.NUM_FLUSHES, StatType.LONG_TYPE,
+
+    diskWritesRate = new StatsRate(StatsKey.DISK_WRITEN_BYTES, StatType.LONG_TYPE, monitor);
+
+    diskFlushTimeAvgLatency = new StatsAverageLatency(StatsKey.NUM_FLUSHES, StatType.LONG_TYPE,
-    
-    diskReadsAvgLatency = new StatsAverageLatency(
-        StatsKey.DISK_READ_BYTES, StatType.LONG_TYPE,
+
+    diskReadsAvgLatency = new StatsAverageLatency(StatsKey.DISK_READ_BYTES, StatType.LONG_TYPE,
-    
-    diskWritesAvgLatency = new StatsAverageLatency(
-        StatsKey.DISK_WRITEN_BYTES, StatType.LONG_TYPE,
+
+    diskWritesAvgLatency = new StatsAverageLatency(StatsKey.DISK_WRITEN_BYTES, StatType.LONG_TYPE,
-  
+
-  
-  public int getTotalBackupCompleted(){
+
+  public int getTotalBackupCompleted() {
-  
+
-   
+
-    if(diskStoreStats != null){
-      return diskStoreStats.getStats().get(statName);  
+    if (diskStoreStats != null) {
+      return diskStoreStats.getStats().get(statName);
-  
+
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66