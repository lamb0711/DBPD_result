GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.commons.io.FileUtils;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.cache.persistence.PersistentID;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.DM;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.distributed.internal.MembershipListener;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.DeployedJar;
-import org.apache.geode.internal.JarDeployer;
-import org.apache.geode.internal.cache.DiskStoreImpl;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-
+import org.apache.commons.io.FileUtils;
+
+import org.apache.geode.InternalGemFireError;
+import org.apache.geode.cache.DiskStore;
+import org.apache.geode.cache.persistence.PersistentID;
+import org.apache.geode.distributed.DistributedSystem;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.MembershipListener;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.internal.DeployedJar;
+import org.apache.geode.internal.JarDeployer;
+import org.apache.geode.internal.cache.DiskStoreImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.i18n.LocalizedStrings;
+
- * 
- *
-  private GemFireCacheImpl cache;
+  private InternalCache cache;
-  public BackupManager(InternalDistributedMember sender, GemFireCacheImpl gemFireCache) {
+  public BackupManager(InternalDistributedMember sender, InternalCache gemFireCache) {
-    Collection<DiskStoreImpl> diskStores = cache.listDiskStoresIncludingRegionOwned();
-    for (DiskStoreImpl store : diskStores) {
-      store.releaseBackupLock();
+    Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
+    for (DiskStore store : diskStores) {
+      ((DiskStoreImpl) store).releaseBackupLock();
-    Collection<DiskStoreImpl> diskStores = cache.listDiskStoresIncludingRegionOwned();
-    for (DiskStoreImpl store : diskStores) {
-      store.lockStoreBeforeBackup();
-      if (store.hasPersistedData()) {
-        persistentIds.add(store.getPersistentID());
-        store.getStats().startBackup();
+    Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
+    for (DiskStore store : diskStores) {
+      DiskStoreImpl storeImpl = (DiskStoreImpl) store;
+      storeImpl.lockStoreBeforeBackup();
+      if (storeImpl.hasPersistedData()) {
+        persistentIds.add(storeImpl.getPersistentID());
+        storeImpl.getStats().startBackup();
-    for (DiskStoreImpl diskStore : cache.listDiskStoresIncludingRegionOwned()) {
+    for (DiskStore diskStore : cache.listDiskStoresIncludingRegionOwned()) {
-        Pattern pattern = Pattern.compile(".*" + diskStore.getBackupDirName() + "$");
+        Pattern pattern =
+            Pattern.compile(".*" + ((DiskStoreImpl) diskStore).getBackupDirName() + "$");
-   * @throws IOException
-      Collection<DiskStoreImpl> diskStores =
-          new ArrayList<DiskStoreImpl>(cache.listDiskStoresIncludingRegionOwned());
+      Collection<DiskStore> diskStores =
+          new ArrayList<DiskStore>(cache.listDiskStoresIncludingRegionOwned());
-      for (Iterator<DiskStoreImpl> itr = diskStores.iterator(); itr.hasNext();) {
-        DiskStoreImpl store = itr.next();
+      for (Iterator<DiskStore> itr = diskStores.iterator(); itr.hasNext();) {
+        DiskStoreImpl store = (DiskStoreImpl) itr.next();
-      for (DiskStoreImpl store : diskStores) {
-        store.finishBackup(this);
-        store.getStats().endBackup();
-        persistentIds.add(store.getPersistentID());
+      for (DiskStore store : diskStores) {
+        DiskStoreImpl storeImpl = (DiskStoreImpl) store;
+        storeImpl.finishBackup(this);
+        storeImpl.getStats().endBackup();
+        persistentIds.add(storeImpl.getPersistentID());
-
-    // TODO sbawaska: should the gfsecurity.properties file be backed up?
+    // TODO: should the gfsecurity.properties file be backed up?
-    File backupDir = new File(targetDir, vmId);
-
-
-    return backupDir;
+    return new File(targetDir, vmId);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD40 UPD43 UPD42 UPD43 UPD42 UPD74 UPD74 MOV14 UPD43 INS43 INS43 INS43 INS60 INS43 UPD42 INS42 INS42 INS42 MOV43 INS59 INS42 UPD74 INS36 INS42 INS11 UPD42 UPD42 UPD43 UPD74 INS43 INS60 INS11 MOV43 INS42 UPD42 UPD74 INS43 MOV43 INS42 MOV43 INS59 MOV43 INS42 INS43 INS42 INS11 INS42 INS11 UPD42 UPD42 UPD42 INS42 MOV43 MOV32 MOV43 INS42 UPD42 UPD42 INS36 INS11 MOV43 INS42 DEL42 DEL42 DEL42 DEL65 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42