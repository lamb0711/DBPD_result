GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-  // gemfire.BucktRegion.alwaysFireLocalListeners=true
-      GemFireCacheImpl cache, InternalRegionArguments internalRegionArgs) {
+      InternalCache cache, InternalRegionArguments internalRegionArgs) {
-  protected DiskStoreImpl findDiskStore(RegionAttributes ra,
+  protected DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
-  void basicInvalidatePart2(final RegionEntry re, final EntryEventImpl event, boolean clearConflict,
-      boolean invokeCallbacks) {
+  void basicInvalidatePart2(final RegionEntry regionEntry, final EntryEventImpl event,
+      boolean conflictWithClear, boolean invokeCallbacks) {
-          VersionTag v = re.generateVersionTag(null, false, this, event);
+          VersionTag v = regionEntry.generateVersionTag(null, false, this, event);
-      super.basicInvalidatePart2(re, event, clearConflict /* Clear conflict occurred */,
-          invokeCallbacks);
+      super.basicInvalidatePart2(regionEntry, event,
+          conflictWithClear /* Clear conflict occurred */, invokeCallbacks);
-  final void performExpiryTimeout(ExpiryTask p_task) throws CacheException {
-    ExpiryTask task = p_task;
+  final void performExpiryTimeout(ExpiryTask expiryTask) throws CacheException {
+    ExpiryTask task = expiryTask;
-  private final boolean isInDestroyingThread() {
+  private boolean isInDestroyingThread() {
-  // public int getSerialNumber() {
-  // String s = "This should never be called on " + getClass();
-  // throw new UnsupportedOperationException(s);
-  // }
-    // Gemfire PRs don't support clear. allowing it via a hack for tests
-    else if (LocalRegion.simulateClearForTests) {
-      oldMemValue = this.bytesInMemory.getAndSet(0);
-    } else {
+
+    else {
-  public int calculateValueSize(Object val) {
+  public int calculateValueSize(Object value) {
-    return calcMemSize(val);
+    return calcMemSize(value);
-  public int calculateRegionEntryValueSize(RegionEntry re) {
-    return calcMemSize(re._getValue()); // OFFHEAP _getValue ok
+  public int calculateRegionEntryValueSize(RegionEntry regionEntry) {
+    return calcMemSize(regionEntry._getValue()); // OFFHEAP _getValue ok
-      Set<InternalDistributedMember> critialMembers) {
+      Set<InternalDistributedMember> criticalMembers) {

UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV8 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL40 DEL42 DEL52 DEL42 DEL22 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25