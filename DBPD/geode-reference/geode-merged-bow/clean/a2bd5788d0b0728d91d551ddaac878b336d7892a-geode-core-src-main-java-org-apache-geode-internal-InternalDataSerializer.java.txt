GEODE-3923 Provide whitelist/blacklist capability for java serialization

This is a squashed and rebased commit of the work from the now-defunct
whitelist-wip branch.  The work allows you to whitelist and blacklist
use of Java deserialization for classes matching a pattern you provide.

All distributedTests are now run with this enabled and with the default
blacklist pattern of "!*", which blacklists everything not explicitely
allowed by Geode in the sanctionedSerializables.txt files or by your test.

Each layer needing one now has its own sanctionedSerializables.txt file
that is a resource in the product tree.  These are installed as whitelists
by a new DistributedSystemService in that layer.

There are numerous examples of whitelisting classes in the tests.

If you do not whitelist your class Geode will throw an IncompatibleClassException.
If you happen to run into this look in your logs for "rejecting" and you
can easily find the name of the offending class and add it to your
whitelist.

Two new cache properties have been added:

  validate-serializable-objects

If true checks incoming java serializable objects against a filter (allows
internal Geode classes and any others provided in the
serializable-object-filter property).

If you enable this property you must be using Java 8 build 121 or later.
If you are not Geode will throw an exception and refuse to start.

Default: "false"

  serializable-object-filter

A user provided whitelist of objects that the system will allow to serialize.
See java.io.ObjectInputFilter.Config for details on the syntax for creating filters.

https://docs.oracle.com/javase/9/docs/api/java/io/ObjectInputFilter.Config.html

Default: "!*"

In addition, this work includes these significant contributions:

commit 731ac2b4206615fb6bdaa54db371c7f8b7956fd4
Author: Galen O'Sullivan <gosullivan@pivotal.io>
Date:   Wed Nov 15 10:55:23 2017 -0800

    [edited message] Allow Geode to run with older versions of Java 8
    when serialization filtering is not enabled.

    and achieve this by moving references to ObjectInputFilter out of
    InternalDataSerializer.

    Signed-off-by: Dan Smith <dsmith@pivotal.io>

commit 3329467308bbfaaf0cc30db678474894132e5f62
Author: Dan Smith <upthewaterspout@apache.org>
Date:   Thu Nov 2 13:22:42 2017 -0700

    Adding an option to run tests with a different JVM

commit a480931fa3b7e973f9076a063238c75d0b51146b
Author: Bruce Schuchardt <bschuchardt@pivotal.io>
Date:   Fri Nov 10 15:46:11 2017 -0800

    whitelist WIP

    Turned on validation by default for dunit tests and fixed issues this caused.
    Several tests now set a custom whitelist.

commit 026ae92fe2055c09762978696d53d9cd2679bd60
Author: Galen O'Sullivan <gosullivan@pivotal.io>
Date:   Thu Nov 9 17:02:56 2017 -0800

    Adding configuration parameters to toggle whitelist behavior of serializable classes.

    Open question about removing DataCommandRequest.java toData and fromData

    Signed-off-by: Brian Rowe <browe@pivotal.io>

+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.net.URL;
+import org.apache.geode.GemFireConfigException;
+import org.apache.geode.distributed.internal.DistributedSystemService;
+import org.apache.geode.internal.lang.ClassUtils;
+  private static final String SANCTIONED_SERIALIZABLES_DEPENDENCIES_PATTERN =
+      "java.**;javax.management.**" + ";javax.print.attribute.EnumSyntax" // used for some old enums
+          + ";antlr.**" // query AST objects
+          + ";org.apache.commons.modeler.AttributeInfo" // old Admin API
+          + ";org.apache.commons.modeler.FeatureInfo" // old Admin API
+          + ";org.apache.commons.modeler.ManagedBean" // old Admin API
+          + ";org.apache.geode.distributed.internal.DistributionConfigSnapshot" // old Admin API
+          + ";org.apache.geode.distributed.internal.RuntimeDistributionConfigImpl" // old Admin API
+          + ";org.apache.geode.distributed.internal.DistributionConfigImpl" // old Admin API
+          + ";org.apache.geode.distributed.internal.membership.InternalDistributedMember" // RegionSnapshotService
+                                                                                          // function
+                                                                                          // WindowedExportFunction
+          + ";org.apache.geode.internal.cache.persistence.PersistentMemberID" // putAll
+          + ";org.apache.geode.internal.cache.persistence.DiskStoreID" // putAll
+          + ";org.apache.geode.internal.cache.tier.sockets.VersionedObjectList" // putAll
+          + ";org.apache.shiro.*;org.apache.shiro.authz.*;org.apache.shiro.authc.*" // security
+                                                                                    // services
+          + ";org.apache.geode.modules.util.SessionCustomExpiry" // geode-modules
+          + ";";
+
+
+  private static InputStreamFilter defaultSerializationFilter = new EmptyInputStreamFilter();
+
+  /**
+   * A deserialization filter for ObjectInputStreams
+   */
+  private static InputStreamFilter serializationFilter = defaultSerializationFilter;
+   * Initializes the optional serialization "white list" if the user has requested it in the
+   * DistributionConfig
+   *
+   * @param distributionConfig the DistributedSystem configuration
+   * @param services DistributedSystem services that might have classes to white-list
+   */
+  public static void initialize(DistributionConfig distributionConfig,
+      Collection<DistributedSystemService> services) {
+    logger.info("initializing InternalDataSerializer with {} services", services.size());
+    if (distributionConfig.getValidateSerializableObjects()) {
+      if (!ClassUtils.isClassAvailable("sun.misc.ObjectInputFilter")) {
+        throw new GemFireConfigException(
+            "A serialization filter has been specified but this version of Java does not support serialization filters - sun.misc.ObjectInputFilter is not available");
+      }
+      serializationFilter =
+          new ObjectInputStreamFilterWrapper(SANCTIONED_SERIALIZABLES_DEPENDENCIES_PATTERN
+              + distributionConfig.getSerializableObjectFilter() + ";!*", services);
+    } else {
+      clearSerializationFilter();
+    }
+  }
+
+  private static void clearSerializationFilter() {
+    serializationFilter = defaultSerializationFilter;
+  }
+
+
+  /**
+   * {@link DistributedSystemService}s that need to whitelist Serializable objects can use this to
+   * read them from a file and then return them via
+   * {@link DistributedSystemService#getSerializationWhitelist}
+   */
+  public static Collection<String> loadClassNames(URL sanctionedSerializables) throws IOException {
+    Collection<String> result = new ArrayList(1000);
+    InputStream inputStream = sanctionedSerializables.openStream();
+    InputStreamReader reader = new InputStreamReader(inputStream);
+    BufferedReader in = new BufferedReader(reader);
+    try {
+      String line;
+      while ((line = in.readLine()) != null) {
+        line = line.trim();
+        if (line.startsWith("#") || line.startsWith("//")) {
+          // comment line
+        } else {
+          line = line.replaceAll("/", ".");
+          result.add(line.substring(0, line.indexOf(',')));
+        }
+      }
+    } finally {
+      inputStream.close();
+    }
+    // logger.info("loaded {} class names from {}", result.size(), sanctionedSerializables);
+    return result;
+
+  }
+
+
+  /**
+          serializationFilter.setFilterOn((ObjectInputStream) ois);
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS43 INS8 INS42 INS42 INS27 INS42 INS42 INS14 INS65 INS42 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS21 INS25 INS21 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS41 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS43 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS32 INS8 INS8 INS7 INS65 INS66 INS66 INS65 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS25 INS21 INS21 INS42 INS42 INS42 INS67 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS61 INS21 INS42 INS42 INS38 INS8 INS7 INS32 INS42 INS42 INS42 INS42 INS43 INS34 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS53 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS21 INS25 INS42 INS42 INS21 INS42 INS42 INS45 INS14 INS43 INS27 INS42 INS7 INS7 INS27 INS8 INS8 INS32 INS43 INS45 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS32 INS32 INS32 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS34 INS32 INS42 INS42 INS13