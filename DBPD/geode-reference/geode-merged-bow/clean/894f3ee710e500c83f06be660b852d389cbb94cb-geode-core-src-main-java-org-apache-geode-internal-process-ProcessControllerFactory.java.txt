GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-import org.apache.geode.distributed.internal.DistributionConfig;
+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
-import java.util.concurrent.TimeUnit;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
+  /**
+   * For testing only
+   */
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
+  public ProcessController createProcessController(final ProcessControllerParameters parameters,
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (pid < 1) {
-      throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");
-    }
-    try {
-      if (isAttachAPIFound()) {
-        return new MBeanProcessController((MBeanControllerParameters) arguments, pid);
-      } else {
-        return new FileProcessController((FileControllerParameters) arguments, pid);
+    notNull(parameters, "Invalid parameters '" + parameters + "' specified");
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
+    if (isAttachAPIFound()) {
+      try {
+        return new MBeanProcessController(parameters, pid);
+      } catch (ExceptionInInitializerError ignore) {
-    } catch (final ExceptionInInitializerError e) {
-      // LOGGER.warn("Attach API class not found", e);
-    return null;
+    return new FileProcessController(parameters, pid);
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
-      final File pidFile, final long timeout, final TimeUnit unit)
+  public ProcessController createProcessController(final ProcessControllerParameters parameters,
+      final File directory, final String pidFileName)
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (pidFile == null) {
-      throw new NullPointerException("Pid file must not be null");
-    }
-    return createProcessController(arguments, new PidFile(pidFile).readPid(timeout, unit));
-  }
+    notNull(parameters, "Invalid parameters '" + parameters + "' specified");
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notEmpty(pidFileName, "Invalid pidFileName '" + pidFileName + "' specified");
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
-      final File directory, final String pidFilename, final long timeout, final TimeUnit unit)
-      throws IOException, InterruptedException, TimeoutException {
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (directory == null) {
-      throw new NullPointerException("Directory must not be null");
-    }
-    if (pidFilename == null) {
-      throw new NullPointerException("Pid file name must not be null");
-    }
-    return createProcessController(arguments,
-        new PidFile(directory, pidFilename).readPid(timeout, unit));
+    return createProcessController(parameters, readPid(directory, pidFileName));
-    if (this.disableAttachApi) {
+    if (disableAttachApi) {
-    } catch (ClassNotFoundException e) {
+    } catch (ClassNotFoundException ignore) {
+
+  private int readPid(final File directory, final String pidFileName) throws IOException {
+    return new PidFile(directory, pidFileName).readPid();
+  }

MOV26 MOV26 INS26 INS26 MOV31 UPD40 INS40 INS40 MOV44 INS29 MOV44 INS8 UPD83 INS39 INS42 INS8 INS65 UPD42 INS21 INS21 INS25 MOV41 UPD42 UPD43 UPD42 INS21 INS21 INS21 MOV41 UPD43 UPD42 UPD42 MOV41 INS66 INS32 INS32 MOV32 INS8 UPD42 INS32 INS32 INS32 INS42 UPD42 MOV32 INS42 INS42 INS27 INS42 INS27 MOV27 INS54 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 INS45 INS42 INS45 MOV42 UPD34 MOV34 INS8 MOV12 INS45 UPD42 MOV42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 UPD42 UPD42 UPD42 UPD42 MOV41 UPD42 INS42 DEL42 DEL43 DEL42 DEL11 DEL83 DEL42 DEL43 DEL42 DEL11 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL8 DEL25 DEL8 DEL54 DEL33 DEL41 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8