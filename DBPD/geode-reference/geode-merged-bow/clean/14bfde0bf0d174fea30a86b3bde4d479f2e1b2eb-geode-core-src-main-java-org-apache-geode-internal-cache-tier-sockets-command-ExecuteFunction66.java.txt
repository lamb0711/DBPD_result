Merge branch 'release/1.8.0'

-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  static final ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
-    AtomicInteger threadNum = new AtomicInteger();
-
-    public Thread newThread(final Runnable r) {
-      Thread result = new Thread(r, "Function Execution Thread-" + threadNum.incrementAndGet());
-      result.setDaemon(true);
-      return result;
-    }
-  });
+  static final ExecutorService execService =
+      LoggingExecutors.newCachedThreadPool("Function Execution Thread-", true);
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-          function), exception);
+      logger.warn(String.format("Exception on server while executing function: %s",
+          function),
+          exception);
-          LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
-              .toLocalizedString();
-      logger.warn(LocalizedMessage.create(LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {serverConnection.getName(), message}));
+          "The input function for the execute function request is null";
+      logger.warn("{} : {}",
+          new Object[] {serverConnection.getName(), message});
-          final String message = LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
-              .toLocalizedString(function);
+          final String message =
+              String.format("Function named %s is not registered to FunctionService",
+                  function);
-                LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
-                    .toLocalizedString(function);
+                "Function attributes at client and server don't match for " +
+                    function;
-      functionObject.getRequiredPermissions(null).forEach(securityService::authorize);
+      functionObject.getRequiredPermissions(null, args).forEach(securityService::authorize);
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-          function), ioException);
+      logger.warn(String.format("Exception on server while executing function: %s",
+          function),
+          ioException);
-          LocalizedStrings.ExecuteFunction_SERVER_COULD_NOT_SEND_THE_REPLY.toLocalizedString();
+          "Server could not send the reply";
-        logger.debug(LocalizedMessage.create(
-            LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-            new Object[] {function}), internalfunctionException);
+        logger.debug(String.format("Exception on server while executing function: %s",
+            new Object[] {function}),
+            internalfunctionException);
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-          function), e);
+      logger.warn(String.format("Exception on server while executing function: %s",
+          function),
+          e);
-            LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT
-                .toString(fn.getId()));
+            String.format("The function, %s, did not send last result",
+                fn.getId()));
-              if (cache.getLoggerI18n().warningEnabled() && !ASYNC_TX_WARNING_ISSUED) {
+              if (cache.getLogger().warningEnabled() && !ASYNC_TX_WARNING_ISSUED) {
-                cache.getLoggerI18n().warning(
-                    LocalizedStrings.ExecuteFunction66_TRANSACTIONAL_FUNCTION_WITHOUT_RESULT);
+                cache.getLogger().warning(
+                    "Function invoked within transactional context, but hasResults() is false; ordering of transactional operations cannot be guaranteed.  This message is only issued once by a server.");
-              logger.debug(LocalizedMessage.create(
-                  LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-                  new Object[] {fn}), internalfunctionException);
+              logger.debug(String.format("Exception on server while executing function: %s",
+                  new Object[] {fn}),
+                  internalfunctionException);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-                fn), functionException);
+            logger.warn(String.format("Exception on server while executing function: %s",
+                fn),
+                functionException);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
-                fn), exception);
+            logger.warn(String.format("Exception on server while executing function: %s",
+                fn),
+                exception);

UPD40 UPD42 INS45 MOV9 MOV25 INS43 MOV32 MOV62 MOV8 INS42 INS45 UPD42 UPD42 INS45 MOV21 MOV27 INS8 INS42 INS45 UPD42 UPD42 INS45 MOV60 MOV25 INS25 UPD42 UPD42 INS45 UPD42 UPD42 INS45 INS83 MOV43 MOV27 MOV8 UPD42 INS42 INS45 UPD42 UPD42 INS45 UPD42 INS42 INS45 INS27 INS45 INS42 MOV21 MOV21 UPD42 UPD42 INS45 UPD42 UPD42 INS45 UPD42 INS45 UPD42 UPD42 INS45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL83 DEL40 DEL42 DEL42 DEL32 DEL8 DEL25 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40