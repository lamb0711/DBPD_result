Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  // reuse the NOTIFICATION_ONLY flag since it is not used for SizeMessage 
+  /** flag to indicate that only an estimated size is required */
+  public static final short ESTIMATE = NOTIFICATION_ONLY;
+
+  private transient boolean estimate;
+
-      ArrayList<Integer> bucketIds) {
+      ArrayList<Integer> bucketIds, boolean estimate) {
+    this.estimate = estimate;
-      ArrayList<Integer> bucketIds) {
+      ArrayList<Integer> bucketIds, boolean estimate) {
-        p, bucketIds);
+        p, bucketIds, estimate);
+  protected void setBooleans(short s, DataInput in) throws ClassNotFoundException, IOException {
+    super.setBooleans(s, in);
+    this.estimate = ((s & ESTIMATE) != 0);
+  }
+
+  @Override
+  protected short computeCompressedShort(short s) {
+    s = super.computeCompressedShort(s);
+    if (this.estimate) s |= ESTIMATE;
+    return s;
+  }
+
+  @Override
-          sizes = ds.getSizeLocallyForBuckets(this.bucketIds);
+          if (estimate) {
+            sizes = ds.getSizeEstimateLocallyForBuckets(this.bucketIds);
+          } else {
+            sizes = ds.getSizeLocallyForBuckets(this.bucketIds);
+          }
-          sizes = ds.getSizeForLocalBuckets();
+          if (estimate) {
+            sizes = ds.getSizeEstimateForLocalPrimaryBuckets();
+          } else {
+            sizes = ds.getSizeForLocalBuckets();
+          }

INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS44 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS42 INS42 INS39 INS42 INS21 INS39 INS42 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS42 INS39 INS42 INS21 INS25 INS41 INS66 INS7 INS42 INS48 INS7 INS7 INS22 INS21 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS36 INS42 INS48 INS52 INS42 INS7 INS52 INS42 INS42 INS52 INS42 INS27 INS42 INS42 INS42 INS42 INS36 INS34 INS27 INS8 INS8 INS42 INS42 INS25 INS25 INS42 INS8 MOV8 INS42 INS8 MOV8 INS21 INS21 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS22 INS42 INS42 INS52 INS42