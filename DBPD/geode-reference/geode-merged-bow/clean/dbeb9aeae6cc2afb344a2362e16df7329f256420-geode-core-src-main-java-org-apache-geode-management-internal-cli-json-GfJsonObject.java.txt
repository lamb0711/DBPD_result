Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Wrapper over JSONObject. 
+ * Wrapper over JSONObject.
-  
+
-//      Class klass = bean.getClass();
-//      if(klass.isArray() && klass.getComponentType().isPrimitive()){
-//        String str = "";
-//        int length = Array.getLength(bean);
-//        for (int i = 0; i < length; i++) {
-//          if(i==0)
-//            str += (Array.get(bean, i));
-//          else
-//            str +=(","+Array.get(bean, i));
-//        }
-//        try {
-//          this.jsonObject.put("Value", str);
-//        } catch (JSONException ignore) {
-//        }
-//      }
+      // Class klass = bean.getClass();
+      // if(klass.isArray() && klass.getComponentType().isPrimitive()){
+      // String str = "";
+      // int length = Array.getLength(bean);
+      // for (int i = 0; i < length; i++) {
+      // if(i==0)
+      // str += (Array.get(bean, i));
+      // else
+      // str +=(","+Array.get(bean, i));
+      // }
+      // try {
+      // this.jsonObject.put("Value", str);
+      // } catch (JSONException ignore) {
+      // }
+      // }
-   * @param source
-   *          A string beginning with { (left brace) and ending with } (right
-   *          brace).
-   * @throws GfJsonException
-   *           - If there is a syntax error in the source string or a duplicated
-   *           key.
+   * @param source A string beginning with { (left brace) and ending with } (right brace).
+   * @throws GfJsonException - If there is a syntax error in the source string or a duplicated key.
-   * @throws GfJsonException
-   *           If the key is null OR if the value is non-finite number
+   * @throws GfJsonException If the key is null OR if the value is non-finite number
-  public GfJsonObject accumulate(String key, Object value)
-      throws GfJsonException {
+  public GfJsonObject accumulate(String key, Object value) throws GfJsonException {
-        //first time always add JSONArray for accumulate - for convenience
+        // first time always add JSONArray for accumulate - for convenience
-  
-  public GfJsonObject accumulateAsJSONObject(String key, Object value)
-      throws GfJsonException {
+
+  public GfJsonObject accumulateAsJSONObject(String key, Object value) throws GfJsonException {
-        //first time always add JSONArray for accumulate - for convenience
+        // first time always add JSONArray for accumulate - for convenience
-   * @throws GfJsonException
-   *           - If the key is null or if the current value associated with the
-   *           key is not a JSONArray.
+   * @throws GfJsonException - If the key is null or if the current value associated with the key is
+   *         not a JSONArray.
-  
+
-  
+
-  
+
-  
+
-  
+
-    } 
+    }
-   * @throws GfJsonException
-   *           If there is a syntax error while preparing GfJsonArray.
+   * @throws GfJsonException If there is a syntax error while preparing GfJsonArray.
-   * @return A GfJsonArray containing the key strings, or null if the internal
-   *         JSONObject is empty.
-   * @throws GfJsonException
-   *           If there is a syntax error while preparing GfJsonArray.
+   * @return A GfJsonArray containing the key strings, or null if the internal JSONObject is empty.
+   * @throws GfJsonException If there is a syntax error while preparing GfJsonArray.
-    
+
-   * @throws GfJsonException
-   *           If the value is non-finite number or if the key is null.
+   * @throws GfJsonException If the value is non-finite number or if the key is null.
-  
+
-   * @throws GfJsonException
-   *           if the key is a duplicate
+   * @throws GfJsonException if the key is a duplicate
-   * @throws GfJsonException
-   *           If the value is a non-finite number.
+   * @throws GfJsonException If the value is a non-finite number.
-   * @throws GfJsonException
-   *           If the value is a non-finite number.
+   * @throws GfJsonException If the value is a non-finite number.
-  public GfJsonObject put(String key, Collection<?> value)
-      throws GfJsonException {
+  public GfJsonObject put(String key, Collection<?> value) throws GfJsonException {
-  
-  public GfJsonObject putJSONArray(String key, GfJsonArray value)
-      throws GfJsonException {
+
+  public GfJsonObject putJSONArray(String key, GfJsonArray value) throws GfJsonException {
-  
+
-  
-  public String getType(){
+
+  public String getType() {
-  
+
-   * @throws GfJsonException
-   *           If the object contains an invalid number.
+   * @throws GfJsonException If the object contains an invalid number.
-  
+
-      returnedValue = ((GfJsonObject)value).getInternalJsonObject();
+      returnedValue = ((GfJsonObject) value).getInternalJsonObject();
-      returnedValue = ((GfJsonArray)value).getInternalJsonArray();
+      returnedValue = ((GfJsonArray) value).getInternalJsonArray();
-    
+
-  
-  public static boolean isJSONKind(Object object){
+
+  public static boolean isJSONKind(Object object) {
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66