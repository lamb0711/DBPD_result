Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Window>Preferences>Java>Templates.
- * To enable and disable the creation of type comments go to
+ * Window>Preferences>Java>Templates. To enable and disable the creation of type comments go to
-public class DistributionChannel  {
+public class DistributionChannel {
-  
+
-  
+
+   * 
-   * @return list of recipients who did not receive the message because
-   * they left the view (null if all received it or it was sent to
-   * {@link DistributionMessage#ALL_RECIPIENTS}).
-   * @throws NotSerializableException
-   *         If content cannot be serialized
+   * @return list of recipients who did not receive the message because they left the view (null if
+   *         all received it or it was sent to {@link DistributionMessage#ALL_RECIPIENTS}).
+   * @throws NotSerializableException If content cannot be serialized
-  public Set send(InternalDistributedMember[] destinations,
-                  DistributionMessage content,
-                  DistributionManager dm, DistributionStats stats)
-  throws NotSerializableException {
+  public Set send(InternalDistributedMember[] destinations, DistributionMessage content,
+      DistributionManager dm, DistributionStats stats) throws NotSerializableException {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.DistributionChannel_ATTEMPTING_A_SEND_TO_A_DISCONNECTED_DISTRIBUTIONMANAGER));
-      if (destinations.length == 1 
-          && destinations[0] == DistributionMessage.ALL_RECIPIENTS)
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.DistributionChannel_ATTEMPTING_A_SEND_TO_A_DISCONNECTED_DISTRIBUTIONMANAGER));
+      if (destinations.length == 1 && destinations[0] == DistributionMessage.ALL_RECIPIENTS)
-      for (int i = 0; i < destinations.length; i ++)
+      for (int i = 0; i < destinations.length; i++)
-      }
+    }
-  public void disconnect(boolean duringStartup)
-  {
+  public void disconnect(boolean duringStartup) {
-    logger.debug("DistributionChannel disconnecting with "+ membershipManager + "; duringStartup="+duringStartup);
-    
+    logger.debug("DistributionChannel disconnecting with " + membershipManager + "; duringStartup="
+        + duringStartup);
+
-      }
-      else {
+      } else {
-   * Returns the id of this distribution channel.  If this channel
-   * uses JavaGroups and the conduit to communicate with others, then
-   * the port of the JavaGroups channel's {@link InternalDistributedMember address} is
-   * returned.
+   * Returns the id of this distribution channel. If this channel uses JavaGroups and the conduit to
+   * communicate with others, then the port of the JavaGroups channel's
+   * {@link InternalDistributedMember address} is returned.
-      throw new DistributedSystemDisconnectedException(LocalizedStrings.DistributionChannel_I_NO_LONGER_HAVE_A_MEMBERSHIP_ID.toLocalizedString());
+      throw new DistributedSystemDisconnectedException(
+          LocalizedStrings.DistributionChannel_I_NO_LONGER_HAVE_A_MEMBERSHIP_ID
+              .toLocalizedString());
-      throw new DistributedSystemDisconnectedException(LocalizedStrings.DistributionChannel_I_NO_LONGER_HAVE_A_MEMBERSHIP_ID.toLocalizedString(), membershipManager.getShutdownCause());
+      throw new DistributedSystemDisconnectedException(
+          LocalizedStrings.DistributionChannel_I_NO_LONGER_HAVE_A_MEMBERSHIP_ID.toLocalizedString(),
+          membershipManager.getShutdownCause());
-//    this.shuttingDown = shuttingDown;
+    // this.shuttingDown = shuttingDown;
-//   private void sendViaJGroups(Serializable[] destinations,Address source,Serializable content,
-//                          boolean deliverToSender, int processorType,
-//                          DistributionManager dm)
-//   throws ChannelNotConnectedException, ChannelClosedException {
-//     Message msg = new Message(null, source, content);
-//     msg.setDeliverToSender(deliverToSender);
-//     msg.setProcessorType(processorType);
-//     for (int i=0; i < destinations.length; i++) {
-//       Address destination = (Address) destinations[i];
-//       msg.setDest(destination);
-//       jgroupsChannel.send(msg);
-//       if (destination == null)
-//         break;
-//     }
-//   }
+  // private void sendViaJGroups(Serializable[] destinations,Address source,Serializable content,
+  // boolean deliverToSender, int processorType,
+  // DistributionManager dm)
+  // throws ChannelNotConnectedException, ChannelClosedException {
+  // Message msg = new Message(null, source, content);
+  // msg.setDeliverToSender(deliverToSender);
+  // msg.setProcessorType(processorType);
+  // for (int i=0; i < destinations.length; i++) {
+  // Address destination = (Address) destinations[i];
+  // msg.setDest(destination);
+  // jgroupsChannel.send(msg);
+  // if (destination == null)
+  // break;
+  // }
+  // }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66