GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.
+import org.apache.geode.internal.statistics.LocalStatisticsImpl;
-  public static void refreshProcess(int pid, int[] ints, long[] longs, double[] doubles) { // TODO:
-                                                                                           // was
-                                                                                           // package-protected
+  public static void refreshProcess(int pid, LocalStatisticsImpl stats) {
-      ints[LinuxProcessStats.imageSizeINT] = (int) (tokenizer.nextTokenAsLong() / OneMeg);
-      ints[LinuxProcessStats.rssSizeINT] =
-          (int) ((tokenizer.nextTokenAsLong() * pageSize) / OneMeg);
+      stats.setLong(LinuxProcessStats.imageSizeLONG, tokenizer.nextTokenAsLong() / OneMeg);
+      stats.setLong(LinuxProcessStats.rssSizeLONG,
+          (tokenizer.nextTokenAsLong() * pageSize) / OneMeg);
-  public static void refreshSystem(int[] ints, long[] longs, double[] doubles) { // TODO: was
-                                                                                 // package-protected
+  public static void refreshSystem(LocalStatisticsImpl stats) {
-    ints[LinuxSystemStats.processesINT] = getProcessCount();
-    ints[LinuxSystemStats.cpusINT] = sys_cpus;
+    stats.setLong(LinuxSystemStats.processesLONG, getProcessCount());
+    stats.setLong(LinuxSystemStats.cpusLONG, sys_cpus);
-            ints[LinuxSystemStats.cpuIdleINT] = cpuData[CPU.IDLE.ordinal()];
-            ints[LinuxSystemStats.cpuNiceINT] = cpuData[CPU.NICE.ordinal()];
-            ints[LinuxSystemStats.cpuSystemINT] = cpuData[CPU.SYSTEM.ordinal()];
-            ints[LinuxSystemStats.cpuUserINT] = cpuData[CPU.USER.ordinal()];
-            ints[LinuxSystemStats.cpuStealINT] = cpuData[CPU.STEAL.ordinal()];
-            ints[LinuxSystemStats.iowaitINT] = cpuData[CPU.IOWAIT.ordinal()];
-            ints[LinuxSystemStats.irqINT] = cpuData[CPU.IRQ.ordinal()];
-            ints[LinuxSystemStats.softirqINT] = cpuData[CPU.SOFTIRQ.ordinal()];
-            ints[LinuxSystemStats.cpuActiveINT] = 100 - cpuData[CPU.IDLE.ordinal()];
-            ints[LinuxSystemStats.cpuNonUserINT] = cpuData[CPU.OTHER.ordinal()]
+            stats.setLong(LinuxSystemStats.cpuIdleLONG, cpuData[CPU.IDLE.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuNiceLONG, cpuData[CPU.NICE.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuSystemLONG, cpuData[CPU.SYSTEM.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuUserLONG, cpuData[CPU.USER.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuStealLONG, cpuData[CPU.STEAL.ordinal()]);
+            stats.setLong(LinuxSystemStats.iowaitLONG, cpuData[CPU.IOWAIT.ordinal()]);
+            stats.setLong(LinuxSystemStats.irqLONG, cpuData[CPU.IRQ.ordinal()]);
+            stats.setLong(LinuxSystemStats.softirqLONG, cpuData[CPU.SOFTIRQ.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuActiveLONG, 100 - cpuData[CPU.IDLE.ordinal()]);
+            stats.setLong(LinuxSystemStats.cpuNonUserLONG, cpuData[CPU.OTHER.ordinal()]
-                + cpuData[CPU.IRQ.ordinal()] + cpuData[CPU.SOFTIRQ.ordinal()];
+                + cpuData[CPU.IRQ.ordinal()] + cpuData[CPU.SOFTIRQ.ordinal()]);
-            longs[LinuxSystemStats.pagesPagedInLONG] =
-                SpaceTokenizer.parseAsLong(line.substring(PAGE.length(), secondIndex));
-            longs[LinuxSystemStats.pagesPagedOutLONG] =
-                SpaceTokenizer.parseAsLong(line.substring(secondIndex + 1));
+            stats.setLong(LinuxSystemStats.pagesPagedInLONG,
+                SpaceTokenizer.parseAsLong(line.substring(PAGE.length(), secondIndex)));
+            stats.setLong(LinuxSystemStats.pagesPagedOutLONG,
+                SpaceTokenizer.parseAsLong(line.substring(secondIndex + 1)));
-            longs[LinuxSystemStats.pagesSwappedInLONG] =
-                SpaceTokenizer.parseAsLong(line.substring(SWAP.length(), secondIndex));
-            longs[LinuxSystemStats.pagesSwappedOutLONG] =
-                SpaceTokenizer.parseAsLong(line.substring(secondIndex + 1));
+            stats.setLong(LinuxSystemStats.pagesSwappedInLONG,
+                SpaceTokenizer.parseAsLong(line.substring(SWAP.length(), secondIndex)));
+            stats.setLong(LinuxSystemStats.pagesSwappedOutLONG,
+                SpaceTokenizer.parseAsLong(line.substring(secondIndex + 1)));
-            longs[LinuxSystemStats.contextSwitchesLONG] =
-                SpaceTokenizer.parseAsLong(line.substring(CTXT.length()));
+            stats.setLong(LinuxSystemStats.contextSwitchesLONG,
+                SpaceTokenizer.parseAsLong(line.substring(CTXT.length())));
-            longs[LinuxSystemStats.processCreatesLONG] =
-                SpaceTokenizer.parseAsInt(line.substring(PROCESSES.length()));
+            stats.setLong(LinuxSystemStats.processCreatesLONG,
+                SpaceTokenizer.parseAsInt(line.substring(PROCESSES.length())));
-    getLoadAvg(doubles);
-    getMemInfo(ints);
-    getDiskStats(longs);
-    getNetStats(longs);
-    getNetStatStats(longs, ints);
+    getLoadAvg(stats);
+    getMemInfo(stats);
+    getDiskStats(stats);
+    getNetStats(stats);
+    getNetStatStats(stats);
-      getVmStats(longs);
+      getVmStats(stats);
-  private static void getLoadAvg(double[] doubles) {
+  private static void getLoadAvg(LocalStatisticsImpl stats) {
-      doubles[LinuxSystemStats.loadAverage1DOUBLE] = tokenizer.nextTokenAsDouble();
-      doubles[LinuxSystemStats.loadAverage5DOUBLE] = tokenizer.nextTokenAsDouble();
-      doubles[LinuxSystemStats.loadAverage15DOUBLE] = tokenizer.nextTokenAsDouble();
+      stats.setDouble(LinuxSystemStats.loadAverage1DOUBLE, tokenizer.nextTokenAsDouble());
+      stats.setDouble(LinuxSystemStats.loadAverage5DOUBLE, tokenizer.nextTokenAsDouble());
+      stats.setDouble(LinuxSystemStats.loadAverage15DOUBLE, tokenizer.nextTokenAsDouble());
-  private static void getMemInfo(int[] ints) {
+  private static void getMemInfo(LocalStatisticsImpl stats) {
-            ints[LinuxSystemStats.physicalMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.physicalMemoryLONG,
+                (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.freeMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.freeMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.sharedMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.sharedMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.bufferMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.bufferMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.allocatedSwapINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.allocatedSwapLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.unallocatedSwapINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.unallocatedSwapLONG,
+                (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.cachedMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.cachedMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.dirtyMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.dirtyMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-            ints[LinuxSystemStats.dirtyMemoryINT] = (int) (tokenizer.nextTokenAsLong() / 1024);
+            stats.setLong(LinuxSystemStats.dirtyMemoryLONG, (tokenizer.nextTokenAsLong() / 1024));
-  private static void getNetStatStats(long[] longs, int[] ints) {
+  private static void getNetStatStats(LocalStatisticsImpl stats) {
-      longs[LinuxSystemStats.tcpExtSynCookiesRecvLONG] = tcpSyncookiesRecv;
-      longs[LinuxSystemStats.tcpExtSynCookiesSentLONG] = tcpSyncookiesSent;
-      longs[LinuxSystemStats.tcpExtListenDropsLONG] = tcpListenDrops;
-      longs[LinuxSystemStats.tcpExtListenOverflowsLONG] = tcpListenOverflows;
+      stats.setLong(LinuxSystemStats.tcpExtSynCookiesRecvLONG, tcpSyncookiesRecv);
+      stats.setLong(LinuxSystemStats.tcpExtSynCookiesSentLONG, tcpSyncookiesSent);
+      stats.setLong(LinuxSystemStats.tcpExtListenDropsLONG, tcpListenDrops);
+      stats.setLong(LinuxSystemStats.tcpExtListenOverflowsLONG, tcpListenOverflows);
-      ints[LinuxSystemStats.tcpSOMaxConnINT] = soMaxConn;
+      stats.setLong(LinuxSystemStats.tcpSOMaxConnLONG, soMaxConn);
-  private static void getNetStats(long[] longs) {
+  private static void getNetStats(LocalStatisticsImpl stats) {
-      longs[LinuxSystemStats.loopbackPacketsLONG] = lo_recv_packets;
-      longs[LinuxSystemStats.loopbackBytesLONG] = lo_recv_bytes;
-      longs[LinuxSystemStats.recvPacketsLONG] = other_recv_packets;
-      longs[LinuxSystemStats.recvBytesLONG] = other_recv_bytes;
-      longs[LinuxSystemStats.recvErrorsLONG] = other_recv_errs;
-      longs[LinuxSystemStats.recvDropsLONG] = other_recv_drop;
-      longs[LinuxSystemStats.xmitPacketsLONG] = other_xmit_packets;
-      longs[LinuxSystemStats.xmitBytesLONG] = other_xmit_bytes;
-      longs[LinuxSystemStats.xmitErrorsLONG] = other_xmit_errs;
-      longs[LinuxSystemStats.xmitDropsLONG] = other_xmit_drop;
-      longs[LinuxSystemStats.xmitCollisionsLONG] = other_xmit_colls;
+      stats.setLong(LinuxSystemStats.loopbackPacketsLONG, lo_recv_packets);
+      stats.setLong(LinuxSystemStats.loopbackBytesLONG, lo_recv_bytes);
+      stats.setLong(LinuxSystemStats.recvPacketsLONG, other_recv_packets);
+      stats.setLong(LinuxSystemStats.recvBytesLONG, other_recv_bytes);
+      stats.setLong(LinuxSystemStats.recvErrorsLONG, other_recv_errs);
+      stats.setLong(LinuxSystemStats.recvDropsLONG, other_recv_drop);
+      stats.setLong(LinuxSystemStats.xmitPacketsLONG, other_xmit_packets);
+      stats.setLong(LinuxSystemStats.xmitBytesLONG, other_xmit_bytes);
+      stats.setLong(LinuxSystemStats.xmitErrorsLONG, other_xmit_errs);
+      stats.setLong(LinuxSystemStats.xmitDropsLONG, other_xmit_drop);
+      stats.setLong(LinuxSystemStats.xmitCollisionsLONG, other_xmit_colls);
-  private static void getDiskStats(long[] longs) {
+  private static void getDiskStats(LocalStatisticsImpl stats) {
-      longs[LinuxSystemStats.readsCompletedLONG] = readsCompleted;
-      longs[LinuxSystemStats.readsMergedLONG] = readsMerged;
-      longs[LinuxSystemStats.bytesReadLONG] = sectorsRead * SECTOR_SIZE;
-      longs[LinuxSystemStats.timeReadingLONG] = timeReading;
-      longs[LinuxSystemStats.writesCompletedLONG] = writesCompleted;
-      longs[LinuxSystemStats.writesMergedLONG] = writesMerged;
-      longs[LinuxSystemStats.bytesWrittenLONG] = sectorsWritten * SECTOR_SIZE;
-      longs[LinuxSystemStats.timeWritingLONG] = timeWriting;
-      longs[LinuxSystemStats.iosInProgressLONG] = iosInProgress;
-      longs[LinuxSystemStats.timeIosInProgressLONG] = timeIosInProgress;
-      longs[LinuxSystemStats.ioTimeLONG] = ioTime;
+      stats.setLong(LinuxSystemStats.readsCompletedLONG, readsCompleted);
+      stats.setLong(LinuxSystemStats.readsMergedLONG, readsMerged);
+      stats.setLong(LinuxSystemStats.bytesReadLONG, sectorsRead * SECTOR_SIZE);
+      stats.setLong(LinuxSystemStats.timeReadingLONG, timeReading);
+      stats.setLong(LinuxSystemStats.writesCompletedLONG, writesCompleted);
+      stats.setLong(LinuxSystemStats.writesMergedLONG, writesMerged);
+      stats.setLong(LinuxSystemStats.bytesWrittenLONG, sectorsWritten * SECTOR_SIZE);
+      stats.setLong(LinuxSystemStats.timeWritingLONG, timeWriting);
+      stats.setLong(LinuxSystemStats.iosInProgressLONG, iosInProgress);
+      stats.setLong(LinuxSystemStats.timeIosInProgressLONG, timeIosInProgress);
+      stats.setLong(LinuxSystemStats.ioTimeLONG, ioTime);
-  private static void getVmStats(long[] longs) {
+  private static void getVmStats(LocalStatisticsImpl stats) {
-          longs[LinuxSystemStats.pagesPagedInLONG] =
-              SpaceTokenizer.parseAsLong(line.substring(PGPGIN.length()));
+          stats.setLong(LinuxSystemStats.pagesPagedInLONG,
+              SpaceTokenizer.parseAsLong(line.substring(PGPGIN.length())));
-          longs[LinuxSystemStats.pagesPagedOutLONG] =
-              SpaceTokenizer.parseAsLong(line.substring(PGPGOUT.length()));
+          stats.setLong(LinuxSystemStats.pagesPagedOutLONG,
+              SpaceTokenizer.parseAsLong(line.substring(PGPGOUT.length())));
-          longs[LinuxSystemStats.pagesSwappedInLONG] =
-              SpaceTokenizer.parseAsLong(line.substring(PSWPIN.length()));
+          stats.setLong(LinuxSystemStats.pagesSwappedInLONG,
+              SpaceTokenizer.parseAsLong(line.substring(PSWPIN.length())));
-          longs[LinuxSystemStats.pagesSwappedOutLONG] =
-              SpaceTokenizer.parseAsLong(line.substring(PSWPOUT.length()));
+          stats.setLong(LinuxSystemStats.pagesSwappedOutLONG,
+              SpaceTokenizer.parseAsLong(line.substring(PSWPOUT.length())));

INS26 INS40 INS44 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 MOV42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS40 MOV27 INS42 INS42 INS40 MOV27 UPD42 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 MOV27 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 MOV27 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 MOV25 MOV32 MOV8 INS25 INS32 MOV32 MOV8 INS25 INS42 INS42 INS40 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS21 INS32 MOV32 MOV8 MOV25 INS42 INS42 INS40 MOV32 INS32 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV2 INS42 INS42 INS40 MOV27 INS42 INS42 INS40 MOV27 INS32 INS32 MOV21 INS42 INS42 INS40 MOV36 INS32 MOV32 INS42 INS42 INS40 MOV32 INS32 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS32 INS32 INS42 INS42 INS40 MOV36 INS32 MOV21 MOV21 MOV21 MOV32 INS8 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV32 INS32 INS42 INS42 INS40 MOV36 INS32 MOV21 MOV21 MOV21 MOV32 INS8 INS42 INS42 INS40 MOV32 INS32 INS42 INS42 INS40 MOV36 INS32 MOV21 MOV21 MOV21 MOV32 INS25 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 MOV36 INS32 MOV21 MOV32 MOV8 MOV25 INS42 INS42 INS40 MOV36 INS32 MOV8 INS42 INS42 INS40 MOV36 INS32 INS42 INS42 INS40 MOV36 INS32 INS42 INS42 INS40 MOV36 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL40 DEL2 DEL39 DEL36 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL36 DEL11 DEL7 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL21 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL39 DEL85 DEL5 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL39 DEL85 DEL5 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL42 DEL40 DEL2 DEL39 DEL11 DEL7 DEL8 DEL8 DEL25 DEL25 DEL25 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL44 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL39 DEL85 DEL5 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL39 DEL85 DEL5 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL42 DEL40 DEL2 DEL42 DEL7 DEL39 DEL85 DEL5 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7 DEL42 DEL40 DEL2 DEL7