Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  RegisterInterestList() {
-  }
+  RegisterInterestList() {}
-      policy = (InterestResultPolicy)msg.getPart(1).getObject();
-    }
-    catch (Exception e) {
+      policy = (InterestResultPolicy) msg.getPart(1).getObject();
+    } catch (Exception e) {
-    boolean isDurable = false ;
+    boolean isDurable = false;
-      byte[] durablePartBytes = (byte[])durablePart.getObject();
+      byte[] durablePartBytes = (byte[]) durablePart.getObject();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    
+
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    
-    boolean sendUpdatesAsInvalidates = false ;
-    
+
+    boolean sendUpdatesAsInvalidates = false;
+
-        byte[] notifyPartBytes = (byte[])notifyPart.getObject();
+        byte[] notifyPartBytes = (byte[]) notifyPart.getObject();
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    
+
-      logger.debug("{}: Received register interest request ({} bytes) from {} for the following {} keys in region {}: {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), numberOfKeys, regionName, keys);
+      logger.debug(
+          "{}: Received register interest request ({} bytes) from {} for the following {} keys in region {}: {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), numberOfKeys,
+          regionName, keys);
-    
+
-    AcceptorImpl acceptor = servConn.getAcceptor();
-    
-    //  Check if the Server is running in NotifyBySubscription=true mode.
-    if (!acceptor.getCacheClientNotifier().getNotifyBySubscription()) {
-      // This should have been taken care at the client.
-      String err = LocalizedStrings.RegisterInterest_INTEREST_REGISTRATION_IS_SUPPORTED_ONLY_FOR_SERVERS_WITH_NOTIFYBYSUBSCRIPTION_SET_TO_TRUE.toLocalizedString();
-      writeChunkedErrorResponse(msg, MessageType.REGISTER_INTEREST_DATA_ERROR,
-          err, servConn);
-      servConn.setAsTrue(RESPONDED);  return;
-    }
-    */
+     * AcceptorImpl acceptor = servConn.getAcceptor();
+     * 
+     * // Check if the Server is running in NotifyBySubscription=true mode. if
+     * (!acceptor.getCacheClientNotifier().getNotifyBySubscription()) { // This should have been
+     * taken care at the client. String err = LocalizedStrings.
+     * RegisterInterest_INTEREST_REGISTRATION_IS_SUPPORTED_ONLY_FOR_SERVERS_WITH_NOTIFYBYSUBSCRIPTION_SET_TO_TRUE
+     * .toLocalizedString(); writeChunkedErrorResponse(msg,
+     * MessageType.REGISTER_INTEREST_DATA_ERROR, err, servConn); servConn.setAsTrue(RESPONDED);
+     * return; }
+     */
-        errMessage = LocalizedStrings.RegisterInterestList_THE_INPUT_LIST_OF_KEYS_IS_EMPTY_AND_THE_INPUT_REGION_NAME_IS_NULL_FOR_THE_REGISTER_INTEREST_REQUEST;  
+        errMessage =
+            LocalizedStrings.RegisterInterestList_THE_INPUT_LIST_OF_KEYS_IS_EMPTY_AND_THE_INPUT_REGION_NAME_IS_NULL_FOR_THE_REGISTER_INTEREST_REQUEST;
-        errMessage = LocalizedStrings.RegisterInterestList_THE_INPUT_LIST_OF_KEYS_FOR_THE_REGISTER_INTEREST_REQUEST_IS_EMPTY;        
+        errMessage =
+            LocalizedStrings.RegisterInterestList_THE_INPUT_LIST_OF_KEYS_FOR_THE_REGISTER_INTEREST_REQUEST_IS_EMPTY;
-        errMessage = LocalizedStrings.RegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
+        errMessage =
+            LocalizedStrings.RegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
-      writeChunkedErrorResponse(msg, MessageType.REGISTER_INTEREST_DATA_ERROR,
-          s, servConn);
+      writeChunkedErrorResponse(msg, MessageType.REGISTER_INTEREST_DATA_ERROR, s, servConn);
-      LocalRegion region = (LocalRegion)servConn.getCache().getRegion(regionName);
-      if (region == null) {
-        logger.info(LocalizedMessage.create(LocalizedStrings.RegisterInterestList_0_REGION_NAMED_1_WAS_NOT_FOUND_DURING_REGISTER_INTEREST_LIST_REQUEST, new Object[]{servConn.getName(), regionName}));
-        // writeChunkedErrorResponse(msg,
-        // MessageType.REGISTER_INTEREST_DATA_ERROR, message);
-        // responded = true;
-      } // else { // region not null
-      try {
-        this.securityService.authorizeRegionRead(regionName);
-        AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-        if (authzRequest != null) {
-          if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
-            RegisterInterestOperationContext registerContext = authzRequest
-                .registerInterestListAuthorize(regionName, keys, policy);
-            keys = (List)registerContext.getKey();
-          }
+    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
+    if (region == null) {
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.RegisterInterestList_0_REGION_NAMED_1_WAS_NOT_FOUND_DURING_REGISTER_INTEREST_LIST_REQUEST,
+          new Object[] {servConn.getName(), regionName}));
+      // writeChunkedErrorResponse(msg,
+      // MessageType.REGISTER_INTEREST_DATA_ERROR, message);
+      // responded = true;
+    } // else { // region not null
+    try {
+      this.securityService.authorizeRegionRead(regionName);
+      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      if (authzRequest != null) {
+        if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
+          RegisterInterestOperationContext registerContext =
+              authzRequest.registerInterestListAuthorize(regionName, keys, policy);
+          keys = (List) registerContext.getKey();
-        // Register interest
-        servConn.getAcceptor().getCacheClientNotifier().registerClientInterest(
-            regionName, keys, servConn.getProxyID(), isDurable,
-            sendUpdatesAsInvalidates, false, 0, true);
-      catch (Exception ex) {
+      // Register interest
+      servConn.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName, keys,
+          servConn.getProxyID(), isDurable, sendUpdatesAsInvalidates, false, 0, true);
+    } catch (Exception ex) {
+      // If an interrupted exception is thrown , rethrow it
+      checkForInterrupt(servConn, ex);
+      // Otherwise, write an exception message and continue
+      writeChunkedException(msg, ex, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    // Update the statistics and write the reply
+    // bserverStats.incLong(processDestroyTimeId,
+    // DistributionStats.getStatTime() - start);
+    // start = DistributionStats.getStatTime();
+
+    boolean isPrimary = servConn.getAcceptor().getCacheClientNotifier()
+        .getClientProxy(servConn.getProxyID()).isPrimary();
+    if (!isPrimary) {
+      chunkedResponseMsg.setMessageType(MessageType.RESPONSE_FROM_SECONDARY);
+      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.sendHeader();
+      chunkedResponseMsg.setLastChunk(true);
+      if (logger.isDebugEnabled()) {
+        logger.debug(
+            "{}: Sending register interest response chunk from secondary for region: {} for key: {} chunk=<{}>",
+            servConn.getName(), regionName, key, chunkedResponseMsg);
+      }
+      chunkedResponseMsg.sendChunk(servConn);
+    } else { // isPrimary
+      // Send header which describes how many chunks will follow
+      chunkedResponseMsg.setMessageType(MessageType.RESPONSE_FROM_PRIMARY);
+      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.sendHeader();
+
+      // Send chunk response
+      try {
+        fillAndSendRegisterInterestResponseChunks(region, keys, InterestType.KEY, policy, servConn);
+        servConn.setAsTrue(RESPONDED);
+      } catch (Exception e) {
-        checkForInterrupt(servConn, ex);
-        // Otherwise, write an exception message and continue
-        writeChunkedException(msg, ex, false, servConn);
+        checkForInterrupt(servConn, e);
+
+        // otherwise send the exception back to client
+        writeChunkedException(msg, e, false, servConn);
-      // Update the statistics and write the reply
-      // bserverStats.incLong(processDestroyTimeId,
-      // DistributionStats.getStatTime() - start);
-      // start = DistributionStats.getStatTime();
-
-      boolean isPrimary = servConn.getAcceptor().getCacheClientNotifier()
-          .getClientProxy(servConn.getProxyID()).isPrimary();
-      if (!isPrimary) {
-        chunkedResponseMsg.setMessageType(MessageType.RESPONSE_FROM_SECONDARY);
-        chunkedResponseMsg.setTransactionId(msg.getTransactionId());
-        chunkedResponseMsg.sendHeader();
-        chunkedResponseMsg.setLastChunk(true);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Sending register interest response chunk from secondary for region: {} for key: {} chunk=<{}>", servConn.getName(), regionName, key, chunkedResponseMsg);
-        }
-        chunkedResponseMsg.sendChunk(servConn);
+      if (logger.isDebugEnabled()) {
+        // logger.debug(getName() + ": Sent chunk (1 of 1) of register interest
+        // response (" + chunkedResponseMsg.getBufferLength() + " bytes) for
+        // region " + regionName + " key " + key);
+        logger.debug(
+            "{}: Sent register interest response for the following {} keys in region {}: {}",
+            servConn.getName(), numberOfKeys, regionName, keys);
-      else { // isPrimary
-        // Send header which describes how many chunks will follow
-        chunkedResponseMsg.setMessageType(MessageType.RESPONSE_FROM_PRIMARY);
-        chunkedResponseMsg.setTransactionId(msg.getTransactionId());
-        chunkedResponseMsg.sendHeader();
-
-        // Send chunk response
-        try {
-          fillAndSendRegisterInterestResponseChunks(region, keys,
-              InterestType.KEY, policy, servConn);
-          servConn.setAsTrue(RESPONDED);
-        }
-        catch (Exception e) {
-          // If an interrupted exception is thrown , rethrow it
-          checkForInterrupt(servConn, e);
-
-          // otherwise send the exception back to client
-          writeChunkedException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-
-        if (logger.isDebugEnabled()) {
-          // logger.debug(getName() + ": Sent chunk (1 of 1) of register interest
-          // response (" + chunkedResponseMsg.getBufferLength() + " bytes) for
-          // region " + regionName + " key " + key);
-          logger.debug("{}: Sent register interest response for the following {} keys in region {}: {}", servConn.getName(), numberOfKeys, regionName, keys);
-        }
-        // bserverStats.incLong(writeDestroyResponseTimeId,
-        // DistributionStats.getStatTime() - start);
-        // bserverStats.incInt(destroyResponsesId, 1);
-      } // isPrimary
-      // } // region not null
+      // bserverStats.incLong(writeDestroyResponseTimeId,
+      // DistributionStats.getStatTime() - start);
+      // bserverStats.incInt(destroyResponsesId, 1);
+    } // isPrimary
+    // } // region not null

