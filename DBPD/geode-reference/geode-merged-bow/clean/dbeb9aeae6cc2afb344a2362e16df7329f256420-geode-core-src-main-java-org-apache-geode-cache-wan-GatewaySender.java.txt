Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * The default value ( true) for writing to disk synchronously in case
-   * of persistence.
-   */  
+   * The default value ( true) for writing to disk synchronously in case of persistence.
+   */
-   * The default buffer size for socket buffers from a sending GatewaySender to
-   * its receiving <code>GatewayReceiver</code>.
+   * The default buffer size for socket buffers from a sending GatewaySender to its receiving
+   * <code>GatewayReceiver</code>.
-   * The default amount of time in milliseconds that a socket read between a
-   * sending <code>Gateway</code> and its receiving <code>Gateway</code> will
-   * block.
+   * The default amount of time in milliseconds that a socket read between a sending
+   * <code>Gateway</code> and its receiving <code>Gateway</code> will block.
-  public static final int DEFAULT_SOCKET_READ_TIMEOUT = Integer.getInteger(
-      DistributionConfig.GEMFIRE_PREFIX + "cache.gatewaySender.default-socket-read-timeout", 0).intValue();
+  public static final int DEFAULT_SOCKET_READ_TIMEOUT = Integer
+      .getInteger(
+          DistributionConfig.GEMFIRE_PREFIX + "cache.gatewaySender.default-socket-read-timeout", 0)
+      .intValue();
-  
+
-  static public final int QUEUE_OPLOG_SIZE
-      = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "cache.gatewaySender.queueOpLogSize", 1024 * 1024 * 100).intValue();
+  static public final int QUEUE_OPLOG_SIZE =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "cache.gatewaySender.queueOpLogSize",
+          1024 * 1024 * 100).intValue();
-  
+
-  public static final int DEFAULT_PARALLELISM_REPLICATED_REGION = Integer
-      .getInteger(
-          DistributionConfig.GEMFIRE_PREFIX + "cache.gatewaySender.defaultParallelismForReplicatedRegion",
-          113).intValue();  
+  public static final int DEFAULT_PARALLELISM_REPLICATED_REGION =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX
+          + "cache.gatewaySender.defaultParallelismForReplicatedRegion", 113).intValue();
-   * The default maximum amount of memory (MB) to allow in the queue before
-   * overflowing entries to disk
+   * The default maximum amount of memory (MB) to allow in the queue before overflowing entries to
+   * disk
-   * Time, in seconds, that we allow before a <code>GatewaySender is considered
-   * dead and should be aborted
+   * Time, in seconds, that we allow before a <code>GatewaySender is considered dead and should be
+   * aborted
-  public static final long GATEWAY_SENDER_TIMEOUT
-      = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "GATEWAY_SENDER_TIMEOUT", 30).intValue();
+  public static final long GATEWAY_SENDER_TIMEOUT = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "GATEWAY_SENDER_TIMEOUT", 30).intValue();
-  
+
-   * The obsolete socket read timeout java system property. Since customers have
-   * been given this property, it is used to log a warning.
+   * The obsolete socket read timeout java system property. Since customers have been given this
+   * property, it is used to log a warning.
-  public static final String GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.GATEWAY_CONNECTION_READ_TIMEOUT";
+  public static final String GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.GATEWAY_CONNECTION_READ_TIMEOUT";
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.GATEWAY_CONNECTION_IDLE_TIMEOUT", -1).intValue();
-  
+      .getInteger(
+          DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.GATEWAY_CONNECTION_IDLE_TIMEOUT", -1)
+      .intValue();
+
-  public static final boolean REMOVE_FROM_QUEUE_ON_EXCEPTION =
-      (System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.REMOVE_FROM_QUEUE_ON_EXCEPTION") != null)
-          ? Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.REMOVE_FROM_QUEUE_ON_EXCEPTION")
-      : true;
+  public static final boolean REMOVE_FROM_QUEUE_ON_EXCEPTION = (System.getProperty(
+      DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.REMOVE_FROM_QUEUE_ON_EXCEPTION") != null)
+          ? Boolean.getBoolean(
+              DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.REMOVE_FROM_QUEUE_ON_EXCEPTION")
+          : true;
-  public static final boolean EARLY_ACK = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.EARLY_ACK");
+  public static final boolean EARLY_ACK =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "GatewaySender.EARLY_ACK");
-  
+
-  
+
-   * Retry a connection from sender to receiver after specified time interval (in milliseconds) 
-   * in case receiver is not up and running. Default is set to 1000 milliseconds i.e. 1 second.
+   * Retry a connection from sender to receiver after specified time interval (in milliseconds) in
+   * case receiver is not up and running. Default is set to 1000 milliseconds i.e. 1 second.
-  public static final int CONNECTION_RETRY_INTERVAL = Integer.getInteger(
-      DistributionConfig.GEMFIRE_PREFIX + "gateway-connection-retry-interval", 1000).intValue();
-  
+  public static final int CONNECTION_RETRY_INTERVAL = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "gateway-connection-retry-interval", 1000)
+      .intValue();
+
-     * Indicates that events will be parallelized based on the event's
-     * originating member and thread
+     * Indicates that events will be parallelized based on the event's originating member and thread
-    /** Indicates that events will be parallelized based on the event's:
-     *  - partition (using the PartitionResolver) in the case of a partitioned
-     *    region event
-     *  - key in the case of a replicated region event
+    /**
+     * Indicates that events will be parallelized based on the event's: - partition (using the
+     * PartitionResolver) in the case of a partitioned region event - key in the case of a
+     * replicated region event
+
-   * Starts this GatewaySender. Once the GatewaySender is running, its
-   * configuration cannot be changed.
+   * Starts this GatewaySender. Once the GatewaySender is running, its configuration cannot be
+   * changed.
-   * Stops this GatewaySender. 
-   * The scope of this operation is the VM on which it is invoked.
-   * In case the GatewaySender is parallel, the GatewaySender will be stopped on
-   * individual node where this API is called.
-   * If the GatewaySender is not parallel, then the GatewaySender will stop on this VM
-   * and the secondary GatewaySender will become primary and start dispatching events.
+   * Stops this GatewaySender. The scope of this operation is the VM on which it is invoked. In case
+   * the GatewaySender is parallel, the GatewaySender will be stopped on individual node where this
+   * API is called. If the GatewaySender is not parallel, then the GatewaySender will stop on this
+   * VM and the secondary GatewaySender will become primary and start dispatching events.
-   * The GatewaySender will wait for GatewaySender.MAXIMUM_SHUTDOWN_WAIT_TIME seconds 
-   * before stopping itself. If the system property is set to -1 then it will wait until
-   * all the events are dispatched from the queue.
-   *  
+   * The GatewaySender will wait for GatewaySender.MAXIMUM_SHUTDOWN_WAIT_TIME seconds before
+   * stopping itself. If the system property is set to -1 then it will wait until all the events are
+   * dispatched from the queue.
+   * 
-   * Pauses the dispatching of the events from the underlying queue. It should be kept 
-   * in mind that the events will still be getting queued into the queue. 
-   * The scope of this operation is the VM on which it is invoked.
-   * In case the GatewaySender is parallel, the GatewaySender will be paused on
-   * individual node where this API is called and the GatewaySender on other VM's can still
-   * dispatch events.
-   * In case the GatewaySender is not parallel, and the running GatewaySender on which this API
-   * is invoked is not primary then PRIMARY GatewaySender will still continue dispatching events. 
+   * Pauses the dispatching of the events from the underlying queue. It should be kept in mind that
+   * the events will still be getting queued into the queue. The scope of this operation is the VM
+   * on which it is invoked. In case the GatewaySender is parallel, the GatewaySender will be paused
+   * on individual node where this API is called and the GatewaySender on other VM's can still
+   * dispatch events. In case the GatewaySender is not parallel, and the running GatewaySender on
+   * which this API is invoked is not primary then PRIMARY GatewaySender will still continue
+   * dispatching events.
-   * The batch of events that are in the process of being dispatched are dispatched irrespective of the 
-   * state of pause operation. We can expect maximum of one batch of events being received at the GatewayReceiver
-   * even after the GatewaySenders were paused.
-   *  
-   *  @see GatewaySender#isParallel()
-   *  @see GatewaySender#getBatchSize()
-   *  @see GatewaySender#resume()
+   * The batch of events that are in the process of being dispatched are dispatched irrespective of
+   * the state of pause operation. We can expect maximum of one batch of events being received at
+   * the GatewayReceiver even after the GatewaySenders were paused.
+   * 
+   * @see GatewaySender#isParallel()
+   * @see GatewaySender#getBatchSize()
+   * @see GatewaySender#resume()
-  
+
-  
+
-   * Removes the provided <code>GatewayEventFilter</code> from this
-   * GatewaySender.
+   * Removes the provided <code>GatewayEventFilter</code> from this GatewaySender.
+   * 
-  
+
-   * Returns the id of the remote <code>GatewayReceiver</code>'s
-   * DistributedSystem.
+   * Returns the id of the remote <code>GatewayReceiver</code>'s DistributedSystem.
-   * @return the id of the remote <code>GatewayReceiver</code>'s
-   *         DistributedSystem.
+   * @return the id of the remote <code>GatewayReceiver</code>'s DistributedSystem.
-   * Returns the configured buffer size of the socket connection between this
-   * GatewaySender and its receiving <code>GatewayReceiver</code>. The default
-   * is 32768 bytes.
+   * Returns the configured buffer size of the socket connection between this GatewaySender and its
+   * receiving <code>GatewayReceiver</code>. The default is 32768 bytes.
-   * @return the configured buffer size of the socket connection between this
-   *         GatewaySender and its receiving <code>GatewayReceiver</code>
+   * @return the configured buffer size of the socket connection between this GatewaySender and its
+   *         receiving <code>GatewayReceiver</code>
-   * Returns the amount of time in milliseconds that a socket read between a
-   * sending GatewaySender and its receiving <code>GatewayReceiver</code> will
-   * block. 
-   * The default value is 0 which is interpreted as infinite timeout.
+   * Returns the amount of time in milliseconds that a socket read between a sending GatewaySender
+   * and its receiving <code>GatewayReceiver</code> will block. The default value is 0 which is
+   * interpreted as infinite timeout.
-   * @return the amount of time in milliseconds that a socket read between a
-   *         sending GatewaySender and its receiving
-   *         <code>GatewayReceiver</code> will block
+   * @return the amount of time in milliseconds that a socket read between a sending GatewaySender
+   *         and its receiving <code>GatewayReceiver</code> will block
-   * Returns the maximum amount of memory (in MB) for a GatewaySender's queue.
-   * The default is 100.
+   * Returns the maximum amount of memory (in MB) for a GatewaySender's queue. The default is 100.
-   * Returns the batch size for this GatewaySender.
-   * Default batchSize is 100.
+   * Returns the batch size for this GatewaySender. Default batchSize is 100.
-   * Returns the batch time interval for this GatewaySender.
-   * Default value of batchTimeInterval is 1000.
+   * Returns the batch time interval for this GatewaySender. Default value of batchTimeInterval is
+   * 1000.
-   * Answers whether to enable batch conflation for a GatewaySender 's queue.
-   * The default value is false.
+   * Answers whether to enable batch conflation for a GatewaySender 's queue. The default value is
+   * false.
-   * @return whether to enable batch conflation for batches sent from a
-   *         GatewaySender to its corresponding <code>GatewayReceiver</code>.
+   * @return whether to enable batch conflation for batches sent from a GatewaySender to its
+   *         corresponding <code>GatewayReceiver</code>.
-   * Returns true if persistence is enabled for this GatewaySender, otherwise
-   * returns false.
-   * Default is false if not set explicitly.
+   * Returns true if persistence is enabled for this GatewaySender, otherwise returns false. Default
+   * is false if not set explicitly.
-   * Returns the alert threshold in milliseconds for entries in a GatewaySender's queue.
-   * Default value is 0.
+   * Returns the alert threshold in milliseconds for entries in a GatewaySender's queue. Default
+   * value is 0.
-   * Returns the list of <code>GatewayEventFilter</code> added to this
-   * GatewaySender.
+   * Returns the list of <code>GatewayEventFilter</code> added to this GatewaySender.
-   * @return the list of <code>GatewayEventFilter</code> added to this
-   *         GatewaySender.
+   * @return the list of <code>GatewayEventFilter</code> added to this GatewaySender.
-   * Returns the list of <code>GatewayTransportFilter</code> added to this
-   * GatewaySender.
+   * Returns the list of <code>GatewayTransportFilter</code> added to this GatewaySender.
-   * @return the list of <code>GatewayTransportFilter</code> added to this
-   *         GatewaySender.
+   * @return the list of <code>GatewayTransportFilter</code> added to this GatewaySender.
-   * Returns isDiskSynchronous boolean property for this GatewaySender.
-   * Default value is true.
+   * Returns isDiskSynchronous boolean property for this GatewaySender. Default value is true.
-  
+
-   * Returns the manual start boolean property for this GatewaySender.
-   * Default is false i.e. the GatewaySender will automatically start once created.
+   * Returns the manual start boolean property for this GatewaySender. Default is false i.e. the
+   * GatewaySender will automatically start once created.
-  
-  
+
+
-   * Returns the number of dispatcher threads working for this <code>GatewaySender</code>.
-   * Default number of dispatcher threads is 5.
+   * Returns the number of dispatcher threads working for this <code>GatewaySender</code>. Default
+   * number of dispatcher threads is 5.
-  
+
-   * Returns the order policy followed while dispatching the events to remote ds.
-   * Order policy is set only when dispatcher threads are > 1.
-   * Default value of order policy is KEY.
+   * Returns the order policy followed while dispatching the events to remote ds. Order policy is
+   * set only when dispatcher threads are > 1. Default value of order policy is KEY.
+   * 
-  
+
-  
+
+
+  /**
+   * Destroys the GatewaySender.
+   * <p>
+   * In case of ParallelGatewaySender, the destroy operation does distributed destroy of the Queue
+   * Region. In case of SerialGatewaySender, the Queue Region is destroyed locally.
+   * 
+   * @since Geode 1.1
+   *
+   */
+  void destroy();
+
+

INS31 INS29 INS39 INS42 INS65 INS65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66