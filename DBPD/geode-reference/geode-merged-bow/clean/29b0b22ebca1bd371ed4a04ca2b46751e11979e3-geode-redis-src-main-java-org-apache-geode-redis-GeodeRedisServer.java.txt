GEODE-8082: Refactor GeodeRedisServer (#5080)


Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: john Hutchison <hutchisonjo@vmware.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Sarah <sabbey@pivotal.io>
-import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.geode.redis.internal.serverinitializer.NamedThreadFactory;
-        Executors.newScheduledThreadPool(numExpirationThreads, new ThreadFactory() {
-          private final AtomicInteger counter = new AtomicInteger();
-
-          @Override
-          public Thread newThread(Runnable r) {
-            Thread t = new Thread(r);
-            t.setName("GemFireRedis-ScheduledExecutor-" + counter.incrementAndGet());
-            t.setDaemon(true);
-            return t;
-          }
-
-        });
+        Executors.newScheduledThreadPool(numExpirationThreads,
+            new NamedThreadFactory("GemFireRedis-ScheduledExecutor-", true));
-    ThreadFactory selectorThreadFactory = new ThreadFactory() {
-      private final AtomicInteger counter = new AtomicInteger();
+    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();
-      @Override
-      public Thread newThread(Runnable r) {
-        Thread t = new Thread(r);
-        t.setName("GeodeRedisServer-SelectorThread-" + counter.incrementAndGet());
-        t.setDaemon(true);
-        return t;
-      }
-    };
-
-    ThreadFactory workerThreadFactory = new ThreadFactory() {
-      private final AtomicInteger counter = new AtomicInteger();
-
-      @Override
-      public Thread newThread(Runnable r) {
-        Thread t = new Thread(r);
-        t.setName("GeodeRedisServer-WorkerThread-" + counter.incrementAndGet());
-        return t;
-      }
-    };
-
-    bossGroup = null;
-    workerGroup = null;
-    Class<? extends ServerChannel> socketClass;
-    if (singleThreadPerConnection) {
-      socketClass =
-          startRedisServiceSingleThreadPerConnection(selectorThreadFactory, workerThreadFactory);
-    } else {
-      bossGroup = new NioEventLoopGroup(numSelectorThreads, selectorThreadFactory);
-      workerGroup = new NioEventLoopGroup(numWorkerThreads, workerThreadFactory);
-      socketClass = NioServerSocketChannel.class;
-    }
-    String pwd = system.getConfig().getRedisPassword();
-    final byte[] pwdB = Coder.stringToBytes(pwd);
-    ServerBootstrap b = new ServerBootstrap();
+    String redisPassword = system.getConfig().getRedisPassword();
+    final byte[] redisPasswordBytes = Coder.stringToBytes(redisPassword);
+    ServerBootstrap serverBootstrap = new ServerBootstrap();
-    b.group(bossGroup, workerGroup).channel(socketClass)
-        .childHandler(new ChannelInitializer<SocketChannel>() {
-          @Override
-          public void initChannel(SocketChannel ch) {
-            if (logger.fineEnabled()) {
-              logger.fine("GeodeRedisServer-Connection established with " + ch.remoteAddress());
-            }
-            ChannelPipeline p = ch.pipeline();
-            addSSLIfEnabled(ch, p);
-            p.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());
-            p.addLast(new WriteTimeoutHandler(10));
-            p.addLast(ExecutionHandlerContext.class.getSimpleName(),
-                new ExecutionHandlerContext(ch, cache, regionCache, GeodeRedisServer.this, pwdB,
-                    keyRegistrar, pubSub, hashLockService));
-          }
-        }).option(ChannelOption.SO_REUSEADDR, true)
+    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)
+        .childHandler(createChannelInitializer(redisPasswordBytes))
+        .option(ChannelOption.SO_REUSEADDR, true)
-    // Bind and start to accept incoming connections.
-    ChannelFuture f = b.bind(new InetSocketAddress(getBindAddress(), serverPort)).sync();
+    serverChannel = createBoundChannel(serverBootstrap);
+  }
+
+  @SuppressWarnings("deprecation")
+  private Class<? extends ServerChannel> initializeEventLoopGroups() {
+    ThreadFactory selectorThreadFactory =
+        new NamedThreadFactory("GeodeRedisServer-SelectorThread-", true);
+
+    ThreadFactory workerThreadFactory =
+        new NamedThreadFactory("GeodeRedisServer-WorkerThread-", false);
+
+    Class<? extends ServerChannel> socketClass;
+    if (singleThreadPerConnection) {
+      bossGroup =
+          new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, selectorThreadFactory);
+      workerGroup =
+          new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, workerThreadFactory);
+      socketClass = io.netty.channel.socket.oio.OioServerSocketChannel.class;
+    } else {
+      bossGroup = new NioEventLoopGroup(numSelectorThreads, selectorThreadFactory);
+      workerGroup = new NioEventLoopGroup(numWorkerThreads, workerThreadFactory);
+      socketClass = NioServerSocketChannel.class;
+    }
+    return socketClass;
+  }
+
+  private Channel createBoundChannel(ServerBootstrap serverBootstrap)
+      throws InterruptedException, UnknownHostException {
+    ChannelFuture channelFuture =
+        serverBootstrap.bind(new InetSocketAddress(getBindAddress(), serverPort)).sync();
+    logStartupMessage();
+    return channelFuture.channel();
+  }
+
+  private void logStartupMessage() throws UnknownHostException {
-    serverChannel = f.channel();
-  @SuppressWarnings("deprecation")
-  private Class<? extends ServerChannel> startRedisServiceSingleThreadPerConnection(
-      ThreadFactory selectorThreadFactory, ThreadFactory workerThreadFactory) {
-    bossGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, selectorThreadFactory);
-    workerGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, workerThreadFactory);
-    return io.netty.channel.socket.oio.OioServerSocketChannel.class;
+  private ChannelInitializer<SocketChannel> createChannelInitializer(byte[] redisPasswordBytes) {
+    return new ChannelInitializer<SocketChannel>() {
+      @Override
+      public void initChannel(SocketChannel socketChannel) {
+        if (logger.fineEnabled()) {
+          logger.fine(
+              "GeodeRedisServer-Connection established with " + socketChannel.remoteAddress());
+        }
+        ChannelPipeline pipeline = socketChannel.pipeline();
+        addSSLIfEnabled(socketChannel, pipeline);
+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());
+        pipeline.addLast(new WriteTimeoutHandler(10));
+        pipeline.addLast(ExecutionHandlerContext.class.getSimpleName(),
+            new ExecutionHandlerContext(socketChannel, cache, regionCache, GeodeRedisServer.this,
+                redisPasswordBytes,
+                keyRegistrar, pubSub, hashLockService));
+      }
+    };

MOV26 UPD40 INS31 INS31 INS31 INS31 MOV79 MOV83 MOV74 INS42 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS74 INS42 INS44 INS8 INS60 INS60 MOV60 MOV25 INS41 INS42 INS43 INS42 INS42 INS42 MOV60 INS21 INS41 INS42 MOV25 INS43 INS43 INS5 INS42 INS41 INS74 INS59 MOV43 INS59 MOV43 INS59 INS42 INS42 INS32 INS32 INS42 INS42 INS39 INS85 MOV14 INS43 INS76 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS14 INS42 INS14 MOV21 INS21 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS43 UPD42 MOV42 UPD42 UPD42 UPD42 INS43 INS45 INS9 INS43 INS45 INS9 INS7 UPD43 INS45 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV14 INS42 MOV57 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL43 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31