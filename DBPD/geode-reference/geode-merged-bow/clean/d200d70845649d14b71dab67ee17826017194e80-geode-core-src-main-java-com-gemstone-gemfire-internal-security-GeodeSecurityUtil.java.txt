GEODE-1571: have auth-init accept either a constructor or a static factory method.

+import java.lang.reflect.Method;
+import org.apache.commons.lang.NullArgumentException;
+import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.GeodePermission.Operation;
+import org.apache.geode.security.GeodePermission.Resource;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
-import org.apache.geode.security.GeodePermission;
-import org.apache.geode.security.GeodePermission.Operation;
-import org.apache.geode.security.GeodePermission.Resource;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.SecurityManager;
-      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
-      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
+      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
-  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param className
+   * @param expectedClazz
+   * @param <T>
+   * @return
+   */
+  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param factoryMethodName
+   * @param expectedClazz
+   * @param <T>
+   * @return
+   */
+  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
+    try {
+      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
+      T actualObject = (T)factoryMethod.invoke(null, (Object[])null);
+
+      if(actualObject == null){
+        throw new NullArgumentException("Factory method "+ factoryMethodName + " should not return null.");
+      }
+
+      return actualObject;
+    } catch (Exception e) {
+      throw new GemFireSecurityException(e.toString(), e);
+    }
+  }
+
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param classOrMethod
+   * @param expectedClazz
+   * @param <T>
+   * @return an object of type expectedClazz. This method would never return null. It either returns an non-null
+   * object or throws exception.
+   */
+  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
+    T object = null;
+    try{
+      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
+    }
+    catch (Exception e){
+      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
+    }
+    return object;
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 INS40 INS31 INS31 INS29 UPD42 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS60 INS54 INS41 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS8 INS12 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS60 INS60 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS42 INS53 INS7 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS33 INS53 INS42 INS14 INS42 INS32 INS42 INS7 UPD42 INS42 INS42 INS42 INS43 INS32 INS14 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS33 INS11 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS33 INS42 INS45 INS42 INS45 INS43 INS85 INS42