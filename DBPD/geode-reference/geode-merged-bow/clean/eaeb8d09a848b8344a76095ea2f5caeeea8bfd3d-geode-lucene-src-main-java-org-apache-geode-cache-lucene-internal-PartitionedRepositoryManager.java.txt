GEODE-4778: Code clean up and refactor (#1553)

* code clean up
* Removed unused aeq lookup
* Removed/collapsed AbstractRepositoryManager
* Reduced references to LuceneIndexImpl into InternalLuceneIndex

-
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CountDownLatch;
+import org.apache.geode.InternalGemFireError;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.execute.RegionFunctionContext;
+import org.apache.geode.cache.lucene.LuceneIndexDestroyedException;
+import org.apache.geode.cache.lucene.internal.repository.RepositoryManager;
+import org.apache.geode.internal.cache.BucketNotFoundException;
+import org.apache.geode.internal.cache.BucketRegion;
+import org.apache.geode.internal.cache.execute.InternalRegionFunctionContext;
-/**
- * Manages index repositories for partitioned regions.
- *
- * This class lazily creates the IndexRepository for each individual bucket. If a Bucket is
- * rebalanced, this class will create a new index repository when the bucket returns to this node.
- */
-public class PartitionedRepositoryManager extends AbstractPartitionedRepositoryManager {
-
+public class PartitionedRepositoryManager implements RepositoryManager {
+  /**
+   * map of the parent bucket region to the index repository
+   *
+   * This is based on the BucketRegion in case a bucket is rebalanced, we don't want to return a
+   * stale index repository. If a bucket moves off of this node and comes back, it will have a new
+   * BucketRegion object.
+   *
+   * It is weak so that the old BucketRegion will be garbage collected.
+   */
+  protected final ConcurrentHashMap<Integer, IndexRepository> indexRepositories =
+      new ConcurrentHashMap<Integer, IndexRepository>();
-  public PartitionedRepositoryManager(LuceneIndexImpl index, LuceneSerializer serializer) {
-    super(index, serializer);
+  /** The user region for this index */
+  protected PartitionedRegion userRegion = null;
+  protected final LuceneSerializer serializer;
+  protected final InternalLuceneIndex index;
+  protected volatile boolean closed;
+  private final CountDownLatch isDataRegionReady = new CountDownLatch(1);
+
+  public PartitionedRepositoryManager(InternalLuceneIndex index, LuceneSerializer serializer) {
+    this.index = index;
+    this.serializer = serializer;
+    this.closed = false;
+  }
+
+  public void setUserRegionForRepositoryManager(PartitionedRegion userRegion) {
+    this.userRegion = userRegion;
-  public IndexRepository computeRepository(Integer bucketId, LuceneSerializer serializer,
-      LuceneIndexImpl index, PartitionedRegion userRegion, IndexRepository oldRepository)
+  public Collection<IndexRepository> getRepositories(RegionFunctionContext ctx)
+      throws BucketNotFoundException {
+    Region<Object, Object> region = ctx.getDataSet();
+    Set<Integer> buckets = ((InternalRegionFunctionContext) ctx).getLocalBucketSet(region);
+    ArrayList<IndexRepository> repos = new ArrayList<IndexRepository>(buckets.size());
+    for (Integer bucketId : buckets) {
+      BucketRegion userBucket = userRegion.getDataStore().getLocalBucketById(bucketId);
+      if (userBucket == null) {
+        throw new BucketNotFoundException(
+            "User bucket was not found for region " + region + "bucket id " + bucketId);
+      } else {
+        repos.add(getRepository(userBucket.getId()));
+      }
+    }
+
+    return repos;
+  }
+
+  @Override
+  public IndexRepository getRepository(Region region, Object key, Object callbackArg)
+      throws BucketNotFoundException {
+    BucketRegion userBucket = userRegion.getBucketRegion(key, callbackArg);
+    if (userBucket == null) {
+      throw new BucketNotFoundException("User bucket was not found for region " + region + "key "
+          + key + " callbackarg " + callbackArg);
+    }
+
+    return getRepository(userBucket.getId());
+  }
+
+  /**
+   * Return the repository for a given user bucket
+   */
+  protected IndexRepository getRepository(Integer bucketId) throws BucketNotFoundException {
+    IndexRepository repo = indexRepositories.get(bucketId);
+    if (repo != null && !repo.isClosed()) {
+      return repo;
+    }
+
+    repo = computeRepository(bucketId);
+
+    if (repo == null) {
+      throw new BucketNotFoundException(
+          "Unable to find lucene index because no longer primary for bucket " + bucketId);
+    }
+    return repo;
+  }
+
+  protected IndexRepository computeRepository(Integer bucketId, LuceneSerializer serializer,
+      InternalLuceneIndex index, PartitionedRegion userRegion, IndexRepository oldRepository)
+
+
+  protected IndexRepository computeRepository(Integer bucketId) {
+    try {
+      isDataRegionReady.await();
+    } catch (InterruptedException e) {
+      throw new InternalGemFireError("Unable to create index repository", e);
+    }
+    IndexRepository repo = indexRepositories.compute(bucketId, (key, oldRepository) -> {
+      try {
+        if (closed) {
+          if (oldRepository != null) {
+            oldRepository.cleanup();
+          }
+          throw new LuceneIndexDestroyedException(index.getName(), index.getRegionPath());
+        }
+        return computeRepository(bucketId, serializer, index, userRegion, oldRepository);
+      } catch (IOException e) {
+        throw new InternalGemFireError("Unable to create index repository", e);
+      }
+    });
+    return repo;
+  }
+
+  protected void allowRepositoryComputation() {
+    isDataRegionReady.countDown();
+  }
+
+
+  @Override
+  public void close() {
+    this.closed = true;
+    for (Integer bucketId : indexRepositories.keySet()) {
+      try {
+        computeRepository(bucketId);
+      } catch (LuceneIndexDestroyedException e) {
+        /* expected exception */}
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 UPD83 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 MOV65 INS43 INS43 INS43 INS42 INS14 INS65 UPD42 MOV42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD43 INS21 INS21 INS21 INS43 INS42 INS21 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS25 INS41 UPD43 INS42 INS43 INS42 INS54 INS60 INS41 INS21 INS42 INS21 INS70 UPD66 UPD66 UPD66 INS66 INS66 INS42 INS42 INS42 INS74 INS66 INS43 INS34 UPD42 INS7 INS7 INS7 INS42 INS7 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS66 INS42 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS42 UPD42 INS42 INS8 INS12 INS43 INS59 INS42 INS32 INS7 INS44 INS32 INS8 INS43 INS43 INS43 INS42 INS22 INS42 INS22 INS42 INS22 INS9 INS22 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS32 INS42 INS33 INS53 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS22 INS9 INS43 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS14 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS86 INS52 INS42 INS42 INS8 INS12 INS11 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS21 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS14 INS59 INS59 INS8 INS21 INS44 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS54 INS32 INS43 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS8 INS32 INS43 INS42 INS53 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS27 INS8 INS14 INS43 INS45 INS42 INS42 INS33 INS21 INS43 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL46