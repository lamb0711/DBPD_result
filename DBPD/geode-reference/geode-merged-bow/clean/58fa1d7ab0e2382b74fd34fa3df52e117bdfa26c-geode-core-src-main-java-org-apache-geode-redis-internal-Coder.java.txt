Merge remote-tracking branch 'upstream/develop' into develop

-import java.util.Iterator;
+
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, byte[] value) {
-    ByteBuf response = alloc.buffer(value.length + 20);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(value.length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(value);
-    response.writeBytes(CRLFar);
-    return response;
-  }
+  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, Object v)
+      throws CoderException {
+    ByteBuf response;
+    byte[] toWrite;
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, double value) {
-    ByteBuf response = alloc.buffer();
-    byte[] doub = doubleToBytes(value);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(doub.length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(doub);
-    response.writeBytes(CRLFar);
-    return response;
-  }
-
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, String value) {
-    byte[] valueAr = stringToBytes(value);
-    int length = valueAr == null ? 0 : valueAr.length;
-    ByteBuf response = alloc.buffer(length + 20);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(valueAr);
-    response.writeBytes(CRLFar);
-    return response;
-  }
-
-  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, List<String> items) {
-    Iterator<String> it = items.iterator();
-    ByteBuf response = alloc.buffer();
-    response.writeByte(ARRAY_ID);
-    response.writeBytes(intToBytes(items.size()));
-    response.writeBytes(CRLFar);
-    while (it.hasNext()) {
-      String next = it.next();
-      response.writeByte(BULK_STRING_ID);
-      response.writeBytes(intToBytes(next.length()));
-      response.writeBytes(CRLFar);
-      response.writeBytes(stringToBytes(next));
-      response.writeBytes(CRLFar);
+    if (v == null) {
+      response = alloc.buffer();
+      response.writeBytes(bNIL);
+      return response;
+    } else if (v instanceof byte[]) {
+      byte[] value = (byte[]) v;
+      response = alloc.buffer(value.length + 20);
+      toWrite = value;
+    } else if (v instanceof ByteArrayWrapper) {
+      byte[] value = ((ByteArrayWrapper) v).toBytes();
+      response = alloc.buffer(value.length + 20);
+      toWrite = value;
+    } else if (v instanceof Double) {
+      response = alloc.buffer();
+      toWrite = doubleToBytes(((Double) v).doubleValue());
+    } else if (v instanceof String) {
+      String value = (String) v;
+      response = alloc.buffer(value.length() + 20);
+      toWrite = stringToBytes(value);
+    } else {
+      throw new CoderException();
+
+    response.writeByte(BULK_STRING_ID);
+    response.writeBytes(intToBytes(toWrite.length));
+    response.writeBytes(CRLFar);
+    response.writeBytes(toWrite);
+    response.writeBytes(CRLFar);
+
-  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc,
-      Collection<ByteArrayWrapper> items) {
-    Iterator<ByteArrayWrapper> it = items.iterator();
+  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, Collection<?> items)
+      throws CoderException {
-    while (it.hasNext()) {
-      ByteArrayWrapper nextWrapper = it.next();
-      if (nextWrapper != null) {
-        response.writeByte(BULK_STRING_ID);
-        response.writeBytes(intToBytes(nextWrapper.length()));
-        response.writeBytes(CRLFar);
-        response.writeBytes(nextWrapper.toBytes());
-        response.writeBytes(CRLFar);
-      } else
-        response.writeBytes(getNilResponse(alloc));
+    for (Object next : items) {
+      ByteBuf tmp = null;
+      try {
+        if (next instanceof Collection) {
+          Collection<?> nextItems = (Collection<?>) next;
+          tmp = getBulkStringArrayResponse(alloc, nextItems);
+          response.writeBytes(tmp);
+        } else {
+          tmp = getBulkStringResponse(alloc, next);
+          response.writeBytes(tmp);
+        }
+      } finally {
+        if (tmp != null) {
+          tmp.release();
+        }
+      }
-    Iterator<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> it = items.iterator();
-    while (it.hasNext()) {
-      Map.Entry<ByteArrayWrapper, ByteArrayWrapper> next = it.next();
+    for (Map.Entry<ByteArrayWrapper, ByteArrayWrapper> next : items) {
+
-    Iterator<?> it = items.iterator();
-    while (it.hasNext()) {
-      Object nextObject = it.next();
+    for (Object nextObject : items) {
-    Iterator<?> it = items.iterator();
-    while (it.hasNext()) {
-      Object next = it.next();
-      ByteArrayWrapper nextWrapper = null;
-      if (next instanceof Entry) {
-        try {
-          nextWrapper = (ByteArrayWrapper) ((Entry<?, ?>) next).getValue();
-        } catch (EntryDestroyedException e) {
-          continue;
+    try {
+      for (Object next : items) {
+        ByteArrayWrapper nextWrapper = null;
+        if (next instanceof Entry) {
+          try {
+            nextWrapper = (ByteArrayWrapper) ((Entry<?, ?>) next).getValue();
+          } catch (EntryDestroyedException e) {
+            continue;
+          }
+        } else if (next instanceof Struct) {
+          nextWrapper = (ByteArrayWrapper) ((Struct) next).getFieldValues()[1];
-      } else if (next instanceof Struct) {
-        nextWrapper = (ByteArrayWrapper) ((Struct) next).getFieldValues()[1];
+        if (nextWrapper != null) {
+          tmp.writeByte(Coder.BULK_STRING_ID);
+          tmp.writeBytes(intToBytes(nextWrapper.length()));
+          tmp.writeBytes(Coder.CRLFar);
+          tmp.writeBytes(nextWrapper.toBytes());
+          tmp.writeBytes(Coder.CRLFar);
+        } else {
+          tmp.writeBytes(Coder.bNIL);
+        }
+        size++;
-      if (nextWrapper != null) {
-        tmp.writeByte(Coder.BULK_STRING_ID);
-        tmp.writeBytes(intToBytes(nextWrapper.length()));
-        tmp.writeBytes(Coder.CRLFar);
-        tmp.writeBytes(nextWrapper.toBytes());
-        tmp.writeBytes(Coder.CRLFar);
-      } else {
-        tmp.writeBytes(Coder.bNIL);
-      }
-      size++;
+
+      response.writeBytes(intToBytes(size));
+      response.writeBytes(Coder.CRLFar);
+      response.writeBytes(tmp);
+    } finally {
+      tmp.release();
-    response.writeBytes(intToBytes(size));
-    response.writeBytes(Coder.CRLFar);
-    response.writeBytes(tmp);
-
-    tmp.release();
-
-  public static Double bytesToDouble(byte[] bytes) {
+  public static double bytesToDouble(byte[] bytes) {

INS31 INS31 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS43 INS8 MOV83 MOV83 MOV43 MOV42 MOV44 MOV44 INS43 INS8 INS39 UPD43 UPD42 INS42 MOV60 INS60 INS25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV41 UPD74 UPD42 MOV42 MOV60 MOV21 MOV21 MOV21 INS70 MOV41 INS70 INS70 INS54 UPD42 MOV5 INS59 INS27 INS8 INS25 UPD43 INS76 INS44 INS42 INS8 INS44 INS42 MOV8 MOV21 MOV21 MOV21 MOV21 INS44 INS42 MOV8 INS8 INS8 INS42 INS42 INS33 MOV21 MOV21 MOV41 INS62 INS8 INS25 UPD42 UPD42 INS43 INS42 MOV60 INS54 MOV74 INS42 MOV43 INS42 INS70 MOV21 MOV21 MOV21 MOV21 INS7 INS42 INS5 INS60 MOV21 INS21 INS62 INS8 INS25 INS40 UPD42 MOV42 MOV43 INS8 INS8 INS44 INS42 MOV8 INS42 INS32 UPD42 INS39 INS85 INS5 INS59 INS7 INS7 INS42 MOV43 MOV60 INS21 MOV21 INS62 INS8 INS25 UPD42 INS33 INS25 MOV25 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS39 INS85 INS42 INS11 INS42 MOV32 INS42 INS42 INS7 INS7 INS42 MOV43 MOV21 INS21 INS62 INS8 INS8 INS62 INS8 INS8 MOV5 INS42 UPD42 INS42 INS32 INS42 INS42 INS7 INS7 INS42 MOV43 MOV60 INS21 INS21 INS53 INS42 INS43 MOV60 INS21 MOV21 MOV21 MOV21 UPD42 INS36 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS32 INS42 INS32 MOV43 INS7 INS7 INS14 UPD42 MOV42 UPD74 INS7 INS7 INS11 INS40 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS11 INS42 INS32 INS42 MOV32 INS43 UPD43 INS76 INS42 INS11 INS42 INS32 UPD42 UPD42 INS42 INS32 UPD42 UPD42 UPD42 MOV43 INS42 INS36 INS42 MOV43 INS42 MOV42 MOV42 MOV27 INS42 UPD42 UPD74 MOV74 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS11 INS32 INS76 INS43 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL40 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL33 DEL27 DEL34 DEL40 DEL16 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61