Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Contains the logic for evaluating the health of a GemFire
- * distributed system member according to the thresholds provided in a
- * {@link MemberHealthConfig}.  
+ * Contains the logic for evaluating the health of a GemFire distributed system member according to
+ * the thresholds provided in a {@link MemberHealthConfig}.
-//  /** Statistics about this VM (may be null) */
-//  private VMStatsContract vmStats;
+  // /** Statistics about this VM (may be null) */
+  // private VMStatsContract vmStats;
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-  MemberHealthEvaluator(GemFireHealthConfig config,
-                        DM dm) {
+  MemberHealthEvaluator(GemFireHealthConfig config, DM dm) {
-//      this.vmStats = sampler.getVMStats();
+      // this.vmStats = sampler.getVMStats();
-    
+
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Checks to make sure that the {@linkplain
-   * ProcessStats#getProcessSize VM's process size} is less than the
-   * {@linkplain MemberHealthConfig#getMaxVMProcessSize threshold}.
-   * If not, the status is "okay" health.
+   * Checks to make sure that the {@linkplain ProcessStats#getProcessSize VM's process size} is less
+   * than the {@linkplain MemberHealthConfig#getMaxVMProcessSize threshold}. If not, the status is
+   * "okay" health.
-      String s = LocalizedStrings.MemberHealthEvaluator_THE_SIZE_OF_THIS_VM_0_MEGABYTES_EXCEEDS_THE_THRESHOLD_1_MEGABYTES.toLocalizedString(new Object[] {Long.valueOf(vmSize), Long.valueOf(threshold)});
+      String s =
+          LocalizedStrings.MemberHealthEvaluator_THE_SIZE_OF_THIS_VM_0_MEGABYTES_EXCEEDS_THE_THRESHOLD_1_MEGABYTES
+              .toLocalizedString(new Object[] {Long.valueOf(vmSize), Long.valueOf(threshold)});
-   * {@linkplain DMStats#getOverflowQueueSize() overflow} message
-   * queue does not exceed the {@linkplain
-   * MemberHealthConfig#getMaxMessageQueueSize threshold}.  If not,
-   * the status is "okay" health.
+   * {@linkplain DMStats#getOverflowQueueSize() overflow} message queue does not exceed the
+   * {@linkplain MemberHealthConfig#getMaxMessageQueueSize threshold}. If not, the status is "okay"
+   * health.
-      String s = LocalizedStrings.MemberHealthEvaluator_THE_SIZE_OF_THE_OVERFLOW_QUEUE_0_EXCEEDS_THE_THRESHOLD_1.toLocalizedString(new Object[] { Long.valueOf(overflowSize), Long.valueOf(threshold)});
+      String s =
+          LocalizedStrings.MemberHealthEvaluator_THE_SIZE_OF_THE_OVERFLOW_QUEUE_0_EXCEEDS_THE_THRESHOLD_1
+              .toLocalizedString(
+                  new Object[] {Long.valueOf(overflowSize), Long.valueOf(threshold)});
-   * Checks to make sure that the number of {@linkplain
-   * DMStats#getReplyTimeouts reply timeouts} does not exceed the
-   * {@linkplain MemberHealthConfig#getMaxReplyTimeouts threshold}.
-   * If not, the status is "okay" health.
+   * Checks to make sure that the number of {@linkplain DMStats#getReplyTimeouts reply timeouts}
+   * does not exceed the {@linkplain MemberHealthConfig#getMaxReplyTimeouts threshold}. If not, the
+   * status is "okay" health.
-    long deltaReplyTimeouts =
-      this.dmStats.getReplyTimeouts() - prevReplyTimeouts;
+    long deltaReplyTimeouts = this.dmStats.getReplyTimeouts() - prevReplyTimeouts;
-      String s = LocalizedStrings.MemberHealthEvaluator_THE_NUMBER_OF_MESSAGE_REPLY_TIMEOUTS_0_EXCEEDS_THE_THRESHOLD_1.toLocalizedString(new Object[] { Long.valueOf(deltaReplyTimeouts), Long.valueOf(threshold)}); 
+      String s =
+          LocalizedStrings.MemberHealthEvaluator_THE_NUMBER_OF_MESSAGE_REPLY_TIMEOUTS_0_EXCEEDS_THE_THRESHOLD_1
+              .toLocalizedString(
+                  new Object[] {Long.valueOf(deltaReplyTimeouts), Long.valueOf(threshold)});
-      double ratio = (this.dmStats.getMcastRetransmits() * 1.0) /
-                    (this.dmStats.getMcastWrites() * 1.0);
+      double ratio =
+          (this.dmStats.getMcastRetransmits() * 1.0) / (this.dmStats.getMcastWrites() * 1.0);
-        String s = "The number of message retransmissions (" +
-          ratio + ") exceeds the threshold (" + threshold + ")";
+        String s = "The number of message retransmissions (" + ratio + ") exceeds the threshold ("
+            + threshold + ")";
-  
-/**
- * The function keeps updating the health of the cache based on 
- * roles required by the regions and their reliablity policies.
- * 
- * */
-  
-  void checkCacheRequiredRolesMeet(List status){
-	// will have to call here okeyHealth() or poorHealth()
-	//GemFireCache cache = (GemFireCache)CacheFactory.getAnyInstance();
-	
-	//CachePerfStats cPStats= null;
-	try{
-		GemFireCacheImpl cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();
-		CachePerfStats cPStats= null;
-		cPStats= cache.getCachePerfStats();
-	
-		if(cPStats.getReliableRegionsMissingFullAccess()> 0){
-			// health is okay.
-			int numRegions = cPStats.getReliableRegionsMissingFullAccess();
-			status.add(okayHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_BUT_ARE_CONFIGURED_FOR_FULL_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));
-		}else if(cPStats.getReliableRegionsMissingLimitedAccess() > 0){
-			// health is poor
-			int numRegions = cPStats.getReliableRegionsMissingLimitedAccess();
-			status.add(poorHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITH_LIMITED_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));
-		}else if (cPStats.getReliableRegionsMissingNoAccess() > 0){
-			// health is poor
-			int numRegions = cPStats.getReliableRegionsMissingNoAccess();
-			status.add(poorHealth(LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITHOUT_ACCESS.toLocalizedString(Integer.valueOf(numRegions))));
-		}//else{
-			// health is good/okay
-		//	status.add(okayHealth("All regions have there required roles meet"));
-		//}
-	}
-	catch (CancelException ignore) {
-	}
+
+  /**
+   * The function keeps updating the health of the cache based on roles required by the regions and
+   * their reliablity policies.
+   * 
+   */
+
+  void checkCacheRequiredRolesMeet(List status) {
+    // will have to call here okeyHealth() or poorHealth()
+    // GemFireCache cache = (GemFireCache)CacheFactory.getAnyInstance();
+
+    // CachePerfStats cPStats= null;
+    try {
+      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
+      CachePerfStats cPStats = null;
+      cPStats = cache.getCachePerfStats();
+
+      if (cPStats.getReliableRegionsMissingFullAccess() > 0) {
+        // health is okay.
+        int numRegions = cPStats.getReliableRegionsMissingFullAccess();
+        status.add(okayHealth(
+            LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_BUT_ARE_CONFIGURED_FOR_FULL_ACCESS
+                .toLocalizedString(Integer.valueOf(numRegions))));
+      } else if (cPStats.getReliableRegionsMissingLimitedAccess() > 0) {
+        // health is poor
+        int numRegions = cPStats.getReliableRegionsMissingLimitedAccess();
+        status.add(poorHealth(
+            LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITH_LIMITED_ACCESS
+                .toLocalizedString(Integer.valueOf(numRegions))));
+      } else if (cPStats.getReliableRegionsMissingNoAccess() > 0) {
+        // health is poor
+        int numRegions = cPStats.getReliableRegionsMissingNoAccess();
+        status.add(poorHealth(
+            LocalizedStrings.MemberHealthEvaluator_THERE_ARE_0_REGIONS_MISSING_REQUIRED_ROLES_AND_CONFIGURED_WITHOUT_ACCESS
+                .toLocalizedString(Integer.valueOf(numRegions))));
+      } // else{
+        // health is good/okay
+        // status.add(okayHealth("All regions have there required roles meet"));
+        // }
+    } catch (CancelException ignore) {
+    }
-    
+
-    // will have to add another call to check for roles 
+    // will have to add another call to check for roles

MOV65 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66