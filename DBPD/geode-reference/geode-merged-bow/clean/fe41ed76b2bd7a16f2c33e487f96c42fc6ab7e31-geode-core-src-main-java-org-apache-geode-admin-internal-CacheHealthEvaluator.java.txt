GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import org.apache.geode.internal.cache.InternalCache;
- * Contains the logic for evaluating the health of a GemFire <code>Cache</code> instance according
- * to the thresholds provided in a {@link CacheHealthConfig}.
- *
+ * Contains the logic for evaluating the health of a GemFire {@code Cache} instance according to the
+ * thresholds provided in a {@link CacheHealthConfig}.
-  /** The config from which we get the evaulation criteria */
-  private CacheHealthConfig config;
+  /** The config from which we get the evaluation criteria */
+  private final CacheHealthConfig config;
-   * Statistics about the <code>Cache</code> instance. If no cache has been created in this VM, this
-   * field will be <code>null</code>
+   * Statistics about the {@code Cache} instance. If no cache has been created in this VM, this
+   * field will be {@code null}
-  ////////////////////// Constructors //////////////////////
-
-   * Creates a new <code>CacheHealthEvaluator</code>
+   * Creates a new {@code CacheHealthEvaluator}
-    GemFireCacheImpl cache;
+    InternalCache cache;
-      cache = (GemFireCacheImpl) CacheFactory.getInstance(system);
-
-    } catch (CancelException ex) {
+      cache = (InternalCache) CacheFactory.getInstance(system);
+    } catch (CancelException ignore) {
-  //////////////////// Instance Methods ////////////////////
-
-  private void initialize(GemFireCacheImpl cache, DM dm) {
-    StringBuffer sb = new StringBuffer();
+  private void initialize(InternalCache cache, DM dm) {
+    StringBuilder sb = new StringBuilder();
-      sb.append("\"");
+      sb.append('"');
-  public void cacheCreated(GemFireCacheImpl cache) {
+  @Override
+  public void cacheCreated(InternalCache cache) {
-   * Checks to make sure that the average <code>netSearch</code> time during the previous health
-   * check interval is less than the {@linkplain CacheHealthConfig#getMaxNetSearchTime threshold}.
-   * If not, the status is "okay" health.
+   * Checks to make sure that the average {@code netSearch} time during the previous health check
+   * interval is less than the {@linkplain CacheHealthConfig#getMaxNetSearchTime threshold}. If not,
+   * the status is "okay" health.
-  void checkNetSearchTime(List status) {
+  private void checkNetSearchTime(List status) {
-                .toLocalizedString(new Object[] {ratio, threshold});
+                .toLocalizedString(ratio, threshold);
-   * Checks to make sure that the average <code>load</code> time during the previous health check
+   * Checks to make sure that the average {@code load} time during the previous health check
-  void checkLoadTime(List status) {
+  private void checkLoadTime(List<HealthStatus> status) {
-        logger.debug("Completed {} loads in {} ms", deltaLoadsCompleted, (deltaLoadTime / 1000000));
+        logger.debug("Completed {} loads in {} ms", deltaLoadsCompleted, deltaLoadTime / 1000000);
-                  .toLocalizedString(new Object[] {ratio, threshold});
+                  .toLocalizedString(ratio, threshold);
-  void checkHitRatio(List status) {
+  private void checkHitRatio(List<HealthStatus> status) {
-      double hits = (deltaGets - (deltaLoadsCompleted + deltaNetsearchesCompleted));
+      double hits = deltaGets - (deltaLoadsCompleted + deltaNetsearchesCompleted);
-            + threshold + ")";
+            + threshold + ')';
-  void checkEventQueueSize(List status) {
+  private void checkEventQueueSize(List<HealthStatus> status) {
-              .toLocalizedString(
-                  new Object[] {Long.valueOf(eventQueueSize), Long.valueOf(threshold)});
+              .toLocalizedString(eventQueueSize, threshold);
-
-
-  public void cacheClosed(GemFireCacheImpl cache) {
+  public void cacheClosed(InternalCache cache) {

INS26 INS40 INS83 INS78 INS83 INS83 INS83 INS83 UPD66 INS65 INS66 UPD66 INS65 UPD43 INS42 UPD43 INS74 INS74 INS74 UPD43 INS66 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD43 UPD42 UPD43 UPD42 UPD66 INS65 INS66 UPD66 UPD66 UPD66 INS66 INS65 UPD66 INS43 INS43 INS43 INS43 INS43 INS43 UPD42 INS66 INS66 UPD66 MOV66 UPD42 UPD42 INS66 INS66 MOV42 INS42 MOV42 INS42 MOV42 INS42 UPD42 UPD43 UPD42 INS13 MOV27 UPD43 MOV42 MOV42 UPD42 MOV27 INS42 INS42 INS13 INS42 INS42 DEL65 DEL45 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL43 DEL36 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL43 DEL36 DEL45 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL4 DEL3