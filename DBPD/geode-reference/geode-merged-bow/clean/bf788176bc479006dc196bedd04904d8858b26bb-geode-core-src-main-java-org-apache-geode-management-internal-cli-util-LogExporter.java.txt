GEODE-2267:  add validation to the arguments and include export stats in the command

  * use the config to determine where the logs and stats are

-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.Scope;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.InternalRegionArguments;
-import org.apache.geode.management.internal.configuration.domain.Configuration;
+import java.io.File;
-import java.nio.file.Paths;
+/**
+ * this LogExporter only finds the .log and .gfs files under in the same directory of the base files
+ * it doesn't use the base file's filename patterns to find the related logs/stats yet.
+ */
+  private final File baseLogFile;
+  private final File baseStatsFile;
-  public LogExporter(LogFilter logFilter) throws ParseException {
+  /**
+   * @param logFilter: the filter that's used to check if we need to accept the file or the logLine
+   * @param baseLogFile: if not null, we will export the logs in that directory
+   * @param baseStatsFile: if not null, we will export stats in that directory
+   * @throws ParseException
+   */
+  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile)
+      throws ParseException {
+    assert logFilter != null;
+    this.baseLogFile = baseLogFile;
+    this.baseStatsFile = baseStatsFile;
-  public Path export(Path workingDir) throws IOException {
-    LOGGER.debug("Working directory is {}", workingDir);
-
+  /**
+   *
+   * @return Path to the zip file that has all the filtered files, null if no files are selected to
+   *         export.
+   * @throws IOException
+   */
+  public Path export() throws IOException {
-    for (Path logFile : findLogFiles(workingDir)) {
-      Path filteredLogFile = tempDirectory.resolve(logFile.getFileName());
-
-      if (this.logFilter == null) {
-        Files.copy(logFile, filteredLogFile);
-      } else {
+    if (baseLogFile != null) {
+      for (Path logFile : findLogFiles(baseLogFile.toPath().getParent())) {
+        Path filteredLogFile = tempDirectory.resolve(logFile.getFileName());
-    for (Path statFile : findStatFiles(workingDir)) {
-      Files.copy(statFile, tempDirectory);
+    if (baseStatsFile != null) {
+      for (Path statFile : findStatFiles(baseStatsFile.toPath().getParent())) {
+        Files.copy(statFile, tempDirectory.resolve(statFile.getFileName()));
+      }
-    Path zipFile = Files.createTempFile("logExport", ".zip");
-    ZipUtils.zipDirectory(tempDirectory, zipFile);
-    LOGGER.info("Zipped files to: " + zipFile);
-
+    Path zipFile = null;
+    if (tempDirectory.toFile().listFiles().length > 0) {
+      zipFile = Files.createTempFile("logExport", ".zip");
+      ZipUtils.zipDirectory(tempDirectory, zipFile);
+      LOGGER.info("Zipped files to: " + zipFile);
+    }

MOV26 UPD40 INS29 INS23 INS23 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS44 INS44 INS29 INS66 INS66 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS6 INS21 INS21 INS65 INS65 INS25 INS25 INS25 INS66 INS66 INS66 INS42 INS42 INS42 INS27 INS7 INS7 INS66 INS66 INS42 INS27 MOV8 INS27 INS8 INS27 INS8 INS42 INS33 INS22 INS42 INS22 INS42 INS42 INS33 INS70 INS42 INS33 MOV70 INS33 INS22 INS34 INS21 MOV21 MOV21 INS52 INS42 INS52 INS42 MOV44 INS32 MOV8 INS32 INS42 INS7 UPD42 MOV42 INS32 MOV60 INS32 INS32 INS42 INS42 MOV32 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 MOV42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL70