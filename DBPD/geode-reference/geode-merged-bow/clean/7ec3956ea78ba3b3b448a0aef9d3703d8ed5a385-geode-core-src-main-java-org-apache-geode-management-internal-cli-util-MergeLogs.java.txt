GEODE-4517: Remove getAnyInstancce call from CliUtil.

* CliUtil.getCacheIfExists now takes supplier, but will squelch error and return null as before.
* LogWriter.getInstance now explicitly takes a Cache, to hook into the cache's LogWriter.  This perhaps should be replaced by the LogService logger in a future commit.
* GfshExecutionStrategy adopts the Gfsh shell's LogWriter, since the shell will necessarily have finished instantiating the LogWriter's singleton before GfshExecutionStrategy can instantiate.
* In some instances, the LogWriter has been replaced with the Log4j LogService logger.
* Launcher explicitly passes a null Cache, since it does not yet exist.
* Other minor improvements: visibility, typo corrections, etc.
-import java.io.FilenameFilter;
+import org.apache.logging.log4j.Logger;
+import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.LogWrapper;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+  private static final Logger logger = LogService.getLogger();
+
+  public static void main(String[] args) {
+    if (args.length < 1 || args.length > 1) {
+      throw new IllegalArgumentException("Requires only 1  arguments : <targetDirName>");
+    }
+    try {
+      String result = mergeLogFile(args[0]).getCanonicalPath();
+      System.out.println("Merged logs to: " + result);
+    } catch (Exception e) {
+      System.out.println(e.getMessage());
+    }
+  }
-    LogWrapper.getInstance().fine("Exporting logs merging logs" + logDirectory);
+    logger.info("Exporting logs merging logs" + logDirectory);
-    String errorString = new String();
-      LogWrapper.getInstance().fine("Exporting logs now merging logs");
+      logger.info("Exporting logs now merging logs");
-      LogWrapper.getInstance().severe(e.getMessage());
+      logger.error(e.getMessage());
-      LogWrapper.getInstance().fine("Exporting logs Sucessfully merged logs");
+      logger.info("Exporting logs successfully merged logs");
-      LogWrapper.getInstance().severe("Could not merge");
+      logger.error("Could not merge");
-  public static void main(String[] args) {
-    if (args.length < 1 || args.length > 1) {
-      throw new IllegalArgumentException("Requires only 1  arguments : <targetDirName>");
-    }
-    try {
-      String result = mergeLogFile(args[0]).getCanonicalPath();
-      System.out.println("Merged logs to: " + result);
-    } catch (Exception e) {
-      System.out.println(e.getMessage());
-    }
-
-
-  }
-
-      boolean flag = MergeLogFiles.mergeLogFiles(logFiles, logFileNames, mergedLog);
+      MergeLogFiles.mergeLogFiles(logFiles, logFileNames, mergedLog);

MOV26 MOV26 MOV31 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS21 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL39 DEL42 DEL59 DEL60