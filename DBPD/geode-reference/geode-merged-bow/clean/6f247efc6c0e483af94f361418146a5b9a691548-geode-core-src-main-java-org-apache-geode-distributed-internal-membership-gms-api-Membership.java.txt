GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.MembershipView;
-public interface Membership {
+public interface Membership<ID extends MemberIdentifier> {
-  MembershipView getView();
+  MembershipView<ID> getView();
-   * Return a {@link InternalDistributedMember} representing the current system
+   * Return a {@link ID} representing the current system
-  InternalDistributedMember getLocalMember();
+  ID getLocalMember();
-  Set<InternalDistributedMember> send(InternalDistributedMember[] destinations,
-      Message content)
+  Set<ID> send(ID[] destinations, Message<ID> content)
-  Map<String, Long> getMessageState(DistributedMember member, boolean includeMulticast,
+  Map<String, Long> getMessageState(ID member, boolean includeMulticast,
-  void waitForMessageState(DistributedMember member, Map<String, Long> state)
+  void waitForMessageState(ID member, Map<String, Long> state)
-  boolean requestMemberRemoval(DistributedMember member, String reason);
+  boolean requestMemberRemoval(ID member, String reason);
-  boolean verifyMember(DistributedMember mbr, String reason);
+  boolean verifyMember(ID mbr, String reason);
-  boolean isShunned(DistributedMember m);
+  boolean isShunned(ID m);
-  boolean memberExists(DistributedMember m);
+  boolean memberExists(ID m);
-  void shutdownMessageReceived(DistributedMember id, String reason);
+  void shutdownMessageReceived(ID id, String reason);
-  boolean waitForNewMember(DistributedMember remoteId);
+  boolean waitForNewMember(ID remoteId);
-  void addSurpriseMemberForTesting(DistributedMember mbr, long birthTime);
+  void addSurpriseMemberForTesting(ID mbr, long birthTime);
-  void suspectMembers(Set<DistributedMember> members, String reason);
+  void suspectMembers(Set<ID> members, String reason);
-  void suspectMember(DistributedMember member, String reason);
+  void suspectMember(ID member, String reason);
-  void warnShun(DistributedMember mbr);
+  void warnShun(ID mbr);
-  boolean addSurpriseMember(DistributedMember mbr);
+  boolean addSurpriseMember(ID mbr);
-  void startupMessageFailed(DistributedMember mbr, String failureMessage);
+  void startupMessageFailed(ID mbr, String failureMessage);
-  boolean isSurpriseMember(DistributedMember m);
+  boolean isSurpriseMember(ID m);
-  DistributedMember getCoordinator();
+  ID getCoordinator();
-  Set<InternalDistributedMember> getMembersNotShuttingDown();
+  Set<ID> getMembersNotShuttingDown();
-  void processMessage(Message msg);
+  void processMessage(Message<ID> msg);
-  InternalDistributedMember[] getAllMembers();
+  ID[] getAllMembers(final ID[] arrayType);
-   * TODO - this is very similar to {@link #memberExists(DistributedMember)}. However, this
+   * TODO - this is very similar to {@link #memberExists(ID)}. However, this
-  boolean hasMember(InternalDistributedMember member);
+  boolean hasMember(ID member);

INS73 INS42 INS43 INS74 UPD43 UPD74 UPD43 UPD74 UPD5 INS44 INS42 MOV43 INS43 UPD42 UPD43 UPD5 INS74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 INS74 UPD43 INS83 INS5 INS42 UPD43 INS42 UPD42 UPD43 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS43 UPD42 INS43 INS85 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26