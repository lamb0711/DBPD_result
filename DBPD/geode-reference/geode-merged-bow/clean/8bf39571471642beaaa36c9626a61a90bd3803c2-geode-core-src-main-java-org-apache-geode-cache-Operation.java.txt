Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * Enumerated type for an event operation.
- * This class describes the operation that generated the event.
+ * Enumerated type for an event operation. This class describes the operation that generated the
+ * event.
-   * TAKE NOTE!!!
-   * The order if the following static constructors calls must be maintained for backwards compatibility.
-   * Any new operations need to be added to the end.
+   * TAKE NOTE!!! The order if the following static constructors calls must be maintained for
+   * backwards compatibility. Any new operations need to be added to the end.
-  public static final Operation MARKER
-    = new Operation("MARKER",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_MARKER,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation MARKER = new Operation("MARKER", false, // isLocal
+      false, // isRegion
+      OP_TYPE_MARKER, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation CREATE
-    = new Operation("CREATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation CREATE = new Operation("CREATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_NONE);
+   * 
-  public static final Operation PUTALL_CREATE
-    = new Operation("PUTALL_CREATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_PUTALL
-                    );
+  public static final Operation PUTALL_CREATE = new Operation("PUTALL_CREATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_PUTALL);
+   * 
-  public static final Operation GET
-    = new Operation("GET",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_GET,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation GET = new Operation("GET", false, // isLocal
+      false, // isRegion
+      OP_TYPE_GET, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation GET_ENTRY
-    = new Operation("GET_ENTRY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_GET_ENTRY,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation GET_ENTRY = new Operation("GET_ENTRY", false, // isLocal
+      false, // isRegion
+      OP_TYPE_GET_ENTRY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation CONTAINS_KEY
-    = new Operation("CONTAINS_KEY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CONTAINS_KEY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation CONTAINS_KEY = new Operation("CONTAINS_KEY", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CONTAINS_KEY, OP_DETAILS_NONE);
+   * 
-  public static final Operation CONTAINS_VALUE
-    = new Operation("CONTAINS_VALUE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CONTAINS_VALUE,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation CONTAINS_VALUE = new Operation("CONTAINS_VALUE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CONTAINS_VALUE, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation CONTAINS_VALUE_FOR_KEY
-    = new Operation("CONTAINS_VALUE_FOR_KEY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CONTAINS_VALUE_FOR_KEY,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation CONTAINS_VALUE_FOR_KEY =
+      new Operation("CONTAINS_VALUE_FOR_KEY", false, // isLocal
+          false, // isRegion
+          OP_TYPE_CONTAINS_VALUE_FOR_KEY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation FUNCTION_EXECUTION
-    = new Operation("FUNCTION_EXECUTION",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_FUNCTION_EXECUTION,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation FUNCTION_EXECUTION = new Operation("FUNCTION_EXECUTION", false, // isLocal
+      false, // isRegion
+      OP_TYPE_FUNCTION_EXECUTION, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation SEARCH_CREATE
-    = new Operation("SEARCH_CREATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_SEARCH
-                    );
-    
+  public static final Operation SEARCH_CREATE = new Operation("SEARCH_CREATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_SEARCH);
+
+   * 
-  public static final Operation LOCAL_LOAD_CREATE
-    = new Operation("LOCAL_LOAD_CREATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_LOCAL_LOAD
-                    );
+  public static final Operation LOCAL_LOAD_CREATE = new Operation("LOCAL_LOAD_CREATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_LOCAL_LOAD);
+   * 
-  public static final Operation NET_LOAD_CREATE
-    = new Operation("NET_LOAD_CREATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_NET_LOAD
-                    );
-    
+  public static final Operation NET_LOAD_CREATE = new Operation("NET_LOAD_CREATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_NET_LOAD);
+
+   * 
-  public static final Operation UPDATE
-    = new Operation("UPDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_UPDATE,
-                    OP_DETAILS_NONE
-                    );
-    
+  public static final Operation UPDATE = new Operation("UPDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation PUTALL_UPDATE
-    = new Operation("PUTALL_UPDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_UPDATE,
-                    OP_DETAILS_PUTALL
-                    );
-    
+  public static final Operation PUTALL_UPDATE = new Operation("PUTALL_UPDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_PUTALL);
+
+   * 
-  public static final Operation SEARCH_UPDATE
-    = new Operation("SEARCH_UPDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_UPDATE,
-                    OP_DETAILS_SEARCH
-                    );
+  public static final Operation SEARCH_UPDATE = new Operation("SEARCH_UPDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_SEARCH);
+   * 
-  public static final Operation LOCAL_LOAD_UPDATE
-    = new Operation("LOCAL_LOAD_UPDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_UPDATE,
-                    OP_DETAILS_LOCAL_LOAD
-                    );
-    
+  public static final Operation LOCAL_LOAD_UPDATE = new Operation("LOCAL_LOAD_UPDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_LOCAL_LOAD);
+
+   * 
-  public static final Operation NET_LOAD_UPDATE
-    = new Operation("NET_LOAD_UPDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_UPDATE,
-                    OP_DETAILS_NET_LOAD
-                    );
-    
+  public static final Operation NET_LOAD_UPDATE = new Operation("NET_LOAD_UPDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_NET_LOAD);
+
+   * 
-  public static final Operation INVALIDATE
-    = new Operation("INVALIDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_NONE
-                    );
-    
+  public static final Operation INVALIDATE = new Operation("INVALIDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_INVALIDATE, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation LOCAL_INVALIDATE
-    = new Operation("LOCAL_INVALIDATE",
-                    true, // isLocal
-                    false, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation LOCAL_INVALIDATE = new Operation("LOCAL_INVALIDATE", true, // isLocal
+      false, // isRegion
+      OP_TYPE_INVALIDATE, OP_DETAILS_NONE);
+   * 
-  public static final Operation DESTROY
-    = new Operation("DESTROY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation DESTROY = new Operation("DESTROY", false, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+   * 
-  public static final Operation LOCAL_DESTROY
-    = new Operation("LOCAL_DESTROY",
-                    true, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
-    
+  public static final Operation LOCAL_DESTROY = new Operation("LOCAL_DESTROY", true, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation EVICT_DESTROY
-    = new Operation("EVICT_DESTROY",
-                    true, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_EVICT
-                    );
+  public static final Operation EVICT_DESTROY = new Operation("EVICT_DESTROY", true, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_EVICT);
-  
+
+   * 
-  public static final Operation REGION_LOAD_SNAPSHOT
-    = new Operation("REGION_LOAD_SNAPSHOT",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_LOAD_SNAPSHOT = new Operation("REGION_LOAD_SNAPSHOT", false, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_LOCAL_DESTROY
-    = new Operation("REGION_LOCAL_DESTROY",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_LOCAL_DESTROY = new Operation("REGION_LOCAL_DESTROY", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_CREATE
-    = new Operation("REGION_CREATE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_CREATE = new Operation("REGION_CREATE", true, // isLocal
+      true, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_CLOSE
-    = new Operation("REGION_CLOSE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY, // @todo darrel: should close be a destroy?
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_CLOSE = new Operation("REGION_CLOSE", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, // @todo darrel: should close be a destroy?
+      OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_DESTROY
-    = new Operation("REGION_DESTROY",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_DESTROY = new Operation("REGION_DESTROY", false, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
-   * An entry distributed destroy triggered by expiration 
+   * An entry distributed destroy triggered by expiration
+   * 
-  public static final Operation EXPIRE_DESTROY
-    = new Operation("EXPIRE_DESTROY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation EXPIRE_DESTROY = new Operation("EXPIRE_DESTROY", false, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_EXPIRE);
-   * An entry local destroy triggered by expiration 
+   * An entry local destroy triggered by expiration
+   * 
-  public static final Operation EXPIRE_LOCAL_DESTROY
-    = new Operation("EXPIRE_LOCAL_DESTROY",
-                    true, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation EXPIRE_LOCAL_DESTROY = new Operation("EXPIRE_LOCAL_DESTROY", true, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_EXPIRE);
-   * An entry distributed invalidate triggered by expiration 
+   * An entry distributed invalidate triggered by expiration
+   * 
-  public static final Operation EXPIRE_INVALIDATE
-    = new Operation("EXPIRE_INVALIDATE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation EXPIRE_INVALIDATE = new Operation("EXPIRE_INVALIDATE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_INVALIDATE, OP_DETAILS_EXPIRE);
-   * An entry local invalidate triggered by expiration 
+   * An entry local invalidate triggered by expiration
+   * 
-  public static final Operation EXPIRE_LOCAL_INVALIDATE
-    = new Operation("EXPIRE_LOCAL_INVALIDATE",
-                    true, // isLocal
-                    false, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation EXPIRE_LOCAL_INVALIDATE =
+      new Operation("EXPIRE_LOCAL_INVALIDATE", true, // isLocal
+          false, // isRegion
+          OP_TYPE_INVALIDATE, OP_DETAILS_EXPIRE);
-   * A region distributed destroy triggered by expiration 
+   * A region distributed destroy triggered by expiration
+   * 
-  public static final Operation REGION_EXPIRE_DESTROY
-    = new Operation("REGION_EXPIRE_DESTROY",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation REGION_EXPIRE_DESTROY =
+      new Operation("REGION_EXPIRE_DESTROY", false, // isLocal
+          true, // isRegion
+          OP_TYPE_DESTROY, OP_DETAILS_EXPIRE);
-   * A region local destroy triggered by expiration 
+   * A region local destroy triggered by expiration
+   * 
-  public static final Operation REGION_EXPIRE_LOCAL_DESTROY
-    = new Operation("REGION_EXPIRE_LOCAL_DESTROY",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation REGION_EXPIRE_LOCAL_DESTROY =
+      new Operation("REGION_EXPIRE_LOCAL_DESTROY", true, // isLocal
+          true, // isRegion
+          OP_TYPE_DESTROY, OP_DETAILS_EXPIRE);
-   * A region distributed invalidate triggered by expiration 
+   * A region distributed invalidate triggered by expiration
+   * 
-  public static final Operation REGION_EXPIRE_INVALIDATE
-    = new Operation("REGION_EXPIRE_INVALIDATE",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation REGION_EXPIRE_INVALIDATE =
+      new Operation("REGION_EXPIRE_INVALIDATE", false, // isLocal
+          true, // isRegion
+          OP_TYPE_INVALIDATE, OP_DETAILS_EXPIRE);
-   * A region local invalidate triggered by expiration 
+   * A region local invalidate triggered by expiration
+   * 
-  public static final Operation REGION_EXPIRE_LOCAL_INVALIDATE
-    = new Operation("REGION_EXPIRE_LOCAL_INVALIDATE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_EXPIRE
-                    );
+  public static final Operation REGION_EXPIRE_LOCAL_INVALIDATE =
+      new Operation("REGION_EXPIRE_LOCAL_INVALIDATE", true, // isLocal
+          true, // isRegion
+          OP_TYPE_INVALIDATE, OP_DETAILS_EXPIRE);
+   * 
-  public static final Operation REGION_LOCAL_INVALIDATE
-    = new Operation("REGION_LOCAL_INVALIDATE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_LOCAL_INVALIDATE =
+      new Operation("REGION_LOCAL_INVALIDATE", true, // isLocal
+          true, // isRegion
+          OP_TYPE_INVALIDATE, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_INVALIDATE
-    = new Operation("REGION_INVALIDATE",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_INVALIDATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_INVALIDATE = new Operation("REGION_INVALIDATE", false, // isLocal
+      true, // isRegion
+      OP_TYPE_INVALIDATE, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_CLEAR
-    = new Operation("REGION_CLEAR",
-                    false, // isLocal
-                    true, // isRegion
-                    OP_TYPE_CLEAR,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_CLEAR = new Operation("REGION_CLEAR", false, // isLocal
+      true, // isRegion
+      OP_TYPE_CLEAR, OP_DETAILS_NONE);
+   * 
-  public static final Operation REGION_LOCAL_CLEAR
-    = new Operation("REGION_LOCAL_CLEAR",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_CLEAR,
-                    OP_DETAILS_NONE
-                    );
-    
-  /**
-   * A cache create. Note that this is marked as a region operation.
-   * @see CacheFactory#create
-   */
-  public static final Operation CACHE_CREATE
-    = new Operation("CACHE_CREATE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REGION_LOCAL_CLEAR = new Operation("REGION_LOCAL_CLEAR", true, // isLocal
+      true, // isRegion
+      OP_TYPE_CLEAR, OP_DETAILS_NONE);
-   * A cache close.  Note that this is marked as a region operation.
+   * A cache create. Note that this is marked as a region operation.
+   * 
+   * @see CacheFactory#create
+   */
+  public static final Operation CACHE_CREATE = new Operation("CACHE_CREATE", true, // isLocal
+      true, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_NONE);
+
+  /**
+   * A cache close. Note that this is marked as a region operation.
+   * 
-  public static final Operation CACHE_CLOSE
-    = new Operation("CACHE_CLOSE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY, // @todo darrel: should close be a destroy?
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation CACHE_CLOSE = new Operation("CACHE_CLOSE", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, // @todo darrel: should close be a destroy?
+      OP_DETAILS_NONE);
+
-   * A cache close due to being forced out of the distributed system
-   * by other members.  This typically happens
-   * when a member becomes unresponsive and does not respond to heartbeat requests
+   * A cache close due to being forced out of the distributed system by other members. This
+   * typically happens when a member becomes unresponsive and does not respond to heartbeat requests
-  public static final Operation FORCED_DISCONNECT
-    = new Operation("FORCED_DISCONNECT",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
-  
+  public static final Operation FORCED_DISCONNECT = new Operation("FORCED_DISCONNECT", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation REGION_REINITIALIZE
-    = new Operation("REGION_REINITIALIZE",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
-                    
+  public static final Operation REGION_REINITIALIZE = new Operation("REGION_REINITIALIZE", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation CACHE_RECONNECT 
-    = new Operation("CACHE_RECONNECT",
-                    true, // isLocal
-                    true, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
-                    
+  public static final Operation CACHE_RECONNECT = new Operation("CACHE_RECONNECT", true, // isLocal
+      true, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
+
+   * 
-  public static final Operation PUT_IF_ABSENT
-    = new Operation("PUT_IF_ABSENT",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_CREATE,
-                    OP_DETAILS_GUARANTEES_OLD_VALUE
-                    );
+  public static final Operation PUT_IF_ABSENT = new Operation("PUT_IF_ABSENT", false, // isLocal
+      false, // isRegion
+      OP_TYPE_CREATE, OP_DETAILS_GUARANTEES_OLD_VALUE);
-   * An atomic update operation 
+   * An atomic update operation
+   * 
-  public static final Operation REPLACE
-    = new Operation("REPLACE",
-        false, // isLocal
-        false, // isRegion
-        OP_TYPE_UPDATE,
-        OP_DETAILS_GUARANTEES_OLD_VALUE);
-  
+  public static final Operation REPLACE = new Operation("REPLACE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE, OP_DETAILS_GUARANTEES_OLD_VALUE);
+
+   * 
-  public static final Operation REMOVE
-    = new Operation("REMOVE",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_NONE
-                    );
+  public static final Operation REMOVE = new Operation("REMOVE", false, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_NONE);
-  public static final Operation UPDATE_VERSION_STAMP 
-    = new Operation("UPDATE_VERSION",
-                     false, //isLocal
-                     false, //isRegion
-                     OP_TYPE_UPDATE_VERSION, //opType
-                     OP_DETAILS_NONE //opDetails
-                     );
+  public static final Operation UPDATE_VERSION_STAMP = new Operation("UPDATE_VERSION", false, // isLocal
+      false, // isRegion
+      OP_TYPE_UPDATE_VERSION, // opType
+      OP_DETAILS_NONE // opDetails
+  );
+   * 
-  public static final Operation REMOVEALL_DESTROY
-    = new Operation("REMOVEALL_DESTROY",
-                    false, // isLocal
-                    false, // isRegion
-                    OP_TYPE_DESTROY,
-                    OP_DETAILS_REMOVEALL
-                    );
-    
+  public static final Operation REMOVEALL_DESTROY = new Operation("REMOVEALL_DESTROY", false, // isLocal
+      false, // isRegion
+      OP_TYPE_DESTROY, OP_DETAILS_REMOVEALL);
+
-    
+
-  /** One of the following:
-   *    OP_TYPE_CREATE,
-   *    OP_TYPE_UPDATE,
-   *    OP_TYPE_INVALIDATE,
-   *    OP_TYPE_DESTROY,
-   *    OP_TYPE_CLEAR
+  /**
+   * One of the following: OP_TYPE_CREATE, OP_TYPE_UPDATE, OP_TYPE_INVALIDATE, OP_TYPE_DESTROY,
+   * OP_TYPE_CLEAR
-  /** One of the following:
-   *    OP_DETAILS_NONE,
-   *    OP_DETAILS_SEARCH,
-   *    OP_DETAILS_LOCAL_LOAD,
-   *    OP_DETAILS_NET_LOAD,
-   *    OP_DETAILS_EXPIRE,
-   *    OP_DETAILS_EVICT
-   *    OP_DETAILS_PUTALL
-   *    OP_DETAILS_GUARANTEES_OLD_VALUE
-   *    OP_DETAILS_REMOVEALL
+  /**
+   * One of the following: OP_DETAILS_NONE, OP_DETAILS_SEARCH, OP_DETAILS_LOCAL_LOAD,
+   * OP_DETAILS_NET_LOAD, OP_DETAILS_EXPIRE, OP_DETAILS_EVICT OP_DETAILS_PUTALL
+   * OP_DETAILS_GUARANTEES_OLD_VALUE OP_DETAILS_REMOVEALL
-  
+
-    return VALUES[ordinal];  // Canonicalize
+    return VALUES[ordinal]; // Canonicalize
-    
-    
+
+
-    
+
-    
+
-  
+
-  
+
-  
+
+
+
+
+
-    return (this == REGION_CLOSE)
-      || (this == CACHE_CLOSE)
-      || (this == CACHE_RECONNECT)
-      || (this == FORCED_DISCONNECT);
+    return (this == REGION_CLOSE) || (this == CACHE_CLOSE) || (this == CACHE_RECONNECT)
+        || (this == FORCED_DISCONNECT);
+
+   * 
+
+
+
+
+
-  /** Answer true if this operation resulted from expiration.
+
+  /**
+   * Answer true if this operation resulted from expiration.
+   * 
-  
+
+   * 
-  /** Returns true if this operation included a loader running in this cache.
-   * Note that this will be true even if the local loader called <code>netSearch</code>.
+  /**
+   * Returns true if this operation included a loader running in this cache. Note that this will be
+   * true even if the local loader called <code>netSearch</code>.
-   * If this operation is for a Partitioned Region, then true will be returned if the
-   * loader ran in the same VM as where the data is hosted. If true is returned, and {@link CacheEvent#isOriginRemote}
-   * is true, it means the data is not hosted locally, but the loader was run local to the data.
+   * If this operation is for a Partitioned Region, then true will be returned if the loader ran in
+   * the same VM as where the data is hosted. If true is returned, and
+   * {@link CacheEvent#isOriginRemote} is true, it means the data is not hosted locally, but the
+   * loader was run local to the data.
-  /** Returns true if this operation included a loader running that was remote
-   * from the cache that requested it, i.e., a netLoad. Note that the cache
-   * that requested the netLoad may not be this cache.
+  /**
+   * Returns true if this operation included a loader running that was remote from the cache that
+   * requested it, i.e., a netLoad. Note that the cache that requested the netLoad may not be this
+   * cache.
+   * 
-  
-  /** Returns true if this operation included running a loader.
+
+  /**
+   * Returns true if this operation included running a loader.
+   * 
-    return (this.opDetails & (OP_DETAILS_LOCAL_LOAD|OP_DETAILS_NET_LOAD)) != 0;
+    return (this.opDetails & (OP_DETAILS_LOCAL_LOAD | OP_DETAILS_NET_LOAD)) != 0;
-  
-  /** Returns true if this operation included a <code>netSearch</code>. If the <code>netSearch</code>
-   * was invoked by a loader however, this will return false and <code>isLocalLoad()</code>
-   * or <code>isNetLoad()</code> will return true instead.
+
+  /**
+   * Returns true if this operation included a <code>netSearch</code>. If the <code>netSearch</code>
+   * was invoked by a loader however, this will return false and <code>isLocalLoad()</code> or
+   * <code>isNetLoad()</code> will return true instead.
-   * Returns true if this operation was a {@link #isNetSearch net search} or a
-   * {@link #isLoad load}.
+   * Returns true if this operation was a {@link #isNetSearch net search} or a {@link #isLoad load}.
+   * 
-    return (this.opDetails & (OP_DETAILS_SEARCH|OP_DETAILS_LOCAL_LOAD|OP_DETAILS_NET_LOAD)) != 0;
+    return (this.opDetails
+        & (OP_DETAILS_SEARCH | OP_DETAILS_LOCAL_LOAD | OP_DETAILS_NET_LOAD)) != 0;
-   * Returns true if this operation is a ConcurrentMap operation that
-   * guarantees the old value to be returned no matter what expense may
-   * be incurred in doing so.
+   * Returns true if this operation is a ConcurrentMap operation that guarantees the old value to be
+   * returned no matter what expense may be incurred in doing so.
+   * 
-   * Returns the update operation that corresponds to this operation.
-   * For a create operation the corresponding update op is returned.
-   * For all other operations <code>this</code> is returned.
+   * Returns the update operation that corresponds to this operation. For a create operation the
+   * corresponding update op is returned. For all other operations <code>this</code> is returned.
-      case OP_DETAILS_SEARCH:
-        return Operation.SEARCH_UPDATE;
-      case OP_DETAILS_LOCAL_LOAD:
-        return Operation.LOCAL_LOAD_UPDATE;
-      case OP_DETAILS_NET_LOAD:
-        return Operation.NET_LOAD_UPDATE;
-      case OP_DETAILS_PUTALL:
-        return Operation.PUTALL_UPDATE;
-      default:
-        return Operation.UPDATE;
+        case OP_DETAILS_SEARCH:
+          return Operation.SEARCH_UPDATE;
+        case OP_DETAILS_LOCAL_LOAD:
+          return Operation.LOCAL_LOAD_UPDATE;
+        case OP_DETAILS_NET_LOAD:
+          return Operation.NET_LOAD_UPDATE;
+        case OP_DETAILS_PUTALL:
+          return Operation.PUTALL_UPDATE;
+        default:
+          return Operation.UPDATE;
-   * Returns the create operation that corresponds to this operation.
-   * For an update operation the corresponding create op is returned.
-   * For all other operations <code>this</code> is returned.
+   * Returns the create operation that corresponds to this operation. For an update operation the
+   * corresponding create op is returned. For all other operations <code>this</code> is returned.
-      case OP_DETAILS_SEARCH:
-        return Operation.SEARCH_CREATE;
-      case OP_DETAILS_LOCAL_LOAD:
-        return Operation.LOCAL_LOAD_CREATE;
-      case OP_DETAILS_NET_LOAD:
-        return Operation.NET_LOAD_CREATE;
-      case OP_DETAILS_PUTALL:
-        return Operation.PUTALL_CREATE;
-      default:
-        return Operation.CREATE;
+        case OP_DETAILS_SEARCH:
+          return Operation.SEARCH_CREATE;
+        case OP_DETAILS_LOCAL_LOAD:
+          return Operation.LOCAL_LOAD_CREATE;
+        case OP_DETAILS_NET_LOAD:
+          return Operation.NET_LOAD_CREATE;
+        case OP_DETAILS_PUTALL:
+          return Operation.PUTALL_CREATE;
+        default:
+          return Operation.CREATE;
-  
-  /** Returns a string representation for this operation.
-     * @return the name of this operation.
-     */
+
+  /**
+   * Returns a string representation for this operation.
+   * 
+   * @return the name of this operation.
+   */

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66