Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * ByteBufferInputStream is an input stream for ByteBuffer objects. It's
- * incredible that the jdk doesn't have one of these already.
+ * ByteBufferInputStream is an input stream for ByteBuffer objects. It's incredible that the jdk
+ * doesn't have one of these already.
- * The methods in this class throw BufferUnderflowException, not EOFException,
- * if the end of the buffer is reached before we read the full amount. That
- * breaks the contract for InputStream and DataInput, but it works for our code.
+ * The methods in this class throw BufferUnderflowException, not EOFException, if the end of the
+ * buffer is reached before we read the full amount. That breaks the contract for InputStream and
+ * DataInput, but it works for our code.
-public class ByteBufferInputStream extends InputStream implements DataInput, java.io.Externalizable
-{
+public class ByteBufferInputStream extends InputStream
+    implements DataInput, java.io.Externalizable {
-   * This interface is used to wrap either a ByteBuffer or an offheap Chunk
-   * as the source of bytes for a ByteBufferInputStream.
+   * This interface is used to wrap either a ByteBuffer or an offheap Chunk as the source of bytes
+   * for a ByteBufferInputStream.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-    
+
+
-  
+
+
+
-      // But it is possible that createByteBuffer will not work on a different jdk so keep it for now.
+      // But it is possible that createByteBuffer will not work on a different jdk so keep it for
+      // now.
-  
+
+
+
-     * <p> The hash code of a byte source depends only upon its remaining
-     * elements; that is, upon the elements from <tt>position()</tt> up to, and
-     * including, the element at <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.
+     * <p>
+     * The hash code of a byte source depends only upon its remaining elements; that is, upon the
+     * elements from <tt>position()</tt> up to, and including, the element at
+     * <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.
-     * <p> Because byte source hash codes are content-dependent, it is inadvisable
-     * to use byte sources as keys in hash maps or similar data structures unless it
-     * is known that their contents will not change.  </p>
+     * <p>
+     * Because byte source hash codes are content-dependent, it is inadvisable to use byte sources
+     * as keys in hash maps or similar data structures unless it is known that their contents will
+     * not change.
+     * </p>
-     * @return  The current hash code of this byte source
+     * @return The current hash code of this byte source
-        h = 31 * h + (int)get(i);
+        h = 31 * h + (int) get(i);
+
-      ByteSource that = (ByteSource)ob;
+      ByteSource that = (ByteSource) ob;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-      if (len == 0) return;
+      if (len == 0)
+        return;
+
-  
+
+
-    
+
-     * <p> The hash code of a byte source depends only upon its remaining
-     * elements; that is, upon the elements from <tt>position()</tt> up to, and
-     * including, the element at <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.
+     * <p>
+     * The hash code of a byte source depends only upon its remaining elements; that is, upon the
+     * elements from <tt>position()</tt> up to, and including, the element at
+     * <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.
-     * <p> Because byte source hash codes are content-dependent, it is inadvisable
-     * to use byte sources as keys in hash maps or similar data structures unless it
-     * is known that their contents will not change.  </p>
+     * <p>
+     * Because byte source hash codes are content-dependent, it is inadvisable to use byte sources
+     * as keys in hash maps or similar data structures unless it is known that their contents will
+     * not change.
+     * </p>
-     * @return  The current hash code of this byte source
+     * @return The current hash code of this byte source
-        h = 31 * h + (int)get(i);
+        h = 31 * h + (int) get(i);
-     
+
-      ByteSource that = (ByteSource)ob;
+      ByteSource that = (ByteSource) ob;
-    
+
-    
+
-    
+
-     * Checks the given index against the limit, throwing an {@link
-     * IndexOutOfBoundsException} if it is not smaller than the limit
-     * or is smaller than zero.
+     * Checks the given index against the limit, throwing an {@link IndexOutOfBoundsException} if it
+     * is not smaller than the limit or is smaller than zero.
+
-    
+
+
+
+
-      } catch (ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
+      } catch (ClassNotFoundException | NoSuchMethodException | SecurityException
+          | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
-        //throw new IllegalStateException("Could not invoke java.nio.Bits.unaligned()", e);
+        // throw new IllegalStateException("Could not invoke java.nio.Bits.unaligned()", e);
+
-    
+
+
+
-        return (short)((ch1 << 8) + (ch2 << 0));
+        return (short) ((ch1 << 8) + (ch2 << 0));
+
+
-        return (char)((ch1 << 8) + (ch2 << 0));
+        return (char) ((ch1 << 8) + (ch2 << 0));
+
-    
+
+
+
-        return (((long)b0 << 56) +
-            ((long)(b1 & 255) << 48) +
-            ((long)(b2 & 255) << 40) +
-            ((long)(b3 & 255) << 32) +
-            ((long)(b4 & 255) << 24) +
-            ((b5 & 255) << 16) +
-            ((b6 & 255) <<  8) +
-            ((b7 & 255) <<  0));
+        return (((long) b0 << 56) + ((long) (b1 & 255) << 48) + ((long) (b2 & 255) << 40)
+            + ((long) (b3 & 255) << 32) + ((long) (b4 & 255) << 24) + ((b5 & 255) << 16)
+            + ((b6 & 255) << 8) + ((b7 & 255) << 0));
+
-   }
+    }
+
+
+
-      // We will not even create an instance of this class if createByteBuffer works on this platform.
-//      if (len > 0) {
-//        ByteBuffer bb = this.chunk.createByteBuffer();
-//        bb.position(position());
-//        bb.limit(limit());
-//        out.put(bb);
-//        position(limit());
-//      }
+      // We will not even create an instance of this class if createByteBuffer works on this
+      // platform.
+      // if (len > 0) {
+      // ByteBuffer bb = this.chunk.createByteBuffer();
+      // bb.position(position());
+      // bb.limit(limit());
+      // out.put(bb);
+      // position(limit());
+      // }
-    
+
+
-  
+
-  
-  public ByteBufferInputStream() {
-  }
-  
+
+  public ByteBufferInputStream() {}
+
-    if(buffer == null) {
+    if (buffer == null) {
-  
+
-  
+
-   * See the InputStream read method for javadocs.
-   * Note that if an attempt
-   * to read past the end of the wrapped ByteBuffer is done this method
-   * throws BufferUnderflowException
+   * See the InputStream read method for javadocs. Note that if an attempt to read past the end of
+   * the wrapped ByteBuffer is done this method throws BufferUnderflowException
-  
-  /* this method is not thread safe
-   * See the InputStream read method for javadocs.
-   * Note that if an attempt
-   * to read past the end of the wrapped ByteBuffer is done this method
-   * throws BufferUnderflowException
+
+  /*
+   * this method is not thread safe See the InputStream read method for javadocs. Note that if an
+   * attempt to read past the end of the wrapped ByteBuffer is done this method throws
+   * BufferUnderflowException
-  
+
-  
-//  @Override
-//  public boolean markSupported() {
-//    return true;
-//  }
-//
-//  @Override
-//  public void mark(int limit) {
-//    this.buffer.mark();
-//  }
-//
-//  @Override
-//  public void reset() {
-//    this.buffer.reset();
-//  }
+
+  // @Override
+  // public boolean markSupported() {
+  // return true;
+  // }
+  //
+  // @Override
+  // public void mark(int limit) {
+  // this.buffer.mark();
+  // }
+  //
+  // @Override
+  // public void reset() {
+  // this.buffer.reset();
+  // }
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    if(newPosition > this.buffer.limit()) {
+    if (newPosition > this.buffer.limit()) {
-//    if (absPos < 0) {
-//      throw new IllegalArgumentException("position was less than zero " + absPos);
-//    } else if (absPos > this.buffer.limit()) {
-//      throw new IllegalArgumentException( "position " + absPos + " was greater than the limit " + this.buffer.limit());
-//    }
+    // if (absPos < 0) {
+    // throw new IllegalArgumentException("position was less than zero " + absPos);
+    // } else if (absPos > this.buffer.limit()) {
+    // throw new IllegalArgumentException( "position " + absPos + " was greater than the limit " +
+    // this.buffer.limit());
+    // }
- }
-  
+  }
+
- }
+  }
-  
+
-      for (int i=0; i < this.buffer.capacity(); i++) {
+      for (int i = 0; i < this.buffer.capacity(); i++) {
-  public void readExternal(ObjectInput in) throws IOException,
-      ClassNotFoundException {
+  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
-        throw new IOException("Expected to read " + capacity + " bytes but only read " + bytesRead + " bytes.");
+        throw new IOException(
+            "Expected to read " + capacity + " bytes but only read " + bytesRead + " bytes.");
-      setBuffer(ByteBuffer.wrap(bytes, position, limit-position));
+      setBuffer(ByteBuffer.wrap(bytes, position, limit - position));

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 DEL66 DEL66