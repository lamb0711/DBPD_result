Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * {@link org.apache.geode.cache.Region#getEntry(Object)}operation. The
- * reply is sent in a {@link 
- * org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}.
+ * {@link org.apache.geode.cache.Region#getEntry(Object)}operation. The reply is sent in a
+ * {@link org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}.
-public final class RemoteFetchEntryMessage extends RemoteOperationMessage
-  {
+public final class RemoteFetchEntryMessage extends RemoteOperationMessage {
-  
+
-  public RemoteFetchEntryMessage() {
-  }
+  public RemoteFetchEntryMessage() {}
-   * Sends a LocalRegion
-   * {@link org.apache.geode.cache.Region#getEntry(Object)} message   
+   * Sends a LocalRegion {@link org.apache.geode.cache.Region#getEntry(Object)} message
-   * @param recipient
-   *          the member that the getEntry message is sent to
-   * @param r
-   *          the Region for which getEntry was performed upon
-   * @param key
-   *          the object to which the value should be feteched
-   * @return the processor used to fetch the returned value associated with the
-   *         key
+   * @param recipient the member that the getEntry message is sent to
+   * @param r the Region for which getEntry was performed upon
+   * @param key the object to which the value should be feteched
+   * @return the processor used to fetch the returned value associated with the key
-  public static FetchEntryResponse send(InternalDistributedMember recipient,
-      LocalRegion r, final Object key)
-      throws RemoteOperationException
-  {
+  public static FetchEntryResponse send(InternalDistributedMember recipient, LocalRegion r,
+      final Object key) throws RemoteOperationException {
-    FetchEntryResponse p = new FetchEntryResponse(r.getSystem(), Collections
-        .singleton(recipient), r, key);
+    FetchEntryResponse p =
+        new FetchEntryResponse(r.getSystem(), Collections.singleton(recipient), r, key);
-      throw new RemoteOperationException(LocalizedStrings.RemoteFetchEntryMessage_FAILED_SENDING_0.toLocalizedString(m));
+      throw new RemoteOperationException(
+          LocalizedStrings.RemoteFetchEntryMessage_FAILED_SENDING_0.toLocalizedString(m));
-//  final public int getProcessorType()
-//  {
-//    return DistributionManager.PARTITIONED_REGION_EXECUTOR;
-//  }
+  // final public int getProcessorType()
+  // {
+  // return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+  // }
-  protected final boolean operateOnRegion(DistributionManager dm,
-      LocalRegion r, long startTime) throws RemoteOperationException
-  {
+  protected final boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+      throws RemoteOperationException {
-    if ( ! (r instanceof PartitionedRegion) ) {
+    if (!(r instanceof PartitionedRegion)) {
-      try {
-        final KeyInfo keyInfo = r.getKeyInfo(key);
-        Region.Entry re = r.getDataView().getEntry(keyInfo, r, true);
-        if(re==null) {
-          r.checkEntryNotFound(key);
-        }
-        NonLocalRegionEntry nlre = new NonLocalRegionEntry(re, r);
-        LocalRegion dataReg = r.getDataRegionForRead(keyInfo);
-        val = new EntrySnapshot(nlre,dataReg,r, false);
-        //r.getPrStats().endRemoteOperationMessagesProcessing(startTime); 
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), val, dm, null);
+    try {
+      final KeyInfo keyInfo = r.getKeyInfo(key);
+      Region.Entry re = r.getDataView().getEntry(keyInfo, r, true);
+      if (re == null) {
+        r.checkEntryNotFound(key);
-      catch (TransactionException tex) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
-            new ReplyException(tex));
-      }
-      catch (EntryNotFoundException enfe) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
-            new ReplyException(LocalizedStrings.RemoteFetchEntryMessage_ENTRY_NOT_FOUND.toLocalizedString(), enfe));
-      }
-      catch (PrimaryBucketException pbe) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
-            new ReplyException(pbe));
-      }
+      NonLocalRegionEntry nlre = new NonLocalRegionEntry(re, r);
+      LocalRegion dataReg = r.getDataRegionForRead(keyInfo);
+      val = new EntrySnapshot(nlre, dataReg, r, false);
+      // r.getPrStats().endRemoteOperationMessagesProcessing(startTime);
+      FetchEntryReplyMessage.send(getSender(), getProcessorId(), val, dm, null);
+    } catch (TransactionException tex) {
+      FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(tex));
+    } catch (EntryNotFoundException enfe) {
+      FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(
+          LocalizedStrings.RemoteFetchEntryMessage_ENTRY_NOT_FOUND.toLocalizedString(), enfe));
+    } catch (PrimaryBucketException pbe) {
+      FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(pbe));
+    }
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  public void setKey(Object key)
-  {
+  public void setKey(Object key) {
-  public static final class FetchEntryReplyMessage extends ReplyMessage
-   {
+  public static final class FetchEntryReplyMessage extends ReplyMessage {
-    public FetchEntryReplyMessage() {
-    }
+    public FetchEntryReplyMessage() {}
-    private FetchEntryReplyMessage(int processorId,
-        EntrySnapshot value, ReplyException re) {
+    private FetchEntryReplyMessage(int processorId, EntrySnapshot value, ReplyException re) {
-    public static void send(InternalDistributedMember recipient,
-        int processorId, EntrySnapshot value, DM dm, ReplyException re)
-    {
-      Assert.assertTrue(recipient != null,
-          "FetchEntryReplyMessage NULL recipient");
+    public static void send(InternalDistributedMember recipient, int processorId,
+        EntrySnapshot value, DM dm, ReplyException re) {
+      Assert.assertTrue(recipient != null, "FetchEntryReplyMessage NULL recipient");
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, final ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, final ReplyProcessor21 processor) {
-      
+
-        logger.trace(LogMarker.DM, "FetchEntryReplyMessage process invoking reply processor with processorId:{}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "FetchEntryReplyMessage process invoking reply processor with processorId:{}",
+            this.processorId);
-    public EntrySnapshot getValue()
-    {
+    public EntrySnapshot getValue() {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-      }
-      else {
+      } else {
-        InternalDataSerializer.invokeToData((DataSerializable)this.value, out);
+        InternalDataSerializer.invokeToData((DataSerializable) this.value, out);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-        FetchEntryResponse processor = (FetchEntryResponse)ReplyProcessor21
-            .getProcessor(this.processorId);
+        FetchEntryResponse processor =
+            (FetchEntryResponse) ReplyProcessor21.getProcessor(this.processorId);
-        this.value = new EntrySnapshot(in,processor.region);
+        this.value = new EntrySnapshot(in, processor.region);
-    public String toString()
-    {
+    public String toString() {
-      sb.append("FetchEntryReplyMessage ").append("processorid=").append(
-          this.processorId).append(" reply to sender ")
-          .append(this.getSender()).append(" returning value=").append(
-              this.value);
+      sb.append("FetchEntryReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender()).append(" returning value=")
+          .append(this.value);
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.RemoteFetchEntryMessage.FetchEntryReplyMessage}
-  public static class FetchEntryResponse extends RemoteOperationResponse
-   {
+  public static class FetchEntryResponse extends RemoteOperationResponse {
-    public FetchEntryResponse(InternalDistributedSystem ds, Set recipients,
-        LocalRegion theRegion, Object key) {
+    public FetchEntryResponse(InternalDistributedSystem ds, Set recipients, LocalRegion theRegion,
+        Object key) {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          FetchEntryReplyMessage reply = (FetchEntryReplyMessage)msg;
+          FetchEntryReplyMessage reply = (FetchEntryReplyMessage) msg;
-            logger.trace(LogMarker.DM, "FetchEntryResponse return value is {}" , this.returnValue);
+            logger.trace(LogMarker.DM, "FetchEntryResponse return value is {}", this.returnValue);
-      }
-      finally {
+      } finally {
-    public EntrySnapshot waitForResponse() 
-        throws EntryNotFoundException, RemoteOperationException {
+    public EntrySnapshot waitForResponse() throws EntryNotFoundException, RemoteOperationException {
-      }
-      catch (RemoteOperationException e) {
+      } catch (RemoteOperationException e) {
-      }
-      catch (EntryNotFoundException e) {
+      } catch (EntryNotFoundException e) {
-      }
-      catch (TransactionException e) {
+      } catch (TransactionException e) {
-      }
-      catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException e) {
-      }
-      catch (CacheException ce) {
+      } catch (CacheException ce) {
-        throw new RemoteOperationException(LocalizedStrings.RemoteFetchEntryMessage_FETCHENTRYRESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT.toLocalizedString(), ce);
+        throw new RemoteOperationException(
+            LocalizedStrings.RemoteFetchEntryMessage_FETCHENTRYRESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT
+                .toLocalizedString(),
+            ce);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66