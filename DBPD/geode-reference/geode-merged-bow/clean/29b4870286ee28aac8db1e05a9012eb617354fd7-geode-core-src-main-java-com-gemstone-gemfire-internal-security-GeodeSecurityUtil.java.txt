GEODE-1571: use constructor instead of static method to create security-manager and post-processor

* use security-post-processor to specify the new PostProcessor
* use constructor instead of static method to create security-manager and post-processor
* fix tests
* This closes #198

-import java.lang.reflect.Method;
-import com.gemstone.gemfire.security.AuthenticationRequiredException;
-      securityManager = getObject(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
-    String customPostProcessor = securityProps.getProperty(SECURITY_CLIENT_ACCESSOR_PP);
-    Object postProcessObject = getObject(customPostProcessor);
-    if(postProcessObject instanceof PostProcessor){
-      postProcessor = (PostProcessor) postProcessObject;
+    String customPostProcessor = securityProps.getProperty(SECURITY_POST_PROCESSOR);
+    if( !StringUtils.isBlank(customPostProcessor)) {
+      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
-
-  public static <T> T getObject(String factoryName, Class<T> clazz) {
-    Object object = null;
-
-    if (StringUtils.isBlank(factoryName)) {
-      return null;
-    }
+  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
+    Class actualClass = null;
-      Method instanceGetter = ClassLoadUtil.methodFromName(factoryName);
-      object = instanceGetter.invoke(null, (Object[]) null);
+      actualClass = ClassLoadUtil.classFromName(className);
-      throw new AuthenticationRequiredException(ex.toString(), ex);
+      throw new GemFireSecurityException(ex.toString(), ex);
-    if(!clazz.isAssignableFrom(object.getClass())){
-      throw new GemFireSecurityException("Expecting a "+clazz.getName()+" interface.");
+    if(!expectedClazz.isAssignableFrom(actualClass)){
+      throw new GemFireSecurityException("Expecting a "+expectedClazz.getName()+" class.");
-    return (T)object;
-  }
-  public static Object getObject(String factoryName) {
-    if (StringUtils.isBlank(factoryName)) {
-      return null;
-    }
+    T actualObject = null;
-      Method instanceGetter = ClassLoadUtil.methodFromName(factoryName);
-      return instanceGetter.invoke(null, (Object[]) null);
+      actualObject =  (T)actualClass.newInstance();
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Error instantiating "+actualClass.getName(), e);
-    catch (Exception ex) {
-      throw new AuthenticationRequiredException(ex.toString(), ex);
-    }
+    return actualObject;
+  public static SecurityManager getSecurityManager(){
+    return securityManager;
+  }

INS31 INS31 MOV83 MOV83 MOV73 MOV43 UPD42 MOV42 MOV44 MOV44 INS8 INS83 INS83 INS43 INS42 INS8 UPD42 UPD42 MOV60 MOV54 MOV25 INS60 MOV54 INS41 INS42 INS41 INS38 UPD43 INS43 INS59 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 INS42 INS33 INS21 UPD42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS7 UPD42 INS32 UPD42 INS43 INS42 MOV11 INS42 INS42 INS57 UPD42 UPD42 INS42 UPD43 INS42 UPD45 INS32 MOV43 INS27 UPD42 UPD42 MOV43 UPD42 UPD42 INS42 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL41 DEL42 DEL43 DEL32 DEL42 DEL42 DEL42 DEL32 DEL33 DEL41 DEL8 DEL25 DEL41 DEL8 DEL31 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31