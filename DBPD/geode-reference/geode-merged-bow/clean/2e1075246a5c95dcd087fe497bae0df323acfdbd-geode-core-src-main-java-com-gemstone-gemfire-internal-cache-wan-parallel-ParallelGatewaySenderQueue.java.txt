Merge branch 'release/1.0.0-incubating.M3'

-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
-
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
-      if(!isUsedForHDFS() && userPR.getDataPolicy().withPersistence() && !sender.isPersistenceEnabled()){
+      if(userPR.getDataPolicy().withPersistence() && !sender.isPersistenceEnabled()){
-            prQName, ra, sender, isUsedForHDFS());
+            prQName, ra, sender);
-                  .setInternalMetaRegion(meta).setDestroyLockFlag(true)
+                  .setInternalMetaRegion(meta).setDestroyLockFlag(true).setInternalRegion(true)
-          // if the current node is marked uninitialized (SQLF DDL replay in
-          // progress) then we cannot wait for buckets to recover, because
-          // bucket creation has been disabled until DDL replay is complete.
-          if(!prQ.getCache().isUnInitializedMember(prQ.getDistributionManager().getId())) {
-            //Wait for buckets to be recovered.
-            prQ.shadowPRWaitForBucketRecovery();
-          }
+          //Wait for buckets to be recovered.
+          prQ.shadowPRWaitForBucketRecovery();
-        } catch (IOException veryUnLikely) {
+        } catch (IOException | ClassNotFoundException veryUnLikely) {
-        } catch (ClassNotFoundException alsoUnlikely) {
-          logger.fatal(LocalizedMessage.create(LocalizedStrings.SingleWriteSingleReadRegionQueue_UNEXPECTED_EXCEPTION_DURING_INIT_OF_0,
-                  this.getClass()), alsoUnlikely);
-  protected boolean isUsedForHDFS()
-  {
-    return false;
-  }
-                  // TODO OFFHEAP is value refCount ok here?
-    List batch = new ArrayList();
+    List<GatewaySenderEventImpl> batch = new ArrayList<>();
-  private void addPeekedEvents(List batch, int batchSize) {
+  private void addPeekedEvents(List<GatewaySenderEventImpl> batch, int batchSize) {
+
+      //Remove all entries from peekedEvents for buckets that are not longer primary
+      //This will prevent repeatedly trying to dispatch non-primary events
+      for(Iterator<GatewaySenderEventImpl> iterator = peekedEvents.iterator(); iterator.hasNext(); ) {
+        GatewaySenderEventImpl event = iterator.next();
+        final int bucketId = event.getBucketId();
+        final PartitionedRegion region = (PartitionedRegion) event.getRegion();
+        if(!region.getRegionAdvisor().isPrimaryForBucket(bucketId)) {
+          iterator.remove();
+        }
+      }
+
-  private void addPreviouslyPeekedEvents(List batch, int batchSize) {
+  private void addPreviouslyPeekedEvents(List<GatewaySenderEventImpl> batch, int batchSize) {
-      if (cache.getCancelCriterion().cancelInProgress() != null) {
+      if (cache.getCancelCriterion().isCancelInProgress()) {
-      this( regionName, attrs, parentRegion, cache, pgSender, false);
-    }
-    public ParallelGatewaySenderQueueMetaRegion(String regionName,
-        RegionAttributes attrs, LocalRegion parentRegion,
-        GemFireCacheImpl cache, AbstractGatewaySender pgSender, boolean isUsedForHDFS) {
-              .setParallelGatewaySender((AbstractGatewaySender)pgSender)
-              .setIsUsedForHDFSParallelGatewaySenderQueue(isUsedForHDFS));
+              .setParallelGatewaySender((AbstractGatewaySender)pgSender));
-        GemFireCacheImpl cache, final String prQName, final RegionAttributes ra, AbstractGatewaySender sender, boolean isUsedForHDFS) {
+        GemFireCacheImpl cache, final String prQName, final RegionAttributes ra, AbstractGatewaySender sender) {
-          prQName, ra, null, cache, sender, isUsedForHDFS);
+          prQName, ra, null, cache, sender);

MOV26 INS74 INS74 INS74 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS42 INS24 INS42 MOV32 MOV32 MOV43 INS42 INS74 INS58 INS32 INS8 UPD42 MOV43 INS74 INS59 INS42 INS42 INS60 INS60 INS60 INS25 MOV43 INS43 INS43 INS42 INS32 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS38 INS8 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS32 INS21 INS84 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS32 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV42 UPD42 INS33 UPD42 UPD42 INS9 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL8 DEL25 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL52 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL33 DEL27 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL17 DEL8 DEL31 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL39 DEL42 DEL44 DEL42