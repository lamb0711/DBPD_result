GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
-import java.util.ArrayList;
+import java.util.Collection;
-import java.util.Random;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-
-    ArrayList<ByteArrayWrapper> popped = new ArrayList<>();
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Region<ByteArrayWrapper, RedisSet> region = getRegion(context);
-      RedisSet original = region.get(key);
-      if (original == null) {
-        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-        return;
-      }
-
-      synchronized (original) {
-        int originalSize = original.size();
-        if (originalSize == 0) {
-          command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-          return;
-        }
-
-        if (popCount >= originalSize) {
-          // remove them all
-          popped.addAll(original.members());
-        } else {
-          ByteArrayWrapper[] setMembers =
-              original.members().toArray(new ByteArrayWrapper[originalSize]);
-          Random rand = new Random();
-          while (popped.size() < popCount) {
-            int idx = rand.nextInt(originalSize);
-            ByteArrayWrapper memberToPop = setMembers[idx];
-            if (memberToPop != null) {
-              setMembers[idx] = null;
-              popped.add(memberToPop);
-            }
-          }
-        }
-        // The following srem call can modify popped by removing members
-        // from it that were not removed from the set.
-        // But since the set is synchronized all members in popped will be
-        // removed so popped will contains all the members popped.
-        RedisSet.srem(region, key, popped, null);
-        // TODO: what should SPOP do with a source that it empties? We probably need to delete it.
-      }
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
+    RedisSetCommands redisSetCommands =
+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());
+    Collection<ByteArrayWrapper> popped = redisSetCommands.spop(key, popCount);
+    if (popped.isEmpty()) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-
-        command
-            .setResponse(Coder.getBulkStringResponse(context.getByteBufAllocator(), popped.get(0)));
+        command.setResponse(
+            Coder.getBulkStringResponse(context.getByteBufAllocator(), popped.iterator().next()));
-

MOV26 UPD40 INS60 INS60 MOV25 INS43 INS59 UPD74 MOV74 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS14 UPD43 INS42 INS32 INS42 INS42 INS43 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV32 INS32 MOV32 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL2 DEL33 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL33 DEL32 DEL21 DEL8 DEL51 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL34 DEL32