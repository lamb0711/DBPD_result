Merge branch 'release/1.4.0'

+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.RemoteInputStreamClient;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
+    File stagingDir = null;
-      final String[] jarFilenames = (String[]) args[0];
-      final byte[][] jarBytes = (byte[][]) args[1];
-      InternalCache cache = (InternalCache) context.getCache();
+      final List<String> jarFilenames = (List<String>) args[0];
+      final List<RemoteInputStream> jarStreams = (List<RemoteInputStream>) args[1];
+      InternalCache cache = (InternalCache) context.getCache();
-      List<String> deployedList = new ArrayList<String>();
+      Map<String, File> stagedFiles;
+
+      stagedFiles = stageJarContent(jarFilenames, jarStreams);
+      stagingDir = stagedFiles.values().stream().findFirst().get().getParentFile();
+
+      List<String> deployedList = new ArrayList<>();
-          ClassPathLoader.getLatest().getJarDeployer().deploy(jarFilenames, jarBytes);
-      for (int i = 0; i < jarFilenames.length; i++) {
-        deployedList.add(jarFilenames[i]);
+          ClassPathLoader.getLatest().getJarDeployer().deploy(stagedFiles);
+      for (int i = 0; i < jarFilenames.size(); i++) {
+        deployedList.add(jarFilenames.get(i));
+    } catch (IOException ex) {
+      CliFunctionResult result =
+          new CliFunctionResult(memberId, ex, "error staging jars for deployment");
+      context.getResultSender().lastResult(result);
+    } finally {
+      deleteStagingDir(stagingDir);
+
+  private void deleteStagingDir(File stagingDir) {
+    if (stagingDir == null) {
+      return;
+    }
+
+    try {
+      FileUtils.deleteDirectory(stagingDir);
+    } catch (IOException iox) {
+      logger.error("Unable to delete staging directory: {}", iox.getMessage());
+    }
+  }
+
+  private Map<String, File> stageJarContent(List<String> jarNames,
+      List<RemoteInputStream> jarStreams) throws IOException {
+    Map<String, File> stagedJars = new HashMap<>();
+
+    try {
+      Set<PosixFilePermission> perms = new HashSet<>();
+      perms.add(PosixFilePermission.OWNER_READ);
+      perms.add(PosixFilePermission.OWNER_WRITE);
+      perms.add(PosixFilePermission.OWNER_EXECUTE);
+      Path tempDir =
+          Files.createTempDirectory("deploy-", PosixFilePermissions.asFileAttribute(perms));
+
+      for (int i = 0; i < jarNames.size(); i++) {
+        Path tempJar = Paths.get(tempDir.toString(), jarNames.get(i));
+        FileOutputStream fos = new FileOutputStream(tempJar.toString());
+
+        InputStream input = RemoteInputStreamClient.wrap(jarStreams.get(i));
+
+        IOUtils.copyLarge(input, fos);
+
+        fos.close();
+        input.close();
+
+        stagedJars.put(jarNames.get(i), tempJar.toFile());
+      }
+    } catch (IOException iox) {
+      for (int i = 0; i < jarStreams.size(); i++) {
+        try {
+          jarStreams.get(i).close(true);
+        } catch (IOException ex) {
+          // Ignored
+        }
+      }
+      throw iox;
+    }
+
+    return stagedJars;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS60 INS43 INS42 INS25 INS54 INS43 MOV43 INS43 INS74 INS42 INS74 INS42 INS42 INS60 INS54 INS41 INS43 INS59 INS12 INS8 INS42 INS27 INS8 INS8 INS12 INS42 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS8 INS12 INS42 INS42 INS42 INS33 INS60 INS21 INS21 INS44 INS8 INS21 INS42 INS33 INS41 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS43 MOV43 INS43 INS42 INS14 INS60 INS21 INS21 INS21 INS60 INS24 INS44 INS8 INS74 INS74 INS74 INS59 INS7 INS7 INS43 INS42 INS60 INS21 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS74 INS74 INS59 INS32 INS32 INS32 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS42 INS24 INS53 INS43 INS43 INS43 INS43 UPD42 INS43 MOV43 INS43 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS42 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD74 UPD42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS45 INS32 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS39 INS59 INS42 INS32 INS42 INS54 INS43 INS43 INS43 INS43 INS32 INS42 INS32 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 DEL85 DEL5 DEL85 DEL5 DEL39 DEL85 DEL85 DEL5 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL2