GEODE-2644: Cleanup logging classes

+import static org.apache.geode.internal.i18n.LocalizedStrings.InternalDistributedSystem_COULD_NOT_OPEN_LOG_FILE_0;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import org.apache.geode.GemFireIOException;
+import org.apache.geode.i18n.LogWriterI18n;
- * Implementation of {@link org.apache.geode.i18n.LogWriterI18n} that will write to a local stream
+ * Implementation of {@link LogWriterI18n} that will write to a local stream
-  // Constructors
+  protected volatile int level;
+
+  private PrintWriter printWriter;
+  private long bytesLogged;
+
+   *
-  public PureLogWriter(int level) {
+  public PureLogWriter(final int level) {
-   * Creates a writer that logs to <code>logWriter</code>.
+   * Creates a writer that logs to <code>printStream</code>.
-   * @param logWriter is the stream that message will be printed to.
+   * @param printStream is the stream that message will be printed to.
+   *
-  public PureLogWriter(int level, PrintStream logWriter) {
-    this(level, new PrintWriter(logWriter, true), null);
+  public PureLogWriter(final int level, final PrintStream printStream) {
+    this(level, new PrintWriter(printStream, true), null);
-   * Creates a writer that logs to <code>logWriter</code>.
+   * Creates a writer that logs to <code>printStream</code>.
-   * @param logWriter is the stream that message will be printed to.
+   * @param printStream is the stream that message will be printed to.
+   *
-  public PureLogWriter(int level, PrintStream logWriter, String connectionName) {
-    this(level, new PrintWriter(logWriter, true), connectionName);
+  public PureLogWriter(final int level, final PrintStream printStream,
+      final String connectionName) {
+    this(level, new PrintWriter(printStream, true), connectionName);
-   * Creates a writer that logs to <code>logWriter</code>.
+   * Creates a writer that logs to <code>printWriter</code>.
-   * @param logWriter is the stream that message will be printed to.
+   * @param printWriter is the stream that message will be printed to.
+   *
-  public PureLogWriter(int level, PrintWriter logWriter, String connectionName) {
-    super();
-    this.setLevel(level);
-    this.logWriter = logWriter;
+  public PureLogWriter(final int level, final PrintWriter printWriter,
+      final String connectionName) {
+    setLevel(level);
+    this.printWriter = printWriter;
-  // Special Instance Methods on this class only
-    return this.level;
+    return level;
-  public void setLevel(int newLevel) {
-    // if (newLevel < ALL_LEVEL || newLevel > NONE_LEVEL) {
-    // throw new
-    // IllegalArgumentException(LocalizedStrings.PureLogWriter_WRITER_LEVEL_0_WAS_NOT_IN_THE_RANGE_1_2.toLocalizedString(new
-    // Object[] {Integer.valueOf(newLevel), Integer.valueOf(ALL_LEVEL),
-    // Integer.valueOf(NONE_LEVEL)}));
-    // }
-    this.level = newLevel;
+  public void setLevel(final int level) {
+    this.level = level;
-  public void setLogWriterLevel(int newLevel) {
-    setLevel(newLevel);
+  @Override
+  public void setLogWriterLevel(final int logWriterLevel) {
+    setLevel(logWriterLevel);
-  // internal implementation methods
-   * @param msgLevel a string representation of the level
-   * @param msg the actual message to log
-   * @param ex the actual Exception to log
+   * @param messageLevel a string representation of the level
+   * @param message the actual message to log
+   * @param throwable the actual Exception to log
-  public void put(int msgLevel, String msg, Throwable ex) {
+  public void put(final int messageLevel, final String message, final Throwable throwable) {
-    if (ex != null) {
-      StringWriter sw = new StringWriter();
-      PrintWriter pw = new PrintWriter(sw);
-      ex.printStackTrace(pw);
-      pw.close();
+    if (throwable != null) {
+      StringWriter stringWriter = new StringWriter();
+      PrintWriter printWriter = new PrintWriter(stringWriter);
+      throwable.printStackTrace(printWriter);
+      printWriter.close();
-        sw.close();
+        stringWriter.close();
-      exceptionText = sw.toString();
+      exceptionText = stringWriter.toString();
-    put(msgLevel, new Date(), this.connectionName, getThreadName(), getThreadId(), msg,
+    put(messageLevel, new Date(), connectionName, getThreadName(), getThreadId(), message,
-   * @param msgLevel a string representation of the level
-   * @param msgId the actual message to log
-   * @param ex the actual Exception to log
+   * @param messageLevel a string representation of the level
+   * @param messageId the actual message to log
+   * @param throwable the actual Exception to log
-  public void put(int msgLevel, StringId msgId, Object[] params, Throwable ex) {
-    String msg = msgId.toLocalizedString(params);
-    put(msgLevel, msg, ex);
+  public void put(final int messageLevel, final StringId messageId, final Object[] parameters,
+      final Throwable throwable) {
+    String message = messageId.toLocalizedString(parameters);
+    put(messageLevel, message, throwable);
-  protected String formatLogLine(int msgLevel, Date msgDate,
-      @SuppressWarnings("hiding") String connectionName, String threadName, long tid, String msg,
-      String exceptionText) {
-    java.io.StringWriter sw = new java.io.StringWriter();
-    PrintWriter pw = new PrintWriter(sw);
+  private String formatLogLine(final int messageLevel, final Date messageDate,
+      final String connectionName, final String threadName, final long threadId,
+      final String message, final String exceptionText) {
+    StringWriter stringWriter = new StringWriter();
+    PrintWriter printWriter = new PrintWriter(stringWriter);
-    printHeader(pw, msgLevel, msgDate, connectionName, threadName, tid);
+    printHeader(printWriter, messageLevel, messageDate, connectionName, threadName, threadId);
-    if (msg != null) {
+    if (message != null) {
-        formatText(pw, msg, 40);
+        formatText(printWriter, message, 40);
-        pw.println(msg);
-        pw.println(LocalizedStrings.PureLogWriter_IGNORING_EXCEPTION.toLocalizedString());
-        e.printStackTrace(pw);
+        printWriter.println(message);
+        printWriter.println(LocalizedStrings.PureLogWriter_IGNORING_EXCEPTION.toLocalizedString());
+        e.printStackTrace(printWriter);
-      pw.println();
+      printWriter.println();
-      pw.print(exceptionText);
+      printWriter.print(exceptionText);
-    pw.close();
+    printWriter.close();
-      sw.close();
-    } catch (java.io.IOException ignore) {
+      stringWriter.close();
+    } catch (IOException ignore) {
+      // ignored
-    return sw.toString();
+    return stringWriter.toString();
-  protected void printHeader(PrintWriter pw, int msgLevel, Date msgDate, String connectionName,
-      String threadName, long tid) {
-    pw.println();
-    pw.print('[');
-    pw.print(levelToString(msgLevel));
-    pw.print(' ');
-    pw.print(this.formatDate(msgDate));
+  private void printHeader(final PrintWriter printWriter, final int messageLevel,
+      final Date messageDate, final String connectionName, final String threadName,
+      final long threadId) {
+    printWriter.println();
+    printWriter.print('[');
+    printWriter.print(levelToString(messageLevel));
+    printWriter.print(' ');
+    printWriter.print(formatDate(messageDate));
-      pw.print(' ');
-      pw.print(connectionName);
+      printWriter.print(' ');
+      printWriter.print(connectionName);
-      pw.print(" <");
-      pw.print(threadName);
-      pw.print(">");
+      printWriter.print(" <");
+      printWriter.print(threadName);
+      printWriter.print(">");
-    pw.print(" tid=0x");
-    pw.print(Long.toHexString(tid));
-    pw.print("] ");
+    printWriter.print(" tid=0x");
+    printWriter.print(Long.toHexString(threadId));
+    printWriter.print("] ");
-  public String put(int msgLevel, Date msgDate, String connectionName, String threadName, long tid,
-      String msg, String exceptionText) {
-    String result =
-        formatLogLine(msgLevel, msgDate, connectionName, threadName, tid, msg, exceptionText);
-    writeFormattedMessage(result);
-    return result;
+  public String put(final int messageLevel, final Date messageDate, final String connectionName,
+      final String threadName, final long threadId, final String message,
+      final String exceptionText) {
+    String formattedLine = formatLogLine(messageLevel, messageDate, connectionName, threadName,
+        threadId, message, exceptionText);
+    writeFormattedMessage(formattedLine);
+    return formattedLine;
-  public void writeFormattedMessage(String s) {
+  public void writeFormattedMessage(final String message) {
-      this.bytesLogged += s.length();
-      this.logWriter.print(s);
-      this.logWriter.flush();
+      bytesLogged += message.length();
+      printWriter.print(message);
+      printWriter.flush();
-  public long getBytesLogged() {
-    return this.bytesLogged;
+  long getBytesLogged() {
+    return bytesLogged;
-  public PrintWriter setTarget(PrintWriter logWriter) {
-    return setTarget(logWriter, 0L);
+  public PrintWriter setTarget(final PrintWriter printWriter) {
+    return setTarget(printWriter, 0L);
-  public PrintWriter setTarget(PrintWriter logWriter, long targetLength) {
+  public PrintWriter setTarget(final File logFile) {
+    return setTarget(createFileOutputStream(logFile), 0L);
+  }
+
+  private PrintWriter createFileOutputStream(final File logFile) {
+    try {
+      return new PrintWriter(new FileOutputStream(logFile, true), true);
+    } catch (FileNotFoundException ex) {
+      String s = InternalDistributedSystem_COULD_NOT_OPEN_LOG_FILE_0.toLocalizedString(logFile);
+      throw new GemFireIOException(s, ex);
+    }
+  }
+
+  public PrintWriter setTarget(final PrintWriter printWriter, final long targetLength) {
-      PrintWriter result = this.logWriter;
-      this.bytesLogged = targetLength;
-      this.logWriter = logWriter;
-      return result;
+      PrintWriter oldPrintWriter = this.printWriter;
+      bytesLogged = targetLength;
+      this.printWriter = printWriter;
+      return oldPrintWriter;
-    this.closed = true;
+    closed = true;
-      if (this.logWriter != null) {
-        this.logWriter.close();
+      if (printWriter != null) {
+        printWriter.close();
-    return this.closed;
+    return closed;
+  @Override
-    return this.connectionName;
+    return connectionName;
-
-  /** Get the underlying PrintWriter. */
-  public PrintWriter getPrintWriter() {
-    return this.logWriter;
-  }
-
-  // instance variables
-  protected volatile int level;
-  private long bytesLogged = 0;
-  private PrintWriter logWriter;

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 MOV44 MOV44 MOV44 MOV44 MOV44 INS31 INS31 INS83 MOV43 INS59 INS83 INS39 INS59 INS44 MOV44 INS78 UPD83 UPD83 MOV43 INS83 MOV43 INS42 INS44 INS8 INS83 MOV43 INS42 INS44 INS8 MOV43 INS78 INS42 INS42 INS83 INS83 INS83 UPD42 INS83 INS83 UPD42 INS83 MOV43 INS42 INS83 INS83 UPD42 INS83 INS83 UPD42 INS42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 MOV43 INS42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 MOV43 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 INS83 UPD42 INS83 UPD42 INS83 MOV43 INS83 INS43 INS42 INS83 MOV43 UPD42 INS83 INS43 INS42 INS41 INS83 INS43 INS42 INS54 INS83 MOV43 UPD42 INS83 INS42 INS42 UPD66 UPD42 INS33 UPD66 UPD42 INS42 UPD66 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD43 MOV43 MOV43 UPD42 INS42 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS42 UPD42 INS43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS34 INS41 INS44 INS8 INS42 INS42 UPD42 MOV43 UPD42 UPD42 UPD43 INS43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS14 INS43 INS42 INS60 INS53 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 INS42 MOV43 INS14 INS9 INS42 MOV43 INS59 INS14 UPD42 INS42 UPD42 INS42 MOV43 UPD42 UPD42 UPD42 INS43 INS42 INS9 INS42 INS32 INS43 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL42 DEL42 DEL33 DEL42 DEL44 DEL46 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL42 DEL40 DEL40 DEL40 DEL52 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL66 DEL65 DEL29 DEL83 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23