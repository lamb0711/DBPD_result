GEODE-6870: Solution for creation of non-persistent overflow region

+import org.apache.geode.cache.configuration.EnumActionDestroyOverflow;
+    // if any single eviction attributes is set, we will replace
+    // the template eviction attributes with this new eviction attributes. we do not combine
+    // the old and new.
+    RegionAttributesType.EvictionAttributes evictionAttributes =
+        RegionAttributesType.EvictionAttributes
+            .generate(evictionAction, evictionMaxMemory, evictionEntryCount, evictionObjectSizer);
+    if (evictionAttributes != null) {
+      regionAttributes.setEvictionAttributes(evictionAttributes);
+    }
+
-      if (!regionAttributes.getDataPolicy().isPersistent()) {
-        String subMessage =
-            "Only regions with persistence or overflow to disk can specify DiskStore";
-        String message = subMessage + ". "
-            + CliStrings.format(
-                CliStrings.CREATE_REGION__MSG__USE_ATTRIBUTES_FROM_REGION_0_IS_NOT_WITH_PERSISTENCE,
-                new Object[] {templateRegion});
-        return ResultModel.createError(message);
+      if (regionShortcut != null) {
+        if (!regionShortcut.isPersistent() && !regionShortcut.isOverflow()) {
+          String subMessage =
+              "Only regions with persistence or overflow to disk can specify DiskStore";
+          String message = subMessage + ". "
+              + CliStrings.format(CliStrings.CREATE_REGION__MSG__USE_ONE_OF_THESE_SHORTCUTS_0,
+                  new Object[] {String.valueOf(RegionCommandsUtils.PERSISTENT_OVERFLOW_SHORTCUTS)});
+          return ResultModel.createError(message);
+        }
+      } else {
+        EnumActionDestroyOverflow tempEvictionAction = EnumActionDestroyOverflow.LOCAL_DESTROY;
+        RegionAttributesType.EvictionAttributes tempEvictionAttributes =
+            regionAttributes.getEvictionAttributes();
+        if (tempEvictionAttributes != null) {
+          if (tempEvictionAttributes.getLruMemorySize() != null) {
+            tempEvictionAction = tempEvictionAttributes.getLruMemorySize().getAction();
+          } else if (tempEvictionAttributes.getLruEntryCount() != null) {
+            tempEvictionAction = tempEvictionAttributes.getLruEntryCount().getAction();
+          } else if (tempEvictionAttributes.getLruHeapPercentage() != null) {
+            tempEvictionAction = tempEvictionAttributes.getLruHeapPercentage().getAction();
+          }
+        }
+
+        if (!regionAttributes.getDataPolicy().isPersistent()
+            && tempEvictionAction != EnumActionDestroyOverflow.OVERFLOW_TO_DISK) {
+          String subMessage =
+              "Only regions with persistence or overflow to disk can specify DiskStore";
+          String message = subMessage + ". "
+              + CliStrings.format(
+                  CliStrings.CREATE_REGION__MSG__USE_ATTRIBUTES_FROM_REGION_0_IS_NOT_WITH_PERSISTENCE_OR_OVERFLOW,
+                  new Object[] {templateRegion});
+          return ResultModel.createError(message);
+
+        }
-    // unlike expiration attributes, if any single eviction attributes is set, we will replace
-    // the template eviction attributes with this new eviction attributes. we do not combine
-    // the old and new.
-    RegionAttributesType.EvictionAttributes evictionAttributes =
-        RegionAttributesType.EvictionAttributes
-            .generate(evictionAction, evictionMaxMemory, evictionEntryCount, evictionObjectSizer);
-    if (evictionAttributes != null) {
-      regionAttributes.setEvictionAttributes(evictionAttributes);
-    }

INS26 INS40 MOV60 MOV25 INS25 INS27 INS8 INS8 INS42 INS33 INS25 INS60 INS60 INS25 MOV25 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS38 INS38 INS60 INS60 INS41 INS42 INS42 INS40 INS40 INS42 INS32 INS42 INS33 INS25 MOV38 INS27 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS27 INS8 INS25 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS33 INS21 INS27 INS8 INS25 INS42 INS45 INS32 INS42 INS42 INS7 INS32 INS33 INS21 INS27 INS8 INS42 INS42 INS40 INS3 INS42 INS32 INS42 INS42 INS7 INS32 INS33 INS21 UPD40 INS5 INS4 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS85 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42