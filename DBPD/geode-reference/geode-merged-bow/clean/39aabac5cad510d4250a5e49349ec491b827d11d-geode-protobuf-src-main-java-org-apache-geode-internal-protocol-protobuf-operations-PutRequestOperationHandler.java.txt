Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-package org.apache.geode.protocol.protobuf.operations;
+package org.apache.geode.internal.protocol.protobuf.operations;
+
+import org.apache.logging.log4j.Logger;
-import org.apache.geode.protocol.operations.OperationHandler;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.protocol.operations.OperationHandler;
-import org.apache.geode.protocol.protobuf.Failure;
-import org.apache.geode.protocol.protobuf.ProtocolErrorCode;
+import org.apache.geode.internal.protocol.protobuf.Failure;
-import org.apache.geode.protocol.protobuf.Result;
-import org.apache.geode.protocol.protobuf.Success;
-import org.apache.geode.protocol.protobuf.utilities.ProtobufResponseUtilities;
-import org.apache.geode.protocol.protobuf.utilities.ProtobufUtilities;
-import org.apache.geode.serialization.SerializationService;
-import org.apache.geode.serialization.exception.UnsupportedEncodingTypeException;
-import org.apache.geode.serialization.registry.exception.CodecNotRegisteredForTypeException;
+import org.apache.geode.internal.protocol.protobuf.Result;
+import org.apache.geode.internal.protocol.protobuf.Success;
+import org.apache.geode.internal.protocol.protobuf.utilities.ProtobufResponseUtilities;
+import org.apache.geode.internal.protocol.protobuf.utilities.ProtobufUtilities;
+import org.apache.geode.internal.serialization.SerializationService;
+import org.apache.geode.internal.serialization.exception.UnsupportedEncodingTypeException;
+import org.apache.geode.internal.serialization.registry.exception.CodecNotRegisteredForTypeException;
+
+import static org.apache.geode.internal.protocol.protobuf.ProtocolErrorCode.*;
+  private static final Logger logger = LogService.getLogger();
-      return Failure.of(
-          ProtobufResponseUtilities.makeErrorResponse(ProtocolErrorCode.REGION_NOT_FOUND.codeValue,
-              "Region passed by client did not exist: " + regionName));
+      logger.warn("Received Put request for non-existing region: {}", regionName);
+      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(REGION_NOT_FOUND,
+          "Region passed by client did not exist: " + regionName));
-        return Failure.of(ProtobufResponseUtilities.makeErrorResponse(
-            ProtocolErrorCode.CONSTRAINT_VIOLATION.codeValue,
+        logger.error("Received Put request with invalid key type: {}", ex);
+        return Failure.of(ProtobufResponseUtilities.makeErrorResponse(CONSTRAINT_VIOLATION,
-      return Failure.of(ProtobufResponseUtilities
-          .makeErrorResponse(ProtocolErrorCode.VALUE_ENCODING_ERROR.codeValue, ex.getMessage()));
+      logger.error("Got codec error when decoding Put request: {}", ex);
+      return Failure
+          .of(ProtobufResponseUtilities.makeErrorResponse(VALUE_ENCODING_ERROR, ex.getMessage()));

MOV26 INS26 INS26 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS21 INS32 INS21 INS42 INS42 INS45 INS42 INS32 INS42 INS21 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 DEL40 DEL40 DEL40