Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

Conflicts:
	gemfire-core/src/main/java/com/gemstone/gemfire/distributed/internal/PooledExecutorWithDMStats.java
	gemfire-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/jgroup/JGroupMembershipManager.java
	gemfire-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheClientNotifier.java
	gemfire-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
	gemfire-core/src/main/java/com/gemstone/gemfire/internal/i18n/ParentLocalizedStrings.java
	gemfire-core/src/main/java/com/gemstone/gemfire/internal/logging/LogService.java
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/client/internal/AutoConnectionSourceWithUDPDUnitTest.java
	gemfire-core/src/test/java/com/gemstone/gemfire/internal/FDDUnitTest.java
	gemfire-core/src/test/resources/com/gemstone/gemfire/codeAnalysis/sanctionedSerializables.txt

-  private int scopeID;
-  
-  /** 
-   * Identifies the scope ID assosciated with the Select. The CompiledSelect object
-   * is shared across by multiple query executing threads, but since the scopeID 
-   * which gets assigned in the computeDependency phase & is obtained from 
-   * ExecutionContext, it will not differ across threads. This field may get reassigned
-   * by various threads, but still the value will be consistent.
-   * It is also therefore not needed to make this field volatile
-   * Asif
-   */
+  //used as a key in a context to identify the scope of this CompiledSelect 
+  private Object scopeID = new Object(); 
+
-    //int scopeID = context.assosciateScopeID(this);
-    this.scopeID = context.assosciateScopeID();
-    context.newScope(scopeID);
-    context.pushExecCache(scopeID);
+    context.cachePut(scopeID, context.assosciateScopeID());
+    context.newScope((Integer)context.cacheGet(scopeID));
+    context.pushExecCache((Integer)context.cacheGet(scopeID));
-    context.newScope(this.scopeID);
-    context.pushExecCache(scopeID);
+    context.newScope((Integer)context.cacheGet(scopeID));
+    context.pushExecCache((Integer)context.cacheGet(scopeID));
-   // context.newScope(context.getScopeID(this));
-    context.newScope(this.scopeID);
-    context.pushExecCache(scopeID);
+    context.newScope((Integer)context.cacheGet(scopeID));
+    context.pushExecCache((Integer)context.cacheGet(scopeID));
-    context.newScope(this.scopeID);
-    context.pushExecCache(scopeID);
+    context.newScope((Integer)context.cacheGet(scopeID));
+    context.pushExecCache((Integer)context.cacheGet(scopeID));

MOV23 INS43 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS42 MOV32 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 DEL39 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22