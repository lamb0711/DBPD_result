[GEODE-20] Allow REST API to be launched

-import java.io.File;
-
-import org.springframework.util.Assert;
-import com.gemstone.gemfire.internal.lang.StringUtils;
- * Agent implementation that controls the HTTP server end points used for REST 
+ * Agent implementation that controls the HTTP server end points used for REST
- * The RestAgent is used to start http service in embedded mode on any non manager data node with developer REST APIs service enabled. 
+ * The RestAgent is used to start http service in embedded mode on any non
+ * manager data node with developer REST APIs service enabled.
-  
+
-  
+
-  
-  private boolean isManagementRestServiceRunning(GemFireCacheImpl cache){
-    final SystemManagementService managementService = (SystemManagementService) ManagementService.getManagementService(
-        cache);
-    return ( managementService.getManagementAgent() != null && managementService.getManagementAgent().isHttpServiceRunning());
-    
+
+  private boolean isManagementRestServiceRunning(GemFireCacheImpl cache) {
+    final SystemManagementService managementService = (SystemManagementService) ManagementService
+        .getManagementService(cache);
+    return (managementService.getManagementAgent() != null && managementService
+        .getManagementAgent().isHttpServiceRunning());
+
-  
-  public synchronized void start(GemFireCacheImpl cache){
-    if (!this.running 
-        && this.config.getHttpServicePort() != 0 
+
+  public synchronized void start(GemFireCacheImpl cache) {
+    if (!this.running && this.config.getHttpServicePort() != 0
-        
-        //create region to hold query information (queryId, queryString). Added for the developer REST APIs
+
+        // create region to hold query information (queryId, queryString). Added
+        // for the developer REST APIs
-        
-      } catch (RuntimeException e){
+
+      } catch (RuntimeException e) {
-      
+
-  
-  public synchronized void stop(){
+
+  public synchronized void stop() {
-  
+
-  
-  private String getGemFireAPIWarLocation(final String gemfireHome) {
-    assert !StringUtils.isBlank(gemfireHome) : "The GEMFIRE environment variable must be set!";
-    if (new File(gemfireHome + "/tools/Extensions/gemfire-api" + GEMFIRE_VERSION + ".war").isFile()) {
-      return gemfireHome + "/tools/Extensions/gemfire-api" + GEMFIRE_VERSION + ".war";
-    }
-    else if (new File(gemfireHome + "/lib/gemfire-api" + GEMFIRE_VERSION + ".war").isFile()) {
-      return gemfireHome + "/lib/gemfire-api" + GEMFIRE_VERSION + ".war";
-    }
-    else {
-      return null;
-    }
-  }
-  
+  private AgentUtil agentUtil = new AgentUtil(GEMFIRE_VERSION);
+
-  
-  private boolean isWebApplicationAvailable(final String warFileLocation) {
-    return !StringUtils.isBlank(warFileLocation);
-  }
-  
-  //Start HTTP service in embedded mode
+
+  // Start HTTP service in embedded mode
-    //TODO: add a check that will make sure that we start HTTP service on non-manager data node
+    // TODO: add a check that will make sure that we start HTTP service on
+    // non-manager data node
-      
-    String gemfireHome = System.getenv("GEMFIRE");
-    
-    // Check for empty variable. if empty, then log message and exit HTTP server startup
-    if (StringUtils.isBlank(gemfireHome)) {
-      String gemfire = System.getProperty("gemfire.home");
-      logger.info("Reading gemfire.home System Property -> {}", gemfire);
-      if (StringUtils.isBlank(gemfire)) {
-        logger.info("GEMFIRE environment variable not set; HTTP service will not start.");
-        return;
-      } else {
-        gemfireHome = gemfire;
-      }
-    }
-      
+
-    final String gemfireAPIWar =  getGemFireAPIWarLocation(gemfireHome);
-      
-    if(gemfireAPIWar == null){
-      logger.info("Unable to find GemFire Developer REST API WAR file; the Developer REST API for GemFire will not be exported and accessible.");
+    final String gemfireAPIWar = agentUtil.getGemFireWebApiWarLocation();
+    if (gemfireAPIWar == null) {
+      logger
+          .info("Unable to find GemFire Developer REST API WAR file; the Developer REST API for GemFire will not be exported and accessible.");
-      
+
-        logger.warn("Detected presence of catalina system properties. HTTP service will not be started. To enable the GemFire developer REST API, please deploy the gemfire-web.war file in your application server."); 
-      }
-      else if (isWebApplicationAvailable(gemfireAPIWar)) {
-          
+        logger
+            .warn("Detected presence of catalina system properties. HTTP service will not be started. To enable the GemFire developer REST API, please deploy the gemfire-web.war file in your application server.");
+      } else if (agentUtil.isWebApplicationAvailable(gemfireAPIWar)) {
+
-            this.config.getHttpServiceSSLRequireAuthentication(), 
-            this.config.getHttpServiceSSLProtocols(),
-            this.config.getHttpServiceSSLCiphers(), 
-            this.config.getHttpServiceSSLProperties()
-            );
-          
+            this.config.getHttpServiceSSLRequireAuthentication(),
+            this.config.getHttpServiceSSLProtocols(), this.config.getHttpServiceSSLCiphers(),
+            this.config.getHttpServiceSSLProperties());
+
-        
+
-              ((ServerConnector)this.httpServer.getConnectors()[0]).getPort(), bindAddress);
+              ((ServerConnector) this.httpServer.getConnectors()[0]).getPort(), bindAddress);
-    }catch (Exception e) {
-      stopHttpService();//Jetty needs to be stopped even if it has failed to start. Some of the threads are left behind even if server.start() fails due to an exception
-      throw new RuntimeException("HTTP service failed to start due to "+e.getMessage());
+    } catch (Exception e) {
+      stopHttpService();// Jetty needs to be stopped even if it has failed to
+                        // start. Some of the threads are left behind even if
+                        // server.start() fails due to an exception
+      throw new RuntimeException("HTTP service failed to start due to " + e.getMessage());
-  
+
-          logger.error("Failed to properly release resources held by the HTTP service: {}", ignore.getMessage(), ignore);
+          logger.error("Failed to properly release resources held by the HTTP service: {}",
+              ignore.getMessage(), ignore);
-   * In developer REST APIs, this region will be used to store the queryId and queryString as a key and value respectively.
+   * In developer REST APIs, this region will be used to store the queryId and
+   * queryString as a key and value respectively.
-  public static void createParameterizedQueryRegion(){
+  public static void createParameterizedQueryRegion() {
-      GemFireCacheImpl cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();
+      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
-        //cache.getCacheConfig().setPdxReadSerialized(true);
+        // cache.getCacheConfig().setPdxReadSerialized(true);
-        
+
-      }else {
+      } else {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-        logger.debug("Error creating __ParameterizedQueries__ Region with cause {}",e.getMessage(), e);
+        logger.debug("Error creating __ParameterizedQueries__ Region with cause {}",
+            e.getMessage(), e);
-}
+}

INS23 INS83 INS43 INS59 UPD66 UPD66 INS66 UPD42 MOV42 INS42 INS14 UPD43 MOV43 INS42 MOV43 UPD66 INS66 UPD42 UPD42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL6 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL41 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43