GEODE-4187: Use AtomicReference for missingColocatedRegionLogger

* Use AtomicReference for PartitionedRegion missingColocatedRegionLogger
* Make PR methods that use missingColocatedRegionLogger more thread-safe
* Add no-arg flavor of CancelCriterion.checkCancelInProgress()

+import static java.util.Objects.requireNonNull;
+import java.util.concurrent.atomic.AtomicReference;
-  private ColocationLogger missingColocatedRegionLogger;
+  private final AtomicReference<ColocationLogger> missingColocatedRegionLogger =
+      new AtomicReference<>();
-    if (missingColocatedRegionLogger != null) {
-      missingColocatedRegionLogger.stop();
+    ColocationLogger colocationLogger = missingColocatedRegionLogger.getAndSet(null);
+    if (colocationLogger != null) {
+      colocationLogger.stop();
-    missingColocatedRegionLogger = null;
-    if (missingColocatedRegionLogger == null) {
-      missingColocatedRegionLogger = colocationLoggerFactory.startColocationLogger(this);
-    }
-    missingColocatedRegionLogger.addMissingChildRegion(childName);
+    getOrSetMissingColocatedRegionLogger().addMissingChildRegion(childName);
-    if (missingColocatedRegionLogger == null) {
-      missingColocatedRegionLogger = colocationLoggerFactory.startColocationLogger(this);
+    getOrSetMissingColocatedRegionLogger().addMissingChildRegions(childRegion);
+  }
+
+  /**
+   * Returns existing ColocationLogger or creates and sets a new instance if one does not yet exist.
+   * Spins to ensure that if another thread sets ColocationLogger, we return that one instead of
+   * setting another instance. Checks CancelCriterion during spin and either returns an instance or
+   * throws NullPointerException. The only way to exist the loop is with an instance or by throwing
+   * CancelException if the Cache closes.
+   */
+  private ColocationLogger getOrSetMissingColocatedRegionLogger() {
+    ColocationLogger colocationLogger = missingColocatedRegionLogger.get();
+    while (colocationLogger == null) {
+      colocationLogger = colocationLoggerFactory.startColocationLogger(this);
+      if (!missingColocatedRegionLogger.compareAndSet(null, colocationLogger)) {
+        colocationLogger = missingColocatedRegionLogger.get();
+      }
+      getCancelCriterion().checkCancelInProgress();
-    missingColocatedRegionLogger.addMissingChildRegions(childRegion);
+    requireNonNull(colocationLogger);
+    return colocationLogger;
-    ColocationLogger regionLogger = missingColocatedRegionLogger;
-    if (regionLogger != null) {
-      return regionLogger.updateAndGetMissingChildRegions();
+    ColocationLogger colocationLogger = missingColocatedRegionLogger.get();
+    if (colocationLogger != null) {
+      return colocationLogger.updateAndGetMissingChildRegions();

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS74 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS29 UPD83 INS43 UPD42 INS43 MOV43 INS14 INS60 MOV21 MOV21 INS65 INS42 INS60 INS61 INS21 INS41 INS42 INS74 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS66 MOV43 INS59 INS27 INS8 INS32 INS42 INS43 INS43 INS42 INS42 INS32 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 INS42 INS32 UPD42 MOV42 MOV33 MOV21 INS25 MOV21 INS42 INS42 INS42 UPD42 INS32 UPD42 INS42 INS42 INS42 INS33 INS42 UPD42 MOV42 INS42 INS42 INS38 MOV8 INS42 INS42 UPD42 UPD42 INS32 INS21 INS32 UPD42 UPD42 INS42 INS42 INS33 INS42 INS7 UPD42 MOV42 INS42 INS32 INS42 INS42 DEL42 DEL33 DEL7 DEL21 DEL42 DEL52 DEL32 DEL7 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL27 DEL25 DEL42