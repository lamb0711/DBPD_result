GEODE-6986: Implement UnrestrictedMethodAuthorizer (#4105)

* GEODE-6986: Implement UnrestrictedMethodAuthorizer

- Made the class final, immutable and thread safe.
- Added comprehensive javadocs to the class and its methods.
- Added several unit tests for the class and all public methods.
- Improved javadocs for 'RestrictedMethodAuthorizer' and
  'MethodInvocationAuthorizer'.
- Fixed 'RestrictedMethodAuthorizer.isAllowedGeodeMethod()' to allow
  the execution of 'toString' and 'equals' on Geode objects.
- Removed 'getNanos' from the accepted methods for 'java.lang.Date' in
  'RestrictedMethodAuthorizer' (the method belong to
  'java.sql.Timestamp' instead).
-import org.apache.geode.cache.query.internal.AttributeDescriptor;
-import org.apache.geode.cache.query.internal.MethodDispatch;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.Region;
- * Implementations of this interface must be thread-safe: multiple threads might be authorizing
- * several method invocations using the same instance at the same time.
- * <p/>
+ * There are mainly four security risks when allowing users to execute arbitrary methods in OQL,
+ * which should be addressed by implementations of this interface:
+ * <p>
+ * <ul>
+ * <li>{@code Java Reflection}: do anything through {@link Object#getClass()} or similar.
+ * <li>{@code Cache Modification}: execute {@link Cache} operations (close, get regions, etc.).
+ * <li>{@code Region Modification}: execute {@link Region} operations (destroy, invalidate, etc.).
+ * <li>{@code Region Entry Modification}: execute in-place modifications on the region entries.
+ * </ul>
+ * </p>
- * @see org.apache.geode.cache.query.internal.MethodDispatch
- * @see org.apache.geode.cache.query.internal.AttributeDescriptor
+ * Implementations of this interface should be thread-safe: multiple threads might be authorizing
+ * several method invocations using the same instance at the same time.
-   * <b>Implementation Note</b>: both the {@link MethodDispatch} and {@link AttributeDescriptor}
-   * classes will remember whether the method invocation is already authorized, so that
-   * {@code authorize} will be called once in the lifetime of a Geode member for every new method
-   * seen while traversing the objects.
-   * Nevertheless, the implementation should be lighting fast as it will be called by the OQL engine
-   * in runtime during the query execution.
+   * <b>Implementation Note</b>: the query engine will remember whether the method invocation has
+   * been already authorized or not for the current query context, so this method will be called
+   * once in the lifetime of a query for every new method seen while traversing the objects.
+   * Nevertheless, the implementation should be lighting fast as it will be called by the
+   * OQL engine in runtime during the query execution.

UPD40 UPD40 INS65 MOV66 MOV66 MOV65 MOV66 MOV66 MOV65 MOV66 MOV66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 UPD66 MOV66 UPD66 MOV66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS68 INS66 INS42 INS66 INS42 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 DEL65 DEL40 DEL65 DEL40 DEL65 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66