GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.awaitility.Awaitility;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.test.dunit.RMIException;
- * A rule to help you start locators and servers inside of a
+ * A rule to help you start locators and servers or clients inside of a
- * by the DUnit framework.
+ * by the DUnit framework. Using this rule will eliminate the need to extends
+ * JUnit4DistributedTestCase when writing a Dunit test
+    if (memberStarter == null || !(memberStarter instanceof LocatorStarterRule)) {
+      return null;
+    }
+    if (memberStarter == null || !(memberStarter instanceof ServerStarterRule)) {
+      return null;
+    }
-      // stop all the clientsVM before stop all the memberVM
-      occupiedVMs.values().forEach(x -> x.stopVMIfNotLocator(true));
-      occupiedVMs.values().forEach(x -> x.stopVM(true));
+      // stop all the members in the order of clients, servers and locators
+      List<VMProvider> vms = new ArrayList<>();
+      vms.addAll(
+          occupiedVMs.values().stream().filter(x -> x.isClient()).collect(Collectors.toSet()));
+      vms.addAll(
+          occupiedVMs.values().stream().filter(x -> x.isServer()).collect(Collectors.toSet()));
+      vms.addAll(
+          occupiedVMs.values().stream().filter(x -> x.isLocator()).collect(Collectors.toSet()));
+      vms.forEach(x -> x.stopMember(true));
-  public void stopVM(int index) {
-    stopVM(index, true);
+  /**
+   * gracefully stop the member inside this vm
+   *
+   * @param index vm index
+   */
+  public void stopMember(int index) {
+    stopMember(index, true);
-  public void stopVM(int index, boolean cleanWorkingDir) {
+  /**
+   * gracefully stop the member inside this vm
+   */
+  public void stopMember(int index, boolean cleanWorkingDir) {
-    member.stopVM(cleanWorkingDir);
+    member.stopMember(cleanWorkingDir);
+  }
+
+  /**
+   * this forces a disconnect of the distributed system of the member.
+   * The member will automatically try to reconnect after 5 seconds.
+   *
+   * will throw a ClassCastException if this method is called on a client VM.
+   */
+  public void forceDisconnectMember(int index) {
+    MemberVM member = getMember(index);
+    if (member == null)
+      return;
+    member.forceDisconnectMember();
+  }
+
+  /**
+   * this crashes the VM hosting the member/client. It removes the VM from the occupied VM list
+   * so that we can ignore it at cleanup.
+   */
+  public void crashVM(int index) {
+    VMProvider member = occupiedVMs.remove(index);
+    member.invokeAsync(() -> {
+      if (InternalDistributedSystem.shutdownHook != null) {
+        Runtime.getRuntime().removeShutdownHook(InternalDistributedSystem.shutdownHook);
+      }
+      System.exit(1);
+    });
+
+    // wait till member is not reachable anymore.
+    Awaitility.await().until(() -> {
+      try {
+        member.invoke(() -> {
+        });
+      } catch (RMIException e) {
+        return true;
+      }
+      return false;
+    });
+
+    // delete the lingering files under this vm
+    Arrays.stream(member.getVM().getWorkingDirectory().listFiles())
+        .forEach(FileUtils::deleteQuietly);
+
+    member.getVM().bounce();

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 UPD42 INS29 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 INS66 INS25 INS25 INS65 INS65 INS65 INS65 INS39 INS42 INS60 INS25 INS21 INS65 INS39 INS42 INS60 INS21 INS21 INS21 INS21 INS27 INS8 INS27 INS8 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS27 INS41 INS32 INS66 INS66 INS43 INS59 INS32 INS32 INS32 INS32 INS27 INS38 INS41 INS27 INS38 INS41 INS60 INS21 INS21 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS32 INS42 INS86 INS32 INS42 INS90 INS32 INS42 INS42 INS33 INS36 INS33 INS42 INS33 INS36 INS33 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS62 INS62 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS25 INS21 INS54 INS41 INS32 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS74 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS59 INS27 INS8 INS32 INS8 INS12 INS9 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 UPD42 MOV42 MOV86 INS42 INS42 INS42 UPD42 INS40 INS33 INS21 INS42 INS42 INS34 INS21 INS44 INS8 INS42 INS42 INS42 MOV32 INS42 MOV59 INS32 MOV32 INS42 MOV59 INS32 INS32 INS42 INS59 INS32 INS32 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS40 INS42 INS42 INS86 INS42 INS9 INS42 INS42 INS8 DEL9 DEL32