Merge branch 'develop' into feature/GEODE-3109

-import org.apache.geode.cache.CacheFactory;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import javax.management.ObjectName;
+
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import org.apache.geode.management.internal.cli.functions.ContunuousQueryFunction;
-import org.apache.geode.management.internal.cli.functions.ContunuousQueryFunction.ClientInfo;
+import org.apache.geode.management.internal.cli.functions.ContinuousQueryFunction;
+import org.apache.geode.management.internal.cli.functions.ContinuousQueryFunction.ClientInfo;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-import org.springframework.shell.core.CommandMarker;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import javax.management.ObjectName;
-    Result result = null;
+    Result result;
-      Map<String, List<String>> clientServerMap = new HashMap<String, List<String>>();
+      Map<String, List<String>> clientServerMap = new HashMap<>();
-        for (String clietName : listOfClient) {
+        for (String clientName : listOfClient) {
-          if (clientServerMap.containsKey(clietName)) {
-            List<String> listServers = clientServerMap.get(clietName);
+          if (clientServerMap.containsKey(clientName)) {
+            List<String> listServers = clientServerMap.get(clientName);
-            List<String> listServer = new ArrayList<String>();
+            List<String> listServer = new ArrayList<>();
-            clientServerMap.put(clietName, listServer);
+            clientServerMap.put(clientName, listServer);
-      Iterator<Entry<String, List<String>>> it = clientServerMap.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry<String, List<String>> pairs = (Map.Entry<String, List<String>>) it.next();
-        String client = (String) pairs.getKey();
-        List<String> servers = (List<String>) pairs.getValue();
+      for (Entry<String, List<String>> pairs : clientServerMap.entrySet()) {
+        String client = pairs.getKey();
+        List<String> servers = pairs.getValue();
-    Result result = null;
+    Result result;
-            new ArrayList<String>(Arrays.asList((String[]) serverMbean.getClientIds()));
+            new ArrayList<>(Arrays.asList((String[]) serverMbean.getClientIds()));
-      List<String> primaryServers = new ArrayList<String>();
-      List<String> secondaryServers = new ArrayList<String>();
+      List<String> primaryServers = new ArrayList<>();
+      List<String> secondaryServers = new ArrayList<>();
-        ContunuousQueryFunction contunuousQueryFunction = new ContunuousQueryFunction();
-        FunctionService.registerFunction(contunuousQueryFunction);
+        ContinuousQueryFunction continuousQueryFunction = new ContinuousQueryFunction();
+        FunctionService.registerFunction(continuousQueryFunction);
-            .executeFunction(contunuousQueryFunction, clientId, dsMembers).getResult();
-        for (int i = 0; i < resultList.size(); i++) {
+            .executeFunction(continuousQueryFunction, clientId, dsMembers).getResult();
+        for (Object aResultList : resultList) {
-            Object object = resultList.get(i);
+            Object object = aResultList;
-          .info("Error in decribe clients. stack trace" + CliUtil.stackTraceAsString(e));
+          .info("Error in describe clients. stack trace" + CliUtil.stackTraceAsString(e));
-    LogWrapper.getInstance().info("decribe client result " + result);
+    LogWrapper.getInstance().info("describe client result " + result);
-        Iterator<Entry<String, String>> it = poolStats.entrySet().iterator();
-        while (it.hasNext()) {
-          Entry<String, String> entry = it.next();
+        for (Entry<String, String> entry : poolStats.entrySet()) {
-          LogWrapper.getInstance().info("decribe client clientHealthStatus min conn="
+          LogWrapper.getInstance().info("describe client clientHealthStatus min conn="
-          LogWrapper.getInstance().info("decribe client clientHealthStatus max conn ="
+          LogWrapper.getInstance().info("describe client clientHealthStatus max conn ="
-          LogWrapper.getInstance().info("decribe client clientHealthStatus redundancy ="
+          LogWrapper.getInstance().info("describe client clientHealthStatus redundancy ="
-          LogWrapper.getInstance().info("decribe client clientHealthStatus CQs ="
+          LogWrapper.getInstance().info("describe client clientHealthStatus CQs ="
-          poolStatsResultTable.accumulate(CliStrings.DESCRIBE_CLIENT_REDUDANCY,
+          poolStatsResultTable.accumulate(CliStrings.DESCRIBE_CLIENT_REDUNDANCY,

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 MOV8 MOV60 MOV70 MOV60 MOV70 MOV60 MOV27 INS70 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 INS25 INS44 MOV32 MOV8 UPD45 MOV27 MOV8 MOV74 INS42 UPD42 UPD42 INS70 INS70 UPD74 MOV43 MOV74 UPD74 MOV74 UPD74 UPD43 MOV74 INS44 INS42 MOV8 INS44 MOV32 INS8 UPD42 MOV32 MOV32 UPD42 UPD42 UPD42 INS43 INS42 UPD45 MOV74 INS42 MOV60 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS74 UPD43 MOV74 INS42 UPD42 MOV43 UPD42 UPD40 MOV74 MOV74 UPD42 UPD45 UPD45 UPD45 UPD45 UPD42 INS42 UPD42 UPD74 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL33 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL25 DEL8