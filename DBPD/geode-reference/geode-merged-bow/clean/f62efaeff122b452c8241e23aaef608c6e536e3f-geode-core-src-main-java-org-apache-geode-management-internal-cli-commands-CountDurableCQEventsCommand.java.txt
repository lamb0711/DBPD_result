Merge remote-tracking branch 'upstream/develop' into develop

+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.domain.SubscriptionQueueSizeResult;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class CountDurableCQEventsCommand extends InternalGfshCommand {
-  DurableClientCommandsResultBuilder builder = new DurableClientCommandsResultBuilder();
+public class CountDurableCQEventsCommand extends GfshCommand {
-  public Result countDurableCqEvents(
+  public ResultModel countDurableCqEvents(
-    Result result;
-    try {
-      Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
+    Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+
+    String[] params = new String[2];
+    params[0] = durableClientId;
+    params[1] = cqName;
+    final ResultCollector<?, ?> rc =
+        executeFunction(new GetSubscriptionQueueSizeFunction(), params, targetMembers);
+    final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
+
+    ResultModel result = new ResultModel();
+    TabularResultModel table = result.addTable("subscription-queue-size");
+    for (CliFunctionResult oneResult : funcResults) {
+      table.accumulate("Member", oneResult.getMemberIdOrName());
+      table.accumulate("Status", oneResult.getStatus());
+      table.accumulate("Queue Size", oneResult.getStatusMessage());
+
+      if (!oneResult.isSuccessful()) {
+        result.setStatus(Result.Status.ERROR);
-
-      String[] params = new String[2];
-      params[0] = durableClientId;
-      params[1] = cqName;
-      final ResultCollector<?, ?> rc =
-          CliUtil.executeFunction(new GetSubscriptionQueueSizeFunction(), params, targetMembers);
-      final List<SubscriptionQueueSizeResult> funcResults =
-          (List<SubscriptionQueueSizeResult>) rc.getResult();
-
-      String queueSizeColumnName;
-
-      if (cqName != null && !cqName.isEmpty()) {
-        queueSizeColumnName = CliStrings
-            .format(CliStrings.COUNT_DURABLE_CQ_EVENTS__SUBSCRIPTION__QUEUE__SIZE__CLIENT, cqName);
-      } else {
-        queueSizeColumnName = CliStrings.format(
-            CliStrings.COUNT_DURABLE_CQ_EVENTS__SUBSCRIPTION__QUEUE__SIZE__CLIENT, durableClientId);
-      }
-      result = builder.buildTableResultForQueueSize(funcResults, queueSizeColumnName);
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+

MOV26 INS26 UPD40 UPD40 UPD40 INS40 UPD43 UPD42 UPD43 MOV8 UPD42 INS60 INS70 MOV41 UPD74 MOV74 UPD43 INS43 INS59 INS44 INS42 INS8 UPD43 UPD42 UPD42 INS14 INS42 INS42 INS32 INS43 INS42 MOV21 MOV21 MOV21 INS25 UPD42 UPD74 MOV74 INS43 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS32 INS32 INS32 INS38 INS8 UPD42 UPD42 UPD43 INS42 INS42 UPD42 MOV42 INS45 INS32 INS42 UPD42 MOV42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS32 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS40 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL40 DEL32 DEL7 DEL42 DEL40 DEL32 DEL7 DEL42 DEL32 DEL7 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL8 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8