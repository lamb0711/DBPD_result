Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A MembershipManager is responsible for reporting a MemberView, as well as
- * having explicit protocol for leaving or joining the distributed system.<p>
+ * A MembershipManager is responsible for reporting a MemberView, as well as having explicit
+ * protocol for leaving or joining the distributed system.
+ * <p>
- * Note that it is imperative to send a new manager a postConnect message
- * after instantiation.
+ * Note that it is imperative to send a new manager a postConnect message after instantiation.
-  /** this must be sent to the manager after instantiation to allow
-   *  it to perform post-connection chores
+  /**
+   * this must be sent to the manager after instantiation to allow it to perform post-connection
+   * chores
-  
+
-   * Fetch the current view of memberships in th distributed system,
-   * as an ordered list.
+   * Fetch the current view of memberships in th distributed system, as an ordered list.
+
-   * Returns an object that is used to sync access to the view.
-   * While this lock is held the view can't change.
+   * Returns an object that is used to sync access to the view. While this lock is held the view
+   * can't change.
+   * 
-   * Sanity checking, esp. for elder processing.  Does the existing
-   * member (still) exist in our view?
+   * Sanity checking, esp. for elder processing. Does the existing member (still) exist in our view?
-  
+
-   * Is this manager still connected?  If it has not been initialized, this
-   * method will return true; otherwise it indicates whether the connection is
-   * stil valid
+   * Is this manager still connected? If it has not been initialized, this method will return true;
+   * otherwise it indicates whether the connection is stil valid
+   * 
-  
-  
+
+
-  
+
-  
+
-  
+
-  
+
-   * Stall the current thread until we are ready to
-   * accept view events
+   * Stall the current thread until we are ready to accept view events
-  
+
-  
-  
+
+
-   * @param destinations list of members to send the message to.  A list of
-   * length 1 with <em>null</em> as a single element broadcasts to all members
-   * of the system.
+   * @param destinations list of members to send the message to. A list of length 1 with
+   *        <em>null</em> as a single element broadcasts to all members of the system.
-   * @return list of members who did not receive the message.  If 
-   * {@link DistributionMessage#ALL_RECIPIENTS} is given as thelist of recipients,
-   * this return list is null (empty).  Otherwise, this list is all of those
-   * recipients that did not receive the message because they departed the
-   * distributed system.
-   * @throws NotSerializableException
-   *         If content cannot be serialized
+   * @return list of members who did not receive the message. If
+   *         {@link DistributionMessage#ALL_RECIPIENTS} is given as thelist of recipients, this
+   *         return list is null (empty). Otherwise, this list is all of those recipients that did
+   *         not receive the message because they departed the distributed system.
+   * @throws NotSerializableException If content cannot be serialized
-  public Set send(
-      InternalDistributedMember[] destinations,
-      DistributionMessage content,
-      DMStats stats)
-  throws NotSerializableException;
-  
+  public Set send(InternalDistributedMember[] destinations, DistributionMessage content,
+      DMStats stats) throws NotSerializableException;
+
-   * Indicates to the membership manager that the system is shutting down.
-   * Typically speaking, this means that new connection attempts are to be
-   * ignored and disconnect failures are to be (more) tolerated.
+   * Indicates to the membership manager that the system is shutting down. Typically speaking, this
+   * means that new connection attempts are to be ignored and disconnect failures are to be (more)
+   * tolerated.
-  
+
+   * 
-   * Returns a serializable map of communications state for
-   * use in state stabilization.
-   * @param member
-   *    the member whose message state is to be captured
-   * @param includeMulticast
-   *    whether the state of the mcast messaging should be included
-   * @return the current state of the communication channels between this
-   *    process and the given distributed member
+   * Returns a serializable map of communications state for use in state stabilization.
+   * 
+   * @param member the member whose message state is to be captured
+   * @param includeMulticast whether the state of the mcast messaging should be included
+   * @return the current state of the communication channels between this process and the given
+   *         distributed member
-   * Waits for the given communications to reach the associated
-   * state
-   * @param member
-   *    The member whose messaging state we're waiting for
-   * @param state
-   *    The message states to wait for.  This should come from getMessageStates
-   * @throws InterruptedException
-   *    Thrown if the thread is interrupted
+   * Waits for the given communications to reach the associated state
+   * 
+   * @param member The member whose messaging state we're waiting for
+   * @param state The message states to wait for. This should come from getMessageStates
+   * @throws InterruptedException Thrown if the thread is interrupted
-  public void waitForMessageState(DistributedMember member, Map state)
-    throws InterruptedException;
-  
+  public void waitForMessageState(DistributedMember member, Map state) throws InterruptedException;
+
-   * Wait for the given member to not be in the membership view and for all direct-channel
-   * receivers for this member to be closed.
-   * @param mbr  the member
+   * Wait for the given member to not be in the membership view and for all direct-channel receivers
+   * for this member to be closed.
+   * 
+   * @param mbr the member
-   * @throws TimeoutException  if we wait too long for the member to go away
+   * @throws TimeoutException if we wait too long for the member to go away
-  public boolean waitForDeparture(DistributedMember mbr) throws TimeoutException, InterruptedException;
-  
+  public boolean waitForDeparture(DistributedMember mbr)
+      throws TimeoutException, InterruptedException;
+
-   * Returns true if remoteId is an existing member, otherwise waits till
-   * timeout. Returns false if remoteId is not confirmed to be a member.
+   * Returns true if remoteId is an existing member, otherwise waits till timeout. Returns false if
+   * remoteId is not confirmed to be a member.
-   * Release critical resources, avoiding any possibility
-   * of deadlock
+   * Release critical resources, avoiding any possibility of deadlock
-  
+
-  
+
-   * like memberExists() this checks to see if the given ID is in the current
-   * membership view.  If it is in the view though we try to connect to its
-   * failure-detection port to see if it's still around.  If we can't then
-   * suspect processing is initiated on the member with the given reason string.
+   * like memberExists() this checks to see if the given ID is in the current membership view. If it
+   * is in the view though we try to connect to its failure-detection port to see if it's still
+   * around. If we can't then suspect processing is initiated on the member with the given reason
+   * string.
+   * 
-  
+
-   * Initiate SUSPECT processing for the given members.  This may be done if
-   * the members have not been responsive.  If they fail SUSPECT processing,
-   * they will be removed from membership.
+   * Initiate SUSPECT processing for the given members. This may be done if the members have not
+   * been responsive. If they fail SUSPECT processing, they will be removed from membership.
-  
+
-   * Initiate SUSPECT processing for the given member.  This may be done if
-   * the member has not been responsive.  If it fails SUSPECT processing,
-   * it will be removed from membership.
+   * Initiate SUSPECT processing for the given member. This may be done if the member has not been
+   * responsive. If it fails SUSPECT processing, it will be removed from membership.
-  
+
-   * if the manager initiated shutdown, this will return the cause
-   * of abnormal termination of membership management in this member
+   * if the manager initiated shutdown, this will return the cause of abnormal termination of
+   * membership management in this member
+   * 
-  
+
+   * 
-  
+
-  
+
-  
-  /** if a StartupMessage is going to reject a new member, this should be used
-   * to make sure we don't keep that member on as a "surprise member"
+
+  /**
+   * if a StartupMessage is going to reject a new member, this should be used to make sure we don't
+   * keep that member on as a "surprise member"
+   * 
-  
+
-  
+
-   * Forces use of UDP for communications in the current thread.  UDP is
-   * connectionless, so no tcp/ip connections will be created or used for
-   * messaging until this setting is released with releaseUDPMessagingForCurrentThread.
+   * Forces use of UDP for communications in the current thread. UDP is connectionless, so no tcp/ip
+   * connections will be created or used for messaging until this setting is released with
+   * releaseUDPMessagingForCurrentThread.
-  
+
-   * Releases use of UDP for all communications in the current thread,
-   * as established by forceUDPMessagingForCurrentThread.
+   * Releases use of UDP for all communications in the current thread, as established by
+   * forceUDPMessagingForCurrentThread.
-  
-  
+
+
-   * After a forced-disconnect this method should be used once before
-   * attempting to use quorumCheckForAutoReconnect().
+   * After a forced-disconnect this method should be used once before attempting to use
+   * quorumCheckForAutoReconnect().
+   * 
-  
-  
+
+
-   * Frees resources used for quorum checks during auto-reconnect
-   * polling.  Invoke this method when you're all done using
-   * the quorum checker.
+   * Frees resources used for quorum checks during auto-reconnect polling. Invoke this method when
+   * you're all done using the quorum checker.
+   * 
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66