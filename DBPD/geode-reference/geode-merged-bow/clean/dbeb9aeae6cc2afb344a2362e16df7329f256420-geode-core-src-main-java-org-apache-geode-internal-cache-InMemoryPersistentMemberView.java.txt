Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private Map<PersistentMemberID, PersistentMemberState> members= new ConcurrentHashMap<PersistentMemberID, PersistentMemberState>();
+  private Map<PersistentMemberID, PersistentMemberState> members =
+      new ConcurrentHashMap<PersistentMemberID, PersistentMemberState>();
-    for(Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
-      if(entry.getValue() == PersistentMemberState.OFFLINE) {
+    for (Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
+      if (entry.getValue() == PersistentMemberState.OFFLINE) {
+
-    for(Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
-      if(entry.getValue() == PersistentMemberState.EQUAL) {
+    for (Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
+      if (entry.getValue() == PersistentMemberState.EQUAL) {
-    for(Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
-      if(entry.getValue() == PersistentMemberState.ONLINE) {
+    for (Map.Entry<PersistentMemberID, PersistentMemberState> entry : members.entrySet()) {
+      if (entry.getValue() == PersistentMemberState.ONLINE) {
-  
+
-  public void setInitialized() {
-  }
-  
+  public void setInitialized() {}
+
-  public void setInitializing(PersistentMemberID newId) {
-  }
+  public void setInitializing(PersistentMemberID newId) {}
-    //don't care
+    // don't care
-    //don't care
+    // don't care
+
-    //don't care
+    // don't care
-  
-  public void finishPendingDestroy() {
-  }
+
+  public void finishPendingDestroy() {}
+
-    //do nothing,  don't need to persist this information.
+    // do nothing, don't need to persist this information.

