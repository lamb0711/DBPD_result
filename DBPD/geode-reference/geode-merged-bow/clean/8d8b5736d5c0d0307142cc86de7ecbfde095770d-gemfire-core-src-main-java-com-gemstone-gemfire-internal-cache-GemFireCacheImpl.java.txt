Merge remote-tracking branch 'origin/develop' into wan_cq_donation

+  
+  /* Used for testing, retain the old instance in the test and re-set the value when test completes*/
+  public static GemFireCacheImpl setInstanceForTests(GemFireCacheImpl cache) {
+    GemFireCacheImpl oldInstance = instance;
+	  instance = cache;
+	  return oldInstance;
+  }
-  public static GemFireCacheImpl create(boolean isClient, PoolFactory pf, DistributedSystem system, CacheConfig cacheConfig) {
-    return new GemFireCacheImpl(true, pf, system, cacheConfig).init();
+  public static GemFireCacheImpl createClient(DistributedSystem system, PoolFactory pf, CacheConfig cacheConfig) {
+    return basicCreate(system, true, cacheConfig, pf, true);
-    return new GemFireCacheImpl(false, null, system, cacheConfig).init();
+    return basicCreate(system, true, cacheConfig, null, false);
-  public static Cache create(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig)
+
+  public static Cache create(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig) {
+    return basicCreate(system, existingOk, cacheConfig, null, false);
+  }
+
+  private static GemFireCacheImpl basicCreate(DistributedSystem system, boolean existingOk, CacheConfig cacheConfig, PoolFactory pf, boolean isClient)
+    try {
+      GemFireCacheImpl instance = checkExistingCache(existingOk, cacheConfig);
+      if (instance == null) {
+        instance = new GemFireCacheImpl(isClient, pf, system, cacheConfig);
+        instance.initialize();
+      }
+      return instance;
+    } catch (CacheXmlException | IllegalArgumentException e) {
+      logger.error(e.getLocalizedMessage());
+      throw e;
+    } catch (Error | RuntimeException e) {
+      logger.error(e);
+      throw e;
+    }
+  }
+
+  private static GemFireCacheImpl checkExistingCache(boolean existingOk, CacheConfig cacheConfig) {
-        return instance;
-    return create(system, cacheConfig);
+    return instance;
-  
+
-  private GemFireCacheImpl init() {
+  private void initialize() {
-    return this;
+      logCacheXML(url, cacheXmlDescription);
-      if (cacheXmlDescription == null) {
-        StringBuilder sb = new StringBuilder();
-        try {
-          final String EOLN = System.getProperty("line.separator");
-          BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
-          String l = br.readLine();
-          while (l != null) {
-            if (!l.isEmpty()) {
-              sb.append(EOLN).append(l);
-            }
-            l = br.readLine();
-          }
-          br.close();
-        } catch (IOException ignore) {
-        }
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GemFireCache_CACHE_INITIALIZED_USING__0__1, new Object[] {url.toString(), sb.toString()}));
-      } else {
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GemFireCache_CACHE_INITIALIZED_USING__0__1, new Object[] {"generated description from old cache", cacheXmlDescription}));
-      }
-      String exceptionMsg = LocalizedStrings.GemFireCache_WHILE_OPENING_CACHE_XML_0_THE_FOLLOWING_ERROR_OCCURRED_1
-          .toLocalizedString(new Object[] { url.toString(), ex });
-      logger.error(exceptionMsg);
-      throw new CacheXmlException(exceptionMsg);
+      throw new CacheXmlException(LocalizedStrings.GemFireCache_WHILE_OPENING_CACHE_XML_0_THE_FOLLOWING_ERROR_OCCURRED_1
+          .toLocalizedString(new Object[] { url.toString(), ex }));
-      String exceptionMsg = LocalizedStrings.GemFireCache_WHILE_READING_CACHE_XML_0_1
-          .toLocalizedString(new Object[] { url, ex.getMessage() });
-      logger.error(exceptionMsg);
-      CacheXmlException newEx = new CacheXmlException(exceptionMsg);
+      CacheXmlException newEx = new CacheXmlException(LocalizedStrings.GemFireCache_WHILE_READING_CACHE_XML_0_1
+          .toLocalizedString(new Object[] { url, ex.getMessage() }));
+  private void logCacheXML(URL url, String cacheXmlDescription) {
+    if (cacheXmlDescription == null) {
+      StringBuilder sb = new StringBuilder();
+      try {
+        final String EOLN = System.getProperty("line.separator");
+        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
+        String l = br.readLine();
+        while (l != null) {
+          if (!l.isEmpty()) {
+            sb.append(EOLN).append(l);
+          }
+          l = br.readLine();
+        }
+        br.close();
+      } catch (IOException ignore) {
+      }
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.GemFireCache_INITIALIZING_CACHE_USING__0__1, new Object[]{url.toString(), sb.toString()}));
+    } else {
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.GemFireCache_INITIALIZING_CACHE_USING__0__1, new Object[] {"generated description from old cache", cacheXmlDescription}));
+    }
+  }
+

INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 MOV43 UPD42 MOV44 INS44 INS44 MOV83 MOV83 INS43 MOV42 INS44 MOV44 INS8 INS83 INS83 MOV43 INS42 MOV44 INS44 INS44 INS8 INS83 INS83 MOV43 INS42 MOV44 INS44 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 UPD83 MOV43 UPD42 INS39 UPD42 INS83 INS39 INS42 INS44 INS44 MOV8 INS42 INS43 INS42 INS60 INS21 INS41 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS41 INS39 INS42 INS43 INS42 INS41 INS39 INS42 INS54 MOV41 INS43 INS42 MOV43 INS42 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS12 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 UPD42 INS9 INS42 INS42 INS9 INS42 INS33 INS9 INS42 INS42 INS42 INS42 INS33 INS9 INS60 INS25 INS41 INS44 INS8 INS44 INS8 INS21 MOV60 MOV25 MOV21 MOV54 MOV43 INS59 INS27 INS8 INS42 INS84 INS42 INS21 INS53 INS84 INS42 INS21 INS53 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS43 INS43 INS32 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 MOV32 INS42 INS14 UPD40 UPD40 INS42 INS14 INS42 UPD42 MOV42 INS42 INS42 MOV43 MOV32 MOV43 INS42 INS42 MOV42 MOV42 DEL9 DEL42 DEL42 DEL42 DEL14 DEL9 DEL33 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL41 DEL52 DEL41 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL14 DEL59 DEL60