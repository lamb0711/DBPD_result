GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicReference;
+
-    return assertSuccessful(transport
-        .submitMessage(config, CommandType.CREATE, ClusterManagementRealizationResult.class));
+    ClusterManagementRealizationResult result = transport.submitMessage(config, CommandType.CREATE);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(transport.submitMessage(config, CommandType.DELETE,
-        ClusterManagementRealizationResult.class));
+    ClusterManagementRealizationResult result = transport.submitMessage(config, CommandType.DELETE);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(
-        transport.submitMessageForList(config, ClusterManagementListResult.class));
+    ClusterManagementListResult<T, R> result = transport.submitMessageForList(config);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(
-        transport.submitMessageForGet(config, ClusterManagementGetResult.class));
+    ClusterManagementGetResult<T, R> result = transport.submitMessageForGet(config);
+    assertSuccessful(result);
+    return result;
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> start(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> start(
-    return transport.submitMessageForStart(op);
+    ClusterManagementOperationResult<A, V> result = transport.submitMessageForStart(op);
+    assertSuccessful(result);
+    return result;
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> list(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> get(
+      A opType, String opId) {
+    ClusterManagementOperationResult<A, V> result =
+        transport.submitMessageForGetOperation(opType, opId);
+    assertSuccessful(result);
+    return result;
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> CompletableFuture<ClusterManagementOperationResult<A, V>> getFuture(
+      A opType, String opId) {
+    AtomicReference<CompletableFuture<ClusterManagementOperationResult<A, V>>> futureAtomicReference =
+        new AtomicReference<>();
+    futureAtomicReference.set(CompletableFuture.supplyAsync(() -> {
+      while (futureAtomicReference.get() == null || !futureAtomicReference.get().isCancelled()) {
+        ClusterManagementOperationResult<A, V> result = this.get(opType, opId);
+        if (result.getOperationEnd() != null) {
+          return result;
+        }
+        try {
+          Thread.sleep(1000L);
+        } catch (InterruptedException e) {
+          throw new ClusterManagementException(result, e);
+        }
+      }
+      return null;
+    }));
+    return futureAtomicReference.get();
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<A, V> list(
-    return transport.submitMessageForListOperation(opType,
-        ClusterManagementListOperationsResult.class);
+    ClusterManagementListOperationsResult<A, V> result =
+        transport.submitMessageForListOperation(opType);
+    assertSuccessful(result);
+    return result;
-  private <T extends ClusterManagementResult> T assertSuccessful(T result) {
+  private void assertSuccessful(ClusterManagementResult result) {
-    return result;

INS26 INS26 INS40 INS40 INS31 INS31 UPD74 MOV78 INS83 MOV73 MOV73 INS74 INS42 MOV44 INS44 INS8 INS78 INS83 INS73 INS73 INS74 INS42 INS44 INS44 INS8 INS78 INS73 INS73 UPD74 INS44 INS39 INS60 INS21 INS41 INS60 INS21 INS41 INS60 INS21 INS41 INS60 INS21 INS41 INS43 INS43 INS60 INS21 INS43 INS43 INS43 INS43 INS42 INS60 INS21 MOV41 INS42 INS42 INS74 INS42 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS60 INS21 INS41 INS42 INS42 INS74 INS42 INS43 MOV43 INS43 INS43 INS42 INS60 INS21 INS41 MOV43 MOV43 INS59 INS32 INS42 MOV43 INS59 INS32 INS42 INS74 INS59 INS32 INS42 INS74 INS59 INS32 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS74 INS59 INS32 INS32 INS43 INS43 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS43 INS43 MOV43 INS42 MOV32 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV43 INS43 INS43 INS42 INS32 INS42 INS42 MOV42 MOV42 MOV42 MOV40 MOV42 MOV42 MOV42 MOV40 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS74 INS42 INS42 INS86 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS43 INS43 INS43 INS43 INS8 INS42 INS42 INS42 INS42 INS61 INS41 INS27 INS8 INS33 INS27 INS38 INS60 INS25 INS54 INS32 INS33 INS32 INS74 INS59 INS27 INS8 INS8 INS12 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS33 INS41 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS34 INS42 INS14 INS43 INS42 INS42 INS42 DEL42 DEL57 DEL32 DEL32 DEL41 DEL42 DEL57 DEL32 DEL32 DEL41 DEL42 DEL42 DEL43 DEL57 DEL32 DEL32 DEL41 DEL42 DEL42 DEL43 DEL57 DEL32 DEL32 DEL41 DEL57 DEL32 DEL41 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43