Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  
+  private final boolean isOffHeap;
-    this( megabytes, sizerImpl, EvictionAction.DEFAULT_EVICTION_ACTION ,region);
+    this( megabytes, sizerImpl, EvictionAction.DEFAULT_EVICTION_ACTION ,region, false);
+   * @param isOffHeap true if the region that owns this cc is stored off heap
-                                   EvictionAction evictionAction,Region region )  {
+                                   EvictionAction evictionAction,Region region, boolean isOffHeap)  {
+    this.isOffHeap = isOffHeap;
-        int size = MemLRUCapacityController.this.getPerEntryOverhead();
-        int keySize = sizeof(key);
+        int size = 0;
+        int keySize = 0;
+        if (!MemLRUCapacityController.this.isOffHeap) {
+          size += MemLRUCapacityController.this.getPerEntryOverhead();
+          keySize = sizeof(key);
+        }
-//         com.gemstone.gemfire.internal.cache.GemFireCache.getInstance().getLogger().info("DEBUG MemLRUCC: overhead=" + size
+//         com.gemstone.gemfire.internal.cache.GemFireCacheImpl.getInstance().getLogger().info("DEBUG MemLRUCC: overhead=" + size

INS23 INS83 INS83 INS39 INS59 INS44 INS42 INS65 INS39 INS42 INS21 INS9 INS42 INS66 INS7 INS22 INS42 INS52 INS42 INS25 INS38 INS8 INS34 INS34 INS22 INS21 INS21 INS52 INS42 INS7 INS7 INS42 INS42 MOV32 INS42 MOV32