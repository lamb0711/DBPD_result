Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides protocol for getting the deserialized value from a potentially
- * encapsulated object.
+ * Provides protocol for getting the deserialized value from a potentially encapsulated object.
-public interface CachedDeserializable extends Sizeable
-{
-  
+public interface CachedDeserializable extends Sizeable {
+
+   * 
-   * Gets a deserialized value for reading.
-   * Differs from getDeserializedValue by leaving the value in a form
-   * that will optimize future calls.
+   * Gets a deserialized value for reading. Differs from getDeserializedValue by leaving the value
+   * in a form that will optimize future calls.
+   * 
-  
+
-   * Gets the string form of the cached object. If an exception
-   * is thrown while converting to a string then the exception
-   * will be caught and put in the returned string.
+   * Gets the string form of the cached object. If an exception is thrown while converting to a
+   * string then the exception will be caught and put in the returned string.
+   * 
-  
+
-   * Always makes a copy of the deserialized object and returns it.
-   * Leaves the value in a form that will optimize future calls.
+   * Always makes a copy of the deserialized object and returns it. Leaves the value in a form that
+   * will optimize future calls.
+   * 
-  
+
+   * 
-   * Return current value regardless of whether it is serialized or
-   * deserialized: if it was serialized than it is a byte[], otherwise
-   * it is not a byte[].
+   * Return current value regardless of whether it is serialized or deserialized: if it was
+   * serialized than it is a byte[], otherwise it is not a byte[].
-   * Write out the value contained in this instance to the stream 
-   * as a byte array (versus serialized form).  Anything reading from the
-   * stream will have to perform two operations to reconstitute the value:
-   *  1) read the byte array off the stream {@link DataSerializer#readByteArray(java.io.DataInput)}
-   *  2) de-serialize the byte array using {@link BlobHelper#deserializeBlob(byte[])}
-   * into an object.  The idea is to delay de-serialization until the last possible moment
-   * to provide better parallelism
+   * Write out the value contained in this instance to the stream as a byte array (versus serialized
+   * form). Anything reading from the stream will have to perform two operations to reconstitute the
+   * value: 1) read the byte array off the stream
+   * {@link DataSerializer#readByteArray(java.io.DataInput)} 2) de-serialize the byte array using
+   * {@link BlobHelper#deserializeBlob(byte[])} into an object. The idea is to delay
+   * de-serialization until the last possible moment to provide better parallelism
+   * 
-  
+
-   * Sets the serialized value of the Object in the wrapper along with
-   * appropriate user bit & valid length. If the Object is already in a
-   * serialized form then the byte array is set in the wrapper along with
-   * boolean reusable as false
+   * Sets the serialized value of the Object in the wrapper along with appropriate user bit & valid
+   * length. If the Object is already in a serialized form then the byte array is set in the wrapper
+   * along with boolean reusable as false
-   * @param wrapper object of type BytesAndBitsForCompactor 
+   * @param wrapper object of type BytesAndBitsForCompactor
-  
+
-   * Return the size of the value, not including the overhead
-   * added by this wrapper class.
+   * Return the size of the value, not including the overhead added by this wrapper class.
+
-   * Returns true if the value stored in this memory chunk is a serialized object. Returns false if it is a byte array.
+   * Returns true if the value stored in this memory chunk is a serialized object. Returns false if
+   * it is a byte array.
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66