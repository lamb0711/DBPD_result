Merge remote-tracking branch 'origin/develop' into feature/GEODE-11

-import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.cache.query.IndexExistsException;
+import com.gemstone.gemfire.cache.query.IndexInvalidException;
-  private final LogWriter logger;
-    this.logger = this.cache.getLogger();
-  public void createRemoteRegionLocally(ByteArrayWrapper key, RedisDataType type) {
+  public void createRemoteRegionReferenceLocally(ByteArrayWrapper key, RedisDataType type) {
-        // If we cannot get the lock then this remote even may have been initialized
+        // If we cannot get the lock then this remote event may have been initialized
-        // likely we will deadlock just to do the same task, this even can be ignored
+        // likely we will deadlock just to do the same task. This event can be ignored
-          if (type == RedisDataType.REDIS_LIST)
+          // If r is null, this implies that we are after a create/destroy
+          // simply ignore. Calls to getRegion or getOrCreate will work correctly
+          if (r == null)
+            return;
+
+          if (type == RedisDataType.REDIS_LIST) {
-          else if (type == RedisDataType.REDIS_SORTEDSET)
-            doInitializeSortedSet(key, r);
+          } else if (type == RedisDataType.REDIS_SORTEDSET) {
+            try {
+              doInitializeSortedSet(key, r);
+            } catch (RegionNotFoundException | IndexInvalidException e) {
+              //ignore
+            }
+          }
-                if (type == RedisDataType.REDIS_LIST)
+                if (type == RedisDataType.REDIS_LIST) {
-                else if (type == RedisDataType.REDIS_SORTEDSET)
-                  doInitializeSortedSet(key, r);
+                } else if (type == RedisDataType.REDIS_SORTEDSET) {
+                  try {
+                    doInitializeSortedSet(key, r);
+                  } catch (RegionNotFoundException | IndexInvalidException e) {
+                    concurrentCreateDestroyException = e;
+                  }
+                }
-  private void doInitializeSortedSet(ByteArrayWrapper key, Region<?, ?> r) {
+  private void doInitializeSortedSet(ByteArrayWrapper key, Region<?, ?> r) throws RegionNotFoundException, IndexInvalidException {
-    } catch (Exception e) {
-      if (!(e instanceof IndexNameConflictException)) {
-        if (logger.errorEnabled()) {
-          logger.error(e);
-        }
-      }
+    } catch (IndexNameConflictException | IndexExistsException | UnsupportedOperationException e) {
+      // ignore, these indexes already exist or unsupported but make sure prepared queries are made
-        if (this.logger.errorEnabled()) {
-          this.logger.error("Region creation failure- "+ err);
-        }
-    */
+     */

MOV26 INS26 UPD40 INS40 UPD42 INS43 INS43 INS42 INS42 INS8 INS84 MOV43 INS43 INS43 UPD42 MOV42 INS42 INS25 INS27 INS41 INS8 INS42 INS33 MOV21 INS8 INS54 INS8 INS12 MOV21 INS44 INS8 INS84 INS42 INS43 INS43 INS8 INS42 INS42 MOV21 INS8 INS54 INS8 INS12 MOV21 INS44 INS8 INS84 INS42 INS21 INS43 INS43 INS7 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL43 DEL42 DEL62 DEL36 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25