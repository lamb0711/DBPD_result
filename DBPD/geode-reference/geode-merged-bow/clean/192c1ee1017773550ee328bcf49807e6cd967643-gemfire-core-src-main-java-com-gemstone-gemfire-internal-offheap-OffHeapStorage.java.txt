GEODE-814: unit test DisconnectingOutOfOfHeapMemoryListener

Unit test has been added.

InternalDistributedSystem is no longer final so that unit tests can mock it.
The reason it was made final was because in an older version of the product
this class did license checking and we wanted to prevent it from being subclassed.
But now that it no longer does a license check the final was not needed.

Also the code coverage of OffHeapStorage was improved.

-import com.gemstone.gemfire.OutOfOffHeapMemoryException;
-  
-  static class DisconnectingOutOfOffHeapMemoryListener implements OutOfOffHeapMemoryListener {
-    private final Object lock = new Object();
-    private InternalDistributedSystem ids;
-    
-    DisconnectingOutOfOffHeapMemoryListener(InternalDistributedSystem ids) {
-      this.ids = ids;
-    }
-    
-    public void close() {
-      synchronized (lock) {
-        this.ids = null; // set null to prevent memory leak after closure!
-      }
-    }
-    
-    @Override
-    public void outOfOffHeapMemory(final OutOfOffHeapMemoryException cause) {
-      synchronized (lock) {
-        if (this.ids == null) {
-          return;
-        }
-        if (Boolean.getBoolean(STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY)) {
-          return;
-        }
-        
-        final InternalDistributedSystem dsToDisconnect = this.ids;
-        this.ids = null; // set null to prevent memory leak after closure!
-        
-        if (dsToDisconnect.getDistributionManager().getRootCause() == null) {
-          dsToDisconnect.getDistributionManager().setRootCause(cause);
-        }
-          
-        Runnable runnable = new Runnable() {
-          @Override
-          public void run() {
-            dsToDisconnect.getLogWriter().info("OffHeapStorage about to invoke disconnect on " + dsToDisconnect);
-            dsToDisconnect.disconnect(cause.getMessage(), cause, false);
-          }
-        };
-        
-        // invoking disconnect is async because caller may be a DM pool thread which will block until DM shutdown times out
-
-        //LogWriterImpl.LoggingThreadGroup group = LogWriterImpl.createThreadGroup("MemScale Threads", ids.getLogWriterI18n());
-        String name = this.getClass().getSimpleName()+"@"+this.hashCode()+" Handle OutOfOffHeapMemoryException Thread";
-        //Thread thread = new Thread(group, runnable, name);
-        Thread thread = new Thread(runnable, name);
-        thread.setDaemon(true);
-        thread.start();
-      }
-    }
-  }

DEL40 DEL26 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL32 DEL42 DEL32 DEL45 DEL52 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL55