Merge branch 'release/1.0.0-incubating.M3'

- * @since version 7.0.Beta 2012-09-23
+ * @since GemFire version 7.0.Beta 2012-09-23
-  private JMXConnector getJMXConnection() {
+  private JmxManagerInfo getManagerInfoFromLocator(Repository repository) {
+
+    try {
+      String locatorHost = repository.getJmxHost();
+      int locatorPort = Integer.parseInt(repository.getJmxPort());
+
+      if (LOGGER.infoEnabled()) {
+        LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : " + locatorHost + " & "
+            + resourceBundle.getString("LOG_MSG_PORT") + " : " + locatorPort);
+      }
+
+      InetAddress inetAddr = InetAddress.getByName(locatorHost);
+
+      if ((inetAddr instanceof Inet4Address) || (inetAddr instanceof Inet6Address)) {
+
+        if (inetAddr instanceof Inet4Address) {
+          if (LOGGER.infoEnabled()) {
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS") + " - " + inetAddr.toString());
+          }
+        } else {
+          if (LOGGER.infoEnabled()) {
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS") + " - " + inetAddr.toString());
+          }
+        }
+
+        JmxManagerInfo jmxManagerInfo = JmxManagerFinder.askLocatorForJmxManager(inetAddr, locatorPort, 15000,
+            repository.isUseSSLLocator());
+
+        if (jmxManagerInfo.port == 0) {
+          if (LOGGER.infoEnabled()) {
+            LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_COULD_NOT_FIND_MANAGER"));
+          }
+        }
+        return jmxManagerInfo;
+      } else {
+        // Locator has Invalid locator Address
+        if (LOGGER.infoEnabled()) {
+          LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_BAD_ADDRESS"));
+        }
+        cluster.setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
+        // update message to display on UI
+        cluster.setConnectionErrorMsg(resourceBundle
+            .getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
+        return null;
+      }
+    } catch (IOException e) {
+      StringWriter swBuffer = new StringWriter();
+      PrintWriter prtWriter = new PrintWriter(swBuffer);
+      e.printStackTrace(prtWriter);
+      LOGGER.severe("Exception Details : " + swBuffer.toString() + "\n");
+    }
+    return null;
+  }
+
+  /**
+   * Default connection is Pulse which uses configured userName and password
+   */
+  public JMXConnector getJMXConnection() {
+    return getJMXConnection(true);
+  }
+
+  /**
+   * Get connection for given userName and password. This is used for DataBrowser
+   * queries which has to be fired using credentials provided at pulse login page
+   */
+  public JMXConnector getJMXConnection(final boolean registerURL) {
-
-        String locatorHost = repository.getJmxHost();
-        int locatorPort = Integer.parseInt(repository.getJmxPort());
-
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_HOST") + " : "
-              + locatorHost + " & " + resourceBundle.getString("LOG_MSG_PORT")
-              + " : " + locatorPort);
-        }
-
-        InetAddress inetAddr = InetAddress.getByName(locatorHost);
-
-        if ((inetAddr instanceof Inet4Address)
-            || (inetAddr instanceof Inet6Address)) {
-
-          if (inetAddr instanceof Inet4Address) {
-            // Locator has IPv4 Address
-            if (LOGGER.infoEnabled()) {
-              LOGGER.info(resourceBundle
-                  .getString("LOG_MSG_LOCATOR_IPV4_ADDRESS")
-                  + " - "
-                  + inetAddr.toString());
-            }
-          } else {
-            // Locator has IPv6 Address
-            if (LOGGER.infoEnabled()) {
-              LOGGER.info(resourceBundle
-                  .getString("LOG_MSG_LOCATOR_IPV6_ADDRESS")
-                  + " - "
-                  + inetAddr.toString());
-            }
-          }
-
-          JmxManagerInfo jmxManagerInfo = JmxManagerFinder
-              .askLocatorForJmxManager(inetAddr, locatorPort, 15000,
-                  repository.isUseSSLLocator());
+        JmxManagerInfo jmxManagerInfo = getManagerInfoFromLocator(repository);
-
-        } /*
-           * else if (inetAddr instanceof Inet6Address) { // Locator has IPv6
-           * Address if(LOGGER.infoEnabled()){
-           * LOGGER.info(resourceBundle.getString
-           * ("LOG_MSG_LOCATOR_IPV6_ADDRESS")); } // update message to display
-           * on UI cluster.setConnectionErrorMsg(resourceBundle.getString(
-           * "LOG_MSG_JMX_CONNECTION_IPv6_ADDRESS"));
-           *
-           * }
-           */else {
-          // Locator has Invalid locator Address
-          if (LOGGER.infoEnabled()) {
-            LOGGER
-                .info(resourceBundle.getString("LOG_MSG_LOCATOR_BAD_ADDRESS"));
-          }
-          // update message to display on UI
-          cluster.setConnectionErrorMsg(resourceBundle
-              .getString("LOG_MSG_JMX_CONNECTION_BAD_ADDRESS"));
-
-        }
-
-
-        // String[] creds = {"controlRole", "R&D"};
-
-
+        LOGGER.info("Connecting to jmxURL : " + jmxSerURL);
-        registerPulseUrlToManager(connection);
+        if(registerURL)
+          registerPulseUrlToManager(connection);
-        // update message to display on UI
-      // write errors
-
-          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)){ 
-        	client.setClientCQCount((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)); 
-          } 
-          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)){ 
-            client.setSubscriptionEnabled((Boolean) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)); 
-          } 
+          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT)){
+        	client.setClientCQCount((Integer) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_CLIENTCQCOUNT));
+          }
+          if (cmd.containsKey(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED)){
+            client.setSubscriptionEnabled((Boolean) cmd.get(PulseConstants.COMPOSITE_DATA_KEY_SUBSCRIPTIONENABLED));
+          }
-    } 
+    }
-  // /**
-  // * function used for creating member key with a combination
-  // * of member id and and member name
-  // * in key we are replacing ":" with "-" for both member id and name
-  // * @param id
-  // * @param name
-  // * @return
-  // */
-  // private String getMemberNameOrId(String id, String name){
-  // String key;
-  // if (id != null) {
-  // id = id.replace(":", "-");
-  // }
-  // if (name != null) {
-  // name = name.replace(":", "-");
-  // }
-  // key = id+name;
-  // return key;
-  // }
+    if (object == null) {
+      return Float.valueOf(0.0f);
+    }
+
-        LOGGER.info("Exception Occured: " + e.getMessage());
+        LOGGER.info("Exception occurred: " + e.getMessage());
+    if (object == null) {
+      return Integer.valueOf(0);
+    }
+
-        LOGGER.info("Exception Occured: " + e.getMessage());
+        LOGGER.info("Exception occurred: " + e.getMessage());
+    if (object == null) {
+      return Long.valueOf(0);
+    }
+
-        LOGGER.info("Exception Occured: " + e.getMessage());
+        LOGGER.info("Exception occurred: " + e.getMessage());
+    if (object == null) {
+      return "";
+    }
+
-        LOGGER.info("Exception Occured: " + e.getMessage());
+        LOGGER.info("Exception occurred: " + e.getMessage());
+    if (object == null) {
+      return Boolean.FALSE;
+    }
+
+    if (object == null) {
+      return Double.valueOf(0);
+    }
+
-        LOGGER.info("Exception Occured: " + e.getMessage());
+        LOGGER.info("Exception occurred: " + e.getMessage());
+      //Following attributes are not present in 9.0
+      //"Members"
+      //"EmptyNodes"
+      //"SystemRegionEntryCount"
+      //"MemberCount"
-     
+
-    } 
+    }
-

INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 UPD83 INS44 UPD66 INS42 INS43 INS42 INS54 INS41 INS65 INS42 INS41 INS65 INS83 INS39 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS42 MOV8 INS12 INS33 INS66 INS32 INS66 INS66 INS27 INS8 INS12 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 MOV12 INS44 INS8 INS42 INS9 INS42 INS33 INS41 INS44 INS8 INS42 INS33 INS41 INS42 INS33 INS41 INS42 INS33 INS41 INS42 INS33 INS41 INS42 INS33 INS41 INS8 INS43 INS42 INS60 INS60 INS21 INS21 MOV8 INS32 INS43 INS42 INS25 MOV41 INS32 INS32 INS45 INS40 INS32 MOV41 MOV25 MOV60 INS25 INS41 INS21 INS41 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS60 INS21 INS25 INS42 INS42 INS34 INS42 INS32 INS8 INS42 INS42 INS34 INS42 INS42 INS34 MOV42 MOV32 INS42 INS42 INS34 INS27 INS8 INS42 INS32 INS33 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS59 INS32 INS42 MOV21 INS42 INS42 INS21 MOV42 INS40 INS34 INS25 INS42 INS42 INS32 INS43 INS43 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS32 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS21 INS45 INS32 UPD45 UPD45 UPD45 UPD45 INS32 INS42 INS42 MOV42 INS42 INS42 INS32 INS42 INS42 INS45 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12