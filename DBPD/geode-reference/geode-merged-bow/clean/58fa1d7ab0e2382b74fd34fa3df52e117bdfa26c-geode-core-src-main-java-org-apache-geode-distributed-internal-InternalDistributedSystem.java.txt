Merge remote-tracking branch 'upstream/develop' into develop

+import java.util.Optional;
-import org.apache.geode.admin.AlertLevel;
+import org.apache.geode.internal.alerting.AlertLevel;
+import org.apache.geode.internal.alerting.AlertMessaging;
+import org.apache.geode.internal.alerting.AlertingService;
+import org.apache.geode.internal.alerting.AlertingSession;
+import org.apache.geode.internal.logging.LogConfig;
+import org.apache.geode.internal.logging.LogConfigListener;
+import org.apache.geode.internal.logging.LogConfigSupplier;
+import org.apache.geode.internal.logging.LogFile;
+import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.log4j.AlertAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
+import org.apache.geode.internal.logging.NullLoggingSession;
+import org.apache.geode.internal.statistics.StatisticsConfig;
-    implements OsStatisticsFactory, StatisticsManager {
+    implements OsStatisticsFactory, StatisticsManager, LogConfigSupplier {
-  // /** The log writer was provided by an external entity */
-  // private boolean externalLogWriterProvided = false;
-  //
-  private LogWriterAppender logWriterAppender = null;
-
-  private LogWriterAppender securityLogWriterAppender = null;
-
+  private final AlertingSession alertingSession;
+  private final AlertingService alertingService;
+
+  private final LoggingSession loggingSession;
+  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
+
+    alertingSession = AlertingSession.create();
+    alertingService = new AlertingService();
+    loggingSession = LoggingSession.create();
-      AlertAppender.getInstance().onConnect(this);
-
-      // LOG: create LogWriterAppender(s) if log-file or security-log-file is specified
-      final boolean hasLogFile =
-          this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));
-      final boolean hasSecurityLogFile = this.config.getSecurityLogFile() != null
-          && !this.config.getSecurityLogFile().equals(new File(""));
-      LogService.configureLoggers(hasLogFile, hasSecurityLogFile);
-      if (hasLogFile || hasSecurityLogFile) {
-
-        // main log file
-        if (hasLogFile) {
-          // if log-file then create logWriterAppender
-          this.logWriterAppender = LogWriterAppenders.getOrCreateAppender(
-              LogWriterAppenders.Identifier.MAIN, this.isLoner, this.config, true);
-        }
-
-        // security log file
-        if (hasSecurityLogFile) {
-          // if security-log-file then create securityLogWriterAppender
-          this.securityLogWriterAppender = LogWriterAppenders.getOrCreateAppender(
-              LogWriterAppenders.Identifier.SECURITY, this.isLoner, this.config, false);
-        } else {
-          // let security route to regular log-file or stdout
-        }
-      }
+      boolean logBanner = !attemptingToReconnect;
+      boolean logConfiguration = !attemptingToReconnect;
+      loggingSession.createSession(this, logBanner, logConfiguration);
-            LogWriterFactory.createLogWriterLogger(this.isLoner, false, this.config, true);
+            LogWriterFactory.createLogWriterLogger(this.config, false);
-            LogWriterFactory.createLogWriterLogger(this.isLoner, true, this.config, false);
+            LogWriterFactory.createLogWriterLogger(this.config, true);
+      loggingSession.startSession();
+
-        this.sampler = new GemFireStatSampler(this);
+        Optional<LogFile> logFile = loggingSession.getLogFile();
+        if (logFile.isPresent()) {
+          sampler = new GemFireStatSampler(this, logFile.get());
+        } else {
+          sampler = new GemFireStatSampler(this);
+        }
-      if (this.logWriterAppender != null) {
-        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.MAIN);
-      }
-      if (this.securityLogWriterAppender != null) {
-        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.SECURITY);
-      }
+      alertingSession.createSession(new AlertMessaging(this));
+      alertingSession.startSession();
-      this.startedLocator = InternalLocator.createLocator(locId.getPort(), null, this.logWriter,
-          this.securityLogWriter, locId.getHost().getAddress(), locId.getHostnameForClients(),
-          this.originalConfig.toProperties(), false);
+      this.startedLocator =
+          InternalLocator.createLocator(locId.getPort(), NullLoggingSession.create(), null,
+              logWriter, securityLogWriter, locId.getHost().getAddress(),
+              locId.getHostnameForClients(), originalConfig.toProperties(), false);
-          if (this.logWriterAppender != null) {
-            LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-          }
-          if (this.securityLogWriterAppender != null) {
-            // LOG:SECURITY: old code did NOT invoke this
-            LogWriterAppenders.stop(LogWriterAppenders.Identifier.SECURITY);
-          }
+          alertingSession.stopSession();
-        AlertAppender.getInstance().shuttingDown();
-
-        if (this.logWriterAppender != null) {
-          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
-        }
-        if (this.securityLogWriterAppender != null) {
-          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.SECURITY);
-        }
+        loggingSession.stopSession();
+          if (!this.attemptingToReconnect) {
+            loggingSession.shutdown();
+          }
+          alertingSession.shutdown();
+  public AlertingService getAlertingService() {
+    return alertingService;
+  }
+
+  @Override
+  public LogConfig getLogConfig() {
+    return config;
+  }
+
+  @Override
+  public StatisticsConfig getStatisticsConfig() {
+    return config;
+  }
+
+  @Override
+  public void addLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.add(logConfigListener);
+  }
+
+  @Override
+  public void removeLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.remove(logConfigListener);
+  }
+
+  public Optional<LogFile> getLogFile() {
+    return loggingSession.getLogFile();
+  }
+
+  void logConfigChanged() {
+    for (LogConfigListener listener : logConfigListeners) {
+      listener.configChanged();
+    }
+  }
+
-    return hasAlertListenerFor(member, AlertLevel.WARNING.getSeverity());
+    return hasAlertListenerFor(member, AlertLevel.WARNING.intLevel());
-
-    return AlertAppender.getInstance().hasAlertListener(member, severity);
+    return alertingService.hasAlertListener(member, AlertLevel.find(severity));

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV23 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 UPD43 INS83 INS74 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS39 INS42 INS8 INS42 INS42 INS42 INS42 UPD42 UPD42 INS43 INS43 UPD42 INS14 INS21 INS21 INS21 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 INS43 INS43 INS41 INS70 INS42 UPD42 MOV42 INS74 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS44 INS42 INS8 INS43 INS42 INS32 INS42 INS14 INS42 INS32 MOV21 MOV21 MOV21 MOV21 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 UPD42 MOV42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS8 INS38 INS42 INS32 UPD42 INS42 INS42 MOV42 INS42 UPD42 INS38 INS42 INS38 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 MOV21 UPD42 UPD42 INS14 UPD42 UPD42 MOV25 INS22 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 MOV8 INS43 INS52 INS32 INS42 INS42 MOV38 MOV52 UPD42 MOV42 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 UPD42 INS25 INS21 MOV22 MOV22 INS42 INS42 INS42 INS42 INS7 MOV38 INS8 INS32 INS42 INS14 INS42 UPD42 UPD42 INS21 INS42 INS42 INS43 INS52 INS32 INS32 INS42 INS42 INS42 INS42 INS42 DEL33 DEL43 DEL33 DEL42 DEL42 DEL32 DEL42 DEL52 DEL32 DEL21 DEL83 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL43 DEL45 DEL14 DEL32 DEL38 DEL27 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL43 DEL45 DEL14 DEL32 DEL38 DEL27 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL8 DEL25 DEL42 DEL8 DEL8 DEL25 DEL8 DEL25 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL9 DEL32 DEL7 DEL52 DEL42 DEL22 DEL40 DEL40 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL40 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL22 DEL33 DEL27 DEL40 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32