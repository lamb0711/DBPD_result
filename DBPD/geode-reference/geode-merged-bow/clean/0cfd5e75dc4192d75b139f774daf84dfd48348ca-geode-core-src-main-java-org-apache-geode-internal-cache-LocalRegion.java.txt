GEODE-6761: Reduce garbage in LocalRegion.initializationThread (#3750)

* Refactor static ints to enum type.
* Cleanup method names.
* Replace null case with default value.
* Added unit test

Co-authored-by: Kamilla Aslami <kaslami@pivotal.io>
Co-authored-by: Jacob Barrett <jbarrett@pivotal.io>


+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.AFTER_INITIAL_IMAGE;
+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.ANY_INIT;
+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.BEFORE_INITIAL_IMAGE;
-  public static final int AFTER_INITIAL_IMAGE = 0;
-
-  public static final int BEFORE_INITIAL_IMAGE = 1;
-
-  public static final int ANY_INIT = 2;
+  public enum InitializationLevel {
+    AFTER_INITIAL_IMAGE, BEFORE_INITIAL_IMAGE, ANY_INIT
+  }
-  private static final ThreadLocal<Integer> initializationThread = new ThreadLocal<>();
+  private static final ThreadLocal<InitializationLevel> initializationThread =
+      ThreadLocal.withInitial(() -> AFTER_INITIAL_IMAGE);
-    int initLevel = 0;
+    // Release the initialization latch for index creation.
+    final InitializationLevel initLevel = setThreadInitLevelRequirement(ANY_INIT);
-      // Release the initialization latch for index creation.
-      initLevel = setThreadInitLevelRequirement(ANY_INIT);
-  public static int setThreadInitLevelRequirement(int level) {
-    int oldLevel = threadInitLevelRequirement();
-    if (level == AFTER_INITIAL_IMAGE) {
-      // if setting to default, just reset
-      initializationThread.remove();
-    } else {
+  public static InitializationLevel setThreadInitLevelRequirement(InitializationLevel level) {
+    final InitializationLevel oldLevel = getThreadInitLevelRequirement();
+    if (level != oldLevel) {
-  static int threadInitLevelRequirement() {
-    Integer initLevel = initializationThread.get();
-    if (initLevel == null) {
-      return AFTER_INITIAL_IMAGE;
-    }
-    return initLevel;
+  static InitializationLevel getThreadInitLevelRequirement() {
+    return initializationThread.get();
-    switch (threadInitLevelRequirement()) {
+    switch (getThreadInitLevelRequirement()) {
-            "Unexpected threadInitLevelRequirement");
+            "Unexpected getThreadInitLevelRequirement");
-    switch (threadInitLevelRequirement()) {
+    switch (getThreadInitLevelRequirement()) {
-            "Unexpected threadInitLevelRequirement");
+            "Unexpected getThreadInitLevelRequirement");
-    if (region == null && threadInitLevelRequirement() != ANY_INIT) {
+    if (region == null && getThreadInitLevelRequirement() != ANY_INIT) {
-    final int oldLevel = setThreadInitLevelRequirement(ANY_INIT);
+    final InitializationLevel oldLevel = setThreadInitLevelRequirement(ANY_INIT);

INS26 INS26 INS26 INS40 INS40 INS40 INS71 INS83 INS42 INS72 INS72 INS72 UPD74 INS43 INS43 INS42 INS8 INS42 INS42 INS42 UPD43 INS32 INS42 INS43 UPD42 MOV42 MOV41 UPD42 INS42 INS42 INS86 INS83 INS43 INS42 INS83 INS43 UPD27 MOV32 INS43 INS42 INS42 MOV32 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD45 UPD45 UPD42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL43 DEL74 DEL14 DEL39 DEL34 DEL42 DEL7 DEL21 DEL39 DEL39 DEL39 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL39 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL39