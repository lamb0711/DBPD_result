GEODE-1587: Replaced AtomicInteger with AtomicIntegerFieldUpdater

        * Use of AtomicIntegerFieldUpdater decereased the memory overhead per entry during index creation

	This closes #191

-import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-  
+
+  private static final AtomicIntegerFieldUpdater<RegionEntryToValuesMap> atomicUpdater =  AtomicIntegerFieldUpdater
+    .newUpdater(RegionEntryToValuesMap.class, "numValues");
+
-      ExecutionContext context) {   
+      ExecutionContext context) {
-    private AtomicInteger numValues = new AtomicInteger(0);
+    volatile int numValues;
-      numValues.incrementAndGet();
+      atomicUpdater.incrementAndGet(this);
-        numValues.addAndGet(values.size());
+        atomicUpdater.addAndGet(this,values.size());
-      numValues.addAndGet(values.size());
+      atomicUpdater.addAndGet(this,values.size());
-          numValues.decrementAndGet();
+          atomicUpdater.decrementAndGet(this);
-        this.numValues.decrementAndGet();
+        atomicUpdater.decrementAndGet(this);
-            numValues.addAndGet((retVal instanceof Collection) ?
+        atomicUpdater.addAndGet(this,(retVal instanceof Collection) ?
-      return this.numValues.get();
+      return atomicUpdater.get(this);
-      this.numValues.set(0);
+      atomicUpdater.set(this,0);
-      this.numValues.addAndGet(((values instanceof Collection) ? ((Collection) values)
+      atomicUpdater.addAndGet(this,((values instanceof Collection) ? ((Collection) values)

UPD40 INS23 INS83 INS83 INS83 INS74 INS59 INS43 INS43 INS42 INS32 UPD83 INS39 INS42 INS42 INS42 INS42 INS57 INS45 INS43 INS42 UPD42 INS52 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 UPD42 INS52 INS42 INS52 UPD42 INS52 UPD42 INS52 DEL42 DEL43 DEL42 DEL43 DEL34 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22