Merge branch 'release/1.0.0-incubating.M1'

- * =========================================================================
- * Copyright Copyright (c) 2000-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * $Id: AbstractIndex.java,v 1.2 2005/02/09 10:05:47 vaibhav Exp $
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.concurrent.atomic.AtomicInteger;
+import com.gemstone.gemfire.cache.query.internal.Bag;
-import com.gemstone.gemfire.cache.query.internal.LinkedStructSet;
-import com.gemstone.gemfire.cache.query.internal.ResultsBag;
-import com.gemstone.gemfire.cache.query.internal.StructBag;
+import com.gemstone.gemfire.cache.query.internal.StructFields;
+import com.gemstone.gemfire.internal.offheap.Chunk;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-      CompiledValue iterOp, RuntimeIterator indpndntIr,
+      @Retained CompiledValue iterOp, RuntimeIterator indpndntIr,
-  private void addToResultsBagWithUnionOrIntersection(Collection results,
+  private void addToResultsWithUnionOrIntersection(Collection results,
-  private void addToStructBagWithUnionOrIntersection(Collection results,
+  private void addToStructsWithUnionOrIntersection(Collection results,
-      if( results instanceof StructBag) {
-        ((StructBag)results).addFieldValues(values);
+      if( results instanceof StructFields) {
+        ((StructFields)results).addFieldValues(values);
-        LinkedStructSet lss = (LinkedStructSet)results;
-        StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-        lss.add(structImpl);
+        //The results could be LinkedStructSet or SortedResultsBag or StructSet
+        //LinkedStructSet lss = (LinkedStructSet)results;
+        SelectResults sr = (SelectResults)results;
+        StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+        //lss.add(structImpl);
+        sr.add(structImpl);
-        if(results instanceof StructBag) {
-          int numOcc = ((StructBag)intermediateResults).occurrences(values);
+        if(results instanceof StructFields) {
+          int numOcc = intermediateResults.occurrences(values);
-            ((StructBag)results).addFieldValues(values);
-            ((StructBag)intermediateResults).removeFieldValues(values);
+            ((StructFields)results).addFieldValues(values);
+            ((StructFields)intermediateResults).removeFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( intermediateResults.remove(structImpl)) {
+            sr.add(structImpl);
-        if( results instanceof StructBag) {
-          ((StructBag)results).addFieldValues(values);
+        if( results instanceof StructFields) {
+          ((StructFields)results).addFieldValues(values);
-          LinkedStructSet lss = (LinkedStructSet)results;
-          StructImpl structImpl = new StructImpl( (StructTypeImpl)lss.getCollectionType().getElementType(), values);
-          if( ((LinkedStructSet)intermediateResults).remove(structImpl)) {
-            lss.add(structImpl);
+          // could be LinkedStructSet or SortedResultsBag
+          SelectResults sr = (SelectResults)results;
+          //LinkedStructSet lss = (LinkedStructSet)results;
+          StructImpl structImpl = new StructImpl( (StructTypeImpl)sr.getCollectionType().getElementType(), values);
+          if( ((SelectResults)intermediateResults).remove(structImpl)) {
+            sr.add(structImpl);
-      this.addToResultsBagWithUnionOrIntersection(result, intermediateResults,
+      this.addToResultsWithUnionOrIntersection(result, intermediateResults,
-      if (result instanceof StructBag || result instanceof LinkedStructSet) {
+      //TODO : Asif : Optimize this . This condition looks ugly.
+     /* if (result instanceof StructBag || result instanceof LinkedStructSet
+          || result instanceof LinkedStructBag) {*/
+      boolean isStruct = result instanceof SelectResults 
+          && ((SelectResults)result).getCollectionType().getElementType() != null
+          && ((SelectResults)result).getCollectionType().getElementType().isStructType();
+      if (isStruct) {
-        this.addToStructBagWithUnionOrIntersection(result, intermediateResults,
+        this.addToStructsWithUnionOrIntersection(result, intermediateResults,
-        this.addToResultsBagWithUnionOrIntersection(result,
+        this.addToResultsWithUnionOrIntersection(result,
-  private void removeFromResultsBagWithUnionOrIntersection(Collection results,
+  private void removeFromResultsWithUnionOrIntersection(Collection results,
-        int numOcc = ((ResultsBag)results).occurrences(value);
+        int numOcc = ((SelectResults)results).occurrences(value);
-  private void removeFromStructBagWithUnionOrIntersection(Collection results,
+  private void removeFromStructsWithUnionOrIntersection(Collection results,
-      Object values[])
+      Object values[], ExecutionContext context)
-    if (intermediateResults == null) {
-      ((StructBag)results).removeFieldValues(values);
+    if (intermediateResults == null) {      
+        ((StructFields)results).removeFieldValues(values);      
-        int numOcc = ((StructBag)results).occurrences(values);
+        int numOcc = ((SelectResults)results).occurrences(values);
-          ((StructBag)results).removeFieldValues(values);
-          ((StructBag)intermediateResults).addFieldValues(values);
+            ((StructFields)results).removeFieldValues(values);
+            ((StructFields)intermediateResults).addFieldValues(values);
+          
-      else {
-        ((StructBag)results).removeFieldValues(values);
+      else {        
+        ((StructFields)results).removeFieldValues(values);        
-      this.removeFromResultsBagWithUnionOrIntersection(result,
+      this.removeFromResultsWithUnionOrIntersection(result,
-      if (result instanceof StructBag) {
+      if (result instanceof StructFields) {
-        this.removeFromStructBagWithUnionOrIntersection(result,
-            intermediateResults, isIntersection, values);
+        this.removeFromStructsWithUnionOrIntersection(result,
+            intermediateResults, isIntersection, values, context);
-        this.removeFromResultsBagWithUnionOrIntersection(result,
+        this.removeFromResultsWithUnionOrIntersection(result,
-      ExecutionContext context) {
+      ExecutionContext context) {   
-      if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-        if (result instanceof ResultsBag) {
-          return (((ResultsBag)result).distinctElementsSize() == limit);
-        } else if (result instanceof StructBag) {
-          return (((StructBag)result).distinctElementsSize() == limit);
-        }
+     /* if (!context.isDistinct()) {
+        return ((Bag)result).size() == limit;
-      }
+      }*/
+      return result.size() == limit;
-        Object val = re.getValueInVM(context.getPartitionedRegion()); // OFFHEAP incrc, deserialize, decrc
+        @Released Object val = re.getValueInVM(context.getPartitionedRegion());
+        Chunk valToFree = null;
+        if (val instanceof Chunk) {
+          valToFree = (Chunk)val;
+        }
+        try {
+        } finally {
+          if (valToFree != null) {
+            valToFree.release();
+          }
+        }
-    private volatile int numValues = 0;
+    private AtomicInteger numValues = new AtomicInteger(0);
-      this.numValues++;
+      numValues.incrementAndGet();
-        this.numValues = this.numValues + values.size();
+        numValues.addAndGet(values.size());
-      this.numValues = this.numValues + values.size();
+      numValues.addAndGet(values.size());
-          this.numValues--;
+          numValues.decrementAndGet();
-        this.numValues--;
+        this.numValues.decrementAndGet();
-            this.numValues = (retVal instanceof Collection) ? this.numValues
-                - ((Collection) retVal).size() : this.numValues - 1;
+            numValues.addAndGet((retVal instanceof Collection) ?
+              - ((Collection) retVal).size() : -1 );
-      return this.numValues;
+      return this.numValues.get();
-                    applyProjection(projAttrib, context, result, value,
+                    applyProjection(projAttrib, context, result, val,
-                  applyProjection(projAttrib, context, result, value,
+                  applyProjection(projAttrib, context, result, val,
-        ExecutionContext context) {
+        ExecutionContext context) {     
-        if (((DefaultQuery)context.getQuery()).getSimpleSelect().isDistinct()) {
-          if (result instanceof ResultsBag) {
-            return (((ResultsBag)result).distinctElementsSize() == limit);
-          } else if (result instanceof StructBag) {
-            return (((StructBag)result).distinctElementsSize() == limit);
-          }
+        if (!context.isDistinct()) {
+          return ((Bag)result).size() == limit;
-      this.numValues = 0;
+      this.numValues.set(0);
-      this.numValues += (((values instanceof Collection) ? ((Collection) values)
+      this.numValues.addAndGet(((values instanceof Collection) ? ((Collection) values)

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 UPD40 UPD40 UPD40 INS40 INS40 UPD42 UPD42 UPD42 UPD42 INS44 INS8 INS78 INS43 INS42 INS25 MOV41 INS43 INS42 INS42 MOV27 MOV8 INS42 INS14 INS60 INS43 INS34 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS42 INS27 INS42 INS42 INS42 INS42 INS42 MOV32 MOV22 INS42 MOV22 INS42 INS34 MOV22 INS42 MOV27 UPD43 UPD42 INS42 INS27 UPD42 UPD43 MOV32 MOV42 INS8 INS32 INS32 INS32 INS38 MOV8 UPD42 UPD43 MOV43 INS27 INS32 UPD42 INS42 UPD42 MOV60 INS60 INS25 INS54 INS42 INS42 MOV32 MOV22 INS42 INS42 INS42 MOV16 INS32 UPD42 UPD42 UPD42 UPD43 UPD43 INS62 INS27 INS32 INS42 UPD42 UPD42 UPD43 UPD42 INS42 UPD42 INS78 INS43 INS59 INS62 INS8 MOV8 INS8 INS32 INS38 INS38 MOV42 MOV42 INS27 UPD43 MOV43 UPD42 UPD43 MOV43 UPD42 UPD43 INS42 INS43 INS32 INS33 INS32 INS42 UPD42 INS42 INS42 INS42 INS33 INS42 INS43 INS21 INS25 INS42 INS42 MOV32 INS34 MOV32 MOV42 UPD43 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS36 INS42 UPD43 INS42 INS7 INS27 INS8 UPD42 UPD42 INS42 UPD43 MOV43 UPD43 INS36 INS42 INS11 UPD43 UPD43 UPD42 INS42 INS11 INS42 INS33 INS21 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS11 INS43 INS42 UPD42 UPD42 UPD43 UPD43 INS43 INS42 INS32 UPD43 UPD42 UPD42 INS43 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD43 UPD43 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL27 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL27 DEL36 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL25 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL83 DEL39 DEL34 DEL52 DEL42 DEL22 DEL37 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL7 DEL52 DEL42 DEL22 DEL37 DEL37 DEL52 DEL42 DEL22 DEL27 DEL52 DEL42 DEL22 DEL34 DEL27 DEL52 DEL42 DEL22 DEL7 DEL27 DEL36 DEL42 DEL43 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL27 DEL36 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL25 DEL25 DEL8 DEL34 DEL7 DEL36 DEL7