GEODE-2634: use log4j levels for auto-completion

* change the auto complete to use log4j levels.
* be able to handle both log4j levels and logwriter levels in the commands
* add validation of log level whenever possible for these commands
* Move the conversion between the two to a LogLevel class and add unit tests

-    setLevel(logWriterLeveltoLog4jLevel(logWriterLevel));
+    setLevel(LogLevel.getLog4jLevel(logWriterLevel));
-  /************************************************************
-   * Methods to support backwards compatibility between levels.
-   ************************************************************/
-
-  public static Level logWriterLeveltoLog4jLevel(final int logWriterLevel) {
-    switch (logWriterLevel) {
-      case InternalLogWriter.SEVERE_LEVEL:
-        return Level.FATAL;
-      case InternalLogWriter.ERROR_LEVEL:
-        return Level.ERROR;
-      case InternalLogWriter.WARNING_LEVEL:
-        return Level.WARN;
-      case InternalLogWriter.CONFIG_LEVEL:
-        return Level.INFO;
-      case InternalLogWriter.INFO_LEVEL:
-        return Level.INFO;
-      case InternalLogWriter.FINE_LEVEL:
-        return Level.DEBUG;
-      case InternalLogWriter.FINER_LEVEL:
-        return Level.DEBUG;
-      case InternalLogWriter.FINEST_LEVEL:
-        return Level.TRACE;
-      case InternalLogWriter.ALL_LEVEL:
-        return Level.ALL;
-      case InternalLogWriter.NONE_LEVEL:
-        return Level.OFF;
-    }
-
-    throw new IllegalArgumentException("Unknown LogWriter level [" + logWriterLevel + "].");
-  }
-
-  public static Level logWriterNametoLog4jLevel(String levelName) {
-    if ("all".equalsIgnoreCase(levelName)) {
-      return Level.ALL;
-    }
-    if ("finest".equalsIgnoreCase(levelName)) {
-      return Level.TRACE;
-    }
-    if ("finer".equalsIgnoreCase(levelName)) {
-      return Level.DEBUG;
-    }
-    if ("fine".equalsIgnoreCase(levelName)) {
-      return Level.DEBUG;
-    }
-    if ("config".equalsIgnoreCase(levelName)) {
-      return Level.INFO;
-    }
-    if ("info".equalsIgnoreCase(levelName)) {
-      return Level.INFO;
-    }
-    if ("warning".equalsIgnoreCase(levelName)) {
-      return Level.WARN;
-    }
-    if ("error".equalsIgnoreCase(levelName)) {
-      return Level.ERROR;
-    }
-    if ("severe".equalsIgnoreCase(levelName)) {
-      return Level.FATAL;
-    }
-    if ("none".equalsIgnoreCase(levelName)) {
-      return Level.OFF;
-    }
-
-    throw new IllegalArgumentException("Unknown LogWriter level [" + levelName + "].");
-  }
-
-  public static int log4jLevelToLogWriterLevel(final Level log4jLevel) {
-    if (log4jLevel == Level.FATAL) {
-      return InternalLogWriter.SEVERE_LEVEL;
-    } else if (log4jLevel == Level.ERROR) {
-      return InternalLogWriter.ERROR_LEVEL;
-    } else if (log4jLevel == Level.WARN) {
-      return InternalLogWriter.WARNING_LEVEL;
-    } else if (log4jLevel == Level.INFO) {
-      return InternalLogWriter.INFO_LEVEL;
-    } else if (log4jLevel == Level.DEBUG) {
-      return InternalLogWriter.FINE_LEVEL;
-    } else if (log4jLevel == Level.TRACE) {
-      return InternalLogWriter.FINEST_LEVEL;
-    } else if (log4jLevel == Level.ALL) {
-      return InternalLogWriter.ALL_LEVEL;
-    } else if (log4jLevel == Level.OFF) {
-      return InternalLogWriter.NONE_LEVEL;
-    }
-
-    throw new IllegalArgumentException("Unknown Log4J level [" + log4jLevel + "].");
-  }
-
-    Level level = logWriterLeveltoLog4jLevel(logWriterLevel);
+    Level level = LogLevel.getLog4jLevel(logWriterLevel);
-  /*****************************************
-   * Methods below are specific to LogWriter
-   *****************************************/
-

INS42 UPD42 INS42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL50 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL45 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL42 DEL40 DEL27 DEL40 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL66 DEL65 DEL29