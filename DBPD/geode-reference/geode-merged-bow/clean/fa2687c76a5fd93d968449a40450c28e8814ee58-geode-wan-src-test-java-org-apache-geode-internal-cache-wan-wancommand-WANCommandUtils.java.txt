 GEODE-2668: build tabular command result from a list of function results  (#1127)

* GEODE-2668: build tabular command result from a list of function results

* reduce duplicate code to create the tabular results
* promote presentation consistency
* Add more validation for CreateGatewaySender/Receiver command and reworked the tests

-import static org.junit.Assert.assertNull;
+import static org.assertj.core.api.Assertions.assertThat;
+import java.util.stream.Collectors;
-    final IgnoredException exln = IgnoredException.addIgnoredException("Could not connect");
-    try {
-      Set<GatewaySender> senders = LocatorServerStartupRule.getCache().getGatewaySenders();
-      for (GatewaySender sender : senders) {
-        assertEquals(isRunning, sender.isRunning());
-        assertEquals(isPaused, sender.isPaused());
-      }
-    } finally {
-      exln.remove();
-    }
+    GatewaySender sender = LocatorServerStartupRule.getCache().getGatewaySenders().stream()
+        .filter(x -> senderId.equals(x.getId())).findFirst().orElse(null);
+    assertThat(sender.isRunning()).isEqualTo(isRunning);
+    assertThat(sender.isPaused()).isEqualTo(isPaused);
-    Set<GatewaySender> senders = LocatorServerStartupRule.getCache().getGatewaySenders();
-    for (GatewaySender sender : senders) {
-      assertEquals("remoteDistributedSystemId", remoteDsID, sender.getRemoteDSId());
-      assertEquals("isParallel", isParallel, sender.isParallel());
-      assertEquals("manualStart", manualStart, sender.isManualStart());
-      assertEquals("socketBufferSize", socketBufferSize, sender.getSocketBufferSize());
-      assertEquals("socketReadTimeout", socketReadTimeout, sender.getSocketReadTimeout());
-      assertEquals("enableBatchConflation", enableBatchConflation,
-          sender.isBatchConflationEnabled());
-      assertEquals("batchSize", batchSize, sender.getBatchSize());
-      assertEquals("batchTimeInterval", batchTimeInterval, sender.getBatchTimeInterval());
-      assertEquals("enablePersistence", enablePersistence, sender.isPersistenceEnabled());
-      assertEquals("diskSynchronous", diskSynchronous, sender.isDiskSynchronous());
-      assertEquals("maxQueueMemory", maxQueueMemory, sender.getMaximumQueueMemory());
-      assertEquals("alertThreshold", alertThreshold, sender.getAlertThreshold());
-      assertEquals("dispatcherThreads", dispatcherThreads, sender.getDispatcherThreads());
-      assertEquals("orderPolicy", orderPolicy, sender.getOrderPolicy());
+    GatewaySender sender = LocatorServerStartupRule.getCache().getGatewaySenders().stream()
+        .filter(x -> senderId.equals(x.getId())).findFirst().orElse(null);
-      // verify GatewayEventFilters
-      if (expectedGatewayEventFilters != null) {
-        assertEquals("gatewayEventFilters", expectedGatewayEventFilters.size(),
-            sender.getGatewayEventFilters().size());
+    assertEquals("remoteDistributedSystemId", remoteDsID, sender.getRemoteDSId());
+    assertEquals("isParallel", isParallel, sender.isParallel());
+    assertEquals("manualStart", manualStart, sender.isManualStart());
+    assertEquals("socketBufferSize", socketBufferSize, sender.getSocketBufferSize());
+    assertEquals("socketReadTimeout", socketReadTimeout, sender.getSocketReadTimeout());
+    assertEquals("enableBatchConflation", enableBatchConflation, sender.isBatchConflationEnabled());
+    assertEquals("batchSize", batchSize, sender.getBatchSize());
+    assertEquals("batchTimeInterval", batchTimeInterval, sender.getBatchTimeInterval());
+    assertEquals("enablePersistence", enablePersistence, sender.isPersistenceEnabled());
+    assertEquals("diskSynchronous", diskSynchronous, sender.isDiskSynchronous());
+    assertEquals("maxQueueMemory", maxQueueMemory, sender.getMaximumQueueMemory());
+    assertEquals("alertThreshold", alertThreshold, sender.getAlertThreshold());
+    assertEquals("dispatcherThreads", dispatcherThreads, sender.getDispatcherThreads());
+    assertEquals("orderPolicy", orderPolicy, sender.getOrderPolicy());
-        List<GatewayEventFilter> actualGatewayEventFilters = sender.getGatewayEventFilters();
-        List<String> actualEventFilterClassNames =
-            new ArrayList<String>(actualGatewayEventFilters.size());
-        for (GatewayEventFilter filter : actualGatewayEventFilters) {
-          actualEventFilterClassNames.add(filter.getClass().getName());
-        }
+    // verify GatewayEventFilters
+    if (expectedGatewayEventFilters != null) {
+      assertEquals("gatewayEventFilters", expectedGatewayEventFilters.size(),
+          sender.getGatewayEventFilters().size());
-        for (String expectedGatewayEventFilter : expectedGatewayEventFilters) {
-          if (!actualEventFilterClassNames.contains(expectedGatewayEventFilter)) {
-            fail("GatewayEventFilter " + expectedGatewayEventFilter
-                + " is not added to the GatewaySender");
-          }
+      List<GatewayEventFilter> actualGatewayEventFilters = sender.getGatewayEventFilters();
+      List<String> actualEventFilterClassNames =
+          new ArrayList<String>(actualGatewayEventFilters.size());
+      for (GatewayEventFilter filter : actualGatewayEventFilters) {
+        actualEventFilterClassNames.add(filter.getClass().getName());
+      }
+
+      for (String expectedGatewayEventFilter : expectedGatewayEventFilters) {
+        if (!actualEventFilterClassNames.contains(expectedGatewayEventFilter)) {
+          fail("GatewayEventFilter " + expectedGatewayEventFilter
+              + " is not added to the GatewaySender");
+
-  public static void verifySenderDestroyed(String senderId, boolean isParallel) {
+  public static void verifySenderDoesNotExist(String senderId, boolean isParallel) {
-    AbstractGatewaySender sender = (AbstractGatewaySender) senders.stream()
-        .filter(s -> s.getId().equalsIgnoreCase(senderId)).findFirst().orElse(null);
-    assertNull(sender);
+    Set<String> senderIds = senders.stream().map(AbstractGatewaySender.class::cast)
+        .map(AbstractGatewaySender::getId).collect(Collectors.toSet());
+    assertThat(senderIds).doesNotContain(senderId);
-    Set<LocalRegion> allRegions = ((GemFireCacheImpl) cache).getAllRegions();
-    for (LocalRegion region : allRegions) {
-      if (region.getName().contains(senderId + queueRegionNameSuffix)) {
-        fail("Region underlying the sender is not destroyed.");
-      }
-    }
+    Set<String> allRegions = ((GemFireCacheImpl) cache).getAllRegions().stream()
+        .map(LocalRegion::getName).collect(Collectors.toSet());
+
+    assertThat(allRegions).doesNotContain(senderId + queueRegionNameSuffix);

INS26 UPD40 INS40 MOV8 MOV8 UPD42 INS60 MOV21 MOV21 INS60 INS21 INS21 MOV43 INS59 INS32 INS32 MOV43 INS59 UPD74 MOV74 INS32 UPD74 INS32 INS42 INS32 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 MOV25 UPD43 UPD42 INS32 INS32 INS42 INS42 UPD43 INS32 MOV32 UPD42 MOV42 MOV27 INS32 INS42 INS33 UPD42 UPD42 INS32 INS42 INS33 UPD42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS42 INS32 UPD42 MOV42 MOV32 UPD42 MOV42 INS90 UPD42 MOV42 INS42 INS32 INS42 INS90 INS42 INS42 INS32 INS42 INS86 INS32 INS42 INS86 MOV32 UPD42 INS90 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS59 INS32 MOV32 UPD42 MOV42 INS59 INS32 INS57 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV43 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS32 MOV32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL59 DEL60 DEL42 DEL44 DEL42 DEL8 DEL70 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL59 DEL60 DEL42 DEL44 DEL42 DEL70 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL59 DEL42 DEL32 DEL86 DEL32 DEL32 DEL33 DEL32 DEL11 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70