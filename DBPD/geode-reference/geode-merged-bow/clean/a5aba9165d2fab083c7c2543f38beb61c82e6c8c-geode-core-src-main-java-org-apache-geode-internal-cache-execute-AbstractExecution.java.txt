Revert "GEODE-6588: Properly type Function execution related interfaces. (#3691)"

This reverts commit 6c62540edd5637d5e2bd3a51b11279a2ba825c33.

-public abstract class AbstractExecution<ArgumentT, ReturnT, AggregatorT>
-    implements InternalExecution<ArgumentT, ReturnT, AggregatorT> {
+public abstract class AbstractExecution implements InternalExecution {
-  protected Set<String> failedNodes = new HashSet<>();
+  protected Set<String> failedNodes = new HashSet<String>();
-      new ConcurrentHashMap<>();
+      new ConcurrentHashMap<String, byte[]>();
-  public AbstractExecution<ArgumentT, ReturnT, AggregatorT> setIsReExecute() {
+  public AbstractExecution setIsReExecute() {
-      if (ServerConnection.isExecuteFunctionOnLocalNodeOnly() == 1) {
+      if (ServerConnection.isExecuteFunctionOnLocalNodeOnly().byteValue() == 1) {
-        newDM.getFunctionExecutor().execute(() -> {
-          executeFunctionLocally(fn, cx, sender, newDM);
-          if (!sender.isLastResultReceived() && fn.hasResult()) {
-            ((InternalResultSender) sender).setException(new FunctionException(
-                String.format("The function, %s, did not send last result",
-                    fn.getId())));
+        newDM.getFunctionExecutor().execute(new Runnable() {
+          @Override
+          public void run() {
+            executeFunctionLocally(fn, cx, sender, newDM);
+            if (!sender.isLastResultReceived() && fn.hasResult()) {
+              ((InternalResultSender) sender).setException(new FunctionException(
+                  String.format("The function, %s, did not send last result",
+                      fn.getId())));
+            }
-      newDM.getFunctionExecutor().execute(() -> {
-        executeFunctionLocally(fn, cx, sender, newDM);
-        if (!((InternalResultSender) sender).isLastResultReceived() && fn.hasResult()) {
-          ((InternalResultSender) sender).setException(new FunctionException(
-              String.format("The function, %s, did not send last result",
-                  fn.getId())));
+      newDM.getFunctionExecutor().execute(new Runnable() {
+        @Override
+        public void run() {
+          executeFunctionLocally(fn, cx, sender, newDM);
+          if (!((InternalResultSender) sender).isLastResultReceived() && fn.hasResult()) {
+            ((InternalResultSender) sender).setException(new FunctionException(
+                String.format("The function, %s, did not send last result",
+                    fn.getId())));
+          }
-      FunctionException functionException;
+      FunctionException functionException = null;
-      FunctionException functionException;
+      FunctionException functionException = null;
-  public ResultCollector<ReturnT, AggregatorT> execute(final String functionName) {
+  public ResultCollector execute(final String functionName) {
-  public ResultCollector<ReturnT, AggregatorT> execute(Function function) throws FunctionException {
+  public ResultCollector execute(Function function) throws FunctionException {
-  protected abstract ResultCollector<ReturnT, AggregatorT> executeFunction(Function fn);
+  protected abstract ResultCollector executeFunction(Function fn);
-  public LocalResultCollector<ReturnT, AggregatorT> getLocalResultCollector(Function function,
-      final ResultCollector<ReturnT, AggregatorT> rc) {
+  public LocalResultCollector<?, ?> getLocalResultCollector(Function function,
+      final ResultCollector<?, ?> rc) {

MOV43 MOV43 MOV43 MOV43 MOV43 UPD74 INS76 INS76 UPD74 UPD74 UPD74 INS76 INS76 INS43 INS43 INS5 INS42 INS42 INS39 INS85 INS32 INS14 MOV32 INS42 INS43 INS1 INS33 INS33 INS14 INS42 INS31 INS43 INS1 INS78 INS83 INS39 INS42 MOV8 INS42 INS31 INS42 INS78 INS83 INS39 INS42 MOV8 INS42 DEL42 DEL73 DEL42 DEL73 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL86 DEL86 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43