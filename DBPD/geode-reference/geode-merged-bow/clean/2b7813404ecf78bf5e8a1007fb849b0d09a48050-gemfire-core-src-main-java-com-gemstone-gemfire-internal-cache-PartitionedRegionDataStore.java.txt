Merge remote-tracking branch 'origin/develop' into wan_cq_donation

+                  observer.beforeAssignBucket(this.partitionedRegion, possiblyFreeBucketId);
-    this.loader = newLoader;
-    visitBuckets(new BucketVisitor() {
-      @Override
-      public void visit(Integer bucketId, Region r) {
-        AttributesMutator mut = r.getAttributesMutator();
-        if (logger.isDebugEnabled()) {
-          logger.debug("setting new cache loader in bucket region: {}", newLoader);
+    StoppableWriteLock lock = this.bucketCreationLock.writeLock();
+    lock.lock();
+    try {
+      this.loader = newLoader;
+      visitBuckets(new BucketVisitor() {
+        @Override
+        public void visit(Integer bucketId, Region r) {
+          AttributesMutator mut = r.getAttributesMutator();
+          if (logger.isDebugEnabled()) {
+            logger.debug("setting new cache loader in bucket region: {}", newLoader);
+          }
+          mut.setCacheLoader(newLoader);
-        mut.setCacheLoader(newLoader);
-      }
-    });
+      });
+    } finally {
+      lock.unlock();
+    }
-  public RawValue getSerializedLocally(KeyInfo keyInfo, boolean doNotLockEntry, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws PrimaryBucketException,
+  public RawValue getSerializedLocally(KeyInfo keyInfo, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws PrimaryBucketException,
-      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, clientEvent, returnTombstones, allowReadFromHDFS);
+      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, requestingClient, clientEvent, returnTombstones, allowReadFromHDFS);

INS8 INS44 INS60 INS21 INS54 INS43 INS42 INS43 INS59 INS32 MOV8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS22 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS22 INS42 INS52 INS42