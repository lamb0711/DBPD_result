Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is the Server that listens for incoming memcached client connections.
- * This server understands the memcached ASCII protocol
- * documented in
- * <a href="https://github.com/memcached/memcached/blob/master/doc/protocol.txt">memcached source control</a>
- * It then translates these commands to the corresponding
- * GemFire commands, and stores the data in GemFire in a {@link Region}
- * named "gemcached".
+ * This is the Server that listens for incoming memcached client connections. This server
+ * understands the memcached ASCII protocol documented in
+ * <a href="https://github.com/memcached/memcached/blob/master/doc/protocol.txt">memcached source
+ * control</a> It then translates these commands to the corresponding GemFire commands, and stores
+ * the data in GemFire in a {@link Region} named "gemcached".
- * "gemcached" region is {@link RegionShortcut#PARTITION} by default,
- * though a cache.xml can be provided to override region attributes.
+ * "gemcached" region is {@link RegionShortcut#PARTITION} by default, though a cache.xml can be
+ * provided to override region attributes.
- * This class has a Main method that can be used to
- * start the server.
+ * This class has a Main method that can be used to start the server.
-    ASCII,
-    BINARY
+    ASCII, BINARY
-  
+
-  
+
-  
+
-  
+
-   * the thread executor pool to handle requests from clients.
-   * We create one thread for each client.
+   * the thread executor pool to handle requests from clients. We create one thread for each client.
+
-      t.setName("Gemcached-"+counter.incrementAndGet());
+      t.setName("Gemcached-" + counter.incrementAndGet());
-  
+
-   * Create an instance of the server. to start
-   * the server {@link #start()} must be called.
+   * Create an instance of the server. to start the server {@link #start()} must be called.
-   * @param port the port on which the server listens
-   *        for new memcached client connections.
+   * @param port the port on which the server listens for new memcached client connections.
-   * Create an instance of the server. to start
-   * the server {@link #start()} must be called.
+   * Create an instance of the server. to start the server {@link #start()} must be called.
-   * @param bindAddress the address on which the server listens
-   *        for new memcached client connections.
-   * @param port the port on which the server listens
-   *        for new memcached client connections.
+   * @param bindAddress the address on which the server listens for new memcached client
+   *        connections.
+   * @param port the port on which the server listens for new memcached client connections.
-    if (port <= 0 ) {
+    if (port <= 0) {
-   * Starts an embedded GemFire caching node, and then
-   * listens for new memcached client connections.
+   * Starts an embedded GemFire caching node, and then listens for new memcached client connections.
-  
+
-  
+
-      logger.fine("GemFireMemcachedServer configured socket buffer size:"+getSocketBufferSize());
+      logger.fine("GemFireMemcachedServer configured socket buffer size:" + getSocketBufferSize());
-    logger.config("GemFireMemcachedServer server started on host:"+SocketCreator.getLocalHost()+" port: "+this.serverPort);
+    logger.config("GemFireMemcachedServer server started on host:" + SocketCreator.getLocalHost()
+        + " port: " + this.serverPort);
-  
+
-    return this.bindAddress == null || this.bindAddress.isEmpty()
-        ? SocketCreator.getLocalHost()
+    return this.bindAddress == null || this.bindAddress.isEmpty() ? SocketCreator.getLocalHost()
-  
+
-   * shuts down this server and closes the embedded
-   * GemFire caching node
+   * shuts down this server and closes the embedded GemFire caching node
-  
+
-    while(true) {
+    while (true) {
-      for (int i=0; i<args.length; i++) {
+      for (int i = 0; i < args.length; i++) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66