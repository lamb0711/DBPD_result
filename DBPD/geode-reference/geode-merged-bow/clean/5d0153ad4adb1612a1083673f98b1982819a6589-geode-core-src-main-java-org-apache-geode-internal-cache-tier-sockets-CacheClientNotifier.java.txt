GEODE-7089: Each client registration thread uses its own queue

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>
-import java.util.concurrent.locks.ReentrantLock;
-  private final ClientRegistrationEventQueueManager registrationQueueManager =
-      new ClientRegistrationEventQueueManager();
+  private final ClientRegistrationEventQueueManager clientRegistrationEventQueueManager;
+   * @param clientRegistrationEventQueueManager Manages temporary registration queues for clients
-      StatisticsClock statisticsClock, CacheServerStats acceptorStats, int maximumMessageCount,
-      int messageTimeToLive, ConnectionListener listener, OverflowAttributes overflowAttributes,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats,
+      int maximumMessageCount,
+      int messageTimeToLive,
+      ConnectionListener listener,
+      OverflowAttributes overflowAttributes,
-      ccnSingleton = new CacheClientNotifier(cache, statisticsClock, acceptorStats,
+      ccnSingleton = new CacheClientNotifier(cache, clientRegistrationEventQueueManager,
+          statisticsClock, acceptorStats,
-        registrationQueueManager.create(clientProxyMembershipID, new ConcurrentLinkedQueue<>(),
-            new ReentrantReadWriteLock(), new ReentrantLock());
+        ClientRegistrationEventQueueManager.ClientRegistrationEventQueue clientRegistrationEventQueue =
+            clientRegistrationEventQueueManager.create(clientProxyMembershipID,
+                new ConcurrentLinkedQueue<>(),
+                new ReentrantReadWriteLock());
-          if (isProxyInitialized(clientProxyMembershipID)) {
-            registrationQueueManager.drain(clientProxyMembershipID, this);
-          }
+          clientRegistrationEventQueueManager.drain(clientRegistrationEventQueue, this);
-    registrationQueueManager.add(event, conflatable, filterClients, this);
+    clientRegistrationEventQueueManager.add(event, conflatable, filterClients, this);
-   * Determines whether a client proxy has been initialized
-   *
-   * @param clientProxyMembershipID The client proxy membership ID
-   * @return Whether the client proxy is initialized
-   */
-  private boolean isProxyInitialized(final ClientProxyMembershipID clientProxyMembershipID) {
-    return getClientProxy(clientProxyMembershipID) != null;
-  }
-
-  /**
-  private CacheClientNotifier(InternalCache cache, StatisticsClock statisticsClock,
-      CacheServerStats acceptorStats, int maximumMessageCount, int messageTimeToLive,
+  private CacheClientNotifier(InternalCache cache,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats, int maximumMessageCount,
+      int messageTimeToLive,
+    this.clientRegistrationEventQueueManager = clientRegistrationEventQueueManager;
-    CacheClientNotifier get(InternalCache cache, StatisticsClock statisticsClock,
+    CacheClientNotifier get(InternalCache cache,
+        ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+        StatisticsClock statisticsClock,

INS44 INS44 UPD42 INS65 MOV43 INS42 INS43 INS42 INS21 INS44 INS42 INS66 INS42 INS7 INS43 INS42 UPD42 INS22 INS42 INS42 INS52 INS42 INS60 INS42 INS43 INS59 INS8 INS40 INS42 MOV32 MOV21 UPD42 UPD42 UPD42 DEL40 DEL26 DEL14 DEL42 DEL43 DEL14 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31