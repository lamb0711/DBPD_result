GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import org.apache.geode.internal.protocol.operations.ProtobufOperationHandler;
+import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI;
-public class ExecuteFunctionOnGroupRequestOperationHandler extends
-    AbstractFunctionRequestOperationHandler<ExecuteFunctionOnGroupRequest, ExecuteFunctionOnGroupResponse> {
-
+public class ExecuteFunctionOnGroupRequestOperationHandler implements
+    ProtobufOperationHandler<ExecuteFunctionOnGroupRequest, ExecuteFunctionOnGroupResponse> {
-  protected Set<?> parseFilter(ProtobufSerializationService serializationService,
-      ExecuteFunctionOnGroupRequest request) {
-    // filters are not allowed on functions not associated with regions
-    return null;
+  public Result<FunctionAPI.ExecuteFunctionOnGroupResponse> process(
+      ProtobufSerializationService serializationService,
+      FunctionAPI.ExecuteFunctionOnGroupRequest request,
+      MessageExecutionContext messageExecutionContext)
+      throws InvalidExecutionContextException, DecodingException, EncodingException {
+
+    final String functionID = request.getFunctionID();
+    List<String> memberNameList = request.getGroupNameList();
+    Object arguments = getFunctionArguments(request, serializationService);
+
+    List<Object> results = messageExecutionContext.getAuthorizingCache().getFunctionService()
+        .executeFunctionOnGroups(functionID, arguments, memberNameList);
+
+    final FunctionAPI.ExecuteFunctionOnGroupResponse.Builder responseMessage =
+        FunctionAPI.ExecuteFunctionOnGroupResponse.newBuilder();
+
+    results.stream().map(serializationService::encode).forEach(responseMessage::addResults);
+
+    return Success.of(responseMessage.build());
-  @Override
-  protected String getFunctionID(ExecuteFunctionOnGroupRequest request) {
-    return request.getFunctionID();
-  }
-
-  @Override
-  protected String getRegionName(ExecuteFunctionOnGroupRequest request) {
-    // region name is not allowed in onMember invocation
-    return null;
-  }
-
-  @Override
-  protected Object getExecutionTarget(ExecuteFunctionOnGroupRequest request, String regionName,
-      MessageExecutionContext executionContext) throws InvalidExecutionContextException {
-
-    ProtocolStringList groupList = request.getGroupNameList();
-
-    // unfortunately FunctionServiceManager throws a FunctionException if there are no
-    // servers matching any of the given groups. In order to distinguish between
-    // function execution failure and this condition we have to preprocess the groups
-    // and ensure that there is at least one server that has one of the given groups
-    DistributedSystem distributedSystem =
-        executionContext.getCache().getDistributionManager().getSystem();
-    boolean foundMatch = false;
-    for (String group : groupList) {
-      if (distributedSystem.getGroupMembers(group).size() > 0) {
-        foundMatch = true;
-        break;
-      }
-    }
-    if (!foundMatch) {
-      return Failure.of(BasicTypes.ErrorCode.NO_AVAILABLE_SERVER, "No server  in groups "
-          + groupList + " could be found to execute \"" + request.getFunctionID() + "\"");
-    }
-    return groupList;
-  }
-
-  @Override
-  protected Object getFunctionArguments(ExecuteFunctionOnGroupRequest request,
+  private Object getFunctionArguments(ExecuteFunctionOnGroupRequest request,
-  @Override
-  protected Execution getFunctionExecutionObject(Object executionTarget) {
-    ProtocolStringList groupList = (ProtocolStringList) executionTarget;
-    return FunctionService.onMember(groupList.toArray(new String[0]));
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService,
-      List<Object> results) throws EncodingException {
-    final ExecuteFunctionOnGroupResponse.Builder responseMessage =
-        ExecuteFunctionOnGroupResponse.newBuilder();
-    for (Object result : results) {
-      responseMessage.addResults(serializationService.encode(result));
-    }
-    return Success.of(responseMessage.build());
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService) {
-    return Success.of(ExecuteFunctionOnGroupResponse.newBuilder().build());
-  }
-

INS26 INS26 INS40 INS40 UPD74 INS31 UPD43 MOV78 UPD83 MOV83 UPD74 MOV74 UPD42 MOV42 MOV44 MOV44 MOV44 MOV43 INS43 MOV43 INS8 UPD83 UPD42 MOV43 UPD43 UPD43 UPD42 UPD42 MOV42 INS60 MOV60 MOV60 INS60 MOV60 INS21 MOV41 INS40 INS40 INS83 MOV43 INS59 INS74 MOV43 MOV74 INS59 UPD43 INS32 INS42 MOV32 INS43 MOV43 UPD42 UPD42 UPD42 MOV42 INS32 UPD40 INS32 UPD42 MOV42 INS90 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS90 INS42 INS42 MOV32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 DEL42 DEL76 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL78 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL34 DEL27 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL41 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31