Merge branch 'develop' into feature/GEODE-7049

-import java.io.NotSerializableException;
-import java.util.Map;
-import org.apache.geode.distributed.internal.DMStats;
-import org.apache.geode.distributed.internal.DistributionMessage;
+import org.apache.geode.distributed.internal.membership.gms.api.Membership;
-public interface MembershipManager {
+public interface MembershipManager extends Membership {
-   * Fetch the current view of memberships in th distributed system, as an ordered list.
-   *
-   * @return list of members
-   */
-  NetView getView();
-
-  /**
-   * Return a {@link InternalDistributedMember} representing the current system
-   *
-   * @return an address corresponding to the current system
-   */
-  InternalDistributedMember getLocalMember();
-
-  /**
+   * test method for simulating a sick/dead member
+   */
+  void beSick();
+
+  /**
+   * test method for simulating a sick/dead member
+   */
+  void playDead();
+
+  /**
+   * test method for simulating a sick/dead member
+   */
+  void beHealthy();
+
+  /**
-  void shutdownMessageReceived(InternalDistributedMember id, String reason);
+  void shutdownMessageReceived(DistributedMember id, String reason);
-   * @param destinations list of members to send the message to. A list of length 1 with
-   *        <em>null</em> as a single element broadcasts to all members of the system.
-   * @param content the message to send
-   * @param stats the statistics object to update
-   * @return list of members who did not receive the message. If
-   *         {@link DistributionMessage#ALL_RECIPIENTS} is given as thelist of recipients, this
-   *         return list is null (empty). Otherwise, this list is all of those recipients that did
-   *         not receive the message because they departed the distributed system.
-   * @throws NotSerializableException If content cannot be serialized
-   */
-  Set<InternalDistributedMember> send(InternalDistributedMember[] destinations,
-      DistributionMessage content, DMStats stats)
-      throws NotSerializableException;
-
-  /**
-   * Returns a serializable map of communications state for use in state stabilization.
-   *
-   * @param member the member whose message state is to be captured
-   * @param includeMulticast whether the state of the mcast messaging should be included
-   * @return the current state of the communication channels between this process and the given
-   *         distributed member
-   * @since GemFire 5.1
-   */
-  Map<String, Long> getMessageState(DistributedMember member, boolean includeMulticast);
-
-  /**
-   * Waits for the given communications to reach the associated state
-   *
-   * @param member The member whose messaging state we're waiting for
-   * @param state The message states to wait for. This should come from getMessageStates
-   * @throws InterruptedException Thrown if the thread is interrupted
-   * @since GemFire 5.1
-   */
-  void waitForMessageState(DistributedMember member, Map<String, Long> state)
-      throws InterruptedException;
-
-  /**
-  boolean waitForDeparture(DistributedMember mbr, int timeoutMS)
+  boolean waitForDeparture(DistributedMember mbr, long timeoutMS)
-  boolean waitForNewMember(InternalDistributedMember remoteId);
+  boolean waitForNewMember(DistributedMember remoteId);
-   * Request the current membership coordinator to remove the given member
-   */
-  boolean requestMemberRemoval(DistributedMember member, String reason);
-
-  /**
-   * like memberExists() this checks to see if the given ID is in the current membership view. If it
-   * is in the view though we try to connect to its failure-detection port to see if it's still
-   * around. If we can't then suspect processing is initiated on the member with the given reason
-   * string.
+   * Notifies the manager that a member has contacted us who is not in the current membership view
-   * @param mbr the member to verify
-   * @param reason why the check is being done (must not be blank/null)
-   * @return true if the member checks out
-  boolean verifyMember(InternalDistributedMember mbr, String reason);
+  void addSurpriseMemberForTesting(DistributedMember mbr, long birthTime);
-  void suspectMembers(Set<InternalDistributedMember> members, String reason);
+  void suspectMembers(Set<DistributedMember> members, String reason);
-  void suspectMember(InternalDistributedMember member, String reason);
+  void suspectMember(DistributedMember member, String reason);
-   * Returns true if the member is being shunned
-   */
-  boolean isShunned(DistributedMember m);
-
-  /**

MOV26 MOV31 MOV31 MOV31 UPD40 INS43 UPD42 MOV42 INS39 INS42 UPD42 UPD39 UPD42 UPD39 UPD42 MOV44 UPD65 UPD65 UPD43 UPD39 MOV43 UPD43 INS39 INS42 UPD74 MOV74 UPD66 UPD66 UPD66 UPD42 UPD66 UPD42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL43 DEL42 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL66 DEL65 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL66 DEL66 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL44 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL44 DEL31