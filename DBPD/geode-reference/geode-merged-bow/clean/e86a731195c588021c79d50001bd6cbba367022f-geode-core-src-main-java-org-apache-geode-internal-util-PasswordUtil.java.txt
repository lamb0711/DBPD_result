Merge branch 'release/1.3.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-
- * Generates an encrypted password, used by the gemfire encrypt-password command. Makes use of
- * Blowfish algorithm to encrypt/decrypt password string
- * 
- * <p>
- * This shows a sample command invocation and output (assuming password is the actual password for
- * the datasource): <br>
- * <br>
- * bash-2.05$ $GEMFIRE/bin/gemfire encrypt-password password<br>
- * Using system directory "/home/users/jpearson/gemfire/defaultSystem".<br>
- * Encrypted to 83f0069202c571faf1ae6c42b4ad46030e4e31c17409e19a <br>
- * <br>
- * Copy the output from the gemfire command to the cache.xml file as the value of the password
- * attribute of the jndi-binding tag embedded in encrypted(), just like a method parameter.<br>
- * Enter it as encrypted, in this format:
- * password="encrypted(83f0069202c571faf1ae6c42b4ad46030e4e31c17409e19a)"<br>
- * To use a non-encrypted password, put the actual password as the value of the password attribute
- * of the jndi-binding tag, like this: password="password" <br>
- * 
+ * Makes use of Blowfish algorithm to decrypt a pre-encrypted password string. As of June 2017, no
+ * longer supports encrypting a password. However, decrypting still works.
-   * Encrypts a password string
-   * 
-   * @param password String to be encrypted.
-   * @return String encrypted String
-   */
-  public static String encrypt(String password) {
-    return encrypt(password, true);
-  }
-
-  /**
-   * 
-   * @param password String to be encrypted
-   * @param echo if true prints result to system.out
-   * @return String encrypted String
-   */
-  public static String encrypt(String password, boolean echo) {
-    String encryptedString = null;
-    try {
-      SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
-      Cipher cipher = Cipher.getInstance("Blowfish");
-      cipher.init(Cipher.ENCRYPT_MODE, key);
-      byte[] encrypted = cipher.doFinal(password.getBytes());
-      encryptedString = byteArrayToHexString(encrypted);
-      if (echo) {
-        System.out.println(
-            LocalizedStrings.PasswordUtil_ENCRYPTED_TO_0.toLocalizedString(encryptedString));
-      }
-    } catch (Exception e) {
-      e.printStackTrace();
-    }
-    return encryptedString;
-  }
-
-  /**
-   * 
-   * @param password String to be decrypted
+   *
+   * @param password String to be decrypted (format: `encrypted(password_to_decrypt)`)
+  @Deprecated
-    if (password.startsWith("encrypted(") && password.endsWith(")")) {
-      byte[] decrypted = null;
-      try {
-        String toDecrypt = password.substring(10, password.length() - 1);
-        SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
-        Cipher cipher = Cipher.getInstance("Blowfish");
-        cipher.init(Cipher.DECRYPT_MODE, key);
-        decrypted = cipher.doFinal(hexStringToByteArray(toDecrypt));
-        return new String(decrypted);
-      } catch (Exception e) {
-        e.printStackTrace();
-      }
+    if (!isEncryptedPassword(password))
+      return password;
+
+    String toDecrypt = password.substring(10, password.length() - 1);
+    SecretKeySpec key = new SecretKeySpec(init, "Blowfish");
+    try {
+      Cipher cipher = Cipher.getInstance("Blowfish");
+      cipher.init(Cipher.DECRYPT_MODE, key);
+      byte[] decrypted = cipher.doFinal(hexStringToByteArray(toDecrypt));
+
+      return new String(decrypted);
+
+    } catch (Exception e) {
+      throw new RuntimeException(e);
-    return password;
-  private static String byteArrayToHexString(byte[] b) {
-    StringBuilder sb = new StringBuilder(b.length * 2);
-    for (int i = 0; i < b.length; i++) {
-      int v = b[i] & 0xff;
-      if (v < 16) {
-        sb.append('0');
-      }
-      sb.append(Integer.toHexString(v));
-    }
-    return sb.toString().toUpperCase();
+  private static boolean isEncryptedPassword(String password) {
+    if (password == null)
+      return false;
+    return password.startsWith("encrypted(") && password.endsWith(")");

INS78 MOV8 INS39 INS42 MOV44 UPD66 UPD66 INS42 INS25 INS54 MOV25 UPD66 INS38 MOV41 INS8 INS12 UPD27 INS41 MOV27 INS32 MOV60 MOV21 INS60 MOV41 MOV44 INS8 UPD42 INS33 INS9 INS42 INS42 MOV5 INS59 INS53 INS42 MOV32 INS14 INS43 INS42 INS42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL7 DEL21 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL34 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL34 DEL27 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL32