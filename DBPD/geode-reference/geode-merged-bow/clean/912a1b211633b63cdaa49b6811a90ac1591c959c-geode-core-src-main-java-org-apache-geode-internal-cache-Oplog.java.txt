GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-import org.apache.geode.internal.cache.backup.BackupService;
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.internal.util.TransformUtils;
-        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-          logger.trace(LogMarker.PERSIST_RECOVERY,
+        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+          logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY,
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY,
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-              logger.trace(LogMarker.PERSIST_RECOVERY, "drf byte={} location={}", opCode,
+            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "drf byte={} location={}", opCode,
-            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-                logger.trace(LogMarker.PERSIST_RECOVERY,
+              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+                logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-                logger.trace(LogMarker.PERSIST_RECOVERY,
+              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+                logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY, "expected opcode id absent: {}", expect);
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "expected opcode id absent: {}", expect);
-          // long startPosition = byteCount;
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY, "Oplog opCode={}", opCode);
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "Oplog opCode={}", opCode);
-              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-                logger.trace(LogMarker.PERSIST_RECOVERY, "newEntryBase={}", newEntryBase);
+              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+                logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "newEntryBase={}", newEntryBase);
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY, "diskStoreId={}", readDSID);
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "diskStoreId={}", readDSID);
-        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-          logger.trace(LogMarker.PERSIST_RECOVERY,
+        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+          logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY, "oplog magic code: {}", sb);
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "oplog magic code: {}", sb);
-    logger.trace(LogMarker.PERSIST_RECOVERY, "version={}", recoveredGFVersion);
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "version={}", recoveredGFVersion);
+    }
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY, "totalCount={}", totalCount);
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "totalCount={}", totalCount);
-    final boolean isPersistRecoveryDebugEnabled = logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY);
+    final boolean isPersistRecoveryDebugEnabled =
+        logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE);
-      logger.trace(LogMarker.PERSIST_RECOVERY, "readRVV entry numRegions={}", numRegions);
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "readRVV entry numRegions={}", numRegions);
-        logger.trace(LogMarker.PERSIST_RECOVERY, "readRVV drId={} region={}", drId, drs);
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "readRVV drId={} region={}", drId, drs);
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              logger.trace(LogMarker.PERSIST_RECOVERY, "marking RVV trusted drId={},tvvTrusted={}",
-                  drId, rvvTrusted);
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
+                  "marking RVV trusted drId={},tvvTrusted={}", drId, rvvTrusted);
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    final boolean isPersistRecoveryDebugEnabled = logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY);
+    final boolean isPersistRecoveryDebugEnabled =
+        logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE);
-          logger.trace(LogMarker.PERSIST_RECOVERY,
+          logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              logger.trace(LogMarker.PERSIST_RECOVERY, "readNewEntry copyForward oplogKeyId=<{}>",
-                  oplogKeyId);
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
+                  "readNewEntry copyForward oplogKeyId=<{}>", oplogKeyId);
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-              logger.trace(LogMarker.PERSIST_RECOVERY,
+              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    final boolean isPersistRecoveryDebugEnabled = logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY);
+    final boolean isPersistRecoveryDebugEnabled =
+        logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE);
-    // long debugRecoverModEntryId = this.recoverModEntryId;
-    // long debugOplogKeyId = dis.readLong();
-    // //assert oplogKeyId == debugOplogKeyId
-    // // : "expected=" + debugOplogKeyId + " actual=" + oplogKeyId
-    // assert debugRecoverModEntryId == debugOplogKeyId
-    // : "expected=" + debugOplogKeyId + " actual=" + debugRecoverModEntryId
-    // + " idByteCount=" + idByteCount
-    // + " delta=" + this.lastDelta;
-        logger.trace(LogMarker.PERSIST_RECOVERY,
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-            logger.trace(LogMarker.PERSIST_RECOVERY, "readModifyEntry copyForward oplogKeyId=<{}>",
-                oplogKeyId);
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
+                "readModifyEntry copyForward oplogKeyId=<{}>", oplogKeyId);
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-        logger.trace(LogMarker.PERSIST_RECOVERY, "skipping readModifyEntry oplogKeyId=<{}> drId={}",
-            oplogKeyId, drId);
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
+            "skipping readModifyEntry oplogKeyId=<{}> drId={}", oplogKeyId, drId);
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY, "readVersionTagOnlyEntry drId={} tag={}", drId, tag);
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "readVersionTagOnlyEntry drId={} tag={}",
+          drId, tag);
-    // long debugRecoverModEntryId = this.recoverModEntryId;
-    // long debugOplogKeyId = dis.readLong();
-    // //assert oplogKeyId == debugOplogKeyId
-    // // : "expected=" + debugOplogKeyId + " actual=" + oplogKeyId
-    // assert debugRecoverModEntryId == debugOplogKeyId
-    // : "expected=" + debugOplogKeyId + " actual=" + debugRecoverModEntryId
-    // + " idByteCount=" + idByteCount
-    // + " delta=" + this.lastDelta;
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY,
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-          // de = drs.updateRecoveredEntry(key, re);
-          // updateRecoveredEntry(drv, de, re);
-          // this.stats.incRecoveredEntryUpdates();
-    // long debugRecoverDelEntryId = this.recoverDelEntryId;
-    // long debugOplogKeyId = dis.readLong();
-    // assert debugRecoverDelEntryId == debugOplogKeyId
-    // : "expected=" + debugOplogKeyId + " actual=" + debugRecoverDelEntryId
-    // + " idByteCount=" + idByteCount
-    // + " delta=" + this.lastDelta;
-    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-      logger.trace(LogMarker.PERSIST_RECOVERY, "readDelEntry oplogKeyId=<{}>", oplogKeyId);
+    if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "readDelEntry oplogKeyId=<{}>", oplogKeyId);
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY,
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-    // if (dr == null || !dr.isReadyForRecovery()) {
-    // // Region has not yet been created (it is not in the diskStore drMap).
-    // // or it is not ready for recovery (i.e. it is a ProxyBucketRegion).
-    // if (getParent().getDiskInitFile().regionExists(drId)
-    // || (dr != null && !dr.isReadyForRecovery())) {
-    // // Prevent compactor from removing this oplog.
-    // // It needs to be in this state until all the regions stored it in
-    // // are recovered.
-    // addUnrecoveredRegion(drId);
-    // } else {
-    // // someone must have deleted the region from the initFile (with our
-    // public tool?)
-    // // so skip this record and don't count it as live so that the compactor
-    // can gc it.
-    // }
-    // return true;
-    // } else
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY, "okToSkip because drs is null for drId={}", drId);
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "okToSkip because drs is null for drId={}",
+            drId);
-              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-                logger.trace(LogMarker.PERSIST_RECOVERY,
+              if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+                logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY, "lastClearKeyId={} oplogKeyId={}", lastClearKeyId,
-            oplogKeyId);
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "lastClearKeyId={} oplogKeyId={}",
+            lastClearKeyId, oplogKeyId);
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-            logger.trace(LogMarker.PERSIST_RECOVERY,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-        logger.trace(LogMarker.PERSIST_RECOVERY, "clearRVV={} tag={}", clearRVV, tag);
+      if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, "clearRVV={} tag={}", clearRVV, tag);
-        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY)) {
-          logger.trace(LogMarker.PERSIST_RECOVERY,
+        if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
+          logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,
-  private/* HACK DEBUG */static long getEntryIdDelta(CountingDataInputStream dis, int idByteCount)
+  private static long getEntryIdDelta(CountingDataInputStream dis, int idByteCount)
-          if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
+          if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
-            logger.trace(LogMarker.PERSIST_WRITES,
+            logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
-      logger.trace(LogMarker.PERSIST_WRITES,
+    if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
+      logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
-            if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
+            if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
-              logger.trace(LogMarker.PERSIST_WRITES,
+              logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
-            if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
-              logger.trace(LogMarker.PERSIST_WRITES,
+            if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
+              logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
-            logger.trace(LogMarker.PERSIST_WRITES,
+          if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
+            logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
-            if (logger.isDebugEnabled(LogMarker.PERSIST_WRITES)) {
+            if (logger.isDebugEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
-      synchronized (this.lock/* crf */) {
-        // if (this.closed || this.deleted.get()) {
-        // throw new DiskAccessException("attempting get on "
-        // + (this.deleted.get() ? "destroyed" : "closed")
-        // + " oplog #" + getOplogId(), this.owner);
-        // }
+      synchronized (this.lock) {
-        if (/*
-             * !getParent().isSync() since compactor groups writes &&
-             */(offsetInOplog + valueLength) > this.crf.bytesFlushed && !this.closed) {
+        if ((offsetInOplog + valueLength) > this.crf.bytesFlushed && !this.closed) {
-          // if (this.closed || this.deleted.get()) {
-          // throw new DiskAccessException("attempting get on "
-          // + (this.deleted.get() ? "destroyed" : "closed")
-          // + " oplog #" + getOplogId(), this.owner);
-          // }
-            // if (this.closed || this.deleted.get()) {
-            // throw new DiskAccessException("attempting get on "
-            // + (this.deleted.get() ? "destroyed" : "closed")
-            // + " oplog #" + getOplogId(), this.owner);
-            // }
-      // }
-        // getParent().removeDrf(this);
-        // getParent().oplogSetRemove(this);
-      // getParent().oplogSetRemove(this);
-      if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES)) {
-        logger.trace(LogMarker.PERSIST_WRITES, "serializeRVVs: isGCRVV={} drId={} rvv={} oplog#{}",
-            gcRVV, diskRegionID, rvv.fullToString(), getOplogId());
+      if (logger.isTraceEnabled(LogMarker.PERSIST_WRITES_VERBOSE)) {
+        logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,
+            "serializeRVVs: isGCRVV={} drId={} rvv={} oplog#{}", gcRVV, diskRegionID,
+            rvv.fullToString(), getOplogId());

INS25 INS32 INS8 UPD40 UPD40 UPD40 UPD40 INS42 INS42 INS40 MOV21 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26