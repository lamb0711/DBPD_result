Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Value representing a current iteration element. This is the representation
- * used during evaluation.
+ * Value representing a current iteration element. This is the representation used during
+ * evaluation.
- * A RuntimeIterator can be in one of two states. If it is independent of the
- * current context scope then its collection is evaluated lazily, in which case
- * collection is initialized and knows its elementType. The elementType field is
- * the same value as in the collection. Otherwise, collection is UNINITIALIZED
- * and the elementType is set in any case.
+ * A RuntimeIterator can be in one of two states. If it is independent of the current context scope
+ * then its collection is evaluated lazily, in which case collection is initialized and knows its
+ * elementType. The elementType field is the same value as in the collection. Otherwise, collection
+ * is UNINITIALIZED and the elementType is set in any case.
-public class RuntimeIterator extends AbstractCompiledValue  {
+public class RuntimeIterator extends AbstractCompiledValue {
-    if (elementType == null || cmpIteratorDefn == null) { throw new IllegalArgumentException(LocalizedStrings.RuntimeIterator_ELEMENTTYPE_ANDOR_CMPITERATORDEFN_SHOULD_NOT_BE_NULL.toLocalizedString()); }
+    if (elementType == null || cmpIteratorDefn == null) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.RuntimeIterator_ELEMENTTYPE_ANDOR_CMPITERATORDEFN_SHOULD_NOT_BE_NULL
+              .toLocalizedString());
+    }
-  //  public RuntimeIterator(String name, SelectResults collection) {
-  //    if (collection == null)
-  //      throw new IllegalArgumentException("base collection must not be null");
-  //    
-  //    this.name = name; // may be null
-  //    this.collection = collection;
-  //    this.cmpIteratorDefn = null;
-  //    this.elementType = collection.getCollectionType().getElementType();
-  //  }
-  //  /** Return true if this is an iterator that is dependent on other
+  // public RuntimeIterator(String name, SelectResults collection) {
+  // if (collection == null)
+  // throw new IllegalArgumentException("base collection must not be null");
+  //
+  // this.name = name; // may be null
+  // this.collection = collection;
+  // this.cmpIteratorDefn = null;
+  // this.elementType = collection.getCollectionType().getElementType();
+  // }
+  // /** Return true if this is an iterator that is dependent on other
-  //   * in this scope (a cached result from isDependentOn(context))
-  //   */
-  //  public boolean isDependent() {
-  //    return this.isDependent;
-  //  }
+  // * in this scope (a cached result from isDependentOn(context))
+  // */
+  // public boolean isDependent() {
+  // return this.isDependent;
+  // }
-   * (Re)evaluate in the context of the current iterations through the
-   * cross-product. If this iterator is not dependent on the current iteration,
-   * then just return the previously evaluated collection. Otherwise,
-   * re-evaluate. Returns null if the collection itself is null or UNDEFINED
+   * (Re)evaluate in the context of the current iterations through the cross-product. If this
+   * iterator is not dependent on the current iteration, then just return the previously evaluated
+   * collection. Otherwise, re-evaluate. Returns null if the collection itself is null or UNDEFINED
-  public SelectResults evaluateCollection(ExecutionContext context)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
-    if (this.collection != UNINITIALIZED     
-    		&& !this.cmpIteratorDefn.isDependentOnAnyIteratorOfScopeLessThanItsOwn(context) 
-    		&& this.scopeID != IndexCreationHelper.INDEX_QUERY_SCOPE_ID) { return this.collection; }
+  public SelectResults evaluateCollection(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
+    if (this.collection != UNINITIALIZED
+        && !this.cmpIteratorDefn.isDependentOnAnyIteratorOfScopeLessThanItsOwn(context)
+        && this.scopeID != IndexCreationHelper.INDEX_QUERY_SCOPE_ID) {
+      return this.collection;
+    }
-    if (this.collection == null) { return null; }
+    if (this.collection == null) {
+      return null;
+    }
-    }
-    else {
+    } else {
-      //specific . So use that type.
+      // specific . So use that type.
-  public boolean isDependentOnIterator(RuntimeIterator itr,
-      ExecutionContext context) {
-    if (itr == this) return true; // never true(?)
+  public boolean isDependentOnIterator(RuntimeIterator itr, ExecutionContext context) {
+    if (itr == this)
+      return true; // never true(?)
-      //check field names
+      // check field names
-        if (name.equals(fieldName[i])) { return true; }
+        if (name.equals(fieldName[i])) {
+          return true;
+        }
-          clazz.getMethod(name, (Class[])null);
+          clazz.getMethod(name, (Class[]) null);
-        }
-        catch (NoSuchMethodException e) {
+        } catch (NoSuchMethodException e) {
-            return true;
+          return true;
-  //  private SelectResults prepareIteratorDef(Object obj)
-  //  throws TypeMismatchException {
-  //    if (obj == null) {
-  //      return null;
-  //    }
+  // private SelectResults prepareIteratorDef(Object obj)
+  // throws TypeMismatchException {
+  // if (obj == null) {
+  // return null;
+  // }
-  //    if (obj == QueryService.UNDEFINED) {
-  //      return null;
-  //    }
+  // if (obj == QueryService.UNDEFINED) {
+  // return null;
+  // }
-  //    if (obj instanceof SelectResults) {
-  //      // probably came from nested query or is a QRegion already from region
+  // if (obj instanceof SelectResults) {
+  // // probably came from nested query or is a QRegion already from region
-  //      return (SelectResults)obj;
-  //    }
+  // return (SelectResults)obj;
+  // }
-  //    if (obj instanceof Region) {
-  //      return new QRegion((Region)obj); // this can happen if region passed in as
+  // if (obj instanceof Region) {
+  // return new QRegion((Region)obj); // this can happen if region passed in as
-  //    }
+  // }
-  //    // if this is a domain collection, it should be unmodifiable
-  //    // if obj is a Collection but not a SelectResults, it must be from the
-  //    // domain, otherwise it would be a SelectResults.
-  //    if (obj instanceof Collection) {
-  //      // do not lose ordering and duplicate information,
-  //      ResultsCollectionWrapper res =
-  //              new ResultsCollectionWrapper(this.elementType, (Collection)obj);
-  //      res.setModifiable(false);
-  //      return res;
-  //    }
+  // // if this is a domain collection, it should be unmodifiable
+  // // if obj is a Collection but not a SelectResults, it must be from the
+  // // domain, otherwise it would be a SelectResults.
+  // if (obj instanceof Collection) {
+  // // do not lose ordering and duplicate information,
+  // ResultsCollectionWrapper res =
+  // new ResultsCollectionWrapper(this.elementType, (Collection)obj);
+  // res.setModifiable(false);
+  // return res;
+  // }
-  //    // Object[] is wrapped and considered a domain object so unmodifiable
-  //    if (obj instanceof Object[]) {
-  //      // the element type is specified in the array itself, unless we have
-  //      // something more specific
-  //      if (this.elementType.equals(TypeUtils.OBJECT_TYPE)) { // if we don't have
+  // // Object[] is wrapped and considered a domain object so unmodifiable
+  // if (obj instanceof Object[]) {
+  // // the element type is specified in the array itself, unless we have
+  // // something more specific
+  // if (this.elementType.equals(TypeUtils.OBJECT_TYPE)) { // if we don't have
-  //        this.elementType =
+  // this.elementType =
-  //      }
+  // }
-  //      // do not lose ordering and duplicate information,
-  //      ResultsCollectionWrapper res =
-  //              new ResultsCollectionWrapper(this.elementType,
+  // // do not lose ordering and duplicate information,
+  // ResultsCollectionWrapper res =
+  // new ResultsCollectionWrapper(this.elementType,
-  //      res.setModifiable(false);
-  //      return res;
-  //    }
+  // res.setModifiable(false);
+  // return res;
+  // }
-  //    if (obj instanceof Map) {
-  //      if (this.elementType.equals(TypeUtils.OBJECT_TYPE)) { // if we don't have
+  // if (obj instanceof Map) {
+  // if (this.elementType.equals(TypeUtils.OBJECT_TYPE)) { // if we don't have
-  //        elementType = TypeUtils.getObjectType(Map.Entry.class);
-  //      }
-  //      ResultsCollectionWrapper res =
-  //              new ResultsCollectionWrapper(elementType, ((Map)obj).entrySet());
-  //      res.setModifiable(false);
-  //      return res;
-  //    } else {
-  //      throw new TypeMismatchException(
-  //              "The expression in the FROM clause of a SELECT statement was type '"
-  //              + obj.getClass().getName()
-  //              + "', which cannot be interpreted as a collection");
-  //    }
-  //  }
+  // elementType = TypeUtils.getObjectType(Map.Entry.class);
+  // }
+  // ResultsCollectionWrapper res =
+  // new ResultsCollectionWrapper(elementType, ((Map)obj).entrySet());
+  // res.setModifiable(false);
+  // return res;
+  // } else {
+  // throw new TypeMismatchException(
+  // "The expression in the FROM clause of a SELECT statement was type '"
+  // + obj.getClass().getName()
+  // + "', which cannot be interpreted as a collection");
+  // }
+  // }
-    //    if(isDependent)
+    // if(isDependent)
-    //    else {
-    //      sb.append("; collection=" +this.collection + ")");
-    //      sb.append("; collectionType=" +this.collection.getCollectionType() +
+    // else {
+    // sb.append("; collection=" +this.collection + ")");
+    // sb.append("; collectionType=" +this.collection.getCollectionType() +
-    //      sb.append("; elementType="
+    // sb.append("; elementType="
-    //    }
+    // }
-    //    Support.Assert((internalId == null), "Internal ID is already set");
+    // Support.Assert((internalId == null), "Internal ID is already set");
-    //Support.Assert((internalId != null), "Internal ID is not yet set");
+    // Support.Assert((internalId != null), "Internal ID is not yet set");
-  public void generateCanonicalizedExpression(StringBuffer clauseBuffer,
-      ExecutionContext context) throws AmbiguousNameException,
-      TypeMismatchException {
-    //Asif: prepend the internal iterator variable name for this
+  public void generateCanonicalizedExpression(StringBuffer clauseBuffer, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException {
+    // Asif: prepend the internal iterator variable name for this
-      clauseBuffer.insert(0, this.index_internal_id == null ? this.internalId
-          : this.index_internal_id);
-    }
-    else {
-      clauseBuffer.insert(0, internalId).insert(0, '_').insert(0, this.scopeID)
-          .insert(0, "scope");
+      clauseBuffer.insert(0,
+          this.index_internal_id == null ? this.internalId : this.index_internal_id);
+    } else {
+      clauseBuffer.insert(0, internalId).insert(0, '_').insert(0, this.scopeID).insert(0, "scope");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66