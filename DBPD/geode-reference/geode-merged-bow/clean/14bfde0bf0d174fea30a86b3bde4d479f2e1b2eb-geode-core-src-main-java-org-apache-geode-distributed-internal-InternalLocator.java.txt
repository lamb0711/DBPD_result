Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-    ThreadGroup group = LoggingThreadGroup.createThreadGroup("Distribution locators", logger);
-        this.handler, new DelayedPoolStatHelper(), group, this.toString(), this);
+        this.handler, new DelayedPoolStatHelper(), this.toString(), this);
-    logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_STARTING_0, this));
+    logger.info("Starting {}", this);
-          LocalizedStrings.InternalLocator_PEER_LOCATION_IS_ALREADY_RUNNING_FOR_0
-              .toLocalizedString(this));
+          String.format("Peer location is already running for %s",
+              this));
-    logger.info(LocalizedMessage
-        .create(LocalizedStrings.InternalLocator_STARTING_PEER_LOCATION_FOR_0, this));
+    logger.info("Starting peer location for {}", this);
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.InternalLocator_USING_EXISTING_DISTRIBUTED_SYSTEM__0, existing));
+      logger.info("Using existing distributed system: {}", existing);
-      logger.info(
-          LocalizedMessage.create(LocalizedStrings.InternalLocator_STARTING_DISTRIBUTED_SYSTEM));
+      logger.info("Starting distributed system");
-      logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_LOCATOR_STARTED_ON__0,
-          thisLocator));
+      logger.info("Locator started on {}",
+          thisLocator);
-          LocalizedStrings.InternalLocator_SERVER_LOCATION_IS_ALREADY_RUNNING_FOR_0
-              .toLocalizedString(this));
+          String.format("Server location is already running for %s",
+              this));
-    logger.info(LocalizedMessage
-        .create(LocalizedStrings.InternalLocator_STARTING_SERVER_LOCATION_FOR_0, this));
+    logger.info("Starting server location for {}", this);
-            LocalizedStrings.InternalLocator_SINCE_SERVER_LOCATION_IS_ENABLED_THE_DISTRIBUTED_SYSTEM_MUST_BE_CONNECTED
-                .toLocalizedString());
+            "Since server location is enabled the distributed system must be connected.");
-      logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_STOPPING__0, this));
+      logger.info("Stopping {}", this);
-        this.server.join(TcpServer.SHUTDOWN_WAIT_TIME * 1000 + 10000);
+        // TcpServer up to SHUTDOWN_WAIT_TIME for its executor pool to shut down.
+        // We wait 2 * SHUTDOWN_WAIT_TIME here to account for that shutdown, and then our own.
+        this.server.join(TcpServer.SHUTDOWN_WAIT_TIME * 2);
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.InternalLocator_INTERRUPTED_WHILE_STOPPING__0, this), ex);
+        logger.warn("Interrupted while stopping " + this, ex);
-        logger.fatal(LocalizedMessage
-            .create(LocalizedStrings.InternalLocator_COULD_NOT_STOP__0__IN_60_SECONDS, this));
+        logger.fatal("Could not stop {} in 60 seconds", this);
-    logger.info(LocalizedMessage.create(LocalizedStrings.InternalLocator_0__IS_STOPPED, this));
+    logger.info("{} is stopped", this);
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.InternalLocator_DISCONNECTING_DISTRIBUTED_SYSTEM_FOR_0, this));
+        logger.info("Disconnecting distributed system for {}", this);
-    // create a thread group having a last-chance exception-handler
-    ThreadGroup group = LoggingThreadGroup.createThreadGroup("Locator restart thread group");
-    // TODO: non-atomic operation on volatile field restartThread
-    this.restartThread = new Thread(group, "Location services restart thread") {
-      @Override
-      public void run() {
-        boolean restarted = false;
-        try {
-          restarted = attemptReconnect();
-          logger.info("attemptReconnect returned {}", restarted);
-        } catch (InterruptedException e) {
-          logger.info("attempt to restart location services was interrupted", e);
-        } catch (IOException e) {
-          logger.info("attempt to restart location services terminated", e);
-        } finally {
-          if (!restarted) {
-            stoppedForReconnect = false;
-          }
-          reconnected = restarted;
+    String threadName = "Location services restart thread";
+    this.restartThread = new LoggingThread(threadName, () -> {
+      boolean restarted = false;
+      try {
+        restarted = attemptReconnect();
+        logger.info("attemptReconnect returned {}", restarted);
+      } catch (InterruptedException e) {
+        logger.info("attempt to restart location services was interrupted", e);
+      } catch (IOException e) {
+        logger.info("attempt to restart location services terminated", e);
+      } finally {
+        if (!restarted) {
+          stoppedForReconnect = false;
-        InternalLocator.this.restartThread = null;
+        reconnected = restarted;
-    };
-    this.restartThread.setDaemon(true);
+      InternalLocator.this.restartThread = null;
+    });
-          boolean start = checker.checkForQuorum(3 * this.myDs.getConfig().getMemberTimeout());
+          boolean start = checker.checkForQuorum(3L * this.myDs.getConfig().getMemberTimeout());
-              giveup = System.currentTimeMillis() + locatorWaitTime * 1000;
+              giveup = System.currentTimeMillis() + locatorWaitTime * 1000L;

UPD40 MOV31 MOV29 UPD83 INS42 INS8 INS60 INS21 MOV21 INS43 INS59 INS7 INS45 MOV52 INS45 MOV52 INS45 MOV52 INS45 MOV52 INS42 INS42 INS45 MOV22 INS14 INS43 INS42 INS86 INS45 MOV42 INS45 INS45 MOV42 MOV43 INS45 MOV52 INS42 MOV8 UPD42 INS42 INS45 UPD42 INS42 INS45 MOV43 INS45 INS27 INS45 MOV52 INS45 MOV52 MOV40 UPD34 MOV34 INS27 INS45 INS52 UPD34 UPD34 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL34 DEL27 DEL42 DEL42 DEL40 DEL52 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL78 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL1 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31