GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>
+import io.micrometer.core.instrument.MeterRegistry;
+
- * Publishes metrics generated by Micrometer meters in the cache meter registry.
+ * Publishes metrics managed by a {@link MetricsSession}.
- * Geode discovers {@code MetricsPublishingService}s during cache creation, using the standard Java
+ * Geode discovers {@code MetricsPublishingService}s during system creation, using the standard Java
- *     // add your registry as a sub-registry to the cache's composite registry
+ *     // add your registry as a sub-registry to the session
-   * Invoked when a metrics session is started during cache initialization. The implementation can
-   * use the metrics session to add sub-registries to the cache's composite registry for publishing
-   * metrics to external monitoring systems.
+   * Invoked when a metrics session starts. A typical implementation will create a meter registry
+   * that can publish to an external monitoring system, and call
+   * {@link MetricsSession#addSubregistry(MeterRegistry)} to add that registry to the session.
-   * @param session the metrics session that is used to connect sub-registries
+   * @param session the metrics session whose metrics this publishing service will publish
-   * Invoked when a metrics session is stopped during cache close.
+   * Invoked when a metrics session stops. The implementation should call
+   * {@link MetricsSession#removeSubregistry(MeterRegistry)} to remove each meter registry it added
+   * to the session. The implementation should also clean up any other resources it allocated during
+   *
+   * @param session the metrics session whose metrics this publishing service was publishing
+   *        {@link #start(MetricsSession)}.
-  void stop();
+  void stop(MetricsSession session);

INS26 INS40 INS44 UPD66 INS65 INS66 UPD66 UPD66 INS65 INS43 INS42 INS42 UPD66 UPD66 INS65 UPD66 UPD66 UPD66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS68 INS68 INS68 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS69 INS43 INS43 INS43 INS42 INS42 INS42