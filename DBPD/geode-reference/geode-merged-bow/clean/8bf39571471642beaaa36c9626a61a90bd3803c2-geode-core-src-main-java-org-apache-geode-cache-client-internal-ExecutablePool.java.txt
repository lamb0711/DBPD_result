Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * Execute the given op on the servers that this pool connects to.
-   * This method is responsible for retrying the op if an attempt fails.
-   * It will only execute it once and on one server.
+   * Execute the given op on the servers that this pool connects to. This method is responsible for
+   * retrying the op if an attempt fails. It will only execute it once and on one server.
+   * 
-  
+
-   * Execute the given op on the servers that this pool connects to.
-   * This method is responsible for retrying the op if an attempt fails.
-   * It will only execute it once and on one server.
+   * Execute the given op on the servers that this pool connects to. This method is responsible for
+   * retrying the op if an attempt fails. It will only execute it once and on one server.
+   * 
-  
+
-   * Execute the given op on all the servers that have server-to-client queues
-   * for this pool The last exception from any server will be thrown if the op fails.
-   * The op is executed with the primary first, followed by the backups.
+   * Execute the given op on all the servers that have server-to-client queues for this pool The
+   * last exception from any server will be thrown if the op fails. The op is executed with the
+   * primary first, followed by the backups.
-   * @param op
-   *                the operation to execute.
+   * @param op the operation to execute.
-  public void executeOnAllQueueServers(Op op) throws NoSubscriptionServersAvailableException, SubscriptionNotEnabledException;
+  public void executeOnAllQueueServers(Op op)
+      throws NoSubscriptionServersAvailableException, SubscriptionNotEnabledException;
+
-   * Execute the given op on all the servers that have server-to-client queues
-   * for this pool. The op will be executed on all backups, and then the primary.
-   * This method will block until a primary is available.
+   * Execute the given op on all the servers that have server-to-client queues for this pool. The op
+   * will be executed on all backups, and then the primary. This method will block until a primary
+   * is available.
-   * @param op
-   *                the operation to execute
+   * @param op the operation to execute
-  public Object executeOnQueuesAndReturnPrimaryResult(Op op)  throws NoSubscriptionServersAvailableException, SubscriptionNotEnabledException;
+  public Object executeOnQueuesAndReturnPrimaryResult(Op op)
+      throws NoSubscriptionServersAvailableException, SubscriptionNotEnabledException;
+
+   * 
+
+   * 
-  public Object executeOn(ServerLocation server, Op op, boolean accessed,boolean onlyUseExistingCnx);
+  public Object executeOn(ServerLocation server, Op op, boolean accessed,
+      boolean onlyUseExistingCnx);
+
+   * 
+
+   * 
+
+   * 
+
-  
+
-   * Release the connection held by the calling
-   * thread if we're using thread local connections
+   * Release the connection held by the calling thread if we're using thread local connections
-  
+
-   * The calling thread will connect to only one server for
-   * executing all ops until it calls {@link #releaseServerAffinity()}
-   * @param allowFailover true if we want to failover to another
-   * server when the first server is unreachable. Affinity to the
-   * new server will be maintained
+   * The calling thread will connect to only one server for executing all ops until it calls
+   * {@link #releaseServerAffinity()}
+   * 
+   * @param allowFailover true if we want to failover to another server when the first server is
+   *        unreachable. Affinity to the new server will be maintained
-  
+
-   * Release the server affinity established
-   * by {@link #setupServerAffinity(boolean)}
+   * Release the server affinity established by {@link #setupServerAffinity(boolean)}
+   * 
-  
+
-   * When server affinity is enabled by this thread, returns the server against which all ops in this thread are performed 
+   * When server affinity is enabled by this thread, returns the server against which all ops in
+   * this thread are performed
+   * 
-   * @see ExecutablePool#setupServerAffinity(boolean) 
+   * @see ExecutablePool#setupServerAffinity(boolean)
-  
+
-   * All subsequent operations by this thread will be performed on
-   * the given ServerLocation. Used for resuming suspended transactions.
+   * All subsequent operations by this thread will be performed on the given ServerLocation. Used
+   * for resuming suspended transactions.
+   * 

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66