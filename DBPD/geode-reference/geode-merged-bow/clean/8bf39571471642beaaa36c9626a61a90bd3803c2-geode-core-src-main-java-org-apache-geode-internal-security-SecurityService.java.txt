Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-  Object postProcess(Object principal, String regionPath, Object key, Object value, boolean valueIsSerialized);
+
+  Object postProcess(Object principal, String regionPath, Object key, Object value,
+      boolean valueIsSerialized);
+
+
+
+
+
-   * this method would never return null, it either throws an exception or
-   * returns an object
+   * this method would never return null, it either throws an exception or returns an object
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-    if(!expectedClazz.isAssignableFrom(actualClass)){
-      throw new GemFireSecurityException("Instance could not be obtained. Expecting a "+expectedClazz.getName()+" class.");
+    if (!expectedClazz.isAssignableFrom(actualClass)) {
+      throw new GemFireSecurityException(
+          "Instance could not be obtained. Expecting a " + expectedClazz.getName() + " class.");
-      actualObject =  (T)actualClass.newInstance();
+      actualObject = (T) actualClass.newInstance();
-      throw new GemFireSecurityException("Instance could not be obtained. Error instantiating "+actualClass.getName(), e);
+      throw new GemFireSecurityException(
+          "Instance could not be obtained. Error instantiating " + actualClass.getName(), e);
-   * this method would never return null, it either throws an exception or
-   * returns an object
+   * this method would never return null, it either throws an exception or returns an object
-  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
+  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName,
+      Class<T> expectedClazz) {
-      actualObject = (T)factoryMethod.invoke(null, (Object[])null);
+      actualObject = (T) factoryMethod.invoke(null, (Object[]) null);
-      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName, e);
+      throw new GemFireSecurityException("Instance could not be obtained from " + factoryMethodName,
+          e);
-    if(actualObject == null){
-      throw new GemFireSecurityException("Instance could not be obtained from " + factoryMethodName);
+    if (actualObject == null) {
+      throw new GemFireSecurityException(
+          "Instance could not be obtained from " + factoryMethodName);
-   * this method would never return null, it either throws an exception or
-   * returns an object
+   * this method would never return null, it either throws an exception or returns an object
-   * @return an object of type expectedClazz. This method would never return
-   * null. It either returns an non-null object or throws exception.
+   * @return an object of type expectedClazz. This method would never return null. It either returns
+   *         an non-null object or throws exception.
-    try{
+    try {
-    }
-    catch (Exception e){
+    } catch (Exception e) {
-  public static Properties getCredentials(Properties securityProps){
+  public static Properties getCredentials(Properties securityProps) {
-    if(securityProps.containsKey(ResourceConstants.USER_NAME) && securityProps.containsKey(ResourceConstants.PASSWORD)){
+    if (securityProps.containsKey(ResourceConstants.USER_NAME)
+        && securityProps.containsKey(ResourceConstants.PASSWORD)) {
-      credentials.setProperty(ResourceConstants.USER_NAME, securityProps.getProperty(ResourceConstants.USER_NAME));
-      credentials.setProperty(ResourceConstants.PASSWORD, securityProps.getProperty(ResourceConstants.PASSWORD));
+      credentials.setProperty(ResourceConstants.USER_NAME,
+          securityProps.getProperty(ResourceConstants.USER_NAME));
+      credentials.setProperty(ResourceConstants.PASSWORD,
+          securityProps.getProperty(ResourceConstants.PASSWORD));
-  static SecurityService getSecurityService(){
+  static SecurityService getSecurityService() {

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66