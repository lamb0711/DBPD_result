Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides static utilities for manipulating, validating, and converting
- * InetAddresses and host strings.
+ * Provides static utilities for manipulating, validating, and converting InetAddresses and host
+ * strings.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-  
+
-  
-  /** InetAddress instance representing the local host  */
+
+  /** InetAddress instance representing the local host */
-  
-  public static  final String LOOPBACK_ADDRESS =
-    SocketCreator.preferIPv6Addresses() ? "::1" : "127.0.0.1"; 
-  
-  public static final InetAddress LOOPBACK = 
-      InetAddressUtil.toInetAddress(LOOPBACK_ADDRESS);
-  
+
+  public static final String LOOPBACK_ADDRESS =
+      SocketCreator.preferIPv6Addresses() ? "::1" : "127.0.0.1";
+
+  public static final InetAddress LOOPBACK = InetAddressUtil.toInetAddress(LOOPBACK_ADDRESS);
+
-  /** 
-   * Returns a string version of InetAddress which can be converted back to an 
-   * InetAddress later.  Essentially any leading slash is trimmed.
+  /**
+   * Returns a string version of InetAddress which can be converted back to an InetAddress later.
+   * Essentially any leading slash is trimmed.
-  
-  /** 
-   * Converts the string host to an instance of InetAddress.  Returns null if
-   * the string is empty.  Fails Assertion if the conversion would result in
-   * <code>java.lang.UnknownHostException</code>.
+
+  /**
+   * Converts the string host to an instance of InetAddress. Returns null if the string is empty.
+   * Fails Assertion if the conversion would result in <code>java.lang.UnknownHostException</code>.
-   * @param   host  string version the InetAddress
-   * @return  the host converted to InetAddress instance
+   * @param host string version the InetAddress
+   * @return the host converted to InetAddress instance
-      }
-      else {
+      } else {
-  /** 
-   * Creates an InetAddress representing the local host.  The checked exception
-   * <code>java.lang.UnknownHostException</code> is captured and results in
-   * an Assertion failure instead.
+  /**
+   * Creates an InetAddress representing the local host. The checked exception
+   * <code>java.lang.UnknownHostException</code> is captured and results in an Assertion failure
+   * instead.
-  /** 
-   * Validates the host by making sure it can successfully be used to get an
-   * instance of InetAddress.  If the host string is null, empty or would result
-   * in <code>java.lang.UnknownHostException</code> then null is returned.
+  /**
+   * Validates the host by making sure it can successfully be used to get an instance of
+   * InetAddress. If the host string is null, empty or would result in
+   * <code>java.lang.UnknownHostException</code> then null is returned.
-   * @param   host  string version the InetAddress
-   * @return  the host converted to InetAddress instance
+   * @param host string version the InetAddress
+   * @return the host converted to InetAddress instance
-      return null; 
+      return null;
-    } catch (java.net.UnknownHostException e) { 
+    } catch (java.net.UnknownHostException e) {
-      }
-      else {
-//        InetAddress hostAddr = (InetAddress)host;
+      } else {
+        // InetAddress hostAddr = (InetAddress)host;
-          Enumeration en=NetworkInterface.getNetworkInterfaces();
-          while(en.hasMoreElements()) {
-            NetworkInterface i=(NetworkInterface)en.nextElement();
-            for(Enumeration en2=i.getInetAddresses(); en2.hasMoreElements();) {
-              InetAddress addr=(InetAddress)en2.nextElement();
+          Enumeration en = NetworkInterface.getNetworkInterfaces();
+          while (en.hasMoreElements()) {
+            NetworkInterface i = (NetworkInterface) en.nextElement();
+            for (Enumeration en2 = i.getInetAddresses(); en2.hasMoreElements();) {
+              InetAddress addr = (InetAddress) en2.nextElement();
-        }
-        catch (SocketException e) {
-          throw new GemFireIOException(LocalizedStrings.InetAddressUtil_UNABLE_TO_QUERY_NETWORK_INTERFACE.toLocalizedString(), e);
+        } catch (SocketException e) {
+          throw new GemFireIOException(
+              LocalizedStrings.InetAddressUtil_UNABLE_TO_QUERY_NETWORK_INTERFACE
+                  .toLocalizedString(),
+              e);
-    }
-    else {
+    } else {
-  
+
-    }
-    else {
+    } else {
-  
+
-    if (value == null) return "";
+    if (value == null)
+      return "";
-   * Logs the stack trace for the given Throwable if logger is initialized else
-   * prints the stack trace using System.out. If logged the logs are logged at 
-   * WARNING level.
+   * Logs the stack trace for the given Throwable if logger is initialized else prints the stack
+   * trace using System.out. If logged the logs are logged at WARNING level.
-   * @param throwable
-   *          Throwable to log stack trace for
+   * @param throwable Throwable to log stack trace for
-    AdminDistributedSystemImpl adminDS = 
-                              AdminDistributedSystemImpl.getConnectedInstance();
+    AdminDistributedSystemImpl adminDS = AdminDistributedSystemImpl.getConnectedInstance();
-  }  
-  
+  }
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66