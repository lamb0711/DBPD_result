Merge branch 'feature/GEODE-17-2' into develop

+import java.util.concurrent.Callable;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.management.ManagementService;
+import com.gemstone.gemfire.management.internal.SystemManagementService;
-import com.gemstone.gemfire.management.internal.web.controllers.support.EnvironmentVariablesHandlerInterceptor;
+import com.gemstone.gemfire.management.internal.web.controllers.support.LoginHandlerInterceptor;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import org.springframework.web.bind.annotation.ResponseStatus;
-import org.springframework.web.util.UriComponentsBuilder;
+
+
+  private Class accessControlKlass;
+
+
+  // Convert a predefined exception to an HTTP Status code
+  @ResponseStatus(value=HttpStatus.UNAUTHORIZED, reason="Not authenticated")  // 401
+  @ExceptionHandler(com.gemstone.gemfire.security.AuthenticationFailedException.class)
+  public void authenticate() {
+
+  }
+
+  // Convert a predefined exception to an HTTP Status code
+  @ResponseStatus(value=HttpStatus.FORBIDDEN, reason="Access Denied")  // 403
+  @ExceptionHandler(java.lang.SecurityException.class)
+  public void authorize() {
+
+  }
+
+
-      final MBeanServer platformMBeanServer = getMBeanServer();
+      SystemManagementService service = (SystemManagementService) ManagementService
+          .getExistingManagementService(GemFireCacheImpl.getInstance());
+      MBeanServer mbs = getMBeanServer();
-      final DistributedSystemMXBean distributedSystemMXBean = JMX.newMXBeanProxy(platformMBeanServer,
+      final DistributedSystemMXBean distributedSystemMXBean = JMX.newMXBeanProxy(mbs,
-      //managingMemberMXBeanProxy = createMemberMXBeanForManagerUsingAdapter(platformMBeanServer,
-      //  distributedSystemMXBean.getMemberObjectName());
-
-      managingMemberMXBeanProxy = createMemberMXBeanForManagerUsingProxy(platformMBeanServer,
+      managingMemberMXBeanProxy = createMemberMXBeanForManagerUsingProxy(mbs,
+  protected synchronized ObjectName getMemberObjectName() {
+    final MBeanServer platformMBeanServer = getMBeanServer();
+
+    final DistributedSystemMXBean distributedSystemMXBean = JMX.newMXBeanProxy(platformMBeanServer,
+        MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
+
+    return distributedSystemMXBean.getMemberObjectName();
+  }
+
-   * @see com.gemstone.gemfire.management.internal.web.controllers.support.EnvironmentVariablesHandlerInterceptor#getEnvironment()
+   * @see LoginHandlerInterceptor#getEnvironment()
-    environment.putAll(EnvironmentVariablesHandlerInterceptor.getEnvironment());
+    environment.putAll(LoginHandlerInterceptor.getEnvironment());
-   * @see com.gemstone.gemfire.management.internal.web.controllers.support.EnvironmentVariablesHandlerInterceptor#getEnvironment()
+   * @see LoginHandlerInterceptor#getEnvironment()
+  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command){
+    return getProcessCommandCallable(command, null);
+  }
+
+  protected Callable<ResponseEntity<String>> getProcessCommandCallable(final String command, final byte[][] fileData){
+    Callable callable = new Callable<ResponseEntity<String>>() {
+      @Override public ResponseEntity<String> call() throws Exception {
+        return new ResponseEntity<String>(processCommand(command, fileData), HttpStatus.OK);
+      }
+    };
+    return GeodeSecurityUtil.associateWith(callable);
+  }
+
-   * @see com.gemstone.gemfire.management.internal.web.controllers.support.EnvironmentVariablesHandlerInterceptor#getEnvironment()
+   * @see LoginHandlerInterceptor#getEnvironment()
-   * @see com.gemstone.gemfire.management.internal.web.controllers.support.EnvironmentVariablesHandlerInterceptor#getEnvironment()
+   * @see LoginHandlerInterceptor#getEnvironment()
-    logger.info(LogMarker.CONFIG, "Processing Command ({}) with Environment ({}) having File Data ({})...",
-        command, environment, (fileData != null));
-    
-    return getManagingMemberMXBean().processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+    logger.info(LogMarker.CONFIG, "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
+        environment, (fileData != null));
+    String result =  getManagingMemberMXBean().processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+
+    return result;
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS77 INS79 INS83 INS39 INS42 INS8 INS77 INS79 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 MOV8 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS80 INS80 INS42 INS57 INS42 INS80 INS80 INS42 INS57 INS42 INS41 INS43 INS74 INS83 INS43 INS42 INS41 INS43 INS74 INS83 INS43 INS42 INS83 INS5 INS42 INS60 INS41 INS60 INS42 INS40 INS42 INS45 INS43 INS42 INS40 INS42 INS45 INS43 INS8 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS43 INS43 INS42 INS39 INS85 INS85 INS43 INS59 INS32 INS43 INS59 INS42 INS40 INS40 INS60 INS60 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS43 INS59 INS43 INS59 INS83 INS43 INS59 UPD42 INS74 INS1 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS74 INS31 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS57 UPD42 INS42 INS43 INS43 INS78 INS83 INS74 INS42 INS43 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS14 INS74 INS32 INS40 INS43 INS43 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL40