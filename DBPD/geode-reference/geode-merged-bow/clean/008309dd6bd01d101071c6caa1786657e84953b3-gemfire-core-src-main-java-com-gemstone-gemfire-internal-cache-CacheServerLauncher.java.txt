Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  protected String maxHeapSize;
+  protected String initialHeapSize;
+  protected String offHeapSize;
+
-    out.println("cacheserver start [-J<vmarg>]* [<attName>=<attValue>]* [-dir=<workingdir>] [-classpath=<classpath>] [-disable-default-server] [-rebalance] [-server-port=<server-port>] [-server-bind-address=<server-bind-address>]\n" );
+    out.println("cacheserver start [-J<vmarg>]* [<attName>=<attValue>]* [-dir=<workingdir>] [-classpath=<classpath>] [-disable-default-server] [-rebalance] [-lock-memory] [-server-port=<server-port>] [-server-bind-address=<server-bind-address>] [-critical-heap-percentage=<critical-heap-percentage>] [-eviction-heap-percentage=<eviction-heap-percentage>] [-critical-off-heap-percentage=<critical-off-heap-percentage>] [-eviction-off-heap-percentage=<eviction-off-heap-percentage>]\n" );
+    out.println("\t" + LocalizedStrings.CacheServerLauncher_CRITICAL_HEAP_PERCENTAGE.toLocalizedString());
+    out.println("\t" + LocalizedStrings.CacheServerLauncher_EVICTION_HEAP_PERCENTAGE.toLocalizedString());
+    out.println("\t" + LocalizedStrings.CacheServerLauncher_CRITICAL_OFF_HEAP_PERCENTAGE.toLocalizedString());
+    out.println("\t" + LocalizedStrings.CacheServerLauncher_EVICTION_OFF_HEAP_PERCENTAGE.toLocalizedString());
+    out.println("\t" + LocalizedStrings.CacheServerLauncher_LOCK_MEMORY.toLocalizedString());
+
-  static final String REBALANCE = "rebalance";
-  static final String SERVER_PORT = "server-port";
-  static final String SERVER_BIND_ADDRESS = "server-bind-address";
-  static final String DISABLE_DEFAULT_SERVER = "disable-default-server";
+  protected static final String REBALANCE = "rebalance";
+  protected static final String SERVER_PORT = "server-port";
+  protected static final String SERVER_BIND_ADDRESS = "server-bind-address";
+  protected static final String DISABLE_DEFAULT_SERVER = "disable-default-server";
+  public static final String CRITICAL_HEAP_PERCENTAGE =
+    "critical-heap-percentage";
+  public static final String EVICTION_HEAP_PERCENTAGE =
+      "eviction-heap-percentage";
+  public static final String CRITICAL_OFF_HEAP_PERCENTAGE =
+      "critical-off-heap-percentage";
+  public static final String EVICTION_OFF_HEAP_PERCENTAGE =
+      "eviction-off-heap-percentage";
+  protected static final String LOCK_MEMORY = "lock-memory";
+      else if (arg.startsWith("-lock-memory")) {
+        if (System.getProperty("os.name").indexOf("Windows") >= 0) {
+          throw new IllegalArgumentException("Unable to lock memory on this operating system");
+        }
+        props.put(DistributionConfig.LOCK_MEMORY_NAME, "true");
+      }
+      else if (arg.startsWith("-" + CRITICAL_HEAP_PERCENTAGE) ) {
+        options.put(CRITICAL_HEAP_PERCENTAGE, arg);
+      }
+      else if (arg.startsWith("-" + EVICTION_HEAP_PERCENTAGE) ) {
+        options.put(EVICTION_HEAP_PERCENTAGE, arg);
+      }
+      else if (arg.startsWith("-" + CRITICAL_OFF_HEAP_PERCENTAGE) ) {
+        options.put(CRITICAL_OFF_HEAP_PERCENTAGE, arg);
+      }
+      else if (arg.startsWith("-" + EVICTION_OFF_HEAP_PERCENTAGE) ) {
+        options.put(EVICTION_OFF_HEAP_PERCENTAGE, arg);
+      }
-        vmArgs.add(arg.substring(2));
+        String vmArg = arg.substring(2);
+        if (vmArg.startsWith("-Xmx")) {
+          this.maxHeapSize = vmArg.substring(4);
+        } else if (vmArg.startsWith("-Xms")) {
+          this.initialHeapSize = vmArg.substring(4);
+        }
+        vmArgs.add(vmArg);
+      else if (arg.startsWith("-lock-memory")) {
+        props.put(DistributionConfig.LOCK_MEMORY_NAME, "true");
+      }
+      else if (arg.startsWith("-" + CRITICAL_HEAP_PERCENTAGE)) {
+        options.put(CRITICAL_HEAP_PERCENTAGE, arg.substring(arg.indexOf("=") + 1));
+      }
+      else if (arg.startsWith("-" + EVICTION_HEAP_PERCENTAGE)) {
+        options.put(EVICTION_HEAP_PERCENTAGE, arg.substring(arg.indexOf("=") + 1));
+      }
+      else if (arg.startsWith("-" + CRITICAL_OFF_HEAP_PERCENTAGE)) {
+        options.put(CRITICAL_OFF_HEAP_PERCENTAGE, arg.substring(arg.indexOf("=") + 1));
+      }
+      else if (arg.startsWith("-" + EVICTION_OFF_HEAP_PERCENTAGE)) {
+        options.put(EVICTION_OFF_HEAP_PERCENTAGE, arg.substring(arg.indexOf("=") + 1));
+      }
-    Cache cache = this.createCache(system);
+    Cache cache = this.createCache(system, options);
-  protected Cache createCache(InternalDistributedSystem system) throws IOException {
+  protected static float getCriticalHeapPercent(Map<String, Object> options) {
+    if (options != null) {
+      String criticalHeapThreshold = (String)options
+          .get(CRITICAL_HEAP_PERCENTAGE);
+      if (criticalHeapThreshold != null) {
+        return Float.parseFloat(criticalHeapThreshold
+            .substring(criticalHeapThreshold.indexOf("=") + 1));
+      }
+    }
+    return -1.0f;
+  }
+  
+  protected static float getEvictionHeapPercent(Map<String, Object> options) {
+    if (options != null) {
+      String evictionHeapThreshold = (String)options
+          .get(EVICTION_HEAP_PERCENTAGE);
+      if (evictionHeapThreshold != null) {
+        return Float.parseFloat(evictionHeapThreshold
+            .substring(evictionHeapThreshold.indexOf("=") + 1));
+      }
+    }
+    return -1.0f;
+  }
+  
+  protected static float getCriticalOffHeapPercent(Map<String, Object> options) {
+    if (options != null) {
+      String criticalOffHeapThreshold = (String)options
+          .get(CRITICAL_OFF_HEAP_PERCENTAGE);
+      if (criticalOffHeapThreshold != null) {
+        return Float.parseFloat(criticalOffHeapThreshold
+            .substring(criticalOffHeapThreshold.indexOf("=") + 1));
+      }
+    }
+    return -1.0f;
+  }
+  
+  protected static float getEvictionOffHeapPercent(Map<String, Object> options) {
+    if (options != null) {
+      String evictionOffHeapThreshold = (String)options
+          .get(EVICTION_OFF_HEAP_PERCENTAGE);
+      if (evictionOffHeapThreshold != null) {
+        return Float.parseFloat(evictionOffHeapThreshold
+            .substring(evictionOffHeapThreshold.indexOf("=") + 1));
+      }
+    }
+    return -1.0f;
+  }
+  
+  protected Cache createCache(InternalDistributedSystem system, Map<String, Object> options) throws IOException {
+    float threshold = getCriticalHeapPercent(options);
+    if (threshold > 0.0f) {
+      cache.getResourceManager().setCriticalHeapPercentage(threshold);
+    }
+    threshold = getEvictionHeapPercent(options);
+    if (threshold > 0.0f) {
+      cache.getResourceManager().setEvictionHeapPercentage(threshold);
+    }
+    
+    threshold = getCriticalOffHeapPercent(options);
+    getCriticalOffHeapPercent(options);
+    if (threshold > 0.0f) {
+      cache.getResourceManager().setCriticalOffHeapPercentage(threshold);
+    }
+    threshold = getEvictionOffHeapPercent(options);
+    if (threshold > 0.0f) {
+      cache.getResourceManager().setEvictionOffHeapPercentage(threshold);
+    }
+
+
+    String criticalHeapThreshold = (String)options.get(CRITICAL_HEAP_PERCENTAGE);
+    if (criticalHeapThreshold != null) {
+      commandLineWrapper.add(criticalHeapThreshold);
+    }
+    String evictionHeapThreshold = (String)options
+        .get(EVICTION_HEAP_PERCENTAGE);
+    if (evictionHeapThreshold != null) {
+      commandLineWrapper.add(evictionHeapThreshold);
+    }
+    
+    String criticalOffHeapThreshold = (String)options.get(CRITICAL_OFF_HEAP_PERCENTAGE);
+    if (criticalOffHeapThreshold != null) {
+      commandLineWrapper.add(criticalOffHeapThreshold);
+    }
+    String evictionOffHeapThreshold = (String)options
+        .get(EVICTION_OFF_HEAP_PERCENTAGE);
+    if (evictionOffHeapThreshold != null) {
+      commandLineWrapper.add(evictionOffHeapThreshold);
+    }
+

INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 MOV21 MOV21 MOV21 MOV21 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS44 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS74 INS42 INS25 INS41 INS74 INS42 INS25 INS41 INS74 INS42 INS25 INS41 INS74 INS42 INS25 INS41 INS74 INS42 INS60 INS25 INS21 INS25 INS21 INS21 INS25 INS21 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS32 INS32 INS32 INS32 INS32 INS43 INS43 INS43 INS27 INS8 INS38 INS43 INS43 INS43 INS27 INS8 INS38 INS43 INS43 INS43 INS27 INS8 INS38 INS43 INS43 INS43 INS27 INS8 INS38 INS43 INS43 INS43 INS39 INS59 INS27 INS8 INS7 INS27 INS8 INS7 INS32 INS27 INS8 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 UPD45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS34 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS34 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS34 INS42 INS42 INS42 INS42 INS33 INS60 INS25 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS34 INS21 INS42 INS32 INS42 INS42 INS42 INS34 INS21 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS11 INS42 INS33 INS41 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 MOV25 INS32 INS8 MOV25 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS25 INS21 INS25 INS42 INS42 INS45 INS21 INS25 INS32 INS34 INS32 INS34 INS32 INS34 INS32 INS34 INS27 INS8 INS32 MOV32 MOV8 INS25 INS32 MOV32 MOV8 INS25 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS34 INS53 INS42 INS42 INS40 INS45 INS32 INS8 INS25 INS42 INS42 INS40 INS45 INS32 INS8 INS25 INS32 INS42 INS45 INS14 INS42 INS42 INS27 INS21 INS32 INS8 INS25 INS42 INS42 INS27 INS21 INS32 INS8 INS25 INS42 INS42 INS45 INS43 INS45 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS32 INS8 MOV25 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS32 INS8 MOV25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS32 INS8 INS42 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS27 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS45 INS32 INS34 INS42 INS42 INS27 INS42 INS42 MOV32 INS42 INS42 INS45 INS21 INS32 INS8 INS42 INS42 INS42 INS45 INS32 INS34 INS7 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS22 INS32 INS7 INS52 INS42 INS42 INS42 INS34 INS22 INS32 INS52 INS42 INS42 INS42 INS34