GEODE-1571: Allow AuthInit to take either a constructor or a static factory method

* Allow AuthInit to take either a constructor or a static factory method
* add more javadoc
* simplify security check
* fix test failures

+import java.lang.reflect.Method;
+import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.GeodePermission.Operation;
+import org.apache.geode.security.GeodePermission.Resource;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
-import org.apache.shiro.UnavailableSecurityManagerException;
-import org.apache.geode.security.GeodePermission;
-import org.apache.geode.security.GeodePermission.Operation;
-import org.apache.geode.security.GeodePermission.Resource;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.SecurityManager;
-    if (!isSecured()) {
+    if (!isIntegratedSecure) {
-    if (!isSecured()) {
+    if (!isIntegratedSecure) {
-  private static boolean isSecured() {
-    try {
-      SecurityUtils.getSecurityManager();
-    }
-    catch (UnavailableSecurityManagerException e) {
-      return false;
-    }
-    return true;
-  }
-
+  private static boolean isSecure;
+  private static boolean isIntegratedSecure;
+    String clientAuthenticatorConfig = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
+      isSecure = true;
+      isIntegratedSecure = true;
-
-      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
+      isSecure = true;
+      isIntegratedSecure = true;
+    }
+    else if( !StringUtils.isBlank(clientAuthenticatorConfig)) {
+      isSecure = true;
+      isIntegratedSecure = false;
+      isSecure = false;
+      isIntegratedSecure = false;
-      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
+      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
+    isSecure = false;
+    isIntegratedSecure = false;
-    Subject subject = getSubject();
-    return (subject != null && postProcessor != null);
+    return (isIntegratedSecure && postProcessor != null);
-  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param className
+   * @param expectedClazz
+   * @param <T>
+   * @return
+   */
+  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
-      throw new GemFireSecurityException(ex.toString(), ex);
+      throw new GemFireSecurityException("Instance could not be obtained, "+ex.toString(), ex);
-      throw new GemFireSecurityException("Expecting a "+expectedClazz.getName()+" class.");
+      throw new GemFireSecurityException("Instance could not be obtained. Expecting a "+expectedClazz.getName()+" class.");
-      throw new GemFireSecurityException("Error instantiating "+actualClass.getName(), e);
+      throw new GemFireSecurityException("Instance could not be obtained. Error instantiating "+actualClass.getName(), e);
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param factoryMethodName
+   * @param expectedClazz
+   * @param <T>
+   * @return
+   */
+  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
+    T actualObject = null;
+    try {
+      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
+      actualObject = (T)factoryMethod.invoke(null, (Object[])null);
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName, e);
+    }
+
+    if(actualObject == null){
+      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName);
+    }
+
+    return actualObject;
+  }
+
+  /**
+   * this method would never return null, it either throws an exception or returns an object
+   * @param classOrMethod
+   * @param expectedClazz
+   * @param <T>
+   * @return an object of type expectedClazz. This method would never return null. It either returns an non-null
+   * object or throws exception.
+   */
+  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
+    T object = null;
+    try{
+      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
+    }
+    catch (Exception e){
+      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
+    }
+    return object;
+  }
+
-  public static boolean isSecurityRequired(Properties securityProps){
-    String authenticator = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
-    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
-    return !StringUtils.isEmpty(authenticator) || !StringUtils.isEmpty(securityManager);
+  public static boolean isSecurityRequired(){
+    return isSecure;
-  public static boolean isIntegratedSecurity(Properties securityProps){
-    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
-    return !StringUtils.isEmpty(securityManager);
+  public static boolean isIntegratedSecurity(){
+    return isIntegratedSecure;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS29 UPD42 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 MOV8 INS29 INS73 INS43 INS42 INS44 MOV83 MOV83 MOV39 UPD42 MOV42 INS8 INS83 INS83 INS39 INS42 MOV8 INS42 INS42 INS60 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 MOV43 INS42 INS74 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS42 INS42 MOV43 INS42 INS74 INS42 INS54 INS41 INS41 INS43 INS59 INS7 INS7 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS66 INS43 INS43 UPD43 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 INS21 INS25 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS33 INS60 INS42 INS33 INS53 UPD42 MOV42 INS42 UPD42 UPD42 INS33 INS21 INS44 INS8 INS7 INS7 INS21 INS21 INS38 INS8 MOV8 UPD42 MOV42 INS43 INS59 INS7 UPD43 INS53 INS14 INS7 INS43 INS42 INS21 INS42 INS9 INS42 INS9 INS7 INS7 INS32 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS11 UPD42 INS14 INS43 INS27 INS42 INS32 INS42 INS7 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS7 INS7 INS7 INS7 UPD42 INS27 UPD45 INS42 INS42 INS42 INS43 INS32 INS43 INS27 INS42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS45 MOV32 UPD45 INS42 UPD42 MOV42 UPD42 MOV42 INS33 INS11 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS5 INS33 INS43 INS85 INS42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL83 DEL39 DEL42 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL27 DEL32 DEL9 DEL41 DEL9 DEL39 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL38 DEL27 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL31