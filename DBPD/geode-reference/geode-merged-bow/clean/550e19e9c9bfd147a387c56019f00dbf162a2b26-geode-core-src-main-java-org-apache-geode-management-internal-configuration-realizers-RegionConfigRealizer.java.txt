GEODE-6945:geode-managment should create its own set of configurationâ€¦ (#3928)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* do not use xml domain object for region configuration
* add RegionType.UNSUPPORTED

-import org.apache.geode.cache.Region;
+import org.apache.geode.management.configuration.Region;
+import org.apache.geode.management.internal.configuration.converters.RegionConverter;
-    implements ConfigurationRealizer<RegionConfig, RuntimeRegionInfo> {
-  public RegionConfigRealizer() {}
+    implements ConfigurationRealizer<Region, RuntimeRegionInfo> {
+
+  private final RegionConverter converter = new RegionConverter();
-  public RealizationResult create(RegionConfig regionConfig, InternalCache cache) {
-    RegionFactory factory = getRegionFactory(cache, regionConfig.getRegionAttributes());
+  public RealizationResult create(Region regionConfig, InternalCache cache) {
+    RegionFactory factory = getRegionFactory(cache, regionConfig);
-    Region parentRegion = cache.getRegion(parentRegionPath);
+    org.apache.geode.cache.Region parentRegion = cache.getRegion(parentRegionPath);
+  RegionFactory getRegionFactory(Cache cache, Region regionConfig) {
+    RegionFactory factory =
+        cache.createRegionFactory(regionConfig.getType().name());
+    if (regionConfig.getDiskStoreName() != null) {
+      factory.setDiskStoreName(regionConfig.getDiskStoreName());
+    }
+    final String keyConstraint = regionConfig.getKeyConstraint();
+    final String valueConstraint = regionConfig.getValueConstraint();
+    if (keyConstraint != null && !keyConstraint.isEmpty()) {
+      Class<Object> keyConstraintClass =
+          CliUtil.forName(keyConstraint, CliStrings.CREATE_REGION__KEYCONSTRAINT);
+      factory.setKeyConstraint(keyConstraintClass);
+    }
+
+    if (valueConstraint != null && !valueConstraint.isEmpty()) {
+      Class<Object> valueConstraintClass =
+          CliUtil.forName(valueConstraint, CliStrings.CREATE_REGION__VALUECONSTRAINT);
+      factory.setValueConstraint(valueConstraintClass);
+    }
+    return factory;
+  }
+
-  public RuntimeRegionInfo get(RegionConfig config, InternalCache cache) {
-    Region<Object, Object> region = cache.getRegion("/" + config.getName());
+  public RuntimeRegionInfo get(Region config, InternalCache cache) {
+    org.apache.geode.cache.Region<Object, Object> region = cache.getRegion("/" + config.getName());
-  public RealizationResult update(RegionConfig config, InternalCache cache) {
+  public RealizationResult update(Region config, InternalCache cache) {
-  public RealizationResult delete(RegionConfig config, InternalCache cache) {
-    Region region = cache.getRegion(config.getName());
+  public RealizationResult delete(Region config, InternalCache cache) {
+    org.apache.geode.cache.Region region = cache.getRegion(config.getName());

MOV26 INS26 MOV31 UPD40 INS40 UPD74 INS23 UPD43 INS83 INS83 INS43 INS59 INS43 INS42 INS44 INS44 INS8 UPD42 INS42 INS42 INS14 UPD43 INS42 INS43 INS42 MOV43 INS42 INS60 INS25 INS60 INS60 INS25 INS25 INS41 UPD43 MOV43 UPD43 INS43 UPD42 INS43 INS42 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS42 MOV42 UPD74 UPD42 UPD43 INS42 INS40 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS60 INS21 INS27 INS38 INS60 INS21 INS43 INS40 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS74 INS59 INS32 INS42 INS33 INS32 INS74 INS59 INS32 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 DEL42 DEL32 DEL83 DEL42 DEL8 DEL42 DEL43