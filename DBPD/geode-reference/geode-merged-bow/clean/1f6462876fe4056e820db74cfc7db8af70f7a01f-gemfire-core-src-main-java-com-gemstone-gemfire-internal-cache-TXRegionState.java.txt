[DISTTX] Bringing pending changes for distributed transactions (still work in progress) from one of the internal gemfire branch (develop_dist_tx) to ASF i.e.

2053a3ae by vbhaskar
[DISTTX] Fixed a PutAll issue related to DistTxStateOnCoordinator when txState is set null in tx-manager during (pre)commit.
    There is a related issue in removeall that also need to be fixed. Added test for same.

ccdf76d5 by sjigyasu
Added a test for concurrent tx and non tx ops.

61a536a0 by sjigyasu
Added WAN test for distributed tx (disabled)

9e6c1b8e by sjigyasu
Changes for adjunct messaging for serial WAN.  For details read comments in DistTXState commit.

3d5c4f84 by vbhaskar
[DISTTX] Fixed an remoteall issue and enabled respective testcase.

226bf623 by shirishd
[DISTTX] Test changes only
Removed @Category and @Ignore Junit4 unsupported tags from disttx dunit tests

9fdfbe2c by shirishd
[DISTTX] Test change only
Remove few more @Category tags from dist tx dunit tests

ea00015c by shirishd
[DISTTX] Added entries for tests

f74a12b3 by shirishd
[DISTTX] Enabling few more existing tests with "distributed-transactions" set to true

b52ee0c5 by vivek bhaskar
[DISTTX] On Tx Coordinator, verify if there any change of region distribution.

a480794c by shirishd
[DISTTX] Some tests for conflict detection at commit time

be3dd356 by vivek bhaskar
[DISTTX] Clean txState even if final commit fails.

95ba17f9 by shirishd
[DISTTX] Added tests for conflict detection at commit time

cd50dbbc by shirishd
[DISTTX] Optimization in DistTxEntryEvent toData/fromData

Tests:
DUnits and Junits for Distributed Transactions

-    
+
+  void buildMessageForAdjunctReceivers(LocalRegion r, TXCommitMessage msg) {
+    try {
+      if (!r.getScope().isLocal() && !this.entryMods.isEmpty()) {
+        
+        msg.startRegion(r, entryMods.size());
+        Iterator it = this.entryMods.entrySet().iterator();
+        Set<InternalDistributedMember> newMemberSet = new HashSet<InternalDistributedMember>();
+        
+        while (it.hasNext()) {
+          Map.Entry me = (Map.Entry)it.next();
+          Object eKey = me.getKey();
+          TXEntryState txes = (TXEntryState)me.getValue();
+          txes.buildMessage(r, eKey, msg,this.otherMembers);
+          if(txes.getFilterRoutingInfo()!=null) {
+            newMemberSet.addAll(txes.getFilterRoutingInfo().getMembers());
+          }
+          if(txes.getAdjunctRecipients()!=null) {
+            
+            Set adjunctRecipients = txes.getAdjunctRecipients();
+            newMemberSet.addAll(adjunctRecipients);  
+          }
+        }
+        
+        
+        if (!newMemberSet.equals(this.otherMembers)) 
+        { 
+          // r.getCache().getLogger().info("DEBUG: participants list has changed! bug 32999."); 
+          // Flag the message that the lock manager needs to be updated with the new member set
+          msg.setUpdateLockMembers();
+          this.otherMembers = newMemberSet;
+        }
+        
+        msg.finishRegion(this.otherMembers);
+      }
+    }
+    catch (RegionDestroyedException ex) {
+      // region was destroyed out from under us; after conflict checking
+      // passed. So act as if the region destroy happened right after the
+      // commit. We act this way by doing nothing; including distribution
+      // of this region's commit data.
+    }
+    catch (CancelException ex) {
+      // cache was closed out from under us; after conflict checking
+      // passed. So do nothing.
+    }
+  }
+
+  

INS31 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS54 INS42 INS42 INS8 INS12 INS12 INS25 INS44 INS8 INS44 INS8 INS27 INS8 INS43 INS42 INS43 INS42 INS38 INS38 INS21 INS60 INS60 INS61 INS25 INS21 INS42 INS42 INS32 INS32 INS32 INS43 INS59 INS74 INS59 INS32 INS8 INS38 INS8 INS32 INS32 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS60 INS60 INS21 INS25 INS25 INS32 INS21 INS21 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS42 INS42 INS22 INS32 INS7 INS52 INS42 INS22 INS42 INS43 INS43 INS40 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS33 INS21 INS32 INS33 INS60 INS21 INS52 INS42 INS42 INS42 INS22 INS42 INS52 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS52 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42