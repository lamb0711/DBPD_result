GEODE-3798: Refactor backup script code (#932)

* GEODE-3798: Refactor backup script code

  * Add tests for classes with low code coverage
  * Remove use of PrintWriter
  * General cleanup and attempts a seprarating concerns

-        completeRestoreScript(backupDir);
+        backupAdditionalFiles(backupDir);
+        restoreScript.generate(backupDir);
+        File incompleteFile = new File(backupDir, INCOMPLETE_BACKUP_FILE);
+        if (!incompleteFile.delete()) {
+          throw new IOException("Could not delete file " + INCOMPLETE_BACKUP_FILE);
+        }
-  private void completeRestoreScript(File backupDir) throws IOException {
-    backupConfigFiles(restoreScript, backupDir);
-    backupUserFiles(restoreScript, backupDir);
-    backupDeployedJars(restoreScript, backupDir);
-    restoreScript.generate(backupDir);
-    File incompleteFile = new File(backupDir, INCOMPLETE_BACKUP_FILE);
-    if (!incompleteFile.delete()) {
-      throw new IOException("Could not delete file " + INCOMPLETE_BACKUP_FILE);
-    }
+  private void backupAdditionalFiles(File backupDir) throws IOException {
+    backupConfigFiles(backupDir);
+    backupUserFiles(backupDir);
+    backupDeployedJars(backupDir);
+
-            Map<File, File> baselineCopyMap = new HashMap<>();
-            allOplogs = filterBaselineOplogs(diskStore, baselineInspector, baselineCopyMap);
-            restoreScript.addBaselineFiles(baselineCopyMap);
+            allOplogs = filterBaselineOplogs(diskStore, baselineInspector);
-      File dir = getBackupDir(targetDir, i);
-      if (!dir.mkdirs()) {
-        throw new IOException("Could not create directory " + dir);
+      File backupDir = getBackupDir(targetDir, i);
+      if (!backupDir.mkdirs()) {
+        throw new IOException("Could not create directory " + backupDir);
-      restoreScript.addFile(directories[i].getDir(), dir);
+      restoreScript.addFile(directories[i].getDir(), backupDir);
-   * @param baselineCopyMap this will be populated with baseline oplogs Files that will be used in
-   *        the restore script.
-  private Oplog[] filterBaselineOplogs(DiskStoreImpl diskStore, BackupInspector baselineInspector,
-      Map<File, File> baselineCopyMap) throws IOException {
+  private Oplog[] filterBaselineOplogs(DiskStoreImpl diskStore, BackupInspector baselineInspector)
+      throws IOException {
-        Set<String> matchingOplogs =
-            log.gatherMatchingOplogFiles(baselineInspector.getIncrementalOplogFileNames());
-        if (!matchingOplogs.isEmpty()) {
-          for (String matchingOplog : matchingOplogs) {
-            oplogMap.put(new File(baselineInspector.getCopyFromForOplogFile(matchingOplog)),
-                new File(baselineInspector.getCopyToForOplogFile(matchingOplog)));
-          }
-        }
+        oplogMap = addBaselineOplogToRestoreScript(baselineInspector, log);
-        baselineCopyMap.putAll(oplogMap);
+        restoreScript.addBaselineFiles(oplogMap);
+  private Map<File, File> addBaselineOplogToRestoreScript(BackupInspector baselineInspector,
+      Oplog log) {
+    Map<File, File> oplogMap = new HashMap<>();
+    Set<String> matchingOplogs =
+        log.gatherMatchingOplogFiles(baselineInspector.getIncrementalOplogFileNames());
+    for (String matchingOplog : matchingOplogs) {
+      oplogMap.put(new File(baselineInspector.getCopyFromForOplogFile(matchingOplog)),
+          new File(baselineInspector.getCopyToForOplogFile(matchingOplog)));
+    }
+    return oplogMap;
+  }
+
-  private void backupConfigFiles(RestoreScript restoreScript, File backupDir) throws IOException {
+  private void backupConfigFiles(File backupDir) throws IOException {
-  private void backupUserFiles(RestoreScript restoreScript, File backupDir) throws IOException {
+  private void backupUserFiles(File backupDir) throws IOException {
+        restoreScript.addUserFile(original, dest);
-        restoreScript.addExistenceTest(original);
-        restoreScript.addFile(original, dest);
-   * @param restoreScript Used to restore from this backup.
-  private void backupDeployedJars(RestoreScript restoreScript, File backupDir) throws IOException {
+  private void backupDeployedJars(File backupDir) throws IOException {
+          restoreScript.addFile(source, dest);
-          restoreScript.addFile(source, dest);

INS31 INS31 MOV83 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 INS83 MOV74 INS42 INS44 INS44 MOV8 MOV21 MOV21 MOV21 INS43 INS42 INS43 INS42 MOV60 MOV60 INS41 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV25 INS21 MOV21 MOV60 MOV25 UPD42 UPD42 INS21 INS32 UPD42 INS7 MOV25 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL42 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL66 DEL66 DEL65 DEL42 DEL44 DEL32 DEL38 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44