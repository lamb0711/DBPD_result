GEODE-8319: fix NPE when cluster configuration folder does not exist â€¦ (#5325)


-          final Document doc = XmlUtils.createAndUpgradeDocumentFromXml(xmlContent);
+          Document doc = XmlUtils.createAndUpgradeDocumentFromXml(xmlContent);
-  public void deleteXmlEntity(final XmlEntity xmlEntity, String[] groups) {
+  public void deleteXmlEntity(XmlEntity xmlEntity, String[] groups) {
-  private static void removeOtherVersionsOf(Path groupDir, String jarFileName) throws IOException {
+  private static void removeOtherVersionsOf(Path groupDir, String jarFileName) {
-   * Removes the jar files from the shared configuration. used when undeploy jars
+   * Removes the jar files from the shared configuration. used when un-deploy jars
-  public boolean removeJars(final String[] jarNames, String[] groups) {
+  public boolean removeJars(String[] jarNames, String[] groups) {
-        groups = configRegion.keySet().stream().toArray(String[]::new);
+        groups = configRegion.keySet().toArray(new String[0]);
-  // used in the cluster config change listener when jarnames are changed in the internal region
+  // used in the cluster config change listener when jar names are changed in the internal region
-  private void persistSecuritySettings(final Region<String, Configuration> configRegion) {
+  private void persistSecuritySettings(Region<String, Configuration> configRegion) {
-        Set<PersistentMemberID> persMemIds =
+        Set<PersistentMemberID> persistentMemberIDS =
-        for (PersistentMemberID persMemId : persMemIds) {
-          newerSharedConfigurationLocatorInfo.add(new PersistentMemberPattern(persMemId));
+        for (PersistentMemberID persistentMemberID : persistentMemberIDS) {
+          newerSharedConfigurationLocatorInfo.add(new PersistentMemberPattern(persistentMemberID));
+    if (!configDir.exists()) {
+      throw new IOException("ConfigDir does not exist: " + configDir.toPath());
+    }
-        logger.info(configuration.getConfigName() + " xml content: \n"
+        logger.info(configuration.getConfigName() + " xml content: " + System.lineSeparator()
-        if (needToCopyJars && configuration.getJarNames().size() > 0) {
+        if (needToCopyJars && !configuration.getJarNames().isEmpty()) {
-  public void writeConfigToFile(final Configuration configuration, File rootDir)
+  public void writeConfigToFile(Configuration configuration, File rootDir)
-  private File createConfigDirIfNecessary(final String configName) throws IOException {
+  private File createConfigDirIfNecessary(String configName) throws IOException {
-  private File createConfigDirIfNecessary(File clusterConfigDir, final String configName)
+  private File createConfigDirIfNecessary(File clusterConfigDir, String configName)

INS25 UPD66 INS38 INS8 INS32 INS53 INS42 INS42 INS14 MOV43 INS27 UPD42 INS45 INS32 UPD27 MOV27 UPD42 UPD42 INS42 INS42 INS42 INS38 MOV32 INS3 UPD45 INS32 MOV32 MOV5 INS34 INS42 INS42 UPD42 UPD42 DEL83 DEL83 DEL83 DEL42 DEL32 DEL89 DEL83 DEL34 DEL42 DEL27 DEL83 DEL83 DEL83