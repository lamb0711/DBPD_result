Merge branch 'develop' into feature/GEODE-9

+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.RejectedExecutionException;
-  private Future<RebalanceResults> future;
+  private List<Future<RebalanceResults>> futureList = new ArrayList<Future<RebalanceResults>>();
+  private int pendingTasks;
-    ScheduledExecutorService ex = manager.getExecutor();
-      future = ex.submit(new Callable<RebalanceResults>() {
-        public RebalanceResults call() {
-          SystemFailure.checkFailure();
-          cache.getCancelCriterion().checkCancelInProgress(null);
-          try {
-            return RebalanceOperationImpl.this.call();
-          }
-          catch (RuntimeException e) {
-            logger.debug("Unexpected exception in rebalancing: {}", e.getMessage(), e);
-            throw e;
-          } finally {
-            manager.removeInProgressRebalance(RebalanceOperationImpl.this);
-          }
-        }
-      });
+      this.scheduleRebalance();      
-  private RebalanceResults call() {
-    RebalanceResultsImpl results = new RebalanceResultsImpl();
+  private void scheduleRebalance() {
+    
-            Set<PartitionRebalanceInfo> detailSet = null;
-                detailSet = prOp.execute();
+                this.futureList.add(submitRebalanceTask(prOp,start));
-              detailSet = prOp.execute();
-            }
-            for (PartitionRebalanceInfo details : detailSet) {
-              results.addDetails(details);
-            }
+              this.futureList.add(submitRebalanceTask(prOp,start));
+            }            
-      stats.endRebalance(start);
+      if(pendingTasks == 0) {
+        //if we didn't submit any tasks, end the rebalance now.
+        stats.endRebalance(start);
+      }
-    return results;
-  private Future<RebalanceResults> getFuture() {
-    synchronized (this.futureLock) {
-      return this.future;
+  private Future<RebalanceResults> submitRebalanceTask(final PartitionedRegionRebalanceOp rebalanceOp, final long rebalanceStartTime) {
+    final InternalResourceManager manager = this.cache.getResourceManager();
+    ScheduledExecutorService ex = manager.getExecutor();
+
+    synchronized(futureLock) {
+      //this update should happen inside this.futureLock 
+      pendingTasks++;
+
+      try {
+        Future<RebalanceResults> future = ex.submit(new Callable<RebalanceResults>() {
+          public RebalanceResults call() {
+            try {
+              RebalanceResultsImpl results = new RebalanceResultsImpl();
+              SystemFailure.checkFailure();
+              cache.getCancelCriterion().checkCancelInProgress(null);
+
+              Set<PartitionRebalanceInfo> detailSet = null;
+
+              detailSet = rebalanceOp.execute();
+
+              for (PartitionRebalanceInfo details : detailSet) {
+                results.addDetails(details);
+              }
+              return results;
+            }
+            catch (RuntimeException e) {
+              logger.debug("Unexpected exception in rebalancing: {}", e.getMessage(), e);
+              throw e;
+            } finally {
+              synchronized (RebalanceOperationImpl.this.futureLock) {
+                pendingTasks--;
+                if(pendingTasks == 0) {//all threads done
+                  manager.removeInProgressRebalance(RebalanceOperationImpl.this);
+                  manager.getStats().endRebalance(rebalanceStartTime);
+                }
+              }
+            }
+          }
+        });
+
+        return future;
+      } catch(RejectedExecutionException e) {
+        cache.getCancelCriterion().checkCancelInProgress(null);
+        throw e;
+      }
+    }
+  }
+  
+  private List<Future<RebalanceResults>> getFutureList() {
+    synchronized(this.futureList) {
+      return this.futureList;
-    if(getFuture().cancel(false)) {
-      cache.getResourceManager().removeInProgressRebalance(this);
+    
+    synchronized (this.futureLock) {
+      for(Future<RebalanceResults> fr : getFutureList()) {
+        if(fr.cancel(false)) {
+          pendingTasks--;
+        }
+      }
+      if(pendingTasks == 0 ) {
+        cache.getResourceManager().removeInProgressRebalance(this);
+      }
+    
+    RebalanceResultsImpl results = new RebalanceResultsImpl();
+    List<Future<RebalanceResults>> frlist =  getFutureList();
+    for(Future<RebalanceResults> fr : frlist) {
-        return getFuture().get();
+        RebalanceResults rr =  fr.get();
+        results.addDetails((RebalanceResultsImpl)rr);
+        
+    }
+    return results;
-    try {
-      return getFuture().get(timeout, unit);
-    } catch (ExecutionException e) {
-      if(e.getCause() instanceof GemFireException) {
-        throw (GemFireException) e.getCause();
-      } else if(e.getCause() instanceof InternalGemFireError) {
-        throw (InternalGemFireError) e.getCause();
-      } else {
-        throw new InternalGemFireError(e.getCause());
+    long endTime = unit.toNanos(timeout) + System.nanoTime();
+    
+    RebalanceResultsImpl results = new RebalanceResultsImpl();
+    List<Future<RebalanceResults>> frlist =  getFutureList();
+    for(Future<RebalanceResults> fr : frlist) {
+      try {
+        long waitTime = endTime - System.nanoTime();
+        RebalanceResults rr =  fr.get(waitTime, TimeUnit.NANOSECONDS);                
+        results.addDetails((RebalanceResultsImpl)rr);
+      } catch (ExecutionException e) {
+        if(e.getCause() instanceof GemFireException) {
+          throw (GemFireException) e.getCause();
+        } else if(e.getCause() instanceof InternalGemFireError) {
+          throw (InternalGemFireError) e.getCause();
+        } else {
+          throw new InternalGemFireError(e.getCause());
+        }
+    return results;
+  private boolean isAllDone() {
+    for(Future<RebalanceResults> fr : getFutureList()) {
+      if(!fr.isDone())
+        return false;
+    }
+    return true;
+  }
+  
-    return this.cancelled.get() || getFuture().isDone();
+    return this.cancelled.get() || isAllDone();

INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS74 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS39 UPD42 UPD83 MOV74 INS42 INS44 INS44 INS74 UPD42 MOV43 INS42 MOV43 MOV43 INS8 MOV43 MOV44 MOV44 MOV43 MOV43 MOV43 INS8 INS83 INS39 INS42 INS8 INS43 MOV74 INS42 INS14 INS42 INS60 INS51 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS43 INS74 INS51 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS70 INS41 INS42 INS74 INS83 INS43 INS59 MOV22 INS8 INS8 INS42 INS42 INS42 INS42 INS8 INS42 MOV43 MOV43 INS22 MOV22 INS8 INS43 INS59 INS74 INS59 INS44 INS42 MOV8 INS42 INS42 INS39 INS59 INS43 INS59 INS74 INS59 INS44 INS42 MOV8 INS42 INS44 INS32 INS8 INS9 INS43 INS74 INS42 INS42 INS32 MOV21 INS21 INS25 INS21 INS54 INS52 INS42 INS70 MOV25 UPD42 MOV42 INS42 INS14 INS43 INS74 INS42 INS32 INS74 INS42 INS42 INS27 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS74 INS42 INS74 INS42 INS42 INS25 INS42 INS43 INS43 INS22 INS42 INS32 INS27 MOV8 INS37 MOV8 INS12 INS44 INS32 INS8 INS27 INS43 UPD42 MOV42 INS43 INS43 INS42 INS43 INS43 INS32 INS32 INS43 INS42 INS43 INS43 INS42 INS43 INS43 INS43 INS43 INS38 INS41 UPD42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS60 INS41 INS44 INS8 UPD42 INS74 INS42 INS42 INS25 INS42 INS34 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS32 INS9 INS74 INS59 INS42 INS43 INS42 INS21 INS53 INS43 INS43 INS32 INS8 MOV43 INS59 INS32 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS11 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS37 INS42 UPD42 MOV42 INS43 INS42 INS42 INS32 INS42 MOV42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS22 INS42 INS32 INS8 INS8 INS32 INS52 INS42 INS42 MOV42 UPD42 MOV42 MOV60 MOV21 MOV21 MOV60 INS21 MOV70 MOV41 INS51 INS22 INS42 INS32 INS7 INS22 INS8 INS52 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS32 MOV52 INS42 INS21 INS25 INS42 INS42 INS37 INS27 MOV8 UPD42 MOV42 INS42 INS42 INS34 INS21 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL39 DEL42 DEL32 DEL41 DEL8 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL9 DEL32 DEL32 DEL42 DEL32 DEL41 DEL42 DEL32 DEL32 DEL41 DEL42 DEL32