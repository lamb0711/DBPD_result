GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-          if (logger.isTraceEnabled(LogMarker.DM)) {
-            logger.trace(LogMarker.DM, "join cancelled by departure");
+          if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+            logger.trace(LogMarker.DM_VERBOSE, "join cancelled by departure");
-  // /**
-  // * Returns whether or not there are any members of the distributed
-  // * system.
-  // */
-  // private boolean membersExist() {
-  // // removed synchronized(members) {
-  // // removed synchronized (managers) {
-  // return this.members.size() > 0 || this.managers.size() > 0;
-  // }
-
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.trace(LogMarker.DM, "JoinProcessor: shutting down");
+      if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+        logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor: shutting down");
-      // if (this.shutDown) {
-      // return;
-      // }
-
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.trace(LogMarker.DM, "JoinProcessor: resuming.  Is alive? {}", this.isAlive());
+      if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+        logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor: resuming.  Is alive? {}",
+            this.isAlive());
-      // Assert.assertTrue(this.isAlive());
-        // Thread.interrupted(); // clear the interrupted flag
-            if (logger.isTraceEnabled(LogMarker.DM)) {
-              logger.trace(LogMarker.DM, "JoinProcessor is about to wait...");
+            if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+              logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor is about to wait...");
-            // Thread.interrupted(); // clear the interrupted flag
-          if (logger.isTraceEnabled(LogMarker.DM)) {
-            logger.trace(LogMarker.DM, "JoinProcessor has woken up...");
+          if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+            logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor has woken up...");
-            if (logger.isTraceEnabled(LogMarker.DM)) {
-              logger.trace(LogMarker.DM, "JoinProcessor pendingJoins: {}", pendingJoinsRef.size());
+            if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+              logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor pendingJoins: {}",
+                  pendingJoinsRef.size());
-              if (logger.isTraceEnabled(LogMarker.DM)) {
-                logger.trace(LogMarker.DM, "JoinProcessor got a membership event for {}", this.id);
+              if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+                logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor got a membership event for {}",
+                    this.id);
-            if (logger.isTraceEnabled(LogMarker.DM)) {
-              logger.trace(LogMarker.DM, "JoinProcessor handling join for {}", this.id);
+            if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+              logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor handling join for {}", this.id);
-          if (logger.isTraceEnabled(LogMarker.DM)) {
-            logger.trace(LogMarker.DM, "JoinProcessor has been interrupted...");
+          if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+            logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor has been interrupted...");
-          // logger.warning("Unexpected thread interrupt", ignore);
-          if (logger.isTraceEnabled(LogMarker.DM)) {
-            logger.trace(LogMarker.DM, "join cancelled by departure");
+          if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+            logger.trace(LogMarker.DM_VERBOSE, "join cancelled by departure");
-              if (logger.isTraceEnabled(LogMarker.DM)) {
-                logger.trace(LogMarker.DM, "JoinProcessor has been interrupted...");
+              if (logger.isTraceEnabled(LogMarker.DM_VERBOSE)) {
+                logger.trace(LogMarker.DM_VERBOSE, "JoinProcessor has been interrupted...");

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40