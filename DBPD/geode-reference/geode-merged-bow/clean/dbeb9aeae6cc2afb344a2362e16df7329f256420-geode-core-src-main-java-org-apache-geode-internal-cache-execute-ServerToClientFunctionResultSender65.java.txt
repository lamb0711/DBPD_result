Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-public class ServerToClientFunctionResultSender65 extends
-    ServerToClientFunctionResultSender {
+public class ServerToClientFunctionResultSender65 extends ServerToClientFunctionResultSender {
-  public ServerToClientFunctionResultSender65(ChunkedMessage msg,
-      int messageType, ServerConnection sc, Function function,
-      ExecuteFunctionOperationContext authzContext) {
+  public ServerToClientFunctionResultSender65(ChunkedMessage msg, int messageType,
+      ServerConnection sc, Function function, ExecuteFunctionOperationContext authzContext) {
-    if(this.lastResultReceived){
+    if (this.lastResultReceived) {
-        logger.debug(" ServerToClientFunctionResultSender65 not sending lastResult {} as the server has shutdown", oneResult);
+        logger.debug(
+            " ServerToClientFunctionResultSender65 not sending lastResult {} as the server has shutdown",
+            oneResult);
-    	   sendHeader();
+        sendHeader();
-      DistributedMember memberID = InternalDistributedSystem.getAnyInstance()
-          .getDistributionManager().getId();
+      DistributedMember memberID =
+          InternalDistributedSystem.getAnyInstance().getDistributionManager().getId();
-      if(oneResult instanceof InternalFunctionException) {
+      if (oneResult instanceof InternalFunctionException) {
-      }      
-      this.msg.addObjPart(result);      
-      if(oneResult instanceof InternalFunctionException) {
-        List<Object> result2 = new ArrayList<Object>();        
-        result2.add(BaseCommand.getExceptionTrace((Throwable)oneResult));
-        result2.add(memberID);        
+      }
+      this.msg.addObjPart(result);
+      if (oneResult instanceof InternalFunctionException) {
+        List<Object> result2 = new ArrayList<Object>();
+        result2.add(BaseCommand.getExceptionTrace((Throwable) oneResult));
+        result2.add(memberID);
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-  public synchronized void lastResult(Object oneResult,
-      DistributedMember memberID) {
+  public synchronized void lastResult(Object oneResult, DistributedMember memberID) {
-        logger.debug(" ServerToClientFunctionResultSender65 not sending lastResult {} as the server has shutdown", oneResult);
+        logger.debug(
+            " ServerToClientFunctionResultSender65 not sending lastResult {} as the server has shutdown",
+            oneResult);
-      	 sendHeader();
+        sendHeader();
-      if(oneResult instanceof InternalFunctionException) {
+      if (oneResult instanceof InternalFunctionException) {
-      this.msg.addObjPart(result);      
-      if(oneResult instanceof InternalFunctionException) {
-        List<Object> result2 = new ArrayList<Object>();        
-        result2.add(BaseCommand.getExceptionTrace((Throwable)oneResult));
+      this.msg.addObjPart(result);
+      if (oneResult instanceof InternalFunctionException) {
+        List<Object> result2 = new ArrayList<Object>();
+        result2.add(BaseCommand.getExceptionTrace((Throwable) oneResult));
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-        logger.debug(" ServerToClientFunctionResultSender65 not sending result {}  as the server has shutdown",oneResult);
+        logger.debug(
+            " ServerToClientFunctionResultSender65 not sending result {}  as the server has shutdown",
+            oneResult);
-      DistributedMember memberID = InternalDistributedSystem.getAnyInstance()
-          .getDistributionManager().getId();
+      DistributedMember memberID =
+          InternalDistributedSystem.getAnyInstance().getDistributionManager().getId();
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-  public synchronized void sendResult(Object oneResult,
-      DistributedMember memberID) {
+  public synchronized void sendResult(Object oneResult, DistributedMember memberID) {
-        logger.debug(" ServerToClientFunctionResultSender65 not sending result {}  as the server has shutdown", oneResult);
+        logger.debug(
+            " ServerToClientFunctionResultSender65 not sending result {}  as the server has shutdown",
+            oneResult);
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-  
-  
+
+
-  protected void writeFunctionExceptionResponse(ChunkedMessage message,
-      String errormessage, Throwable e) throws IOException {
+  protected void writeFunctionExceptionResponse(ChunkedMessage message, String errormessage,
+      Throwable e) throws IOException {
-      logger.debug(" ServerToClientFunctionResultSender sending Function Error Response : {}",  errormessage);
+      logger.debug(" ServerToClientFunctionResultSender sending Function Error Response : {}",
+          errormessage);
-      message.addObjPart(e);    
+      message.addObjPart(e);
-      InternalFunctionInvocationTargetException fe = (InternalFunctionInvocationTargetException) e.getCause();
+      InternalFunctionInvocationTargetException fe =
+          (InternalFunctionInvocationTargetException) e.getCause();
-    }else {
-      if(e instanceof FunctionException
-          && e.getCause() instanceof QueryInvalidException) {
+    } else {
+      if (e instanceof FunctionException && e.getCause() instanceof QueryInvalidException) {
-      } 
+      }
-      message.addObjPart(e);    
+      message.addObjPart(e);
-    //message.setLastChunk(true);    
+    // message.setLastChunk(true);

