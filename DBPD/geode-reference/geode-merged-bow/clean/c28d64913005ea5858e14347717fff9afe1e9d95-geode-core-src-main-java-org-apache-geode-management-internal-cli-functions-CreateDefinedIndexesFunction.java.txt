Merge branch 'release/1.4.0'

+import java.util.ArrayList;
+import java.util.Iterator;
+import org.apache.geode.cache.execute.ResultSender;
+import org.apache.geode.internal.cache.xmlcache.CacheXml;
+import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-
+  public String getId() {
+    return CreateDefinedIndexesFunction.class.getName();
+  }
+
+  XmlEntity createXmlEntity(final String regionName) {
+    return new XmlEntity(CacheXml.REGION, "name", regionName);
+  }
+
+  @Override
-    String memberId = null;
-    List<Index> indexes = null;
+    String memberId = null;
+    boolean lastResultSent = Boolean.FALSE;
+
-      memberId = cache.getDistributedSystem().getDistributedMember().getId();
+      ResultSender sender = context.getResultSender();
+      memberId = cache.getDistributedSystem().getDistributedMember().getId();
+
-        String indexedExpression = indexDefinition.getIndexedExpression();
+        String indexedExpression = indexDefinition.getIndexedExpression();
+
-      indexes = queryService.createDefinedIndexes();
-      context.getResultSender().lastResult(new CliFunctionResult(memberId));
-    } catch (MultiIndexCreationException e) {
+
+      List<Index> indexes = queryService.createDefinedIndexes();
+      // Build the results with one XmlEntity per region.
+      List<String> processedRegions = new ArrayList<>();
+      List<CliFunctionResult> functionResults = new ArrayList<>();
+
+      for (Index index : indexes) {
+        String regionName = index.getRegion().getName();
+
+        if (!processedRegions.contains(regionName)) {
+          XmlEntity xmlEntity = createXmlEntity(regionName);
+          functionResults.add(new CliFunctionResult(memberId, xmlEntity));
+          processedRegions.add(regionName);
+        }
+      }
+
+      for (Iterator<CliFunctionResult> iterator = functionResults.iterator(); iterator.hasNext();) {
+        CliFunctionResult cliFunctionResult = iterator.next();
+
+        if (iterator.hasNext()) {
+          sender.sendResult(cliFunctionResult);
+        } else {
+          sender.lastResult(cliFunctionResult);
+          lastResultSent = Boolean.TRUE;
+        }
+      }
+
+      if (!lastResultSent) {
+        // No indexes were created and no exceptions were thrown during the process.
+        // We still need to make sure the function returns to the caller.
+        sender.lastResult(
+            new CliFunctionResult(memberId, true, CliStrings.DEFINE_INDEX__FAILURE__MSG));
+      }
+    } catch (MultiIndexCreationException multiIndexCreationException) {
-      for (Map.Entry<String, Exception> failedIndex : e.getExceptionsMap().entrySet()) {
+      for (Map.Entry<String, Exception> failedIndex : multiIndexCreationException.getExceptionsMap()
+          .entrySet()) {
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, sb.toString()));
-    } catch (Exception e) {
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(memberId, multiIndexCreationException, sb.toString()));
+    } catch (Exception exception) {
-          e.getClass().getName(), e.getMessage());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, exceptionMessage));
+          exception.getClass().getName(), exception.getMessage());
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(memberId, exception, exceptionMessage));
-
-  @Override
-  public String getId() {
-    return CreateDefinedIndexesFunction.class.getName();
-  }
-

INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS31 INS43 INS42 INS44 INS8 MOV60 INS42 INS83 INS43 INS42 INS41 INS60 INS42 INS14 INS39 INS59 MOV21 INS43 INS40 INS45 INS42 INS42 INS40 INS60 MOV60 INS60 INS60 INS70 INS24 INS25 INS42 INS43 INS59 MOV60 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS58 INS32 INS8 INS38 INS8 UPD42 UPD42 INS42 INS42 MOV32 MOV32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS25 INS74 INS59 INS42 INS42 INS60 INS25 INS42 MOV21 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS43 INS59 INS38 INS8 INS43 INS43 INS42 INS32 MOV43 INS59 INS32 INS8 INS8 INS43 INS43 INS42 INS42 INS32 INS32 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS32 INS7 INS43 INS9 INS40 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 UPD42 INS42 INS42 INS43 INS42 INS42 INS42 DEL33 DEL42 DEL7 DEL21