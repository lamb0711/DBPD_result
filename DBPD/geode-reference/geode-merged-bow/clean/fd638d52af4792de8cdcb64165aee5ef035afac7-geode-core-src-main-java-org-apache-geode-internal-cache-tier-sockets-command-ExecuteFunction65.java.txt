Revert "GEODE-2632: use immutable SecurityService impls to improve performance"

This reverts commit 5eca6f0393c1a05804a4c4b7f97203ee2ec226a2.

-import org.apache.geode.internal.security.SecurityService;
-  public void cmdExecute(final Message clientMessage, final ServerConnection serverConnection,
-      final SecurityService securityService, long start) throws IOException {
+  public void cmdExecute(Message clientMessage, ServerConnection servConn, long start)
+      throws IOException {
-        serverConnection.setAsTrue(REQUIRES_RESPONSE);
-        serverConnection.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
+        servConn.setAsTrue(REQUIRES_RESPONSE);
+        servConn.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
-        writeChunkedException(clientMessage, exception, serverConnection);
-        serverConnection.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, exception, servConn);
+        servConn.setAsTrue(RESPONDED);
-      logger.warn("{}: {}", serverConnection.getName(), message);
-      sendError(hasResult, clientMessage, message, serverConnection);
+      logger.warn("{}: {}", servConn.getName(), message);
+      sendError(hasResult, clientMessage, message, servConn);
-          logger.warn("{}: {}", serverConnection.getName(), message);
-          sendError(hasResult, clientMessage, message, serverConnection);
+          logger.warn("{}: {}", servConn.getName(), message);
+          sendError(hasResult, clientMessage, message, servConn);
-            logger.warn("{}: {}", serverConnection.getName(), message);
-            sendError(hasResult, clientMessage, message, serverConnection);
+            logger.warn("{}: {}", servConn.getName(), message);
+            sendError(hasResult, clientMessage, message, servConn);
-      securityService.authorizeDataWrite();
+      this.securityService.authorizeDataWrite();
-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
+      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-      ChunkedMessage m = serverConnection.getFunctionResponseMessage();
+      ChunkedMessage m = servConn.getFunctionResponseMessage();
-          MessageType.EXECUTE_FUNCTION_RESULT, serverConnection, functionObject, executeContext);
+          MessageType.EXECUTE_FUNCTION_RESULT, servConn, functionObject, executeContext);
-      InternalDistributedMember localVM = (InternalDistributedMember) serverConnection.getCache()
+      InternalDistributedMember localVM = (InternalDistributedMember) servConn.getCache()
-      HandShake handShake = (HandShake) serverConnection.getHandshake();
+      HandShake handShake = (HandShake) servConn.getHandshake();
-          logger.debug("Executing Function on Server: {} with context: {}", serverConnection,
-              context);
+          logger.debug("Executing Function on Server: {} with context: {}", servConn, context);
-        InternalCache cache = serverConnection.getCache();
+        InternalCache cache = servConn.getCache();
-          sendException(hasResult, clientMessage, e.getMessage(), serverConnection, e);
+          sendException(hasResult, clientMessage, e.getMessage(), servConn, e);
-      sendException(hasResult, clientMessage, message, serverConnection, ioException);
+      sendException(hasResult, clientMessage, message, servConn, ioException);
-      sendException(hasResult, clientMessage, message, serverConnection, internalfunctionException);
+      sendException(hasResult, clientMessage, message, servConn, internalfunctionException);
-      sendException(hasResult, clientMessage, message, serverConnection, e);
+      sendException(hasResult, clientMessage, message, servConn, e);
-  private void sendException(byte hasResult, Message msg, String message,
-      ServerConnection serverConnection, Throwable e) throws IOException {
+  private void sendException(byte hasResult, Message msg, String message, ServerConnection servConn,
+      Throwable e) throws IOException {
-      writeFunctionResponseException(msg, MessageType.EXCEPTION, serverConnection, e);
-      serverConnection.setAsTrue(RESPONDED);
+      writeFunctionResponseException(msg, MessageType.EXCEPTION, servConn, e);
+      servConn.setAsTrue(RESPONDED);
-  private void sendError(byte hasResult, Message msg, String message,
-      ServerConnection serverConnection) throws IOException {
+  private void sendError(byte hasResult, Message msg, String message, ServerConnection servConn)
+      throws IOException {
-      writeFunctionResponseError(msg, MessageType.EXECUTE_FUNCTION_ERROR, message,
-          serverConnection);
-      serverConnection.setAsTrue(RESPONDED);
+      writeFunctionResponseError(msg, MessageType.EXECUTE_FUNCTION_ERROR, message, servConn);
+      servConn.setAsTrue(RESPONDED);

UPD42 UPD42 UPD42 MOV43 MOV43 UPD42 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 UPD42 UPD42 UPD42 MOV43 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42