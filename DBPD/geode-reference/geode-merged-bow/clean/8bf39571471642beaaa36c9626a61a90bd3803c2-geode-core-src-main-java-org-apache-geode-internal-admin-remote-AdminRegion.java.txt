Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.*;
+// import org.apache.geode.*;
-//import org.apache.geode.internal.*;
-//import org.apache.geode.internal.admin.*;
-//import org.apache.geode.distributed.internal.*;
-//import org.apache.geode.util.*;
-
+// import org.apache.geode.internal.*;
+// import org.apache.geode.internal.admin.*;
+// import org.apache.geode.distributed.internal.*;
+// import org.apache.geode.util.*;
-//import java.net.*;
+// import java.net.*;
-  public AdminRegion(String localName, RemoteGemFireVM vm,
-                     String userAttributeDesc) {
+  public AdminRegion(String localName, RemoteGemFireVM vm, String userAttributeDesc) {
-      localName = localName.substring(idx+1);
+      localName = localName.substring(idx + 1);
-      RegionAttributesResponse resp = (RegionAttributesResponse)sendAndWait(RegionAttributesRequest.create());
+      RegionAttributesResponse resp =
+          (RegionAttributesResponse) sendAndWait(RegionAttributesRequest.create());
-      RegionStatisticsResponse resp = (RegionStatisticsResponse)sendAndWait(RegionStatisticsRequest.create());
+      RegionStatisticsResponse resp =
+          (RegionStatisticsResponse) sendAndWait(RegionStatisticsRequest.create());
-  public void destroyRegion(Object aCallbackArgument) throws CacheWriterException, TimeoutException {
+  public void destroyRegion(Object aCallbackArgument)
+      throws CacheWriterException, TimeoutException {
-    throws RegionExistsException, TimeoutException {
+      throws RegionExistsException, TimeoutException {
-   public Set subregions(boolean recursive) {
+  public Set subregions(boolean recursive) {
-      SubRegionResponse resp = (SubRegionResponse)sendAndWait(SubRegionRequest.create());
+      SubRegionResponse resp = (SubRegionResponse) sendAndWait(SubRegionRequest.create());
-   public Entry getEntry(Object key) {
+  public Entry getEntry(Object key) {
-      ObjectDetailsResponse resp = (ObjectDetailsResponse)
-        sendAndWait(ObjectDetailsRequest.create(key, vm.getCacheInspectionMode()));
+      ObjectDetailsResponse resp = (ObjectDetailsResponse) sendAndWait(
+          ObjectDetailsRequest.create(key, vm.getCacheInspectionMode()));
-      return new DummyEntry(this, key, resp.getObjectValue(),
-                            resp.getUserAttribute(), resp.getStatistics());
+      return new DummyEntry(this, key, resp.getObjectValue(), resp.getUserAttribute(),
+          resp.getStatistics());
-//     try {
-//       ObjectValueResponse resp = (ObjectValueResponse)sendAndWait(ObjectValueRequest.create(key));
-//       return resp.getObjectValue();
-//     } catch (CacheException c) {
-//       if (c instanceof CacheLoaderException) {
-//         throw (CacheLoaderException)c;
-//       } else if (c instanceof TimeoutException) {
-//         throw (TimeoutException)c;
-//       } else {
-//         throw new RuntimeAdminException(c);
-//       }
-//     }
+    // try {
+    // ObjectValueResponse resp = (ObjectValueResponse)sendAndWait(ObjectValueRequest.create(key));
+    // return resp.getObjectValue();
+    // } catch (CacheException c) {
+    // if (c instanceof CacheLoaderException) {
+    // throw (CacheLoaderException)c;
+    // } else if (c instanceof TimeoutException) {
+    // throw (TimeoutException)c;
+    // } else {
+    // throw new RuntimeAdminException(c);
+    // }
+    // }
-    throws TimeoutException, CacheLoaderException {
-     throw new UnsupportedOperationException();
+      throws TimeoutException, CacheLoaderException {
+    throw new UnsupportedOperationException();
-  public Object put(Object key, Object value)
-    throws TimeoutException, CacheWriterException {
+  public Object put(Object key, Object value) throws TimeoutException, CacheWriterException {
-    throws TimeoutException, CacheWriterException {
+      throws TimeoutException, CacheWriterException {
-    throws TimeoutException, EntryExistsException, CacheWriterException {
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-    throws TimeoutException, EntryExistsException, CacheWriterException {
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public void invalidate(Object key)
-    throws TimeoutException, EntryNotFoundException {
+  public void invalidate(Object key) throws TimeoutException, EntryNotFoundException {
-    throws TimeoutException, EntryNotFoundException {
+      throws TimeoutException, EntryNotFoundException {
-  public void localInvalidate(Object key,Object aCallbackArgument)
-    throws EntryNotFoundException {
+  public void localInvalidate(Object key, Object aCallbackArgument) throws EntryNotFoundException {
-    throws TimeoutException, EntryNotFoundException, CacheWriterException {
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-    throws TimeoutException, EntryNotFoundException, CacheWriterException {
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-  public void localDestroy(Object key,Object aCallbackArgument) throws EntryNotFoundException {
+  public void localDestroy(Object key, Object aCallbackArgument) throws EntryNotFoundException {
-      ObjectNamesResponse resp = (ObjectNamesResponse)sendAndWait(ObjectNamesRequest.create());
+      ObjectNamesResponse resp = (ObjectNamesResponse) sendAndWait(ObjectNamesRequest.create());
-    return  userAttributeDesc;
+    return userAttributeDesc;
-    throw new UnsupportedOperationException(LocalizedStrings.AdminRegion_SHOULD_NOT_BE_CALLED.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.AdminRegion_SHOULD_NOT_BE_CALLED.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterest(Object key, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  public void registerInterest(Object key, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterestRegex(String regex, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  public void registerInterestRegex(String regex, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
-  public void registerInterest(Object key, boolean isDurable,
-      boolean receiveValues) throws CacheWriterException {
+
+  public void registerInterest(Object key, boolean isDurable, boolean receiveValues)
+      throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
-  public void registerInterestRegex(String regex, boolean isDurable,
+
+  public void registerInterestRegex(String regex, boolean isDurable, boolean receiveValues)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable,
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable) throws CacheWriterException {
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable)
+      throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  }
-  
-  public void registerInterest(Object key, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) throws CacheWriterException {
-    throw new UnsupportedOperationException(
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable) throws CacheWriterException {
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable,
+      boolean receiveValues) throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  }
-  
-  public void registerInterestRegex(String regex, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) throws CacheWriterException {
-    throw new UnsupportedOperationException(
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-   * Returns a two element array, the first of which is the entry
-   * count, the second is the subregion count
+   * Returns a two element array, the first of which is the entry count, the second is the subregion
+   * count
-    RegionSizeResponse resp = (RegionSizeResponse)sendAndWait(RegionSizeRequest.create());
-    return new int[]{resp.getEntryCount(), resp.getSubregionCount()};
+    RegionSizeResponse resp = (RegionSizeResponse) sendAndWait(RegionSizeRequest.create());
+    return new int[] {resp.getEntryCount(), resp.getSubregionCount()};
-    /**
+  /**
-        throw (CacheException)cause;
+        throw (CacheException) cause;
-        throw (CacheRuntimeException)cause;
+        throw (CacheRuntimeException) cause;
-  throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
+      throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
-    
+
-    throw new UnsupportedOperationException(); 
+    throw new UnsupportedOperationException();
-    throw new UnsupportedOperationException(); 
+    throw new UnsupportedOperationException();
-   public Object remove(Object arg0) {
-     throw new UnsupportedOperationException();
+  public Object remove(Object arg0) {
+    throw new UnsupportedOperationException();
-//    return entries(recursive);
+    // return entries(recursive);
-    
+
-  public void forceRolling(){
+  public void forceRolling() {
-  public int[] forceCompaction() {   
+  public int[] forceCompaction() {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  
-  /* (non-Javadoc)
-   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object, java.lang.Object)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object,
+   * java.lang.Object)

UPD66 UPD66