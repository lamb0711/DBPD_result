GEODE-1907: QueryDataFunction now adds LIMIT clause if space is missing after FROM clause

This closes #249

-  private static final String SELECT_EXPR = "\\s*SELECT\\s+.+\\s+FROM\\s+.+";
+  private static final String SELECT_EXPR = "\\s*SELECT\\s+.+\\s+FROM.+";
-  private QueryDataFunctionResult selectWithType(final FunctionContext context,
-                                                 String queryString,
-                                                 final boolean showMember,
-                                                 final String regionName,
-                                                 final int limit,
-                                                 final int queryResultSetLimit,
-                                                 final int queryCollectionsDepth) throws Exception {
+  private QueryDataFunctionResult selectWithType(final FunctionContext context, String queryString, final boolean showMember, final String regionName, final int limit, final int queryResultSetLimit, final int queryCollectionsDepth) throws Exception {
-  private static String applyLimitClause(final String query, int limit, final int queryResultSetLimit) {
+  protected static String applyLimitClause(final String query, int limit, final int queryResultSetLimit) {
-      boolean matchResult = limit_matcher.matches();
+      boolean queryAlreadyHasLimitClause = limit_matcher.matches();
-      if (!matchResult) {
+      if (!queryAlreadyHasLimitClause) {
-        String result = new String(query);
+        String result = query;
-        ResultCollector collector = FunctionService.onMember(member)
-                                                   .withArgs(functionArgs)
-                                                   .execute(ManagementConstants.QUERY_DATA_FUNCTION);
+        ResultCollector collector = FunctionService.onMember(member).withArgs(functionArgs).execute(ManagementConstants.QUERY_DATA_FUNCTION);
-        ResultCollector coll = FunctionService.onMembers(members)
-                                              .withArgs(functionArgs)
-                                              .execute(ManagementConstants.QUERY_DATA_FUNCTION);
+        ResultCollector coll = FunctionService.onMembers(members).withArgs(functionArgs).execute(ManagementConstants.QUERY_DATA_FUNCTION);
-  public static Object queryData(final String query,
-                                 final String members,
-                                 final int limit,
-                                 final boolean zipResult,
-                                 final int queryResultSetLimit,
-                                 final int queryCollectionsDepth) throws Exception {
+  public static Object queryData(final String query, final String members, final int limit, final boolean zipResult, final int queryResultSetLimit, final int queryCollectionsDepth) throws Exception {
-                return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBERS.toLocalizedString(regionPath))
-                  .toString();
+                return new JsonisedErroMessage(ManagementStrings.QUERY__MSG__REGIONS_NOT_FOUND_ON_MEMBERS.toLocalizedString(regionPath)).toString();
-          if (regionMBean.getRegionType().equals(DataPolicy.PARTITION.toString()) || 
-              regionMBean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
+          if (regionMBean.getRegionType().equals(DataPolicy.PARTITION.toString()) || regionMBean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
-    
+
-   *
-   * @throws QueryInvalidException

UPD83 UPD45 UPD42 UPD42 INS42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL65