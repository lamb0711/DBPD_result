GEODE-6414: PdxInstanceFactory uses too much memory when it creates a PdxInstance (#3200)

Two causes of using too much memory have been identified:

1. PdxInstanceFactory.create() will register a duplicate PdxType when there is already an identical PdxType in the type registry. It should reuse the PdxType that is already in the type registry instead.
2. The HeapByteBuffer may have extra unused memory in it. A ByteBuffer of the size needed can be allocated and the bytes from the larger one copied into it.

To solve the second issue a new method on HeapDataOutputStream was
added that supports throwing away a specified number of initial bytes in
the stream when converting it to a ByteBuffer. PdxInstanceFactory always
throws away the first 9 bytes. This method also optimizes the creations done by
the factory when the serialized bytes exceed 1024.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>
Co-authored-by: Benjamin Ross <bross@pivotal.io>

+   *
+   * @return the existing type or the new type
-  public int defineType(PdxType newType) {
+  public PdxType defineType(PdxType newType) {
-      int eid = existingId;
-      newType.setTypeId(eid);
-      return eid;
+      PdxType existingType = this.idToType.get(existingId);
+      if (existingType != null) {
+        return existingType;
+      }
-    newType.setTypeId(id);
+      newType.setTypeId(id);
-    } else if (!oldType.equals(newType)) {
-      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType
-          + " new type=" + newType);
+      return newType;
+    } else {
+      if (!oldType.equals(newType)) {
+        Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType
+            + " new type=" + newType);
+      }
+      return oldType;
-
-    return id;
-      defineType(newType);
-      this.localTypeIds.put(o.getClass(), newType);
+      PdxType existingType = defineType(newType);
+      this.localTypeIds.put(o.getClass(), existingType);
+      return existingType;
-      defineType(newType);
+      return defineType(newType);
-
-    return newType;
+
+  // accessors for unit test
+
+  Map<Integer, PdxType> getIdToType() {
+    return idToType;
+  }
+
+  Map<PdxType, Integer> getTypeToId() {
+    return typeToId;
+  }
+
+  Map<Class<?>, PdxType> getLocalTypeIds() {
+    return localTypeIds;
+  }

INS31 INS31 INS31 INS43 INS74 INS42 INS8 INS74 INS42 INS8 INS74 INS42 INS8 INS65 INS42 INS43 INS43 INS43 INS41 INS43 INS43 INS43 INS41 INS43 INS74 INS43 INS41 INS66 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS60 INS25 MOV21 MOV41 MOV25 INS41 INS60 INS41 INS41 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS42 MOV32 INS42 UPD42 MOV42 INS32 INS42 INS33 MOV41 INS42 INS42 MOV32 UPD42 INS22 UPD42 MOV42 UPD42 MOV42 UPD42 INS52 INS42 DEL39 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL41 DEL21 DEL21