GEODE-6353: remove the ThreadLocal from SecurityConfig. (#3154)

* GEODE-6353: remove the ThreadLocal from SecurityConfig.

* Extract `DistributedSystem.connect()` to `InternalDistributedSystem.connectInternal()` so that parameters can be passed in.
* Make `DistributedSystem.existingSystems` a
`List<InternalDistributedSystem>.
* Add a comment making it clear that users should never override `DistributedSystem`.
* Remove commented code

-import static org.apache.geode.distributed.internal.InternalDistributedSystem.ALLOW_MULTIPLE_SYSTEMS;
-import java.util.Iterator;
+ * <P>
+ *
+ * Users should never subclass this class.
+ *
-  protected static volatile List existingSystems = Collections.EMPTY_LIST;
+  protected static volatile List<InternalDistributedSystem> existingSystems =
+      Collections.EMPTY_LIST;
-    if (config == null) {
-      // fix for bug 33992
-      config = new Properties();
-    }
-
-    if (ALLOW_MULTIPLE_SYSTEMS) {
-      return InternalDistributedSystem.newInstance(config);
-    }
-
-    synchronized (existingSystemsLock) {
-      if (ClusterDistributionManager.isDedicatedAdminVM()) {
-        // For a dedicated admin VM, check to see if there is already
-        // a connect that will suit our purposes.
-        DistributedSystem existingSystem = getConnection(config);
-        if (existingSystem != null) {
-          return existingSystem;
-        }
-
-      } else {
-        boolean existingSystemDisconnecting = true;
-        boolean isReconnecting = false;
-        while (!existingSystems.isEmpty() && existingSystemDisconnecting && !isReconnecting) {
-          Assert.assertTrue(existingSystems.size() == 1);
-
-          InternalDistributedSystem existingSystem =
-              (InternalDistributedSystem) existingSystems.get(0);
-          existingSystemDisconnecting = existingSystem.isDisconnecting();
-          // a reconnecting DS will block on GemFireCache.class and a ReconnectThread
-          // holds that lock and invokes this method, so we break out of the loop
-          // if we detect this condition
-          isReconnecting = existingSystem.isReconnectingDS();
-          if (existingSystemDisconnecting) {
-            boolean interrupted = Thread.interrupted();
-            try {
-              // no notify for existingSystemsLock, just to release the sync
-              existingSystemsLock.wait(50);
-            } catch (InterruptedException ex) {
-              interrupted = true;
-            } finally {
-              if (interrupted) {
-                Thread.currentThread().interrupt();
-              }
-            }
-          } else if (existingSystem.isConnected()) {
-            existingSystem.validateSameProperties(config, existingSystem.isConnected());
-            return existingSystem;
-          } else {
-            // This should not happen: existingSystem.isConnected()==false &&
-            // existingSystem.isDisconnecting()==false
-            throw new AssertionError(
-                "system should not have both disconnecting==false and isConnected==false");
-          }
-        }
-      }
-
-      // Make a new connection to the distributed system
-      InternalDistributedSystem newSystem = InternalDistributedSystem.newInstance(config);
-      addSystem(newSystem);
-      return newSystem;
-    }
+    return InternalDistributedSystem.connectInternal(config, null);
-      List listOfSystems = new ArrayList(existingSystems);
+      List<InternalDistributedSystem> listOfSystems = new ArrayList<>(existingSystems);
-  private static DistributedSystem getConnection(Properties config) {
+  protected static DistributedSystem getConnection(Properties config) {
-    List l = existingSystems;
-    for (Iterator iter = l.iterator(); iter.hasNext();) {
-      InternalDistributedSystem existingSystem = (InternalDistributedSystem) iter.next();
+    for (InternalDistributedSystem existingSystem : existingSystems) {
-      // logger.info("creating new distributed system for admin");
-      // for (java.util.Enumeration en=props.propertyNames(); en.hasMoreElements(); ) {
-      // String prop=(String)en.nextElement();
-      // logger.info(prop + "=" + props.getProperty(prop));
-      // }
-      // LOG: no longer using the LogWriter that was passed in
-  // /**
-  // * Connects to a GemFire distributed system with a configuration
-  // * supplemented by the given properties.
-  // *
-  // * @param config
-  // * The <a href="#configuration">configuration properties</a>
-  // * used when connecting to the distributed system
-  // * @param callback
-  // * A user-specified object that is delivered with the {@link
-  // * org.apache.geode.admin.SystemMembershipEvent}
-  // * triggered by connecting.
-  // *
-  // * @see #connect(Properties)
-  // * @see org.apache.geode.admin.SystemMembershipListener#memberJoined
-  // *
-  // * @since GemFire 4.0
-  // */
-  // public static DistributedSystem connect(Properties config,
-  // Object callback) {
-  // throw new UnsupportedOperationException("Not implemented yet");
-  // }
-

INS74 INS8 UPD83 INS66 INS66 MOV43 MOV43 MOV41 INS70 MOV42 INS44 INS42 MOV8 UPD42 INS33 MOV43 INS42 INS74 MOV43 MOV43 INS74 MOV43 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL51 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24