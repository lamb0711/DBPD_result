Merge branch 'release/1.3.0'

+import org.apache.geode.cache.partition.PartitionRegionHelper;
+  PartitionedRegionRedundancyTracker getRedundancyTracker() {
+    return redundancyTracker;
+  }
+
+  private final PartitionedRegionRedundancyTracker redundancyTracker;
+
+    this.redundancyTracker = new PartitionedRegionRedundancyTracker(this.totalNumberOfBuckets,
+        this.redundantCopies, this.prStats, getFullPath());
-    validateCallbackArg(aCallbackArgument);
-      final RegionFunctionContextImpl prContext = new RegionFunctionContextImpl(function.getId(),
-          PartitionedRegion.this, execution.getArgumentsForMember(getMyId().getId()),
-          localKeys, ColocationHelper
-              .constructAndGetAllColocatedLocalDataSet(PartitionedRegion.this, localBucketSet),
-          localBucketSet, resultSender, execution.isReExecute());
+      final RegionFunctionContextImpl prContext =
+          new RegionFunctionContextImpl(cache, function.getId(), PartitionedRegion.this,
+              execution.getArgumentsForMember(getMyId().getId()),
+              localKeys, ColocationHelper
+                  .constructAndGetAllColocatedLocalDataSet(PartitionedRegion.this, localBucketSet),
+              localBucketSet, resultSender, execution.isReExecute());
-          new RegionFunctionContextImpl(function.getId(), PartitionedRegion.this,
+          new RegionFunctionContextImpl(cache, function.getId(), PartitionedRegion.this,
-          new RegionFunctionContextImpl(function.getId(), PartitionedRegion.this,
+          new RegionFunctionContextImpl(cache, function.getId(), PartitionedRegion.this,
-          new RegionFunctionContextImpl(function.getId(), PartitionedRegion.this,
+          new RegionFunctionContextImpl(cache, function.getId(), PartitionedRegion.this,
-  void createEventTracker() {
-    // PR buckets maintain their own trackers. None is needed at this level
-  }
-
-  @Override
-  public VersionTag findVersionTagForClientEvent(EventID eventId) {
+  public VersionTag findVersionTagForEvent(EventID eventId) {
-        VersionTag result = entry.getValue().findVersionTagForClientEvent(eventId);
+        VersionTag result = entry.getValue().findVersionTagForEvent(eventId);
-        if (index != null && !(index instanceof Index)) {
+        if (ind != null && !(ind instanceof Index)) {
-    // Set to Bucket regions as well
-    if (this.getDataStore() != null) { // not for accessors
-      for (Object o : this.getDataStore().getAllLocalBuckets()) {
-        Map.Entry entry = (Map.Entry) o;
-        Region bucketRegion = (Region) entry.getValue();
-        bucketRegion.getAttributesMutator().setEntryTimeToLive(timeToLive);
-      }
-    }
+
+    /*
+     * All buckets must be created to make this change, otherwise it is possible for
+     * updatePRConfig(...) to make changes that cause bucket creation to live lock
+     */
+    PartitionRegionHelper.assignBucketsToPartitions(this);
+    dataStore.lockBucketCreationAndVisit(
+        (bucketId, r) -> r.getAttributesMutator().setEntryTimeToLive(timeToLive));
-    if (this.getDataStore() != null) { // not for accessors
-      for (Object o : this.getDataStore().getAllLocalBuckets()) {
-        Map.Entry entry = (Map.Entry) o;
-        Region bucketRegion = (Region) entry.getValue();
-        bucketRegion.getAttributesMutator().setCustomEntryTimeToLive(custom);
-      }
-    }
+    dataStore.lockBucketCreationAndVisit(
+        (bucketId, r) -> r.getAttributesMutator().setCustomEntryTimeToLive(custom));
+    /*
+     * All buckets must be created to make this change, otherwise it is possible for
+     * updatePRConfig(...) to make changes that cause bucket creation to live lock
+     */
+    PartitionRegionHelper.assignBucketsToPartitions(this);
-    if (this.getDataStore() != null) { // not for accessors
-      for (Object o : this.getDataStore().getAllLocalBuckets()) {
-        Map.Entry entry = (Map.Entry) o;
-        Region bucketRegion = (Region) entry.getValue();
-        bucketRegion.getAttributesMutator().setEntryIdleTimeout(idleTimeout);
-      }
-    }
+    dataStore.lockBucketCreationAndVisit(
+        (bucketId, r) -> r.getAttributesMutator().setEntryIdleTimeout(idleTimeout));
-    if (this.getDataStore() != null) { // not for accessors
-      for (Object o : this.getDataStore().getAllLocalBuckets()) {
-        Map.Entry entry = (Map.Entry) o;
-        Region bucketRegion = (Region) entry.getValue();
-        bucketRegion.getAttributesMutator().setCustomEntryIdleTimeout(custom);
-      }
-    }
+    dataStore.lockBucketCreationAndVisit(
+        (bucketId, r) -> r.getAttributesMutator().setCustomEntryIdleTimeout(custom));
+      parIndex.markValid(true);

INS26 MOV31 INS40 INS23 INS43 UPD42 INS83 INS83 INS43 INS59 UPD42 INS8 INS8 INS8 INS8 INS42 INS41 INS42 INS42 INS21 MOV60 INS21 INS21 MOV21 MOV41 MOV60 INS21 MOV41 MOV60 INS21 INS21 MOV21 MOV41 MOV60 INS21 MOV41 INS42 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS21 INS22 INS14 INS42 INS42 MOV52 UPD42 MOV42 UPD42 MOV42 INS86 UPD42 MOV42 UPD42 MOV42 INS86 INS42 INS42 MOV52 UPD42 MOV42 UPD42 MOV42 INS86 UPD42 MOV42 UPD42 MOV42 INS86 INS32 INS52 INS42 INS43 INS22 INS22 INS22 INS32 INS59 INS59 INS32 INS59 INS59 INS32 INS59 INS59 INS32 INS59 INS59 INS32 INS42 INS42 INS9 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL78 DEL39 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL40 DEL43 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL52 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL52 DEL32 DEL32 DEL40 DEL43 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL52 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL40 DEL43 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL52 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL52 DEL32 DEL32 DEL40 DEL43 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8