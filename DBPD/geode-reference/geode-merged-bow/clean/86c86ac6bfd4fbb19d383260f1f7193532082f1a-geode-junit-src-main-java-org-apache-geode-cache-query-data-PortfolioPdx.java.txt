GEODE-5985 Possible integer overflow

We had a number of calculations that were taking place with ints instead
of longs.  I've modified them to, in most places, just add an L to the
constant multiplier.  In other places I had to change a variable type
from int to long.

There were a few places that were also assigning a long to an int
variable or an int to a byte variable.  In these I added bit AND
operators to reduce the chances of overflow.

IndexElemArray needed a lot of work due to its "size" instvar being
a byte.

This closes #2783

-    position1 = new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000);
+    position1 = new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000L);
-      position2 = new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000);
+      position2 = new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000L);
-        new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000));
+        new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000L));
-        new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000));
+        new PositionPdx(secIds[PositionPdx.cnt % secIds.length], PositionPdx.cnt * 1000L));
-      PositionPdx p = new PositionPdx(secIds[k], (k + 1) * 1000);
+      PositionPdx p = new PositionPdx(secIds[k], (k + 1) * 1000L);

UPD34 UPD34 UPD34 UPD34 UPD34