Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A fragment is a block of memory that can have chunks allocated from it.
- * The allocations are always from the front so the free memory is always
- * at the end. The freeIdx keeps track of the first byte of free memory in
- * the fragment.
- * The base memory address and the total size of a fragment never change.
- * During defragmentation fragments go away and are recreated.
+ * A fragment is a block of memory that can have chunks allocated from it. The allocations are
+ * always from the front so the free memory is always at the end. The freeIdx keeps track of the
+ * first byte of free memory in the fragment. The base memory address and the total size of a
+ * fragment never change. During defragmentation fragments go away and are recreated.
-  private static AtomicIntegerFieldUpdater<Fragment> freeIdxUpdater = AtomicIntegerFieldUpdater.newUpdater(Fragment.class, "freeIdx");
-  
+  private static AtomicIntegerFieldUpdater<Fragment> freeIdxUpdater =
+      AtomicIntegerFieldUpdater.newUpdater(Fragment.class, "freeIdx");
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    return (int)(value ^ (value >>> 32));
+    return (int) (value ^ (value >>> 32));
+
-}
+}

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66