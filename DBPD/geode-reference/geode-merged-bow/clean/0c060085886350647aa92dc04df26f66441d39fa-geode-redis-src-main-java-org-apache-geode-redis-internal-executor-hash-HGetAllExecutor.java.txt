GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import java.util.Map.Entry;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * <pre>
+ * Implements the Redis HGETALL command to return
+ *
+ * Returns all fields and values of the hash stored at key.
+ *
+ * Examples:
+ *
+ * redis> HSET myhash field1 "Hello"
+ * (integer) 1
+ * redis> HSET myhash field2 "World"
+ * (integer) 1
+ * redis> HGETALL myhash
+ * 1) "field1"
+ * 2) "Hello"
+ * 3) "field2"
+ * 4) "World"
+ * </pre>
+ */
-
+    Collection<Entry<ByteArrayWrapper, ByteArrayWrapper>> entries;
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Map<ByteArrayWrapper, ByteArrayWrapper> results = getMap(context, key);
-    checkDataType(key, RedisDataType.REDIS_HASH, context);
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion = getRegion(context, key);
+      if (results == null || results.isEmpty()) {
+        command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+        return;
+      }
-    if (keyRegion == null) {
-      command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+      entries = results.entrySet();
+
+      if (entries == null || entries.isEmpty()) {
+        command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+        return;
+      }
+
+      // create a copy
+      entries = new ArrayList<>(entries);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-    }
-
-    Collection<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> entries =
-        new ArrayList(keyRegion.entrySet()); // This creates a CopyOnRead behavior
-
-    if (entries.isEmpty()) {
-      command.setResponse(Coder.getEmptyArrayResponse(context.getByteBufAllocator()));
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));

MOV26 INS26 INS40 UPD40 UPD40 INS29 INS65 MOV60 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS54 INS74 INS59 INS58 INS8 INS12 INS12 MOV43 UPD74 MOV74 INS42 INS43 INS59 INS60 MOV25 INS21 MOV25 INS21 INS44 INS8 INS44 INS8 INS42 UPD43 INS42 INS42 INS32 UPD74 MOV74 INS59 INS27 INS7 INS27 INS7 INS43 INS42 INS21 MOV21 INS41 INS43 INS42 INS21 INS41 UPD42 INS42 INS42 INS42 UPD43 INS42 INS32 INS27 INS32 INS42 INS32 INS27 MOV32 INS42 INS14 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS42 INS42 INS42 INS42 INS42 INS33 INS74 INS42 INS32 INS42 UPD42 UPD42 INS32 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS42 INS32 INS45 UPD42 MOV42 INS42 INS32 INS45 MOV42 INS42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL40 DEL27 DEL40 DEL74 DEL42 DEL32 DEL14 DEL59 DEL60