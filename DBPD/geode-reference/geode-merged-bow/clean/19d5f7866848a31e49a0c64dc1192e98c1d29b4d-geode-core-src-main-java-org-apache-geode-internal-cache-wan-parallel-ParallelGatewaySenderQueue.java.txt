GEODE-7458: Adding option in gfsh command "start gateway sender" to control clearing of existing queues (#4387)

* GEODE-7458: Solution for parallel GW sender queue restore

* GEODE-7458: update GatewaySender interface due to new option

* GEODE-7458: implement clean queue

* GEODE-7458: Update of interface after comments

* GEODE-7458: Update documentation

* GEODE-7458: patch for failed tests

* GEODE-7458: Remove comments and rename function

* GEODE-7458: Update option name

* GEODE-7458: Fix for integration tests

* GEODE-7458: Fix for lucene tests

* GEODE-7458: Added DUnit for command option

* GEODE-7458: Added distributed test for new functionality

* GEODE-7458: Update documentation

* GEODE-7458: Added UT

* GEODE-7458: Update after comments

* GEODE-7458: Modify OOM problematic UT

* GEODE-7458: Added distributed test for added new member

* GEODE-7458: remove closing of queue region at stop

* GEODE-7458: corrections for SerialGWSender test

* GEODE-7458: added parallel GW fix

* GEODE-7458: small fix

* GEODE-7458: optimize fix

* GEODE-7458: return deleted TC

* GEODE-7458: modify failed stress test, retry

* GEODE-7458: modification after rebase

* GEODE-7458: update after comments

* GEODE-7458: solution for failing tests

* Rebase PR after last changes in develop branch
+import org.apache.geode.annotations.VisibleForTesting;
+  private final boolean cleanQueues;
+
+  @VisibleForTesting
+  boolean getCleanQueues() {
+    return cleanQueues;
+  }
+
+
+  private final boolean asyncEvent;
+
-      int nDispatcher) {
-    this(sender, userRegions, idx, nDispatcher, new MetaRegionFactory());
+      int nDispatcher, boolean cleanQueues) {
+    this(sender, userRegions, idx, nDispatcher, new MetaRegionFactory(), cleanQueues);
-      int nDispatcher, MetaRegionFactory metaRegionFactory) {
+      int nDispatcher, MetaRegionFactory metaRegionFactory, boolean cleanQueues) {
+    this.cleanQueues = cleanQueues;
+
+    if (this.sender.getId().contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)) {
+      this.asyncEvent = true;
+    } else {
+      this.asyncEvent = false;
+    }
+
-        if (this.sender.getId().contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)) {
+
+        if (this.asyncEvent) {
+        if (prQ == null)
+          return;
+        if (this.cleanQueues) {
+          // now, clean up the shadowPR's buckets on this node (primary as well as
+          // secondary) for a fresh start
+          Set<BucketRegion> localBucketRegions = prQ.getDataStore().getAllLocalBucketRegions();
+          for (BucketRegion bucketRegion : localBucketRegions) {
+            bucketRegion.clear();
+          }
+        }
+
+
-    if (this.sender.getId().contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)) {
+    if (this.asyncEvent) {
-    Set<BucketRegion> localBucketRegions = prQ.getDataStore().getAllLocalBucketRegions();
-    for (BucketRegion bucketRegion : localBucketRegions) {
-      bucketRegion.clear();
+    if (this.cleanQueues) {
+      Set<BucketRegion> localBucketRegions = prQ.getDataStore().getAllLocalBucketRegions();
+      for (BucketRegion bucketRegion : localBucketRegions) {
+        bucketRegion.clear();
+      }
-      for (Iterator<GatewaySenderEventImpl> iterator = peekedEvents.iterator(); iterator
-          .hasNext();) {
-        GatewaySenderEventImpl event = iterator.next();
-        final int bucketId = event.getBucketId();
-        final PartitionedRegion region = (PartitionedRegion) event.getRegion();
-        if (!region.getRegionAdvisor().isPrimaryForBucket(bucketId)) {
-          iterator.remove();
-          BucketRegionQueue brq = getBucketRegionQueueByBucketId(getRandomShadowPR(), bucketId);
-          if (brq != null) {
-            brq.pushKeyIntoQueue(event.getShadowKey());
+      Object[] helpArray = peekedEvents.toArray();
+      if (helpArray.length > 0) {
+
+        for (int i = helpArray.length - 1; i >= 0; i--) {
+          GatewaySenderEventImpl event = (GatewaySenderEventImpl) helpArray[i];
+          final int bucketId = event.getBucketId();
+          final PartitionedRegion region = (PartitionedRegion) event.getRegion();
+          if (!region.getRegionAdvisor().isPrimaryForBucket(bucketId)) {
+            peekedEvents.remove(event);
+            BucketRegionQueue brq = getBucketRegionQueueByBucketId(getRandomShadowPR(), bucketId);
+            if (brq != null) {
+              brq.pushKeyIntoQueue(event.getShadowKey());
+            }
-    // Because of bug 49060 do not close the regions of a parallel queue
+    if (resetLastPeeked) {
+      returnToQueuePreviouslyPeekedEvents();
+      resetLastPeeked = false;
+    }
+  }
+
+  private void returnToQueuePreviouslyPeekedEvents() {
+    Object[] helpArray = peekedEvents.toArray();
+    peekedEvents.clear();
+    if (helpArray.length == 0) {
+      return;
+    }
+
+    for (int i = helpArray.length - 1; i >= 0; i--) {
+      GatewaySenderEventImpl event = (GatewaySenderEventImpl) helpArray[i];
+      final int bucketId = event.getBucketId();
+      final PartitionedRegion region = (PartitionedRegion) event.getRegion();
+      if (region.getRegionAdvisor().isPrimaryForBucket(bucketId)) {
+        BucketRegionQueue brq = getBucketRegionQueueByBucketId(getRandomShadowPR(), bucketId);
+        if (brq != null) {
+          brq.pushKeyIntoQueue(event.getShadowKey());
+        }
+      }
+    }

INS26 INS40 INS23 INS31 INS23 INS31 INS83 INS83 INS39 INS59 INS78 INS39 INS42 INS8 INS83 INS83 INS39 INS59 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS41 INS42 INS39 INS42 INS39 INS42 INS21 INS25 INS25 INS25 INS60 INS21 INS25 INS24 INS42 INS42 INS7 MOV32 INS8 INS8 INS22 INS22 INS8 INS42 INS8 INS5 INS59 INS32 INS27 INS8 INS58 INS27 INS37 INS8 INS22 INS42 INS21 INS21 MOV52 UPD42 MOV42 INS52 INS42 MOV60 MOV70 INS60 INS25 INS21 INS21 INS43 INS85 INS42 INS32 INS42 INS42 INS40 INS34 INS41 INS39 INS59 INS42 INS34 INS42 INS60 INS60 INS60 INS25 INS52 INS42 INS7 INS7 INS5 INS59 INS27 INS8 INS32 INS7 INS42 INS42 INS42 INS42 INS27 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS32 INS8 INS22 INS9 INS22 INS9 INS25 INS25 INS43 INS85 INS42 INS32 INS40 INS34 MOV24 INS42 INS42 INS9 INS40 INS34 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS11 INS32 INS42 INS42 INS60 INS25 INS52 INS42 INS52 INS42 INS22 INS27 INS41 INS22 INS8 INS42 INS42 INS42 INS27 INS37 INS43 INS2 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS52 INS42 INS42 INS33 INS52 INS42 INS60 INS70 INS39 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS74 INS59 INS44 INS42 INS8 UPD42 INS27 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS40 INS34 INS11 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 DEL22 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8