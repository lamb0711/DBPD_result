Merge branch 'develop' into feature/GEODE-7049

-package org.apache.geode.distributed.internal.membership;
+package org.apache.geode.distributed.internal.membership.gms;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.DataSerializableFixedID;
-import org.apache.geode.internal.InternalDataSerializer;
-import org.apache.geode.internal.Version;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.serialization.DataSerializableFixedID;
+import org.apache.geode.internal.serialization.DeserializationContext;
+import org.apache.geode.internal.serialization.SerializationContext;
+import org.apache.geode.internal.serialization.StaticSerialization;
+import org.apache.geode.internal.serialization.Version;
- * The NetView class represents a membership view. Note that this class is not synchronized, so take
+ * The GMSMembershipView class represents a membership view. Note that this class is not
+ * synchronized, so take
- * @since GemFire 5.5
-public class NetView implements DataSerializableFixedID {
+public class GMSMembershipView implements DataSerializableFixedID {
+  private static final Logger logger = LogService.getLogger();
-  private List<InternalDistributedMember> members;
+  private List<GMSMember> members;
-  private final Map<InternalDistributedMember, Object> publicKeys = new ConcurrentHashMap<>();
+  private final Map<GMSMember, Object> publicKeys = new ConcurrentHashMap<>();
-  private Set<InternalDistributedMember> shutdownMembers;
-  private Set<InternalDistributedMember> crashedMembers;
-  private InternalDistributedMember creator;
-  private Set<InternalDistributedMember> hashedMembers;
+  private Set<GMSMember> shutdownMembers;
+  private Set<GMSMember> crashedMembers;
+  private GMSMember creator;
+  private Set<GMSMember> hashedMembers;
-  public NetView() {
+  public GMSMembershipView() {
-  public NetView(InternalDistributedMember creator) {
+  public GMSMembershipView(GMSMember creator) {
-  public NetView(InternalDistributedMember creator, int viewId,
-      List<InternalDistributedMember> members) {
+  public GMSMembershipView(GMSMember creator, int viewId,
+      List<GMSMember> members) {
-  public NetView(int size, long viewId) {
+  public GMSMembershipView(int size, long viewId) {
-  public NetView(NetView other, int viewId) {
+  public GMSMembershipView(GMSMembershipView other, int viewId) {
-  public NetView(InternalDistributedMember creator, int viewId,
-      List<InternalDistributedMember> mbrs, Set<InternalDistributedMember> shutdowns,
-      Set<InternalDistributedMember> crashes) {
+  public GMSMembershipView(GMSMember creator, int viewId,
+      List<GMSMember> mbrs, Set<GMSMember> shutdowns,
+      Set<GMSMember> crashes) {
+
-  public InternalDistributedMember getCreator() {
+
+  public GMSMember getCreator() {
-  public void setCreator(InternalDistributedMember creator) {
+  public void setCreator(GMSMember creator) {
-  public Object getPublicKey(InternalDistributedMember mbr) {
+  public Object getPublicKey(GMSMember mbr) {
-  public void setPublicKey(InternalDistributedMember mbr, Object key) {
+  public void setPublicKey(GMSMember mbr, Object key) {
-  public void setPublicKeys(NetView otherView) {
+  public void setPublicKeys(GMSMembershipView otherView) {
-  public int getFailureDetectionPort(InternalDistributedMember mbr) {
+  public int getFailureDetectionPort(GMSMember mbr) {
-  public void setFailureDetectionPort(InternalDistributedMember mbr, int port) {
+  public void setFailureDetectionPort(GMSMember mbr, int port) {
-  public void setFailureDetectionPorts(NetView otherView) {
+  public void setFailureDetectionPorts(GMSMembershipView otherView) {
-      for (InternalDistributedMember mbr : otherView.getMembers()) {
+      for (GMSMember mbr : otherView.getMembers()) {
-  public List<InternalDistributedMember> getMembers() {
-    return Collections.unmodifiableList(this.members);
-  }
-
-  /**
-   * return members that are i this view but not the given old view
-   */
-  public List<InternalDistributedMember> getNewMembers(NetView olderView) {
-    List<InternalDistributedMember> result = new ArrayList<>(members);
-    result.removeAll(olderView.getMembers());
-    return result;
-  }
-
-  /**
-   * return members added in this view
-   */
-  public List<InternalDistributedMember> getNewMembers() {
-    List<InternalDistributedMember> result = new ArrayList<>(5);
-    result.addAll(this.members.stream().filter(mbr -> mbr.getVmViewId() == this.viewId)
-        .collect(Collectors.toList()));
-    return result;
-  }
-
-  public void add(InternalDistributedMember mbr) {
+  public void add(GMSMember mbr) {
-  public void addCrashedMembers(Set<InternalDistributedMember> mbr) {
+  public void addCrashedMembers(Set<GMSMember> mbr) {
-  public boolean remove(InternalDistributedMember mbr) {
+  /**
+   * return members that are i this view but not the given old view
+   */
+  public List<GMSMember> getNewMembers(GMSMembershipView olderView) {
+    List<GMSMember> result = new ArrayList<>(members);
+    result.removeAll(olderView.getMembers());
+    return result;
+  }
+
+  /**
+   * return members added in this view
+   */
+  public List<GMSMember> getNewMembers() {
+    List<GMSMember> result = new ArrayList<>(5);
+    result.addAll(this.members.stream().filter(mbr -> mbr.getVmViewId() == this.viewId)
+        .collect(Collectors.toList()));
+    return result;
+  }
+
+  public boolean remove(GMSMember mbr) {
-  public void removeAll(Collection<InternalDistributedMember> ids) {
+  public void removeAll(Collection<GMSMember> ids) {
-  public boolean contains(DistributedMember mbr) {
-    assert mbr instanceof InternalDistributedMember;
+  public boolean contains(GMSMember mbr) {
-  public InternalDistributedMember getLeadMember() {
-    for (InternalDistributedMember mbr : this.members) {
-      if (mbr.getVmKind() == ClusterDistributionManager.NORMAL_DM_TYPE) {
+  public GMSMember getLeadMember() {
+    for (GMSMember mbr : this.members) {
+      if (mbr.getVmKind() == GMSMember.NORMAL_DM_TYPE) {
-  public InternalDistributedMember getCoordinator() {
+  public GMSMember getCoordinator() {
-      for (InternalDistributedMember addr : members) {
-        if (addr.getNetMember().preferredForCoordinator()) {
+      for (GMSMember addr : members) {
+        if (addr.preferredForCoordinator()) {
-  public InternalDistributedMember getCoordinator(
-      Collection<InternalDistributedMember> rejections) {
+  public GMSMember getCoordinator(
+      Collection<GMSMember> rejections) {
-      for (InternalDistributedMember addr : members) {
-        if (addr.getNetMember().preferredForCoordinator() && !rejections.contains(addr)) {
+      for (GMSMember addr : members) {
+        if (addr.preferredForCoordinator() && !rejections.contains(addr)) {
-      for (InternalDistributedMember addr : members) {
+      for (GMSMember addr : members) {
-  public List<InternalDistributedMember> getPreferredCoordinators(
-      Set<InternalDistributedMember> filter, InternalDistributedMember localAddress,
+  public List<GMSMember> getPreferredCoordinators(
+      Set<GMSMember> filter, GMSMember localAddress,
-    List<InternalDistributedMember> results = new ArrayList<>();
-    List<InternalDistributedMember> notPreferredCoordinatorList = new ArrayList<>();
+    List<GMSMember> results = new ArrayList<>();
+    List<GMSMember> notPreferredCoordinatorList = new ArrayList<>();
-      for (InternalDistributedMember addr : members) {
+      for (GMSMember addr : members) {
-        if (addr.getNetMember().preferredForCoordinator() && !filter.contains(addr)) {
+        if (addr.preferredForCoordinator() && !filter.contains(addr)) {
-        Iterator<InternalDistributedMember> it = notPreferredCoordinatorList.iterator();
+        Iterator<GMSMember> it = notPreferredCoordinatorList.iterator();
-  public Set<InternalDistributedMember> getShutdownMembers() {
+  /* NetView implementation method */
+
+  public List<GMSMember> getGMSMembers() {
+    return (List<GMSMember>) (List<?>) Collections.unmodifiableList(this.members);
+  }
+
+
+  public List<GMSMember> getMembers() {
+    return Collections.unmodifiableList(this.members);
+  }
+
+  public Set<GMSMember> getShutdownMembers() {
-  public Set<InternalDistributedMember> getCrashedMembers() {
+  public Set<GMSMember> getCrashedMembers() {
-  public boolean shouldBeCoordinator(InternalDistributedMember who) {
-    Iterator<InternalDistributedMember> it = this.members.iterator();
-    InternalDistributedMember firstNonPreferred = null;
+  public boolean shouldBeCoordinator(GMSMember who) {
+    Iterator<GMSMember> it = this.members.iterator();
+    GMSMember firstNonPreferred = null;
-      InternalDistributedMember mbr = it.next();
-      if (mbr.getNetMember().preferredForCoordinator()) {
+      GMSMember mbr = it.next();
+      if (mbr.preferredForCoordinator()) {
-    InternalDistributedMember lead = getLeadMember();
-    for (InternalDistributedMember mbr : this.members) {
-      result += mbr.getNetMember().getMemberWeight();
+    GMSMember lead = getLeadMember();
+    for (GMSMember mbr : this.members) {
+      result += mbr.getMemberWeight();
-        case ClusterDistributionManager.NORMAL_DM_TYPE:
+        case GMSMember.NORMAL_DM_TYPE:
-        case ClusterDistributionManager.LOCATOR_DM_TYPE:
+        case GMSMember.LOCATOR_DM_TYPE:
-        case ClusterDistributionManager.ADMIN_ONLY_DM_TYPE:
+        case GMSMember.ADMIN_ONLY_DM_TYPE:
-  public int getCrashedMemberWeight(NetView oldView) {
+  public int getCrashedMemberWeight(GMSMembershipView oldView) {
-    InternalDistributedMember lead = oldView.getLeadMember();
-    for (InternalDistributedMember mbr : this.crashedMembers) {
+    GMSMember lead = oldView.getLeadMember();
+    for (GMSMember mbr : this.crashedMembers) {
-      result += mbr.getNetMember().getMemberWeight();
+      result += mbr.getMemberWeight();
-        case ClusterDistributionManager.NORMAL_DM_TYPE:
+        case GMSMember.NORMAL_DM_TYPE:
-        case ClusterDistributionManager.LOCATOR_DM_TYPE:
+        case GMSMember.LOCATOR_DM_TYPE:
-        case ClusterDistributionManager.ADMIN_ONLY_DM_TYPE:
+        case GMSMember.ADMIN_ONLY_DM_TYPE:
-  public Set<InternalDistributedMember> getActualCrashedMembers(NetView oldView) {
-    Set<InternalDistributedMember> result = new HashSet<>(this.crashedMembers.size());
+  public Set<GMSMember> getActualCrashedMembers(GMSMembershipView oldView) {
+    Set<GMSMember> result = new HashSet<>(this.crashedMembers.size());
-        .filter(mbr -> (mbr.getVmKind() != ClusterDistributionManager.ADMIN_ONLY_DM_TYPE))
+        .filter(mbr -> (mbr.getVmKind() != GMSMember.ADMIN_ONLY_DM_TYPE))
-  public void logCrashedMemberWeights(NetView oldView, Logger log) {
-    InternalDistributedMember lead = oldView.getLeadMember();
-    for (InternalDistributedMember mbr : this.crashedMembers) {
+  public void logCrashedMemberWeights(GMSMembershipView oldView, Logger log) {
+    GMSMember lead = oldView.getLeadMember();
+    for (GMSMember mbr : this.crashedMembers) {
-      int mbrWeight = mbr.getNetMember().getMemberWeight();
+      int mbrWeight = mbr.getMemberWeight();
-        case ClusterDistributionManager.NORMAL_DM_TYPE:
+        case GMSMember.NORMAL_DM_TYPE:
-        case ClusterDistributionManager.LOCATOR_DM_TYPE:
+        case GMSMember.LOCATOR_DM_TYPE:
-        case ClusterDistributionManager.ADMIN_ONLY_DM_TYPE:
+        case GMSMember.ADMIN_ONLY_DM_TYPE:
-    InternalDistributedMember lead = getLeadMember();
+    GMSMember lead = getLeadMember();
-    for (InternalDistributedMember mbr : this.members) {
+    for (GMSMember mbr : this.members) {
-      for (InternalDistributedMember mbr : this.shutdownMembers) {
+      for (GMSMember mbr : this.shutdownMembers) {
-      for (InternalDistributedMember mbr : this.crashedMembers) {
+      for (GMSMember mbr : this.crashedMembers) {
-  public synchronized InternalDistributedMember getCanonicalID(InternalDistributedMember id) {
+  public synchronized GMSMember getCanonicalID(GMSMember id) {
-      for (InternalDistributedMember m : this.members) {
+      for (GMSMember m : this.members) {
-    if (other instanceof NetView) {
-      return this.members.equals(((NetView) other).getMembers());
+    if (other instanceof GMSMembershipView) {
+      return this.members.equals(((GMSMembershipView) other).getGMSMembers());
-  public void toData(DataOutput out) throws IOException {
-    DataSerializer.writeObject(creator, out);
+  public void toData(DataOutput out,
+      SerializationContext context) throws IOException {
+    GMSUtil.writeMemberID(creator, out, context);
-    writeAsArrayList(members, out);
-    InternalDataSerializer.writeSet(shutdownMembers, out);
-    InternalDataSerializer.writeSet(crashedMembers, out);
-    DataSerializer.writeIntArray(failureDetectionPorts, out);
+    writeAsArrayList(members, out, context);
+    GMSUtil.writeSetOfMemberIDs(shutdownMembers, out, context);
+    GMSUtil.writeSetOfMemberIDs(crashedMembers, out, context);
+    StaticSerialization.writeIntArray(failureDetectionPorts, out);
-    DataSerializer.writeHashMap(publicKeys, out);
+    StaticSerialization.writeHashMap(publicKeys, out, context);
-  @Override
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    creator = DataSerializer.readObject(in);
+
+  public void fromData(DataInput in,
+      DeserializationContext context) throws IOException, ClassNotFoundException {
+    creator = GMSUtil.readMemberID(in, context);
-    members = DataSerializer.readArrayList(in);
+    members = GMSUtil.readArrayOfIDs(in, context);
-    shutdownMembers = InternalDataSerializer.readHashSet(in);
-    crashedMembers = InternalDataSerializer.readHashSet(in);
-    failureDetectionPorts = DataSerializer.readIntArray(in);
-    Map pubkeys = DataSerializer.readHashMap(in);
+    shutdownMembers = GMSUtil.readHashSetOfMemberIDs(in, context);
+    crashedMembers = GMSUtil.readHashSetOfMemberIDs(in, context);
+    failureDetectionPorts = StaticSerialization.readIntArray(in);
+    Map pubkeys = StaticSerialization.readHashMap(in, context);
-  private void writeAsArrayList(List list, DataOutput out) throws IOException {
+  private void writeAsArrayList(List<GMSMember> list, DataOutput out,
+      SerializationContext context) throws IOException {
-    InternalDataSerializer.writeArrayLength(size, out);
+    StaticSerialization.writeArrayLength(size, out);
-        DataSerializer.writeObject(list.get(i), out);
+        GMSUtil.writeMemberID(list.get(i), out, context);

MOV26 MOV23 MOV23 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 INS23 MOV44 INS31 INS83 INS83 INS83 INS43 INS59 UPD74 UPD74 UPD74 MOV59 UPD74 MOV59 UPD43 UPD74 MOV59 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS74 UPD74 MOV74 UPD43 UPD43 UPD43 UPD74 MOV74 INS83 UPD74 MOV74 INS42 INS8 INS74 UPD74 MOV74 UPD74 MOV74 UPD74 MOV74 UPD43 INS44 INS44 INS44 UPD66 INS66 INS42 INS42 INS32 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD74 UPD43 UPD43 UPD74 UPD74 UPD42 UPD74 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 MOV43 INS43 UPD43 UPD43 UPD43 UPD74 UPD43 UPD42 UPD42 UPD42 UPD74 UPD43 UPD74 UPD43 UPD43 INS41 INS43 INS43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 INS43 INS42 INS43 INS42 INS74 INS43 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS42 UPD42 INS74 UPD42 UPD74 MOV74 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD74 MOV74 UPD74 MOV74 UPD42 INS11 INS42 INS42 UPD42 UPD42 UPD42 UPD74 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD74 MOV74 UPD42 UPD43 UPD43 UPD42 INS42 INS42 MOV43 INS43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 INS74 INS11 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS43 INS74 INS32 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD43 UPD40 UPD43 UPD43 UPD43 UPD43 INS42 INS42 INS43 INS76 INS42 INS42 INS22 UPD42 MOV42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 INS42 INS52 INS42 MOV42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD43 UPD42 UPD42 INS42 MOV42 MOV42 UPD42 UPD43 UPD40 UPD42 DEL66 DEL65 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL78