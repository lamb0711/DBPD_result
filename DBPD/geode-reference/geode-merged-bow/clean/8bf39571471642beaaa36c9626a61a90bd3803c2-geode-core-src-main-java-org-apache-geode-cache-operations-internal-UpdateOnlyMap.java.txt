Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This map only allows updates. No creates or removes.
- * It was adapted from UnmodifiableMap in the jdk's Collections class.
- * It was added to fix bug 51604.
- * It also make sure that customers do not see Token.INVALID and
- * CachedDeserializable to fix bug 51625.
+ * This map only allows updates. No creates or removes. It was adapted from UnmodifiableMap in the
+ * jdk's Collections class. It was added to fix bug 51604. It also make sure that customers do not
+ * see Token.INVALID and CachedDeserializable to fix bug 51625.
-    if (m==null) {
+    if (m == null) {
-   * Only called by internal code
-   * to bypass exportValue() method
+   * Only called by internal code to bypass exportValue() method
+   * 
-  
-  public int size()                        {return m.size();}
-  public boolean isEmpty()                 {return m.isEmpty();}
-  public boolean containsKey(Object key)   {return m.containsKey(key);}
+
+  public int size() {
+    return m.size();
+  }
+
+  public boolean isEmpty() {
+    return m.isEmpty();
+  }
+
+  public boolean containsKey(Object key) {
+    return m.containsKey(key);
+  }
+
+
-  
+
-      return m.put(key,  value);
+      return m.put(key, value);
+
-      for (Object i: m.entrySet()) {
+      for (Object i : m.entrySet()) {
+
-      throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException();
+
-      throw new UnsupportedOperationException();
+    throw new UnsupportedOperationException();
-    if (keySet==null) {
+    if (keySet == null) {
-    if (entrySet==null) {
+    if (entrySet == null) {
-        return new EntryIterator();
+      return new EntryIterator();
+
-        return m.size();
+      return m.size();
-        return this.mIterator.hasNext();
+      return this.mIterator.hasNext();
+
+
+
+
+
+
+
-    return o1==null ? o2==null : o1.equals(o2);
+    return o1 == null ? o2 == null : o1.equals(o2);
-  
+
-    if (values==null) {
+    if (values == null) {
-  
+
+
-        return this.mIterator.hasNext();
+      return this.mIterator.hasNext();
-  
+
-   * equals is over-ridden to make sure it is based on
-   * the objects we expose and not the internal CachedDeserializables.
+   * equals is over-ridden to make sure it is based on the objects we expose and not the internal
+   * CachedDeserializables.
-          if (!(m.get(key)==null && m.containsKey(key))) {
+          if (!(m.get(key) == null && m.containsKey(key))) {
-}
-
-/**
- * hashCode is over-ridden to make sure it is based on
- * the objects we expose and not the internal CachedDeserializables.
- */
-@Override
-public int hashCode() {
-  int h = 0;
-  Iterator<Entry> i = entrySet().iterator();
-  while (i.hasNext()) {
-    h += i.next().hashCode();
-  return h;
-}
+
+  /**
+   * hashCode is over-ridden to make sure it is based on the objects we expose and not the internal
+   * CachedDeserializables.
+   */
+  @Override
+  public int hashCode() {
+    int h = 0;
+    Iterator<Entry> i = entrySet().iterator();
+    while (i.hasNext()) {
+      h += i.next().hashCode();
+    }
+    return h;
+  }
-    if (! i.hasNext()) {
+    if (!i.hasNext()) {
-      sb.append(key   == this ? "(this Map)" : key);
+      sb.append(key == this ? "(this Map)" : key);
-      if (! i.hasNext()) {
+      if (!i.hasNext()) {
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66