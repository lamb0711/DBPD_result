GEODE-2970: clearing LogWriterAppender when shutting down locator.

* Do not bury the NPE in AlterRuntimeConfigFunction
* destroy the LogWriterAppender when removing the locator
* added test

-import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.logging.log4j.Logger;
+  private static Logger logger = LogService.getLogger();
-          help = CliStrings.ALTER_RUNTIME_CONFIG__MEMBER__HELP) String memberNameOrId,
+          help = CliStrings.ALTER_RUNTIME_CONFIG__MEMBER__HELP) String[] memberNameOrId,
-          help = CliStrings.ALTER_RUNTIME_CONFIG__MEMBER__HELP) String group,
+          help = CliStrings.ALTER_RUNTIME_CONFIG__MEMBER__HELP) String[] group,
-    Set<DistributedMember> targetMembers;
+    Set<DistributedMember> targetMembers = CliUtil.findMembers(group, memberNameOrId);
-    try {
+    if (targetMembers.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
-      targetMembers = CliUtil.findMembersOrThrow(group, memberNameOrId);
+    if (archiveDiskSpaceLimit != null) {
+      runTimeDistributionConfigAttributes.put(
+          CliStrings.ALTER_RUNTIME_CONFIG__ARCHIVE__DISK__SPACE__LIMIT,
+          archiveDiskSpaceLimit.toString());
+    }
-      if (archiveDiskSpaceLimit != null) {
-        runTimeDistributionConfigAttributes.put(
-            CliStrings.ALTER_RUNTIME_CONFIG__ARCHIVE__DISK__SPACE__LIMIT,
-            archiveDiskSpaceLimit.toString());
-      }
+    if (archiveFileSizeLimit != null) {
+      runTimeDistributionConfigAttributes.put(
+          CliStrings.ALTER_RUNTIME_CONFIG__ARCHIVE__FILE__SIZE__LIMIT,
+          archiveFileSizeLimit.toString());
+    }
-      if (archiveFileSizeLimit != null) {
-        runTimeDistributionConfigAttributes.put(
-            CliStrings.ALTER_RUNTIME_CONFIG__ARCHIVE__FILE__SIZE__LIMIT,
-            archiveFileSizeLimit.toString());
-      }
+    if (logDiskSpaceLimit != null) {
+      runTimeDistributionConfigAttributes.put(
+          CliStrings.ALTER_RUNTIME_CONFIG__LOG__DISK__SPACE__LIMIT, logDiskSpaceLimit.toString());
+    }
-      if (logDiskSpaceLimit != null) {
-        runTimeDistributionConfigAttributes.put(
-            CliStrings.ALTER_RUNTIME_CONFIG__LOG__DISK__SPACE__LIMIT, logDiskSpaceLimit.toString());
-      }
+    if (logFileSizeLimit != null) {
+      runTimeDistributionConfigAttributes.put(
+          CliStrings.ALTER_RUNTIME_CONFIG__LOG__FILE__SIZE__LIMIT, logFileSizeLimit.toString());
+    }
-      if (logFileSizeLimit != null) {
-        runTimeDistributionConfigAttributes.put(
-            CliStrings.ALTER_RUNTIME_CONFIG__LOG__FILE__SIZE__LIMIT, logFileSizeLimit.toString());
-      }
+    if (logLevel != null && !logLevel.isEmpty()) {
+      runTimeDistributionConfigAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOG__LEVEL,
+          logLevel);
+    }
-      if (logLevel != null && !logLevel.isEmpty()) {
-        runTimeDistributionConfigAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOG__LEVEL,
-            logLevel);
-      }
+    if (statisticArchiveFile != null && !statisticArchiveFile.isEmpty()) {
+      runTimeDistributionConfigAttributes
+          .put(CliStrings.ALTER_RUNTIME_CONFIG__STATISTIC__ARCHIVE__FILE, statisticArchiveFile);
+    }
-      if (statisticArchiveFile != null && !statisticArchiveFile.isEmpty()) {
-        runTimeDistributionConfigAttributes
-            .put(CliStrings.ALTER_RUNTIME_CONFIG__STATISTIC__ARCHIVE__FILE, statisticArchiveFile);
-      }
+    if (statisticSampleRate != null) {
+      runTimeDistributionConfigAttributes.put(
+          CliStrings.ALTER_RUNTIME_CONFIG__STATISTIC__SAMPLE__RATE, statisticSampleRate.toString());
+    }
-      if (statisticSampleRate != null) {
-        runTimeDistributionConfigAttributes.put(
-            CliStrings.ALTER_RUNTIME_CONFIG__STATISTIC__SAMPLE__RATE,
-            statisticSampleRate.toString());
-      }
-
-      if (statisticSamplingEnabled != null) {
-        runTimeDistributionConfigAttributes.put(STATISTIC_SAMPLING_ENABLED,
-            statisticSamplingEnabled.toString());
-      }
+    if (statisticSamplingEnabled != null) {
+      runTimeDistributionConfigAttributes.put(STATISTIC_SAMPLING_ENABLED,
+          statisticSamplingEnabled.toString());
+    }
-      // Attributes that are set on the cache.
-      if (setCopyOnRead != null) {
-        rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__COPY__ON__READ,
-            setCopyOnRead.toString());
-      }
+    // Attributes that are set on the cache.
+    if (setCopyOnRead != null) {
+      rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__COPY__ON__READ,
+          setCopyOnRead.toString());
+    }
-      if (lockLease != null && lockLease > 0 && lockLease < Integer.MAX_VALUE) {
-        rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOCK__LEASE,
-            lockLease.toString());
-      }
+    if (lockLease != null && lockLease > 0 && lockLease < Integer.MAX_VALUE) {
+      rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOCK__LEASE,
+          lockLease.toString());
+    }
-      if (lockTimeout != null && lockTimeout > 0 && lockTimeout < Integer.MAX_VALUE) {
-        rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOCK__TIMEOUT,
-            lockTimeout.toString());
-      }
+    if (lockTimeout != null && lockTimeout > 0 && lockTimeout < Integer.MAX_VALUE) {
+      rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__LOCK__TIMEOUT,
+          lockTimeout.toString());
+    }
-      if (messageSyncInterval != null && messageSyncInterval > 0
-          && messageSyncInterval < Integer.MAX_VALUE) {
-        rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__MESSAGE__SYNC__INTERVAL,
-            messageSyncInterval.toString());
-      }
+    if (messageSyncInterval != null && messageSyncInterval > 0
+        && messageSyncInterval < Integer.MAX_VALUE) {
+      rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__MESSAGE__SYNC__INTERVAL,
+          messageSyncInterval.toString());
+    }
-      if (searchTimeout != null && searchTimeout > 0 && searchTimeout < Integer.MAX_VALUE) {
-        rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__SEARCH__TIMEOUT,
-            searchTimeout.toString());
-      }
+    if (searchTimeout != null && searchTimeout > 0 && searchTimeout < Integer.MAX_VALUE) {
+      rumTimeCacheAttributes.put(CliStrings.ALTER_RUNTIME_CONFIG__SEARCH__TIMEOUT,
+          searchTimeout.toString());
+    }
-      if (!runTimeDistributionConfigAttributes.isEmpty() || !rumTimeCacheAttributes.isEmpty()) {
-        Map<String, String> allRunTimeAttributes = new HashMap<>();
-        allRunTimeAttributes.putAll(runTimeDistributionConfigAttributes);
-        allRunTimeAttributes.putAll(rumTimeCacheAttributes);
+    if (runTimeDistributionConfigAttributes.isEmpty() && rumTimeCacheAttributes.isEmpty()) {
+      return ResultBuilder
+          .createUserErrorResult(CliStrings.ALTER_RUNTIME_CONFIG__RELEVANT__OPTION__MESSAGE);
+    }
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(alterRunTimeConfigFunction,
-            allRunTimeAttributes, targetMembers);
-        List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
-        CompositeResultData crd = ResultBuilder.createCompositeResultData();
-        TabularResultData tabularData = crd.addSection().addTable();
-        Set<String> successfulMembers = new TreeSet<>();
-        Set<String> errorMessages = new TreeSet<>();
+    Map<String, String> allRunTimeAttributes = new HashMap<>();
+    allRunTimeAttributes.putAll(runTimeDistributionConfigAttributes);
+    allRunTimeAttributes.putAll(rumTimeCacheAttributes);
+    ResultCollector<?, ?> rc =
+        CliUtil.executeFunction(alterRunTimeConfigFunction, allRunTimeAttributes, targetMembers);
+    List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
+    Set<String> successfulMembers = new TreeSet<>();
+    Set<String> errorMessages = new TreeSet<>();
-        for (CliFunctionResult result : results) {
-          if (result.getThrowable() != null) {
-            errorMessages.add(result.getThrowable().getMessage());
-          } else {
-            successfulMembers.add(result.getMemberIdOrName());
-          }
-        }
-        final String lineSeparator = System.getProperty("line.separator");
-        if (!successfulMembers.isEmpty()) {
-          StringBuilder successMessageBuilder = new StringBuilder();
-
-          successMessageBuilder.append(CliStrings.ALTER_RUNTIME_CONFIG__SUCCESS__MESSAGE);
-          successMessageBuilder.append(lineSeparator);
-
-          for (String member : successfulMembers) {
-            successMessageBuilder.append(member);
-            successMessageBuilder.append(lineSeparator);
-          }
-
-          Properties properties = new Properties();
-          properties.putAll(runTimeDistributionConfigAttributes);
-
-          Result result = ResultBuilder.createInfoResult(successMessageBuilder.toString());
-
-          // Set the Cache attributes to be modified
-          final XmlEntity xmlEntity = XmlEntity.builder().withType(CacheXml.CACHE)
-              .withAttributes(rumTimeCacheAttributes).build();
-          persistClusterConfiguration(result,
-              () -> getSharedConfiguration().modifyXmlAndProperties(properties, xmlEntity,
-                  group != null ? group.split(",") : null));
-          return result;
-        } else {
-          StringBuilder errorMessageBuilder = new StringBuilder();
-          errorMessageBuilder.append("Following errors occurred while altering runtime config");
-          errorMessageBuilder.append(lineSeparator);
-
-          for (String errorMessage : errorMessages) {
-            errorMessageBuilder.append(errorMessage);
-            errorMessageBuilder.append(lineSeparator);
-          }
-          return ResultBuilder.createUserErrorResult(errorMessageBuilder.toString());
-        }
+    for (CliFunctionResult result : results) {
+      if (result.getThrowable() != null) {
+        logger.info("Function failed: " + result.getThrowable());
+        errorMessages.add(result.getThrowable().getMessage());
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.ALTER_RUNTIME_CONFIG__RELEVANT__OPTION__MESSAGE);
+        successfulMembers.add(result.getMemberIdOrName());
-    } catch (CommandResultException crex) {
-      return crex.getResult();
-    } catch (CacheClosedException e) {
-      return ResultBuilder.createGemFireErrorResult(e.getMessage());
-    } catch (FunctionInvocationTargetException e) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.ALTER_RUNTIME_CONFIG));
-    } catch (Exception e) {
-      return ResultBuilder.createGemFireErrorResult(
-          CliStrings.format(CliStrings.EXCEPTION_CLASS_AND_MESSAGE, e.getClass(), e.getMessage()));
+    }
+    final String lineSeparator = System.getProperty("line.separator");
+    if (!successfulMembers.isEmpty()) {
+      StringBuilder successMessageBuilder = new StringBuilder();
+
+      successMessageBuilder.append(CliStrings.ALTER_RUNTIME_CONFIG__SUCCESS__MESSAGE);
+      successMessageBuilder.append(lineSeparator);
+
+      for (String member : successfulMembers) {
+        successMessageBuilder.append(member);
+        successMessageBuilder.append(lineSeparator);
+      }
+
+      Properties properties = new Properties();
+      properties.putAll(runTimeDistributionConfigAttributes);
+
+      Result result = ResultBuilder.createInfoResult(successMessageBuilder.toString());
+
+      // Set the Cache attributes to be modified
+      final XmlEntity xmlEntity = XmlEntity.builder().withType(CacheXml.CACHE)
+          .withAttributes(rumTimeCacheAttributes).build();
+      persistClusterConfiguration(result,
+          () -> getSharedConfiguration().modifyXmlAndProperties(properties, xmlEntity, group));
+      return result;
+    } else {
+      StringBuilder errorMessageBuilder = new StringBuilder();
+      errorMessageBuilder.append("Following errors occurred while altering runtime config");
+      errorMessageBuilder.append(lineSeparator);
+
+      for (String errorMessage : errorMessages) {
+        errorMessageBuilder.append(errorMessage);
+        errorMessageBuilder.append(lineSeparator);
+      }
+      return ResultBuilder.createUserErrorResult(errorMessageBuilder.toString());

MOV26 INS26 UPD40 INS40 INS23 INS83 INS83 INS43 INS59 MOV8 INS42 INS42 INS32 INS5 INS5 MOV60 MOV60 MOV60 INS25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 MOV25 INS25 INS42 INS42 MOV43 INS85 MOV43 INS85 INS32 INS8 UPD27 MOV27 MOV8 INS32 INS42 INS42 INS41 MOV32 MOV32 INS42 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS21 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS42 DEL38 DEL38 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL33 DEL16 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8