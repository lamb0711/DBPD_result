Merge remote-tracking branch 'upstream/develop' into develop

-import static org.apache.commons.lang.SystemUtils.LINE_SEPARATOR;
+import static org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR;
-import java.util.Comparator;
-import java.util.Iterator;
+import org.apache.geode.LogWriter;
- * This program sorts the entries in a GemFire log file (one written using a
- * {@link org.apache.geode.LogWriter}) by their timestamps. Note that in order to do so, we
- * have to read the entire file into memory.
+ * This program sorts the entries in a GemFire log file (one written using a {@link LogWriter}) by
+ * their timestamps. Note that in order to do so, we have to read the entire file into memory.
- *
-  private static PrintStream out = System.out;
-  private static PrintStream err = System.err;
+
+  private static final PrintStream out = System.out;
+  private static final PrintStream err = System.err;
-    SortedSet sorted = new TreeSet(new Comparator() {
-      public int compare(Object o1, Object o2) {
-        LogFileParser.LogEntry entry1 = (LogFileParser.LogEntry) o1;
-        LogFileParser.LogEntry entry2 = (LogFileParser.LogEntry) o2;
-        String stamp1 = entry1.getTimestamp();
-        String stamp2 = entry2.getTimestamp();
+    SortedSet<LogFileParser.LogEntry> sorted = new TreeSet<>((entry1, entry2) -> {
+      String stamp1 = entry1.getTimestamp();
+      String stamp2 = entry2.getTimestamp();
-        if (stamp1.equals(stamp2)) {
-          if (entry1.getContents().equals(entry2.getContents())) {
-            // Timestamps and contents are both equal - compare hashCode()
-            return Integer.valueOf(entry1.hashCode()).compareTo(Integer.valueOf(entry2.hashCode()));
-          } else {
-            return entry1.getContents().compareTo(entry2.getContents());
-          }
+      if (stamp1.equals(stamp2)) {
+        if (entry1.getContents().equals(entry2.getContents())) {
+          // Timestamps and contents are both equal - compare hashCode()
+          return Integer.valueOf(entry1.hashCode()).compareTo(entry2.hashCode());
-          return stamp1.compareTo(stamp2);
+          return entry1.getContents().compareTo(entry2.getContents());
+      } else {
+        return stamp1.compareTo(stamp2);
-    for (Iterator iter = sorted.iterator(); iter.hasNext();) {
-      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) iter.next();
+    for (LogFileParser.LogEntry entry : sorted) {
-  //////////////////// Main Program ////////////////////
-
-    err.println(
-        "Usage: java SortLogFile logFile");
-    err.println("-sortedFile file "
-        + "File in which to put sorted log");
-    err.println("");
+    err.println("Usage: java SortLogFile logFile");
+    err.println("-sortedFile file " + "File in which to put sorted log");
+    err.println();
-    err.println("");
+    err.println();
-  public static void main(String[] args) throws IOException {
+  public static void main(String... args) throws IOException {
-    // int dirCount = 0;
-

MOV26 UPD40 UPD40 MOV31 INS83 INS83 MOV29 INS83 UPD39 INS42 MOV44 MOV44 MOV43 INS8 UPD66 UPD66 UPD66 INS60 MOV60 MOV60 MOV61 INS70 MOV43 INS42 INS74 INS59 INS44 INS42 INS8 MOV43 MOV43 INS42 INS14 UPD43 MOV43 UPD42 MOV42 MOV21 INS74 INS86 MOV40 MOV43 INS59 INS59 MOV8 INS42 INS42 MOV32 DEL40 DEL26 DEL40 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL44 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL8 DEL31 DEL45 DEL45 DEL85 DEL5