GEODE-1761 Clients don't fail back when servers are bounced

Servers will send a refresh hint to clients if they detect that a request
had to be send to a different server who owned the primary bucket
affected by the operation.  Clients should always refresh when this
happens unless they have connection-pool size constraints that force
them to use non-optimal servers.

Client-side operation classes have been modified to initiate the refresh.
I've added code in the meta-data service class to avoid performing
multiple concurrent refreshes on the same region.

On the server-side I've cleaned up some of the network-hop detection
code to stop using hard-coded integers and to consolidate some of
the code that resets the ThreadLocals being used to record network-
hops detected.

+import com.gemstone.gemfire.cache.client.internal.*;
+
+  /**
+   * getNetworkHopType byte indicating this was the bucket owner for
+   * the last operation
+   */
+  public static final int NETWORK_HOP_NONE = 0;
+
+  /**
+   * getNetworkHopType byte indicating this was not the bucket owner and
+   * a message had to be sent to a primary in the same server group
+   */
+  public static final int NETWORK_HOP_TO_SAME_GROUP = 1;
+
+  /**
+   * getNetworkHopType byte indicating this was not the bucket owner and
+   * a message had to be sent to a primary in a different server group
+   */
+  public static final int NETWORK_HOP_TO_DIFFERENT_GROUP = 2;
+
-  private final ThreadLocal<Byte> isNetworkHop = new ThreadLocal<Byte>() {
+  private final ThreadLocal<Byte> networkHopType = new ThreadLocal<Byte>() {
-      return Byte.valueOf((byte)0);
+      return Byte.valueOf((byte)NETWORK_HOP_NONE);
-  public void setIsNetworkHop(Byte value) {
-    this.isNetworkHop.set(value);
+  public void clearNetworkHopData() {
+    this.networkHopType.remove();
+    this.metadataVersion.remove();
+  }
+  
+  private void setNetworkHopType(Byte value) {
+    this.networkHopType.set(value);
-  public Byte isNetworkHop() {
-    return this.isNetworkHop.get();
+  /**
+   * <p>
+   * If the last operation in the current thread required a one-hop to
+   * another server who held the primary bucket for the operation then
+   * this will return something other than NETWORK_HOP_NONE.
+   * </p>
+   * see NETWORK_HOP_NONE, NETWORK_HOP_TO_SAME_GROUP and NETWORK_HOP_TO_DIFFERENT_GROUP
+   */
+  public byte getNetworkHopType() {
+    return this.networkHopType.get().byteValue();
-      return 0;
+      return ClientMetadataService.INITIAL_VERSION;
-  public void setMetadataVersion(Byte value) {
+  private void setMetadataVersion(Byte value) {
-  public Byte getMetadataVersion() {
-    return this.metadataVersion.get();
+  public byte getMetadataVersion() {
+    return this.metadataVersion.get().byteValue();
-            setNetworkHop(bucketIdInt, (InternalDistributedMember)targetNode);
+            setNetworkHopType(bucketIdInt, (InternalDistributedMember)targetNode);
-        setNetworkHop(bucketId, targetNode);
+        setNetworkHopType(bucketId, targetNode);
-            setNetworkHop(bucketId, (InternalDistributedMember)retryNode);
+            setNetworkHopType(bucketId, (InternalDistributedMember)retryNode);
-            setNetworkHop(bucketId, currentTarget);
+            setNetworkHopType(bucketId, currentTarget);
-  private void setNetworkHop(final Integer bucketId,
-      final InternalDistributedMember targetNode) {
+  private void setNetworkHopType(final Integer bucketId,
+                                 final InternalDistributedMember targetNode) {
-              if (this.isNetworkHop() != 1 && logger.isDebugEnabled()) {
+              if (this.getNetworkHopType() != NETWORK_HOP_TO_SAME_GROUP && logger.isDebugEnabled()) {
-              this.setIsNetworkHop((byte)1);
+              this.setNetworkHopType((byte)NETWORK_HOP_TO_SAME_GROUP);
-              if (this.isNetworkHop() != 2 && logger.isDebugEnabled()) {
+              if (this.getNetworkHopType() != NETWORK_HOP_TO_DIFFERENT_GROUP && logger.isDebugEnabled()) {
-              this.setIsNetworkHop((byte)2);
+              this.setNetworkHopType((byte)NETWORK_HOP_TO_DIFFERENT_GROUP);

INS26 MOV23 MOV23 INS40 INS23 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 MOV29 MOV74 INS83 INS39 INS42 INS8 UPD83 UPD42 INS29 INS39 UPD42 MOV74 UPD83 INS39 UPD42 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 UPD42 INS21 INS21 INS65 UPD42 INS66 INS66 INS66 INS66 INS66 INS66 INS32 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS32 INS32 INS22 INS42 INS22 INS42 INS32 INS42 MOV32 INS42 INS52 INS42 INS52 INS42 UPD42 MOV22 MOV42 UPD42 INS32 INS40 INS42 INS42 INS11 UPD42 INS39 INS42 UPD42 UPD42 UPD42 MOV32 UPD42 MOV32 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL34 DEL42 DEL43 DEL32 DEL42 DEL42 DEL39 DEL34 DEL11 DEL32 DEL42 DEL43 DEL34 DEL34 DEL34 DEL34