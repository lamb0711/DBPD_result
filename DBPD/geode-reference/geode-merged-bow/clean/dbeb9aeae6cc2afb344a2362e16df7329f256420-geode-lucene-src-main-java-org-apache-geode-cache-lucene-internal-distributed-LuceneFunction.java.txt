Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.cache.lucene.internal.LuceneIndexImpl;
+import org.apache.geode.cache.lucene.internal.LuceneIndexStats;
-import org.apache.geode.cache.lucene.internal.InternalLuceneIndex;
-import org.apache.geode.cache.query.QueryException;
-import org.apache.geode.internal.cache.execute.BucketMovedException;
- * {@link LuceneFunction} coordinates text search on a member. It receives text search query from the coordinator
- * and arguments like region and buckets. It invokes search on the local index and provides a result collector. The
- * locally collected results are sent to the search coordinator.
+ * {@link LuceneFunction} coordinates text search on a member. It receives text search query from
+ * the coordinator and arguments like region and buckets. It invokes search on the local index and
+ * provides a result collector. The locally collected results are sent to the search coordinator.
-    LuceneFunctionContext<IndexResultCollector> searchContext = (LuceneFunctionContext) ctx.getArguments();
+    LuceneFunctionContext<IndexResultCollector> searchContext =
+        (LuceneFunctionContext) ctx.getArguments();
-    
+
-    InternalLuceneIndex index = (InternalLuceneIndex) service.getIndex(searchContext.getIndexName(), region.getFullPath());
+    LuceneIndexImpl index =
+        (LuceneIndexImpl) service.getIndex(searchContext.getIndexName(), region.getFullPath());
+    LuceneIndexStats stats = index.getIndexStats();
+    TopEntriesCollector mergedResult = null;
-      Collection<IndexRepository> repositories = repoManager.getRepositories(ctx);
-      for (IndexRepository repo : repositories) {
-        IndexResultCollector collector = manager.newCollector(repo.toString());
-        logger.debug("Executing search on repo: " + repo.toString());
-        repo.query(query, resultLimit, collector);
-        results.add(collector);
+      long start = stats.startQuery();
+      try {
+        Collection<IndexRepository> repositories = repoManager.getRepositories(ctx);
+        for (IndexRepository repo : repositories) {
+          IndexResultCollector collector = manager.newCollector(repo.toString());
+          if (logger.isDebugEnabled()) {
+            logger.debug("Executing search on repo: " + repo.toString());
+          }
+          repo.query(query, resultLimit, collector);
+          results.add(collector);
+        }
+        mergedResult = (TopEntriesCollector) manager.reduce(results);
+      } finally {
+        stats.endQuery(start, mergedResult == null ? 0 : mergedResult.size());
-      TopEntriesCollector mergedResult = (TopEntriesCollector) manager.reduce(results);
-    } catch (IOException|BucketNotFoundException e) {
+    } catch (IOException | BucketNotFoundException e) {
-  
+

MOV26 MOV26 UPD40 UPD40 UPD66 UPD66 UPD66 INS60 INS60 UPD43 INS43 INS59 MOV43 INS59 INS8 UPD42 INS42 INS42 INS32 INS42 INS33 INS60 INS54 MOV21 UPD43 INS42 INS42 INS39 INS59 MOV8 INS8 UPD42 INS42 INS32 INS21 INS21 INS42 INS42 INS7 INS32 INS25 INS42 MOV11 INS42 INS42 INS42 INS16 INS32 INS8 INS27 INS34 INS32 INS42 INS42 MOV21 INS42 INS33 INS42 INS42 DEL40 DEL26 DEL42 DEL59 DEL60