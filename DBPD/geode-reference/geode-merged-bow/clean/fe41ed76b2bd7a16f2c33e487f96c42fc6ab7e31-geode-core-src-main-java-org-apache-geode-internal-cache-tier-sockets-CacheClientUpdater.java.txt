GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-import org.apache.geode.*;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InterruptedIOException;
+import java.io.OutputStream;
+import java.net.ConnectException;
+import java.net.Socket;
+import java.net.SocketException;
+import java.nio.ByteBuffer;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import javax.net.ssl.SSLException;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.CancelException;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.StatisticDescriptor;
+import org.apache.geode.Statistics;
+import org.apache.geode.StatisticsType;
+import org.apache.geode.StatisticsTypeFactory;
+import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.client.internal.*;
+import org.apache.geode.cache.client.internal.ClientUpdater;
+import org.apache.geode.cache.client.internal.Endpoint;
+import org.apache.geode.cache.client.internal.EndpointManager;
+import org.apache.geode.cache.client.internal.GetEventValueOp;
+import org.apache.geode.cache.client.internal.PoolImpl;
+import org.apache.geode.cache.client.internal.QueueManager;
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.DistributionStats;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.ServerLocation;
-import org.apache.geode.internal.*;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.Assert;
+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.InternalInstantiator;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.cache.ClientServerObserver;
+import org.apache.geode.internal.cache.ClientServerObserverHolder;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.EventID;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.LocalRegion;
-import org.apache.logging.log4j.Logger;
-
-import javax.net.ssl.SSLException;
-import java.io.*;
-import java.net.ConnectException;
-import java.net.Socket;
-import java.net.SocketException;
-import java.nio.ByteBuffer;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
+
-  private /* final */ GemFireCacheImpl cache;
-  private /* final */ CachedRegionHelper cacheHelper;
+  private /* final */ InternalCache cache;
+  private /* final */ CachedRegionHelper cacheHelper;
-  /*
+
+  /**
-  // /**
-  // * True if this thread been initialized. Indicates that the run thread is
-  // * initialized and ready to process messages
-  // * <p>
-  // * TODO is this still needed?
-  // * <p>
-  // * Accesses synchronized via <code>this</code>
-  // *
-  // * @see #notifyInitializationComplete()
-  // * @see #waitForInitialization()
-  // */
-  // private boolean initialized = false;
-
-
-    GemFireCacheImpl c;
+    InternalCache cache;
-      c = GemFireCacheImpl.getInstance();
-      if (c != null && !c.isClosed()) {
+      cache = GemFireCacheImpl.getInstance();
+      if (cache != null && !cache.isClosed()) {
-    this.cache = c;
-    this.cacheHelper = new CachedRegionHelper(c);
+    this.cache = cache;
+    this.cacheHelper = new CachedRegionHelper(cache);
-      /** Size of the server-to-client communication socket buffers */
+      // Size of the server-to-client communication socket buffers
-        // @todo - change the serverId to use the endpoint's getMemberId() which
+        // TODO: change the serverId to use the endpoint's getMemberId() which
-  // /**
-  // * Waits for this thread to be initialized
-  // *
-  // * @return true if initialized; false if stopped before init
-  // */
-  // public boolean waitForInitialization() {
-  // boolean result = false;
-  // // Yogesh : waiting on this thread object is a bad idea
-  // // as when thread exits it notifies to the waiting threads.
-  // synchronized (this) {
-  // for (;;) {
-  // if (quitting()) {
-  // break;
-  // }
-  // boolean interrupted = Thread.interrupted();
-  // try {
-  // this.wait(100); // spurious wakeup ok // timed wait, should fix lost notification problem
-  // rahul.
-  // }
-  // catch (InterruptedException e) {
-  // interrupted = true;
-  // }
-  // finally {
-  // if (interrupted) {
-  // Thread.currentThread().interrupt();
-  // }
-  // }
-  // } // while
-  // // Even if we succeed, there is a risk that we were shut down
-  // // Can't check for cache; it isn't set yet :-(
-  // this.system.getCancelCriterion().checkCancelInProgress(null);
-  // result = this.continueProcessing;
-  // } // synchronized
-  // return result;
-  // }
-
-  // /**
-  // * @see #waitForInitialization()
-  // */
-  // private void notifyInitializationComplete() {
-  // synchronized (this) {
-  // this.initialized = true;
-  // this.notifyAll();
-  // }
-  // }
-
-
-        // NOTE:
-        // As explained in the method description, this code is added as part
-        // of CQ bug fix. Cache server team needs to look into changes relating
-        // to local region.
-        //
-        // Locally invalidate the region
-        // region.basicBridgeClientInvalidate(callbackArgument,
-        // proxy.getProcessedMarker());
-
-        // if (logger.debugEnabled()) {
-        // logger.debug(toString() + ": Cleared region: " + regionName
-        // + " callbackArgument: " + callbackArgument);
-        // }
-
-      // // CALLBACK TESTING PURPOSE ONLY ////
+      // CALLBACK TESTING PURPOSE ONLY
-      // /////////////////////////////////////
+
-      // int numOfClasses = noOfParts - 3; // 1 for ds classname, 1 for ds id and 1 for eventId.
-          InternalDataSerializer.register(dataSerializerClassName, false, eventId,
-              null/* context */, id);
+          InternalDataSerializer.register(dataSerializerClassName, false, eventId, null, id);
-      // // CALLBACK TESTING PURPOSE ONLY ////
+      // CALLBACK TESTING PURPOSE ONLY
-      ///////////////////////////////////////
+
-   * 
-   * @param startMessagePart
-   * @param numCqParts
-   * @param messageType
-   * @param key
-   * @param value
-    // String[] cqs = new String[numCqs/2];
-
-          // and the ClientHealthMonitor will cause a disconnect -- mthomas
-          // 10/18/2006
-
-          // this._endpoint.setLastUpdate();
+          // and the ClientHealthMonitor will cause a disconnect
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.distributed.internal.InternalDistributedSystem.DisconnectListener#onDisconnect
-   * (org.apache.geode.distributed.internal.InternalDistributedSystem)
-   */
-  /**
-   * Returns true if the end point represented by this updater is considered dead.
-   * 
-   * @return true if {@link #endpoint} died.
-   */
-  public boolean isEndPointDead() {
-    return this.endPointDied;
-  }
-
-
-    // TODO Auto-generated method stub

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS23 UPD43 INS29 INS83 INS83 INS39 MOV59 UPD42 MOV65 UPD66 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL83 DEL39 DEL23 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31