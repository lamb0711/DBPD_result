GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.LogWrapper;
-    try {
-      final InternalCache cache = getCache();
-      final SystemManagementService service =
-          (SystemManagementService) ManagementService.getExistingManagementService(cache);
+    final InternalCache cache = getCache();
+    final SystemManagementService service =
+        (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      TabularResultData resultData = ResultBuilder.createTabularResultData();
+    TabularResultData resultData = ResultBuilder.createTabularResultData();
-      Set<DistributedMember> dsMembers = CliUtil.findMembers(onGroup, onMember);
+    Set<DistributedMember> dsMembers = findMembers(onGroup, onMember);
-      if (dsMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    if (dsMembers.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+
+    ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
+      AtomicInteger threadNum = new AtomicInteger();
+
+      public Thread newThread(final Runnable r) {
+        Thread result = new Thread(r, "Start Sender Command Thread " + threadNum.incrementAndGet());
+        result.setDaemon(true);
+        return result;
+    });
-      ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
-        AtomicInteger threadNum = new AtomicInteger();
+    List<Callable<List>> callables = new ArrayList<>();
-        public Thread newThread(final Runnable r) {
-          Thread result =
-              new Thread(r, "Start Sender Command Thread " + threadNum.incrementAndGet());
-          result.setDaemon(true);
-          return result;
+    for (final DistributedMember member : dsMembers) {
+
+      callables.add(() -> {
+
+        GatewaySenderMXBean bean;
+        ArrayList<String> statusList = new ArrayList<>();
+        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
+          bean = service.getLocalGatewaySenderMXBean(id);
+        } else {
+          ObjectName objectName = service.getGatewaySenderMBeanName(member, id);
+          bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-      });
-
-      List<Callable<List>> callables = new ArrayList<>();
-
-      for (final DistributedMember member : dsMembers) {
-
-        callables.add(() -> {
-
-          GatewaySenderMXBean bean;
-          ArrayList<String> statusList = new ArrayList<>();
-          if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-            bean = service.getLocalGatewaySenderMXBean(id);
-          } else {
-            ObjectName objectName = service.getGatewaySenderMBeanName(member, id);
-            bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-          }
-          if (bean != null) {
-            if (bean.isRunning()) {
-              statusList.add(member.getId());
-              statusList.add(CliStrings.GATEWAY_ERROR);
-              statusList.add(CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_ALREADY_STARTED_ON_MEMBER_1, id, member.getId()));
-            } else {
-              bean.start();
-              statusList.add(member.getId());
-              statusList.add(CliStrings.GATEWAY_OK);
-              statusList.add(CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_STARTED_ON_MEMBER_1,
-                  id, member.getId()));
-            }
-          } else {
+        if (bean != null) {
+          if (bean.isRunning()) {
-                CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1, id, member.getId()));
+                CliStrings.GATEWAY_SENDER_0_IS_ALREADY_STARTED_ON_MEMBER_1, id, member.getId()));
+          } else {
+            bean.start();
+            statusList.add(member.getId());
+            statusList.add(CliStrings.GATEWAY_OK);
+            statusList.add(CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_STARTED_ON_MEMBER_1, id,
+                member.getId()));
-          return statusList;
-
-        });
-      }
-
-      Iterator<DistributedMember> memberIterator = dsMembers.iterator();
-      List<Future<List>> futures = null;
-
-      try {
-        futures = execService.invokeAll(callables);
-      } catch (InterruptedException ite) {
-        GatewayCommandsUtils.accumulateStartResult(resultData, null, CliStrings.GATEWAY_ERROR,
-            CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_INVOKED_DUE_TO_1, id,
-                ite.getMessage()));
-      }
-
-      for (Future<List> future : futures) {
-        DistributedMember member = memberIterator.next();
-        List<String> memberStatus;
-        try {
-          memberStatus = future.get();
-          GatewayCommandsUtils.accumulateStartResult(resultData, memberStatus.get(0),
-              memberStatus.get(1), memberStatus.get(2));
-        } catch (InterruptedException | ExecutionException ite) {
-          GatewayCommandsUtils.accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR,
-              CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
-                  id, ite.getMessage()));
+        } else {
+          statusList.add(member.getId());
+          statusList.add(CliStrings.GATEWAY_ERROR);
+          statusList.add(CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1,
+              id, member.getId()));
-      }
-      execService.shutdown();
-      result = ResultBuilder.buildResult(resultData);
-    } catch (Exception e) {
-      LogWrapper.getInstance().warning(CliStrings.GATEWAY_ERROR + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.GATEWAY_ERROR + e.getMessage());
+        return statusList;
+
+      });
+
+    Iterator<DistributedMember> memberIterator = dsMembers.iterator();
+    List<Future<List>> futures = null;
+
+    try {
+      futures = execService.invokeAll(callables);
+    } catch (InterruptedException ite) {
+      GatewayCommandsUtils.accumulateStartResult(resultData, null, CliStrings.GATEWAY_ERROR,
+          CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_INVOKED_DUE_TO_1, id,
+              ite.getMessage()));
+    }
+
+    for (Future<List> future : futures) {
+      DistributedMember member = memberIterator.next();
+      List<String> memberStatus;
+      try {
+        memberStatus = future.get();
+        GatewayCommandsUtils.accumulateStartResult(resultData, memberStatus.get(0),
+            memberStatus.get(1), memberStatus.get(2));
+      } catch (InterruptedException | ExecutionException ite) {
+        GatewayCommandsUtils.accumulateStartResult(resultData, member.getId(),
+            CliStrings.GATEWAY_ERROR,
+            CliStrings.format(CliStrings.GATEWAY_SENDER_0_COULD_NOT_BE_STARTED_ON_MEMBER_DUE_TO_1,
+                id, ite.getMessage()));
+      }
+    }
+    execService.shutdown();
+    result = ResultBuilder.buildResult(resultData);
+

MOV8 MOV60 MOV60 MOV41 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL27 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8