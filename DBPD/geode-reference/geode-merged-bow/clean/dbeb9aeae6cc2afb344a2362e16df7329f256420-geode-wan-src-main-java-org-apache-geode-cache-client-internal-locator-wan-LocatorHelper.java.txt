Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-  
+
+
-   * This methods add the given locator to allLocatorInfoMap.
-   * It also invokes a locatorlistener to inform other locators in allLocatorInfoMap about this newly added locator.
+   * This methods add the given locator to allLocatorInfoMap. It also invokes a locatorlistener to
+   * inform other locators in allLocatorInfoMap about this newly added locator.
+   * 
-  public static boolean addLocator(int distributedSystemId,
-      DistributionLocatorId locator, LocatorMembershipListener locatorListener,
-      DistributionLocatorId sourceLocator) {
-      ConcurrentHashMap<Integer, Set<DistributionLocatorId>> allLocatorsInfo = (ConcurrentHashMap<Integer, Set<DistributionLocatorId>>)locatorListener
-          .getAllLocatorsInfo();
-      Set<DistributionLocatorId> locatorsSet = new CopyOnWriteHashSet<DistributionLocatorId>();
-      locatorsSet.add(locator);
-      Set<DistributionLocatorId> existingValue = allLocatorsInfo.putIfAbsent(distributedSystemId, locatorsSet);
-      if(existingValue != null){
-        if (!existingValue.contains(locator)) {
-          existingValue.add(locator);
-          addServerLocator(distributedSystemId, locatorListener, locator);
-          locatorListener.locatorJoined(distributedSystemId, locator,
-              sourceLocator);
-        }
-        else {
-          return false;
-        }
-      }else{
+  public static boolean addLocator(int distributedSystemId, DistributionLocatorId locator,
+      LocatorMembershipListener locatorListener, DistributionLocatorId sourceLocator) {
+    ConcurrentHashMap<Integer, Set<DistributionLocatorId>> allLocatorsInfo =
+        (ConcurrentHashMap<Integer, Set<DistributionLocatorId>>) locatorListener
+            .getAllLocatorsInfo();
+    Set<DistributionLocatorId> locatorsSet = new CopyOnWriteHashSet<DistributionLocatorId>();
+    locatorsSet.add(locator);
+    Set<DistributionLocatorId> existingValue =
+        allLocatorsInfo.putIfAbsent(distributedSystemId, locatorsSet);
+    if (existingValue != null) {
+      if (!existingValue.contains(locator)) {
+        existingValue.add(locator);
-        locatorListener.locatorJoined(distributedSystemId, locator,
-          sourceLocator);
+        locatorListener.locatorJoined(distributedSystemId, locator, sourceLocator);
+      } else {
+        return false;
+    } else {
+      addServerLocator(distributedSystemId, locatorListener, locator);
+      locatorListener.locatorJoined(distributedSystemId, locator, sourceLocator);
+    }
-   * This methods decides whether the given locator is server locator, if so
-   * then add this locator in allServerLocatorsInfo map.
+   * This methods decides whether the given locator is server locator, if so then add this locator
+   * in allServerLocatorsInfo map.
-    if (!locator.isServerLocator()) {
-      return;
-    }
-    ConcurrentHashMap<Integer, Set<String>> allServerLocatorsInfo = (ConcurrentHashMap<Integer, Set<String>>)locatorListener
-        .getAllServerLocatorsInfo();
-    
+    ConcurrentHashMap<Integer, Set<String>> allServerLocatorsInfo =
+        (ConcurrentHashMap<Integer, Set<String>>) locatorListener.getAllServerLocatorsInfo();
+
-    if(existingValue != null){
+    if (existingValue != null) {
-                                             LocatorMembershipListener locatorListener) {
+      LocatorMembershipListener locatorListener) {
-    ConcurrentHashMap<Integer, Set<DistributionLocatorId>> allLocators = (ConcurrentHashMap<Integer, Set<DistributionLocatorId>>)locatorListener
-        .getAllLocatorsInfo();
+    ConcurrentHashMap<Integer, Set<DistributionLocatorId>> allLocators =
+        (ConcurrentHashMap<Integer, Set<DistributionLocatorId>>) locatorListener
+            .getAllLocatorsInfo();
-      for (Map.Entry<Integer, Set<DistributionLocatorId>> entry : locators
-          .entrySet()) {
-        Set<DistributionLocatorId> existingValue = allLocators.putIfAbsent(
-            entry.getKey(), new CopyOnWriteHashSet<DistributionLocatorId>(entry
-                .getValue()));
+      for (Map.Entry<Integer, Set<DistributionLocatorId>> entry : locators.entrySet()) {
+        Set<DistributionLocatorId> existingValue = allLocators.putIfAbsent(entry.getKey(),
+            new CopyOnWriteHashSet<DistributionLocatorId>(entry.getValue()));
-          Set<DistributionLocatorId> localLocators = allLocators.get(entry
-              .getKey());
+          Set<DistributionLocatorId> localLocators = allLocators.get(entry.getKey());
-        }
-        else {
+        } else {
-  
+

UPD66 UPD66 UPD66 UPD66 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25