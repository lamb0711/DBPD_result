Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.concurrent.TimeUnit;
+import com.gemstone.gemfire.cache.CustomEvictionAttributes;
+import com.gemstone.gemfire.cache.EvictionCriteria;
-import com.gemstone.gemfire.cache.util.BridgeClient;
-import com.gemstone.gemfire.cache.util.BridgeLoader;
-import com.gemstone.gemfire.cache.util.BridgeWriter;
+import com.google.common.util.concurrent.Service.State;
+  /**
+   * True if this region uses off-heap memory; otherwise false (default)
+   * @since 9.0
+   */
+  protected boolean offHeap;
+
+  protected CustomEvictionAttributes customEvictionAttributes;
+
+  protected String hdfsStoreName;
+  
+  protected boolean hdfsWriteOnly;
+  
-    if (isBridgeLoader(result)) {
-      result = null;
-    }
-    if (isBridgeWriter(result)) {
-      result = null;
-    }
+  @Override
+  public final String getHDFSStoreName() {
+    return this.hdfsStoreName;
+  }
+  
+  @Override
+  public final boolean getHDFSWriteOnly() {
+    return this.hdfsWriteOnly;
+  }
+  
-    if (cl != null && isBridgeLoader(cl)) {
-      if (getPoolName() != null) {
-        throw new IllegalStateException("A region with a connection pool can not have a BridgeLoader.");
-      }
-    }
-    if (cl instanceof BridgeLoader) {
-      BridgeLoader bl = (BridgeLoader) cl;
-      bl.attach(this);
-    } else if (cl instanceof BridgeClient) {
-      BridgeClient bc = (BridgeClient)cl;
-      bc.attach(this);
-    }
-    if (cacheWriter != null && isBridgeWriter(cacheWriter)) {
-      if (getPoolName() != null) {
-        throw new IllegalStateException("A region with a connection pool can not have a BridgeWriter.");
-      }
-    }
-    if (cacheWriter instanceof BridgeWriter) {
-      BridgeWriter bw = (BridgeWriter)cacheWriter;
-      bw.attach(this);
-    }
-  public ExpirationAttributes setRegionIdleTimeout(
-      ExpirationAttributes idleTimeout)
-  {
+  public static void validatePRRegionExpirationAttributes(ExpirationAttributes expAtts) {
+    if (expAtts.getTimeout() > 0) {
+      ExpirationAction expAction = expAtts.getAction();
+      if (expAction.isInvalidate() || expAction.isLocalInvalidate()) {
+        throw new IllegalStateException(LocalizedStrings.AttributesFactory_INVALIDATE_REGION_NOT_SUPPORTED_FOR_PR.toLocalizedString());
+      } else if (expAction.isDestroy() || expAction.isLocalDestroy()) {
+        throw new IllegalStateException(LocalizedStrings.AttributesFactory_DESTROY_REGION_NOT_SUPPORTED_FOR_PR.toLocalizedString());
+      }
+    }
+  }
+
+  public ExpirationAttributes setRegionIdleTimeout(ExpirationAttributes idleTimeout) {
+    if (this.getAttributes().getDataPolicy().withPartitioning()) {
+      validatePRRegionExpirationAttributes(idleTimeout);
+    }
-  public ExpirationAttributes setRegionTimeToLive(
-      ExpirationAttributes timeToLive)
-  {
+  public ExpirationAttributes setRegionTimeToLive(ExpirationAttributes timeToLive) {
+    if (this.getAttributes().getDataPolicy().withPartitioning()) {
+      validatePRRegionExpirationAttributes(timeToLive);
+    }
-      if (cb instanceof BridgeWriter) {
-        BridgeWriter bw = (BridgeWriter)cb;
-        bw.detach(this);
-      }
-      else if (cb instanceof BridgeLoader) {
-        BridgeLoader bl = (BridgeLoader)cb;
-        bl.detach(this);
-      }
-
-  /**
-   * @since 5.7
-   */
-  public static boolean isBridgeLoader(CacheLoader cl) {
-    return cl instanceof BridgeLoader || cl instanceof BridgeClient;
-  }
-  /**
-   * @since 5.7
-   */
-  public static boolean isBridgeWriter(CacheWriter cw) {
-    return cw instanceof BridgeWriter;
-  }
-
+    this.offHeap = attrs.getOffHeap();
+
+    // fix bug #52033 by invoking setOffHeap now (localMaxMemory may now be the temporary placeholder for off-heap until DistributedSystem is created
+    // found non-null PartitionAttributes and offHeap is true so let's setOffHeap on PA now
+    PartitionAttributes<?, ?> pa = attrs.getPartitionAttributes();
+    if (this.offHeap && pa != null) {
+      PartitionAttributesImpl impl = (PartitionAttributesImpl)pa;
+      impl.setOffHeap(this.offHeap);
+    }
+
-          .createEvictionController(this));
+          .createEvictionController(this, attrs.getOffHeap()));
+    this.customEvictionAttributes = attrs.getCustomEvictionAttributes();
+    this.hdfsStoreName = attrs.getHDFSStoreName();
+    this.hdfsWriteOnly = attrs.getHDFSWriteOnly();
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public CustomEvictionAttributes getCustomEvictionAttributes() {
+    return this.customEvictionAttributes;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public CustomEvictionAttributes setCustomEvictionAttributes(long newStart,
+      long newInterval) {
+    checkReadiness();
+
+    if (this.customEvictionAttributes == null) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.AbstractRegion_NO_CUSTOM_EVICTION_SET
+              .toLocalizedString(getFullPath()));
+    }
+
+    if (newStart == 0) {
+      newStart = this.customEvictionAttributes.getEvictorStartTime();
+    }
+    this.customEvictionAttributes = new CustomEvictionAttributesImpl(
+        this.customEvictionAttributes.getCriteria(), newStart, newInterval,
+        newStart == 0 && newInterval == 0);
+
+//    if (this.evService == null) {
+//      initilializeCustomEvictor();
+//    } else {// we are changing the earlier one which is already started.
+//      EvictorService service = getEvictorTask();
+//      service.changeEvictionInterval(newInterval);
+//      if (newStart != 0)
+//        service.changeStartTime(newStart);
+//    }
+
+    return this.customEvictionAttributes;
+  }
+  
-  protected final long cacheTimeMillis() {
+  public final long cacheTimeMillis() {
-   * @since 8.1
-   */
+  * @since 8.1
+  * property used to find region operations that reach out to HDFS multiple times
+  */
+
+  public boolean getOffHeap() {
+    return this.offHeap;
+  }
+  /**
+   * property used to find region operations that reach out to HDFS multiple times
+   */
+  private static final boolean DEBUG_HDFS_CALLS = Boolean.getBoolean("DebugHDFSCalls");
+
+  /**
+   * throws exception if region operation goes out to HDFS multiple times
+   */
+  private static final boolean THROW_ON_MULTIPLE_HDFS_CALLS = Boolean.getBoolean("throwOnMultipleHDFSCalls");
+
+  private ThreadLocal<CallLog> logHDFSCalls = DEBUG_HDFS_CALLS ? new ThreadLocal<CallLog>() : null;
+
+  public void hdfsCalled(Object key) {
+    if (!DEBUG_HDFS_CALLS) {
+      return;
+    }
+    logHDFSCalls.get().addStack(new Throwable());
+    logHDFSCalls.get().setKey(key);
+  }
+  public final void operationStart() {
+    if (!DEBUG_HDFS_CALLS) {
+      return;
+    }
+    if (logHDFSCalls.get() == null) {
+      logHDFSCalls.set(new CallLog());
+      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationStart", new Throwable());
+    } else {
+      logHDFSCalls.get().incNestedCall();
+      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:incNestedCall:", new Throwable());
+    }
+  }
+  public final void operationCompleted() {
+    if (!DEBUG_HDFS_CALLS) {
+      return;
+    }
+    //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationCompleted", new Throwable());
+    if (logHDFSCalls.get() != null && logHDFSCalls.get().decNestedCall() < 0) {
+      logHDFSCalls.get().assertCalls();
+      logHDFSCalls.set(null);
+    }
+  }
+
+  public static class CallLog {
+    private List<Throwable> stackTraces = new ArrayList<Throwable>();
+    private Object key;
+    private int nestedCall = 0;
+    public void incNestedCall() {
+      nestedCall++;
+    }
+    public int decNestedCall() {
+      return --nestedCall;
+    }
+    public void addStack(Throwable stack) {
+      this.stackTraces.add(stack);
+    }
+    public void setKey(Object key) {
+      this.key = key;
+    }
+    public void assertCalls() {
+      if (stackTraces.size() > 1) {
+        Throwable firstTrace = new Throwable();
+        Throwable lastTrace = firstTrace;
+        for (Throwable t : this.stackTraces) {
+          lastTrace.initCause(t);
+          lastTrace = t;
+        }
+        if (THROW_ON_MULTIPLE_HDFS_CALLS) {
+          throw new RuntimeException("SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
+        } else {
+          InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
+        }
+      }
+    }
+  }
+
+  public EvictionCriteria getEvictionCriteria() {
+    EvictionCriteria criteria = null;
+    if (this.customEvictionAttributes != null
+        && !this.customEvictionAttributes.isEvictIncoming()) {
+      criteria = this.customEvictionAttributes.getCriteria();
+    }
+    return criteria;
+  }

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS31 INS29 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS78 INS83 INS83 INS43 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS8 MOV83 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS83 INS39 INS42 MOV44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS8 UPD83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS8 MOV83 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS83 INS39 INS42 MOV8 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS65 INS65 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS41 MOV21 MOV21 INS43 INS42 INS25 INS25 INS25 INS21 INS60 INS25 INS21 INS21 INS21 INS65 INS42 INS42 INS41 INS65 INS42 UPD42 MOV42 INS39 INS42 INS39 INS42 INS21 INS25 INS25 MOV21 INS41 INS41 INS65 INS42 INS32 INS65 INS42 INS32 INS43 INS43 UPD42 MOV42 INS16 INS43 INS42 INS25 MOV21 INS21 INS25 INS25 INS25 INS25 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS60 INS25 INS41 INS66 INS66 INS22 INS22 UPD42 MOV42 INS27 MOV8 INS32 INS8 INS32 INS8 INS7 INS74 INS59 INS27 INS8 INS7 INS7 INS7 INS65 INS22 INS65 INS32 INS27 INS8 INS27 INS8 INS7 INS22 INS66 INS22 INS66 INS42 INS42 INS45 INS66 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS33 INS42 INS38 INS8 INS32 INS38 INS8 INS27 INS8 INS8 INS38 INS8 INS27 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS34 INS21 INS41 UPD43 UPD42 INS21 INS43 INS42 INS21 INS25 INS43 INS59 INS27 INS8 INS42 INS52 INS42 INS52 INS42 INS32 INS34 INS25 INS32 INS42 INS21 INS32 INS42 INS21 INS22 INS32 INS43 INS76 INS76 INS42 INS32 INS22 INS27 INS60 INS21 INS22 INS32 INS22 INS32 INS22 INS32 INS52 INS42 INS42 INS22 INS33 INS53 INS42 INS34 INS21 INS22 INS14 INS52 INS42 INS52 INS42 INS74 INS42 INS41 INS32 UPD42 INS14 INS32 INS42 INS42 INS42 INS41 INS32 INS33 INS21 INS21 INS42 INS41 INS27 INS27 INS21 INS21 INS42 INS42 INS74 INS37 INS38 UPD42 INS32 INS42 INS7 INS27 INS8 INS42 INS42 INS33 INS27 INS38 INS21 INS42 INS42 UPD43 INS27 MOV8 INS25 INS32 INS42 INS32 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS33 INS43 INS59 INS32 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS14 INS7 INS52 INS42 INS43 INS32 INS42 INS42 INS27 INS43 INS43 UPD42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS32 INS34 INS32 INS32 INS43 INS43 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS32 INS34 INS60 INS60 INS70 INS25 INS22 INS33 INS32 INS7 UPD42 UPD42 INS32 INS32 INS32 INS27 MOV8 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS22 INS43 INS32 INS42 INS32 INS42 INS22 INS42 INS27 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS44 INS22 INS8 INS42 INS8 INS8 INS52 INS42 INS22 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS43 INS42 INS52 INS42 INS32 UPD42 MOV42 INS40 INS42 INS32 INS22 INS42 INS52 INS42 INS42 INS34 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS21 INS21 INS53 INS21 INS52 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS43 INS42 INS32 INS7 INS14 INS32 INS52 INS42 INS40 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS32 INS42 INS40 INS27 INS42 INS40 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 DEL42 DEL42 DEL32 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL33 DEL27 DEL25 DEL8 DEL25 DEL42 DEL43 DEL62 DEL42 DEL43 DEL62 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL33 DEL27 DEL25 DEL8 DEL25 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL62 DEL43 DEL43 DEL42 DEL11 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL11 DEL45 DEL45 DEL52 DEL32 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL25 DEL25 DEL66 DEL65 DEL29 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL43 DEL62 DEL41 DEL8 DEL31 DEL42 DEL42 DEL52 DEL32 DEL52 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL41