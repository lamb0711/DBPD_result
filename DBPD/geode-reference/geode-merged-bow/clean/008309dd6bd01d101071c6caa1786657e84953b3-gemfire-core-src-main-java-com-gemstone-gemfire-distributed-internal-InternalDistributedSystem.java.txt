Merge branch 'release/1.0.0-incubating.M1'

- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMembershipManager;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.LocatorImpl;
+import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
+import com.gemstone.gemfire.distributed.internal.membership.gms.mgr.GMSMembershipManager;
+import com.gemstone.gemfire.internal.LinuxProcFsStatistics;
-import com.gemstone.gemfire.internal.OSProcess;
+import com.gemstone.gemfire.internal.cache.CacheServerImpl;
+import com.gemstone.gemfire.internal.cache.xmlcache.CacheServerCreation;
+import com.gemstone.gemfire.internal.offheap.MemoryAllocator;
+import com.gemstone.gemfire.internal.offheap.OffHeapStorage;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+  public static final CreationStackGenerator DEFAULT_CREATION_STACK_GENERATOR = new CreationStackGenerator() {
+    @Override
+    public Throwable generateCreationStack(final DistributionConfig config) {
+      return null;
+    }
+  };
+
-  public static final AtomicReference<CreationStackGenerator> TEST_CREATION_STACK_GENERATOR = new AtomicReference<CreationStackGenerator>(
-      new CreationStackGenerator() {
-        @Override
-        public Throwable generateCreationStack(final DistributionConfig config) {
-          return null;
-        }
-      });
-  
+  public static final AtomicReference<CreationStackGenerator> TEST_CREATION_STACK_GENERATOR = new AtomicReference<CreationStackGenerator>(DEFAULT_CREATION_STACK_GENERATOR);
+  
+  
+  /**
+   * creates a non-functional instance for testing
+   * @param nonDefault - non-default distributed system properties
+   */
+  public static InternalDistributedSystem newInstanceForTesting(DM dm, Properties nonDefault) {
+    InternalDistributedSystem sys = new InternalDistributedSystem(nonDefault);
+    sys.config = new RuntimeDistributionConfigImpl(sys);
+    sys.dm = dm;
+    sys.isConnected = true;
+    return sys;
+  }
+  private MemoryAllocator offHeapStore = null;
+  
+  public MemoryAllocator getOffHeapStore() {
+    return this.offHeapStore;
+  }
+  
-    if (this.originalConfig.getMcastPort() == 0 && this.originalConfig.getLocators().equals("")) {
-      // no distribution
-      this.isLoner = true;
-//       throw new IllegalArgumentException("The "
-//                                          + DistributionConfig.LOCATORS_NAME
-//                                          + " attribute can not be empty when the "
-//                                          + DistributionConfig.MCAST_PORT_NAME
-//                                          + " attribute is zero.");
+    if (this.originalConfig.getLocators().equals("")) {
+      if (this.originalConfig.getMcastPort() != 0) {
+        throw new GemFireConfigException("The "
+                                          + DistributionConfig.LOCATORS_NAME
+                                          + " attribute can not be empty when the "
+                                          + DistributionConfig.MCAST_PORT_NAME
+                                          + " attribute is non-zero.");
+      } else {
+        // no distribution
+        this.isLoner = true;
+      }
-    if (this.isLoner) {
-      this.config = new RuntimeDistributionConfigImpl(this);
-    } else {
-      this.config = new RuntimeDistributionConfigImpl(this);
+    this.config = new RuntimeDistributionConfigImpl(this);
+    if (!this.isLoner) {
-
-    GemFireTracer tracer = GemFireTracer.getLog(InternalDistributedSystem.class);
-    tracer.setLogWriter(this.logWriter);
-    tracer.setSecurityLogWriter(this.securityLogWriter);
-    tracer.setLogger(LogService.getLogger(GemFireTracer.class));
+    
+    Services.setLogWriter(this.logWriter);
+    Services.setSecurityLogWriter(this.securityLogWriter);
+    final long offHeapMemorySize = OffHeapStorage.parseOffHeapMemorySize(getConfig().getOffHeapMemorySize());
+
+    this.offHeapStore = OffHeapStorage.createOffHeapStorage(getLogWriter(), this, offHeapMemorySize, this);
+    
+    // Note: this can only happen on a linux system
+    if (getConfig().getLockMemory()) {
+      // This calculation is not exact, but seems fairly close.  So far we have
+      // not loaded much into the heap and the current RSS usage is already 
+      // included the available memory calculation.
+      long avail = LinuxProcFsStatistics.getAvailableMemory(logger);
+      long size = offHeapMemorySize + Runtime.getRuntime().totalMemory();
+      if (avail < size) {
+        if (GemFireCacheImpl.ALLOW_MEMORY_LOCK_WHEN_OVERCOMMITTED) {
+          logger.warn(LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_MEMORY_OVERCOMMIT_WARN, size - avail));
+        } else {
+          throw new IllegalStateException(LocalizedStrings.InternalDistributedSystem_MEMORY_OVERCOMMIT.toLocalizedString(avail, size));
+        }
+      }
+      
+      logger.info("Locking memory. This may take a while...");
+      GemFireCacheImpl.lockMemory();
+      logger.info("Finished locking memory.");
+    }
+
-    if (!this.isLoner) {
-      this.dm.restartCommunications();
-    }
-            if (this.isConnected) {
-              InternalDistributedMember id = this.dm.getDistributionManagerId();
-              LocatorImpl gs = this.startedLocator.getLocatorHandler();
-              gs.setLocalAddress(id);
-            }
-              this.startedLocator = null;
-          this.startedLocator = null;
-      reconnected = tryReconnect(true, reason, GemFireCacheImpl.getInstance());
+    
+     reconnected = tryReconnect(true, reason, GemFireCacheImpl.getInstance());
-   * Ensure that the JGroupMembershipManager class gets loaded.
+   * Ensure that the MembershipManager class gets loaded.
-    JGroupMembershipManager.loadEmergencyClasses();
+    GMSMembershipManager.loadEmergencyClasses();
-            this.startedLocator.stop(preparingForReconnect, false);
+            this.startedLocator.stop(forcedDisconnect, preparingForReconnect, false);
+        if (getOffHeapStore() != null) {
+          getOffHeapStore().close();
+        }
+      } finally {
+      try {
+      }
-    if (me.getMcastPort() != 0) {
-      // mcast
-      return me.getMcastPort() == other.getMcastPort() &&
-        me.getMcastAddress().equals(other.getMcastAddress());
+    // locators
+    String myLocators = me.getLocators();
+    String otherLocators = other.getLocators();
+
+    // quick check
+    if (myLocators.equals(otherLocators)) {
+      return true;
-      // locators
-      String myLocators = me.getLocators();
-      String otherLocators = other.getLocators();
+      myLocators = canonicalizeLocators(myLocators);
+      otherLocators = canonicalizeLocators(otherLocators);
-      // quick check
-      if (myLocators.equals(otherLocators)) {
-        return true;
-
-      } else {
-        myLocators = canonicalizeLocators(myLocators);
-        otherLocators = canonicalizeLocators(otherLocators);
-
-        return myLocators.equals(otherLocators);
-      }
+      return myLocators.equals(otherLocators);
-      if (!locId.isMcastId()) {
-        String addr = locId.getBindAddress();
-        if (addr != null && addr.trim().length() > 0) {
-          canonical.append(addr);
-        }
-        else {
-          canonical.append(locId.getHost().getHostAddress());
-        }
-        canonical.append("[");
-        canonical.append(String.valueOf(locId.getPort()));
-        canonical.append("]");
-        sorted.add(canonical.toString());
+      String addr = locId.getBindAddress();
+      if (addr != null && addr.trim().length() > 0) {
+        canonical.append(addr);
+      else {
+        canonical.append(locId.getHost().getHostAddress());
+      }
+      canonical.append("[");
+      canonical.append(String.valueOf(locId.getPort()));
+      canonical.append("]");
+      sorted.add(canonical.toString());
-      Set<InetAddress> equivalentAddresses = dm.getEquivalents(member.getIpAddress());
+      Set<InetAddress> equivalentAddresses = dm.getEquivalents(member.getInetAddress());
-      if(address.equals(member.getIpAddress()) || equivalentAddresses.contains(address)) {
+      if(address.equals(member.getInetAddress()) || equivalentAddresses.contains(address)) {
-    
-          if (!forcedDisconnect &&
-              !oldCache.isClosed() &&
-              oldCache.getCachePerfStats().getReliableRegionsMissing() == 0) {
+          if (!forcedDisconnect && !oldCache.isClosed() && oldCache.getCachePerfStats().getReliableRegionsMissing() == 0) {
-        
+
-            if (this.config.getDisableAutoReconnect()) {
+            if (config.getDisableAutoReconnect()) {
-          return this.reconnectDS != null && this.reconnectDS.isConnected();
+          return (this.reconnectDS != null && this.reconnectDS.isConnected());
+    List<CacheServerCreation> cacheServerCreation = null;
+    
+        cacheServerCreation = cache.getCacheConfig().getCacheServerCreation();
-    boolean mcastDiscovery = oldConfig.getLocators().isEmpty()
-        && oldConfig.getStartLocator().isEmpty()
-        && oldConfig.getMcastPort() != 0;
-    boolean mcastQuorumContacted = false;
-    
-
-    if (Thread.currentThread().getName().equals("CloserThread")) {
+    if (Thread.currentThread().getName().equals("DisconnectThread")) {
-        logger.debug("changing thread name to ReconnectThread"); // wha?! really?
+        logger.debug("changing thread name to ReconnectThread");
-        logger.info(LocalizedMessage.create(LocalizedStrings.DISTRIBUTED_SYSTEM_RECONNECTING, new Object[]{reconnectAttemptCounter}));
+        logger.info("Disconnecting old DistributedSystem to prepare for a reconnect attempt");
-          if (mcastDiscovery  &&  (quorumChecker != null) && !mcastQuorumContacted) {
-            mcastQuorumContacted = quorumChecker.checkForQuorum(3*this.config.getMemberTimeout());
-            if (!mcastQuorumContacted) {
-              if (logger.isDebugEnabled()) {
-                logger.debug("quorum check failed - skipping reconnect attempt");
-              }
-              continue;
-            }
-            if (logger.isDebugEnabled()) {
-              logger.debug(LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_QUORUM_OF_MEMBERS_CONTACTED));
-            }
-            mcastQuorumContacted = true;
-            // bug #51527: become more aggressive about reconnecting since there are other 
-            // members around now
-            if (timeOut > 5000) {
-              timeOut = 5000;
-            }
-          }
+            if (cacheServerCreation != null) {
+              for (CacheServerCreation bridge: cacheServerCreation) {
+                CacheServerImpl impl = (CacheServerImpl)cache.addCacheServer();
+                impl.configureFrom(bridge);
+                try {
+                  if (!impl.isRunning()) {
+                    impl.start();
+                  }
+                } catch (IOException ex) {
+                  throw new GemFireIOException(
+                      LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0
+                          .toLocalizedString(impl), ex);
+                }
+              }
+            }
-              if (isDebugEnabled) {
-                logger.debug("Reconnected properly");
-              }  
+              logger.info("Reconnected properly");

MOV26 MOV26 INS26 INS26 INS26 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS23 INS31 INS23 INS31 INS43 INS83 INS83 INS83 MOV74 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS59 INS83 INS43 INS42 INS8 MOV8 MOV8 MOV60 INS42 UPD42 MOV14 INS42 INS14 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS41 INS42 INS42 INS33 INS42 INS41 MOV21 MOV60 MOV60 MOV25 MOV60 MOV60 INS61 MOV60 MOV24 MOV41 MOV74 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS7 INS7 INS7 INS42 INS22 MOV32 INS8 MOV38 MOV60 UPD66 INS8 MOV32 MOV8 INS74 INS59 INS42 INS42 INS14 INS40 INS14 INS40 INS42 INS40 INS9 INS52 INS42 INS25 INS21 INS25 UPD42 INS54 MOV60 MOV60 MOV60 MOV25 INS43 INS43 INS42 INS33 UPD45 MOV43 INS42 INS43 INS42 UPD27 MOV27 INS8 MOV8 INS83 INS39 INS7 INS32 INS8 MOV8 INS8 MOV8 MOV32 MOV8 INS42 INS42 INS42 INS53 UPD42 UPD42 UPD42 INS22 INS32 INS32 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS25 INS21 INS14 UPD42 INS42 INS32 INS52 INS42 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS32 MOV38 INS27 INS8 INS7 INS43 INS27 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS27 INS42 INS42 MOV25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS33 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS45 INS42 INS45 INS40 INS45 INS40 INS45 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS40 INS8 INS8 INS42 INS32 INS36 INS32 INS42 INS32 INS42 INS53 MOV21 MOV21 INS32 INS42 MOV27 INS42 INS42 INS25 UPD42 MOV42 UPD42 MOV42 INS32 INS14 MOV38 INS42 INS27 INS8 MOV8 INS42 INS42 INS32 INS43 INS32 MOV21 INS42 INS42 INS42 INS33 INS70 MOV21 INS42 UPD42 MOV42 INS40 INS27 INS42 INS40 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS60 INS21 INS54 UPD42 MOV42 INS42 INS43 INS59 INS32 INS8 INS12 INS42 INS42 INS11 INS42 INS42 INS42 INS25 INS44 INS8 INS43 INS32 INS38 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS21 INS42 INS14 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 DEL14 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL57 DEL32 DEL32 DEL21 DEL42 DEL43 DEL57 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL25 DEL8 DEL32 DEL38 DEL61 DEL8 DEL52 DEL42 DEL22 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL59 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL32 DEL7 DEL21 DEL42 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL18 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL25 DEL8