GEODE-3129 - Added error messages to protobuf protocol. This now closes #621

added a new ErrorResponse type to ClientProtocol
removed success field from several RegionAPI response objects and refactored operation handlers to instead return ErrorResponses
made all op handlers take ClientProtocol.Requests and return ClientProtocol.Responses instead of operation specific types
moved the protobuf specific response building code from operation handlers to ProtobufResponseUtilities
moved the request building functions from MessageUtil (under Test) to ProtobufRequestUtilities
moved all utility classes to ...protocol.protobuf.utilities and added javadoc comments throughout
changed GetRegions to GetRegionNames, returns strings instead of Regions
replaced logging through the cache's LogWriter with log4j logging
updated all imports to be in the correct order for the new geode style guide

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Hitesh Khamesra <hiteshk25@yahoo.com>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import org.apache.geode.protocol.protobuf.ProtobufUtilities;
-import org.apache.geode.protocol.protobuf.BasicTypes;
-import org.apache.geode.protocol.protobuf.RegionAPI;
+import org.apache.geode.protocol.protobuf.*;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufResponseUtilities;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufUtilities;
-import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
-    implements OperationHandler<RegionAPI.GetRequest, RegionAPI.GetResponse> {
+    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
+  private static Logger logger = LogManager.getLogger();
-  public RegionAPI.GetResponse process(SerializationService serializationService,
-      RegionAPI.GetRequest request, Cache cache) {
-    String regionName = request.getRegionName();
+  public ClientProtocol.Response process(SerializationService serializationService,
+      ClientProtocol.Request request, Cache cache) {
+    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.GETREQUEST) {
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Improperly formatted get request message.", logger, null);
+    }
+    RegionAPI.GetRequest getRequest = request.getGetRequest();
+
+    String regionName = getRequest.getRegionName();
+    Region region = cache.getRegion(regionName);
+    if (region == null) {
+      return ProtobufResponseUtilities.createErrorResponse(false, false, "Region not found");
+    }
+
-      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, request.getKey());
-
-
-      Region region = cache.getRegion(regionName);
-
-      if (region == null) {
-        return buildGetResponseFailure();
-      }
-
+      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, getRequest.getKey());
-        return buildGetResponseKeyNotFound();
+        return ProtobufResponseUtilities.createNullGetResponse();
-      return buildGetResponseSuccess(serializationService, resultValue);
+      BasicTypes.EncodedValue encodedValue =
+          ProtobufUtilities.createEncodedValue(serializationService, resultValue);
+      return ProtobufResponseUtilities.createGetResponse(encodedValue);
-      cache.getLogger().error("encoding not supported ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Encoding not supported.", logger, ex);
-      cache.getLogger().error("codec error in protobuf deserialization ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(true, false,
+          "Codec error in protobuf deserialization.", logger, ex);
-    return buildGetResponseFailure();
-  }
-
-  private RegionAPI.GetResponse buildGetResponseKeyNotFound() {
-    return RegionAPI.GetResponse.newBuilder().setSuccess(true).setKeyExists(false).build();
-  }
-
-  private RegionAPI.GetResponse buildGetResponseFailure() {
-    return RegionAPI.GetResponse.newBuilder().setSuccess(false).build();
-  }
-
-  // throws if the object in the cache is not of a class that be serialized via the protobuf
-  // protocol.
-  private RegionAPI.GetResponse buildGetResponseSuccess(SerializationService serializationService,
-      Object resultValue)
-      throws UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
-    BasicTypes.EncodingType resultEncodingType =
-        EncodingTypeTranslator.getEncodingTypeForObject(resultValue);
-    byte[] resultEncodedValue = serializationService.encode(resultEncodingType, resultValue);
-
-    return RegionAPI.GetResponse.newBuilder().setSuccess(true).setKeyExists(true)
-        .setResult(ProtobufUtilities.getEncodedValue(resultEncodingType, resultEncodedValue))
-        .build();

MOV26 MOV26 INS26 UPD40 UPD40 UPD40 INS40 UPD40 UPD74 INS23 INS31 UPD43 UPD43 INS83 INS83 INS43 INS59 MOV78 MOV83 UPD43 MOV43 MOV42 MOV44 MOV44 MOV44 INS8 UPD40 UPD40 INS42 INS42 INS32 UPD40 INS43 INS25 INS60 INS60 MOV60 INS25 INS54 INS42 INS42 INS40 INS27 INS8 MOV43 INS59 MOV43 INS59 MOV27 INS8 INS8 INS12 INS12 INS32 INS40 MOV41 INS42 INS32 INS42 INS32 MOV41 INS60 MOV60 INS25 MOV60 INS41 MOV44 INS8 MOV44 INS8 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 MOV43 INS59 MOV27 INS8 UPD43 INS32 INS41 MOV41 UPD42 UPD42 INS9 INS9 INS45 UPD42 INS33 UPD42 MOV42 UPD42 MOV42 UPD9 MOV9 MOV9 INS45 INS42 INS32 INS41 UPD40 UPD42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS9 INS9 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV9 UPD9 MOV9 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL32 DEL41 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL40 DEL42 DEL32 DEL9 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31