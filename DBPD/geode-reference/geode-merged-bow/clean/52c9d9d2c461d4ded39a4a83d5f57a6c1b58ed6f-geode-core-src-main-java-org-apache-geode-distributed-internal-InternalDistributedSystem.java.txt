GEODE-7341: Provide a way to avoid memory lock if over committed (#4210)



-  /**
-   * True if the user is allowed lock when memory resources appear to be overcommitted.
-   */
-  private static final boolean ALLOW_MEMORY_LOCK_WHEN_OVERCOMMITTED =
-      Boolean.getBoolean(GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT");
+  public static final String ALLOW_MEMORY_OVERCOMMIT =
+      GEMFIRE_PREFIX + "Cache.ALLOW_MEMORY_OVERCOMMIT";
+  public static final String AVOID_MEMORY_LOCK_WHEN_OVERCOMMIT =
+      GEMFIRE_PREFIX + "Cache.AVOID_MEMORY_LOCK_WHEN_OVERCOMMIT";
+
+  /**
+   * True if the user is allowed lock when memory resources appear to be overcommitted.
+   */
+  private final boolean allowMemoryLockWhenOvercommitted =
+      Boolean.getBoolean(ALLOW_MEMORY_OVERCOMMIT);
+  /**
+   * True if memory lock is avoided when memory resources appear to be overcommitted.
+   */
+  private final boolean avoidMemoryLockWhenOvercommitted =
+      Boolean.getBoolean(AVOID_MEMORY_LOCK_WHEN_OVERCOMMIT);
-        if (avail < size) {
-          if (ALLOW_MEMORY_LOCK_WHEN_OVERCOMMITTED) {
-            logger.warn(
-                "System memory appears to be over committed by {} bytes.  You may experience "
-                    + "instability, performance issues, or terminated processes due to the Linux "
-                    + "OOM killer.",
-                size - avail);
-          } else {
-            throw new IllegalStateException(
-                String.format(
-                    "Insufficient free memory (%s) when attempting to lock %s bytes.  Either "
-                        + "reduce the amount of heap or off-heap memory requested or free up "
-                        + "additional system memory.  You may also specify -Dgemfire.Cache"
-                        + ".ALLOW_MEMORY_OVERCOMMIT=true on the command-line to override the "
-                        + "constraint check.",
-                    avail, size));
-          }
-        }
-
-        logger.info("Locking memory. This may take a while...");
-        GemFireCacheImpl.lockMemory();
-        logger.info("Finished locking memory.");
+        lockMemory(avail, size);
+  void lockMemory(long avail, long size) {
+    if (avail < size) {
+      if (avoidMemoryLockWhenOvercommitted) {
+        logger.warn(
+            "System memory appears to be over committed by {} bytes. Memory will not be locked because -D{} is set to true.",
+            size - avail, AVOID_MEMORY_LOCK_WHEN_OVERCOMMIT);
+      } else if (allowMemoryLockWhenOvercommitted) {
+        logger.warn(
+            "System memory appears to be over committed by {} bytes. Memory is locked anyway because -D{} is set to true. You may experience instability, performance issues, or terminated processes due to the Linux OOM killer.",
+            size - avail, ALLOW_MEMORY_OVERCOMMIT);
+        lockMemory();
+      } else {
+        throw new IllegalStateException(
+            String.format(
+                "Insufficient free memory (%s) when attempting to lock %s bytes.  Either reduce the amount of heap or off-heap memory requested or free up additional system memory.  You may also specify -D%s=true on the command-line to override the constraint check.",
+                avail, size, ALLOW_MEMORY_OVERCOMMIT));
+      }
+    } else {
+      lockMemory();
+    }
+  }
+
+  void lockMemory() {
+    logger.info("Locking memory. This may take a while...");
+    GemFireCacheImpl.lockMemory();
+    logger.info("Finished locking memory.");
+  }
+

INS23 INS23 INS23 INS23 INS31 INS31 UPD83 MOV83 MOV83 MOV83 INS43 MOV59 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 INS83 MOV39 INS59 INS29 INS83 INS83 INS39 INS59 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS8 INS42 UPD42 MOV27 INS42 INS42 INS27 INS42 INS32 INS65 INS42 INS32 INS39 INS42 INS39 INS42 INS25 MOV21 MOV21 MOV21 INS42 INS45 INS42 INS42 INS42 INS66 INS42 INS42 INS42 MOV27 INS8 INS8 MOV25 INS25 INS21 MOV32 INS42 INS8 INS25 INS32 MOV60 MOV60 INS21 INS21 INS42 INS8 INS8 INS42 INS32 INS32 INS21 INS21 INS53 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS45 MOV27 INS42 INS32 INS32 INS14 INS42 INS42 INS45 INS27 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL23 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25