GEODE-5398: Add BackupOperationTest and BackupStatusImplTest

Refactor BackupOperation to make it easier to unit test.

+import org.apache.geode.annotations.TestingOnly;
+import org.apache.geode.internal.cache.InternalCache;
+/**
+ * Performs backup of all members.
+ */
+  private final DistributionManager dm;
+  private final InternalCache cache;
+  private final BackupLockService backupLockService;
+  private final MissingPersistentMembersProvider missingPersistentMembersProvider;
-  public BackupOperation() {
+  public BackupOperation(DistributionManager dm, InternalCache cache) {
-        new FinishBackupFactory());
+        new FinishBackupFactory(), dm, cache, new BackupLockService(),
+        new DefaultMissingPersistentMembersProvider());
+  @TestingOnly
-      AbortBackupFactory abortBackupFactory, FinishBackupFactory finishBackupFactory) {
+      AbortBackupFactory abortBackupFactory, FinishBackupFactory finishBackupFactory,
+      DistributionManager dm, InternalCache cache, BackupLockService backupLockService,
+      MissingPersistentMembersProvider missingPersistentMembersProvider) {
+    this.dm = dm;
+    this.cache = cache;
+    this.backupLockService = backupLockService;
+    this.missingPersistentMembersProvider = missingPersistentMembersProvider;
-  public BackupStatus backupAllMembers(DistributionManager dm, String targetDirPath,
-      String baselineDirPath) {
+  public BackupStatus backupAllMembers(String targetDirPath, String baselineDirPath) {
-    return performBackup(dm, properties);
+    return performBackup(properties);
-  private BackupStatus performBackup(DistributionManager dm, Properties properties)
-      throws ManagementException {
-    BackupLockService backupLockService = new BackupLockService();
-    BackupStatus status;
+  private BackupStatus performBackup(Properties properties) throws ManagementException {
-        Set<PersistentID> missingMembers =
-            AdminDistributedSystemImpl.getMissingPersistentMembers(dm);
-        Set<InternalDistributedMember> recipients = dm.getOtherDistributionManagerIds();
-
-        BackupDataStoreResult result = performBackupSteps(dm, recipients, properties);
-
-        // It's possible that when calling getMissingPersistentMembers, some members are
-        // still creating/recovering regions, and at FinishBackupRequest.send, the
-        // regions at the members are ready. Logically, since the members in successfulMembers
-        // should override the previous missingMembers
-        for (Set<PersistentID> onlineMembersIds : result.getSuccessfulMembers().values()) {
-          missingMembers.removeAll(onlineMembersIds);
-        }
-
-        result.getExistingDataStores().keySet().removeAll(result.getSuccessfulMembers().keySet());
-        for (Set<PersistentID> lostMembersIds : result.getExistingDataStores().values()) {
-          missingMembers.addAll(lostMembersIds);
-        }
-        status = new BackupStatusImpl(result.getSuccessfulMembers(), missingMembers);
+        return performBackupUnderLock(properties);
-
-    return status;
-  private BackupDataStoreResult performBackupSteps(DistributionManager dm, Set recipients,
-      Properties properties) {
-    new FlushToDiskStep(dm, dm.getId(), dm.getCache(), recipients, flushToDiskFactory).send();
+  private BackupStatus performBackupUnderLock(Properties properties) {
+    Set<PersistentID> missingMembers =
+        missingPersistentMembersProvider.getMissingPersistentMembers(dm);
+    Set<InternalDistributedMember> recipients = dm.getOtherDistributionManagerIds();
+
+    BackupDataStoreResult result = performBackupSteps(dm.getId(), recipients, properties);
+
+    // It's possible that when calling getMissingPersistentMembers, some members are
+    // still creating/recovering regions, and at FinishBackupRequest.send, the
+    // regions at the members are ready. Logically, since the members in successfulMembers
+    // should override the previous missingMembers
+    for (Set<PersistentID> onlineMembersIds : result.getSuccessfulMembers().values()) {
+      missingMembers.removeAll(onlineMembersIds);
+    }
+
+    result.getExistingDataStores().keySet().removeAll(result.getSuccessfulMembers().keySet());
+    for (Set<PersistentID> lostMembersIds : result.getExistingDataStores().values()) {
+      missingMembers.addAll(lostMembersIds);
+    }
+    return new BackupStatusImpl(result.getSuccessfulMembers(), missingMembers);
+  }
+
+  private BackupDataStoreResult performBackupSteps(InternalDistributedMember member,
+      Set<InternalDistributedMember> recipients, Properties properties) {
+    flushToDiskFactory.createFlushToDiskStep(dm, member, cache, recipients, flushToDiskFactory)
+        .send();
-      existingDataStores = new PrepareBackupStep(dm, dm.getId(), dm.getCache(), recipients,
-          prepareBackupFactory, properties).send();
+      PrepareBackupStep prepareBackupStep =
+          prepareBackupFactory.createPrepareBackupStep(dm, member, cache, recipients,
+              prepareBackupFactory, properties);
+      existingDataStores = prepareBackupStep.send();
-        new AbortBackupStep(dm, dm.getId(), dm.getCache(), recipients, abortBackupFactory)
+        abortBackupFactory.createAbortBackupStep(dm, member, cache, recipients, abortBackupFactory)
-        successfulMembers = new FinishBackupStep(dm, dm.getId(), dm.getCache(), recipients,
-            finishBackupFactory).send();
+        successfulMembers =
+            finishBackupFactory.createFinishBackupStep(dm, member, cache, recipients,
+                finishBackupFactory).send();
+
+  interface MissingPersistentMembersProvider {
+    Set<PersistentID> getMissingPersistentMembers(DistributionManager dm);
+  }
+
+  private static class DefaultMissingPersistentMembersProvider
+      implements MissingPersistentMembersProvider {
+    public Set<PersistentID> getMissingPersistentMembers(DistributionManager dm) {
+      return AdminDistributedSystemImpl.getMissingPersistentMembers(dm);
+    }
+  }

INS26 INS26 INS40 INS40 INS29 INS23 INS23 INS23 INS23 INS31 INS55 INS55 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 MOV44 INS44 INS78 INS44 INS44 INS44 INS44 INS83 MOV43 INS42 INS44 MOV43 INS8 UPD42 MOV8 INS44 INS42 INS31 INS83 INS83 INS42 INS43 INS31 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS25 INS41 INS43 INS42 INS74 INS74 INS42 MOV44 INS42 INS83 MOV74 INS42 MOV44 INS8 INS42 INS42 INS42 MOV14 INS14 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 MOV32 INS8 MOV8 INS74 MOV14 INS42 MOV43 INS43 INS43 INS43 INS41 INS43 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS54 INS43 INS43 INS32 INS42 INS32 INS60 INS21 INS42 INS42 MOV32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS8 MOV8 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV43 INS59 INS7 INS41 MOV42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL14 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL14