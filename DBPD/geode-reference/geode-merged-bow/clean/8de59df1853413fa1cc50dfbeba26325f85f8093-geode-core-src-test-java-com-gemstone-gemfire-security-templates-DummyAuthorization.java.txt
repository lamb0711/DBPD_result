GEODE-949: refactor and repackage security test code

* move test security classes from security package to com.gemstone.gemfire.security.generator
* move test security resources from lib package to com.gemstone.gemfire.security.generator
* move test security classes from templates.security package to com.gemstone.gemfire.security.templates
* fix places where security code ate exceptions
* fix up javadocs
* reformat and refactor code to be more readable and follow standards

-package templates.security;
+package com.gemstone.gemfire.security.templates;
- * A dummy implementation of the <code>AccessControl</code> interface that
- * allows authorization depending on the format of the <code>Principal</code>
+ * A dummy implementation of the {@code AccessControl} interface that
+ * allows authorization depending on the format of the {@code Principal}
- * @author Sumedh Wale
+  private DistributedMember remoteMember;
+  private LogWriter securityLogWriter;
-  private DistributedMember remoteDistributedMember;
+  public static final OperationCode[] READER_OPS = {
+      OperationCode.GET,
+      OperationCode.QUERY,
+      OperationCode.EXECUTE_CQ,
+      OperationCode.CLOSE_CQ,
+      OperationCode.STOP_CQ,
+      OperationCode.REGISTER_INTEREST,
+      OperationCode.UNREGISTER_INTEREST,
+      OperationCode.KEY_SET,
+      OperationCode.CONTAINS_KEY,
+      OperationCode.EXECUTE_FUNCTION };
-  private LogWriter logger;
-
-  public static final OperationCode[] READER_OPS = { OperationCode.GET,
-      OperationCode.QUERY, OperationCode.EXECUTE_CQ, OperationCode.CLOSE_CQ,
-      OperationCode.STOP_CQ, OperationCode.REGISTER_INTEREST,
-      OperationCode.UNREGISTER_INTEREST, OperationCode.KEY_SET,
-      OperationCode.CONTAINS_KEY, OperationCode.EXECUTE_FUNCTION };
-
-  public static final OperationCode[] WRITER_OPS = { OperationCode.PUT, OperationCode.PUTALL, 
-      OperationCode.DESTROY, OperationCode.INVALIDATE, OperationCode.REGION_CLEAR };
-
-  public DummyAuthorization() {
-    this.allowedOps = new HashSet(20);
-  }
+  public static final OperationCode[] WRITER_OPS = {
+      OperationCode.PUT,
+      OperationCode.PUTALL,
+      OperationCode.DESTROY,
+      OperationCode.INVALIDATE,
+      OperationCode.REGION_CLEAR };
-  private void addReaderOps() {
+  public DummyAuthorization() {
+    this.allowedOps = new HashSet(20);
+  }
+  @Override
+  public void init(final Principal principal, final DistributedMember remoteMember, final Cache cache) throws NotAuthorizedException {
+    if (principal != null) {
+
+      final String name = principal.getName().toLowerCase();
+
+      if (name != null) {
+
+        if (name.equals("root") || name.equals("admin") || name.equals("administrator")) {
+          addReaderOps();
+          addWriterOps();
+          this.allowedOps.add(OperationCode.REGION_CREATE);
+          this.allowedOps.add(OperationCode.REGION_DESTROY);
+
+        } else if (name.startsWith("writer")) {
+          addWriterOps();
+
+        } else if (name.startsWith("reader")) {
+          addReaderOps();
+        }
+
+      }
+    }
+
+    this.remoteMember = remoteMember;
+    this.securityLogWriter = cache.getSecurityLogger();
+  }
+
+  @Override
+  public boolean authorizeOperation(String regionName, OperationContext context) {
+    final OperationCode opCode = context.getOperationCode();
+    this.securityLogWriter.fine("Invoked authorize operation for [" + opCode + "] in region [" + regionName + "] for client: " + remoteMember);
+    return this.allowedOps.contains(opCode);
+  }
+
+  @Override
+  public void close() {
+    this.allowedOps.clear();
+  }
+
+  private void addReaderOps() {
-
-
-  public void init(Principal principal, 
-                   DistributedMember remoteMember,
-                   Cache cache) throws NotAuthorizedException {
-
-    if (principal != null) {
-      String name = principal.getName().toLowerCase();
-      if (name != null) {
-        if (name.equals("root") || name.equals("admin")
-            || name.equals("administrator")) {
-          addReaderOps();
-          addWriterOps();
-          this.allowedOps.add(OperationCode.REGION_CREATE);
-          this.allowedOps.add(OperationCode.REGION_DESTROY);
-        }
-        else if (name.startsWith("writer")) {
-          addWriterOps();
-        }
-        else if (name.startsWith("reader")) {
-          addReaderOps();
-        }
-      }
-    }
-    this.remoteDistributedMember = remoteMember;
-    this.logger = cache.getSecurityLogger();
-  }
-
-  public boolean authorizeOperation(String regionName, OperationContext context) {
-
-    OperationCode opCode = context.getOperationCode();
-    this.logger.fine("Invoked authorize operation for [" + opCode
-        + "] in region [" + regionName + "] for client: " + remoteDistributedMember);
-    return this.allowedOps.contains(opCode);
-  }
-
-  public void close() {
-
-    this.allowedOps.clear();
-  }
-

MOV31 MOV31 MOV31 UPD40 INS78 INS78 INS78 UPD66 INS65 INS66 UPD66 INS65 UPD42 UPD42 INS42 INS83 INS83 INS83 INS42 INS42 INS66 INS66 INS83 INS83 UPD42 UPD42 UPD42 UPD42 DEL66 DEL65