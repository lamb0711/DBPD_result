GEODE-2428: Adding support of Serialization/deserialization of LinkedHashMap in DataSerializer
Also added a test for the same.

GEODE-2428: Addressing review comment, Fixing the wild-card import
issue.

+import java.util.LinkedHashMap;
+
+  /**
+   * Writes a <code>LinkedHashMap</code> to a <code>DataOutput</code>. Note that even though
+   * <code>map</code> may be an instance of a subclass of <code>LinkedHashMap</code>,
+   * <code>readLinkedHashMap</code> will always return an instance of <code>LinkedHashMap</code>,
+   * <B>not</B> an instance of the subclass. To preserve the class type of <code>map</code>,
+   * {@link #writeObject(Object, DataOutput)} should be used for data serialization. This method
+   * will serialize a <code>null</code> map and not throw a <code>NullPointerException</code>.
+   *
+   * @throws IOException A problem occurs while writing to <code>out</code>
+   * @see #readLinkedHashMap
+   */
+  public static void writeLinkedHashMap(Map<?, ?> map, DataOutput out) throws IOException {
+
+    InternalDataSerializer.checkOut(out);
+
+    int size;
+    if (map == null) {
+      size = -1;
+    } else {
+      size = map.size();
+    }
+    InternalDataSerializer.writeArrayLength(size, out);
+    if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
+      logger.trace(LogMarker.SERIALIZER, "Writing LinkedHashMap with {} elements: {}", size, map);
+    }
+    if (size > 0) {
+      for (Map.Entry<?, ?> entry : map.entrySet()) {
+        writeObject(entry.getKey(), out);
+        writeObject(entry.getValue(), out);
+      }
+    }
+  }
+
+  /**
+   * Reads a <code>LinkedHashMap</code> from a <code>DataInput</code>.
+   *
+   * @throws IOException A problem occurs while reading from <code>in</code>
+   * @throws ClassNotFoundException The class of one of the <Code>HashMap</code>'s elements cannot
+   *         be found.
+   * @see #writeLinkedHashMap
+   */
+  public static <K, V> LinkedHashMap<K, V> readLinkedHashMap(DataInput in)
+      throws IOException, ClassNotFoundException {
+
+    InternalDataSerializer.checkIn(in);
+
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    } else {
+      LinkedHashMap<K, V> map = new LinkedHashMap<>(size);
+      for (int i = 0; i < size; i++) {
+        K key = DataSerializer.<K>readObject(in);
+        V value = DataSerializer.<V>readObject(in);
+        map.put(key, value);
+      }
+
+      if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
+        logger.trace(LogMarker.SERIALIZER, "Read LinkedHashMap with {} elements: {}", size, map);
+      }
+
+      return map;
+    }
+  }
+
+
+

INS26 INS40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS73 INS73 INS74 INS42 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS21 INS25 INS25 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS21 INS60 INS25 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS67 INS43 INS76 INS76 INS42 INS32 INS39 INS59 INS27 INS8 INS8 INS32 INS32 INS8 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS67 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS8 INS68 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS42 INS34 INS70 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS41 INS60 INS24 INS25 INS41 INS42 INS69 INS69 INS7 INS7 INS32 INS44 INS32 INS8 INS42 INS42 INS42 INS34 INS33 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS8 INS42 INS43 INS43 INS42 INS38 INS42 INS32 INS42 INS42 INS40 INS45 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS21 INS43 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS34 INS42 INS42 INS43 INS76 INS76 INS32 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS32 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42