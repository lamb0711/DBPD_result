GEODE-3129 - Added error messages to protobuf protocol. This now closes #621

added a new ErrorResponse type to ClientProtocol
removed success field from several RegionAPI response objects and refactored operation handlers to instead return ErrorResponses
made all op handlers take ClientProtocol.Requests and return ClientProtocol.Responses instead of operation specific types
moved the protobuf specific response building code from operation handlers to ProtobufResponseUtilities
moved the request building functions from MessageUtil (under Test) to ProtobufRequestUtilities
moved all utility classes to ...protocol.protobuf.utilities and added javadoc comments throughout
changed GetRegions to GetRegionNames, returns strings instead of Regions
replaced logging through the cache's LogWriter with log4j logging
updated all imports to be in the correct order for the new geode style guide

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Hitesh Khamesra <hiteshk25@yahoo.com>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import org.apache.geode.protocol.protobuf.BasicTypes;
-import org.apache.geode.protocol.protobuf.ClientProtocol;
-import org.apache.geode.protocol.protobuf.ProtobufUtilities;
-import org.apache.geode.protocol.protobuf.RegionAPI;
+import org.apache.geode.protocol.protobuf.*;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufResponseUtilities;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufUtilities;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
-    implements OperationHandler<RegionAPI.PutRequest, RegionAPI.PutResponse> {
+    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
+  private static Logger logger = LogManager.getLogger();
-  public RegionAPI.PutResponse process(SerializationService serializationService,
-      RegionAPI.PutRequest request, Cache cache) {
+  public ClientProtocol.Response process(SerializationService serializationService,
+      ClientProtocol.Request request, Cache cache) {
+    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.PUTREQUEST) {
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Improperly formatted put request message.", logger, null);
+    }
+    RegionAPI.PutRequest putRequest = request.getPutRequest();
+
+    String regionName = putRequest.getRegionName();
+    Region region = cache.getRegion(regionName);
+    if (region == null) {
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Region passed by client did not exist: " + regionName, logger, null);
+    }
+
-      String regionName = request.getRegionName();
-      BasicTypes.Entry entry = request.getEntry();
+      BasicTypes.Entry entry = putRequest.getEntry();
-
-      Region region = cache.getRegion(regionName);
-      if (region == null) {
-        cache.getLogger().error("Region passed by client did not exist:" + region);
-      } else {
-        try {
-          region.put(decodedKey, decodedValue);
-          return RegionAPI.PutResponse.newBuilder().setSuccess(true).build();
-        } catch (ClassCastException ex) {
-          cache.getLogger()
-              .error("invalid key or value type for region " + regionName + ",passed key: "
-                  + entry.getKey().getEncodingType() + " value: "
-                  + entry.getValue().getEncodingType(), ex);
-        }
+      try {
+        region.put(decodedKey, decodedValue);
+        return ProtobufResponseUtilities.createPutResponse();
+      } catch (ClassCastException ex) {
+        return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+            "invalid key or value type for region " + regionName + ",passed key: "
+                + entry.getKey().getEncodingType() + " value: "
+                + entry.getValue().getEncodingType(),
+            logger, ex);
-      cache.getLogger().error("encoding not supported ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "encoding not supported ", logger, ex);
-      cache.getLogger().error("codec error in protobuf deserialization ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(true, false,
+          "codec error in protobuf deserialization ", logger, ex);
-    return RegionAPI.PutResponse.newBuilder().setSuccess(false).build();

MOV26 INS26 UPD40 UPD40 UPD40 INS40 UPD40 UPD74 INS23 UPD43 UPD43 INS83 INS83 INS43 INS59 UPD43 INS44 MOV8 UPD40 UPD40 INS42 INS42 INS32 UPD40 UPD43 MOV43 UPD42 MOV42 INS25 INS54 INS42 INS42 INS40 INS27 INS8 MOV43 MOV43 MOV8 INS12 INS12 INS32 INS40 INS41 UPD42 UPD42 INS41 INS60 MOV60 MOV60 MOV44 INS8 MOV44 INS8 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 MOV43 INS59 INS41 INS43 INS42 INS41 INS42 INS42 INS9 INS9 INS45 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS9 INS9 MOV27 INS42 INS33 INS42 INS32 INS32 MOV42 INS32 UPD45 UPD42 INS42 INS42 INS41 INS42 INS42 INS9 INS9 INS45 INS42 INS42 INS42 INS42 INS9 INS9 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV32 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS9 UPD42 DEL42 DEL44 DEL42 DEL32 DEL32 DEL21 DEL40 DEL42 DEL32 DEL9 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL40 DEL42 DEL32 DEL42 DEL9 DEL32 DEL42 DEL32 DEL41 DEL8