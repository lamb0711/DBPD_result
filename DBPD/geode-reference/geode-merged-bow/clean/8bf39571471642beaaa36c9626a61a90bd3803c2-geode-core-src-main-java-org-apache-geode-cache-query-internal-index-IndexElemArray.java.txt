Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A wrapper around an object array for storing values in index data structure
- * with minimal set of operations supported and the maximum size of 128 elements  
+ * A wrapper around an object array for storing values in index data structure with minimal set of
+ * operations supported and the maximum size of 128 elements
-   * Increases the capacity of this <tt>ArrayList</tt> instance, if necessary,
-   * to ensure that it can hold at least the number of elements specified by the
-   * minimum capacity argument.
+   * Increases the capacity of this <tt>ArrayList</tt> instance, if necessary, to ensure that it can
+   * hold at least the number of elements specified by the minimum capacity argument.
-   * @param minCapacity
-   *          the desired minimum capacity
+   * @param minCapacity the desired minimum capacity
-      System.arraycopy(this.elementData, 0, newElementData, 0,
-          this.elementData.length);
+      System.arraycopy(this.elementData, 0, newElementData, 0, this.elementData.length);
-   * Returns the number of elements in this list. (Warning: May not return
-   * correct size always, as remove operation is not atomic)
+   * Returns the number of elements in this list. (Warning: May not return correct size always, as
+   * remove operation is not atomic)
-   * Returns <tt>true</tt> if this list contains the specified element. More
-   * formally, returns <tt>true</tt> if and only if this list contains at least
-   * one element <tt>e</tt> such that
+   * Returns <tt>true</tt> if this list contains the specified element. More formally, returns
+   * <tt>true</tt> if and only if this list contains at least one element <tt>e</tt> such that
-   * @param o
-   *          element whose presence in this list is to be tested
+   * @param o element whose presence in this list is to be tested
-   * Returns the index of the first occurrence of the specified element in this
-   * list, or -1 if this list does not contain the element. More formally,
-   * returns the lowest index <tt>i</tt> such that
-   * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
-   * or -1 if there is no such index.
+   * Returns the index of the first occurrence of the specified element in this list, or -1 if this
+   * list does not contain the element. More formally, returns the lowest index <tt>i</tt> such that
+   * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>, or -1 if there is no
+   * such index.
-   * @param index
-   *          index of the element to return
+   * @param index index of the element to return
-   *          
+   * 
-   * Replaces the element at the specified position in this list with the
-   * specified element.
+   * Replaces the element at the specified position in this list with the specified element.
-   * @param index
-   *          index of the element to replace
-   * @param element
-   *          element to be stored at the specified position
+   * @param index index of the element to replace
+   * @param element element to be stored at the specified position
-   *           
+   * 
-   * Appends the specified element to the end of this array.
-   * If the array is full, creates a new array with 
-   * new capacity = old capacity + 5
+   * Appends the specified element to the end of this array. If the array is full, creates a new
+   * array with new capacity = old capacity + 5
-   * @param e
-   *          element to be appended to this list
+   * @param e element to be appended to this list
-   * Removes the first occurrence of the specified element from this list, if it
-   * is present. If the list does not contain the element, it is unchanged. More
-   * formally, removes the element with the lowest index <tt>i</tt> such that
-   * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
-   * (if such an element exists). Returns <tt>true</tt> if this list contained
-   * the specified element (or equivalently, if this list changed as a result of
-   * the call).
+   * Removes the first occurrence of the specified element from this list, if it is present. If the
+   * list does not contain the element, it is unchanged. More formally, removes the element with the
+   * lowest index <tt>i</tt> such that
+   * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt> (if such an element
+   * exists). Returns <tt>true</tt> if this list contained the specified element (or equivalently,
+   * if this list changed as a result of the call).
-   * @param o
-   *          element to be removed from this list, if present
+   * @param o element to be removed from this list, if present
-   * Private remove method that skips bounds checking and does not return the
-   * value removed.
+   * Private remove method that skips bounds checking and does not return the value removed.
-   * Removes all of the elements from this list. The list will be empty after
-   * this call returns.
+   * Removes all of the elements from this list. The list will be empty after this call returns.
-   * Checks if the given index is in range. If not, throws an appropriate
-   * runtime exception. This method does *not* check if the index is negative:
-   * It is always used immediately prior to an array access, which throws an
-   * ArrayIndexOutOfBoundsException if index is negative.
+   * Checks if the given index is in range. If not, throws an appropriate runtime exception. This
+   * method does *not* check if the index is negative: It is always used immediately prior to an
+   * array access, which throws an ArrayIndexOutOfBoundsException if index is negative.
-    
+
-     * Checks if the array has next element, stores reference to the current
-     * element and increments cursor. This is required since an element may be
-     * removed between hasNext() and next() method calls
+     * Checks if the array has next element, stores reference to the current element and increments
+     * cursor. This is required since an element may be removed between hasNext() and next() method
+     * calls
-     * Returns next element. But does not increment the cursor.
-     * Always use hasNext() before this method call
+     * Returns next element. But does not increment the cursor. Always use hasNext() before this
+     * method call
-        //return null;
+        // return null;
-      throw new UnsupportedOperationException(
-          "remove() method is not supported");
+      throw new UnsupportedOperationException("remove() method is not supported");
-    throw new UnsupportedOperationException(
-        "toArray(Object[] a) method is not supported");
+    throw new UnsupportedOperationException("toArray(Object[] a) method is not supported");
-    throw new UnsupportedOperationException(
-        "containsAll() method is not supported");
+    throw new UnsupportedOperationException("containsAll() method is not supported");
-    throw new UnsupportedOperationException(
-        "removeAll() method is not supported");
+    throw new UnsupportedOperationException("removeAll() method is not supported");
-    throw new UnsupportedOperationException(
-        "retainAll() method is not supported");
+    throw new UnsupportedOperationException("retainAll() method is not supported");
-  //for internal testing only
+  // for internal testing only

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66