GEODE-77: faster network-partition detection, bugfixes for auto-reconnect

network-partition-detection was taking too long to initiate.  This adds checks for IOExceptions to the Transport class to initiate member checks, shrinking the time to detect partitions.

There were still problems with auto-reconnect not being able to join while the old member ID was still in the view.  It would also sometimes install a view and think it had joined when it had not, causing other members to reject messages from the new "member" and resulting in a hung test.  GMSJoinLeave now rejects view messages that don't contain an appropriate member ID during the join process, and installView is smarter about what views it will accept as well.

The view creator was being stubborn about exiting during shutdown.  I've added additional checks to it so that it won't accidentally create another view when GMSJoinLeave is in the process of stopping.

+import java.io.IOException;
+import java.io.InterruptedIOException;
+import java.net.SocketException;
+import org.jgroups.Address;
+import org.jgroups.Message;
+import org.jgroups.util.Util;
-  public static final String PRECIOUS_THREAD_NAME_PREFIX = "Geode UDP";
+  public static final String THREAD_POOL_NAME_PREFIX = "Geode UDP";
+  
+  private JGroupsMessenger messenger;
+  
+  public void setMessenger(JGroupsMessenger m) {
+    messenger = m;
+  }
+  /*
+   * (non-Javadoc)
+   * copied from JGroups to perform Geode-specific error handling when there
+   * is a network partition
+   * @see org.jgroups.protocols.TP#_send(org.jgroups.Message, org.jgroups.Address)
+   */
+  @Override
+  protected void _send(Message msg, Address dest) {
+    try {
+        send(msg, dest);
+    }
+    catch(InterruptedIOException iex) {
+    }
+    catch(InterruptedException interruptedEx) {
+        Thread.currentThread().interrupt(); // let someone else handle the interrupt
+    }
+    catch(SocketException e) {
+      log.error("Exception caught while sending message", e);
+//        log.trace(Util.getMessage("SendFailure"),
+//                  local_addr, (dest == null? "cluster" : dest), msg.size(), e.toString(), msg.printHeaders());
+    }
+    catch (IOException e) {
+      if (messenger != null
+          /*&& e.getMessage().contains("Operation not permitted")*/) { // this is the english Oracle JDK exception condition we really want to catch
+        messenger.handleJGroupsIOException(e, msg, dest);
+      }
+    }
+    catch(Throwable e) {
+        log.error("Exception caught while sending message", e);
+//        Util.getMessage("SendFailure"),
+//                  local_addr, (dest == null? "cluster" : dest), msg.size(), e.toString(), msg.printHeaders());
+    }
+}
-    timer_thread_factory=new LazyThreadFactory(PRECIOUS_THREAD_NAME_PREFIX + " Timer", true, true);
-    default_thread_factory=new DefaultThreadFactory(PRECIOUS_THREAD_NAME_PREFIX + " Incoming", true, true);
-    oob_thread_factory=new DefaultThreadFactory(PRECIOUS_THREAD_NAME_PREFIX + " OOB", true, true);
-    internal_thread_factory=new DefaultThreadFactory(PRECIOUS_THREAD_NAME_PREFIX + " INT", true, true);
+    timer_thread_factory=new LazyThreadFactory(THREAD_POOL_NAME_PREFIX + " Timer", true, true);
+    default_thread_factory=new DefaultThreadFactory(THREAD_POOL_NAME_PREFIX + " Incoming", true, true);
+    oob_thread_factory=new DefaultThreadFactory(THREAD_POOL_NAME_PREFIX + " OOB", true, true);
+    internal_thread_factory=new DefaultThreadFactory(THREAD_POOL_NAME_PREFIX + " INT", true, true);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS54 INS42 INS7 INS42 INS42 INS8 INS12 INS12 INS12 INS12 INS12 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS32 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS25 INS43 INS42 INS21 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS8 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42