GEODE-2644: Cleanup RuntimeDistributionConfigImpl (#2544)


-
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.logging.LogService;
- * Provides an implementation of <code>DistributionConfig</code> that is used at runtime by a
- * {@link InternalDistributedSystem}. It allows for dynamic reconfig of the app the owns it.
+ * Provides an implementation of {@code DistributionConfig} that is used at runtime by an
+ * {@link InternalDistributedSystem}. It allows for dynamic reconfiguration of the app that owns it.
- * The attribute settor methods in this class all assume that they are being called at runtime. If
+ * The attribute setter methods in this class all assume that they are being called at runtime. If
- *
-  private static final long serialVersionUID = -805637520096606113L;
-  private final transient InternalDistributedSystem ds;
+  private static final Logger logger = LogService.getLogger();
-  ////////////////////// Constructors //////////////////////
+  private static final long serialVersionUID = -805637520096606113L;
+
+  private final transient InternalDistributedSystem system;
-   * Create a new <code>RuntimeDistributionConfigImpl</code> from the contents of another
-   * <code>DistributionConfig</code>.
+   * Create a new {@code RuntimeDistributionConfigImpl} from the contents of another
+   * {@code DistributionConfig}.
-  public RuntimeDistributionConfigImpl(InternalDistributedSystem ds) {
-    super(ds.getOriginalConfig());
-    this.ds = ds;
-    this.modifiable = false;
+  public RuntimeDistributionConfigImpl(InternalDistributedSystem system) {
+    super(system.getOriginalConfig());
+    this.system = system;
+    modifiable = false;
-  //////////////////// Configuration Methods ////////////////////
-    this.logLevel = (Integer) checkAttribute(LOG_LEVEL, value);
+    logLevel = (Integer) checkAttribute(LOG_LEVEL, value);
-    this.ds.getInternalLogWriter().setLogWriterLevel(value);
+    system.getInternalLogWriter().setLogWriterLevel(value);
-  public void setStatisticSamplingEnabled(boolean value) {
-    this.statisticSamplingEnabled = (Boolean) checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
+  public void setStatisticSamplingEnabled(boolean newValue) {
+    statisticSamplingEnabled = (Boolean) checkAttribute(STATISTIC_SAMPLING_ENABLED, newValue);
-      this.ds.getLogWriter()
-          .info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE
-              + " instead of the requested " + value
-              + " because VSD does not work with sub-second sampling.");
+      logger.info(
+          "Setting statistic-sample-rate to {} instead of the requested {} because VSD does not work with sub-second sampling.",
+          DEFAULT_STATISTIC_SAMPLE_RATE, value);
-    this.statisticSampleRate = value;
+    statisticSampleRate = value;
-      this.ds.getStatSampler().changeArchive(value);
+      system.getStatSampler().changeArchive(value);
-    this.statisticArchiveFile = value;
+    statisticArchiveFile = value;
-
-    this.archiveDiskSpaceLimit = (Integer) checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
+    archiveDiskSpaceLimit = (Integer) checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
-    this.archiveFileSizeLimit = (Integer) checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
+    archiveFileSizeLimit = (Integer) checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
-    this.logDiskSpaceLimit = (Integer) checkAttribute(LOG_DISK_SPACE_LIMIT, value);
+    logDiskSpaceLimit = (Integer) checkAttribute(LOG_DISK_SPACE_LIMIT, value);
-    this.logFileSizeLimit = (Integer) checkAttribute(LOG_FILE_SIZE_LIMIT, value);
+    logFileSizeLimit = (Integer) checkAttribute(LOG_FILE_SIZE_LIMIT, value);
-  public DistributionConfig takeSnapshot() {
-    return new DistributionConfigSnapshot(this);
-  }
-
-  };
+  }
+
+  public DistributionConfig takeSnapshot() {
+    return new DistributionConfigSnapshot(this);
+  }

INS26 INS26 MOV31 INS40 INS40 INS23 INS83 INS83 INS83 INS43 INS59 UPD66 INS65 INS66 UPD66 UPD66 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS66 INS42 INS42 INS66 INS65 UPD66 INS65 INS66 INS66 UPD66 MOV66 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV42 INS45 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22