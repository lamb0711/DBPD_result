Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.io.*;
+// import java.io.*;
- * This class maintains statistics in GemFire about the distribution
- * manager and distribution in general.
+ * This class maintains statistics in GemFire about the distribution manager and distribution in
+ * general.
-  
+
-  //////////////////  Statistic "Id" Fields  //////////////////
+  ////////////////// Statistic "Id" Fields //////////////////
-  
+
-  
-  //For GMSHealthMonitor
-  private final static int heartbeatRequestsSentId;  
-  private final static int heartbeatRequestsReceivedId;  
-  private final static int heartbeatsSentId;  
-  private final static int heartbeatsReceivedId;  
-  private final static int suspectsSentId;  
+
+  // For GMSHealthMonitor
+  private final static int heartbeatRequestsSentId;
+  private final static int heartbeatRequestsReceivedId;
+  private final static int heartbeatsSentId;
+  private final static int heartbeatsReceivedId;
+  private final static int suspectsSentId;
-  private final static int finalCheckRequestsSentId;  
-  private final static int finalCheckRequestsReceivedId;  
-  private final static int finalCheckResponsesSentId;  
-  private final static int finalCheckResponsesReceivedId;  
-  private final static int tcpFinalCheckRequestsSentId; 
-  private final static int tcpFinalCheckRequestsReceivedId;  
-  private final static int tcpFinalCheckResponsesSentId;  
+  private final static int finalCheckRequestsSentId;
+  private final static int finalCheckRequestsReceivedId;
+  private final static int finalCheckResponsesSentId;
+  private final static int finalCheckResponsesReceivedId;
+  private final static int tcpFinalCheckRequestsSentId;
+  private final static int tcpFinalCheckRequestsReceivedId;
+  private final static int tcpFinalCheckResponsesSentId;
-    final String sentMessagesDesc = "The number of distribution messages that this GemFire system has sent. This includes broadcastMessages.";
-    final String sentCommitMessagesDesc = "The number of transaction commit messages that this GemFire system has created to be sent. Note that it is possible for a commit to only create one message even though it will end up being sent to multiple recipients.";
-    final String commitWaitsDesc = "The number of transaction commits that had to wait for a response before they could complete.";
-    final String sentMessagesTimeDesc = "The total amount of time this distribution manager has spent sending messages. This includes broadcastMessagesTime.";
-    final String sentMessagesMaxTimeDesc = "The highest amount of time this distribution manager has spent distributing a single message to the network.";
-    final String broadcastMessagesDesc = "The number of distribution messages that this GemFire system has broadcast. A broadcast message is one sent to every other manager in the group.";
-    final String broadcastMessagesTimeDesc = "The total amount of time this distribution manager has spent broadcasting messages. A broadcast message is one sent to every other manager in the group.";
-    final String receivedMessagesDesc = "The number of distribution messages that this GemFire system has received.";
-    final String receivedBytesDesc = "The number of distribution message bytes that this GemFire system has received.";
-    final String sentBytesDesc = "The number of distribution message bytes that this GemFire system has sent.";
-    final String processedMessagesDesc = "The number of distribution messages that this GemFire system has processed.";
-    final String processedMessagesTimeDesc = "The amount of time this distribution manager has spent in message.process().";
-    final String messageProcessingScheduleTimeDesc = "The amount of time this distribution manager has spent dispatching message to processor threads.";
-    final String overflowQueueSizeDesc = "The number of normal distribution messages currently waiting to be processed.";
-    final String waitingQueueSizeDesc = "The number of distribution messages currently waiting for some other resource before they can be processed.";
-    final String overflowQueueThrottleTimeDesc = "The total amount of time, in nanoseconds, spent delayed by the overflow queue throttle.";
-    final String overflowQueueThrottleCountDesc = "The total number of times a thread was delayed in adding a normal message to the overflow queue.";
-    final String highPriorityQueueSizeDesc = "The number of high priority distribution messages currently waiting to be processed.";
-    final String highPriorityQueueThrottleTimeDesc = "The total amount of time, in nanoseconds, spent delayed by the high priority queue throttle.";
-    final String highPriorityQueueThrottleCountDesc = "The total number of times a thread was delayed in adding a normal message to the high priority queue.";
-    final String serialQueueSizeDesc = "The number of serial distribution messages currently waiting to be processed.";
-    final String serialQueueBytesDesc = "The approximate number of bytes consumed by serial distribution messages currently waiting to be processed.";
-    final String serialPooledThreadDesc = "The number of threads created in the SerialQueuedExecutorPool.";
-    final String serialQueueThrottleTimeDesc = "The total amount of time, in nanoseconds, spent delayed by the serial queue throttle.";
-    final String serialQueueThrottleCountDesc = "The total number of times a thread was delayed in adding a ordered message to the serial queue.";
-    final String serialThreadsDesc = "The number of threads currently processing serial/ordered messages.";
-    final String processingThreadsDesc = "The number of threads currently processing normal messages.";
-    final String highPriorityThreadsDesc = "The number of threads currently processing high priority messages.";
-    final String partitionedRegionThreadsDesc = "The number of threads currently processing partitioned region messages.";
-    final String functionExecutionThreadsDesc = "The number of threads currently processing function execution messages.";
-    final String waitingThreadsDesc = "The number of threads currently processing messages that had to wait for a resource.";
-    final String messageChannelTimeDesc = "The total amount of time received messages spent in the distribution channel";
-    final String udpDispatchRequestTimeDesc = "The total amount of time spent deserializing and dispatching UDP messages in the message-reader thread.";
-    final String replyMessageTimeDesc = "The amount of time spent processing reply messages. This includes both processedMessagesTime and messageProcessingScheduleTime.";
-    final String distributeMessageTimeDesc = "The amount of time it takes to prepare a message and send it on the network.  This includes sentMessagesTime.";
+    final String sentMessagesDesc =
+        "The number of distribution messages that this GemFire system has sent. This includes broadcastMessages.";
+    final String sentCommitMessagesDesc =
+        "The number of transaction commit messages that this GemFire system has created to be sent. Note that it is possible for a commit to only create one message even though it will end up being sent to multiple recipients.";
+    final String commitWaitsDesc =
+        "The number of transaction commits that had to wait for a response before they could complete.";
+    final String sentMessagesTimeDesc =
+        "The total amount of time this distribution manager has spent sending messages. This includes broadcastMessagesTime.";
+    final String sentMessagesMaxTimeDesc =
+        "The highest amount of time this distribution manager has spent distributing a single message to the network.";
+    final String broadcastMessagesDesc =
+        "The number of distribution messages that this GemFire system has broadcast. A broadcast message is one sent to every other manager in the group.";
+    final String broadcastMessagesTimeDesc =
+        "The total amount of time this distribution manager has spent broadcasting messages. A broadcast message is one sent to every other manager in the group.";
+    final String receivedMessagesDesc =
+        "The number of distribution messages that this GemFire system has received.";
+    final String receivedBytesDesc =
+        "The number of distribution message bytes that this GemFire system has received.";
+    final String sentBytesDesc =
+        "The number of distribution message bytes that this GemFire system has sent.";
+    final String processedMessagesDesc =
+        "The number of distribution messages that this GemFire system has processed.";
+    final String processedMessagesTimeDesc =
+        "The amount of time this distribution manager has spent in message.process().";
+    final String messageProcessingScheduleTimeDesc =
+        "The amount of time this distribution manager has spent dispatching message to processor threads.";
+    final String overflowQueueSizeDesc =
+        "The number of normal distribution messages currently waiting to be processed.";
+    final String waitingQueueSizeDesc =
+        "The number of distribution messages currently waiting for some other resource before they can be processed.";
+    final String overflowQueueThrottleTimeDesc =
+        "The total amount of time, in nanoseconds, spent delayed by the overflow queue throttle.";
+    final String overflowQueueThrottleCountDesc =
+        "The total number of times a thread was delayed in adding a normal message to the overflow queue.";
+    final String highPriorityQueueSizeDesc =
+        "The number of high priority distribution messages currently waiting to be processed.";
+    final String highPriorityQueueThrottleTimeDesc =
+        "The total amount of time, in nanoseconds, spent delayed by the high priority queue throttle.";
+    final String highPriorityQueueThrottleCountDesc =
+        "The total number of times a thread was delayed in adding a normal message to the high priority queue.";
+    final String serialQueueSizeDesc =
+        "The number of serial distribution messages currently waiting to be processed.";
+    final String serialQueueBytesDesc =
+        "The approximate number of bytes consumed by serial distribution messages currently waiting to be processed.";
+    final String serialPooledThreadDesc =
+        "The number of threads created in the SerialQueuedExecutorPool.";
+    final String serialQueueThrottleTimeDesc =
+        "The total amount of time, in nanoseconds, spent delayed by the serial queue throttle.";
+    final String serialQueueThrottleCountDesc =
+        "The total number of times a thread was delayed in adding a ordered message to the serial queue.";
+    final String serialThreadsDesc =
+        "The number of threads currently processing serial/ordered messages.";
+    final String processingThreadsDesc =
+        "The number of threads currently processing normal messages.";
+    final String highPriorityThreadsDesc =
+        "The number of threads currently processing high priority messages.";
+    final String partitionedRegionThreadsDesc =
+        "The number of threads currently processing partitioned region messages.";
+    final String functionExecutionThreadsDesc =
+        "The number of threads currently processing function execution messages.";
+    final String waitingThreadsDesc =
+        "The number of threads currently processing messages that had to wait for a resource.";
+    final String messageChannelTimeDesc =
+        "The total amount of time received messages spent in the distribution channel";
+    final String udpDispatchRequestTimeDesc =
+        "The total amount of time spent deserializing and dispatching UDP messages in the message-reader thread.";
+    final String replyMessageTimeDesc =
+        "The amount of time spent processing reply messages. This includes both processedMessagesTime and messageProcessingScheduleTime.";
+    final String distributeMessageTimeDesc =
+        "The amount of time it takes to prepare a message and send it on the network.  This includes sentMessagesTime.";
-    final String replyWaitsCompletedDesc = "Total number of times waits for a reply have completed.";
+    final String replyWaitsCompletedDesc =
+        "Total number of times waits for a reply have completed.";
-    final String replyWaitMaxTimeDesc = "Maximum time spent transmitting and then waiting for a reply to a message. See sentMessagesMaxTime for related information";
-    final String replyTimeoutsDesc =
-      "Total number of message replies that have timed out.";
+    final String replyWaitMaxTimeDesc =
+        "Maximum time spent transmitting and then waiting for a reply to a message. See sentMessagesMaxTime for related information";
+    final String replyTimeoutsDesc = "Total number of message replies that have timed out.";
-      "Current number of sockets dedicated to receiving messages.";
+        "Current number of sockets dedicated to receiving messages.";
-      "Total number of times an accept (receiver creation) of a connect from some other member has failed";
+        "Total number of times an accept (receiver creation) of a connect from some other member has failed";
-      "Total number of times a connect (sender creation) to some other member has failed.";
+        "Total number of times a connect (sender creation) to some other member has failed.";
-      "Total number of times an established connection was lost and a reconnect was attempted.";
+        "Total number of times an established connection was lost and a reconnect was attempted.";
-      "Total number of times an unshared sender socket has remained idle long enough that its lease expired.";
+        "Total number of times an unshared sender socket has remained idle long enough that its lease expired.";
-      "Current number of shared sockets dedicated to sending ordered messages.";
+        "Current number of shared sockets dedicated to sending ordered messages.";
-      "Current number of shared sockets dedicated to sending unordered messages.";
+        "Current number of shared sockets dedicated to sending unordered messages.";
-      "Current number of thread sockets dedicated to sending ordered messages.";
+        "Current number of thread sockets dedicated to sending ordered messages.";
-      "Current number of thread sockets dedicated to sending unordered messages.";
+        "Current number of thread sockets dedicated to sending unordered messages.";
-    final String asyncQueueFlushesInProgressDesc = "Current number of asynchronous queues being flushed.";
-    final String asyncQueueFlushesCompletedDesc = "Total number of asynchronous queue flushes completed.";
+    final String asyncQueueFlushesInProgressDesc =
+        "Current number of asynchronous queues being flushed.";
+    final String asyncQueueFlushesCompletedDesc =
+        "Total number of asynchronous queue flushes completed.";
-    final String asyncQueueTimeoutExceededDesc = "Total number of asynchronous queues that have timed out by being blocked for more than async-queue-timeout milliseconds.";
-    final String asyncQueueSizeExceededDesc = "Total number of asynchronous queues that have exceeded max size.";
-    final String asyncDistributionTimeoutExceededDesc = "Total number of times the async-distribution-timeout has been exceeded during a socket write.";
+    final String asyncQueueTimeoutExceededDesc =
+        "Total number of asynchronous queues that have timed out by being blocked for more than async-queue-timeout milliseconds.";
+    final String asyncQueueSizeExceededDesc =
+        "Total number of asynchronous queues that have exceeded max size.";
+    final String asyncDistributionTimeoutExceededDesc =
+        "Total number of times the async-distribution-timeout has been exceeded during a socket write.";
-    final String asyncQueuedMsgsDesc = "The total number of queued messages used for asynchronous queues.";
-    final String asyncDequeuedMsgsDesc = "The total number of queued messages that have been removed from the queue and successfully sent.";
-    final String asyncConflatedMsgsDesc = "The total number of queued conflated messages used for asynchronous queues.";
+    final String asyncQueuedMsgsDesc =
+        "The total number of queued messages used for asynchronous queues.";
+    final String asyncDequeuedMsgsDesc =
+        "The total number of queued messages that have been removed from the queue and successfully sent.";
+    final String asyncConflatedMsgsDesc =
+        "The total number of queued conflated messages used for asynchronous queues.";
-    final String asyncThreadInProgressDesc = "Current iterations of work performed by asynchronous message queue threads.";
-    final String asyncThreadCompletedDesc = "Total number of iterations of work performed by asynchronous message queue threads.";
-    final String asyncThreadTimeDesc = "Total time spent by asynchronous message queue threads performing iterations.";
-    final String receiverDirectBufferSizeDesc = "Current number of bytes allocated from direct memory as buffers for incoming messages.";
-    final String receiverHeapBufferSizeDesc = "Current number of bytes allocated from Java heap memory as buffers for incoming messages.";
-    final String senderDirectBufferSizeDesc = "Current number of bytes allocated from direct memory as buffers for outgoing messages.";
-    final String senderHeapBufferSizeDesc = "Current number of bytes allocated from Java heap memory as buffers for outoing messages.";
+    final String asyncThreadInProgressDesc =
+        "Current iterations of work performed by asynchronous message queue threads.";
+    final String asyncThreadCompletedDesc =
+        "Total number of iterations of work performed by asynchronous message queue threads.";
+    final String asyncThreadTimeDesc =
+        "Total time spent by asynchronous message queue threads performing iterations.";
+    final String receiverDirectBufferSizeDesc =
+        "Current number of bytes allocated from direct memory as buffers for incoming messages.";
+    final String receiverHeapBufferSizeDesc =
+        "Current number of bytes allocated from Java heap memory as buffers for incoming messages.";
+    final String senderDirectBufferSizeDesc =
+        "Current number of bytes allocated from direct memory as buffers for outgoing messages.";
+    final String senderHeapBufferSizeDesc =
+        "Current number of bytes allocated from Java heap memory as buffers for outoing messages.";
-    final String replyHandoffTimeDesc = "Total number of seconds to switch thread contexts from processing thread to application thread.";
+    final String replyHandoffTimeDesc =
+        "Total number of seconds to switch thread contexts from processing thread to application thread.";
-    final String partitionedRegionThreadJobsDesc = "The number of messages currently being processed by partitioned region threads";
-    final String functionExecutionThreadJobsDesc = "The number of messages currently being processed by function execution threads";
+    final String partitionedRegionThreadJobsDesc =
+        "The number of messages currently being processed by partitioned region threads";
+    final String functionExecutionThreadJobsDesc =
+        "The number of messages currently being processed by function execution threads";
-    final String serialThreadJobsDesc = "The number of messages currently being processed by serial threads.";
-    final String viewThreadJobsDesc = "The number of messages currently being processed by view threads.";
-    final String serialPooledThreadJobsDesc = "The number of messages currently being processed by pooled serial processor threads.";
-    final String processingThreadJobsDesc = "The number of messages currently being processed by pooled message processor threads.";
-    final String highPriorityThreadJobsDesc = "The number of messages currently being processed by high priority processor threads.";
-    final String waitingThreadJobsDesc = "The number of messages currently being processed by waiting pooly processor threads.";
+    final String serialThreadJobsDesc =
+        "The number of messages currently being processed by serial threads.";
+    final String viewThreadJobsDesc =
+        "The number of messages currently being processed by view threads.";
+    final String serialPooledThreadJobsDesc =
+        "The number of messages currently being processed by pooled serial processor threads.";
+    final String processingThreadJobsDesc =
+        "The number of messages currently being processed by pooled message processor threads.";
+    final String highPriorityThreadJobsDesc =
+        "The number of messages currently being processed by high priority processor threads.";
+    final String waitingThreadJobsDesc =
+        "The number of messages currently being processed by waiting pooly processor threads.";
-    final String initialImageMessagesInFlightDesc = "The number of messages with initial image data sent from this member that have not yet been acknowledged.";
-    final String initialImageRequestsInProgressDesc = "The number of initial images this member is currently receiving.";
+    final String initialImageMessagesInFlightDesc =
+        "The number of messages with initial image data sent from this member that have not yet been acknowledged.";
+    final String initialImageRequestsInProgressDesc =
+        "The number of initial images this member is currently receiving.";
-    //For GMSHealthMonitor
-    final String heartbeatRequestsSentDesc = "Heartbeat request messages that this member has sent.";
-    final String heartbeatRequestsReceivedDesc = "Heartbeat request messages that this member has received.";
-    
+    // For GMSHealthMonitor
+    final String heartbeatRequestsSentDesc =
+        "Heartbeat request messages that this member has sent.";
+    final String heartbeatRequestsReceivedDesc =
+        "Heartbeat request messages that this member has received.";
+
-    
+
-    
-    final String finalCheckRequestsSentDesc = "Final check requests that this member has sent.";
-    final String finalCheckRequestsReceivedDesc = "Final check requests that this member has received.";
-    
-    final String finalCheckResponsesSentDesc = "Final check responses that this member has sent.";
-    final String finalCheckResponsesReceivedDesc = "Final check responses that this member has received.";    
-    
-    final String tcpFinalCheckRequestsSentDesc = "TCP final check requests that this member has sent.";
-    final String tcpFinalCheckRequestsReceivedDesc = "TCP final check requests that this member has received.";
-    
-    final String tcpFinalCheckResponsesSentDesc = "TCP final check responses that this member has sent.";
-    final String tcpFinalCheckResponsesReceivedDesc = "TCP final check responses that this member has received.";
-    final String udpFinalCheckRequestsSentDesc = "UDP final check requests that this member has sent.";
-    final String udpFinalCheckRequestsReceivedDesc = "UDP final check requests that this member has received.";
-    
-    final String udpFinalCheckResponsesSentDesc = "UDP final check responses that this member has sent.";
-    final String udpFinalCheckResponsesReceivedDesc = "UDP final check responses that this member has received.";
+    final String finalCheckRequestsSentDesc = "Final check requests that this member has sent.";
+    final String finalCheckRequestsReceivedDesc =
+        "Final check requests that this member has received.";
+
+    final String finalCheckResponsesSentDesc = "Final check responses that this member has sent.";
+    final String finalCheckResponsesReceivedDesc =
+        "Final check responses that this member has received.";
+
+    final String tcpFinalCheckRequestsSentDesc =
+        "TCP final check requests that this member has sent.";
+    final String tcpFinalCheckRequestsReceivedDesc =
+        "TCP final check requests that this member has received.";
+
+    final String tcpFinalCheckResponsesSentDesc =
+        "TCP final check responses that this member has sent.";
+    final String tcpFinalCheckResponsesReceivedDesc =
+        "TCP final check responses that this member has received.";
+
+    final String udpFinalCheckRequestsSentDesc =
+        "UDP final check requests that this member has sent.";
+    final String udpFinalCheckRequestsReceivedDesc =
+        "UDP final check requests that this member has received.";
+
+    final String udpFinalCheckResponsesSentDesc =
+        "UDP final check responses that this member has sent.";
+    final String udpFinalCheckResponsesReceivedDesc =
+        "UDP final check responses that this member has received.";
-    type = f.createType(
-      statName,
-      statDescription,
-      new StatisticDescriptor[] {
+    type = f.createType(statName, statDescription, new StatisticDescriptor[] {
-        f.createLongCounter("broadcastMessagesTime", broadcastMessagesTimeDesc, "nanoseconds", false),
+        f.createLongCounter("broadcastMessagesTime", broadcastMessagesTimeDesc, "nanoseconds",
+            false),
-        f.createLongCounter("processedMessagesTime", processedMessagesTimeDesc, "nanoseconds", false),
-        f.createLongCounter("messageProcessingScheduleTime", messageProcessingScheduleTimeDesc, "nanoseconds", false),
+        f.createLongCounter("processedMessagesTime", processedMessagesTimeDesc, "nanoseconds",
+            false),
+        f.createLongCounter("messageProcessingScheduleTime", messageProcessingScheduleTimeDesc,
+            "nanoseconds", false),
-        f.createLongCounter("overflowQueueThrottleTime", overflowQueueThrottleTimeDesc, "nanoseconds", false),
+        f.createLongCounter("overflowQueueThrottleTime", overflowQueueThrottleTimeDesc,
+            "nanoseconds", false),
-        f.createIntGauge("highPriorityQueueThrottleCount", highPriorityQueueThrottleCountDesc, "delays"),
-        f.createLongCounter("highPriorityQueueThrottleTime", highPriorityQueueThrottleTimeDesc, "nanoseconds", false),
+        f.createIntGauge("highPriorityQueueThrottleCount", highPriorityQueueThrottleCountDesc,
+            "delays"),
+        f.createLongCounter("highPriorityQueueThrottleTime", highPriorityQueueThrottleTimeDesc,
+            "nanoseconds", false),
-        f.createIntGauge("partitionedRegionQueueThrottleCount", highPriorityQueueThrottleCountDesc, "delays"),
-        f.createLongCounter("partitionedRegionQueueThrottleTime", highPriorityQueueThrottleTimeDesc, "nanoseconds", false),
+        f.createIntGauge("partitionedRegionQueueThrottleCount", highPriorityQueueThrottleCountDesc,
+            "delays"),
+        f.createLongCounter("partitionedRegionQueueThrottleTime", highPriorityQueueThrottleTimeDesc,
+            "nanoseconds", false),
-        f.createIntGauge("functionExecutionQueueThrottleCount", highPriorityQueueThrottleCountDesc, "delays"),
-        f.createLongCounter("functionExecutionQueueThrottleTime", highPriorityQueueThrottleTimeDesc, "nanoseconds", false),
+        f.createIntGauge("functionExecutionQueueThrottleCount", highPriorityQueueThrottleCountDesc,
+            "delays"),
+        f.createLongCounter("functionExecutionQueueThrottleTime", highPriorityQueueThrottleTimeDesc,
+            "nanoseconds", false),
-        f.createLongCounter("serialQueueThrottleTime", serialQueueThrottleTimeDesc, "nanoseconds", false),
+        f.createLongCounter("serialQueueThrottleTime", serialQueueThrottleTimeDesc, "nanoseconds",
+            false),
-        f.createLongCounter("udpDispatchRequestTime", udpDispatchRequestTimeDesc, "nanoseconds", false),
+        f.createLongCounter("udpDispatchRequestTime", udpDispatchRequestTimeDesc, "nanoseconds",
+            false),
-        f.createLongCounter("distributeMessageTime", distributeMessageTimeDesc, "nanoseconds", false),
+        f.createLongCounter("distributeMessageTime", distributeMessageTimeDesc, "nanoseconds",
+            false),
-        f.createIntGauge("syncSocketWritesInProgress", "Current number of synchronous/blocking socket write calls in progress.", "writes"),
-        f.createLongCounter("syncSocketWriteTime", "Total amount of time, in nanoseconds, spent in synchronous/blocking socket write calls.", "nanoseconds"),
-        f.createIntCounter("syncSocketWrites", "Total number of completed synchronous/blocking socket write calls.", "writes"),
-        f.createLongCounter("syncSocketWriteBytes", "Total number of bytes sent out in synchronous/blocking mode on sockets.", "bytes"),
+        f.createIntGauge("syncSocketWritesInProgress",
+            "Current number of synchronous/blocking socket write calls in progress.", "writes"),
+        f.createLongCounter("syncSocketWriteTime",
+            "Total amount of time, in nanoseconds, spent in synchronous/blocking socket write calls.",
+            "nanoseconds"),
+        f.createIntCounter("syncSocketWrites",
+            "Total number of completed synchronous/blocking socket write calls.", "writes"),
+        f.createLongCounter("syncSocketWriteBytes",
+            "Total number of bytes sent out in synchronous/blocking mode on sockets.", "bytes"),
-        f.createLongCounter("ucastReadBytes", "Total number of bytes received in unicast datagrams", "bytes"),
-        f.createIntCounter("ucastWrites", "Total number of unicast datagram socket write calls.", "writes"),
-        f.createLongCounter("ucastWriteBytes", "Total number of bytes sent out on unicast datagram sockets.", "bytes"),
-        f.createIntCounter("ucastRetransmits", "Total number of unicast datagram socket retransmissions", "writes"),
+        f.createLongCounter("ucastReadBytes", "Total number of bytes received in unicast datagrams",
+            "bytes"),
+        f.createIntCounter("ucastWrites", "Total number of unicast datagram socket write calls.",
+            "writes"),
+        f.createLongCounter("ucastWriteBytes",
+            "Total number of bytes sent out on unicast datagram sockets.", "bytes"),
+        f.createIntCounter("ucastRetransmits",
+            "Total number of unicast datagram socket retransmissions", "writes"),
-        f.createIntCounter("mcastReads", "Total number of multicast datagrams received", "datagrams"),
-        f.createLongCounter("mcastReadBytes", "Total number of bytes received in multicast datagrams", "bytes"),
-        f.createIntCounter("mcastWrites", "Total number of multicast datagram socket write calls.", "writes"),
-        f.createLongCounter("mcastWriteBytes", "Total number of bytes sent out on multicast datagram sockets.", "bytes"),
-        f.createIntCounter("mcastRetransmits", "Total number of multicast datagram socket retransmissions", "writes"),
-        f.createIntCounter("mcastRetransmitRequests", "Total number of multicast datagram socket retransmission requests sent to other processes", "requests"),
+        f.createIntCounter("mcastReads", "Total number of multicast datagrams received",
+            "datagrams"),
+        f.createLongCounter("mcastReadBytes",
+            "Total number of bytes received in multicast datagrams", "bytes"),
+        f.createIntCounter("mcastWrites", "Total number of multicast datagram socket write calls.",
+            "writes"),
+        f.createLongCounter("mcastWriteBytes",
+            "Total number of bytes sent out on multicast datagram sockets.", "bytes"),
+        f.createIntCounter("mcastRetransmits",
+            "Total number of multicast datagram socket retransmissions", "writes"),
+        f.createIntCounter("mcastRetransmitRequests",
+            "Total number of multicast datagram socket retransmission requests sent to other processes",
+            "requests"),
-        f.createLongCounter("serializationTime", "Total amount of time, in nanoseconds, spent serializing objects. This includes pdx serializations.", "nanoseconds"),
-        f.createIntCounter("serializations", "Total number of object serialization calls. This includes pdx serializations.", "ops"),
-        f.createLongCounter("serializedBytes", "Total number of bytes produced by object serialization. This includes pdx serializations.", "bytes"),
+        f.createLongCounter("serializationTime",
+            "Total amount of time, in nanoseconds, spent serializing objects. This includes pdx serializations.",
+            "nanoseconds"),
+        f.createIntCounter("serializations",
+            "Total number of object serialization calls. This includes pdx serializations.", "ops"),
+        f.createLongCounter("serializedBytes",
+            "Total number of bytes produced by object serialization. This includes pdx serializations.",
+            "bytes"),
-        f.createLongCounter("pdxSerializedBytes", "Total number of bytes produced by pdx serialization.", "bytes"),
-        f.createLongCounter("deserializationTime", "Total amount of time, in nanoseconds, spent deserializing objects. This includes deserialization that results in a PdxInstance.", "nanoseconds"),
-        f.createIntCounter("deserializations", "Total number of object deserialization calls. This includes deserialization that results in a PdxInstance.", "ops"),
-        f.createLongCounter("deserializedBytes", "Total number of bytes read by object deserialization. This includes deserialization that results in a PdxInstance.", "bytes"),
+        f.createLongCounter("pdxSerializedBytes",
+            "Total number of bytes produced by pdx serialization.", "bytes"),
+        f.createLongCounter("deserializationTime",
+            "Total amount of time, in nanoseconds, spent deserializing objects. This includes deserialization that results in a PdxInstance.",
+            "nanoseconds"),
+        f.createIntCounter("deserializations",
+            "Total number of object deserialization calls. This includes deserialization that results in a PdxInstance.",
+            "ops"),
+        f.createLongCounter("deserializedBytes",
+            "Total number of bytes read by object deserialization. This includes deserialization that results in a PdxInstance.",
+            "bytes"),
-        f.createLongCounter("pdxDeserializedBytes", "Total number of bytes read by pdx deserialization.", "bytes"),
-        f.createLongCounter("msgSerializationTime", "Total amount of time, in nanoseconds, spent serializing messages.", "nanoseconds"),
-        f.createLongCounter("msgDeserializationTime", "Total amount of time, in nanoseconds, spent deserializing messages.", "nanoseconds"),
-        f.createLongCounter("udpMsgEncryptionTime", "Total amount of time, in nanoseconds, spent encrypting udp messages.", "nanoseconds"),
-        f.createLongCounter("udpMsgDecryptionTime", "Total amount of time, in nanoseconds, spent decrypting udp messages.", "nanoseconds"),
-        f.createIntCounter("pdxInstanceDeserializations", "Total number of times getObject has been called on a PdxInstance.", "ops"),
-        f.createLongCounter("pdxInstanceDeserializationTime", "Total amount of time, in nanoseconds, spent deserializing PdxInstances by calling getObject.", "nanoseconds"),
-        f.createIntCounter("pdxInstanceCreations", "Total number of times a deserialization created a PdxInstance.", "ops"),
+        f.createLongCounter("pdxDeserializedBytes",
+            "Total number of bytes read by pdx deserialization.", "bytes"),
+        f.createLongCounter("msgSerializationTime",
+            "Total amount of time, in nanoseconds, spent serializing messages.", "nanoseconds"),
+        f.createLongCounter("msgDeserializationTime",
+            "Total amount of time, in nanoseconds, spent deserializing messages.", "nanoseconds"),
+        f.createLongCounter("udpMsgEncryptionTime",
+            "Total amount of time, in nanoseconds, spent encrypting udp messages.", "nanoseconds"),
+        f.createLongCounter("udpMsgDecryptionTime",
+            "Total amount of time, in nanoseconds, spent decrypting udp messages.", "nanoseconds"),
+        f.createIntCounter("pdxInstanceDeserializations",
+            "Total number of times getObject has been called on a PdxInstance.", "ops"),
+        f.createLongCounter("pdxInstanceDeserializationTime",
+            "Total amount of time, in nanoseconds, spent deserializing PdxInstances by calling getObject.",
+            "nanoseconds"),
+        f.createIntCounter("pdxInstanceCreations",
+            "Total number of times a deserialization created a PdxInstance.", "ops"),
-        f.createLongCounter("batchSendTime", "Total amount of time, in nanoseconds, spent queueing and flushing message batches", "nanoseconds"),
+        f.createLongCounter("batchSendTime",
+            "Total amount of time, in nanoseconds, spent queueing and flushing message batches",
+            "nanoseconds"),
-        f.createLongCounter("batchCopyTime", "Total amount of time, in nanoseconds, spent copying messages for batched transmission", "nanoseconds"),
-        f.createLongCounter("batchFlushTime", "Total amount of time, in nanoseconds, spent flushing batched messages to the network", "nanoseconds"),
+        f.createLongCounter("batchCopyTime",
+            "Total amount of time, in nanoseconds, spent copying messages for batched transmission",
+            "nanoseconds"),
+        f.createLongCounter("batchFlushTime",
+            "Total amount of time, in nanoseconds, spent flushing batched messages to the network",
+            "nanoseconds"),
-        f.createIntGauge("asyncSocketWritesInProgress", "Current number of non-blocking socket write calls in progress.", "writes"),
-        f.createIntCounter("asyncSocketWrites", "Total number of non-blocking socket write calls completed.", "writes"),
-        f.createIntCounter("asyncSocketWriteRetries", "Total number of retries needed to write a single block of data using non-blocking socket write calls.", "writes"),
-        f.createLongCounter("asyncSocketWriteTime", "Total amount of time, in nanoseconds, spent in non-blocking socket write calls.", "nanoseconds"),
-        f.createLongCounter("asyncSocketWriteBytes", "Total number of bytes sent out on non-blocking sockets.", "bytes"),
+        f.createIntGauge("asyncSocketWritesInProgress",
+            "Current number of non-blocking socket write calls in progress.", "writes"),
+        f.createIntCounter("asyncSocketWrites",
+            "Total number of non-blocking socket write calls completed.", "writes"),
+        f.createIntCounter("asyncSocketWriteRetries",
+            "Total number of retries needed to write a single block of data using non-blocking socket write calls.",
+            "writes"),
+        f.createLongCounter("asyncSocketWriteTime",
+            "Total amount of time, in nanoseconds, spent in non-blocking socket write calls.",
+            "nanoseconds"),
+        f.createLongCounter("asyncSocketWriteBytes",
+            "Total number of bytes sent out on non-blocking sockets.", "bytes"),
-        f.createLongCounter("asyncQueueAddTime", "Total amount of time, in nanoseconds, spent in adding messages to async queue.", "nanoseconds"),
-        f.createLongCounter("asyncQueueRemoveTime", "Total amount of time, in nanoseconds, spent in removing messages from async queue.", "nanoseconds"),
+        f.createLongCounter("asyncQueueAddTime",
+            "Total amount of time, in nanoseconds, spent in adding messages to async queue.",
+            "nanoseconds"),
+        f.createLongCounter("asyncQueueRemoveTime",
+            "Total amount of time, in nanoseconds, spent in removing messages from async queue.",
+            "nanoseconds"),
-        f.createIntGauge("asyncQueueFlushesInProgress", asyncQueueFlushesInProgressDesc, "operations"),
-        f.createIntCounter("asyncQueueFlushesCompleted", asyncQueueFlushesCompletedDesc, "operations"),
+        f.createIntGauge("asyncQueueFlushesInProgress", asyncQueueFlushesInProgressDesc,
+            "operations"),
+        f.createIntCounter("asyncQueueFlushesCompleted", asyncQueueFlushesCompletedDesc,
+            "operations"),
-        f.createIntCounter("asyncDistributionTimeoutExceeded", asyncDistributionTimeoutExceededDesc, "operations"),
+        f.createIntCounter("asyncDistributionTimeoutExceeded", asyncDistributionTimeoutExceededDesc,
+            "operations"),
-        f.createLongGauge("receiversTO", "Number of receiver threads owned by non-receiver threads in other members.", "threads"),
-        f.createLongGauge("receiversTO2", "Number of receiver threads owned in turn by receiver threads in other members", "threads"),
+        f.createLongGauge("receiversTO",
+            "Number of receiver threads owned by non-receiver threads in other members.",
+            "threads"),
+        f.createLongGauge("receiversTO2",
+            "Number of receiver threads owned in turn by receiver threads in other members",
+            "threads"),
-        f.createIntGauge("socketLocksInProgress", "Current number of threads waiting to lock a socket", "threads", false),
-        f.createIntCounter("socketLocks", "Total number of times a socket has been locked.", "locks"),
-        f.createLongCounter("socketLockTime", "Total amount of time, in nanoseconds, spent locking a socket", "nanoseconds", false),
-        f.createIntGauge("bufferAcquiresInProgress", "Current number of threads waiting to acquire a buffer", "threads", false),
-        f.createIntCounter("bufferAcquires", "Total number of times a buffer has been acquired.", "operations"),
-        f.createLongCounter("bufferAcquireTime", "Total amount of time, in nanoseconds, spent acquiring a socket", "nanoseconds", false),
+        f.createIntGauge("socketLocksInProgress",
+            "Current number of threads waiting to lock a socket", "threads", false),
+        f.createIntCounter("socketLocks", "Total number of times a socket has been locked.",
+            "locks"),
+        f.createLongCounter("socketLockTime",
+            "Total amount of time, in nanoseconds, spent locking a socket", "nanoseconds", false),
+        f.createIntGauge("bufferAcquiresInProgress",
+            "Current number of threads waiting to acquire a buffer", "threads", false),
+        f.createIntCounter("bufferAcquires", "Total number of times a buffer has been acquired.",
+            "operations"),
+        f.createLongCounter("bufferAcquireTime",
+            "Total amount of time, in nanoseconds, spent acquiring a socket", "nanoseconds", false),
-        f.createIntGauge("messagesBeingReceived", "Current number of message being received off the network or being processed after reception.", "messages"),
-        f.createLongGauge("messageBytesBeingReceived", "Current number of bytes consumed by messages being received or processed.", "bytes"),
+        f.createIntGauge("messagesBeingReceived",
+            "Current number of message being received off the network or being processed after reception.",
+            "messages"),
+        f.createLongGauge("messageBytesBeingReceived",
+            "Current number of bytes consumed by messages being received or processed.", "bytes"),
-        f.createLongCounter("serialThreadStarts", "Total number of times a thread has been created for the serial message executor.", "starts", false),
-        f.createLongCounter("viewThreadStarts", "Total number of times a thread has been created for the view message executor.", "starts", false),
-        f.createLongCounter("processingThreadStarts", "Total number of times a thread has been created for the pool processing normal messages.", "starts", false),
-        f.createLongCounter("highPriorityThreadStarts", "Total number of times a thread has been created for the pool handling high priority messages.", "starts", false),
-        f.createLongCounter("waitingThreadStarts", "Total number of times a thread has been created for the waiting pool.", "starts", false),
-        f.createLongCounter("partitionedRegionThreadStarts", "Total number of times a thread has been created for the pool handling partitioned region messages.", "starts", false),
-        f.createLongCounter("functionExecutionThreadStarts", "Total number of times a thread has been created for the pool handling function execution messages.", "starts", false),
-        f.createLongCounter("serialPooledThreadStarts", "Total number of times a thread has been created for the serial pool(s).", "starts", false),
-        f.createLongCounter("TOSentMsgs", "Total number of messages sent on thread owned senders", "messages", false),
+        f.createLongCounter("serialThreadStarts",
+            "Total number of times a thread has been created for the serial message executor.",
+            "starts", false),
+        f.createLongCounter("viewThreadStarts",
+            "Total number of times a thread has been created for the view message executor.",
+            "starts", false),
+        f.createLongCounter("processingThreadStarts",
+            "Total number of times a thread has been created for the pool processing normal messages.",
+            "starts", false),
+        f.createLongCounter("highPriorityThreadStarts",
+            "Total number of times a thread has been created for the pool handling high priority messages.",
+            "starts", false),
+        f.createLongCounter("waitingThreadStarts",
+            "Total number of times a thread has been created for the waiting pool.", "starts",
+            false),
+        f.createLongCounter("partitionedRegionThreadStarts",
+            "Total number of times a thread has been created for the pool handling partitioned region messages.",
+            "starts", false),
+        f.createLongCounter("functionExecutionThreadStarts",
+            "Total number of times a thread has been created for the pool handling function execution messages.",
+            "starts", false),
+        f.createLongCounter("serialPooledThreadStarts",
+            "Total number of times a thread has been created for the serial pool(s).", "starts",
+            false),
+        f.createLongCounter("TOSentMsgs", "Total number of messages sent on thread owned senders",
+            "messages", false),
-        f.createIntGauge("partitionedRegionThreadJobs", partitionedRegionThreadJobsDesc, "messages"),
-        f.createIntGauge("functionExecutionThreadJobs", functionExecutionThreadJobsDesc, "messages"),
+        f.createIntGauge("partitionedRegionThreadJobs", partitionedRegionThreadJobsDesc,
+            "messages"),
+        f.createIntGauge("functionExecutionThreadJobs", functionExecutionThreadJobsDesc,
+            "messages"),
-        f.createIntGauge("initialImageMessagesInFlight", initialImageMessagesInFlightDesc, "messages"),
-        f.createIntGauge("initialImageRequestsInProgress", initialImageRequestsInProgressDesc, "requests"),
-        
-        //For GMSHealthMonitor
+        f.createIntGauge("initialImageMessagesInFlight", initialImageMessagesInFlightDesc,
+            "messages"),
+        f.createIntGauge("initialImageRequestsInProgress", initialImageRequestsInProgressDesc,
+            "requests"),
+
+        // For GMSHealthMonitor
-        f.createLongCounter("finalCheckRequestsReceived", finalCheckRequestsReceivedDesc, "messages"),
+        f.createLongCounter("finalCheckRequestsReceived", finalCheckRequestsReceivedDesc,
+            "messages"),
-        f.createLongCounter("finalCheckResponsesReceived", finalCheckResponsesReceivedDesc, "messages"),
-        f.createLongCounter("tcpFinalCheckRequestsSent", tcpFinalCheckRequestsSentDesc, "nanoseconds", false),
-        f.createLongCounter("tcpFinalCheckRequestsReceived", tcpFinalCheckRequestsReceivedDesc, "nanoseconds", false),
-        f.createLongCounter("tcpFinalCheckResponsesSent", tcpFinalCheckResponsesSentDesc, "nanoseconds", false),
-        f.createLongCounter("tcpFinalCheckResponsesReceived", tcpFinalCheckResponsesReceivedDesc, "nanoseconds", false),
+        f.createLongCounter("finalCheckResponsesReceived", finalCheckResponsesReceivedDesc,
+            "messages"),
+        f.createLongCounter("tcpFinalCheckRequestsSent", tcpFinalCheckRequestsSentDesc, "messages"),
+        f.createLongCounter("tcpFinalCheckRequestsReceived", tcpFinalCheckRequestsReceivedDesc,
+            "messages"),
+        f.createLongCounter("tcpFinalCheckResponsesSent", tcpFinalCheckResponsesSentDesc,
+            "messages"),
+        f.createLongCounter("tcpFinalCheckResponsesReceived", tcpFinalCheckResponsesReceivedDesc,
+            "messages"),
-        f.createLongCounter("udpFinalCheckRequestsReceived", udpFinalCheckRequestsReceivedDesc, "messages"),
-        f.createLongCounter("udpFinalCheckResponsesSent", udpFinalCheckResponsesSentDesc, "messages"),
-        f.createLongCounter("udpFinalCheckResponsesReceived", udpFinalCheckResponsesReceivedDesc, "messages"),
-      }
-    );
+        f.createLongCounter("udpFinalCheckRequestsReceived", udpFinalCheckRequestsReceivedDesc,
+            "messages"),
+        f.createLongCounter("udpFinalCheckResponsesSent", udpFinalCheckResponsesSentDesc,
+            "messages"),
+        f.createLongCounter("udpFinalCheckResponsesReceived", udpFinalCheckResponsesReceivedDesc,
+            "messages"),});
-    messageProcessingScheduleTimeId =
-      type.nameToId("messageProcessingScheduleTime");
+    messageProcessingScheduleTimeId = type.nameToId("messageProcessingScheduleTime");
-    
+
-    
-    //For GMSHealthMonitor
+
+    // For GMSHealthMonitor
-//  private final HistogramStats replyHandoffHistogram;
-//  private final HistogramStats replyWaitHistogram;
+  // private final HistogramStats replyHandoffHistogram;
+  // private final HistogramStats replyWaitHistogram;
-  ////////////////////////  Constructors  ////////////////////////
+  //////////////////////// Constructors ////////////////////////
-   * Creates a new <code>DistributionStats</code> and registers itself
-   * with the given statistics factory.
+   * Creates a new <code>DistributionStats</code> and registers itself with the given statistics
+   * factory.
-//    this.replyHandoffHistogram = new HistogramStats("ReplyHandOff", "nanoseconds", f,
-//        new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000}, false);
-//    this.replyWaitHistogram = new HistogramStats("ReplyWait", "nanoseconds", f,
-//        new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000}, false);
+    // this.replyHandoffHistogram = new HistogramStats("ReplyHandOff", "nanoseconds", f,
+    // new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000},
+    // false);
+    // this.replyWaitHistogram = new HistogramStats("ReplyWait", "nanoseconds", f,
+    // new long[] {100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000},
+    // false);
+
-//    this.replyHandoffHistogram = null;
-//    this.replyWaitHistogram = null;
+    // this.replyHandoffHistogram = null;
+    // this.replyWaitHistogram = null;
+   * 
-    return enableClockStats? NanoTimer.getTime() : 0;
+    return enableClockStats ? NanoTimer.getTime() : 0;
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
- /**
-   * Returns the total number of messages sent by the distribution
-   * manager
+  /**
+   * Returns the total number of messages sent by the distribution manager
+
-   * Increments the total number of messages sent by the distribution
-   * manager
+   * Increments the total number of messages sent by the distribution manager
+
-   * Increments the total number of transactino commit messages
-   * sent by the distribution manager
+   * Increments the total number of transactino commit messages sent by the distribution manager
+
-   * Increments the total number of nanoseconds spend sending messages.<p>
+   * Increments the total number of nanoseconds spend sending messages.
+   * <p>
-   * Returns the total number of messages broadcast by the distribution
-   * manager
+   * Returns the total number of messages broadcast by the distribution manager
-   * Increments the total number of messages broadcast by the distribution
-   * manager
+   * Increments the total number of messages broadcast by the distribution manager
-   * Returns the total number of messages received by the distribution
-   * manager
+   * Returns the total number of messages received by the distribution manager
-   * Increments the total number of messages received by the distribution
-   * manager
+   * Increments the total number of messages received by the distribution manager
-   * Returns the total number of bytes received by the distribution
-   * manager
+   * Returns the total number of bytes received by the distribution manager
-   * Returns the total number of messages processed by the distribution
-   * manager
+   * Returns the total number of messages processed by the distribution manager
-   * Increments the total number of messages processed by the distribution
-   * manager
+   * Increments the total number of messages processed by the distribution manager
-      this.stats.incLong(processedMessagesTimeId, getStatTime()-start);
+      this.stats.incLong(processedMessagesTimeId, getStatTime() - start);
+
+
+
+
+
+
+
+
+
+
+
+
+
-  
+
-  
+
+
+
+
+
+
+
+
+
+
+
-        stats.incLong(syncSocketWriteTimeId, now-start);
+        stats.incLong(syncSocketWriteTimeId, now - start);
-        stats.incLong(asyncSocketWriteTimeId, now-start);
+        stats.incLong(asyncSocketWriteTimeId, now - start);
+
+
-    stats.incLong(socketLockTimeId, ts-start);
+    stats.incLong(socketLockTimeId, ts - start);
+
+
-    stats.incLong(bufferAcquireTimeId, ts-start);
+    stats.incLong(bufferAcquireTimeId, ts - start);
+
-  
+
-  
+
-  
+
+
+
+
-      stats.incLong(serializationTimeId, getStatTime()-start);
+      stats.incLong(serializationTimeId, getStatTime() - start);
+
+
-      stats.incLong(pdxInstanceDeserializationTimeId, getStatTime()-start);
+      stats.incLong(pdxInstanceDeserializationTimeId, getStatTime() - start);
+
+
+
+
+
-      stats.incLong(deserializationTimeId, getStatTime()-start);
+      stats.incLong(deserializationTimeId, getStatTime() - start);
+
+
-      stats.incLong(msgSerializationTimeId, getStatTime()-start);
+      stats.incLong(msgSerializationTimeId, getStatTime() - start);
-  
+
-  
+
+
+
-      stats.incLong(replyWaitTimeId, getStatTime()-startNanos);
-//      this.replyWaitHistogram.endOp(delta);
+      stats.incLong(replyWaitTimeId, getStatTime() - startNanos);
+      // this.replyWaitHistogram.endOp(delta);
-    
+
+
+
+
+
+
+
+
+
-     return stats.getInt(asyncSocketWritesInProgressId);
+    return stats.getInt(asyncSocketWritesInProgressId);
+
-     return stats.getInt(asyncSocketWritesId);
+    return stats.getInt(asyncSocketWritesId);
+
+
-     return stats.getLong(asyncSocketWriteBytesId);
+    return stats.getLong(asyncSocketWriteBytesId);
+
-     return stats.getLong(asyncSocketWriteTimeId);
+    return stats.getLong(asyncSocketWriteTimeId);
+
-     return stats.getLong(asyncQueueAddTimeId);
+    return stats.getLong(asyncQueueAddTimeId);
+
+
-     return stats.getLong(asyncQueueRemoveTimeId);
+    return stats.getLong(asyncQueueRemoveTimeId);
+
-     return stats.getInt(asyncQueuesId);
+    return stats.getInt(asyncQueuesId);
+
+
-     return stats.getInt(asyncQueueFlushesInProgressId);
+    return stats.getInt(asyncQueueFlushesInProgressId);
+
-     return stats.getInt(asyncQueueFlushesCompletedId);
+    return stats.getInt(asyncQueueFlushesCompletedId);
+
-     return stats.getLong(asyncQueueFlushTimeId);
+    return stats.getLong(asyncQueueFlushTimeId);
+
+
-      stats.incLong(asyncQueueFlushTimeId, getStatTime()-start);
+      stats.incLong(asyncQueueFlushTimeId, getStatTime() - start);
+
-     return stats.getInt(asyncQueueTimeoutExceededId);
+    return stats.getInt(asyncQueueTimeoutExceededId);
+
+
-     return stats.getInt(asyncQueueSizeExceededId);
+    return stats.getInt(asyncQueueSizeExceededId);
+
+
-     return stats.getInt(asyncDistributionTimeoutExceededId);
+    return stats.getInt(asyncDistributionTimeoutExceededId);
+
-     return stats.getLong(asyncQueueSizeId);
+    return stats.getLong(asyncQueueSizeId);
+
+
-     return stats.getLong(asyncQueuedMsgsId);
+    return stats.getLong(asyncQueuedMsgsId);
+
+
-     return stats.getLong(asyncDequeuedMsgsId);
+    return stats.getLong(asyncDequeuedMsgsId);
+
+
-     return stats.getLong(asyncConflatedMsgsId);
+    return stats.getLong(asyncConflatedMsgsId);
+
-     return stats.getInt(asyncThreadsId);
+    return stats.getInt(asyncThreadsId);
+
+
-     return stats.getInt(asyncThreadInProgressId);
+    return stats.getInt(asyncThreadInProgressId);
+
-     return stats.getInt(asyncThreadCompletedId);
+    return stats.getInt(asyncThreadCompletedId);
+
-     return stats.getLong(asyncThreadTimeId);
+    return stats.getLong(asyncThreadTimeId);
+
+
-      stats.incLong(asyncThreadTimeId, getStatTime()-start);
+      stats.incLong(asyncThreadTimeId, getStatTime() - start);
-   * Returns a helper object so that the overflow queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the overflow queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void incThrottleCount() {
-          incOverflowQueueThrottleCount(1);
-        }
-        public void throttleTime(long nanos) {
-          incOverflowQueueThrottleTime(nanos);
-        }
-        public void add() {
-          incOverflowQueueSize(1);
-        }
-        public void remove() {
-          incOverflowQueueSize(-1);
-        }
-        public void remove(int count) {
-          incOverflowQueueSize(-count);
-        }
-      };
+      public void incThrottleCount() {
+        incOverflowQueueThrottleCount(1);
+      }
+
+      public void throttleTime(long nanos) {
+        incOverflowQueueThrottleTime(nanos);
+      }
+
+      public void add() {
+        incOverflowQueueSize(1);
+      }
+
+      public void remove() {
+        incOverflowQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incOverflowQueueSize(-count);
+      }
+    };
-   * Returns a helper object so that the waiting queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the waiting queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void add() {
-          incWaitingQueueSize(1);
-        }
-        public void remove() {
-          incWaitingQueueSize(-1);
-        }
-        public void remove(int count) {
-          incWaitingQueueSize(-count);
-        }
-      };
+      public void add() {
+        incWaitingQueueSize(1);
+      }
+
+      public void remove() {
+        incWaitingQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incWaitingQueueSize(-count);
+      }
+    };
-   * Returns a helper object so that the high priority queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the high priority queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void incThrottleCount() {
-          incHighPriorityQueueThrottleCount(1);
-        }
-        public void throttleTime(long nanos) {
-          incHighPriorityQueueThrottleTime(nanos);
-        }
-        public void add() {
-          incHighPriorityQueueSize(1);
-        }
-        public void remove() {
-          incHighPriorityQueueSize(-1);
-        }
-        public void remove(int count) {
-          incHighPriorityQueueSize(-count);
-        }
-      };
+      public void incThrottleCount() {
+        incHighPriorityQueueThrottleCount(1);
+      }
+
+      public void throttleTime(long nanos) {
+        incHighPriorityQueueThrottleTime(nanos);
+      }
+
+      public void add() {
+        incHighPriorityQueueSize(1);
+      }
+
+      public void remove() {
+        incHighPriorityQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incHighPriorityQueueSize(-count);
+      }
+    };
-   * Returns a helper object so that the partitioned region queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the partitioned region queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void incThrottleCount() {
-          incPartitionedRegionQueueThrottleCount(1);
-        }
-        public void throttleTime(long nanos) {
-          incPartitionedRegionQueueThrottleTime(nanos);
-        }
-        public void add() {
-          incPartitionedRegionQueueSize(1);
-        }
-        public void remove() {
-          incPartitionedRegionQueueSize(-1);
-        }
-        public void remove(int count) {
-          incPartitionedRegionQueueSize(-count);
-        }
-      };
+      public void incThrottleCount() {
+        incPartitionedRegionQueueThrottleCount(1);
+      }
+
+      public void throttleTime(long nanos) {
+        incPartitionedRegionQueueThrottleTime(nanos);
+      }
+
+      public void add() {
+        incPartitionedRegionQueueSize(1);
+      }
+
+      public void remove() {
+        incPartitionedRegionQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incPartitionedRegionQueueSize(-count);
+      }
+    };
+
-   * Returns a helper object so that the partitioned region pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the partitioned region pool can record its stats to the proper
+   * distribution stats.
+   * 
-        public void startJob() {
-          incPartitionedRegionThreadJobs(1);
-        }
-        public void endJob() {
-          incPartitionedRegionThreadJobs(-1);
-        }
-      };
+      public void startJob() {
+        incPartitionedRegionThreadJobs(1);
+      }
+
+      public void endJob() {
+        incPartitionedRegionThreadJobs(-1);
+      }
+    };
-   * Returns a helper object so that the function execution queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the function execution queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void incThrottleCount() {
-          incFunctionExecutionQueueThrottleCount(1);
-        }
-        public void throttleTime(long nanos) {
-          incFunctionExecutionQueueThrottleTime(nanos);
-        }
-        public void add() {
-          incFunctionExecutionQueueSize(1);
-        }
-        public void remove() {
-          incFunctionExecutionQueueSize(-1);
-        }
-        public void remove(int count) {
-          incFunctionExecutionQueueSize(-count);
-        }
-      };
+      public void incThrottleCount() {
+        incFunctionExecutionQueueThrottleCount(1);
+      }
+
+      public void throttleTime(long nanos) {
+        incFunctionExecutionQueueThrottleTime(nanos);
+      }
+
+      public void add() {
+        incFunctionExecutionQueueSize(1);
+      }
+
+      public void remove() {
+        incFunctionExecutionQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incFunctionExecutionQueueSize(-count);
+      }
+    };
+
-   * Returns a helper object so that the function execution pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the function execution pool can record its stats to the proper
+   * distribution stats.
+   * 
-        public void startJob() {
-          incFunctionExecutionThreadJobs(1);
-        }
-        public void endJob() {
-          incFunctionExecutionThreadJobs(-1);
-        }
-      };
+      public void startJob() {
+        incFunctionExecutionThreadJobs(1);
+      }
+
+      public void endJob() {
+        incFunctionExecutionThreadJobs(-1);
+      }
+    };
-   * Returns a helper object so that the serial queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the serial queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void incThrottleCount() {
-          incSerialQueueThrottleCount(1);
-        }
-        public void throttleTime(long nanos) {
-          incSerialQueueThrottleTime(nanos);
-        }
-        public void add() {
-          incSerialQueueSize(1);
-        }
-        public void remove() {
-          incSerialQueueSize(-1);
-        }
-        public void remove(int count) {
-          incSerialQueueSize(-count);
-        }
-        public void addMem(int amount) {
-          incSerialQueueBytes(amount);
-        }
-        public void removeMem(int amount) {
-          incSerialQueueBytes(amount * (-1));
-        }
-      };
+      public void incThrottleCount() {
+        incSerialQueueThrottleCount(1);
+      }
+
+      public void throttleTime(long nanos) {
+        incSerialQueueThrottleTime(nanos);
+      }
+
+      public void add() {
+        incSerialQueueSize(1);
+      }
+
+      public void remove() {
+        incSerialQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incSerialQueueSize(-count);
+      }
+
+      public void addMem(int amount) {
+        incSerialQueueBytes(amount);
+      }
+
+      public void removeMem(int amount) {
+        incSerialQueueBytes(amount * (-1));
+      }
+    };
-   * Returns a helper object so that the normal pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the normal pool can record its stats to the proper distribution
+   * stats.
+   * 
-        public void startJob() {
-          incNormalPoolThreadJobs(1);
-        }
-        public void endJob() {
-          incNormalPoolThreadJobs(-1);
-        }
-      };
+      public void startJob() {
+        incNormalPoolThreadJobs(1);
+      }
+
+      public void endJob() {
+        incNormalPoolThreadJobs(-1);
+      }
+    };
-   * Returns a helper object so that the waiting pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the waiting pool can record its stats to the proper
+   * distribution stats.
+   * 
-        public void startJob() {
-          incWaitingPoolThreadJobs(1);
-        }
-        public void endJob() {
-          incWaitingPoolThreadJobs(-1);
-        }
-      };
+      public void startJob() {
+        incWaitingPoolThreadJobs(1);
+      }
+
+      public void endJob() {
+        incWaitingPoolThreadJobs(-1);
+      }
+    };
-   * Returns a helper object so that the highPriority pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the highPriority pool can record its stats to the proper
+   * distribution stats.
+   * 
-        public void startJob() {
-          incHighPriorityThreadJobs(1);
-        }
-        public void endJob() {
-          incHighPriorityThreadJobs(-1);
-        }
-      };
+      public void startJob() {
+        incHighPriorityThreadJobs(1);
+      }
+
+      public void endJob() {
+        incHighPriorityThreadJobs(-1);
+      }
+    };
-      stats.incLong(batchSendTimeId, getStatTime()-start);
+      stats.incLong(batchSendTimeId, getStatTime() - start);
+
-      stats.incLong(batchCopyTimeId, getStatTime()-start);
+      stats.incLong(batchCopyTimeId, getStatTime() - start);
+
-      stats.incLong(batchWaitTimeId, getStatTime()-start);
+      stats.incLong(batchWaitTimeId, getStatTime() - start);
+
-      stats.incLong(batchFlushTimeId, getStatTime()-start);
+      stats.incLong(batchFlushTimeId, getStatTime() - start);
+
+
+
+
-  public void incThreadOwnedReceivers(long value, int dominoCount)
-  {
+  public void incThreadOwnedReceivers(long value, int dominoCount) {
+
+
+
+
+
+
+
+
+
+
+
-//      this.replyHandoffHistogram.endOp(delta);
+      // this.replyHandoffHistogram.endOp(delta);
-          logger.trace("[DM.SerialQueuedExecutor.execute] numSerialThreads={}", getNumSerialThreads());
+          logger.trace("[DM.SerialQueuedExecutor.execute] numSerialThreads={}",
+              getNumSerialThreads());
+
+
+
+
-  
+
+
-  
+
+
-  
-  public Statistics getStats(){
+
+  public Statistics getStats() {
-  
-  //For GMSHealthMonitor
+
+  // For GMSHealthMonitor
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-///
+
+  ///
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
- 
-///
+
+  ///
-  
+
-//  UDP final check is implemented using HeartbeatRequestMessage and HeartbeatMessage
-//  So the following code is commented out  
-//  public long getUdpFinalCheckRequestsReceived() {
-//    return this.stats.getLong(udpFinalCheckRequestsReceivedId);
-//  }
-//  
-//  public void incUdpFinalCheckRequestsReceived() {
-//    this.stats.incLong(udpFinalCheckRequestsReceivedId, 1L);
-//  }
-//  
-//  public long getUdpFinalCheckResponsesSent() {
-//    return this.stats.getLong(udpFinalCheckResponsesSentId);
-//  }
-//  
-//  public void incUdpFinalCheckResponsesSent() {
-//    this.stats.incLong(udpFinalCheckResponsesSentId, 1L);
-//  }
-  
+  // UDP final check is implemented using HeartbeatRequestMessage and HeartbeatMessage
+  // So the following code is commented out
+  // public long getUdpFinalCheckRequestsReceived() {
+  // return this.stats.getLong(udpFinalCheckRequestsReceivedId);
+  // }
+  //
+  // public void incUdpFinalCheckRequestsReceived() {
+  // this.stats.incLong(udpFinalCheckRequestsReceivedId, 1L);
+  // }
+  //
+  // public long getUdpFinalCheckResponsesSent() {
+  // return this.stats.getLong(udpFinalCheckResponsesSentId);
+  // }
+  //
+  // public void incUdpFinalCheckResponsesSent() {
+  // this.stats.incLong(udpFinalCheckResponsesSentId, 1L);
+  // }
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD45 UPD45 UPD45 UPD45 DEL9 DEL9 DEL9 DEL9 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66