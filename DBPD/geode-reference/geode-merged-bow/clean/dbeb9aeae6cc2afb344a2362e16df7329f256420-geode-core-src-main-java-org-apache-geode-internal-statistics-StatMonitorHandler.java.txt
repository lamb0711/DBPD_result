Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.internal.concurrent.ConcurrentHashSet;
-import java.util.ArrayList;
-import java.util.Collections;
-  static final String ENABLE_MONITOR_THREAD = DistributionConfig.GEMFIRE_PREFIX + "stats.enableMonitorThread";
-  static final boolean enableMonitorThread = Boolean.getBoolean(ENABLE_MONITOR_THREAD);
-  
+  protected static final String ENABLE_MONITOR_THREAD =
+      DistributionConfig.GEMFIRE_PREFIX + "stats.enableMonitorThread";
+
+  private final boolean enableMonitorThread;
+
-  private volatile List<StatisticsMonitor> monitors = 
-      Collections.<StatisticsMonitor>emptyList();
-  
+  private final ConcurrentHashSet<StatisticsMonitor> monitors =
+      new ConcurrentHashSet<StatisticsMonitor>();
+
+    this.enableMonitorThread = Boolean.getBoolean(ENABLE_MONITOR_THREAD);
-  
+
-      List<StatisticsMonitor> oldMonitors = this.monitors;
-      if (!oldMonitors.contains(monitor)) {
-        List<StatisticsMonitor> newMonitors = new ArrayList<StatisticsMonitor>(oldMonitors);
-        added = newMonitors.add(monitor);
-        this.monitors = Collections.unmodifiableList(newMonitors);
+      if (!this.monitors.contains(monitor)) {
+        added = this.monitors.add(monitor);
-      if (enableMonitorThread && !this.monitors.isEmpty() && this.notifier == null) {
-        this.notifier = new StatMonitorNotifier();
-        this.notifier.start();
+      if (!this.monitors.isEmpty()) {
+        startNotifier_IfEnabledAndNotRunning();
-      List<StatisticsMonitor> oldMonitors = this.monitors;
-      if (oldMonitors.contains(monitor)) {
-        List<StatisticsMonitor> newMonitors = new ArrayList<StatisticsMonitor>(oldMonitors);
-        removed = newMonitors.remove(monitor);
-        this.monitors = Collections.unmodifiableList(newMonitors);
+      if (this.monitors.contains(monitor)) {
+        removed = this.monitors.remove(monitor);
-      if (enableMonitorThread && this.monitors.isEmpty() && this.notifier != null) {
-        this.notifier.stop();
-        this.notifier = null;
+      if (this.monitors.isEmpty()) {
+        stopNotifier_IfEnabledAndRunning();
-  
+
-      if (enableMonitorThread && this.notifier != null) {
-        this.notifier.stop();
-      }
+      stopNotifier_IfEnabledAndRunning();
-  
+
-      if (enableMonitorThread) {
+      if (this.enableMonitorThread) {
-  
+
-    List<StatisticsMonitor> currentMonitors = StatMonitorHandler.this.monitors;
-    for (StatisticsMonitor monitor : currentMonitors) {
+    for (StatisticsMonitor monitor : StatMonitorHandler.this.monitors) {
-      }
-      catch (Error e) {
+      } catch (Error e) {
-        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
-      }
-      catch (RuntimeException e) {
-        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
+        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+            e.getClass().getSimpleName(), e);
+      } catch (RuntimeException e) {
+        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+            e.getClass().getSimpleName(), e);
-  public void allocatedResourceType(ResourceType resourceType) {
-  }
+  public void allocatedResourceType(ResourceType resourceType) {}
-  public void allocatedResourceInstance(ResourceInstance resourceInstance) {
-  }
+  public void allocatedResourceInstance(ResourceInstance resourceInstance) {}
-  public void destroyedResourceInstance(ResourceInstance resourceInstance) {
-  }
+  public void destroyedResourceInstance(ResourceInstance resourceInstance) {}
-  List<StatisticsMonitor> getMonitorsSnapshot() {
-    return Collections.unmodifiableList(this.monitors);
+  ConcurrentHashSet<StatisticsMonitor> getMonitorsSnapshot() {
+    return this.monitors;
-  
+
-    synchronized (this) {
-      return this.notifier;
+    return this.notifier;
+  }
+
+  private void startNotifier_IfEnabledAndNotRunning() {
+    if (this.enableMonitorThread && this.notifier == null) {
+      this.notifier = new StatMonitorNotifier();
+      this.notifier.start();
-  
+
+  private void stopNotifier_IfEnabledAndRunning() {
+    if (this.enableMonitorThread && this.notifier != null) {
+      this.notifier.stop();
+      this.notifier = null;
+    }
+  }
+
-    
+
-    
+
-    
+
-    
+
-    StatMonitorNotifier() {
-    }
-    
+    StatMonitorNotifier() {}
+
-    
+
-            List<StatisticsMonitor> currentMonitors = StatMonitorHandler.this.monitors;
-            for (StatisticsMonitor monitor : currentMonitors) {
+            for (StatisticsMonitor monitor : StatMonitorHandler.this.monitors) {
-                monitor.monitor(latestTask.getSampleTimeMillis(), 
-                                latestTask.getResourceInstances());
+                monitor.monitor(latestTask.getSampleTimeMillis(),
+                    latestTask.getResourceInstances());
-              }
-              catch (Error e) {
+              } catch (Error e) {
-                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
-              }
-              catch (RuntimeException e) {
-                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
+                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+                    e.getClass().getSimpleName(), e);
+              } catch (RuntimeException e) {
+                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+                    e.getClass().getSimpleName(), e);
-      
+
-    
+
-    
+
-  
+
-    private final long sampleTimeMillis; 
+    private final long sampleTimeMillis;
-    
+
-    
+
-    
+

MOV26 UPD40 INS31 INS31 INS83 UPD83 UPD83 INS74 UPD74 MOV74 MOV8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS43 MOV43 INS14 INS21 UPD43 MOV25 MOV25 INS42 UPD74 MOV74 INS7 INS8 MOV22 UPD42 MOV22 UPD43 INS22 MOV32 INS25 INS25 INS25 INS25 MOV21 INS22 INS22 UPD42 INS52 INS42 MOV38 INS8 MOV38 INS8 MOV32 INS8 MOV32 INS8 INS22 INS52 INS42 INS52 INS42 MOV33 MOV21 MOV21 MOV22 MOV21 MOV21 INS42 INS52 INS42 MOV52 MOV22 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV22 MOV22 MOV22 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL27 DEL8 DEL25 DEL8 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL52 DEL51 DEL8 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42