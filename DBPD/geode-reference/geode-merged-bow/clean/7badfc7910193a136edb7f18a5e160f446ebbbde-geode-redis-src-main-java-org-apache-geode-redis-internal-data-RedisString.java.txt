GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

+import org.apache.geode.redis.internal.executor.string.SetOptions;
+  public static final NullRedisString NULL_REDIS_STRING = new NullRedisString();
+
-    value.append(appendValue.toBytes());
+    valueAppend(appendValue.toBytes());
-    this.value = value;
+    valueSet(value);
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.doubleToBytes(doubleValue));
+    valueSetBytes(Coder.doubleToBytes(doubleValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-      value.setBytes(newBytes);
+      valueSetBytes(newBytes);
-      value.setBytes(newBytes);
+      valueSetBytes(newBytes);
-      value.append(appendBytes);
+      valueAppend(appendBytes);
+  public ByteArrayWrapper getset(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key,
+      ByteArrayWrapper newValue) {
+    // No need to copy "value" since we are locked and will be calling set which replaces
+    // "value" with a new instance.
+    ByteArrayWrapper result = value;
+    set(newValue);
+    persistNoDelta();
+    region.put(key, this);
+    return result;
+  }
+
+
+  protected void handleSetExpiration(SetOptions options) {
+    long setExpiration = options == null ? 0L : options.getExpiration();
+    if (setExpiration != 0) {
+      long now = System.currentTimeMillis();
+      long timestamp = now + setExpiration;
+      setExpirationTimestampNoDelta(timestamp);
+    } else if (options == null || !options.isKeepTTL()) {
+      persistNoDelta();
+    }
+  }
+
+  ////// methods that modify the "value" field ////////////
+
+  protected void valueAppend(byte[] bytes) {
+    value.append(bytes);
+  }
+
+  protected void valueSet(ByteArrayWrapper newValue) {
+    value = newValue;
+  }
+
+  protected void valueSetBytes(byte[] bytes) {
+    value.setBytes(bytes);
+  }

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 MOV39 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 MOV8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS14 INS21 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS41 INS43 INS42 INS60 INS25 INS5 INS42 INS21 INS43 INS42 INS5 INS42 INS21 INS43 INS32 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS39 INS59 INS27 INS8 INS25 INS39 INS85 INS32 INS42 INS39 INS85 INS32 INS42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS16 INS42 INS34 INS60 INS60 INS21 INS27 INS8 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS27 INS34 INS32 INS39 INS59 INS39 INS59 INS32 INS27 INS38 INS21 UPD42 UPD42 UPD42 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL83 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22