GEODE-6488: Migrating cancellation state to execution context (#3322)

This work solves two problems.  One is that the query cancellation task
reference in DefaultQuery could be overwritten and thus never removed
from monitoring upon successful completion of a query.  Second is that
once a query execution timed out once, the query object was in an
unusable state which is undesirable.

The solution is to attach the cancellation state to the execution
context rather than the query object, so that cancellation is associated
with each independent execution of a query rather than having
cancellation state that applies to the entire query object.
+import org.apache.geode.cache.query.internal.ExecutionContext;
+import org.apache.geode.cache.query.internal.QueryExecutionContext;
+    final ExecutionContext executionContext = new QueryExecutionContext(null, pr.getCache(), query);
-                  null);
+                  null, null);
-              .doTestHook(DefaultQuery.TestHook.SPOTS.POPULATING_TRACE_INFO_FOR_REMOTE_QUERY, null);
+              .doTestHook(DefaultQuery.TestHook.SPOTS.POPULATING_TRACE_INFO_FOR_REMOTE_QUERY, null,
+                  null);
-      } else if (query.isCanceled()) {
-        throw query.getQueryCanceledException();
+      } else if (executionContext.isCanceled()) {
+        throw executionContext.getQueryCanceledException();

INS26 INS26 INS40 INS40 INS60 INS83 INS43 INS59 INS42 INS42 INS14 INS43 INS33 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 INS33 INS33