Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private final FileOutputStream fos; // TODO:LOG:CLEANUP: why do we track this outside ManagerLogWriter? doesn't rolling invalidate it?
-  
+  private final FileOutputStream fos; // TODO:LOG:CLEANUP: why do we track this outside
+                                      // ManagerLogWriter? doesn't rolling invalidate it?
+
-  
-  private LogWriterAppender(final AppenderContext[] appenderContexts, final String name, final PureLogWriter logWriter, final FileOutputStream fos) {
-    super(LogWriterAppender.class.getName() + "-" + name, null, PatternLayout.createDefaultLayout());
-    this.appenderContexts = appenderContexts; 
+
+  private LogWriterAppender(final AppenderContext[] appenderContexts, final String name,
+      final PureLogWriter logWriter, final FileOutputStream fos) {
+    super(LogWriterAppender.class.getName() + "-" + name, null,
+        PatternLayout.createDefaultLayout());
+    this.appenderContexts = appenderContexts;
-  
+
-  static final LogWriterAppender create(final AppenderContext[] contexts, final String name, final PureLogWriter logWriter, final FileOutputStream fos) {
+  static final LogWriterAppender create(final AppenderContext[] contexts, final String name,
+      final PureLogWriter logWriter, final FileOutputStream fos) {
-      this.logWriter.put(LogWriterLogger.log4jLevelToLogWriterLevel(event.getLevel()), event.getMessage().getFormattedMessage(),
-          event.getThrown());
+      this.logWriter.put(LogWriterLogger.log4jLevelToLogWriterLevel(event.getLevel()),
+          event.getMessage().getFormattedMessage(), event.getThrown());
-      logger.debug("Responding to a property change event. Property name is {}.", evt.getPropertyName());
+      logger.debug("Responding to a property change event. Property name is {}.",
+          evt.getPropertyName());
-  
+
-    if (LogService.MAIN_LOGGER_NAME.equals(this.logWriterLoggerName) && LogService.isUsingGemFireDefaultConfig()) {
+    if (LogService.MAIN_LOGGER_NAME.equals(this.logWriterLoggerName)
+        && LogService.isUsingGemFireDefaultConfig()) {
-    for (AppenderContext context : this.appenderContexts) { // do this second as log4j 2.6+ will re-add
+    for (AppenderContext context : this.appenderContexts) { // do this second as log4j 2.6+ will
+                                                            // re-add
-  private void cleanUp() { // was closingLogFile() -- called from destroy() as the final step 
+  private void cleanUp() { // was closingLogFile() -- called from destroy() as the final step
-      ((ManagerLogWriter)this.logWriter).closingLogFile();
+      ((ManagerLogWriter) this.logWriter).closingLogFile();
-      }
-      catch (IOException ignore) {
+      } catch (IOException ignore) {
-  
+
-        ((ManagerLogWriter)this.logWriter).shuttingDown();
+        ((ManagerLogWriter) this.logWriter).shuttingDown();
-    
+
-  
+
-      ((ManagerLogWriter)this.logWriter).startupComplete();
+      ((ManagerLogWriter) this.logWriter).startupComplete();
-  
+
-      ((ManagerLogWriter)this.logWriter).setConfig(cfg);
+      ((ManagerLogWriter) this.logWriter).setConfig(cfg);
-  
+
-      return ((ManagerLogWriter)this.logWriter).getChildLogFile();
+      return ((ManagerLogWriter) this.logWriter).getChildLogFile();
-  
+
-      return ((ManagerLogWriter)this.logWriter).getLogDir();
+      return ((ManagerLogWriter) this.logWriter).getLogDir();
-  
+
-      return ((ManagerLogWriter)this.logWriter).getMainLogId();
+      return ((ManagerLogWriter) this.logWriter).getMainLogId();
-  
+
-      return ((ManagerLogWriter)this.logWriter).useChildLogging();
+      return ((ManagerLogWriter) this.logWriter).useChildLogging();
-  
+
-      ((ManagerLogWriter)this.logWriter).configChanged();
+      ((ManagerLogWriter) this.logWriter).configChanged();

