Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreCreation;
-import com.gemstone.gemfire.cache.util.BridgeWriter;
-import com.gemstone.gemfire.cache.util.GatewayConflictResolver;
+	  
+    /**
+     * The API doc
+     * http://java.sun.com/javase/6/docs/api/org/xml/sax/InputSource.html for
+     * the SAX InputSource says: "... standard processing of both byte and
+     * character streams is to close them on as part of end-of-parse cleanup, so
+     * applications should not attempt to re-use such streams after they have
+     * been handed to a parser."
+     *
+     * In order to block the parser from closing the stream, we wrap the
+     * InputStream in a filter, i.e., UnclosableInputStream, whose close()
+     * function does nothing.
+     * 
+     */
+    class UnclosableInputStream extends BufferedInputStream {
+      public UnclosableInputStream(InputStream stream) {
+        super(stream);
+      }
+
+      @Override
+      public void close() {
+      }
+    }
+	 
-      BufferedInputStream bis = new BufferedInputStream(is);
+      UnclosableInputStream bis = new UnclosableInputStream(is);
-        if (null != e.getCause() &&
-            (e.getCause().getMessage().startsWith("DOCTYPE is disallowed")
-                || e.getCause().getMessage().startsWith("DOCTYPE n'est pas autoris"))) {
+        if (null != e.getCause() && e.getCause().getMessage().contains(DISALLOW_DOCTYPE_DECL_FEATURE)) {
-    CacheWriter cw = attrs.getCacheWriter();
-    if(poolName !=null && cw != null) {
-      throw new CacheXmlException("You cannot specify both a poolName and a cacheWriter for a dynamic-region-factory.");
-    }
-    if (cw != null && !(cw instanceof BridgeWriter)) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_THE_DYNAMICREGIONFACTORY_CACHEWRITER_MUST_BE_AN_INSTANCE_OF_BRIDGEWRITER.toLocalizedString());
-    }
-    if(poolName != null) {
-      cfg =
-        new DynamicRegionFactory.Config(dir, poolName,
+    cfg = new DynamicRegionFactory.Config(dir, poolName,
-    } else {
-      cfg =
-        new DynamicRegionFactory.Config(dir, (BridgeWriter)cw,
-          !Boolean.valueOf(disablePersistBackup).booleanValue(),
-          !Boolean.valueOf(disableRegisterInterest).booleanValue());
-    }
+  /**
+   * When a <code>hdfs-store</code> element is first encountered, we
+   * create a {@link HDFSStoreCreation}, populate it accordingly, and
+   * push it on the stack.
+   * <pre>
+   * {@code
+   * <hdfs-store name="" gemfire-home-dir="" namenode-url="" hdfs-client-config-file="">
+   * ...
+   * </hdfs-store>
+   * }
+   * 
+   */
+  private void startHDFSStore(Attributes atts) {
+    // this is the only place to create DSAC objects
+    HDFSStoreCreation attrs = new HDFSStoreCreation();
+    String name = atts.getValue(NAME);
+    if (name == null) {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_NULL_DiskStoreName.toLocalizedString());
+    } else {
+      attrs.setName(name);
+    }
+
+    String namenode = atts.getValue(HDFS_NAMENODE_URL);
+    if (namenode == null) {
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlParser_NULL_DiskStoreName.toLocalizedString());
+    } else {
+      attrs.setNameNodeURL(namenode);
+    }
+
+    String clientConfig = atts.getValue(HDFS_CLIENT_CONFIG_FILE);
+    if (clientConfig != null) {
+      attrs.setHDFSClientConfigFile(clientConfig);
+    }
+    
+    String folderPath = atts.getValue(HDFS_HOME_DIR);
+    if (folderPath != null) {
+      attrs.setHomeDir(folderPath);
+    }
+   
+    String readCacheSize = atts.getValue(HDFS_READ_CACHE_SIZE);
+    if (readCacheSize != null) {
+      try {
+        attrs.setBlockCacheSize(Float.valueOf(readCacheSize));
+      } catch (NumberFormatException e) {
+        throw new CacheXmlException(
+            LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1
+            .toLocalizedString(new Object[] { readCacheSize, HDFS_READ_CACHE_SIZE }),
+            e);
+      }
+    }
+    
+    Integer maxMemory = getIntValue(atts, HDFS_MAX_MEMORY);
+    if (maxMemory != null) {
+      attrs.setMaxMemory(maxMemory);
+    }
+    
+    Integer batchSize = getIntValue(atts, HDFS_BATCH_SIZE);
+    if (batchSize != null) {
+      attrs.setBatchSize(batchSize);
+    }
+    
+    Integer batchInterval = getIntValue(atts, HDFS_BATCH_INTERVAL);
+    if (batchInterval != null) {
+      attrs.setBatchInterval(batchInterval);
+    }
+    
+    Integer dispatcherThreads = getIntValue(atts, HDFS_DISPATCHER_THREADS);
+    if (dispatcherThreads != null) {
+      attrs.setDispatcherThreads(dispatcherThreads);
+    }
+    
+    Boolean bufferPersistent = getBoolean(atts, HDFS_BUFFER_PERSISTENT);
+    if (bufferPersistent != null) {
+      attrs.setBufferPersistent(bufferPersistent);
+    }
+    
+    Boolean synchronousDiskWrite = getBoolean(atts, HDFS_SYNCHRONOUS_DISK_WRITE);
+    if (synchronousDiskWrite != null) {
+      attrs.setSynchronousDiskWrite(synchronousDiskWrite);
+    }
+    
+    String diskstoreName = atts.getValue(HDFS_DISK_STORE);
+    if (diskstoreName != null) {
+      attrs.setDiskStoreName(diskstoreName);
+    }
+    
+    Integer purgeInterval = getInteger(atts, HDFS_PURGE_INTERVAL);
+    if (purgeInterval != null) {
+      attrs.setPurgeInterval(purgeInterval);
+    }
+    Boolean majorCompaction = getBoolean(atts, HDFS_MAJOR_COMPACTION);
+    if (majorCompaction != null) {
+      attrs.setMajorCompaction(Boolean.valueOf(majorCompaction));
+    }
+    
+    // configure major compaction interval
+    Integer majorCompactionInterval = getIntValue(atts, HDFS_MAJOR_COMPACTION_INTERVAL);
+    if (majorCompactionInterval != null) {
+      attrs.setMajorCompactionInterval(majorCompactionInterval);
+    }
+    
+    // configure compaction concurrency
+    Integer value = getIntValue(atts, HDFS_MAJOR_COMPACTION_THREADS);
+    if (value != null)
+      attrs.setMajorCompactionThreads(value);
+    
+    Boolean minorCompaction = getBoolean(atts, HDFS_MINOR_COMPACTION);
+    if (minorCompaction != null) {
+      attrs.setMinorCompaction(Boolean.valueOf(minorCompaction));
+    }
+    
+    // configure compaction concurrency
+    value = getIntValue(atts, HDFS_MINOR_COMPACTION_THREADS);
+    if (value != null)
+      attrs.setMinorCompactionThreads(value);
+    
+    String maxFileSize = atts.getValue(HDFS_MAX_WRITE_ONLY_FILE_SIZE);
+    if (maxFileSize != null) {
+      attrs.setWriteOnlyFileRolloverSize(parseInt(maxFileSize));
+    }
+    
+    String fileRolloverInterval = atts.getValue(HDFS_WRITE_ONLY_FILE_ROLLOVER_INTERVAL);
+    if (fileRolloverInterval != null) {
+      attrs.setWriteOnlyFileRolloverInterval(parseInt(fileRolloverInterval));
+    }
+    stack.push(name);
+    stack.push(attrs);
+  }
+  
+  /**
+   * After popping the current <code>HDFSStoreCreation</code> off the
+   * stack, we add it to the <code>HDFSStoreCreation</code> that should be on the
+   * top of the stack.
+   */
+  private void endHDFSStore() {
+    HDFSStoreCreation hsc = (HDFSStoreCreation) stack.pop();
+    String name = (String) stack.pop();
+    CacheCreation cache;
+    Object top = stack.peek();
+    if (top instanceof CacheCreation) {
+      cache = (CacheCreation) top;
+    }
+    else {
+      String s = "Did not expect a " + top.getClass().getName()
+          + " on top of the stack.";
+      Assert.assertTrue(false, s);
+      cache = null; // Dead code
+    }
+    if (name != null) {
+      cache.addHDFSStore(name, hsc);
+    }
+  }
+	
+  private Integer getIntValue(Attributes atts, String param) {
+    String maxInputFileSizeMB = atts.getValue(param);
+    if (maxInputFileSizeMB != null) {
+      try {
+        return Integer.valueOf(maxInputFileSizeMB);
+      } catch (NumberFormatException e) {
+        throw new CacheXmlException(
+            LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1
+                .toLocalizedString(new Object[] { maxInputFileSizeMB, param }),
+            e);
+      }
+    }
+    return null;
+  }
+    String offHeapStr = atts.getValue(OFF_HEAP);
+    if(offHeapStr != null) {
+      attrs.setOffHeap(Boolean.valueOf(offHeapStr).booleanValue());
+    }
+    String hdfsStoreName = atts.getValue(HDFS_STORE_NAME);
+    if (hdfsStoreName != null) {
+      attrs.setHDFSStoreName(hdfsStoreName);
+    }
+    String hdfsWriteOnly= atts.getValue(HDFS_WRITE_ONLY);
+    if (hdfsWriteOnly != null) {
+      attrs.setHDFSWriteOnly(Boolean.valueOf(hdfsWriteOnly).booleanValue());
+    }
+
+    
+    {
+      String chp = atts.getValue(CRITICAL_OFF_HEAP_PERCENTAGE);
+      if (chp != null) {
+        rmc.setCriticalOffHeapPercentage(parseFloat(chp));
+      } else {
+        rmc.setCriticalOffHeapPercentageToDefault();
+      }
+    }
+
+    {
+      String ehp = atts.getValue(EVICTION_OFF_HEAP_PERCENTAGE);
+      if (ehp != null) {
+        rmc.setEvictionOffHeapPercentage(parseFloat(ehp));
+      } else {
+        rmc.setEvictionOffHeapPercentageToDefault();
+      }
+    }
+	else if (qName.equals(HDFS_STORE)) {
+        startHDFSStore(atts);
+    }
+      else if (qName.equals(HDFS_STORE)) {
+          endHDFSStore();
+      }

MOV26 UPD40 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS56 MOV21 INS65 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS25 INS60 INS25 INS60 INS25 INS21 INS21 INS65 INS60 INS60 INS60 INS60 INS25 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS60 INS25 INS60 INS25 INS60 INS25 INS8 INS8 INS55 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS21 INS43 INS59 INS27 INS8 INS7 INS27 INS21 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS62 INS8 INS8 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS33 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS60 INS25 INS60 INS25 INS29 INS42 MOV43 INS31 INS31 INS42 INS66 INS66 INS66 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS53 INS21 INS42 INS42 INS32 INS42 INS33 INS53 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS21 INS60 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS65 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS7 INS43 INS59 INS32 INS7 INS32 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS42 INS46 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 UPD43 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS45 INS32 INS45 INS32 INS43 INS42 INS53 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD27 MOV27 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 MOV43 INS32 INS42 UPD42 INS42 INS40 INS42 INS3 INS40 INS42 INS3 INS5 INS4 INS5 INS4 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS8 INS25 INS32 MOV8 MOV25 INS25 INS42 INS42 INS42 INS21 INS32 INS8 MOV25 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL45 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL27 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL42 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL14 DEL7 DEL21 DEL8 DEL25