Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-    return this.queue.take();
+    throw new UnsupportedOperationException();
+    // No code currently calls this method.
+    // To implement it we need to make sure that the callers
+    // call freeOffHeapResources on the returned GatewaySenderEventImpl.
+    //return this.queue.take();
+                continue;
-          EntryEventImpl event = new EntryEventImpl(
+          EntryEventImpl event = EntryEventImpl.create(
-              EnumListenerEvent.AFTER_UPDATE, event, null);
+              EnumListenerEvent.AFTER_UPDATE, event, null); // OFFHEAP: event for pdx type meta data so it should never be off-heap
-                ge.getDeserializedValue(), currentTime - ge.getCreationTime() }));
+                ge.getValueAsString(true), currentTime - ge.getCreationTime() }));
+    
+    closeProcessor();
+    
+  
+  public void closeProcessor() {
+    if (logger.isDebugEnabled()) {
+      logger.debug("Closing dispatcher");
+    }
+    try {
+      if (this.sender.isPrimary() && this.queue.size() > 0) {
+        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayImpl_DESTROYING_GATEWAYEVENTDISPATCHER_WITH_ACTIVELY_QUEUED_DATA));
+      }
+    } catch (RegionDestroyedException ignore) {
+    } catch (CancelException ignore) {
+    } catch (CacheException ignore) {
+      // just checking in case we should log a warning
+    } finally {
+      this.queue.close();
+      if (logger.isDebugEnabled()) {
+        logger.debug("Closed dispatcher");
+      }
+    }
+  }
-        buffer.append(ge.deserialize(ge.getValue()));
+        buffer.append(ge.getValueAsString(true)).append(",");

INS31 INS83 INS39 INS42 INS8 INS53 INS21 INS25 INS54 INS14 INS32 INS32 INS8 INS8 INS12 INS12 INS12 INS8 INS43 INS42 INS42 INS42 INS21 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS25 INS42 INS32 INS27 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS32 INS32 INS8 INS42 INS42 INS45 INS32 INS27 INS21 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS21 INS22 INS42 MOV32 INS34 INS32 INS52 INS42 INS32 INS32 INS52 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS45 MOV43 INS42 INS42 INS40 MOV42 MOV42 MOV32 INS32 UPD42 INS9 INS42 INS42 MOV11 INS40 MOV32 MOV32 INS33 INS9 MOV32 INS18 UPD42 INS9 DEL41 DEL42 DEL43 DEL40 DEL33 DEL9 DEL14 DEL42 DEL42 DEL32 DEL32