Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is used as the notification that a client interest registration or
- * unregistration event occurred.
+ * This message is used as the notification that a client interest registration or unregistration
+ * event occurred.
-  
-  /** The <code>InterestRegistrationEvent</code>  */
+
+  /** The <code>InterestRegistrationEvent</code> */
-  public InterestEventMessage() {
-  }
+  public InterestEventMessage() {}
-  @Override  
+  @Override
-  @Override  
-  protected final boolean operateOnPartitionedRegion(
-      final DistributionManager dm, PartitionedRegion r, long startTime)
-      throws ForceReattemptException {
+  @Override
+  protected final boolean operateOnPartitionedRegion(final DistributionManager dm,
+      PartitionedRegion r, long startTime) throws ForceReattemptException {
-      }
-      catch (Exception e) {
-        sendReply(
-            getSender(),
-            getProcessorId(),
-            dm,
-            new ReplyException(new ForceReattemptException(
-                "Caught exception during interest registration processing:", e)),
-            r, startTime);
+      } catch (Exception e) {
+        sendReply(getSender(), getProcessorId(), dm, new ReplyException(new ForceReattemptException(
+            "Caught exception during interest registration processing:", e)), r, startTime);
-    }
-    else {
-      throw new InternalError(
-          "InterestEvent message was sent to a member with no storage.");
+    } else {
+      throw new InternalError("InterestEvent message was sent to a member with no storage.");
-  @Override  
+  @Override
-    this.event = (InterestRegistrationEvent)DataSerializer.readObject(in);
+    this.event = (InterestRegistrationEvent) DataSerializer.readObject(in);
-  @Override  
+  @Override
-   * @param recipients
-   *          the Set of members that the get message is being sent to
-   * @param region
-   *          the PartitionedRegion for which interest event was received
-   * @param event
-   *          the InterestRegistrationEvent to send
+   * @param recipients the Set of members that the get message is being sent to
+   * @param region the PartitionedRegion for which interest event was received
+   * @param event the InterestRegistrationEvent to send
-   * @throws ForceReattemptException
-   *           if the peer is no longer available
+   * @throws ForceReattemptException if the peer is no longer available
-  public static InterestEventResponse send(Set recipients,
-      PartitionedRegion region, final InterestRegistrationEvent event)
-      throws ForceReattemptException {
-    InterestEventResponse response = new InterestEventResponse(region
-        .getSystem(), recipients);
-    InterestEventMessage m = new InterestEventMessage(recipients, region
-        .getPRId(), response.getProcessorId(), event, response);
+  public static InterestEventResponse send(Set recipients, PartitionedRegion region,
+      final InterestRegistrationEvent event) throws ForceReattemptException {
+    InterestEventResponse response = new InterestEventResponse(region.getSystem(), recipients);
+    InterestEventMessage m = new InterestEventMessage(recipients, region.getPRId(),
+        response.getProcessorId(), event, response);
-      throw new ForceReattemptException("Failed sending <" + m + "> to "
-          + failures);
+      throw new ForceReattemptException("Failed sending <" + m + "> to " + failures);
-  public static class InterestEventReplyMessage extends
-      HighPriorityDistributionMessage {
+  public static class InterestEventReplyMessage extends HighPriorityDistributionMessage {
-    public InterestEventReplyMessage() {
-    }
+    public InterestEventReplyMessage() {}
-    public static void send(InternalDistributedMember recipient,
-        int processorId, DM dm) throws ForceReattemptException {
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm)
+        throws ForceReattemptException {
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    @Override  
+    @Override
-        logger.trace(LogMarker.DM, "InterestEventReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "InterestEventReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-        ReplyProcessor21 processor = ReplyProcessor21
-            .getProcessor(this.processorId);
+        ReplyProcessor21 processor = ReplyProcessor21.getProcessor(this.processorId);
-      }
-      finally {
-        dm.getStats().incReplyMessageTime(
-            DistributionStats.getStatTime() - startTime);
+      } finally {
+        dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);
-    @Override  
+    @Override
-    @Override  
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    @Override  
+    @Override
-      StringBuffer sb = new StringBuffer().append("InterestEventReplyMessage ")
-          .append("processorid=").append(this.processorId).append(
-              " reply to sender ").append(this.getSender());
+      StringBuffer sb =
+          new StringBuffer().append("InterestEventReplyMessage ").append("processorid=")
+              .append(this.processorId).append(" reply to sender ").append(this.getSender());
-   * A processor to capture the value returned by {@link
-   * org.apache.geode.internal.cache.partitioned.InterestEventMessage.InterestEventReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.InterestEventMessage.InterestEventReplyMessage}
-      }
-      catch (ForceReattemptException e) {
-        logger.debug("InterestEventResponse got ForceReattemptException; rethrowing {}", e.getMessage(), e);
+      } catch (ForceReattemptException e) {
+        logger.debug("InterestEventResponse got ForceReattemptException; rethrowing {}",
+            e.getMessage(), e);
-      }
-      catch (CacheException e) {
-        final String msg = "InterestEventResponse got remote CacheException, throwing ForceReattemptException";
+      } catch (CacheException e) {
+        final String msg =
+            "InterestEventResponse got remote CacheException, throwing ForceReattemptException";

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66