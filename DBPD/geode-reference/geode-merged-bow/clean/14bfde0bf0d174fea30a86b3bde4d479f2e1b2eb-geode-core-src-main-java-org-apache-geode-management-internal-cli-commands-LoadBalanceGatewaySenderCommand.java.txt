Merge branch 'release/1.8.0'

-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class LoadBalanceGatewaySenderCommand extends InternalGfshCommand {
+public class LoadBalanceGatewaySenderCommand extends SingleGfshCommand {
-  public Result loadBalanceGatewaySender(@CliOption(key = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID,
-      mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
-      help = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID__HELP) String senderId) {
+  public ResultModel loadBalanceGatewaySender(
+      @CliOption(key = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID,
+          mandatory = true, optionContext = ConverterHint.GATEWAY_SENDER_ID,
+          help = CliStrings.LOAD_BALANCE_GATEWAYSENDER__ID__HELP) String senderId) {
-    Result result;
-    SystemManagementService service = (SystemManagementService) getManagementService();
-    TabularResultData resultData = ResultBuilder.createTabularResultData();
-    Set<DistributedMember> dsMembers = getAllNormalMembers();
+    SystemManagementService service = getManagementService();
+    Set<DistributedMember> dsMembers = getAllNormalMembers();
-      result = ResultBuilder.createInfoResult(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
-    } else {
-      boolean gatewaySenderExists = false;
-      for (DistributedMember member : dsMembers) {
-        GatewaySenderMXBean bean;
-        if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
-          bean = service.getLocalGatewaySenderMXBean(senderId);
-        } else {
-          ObjectName objectName = service.getGatewaySenderMBeanName(member, senderId);
-          bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
-        }
-        if (bean != null) {
-          gatewaySenderExists = true;
-          bean.rebalance();
-          GatewayCommandsUtils.accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_OK, CliStrings.format(
-                  CliStrings.GATEWAY_SENDER_0_IS_REBALANCED_ON_MEMBER_1, senderId, member.getId()));
-        } else {
-          GatewayCommandsUtils.accumulateStartResult(resultData, member.getId(),
-              CliStrings.GATEWAY_ERROR,
-              CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1, senderId,
-                  member.getId()));
-        }
-      }
-      if (gatewaySenderExists) {
-        result = ResultBuilder.buildResult(resultData);
+      return ResultModel.createInfo(CliStrings.GATEWAY_MSG_MEMBERS_NOT_FOUND);
+    }
+
+    ResultModel resultModel = new ResultModel();
+    TabularResultModel resultData = resultModel.addTable(CliStrings.LOAD_BALANCE_GATEWAYSENDER);
+
+    boolean gatewaySenderExists = false;
+    for (DistributedMember member : dsMembers) {
+      GatewaySenderMXBean bean;
+      if (cache.getDistributedSystem().getDistributedMember().getId().equals(member.getId())) {
+        bean = service.getLocalGatewaySenderMXBean(senderId);
-        result = ResultBuilder.createInfoResult(CliStrings.format(
-            CliStrings.GATEWAY_SENDER_0_IS_NOT_FOUND_ON_ANY_MEMBER, new Object[] {senderId}));
+        ObjectName objectName = service.getGatewaySenderMBeanName(member, senderId);
+        bean = service.getMBeanProxy(objectName, GatewaySenderMXBean.class);
+      }
+      if (bean != null) {
+        gatewaySenderExists = true;
+        bean.rebalance();
+        resultData.addMemberStatusResultRow(member.getId(),
+            CliStrings.GATEWAY_OK, CliStrings.format(
+                CliStrings.GATEWAY_SENDER_0_IS_REBALANCED_ON_MEMBER_1, senderId, member.getId()));
+      } else {
+        resultData.addMemberStatusResultRow(member.getId(),
+            CliStrings.GATEWAY_ERROR,
+            CliStrings.format(CliStrings.GATEWAY_SENDER_0_IS_NOT_AVAILABLE_ON_MEMBER_1, senderId,
+                member.getId()));
-    return result;
+    if (!gatewaySenderExists) {
+      return ResultModel.createInfo(CliStrings.format(
+          CliStrings.GATEWAY_SENDER_0_IS_NOT_FOUND_ON_ANY_MEMBER, new Object[] {senderId}));
+    }
+
+    return resultModel;

UPD40 UPD40 UPD40 UPD43 UPD42 UPD43 MOV8 UPD42 MOV25 MOV60 MOV60 MOV60 INS25 INS60 INS60 INS41 MOV43 MOV32 INS8 INS43 INS59 INS43 INS59 INS38 INS42 MOV32 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS41 INS32 INS43 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8