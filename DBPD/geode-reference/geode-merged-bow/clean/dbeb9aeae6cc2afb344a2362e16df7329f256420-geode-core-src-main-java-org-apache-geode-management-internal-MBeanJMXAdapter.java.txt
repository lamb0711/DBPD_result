Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static MBeanServer mbeanServer = ManagementFactory
-      .getPlatformMBeanServer();
+  public static MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();
-	 * 
-	 */
+   * 
+   */
-  
+
-//  private LogWriterI18n logger = InternalDistributedSystem.getLoggerI18n();
+  // private LogWriterI18n logger = InternalDistributedSystem.getLoggerI18n();
-  
+
-    this.distMember = InternalDistributedSystem.getConnectedInstance()
-        .getDistributedMember();  
+    this.distMember = InternalDistributedSystem.getConnectedInstance().getDistributedMember();
-   * This method will register an MBean in GemFire domain. Even if the client
-   * provides a domain name it will be ignored and GemFire domain name will be
-   * used.
+   * This method will register an MBean in GemFire domain. Even if the client provides a domain name
+   * it will be ignored and GemFire domain name will be used.
-   * This method checks the local Filter for registering the MBean. If filtered
-   * the MBean wont be registered. Although the filter will remember the
-   * filtered MBean and register it once the filter is removed.
+   * This method checks the local Filter for registering the MBean. If filtered the MBean wont be
+   * registered. Although the filter will remember the filtered MBean and register it once the
+   * filter is removed.
-        
-        newObjectName = ObjectName.getInstance(OBJECTNAME__PREFIX + objectKeyProperty + 
-            KEYVAL_SEPARATOR + "member=" + member);
+
+        newObjectName = ObjectName.getInstance(
+            OBJECTNAME__PREFIX + objectKeyProperty + KEYVAL_SEPARATOR + "member=" + member);
-      if(!isRegistered(objectName)){
+      if (!isRegistered(objectName)) {
-        Class intfTyp = (Class)intfTyps[i];
+        Class intfTyp = (Class) intfTyps[i];
-      Class supreClassTyp = (Class)cls.getGenericSuperclass();
-      if (supreClassTyp != null
-          && supreClassTyp.equals(NotificationBroadcasterSupport.class)) {
+      Class supreClassTyp = (Class) cls.getGenericSuperclass();
+      if (supreClassTyp != null && supreClassTyp.equals(NotificationBroadcasterSupport.class)) {
-   * This method will register an MBean in GemFire domain. Even if the client
-   * provides a domain name it will be ignored and GemFire domain name will be
-   * used.
+   * This method will register an MBean in GemFire domain. Even if the client provides a domain name
+   * it will be ignored and GemFire domain name will be used.
-   * This method checks the local Filter for registering the MBean. If filtered
-   * the MBean wont be registered. Although the filter will remember the
-   * filtered MBean and register it once the filter is removed.
+   * This method checks the local Filter for registering the MBean. If filtered the MBean wont be
+   * registered. Although the filter will remember the filtered MBean and register it once the
+   * filter is removed.
-      if(!isRegistered(objectName)){
+      if (!isRegistered(objectName)) {
-      
+
-  
-  public Object getMBeanObject(ObjectName objectName){
+
+  public Object getMBeanObject(ObjectName objectName) {
-  
+
-  public boolean isLocalMBean(ObjectName objectName){
+  public boolean isLocalMBean(ObjectName objectName) {
+
-}
-  
-  public boolean isRegistered(ObjectName objectName){
-    
+  }
+
+  public boolean isRegistered(ObjectName objectName) {
+
-   * This method returns the name that will be used for a DistributedMember when it is registered
-   * as a JMX bean.
+   * This method returns the name that will be used for a DistributedMember when it is registered as
+   * a JMX bean.
-  
+
-   * Return a String that been modified to be compliant as a property of an
-   * ObjectName.
+   * Return a String that been modified to be compliant as a property of an ObjectName.
-   * The property name of an ObjectName may not contain any of the following
-   * characters: <b><i>: , = * ?</i></b>
+   * The property name of an ObjectName may not contain any of the following characters: <b><i>: , =
+   * * ?</i></b>
-   * This method will replace the above non-compliant characters with a dash:
-   * <b><i>-</i></b>
+   * This method will replace the above non-compliant characters with a dash: <b><i>-</i></b>
-   * Note: this is <code>public</code> because certain tests call this from
-   * outside of the package. 
+   * Note: this is <code>public</code> because certain tests call this from outside of the package.
-   * @param value
-   *          the potentially non-compliant ObjectName property
+   * @param value the potentially non-compliant ObjectName property
-  
+
-  
-  private static boolean isQuoted(String value){
+
+  private static boolean isQuoted(String value) {
-    if (len < 2 || value.charAt(0) != '"' || value.charAt(len - 1) != '"'){
+    if (len < 2 || value.charAt(0) != '"' || value.charAt(len - 1) != '"') {
-    }else{
+    } else {
-	 * 
-	 */
+   * 
+   */
-    ObjectName objName = getClientServiceMBeanName(serverPort,distMember);
+    ObjectName objName = getClientServiceMBeanName(serverPort, distMember);
-  public DistributedLockServiceMXBean getDistributedLockServiceMXBean(
-      String lockServiceName) {
+  public DistributedLockServiceMXBean getDistributedLockServiceMXBean(String lockServiceName) {
-  
+
-  
+
-  
+
-  
+
-    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN, new Object[] { getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN,
+        new Object[] {getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN, new Object[] { makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN,
+        new Object[] {makeCompliantName(member)})));
-  public static ObjectName getRegionMBeanName(DistributedMember member,
-      String regionPath) {
+  public static ObjectName getRegionMBeanName(DistributedMember member, String regionPath) {
-        new Object[] { makeCompliantRegionPath(regionPath),
-            getMemberNameOrId(member) })));
+        new Object[] {makeCompliantRegionPath(regionPath), getMemberNameOrId(member)})));
-        new Object[] { makeCompliantRegionPath(regionPath),
-            makeCompliantName(member) })));
+        new Object[] {makeCompliantRegionPath(regionPath), makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__REGION_MXBEAN, new Object[] { makeCompliantRegionPath(regionPath),
-        memberMBeanName.getKeyProperty(ManagementConstants.OBJECTNAME_MEMBER_APPENDER) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__REGION_MXBEAN,
+        new Object[] {makeCompliantRegionPath(regionPath),
+            memberMBeanName.getKeyProperty(ManagementConstants.OBJECTNAME_MEMBER_APPENDER)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN, new Object[] { diskName, getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN,
+        new Object[] {diskName, getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN, new Object[] { diskName, makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN,
+        new Object[] {diskName, makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__CLIENTSERVICE_MXBEAN, new Object[] { String.valueOf(serverPort),
-        getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__CLIENTSERVICE_MXBEAN,
+        new Object[] {String.valueOf(serverPort), getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__CLIENTSERVICE_MXBEAN, new Object[] { String.valueOf(serverPort),
-        makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__CLIENTSERVICE_MXBEAN,
+        new Object[] {String.valueOf(serverPort), makeCompliantName(member)})));
-  public static ObjectName getLockServiceMBeanName(DistributedMember member, String lockServiceName) {
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN, new Object[] { lockServiceName,
-        getMemberNameOrId(member) })));
+  public static ObjectName getLockServiceMBeanName(DistributedMember member,
+      String lockServiceName) {
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN,
+        new Object[] {lockServiceName, getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN, new Object[] { lockServiceName,
-        makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN,
+        new Object[] {lockServiceName, makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN, new Object[] { getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN,
+        new Object[] {getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN, new Object[] { makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN,
+        new Object[] {makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN, new Object[] { id, getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN,
+        new Object[] {id, getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN, new Object[] { id, makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN,
+        new Object[] {id, makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN, new Object[] { queueId,
-        getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN,
+        new Object[] {queueId, getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN, new Object[] { queueId,
-        makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN,
+        new Object[] {queueId, makeCompliantName(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN, new Object[] { makeCompliantRegionPath(regionPath) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN,
+        new Object[] {makeCompliantRegionPath(regionPath)})));
-  
+
+   * 
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN, new Object[] { regionPath })));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN, new Object[] {regionPath})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDLOCKSERVICE_MXBEAN, new Object[] { lockService })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDLOCKSERVICE_MXBEAN,
+        new Object[] {lockService})));
-    String member = getMemberNameOrId(InternalDistributedSystem.getConnectedInstance().getDistributedMember());
-    return getObjectName((MessageFormat.format(OBJECTNAME__MANAGER_MXBEAN, new Object[] { member })));
+    String member =
+        getMemberNameOrId(InternalDistributedSystem.getConnectedInstance().getDistributedMember());
+    return getObjectName((MessageFormat.format(OBJECTNAME__MANAGER_MXBEAN, new Object[] {member})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN, new Object[] { getMemberNameOrId(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN,
+        new Object[] {getMemberNameOrId(member)})));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN, new Object[] { makeCompliantName(member) })));
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN,
+        new Object[] {makeCompliantName(member)})));
-  public static ObjectName getCacheServiceMBeanName(DistributedMember member, String cacheServiceId) {
-    return getObjectName((MessageFormat.format(OBJECTNAME__CACHESERVICE_MXBEAN, new Object[] { cacheServiceId,
-        getMemberNameOrId(member) })));
+  public static ObjectName getCacheServiceMBeanName(DistributedMember member,
+      String cacheServiceId) {
+    return getObjectName((MessageFormat.format(OBJECTNAME__CACHESERVICE_MXBEAN,
+        new Object[] {cacheServiceId, getMemberNameOrId(member)})));
-  
-  public static boolean isAttributeAvailable(String attributeName,
-      String objectName) {
-      try {
-        ObjectName objName = new ObjectName(objectName);
-        mbeanServer.getAttribute(objName, attributeName);
-      } catch (MalformedObjectNameException e) {
-        return false;
-      } catch (NullPointerException e) {
-        return false;
-      } catch (AttributeNotFoundException e) {
-        return false;
-      } catch (InstanceNotFoundException e) {
-        return false;
-      } catch (MBeanException e) {
-        return false;
-      } catch (ReflectionException e) {
-        return false;
-      }
+  public static boolean isAttributeAvailable(String attributeName, String objectName) {
+
+    try {
+      ObjectName objName = new ObjectName(objectName);
+      mbeanServer.getAttribute(objName, attributeName);
+    } catch (MalformedObjectNameException e) {
+      return false;
+    } catch (NullPointerException e) {
+      return false;
+    } catch (AttributeNotFoundException e) {
+      return false;
+    } catch (InstanceNotFoundException e) {
+      return false;
+    } catch (MBeanException e) {
+      return false;
+    } catch (ReflectionException e) {
+      return false;
+    }
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66