Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides the ways to send emails to all the registered email id It also
- * provides the way to add/remove email ids. Can be used to send email in case
- * of any alerts raised / warning / failure in gemfire.
+ * Provides the ways to send emails to all the registered email id It also provides the way to
+ * add/remove email ids. Can be used to send email in case of any alerts raised / warning / failure
+ * in gemfire.
-  
-  public MailManager() {
-  }
+
+  public MailManager() {}
-    }
-    finally {
+    } finally {
-   * @param emailData
-   *                Instance of EmailData
+   * @param emailData Instance of EmailData
-  // Why a separate method & class EmailData needed??? 
+  // Why a separate method & class EmailData needed???
-    if (mailHost == null || mailHost.length() == 0
-        || emailData == null || mailToAddresses.length == 0) {
-      logger.error(LocalizedMessage.create(LocalizedStrings.MailManager_REQUIRED_MAILSERVER_CONFIGURATION_NOT_SPECIFIED));
+    if (mailHost == null || mailHost.length() == 0 || emailData == null
+        || mailToAddresses.length == 0) {
+      logger.error(LocalizedMessage
+          .create(LocalizedStrings.MailManager_REQUIRED_MAILSERVER_CONFIGURATION_NOT_SPECIFIED));
-        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(
-            mailToAddresses[i]));
+        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(mailToAddresses[i]));
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.MailManager_EMAIL_ALERT_HAS_BEEN_SENT_0_1_2,
-          new Object[] { mailToList, subject, message }));
+      logger.info(
+          LocalizedMessage.create(LocalizedStrings.MailManager_EMAIL_ALERT_HAS_BEEN_SENT_0_1_2,
+              new Object[] {mailToList, subject, message}));
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-      buf.append(LocalizedStrings.MailManager_AN_EXCEPTION_OCCURRED_WHILE_SENDING_EMAIL.toLocalizedString());
-      buf.append(LocalizedStrings.MailManager_UNABLE_TO_SEND_EMAIL_PLEASE_CHECK_YOUR_EMAIL_SETTINGS_AND_LOG_FILE.toLocalizedString());
-      buf.append("\n\n").append(LocalizedStrings.MailManager_EXCEPTION_MESSAGE_0.toLocalizedString(ex.getMessage()));
-      buf.append("\n\n").append(LocalizedStrings.MailManager_FOLLOWING_EMAIL_WAS_NOT_DELIVERED.toLocalizedString());
-      buf.append("\n\t").append(LocalizedStrings.MailManager_MAIL_HOST_0.toLocalizedString(mailHost));
+      buf.append(LocalizedStrings.MailManager_AN_EXCEPTION_OCCURRED_WHILE_SENDING_EMAIL
+          .toLocalizedString());
+      buf.append(
+          LocalizedStrings.MailManager_UNABLE_TO_SEND_EMAIL_PLEASE_CHECK_YOUR_EMAIL_SETTINGS_AND_LOG_FILE
+              .toLocalizedString());
+      buf.append("\n\n").append(
+          LocalizedStrings.MailManager_EXCEPTION_MESSAGE_0.toLocalizedString(ex.getMessage()));
+      buf.append("\n\n").append(
+          LocalizedStrings.MailManager_FOLLOWING_EMAIL_WAS_NOT_DELIVERED.toLocalizedString());
+      buf.append("\n\t")
+          .append(LocalizedStrings.MailManager_MAIL_HOST_0.toLocalizedString(mailHost));
-  public void close() {
-  }
+  public void close() {}
-   * @param host
-   *                mail host server name
+   * @param host mail host server name
-   * @param fromAddress
-   *                mailFrom email id
+   * @param fromAddress mailFrom email id
-    return (String[])mailToSet.toArray(new String[0]);
+    return (String[]) mailToSet.toArray(new String[0]);
-    }
-    else {
+    } else {
-    MailManager mailManager = new MailManager("mailsrv1.gemstone.com",
-        "hkhanna@gemstone.com");
+    MailManager mailManager = new MailManager("mailsrv1.gemstone.com", "hkhanna@gemstone.com");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66