Merge branch 'release/1.8.0'

+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  private static final ThreadPoolExecutor executor;
+  private static final ExecutorService executor;
-      ThreadFactory tf = new ThreadFactory() {
-        private int nextId = 0;
-
-        public Thread newThread(final Runnable command) {
-          String name = "Expiration threads";
-          final ThreadGroup group = LoggingThreadGroup.createThreadGroup(name);
-          final Runnable r = new Runnable() {
-            public void run() {
-              ConnectionTable.threadWantsSharedResources();
-              try {
-                command.run();
-              } finally {
-                ConnectionTable.releaseThreadsSockets();
-              }
-            }
-          };
-          Thread thread = new Thread(group, r, "Expiry " + nextId++);
-          thread.setDaemon(true);
-          return thread;
-        }
-      };
-      // LinkedBlockingQueue q = new LinkedBlockingQueue();
-      SynchronousQueue q = new SynchronousQueue();
-      executor = new PooledExecutorWithDMStats(q, nThreads, tf, null);
+      executor = LoggingExecutors.newThreadPoolWithSynchronousFeed("Expiry ",
+          (Runnable command) -> doExpiryThread(command),
+          nThreads);
+  private static void doExpiryThread(Runnable command) {
+    ConnectionTable.threadWantsSharedResources();
+    try {
+      command.run();
+    } finally {
+      ConnectionTable.releaseThreadsSockets();
+    }
+  }
+
-        LocalizedStrings.ExpiryTask_UNRECOGNIZED_EXPIRATION_ACTION_0.toLocalizedString(action));
+        String.format("unrecognized expiration action: %s", action));
-      logger.fatal(
-          LocalizedMessage.create(LocalizedStrings.ExpiryTask_EXCEPTION_IN_EXPIRATION_TASK), ex);
+      logger.fatal("Exception in expiration task", ex);
-      logger.fatal(
-          LocalizedMessage.create(LocalizedStrings.ExpiryTask_EXCEPTION_IN_EXPIRATION_TASK), ex);
+      logger.fatal("Exception in expiration task", ex);

MOV26 UPD40 UPD40 MOV31 UPD43 INS83 UPD83 UPD42 INS44 UPD42 MOV43 INS42 INS12 MOV12 INS21 MOV44 INS8 INS7 UPD42 INS42 INS45 MOV21 INS21 INS42 INS32 INS32 UPD42 MOV42 INS42 INS45 INS86 INS42 INS42 INS42 INS45 INS42 INS45 MOV44 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL37 DEL27 DEL14 DEL59 DEL60 DEL9 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL14 DEL7 DEL21 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12