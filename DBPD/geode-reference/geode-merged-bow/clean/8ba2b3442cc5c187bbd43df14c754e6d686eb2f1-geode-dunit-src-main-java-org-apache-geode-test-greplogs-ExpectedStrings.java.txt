GEODE-6100: Cleanup suspect string logic for better readability (#2920)


-    if (type.equals("junit") || type.equals("java") || type.equals("query")
-        || type.equals("dunit")) {
-      return true;
-    } else {
-      return false;
-    }
+    return type.equals("junit") || type.equals("java") || type.equals("query")
+        || type.equals("dunit");
-  public static List create(String type) {
-    List expected = new ArrayList();
+  public static List<Pattern> create(String type) {
+    List<Pattern> expected = new ArrayList<>();
-    // Exclude this since the only tests with securty enabled, expect to see
+    // Exclude this since the only tests with security enabled, expect to see
-    if (type.equals("junit") || type.equals("java") || type.equals("query")) {
-      expected.add(Pattern.compile("TEST EXCEPTION"));
-      expected.add(Pattern.compile("testLogLevels"));
-      expected.add(Pattern.compile("On iteration"));
-      expected.add(Pattern.compile("signal count"));
-      // Remove when davidw fixes
-      expected.add(Pattern.compile("Expected"));
-      // below here for gfx unit tests
-      expected.add(Pattern.compile("Valid documents must have a"));
-      expected.add(Pattern.compile("Loaded java.lang.ClassCastException"));
-      expected.add(Pattern.compile("Loaded java.io.InvalidClassException"));
-      expected.add(Pattern.compile("Loaded java.lang.NullPointerException"));
-      expected.add(Pattern.compile("Loaded java.lang.ArrayIndexOutOfBoundsException"));
-      expected.add(Pattern.compile("Loaded java.lang.IndexOutOfBoundsException"));
-      expected.add(Pattern.compile("SucessfulTest:"));
-      expected.add(Pattern.compile("SQLException: Database 'newDB' not found"));
-      expected.add(Pattern.compile("SQLException: Database 'newDB1' not found"));
-      expected.add(Pattern.compile("IGNORE_EXCEPTION_test"));
-      expected.add(Pattern.compile("Unsupported at this time"));
-      expected.add(Pattern.compile("DiskAccessException occurred as expected"));
-      expected.add(Pattern.compile("Oplog::createOplog:Exception in preblowing the file"));
-    } else if (type.equals("dunit")) {
-      expected.add(Pattern.compile("INCOMPATIBLE_ROOT"));
-      expected.add(Pattern.compile("connecting to locator"));
-      expected.add(Pattern.compile("ItsOkayForMyClassNotToBeFound"));
-      expected.add(Pattern.compile("Test Exception"));
-      expected.add(Pattern.compile("make sure exceptions from close callbacks"));
-      expected.add(Pattern.compile("Please ignore"));
-      expected.add(Pattern.compile("I have been thrown from TestFunction"));
-      expected.add(Pattern.compile("No admin on"));
-      expected.add(Pattern.compile("nonExistentMethod"));
-      expected.add(Pattern.compile("Expected exception"));
-      expected.add(Pattern.compile("ConnectionPoolTestNonSerializable"));
-      expected.add(Pattern.compile("One or more DUnit tests failed"));
-      expected.add(Pattern.compile("ReplyException"));
-      expected.add(Pattern.compile("fine 2"));
-      expected.add(Pattern.compile("TESTING A VERY UNIQUE"));
-      expected.add(Pattern.compile("-01-01"));
-      expected.add(Pattern.compile("testNBRegionDestructionDuringGetInitialImage"));
-      expected.add(Pattern.compile("SQLException: Database 'newDB' not found"));
-      expected.add(Pattern.compile("SQLException: Failed to start database 'newDB'"));
-      expected.add(Pattern.compile("SQLException: Database 'newDB1' not found"));
-      expected.add(Pattern.compile("INCORRECT_localhost"));
-      expected.add(Pattern.compile(
-          "WARNING: Failed to check connection: java.net.ConnectException: Connection refused"));
-      expected.add(
-          Pattern.compile("WARNING: Failed to call the method close..:java.rmi.ConnectException:"));
-      expected.add(Pattern.compile(
-          "WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table"));
-      expected.add(Pattern.compile(
-          "WARNING: Failed to restart: java.rmi.ConnectException: Connection refused to host: .* nested exception is:"));
-      expected.add(Pattern
-          .compile("UnitTests terminating abnormally after a client had a fatal task error"));
-      expected.add(Pattern.compile("Doing stack dump on all"));
-      expected.add(Pattern.compile("Unit test result: FAILED ==> Unsuccessfully ran JUnit tests"));
-      expected.add(Pattern.compile("IGNORE_EXCEPTION_test"));
-      expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
-      expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
-      expected.add(Pattern.compile("Redundancy has dropped below"));
-      expected.add(Pattern.compile("Could not find any server to host redundant client"));
-      expected.add(Pattern.compile("Could not find any server to host primary client"));
-      expected.add(Pattern.compile("Could not find any server to create redundant client"));
-      expected.add(Pattern.compile("Could not find any server to create primary client"));
-      expected.add(Pattern.compile("Pool unexpected closed socket on server"));
-      expected.add(Pattern.compile("SocketTimeoutException"));
-      expected.add(Pattern.compile("Could not initialize a primary queue on startup"));
-      expected.add(Pattern.compile(
-          "java.lang.IllegalArgumentException: Sample timestamp must be greater than previous timestamp"));
-      // The following 2 strings are ignored due to bug 52042
-      expected.add(Pattern.compile("failed accepting client connection"));
-      expected.add(Pattern.compile("Acceptor received unknown communication"));
-    } else if (type.equals("smoke")) {
-      expected.add(Pattern.compile("Doing stack dump on all"));
-      expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
-      expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
-      expected.add(Pattern.compile("Could not find Spring Shell library"));
-    } else if (type.equals("perf")) {
-      expected.add(Pattern.compile("Doing stack dump on all"));
-      expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
-      expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
-    } else if (type.equals("moresmoke")) {
-      expected.add(Pattern.compile(" expected error"));
-      expected.add(Pattern.compile("Doing stack dump on all"));
-      expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
-      expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
-    } else {
-      expected.add(Pattern.compile("runbattery\\(\\) returned false"));
-      expected.add(Pattern.compile(" expected error"));
-      expected.add(Pattern.compile("Doing stack dump on all"));
-      expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
-      expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
-      expected.add(Pattern.compile("HydraTask_initializeExpectException"));
-      expected.add(Pattern.compile("java.net.ConnectException: Connection refused"));
+    switch (type) {
+      case "junit":
+      case "java":
+      case "query":
+        expected.add(Pattern.compile("TEST EXCEPTION"));
+        expected.add(Pattern.compile("testLogLevels"));
+        expected.add(Pattern.compile("On iteration"));
+        expected.add(Pattern.compile("signal count"));
+        // Remove when davidw fixes
+        expected.add(Pattern.compile("Expected"));
+        // below here for gfx unit tests
+        expected.add(Pattern.compile("Valid documents must have a"));
+        expected.add(Pattern.compile("Loaded java.lang.ClassCastException"));
+        expected.add(Pattern.compile("Loaded java.io.InvalidClassException"));
+        expected.add(Pattern.compile("Loaded java.lang.NullPointerException"));
+        expected.add(Pattern.compile("Loaded java.lang.ArrayIndexOutOfBoundsException"));
+        expected.add(Pattern.compile("Loaded java.lang.IndexOutOfBoundsException"));
+        expected.add(Pattern.compile("SucessfulTest:"));
+        expected.add(Pattern.compile("SQLException: Database 'newDB' not found"));
+        expected.add(Pattern.compile("SQLException: Database 'newDB1' not found"));
+        expected.add(Pattern.compile("IGNORE_EXCEPTION_test"));
+        expected.add(Pattern.compile("Unsupported at this time"));
+        expected.add(Pattern.compile("DiskAccessException occurred as expected"));
+        expected.add(Pattern.compile("Oplog::createOplog:Exception in preblowing the file"));
+        break;
+      case "dunit":
+        expected.add(Pattern.compile("INCOMPATIBLE_ROOT"));
+        expected.add(Pattern.compile("connecting to locator"));
+        expected.add(Pattern.compile("ItsOkayForMyClassNotToBeFound"));
+        expected.add(Pattern.compile("Test Exception"));
+        expected.add(Pattern.compile("make sure exceptions from close callbacks"));
+        expected.add(Pattern.compile("Please ignore"));
+        expected.add(Pattern.compile("I have been thrown from TestFunction"));
+        expected.add(Pattern.compile("No admin on"));
+        expected.add(Pattern.compile("nonExistentMethod"));
+        expected.add(Pattern.compile("Expected exception"));
+        expected.add(Pattern.compile("ConnectionPoolTestNonSerializable"));
+        expected.add(Pattern.compile("One or more DUnit tests failed"));
+        expected.add(Pattern.compile("ReplyException"));
+        expected.add(Pattern.compile("fine 2"));
+        expected.add(Pattern.compile("TESTING A VERY UNIQUE"));
+        expected.add(Pattern.compile("-01-01"));
+        expected.add(Pattern.compile("testNBRegionDestructionDuringGetInitialImage"));
+        expected.add(Pattern.compile("SQLException: Database 'newDB' not found"));
+        expected.add(Pattern.compile("SQLException: Failed to start database 'newDB'"));
+        expected.add(Pattern.compile("SQLException: Database 'newDB1' not found"));
+        expected.add(Pattern.compile("INCORRECT_localhost"));
+        expected.add(Pattern.compile(
+            "WARNING: Failed to check connection: java.net.ConnectException: Connection refused"));
+        expected.add(
+            Pattern
+                .compile("WARNING: Failed to call the method close..:java.rmi.ConnectException:"));
+        expected.add(Pattern.compile(
+            "WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table"));
+        expected.add(Pattern.compile(
+            "WARNING: Failed to restart: java.rmi.ConnectException: Connection refused to host: .* nested exception is:"));
+        expected.add(Pattern
+            .compile("UnitTests terminating abnormally after a client had a fatal task error"));
+        expected.add(Pattern.compile("Doing stack dump on all"));
+        expected
+            .add(Pattern.compile("Unit test result: FAILED ==> Unsuccessfully ran JUnit tests"));
+        expected.add(Pattern.compile("IGNORE_EXCEPTION_test"));
+        expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
+        expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
+        expected.add(Pattern.compile("Redundancy has dropped below"));
+        expected.add(Pattern.compile("Could not find any server to host redundant client"));
+        expected.add(Pattern.compile("Could not find any server to host primary client"));
+        expected.add(Pattern.compile("Could not find any server to create redundant client"));
+        expected.add(Pattern.compile("Could not find any server to create primary client"));
+        expected.add(Pattern.compile("Pool unexpected closed socket on server"));
+        expected.add(Pattern.compile("SocketTimeoutException"));
+        expected.add(Pattern.compile("Could not initialize a primary queue on startup"));
+        expected.add(Pattern.compile(
+            "java.lang.IllegalArgumentException: Sample timestamp must be greater than previous timestamp"));
+        // The following 2 strings are ignored due to bug 52042
+        expected.add(Pattern.compile("failed accepting client connection"));
+        expected.add(Pattern.compile("Acceptor received unknown communication"));
+        break;
+      case "smoke":
+        expected.add(Pattern.compile("Doing stack dump on all"));
+        expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
+        expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
+        expected.add(Pattern.compile("Could not find Spring Shell library"));
+        break;
+      case "perf":
+        expected.add(Pattern.compile("Doing stack dump on all"));
+        expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
+        expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
+        break;
+      case "moresmoke":
+        expected.add(Pattern.compile(" expected error"));
+        expected.add(Pattern.compile("Doing stack dump on all"));
+        expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
+        expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
+        break;
+      default:
+        expected.add(Pattern.compile("runbattery\\(\\) returned false"));
+        expected.add(Pattern.compile(" expected error"));
+        expected.add(Pattern.compile("Doing stack dump on all"));
+        expected.add(Pattern.compile("SIGQUIT received, dumping threads"));
+        expected.add(Pattern.compile("Sleeping \\d+ seconds between stack dumps"));
+        expected.add(Pattern.compile("HydraTask_initializeExpectException"));
+        expected.add(Pattern.compile("java.net.ConnectException: Connection refused"));
+        break;

INS74 INS42 MOV8 MOV41 MOV43 INS43 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS50 MOV41 MOV27 INS42 INS74 INS42 INS49 INS49 INS49 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS10 INS49 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS10 INS49 MOV21 MOV21 MOV21 MOV21 INS10 INS49 MOV21 MOV21 MOV21 INS10 INS49 MOV21 MOV21 MOV21 MOV21 INS10 INS49 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS10 MOV43 INS43 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS74 MOV43 DEL9 DEL8 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL27 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL8 DEL42 DEL42 DEL45 DEL32 DEL8 DEL42 DEL42 DEL45 DEL32 DEL8 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8