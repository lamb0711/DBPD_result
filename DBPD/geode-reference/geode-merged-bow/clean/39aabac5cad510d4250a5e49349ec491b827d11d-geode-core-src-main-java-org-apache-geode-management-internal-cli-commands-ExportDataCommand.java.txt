Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

+import java.io.File;
+import java.util.Optional;
+import org.apache.geode.cache.snapshot.RegionSnapshotService;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
-      @CliOption(key = CliStrings.EXPORT_DATA__FILE, mandatory = true,
+      @CliOption(key = CliStrings.EXPORT_DATA__FILE,
+      @CliOption(key = CliStrings.EXPORT_DATA__DIR,
+          help = CliStrings.EXPORT_DATA__DIR__HELP) String dirPath,
-          mandatory = true, help = CliStrings.EXPORT_DATA__MEMBER__HELP) String memberNameOrId) {
+          mandatory = true, help = CliStrings.EXPORT_DATA__MEMBER__HELP) String memberNameOrId,
+      @CliOption(key = CliStrings.EXPORT_DATA__PARALLEL, unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.EXPORT_DATA__PARALLEL_HELP) boolean parallel) {
-    getSecurityService().authorizeRegionRead(regionName);
+    getSecurityService().authorize(Resource.DATA, Operation.READ, regionName);
-    Result result;
-
-    if (!filePath.endsWith(CliStrings.GEODE_DATA_FILE_EXTENSION)) {
-      return ResultBuilder.createUserErrorResult(CliStrings
-          .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION));
+    if (targetMember == null) {
+      return ResultBuilder.createUserErrorResult(
+          CliStrings.format(CliStrings.EXPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
+
+    Optional<Result> validationResult = validatePath(filePath, dirPath, parallel);
+    if (validationResult.isPresent()) {
+      return validationResult.get();
+    }
+
+    Result result;
-      if (targetMember != null) {
-        final String args[] = {regionName, filePath};
+      String path = dirPath != null ? defaultFileName(dirPath, regionName) : filePath;
+      final String args[] = {regionName, path, Boolean.toString(parallel)};
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(exportDataFunction, args, targetMember);
-        List<Object> results = (List<Object>) rc.getResult();
-
-        if (results != null) {
-          Object resultObj = results.get(0);
-          if (resultObj instanceof String) {
-            result = ResultBuilder.createInfoResult((String) resultObj);
-          } else if (resultObj instanceof Exception) {
-            result = ResultBuilder.createGemFireErrorResult(((Exception) resultObj).getMessage());
-          } else {
-            result = ResultBuilder.createGemFireErrorResult(
-                CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
-          }
-        } else {
-          result = ResultBuilder.createGemFireErrorResult(
-              CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
-        }
-      } else {
-        result = ResultBuilder.createUserErrorResult(
-            CliStrings.format(CliStrings.EXPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
-      }
+      ResultCollector<?, ?> rc = CliUtil.executeFunction(exportDataFunction, args, targetMember);
+      result = DataCommandUtil.getFunctionResult(rc, CliStrings.EXPORT_DATA);
+
+  private String defaultFileName(String dirPath, String regionName) {
+    return new File(dirPath, regionName + RegionSnapshotService.SNAPSHOT_FILE_EXTENSION)
+        .getAbsolutePath();
+  }
+
+  private Optional<Result> validatePath(String filePath, String dirPath, boolean parallel) {
+    if (filePath == null && dirPath == null) {
+      return Optional
+          .of(ResultBuilder.createUserErrorResult("Must specify a location to save snapshot"));
+    } else if (filePath != null && dirPath != null) {
+      return Optional.of(ResultBuilder.createUserErrorResult(
+          "Options \"file\" and \"dir\" cannot be specified at the same time"));
+    } else if (parallel && dirPath == null) {
+      return Optional.of(
+          ResultBuilder.createUserErrorResult("Must specify a directory to save snapshot files"));
+    }
+
+    if (dirPath == null && !filePath.endsWith(CliStrings.GEODE_DATA_FILE_EXTENSION)) {
+      return Optional.of(ResultBuilder.createUserErrorResult(CliStrings
+          .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION)));
+    }
+    return Optional.empty();
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS77 MOV43 INS42 INS77 INS39 INS42 INS25 MOV60 INS25 INS54 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS25 MOV25 INS41 INS42 INS80 INS80 INS42 INS80 INS80 INS80 INS80 UPD27 MOV27 MOV8 UPD74 INS32 INS8 INS8 MOV12 MOV12 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS8 INS25 INS27 INS32 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS45 INS42 INS40 UPD42 INS40 INS40 INS41 UPD43 UPD43 UPD42 INS32 INS42 INS42 INS41 INS60 INS60 MOV60 MOV21 INS14 INS42 INS27 INS27 INS41 INS27 INS8 INS25 INS27 MOV38 INS42 INS42 MOV32 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS59 INS83 MOV43 INS59 INS43 INS42 INS27 INS42 INS33 INS42 INS33 INS32 INS27 INS27 INS41 INS27 INS8 INS42 INS33 INS32 UPD42 MOV42 MOV42 INS42 INS16 INS42 INS85 INS4 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS32 INS42 INS27 INS41 INS42 INS42 MOV32 INS27 INS32 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV40 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 DEL42 DEL9 DEL80 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL11 DEL42 DEL40 DEL32 DEL83 DEL42 DEL85 DEL42 DEL42 DEL4 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL62 DEL42 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL8 DEL25 DEL8 DEL25 DEL8 DEL54