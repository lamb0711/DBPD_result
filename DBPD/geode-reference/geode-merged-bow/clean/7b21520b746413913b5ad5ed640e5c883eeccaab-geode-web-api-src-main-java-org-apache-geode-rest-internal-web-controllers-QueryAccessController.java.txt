GEODE-1570 - developer REST API should be secured

* Merged with develop after org.apache package rename
* Moved classes to internal.
* this closes #251

-import org.apache.logging.log4j.Logger;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.ResponseStatus;
-
+import com.wordnik.swagger.annotations.Api;
+import com.wordnik.swagger.annotations.ApiOperation;
+import com.wordnik.swagger.annotations.ApiResponse;
+import com.wordnik.swagger.annotations.ApiResponses;
-import com.wordnik.swagger.annotations.Api;
-import com.wordnik.swagger.annotations.ApiOperation;
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import org.apache.logging.log4j.Logger;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
-   * list all parameterized Queries created in a Gemfire data node
+   * list all parametrized Queries created in a Gemfire data node
-    value = "list all parameterized queries",
-    notes = "List all parameterized queries by id/name",
+    value = "list all parametrized queries",
+    notes = "List all parametrized queries by id/name",
-    @ApiResponse( code = 200, message = "OK." ),  
-    @ApiResponse( code = 500, message = "if GemFire throws an error or exception" )   
+    @ApiResponse( code = 200, message = "OK." ),
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
+    @ApiResponse( code = 500, message = "if GemFire throws an error or exception" )
- 
+    securityService.authorizeDataRead();
-      logger.debug("Listing all parameterized Queries in GemFire...");
+      logger.debug("Listing all parametrized Queries in GemFire...");
-    final Region<String, String> parameterizedQueryRegion = getQueryStore(PARAMETERIZED_QUERIES_REGION);
+    final Region<String, String> parametrizedQueryRegion = getQueryStore(PARAMETERIZED_QUERIES_REGION);
-    String queryListAsJson =  JSONUtils.formulateJsonForListQueriesCall(parameterizedQueryRegion);
+    String queryListAsJson =  JSONUtils.formulateJsonForListQueriesCall(parametrizedQueryRegion);
-   * Create a named, parameterized Query
+   * Create a named, parametrized Query
-    value = "create a parameterized Query",
-    notes = "Prepare the specified parameterized query and assign the corresponding ID for lookup",
+    value = "create a parametrized Query",
+    notes = "Prepare the specified parametrized query and assign the corresponding ID for lookup",
-    @ApiResponse( code = 409, message = "QueryId already assigned to other query." ),  
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
+    @ApiResponse( code = 409, message = "QueryId already assigned to other query." ),
+    securityService.authorizeDataWrite();
-      logger.debug("Creating a named, parameterized Query ({}) with ID ({})...", oqlStatement, queryId);
+      logger.debug("Creating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception" )   
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
+    @ApiResponse( code = 500, message = "GemFire throws an error or exception" )
-    
+    securityService.authorizeDataRead();
-   * Run named parameterized Query with ID
+   * Run named parametrized Query with ID
-    value = "run parameterized query",
+    value = "run parametrized query",
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
+    securityService.authorizeDataWrite();
-   * Update named, parameterized Query
+   * Update named, parametrized Query
-    value = "update parameterized query",
-    notes = "Update named, parameterized query by ID",
+    value = "update parametrized query",
+    notes = "Update named, parametrized query by ID",
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    
+    securityService.authorizeDataWrite();
-      logger.debug("Updating a named, parameterized Query ({}) with ID ({})...", oqlStatement, queryId);
+      logger.debug("Updating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
-  //delete named, parameterized query
+  //delete named, parametrized query
-   * Delete named, parameterized Query
+   * Delete named, parametrized Query
-    value = "delete parameterized query",
-    notes = "delete named, parameterized query by ID",
+    value = "delete parametrized query",
+    notes = "delete named, parametrized query by ID",
+    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
+    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-
+    securityService.authorizeDataWrite();
-      logger.debug("Deleting a named, parameterized Query with ID ({}).", queryId);
+      logger.debug("Deleting a named, parametrized Query with ID ({}).", queryId);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS21 INS21 INS21 INS21 MOV80 INS21 MOV80 INS21 INS25 UPD66 UPD45 UPD45 INS77 INS77 INS32 UPD66 UPD45 UPD45 INS77 INS77 INS32 INS77 INS77 INS32 UPD66 UPD45 INS77 INS77 INS32 UPD66 UPD45 UPD45 INS77 INS77 INS32 MOV32 UPD66 UPD45 UPD45 INS77 INS77 INS32 MOV32 MOV8 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 UPD42 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 INS42 INS42 INS42 INS80 INS80 INS42 INS80 INS80 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 UPD42 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 UPD45 UPD45 UPD45 UPD45 DEL25