GEODE-8048: change redis sets to use functions and deltas (#5009)


Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
-import java.util.HashSet;
-import java.util.Set;
-    List<ByteArrayWrapper> popped = new ArrayList<>();
+    ArrayList<ByteArrayWrapper> popped = new ArrayList<>();
-      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
-
-      Set<ByteArrayWrapper> set = region.get(key);
-
-      if (set == null || set.isEmpty()) {
+      Region<ByteArrayWrapper, DeltaSet> region = getRegion(context);
+      DeltaSet original = region.get(key);
+      if (original == null) {
-      Random rand = new Random();
-
-      Set<Integer> randomIndexes = new HashSet<>();
-      while (randomIndexes.size() < popCount) {
-        randomIndexes.add(rand.nextInt(set.size()));
-      }
-
-      int counter = 0;
-      for (ByteArrayWrapper entry : set) {
-        if (randomIndexes.contains(counter)) {
-          popped.add(entry);
+      synchronized (original) {
+        int originalSize = original.size();
+        if (originalSize == 0) {
+          command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+          return;
-        counter++;
+
+        if (popCount >= originalSize) {
+          // remove them all
+          popped.addAll(original.members());
+        } else {
+          ByteArrayWrapper[] setMembers =
+              original.members().toArray(new ByteArrayWrapper[originalSize]);
+          Random rand = new Random();
+          while (popped.size() < popCount) {
+            int idx = rand.nextInt(originalSize);
+            ByteArrayWrapper memberToPop = setMembers[idx];
+            if (memberToPop != null) {
+              setMembers[idx] = null;
+              popped.add(memberToPop);
+            }
+          }
+        }
+        // The following srem call can modify popped by removing members
+        // from it that were not removed from the set.
+        // But since the set is synchronized all members in popped will be
+        // removed so popped will contains all the members popped.
+        DeltaSet.srem(region, key, popped, null);
+        // TODO: what should SPOP do with a source that it empties? We probably need to delete it.
-
-      set.removeAll(popped);
-
-      // save the updated set
-      region.put(key, set);

UPD74 UPD43 INS25 INS51 UPD42 UPD74 INS43 INS27 INS8 INS42 INS8 UPD43 MOV43 UPD42 MOV42 UPD42 INS42 INS33 INS21 INS41 INS60 MOV25 INS25 MOV21 UPD42 INS32 INS39 INS59 INS27 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS34 MOV42 INS42 MOV21 MOV60 MOV60 INS61 INS42 INS42 UPD42 INS33 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS5 INS27 INS8 INS42 INS42 UPD42 UPD42 MOV32 MOV43 INS85 UPD42 INS32 INS32 INS42 INS60 INS60 INS25 UPD42 UPD42 INS32 INS42 INS3 INS42 INS42 INS39 INS59 MOV43 INS59 INS27 INS8 INS42 INS42 INS5 INS42 INS42 INS32 INS42 INS2 INS42 INS33 MOV21 MOV21 MOV43 INS85 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS7 INS2 INS33 UPD42 UPD42 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL74 DEL43 DEL74 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL39 DEL34 DEL42 DEL37 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL32 DEL27 DEL8 DEL61 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70