Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A remote (serializable) implementation of <code>BridgeServer</code>
- * that is passed between administration VMs and VMs that host caches
- * with bridge servers.
+ * A remote (serializable) implementation of <code>BridgeServer</code> that is passed between
+ * administration VMs and VMs that host caches with bridge servers.
-public class RemoteBridgeServer
-  extends AbstractCacheServer
-  implements AdminBridgeServer, DataSerializable {
+public class RemoteBridgeServer extends AbstractCacheServer
+    implements AdminBridgeServer, DataSerializable {
-  
-//  /**
-//   * The name of the directory in which to store overflowed files for client ha
-//   * queue
-//   */
-//  private String overflowDirectory=null;
-  //////////////////////  Constructors  //////////////////////
+
+  // /**
+  // * The name of the directory in which to store overflowed files for client ha
+  // * queue
+  // */
+  // private String overflowDirectory=null;
+  ////////////////////// Constructors //////////////////////
-   * A "copy constructor" that creates a
-   * <code>RemoteBridgeServer</code> from the contents of the given
-   * <code>BridgeServerImpl</code>.
+   * A "copy constructor" that creates a <code>RemoteBridgeServer</code> from the contents of the
+   * given <code>BridgeServerImpl</code>.
-//  added for configuration of ha overflow
-    ClientSubscriptionConfig cscimpl = impl.getClientSubscriptionConfig();    
+    // added for configuration of ha overflow
+    ClientSubscriptionConfig cscimpl = impl.getClientSubscriptionConfig();
-  
+
-    if(probe == null) {
+    if (probe == null) {
-    if(probe instanceof Serializable) {
+    if (probe instanceof Serializable) {
-    }
-    else {
+    } else {
-  ////////////////////  Instance Methods  ////////////////////
-  
+  //////////////////// Instance Methods ////////////////////
+
-    throw new UnsupportedOperationException(LocalizedStrings.RemoteBridgeServer_A_REMOTE_BRIDGESERVER_CANNOT_BE_STARTED.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.RemoteBridgeServer_A_REMOTE_BRIDGESERVER_CANNOT_BE_STARTED
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.RemoteBridgeServer_A_REMOTE_BRIDGESERVER_CANNOT_BE_STOPPED.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.RemoteBridgeServer_A_REMOTE_BRIDGESERVER_CANNOT_BE_STOPPED
+            .toLocalizedString());
-   * Returns the cache that is served by this bridge server or
-   * <code>null</code> if this server is not running.
+   * Returns the cache that is served by this bridge server or <code>null</code> if this server is
+   * not running.
-    throw new UnsupportedOperationException(LocalizedStrings.RemoteBridgeServer_CANNOT_GET_THE_CACHE_OF_A_REMOTE_BRIDGESERVER.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.RemoteBridgeServer_CANNOT_GET_THE_CACHE_OF_A_REMOTE_BRIDGESERVER
+            .toLocalizedString());
-  
+
-    String s = LocalizedStrings.RemoteBridgeServer_CANNOT_GET_ALL_CLIENT_SESSIONS.toLocalizedString();
+    String s =
+        LocalizedStrings.RemoteBridgeServer_CANNOT_GET_ALL_CLIENT_SESSIONS.toLocalizedString();
-  public ClientSubscriptionConfig getClientSubscriptionConfig(){
+  public ClientSubscriptionConfig getClientSubscriptionConfig() {
-  
+
-    DataSerializer.writeString(this.getClientSubscriptionConfig()
-        .getEvictionPolicy(), out);
-    DataSerializer.writeString(this.getClientSubscriptionConfig()
-        .getDiskStoreName(), out);
+    DataSerializer.writeString(this.getClientSubscriptionConfig().getEvictionPolicy(), out);
+    DataSerializer.writeString(this.getClientSubscriptionConfig().getDiskStoreName(), out);
-      DataSerializer.writeString(this.getClientSubscriptionConfig()
-          .getOverflowDirectory(), out);
+      DataSerializer.writeString(this.getClientSubscriptionConfig().getOverflowDirectory(), out);
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
-	  
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+
-    this.maximumTimeBetweenPings = in .readInt();
+    this.maximumTimeBetweenPings = in.readInt();
-    setLoadProbe((ServerLoadProbe)DataSerializer.readObject(in));
+    setLoadProbe((ServerLoadProbe) DataSerializer.readObject(in));
-    this.getClientSubscriptionConfig().setEvictionPolicy(
-        DataSerializer.readString(in));
+    this.getClientSubscriptionConfig().setEvictionPolicy(DataSerializer.readString(in));
-      this.getClientSubscriptionConfig().setOverflowDirectory(
-          DataSerializer.readString(in));
+      this.getClientSubscriptionConfig().setOverflowDirectory(DataSerializer.readString(in));
-  
+
-    
+
-  }  
+  }
+
-   * @param listener
-   *                The <code>InterestRegistrationListener</code> to register
+   * @param listener The <code>InterestRegistrationListener</code> to register
-  public void registerInterestRegistrationListener(
-      InterestRegistrationListener listener) {
-    final String s = LocalizedStrings.
-      RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_REGISTERED_ON_A_REMOTE_BRIDGESERVER
-      .toLocalizedString();
+  public void registerInterestRegistrationListener(InterestRegistrationListener listener) {
+    final String s =
+        LocalizedStrings.RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_REGISTERED_ON_A_REMOTE_BRIDGESERVER
+            .toLocalizedString();
-   * Unregisters an existing <code>InterestRegistrationListener</code> from
-   * the set of <code>InterestRegistrationListener</code>s.
+   * Unregisters an existing <code>InterestRegistrationListener</code> from the set of
+   * <code>InterestRegistrationListener</code>s.
-   * @param listener
-   *                The <code>InterestRegistrationListener</code> to
-   *                unregister
+   * @param listener The <code>InterestRegistrationListener</code> to unregister
-  public void unregisterInterestRegistrationListener(
-      InterestRegistrationListener listener) {
-    final String s = LocalizedStrings.
-      RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_UNREGISTERED_FROM_A_REMOTE_BRIDGESERVER
-      .toLocalizedString();
+  public void unregisterInterestRegistrationListener(InterestRegistrationListener listener) {
+    final String s =
+        LocalizedStrings.RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_UNREGISTERED_FROM_A_REMOTE_BRIDGESERVER
+            .toLocalizedString();
-   * Returns a read-only set of <code>InterestRegistrationListener</code>s
-   * registered with this notifier.
+   * Returns a read-only set of <code>InterestRegistrationListener</code>s registered with this
+   * notifier.
-   * @return a read-only set of <code>InterestRegistrationListener</code>s
-   *         registered with this notifier
+   * @return a read-only set of <code>InterestRegistrationListener</code>s registered with this
+   *         notifier
-    final String s = LocalizedStrings.
-      RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_RETRIEVED_FROM_A_REMOTE_BRIDGESERVER
-      .toLocalizedString();
+    final String s =
+        LocalizedStrings.RemoteBridgeServer_INTERESTREGISTRATIONLISTENERS_CANNOT_BE_RETRIEVED_FROM_A_REMOTE_BRIDGESERVER
+            .toLocalizedString();

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66