Merge branch 'develop' into feature/GEODE-7049

-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.annotations.Immutable;
-import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
+import org.apache.geode.internal.serialization.DSFIDSerializer;
+import org.apache.geode.internal.serialization.DataSerializableFixedID;
+import org.apache.geode.internal.serialization.DeserializationContext;
+import org.apache.geode.internal.serialization.SerializationContext;
+import org.apache.geode.internal.serialization.Version;
-  private DSFIDFactory() {
-    // no instances allowed
-    throw new UnsupportedOperationException();
+  private final DSFIDSerializer serializer;
+
+  DSFIDFactory(DSFIDSerializer serializer) {
+    this.serializer = serializer;
+    // register geode-core classes with the serializer
+    registerDSFIDTypes(serializer);
-  public void toData(DataOutput out) throws IOException {
+  public void toData(DataOutput out,
+      SerializationContext context) throws IOException {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in,
+      DeserializationContext context) throws IOException, ClassNotFoundException {
-  @Immutable
-  private static final Constructor<?>[] dsfidMap = new Constructor<?>[256];
-
-  @Immutable("This maybe should be wrapped in an unmodifiableMap?")
-  private static final Int2ObjectOpenHashMap dsfidMap2 = new Int2ObjectOpenHashMap(800);
-
-  static {
-    registerDSFIDTypes();
-  }
-
-  /** Register the constructor for a fixed ID class. */
-  public static void registerDSFID(int dsfid, Class dsfidClass) {
-    try {
-      Constructor<?> cons = dsfidClass.getConstructor((Class[]) null);
-      cons.setAccessible(true);
-      if (!cons.isAccessible()) {
-        throw new InternalGemFireError(
-            "default constructor not accessible " + "for DSFID=" + dsfid + ": " + dsfidClass);
-      }
-      if (dsfid >= Byte.MIN_VALUE && dsfid <= Byte.MAX_VALUE) {
-        dsfidMap[dsfid + Byte.MAX_VALUE + 1] = cons;
-      } else {
-        dsfidMap2.put(dsfid, cons);
-      }
-    } catch (NoSuchMethodException nsme) {
-      throw new InternalGemFireError(nsme);
-    }
-  }
-
-  public static void registerTypes() {
-    // nothing to do; static initializer will take care of the type registration
-  }
-
-  private static void registerDSFIDTypes() {
-    registerDSFID(FINAL_CHECK_PASSED_MESSAGE, FinalCheckPassedMessage.class);
-    registerDSFID(NETWORK_PARTITION_MESSAGE, NetworkPartitionMessage.class);
-    registerDSFID(REMOVE_MEMBER_REQUEST, RemoveMemberMessage.class);
-    registerDSFID(HEARTBEAT_REQUEST, HeartbeatRequestMessage.class);
-    registerDSFID(HEARTBEAT_RESPONSE, HeartbeatMessage.class);
-    registerDSFID(SUSPECT_MEMBERS_MESSAGE, SuspectMembersMessage.class);
-    registerDSFID(LEAVE_REQUEST_MESSAGE, LeaveRequestMessage.class);
-    registerDSFID(VIEW_ACK_MESSAGE, ViewAckMessage.class);
-    registerDSFID(INSTALL_VIEW_MESSAGE, InstallViewMessage.class);
-    registerDSFID(GMSMEMBER, GMSMember.class);
-    registerDSFID(NETVIEW, NetView.class);
-    registerDSFID(GET_VIEW_REQ, GetViewRequest.class);
-    registerDSFID(GET_VIEW_RESP, GetViewResponse.class);
-    registerDSFID(FIND_COORDINATOR_REQ, FindCoordinatorRequest.class);
-    registerDSFID(FIND_COORDINATOR_RESP, FindCoordinatorResponse.class);
-    registerDSFID(JOIN_RESPONSE, JoinResponseMessage.class);
-    registerDSFID(JOIN_REQUEST, JoinRequestMessage.class);
-    registerDSFID(CLIENT_TOMBSTONE_MESSAGE, ClientTombstoneMessage.class);
-    registerDSFID(R_CLEAR_MSG, RemoteClearMessage.class);
-    registerDSFID(R_CLEAR_MSG_REPLY, RemoteClearReplyMessage.class);
-    registerDSFID(WAIT_FOR_VIEW_INSTALLATION, WaitForViewInstallation.class);
-    registerDSFID(DISPATCHED_AND_CURRENT_EVENTS, DispatchedAndCurrentEvents.class);
-    registerDSFID(DISTRIBUTED_MEMBER, InternalDistributedMember.class);
-    registerDSFID(UPDATE_MESSAGE, UpdateOperation.UpdateMessage.class);
-    registerDSFID(REPLY_MESSAGE, ReplyMessage.class);
-    registerDSFID(PR_DESTROY, DestroyMessage.class);
-    registerDSFID(CREATE_REGION_MESSAGE, CreateRegionProcessor.CreateRegionMessage.class);
-    registerDSFID(CREATE_REGION_REPLY_MESSAGE,
+  private void registerDSFIDTypes(DSFIDSerializer serializer) {
+    serializer.registerDSFID(FINAL_CHECK_PASSED_MESSAGE, FinalCheckPassedMessage.class);
+    serializer.registerDSFID(NETWORK_PARTITION_MESSAGE, NetworkPartitionMessage.class);
+    serializer.registerDSFID(REMOVE_MEMBER_REQUEST, RemoveMemberMessage.class);
+    serializer.registerDSFID(HEARTBEAT_REQUEST, HeartbeatRequestMessage.class);
+    serializer.registerDSFID(HEARTBEAT_RESPONSE, HeartbeatMessage.class);
+    serializer.registerDSFID(SUSPECT_MEMBERS_MESSAGE, SuspectMembersMessage.class);
+    serializer.registerDSFID(LEAVE_REQUEST_MESSAGE, LeaveRequestMessage.class);
+    serializer.registerDSFID(VIEW_ACK_MESSAGE, ViewAckMessage.class);
+    serializer.registerDSFID(INSTALL_VIEW_MESSAGE, InstallViewMessage.class);
+    serializer.registerDSFID(GMSMEMBER, GMSMember.class);
+    serializer.registerDSFID(NETVIEW, GMSMembershipView.class);
+    serializer.registerDSFID(GET_VIEW_REQ, GetViewRequest.class);
+    serializer.registerDSFID(GET_VIEW_RESP, GetViewResponse.class);
+    serializer.registerDSFID(FIND_COORDINATOR_REQ, FindCoordinatorRequest.class);
+    serializer.registerDSFID(FIND_COORDINATOR_RESP, FindCoordinatorResponse.class);
+    serializer.registerDSFID(JOIN_RESPONSE, JoinResponseMessage.class);
+    serializer.registerDSFID(JOIN_REQUEST, JoinRequestMessage.class);
+    serializer.registerDSFID(CLIENT_TOMBSTONE_MESSAGE, ClientTombstoneMessage.class);
+    serializer.registerDSFID(R_CLEAR_MSG, RemoteClearMessage.class);
+    serializer.registerDSFID(R_CLEAR_MSG_REPLY, RemoteClearReplyMessage.class);
+    serializer.registerDSFID(WAIT_FOR_VIEW_INSTALLATION, WaitForViewInstallation.class);
+    serializer.registerDSFID(DISPATCHED_AND_CURRENT_EVENTS, DispatchedAndCurrentEvents.class);
+    serializer.registerDSFID(DISTRIBUTED_MEMBER, InternalDistributedMember.class);
+    serializer.registerDSFID(UPDATE_MESSAGE, UpdateOperation.UpdateMessage.class);
+    serializer.registerDSFID(REPLY_MESSAGE, ReplyMessage.class);
+    serializer.registerDSFID(PR_DESTROY, DestroyMessage.class);
+    serializer.registerDSFID(CREATE_REGION_MESSAGE,
+        CreateRegionProcessor.CreateRegionMessage.class);
+    serializer.registerDSFID(CREATE_REGION_REPLY_MESSAGE,
-    registerDSFID(REGION_STATE_MESSAGE, InitialImageOperation.RegionStateMessage.class);
-    registerDSFID(QUERY_MESSAGE, SearchLoadAndWriteProcessor.QueryMessage.class);
-    registerDSFID(RESPONSE_MESSAGE, SearchLoadAndWriteProcessor.ResponseMessage.class);
-    registerDSFID(NET_SEARCH_REQUEST_MESSAGE,
+    serializer.registerDSFID(REGION_STATE_MESSAGE, InitialImageOperation.RegionStateMessage.class);
+    serializer.registerDSFID(QUERY_MESSAGE, SearchLoadAndWriteProcessor.QueryMessage.class);
+    serializer.registerDSFID(RESPONSE_MESSAGE, SearchLoadAndWriteProcessor.ResponseMessage.class);
+    serializer.registerDSFID(NET_SEARCH_REQUEST_MESSAGE,
-    registerDSFID(NET_SEARCH_REPLY_MESSAGE,
+    serializer.registerDSFID(NET_SEARCH_REPLY_MESSAGE,
-    registerDSFID(NET_LOAD_REQUEST_MESSAGE,
+    serializer.registerDSFID(NET_LOAD_REQUEST_MESSAGE,
-    registerDSFID(NET_LOAD_REPLY_MESSAGE, SearchLoadAndWriteProcessor.NetLoadReplyMessage.class);
-    registerDSFID(NET_WRITE_REQUEST_MESSAGE,
+    serializer.registerDSFID(NET_LOAD_REPLY_MESSAGE,
+        SearchLoadAndWriteProcessor.NetLoadReplyMessage.class);
+    serializer.registerDSFID(NET_WRITE_REQUEST_MESSAGE,
-    registerDSFID(NET_WRITE_REPLY_MESSAGE, SearchLoadAndWriteProcessor.NetWriteReplyMessage.class);
-    registerDSFID(DLOCK_REQUEST_MESSAGE, DLockRequestProcessor.DLockRequestMessage.class);
-    registerDSFID(DLOCK_RESPONSE_MESSAGE, DLockRequestProcessor.DLockResponseMessage.class);
-    registerDSFID(DLOCK_RELEASE_MESSAGE, DLockReleaseProcessor.DLockReleaseMessage.class);
-    registerDSFID(ADMIN_CACHE_EVENT_MESSAGE,
+    serializer.registerDSFID(NET_WRITE_REPLY_MESSAGE,
+        SearchLoadAndWriteProcessor.NetWriteReplyMessage.class);
+    serializer.registerDSFID(DLOCK_REQUEST_MESSAGE,
+        DLockRequestProcessor.DLockRequestMessage.class);
+    serializer.registerDSFID(DLOCK_RESPONSE_MESSAGE,
+        DLockRequestProcessor.DLockResponseMessage.class);
+    serializer.registerDSFID(DLOCK_RELEASE_MESSAGE,
+        DLockReleaseProcessor.DLockReleaseMessage.class);
+    serializer.registerDSFID(ADMIN_CACHE_EVENT_MESSAGE,
-    registerDSFID(CQ_ENTRY_EVENT, CqEntry.class);
-    registerDSFID(REQUEST_IMAGE_MESSAGE, InitialImageOperation.RequestImageMessage.class);
-    registerDSFID(IMAGE_REPLY_MESSAGE, InitialImageOperation.ImageReplyMessage.class);
-    registerDSFID(IMAGE_ENTRY, InitialImageOperation.Entry.class);
-    registerDSFID(CLOSE_CACHE_MESSAGE, CloseCacheMessage.class);
-    registerDSFID(NON_GRANTOR_DESTROYED_MESSAGE,
+    serializer.registerDSFID(CQ_ENTRY_EVENT, CqEntry.class);
+    serializer.registerDSFID(REQUEST_IMAGE_MESSAGE,
+        InitialImageOperation.RequestImageMessage.class);
+    serializer.registerDSFID(IMAGE_REPLY_MESSAGE, InitialImageOperation.ImageReplyMessage.class);
+    serializer.registerDSFID(IMAGE_ENTRY, InitialImageOperation.Entry.class);
+    serializer.registerDSFID(CLOSE_CACHE_MESSAGE, CloseCacheMessage.class);
+    serializer.registerDSFID(NON_GRANTOR_DESTROYED_MESSAGE,
-    registerDSFID(DLOCK_RELEASE_REPLY, DLockReleaseProcessor.DLockReleaseReplyMessage.class);
-    registerDSFID(GRANTOR_REQUEST_MESSAGE, GrantorRequestProcessor.GrantorRequestMessage.class);
-    registerDSFID(GRANTOR_INFO_REPLY_MESSAGE,
+    serializer.registerDSFID(DLOCK_RELEASE_REPLY,
+        DLockReleaseProcessor.DLockReleaseReplyMessage.class);
+    serializer.registerDSFID(GRANTOR_REQUEST_MESSAGE,
+        GrantorRequestProcessor.GrantorRequestMessage.class);
+    serializer.registerDSFID(GRANTOR_INFO_REPLY_MESSAGE,
-    registerDSFID(ELDER_INIT_MESSAGE, ElderInitProcessor.ElderInitMessage.class);
-    registerDSFID(ELDER_INIT_REPLY_MESSAGE, ElderInitProcessor.ElderInitReplyMessage.class);
-    registerDSFID(DEPOSE_GRANTOR_MESSAGE, DeposeGrantorProcessor.DeposeGrantorMessage.class);
-    registerDSFID(STARTUP_MESSAGE, StartupMessage.class);
-    registerDSFID(STARTUP_RESPONSE_MESSAGE, StartupResponseMessage.class);
-    registerDSFID(STARTUP_RESPONSE_WITHVERSION_MESSAGE, StartupResponseWithVersionMessage.class);
-    registerDSFID(SHUTDOWN_MESSAGE, ShutdownMessage.class);
-    registerDSFID(DESTROY_REGION_MESSAGE, DestroyRegionOperation.DestroyRegionMessage.class);
-    registerDSFID(PR_PUTALL_MESSAGE, PutAllPRMessage.class);
-    registerDSFID(PR_REMOVE_ALL_MESSAGE, RemoveAllPRMessage.class);
-    registerDSFID(PR_REMOVE_ALL_REPLY_MESSAGE, RemoveAllPRMessage.RemoveAllReplyMessage.class);
-    registerDSFID(REMOTE_REMOVE_ALL_MESSAGE, RemoteRemoveAllMessage.class);
-    registerDSFID(REMOTE_REMOVE_ALL_REPLY_MESSAGE,
+    serializer.registerDSFID(ELDER_INIT_MESSAGE, ElderInitProcessor.ElderInitMessage.class);
+    serializer.registerDSFID(ELDER_INIT_REPLY_MESSAGE,
+        ElderInitProcessor.ElderInitReplyMessage.class);
+    serializer.registerDSFID(DEPOSE_GRANTOR_MESSAGE,
+        DeposeGrantorProcessor.DeposeGrantorMessage.class);
+    serializer.registerDSFID(STARTUP_MESSAGE, StartupMessage.class);
+    serializer.registerDSFID(STARTUP_RESPONSE_MESSAGE, StartupResponseMessage.class);
+    serializer.registerDSFID(STARTUP_RESPONSE_WITHVERSION_MESSAGE,
+        StartupResponseWithVersionMessage.class);
+    serializer.registerDSFID(SHUTDOWN_MESSAGE, ShutdownMessage.class);
+    serializer.registerDSFID(DESTROY_REGION_MESSAGE,
+        DestroyRegionOperation.DestroyRegionMessage.class);
+    serializer.registerDSFID(PR_PUTALL_MESSAGE, PutAllPRMessage.class);
+    serializer.registerDSFID(PR_REMOVE_ALL_MESSAGE, RemoveAllPRMessage.class);
+    serializer.registerDSFID(PR_REMOVE_ALL_REPLY_MESSAGE,
+        RemoveAllPRMessage.RemoveAllReplyMessage.class);
+    serializer.registerDSFID(REMOTE_REMOVE_ALL_MESSAGE, RemoteRemoveAllMessage.class);
+    serializer.registerDSFID(REMOTE_REMOVE_ALL_REPLY_MESSAGE,
-    registerDSFID(DISTTX_ROLLBACK_MESSAGE, DistTXRollbackMessage.class);
-    registerDSFID(DISTTX_COMMIT_MESSAGE, DistTXCommitMessage.class);
-    registerDSFID(DISTTX_PRE_COMMIT_MESSAGE, DistTXPrecommitMessage.class);
-    registerDSFID(DISTTX_ROLLBACK_REPLY_MESSAGE,
+    serializer.registerDSFID(DISTTX_ROLLBACK_MESSAGE, DistTXRollbackMessage.class);
+    serializer.registerDSFID(DISTTX_COMMIT_MESSAGE, DistTXCommitMessage.class);
+    serializer.registerDSFID(DISTTX_PRE_COMMIT_MESSAGE, DistTXPrecommitMessage.class);
+    serializer.registerDSFID(DISTTX_ROLLBACK_REPLY_MESSAGE,
-    registerDSFID(DISTTX_COMMIT_REPLY_MESSAGE, DistTXCommitMessage.DistTXCommitReplyMessage.class);
-    registerDSFID(DISTTX_PRE_COMMIT_REPLY_MESSAGE,
+    serializer.registerDSFID(DISTTX_COMMIT_REPLY_MESSAGE,
+        DistTXCommitMessage.DistTXCommitReplyMessage.class);
+    serializer.registerDSFID(DISTTX_PRE_COMMIT_REPLY_MESSAGE,
-    registerDSFID(PR_PUT_MESSAGE, PutMessage.class);
-    registerDSFID(INVALIDATE_MESSAGE, InvalidateOperation.InvalidateMessage.class);
-    registerDSFID(DESTROY_MESSAGE, DestroyOperation.DestroyMessage.class);
-    registerDSFID(DA_PROFILE, DistributionAdvisor.Profile.class);
-    registerDSFID(CACHE_PROFILE, CacheDistributionAdvisor.CacheProfile.class);
-    registerDSFID(HA_PROFILE, HARegion.HARegionAdvisor.HAProfile.class);
-    registerDSFID(ENTRY_EVENT, EntryEventImpl.class);
-    registerDSFID(UPDATE_ATTRIBUTES_MESSAGE,
+    serializer.registerDSFID(PR_PUT_MESSAGE, PutMessage.class);
+    serializer.registerDSFID(INVALIDATE_MESSAGE, InvalidateOperation.InvalidateMessage.class);
+    serializer.registerDSFID(DESTROY_MESSAGE, DestroyOperation.DestroyMessage.class);
+    serializer.registerDSFID(DA_PROFILE, DistributionAdvisor.Profile.class);
+    serializer.registerDSFID(CACHE_PROFILE, CacheDistributionAdvisor.CacheProfile.class);
+    serializer.registerDSFID(HA_PROFILE, HARegion.HARegionAdvisor.HAProfile.class);
+    serializer.registerDSFID(ENTRY_EVENT, EntryEventImpl.class);
+    serializer.registerDSFID(UPDATE_ATTRIBUTES_MESSAGE,
-    registerDSFID(PROFILE_REPLY_MESSAGE, UpdateAttributesProcessor.ProfileReplyMessage.class);
-    registerDSFID(PROFILES_REPLY_MESSAGE, UpdateAttributesProcessor.ProfilesReplyMessage.class);
-    registerDSFID(REGION_EVENT, RegionEventImpl.class);
-    registerDSFID(TX_COMMIT_MESSAGE, TXCommitMessage.class);
-    registerDSFID(COMMIT_PROCESS_FOR_LOCKID_MESSAGE, CommitProcessForLockIdMessage.class);
-    registerDSFID(COMMIT_PROCESS_FOR_TXID_MESSAGE, CommitProcessForTXIdMessage.class);
-    registerDSFID(FILTER_PROFILE, FilterProfile.class);
-    registerDSFID(REMOTE_PUTALL_REPLY_MESSAGE, RemotePutAllMessage.PutAllReplyMessage.class);
-    registerDSFID(REMOTE_PUTALL_MESSAGE, RemotePutAllMessage.class);
-    registerDSFID(VERSION_TAG, VMVersionTag.class);
-    registerDSFID(ADD_CACHESERVER_PROFILE_UPDATE, AddCacheServerProfileMessage.class);
-    registerDSFID(REMOVE_CACHESERVER_PROFILE_UPDATE, RemoveCacheServerProfileMessage.class);
-    registerDSFID(SERVER_INTEREST_REGISTRATION_MESSAGE, ServerInterestRegistrationMessage.class);
-    registerDSFID(FILTER_PROFILE_UPDATE, FilterProfile.OperationMessage.class);
-    registerDSFID(PR_GET_MESSAGE, GetMessage.class);
-    registerDSFID(R_FETCH_ENTRY_MESSAGE, RemoteFetchEntryMessage.class);
-    registerDSFID(R_FETCH_ENTRY_REPLY_MESSAGE,
+    serializer.registerDSFID(PROFILE_REPLY_MESSAGE,
+        UpdateAttributesProcessor.ProfileReplyMessage.class);
+    serializer.registerDSFID(PROFILES_REPLY_MESSAGE,
+        UpdateAttributesProcessor.ProfilesReplyMessage.class);
+    serializer.registerDSFID(REGION_EVENT, RegionEventImpl.class);
+    serializer.registerDSFID(TX_COMMIT_MESSAGE, TXCommitMessage.class);
+    serializer.registerDSFID(COMMIT_PROCESS_FOR_LOCKID_MESSAGE,
+        CommitProcessForLockIdMessage.class);
+    serializer.registerDSFID(COMMIT_PROCESS_FOR_TXID_MESSAGE, CommitProcessForTXIdMessage.class);
+    serializer.registerDSFID(FILTER_PROFILE, FilterProfile.class);
+    serializer.registerDSFID(REMOTE_PUTALL_REPLY_MESSAGE,
+        RemotePutAllMessage.PutAllReplyMessage.class);
+    serializer.registerDSFID(REMOTE_PUTALL_MESSAGE, RemotePutAllMessage.class);
+    serializer.registerDSFID(VERSION_TAG, VMVersionTag.class);
+    serializer.registerDSFID(ADD_CACHESERVER_PROFILE_UPDATE, AddCacheServerProfileMessage.class);
+    serializer.registerDSFID(REMOVE_CACHESERVER_PROFILE_UPDATE,
+        RemoveCacheServerProfileMessage.class);
+    serializer.registerDSFID(SERVER_INTEREST_REGISTRATION_MESSAGE,
+        ServerInterestRegistrationMessage.class);
+    serializer.registerDSFID(FILTER_PROFILE_UPDATE, FilterProfile.OperationMessage.class);
+    serializer.registerDSFID(PR_GET_MESSAGE, GetMessage.class);
+    serializer.registerDSFID(R_FETCH_ENTRY_MESSAGE, RemoteFetchEntryMessage.class);
+    serializer.registerDSFID(R_FETCH_ENTRY_REPLY_MESSAGE,
-    registerDSFID(R_CONTAINS_MESSAGE, RemoteContainsKeyValueMessage.class);
-    registerDSFID(R_CONTAINS_REPLY_MESSAGE,
+    serializer.registerDSFID(R_CONTAINS_MESSAGE, RemoteContainsKeyValueMessage.class);
+    serializer.registerDSFID(R_CONTAINS_REPLY_MESSAGE,
-    registerDSFID(R_DESTROY_MESSAGE, RemoteDestroyMessage.class);
-    registerDSFID(R_DESTROY_REPLY_MESSAGE, RemoteDestroyMessage.DestroyReplyMessage.class);
-    registerDSFID(R_INVALIDATE_MESSAGE, RemoteInvalidateMessage.class);
-    registerDSFID(R_INVALIDATE_REPLY_MESSAGE, RemoteInvalidateMessage.InvalidateReplyMessage.class);
-    registerDSFID(R_GET_MESSAGE, RemoteGetMessage.class);
-    registerDSFID(R_GET_REPLY_MESSAGE, RemoteGetMessage.GetReplyMessage.class);
-    registerDSFID(R_PUT_MESSAGE, RemotePutMessage.class);
-    registerDSFID(R_PUT_REPLY_MESSAGE, RemotePutMessage.PutReplyMessage.class);
-    registerDSFID(R_SIZE_MESSAGE, RemoteSizeMessage.class);
-    registerDSFID(R_SIZE_REPLY_MESSAGE, RemoteSizeMessage.SizeReplyMessage.class);
-    registerDSFID(PR_DESTROY_REPLY_MESSAGE, DestroyMessage.DestroyReplyMessage.class);
-    registerDSFID(CLI_FUNCTION_RESULT, CliFunctionResult.class);
-    registerDSFID(R_FETCH_KEYS_MESSAGE, RemoteFetchKeysMessage.class);
-    registerDSFID(R_FETCH_KEYS_REPLY, RemoteFetchKeysMessage.RemoteFetchKeysReplyMessage.class);
-    registerDSFID(R_REMOTE_COMMIT_REPLY_MESSAGE, TXRemoteCommitReplyMessage.class);
-    registerDSFID(TRANSACTION_LOCK_ID, TXLockIdImpl.class);
-    registerDSFID(PR_GET_REPLY_MESSAGE, GetReplyMessage.class);
-    registerDSFID(PR_NODE, Node.class);
-    registerDSFID(UPDATE_WITH_CONTEXT_MESSAGE, UpdateOperation.UpdateWithContextMessage.class);
-    registerDSFID(DESTROY_WITH_CONTEXT_MESSAGE, DestroyOperation.DestroyWithContextMessage.class);
-    registerDSFID(INVALIDATE_WITH_CONTEXT_MESSAGE,
+    serializer.registerDSFID(R_DESTROY_MESSAGE, RemoteDestroyMessage.class);
+    serializer.registerDSFID(R_DESTROY_REPLY_MESSAGE,
+        RemoteDestroyMessage.DestroyReplyMessage.class);
+    serializer.registerDSFID(R_INVALIDATE_MESSAGE, RemoteInvalidateMessage.class);
+    serializer.registerDSFID(R_INVALIDATE_REPLY_MESSAGE,
+        RemoteInvalidateMessage.InvalidateReplyMessage.class);
+    serializer.registerDSFID(R_GET_MESSAGE, RemoteGetMessage.class);
+    serializer.registerDSFID(R_GET_REPLY_MESSAGE, RemoteGetMessage.GetReplyMessage.class);
+    serializer.registerDSFID(R_PUT_MESSAGE, RemotePutMessage.class);
+    serializer.registerDSFID(R_PUT_REPLY_MESSAGE, RemotePutMessage.PutReplyMessage.class);
+    serializer.registerDSFID(R_SIZE_MESSAGE, RemoteSizeMessage.class);
+    serializer.registerDSFID(R_SIZE_REPLY_MESSAGE, RemoteSizeMessage.SizeReplyMessage.class);
+    serializer.registerDSFID(PR_DESTROY_REPLY_MESSAGE, DestroyMessage.DestroyReplyMessage.class);
+    serializer.registerDSFID(CLI_FUNCTION_RESULT, CliFunctionResult.class);
+    serializer.registerDSFID(R_FETCH_KEYS_MESSAGE, RemoteFetchKeysMessage.class);
+    serializer.registerDSFID(R_FETCH_KEYS_REPLY,
+        RemoteFetchKeysMessage.RemoteFetchKeysReplyMessage.class);
+    serializer.registerDSFID(R_REMOTE_COMMIT_REPLY_MESSAGE, TXRemoteCommitReplyMessage.class);
+    serializer.registerDSFID(TRANSACTION_LOCK_ID, TXLockIdImpl.class);
+    serializer.registerDSFID(PR_GET_REPLY_MESSAGE, GetReplyMessage.class);
+    serializer.registerDSFID(PR_NODE, Node.class);
+    serializer.registerDSFID(UPDATE_WITH_CONTEXT_MESSAGE,
+        UpdateOperation.UpdateWithContextMessage.class);
+    serializer.registerDSFID(DESTROY_WITH_CONTEXT_MESSAGE,
+        DestroyOperation.DestroyWithContextMessage.class);
+    serializer.registerDSFID(INVALIDATE_WITH_CONTEXT_MESSAGE,
-    registerDSFID(REGION_VERSION_VECTOR, VMRegionVersionVector.class);
-    registerDSFID(CLIENT_PROXY_MEMBERSHIPID, ClientProxyMembershipID.class);
-    registerDSFID(EVENT_ID, EventID.class);
-    registerDSFID(CLIENT_UPDATE_MESSAGE, ClientUpdateMessageImpl.class);
-    registerDSFID(CLEAR_REGION_MESSAGE_WITH_CONTEXT, ClearRegionWithContextMessage.class);
-    registerDSFID(CLIENT_INSTANTIATOR_MESSAGE, ClientInstantiatorMessage.class);
-    registerDSFID(CLIENT_DATASERIALIZER_MESSAGE, ClientDataSerializerMessage.class);
-    registerDSFID(REGISTRATION_MESSAGE, InternalInstantiator.RegistrationMessage.class);
-    registerDSFID(REGISTRATION_CONTEXT_MESSAGE,
+    serializer.registerDSFID(REGION_VERSION_VECTOR, VMRegionVersionVector.class);
+    serializer.registerDSFID(CLIENT_PROXY_MEMBERSHIPID, ClientProxyMembershipID.class);
+    serializer.registerDSFID(EVENT_ID, EventID.class);
+    serializer.registerDSFID(CLIENT_UPDATE_MESSAGE, ClientUpdateMessageImpl.class);
+    serializer.registerDSFID(CLEAR_REGION_MESSAGE_WITH_CONTEXT,
+        ClearRegionWithContextMessage.class);
+    serializer.registerDSFID(CLIENT_INSTANTIATOR_MESSAGE, ClientInstantiatorMessage.class);
+    serializer.registerDSFID(CLIENT_DATASERIALIZER_MESSAGE, ClientDataSerializerMessage.class);
+    serializer.registerDSFID(REGISTRATION_MESSAGE, InternalInstantiator.RegistrationMessage.class);
+    serializer.registerDSFID(REGISTRATION_CONTEXT_MESSAGE,
-    registerDSFID(RESULTS_COLLECTION_WRAPPER, ResultsCollectionWrapper.class);
-    registerDSFID(RESULTS_SET, ResultsSet.class);
-    registerDSFID(SORTED_RESULT_SET, SortedResultSet.class);
-    registerDSFID(SORTED_STRUCT_SET, SortedStructSet.class);
-    registerDSFID(NWAY_MERGE_RESULTS, NWayMergeResults.class);
-    registerDSFID(CUMULATIVE_RESULTS, CumulativeNonDistinctResults.class);
-    registerDSFID(UNDEFINED, Undefined.class);
-    registerDSFID(STRUCT_IMPL, StructImpl.class);
-    registerDSFID(STRUCT_SET, StructSet.class);
-    registerDSFID(END_OF_BUCKET, PRQueryProcessor.EndOfBucket.class);
-    registerDSFID(STRUCT_BAG, StructBag.class);
-    registerDSFID(LINKED_RESULTSET, LinkedResultSet.class);
-    registerDSFID(LINKED_STRUCTSET, LinkedStructSet.class);
-    registerDSFID(PR_BUCKET_BACKUP_MESSAGE, BucketBackupMessage.class);
-    registerDSFID(PR_BUCKET_PROFILE_UPDATE_MESSAGE, BucketProfileUpdateMessage.class);
-    registerDSFID(PR_ALL_BUCKET_PROFILES_UPDATE_MESSAGE, AllBucketProfilesUpdateMessage.class);
-    registerDSFID(PR_BUCKET_SIZE_MESSAGE, BucketSizeMessage.class);
-    registerDSFID(PR_CONTAINS_KEY_VALUE_MESSAGE, ContainsKeyValueMessage.class);
-    registerDSFID(PR_DUMP_ALL_PR_CONFIG_MESSAGE, DumpAllPRConfigMessage.class);
-    registerDSFID(PR_DUMP_BUCKETS_MESSAGE, DumpBucketsMessage.class);
-    registerDSFID(PR_FETCH_ENTRIES_MESSAGE, FetchEntriesMessage.class);
-    registerDSFID(PR_FETCH_ENTRY_MESSAGE, FetchEntryMessage.class);
-    registerDSFID(PR_FETCH_KEYS_MESSAGE, FetchKeysMessage.class);
-    registerDSFID(PR_FLUSH_MESSAGE, FlushMessage.class);
-    registerDSFID(PR_IDENTITY_REQUEST_MESSAGE, IdentityRequestMessage.class);
-    registerDSFID(PR_IDENTITY_UPDATE_MESSAGE, IdentityUpdateMessage.class);
-    registerDSFID(PR_INDEX_CREATION_MSG, IndexCreationMsg.class);
-    registerDSFID(PR_MANAGE_BUCKET_MESSAGE, ManageBucketMessage.class);
-    registerDSFID(PR_PRIMARY_REQUEST_MESSAGE, PrimaryRequestMessage.class);
-    registerDSFID(PR_PRIMARY_REQUEST_REPLY_MESSAGE, PrimaryRequestReplyMessage.class);
-    registerDSFID(PR_SANITY_CHECK_MESSAGE, PRSanityCheckMessage.class);
-    registerDSFID(PR_PUTALL_REPLY_MESSAGE, PutAllReplyMessage.class);
-    registerDSFID(PR_PUT_REPLY_MESSAGE, PutReplyMessage.class);
-    registerDSFID(PR_QUERY_MESSAGE, QueryMessage.class);
-    registerDSFID(PR_REMOVE_INDEXES_MESSAGE, RemoveIndexesMessage.class);
-    registerDSFID(PR_REMOVE_INDEXES_REPLY_MESSAGE, RemoveIndexesReplyMessage.class);
-    registerDSFID(PR_SIZE_MESSAGE, SizeMessage.class);
-    registerDSFID(PR_SIZE_REPLY_MESSAGE, SizeReplyMessage.class);
-    registerDSFID(PR_BUCKET_SIZE_REPLY_MESSAGE, BucketSizeReplyMessage.class);
-    registerDSFID(PR_CONTAINS_KEY_VALUE_REPLY_MESSAGE, ContainsKeyValueReplyMessage.class);
-    registerDSFID(PR_FETCH_ENTRIES_REPLY_MESSAGE, FetchEntriesReplyMessage.class);
-    registerDSFID(PR_FETCH_ENTRY_REPLY_MESSAGE, FetchEntryReplyMessage.class);
-    registerDSFID(PR_IDENTITY_REPLY_MESSAGE, IdentityReplyMessage.class);
-    registerDSFID(PR_INDEX_CREATION_REPLY_MSG, IndexCreationReplyMsg.class);
-    registerDSFID(PR_MANAGE_BUCKET_REPLY_MESSAGE, ManageBucketReplyMessage.class);
-    registerDSFID(PR_FETCH_KEYS_REPLY_MESSAGE, FetchKeysReplyMessage.class);
-    registerDSFID(PR_DUMP_B2N_REGION_MSG, DumpB2NRegion.class);
-    registerDSFID(PR_DUMP_B2N_REPLY_MESSAGE, DumpB2NReplyMessage.class);
-    registerDSFID(DESTROY_PARTITIONED_REGION_MESSAGE, DestroyPartitionedRegionMessage.class);
-    registerDSFID(INVALIDATE_PARTITIONED_REGION_MESSAGE, InvalidatePartitionedRegionMessage.class);
-    registerDSFID(COMMIT_PROCESS_QUERY_MESSAGE, CommitProcessQueryMessage.class);
-    registerDSFID(COMMIT_PROCESS_QUERY_REPLY_MESSAGE, CommitProcessQueryReplyMessage.class);
-    registerDSFID(DESTROY_REGION_WITH_CONTEXT_MESSAGE,
+    serializer.registerDSFID(RESULTS_COLLECTION_WRAPPER, ResultsCollectionWrapper.class);
+    serializer.registerDSFID(RESULTS_SET, ResultsSet.class);
+    serializer.registerDSFID(SORTED_RESULT_SET, SortedResultSet.class);
+    serializer.registerDSFID(SORTED_STRUCT_SET, SortedStructSet.class);
+    serializer.registerDSFID(NWAY_MERGE_RESULTS, NWayMergeResults.class);
+    serializer.registerDSFID(CUMULATIVE_RESULTS, CumulativeNonDistinctResults.class);
+    serializer.registerDSFID(UNDEFINED, Undefined.class);
+    serializer.registerDSFID(STRUCT_IMPL, StructImpl.class);
+    serializer.registerDSFID(STRUCT_SET, StructSet.class);
+    serializer.registerDSFID(END_OF_BUCKET, PRQueryProcessor.EndOfBucket.class);
+    serializer.registerDSFID(STRUCT_BAG, StructBag.class);
+    serializer.registerDSFID(LINKED_RESULTSET, LinkedResultSet.class);
+    serializer.registerDSFID(LINKED_STRUCTSET, LinkedStructSet.class);
+    serializer.registerDSFID(PR_BUCKET_BACKUP_MESSAGE, BucketBackupMessage.class);
+    serializer.registerDSFID(PR_BUCKET_PROFILE_UPDATE_MESSAGE, BucketProfileUpdateMessage.class);
+    serializer.registerDSFID(PR_ALL_BUCKET_PROFILES_UPDATE_MESSAGE,
+        AllBucketProfilesUpdateMessage.class);
+    serializer.registerDSFID(PR_BUCKET_SIZE_MESSAGE, BucketSizeMessage.class);
+    serializer.registerDSFID(PR_CONTAINS_KEY_VALUE_MESSAGE, ContainsKeyValueMessage.class);
+    serializer.registerDSFID(PR_DUMP_ALL_PR_CONFIG_MESSAGE, DumpAllPRConfigMessage.class);
+    serializer.registerDSFID(PR_DUMP_BUCKETS_MESSAGE, DumpBucketsMessage.class);
+    serializer.registerDSFID(PR_FETCH_ENTRIES_MESSAGE, FetchEntriesMessage.class);
+    serializer.registerDSFID(PR_FETCH_ENTRY_MESSAGE, FetchEntryMessage.class);
+    serializer.registerDSFID(PR_FETCH_KEYS_MESSAGE, FetchKeysMessage.class);
+    serializer.registerDSFID(PR_FLUSH_MESSAGE, FlushMessage.class);
+    serializer.registerDSFID(PR_IDENTITY_REQUEST_MESSAGE, IdentityRequestMessage.class);
+    serializer.registerDSFID(PR_IDENTITY_UPDATE_MESSAGE, IdentityUpdateMessage.class);
+    serializer.registerDSFID(PR_INDEX_CREATION_MSG, IndexCreationMsg.class);
+    serializer.registerDSFID(PR_MANAGE_BUCKET_MESSAGE, ManageBucketMessage.class);
+    serializer.registerDSFID(PR_PRIMARY_REQUEST_MESSAGE, PrimaryRequestMessage.class);
+    serializer.registerDSFID(PR_PRIMARY_REQUEST_REPLY_MESSAGE, PrimaryRequestReplyMessage.class);
+    serializer.registerDSFID(PR_SANITY_CHECK_MESSAGE, PRSanityCheckMessage.class);
+    serializer.registerDSFID(PR_PUTALL_REPLY_MESSAGE, PutAllReplyMessage.class);
+    serializer.registerDSFID(PR_PUT_REPLY_MESSAGE, PutReplyMessage.class);
+    serializer.registerDSFID(PR_QUERY_MESSAGE, QueryMessage.class);
+    serializer.registerDSFID(PR_REMOVE_INDEXES_MESSAGE, RemoveIndexesMessage.class);
+    serializer.registerDSFID(PR_REMOVE_INDEXES_REPLY_MESSAGE, RemoveIndexesReplyMessage.class);
+    serializer.registerDSFID(PR_SIZE_MESSAGE, SizeMessage.class);
+    serializer.registerDSFID(PR_SIZE_REPLY_MESSAGE, SizeReplyMessage.class);
+    serializer.registerDSFID(PR_BUCKET_SIZE_REPLY_MESSAGE, BucketSizeReplyMessage.class);
+    serializer.registerDSFID(PR_CONTAINS_KEY_VALUE_REPLY_MESSAGE,
+        ContainsKeyValueReplyMessage.class);
+    serializer.registerDSFID(PR_FETCH_ENTRIES_REPLY_MESSAGE, FetchEntriesReplyMessage.class);
+    serializer.registerDSFID(PR_FETCH_ENTRY_REPLY_MESSAGE, FetchEntryReplyMessage.class);
+    serializer.registerDSFID(PR_IDENTITY_REPLY_MESSAGE, IdentityReplyMessage.class);
+    serializer.registerDSFID(PR_INDEX_CREATION_REPLY_MSG, IndexCreationReplyMsg.class);
+    serializer.registerDSFID(PR_MANAGE_BUCKET_REPLY_MESSAGE, ManageBucketReplyMessage.class);
+    serializer.registerDSFID(PR_FETCH_KEYS_REPLY_MESSAGE, FetchKeysReplyMessage.class);
+    serializer.registerDSFID(PR_DUMP_B2N_REGION_MSG, DumpB2NRegion.class);
+    serializer.registerDSFID(PR_DUMP_B2N_REPLY_MESSAGE, DumpB2NReplyMessage.class);
+    serializer.registerDSFID(DESTROY_PARTITIONED_REGION_MESSAGE,
+        DestroyPartitionedRegionMessage.class);
+    serializer.registerDSFID(INVALIDATE_PARTITIONED_REGION_MESSAGE,
+        InvalidatePartitionedRegionMessage.class);
+    serializer.registerDSFID(COMMIT_PROCESS_QUERY_MESSAGE, CommitProcessQueryMessage.class);
+    serializer.registerDSFID(COMMIT_PROCESS_QUERY_REPLY_MESSAGE,
+        CommitProcessQueryReplyMessage.class);
+    serializer.registerDSFID(DESTROY_REGION_WITH_CONTEXT_MESSAGE,
-    registerDSFID(PUT_ALL_MESSAGE, PutAllMessage.class);
-    registerDSFID(REMOVE_ALL_MESSAGE, RemoveAllMessage.class);
-    registerDSFID(CLEAR_REGION_MESSAGE, ClearRegionMessage.class);
-    registerDSFID(TOMBSTONE_MESSAGE, TombstoneMessage.class);
-    registerDSFID(INVALIDATE_REGION_MESSAGE, InvalidateRegionMessage.class);
-    registerDSFID(STATE_MARKER_MESSAGE, StateMarkerMessage.class);
-    registerDSFID(STATE_STABILIZATION_MESSAGE, StateStabilizationMessage.class);
-    registerDSFID(STATE_STABILIZED_MESSAGE, StateStabilizedMessage.class);
-    registerDSFID(CLIENT_MARKER_MESSAGE_IMPL, ClientMarkerMessageImpl.class);
-    registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_MESSAGE, TXLockUpdateParticipantsMessage.class);
-    registerDSFID(TX_ORIGINATOR_RECOVERY_MESSAGE, TXOriginatorRecoveryMessage.class);
-    registerDSFID(TX_ORIGINATOR_RECOVERY_REPLY_MESSAGE, TXOriginatorRecoveryReplyMessage.class);
-    registerDSFID(TX_REMOTE_COMMIT_MESSAGE, TXRemoteCommitMessage.class);
-    registerDSFID(TX_REMOTE_ROLLBACK_MESSAGE, TXRemoteRollbackMessage.class);
-    registerDSFID(JTA_BEFORE_COMPLETION_MESSAGE, JtaBeforeCompletionMessage.class);
-    registerDSFID(JTA_AFTER_COMPLETION_MESSAGE, JtaAfterCompletionMessage.class);
-    registerDSFID(QUEUE_REMOVAL_MESSAGE, QueueRemovalMessage.class);
-    registerDSFID(DLOCK_RECOVER_GRANTOR_MESSAGE, DLockRecoverGrantorMessage.class);
-    registerDSFID(DLOCK_RECOVER_GRANTOR_REPLY_MESSAGE, DLockRecoverGrantorReplyMessage.class);
-    registerDSFID(NON_GRANTOR_DESTROYED_REPLY_MESSAGE, NonGrantorDestroyedReplyMessage.class);
-    registerDSFID(IDS_REGISTRATION_MESSAGE, InternalDataSerializer.RegistrationMessage.class);
-    registerDSFID(PR_FETCH_PARTITION_DETAILS_MESSAGE, FetchPartitionDetailsMessage.class);
-    registerDSFID(PR_FETCH_PARTITION_DETAILS_REPLY, FetchPartitionDetailsReplyMessage.class);
-    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_MESSAGE, DeposePrimaryBucketMessage.class);
-    registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_REPLY, DeposePrimaryBucketReplyMessage.class);
-    registerDSFID(PR_BECOME_PRIMARY_BUCKET_MESSAGE, BecomePrimaryBucketMessage.class);
-    registerDSFID(PR_BECOME_PRIMARY_BUCKET_REPLY, BecomePrimaryBucketReplyMessage.class);
-    registerDSFID(PR_REMOVE_BUCKET_MESSAGE, RemoveBucketMessage.class);
-    registerDSFID(EXPIRE_CLIENT_TRANSACTIONS, ExpireDisconnectedClientTransactionsMessage.class);
-    registerDSFID(PR_REMOVE_BUCKET_REPLY, RemoveBucketReplyMessage.class);
-    registerDSFID(PR_MOVE_BUCKET_MESSAGE, MoveBucketMessage.class);
-    registerDSFID(PR_MOVE_BUCKET_REPLY, MoveBucketReplyMessage.class);
-    registerDSFID(ADD_HEALTH_LISTENER_REQUEST, AddHealthListenerRequest.class);
-    registerDSFID(ADD_HEALTH_LISTENER_RESPONSE, AddHealthListenerResponse.class);
-    registerDSFID(ADD_STAT_LISTENER_REQUEST, AddStatListenerRequest.class);
-    registerDSFID(ADD_STAT_LISTENER_RESPONSE, AddStatListenerResponse.class);
-    registerDSFID(ADMIN_CONSOLE_DISCONNECT_MESSAGE, AdminConsoleDisconnectMessage.class);
-    registerDSFID(ADMIN_CONSOLE_MESSAGE, AdminConsoleMessage.class);
-    registerDSFID(MANAGER_STARTUP_MESSAGE, ManagerStartupMessage.class);
-    registerDSFID(JMX_MANAGER_LOCATOR_REQUEST, JmxManagerLocatorRequest.class);
-    registerDSFID(JMX_MANAGER_LOCATOR_RESPONSE, JmxManagerLocatorResponse.class);
-    registerDSFID(ADMIN_FAILURE_RESPONSE, AdminFailureResponse.class);
-    registerDSFID(ALERT_LEVEL_CHANGE_MESSAGE, AlertLevelChangeMessage.class);
-    registerDSFID(ALERT_LISTENER_MESSAGE, AlertListenerMessage.class);
-    registerDSFID(APP_CACHE_SNAPSHOT_MESSAGE, AppCacheSnapshotMessage.class);
-    registerDSFID(BRIDGE_SERVER_REQUEST, BridgeServerRequest.class);
-    registerDSFID(BRIDGE_SERVER_RESPONSE, BridgeServerResponse.class);
-    registerDSFID(CACHE_CONFIG_REQUEST, CacheConfigRequest.class);
-    registerDSFID(CACHE_CONFIG_RESPONSE, CacheConfigResponse.class);
-    registerDSFID(CACHE_INFO_REQUEST, CacheInfoRequest.class);
-    registerDSFID(CACHE_INFO_RESPONSE, CacheInfoResponse.class);
-    registerDSFID(CANCELLATION_MESSAGE, CancellationMessage.class);
-    registerDSFID(CANCEL_STAT_LISTENER_REQUEST, CancelStatListenerRequest.class);
-    registerDSFID(CANCEL_STAT_LISTENER_RESPONSE, CancelStatListenerResponse.class);
-    registerDSFID(DESTROY_ENTRY_MESSAGE, DestroyEntryMessage.class);
-    registerDSFID(ADMIN_DESTROY_REGION_MESSAGE, DestroyRegionMessage.class);
-    registerDSFID(FETCH_DIST_LOCK_INFO_REQUEST, FetchDistLockInfoRequest.class);
-    registerDSFID(FETCH_DIST_LOCK_INFO_RESPONSE, FetchDistLockInfoResponse.class);
-    registerDSFID(FETCH_HEALTH_DIAGNOSIS_REQUEST, FetchHealthDiagnosisRequest.class);
-    registerDSFID(FETCH_HEALTH_DIAGNOSIS_RESPONSE, FetchHealthDiagnosisResponse.class);
-    registerDSFID(FETCH_HOST_REQUEST, FetchHostRequest.class);
-    registerDSFID(FETCH_HOST_RESPONSE, FetchHostResponse.class);
-    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_REQUEST, FetchResourceAttributesRequest.class);
-    registerDSFID(FETCH_RESOURCE_ATTRIBUTES_RESPONSE, FetchResourceAttributesResponse.class);
-    registerDSFID(FETCH_STATS_REQUEST, FetchStatsRequest.class);
-    registerDSFID(FETCH_STATS_RESPONSE, FetchStatsResponse.class);
-    registerDSFID(FETCH_SYS_CFG_REQUEST, FetchSysCfgRequest.class);
-    registerDSFID(FETCH_SYS_CFG_RESPONSE, FetchSysCfgResponse.class);
-    registerDSFID(FLUSH_APP_CACHE_SNAPSHOT_MESSAGE, FlushAppCacheSnapshotMessage.class);
-    registerDSFID(HEALTH_LISTENER_MESSAGE, HealthListenerMessage.class);
-    registerDSFID(OBJECT_DETAILS_REQUEST, ObjectDetailsRequest.class);
-    registerDSFID(OBJECT_DETAILS_RESPONSE, ObjectDetailsResponse.class);
-    registerDSFID(OBJECT_NAMES_REQUEST, ObjectNamesRequest.class);
-    registerDSFID(LICENSE_INFO_REQUEST, LicenseInfoRequest.class);
-    registerDSFID(LICENSE_INFO_RESPONSE, LicenseInfoResponse.class);
-    registerDSFID(OBJECT_NAMES_RESPONSE, ObjectNamesResponse.class);
-    registerDSFID(REGION_ATTRIBUTES_REQUEST, RegionAttributesRequest.class);
-    registerDSFID(REGION_ATTRIBUTES_RESPONSE, RegionAttributesResponse.class);
-    registerDSFID(REGION_REQUEST, RegionRequest.class);
-    registerDSFID(REGION_RESPONSE, RegionResponse.class);
-    registerDSFID(REGION_SIZE_REQUEST, RegionSizeRequest.class);
-    registerDSFID(REGION_SIZE_RESPONSE, RegionSizeResponse.class);
-    registerDSFID(REGION_STATISTICS_REQUEST, RegionStatisticsRequest.class);
-    registerDSFID(REGION_STATISTICS_RESPONSE, RegionStatisticsResponse.class);
-    registerDSFID(REMOVE_HEALTH_LISTENER_REQUEST, RemoveHealthListenerRequest.class);
-    registerDSFID(REMOVE_HEALTH_LISTENER_RESPONSE, RemoveHealthListenerResponse.class);
-    registerDSFID(RESET_HEALTH_STATUS_REQUEST, ResetHealthStatusRequest.class);
-    registerDSFID(RESET_HEALTH_STATUS_RESPONSE, ResetHealthStatusResponse.class);
-    registerDSFID(ROOT_REGION_REQUEST, RootRegionRequest.class);
-    registerDSFID(ROOT_REGION_RESPONSE, RootRegionResponse.class);
-    registerDSFID(SNAPSHOT_RESULT_MESSAGE, SnapshotResultMessage.class);
-    registerDSFID(STAT_LISTENER_MESSAGE, StatListenerMessage.class);
-    registerDSFID(STORE_SYS_CFG_REQUEST, StoreSysCfgRequest.class);
-    registerDSFID(STORE_SYS_CFG_RESPONSE, StoreSysCfgResponse.class);
-    registerDSFID(SUB_REGION_REQUEST, SubRegionRequest.class);
-    registerDSFID(SUB_REGION_RESPONSE, SubRegionResponse.class);
-    registerDSFID(TAIL_LOG_REQUEST, TailLogRequest.class);
-    registerDSFID(TAIL_LOG_RESPONSE, TailLogResponse.class);
-    registerDSFID(VERSION_INFO_REQUEST, VersionInfoRequest.class);
-    registerDSFID(VERSION_INFO_RESPONSE, VersionInfoResponse.class);
-    registerDSFID(HIGH_PRIORITY_ACKED_MESSAGE, HighPriorityAckedMessage.class);
-    registerDSFID(SERIAL_ACKED_MESSAGE, SerialAckedMessage.class);
-    registerDSFID(BUCKET_PROFILE, BucketAdvisor.BucketProfile.class);
-    registerDSFID(SERVER_BUCKET_PROFILE, BucketAdvisor.ServerBucketProfile.class);
-    registerDSFID(PARTITION_PROFILE, RegionAdvisor.PartitionProfile.class);
-    registerDSFID(GATEWAY_SENDER_PROFILE, GatewaySenderAdvisor.GatewaySenderProfile.class);
-    registerDSFID(ROLE_EVENT, RoleEventImpl.class);
-    registerDSFID(CLIENT_REGION_EVENT, ClientRegionEventImpl.class);
-    registerDSFID(PR_INVALIDATE_MESSAGE, InvalidateMessage.class);
-    registerDSFID(PR_INVALIDATE_REPLY_MESSAGE, InvalidateMessage.InvalidateReplyMessage.class);
-    registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_REPLY_MESSAGE,
+    serializer.registerDSFID(PUT_ALL_MESSAGE, PutAllMessage.class);
+    serializer.registerDSFID(REMOVE_ALL_MESSAGE, RemoveAllMessage.class);
+    serializer.registerDSFID(CLEAR_REGION_MESSAGE, ClearRegionMessage.class);
+    serializer.registerDSFID(TOMBSTONE_MESSAGE, TombstoneMessage.class);
+    serializer.registerDSFID(INVALIDATE_REGION_MESSAGE, InvalidateRegionMessage.class);
+    serializer.registerDSFID(STATE_MARKER_MESSAGE, StateMarkerMessage.class);
+    serializer.registerDSFID(STATE_STABILIZATION_MESSAGE, StateStabilizationMessage.class);
+    serializer.registerDSFID(STATE_STABILIZED_MESSAGE, StateStabilizedMessage.class);
+    serializer.registerDSFID(CLIENT_MARKER_MESSAGE_IMPL, ClientMarkerMessageImpl.class);
+    serializer.registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_MESSAGE,
+        TXLockUpdateParticipantsMessage.class);
+    serializer.registerDSFID(TX_ORIGINATOR_RECOVERY_MESSAGE, TXOriginatorRecoveryMessage.class);
+    serializer.registerDSFID(TX_ORIGINATOR_RECOVERY_REPLY_MESSAGE,
+        TXOriginatorRecoveryReplyMessage.class);
+    serializer.registerDSFID(TX_REMOTE_COMMIT_MESSAGE, TXRemoteCommitMessage.class);
+    serializer.registerDSFID(TX_REMOTE_ROLLBACK_MESSAGE, TXRemoteRollbackMessage.class);
+    serializer.registerDSFID(JTA_BEFORE_COMPLETION_MESSAGE, JtaBeforeCompletionMessage.class);
+    serializer.registerDSFID(JTA_AFTER_COMPLETION_MESSAGE, JtaAfterCompletionMessage.class);
+    serializer.registerDSFID(QUEUE_REMOVAL_MESSAGE, QueueRemovalMessage.class);
+    serializer.registerDSFID(DLOCK_RECOVER_GRANTOR_MESSAGE, DLockRecoverGrantorMessage.class);
+    serializer.registerDSFID(DLOCK_RECOVER_GRANTOR_REPLY_MESSAGE,
+        DLockRecoverGrantorReplyMessage.class);
+    serializer.registerDSFID(NON_GRANTOR_DESTROYED_REPLY_MESSAGE,
+        NonGrantorDestroyedReplyMessage.class);
+    serializer.registerDSFID(IDS_REGISTRATION_MESSAGE,
+        InternalDataSerializer.RegistrationMessage.class);
+    serializer.registerDSFID(PR_FETCH_PARTITION_DETAILS_MESSAGE,
+        FetchPartitionDetailsMessage.class);
+    serializer.registerDSFID(PR_FETCH_PARTITION_DETAILS_REPLY,
+        FetchPartitionDetailsReplyMessage.class);
+    serializer.registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_MESSAGE, DeposePrimaryBucketMessage.class);
+    serializer.registerDSFID(PR_DEPOSE_PRIMARY_BUCKET_REPLY, DeposePrimaryBucketReplyMessage.class);
+    serializer.registerDSFID(PR_BECOME_PRIMARY_BUCKET_MESSAGE, BecomePrimaryBucketMessage.class);
+    serializer.registerDSFID(PR_BECOME_PRIMARY_BUCKET_REPLY, BecomePrimaryBucketReplyMessage.class);
+    serializer.registerDSFID(PR_REMOVE_BUCKET_MESSAGE, RemoveBucketMessage.class);
+    serializer.registerDSFID(EXPIRE_CLIENT_TRANSACTIONS,
+        ExpireDisconnectedClientTransactionsMessage.class);
+    serializer.registerDSFID(PR_REMOVE_BUCKET_REPLY, RemoveBucketReplyMessage.class);
+    serializer.registerDSFID(PR_MOVE_BUCKET_MESSAGE, MoveBucketMessage.class);
+    serializer.registerDSFID(PR_MOVE_BUCKET_REPLY, MoveBucketReplyMessage.class);
+    serializer.registerDSFID(ADD_HEALTH_LISTENER_REQUEST, AddHealthListenerRequest.class);
+    serializer.registerDSFID(ADD_HEALTH_LISTENER_RESPONSE, AddHealthListenerResponse.class);
+    serializer.registerDSFID(ADD_STAT_LISTENER_REQUEST, AddStatListenerRequest.class);
+    serializer.registerDSFID(ADD_STAT_LISTENER_RESPONSE, AddStatListenerResponse.class);
+    serializer.registerDSFID(ADMIN_CONSOLE_DISCONNECT_MESSAGE, AdminConsoleDisconnectMessage.class);
+    serializer.registerDSFID(ADMIN_CONSOLE_MESSAGE, AdminConsoleMessage.class);
+    serializer.registerDSFID(MANAGER_STARTUP_MESSAGE, ManagerStartupMessage.class);
+    serializer.registerDSFID(JMX_MANAGER_LOCATOR_REQUEST, JmxManagerLocatorRequest.class);
+    serializer.registerDSFID(JMX_MANAGER_LOCATOR_RESPONSE, JmxManagerLocatorResponse.class);
+    serializer.registerDSFID(ADMIN_FAILURE_RESPONSE, AdminFailureResponse.class);
+    serializer.registerDSFID(ALERT_LEVEL_CHANGE_MESSAGE, AlertLevelChangeMessage.class);
+    serializer.registerDSFID(ALERT_LISTENER_MESSAGE, AlertListenerMessage.class);
+    serializer.registerDSFID(APP_CACHE_SNAPSHOT_MESSAGE, AppCacheSnapshotMessage.class);
+    serializer.registerDSFID(BRIDGE_SERVER_REQUEST, BridgeServerRequest.class);
+    serializer.registerDSFID(BRIDGE_SERVER_RESPONSE, BridgeServerResponse.class);
+    serializer.registerDSFID(CACHE_CONFIG_REQUEST, CacheConfigRequest.class);
+    serializer.registerDSFID(CACHE_CONFIG_RESPONSE, CacheConfigResponse.class);
+    serializer.registerDSFID(CACHE_INFO_REQUEST, CacheInfoRequest.class);
+    serializer.registerDSFID(CACHE_INFO_RESPONSE, CacheInfoResponse.class);
+    serializer.registerDSFID(CANCELLATION_MESSAGE, CancellationMessage.class);
+    serializer.registerDSFID(CANCEL_STAT_LISTENER_REQUEST, CancelStatListenerRequest.class);
+    serializer.registerDSFID(CANCEL_STAT_LISTENER_RESPONSE, CancelStatListenerResponse.class);
+    serializer.registerDSFID(DESTROY_ENTRY_MESSAGE, DestroyEntryMessage.class);
+    serializer.registerDSFID(ADMIN_DESTROY_REGION_MESSAGE, DestroyRegionMessage.class);
+    serializer.registerDSFID(FETCH_DIST_LOCK_INFO_REQUEST, FetchDistLockInfoRequest.class);
+    serializer.registerDSFID(FETCH_DIST_LOCK_INFO_RESPONSE, FetchDistLockInfoResponse.class);
+    serializer.registerDSFID(FETCH_HEALTH_DIAGNOSIS_REQUEST, FetchHealthDiagnosisRequest.class);
+    serializer.registerDSFID(FETCH_HEALTH_DIAGNOSIS_RESPONSE, FetchHealthDiagnosisResponse.class);
+    serializer.registerDSFID(FETCH_HOST_REQUEST, FetchHostRequest.class);
+    serializer.registerDSFID(FETCH_HOST_RESPONSE, FetchHostResponse.class);
+    serializer.registerDSFID(FETCH_RESOURCE_ATTRIBUTES_REQUEST,
+        FetchResourceAttributesRequest.class);
+    serializer.registerDSFID(FETCH_RESOURCE_ATTRIBUTES_RESPONSE,
+        FetchResourceAttributesResponse.class);
+    serializer.registerDSFID(FETCH_STATS_REQUEST, FetchStatsRequest.class);
+    serializer.registerDSFID(FETCH_STATS_RESPONSE, FetchStatsResponse.class);
+    serializer.registerDSFID(FETCH_SYS_CFG_REQUEST, FetchSysCfgRequest.class);
+    serializer.registerDSFID(FETCH_SYS_CFG_RESPONSE, FetchSysCfgResponse.class);
+    serializer.registerDSFID(FLUSH_APP_CACHE_SNAPSHOT_MESSAGE, FlushAppCacheSnapshotMessage.class);
+    serializer.registerDSFID(HEALTH_LISTENER_MESSAGE, HealthListenerMessage.class);
+    serializer.registerDSFID(OBJECT_DETAILS_REQUEST, ObjectDetailsRequest.class);
+    serializer.registerDSFID(OBJECT_DETAILS_RESPONSE, ObjectDetailsResponse.class);
+    serializer.registerDSFID(OBJECT_NAMES_REQUEST, ObjectNamesRequest.class);
+    serializer.registerDSFID(LICENSE_INFO_REQUEST, LicenseInfoRequest.class);
+    serializer.registerDSFID(LICENSE_INFO_RESPONSE, LicenseInfoResponse.class);
+    serializer.registerDSFID(OBJECT_NAMES_RESPONSE, ObjectNamesResponse.class);
+    serializer.registerDSFID(REGION_ATTRIBUTES_REQUEST, RegionAttributesRequest.class);
+    serializer.registerDSFID(REGION_ATTRIBUTES_RESPONSE, RegionAttributesResponse.class);
+    serializer.registerDSFID(REGION_REQUEST, RegionRequest.class);
+    serializer.registerDSFID(REGION_RESPONSE, RegionResponse.class);
+    serializer.registerDSFID(REGION_SIZE_REQUEST, RegionSizeRequest.class);
+    serializer.registerDSFID(REGION_SIZE_RESPONSE, RegionSizeResponse.class);
+    serializer.registerDSFID(REGION_STATISTICS_REQUEST, RegionStatisticsRequest.class);
+    serializer.registerDSFID(REGION_STATISTICS_RESPONSE, RegionStatisticsResponse.class);
+    serializer.registerDSFID(REMOVE_HEALTH_LISTENER_REQUEST, RemoveHealthListenerRequest.class);
+    serializer.registerDSFID(REMOVE_HEALTH_LISTENER_RESPONSE, RemoveHealthListenerResponse.class);
+    serializer.registerDSFID(RESET_HEALTH_STATUS_REQUEST, ResetHealthStatusRequest.class);
+    serializer.registerDSFID(RESET_HEALTH_STATUS_RESPONSE, ResetHealthStatusResponse.class);
+    serializer.registerDSFID(ROOT_REGION_REQUEST, RootRegionRequest.class);
+    serializer.registerDSFID(ROOT_REGION_RESPONSE, RootRegionResponse.class);
+    serializer.registerDSFID(SNAPSHOT_RESULT_MESSAGE, SnapshotResultMessage.class);
+    serializer.registerDSFID(STAT_LISTENER_MESSAGE, StatListenerMessage.class);
+    serializer.registerDSFID(STORE_SYS_CFG_REQUEST, StoreSysCfgRequest.class);
+    serializer.registerDSFID(STORE_SYS_CFG_RESPONSE, StoreSysCfgResponse.class);
+    serializer.registerDSFID(SUB_REGION_REQUEST, SubRegionRequest.class);
+    serializer.registerDSFID(SUB_REGION_RESPONSE, SubRegionResponse.class);
+    serializer.registerDSFID(TAIL_LOG_REQUEST, TailLogRequest.class);
+    serializer.registerDSFID(TAIL_LOG_RESPONSE, TailLogResponse.class);
+    serializer.registerDSFID(VERSION_INFO_REQUEST, VersionInfoRequest.class);
+    serializer.registerDSFID(VERSION_INFO_RESPONSE, VersionInfoResponse.class);
+    serializer.registerDSFID(HIGH_PRIORITY_ACKED_MESSAGE, HighPriorityAckedMessage.class);
+    serializer.registerDSFID(SERIAL_ACKED_MESSAGE, SerialAckedMessage.class);
+    serializer.registerDSFID(BUCKET_PROFILE, BucketAdvisor.BucketProfile.class);
+    serializer.registerDSFID(SERVER_BUCKET_PROFILE, BucketAdvisor.ServerBucketProfile.class);
+    serializer.registerDSFID(PARTITION_PROFILE, RegionAdvisor.PartitionProfile.class);
+    serializer.registerDSFID(GATEWAY_SENDER_PROFILE,
+        GatewaySenderAdvisor.GatewaySenderProfile.class);
+    serializer.registerDSFID(ROLE_EVENT, RoleEventImpl.class);
+    serializer.registerDSFID(CLIENT_REGION_EVENT, ClientRegionEventImpl.class);
+    serializer.registerDSFID(PR_INVALIDATE_MESSAGE, InvalidateMessage.class);
+    serializer.registerDSFID(PR_INVALIDATE_REPLY_MESSAGE,
+        InvalidateMessage.InvalidateReplyMessage.class);
+    serializer.registerDSFID(TX_LOCK_UPDATE_PARTICIPANTS_REPLY_MESSAGE,
-    registerDSFID(STREAMING_REPLY_MESSAGE, StreamingReplyMessage.class);
-    registerDSFID(PARTITION_REGION_CONFIG, PartitionRegionConfig.class);
-    registerDSFID(PREFER_BYTES_CACHED_DESERIALIZABLE, PreferBytesCachedDeserializable.class);
-    registerDSFID(VM_CACHED_DESERIALIZABLE, VMCachedDeserializable.class);
-    registerDSFID(GATEWAY_SENDER_EVENT_IMPL, GatewaySenderEventImpl.class);
-    registerDSFID(SUSPEND_LOCKING_TOKEN, DLockService.SuspendLockingToken.class);
-    registerDSFID(OBJECT_TYPE_IMPL, ObjectTypeImpl.class);
-    registerDSFID(STRUCT_TYPE_IMPL, StructTypeImpl.class);
-    registerDSFID(COLLECTION_TYPE_IMPL, CollectionTypeImpl.class);
-    registerDSFID(TX_LOCK_BATCH, TXLockBatch.class);
-    registerDSFID(GATEWAY_SENDER_EVENT_CALLBACK_ARGUMENT, GatewaySenderEventCallbackArgument.class);
-    registerDSFID(MAP_TYPE_IMPL, MapTypeImpl.class);
-    registerDSFID(STORE_ALL_CACHED_DESERIALIZABLE, StoreAllCachedDeserializable.class);
-    registerDSFID(INTEREST_EVENT_MESSAGE, InterestEventMessage.class);
-    registerDSFID(INTEREST_EVENT_REPLY_MESSAGE, InterestEventReplyMessage.class);
-    registerDSFID(HA_EVENT_WRAPPER, HAEventWrapper.class);
-    registerDSFID(STAT_ALERTS_MGR_ASSIGN_MESSAGE, StatAlertsManagerAssignMessage.class);
-    registerDSFID(UPDATE_ALERTS_DEFN_MESSAGE, UpdateAlertDefinitionMessage.class);
-    registerDSFID(REFRESH_MEMBER_SNAP_REQUEST, RefreshMemberSnapshotRequest.class);
-    registerDSFID(REFRESH_MEMBER_SNAP_RESPONSE, RefreshMemberSnapshotResponse.class);
-    registerDSFID(REGION_SUB_SIZE_REQUEST, RegionSubRegionSizeRequest.class);
-    registerDSFID(REGION_SUB_SIZE_RESPONSE, RegionSubRegionsSizeResponse.class);
-    registerDSFID(CHANGE_REFRESH_INT_MESSAGE, ChangeRefreshIntervalMessage.class);
-    registerDSFID(ALERTS_NOTIF_MESSAGE, AlertsNotificationMessage.class);
-    registerDSFID(FIND_DURABLE_QUEUE, FindDurableQueueMessage.class);
-    registerDSFID(FIND_DURABLE_QUEUE_REPLY, FindDurableQueueReply.class);
-    registerDSFID(CACHE_SERVER_LOAD_MESSAGE, CacheServerLoadMessage.class);
-    registerDSFID(CACHE_SERVER_PROFILE, CacheServerProfile.class);
-    registerDSFID(CONTROLLER_PROFILE, ControllerProfile.class);
-    registerDSFID(DLOCK_QUERY_MESSAGE, DLockQueryProcessor.DLockQueryMessage.class);
-    registerDSFID(DLOCK_QUERY_REPLY, DLockQueryProcessor.DLockQueryReplyMessage.class);
-    registerDSFID(LOCATOR_LIST_REQUEST, LocatorListRequest.class);
-    registerDSFID(LOCATOR_LIST_RESPONSE, LocatorListResponse.class);
-    registerDSFID(CLIENT_CONNECTION_REQUEST, ClientConnectionRequest.class);
-    registerDSFID(CLIENT_CONNECTION_RESPONSE, ClientConnectionResponse.class);
-    registerDSFID(QUEUE_CONNECTION_REQUEST, QueueConnectionRequest.class);
-    registerDSFID(QUEUE_CONNECTION_RESPONSE, QueueConnectionResponse.class);
-    registerDSFID(CLIENT_REPLACEMENT_REQUEST, ClientReplacementRequest.class);
-    registerDSFID(OBJECT_PART_LIST, ObjectPartList.class);
-    registerDSFID(VERSIONED_OBJECT_LIST, VersionedObjectList.class);
-    registerDSFID(OBJECT_PART_LIST66, ObjectPartList651.class);
-    registerDSFID(PUTALL_VERSIONS_LIST, EntryVersionsList.class);
-    registerDSFID(INITIAL_IMAGE_VERSIONED_OBJECT_LIST, InitialImageVersionedEntryList.class);
-    registerDSFID(FIND_VERSION_TAG, FindVersionTagMessage.class);
-    registerDSFID(VERSION_TAG_REPLY, VersionTagReply.class);
-    registerDSFID(DURABLE_CLIENT_INFO_REQUEST, DurableClientInfoRequest.class);
-    registerDSFID(DURABLE_CLIENT_INFO_RESPONSE, DurableClientInfoResponse.class);
-    registerDSFID(CLIENT_INTEREST_MESSAGE, ClientInterestMessageImpl.class);
-    registerDSFID(LATEST_LAST_ACCESS_TIME_MESSAGE, LatestLastAccessTimeMessage.class);
-    registerDSFID(STAT_ALERT_DEFN_NUM_THRESHOLD, NumberThresholdDecoratorImpl.class);
-    registerDSFID(STAT_ALERT_DEFN_GAUGE_THRESHOLD, GaugeThresholdDecoratorImpl.class);
-    registerDSFID(CLIENT_HEALTH_STATS, ClientHealthStats.class);
-    registerDSFID(STAT_ALERT_NOTIFICATION, StatAlertNotification.class);
-    registerDSFID(FILTER_INFO_MESSAGE, InitialImageOperation.FilterInfoMessage.class);
-    registerDSFID(SIZED_BASED_LOAD_PROBE, SizedBasedLoadProbe.class);
-    registerDSFID(PR_MANAGE_BACKUP_BUCKET_MESSAGE, ManageBackupBucketMessage.class);
-    registerDSFID(PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE, ManageBackupBucketReplyMessage.class);
-    registerDSFID(PR_CREATE_BUCKET_MESSAGE, CreateBucketMessage.class);
-    registerDSFID(PR_CREATE_BUCKET_REPLY_MESSAGE, CreateBucketReplyMessage.class);
-    registerDSFID(RESOURCE_MANAGER_PROFILE, ResourceManagerProfile.class);
-    registerDSFID(RESOURCE_PROFILE_MESSAGE, ResourceProfileMessage.class);
-    registerDSFID(JMX_MANAGER_PROFILE, JmxManagerProfile.class);
-    registerDSFID(JMX_MANAGER_PROFILE_MESSAGE, JmxManagerProfileMessage.class);
-    registerDSFID(CLIENT_DENYLIST_MESSAGE, ClientDenylistMessage.class);
-    registerDSFID(REMOVE_CLIENT_FROM_DENYLIST_MESSAGE, RemoveClientFromDenylistMessage.class);
-    registerDSFID(PR_FUNCTION_STREAMING_MESSAGE, PartitionedRegionFunctionStreamingMessage.class);
-    registerDSFID(MEMBER_FUNCTION_STREAMING_MESSAGE, MemberFunctionStreamingMessage.class);
-    registerDSFID(DR_FUNCTION_STREAMING_MESSAGE, DistributedRegionFunctionStreamingMessage.class);
-    registerDSFID(FUNCTION_STREAMING_REPLY_MESSAGE, FunctionStreamingReplyMessage.class);
-    registerDSFID(GET_ALL_SERVERS_REQUEST, GetAllServersRequest.class);
-    registerDSFID(GET_ALL_SERVRES_RESPONSE, GetAllServersResponse.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REQUEST, MembershipViewRequest.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REPLY, MembershipViewReplyMessage.class);
-    registerDSFID(PERSISTENT_STATE_QUERY_REQUEST, PersistentStateQueryMessage.class);
-    registerDSFID(PERSISTENT_STATE_QUERY_REPLY, PersistentStateQueryReplyMessage.class);
-    registerDSFID(PREPARE_NEW_PERSISTENT_MEMBER_REQUEST, PrepareNewPersistentMemberMessage.class);
-    registerDSFID(MISSING_PERSISTENT_IDS_REQUEST, MissingPersistentIDsRequest.class);
-    registerDSFID(MISSING_PERSISTENT_IDS_RESPONSE, MissingPersistentIDsResponse.class);
-    registerDSFID(REVOKE_PERSISTENT_ID_REQUEST, RevokePersistentIDRequest.class);
-    registerDSFID(REVOKE_PERSISTENT_ID_RESPONSE, RevokePersistentIDResponse.class);
-    registerDSFID(REMOVE_PERSISTENT_MEMBER_REQUEST, RemovePersistentMemberMessage.class);
-    registerDSFID(FUNCTION_STREAMING_ORDERED_REPLY_MESSAGE,
+    serializer.registerDSFID(STREAMING_REPLY_MESSAGE, StreamingReplyMessage.class);
+    serializer.registerDSFID(PARTITION_REGION_CONFIG, PartitionRegionConfig.class);
+    serializer.registerDSFID(PREFER_BYTES_CACHED_DESERIALIZABLE,
+        PreferBytesCachedDeserializable.class);
+    serializer.registerDSFID(VM_CACHED_DESERIALIZABLE, VMCachedDeserializable.class);
+    serializer.registerDSFID(GATEWAY_SENDER_EVENT_IMPL, GatewaySenderEventImpl.class);
+    serializer.registerDSFID(SUSPEND_LOCKING_TOKEN, DLockService.SuspendLockingToken.class);
+    serializer.registerDSFID(OBJECT_TYPE_IMPL, ObjectTypeImpl.class);
+    serializer.registerDSFID(STRUCT_TYPE_IMPL, StructTypeImpl.class);
+    serializer.registerDSFID(COLLECTION_TYPE_IMPL, CollectionTypeImpl.class);
+    serializer.registerDSFID(TX_LOCK_BATCH, TXLockBatch.class);
+    serializer.registerDSFID(GATEWAY_SENDER_EVENT_CALLBACK_ARGUMENT,
+        GatewaySenderEventCallbackArgument.class);
+    serializer.registerDSFID(MAP_TYPE_IMPL, MapTypeImpl.class);
+    serializer.registerDSFID(STORE_ALL_CACHED_DESERIALIZABLE, StoreAllCachedDeserializable.class);
+    serializer.registerDSFID(INTEREST_EVENT_MESSAGE, InterestEventMessage.class);
+    serializer.registerDSFID(INTEREST_EVENT_REPLY_MESSAGE, InterestEventReplyMessage.class);
+    serializer.registerDSFID(HA_EVENT_WRAPPER, HAEventWrapper.class);
+    serializer.registerDSFID(STAT_ALERTS_MGR_ASSIGN_MESSAGE, StatAlertsManagerAssignMessage.class);
+    serializer.registerDSFID(UPDATE_ALERTS_DEFN_MESSAGE, UpdateAlertDefinitionMessage.class);
+    serializer.registerDSFID(REFRESH_MEMBER_SNAP_REQUEST, RefreshMemberSnapshotRequest.class);
+    serializer.registerDSFID(REFRESH_MEMBER_SNAP_RESPONSE, RefreshMemberSnapshotResponse.class);
+    serializer.registerDSFID(REGION_SUB_SIZE_REQUEST, RegionSubRegionSizeRequest.class);
+    serializer.registerDSFID(REGION_SUB_SIZE_RESPONSE, RegionSubRegionsSizeResponse.class);
+    serializer.registerDSFID(CHANGE_REFRESH_INT_MESSAGE, ChangeRefreshIntervalMessage.class);
+    serializer.registerDSFID(ALERTS_NOTIF_MESSAGE, AlertsNotificationMessage.class);
+    serializer.registerDSFID(FIND_DURABLE_QUEUE, FindDurableQueueMessage.class);
+    serializer.registerDSFID(FIND_DURABLE_QUEUE_REPLY, FindDurableQueueReply.class);
+    serializer.registerDSFID(CACHE_SERVER_LOAD_MESSAGE, CacheServerLoadMessage.class);
+    serializer.registerDSFID(CACHE_SERVER_PROFILE, CacheServerProfile.class);
+    serializer.registerDSFID(CONTROLLER_PROFILE, ControllerProfile.class);
+    serializer.registerDSFID(DLOCK_QUERY_MESSAGE, DLockQueryProcessor.DLockQueryMessage.class);
+    serializer.registerDSFID(DLOCK_QUERY_REPLY, DLockQueryProcessor.DLockQueryReplyMessage.class);
+    serializer.registerDSFID(LOCATOR_LIST_REQUEST, LocatorListRequest.class);
+    serializer.registerDSFID(LOCATOR_LIST_RESPONSE, LocatorListResponse.class);
+    serializer.registerDSFID(CLIENT_CONNECTION_REQUEST, ClientConnectionRequest.class);
+    serializer.registerDSFID(CLIENT_CONNECTION_RESPONSE, ClientConnectionResponse.class);
+    serializer.registerDSFID(QUEUE_CONNECTION_REQUEST, QueueConnectionRequest.class);
+    serializer.registerDSFID(QUEUE_CONNECTION_RESPONSE, QueueConnectionResponse.class);
+    serializer.registerDSFID(CLIENT_REPLACEMENT_REQUEST, ClientReplacementRequest.class);
+    serializer.registerDSFID(OBJECT_PART_LIST, ObjectPartList.class);
+    serializer.registerDSFID(VERSIONED_OBJECT_LIST, VersionedObjectList.class);
+    serializer.registerDSFID(OBJECT_PART_LIST66, ObjectPartList651.class);
+    serializer.registerDSFID(PUTALL_VERSIONS_LIST, EntryVersionsList.class);
+    serializer.registerDSFID(INITIAL_IMAGE_VERSIONED_OBJECT_LIST,
+        InitialImageVersionedEntryList.class);
+    serializer.registerDSFID(FIND_VERSION_TAG, FindVersionTagMessage.class);
+    serializer.registerDSFID(VERSION_TAG_REPLY, VersionTagReply.class);
+    serializer.registerDSFID(DURABLE_CLIENT_INFO_REQUEST, DurableClientInfoRequest.class);
+    serializer.registerDSFID(DURABLE_CLIENT_INFO_RESPONSE, DurableClientInfoResponse.class);
+    serializer.registerDSFID(CLIENT_INTEREST_MESSAGE, ClientInterestMessageImpl.class);
+    serializer.registerDSFID(LATEST_LAST_ACCESS_TIME_MESSAGE, LatestLastAccessTimeMessage.class);
+    serializer.registerDSFID(STAT_ALERT_DEFN_NUM_THRESHOLD, NumberThresholdDecoratorImpl.class);
+    serializer.registerDSFID(STAT_ALERT_DEFN_GAUGE_THRESHOLD, GaugeThresholdDecoratorImpl.class);
+    serializer.registerDSFID(CLIENT_HEALTH_STATS, ClientHealthStats.class);
+    serializer.registerDSFID(STAT_ALERT_NOTIFICATION, StatAlertNotification.class);
+    serializer.registerDSFID(FILTER_INFO_MESSAGE, InitialImageOperation.FilterInfoMessage.class);
+    serializer.registerDSFID(SIZED_BASED_LOAD_PROBE, SizedBasedLoadProbe.class);
+    serializer.registerDSFID(PR_MANAGE_BACKUP_BUCKET_MESSAGE, ManageBackupBucketMessage.class);
+    serializer.registerDSFID(PR_MANAGE_BACKUP_BUCKET_REPLY_MESSAGE,
+        ManageBackupBucketReplyMessage.class);
+    serializer.registerDSFID(PR_CREATE_BUCKET_MESSAGE, CreateBucketMessage.class);
+    serializer.registerDSFID(PR_CREATE_BUCKET_REPLY_MESSAGE, CreateBucketReplyMessage.class);
+    serializer.registerDSFID(RESOURCE_MANAGER_PROFILE, ResourceManagerProfile.class);
+    serializer.registerDSFID(RESOURCE_PROFILE_MESSAGE, ResourceProfileMessage.class);
+    serializer.registerDSFID(JMX_MANAGER_PROFILE, JmxManagerProfile.class);
+    serializer.registerDSFID(JMX_MANAGER_PROFILE_MESSAGE, JmxManagerProfileMessage.class);
+    serializer.registerDSFID(CLIENT_DENYLIST_MESSAGE, ClientDenylistMessage.class);
+    serializer.registerDSFID(REMOVE_CLIENT_FROM_DENYLIST_MESSAGE,
+        RemoveClientFromDenylistMessage.class);
+    serializer.registerDSFID(PR_FUNCTION_STREAMING_MESSAGE,
+        PartitionedRegionFunctionStreamingMessage.class);
+    serializer.registerDSFID(MEMBER_FUNCTION_STREAMING_MESSAGE,
+        MemberFunctionStreamingMessage.class);
+    serializer.registerDSFID(DR_FUNCTION_STREAMING_MESSAGE,
+        DistributedRegionFunctionStreamingMessage.class);
+    serializer.registerDSFID(FUNCTION_STREAMING_REPLY_MESSAGE, FunctionStreamingReplyMessage.class);
+    serializer.registerDSFID(GET_ALL_SERVERS_REQUEST, GetAllServersRequest.class);
+    serializer.registerDSFID(GET_ALL_SERVRES_RESPONSE, GetAllServersResponse.class);
+    serializer.registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REQUEST, MembershipViewRequest.class);
+    serializer.registerDSFID(PERSISTENT_MEMBERSHIP_VIEW_REPLY, MembershipViewReplyMessage.class);
+    serializer.registerDSFID(PERSISTENT_STATE_QUERY_REQUEST, PersistentStateQueryMessage.class);
+    serializer.registerDSFID(PERSISTENT_STATE_QUERY_REPLY, PersistentStateQueryReplyMessage.class);
+    serializer.registerDSFID(PREPARE_NEW_PERSISTENT_MEMBER_REQUEST,
+        PrepareNewPersistentMemberMessage.class);
+    serializer.registerDSFID(MISSING_PERSISTENT_IDS_REQUEST, MissingPersistentIDsRequest.class);
+    serializer.registerDSFID(MISSING_PERSISTENT_IDS_RESPONSE, MissingPersistentIDsResponse.class);
+    serializer.registerDSFID(REVOKE_PERSISTENT_ID_REQUEST, RevokePersistentIDRequest.class);
+    serializer.registerDSFID(REVOKE_PERSISTENT_ID_RESPONSE, RevokePersistentIDResponse.class);
+    serializer.registerDSFID(REMOVE_PERSISTENT_MEMBER_REQUEST, RemovePersistentMemberMessage.class);
+    serializer.registerDSFID(FUNCTION_STREAMING_ORDERED_REPLY_MESSAGE,
-    registerDSFID(REQUEST_SYNC_MESSAGE, InitialImageOperation.RequestSyncMessage.class);
-    registerDSFID(PERSISTENT_MEMBERSHIP_FLUSH_REQUEST, MembershipFlushRequest.class);
-    registerDSFID(SHUTDOWN_ALL_REQUEST, ShutdownAllRequest.class);
-    registerDSFID(SHUTDOWN_ALL_RESPONSE, ShutdownAllResponse.class);
-    registerDSFID(CLIENT_MEMBERSHIP_MESSAGE, ClientMembershipMessage.class);
-    registerDSFID(END_BUCKET_CREATION_MESSAGE, EndBucketCreationMessage.class);
-    registerDSFID(PREPARE_BACKUP_REQUEST, PrepareBackupRequest.class);
-    registerDSFID(BACKUP_RESPONSE, BackupResponse.class); // in older versions this was
-                                                          // FinishBackupResponse which is
-                                                          // compatible
-    registerDSFID(FINISH_BACKUP_REQUEST, FinishBackupRequest.class);
-    registerDSFID(FINISH_BACKUP_RESPONSE, BackupResponse.class); // for backwards compatibility map
-                                                                 // FINISH_BACKUP_RESPONSE to
-                                                                 // BackupResponse
-    registerDSFID(COMPACT_REQUEST, CompactRequest.class);
-    registerDSFID(COMPACT_RESPONSE, CompactResponse.class);
-    registerDSFID(FLOW_CONTROL_PERMIT_MESSAGE, FlowControlPermitMessage.class);
-    registerDSFID(REQUEST_FILTERINFO_MESSAGE, InitialImageOperation.RequestFilterInfoMessage.class);
-    registerDSFID(PARALLEL_QUEUE_REMOVAL_MESSAGE, ParallelQueueRemovalMessage.class);
-    registerDSFID(BATCH_DESTROY_MESSAGE, BatchDestroyOperation.DestroyMessage.class);
-    registerDSFID(FIND_REMOTE_TX_MESSAGE, FindRemoteTXMessage.class);
-    registerDSFID(FIND_REMOTE_TX_REPLY, FindRemoteTXMessageReply.class);
-    registerDSFID(SERIALIZED_OBJECT_PART_LIST, SerializedObjectPartList.class);
-    registerDSFID(FLUSH_TO_DISK_REQUEST, FlushToDiskRequest.class);
-    registerDSFID(FLUSH_TO_DISK_RESPONSE, FlushToDiskResponse.class);
-    registerDSFID(ENUM_ID, EnumId.class);
-    registerDSFID(ENUM_INFO, EnumInfo.class);
-    registerDSFID(CHECK_TYPE_REGISTRY_STATE, CheckTypeRegistryState.class);
-    registerDSFID(PREPARE_REVOKE_PERSISTENT_ID_REQUEST, PrepareRevokePersistentIDRequest.class);
-    registerDSFID(PERSISTENT_RVV, DiskRegionVersionVector.class);
-    registerDSFID(PERSISTENT_VERSION_TAG, DiskVersionTag.class);
-    registerDSFID(DISK_STORE_ID, DiskStoreID.class);
-    registerDSFID(CLIENT_PING_MESSAGE_IMPL, ClientPingMessageImpl.class);
-    registerDSFID(SNAPSHOT_PACKET, SnapshotPacket.class);
-    registerDSFID(SNAPSHOT_RECORD, SnapshotRecord.class);
-    registerDSFID(FLOW_CONTROL_ACK, FlowControlAckMessage.class);
-    registerDSFID(FLOW_CONTROL_ABORT, FlowControlAbortMessage.class);
-    registerDSFID(MGMT_COMPACT_REQUEST,
+    serializer.registerDSFID(REQUEST_SYNC_MESSAGE, InitialImageOperation.RequestSyncMessage.class);
+    serializer.registerDSFID(PERSISTENT_MEMBERSHIP_FLUSH_REQUEST, MembershipFlushRequest.class);
+    serializer.registerDSFID(SHUTDOWN_ALL_REQUEST, ShutdownAllRequest.class);
+    serializer.registerDSFID(SHUTDOWN_ALL_RESPONSE, ShutdownAllResponse.class);
+    serializer.registerDSFID(CLIENT_MEMBERSHIP_MESSAGE, ClientMembershipMessage.class);
+    serializer.registerDSFID(END_BUCKET_CREATION_MESSAGE, EndBucketCreationMessage.class);
+    serializer.registerDSFID(PREPARE_BACKUP_REQUEST, PrepareBackupRequest.class);
+    serializer.registerDSFID(BACKUP_RESPONSE, BackupResponse.class); // in older versions this was
+    // FinishBackupResponse which is
+    // compatible
+    serializer.registerDSFID(FINISH_BACKUP_REQUEST, FinishBackupRequest.class);
+    serializer.registerDSFID(FINISH_BACKUP_RESPONSE, BackupResponse.class); // for backwards
+                                                                            // compatibility map
+    // FINISH_BACKUP_RESPONSE to
+    // BackupResponse
+    serializer.registerDSFID(COMPACT_REQUEST, CompactRequest.class);
+    serializer.registerDSFID(COMPACT_RESPONSE, CompactResponse.class);
+    serializer.registerDSFID(FLOW_CONTROL_PERMIT_MESSAGE, FlowControlPermitMessage.class);
+    serializer.registerDSFID(REQUEST_FILTERINFO_MESSAGE,
+        InitialImageOperation.RequestFilterInfoMessage.class);
+    serializer.registerDSFID(PARALLEL_QUEUE_REMOVAL_MESSAGE, ParallelQueueRemovalMessage.class);
+    serializer.registerDSFID(BATCH_DESTROY_MESSAGE, BatchDestroyOperation.DestroyMessage.class);
+    serializer.registerDSFID(FIND_REMOTE_TX_MESSAGE, FindRemoteTXMessage.class);
+    serializer.registerDSFID(FIND_REMOTE_TX_REPLY, FindRemoteTXMessageReply.class);
+    serializer.registerDSFID(SERIALIZED_OBJECT_PART_LIST, SerializedObjectPartList.class);
+    serializer.registerDSFID(FLUSH_TO_DISK_REQUEST, FlushToDiskRequest.class);
+    serializer.registerDSFID(FLUSH_TO_DISK_RESPONSE, FlushToDiskResponse.class);
+    serializer.registerDSFID(ENUM_ID, EnumId.class);
+    serializer.registerDSFID(ENUM_INFO, EnumInfo.class);
+    serializer.registerDSFID(CHECK_TYPE_REGISTRY_STATE, CheckTypeRegistryState.class);
+    serializer.registerDSFID(PREPARE_REVOKE_PERSISTENT_ID_REQUEST,
+        PrepareRevokePersistentIDRequest.class);
+    serializer.registerDSFID(PERSISTENT_RVV, DiskRegionVersionVector.class);
+    serializer.registerDSFID(PERSISTENT_VERSION_TAG, DiskVersionTag.class);
+    serializer.registerDSFID(DISK_STORE_ID, DiskStoreID.class);
+    serializer.registerDSFID(CLIENT_PING_MESSAGE_IMPL, ClientPingMessageImpl.class);
+    serializer.registerDSFID(SNAPSHOT_PACKET, SnapshotPacket.class);
+    serializer.registerDSFID(SNAPSHOT_RECORD, SnapshotRecord.class);
+    serializer.registerDSFID(FLOW_CONTROL_ACK, FlowControlAckMessage.class);
+    serializer.registerDSFID(FLOW_CONTROL_ABORT, FlowControlAbortMessage.class);
+    serializer.registerDSFID(MGMT_COMPACT_REQUEST,
-    registerDSFID(MGMT_COMPACT_RESPONSE,
+    serializer.registerDSFID(MGMT_COMPACT_RESPONSE,
-    registerDSFID(MGMT_FEDERATION_COMPONENT,
+    serializer.registerDSFID(MGMT_FEDERATION_COMPONENT,
-    registerDSFID(LOCATOR_STATUS_REQUEST, LocatorStatusRequest.class);
-    registerDSFID(LOCATOR_STATUS_RESPONSE, LocatorStatusResponse.class);
-    registerDSFID(R_FETCH_VERSION_MESSAGE, RemoteFetchVersionMessage.class);
-    registerDSFID(R_FETCH_VERSION_REPLY, RemoteFetchVersionMessage.FetchVersionReplyMessage.class);
-    registerDSFID(RELEASE_CLEAR_LOCK_MESSAGE, ReleaseClearLockMessage.class);
-    registerDSFID(PR_TOMBSTONE_MESSAGE, PRTombstoneMessage.class);
-    registerDSFID(REQUEST_RVV_MESSAGE, InitialImageOperation.RequestRVVMessage.class);
-    registerDSFID(RVV_REPLY_MESSAGE, InitialImageOperation.RVVReplyMessage.class);
-    registerDSFID(SNAPPY_COMPRESSED_CACHED_DESERIALIZABLE,
+    serializer.registerDSFID(LOCATOR_STATUS_REQUEST, LocatorStatusRequest.class);
+    serializer.registerDSFID(LOCATOR_STATUS_RESPONSE, LocatorStatusResponse.class);
+    serializer.registerDSFID(R_FETCH_VERSION_MESSAGE, RemoteFetchVersionMessage.class);
+    serializer.registerDSFID(R_FETCH_VERSION_REPLY,
+        RemoteFetchVersionMessage.FetchVersionReplyMessage.class);
+    serializer.registerDSFID(RELEASE_CLEAR_LOCK_MESSAGE, ReleaseClearLockMessage.class);
+    serializer.registerDSFID(PR_TOMBSTONE_MESSAGE, PRTombstoneMessage.class);
+    serializer.registerDSFID(REQUEST_RVV_MESSAGE, InitialImageOperation.RequestRVVMessage.class);
+    serializer.registerDSFID(RVV_REPLY_MESSAGE, InitialImageOperation.RVVReplyMessage.class);
+    serializer.registerDSFID(SNAPPY_COMPRESSED_CACHED_DESERIALIZABLE,
-    registerDSFID(UPDATE_ENTRY_VERSION_MESSAGE, UpdateEntryVersionMessage.class);
-    registerDSFID(PR_UPDATE_ENTRY_VERSION_MESSAGE, PRUpdateEntryVersionMessage.class);
-    registerDSFID(PR_FETCH_BULK_ENTRIES_MESSAGE, FetchBulkEntriesMessage.class);
-    registerDSFID(PR_FETCH_BULK_ENTRIES_REPLY_MESSAGE, FetchBulkEntriesReplyMessage.class);
-    registerDSFID(PR_QUERY_TRACE_INFO, PRQueryTraceInfo.class);
-    registerDSFID(INDEX_CREATION_DATA, IndexCreationData.class);
-    registerDSFID(DIST_TX_OP, DistTxEntryEvent.class);
-    registerDSFID(DIST_TX_PRE_COMMIT_RESPONSE, DistTxPrecommitResponse.class);
-    registerDSFID(DIST_TX_THIN_ENTRY_STATE, TXEntryState.DistTxThinEntryState.class);
-    registerDSFID(SERVER_PING_MESSAGE, ServerPingMessage.class);
-    registerDSFID(PR_DESTROY_ON_DATA_STORE_MESSAGE, DestroyRegionOnDataStoreMessage.class);
-    registerDSFID(SHUTDOWN_ALL_GATEWAYHUBS_REQUEST, ShutdownAllGatewayHubsRequest.class);
-    registerDSFID(BUCKET_COUNT_LOAD_PROBE, BucketCountLoadProbe.class);
-    registerDSFID(GATEWAY_SENDER_QUEUE_ENTRY_SYNCHRONIZATION_MESSAGE,
+    serializer.registerDSFID(UPDATE_ENTRY_VERSION_MESSAGE, UpdateEntryVersionMessage.class);
+    serializer.registerDSFID(PR_UPDATE_ENTRY_VERSION_MESSAGE, PRUpdateEntryVersionMessage.class);
+    serializer.registerDSFID(PR_FETCH_BULK_ENTRIES_MESSAGE, FetchBulkEntriesMessage.class);
+    serializer.registerDSFID(PR_FETCH_BULK_ENTRIES_REPLY_MESSAGE,
+        FetchBulkEntriesReplyMessage.class);
+    serializer.registerDSFID(PR_QUERY_TRACE_INFO, PRQueryTraceInfo.class);
+    serializer.registerDSFID(INDEX_CREATION_DATA, IndexCreationData.class);
+    serializer.registerDSFID(DIST_TX_OP, DistTxEntryEvent.class);
+    serializer.registerDSFID(DIST_TX_PRE_COMMIT_RESPONSE, DistTxPrecommitResponse.class);
+    serializer.registerDSFID(DIST_TX_THIN_ENTRY_STATE, TXEntryState.DistTxThinEntryState.class);
+    serializer.registerDSFID(SERVER_PING_MESSAGE, ServerPingMessage.class);
+    serializer.registerDSFID(PR_DESTROY_ON_DATA_STORE_MESSAGE,
+        DestroyRegionOnDataStoreMessage.class);
+    serializer.registerDSFID(SHUTDOWN_ALL_GATEWAYHUBS_REQUEST, ShutdownAllGatewayHubsRequest.class);
+    serializer.registerDSFID(BUCKET_COUNT_LOAD_PROBE, BucketCountLoadProbe.class);
+    serializer.registerDSFID(GATEWAY_SENDER_QUEUE_ENTRY_SYNCHRONIZATION_MESSAGE,
-    registerDSFID(GATEWAY_SENDER_QUEUE_ENTRY_SYNCHRONIZATION_ENTRY,
+    serializer.registerDSFID(GATEWAY_SENDER_QUEUE_ENTRY_SYNCHRONIZATION_ENTRY,
-    registerDSFID(ABORT_BACKUP_REQUEST, AbortBackupRequest.class);
+    serializer.registerDSFID(ABORT_BACKUP_REQUEST, AbortBackupRequest.class);
-  public static Object create(int dsfid, DataInput in) throws IOException, ClassNotFoundException {
+  public Object create(int dsfid, DataInput in) throws IOException, ClassNotFoundException {
-        final Constructor<?> cons;
-        if (dsfid >= Byte.MIN_VALUE && dsfid <= Byte.MAX_VALUE) {
-          cons = dsfidMap[dsfid + Byte.MAX_VALUE + 1];
-        } else {
-          cons = (Constructor<?>) dsfidMap2.get(dsfid);
-        }
-        if (cons != null) {
-          try {
-            Object ds = cons.newInstance((Object[]) null);
-            InternalDataSerializer.invokeFromData(ds, in);
-            return ds;
-          } catch (InstantiationException ie) {
-            throw new IOException(ie.getMessage(), ie);
-          } catch (IllegalAccessException iae) {
-            throw new IOException(iae.getMessage(), iae);
-          } catch (InvocationTargetException ite) {
-            Throwable targetEx = ite.getTargetException();
-            if (targetEx instanceof IOException) {
-              throw (IOException) targetEx;
-            } else if (targetEx instanceof ClassNotFoundException) {
-              throw (ClassNotFoundException) targetEx;
-            } else {
-              throw new IOException(ite.getMessage(), targetEx);
-            }
-          }
-        }
-        throw new DSFIDNotFoundException("Unknown DataSerializableFixedID: " + dsfid, dsfid);
-
+        return serializer.create(dsfid, in);
-    serializable.fromData(in);
+    serializable.fromData(in, InternalDataSerializer.createDeserializationContext(in));
-    serializable.fromData(in);
+    serializable.fromData(in, InternalDataSerializer.createDeserializationContext(in));
-    serializable.fromData(in);
+    serializable.fromData(in, InternalDataSerializer.createDeserializationContext(in));
-  public static Constructor<?>[] getDsfidmap() {
-    return dsfidMap;
-  }
-
-  public static Int2ObjectOpenHashMap getDsfidmap2() {
-    return dsfidMap2;
-  }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 UPD42 INS8 INS44 INS44 INS44 MOV21 MOV21 UPD42 MOV42 INS42 UPD43 UPD42 MOV21 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 INS42 INS42 INS42 INS41 INS22 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS52 INS42 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL78 DEL83 DEL43 DEL76 DEL74 DEL85 DEL5 DEL42 DEL42 DEL43 DEL76 DEL74 DEL85 DEL5 DEL34 DEL3 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL39 DEL42 DEL44 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL42 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL45 DEL27 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL8 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL83 DEL42 DEL42 DEL43 DEL14 DEL53 DEL8 DEL31 DEL42 DEL45 DEL79 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL42 DEL32 DEL21 DEL8 DEL28 DEL83 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL59 DEL60 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL83 DEL83 DEL42 DEL43 DEL76 DEL74 DEL85 DEL5 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31