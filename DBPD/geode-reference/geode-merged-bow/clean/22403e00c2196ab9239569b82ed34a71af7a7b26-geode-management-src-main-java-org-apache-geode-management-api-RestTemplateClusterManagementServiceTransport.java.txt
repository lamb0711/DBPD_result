GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

-import java.util.Arrays;
-import java.util.Date;
+import java.util.Collections;
-import java.util.concurrent.CompletableFuture;
-import java.util.stream.Collectors;
+import org.springframework.web.client.RestClientException;
-import org.springframework.web.util.DefaultUriTemplateHandler;
+import org.springframework.web.util.DefaultUriBuilderFactory;
-import org.apache.geode.management.internal.CompletableFutureProxy;
-    DefaultUriTemplateHandler templateHandler = new DefaultUriTemplateHandler();
-    templateHandler
-        .setBaseUrl(schema + "://" + connectionConfig.getHost() + ":" + connectionConfig.getPort()
+
+    DefaultUriBuilderFactory uriBuilderFactory = new DefaultUriBuilderFactory(
+        schema + "://" + connectionConfig.getHost() + ":" + connectionConfig.getPort()
-    restTemplate.setUriTemplateHandler(templateHandler);
+
+    restTemplate.setUriTemplateHandler(uriBuilderFactory);
-      List<Header> defaultHeaders = Arrays.asList(
+      List<Header> defaultHeaders = Collections.singletonList(
-      T configMessage, CommandType command,
-      Class<? extends ClusterManagementRealizationResult> responseType) {
+      T configMessage, CommandType command) {
-        return create(configMessage, responseType);
+        return create(configMessage);
-        return delete(configMessage, responseType);
+        return delete(configMessage);
-      T config, Class<? extends ClusterManagementGetResult> responseType) {
+      T config) {
-        responseType)
-        .getBody();
+        ClusterManagementGetResult.class).getBody();
-      T config, Class<? extends ClusterManagementListResult> responseType) {
+      T config) {
-        .exchange(endPoint + "/?id={id}&group={group}", HttpMethod.GET, makeEntity(config),
-            responseType, config.getId(), config.getGroup())
+        .exchange(endPoint + "?id={id}&group={group}", HttpMethod.GET, makeEntity(config),
+            ClusterManagementListResult.class, config.getId(), config.getGroup())
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> submitMessageForListOperation(
-      A opType, Class<? extends ClusterManagementListOperationsResult> responseType) {
-    final ClusterManagementListOperationsResult<V> result;
-
-    // make the REST call to list in-progress operations
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + opType.getEndpoint(), HttpMethod.GET,
-            makeEntity(null), ClusterManagementListOperationsResult.class)
-        .getBody());
-
-    return new ClusterManagementListOperationsResult<>(
-        result.getResult().stream().map(r -> reAnimate(r, opType.getEndpoint()))
-            .collect(Collectors.toList()));
+  @SuppressWarnings("unchecked")
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<A, V> submitMessageForListOperation(
+      A opType) {
+    return restTemplate.exchange(URI_VERSION + opType.getEndpoint(), HttpMethod.GET,
+        makeEntity(null), ClusterManagementListOperationsResult.class).getBody();
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> submitMessageForStart(
+  @SuppressWarnings("unchecked")
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> submitMessageForGetOperation(
+      A op, String operationId) {
+    String uri = URI_VERSION + op.getEndpoint() + "/" + operationId;
+    return restTemplate
+        .exchange(uri, HttpMethod.GET, makeEntity(null), ClusterManagementOperationResult.class)
+        .getBody();
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> submitMessageForStart(
-    final ClusterManagementOperationResult result;
-
-    // make the REST call to start the operation
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + op.getEndpoint(), HttpMethod.POST, makeEntity(op),
-            ClusterManagementOperationResult.class)
-        .getBody());
-
-    // our restTemplate requires the url to be modified to start from "/v1"
-    return reAnimate(result, op.getEndpoint());
+    return restTemplate.exchange(URI_VERSION + op.getEndpoint(), HttpMethod.POST, makeEntity(op),
+        ClusterManagementOperationResult.class).getBody();
-      return restTemplate.getForEntity(URI_VERSION + "/ping", String.class)
-          .getBody().equals("pong");
-    } catch (Exception e) {
+      return "pong"
+          .equals(restTemplate.getForEntity(URI_VERSION + "/ping", String.class).getBody());
+    } catch (RestClientException e) {
-  private <V extends OperationResult> ClusterManagementOperationResult<V> reAnimate(
-      ClusterManagementOperationResult<V> result, String endPoint) {
-    String uri = URI_VERSION + endPoint + "/" + result.getOperationId();
-
-    // complete the future by polling the check-status REST endpoint
-    CompletableFuture<Date> futureOperationEnded = new CompletableFuture<>();
-    CompletableFutureProxy<V> operationResult =
-        new CompletableFutureProxy<>(restTemplate, uri, longRunningStatusPollingThreadPool,
-            futureOperationEnded);
-
-    return new ClusterManagementOperationResult<>(result, operationResult,
-        result.getOperationStart(), futureOperationEnded, result.getOperator(),
-        result.getOperationId());
-  }
-
-
-  private <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult create(T config,
-      Class<? extends ClusterManagementRealizationResult> expectedResult) {
+  private <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult create(T config) {
-        expectedResult)
+        ClusterManagementRealizationResult.class)
-  private <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult delete(
-      T config, Class<? extends ClusterManagementRealizationResult> expectedResult) {
+  private <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult delete(T config) {
-        expectedResult,
+        ClusterManagementRealizationResult.class,
-  public static <T> HttpEntity<T> makeEntity(T config) {
+  private static <T> HttpEntity<T> makeEntity(T config) {
-  private String getIdentityEndpoint(AbstractConfiguration<?> config) {
+  private static String getIdentityEndpoint(AbstractConfiguration<?> config) {
-
-  private <T extends ClusterManagementResult> T assertSuccessful(T result) {
-    if (result == null) {
-      ClusterManagementResult somethingVeryBadHappened = new ClusterManagementResult(
-          ClusterManagementResult.StatusCode.ERROR, "Unable to parse server response.");
-      throw new ClusterManagementException(somethingVeryBadHappened);
-    } else if (!result.isSuccessful()) {
-      throw new ClusterManagementException(result);
-    }
-    return result;
-  }

MOV26 MOV31 UPD40 UPD40 UPD40 MOV60 INS79 UPD74 INS78 INS79 UPD83 INS73 INS74 INS42 INS79 UPD74 UPD83 INS83 INS42 INS45 INS43 INS42 INS42 INS45 INS42 INS74 MOV43 INS43 MOV43 INS43 UPD42 MOV43 UPD42 INS41 INS42 INS45 INS43 UPD43 INS42 MOV32 INS43 MOV43 INS42 UPD42 MOV42 MOV43 INS32 INS42 MOV32 UPD42 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD43 MOV27 INS57 INS57 MOV32 INS42 INS42 INS42 INS42 INS40 INS32 INS57 MOV32 UPD43 INS57 INS57 UPD42 MOV43 UPD45 MOV43 UPD42 MOV42 INS33 MOV43 INS45 UPD42 MOV43 MOV43 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL74 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL41 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL45 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL83 DEL42 DEL42 DEL43 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31