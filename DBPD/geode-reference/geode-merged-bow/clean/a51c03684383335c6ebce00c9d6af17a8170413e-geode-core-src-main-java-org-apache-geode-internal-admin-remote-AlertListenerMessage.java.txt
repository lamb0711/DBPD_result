GEODE-5923: Add test for local alerts and cleanup classes (#2710)

* Create DistributedSystemMXBeanIntegrationTest
* Add ignored test that confirms bug GEODE-5923
* Cleanup alert related classes and add lots of comments about how they work
-
-
+import org.apache.geode.distributed.DistributedMember;
- * A message that is sent to a particular console distribution manager to notify it of an alert.
+ * A message that is sent to an admin member or manager to notify it of an alert.
+ *
+ * <p>
+ * Alerts are sent from remote members to the manager via {@link AlertListenerMessage} which is
+ * no-ack (asynchronous). This means you cannot log a warning in one VM and immediately verify that
+ * it arrives in the manager VM. You have to use {@code Mockito#timeout(long)} or
+ * {@code Awaitility}.
-  // instance variables
-  private int msgLevel;
-  private Date msgDate;
+
+  private int alertLevel;
+  private Date date;
-  private long tid;
-  private String msg;
+  private long threadId;
+  private String message;
-  public static AlertListenerMessage create(Object recipient, int msgLevel, Date msgDate,
-      String connectionName, String threadName, long tid, String msg, String exceptionText) {
-    AlertListenerMessage m = new AlertListenerMessage();
-    m.setRecipient((InternalDistributedMember) recipient);
-    m.msgLevel = msgLevel;
-    m.msgDate = msgDate;
-    m.connectionName = connectionName;
-    if (m.connectionName == null) {
-      m.connectionName = "";
+  public static AlertListenerMessage create(DistributedMember recipient, int alertLevel, Date date,
+      String connectionName, String threadName, long threadId, String message,
+      String exceptionText) {
+    AlertListenerMessage alertListenerMessage = new AlertListenerMessage();
+    alertListenerMessage.setRecipient((InternalDistributedMember) recipient);
+    alertListenerMessage.alertLevel = alertLevel;
+    alertListenerMessage.date = date;
+    alertListenerMessage.connectionName = connectionName;
+    if (alertListenerMessage.connectionName == null) {
+      alertListenerMessage.connectionName = "";
-    m.threadName = threadName;
-    if (m.threadName == null) {
-      m.threadName = "";
+    alertListenerMessage.threadName = threadName;
+    if (alertListenerMessage.threadName == null) {
+      alertListenerMessage.threadName = "";
-    m.tid = tid;
-    m.msg = msg;
-    if (m.msg == null) {
-      m.msg = "";
+    alertListenerMessage.threadId = threadId;
+    alertListenerMessage.message = message;
+    if (alertListenerMessage.message == null) {
+      alertListenerMessage.message = "";
-    m.exceptionText = exceptionText;
-    if (m.exceptionText == null) {
-      m.exceptionText = "";
+    alertListenerMessage.exceptionText = exceptionText;
+    if (alertListenerMessage.exceptionText == null) {
+      alertListenerMessage.exceptionText = "";
-    return m;
+    return alertListenerMessage;
-      RemoteGemFireVM mgr = agent.getMemberById(this.getSender());
-      if (mgr == null)
+      RemoteGemFireVM manager = agent.getMemberById(getSender());
+      if (manager == null) {
-      Alert alert = new RemoteAlert(mgr, msgLevel, msgDate, connectionName, threadName, tid, msg,
-          exceptionText, getSender());
+      }
+      Alert alert = new RemoteAlert(manager, alertLevel, date, connectionName, threadName, threadId,
+          message, exceptionText, getSender());
-      /**
-       * Its assumed that its a managing node and it has to emit any alerts emitted to it.
+      /*
+       * The other recipient type is a JMX Manager which needs AlertDetails so that it can send out
+       * JMX notifications for the alert.
-      AlertDetails alertDetail = new AlertDetails(msgLevel, msgDate, connectionName, threadName,
-          tid, msg, exceptionText, getSender());
+      AlertDetails alertDetail = new AlertDetails(alertLevel, date, connectionName, threadName,
+          threadId, message, exceptionText, getSender());
-
+  @Override
-    out.writeInt(msgLevel);
-    DataSerializer.writeObject(msgDate, out);
+    out.writeInt(alertLevel);
+    DataSerializer.writeObject(date, out);
-    out.writeLong(tid);
-    DataSerializer.writeString(msg, out);
+    out.writeLong(threadId);
+    DataSerializer.writeString(message, out);
-    this.msgLevel = in.readInt();
-    this.msgDate = (Date) DataSerializer.readObject(in);
-    this.connectionName = DataSerializer.readString(in);
-    this.threadName = DataSerializer.readString(in);
-    this.tid = in.readLong();
-    this.msg = DataSerializer.readString(in);
-    this.exceptionText = DataSerializer.readString(in);
+    alertLevel = in.readInt();
+    date = DataSerializer.readObject(in);
+    connectionName = DataSerializer.readString(in);
+    threadName = DataSerializer.readString(in);
+    threadId = in.readLong();
+    message = DataSerializer.readString(in);
+    exceptionText = DataSerializer.readString(in);
-    return "Alert \"" + this.msg + "\" level " + AlertLevel.forSeverity(this.msgLevel);
+    return "Alert \"" + message + "\" level " + AlertLevel.forSeverity(alertLevel);
-

INS26 INS40 INS78 MOV21 UPD66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS66 INS66 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD40 UPD42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD40 UPD42 UPD40 UPD40 UPD40 UPD42 UPD42 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 MOV43 INS42 UPD40 UPD40 UPD40 UPD40 UPD42 UPD42 INS41 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 DEL52 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22