Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Wraps spawned {@link java.lang.Process} to capture output and provide interaction with the process.
+ * Wraps spawned {@link java.lang.Process} to capture output and provide interaction with the
+ * process.
-  private final long timeoutMillis; 
-  
-  private final String[] jvmArguments;  
-  
+  private final long timeoutMillis;
+
+  private final String[] jvmArguments;
+
-  
+
-  
-  private ProcessWrapper(final String[] jvmArguments, final Class<?> mainClass, final String[] mainArguments, final boolean useMainLauncher, final boolean headless, final long timeoutMillis) {
+
+  private ProcessWrapper(final String[] jvmArguments, final Class<?> mainClass,
+      final String[] mainArguments, final boolean useMainLauncher, final boolean headless,
+      final long timeoutMillis) {
-    
+
-  
+
-  
+
-  
+
-        done = (this.process != null || this.processException != null) && (this.started || this.exitValue.get() > -1 || this.interrupted);
+        done = (this.process != null || this.processException != null)
+            && (this.started || this.exitValue.get() > -1 || this.interrupted);
-  
+
-    
+
-      return this.exitValue.get() == -1 && this.started && !this.stopped && !this.interrupted && this.processThread.isAlive();
+      return this.exitValue.get() == -1 && this.started && !this.stopped && !this.interrupted
+          && this.processThread.isAlive();
-  
+
-  
+
-  
+
-  
+
-  
-  public String getOutput() { 
+
+  public String getOutput() {
-  public String getOutput(final boolean ignoreStopped) { 
+  public String getOutput(final boolean ignoreStopped) {
-  public ProcessWrapper failIfOutputMatches(final String patternString, final long timeoutMillis) throws InterruptedException {
+  public ProcessWrapper failIfOutputMatches(final String patternString, final long timeoutMillis)
+      throws InterruptedException {
-    
+
-    
-    while(System.currentTimeMillis() <= start+timeoutMillis) {
+
+    while (System.currentTimeMillis() <= start + timeoutMillis) {
-        fail("failIfOutputMatches Matched pattern \"" + patternString + "\" against output \"" + line + "\". Output: " + this.allLines);
+        fail("failIfOutputMatches Matched pattern \"" + patternString + "\" against output \""
+            + line + "\". Output: " + this.allLines);
-  
+
-   * Waits for the process stdout or stderr stream to contain the specified 
-   * text. Uses the specified timeout for debugging purposes.
+   * Waits for the process stdout or stderr stream to contain the specified text. Uses the specified
+   * timeout for debugging purposes.
-  public ProcessWrapper waitForOutputToMatch(final String patternString, final long timeoutMillis) throws InterruptedException {
+  public ProcessWrapper waitForOutputToMatch(final String patternString, final long timeoutMillis)
+      throws InterruptedException {
-    
-    while(true) {
+
+    while (true) {
-        fail("Timed out waiting for output \"" + patternString + "\" after " + timeoutMillis + " ms. Output: " + new OutputFormatter(this.allLines));
+        fail("Timed out waiting for output \"" + patternString + "\" after " + timeoutMillis
+            + " ms. Output: " + new OutputFormatter(this.allLines));
-      
+
-        logger.debug("ProcessWrapper:waitForOutputToMatch Matched pattern \"{}\" against output \"{}\"", patternString, line);
+        logger.debug(
+            "ProcessWrapper:waitForOutputToMatch Matched pattern \"{}\" against output \"{}\"",
+            patternString, line);
-        logger.debug("ProcessWrapper:waitForOutputToMatch Did not match pattern \"{}\" against output \"{}\"", patternString, line);
+        logger.debug(
+            "ProcessWrapper:waitForOutputToMatch Did not match pattern \"{}\" against output \"{}\"",
+            patternString, line);
-  
+
-   * Waits for the process stdout or stderr stream to contain the specified 
-   * text. Uses the default timeout.
+   * Waits for the process stdout or stderr stream to contain the specified text. Uses the default
+   * timeout.
-  public ProcessWrapper waitForOutputToMatch(final String patternString) throws InterruptedException {
+  public ProcessWrapper waitForOutputToMatch(final String patternString)
+      throws InterruptedException {
-  public ProcessWrapper execute(final Properties properties) throws InterruptedException, TimeoutException {
+  public ProcessWrapper execute(final Properties properties)
+      throws InterruptedException, TimeoutException {
-  
-  public ProcessWrapper execute(final Properties properties, final File workingDirectory) throws InterruptedException, TimeoutException {
+
+  public ProcessWrapper execute(final Properties properties, final File workingDirectory)
+      throws InterruptedException, TimeoutException {
-    
+
-      for (String jvmArgument: this.jvmArguments) {
+      for (String jvmArgument : this.jvmArguments) {
-    
+
-        final String[] command = defineCommand(jvmArgumentsList.toArray(new String[jvmArgumentsList.size()]));
+        final String[] command =
+            defineCommand(jvmArgumentsList.toArray(new String[jvmArgumentsList.size()]));
-        
+
-        
+
-        
+
-        
-        final ProcessStreamReader stdOut = new ProcessStreamReader(commandString, this.process.getInputStream(), this.lineBuffer, this.allLines);
-        final ProcessStreamReader stdErr = new ProcessStreamReader(commandString, this.process.getErrorStream(), this.lineBuffer, this.allLines);
-  
+
+        final ProcessStreamReader stdOut = new ProcessStreamReader(commandString,
+            this.process.getInputStream(), this.lineBuffer, this.allLines);
+        final ProcessStreamReader stdErr = new ProcessStreamReader(commandString,
+            this.process.getErrorStream(), this.lineBuffer, this.allLines);
+
-      
+
-      
+
-      
+
-  
+
-    
+
-  
+
-  
+
-  
+
-  
+
+
-      //nothing
+      // nothing
+
-    public Builder mainClass(final Class<?> mainClass) { 
+
+    public Builder mainClass(final Class<?> mainClass) {
+
+
+
+
+
+
-      return new ProcessWrapper(jvmArguments, mainClass, mainArguments, useMainLauncher, headless, timeoutMillis);
+      return new ProcessWrapper(jvmArguments, mainClass, mainArguments, useMainLauncher, headless,
+          timeoutMillis);

UPD66 INS66