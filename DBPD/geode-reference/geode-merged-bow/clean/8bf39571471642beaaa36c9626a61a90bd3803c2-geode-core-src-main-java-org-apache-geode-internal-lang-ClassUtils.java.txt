Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The ClassUtils class is an abstract utility class for working with and invoking methods on Class objects.
+ * The ClassUtils class is an abstract utility class for working with and invoking methods on Class
+ * objects.
+ * 
-   * Attempts to load the specified class by fully qualified name.  If the class could not be found, then this method
-   * handles the ClassNotFoundException and throws the specified RuntimeException instead.
+   * Attempts to load the specified class by fully qualified name. If the class could not be found,
+   * then this method handles the ClassNotFoundException and throws the specified RuntimeException
+   * instead.
+   * 
-   * @param e the RuntimeException to throw in place of the ClassNotFoundException if the class could not be found
-   * and loaded.
+   * @param e the RuntimeException to throw in place of the ClassNotFoundException if the class
+   *        could not be found and loaded.
-    }
-    catch (ClassNotFoundException ignore) {
+    } catch (ClassNotFoundException ignore) {
-    }
-    catch (NoClassDefFoundError ignore) {
+    } catch (NoClassDefFoundError ignore) {
+   * 
+   * 
-   * Determine whether the specified class is on the classpath.
-   * <<p/>
+   * Determine whether the specified class is on the classpath. <
+   * <p/>
+   * 
-      forName(className, new IllegalArgumentException(String.format("Class (%1$s) is not available!", className)));
+      forName(className,
+          new IllegalArgumentException(String.format("Class (%1$s) is not available!", className)));
-    }
-    catch (IllegalArgumentException ignore) {
+    } catch (IllegalArgumentException ignore) {
-   * Determines whether the specified Object parameter is an instance of, or is assignment-compatible with the given
-   * Class type.  Note, this method is null-safe for both Class and Object value references.
+   * Determines whether the specified Object parameter is an instance of, or is
+   * assignment-compatible with the given Class type. Note, this method is null-safe for both Class
+   * and Object value references.
+   * 
-   * @param obj the Object being determined for assignment-compatibility with the specified Class type.
-   * @return a boolean value indicating if the given Object is an instance of the specified Class type.
+   * @param obj the Object being determined for assignment-compatibility with the specified Class
+   *        type.
+   * @return a boolean value indicating if the given Object is an instance of the specified Class
+   *         type.
-   * Determines whether the specified Object is not a instance of the following Class types.  The Object is considered
-   * not an instance of the Class types if the condition holds for all Class types.
+   * Determines whether the specified Object is not a instance of the following Class types. The
+   * Object is considered not an instance of the Class types if the condition holds for all Class
+   * types.
+   * 
-   * @return a boolean value of true if the Object is not an instance of any of the specified Class types.
+   * @return a boolean value of true if the Object is not an instance of any of the specified Class
+   *         types.

UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66