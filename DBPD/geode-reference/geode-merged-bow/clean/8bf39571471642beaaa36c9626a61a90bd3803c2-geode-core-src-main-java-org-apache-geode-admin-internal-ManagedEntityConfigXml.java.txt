Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The abstract superclass of classes that convert XML into a {@link
- * org.apache.geode.admin.DistributedSystemConfig} and vice versa.
- * It provides helper methods and constants.
+ * The abstract superclass of classes that convert XML into a
+ * {@link org.apache.geode.admin.DistributedSystemConfig} and vice versa. It provides helper methods
+ * and constants.
-  protected static final String DTD_LOCATION =
-    "/org/apache/geode/admin/doc-files/ds5_0.dtd";
+  protected static final String DTD_LOCATION = "/org/apache/geode/admin/doc-files/ds5_0.dtd";
-  protected static final String SYSTEM_ID =
-    "http://www.gemstone.com/dtd/ds5_0.dtd";
+  protected static final String SYSTEM_ID = "http://www.gemstone.com/dtd/ds5_0.dtd";
-  protected static final String PUBLIC_ID = 
-    "-//GemStone Systems, Inc.//GemFire Distributed System 5.0//EN";
+  protected static final String PUBLIC_ID =
+      "-//GemStone Systems, Inc.//GemFire Distributed System 5.0//EN";
-  public static final String DISTRIBUTED_SYSTEM =
-    "distributed-system";
+  public static final String DISTRIBUTED_SYSTEM = "distributed-system";
-  public static final String AUTHENTICATION_REQUIRED =
-    "authentication-required";
+  public static final String AUTHENTICATION_REQUIRED = "authentication-required";
-  
+
-  ///////////////////////  Instance Methods  ///////////////////////
+  /////////////////////// Instance Methods ///////////////////////
-   * Given a public id, attempt to resolve it to a DTD.  Returns an
-   * <code>InputSoure</code> for the DTD.
+   * Given a public id, attempt to resolve it to a DTD. Returns an <code>InputSoure</code> for the
+   * DTD.
-  public InputSource resolveEntity(String publicId, String systemId) 
-    throws SAXException {
+  public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
-      throw new SAXException(LocalizedStrings.ManagedEntityConfigXml_PUBLIC_ID_0_SYSTEM_ID_1.toLocalizedString(new Object[] {publicId, systemId}));
+      throw new SAXException(LocalizedStrings.ManagedEntityConfigXml_PUBLIC_ID_0_SYSTEM_ID_1
+          .toLocalizedString(new Object[] {publicId, systemId}));
-//    if (location != null) (cannot be null) 
+    // if (location != null) (cannot be null)
-        throw new SAXNotRecognizedException(LocalizedStrings.ManagedEntityConfigXml_DTD_NOT_FOUND_0.toLocalizedString(location));
+        throw new SAXNotRecognizedException(
+            LocalizedStrings.ManagedEntityConfigXml_DTD_NOT_FOUND_0.toLocalizedString(location));
-//    } else {
-//      throw new SAXNotRecognizedException(LocalizedStrings.ManagedEntityConfigXml_COULD_NOT_FIND_DTD_FOR_0_1.toLocalizedString(new Object[] {publicId, systemId}));
+      // } else {
+      // throw new
+      // SAXNotRecognizedException(LocalizedStrings.ManagedEntityConfigXml_COULD_NOT_FIND_DTD_FOR_0_1.toLocalizedString(new
+      // Object[] {publicId, systemId}));
-  public void warning(SAXParseException ex) throws SAXException { 
+  public void warning(SAXParseException ex) throws SAXException {
-    IllegalArgumentException ex2 = new IllegalArgumentException(LocalizedStrings.ManagedEntityConfigXml_ERROR_WHILE_PARSING_XML.toLocalizedString());
+    IllegalArgumentException ex2 = new IllegalArgumentException(
+        LocalizedStrings.ManagedEntityConfigXml_ERROR_WHILE_PARSING_XML.toLocalizedString());
-  
+
-    IllegalArgumentException ex2 = new IllegalArgumentException(LocalizedStrings.ManagedEntityConfigXml_FATAL_ERROR_WHILE_PARSING_XML.toLocalizedString());
+    IllegalArgumentException ex2 = new IllegalArgumentException(
+        LocalizedStrings.ManagedEntityConfigXml_FATAL_ERROR_WHILE_PARSING_XML.toLocalizedString());

UPD66 UPD66 UPD66 UPD66 UPD66