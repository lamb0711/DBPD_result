Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  //Used for slice operations
+
+  // Used for slice operations
-  
+
-  
+
-    FileIndexInput clone = (FileIndexInput)super.clone();
+    FileIndexInput clone = (FileIndexInput) super.clone();
-  public IndexInput slice(String sliceDescription, long offset, long length)
-      throws IOException {
-    if(length > (this.sliceLength - offset)) {
-      throw new IllegalArgumentException("Slice length is to large. Asked for " + length + " file length is " + sliceLength + ": " + this.file.getName());
+  public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {
+    if (length > (this.sliceLength - offset)) {
+      throw new IllegalArgumentException("Slice length is to large. Asked for " + length
+          + " file length is " + sliceLength + ": " + this.file.getName());
-    if(offset < 0 || offset >= this.sliceLength) {
+    if (offset < 0 || offset >= this.sliceLength) {
-    
-    FileIndexInput result = new FileIndexInput(sliceDescription, file, sliceOffset + offset, length);
+
+    FileIndexInput result =
+        new FileIndexInput(sliceDescription, file, sliceOffset + offset, length);
-    if(++position > sliceLength) {
+    if (++position > sliceLength) {
-    
+
-    if(result == -1) {
+    if (result == -1) {
-    if(len == 0) {
+    if (len == 0) {
-    
-    if(position + len > sliceLength) {
+
+    if (position + len > sliceLength) {
-    
-    //For the FileSystemInputStream, it will always read all bytes, up
-    //until the end of the file. So if we didn't get enough bytes, it's
-    //because we reached the end of the file.
+
+    // For the FileSystemInputStream, it will always read all bytes, up
+    // until the end of the file. So if we didn't get enough bytes, it's
+    // because we reached the end of the file.
-    if(numRead < len) {
+    if (numRead < len) {
-    
-    position+=len;
-  } 
-}
+
+    position += len;
+  }
+}

