Merge branch 'release/1.3.0'

-      Integer.getInteger("GatewaySender.TOKEN_TIMEOUT", 15000).intValue();
+      Integer.getInteger("GatewaySender.TOKEN_TIMEOUT", 120000).intValue();
+  protected void stopProcessing() {
+    // Stop the dispatcher
+    AbstractGatewaySenderEventProcessor ev = this.eventProcessor;
+    if (ev != null && !ev.isStopped()) {
+      ev.stopProcessing();
+    }
+
+    if (ev != null && ev.getDispatcher() != null) {
+      ev.getDispatcher().shutDownAckReaderConnection();
+    }
+  }
+
+
+  protected GatewayQueueEvent getSynchronizationEvent(Object key, long timestamp) {
+    GatewayQueueEvent event = null;
+    for (RegionQueue queue : getQueues()) {
+      Region region = queue.getRegion();
+      for (Iterator i = region.values().iterator(); i.hasNext();) {
+        GatewaySenderEventImpl gsei = (GatewaySenderEventImpl) i.next();
+        if (gsei.getKey().equals(key) && gsei.getVersionTimeStamp() == timestamp) {
+          event = gsei;
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.AbstractGatewaySender_PROVIDING_SYNCHRONIZATION_EVENT,
+              new Object[] {this, key, timestamp, event}));
+          this.statistics.incSynchronizationEventsProvided();
+          break;
+        }
+      }
+    }
+    return event;
+  }
+
+  protected void putSynchronizationEvent(GatewayQueueEvent event) {
+    if (this.eventProcessor != null) {
+      this.lifeCycleLock.readLock().lock();
+      try {
+        logger.info(LocalizedMessage.create(
+            LocalizedStrings.AbstractGatewaySender_ENQUEUEING_SYNCHRONIZATION_EVENT,
+            new Object[] {this, event}));
+        this.eventProcessor.enqueueEvent(event);
+        this.statistics.incSynchronizationEventsEnqueued();
+      } catch (Throwable t) {
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.AbstractGatewaySender_CAUGHT_EXCEPTION_ENQUEUEING_SYNCHRONIZATION_EVENT,
+            new Object[] {this, event}), t);
+      } finally {
+        this.lifeCycleLock.readLock().unlock();
+      }
+    }
+  }

INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS60 INS25 INS25 INS42 INS43 INS42 INS39 INS42 INS60 INS70 INS41 INS43 INS42 INS25 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS27 INS8 UPD34 INS42 INS42 INS22 INS27 INS38 INS21 INS27 INS27 INS21 INS42 INS42 INS33 INS43 INS42 INS42 INS60 INS24 INS22 INS33 INS21 INS54 INS52 INS42 INS42 INS33 INS32 INS32 INS42 INS33 INS32 INS33 INS32 INS42 INS43 INS59 INS58 INS32 INS8 INS52 INS42 INS32 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS32 INS42 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS22 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS32 INS32 INS42 INS42 INS42 INS11 INS32 INS27 INS21 INS21 INS21 INS10 INS52 INS42 INS42 INS42 INS32 INS22 INS42 INS42 INS22 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS7 INS32 INS32 INS42 INS42 INS40 INS3 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS5 INS4 INS42 INS42 INS40 INS3 INS52 INS42 INS42 INS42 INS40 INS3 INS52 INS42 INS43 INS85 INS52 INS42 INS5 INS4 INS5 INS4 INS42 INS43 INS85 INS52 INS42 INS43 INS85 INS52 INS42 INS42 INS42 INS42 INS42