Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static boolean INLINE_REGION_KEYS = !Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISABLE_INLINE_REGION_KEYS");
+  public static boolean INLINE_REGION_KEYS =
+      !Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISABLE_INLINE_REGION_KEYS");
-   * The maximum number of longs any of region entry subclasses use
-   * to store the string key inline.
+   * The maximum number of longs any of region entry subclasses use to store the string key inline.
-  
+
-   * Given the number of longs used to encode the inline string
-   * return the maximum number of characters that can be encoded
-   * into that many longs.
+   * Given the number of longs used to encode the inline string return the maximum number of
+   * characters that can be encoded into that many longs.
-   * Return null if the given string can not be encoded inline.
-   * Return true if the given string can be encoded inline as bytes.
-   * Return false if the given string can be encoded inline as chars.
+   * Return null if the given string can not be encoded inline. Return true if the given string can
+   * be encoded inline as bytes. Return false if the given string can be encoded inline as chars.
-    for (int i=0; i < skey.length(); i++) {
+    for (int i = 0; i < skey.length(); i++) {

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66