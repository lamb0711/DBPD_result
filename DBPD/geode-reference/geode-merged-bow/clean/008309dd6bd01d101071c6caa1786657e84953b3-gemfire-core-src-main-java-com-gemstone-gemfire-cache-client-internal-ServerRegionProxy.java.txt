Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.util.BridgeClient;
-import com.gemstone.gemfire.cache.util.BridgeLoader;
-import com.gemstone.gemfire.cache.util.BridgeWriter;
-import com.gemstone.gemfire.internal.cache.BridgeObserver;
-import com.gemstone.gemfire.internal.cache.BridgeObserverHolder;
+import com.gemstone.gemfire.internal.cache.ClientServerObserver;
+import com.gemstone.gemfire.internal.cache.ClientServerObserverHolder;
-      final CacheLoader cl = r.getAttributes().getCacheLoader();
-      final CacheWriter cw = r.getAttributes().getCacheWriter();
-      if (AbstractRegion.isBridgeLoader(cl) || AbstractRegion.isBridgeWriter(cw)) {
-        Object loaderPool = null;
-        Object writerPool = null;
-        if (AbstractRegion.isBridgeLoader(cl)) {
-          if (cl instanceof BridgeLoader) {
-            loaderPool = ((BridgeLoader)cl).getConnectionProxy();
-          } else {
-            loaderPool = ((BridgeClient)cl).getConnectionProxy();
-          }
-        }
-        if (AbstractRegion.isBridgeWriter(cw)) {
-          writerPool = ((BridgeWriter)cw).getConnectionProxy();
-        }
-        if (loaderPool != writerPool && loaderPool != null && writerPool != null) {
-          throw new IllegalStateException("The region " + r.getFullPath()
-                                          + " has a BridgeLoader and a BridgeWriter/BridgeClient "
-                                          + " that are configured with different connection pools. "
-                                          + " This is not allowed. Instead create a single BridgeClient and install it as both the loader and the writer."
-                                          + " loaderPool="+loaderPool + " writerPool=" + writerPool);
-        }
-        InternalPool result = (InternalPool)loaderPool;
-        if (result == null) {
-          result = (InternalPool)writerPool;
-        }
-        return result;
-      } else {
-        throw new IllegalStateException("The region " + r.getFullPath()
-                                        + " did not have a client pool configured.");
-      }
+      throw new IllegalStateException("The region " + r.getFullPath()
+          + " did not have a client pool configured.");
-          BridgeObserver bo = BridgeObserverHolder.getInstance();
+          ClientServerObserver bo = ClientServerObserverHolder.getInstance();
-        BridgeObserver bo = BridgeObserverHolder.getInstance();
+        ClientServerObserver bo = ClientServerObserverHolder.getInstance();
-      ClientMetadataService cms = region.getCache()
-      .getClientMetadataService();
-      if (serverRegionExecutor.getFilter().isEmpty()) {
-        HashMap<ServerLocation, HashSet<Integer>> serverToBuckets = cms
-        .groupByServerToAllBuckets(this.region, function.optimizeForWrite());
-        if (serverToBuckets == null || serverToBuckets.isEmpty()) {
-          ExecuteRegionFunctionOp.execute(this.pool, rgnName, function,
-              serverRegionExecutor, resultCollector, hasResult, retryAttempts);
-          cms.scheduleGetPRMetaData(region, false);
+      ClientMetadataService cms = region.getCache().getClientMetadataService();
+      if (cms.isMetadataStable()) {
+        if (serverRegionExecutor.getFilter().isEmpty()) {
+          HashMap<ServerLocation, HashSet<Integer>> serverToBuckets = cms
+              .groupByServerToAllBuckets(this.region,
+                  function.optimizeForWrite());
+          if (serverToBuckets == null || serverToBuckets.isEmpty()) {
+            ExecuteRegionFunctionOp
+                .execute(this.pool, rgnName, function, serverRegionExecutor,
+                    resultCollector, hasResult, retryAttempts);
+            cms.scheduleGetPRMetaData(region, false);
+          } else {
+            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
+                function, serverRegionExecutor, resultCollector, hasResult,
+                serverToBuckets, retryAttempts, true);
+          }
+        } else {
+          boolean isBucketFilter = serverRegionExecutor.getExecuteOnBucketSetFlag();
+          Map<ServerLocation, HashSet> serverToFilterMap = cms
+              .getServerToFilterMap(serverRegionExecutor.getFilter(), region,
+                  function.optimizeForWrite(), isBucketFilter);
+          if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {
+            ExecuteRegionFunctionOp
+                .execute(this.pool, rgnName, function, serverRegionExecutor,
+                    resultCollector, hasResult, retryAttempts);
+            cms.scheduleGetPRMetaData(region, false);
+          } else {
+            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
+                function, serverRegionExecutor, resultCollector, hasResult,
+                serverToFilterMap, retryAttempts, isBucketFilter);
+          }
-        else {
-          ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
-              function, serverRegionExecutor, resultCollector, hasResult,
-              serverToBuckets, retryAttempts, true);
-        }
-      }
-      else {
-        boolean isBucketFilter = serverRegionExecutor.getExecuteOnBucketSetFlag();
-        Map<ServerLocation, HashSet> serverToFilterMap = cms
-        .getServerToFilterMap(serverRegionExecutor.getFilter(), region,
-            function.optimizeForWrite(), isBucketFilter);
-        if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {         
-          ExecuteRegionFunctionOp.execute(this.pool, rgnName, function,
-              serverRegionExecutor, resultCollector, hasResult, retryAttempts);
-            cms.scheduleGetPRMetaData(region, false);          
-        }
-        else {
-          //Asif: In case of withBucketFilter , the serverToFilterMap is nothing but
-          // serverToBucketsMap, so allBuckets flag should be true in that case 
-          // so allBuckets flag is governed by isBucketFilter flag
-          ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
-              function, serverRegionExecutor, resultCollector, hasResult,
-              serverToFilterMap, retryAttempts, isBucketFilter);
-          
-         
-        }
+      } else {
+        cms.scheduleGetPRMetaData(region, false);
+        ExecuteRegionFunctionOp.execute(this.pool, rgnName, function,
+            serverRegionExecutor, resultCollector, hasResult, retryAttempts);
-
-      .getClientMetadataService();
-      if (serverRegionExecutor.getFilter().isEmpty()) {
-        HashMap<ServerLocation, HashSet<Integer>> serverToBuckets = cms
-        .groupByServerToAllBuckets(this.region, optimizeForWrite);
-        if (serverToBuckets == null || serverToBuckets.isEmpty()) {
-          ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId,
-              serverRegionExecutor, resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite);
-          cms.scheduleGetPRMetaData(this.region, false);
+          .getClientMetadataService();
+      if (cms.isMetadataStable()) {
+        if (serverRegionExecutor.getFilter().isEmpty()) {
+          HashMap<ServerLocation, HashSet<Integer>> serverToBuckets = cms
+              .groupByServerToAllBuckets(this.region, optimizeForWrite);
+          if (serverToBuckets == null || serverToBuckets.isEmpty()) {
+            ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId,
+                serverRegionExecutor, resultCollector, hasResult,
+                retryAttempts, isHA, optimizeForWrite);
+            cms.scheduleGetPRMetaData(this.region, false);
+          } else {
+            ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
+                functionId, serverRegionExecutor, resultCollector, hasResult,
+                serverToBuckets, retryAttempts, true, isHA, optimizeForWrite);
+          }
+        } else {
+          boolean isBucketsAsFilter = serverRegionExecutor.getExecuteOnBucketSetFlag();
+          Map<ServerLocation, HashSet> serverToFilterMap = cms
+              .getServerToFilterMap(serverRegionExecutor.getFilter(), region,
+                  optimizeForWrite, isBucketsAsFilter);
+          if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {
+            ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId,
+                serverRegionExecutor, resultCollector, hasResult,
+                retryAttempts, isHA, optimizeForWrite);
+            cms.scheduleGetPRMetaData(region, false);
+          } else {
+            ExecuteRegionFunctionSingleHopOp
+                .execute(this.pool, this.region, functionId,
+                    serverRegionExecutor, resultCollector, hasResult,
+                    serverToFilterMap, retryAttempts, false, isHA,
+                    optimizeForWrite);
+          }
-        else {
-          ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
-              functionId, serverRegionExecutor, resultCollector, hasResult,
-              serverToBuckets, retryAttempts, true, isHA, optimizeForWrite);
-        }
-      }
-      else {
-        boolean isBucketsAsFilter = serverRegionExecutor.getExecuteOnBucketSetFlag();
-        Map<ServerLocation, HashSet> serverToFilterMap = cms
-        .getServerToFilterMap(serverRegionExecutor.getFilter(), region,
-            optimizeForWrite, isBucketsAsFilter);
-        if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {         
-          ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId,
-              serverRegionExecutor, resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite);
-            cms.scheduleGetPRMetaData(region, false);          
-        }
-        else {
-          ExecuteRegionFunctionSingleHopOp.execute(this.pool, this.region,
-              functionId, serverRegionExecutor, resultCollector, hasResult,
-              serverToFilterMap, retryAttempts, false, isHA, optimizeForWrite);
-        }
+      } else {
+        cms.scheduleGetPRMetaData(region, false);
+        ExecuteRegionFunctionOp.execute(this.pool, rgnName, functionId,
+            serverRegionExecutor, resultCollector, hasResult, retryAttempts,
+            isHA, optimizeForWrite);

UPD40 UPD40 INS8 MOV60 MOV25 MOV27 MOV8 MOV8 INS8 INS8 MOV60 INS25 MOV60 INS25 INS32 MOV8 INS8 INS32 MOV8 INS8 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 UPD43 INS32 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS9 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 INS52 INS42 INS52 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8