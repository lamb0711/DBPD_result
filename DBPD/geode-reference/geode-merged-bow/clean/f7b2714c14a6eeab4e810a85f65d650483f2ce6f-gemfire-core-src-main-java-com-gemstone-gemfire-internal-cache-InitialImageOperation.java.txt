GEODE-73: Removing unnecessary P2P backward-compatibility serialization code

Geode 1.0 will not be backward-compatible with GemFire 8.X (and older) peers
due to upgrading to Apache 2.0 licensed JGroups.  This removes the
serialization code that maintained that backward-compatibility.

This does not remove backward-compatibility code for client/server
communications, so older GemFire clients can still be used with Geode 1.0.

-    private static final Version[] dsfidVersions = new Version[] {
-          Version.GFE_80 };
+    private static final Version[] dsfidVersions = null;
-      fromDataPre_GFE_8_0_0_0(in);
-      this.unfinishedKeys = (Set)DataSerializer.readObject(in);
-    }
-    
-    public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException {
+      this.unfinishedKeys = (Set)DataSerializer.readObject(in);
-      toDataPre_GFE_8_0_0_0(out);
-      DataSerializer.writeObject(this.unfinishedKeys, out);
-    }
-
-    public void toDataPre_GFE_8_0_0_0(DataOutput out) throws IOException {
+      DataSerializer.writeObject(this.unfinishedKeys, out);
-    private static final Version[] dsfidVersions = new Version[] {
-          Version.GFE_80 };
+    private static final Version[] dsfidVersions = null;
-      fromDataPre_GFE_8_0_0_0(in);
-      this.isDeltaGII = in.readBoolean();
-      this.hasHolderToSend = in.readBoolean();
-      if (this.hasHolderToSend) {
-        this.holderToSend = new RegionVersionHolder(in);
-      }
-      
-      int gcVersionsLength = in.readShort();
-      if(gcVersionsLength >= 0) {
-        gcVersions = new HashMap<VersionSource, Long>(gcVersionsLength);
-      }
-      for(int i =0; i < gcVersionsLength; i++) {
-        VersionSource key = InternalDataSerializer.readObject(in);
-        long value = InternalDataSerializer.readUnsignedVL(in);
-        gcVersions.put(key, value);
-      }
-    }
-
-    public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException {
-      
-      // 701 peers can get ArrayList from 700 peers so we always have to read
-      // an ArrayList. This hack will be simplified in later versions (> 7.0.1)
+      this.isDeltaGII = in.readBoolean();
+      this.hasHolderToSend = in.readBoolean();
+      if (this.hasHolderToSend) {
+        this.holderToSend = new RegionVersionHolder(in);
+      }
+      
+      int gcVersionsLength = in.readShort();
+      if(gcVersionsLength >= 0) {
+        gcVersions = new HashMap<VersionSource, Long>(gcVersionsLength);
+      }
+      for(int i =0; i < gcVersionsLength; i++) {
+        VersionSource key = InternalDataSerializer.readObject(in);
+        long value = InternalDataSerializer.readUnsignedVL(in);
+        gcVersions.put(key, value);
+      }
-    
+
-      toDataPre_GFE_8_0_0_0(out);
+      super.toData(out);
+      if (this.entries instanceof InitialImageVersionedEntryList) {
+        ArrayList list = new ArrayList(1);
+        list.add(this.entries);
+        DataSerializer.writeArrayList(list, out); 
+      } else {
+        DataSerializer.writeArrayList((ArrayList)this.entries, out);
+      }
+      out.writeInt(this.seriesNum);
+      out.writeInt(this.msgNum);
+      out.writeInt(this.numSeries);
+      out.writeBoolean(this.lastInSeries);
+      out.writeInt(this.flowControlId);
-    public void toDataPre_GFE_8_0_0_0(DataOutput out) throws IOException {
-      super.toData(out);
-      // We still need to send an ArrayList for backward compatibility.
-      // All 700 peers will always read an ArrayList. So we can not give
-      // them InitialImageVersionedEntryList when they are expecting ArrayList.
-      if (this.entries instanceof InitialImageVersionedEntryList) {
-        ArrayList list = new ArrayList(1);
-        list.add(this.entries);
-        DataSerializer.writeArrayList(list, out); 
-      } else {
-        DataSerializer.writeArrayList((ArrayList)this.entries, out);
-      }
-      out.writeInt(this.seriesNum);
-      out.writeInt(this.msgNum);
-      out.writeInt(this.numSeries);
-      out.writeBoolean(this.lastInSeries);
-      out.writeInt(this.flowControlId);
-    }
-

MOV78 UPD42 MOV78 UPD42 MOV44 MOV44 INS33 MOV21 MOV21 INS33 MOV42 MOV21 MOV60 MOV60 MOV25 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV42 MOV21 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL85 DEL5 DEL40 DEL4 DEL3 DEL32 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31