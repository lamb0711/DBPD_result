Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Data class which contains description of a region and provides the aggregated
- * view of the region Used by describe region command
+ * Data class which contains description of a region and provides the aggregated view of the region
+ * Used by describe region command
-  private static final long  serialVersionUID               = 1L;
+  private static final long serialVersionUID = 1L;
-  
+
-  private Map<String, String>                     cndRegionAttributes;
-  private Map<String, String>                     cndPartitionAttributes;
-  private Map<String, String>                     cndEvictionAttributes;
+  private Map<String, String> cndRegionAttributes;
+  private Map<String, String> cndPartitionAttributes;
+  private Map<String, String> cndEvictionAttributes;
-  
+
-  
+
+
+
-    
+
-      //COPY
+      // COPY
-      
+
-      
+
-      
+
-      
-      //Don't have to show the scope for PR's
-      
-      
+
+      // Don't have to show the scope for PR's
+
+
-       if (this.scope.equals(regionDescPerMember.getScope()) 
-           && this.name.equals(regionDescPerMember.getName()) 
-           && this.dataPolicy.equals(regionDescPerMember.getDataPolicy())
-           && this.isAccessor == regionDescPerMember.isAccessor()) {
-         
-         regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(), regionDescPerMember);
-         findCommon(cndRegionAttributes, regionDescPerMember.getNonDefaultRegionAttributes());
-         findCommon(cndEvictionAttributes, regionDescPerMember.getNonDefaultEvictionAttributes());
-         findCommon(cndPartitionAttributes, regionDescPerMember.getNonDefaultPartitionAttributes());
-         
-         isAdded = true;
-       }
+      if (this.scope.equals(regionDescPerMember.getScope())
+          && this.name.equals(regionDescPerMember.getName())
+          && this.dataPolicy.equals(regionDescPerMember.getDataPolicy())
+          && this.isAccessor == regionDescPerMember.isAccessor()) {
+
+        regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(), regionDescPerMember);
+        findCommon(cndRegionAttributes, regionDescPerMember.getNonDefaultRegionAttributes());
+        findCommon(cndEvictionAttributes, regionDescPerMember.getNonDefaultEvictionAttributes());
+        findCommon(cndPartitionAttributes, regionDescPerMember.getNonDefaultPartitionAttributes());
+
+        isAdded = true;
+      }
-  
+
-    //First get the intersection of the both maps
-    
+    // First get the intersection of the both maps
+
-    
+
-    
-    //Now compare the values
-    //Take a copy of the set to avoid a CME
-    Iterator <String> commonKeysIter = (new HashSet<String>(commonNdKeySet)).iterator();
-    
+
+    // Now compare the values
+    // Take a copy of the set to avoid a CME
+    Iterator<String> commonKeysIter = (new HashSet<String>(commonNdKeySet)).iterator();
+
-      
+
-          //Remove it from the commonNdMa
+          // Remove it from the commonNdMa
-  
-  
+
+
-      return this.getName().equals(regionDesc.getName())
-          && this.scope.equals(regionDesc.getScope())
+      return this.getName().equals(regionDesc.getName()) && this.scope.equals(regionDesc.getScope())
-  
+
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
+   * 
-  
+
+   * 
-  
+
+   * 
-  
-  public Map<String, RegionDescriptionPerMember> getRegionDescriptionPerMemberMap(){
+
+  public Map<String, RegionDescriptionPerMember> getRegionDescriptionPerMemberMap() {
-  
-  
+
+
-   
+

UPD66 UPD66