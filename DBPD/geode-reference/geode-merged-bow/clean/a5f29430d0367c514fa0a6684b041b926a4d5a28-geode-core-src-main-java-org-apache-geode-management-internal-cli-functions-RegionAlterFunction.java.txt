Merge branch 'develop' into feature/GEODE-6187

+import java.util.List;
+import java.util.function.Consumer;
-import org.apache.commons.lang3.exception.ExceptionUtils;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.CacheLoader;
-import org.apache.geode.cache.CacheWriter;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.ExpirationAction;
+import org.apache.geode.cache.ExpirationAttributes;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.cache.execute.ResultSender;
-import org.apache.geode.internal.cache.execute.InternalFunction;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.domain.ClassName;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.cli.util.RegionPath;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.cli.CliFunction;
+import org.apache.geode.management.cli.Result;
-public class RegionAlterFunction implements InternalFunction {
+public class RegionAlterFunction extends CliFunction<RegionConfig> {
+  private static final String NULLSTR = "null";
-  public void execute(FunctionContext context) {
-    ResultSender<Object> resultSender = context.getResultSender();
-
+  public CliFunctionResult executeFunction(FunctionContext<RegionConfig> context) {
-    String memberNameOrId =
-        CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
-
-    RegionFunctionArgs regionAlterArgs = (RegionFunctionArgs) context.getArguments();
-    try {
-      Region<?, ?> alteredRegion = alterRegion(cache, regionAlterArgs);
-      XmlEntity xmlEntity = new XmlEntity(CacheXml.REGION, "name", alteredRegion.getName());
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity,
-          CliStrings.format(CliStrings.ALTER_REGION__MSG__REGION_0_ALTERED_ON_1,
-              new Object[] {alteredRegion.getFullPath(), memberNameOrId})));
-
-    } catch (IllegalStateException e) {
-      logger.error(e.getMessage(), e);
-
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, false, e.getMessage()));
-    } catch (IllegalArgumentException e) {
-      logger.error(e.getMessage(), e);
-
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, false, e.getMessage()));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-
-    } catch (Throwable th) {
-      SystemFailure.checkFailure();
-      logger.error(th.getMessage(), th);
-
-      String exceptionMsg = th.getMessage();
-      if (exceptionMsg == null) {
-        exceptionMsg = ExceptionUtils.getStackTrace(th);
-      }
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, false, exceptionMsg));
-    }
+    RegionConfig deltaConfig = context.getArguments();
+    alterRegion(cache, deltaConfig);
+    return new CliFunctionResult(context.getMemberName(), Result.Status.OK,
+        String.format("Region %s altered", deltaConfig.getName()));
-  private <K, V> Region<?, ?> alterRegion(Cache cache, RegionFunctionArgs regionAlterArgs) {
-    final String regionPathString = regionAlterArgs.getRegionPath();
+  void alterRegion(Cache cache, RegionConfig deltaConfig) {
+    final String regionPathString = deltaConfig.getName();
-    RegionPath regionPath = new RegionPath(regionPathString);
-      throw new IllegalArgumentException(CliStrings.format(
-          CliStrings.ALTER_REGION__MSG__REGION_DOES_NOT_EXIST_0, new Object[] {regionPath}));
+      throw new IllegalArgumentException(String.format(
+          "Region does not exist: %s", regionPathString));
+    RegionAttributesType regionAttributes = deltaConfig.getRegionAttributes();
-    if (regionAlterArgs.getCloningEnabled() != null) {
-      mutator.setCloningEnabled(regionAlterArgs.getCloningEnabled());
+    if (regionAttributes.isCloningEnabled() != null) {
+      mutator.setCloningEnabled(regionAttributes.isCloningEnabled());
-    if (regionAlterArgs.getEvictionMax() != null) {
-      mutator.getEvictionAttributesMutator().setMaximum(regionAlterArgs.getEvictionMax());
+    if (regionAttributes.getEvictionAttributes() != null) {
+      mutator.getEvictionAttributesMutator().setMaximum(Integer
+          .parseInt(regionAttributes.getEvictionAttributes().getLruEntryCount().getMaximum()));
-    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationIdleTime =
-        regionAlterArgs.getEntryExpirationIdleTime();
-    if (newEntryExpirationIdleTime != null && newEntryExpirationIdleTime.isTimeOrActionSet()) {
-      mutator.setEntryIdleTimeout(
-          newEntryExpirationIdleTime.getExpirationAttributes(region.getEntryIdleTimeout()));
-      if (logger.isDebugEnabled()) {
-        logger.debug("Region successfully altered - entry idle timeout");
-      }
-    }
+    updateExpirationAttributes(cache, regionAttributes.getEntryIdleTime(),
+        region.getEntryIdleTimeout(), p -> mutator.setEntryIdleTimeout(p),
+        p -> mutator.setCustomEntryIdleTimeout(p));
+    updateExpirationAttributes(cache, regionAttributes.getEntryTimeToLive(),
+        region.getEntryTimeToLive(), p -> mutator.setEntryTimeToLive(p),
+        p -> mutator.setCustomEntryTimeToLive(p));
+    updateExpirationAttributes(cache, regionAttributes.getRegionIdleTime(),
+        region.getRegionIdleTimeout(), p -> mutator.setRegionIdleTimeout(p), null);
+    updateExpirationAttributes(cache, regionAttributes.getRegionTimeToLive(),
+        region.getRegionTimeToLive(), p -> mutator.setRegionTimeToLive(p), null);
-    final RegionFunctionArgs.ExpirationAttrs newEntryExpirationTTL =
-        regionAlterArgs.getEntryExpirationTTL();
-    if (newEntryExpirationTTL != null && newEntryExpirationTTL.isTimeOrActionSet()) {
-      mutator.setEntryTimeToLive(
-          newEntryExpirationTTL.getExpirationAttributes(region.getEntryTimeToLive()));
-      if (logger.isDebugEnabled()) {
-        logger.debug("Region successfully altered - entry TTL");
-      }
-    }
-    final ClassName<CustomExpiry> entryIdleCustomExpiry =
-        regionAlterArgs.getEntryIdleTimeCustomExpiry();
-    if (entryIdleCustomExpiry != null) {
-      if (entryIdleCustomExpiry.equals(ClassName.EMPTY)) {
-        mutator.setCustomEntryIdleTimeout(null);
-      } else {
-        mutator.setCustomEntryIdleTimeout(entryIdleCustomExpiry.newInstance(cache));
-      }
-    }
-
-    final ClassName<CustomExpiry> entryTTLCustomExpiry = regionAlterArgs.getEntryTTLCustomExpiry();
-    if (entryTTLCustomExpiry != null) {
-      if (entryTTLCustomExpiry.equals(ClassName.EMPTY)) {
-        mutator.setCustomEntryTimeToLive(null);
-      } else {
-        mutator.setCustomEntryTimeToLive(entryTTLCustomExpiry.newInstance(cache));
-      }
-    }
-
-    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationIdleTime =
-        regionAlterArgs.getRegionExpirationIdleTime();
-    if (newRegionExpirationIdleTime != null && newRegionExpirationIdleTime.isTimeOrActionSet()) {
-      mutator.setRegionIdleTimeout(
-          newRegionExpirationIdleTime.getExpirationAttributes(region.getRegionIdleTimeout()));
-      if (logger.isDebugEnabled()) {
-        logger.debug("Region successfully altered - region idle timeout");
-      }
-    }
-
-    final RegionFunctionArgs.ExpirationAttrs newRegionExpirationTTL =
-        regionAlterArgs.getRegionExpirationTTL();
-    if (newRegionExpirationTTL != null && newRegionExpirationTTL.isTimeOrActionSet()) {
-      mutator.setRegionTimeToLive(
-          newRegionExpirationTTL.getExpirationAttributes(region.getRegionTimeToLive()));
-      if (logger.isDebugEnabled()) {
-        logger.debug("Region successfully altered - region TTL");
-      }
-    }
-
-    final Set<String> newGatewaySenderIds = regionAlterArgs.getGatewaySenderIds();
-    final Set<String> newAsyncEventQueueIds = regionAlterArgs.getAsyncEventQueueIds();
-
+    final Set<String> newGatewaySenderIds = regionAttributes.getGatewaySenderIdsAsSet();
+    final Set<String> newAsyncEventQueueIds = regionAttributes.getAsyncEventQueueIdsAsSet();
-    final Set<ClassName<CacheListener>> newCacheListeners = regionAlterArgs.getCacheListeners();
+    final List<DeclarableType> newCacheListeners = regionAttributes.getCacheListeners();
-    if (newCacheListeners != null) {
+    if (!newCacheListeners.isEmpty()) {
-      for (ClassName<CacheListener> newCacheListener : newCacheListeners) {
-        if (!newCacheListener.equals(ClassName.EMPTY)) {
+      for (DeclarableType newCacheListener : newCacheListeners) {
+        if (!newCacheListener.equals(DeclarableType.EMPTY)) {
-    final ClassName<CacheLoader> cacheLoader = regionAlterArgs.getCacheLoader();
+    final DeclarableType cacheLoader = regionAttributes.getCacheLoader();
-      if (cacheLoader.equals(ClassName.EMPTY)) {
+      if (cacheLoader.equals(DeclarableType.EMPTY)) {
-    final ClassName<CacheWriter> cacheWriter = regionAlterArgs.getCacheWriter();
+    final DeclarableType cacheWriter = regionAttributes.getCacheWriter();
-      if (cacheWriter.equals(ClassName.EMPTY)) {
+      if (cacheWriter.equals(DeclarableType.EMPTY)) {
-
-    return region;
+  private void updateExpirationAttributes(Cache cache,
+      RegionAttributesType.ExpirationAttributesType newAttributes,
+      ExpirationAttributes existingAttributes,
+      Consumer<ExpirationAttributes> mutator1,
+      Consumer<CustomExpiry> mutator2) {
+    if (newAttributes == null) {
+      return;
+    }
+
+    if (newAttributes.hasTimoutOrAction() && existingAttributes != null) {
+      int existingTimeout = existingAttributes.getTimeout();
+      ExpirationAction existingAction = existingAttributes.getAction();
+      if (newAttributes.getTimeout() != null) {
+        existingTimeout = Integer.parseInt(newAttributes.getTimeout());
+      }
+
+      if (newAttributes.getAction() != null) {
+        existingAction = ExpirationAction.fromXmlString(newAttributes.getAction());
+      }
+      mutator1.accept(new ExpirationAttributes(existingTimeout, existingAction));
+    }
+
+    if (mutator2 == null) {
+      return;
+    }
+
+    if (newAttributes.hasCustomExpiry()) {
+      DeclarableType newCustomExpiry = newAttributes.getCustomExpiry();
+      if (newCustomExpiry.equals(DeclarableType.EMPTY)) {
+        mutator2.accept(null);
+      } else {
+        mutator2.accept(newCustomExpiry.newInstance(cache));
+      }
+    }
+
+    if (logger.isDebugEnabled()) {
+      logger.debug("Region successfully altered - entry idle timeout");
+    }
+  }
+
+

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS74 INS23 INS31 INS31 INS43 INS43 INS83 INS83 INS83 MOV43 INS59 MOV78 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS39 MOV60 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 UPD42 MOV42 INS42 INS42 INS45 INS74 MOV60 MOV60 INS21 INS41 UPD43 UPD42 INS21 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 UPD74 MOV74 INS42 INS25 INS25 INS25 INS25 MOV25 MOV43 INS43 UPD43 INS32 INS14 UPD42 UPD43 INS32 INS32 INS32 INS32 MOV74 MOV74 UPD74 INS38 INS43 INS43 UPD42 MOV42 INS40 UPD42 MOV42 INS43 INS43 UPD43 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS8 INS42 UPD42 UPD42 MOV32 INS42 INS42 INS42 MOV43 INS32 INS40 INS32 INS42 UPD42 INS42 UPD42 MOV42 INS32 MOV32 INS86 INS86 UPD42 MOV42 MOV42 INS32 MOV32 INS86 INS86 UPD42 MOV42 MOV42 INS32 MOV32 INS86 INS33 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS86 INS33 UPD43 UPD43 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS33 INS41 INS32 INS27 INS60 INS60 INS25 INS25 MOV21 INS42 INS33 INS41 UPD42 MOV42 UPD42 MOV42 MOV60 INS25 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS45 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS59 INS32 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS59 INS32 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS59 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS33 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 UPD43 INS32 MOV8 INS8 UPD42 UPD42 MOV43 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 INS43 UPD40 UPD40 INS42 INS32 UPD42 MOV42 INS42 INS32 INS32 INS33 INS21 INS32 INS33 MOV21 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS40 MOV21 UPD42 INS45 INS42 UPD42 UPD42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS42 INS7 UPD43 UPD42 INS42 UPD42 UPD42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 UPD42 INS32 MOV32 INS42 UPD40 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL43 DEL11 DEL39 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL40 DEL45 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL32 DEL42 DEL4 DEL3 DEL32 DEL14 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL21 DEL42 DEL9 DEL32 DEL14 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL73 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL83 DEL40 DEL42 DEL33 DEL27 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL83 DEL40 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL33 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL83 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL33 DEL32 DEL21 DEL8 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL83 DEL40 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL32 DEL21 DEL32 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL83 DEL40 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL74 DEL42 DEL33 DEL27 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL41 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL9 DEL42 DEL14