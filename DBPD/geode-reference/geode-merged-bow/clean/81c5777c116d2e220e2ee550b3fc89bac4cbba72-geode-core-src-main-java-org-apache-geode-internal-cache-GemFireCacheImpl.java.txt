GEODE-4511: Switch to lazy initialization of the default pool. (#1420)

* GEODE-4511: Switch to lazy initialization of the default pool.

* GEODE-4511: Address review comments.

* GEODE-4511: Fix JUnit test that inexplicably passed locally.

+import java.util.Objects;
+   * Name of the default pool.
+   */
+  public static final String DEFAULT_POOL_NAME = "DEFAULT";
+
+  /**
-  public Pool getDefaultPool() {
+  public synchronized Pool getDefaultPool() {
+    if (this.defaultPool == null) {
+      determineDefaultPool();
+    }
-  private void setDefaultPool(Pool value) {
-    this.defaultPool = value;
-  }
-
-    this.poolFactory = null;
-
-        determineDefaultPool();
+  private Pool findFirstCompatiblePool(Map<String, Pool> pools) {
+    // act as if the default pool was configured
+    // and see if we can find an existing one that is compatible
+    PoolFactoryImpl pfi = (PoolFactoryImpl) createDefaultPF();
+    for (Pool p : pools.values()) {
+      if (((PoolImpl) p).isCompatible(pfi.getPoolAttributes())) {
+        return p;
+      }
+    }
+    return null;
+  }
+
+  private void addLocalHostAsServer(PoolFactory poolFactory) {
+    PoolFactoryImpl poolFactoryImpl = (PoolFactoryImpl) poolFactory;
+    if (poolFactoryImpl.getPoolAttributes().locators.isEmpty()
+        && poolFactoryImpl.getPoolAttributes().servers.isEmpty()) {
+      try {
+        String localHostName = SocketCreator.getHostName(SocketCreator.getLocalHost());
+        poolFactoryImpl.addServer(localHostName, CacheServer.DEFAULT_PORT);
+      } catch (UnknownHostException ex) {
+        throw new IllegalStateException("Could not determine local host name", ex);
+      }
+    }
+  }
+
-  public void determineDefaultPool() {
+  public synchronized void determineDefaultPool() {
+    PoolFactory defaultPoolFactory = this.poolFactory;
+
-    if (this.poolFactory == null) {
+    if (defaultPoolFactory == null) {
-        this.poolFactory = createDefaultPF();
+        defaultPoolFactory = createDefaultPF();
-        // act as if the default pool was configured
-        // and see if we can find an existing one that is compatible
-        PoolFactoryImpl pfi = (PoolFactoryImpl) createDefaultPF();
-        for (Pool p : pools.values()) {
-          if (((PoolImpl) p).isCompatible(pfi.getPoolAttributes())) {
-            pool = p;
-            break;
-          }
-        }
+        pool = findFirstCompatiblePool(pools);
-      PoolFactoryImpl pfi = (PoolFactoryImpl) this.poolFactory;
-      if (pfi.getPoolAttributes().locators.isEmpty() && pfi.getPoolAttributes().servers.isEmpty()) {
-        try {
-          String localHostName = SocketCreator.getHostName(SocketCreator.getLocalHost());
-          pfi.addServer(localHostName, CacheServer.DEFAULT_PORT);
-        } catch (UnknownHostException ex) {
-          throw new IllegalStateException("Could not determine local host name", ex);
-        }
-      }
+      addLocalHostAsServer(defaultPoolFactory);
+
-        if (((PoolImpl) p).isCompatible(pfi.getPoolAttributes())) {
+        if (((PoolImpl) p)
+            .isCompatible(((PoolFactoryImpl) defaultPoolFactory).getPoolAttributes())) {
-      String poolName = "DEFAULT";
+      String poolName = DEFAULT_POOL_NAME;
-        poolName = "DEFAULT" + count;
+        poolName = DEFAULT_POOL_NAME + count;
-      pool = this.poolFactory.create(poolName);
+      pool = defaultPoolFactory.create(poolName);
-   * Used to see if a existing cache's pool is compatible with us.
+   * Determine whether the specified pool factory matches the pool factory used by this cache.
-   * @return the default pool that is right for us
+   * @param poolFactory Prospective pool factory.
+   * @throws IllegalStateException When the specified pool factory does not match.
-  public Pool determineDefaultPool(PoolFactory poolFactory) {
-    Pool pool;
-    // create the pool if it does not already exist
-    if (poolFactory == null) {
-      Map<String, Pool> pools = PoolManager.getAll();
-      if (pools.isEmpty()) {
-        throw new IllegalStateException("Since a cache already existed a pool should also exist.");
-      } else if (pools.size() == 1) {
-        // otherwise use a singleton.
-        pool = pools.values().iterator().next();
-        if (getDefaultPool() != pool) {
-          throw new IllegalStateException(
-              "Existing cache's default pool was not the same as the only existing pool");
-        }
-      } else {
-        // just use the current default pool if one exists
-        pool = getDefaultPool();
-        if (pool == null) {
-          // act as if the default pool was configured
-          // and see if we can find an existing one that is compatible
-          PoolFactoryImpl pfi = (PoolFactoryImpl) createDefaultPF();
-          for (Pool p : pools.values()) {
-            if (((PoolImpl) p).isCompatible(pfi.getPoolAttributes())) {
-              pool = p;
-              break;
-            }
-          }
-          if (pool == null) {
-            // if pool is still null then we will not have a default pool for this ClientCache
-            return null;
-          }
-        }
-      }
-    } else {
-      PoolFactoryImpl poolFactoryImpl = (PoolFactoryImpl) poolFactory;
-      if (poolFactoryImpl.getPoolAttributes().locators.isEmpty()
-          && poolFactoryImpl.getPoolAttributes().servers.isEmpty()) {
-        try {
-          String localHostName = SocketCreator.getHostName(SocketCreator.getLocalHost());
-          poolFactoryImpl.addServer(localHostName, CacheServer.DEFAULT_PORT);
-        } catch (UnknownHostException ex) {
-          throw new IllegalStateException("Could not determine local host name", ex);
-        }
-      }
-      PoolImpl defaultPool = (PoolImpl) getDefaultPool();
-      if (defaultPool != null && defaultPool.isCompatible(poolFactoryImpl.getPoolAttributes())) {
-        pool = defaultPool;
-      } else {
-        throw new IllegalStateException("Existing cache's default pool was not compatible");
-      }
+  public void validatePoolFactory(PoolFactory poolFactory) {
+    // If the specified pool factory is null, by definition there is no pool factory to validate.
+    if (poolFactory != null && !Objects.equals(this.poolFactory, poolFactory)) {
+      throw new IllegalStateException("Existing cache's default pool was not compatible");
-    return pool;
+              // Abstract region depends on the default pool existing so lazily initialize it
+              // if necessary.
+              if (Objects.equals(attrs.getPoolName(), DEFAULT_POOL_NAME)) {
+                determineDefaultPool();
+              }

INS26 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS8 INS83 MOV43 INS42 INS44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS29 INS83 INS39 INS42 INS44 INS8 UPD65 MOV65 INS42 UPD42 MOV42 INS45 INS25 MOV41 INS74 INS42 MOV41 MOV60 INS65 INS65 INS65 UPD43 MOV43 UPD42 MOV42 MOV25 UPD66 INS27 INS8 MOV43 MOV43 MOV43 MOV43 MOV59 UPD43 INS66 INS42 INS66 INS42 INS66 UPD42 INS27 MOV8 MOV22 INS33 MOV21 MOV42 MOV11 UPD42 UPD42 MOV22 INS42 MOV21 INS27 INS38 MOV43 MOV32 UPD42 MOV42 MOV33 MOV32 MOV22 MOV42 MOV42 INS41 INS8 UPD42 UPD42 INS42 INS32 UPD42 INS42 UPD42 INS42 INS21 MOV25 INS42 INS42 INS42 INS42 INS7 INS42 INS32 INS36 INS42 INS42 INS42 MOV43 MOV11 INS42 INS25 INS32 INS8 INS42 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS42 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL10 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL45 DEL45 DEL27 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31