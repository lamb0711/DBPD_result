GEODE-5685: change whitelist and blacklist

* change blacklist to denylist
* change whitelist to acceptlist

- * the number of failures exceeds the limit, the server is added to a blacklist for a certain period
- * of time. After the time is expired, the server comes off the blacklist, but the next failure will
+ * the number of failures exceeds the limit, the server is added to a denylist for a certain period
+ * of time. After the time is expired, the server comes off the denylist, but the next failure will
-public class ServerBlackList {
+public class ServerDenyList {
-  protected final Set blacklist = new CopyOnWriteArraySet();
-  private final Set unmodifiableBlacklist = Collections.unmodifiableSet(blacklist);
+  protected final Set denylist = new CopyOnWriteArraySet();
+  private final Set unmodifiableDenylist = Collections.unmodifiableSet(denylist);
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "ServerBlackList.THRESHOLD", 3).intValue();
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "ServerDenyList.THRESHOLD", 3).intValue();
-  public ServerBlackList(long pingInterval) {
+  public ServerDenyList(long pingInterval) {
-    return unmodifiableBlacklist;
+    return unmodifiableDenylist;
-      if (blacklist.contains(location)) {
+      if (denylist.contains(location)) {
-        // this server to the blacklist. Don't count that failure.
+        // this server to the denylist. Don't count that failure.
-          logger.debug("Blacklisting server {} for {}ms because it had {} consecutive failures",
+          logger.debug("Denylisting server {} for {}ms because it had {} consecutive failures",
-        blacklist.add(location);
+        denylist.add(location);
-          background.schedule(new ExpireBlackListTask(location), pingInterval,
+          background.schedule(new ExpireDenyListTask(location), pingInterval,
-  public void addListener(BlackListListener blackListListener) {
-    broadcaster.listeners.add(blackListListener);
+  public void addListener(DenyListListener denyListListener) {
+    broadcaster.listeners.add(denyListListener);
-  public void removeListener(BlackListListener blackListListener) {
-    broadcaster.listeners.remove(blackListListener);
+  public void removeListener(DenyListListener denyListListener) {
+    broadcaster.listeners.remove(denyListListener);
-  private class ExpireBlackListTask extends PoolTask {
+  private class ExpireDenyListTask extends PoolTask {
-    public ExpireBlackListTask(ServerLocation location) {
+    public ExpireDenyListTask(ServerLocation location) {
-        logger.debug("{} is no longer blacklisted", location);
+        logger.debug("{} is no longer denylisted", location);
-      blacklist.remove(location);
+      denylist.remove(location);
-  public interface BlackListListener {
+  public interface DenyListListener {
-  public static class BlackListListenerAdapter implements BlackListListener {
+  public static class DenyListListenerAdapter implements DenyListListener {
-  protected static class ListenerBroadcaster implements BlackListListener {
+  protected static class ListenerBroadcaster implements DenyListListener {
-        BlackListListener listener = (BlackListListener) itr.next();
+        DenyListListener listener = (DenyListListener) itr.next();
-        BlackListListener listener = (BlackListListener) itr.next();
+        DenyListListener listener = (DenyListListener) itr.next();

UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD66 UPD66 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD43 UPD43 UPD42 UPD45 UPD42 UPD42 UPD43 UPD43 UPD45 UPD42 UPD42 UPD43 UPD42