Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A wrapper class over an actual Region instance. This is used when the
- * multiuser-authentication attribute is set to true.
+ * A wrapper class over an actual Region instance. This is used when the multiuser-authentication
+ * attribute is set to true.
-  
+
-  
+
-  public void create(Object key, Object value) throws TimeoutException,
-      EntryExistsException, CacheWriterException {
+  public void create(Object key, Object value)
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public Region createSubregion(String subregionName,
-      RegionAttributes regionAttributes) throws RegionExistsException,
-      TimeoutException {
+  public Region createSubregion(String subregionName, RegionAttributes regionAttributes)
+      throws RegionExistsException, TimeoutException {
-  public Object destroy(Object key) throws TimeoutException,
-      EntryNotFoundException, CacheWriterException {
+  public Object destroy(Object key)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-  public void destroyRegion(Object callbackArgument)
-      throws CacheWriterException, TimeoutException {
+  public void destroyRegion(Object callbackArgument) throws CacheWriterException, TimeoutException {
-  public boolean existsValue(String queryPredicate)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public boolean existsValue(String queryPredicate) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-  
+
-    return this.proxyCache;    
+    return this.proxyCache;
-  public void invalidate(Object key) throws TimeoutException,
-      EntryNotFoundException {
+  public void invalidate(Object key) throws TimeoutException, EntryNotFoundException {
-  public void loadSnapshot(InputStream inputStream) throws IOException,
-      ClassNotFoundException, CacheWriterException, TimeoutException {
+  public void loadSnapshot(InputStream inputStream)
+      throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
-  public void localDestroy(Object key, Object callbackArgument)
-      throws EntryNotFoundException {
+  public void localDestroy(Object key, Object callbackArgument) throws EntryNotFoundException {
-  public void localInvalidate(Object key, Object callbackArgument)
-      throws EntryNotFoundException {
+  public void localInvalidate(Object key, Object callbackArgument) throws EntryNotFoundException {
-  public Object put(Object key, Object value) throws TimeoutException,
-      CacheWriterException {
+  public Object put(Object key, Object value) throws TimeoutException, CacheWriterException {
-  
+
-  public SelectResults query(String queryPredicate)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public SelectResults query(String queryPredicate) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-  public void registerInterest(Object key, boolean isDurable,
+  public void registerInterest(Object key, boolean isDurable, boolean receiveValues) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable,
-  public void registerInterest(Object key, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) {
-    throw new UnsupportedOperationException();
-  }
-
-  public void registerInterest(Object key, InterestResultPolicy policy,
-      boolean isDurable) {
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable) {
-  public void registerInterestRegex(String regex, boolean isDurable,
+  public void registerInterestRegex(String regex, boolean isDurable, boolean receiveValues) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable,
-  public void registerInterestRegex(String regex, InterestResultPolicy policy,
-      boolean isDurable) {
-    throw new UnsupportedOperationException();
-  }
-
-  public void registerInterestRegex(String regex, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) {
-    throw new UnsupportedOperationException();
-  }
-
-  public Object selectValue(String queryPredicate)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public Object selectValue(String queryPredicate) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-}
+    }
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object,
+   * java.lang.Object)
-  
+

UPD66 UPD66