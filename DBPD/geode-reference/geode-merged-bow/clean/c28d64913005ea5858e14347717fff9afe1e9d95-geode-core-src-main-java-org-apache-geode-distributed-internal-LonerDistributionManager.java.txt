Merge branch 'release/1.4.0'

+import java.io.Serializable;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.*;
+import java.util.concurrent.*;
+
+import org.apache.geode.admin.GemFireHealthConfig;
+import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.internal.net.SocketCreator;
-
-import java.io.Serializable;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.*;
-import java.util.concurrent.*;
+import org.apache.geode.internal.net.SocketCreator;
-   * 
+   *
-   * 
+   *
-  static private final DummyDMStats stats = new DummyDMStats();
+  private static final DummyDMStats stats = new DummyDMStats();
-  public long getChannelId() {
+  public long getMembershipPort() {
+  @Override
+  public Executor getFunctionExcecutor() {
+    return executor;
+  }
+
-   * 
+   *
-  private InternalCache cache;
+  private volatile InternalCache cache;
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  public boolean isSharedConfigurationServiceEnabledForDS() {
-    // return false for loner
-    return false;
+  public void setCache(InternalCache instance) {
+    this.cache = instance;
-  public void setCache(InternalCache instance) {
-    this.cache = instance;
+  public InternalCache getExistingCache() {
+    InternalCache result = this.cache;
+    if (result == null) {
+      throw new CacheClosedException(
+          LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());
+    }
+    result.getCancelCriterion().checkCancelInProgress(null);
+    if (result.isClosed()) {
+      throw result.getCacheClosedException(
+          LocalizedStrings.CacheFactory_THE_CACHE_HAS_BEEN_CLOSED.toLocalizedString(), null);
+    }
+    return result;
+  }
+
+  @Override
+  public HealthMonitor getHealthMonitor(InternalDistributedMember owner) {
+    throw new UnsupportedOperationException(
+        "getHealthMonitor is not supported by " + getClass().getSimpleName());
+  }
+
+  @Override
+  public void removeHealthMonitor(InternalDistributedMember owner, int theId) {
+    throw new UnsupportedOperationException(
+        "removeHealthMonitor is not supported by " + getClass().getSimpleName());
+  }
+
+  @Override
+  public void createHealthMonitor(InternalDistributedMember owner, GemFireHealthConfig cfg) {
+    throw new UnsupportedOperationException(
+        "createHealthMonitor is not supported by " + getClass().getSimpleName());

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS31 INS31 INS31 INS31 INS83 UPD42 INS78 INS83 INS43 INS42 INS8 INS83 MOV78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 UPD39 INS42 INS44 INS44 INS42 INS42 INS41 INS42 INS60 INS25 INS21 INS25 INS41 INS42 INS42 INS43 INS42 INS53 INS42 INS43 INS42 INS39 INS42 INS53 INS42 INS43 INS42 INS43 INS42 INS53 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS8 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS22 INS42 INS33 INS53 INS32 INS42 INS33 INS42 INS42 INS53 INS43 INS27 INS43 INS27 INS43 INS27 INS52 INS42 INS14 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS43 INS32 INS42 INS42 INS32 INS33 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL9 DEL41