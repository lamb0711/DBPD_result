GEODE-6443: log all request and response in geode management service (#3373)



+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletResponse;
-import org.springframework.web.filter.AbstractRequestLoggingFilter;
+import org.springframework.web.filter.OncePerRequestFilter;
+import org.springframework.web.util.ContentCachingRequestWrapper;
+import org.springframework.web.util.ContentCachingResponseWrapper;
-public class ManagementLoggingFilter extends AbstractRequestLoggingFilter {
+public class ManagementLoggingFilter extends OncePerRequestFilter {
-  public ManagementLoggingFilter() {
-    super.setIncludeQueryString(true);
-    super.setIncludePayload(true);
-    super.setMaxPayloadLength(1000);
-    super.setAfterMessagePrefix("Management request: [");
-  }
+  private static int MAX_PAYLOAD_LENGTH = 10000;
-  protected void beforeRequest(HttpServletRequest request, String message) {
-    // No logging here - this would not display the payload
+  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
+      FilterChain filterChain) throws ServletException, IOException {
+
+    if (!ENABLE_REQUEST_LOGGING) {
+      filterChain.doFilter(request, response);
+      return;
+    }
+
+    // We can not log request payload before making the actual request because then the InputStream
+    // would be consumed and cannot be read again by the actual processing/server.
+    ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(request);
+    ContentCachingResponseWrapper wrappedResponse = new ContentCachingResponseWrapper(response);
+
+    // performs the actual request before logging
+    filterChain.doFilter(wrappedRequest, wrappedResponse);
+
+    // log after the request has been made and ContentCachingRequestWrapper has cached the request
+    // payload.
+    String requestPattern = "Management Request: %s[url=%s]; user=%s; payload=%s";
+    String requestUrl = request.getRequestURI();
+    if (request.getQueryString() != null) {
+      requestUrl = requestUrl + "?" + request.getQueryString();
+    }
+    String payload = getContentAsString(wrappedRequest.getContentAsByteArray(),
+        wrappedRequest.getCharacterEncoding());
+    logger.info(String.format(requestPattern, request.getMethod(), requestUrl,
+        request.getRemoteUser(), payload));
+
+    // construct the response message
+    String responsePattern = "Management Response: Status=%s; response=%s";
+    payload = getContentAsString(wrappedResponse.getContentAsByteArray(),
+        wrappedResponse.getCharacterEncoding());
+    payload = payload.replaceAll(System.lineSeparator(), "");
+    logger.info(String.format(responsePattern, response.getStatus(), payload));
+
+    // IMPORTANT: copy content of response back into original response
+    wrappedResponse.copyBodyToResponse();
-  @Override
-  protected void afterRequest(HttpServletRequest request, String message) {
-    if (ENABLE_REQUEST_LOGGING) {
-      logger.info(message);
+  private String getContentAsString(byte[] buf, String encoding) {
+    if (buf == null || buf.length == 0)
+      return "";
+    int length = Math.min(buf.length, MAX_PAYLOAD_LENGTH);
+    try {
+      return new String(buf, 0, length, encoding);
+    } catch (UnsupportedEncodingException ex) {
+      return "[unknown]";

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 UPD43 INS23 INS31 UPD42 INS83 INS83 INS39 INS59 MOV78 UPD83 INS39 INS42 MOV44 INS44 INS44 INS43 INS43 UPD83 MOV83 INS43 INS42 INS44 MOV44 INS8 INS42 INS34 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS60 INS21 INS60 INS60 INS25 INS60 INS60 INS21 INS21 INS42 INS5 INS42 INS43 INS42 INS25 INS60 INS54 INS42 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS32 MOV43 INS59 MOV43 INS59 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS7 INS7 INS32 INS32 INS39 INS85 INS42 INS27 INS41 INS39 INS59 INS8 INS12 INS42 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS33 MOV21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS45 INS42 INS32 INS41 INS44 INS8 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS40 INS34 INS42 INS42 INS40 INS42 INS14 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS34 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL9 DEL48 DEL42 DEL9 DEL48 DEL42 DEL34 DEL48 DEL42 DEL45 DEL48 DEL42 DEL39 DEL42 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31