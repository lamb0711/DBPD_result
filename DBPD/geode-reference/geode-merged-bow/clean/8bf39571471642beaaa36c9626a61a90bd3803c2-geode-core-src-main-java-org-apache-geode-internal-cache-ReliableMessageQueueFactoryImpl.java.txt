Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-  
+
-      throw new IllegalStateException(LocalizedStrings.ReliableMessageQueueFactoryImpl_RELIABLE_MESSAGE_QUEUE_IS_CLOSED.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.ReliableMessageQueueFactoryImpl_RELIABLE_MESSAGE_QUEUE_IS_CLOSED
+              .toLocalizedString());
-  
+
-          throw new IllegalStateException(LocalizedStrings.ReliableMessageQueueFactoryImpl_REGIONS_WITH_MESSAGE_QUEUING_ALREADY_EXIST.toLocalizedString());
+          throw new IllegalStateException(
+              LocalizedStrings.ReliableMessageQueueFactoryImpl_REGIONS_WITH_MESSAGE_QUEUING_ALREADY_EXIST
+                  .toLocalizedString());
-    synchronized(this.regionMap) {
-      qrd = (QueuedRegionData)this.regionMap.get(r);
+    synchronized (this.regionMap) {
+      qrd = (QueuedRegionData) this.regionMap.get(r);
+
-    synchronized(this.regionMap) {
-      qrd = (QueuedRegionData)this.regionMap.get(r);
+    synchronized (this.regionMap) {
+      qrd = (QueuedRegionData) this.regionMap.get(r);
+
-    synchronized(this.regionMap) {
-      qrd = (QueuedRegionData)this.regionMap.get(r);
+    synchronized (this.regionMap) {
+      qrd = (QueuedRegionData) this.regionMap.get(r);
+
-    synchronized(this.regionMap) {
+    synchronized (this.regionMap) {
-        throw new IllegalStateException(LocalizedStrings.ReliableMessageQueueFactoryImpl_UNEXPECTED_QUEUEDREGIONDATA_0_FOR_REGION_1.toLocalizedString(new Object[] {old, r}));
+        throw new IllegalStateException(
+            LocalizedStrings.ReliableMessageQueueFactoryImpl_UNEXPECTED_QUEUEDREGIONDATA_0_FOR_REGION_1
+                .toLocalizedString(new Object[] {old, r}));
+
-    synchronized(this.regionMap) {
-      qrd = (QueuedRegionData)this.regionMap.remove(r);
+    synchronized (this.regionMap) {
+      qrd = (QueuedRegionData) this.regionMap.remove(r);
+
+   * 
-    
+
+
+
+
+
+
+
-          Role role = (Role)it.next();
-          List l = (List)this.roleMap.get(role);
+          Role role = (Role) it.next();
+          List l = (List) this.roleMap.get(role);
-    
+
-          Map.Entry me = (Map.Entry)it.next();
-          List l = (List)me.getValue();
+          Map.Entry me = (Map.Entry) it.next();
+          List l = (List) me.getValue();
-    
+
-        l = (List)this.roleMap.get(role);
+        l = (List) this.roleMap.get(role);
-    
+

