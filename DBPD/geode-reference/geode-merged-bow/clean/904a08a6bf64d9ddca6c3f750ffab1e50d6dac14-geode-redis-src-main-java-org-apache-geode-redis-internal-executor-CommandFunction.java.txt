GEODE-8090: implement function/delta for redis Hash ops (#5085)

The hash ops that use function delta now are:
HDEL
DEL
HSET
HMSET
HSETNX
HGETALL

+import static org.apache.geode.redis.internal.RedisCommandType.HSET;
+
+import java.util.Collections;
+import java.util.List;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.redis.internal.RedisDataType;
+import org.apache.geode.redis.internal.executor.hash.RedisHash;
+import org.apache.geode.redis.internal.executor.set.SynchronizedStripedExecutor;
+  public static void register() {
+    SynchronizedStripedExecutor stripedExecutor = new SynchronizedStripedExecutor();
+    FunctionService.registerFunction(new CommandFunction(stripedExecutor));
+  }
+
+  @SuppressWarnings("unchecked")
+  public static ResultCollector execute(Region<?, ?> region,
+      RedisCommandType command,
+      ByteArrayWrapper key,
+      Object commandArguments) {
+    return FunctionService
+        .onRegion(region)
+        .withFilter(Collections.singleton(key))
+        .setArguments(new Object[] {command, commandArguments})
+        .execute(ID);
+  }
+
+
-    Region<ByteArrayWrapper, RedisSet> localRegion =
+    Region localRegion =
-      case DEL:
-        stripedExecutor.execute(key,
-            () -> RedisSet.del(localRegion, key),
-            (deleted) -> resultSender.lastResult(deleted));
+      case DEL: {
+        RedisDataType delType = (RedisDataType) args[1];
+        executeDel(key, localRegion, resultSender, delType);
+      }
+      case HSET: {
+        Object[] hsetArgs = (Object[]) args[1];
+        List<ByteArrayWrapper> fieldsToSet = (List<ByteArrayWrapper>) hsetArgs[0];
+        boolean NX = (boolean) hsetArgs[1];
+        stripedExecutor.execute(key,
+            () -> RedisHash.hset(localRegion, key, fieldsToSet, NX),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
+      case HDEL: {
+        List<ByteArrayWrapper> fieldsToRemove = (List<ByteArrayWrapper>) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisHash.hdel(localRegion, key, fieldsToRemove),
+            (deletedCount) -> resultSender.lastResult(deletedCount));
+        break;
+      }
+      case HGETALL: {
+        stripedExecutor.execute(key,
+            () -> RedisHash.hgetall(localRegion, key),
+            (entries) -> resultSender.lastResult(entries));
+        break;
+      }
+  @SuppressWarnings("unchecked")
+  private void executeDel(ByteArrayWrapper key, Region localRegion, ResultSender resultSender,
+      RedisDataType delType) {
+    switch (delType) {
+      case REDIS_SET:
+        stripedExecutor.execute(key,
+            () -> RedisSet.del(localRegion, key),
+            (deleted) -> resultSender.lastResult(deleted));
+        break;
+      case REDIS_HASH:
+        stripedExecutor.execute(key,
+            () -> RedisHash.del(localRegion, key),
+            (deleted) -> resultSender.lastResult(deleted));
+        break;
+      default:
+        throw new UnsupportedOperationException("DEL does not support " + delType);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS8 INS79 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS79 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS60 INS21 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS45 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS50 INS43 INS59 INS32 MOV43 INS76 INS76 INS42 INS42 INS42 INS32 INS43 INS8 INS8 INS49 INS8 INS49 INS8 INS49 INS42 INS42 INS42 INS42 INS42 INS49 MOV21 INS10 INS49 INS21 INS10 INS49 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS42 INS42 UPD42 MOV42 INS60 INS21 INS10 INS42 INS60 INS60 INS60 INS21 INS10 INS42 INS60 INS21 INS10 INS42 INS21 INS10 INS42 INS42 INS32 INS14 INS43 INS43 INS42 INS32 INS42 INS3 INS43 INS59 INS32 INS5 INS59 INS74 INS59 INS39 INS59 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS86 INS86 INS43 INS27 INS42 INS42 INS32 INS42 INS32 INS5 INS4 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS11 INS43 MOV43 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS43 INS43 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS42 INS42 INS42 INS86 INS86 INS32 INS59 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS2 INS42 INS5 INS2 INS42 INS74 INS2 INS39 INS2 INS32 INS59 INS32 INS42 INS42 INS74 INS2 INS32 INS59 INS32 INS32 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS34 INS43 INS43 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL74 DEL10