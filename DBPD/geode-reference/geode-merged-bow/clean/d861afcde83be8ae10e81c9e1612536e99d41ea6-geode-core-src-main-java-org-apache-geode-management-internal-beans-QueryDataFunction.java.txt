GEODE-1842: refactor QueryDataFunction (#2897)

* Separate the QueryDataFunction into the real function code and the caller of the function code (DataQueryEngine)
* remove the static calls to get cache and ManagementService.
* refactor the test to add assertions.
-import java.io.Serializable;
-import java.io.StringWriter;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.StringTokenizer;
-import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.query.QueryInvalidException;
-import org.apache.geode.cache.query.internal.CompiledValue;
-import org.apache.geode.cache.query.internal.QCompiler;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.management.DistributedRegionMXBean;
-import org.apache.geode.management.ManagementService;
-import org.apache.geode.management.internal.ManagementAgent;
-import org.apache.geode.management.internal.SystemManagementService;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.json.GfJsonException;
-import org.apache.geode.management.internal.cli.json.GfJsonObject;
- * DistributedSystemMXBean.queryData()
+ * DataQueryEngine.queryData()
-  private static final String QUERY_EXEC_SUCCESS = "Query Executed Successfully";
-  private QueryDataFunctionResult selectWithType(final FunctionContext context, String queryString,
+  // return the compressed result data
+  private byte[] selectWithType(final FunctionContext context, String queryString,
-    InternalCache cache =
-        ((InternalCache) context.getCache()).getCacheForProcessingClientRequests();
+    InternalCache cache = (InternalCache) context.getCache();
-        return new QueryDataFunctionResult(QUERY_EXEC_SUCCESS,
-            BeanUtilFuncs.compress(new JsonisedErrorMessage(NO_DATA_FOUND).toString()));
+        return BeanUtilFuncs
+            .compress(new DataQueryEngine.JsonisedErrorMessage(NO_DATA_FOUND).toString());
-      return new QueryDataFunctionResult(QUERY_EXEC_SUCCESS,
-          BeanUtilFuncs.compress(result.toString()));
+      return BeanUtilFuncs.compress(result.toString());
-  private static Object callFunction(final Object functionArgs,
-      final Set<DistributedMember> members, final boolean zipResult) throws Exception {
-    try {
-      if (members.size() == 1) {
-        DistributedMember member = members.iterator().next();
-        ResultCollector collector = FunctionService.onMember(member).setArguments(functionArgs)
-            .execute(ManagementConstants.QUERY_DATA_FUNCTION);
-        List list = (List) collector.getResult();
-        Object object = null;
-        if (list.size() > 0) {
-          object = list.get(0);
-        }
-
-        if (object instanceof Throwable) {
-          throw (Throwable) object;
-        }
-
-        QueryDataFunctionResult result = (QueryDataFunctionResult) object;
-        if (zipResult) { // The result is already compressed
-          return result.compressedBytes;
-        } else {
-          Object[] functionArgsList = (Object[]) functionArgs;
-          boolean showMember = (Boolean) functionArgsList[DISPLAY_MEMBERWISE];
-          if (showMember) {// Added to show a single member similar to multiple
-            // member.
-            // Note , if no member is selected this is the code path executed. A
-            // random associated member is chosen.
-            List<String> decompressedList = new ArrayList<>();
-            decompressedList.add(BeanUtilFuncs.decompress(result.compressedBytes));
-            return wrapResult(decompressedList.toString());
-          }
-          return BeanUtilFuncs.decompress(result.compressedBytes);
-        }
-
-      } else { // More than 1 Member
-        ResultCollector coll = FunctionService.onMembers(members).setArguments(functionArgs)
-            .execute(ManagementConstants.QUERY_DATA_FUNCTION);
-
-        List list = (List) coll.getResult();
-        Object object = list.get(0);
-        if (object instanceof Throwable) {
-          throw (Throwable) object;
-        }
-
-        Iterator<QueryDataFunctionResult> it = list.iterator();
-        List<String> decompressedList = new ArrayList<>();
-
-        while (it.hasNext()) {
-          String decompressedStr;
-          decompressedStr = BeanUtilFuncs.decompress(it.next().compressedBytes);
-          decompressedList.add(decompressedStr);
-        }
-
-        if (zipResult) {
-          return BeanUtilFuncs.compress(wrapResult(decompressedList.toString()));
-        } else {
-          return wrapResult(decompressedList.toString());
-        }
-
-      }
-    } catch (FunctionException fe) {
-      throw new Exception(
-          String.format("Query could not be executed due to : %s", fe.getMessage()));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable e) {
-      SystemFailure.checkFailure();
-      throw new Exception(String.format("Query could not be executed due to : %s", e.getMessage()));
-    }
-  }
-
-  private static String wrapResult(final String str) {
-    StringWriter w = new StringWriter();
-    synchronized (w.getBuffer()) {
-      w.write("{\"result\":");
-      w.write(str);
-      w.write("}");
-      return w.toString();
-    }
-  }
-
-  public static Object queryData(final String query, final String members, final int limit,
-      final boolean zipResult, final int queryResultSetLimit, final int queryCollectionsDepth)
-      throws Exception {
-
-    if (query == null || query.isEmpty()) {
-      return new JsonisedErrorMessage("Query is either empty or Null")
-          .toString();
-    }
-
-    Set<DistributedMember> inputMembers = null;
-    if (StringUtils.isNotBlank(members)) {
-      inputMembers = new HashSet<>();
-      StringTokenizer st = new StringTokenizer(members, ",");
-      while (st.hasMoreTokens()) {
-        String member = st.nextToken();
-        DistributedMember distributedMember = BeanUtilFuncs.getDistributedMemberByNameOrId(member);
-        inputMembers.add(distributedMember);
-        if (distributedMember == null) {
-          return new JsonisedErrorMessage(
-              String.format("Query is invalid due to invalid member : %s", member)).toString();
-        }
-      }
-    }
-
-    InternalCache cache = ManagementAgent.getCache();
-    try {
-
-      SystemManagementService service =
-          (SystemManagementService) ManagementService.getExistingManagementService(cache);
-      Set<String> regionsInQuery = compileQuery(cache, query);
-
-      // Validate region existence
-      if (regionsInQuery.size() > 0) {
-        for (String regionPath : regionsInQuery) {
-          DistributedRegionMXBean regionMBean = service.getDistributedRegionMXBean(regionPath);
-          if (regionMBean == null) {
-            return new JsonisedErrorMessage(
-                String.format("Cannot find regions %s in any of the members", regionPath))
-                    .toString();
-          } else {
-            Set<DistributedMember> associatedMembers =
-                CliUtil.getRegionAssociatedMembers(regionPath, cache, true);
-
-            if (inputMembers != null && inputMembers.size() > 0) {
-              if (!associatedMembers.containsAll(inputMembers)) {
-                return new JsonisedErrorMessage(
-                    String.format("Cannot find regions %s in specified members", regionPath))
-                        .toString();
-              }
-            }
-          }
-        }
-      } else {
-        return new JsonisedErrorMessage(String.format("Query is invalid due to error : %s",
-            "Region mentioned in query probably missing /")).toString();
-      }
-
-      // Validate
-      if (regionsInQuery.size() > 1 && inputMembers == null) {
-        for (String regionPath : regionsInQuery) {
-          DistributedRegionMXBean regionMBean = service.getDistributedRegionMXBean(regionPath);
-
-          if (regionMBean.getRegionType().equals(DataPolicy.PARTITION.toString())
-              || regionMBean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
-            return new JsonisedErrorMessage(
-                "Join operation can only be executed on targeted members, please give member input")
-                    .toString();
-          }
-        }
-      }
-
-      String randomRegion = regionsInQuery.iterator().next();
-
-      // get the first available member
-      Set<DistributedMember> associatedMembers =
-          CliUtil.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
-
-      if (associatedMembers != null && associatedMembers.size() > 0) {
-        Object[] functionArgs = new Object[6];
-        if (inputMembers != null && inputMembers.size() > 0) {// on input
-          // members
-
-          functionArgs[DISPLAY_MEMBERWISE] = true;
-          functionArgs[QUERY] = query;
-          functionArgs[REGION] = randomRegion;
-          functionArgs[LIMIT] = limit;
-          functionArgs[QUERY_RESULTSET_LIMIT] = queryResultSetLimit;
-          functionArgs[QUERY_COLLECTIONS_DEPTH] = queryCollectionsDepth;
-          return callFunction(functionArgs, inputMembers, zipResult);
-        } else { // Query on any random member
-          functionArgs[DISPLAY_MEMBERWISE] = false;
-          functionArgs[QUERY] = query;
-          functionArgs[REGION] = randomRegion;
-          functionArgs[LIMIT] = limit;
-          functionArgs[QUERY_RESULTSET_LIMIT] = queryResultSetLimit;
-          functionArgs[QUERY_COLLECTIONS_DEPTH] = queryCollectionsDepth;
-          return callFunction(functionArgs, associatedMembers, zipResult);
-        }
-
-      } else {
-        return new JsonisedErrorMessage(String
-            .format("Cannot find regions %s in any of the members", regionsInQuery.toString()))
-                .toString();
-      }
-
-    } catch (QueryInvalidException qe) {
-      return new JsonisedErrorMessage(
-          String.format("Query is invalid due to error : %s", qe.getMessage()))
-              .toString();
-    }
-  }
-
-  private static class JsonisedErrorMessage {
-
-    private static String message = "message";
-
-    private GfJsonObject gFJsonObject = new GfJsonObject();
-
-    public JsonisedErrorMessage(final String errorMessage) throws Exception {
-      try {
-        gFJsonObject.put(message, errorMessage);
-      } catch (GfJsonException e) {
-        throw new Exception(e);
-      }
-    }
-
-    @Override
-    public String toString() {
-      return gFJsonObject.toString();
-    }
-  }
-
-  /**
-   * Compile the query and return a set of regions involved in the query It throws an
-   * QueryInvalidException if the query is not proper
-   *
-   * @param cache current cache
-   * @param query input query
-   *
-   * @return a set of regions involved in the query
-   */
-  private static Set<String> compileQuery(final InternalCache cache, final String query)
-      throws QueryInvalidException {
-    QCompiler compiler = new QCompiler();
-    Set<String> regionsInQuery;
-    try {
-      CompiledValue compiledQuery = compiler.compileQuery(query);
-      Set<String> regions = new HashSet<>();
-      compiledQuery.getRegionsInQuery(regions, null);
-      regionsInQuery = Collections.unmodifiableSet(regions);
-      return regionsInQuery;
-    } catch (QueryInvalidException qe) {
-      logger.error("{} Failed, Error {}", query, qe.getMessage(), qe);
-      throw qe;
-    }
-  }
-    private boolean showMembers = false;
+    private boolean showMembers;
-      super();
-      InternalCache cache =
-          ((InternalCache) context.getCache()).getCacheForProcessingClientRequests();
+      InternalCache cache = (InternalCache) context.getCache();
-
-  private static class QueryDataFunctionResult implements Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    private final String message;
-    private final byte[] compressedBytes;
-
-    public QueryDataFunctionResult(final String message, final byte[] compressedBytes) {
-      this.message = message;
-      this.compressedBytes = compressedBytes;
-    }
-
-    public String getMessage() {
-      return message;
-    }
-
-    public byte[] getCompressedBytes() {
-      return compressedBytes;
-    }
-  }

MOV5 UPD66 MOV11 MOV43 MOV32 MOV11 INS32 MOV42 MOV42 MOV32 UPD43 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL36 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL14 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL51 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL42 DEL45 DEL45 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL2 DEL9 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL2 DEL9 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL9 DEL46 DEL42 DEL43 DEL36 DEL42 DEL32 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL59 DEL23 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55