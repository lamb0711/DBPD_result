Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  public FetchPartitionDetailsMessage() {
-  }
+  public FetchPartitionDetailsMessage() {}
-  private FetchPartitionDetailsMessage(
-      Set<InternalDistributedMember> recipients, 
-      int regionId, 
-      ReplyProcessor21 processor,
-      boolean internal, boolean fetchOfflineMembers, LoadProbe probe) {
+  private FetchPartitionDetailsMessage(Set<InternalDistributedMember> recipients, int regionId,
+      ReplyProcessor21 processor, boolean internal, boolean fetchOfflineMembers, LoadProbe probe) {
-   * Sends a message to fetch {@link 
-   * org.apache.geode.cache.partition.PartitionMemberInfo
+   * Sends a message to fetch {@link org.apache.geode.cache.partition.PartitionMemberInfo
-   * @param fetchOfflineMembers 
+   * @param fetchOfflineMembers
-  public static FetchPartitionDetailsResponse send(
-      Set<InternalDistributedMember> recipients, 
-      PartitionedRegion region,
-      boolean internal, boolean fetchOfflineMembers, LoadProbe probe) {
-    
+  public static FetchPartitionDetailsResponse send(Set<InternalDistributedMember> recipients,
+      PartitionedRegion region, boolean internal, boolean fetchOfflineMembers, LoadProbe probe) {
+
-    
-    FetchPartitionDetailsResponse response = new FetchPartitionDetailsResponse(
-        region.getSystem(), recipients, region);
-    FetchPartitionDetailsMessage msg = new FetchPartitionDetailsMessage(
-        recipients, region.getPRId(), response, internal, fetchOfflineMembers, probe);
-    /*Set<InternalDistributedMember> failures =*/ 
+    FetchPartitionDetailsResponse response =
+        new FetchPartitionDetailsResponse(region.getSystem(), recipients, region);
+    FetchPartitionDetailsMessage msg = new FetchPartitionDetailsMessage(recipients,
+        region.getPRId(), response, internal, fetchOfflineMembers, probe);
+
+    /* Set<InternalDistributedMember> failures = */
-  public FetchPartitionDetailsMessage(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public FetchPartitionDetailsMessage(DataInput in) throws IOException, ClassNotFoundException {
-                                                     PartitionedRegion region, 
-                                                     long startTime) 
-                                              throws ForceReattemptException {
-    
-    PartitionMemberInfoImpl details = (PartitionMemberInfoImpl)
-        region.getRedundancyProvider().buildPartitionMemberDetails(
-            this.internal, this.loadProbe);
-    OfflineMemberDetails offlineDetails; 
-    if(this.internal && this.fetchOfflineMembers) {
+      PartitionedRegion region, long startTime) throws ForceReattemptException {
+
+    PartitionMemberInfoImpl details = (PartitionMemberInfoImpl) region.getRedundancyProvider()
+        .buildPartitionMemberDetails(this.internal, this.loadProbe);
+    OfflineMemberDetails offlineDetails;
+    if (this.internal && this.fetchOfflineMembers) {
-    FetchPartitionDetailsReplyMessage.send(
-        getSender(), getProcessorId(), details, dm, offlineDetails, null);
-    
+    FetchPartitionDetailsReplyMessage.send(getSender(), getProcessorId(), details, dm,
+        offlineDetails, null);
+
-  public static final class FetchPartitionDetailsReplyMessage 
-  extends ReplyMessage {
-    
+  public static final class FetchPartitionDetailsReplyMessage extends ReplyMessage {
+
-    
+
-    
+
-    public FetchPartitionDetailsReplyMessage() {
-    }
+    public FetchPartitionDetailsReplyMessage() {}
-    private FetchPartitionDetailsReplyMessage(int processorId,
-        PartitionMemberInfoImpl details, OfflineMemberDetails offlineDetails, ReplyException re) {
+    private FetchPartitionDetailsReplyMessage(int processorId, PartitionMemberInfoImpl details,
+        OfflineMemberDetails offlineDetails, ReplyException re) {
-      
+
-      
+
-    /** Send an ack 
-     * @param offlineDetails */
-    public static void send(InternalDistributedMember recipient,
-                            int processorId, 
-                            PartitionMemberInfoImpl details, 
-                            DM dm, 
-                            OfflineMemberDetails offlineDetails, 
-                            ReplyException re) {
-      Assert.assertTrue(recipient != null,
-          "FetchPartitionDetailsReplyMessage NULL recipient");
-      FetchPartitionDetailsReplyMessage m = 
+    /**
+     * Send an ack
+     * 
+     * @param offlineDetails
+     */
+    public static void send(InternalDistributedMember recipient, int processorId,
+        PartitionMemberInfoImpl details, DM dm, OfflineMemberDetails offlineDetails,
+        ReplyException re) {
+      Assert.assertTrue(recipient != null, "FetchPartitionDetailsReplyMessage NULL recipient");
+      FetchPartitionDetailsReplyMessage m =
-        logger.trace(LogMarker.DM, "FetchPartitionDetailsReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "FetchPartitionDetailsReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-      }
-      else {
+      } else {
-          return new PartitionMemberInfoImpl(
-              getSender(), this.configuredMaxMemory, this.size, 
+          return new PartitionMemberInfoImpl(getSender(), this.configuredMaxMemory, this.size,
-        }
-        else {
-          return new PartitionMemberInfoImpl(
-              getSender(), this.configuredMaxMemory, this.size, 
-              this.bucketCount, this.primaryCount,
-              this.prLoad, this.bucketSizes);
+        } else {
+          return new PartitionMemberInfoImpl(getSender(), this.configuredMaxMemory, this.size,
+              this.bucketCount, this.primaryCount, this.prLoad, this.bucketSizes);
-      }
-      else {
+      } else {
-        }
-        else {
+        } else {
-        
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      sb.append("FetchPartitionDetailsReplyMessage ")
-        .append("processorid=").append(this.processorId)
-        .append(" reply to sender ").append(this.getSender())
-        .append(" returning configuredMaxMemory=").append(this.configuredMaxMemory)
-        .append(" size=").append(this.size)
-        .append(" bucketCount=").append(this.bucketCount)
-        .append(" primaryCount=").append(this.primaryCount)
-        .append(" prLoad=").append(this.prLoad)
-        .append(" bucketSizes=").append(Arrays.toString(this.bucketSizes));
+      sb.append("FetchPartitionDetailsReplyMessage ").append("processorid=")
+          .append(this.processorId).append(" reply to sender ").append(this.getSender())
+          .append(" returning configuredMaxMemory=").append(this.configuredMaxMemory)
+          .append(" size=").append(this.size).append(" bucketCount=").append(this.bucketCount)
+          .append(" primaryCount=").append(this.primaryCount).append(" prLoad=").append(this.prLoad)
+          .append(" bucketSizes=").append(Arrays.toString(this.bucketSizes));
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.FetchPartitionDetailsMessage.FetchPartitionDetailsReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.FetchPartitionDetailsMessage.FetchPartitionDetailsReplyMessage}
-  public static class FetchPartitionDetailsResponse extends
-      PartitionResponse {
-    
-    private final Set<InternalPartitionDetails> allDetails = 
+  public static class FetchPartitionDetailsResponse extends PartitionResponse {
+
+    private final Set<InternalPartitionDetails> allDetails =
-    private OfflineMemberDetails offlineDetails; 
+    private OfflineMemberDetails offlineDetails;
-    public FetchPartitionDetailsResponse(
-        InternalDistributedSystem ds,
-        Set<InternalDistributedMember> recipients, 
-        PartitionedRegion theRegion) {
+    public FetchPartitionDetailsResponse(InternalDistributedSystem ds,
+        Set<InternalDistributedMember> recipients, PartitionedRegion theRegion) {
-          FetchPartitionDetailsReplyMessage reply = 
-              (FetchPartitionDetailsReplyMessage)msg;
+          FetchPartitionDetailsReplyMessage reply = (FetchPartitionDetailsReplyMessage) msg;
-            synchronized(allDetails) {
+            synchronized (allDetails) {
-              //This just picks the offline details from the last member to return
+              // This just picks the offline details from the last member to return
-              logger.debug("FetchPartitionDetailsResponse return details is {}",  details);
+              logger.debug("FetchPartitionDetailsResponse return details is {}", details);
-          }
-          else if (logger.isTraceEnabled(LogMarker.DM)) {
+          } else if (logger.isTraceEnabled(LogMarker.DM)) {
-      }
-      finally {
+      } finally {
-     * Ignore any incoming exception from other VMs, we just want an
-     * acknowledgement that the message was processed.
+     * Ignore any incoming exception from other VMs, we just want an acknowledgement that the
+     * message was processed.
-    
+
-      synchronized(allDetails) {
+      synchronized (allDetails) {

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66