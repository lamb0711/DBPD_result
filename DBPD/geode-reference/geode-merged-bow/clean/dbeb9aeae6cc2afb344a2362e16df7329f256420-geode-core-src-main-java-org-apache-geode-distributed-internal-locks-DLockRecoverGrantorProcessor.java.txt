Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Handles messaging to all members of a lock service for the purposes of
- * recoverying from the loss of the lock grantor. The 
- * <code>DLockRecoverGrantorMessage</code> is sent out by the new lock grantor
- * and all members reply with details on held and pending locks.
+ * Handles messaging to all members of a lock service for the purposes of recoverying from the loss
+ * of the lock grantor. The <code>DLockRecoverGrantorMessage</code> is sent out by the new lock
+ * grantor and all members reply with details on held and pending locks.
-  protected final static DefaultMessageProcessor nullServiceProcessor = 
-      new DefaultMessageProcessor(); 
-  
+  protected final static DefaultMessageProcessor nullServiceProcessor =
+      new DefaultMessageProcessor();
+
-  
+
-  
-  // ------------------------------------------------------------------------- 
-  //   Static operations for recovering from loss of the lock grantor
-  // -------------------------------------------------------------------------  
-  
+
+  // -------------------------------------------------------------------------
+  // Static operations for recovering from loss of the lock grantor
+  // -------------------------------------------------------------------------
+
-   * Sends DLockRecoverGrantorMessage to all participants of the DLockService
-   * in order to recover from the loss of the previous lock grantor.  Each
-   * member will reply with details on currently held locks, pending locks,
-   * and known stuck locks.
+   * Sends DLockRecoverGrantorMessage to all participants of the DLockService in order to recover
+   * from the loss of the previous lock grantor. Each member will reply with details on currently
+   * held locks, pending locks, and known stuck locks.
-  static boolean recoverLockGrantor(Set members,
-                                    DLockService service,
-                                    DLockGrantor newGrantor,
-                                    DM dm,
-                                    InternalDistributedMember elder) {
+  static boolean recoverLockGrantor(Set members, DLockService service, DLockGrantor newGrantor,
+      DM dm, InternalDistributedMember elder) {
-    DLockRecoverGrantorProcessor processor = 
+    DLockRecoverGrantorProcessor processor =
-    
+
-    if (msg.getSender() == null) msg.setSender(dm.getId());
-    msg.processMessage(dm);
-        
+    if (msg.getSender() == null)
+      msg.setSender(dm.getId());
+    msg.scheduleMessage(dm);
+
-    try { 
+    try {
-    }
-    catch (ReplyException e) {
+    } catch (ReplyException e) {
-    
-    //return newGrantor.makeReady(false);
+
+    // return newGrantor.makeReady(false);
-  
-  // ------------------------------------------------------------------------- 
-  //   Constructors
-  // -------------------------------------------------------------------------  
-  
+
+  // -------------------------------------------------------------------------
+  // Constructors
+  // -------------------------------------------------------------------------
+
-  private DLockRecoverGrantorProcessor(DM dm, 
-                                       Set members, 
-                                       DLockGrantor newGrantor) {
+  private DLockRecoverGrantorProcessor(DM dm, Set members, DLockGrantor newGrantor) {
-  
-  // ------------------------------------------------------------------------- 
-  //   Instance methods
+
-  
+  // Instance methods
+  // -------------------------------------------------------------------------
+
-  
+
-  
+
-      Assert.assertTrue(msg instanceof DLockRecoverGrantorReplyMessage, 
-          "DLockRecoverGrantorProcessor is unable to process message of type " +
-          msg.getClass());
+      Assert.assertTrue(msg instanceof DLockRecoverGrantorReplyMessage,
+          "DLockRecoverGrantorProcessor is unable to process message of type " + msg.getClass());
-      DLockRecoverGrantorReplyMessage reply = (DLockRecoverGrantorReplyMessage)msg;
+      DLockRecoverGrantorReplyMessage reply = (DLockRecoverGrantorReplyMessage) msg;
-        case DLockRecoverGrantorReplyMessage.OK:  
+        case DLockRecoverGrantorReplyMessage.OK:
-          
+
-            }
-            catch (InterruptedException e) {
+            } catch (InterruptedException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-        logger.trace(LogMarker.DLS, "Processing of DLockRecoverGrantorReplyMessage {} resulted in {}", msg , e.getMessage(), e);
+        logger.trace(LogMarker.DLS,
+            "Processing of DLockRecoverGrantorReplyMessage {} resulted in {}", msg, e.getMessage(),
+            e);
-    }
-    finally {
+    } finally {
-  
+
-  
-  // ------------------------------------------------------------------------- 
-  //   DLockRecoverGrantorMessage
-  // -------------------------------------------------------------------------  
-  public static final class DLockRecoverGrantorMessage
-  extends PooledDistributionMessage 
-  implements MessageWithReply {
+
+  // -------------------------------------------------------------------------
+  // DLockRecoverGrantorMessage
+  // -------------------------------------------------------------------------
+  public static final class DLockRecoverGrantorMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-    
+
-    
+
+
-  
+
+
-    
+
-    
+
-    
+
-    
+
+    /**
+     * For unit testing we need to push the message through scheduleAction so that message observers
+     * are invoked
+     * 
+     * @param dm the distribution manager
+     */
+    protected void scheduleMessage(DM dm) {
+      if (dm instanceof DistributionManager) {
+        super.scheduleAction((DistributionManager) dm);
+      } else {
+        processMessage(dm);
+      }
+    }
+
-      
-      DLockService svc = 
-          DLockService.getInternalServiceNamed(this.serviceName);
+
+      DLockService svc = DLockService.getInternalServiceNamed(this.serviceName);
-      
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.elder = (InternalDistributedMember)DataSerializer.readObject(in);
+      this.elder = (InternalDistributedMember) DataSerializer.readObject(in);
-    
+
-    
+
-   }
-  
-  // ------------------------------------------------------------------------- 
-  //   DLockRecoverGrantorReplyMessage
-  // -------------------------------------------------------------------------  
-  public static final class DLockRecoverGrantorReplyMessage 
-  extends ReplyMessage {
-    
+  }
+
+  // -------------------------------------------------------------------------
+  // DLockRecoverGrantorReplyMessage
+  // -------------------------------------------------------------------------
+  public static final class DLockRecoverGrantorReplyMessage extends ReplyMessage {
+
-    
+
-    
+
-     * Locks that are currently held...
-     * Serializable owner, Object name, long leaseTime
+     * Locks that are currently held... Serializable owner, Object name, long leaseTime
-//    /** Identifies who the responder believes the lock grantor currently is */
-//    private InternalDistributedMember grantor;
-    
+    // /** Identifies who the responder believes the lock grantor currently is */
+    // private InternalDistributedMember grantor;
+
+
-    
+
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-        case OK:                response = "OK"; break;
-        case GRANTOR_DISPUTE:   response = "GRANTOR_DISPUTE"; break;
-        default: response = String.valueOf(this.replyCode); break;
+        case OK:
+          response = "OK";
+          break;
+        case GRANTOR_DISPUTE:
+          response = "GRANTOR_DISPUTE";
+          break;
+        default:
+          response = String.valueOf(this.replyCode);
+          break;
-      return "DLockRecoverGrantorReplyMessage (processorId=" + processorId +
-             "; replyCode=" + this.replyCode + "=" + response + 
-             "; heldLocks=" + Arrays.asList(this.heldLocks) +
-             "; sender=" + getSender() + 
-             ")";
+      return "DLockRecoverGrantorReplyMessage (processorId=" + processorId + "; replyCode="
+          + this.replyCode + "=" + response + "; heldLocks=" + Arrays.asList(this.heldLocks)
+          + "; sender=" + getSender() + ")";
-  
+
-  
+
-      
+
-        DLockService svc = 
-            DLockService.getInternalServiceNamed(msg.getServiceName());
-        
+        DLockService svc = DLockService.getInternalServiceNamed(msg.getServiceName());
+
-          
-          LockGrantorId lockGrantorId = new LockGrantorId(
-              dm, msg.getSender(), msg.getGrantorVersion(), msg.getGrantorSerialNumber());
-          
+
+          LockGrantorId lockGrantorId = new LockGrantorId(dm, msg.getSender(),
+              msg.getGrantorVersion(), msg.getGrantorSerialNumber());
+
-          
+
-          }
-          else {
-            heldLocks = (DLockRemoteToken[]) 
-                heldLockSet.toArray(new DLockRemoteToken[heldLockSet.size()]);
+          } else {
+            heldLocks =
+                (DLockRemoteToken[]) heldLockSet.toArray(new DLockRemoteToken[heldLockSet.size()]);
-      }
-      catch (RuntimeException e) {
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.DLOCKRECOVERGRANTORPROCESSOR_DLOCKRECOVERGRANTORMESSAGE_PROCESS_THROWABLE), e);
+      } catch (RuntimeException e) {
+        logger.warn(
+            LocalizedMessage.create(
+                LocalizedStrings.DLOCKRECOVERGRANTORPROCESSOR_DLOCKRECOVERGRANTORMESSAGE_PROCESS_THROWABLE),
+            e);
-//      catch (VirtualMachineError err) {
-//        SystemFailure.initiateFailure(err);
-//        // If this ever returns, rethrow the error.  We're poisoned
-//        // now, so don't let this thread continue.
-//        throw err;
-//      }
-//      catch (Throwable t) {
-//        // Whenever you catch Error or Throwable, you must also
-//        // catch VirtualMachineError (see above).  However, there is
-//        // _still_ a possibility that you are dealing with a cascading
-//        // error condition, so you also need to check to see if the JVM
-//        // is still usable:
-//        SystemFailure.checkFailure();
-//        log.warning(LocalizedStrings.DLockRecoverGrantorProcessor_DLOCKRECOVERGRANTORMESSAGEPROCESS_THROWABLE, t);
-//        replyException = new ReplyException(t);
-//      }
+      // catch (VirtualMachineError err) {
+      // SystemFailure.initiateFailure(err);
+      // // If this ever returns, rethrow the error. We're poisoned
+      // // now, so don't let this thread continue.
+      // throw err;
+      // }
+      // catch (Throwable t) {
+      // // Whenever you catch Error or Throwable, you must also
+      // // catch VirtualMachineError (see above). However, there is
+      // // _still_ a possibility that you are dealing with a cascading
+      // // error condition, so you also need to check to see if the JVM
+      // // is still usable:
+      // SystemFailure.checkFailure();
+      // log.warning(LocalizedStrings.DLockRecoverGrantorProcessor_DLOCKRECOVERGRANTORMESSAGEPROCESS_THROWABLE,
+      // t);
+      // replyException = new ReplyException(t);
+      // }
-        DLockRecoverGrantorReplyMessage replyMsg = 
-            new DLockRecoverGrantorReplyMessage();
+        DLockRecoverGrantorReplyMessage replyMsg = new DLockRecoverGrantorReplyMessage();
-            logger.trace(LogMarker.DLS, "[DLockRecoverGrantorMessage.process] locally process reply");
+            logger.trace(LogMarker.DLS,
+                "[DLockRecoverGrantorMessage.process] locally process reply");
-        }
-        else {
+        } else {

INS31 UPD66 UPD66 UPD66 INS29 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 UPD66 INS65 INS65 INS43 INS42 INS25 UPD42 INS66 INS66 INS42 INS66 INS42 INS62 INS8 INS8 UPD66 INS42 INS43 INS21 INS21 INS42 INS48 INS32 INS42 INS11 INS42 INS42 INS43 INS42 INS42 DEL66 DEL66 DEL66