Merge geode develop branch

-import static org.apache.geode.management.api.ClusterManagementResult.StatusCode.ENTITY_EXISTS;
-import static org.apache.geode.management.api.ClusterManagementResult.StatusCode.ENTITY_NOT_FOUND;
-import static org.apache.geode.management.api.ClusterManagementResult.StatusCode.ERROR;
-import static org.apache.geode.management.api.ClusterManagementResult.StatusCode.ILLEGAL_ARGUMENT;
-      return assertSuccessful(new ClusterManagementRealizationResult(false,
-          "Cluster configuration service needs to be enabled"));
+      return assertSuccessful(new ClusterManagementRealizationResult(StatusCode.ERROR,
+          "Cluster configuration service needs to be enabled."));
-      raise(ENTITY_EXISTS, e);
+      raise(StatusCode.ENTITY_EXISTS, e);
-      raise(ILLEGAL_ARGUMENT, e);
+      raise(StatusCode.ILLEGAL_ARGUMENT, e);
-      result.setStatus(false, "Failed to apply the update on all members");
+      result.setStatus(StatusCode.ERROR, "Failed to create on all members.");
-        result.setStatus(true,
-            "Successfully updated config for " + finalGroup);
+        result.setStatus(StatusCode.OK,
+            "Successfully updated configuration for " + finalGroup + ".");
-        String message = "Failed to update cluster config for " + finalGroup;
+        String message = "Failed to update cluster configuration for " + finalGroup + ".";
-      return assertSuccessful(new ClusterManagementRealizationResult(false,
-          "Cluster configuration service needs to be enabled"));
+      return assertSuccessful(new ClusterManagementRealizationResult(StatusCode.ERROR,
+          "Cluster configuration service needs to be enabled."));
-      raise(ILLEGAL_ARGUMENT, e);
+      raise(StatusCode.ILLEGAL_ARGUMENT, e);
-      raise(ENTITY_NOT_FOUND, "Cache element '" + config.getId() + "' does not exist");
+      raise(StatusCode.ENTITY_NOT_FOUND,
+          config.getClass().getSimpleName() + " '" + config.getId() + "' does not exist.");
-      result.setStatus(false, "Failed to apply the update on all members");
+      result.setStatus(StatusCode.ERROR, "Failed to delete on all members.");
-          logger.error("Failed to update cluster config for " + finalGroup, e);
+          logger.error("Failed to update cluster configuration for " + finalGroup + ".", e);
-      result.setStatus(true, "Successfully removed config for " + updatedGroups);
+      result.setStatus(StatusCode.OK,
+          "Successfully removed configuration for " + updatedGroups + ".");
-      String message = "Failed to update cluster config for " + failedGroups;
+      String message = "Failed to update cluster configuration for " + failedGroups + ".";
-      return assertSuccessful(new ClusterManagementListResult<>(false,
-          "Cluster configuration service needs to be enabled"));
+      return assertSuccessful(new ClusterManagementListResult<>(StatusCode.ERROR,
+          "Cluster configuration service needs to be enabled."));
-      raise(ENTITY_NOT_FOUND,
-          config.getClass().getSimpleName() + " with id = " + config.getId() + " not found.");
+      raise(StatusCode.ENTITY_NOT_FOUND,
+          config.getClass().getSimpleName() + " '" + config.getId() + "' does not exist.");
-      raise(ERROR, "Expect only one matching " + config.getClass().getSimpleName());
+      raise(StatusCode.ERROR,
+          "Expect only one matching " + config.getClass().getSimpleName() + ".");
-        StatusCode.ACCEPTED,
-        "async operation started (GET uri to check status)");
+        StatusCode.ACCEPTED, "Operation started.  Use the URI to check its status.");
-      return new ClusterManagementResult(StatusCode.ERROR, "failed");
+      String error = "Operation failed.";
+      try {
+        future.get();
+      } catch (InterruptedException ignore) {
+        Thread.currentThread().interrupt();
+      } catch (ExecutionException e) {
+        error = e.getMessage();
+      }
+      return new ClusterManagementResult(StatusCode.ERROR, error);
-      return new ClusterManagementResult(StatusCode.OK, "finished successfully");
+      return new ClusterManagementResult(StatusCode.OK, "Operation finished successfully.");
-      return new ClusterManagementResult(StatusCode.IN_PROGRESS, "in progress");
+      return new ClusterManagementResult(StatusCode.IN_PROGRESS, "Operation in progress.");
-      raise(ENTITY_NOT_FOUND, "Operation id = " + opId + " not found");
+      raise(StatusCode.ENTITY_NOT_FOUND, "Operation '" + opId + "' does not exist.");
-        new ClusterManagementOperationStatusResult<>();
+        new ClusterManagementOperationStatusResult<>(getStatus(status));
-    if (!status.isDone()) {
-      result.setStatus(StatusCode.IN_PROGRESS, "in progress");
-    } else {
+    if (status.isDone() && !status.isCompletedExceptionally()) {
-        result.setStatus(StatusCode.OK, "finished successfully");
-        throw new RuntimeException(e);
-      } catch (ExecutionException e) {
-        throw new RuntimeException(e);
+      } catch (ExecutionException ignore) {
-      raise(ILLEGAL_ARGUMENT, String.format("Configuration type %s is not supported",
+      raise(StatusCode.ILLEGAL_ARGUMENT, String.format("%s is not supported.",

MOV43 INS8 INS27 INS60 INS54 MOV41 MOV8 MOV32 INS38 MOV43 UPD45 INS43 INS59 INS8 INS12 INS12 INS32 INS32 INS40 UPD45 INS40 INS40 UPD45 INS40 INS40 INS40 INS42 INS42 INS45 INS21 INS44 INS8 INS44 INS8 UPD40 INS42 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 UPD45 INS40 INS40 INS40 UPD45 INS40 INS32 UPD45 UPD45 UPD45 INS45 UPD45 INS45 INS40 UPD45 UPD45 UPD45 INS45 INS32 INS43 INS42 INS21 INS43 INS42 INS21 UPD45 UPD40 UPD45 UPD45 UPD45 UPD42 UPD45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 UPD45 INS45 UPD45 INS45 UPD45 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL9 DEL42 DEL42 DEL9 DEL9 DEL9 DEL42 DEL42 DEL9 DEL9 DEL9 DEL42 DEL42 DEL45 DEL8 DEL42 DEL38 DEL40 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42