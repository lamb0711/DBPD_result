GEODE-8283: Provide REST interface for disk-store creation

- Provides create, get, list and delete operations
- Can create with locator only running

Co-Authored-By: Jason Huynh <jhuynh@vmware.com>

+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkMinAndMaxOplogSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkMinOplogSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkQueueSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkTimeInterval;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkWriteBufferSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.verifyNonNegativeDirSize;
+
-
-              new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold}));
+              CacheXml.COMPACTION_THRESHOLD, compactionThreshold));
-
-              new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold, 100}));
+              CacheXml.COMPACTION_THRESHOLD, compactionThreshold, 100));
-    if (timeInterval < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Time Interval specified has to be a non-negative number and the value given %s is not acceptable",
-              timeInterval));
-    }
+    checkTimeInterval(timeInterval);
-    DiskStore existing = null;
+    DiskStore existing;
-    return existing;
+    return null;
-              new Object[] {diskDirSizes.length, diskDirs.length}));
+              diskDirSizes.length, diskDirs.length));
-    for (int i = 0; i < diskDirs.length; i++) {
-      if (!diskDirs[i].isDirectory()) {
-        if (!diskDirs[i].mkdirs()) {
+    for (File diskDir : diskDirs) {
+      if (!diskDir.isDirectory()) {
+        if (!diskDir.mkdirs()) {
-                  diskDirs[i]));
+                  diskDir));
-  /**
-   * Verify all directory sizes are positive
-   */
-  public static void verifyNonNegativeDirSize(int[] sizes) {
-    for (int i = 0; i < sizes.length; i++) {
-      if (sizes[i] < 0) {
-        throw new IllegalArgumentException(
-            String.format("Dir size cannot be negative : %s",
-                sizes[i]));
-      }
-    }
-  }
+
-    long MAX = Long.MAX_VALUE / (1024 * 1024);
-    if (maxOplogSize > MAX) {
-      throw new IllegalArgumentException(
-          String.format(
-              "%s has to be a number that does not exceed %s so the value given %s is not acceptable",
-              new Object[] {"max oplog size", maxOplogSize, MAX}));
-    } else if (maxOplogSize < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Maximum Oplog size specified has to be a non-negative number and the value given %s is not acceptable",
-              maxOplogSize));
-    }
+    checkMinAndMaxOplogSize(maxOplogSize);
-    if (maxOplogSizeInBytes < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Maximum Oplog size specified has to be a non-negative number and the value given %s is not acceptable",
-              maxOplogSizeInBytes));
-    }
+    checkMinOplogSize(maxOplogSizeInBytes);
-    if (queueSize < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Queue size specified has to be a non-negative number and the value given %s is not acceptable",
-              queueSize));
-    }
+    checkQueueSize(queueSize);
-    if (writeBufferSize < 0) {
-      // TODO add a message for WriteBufferSize
-      throw new IllegalArgumentException(
-          String.format(
-              "Queue size specified has to be a non-negative number and the value given %s is not acceptable",
-              writeBufferSize));
-    }
+    checkWriteBufferSize(writeBufferSize);
-  // used by hyda
+  // used by hydra

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS8 INS21 INS70 INS21 MOV21 MOV41 INS21 INS21 INS21 INS32 INS33 INS44 INS42 INS8 INS32 INS32 INS32 INS32 UPD42 MOV42 MOV42 INS43 INS42 MOV25 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS40 INS42 INS40 INS40 INS42 INS40 INS42 INS34 INS42 INS42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL40 DEL42 DEL34 DEL4 DEL3 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL45 DEL32 DEL14 DEL53 DEL8 DEL25 DEL33 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL39 DEL42 DEL40 DEL34 DEL34 DEL27 DEL36 DEL27 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL43 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL45 DEL42 DEL42 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL45 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL45 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL45 DEL32 DEL14 DEL53 DEL8 DEL25