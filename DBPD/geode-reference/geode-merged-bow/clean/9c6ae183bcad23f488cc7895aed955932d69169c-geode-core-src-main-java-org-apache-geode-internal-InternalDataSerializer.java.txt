GEODE-3: Use the correct DataSerializer for TimeUnit for either java8 or java9 (#2473)

* this fixed the analyzeDataSerializable test using java9
-    classesToSerializers.put(TimeUnit.NANOSECONDS.getClass().getName(), new WellKnownDS() {
+
+    WellKnownDS TIME_UNIT_SERIALIZER = new WellKnownDS() {
-        out.writeByte(DSCODE.TIME_UNIT.toByte());
-        out.writeByte(TIME_UNIT_NANOSECONDS);
+        TimeUnit timeUnit = (TimeUnit) o;
+        switch (timeUnit) {
+          case NANOSECONDS: {
+            out.writeByte(DSCODE.TIME_UNIT.toByte());
+            out.writeByte(TIME_UNIT_NANOSECONDS);
+            break;
+          }
+          case MICROSECONDS: {
+            out.writeByte(DSCODE.TIME_UNIT.toByte());
+            out.writeByte(TIME_UNIT_MICROSECONDS);
+            break;
+          }
+          case MILLISECONDS: {
+            out.writeByte(DSCODE.TIME_UNIT.toByte());
+            out.writeByte(TIME_UNIT_MILLISECONDS);
+            break;
+          }
+          case SECONDS: {
+            out.writeByte(DSCODE.TIME_UNIT.toByte());
+            out.writeByte(TIME_UNIT_SECONDS);
+            break;
+          }
+          // handles all other timeunits
+          default: {
+            writeGemFireEnum(timeUnit, out);
+          }
+        }
-    });
-    classesToSerializers.put(TimeUnit.MICROSECONDS.getClass().getName(), new WellKnownDS() {
-      @Override
-      public boolean toData(Object o, DataOutput out) throws IOException {
-        out.writeByte(DSCODE.TIME_UNIT.toByte());
-        out.writeByte(TIME_UNIT_MICROSECONDS);
-        return true;
-      }
-    });
-    classesToSerializers.put(TimeUnit.MILLISECONDS.getClass().getName(), new WellKnownDS() {
-      @Override
-      public boolean toData(Object o, DataOutput out) throws IOException {
-        out.writeByte(DSCODE.TIME_UNIT.toByte());
-        out.writeByte(TIME_UNIT_MILLISECONDS);
-        return true;
-      }
-    });
-    classesToSerializers.put(TimeUnit.SECONDS.getClass().getName(), new WellKnownDS() {
-      @Override
-      public boolean toData(Object o, DataOutput out) throws IOException {
-        out.writeByte(DSCODE.TIME_UNIT.toByte());
-        out.writeByte(TIME_UNIT_SECONDS);
-        return true;
-      }
-    });
+    };
+
+    // in java 9 and above, TimeUnit implementation changes. the class name of these units are the
+    // same now.
+    if (TimeUnit.NANOSECONDS.getClass().getName().equals(TimeUnit.SECONDS.getClass().getName())) {
+      classesToSerializers.put(TimeUnit.class.getName(), TIME_UNIT_SERIALIZER);
+    }
+    // in java 8 and below
+    else {
+      classesToSerializers.put(TimeUnit.NANOSECONDS.getClass().getName(), TIME_UNIT_SERIALIZER);
+      classesToSerializers.put(TimeUnit.MICROSECONDS.getClass().getName(), TIME_UNIT_SERIALIZER);
+      classesToSerializers.put(TimeUnit.MILLISECONDS.getClass().getName(), TIME_UNIT_SERIALIZER);
+      classesToSerializers.put(TimeUnit.SECONDS.getClass().getName(), TIME_UNIT_SERIALIZER);
+    }

INS60 INS25 MOV43 INS59 INS32 INS8 INS8 INS42 INS14 INS32 INS42 MOV32 INS21 INS21 INS21 INS21 INS21 MOV43 MOV1 INS32 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS40 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 MOV42 MOV42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 MOV78 MOV44 MOV44 MOV43 INS8 INS57 INS42 INS32 INS42 INS60 INS50 MOV41 INS43 INS40 INS42 INS43 INS59 INS42 INS49 MOV8 INS49 MOV8 INS49 MOV8 INS49 MOV8 INS49 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS11 INS42 INS10 INS42 INS10 INS42 INS10 INS42 INS10 INS21 INS43 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 DEL42 DEL78 DEL9 DEL41 DEL9 DEL41 DEL9 DEL41 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL1 DEL14 DEL32 DEL21