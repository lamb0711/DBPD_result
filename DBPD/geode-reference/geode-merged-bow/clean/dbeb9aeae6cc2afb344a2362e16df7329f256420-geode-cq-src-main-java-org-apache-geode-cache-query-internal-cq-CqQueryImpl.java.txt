Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  protected boolean isDurable = false ;
-  
+
+  protected boolean isDurable = false;
+
-  
+
-    
+
-  
+
-  
+
-  public CqQueryImpl(){
-  }
-  
-  public CqQueryImpl(CqServiceImpl cqService, String cqName, String queryString, boolean isDurable)  {
+  public CqQueryImpl() {}
+
+  public CqQueryImpl(CqServiceImpl cqService, String cqName, String queryString,
+      boolean isDurable) {
-    this.isDurable = isDurable ;
+    this.isDurable = isDurable;
-  
-  /** 
+
+  /**
-  
+
-  
+
-   * Validates the CQ. Checks for cq constraints. 
-   * Also sets the base region name.
+   * Validates the CQ. Checks for cq constraints. Also sets the base region name.
-    DefaultQuery locQuery = (DefaultQuery)((GemFireCacheImpl)cache).getLocalQueryService().newQuery(this.queryString);
+    DefaultQuery locQuery =
+        (DefaultQuery) ((GemFireCacheImpl) cache).getLocalQueryService().newQuery(this.queryString);
-//    assert locQuery != null;
-    
+    // assert locQuery != null;
+
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_BE_A_SELECT_STATEMENT_ONLY.toLocalizedString());
-    }    
-    
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_BE_A_SELECT_STATEMENT_ONLY
+              .toLocalizedString());
+    }
+
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_SELECT_DISTINCT_QUERIES_NOT_SUPPORTED_IN_CQ.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_SELECT_DISTINCT_QUERIES_NOT_SUPPORTED_IN_CQ
+              .toLocalizedString());
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_REFERENCE_ONE_AND_ONLY_ONE_REGION.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_REFERENCE_ONE_AND_ONLY_ONE_REGION
+              .toLocalizedString());
-    this.regionName = (String)regionsInQuery.iterator().next();
-    
+    this.regionName = (String) regionsInQuery.iterator().next();
+
-        throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_THE_WHERE_CLAUSE_IN_CQ_QUERIES_CANNOT_REFER_TO_A_REGION.toLocalizedString());
+        throw new UnsupportedOperationException(
+            LocalizedStrings.CqQueryImpl_THE_WHERE_CLAUSE_IN_CQ_QUERIES_CANNOT_REFER_TO_A_REGION
+                .toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_CANNOT_HAVE_MORE_THAN_ONE_ITERATOR_IN_THE_FROM_CLAUSE.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_CANNOT_HAVE_MORE_THAN_ONE_ITERATOR_IN_THE_FROM_CLAUSE
+              .toLocalizedString());
-    
+
-    CompiledIteratorDef itrDef = (CompiledIteratorDef)fromClause.get(0);
+    CompiledIteratorDef itrDef = (CompiledIteratorDef) fromClause.get(0);
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_HAVE_A_REGION_PATH_ONLY_AS_THE_FIRST_ITERATOR_IN_THE_FROM_CLAUSE.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_MUST_HAVE_A_REGION_PATH_ONLY_AS_THE_FIRST_ITERATOR_IN_THE_FROM_CLAUSE
+              .toLocalizedString());
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_DO_NOT_SUPPORT_PROJECTIONS.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_DO_NOT_SUPPORT_PROJECTIONS.toLocalizedString());
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.CqQueryImpl_CQ_QUERIES_DO_NOT_SUPPORT_ORDER_BY.toLocalizedString());
-    }   
-    
+      throw new UnsupportedOperationException(
+          LocalizedStrings.CqQueryImpl_CQ_QUERIES_DO_NOT_SUPPORT_ORDER_BY.toLocalizedString());
+    }
+
-  
+
+   * 
-    } catch (Exception ex){
-      StringId errMsg = LocalizedStrings.CqQueryImpl_FAILED_TO_REMOVE_CONTINUOUS_QUERY_FROM_THE_REPOSITORY_CQNAME_0_ERROR_1;
+    } catch (Exception ex) {
+      StringId errMsg =
+          LocalizedStrings.CqQueryImpl_FAILED_TO_REMOVE_CONTINUOUS_QUERY_FROM_THE_REPOSITORY_CQNAME_0_ERROR_1;
-    }    
-    if (logger.isDebugEnabled()){
+    }
+    if (logger.isDebugEnabled()) {
-  /** 
+  /**
-  
+
+   * 
-  public Query getQuery(){
+  public Query getQuery() {
-  
-  
+
+
-  
-  /* (non-Javadoc)
+
+  /*
+   * (non-Javadoc)
+   * 
-  
+
-  
+
-    
+
-   * Return the state of this query.
-   * Should not modify this state without first locking it.
+   * Return the state of this query. Should not modify this state without first locking it.
+   * 
- /* (non-Javadoc)
- * @see org.apache.geode.cache.query.internal.InternalCqQuery2#setCqState(int)
- */
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#setCqState(int)
+   */
-      throw new CqClosedException(LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0
-          .toLocalizedString(this.cqName));
+      throw new CqClosedException(
+          LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));
-      if (state == CqStateImpl.RUNNING){
+      if (state == CqStateImpl.RUNNING) {
-          //throw new IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_NOT_IN_RUNNING_STATE_STOP_CQ_DOES_NOT_APPLY_CQNAME_0
-          //  .toLocalizedString(this.cqName));
+          // throw new
+          // IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_NOT_IN_RUNNING_STATE_STOP_CQ_DOES_NOT_APPLY_CQNAME_0
+          // .toLocalizedString(this.cqName));
-      } else if(state == CqStateImpl.STOPPED) {
+      } else if (state == CqStateImpl.STOPPED) {
-      } else if(state == CqStateImpl.CLOSING) {
+      } else if (state == CqStateImpl.CLOSING) {
+   * 
-    this.stats.updateStats(cqEvent);  // Stats for VSD
+    this.stats.updateStats(cqEvent); // Stats for VSD
-  
+
+   * 
-  
+
+   * 
-   */ 
+   */
-  
+
+   * 
+   * 
-  
+
+   * 
+   * 
+
+
+

UPD66 UPD66 DEL66 DEL66