GEODE-4377: Don't catch encoding exceptions in OperationHandlers

This adds DecodingException and moves the handling of EncodingException
and this new exception to ProtobufOpsProcessor.

I've also added tests for getAll and putAll to ensure that their
handlers properly process all entries in the presence of a Key or
Entry decoding error.

This closes #1434

-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
+import static org.apache.geode.internal.protocol.protobuf.v1.BasicTypes.ErrorCode.INVALID_REQUEST;
+import static org.apache.geode.internal.protocol.protobuf.v1.BasicTypes.ErrorCode.SERVER_ERROR;
-import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.protocol.protobuf.v1.serialization.exception.DecodingException;
-      MessageExecutionContext messageExecutionContext) throws InvalidExecutionContextException {
+      MessageExecutionContext messageExecutionContext)
+      throws InvalidExecutionContextException, DecodingException {
-    Map<Boolean, List<Object>> resultsCollection;
-    try {
-      ((InternalCache) messageExecutionContext.getCache()).setReadSerializedForCurrentThread(true);
-
-      resultsCollection = request.getKeyList().stream()
-          .map((key) -> processOneMessage(serializationService, region, key))
-          .collect(Collectors.partitioningBy(x -> x instanceof BasicTypes.Entry));
-    } finally {
-      ((InternalCache) messageExecutionContext.getCache()).setReadSerializedForCurrentThread(false);
-      messageExecutionContext.getStatistics().endOperation(startTime);
-    }
-
-    for (Object entry : resultsCollection.get(true)) {
-      responseBuilder.addEntries((BasicTypes.Entry) entry);
-    }
-
-    for (Object entry : resultsCollection.get(false)) {
-      responseBuilder.addFailures((BasicTypes.KeyedError) entry);
+    try {
+      messageExecutionContext.getCache().setReadSerializedForCurrentThread(true);
+      request.getKeyList().stream()
+          .forEach((key) -> processSingleKey(responseBuilder, serializationService, region, key));
+    } finally {
+      messageExecutionContext.getCache().setReadSerializedForCurrentThread(false);
+      messageExecutionContext.getStatistics().endOperation(startTime);
-  private Object processOneMessage(ProtobufSerializationService serializationService, Region region,
+  private void processSingleKey(RegionAPI.GetAllResponse.Builder responseBuilder,
+      ProtobufSerializationService serializationService, Region region,
+
-      return ProtobufUtilities.createEntry(serializationService, decodedKey, value);
+      BasicTypes.Entry entry =
+          ProtobufUtilities.createEntry(serializationService, decodedKey, value);
+      responseBuilder.addEntries(entry);
+
+    } catch (DecodingException ex) {
+      logger.info("Key encoding not supported: {}", ex);
+      responseBuilder
+          .addFailures(buildKeyedError(key, "Key encoding not supported.", INVALID_REQUEST));
-      logger.error("Encoding not supported: {}", ex);
-      return createKeyedError(key, "Encoding not supported.", BasicTypes.ErrorCode.INVALID_REQUEST);
+      logger.info("Value encoding not supported: {}", ex);
+      responseBuilder
+          .addFailures(buildKeyedError(key, "Value encoding not supported.", INVALID_REQUEST));
-      logger.error("Failure in protobuf getAll operation for key: " + key, ex);
-      return createKeyedError(key, ex.toString(), BasicTypes.ErrorCode.SERVER_ERROR);
+      logger.warn("Failure in protobuf getAll operation for key: " + key, ex);
+      responseBuilder.addFailures(buildKeyedError(key, ex.toString(), SERVER_ERROR));
-  private Object createKeyedError(BasicTypes.EncodedValue key, String errorMessage,
+  private BasicTypes.KeyedError buildKeyedError(BasicTypes.EncodedValue key, String errorMessage,
+

MOV26 UPD40 UPD40 UPD40 INS43 MOV54 INS39 INS42 INS44 MOV43 UPD42 INS42 INS43 INS42 INS40 INS12 INS60 INS21 INS44 MOV44 INS8 MOV32 MOV43 INS59 INS32 INS43 INS42 INS21 INS21 INS21 INS21 MOV32 UPD42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 UPD45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 MOV32 UPD42 INS42 UPD42 MOV42 MOV42 UPD45 MOV45 INS42 INS42 INS42 INS45 INS42 UPD42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL11 DEL36 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL40 DEL43 DEL62 DEL86 DEL32 DEL32 DEL7 DEL42 DEL43 DEL11 DEL36 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL42 DEL11 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL42 DEL11 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL41 DEL40 DEL32 DEL41 DEL40 DEL41 DEL42 DEL43