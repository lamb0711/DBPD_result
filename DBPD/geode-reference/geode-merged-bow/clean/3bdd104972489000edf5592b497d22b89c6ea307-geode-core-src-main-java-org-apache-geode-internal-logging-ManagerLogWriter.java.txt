GEODE-2012: always write stat types to archive

* refactor classes to make testing easier
* write additional tests for stat archive rolling
* expose bug GEODE-2012 in StatTypesAreRolledOverRegressionTest
* fix bug exposed by StatTypesAreRolledOverRegressionTest

-import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.FileUtil;
+import org.apache.geode.internal.io.MainWithChildrenRollingFileHandler;
+import org.apache.geode.internal.io.RollingFileHandler;
-import java.io.*;
-import java.util.Arrays;
-import java.util.Comparator;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.PrintWriter;
-import java.util.regex.Pattern;
- * Implementation of {@link LogWriterI18n} for distributed system members. Its just like
+ * Implementation of {@link LogWriterI18n} for distributed system members. It's just like
-  private LogConfig cfg = null;
-  private DistributionManager dm = null;
+  private final RollingFileHandler rollingFileHandler;
-  // Constructors
+  private LogConfig cfg = null;
+
+  private LocalLogWriter mainLogger = this;
+
+  private File logDir = null;
+  private int mainLogId = -1;
+  private int childId = 0;
+  private boolean useChildLogging = false;
+
+  /**
+   * Set to true when roll is in progress
+   */
+  private boolean rolling = false;
+  private boolean mainLog = true;
+
+  private File activeLogFile = null;
+
+  private boolean started = false;
+
-  }
-
-  private LocalLogWriter mainLogger = this;
-
-  /**
-   * Gets the logger that writes to the main log file. This logger may differ from the current
-   * logger when rolling logs are used.
-   */
-  public LogWriterI18n getMainLogger() {
-    return this.mainLogger;
+    this.rollingFileHandler = new MainWithChildrenRollingFileHandler();
-      childLogPattern = getLogPattern(this.cfg.getLogFile().getName());
-      logDir = getParentFile(this.cfg.getLogFile());
+      logDir = rollingFileHandler.getParentFile(this.cfg.getLogFile());
-      mainLogId = calcNextMainId(logDir, true);
+      mainLogId = rollingFileHandler.calcNextMainId(logDir, true);
-  private Pattern childLogPattern = null;
-  private File logDir = null;
-  private int mainLogId = -1;
-  private int childId = 0;
-
-
-  public static String formatId(int id) {
-    StringBuffer result = new StringBuffer(10);
-    result.append('-');
-    if (id < 10) {
-      result.append('0');
-    }
-    result.append(id);
-    return result.toString();
-  }
-
-    path = path + formatId(mainLogId) + formatId(this.childId) + ext;
+    path = path + rollingFileHandler.formatId(mainLogId) + rollingFileHandler.formatId(this.childId)
+        + ext;
-  private boolean useChildLogging = false;
-
-  /**
-   * Set to true when roll is in progress
-   */
-  private boolean rolling = false;
-  private boolean mainLog = true;
-
-
-  private static String getMetaLogFileName(String baseLogFileName, int mainLogId) {
+  private String getMetaLogFileName(String baseLogFileName, int mainLogId) {
-    metaLogFile = "meta-" + fileName + formatId(mainLogId) + ext;
+    metaLogFile = "meta-" + fileName + rollingFileHandler.formatId(mainLogId) + ext;
-  private File activeLogFile = null;
-
-              File tmpLogDir = getParentFile(this.cfg.getLogFile());
+              File tmpLogDir = rollingFileHandler.getParentFile(this.cfg.getLogFile());
-  /**
-   * as a fix for bug #41474 we use "." if getParentFile returns null
-   */
-  private static File getParentFile(File f) {
-    File tmp = f.getAbsoluteFile().getParentFile();
-    if (tmp == null) {
-      tmp = new File(".");
-    }
-    return tmp;
-  }
-
-
-    File dir = getParentFile(log.getAbsoluteFile());
-    int previousMainId = calcNextMainId(dir, true);
+    RollingFileHandler rollingFileHandler = new MainWithChildrenRollingFileHandler();
+    File dir = rollingFileHandler.getParentFile(log.getAbsoluteFile());
+    int previousMainId = rollingFileHandler.calcNextMainId(dir, true);
-    // comment out the following to fix bug 31789
-    // if (previousMainId > 1) {
-    // previousMainId--;
-    // }
-    int childId = calcNextChildId(log, previousMainId > 0 ? previousMainId : 0);
+    int childId = rollingFileHandler.calcNextChildId(log, previousMainId > 0 ? previousMainId : 0);
-      buf.append(formatId(previousMainId)).append(formatId(childId));
+      buf.append(rollingFileHandler.formatId(previousMainId))
+          .append(rollingFileHandler.formatId(childId));
-      buf.insert(insertIdx, formatId(childId));
-      buf.insert(insertIdx, formatId(previousMainId));
+      buf.insert(insertIdx, rollingFileHandler.formatId(childId));
+      buf.insert(insertIdx, rollingFileHandler.formatId(previousMainId));
-
-  private static Pattern getLogPattern(String name) {
-    int extIdx = name.lastIndexOf('.');
-    String ext = "";
-    if (extIdx != -1) {
-      ext = "\\Q" + name.substring(extIdx) + "\\E";
-      name = name.substring(0, extIdx);
-    }
-    name = "\\Q" + name + "\\E" + "-\\d+-\\d+" + ext;
-    return Pattern.compile(name);
-  }
-
-  protected static final Pattern mainIdPattern = Pattern.compile(".+-\\d+-\\d+\\..+");
-  protected static final Pattern metaIdPattern = Pattern.compile("meta-.+-\\d+\\..+");
-
-  public static int calcNextMainId(File dir, boolean toCreateNew) {
-    int result = 0;
-    File[] childLogs = FileUtil.listFiles(dir, new FilenameFilter() {
-      public boolean accept(File d, String name) {
-        return mainIdPattern.matcher(name).matches();
-      }
-    });
-
-    /* Search child logs */
-    for (File childLog : childLogs) {
-      String name = childLog.getName();
-      int endIdIdx = name.lastIndexOf('-');
-      int startIdIdx = name.lastIndexOf('-', endIdIdx - 1);
-      String id = name.substring(startIdIdx + 1, endIdIdx);
-      try {
-        int mid = Integer.parseInt(id);
-        if (mid > result) {
-          result = mid;
-        }
-      } catch (NumberFormatException ignore) {
-      }
-    }
-
-    /* And search meta logs */
-    if (toCreateNew) {
-      File[] metaLogs = FileUtil.listFiles(dir, new FilenameFilter() {
-        public boolean accept(File d, String name) {
-          return metaIdPattern.matcher(name).matches();
-        }
-      });
-      for (File metaLog : metaLogs) {
-        String name = metaLog.getName();
-        int endIdIdx = name.lastIndexOf('.');
-        int startIdIdx = name.lastIndexOf('-', endIdIdx - 1);
-        String id = name.substring(startIdIdx + 1, endIdIdx);
-        try {
-          int mid = Integer.parseInt(id);
-          if (mid > result) {
-            result = mid;
-          }
-        } catch (NumberFormatException ignore) {
-        }
-      }
-      result++;
-    }
-
-    return result;
-  }
-
-  protected static final Pattern childIdPattern = Pattern.compile(".+-\\d+-\\d+\\..+");
-
-
-  public static int calcNextChildId(File log, int mainId) {
-    int result = 0;
-    File dir = getParentFile(log.getAbsoluteFile());
-    int endidx1 = log.getName().indexOf('-');
-    int endidx2 = log.getName().lastIndexOf('.');
-    String baseName = log.getName();
-    if (endidx1 != -1) {
-      baseName = log.getName().substring(0, endidx1);
-    } else {
-      baseName = log.getName().substring(0, endidx2);
-    }
-    File[] childLogs = FileUtil.listFiles(dir, new FilenameFilter() {
-      public boolean accept(File d, String name) {
-        return childIdPattern.matcher(name).matches();
-      }
-    });
-
-    /* Search child logs */
-
-    for (File childLog : childLogs) {
-      String name = childLog.getName();
-      // only compare the childlogid among the same set of log files.
-      if (!name.startsWith(baseName)) {
-        continue;
-      }
-      int endIdIdx = name.lastIndexOf('-');
-      int startIdIdx = name.lastIndexOf('-', endIdIdx - 1);
-      String id = name.substring(startIdIdx + 1, endIdIdx);
-
-      int startChild = name.lastIndexOf("-");
-      int endChild = name.lastIndexOf(".");
-      if (startChild > 0 && endChild > 0) {
-        String childId = name.substring(startChild + 1, endChild);
-
-        try {
-          int mainLogId = Integer.parseInt(id);
-          int childLogId = Integer.parseInt(childId);
-          if (mainLogId == mainId && childLogId > result) {
-            result = childLogId;
-          }
-        } catch (NumberFormatException ignore) {
-        }
-      }
-    }
-    result++;
-    return result;
-  }
-
-
-
-  // private static void debugLog(String msg, boolean stackDump) {
-  // try {
-  // FileOutputStream f = new FileOutputStream("debug.log", true);
-  // LogWriterI18n lw = new LocalLogWriter(ALL_LEVEL, new PrintStream(f));
-  // if (stackDump) {
-  // lw.info(msg, new RuntimeException("STACK"));
-  // } else {
-  // lw.info(msg);
-  // }
-  // f.close();
-  // } catch (IOException ignore) {
-  // }
-  // }
-
-  public static void removeOldLogs(LogConfig cfg, File logFile) {
-    LogWriterI18n log = new LocalLogWriter(INFO_LEVEL, System.err);
-    checkDiskSpace("log", null, ((long) cfg.getLogDiskSpaceLimit()) * (1024 * 1024),
-        getParentFile(logFile), getLogPattern(logFile.getName()), log);
-  }
-
-  public static void checkDiskSpace(String type, File newLog, long spaceLimit, File dir,
-      final Pattern logPattern, LogWriterI18n logger) {
-    if (spaceLimit == 0 || logPattern == null) {
-      return;
-    }
-    final String newLogName = (newLog == null) ? null : newLog.getName();
-    File[] childLogs = FileUtil.listFiles(dir, new FilenameFilter() {
-      public boolean accept(File d, String name) {
-        if (name.equals(newLogName)) {
-          return false;
-        } else {
-          boolean result = logPattern.matcher(name).matches();
-          return result;
-        }
-      }
-    });
-    if (childLogs == null) {
-      if (dir.isDirectory()) {
-        logger.warning(
-            LocalizedStrings.ManagerLogWriter_COULD_NOT_CHECK_DISK_SPACE_ON_0_BECAUSE_JAVAIOFILELISTFILES_RETURNED_NULL_THIS_COULD_BE_CAUSED_BY_A_LACK_OF_FILE_DESCRIPTORS,
-            dir);
-      }
-      return;
-    }
-    Arrays.sort(childLogs, new Comparator() {
-      public int compare(Object o1, Object o2) {
-        File f1 = (File) o1;
-        File f2 = (File) o2;
-        long diff = f1.lastModified() - f2.lastModified();
-        if (diff < 0) {
-          return -1;
-        } else if (diff > 0) {
-          return 1;
-        } else {
-          return 0;
-        }
-      }
-    });
-    long spaceUsed = 0;
-    for (File childLog : childLogs) {
-      spaceUsed += childLog.length();
-    }
-    int fIdx = 0;
-    while (spaceUsed >= spaceLimit && fIdx < childLogs.length) { // check array index to 37388
-      long childSize = childLogs[fIdx].length();
-      if (childLogs[fIdx].delete()) {
-        spaceUsed -= childSize;
-        logger.info(LocalizedStrings.ManagerLogWriter_DELETED_INACTIVE__0___1_,
-            new Object[] {type, childLogs[fIdx]});
-      } else {
-        logger.warning(LocalizedStrings.ManagerLogWriter_COULD_NOT_DELETE_INACTIVE__0___1_,
-            new Object[] {type, childLogs[fIdx]});
-      }
-      fIdx++;
-    }
-    if (spaceUsed > spaceLimit) {
-      logger.warning(
-          LocalizedStrings.ManagerLogWriter_COULD_NOT_FREE_SPACE_IN_0_DIRECTORY_THE_SPACE_USED_IS_1_WHICH_EXCEEDS_THE_CONFIGURED_LIMIT_OF_2,
-          new Object[] {type, Long.valueOf(spaceUsed), Long.valueOf(spaceLimit)});
-    }
-  }
-
-    checkDiskSpace("log", newLog, getLogDiskSpaceLimit(), logDir, childLogPattern, mainLogger);
+    rollingFileHandler.checkDiskSpace("log", newLog, getLogDiskSpaceLimit(), logDir, mainLogger);
-  private boolean started = false;
-

MOV26 MOV26 MOV26 INS26 INS26 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 UPD40 UPD40 UPD40 INS40 UPD40 INS40 UPD40 UPD40 INS23 MOV83 MOV83 INS43 INS59 UPD66 UPD42 MOV42 INS42 INS21 INS60 INS7 INS43 INS59 MOV43 INS22 INS14 INS42 INS42 INS14 INS42 INS52 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL13 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL45 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL37 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL18 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL13 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL70 DEL42 DEL37 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL45 DEL33 DEL39 DEL42 DEL42 DEL32 DEL11 DEL36 DEL34 DEL34 DEL27 DEL36 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL33 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL34 DEL27 DEL34 DEL38 DEL41 DEL8 DEL42 DEL34 DEL27 DEL34 DEL41 DEL8 DEL34 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL40 DEL27 DEL27 DEL39 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL4 DEL3 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL4 DEL3 DEL32 DEL21 DEL8 DEL25 DEL42 DEL37 DEL21 DEL8 DEL61 DEL42 DEL42 DEL27 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42