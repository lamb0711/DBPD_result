Merge branch 'develop' into feature/GEODE-9

-public final class TXCommitMessage extends PooledDistributionMessage implements MembershipListener, MessageWithReply
+public class TXCommitMessage extends PooledDistributionMessage implements MembershipListener, MessageWithReply
-
+  
-  private transient ArrayList farSideEntryOps;
+  protected transient ArrayList farSideEntryOps;
-  private void processCacheRuntimeException(CacheRuntimeException problem) {
+  protected void processCacheRuntimeException(CacheRuntimeException problem) {
+
+    /**
+     * Apply a single tx entry op on the far side
+     */
+    @SuppressWarnings("synthetic-access")
+    protected void txApplyEntryOpAdjunctOnly(FarSideEntryOp entryOp)
+    {
+      if (this.r == null) {
+        return;
+      }
+      EventID eventID = getEventId(entryOp);
+      boolean isDuplicate = this.r.hasSeenEvent(eventID);
+      boolean callbacksOnly = (this.r.getDataPolicy() == DataPolicy.PARTITION)
+          || isDuplicate;
+      if (this.r instanceof PartitionedRegion) {
+        
+        PartitionedRegion pr = (PartitionedRegion)r;
+        BucketRegion br = pr.getBucketRegion(entryOp.key);
+        Set bucketOwners = br.getBucketOwners();
+        InternalDistributedMember thisMember = GemFireCacheImpl.getExisting().getDistributionManager().getId();
+        if (bucketOwners.contains(thisMember)) {
+          return;
+        }
+        
+        /*
+         * This happens when we don't have the bucket and are getting adjunct notification
+         */
+        EntryEventImpl eei = AbstractRegionMap.createCBEvent(this.r, entryOp.op, entryOp.key, entryOp.value, this.msg.txIdent, txEvent, getEventId(entryOp), entryOp.callbackArg,entryOp.filterRoutingInfo,this.msg.bridgeContext, null, entryOp.versionTag, entryOp.tailKey);
+        try {
+        if(entryOp.filterRoutingInfo!=null) {
+          eei.setLocalFilterInfo(entryOp.filterRoutingInfo.getFilterInfo(this.r.getCache().getMyId()));
+        }
+        if (isDuplicate) {
+          eei.setPossibleDuplicate(true);
+        }
+        if (logger.isDebugEnabled()) {
+          logger.debug("invoking transactional callbacks for {} key={} needsUnlock={} event={}", entryOp.op, entryOp.key, this.needsUnlock, eei);
+        }
+        // we reach this spot because the event is either delivered to this member
+        // as an "adjunct" message or because the bucket was being created when
+        // the message was sent and already reflects the change caused by this event.
+        // In the latter case we need to invoke listeners
+        final boolean skipListeners = !isDuplicate;
+        eei.invokeCallbacks(this.r, skipListeners, true);
+        } finally {
+          eei.release();
+        }
+        return;
+      }
+    }
+
+    
+      public void processAdjunctOnly() {
+        txApplyEntryOpAdjunctOnly(this);
+      }
+      

UPD83 UPD83 INS31 INS29 INS79 INS83 INS39 INS42 INS44 INS8 INS31 INS65 INS42 INS45 INS43 INS42 INS25 INS60 INS60 INS60 INS25 INS83 INS39 INS42 INS8 INS66 INS42 INS27 INS8 INS43 INS59 INS39 INS59 INS39 INS59 INS62 INS8 INS21 INS22 INS33 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS22 INS43 INS60 INS60 INS60 INS60 INS25 INS60 INS54 INS41 INS32 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS36 INS42 INS52 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS8 INS8 INS42 INS52 INS52 INS42 INS27 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS25 INS25 INS25 INS60 INS21 INS21 INS32 INS40 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS40 INS40 INS40 INS22 INS42 INS32 INS40 INS40 INS22 INS33 INS40 INS40 INS27 INS8 INS42 INS8 INS32 INS8 INS83 INS39 INS59 INS32 INS32 INS22 INS42 INS42 INS32 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS40 INS33 INS21 INS21 INS42 INS42 INS21 INS42 INS38 INS42 INS42 INS22 INS42 INS9 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS32 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS45 INS40 INS40 INS22 INS42 INS40 INS42 INS32 INS52 INS42 INS32 INS42 INS22 INS42 INS52 INS42 DEL83