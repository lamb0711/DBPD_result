GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "DLockRequestProcessor processing lock request directly");
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "DLockRequestProcessor processing lock request directly");
-          logger.trace(LogMarker.DLS, "DLockRequestProcessor caught ReplyException", ex);
+          logger.trace(LogMarker.DLS_VERBOSE, "DLockRequestProcessor caught ReplyException", ex);
-          logger.trace(LogMarker.DLS, "DLockRequestProcessor caught ReplyException", ex);
+          logger.trace(LogMarker.DLS_VERBOSE, "DLockRequestProcessor caught ReplyException", ex);
-      logger.trace(LogMarker.DLS, "DLockRequestProcessor {} for {}",
+      logger.trace(LogMarker.DLS_VERBOSE, "DLockRequestProcessor {} for {}",
-
-
-  // private synchronized void setDoneProcessing(boolean value) {
-  // this.doneProcessing = value;
-  // }
-
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "Processing DLockResponseMessage: '{}'", msg);
+        logger.trace(LogMarker.DLS_VERBOSE, "Processing DLockResponseMessage: '{}'", msg);
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-          /*
-           * // If a different version of the lock service requested the lock, we need // to turn
-           * around and release it InternalDistributedLockService dls =
-           * (InternalDistributedLockService)
-           * DistributedLockService.getServiceNamed(reply.serviceName); boolean different = dls ==
-           * null; different = different || dls.getSerialNumber() != reply.dlsSerialNumber; if
-           * (different) { // Back at ya, dude, we don't want this lock!
-           * reply.releaseOrphanedGrant(this.dm); this.gotLock = false; // KIRK never set true
-           * except in else } else {
-           */
-            logger.trace(LogMarker.DLS, "{} has granted lock for {} in {}", reply.getSender(),
-                reply.objectName, reply.serviceName);
+            logger.trace(LogMarker.DLS_VERBOSE, "{} has granted lock for {} in {}",
+                reply.getSender(), reply.objectName, reply.serviceName);
-          // }
-            logger.trace(LogMarker.DLS, "{} has responded DLockResponseMessage.NOT_GRANTOR for {}",
-                reply.getSender(), reply.serviceName);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "{} has responded DLockResponseMessage.NOT_GRANTOR for {}", reply.getSender(),
+                reply.serviceName);
-            logger.trace(LogMarker.DLS, "{} has responded DLockResponseMessage.DESTROYED for {}",
-                reply.getSender(), reply.serviceName);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "{} has responded DLockResponseMessage.DESTROYED for {}", reply.getSender(),
+                reply.serviceName);
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-        logger.trace(LogMarker.DLS, "Finished processing DLockResponseMessage: '{}'", msg);
+        logger.trace(LogMarker.DLS_VERBOSE, "Finished processing DLockResponseMessage: '{}'", msg);
-      // setDoneProcessing(true);
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "DLockRequestMessage.process failed for <{}>", this);
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE, "DLockRequestMessage.process failed for <{}>",
+                this);
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "calling waitForGrantor {}", msg);
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE, "calling waitForGrantor {}", msg);
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-          logger.trace(LogMarker.DLS, "DLockRequestMessage.basicProcess processing <{}>", this);
+          logger.trace(LogMarker.DLS_VERBOSE, "DLockRequestMessage.basicProcess processing <{}>",
+              this);
-            logger.trace(LogMarker.DLS, "respondWithNotGrantor this.svc={} this.grantor={}",
+            logger.trace(LogMarker.DLS_VERBOSE, "respondWithNotGrantor this.svc={} this.grantor={}",
-            logger.trace(LogMarker.DLS, "respondWithNotGrantor grantor was destroyed {}",
+            logger.trace(LogMarker.DLS_VERBOSE, "respondWithNotGrantor grantor was destroyed {}",
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-          if (!this.svc.isLockGrantor()) { // TODO: verify this ok
+          if (!this.svc.isLockGrantor()) {
-              logger.trace(LogMarker.DLS, "respondWithNotGrantor service !isLockGrantor svc={}",
-                  this.svc);
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "respondWithNotGrantor service !isLockGrantor svc={}", this.svc);
-              logger.trace(LogMarker.DLS, "Handling lock request: <{}>", this);
+              logger.trace(LogMarker.DLS_VERBOSE, "Handling lock request: <{}>", this);
-                logger.trace(LogMarker.DLS,
+                logger.trace(LogMarker.DLS_VERBOSE,
-              } catch (InterruptedException e) {
+              } catch (InterruptedException | LockGrantorDestroyedException e) {
-              } catch (LockGrantorDestroyedException e) {
-                respondWithNotGrantor();
-          logger.trace(LogMarker.DLS, "LockGrantorDestroyedException respondWithNotGrantor svc={}",
-              this.svc);
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "LockGrantorDestroyedException respondWithNotGrantor svc={}", this.svc);
-          logger.trace(LogMarker.DLS, "LockServiceDestroyedException respondWithNotGrantor svc={}",
-              this.svc);
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "LockServiceDestroyedException respondWithNotGrantor svc={}", this.svc);
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-        logger.warn(LogMarker.DLS,
+        logger.warn(LogMarker.DLS_MARKER,
-      // catch (VirtualMachineError err) {
-      // SystemFailure.initiateFailure(err);
-      // // If this ever returns, rethrow the error. We're poisoned
-      // // now, so don't let this thread continue.
-      // throw err;
-      // }
-      // catch (Throwable t) {
-      // // Whenever you catch Error or Throwable, you must also
-      // // catch VirtualMachineError (see above). However, there is
-      // // _still_ a possibility that you are dealing with a cascading
-      // // error condition, so you also need to check to see if the JVM
-      // // is still usable:
-      // SystemFailure.checkFailure();
-      // respondWithException(t);
-      // }
-      finally {
-
-      }
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "Request {} timed out; grantor status = {}", this,
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "Request {} timed out; grantor status = {}", this,
-      // TODO: trim reply objectName down to just DLockBatchId for batches
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "While processing <{}>, got exception, returning to sender",
-                this, this.response.getException());
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "While processing <{}>, got exception, returning to sender", this,
+                this.response.getException());
-          logger.warn(LogMarker.DLS,
+          logger.warn(LogMarker.DLS_VERBOSE,
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS,
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
-            logger.warn(LogMarker.DLS,
+            logger.warn(LogMarker.DLS_MARKER,
-              logger.info(LogMarker.DLS,
+              logger.info(LogMarker.DLS_MARKER,

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS84 UPD40 MOV43 INS43 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL12 DEL8