Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import javax.xml.transform.*;
-//import javax.xml.transform.dom.*;
-//import javax.xml.transform.stream.*;
+// import javax.xml.transform.*;
+// import javax.xml.transform.dom.*;
+// import javax.xml.transform.stream.*;
- * This is an internal helper class for dealing with the
- * SessionFactory XML configuration files.
+ * This is an internal helper class for dealing with the SessionFactory XML configuration files.
-public class StatisticsTypeXml 
-  implements EntityResolver, ErrorHandler {
+public class StatisticsTypeXml implements EntityResolver, ErrorHandler {
-  static final String publicId = 
-    "-//GemStone Systems, Inc.//GemFire StatisticsType//EN";
+  static final String publicId = "-//GemStone Systems, Inc.//GemFire StatisticsType//EN";
-  /////////////////////  Interface methods  ///////////////////////
+  ///////////////////// Interface methods ///////////////////////
-   * Given a publicId, attempts to resolve it to a DTD.  Returns an
-   * <code>InputSource</code> for the DTD.
+   * Given a publicId, attempts to resolve it to a DTD. Returns an <code>InputSource</code> for the
+   * DTD.
-  public InputSource resolveEntity (String publicId, String systemId)
-    throws SAXException {
+  public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
-    // Figure out the location for the publicId.  Be tolerant of other
+    // Figure out the location for the publicId. Be tolerant of other
-    if(publicId.equals(StatisticsTypeXml.publicId) ||
-       systemId.equals(StatisticsTypeXml.systemId) ||
-       systemId.endsWith(DTD)) {
+    if (publicId.equals(StatisticsTypeXml.publicId) || systemId.equals(StatisticsTypeXml.systemId)
+        || systemId.endsWith(DTD)) {
-        throw new SAXNotRecognizedException(LocalizedStrings.StatisticsTypeXml_DTD_NOT_FOUND_0.toLocalizedString(location));
+        throw new SAXNotRecognizedException(
+            LocalizedStrings.StatisticsTypeXml_DTD_NOT_FOUND_0.toLocalizedString(location));
-      throw new SAXNotRecognizedException(LocalizedStrings.StatisticsTypeXml_INVALID_PUBLIC_ID_0.toLocalizedString(publicId)); 
+      throw new SAXNotRecognizedException(
+          LocalizedStrings.StatisticsTypeXml_INVALID_PUBLIC_ID_0.toLocalizedString(publicId));
-  public void warning(SAXParseException exception) throws SAXException
-  { 
-    // We don't want to thrown an exception.  We want to log it!!
+  public void warning(SAXParseException exception) throws SAXException {
+    // We don't want to thrown an exception. We want to log it!!
-//    String s = "SAX warning while working with XML";
+    // String s = "SAX warning while working with XML";
-  public void error(SAXParseException exception) throws SAXException
-  {
-    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_SAX_ERROR_WHILE_WORKING_WITH_XML.toLocalizedString(), exception);
-  }
-  
-  public void fatalError(SAXParseException exception) throws SAXException
-  {
-    throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_SAX_FATAL_ERROR_WHILE_WORKING_WITH_XML.toLocalizedString(), exception);
+  public void error(SAXParseException exception) throws SAXException {
+    throw new GemFireConfigException(
+        LocalizedStrings.StatisticsTypeXml_SAX_ERROR_WHILE_WORKING_WITH_XML.toLocalizedString(),
+        exception);
-  //////////////////////  Parsing XML File  ////////////////////////
+  public void fatalError(SAXParseException exception) throws SAXException {
+    throw new GemFireConfigException(
+        LocalizedStrings.StatisticsTypeXml_SAX_FATAL_ERROR_WHILE_WORKING_WITH_XML
+            .toLocalizedString(),
+        exception);
+  }
+
+  ////////////////////// Parsing XML File ////////////////////////
-   * Parses the contents of XML data and from it creates one or more
-   * <code>StatisticsType</code> instances.
+   * Parses the contents of XML data and from it creates one or more <code>StatisticsType</code>
+   * instances.
-  public StatisticsType[] read( Reader reader, StatisticsTypeFactory statFactory) {
-    DocumentBuilderFactory factory =
-      DocumentBuilderFactory.newInstance();
-//     factory.setValidating(validate);
+  public StatisticsType[] read(Reader reader, StatisticsTypeFactory statFactory) {
+    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+    // factory.setValidating(validate);
-      throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(), ex);
+      throw new GemFireConfigException(
+          LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(), ex);
-      throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(), se);
+      throw new GemFireConfigException(
+          LocalizedStrings.StatisticsTypeXml_FAILED_PARSING_XML.toLocalizedString(), se);
-      throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA.toLocalizedString(), io);
+      throw new GemFireConfigException(
+          LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA.toLocalizedString(), io);
-      throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_DOCUMENT.toLocalizedString());
+      throw new GemFireConfigException(
+          LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_DOCUMENT
+              .toLocalizedString());
-      throw new GemFireConfigException(LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_ROOT_ELEMENT.toLocalizedString());
+      throw new GemFireConfigException(
+          LocalizedStrings.StatisticsTypeXml_FAILED_READING_XML_DATA_NO_ROOT_ELEMENT
+              .toLocalizedString());
-    return (StatisticsType[])types.toArray(new StatisticsType[types.size()]);
+    return (StatisticsType[]) types.toArray(new StatisticsType[types.size()]);
+
-   * <!ELEMENT type (description?, (stat)+)>
-   * <!ATTLIST type  name CDATA #REQUIRED>
+   * <!ELEMENT type (description?, (stat)+)> <!ATTLIST type name CDATA #REQUIRED>
-      (StatisticDescriptor[])stats.toArray(new StatisticDescriptor[stats.size()]);
+        (StatisticDescriptor[]) stats.toArray(new StatisticDescriptor[stats.size()]);
+
+
-   * <!ELEMENT stat (description?, unit?)>
-   * <!ATTLIST stat
-   *   name CDATA #REQUIRED
-   *   counter (true | false) #IMPLIED
-   *   largerBetter (true | false) #IMPLIED
-   *   storage (int | long | double) #IMPLIED 
-   * >
+   * <!ELEMENT stat (description?, unit?)> <!ATTLIST stat name CDATA #REQUIRED counter (true |
+   * false) #IMPLIED largerBetter (true | false) #IMPLIED storage (int | long | double) #IMPLIED >
-    
-    if ( statNode.hasAttribute("counter")) {
+
+    if (statNode.hasAttribute("counter")) {
-      Assert.assertTrue(value.equalsIgnoreCase("true") ||
-                    value.equalsIgnoreCase("false"));
+      Assert.assertTrue(value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false"));
-    if ( statNode.hasAttribute("largerBetter")) {
+    if (statNode.hasAttribute("largerBetter")) {
-      Assert.assertTrue(value.equalsIgnoreCase("true") ||
-                    value.equalsIgnoreCase("false"));
+      Assert.assertTrue(value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false"));
-    if ( statNode.hasAttribute("storage")) {
+    if (statNode.hasAttribute("storage")) {
-      NodeList descriptionNodes =
-        statNode.getElementsByTagName("description");
+      NodeList descriptionNodes = statNode.getElementsByTagName("description");
-      NodeList unitNodes =
-        statNode.getElementsByTagName("unit");
+      NodeList unitNodes = statNode.getElementsByTagName("unit");
-      case INT_STORAGE: return statFactory.createIntCounter(statName, description, unit, largerBetter);
-      case LONG_STORAGE: return statFactory.createLongCounter(statName, description, unit, largerBetter);
-      case DOUBLE_STORAGE: return statFactory.createDoubleCounter(statName, description, unit, largerBetter);
-      default: throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0.toLocalizedString(Integer.valueOf(storage)));
+        case INT_STORAGE:
+          return statFactory.createIntCounter(statName, description, unit, largerBetter);
+        case LONG_STORAGE:
+          return statFactory.createLongCounter(statName, description, unit, largerBetter);
+        case DOUBLE_STORAGE:
+          return statFactory.createDoubleCounter(statName, description, unit, largerBetter);
+        default:
+          throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0
+              .toLocalizedString(Integer.valueOf(storage)));
-      case INT_STORAGE: return statFactory.createIntGauge(statName, description, unit, largerBetter);
-      case LONG_STORAGE: return statFactory.createLongGauge(statName, description, unit, largerBetter);
-      case DOUBLE_STORAGE: return statFactory.createDoubleGauge(statName, description, unit, largerBetter);
-      default: throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0.toLocalizedString(Integer.valueOf(storage)));
+        case INT_STORAGE:
+          return statFactory.createIntGauge(statName, description, unit, largerBetter);
+        case LONG_STORAGE:
+          return statFactory.createLongGauge(statName, description, unit, largerBetter);
+        case DOUBLE_STORAGE:
+          return statFactory.createDoubleGauge(statName, description, unit, largerBetter);
+        default:
+          throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0
+              .toLocalizedString(Integer.valueOf(storage)));
+
+
+
-    return((text == null ? "" : text.getData()));
+    return ((text == null ? "" : text.getData()));

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66