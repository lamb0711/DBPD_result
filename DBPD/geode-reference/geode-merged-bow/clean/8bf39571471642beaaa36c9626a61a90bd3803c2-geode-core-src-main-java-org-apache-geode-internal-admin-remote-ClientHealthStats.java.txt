Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * "numOfGets", IntCounter, "The total number of times a successful get has
-   * been done on this cache." Java: CachePerfStats.gets Native: Not yet Defined
+   * "numOfGets", IntCounter, "The total number of times a successful get has been done on this
+   * cache." Java: CachePerfStats.gets Native: Not yet Defined
-   * "numOfPuts", IntCounter, "The total number of times an entry is added or
-   * replaced in this cache as a result of a local operation (put(), create(),
-   * or get() which results in load, netsearch, or netloading a value). Note
-   * that this only counts puts done explicitly on this cache. It does not count
-   * updates pushed from other caches." Java: CachePerfStats.puts Native: Not
-   * yet Defined
+   * "numOfPuts", IntCounter, "The total number of times an entry is added or replaced in this cache
+   * as a result of a local operation (put(), create(), or get() which results in load, netsearch,
+   * or netloading a value). Note that this only counts puts done explicitly on this cache. It does
+   * not count updates pushed from other caches." Java: CachePerfStats.puts Native: Not yet Defined
-  
+
-   * Represents number of cache misses in this client. IntCounter, "Total number
-   * of times a get on the cache did not find a value already in local memory."
-   * Java: CachePerfStats.misses
+   * Represents number of cache misses in this client. IntCounter, "Total number of times a get on
+   * the cache did not find a value already in local memory." Java: CachePerfStats.misses
-  
+
-   * Represents number of cache listners calls completed. IntCounter, "Total
-   * number of times a cache listener call has completed."
-   * Java: CachePerfStats.cacheListenerCallsCompleted
+   * Represents number of cache listners calls completed. IntCounter, "Total number of times a cache
+   * listener call has completed." Java: CachePerfStats.cacheListenerCallsCompleted
-  
+
-   * Represents total number of active threads in the client VM. IntCounter,
-   * "Current number of live threads (both daemon and non-daemon) in this VM."
-   * Java: VMStats.threads
+   * Represents total number of active threads in the client VM. IntCounter, "Current number of live
+   * threads (both daemon and non-daemon) in this VM." Java: VMStats.threads
-      
+
-   * Represents the CPU time used by the process (in nanoseconds). LongCounter,
-   * "CPU timed used by the process in nanoseconds."
-   * Java: VMStats.processCpuTime   
+   * Represents the CPU time used by the process (in nanoseconds). LongCounter, "CPU timed used by
+   * the process in nanoseconds." Java: VMStats.processCpuTime
-  
+
-   * Represents the number of cpus available to the java VM on its machine. IntCounter,
-   * "Number of cpus available to the java VM on its machine."
-   * Java: VMStats.cpus   
+   * Represents the number of cpus available to the java VM on its machine. IntCounter, "Number of
+   * cpus available to the java VM on its machine." Java: VMStats.cpus
-  
-  
+
+
-  protected Date updateTime; 
- 
+  protected Date updateTime;
+
-  
-  /** The versions in which this message was modified */
-  private static final Version[] dsfidVersions = new Version[] { Version.GFE_80 };  
-  public ClientHealthStats() {
-  }
+  /** The versions in which this message was modified */
+  private static final Version[] dsfidVersions = new Version[] {Version.GFE_80};
+
+  public ClientHealthStats() {}
+   * 
+   * 
+   * 
+   * 
-  
+
-   * This method returns total number of cache misses in this client. 
+   * This method returns total number of cache misses in this client.
+   * 
+   * 
+   * 
-  
+
-   * @param numOfCacheListenerCalls total number of cache listener calls completed. 
+   * 
+   * @param numOfCacheListenerCalls total number of cache listener calls completed.
-  
+
+   * 
+   * 
+   * 
+   * 
-  
+
-  
+
-    DataSerializer.writeHashMap(( poolStats), out);
+    DataSerializer.writeHashMap((poolStats), out);
-  
-  public void toDataPre_GFE_8_0_0_0(DataOutput out) throws IOException{
+
+  public void toDataPre_GFE_8_0_0_0(DataOutput out) throws IOException {
-    this.updateTime = DataSerializer.readDate(in);        
-    this.poolStats = DataSerializer.readHashMap(in);    
+    this.updateTime = DataSerializer.readDate(in);
+    this.poolStats = DataSerializer.readHashMap(in);
-  
-  public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException{
+
+  public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException {
-    while(it.hasNext()){
+    while (it.hasNext()) {
-      tempBuffer.append(entry.getKey() + " = "+ entry.getValue());      
+      tempBuffer.append(entry.getKey() + " = " + entry.getValue());
-  
-  public HashMap<String, String> getPoolStats(){
+
+  public HashMap<String, String> getPoolStats() {
-  
+
-    this.poolStats = statsMap;    
-  } 
+    this.poolStats = statsMap;
+  }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66