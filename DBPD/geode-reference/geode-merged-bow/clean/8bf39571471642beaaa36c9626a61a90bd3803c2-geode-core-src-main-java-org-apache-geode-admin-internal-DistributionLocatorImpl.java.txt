Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-public class DistributionLocatorImpl
-    implements DistributionLocator, InternalManagedEntity {
+public class DistributionLocatorImpl implements DistributionLocator, InternalManagedEntity {
-  ////////////////////  Instance Fields  ////////////////////
+  //////////////////// Instance Fields ////////////////////
-  //   constructor(s)...
+  // constructor(s)...
-   * Constructs new instance of <code>DistributionLocatorImpl</code>
-   * that is a member of the given distributed system.
+   * Constructs new instance of <code>DistributionLocatorImpl</code> that is a member of the given
+   * distributed system.
-  //   Attribute accessors/mutators...
+  // Attribute accessors/mutators...
-   * Unfortunately, it doesn't make much sense to maintain the state
-   * of a locator.  The admin API does not receive notification when
-   * the locator actually starts and stops.  If we try to guess, we'll
-   * just end up with race conditions galore.  So, we can't fix bug
-   * 32455 for locators.
+   * Unfortunately, it doesn't make much sense to maintain the state of a locator. The admin API
+   * does not receive notification when the locator actually starts and stops. If we try to guess,
+   * we'll just end up with race conditions galore. So, we can't fix bug 32455 for locators.
-    throw new UnsupportedOperationException(LocalizedStrings.DistributionLocatorImpl_CAN_NOT_SET_THE_STATE_OF_A_LOCATOR.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributionLocatorImpl_CAN_NOT_SET_THE_STATE_OF_A_LOCATOR
+            .toLocalizedString());
-  //   Operations...
+  // Operations...
-   * Polls to determine whether or not this managed entity has
-   * started.
+   * Polls to determine whether or not this managed entity has started.
-  public boolean waitToStart(long timeout)
-      throws InterruptedException {
+  public boolean waitToStart(long timeout) throws InterruptedException {
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.DistributionLocatorImpl_DONE_WAITING_FOR_LOCATOR));
+    logger.info(
+        LocalizedMessage.create(LocalizedStrings.DistributionLocatorImpl_DONE_WAITING_FOR_LOCATOR));
-   * Polls to determine whether or not this managed entity has
-   * stopped.
+   * Polls to determine whether or not this managed entity has stopped.
-  public boolean waitToStop(long timeout)
-      throws InterruptedException {
+  public boolean waitToStop(long timeout) throws InterruptedException {
-    for (Iterator<InternalDistributedMember> memberIter = hostedLocators.keySet().iterator(); memberIter.hasNext(); ) {
-      for (Iterator<String> locatorIter = hostedLocators.get(memberIter.next()).iterator(); locatorIter.hasNext(); ) {
+    for (Iterator<InternalDistributedMember> memberIter =
+        hostedLocators.keySet().iterator(); memberIter.hasNext();) {
+      for (Iterator<String> locatorIter =
+          hostedLocators.get(memberIter.next()).iterator(); locatorIter.hasNext();) {
-  ////////////////////////  Command execution  ////////////////////////
+  //////////////////////// Command execution ////////////////////////
-    String sslArgs =
-        this.controller.buildSSLArguments(this.system.getConfig());
+    String sslArgs = this.controller.buildSSLArguments(this.system.getConfig());
-    String sslArgs =
-        this.controller.buildSSLArguments(this.system.getConfig());
+    String sslArgs = this.controller.buildSSLArguments(this.system.getConfig());

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66