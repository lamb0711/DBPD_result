GEODE-4110: extend LocatorServerStartupRule to start a client VM. (#1175)

* created a new ClientCacheRule to create a client cache in current VM.
* have lcoatorserverStartupRule to use that rule to start up a client VM.
+import static org.apache.geode.distributed.ConfigurationProperties.SECURITY_CLIENT_AUTH_INIT;
-import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Consumer;
-import java.util.stream.IntStream;
+import org.apache.geode.cache.client.ClientCache;
+import org.apache.geode.cache.client.ClientCacheFactory;
+import org.apache.geode.security.templates.UserPasswordAuthInit;
+import org.apache.geode.test.junit.rules.ClientCacheRule;
+import org.apache.geode.test.junit.rules.VMProvider;
+  public static ClientCacheRule clientCacheRule;
-  private ArrayList<MemberVM> members;
+  private Map<Integer, VMProvider> occupiedVMs;
+  public static ClientCache getClientCache() {
+    return clientCacheRule.getCache();
+  }
+
-    members = new ArrayList<>();
+    occupiedVMs = new HashMap<>();
-      IntStream.range(0, members.size()).forEach(this::stopVM);
+
+      // stop all the clientsVM before stop all the memberVM
+      occupiedVMs.values().stream().forEach(x -> x.stopVM(true));
-
-    return setMember(index, new MemberVM(locator, locatorVM, useTempWorkingDir()));
-  }
-
-  private MemberVM setMember(int index, MemberVM element) {
-    while (members.size() <= index) {
-      members.add(null);
-    }
-    members.set(index, element);
-    return members.get(index);
+    MemberVM memberVM = new MemberVM(locator, locatorVM, useTempWorkingDir());
+    occupiedVMs.put(index, memberVM);
+    return memberVM;
-    return setMember(index, new MemberVM(server, serverVM, useTempWorkingDir()));
-  }
-  public void startServerVMAsync(int index) {
-    startServerVMAsync(index, new Properties(), -1);
-  }
-
-  public void startServerVMAsync(int index, int locatorPort) {
-    startServerVMAsync(index, new Properties(), locatorPort);
-  }
-
-  public void startServerVMAsync(int index, Properties specifiedProperties, int locatorPort) {
-    assert members.get(index) != null;
-
-    Properties properties = new Properties();
-    properties.putAll(specifiedProperties);
-
-    String defaultName = "server-" + index;
-    properties.putIfAbsent(NAME, defaultName);
-    String name = properties.getProperty(NAME);
-
-    VM serverVM = getVM(index);
-    serverVM.invokeAsync(() -> {
-      memberStarter = new ServerStarterRule();
-      ServerStarterRule serverStarter = (ServerStarterRule) memberStarter;
-      if (useTempWorkingDir()) {
-        File workingDirFile = createWorkingDirForMember(name);
-        serverStarter.withWorkingDir(workingDirFile);
-      }
-      if (logFile) {
-        serverStarter.withLogFile();
-      }
-      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
-      serverStarter.before();
-    });
+    MemberVM memberVM = new MemberVM(server, serverVM, useTempWorkingDir());
+    occupiedVMs.put(index, memberVM);
+    return memberVM;
-  public MemberVM startServerAsJmxManager(int index, Properties properties, int locatorPort)
-      throws IOException {
-    properties.setProperty(JMX_MANAGER_PORT, AvailablePortHelper.getRandomAvailableTCPPort() + "");
-    return startServerVM(index, properties, locatorPort);
-  }
-
-    return setMember(index, new MemberVM(server, serverVM, useTempWorkingDir()));
+
+    MemberVM memberVM = new MemberVM(server, serverVM, useTempWorkingDir());
+    occupiedVMs.put(index, memberVM);
+    return memberVM;
-    MemberVM member = members.get(index);
-    // user has started a server/locator in this VM
-    if (member != null) {
-      member.stopMember(cleanWorkingDir);
+    VMProvider member = occupiedVMs.get(index);
+
+    if (member == null)
+      return;
+
+    member.stopVM(cleanWorkingDir);
+  }
+
+  public ClientVM startClientVM(int index, String username, String password,
+      boolean subscriptionEnabled, int... serverPorts) throws Exception {
+    Properties props = new Properties();
+    props.setProperty(UserPasswordAuthInit.USER_NAME, username);
+    props.setProperty(UserPasswordAuthInit.PASSWORD, password);
+    props.setProperty(SECURITY_CLIENT_AUTH_INIT, UserPasswordAuthInit.class.getName());
+
+    Consumer<ClientCacheFactory> consumer =
+        (Serializable & Consumer<ClientCacheFactory>) ((cacheFactory) -> {
+          cacheFactory.setPoolSubscriptionEnabled(subscriptionEnabled);
+          for (int serverPort : serverPorts) {
+            cacheFactory.addPoolServer("localhost", serverPort);
+          }
+        });
+    return startClientVM(index, props, consumer);
+  }
+
+  public ClientVM startClientVM(int index, Properties properties,
+      Consumer<ClientCacheFactory> cacheFactorySetup) throws Exception {
+    VM client = getVM(index);
+    Exception error = client.invoke(() -> {
+      clientCacheRule =
+          new ClientCacheRule().withProperties(properties).withCacheSetup(cacheFactorySetup);
+      try {
+        clientCacheRule.before();
+        return null;
+      } catch (Exception e) {
+        return e;
+      }
+    });
+    if (error != null) {
+      throw error;
-    // user may have used this VM as a client VM
-    else {
-      getVM(index).invoke(() -> MemberStarterRule.disconnectDSIfAny());
-    }
+    ClientVM clientVM = new ClientVM(client);
+    occupiedVMs.put(index, clientVM);
+    return clientVM;
-    return members.get(index);
+    return (MemberVM) occupiedVMs.get(index);
-  public static void stopMemberInThisVM() {
+  public static void stopElementInsideVM() {
+    if (clientCacheRule != null) {
+      clientCacheRule.after();
+      clientCacheRule = null;
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 UPD74 UPD83 INS83 INS43 INS42 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 INS43 UPD42 MOV44 INS44 INS44 INS43 INS8 MOV83 INS43 UPD42 MOV42 MOV44 MOV44 MOV44 UPD43 MOV43 INS8 UPD42 INS42 INS42 UPD43 UPD43 INS43 UPD42 UPD42 MOV42 INS60 INS21 INS41 INS60 INS21 INS41 INS60 INS21 INS41 INS60 INS25 MOV21 INS42 UPD43 UPD42 INS43 INS42 INS39 INS42 UPD42 INS42 MOV60 MOV21 MOV21 INS21 INS60 INS41 INS42 INS74 UPD42 UPD42 INS60 INS60 INS25 INS60 MOV21 INS41 INS25 UPD42 UPD42 INS42 MOV43 INS59 INS32 INS42 MOV43 INS59 INS32 INS42 MOV43 INS59 INS32 INS42 INS43 INS59 INS27 INS41 UPD42 INS42 INS32 INS74 INS59 INS32 INS43 INS43 INS43 INS59 INS43 INS59 MOV27 INS8 INS43 INS59 INS42 INS11 INS27 INS8 UPD42 UPD42 UPD42 INS42 INS42 MOV14 UPD42 MOV42 INS42 MOV42 INS42 INS42 MOV14 UPD42 MOV42 INS42 MOV42 INS42 INS42 MOV14 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS32 INS42 INS33 UPD42 UPD42 UPD42 UPD42 MOV14 UPD42 UPD42 INS40 UPD42 UPD42 UPD42 INS40 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS43 UPD42 MOV42 INS11 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 UPD42 INS53 INS42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS32 INS42 INS33 INS21 INS21 UPD74 INS42 INS42 INS42 INS57 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS87 INS36 UPD42 MOV42 INS42 INS86 INS42 INS43 INS42 UPD42 MOV42 MOV42 MOV42 INS32 INS7 UPD43 INS86 INS43 INS43 INS74 INS86 INS8 INS42 INS42 INS42 INS42 INS33 UPD42 INS32 UPD42 MOV42 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS59 INS8 INS21 INS54 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS9 INS42 UPD42 MOV42 INS42 MOV21 INS70 INS7 INS8 INS12 INS44 INS42 INS8 INS42 INS32 INS21 INS41 INS44 INS8 UPD42 UPD42 UPD42 INS39 INS42 MOV21 INS32 INS42 UPD42 MOV42 INS32 INS33 INS43 INS42 INS41 INS14 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 UPD42 INS43 INS42 DEL42 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL52 DEL42 DEL90 DEL32 DEL41 DEL32 DEL41 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL14 DEL34 DEL38 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL31 DEL32 DEL41 DEL39 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL6 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL43 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL32 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL8 DEL25 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL86 DEL32 DEL21 DEL8 DEL39 DEL32 DEL86 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL31 DEL32