Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  protected InternalDistributedSystem ids = InternalDistributedSystem
-      .getAnyInstance();
+  protected InternalDistributedSystem ids = InternalDistributedSystem.getAnyInstance();
-  
+
-  
-  protected ByteBuffer commBuffer ; 
-  
+
+  protected ByteBuffer commBuffer;
+
-  
+
-  public ServerToClientFunctionResultSender(ChunkedMessage msg,
-      int messageType, ServerConnection sc, Function function,
-      ExecuteFunctionOperationContext authzContext) {
+  public ServerToClientFunctionResultSender(ChunkedMessage msg, int messageType,
+      ServerConnection sc, Function function, ExecuteFunctionOperationContext authzContext) {
-    
-    if(this.isSelector){
-      this.commBuffer = msg.getCommBuffer();  
+
+    if (this.isSelector) {
+      this.commBuffer = msg.getCommBuffer();
-        logger.debug("ServerToClientFunctionResultSender not sending lastResult {} as the server has shutdown", oneResult);
+        logger.debug(
+            "ServerToClientFunctionResultSender not sending lastResult {} as the server has shutdown",
+            oneResult);
-    if(this.lastResultReceived){
+    if (this.lastResultReceived) {
-      
+
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-    } 
+    }
-  public synchronized void lastResult(Object oneResult,
-      DistributedMember memberID) {
+  public synchronized void lastResult(Object oneResult, DistributedMember memberID) {
-        logger.debug("ServerToClientFunctionResultSender not sending lastResult {} as the server has shutdown", oneResult);
+        logger.debug(
+            "ServerToClientFunctionResultSender not sending lastResult {} as the server has shutdown",
+            oneResult);
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-        logger.debug("ServerToClientFunctionResultSender not sending result {} as the server has shutdown", oneResult);
+        logger.debug(
+            "ServerToClientFunctionResultSender not sending result {} as the server has shutdown",
+            oneResult);
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-  public synchronized void sendResult(Object oneResult,
-      DistributedMember memberID) {
+  public synchronized void sendResult(Object oneResult, DistributedMember memberID) {
-        logger.debug("ServerToClientFunctionResultSender not sending result {} as the server has shutdown", oneResult);
+        logger.debug(
+            "ServerToClientFunctionResultSender not sending result {} as the server has shutdown",
+            oneResult);
-    }
-    catch (IOException ex) {
+    } catch (IOException ex) {
-                .toLocalizedString(), ex);
+                .toLocalizedString(),
+            ex);
-      this.authContext = authzRequestPP.executeFunctionAuthorize(oneResult,
-          this.authContext);
+      this.authContext = authzRequestPP.executeFunctionAuthorize(oneResult, this.authContext);
-  protected void writeFunctionExceptionResponse(ChunkedMessage message,
-      String errormessage, Throwable e) throws IOException {
+  protected void writeFunctionExceptionResponse(ChunkedMessage message, String errormessage,
+      Throwable e) throws IOException {
-      logger.debug("ServerToClientFunctionResultSender sending Function Error Response: {}", errormessage);
+      logger.debug("ServerToClientFunctionResultSender sending Function Error Response: {}",
+          errormessage);
-    InternalFunctionException iFunxtionException = new InternalFunctionException(
-        exception);
+    InternalFunctionException iFunxtionException = new InternalFunctionException(exception);
-  
+
-          String exceptionMessage = exception.getMessage() != null ? exception
-              .getMessage() : "Exception occured during function execution";
-          logger.warn(LocalizedMessage.create(LocalizedStrings.
-            ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, 
-            this.fn), exception);
+          String exceptionMessage = exception.getMessage() != null ? exception.getMessage()
+              : "Exception occured during function execution";
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.ExecuteRegionFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+              this.fn), exception);
-        }
-        catch (IOException ignoreAsSocketIsClosed) {
+        } catch (IOException ignoreAsSocketIsClosed) {
-        && !sc.getCachedRegionHelper().getCache().isClosed() && !alreadySendException
-        .get());
+        && !sc.getCachedRegionHelper().getCache().isClosed() && !alreadySendException.get());

