Merge remote-tracking branch 'origin/develop' into wan_cq_donation

+import java.lang.reflect.Array;
- Object evalColln = null;
+    Object evalColln = null;
-    if (evalColln instanceof Object[]) {
-      Object[] a = (Object[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        if (TypeUtils.compare(evalElm, a[i], TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
+    if (evalColln.getClass().getComponentType().isPrimitive()) {
+      if (evalElm == null) {
+        throw new TypeMismatchException(LocalizedStrings.CompiledIn_IN_OPERATOR_CHECK_FOR_NULL_IN_PRIMITIVE_ARRAY.toLocalizedString());
-      return Boolean.FALSE;
-    }
-
-    // at this point if evalElm is NULL, then it's a type mismatch
-    if (evalElm == null) {
-      throw new TypeMismatchException(LocalizedStrings.CompiledIn_IN_OPERATOR_CHECK_FOR_NULL_IN_PRIMITIVE_ARRAY.toLocalizedString());
-    }
-
-    // handle each type of primitive array
-    if (evalColln instanceof long[]) {
-      long[] a = (long[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = Long.valueOf(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    if (evalColln instanceof double[]) {
-      double[] a = (double[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = Double.valueOf(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-    
-    if (evalColln instanceof float[]) {
-      float[] a = (float[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = new Float(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-    
-    if (evalColln instanceof int[]) {
-      int[] a = (int[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = Integer.valueOf(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-    
-    if (evalColln instanceof short[]) {
-      short[] a = (short[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = new Short(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-    
-    if (evalColln instanceof char[]) {
-      char[] a = (char[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = new Character(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-    
-    if (evalColln instanceof byte[]) {
-      byte[] a = (byte[])evalColln;
-      for (int i = 0; i < a.length; i++) {
-        Object e = Byte.valueOf(a[i]);
-        if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
-          return Boolean.TRUE;
-        }
-      }
-      return Boolean.FALSE;
-    }
-
-    // must be a boolean[]
-    boolean[] a = (boolean[]) evalColln;
-    for (int i = 0; i < a.length; i++) {
-      Object e = Boolean.valueOf(a[i]);
-      if (TypeUtils.compare(evalElm, e, TOK_EQ).equals(Boolean.TRUE)) {
+    int numElements = Array.getLength(evalColln);
+    for (int i = 0; i < numElements; i++) {
+      Object o = Array.get(evalColln, i);
+      if (TypeUtils.compare(evalElm, o, TOK_EQ).equals(Boolean.TRUE)) {
+   

INS26 INS40 MOV25 INS60 MOV24 INS39 MOV59 MOV58 MOV37 UPD42 MOV25 UPD42 INS42 INS32 UPD42 UPD42 UPD42 INS42 MOV43 MOV8 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 DEL42 DEL42 DEL40 DEL40 DEL41 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL40 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL2 DEL40 DEL41 DEL8 DEL42 DEL42 DEL43 DEL85 DEL5 DEL62 DEL42 DEL43 DEL85 DEL5 DEL42 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL40 DEL32 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL42 DEL39 DEL85 DEL5 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24 DEL40 DEL41 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL41 DEL8 DEL25 DEL8 DEL24