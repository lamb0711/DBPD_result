GEODE-6918: Cleanup ServerLauncher

* Remove unnecessary uses of this
* Replace \n with System.lineSeperator()
* Remove unnecessary qualifications
* Fix misc IDE warnings
* Remove commented out code
* Minor formatting changes

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>

+import static java.lang.System.lineSeparator;
+import static org.apache.geode.internal.process.ProcessLauncherContext.OVERRIDDEN_DEFAULTS_PREFIX;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.control.ResourceManager;
- * @see org.apache.geode.distributed.AbstractLauncher
- * @see org.apache.geode.distributed.LocatorLauncher
+ * @see AbstractLauncher
+ * @see LocatorLauncher
-@SuppressWarnings({"unused"})
+@SuppressWarnings("unused")
-   * @see org.apache.geode.distributed.ServerLauncher.Builder
+   * @see ServerLauncher.Builder
-    this.cache = builder.getCache(); // testing
-    this.cacheConfig = builder.getCacheConfig();
-    this.command = builder.getCommand();
-    this.assignBuckets = Boolean.TRUE.equals(builder.getAssignBuckets());
+    cache = builder.getCache();
+    cacheConfig = builder.getCacheConfig();
+    command = builder.getCommand();
+    assignBuckets = Boolean.TRUE.equals(builder.getAssignBuckets());
-    this.deletePidFileOnStop = Boolean.TRUE.equals(builder.getDeletePidFileOnStop());
-    this.disableDefaultServer = Boolean.TRUE.equals(builder.getDisableDefaultServer());
-    this.distributedSystemProperties = builder.getDistributedSystemProperties();
-    this.force = Boolean.TRUE.equals(builder.getForce());
-    this.help = Boolean.TRUE.equals(builder.getHelp());
-    this.hostNameForClients = builder.getHostNameForClients();
-    this.memberName = builder.getMemberName();
-    this.pid = builder.getPid();
-    this.rebalance = Boolean.TRUE.equals(builder.getRebalance());
-    this.redirectOutput = Boolean.TRUE.equals(builder.getRedirectOutput());
-    this.serverBindAddress = builder.getServerBindAddress();
-    this.serverPort = builder.getServerPort();
-    this.springXmlLocation = builder.getSpringXmlLocation();
-    this.workingDirectory = builder.getWorkingDirectory();
-    this.criticalHeapPercentage = builder.getCriticalHeapPercentage();
-    this.evictionHeapPercentage = builder.getEvictionHeapPercentage();
-    this.criticalOffHeapPercentage = builder.getCriticalOffHeapPercentage();
-    this.evictionOffHeapPercentage = builder.getEvictionOffHeapPercentage();
-    this.maxConnections = builder.getMaxConnections();
-    this.maxMessageCount = builder.getMaxMessageCount();
-    this.maxThreads = builder.getMaxThreads();
-    this.messageTimeToLive = builder.getMessageTimeToLive();
-    this.socketBufferSize = builder.getSocketBufferSize();
-    this.controllerParameters = new ServerControllerParameters();
-    this.controlHandler = new ControlNotificationHandler() {
+    deletePidFileOnStop = Boolean.TRUE.equals(builder.getDeletePidFileOnStop());
+    disableDefaultServer = Boolean.TRUE.equals(builder.getDisableDefaultServer());
+    distributedSystemProperties = builder.getDistributedSystemProperties();
+    force = Boolean.TRUE.equals(builder.getForce());
+    help = Boolean.TRUE.equals(builder.getHelp());
+    hostNameForClients = builder.getHostNameForClients();
+    memberName = builder.getMemberName();
+    pid = builder.getPid();
+    rebalance = Boolean.TRUE.equals(builder.getRebalance());
+    redirectOutput = Boolean.TRUE.equals(builder.getRedirectOutput());
+    serverBindAddress = builder.getServerBindAddress();
+    serverPort = builder.getServerPort();
+    springXmlLocation = builder.getSpringXmlLocation();
+    workingDirectory = builder.getWorkingDirectory();
+    criticalHeapPercentage = builder.getCriticalHeapPercentage();
+    evictionHeapPercentage = builder.getEvictionHeapPercentage();
+    criticalOffHeapPercentage = builder.getCriticalOffHeapPercentage();
+    evictionOffHeapPercentage = builder.getEvictionOffHeapPercentage();
+    maxConnections = builder.getMaxConnections();
+    maxMessageCount = builder.getMaxMessageCount();
+    maxThreads = builder.getMaxThreads();
+    messageTimeToLive = builder.getMessageTimeToLive();
+    socketBufferSize = builder.getSocketBufferSize();
+    controllerParameters = new ServerControllerParameters();
+    controlHandler = new ControlNotificationHandler() {
-        (builder.isServerPortSetByUser() && this.serverPort != null) ? this.serverPort : null;
+        builder.isServerPortSetByUser() && this.serverPort != null ? this.serverPort : null;
-        (builder.isServerBindAddressSetByUser() && this.serverBindAddress != null)
+        builder.isServerBindAddressSetByUser() && this.serverBindAddress != null
-        .withMaxThreads(this.maxThreads)
+        .withMaxThreads(maxThreads)
-        .withMaxConnections(this.maxConnections)
-        .withMaxMessageCount(this.maxMessageCount)
-        .withSocketBufferSize(this.socketBufferSize)
-        .withMessageTimeToLive(this.messageTimeToLive)
-        .withHostnameForClients(this.hostNameForClients)
-        .withDisableDefaultServer(this.disableDefaultServer);
+        .withMaxConnections(maxConnections)
+        .withMaxMessageCount(maxMessageCount)
+        .withSocketBufferSize(socketBufferSize)
+        .withMessageTimeToLive(messageTimeToLive)
+        .withHostnameForClients(hostNameForClients)
+        .withDisableDefaultServer(disableDefaultServer);
-    copy.setDeclarativeConfig(this.cacheConfig);
+    copy.setDeclarativeConfig(cacheConfig);
-   * @see org.apache.geode.distributed.ServerLauncher.Command
+   * @see ServerLauncher.Command
-    return this.command;
+    return command;
-    return this.assignBuckets;
+    return assignBuckets;
-    return this.disableDefaultServer;
+    return disableDefaultServer;
-    return this.force;
+    return force;
-   * @see org.apache.geode.distributed.ServerLauncher.Command
+   * @see ServerLauncher.Command
-    return this.help;
+    return help;
-    return this.rebalance;
+    return rebalance;
-    return this.redirectOutput;
+    return redirectOutput;
-    return defaultIfBlank(this.memberName, super.getMemberName());
+    return defaultIfBlank(memberName, super.getMemberName());
-    return this.pid;
+    return pid;
-   * @see java.util.Properties
+   * @see Properties
-    return (Properties) this.distributedSystemProperties.clone();
+    return (Properties) distributedSystemProperties.clone();
-    return this.serverBindAddress;
+    return serverBindAddress;
-   * @see java.net.InetAddress
+   * @see InetAddress
-    return this.serverPort;
+    return serverPort;
-   * @see org.apache.geode.distributed.ServerLauncher.Builder#getSpringXmlLocation()
+   * @see ServerLauncher.Builder#getSpringXmlLocation()
-    return this.springXmlLocation;
+    return springXmlLocation;
-    return isNotBlank(this.springXmlLocation);
+    return isNotBlank(springXmlLocation);
-    return this.workingDirectory;
+    return workingDirectory;
-    return this.criticalHeapPercentage;
+    return criticalHeapPercentage;
-    return this.evictionHeapPercentage;
+    return evictionHeapPercentage;
-    return this.criticalOffHeapPercentage;
+    return criticalOffHeapPercentage;
-    return this.evictionOffHeapPercentage;
+    return evictionOffHeapPercentage;
-    return this.hostNameForClients;
+    return hostNameForClients;
-    return this.maxConnections;
+    return maxConnections;
-    return this.maxMessageCount;
+    return maxMessageCount;
-    return this.messageTimeToLive;
+    return messageTimeToLive;
-    return this.maxThreads;
+    return maxThreads;
-    return this.socketBufferSize;
+    return socketBufferSize;
+  private static final String TWO_NEW_LINES = lineSeparator() + lineSeparator();
+
-      info("\n\nusage: \n\n");
+      info(TWO_NEW_LINES + "usage: " + TWO_NEW_LINES);
-      info("\n\noptions: \n\n");
+      info(TWO_NEW_LINES + "options: " + TWO_NEW_LINES);
-        info(wrap("--" + option + ": " + helpMap.get(option) + '\n', 80, "\t"));
+        info(wrap("--" + option + ": " + helpMap.get(option) + lineSeparator(), 80, "\t"));
-      info("\n\n");
+      info(TWO_NEW_LINES);
-   * @see #help(org.apache.geode.distributed.ServerLauncher.Command)
+   * @see #help(ServerLauncher.Command)
-    info("\n\nSTART\n\n");
+    info(TWO_NEW_LINES + "START" + TWO_NEW_LINES);
-    info("STATUS\n\n");
+    info("STATUS" + TWO_NEW_LINES);
-    info("STOP\n\n");
+    info("STOP" + TWO_NEW_LINES);
-   * @see java.lang.Runnable
+   * @see Runnable
-    return !isRunning() && this.starting.compareAndSet(false, true);
+    return !isRunning() && starting.compareAndSet(false, true);
-        process = new ControllableProcess(this.controlHandler, new File(getWorkingDirectory()),
+        process = new ControllableProcess(controlHandler, new File(getWorkingDirectory()),
-              ServerLauncher.this.statusMessage = statusMessage;
+              this.statusMessage = statusMessage;
-          this.cache = createCache(gemfireProperties);
+          cache = createCache(gemfireProperties);
-          if (this.criticalHeapPercentage != null) {
-            this.cache.getResourceManager().setCriticalHeapPercentage(getCriticalHeapPercentage());
+          if (criticalHeapPercentage != null) {
+            cache.getResourceManager().setCriticalHeapPercentage(getCriticalHeapPercentage());
-          if (this.evictionHeapPercentage != null) {
-            this.cache.getResourceManager().setEvictionHeapPercentage(getEvictionHeapPercentage());
+          if (evictionHeapPercentage != null) {
+            cache.getResourceManager().setEvictionHeapPercentage(getEvictionHeapPercentage());
-          if (this.criticalOffHeapPercentage != null) {
-            this.cache.getResourceManager()
+          if (criticalOffHeapPercentage != null) {
+            cache.getResourceManager()
-          if (this.evictionOffHeapPercentage != null) {
-            this.cache.getResourceManager()
+          if (evictionOffHeapPercentage != null) {
+            cache.getResourceManager()
-          this.cache.setIsServer(true);
-          startCacheServer(this.cache);
-          assignBuckets(this.cache);
-          rebalance(this.cache);
+          cache.setIsServer(true);
+          startCacheServer(cache);
+          assignBuckets(cache);
+          rebalance(cache);
-        this.running.set(true);
+        running.set(true);
-        this.starting.set(false);
+        starting.set(false);
-    } else {
-      throw new IllegalStateException(
-          String.format("A %s is already running in %s on %s.",
-              getServiceName(), getWorkingDirectory(), getId()));
+
+    throw new IllegalStateException(
+        String.format("A %s is already running in %s on %s.",
+            getServiceName(), getWorkingDirectory(), getId()));
-    if (this.cache != null) {
-      this.cache.close();
-      this.cache = null;
+    if (cache != null) {
+      cache.close();
+      cache = null;
-    if (this.process != null) {
-      this.process.stop(this.deletePidFileOnStop);
-      this.process = null;
+    if (process != null) {
+      process.stop(deletePidFileOnStop);
+      process = null;
-    this.running.set(false);
+    running.set(false);
-    // return (isRunning() && !getCache().isClosed());
-   * @see org.apache.geode.cache.control.ResourceManager#createRebalanceFactory()
+   * @see ResourceManager#createRebalanceFactory()
-   * @see PartitionRegionHelper#assignBucketsToPartitions(org.apache.geode.cache.Region)
+   * @see PartitionRegionHelper#assignBucketsToPartitions(Region)
-    return this.starting.get() || isRunning();
+    return starting.get() || isRunning();
-    } else if (isPidInProcess() && launcher != null) {
+    }
+    if (isPidInProcess() && launcher != null) {
-    } else if (getPid() != null) {
+    }
+    if (getPid() != null) {
-    else if (getWorkingDirectory() != null) {
+    if (getWorkingDirectory() != null) {
-    } else {
-      return new ServerState(this, Status.NOT_RESPONDING);
+    return new ServerState(this, Status.NOT_RESPONDING);
-          .createProcessController(this.controllerParameters, getPid());
+          .createProcessController(controllerParameters, getPid());
-          new ProcessControllerFactory().createProcessController(this.controllerParameters,
+          new ProcessControllerFactory().createProcessController(controllerParameters,
-    else if (isPidInProcess() && launcher != null) {
+    if (isPidInProcess() && launcher != null) {
-    else if (getPid() != null) {
+    if (getPid() != null) {
-    else if (getWorkingDirectory() != null) {
+    if (getWorkingDirectory() != null) {
-      if (this.cache.isReconnecting()) {
-        this.cache.getDistributedSystem().stopReconnecting();
+      if (cache.isReconnecting()) {
+        cache.getDistributedSystem().stopReconnecting();
-      } catch (InterruptedException e) {
+      } catch (InterruptedException ignore) {
-      INSTANCE.compareAndSet(this, null); // note: other thread may return Status.NOT_RESPONDING now
-      this.running.set(false);
+      // note: other thread may return Status.NOT_RESPONDING now
+      INSTANCE.compareAndSet(this, null);
+      running.set(false);
-    } else {
-      return new ServerState(this, Status.NOT_RESPONDING);
+    return new ServerState(this, Status.NOT_RESPONDING);
-          .createProcessController(this.controllerParameters, getPid());
+          .createProcessController(controllerParameters, getPid());
-          new ProcessControllerFactory().createProcessController(this.controllerParameters,
+          new ProcessControllerFactory().createProcessController(controllerParameters,
-    overriddenDefaults.put(ProcessLauncherContext.OVERRIDDEN_DEFAULTS_PREFIX.concat(LOG_FILE),
+    overriddenDefaults.setProperty(OVERRIDDEN_DEFAULTS_PREFIX.concat(LOG_FILE),
-      if (key.startsWith(ProcessLauncherContext.OVERRIDDEN_DEFAULTS_PREFIX)) {
-        overriddenDefaults.put(key, System.getProperty(key));
+      if (key.startsWith(OVERRIDDEN_DEFAULTS_PREFIX)) {
+        overriddenDefaults.setProperty(key, System.getProperty(key));
-      return new File(ServerLauncher.this.getWorkingDirectory());
+      return new File(getWorkingDirectory());
-    public Builder() {}
+    public Builder() {
+      // nothing
+    }
-     * @see org.apache.geode.distributed.ServerLauncher.Command#valueOfName(String)
+     * @see ServerLauncher.Command#valueOfName(String)
-     * @see org.apache.geode.distributed.ServerLauncher.Command#isCommand(String)
+     * @see ServerLauncher.Command#isCommand(String)
-      return this.cacheConfig;
+      return cacheConfig;
-     * @see #setCommand(org.apache.geode.distributed.ServerLauncher.Command)
-     * @see org.apache.geode.distributed.ServerLauncher.Command
+     * @see #setCommand(ServerLauncher.Command)
+     * @see ServerLauncher.Command
-      return this.command != null ? this.command : DEFAULT_COMMAND;
+      return command != null ? command : DEFAULT_COMMAND;
-     * @see org.apache.geode.distributed.ServerLauncher.Command
+     * @see ServerLauncher.Command
-      return this.assignBuckets;
+      return assignBuckets;
-    // For testing purposes only!
+    @VisibleForTesting
-      return this.cache;
+      return cache;
-    // For testing purposes only!
+    @VisibleForTesting
-      return this.debug;
+      return debug;
-      return this.deletePidFileOnStop;
+      return deletePidFileOnStop;
-      return this.disableDefaultServer;
+      return disableDefaultServer;
-     * @see java.util.Properties
+     * @see Properties
-      return this.distributedSystemProperties;
+      return distributedSystemProperties;
-      return this.force != null ? this.force : DEFAULT_FORCE;
+      return force != null ? force : DEFAULT_FORCE;
-      return this.help;
+      return help;
-      return this.rebalance;
+      return rebalance;
-      return this.memberName;
+      return memberName;
-        throw new IllegalArgumentException(
-            String.format("The %s member name must be specified.",
-                "Server"));
+        throw new IllegalArgumentException("The Server member name must be specified.");
-      return this.pid;
+      return pid;
-      return this.redirectOutput;
+      return redirectOutput;
-      return this.serverBindAddress;
+      return serverBindAddress;
-      return this.serverBindAddressSetByUser;
+      return serverBindAddressSetByUser;
+
-      else {
-        try {
-          InetAddress bindAddress = InetAddress.getByName(serverBindAddress);
-          if (SocketCreator.isLocalHost(bindAddress)) {
-            this.serverBindAddress = bindAddress;
-            this.serverBindAddressSetByUser = true;
-            return this;
-          } else {
-            throw new IllegalArgumentException(
-                serverBindAddress + " is not an address for this machine.");
-          }
-        } catch (UnknownHostException e) {
-          throw new IllegalArgumentException(
-              String.format("The hostname/IP address to which the %s will be bound is unknown.",
-                  "Server"),
-              e);
+      try {
+        InetAddress bindAddress = InetAddress.getByName(serverBindAddress);
+        if (SocketCreator.isLocalHost(bindAddress)) {
+          this.serverBindAddress = bindAddress;
+          serverBindAddressSetByUser = true;
+          return this;
+
+        throw new IllegalArgumentException(
+            serverBindAddress + " is not an address for this machine.");
+      } catch (UnknownHostException e) {
+        throw new IllegalArgumentException(
+            String.format("The hostname/IP address to which the %s will be bound is unknown.",
+                "Server"),
+            e);
-      return this.serverPort != null ? this.serverPort : getDefaultServerPort();
+      return serverPort != null ? serverPort : getDefaultServerPort();
-      return this.serverPortSetByUser;
+      return serverPortSetByUser;
-        this.serverPortSetByUser = false;
+        serverPortSetByUser = false;
-      if ((serverPort < 0 || serverPort > 65535)) {
+      if (serverPort < 0 || serverPort > 65535) {
-            String.format(
-                "The port on which the %s will listen must be between 1 and 65535 inclusive.",
-                "Server"));
+            "The port on which the Server will listen must be between 1 and 65535 inclusive.");
-        this.serverPortSetByUser = false;
+        serverPortSetByUser = false;
-        this.serverPortSetByUser = true;
+        serverPortSetByUser = true;
-      return this.springXmlLocation;
+      return springXmlLocation;
-          new File(defaultIfBlank(this.workingDirectory, DEFAULT_WORKING_DIRECTORY)));
+          new File(defaultIfBlank(workingDirectory, DEFAULT_WORKING_DIRECTORY)));
-     * @see java.io.FileNotFoundException
+     * @see FileNotFoundException
-      return this.criticalHeapPercentage;
+      return criticalHeapPercentage;
-      return this.criticalOffHeapPercentage;
+      return criticalOffHeapPercentage;
-      return this.evictionHeapPercentage;
+      return evictionHeapPercentage;
-      return this.evictionOffHeapPercentage;
+      return evictionOffHeapPercentage;
-      return this.hostNameForClients;
+      return hostNameForClients;
-      return this.maxConnections;
+      return maxConnections;
-      return this.maxMessageCount;
+      return maxMessageCount;
-      return this.maxThreads;
+      return maxThreads;
-      return this.messageTimeToLive;
+      return messageTimeToLive;
-      return this.socketBufferSize;
+      return socketBufferSize;
-      this.distributedSystemProperties.setProperty(propertyName, propertyValue);
+      distributedSystemProperties.setProperty(propertyName, propertyValue);
-      this.cacheConfig.setPdxPersistent(persistent);
+      cacheConfig.setPdxPersistent(persistent);
-      this.cacheConfig.setPdxDiskStore(pdxDiskStore);
+      cacheConfig.setPdxDiskStore(pdxDiskStore);
-      this.cacheConfig.setPdxIgnoreUnreadFields(ignore);
+      cacheConfig.setPdxIgnoreUnreadFields(ignore);
-      this.cacheConfig.setPdxReadSerialized(readSerialized);
+      cacheConfig.setPdxReadSerialized(readSerialized);
-      this.cacheConfig.setPdxSerializer(pdxSerializer);
+      cacheConfig.setPdxSerializer(pdxSerializer);
-     * @see org.apache.geode.distributed.ServerLauncher.Command#START
+     * @see ServerLauncher.Command#START
-     * @see org.apache.geode.distributed.ServerLauncher.Command#STATUS
+     * @see ServerLauncher.Command#STATUS
-     * @see org.apache.geode.distributed.ServerLauncher.Command#STOP
+     * @see ServerLauncher.Command#STOP
-     * @see org.apache.geode.distributed.ServerLauncher
+     * @see ServerLauncher
-      return this.name;
+      return name;
-      return this.options;
+      return options;
-   * @see org.apache.geode.distributed.AbstractLauncher.ServiceState
+   * @see AbstractLauncher.ServiceState
-      this(status, launcher.statusMessage, System.currentTimeMillis(), launcher.getId(),
-          identifyPid(), ManagementFactory.getRuntimeMXBean().getUptime(),
-          launcher.getWorkingDirectory(), ManagementFactory.getRuntimeMXBean().getInputArguments(),
-          System.getProperty("java.class.path"), GemFireVersion.getGemFireVersion(),
-          System.getProperty("java.version"), getServerLogFileCanonicalPath(launcher),
-          getServerBindAddressAsString(launcher), getServerPortAsString(launcher),
+      this(status,
+          launcher.statusMessage,
+          System.currentTimeMillis(),
+          launcher.getId(),
+          identifyPid(),
+          ManagementFactory.getRuntimeMXBean().getUptime(),
+          launcher.getWorkingDirectory(),
+          ManagementFactory.getRuntimeMXBean().getInputArguments(),
+          System.getProperty("java.class.path"),
+          GemFireVersion.getGemFireVersion(),
+          System.getProperty("java.version"),
+          getServerLogFileCanonicalPath(launcher),
+          getServerBindAddressAsString(launcher),
+          getServerPortAsString(launcher),
-      this(status, // status
-          errorMessage, // statusMessage
-          System.currentTimeMillis(), // timestamp
-          getServerLocation(launcher), // serverLocation
-          null, // pid
-          0L, // uptime
-          launcher.getWorkingDirectory(), // workingDirectory
-          ManagementFactory.getRuntimeMXBean().getInputArguments(), // jvmArguments
-          null, // classpath
-          GemFireVersion.getGemFireVersion(), // gemfireVersion
-          System.getProperty("java.version"), // javaVersion
-          null, // logFile
-          getServerBindAddressAsString(launcher), // host
-          launcher.getServerPortAsString(), // port
-          null);// memberName
+      this(status,
+          errorMessage,
+          System.currentTimeMillis(),
+          getServerLocation(launcher),
+          null,
+          0L,
+          launcher.getWorkingDirectory(),
+          ManagementFactory.getRuntimeMXBean().getInputArguments(),
+          null,
+          GemFireVersion.getGemFireVersion(),
+          System.getProperty("java.version"),
+          null,
+          getServerBindAddressAsString(launcher),
+          launcher.getServerPortAsString(),
+          null);
-    @SuppressWarnings("unchecked")
-    @SuppressWarnings("unchecked")

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS45 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS27 MOV53 INS25 INS25 MOV25 MOV25 MOV41 MOV25 MOV25 MOV25 MOV41 INS78 INS78 MOV8 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD40 UPD40 INS42 INS42 INS42 INS42 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 MOV32 MOV8 MOV27 MOV8 MOV32 MOV8 INS65 MOV65 INS42 INS42 INS25 MOV41 MOV41 MOV41 MOV41 MOV41 MOV41 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 INS42 INS42 INS42 INS27 INS27 INS27 INS42 INS42 INS42 INS42 UPD42 INS68 INS42 UPD40 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV8 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 MOV27 INS42 INS42 UPD43 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 UPD43 INS42 MOV43 MOV43 MOV43 MOV43 INS42 INS40 INS42 MOV69 UPD40 UPD42 INS42 INS42 MOV53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD40 UPD40 INS42 INS27 INS27 INS42 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 MOV14 INS42 MOV14 INS42 UPD42 MOV14 INS42 MOV14 INS42 UPD40 MOV43 INS45 INS42 MOV43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL45 DEL4 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL36 DEL36 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL45 DEL45 DEL13 DEL45 DEL45 DEL45 DEL45 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL40 DEL52 DEL42 DEL22 DEL25 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL40 DEL42 DEL52 DEL40 DEL42 DEL68 DEL65 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL45 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL36 DEL42 DEL42 DEL45 DEL45 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79