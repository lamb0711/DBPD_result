GEODE-2673: overhaul PartitionedRegion dunit tests (#1486)

* Delete PartitionedRegionDUnitTestCase
* Overhaul every dunit test that extended PartitionedRegionDUnitTestCase
* Fix flakiness in several dunit tests
* Document and update test methods that were named after old TRAC bugs
* Extract regression test methods to new dedicated test classes
* Extract unrelated test methods to new dedicated test classes
* Extract inner classes that are used by multiple test classes
* Change PRIdMap prIdToPR in PartitionedRegion to be private and change tests to use an accessor to reference it
* Change localBucket2RegionMap in PartitionedRegionDataStore to be private and change tests to use an accessor to reference it
* Move "Set getSomeKeys(Random rnd)" from PartitionedRegion product code to PartitionedRegionGetSomeKeys in test code
* Make IgnoredException AutoCloseable so you can use it within try-resource blocks
* Add "IgnoredException addIgnoredException(final Class exceptionClass)" to IgnoredException

-  static final PRIdMap prIdToPR = new PRIdMap();
+  private static final PRIdMap prIdToPR = new PRIdMap();
+  static PRIdMap getPrIdToPR() {
+    return prIdToPR;
+  }
+
-   * Test Method: Get a random set of keys from a randomly selected bucket using the provided
-   * {@code Random} number generator.
-   *
-   * @return A set of keys from a randomly chosen bucket or {@link Collections#EMPTY_SET}
-   */
-  public Set getSomeKeys(Random rnd) throws IOException, ClassNotFoundException {
-    InternalDistributedMember nod = null;
-    Integer buck = null;
-    Set buks = getRegionAdvisor().getBucketSet();
-
-    if (buks != null && !buks.isEmpty()) {
-      Object[] buksA = buks.toArray();
-      Set ret = null;
-      // Randomly pick a node to get some data from
-      for (int i = 0; i < buksA.length; i++) {
-        try {
-          logger.debug("getSomeKeys: iteration: {}", i);
-          int ind = rnd.nextInt(buksA.length);
-          if (ind >= buksA.length) {
-            // The GSRandom.nextInt(int) may return a value that includes the
-            // maximum.
-            ind = buksA.length - 1;
-          }
-          buck = (Integer) buksA[ind];
-
-          nod = getNodeForBucketRead(buck);
-          if (nod != null) {
-            logger.debug("getSomeKeys: iteration: {} for node {}", i, nod);
-            if (nod.equals(getMyId())) {
-              ret =
-                  dataStore.handleRemoteGetKeys(buck, InterestType.REGULAR_EXPRESSION, ".*", false);
-            } else {
-              FetchKeysResponse r = FetchKeysMessage.send(nod, this, buck, false);
-              ret = r.waitForKeys();
-            }
-
-            if (ret != null && !ret.isEmpty()) {
-              return ret;
-            }
-          }
-        } catch (ForceReattemptException movinOn) {
-          checkReadiness();
-          logger.debug(
-              "Test hook getSomeKeys caught a ForceReattemptException for bucketId={}{}{}. Moving on to another bucket",
-              getPRId(), BUCKET_ID_SEPARATOR, buck, movinOn);
-          continue;
-        } catch (PRLocallyDestroyedException ignore) {
-          logger.debug("getSomeKeys: Encountered PRLocallyDestroyedException");
-          checkReadiness();
-          continue;
-        }
-
-      } // nod != null
-    } // for
-    logger.debug("getSomeKeys: no keys found returning empty set");
-    return Collections.emptySet();
-  }
-
-  /**

MOV31 INS83 UPD83 UPD43 INS42 INS8 UPD42 MOV41 UPD42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL67 DEL65 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL34 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL45 DEL9 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL18 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8