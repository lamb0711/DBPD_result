Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A refinement of ObjectPartList that adds per-entry versionTags and
- * has its own serialized form to allow key lists when there are no object components.
+ * A refinement of ObjectPartList that adds per-entry versionTags and has its own serialized form to
+ * allow key lists when there are no object components.
- * This class also implements Externalizable so that it can be serialized as
- * part of a PutAllPartialResultException.
+ * This class also implements Externalizable so that it can be serialized as part of a
+ * PutAllPartialResultException.
-  
+
-  
+
-  
-  /** a flag telling us that after transmission of the list all objects should remain serialized */ 
+
+  /** a flag telling us that after transmission of the list all objects should remain serialized */
+   * 
-   * @param versionTag the version tag for the entry, or null if there is no version information available
+   * @param versionTag the version tag for the entry, or null if there is no version information
+   *        available
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "VersionedObjectList.addKeyAndVersion({}; {})", key, versionTag);
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "VersionedObjectList.addKeyAndVersion({}; {})",
+          key, versionTag);
-//      Assert.assertTrue(versionTag != null);
+      // Assert.assertTrue(versionTag != null);
-  
+
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "addPart({}; {}; {}; {}", key, value, objectType, versionTag);
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "addPart({}; {}; {}; {}", key, value,
+          objectType, versionTag);
-    if (this.regionIsVersioned) { 
+    if (this.regionIsVersioned) {
-      if (keys != null && (tagsSize != this.keys.size()-1)) {
+      if (keys != null && (tagsSize != this.keys.size() - 1)) {
-      if (this.objects != null && (this.objects.size() > 0) && (tagsSize != this.objects.size()-1)) {
+      if (this.objects != null && (this.objects.size() > 0)
+          && (tagsSize != this.objects.size() - 1)) {
-//      Assert.assertTrue(versionTag != null);
+      // Assert.assertTrue(versionTag != null);
-  
+
-  
-  public VersionedObjectList(int maxSize, boolean hasKeys, boolean regionIsVersioned, boolean serializeValues) {
+
+  public VersionedObjectList(int maxSize, boolean hasKeys, boolean regionIsVersioned,
+      boolean serializeValues) {
-   * replace null membership IDs in version tags with the given member ID.
-   * VersionTags received from a server may have null IDs because they were
-   * operations  performed by that server.  We transmit them as nulls to cut
-   * costs, but have to do the swap on the receiving end (in the client)
+   * replace null membership IDs in version tags with the given member ID. VersionTags received from
+   * a server may have null IDs because they were operations performed by that server. We transmit
+   * them as nulls to cut costs, but have to do the swap on the receiving end (in the client)
+   * 
-    for (VersionTag versionTag: versionTags) {
+    for (VersionTag versionTag : versionTags) {
-  
+
-   * Add a part for a destroyed or missing entry.  If the version tag is
-   * not null this represents a tombstone.
+   * Add a part for a destroyed or missing entry. If the version tag is not null this represents a
+   * tombstone.
+   * 
-  
+
-    int myTypeArrayLength = this.hasKeys? this.keys.size() : this.objects.size();
-    int otherTypeArrayLength = other.hasKeys? other.keys.size() : other.objects.size();
+    int myTypeArrayLength = this.hasKeys ? this.keys.size() : this.objects.size();
+    int otherTypeArrayLength = other.hasKeys ? other.keys.size() : other.objects.size();
-    VersionedObjectList vother = (VersionedObjectList)other;
+    VersionedObjectList vother = (VersionedObjectList) other;
-        newSize = Math.max(newSize,this.objectTypeArray.length);
+        newSize = Math.max(newSize, this.objectTypeArray.length);
-        System.arraycopy(other.objectTypeArray, 0, this.objectTypeArray, myTypeArrayLength, otherTypeArrayLength);
+        System.arraycopy(other.objectTypeArray, 0, this.objectTypeArray, myTypeArrayLength,
+            otherTypeArrayLength);
-  
+
-  
+
-  
+
-  
-  /** 
-   * Add a version, assuming that the key list has already been established and we are now
-   * filling in version information.
+
+  /**
+   * Add a version, assuming that the key list has already been established and we are now filling
+   * in version information.
+   * 
-  
+
+   * 
-        // version tags from the each primary bucket will be conflated here.  
+        // version tags from the each primary bucket will be conflated here.
-  
+
-  
+
-  
+
-  
+
-  
+
-    
+
-  
-  private static Version[] serializationVersions = new Version[] {
-    Version.GFE_80
-  };
-  
+
+  private static Version[] serializationVersions = new Version[] {Version.GFE_80};
+
-  
+
-  
+
-   * for backward compatibility we need to make sure the IDs in the
-   * version tags aren't the partial IDs sent in serialized tags but
-   * the full tags.  See bug #50063
+   * for backward compatibility we need to make sure the IDs in the version tags aren't the partial
+   * IDs sent in serialized tags but the full tags. See bug #50063
-        for (VersionTag tag: this.versionTags) {
+        for (VersionTag tag : this.versionTags) {
-    toData(out, 0, this.regionIsVersioned?this.versionTags.size():size(), true, true);
+    toData(out, 0, this.regionIsVersioned ? this.versionTags.size() : size(), true, true);
-  
-  void toData(DataOutput out, int startIndex, int numEntries, boolean sendKeys,
-      boolean sendObjects) throws IOException {
+
+  void toData(DataOutput out, int startIndex, int numEntries, boolean sendKeys, boolean sendObjects)
+      throws IOException {
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "serializing {} with flags 0x{} startIndex={} numEntries={}", this, Integer.toHexString(flags), startIndex, numEntries);
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST,
+          "serializing {} with flags 0x{} startIndex={} numEntries={}", this,
+          Integer.toHexString(flags), startIndex, numEntries);
-      if (numToWrite+startIndex > this.keys.size()) {
-        numToWrite = Math.max(0, this.keys.size()-startIndex);
+      if (numToWrite + startIndex > this.keys.size()) {
+        numToWrite = Math.max(0, this.keys.size() - startIndex);
-      for (int i=0; i<numToWrite; i++, index++) {
+      for (int i = 0; i < numToWrite; i++, index++) {
-      if (numToWrite+startIndex > this.objects.size()) {
-        numToWrite = Math.max(0, this.objects.size()-startIndex);
+      if (numToWrite + startIndex > this.objects.size()) {
+        numToWrite = Math.max(0, this.objects.size() - startIndex);
-      for (int i=0; i<numToWrite; i++, index++) {
+      for (int i = 0; i < numToWrite; i++, index++) {
-      if (numToWrite+startIndex > this.versionTags.size()) {
-        numToWrite = Math.max(0, this.versionTags.size()-startIndex);
+      if (numToWrite + startIndex > this.versionTags.size()) {
+        numToWrite = Math.max(0, this.versionTags.size() - startIndex);
-      for (int i=0; i<numToWrite; i++, index++) {
+      for (int i = 0; i < numToWrite; i++, index++) {
-  
+
-    boolean persistent= (flags & 0x20) == 0x20;
+    boolean persistent = (flags & 0x20) == 0x20;
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "deserializing a VersionedObjectList with flags 0x{}", Integer.toHexString(flags));
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST,
+          "deserializing a VersionedObjectList with flags 0x{}", Integer.toHexString(flags));
-      int size = (int)InternalDataSerializer.readUnsignedVL(in);
+      int size = (int) InternalDataSerializer.readUnsignedVL(in);
-      for (int i=0; i<size; i++) {
+      for (int i = 0; i < size; i++) {
-      int size = (int)InternalDataSerializer.readUnsignedVL(in);
+      int size = (int) InternalDataSerializer.readUnsignedVL(in);
-      for (int i=0; i<size; i++) {
+      for (int i = 0; i < size; i++) {
-      int size = (int)InternalDataSerializer.readUnsignedVL(in);
+      int size = (int) InternalDataSerializer.readUnsignedVL(in);
-      for (int i=0; i<size; i++) {
+      for (int i = 0; i < size; i++) {
-        case FLAG_NULL_TAG:
-          this.versionTags.add(null);
-          break;
-        case FLAG_FULL_TAG:
-          this.versionTags.add(VersionTag.create(persistent, in));
-          break;
-        case FLAG_TAG_WITH_NEW_ID:
-          VersionTag tag = VersionTag.create(persistent, in);
-          ids.add(tag.getMemberID());
-          this.versionTags.add(tag);
-          break;
-        case FLAG_TAG_WITH_NUMBER_ID:
-          tag = VersionTag.create(persistent, in);
-          int idNumber = (int)InternalDataSerializer.readUnsignedVL(in);
-          tag.setMemberID(ids.get(idNumber));
-          this.versionTags.add(tag);
-          break;
+          case FLAG_NULL_TAG:
+            this.versionTags.add(null);
+            break;
+          case FLAG_FULL_TAG:
+            this.versionTags.add(VersionTag.create(persistent, in));
+            break;
+          case FLAG_TAG_WITH_NEW_ID:
+            VersionTag tag = VersionTag.create(persistent, in);
+            ids.add(tag.getMemberID());
+            this.versionTags.add(tag);
+            break;
+          case FLAG_TAG_WITH_NUMBER_ID:
+            tag = VersionTag.create(persistent, in);
+            int idNumber = (int) InternalDataSerializer.readUnsignedVL(in);
+            tag.setMemberID(ids.get(idNumber));
+            this.versionTags.add(tag);
+            break;
-  
+
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "writing object {} of type {}: {}", index, objectType, value);
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "writing object {} of type {}: {}", index,
+          objectType, value);
-        DataSerializer.writeByteArray((byte[])value, out);
+        DataSerializer.writeByteArray((byte[]) value, out);
-        out.write((byte[])value);
+        out.write((byte[]) value);
-    }
-    else if (objectType == EXCEPTION) {
+    } else if (objectType == EXCEPTION) {
-      DataSerializer
-          .writeByteArray(CacheServerHelper.serialize(value), out);
+      DataSerializer.writeByteArray(CacheServerHelper.serialize(value), out);
-    }
-    else {
+    } else {
-      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "reading object {} of type {}", index, objectTypeArray[index]);
+      logger.trace(LogMarker.VERSIONED_OBJECT_LIST, "reading object {} of type {}", index,
+          objectTypeArray[index]);
-    }
-    else if (this.serializeValues) {
+    } else if (this.serializeValues) {
-  
+
-  
+
-  
+
-      .append("; hasKeys=").append(hasKeys)
-      .append("; keys=")
-      .append(keys==null? "null" : String.valueOf(keys.size()))
-      .append("; objects=").append(objects.size())
-      .append("; isobject=").append(objectTypeArray==null? "null" : objectTypeArray.length)
-      .append("; ccEnabled=").append(this.regionIsVersioned)
-      .append("; versionTags=").append(String.valueOf(versionTags.size()))
-      .append(")\n");
+        .append("; hasKeys=").append(hasKeys).append("; keys=")
+        .append(keys == null ? "null" : String.valueOf(keys.size())).append("; objects=")
+        .append(objects.size()).append("; isobject=")
+        .append(objectTypeArray == null ? "null" : objectTypeArray.length).append("; ccEnabled=")
+        .append(this.regionIsVersioned).append("; versionTags=")
+        .append(String.valueOf(versionTags.size())).append(")\n");
-  
+
-  
+
-    
+
-    
+
+
+
-    
+
-    
+
-    
+
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    
+
-      return "[key="+getKey()+",value="+getValue()+",v="+getVersionTag()+"]";
+      return "[key=" + getKey() + ",value=" + getValue() + ",v=" + getVersionTag() + "]";
-    
+
-  
+
-  
+
-    
-    /* (non-Javadoc)
+
+    /*
+     * (non-Javadoc)
+     * 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-  
+
-   * Chunker is used to send a VersionedObjectList to a client in pieces.
-   * It works by pretending to be a VersionedObjectList during serialization
-   * and writing only a portion of the list in each invocation of toData().
+   * Chunker is used to send a VersionedObjectList to a client in pieces. It works by pretending to
+   * be a VersionedObjectList during serialization and writing only a portion of the list in each
+   * invocation of toData().
-    
+
-    
+
-    
+
-    
+
-    
+
-    // when deserialized a VersionedObjectList is created, not a Chunker, so this method isn't needed
-//    public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException {
-//      fromData(in);
-//    }
+    // when deserialized a VersionedObjectList is created, not a Chunker, so this method isn't
+    // needed
+    // public void fromDataPre_GFE_8_0_0_0(DataInput in) throws IOException, ClassNotFoundException
+    // {
+    // fromData(in);
+    // }

UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66