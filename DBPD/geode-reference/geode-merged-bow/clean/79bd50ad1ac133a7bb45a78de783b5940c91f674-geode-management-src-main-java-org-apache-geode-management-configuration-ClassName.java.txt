GEODE-7266: change className validation (#4185)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* put validation in the constructor so that we can validation both in java object construction(v2 client side and gfsh side) and json deserialization on the v2 server side
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
-import org.apache.geode.management.internal.ManagementHelper;
-  private String className = "";
-  private Properties initProperties = new Properties();
+  private String className;
+  private Properties initProperties;
-   * Default constructor used for serialization.
-   */
-  public ClassName() {}
-
-  /**
-   * @param className this class needs to a no-arg constructor.
+   * @param className this class needs a no-arg constructor.
+   * this is a convenient way to create a ClassName object using json represented properties
+   *
+   *        If the className is not Declarable, then these properties will be ignored
-    if (StringUtils.isBlank(className)) {
-      return;
+    this(className, createProperties(jsonInitProperties));
+  }
+
+  private static Properties createProperties(String jsonInitProperties) {
+    if (StringUtils.isBlank(jsonInitProperties)) {
+      return new Properties();
-    if (!ManagementHelper.isClassNameValid(className)) {
-      throw new IllegalArgumentException("Invalid className");
-    }
-    this.className = className;
-      initProperties = mapper.readValue(jsonInitProperties, Properties.class);
+      return mapper.readValue(jsonInitProperties, Properties.class);
-   * @param className this class needs to have a no-arg constructor
+   * @param className the name of the class to be instantiated. This class needs to have
+   *        a no-arg constructor.
+   *        If the className is not Declarable, then these properties will be ignored
+   *
+   * @throws IllegalArgumentException if classname contains illegal classname characters
-  public ClassName(String className, Properties properties) {
+  @JsonCreator
+  public ClassName(@JsonProperty("className") String className,
+      @JsonProperty("initProperties") Properties properties) {
+    if (StringUtils.isBlank(className)) {
+      this.className = "";
+      this.initProperties = new Properties();
+      return;
+    }
+    // validate the className
+    if (!isClassNameValid(className)) {
+      throw new IllegalArgumentException("Invalid className");
+    }
-    this.initProperties = properties;
+    this.initProperties = properties == null ? new Properties() : properties;
-  private static boolean isClassNameValid(String fqcn) {
-    if (StringUtils.isBlank(fqcn)) {
-      return false;
-    }
-    String regex = "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*";
-    return Pattern.matches(regex, fqcn);
-  }
-
+  /**
+   * this provides a convenient method to validate if the given name is a valid classname
+   *
+   * @return false if classname is blank or has invalid classname characters
+   */
+  public static boolean isClassNameValid(String className) {
+    if (StringUtils.isBlank(className)) {
+      return false;
+    }
+    String regex = "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*";
+    return Pattern.matches(regex, className);
+  }
+

MOV26 INS26 MOV31 MOV31 UPD40 INS40 MOV29 MOV44 INS44 INS83 UPD83 INS43 INS42 INS78 INS44 INS8 INS29 UPD83 MOV44 INS65 INS43 INS42 INS17 INS42 INS65 INS42 INS79 MOV43 INS42 INS79 INS25 MOV25 MOV21 INS21 INS65 INS65 UPD66 INS66 INS66 INS42 INS42 INS32 INS32 INS66 UPD66 INS66 INS42 INS66 INS42 INS45 INS42 INS45 MOV32 INS8 INS7 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS41 MOV21 MOV21 INS41 INS22 INS16 UPD42 UPD42 INS14 MOV32 INS52 INS42 INS27 INS14 INS42 INS43 INS45 MOV14 INS42 INS33 INS43 INS42 INS42 DEL45 DEL66 DEL65 DEL29 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL8 DEL42 DEL44