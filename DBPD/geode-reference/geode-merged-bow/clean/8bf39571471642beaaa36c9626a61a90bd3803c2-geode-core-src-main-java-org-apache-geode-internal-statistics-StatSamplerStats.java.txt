Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    samplerType = f.createType("StatSampler",
-                               "Stats on the statistic sampler.",
-                               new StatisticDescriptor[] {
-                                 f.createIntCounter(SAMPLE_COUNT,
-                                                    "Total number of samples taken by this sampler.",
-                                                    "samples", false),
-                                 f.createLongCounter(SAMPLE_TIME,
-                                                     "Total amount of time spent taking samples.",
-                                                     "milliseconds", false),
-                                 f.createIntGauge(DELAY_DURATION,
-                                                  "Actual duration of sampling delay taken before taking this sample.",
-                                                  "milliseconds", false),
-                                 f.createIntGauge(STAT_RESOURCES,
-                                                  "Current number of statistic resources being sampled by this sampler.",
-                                                  "resources", false),
-                                 f.createIntCounter(JVM_PAUSES,
-                                                    "Total number of JVM pauses (which may or may not be full GC pauses) detected by this sampler. A JVM pause is defined as a system event which kept the statistics sampler thread from sampling for 3000 or more milliseconds. This threshold can be customized by setting the system property gemfire.statSamplerDelayThreshold (units are milliseconds).",
-                                                    "jvmPauses", false),
-                                 f.createIntGauge(SAMPLE_CALLBACKS,
-                                   "Current number of statistics that are sampled using callbacks.",
-                                   "resources", false),
-                                 f.createIntCounter(SAMPLE_CALLBACK_ERRORS,
-                                   "Total number of exceptions thrown by callbacks when performing sampling",
-                                   "errors", false),
-                                 f.createLongCounter(SAMPLE_CALLBACK_DURATION,
-                                   "Total amount of time invoking sampling callbacks",
-                                   "milliseconds", false),
-                               });
+    samplerType = f.createType("StatSampler", "Stats on the statistic sampler.",
+        new StatisticDescriptor[] {
+            f.createIntCounter(SAMPLE_COUNT, "Total number of samples taken by this sampler.",
+                "samples", false),
+            f.createLongCounter(SAMPLE_TIME, "Total amount of time spent taking samples.",
+                "milliseconds", false),
+            f.createIntGauge(DELAY_DURATION,
+                "Actual duration of sampling delay taken before taking this sample.",
+                "milliseconds", false),
+            f.createIntGauge(STAT_RESOURCES,
+                "Current number of statistic resources being sampled by this sampler.", "resources",
+                false),
+            f.createIntCounter(JVM_PAUSES,
+                "Total number of JVM pauses (which may or may not be full GC pauses) detected by this sampler. A JVM pause is defined as a system event which kept the statistics sampler thread from sampling for 3000 or more milliseconds. This threshold can be customized by setting the system property gemfire.statSamplerDelayThreshold (units are milliseconds).",
+                "jvmPauses", false),
+            f.createIntGauge(SAMPLE_CALLBACKS,
+                "Current number of statistics that are sampled using callbacks.", "resources",
+                false),
+            f.createIntCounter(SAMPLE_CALLBACK_ERRORS,
+                "Total number of exceptions thrown by callbacks when performing sampling", "errors",
+                false),
+            f.createLongCounter(SAMPLE_CALLBACK_DURATION,
+                "Total amount of time invoking sampling callbacks", "milliseconds", false),});
-    this.samplerStats.setInt(delayDurationId, (int)(nanosSpentSleeping / 1000000));
+    this.samplerStats.setInt(delayDurationId, (int) (nanosSpentSleeping / 1000000));
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  public Statistics getStats(){
+
+  public Statistics getStats() {
-  
+

