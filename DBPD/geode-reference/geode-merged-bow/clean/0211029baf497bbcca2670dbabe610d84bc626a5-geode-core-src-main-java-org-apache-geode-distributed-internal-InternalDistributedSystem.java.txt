GEODE-2632: use immutable SecurityService impls to improve performance

* misc code clean up in classes touched by changes
* new unit tests for SecurityService

+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.internal.security.SecurityServiceFactory;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
+  private volatile SecurityService securityService;
+
+    return newInstance(config, SecurityConfig.get());
+  }
+
+  public static InternalDistributedSystem newInstance(Properties config,
+      SecurityConfig securityConfig) {
+    if (securityConfig == null) {
+      return newInstance(config, null, null);
+    } else {
+      return newInstance(config, securityConfig.getSecurityManager(),
+          securityConfig.getPostProcessor());
+    }
+  }
+
+  public static InternalDistributedSystem newInstance(Properties config,
+      SecurityManager securityManager, PostProcessor postProcessor) {
-      newSystem.initialize();
+      newSystem.initialize(securityManager, postProcessor);
-        LoggingThreadGroup.cleanUpThreadGroups(); // bug44365 - logwriters accumulate, causing mem
-                                                  // leak
+        // bug44365 - logwriters accumulate, causing mem leak
+        LoggingThreadGroup.cleanUpThreadGroups();
-
-   * 
+   *
-
-    // if (DistributionConfigImpl.multicastTest) {
-    // this.logger.warning("Use of multicast has been forced");
-    // }
-    // if (DistributionConfigImpl.forceDisableTcp) {
-    // this.logger.warning("Use of UDP has been forced");
-    // }
-    // if
-    // (org.apache.geode.distributed.internal.membership.jgroup.JGroupMembershipManager.multicastTest)
-    // {
-    // this.logger.warning("Use of multicast for all distributed cache operations has been forced");
-    // }
-
+  public SecurityService getSecurityService() {
+    return this.securityService;
+  }
+
-  private void initialize() {
+  private void initialize(SecurityManager securityManager, PostProcessor postProcessor) {
+
+    this.securityService =
+        SecurityServiceFactory.create(this.config, securityManager, postProcessor);
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 MOV29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS44 INS44 INS83 INS43 INS42 INS8 INS44 INS44 INS42 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS22 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS52 INS42 INS22 INS32 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42