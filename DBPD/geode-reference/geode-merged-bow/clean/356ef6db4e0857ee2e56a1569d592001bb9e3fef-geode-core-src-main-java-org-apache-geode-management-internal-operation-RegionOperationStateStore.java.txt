GEODE-7830: fix race in rebalance start (#4769)

* The result from doing a start will now be consistent.
Previously the OperationState used to compute the result
could be changing while making the result causing the result
to be inconsistent. Now a copy of the OperationState is made
in a thread safe manner and then that immutable copy is used
to compute the result.

* A snapshot of the operationState is now taken BEFORE
the async thread is started so that the result of "start"
will only have info about the start.

* Now if a rebalance is done of the entire cluster it
will no longer be an error if it does not find any
regions to rebalance. Instead it will report success
with the status message: "Distributed system has no regions that can be rebalanced".
Also if it a member departs during the rebalance such that a region
it was hosting can no longer be rebalanced, then that region is now
ignored by rebalance instead of an error being reported.

-    return (OperationState<A, V>) region.get(opId);
+    OperationState<A, V> result = (OperationState<A, V>) region.get(opId);
+    if (result != null) {
+      result = result.createCopy();
+    }
+    return result;
-    return new ArrayList(region.values());
+    ArrayList<OperationState<A, V>> result = new ArrayList<>();
+    for (OperationState<ClusterManagementOperation<OperationResult>, OperationResult> operationState : region
+        .values()) {
+      result.add((OperationState<A, V>) operationState.createCopy());
+    }
+    return result;

INS74 INS43 INS43 INS43 INS60 INS25 INS60 INS70 INS41 INS42 INS42 INS42 MOV74 INS59 INS27 INS8 INS42 INS74 INS59 INS44 MOV32 INS8 INS42 INS42 MOV11 INS42 INS33 INS21 MOV43 INS74 INS42 INS14 INS74 INS42 INS21 INS7 INS43 INS43 INS43 INS74 INS43 INS74 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 DEL14 DEL41