Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Handles departure of lessor (lease holder) by sending a message asking
- * each participant if it's ok to release the leases. Upon receipt of all
- * replies the lease will be automatically released.
+ * Handles departure of lessor (lease holder) by sending a message asking each participant if it's
+ * ok to release the leases. Upon receipt of all replies the lease will be automatically released.
-public class TXLessorDepartureHandler
-implements DLockLessorDepartureHandler {
+public class TXLessorDepartureHandler implements DLockLessorDepartureHandler {
-  
+
-    if (dtls == null) return;
+    if (dtls == null)
+      return;
-      
-      DLockService dlock = 
-          ((TXLockServiceImpl)dtls).getInternalDistributedLockService();
-          
-      //DLockGrantor grantor = DLockGrantor.waitForGrantor(dlock, true);
+
+      DLockService dlock = ((TXLockServiceImpl) dtls).getInternalDistributedLockService();
+
+      // DLockGrantor grantor = DLockGrantor.waitForGrantor(dlock, true);
-        logger.debug("Lock grantor does not exist or has been destroyed; exiting TXLessorDepartureHandler");
+        logger.debug(
+            "Lock grantor does not exist or has been destroyed; exiting TXLessorDepartureHandler");
-      
+
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-  
-  private void sendRecoveryMsgs(final DM dm,
-                                final DLockBatch[] batches,
-                                final InternalDistributedMember owner,
-                                final DLockGrantor grantor) {
+
+  private void sendRecoveryMsgs(final DM dm, final DLockBatch[] batches,
+      final InternalDistributedMember owner, final DLockGrantor grantor) {
-          public void run() {
-            for (int i = 0; i < batches.length; i++) {
-              TXLockBatch batch = (TXLockBatch) batches[i];
-              // send TXOriginatorDepartureMessage
-              Set participants = batch.getParticipants(); 
-              TXOriginatorRecoveryProcessor.sendMessage(
-                 participants, owner, batch.getTXLockId(), grantor, dm);
-            }
+        public void run() {
+          for (int i = 0; i < batches.length; i++) {
+            TXLockBatch batch = (TXLockBatch) batches[i];
+            // send TXOriginatorDepartureMessage
+            Set participants = batch.getParticipants();
+            TXOriginatorRecoveryProcessor.sendMessage(participants, owner, batch.getTXLockId(),
+                grantor, dm);
-        });
-    }
-    catch (RejectedExecutionException e) {
+        }
+      });
+    } catch (RejectedExecutionException e) {
-        logger.debug("Rejected sending recovery messages for departure of tx originator {}", owner, e);
+        logger.debug("Rejected sending recovery messages for departure of tx originator {}", owner,
+            e);

UPD66 UPD66 DEL66