GEODE-420 Changing TcpClient to not be a static class

TcpClient now holds the SocketCreator that it should use to connect to
locators.  It's currently using the cluster SocketCreator but will be
changed to use the one for the Locator component when it's available.

-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
+import java.net.*;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.cache.client.internal.locator.*;
-import com.gemstone.gemfire.internal.net.SocketCreatorFactory;
+import com.gemstone.gemfire.internal.net.*;
- * Client for the TcpServer. These methods were refactored out of GossipClient,
- * because they are required for the server regardless of whether we are using the
- * GossipServer or the ServerLocator.
- * <p>
- * TODO - refactor this to support keep-alive connections to the server. requestToServer
- * probably shouldn't a static method.
+ * <p>Client for the TcpServer component of the Locator.
+ * </p>
-  private static final int REQUEST_TIMEOUT = 60 * 2 * 1000;
+  
+  private static final int DEFAULT_REQUEST_TIMEOUT = 60 * 2 * 1000;
+
+  
+  private final SocketCreator socketCreator;
+  
+  /**
+   * Constructs a new TcpClient using the default (Locator) SocketCreator.
+   * SocketCreatorFactory should be initialized before invoking this method.
+   */
+  public TcpClient() {
+    this(SocketCreatorFactory.getClusterSSLSocketCreator());
+  }
-   * Stops the TcpServer running on a given host and port
+   * Constructs a new TcpClient
+   * @param socketCreator the SocketCreator to use in communicating with the Locator
-  public static void stop(InetAddress addr, int port) throws java.net.ConnectException {
+  public TcpClient(SocketCreator socketCreator) {
+    this.socketCreator = socketCreator;
+  }
+
+  /**
+   * Stops the Locator running on a given host and port
+   */
+  public void stop(InetAddress addr, int port) throws java.net.ConnectException {
-      TcpClient.requestToServer(addr, port, request, REQUEST_TIMEOUT);
+      requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
-   * Contacts the gossip server running on the given host,
+   * Contacts the Locator running on the given host,
-  public static String[] getInfo(InetAddress addr, int port) {
+  public String[] getInfo(InetAddress addr, int port) {
-      InfoResponse response = (InfoResponse) TcpClient.requestToServer(addr, port, request, REQUEST_TIMEOUT);
+      InfoResponse response = (InfoResponse) requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
-  public static Object requestToServer(InetAddress addr, int port, Object request, int timeout) throws IOException, ClassNotFoundException {
+  /**
+   * Send a request to a Locator and expect a reply
+   * 
+   * @param addr The locator's address
+   * @param port The locator's tcp/ip port
+   * @param request The request message
+   * @param timeout Timeout for sending the message and receiving a reply
+   * @return the reply
+   * @throws IOException
+   * @throws ClassNotFoundException
+   */
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout) throws IOException, ClassNotFoundException {
-  public static Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected)
+  /**
+   * Send a request to a Locator
+   * @param addr The locator's address
+   * @param port The locator's tcp/ip port
+   * @param request The request message
+   * @param timeout Timeout for sending the message and receiving a reply
+   * @param replyExpected Whether to wait for a reply
+   * @return The reply, or null if no reply is expected
+   * @throws IOException
+   * @throws ClassNotFoundException
+   */
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected)
-  public static Short getServerVersion(InetSocketAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
+  private Short getServerVersion(InetSocketAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
-  private TcpClient() {
-    //static class
-  }
-
+  /**
+   * Clear static class information concerning Locators.
+   * This is used in unit tests.  It will force TcpClient to
+   * send version-request messages to locators to reestablish
+   * knowledge of their communication protocols.
+   */
-    synchronized (serverVersions) {
+    synchronized(serverVersions) {

MOV31 UPD40 UPD40 UPD40 INS29 INS83 INS42 INS23 INS31 INS65 MOV65 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS8 INS29 UPD83 INS44 INS29 INS29 UPD83 INS29 UPD66 MOV66 UPD66 MOV66 UPD42 INS42 INS42 INS65 INS17 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD66 MOV66 UPD66 MOV66 INS32 INS66 INS42 INS66 INS42 INS7 UPD66 UPD66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS22 INS42 INS52 INS42 MOV43 UPD42 MOV43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL42 DEL83 DEL42 DEL83 DEL83 DEL83