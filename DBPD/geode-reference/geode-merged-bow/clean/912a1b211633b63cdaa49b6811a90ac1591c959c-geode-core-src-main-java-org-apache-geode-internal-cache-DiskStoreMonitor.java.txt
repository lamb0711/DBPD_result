GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Disk monitoring is {}",
+    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+      logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE, "Disk monitoring is {}",
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Log directory usage warning is set to {}%",
-          LOG_WARNING_THRESHOLD_PCT);
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Scheduling disk usage checks every {} ms",
+      logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE,
+          "Log directory usage warning is set to {}%", LOG_WARNING_THRESHOLD_PCT);
+      logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE, "Scheduling disk usage checks every {} ms",
-    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Now monitoring disk store {}", ds.getName());
+    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+      logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE, "Now monitoring disk store {}",
+          ds.getName());
-    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "No longer monitoring disk store {}",
+    if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+      logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE, "No longer monitoring disk store {}",
-    if (exec != null /* && criticalDisk == null */) {
+    if (exec != null) {
-    // // 1) Check critical disk if needed
-    // if (criticalDisk != null) {
-    // criticalDisk.update(
-    // criticalDisk.disk.getDiskUsageWarningPercentage(),
-    // criticalDisk.disk.getDiskUsageCriticalPercentage());
-    // return;
-    // }
-
-    // 2) Check disk stores / dirs
+    // Check disk stores / dirs
-    // 3) Check log dir
+    // Check log dir
-        if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-          logger.trace(LogMarker.DISK_STORE_MONITOR, "Skipping check of non-existent directory {}",
-              dir().getAbsolutePath());
+        if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+          logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE,
+              "Skipping check of non-existent directory {}", dir().getAbsolutePath());
-      if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-        logger.trace(LogMarker.DISK_STORE_MONITOR,
+      if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+        logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR)) {
-        logger.trace(LogMarker.DISK_STORE_MONITOR,
+      if (logger.isTraceEnabled(LogMarker.DISK_STORE_MONITOR_VERBOSE)) {
+        logger.trace(LogMarker.DISK_STORE_MONITOR_VERBOSE,
-          logger.info(LogMarker.DISK_STORE_MONITOR,
+          logger.info(LogMarker.DISK_STORE_MONITOR_MARKER,
-          logger.warn(LogMarker.DISK_STORE_MONITOR,
+          logger.warn(LogMarker.DISK_STORE_MONITOR_MARKER,
-        logger.info(LogMarker.DISK_STORE_MONITOR, "Invoking test handler for state change to {}",
-            next);
+        logger.info(LogMarker.DISK_STORE_MONITOR_MARKER,
+            "Invoking test handler for state change to {}", next);
-          logger.warn(LogMarker.DISK_STORE_MONITOR,
+          logger.warn(LogMarker.DISK_STORE_MONITOR_MARKER,
-
-          // // try to restart cache after we return to normal operations
-          // if (AUTO_RECONNECT && this == criticalDisk) {
-          // performReconnect(msg);
-          // }
-
-          logger.warn(LogMarker.DISK_STORE_MONITOR,
+          logger.warn(LogMarker.DISK_STORE_MONITOR_MARKER,
-
-          logger.error(LogMarker.DISK_STORE_MONITOR,
+          logger.error(LogMarker.DISK_STORE_MONITOR_MARKER,

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40