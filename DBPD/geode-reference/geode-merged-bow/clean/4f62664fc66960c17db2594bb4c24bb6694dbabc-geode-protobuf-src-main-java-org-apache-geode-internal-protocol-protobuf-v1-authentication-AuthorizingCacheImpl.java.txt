GEODE-5041: Post processing results from the experimental protocol

Invoking the user's post processor before returning results from the
experimental protobuf protocol.

+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.query.SelectResults;
+import org.apache.geode.cache.query.Struct;
+import org.apache.geode.cache.query.internal.ResultsCollectionWrapper;
+import org.apache.geode.cache.query.internal.StructImpl;
+import org.apache.geode.cache.query.internal.types.StructTypeImpl;
+        value = (V) authorizer.postProcess(regionName, key, value);
-    return region.get(key);
+    Object value = region.get(key);
+    return (V) authorizer.postProcess(regionName, key, value);
-    return region.remove(key);
+    Object oldValue = region.remove(key);
+    return (V) authorizer.postProcess(regionName, key, oldValue);
-    return region.putIfAbsent(key, value);
+    Object oldValue = region.putIfAbsent(key, value);
+
+    return (V) authorizer.postProcess(regionName, key, oldValue);
-    return query.execute(bindParameters);
+    Object result = query.execute(bindParameters);
+
+    if (authorizer.needsPostProcessing()) {
+      return postProcessQueryResults(result);
+    } else {
+      return result;
+    }
+  }
+
+  private Object postProcessQueryResults(Object value) {
+    // The result is a single value
+    if (!(value instanceof SelectResults)) {
+      // For query results, we don't have the region or the key
+      return authorizer.postProcess(null, null, value);
+    }
+
+    SelectResults<?> selectResults = (SelectResults<?>) value;
+
+    // The result is a list of objects
+    if (!selectResults.getCollectionType().getElementType().isStructType()) {
+      List<Object> postProcessed = selectResults.stream()
+          .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+      return new ResultsCollectionWrapper(selectResults.getCollectionType().getElementType(),
+          postProcessed);
+    }
+
+    // The result is a list of structs
+    SelectResults<Struct> structResults = (SelectResults<Struct>) selectResults;
+
+    List<Struct> postProcessed =
+        structResults.stream().map(this::postProcessStruct).collect(Collectors.toList());
+
+
+    return new ResultsCollectionWrapper(selectResults.getCollectionType().getElementType(),
+        postProcessed);
+  }
+
+  private Struct postProcessStruct(Struct struct) {
+    List<Object> newValues = Arrays.stream(struct.getFieldValues())
+        .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+    StructImpl newStruct =
+        new StructImpl((StructTypeImpl) struct.getStructType(), newValues.toArray());
+
+    return newStruct;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS60 INS60 INS60 INS60 INS25 INS42 INS43 INS42 INS25 INS60 INS25 INS60 INS60 INS41 INS42 INS43 INS42 INS60 INS60 INS41 INS43 INS59 INS11 INS43 INS59 INS11 INS43 INS59 INS11 INS43 INS59 INS32 INS8 INS8 INS42 INS38 INS8 INS74 INS59 INS38 INS8 INS74 INS59 INS74 INS59 INS14 INS42 INS74 INS59 INS43 INS59 INS42 INS42 INS42 MOV32 INS43 INS32 INS42 INS42 MOV32 INS43 INS32 INS42 INS42 MOV32 INS43 INS32 INS42 INS42 MOV32 INS42 INS42 MOV41 INS41 INS36 INS41 INS43 INS76 INS42 INS11 INS32 INS60 INS41 INS43 INS43 INS42 INS11 INS43 INS43 INS42 INS32 INS43 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS62 INS32 INS42 INS74 INS42 INS32 INS42 INS74 INS59 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS11 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS33 INS33 INS42 INS43 INS76 INS32 INS42 INS43 INS43 INS42 INS32 INS43 INS32 INS42 INS43 INS43 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS59 INS32 INS42 INS42 INS42 INS21 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS7 INS42 INS42 INS59 INS32 INS42 INS11 INS42 INS42 INS42 INS33 INS33 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42