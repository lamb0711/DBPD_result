Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final boolean DISABLE_MONITOR = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_DISABLE_MONITORING");
-//  private static final boolean AUTO_RECONNECT = Boolean.getBoolean("gemfire.DISK_USAGE_ENABLE_AUTO_RECONNECT");
+  private static final boolean DISABLE_MONITOR =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_DISABLE_MONITORING");
+  // private static final boolean AUTO_RECONNECT =
+  // Boolean.getBoolean("gemfire.DISK_USAGE_ENABLE_AUTO_RECONNECT");
-  private static final int USAGE_CHECK_INTERVAL = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_POLLING_INTERVAL_MILLIS", 10000);
-  private static final float LOG_WARNING_THRESHOLD_PCT = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_LOG_WARNING_PERCENT", 99);
+  private static final int USAGE_CHECK_INTERVAL = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_POLLING_INTERVAL_MILLIS", 10000);
+  private static final float LOG_WARNING_THRESHOLD_PCT =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "DISK_USAGE_LOG_WARNING_PERCENT", 99);
-    NORMAL, 
-    WARN,
-    CRITICAL;
-    
-    public static DiskState select(double actual, double warn, double critical, boolean belowMinimum) {
+    NORMAL, WARN, CRITICAL;
+
+    public static DiskState select(double actual, double warn, double critical,
+        boolean belowMinimum) {
+   * 
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_DISK_USAGE_WARNING_INVALID_0.toLocalizedString(Float.valueOf(val)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_DISK_USAGE_WARNING_INVALID_0
+              .toLocalizedString(Float.valueOf(val)));
+   * 
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_DISK_USAGE_CRITICAL_INVALID_0.toLocalizedString(Float.valueOf(val)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_DISK_USAGE_CRITICAL_INVALID_0
+              .toLocalizedString(Float.valueOf(val)));
-    
+
-  
-//  // this is set when we go into auto_reconnect mode
-//  private volatile DirectoryHolderUsage criticalDisk;
-  
+
+  // // this is set when we go into auto_reconnect mode
+  // private volatile DirectoryHolderUsage criticalDisk;
+
+
-    
+
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Disk monitoring is {}", (DISABLE_MONITOR ? "disabled" : "enabled")); 
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Log directory usage warning is set to {}%", LOG_WARNING_THRESHOLD_PCT); 
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Scheduling disk usage checks every {} ms", USAGE_CHECK_INTERVAL); 
+      logger.trace(LogMarker.DISK_STORE_MONITOR, "Disk monitoring is {}",
+          (DISABLE_MONITOR ? "disabled" : "enabled"));
+      logger.trace(LogMarker.DISK_STORE_MONITOR, "Log directory usage warning is set to {}%",
+          LOG_WARNING_THRESHOLD_PCT);
+      logger.trace(LogMarker.DISK_STORE_MONITOR, "Scheduling disk usage checks every {} ms",
+          USAGE_CHECK_INTERVAL);
-      final ThreadGroup tg = LoggingThreadGroup .createThreadGroup(
+      final ThreadGroup tg = LoggingThreadGroup.createThreadGroup(
-      
+
-  
+
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "Now monitoring disk store {}", ds.getName()); 
+      logger.trace(LogMarker.DISK_STORE_MONITOR, "Now monitoring disk store {}", ds.getName());
-  
+
-      logger.trace(LogMarker.DISK_STORE_MONITOR, "No longer monitoring disk store {}", ds.getName()); 
+      logger.trace(LogMarker.DISK_STORE_MONITOR, "No longer monitoring disk store {}",
+          ds.getName());
-    
+
-  
+
-  
+
-//    // 1) Check critical disk if needed
-//    if (criticalDisk != null) {
-//      criticalDisk.update(
-//          criticalDisk.disk.getDiskUsageWarningPercentage(), 
-//          criticalDisk.disk.getDiskUsageCriticalPercentage());
-//      return;
-//    }
-      
+    // // 1) Check critical disk if needed
+    // if (criticalDisk != null) {
+    // criticalDisk.update(
+    // criticalDisk.disk.getDiskUsageWarningPercentage(),
+    // criticalDisk.disk.getDiskUsageCriticalPercentage());
+    // return;
+    // }
+
-        DiskState update = du.update(ds.getDiskUsageWarningPercentage(), ds.getDiskUsageCriticalPercentage());
+        DiskState update =
+            du.update(ds.getDiskUsageWarningPercentage(), ds.getDiskUsageCriticalPercentage());
-    
+
-  }      
+  }
-    
+
-    
+
-    
+
-      
+
-      
+
-          logger.trace(LogMarker.DISK_STORE_MONITOR, "Skipping check of non-existent directory {}", dir().getAbsolutePath()); 
+          logger.trace(LogMarker.DISK_STORE_MONITOR, "Skipping check of non-existent directory {}",
+              dir().getAbsolutePath());
-      
+
-        logger.trace(LogMarker.DISK_STORE_MONITOR, "Checking usage for directory {}, minimum free space is {} MB", dir().getAbsolutePath(), min); 
+        logger.trace(LogMarker.DISK_STORE_MONITOR,
+            "Checking usage for directory {}, minimum free space is {} MB", dir().getAbsolutePath(),
+            min);
-      
+
-      
+
-        logger.trace(LogMarker.DISK_STORE_MONITOR, "Directory {} has {} bytes free out of {} ({} usage)", dir().getAbsolutePath(), remaining, total, pct);
+        logger.trace(LogMarker.DISK_STORE_MONITOR,
+            "Directory {} has {} bytes free out of {} ({} usage)", dir().getAbsolutePath(),
+            remaining, total, pct);
-      
+
-      
+
-    
+
+
+
+
-  
+
-    
+
-      Object[] args = new Object[] { dir.getAbsolutePath(), pct };
+      Object[] args = new Object[] {dir.getAbsolutePath(), pct};
-      case NORMAL:
-        logger.info(LogMarker.DISK_STORE_MONITOR, LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_LOG_DISK_NORMAL, args));
-        break;
-      
-      case WARN:
-      case CRITICAL:
-        logger.warn(LogMarker.DISK_STORE_MONITOR, LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_LOG_DISK_WARNING, args));
-        break;
+        case NORMAL:
+          logger.info(LogMarker.DISK_STORE_MONITOR,
+              LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_LOG_DISK_NORMAL, args));
+          break;
+
+        case WARN:
+        case CRITICAL:
+          logger.warn(LogMarker.DISK_STORE_MONITOR,
+              LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_LOG_DISK_WARNING, args));
+          break;
-    protected void recordStats(long total, long free, long elapsed) {
-    }
+    protected void recordStats(long total, long free, long elapsed) {}
-  
+
-        logger.info(LogMarker.DISK_STORE_MONITOR, "Invoking test handler for state change to {}", next);
+        logger.info(LogMarker.DISK_STORE_MONITOR, "Invoking test handler for state change to {}",
+            next);
-      Object[] args = new Object[] { dir.getDir(), disk.getName(), pct };
+      Object[] args = new Object[] {dir.getDir(), disk.getName(), pct};
-      
+
-      case NORMAL:
-        logger.warn(LogMarker.DISK_STORE_MONITOR, LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_NORMAL, args));
-        
-//        // try to restart cache after we return to normal operations
-//        if (AUTO_RECONNECT && this == criticalDisk) {
-//          performReconnect(msg);
-//        }
-        break;
-      
-      case WARN:
-        logger.warn(LogMarker.DISK_STORE_MONITOR, LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_WARNING, args));
-        break;
-  
-      case CRITICAL:
-        logger.error(LogMarker.DISK_STORE_MONITOR, LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_CRITICAL, args));
-        
-        try {
-//          // prepare for restart
-//          if (AUTO_RECONNECT) {
-//            disk.getCache().saveCacheXmlForReconnect();
-//            criticalDisk = this;
-//          }
-        } finally {
-          // pull the plug
-          disk.handleDiskAccessException(new DiskAccessException(msg, disk));
-        }
-        break;
+        case NORMAL:
+          logger.warn(LogMarker.DISK_STORE_MONITOR,
+              LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_NORMAL, args));
+
+          // // try to restart cache after we return to normal operations
+          // if (AUTO_RECONNECT && this == criticalDisk) {
+          // performReconnect(msg);
+          // }
+          break;
+
+        case WARN:
+          logger.warn(LogMarker.DISK_STORE_MONITOR,
+              LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_WARNING, args));
+          break;
+
+        case CRITICAL:
+          logger.error(LogMarker.DISK_STORE_MONITOR,
+              LocalizedMessage.create(LocalizedStrings.DiskStoreMonitor_DISK_CRITICAL, args));
+
+          try {
+            // // prepare for restart
+            // if (AUTO_RECONNECT) {
+            // disk.getCache().saveCacheXmlForReconnect();
+            // criticalDisk = this;
+            // }
+          } finally {
+            // pull the plug
+            disk.handleDiskAccessException(new DiskAccessException(msg, disk));
+          }
+          break;
-//    private void performReconnect(String msg) {
-//      try {
-//        // don't try to reconnect before the cache is closed
-//        disk._testHandleDiskAccessException.await();
-//        
-//        // now reconnect, clear out the var first so a close can interrupt the
-//        // reconnect
-//        criticalDisk = null;
-//        boolean restart = disk.getCache().getDistributedSystem().tryReconnect(true, msg, disk.getCache());
-//        if (LogMarker.DISK_STORE_MONITOR || logger.isDebugEnabled()) {
-//          String pre = restart ? "Successfully" : "Unsuccessfully";
-//          logger.info(LocalizedStrings.DEBUG, pre + " attempted to restart cache");
-//        }
-//      } catch (InterruptedException e) {
-//        Thread.currentThread().interrupt();
-//      } finally {
-//        close();
-//      }
-//    }
+    // private void performReconnect(String msg) {
+    // try {
+    // // don't try to reconnect before the cache is closed
+    // disk._testHandleDiskAccessException.await();
+    //
+    // // now reconnect, clear out the var first so a close can interrupt the
+    // // reconnect
+    // criticalDisk = null;
+    // boolean restart = disk.getCache().getDistributedSystem().tryReconnect(true, msg,
+    // disk.getCache());
+    // if (LogMarker.DISK_STORE_MONITOR || logger.isDebugEnabled()) {
+    // String pre = restart ? "Successfully" : "Unsuccessfully";
+    // logger.info(LocalizedStrings.DEBUG, pre + " attempted to restart cache");
+    // }
+    // } catch (InterruptedException e) {
+    // Thread.currentThread().interrupt();
+    // } finally {
+    // close();
+    // }
+    // }

