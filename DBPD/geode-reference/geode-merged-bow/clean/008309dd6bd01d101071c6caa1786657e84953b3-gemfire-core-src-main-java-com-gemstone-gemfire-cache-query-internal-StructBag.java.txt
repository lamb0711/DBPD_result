Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2005-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.query.internal.types.CollectionTypeImpl;
+import com.gemstone.gemfire.cache.query.types.CollectionType;
-public final class StructBag extends ResultsBag {
+public final class StructBag extends ResultsBag implements StructFields {
-      throw new IllegalArgumentException(LocalizedStrings.StructBag_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.toLocalizedString());
+      throw new IllegalArgumentException(LocalizedStrings.StructBag_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.
+          toLocalizedString(this.elementType, s.getStructType()));
+  public CollectionType getCollectionType() {
+    return new CollectionTypeImpl(StructBag.class, this.elementType);
+  }
+  
-    if (c instanceof StructBag) { return addAll((StructBag) c); }
+    if (c instanceof StructFields) { return addAll((StructFields) c); }
-    if (c instanceof StructBag) { return removeAll((StructBag) c); }
+    if (c instanceof StructFields) { return removeAll((StructFields) c); }
-    if (c instanceof StructBag) { return retainAll((StructBag) c); }
+    if (c instanceof StructFields) { return retainAll((StructFields) c); }
-  public boolean addAll(StructBag sb) {
+  public boolean addAll(StructFields sb) {
-    if (!this.elementType.equals(sb.elementType)) {
+    if (!this.elementType.equals(sb.getCollectionType().getElementType())) {
-  public boolean removeAll(StructBag ss) {
+  public boolean removeAll(StructFields ss) {
-    if (!this.elementType.equals(ss.elementType)) {
+    if (!this.elementType.equals(ss.getCollectionType().getElementType())) {
-  public boolean retainAll(StructBag ss) {
-    if (!this.elementType.equals(ss.elementType)) {
+  public boolean retainAll(StructFields ss) {
+    if (!this.elementType.equals(ss.getCollectionType().getElementType())) {
-  private class StructBagIterator extends ResultsBagIterator {
+  private class StructBagIterator extends BagIterator {

INS26 INS26 INS40 INS40 INS43 INS31 INS42 INS83 INS43 INS42 INS8 UPD43 INS42 INS41 UPD43 UPD43 UPD43 UPD42 INS14 UPD42 UPD42 UPD42 INS43 INS57 INS22 UPD43 UPD43 UPD43 INS42 MOV43 INS52 INS42 UPD42 UPD42 UPD42 INS32 MOV22 INS32 MOV22 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS22 INS32 INS43 UPD43 UPD43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS52 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL40 DEL40 DEL40