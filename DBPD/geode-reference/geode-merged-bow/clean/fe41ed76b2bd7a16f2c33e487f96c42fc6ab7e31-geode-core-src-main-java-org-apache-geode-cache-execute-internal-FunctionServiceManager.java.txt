GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+import org.apache.geode.cache.client.internal.InternalClientCache;
-import org.apache.geode.internal.cache.execute.*;
+import org.apache.geode.internal.cache.execute.DistributedRegionFunctionExecutor;
+import org.apache.geode.internal.cache.execute.MemberFunctionExecutor;
+import org.apache.geode.internal.cache.execute.PartitionedRegionFunctionExecutor;
+import org.apache.geode.internal.cache.execute.ServerFunctionExecutor;
+import org.apache.geode.internal.cache.execute.ServerRegionFunctionExecutor;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-
-  private final static ConcurrentHashMap<String, Function> idToFunctionMap =
-      new ConcurrentHashMap<String, Function>();
+
+  private static final ConcurrentHashMap<String, Function> idToFunctionMap =
+      new ConcurrentHashMap<>();
-  public FunctionServiceManager() {}
-
+  public FunctionServiceManager() {
+    // do nothing
+  }
-   * @param region
-  public final Execution onRegion(Region region) {
+  public Execution onRegion(Region region) {
-          ProxyRegion pr = (ProxyRegion) region;
-          region = pr.getRealRegion();
-          proxyCache = (ProxyCache) pr.getAuthenticatedCache();
+          ProxyRegion proxyRegion = (ProxyRegion) region;
+          region = proxyRegion.getRealRegion();
+          proxyCache = proxyRegion.getAuthenticatedCache();
-  public final Execution onServer(Pool pool, String... groups) {
+  public Execution onServer(Pool pool, String... groups) {
-  public final Execution onServers(Pool pool, String... groups) {
+  public Execution onServers(Pool pool, String... groups) {
-  public final Execution onServer(RegionService regionService, String... groups) {
+  public Execution onServer(RegionService regionService, String... groups) {
-      GemFireCacheImpl gfc = (GemFireCacheImpl) regionService;
-      if (!gfc.isClient()) {
+      InternalClientCache internalCache = (InternalClientCache) regionService;
+      if (!internalCache.isClient()) {
-      } else if (gfc.getDefaultPool() != null) {
-        return onServer(gfc.getDefaultPool(), groups);
+      } else if (internalCache.getDefaultPool() != null) {
+        return onServer(internalCache.getDefaultPool(), groups);
-      ProxyCache pc = (ProxyCache) regionService;
-      return new ServerFunctionExecutor(pc.getUserAttributes().getPool(), false, pc, groups);
+      ProxyCache proxyCache = (ProxyCache) regionService;
+      return new ServerFunctionExecutor(proxyCache.getUserAttributes().getPool(), false, proxyCache,
+          groups);
-  public final Execution onServers(RegionService regionService, String... groups) {
+  public Execution onServers(RegionService regionService, String... groups) {
-      GemFireCacheImpl gfc = (GemFireCacheImpl) regionService;
-      if (!gfc.isClient()) {
+      InternalClientCache internalCache = (InternalClientCache) regionService;
+      if (!internalCache.isClient()) {
-      } else if (gfc.getDefaultPool() != null) {
-        return onServers(gfc.getDefaultPool(), groups);
+      } else if (internalCache.getDefaultPool() != null) {
+        return onServers(internalCache.getDefaultPool(), groups);
-      ProxyCache pc = (ProxyCache) regionService;
-      return new ServerFunctionExecutor(pc.getUserAttributes().getPool(), true, pc, groups);
+      ProxyCache proxyCache = (ProxyCache) regionService;
+      return new ServerFunctionExecutor(proxyCache.getUserAttributes().getPool(), true, proxyCache,
+          groups);
-  public final Execution onMember(DistributedSystem system, DistributedMember distributedMember) {
+  public Execution onMember(DistributedSystem system, DistributedMember distributedMember) {
-  public final Execution onMembers(DistributedSystem system, String... groups) {
+  public Execution onMembers(DistributedSystem system, String... groups) {
-  public final Execution onMembers(DistributedSystem system,
-      Set<DistributedMember> distributedMembers) {
+  public Execution onMembers(DistributedSystem system, Set<DistributedMember> distributedMembers) {
-   * @param functionId
-  public final Function getFunction(String functionId) {
+  public Function getFunction(String functionId) {
-  public final void registerFunction(Function function) {
+  public void registerFunction(Function function) {
-  public final void unregisterFunction(String functionId) {
+  public void unregisterFunction(String functionId) {
-  public final boolean isRegistered(String functionId) {
+  public boolean isRegistered(String functionId) {
-  public final Map<String, Function> getRegisteredFunctions() {
+  public Map<String, Function> getRegisteredFunctions() {
-  public final void unregisterAllFunctions() {
+  public void unregisterAllFunctions() {
-   * @param region
-  private final boolean isClientRegion(Region region) {
+  private boolean isClientRegion(Region region) {
-
-  public final Execution onMember(DistributedSystem system, String... groups) {
+  public Execution onMember(DistributedSystem system, String... groups) {
-    Set<DistributedMember> members = new HashSet<DistributedMember>();
+    Set<DistributedMember> members = new HashSet<>();
-      List<DistributedMember> grpMembers =
-          new ArrayList<DistributedMember>(system.getGroupMembers(group));
+      List<DistributedMember> grpMembers = new ArrayList<>(system.getGroupMembers(group));

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS83 UPD74 UPD43 UPD43 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL65 DEL83 DEL42 DEL43 DEL32 DEL11 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL65 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL65 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43