 GEODE-6580: Cleanup static analyzer warnings. (#3415)


+
+import java.util.Arrays;
-import org.apache.geode.internal.SetUtils;
-      Integer.getInteger("DistributionManager.STARTUP_TIMEOUT", 15000).intValue();
+      Integer.getInteger("DistributionManager.STARTUP_TIMEOUT", 15000);
-      Integer.getInteger("DistributionManager.MAX_WAITING_THREADS", Integer.MAX_VALUE).intValue();
+      Integer.getInteger("DistributionManager.MAX_WAITING_THREADS", Integer.MAX_VALUE);
-      Integer.getInteger("DistributionManager.MAX_PR_META_DATA_CLEANUP_THREADS", 1).intValue();
+      Integer.getInteger("DistributionManager.MAX_PR_META_DATA_CLEANUP_THREADS", 1);
-      Integer.getInteger("DistributionManager.MAX_THREADS", 100).intValue();
+      Integer.getInteger("DistributionManager.MAX_THREADS", 100);
-      Math.max(Runtime.getRuntime().availableProcessors() * 4, 16)).intValue();
+      Math.max(Runtime.getRuntime().availableProcessors() * 4, 16));
-      Math.max(Runtime.getRuntime().availableProcessors() * 4, 16)).intValue();
+      Math.max(Runtime.getRuntime().availableProcessors() * 4, 16));
-      Integer.getInteger("DistributionManager.INCOMING_QUEUE_LIMIT", 80000).intValue();
+      Integer.getInteger("DistributionManager.INCOMING_QUEUE_LIMIT", 80000);
-      .getInteger("DistributionManager.SERIAL_QUEUE_THROTTLE_PERCENT", 75).intValue()) / 100;
+      .getInteger("DistributionManager.SERIAL_QUEUE_THROTTLE_PERCENT", 75)) / 100;
-  static final int SERIAL_QUEUE_BYTE_LIMIT = Integer
-      .getInteger("DistributionManager.SERIAL_QUEUE_BYTE_LIMIT", (40 * (1024 * 1024))).intValue();
+  private static final int SERIAL_QUEUE_BYTE_LIMIT = Integer
+      .getInteger("DistributionManager.SERIAL_QUEUE_BYTE_LIMIT", (40 * (1024 * 1024)));
-  static final int SERIAL_QUEUE_THROTTLE =
+  private static final int SERIAL_QUEUE_THROTTLE =
-          (int) (SERIAL_QUEUE_BYTE_LIMIT * THROTTLE_PERCENT)).intValue();
+          (int) (SERIAL_QUEUE_BYTE_LIMIT * THROTTLE_PERCENT));
-  static final int TOTAL_SERIAL_QUEUE_BYTE_LIMIT =
-      Integer.getInteger("DistributionManager.TOTAL_SERIAL_QUEUE_BYTE_LIMIT", (80 * (1024 * 1024)))
-          .intValue();
+  private static final int TOTAL_SERIAL_QUEUE_BYTE_LIMIT =
+      Integer.getInteger("DistributionManager.TOTAL_SERIAL_QUEUE_BYTE_LIMIT", (80 * (1024 * 1024)));
-  static final int TOTAL_SERIAL_QUEUE_THROTTLE =
+  private static final int TOTAL_SERIAL_QUEUE_THROTTLE =
-          (int) (SERIAL_QUEUE_BYTE_LIMIT * THROTTLE_PERCENT)).intValue();
+          (int) (SERIAL_QUEUE_BYTE_LIMIT * THROTTLE_PERCENT));
-  static final int SERIAL_QUEUE_SIZE_LIMIT =
-      Integer.getInteger("DistributionManager.SERIAL_QUEUE_SIZE_LIMIT", 20000).intValue();
+  private static final int SERIAL_QUEUE_SIZE_LIMIT =
+      Integer.getInteger("DistributionManager.SERIAL_QUEUE_SIZE_LIMIT", 20000);
-  static final int SERIAL_QUEUE_SIZE_THROTTLE =
+  private static final int SERIAL_QUEUE_SIZE_THROTTLE =
-          (int) (SERIAL_QUEUE_SIZE_LIMIT * THROTTLE_PERCENT)).intValue();
+          (int) (SERIAL_QUEUE_SIZE_LIMIT * THROTTLE_PERCENT));
-  static final int MAX_SERIAL_QUEUE_THREAD =
-      Integer.getInteger("DistributionManager.MAX_SERIAL_QUEUE_THREAD", 20).intValue();
+  private static final int MAX_SERIAL_QUEUE_THREAD =
+      Integer.getInteger("DistributionManager.MAX_SERIAL_QUEUE_THREAD", 20);
-  protected static final String FUNCTION_EXECUTION_PROCESSOR_THREAD_PREFIX =
+  static final String FUNCTION_EXECUTION_PROCESSOR_THREAD_PREFIX =
-  private int distributedSystemId = DistributionConfig.DEFAULT_DISTRIBUTED_SYSTEM_ID;
+  private int distributedSystemId;
-        Object[] logArgs = new Object[] {distributionManager.getDistributionManagerId(), transport,
-            Integer.valueOf(distributionManager.getOtherDistributionManagerIds().size()),
+        logger.info(LogMarker.DM_MARKER,
+            "DistributionManager {} started on {}. There were {} other DMs. others: {} {} {}",
+            distributionManager.getDistributionManagerId(), transport,
+            distributionManager.getOtherDistributionManagerIds().size(),
-                : (distributionManager.getDMType() == LOCATOR_DM_TYPE) ? " (locator)" : "")};
-        logger.info(LogMarker.DM_MARKER,
-            "DistributionManager {} started on {}. There were {} other DMs. others: {} {} {}",
-            logArgs);
+                : (distributionManager.getDMType() == LOCATOR_DM_TYPE) ? " (locator)" : ""));
-    this.dmType = transport.getVmKind();
-    this.membershipListeners = new ConcurrentHashMap<>();
-    this.distributedSystemId = system.getConfig().getDistributedSystemId();
+    dmType = transport.getVmKind();
+    membershipListeners = new ConcurrentHashMap<>();
+    distributedSystemId = system.getConfig().getDistributedSystemId();
-    this.stats = new DistributionStats(system, statId);
+    stats = new DistributionStats(system, statId);
-    this.exceptionInThreads = false;
+    exceptionInThreads = false;
-        this.threadMonitor = new ThreadsMonitoringImpl(system);
+        threadMonitor = new ThreadsMonitoringImpl(system);
-        this.threadMonitor = new ThreadsMonitoringImplDummy();
+        threadMonitor = new ThreadsMonitoringImplDummy();
-        this.serialQueuedExecutorPool =
-            new SerialQueuedExecutorPool(this.stats, throttlingDisabled, this.threadMonitor);
+        serialQueuedExecutorPool =
+            new SerialQueuedExecutorPool(stats, throttlingDisabled, threadMonitor);
-        BlockingQueue poolQueue;
+        BlockingQueue<Runnable> poolQueue;
-          poolQueue = new OverflowQueueWithDMStats(this.stats.getSerialQueueHelper());
+          poolQueue = new OverflowQueueWithDMStats<>(stats.getSerialQueueHelper());
-          this.serialQueue =
+          serialQueue =
-                  this.stats.getSerialQueueHelper());
-          poolQueue = this.serialQueue;
+                  stats.getSerialQueueHelper());
+          poolQueue = serialQueue;
-        this.serialThread = LoggingExecutors.newSerialThreadPool("Serial Message Processor",
+        serialThread = LoggingExecutors.newSerialThreadPool("Serial Message Processor",
-            this::doSerialThread, this.stats.getSerialProcessorHelper(),
+            this::doSerialThread, stats.getSerialProcessorHelper(),
-      this.viewThread =
+      viewThread =
-              this.stats.getViewProcessorHelper(), threadMonitor);
+              stats.getViewProcessorHelper(), threadMonitor);
-      this.threadPool =
+      threadPool =
-              MAX_THREADS, this.stats.getNormalPoolHelper(), threadMonitor,
-              INCOMING_QUEUE_LIMIT, this.stats.getOverflowQueueHelper());
+              MAX_THREADS, stats.getNormalPoolHelper(), threadMonitor,
+              INCOMING_QUEUE_LIMIT, stats.getOverflowQueueHelper());
-      this.highPriorityPool = LoggingExecutors.newThreadPoolWithFeedStatistics(
+      highPriorityPool = LoggingExecutors.newThreadPoolWithFeedStatistics(
-          MAX_THREADS, this.stats.getHighPriorityPoolHelper(), threadMonitor,
-          INCOMING_QUEUE_LIMIT, this.stats.getHighPriorityQueueHelper());
+          MAX_THREADS, stats.getHighPriorityPoolHelper(), threadMonitor,
+          INCOMING_QUEUE_LIMIT, stats.getHighPriorityQueueHelper());
-          poolQueue = new OverflowQueueWithDMStats<>(this.stats.getWaitingQueueHelper());
+          poolQueue = new OverflowQueueWithDMStats<>(stats.getWaitingQueueHelper());
-        this.waitingPool = LoggingExecutors.newThreadPool("Pooled Waiting Message Processor ",
+        waitingPool = LoggingExecutors.newThreadPool("Pooled Waiting Message Processor ",
-            MAX_WAITING_THREADS, this.stats.getWaitingPoolHelper(), threadMonitor, poolQueue);
+            MAX_WAITING_THREADS, stats.getWaitingPoolHelper(), threadMonitor, poolQueue);
-      this.prMetaDataCleanupThreadPool =
+      prMetaDataCleanupThreadPool =
-              MAX_PR_META_DATA_CLEANUP_THREADS, this.stats.getWaitingPoolHelper(), threadMonitor,
-              0, this.stats.getWaitingQueueHelper());
+              MAX_PR_META_DATA_CLEANUP_THREADS, stats.getWaitingPoolHelper(), threadMonitor,
+              0, stats.getWaitingQueueHelper());
-        this.partitionedRegionPool =
+        partitionedRegionPool =
-                MAX_PR_THREADS, this.stats.getPartitionedRegionPoolHelper(), threadMonitor,
-                INCOMING_QUEUE_LIMIT, this.stats.getPartitionedRegionQueueHelper());
+                MAX_PR_THREADS, stats.getPartitionedRegionPoolHelper(), threadMonitor,
+                INCOMING_QUEUE_LIMIT, stats.getPartitionedRegionQueueHelper());
-        this.partitionedRegionThread = LoggingExecutors.newSerialThreadPoolWithFeedStatistics(
+        partitionedRegionThread = LoggingExecutors.newSerialThreadPoolWithFeedStatistics(
-            this.stats.getPartitionedRegionPoolHelper(), threadMonitor,
-            INCOMING_QUEUE_LIMIT, this.stats.getPartitionedRegionQueueHelper());
+            stats.getPartitionedRegionPoolHelper(), threadMonitor,
+            INCOMING_QUEUE_LIMIT, stats.getPartitionedRegionQueueHelper());
-        this.functionExecutionPool =
+        functionExecutionPool =
-                MAX_FE_THREADS, this.stats.getFunctionExecutionPoolHelper(), threadMonitor,
-                INCOMING_QUEUE_LIMIT, this.stats.getFunctionExecutionQueueHelper());
+                MAX_FE_THREADS, stats.getFunctionExecutionPoolHelper(), threadMonitor,
+                INCOMING_QUEUE_LIMIT, stats.getFunctionExecutionQueueHelper());
-        this.functionExecutionThread =
+        functionExecutionThread =
-                this.stats.getFunctionExecutionPoolHelper(), threadMonitor,
-                INCOMING_QUEUE_LIMIT, this.stats.getFunctionExecutionQueueHelper());
+                stats.getFunctionExecutionPoolHelper(), threadMonitor,
+                INCOMING_QUEUE_LIMIT, stats.getFunctionExecutionQueueHelper());
-        this.memberEventThread =
+        memberEventThread =
-      StringBuffer sb = new StringBuffer(" (took ");
+      StringBuilder sb = new StringBuilder(" (took ");
-      this.localAddress = membershipManager.getLocalMember();
+      localAddress = membershipManager.getLocalMember();
-          new Object[] {this.localAddress,
+          new Object[] {localAddress,
-      this.description = "Distribution manager on " + this.localAddress + " started at "
+      description = "Distribution manager on " + localAddress + " started at "
-      setIsStartupThread(Boolean.TRUE);
+      setIsStartupThread();
-        this.getCancelCriterion().checkCancelInProgress(null);
+        getCancelCriterion().checkCancelInProgress(null);
-  private static Boolean getIsStartupThread() {
+  private static Boolean isStartupThread() {
-  private static void setIsStartupThread(Boolean isStartup) {
-    ClusterDistributionManager.isStartupThread.set(isStartup);
+  private static void setIsStartupThread() {
+    ClusterDistributionManager.isStartupThread.set(Boolean.TRUE);
-      this.redundancyZones.put(member, redundancyZone);
+      redundancyZones.put(member, redundancyZone);
-    return this.dmType;
+    return dmType;
-    return this.membershipManager.testMulticast();
+    return membershipManager.testMulticast();
-    this.system.setDM(this); // fix for bug 33362
-    if (this.memberEventThread != null)
-      this.memberEventThread.start();
+    system.setDM(this); // fix for bug 33362
+    if (memberEventThread != null)
+      memberEventThread.start();
-      getWaitingThreadPool().execute(new Runnable() {
-        @Override
-        public void run() {
-          // call in background since it might need to send a reply
-          // and we are not ready to send messages until startup is finished
-          setIsStartupThread(Boolean.TRUE);
-          readyForMessages();
-        }
+      getWaitingThreadPool().execute(() -> {
+        // call in background since it might need to send a reply
+        // and we are not ready to send messages until startup is finished
+        setIsStartupThread();
+        readyForMessages();
-      this.readyForMessages = true;
-      this.notifyAll();
+      readyForMessages = true;
+      notifyAll();
-          this.wait();
+          wait();
-    synchronized (this.readyToSendMsgsLock) {
-      this.readyToSendMsgs = true;
-      this.readyToSendMsgsLock.notifyAll();
+    synchronized (readyToSendMsgsLock) {
+      readyToSendMsgs = true;
+      readyToSendMsgsLock.notifyAll();
-    if (this.readyToSendMsgs) {
+    if (readyToSendMsgs) {
-    if (msg instanceof StartupMessage || msg instanceof StartupResponseMessage
-        || msg instanceof AdminMessageType) {
+    if (msg instanceof AdminMessageType) {
-    if (getIsStartupThread() == Boolean.TRUE) {
+    if (isStartupThread() == Boolean.TRUE) {
-    synchronized (this.readyToSendMsgsLock) {
-      while (!this.readyToSendMsgs) {
+    synchronized (readyToSendMsgsLock) {
+      while (!readyToSendMsgs) {
-          this.readyToSendMsgsLock.wait();
+          readyToSendMsgsLock.wait();
-    return this.exceptionInThreads
+    return exceptionInThreads
-    this.exceptionInThreads = false;
+    exceptionInThreads = false;
-    return this.system.getClock().cacheTimeMillis();
+    return system.getClock().cacheTimeMillis();
-    if (Objects.equals(localAddress, name)) {
+    if (Objects.equals(localAddress.getName(), name)) {
-    return this.localAddress;
+    return localAddress;
-    synchronized (this.membersLock) {
-      return this.members.keySet();
+    synchronized (membersLock) {
+      return members.keySet();
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-      if (this.hostedLocatorsAll.isEmpty()) {
-        this.hostedLocatorsAll = new HashMap<>();
+      if (hostedLocatorsAll.isEmpty()) {
+        hostedLocatorsAll = new HashMap<>();
-          new HashMap<>(this.hostedLocatorsAll);
+          new HashMap<>(hostedLocatorsAll);
-      this.hostedLocatorsAll = tmp;
+      hostedLocatorsAll = tmp;
-        if (this.hostedLocatorsWithSharedConfiguration.isEmpty()) {
-          this.hostedLocatorsWithSharedConfiguration = new HashMap<>();
+        if (hostedLocatorsWithSharedConfiguration.isEmpty()) {
+          hostedLocatorsWithSharedConfiguration = new HashMap<>();
-        tmp = new HashMap<>(this.hostedLocatorsWithSharedConfiguration);
+        tmp = new HashMap<>(hostedLocatorsWithSharedConfiguration);
-        this.hostedLocatorsWithSharedConfiguration = tmp;
+        hostedLocatorsWithSharedConfiguration = tmp;
-    synchronized (this.membersLock) {
-      if (this.hostedLocatorsAll.containsKey(member)) {
+    synchronized (membersLock) {
+      if (hostedLocatorsAll.containsKey(member)) {
-            new HashMap<>(this.hostedLocatorsAll);
+            new HashMap<>(hostedLocatorsAll);
-        this.hostedLocatorsAll = tmp;
+        hostedLocatorsAll = tmp;
-      if (this.hostedLocatorsWithSharedConfiguration.containsKey(member)) {
+      if (hostedLocatorsWithSharedConfiguration.containsKey(member)) {
-                this.hostedLocatorsWithSharedConfiguration);
+                hostedLocatorsWithSharedConfiguration);
-        this.hostedLocatorsWithSharedConfiguration = tmp;
+        hostedLocatorsWithSharedConfiguration = tmp;
-    synchronized (this.membersLock) {
-      return this.hostedLocatorsAll.get(member);
+    synchronized (membersLock) {
+      return hostedLocatorsAll.get(member);
-    synchronized (this.membersLock) {
-      return this.hostedLocatorsAll;
+    synchronized (membersLock) {
+      return hostedLocatorsAll;
-    synchronized (this.membersLock) {
-      return this.hostedLocatorsWithSharedConfiguration;
+    synchronized (membersLock) {
+      return hostedLocatorsWithSharedConfiguration;
-    synchronized (this.membersLock) {
-      return this.membersAndAdmin;
+    synchronized (membersLock) {
+      return membersAndAdmin;
-    InternalDistributedMember result = this.members.get(id);
+    InternalDistributedMember result = members.get(id);
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-            Integer.valueOf(vmType)));
+            vmType));
-    return this.localAddress;
+    return localAddress;
-    return this.description;
+    return description;
-      this.closeInProgress = true;
+      closeInProgress = true;
-    final String exceptionStatus = (this.exceptionInThreads()
+    final String exceptionStatus = (exceptionInThreads()
-        new Object[] {this.localAddress, exceptionStatus});
+        new Object[] {localAddress, exceptionStatus});
-      if (this.rootCause instanceof ForcedDisconnectException) {
+      if (rootCause instanceof ForcedDisconnectException) {
-        final Runnable r = new Runnable() {
-          @Override
-          public void run() {
-            try {
-              ConnectionTable.threadWantsSharedResources();
-              sendShutdownMessage();
-            } catch (final CancelException e) {
-              // We were terminated.
-              logger.debug("Cancelled during shutdown message", e);
-            }
+        final Runnable r = () -> {
+          try {
+            ConnectionTable.threadWantsSharedResources();
+            sendShutdownMessage();
+          } catch (final CancelException e) {
+            // We were terminated.
+            logger.debug("Cancelled during shutdown message", e);
-                this.localAddress), false, r);
+                localAddress), false, r);
-      this.shutdownMsgSent = true; // in case sendShutdownMessage failed....
+      shutdownMsgSent = true; // in case sendShutdownMessage failed....
-        this.uncleanShutdown(false);
+        uncleanShutdown(false);
-        final Long delta = Long.valueOf(System.currentTimeMillis() - start);
+        final Long delta = System.currentTimeMillis() - start;
-    es = this.serialThread;
+    es = serialThread;
-    es = this.viewThread;
+    es = viewThread;
-    if (this.serialQueuedExecutorPool != null) {
-      this.serialQueuedExecutorPool.shutdown();
+    if (serialQueuedExecutorPool != null) {
+      serialQueuedExecutorPool.shutdown();
-    es = this.functionExecutionThread;
+    es = functionExecutionThread;
-    es = this.functionExecutionPool;
+    es = functionExecutionPool;
-    es = this.partitionedRegionThread;
+    es = partitionedRegionThread;
-    es = this.partitionedRegionPool;
+    es = partitionedRegionPool;
-    es = this.highPriorityPool;
+    es = highPriorityPool;
-    es = this.waitingPool;
+    es = waitingPool;
-    es = this.prMetaDataCleanupThreadPool;
+    es = prMetaDataCleanupThreadPool;
-    es = this.threadPool;
+    es = threadPool;
-    Thread th = this.memberEventThread;
+    Thread th = memberEventThread;
-    ExecutorService[] allExecutors = new ExecutorService[] {this.serialThread, this.viewThread,
-        this.functionExecutionThread, this.functionExecutionPool, this.partitionedRegionThread,
-        this.partitionedRegionPool, this.highPriorityPool, this.waitingPool,
-        this.prMetaDataCleanupThreadPool, this.threadPool};
+    ExecutorService[] allExecutors = new ExecutorService[] {serialThread, viewThread,
+        functionExecutionThread, functionExecutionPool, partitionedRegionThread,
+        partitionedRegionPool, highPriorityPool, waitingPool,
+        prMetaDataCleanupThreadPool, threadPool};
-
-    this.serialQueuedExecutorPool.awaitTermination(remaining, TimeUnit.MILLISECONDS);
+    serialQueuedExecutorPool.awaitTermination(remaining, TimeUnit.MILLISECONDS);
-    Thread th = this.memberEventThread;
+    Thread th = memberEventThread;
-    String culprits = "";
+    StringBuilder culprits;
-      culprits = "";
-      if (executorAlive(this.serialThread, "serial thread")) {
+      culprits = new StringBuilder();
+      if (executorAlive(serialThread, "serial thread")) {
-        culprits = culprits + " serial thread;";
+        culprits.append(" serial thread;");
-      if (executorAlive(this.viewThread, "view thread")) {
+      if (executorAlive(viewThread, "view thread")) {
-        culprits = culprits + " view thread;";
+        culprits.append(" view thread;");
-      if (executorAlive(this.partitionedRegionThread, "partitioned region thread")) {
+      if (executorAlive(partitionedRegionThread, "partitioned region thread")) {
-        culprits = culprits + " partitioned region thread;";
+        culprits.append(" partitioned region thread;");
-      if (executorAlive(this.partitionedRegionPool, "partitioned region pool")) {
+      if (executorAlive(partitionedRegionPool, "partitioned region pool")) {
-        culprits = culprits + " partitioned region pool;";
+        culprits.append(" partitioned region pool;");
-      if (executorAlive(this.highPriorityPool, "high priority pool")) {
+      if (executorAlive(highPriorityPool, "high priority pool")) {
-        culprits = culprits + " high priority pool;";
+        culprits.append(" high priority pool;");
-      if (executorAlive(this.waitingPool, "waiting pool")) {
+      if (executorAlive(waitingPool, "waiting pool")) {
-        culprits = culprits + " waiting pool;";
+        culprits.append(" waiting pool;");
-      if (executorAlive(this.prMetaDataCleanupThreadPool, "prMetaDataCleanupThreadPool")) {
+      if (executorAlive(prMetaDataCleanupThreadPool, "prMetaDataCleanupThreadPool")) {
-        culprits = culprits + " special waiting pool;";
+        culprits.append(" special waiting pool;");
-      if (executorAlive(this.threadPool, "thread pool")) {
+      if (executorAlive(threadPool, "thread pool")) {
-        culprits = culprits + " thread pool;";
+        culprits.append(" thread pool;");
-    if (this.serialThread != null) {
-      this.serialThread.shutdownNow();
+    if (serialThread != null) {
+      serialThread.shutdownNow();
-    if (this.viewThread != null) {
-      this.viewThread.shutdownNow();
+    if (viewThread != null) {
+      viewThread.shutdownNow();
-    if (this.functionExecutionThread != null) {
-      this.functionExecutionThread.shutdownNow();
+    if (functionExecutionThread != null) {
+      functionExecutionThread.shutdownNow();
-    if (this.functionExecutionPool != null) {
-      this.functionExecutionPool.shutdownNow();
+    if (functionExecutionPool != null) {
+      functionExecutionPool.shutdownNow();
-    if (this.partitionedRegionThread != null) {
-      this.partitionedRegionThread.shutdownNow();
+    if (partitionedRegionThread != null) {
+      partitionedRegionThread.shutdownNow();
-    if (this.partitionedRegionPool != null) {
-      this.partitionedRegionPool.shutdownNow();
+    if (partitionedRegionPool != null) {
+      partitionedRegionPool.shutdownNow();
-    if (this.highPriorityPool != null) {
-      this.highPriorityPool.shutdownNow();
+    if (highPriorityPool != null) {
+      highPriorityPool.shutdownNow();
-    if (this.waitingPool != null) {
-      this.waitingPool.shutdownNow();
+    if (waitingPool != null) {
+      waitingPool.shutdownNow();
-    if (this.prMetaDataCleanupThreadPool != null) {
-      this.prMetaDataCleanupThreadPool.shutdownNow();
+    if (prMetaDataCleanupThreadPool != null) {
+      prMetaDataCleanupThreadPool.shutdownNow();
-    if (this.threadPool != null) {
-      this.threadPool.shutdownNow();
+    if (threadPool != null) {
+      threadPool.shutdownNow();
-    Thread th = this.memberEventThread;
+    Thread th = memberEventThread;
-    return this.shutdownInProgress;
+    return shutdownInProgress;
-      this.closeInProgress = true; // set here also to fix bug 36736
+      closeInProgress = true; // set here also to fix bug 36736
-        if (this.stats != null) {
-          this.stats.close();
+        if (stats != null) {
+          stats.close();
-        if (this.membershipManager != null) {
+        if (membershipManager != null) {
-              this.localAddress);
-          this.membershipManager.disconnect(beforeJoined);
+              localAddress);
+          membershipManager.disconnect(beforeJoined);
-    return this.system;
+    return system;
-    return this.transport;
+    return transport;
-    this.membershipListeners.putIfAbsent(l, Boolean.TRUE);
+    membershipListeners.putIfAbsent(l, Boolean.TRUE);
-    this.membershipListeners.remove(l);
+    membershipListeners.remove(l);
-    return Collections.unmodifiableSet(this.membershipListeners.keySet());
+    return Collections.unmodifiableSet(membershipListeners.keySet());
-    synchronized (this.allMembershipListenersLock) {
+    synchronized (allMembershipListenersLock) {
-          new HashSet<>(this.allMembershipListeners);
+          new HashSet<>(allMembershipListeners);
-      this.allMembershipListeners = newAllMembershipListeners;
+      allMembershipListeners = newAllMembershipListeners;
-    synchronized (this.allMembershipListenersLock) {
+    synchronized (allMembershipListenersLock) {
-          new HashSet<>(this.allMembershipListeners);
+          new HashSet<>(allMembershipListeners);
-      this.allMembershipListeners = newAllMembershipListeners;
+      allMembershipListeners = newAllMembershipListeners;
-  protected boolean isCloseInProgress() {
+  boolean isCloseInProgress() {
-    synchronized (this.membershipViewIdGuard) {
-      this.membershipViewIdAcknowledged = ev.getViewId();
-      this.membershipViewIdGuard.notifyAll();
+    synchronized (membershipViewIdGuard) {
+      membershipViewIdAcknowledged = ev.getViewId();
+      membershipViewIdGuard.notifyAll();
-    if (id <= this.membershipViewIdAcknowledged) {
+    if (id <= membershipViewIdAcknowledged) {
-    synchronized (this.membershipViewIdGuard) {
-      while (this.membershipViewIdAcknowledged < id && !this.stopper.isCancelInProgress()) {
+    synchronized (membershipViewIdGuard) {
+      while (membershipViewIdAcknowledged < id && !stopper.isCancelInProgress()) {
-              this.membershipViewIdAcknowledged);
+              membershipViewIdAcknowledged);
-        this.membershipViewIdGuard.wait();
+        membershipViewIdGuard.wait();
-        if (!ClusterDistributionManager.this.system.isConnected
-            && ClusterDistributionManager.this.isClosed()) {
+        if (!system.isConnected
+            && isClosed()) {
-              ClusterDistributionManager.this.membershipEventQueue.take();
+              membershipEventQueue.take();
-        this.membershipEventQueue.put(ev);
+        membershipEventQueue.put(ev);
-      this.shutdown();
+      shutdown();
-          this.localAddress);
-      MembershipLogger.logShutdown(this.localAddress);
+          localAddress);
+      MembershipLogger.logShutdown(localAddress);
-    if (this.shutdownMsgSent) {
+    if (shutdownMsgSent) {
-          this.getRootCause());
+          getRootCause());
-    return this.closed;
+    return closed;
-    synchronized (this.adminConsolesLock) {
-      HashSet<InternalDistributedMember> tmp = new HashSet<>(this.adminConsoles);
+    synchronized (adminConsolesLock) {
+      HashSet<InternalDistributedMember> tmp = new HashSet<>(adminConsoles);
-      this.adminConsoles = Collections.unmodifiableSet(tmp);
+      adminConsoles = Collections.unmodifiableSet(tmp);
-    return this.stats;
+    return stats;
-      synchronized (this.membersLock) {
+      synchronized (membersLock) {
-    this.receivedStartupResponse = false;
-    boolean ok = false;
+    receivedStartupResponse = false;
+    boolean ok;
-    if (this.rejectionMessage != null) {
+    if (rejectionMessage != null) {
-    boolean receivedAny = this.receivedStartupResponse;
+    boolean receivedAny = receivedStartupResponse;
-          StringBuffer sb = new StringBuffer();
+          StringBuilder sb = new StringBuilder();
-
-                  new Object[] {Integer.toString(allOthers.size()), sb.toString()}));
+                  Integer.toString(allOthers.size()), sb.toString()));
-      synchronized (this.membersLock) {
+      synchronized (membersLock) {
-      String msg = null;
+      String msg;
-            new Object[] {Integer.valueOf(numLeft), unfinishedStartups});
+            new Object[] {numLeft, unfinishedStartups});
-      if (!this.receivedStartupResponse) {
+      if (!receivedStartupResponse) {
-        this.receivedStartupResponse = true;
+        receivedStartupResponse = true;
-      if (theRejectionMessage != null && this.rejectionMessage == null) {
+      if (theRejectionMessage != null && rejectionMessage == null) {
-        this.rejectionMessage = theRejectionMessage;
+        rejectionMessage = theRejectionMessage;
-  /**
-   * Based on a recent JGroups view, return a member that might be the next elder.
-   *
-   * @return the elder candidate, possibly this VM.
-   */
-  private InternalDistributedMember getElderCandidate() {
-    return clusterElderManager.getElderCandidate();
-  }
-
-      synchronized (this.membersLock) {
+      synchronized (membersLock) {
-        Map<InternalDistributedMember, InternalDistributedMember> tmp = new HashMap<>(this.members);
+        Map<InternalDistributedMember, InternalDistributedMember> tmp = new HashMap<>(members);
-          this.members = tmp;
+          members = tmp;
-        Set<InternalDistributedMember> tmp2 = new HashSet<>(this.membersAndAdmin);
+        Set<InternalDistributedMember> tmp2 = new HashSet<>(membersAndAdmin);
-          this.membersAndAdmin = tmp2;
+          membersAndAdmin = tmp2;
-        this.removeHostedLocators(theId);
+        removeHostedLocators(theId);
-    HashMap<InternalDistributedMember, InternalDistributedMember> tmp = null;
-    synchronized (this.membersLock) {
+    HashMap<InternalDistributedMember, InternalDistributedMember> tmp;
+    synchronized (membersLock) {
-      tmp = new HashMap<>(this.members);
+      tmp = new HashMap<>(members);
-      this.members = Collections.unmodifiableMap(tmp);
+      members = Collections.unmodifiableMap(tmp);
-      Set<InternalDistributedMember> stmp = new HashSet<>(this.membersAndAdmin);
+      Set<InternalDistributedMember> stmp = new HashSet<>(membersAndAdmin);
-      this.membersAndAdmin = Collections.unmodifiableSet(stmp);
+      membersAndAdmin = Collections.unmodifiableSet(stmp);
-      this.stats.incNodes(1);
+      stats.incNodes(1);
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-      m = this.membersAndAdmin;
+      m = membersAndAdmin;
-    HashSet<InternalDistributedMember> tmp = null;
-    synchronized (this.membersLock) {
+    HashSet<InternalDistributedMember> tmp;
+    synchronized (membersLock) {
-      tmp = new HashSet<>(this.membersAndAdmin);
+      tmp = new HashSet<>(membersAndAdmin);
-      this.membersAndAdmin = Collections.unmodifiableSet(tmp);
+      membersAndAdmin = Collections.unmodifiableSet(tmp);
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-      if (!this.members.containsKey(theId)) {
+      if (!members.containsKey(theId)) {
-        Set<InternalDistributedMember> tmp = new HashSet<>(this.membersAndAdmin);
+        Set<InternalDistributedMember> tmp = new HashSet<>(membersAndAdmin);
-          this.membersAndAdmin = tmp;
+          membersAndAdmin = tmp;
-    synchronized (this.adminConsolesLock) {
-      if (this.adminConsoles.contains(theId)) {
+    synchronized (adminConsolesLock) {
+      if (adminConsoles.contains(theId)) {
-        Set<InternalDistributedMember> tmp = new HashSet<>(this.adminConsoles);
+        Set<InternalDistributedMember> tmp = new HashSet<>(adminConsoles);
-        this.adminConsoles = tmp;
+        adminConsoles = tmp;
-      String msg = null;
+      String msg;
-    this.membershipManager.shutdownMessageReceived(theId, reason);
+    membershipManager.shutdownMessageReceived(theId, reason);
-        this.stats.incNodes(-1);
+        stats.incNodes(-1);
-      if (this.serialQueuedExecutorPool != null) {
+      if (serialQueuedExecutorPool != null) {
-    InternalDistributedMember theId = this.getDistributionManagerId();
+    InternalDistributedMember theId = getDistributionManagerId();
-      logger.trace("{} Sending {} to {}", this.getDistributionManagerId(), m,
+      logger.trace("{} Sending {} to {}", getDistributionManagerId(), m,
-      this.stats.incSentMessages(1L);
+      stats.incSentMessages(1L);
-      this.shutdownMsgSent = true;
+      shutdownMsgSent = true;
-        return this.viewThread;
+        return viewThread;
-        sendViaMembershipManager(message.getRecipients(), message,
-            ClusterDistributionManager.this, this.stats);
+        sendViaMembershipManager(message.getRecipients(), message, this, stats);
-    Set<InternalDistributedMember> result = null;
-      result = sendOutgoing(message);
+      return sendOutgoing(message);
-      ClusterDistributionManager.this.exceptionInThreads = true;
+      exceptionInThreads = true;
-      logger.fatal(String.format("While pushing message <%s> to %s",
-          new Object[] {message, receiver}),
-          ex);
-      if (message == null || message.forAll())
+      logger.fatal(String.format("While pushing message <%s> to %s", message, receiver), ex);
+      if (message == null || message.forAll()) {
-      result = new HashSet<>();
-      for (int i = 0; i < message.getRecipients().length; i++)
-        result.add(message.getRecipients()[i]);
-      return result;
+      }
+      return new HashSet<>(Arrays.asList(message.getRecipients()));
-    return result;
-    message.schedule(ClusterDistributionManager.this);
-  }
-
-  private List<InternalDistributedMember> getElderCandidates() {
-
-    return clusterElderManager.getElderCandidates();
+    message.schedule(this);
-    return this.threadPool;
+    return threadPool;
-    return this.highPriorityPool;
+    return highPriorityPool;
-    return this.waitingPool;
+    return waitingPool;
-    return this.prMetaDataCleanupThreadPool;
+    return prMetaDataCleanupThreadPool;
-    if (this.partitionedRegionThread != null) {
-      return this.partitionedRegionThread;
+    if (partitionedRegionThread != null) {
+      return partitionedRegionThread;
-      return this.partitionedRegionPool;
+      return partitionedRegionPool;
-    if (this.functionExecutionThread != null) {
-      return this.functionExecutionThread;
+    if (functionExecutionThread != null) {
+      return functionExecutionThread;
-      return this.functionExecutionPool;
+      return functionExecutionPool;
-      return this.serialQueuedExecutorPool.getThrottledSerialExecutor(sender);
+      return serialQueuedExecutorPool.getThrottledSerialExecutor(sender);
-      return this.serialThread;
+      return serialThread;
-      return this.serialQueuedExecutorPool.getSerialQueue(sender);
+      return serialQueuedExecutorPool.getSerialQueue(sender);
-      return this.serialQueue;
+      return serialQueue;
-  /** returns the Threads Monitoring instance */
-    return this.threadMonitor;
+    return threadMonitor;
-    return this.agent;
+    return agent;
-    if (this.agent == null) {
+    if (agent == null) {
-      return this.agent.getTransport().toString();
+      return agent.getTransport().toString();
-    return this.hmMap.get(owner);
+    return hmMap.get(owner);
-        this.hmMap.remove(owner);
+        hmMap.remove(owner);
-      this.hmMap.put(owner, newHm);
+      hmMap.put(owner, newHm);
-      this.hmMap.remove(owner);
+      hmMap.remove(owner);
-    Iterator it = this.hmMap.values().iterator();
+    Iterator it = hmMap.values().iterator();
-    return this.adminConsoles;
+    return adminConsoles;
-      this.threadMonitoring = tMonitoring;
+      threadMonitoring = tMonitoring;
-          queueId = Integer.valueOf((serialQueuedExecutorMap.size() + 1) % MAX_SERIAL_QUEUE_THREAD);
+          queueId = (serialQueuedExecutorMap.size() + 1) % MAX_SERIAL_QUEUE_THREAD;
-          this.stats.getSerialQueueHelper().incThrottleCount();
+          stats.getSerialQueueHelper().incThrottleCount();
-      ExecutorService executor = null;
+      ExecutorService executor;
-      if (SERIAL_QUEUE_BYTE_LIMIT == 0 || this.throttlingDisabled) {
+      if (SERIAL_QUEUE_BYTE_LIMIT == 0 || throttlingDisabled) {
-            this.stats.getSerialQueueHelper());
+            stats.getSerialQueueHelper());
-          this.stats.getSerialPooledProcessorHelper(), threadMonitoring, poolQueue);
+          stats.getSerialPooledProcessorHelper(), threadMonitoring, poolQueue);
-        for (Iterator iter = senderToSerialQueueIdMap.values().iterator(); iter.hasNext();) {
-          Integer value = (Integer) iter.next();
+        for (Integer value : senderToSerialQueueIdMap.values()) {
-      long timeNanos = unit.toNanos(time);
-      long remainingNanos = timeNanos;
+      long remainingNanos = unit.toNanos(time);
-        remainingNanos = timeNanos = (System.nanoTime() - start);
+        remainingNanos = (System.nanoTime() - start);
-    public DMListener(ClusterDistributionManager dm) {
+    DMListener(ClusterDistributionManager dm) {
-      ClusterDistributionManager.this.rootCause = t;
+      rootCause = t;
-      return this.id;
+      return id;
-      return this.whoSuspected;
+      return whoSuspected;
-      return this.reason;
+      return reason;
-      return "member " + getId() + " suspected by: " + this.whoSuspected + " reason: " + reason;
+      return "member " + getId() + " suspected by: " + whoSuspected + " reason: " + reason;
-      return "view installed: " + this.view;
+      return "view installed: " + view;
-      return this.failures;
+      return failures;
-      return this.remaining;
+      return remaining;
-    return this.rootCause;
+    return rootCause;
-    this.rootCause = t;
+    rootCause = t;
-      for (Iterator i = getDistributionManagerIds().iterator(); i.hasNext();) {
-        InternalDistributedMember o = (InternalDistributedMember) i.next();
-        if (SetUtils.intersectsWith(targetAddrs, getEquivalents(o.getInetAddress()))) {
+      for (InternalDistributedMember o : getDistributionManagerIds()) {
+        if (!Collections.disjoint(targetAddrs, getEquivalents(o.getInetAddress()))) {
-    this.parallelGIIs.acquireUninterruptibly();
-    this.stats.incInitialImageRequestsInProgress(1);
+    parallelGIIs.acquireUninterruptibly();
+    stats.incInitialImageRequestsInProgress(1);
-    this.stats.incInitialImageRequestsInProgress(-1);
-    this.parallelGIIs.release();
+    stats.incInitialImageRequestsInProgress(-1);
+    parallelGIIs.release();
-    return this.distributedSystemId;
+    return distributedSystemId;
-      for (Iterator it = ids.iterator(); it.hasNext();) {
-        InternalDistributedMember mbr = (InternalDistributedMember) it.next();
+      for (InternalDistributedMember mbr : ids) {
-            && mbr.getInetAddress().equals(this.localAddress.getInetAddress())) {
+            && mbr.getInetAddress().equals(localAddress.getInetAddress())) {
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-      for (InternalDistributedMember m : this.members.keySet()) {
+      for (InternalDistributedMember m : members.keySet()) {
-    synchronized (this.membersLock) {
+    synchronized (membersLock) {
-      for (InternalDistributedMember m : this.members.keySet()) {
+      for (InternalDistributedMember m : members.keySet()) {
-    this.cache = instance;
+    cache = instance;
-    return this.cache;
+    return cache;
-    InternalCache result = this.cache;
+    InternalCache result = cache;

MOV26 MOV31 MOV31 UPD40 INS31 INS31 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV21 UPD42 UPD42 MOV29 UPD42 MOV44 MOV78 MOV44 MOV78 MOV44 MOV29 MOV83 MOV39 MOV42 MOV44 MOV8 MOV78 INS83 INS39 INS42 MOV44 MOV8 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 MOV43 MOV78 MOV43 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV25 INS25 INS25 INS25 MOV43 MOV43 MOV78 INS42 INS52 INS42 INS42 MOV8 MOV62 MOV8 INS27 MOV8 INS42 INS42 INS42 INS42 INS42 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV5 MOV43 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 MOV74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 MOV25 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 MOV21 MOV25 INS42 MOV60 INS42 INS42 INS42 INS21 INS60 INS42 INS42 INS41 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS42 INS70 INS42 INS42 MOV32 UPD43 INS42 MOV38 INS42 INS38 INS42 MOV42 INS42 MOV74 INS59 INS42 INS42 INS42 INS42 MOV5 INS42 MOV74 INS59 INS74 INS42 INS42 INS42 INS7 MOV74 INS59 MOV27 INS42 MOV32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS70 UPD42 INS42 INS42 INS42 INS44 MOV32 MOV8 INS44 INS42 MOV8 INS74 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 MOV25 INS42 MOV60 INS42 MOV60 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 INS42 INS42 MOV60 MOV42 MOV14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV60 INS42 MOV60 INS42 INS42 INS42 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS44 MOV32 MOV8 MOV7 MOV43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 MOV86 MOV90 UPD43 INS42 MOV8 MOV74 INS42 MOV43 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV74 INS42 UPD74 MOV74 INS42 INS42 INS42 INS42 INS41 MOV74 INS32 INS42 INS42 MOV43 INS42 UPD42 INS38 MOV32 UPD42 MOV32 MOV32 MOV36 MOV36 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV86 MOV90 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS14 INS42 MOV14 INS42 INS42 INS86 MOV27 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS14 UPD42 MOV43 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV33 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 MOV86 MOV90 MOV86 MOV90 MOV86 MOV90 MOV86 MOV90 MOV74 INS42 INS42 INS42 MOV8 UPD43 MOV5 INS74 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 MOV27 INS42 UPD42 UPD42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 UPD43 MOV32 MOV32 INS42 MOV42 UPD42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL83 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL43 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL25 DEL42 DEL32 DEL40 DEL27 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL42 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL45 DEL45 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL31 DEL83 DEL39 DEL42 DEL31 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL4 DEL3 DEL52 DEL42 DEL22 DEL33 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL41 DEL42 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL22 DEL27 DEL42 DEL37 DEL42 DEL42 DEL32 DEL42 DEL2 DEL32 DEL21 DEL24 DEL42 DEL41 DEL42 DEL41 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL83 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22