GEODE-1897: Initial refactor of CreateRegionCommand (#956)

* GEODE-1897: Initial refactor of CreateRegionCommand

* GEODE-1897: Add test categories

* GEODE-1897: Add license headers

* GEODE-1897: Add missing test category

* GEODE-1897: Update miscellaneous test failures

- Also updated sanctionedSerializables

* GEODE-1897: Review updates

* GEODE-1897: More review changes

* GEODE-1897: Integrate better with new develop functionality

* GEODE-1897: Impromptu review update

* GEODE-1897: Spotless how do I love thee... let me count the ways

* GEODE-1897: fixing precheckin failures

-    final String regionPath = regionCreateArgs.getRegionPath();
-    final String useAttributesFrom = regionCreateArgs.getUseAttributesFrom();
-    // If a region path indicates a sub-region, check whether the parent region exists
-    RegionPath regionPathData = new RegionPath(regionPath);
-    String parentRegionPath = regionPathData.getParent();
-    Region<?, ?> parentRegion = null;
-    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
-      parentRegion = cache.getRegion(parentRegionPath);
-      if (parentRegion == null) {
-        throw new IllegalArgumentException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__PARENT_REGION_FOR_0_DOES_NOT_EXIST,
-                new Object[] {regionPath}));
-      }
-
-      if (parentRegion.getAttributes().getPartitionAttributes() != null) {
-        // For a PR, sub-regions are not supported.
-        throw new CreateSubregionException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__0_IS_A_PR_CANNOT_HAVE_SUBREGIONS,
-                parentRegion.getFullPath()));
-      }
-    }
-
-    // One of Region Shortcut OR Use Attributes From has to be given
-    if (regionShortcut == null && useAttributesFrom == null) {
-      throw new IllegalArgumentException(
-          CliStrings.CREATE_REGION__MSG__ONE_OF_REGIONSHORTCUT_AND_USEATTRIBUTESFROM_IS_REQUIRED);
-    }
-
+    // create the region factory using the arguments
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using shortcut {} for {} region attributes : {}", regionShortcut, regionPath,
-            regionAttributes);
-      }
-
-      if (regionAttributes == null) {
-        if (logger.isDebugEnabled()) {
-          logger.debug("Shortcut {} doesn't have attributes in {}", regionShortcut,
-              cache.listRegionAttributes());
-        }
-        throw new IllegalStateException(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__COULD_NOT_LOAD_REGION_ATTRIBUTES_FOR_SHORTCUT_0,
-            regionShortcut));
-      }
+      regionCreateArgs.setRegionAttributes(regionAttributes);
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using Manager's region attributes for {}", regionPath);
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using Attributes : {}", regionAttributes);
-      }
+
-
-    if (!isPartitioned && regionCreateArgs.hasPartitionAttributes()) {
-      throw new IllegalArgumentException(CliStrings.format(
-          CliStrings.CREATE_REGION__MSG__OPTION_0_CAN_BE_USED_ONLY_FOR_PARTITIONEDREGION,
-          regionCreateArgs.getPartitionArgs().getUserSpecifiedPartitionAttributes()));
-    }
-
-      factory.setEntryIdleTimeout(regionExpirationIdleTime.convertToExpirationAttributes());
+      factory.setRegionIdleTimeout(regionExpirationIdleTime.convertToExpirationAttributes());
-      factory.setEntryTimeToLive(regionExpirationTTL.convertToExpirationAttributes());
+      factory.setRegionTimeToLive(regionExpirationTTL.convertToExpirationAttributes());
-    if (regionCreateArgs.isSetDiskSynchronous()) {
+
+    if (regionCreateArgs.isDiskSynchronous() != null) {
-    if (regionCreateArgs.isSetOffHeap()) {
+    if (regionCreateArgs.isOffHeap() != null) {
-    // Set stats enabled
-    if (regionCreateArgs.isSetStatisticsEnabled()) {
+    if (regionCreateArgs.isStatisticsEnabled() != null) {
-    // Set conflation
-    if (regionCreateArgs.isSetEnableAsyncConflation()) {
+    if (regionCreateArgs.isEnableAsyncConflation() != null) {
-    if (regionCreateArgs.isSetEnableSubscriptionConflation()) {
+
+    if (regionCreateArgs.isEnableSubscriptionConflation() != null) {
-    // concurrency check enabled & concurrency level
-    if (regionCreateArgs.isSetConcurrencyChecksEnabled()) {
+    if (regionCreateArgs.isConcurrencyChecksEnabled() != null) {
-    if (regionCreateArgs.isSetConcurrencyLevel()) {
+
+    if (regionCreateArgs.getConcurrencyLevel() != null) {
-    // cloning enabled for delta
-    if (regionCreateArgs.isSetCloningEnabled()) {
+    if (regionCreateArgs.isCloningEnabled() != null) {
-    // multicast enabled for replication
-    if (regionCreateArgs.isSetMcastEnabled()) {
+    if (regionCreateArgs.isMcastEnabled() != null) {
-    if (regionCreateArgs.isSetCompressor()) {
+    if (regionCreateArgs.getCompressor() != null) {
+    // If a region path indicates a sub-region,
+    final String regionPath = regionCreateArgs.getRegionPath();
+    RegionPath regionPathData = new RegionPath(regionPath);
-
-    if (parentRegion != null) {
+    String parentRegionPath = regionPathData.getParent();
+    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
+      Region<?, ?> parentRegion = cache.getRegion(parentRegionPath);
-    if (partitionArgs.isSetPRLocalMaxMemory()) {
+    if (partitionArgs.getPrLocalMaxMemory() != null) {
-    if (partitionArgs.isSetPRTotalMaxMemory()) {
+    if (partitionArgs.getPrTotalMaxMemory() != null) {
-    if (partitionArgs.isSetPRTotalNumBuckets()) {
+    if (partitionArgs.getPrTotalNumBuckets() != null) {
-    if (partitionArgs.isSetPRRedundantCopies()) {
+    if (partitionArgs.getPrRedundantCopies() != null) {
-    if (partitionArgs.isSetPRRecoveryDelay()) {
+    if (partitionArgs.getPrRecoveryDelay() != null) {
-    if (partitionArgs.isSetPRStartupRecoveryDelay()) {
+    if (partitionArgs.getPrStartupRecoveryDelay() != null) {
-    if (regionCreateArgs.isPartitionResolverSet()) {
-      Class<PartitionResolver> partitionResolverClass = forName(
-          regionCreateArgs.getPartitionResolver(), CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+    if (regionCreateArgs.getPartitionArgs().getPartitionResolver() != null) {
+      Class<PartitionResolver> partitionResolverClass =
+          forName(regionCreateArgs.getPartitionArgs().getPartitionResolver(),
+              CliStrings.CREATE_REGION__PARTITION_RESOLVER);

MOV60 MOV60 MOV60 MOV8 MOV8 INS27 INS27 INS27 INS27 INS27 INS27 INS27 INS27 INS27 INS27 MOV27 INS27 INS27 INS27 INS27 INS27 INS27 INS27 MOV21 MOV21 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 MOV60 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS33 MOV32 INS33 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 INS32 MOV42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL38 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL14 DEL53 DEL8 DEL25 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL33 DEL27 DEL33 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32