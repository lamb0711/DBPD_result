GEODE_6883: Creating membership api classes (#3985)

Creating a new membership API package. Starting that package out with
these classes:
* MembershipBuilder - created by moving NetMember and NetLocator factory stuff
  out of MembershipFactory and renaming MembershipFactory to MembershipBuilder
* Membership - Extracted an interface from MembershipManager
* Authenticator - Moved Authenticator to the API package
* MembershipStatistics - Extracted interface from DMStats
* MembershipListener and MessageListener - Creating these new membership
  specific interfaces by splitting up DistributedMembershipListener into two
  separate interfaces.
* MembershipConfig - Extracted interface from ServiceConfig

* Adding an archunit test for the membership API. Ensure that the API only
  depends on other API classes.

* Removing GMSMemberFactory and MemberServices
  These classes were adding another layer to creating a MembershipManager,
  but they didn't actually allow swapping in a different implementation.
  Inlining these methods into the respective NetLocatorFactory,
  NetMemberFactory, and MembershipManagerFactory.

* Removing getDM from DirectChannelListener - We want to get rid of this
  interface in favor of other membership
  specific interfaces that don't depend on core.

-import org.apache.geode.distributed.internal.DMStats;
-import org.apache.geode.distributed.internal.direct.DirectChannelListener;
-import org.apache.geode.distributed.internal.membership.DistributedMembershipListener;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfig;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipListener;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipStatistics;
+import org.apache.geode.distributed.internal.membership.gms.api.MessageListener;
-import org.apache.geode.internal.admin.remote.RemoteTransportConfig;
+  private final ClusterDistributionManager dm;
-  private final DistributedMembershipListener listener;
+  private final MembershipListener listener;
+
+  /**
+   * This is the listener that accepts our membership messages
+   */
+  private final MessageListener messageListener;
-  private int surpriseMemberTimeout;
+  private long surpriseMemberTimeout;
-  class MyDCReceiver implements DirectChannelListener {
+  class MyDCReceiver implements MessageListener {
-    final DirectChannelListener upCall;
+    final MessageListener upCall;
-    MyDCReceiver(DirectChannelListener up) {
+    MyDCReceiver(MessageListener up) {
-    @Override
-    public ClusterDistributionManager getDM() {
-      return upCall.getDM();
-    }
-
-            this.services.getConfig().getDistributionConfig().getSecurityPeerAuthInit();
+            this.services.getConfig().getSecurityPeerAuthInit();
-  public GMSMembershipManager(DistributedMembershipListener listener) {
+  public GMSMembershipManager(MembershipListener listener, MessageListener messageListener,
+      ClusterDistributionManager dm) {
+    this.messageListener = messageListener;
+    this.dm = dm;
-    if (this.listener == null || listener.getDM() == null) {
+    if (dm == null) {
-    DistributedSystem ds = this.listener.getDM().getSystem();
+    DistributedSystem ds = dm.getSystem();
-    listener.messageReceived(msg);
+    messageListener.messageReceived(msg);
-      sender = this.dcReceiver.getDM().getCanonicalId(sender);
+      sender = dm.getCanonicalId(sender);
-      listener.messageReceived(v);
+      messageListener.messageReceived(v);
-   * @param theStats the statistics object to update
-      InternalDistributedMember[] destinations, DistributionMessage content, DMStats theStats)
+      InternalDistributedMember[] destinations, DistributionMessage content)
+    MembershipStatistics theStats = services.getStatistics();
-      DistributionMessage msg, DMStats theStats) throws NotSerializableException {
+      DistributionMessage msg) throws NotSerializableException {
-      result = directChannelSend(destinations, msg, theStats);
+      result = directChannelSend(destinations, msg);
-  public int getSurpriseMemberTimeout() {
+  public long getSurpriseMemberTimeout() {
-        && !services.getConfig().getDistributionConfig().getDisableTcp()) {
+        && !services.getConfig().getDisableTcp()) {
-    int memberTimeout = this.services.getConfig().getDistributionConfig().getMemberTimeout();
+    long memberTimeout = this.services.getConfig().getMemberTimeout();
-  public boolean waitForDeparture(DistributedMember mbr, int timeoutMs)
+  public boolean waitForDeparture(DistributedMember mbr, long timeoutMs)
-    OverflowQueueWithDMStats<Runnable> serialQueue = listener.getDM().getSerialQueue(idm);
+    OverflowQueueWithDMStats<Runnable> serialQueue = dm.getSerialQueue(idm);
-    ClusterDistributionManager dm = listener.getDM();
-      DistributionConfig config = services.getConfig().getDistributionConfig();
-      RemoteTransportConfig transport = services.getConfig().getTransport();
+      MembershipConfig config = services.getConfig();
-      wasReconnectingSystem = transport.getIsReconnectingDS();
+      wasReconnectingSystem = config.getIsReconnectingDS();
-      mcastEnabled = transport.isMcastEnabled();
-      tcpDisabled = transport.isTcpDisabled();
+      mcastEnabled = config.isMcastEnabled();
+      tcpDisabled = config.isTcpDisabled();
-        dcReceiver = new MyDCReceiver(listener);
+        dcReceiver = new MyDCReceiver(messageListener);
-          Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "surprise-member-timeout",
-              surpriseMemberTimeout).intValue();
+          Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "surprise-member-timeout",
+              surpriseMemberTimeout).longValue();
-      DistributionConfig config = services.getConfig().getDistributionConfig();
-
-        directChannel = new DirectChannel(GMSMembershipManager.this, dcReceiver, config);
+        directChannel = new DirectChannel(GMSMembershipManager.this, dcReceiver, dm);
-          loc.stop(true, !services.getConfig().getDistributionConfig().getDisableAutoReconnect(),
+          loc.stop(true, !services.getConfig().getDisableAutoReconnect(),
-      ClusterDistributionManager dm = listener.getDM();
-      ClusterDistributionManager dm = listener.getDM();

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS83 INS83 MOV43 INS59 UPD43 INS29 INS83 INS83 INS43 INS59 UPD39 UPD43 INS44 INS44 UPD39 INS42 UPD42 INS65 INS42 INS42 UPD42 UPD43 UPD43 INS43 INS42 MOV43 INS42 INS21 INS21 INS60 UPD39 INS66 UPD42 UPD43 UPD42 INS42 INS7 INS7 INS27 INS43 INS59 UPD39 UPD42 INS22 INS42 INS22 INS42 INS42 MOV33 UPD42 INS42 INS42 INS32 MOV32 UPD43 INS52 INS42 INS52 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 MOV32 UPD42 INS42 INS9 INS38 INS9 MOV32 UPD42 DEL42 DEL78 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL32 DEL52 DEL42 DEL22 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL38 DEL9 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60