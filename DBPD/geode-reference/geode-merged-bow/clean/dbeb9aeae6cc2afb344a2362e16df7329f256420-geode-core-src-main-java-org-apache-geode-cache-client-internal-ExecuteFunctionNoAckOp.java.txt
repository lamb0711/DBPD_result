Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Does a Execution of function on server (possibly without region/cache) 
- * It does not get the resulf from the server (follows Fire&Forget approch)
+ * Does a Execution of function on server (possibly without region/cache) It does not get the resulf
+ * from the server (follows Fire&Forget approch)
+ * 
-  
+
-   * Does a execute Function on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a execute Function on a server using connections from the given pool to communicate with
+   * the server.
-   * @param pool
-   *                the pool to use to communicate with the server.
-   * @param function
-   *                of the function to be executed
-   * @param args
-   *                specified arguments to the application function
+   * @param pool the pool to use to communicate with the server.
+   * @param function of the function to be executed
+   * @param args specified arguments to the application function
-  public static void execute(PoolImpl pool, Function function,
-      Object args, MemberMappedArgument memberMappedArg,
-      boolean allServers, byte hasResult, boolean isFnSerializationReqd, String[] groups) {
+  public static void execute(PoolImpl pool, Function function, Object args,
+      MemberMappedArgument memberMappedArg, boolean allServers, byte hasResult,
+      boolean isFnSerializationReqd, String[] groups) {
-    AbstractOp op = new ExecuteFunctionNoAckOpImpl(function, args, memberMappedArg,
-        hasResult, isFnSerializationReqd, groups, allServers);
+    AbstractOp op = new ExecuteFunctionNoAckOpImpl(function, args, memberMappedArg, hasResult,
+        isFnSerializationReqd, groups, allServers);
-          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to all servers using pool: " +pool);
+          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:"
+              + op.getMessage() + " to all servers using pool: " + pool);
-        servers = pool.getCurrentServers();
+        servers = pool.getConnectionSource().getAllServers();
-        while (i.hasNext()) {          
-          pool.executeOn((ServerLocation)i.next(), op);
+        while (i.hasNext()) {
+          pool.executeOn((ServerLocation) i.next(), op);
-      }
-      else { 
+      } else {
-          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to server using pool: " + pool + " with groups:" + Arrays.toString(groups) + " all members:" + allServers);
+          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:"
+              + op.getMessage() + " to server using pool: " + pool + " with groups:"
+              + Arrays.toString(groups) + " all members:" + allServers);
-        pool.execute(op,0);       
+        pool.execute(op, 0);
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        logger.debug("ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:" + op.getMessage() + " to server using pool: " +pool, ex);
+        logger.debug(
+            "ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:"
+                + op.getMessage() + " to server using pool: " + pool,
+            ex);
-        throw new FunctionException(
-            "Unexpected exception during function execution:", ex);
+        throw new FunctionException("Unexpected exception during function execution:", ex);
-  public static void execute(PoolImpl pool, String functionId,
-      Object args, MemberMappedArgument memberMappedArg,
-      boolean allServers, byte hasResult, boolean isFnSerializationReqd, boolean isHA, boolean optimizeForWrite, String[] groups) {
+  public static void execute(PoolImpl pool, String functionId, Object args,
+      MemberMappedArgument memberMappedArg, boolean allServers, byte hasResult,
+      boolean isFnSerializationReqd, boolean isHA, boolean optimizeForWrite, String[] groups) {
-    AbstractOp op = new ExecuteFunctionNoAckOpImpl(functionId, args, memberMappedArg,
-        hasResult, isFnSerializationReqd, isHA, optimizeForWrite, groups, allServers);
+    AbstractOp op = new ExecuteFunctionNoAckOpImpl(functionId, args, memberMappedArg, hasResult,
+        isFnSerializationReqd, isHA, optimizeForWrite, groups, allServers);
-          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to all servers using pool: " +pool);
+          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:"
+              + op.getMessage() + " to all servers using pool: " + pool);
-        servers = pool.getCurrentServers();
+        servers = pool.getConnectionSource().getAllServers();
-        while (i.hasNext()) {          
-          pool.executeOn((ServerLocation)i.next(), op);
+        while (i.hasNext()) {
+          pool.executeOn((ServerLocation) i.next(), op);
-      }
-      else {        
+      } else {
-          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to server using pool: " + pool + " with groups:" + Arrays.toString(groups) + " all members:" + allServers);
+          logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:"
+              + op.getMessage() + " to server using pool: " + pool + " with groups:"
+              + Arrays.toString(groups) + " all members:" + allServers);
-        pool.execute(op,0);       
+        pool.execute(op, 0);
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        logger.debug("ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:" + op.getMessage() + " to server using pool: " +pool, ex);
+        logger.debug(
+            "ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:"
+                + op.getMessage() + " to server using pool: " + pool,
+            ex);
-        throw new FunctionException(
-            "Unexpected exception during function execution:", ex);
+        throw new FunctionException("Unexpected exception during function execution:", ex);
-  
+
-     * @throws org.apache.geode.SerializationException
-     *                 if serialization fails
+     * @throws org.apache.geode.SerializationException if serialization fails
-        MemberMappedArgument memberMappedArg, byte hasResult,
-        boolean isFnSerializationReqd, String[] groups, boolean allMembers) {
+        MemberMappedArgument memberMappedArg, byte hasResult, boolean isFnSerializationReqd,
+        String[] groups, boolean allMembers) {
-      byte functionState = AbstractExecution.getFunctionState(function.isHA(),
-          function.hasResult(), function.optimizeForWrite());
-      getMessage().addBytesPart(new byte[]{functionState});
-      if(isFnSerializationReqd){
-        getMessage().addStringOrObjPart(function); 
-      }
-      else{
-        getMessage().addStringOrObjPart(function.getId()); 
+      byte functionState = AbstractExecution.getFunctionState(function.isHA(), function.hasResult(),
+          function.optimizeForWrite());
+      getMessage().addBytesPart(new byte[] {functionState});
+      if (isFnSerializationReqd) {
+        getMessage().addStringOrObjPart(function);
+      } else {
+        getMessage().addStringOrObjPart(function.getId());
-        MemberMappedArgument memberMappedArg, byte hasResult,
-        boolean isFnSerializationReqd, boolean isHA, boolean optimizeForWrite,
-        String[] groups, boolean allMembers) {
+        MemberMappedArgument memberMappedArg, byte hasResult, boolean isFnSerializationReqd,
+        boolean isHA, boolean optimizeForWrite, String[] groups, boolean allMembers) {
-      getMessage().addBytesPart(
-          new byte[] { AbstractExecution.getFunctionState(isHA,
-              hasResult == (byte)1 ? true : false, optimizeForWrite) });
+      getMessage().addBytesPart(new byte[] {AbstractExecution.getFunctionState(isHA,
+          hasResult == (byte) 1 ? true : false, optimizeForWrite)});
-    @Override  
+    @Override
-      }
-      else {
+      } else {
-          Throwable t = (Throwable)part.getObject();
-          logger.warn(LocalizedMessage.create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION), t);
-        }
-        else if (isErrorResponse(msgType)) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION));
-        }
-        else {
-          throw new InternalGemFireError("Unexpected message type "
-              + MessageType.getString(msgType));
+          Throwable t = (Throwable) part.getObject();
+          logger.warn(LocalizedMessage
+              .create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION), t);
+        } else if (isErrorResponse(msgType)) {
+          logger.warn(LocalizedMessage
+              .create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION));
+        } else {
+          throw new InternalGemFireError(
+              "Unexpected message type " + MessageType.getString(msgType));
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override
-

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 UPD42 INS32 UPD42 MOV42 INS42 MOV42 INS42