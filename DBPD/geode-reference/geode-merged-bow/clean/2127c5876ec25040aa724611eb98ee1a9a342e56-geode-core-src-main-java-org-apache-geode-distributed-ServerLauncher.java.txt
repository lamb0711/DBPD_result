ServerLauncher.start() waits for startup tasks to complete

- Extract ControllableProcess interface
- Improve testability of ServerLauncher

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.concurrent.CompletableFuture;
+import org.apache.geode.internal.process.FileControllableProcess;
+    process = builder.getControllableProcess();
-        process = new ControllableProcess(controlHandler, new File(getWorkingDirectory()),
-            ProcessType.SERVER, isForcing());
+        // TODO Aaron redo with factory
+        if (process == null) {
+          process = new FileControllableProcess(controlHandler, new File(getWorkingDirectory()),
+              ProcessType.SERVER, isForcing());
+        }
-          startCacheServer(cache, startTime);
+          startCacheServer(cache);
+        awaitStartupTasks(cache, startTime);
+
-   * @param startTime the system clock time at which the start method was called
-  @VisibleForTesting
-  void startCacheServer(final Cache cache, long startTime) throws IOException {
+  private void startCacheServer(final Cache cache) throws IOException {
+  }
+  private void awaitStartupTasks(Cache cache, long startTime) {
-    ((InternalResourceManager) cache.getResourceManager())
-        .runWhenStartupTasksComplete(afterStartup, exceptionAction);
+    CompletableFuture<Void> startupTasks =
+        ((InternalResourceManager) cache.getResourceManager())
+            .runWhenStartupTasksComplete(afterStartup, exceptionAction);
+
+    startupTasks.join();
-
+    private ControllableProcess controllableProcess;
-      return this.startupExceptionAction;
+      return startupExceptionAction;
-      return this.serverLauncherCacheProvider;
+      return serverLauncherCacheProvider;
+    }
+
+    /**
+     * Sets the {@code ControllableProcess} to use when starting the server.
+     *
+     * @param controllableProcess the controllable process to use
+     * @return this builder
+     */
+    Builder setControllableProcess(ControllableProcess controllableProcess) {
+      this.controllableProcess = controllableProcess;
+      return this;
+    }
+
+    /**
+     * Gets the {@code ControllableProcess} used when starting the server.
+     *
+     * @return the controllable process
+     */
+    ControllableProcess getControllableProcess() {
+      return controllableProcess;

INS26 INS26 INS40 INS40 INS31 INS83 INS83 INS39 INS42 INS44 MOV44 INS8 INS23 INS31 INS31 INS21 INS43 INS42 MOV60 MOV60 INS60 INS21 INS83 INS43 INS59 INS29 INS43 INS42 INS44 INS8 INS29 INS43 INS42 INS8 INS7 INS42 INS74 INS59 INS32 INS42 INS42 INS65 INS65 INS65 INS42 MOV43 INS42 INS21 INS41 INS65 INS65 INS42 INS41 INS42 INS32 INS43 INS43 INS42 MOV32 INS42 INS42 INS42 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS7 INS52 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS66 INS22 INS42 INS66 INS25 INS21 INS52 INS42 INS27 INS8 INS32 INS42 INS33 MOV21 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL66 DEL65 DEL42 DEL78 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22