GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
-import static org.apache.geode.internal.lang.SystemPropertyHelper.PERSISTENT_VIEW_RETRY_TIMEOUT_SECONDS;
-import static org.apache.geode.internal.lang.SystemPropertyHelper.getProductIntegerProperty;
+import static java.time.Instant.now;
-import java.util.List;
-import java.util.Set;
-import org.apache.geode.CancelCriterion;
+/**
+ * Provides warning logging for persistence advisors while waiting for membership changes.
+ */
+
-  private final Runnable warning;
-  private final BooleanSupplier cancelCondition;
+  private final BooleanSupplier cancelCondition;
+  private final Runnable warning;
-  public MembershipChangeListener(InternalPersistenceAdvisor persistenceAdvisor) {
-    warningDelay = warningDelay(persistenceAdvisor);
-    cancelCondition = cancelCondition(persistenceAdvisor);
-    warning = persistenceAdvisor::logWaitingForMembers;
-    pollDuration = pollDuration();
+  /**
+   * Please use {@link MembershipChangeListenerFactory} to create instances.
+   *
+   * @param warningDelay delay before logging the warning once
+   * @param pollDuration timeout before returning from wait for change
+   * @param cancelCondition indicates if wait for change has been cancelled
+   * @param warning simple runnable for logging the warning
+   */
+  MembershipChangeListener(Duration warningDelay, Duration pollDuration,
+      BooleanSupplier cancelCondition, Runnable warning) {
+    this.warningDelay = warningDelay;
+    this.pollDuration = pollDuration;
+    this.cancelCondition = cancelCondition;
+    this.warning = warning;
-  private Duration warningDelay(InternalPersistenceAdvisor persistenceAdvisor) {
-    return Duration.ofSeconds(persistenceAdvisor.getCacheDistributionAdvisor()
-        .getDistributionManager().getConfig().getAckWaitThreshold());
-  }
-
+  /**
+   * Wait for membership change and log warning after waiting at least the warning delay.
+   */
-    Instant now = Instant.now();
+    Instant now = now();
-    while (!membershipChanged && !cancelCondition.getAsBoolean()
-        && Instant.now().isBefore(timeoutTime)) {
+    while (!membershipChanged && !cancelCondition.getAsBoolean() && now().isBefore(timeoutTime)) {
+
-    if (!warned && warningTime.isBefore(Instant.now())) {
+    if (!warned && warningTime.isBefore(now())) {
-  public void memberSuspect(DistributionManager distributionManager, InternalDistributedMember id,
-      InternalDistributedMember whoSuspected, String reason) {}
-
-  @Override
-  public void quorumLost(DistributionManager distributionManager,
-      Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {}
-
-  @Override
-
-  private static BooleanSupplier cancelCondition(InternalPersistenceAdvisor persistenceAdvisor) {
-    CancelCriterion cancelCriterion =
-        persistenceAdvisor.getCacheDistributionAdvisor().getAdvisee().getCancelCriterion();
-    return () -> {
-      persistenceAdvisor.checkInterruptedByShutdownAll();
-      cancelCriterion.checkCancelInProgress(null);
-      return persistenceAdvisor.isClosed();
-    };
-  }
-
-  private static Duration pollDuration() {
-    return Duration
-        .ofSeconds(getProductIntegerProperty(PERSISTENT_VIEW_RETRY_TIMEOUT_SECONDS).orElse(5));
-  }

MOV26 MOV23 MOV23 UPD40 INS29 INS31 INS65 INS29 INS42 MOV44 MOV44 MOV44 MOV44 MOV8 INS29 INS66 INS65 INS65 INS65 INS65 INS65 MOV43 UPD42 MOV43 UPD42 MOV43 INS42 INS43 UPD42 INS21 MOV21 MOV21 INS21 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 MOV42 INS7 INS7 INS7 INS7 INS66 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL86 DEL41 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL90 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL32 DEL41 DEL8 DEL31