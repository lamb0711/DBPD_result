GEODE-2860: Refactor use of EventTracker

  * change EventTracker to an interface with two implementations
  * move as much logic out of LocalRegion down into subclasses that
    make use EventTracker
  * move and refactor static inner classes in EventTracker into own
    class files
  * migrate some of event-focused classes into a new sub package
  * add tests for existing logic from EventTracker

This closes #638

+import org.apache.geode.internal.cache.event.EventTracker;
+import org.apache.geode.internal.cache.event.NonDistributedEventTracker;
-  /** tracks threadID->seqno information for this region */
-  EventTracker eventTracker;
-
+  private final EventTracker eventTracker;
+
-    createEventTracker();
-
+    eventTracker = createEventTracker();
+  }
+
+  protected EventTracker createEventTracker() {
+    return NonDistributedEventTracker.getInstance();
-   * initialize the event tracker. Not all region implementations want or need one of these. Regions
-   * that require one should reimplement this method and create one like so:
-   *
-   * <pre>
-   * {@code
-   * this.eventTracker = new EventTracker(this.cache);
-   * this.eventTracker.start();
-   * }
-   * </pre>
+   * Other region classes may track events using different mechanisms than EventTrackers or may not
+   * track events at all
-  void createEventTracker() {
-    // if LocalRegion is changed to have an event tracker, then the initialize()
-    // method should be changed to set it to "initialized" state when the
-    // region finishes initialization
-  }
-
-  /**
-   * Other region classes may track events using different mechanisms than EventTrackers
-   */
-  EventTracker getEventTracker() {
-    return this.eventTracker;
+  public EventTracker getEventTracker() {
+    return eventTracker;
-    if (this.eventTracker != null) {
-      this.eventTracker.stop();
-    }
+    getEventTracker().stop();
-      if (this.eventTracker != null) {
-        this.eventTracker.stop();
-      }
+      getEventTracker().stop();
-    if (this.eventTracker != null) {
-      return this.eventTracker.getState();
-    } else {
-      return null;
-    }
+    return getEventTracker().getState();
-    if (this.eventTracker != null) {
-      this.eventTracker.recordState(provider, state);
-    }
+    getEventTracker().recordState(provider, state);
-    if (this.eventTracker != null) {
-      this.eventTracker.recordEvent(event);
-    }
+    getEventTracker().recordEvent(event);
-    boolean isDuplicate = false;
-
-    if (this.eventTracker != null) {
-      // bug 41289 - wait for event tracker to be initialized before checkin
-      // so that an operation intended for a previous version of a bucket
-      // is not prematurely applied to a new version of the bucket
-      if (this.isUsedForPartitionedRegionBucket()) {
-        try {
-          this.eventTracker.waitOnInitialization();
-        } catch (InterruptedException ie) {
-          this.stopper.checkCancelInProgress(ie);
-          Thread.currentThread().interrupt();
-        }
-      }
-
-      isDuplicate = this.eventTracker.hasSeenEvent(event);
-      if (isDuplicate) {
-        event.setPossibleDuplicate(true);
-        if (getConcurrencyChecksEnabled() && event.getVersionTag() == null) {
-          if (event.isBulkOpInProgress()) {
-            event.setVersionTag(findVersionTagForClientBulkOp(event.getEventId()));
-          } else {
-            event.setVersionTag(findVersionTagForClientEvent(event.getEventId()));
-          }
-        }
-      } else {
-        // bug #48205 - a retried PR operation may already have a version assigned to it
-        // in another VM
-        if (event.isPossibleDuplicate() && event.getRegion().concurrencyChecksEnabled
-            && event.getVersionTag() == null && event.getEventId() != null) {
-          boolean isBulkOp = event.getOperation().isPutAll() || event.getOperation().isRemoveAll();
-          VersionTag tag = FindVersionTagOperation.findVersionTag(event.getRegion(),
-              event.getEventId(), isBulkOp);
-          event.setVersionTag(tag);
-        }
-      }
-    }
-
-    return isDuplicate;
+    return getEventTracker().hasSeenEvent(event);
-   * tries to find the version tag for a replayed client event
+   * tries to find the version tag for a event
-  public VersionTag findVersionTagForClientEvent(EventID eventId) {
-    if (this.eventTracker != null) {
-      return this.eventTracker.findVersionTag(eventId);
-    }
-    return null;
-  }
-
-  public VersionTag findVersionTagForGatewayEvent(EventID eventId) {
-    if (this.eventTracker != null) {
-      return this.eventTracker.findVersionTagForGateway(eventId);
-    }
-    return null;
+  public VersionTag findVersionTagForEvent(EventID eventId) {
+    return getEventTracker().findVersionTagForSequence(eventId);
-    if (eventId == null) {
-      return null;
-    }
-    if (this.eventTracker != null) {
-      return this.eventTracker.findVersionTagForBulkOp(eventId);
-    }
-    return null;
+    return getEventTracker().findVersionTagForBulkOp(eventId);
-    if (eventID == null) {
-      return false;
-    }
-    boolean isDuplicate = false;
-    if (this.eventTracker != null) {
-      // bug 41289 - wait for event tracker to be initialized before checkin
-      // so that an operation intended for a previous version of a bucket
-      // is not prematurely applied to a new version of the bucket
-      if (this.isUsedForPartitionedRegionBucket()) {
-        try {
-          this.eventTracker.waitOnInitialization();
-        } catch (InterruptedException ie) {
-          this.stopper.checkCancelInProgress(ie);
-          Thread.currentThread().interrupt();
-        }
-      }
-      isDuplicate = this.eventTracker.hasSeenEvent(eventID, null);
-    }
-    return isDuplicate;
+    return getEventTracker().hasSeenEvent(eventID);
-    if (this.eventTracker != null && !isTX()) {
-      this.eventTracker.syncBulkOp(task, eventId);
-    } else {
-      task.run();
-    }
+    getEventTracker().syncBulkOp(task, eventId, isTX());
-    if (this.eventTracker != null && !isTX()) {
-      this.eventTracker.recordBulkOpStart(membershipID, eventID);
+    if (!isTX()) {
+      getEventTracker().recordBulkOpStart(eventID, membershipID);
-    return this.eventTracker != null && this.eventTracker.isInitialized();
-  }
-
-  /**
-   * @return true if this region has an event tracker
-   */
-  boolean hasEventTracker() {
-    return this.eventTracker != null;
+    return getEventTracker().isInitialized();
-      if (this.eventTracker != null) {
-        this.eventTracker.stop();
-      }
+      getEventTracker().stop();

INS26 INS26 MOV23 MOV31 INS40 INS40 INS83 INS83 MOV21 INS83 MOV43 INS83 INS43 INS8 INS8 INS8 INS8 INS29 MOV43 UPD42 MOV44 INS8 MOV29 MOV43 MOV44 INS8 INS8 INS8 INS41 INS42 MOV21 MOV41 MOV21 MOV21 INS41 INS65 INS65 MOV41 MOV41 INS41 MOV21 INS7 INS32 UPD66 INS66 INS42 INS32 INS66 INS66 INS32 MOV38 INS32 INS42 MOV32 INS42 INS42 INS32 MOV21 INS32 INS32 INS32 INS32 MOV42 MOV42 INS32 UPD42 INS32 INS32 MOV42 MOV42 INS32 INS32 INS32 MOV42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL8 DEL39 DEL42 DEL9 DEL59 DEL60 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL33 DEL41 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL33 DEL41 DEL8 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL33 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL27 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL32 DEL38 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL32 DEL27 DEL66 DEL65 DEL29 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25