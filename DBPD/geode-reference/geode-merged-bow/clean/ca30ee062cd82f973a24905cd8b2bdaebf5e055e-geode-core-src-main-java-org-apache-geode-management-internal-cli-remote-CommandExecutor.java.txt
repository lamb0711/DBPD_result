GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
-import org.springframework.shell.event.ParseResult;
+import org.apache.geode.distributed.ClusterConfigurationService;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-  public Object execute(ParseResult parseResult) {
+  public Object execute(GfshParseResult parseResult) {
-  public Object execute(Object command, ParseResult parseResult) {
+  public Object execute(Object command, GfshParseResult parseResult) {
-  protected Object invokeCommand(Object command, ParseResult parseResult) {
+  protected Object invokeCommand(Object command, GfshParseResult parseResult) {
-    return ReflectionUtils.invokeMethod(parseResult.getMethod(), command,
-        parseResult.getArguments());
+
+    Object result =
+        ReflectionUtils.invokeMethod(parseResult.getMethod(), command, parseResult.getArguments());
+
+    if (!(command instanceof SingleGfshCommand)) {
+      return result;
+    }
+
+    SingleGfshCommand gfshCommand = (SingleGfshCommand) command;
+    CommandResult commandResult = (CommandResult) result;
+    if (commandResult.getStatus() == Result.Status.ERROR) {
+      return result;
+    }
+
+    // if command result is ok, we will need to see if we need to update cluster configuration
+    ClusterConfigurationService ccService = gfshCommand.getConfigurationService();
+    if (parseResult.getParamValue("member") != null || ccService == null) {
+      commandResult.setCommandPersisted(false);
+      return commandResult;
+    }
+
+    String groupInput = parseResult.getParamValueAsString("group");
+    if (groupInput == null) {
+      groupInput = "cluster";
+    }
+    String[] groups = groupInput.split(",");
+    for (String group : groups) {
+      ccService.updateCacheConfig(group, cc -> {
+        try {
+          gfshCommand.updateClusterConfig(group, cc, commandResult.getConfigObject());
+        } catch (Exception e) {
+          logger.error("failed to update cluster config for " + group, e);
+          // for now, if one cc update failed, we will set this flag. Will change this when we can
+          // add lines to the result returned by the command
+          commandResult.setCommandPersisted(false);
+          return null;
+        }
+        return cc;
+      });
+    }
+    return commandResult;

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS43 INS8 UPD43 UPD43 INS42 UPD43 MOV25 INS60 INS25 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS70 INS41 UPD42 UPD42 UPD42 MOV43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS5 INS59 INS44 INS42 INS8 INS42 INS42 MOV32 INS36 MOV41 INS42 INS42 INS11 INS42 INS42 INS11 INS32 INS40 INS41 INS42 INS42 INS32 INS27 INS27 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS62 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS33 INS32 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS45 INS42 INS42 INS42 INS86 INS42 INS59 INS8 INS42 INS54 INS41 INS8 INS12 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS33 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS9 INS45 INS42 DEL8