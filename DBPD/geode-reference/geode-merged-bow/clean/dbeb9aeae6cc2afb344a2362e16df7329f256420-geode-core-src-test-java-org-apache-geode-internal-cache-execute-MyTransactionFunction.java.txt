Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    RegionFunctionContext ctx = (RegionFunctionContext)context;
+    RegionFunctionContext ctx = (RegionFunctionContext) context;
-    ArrayList args = (ArrayList)ctx.getArguments();
-    Integer testOperation = (Integer)args.get(0);
+    ArrayList args = (ArrayList) ctx.getArguments();
+    Integer testOperation = (Integer) args.get(0);
-    case PRTransactionDUnitTest.VERIFY_TX:
-      verifyTransactionExecution(ctx);
-      ctx.getDataSet().getCache().getLogger().info(
-          "verifyTransactionExecution Passed");
-      break;
-    case PRTransactionDUnitTest.VERIFY_ROLLBACK:
-      verifyTransactionRollback(ctx);
-      ctx.getDataSet().getCache().getLogger().info(
-          "verifyTransactionRollback Passed");
-      break;
-    case PRTransactionDUnitTest.VERIFY_DESTROY:
-      verifyDestroyOperation(ctx);
-      ctx.getDataSet().getCache().getLogger().info("verifyDestroy Passed");
-      break;
-    case PRTransactionDUnitTest.VERIFY_INVALIDATE:
-      verifyInvalidateOperation(ctx);
-      ctx.getDataSet().getCache().getLogger().info("verifyInvalidate Passed");
-      break;
-    case PRTransactionDUnitTest.VERIFY_NON_COLOCATION:
-      verifyNonCoLocatedOpsRejection(ctx);
-      ctx.getDataSet().getCache().getLogger().info(
-          "verifyNonCoLocatedOpsRejection Passed");
-      break;
-    case PRTransactionDUnitTest.VERIFY_LISTENER_CALLBACK:
-      verifyListenerCallback(ctx);
-      break;
-    case PRTransactionDUnitTest.VERIFY_TXSTATE_CONFLICT:
-      verifyTxStateAndConflicts(ctx);
-      break;
-    case PRTransactionDUnitTest.VERIFY_REP_READ:
-      verifyRepeatableRead(ctx);
-      break;
+      case PRTransactionDUnitTest.VERIFY_TX:
+        verifyTransactionExecution(ctx);
+        ctx.getDataSet().getCache().getLogger().info("verifyTransactionExecution Passed");
+        break;
+      case PRTransactionDUnitTest.VERIFY_ROLLBACK:
+        verifyTransactionRollback(ctx);
+        ctx.getDataSet().getCache().getLogger().info("verifyTransactionRollback Passed");
+        break;
+      case PRTransactionDUnitTest.VERIFY_DESTROY:
+        verifyDestroyOperation(ctx);
+        ctx.getDataSet().getCache().getLogger().info("verifyDestroy Passed");
+        break;
+      case PRTransactionDUnitTest.VERIFY_INVALIDATE:
+        verifyInvalidateOperation(ctx);
+        ctx.getDataSet().getCache().getLogger().info("verifyInvalidate Passed");
+        break;
+      case PRTransactionDUnitTest.VERIFY_NON_COLOCATION:
+        verifyNonCoLocatedOpsRejection(ctx);
+        ctx.getDataSet().getCache().getLogger().info("verifyNonCoLocatedOpsRejection Passed");
+        break;
+      case PRTransactionDUnitTest.VERIFY_LISTENER_CALLBACK:
+        verifyListenerCallback(ctx);
+        break;
+      case PRTransactionDUnitTest.VERIFY_TXSTATE_CONFLICT:
+        verifyTxStateAndConflicts(ctx);
+        break;
+      case PRTransactionDUnitTest.VERIFY_REP_READ:
+        verifyRepeatableRead(ctx);
+        break;
-  }  
+  }
-    CacheTransactionManager mgr = custPR.getCache()
-        .getCacheTransactionManager();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer newCus = (Customer)args.get(2);
-    OrderId orderId = (OrderId)args.get(3);
-    Order order = (Order)args.get(4);
+    CacheTransactionManager mgr = custPR.getCache().getCacheTransactionManager();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer newCus = (Customer) args.get(2);
+    OrderId orderId = (OrderId) args.get(3);
+    Order order = (Order) args.get(4);
-    Customer commitedCust = (Customer)custPR.get(custId);
-    Assert.assertTrue(newCus.equals(commitedCust), "Expected Customer to be:"
-        + newCus + " but was:" + commitedCust);
-    Order commitedOrder = (Order)orderPR.get(orderId);
-    Assert.assertTrue(order.equals(commitedOrder), "Expected Order to be:"
-        + order + " but was:" + commitedOrder);
-    //put a never before put key
-    OrderId newOrderId = new OrderId(4000,custId);
+    Customer commitedCust = (Customer) custPR.get(custId);
+    Assert.assertTrue(newCus.equals(commitedCust),
+        "Expected Customer to be:" + newCus + " but was:" + commitedCust);
+    Order commitedOrder = (Order) orderPR.get(orderId);
+    Assert.assertTrue(order.equals(commitedOrder),
+        "Expected Order to be:" + order + " but was:" + commitedOrder);
+    // put a never before put key
+    OrderId newOrderId = new OrderId(4000, custId);
-    mgr.commit();    
-    commitedOrder = (Order)orderPR.get(newOrderId);
-    Assert.assertTrue(newOrder.equals(commitedOrder), "Expected Order to be:"
-        + order + " but was:" + commitedOrder);
+    mgr.commit();
+    commitedOrder = (Order) orderPR.get(newOrderId);
+    Assert.assertTrue(newOrder.equals(commitedOrder),
+        "Expected Order to be:" + order + " but was:" + commitedOrder);
-    CacheTransactionManager mgr = custPR.getCache()
-        .getCacheTransactionManager();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer newCus = (Customer)args.get(2);
-    OrderId orderId = (OrderId)args.get(3);
-    Order order = (Order)args.get(4);
-    Customer oldCustomer = (Customer)custPR.get(custId);
+    CacheTransactionManager mgr = custPR.getCache().getCacheTransactionManager();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer newCus = (Customer) args.get(2);
+    OrderId orderId = (OrderId) args.get(3);
+    Order order = (Order) args.get(4);
+    Customer oldCustomer = (Customer) custPR.get(custId);
-    commitedCust = (Customer)custPR.get(custId);
+    commitedCust = (Customer) custPR.get(custId);
-        "Expected customer to rollback to:" + oldCustomer + " but was:"
-            + commitedCust);
+        "Expected customer to rollback to:" + oldCustomer + " but was:" + commitedCust);
-    commitedCust = (Customer)custPR.get(custId);
+    commitedCust = (Customer) custPR.get(custId);
-        "Expected customer to rollback to:" + oldCustomer + " but was:"
-            + commitedCust);
+        "Expected customer to rollback to:" + oldCustomer + " but was:" + commitedCust);
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      }
-      else if(e instanceof EntryNotFoundException
+      } else if (e instanceof EntryNotFoundException
-      }
-      else {
+      } else {
-            "Expected to catch PR remote destroy exception, but caught:"
-                + e.getMessage(), e);
+            "Expected to catch PR remote destroy exception, but caught:" + e.getMessage(), e);
-    commitedCust = (Customer)custPR.get(custId);
-    Assert.assertTrue(commitedCust == null,
-        "Expected Customer to be null but was:" + commitedCust);
-    Order commitedOrder = (Order)orderPR.get(orderId);
-    Assert.assertTrue(order.equals(commitedOrder), "Expected Order to be:"
-        + order + " but was:" + commitedOrder);
-    //put the customer again for invalidate verification
+    commitedCust = (Customer) custPR.get(custId);
+    Assert.assertTrue(commitedCust == null, "Expected Customer to be null but was:" + commitedCust);
+    Order commitedOrder = (Order) orderPR.get(orderId);
+    Assert.assertTrue(order.equals(commitedOrder),
+        "Expected Order to be:" + order + " but was:" + commitedOrder);
+    // put the customer again for invalidate verification
-    //test destroy on new entry
-    //TODO: This throws EntryNotFound
-    OrderId newOrderId = new OrderId(5000,custId);
+    // test destroy on new entry
+    // TODO: This throws EntryNotFound
+    OrderId newOrderId = new OrderId(5000, custId);
-    Assert.assertTrue(orderPR.get(newOrderId)==null,"Did not expect orderId to be present");
+    Assert.assertTrue(orderPR.get(newOrderId) == null, "Did not expect orderId to be present");
-    CacheTransactionManager mgr = custPR.getCache()
-        .getCacheTransactionManager();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer newCus = (Customer)args.get(2);
-    OrderId orderId = (OrderId)args.get(3);
-    Order order = (Order)args.get(4);
-    Customer oldCustomer = (Customer)custPR.get(custId);
+    CacheTransactionManager mgr = custPR.getCache().getCacheTransactionManager();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer newCus = (Customer) args.get(2);
+    OrderId orderId = (OrderId) args.get(3);
+    Order order = (Order) args.get(4);
+    Customer oldCustomer = (Customer) custPR.get(custId);
-    commitedCust = (Customer)custPR.get(custId);
+    commitedCust = (Customer) custPR.get(custId);
-        "Expected customer to rollback to:" + oldCustomer + " but was:"
-            + commitedCust);
+        "Expected customer to rollback to:" + oldCustomer + " but was:" + commitedCust);
-    commitedCust = (Customer)custPR.get(custId);
+    commitedCust = (Customer) custPR.get(custId);
-        "Expected customer to rollback to:" + oldCustomer + " but was:"
-            + commitedCust);
+        "Expected customer to rollback to:" + oldCustomer + " but was:" + commitedCust);
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      if ((e instanceof TransactionDataNotColocatedException) || (e instanceof TransactionDataRebalancedException)) {
+      if ((e instanceof TransactionDataNotColocatedException)
+          || (e instanceof TransactionDataRebalancedException)) {
-      }
-      else if(e instanceof EntryNotFoundException
+      } else if (e instanceof EntryNotFoundException
-      }
-      else {
+      } else {
-            "Expected to catch PR remote destroy exception, but caught:"
-                + e.getMessage(), e);
+            "Expected to catch PR remote destroy exception, but caught:" + e.getMessage(), e);
-    commitedCust = (Customer)custPR.get(custId);
-    Assert.assertTrue(commitedCust == null,
-        "Expected Customer to be null but was:" + commitedCust);
-    Order commitedOrder = (Order)orderPR.get(orderId);
-    Assert.assertTrue(order.equals(commitedOrder), "Expected Order to be:"
-        + order + " but was:" + commitedOrder);
-    //test destroy on new entry
-    //TODO: This throws EntryNotFound
-    /*OrderId newOrderId = new OrderId(5000,custId);
-    mgr.begin();
-    orderPR.put(newOrderId, new Order("New Order to be destroyed"));
-    orderPR.invalidate(newOrderId);
-    mgr.commit();
-    Assert.assertTrue(orderPR.get(newOrderId)==null,"Did not expect orderId to be present");*/
+    commitedCust = (Customer) custPR.get(custId);
+    Assert.assertTrue(commitedCust == null, "Expected Customer to be null but was:" + commitedCust);
+    Order commitedOrder = (Order) orderPR.get(orderId);
+    Assert.assertTrue(order.equals(commitedOrder),
+        "Expected Order to be:" + order + " but was:" + commitedOrder);
+    // test destroy on new entry
+    // TODO: This throws EntryNotFound
+    /*
+     * OrderId newOrderId = new OrderId(5000,custId); mgr.begin(); orderPR.put(newOrderId, new
+     * Order("New Order to be destroyed")); orderPR.invalidate(newOrderId); mgr.commit();
+     * Assert.assertTrue(orderPR.get(newOrderId)==null,"Did not expect orderId to be present");
+     */
-    CacheTransactionManager mgr = custPR.getCache()
-        .getCacheTransactionManager();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer newCus = (Customer)args.get(2);
-    OrderId orderId = (OrderId)args.get(3);
-    Order order = (Order)args.get(4);
-    Customer oldCustomer = (Customer)custPR.get(custId);
-    Order oldOrder = (Order)orderPR.get(orderId);
+    CacheTransactionManager mgr = custPR.getCache().getCacheTransactionManager();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer newCus = (Customer) args.get(2);
+    OrderId orderId = (OrderId) args.get(3);
+    Order order = (Order) args.get(4);
+    Customer oldCustomer = (Customer) custPR.get(custId);
+    Order oldOrder = (Order) orderPR.get(orderId);
-    Customer txCust = (Customer)custPR.get(custId);
+    Customer txCust = (Customer) custPR.get(custId);
-    Order txOrder = (Order)orderPR.get(orderId);
-    Assert.assertTrue(newCus.equals(txCust), "Expected Customer to be:"
-        + newCus + " but was:" + txCust);
-    Assert.assertTrue(txOrder.equals(order), "Expected Order to be:" + order
-        + " but was:" + txOrder);
+    Order txOrder = (Order) orderPR.get(orderId);
+    Assert.assertTrue(newCus.equals(txCust),
+        "Expected Customer to be:" + newCus + " but was:" + txCust);
+    Assert.assertTrue(txOrder.equals(order),
+        "Expected Order to be:" + order + " but was:" + txOrder);
-    Customer commitedCust = (Customer)custPR.get(custId);
+    Customer commitedCust = (Customer) custPR.get(custId);
-    Order commitedOrder = (Order)orderPR.get(orderId);
-    Assert.assertTrue(oldOrder.equals(commitedOrder), "Expected Order to be:"
-        + oldOrder + " but was:" + commitedOrder);
-    
+    Order commitedOrder = (Order) orderPR.get(orderId);
+    Assert.assertTrue(oldOrder.equals(commitedOrder),
+        "Expected Order to be:" + oldOrder + " but was:" + commitedOrder);
+
-    
+
-    
+
-    
+
-    CacheTransactionManager mgr = custPR.getCache()
-        .getCacheTransactionManager();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer newCus = (Customer)args.get(2);
-    OrderId orderId = (OrderId)args.get(3);
-    Order order = (Order)args.get(4);
+    CacheTransactionManager mgr = custPR.getCache().getCacheTransactionManager();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer newCus = (Customer) args.get(2);
+    OrderId orderId = (OrderId) args.get(3);
+    Order order = (Order) args.get(4);
-    TransactionListener2 listener = (TransactionListener2) ctx.getDataSet().getAttributes().getCacheListeners()[0];
-    Assert.assertTrue(listener.getNumberOfPutCallbacks() == 2,"Expected 2 put callback, but " +
-    		"got "+listener.getNumberOfPutCallbacks());
+    TransactionListener2 listener =
+        (TransactionListener2) ctx.getDataSet().getAttributes().getCacheListeners()[0];
+    Assert.assertTrue(listener.getNumberOfPutCallbacks() == 2,
+        "Expected 2 put callback, but " + "got " + listener.getNumberOfPutCallbacks());
-    Assert.assertTrue(listener.getNumberOfDestroyCallbacks() == 1,"Expected 1 destroy callbacks, but " +
-    		"got "+listener.getNumberOfDestroyCallbacks());
+    Assert.assertTrue(listener.getNumberOfDestroyCallbacks() == 1,
+        "Expected 1 destroy callbacks, but " + "got " + listener.getNumberOfDestroyCallbacks());
-    Assert.assertTrue(listener.getNumberOfInvalidateCallbacks() == 1,"Expected 1 invalidate callbacks, but " +
-                "got "+listener.getNumberOfInvalidateCallbacks());
+    Assert.assertTrue(listener.getNumberOfInvalidateCallbacks() == 1,
+        "Expected 1 invalidate callbacks, but " + "got "
+            + listener.getNumberOfInvalidateCallbacks());
-    PartitionedRegion pr = (PartitionedRegion)ctx.getDataSet();
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
+    PartitionedRegion pr = (PartitionedRegion) ctx.getDataSet();
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
-    DistributedMember primary = pr.getRegionAdvisor()
-        .getPrimaryMemberForBucket(bucketId);
-    DistributedMember me = pr.getCache().getDistributedSystem()
-        .getDistributedMember();
-    Assert.assertTrue(me.equals(primary),
-        "Function should have been executed on primary:" + primary
-            + " but was executed on member:" + me);
+    DistributedMember primary = pr.getRegionAdvisor().getPrimaryMemberForBucket(bucketId);
+    DistributedMember me = pr.getCache().getDistributedSystem().getDistributedMember();
+    Assert.assertTrue(me.equals(primary), "Function should have been executed on primary:" + primary
+        + " but was executed on member:" + me);
-  
-  private void verifyTxStateAndConflicts(RegionFunctionContext ctx){
+
+  private void verifyTxStateAndConflicts(RegionFunctionContext ctx) {
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
-    OrderId vOrderId = new OrderId(3000,custId);
+    OrderId vOrderId = new OrderId(3000, custId);
-    TXManagerImpl mImp = (TXManagerImpl)mgr;
+    TXManagerImpl mImp = (TXManagerImpl) mgr;
-    Assert.assertTrue(txState.getRegions().size() == 1,"Expected 1 region; " +
-              "found:"+txState.getRegions().size());
-    LocalRegion lr = (LocalRegion)it.next();
+    Assert.assertTrue(txState.getRegions().size() == 1,
+        "Expected 1 region; " + "found:" + txState.getRegions().size());
+    LocalRegion lr = (LocalRegion) it.next();
-    //since both puts were on same key, verify that
-    //TxRegionState and TXEntryState are same 
-    LocalRegion lr1 = (LocalRegion)txState.getRegions().iterator().next();
+    // since both puts were on same key, verify that
+    // TxRegionState and TXEntryState are same
+    LocalRegion lr1 = (LocalRegion) txState.getRegions().iterator().next();
-    TXEntryState txEntry1 = txRegion1.readEntry(txRegion.getEntryKeys().iterator().next());      
+    TXEntryState txEntry1 = txRegion1.readEntry(txRegion.getEntryKeys().iterator().next());
-    //to check for conflicts, start a new transaction, operate on same key,
-    //commit the second and expect the first to fail
+    // to check for conflicts, start a new transaction, operate on same key,
+    // commit the second and expect the first to fail
-    //now begin the first
+    // now begin the first
-    try{
+    try {
-    }
-    catch(CommitConflictException e){
+    } catch (CommitConflictException e) {
-    if(!caughtException){
+    if (!caughtException) {
-    Region orderPR = custPR.getCache().
-          getRegion(PRColocationDUnitTest.OrderPartitionedRegionName);
-    ArrayList args = (ArrayList)ctx.getArguments();
-    CustId custId = (CustId)args.get(1);
-    Customer cust = (Customer)args.get(2);
+    Region orderPR = custPR.getCache().getRegion(PRColocationDUnitTest.OrderPartitionedRegionName);
+    ArrayList args = (ArrayList) ctx.getArguments();
+    CustId custId = (CustId) args.get(1);
+    Customer cust = (Customer) args.get(2);
-    TXManagerImpl mImp = (TXManagerImpl)mgr;
+    TXManagerImpl mImp = (TXManagerImpl) mgr;
-    //change value
+    // change value
-    Customer oldCust = (Customer)custPR.get(custId);
+    Customer oldCust = (Customer) custPR.get(custId);
-    Customer newCust = new Customer("fooNew","barNew");
+    Customer newCust = new Customer("fooNew", "barNew");

