GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.query.Query;
-   * Getter method for a {@link Region} in the case that a Region should be created if one with the
-   * given name does not exist. Before getting or creating a Region, a check is first done to make
-   * sure the desired key doesn't already exist with a different {@link RedisDataType}. If there is
-   * a data type mismatch this method will throw a {@link RuntimeException}.
-   * <p>
-   * ********************** IMPORTANT NOTE ********************************************** This
-   * method will not fail in returning a Region unless an internal error occurs, so if a Region is
-   * destroyed right after it is created, it will attempt to retry until a reference to that Region
-   * is obtained
-   * *************************************************************************************
-   *
-   * @param context Client client
-   * @param key String key of desired key
-   * @param type Type of data type desired
-   * @return Region with name key
-   */
-  protected Region<?, ?> getOrCreateRegion(ExecutionHandlerContext context, ByteArrayWrapper key,
-      RedisDataType type) {
-    return context.getRegionProvider().getOrCreateRegion(key, type, context);
-  }
-
-  /**
-  protected Query getQuery(ByteArrayWrapper key, Enum<?> type, ExecutionHandlerContext context) {
-    return context.getRegionProvider().getQuery(key, type);
-  }
-
-  protected int getBoundedStartIndex(int index, int size) {
-    if (size < 0) {
-      throw new IllegalArgumentException("Size < 0, really?");
-    }
-    if (index >= 0) {
-      return Math.min(index, size);
-    } else {
-      return Math.max(index + size, 0);
-    }
-  }
-
-  protected int getBoundedEndIndex(int index, int size) {
-    if (size < 0) {
-      throw new IllegalArgumentException("Size < 0, really?");
-    }
-    if (index >= 0) {
-      return Math.min(index, size);
-    } else {
-      return Math.max(index + size, -1);
-    }
-  }
-

DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL27 DEL34 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL27 DEL34 DEL38 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31