Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Encapsulates a region operation that requires both key and serialized value
- * for the pre-operation and post-operation cases.
+ * Encapsulates a region operation that requires both key and serialized value for the pre-operation
+ * and post-operation cases.
+ * @deprecated since Geode1.0, use {@link org.apache.geode.security.ResourcePermission} instead
+   * 
-  
+
-   * True when the serialized object is a normal object; false when it is a raw
-   * byte array.
+   * True when the serialized object is a normal object; false when it is a raw byte array.
-   * @param key
-   *                the key for this operation
-   * @param value
-   *                the value for this operation
-   * @param isObject
-   *                true when the value is an object; false when it is a raw
-   *                byte array
+   * @param key the key for this operation
+   * @param value the value for this operation
+   * @param isObject true when the value is an object; false when it is a raw byte array
-  public KeyValueOperationContext(Object key, Object value,
-      boolean isObject) {
+  public KeyValueOperationContext(Object key, Object value, boolean isObject) {
-    setValue(value,isObject);
-    //this.value = value;
+    setValue(value, isObject);
+    // this.value = value;
-   * @param key
-   *                the key for this operation
-   * @param value
-   *                the value for this operation
-   * @param isObject
-   *                true when the value is an object; false when it is a raw
-   *                byte array
-   * @param postOperation
-   *                true if the context is at the time of sending updates
+   * @param key the key for this operation
+   * @param value the value for this operation
+   * @param isObject true when the value is an object; false when it is a raw byte array
+   * @param postOperation true if the context is at the time of sending updates
-  public KeyValueOperationContext(Object key, Object value,
-      boolean isObject, boolean postOperation) {
+  public KeyValueOperationContext(Object key, Object value, boolean isObject,
+      boolean postOperation) {
-    setValue(value,isObject);
-    //this.value = value;
-    //this.isObject = isObject;
+    setValue(value, isObject);
+    // this.value = value;
+    // this.isObject = isObject;
-        return (byte[])tmp;
+        return (byte[]) tmp;
-  
+
-   * Get the deserialized value for this operation.
-   * Note that if the value is serialized this method will attempt to deserialize it.
-   * If PDX read-serialized is set to true and the value was serialized with PDX
-   * then this method will return a PdxInstance.
+   * Get the deserialized value for this operation. Note that if the value is serialized this method
+   * will attempt to deserialize it. If PDX read-serialized is set to true and the value was
+   * serialized with PDX then this method will return a PdxInstance.
-   * Get the value for this operation.
-   * Note that if the value is serialized then a byte array
-   * will be returned that contains the serialized bytes.
-   * To figure out if the returned byte array contains serialized bytes
-   * or is the deserialized value call {@link #isObject()}.
-   * If you need to deserialize the serialized bytes use 
-   * {@link DataSerializer#readObject(java.io.DataInput)}
-   * or you can just call {@link #getDeserializedValue()}.
+   * Get the value for this operation. Note that if the value is serialized then a byte array will
+   * be returned that contains the serialized bytes. To figure out if the returned byte array
+   * contains serialized bytes or is the deserialized value call {@link #isObject()}. If you need to
+   * deserialize the serialized bytes use {@link DataSerializer#readObject(java.io.DataInput)} or
+   * you can just call {@link #getDeserializedValue()}.
-  
+
-   * @param serializedValue
-   *                the serialized value for this operation
-   * @param isObject
-   *                true when the value is an object; false when it is a raw
-   *                byte array
+   * @param serializedValue the serialized value for this operation
+   * @param isObject true when the value is an object; false when it is a raw byte array
-  
+
-   * @param value
-   *                the result of this operation; can be a serialized byte array
-   *                or a deserialized object
-   * @param isObject
-   *                true when the value is an object (either serialized or
-   *                deserialized); false when it is a raw byte array
+   * @param value the result of this operation; can be a serialized byte array or a deserialized
+   *        object
+   * @param isObject true when the value is an object (either serialized or deserialized); false
+   *        when it is a raw byte array
-  
+

INS65 UPD66 UPD66 INS66 INS65 INS66 INS40 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66