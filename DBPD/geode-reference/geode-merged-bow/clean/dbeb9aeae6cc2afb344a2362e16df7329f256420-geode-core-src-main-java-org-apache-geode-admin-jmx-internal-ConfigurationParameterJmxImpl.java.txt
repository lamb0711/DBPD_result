Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implements java.io.Serializable because several MBeans have attributes of
- * type ConfigurationParameter. This means that calls to getMBeanInfo which
- * may be serialized for remote clients will be broken unless those attributes
- * support serialization.
+ * Implements java.io.Serializable because several MBeans have attributes of type
+ * ConfigurationParameter. This means that calls to getMBeanInfo which may be serialized for remote
+ * clients will be broken unless those attributes support serialization.
- * TODO: refactor to implement ConfigurationParameter and delegate to 
- * ConfigurationParameterImpl. Wrap all delegate calls w/ e.printStackTrace()
- * since the HttpAdaptor devours them
+ * TODO: refactor to implement ConfigurationParameter and delegate to ConfigurationParameterImpl.
+ * Wrap all delegate calls w/ e.printStackTrace() since the HttpAdaptor devours them
- * @since GemFire     3.5
+ * @since GemFire 3.5
-extends org.apache.geode.admin.internal.ConfigurationParameterImpl
-implements Serializable {
+    extends org.apache.geode.admin.internal.ConfigurationParameterImpl implements Serializable {
-  
+
-  //   Constructor(s)
+  // Constructor(s)
-  
-  protected ConfigurationParameterJmxImpl(String name,
-                                          String description,
-                                          Object value,
-                                          Class type,
-                                          boolean userModifiable) {
+
+  protected ConfigurationParameterJmxImpl(String name, String description, Object value, Class type,
+      boolean userModifiable) {
-  
-  protected ConfigurationParameterJmxImpl(String name,
-                                          Object value) {
+
+  protected ConfigurationParameterJmxImpl(String name, Object value) {
-  
+
-  protected ConfigurationParameterJmxImpl() { super(); }
-  
+  protected ConfigurationParameterJmxImpl() {
+    super();
+  }
+
-      throw new UnsupportedOperationException(LocalizedStrings.ConfigurationParameterJmxImpl_REMOTE_MUTATION_OF_CONFIGURATIONPARAMETER_IS_CURRENTLY_UNSUPPORTED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.ConfigurationParameterJmxImpl_REMOTE_MUTATION_OF_CONFIGURATIONPARAMETER_IS_CURRENTLY_UNSUPPORTED
+              .toLocalizedString());
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-  
+
-  //   HACK
+  // HACK
+
+
+
-  
+
-  
+
-  
-  /** 
-   * Override writeObject which is used in serialization. This class is
-   * serialized when JMX client acquires MBeanInfo for ConfigurationParameter
-   * MBean. Super class is not serializable.
+
+  /**
+   * Override writeObject which is used in serialization. This class is serialized when JMX client
+   * acquires MBeanInfo for ConfigurationParameter MBean. Super class is not serializable.
-  private void writeObject(java.io.ObjectOutputStream out)
-  throws IOException {
+  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
-  
-  /** 
-   * Override readObject which is used in serialization. Customize 
-   * serialization of this exception to avoid escape of InternalRole
-   * which is not Serializable. 
+
+  /**
+   * Override readObject which is used in serialization. Customize serialization of this exception
+   * to avoid escape of InternalRole which is not Serializable.
-  private void readObject(java.io.ObjectInputStream in)
-  throws IOException, ClassNotFoundException {
+  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
-    
+
-    
+
-     
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66