Merge branch 'release/1.5.0'

-import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.Executor;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-    implements ConcurrentMap<K, V>, Serializable {
+    implements ConcurrentMapWithReusableEntries<K, V>, Serializable {
-  public static interface HashEntry<K, V> {
+  public interface HashEntry<K, V> {
-  public static interface HashEntryCreator<K, V> {
+  public interface HashEntryCreator<K, V> {
-    public HashEntry<K, V> newEntry(K key, int hash, HashEntry<K, V> next, V value);
+    HashEntry<K, V> newEntry(K key, int hash, HashEntry<K, V> next, V value);
-    public int keyHashCode(Object key, boolean compareValues);
+    int keyHashCode(Object key, boolean compareValues);
-  public static interface MapCallback<K, V, C, P> {
+  public interface MapCallback<K, V, C, P> {
-    public V newValue(K key, C context, P createParams);
+    V newValue(K key, C context, P createParams);
-    public void oldValueRead(V value);
+    void oldValueRead(V value);
-    public boolean doRemoveValue(V value, C context, P removeParams);
+    boolean doRemoveValue(V value, C context, P removeParams);
-  /**
-   * Removes all of the mappings from this map.
-   */
+  // GemStone addition
-  public void clear() {
+  public void clearWithExecutor(Executor executor) {
-        InternalDistributedSystem ids = InternalDistributedSystem.getConnectedInstance();
-        if (ids != null) {
+        if (executor != null) {
-            ids.getDistributionManager().getWaitingThreadPool().execute(runnable);
+            executor.execute(runnable);
+   * Removes all of the mappings from this map.
+   */
+  @Override
+  public void clear() {
+    clearWithExecutor(null);
+  }
+  // End GemStone addition
+
+  /**
-  /**
-   * Returns a {@link Set} view of the mappings contained in this map. The set is backed by the map,
-   * so changes to the map are reflected in the set, and vice-versa. The set supports element
-   * removal, which removes the corresponding mapping from the map, via the
-   * <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and
-   * <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
-   *
-   * <p>
-   * The view's <tt>iterator</tt> is a "weakly consistent" iterator that will never throw
-   * {@link java.util.ConcurrentModificationException}, and guarantees to traverse elements as they
-   * existed upon construction of the iterator, and may (but is not guaranteed to) reflect any
-   * modifications subsequent to construction.
-   *
-   * <p>
-   * This set provides entries that are reused during iteration so caller cannot store the returned
-   * <code>Map.Entry</code> objects.
-   */
+  @Override

UPD40 UPD74 INS31 UPD43 UPD42 INS44 MOV29 INS78 INS83 INS39 INS42 INS8 INS78 UPD42 INS43 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS33 UPD42 UPD42 MOV42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29