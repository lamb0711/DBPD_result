Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Factory class used to create the singleton {@link ClientCache client cache} and connect to one or more GemFire Cache Servers. If the application wants to connect to GemFire as a peer it should use {@link org.apache.geode.cache.CacheFactory} instead.
- * <p> Once the factory has been configured using its set* methods you produce a {@link ClientCache} by calling the {@link #create} method.
- * The {@link org.apache.geode.distributed.ConfigurationProperties#CACHE_XML_FILE}
- * property can be used to specify a cache.xml file to initialize the cache with.
- * The contents of this file must comply with the
- * <code>"doc-files/cache8_0.dtd"</code> file and the top level element must be a <code>client-cache</code> element.
- * <p> Client connections are managed through connection {@link Pool pools}. ClientCacheFactory creates a single pool to use by default on the cache it creates. ClientCacheFactory can also be used to configure the default connection pool using its <code>setPool*</code> and <code>addPool*</code> methods. In most cases, the defaults used by this implementation will suffice. For the default pool attributes see {@link PoolFactory}.
- * If no pool is configured and a pool was not declared in cache.xml or created using {@link PoolManager} then a default one will be created that connects to a server on the default cache server port and local host. If multiple pools are declared in cache.xml or created by the PoolFactory then no default pool will exist and <code>ClientRegionFactory.setPoolName</code> will need to be called on each region created.
+ * Factory class used to create the singleton {@link ClientCache client cache} and connect to one or
+ * more GemFire Cache Servers. If the application wants to connect to GemFire as a peer it should
+ * use {@link org.apache.geode.cache.CacheFactory} instead.
+ * <p>
+ * Once the factory has been configured using its set* methods you produce a {@link ClientCache} by
+ * calling the {@link #create} method. The
+ * {@link org.apache.geode.distributed.ConfigurationProperties#CACHE_XML_FILE} property can be used
+ * to specify a cache.xml file to initialize the cache with. The contents of this file must comply
+ * with the <code>"doc-files/cache8_0.dtd"</code> file and the top level element must be a
+ * <code>client-cache</code> element.
+ * <p>
+ * Client connections are managed through connection {@link Pool pools}. ClientCacheFactory creates
+ * a single pool to use by default on the cache it creates. ClientCacheFactory can also be used to
+ * configure the default connection pool using its <code>setPool*</code> and <code>addPool*</code>
+ * methods. In most cases, the defaults used by this implementation will suffice. For the default
+ * pool attributes see {@link PoolFactory}. If no pool is configured and a pool was not declared in
+ * cache.xml or created using {@link PoolManager} then a default one will be created that connects
+ * to a server on the default cache server port and local host. If multiple pools are declared in
+ * cache.xml or created by the PoolFactory then no default pool will exist and
+ * <code>ClientRegionFactory.setPoolName</code> will need to be called on each region created.
+ * 
- * //. i.e. there is no local caching
+ * // . i.e. there is no local caching
+ * 
+ * 
- * ClientCache c = new ClientCacheFactory()
- * .addPoolLocator(host, port)
- * .create();
- * Region r = c.createClientRegionFactory(CACHING_PROXY_HEAP_LRU)
- * .create("customers");
- * // The local LRU "customers" data region will automatically start evicting, by default, at 80% heap utilization threshold
+ * ClientCache c = new ClientCacheFactory().addPoolLocator(host, port).create();
+ * Region r = c.createClientRegionFactory(CACHING_PROXY_HEAP_LRU).create("customers");
+ * // The local LRU "customers" data region will automatically start evicting, by default, at 80%
+ * // heap utilization threshold
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
- * ClientCache c = new ClientCacheFactory()
- * .set("cache-xml-file", "myCache.xml")
- * .create();
+ * ClientCache c = new ClientCacheFactory().set("cache-xml-file", "myCache.xml").create();
- * <p> For a complete list of all client region shortcuts see {@link ClientRegionShortcut}.
- * Applications that need to explicitly control the individual region attributes can do this declaratively in XML or using API.
+ * <p>
+ * For a complete list of all client region shortcuts see {@link ClientRegionShortcut}. Applications
+ * that need to explicitly control the individual region attributes can do this declaratively in XML
+ * or using API.
+ * 
+ * 
+ * 
- * ClientCache c = new ClientCacheFactory()
- * .set("cache-xml-file", "myCache.xml")
- * .addPoolLocator(host, port)
- * .create();
+ * ClientCache c = new ClientCacheFactory().set("cache-xml-file", "myCache.xml")
+ *     .addPoolLocator(host, port).create();
-   * @param props The initial gemfire properties to be used.
-   *              These properties can be overridden using the {@link #set} method
-   *              For a full list of valid gemfire properties see {@link org.apache.geode.distributed.ConfigurationProperties}.
+   * @param props The initial gemfire properties to be used. These properties can be overridden
+   *        using the {@link #set} method For a full list of valid gemfire properties see
+   *        {@link org.apache.geode.distributed.ConfigurationProperties}.
-   * Sets a gemfire property that will be used when creating the ClientCache.
-   * For a full list of valid gemfire properties see {@link org.apache.geode.distributed.ConfigurationProperties}.
+   * Sets a gemfire property that will be used when creating the ClientCache. For a full list of
+   * valid gemfire properties see {@link org.apache.geode.distributed.ConfigurationProperties}.
-   * @param name  the name of the gemfire property
+   * @param name the name of the gemfire property
-   * Create a singleton client cache. If a client cache already exists in this
-   * vm that is not compatible with this factory's configuration then create
-   * will fail.
-   * <p> While creating the cache instance any declarative cache configuration (cache.xml)
-   * is processed and used to initialize the created cache.
-   * <P>Note that the cache that is produced is a singleton. Before a different instance
-   * can be produced the old one must be {@link ClientCache#close closed}.
+   * Create a singleton client cache. If a client cache already exists in this vm that is not
+   * compatible with this factory's configuration then create will fail.
+   * <p>
+   * While creating the cache instance any declarative cache configuration (cache.xml) is processed
+   * and used to initialize the created cache.
+   * <P>
+   * Note that the cache that is produced is a singleton. Before a different instance can be
+   * produced the old one must be {@link ClientCache#close closed}.
-   * @throws CacheXmlException               If a problem occurs while parsing the declarative caching
-   *                                         XML file.
-   * @throws TimeoutException                If a {@link Region#put(Object, Object)} times out while initializing the
-   *                                         cache.
-   * @throws CacheWriterException            If a <code>CacheWriterException</code> is thrown while
-   *                                         initializing the cache.
-   * @throws RegionExistsException           If the declarative caching XML file describes a region
-   *                                         that already exists (including the root region).
-   * @throws IllegalStateException           if a client cache already exists and it
-   *                                         is not compatible with this factory's configuration.
-   * @throws IllegalStateException           if mcast-port or locator is set on client cache.
-   * @throws AuthenticationFailedException   if authentication fails.
-   * @throws AuthenticationRequiredException if server is in secure mode and client cache
-   *                                         is not configured with security credentials.
+   * @throws CacheXmlException If a problem occurs while parsing the declarative caching XML file.
+   * @throws TimeoutException If a {@link Region#put(Object, Object)} times out while initializing
+   *         the cache.
+   * @throws CacheWriterException If a <code>CacheWriterException</code> is thrown while
+   *         initializing the cache.
+   * @throws RegionExistsException If the declarative caching XML file describes a region that
+   *         already exists (including the root region).
+   * @throws IllegalStateException if a client cache already exists and it is not compatible with
+   *         this factory's configuration.
+   * @throws IllegalStateException if mcast-port or locator is set on client cache.
+   * @throws AuthenticationFailedException if authentication fails.
+   * @throws AuthenticationRequiredException if server is in secure mode and client cache is not
+   *         configured with security credentials.
-            throw new IllegalStateException("On a client cache the mcast-port must be set to 0 or not set. It was set to " + mcastPort);
+            throw new IllegalStateException(
+                "On a client cache the mcast-port must be set to 0 or not set. It was set to "
+                    + mcastPort);
-              "On a client cache the locators property must be set to an empty string or not set. It was set to \"" + propValue + "\".");
+              "On a client cache the locators property must be set to an empty string or not set. It was set to \""
+                  + propValue + "\".");
-          throw new IllegalStateException("A client cache can not be created because a non-client cache already exists.");
+          throw new IllegalStateException(
+              "A client cache can not be created because a non-client cache already exists.");
-   * Sets the free connection timeout for this pool.
-   * If the pool has a max connections setting, operations will block
-   * if all of the connections are in use. The free connection timeout
-   * specifies how long those operations will block waiting for
-   * a free connection before receiving
-   * an {@link AllConnectionsInUseException}. If max connections
-   * is not set this setting has no effect.
+   * Sets the free connection timeout for this pool. If the pool has a max connections setting,
+   * operations will block if all of the connections are in use. The free connection timeout
+   * specifies how long those operations will block waiting for a free connection before receiving
+   * an {@link AllConnectionsInUseException}. If max connections is not set this setting has no
+   * effect.
-   * @throws IllegalArgumentException if <code>connectionTimeout</code>
-   *                                  is less than or equal to <code>0</code>.
+   * @throws IllegalArgumentException if <code>connectionTimeout</code> is less than or equal to
+   *         <code>0</code>.
-   * Sets the load conditioning interval for this pool.
-   * This interval controls how frequently the pool will check to see if
-   * a connection to a given server should be moved to a different
-   * server to improve the load balance.
-   * <p>A value of <code>-1</code> disables load conditioning
+   * Sets the load conditioning interval for this pool. This interval controls how frequently the
+   * pool will check to see if a connection to a given server should be moved to a different server
+   * to improve the load balance.
+   * <p>
+   * A value of <code>-1</code> disables load conditioning
-   * @throws IllegalArgumentException if <code>connectionLifetime</code>
-   *                                  is less than <code>-1</code>.
+   * @throws IllegalArgumentException if <code>connectionLifetime</code> is less than
+   *         <code>-1</code>.
-   * Sets the socket buffer size for each connection made in this pool.
-   * Large messages can be received and sent faster when this buffer is larger.
-   * Larger buffers also optimize the rate at which servers can send events
-   * for client subscriptions.
+   * Sets the socket buffer size for each connection made in this pool. Large messages can be
+   * received and sent faster when this buffer is larger. Larger buffers also optimize the rate at
+   * which servers can send events for client subscriptions.
-   * @param bufferSize the size of the socket buffers used for reading and
-   *                   writing on each connection in this pool.
+   * @param bufferSize the size of the socket buffers used for reading and writing on each
+   *        connection in this pool.
-   * @throws IllegalArgumentException if <code>bufferSize</code>
-   *                                  is less than or equal to <code>0</code>.
+   * @throws IllegalArgumentException if <code>bufferSize</code> is less than or equal to
+   *         <code>0</code>.
-   * Sets the thread local connections policy for this pool.
-   * If <code>true</code> then any time a thread goes to use a connection
-   * from this pool it will check a thread local cache and see if it already
-   * has a connection in it. If so it will use it. If not it will get one from
-   * this pool and cache it in the thread local. This gets rid of thread contention
-   * for the connections but increases the number of connections the servers see.
-   * <p>If <code>false</code> then connections are returned to the pool as soon
-   * as the operation being done with the connection completes. This allows
-   * connections to be shared amonst multiple threads keeping the number of
-   * connections down.
+   * Sets the thread local connections policy for this pool. If <code>true</code> then any time a
+   * thread goes to use a connection from this pool it will check a thread local cache and see if it
+   * already has a connection in it. If so it will use it. If not it will get one from this pool and
+   * cache it in the thread local. This gets rid of thread contention for the connections but
+   * increases the number of connections the servers see.
+   * <p>
+   * If <code>false</code> then connections are returned to the pool as soon as the operation being
+   * done with the connection completes. This allows connections to be shared amonst multiple
+   * threads keeping the number of connections down.
-   * @param threadLocalConnections if <code>true</code> then enable thread local
-   *                               connections.
+   * @param threadLocalConnections if <code>true</code> then enable thread local connections.
-   * Sets the number of milliseconds to wait for a response from a server before
-   * timing out the operation and trying another server (if any are available).
+   * Sets the number of milliseconds to wait for a response from a server before timing out the
+   * operation and trying another server (if any are available).
-   * @throws IllegalArgumentException if <code>timeout</code>
-   *                                  is less than <code>0</code>.
+   * @throws IllegalArgumentException if <code>timeout</code> is less than <code>0</code>.
-   * Set the minimum number of connections to keep available at all times.
-   * When the pool is created, it will create this many connections.
-   * If <code>0</code> then connections will not be made until an actual operation
-   * is done that requires client-to-server communication.
+   * Set the minimum number of connections to keep available at all times. When the pool is created,
+   * it will create this many connections. If <code>0</code> then connections will not be made until
+   * an actual operation is done that requires client-to-server communication.
-   * @param minConnections the initial number of connections
-   *                       this pool will create.
+   * @param minConnections the initial number of connections this pool will create.
-   * @throws IllegalArgumentException if <code>minConnections</code>
-   *                                  is less than <code>0</code>.
+   * @throws IllegalArgumentException if <code>minConnections</code> is less than <code>0</code>.
-   * Set the max number of client to server connections that the pool will create. If all of
-   * the connections are in use, an operation requiring a client to server connection
-   * will block until a connection is available.
+   * Set the max number of client to server connections that the pool will create. If all of the
+   * connections are in use, an operation requiring a client to server connection will block until a
+   * connection is available.
-   * @param maxConnections the maximum number of connections in the pool.
-   *                       this pool will create. -1 indicates that there is no maximum number of connections
+   * @param maxConnections the maximum number of connections in the pool. this pool will create. -1
+   *        indicates that there is no maximum number of connections
-   * @throws IllegalArgumentException if <code>maxConnections</code>
-   *                                  is less than <code>minConnections</code>.
+   * @throws IllegalArgumentException if <code>maxConnections</code> is less than
+   *         <code>minConnections</code>.
-   * Set the amount of time a connection can be idle before expiring the connection.
-   * If the pool size is greater than the minimum specified by
-   * {@link #setPoolMinConnections(int)}, connections which have been idle
-   * for longer than the idleTimeout will be closed.
+   * Set the amount of time a connection can be idle before expiring the connection. If the pool
+   * size is greater than the minimum specified by {@link #setPoolMinConnections(int)}, connections
+   * which have been idle for longer than the idleTimeout will be closed.
-   * @param idleTimeout The amount of time in milliseconds that an idle connection
-   *                    should live before expiring. -1 indicates that connections should never expire.
+   * @param idleTimeout The amount of time in milliseconds that an idle connection should live
+   *        before expiring. -1 indicates that connections should never expire.
-   * @throws IllegalArgumentException if <code>idleTimout</code>
-   *                                  is less than <code>-1</code>.
+   * @throws IllegalArgumentException if <code>idleTimout</code> is less than <code>-1</code>.
-   * @param retryAttempts The number of times to retry a request
-   *                      after timeout/exception. -1 indicates that a request should be
-   *                      tried against every available server before failing
+   * @param retryAttempts The number of times to retry a request after timeout/exception. -1
+   *        indicates that a request should be tried against every available server before failing
-   * @throws IllegalArgumentException if <code>idleTimout</code>
-   *                                  is less than <code>-1</code>.
+   * @throws IllegalArgumentException if <code>idleTimout</code> is less than <code>-1</code>.
-   * How often to ping servers to verify that they are still alive. Each
-   * server will be sent a ping every pingInterval if there has not
-   * been any other communication with the server.
+   * How often to ping servers to verify that they are still alive. Each server will be sent a ping
+   * every pingInterval if there has not been any other communication with the server.
-   * These pings are used by the server to monitor the health of
-   * the client. Make sure that the pingInterval is less than the
-   * maximum time between pings allowed by the cache server.
+   * These pings are used by the server to monitor the health of the client. Make sure that the
+   * pingInterval is less than the maximum time between pings allowed by the cache server.
-   * @param pingInterval The amount of time in milliseconds between
-   *                     pings.
+   * @param pingInterval The amount of time in milliseconds between pings.
-   * @throws IllegalArgumentException if <code>pingInterval</code>
-   *                                  is less than or equal to <code>0</code>.
+   * @throws IllegalArgumentException if <code>pingInterval</code> is less than or equal to
+   *         <code>0</code>.
-   * How often to send client statistics to the server.
-   * Doing this allows <code>gfmon</code> to monitor clients.
-   * <p>A value of <code>-1</code> disables the sending of client statistics
-   * to the server.
+   * How often to send client statistics to the server. Doing this allows <code>gfmon</code> to
+   * monitor clients.
+   * <p>
+   * A value of <code>-1</code> disables the sending of client statistics to the server.
-   * @param statisticInterval The amount of time in milliseconds between
-   *                          sends of client statistics to the server.
+   * @param statisticInterval The amount of time in milliseconds between sends of client statistics
+   *        to the server.
-   * @throws IllegalArgumentException if <code>statisticInterval</code>
-   *                                  is less than <code>-1</code>.
+   * @throws IllegalArgumentException if <code>statisticInterval</code> is less than
+   *         <code>-1</code>.
-   * @param group the server group that this pool will connect to.
-   *              If <code>null</code> or <code>""</code> then all servers will be connected to.
+   * @param group the server group that this pool will connect to. If <code>null</code> or
+   *        <code>""</code> then all servers will be connected to.
-   * Add a locator, given its host and port, to this factory.
-   * The locator must be a server locator and will be used to discover other running
-   * cache servers and locators.
-   * Note that if the host is unknown at the time of this call
-   * the locator will still be added. When the pool is used for
-   * an operation if the host is still unknown an exception will
-   * be thrown.
+   * Add a locator, given its host and port, to this factory. The locator must be a server locator
+   * and will be used to discover other running cache servers and locators. Note that if the host is
+   * unknown at the time of this call the locator will still be added. When the pool is used for an
+   * operation if the host is still unknown an exception will be thrown.
-   * @throws IllegalArgumentException if port is outside
-   *                                  the valid range of [0..65535] inclusive.
-   * @throws IllegalStateException    if a server has already been {@link #addPoolServer added} to this factory.
+   * @throws IllegalArgumentException if port is outside the valid range of [0..65535] inclusive.
+   * @throws IllegalStateException if a server has already been {@link #addPoolServer added} to this
+   *         factory.
-   * Add a server, given its host and port, to this factory.
-   * The server must be a cache server and this client will
-   * directly connect to without consulting a server locator.
-   * Note that if the host is unknown at the time of this call
-   * the server will still be added. When the pool is used for
-   * an operation if the host is still unknown an exception will
-   * be thrown.
+   * Add a server, given its host and port, to this factory. The server must be a cache server and
+   * this client will directly connect to without consulting a server locator. Note that if the host
+   * is unknown at the time of this call the server will still be added. When the pool is used for
+   * an operation if the host is still unknown an exception will be thrown.
-   * @throws IllegalArgumentException if port is outside
-   *                                  the valid range of [0..65535] inclusive.
-   * @throws IllegalStateException    if a locator has already been {@link #addPoolLocator added} to this factory.
+   * @throws IllegalArgumentException if port is outside the valid range of [0..65535] inclusive.
+   * @throws IllegalStateException if a locator has already been {@link #addPoolLocator added} to
+   *         this factory.
-   * If set to <code>true</code> then the created pool will have server-to-client
-   * subscriptions enabled.
-   * If set to <code>false</code> then all <code>Subscription*</code> attributes
-   * are ignored at create time.
+   * If set to <code>true</code> then the created pool will have server-to-client subscriptions
+   * enabled. If set to <code>false</code> then all <code>Subscription*</code> attributes are
+   * ignored at create time.
-   * Sets the redundancy level for this pools server-to-client subscriptions.
-   * If <code>0</code> then no redundant copies will be kept on the servers.
-   * Otherwise an effort will be made to maintain the requested number of
-   * copies of the server-to-client subscriptions. At most one copy per server will
-   * be made up to the requested level.
+   * Sets the redundancy level for this pools server-to-client subscriptions. If <code>0</code> then
+   * no redundant copies will be kept on the servers. Otherwise an effort will be made to maintain
+   * the requested number of copies of the server-to-client subscriptions. At most one copy per
+   * server will be made up to the requested level.
-   * @throws IllegalArgumentException if <code>redundancyLevel</code>
-   *                                  is less than <code>-1</code>.
+   * @throws IllegalArgumentException if <code>redundancyLevel</code> is less than <code>-1</code>.
-   * Sets the messageTrackingTimeout attribute which is the time-to-live period, in
-   * milliseconds, for subscription events the client has received from the server. It's used
-   * to minimize duplicate events.
-   * Entries that have not been modified for this amount of time
-   * are expired from the list
+   * Sets the messageTrackingTimeout attribute which is the time-to-live period, in milliseconds,
+   * for subscription events the client has received from the server. It's used to minimize
+   * duplicate events. Entries that have not been modified for this amount of time are expired from
+   * the list
-   * @throws IllegalArgumentException if <code>messageTrackingTimeout</code>
-   *                                  is less than or equal to <code>0</code>.
+   * @throws IllegalArgumentException if <code>messageTrackingTimeout</code> is less than or equal
+   *         to <code>0</code>.
-   * Sets the interval in milliseconds
-   * to wait before sending acknowledgements to the cache server for
-   * events received from the server subscriptions.
+   * Sets the interval in milliseconds to wait before sending acknowledgements to the cache server
+   * for events received from the server subscriptions.
-   * @param ackInterval number of milliseconds to wait before sending event
-   *                    acknowledgements.
+   * @param ackInterval number of milliseconds to wait before sending event acknowledgements.
-   * @throws IllegalArgumentException if <code>ackInterval</code>
-   *                                  is less than or equal to <code>0</code>.
+   * @throws IllegalArgumentException if <code>ackInterval</code> is less than or equal to
+   *         <code>0</code>.
-   * By default setPRSingleHopEnabled is <code>true</code>
-   * in which case the client is aware of the location of partitions on servers hosting
-   * {@link Region regions} with
-   * {@link org.apache.geode.cache.DataPolicy#PARTITION}.
-   * Using this information, the client routes the client cache operations
-   * directly to the server which is hosting the required partition for the
-   * cache operation using a single network hop.
-   * This mode works best
-   * when {@link #setPoolMaxConnections(int)} is set
-   * to <code>-1</code> which is the default.
-   * This mode causes the client to have more connections to the servers.
+   * By default setPRSingleHopEnabled is <code>true</code> in which case the client is aware of the
+   * location of partitions on servers hosting {@link Region regions} with
+   * {@link org.apache.geode.cache.DataPolicy#PARTITION}. Using this information, the client routes
+   * the client cache operations directly to the server which is hosting the required partition for
+   * the cache operation using a single network hop. This mode works best when
+   * {@link #setPoolMaxConnections(int)} is set to <code>-1</code> which is the default. This mode
+   * causes the client to have more connections to the servers.
-   * If setPRSingleHopEnabled is <code>false</code> the client may need to do an extra network hop on servers
-   * to go to the required partition for that cache operation.
-   * The client will use fewer network connections to the servers.
+   * If setPRSingleHopEnabled is <code>false</code> the client may need to do an extra network hop
+   * on servers to go to the required partition for that cache operation. The client will use fewer
+   * network connections to the servers.
-   * Caution: for {@link org.apache.geode.cache.DataPolicy#PARTITION partition} regions
-   * with
-   * {@link org.apache.geode.cache.PartitionAttributesFactory#setLocalMaxMemory(int) local-max-memory}
-   * equal to zero, no cache operations mentioned above will be routed to those
+   * Caution: for {@link org.apache.geode.cache.DataPolicy#PARTITION partition} regions with
+   * {@link org.apache.geode.cache.PartitionAttributesFactory#setLocalMaxMemory(int)
+   * local-max-memory} equal to zero, no cache operations mentioned above will be routed to those
-   * If set to <code>true</code> then the created pool can be used by multiple
-   * users. <br>
+   * If set to <code>true</code> then the created pool can be used by multiple users. <br>
-   * Note: If set to true, all the client side regions must be
-   * {@link ClientRegionShortcut#PROXY proxies}. No client side storage is allowed.
+   * Note: If set to true, all the client side regions must be {@link ClientRegionShortcut#PROXY
+   * proxies}. No client side storage is allowed.
-   * Gets an arbitrary open instance of {@link ClientCache} produced by an
-   * earlier call to {@link #create}.
+   * Gets an arbitrary open instance of {@link ClientCache} produced by an earlier call to
+   * {@link #create}.
-   * @throws CacheClosedException  if a cache has not been created
-   *                               or the only created one is {@link ClientCache#isClosed closed}
-   * @throws IllegalStateException if the cache was created by CacheFactory instead
-   *                               of ClientCacheFactory
+   * @throws CacheClosedException if a cache has not been created or the only created one is
+   *         {@link ClientCache#isClosed closed}
+   * @throws IllegalStateException if the cache was created by CacheFactory instead of
+   *         ClientCacheFactory
-      throw new CacheClosedException(LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());
+      throw new CacheClosedException(
+          LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());
-        throw new IllegalStateException("The singleton cache was created by CacheFactory not ClientCacheFactory.");
+        throw new IllegalStateException(
+            "The singleton cache was created by CacheFactory not ClientCacheFactory.");
-   * Sets the object preference to PdxInstance type.
-   * When a cached object that was serialized as a PDX is read
-   * from the cache a {@link PdxInstance} will be returned instead of the actual domain class.
-   * The PdxInstance is an interface that provides run time access to
-   * the fields of a PDX without deserializing the entire PDX.
-   * The PdxInstance implementation is a light weight wrapper
-   * that simply refers to the raw bytes of the PDX that are kept
-   * in the cache. Using this method applications can choose to
-   * access PdxInstance instead of Java object.
-   * <p>Note that a PdxInstance is only returned if a serialized PDX is found in the cache.
-   * If the cache contains a deserialized PDX, then a domain class instance is returned instead of a PdxInstance.
+   * Sets the object preference to PdxInstance type. When a cached object that was serialized as a
+   * PDX is read from the cache a {@link PdxInstance} will be returned instead of the actual domain
+   * class. The PdxInstance is an interface that provides run time access to the fields of a PDX
+   * without deserializing the entire PDX. The PdxInstance implementation is a light weight wrapper
+   * that simply refers to the raw bytes of the PDX that are kept in the cache. Using this method
+   * applications can choose to access PdxInstance instead of Java object.
+   * <p>
+   * Note that a PdxInstance is only returned if a serialized PDX is found in the cache. If the
+   * cache contains a deserialized PDX, then a domain class instance is returned instead of a
+   * PdxInstance.
-   *  @param pdxReadSerialized true to prefer PdxInstance
-   *  @return this ClientCacheFactory
-   *  @since GemFire 6.6
-   *  @see org.apache.geode.pdx.PdxInstance 
+   * @param pdxReadSerialized true to prefer PdxInstance
+   * @return this ClientCacheFactory
+   * @since GemFire 6.6
+   * @see org.apache.geode.pdx.PdxInstance
-   * Set the PDX serializer for the cache. If this serializer is set,
-   * it will be consulted to see if it can serialize any domain classes which are
-   * added to the cache in portable data exchange format.
+   * Set the PDX serializer for the cache. If this serializer is set, it will be consulted to see if
+   * it can serialize any domain classes which are added to the cache in portable data exchange
+   * format.
-   * Set the disk store that is used for PDX meta data. When
-   * serializing objects in the PDX format, the type definitions
-   * are persisted to disk. This setting controls which disk store
-   * is used for that persistence.
+   * Set the disk store that is used for PDX meta data. When serializing objects in the PDX format,
+   * the type definitions are persisted to disk. This setting controls which disk store is used for
+   * that persistence.
-   * @param diskStoreName the name of the disk store to use
-   *                      for the PDX metadata.
+   * @param diskStoreName the name of the disk store to use for the PDX metadata.
-   * Control whether the type metadata for PDX objects is persisted to disk.
-   * The default for this setting is false.
-   * If you are using persistent regions with PDX then you must set this to true.
+   * Control whether the type metadata for PDX objects is persisted to disk. The default for this
+   * setting is false. If you are using persistent regions with PDX then you must set this to true.
-   * Control whether pdx ignores fields that were unread during deserialization.
-   * The default is to preserve unread fields be including their data during serialization.
-   * But if you configure the cache to ignore unread fields then their data will be lost
-   * during serialization.
-   * <P>You should only set this attribute to <code>true</code> if you know this member
-   * will only be reading cache data. In this use case you do not need to pay the cost
-   * of preserving the unread fields since you will never be reserializing pdx data.
+   * Control whether pdx ignores fields that were unread during deserialization. The default is to
+   * preserve unread fields be including their data during serialization. But if you configure the
+   * cache to ignore unread fields then their data will be lost during serialization.
+   * <P>
+   * You should only set this attribute to <code>true</code> if you know this member will only be
+   * reading cache data. In this use case you do not need to pay the cost of preserving the unread
+   * fields since you will never be reserializing pdx data.
-   * @param ignore <code>true</code> if fields not read during pdx deserialization should be ignored;
-   *               <code>false</code>, the default, if they should be preserved.
+   * @param ignore <code>true</code> if fields not read during pdx deserialization should be
+   *        ignored; <code>false</code>, the default, if they should be preserved.

MOV66 MOV65 INS66 UPD66 INS66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 INS66 UPD66 INS66 INS66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66