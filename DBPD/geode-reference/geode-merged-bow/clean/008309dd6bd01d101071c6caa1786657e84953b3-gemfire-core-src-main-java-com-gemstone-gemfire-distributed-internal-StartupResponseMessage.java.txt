Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-  public boolean sendViaJGroups() {
+  public boolean sendViaUDP() {
-  @Override
-  public void toData(DataOutput out) throws IOException {
-    toDataContent(out, Version.CURRENT);
-  }
-
-  @Override
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
-    fromDataContent(in, Version.CURRENT);
-  }
-  
-  // versions where serialization changed
-  private static Version[] serializationVersions = new Version[] {
-    Version.GFE_80, Version.GFE_82
-  };
-  
-    return serializationVersions;
+    return null;
-  public void toDataContent(DataOutput out, Version ver) throws IOException {
+  @Override
+  public void toData(DataOutput out) throws IOException {
+    
+    
+    Version ver = InternalDataSerializer.getVersionForDataStream(out);
+    
-    if (ver.compareTo(Version.GFE_82) < 0) {
+    if (ver.compareTo(Version.GFE_90) < 0) {
-  public void toDataPre_GFE_8_0_0_0(DataOutput out) throws IOException {
-    toDataContent(out, Version.GFE_80);
-  }
-
-  public void toDataPre_GFE_8_2_0_0(DataOutput out) throws IOException {
-    toDataContent(out, Version.GFE_82);
-  }
-
-  private void fromDataContent(DataInput in, Version ver)
+  @Override
+  public void fromData(DataInput in)
+    
+    Version ver = InternalDataSerializer.getVersionForDataStream(in);
+    
-    if (ver.compareTo(Version.GFE_82) < 0) {
+    if (ver.compareTo(Version.GFE_90) < 0) {
-  public void fromDataPre_GFE_8_0_0_0(DataInput in)
-      throws IOException, ClassNotFoundException {
-    fromDataContent(in, Version.GFE_80);
-  }
-  
-  public void fromDataPre_GFE_8_2_0_0(DataInput in)
-      throws IOException, ClassNotFoundException {
-    fromDataContent(in, Version.GFE_82);
-  }
-  

UPD42 MOV78 MOV5 MOV78 UPD42 MOV78 UPD83 UPD42 INS60 INS60 INS33 MOV43 INS59 MOV43 INS59 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD40 INS42 INS42 INS42 UPD40 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL40 DEL4 DEL3 DEL59 DEL23 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL44 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL42 DEL44 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31