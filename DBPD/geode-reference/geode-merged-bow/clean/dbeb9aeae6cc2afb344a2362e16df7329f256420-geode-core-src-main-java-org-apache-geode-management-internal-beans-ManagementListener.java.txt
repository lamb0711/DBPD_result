Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This Listener listens on various resource creation in GemFire and
- * create/destroys GemFire specific MBeans accordingly
+ * This Listener listens on various resource creation in GemFire and create/destroys GemFire
+ * specific MBeans accordingly
-public class ManagementListener implements ResourceEventsListener{
+public class ManagementListener implements ResourceEventsListener {
-  
+
-  
+
-   * Checks various conditions which might arise due to race condition for lock
-   * of GemFireCacheImpl.class which is obtained while GemFireCacheImpl
-   * constructor, cache.close(), DistributedSystem.disconnect().
+   * Checks various conditions which might arise due to race condition for lock of
+   * GemFireCacheImpl.class which is obtained while GemFireCacheImpl constructor, cache.close(),
+   * DistributedSystem.disconnect().
-   * As ManagementService creation logic is called in cache.init() method it
-   * leaves a small window of loosing the lock of GemFireCacheImpl.class
+   * As ManagementService creation logic is called in cache.init() method it leaves a small window
+   * of loosing the lock of GemFireCacheImpl.class
-   * These checks ensures that something unwanted has not happened during that
-   * small window
+   * These checks ensures that something unwanted has not happened during that small window
-  private boolean shouldProceed(ResourceEvent event){
-    DistributedSystem system =  InternalDistributedSystem.getConnectedInstance();
-    
+  private boolean shouldProceed(ResourceEvent event) {
+    DistributedSystem system = InternalDistributedSystem.getConnectedInstance();
+
-    
+
-    
-    if(system == null && !event.equals(ResourceEvent.CACHE_REMOVE)){
+
+    if (system == null && !event.equals(ResourceEvent.CACHE_REMOVE)) {
-    if(currentCache == null){
+    if (currentCache == null) {
-    if(currentCache.isClosed()){
+    if (currentCache.isClosed()) {
-  
+
-   * Handles various GFE resource life-cycle methods vis-a-vis Management and
-   * Monitoring
+   * Handles various GFE resource life-cycle methods vis-a-vis Management and Monitoring
-   *  
-   * @param event
-   *          Management event for which invocation has happened
-   * @param resource
-   *          the GFE resource type
+   * 
+   * @param event Management event for which invocation has happened
+   * @param resource the GFE resource type
-      if(!shouldProceed(event)){
-       return;
-      }
-      switch (event) {
+    if (!shouldProceed(event)) {
+      return;
+    }
+    switch (event) {
-        GatewayReceiver createdRecv = (GatewayReceiver)resource;
+        GatewayReceiver createdRecv = (GatewayReceiver) resource;
-        GatewayReceiver startedRecv = (GatewayReceiver)resource;
+        GatewayReceiver startedRecv = (GatewayReceiver) resource;
-        GatewayReceiver stoppededRecv = (GatewayReceiver)resource;
+        GatewayReceiver stoppededRecv = (GatewayReceiver) resource;
-        GatewaySender sender = (GatewaySender)resource;
+        GatewaySender sender = (GatewaySender) resource;
-        GatewaySender startedSender = (GatewaySender)resource;
+        GatewaySender startedSender = (GatewaySender) resource;
-        GatewaySender stoppedSender = (GatewaySender)resource;
+        GatewaySender stoppedSender = (GatewaySender) resource;
-        GatewaySender pausedSender = (GatewaySender)resource;
+        GatewaySender pausedSender = (GatewaySender) resource;
-        GatewaySender resumedSender = (GatewaySender)resource;
+        GatewaySender resumedSender = (GatewaySender) resource;
-        AlertDetails details = (AlertDetails)resource;
-        adapter.handleSystemNotification(details); 
+        AlertDetails details = (AlertDetails) resource;
+        adapter.handleSystemNotification(details);
-      break;
-      }
+        break;
+    }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66