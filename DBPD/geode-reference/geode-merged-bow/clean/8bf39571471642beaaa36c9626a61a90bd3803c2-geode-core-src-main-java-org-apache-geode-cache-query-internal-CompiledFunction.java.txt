Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @version     $Revision: 1.1 $
+ * @version $Revision: 1.1 $
-  private CompiledValue [] _args;
+  private CompiledValue[] _args;
-  
-  public CompiledFunction(CompiledValue [] args, int function) {
+
+  public CompiledFunction(CompiledValue[] args, int function) {
-  
+
-  
-  
+
+
+
-  
-  public Object evaluate(ExecutionContext context)
-  throws FunctionDomainException, TypeMismatchException, NameResolutionException,
-          QueryInvocationTargetException {
+
+  public Object evaluate(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-      return Functions.nvl(_args[0],_args[1], context);
-    } else if (this._function == LITERAL_to_date){
-      return Functions.to_date(_args[0],_args[1], context);
-    } else {  
-      throw new QueryInvalidException(LocalizedStrings.CompiledFunction_UNSUPPORTED_FUNCTION_WAS_USED_IN_THE_QUERY.toLocalizedString());
+      return Functions.nvl(_args[0], _args[1], context);
+    } else if (this._function == LITERAL_to_date) {
+      return Functions.to_date(_args[0], _args[1], context);
+    } else {
+      throw new QueryInvalidException(
+          LocalizedStrings.CompiledFunction_UNSUPPORTED_FUNCTION_WAS_USED_IN_THE_QUERY
+              .toLocalizedString());
-  
+
-  throws TypeMismatchException, AmbiguousNameException, NameResolutionException {
-    int len =  this._args.length;
-    for(int i = 0; i < len; i++) {
-      context.addDependencies(this,this._args[i].computeDependencies(context));  
+      throws TypeMismatchException, AmbiguousNameException, NameResolutionException {
+    int len = this._args.length;
+    for (int i = 0; i < len; i++) {
+      context.addDependencies(this, this._args[i].computeDependencies(context));
-  
+
-  throws FunctionDomainException, TypeMismatchException {
+      throws FunctionDomainException, TypeMismatchException {
-  
-  public CompiledValue [] getArguments() {
+
+  public CompiledValue[] getArguments() {
-  
+
-  throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
+      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
-    for(int i = len - 1; i > 0; i--) {
+    for (int i = len - 1; i > 0; i--) {
-       clauseBuffer.insert(0, ',');
+      clauseBuffer.insert(0, ',');
-    switch(this._function) {
-      case LITERAL_nvl : 
+    switch (this._function) {
+      case LITERAL_nvl:
-      case LITERAL_element : 
+      case LITERAL_element:
-      case LITERAL_to_date : 
+      case LITERAL_to_date:
-        break;    
-       default :
+        break;
+      default:
-    }          
+    }

UPD66