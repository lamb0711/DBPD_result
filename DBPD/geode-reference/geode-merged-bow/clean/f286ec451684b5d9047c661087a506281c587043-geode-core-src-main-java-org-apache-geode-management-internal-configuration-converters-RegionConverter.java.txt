GEODE-6944: add support for *REDUNDANT* regionType (#3957)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>


+
+import java.util.Optional;
+
-    if (xmlObject.getType() == null) {
-      // older gfsh would generate the region xml without the refid/type. we will not
-      // support showing these regions in management rest api for now.
-      region.setType(RegionType.UNSUPPORTED);
-    } else {
-      try {
-        region.setType(RegionType.valueOf(xmlObject.getType()));
-      } catch (IllegalArgumentException e) {
-        // Management rest api will not support showing regions with "LOCAL*" types or user defined
-        // refids
-        region.setType(RegionType.UNSUPPORTED);
-      }
-    }
+    region.setType(getRegionType(xmlObject.getType(), regionAttributes));
+      Optional.ofNullable(regionAttributes.getPartitionAttributes())
+          .flatMap(
+              partitionAttributes -> Optional.ofNullable(partitionAttributes.getRedundantCopies()))
+          .ifPresent(copies -> region.setRedundantCopies(Integer.parseInt(copies)));
+
+    if (configObject.getRedundantCopies() != null) {
+      RegionAttributesType.PartitionAttributes partitionAttributes =
+          new RegionAttributesType.PartitionAttributes();
+      partitionAttributes.setRedundantCopies(configObject.getRedundantCopies().toString());
+      attributesType.setPartitionAttributes(partitionAttributes);
+    }
+  /**
+   * Data policy to regionType is almost a 1-to-1 mapping, except in
+   * the case of DataPolicy.PARTITION, we will need to see the local max memory
+   * to determine if it's a PARTITION type or a PARTITION_PROXY type.
+   *
+   * we do our best to infer the type from the existing xml attributes. For data
+   * policies not supported by management rest api (for example, NORMAL and PRELOADED)
+   * it will show as UNSUPPORTED
+   */
+  public RegionType getRegionType(String refid, RegionAttributesType regionAttributes) {
+    if (refid != null) {
+      try {
+        return RegionType.valueOf(refid);
+      } catch (Exception e) {
+        return RegionType.UNSUPPORTED;
+      }
+    }
+
+    // if refid is null, we will try to determine the type based on the region attributes
+    if (regionAttributes == null) {
+      return RegionType.UNSUPPORTED;
+    }
+    RegionAttributesDataPolicy dataPolicy = regionAttributes.getDataPolicy();
+
+    if (dataPolicy == null) {
+      return RegionType.UNSUPPORTED;
+    }
+
+    switch (dataPolicy) {
+      case PARTITION: {
+        RegionAttributesType.PartitionAttributes partitionAttributes =
+            regionAttributes.getPartitionAttributes();
+        if (partitionAttributes != null && "0".equals(partitionAttributes.getLocalMaxMemory())) {
+          return RegionType.PARTITION_PROXY;
+        }
+        return RegionType.PARTITION;
+      }
+      case PERSISTENT_PARTITION: {
+        return RegionType.PARTITION_PERSISTENT;
+      }
+      case PERSISTENT_REPLICATE: {
+        return RegionType.REPLICATE_PERSISTENT;
+      }
+      case REPLICATE: {
+        return RegionType.REPLICATE;
+      }
+      case EMPTY: {
+        return RegionType.REPLICATE_PROXY;
+      }
+    }
+    return RegionType.UNSUPPORTED;
+  }
+
+
+      // these are supported by the management rest api
+      case "PARTITION_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
+        break;
+      }
+      case "PARTITION_PROXY": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setLocalMaxMemory("0");
+        break;
+      }
+      case "REPLICATE_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        break;
+      }
+      case "REPLICATE_PROXY": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.EMPTY);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        break;
+      }
-      case "PARTITION_PERSISTENT": {
-        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
-        break;
-      }
+
-
-      case "REPLICATE_PERSISTENT": {
-        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
-        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
-        break;
-      }
-
-      case "PARTITION_PROXY": {
-        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
-        regionAttributes.setLocalMaxMemory("0");
-        break;
-      }
+
-      case "REPLICATE_PROXY": {
-        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.EMPTY);
-        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
-        break;
-      }
+

INS26 INS40 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 MOV21 INS25 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS50 INS41 MOV49 MOV8 MOV49 MOV8 MOV49 MOV8 MOV49 MOV8 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS40 MOV42 INS21 INS32 INS33 INS60 INS21 INS21 INS42 INS33 INS54 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS60 INS25 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 UPD42 UPD42 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS12 INS40 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS40 INS40 INS40 INS40 INS40 INS32 INS42 INS86 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS44 INS8 INS40 INS42 INS32 INS27 INS32 INS41 INS32 INS42 INS86 INS59 INS32 INS43 INS32 INS42 INS32 INS43 INS42 INS41 INS42 INS42 INS42 INS33 INS45 INS42 INS32 INS40 INS42 INS42 INS32 INS59 INS32 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25