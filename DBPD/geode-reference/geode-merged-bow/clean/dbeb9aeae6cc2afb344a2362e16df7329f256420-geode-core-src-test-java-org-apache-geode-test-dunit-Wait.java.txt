Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>Wait</code> provides static utility methods to wait for some
- * asynchronous action with intermittent polling.
+ * <code>Wait</code> provides static utility methods to wait for some asynchronous action with
+ * intermittent polling.
- * These methods can be used directly: <code>Wait.waitForCriterion(...)</code>,
- * however, they are intended to be referenced through static import:
+ * These methods can be used directly: <code>Wait.waitForCriterion(...)</code>, however, they are
+ * intended to be referenced through static import:
- * <p>Deprecated in favor of using {@link com.jayway.awaitility.Awaitility}.
+ * <p>
+ * Deprecated in favor of using {@link com.jayway.awaitility.Awaitility}.
- * <p>Examples of using Awaitility:<pre>
+ * <p>
+ * Examples of using Awaitility:
+ * 
+ * <pre>
- * <p>NOTE: By default, the pollDelay is equal to the pollInterval which defaults to
- * ONE_HUNDRED_MILLISECONDS. You may want to add pollDelay(ZERO) to force
- * Awaitility to check your condition before waiting the pollInterval.
+ * <p>
+ * NOTE: By default, the pollDelay is equal to the pollInterval which defaults to
+ * ONE_HUNDRED_MILLISECONDS. You may want to add pollDelay(ZERO) to force Awaitility to check your
+ * condition before waiting the pollInterval.
- * <p>Example of detailed conversion to Awaitility:<pre>
+ * <p>
+ * Example of detailed conversion to Awaitility:
+ * 
+ * <pre>
-  
+
-  protected Wait() {
-  }
-  
+  protected Wait() {}
+
-   *  
+   * 
-   * Pause for the specified milliseconds. Make sure system clock has advanced
-   * by the specified number of millis before returning.
+   * Pause for the specified milliseconds. Make sure system clock has advanced by the specified
+   * number of millis before returning.
-    }
-    catch (InterruptedException e) {
+    } catch (InterruptedException e) {
-  
+
-  public static void waitForCriterion(final WaitCriterion waitCriterion, final long timeoutMillis, final long pollingInterval, final boolean throwOnTimeout) {
+  public static void waitForCriterion(final WaitCriterion waitCriterion, final long timeoutMillis,
+      final long pollingInterval, final boolean throwOnTimeout) {
-        StoppableWaitCriterion ev2 = (StoppableWaitCriterion)waitCriterion;
+        StoppableWaitCriterion ev2 = (StoppableWaitCriterion) waitCriterion;
-      
+
-      
+
-    return waitForExpiryClockToChange(cacheTimeMillisSource, cacheTimeMillisSource.cacheTimeMillis());
+    return waitForExpiryClockToChange(cacheTimeMillisSource,
+        cacheTimeMillisSource.cacheTimeMillis());
-  public static final long waitForExpiryClockToChange(final LocalRegion cacheTimeMillisSource, final long baseTime) {
+  public static final long waitForExpiryClockToChange(final LocalRegion cacheTimeMillisSource,
+      final long baseTime) {
-   * Wait on a mutex.  This is done in a loop in order to address the 
-   * "spurious wakeup" "feature" in Java.
+   * Wait on a mutex. This is done in a loop in order to address the "spurious wakeup" "feature" in
+   * Java.
-  public static void waitMutex(final WaitCriterion waitCriterion, final Object mutex, final long milliseconds, final long pollingInterval, final boolean throwOnTimeout) {
+  public static void waitMutex(final WaitCriterion waitCriterion, final Object mutex,
+      final long milliseconds, final long pollingInterval, final boolean throwOnTimeout) {
-        
+
-          fail("Event never occurred after " + milliseconds + " ms: " + waitCriterion.description());
+          fail(
+              "Event never occurred after " + milliseconds + " ms: " + waitCriterion.description());
-        
+
-        
+

UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66