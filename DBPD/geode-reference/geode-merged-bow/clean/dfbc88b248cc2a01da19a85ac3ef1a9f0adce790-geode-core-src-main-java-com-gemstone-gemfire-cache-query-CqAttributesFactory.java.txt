Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

-import java.io.Serializable;
-import java.util.Iterator;
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.SystemFailure;
-import com.gemstone.gemfire.cache.CacheCallback;
+import com.gemstone.gemfire.cache.query.internal.cq.CqAttributesImpl;
-import com.gemstone.gemfire.internal.logging.LogService;
-import com.gemstone.gemfire.internal.logging.log4j.LocalizedMessage;
-  private static final Logger logger = LogService.getLogger();
-  
+
-    synchronized (this.cqAttributes) {
-      this.cqAttributes.cqListeners = new ArrayList(Arrays.asList(cqAttributes.getCqListeners()));
-    }
+    this.cqAttributes.setCqListeners(new ArrayList(Arrays.asList(cqAttributes.getCqListeners())));
-    synchronized (this.cqAttributes) {
-      this.cqAttributes.addCqListener(cqListener);
-    }
+    this.cqAttributes.addCqListener(cqListener);
-    synchronized (this.cqAttributes) {
-      if (cqListeners == null || cqListeners.length == 0) {
-        this.cqAttributes.cqListeners = null;
-      } else {
-        List nl = Arrays.asList(cqListeners);
-        if (nl.contains(null)) {
-          throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());
-        }
-        this.cqAttributes.cqListeners = new ArrayList(nl);
+    if (cqListeners == null || cqListeners.length == 0) {
+      this.cqAttributes.setCqListeners(null);
+    } else {
+      List nl = Arrays.asList(cqListeners);
+      if (nl.contains(null)) {
+        throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());
+      this.cqAttributes.setCqListeners(new ArrayList(nl));
-  
-  
-  protected static class CqAttributesImpl implements CqAttributes, CqAttributesMutator, Cloneable, Serializable {
-    private static final long serialVersionUID = -959395592883099100L;
-    
-    ArrayList cqListeners = null;
-    
-    boolean dataPolicyHasBeenSet = false;
-    
-    private static final CqListener[] EMPTY_LISTENERS = new CqListener[0];
-    
-    /**
-     * Used to synchronize access to cqListeners
-     */
-    private final Object clSync = new Object();
-    
-    /**
-     * Returns the CqListeners set with the CQ
-     * @return CqListener[]
-     */
-    public CqListener[] getCqListeners() {
-      if (this.cqListeners == null){
-        return CqAttributesImpl.EMPTY_LISTENERS;
-      }
-      
-      CqListener[] result = null;
-      synchronized(this.clSync){   
-        result = new CqListener[cqListeners.size()];
-        cqListeners.toArray(result);
-      }
-      return result;
-    }
-    /**
-     * Returns the CqListener set with the CQ
-     * @return CqListener
-     */
-    public CqListener getCqListener() {
-      ArrayList listeners = this.cqListeners;
-      if (listeners == null) {
-        return null;
-      }
-      synchronized (this.clSync) {
-        if (listeners.size() == 0) {
-          return null;
-        }
-        if (listeners.size() == 1) {
-          return (CqListener)this.cqListeners.get(0);
-        }
-      }
-      throw new IllegalStateException(LocalizedStrings.CqAttributesFactory_MORE_THAN_ONE_CQLISTENER_EXISTS.toLocalizedString());
-    }
-    
-    @Override
-    public Object clone() {
-      try {
-        return super.clone();
-      }
-      catch (CloneNotSupportedException e) {
-        throw new InternalError(LocalizedStrings.CqAttributesFactory_CLONENOTSUPPORTEDEXCEPTION_THROWN_IN_CLASS_THAT_IMPLEMENTS_CLONEABLE.toLocalizedString());
-      }
-    }
-    
-    /**
-     * Adds a Cqlistener to the end of the list of Cqlisteners on this CqQuery.
-     * @param cql the user defined cq listener to add to the CqQuery.
-     * @throws IllegalArgumentException if <code>aListener</code> is null
-     */ 
-    public void addCqListener(CqListener cql)
-    {
-      if (cql == null) {
-        throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());
-      }
-      synchronized (this.clSync) {
-        ArrayList oldListeners = this.cqListeners;
-        if (oldListeners == null || oldListeners.size() == 0) {
-          ArrayList al = new ArrayList(1);
-          al.add(cql);
-          this.cqListeners = al;
-        }
-        else {
-          if (!oldListeners.contains(cql)) {
-            oldListeners.add(cql);
-          }
-        }
-      }
-    }
-    
-    /**
-     * Removes all Cqlisteners, calling on each of them, and then adds each listener in the specified array.
-     * @param addedListeners a possibly null or empty array of listeners to add to this CqQuery.
-     * @throws IllegalArgumentException if the <code>newListeners</code> array has a null element
-     */ 
-    public void initCqListeners(CqListener[] addedListeners)
-    {
-      ArrayList oldListeners = null;
-      synchronized (this.clSync) {
-        oldListeners = this.cqListeners;
-        if (addedListeners == null || addedListeners.length == 0) {
-          this.cqListeners = null;
-        }
-        else { // we have some listeners to add
-          List nl = Arrays.asList(addedListeners);
-          if (nl.contains(null)) {
-            throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());
-          }
-          this.cqListeners = new ArrayList(nl);      
-        }
-      }
-      
-      if (oldListeners != null) {
-        CqListener cql = null;
-        for (Iterator iter = oldListeners.iterator(); iter.hasNext();) {
-          try {
-            cql = (CqListener)iter.next();
-            cql.close();
-            // Handle client side exceptions.
-          } catch (Exception ex) {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0, ex.getLocalizedMessage()));
-            if (logger.isDebugEnabled()) {
-              logger.debug(ex.getMessage(), ex);
-            }
-          } 
-          catch (VirtualMachineError err) {
-            SystemFailure.initiateFailure(err);
-            // If this ever returns, rethrow the error.  We're poisoned
-            // now, so don't let this thread continue.
-            throw err;
-          }
-          catch (Throwable t) {
-            // Whenever you catch Error or Throwable, you must also
-            // catch VirtualMachineError (see above).  However, there is
-            // _still_ a possibility that you are dealing with a cascading
-            // error condition, so you also need to check to see if the JVM
-            // is still usable:
-            SystemFailure.checkFailure();
-            logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0, t.getLocalizedMessage()));
-            if (logger.isDebugEnabled()) {
-              logger.debug(t.getMessage(), t);
-            }
-          }        
-        }
-      }
-    }
-    
-    /**
-     * Removes a Cqlistener from the list of Cqlisteners on this CqQuery.
-     * Does nothing if the specified listener has not been added.
-     * If the specified listener has been added then {@link CacheCallback#close()} will
-     * be called on it; otherwise does nothing.
-     * @param cql the Cqlistener to remove from the CqQuery.
-     * @throws IllegalArgumentException if <code>cl</code> is null
-     */ 
-    public void removeCqListener(CqListener cql)
-    {
-      if (cql == null) {
-        throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_REMOVECQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());
-      }
-      synchronized (this.clSync) {
-        ArrayList oldListeners = this.cqListeners;
-        if (oldListeners != null) {
-          if (oldListeners.remove(cql)) {
-            if (oldListeners.isEmpty()) {
-              this.cqListeners = null;
-            }
-            try {
-              cql.close();
-              // Handle client side exceptions.
-            } catch (Exception ex) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_EXCEPTION_CLOSING_CQ_LISTENER_ERROR_0, ex.getLocalizedMessage()));
-              if (logger.isDebugEnabled()) {
-                logger.debug(ex.getMessage(), ex);
-              }
-            } 
-            catch (VirtualMachineError err) {
-              SystemFailure.initiateFailure(err);
-              // If this ever returns, rethrow the error.  We're poisoned
-              // now, so don't let this thread continue.
-              throw err;
-            }
-            catch (Throwable t) {
-              // Whenever you catch Error or Throwable, you must also
-              // catch VirtualMachineError (see above).  However, there is
-              // _still_ a possibility that you are dealing with a cascading
-              // error condition, so you also need to check to see if the JVM
-              // is still usable:
-              SystemFailure.checkFailure();
-              logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_CLOSING_CQ_LISTENER_ERROR_0, t.getLocalizedMessage()));
-              if (logger.isDebugEnabled()) {
-                logger.debug(t.getMessage(), t);
-              }
-              }        
-          }
-        }
-      }
-    }
-  }

UPD40 MOV8 MOV8 MOV8 MOV25 INS32 MOV22 INS42 MOV14 INS32 INS32 MOV22 INS42 INS33 MOV22 INS42 MOV14 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL22 DEL7 DEL51 DEL8 DEL51 DEL8 DEL52 DEL42 DEL22 DEL42 DEL22 DEL33 DEL7 DEL52 DEL42 DEL22 DEL42 DEL22 DEL7 DEL51 DEL8 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL34 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL34 DEL32 DEL11 DEL41 DEL8 DEL25 DEL8 DEL51 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL48 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL32 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL55