GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.
+import org.apache.geode.cache.asyncqueue.AsyncEventQueue;
+import org.apache.geode.internal.cache.wan.AsyncEventQueueConfigurationException;
-  public void updatePRConfigWithNewSetOfGatewaySenders(Set<String> gatewaySendersToAdd) {
+  public void updatePRConfigWithNewSetOfAsynchronousEventDispatchers(
+      Set<String> asynchronousEventDispatchers) {
-      prConfig.setGatewaySenderIds(gatewaySendersToAdd);
+      prConfig.setGatewaySenderIds(asynchronousEventDispatchers);
-        validateParallelGatewaySenderIds();
+        validateParallelAsynchronousEventDispatcherIds();
-  public void validateParallelGatewaySenderIds() throws PRLocallyDestroyedException {
-    validateParallelGatewaySenderIds(this.getParallelGatewaySenderIds());
+  public void validateParallelAsynchronousEventDispatcherIds() throws PRLocallyDestroyedException {
+    validateParallelAsynchronousEventDispatcherIds(this.getParallelGatewaySenderIds());
-  /*
-   * filterOutNonParallelGatewaySenders takes in a set of gateway sender IDs and returns
-   * a set of parallel gateway senders present in the input set.
+  /**
+   * Filters out non parallel GatewaySenders.
+   *
+   * @param senderIds set of gateway sender IDs.
+   * @return set of parallel gateway senders present in the input set.
-    Set<String> allParallelSenders = cache.getAllGatewaySenders().parallelStream()
-        .filter(GatewaySender::isParallel).map(GatewaySender::getId).collect(toSet());
-    Set<String> parallelSenders = new HashSet<>();
-    senderIds.parallelStream().forEach(gatewaySenderId -> {
-      if (allParallelSenders.contains(gatewaySenderId)) {
-        parallelSenders.add(gatewaySenderId);
-      }
-    });
+    Set<String> allParallelSenders = cache.getAllGatewaySenders()
+        .parallelStream()
+        .filter(GatewaySender::isParallel)
+        .map(GatewaySender::getId)
+        .collect(toSet());
+
+    Set<String> parallelSenders = new HashSet<>(senderIds);
+    parallelSenders.retainAll(allParallelSenders);
+
-  public void validateParallelGatewaySenderIds(Set<String> parallelGatewaySenderIds)
-      throws PRLocallyDestroyedException {
-    for (String senderId : parallelGatewaySenderIds) {
-      for (PartitionRegionConfig config : getPRRoot().values()) {
-        if (config.getGatewaySenderIds().contains(senderId)) {
+  /**
+   * Filters out non parallel AsyncEventQueues.
+   *
+   * @param queueIds set of async-event-queue IDs.
+   * @return set of parallel async-event-queues present in the input set.
+   */
+  public Set<String> filterOutNonParallelAsyncEventQueues(Set<String> queueIds) {
+    Set<String> allParallelQueues = cache.getAsyncEventQueues()
+        .parallelStream()
+        .filter(AsyncEventQueue::isParallel)
+        .map(asyncEventQueue -> AsyncEventQueueImpl
+            .getAsyncEventQueueIdFromSenderId(asyncEventQueue.getId()))
+        .collect(toSet());
+
+    Set<String> parallelAsyncEventQueues = new HashSet<>(queueIds);
+    parallelAsyncEventQueues.retainAll(allParallelQueues);
+
+    return parallelAsyncEventQueues;
+  }
+
+  public void validateParallelAsynchronousEventDispatcherIds(
+      Set<String> asynchronousEventDispatcherIds) throws PRLocallyDestroyedException {
+    for (String dispatcherId : asynchronousEventDispatcherIds) {
+      GatewaySender sender = getCache().getGatewaySender(dispatcherId);
+      AsyncEventQueue asyncEventQueue = getCache()
+          .getAsyncEventQueue(AsyncEventQueueImpl.getAsyncEventQueueIdFromSenderId(dispatcherId));
+
+      // Can't attach a non persistent parallel gateway / async-event-queue to a persistent
+      // partitioned region.
+      if (getDataPolicy().withPersistence()) {
+        if ((sender != null) && (!sender.isPersistenceEnabled())) {
+          throw new GatewaySenderConfigurationException(String.format(
+              "Non persistent gateway sender %s can not be attached to persistent region %s",
+              dispatcherId, getFullPath()));
+        } else if ((asyncEventQueue != null) && (!asyncEventQueue.isPersistent())) {
+          throw new AsyncEventQueueConfigurationException(String.format(
+              "Non persistent asynchronous event queue %s can not be attached to persistent region %s",
+              dispatcherId, getFullPath()));
+        }
+      }
+
+      for (PartitionRegionConfig config : this.prRoot.values()) {
+        if (config.getGatewaySenderIds().contains(dispatcherId)) {
+
+
-                throw new IllegalStateException(
-                    String.format(
-                        "Non colocated regions %s, %s cannot have the same parallel %s id %s configured.",
-                        new Object[] {this.getFullPath(), config.getFullPath(),
-                            senderId.contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)
-                                ? "async event queue" : "gateway sender",
-                            senderId}));
+                throw new IllegalStateException(String.format(
+                    "Non colocated regions %s, %s cannot have the same parallel %s id %s configured.",
+                    this.getFullPath(), config.getFullPath(),
+                    (asyncEventQueue != null ? "async event queue" : "gateway sender"),
+                    dispatcherId));
-            throw new IllegalStateException(
-                String.format(
-                    "Non colocated regions %s, %s cannot have the same parallel %s id %s configured.",
-                    new Object[] {this.getFullPath(), config.getFullPath(),
-                        senderId.contains(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX)
-                            ? "async event queue" : "gateway sender",
-                        senderId}));
+            throw new IllegalStateException(String.format(
+                "Non colocated regions %s, %s cannot have the same parallel %s id %s configured.",
+                this.getFullPath(), config.getFullPath(),
+                (asyncEventQueue != null ? "async event queue" : "gateway sender"), dispatcherId));
-

INS26 INS26 INS40 INS40 INS31 UPD42 UPD42 INS29 INS29 INS83 INS74 INS42 MOV44 INS8 UPD42 INS44 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 UPD42 INS60 INS60 INS21 INS41 INS74 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS42 INS43 INS43 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS86 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS25 INS22 INS32 INS42 INS90 INS59 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS8 INS25 INS52 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS36 INS53 INS27 INS8 UPD42 INS42 INS42 INS42 INS42 INS27 INS38 INS14 INS36 INS36 INS53 INS42 INS33 INS32 INS43 INS32 INS27 INS38 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS33 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 MOV43 INS42 MOV32 MOV32 INS36 INS42 INS16 INS27 MOV45 MOV45 MOV43 INS42 INS33 MOV32 MOV32 INS36 INS42 UPD42 MOV42 INS16 INS27 MOV45 MOV45 INS42 INS33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL86 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL40 DEL32 DEL16 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL32 DEL16 DEL42 DEL4 DEL3