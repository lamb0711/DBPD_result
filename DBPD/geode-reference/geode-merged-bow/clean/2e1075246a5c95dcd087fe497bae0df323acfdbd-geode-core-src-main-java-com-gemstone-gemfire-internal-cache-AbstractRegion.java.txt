Merge branch 'release/1.0.0-incubating.M3'

-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.CopyOnWriteArraySet;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.cache.AttributesMutator;
-import com.gemstone.gemfire.cache.CacheCallback;
-import com.gemstone.gemfire.cache.CacheListener;
-import com.gemstone.gemfire.cache.CacheLoader;
-import com.gemstone.gemfire.cache.CacheLoaderException;
-import com.gemstone.gemfire.cache.CacheStatistics;
-import com.gemstone.gemfire.cache.CacheWriter;
-import com.gemstone.gemfire.cache.CacheWriterException;
-import com.gemstone.gemfire.cache.CustomEvictionAttributes;
-import com.gemstone.gemfire.cache.CustomExpiry;
-import com.gemstone.gemfire.cache.DataPolicy;
-import com.gemstone.gemfire.cache.DiskWriteAttributes;
-import com.gemstone.gemfire.cache.EntryExistsException;
-import com.gemstone.gemfire.cache.EntryNotFoundException;
-import com.gemstone.gemfire.cache.EvictionAttributes;
-import com.gemstone.gemfire.cache.EvictionAttributesMutator;
-import com.gemstone.gemfire.cache.EvictionCriteria;
-import com.gemstone.gemfire.cache.ExpirationAction;
-import com.gemstone.gemfire.cache.ExpirationAttributes;
-import com.gemstone.gemfire.cache.MembershipAttributes;
-import com.gemstone.gemfire.cache.MirrorType;
-import com.gemstone.gemfire.cache.Operation;
-import com.gemstone.gemfire.cache.PartitionAttributes;
-import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.cache.RegionAccessException;
-import com.gemstone.gemfire.cache.RegionAttributes;
-import com.gemstone.gemfire.cache.RegionDestroyedException;
-import com.gemstone.gemfire.cache.RegionMembershipListener;
-import com.gemstone.gemfire.cache.RegionService;
-import com.gemstone.gemfire.cache.RoleException;
-import com.gemstone.gemfire.cache.Scope;
-import com.gemstone.gemfire.cache.StatisticsDisabledException;
-import com.gemstone.gemfire.cache.SubscriptionAttributes;
-import com.gemstone.gemfire.cache.TimeoutException;
+import com.gemstone.gemfire.cache.*;
-import com.gemstone.gemfire.cache.query.FunctionDomainException;
-import com.gemstone.gemfire.cache.query.NameResolutionException;
-import com.gemstone.gemfire.cache.query.QueryInvocationTargetException;
-import com.gemstone.gemfire.cache.query.SelectResults;
-import com.gemstone.gemfire.cache.query.TypeMismatchException;
+import com.gemstone.gemfire.cache.query.*;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.google.common.util.concurrent.Service.State;
+import org.apache.logging.log4j.Logger;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.File;
+import java.io.IOException;
+import java.util.*;
+import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.concurrent.atomic.AtomicLong;
-   * @since 9.0
+   * @since Geode 1.0
-  protected boolean cloningEnable = false;
+  private boolean cloningEnable = false;
-  protected CustomEvictionAttributes customEvictionAttributes;
-
-  private static final boolean trackHits = !Boolean.getBoolean("gemfire.ignoreHits");
-  private static final boolean trackMisses = !Boolean.getBoolean("gemfire.ignoreMisses");
+  private static final boolean trackHits = !Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ignoreHits");
+  private static final boolean trackMisses = !Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ignoreMisses");
-  protected String hdfsStoreName;
-  
-  protected boolean hdfsWriteOnly;
-  
-   * @since 8.1
+   * @since GemFire 8.1
-   * @since 8.1
+   * @since GemFire 8.1
-  public final Object get(Object name) throws CacheLoaderException,
+  public Object get(Object name) throws CacheLoaderException,
-  public final Object put(Object name, Object value) throws TimeoutException,
+  public Object put(Object name, Object value) throws TimeoutException,
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-  @Override
-  public final String getHDFSStoreName() {
-    return this.hdfsStoreName;
-  }
-  
-  @Override
-  public final boolean getHDFSWriteOnly() {
-    return this.hdfsWriteOnly;
-  }
-  
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-    this.customEvictionAttributes = attrs.getCustomEvictionAttributes();
-    this.hdfsStoreName = attrs.getHDFSStoreName();
-    this.hdfsWriteOnly = attrs.getHDFSWriteOnly();
-   * @since 5.7
+   * @since GemFire 5.7
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public CustomEvictionAttributes getCustomEvictionAttributes() {
-    return this.customEvictionAttributes;
-  }
-
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public CustomEvictionAttributes setCustomEvictionAttributes(long newStart,
-      long newInterval) {
-    checkReadiness();
-    if (this.customEvictionAttributes == null) {
-      throw new IllegalArgumentException(
-          LocalizedStrings.AbstractRegion_NO_CUSTOM_EVICTION_SET
-              .toLocalizedString(getFullPath()));
-    }
-
-    if (newStart == 0) {
-      newStart = this.customEvictionAttributes.getEvictorStartTime();
-    }
-    this.customEvictionAttributes = new CustomEvictionAttributesImpl(
-        this.customEvictionAttributes.getCriteria(), newStart, newInterval,
-        newStart == 0 && newInterval == 0);
-
-//    if (this.evService == null) {
-//      initilializeCustomEvictor();
-//    } else {// we are changing the earlier one which is already started.
-//      EvictorService service = getEvictorTask();
-//      service.changeEvictionInterval(newInterval);
-//      if (newStart != 0)
-//        service.changeStartTime(newStart);
-//    }
-
-    return this.customEvictionAttributes;
-  }
-  
-   * @since 5.0
+   * @since GemFire 5.0
-  public final InternalDistributedSystem getSystem() {
+  public InternalDistributedSystem getSystem() {
-  * @since 8.1
-  * property used to find region operations that reach out to HDFS multiple times
+  * @since GemFire 8.1
-  /**
-   * property used to find region operations that reach out to HDFS multiple times
-   */
-  private static final boolean DEBUG_HDFS_CALLS = Boolean.getBoolean("DebugHDFSCalls");
-
-  /**
-   * throws exception if region operation goes out to HDFS multiple times
-   */
-  private static final boolean THROW_ON_MULTIPLE_HDFS_CALLS = Boolean.getBoolean("throwOnMultipleHDFSCalls");
-
-  private ThreadLocal<CallLog> logHDFSCalls = DEBUG_HDFS_CALLS ? new ThreadLocal<CallLog>() : null;
-
-  public void hdfsCalled(Object key) {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    logHDFSCalls.get().addStack(new Throwable());
-    logHDFSCalls.get().setKey(key);
-  }
-  public final void operationStart() {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    if (logHDFSCalls.get() == null) {
-      logHDFSCalls.set(new CallLog());
-      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationStart", new Throwable());
-    } else {
-      logHDFSCalls.get().incNestedCall();
-      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:incNestedCall:", new Throwable());
-    }
-  }
-  public final void operationCompleted() {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationCompleted", new Throwable());
-    if (logHDFSCalls.get() != null && logHDFSCalls.get().decNestedCall() < 0) {
-      logHDFSCalls.get().assertCalls();
-      logHDFSCalls.set(null);
-    }
-  }
-
-  public static class CallLog {
-    private List<Throwable> stackTraces = new ArrayList<Throwable>();
-    private Object key;
-    private int nestedCall = 0;
-    public void incNestedCall() {
-      nestedCall++;
-    }
-    public int decNestedCall() {
-      return --nestedCall;
-    }
-    public void addStack(Throwable stack) {
-      this.stackTraces.add(stack);
-    }
-    public void setKey(Object key) {
-      this.key = key;
-    }
-    public void assertCalls() {
-      if (stackTraces.size() > 1) {
-        Throwable firstTrace = new Throwable();
-        Throwable lastTrace = firstTrace;
-        for (Throwable t : this.stackTraces) {
-          lastTrace.initCause(t);
-          lastTrace = t;
-        }
-        if (THROW_ON_MULTIPLE_HDFS_CALLS) {
-          throw new RuntimeException("SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
-        } else {
-          InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
-        }
-      }
-    }
-  }
-
-  public EvictionCriteria getEvictionCriteria() {
-    EvictionCriteria criteria = null;
-    if (this.customEvictionAttributes != null
-        && !this.customEvictionAttributes.isEvictIncoming()) {
-      criteria = this.customEvictionAttributes.getCriteria();
-    }
-    return criteria;
-  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD83 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS27 INS27 INS40 INS45 INS40 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL45 DEL45 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL83 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL33 DEL16 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL37 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL38 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL70 DEL42 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL27 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31