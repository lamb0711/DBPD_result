Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * All access to this class should be done through 
- * the static methods of ReferenceCountHelper.
+ * All access to this class should be done through the static methods of ReferenceCountHelper.
-  
-  ReferenceCountHelperImpl(boolean trackRefCounts, boolean trackFreedRefCounts) {    
+
+  ReferenceCountHelperImpl(boolean trackRefCounts, boolean trackFreedRefCounts) {
-  
+
-   * Optional call to tell the tracker the logical "owner"
-   * of the reference count. For example you could set
-   * the particular EntryEventImpl instance that incremented
-   * the reference count and is responsible for decrementing it.
-   * Calling this method is a noop if !trackReferenceCounts.
+   * Optional call to tell the tracker the logical "owner" of the reference count. For example you
+   * could set the particular EntryEventImpl instance that incremented the reference count and is
+   * responsible for decrementing it. Calling this method is a noop if !trackReferenceCounts.
-   * Create, set, and return a generic reference count owner object.
-   * Calling this method is a noop and returns null if !trackReferenceCounts.
+   * Create, set, and return a generic reference count owner object. Calling this method is a noop
+   * and returns null if !trackReferenceCounts.
-   * Call this method before incrementing a reference count
-   * if you know that tracking is not needed because you know
-   * that the allocate and free will always be done in the same
-   * code block.
-   * Callers of this method must also call unskipRefCountTracking
-   * after the allocation or free is done.
+   * Call this method before incrementing a reference count if you know that tracking is not needed
+   * because you know that the allocate and free will always be done in the same code block. Callers
+   * of this method must also call unskipRefCountTracking after the allocation or free is done.
-    if (!trackReferenceCounts()) return false;
-    return !(getReferenceCountOwner()==SKIP_REF_COUNT_TRACKING);
+    if (!trackReferenceCounts())
+      return false;
+    return !(getReferenceCountOwner() == SKIP_REF_COUNT_TRACKING);
-   * Returns a list of any reference count tracking information for
-   * the given Chunk address.
+   * Returns a list of any reference count tracking information for the given Chunk address.
-    if (!trackReferenceCounts()) return null;
+    if (!trackReferenceCounts())
+      return null;
-    
+
-    
+
-   * This method is overridden during testing to allow simulation of a 
-   * concurrent update occurring between stacktraces.get and stacktraces.replace
+   * This method is overridden during testing to allow simulation of a concurrent update occurring
+   * between stacktraces.get and stacktraces.replace
-  protected void getReferenceCountInfoTestHook(ConcurrentMap<Long, List<RefCountChangeInfo>> stacktraces, long address) {}
-    
+  protected void getReferenceCountInfoTestHook(
+      ConcurrentMap<Long, List<RefCountChangeInfo>> stacktraces, long address) {}
+
-   * Returns a list of any reference count tracking information for
-   * the given Chunk address without locking.
+   * Returns a list of any reference count tracking information for the given Chunk address without
+   * locking.
-    if (!trackReferenceCounts()) return null;
+    if (!trackReferenceCounts())
+      return null;
-   */  
+   */
-    if (!trackReferenceCounts()) return;
+    if (!trackReferenceCounts())
+      return;
-      
+
-      
+
-          for (int i=0; i < list.size(); i++) {
+          for (int i = 0; i < list.size(); i++) {
-      MemoryAllocatorImpl.debugLog("refCount " + (decRefCount ? "deced" : "inced") + " after orphan detected for @" + Long.toHexString(address), true);
+      MemoryAllocatorImpl.debugLog("refCount " + (decRefCount ? "deced" : "inced")
+          + " after orphan detected for @" + Long.toHexString(address), true);
-      //      if (list.size() == 16) {
-      //        debugLog("dumping @" + Long.toHexString(address) + " history=" + list, false);
-      //        list.clear();
-      //      }
-      for (RefCountChangeInfo e: list) {
+      // if (list.size() == 16) {
+      // debugLog("dumping @" + Long.toHexString(address) + " history=" + list, false);
+      // list.clear();
+      // }
+      for (RefCountChangeInfo e : list) {
-   * This method is overridden during testing to allow simulation 
-   * of a race to be the first to reference a given address
+   * This method is overridden during testing to allow simulation of a race to be the first to
+   * reference a given address
-  protected void refCountChangedTestHook(Long address, boolean decRefCount, int rc) { }
-  
+  protected void refCountChangedTestHook(Long address, boolean decRefCount, int rc) {}
+
-   * Called internally when free operations are tracked to record
-   * that a free has happened of the given address.
+   * Called internally when free operations are tracked to record that a free has happened of the
+   * given address.
-    if (!trackReferenceCounts()) return;
+    if (!trackReferenceCounts())
+      return;
-      MemoryAllocatorImpl.debugLog("freed after orphan detected for @" + Long.toHexString(address), true);
+      MemoryAllocatorImpl.debugLog("freed after orphan detected for @" + Long.toHexString(address),
+          true);
-  
+
-    if (!trackReferenceCounts()) return null;
+    if (!trackReferenceCounts())
+      return null;
-   * Returns the thread local count of the
-   * number of times ref count has been updated
+   * Returns the thread local count of the number of times ref count has been updated
-    if (!trackReferenceCounts()) return null;
+    if (!trackReferenceCounts())
+      return null;
-   * Returns a list of any free operation tracking information.
-   * This is used to describe who did the previous free(s) when an extra one
-   * ends up being done and fails.
+   * Returns a list of any free operation tracking information. This is used to describe who did the
+   * previous free(s) when an extra one ends up being done and fails.
-    if (!trackReferenceCounts() || !trackFreedReferenceCounts()) return null;
+    if (!trackReferenceCounts() || !trackFreedReferenceCounts())
+      return null;
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66