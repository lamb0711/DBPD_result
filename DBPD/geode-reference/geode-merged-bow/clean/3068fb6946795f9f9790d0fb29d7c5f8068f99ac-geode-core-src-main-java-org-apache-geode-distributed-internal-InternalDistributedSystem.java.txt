Merge remote-tracking branch 'origin/develop' into develop

-import org.apache.geode.internal.statistics.platform.LinuxProcFsStatistics;
-import org.apache.geode.internal.statistics.platform.OsStatisticsFactory;
+import org.apache.geode.internal.statistics.platform.LinuxProcFsStatistics;
+import org.apache.geode.internal.statistics.platform.OsStatisticsFactory;
-import org.apache.geode.internal.util.concurrent.StoppableCondition;
-import org.apache.geode.internal.util.concurrent.StoppableReentrantLock;
-    if (locatorString.length() > 0) {
-      // when reconnecting we don't want to join with a colocated locator unless
-      // there is a quorum of the old members available
-      if (attemptingToReconnect && !this.isConnected) {
-        if (this.quorumChecker != null) {
-          logger.info("performing a quorum check to see if location services can be started early");
-          if (!quorumChecker.checkForQuorum(3 * this.config.getMemberTimeout())) {
-            logger.info("quorum check failed - not allowing location services to start early");
-            return;
-          }
-          logger.info("Quorum check passed - allowing location services to start early");
+    if (locatorString.length()==0) {
+      return;
+    }
+
+    // when reconnecting we don't want to join with a colocated locator unless
+    // there is a quorum of the old members available
+    if (attemptingToReconnect && !this.isConnected) {
+      if (this.quorumChecker != null) {
+        logger.info("performing a quorum check to see if location services can be started early");
+        if (!quorumChecker.checkForQuorum(3 * this.config.getMemberTimeout())) {
+          logger.info("quorum check failed - not allowing location services to start early");
+          return;
+        logger.info("Quorum check passed - allowing location services to start early");
-      DistributionLocatorId locId = new DistributionLocatorId(locatorString);
-      try {
-        this.startedLocator = InternalLocator.createLocator(locId.getPort(), null, null, this.logWriter, // LOG: this is after IDS has created LogWriterLoggers and Appenders
-          this.securityLogWriter, // LOG: this is after IDS has created LogWriterLoggers and Appenders
-          locId.getHost(), locId.getHostnameForClients(), this.originalConfig.toProperties(), false);
-        if (locId.isPeerLocator()) {
-          boolean startedPeerLocation = false;
-          try {
-            this.startedLocator.startPeerLocation(true);
-            startedPeerLocation = true;
-          } finally {
-            if (!startedPeerLocation) {
-              this.startedLocator.stop();
-            }
+    }
+    DistributionLocatorId locId = new DistributionLocatorId(locatorString);
+    try {
+      this.startedLocator = InternalLocator.createLocator(locId.getPort(), null, null, this.logWriter, // LOG: this is after IDS has created LogWriterLoggers and Appenders
+        this.securityLogWriter, // LOG: this is after IDS has created LogWriterLoggers and Appenders
+        locId.getHost(), locId.getHostnameForClients(), this.originalConfig.toProperties(), false);
+
+      // if locator is started this way, cluster config is not enabled, set the flag correctly
+      this.startedLocator.getConfig().setEnableClusterConfiguration(false);
+
+      if (locId.isPeerLocator()) {
+        boolean startedPeerLocation = false;
+        try {
+          this.startedLocator.startPeerLocation(true);
+          startedPeerLocation = true;
+        } finally {
+          if (!startedPeerLocation) {
+            this.startedLocator.stop();
-      } catch (IOException e) {
-        throw new GemFireIOException(LocalizedStrings.
-          InternalDistributedSystem_PROBLEM_STARTING_A_LOCATOR_SERVICE.toLocalizedString(), e);
+    } catch (IOException e) {
+      throw new GemFireIOException(LocalizedStrings.
+        InternalDistributedSystem_PROBLEM_STARTING_A_LOCATOR_SERVICE.toLocalizedString(), e);

MOV26 MOV26 MOV8 MOV60 INS25 UPD27 MOV27 INS8 INS41 INS21 INS32 INS32 INS42 INS9 INS22 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL25 DEL8