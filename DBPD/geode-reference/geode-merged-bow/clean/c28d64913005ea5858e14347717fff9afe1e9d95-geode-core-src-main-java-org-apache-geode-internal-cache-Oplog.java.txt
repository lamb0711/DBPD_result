Merge branch 'release/1.4.0'

-import java.io.SyncFailedException;
-import org.apache.commons.io.FileUtils;
-import org.apache.geode.internal.cache.DiskEntry.Helper.Flushable;
-import org.apache.geode.internal.cache.DiskEntry.Helper.ValueWrapper;
-import org.apache.geode.internal.cache.lru.EnableLRU;
-import org.apache.geode.internal.cache.lru.NewLRUClockHand;
+import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.entries.DiskEntry;
+import org.apache.geode.internal.cache.entries.DiskEntry.Helper.Flushable;
+import org.apache.geode.internal.cache.entries.DiskEntry.Helper.ValueWrapper;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.EvictionList;
- * 
+ *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  public Object getLock() {
+    return lock;
+  }
+
-   * 
+   *
-  File getOplogFile() throws SyncFailedException, IOException {
+  File getOplogFileForTest() throws IOException {
+  public File getCrfFile() {
+    return this.crf.f;
+  }
+
+  public File getDrfFile() {
+    return this.drf.f;
+  }
+
-   * 
+   *
-  Set<String> gatherMatchingOplogFiles(Set<String> oplogFileNames) {
-    Set<String> matchingFiles = new HashSet<String>();
+  public Set<String> gatherMatchingOplogFiles(Set<String> oplogFileNames) {
+    Set<String> matchingFiles = new HashSet<>();
-   * 
+   *
-  Map<File, File> mapBaseline(Collection<File> baselineOplogFiles) {
+  public Map<File, File> mapBaseline(Collection<File> baselineOplogFiles) {
-    Map<File, File> baselineToOplogMap = new HashMap<File, File>();
+    Map<File, File> baselineToOplogMap = new HashMap<>();
-   * 
+   *
-  public BytesAndBits getBytesAndBits(DiskRegionView dr, DiskId id, boolean faultingIn,
+  @Override
+  public BytesAndBits getBytesAndBits(DiskRegionView dr, DiskId id, boolean faultIn,
-      return retryOplog.getBytesAndBits(dr, id, faultingIn, bitOnly);
+      return retryOplog.getBytesAndBits(dr, id, faultIn, bitOnly);
-   * 
+   *
+  @Override
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  public void create(LocalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
+  public void create(InternalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
-   * 
+   *
-   * 
+   *
+        @Override
+      @Override
-      // TODO Auto-generated catch block
-   * 
+   *
-            // TODO handle exception; we couldn't open the krf file
+            // we couldn't open the krf file
-            // TODO handle io exceptions; we failed to write to the file
+            // we failed to write to the file
-            // if IOException happened in writeOneKeyEntryForKRF(), delete krf
-            // here
+            // if IOException happened in writeOneKeyEntryForKRF(), delete krf here
-  private File getKrfFile() {
+  public File getKrfFile() {
+      @Override
-   * 
+   *
-    Object value = entry._getValueRetain(dr, true);
+    Object value = entry.getValueRetain(dr, true);
-   * 
+   *
-   * 
+   *
-  public void modify(LocalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
+  public void modify(InternalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
-  public void saveConflictVersionTag(LocalRegion region, VersionTag tag, boolean async) {
+  public void saveConflictVersionTag(InternalRegion region, VersionTag tag, boolean async) {
-   * 
+   *
-   * 
+   *
-  public void remove(LocalRegion region, DiskEntry entry, boolean async, boolean isClear) {
+  public void remove(InternalRegion region, DiskEntry entry, boolean async, boolean isClear) {
-   * 
+   *
-  public void flush(ByteBuffer b1, ByteBuffer b2) throws IOException {
-    if (b1 == this.drf.writeBuf) {
-      flush(this.drf, b1, b2);
+  public void flush(ByteBuffer bb, ByteBuffer chunkbb) throws IOException {
+    if (bb == this.drf.writeBuf) {
+      flush(this.drf, bb, chunkbb);
-      flush(this.crf, b1, b2);
+      flush(this.crf, bb, chunkbb);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+        @Override
-  public void copyTo(File targetDir) throws IOException {
-    if (this.crf.f != null && this.crf.f.exists()) {
-      FileUtils.copyFileToDirectory(this.crf.f, targetDir);
-    }
-    if (this.drf.f.exists()) {
-      FileUtils.copyFileToDirectory(this.drf.f, targetDir);
-    }
-
-    // this krf existence check fixes 45089
-    // TODO: should we wait for the async KRF creation to finish by calling this.finishKrf?
-    if (getParent().getDiskInitFile().hasKrf(this.oplogId)) {
-      if (this.getKrfFile().exists()) {
-        FileUtils.copyFileToDirectory(this.getKrfFile(), targetDir);
-      }
-    }
-  }
-
+        @Override
-   * 
+   *
-  DirectoryHolder getDirectoryHolder() {
+  public DirectoryHolder getDirectoryHolder() {
-   * 
+   *
-  private final static ThreadLocal isCompactorThread = new ThreadLocal();
+  private static final ThreadLocal isCompactorThread = new ThreadLocal();
+            @Override
+            @Override
+  @Override
+  @Override
-   * 
+   *
+    @Override
+    @Override
+    @Override
+    @Override
-    public Object _getValue() {
+    public Object getValue() {
-    public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate) {
+    public Object prepareValueForCache(RegionEntryContext context, Object value,
+        boolean isEntryUpdate) {
-    public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+    public Object getValueRetain(RegionEntryContext context, boolean decompress) {
+    @Override
+    @Override
+    @Override
+    @Override
-    public int updateAsyncEntrySize(EnableLRU capacityController) {
+    @Override
+    public int updateAsyncEntrySize(EvictionController capacityController) {
-     * 
+     *
-     * 
+     *
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
+      // nothing
-        LocalRegion region, EntryEventImpl event) {
-      // TODO Auto-generated method stub
+        InternalRegion region, EntryEventImpl event) {
-      // TODO Auto-generated method stub
-    public void setRecentlyUsed() {
-      // TODO Auto-generated method stub
+    public void setRecentlyUsed(RegionEntryContext context) {
+      // nothing
-      // TODO Auto-generated method stub
+      // nothing
-    public void txDidDestroy(long currTime) {
-      // TODO Auto-generated method stub
+    public void txDidDestroy(long currentTime) {
+      // nothing
-      // TODO Auto-generated method stub
+      // nothing
-    public void makeTombstone(LocalRegion r, VersionTag version) throws RegionClearedException {
-      // TODO Auto-generated method stub
+    public void makeTombstone(InternalRegion region, VersionTag version)
+        throws RegionClearedException {
+      // nothing
-    public void removePhase1(LocalRegion r, boolean clear) throws RegionClearedException {
-      // TODO Auto-generated method stub
+    public void removePhase1(InternalRegion region, boolean clear) throws RegionClearedException {
+      // nothing
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-    public boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
-        ByteArrayDataInput in, DM mgr, final Version version) {
-      // TODO Auto-generated method stub
+    public boolean fillInValue(InternalRegion region, InitialImageOperation.Entry entry,
+        ByteArrayDataInput in, DM distributionManager, final Version version) {
-    public boolean isOverflowedToDisk(LocalRegion r, DiskPosition dp) {
-      // TODO Auto-generated method stub
+    public boolean isOverflowedToDisk(InternalRegion region, DiskPosition diskPosition) {
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-    public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
-      // TODO Auto-generated method stub
+    public Object getValueOnDisk(InternalRegion region) throws EntryNotFoundException {
-    public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
-      // TODO Auto-generated method stub
+    public Object getValueOnDiskOrBuffer(InternalRegion region) throws EntryNotFoundException {
-    public boolean initialImagePut(LocalRegion region, long lastModified, Object newValue,
+    public boolean initialImagePut(InternalRegion region, long lastModified, Object newValue,
-      // TODO Auto-generated method stub
-    public boolean initialImageInit(LocalRegion region, long lastModified, Object newValue,
+    public boolean initialImageInit(InternalRegion region, long lastModified, Object newValue,
-      // TODO Auto-generated method stub
-    public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+    public boolean destroy(InternalRegion region, EntryEventImpl event, boolean inTokenMode,
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-    public void setValueResultOfSearch(boolean v) {
-      // TODO Auto-generated method stub
+    public void setValueResultOfSearch(boolean value) {
+      // nothing
-    public Object getSerializedValueOnDisk(LocalRegion localRegion) {
-      // TODO Auto-generated method stub
+    public Object getSerializedValueOnDisk(InternalRegion region) {
-    public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner) {
-      // TODO Auto-generated method stub
+    public Object getValueInVMOrDiskWithoutFaultIn(InternalRegion region) {
-    public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
-      // TODO Auto-generated method stub
+    public Object getValueOffHeapOrDiskWithoutFaultIn(InternalRegion region) {
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
+      // nothing
-      // TODO Auto-generated method stub
-      // TODO Auto-generated method stub
-
+      // nothing
-    public void setInUseByTransaction(boolean v) {}
+    public void incRefCount() {
+      // nothing
+    }
-    public void incRefCount() {}
+    public void decRefCount(EvictionList lruList, InternalRegion region) {
+      // nothing
+    }
-    public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {}
+    public void resetRefCount(EvictionList lruList) {
+      // nothing
+    }
-    public void resetRefCount(NewLRUClockHand lruList) {}
-
-    @Override
-    public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
-        boolean isEntryUpdate) {
+    public Object prepareValueForCache(RegionEntryContext context, Object value,
+        EntryEventImpl event, boolean isEntryUpdate) {
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-    synchronized public boolean testAndSetUnrecovered() {
+    @Override
+    public synchronized boolean testAndSetUnrecovered() {
-    synchronized public boolean getUnrecovered() {
+    @Override
+    public synchronized boolean getUnrecovered() {
-    synchronized public boolean testAndSetRecovered(DiskRegionView dr) {
+    @Override
+    public synchronized boolean testAndSetRecovered(DiskRegionView dr) {
+    @Override
+    @Override
-    public void update(DiskEntry de) {
-      if (pendingKrfTags != null && de.getVersionStamp() != null) {
+    public void update(DiskEntry entry) {
+      if (pendingKrfTags != null && entry.getVersionStamp() != null) {
-        pendingKrfTags.put(de, new CompactVersionHolder(de.getVersionStamp()));
+        pendingKrfTags.put(entry, new CompactVersionHolder(entry.getVersionStamp()));
-    synchronized public boolean testAndSetUnrecovered() {
+    public synchronized boolean testAndSetUnrecovered() {
+    @Override
+    @Override
-  void finishKrf() {
+  public void finishKrf() {
-   * 
+   *
-    public boolean equals(Object other) {
-      if (!(other instanceof RawByteKey)) {
+    public boolean equals(Object obj) {
+      if (!(obj instanceof RawByteKey)) {
-      return Arrays.equals(this.bytes, ((RawByteKey) other).bytes);
+      return Arrays.equals(this.bytes, ((RawByteKey) obj).bytes);
+    @Override
-   * 
+   *
-   * 
+   *

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 MOV44 MOV31 MOV31 MOV31 MOV31 MOV31 UPD83 INS43 INS42 UPD42 MOV83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 INS83 INS78 INS78 MOV29 INS83 INS39 INS42 INS8 UPD83 INS83 INS83 INS78 INS78 UPD42 INS42 INS41 INS41 INS41 INS42 UPD42 INS42 UPD43 MOV21 UPD43 UPD43 UPD43 UPD42 UPD42 INS42 INS42 INS78 INS78 INS78 INS78 INS78 MOV43 UPD42 MOV78 MOV43 UPD42 MOV78 INS78 UPD39 UPD42 INS78 UPD39 UPD42 INS78 MOV8 INS78 MOV8 MOV78 INS44 MOV78 MOV78 UPD42 UPD42 MOV78 MOV78 MOV78 UPD42 UPD42 UPD42 MOV78 MOV78 MOV78 INS78 INS78 INS78 INS78 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS78 INS83 INS78 INS78 INS78 INS42 MOV22 MOV22 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD43 UPD43 INS43 INS42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 MOV32 UPD42 INS14 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD74 MOV43 INS1 UPD42 UPD42 MOV31 UPD42 UPD42 UPD42 UPD42 INS78 INS83 UPD42 INS78 UPD42 UPD42 UPD42 INS42 INS42 UPD42 INS78 INS78 INS78 UPD42 INS42 INS42 INS42 INS78 INS78 INS42 INS42 DEL39 DEL42 DEL42 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL52 DEL42 DEL32 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL22 DEL33 DEL27 DEL42 DEL32 DEL27 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL32 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31 DEL83 DEL83 DEL83 DEL83