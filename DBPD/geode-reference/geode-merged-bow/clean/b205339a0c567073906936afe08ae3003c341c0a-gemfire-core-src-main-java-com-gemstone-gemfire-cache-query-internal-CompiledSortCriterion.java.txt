Merge branch 'feature/GEODE-8' into develop

+
+import com.gemstone.gemfire.GemFireCacheException;
+import com.gemstone.gemfire.GemFireException;
+import com.gemstone.gemfire.cache.CacheException;
+import com.gemstone.gemfire.cache.query.AmbiguousNameException;
+import com.gemstone.gemfire.cache.query.IndexInvalidException;
+import com.gemstone.gemfire.cache.query.QueryException;
+import com.gemstone.gemfire.cache.query.QueryInvalidException;
+import com.gemstone.gemfire.cache.query.internal.parse.OQLLexerTokenTypes;
+import com.gemstone.gemfire.cache.query.internal.types.TypeUtils;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
- * This class represents a compiled form of sort criterian present in order by clause
+ * This class represents a compiled form of sort criterian present in order by
+ * clause
+ * 
+ * @author Asif
-public class CompiledSortCriterion extends AbstractCompiledValue  {
-	//Asif: criterion true indicates descending order
-	boolean criterion = false;	
-	CompiledValue expr = null;
-  
+public class CompiledSortCriterion extends AbstractCompiledValue {
+  // Asif: criterion true indicates descending order
+  private boolean criterion = false;
+  private CompiledValue expr = null;
+  int columnIndex = -1;
+  // private String correctedCanonicalizedExpression = null;
+  private CompiledValue originalCorrectedExpression = null;
+
-    return Collections.singletonList(this.expr);
+    return Collections.singletonList(this.originalCorrectedExpression);
-  
-	/**
-	 * @return int
-	 */
-	public int getType()
-    {
-        return SORT_CRITERION;
+
+  /**
+   * @return int
+   */
+  public int getType() {
+    return SORT_CRITERION;
+  }
+
+  /**
+   * evaluates sort criteria in order by clause
+   * 
+   * @param context
+   * @return Object
+   * @throws FunctionDomainException
+   * @throws TypeMismatchException
+   * @throws NameResolutionException
+   * @throws QueryInvocationTargetException
+   *
+   *           public Object evaluate(ExecutionContext context) throws
+   *           FunctionDomainException, TypeMismatchException,
+   *           NameResolutionException, QueryInvocationTargetException {
+   *           if(this.columnIndex >= 0) { return
+   *           context.getFieldFromProjectedRow(this.columnIndex); }else {
+   *           return this.expr.evaluate(context); } }
+   */
+
+  public Object evaluate(Object data, ExecutionContext context) {
+    Object value = null;
+    if (this.columnIndex > 0) {
+      value = ((Object[]) data)[this.columnIndex];
+    } else if (this.columnIndex == 0) {
+      if (data instanceof Object[]) {
+        value = ((Object[]) data)[this.columnIndex];
+      } else {
+        value = data;
+      }
+    } else {
+      throw new IllegalStateException(" Order By Column attribute unmapped");
-	/** evaluates sort criteria in order by clause 
-	 * @param context
-	 * @return Object
-	 * @throws FunctionDomainException
-	 * @throws TypeMismatchException
-	 * @throws NameResolutionException
-	 * @throws QueryInvocationTargetException
-	 */
-	public Object evaluate(ExecutionContext context)throws FunctionDomainException, TypeMismatchException,
-    NameResolutionException, QueryInvocationTargetException 
-	{
-		return this.expr.evaluate(context);  
-		 
-	}
-	/**
-	 * concstructor
-	 * @param criterion
-	 * @param cv
-	 */
-	CompiledSortCriterion(boolean criterion, CompiledValue cv) {
-	  this.expr = cv;
-	  this.criterion = criterion;
-	}
-	
+    context.setCurrentProjectionField(value);
+    try {
+      return this.expr.evaluate(context);
+    } catch (Exception e) {
+      throw new CacheException(e) {
+      };
+    }
+
+  }
+
+  /**
+   * concstructor
+   * 
+   * @param criterion
+   * @param cv
+   */
+  CompiledSortCriterion(boolean criterion, CompiledValue cv) {
+    this.expr = cv;
+    this.criterion = criterion;
+    this.originalCorrectedExpression = this.expr;
+  }
+
-    return expr;
+    return this.originalCorrectedExpression;
-	
+
+  public int getColumnIndex() {
+    return this.columnIndex;
+  }
+
+  /*
+   * public String getCorrectedCanonicalizedExpression() { return
+   * this.correctedCanonicalizedExpression; }
+   */
+
+  @Override
+  public Object evaluate(ExecutionContext context)
+      throws FunctionDomainException, TypeMismatchException,
+      NameResolutionException, QueryInvocationTargetException {
+    
+    return this.expr.evaluate(context);
+  }
+
+  private void substituteExpression(CompiledValue newExpression, int columnIndex) {
+    this.expr = newExpression;
+    this.columnIndex = columnIndex;
+  }
+
+  private void substituteExpressionWithProjectionField(int columnIndex) {
+    this.expr = ProjectionField.getProjectionField();
+    this.columnIndex = columnIndex;
+  }
+
+  private CompiledValue getReconstructedExpression(String projAttribStr,
+      ExecutionContext context) throws AmbiguousNameException,
+      TypeMismatchException, NameResolutionException {
+    List<CompiledValue> expressions = PathUtils.collectCompiledValuesInThePath(
+        expr, context);
+    StringBuffer tempBuff = new StringBuffer();
+    ListIterator<CompiledValue> listIter = expressions.listIterator(expressions
+        .size());
+    while (listIter.hasPrevious()) {
+      listIter.previous().generateCanonicalizedExpression(tempBuff, context);
+      if (tempBuff.toString().equals(projAttribStr)) {
+        // we have found our match from where we have to replace the expression
+        break;
+      } else {
+        tempBuff.delete(0, tempBuff.length());
+      }
+    }
+
+    // Now we need to create a new CompiledValue which terminates with
+    // ProjectionField
+    CompiledValue cvToRetainTill = listIter.previous();
+
+    CompiledValue prevCV = null;
+    List<Object> reconstruct = new ArrayList<Object>();
+    CompiledValue cv = expressions.get(0);
+    int index = 0;
+    do {
+      prevCV = cv;
+      
+      switch( cv.getType()) {     
+      case CompiledOperation.METHOD_INV:
+        reconstruct.add(0, ((CompiledOperation) cv).getArguments());
+        reconstruct.add(0, ((CompiledOperation) cv).getMethodName());
+        break;       
+      case CompiledPath.PATH:
+        reconstruct.add(0, ((CompiledPath) cv).getTailID());
+        break;      
+      case CompiledIndexOperation.TOK_LBRACK:
+        reconstruct.add(0, ((CompiledIndexOperation) cv).getExpression());
+        break;     
+       default:
+         throw new IllegalStateException(
+             "Unexpected CompiledValue in order by clause");
+      }
+      reconstruct.add(0, Integer.valueOf(prevCV.getType()));
+      cv = expressions.get(++index);
+    } while (prevCV != cvToRetainTill);
+
+    // Now reconstruct back
+    Iterator<Object> iter = reconstruct.iterator();
+    CompiledValue currentValue = ProjectionField.getProjectionField();
+    while (iter.hasNext()) {
+      int type = ((Integer) iter.next()).intValue();
+      switch (type) {
+      case CompiledValue.PATH:
+        currentValue = new CompiledPath(currentValue, (String) iter.next());
+        break;
+      case OQLLexerTokenTypes.METHOD_INV:
+        currentValue = new CompiledOperation(currentValue,
+            (String) iter.next(), (List) iter.next());
+        break;
+      case OQLLexerTokenTypes.TOK_LBRACK:
+        currentValue = new CompiledIndexOperation(currentValue,
+            (CompiledValue) iter.next());
+        break;
+      }
+
+    }
+
+    return currentValue;
+  }
+
+  boolean mapExpressionToProjectionField(List projAttrs,
+      ExecutionContext context) throws AmbiguousNameException,
+      TypeMismatchException, NameResolutionException {
+    boolean mappedColumn = false;
+    this.originalCorrectedExpression = expr;
+    if (projAttrs != null) {
+      // if expr is CompiledID , check for alias
+      if (expr.getType() == OQLLexerTokenTypes.Identifier) {
+
+        for (int i = 0; i < projAttrs.size() && !mappedColumn; ++i) {
+          Object[] prj = (Object[]) TypeUtils.checkCast(projAttrs.get(i),
+              Object[].class);
+          if (prj[0] != null && prj[0].equals(((CompiledID) expr).getId())) {
+            // set the field index
+            this.substituteExpressionWithProjectionField(i);
+            this.originalCorrectedExpression = (CompiledValue) prj[1];
+            mappedColumn = true;
+
+          }
+        }
+
+      }
+      if (!mappedColumn) {
+        // the order by expr is not an alias check for path
+        StringBuffer orderByExprBuffer = new StringBuffer(), projAttribBuffer = new StringBuffer();
+        expr.generateCanonicalizedExpression(orderByExprBuffer, context);
+        final String orderByExprStr = orderByExprBuffer.toString();
+        for (int i = 0; i < projAttrs.size(); ++i) {
+          Object[] prj = (Object[]) TypeUtils.checkCast(projAttrs.get(i),
+              Object[].class);
+          CompiledValue cvProj = (CompiledValue) TypeUtils.checkCast(prj[1],
+              CompiledValue.class);
+          cvProj.generateCanonicalizedExpression(projAttribBuffer, context);
+          final String projAttribStr = projAttribBuffer.toString();
+          if (projAttribStr.equals(orderByExprStr)) {
+            // set the field index
+            this.substituteExpressionWithProjectionField(i);
+            mappedColumn = true;
+            break;
+          } else if (orderByExprStr.startsWith(projAttribStr)) {
+            CompiledValue newExpr = getReconstructedExpression(projAttribStr,
+                context);
+            this.substituteExpression(newExpr, i);
+            mappedColumn = true;
+            break;
+          }
+          projAttribBuffer.delete(0, projAttribBuffer.length());
+        }
+      }
+    } else {
+      RuntimeIterator rIter = context.findRuntimeIterator(expr);
+      List currentIters = context.getCurrentIterators();
+      for (int i = 0; i < currentIters.size(); ++i) {
+        RuntimeIterator runtimeIter = (RuntimeIterator) currentIters.get(i);
+        if (runtimeIter == rIter) {
+          /* this.substituteExpressionWithProjectionField( i); */
+          StringBuffer temp = new StringBuffer();
+          rIter.generateCanonicalizedExpression(temp, context);
+          // this.correctedCanonicalizedExpression = temp.toString();
+          /* mappedColumn = true; */
+          String projAttribStr = temp.toString();
+          temp = new StringBuffer();
+          expr.generateCanonicalizedExpression(temp, context);
+          String orderbyStr = temp.toString();
+          if (projAttribStr.equals(orderbyStr)) {
+            this.substituteExpressionWithProjectionField(i);
+            mappedColumn = true;
+            break;
+          } else {
+            CompiledValue newExpr = getReconstructedExpression(projAttribStr,
+                context);
+            this.substituteExpression(newExpr, i);
+            mappedColumn = true;
+            break;
+          }
+        }
+      }
+    }
+    return mappedColumn;
+
+  }
+
+  static class ProjectionField extends AbstractCompiledValue {
+
+    private static ProjectionField singleton = new ProjectionField();
+
+    private ProjectionField() {
+    }
+
+    public Object evaluate(ExecutionContext context)
+        throws FunctionDomainException, TypeMismatchException,
+        NameResolutionException, QueryInvocationTargetException {
+      return context.getCurrentProjectionField();
+
+    }
+
+    @Override
+    public int getType() {
+      return FIELD;
+    }
+
+    public static ProjectionField getProjectionField() {
+      return singleton;
+    }
+
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS65 INS83 INS83 INS39 INS59 INS83 MOV43 INS59 MOV29 INS83 MOV43 INS42 INS44 MOV44 INS8 INS43 INS83 INS39 INS42 INS8 INS78 INS43 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 UPD66 INS66 INS66 INS42 INS38 INS42 INS33 INS43 INS42 INS60 INS25 INS21 INS54 INS21 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS39 INS42 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS61 INS60 INS60 INS60 INS60 INS60 INS19 INS60 INS60 INS61 INS41 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS21 INS25 INS41 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 INS8 INS34 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS25 INS32 INS8 INS12 INS7 INS22 INS22 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS74 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS39 INS59 INS8 INS27 INS74 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS39 INS59 INS7 INS27 INS8 INS8 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS22 INS42 INS42 INS33 INS22 INS34 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS41 INS44 INS8 INS22 MOV22 INS52 INS42 INS52 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS22 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS34 INS21 INS50 INS21 INS21 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS50 INS42 INS9 INS22 INS42 INS42 INS33 INS25 INS25 INS60 INS60 INS24 INS43 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS7 INS22 INS34 INS25 INS53 INS32 INS43 INS42 INS53 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS34 INS7 INS32 INS49 INS21 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS52 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS43 INS59 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS2 INS52 INS42 INS62 INS8 INS8 INS14 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS10 INS21 INS43 INS43 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS40 INS32 INS40 INS32 INS14 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS32 INS40 INS7 INS40 INS7 INS40 INS7 INS32 INS40 INS24 INS42 INS60 INS21 INS60 INS24 INS42 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS36 INS22 INS42 INS5 INS21 INS21 INS43 INS45 INS52 INS42 INS43 INS42 INS1 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS34 INS32 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS38 INS36 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS58 INS27 INS38 INS8 INS43 INS59 INS59 INS32 INS83 INS43 INS59 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS11 INS52 INS42 INS43 INS85 INS7 INS7 INS42 INS42 INS42 INS42 INS34 INS32 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS11 INS43 INS42 INS11 INS11 INS43 INS42 INS11 INS39 INS59 INS27 INS38 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 INS60 INS25 INS21 INS42 INS42 INS11 INS42 INS42 INS60 INS21 INS60 INS21 INS21 INS60 INS25 INS5 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS11 INS11 INS11 INS11 INS43 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS43 INS32 INS42 INS43 INS32 INS42 INS34 INS42 INS32 INS42 INS5 INS59 INS27 INS8 INS43 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS5 INS59 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS8 INS25 INS32 INS43 INS32 INS43 INS59 INS32 INS43 INS59 INS7 INS32 INS43 INS59 INS32 INS8 INS8 INS43 INS85 INS36 INS22 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS11 INS27 INS32 INS21 INS21 INS21 INS42 INS42 INS43 INS85 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS10 INS32 INS8 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS10 INS60 INS21 INS21 INS10 INS42 INS11 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS2 INS33 INS2 INS42 INS32 INS32 INS7 INS7 INS42 INS5 INS32 INS43 INS32 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS60 INS21 INS21 INS10 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS32 INS7 INS43 INS59 INS32 INS7 INS5 INS42 INS43 INS85 INS42 INS42 INS32 INS57 INS42 INS34 INS42 INS34 INS36 INS42 INS52 INS42 INS42 INS22 INS11 INS42 INS9 INS43 INS85 INS42 INS42 INS32 INS57 INS42 INS42 INS42 INS2 INS57 INS52 INS42 INS42 INS42 INS9 INS43 INS59 INS32 INS7 INS42 INS42 INS52 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS9 INS43 INS85 INS42 INS42 INS42 INS42 INS5 INS11 INS52 INS42 INS43 INS2 INS42 INS42 INS42 INS42 INS5 INS42 INS34 INS43 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS85 INS43 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42