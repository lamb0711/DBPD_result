GEODE-8219: Apply RedisResponse to all redis string commands (#5206)


+import org.apache.geode.redis.internal.RedisResponse;
-  public void executeCommand(Command command, ExecutionHandlerContext context) {
+  public RedisResponse executeCommandWithResponse(Command command,
+      ExecutionHandlerContext context) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ArityDef.SETRANGE));
-      return;
+      return RedisResponse.error(ArityDef.SETRANGE);
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_INT));
-      return;
+      return RedisResponse.error(ERROR_NOT_INT);
-      command
-          .setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_ILLEGAL_OFFSET));
-      return;
+      return RedisResponse.error(ERROR_ILLEGAL_OFFSET);
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), length));
-      return;
+      return RedisResponse.integer(length);
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), bytes.length));
-    } else {
-      byte[] bytes = wrapper.toBytes();
-      SetOptions setOptions = new SetOptions(NONE, 0L, true);
-      int returnLength;
-      if (totalLength < bytes.length) {
-        System.arraycopy(value, 0, bytes, offset, value.length);
-        stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
-        returnLength = bytes.length;
-      } else {
-        byte[] newBytes = new byte[totalLength];
-        System.arraycopy(bytes, 0, newBytes, 0, bytes.length);
-        System.arraycopy(value, 0, newBytes, offset, value.length);
-        returnLength = newBytes.length;
-        stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
-      }
-
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), returnLength));
+      return RedisResponse.integer(bytes.length);
+
+    byte[] bytes = wrapper.toBytes();
+    SetOptions setOptions = new SetOptions(NONE, 0L, true);
+    int returnLength;
+    if (totalLength < bytes.length) {
+      System.arraycopy(value, 0, bytes, offset, value.length);
+      stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
+      returnLength = bytes.length;
+    } else {
+      byte[] newBytes = new byte[totalLength];
+      System.arraycopy(bytes, 0, newBytes, 0, bytes.length);
+      System.arraycopy(value, 0, newBytes, offset, value.length);
+      returnLength = newBytes.length;
+      stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
+    }
+
+    return RedisResponse.integer(returnLength);

INS26 INS40 INS43 INS42 MOV8 INS42 MOV60 INS25 MOV60 MOV60 MOV60 MOV60 MOV60 MOV54 MOV60 MOV25 INS25 INS41 MOV27 INS8 MOV27 MOV8 INS32 INS41 INS41 INS41 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS41 INS32 INS41 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV40 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL25 DEL8