Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Usage:
- * DeposePrimaryBucketResponse response = DeposePrimaryBucketMessage.send(
-       InternalDistributedMember, PartitionedRegion, int bucketId);
-   if (response != null && response.waitForResponse()) {
-     // primary was deposed
-   }
+ * Usage: DeposePrimaryBucketResponse response = DeposePrimaryBucketMessage.send(
+ * InternalDistributedMember, PartitionedRegion, int bucketId); if (response != null &&
+ * response.waitForResponse()) { // primary was deposed }
-  
+
-  
+
-  public DeposePrimaryBucketMessage() {
-  }
+  public DeposePrimaryBucketMessage() {}
-  private DeposePrimaryBucketMessage(
-      InternalDistributedMember recipient, 
-      int regionId, 
-      ReplyProcessor21 processor,
-      int bucketId) {
+  private DeposePrimaryBucketMessage(InternalDistributedMember recipient, int regionId,
+      ReplyProcessor21 processor, int bucketId) {
-  public static DeposePrimaryBucketResponse send(
-      InternalDistributedMember recipient, 
-      PartitionedRegion region,
-      int bucketId) {
-    
-    Assert.assertTrue(recipient != null, 
-        "DeposePrimaryBucketMessage NULL recipient");
-    
-    DeposePrimaryBucketResponse response = new DeposePrimaryBucketResponse(
-        region.getSystem(), recipient, region);
-    DeposePrimaryBucketMessage msg = new DeposePrimaryBucketMessage(
-        recipient, region.getPRId(), response, bucketId);
+  public static DeposePrimaryBucketResponse send(InternalDistributedMember recipient,
+      PartitionedRegion region, int bucketId) {
-    Set<InternalDistributedMember> failures = 
-      region.getDistributionManager().putOutgoing(msg);
+    Assert.assertTrue(recipient != null, "DeposePrimaryBucketMessage NULL recipient");
+
+    DeposePrimaryBucketResponse response =
+        new DeposePrimaryBucketResponse(region.getSystem(), recipient, region);
+    DeposePrimaryBucketMessage msg =
+        new DeposePrimaryBucketMessage(recipient, region.getPRId(), response, bucketId);
+
+    Set<InternalDistributedMember> failures = region.getDistributionManager().putOutgoing(msg);
-      //throw new ForceReattemptException("Failed sending <" + msg + ">");
+      // throw new ForceReattemptException("Failed sending <" + msg + ">");
-  public DeposePrimaryBucketMessage(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public DeposePrimaryBucketMessage(DataInput in) throws IOException, ClassNotFoundException {
-                                                     PartitionedRegion region, 
-                                                     long startTime) 
-                                              throws ForceReattemptException {
-    
-    BucketAdvisor bucketAdvisor = 
-        region.getRegionAdvisor().getBucketAdvisor(this.bucketId);
-    
+      PartitionedRegion region, long startTime) throws ForceReattemptException {
+
+    BucketAdvisor bucketAdvisor = region.getRegionAdvisor().getBucketAdvisor(this.bucketId);
+
-    
+
-    DeposePrimaryBucketReplyMessage.send(
-        getSender(), getProcessorId(), dm, (ReplyException)null);
-    
+    DeposePrimaryBucketReplyMessage.send(getSender(), getProcessorId(), dm, (ReplyException) null);
+
-    
+
-  public static final class DeposePrimaryBucketReplyMessage 
-  extends ReplyMessage {
-    
+  public static final class DeposePrimaryBucketReplyMessage extends ReplyMessage {
+
-    public DeposePrimaryBucketReplyMessage() {
-    }
+    public DeposePrimaryBucketReplyMessage() {}
-    private DeposePrimaryBucketReplyMessage(
-        int processorId, ReplyException re) {
+    private DeposePrimaryBucketReplyMessage(int processorId, ReplyException re) {
-    public static void send(InternalDistributedMember recipient,
-                            int processorId, 
-                            DM dm, 
-                            ReplyException re) {
-      Assert.assertTrue(recipient != null,
-          "DeposePrimaryBucketReplyMessage NULL recipient");
-      DeposePrimaryBucketReplyMessage m = 
-          new DeposePrimaryBucketReplyMessage(processorId, re);
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        ReplyException re) {
+      Assert.assertTrue(recipient != null, "DeposePrimaryBucketReplyMessage NULL recipient");
+      DeposePrimaryBucketReplyMessage m = new DeposePrimaryBucketReplyMessage(processorId, re);
-    
+
-      return true; //this.responseCode == OK;
+      return true; // this.responseCode == OK;
-        logger.trace(LogMarker.DM, "DeposePrimaryBucketReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "DeposePrimaryBucketReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-        logger.trace(LogMarker.DM, "{} processed {}",processor, this);
+        logger.trace(LogMarker.DM, "{} processed {}", processor, this);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      sb.append("DeposePrimaryBucketReplyMessage ")
-        .append("processorid=").append(this.processorId)
-        .append(" reply to sender ").append(this.getSender());
+      sb.append("DeposePrimaryBucketReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender());
-   * A processor to capture the value returned by the
-   * <code>DeposePrimaryBucketReplyMessage</code>
+   * A processor to capture the value returned by the <code>DeposePrimaryBucketReplyMessage</code>
-  public static class DeposePrimaryBucketResponse extends
-      PartitionResponse {
-    
-    public DeposePrimaryBucketResponse(
-        InternalDistributedSystem ds,
-        InternalDistributedMember recipient, 
-        PartitionedRegion theRegion) {
+  public static class DeposePrimaryBucketResponse extends PartitionResponse {
+
+    public DeposePrimaryBucketResponse(InternalDistributedSystem ds,
+        InternalDistributedMember recipient, PartitionedRegion theRegion) {
-          DeposePrimaryBucketReplyMessage reply = 
-              (DeposePrimaryBucketReplyMessage)msg;
+          DeposePrimaryBucketReplyMessage reply = (DeposePrimaryBucketReplyMessage) msg;
-          }
-          else if (logger.isTraceEnabled(LogMarker.DM)) {
+          } else if (logger.isTraceEnabled(LogMarker.DM)) {
-      }
-      finally {
+      } finally {
-     * Ignore any incoming exception from other VMs, we just want an
-     * acknowledgement that the message was processed.
+     * Ignore any incoming exception from other VMs, we just want an acknowledgement that the
+     * message was processed.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66