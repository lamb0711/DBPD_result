Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * TXSynchronizationThread manages beforeCompletion and afterCompletion
- * calls on behalf of a client cache.  The thread should be instantiated
- * with a Runnable that invokes beforeCompletion behavior.  Then you
- * must invoke runSecondRunnable() with another Runnable that invokes
- * afterCompletion behavior. 
+ * TXSynchronizationThread manages beforeCompletion and afterCompletion calls on behalf of a client
+ * cache. The thread should be instantiated with a Runnable that invokes beforeCompletion behavior.
+ * Then you must invoke runSecondRunnable() with another Runnable that invokes afterCompletion
+ * behavior.
-  
+
-  
+
-    synchronized(this.firstRunnableSync) {
+    synchronized (this.firstRunnableSync) {
-    synchronized(this.secondRunnableSync){ 
+    synchronized (this.secondRunnableSync) {
-  
+
-    synchronized(this.firstRunnableSync) {
-      while(!this.firstRunnableCompleted) {
+    synchronized (this.firstRunnableSync) {
+      while (!this.firstRunnableCompleted) {
-   * run the afterCompletion portion of synchronization.  This method
-   * schedules execution of the given runnable and then waits for it to
-   * finish running
+   * run the afterCompletion portion of synchronization. This method schedules execution of the
+   * given runnable and then waits for it to finish running
+   * 
-    synchronized(this.secondRunnableSync){ 
+    synchronized (this.secondRunnableSync) {
-      while(!this.secondRunnableCompleted && !this.abort) {
+      while (!this.secondRunnableCompleted && !this.abort) {
-  
+
-    synchronized(this.secondRunnableSync) {
+    synchronized (this.secondRunnableSync) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66