GEODE-5971: Refactor CreateRegionCommand to extend SingleGfshCommand

- Store config via generating a RegionConfig object rather than an XML
entity

Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Jens Deppe <jdeppe@pivotal.io>

+import org.apache.geode.cache.configuration.EnumActionDestroyOverflow;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+  public RegionAttributesType.EvictionAttributes convertToConfigEvictionAttributes() {
+    RegionAttributesType.EvictionAttributes configAttributes =
+        new RegionAttributesType.EvictionAttributes();
+    EnumActionDestroyOverflow action = EnumActionDestroyOverflow.fromValue(this.getAction()
+        .toString());
+    EvictionAlgorithm algorithm = getAlgorithm();
+    String objectSizerClass = getObjectSizer().getClass().toString();
+    Integer maximum = getMaximum();
+
+    if (algorithm.isLRUHeap()) {
+      RegionAttributesType.EvictionAttributes.LruHeapPercentage heapPercentage =
+          new RegionAttributesType.EvictionAttributes.LruHeapPercentage();
+      heapPercentage.setAction(action);
+      heapPercentage.setClassName(objectSizerClass);
+      configAttributes.setLruHeapPercentage(heapPercentage);
+    } else if (algorithm.isLRUMemory()) {
+      RegionAttributesType.EvictionAttributes.LruMemorySize memorySize =
+          new RegionAttributesType.EvictionAttributes.LruMemorySize();
+      memorySize.setAction(action);
+      memorySize.setClassName(objectSizerClass);
+      memorySize.setMaximum(maximum.toString());
+      configAttributes.setLruMemorySize(memorySize);
+    } else {
+      RegionAttributesType.EvictionAttributes.LruEntryCount entryCount =
+          new RegionAttributesType.EvictionAttributes.LruEntryCount();
+      entryCount.setAction(action);
+      entryCount.setMaximum(maximum.toString());
+      configAttributes.setLruEntryCount(entryCount);
+    }
+
+    return configAttributes;
+  }
+
+  public boolean isEmpty() {
+    return getAction() == EvictionAction.NONE && getAlgorithm() == EvictionAlgorithm.NONE;
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS40 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS41 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS42 INS27 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS21 INS32 INS8 INS8 INS27 INS27 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS32 INS40 INS32 INS40 INS40 INS32 INS42 INS32 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS43 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS43 INS42 INS42 INS40 INS40