GEODE-8337: git mv Version.java->KnownVersion.java

-import org.apache.geode.internal.serialization.Version;
+import org.apache.geode.internal.serialization.KnownVersion;
-  protected Version gfversion;
+  protected KnownVersion gfversion;
-  protected Version dataVersion;
+  protected KnownVersion dataVersion;
-      this.gfversion = Version.CURRENT;
+      this.gfversion = KnownVersion.CURRENT;
-    Version dataVersion = getDataVersionIfOld();
+    KnownVersion dataVersion = getDataVersionIfOld();
-      dataVersion = Version.CURRENT;
+      dataVersion = KnownVersion.CURRENT;
-      writeProductVersionRecord(Version.TOKEN, olf);
+      writeProductVersionRecord(KnownVersion.TOKEN, olf);
-  private void writeProductVersionRecord(Version version, OplogFile olf) throws IOException {
+  private void writeProductVersionRecord(KnownVersion version, OplogFile olf) throws IOException {
-  public Version currentRecoveredGFVersion() {
+  public KnownVersion currentRecoveredGFVersion() {
-      final Version version = getProductVersionIfOld();
+      final KnownVersion version = getProductVersionIfOld();
-      final Version version = getProductVersionIfOld();
+      final KnownVersion version = getProductVersionIfOld();
-      final HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
+      final HeapDataOutputStream hdos = new HeapDataOutputStream(KnownVersion.CURRENT);
-    Version recoveredGFVersion = readProductVersionRecord(dis, f);
+    KnownVersion recoveredGFVersion = readProductVersionRecord(dis, f);
-    if ((hasDataVersion = (recoveredGFVersion == Version.TOKEN))) {
+    if ((hasDataVersion = (recoveredGFVersion == KnownVersion.TOKEN))) {
-  private Version readProductVersionRecord(DataInput dis, File f) throws IOException {
+  private KnownVersion readProductVersionRecord(DataInput dis, File f) throws IOException {
-    final Version recoveredGFVersion =
+    final KnownVersion recoveredGFVersion =
-      Version version, ByteArrayDataInput in) {
+      KnownVersion version, ByteArrayDataInput in) {
-    if (Version.GFE_70.compareTo(currentRecoveredGFVersion()) <= 0) {
+    if (KnownVersion.GFE_70.compareTo(currentRecoveredGFVersion()) <= 0) {
-      boolean recoverValue, final LocalRegion currentRegion, Version version, ByteArrayDataInput in,
+      boolean recoverValue, final LocalRegion currentRegion, KnownVersion version,
+      ByteArrayDataInput in,
-      boolean recoverValue, LocalRegion currentRegion, Version version, ByteArrayDataInput in,
+      boolean recoverValue, LocalRegion currentRegion, KnownVersion version, ByteArrayDataInput in,
-  private void validateValue(byte[] valueBytes, byte userBits, Version version,
+  private void validateValue(byte[] valueBytes, byte userBits, KnownVersion version,
-      Version version, ByteArrayDataInput in, HeapDataOutputStream hdos) throws IOException {
+      KnownVersion version, ByteArrayDataInput in, HeapDataOutputStream hdos) throws IOException {
-    Version dataVersion = getDataVersionIfOld();
+    KnownVersion dataVersion = getDataVersionIfOld();
-      dataVersion = Version.CURRENT;
+      dataVersion = KnownVersion.CURRENT;
-      VersioningIO.writeOrdinal(this.krf.dos, Version.TOKEN.ordinal(), false);
+      VersioningIO.writeOrdinal(this.krf.dos, KnownVersion.TOKEN.ordinal(), false);
-              final Version version = getProductVersionIfOld();
+              final KnownVersion version = getProductVersionIfOld();
-    HeapDataOutputStream out = new HeapDataOutputStream(Version.CURRENT);
+    HeapDataOutputStream out = new HeapDataOutputStream(KnownVersion.CURRENT);
-    HeapDataOutputStream out = new HeapDataOutputStream(4 + 8 + 4 + 8 + 4, Version.CURRENT);
+    HeapDataOutputStream out = new HeapDataOutputStream(4 + 8 + 4 + 8 + 4, KnownVersion.CURRENT);
-  private Object deserializeKey(byte[] keyBytes, final Version version,
+  private Object deserializeKey(byte[] keyBytes, final KnownVersion version,
-   * {@link Version} else
+   * {@link KnownVersion} else
-  public Version getProductVersionIfOld() {
-    final Version version = this.gfversion;
+  public KnownVersion getProductVersionIfOld() {
+    final KnownVersion version = this.gfversion;
-        return Version.GFE_66;
+        return KnownVersion.GFE_66;
-    } else if (version == Version.CURRENT) {
+    } else if (version == KnownVersion.CURRENT) {
-   * {@link Version} else return null.
+   * {@link KnownVersion} else return null.
-  public Version getDataVersionIfOld() {
-    final Version version = this.dataVersion;
+  public KnownVersion getDataVersionIfOld() {
+    final KnownVersion version = this.dataVersion;
-        return Version.GFE_66;
+        return KnownVersion.GFE_66;
-    } else if (version == Version.CURRENT) {
+    } else if (version == KnownVersion.CURRENT) {
-        final Version version) {
+        final KnownVersion version) {

UPD40 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD42 UPD42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD42