Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Returns the size in bytes of a C pointer in this
-   * shared library,  returns 4 for a 32 bit shared library,
-   * and 8 for a 64 bit shared library
+   * Returns the size in bytes of a C pointer in this shared library, returns 4 for a 32 bit shared
+   * library, and 8 for a 64 bit shared library
-      throw new IllegalStateException(LocalizedStrings.SmHelper_POINTERSIZEBYTES_UNAVAILABLE_IN_PURE_MODE.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.SmHelper_POINTERSIZEBYTES_UNAVAILABLE_IN_PURE_MODE.toLocalizedString());
+
-  /* ================== System Administration =========================== */  
+  /* ================== System Administration =========================== */
-    if (Thread.interrupted()) throw new InterruptedException();
+    if (Thread.interrupted())
+      throw new InterruptedException();
-      Thread.sleep(nanos/1000000, (int)(nanos%1000000));
+      Thread.sleep(nanos / 1000000, (int) (nanos % 1000000));
-        _nanosleep((int)nanos);
+        _nanosleep((int) nanos);
+
-  
-  private static native String _getSystemId(); 
+
+  private static native String _getSystemId();
-   * Allocates a new JOM instance of <code>c</code> and
-   * invokes the zero-argument constructor of <code>initClass</code>
-   * on the new object to initialize it.  This takes the place of the
-   * late, lamented <code>allocateNewObject</code> method of
-   * <code>java.io.ObjectInputStream</code> in JDK 1.3.
+   * Allocates a new JOM instance of <code>c</code> and invokes the zero-argument constructor of
+   * <code>initClass</code> on the new object to initialize it. This takes the place of the late,
+   * lamented <code>allocateNewObject</code> method of <code>java.io.ObjectInputStream</code> in JDK
+   * 1.3.
-   * @throws InvalidClassException
-   *         If <code>c</code> or <code>initClass</code> represents a
+   * @throws InvalidClassException If <code>c</code> or <code>initClass</code> represents a
-   * @throws NoSuchMethodError
-   *         If <code>initClass</code> doesn't have a zero-argument
-   *         constructor 
-   * @throws IllegalAccessException
-   *         If the zero-argument constructor is not public (only for
-   *         <code>Externalizable</code> classes in which
-   *         <code>c.equals(initClass)</code>
+   * @throws NoSuchMethodError If <code>initClass</code> doesn't have a zero-argument constructor
+   * @throws IllegalAccessException If the zero-argument constructor is not public (only for
+   *         <code>Externalizable</code> classes in which <code>c.equals(initClass)</code>
-  public static Object allocateJOMObject(Class c, Class initClass) 
-    throws IllegalAccessException, InvalidClassException {
+  public static Object allocateJOMObject(Class c, Class initClass)
+      throws IllegalAccessException, InvalidClassException {
-      throw new InvalidClassException(LocalizedStrings.SmHelper_IS_PRIMITIVE.toLocalizedString(), c.getName());
+      throw new InvalidClassException(LocalizedStrings.SmHelper_IS_PRIMITIVE.toLocalizedString(),
+          c.getName());
-      throw new InvalidClassException(LocalizedStrings.SmHelper_IS_PRIMITIVE.toLocalizedString(), initClass.getName());
+      throw new InvalidClassException(LocalizedStrings.SmHelper_IS_PRIMITIVE.toLocalizedString(),
+          initClass.getName());
-//    boolean hasZeroArgInit;
+    // boolean hasZeroArgInit;
-//        Constructor init = 
-          initClass.getDeclaredConstructor(new Class[0]);
+        // Constructor init =
+        initClass.getDeclaredConstructor(new Class[0]);
-//     // Doesn't let us invoke the non-public constructors of inner
-//     // classes 
-//     boolean isPublic = 
-//       ((Boolean) publicConstructorCache.get(initClass)).booleanValue();
-//     if (c.equals(initClass) && !isPublic) {
-//       throw new IllegalAccessException();
-//     }
+    // // Doesn't let us invoke the non-public constructors of inner
+    // // classes
+    // boolean isPublic =
+    // ((Boolean) publicConstructorCache.get(initClass)).booleanValue();
+    // if (c.equals(initClass) && !isPublic) {
+    // throw new IllegalAccessException();
+    // }
-  /** 
-   * Natively allocates a new JOM instance of <code>c</code> and
-   * invokes the zero-argument constructor of <code>initClass</code>
-   * on the new object to initialize it.  This takes the place of the
-   * late, lamented <code>allocateNewObject</code> method of
+  /**
+   * Natively allocates a new JOM instance of <code>c</code> and invokes the zero-argument
+   * constructor of <code>initClass</code> on the new object to initialize it. This takes the place
+   * of the late, lamented <code>allocateNewObject</code> method of

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66