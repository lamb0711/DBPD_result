Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-      GatewaySenderEventImpl gatewayEvent = (GatewaySenderEventImpl)event;
+      GatewaySenderEventImpl gatewayEvent = (GatewaySenderEventImpl) event;
-      List<GatewaySenderEventImpl> bucketEvents = this.bucketToEventsMap
-          .get(bucketId);
+      List<GatewaySenderEventImpl> bucketEvents = this.bucketToEventsMap.get(bucketId);
-      }
-      else {
+      } else {
-  public void close() {
-  }
-  
-//  protected void addExceptionTag(final String expectedException)
-//  {
-//        
-//          SerializableRunnable addExceptionTag = new CacheSerializableRunnable("addExceptionTag")
-//          {
-//                 public void run2()
-//                 {
-//                         getCache().getLogger().info("<ExpectedException action=add>" + 
-//                                                expectedException + "</ExpectedException>"); 
-//                 }
-//          };
-//          
-//         vm2.invoke(addExceptionTag);
-//         vm3.invoke(addExceptionTag);
-//         vm4.invoke(addExceptionTag);
-//         vm5.invoke(addExceptionTag);
-//         vm6.invoke(addExceptionTag);
-//         vm7.invoke(addExceptionTag);
-//  }
-// 
-//  protected void removeExceptionTag(final String expectedException)
-//  {     
-//        
-//          SerializableRunnable removeExceptionTag = new CacheSerializableRunnable("removeExceptionTag")
-//          {
-//                public void run2() throws CacheException
-//                {
-//                          getCache().getLogger().info("<ExpectedException action=remove>" + 
-//                                                 expectedException + "</ExpectedException>");   
-//                }
-//          };
-//          vm2.invoke(removeExceptionTag);
-//          vm3.invoke(removeExceptionTag);
-//          vm4.invoke(removeExceptionTag);
-//          vm5.invoke(removeExceptionTag);
-//          vm6.invoke(removeExceptionTag);
-//          vm7.invoke(removeExceptionTag);
-//  }
-}
+  public void close() {}
+
+  // protected void addExceptionTag(final String expectedException)
+  // {
+  //
+  // SerializableRunnable addExceptionTag = new CacheSerializableRunnable("addExceptionTag")
+  // {
+  // public void run2()
+  // {
+  // getCache().getLogger().info("<ExpectedException action=add>" +
+  // expectedException + "</ExpectedException>");
+  // }
+  // };
+  //
+  // vm2.invoke(addExceptionTag);
+  // vm3.invoke(addExceptionTag);
+  // vm4.invoke(addExceptionTag);
+  // vm5.invoke(addExceptionTag);
+  // vm6.invoke(addExceptionTag);
+  // vm7.invoke(addExceptionTag);
+  // }
+  //
+  // protected void removeExceptionTag(final String expectedException)
+  // {
+  //
+  // SerializableRunnable removeExceptionTag = new CacheSerializableRunnable("removeExceptionTag")
+  // {
+  // public void run2() throws CacheException
+  // {
+  // getCache().getLogger().info("<ExpectedException action=remove>" +
+  // expectedException + "</ExpectedException>");
+  // }
+  // };
+  // vm2.invoke(removeExceptionTag);
+  // vm3.invoke(removeExceptionTag);
+  // vm4.invoke(removeExceptionTag);
+  // vm5.invoke(removeExceptionTag);
+  // vm6.invoke(removeExceptionTag);
+  // vm7.invoke(removeExceptionTag);
+  // }
+}

