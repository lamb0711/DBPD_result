GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


-  protected static final LocatorListRequest LOCATOR_LIST_REQUEST = new LocatorListRequest();
+  private static final LocatorListRequest LOCATOR_LIST_REQUEST = new LocatorListRequest();
-      new Comparator<HostAddress>() {
-        @Override
-        public int compare(HostAddress address, HostAddress otherAddress) {
-          InetSocketAddress inetSocketAddress = address.getSocketInetAddress();
-          InetSocketAddress otherInetSocketAddress = otherAddress.getSocketInetAddress();
-          // shouldn't happen, but if it does we'll say they're the same.
-          if (inetSocketAddress.getAddress() == null
-              || otherInetSocketAddress.getAddress() == null) {
-            return 0;
-          }
+      (address, otherAddress) -> {
+        InetSocketAddress inetSocketAddress = address.getSocketInetAddress();
+        InetSocketAddress otherInetSocketAddress = otherAddress.getSocketInetAddress();
+        // shouldn't happen, but if it does we'll say they're the same.
+        if (inetSocketAddress.getAddress() == null
+            || otherInetSocketAddress.getAddress() == null) {
+          return 0;
+        }
-          int result = inetSocketAddress.getAddress().getCanonicalHostName()
-              .compareTo(otherInetSocketAddress.getAddress().getCanonicalHostName());
-          if (result != 0) {
-            return result;
-          } else {
-            return inetSocketAddress.getPort() - otherInetSocketAddress.getPort();
-          }
+        int result = inetSocketAddress.getAddress().getCanonicalHostName()
+            .compareTo(otherInetSocketAddress.getAddress().getCanonicalHostName());
+        if (result != 0) {
+          return result;
+        } else {
+          return inetSocketAddress.getPort() - otherInetSocketAddress.getPort();
-  protected final List<HostAddress> initialLocators;
+  private final List<HostAddress> initialLocators;
-  private AtomicReference<LocatorList> locators = new AtomicReference<LocatorList>();
-  private AtomicReference<LocatorList> onlineLocators = new AtomicReference<LocatorList>();
+  private AtomicReference<LocatorList> locators = new AtomicReference<>();
+  private AtomicReference<LocatorList> onlineLocators = new AtomicReference<>();
-  private final Map<InetSocketAddress, Exception> locatorState =
-      new HashMap<InetSocketAddress, Exception>();
+  private final Map<InetSocketAddress, Exception> locatorState = new HashMap<>();
-  public AutoConnectionSourceImpl(List<InetSocketAddress> locators, List<HostAddress> contacts,
-      String serverGroup, int handshakeTimeout) {
-    ArrayList<HostAddress> tmpContacts =
-        new ArrayList<HostAddress>(Collections.unmodifiableList(contacts));
-    this.locators.set(new LocatorList(tmpContacts));
+  public AutoConnectionSourceImpl(List<HostAddress> contacts, String serverGroup,
+      int handshakeTimeout) {
+    this.locators.set(new LocatorList(new ArrayList<>(contacts)));
-      Set/* <ServerLocation> */ excludedServers) {
+      Set<ServerLocation> excludedServers) {
-  public List/* ServerLocation */ findServersForQueue(Set/* <ServerLocation> */ excludedServers,
+  public List<ServerLocation> findServersForQueue(Set<ServerLocation> excludedServers,
-      return new ArrayList();
+      return new ArrayList<>();
-    List result = response.getServers();
-    return result;
+    return response.getServers();
-          /**
-           * This call doesn't throw UnknownHostException;
-           */
-  protected ServerLocationResponse queryLocators(ServerLocationRequest request) {
+  private ServerLocationResponse queryLocators(ServerLocationRequest request) {
-    ServerLocationResponse response = null;
+    ServerLocationResponse response;
-    if (response == null) {
-      return null;
-    }
-
-  protected void updateLocatorList(LocatorListResponse response) {
+  private void updateLocatorList(LocatorListResponse response) {
-    List<HostAddress> newLocatorAddresses = new ArrayList<HostAddress>(locatorResponse.size());
+    List<HostAddress> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
-    for (Iterator<ServerLocation> itr = locatorResponse.iterator(); itr.hasNext();) {
-      ServerLocation locator = itr.next();
+    for (ServerLocation locator : locatorResponse) {
-      ArrayList<InetSocketAddress> removedLocators =
-          new ArrayList<InetSocketAddress>(oldLocators.getLocators());
+      ArrayList<InetSocketAddress> removedLocators = new ArrayList<>(oldLocators.getLocators());
-    pool.getStats().setInitialContacts(((LocatorList) locators.get()).size());
+    pool.getStats().setInitialContacts((locators.get()).size());
-        logger.info(String.format("Communication with locator %s failed with %s.",
-            new Object[] {l, ex}),
-            ex);
+        logger.info(String.format("Communication with locator %s failed with %s.", l, ex), ex);
-    protected AtomicInteger currentLocatorIndex = new AtomicInteger();
+    AtomicInteger currentLocatorIndex = new AtomicInteger();
-    public LocatorList(List<HostAddress> locators) {
-      Collections.sort(locators, SOCKET_ADDRESS_COMPARATOR);
+    LocatorList(List<HostAddress> locators) {
+      locators.sort(SOCKET_ADDRESS_COMPARATOR);
-    public List<HostAddress> getLocatorAddresses() {
+    List<HostAddress> getLocatorAddresses() {

UPD83 MOV74 UPD83 MOV74 MOV74 INS74 UPD83 UPD83 INS86 INS74 MOV43 INS43 INS74 INS70 INS59 INS59 MOV8 UPD74 UPD74 UPD74 MOV43 INS43 UPD42 MOV42 MOV43 MOV43 MOV32 INS44 INS42 MOV8 INS42 INS42 INS14 INS42 MOV43 INS42 MOV43 INS14 UPD74 MOV74 UPD42 UPD74 MOV74 UPD42 MOV42 INS74 MOV32 MOV43 UPD74 MOV74 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL14 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL11 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL83 DEL83 DEL42 DEL83