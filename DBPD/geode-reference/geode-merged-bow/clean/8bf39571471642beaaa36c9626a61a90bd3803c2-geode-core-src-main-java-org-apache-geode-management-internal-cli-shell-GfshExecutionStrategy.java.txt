Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Defines the {@link ExecutionStrategy} for commands that are executed in
- * GemFire SHell (gfsh).
+ * Defines the {@link ExecutionStrategy} for commands that are executed in GemFire SHell (gfsh).
-  private Class<?>   mutex = GfshExecutionStrategy.class;
-  private Gfsh       shell;
+  private Class<?> mutex = GfshExecutionStrategy.class;
+  private Gfsh shell;
-  
+
-    this.shell      = shell;
+    this.shell = shell;
-   * Executes the method indicated by the {@link ParseResult} which would always
-   * be {@link GfshParseResult} for GemFire defined commands. If the command
-   * Method is decorated with {@link CliMetaData#shellOnly()} set to
-   * <code>false</code>, {@link OperationInvoker} is used to send the command
-   * for processing on a remote GemFire node.
+   * Executes the method indicated by the {@link ParseResult} which would always be
+   * {@link GfshParseResult} for GemFire defined commands. If the command Method is decorated with
+   * {@link CliMetaData#shellOnly()} set to <code>false</code>, {@link OperationInvoker} is used to
+   * send the command for processing on a remote GemFire node.
-   * @param parseResult
-   *          that should be executed (never presented as null)
-   * @return an object which will be rendered by the {@link Shell}
-   *         implementation (may return null)
-   * @throws RuntimeException
-   *           which is handled by the {@link Shell} implementation
+   * @param parseResult that should be executed (never presented as null)
+   * @return an object which will be rendered by the {@link Shell} implementation (may return null)
+   * @throws RuntimeException which is handled by the {@link Shell} implementation
-  public Object execute(ParseResult parseResult){
+  public Object execute(ParseResult parseResult) {
-      //Check if it's a multi-step command
+      // Check if it's a multi-step command
-      //check if it's a shell only command
-      if(isShellOnly(method)){
+      // check if it's a shell only command
+      if (isShellOnly(method)) {
-          Assert.isTrue(isReadyForCommands(), "ProcessManagerHostedExecutionStrategy not yet ready for commands");
-          return ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(), parseResult.getArguments());
+          Assert.isTrue(isReadyForCommands(),
+              "ProcessManagerHostedExecutionStrategy not yet ready for commands");
+          return ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(),
+              parseResult.getArguments());
-      //check if it's a GfshParseResult
-      if(!GfshParseResult.class.isInstance(parseResult)){
+      // check if it's a GfshParseResult
+      if (!GfshParseResult.class.isInstance(parseResult)) {
-    }
-    catch(NotAuthorizedException e) {
-      result = ResultBuilder.createGemFireUnAuthorizedErrorResult("Unauthorized. Reason: " + e.getMessage());
-    }
-    catch (JMXInvocationException e) {
+    } catch (NotAuthorizedException e) {
+      result = ResultBuilder
+          .createGemFireUnAuthorizedErrorResult("Unauthorized. Reason: " + e.getMessage());
+    } catch (JMXInvocationException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (CommandProcessingException e) {
+    } catch (CommandProcessingException e) {
-    }
-    catch (RuntimeException e) {
+    } catch (RuntimeException e) {
-      logWrapper.warning("Error occurred while executing command : "+((GfshParseResult)parseResult).getUserInput(), e);
-    }
-    catch (Exception e) {
+      logWrapper.warning("Error occurred while executing command : "
+          + ((GfshParseResult) parseResult).getUserInput(), e);
+    } catch (Exception e) {
-      logWrapper.warning("Unexpected error occurred while executing command : "+((GfshParseResult)parseResult).getUserInput(), e);
+      logWrapper.warning("Unexpected error occurred while executing command : "
+          + ((GfshParseResult) parseResult).getUserInput(), e);
-  
+
-   * Whether the command is available only at the shell or on GemFire member
-   * too.
+   * Whether the command is available only at the shell or on GemFire member too.
-   * @param method
-   *          the method to check the associated annotation
-   * @return true if CliMetaData is added to the method & CliMetaData.shellOnly
-   *         is set to true, false otherwise
+   * @param method the method to check the associated annotation
+   * @return true if CliMetaData is added to the method & CliMetaData.shellOnly is set to true,
+   *         false otherwise
-//  Not used currently
-//  private static String getCommandName(ParseResult result) {
-//    Method method = result.getMethod();
-//    CliCommand cliCommand = method.getAnnotation(CliCommand.class);
-//
-//    return cliCommand != null ? cliCommand.value() [0] : null;
-//  }
+  // Not used currently
+  // private static String getCommandName(ParseResult result) {
+  // Method method = result.getMethod();
+  // CliCommand cliCommand = method.getAnnotation(CliCommand.class);
+  //
+  // return cliCommand != null ? cliCommand.value() [0] : null;
+  // }
-   * Indicates commands are able to be presented. This generally means all 
-   * important system startup activities have completed.
-   * Copied from {@link ExecutionStrategy#isReadyForCommands()}.
+   * Indicates commands are able to be presented. This generally means all important system startup
+   * activities have completed. Copied from {@link ExecutionStrategy#isReadyForCommands()}.
-   * Indicates the execution runtime should be terminated. This allows it to 
-   * cleanup before returning control flow to the caller. Necessary for clean 
-   * shutdowns.
-   * Copied from {@link ExecutionStrategy#terminate()}.
+   * Indicates the execution runtime should be terminated. This allows it to cleanup before
+   * returning control flow to the caller. Necessary for clean shutdowns. Copied from
+   * {@link ExecutionStrategy#terminate()}.
-    //TODO: Is additional cleanup required?
+    // TODO: Is additional cleanup required?
-  
+
-   * Sends the user input (command string) via {@link OperationInvoker} to a
-   * remote GemFire node for processing & execution.
+   * Sends the user input (command string) via {@link OperationInvoker} to a remote GemFire node for
+   * processing & execution.
-   * @param parseResult 
+   * @param parseResult
-   * @throws IllegalStateException
-   *           if gfsh doesn't have an active connection.
+   * @throws IllegalStateException if gfsh doesn't have an active connection.
-    Result   commandResult = null;
-    Object   response      = null;
+    Result commandResult = null;
+    Object response = null;
-    if(!shell.isConnectedAndReady()){
-      shell.logWarning("Can't execute a remote command without connection. Use 'connect' first to connect.", null);
-      logWrapper.info("Can't execute a remote command \""+parseResult.getUserInput()+"\" without connection. Use 'connect' first to connect to GemFire.");
+    if (!shell.isConnectedAndReady()) {
+      shell.logWarning(
+          "Can't execute a remote command without connection. Use 'connect' first to connect.",
+          null);
+      logWrapper.info("Can't execute a remote command \"" + parseResult.getUserInput()
+          + "\" without connection. Use 'connect' first to connect to GemFire.");
-    byte[][]             fileData    = null;
+    byte[][] fileData = null;
-    //1. Pre Remote Execution
+    // 1. Pre Remote Execution
-        interceptor = (CliAroundInterceptor) ClassPathLoader.getLatest().forName(interceptorClass).newInstance();
+        interceptor = (CliAroundInterceptor) ClassPathLoader.getLatest().forName(interceptorClass)
+            .newInstance();
-    //2. Remote Execution
+    // 2. Remote Execution
-      response = shell.getOperationInvoker().processCommand(new CommandRequest(parseResult, env, fileData));
-    } catch(NotAuthorizedException e) {
-      return ResultBuilder.createGemFireUnAuthorizedErrorResult("Unauthorized. Reason : " + e.getMessage());
-    }
-    finally {
+      response = shell.getOperationInvoker()
+          .processCommand(new CommandRequest(parseResult, env, fileData));
+    } catch (NotAuthorizedException e) {
+      return ResultBuilder
+          .createGemFireUnAuthorizedErrorResult("Unauthorized. Reason : " + e.getMessage());
+    } finally {
-      shell.logWarning("Response was null for: \"" + parseResult.getUserInput() + "\". (gfsh.isConnected=" + shell.isConnectedAndReady() + ")", null);
-      return ResultBuilder.createBadResponseErrorResult(" Error occurred while " +
-        "executing \"" + parseResult.getUserInput() + "\" on manager. " +
-        "Please check manager logs for error.");
+      shell.logWarning("Response was null for: \"" + parseResult.getUserInput()
+          + "\". (gfsh.isConnected=" + shell.isConnectedAndReady() + ")", null);
+      return ResultBuilder.createBadResponseErrorResult(
+          " Error occurred while " + "executing \"" + parseResult.getUserInput() + "\" on manager. "
+              + "Please check manager logs for error.");
-      logWrapper.fine("Received response :: "+response);
+      logWrapper.fine("Received response :: " + response);
-    CommandResponse commandResponse = CommandResponseBuilder.prepareCommandResponseFromJson((String) response);
+    CommandResponse commandResponse =
+        CommandResponseBuilder.prepareCommandResponseFromJson((String) response);
-      //TODO - Abhishek When debug is ON, log response in gfsh logs
-      //TODO - Abhishek handle \n better. Is it coming from GemFire formatter
+      // TODO - Abhishek When debug is ON, log response in gfsh logs
+      // TODO - Abhishek handle \n better. Is it coming from GemFire formatter
-      debugInfo = debugInfo.replaceAll("\n", "\n[From Manager : "+commandResponse.getSender()+"]");
-      debugInfo = "[From Manager : "+commandResponse.getSender()+"]" + debugInfo;
+      debugInfo =
+          debugInfo.replaceAll("\n", "\n[From Manager : " + commandResponse.getSender() + "]");
+      debugInfo = "[From Manager : " + commandResponse.getSender() + "]" + debugInfo;
-    //3. Post Remote Execution
+    // 3. Post Remote Execution
-            logWrapper.info("Post execution Result :: "+ResultBuilder.resultAsString(postExecResult));
+            logWrapper
+                .info("Post execution Result :: " + ResultBuilder.resultAsString(postExecResult));
-          logWrapper.fine("Post execution Result :: "+ResultBuilder.resultAsString(postExecResult));
+          logWrapper
+              .fine("Post execution Result :: " + ResultBuilder.resultAsString(postExecResult));

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66