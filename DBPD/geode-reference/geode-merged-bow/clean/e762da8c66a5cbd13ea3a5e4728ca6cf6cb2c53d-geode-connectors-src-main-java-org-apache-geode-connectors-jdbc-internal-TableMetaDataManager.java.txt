GEODE-6291: change create mapping to define column and pdx field information  (#3155)

Create mapping now requires that the pdx class exists on the server.
It generates a FieldMapping definition for each column/field. It will load the pdx class and
generate a pdx type for it, failing if it can not do so.
If the pdx type field count does not match the table column count then it will fail.
The pdx field names can differ in case from the column names as long as only one field matches the column.

Authored-by: Benjamin Ross <bross@pivotal.io>
Authored-by: Darrel Schneider <dschneider@pivotal.io>

+import java.sql.JDBCType;
+import org.apache.geode.connectors.jdbc.internal.TableMetaData.ColumnMetaData;
-      Map<String, Integer> dataTypes =
-          getDataTypesFromMetaData(metaData, realCatalogName, realSchemaName, realTableName);
+      Map<String, ColumnMetaData> columnMetaDataMap =
+          createColumnMetaDataMap(metaData, realCatalogName, realSchemaName, realTableName);
-          dataTypes);
+          columnMetaDataMap);
-  private Map<String, Integer> getDataTypesFromMetaData(DatabaseMetaData metaData,
+  private Map<String, ColumnMetaData> createColumnMetaDataMap(DatabaseMetaData metaData,
-    Map<String, Integer> result = new HashMap<>();
+    Map<String, ColumnMetaData> result = new HashMap<>();
-        result.put(columnName, dataType);
+        int nullableCode = columnData.getInt("NULLABLE");
+        boolean nullable = nullableCode != DatabaseMetaData.columnNoNulls;
+        result.put(columnName, new ColumnMetaData(JDBCType.valueOf(dataType), nullable));

INS26 INS26 INS40 INS40 UPD74 UPD42 UPD43 UPD42 UPD74 UPD43 UPD74 UPD42 UPD43 UPD42 UPD42 INS60 INS60 UPD42 UPD42 INS39 INS59 INS39 INS59 INS42 INS32 INS42 INS27 INS14 INS42 INS42 INS45 INS42 INS40 INS43 INS32 INS42 INS42 INS42 INS42 MOV42