Merge branch 'release/1.5.0'

+  private final InternalCache cache;
-  public IndexManager(Region region) {
+  public IndexManager(InternalCache cache, Region region) {
+    this.cache = cache;
-    public void hook(final int spot) throws RuntimeException;
+    void hook(final int spot) throws RuntimeException;
-      IndexTask indexTask = new IndexTask(indexName, indexType, origFromClause,
+      IndexTask indexTask = new IndexTask(cache, indexName, indexType, origFromClause,
+      ((TXManagerImpl) this.region.getCache().getCacheTransactionManager()).unpauseTransaction(tx);
-      if (tx != null) {
-        ((TXManagerImpl) this.region.getCache().getCacheTransactionManager())
-            .unpauseTransaction(tx);
-      }
-    IndexTask indexTask = new IndexTask(indexName);
+    IndexTask indexTask = new IndexTask(cache, indexName);
-    IndexTask indexTask = new IndexTask(indexName);
+    IndexTask indexTask = new IndexTask(cache, indexName);
-    IndexTask indexTask = new IndexTask(index.getName());
+    IndexTask indexTask = new IndexTask(cache, index.getName());
-      if (tx != null) {
-        ((TXManagerImpl) this.region.getCache().getCacheTransactionManager())
-            .unpauseTransaction(tx);
-      }
+      ((TXManagerImpl) this.region.getCache().getCacheTransactionManager()).unpauseTransaction(tx);
+
-    IndexTask(String indexName, IndexType type, String origFromClause, String origIndexedExpression,
-        IndexCreationHelper helper, boolean isCompactOrHash, PartitionedIndex prIndex,
-        boolean loadEntries) {
+    private final InternalCache cache;
+
+    IndexTask(InternalCache cache, String indexName, IndexType type, String origFromClause,
+        String origIndexedExpression, IndexCreationHelper helper, boolean isCompactOrHash,
+        PartitionedIndex prIndex, boolean loadEntries) {
+      this.cache = cache;
-    IndexTask(String indexName) {
+    IndexTask(InternalCache cache, String indexName) {
+      this.cache = cache;
-        index = new PrimaryKeyIndex(indexName, region, fromClause, indexedExpression,
+        index = new PrimaryKeyIndex(cache, indexName, region, fromClause, indexedExpression,
-        index = new HashIndex(indexName, region, fromClause, indexedExpression,
+        index = new HashIndex(cache, indexName, region, fromClause, indexedExpression,
-            index = new CompactRangeIndex(indexName, region, fromClause, indexedExpression,
+            index = new CompactRangeIndex(cache, indexName, region, fromClause, indexedExpression,
-            index = new CompactMapRangeIndex(indexName, region, fromClause, indexedExpression,
-                projectionAttributes, origFromClause, origIndexedExpression, definitions,
-                fich.isAllKeys(), fich.multiIndexKeysPattern, fich.mapKeys, stats);
+            index = new CompactMapRangeIndex(cache, indexName, region, fromClause,
+                indexedExpression, projectionAttributes, origFromClause, origIndexedExpression,
+                definitions, fich.isAllKeys(), fich.multiIndexKeysPattern, fich.mapKeys, stats);
-            index = new RangeIndex(indexName, region, fromClause, indexedExpression,
+            index = new RangeIndex(cache, indexName, region, fromClause, indexedExpression,
-            index = new MapRangeIndex(indexName, region, fromClause, indexedExpression,
+            index = new MapRangeIndex(cache, indexName, region, fromClause, indexedExpression,

INS23 INS83 INS83 INS43 INS59 INS44 INS23 INS42 INS42 INS43 INS42 INS21 INS83 INS83 INS43 INS59 INS44 INS44 INS42 INS7 MOV8 MOV43 MOV43 MOV8 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS22 INS42 MOV21 MOV21 MOV21 INS42 INS7 INS42 INS7 INS52 INS42 MOV43 MOV43 INS42 MOV43 INS42 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL33 DEL27 DEL25 DEL8