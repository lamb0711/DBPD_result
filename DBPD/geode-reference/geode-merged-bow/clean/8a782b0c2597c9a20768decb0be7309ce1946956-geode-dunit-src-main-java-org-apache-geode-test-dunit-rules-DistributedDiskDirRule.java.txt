GEODE-6033: Support dynamic VMs in DistributedDiskDirRule

* Create tests for DiskDirRule and DistributedDiskDirRule.
* Fix a couple minor issues found by testing DiskDirRule.
* Make DistributedDiskDirRule support create and bounce VMs.

-import static org.assertj.core.api.Assertions.assertThat;
+import static org.apache.geode.test.dunit.VM.getCurrentVMNum;
+import java.io.Serializable;
+import java.nio.file.Files;
+import org.apache.geode.test.dunit.VMEventListener;
- * You may either pass in instances of SerializableTemporaryFolder and SerializableTestName from
- * the test or the DistributedDiskDirRule will create its own instances. Either way, it will invoke
- * SerializableTemporaryFolder.before and SerializableTestName.starting(Description). If the test
- * provides its own instances of these rules defined, please do not annotate these instances with
- * {@code @Rule}.
- *
- * <p>
- * Each JVM will have its own default DiskDirs directory in which that JVM will create the default
+ * Each JVM will have its own default DiskDir directory in which that JVM will create the default
- * /var/folders/28/m__9dv1906n60kmz7t71wm680000gn/T/junit1766147044000254810
- *     VM-1-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM0-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM1-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM2-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM3-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
+ * /var/folders/28/m__9dv1906n60kmz7t71wm680000gn/T/junit7783603075891789189/
+ *     VM-1-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM0-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM1-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM2-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM3-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
- * {@literal @}Category(DistributedTest.class)
- * public class PRAccessorWithOverflowRegressionTest extends CacheTestCase {
+ * public class DistributedDiskDirRuleDistributedTest implements Serializable {
- *     {@literal @}Rule
- *     public DistributedDiskDirRule diskDirsRule = new DistributedDiskDirRule();
+ *   {@literal @}Rule
+ *   public DistributedRule distributedRule = new DistributedRule();
+ *
+ *   {@literal @}Rule
+ *   public DistributedDiskDirRule distributedDiskDirRule = new DistributedDiskDirRule();
+  private final VMEventListener vmEventListener;
-  private volatile int beforeVmCount;
+  private String testClassName;
-    this(new Builder());
+    this(new SerializableTemporaryFolder(), new SerializableTestName());
-  public DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder) {
-    this(new Builder().temporaryFolder(temporaryFolder));
-  }
-
-  public DistributedDiskDirRule(SerializableTestName testName) {
-    this(new Builder().testName(testName));
-  }
-
-  public DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
+  private DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
-    this(new Builder().temporaryFolder(temporaryFolder).testName(testName));
+    this(temporaryFolder, testName, new RemoteInvoker());
-  public DistributedDiskDirRule(Builder builder) {
-    this(builder, new RemoteInvoker());
-  }
-
-  protected DistributedDiskDirRule(Builder builder, RemoteInvoker invoker) {
-    this(builder.initializeHelperRules, builder.temporaryFolder, builder.testName, invoker);
-  }
-
-  protected DistributedDiskDirRule(boolean initializeHelperRules,
-      SerializableTemporaryFolder temporaryFolder, SerializableTestName testName,
-      RemoteInvoker invoker) {
-    super(initializeHelperRules, null, null);
+  private DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
+      SerializableTestName testName, RemoteInvoker invoker) {
+    super(null, null);
+    vmEventListener = new InternalVMEventListener();
+  /**
+   * Returns the current default disk dirs value for the specified VM.
+   */
-    beforeVmCount = getVMCount();
+    VM.addVMEventListener(vmEventListener);
-    if (initializeHelperRules) {
-      initializeHelperRules(description);
-    }
+    initializeHelperRules(description);
-    invoker.invokeInEveryVMAndController(() -> doBefore(this, description));
+    testClassName = getTestClassName(description);
+    invoker.invokeInEveryVMAndController(() -> doBefore(this));
-  protected void initializeHelperRules(Description description) throws Exception {
+  protected void after(Description description) {
+    VM.removeVMEventListener(vmEventListener);
+    invoker.invokeInEveryVMAndController(() -> doAfter());
+  }
+
+  private String getDiskDirName(String testClass) {
+    return "VM" + getCurrentVMNum() + "-" + testClass + "_" + testName.getMethodName()
+        + "-diskDirs";
+  }
+
+  private void initializeHelperRules(Description description) throws Exception {
-  @Override
-  protected void after(Description description) {
-    assertThat(getVMCount()).isEqualTo(beforeVmCount);
-
-    invoker.invokeInEveryVMAndController(() -> doAfter());
+  private void afterCreateVM(VM vm) {
+    vm.invoke(() -> doBefore(this));
-  @Override
-  protected String getDiskDirName(String testClass) {
-    return "VM" + VM.getCurrentVMNum() + "-" + testClass + "_" + testName.getMethodName()
-        + "-diskDirs";
+  private void afterBounceVM(VM vm) {
+    vm.invoke(() -> doBefore(this));
-  private void doBefore(DistributedDiskDirRule diskDirRule, Description description)
-      throws Exception {
+  private void doBefore(DistributedDiskDirRule diskDirRule) throws Exception {
-    File diskDir = data.temporaryFolder().newFolder(getDiskDirName(getTestClassName(description)));
+    File diskDir = new File(data.temporaryFolder().getRoot(), getDiskDirName(testClassName));
+    if (!diskDir.exists()) {
+      Files.createDirectory(diskDir.toPath());
+    }
-          + VM.getCurrentVMNum() + ". Rule does not support VM.bounce().");
+          + getCurrentVMNum() + ". Rule does not support VM.bounce().");
-   * Builds an instance of DistributedDiskDirRule
+   * VMEventListener for DistributedDiskDirRule.
-  public static class Builder {
-    private boolean initializeHelperRules = true;
-    private SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();
-    private SerializableTestName testName = new SerializableTestName();
+  private class InternalVMEventListener implements VMEventListener, Serializable {
-    public Builder() {
+    @Override
+    public void afterCreateVM(VM vm) {
+      DistributedDiskDirRule.this.afterCreateVM(vm);
+    }
+
+    @Override
+    public void beforeBounceVM(VM vm) {
-    /**
-     * Specify false to disable initializing SerializableTemporaryFolder and SerializableTestName
-     * during DistributedDiskDirRule initialization. If this is enabled then do NOT annotate these
-     * helper rules in the test or combine them with RuleChain or RuleList. Default value is true.
-     */
-    public Builder initializeHelperRules(boolean value) {
-      initializeHelperRules = value;
-      return this;
-    }
-
-    public Builder temporaryFolder(SerializableTemporaryFolder temporaryFolder) {
-      this.temporaryFolder = temporaryFolder;
-      return this;
-    }
-
-    public Builder testName(SerializableTestName testName) {
-      this.testName = testName;
-      return this;
-    }
-
-    public DistributedDiskDirRule build() {
-      return new DistributedDiskDirRule(this);
+    @Override
+    public void afterBounceVM(VM vm) {
+      DistributedDiskDirRule.this.afterBounceVM(vm);

MOV26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 INS23 INS23 INS31 MOV31 INS55 MOV65 MOV66 MOV83 UPD83 MOV83 INS43 INS59 INS83 INS43 INS59 UPD83 MOV44 MOV44 MOV8 UPD83 INS29 UPD83 UPD83 INS83 INS39 INS42 INS44 INS8 UPD83 INS39 UPD42 INS44 INS29 INS83 INS42 INS43 INS43 MOV31 MOV31 MOV31 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS21 INS65 INS21 MOV21 INS43 INS42 INS21 INS43 INS42 INS21 INS25 MOV65 UPD42 MOV42 INS42 MOV78 INS39 INS42 MOV78 INS39 INS42 INS78 INS39 INS42 INS44 MOV14 MOV14 UPD42 INS42 INS7 INS66 INS32 UPD42 MOV42 INS32 INS42 INS32 INS43 INS38 INS8 UPD66 UPD43 UPD42 UPD43 UPD42 INS42 INS43 INS42 INS21 INS42 INS14 INS42 INS42 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS14 INS32 INS21 UPD42 INS32 UPD42 UPD42 MOV42 INS32 INS43 INS32 INS32 MOV43 MOV32 INS32 INS42 INS42 INS32 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL14 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL40 DEL40 DEL42 DEL17 DEL8 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL8 DEL25 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL66 DEL66 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL41 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL43 DEL42 DEL42 DEL43 DEL52 DEL14 DEL41 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL29 DEL83 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL55