Merge branch 'develop' into feature/GEODE-7049

+import org.apache.geode.internal.statistics.StatisticsClock;
+  private final StatisticsClock statisticsClock;
+
-  public TXManagerImpl(CachePerfStats cachePerfStats, InternalCache cache) {
+  public TXManagerImpl(CachePerfStats cachePerfStats, InternalCache cache,
+      StatisticsClock statisticsClock) {
+    this.statisticsClock = statisticsClock;
-      proxy = new DistTXStateProxyImplOnCoordinator(cache, this, id, null);
+      proxy = new DistTXStateProxyImplOnCoordinator(cache, this, id, null, statisticsClock);
-      proxy = new TXStateProxyImpl(cache, this, id, null);
+      proxy = new TXStateProxyImpl(cache, this, id, null, statisticsClock);
-      newState = new DistTXStateProxyImplOnCoordinator(cache, this, id, true);
+      newState = new DistTXStateProxyImplOnCoordinator(cache, this, id, true, statisticsClock);
-      newState = new TXStateProxyImpl(cache, this, id, true);
+      newState = new TXStateProxyImpl(cache, this, id, true, statisticsClock);
-    final long opStart = CachePerfStats.getStatTime();
+    final long opStart = statisticsClock.getTime();
-    long opEnd = CachePerfStats.getStatTime();
+    long opEnd = statisticsClock.getTime();
-    long opEnd = CachePerfStats.getStatTime();
+    long opEnd = statisticsClock.getTime();
-    final long opStart = CachePerfStats.getStatTime();
+    final long opStart = statisticsClock.getTime();
-    long opEnd = CachePerfStats.getStatTime();
+    long opEnd = statisticsClock.getTime();
-            val = new DistTXStateProxyImplOnDatanode(cache, this, key, msg.getTXOriginatorClient());
-            val.setLocalTXState(new DistTXState(val, true));
+            val = new DistTXStateProxyImplOnDatanode(cache, this, key, msg.getTXOriginatorClient(),
+                statisticsClock);
+            val.setLocalTXState(new DistTXState(val, true, statisticsClock));
-            val = new TXStateProxyImpl(cache, this, key, msg.getTXOriginatorClient());
-            val.setLocalTXState(new TXState(val, true));
+            val = new TXStateProxyImpl(cache, this, key, msg.getTXOriginatorClient(),
+                statisticsClock);
+            val.setLocalTXState(new TXState(val, true, statisticsClock));
-            val = new DistTXStateProxyImplOnDatanode(cache, this, key, memberId);
+            val = new DistTXStateProxyImplOnDatanode(cache, this, key, memberId, statisticsClock);
-            val = new TXStateProxyImpl(cache, this, key, memberId);
+            val = new TXStateProxyImpl(cache, this, key, memberId, statisticsClock);
-        cleanupTransactionIfNoLongerHost(tx);
+        cleanupTransactionIfNoLongerHostCausedByFailover(tx);
-  void cleanupTransactionIfNoLongerHost(TXStateProxy tx) {
+  void cleanupTransactionIfNoLongerHostCausedByFailover(TXStateProxy tx) {
-        // this could occur when a failover command removed the transaction.
-        if (tx.isRealDealLocal()) {
+        // caused by a failover command removed the transaction.
+        if (tx.isRealDealLocal() && ((TXStateProxyImpl) tx).isRemovedCausedByFailover()) {
+    return removeHostedTXState(txId, false);
+  }
+
+  public TXStateProxy removeHostedTXState(TXId txId, boolean causedByFailover) {
+        if (causedByFailover) {
+          ((TXStateProxyImpl) result).setRemovedCausedByFailover(true);
+        }

INS26 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS44 UPD42 MOV29 INS83 INS43 INS42 INS44 INS8 INS44 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS41 INS39 INS42 INS42 INS7 INS42 INS32 INS22 INS42 INS42 INS42 INS9 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS8 MOV21 INS25 INS42 INS42 INS42 INS42 INS27 INS42 MOV8 UPD42 MOV32 INS32 INS21 INS36 INS42 INS32 INS11 INS36 INS42 INS9 INS43 INS42 INS11 INS42 INS43 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42