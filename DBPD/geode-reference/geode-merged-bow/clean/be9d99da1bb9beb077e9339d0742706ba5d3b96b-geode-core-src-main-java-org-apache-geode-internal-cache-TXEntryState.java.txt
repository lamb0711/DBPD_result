GEODE-4769: optional early serialization of EntryEvent key and new value

If enabled, Regions and Transactions will serialize key and value before
updating the local cache. This prevents inconsistency between distributed
members caused by any failure to serialize the key or value.

This feature is disabled by default. To enable it, specify the system
property geode.earlyEntryEventSerialization=true.

-
-import org.apache.geode.cache.*;
+import org.apache.geode.cache.CacheRuntimeException;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CacheWriterException;
+import org.apache.geode.cache.CommitConflictException;
+import org.apache.geode.cache.DataPolicy;
+import org.apache.geode.cache.EntryDestroyedException;
+import org.apache.geode.cache.EntryEvent;
+import org.apache.geode.cache.EntryNotFoundException;
+import org.apache.geode.cache.Operation;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.cache.TimeoutException;
- *
- *
+  private byte[] serializedPendingValue;
+
-  // @todo darrel: optimize footprint by having this field on a subclass
+  // TODO: optimize footprint by having this field on a subclass
-
+  private byte[] getSerializedPendingValue() {
+    return serializedPendingValue;
+  }
+
+  private void setSerializedPendingValue(byte[] serializedPendingValue) {
+    this.serializedPendingValue = serializedPendingValue;
+  }
+
+  void serializePendingValue() {
+    Object pendingValue = getPendingValue();
+    if (Token.isInvalidOrRemoved(pendingValue)) {
+      // token
+      return;
+    }
+    if (pendingValue instanceof byte[]) {
+      // byte[]
+      return;
+    }
+
+    // CachedDeserialized, Object or PDX
+    if (pendingValue instanceof CachedDeserializable) {
+      CachedDeserializable cachedDeserializable = (CachedDeserializable) pendingValue;
+      setSerializedPendingValue(cachedDeserializable.getSerializedValue());
+    } else {
+      setSerializedPendingValue(EntryEventImpl.serialize(pendingValue));
+    }
+  }
+
-   * @param key
-  boolean isOpSearchOrLoad() {
-    return this.op >= OP_SEARCH_CREATE && this.op != OP_PUT && this.op != OP_LOCAL_CREATE;
-  }
-
-  boolean isOpLocalLoad() {
-    return this.op == OP_LLOAD_CREATE || this.op == OP_LLOAD_PUT;
-  }
-
-  boolean isOpNetLoad() {
-    return this.op == OP_NLOAD_CREATE || this.op == OP_NLOAD_PUT;
-  }
-
-  boolean isOpLoad() {
-    return isOpLocalLoad() || isOpNetLoad();
-  }
-
-  // private boolean isLocalEventDistributed()
-  // {
-  // return this.op == OP_D_DESTROY
-  // || (this.op >= OP_D_INVALIDATE && this.op != OP_SEARCH_CREATE
-  // && this.op != OP_LOCAL_CREATE && this.op != OP_SEARCH_PUT);
-  // }
-
-  // private void dumpOp() {
-  // System.out.println("DEBUG: op=" + opToString()
-  // + " destroy=" + this.destroy
-  // + " isDis=" + isLocalEventDistributed());
-  // System.out.flush();
-  // }
-    // dumpOp();
-    // LocalRegion lr = event.getRegion();
-    // boolean isProxy = lr.isProxy();
-    // if (!isLocallyValid(isProxy)) {
-    // return false;
-    // }
-   *
-   * @param event
+
+   * <p>
+   * The fromData for this is TXCommitMessage$RegionCommit$FarSideEntryOp#fromData.
+   *
-        boolean sendObject = Token.isInvalidOrRemoved(getPendingValue());
-        sendObject = sendObject || getPendingValue() instanceof byte[];
-        out.writeBoolean(sendObject);
-        if (sendObject) {
+        boolean isTokenOrByteArray = Token.isInvalidOrRemoved(getPendingValue());
+        isTokenOrByteArray = isTokenOrByteArray || getPendingValue() instanceof byte[];
+        out.writeBoolean(isTokenOrByteArray);
+        if (isTokenOrByteArray) {
+          // this is a token or byte[] only
-          DataSerializer.writeObjectAsByteArray(getPendingValue(), out);
+          // this is a CachedDeserializable, Object and PDX
+          DataSerializer.writeByteArray(getSerializedPendingValue(), out);
-  /**
-   * Creates a queued op and returns it for this entry on the far side of the tx.
-   *
-   * @param key the key for this op
-   * @since GemFire 5.0
-   */
-  QueuedOperation toFarSideQueuedOp(Object key) {
-    Operation operation = getFarSideOperation();
-    byte[] valueBytes = null;
-    byte deserializationPolicy = DistributedCacheOperation.DESERIALIZATION_POLICY_NONE;
-    if (!operation.isDestroy() && !operation.isInvalidate()) {
-      Object v = getPendingValue();
-      if (v == null || v instanceof byte[]) {
-        valueBytes = (byte[]) v;
-      } else {
-        deserializationPolicy = DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY;
-        valueBytes = EntryEventImpl.serialize(v);
-      }
-    }
-    return new QueuedOperation(operation, key, valueBytes, null, deserializationPolicy, null);
-  }
-
-      // TODO:ASIF :Check if the eventID should be created. Currently not
-      // creating it
-
-  public void setNextRegionVersion(long v) {
-    this.nextRegionVersion = v;
-  }
-
-  public long getNextRegionVersion() {
-    return this.nextRegionVersion;
-  }
-
-   *
+   * <p>
-   *
-   * Whereas @see DistTxEntryEvent is used forstoring entry event information on TxCordinator and
+   * <p>
+   * Whereas see DistTxEntryEvent is used for storing entry event information on TxCoordinator and
-   *
-      // TODO Auto-generated method stub

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS23 INS31 INS83 INS5 INS59 INS83 MOV5 UPD42 INS83 UPD39 UPD42 INS44 INS8 UPD39 MOV39 UPD42 MOV42 INS8 INS39 INS85 INS42 MOV5 INS42 INS21 MOV60 INS25 INS25 INS25 INS42 INS7 INS32 INS8 MOV62 INS8 INS62 INS8 MOV8 INS66 INS66 INS66 INS66 UPD66 INS22 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS41 UPD42 INS41 INS42 INS43 MOV60 INS21 MOV52 UPD42 MOV42 UPD42 MOV42 UPD43 INS32 INS32 UPD42 UPD42 INS11 INS42 INS32 INS42 INS32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL39 DEL52 DEL42 DEL22 DEL42 DEL27 DEL52 DEL42 DEL22 DEL42 DEL27 DEL27 DEL52 DEL42 DEL22 DEL42 DEL27 DEL22 DEL42 DEL27 DEL27 DEL41 DEL8 DEL42 DEL32 DEL42 DEL40 DEL7 DEL21 DEL42 DEL32 DEL7 DEL42 DEL65 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL27 DEL52 DEL42 DEL22 DEL42 DEL27 DEL27 DEL52 DEL42 DEL22 DEL42 DEL27 DEL27 DEL41 DEL8 DEL31 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL32 DEL38 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL11 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL42 DEL33 DEL14 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31