GEODE-3436: revert recent refactoring of GFSH commands

Revert "GEODE-3264: Refactoring MemberCommands"
This reverts commit d27f8b956de7d9c5d95ebdc68dfc67ee8b2d7b51.

Revert "GEODE-3259: Refactoring DurableClientCommands"
This reverts commit 440c87f81fab96f9ce38a2d53ded75e5fe8390d7.

Revert "GEODE-3254: Refactoring ConfigCommands"
This reverts commit 97c4e9a59f17c7bc914e39dd048b0a4cd96293c4.

Revert "GEODE-3262: Refactoring IndexCommands"
This reverts commit ed293e817e547fb5ecd399bf4ba10d694af51e0a.

Revert "GEODE-3260: Refactoring FunctionCommands"
This reverts commit 90f5440de8ec747f301a309a0a34101e8defcd29.

Revert "GEODE-3258: Refactoring DiskStoreCommands"
This reverts commit 5d6cad7755ec3c4fe931e3d0f8e89fb181038543.

Revert "GEODE-3337: Refactoring LauncherLifecycleCommandsDUnitTest"
This reverts commit 210ff9f15460c993f2bf7fd682d50ee65462cd23.

Revert "GEODE-3265: Refactoring MiscellaneousCommands"
This reverts commit 63169699e933f6e0fdd90b95ed039e4e3c92c32c.

Revert "GEODE-3261: Refactoring GfshHelpCommands"
This reverts commit cf91426692349d0c81ce77394935576d9cc336e8.

Revert "GEODE-3267: Refactoring QueueCommands"
This reverts commit fd47ed660168864a6f81b2a4cd7dbceebc99a282.

Revert "GEODE-3270: Refactoring (renaming) StatusCommands"
This reverts commit 359e3fff6482ecfb375939d387f4dad3a636246b.

Revert "GEODE-3267: Refactoring QueueCommands - updated based on feedback"
This reverts commit 957d583e54dc34c029885f32a54f0b25a3ac1094.

Revert "GEODE-3268: Refactoring RegionCommands"
This reverts commit 64de3b69c2aecb4930bcfd0a1161569b1d5fda89.

Revert "GEODE-3266: Refactoring PDXCommands"
This reverts commit 67185abcdd68b908dea6888cb94286b8aa9ea49f.

Revert "GEODE-3257: Refactoring DeployCommands"
This reverts commit 9d967446a44a78b612f605b6a8f8eedcfc625b3a.

Revert "GEODE-3255: Refactor CreateAlterDestroyRegionCommands and tests"
This reverts commit 756efe77c86bb03ac9984655e7bd040659e85890.

Revert "GEODE-3230: Cleaning up unused (Cli)Strings"
This reverts commit a7f29525df2981c1c99abac96ea83cb965295970.

This closes #711

+import java.text.MessageFormat;
+import java.util.Collections;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
+import org.apache.geode.LogWriter;
+import org.apache.geode.cache.ExpirationAttributes;
+import org.apache.geode.cache.Scope;
+import org.apache.geode.management.cli.Result.Status;
+import org.apache.geode.management.internal.MBeanJMXAdapter;
+import org.apache.geode.management.internal.cli.functions.FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult;
+import org.apache.geode.management.internal.cli.functions.RegionAlterFunction;
+import org.apache.geode.management.internal.cli.functions.RegionDestroyFunction;
-import org.apache.geode.security.ResourcePermission;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
+import org.apache.geode.security.ResourcePermission.Target;
-public class CreateRegionCommand implements GfshCommand {
+/**
+ * @since GemFire 7.0
+ */
+public class CreateAlterDestroyRegionCommands implements GfshCommand {
+
+  /**
+   * Internally, we also verify the resource operation permissions CLUSTER:WRITE:DISK if the region
+   * is persistent
+   */
-  @ResourceOperation(resource = ResourcePermission.Resource.DATA,
-      operation = ResourcePermission.Operation.MANAGE)
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-      RegionCommandsUtils.validateGroups(cache, groups);
+      validateGroups(cache, groups);
-        FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult<Object, Object> regionAttributesResult =
+        FetchRegionAttributesFunctionResult<Object, Object> regionAttributesResult =
-        getSecurityService().authorize(ResourcePermission.Resource.CLUSTER,
-            ResourcePermission.Operation.WRITE, ResourcePermission.Target.DISK);
+        getSecurityService().authorize(Resource.CLUSTER, Operation.WRITE, Target.DISK);
+  @CliCommand(value = CliStrings.ALTER_REGION, help = CliStrings.ALTER_REGION__HELP)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION)
+  public Result alterRegion(
+      @CliOption(key = CliStrings.ALTER_REGION__REGION, mandatory = true,
+          help = CliStrings.ALTER_REGION__REGION__HELP) String regionPath,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
+          optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.ALTER_REGION__GROUP__HELP) String[] groups,
+      @CliOption(key = CliStrings.ALTER_REGION__ENTRYEXPIRATIONIDLETIME,
+          specifiedDefaultValue = "-1",
+          help = CliStrings.ALTER_REGION__ENTRYEXPIRATIONIDLETIME__HELP) Integer entryExpirationIdleTime,
+      @CliOption(key = CliStrings.ALTER_REGION__ENTRYEXPIRATIONIDLETIMEACTION,
+          specifiedDefaultValue = "INVALIDATE",
+          help = CliStrings.ALTER_REGION__ENTRYEXPIRATIONIDLETIMEACTION__HELP) String entryExpirationIdleTimeAction,
+      @CliOption(key = CliStrings.ALTER_REGION__ENTRYEXPIRATIONTIMETOLIVE,
+          specifiedDefaultValue = "-1",
+          help = CliStrings.ALTER_REGION__ENTRYEXPIRATIONTIMETOLIVE__HELP) Integer entryExpirationTTL,
+      @CliOption(key = CliStrings.ALTER_REGION__ENTRYEXPIRATIONTTLACTION,
+          specifiedDefaultValue = "INVALIDATE",
+          help = CliStrings.ALTER_REGION__ENTRYEXPIRATIONTTLACTION__HELP) String entryExpirationTTLAction,
+      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONIDLETIME,
+          specifiedDefaultValue = "-1",
+          help = CliStrings.ALTER_REGION__REGIONEXPIRATIONIDLETIME__HELP) Integer regionExpirationIdleTime,
+      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONIDLETIMEACTION,
+          specifiedDefaultValue = "INVALIDATE",
+          help = CliStrings.ALTER_REGION__REGIONEXPIRATIONIDLETIMEACTION__HELP) String regionExpirationIdleTimeAction,
+      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTL, specifiedDefaultValue = "-1",
+          help = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTL__HELP) Integer regionExpirationTTL,
+      @CliOption(key = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTLACTION,
+          specifiedDefaultValue = "INVALIDATE",
+          help = CliStrings.ALTER_REGION__REGIONEXPIRATIONTTLACTION__HELP) String regionExpirationTTLAction,
+      @CliOption(key = CliStrings.ALTER_REGION__CACHELISTENER, specifiedDefaultValue = "",
+          help = CliStrings.ALTER_REGION__CACHELISTENER__HELP) String[] cacheListeners,
+      @CliOption(key = CliStrings.ALTER_REGION__CACHELOADER, specifiedDefaultValue = "",
+          help = CliStrings.ALTER_REGION__CACHELOADER__HELP) String cacheLoader,
+      @CliOption(key = CliStrings.ALTER_REGION__CACHEWRITER, specifiedDefaultValue = "",
+          help = CliStrings.ALTER_REGION__CACHEWRITER__HELP) String cacheWriter,
+      @CliOption(key = CliStrings.ALTER_REGION__ASYNCEVENTQUEUEID, specifiedDefaultValue = "",
+          help = CliStrings.ALTER_REGION__ASYNCEVENTQUEUEID__HELP) String[] asyncEventQueueIds,
+      @CliOption(key = CliStrings.ALTER_REGION__GATEWAYSENDERID, specifiedDefaultValue = "",
+          help = CliStrings.ALTER_REGION__GATEWAYSENDERID__HELP) String[] gatewaySenderIds,
+      @CliOption(key = CliStrings.ALTER_REGION__CLONINGENABLED, specifiedDefaultValue = "false",
+          help = CliStrings.ALTER_REGION__CLONINGENABLED__HELP) Boolean cloningEnabled,
+      @CliOption(key = CliStrings.ALTER_REGION__EVICTIONMAX, specifiedDefaultValue = "0",
+          help = CliStrings.ALTER_REGION__EVICTIONMAX__HELP) Integer evictionMax) {
+    Result result;
+    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
+
+    getSecurityService().authorizeRegionManage(regionPath);
+
+    try {
+      InternalCache cache = getCache();
+
+      if (groups != null) {
+        validateGroups(cache, groups);
+      }
+
+      RegionFunctionArgs.ExpirationAttrs entryIdle = null;
+      if (entryExpirationIdleTime != null || entryExpirationIdleTimeAction != null) {
+        if (entryExpirationIdleTime != null && entryExpirationIdleTime == -1) {
+          entryExpirationIdleTime = ExpirationAttributes.DEFAULT.getTimeout();
+        }
+        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(entryExpirationIdleTimeAction)) {
+          entryExpirationIdleTimeAction = ExpirationAttributes.DEFAULT.getAction().toString();
+        }
+        entryIdle = new RegionFunctionArgs.ExpirationAttrs(
+            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_IDLE, entryExpirationIdleTime,
+            entryExpirationIdleTimeAction);
+      }
+      RegionFunctionArgs.ExpirationAttrs entryTTL = null;
+      if (entryExpirationTTL != null || entryExpirationTTLAction != null) {
+        if (entryExpirationTTL != null && entryExpirationTTL == -1) {
+          entryExpirationTTL = ExpirationAttributes.DEFAULT.getTimeout();
+        }
+        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(entryExpirationTTLAction)) {
+          entryExpirationTTLAction = ExpirationAttributes.DEFAULT.getAction().toString();
+        }
+        entryTTL = new RegionFunctionArgs.ExpirationAttrs(
+            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_TTL, entryExpirationTTL,
+            entryExpirationTTLAction);
+      }
+      RegionFunctionArgs.ExpirationAttrs regionIdle = null;
+      if (regionExpirationIdleTime != null || regionExpirationIdleTimeAction != null) {
+        if (regionExpirationIdleTime != null && regionExpirationIdleTime == -1) {
+          regionExpirationIdleTime = ExpirationAttributes.DEFAULT.getTimeout();
+        }
+        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(regionExpirationIdleTimeAction)) {
+          regionExpirationIdleTimeAction = ExpirationAttributes.DEFAULT.getAction().toString();
+        }
+        regionIdle = new RegionFunctionArgs.ExpirationAttrs(
+            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_IDLE, regionExpirationIdleTime,
+            regionExpirationIdleTimeAction);
+      }
+      RegionFunctionArgs.ExpirationAttrs regionTTL = null;
+      if (regionExpirationTTL != null || regionExpirationTTLAction != null) {
+        if (regionExpirationTTL != null && regionExpirationTTL == -1) {
+          regionExpirationTTL = ExpirationAttributes.DEFAULT.getTimeout();
+        }
+        if (CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(regionExpirationTTLAction)) {
+          regionExpirationTTLAction = ExpirationAttributes.DEFAULT.getAction().toString();
+        }
+        regionTTL = new RegionFunctionArgs.ExpirationAttrs(
+            RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_TTL, regionExpirationTTL,
+            regionExpirationTTLAction);
+      }
+
+      cacheLoader = convertDefaultValue(cacheLoader, StringUtils.EMPTY);
+      cacheWriter = convertDefaultValue(cacheWriter, StringUtils.EMPTY);
+
+      RegionFunctionArgs regionFunctionArgs;
+      regionFunctionArgs = new RegionFunctionArgs(regionPath, null, null, false, null, null, null,
+          entryIdle, entryTTL, regionIdle, regionTTL, null, null, null, null, cacheListeners,
+          cacheLoader, cacheWriter, asyncEventQueueIds, gatewaySenderIds, null, cloningEnabled,
+          null, null, null, null, null, null, null, null, evictionMax, null, null, null, null);
+
+      Set<String> cacheListenersSet = regionFunctionArgs.getCacheListeners();
+      if (cacheListenersSet != null && !cacheListenersSet.isEmpty()) {
+        for (String cacheListener : cacheListenersSet) {
+          if (!isClassNameValid(cacheListener)) {
+            throw new IllegalArgumentException(CliStrings.format(
+                CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELISTENER_0_IS_INVALID,
+                new Object[] {cacheListener}));
+          }
+        }
+      }
+
+      if (cacheLoader != null && !isClassNameValid(cacheLoader)) {
+        throw new IllegalArgumentException(CliStrings.format(
+            CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELOADER_0_IS_INVALID,
+            new Object[] {cacheLoader}));
+      }
+
+      if (cacheWriter != null && !isClassNameValid(cacheWriter)) {
+        throw new IllegalArgumentException(CliStrings.format(
+            CliStrings.ALTER_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHEWRITER_0_IS_INVALID,
+            new Object[] {cacheWriter}));
+      }
+
+      if (evictionMax != null && evictionMax < 0) {
+        throw new IllegalArgumentException(CliStrings.format(
+            CliStrings.ALTER_REGION__MSG__SPECIFY_POSITIVE_INT_FOR_EVICTIONMAX_0_IS_NOT_VALID,
+            new Object[] {evictionMax}));
+      }
+
+      Set<DistributedMember> targetMembers = CliUtil.findMembers(groups, null);
+
+      if (targetMembers.isEmpty()) {
+        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+      }
+
+      ResultCollector<?, ?> resultCollector =
+          CliUtil.executeFunction(new RegionAlterFunction(), regionFunctionArgs, targetMembers);
+      List<CliFunctionResult> regionAlterResults =
+          (List<CliFunctionResult>) resultCollector.getResult();
+
+      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
+      final String errorPrefix = "ERROR: ";
+      for (CliFunctionResult regionAlterResult : regionAlterResults) {
+        boolean success = regionAlterResult.isSuccessful();
+        tabularResultData.accumulate("Member", regionAlterResult.getMemberIdOrName());
+        if (success) {
+          tabularResultData.accumulate("Status", regionAlterResult.getMessage());
+          xmlEntity.set(regionAlterResult.getXmlEntity());
+        } else {
+          tabularResultData.accumulate("Status", errorPrefix + regionAlterResult.getMessage());
+          tabularResultData.setStatus(Status.ERROR);
+        }
+      }
+      result = ResultBuilder.buildResult(tabularResultData);
+    } catch (IllegalArgumentException | IllegalStateException e) {
+      LogWrapper.getInstance().info(e.getMessage());
+      result = ResultBuilder.createUserErrorResult(e.getMessage());
+    } catch (RuntimeException e) {
+      LogWrapper.getInstance().info(e.getMessage(), e);
+      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+    }
+
+    if (xmlEntity.get() != null) {
+      persistClusterConfiguration(result,
+          () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), groups));
+    }
+    return result;
+  }
+
+  private static boolean regionExists(InternalCache cache, String regionPath) {
+    boolean regionFound = false;
+    if (regionPath != null && !Region.SEPARATOR.equals(regionPath)) {
+      ManagementService managementService = ManagementService.getExistingManagementService(cache);
+      DistributedSystemMXBean dsMBean = managementService.getDistributedSystemMXBean();
+
+      String[] allRegionPaths = dsMBean.listAllRegionPaths();
+      for (String allRegionPath : allRegionPaths) {
+        if (allRegionPath.equals(regionPath)) {
+          regionFound = true;
+          break;
+        }
+      }
+    }
+    return regionFound;
+  }
+
+  private void validateRegionPathAndParent(InternalCache cache, String regionPath) {
+    if (StringUtils.isEmpty(regionPath)) {
+      throw new IllegalArgumentException(CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH);
+    }
+    // If a region path indicates a sub-region, check whether the parent region exists
+    RegionPath regionPathData = new RegionPath(regionPath);
+    String parentRegionPath = regionPathData.getParent();
+    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
+      if (!regionExists(cache, parentRegionPath)) {
+        throw new IllegalArgumentException(
+            CliStrings.format(CliStrings.CREATE_REGION__MSG__PARENT_REGION_FOR_0_DOES_NOT_EXIST,
+                new Object[] {regionPath}));
+      }
+    }
+  }
+
+  private void validateGroups(InternalCache cache, String[] groups) {
+    if (groups != null && groups.length != 0) {
+      Set<String> existingGroups = new HashSet<>();
+      Set<DistributedMember> members = CliUtil.getAllNormalMembers(cache);
+      for (DistributedMember distributedMember : members) {
+        List<String> memberGroups = distributedMember.getGroups();
+        existingGroups.addAll(memberGroups);
+      }
+      List<String> groupsList = new ArrayList<>(Arrays.asList(groups));
+      groupsList.removeAll(existingGroups);
+
+      if (!groupsList.isEmpty()) {
+        throw new IllegalArgumentException(
+            CliStrings.format(CliStrings.CREATE_REGION__MSG__GROUPS_0_ARE_INVALID,
+                new Object[] {String.valueOf(groupsList)}));
+      }
+    }
+  }
+
+  DistributedSystemMXBean getDSMBean(InternalCache cache) {
+    ManagementService managementService = ManagementService.getExistingManagementService(cache);
+    return managementService.getDistributedSystemMXBean();
+  }
+
-    if (keyConstraint != null && !RegionCommandsUtils.isClassNameValid(keyConstraint)) {
+    if (keyConstraint != null && !isClassNameValid(keyConstraint)) {
-    if (valueConstraint != null && !RegionCommandsUtils.isClassNameValid(valueConstraint)) {
+    if (valueConstraint != null && !isClassNameValid(valueConstraint)) {
-        if (!RegionCommandsUtils.isClassNameValid(cacheListener)) {
+        if (!isClassNameValid(cacheListener)) {
-    if (cacheLoader != null && !RegionCommandsUtils.isClassNameValid(cacheLoader)) {
+    if (cacheLoader != null && !isClassNameValid(cacheLoader)) {
-    if (cacheWriter != null && !RegionCommandsUtils.isClassNameValid(cacheWriter)) {
+    if (cacheWriter != null && !isClassNameValid(cacheWriter)) {
-    Set<Map.Entry<String, String[]>> entrySet = diskstore.entrySet();
+    Set<Entry<String, String[]>> entrySet = diskstore.entrySet();
-    for (Map.Entry<String, String[]> entry : entrySet) {
+    for (Entry<String, String[]> entry : entrySet) {
-  private void validateRegionPathAndParent(InternalCache cache, String regionPath) {
-    if (StringUtils.isEmpty(regionPath)) {
-      throw new IllegalArgumentException(CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH);
-    }
-    // If a region path indicates a sub-region, check whether the parent region exists
-    RegionPath regionPathData = new RegionPath(regionPath);
-    String parentRegionPath = regionPathData.getParent();
-    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
-      if (!regionExists(cache, parentRegionPath)) {
-        throw new IllegalArgumentException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__PARENT_REGION_FOR_0_DOES_NOT_EXIST,
-                new Object[] {regionPath}));
-      }
-    }
-  }
-
-  private static <K, V> FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult<K, V> getRegionAttributes(
+  private static <K, V> FetchRegionAttributesFunctionResult<K, V> getRegionAttributes(
-    FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult<K, V> attributes = null;
+    FetchRegionAttributesFunctionResult<K, V> attributes = null;
-              FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult<K, V> regAttr =
-                  ((FetchRegionAttributesFunction.FetchRegionAttributesFunctionResult<K, V>) object);
+              FetchRegionAttributesFunctionResult<K, V> regAttr =
+                  ((FetchRegionAttributesFunctionResult<K, V>) object);
+  private boolean isClassNameValid(String fqcn) {
+    if (fqcn.isEmpty()) {
+      return true;
+    }
+
+    String regex = "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*";
+    return Pattern.matches(regex, fqcn);
+  }
+
+  @CliCommand(value = {CliStrings.DESTROY_REGION}, help = CliStrings.DESTROY_REGION__HELP)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION)
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  public Result destroyRegion(
+      @CliOption(key = CliStrings.DESTROY_REGION__REGION, optionContext = ConverterHint.REGION_PATH,
+          mandatory = true, help = CliStrings.DESTROY_REGION__REGION__HELP) String regionPath) {
+
+    if (regionPath == null) {
+      return ResultBuilder
+          .createInfoResult(CliStrings.DESTROY_REGION__MSG__SPECIFY_REGIONPATH_TO_DESTROY);
+    }
+
+    if (StringUtils.isBlank(regionPath) || regionPath.equals(Region.SEPARATOR)) {
+      return ResultBuilder.createInfoResult(CliStrings.format(
+          CliStrings.DESTROY_REGION__MSG__REGIONPATH_0_NOT_VALID, new Object[] {regionPath}));
+    }
+
+    Result result;
+    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
+    try {
+      InternalCache cache = getCache();
+      ManagementService managementService = ManagementService.getExistingManagementService(cache);
+      String regionPathToUse = regionPath;
+
+      if (!regionPathToUse.startsWith(Region.SEPARATOR)) {
+        regionPathToUse = Region.SEPARATOR + regionPathToUse;
+      }
+
+      Set<DistributedMember> regionMembersList =
+          findMembersForRegion(cache, managementService, regionPathToUse);
+
+      if (regionMembersList.size() == 0) {
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.DESTROY_REGION__MSG__COULD_NOT_FIND_REGIONPATH_0_IN_GEODE,
+                regionPath, "jmx-manager-update-rate milliseconds"));
+      }
+
+      CliFunctionResult destroyRegionResult;
+
+      ResultCollector<?, ?> resultCollector =
+          CliUtil.executeFunction(RegionDestroyFunction.INSTANCE, regionPath, regionMembersList);
+      List<CliFunctionResult> resultsList = (List<CliFunctionResult>) resultCollector.getResult();
+      String message =
+          CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED, regionPath, "");
+
+      // Only if there is an error is this set to false
+      boolean isRegionDestroyed = true;
+      for (CliFunctionResult aResultsList : resultsList) {
+        destroyRegionResult = aResultsList;
+        if (destroyRegionResult.isSuccessful()) {
+          xmlEntity.set(destroyRegionResult.getXmlEntity());
+        } else if (destroyRegionResult.getThrowable() != null) {
+          Throwable t = destroyRegionResult.getThrowable();
+          LogWrapper.getInstance().info(t.getMessage(), t);
+          message = CliStrings.format(
+              CliStrings.DESTROY_REGION__MSG__ERROR_OCCURRED_WHILE_DESTROYING_0_REASON_1,
+              regionPath, t.getMessage());
+          isRegionDestroyed = false;
+        } else {
+          message = CliStrings.format(
+              CliStrings.DESTROY_REGION__MSG__UNKNOWN_RESULT_WHILE_DESTROYING_REGION_0_REASON_1,
+              regionPath, destroyRegionResult.getMessage());
+          isRegionDestroyed = false;
+        }
+      }
+      if (isRegionDestroyed) {
+        result = ResultBuilder.createInfoResult(message);
+      } else {
+        result = ResultBuilder.createUserErrorResult(message);
+      }
+    } catch (IllegalStateException e) {
+      result = ResultBuilder.createUserErrorResult(CliStrings.format(
+          CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1, regionPath,
+          e.getMessage()));
+    } catch (Exception e) {
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1, regionPath,
+          e.getMessage()));
+    }
+
+    if (xmlEntity.get() != null) {
+      persistClusterConfiguration(result,
+          () -> getSharedConfiguration().deleteXmlEntity(xmlEntity.get(), null));
+    }
+
+    return result;
+  }
+
+  private Set<DistributedMember> findMembersForRegion(InternalCache cache,
+      ManagementService managementService, String regionPath) {
+    Set<DistributedMember> membersList = new HashSet<>();
+    Set<String> regionMemberIds = new HashSet<>();
+    MBeanServer mbeanServer = MBeanJMXAdapter.mbeanServer;
+
+    // needs to be escaped with quotes if it contains a hyphen
+    if (regionPath.contains("-")) {
+      regionPath = "\"" + regionPath + "\"";
+    }
+
+    String queryExp =
+        MessageFormat.format(MBeanJMXAdapter.OBJECTNAME__REGION_MXBEAN, regionPath, "*");
+
+    try {
+      ObjectName queryExpON = new ObjectName(queryExp);
+      Set<ObjectName> queryNames = mbeanServer.queryNames(null, queryExpON);
+      if (queryNames == null || queryNames.isEmpty()) {
+        return membersList; // protects against null pointer exception below
+      }
+
+      boolean addedOneRemote = false;
+      for (ObjectName regionMBeanObjectName : queryNames) {
+        try {
+          RegionMXBean regionMXBean =
+              managementService.getMBeanInstance(regionMBeanObjectName, RegionMXBean.class);
+          if (regionMXBean != null) {
+            RegionAttributesData regionAttributes = regionMXBean.listRegionAttributes();
+            String scope = regionAttributes.getScope();
+            // For Scope.LOCAL regions we need to identify each hosting member, but for
+            // other scopes we just need a single member as the region destroy will be
+            // propagated.
+            if (Scope.LOCAL.equals(Scope.fromString(scope))) {
+              regionMemberIds.add(regionMXBean.getMember());
+            } else {
+              if (!addedOneRemote) {
+                regionMemberIds.add(regionMXBean.getMember());
+                addedOneRemote = true;
+              }
+            }
+          }
+        } catch (ClassCastException e) {
+          LogWriter logger = cache.getLogger();
+          if (logger.finerEnabled()) {
+            logger.finer(regionMBeanObjectName + " is not a " + RegionMXBean.class.getSimpleName(),
+                e);
+          }
+        }
+      }
+
+      if (!regionMemberIds.isEmpty()) {
+        membersList = getMembersByIds(cache, regionMemberIds);
+      }
+    } catch (MalformedObjectNameException | NullPointerException e) {
+      LogWrapper.getInstance().info(e.getMessage(), e);
+    }
+
+    return membersList;
+  }
+
+  private Set<DistributedMember> getMembersByIds(InternalCache cache, Set<String> memberIds) {
+    Set<DistributedMember> foundMembers = Collections.emptySet();
+    if (memberIds != null && !memberIds.isEmpty()) {
+      foundMembers = new HashSet<>();
+      Set<DistributedMember> allNormalMembers = CliUtil.getAllNormalMembers(cache);
+
+      for (String memberId : memberIds) {
+        for (DistributedMember distributedMember : allNormalMembers) {
+          if (memberId.equals(distributedMember.getId())
+              || memberId.equals(distributedMember.getName())) {
+            foundMembers.add(distributedMember);
+          }
+        }
+      }
+    }
+    return foundMembers;
+  }
+
-
-  public static boolean regionExists(InternalCache cache, String regionPath) {
-    if (regionPath == null || Region.SEPARATOR.equals(regionPath)) {
-      return false;
-    }
-
-    ManagementService managementService = ManagementService.getExistingManagementService(cache);
-    DistributedSystemMXBean dsMBean = managementService.getDistributedSystemMXBean();
-
-    String[] allRegionPaths = dsMBean.listAllRegionPaths();
-    return Arrays.stream(allRegionPaths).anyMatch(regionPath::equals);
-  }
-
-  public DistributedSystemMXBean getDSMBean(InternalCache cache) {
-    ManagementService managementService = ManagementService.getExistingManagementService(cache);
-    return managementService.getDistributedSystemMXBean();
-  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS29 UPD42 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS29 INS77 INS77 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 UPD83 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD74 MOV74 INS83 INS39 INS42 INS44 INS8 INS77 INS77 INS77 INS83 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS66 INS65 INS42 INS80 INS80 INS42 INS80 INS42 INS77 INS43 INS42 INS77 INS5 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS5 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS77 INS5 INS42 INS77 INS5 INS42 INS77 INS43 INS42 INS77 INS43 INS42 INS60 INS60 INS21 INS54 INS25 INS41 INS60 INS25 INS41 INS43 INS42 INS5 INS42 INS25 UPD43 INS43 INS42 INS25 INS60 INS41 INS42 INS80 INS80 INS42 INS80 INS42 INS80 INS80 INS42 INS77 INS43 INS42 INS25 INS25 INS60 INS60 INS54 INS25 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS60 INS54 INS41 INS43 INS43 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS66 INS66 UPD40 UPD40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS43 INS85 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS43 INS85 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS43 INS85 INS42 INS80 INS80 INS80 INS43 INS85 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS12 INS12 INS27 INS8 INS42 INS39 INS59 UPD27 MOV27 MOV8 INS42 INS42 INS43 INS85 INS27 INS8 UPD74 INS42 UPD74 MOV74 INS42 INS32 INS8 INS43 INS59 INS32 INS42 INS4 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS80 INS80 INS80 INS80 INS42 MOV27 INS8 INS27 INS8 INS43 INS59 INS74 INS59 INS8 INS12 INS12 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS27 INS8 INS42 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS4 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS42 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS21 INS21 INS60 INS21 INS60 INS25 INS25 INS25 INS25 INS60 INS25 INS60 INS60 INS60 INS60 INS70 INS21 INS44 INS8 INS44 INS8 INS32 INS33 INS21 INS42 INS9 INS27 INS38 INS70 INS42 INS27 INS27 INS60 INS60 INS70 INS60 INS21 INS25 INS27 INS27 INS43 UPD74 MOV74 UPD74 MOV74 UPD43 INS42 INS42 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS41 INS32 INS32 INS41 INS42 INS42 INS43 INS43 INS42 INS14 INS60 INS60 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS70 INS25 INS44 INS8 INS44 INS8 INS32 INS33 INS21 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS60 INS60 INS25 INS60 INS70 INS25 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS60 INS70 INS40 INS40 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS7 INS7 INS43 INS59 INS7 INS74 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS74 INS59 INS32 INS8 INS74 INS59 INS74 INS59 INS43 INS59 INS83 INS43 INS59 INS44 INS42 INS8 INS7 INS84 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS33 MOV32 INS44 INS42 INS8 INS42 INS33 INS40 INS34 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS32 INS38 INS8 INS42 INS33 INS42 INS33 INS42 UPD43 INS43 UPD43 INS43 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS74 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS74 INS59 INS27 INS8 INS43 INS59 INS74 INS59 INS74 INS59 INS43 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS8 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS74 INS7 INS42 INS42 INS40 INS42 INS45 INS43 INS59 INS74 INS59 INS27 INS8 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS84 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS74 INS59 INS44 INS42 INS8 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS40 INS42 INS33 INS27 INS27 INS25 INS25 INS21 INS40 INS42 INS33 INS27 INS27 INS25 INS25 INS21 INS40 INS42 INS33 INS27 INS27 INS25 INS25 INS21 INS40 INS42 INS33 INS27 INS27 INS25 INS25 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS27 INS38 INS70 MOV27 INS38 INS53 MOV27 INS38 INS53 INS27 INS27 INS53 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS43 INS76 INS76 INS42 INS32 INS43 INS43 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS42 INS60 INS21 INS25 INS42 INS32 INS43 INS43 INS32 INS7 INS42 INS32 INS7 INS42 INS42 INS86 INS43 INS42 INS25 MOV43 MOV43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS42 INS42 INS43 INS76 INS76 INS42 INS32 INS43 INS43 INS42 INS11 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS21 INS25 INS21 INS21 INS42 INS7 INS42 INS7 INS42 INS42 INS86 INS43 INS43 INS42 INS27 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS43 INS42 INS54 INS32 INS21 INS43 INS43 INS32 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS70 UPD74 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS27 INS8 INS32 INS8 INS7 INS42 INS33 INS42 INS33 INS27 INS8 INS32 INS8 INS7 INS42 INS33 INS42 INS33 INS27 INS8 INS32 INS8 INS7 INS42 INS33 INS42 INS33 INS27 INS8 INS32 INS8 INS7 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS33 INS33 INS9 INS33 INS33 INS33 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS33 INS42 INS33 INS33 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS44 INS42 INS8 INS32 INS14 INS32 INS14 INS42 INS33 INS42 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS39 INS59 INS32 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS8 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS14 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS40 INS42 INS45 INS42 INS7 INS32 INS8 INS25 INS7 INS7 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 UPD43 UPD40 UPD40 UPD40 INS42 INS42 INS42 INS27 INS27 INS21 INS40 INS42 INS42 INS21 INS42 INS14 INS27 INS27 INS21 INS40 INS42 INS42 INS21 INS42 INS14 INS27 INS27 INS21 INS40 INS42 INS42 INS21 INS42 INS14 INS27 INS27 INS21 INS40 INS42 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS40 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS21 INS10 INS43 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS32 INS5 INS4 INS42 INS27 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS27 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS33 INS42 INS60 INS25 INS44 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS25 INS42 INS42 INS33 INS42 INS38 INS7 INS7 INS43 INS40 INS42 INS42 INS42 INS33 INS42 INS38 INS7 INS7 INS43 INS40 INS42 INS42 INS42 INS33 INS42 INS38 INS7 INS7 INS43 INS40 INS42 INS42 INS42 INS33 INS42 INS38 INS7 INS7 INS43 INS40 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS3 INS43 INS85 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS32 INS33 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS34 INS42 INS32 INS42 INS32 INS40 INS34 INS42 INS32 INS42 INS32 INS40 INS34 INS42 INS32 INS42 INS32 INS40 INS34 INS42 INS32 INS42 INS32 INS40 INS32 INS53 INS5 INS4 INS5 INS4 INS5 INS4 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS42 INS42 INS40 INS42 INS9 INS5 INS4 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS25 INS42 INS43 INS59 INS32 INS8 INS32 INS32 INS21 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS14 INS43 INS85 INS42 INS43 INS85 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS9 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS57 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS21 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS8 INS42 INS42 INS27 INS42 INS5 INS4 UPD74 MOV74 INS42 INS42 INS32 INS42 INS21 INS21 INS42 INS45 INS32 INS43 INS85 INS42 UPD43 INS42 INS42 INS32 INS7 INS57 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 UPD74 MOV74 INS42 INS42 INS42 UPD43 INS42 DEL42 DEL40 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL90 DEL32 DEL41 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40