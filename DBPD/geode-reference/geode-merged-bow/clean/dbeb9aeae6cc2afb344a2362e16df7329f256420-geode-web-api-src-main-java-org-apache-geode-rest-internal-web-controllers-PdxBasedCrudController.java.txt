Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import com.wordnik.swagger.annotations.Api;
-import com.wordnik.swagger.annotations.ApiOperation;
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
+import org.springframework.security.access.prepost.PreAuthorize;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
- * The PdxBasedCrudController class serving REST Requests related to the REST CRUD operation on region
+ * The PdxBasedCrudController class serving REST Requests related to the REST CRUD operation on
+ * region
+ * 
-@Api(value = "region",
-     description = "region CRUD operations")
+@Api(value = "region", description = "region CRUD operations")
-  
+
-  
-  protected static final String DEFAULT_GETALL_RESULT_LIMIT = "50";  
-  
+
+  protected static final String DEFAULT_GETALL_RESULT_LIMIT = "50";
+
+   * 
-  
+
-                  consumes = MediaType.APPLICATION_JSON_VALUE,
-                  produces = { MediaType.APPLICATION_JSON_VALUE })
-  @ApiOperation(
-    value = "create entry",
-    notes = "Create (put-if-absent) data in region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 201, message = "Created."),
-    @ApiResponse( code = 400, message = "Data specified (JSON doc) in the request body is invalid." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 409, message = "Key already exist in region."),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")   
-  } )
+      consumes = MediaType.APPLICATION_JSON_VALUE, produces = {MediaType.APPLICATION_JSON_VALUE})
+  @ApiOperation(value = "create entry", notes = "Create (put-if-absent) data in region",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 201, message = "Created."),
+      @ApiResponse(code = 400,
+          message = "Data specified (JSON doc) in the request body is invalid."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 409, message = "Key already exist in region."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE', #region)")
-      @RequestParam(value = "key", required = false) String key,
-      @RequestBody final String json) {
-    securityService.authorizeRegionWrite(region);
+      @RequestParam(value = "key", required = false) String key, @RequestBody final String json) {
-    
-    if(logger.isDebugEnabled()){
-      logger.debug("Posting (creating/putIfAbsent) JSON document ({}) to Region ({}) with Key ({})...",
-          json, region, key);
-    }
+
+    logger.debug(
+        "Posting (creating/putIfAbsent) JSON document ({}) to Region ({}) with Key ({})...", json,
+        region, key);
+
-    
-    //Check whether the user has supplied single JSON doc or Array of JSON docs  
+
+    // Check whether the user has supplied single JSON doc or Array of JSON docs
-    if(JSONTypes.JSON_ARRAY.equals(jsonType)){
+    if (JSONTypes.JSON_ARRAY.equals(jsonType)) {
-    }else {
-      existingPdxObj = postValue(region, key, convert(json));  
+    } else {
+      existingPdxObj = postValue(region, key, convert(json));
-    
+
-    
+
-      final RegionEntryData<Object> data = new RegionEntryData<Object>(region);
+      final RegionEntryData<Object> data = new RegionEntryData<>(region);
-  
+
+   * 
-  @RequestMapping(method = RequestMethod.GET, value = "/{region}", produces = MediaType.APPLICATION_JSON_VALUE)
-  @ApiOperation(
-    value = "read all data for region",
-    notes = "Read all data for region. Use limit param to get fixed or limited number of entries.",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad request." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")    
-  } )
+  @RequestMapping(method = RequestMethod.GET, value = "/{region}",
+      produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+  @ApiOperation(value = "read all data for region",
+      notes = "Read all data for region. Use limit param to get fixed or limited number of entries.",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
+  @PreAuthorize("@securityService.authorize('DATA', 'READ', #region)")
-      @RequestParam(value = "limit", defaultValue = DEFAULT_GETALL_RESULT_LIMIT) final String limit) {
-    securityService.authorizeRegionRead(region);
-    if(logger.isDebugEnabled()){
-      logger.debug("Reading all data in Region ({})...", region);
-    }
+      @RequestParam(value = "limit",
+          defaultValue = DEFAULT_GETALL_RESULT_LIMIT) final String limit) {
+    logger.debug("Reading all data in Region ({})...", region);
+
-      
+
-    final RegionData<Object> data = new RegionData<Object>(region);
+    final RegionData<Object> data = new RegionData<>(region);
-    List<Object> keys = new ArrayList<Object>(regionSize);
-    List<Object> values = new ArrayList<Object>(regionSize);
-    
-    for (Map.Entry<Object, Object> entry : getValues(region).entrySet() ) {
+    List<Object> keys = new ArrayList<>(regionSize);
+    List<Object> values = new ArrayList<>(regionSize);
+
+    for (Map.Entry<Object, Object> entry : getValues(region).entrySet()) {
-    
-    if ("ALL".equalsIgnoreCase(limit) ) {  
+
+    if ("ALL".equalsIgnoreCase(limit)) {
-        if(maxLimit < 0){
-          String errorMessage = String.format("Negative limit param (%1$s) is not valid!", maxLimit);
-          return new ResponseEntity<String>(
-              convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+        if (maxLimit < 0) {
+          String errorMessage =
+              String.format("Negative limit param (%1$s) is not valid!", maxLimit);
+          return new ResponseEntity<>(convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
-        
+
-        keyList = StringUtils.collectionToDelimitedString(
-            keys.subList(0, maxLimit), ",");
+        keyList = StringUtils.collectionToDelimitedString(keys.subList(0, maxLimit), ",");
-        return new ResponseEntity<String>(
-            convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
-      }  
-    } 
-    
-    headers.set("Content-Location", toUri(region, keyList).toASCIIString() );
+        return new ResponseEntity<>(convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+      }
+    }
+
+    headers.set("Content-Location", toUri(region, keyList).toASCIIString());
-  
+
+   * 
-   * @param keys string containing comma seperated keys 
+   * @param keys string containing comma seperated keys
-                  produces = MediaType.APPLICATION_JSON_VALUE)
-  @ApiOperation(
-    value = "read data for specific keys",
-    notes = "Read data for specific set of keys in region.",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad Request."),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")  
-  } )
-  public ResponseEntity<?> read(
-      @PathVariable("region") String region,
+      produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+  @ApiOperation(value = "read data for specific keys",
+      notes = "Read data for specific set of keys in region.", response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad Request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
+  @PreAuthorize("@securityService.authorize('READ', #region, #keys)")
+  public ResponseEntity<?> read(@PathVariable("region") String region,
-      @RequestParam(value = "ignoreMissingKey", required = false ) final String ignoreMissingKey) {
+      @RequestParam(value = "ignoreMissingKey", required = false) final String ignoreMissingKey) {
+    logger.debug("Reading data for keys ({}) in Region ({})", ArrayUtils.toString(keys), region);
-    for (String key : keys)
-      securityService.authorizeRegionRead(region, key);
-    if(logger.isDebugEnabled()){
-      logger.debug("Reading data for keys ({}) in Region ({})",
-          ArrayUtils.toString(keys), region);
-    }
-    
-    
-    if (keys.length == 1) { 
+
+    if (keys.length == 1) {
-      //if region.get(K) return null (i.e INVLD or TOMBSTONE case) We consider 404, NOT Found case  
-      if(value == null) {
-        throw new ResourceNotFoundException(String.format("Key (%1$s) does not exist for region (%2$s) in cache!", keys[0], region));
+      // if region.get(K) return null (i.e INVLD or TOMBSTONE case) We consider 404, NOT Found case
+      if (value == null) {
+        throw new ResourceNotFoundException(String
+            .format("Key (%1$s) does not exist for region (%2$s) in cache!", keys[0], region));
-      
-      final RegionEntryData<Object> data = new RegionEntryData<Object>(region);
+
+      final RegionEntryData<Object> data = new RegionEntryData<>(region);
-      //fail fast for the case where ignoreMissingKey param is not specified correctly.
-      if (ignoreMissingKey != null 
-          && !(ignoreMissingKey.equalsIgnoreCase("true") || ignoreMissingKey.equalsIgnoreCase("false"))){
-        String errorMessage = String.format("ignoreMissingKey param (%1$s) is not valid. valid usage is ignoreMissingKey=true!", ignoreMissingKey);
-        return new ResponseEntity<String>(
-            convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
+      // fail fast for the case where ignoreMissingKey param is not specified correctly.
+      if (ignoreMissingKey != null && !(ignoreMissingKey.equalsIgnoreCase("true")
+          || ignoreMissingKey.equalsIgnoreCase("false"))) {
+        String errorMessage = String.format(
+            "ignoreMissingKey param (%1$s) is not valid. valid usage is ignoreMissingKey=true!",
+            ignoreMissingKey);
+        return new ResponseEntity<>(convertErrorAsJson(errorMessage), HttpStatus.BAD_REQUEST);
-      
-      if(!("true".equalsIgnoreCase(ignoreMissingKey))) { 
+
+      if (!("true".equalsIgnoreCase(ignoreMissingKey))) {
-        if(unknownKeys.size() > 0) {
+        if (unknownKeys.size() > 0) {
-          String erroString = String.format("Requested keys (%1$s) not exist in region (%2$s)", StringUtils.collectionToDelimitedString(unknownKeys, ","), region);
-          return new ResponseEntity<String>(convertErrorAsJson(erroString), headers, HttpStatus.BAD_REQUEST);
+          String erroString = String.format("Requested keys (%1$s) not exist in region (%2$s)",
+              StringUtils.collectionToDelimitedString(unknownKeys, ","), region);
+          return new ResponseEntity<>(convertErrorAsJson(erroString), headers,
+              HttpStatus.BAD_REQUEST);
-      }  
-      
+      }
+
-  
-      //currently we are not removing keys having value null from the result.
+
+      // currently we are not removing keys having value null from the result.
-      headers.set("Content-Location", toUri(region, keyList).toASCIIString() );
-      final RegionData<Object> data = new RegionData<Object>(region);
+      headers.set("Content-Location", toUri(region, keyList).toASCIIString());
+      final RegionData<Object> data = new RegionData<>(region);
+   * 
-                  consumes = { MediaType.APPLICATION_JSON_VALUE },
-                  produces = { MediaType.APPLICATION_JSON_VALUE })
-  @ApiOperation(
-    value = "update data for key",
-    notes = "Update or insert (put) data for key in region." +
-            "op=REPLACE, update (replace) data with key if and only if the key exists in region" +
-            "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad Request."),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist or if key is not mapped to some value for REPLACE or CAS."),
-    @ApiResponse( code = 409, message = "For CAS, @old value does not match to the current value in region" ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")
-  } )
+      consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE})
+  @ApiOperation(value = "update data for key",
+      notes = "Update or insert (put) data for key in region."
+          + "op=REPLACE, update (replace) data with key if and only if the key exists in region"
+          + "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",
+      response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad Request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404,
+          message = "Region does not exist or if key is not mapped to some value for REPLACE or CAS."),
+      @ApiResponse(code = 409,
+          message = "For CAS, @old value does not match to the current value in region"),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
+  @PreAuthorize("@securityService.authorize('WRITE', #region, #keys)")
-    for (String key : keys)
-      securityService.authorizeRegionWrite(region, key);
-    if(logger.isDebugEnabled()){
-      logger.debug("updating key(s) for region ({}) ", region);
-    }
+    logger.debug("updating key(s) for region ({}) ", region);
+
-    
-    if(keys.length > 1){
-      //putAll case
+
+    if (keys.length > 1) {
+      // putAll case
-      //put case
+      // put case
-    
-  @RequestMapping(method = RequestMethod.HEAD, value = "/{region}", produces = MediaType.APPLICATION_JSON_VALUE)
-  @ApiOperation(
-    value = "Get total number of entries",
-    notes = "Get total number of entries into the specified region",
-    response  = void.class
-  )
-  @ApiResponses( {
-    @ApiResponse( code = 200, message = "OK."),
-    @ApiResponse( code = 400, message = "Bad request." ),
-    @ApiResponse( code = 401, message = "Invalid Username or Password." ),
-    @ApiResponse( code = 403, message = "Insufficient privileges for operation." ),
-    @ApiResponse( code = 404, message = "Region does not exist." ),
-    @ApiResponse( code = 500, message = "GemFire throws an error or exception.")    
-  } )
+
+  @RequestMapping(method = RequestMethod.HEAD, value = "/{region}",
+      produces = MediaType.APPLICATION_JSON_VALUE)
+  @ApiOperation(value = "Get total number of entries",
+      notes = "Get total number of entries into the specified region", response = void.class)
+  @ApiResponses({@ApiResponse(code = 200, message = "OK."),
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 401, message = "Invalid Username or Password."),
+      @ApiResponse(code = 403, message = "Insufficient privileges for operation."),
+      @ApiResponse(code = 404, message = "Region does not exist."),
+      @ApiResponse(code = 500, message = "GemFire throws an error or exception.")})
+  @PreAuthorize("@securityService.authorize('DATA', 'READ', #region)")
-    securityService.authorizeRegionRead(region);
-    if(logger.isDebugEnabled()){
-      logger.debug("Determining the number of entries in Region ({})...", region);
-    }
+    logger.debug("Determining the number of entries in Region ({})...", region);
+
-      
+
-    
-    headers.set("Resource-Count", String.valueOf(getRegion(region).size()) );
+
+    headers.set("Resource-Count", String.valueOf(getRegion(region).size()));
-  
+

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS79 INS79 MOV60 INS79 INS79 INS79 UPD66 INS66 INS42 INS45 MOV21 INS42 INS45 MOV21 INS42 INS45 MOV21 INS42 INS45 MOV21 INS42 INS45 MOV21 UPD40 UPD66 UPD40 UPD42 UPD42 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 INS74 UPD74 MOV43 UPD74 UPD74 MOV74 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL70 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL70 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25