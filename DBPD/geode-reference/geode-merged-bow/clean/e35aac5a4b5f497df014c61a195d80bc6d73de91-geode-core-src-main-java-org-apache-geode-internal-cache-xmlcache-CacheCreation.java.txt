Merge branch 'release/1.5.0'

+import org.apache.geode.cache.CacheXmlException;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.backup.BackupService;
+  private final List<DeclarableAndProperties> declarablePropertiesList = new ArrayList<>();
+
+  private static class DeclarableAndProperties {
+    private final Declarable declarable;
+    private final Properties properties;
+
+    public DeclarableAndProperties(Declarable d, Properties p) {
+      declarable = d;
+      properties = p;
+    }
+
+    public Declarable getDeclarable() {
+      return declarable;
+    }
+
+    public Properties getProperties() {
+      return properties;
+    }
+  }
+
+    initializeDeclarablesMap(cache);
+
+    if (hasFunctionService()) {
+      getFunctionServiceCreation().create();
+    }
+
-    cache.addDeclarableProperties(this.declarablePropertiesMap);
-    runInitializer();
+
+    runInitializer(cache);
+  public void initializeDeclarablesMap(InternalCache cache) {
+    for (DeclarableAndProperties struct : this.declarablePropertiesList) {
+      Declarable declarable = struct.getDeclarable();
+      Properties properties = struct.getProperties();
+      try {
+        declarable.initialize(cache, properties);
+        declarable.init(properties); // for backwards compatibility
+      } catch (Exception ex) {
+        throw new CacheXmlException(
+            "Exception while initializing an instance of " + declarable.getClass().getName(), ex);
+      }
+      this.declarablePropertiesMap.put(declarable, properties);
+    }
+    cache.addDeclarableProperties(this.declarablePropertiesMap);
+  }
+
+  void removeCacheServers(List<CacheServer> declarativeCacheServers, Cache cache,
+      Integer serverPort, String serverBindAdd, Boolean disableDefaultServer) {
+
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public boolean removeCacheServer(final CacheServer cacheServer) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
-    this.declarablePropertiesMap.put(declarable, properties);
+    this.declarablePropertiesList.add(new DeclarableAndProperties(declarable, properties));
-  public Set<LocalRegion> getAllRegions() {
+  public Set<InternalRegion> getAllRegions() {
-  public Set<LocalRegion> getApplicationRegions() {
+  public Set<InternalRegion> getApplicationRegions() {
+  public void removeGatewayReceiver(GatewayReceiver receiver) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public void closeDiskStores() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  private volatile boolean hasFunctionService = false;
+
+  boolean hasFunctionService() {
+    return this.hasFunctionService;
+  }
+
+    this.hasFunctionService = true;
+  public FunctionServiceCreation getFunctionServiceCreation() {
+    return this.functionServiceCreation;
+  }
+
-    return InternalDistributedSystem.getAnyInstance();
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  public BackupManager getBackupManager() {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-
-  @Override
-  public BackupManager startBackup(final InternalDistributedMember sender) throws IOException {
+  public BackupService getBackupService() {
-  void runInitializer() {
-    if (getInitializer() != null) {
-      getInitializer().init(getInitializerProps());
+  void runInitializer(InternalCache cache) {
+    Declarable initializer = getInitializer();
+    if (initializer != null) {
+      initializer.initialize(cache, getInitializerProps());
+      initializer.init(getInitializerProps()); // for backwards compatibility
-  public DM getDistributionManager() {
+  public DistributionManager getDistributionManager() {
-  public void setRegionByPath(final String path, final LocalRegion r) {
+  public void setRegionByPath(final String path, final InternalRegion r) {
-  public <K, V> RegionAttributes<K, V> invokeRegionBefore(final LocalRegion parent,
+  public <K, V> RegionAttributes<K, V> invokeRegionBefore(final InternalRegion parent,
-  public void invokeRegionAfter(final LocalRegion region) {
+  public void invokeRegionAfter(final InternalRegion region) {
-  public void invokeBeforeDestroyed(final LocalRegion region) {
+  public void invokeBeforeDestroyed(final InternalRegion region) {
-  public void invokeCleanupFailedInitialization(final LocalRegion region) {
+  public void invokeCleanupFailedInitialization(final InternalRegion region) {
-  public boolean removeRoot(final LocalRegion rootRgn) {
+  public boolean removeRoot(final InternalRegion rootRgn) {
+  public CacheClosedException getCacheClosedException(final String reason) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
-  public void clearBackupManager() {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-
-  @Override
-      InternalDistributedMember sender, LocalRegion region,
+      InternalDistributedMember sender, InternalRegion region,
+
+  @Override
+  public Object convertPdxInstanceIfNeeded(Object obj) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }

MOV26 INS26 INS26 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS40 UPD40 INS40 UPD40 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS42 INS23 INS23 MOV31 MOV31 INS31 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV8 INS39 INS42 MOV44 MOV44 INS8 UPD74 UPD42 INS78 UPD74 UPD42 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS59 INS39 INS42 INS8 INS83 INS43 INS42 INS8 MOV78 MOV43 UPD42 MOV78 INS43 INS42 INS44 MOV78 UPD43 UPD39 UPD42 MOV78 UPD42 MOV8 MOV78 UPD42 MOV78 UPD39 UPD42 MOV8 MOV78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS42 INS14 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 UPD42 INS44 INS44 INS43 UPD42 MOV83 INS43 INS42 INS8 INS21 INS25 INS43 INS42 INS70 MOV21 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS53 UPD43 UPD42 INS21 UPD43 INS42 UPD43 INS43 INS42 INS53 INS53 INS42 INS9 INS41 INS21 INS42 INS41 INS42 INS43 INS42 INS60 UPD42 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD42 INS42 INS83 INS43 INS42 INS53 UPD43 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS41 INS32 INS32 INS8 INS42 INS44 INS22 INS8 INS43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS14 UPD42 INS32 UPD42 UPD42 INS42 INS14 INS14 INS22 INS7 INS22 INS42 INS43 INS59 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS14 UPD42 INS42 INS14 INS43 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS43 INS42 INS52 INS42 INS60 INS60 INS54 MOV21 INS42 INS42 INS43 INS32 INS22 INS42 INS14 INS43 INS32 INS43 INS32 INS52 INS42 INS22 INS9 INS52 INS42 INS42 INS42 MOV32 INS42 INS21 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS40 INS42 INS52 INS42 INS43 INS42 INS42 UPD42 MOV42 INS40 INS42 INS42 INS40 INS42 INS52 INS42 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS27 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL32 DEL42 DEL43 DEL39 DEL42 DEL43 DEL42 DEL43 DEL31 DEL42 DEL32