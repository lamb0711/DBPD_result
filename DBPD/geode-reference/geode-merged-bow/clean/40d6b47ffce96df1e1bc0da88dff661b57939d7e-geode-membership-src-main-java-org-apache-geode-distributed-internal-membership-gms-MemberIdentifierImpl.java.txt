GEODE-7704: Replacing inheritance of MemberIdentifierImpl with delagation (#4636)

* Deduplicate fields betweeen MemberIdentifierImpl and GMSMemberData

Moving all state down into GMSMemberData and removing duplicate fields
isPartial and versionObject. GMSMemberData now has all of the state of a
member.

* Delegate rather than inherit InternalDistributedMember

Delegating to MemberIdentifierImpl, rather than inheriting from it.

* Delegate to MemberIdentifier, rather than MemberIdentifierImpl

Having InternalDistributedMember delegate to MemberIdentifier, rather than
MemberIdentifierImpl, so that we are not relying on the concrete class and all
required methods are part of the interface. As a result, adding a number of
additional methods to the MemberIdentifier interface.

* Removing uses of getMemberData

Removing uses of getMemberData and adding methods to MemberIdentifier that
delegate to memberData.

* Hiding MemberIdentiferImpl

Using MemberIdentifier everywhere insteand of MemberIdentiferImpl. Still need to
move MemberIdentiferImpl to an internal package.

* Making PMD happy

Marking the MemberIdentifierFactory as immutable.

* Fixing NPE in getGroups

The MemberIdentifierImpl.getGroups needs to check for a null array. Places that
used to call getMemberData.getGroups were throwing an NPE.

* Fixing a test that used MemberIdentifierFactoryImpl

This factory is not going to play well with other parts of the test that are
generating InternalDistributedMembers.

* Fixing AnalyzeSerializablesJUnitTest

InternalDistributedMember now has new serialization methods that delegate to
the methods that it previously was just inheriting.

* Fixing a unit test failure due to mocking MemberData

InternalDistributedMemberTest was mocking the underlying MemberData and
changing state on the InternalDistributedMember. Now that all state is
delegated to the MemberData, this test was failing because the mock was not
reflecting the state changes.

Co-authored-by: Ernie Burghardt <eburghardt@pivotal.io>

-package org.apache.geode.distributed.internal.membership.api;
+package org.apache.geode.distributed.internal.membership.gms;
+
+import static org.apache.geode.distributed.internal.membership.gms.GMSMemberData.COORD_ENABLED_BIT;
+import static org.apache.geode.distributed.internal.membership.gms.GMSMemberData.NPD_ENABLED_BIT;
+import static org.apache.geode.distributed.internal.membership.gms.GMSMemberData.PARTIAL_ID_BIT;
+import static org.apache.geode.distributed.internal.membership.gms.GMSMemberData.VERSION_BIT;
+import org.jgroups.util.UUID;
+import org.apache.geode.distributed.internal.membership.api.MemberData;
+import org.apache.geode.distributed.internal.membership.api.MemberDataBuilder;
+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;
-import org.apache.geode.internal.serialization.UnsupportedSerializationVersionException;
-  /** serialization bit flag */
-  private static final int NPD_ENABLED_BIT = 0x1;
-  /** serialization bit flag */
-  private static final int COORD_ENABLED_BIT = 0x2;
-  /** partial ID bit flag */
-  private static final int PARTIAL_ID_BIT = 0x4;
-  /** product version bit flag */
-  private static final int VERSION_BIT = 0x8;
-  /**
-   * whether this is a partial member ID (without roles, durable attributes). We use partial IDs in
-   * EventID objects to reduce their size. It would be better to use canonical IDs but there is
-   * currently no central mechanism that would allow that for both server and client identifiers
-   */
-  private boolean isPartial;
-  /**
-   * Unique tag (such as randomly generated bytes) to help enforce uniqueness. Note: this should be
-   * displayable.
-   */
-  private String uniqueTag = null;
-  private transient Version versionObj = Version.CURRENT;
+
-      MemberData memberData, String uniqueTag) {
+      MemberData memberData) {
-    this.isPartial = memberData.isPartial();
-    this.uniqueTag = uniqueTag;
-
-    short version = memberData.getVersionOrdinal();
-    try {
-      this.versionObj = Version.fromOrdinal(version);
-    } catch (UnsupportedSerializationVersionException e) {
-      this.versionObj = Version.CURRENT;
-    }
-    return versionObj == null ? memberData.getVersionOrdinal() : versionObj.ordinal();
+    return memberData.getVersionOrdinal();
-    assert !this.isPartial;
+    assert !this.isPartial();
-    return Collections.unmodifiableList(Arrays.asList(memberData.getGroups()));
+    String[] groups = memberData.getGroups();
+    return groups == null ? Collections.emptyList()
+        : Collections.unmodifiableList(Arrays.asList(groups));
-  protected void setGroups(String[] newGroups) {
+  public void setGroups(String[] newGroups) {
-  public int compare(MemberIdentifierImpl other) {
+  @Override
+  public void setName(String name) {
+    memberData.setName(name);
+  }
+
+  @Override
+  public String getUniqueTag() {
+    return memberData.getUniqueTag();
+  }
+
+  @Override
+  public String getDurableId() {
+    return memberData.getDurableId();
+  }
+
+  @Override
+  public int getDurableTimeout() {
+    return memberData.getDurableTimeout();
+  }
+
+  @Override
+  public void setHostName(String hostName) {
+    memberData.setHostName(hostName);
+
+  }
+
+  @Override
+  public void setProcessId(int id) {
+    memberData.setProcessId(id);
+
+  }
+
+  @Override
+  public boolean hasUUID() {
+    return memberData.hasUUID();
+  }
+
+  public int compare(MemberIdentifier other) {
-  protected int compareTo(MemberIdentifierImpl other, boolean compareMemberData,
+  @Override
+  public int compareTo(MemberIdentifier other, boolean compareMemberData,
-    if (!(other.isPartial || this.isPartial)) {
+    if (!(other.isPartial() || this.isPartial())) {
-    if (this.uniqueTag == null && other.uniqueTag == null) {
+    if (this.getUniqueTag() == null && other.getUniqueTag() == null) {
-    } else if (this.uniqueTag == null) {
+    } else if (this.getUniqueTag() == null) {
-    } else if (other.uniqueTag == null) {
+    } else if (other.getUniqueTag() == null) {
-      int i = this.uniqueTag.compareTo(other.uniqueTag);
+      int i = this.getUniqueTag().compareTo(other.getUniqueTag());
-    if (compareMemberData && this.memberData != null && other.memberData != null) {
-      return this.memberData.compareAdditionalData(other.memberData);
+    if (compareMemberData && this.memberData != null && other.getMemberData() != null) {
+      return this.memberData.compareAdditionalData(other.getMemberData());
-    return isPartial;
+    return memberData.isPartial();
-    if (this.uniqueTag == null && other.uniqueTag == null) {
+    if (this.getUniqueTag() == null && other.getUniqueTag() == null) {
-    } else if (!Objects.equals(this.uniqueTag, other.uniqueTag)) {
+    } else if (!Objects.equals(this.getUniqueTag(), other.getUniqueTag())) {
-      if (this.uniqueTag != null && this.uniqueTag.length() != 0) {
-        sb.append(":").append(this.uniqueTag);
+      if (this.getUniqueTag() != null && this.getUniqueTag().length() != 0) {
+        sb.append(":").append(this.getUniqueTag());
-      this.versionObj = Version.fromOrdinalNoThrow(version, false);
-        this.versionObj = v;
-    if (this.isPartial)
+    if (this.isPartial())
-    StaticSerialization.writeString(this.uniqueTag, out);
+    StaticSerialization.writeString(memberData.getUniqueTag(), out);
-    this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
+    boolean isPartial = (flags & PARTIAL_ID_BIT) != 0;
-    this.uniqueTag = StaticSerialization.readString(in);
+    String uniqueTag = StaticSerialization.readString(in);
+        .setIsPartial(isPartial)
+        .setUniqueTag(uniqueTag)
-      getMemberData().writeAdditionalData(out);
+      memberData.writeAdditionalData(out);
-    if (this.isPartial)
+    if (this.isPartial())
-      StaticSerialization.writeString(this.uniqueTag, out);
+      StaticSerialization.writeString(memberData.getUniqueTag(), out);
-    if (this.isPartial)
+    if (this.isPartial())
-      StaticSerialization.writeString(this.uniqueTag, out);
+      StaticSerialization.writeString(memberData.getUniqueTag(), out);
-    if (getMemberData().getVersionOrdinal() >= Version.GFE_90.ordinal()) {
+    if (memberData.getVersionOrdinal() >= Version.GFE_90.ordinal()) {
-    this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
+    boolean isPartial = (flags & PARTIAL_ID_BIT) != 0;
+    String uniqueTag = null;
-      this.uniqueTag = StaticSerialization.readString(in);
+      uniqueTag = StaticSerialization.readString(in);
+        .setIsPartial(isPartial)
+        .setUniqueTag(uniqueTag)
-    this.isPartial = (flags & PARTIAL_ID_BIT) != 0;
+    boolean isPartial = (flags & PARTIAL_ID_BIT) != 0;
+    String uniqueTag = null;
-      this.uniqueTag = StaticSerialization.readString(in);
+      uniqueTag = StaticSerialization.readString(in);
+        .setIsPartial(isPartial)
+        .setUniqueTag(uniqueTag)
-    this.isPartial = true;
+    String uniqueTag = null;
-      this.uniqueTag = StaticSerialization.readString(in);
+      uniqueTag = StaticSerialization.readString(in);
+        .setIsPartial(true)
+        .setUniqueTag(uniqueTag)
-      StaticSerialization.writeString(this.uniqueTag, out);
+      StaticSerialization.writeString(memberData.getUniqueTag(), out);
-    this.versionObj = v;
-    return this.versionObj;
+    return memberData.getVersion();
-    uniqueTag = tag;
+    memberData.setUniqueTag(tag);
-    isPartial = value;
+    memberData.setIsPartial(value);
+  @Override
+  public long getUuidLeastSignificantBits() {
+    return memberData.getUuidLeastSignificantBits();
+  }
+
+  @Override
+  public long getUuidMostSignificantBits() {
+    return memberData.getUuidMostSignificantBits();
+  }
+
+  @Override
+  public boolean isNetworkPartitionDetectionEnabled() {
+    return memberData.isNetworkPartitionDetectionEnabled();
+  }
+
+  @Override
+  public void setUUID(UUID uuid) {
+    memberData.setUUID(uuid);
+
+  }
+
+  @Override
+  public void setMemberWeight(byte b) {
+    memberData.setMemberWeight(b);
+  }
+
+  @Override
+  public void setUdpPort(int port) {
+    memberData.setUdpPort(port);
+
+  }
+
+  @Override
+  public UUID getUUID() {
+    return memberData.getUUID();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 MOV44 INS8 MOV29 INS83 INS39 INS42 INS8 MOV78 INS83 MOV74 INS42 INS8 UPD83 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 MOV83 INS39 UPD42 MOV42 MOV44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 UPD83 INS83 MOV43 INS42 INS8 MOV78 INS83 INS39 INS42 MOV44 INS8 MOV78 INS83 INS39 INS42 MOV44 INS8 INS78 UPD39 UPD42 INS78 INS39 UPD42 INS78 INS39 UPD42 INS78 UPD42 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 UPD42 INS44 INS78 INS83 INS43 INS42 INS8 MOV21 INS6 MOV41 INS60 INS41 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS42 INS39 UPD42 MOV21 INS42 INS41 UPD43 INS42 UPD43 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS41 MOV21 MOV21 INS42 INS41 INS42 INS42 INS42 INS43 INS42 INS42 INS39 INS42 INS21 INS42 INS39 INS42 INS42 INS42 INS41 MOV32 INS38 INS5 INS59 INS16 INS42 INS32 INS32 INS32 INS32 UPD42 MOV42 INS32 INS32 INS32 UPD42 UPD42 MOV32 INS32 INS39 INS59 INS43 INS59 INS32 INS32 INS39 INS59 INS43 MOV59 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 MOV43 INS85 UPD42 MOV42 MOV32 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 MOV27 INS42 INS42 MOV32 INS32 INS52 INS42 INS52 INS42 INS42 MOV27 INS42 INS32 INS42 MOV27 INS42 INS42 INS33 INS32 INS42 INS42 INS33 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS32 INS32 MOV32 INS42 INS42 UPD42 MOV42 INS32 INS32 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS9 INS42 INS42 INS52 INS42 INS32 INS32 INS32 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL23 DEL83 DEL83 DEL43 DEL42 DEL40 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL16 DEL52 DEL42 DEL22 DEL7 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL40 DEL40 DEL42 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL9 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL32 DEL7 DEL52 DEL42 DEL22 DEL40 DEL7 DEL52 DEL42 DEL22 DEL38 DEL6 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7