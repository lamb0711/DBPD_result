Merge branch 'release/1.3.0'

-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.execute.Execution;
-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionService;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.cache.execute.AbstractExecution;
-import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.management.DistributedSystemMXBean;
-import org.apache.geode.management.ManagementService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.functions.MembersForRegionFunction;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.cli.result.CommandResultException;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-
+import org.apache.commons.lang.StringUtils;
+
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.execute.Execution;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.execute.AbstractExecution;
+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
+import org.apache.geode.internal.util.IOUtils;
+import org.apache.geode.management.DistributedSystemMXBean;
+import org.apache.geode.management.ManagementService;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.cli.functions.MembersForRegionFunction;
+import org.apache.geode.management.internal.cli.i18n.CliStrings;
+import org.apache.geode.management.internal.cli.shell.Gfsh;
+
-
-  public static final String GFSHVM_IDENTIFIER = "gfsh";
-
-  public static boolean isGfshVM = Boolean.getBoolean(GFSHVM_IDENTIFIER);
-
-  public static boolean isGfshVM() {
-    return isGfshVM;
-  }
-
-    String jarProductName = null;
+    String jarProductName;
-  public static byte[][] filesToBytes(String[] fileNames)
-      throws FileNotFoundException, IOException {
-    List<byte[]> filesDataList = new ArrayList<byte[]>();
+  public static byte[][] filesToBytes(String[] fileNames) throws IOException {
+    List<byte[]> filesDataList = new ArrayList<>();
-    for (int i = 0; i < fileNames.length; i++) {
-      File file = new File(fileNames[i]);
+    for (String fileName : fileNames) {
+      File file = new File(fileName);
-        // TODO: (1) No recursive search yet. (2) Do we need to check/limit size of the files too?
-        for (int j = 0; j < childrenFiles.length; j++) {
+        for (File childrenFile : childrenFiles) {
-          filesDataList.add(childrenFiles[j].getName().getBytes());
+          filesDataList.add(childrenFile.getName().getBytes());
-          filesDataList.add(toByteArray(new FileInputStream(childrenFiles[j])));
+          filesDataList.add(toByteArray(new FileInputStream(childrenFile)));
-      throws FileNotFoundException, IOException, UnsupportedOperationException {
+      throws IOException, UnsupportedOperationException {
-  public static boolean isValidFileName(String filePath, String extension) {
-    boolean isValid = true;
-    return isValid;
-  }
-
-    Set<String> regionNames = new HashSet<String>();
+    Set<String> regionNames = new HashSet<>();
-    Iterator<Region<?, ?>> rootRegionIters = rootRegions.iterator();
-
-    while (rootRegionIters.hasNext()) {
-      Region<?, ?> rootRegion = rootRegionIters.next();
+    for (Region<?, ?> rootRegion : rootRegions) {
-      Iterator<Region<?, ?>> subRegionIters = subRegions.iterator();
-      while (subRegionIters.hasNext()) {
-        Region<?, ?> subRegion = subRegionIters.next();
+      for (Region<?, ?> subRegion : subRegions) {
-      Iterator<String> iters = stringSet.iterator();
-      while (iters.hasNext()) {
-        String stringValue = iters.next();
+      for (String stringValue : stringSet) {
-      Iterator<String> iters = stringList.iterator();
-      while (iters.hasNext()) {
-        String stringValue = iters.next();
+      for (String stringValue : stringList) {
-    Set<DistributedMember> matchingMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> matchingMembers = new HashSet<>();
-          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
-              new Object[] {classToLoadName, neededFor}),
+          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULD_NOT_FIND_CLASS_0_SPECIFIED_FOR_1,
+              classToLoadName, neededFor),
-          new Object[] {classToLoadName, neededFor}), e);
+          classToLoadName, neededFor), e);
-    K instance = null;
+    K instance;
-          CliStrings.CREATE_REGION__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
-          new Object[] {klass, neededFor}), e);
+          CliStrings.CREATE_REGION__MSG__COULD_NOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1, klass,
+          neededFor), e);
-          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
-              new Object[] {klass, neededFor}),
+          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULD_NOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
+              klass, neededFor),
-    // System.out.println(new String(result));
-  public static void main(String[] args) {
-    try {
-      byte[][] filesToBytes =
-          filesToBytes(new String[] {"/export/abhishek1/work/aspenmm/GFTryouts/test.json"});
-
-      System.out.println(filesToBytes[1].length);
-
-      DeflaterInflaterData compressBytes = compressBytes(filesToBytes[1]);
-      System.out.println(compressBytes);
-
-      DeflaterInflaterData uncompressBytes =
-          uncompressBytes(compressBytes.data, compressBytes.dataLength);
-      System.out.println(uncompressBytes);
-
-      System.out.println(new String(uncompressBytes.getData()));
-    } catch (FileNotFoundException e) {
-      e.printStackTrace();
-    } catch (IOException e) {
-      e.printStackTrace();
-    } catch (DataFormatException e) {
-      e.printStackTrace();
-    }
-  }
-
-  public static void main1(String[] args) {
-    try {
-      byte[][] fileToBytes = filesToBytes(new String[] {"../dumped/source/lib"});
-
-      bytesToFiles(fileToBytes, "../dumped/dest/lib/", true);
-
-    } catch (FileNotFoundException e) {
-      e.printStackTrace();
-    } catch (IOException e) {
-      e.printStackTrace();
-    }
-  }
-
-    Set<DistributedMember> groupMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> groupMembers = new HashSet<>();
-    Execution execution = null;
+    Execution execution;
-    Execution execution = null;
+    Execution execution;
-   * @param returnAll whether to return all members or only the first member we find. Returns all
-   *        when <code>true</code>
-  public static Set<DistributedMember> getRegionAssociatedMembers(final String region,
-      final InternalCache cache, boolean returnAll) {
+  public static Set<DistributedMember> getRegionAssociatedMembers(String region,
+      final InternalCache cache) {
+    if (!region.startsWith(Region.SEPARATOR)) {
+      region = Region.SEPARATOR + region;
+    }
+
-    Set<DistributedMember> matchedMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> matchedMembers = new HashSet<>();
-    Set<DistributedMember> allClusterMembers = new HashSet<DistributedMember>();
+    Set<DistributedMember> allClusterMembers = new HashSet<>();
-      } catch (Exception e) {
-        // ignore for now
+      } catch (Exception ignored) {
-        Object object = (Object) it.next();
+        Object object = it.next();
-        Object object = (Object) array[i];
+        Object object = array[i];
-    FileWriter fw = null;
+    FileWriter fw;
-    } catch (IOException e) {
-      Gfsh.printlnErr(e.getMessage());
-    } catch (InterruptedException e) {
+    } catch (IOException | InterruptedException e) {
-      Set<DistributedMember> regionMembers = new HashSet<DistributedMember>();
+      Set<DistributedMember> regionMembers = new HashSet<>();
-            Iterator<Entry<String, String>> it = memberDetails.entrySet().iterator();
-            while (it.hasNext()) {
-              Entry<String, String> entry = it.next();
+            for (Entry<String, String> entry : memberDetails.entrySet()) {
-          continue;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS8 INS8 INS70 INS70 MOV60 INS25 MOV41 MOV60 MOV25 MOV41 INS60 MOV43 INS25 MOV60 INS44 INS42 MOV8 INS44 INS42 MOV8 MOV27 INS8 MOV27 MOV74 INS59 MOV43 MOV43 INS38 INS8 MOV43 INS42 MOV74 INS42 INS70 INS70 INS70 INS42 INS14 INS32 INS21 UPD42 MOV60 UPD74 INS43 UPD74 INS44 INS42 MOV8 MOV44 INS42 INS8 INS44 INS42 MOV8 UPD74 INS74 INS42 INS42 INS40 INS7 UPD74 UPD74 INS84 INS42 INS70 MOV74 INS42 UPD42 MOV21 MOV21 MOV43 INS42 MOV43 INS42 INS27 MOV43 MOV43 UPD42 INS42 INS44 INS42 INS8 MOV43 MOV43 MOV43 MOV43 INS40 INS42 UPD42 MOV43 UPD74 MOV43 INS42 MOV21 MOV21 UPD40 INS42 INS42 INS42 INS42 UPD40 INS42 INS42 UPD40 INS42 INS42 MOV32 MOV2 INS70 INS44 MOV32 MOV8 INS42 INS42 MOV74 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL33 DEL42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL33 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL34 DEL2 DEL42 DEL22 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL45 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL9 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL33 DEL33 DEL42 DEL66 DEL66 DEL65 DEL83 DEL42 DEL43 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL11 DEL42 DEL43 DEL11 DEL33 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL18