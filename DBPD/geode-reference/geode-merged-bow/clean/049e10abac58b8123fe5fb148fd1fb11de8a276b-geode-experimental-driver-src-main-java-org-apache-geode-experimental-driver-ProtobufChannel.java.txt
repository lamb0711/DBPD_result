GEODE-4961: Allowing custom serialization formats with the protobuf protocol

Adding a new ValueSerializer interface that users can implement to
control the serialization format of data sent using the protobuf
protocol.

ValueSerializers are registered on the server side using the java
ServiceLoader mechanism. They are selected by the client using a new
valueFormat field in the handshake.

Renamed AuthenticationRequest to HandshakeRequest. Credentials
and valueFormat are all sent as part of a single HandshakeRequest.

Renamed the connection states to make them a little easier to
understand, and removed some duplicate states.

The new states are RequireVersion, RequireAuthentication,
AcceptMessages, InvalidSecurity, and TerminateConnection



+  private final ValueSerializer serializer;
-      String keyStorePath, String trustStorePath, String protocols, String ciphers)
-      throws GeneralSecurityException, IOException {
+      String keyStorePath, String trustStorePath, String protocols, String ciphers,
+      ValueSerializer serializer) throws GeneralSecurityException, IOException {
+    this.serializer = serializer;
-    ProtocolVersion.NewConnectionClientVersion.newBuilder()
-        .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-        .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-        .writeDelimitedTo(outputStream);
-
+
+    handshake(username, password, outputStream, inputStream);
+
+    return socket;
+  }
+
+  private void handshake(String username, String password, OutputStream outputStream,
+      InputStream inputStream) throws IOException {
+    sendVersionMessage(outputStream);
+    sendHandshake(username, password, outputStream);
+    readVersionResponse(inputStream);
+    readHandshakeResponse(username, inputStream);
+  }
+
+  private void readVersionResponse(InputStream inputStream) throws IOException {
+  }
-    if (!Objects.isNull(username)) {
-      authenticate(username, password, outputStream, inputStream);
-    }
-
-    return socket;
+  private void sendVersionMessage(OutputStream outputStream) throws IOException {
+    ProtocolVersion.NewConnectionClientVersion.newBuilder()
+        .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
+        .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
+        .writeDelimitedTo(outputStream);
-        ProtocolVersion.NewConnectionClientVersion.newBuilder()
-            .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-            .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-            .writeDelimitedTo(outputStream);
-        // The locator does not currently send a reply to the ProtocolVersion...
-        if (!ProtocolVersion.VersionAcknowledgement.parseDelimitedFrom(inputStream)
-            .getVersionAccepted()) {
-          throw new IOException("Failed ProtocolVersion.");
-        }
-
-        if (!Objects.isNull(username)) {
-          authenticate(username, password, outputStream, inputStream);
-        }
+        handshake(username, password, outputStream, inputStream);
+
+        if (response == null) {
+          throw new IOException("Server terminated connection");
+        }
+
-    final ConnectionAPI.AuthenticationRequest.Builder builder =
-        ConnectionAPI.AuthenticationRequest.newBuilder();
-    builder.putCredentials("security-username", username);
-    builder.putCredentials("security-password", password);
-    final Message authenticationRequest =
-        Message.newBuilder().setAuthenticationRequest(builder).build();
-    authenticationRequest.writeDelimitedTo(outputStream);
+    sendHandshake(username, password, outputStream);
+    readHandshakeResponse(username, inputStream);
+  }
+
+  private void readHandshakeResponse(String username, InputStream inputStream) throws IOException {
-    final ConnectionAPI.AuthenticationResponse authenticationResponse =
-        authenticationResponseMessage.getAuthenticationResponse();
-    if (!Objects.isNull(authenticationResponse) && !authenticationResponse.getAuthenticated()) {
+    final ConnectionAPI.HandshakeResponse authenticationResponse =
+        authenticationResponseMessage.getHandshakeResponse();
+    if (username != null && !Objects.isNull(authenticationResponse)
+        && !authenticationResponse.getAuthenticated()) {
+  private void sendHandshake(String username, String password, OutputStream outputStream)
+      throws IOException {
+    final ConnectionAPI.HandshakeRequest.Builder builder =
+        ConnectionAPI.HandshakeRequest.newBuilder();
+
+    if (username != null) {
+      builder.putCredentials("security-username", username);
+      builder.putCredentials("security-password", password);
+    }
+
+    builder.setValueFormat(serializer.getID());
+
+    final Message authenticationRequest = Message.newBuilder().setHandshakeRequest(builder).build();
+    authenticationRequest.writeDelimitedTo(outputStream);
+  }
+

INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 UPD42 INS83 INS39 INS42 INS44 MOV44 MOV44 INS43 INS8 INS42 INS42 INS43 INS42 INS21 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS42 MOV25 INS43 INS42 INS42 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS60 INS25 INS21 MOV60 MOV21 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD43 INS42 INS83 INS43 INS59 INS27 INS8 INS32 INS22 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 INS27 INS40 INS42 INS32 INS42 INS33 MOV21 MOV21 INS42 INS42 INS32 INS52 INS42 MOV25 UPD42 INS27 MOV38 INS40 INS42 INS42 INS42 MOV21 INS42 INS33 UPD42 INS27 UPD42 INS42 INS33 UPD45 DEL40 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL83 DEL40 DEL43 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60