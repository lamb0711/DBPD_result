GEODE-6078: Allow client cache to use JSONFormatter in multi-user mode (#2890)

* GEODE-6078: Allow client cache to use JSONFormatter in multi-user mode

* user does not have to provide credentials when creating the client cache in multi-user mode. Credentials are needed only when creating the view.
* CacheProxy should have a reference to the JSONFormatter that is aware of the user attributes
* clean up some tests and add more tests for coverage and usage demo.
+import org.apache.geode.cache.RegionService;
+import org.apache.geode.cache.client.internal.ProxyCache;
+import org.apache.geode.cache.client.internal.UserAttributes;
-  private JSONFormatter() {}
+  private RegionService regionService;
+
+  public JSONFormatter() {}
+
+  public JSONFormatter(RegionService regionService) {
+    this.regionService = regionService;
+  }
+
+  public RegionService getRegionService() {
+    return regionService;
+  }
-    return getPdxInstanceFromJson(jsonString);
+    return new JSONFormatter().toPdxInstance(jsonString);
-    return getPdxInstanceFromJson(jsonByteArray);
+    return new JSONFormatter().toPdxInstance(jsonByteArray);
-  private static PdxInstance getPdxInstanceFromJson(Object json) {
+  /**
+   * Converts a JSON document into a PdxInstance
+   *
+   * @param json either a json string or a byte[]
+   * @return the PdxInstance.
+   * @throws JSONFormatterException if unable to parse the JSON document
+   */
+  public PdxInstance toPdxInstance(Object json) {
+    if (regionService != null && regionService instanceof ProxyCache) {
+      ProxyCache proxyCache = (ProxyCache) regionService;
+      UserAttributes.userAttributes.set(proxyCache.getUserAttributes());
+    }
-      return new JSONFormatter().getPdxInstance(jp, states.NONE, null).getPdxInstance();
+      return getPdxInstance(jp, states.NONE, null).getPdxInstance();
+    } finally {
+      UserAttributes.userAttributes.set(null);
-  private static void enableJSONParserFeature(JsonParser jp) {
+  private void enableJSONParserFeature(JsonParser jp) {
+    return new JSONFormatter().fromPdxInstance(pdxInstance);
+  }
+
+  /**
+   * Converts a PdxInstance into a JSON document
+   *
+   * @return the JSON string.
+   * @throws JSONFormatterException if unable to create the JSON document
+   */
+  public String fromPdxInstance(PdxInstance pdxInstance) {
+    return new JSONFormatter().toJsonByteArrayFromPdxInstance(pdxInstance);
+  }
+
+  /**
+   * Converts a PdxInstance into a JSON document in byte-array form
+   *
+   * @return the JSON byte array.
+   * @throws JSONFormatterException if unable to create the JSON document
+   */
+  public byte[] toJsonByteArrayFromPdxInstance(PdxInstance pdxInstance) {
-  private static JSONToPdxMapper createJSONToPdxMapper(String className, JSONToPdxMapper parent) {
+  private JSONToPdxMapper createJSONToPdxMapper(String className, JSONToPdxMapper parent) {
-      JSONToPdxMapper currentPdxInstance) throws JsonParseException, IOException {
+      JSONToPdxMapper currentPdxInstance) throws IOException {

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 UPD83 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 UPD83 UPD42 INS29 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 INS29 INS83 INS83 INS5 INS42 INS44 INS8 UPD42 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS65 INS65 INS65 INS65 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS41 INS42 INS7 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS27 INS8 INS8 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS32 INS22 INS42 INS14 UPD42 MOV14 UPD42 INS27 INS62 INS60 INS21 INS21 INS14 INS42 INS42 INS14 INS42 INS42 INS52 INS42 INS43 INS42 INS33 INS42 INS43 INS43 INS59 INS32 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS32 INS40 INS42 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43