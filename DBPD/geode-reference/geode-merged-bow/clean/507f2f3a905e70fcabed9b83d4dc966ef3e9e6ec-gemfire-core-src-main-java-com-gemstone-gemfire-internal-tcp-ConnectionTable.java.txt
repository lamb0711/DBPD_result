Revert "Removing TCPConduit's Stub ID class"

This reverts commit 5b35e43f93bfbf6d62eadf7979eb3a8b7f59b77e.

This commit was causing compilation failures.

-import com.gemstone.gemfire.distributed.DistributedMember;
-    by generic DistributedMembers.</p>
+    by generic Stubs.</p>
-   * @param id DistributedMember on which the connection is created
+   * @param id Stub on which the connection is created
-  private Connection handleNewPendingConnection(DistributedMember id, boolean sharedResource,
+  private Connection handleNewPendingConnection(Stub id, boolean sharedResource,
-                                    id,
+                                    id, this.owner.getMemberForStub(id, false),
-   * @param id the DistributedMember on which we are creating a connection
+   * @param id the Stub on which we are creating a connection
-  private Connection getUnorderedOrConserveSockets(DistributedMember id, 
+  private Connection getUnorderedOrConserveSockets(Stub id, 
-  Connection getOrderedAndOwned(DistributedMember id, long startTime, long ackTimeout, long ackSATimeout) 
+  Connection getOrderedAndOwned(Stub id, long startTime, long ackTimeout, long ackSATimeout) 
-        false /* shared */,
+        this.owner.getMemberForStub(id, false), false /* shared */,
-      // First connection for this DistributedMember.  Make sure list for this
+      // First connection for this Stub.  Make sure list for this
-   * @param id the DistributedMember on which to create the connection
+   * @param id the Stub on which to create the connection
-  protected Connection get(DistributedMember id, boolean preserveOrder,
+  protected Connection get(Stub id, boolean preserveOrder,
-  protected boolean isEndpointShuttingDown(DistributedMember id) {
-    return giveUpOnMember(owner.getDM().getMembershipManager(), id);
+  protected boolean isEndpointShuttingDown(Stub stub) {
+    return this.owner.getMemberForStub(stub, true) == null;
-  protected boolean giveUpOnMember(MembershipManager mgr, DistributedMember remoteAddr) {
-    return !mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress();
-  }
-
-  protected void removeEndpoint(DistributedMember stub, String reason) {
+  protected void removeEndpoint(Stub stub, String reason) {
-  protected void removeEndpoint(DistributedMember memberID, String reason, boolean notifyDisconnect) {
+  protected void removeEndpoint(Stub stub, String reason, boolean notifyDisconnect) {
-      if (this.orderedConnectionMap.get(memberID) != null)
+      if (this.orderedConnectionMap.get(stub) != null)
-        if (this.unorderedConnectionMap.get(memberID) != null)
+        if (this.unorderedConnectionMap.get(stub) != null)
-        ArrayList al = (ArrayList)cm.get(memberID);
+        ArrayList al = (ArrayList)cm.get(stub);
-        Object c = this.orderedConnectionMap.remove(memberID);
+        Object c = this.orderedConnectionMap.remove(stub);
-        Object c = this.unorderedConnectionMap.remove(memberID);
+        Object c = this.unorderedConnectionMap.remove(stub);
-          ArrayList al = (ArrayList)cm.remove(memberID);
+          ArrayList al = (ArrayList)cm.remove(stub);
-          if (info.peerAddress.equals(((InternalDistributedMember)memberID).getInetAddress())) {
+          if (info.peerAddress.equals(stub.getInetAddress())) {
-            logger.debug("caught exception while trying to close connecting socket for {}", memberID, e);
+            logger.debug("caught exception while trying to close connecting socket for {}", stub, e);
-          if (memberID.equals(con.getRemoteAddress())) {
+          if (stub.equals(con.getRemoteId())) {
+      // call memberDeparted after doing the closeCon calls
+      // so it can recursively call removeEndpoint
-        // Before the removal of TCPConduit Stub addresses this used
-        // to call MembershipManager.getMemberForStub, which checked
-        // for a shutdown in progress and threw this exception:
-        if (owner.getDM().shutdownInProgress()) {
-          throw new DistributedSystemDisconnectedException("Shutdown in progress", owner.getDM().getMembershipManager().getShutdownCause());
-        }
+        owner.getMemberForStub(stub, false);
-  protected boolean hasReceiversFor(DistributedMember endPoint) {
+  protected boolean hasReceiversFor(Stub endPoint) {
-        if (endPoint.equals(con.getRemoteAddress())) {
+        if (endPoint.equals(con.getRemoteId())) {
-  private static void removeFromThreadConMap(ConcurrentMap cm, DistributedMember stub, Connection c) {
+  private static void removeFromThreadConMap(ConcurrentMap cm, Stub stub, Connection c) {
-  protected void removeThreadConnection(DistributedMember stub, Connection c) {
+  protected void removeThreadConnection(Stub stub, Connection c) {
-  void removeSharedConnection(String reason, DistributedMember stub, boolean ordered, Connection c) {
+  void removeSharedConnection(String reason, Stub stub, boolean ordered, Connection c) {
-         DistributedMember stub = (DistributedMember)me.getKey();
+         Stub stub = (Stub)me.getKey();
-  protected void getThreadOwnedOrderedConnectionState(DistributedMember member,
+  protected void getThreadOwnedOrderedConnectionState(Stub member,
-  protected void waitForThreadOwnedOrderedConnectionState(DistributedMember member,
+  protected void waitForThreadOwnedOrderedConnectionState(Stub member,
-          && member.equals(con.getRemoteAddress())) {
+          && member.equals(con.getRemoteId())) {
-                  con.getRemoteAddress(), con.getUniqueId(), con.getMessagesReceived(), count);
+                  con.getRemoteId(), con.getUniqueId(), con.getMessagesReceived(), count);
-    private final DistributedMember id;
+    private final Stub id;
-    public PendingConnection(boolean preserveOrder, DistributedMember id) {
+    public PendingConnection(boolean preserveOrder, Stub id) {
-      DistributedMember targetMember = null;
+      InternalDistributedMember targetMember = null;
-        targetMember = this.id;
+        targetMember =
+          ((GMSMembershipManager)mgr).getMemberForStub(this.id, false);

UPD66 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD66 UPD42 UPD66 UPD42 UPD42 UPD66 UPD42 UPD42 INS27 UPD42 UPD42 MOV22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS32 INS33 UPD42 MOV43 INS32 INS9 INS22 UPD42 MOV42 UPD42 MOV42 INS9 MOV21 MOV22 MOV8 INS22 INS42 INS42 MOV9 INS52 INS42 INS21 INS32 INS52 INS42 MOV22 UPD42 MOV21 MOV43 INS32 INS32 INS22 INS42 INS42 INS9 MOV43 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 INS36 INS42 MOV22 INS9 INS52 INS42 MOV22 UPD42 MOV43 UPD42 UPD42 UPD42 UPD43 INS11 UPD42 MOV43 UPD42 UPD42 INS43 INS42 UPD42 INS42 UPD42 UPD43 INS42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL11 DEL36 DEL42 DEL43 DEL45 DEL42 DEL32 DEL32 DEL32 DEL14 DEL53 DEL42 DEL42 DEL32 DEL42 DEL32 DEL25 DEL8 DEL42 DEL43