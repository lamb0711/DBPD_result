GEODE-1809: Refactor GemFireVersion

Clean up dead / broken / unused code and reduce the visible
API methods.  Store the version info as a Map to allow it to be
extended more easily. Move scm info into utilities.gradle.

+import java.io.File;
+import java.io.InputStream;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.net.URL;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.StringTokenizer;
+
+import com.gemstone.gemfire.InternalGemFireError;
-import java.io.*;
-import java.net.*;
-import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-
-  
+
-  private static GemFireVersion instance;
+  private static VersionDescription description;
-  /** Constant for the GemFire version Resource Property entry */
-  private static final String PRODUCT_NAME = "Product-Name";
-
-  /** Constant for the GemFire version Resource Property entry */
-  private static final String GEMFIRE_VERSION = "Product-Version";
-
-  /** Constant for the source code date Resource Property entry */
-  private static final String SOURCE_DATE = "Source-Date";
-
-  /** Constant for the source code revision Resource Property entry */
-  private static final String SOURCE_REVISION = "Source-Revision";
-
-  /** Constant for the source code repository Resource Property entry */
-  private static final String SOURCE_REPOSITORY = "Source-Repository";
-
-  /** Constant for the build date Resource Property entry */
-  private static final String BUILD_DATE = "Build-Date";
-
-  /** Constant for the build id Resource Property entry */
-  private static final String BUILD_ID = "Build-Id";
-
-  /** Constant for the build Java version Resource Property entry */
-  private static final String BUILD_PLATFORM = "Build-Platform";
-
-  /** Constant for the build Java version Resource Property entry */
-  private static final String BUILD_JAVA_VERSION = "Build-Java-Version";
-
-  ////////////////////  Instance Fields  ////////////////////
-
-  /** Error message to display instead of the version information */
-  private String error = null;
-
-  /** The name of this product */
-  private String productName;
-
-  /** This product's version */
-  private String gemfireVersion;
-
-  /** The version of GemFire native code library */
-  private String nativeVersion;
-
-  /** The date that the source code for GemFire was last updated */  
-  private String sourceDate;
-
-  /** The revision of the source code used to build GemFire */  
-  private String sourceRevision;
-
-  /** The repository in which the source code for GemFire resides */  
-  private String sourceRepository;
-
-  /** The date on which GemFire was built */
-  private String buildDate;
-
-  /** The ID of the GemFire build */
-  private String buildId;
-
-  /** The platform on which GemFire was built */
-  private String buildPlatform;
-
-  /** The version of Java that was used to build GemFire */
-  private String buildJavaVersion;
-
-  ////////////////////  Static Methods  ////////////////////
-
-  /**
-   * Returns (or creates) the singleton instance of this class
-   */
-  private static GemFireVersion getInstance() {
-    if (instance == null) {
-      instance = new GemFireVersion();
-    }
-
-    return instance;
+  private GemFireVersion() {
-  /**
-   * Returns the name of this product
-   */
-  public static String getProductName() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.productName;
+  private static synchronized VersionDescription getDescription() {
+    if (description == null) {
+      String name = GemFireVersion.class.getPackage().getName()
+          .replace('.', '/') + "/" + RESOURCE_NAME;
+      description = new VersionDescription(name);
-  }
-
-  /**
-   * Returns the version of GemFire being used
-   */
-  public static String getGemFireVersion() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.gemfireVersion;
-    }
-  }
-
-  private static String stripSpaces(String s) {
-    StringBuffer result = new StringBuffer(s);
-    while (result.charAt(0) == ' ') {
-      result.deleteCharAt(0);
-    }
-    while (result.charAt(result.length()-1) == ' ') {
-      result.deleteCharAt(result.length()-1);
-    }
-    return result.toString();
+    return description;
-  /**
-   * Returns the version of GemFire native code library being used
-   */
-  public static String getNativeCodeVersion() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.nativeVersion;
-    }
-  }
-  public static String getJavaCodeVersion() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      StringBuffer result = new StringBuffer(80);
-      result.append(GemFireVersion.getGemFireVersion())
-        .append(' ')
-        .append(GemFireVersion.getBuildId())
-        .append(' ')
-        .append(GemFireVersion.getBuildDate())
-        .append(" javac ")
-        .append(GemFireVersion.getBuildJavaVersion());
-      return result.toString();
-    }
+  public static void main(String[] args) {
+    System.out.println(asString());
-  /**
-   * Returns the date of the source code from which GemFire was built
-   */
+  public static String getProductName() {
+    return getDescription().getProperty(VersionDescription.PRODUCT_NAME);
+  }
+
+  public static String getGemFireVersion() {
+    return getDescription().getProperty(VersionDescription.GEMFIRE_VERSION);
+  }
+
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.sourceDate;
-    }
+    return getDescription().getProperty(VersionDescription.SOURCE_DATE);
-  /**
-   * Returns the revision of the source code on which GemFire was
-   * built.
-   *
-   * @since GemFire 4.0
-   */
-  public static String getSourceRevision() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.sourceRevision;
-    }
-  }
-
-  /**
-   * Returns the source code repository from which GemFire was built.
-   *
-   * @since GemFire 4.0
-   */
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.sourceRepository;
-    }
+    return getDescription().getProperty(VersionDescription.SOURCE_REPOSITORY);
-  /**
-   * Returns the date on which GemFire was built
-   */
-  public static String getBuildDate() {
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.buildDate;
-    }
+  public static String getSourceRevision() {
+    return getDescription().getProperty(VersionDescription.SOURCE_REVISION);
-  /**
-   * Returns the id of the GemFire build
-   */
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.buildId;
-    }
+    return getDescription().getProperty(VersionDescription.BUILD_ID);
-  /**
-   * Returns the platform on which GemFire was built
-   */
+  public static String getBuildDate() {
+    return getDescription().getProperty(VersionDescription.BUILD_DATE);
+  }
+
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.buildPlatform;
-    }
+    return getDescription().getProperty(VersionDescription.BUILD_PLATFORM);
-  /**
-   * Returns the version of Java used to build GemFire
-   */
-    GemFireVersion v = getInstance();
-    if (v.error != null) {
-      return v.error;
-
-    } else {
-      return v.buildJavaVersion;
-    }
+    return getDescription().getProperty(VersionDescription.BUILD_JAVA_VERSION);
-  ////////////////////  Constructors  ////////////////////
+  public static String getGemFireJarFileName() {
+    return "geode-core-" + GemFireVersion.getGemFireVersion() +".jar";
+  }
-  /**
-   * Private constructor that read the resource properties
-   * and extracts interesting pieces of information from it
-   */
-  private GemFireVersion() {
-    String name =
-      GemFireVersion.class.getPackage().getName().replace('.', '/');
-    name = name + "/" + RESOURCE_NAME;
+  public static void print(PrintWriter pw) {
+    getDescription().print(pw);
+  }
+  
+  public static void print(PrintStream ps) {
+    print(new PrintWriter(ps, true));
+  }
-    InputStream is = ClassPathLoader.getLatest().getResourceAsStream(getClass(), name);
-    if (is == null) {
-      error = LocalizedStrings.GemFireVersion_COULD_NOT_FIND_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0.toLocalizedString(RESOURCE_NAME);
-      return;
-    }
-    Properties props = new Properties();
-    try {
-      props.load(is);
-    } catch (Exception ex) {
-      error = LocalizedStrings.GemFireVersion_COULD_NOT_READ_PROPERTIES_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0_BECAUSE_1.toLocalizedString(new Object[] {RESOURCE_NAME, ex});
-      return;
-    }
-
-    this.nativeVersion = SmHelper.getNativeVersion();
-    this.productName = props.getProperty(PRODUCT_NAME);
-    if (this.productName == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {PRODUCT_NAME, RESOURCE_NAME});
-      return;
-    }
-    this.gemfireVersion = props.getProperty(GEMFIRE_VERSION);
-    if (this.gemfireVersion == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {GEMFIRE_VERSION, RESOURCE_NAME});
-      return;
-    }
-    this.sourceDate = props.getProperty(SOURCE_DATE);
-    if (this.sourceDate == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_DATE, RESOURCE_NAME});
-      return;
-    }
-    this.sourceRevision = props.getProperty(SOURCE_REVISION);
-    if (this.sourceRevision == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_REVISION, RESOURCE_NAME});
-      return;
-    }
-    this.sourceRepository = props.getProperty(SOURCE_REPOSITORY);
-    if (this.sourceRepository == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_REPOSITORY, RESOURCE_NAME});
-      return;
-    }
-    this.buildDate = props.getProperty(BUILD_DATE);
-    if (this.buildDate == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_DATE, RESOURCE_NAME});
-      return;
-    }
-    this.buildId = props.getProperty(BUILD_ID);
-    if (this.buildId == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_ID, RESOURCE_NAME});
-      return;
-    }
-    this.buildPlatform = props.getProperty(BUILD_PLATFORM);
-    if (this.buildPlatform == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_PLATFORM, RESOURCE_NAME});
-      return;
-    }
-    this.buildJavaVersion = props.getProperty(BUILD_JAVA_VERSION);
-    if (this.buildJavaVersion == null) {
-      error = LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_JAVA_VERSION, RESOURCE_NAME});
-      return;
-    }
+  public static String asString() {
+    StringWriter sw = new StringWriter(256);
+    PrintWriter pw = new PrintWriter(sw);
+    print(pw);
+    pw.flush();
+    return sw.toString();
-  public static String getGemFireJarFileName() {
-    return "geode-core-" + GemFireVersion.getGemFireVersion() +".jar";
-  }
+  static class VersionDescription {
+    /** Constant for the GemFire version Resource Property entry */
+    static final String PRODUCT_NAME = "Product-Name";
-  private final static String VER_FILE_NAME = "GemFireVersion.properties";
-  private final static String JAR_VER_NAME = "gemfire-core-jar";
+    /** Constant for the GemFire version Resource Property entry */
+    static final String GEMFIRE_VERSION = "Product-Version";
-    public static void createVersionFile() {
-        String jarVersion = stripSpaces(GemFireVersion.getJavaCodeVersion());
-        File libDir = SystemAdmin.findGemFireLibDir();
-        if (libDir == null) {
-          throw new RuntimeException(LocalizedStrings.GemFireVersion_COULD_NOT_DETERMINE_PRODUCT_LIB_DIRECTORY.toLocalizedString());
-        }
-        File versionPropFile = new File(libDir, VER_FILE_NAME);
-        Properties props = new Properties();
-        props.setProperty(JAR_VER_NAME, jarVersion);
-        try {
-          FileOutputStream out = new FileOutputStream(versionPropFile);
-          props.store(out, "Expected versions for this product build as of");
-          out.close();
-        } catch (IOException ex) {
-          throw new RuntimeException(LocalizedStrings.GemFireVersion_COULD_NOT_WRITE_0_BECAUSE_1.toLocalizedString(new Object[] {versionPropFile, ex.toString()}));
-        }
-        System.out.println("Created \"" + versionPropFile + "\"");
-    }
-  /**
-   * Encodes all available version information into a string and then
-   * returns that string.
-   */
-  public static String asString() {
-    StringWriter sw = new StringWriter(256);
-    PrintWriter pw = new PrintWriter(sw);
-    print(pw);
-    pw.flush();
-    return sw.toString();
-  }
-    /**
-     * Prints all available version information (excluding source code
-     * information) to the given <code>PrintWriter</code> in a
-     * standard format.
-     */
-    public static void print(PrintWriter pw) {
-      print(pw, true);
+    /** Constant for the source code date Resource Property entry */
+    static final String SOURCE_DATE = "Source-Date";
+
+    /** Constant for the source code revision Resource Property entry */
+    static final String SOURCE_REVISION = "Source-Revision";
+
+    /** Constant for the source code repository Resource Property entry */
+    static final String SOURCE_REPOSITORY = "Source-Repository";
+
+    /** Constant for the build date Resource Property entry */
+    static final String BUILD_DATE = "Build-Date";
+
+    /** Constant for the build id Resource Property entry */
+    static final String BUILD_ID = "Build-Id";
+
+    /** Constant for the build Java version Resource Property entry */
+    static final String BUILD_PLATFORM = "Build-Platform";
+
+    /** Constant for the build Java version Resource Property entry */
+    static final String BUILD_JAVA_VERSION = "Build-Java-Version";
+
+    /** the version properties */
+    private final Properties description;
+
+    /** Error message to display instead of the version information */
+    private final String error;
+
+    public VersionDescription(String name) {
+      InputStream is = ClassPathLoader.getLatest().getResourceAsStream(getClass(), name);
+      if (is == null) {
+        error = LocalizedStrings.GemFireVersion_COULD_NOT_FIND_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0.toLocalizedString(RESOURCE_NAME);
+        description = null;
+        return;
+      }
+
+      description = new Properties();
+      try {
+        description.load(is);
+      } catch (Exception ex) {
+        error = LocalizedStrings.GemFireVersion_COULD_NOT_READ_PROPERTIES_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0_BECAUSE_1.toLocalizedString(new Object[] {RESOURCE_NAME, ex});
+        return;
+      }
+      error = validate();
-    /**
-     * Prints all available version information to the given
-     * <code>PrintWriter</code> in a standard format.
-     *
-     * @param printSourceInfo
-     *        Should information about the source code be printed?
-     */
-    public static void print(PrintWriter pw, 
-                             boolean printSourceInfo) {
-        String jarVersion = stripSpaces(GemFireVersion.getJavaCodeVersion());
-        pw.println("Java version:   " + jarVersion);
-        String libVersion = stripSpaces(GemFireVersion.getNativeCodeVersion());
-        pw.println("Native version: " + libVersion);
-        File libDir = SystemAdmin.findGemFireLibDir();
-        if (libDir != null) {
-          File versionPropFile = new File(libDir, VER_FILE_NAME);
-          if (versionPropFile.exists()) {
-            try {
-              Properties props = new Properties();
-              FileInputStream inStream = new FileInputStream(versionPropFile);
-              try {
-                props.load(inStream);
-              }
-              finally {
-                inStream.close();
-              }
-              String expectedJarVersion = props.getProperty(JAR_VER_NAME);
-              if (expectedJarVersion != null) {
-                if (!expectedJarVersion.equals(jarVersion)) {
-                  pw.println(LocalizedStrings.GemFireVersion_WARNING_EXPECTED_JAVA_VERSION_0.toLocalizedString(expectedJarVersion));
-                }
-              }
-            } catch (IOException ex) {
-              pw.println(LocalizedStrings.GemFireVersion_WARNING_FAILED_TO_READ_0_BECAUSE_1.toLocalizedString(new Object[] {versionPropFile, ex}));
-            }
-//           } else {
-//             pw.println(LocalizedStrings.GemFireVersion_WARNING_COULD_NOT_FIND_0.toLocalizedString(versionPropFile));
-          }
-//         } else {
-//           pw.println(LocalizedStrings.GemFireVersion_WARNING_COULD_NOT_DETERMINE_THE_PRODUCTS_LIB_DIRECTORY.toLocalizedString());
-        }
-	
-        if (printSourceInfo) {
-          String sourceRevision = GemFireVersion.getSourceRevision();
-          pw.println("Source revision: " + sourceRevision);
-
-          String sourceRepository =
-            GemFireVersion.getSourceRepository();
-          pw.println("Source repository: " + sourceRepository);
-        }
-
-	InetAddress host = null;
-	try {
-	    host = SocketCreator.getLocalHost();
-	} 
-	catch (VirtualMachineError err) {
-	   SystemFailure.initiateFailure(err);
-	   // If this ever returns, rethrow the error.  We're poisoned
-	   // now, so don't let this thread continue.
-	   throw err;
-	}
-	catch (Throwable t) {
-	     // Whenever you catch Error or Throwable, you must also
-	     // catch VirtualMachineError (see above).  However, there is
-	     // _still_ a possibility that you are dealing with a cascading
-	     // error condition, so you also need to check to see if the JVM
-	     // is still usable:
-	     SystemFailure.checkFailure();
-	}
-        int cpuCount = Runtime.getRuntime().availableProcessors();
-        pw.println(LocalizedStrings.GemFireVersion_RUNNING_ON_0.toLocalizedString(
-                   host
-                   + ", " + cpuCount + " cpu(s)"
-                   + ", " + System.getProperty("os.arch")
-                   + " " + System.getProperty("os.name")
-                   + " " + System.getProperty("os.version")
-                   ));
-    }
-	
-    /**
-     * Prints all available version information (excluding information
-     * about the source code) to the given <code>PrintStream</code> in
-     * a standard format.
-     */
-    public static void print(PrintStream ps) {
-	print(ps, true);
-    }
-
-    /**
-     * Prints all available version information to the given
-     * <code>PrintStream</code> in a standard format.
-     *
-     * @param printSourceInfo
-     *        Should information about the source code be printed?
-     */
-    public static void print(PrintStream ps,
-                             boolean printSourceInfo) {
-	PrintWriter pw = new PrintWriter(ps);
-	print(pw, printSourceInfo);
-	pw.flush();
+    public String getProperty(String key) {
+      if (error != null) {
+        return error;
+      }
+      return description.getProperty(key);
-  ///////////////////////  Main Program  ////////////////////
+    public String getNativeCodeVersion() {
+      return SmHelper.getNativeVersion();
+    }
+    
+    private void print(PrintWriter pw) {
+      for (Entry<?,?> props : description.entrySet()) {
+        pw.println(props.getKey() + ": " + props.getValue());
+      }
-//  private static final PrintStream out = System.out;
-//  private static final PrintStream err = System.err;
+      // not stored in the description map
+      pw.println("Native version: " + getNativeCodeVersion());
+      printHostInfo(pw);
+    }
-  /**
-   * Populates the gemfireVersion.properties file
-   */
-  public static void main(String[] args) {
-      print(System.out);
-  }
-
-  private static final Pattern MAJOR_MINOR = Pattern.compile("(\\d+)\\.(\\d*)(.*)");
-  private static final Pattern RELEASE = Pattern.compile("\\.(\\d*)(.*)");
-  private static final Pattern MAJOR_MINOR_RELEASE = Pattern.compile("(\\d+)\\.(\\d*)\\.(\\d*)(.*)");
-  
-  public static int getMajorVersion(String v) {
-    int majorVersion = 0;
-    Matcher m = MAJOR_MINOR.matcher(v);
-    if (m.matches()) {
-      String digits = m.group(1);
-      if (digits != null && digits.length() > 0) {
-        majorVersion = Integer.decode(digits).intValue();
+    private void printHostInfo(PrintWriter pw)
+        throws InternalGemFireError, Error, VirtualMachineError {
+      try {
+        StringBuffer sb = new StringBuffer(SocketCreator.getLocalHost().toString())
+            .append(", ")
+            .append(Runtime.getRuntime().availableProcessors()).append(" cpu(s), ")
+            .append(System.getProperty("os.arch")).append(' ')
+            .append(System.getProperty("os.name")).append(' ')
+            .append(System.getProperty("os.version")).append(' ');
+        pw.println(LocalizedStrings.GemFireVersion_RUNNING_ON_0.toLocalizedString(sb.toString()));
+      } catch (VirtualMachineError err) {
+        SystemFailure.initiateFailure(err);
+        // If this ever returns, rethrow the error. We're poisoned
+        // now, so don't let this thread continue.
+        throw err;
+      } catch (Throwable t) {
+        // Whenever you catch Error or Throwable, you must also
+        // catch VirtualMachineError (see above). However, there is
+        // _still_ a possibility that you are dealing with a cascading
+        // error condition, so you also need to check to see if the JVM
+        // is still usable:
+        SystemFailure.checkFailure();
-    return majorVersion;
-  }
-  public static int getMinorVersion(String v) {
-    int minorVersion = 0;
-    Matcher m = MAJOR_MINOR.matcher(v);
-    if (m.matches()) {
-      String digits = m.group(2);
-      if (digits != null && digits.length() > 0) {
-        minorVersion = Integer.decode(digits).intValue();
+    private String validate() {
+      if (getProperty(PRODUCT_NAME) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {PRODUCT_NAME, RESOURCE_NAME});
-    }
-    return minorVersion;
-  }
-  public static int getRelease(String v) {
-    int release = 0;
-    Matcher m = MAJOR_MINOR.matcher(v);
-    if (m.matches()) {
-      String others = m.group(3);
-      Matcher r = RELEASE.matcher(others);
-      if (r.matches()) {
-        String digits = r.group(1);
-        if (digits != null && digits.length() > 0) {
-          try {
-            release = Integer.decode(digits).intValue();
-          } catch (NumberFormatException e) {
-            release = 0;
-          }
-        }
+      if (getProperty(GEMFIRE_VERSION) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {GEMFIRE_VERSION, RESOURCE_NAME});
-    }
-    return release;
-  }
-  
-  public static int getBuild(String v) {
-    int build = 0;
-    Matcher m = MAJOR_MINOR_RELEASE.matcher(v);
-    if (m.matches()) {
-      String buildStr = m.group(4);
-      Matcher b = RELEASE.matcher(buildStr);
-      if (b.matches()) {
-        String digits = b.group(1);
-        if (digits != null && digits.length() > 0) {
-          try {
-            build = Integer.decode(digits).intValue();
-          } catch (NumberFormatException e) {
-            build = 0;
-          }
-        }
+
+      if (getProperty(SOURCE_DATE) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_DATE, RESOURCE_NAME});
+
+      if (getProperty(SOURCE_REVISION) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_REVISION, RESOURCE_NAME});
+      }
+
+      if (getProperty(SOURCE_REPOSITORY) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {SOURCE_REPOSITORY, RESOURCE_NAME});
+      }
+
+      if (getProperty(BUILD_DATE) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_DATE, RESOURCE_NAME});
+      }
+
+      if (getProperty(BUILD_ID) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_ID, RESOURCE_NAME});
+      }
+
+      if (getProperty(BUILD_PLATFORM) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_PLATFORM, RESOURCE_NAME});
+      }
+
+      if (getProperty(BUILD_JAVA_VERSION) == null) {
+        return LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1.toLocalizedString(new Object[] {BUILD_JAVA_VERSION, RESOURCE_NAME});
+      }
+      return null;
-    return build;
-  }
-  
-  /** 
-   * Compare version's sections major, minor, release one by one
-   * 
-   * @return >0: v1 is newer than v2
-   *          0: same
-   *          <0: v1 is older than v2
-   * @deprecated please use the {@link Version} class to read the version
-   * of the local member and compare versions for backwards compatibility 
-   * purposes. see also {@link SerializationVersions} for how to make backwards
-   * compatible messages.
-   */
-  public static int compareVersions(String v1, String v2) {
-    return compareVersions(v1, v2, true);
-  }
-  
-  /* 
-   * Compare version's sections major, minor, release one by one
-   * 
-   * @param v1 the first version
-   * @param v2 the second version
-   * @param includeBuild whether to also compare the build numbers
-   * 
-   * @return: >0: v1 is newer than v2
-   *          0: same
-   *          <0: v1 is older than v2
-   */
-  public static int compareVersions(String v1, String v2, boolean includeBuild) {
-    int major1, minor1, release1, build1;
-    int major2, minor2, release2, build2;
-    
-    if (v1 == null && v2 != null) return -1;
-    if (v1 != null && v2 == null) return 1;
-    if (v1 == null && v2 == null) return 0;
-    
-    major1 = getMajorVersion(v1);
-    major2 = getMajorVersion(v2);
-    
-    minor1 = getMinorVersion(v1);
-    minor2 = getMinorVersion(v2);
-    
-    release1 = getRelease(v1);
-    release2 = getRelease(v2);
-
-    if (major1 > major2) return 1;
-    if (major1 < major2) return -1;
-    
-    if (minor1 > minor2) return 1;
-    if (minor1 < minor2) return -1;
-
-    if (release1 > release2) return 1;
-    if (release1 < release2) return -1;
-    
-    if (includeBuild) {
-      build1 = getBuild(v1);
-      build2 = getBuild(v2);
-      
-      if (build1 > build2) return 1;
-      if (build1 < build2) return -1;
-    }
-
-    return 0;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 UPD40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS31 INS55 UPD43 INS83 INS42 INS8 INS83 UPD43 UPD42 UPD83 INS39 UPD42 MOV44 INS8 MOV43 UPD42 MOV43 INS42 INS8 MOV43 MOV43 UPD42 MOV43 UPD42 MOV43 UPD42 MOV43 UPD42 MOV43 MOV43 UPD42 MOV44 INS83 INS42 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 INS23 MOV23 MOV31 MOV31 MOV31 MOV31 INS31 MOV31 UPD42 UPD42 UPD42 MOV21 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS29 MOV83 MOV83 MOV43 MOV59 INS83 UPD42 MOV44 MOV43 UPD42 MOV43 UPD42 UPD83 UPD39 UPD42 UPD83 MOV83 UPD39 MOV39 INS42 MOV44 INS43 INS43 INS43 INS8 MOV43 INS42 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV65 INS42 UPD42 MOV60 MOV25 INS21 MOV54 MOV21 MOV43 INS42 MOV25 UPD43 UPD42 INS70 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS54 INS41 UPD42 MOV60 INS40 UPD42 INS32 INS32 UPD42 MOV42 INS40 MOV32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 MOV32 UPD42 MOV42 UPD40 MOV40 INS32 INS14 UPD66 INS7 INS27 INS32 MOV32 UPD42 INS44 INS32 INS8 INS32 INS32 INS8 MOV12 MOV12 INS33 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 MOV43 INS42 INS9 INS21 INS42 MOV14 UPD42 INS32 UPD42 MOV42 MOV33 INS41 INS42 INS42 INS42 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS21 UPD42 MOV42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS60 INS21 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 UPD42 INS7 UPD42 MOV42 INS42 INS43 INS76 INS76 INS32 INS45 MOV32 MOV43 INS59 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 MOV32 INS45 INS42 UPD43 INS42 INS42 INS33 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 UPD42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS32 UPD42 INS32 INS45 INS32 INS32 INS42 INS13 INS40 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS13 INS32 UPD42 MOV42 MOV32 INS32 INS42 INS13 INS32 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 INS45 INS32 INS42 MOV32 INS14 UPD42 MOV42 INS45 MOV43 INS32 MOV32 UPD42 MOV42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL13 DEL27 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL13 DEL27 DEL8 DEL61 DEL42 DEL42 DEL32 DEL41 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL42 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL41 DEL8 DEL40 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL40 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL66 DEL66 DEL66 DEL65 DEL29 DEL9 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL54 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL45 DEL32 DEL33 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL83 DEL39 DEL42 DEL43 DEL42 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL39 DEL42 DEL34 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL34 DEL27 DEL27 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL34 DEL38 DEL41 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL34 DEL41 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL34 DEL41 DEL25 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL27 DEL34 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL38 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL38 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL38 DEL41 DEL25 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL27 DEL34 DEL41 DEL25 DEL42 DEL42 DEL27 DEL34 DEL38 DEL41 DEL25 DEL8 DEL25 DEL34 DEL41 DEL8 DEL31