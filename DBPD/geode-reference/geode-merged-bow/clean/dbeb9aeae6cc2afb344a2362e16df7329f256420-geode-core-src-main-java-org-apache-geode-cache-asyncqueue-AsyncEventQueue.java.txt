Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Interface of AsyncEventQueue. 
- * This represents the channel over which the events are delivered to the <code>AsyncEventListener</code>. 
+ * Interface of AsyncEventQueue. This represents the channel over which the events are delivered to
+ * the <code>AsyncEventListener</code>.
-   * @return String  Id of the AsyncEventQueue  
+   * @return String Id of the AsyncEventQueue
-  
+
-   * @return    String
+   * 
+   * @return String
-  public String getDiskStoreName();//for overflow and persistence
-  
+  public String getDiskStoreName();// for overflow and persistence
+
-   * The maximum memory after which the data needs to be overflowed to disk.
-   * Default is 100 MB.
-   * @return    int
+   * The maximum memory after which the data needs to be overflowed to disk. Default is 100 MB.
+   * 
+   * @return int
-  public int getMaximumQueueMemory();//for overflow
-  
+  public int getMaximumQueueMemory();// for overflow
+
-   * Represents the size of a batch that gets delivered over the AsyncEventQueue.
-   * Default batchSize is 100. 
-   * @return    int
+   * Represents the size of a batch that gets delivered over the AsyncEventQueue. Default batchSize
+   * is 100.
+   * 
+   * @return int
-  
+
-   * Represents the maximum time interval that can elapse before a batch is sent 
-   * from <code>AsyncEventQueue</code>.
-   * Default batchTimeInterval is 5 ms.
+   * Represents the maximum time interval that can elapse before a batch is sent from
+   * <code>AsyncEventQueue</code>. Default batchTimeInterval is 5 ms.
-   * @return    int
+   * @return int
-  
+
-   * Represents whether batch conflation is enabled for batches sent 
-   * from <code>AsyncEventQueue</code>.
-   * Default is false.
-   * @return    boolean
+   * Represents whether batch conflation is enabled for batches sent from
+   * <code>AsyncEventQueue</code>. Default is false.
+   * 
+   * @return boolean
-  
+
-   * @return    boolean
+   * 
+   * @return boolean
-  
+
-   * Represents whether writing to disk is synchronous or not.
-   * Default is true.
-   * @return    boolean
+   * Represents whether writing to disk is synchronous or not. Default is true.
+   * 
+   * @return boolean
-  
+
-   * Represents whether the queue is primary or secondary. 
-   * Events get delivered only by the primary queue. 
-   * If the primary queue goes down then the secondary queue first becomes primary 
-   * and then starts delivering the events.  
-   * @return    boolean
+   * Represents whether the queue is primary or secondary. Events get delivered only by the primary
+   * queue. If the primary queue goes down then the secondary queue first becomes primary and then
+   * starts delivering the events.
+   * 
+   * @return boolean
-  
+
-   * The <code>AsyncEventListener</code> that is attached to the queue. 
-   * All the event passing over the queue are delivered to attached listener.
-   * @return    AsyncEventListener      Implementation of AsyncEventListener
+   * The <code>AsyncEventListener</code> that is attached to the queue. All the event passing over
+   * the queue are delivered to attached listener.
+   * 
+   * @return AsyncEventListener Implementation of AsyncEventListener
-  
+
-   * @return    boolean    True if the queue is parallel, false otherwise.
+   * 
+   * @return boolean True if the queue is parallel, false otherwise.
-  
+
-   * Returns the number of dispatcher threads working for this <code>AsyncEventQueue</code>.
-   * Default number of dispatcher threads is 5.
+   * Returns the number of dispatcher threads working for this <code>AsyncEventQueue</code>. Default
+   * number of dispatcher threads is 5.
-  
+
-   * Returns the order policy followed while dispatching the events to AsyncEventListener.
-   * Order policy is set only when dispatcher threads are > 1.
-   * Default order policy is KEY.
+   * Returns the order policy followed while dispatching the events to AsyncEventListener. Order
+   * policy is set only when dispatcher threads are > 1. Default order policy is KEY.
+   * 
-  
+
+   * 
-  
+
-   * Returns the <code>GatewayEventFilters</code> for this
-   * <code>AsyncEventQueue</code>
+   * Returns the <code>GatewayEventFilters</code> for this <code>AsyncEventQueue</code>
-   * @return the <code>GatewayEventFilters</code> for this
-   *         <code>AsyncEventQueue</code>
+   * @return the <code>GatewayEventFilters</code> for this <code>AsyncEventQueue</code>
-  
+
-   * Returns the <code>GatewayEventSubstitutionFilter</code> for this
-   * <code>AsyncEventQueue</code>
+   * Returns the <code>GatewayEventSubstitutionFilter</code> for this <code>AsyncEventQueue</code>
-   * @return the <code>GatewayEventSubstitutionFilter</code> for this
-   *         <code>AsyncEventQueue</code>
+   * @return the <code>GatewayEventSubstitutionFilter</code> for this <code>AsyncEventQueue</code>
-   * Represents if expiration destroy operations are forwarded (passed)
-   * to <code>AsyncEventListener</code>.
+   * Represents if expiration destroy operations are forwarded (passed) to
+   * <code>AsyncEventListener</code>.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66