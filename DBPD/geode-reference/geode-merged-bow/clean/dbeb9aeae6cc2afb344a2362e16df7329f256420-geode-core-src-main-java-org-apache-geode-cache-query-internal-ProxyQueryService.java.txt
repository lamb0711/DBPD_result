Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  ProxyCache   proxyCache;
+  ProxyCache proxyCache;
-      ((DefaultQueryService)realQueryService).getCqService().closeAllCqs(
-          !keepAlive, Arrays.asList(this.getCqs()), keepAlive);
+      ((DefaultQueryService) realQueryService).getCqService().closeAllCqs(!keepAlive,
+          Arrays.asList(this.getCqs()), keepAlive);
-  
-  public Index createHashIndex(String indexName, String indexedExpression,
-      String fromClause) throws IndexInvalidException,
-      IndexNameConflictException, IndexExistsException,
-      RegionNotFoundException, UnsupportedOperationException {
-    throw new UnsupportedOperationException(
-        "Index creation on the server is not supported from the client.");
-  }
-  
-  public Index createHashIndex(String indexName, String indexedExpression,
-      String fromClause, String imports) throws IndexInvalidException,
-      IndexNameConflictException, IndexExistsException,
+
+  public Index createHashIndex(String indexName, String indexedExpression, String fromClause)
+      throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-  public Index createIndex(String indexName, IndexType indexType,
-      String indexedExpression, String fromClause)
-      throws IndexInvalidException, IndexNameConflictException,
-      IndexExistsException, RegionNotFoundException,
-      UnsupportedOperationException {
+  public Index createHashIndex(String indexName, String indexedExpression, String fromClause,
+      String imports) throws IndexInvalidException, IndexNameConflictException,
+      IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-  public Index createIndex(String indexName, IndexType indexType,
-      String indexedExpression, String fromClause, String imports)
-      throws IndexInvalidException, IndexNameConflictException,
-      IndexExistsException, RegionNotFoundException,
-      UnsupportedOperationException {
+  public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+      String fromClause) throws IndexInvalidException, IndexNameConflictException,
+      IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-  public Index createIndex(String indexName, String indexedExpression,
-      String fromClause) throws IndexInvalidException,
-      IndexNameConflictException, IndexExistsException,
+  public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+      String fromClause, String imports) throws IndexInvalidException, IndexNameConflictException,
+      IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
+    throw new UnsupportedOperationException(
+        "Index creation on the server is not supported from the client.");
+  }
+
+  public Index createIndex(String indexName, String indexedExpression, String fromClause)
+      throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-  public Index createIndex(String indexName, String indexedExpression,
-      String fromClause, String imports) throws IndexInvalidException,
-      IndexNameConflictException, IndexExistsException,
-      RegionNotFoundException, UnsupportedOperationException {
+  public Index createIndex(String indexName, String indexedExpression, String fromClause,
+      String imports) throws IndexInvalidException, IndexNameConflictException,
+      IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-  public Index createKeyIndex(String indexName, String indexedExpression,
-      String fromClause) throws IndexInvalidException,
-      IndexNameConflictException, IndexExistsException,
+  public Index createKeyIndex(String indexName, String indexedExpression, String fromClause)
+      throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-  public void defineKeyIndex(String indexName, String indexedExpression,
-      String fromClause) throws RegionNotFoundException {
+  public void defineKeyIndex(String indexName, String indexedExpression, String fromClause)
+      throws RegionNotFoundException {
-  public void defineHashIndex(String indexName, String indexedExpression,
-      String regionPath) throws RegionNotFoundException {
+  public void defineHashIndex(String indexName, String indexedExpression, String regionPath)
+      throws RegionNotFoundException {
-  public void defineHashIndex(String indexName, String indexedExpression,
-      String regionPath, String imports) throws RegionNotFoundException {
+  public void defineHashIndex(String indexName, String indexedExpression, String regionPath,
+      String imports) throws RegionNotFoundException {
-  public void defineIndex(String indexName, String indexedExpression,
-      String regionPath) throws RegionNotFoundException {
+  public void defineIndex(String indexName, String indexedExpression, String regionPath)
+      throws RegionNotFoundException {
-  public void defineIndex(String indexName, String indexedExpression,
-      String regionPath, String imports) throws RegionNotFoundException {
+  public void defineIndex(String indexName, String indexedExpression, String regionPath,
+      String imports) throws RegionNotFoundException {
-  
+
-      ((DefaultQueryService)realQueryService).getCqService().executeCqs(
-          Arrays.asList(this.getCqs()));
+      ((DefaultQueryService) realQueryService).getCqService()
+          .executeCqs(Arrays.asList(this.getCqs()));
-      ((DefaultQueryService)realQueryService).getCqService().executeCqs(
-          Arrays.asList(this.getCqs(regionName)));
+      ((DefaultQueryService) realQueryService).getCqService()
+          .executeCqs(Arrays.asList(this.getCqs(regionName)));
-        logger.debug("Unable to execute cqs on the specified region. Error: {}", cqe.getMessage(), cqe);
+        logger.debug("Unable to execute cqs on the specified region. Error: {}", cqe.getMessage(),
+            cqe);
-        cqList.add(((DefaultQueryService)realQueryService).getCqService()
-            .getCq(name));
+        cqList.add(((DefaultQueryService) realQueryService).getCqService().getCq(name));
-      cqs = ((DefaultQueryService)realQueryService).getCqService()
-          .getAllCqs(regionName);
+      cqs = ((DefaultQueryService) realQueryService).getCqService().getAllCqs(regionName);
-      cq = ((DefaultQueryService)realQueryService).getCqService()
-          .newCq(null, queryString, cqAttributes,
-              ((DefaultQueryService)realQueryService).getPool(), false);
+      cq = ((DefaultQueryService) realQueryService).getCqService().newCq(null, queryString,
+          cqAttributes, ((DefaultQueryService) realQueryService).getPool(), false);
-  public CqQuery newCq(String queryString, CqAttributes cqAttributes,
-      boolean isDurable) throws QueryInvalidException, CqException {
+  public CqQuery newCq(String queryString, CqAttributes cqAttributes, boolean isDurable)
+      throws QueryInvalidException, CqException {
-      cq = ((DefaultQueryService)realQueryService).getCqService()
-          .newCq(null, queryString, cqAttributes,
-              ((DefaultQueryService)realQueryService).getPool(), isDurable);
+      cq = ((DefaultQueryService) realQueryService).getCqService().newCq(null, queryString,
+          cqAttributes, ((DefaultQueryService) realQueryService).getPool(), isDurable);
-  public CqQuery newCq(String cqName, String queryString,
-      CqAttributes cqAttributes) throws QueryInvalidException,
-      CqExistsException, CqException {
+  public CqQuery newCq(String cqName, String queryString, CqAttributes cqAttributes)
+      throws QueryInvalidException, CqExistsException, CqException {
-            LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL
-                .toLocalizedString());
+            LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL.toLocalizedString());
-      ClientCQ cq = ((DefaultQueryService)realQueryService)
-          .getCqService().newCq(cqName, queryString, cqAttributes,
-              ((DefaultQueryService)realQueryService).getPool(), false);
+      ClientCQ cq = ((DefaultQueryService) realQueryService).getCqService().newCq(cqName,
+          queryString, cqAttributes, ((DefaultQueryService) realQueryService).getPool(), false);
-  public CqQuery newCq(String cqName, String queryString,
-      CqAttributes cqAttributes, boolean isDurable)
-      throws QueryInvalidException, CqExistsException, CqException {
+  public CqQuery newCq(String cqName, String queryString, CqAttributes cqAttributes,
+      boolean isDurable) throws QueryInvalidException, CqExistsException, CqException {
-            LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL
-                .toLocalizedString());
+            LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL.toLocalizedString());
-      ClientCQ cq = ((DefaultQueryService)realQueryService)
-          .getCqService().newCq(cqName, queryString, cqAttributes,
-              ((DefaultQueryService)realQueryService).getPool(),
-              isDurable);
+      ClientCQ cq = ((DefaultQueryService) realQueryService).getCqService().newCq(cqName,
+          queryString, cqAttributes, ((DefaultQueryService) realQueryService).getPool(), isDurable);
-    return ((DefaultQueryService)realQueryService).newQuery(queryString,
-        this.proxyCache);
+    return ((DefaultQueryService) realQueryService).newQuery(queryString, this.proxyCache);
-      ((DefaultQueryService)realQueryService).getCqService().stopCqs(
-          Arrays.asList(this.getCqs()));
+      ((DefaultQueryService) realQueryService).getCqService().stopCqs(Arrays.asList(this.getCqs()));
-      ((DefaultQueryService)realQueryService).getCqService().stopCqs(
-          Arrays.asList(this.getCqs(regionName)));
+      ((DefaultQueryService) realQueryService).getCqService()
+          .stopCqs(Arrays.asList(this.getCqs(regionName)));
-        logger.debug("Unable to stop cqs on the specified region. Error: {}", cqe.getMessage(), cqe);
+        logger.debug("Unable to stop cqs on the specified region. Error: {}", cqe.getMessage(),
+            cqe);
-  
+
-      ((DefaultQueryService)realQueryService).getAllDurableCqsFromServer();
+      ((DefaultQueryService) realQueryService).getAllDurableCqsFromServer();
-        logger.debug("Unable to get all durablec client cqs on the specified region. Error: {}", cqe.getMessage(), cqe);
+        logger.debug("Unable to get all durablec client cqs on the specified region. Error: {}",
+            cqe.getMessage(), cqe);

