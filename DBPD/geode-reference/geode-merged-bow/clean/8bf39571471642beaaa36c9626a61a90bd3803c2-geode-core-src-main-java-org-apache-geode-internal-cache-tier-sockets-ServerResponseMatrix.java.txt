Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Matrix describes the state machine that needs to be applied to register
- * interest response processing and events comming from notification chanel
+ * Matrix describes the state machine that needs to be applied to register interest response
+ * processing and events comming from notification chanel
- * When register interest responses are deserialized and added to the cache, the
- * following rules are applied
+ * When register interest responses are deserialized and added to the cache, the following rules are
+ * applied
- * 1) If the entry exists in the cache with a valid value, we consider it to be
- * more current (either because it made it via the update channel or because the
- * client updated it as part of put or invalidate)
+ * 1) If the entry exists in the cache with a valid value, we consider it to be more current (either
+ * because it made it via the update channel or because the client updated it as part of put or
+ * invalidate)
- * 2) If the entry is invalid, and the RI response is valid, the valid value is
- * put into the cache
+ * 2) If the entry is invalid, and the RI response is valid, the valid value is put into the cache
- * 3) If an entry is marked destroyed (either from the client operation or via
- * the update channel), it is not updated from the RI response. Destroyed
- * entries are gathered up after the RI response is completed and removed from
- * the system
+ * 3) If an entry is marked destroyed (either from the client operation or via the update channel),
+ * it is not updated from the RI response. Destroyed entries are gathered up after the RI response
+ * is completed and removed from the system
-public class ServerResponseMatrix
-{
+public class ServerResponseMatrix {
-  public static boolean checkForValidStateAfterRegisterInterest(
-      LocalRegion region, Object key, Object serverValue)
-  {
+  public static boolean checkForValidStateAfterRegisterInterest(LocalRegion region, Object key,
+      Object serverValue) {
-    }
-    else {
+    } else {
-      }
-      else if (token == Token.INVALID) {
+      } else if (token == Token.INVALID) {
-      }
-      else {
+      } else {
-    boolean matrix[][] = { { true, true }, { false, false }, { true, true },
-        { true, true } };
+    boolean matrix[][] = {{true, true}, {false, false}, {true, true}, {true, true}};
-  public static boolean checkForValidStateAfterNotification(LocalRegion region,
-      Object key, int operation)
-  {
+  public static boolean checkForValidStateAfterNotification(LocalRegion region, Object key,
+      int operation) {
-    boolean matrix[][] = { { true, true, true, true },
-        { true, true, true, true }, { true, true, true, true },
-        { true, true, true, true } };
+    boolean matrix[][] = {{true, true, true, true}, {true, true, true, true},
+        {true, true, true, true}, {true, true, true, true}};
-    }
-    else {
+    } else {
-      if (token == Token.DESTROYED || token == Token.REMOVED_PHASE1 || token == Token.REMOVED_PHASE2 || token == Token.TOMBSTONE) {
+      if (token == Token.DESTROYED || token == Token.REMOVED_PHASE1 || token == Token.REMOVED_PHASE2
+          || token == Token.TOMBSTONE) {
-      }
-      else if (token == Token.LOCAL_INVALID) {
+      } else if (token == Token.LOCAL_INVALID) {
-      }
-      else if (token == Token.INVALID) {
+      } else if (token == Token.INVALID) {
-      }
-      else {
+      } else {
-    case MessageType.LOCAL_CREATE:
-      notificationState = 0;
-      break;
-    case MessageType.LOCAL_UPDATE:
-      notificationState = 1;
-      break;
-    case MessageType.LOCAL_INVALIDATE:
-      notificationState = 2;
-      break;
-    case MessageType.LOCAL_DESTROY:
-      notificationState = 3;
-      break;
+      case MessageType.LOCAL_CREATE:
+        notificationState = 0;
+        break;
+      case MessageType.LOCAL_UPDATE:
+        notificationState = 1;
+        break;
+      case MessageType.LOCAL_INVALIDATE:
+        notificationState = 2;
+        break;
+      case MessageType.LOCAL_DESTROY:
+        notificationState = 3;
+        break;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66