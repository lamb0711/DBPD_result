GEODE-8273: Cleanup GfshExecution and GfshScript (#5267)

* Use GeodeAwaitility timeout instead of hardcoded timeouts.
* Use just one source for Charset.
* Minor formatting changes.
+import static java.util.Arrays.stream;
+import static java.util.concurrent.TimeUnit.MINUTES;
+import static java.util.stream.Stream.concat;
+import static org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace;
+import static org.apache.geode.test.awaitility.GeodeAwaitility.getTimeout;
-import java.util.Arrays;
+import java.nio.charset.Charset;
-import java.util.concurrent.TimeUnit;
-import com.google.common.base.Charsets;
-import com.google.common.collect.Streams;
-import org.apache.commons.lang3.exception.ExceptionUtils;
-
+
-    return this.process;
+    return process;
-    Predicate<File> isServerDir = (File directory) -> Arrays.stream(directory.list())
+    Predicate<File> isServerDir = directory -> stream(directory.list())
-    return Arrays.stream(potentialMemberDirectories).filter(isServerDir)
+    return stream(potentialMemberDirectories)
+        .filter(isServerDir)
-    Predicate<File> isLocatorDir = (File directory) -> Arrays.stream(directory.list())
+    Predicate<File> isLocatorDir = directory -> stream(directory.list())
-    return Arrays.stream(potentialMemberDirectories).filter(isLocatorDir)
+    return stream(potentialMemberDirectories)
+        .filter(isLocatorDir)
-    System.out
-        .println("Printing contents of all log files found in " + workingDir.getAbsolutePath());
+    System.out.println(
+        "Printing contents of all log files found in " + workingDir.getAbsolutePath());
-      try (BufferedReader br =
-          new BufferedReader(new InputStreamReader(new FileInputStream(logFile), Charsets.UTF_8))) {
+      try (BufferedReader br = new BufferedReader(new InputStreamReader(
+          new FileInputStream(logFile), Charset.defaultCharset()))) {
-      } catch (IOException ignored) {
-        System.out.println("Unable to print log due to: " + ExceptionUtils.getStackTrace(ignored));
+      } catch (IOException e) {
+        System.out.println("Unable to print log due to: " + getStackTrace(e));
-    return Stream.concat(servers.stream(), locators.stream()).flatMap(this::findLogFiles)
+    return concat(servers.stream(), locators.stream())
+        .flatMap(this::findLogFiles)
-    return Arrays.stream(memberDir.listFiles()).filter(File::isFile)
+    return stream(memberDir.listFiles())
+        .filter(File::isFile)
-      boolean exited = false;
+      boolean exited;
-        exited = process.waitFor(1, TimeUnit.MINUTES);
+        exited = process.waitFor(getTimeout().toMinutes(), MINUTES);
-        throw new RuntimeException(e.getMessage(), e);
+        throw new RuntimeException(e);
-    Stream<String> stopServers =
-        getServerDirs().stream().map(f -> "stop server --dir=" + quoteArgument(f.toString()));
-    Stream<String> stopLocators =
-        getLocatorDirs().stream().map(f -> "stop locator --dir=" + quoteArgument(f.toString()));
-    return Streams.concat(stopServers, stopLocators).toArray(String[]::new);
+    Stream<String> stopServers = getServerDirs()
+        .stream()
+        .map(f -> "stop server --dir=" + quoteArgument(f.toString()));
+    Stream<String> stopLocators = getLocatorDirs()
+        .stream()
+        .map(f -> "stop locator --dir=" + quoteArgument(f.toString()));
+    return concat(stopServers, stopLocators)
+        .toArray(String[]::new);

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS42 INS59 INS59 INS42 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL9 DEL34 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42