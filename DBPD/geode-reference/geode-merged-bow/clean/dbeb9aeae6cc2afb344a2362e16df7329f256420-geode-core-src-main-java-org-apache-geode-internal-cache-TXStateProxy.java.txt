Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This interface extends {@link TXStateInterface} providing for a proxy for the
- * real transaction on a remote data store node.
+ * This interface extends {@link TXStateInterface} providing for a proxy for the real transaction on
+ * a remote data store node.
-  
+
-  
+
-  
+
-  
+
-  
+
+
-  
+
-   * establishes the synchronization thread used for client/server
-   * beforeCompletion/afterCompletion processing
+   * establishes the synchronization thread used for client/server beforeCompletion/afterCompletion
+   * processing
+   * 
+
-  
+
-   * Called by {@link TXManagerImpl#internalSuspend()} to perform additional
-   * tasks required to suspend a transaction
+   * Called by {@link TXManagerImpl#internalSuspend()} to perform additional tasks required to
+   * suspend a transaction
-  
+
-   * Called by {@link TXManagerImpl#resume(TXStateProxy)} to
-   * perform additional tasks required to resume a transaction
+   * Called by {@link TXManagerImpl#resume(TXStateProxy)} to perform additional tasks required to
+   * resume a transaction
-  
+
-  public void recordTXOperation(ServerRegionDataAccess proxy, ServerRegionOperation op, Object key, Object[] arguments);
-  
+  public void recordTXOperation(ServerRegionDataAccess proxy, ServerRegionOperation op, Object key,
+      Object[] arguments);
+
-  
+
-   * During client transaction failover, it is possible
-   * to get two Commit (rollback) requests for a single transaction.
-   * It becomes necessary to set the progress flag when the second
-   * request arrives. When the requeset is processed, progress flag
-   * must be reset. see bug 43350
+   * During client transaction failover, it is possible to get two Commit (rollback) requests for a
+   * single transaction. It becomes necessary to set the progress flag when the second request
+   * arrives. When the requeset is processed, progress flag must be reset. see bug 43350
+   * 
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66