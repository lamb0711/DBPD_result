Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Describes an individual statistic whose value is updated by an
- * application and may be archived by GemFire.  These descriptions are
- * gathered together in a {@link StatisticsType}.
+ * Describes an individual statistic whose value is updated by an application and may be archived by
+ * GemFire. These descriptions are gathered together in a {@link StatisticsType}.
-  ////////////////////  Instance Fields  ////////////////////
+  //////////////////// Instance Fields ////////////////////
-  /** The physical offset used to access the data that stores the
-   * value for this statistic in an instance of {@link Statistics}
+  /**
+   * The physical offset used to access the data that stores the value for this statistic in an
+   * instance of {@link Statistics}
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-   * @throws IllegalArgumentException
-   *         <code>code</code> is an unknown type
+   * @throws IllegalArgumentException <code>code</code> is an unknown type
-    case BYTE: 
-      return "byte";
-    case SHORT: 
-      return "short";
-    case FLOAT: 
-      return "float";
-    case INT: 
-      return "int";
-    case LONG:
-      return "long";
-    case DOUBLE:
-      return "double";
-    default:
-      throw new IllegalArgumentException(LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0.toLocalizedString(Integer.valueOf(code)));
+      case BYTE:
+        return "byte";
+      case SHORT:
+        return "short";
+      case FLOAT:
+        return "float";
+      case INT:
+        return "int";
+      case LONG:
+        return "long";
+      case DOUBLE:
+        return "double";
+      default:
+        throw new IllegalArgumentException(
+            LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0
+                .toLocalizedString(Integer.valueOf(code)));
-   * @throws IllegalArgumentException
-   *         <code>code</code> is an unknown type
+   * @throws IllegalArgumentException <code>code</code> is an unknown type
-    case BYTE: 
-      return 8;
-    case SHORT: 
-      return 16;
-    case FLOAT: 
-      return 32;
-    case INT: 
-      return 32;
-    case LONG:
-      return 64;
-    case DOUBLE:
-      return 64;
-    default:
-      throw new IllegalArgumentException(LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0.toLocalizedString(Integer.valueOf(code)));
+      case BYTE:
+        return 8;
+      case SHORT:
+        return 16;
+      case FLOAT:
+        return 32;
+      case INT:
+        return 32;
+      case LONG:
+        return 64;
+      case DOUBLE:
+        return 64;
+      default:
+        throw new IllegalArgumentException(
+            LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0
+                .toLocalizedString(Integer.valueOf(code)));
-   * @throws IllegalArgumentException
-   *         <code>code</code> is an unknown type
+   * @throws IllegalArgumentException <code>code</code> is an unknown type
-    case BYTE: 
-      return byte.class;
-    case SHORT: 
-      return short.class;
-    case FLOAT: 
-      return float.class;
-    case INT: 
-      return int.class;
-    case LONG:
-      return long.class;
-    case DOUBLE:
-      return double.class;
-    default:
-      throw new IllegalArgumentException(LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0.toLocalizedString(Integer.valueOf(code)));
+      case BYTE:
+        return byte.class;
+      case SHORT:
+        return short.class;
+      case FLOAT:
+        return float.class;
+      case INT:
+        return int.class;
+      case LONG:
+        return long.class;
+      case DOUBLE:
+        return double.class;
+      default:
+        throw new IllegalArgumentException(
+            LocalizedStrings.StatisticDescriptorImpl_UNKNOWN_TYPE_CODE_0
+                .toLocalizedString(Integer.valueOf(code)));
-  public static StatisticDescriptor createIntCounter(String name, String description,
-                                              String units, boolean isLargerBetter) {
+  public static StatisticDescriptor createIntCounter(String name, String description, String units,
+      boolean isLargerBetter) {
-  public static StatisticDescriptor createLongCounter(String name, String description,
-                                               String units, boolean isLargerBetter) {
+
+  public static StatisticDescriptor createLongCounter(String name, String description, String units,
+      boolean isLargerBetter) {
+
-                                                 String units, boolean isLargerBetter) {
+      String units, boolean isLargerBetter) {
-  public static StatisticDescriptor createIntGauge(String name, String description,
-                                            String units, boolean isLargerBetter) {
+
+  public static StatisticDescriptor createIntGauge(String name, String description, String units,
+      boolean isLargerBetter) {
-  public static StatisticDescriptor createLongGauge(String name, String description,
-                                             String units, boolean isLargerBetter) {
+
+  public static StatisticDescriptor createLongGauge(String name, String description, String units,
+      boolean isLargerBetter) {
-  public static StatisticDescriptor createDoubleGauge(String name, String description,
-                                               String units, boolean isLargerBetter) {
+
+  public static StatisticDescriptor createDoubleGauge(String name, String description, String units,
+      boolean isLargerBetter) {
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * @param name
-   *        The name of the statistic (for example,
-   *        <code>"numDatabaseLookups"</code>) 
-   * @param typeCode
-   *        The type of the statistic.  This must be either
-   *        <code>int.class</code>, <code>long.class</code>, or
-   *        <code>double.class</code>.
-   * @param description
-   *        A description of the statistic (for example, <code>"The
+   * @param name The name of the statistic (for example, <code>"numDatabaseLookups"</code>)
+   * @param typeCode The type of the statistic. This must be either <code>int.class</code>,
+   *        <code>long.class</code>, or <code>double.class</code>.
+   * @param description A description of the statistic (for example, <code>"The
-   * @param unit
-   *        The units that this statistic is measure in (for example,
-   *        <code>"milliseconds"</code>) 
-   * @param isCounter
-   *        Is this statistic a counter?  That is, does its value
-   *        change monotonically (always increases or always
-   *        decreases)? 
-   * @param isLargerBetter
-   *        True if larger values indicate better performance.
+   * @param unit The units that this statistic is measure in (for example,
+   *        <code>"milliseconds"</code>)
+   * @param isCounter Is this statistic a counter? That is, does its value change monotonically
+   *        (always increases or always decreases)?
+   * @param isLargerBetter True if larger values indicate better performance.
-   * @throws IllegalArgumentException
-   *         <code>type</code> is not one of <code>int.class</code>,
+   * @throws IllegalArgumentException <code>type</code> is not one of <code>int.class</code>,
-  private StatisticDescriptorImpl(String name, byte typeCode,
-                                  String description, String unit,
-                                  boolean isCounter,
-                                  boolean isLargerBetter) {
+  private StatisticDescriptorImpl(String name, byte typeCode, String description, String unit,
+      boolean isCounter, boolean isLargerBetter) {
-  ////////////////////  StatisticDescriptor Methods  ////////////////////
+  //////////////////// StatisticDescriptor Methods ////////////////////
-  
+
-  
+
-//     if (this.id == INVALID_OFFSET) {
-//       String s = "The id has not been initialized yet.";
-//       throw new IllegalStateException(s);
-//     }
+    // if (this.id == INVALID_OFFSET) {
+    // String s = "The id has not been initialized yet.";
+    // throw new IllegalStateException(s);
+    // }
-    //Assert.assertTrue(this.id >= 0);
+    // Assert.assertTrue(this.id >= 0);
-  
+
-    case StatisticDescriptorImpl.INT:
-      return (int)bits;
-    case StatisticDescriptorImpl.LONG:
-      return bits;
-    case StatisticDescriptorImpl.DOUBLE:
-      return Double.longBitsToDouble(bits);
-    default:
-      throw new RuntimeException(LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0.toLocalizedString(Byte.valueOf(this.typeCode)));
+      case StatisticDescriptorImpl.INT:
+        return (int) bits;
+      case StatisticDescriptorImpl.LONG:
+        return bits;
+      case StatisticDescriptorImpl.DOUBLE:
+        return Double.longBitsToDouble(bits);
+      default:
+        throw new RuntimeException(
+            LocalizedStrings.StatisticsImpl_UNEXPECTED_STAT_DESCRIPTOR_TYPE_CODE_0
+                .toLocalizedString(Byte.valueOf(this.typeCode)));
-  
-  ////////////////////  Instance Methods  ////////////////////
+
+  //////////////////// Instance Methods ////////////////////
-    //Assert.assertTrue(id >= 0);
+    // Assert.assertTrue(id >= 0);
-  ////////////////////  Comparable Methods  ////////////////////
+  //////////////////// Comparable Methods ////////////////////
-   * <code>StatisticDescriptor</code>s are naturally ordered by their
-   * name. 
+   * <code>StatisticDescriptor</code>s are naturally ordered by their name.
-   * @throws IllegalArgumentException
-   *         <code>o</code> is not a <code>StatisticDescriptor</code>
+   * @throws IllegalArgumentException <code>o</code> is not a <code>StatisticDescriptor</code>
-      throw new IllegalArgumentException(LocalizedStrings.StatisticDescriptorImpl_THE_STATISTIC_0_WITH_ID_1_IS_OF_TYPE_2_AND_IT_WAS_EXPECTED_TO_BE_AN_INT.toLocalizedString(new Object[] {getName(), Integer.valueOf(getId()), StatisticDescriptorImpl.getTypeCodeName(getTypeCode())}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.StatisticDescriptorImpl_THE_STATISTIC_0_WITH_ID_1_IS_OF_TYPE_2_AND_IT_WAS_EXPECTED_TO_BE_AN_INT
+              .toLocalizedString(new Object[] {getName(), Integer.valueOf(getId()),
+                  StatisticDescriptorImpl.getTypeCodeName(getTypeCode())}));
-      
+
-      throw new IllegalArgumentException(LocalizedStrings.StatisticDescriptorImpl_THE_STATISTIC_0_WITH_ID_1_IS_OF_TYPE_2_AND_IT_WAS_EXPECTED_TO_BE_A_DOUBLE.toLocalizedString(new Object[] {getName(), Integer.valueOf(getId()), StatisticDescriptorImpl.getTypeCodeName(getTypeCode())}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.StatisticDescriptorImpl_THE_STATISTIC_0_WITH_ID_1_IS_OF_TYPE_2_AND_IT_WAS_EXPECTED_TO_BE_A_DOUBLE
+              .toLocalizedString(new Object[] {getName(), Integer.valueOf(getId()),
+                  StatisticDescriptorImpl.getTypeCodeName(getTypeCode())}));
+
-    StatisticDescriptorImpl other = (StatisticDescriptorImpl)o;
+    StatisticDescriptorImpl other = (StatisticDescriptorImpl) o;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66