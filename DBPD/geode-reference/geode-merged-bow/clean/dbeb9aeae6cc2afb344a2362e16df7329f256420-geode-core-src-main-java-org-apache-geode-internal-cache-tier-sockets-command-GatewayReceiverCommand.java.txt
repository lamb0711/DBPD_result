Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.internal.util.BlobHelper;
+import org.apache.geode.pdx.internal.EnumId;
+import org.apache.geode.pdx.internal.EnumInfo;
+import org.apache.geode.pdx.internal.PdxType;
-  private GatewayReceiverCommand() {
-  }
+  private GatewayReceiverCommand() {}
-    GemFireCacheImpl gfc = (GemFireCacheImpl)servConn.getCachedRegionHelper().getCache();
+    GemFireCacheImpl gfc = (GemFireCacheImpl) servConn.getCachedRegionHelper().getCache();
-      String reason = LocalizedStrings.ProcessBatch_WAS_NOT_FOUND_DURING_BATCH_CREATE_REQUEST_0.toLocalizedString(new Object[] {regionName, Integer.valueOf(batchId)});
+      String reason = LocalizedStrings.ProcessBatch_WAS_NOT_FOUND_DURING_BATCH_CREATE_REQUEST_0
+          .toLocalizedString(new Object[] {regionName, Integer.valueOf(batchId)});
-  
+
-    GatewayReceiverStats stats = (GatewayReceiverStats)servConn.getCacheServerStats();
+    GatewayReceiverStats stats = (GatewayReceiverStats) servConn.getCacheServerStats();
-    //requiresResponse = true;// let PROCESS_BATCH deal with this itself
+    // requiresResponse = true;// let PROCESS_BATCH deal with this itself
-    boolean earlyAck = false;//msg.getEarlyAck();
+    boolean earlyAck = false;// msg.getEarlyAck();
-    
+
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_THAT_HAS_ALREADY_BEEN_OR_IS_BEING_PROCESSED_GEMFIRE_GATEWAY_APPLYRETRIES_IS_SET_SO_THIS_BATCH_WILL_BE_PROCESSED_ANYWAY, batchId));
-      }
-      else {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_THAT_HAS_ALREADY_BEEN_OR_IS_BEING_PROCESSED__THIS_PROCESS_BATCH_REQUEST_IS_BEING_IGNORED, batchId));
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_THAT_HAS_ALREADY_BEEN_OR_IS_BEING_PROCESSED_GEMFIRE_GATEWAY_APPLYRETRIES_IS_SET_SO_THIS_BATCH_WILL_BE_PROCESSED_ANYWAY,
+            batchId));
+      } else {
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_THAT_HAS_ALREADY_BEEN_OR_IS_BEING_PROCESSED__THIS_PROCESS_BATCH_REQUEST_IS_BEING_IGNORED,
+            batchId));
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_OUT_OF_ORDER_THE_ID_OF_THE_LAST_BATCH_PROCESSED_WAS_1_THIS_BATCH_REQUEST_WILL_BE_PROCESSED_BUT_SOME_MESSAGES_MAY_HAVE_BEEN_LOST, new Object[] { batchId, servConn.getLatestBatchIdReplied() }));
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ProcessBatch_RECEIVED_PROCESS_BATCH_REQUEST_0_OUT_OF_ORDER_THE_ID_OF_THE_LAST_BATCH_PROCESSED_WAS_1_THIS_BATCH_REQUEST_WILL_BE_PROCESSED_BUT_SOME_MESSAGES_MAY_HAVE_BEEN_LOST,
+          new Object[] {batchId, servConn.getLatestBatchIdReplied()}));
-    
+
-      
-      //writeReply(msg, servConn);
-      //servConn.setAsTrue(RESPONDED);
+
+      // writeReply(msg, servConn);
+      // servConn.setAsTrue(RESPONDED);
-   
+
-      logger.debug("{}: Received process batch request {} containing {} events ({} bytes) with {} acknowledgement on {}", servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(), (earlyAck ? "early" : "normal"), servConn.getSocketString());
+      logger.debug(
+          "{}: Received process batch request {} containing {} events ({} bytes) with {} acknowledgement on {}",
+          servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(),
+          (earlyAck ? "early" : "normal"), servConn.getSocketString());
-        logger.debug("{}: Sent process batch early response for batch {} containing {} events ({} bytes) with {} acknowledgement on {}", servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(), (earlyAck ? "early" : "normal"), servConn.getSocketString());
+        logger.debug(
+            "{}: Sent process batch early response for batch {} containing {} events ({} bytes) with {} acknowledgement on {}",
+            servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(),
+            (earlyAck ? "early" : "normal"), servConn.getSocketString());
-    
-    boolean removeOnException = msg.getPart(partNumber++).getSerializedForm()[0]==1?true:false;
-    
+
+    boolean removeOnException =
+        msg.getPart(partNumber++).getSerializedForm()[0] == 1 ? true : false;
+
-    // events need to be subtratced.  
+    // events need to be subtratced.
+      boolean isPdxEvent = false;
-      
+
-      
+
-          possibleDuplicatePartBytes = (byte[])possibleDuplicatePart
-              .getObject();
-        }
-        catch (Exception e) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
+          possibleDuplicatePartBytes = (byte[]) possibleDuplicatePart.getObject();
+        } catch (Exception e) {
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS,
+              new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                  Integer.valueOf(numberOfEvents)}),
+              e);
-          indexWithoutPDXEvent --;
+          indexWithoutPDXEvent--;
+          isPdxEvent = true;
-        eventIdPart.setVersion(servConn.getClientVersion()); 
+        eventIdPart.setVersion(servConn.getClientVersion());
-          eventId = (EventID)eventIdPart.getObject();
-        }
-        catch (Exception e) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
+          eventId = (EventID) eventIdPart.getObject();
+        } catch (Exception e) {
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS,
+              new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                  Integer.valueOf(numberOfEvents)}),
+              e);
-        }
-        catch (Exception e) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
+        } catch (Exception e) {
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_REQUEST_1_CONTAINING_2_EVENTS,
+              new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                  Integer.valueOf(numberOfEvents)}),
+              e);
-        case 0: // Create
+          case 0: // Create
-          /*
-           * CLIENT EXCEPTION HANDLING TESTING CODE String keySt = (String) key;
-           * System.out.println("Processing new key: " + key); if
-           * (keySt.startsWith("failure")) { throw new
-           * Exception(LocalizedStrings
-           * .ProcessBatch_THIS_EXCEPTION_REPRESENTS_A_FAILURE_ON_THE_SERVER
-           * .toLocalizedString()); }
-           */
+            /*
+             * CLIENT EXCEPTION HANDLING TESTING CODE String keySt = (String) key;
+             * System.out.println("Processing new key: " + key); if (keySt.startsWith("failure")) {
+             * throw new Exception(LocalizedStrings
+             * .ProcessBatch_THIS_EXCEPTION_REPRESENTS_A_FAILURE_ON_THE_SERVER
+             * .toLocalizedString()); }
+             */
-          // Retrieve the value from the message parts (do not deserialize it)
-          valuePart = msg.getPart(partNumber + 5);
-          // try {
-          // logger.warn(getName() + ": Creating key " + key + " value " +
-          // valuePart.getObject());
-          // } catch (Exception e) {}
+            // Retrieve the value from the message parts (do not deserialize it)
+            valuePart = msg.getPart(partNumber + 5);
+            // try {
+            // logger.warn(getName() + ": Creating key " + key + " value " +
+            // valuePart.getObject());
+            // } catch (Exception e) {}
-          // Retrieve the callbackArg from the message parts if necessary
-          int index = partNumber+6;
-          callbackArgExistsPart = msg.getPart(index++);
-          {
-            byte[] partBytes = (byte[])callbackArgExistsPart.getObject();
-            callbackArgExists = partBytes[0] == 0x01;
-          }
-          if (callbackArgExists) {
-            callbackArgPart = msg.getPart(index++);
-            try {
-              callbackArg = callbackArgPart.getObject();
-            } catch (Exception e) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_CREATE_REQUEST_1_FOR_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
-              throw e;
-            }
-          }
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Processing batch create request {} on {} for region {} key {} value {} callbackArg {}, eventId={}", servConn.getName(), batchId, servConn.getSocketString(), regionName, key, valuePart, callbackArg, eventId);
-          }
-          versionTimeStamp = msg.getPart(index++).getLong();
-          // Process the create request
-          if (key == null || regionName == null) {
-            StringId message = null;
-            Object[] messageArgs = new Object[] { servConn.getName(),
-                Integer.valueOf(batchId) };
-            if (key == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_CREATE_REQUEST_1_IS_NULL;
-            }
-            if (regionName == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_CREATE_REQUEST_1_IS_NULL;
-            }
-            String s = message.toLocalizedString(messageArgs);
-            logger.warn(s);
-            throw new Exception(s);
-          }
-          region = (LocalRegion)crHelper.getRegion(regionName);
-          if (region == null) {
-            handleRegionNull(servConn, regionName, batchId);
-          } else {
-            clientEvent = new EventIDHolder(eventId);
-            if (versionTimeStamp > 0) {
-              VersionTag tag = VersionTag.create(region.getVersionMember());
-              tag.setIsGatewayTag(true);
-              tag.setVersionTimeStamp(versionTimeStamp);
-              tag.setDistributedSystemId(dsid);
-              clientEvent.setVersionTag(tag);
-            }
-            clientEvent.setPossibleDuplicate(possibleDuplicate);
-            handleMessageRetry(region, clientEvent);
-            try {
-              byte[] value = valuePart.getSerializedForm();
-              boolean isObject = valuePart.isObject();
-              // [sumedh] This should be done on client while sending
-              // since that is the WAN gateway
-              AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-              if (authzRequest != null) {
-                PutOperationContext putContext = authzRequest.putAuthorize(
-                    regionName, key, value, isObject, callbackArg);
-                value = putContext.getSerializedValue();
-                isObject = putContext.isObject();
-              }
-              // Attempt to create the entry
-              boolean result = false;
-              result = region.basicBridgeCreate(key, value, isObject, callbackArg,
-                      servConn.getProxyID(), false, clientEvent, false); 
-              // If the create fails (presumably because it already exists),
-              // attempt to update the entry
-              if (!result) {
-                result = region.basicBridgePut(key, value, null, isObject,
-                    callbackArg, servConn.getProxyID(), false, clientEvent);
-              }
-
-              if (result || clientEvent.isConcurrencyConflict()) {
-                servConn.setModificationInfo(true, regionName, key);
-                stats.incCreateRequest();
-              } else {
-                // This exception will be logged in the catch block below
-                throw new Exception(
-                    LocalizedStrings.ProcessBatch_0_FAILED_TO_CREATE_OR_UPDATE_ENTRY_FOR_REGION_1_KEY_2_VALUE_3_CALLBACKARG_4
-                        .toLocalizedString(new Object[] { servConn.getName(),
-                            regionName, key, valuePart, callbackArg }));
-              }
-            } catch (Exception e) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_CREATE_REQUEST_1_FOR_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
-              throw e;
-            }
-          }
-          break;
-        case 1: // Update
-          /*
-           * CLIENT EXCEPTION HANDLING TESTING CODE keySt = (String) key;
-           * System.out.println("Processing updated key: " + key); if
-           * (keySt.startsWith("failure")) { throw new
-           * Exception(LocalizedStrings
-           * .ProcessBatch_THIS_EXCEPTION_REPRESENTS_A_FAILURE_ON_THE_SERVER
-           * .toLocalizedString()); }
-           */
-
-          // Retrieve the value from the message parts (do not deserialize it)
-          valuePart = msg.getPart(partNumber + 5);
-          // try {
-          // logger.warn(getName() + ": Updating key " + key + " value " +
-          // valuePart.getObject());
-          // } catch (Exception e) {}
-
-          // Retrieve the callbackArg from the message parts if necessary
-          index = partNumber + 6;
-          callbackArgExistsPart = msg.getPart(index++);
-          {
-            byte[] partBytes = (byte[])callbackArgExistsPart.getObject();
-            callbackArgExists = partBytes[0] == 0x01;
-          }
-          if (callbackArgExists) {
-            callbackArgPart = msg.getPart(index++);
-            try {
-              callbackArg = callbackArgPart.getObject();
-            } catch (Exception e) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
-              throw e;
-            }
-          }
-          versionTimeStamp = msg.getPart(index++).getLong();
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Processing batch update request {} on {} for region {} key {} value {} callbackArg {}", servConn.getName(), batchId, servConn.getSocketString(), regionName, key, valuePart, callbackArg);
-          }
-          // Process the update request
-          if (key == null || regionName == null) {
-            StringId message = null;
-            Object[] messageArgs = new Object[] { servConn.getName(),
-                Integer.valueOf(batchId) };
-            if (key == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_KEY_FOR_THE_BATCH_UPDATE_REQUEST_1_IS_NULL;
-            }
-            if (regionName == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_UPDATE_REQUEST_1_IS_NULL;
-            }
-            String s = message.toLocalizedString(messageArgs);
-            logger.warn(s);
-            throw new Exception(s);
-          }
-          region = (LocalRegion)crHelper.getRegion(regionName);
-          if (region == null) {
-            handleRegionNull(servConn, regionName, batchId);
-          } else {
-            clientEvent = new EventIDHolder(eventId);
-            if (versionTimeStamp > 0) {
-              VersionTag tag = VersionTag.create(region.getVersionMember());
-              tag.setIsGatewayTag(true);
-              tag.setVersionTimeStamp(versionTimeStamp);
-              tag.setDistributedSystemId(dsid);
-              clientEvent.setVersionTag(tag);
-            }
-            clientEvent.setPossibleDuplicate(possibleDuplicate);
-            handleMessageRetry(region, clientEvent);
-            try {
-              byte[] value = valuePart.getSerializedForm();
-              boolean isObject = valuePart.isObject();
-              AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-              if (authzRequest != null) {
-                PutOperationContext putContext = authzRequest.putAuthorize(
-                    regionName, key, value, isObject, callbackArg,
-                    PutOperationContext.UPDATE);
-                value = putContext.getSerializedValue();
-                isObject = putContext.isObject();
-              }
-              boolean result = region.basicBridgePut(key, value, null, isObject,
-                  callbackArg, servConn.getProxyID(), false, clientEvent);
-              if (result|| clientEvent.isConcurrencyConflict()) {
-                servConn.setModificationInfo(true, regionName, key);
-                stats.incUpdateRequest();
-              } else {
-                final Object[] msgArgs = new Object[] { servConn.getName(),
-                    regionName, key, valuePart, callbackArg };
-                final StringId message = LocalizedStrings.ProcessBatch_0_FAILED_TO_UPDATE_ENTRY_FOR_REGION_1_KEY_2_VALUE_3_AND_CALLBACKARG_4;
-                String s = message.toLocalizedString(msgArgs);
-                logger.info(s);
-                throw new Exception(s);
-              }
-            } catch (CancelException e) {
-              // FIXME better exception hierarchy would avoid this check
-              if (servConn.getCachedRegionHelper().getCache()
-                  .getCancelCriterion().isCancelInProgress()) {
-                if (logger.isDebugEnabled()) {
-                  logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn.getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
-                }
-                servConn.setFlagProcessMessagesAsFalse();
-              } else {
-                throw e;
-              }
-              return;
-            } catch (Exception e) {
-              // Preserve the connection under all circumstances
-              logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
-              throw e;
-            }
-          }
-          break;
-        case 2: // Destroy
-          // Retrieve the callbackArg from the message parts if necessary
-          index =  partNumber + 5;
-          callbackArgExistsPart = msg.getPart(index++);
-          {
-            byte[] partBytes = (byte[])callbackArgExistsPart.getObject();
-            callbackArgExists = partBytes[0] == 0x01;
-          }
-          if (callbackArgExists) {
-            callbackArgPart = msg.getPart(index++);
-            try {
-              callbackArg = callbackArgPart.getObject();
-            } catch (Exception e) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_DESTROY_REQUEST_1_CONTAINING_2_EVENTS, new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents) }), e);
-              throw e;
-            }
-          }
-
-          versionTimeStamp = msg.getPart(index++).getLong();
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Processing batch destroy request {} on {} for region {} key {}", servConn.getName(), batchId, servConn.getSocketString(), regionName, key);
-          }
-
-          // Process the destroy request
-          if (key == null || regionName == null) {
-            StringId message = null;
-            if (key == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_KEY_FOR_THE_BATCH_DESTROY_REQUEST_1_IS_NULL;
-            }
-            if (regionName == null) {
-              message = LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_DESTROY_REQUEST_1_IS_NULL;
-            }
-            Object[] messageArgs = new Object[] { servConn.getName(),
-                Integer.valueOf(batchId) };
-            String s = message.toLocalizedString(messageArgs);
-            logger.warn(s);
-            throw new Exception(s);
-          }
-          region = (LocalRegion)crHelper.getRegion(regionName);
-          if (region == null) {
-            handleRegionNull(servConn, regionName, batchId);
-          } else {
-            clientEvent = new EventIDHolder(eventId);
-            if (versionTimeStamp > 0) {
-              VersionTag tag = VersionTag.create(region.getVersionMember());
-              tag.setIsGatewayTag(true);
-              tag.setVersionTimeStamp(versionTimeStamp);
-              tag.setDistributedSystemId(dsid);
-              clientEvent.setVersionTag(tag);
-            }
-            handleMessageRetry(region, clientEvent);
-            // Destroy the entry
-            try {
-              AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-              if (authzRequest != null) {
-                DestroyOperationContext destroyContext = authzRequest
-                    .destroyAuthorize(regionName, key, callbackArg);
-                callbackArg = destroyContext.getCallbackArg();
-              }
-              region.basicBridgeDestroy(key, callbackArg,
-                  servConn.getProxyID(), false, clientEvent);
-              servConn.setModificationInfo(true, regionName, key);
-              stats.incDestroyRequest();
-            } catch (EntryNotFoundException e) {
-              logger.info(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_DURING_BATCH_DESTROY_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] { servConn.getName(), key }));
-              // throw new Exception(e);
-            }
-          }
-          break;
-        case 3: // Update Time-stamp for a RegionEntry
-          
-          try {
-            // Region name
-            regionNamePart = msg.getPart(partNumber + 2);
-            regionName = regionNamePart.getString();
-
-            // Retrieve the event id from the message parts
-            eventIdPart = msg.getPart(partNumber + 3);
-            eventId = (EventID)eventIdPart.getObject();
-            
-            // Retrieve the key from the message parts
-            keyPart = msg.getPart(partNumber + 4);
-            key = keyPart.getStringOrObject();
-       
-            index = partNumber + 5;
-            callbackArgExistsPart = msg.getPart(index++);
-
-            byte[] partBytes = (byte[])callbackArgExistsPart.getObject();
+            int index = partNumber + 6;
+            callbackArgExistsPart = msg.getPart(index++); {
+            byte[] partBytes = (byte[]) callbackArgExistsPart.getObject();
-
+          }
-              callbackArg = callbackArgPart.getObject();
+              try {
+                callbackArg = callbackArgPart.getObject();
+              } catch (Exception e) {
+                logger.warn(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_CREATE_REQUEST_1_FOR_2_EVENTS,
+                    new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                        Integer.valueOf(numberOfEvents)}),
+                    e);
+                throw e;
+              }
-
-          } catch (Exception e) {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_VERSION_REQUEST_1_CONTAINING_2_EVENTS, new Object[] {servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents)}), e);
-            throw e;
-          }
-
-          versionTimeStamp = msg.getPart(index++).getLong();
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Processing batch update-version request {} on {} for region {} key {} value {} callbackArg {}", servConn.getName(), batchId, servConn.getSocketString(), regionName, key, valuePart, callbackArg);
-          }
-          // Process the update time-stamp request
-          if (key == null || regionName == null) {
-            StringId message = LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_VERSION_REQUEST_1_CONTAINING_2_EVENTS;
-            
-            Object[] messageArgs = new Object[] { servConn.getName(), Integer.valueOf(batchId), Integer.valueOf(numberOfEvents)};
-            String s = message.toLocalizedString(messageArgs);
-            logger.warn(s);
-            throw new Exception(s);
-          
-          } else {
-            region = (LocalRegion)crHelper.getRegion(regionName);
-            
+            if (logger.isDebugEnabled()) {
+              logger.debug(
+                  "{}: Processing batch create request {} on {} for region {} key {} value {} callbackArg {}, eventId={}",
+                  servConn.getName(), batchId, servConn.getSocketString(), regionName, key,
+                  valuePart, callbackArg, eventId);
+            }
+            versionTimeStamp = msg.getPart(index++).getLong();
+            // Process the create request
+            if (key == null || regionName == null) {
+              StringId message = null;
+              Object[] messageArgs = new Object[] {servConn.getName(), Integer.valueOf(batchId)};
+              if (key == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_CREATE_REQUEST_1_IS_NULL;
+              }
+              if (regionName == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_CREATE_REQUEST_1_IS_NULL;
+              }
+              String s = message.toLocalizedString(messageArgs);
+              logger.warn(s);
+              throw new Exception(s);
+            }
+            region = (LocalRegion) crHelper.getRegion(regionName);
-
-              
-              
-              // Update the version tag
+              clientEvent.setPossibleDuplicate(possibleDuplicate);
+              handleMessageRetry(region, clientEvent);
+                byte[] value = valuePart.getSerializedForm();
+                boolean isObject = valuePart.isObject();
+                // [sumedh] This should be done on client while sending
+                // since that is the WAN gateway
+                AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+                if (authzRequest != null) {
+                  PutOperationContext putContext =
+                      authzRequest.putAuthorize(regionName, key, value, isObject, callbackArg);
+                  value = putContext.getSerializedValue();
+                  isObject = putContext.isObject();
+                }
+                // Attempt to create the entry
+                boolean result = false;
+                if (isPdxEvent) {
+                  result = addPdxType(crHelper, key, value);
+                } else {
+                  result = region.basicBridgeCreate(key, value, isObject, callbackArg,
+                      servConn.getProxyID(), false, clientEvent, false);
+                  // If the create fails (presumably because it already exists),
+                  // attempt to update the entry
+                  if (!result) {
+                    result = region.basicBridgePut(key, value, null, isObject, callbackArg,
+                        servConn.getProxyID(), false, clientEvent);
+                  }
+                }
-                region.basicBridgeUpdateVersionStamp(key, callbackArg, servConn.getProxyID(), false, clientEvent);
+                if (result || clientEvent.isConcurrencyConflict()) {
+                  servConn.setModificationInfo(true, regionName, key);
+                  stats.incCreateRequest();
+                } else {
+                  // This exception will be logged in the catch block below
+                  throw new Exception(
+                      LocalizedStrings.ProcessBatch_0_FAILED_TO_CREATE_OR_UPDATE_ENTRY_FOR_REGION_1_KEY_2_VALUE_3_CALLBACKARG_4
+                          .toLocalizedString(new Object[] {servConn.getName(), regionName, key,
+                              valuePart, callbackArg}));
+                }
+              } catch (Exception e) {
+                logger.warn(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_CREATE_REQUEST_1_FOR_2_EVENTS,
+                    new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                        Integer.valueOf(numberOfEvents)}),
+                    e);
+                throw e;
+              }
+            }
+            break;
+          case 1: // Update
+            /*
+             * CLIENT EXCEPTION HANDLING TESTING CODE keySt = (String) key;
+             * System.out.println("Processing updated key: " + key); if
+             * (keySt.startsWith("failure")) { throw new Exception(LocalizedStrings
+             * .ProcessBatch_THIS_EXCEPTION_REPRESENTS_A_FAILURE_ON_THE_SERVER
+             * .toLocalizedString()); }
+             */
+            // Retrieve the value from the message parts (do not deserialize it)
+            valuePart = msg.getPart(partNumber + 5);
+            // try {
+            // logger.warn(getName() + ": Updating key " + key + " value " +
+            // valuePart.getObject());
+            // } catch (Exception e) {}
+
+            // Retrieve the callbackArg from the message parts if necessary
+            index = partNumber + 6;
+            callbackArgExistsPart = msg.getPart(index++); {
+            byte[] partBytes = (byte[]) callbackArgExistsPart.getObject();
+            callbackArgExists = partBytes[0] == 0x01;
+          }
+            if (callbackArgExists) {
+              callbackArgPart = msg.getPart(index++);
+              try {
+                callbackArg = callbackArgPart.getObject();
+              } catch (Exception e) {
+                logger.warn(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_REQUEST_1_CONTAINING_2_EVENTS,
+                    new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                        Integer.valueOf(numberOfEvents)}),
+                    e);
+                throw e;
+              }
+            }
+            versionTimeStamp = msg.getPart(index++).getLong();
+            if (logger.isDebugEnabled()) {
+              logger.debug(
+                  "{}: Processing batch update request {} on {} for region {} key {} value {} callbackArg {}",
+                  servConn.getName(), batchId, servConn.getSocketString(), regionName, key,
+                  valuePart, callbackArg);
+            }
+            // Process the update request
+            if (key == null || regionName == null) {
+              StringId message = null;
+              Object[] messageArgs = new Object[] {servConn.getName(), Integer.valueOf(batchId)};
+              if (key == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_KEY_FOR_THE_BATCH_UPDATE_REQUEST_1_IS_NULL;
+              }
+              if (regionName == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_UPDATE_REQUEST_1_IS_NULL;
+              }
+              String s = message.toLocalizedString(messageArgs);
+              logger.warn(s);
+              throw new Exception(s);
+            }
+            region = (LocalRegion) crHelper.getRegion(regionName);
+            if (region == null) {
+              handleRegionNull(servConn, regionName, batchId);
+            } else {
+              clientEvent = new EventIDHolder(eventId);
+              if (versionTimeStamp > 0) {
+                VersionTag tag = VersionTag.create(region.getVersionMember());
+                tag.setIsGatewayTag(true);
+                tag.setVersionTimeStamp(versionTimeStamp);
+                tag.setDistributedSystemId(dsid);
+                clientEvent.setVersionTag(tag);
+              }
+              clientEvent.setPossibleDuplicate(possibleDuplicate);
+              handleMessageRetry(region, clientEvent);
+              try {
+                byte[] value = valuePart.getSerializedForm();
+                boolean isObject = valuePart.isObject();
+                AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+                if (authzRequest != null) {
+                  PutOperationContext putContext = authzRequest.putAuthorize(regionName, key, value,
+                      isObject, callbackArg, PutOperationContext.UPDATE);
+                  value = putContext.getSerializedValue();
+                  isObject = putContext.isObject();
+                }
+                boolean result = false;
+                if (isPdxEvent) {
+                  result = addPdxType(crHelper, key, value);
+                } else {
+                  result = region.basicBridgePut(key, value, null, isObject, callbackArg,
+                      servConn.getProxyID(), false, clientEvent);
+                }
+                if (result || clientEvent.isConcurrencyConflict()) {
+                  servConn.setModificationInfo(true, regionName, key);
+                  stats.incUpdateRequest();
+                } else {
+                  final Object[] msgArgs =
+                      new Object[] {servConn.getName(), regionName, key, valuePart, callbackArg};
+                  final StringId message =
+                      LocalizedStrings.ProcessBatch_0_FAILED_TO_UPDATE_ENTRY_FOR_REGION_1_KEY_2_VALUE_3_AND_CALLBACKARG_4;
+                  String s = message.toLocalizedString(msgArgs);
+                  logger.info(s);
+                  throw new Exception(s);
+                }
+              } catch (CancelException e) {
+                // FIXME better exception hierarchy would avoid this check
+                if (servConn.getCachedRegionHelper().getCache().getCancelCriterion()
+                    .isCancelInProgress()) {
+                  if (logger.isDebugEnabled()) {
+                    logger.debug(
+                        "{} ignoring message of type {} from client {} because shutdown occurred during message processing.",
+                        servConn.getName(), MessageType.getString(msg.getMessageType()),
+                        servConn.getProxyID());
+                  }
+                  servConn.setFlagProcessMessagesAsFalse();
+                  servConn.setClientDisconnectedException(e);
+                } else {
+                  throw e;
+                }
+                return;
+              } catch (Exception e) {
+                // Preserve the connection under all circumstances
+                logger.warn(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_REQUEST_1_CONTAINING_2_EVENTS,
+                    new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                        Integer.valueOf(numberOfEvents)}),
+                    e);
+                throw e;
+              }
+            }
+            break;
+          case 2: // Destroy
+            // Retrieve the callbackArg from the message parts if necessary
+            index = partNumber + 5;
+            callbackArgExistsPart = msg.getPart(index++); {
+            byte[] partBytes = (byte[]) callbackArgExistsPart.getObject();
+            callbackArgExists = partBytes[0] == 0x01;
+          }
+            if (callbackArgExists) {
+              callbackArgPart = msg.getPart(index++);
+              try {
+                callbackArg = callbackArgPart.getObject();
+              } catch (Exception e) {
+                logger.warn(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_DESTROY_REQUEST_1_CONTAINING_2_EVENTS,
+                    new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                        Integer.valueOf(numberOfEvents)}),
+                    e);
+                throw e;
+              }
+            }
+
+            versionTimeStamp = msg.getPart(index++).getLong();
+            if (logger.isDebugEnabled()) {
+              logger.debug("{}: Processing batch destroy request {} on {} for region {} key {}",
+                  servConn.getName(), batchId, servConn.getSocketString(), regionName, key);
+            }
+
+            // Process the destroy request
+            if (key == null || regionName == null) {
+              StringId message = null;
+              if (key == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_KEY_FOR_THE_BATCH_DESTROY_REQUEST_1_IS_NULL;
+              }
+              if (regionName == null) {
+                message =
+                    LocalizedStrings.ProcessBatch_0_THE_INPUT_REGION_NAME_FOR_THE_BATCH_DESTROY_REQUEST_1_IS_NULL;
+              }
+              Object[] messageArgs = new Object[] {servConn.getName(), Integer.valueOf(batchId)};
+              String s = message.toLocalizedString(messageArgs);
+              logger.warn(s);
+              throw new Exception(s);
+            }
+            region = (LocalRegion) crHelper.getRegion(regionName);
+            if (region == null) {
+              handleRegionNull(servConn, regionName, batchId);
+            } else {
+              clientEvent = new EventIDHolder(eventId);
+              if (versionTimeStamp > 0) {
+                VersionTag tag = VersionTag.create(region.getVersionMember());
+                tag.setIsGatewayTag(true);
+                tag.setVersionTimeStamp(versionTimeStamp);
+                tag.setDistributedSystemId(dsid);
+                clientEvent.setVersionTag(tag);
+              }
+              handleMessageRetry(region, clientEvent);
+              // Destroy the entry
+              try {
+                AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+                if (authzRequest != null) {
+                  DestroyOperationContext destroyContext =
+                      authzRequest.destroyAuthorize(regionName, key, callbackArg);
+                  callbackArg = destroyContext.getCallbackArg();
+                }
+                region.basicBridgeDestroy(key, callbackArg, servConn.getProxyID(), false,
+                    clientEvent);
+                servConn.setModificationInfo(true, regionName, key);
+                stats.incDestroyRequest();
-                logger.info(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_DURING_BATCH_UPDATE_VERSION_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] { servConn.getName(), key }));
+                logger.info(LocalizedMessage.create(
+                    LocalizedStrings.ProcessBatch_0_DURING_BATCH_DESTROY_NO_ENTRY_WAS_FOUND_FOR_KEY_1,
+                    new Object[] {servConn.getName(), key}));
-          }
-          
-          break;
-        default:
-          logger.fatal(LocalizedMessage.create(LocalizedStrings.Processbatch_0_UNKNOWN_ACTION_TYPE_1_FOR_BATCH_FROM_2, new Object[] { servConn.getName(), Integer.valueOf(actionType), servConn.getSocketString() }));
-        stats.incUnknowsOperationsReceived();
+            break;
+          case 3: // Update Time-stamp for a RegionEntry
+
+            try {
+              // Region name
+              regionNamePart = msg.getPart(partNumber + 2);
+              regionName = regionNamePart.getString();
+
+              // Retrieve the event id from the message parts
+              eventIdPart = msg.getPart(partNumber + 3);
+              eventId = (EventID) eventIdPart.getObject();
+
+              // Retrieve the key from the message parts
+              keyPart = msg.getPart(partNumber + 4);
+              key = keyPart.getStringOrObject();
+
+              // Retrieve the callbackArg from the message parts if necessary
+              index = partNumber + 5;
+              callbackArgExistsPart = msg.getPart(index++);
+
+              byte[] partBytes = (byte[]) callbackArgExistsPart.getObject();
+              callbackArgExists = partBytes[0] == 0x01;
+
+              if (callbackArgExists) {
+                callbackArgPart = msg.getPart(index++);
+                callbackArg = callbackArgPart.getObject();
+              }
+
+            } catch (Exception e) {
+              logger.warn(LocalizedMessage.create(
+                  LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_VERSION_REQUEST_1_CONTAINING_2_EVENTS,
+                  new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                      Integer.valueOf(numberOfEvents)}),
+                  e);
+              throw e;
+            }
+
+            versionTimeStamp = msg.getPart(index++).getLong();
+            if (logger.isDebugEnabled()) {
+              logger.debug(
+                  "{}: Processing batch update-version request {} on {} for region {} key {} value {} callbackArg {}",
+                  servConn.getName(), batchId, servConn.getSocketString(), regionName, key,
+                  valuePart, callbackArg);
+            }
+            // Process the update time-stamp request
+            if (key == null || regionName == null) {
+              StringId message =
+                  LocalizedStrings.ProcessBatch_0_CAUGHT_EXCEPTION_PROCESSING_BATCH_UPDATE_VERSION_REQUEST_1_CONTAINING_2_EVENTS;
+
+              Object[] messageArgs = new Object[] {servConn.getName(), Integer.valueOf(batchId),
+                  Integer.valueOf(numberOfEvents)};
+              String s = message.toLocalizedString(messageArgs);
+              logger.warn(s);
+              throw new Exception(s);
+
+            } else {
+              region = (LocalRegion) crHelper.getRegion(regionName);
+
+              if (region == null) {
+                handleRegionNull(servConn, regionName, batchId);
+              } else {
+
+                clientEvent = new EventIDHolder(eventId);
+
+                if (versionTimeStamp > 0) {
+                  VersionTag tag = VersionTag.create(region.getVersionMember());
+                  tag.setIsGatewayTag(true);
+                  tag.setVersionTimeStamp(versionTimeStamp);
+                  tag.setDistributedSystemId(dsid);
+                  clientEvent.setVersionTag(tag);
+                }
+
+                // Update the version tag
+                try {
+
+                  region.basicBridgeUpdateVersionStamp(key, callbackArg, servConn.getProxyID(),
+                      false, clientEvent);
+
+                } catch (EntryNotFoundException e) {
+                  logger.info(LocalizedMessage.create(
+                      LocalizedStrings.ProcessBatch_0_DURING_BATCH_UPDATE_VERSION_NO_ENTRY_WAS_FOUND_FOR_KEY_1,
+                      new Object[] {servConn.getName(), key}));
+                  // throw new Exception(e);
+                }
+              }
+            }
+
+            break;
+          default:
+            logger.fatal(LocalizedMessage.create(
+                LocalizedStrings.Processbatch_0_UNKNOWN_ACTION_TYPE_1_FOR_BATCH_FROM_2,
+                new Object[] {servConn.getName(), Integer.valueOf(actionType),
+                    servConn.getSocketString()}));
+            stats.incUnknowsOperationsReceived();
-          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn.getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
+          logger.debug(
+              "{} ignoring message of type {} from client {} because shutdown occurred during message processing.",
+              servConn.getName(), MessageType.getString(msg.getMessageType()),
+              servConn.getProxyID());
+        servConn.setClientDisconnectedException(e);
-        
-        //If we have an issue with the PDX registry, stop processing more data
-        if(e.getCause() instanceof PdxRegistryMismatchException) {
+
+        // If we have an issue with the PDX registry, stop processing more data
+        if (e.getCause() instanceof PdxRegistryMismatchException) {
-          logger.fatal(LocalizedMessage.create(LocalizedStrings.GatewayReceiver_PDX_CONFIGURATION, new Object[] {servConn.getMembershipID()}), e.getCause());
+          logger.fatal(LocalizedMessage.create(LocalizedStrings.GatewayReceiver_PDX_CONFIGURATION,
+              new Object[] {servConn.getMembershipID()}), e.getCause());
-          DistributedSystem ds = crHelper.getCache().getDistributedSystem(); 
-          String exceptionMessage = LocalizedStrings.GatewayReceiver_EXCEPTION_WHILE_PROCESSING_BATCH.toLocalizedString(
-        	new Object[] {((InternalDistributedSystem) ds).getDistributionManager().getDistributedSystemId(), 
-        		ds.getDistributedMember()}); 
-          BatchException70 be = new BatchException70(exceptionMessage, e, indexWithoutPDXEvent, batchId);
+          DistributedSystem ds = crHelper.getCache().getDistributedSystem();
+          String exceptionMessage =
+              LocalizedStrings.GatewayReceiver_EXCEPTION_WHILE_PROCESSING_BATCH.toLocalizedString(
+                  new Object[] {((InternalDistributedSystem) ds).getDistributionManager()
+                      .getDistributedSystemId(), ds.getDistributedMember()});
+          BatchException70 be =
+              new BatchException70(exceptionMessage, e, indexWithoutPDXEvent, batchId);
-          if(!removeOnException) {
+          if (!removeOnException) {
-          
-          //servConn.setAsTrue(RESPONDED);
-          //wroteResponse = true;
-          //break;
+
+          // servConn.setAsTrue(RESPONDED);
+          // wroteResponse = true;
+          // break;
-        if (actionType == 0 /* create */|| actionType == 1 /* update */) {
+        if (actionType == 0 /* create */ || actionType == 1 /* update */) {
-          } 
+          }
-    if(fatalException != null) {
+    if (fatalException != null) {
-    }
-    else if(!exceptions.isEmpty()) {
+    } else if (!exceptions.isEmpty()) {
-    }
-    else if (!wroteResponse) {
+    } else if (!wroteResponse) {
-      
+
-      stats.incWriteProcessBatchResponseTime(DistributionStats.getStatTime()
-          - start);
+      stats.incWriteProcessBatchResponseTime(DistributionStats.getStatTime() - start);
-        logger.debug("{}: Sent process batch normal response for batch {} containing {} events ({} bytes) with {} acknowledgement on {}", servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(), (earlyAck ? "early" : "normal"), servConn.getSocketString());
+        logger.debug(
+            "{}: Sent process batch normal response for batch {} containing {} events ({} bytes) with {} acknowledgement on {}",
+            servConn.getName(), batchId, numberOfEvents, msg.getPayloadLength(),
+            (earlyAck ? "early" : "normal"), servConn.getSocketString());
+  private boolean addPdxType(CachedRegionHelper crHelper, Object key, Object value)
+      throws Exception {
+    if (key instanceof EnumId) {
+      EnumId enumId = (EnumId) key;
+      value = BlobHelper.deserializeBlob((byte[]) value);
+      ((GemFireCacheImpl) crHelper.getCache()).getPdxRegistry().addRemoteEnum(enumId.intValue(),
+          (EnumInfo) value);
+    } else {
+      value = BlobHelper.deserializeBlob((byte[]) value);
+      ((GemFireCacheImpl) crHelper.getCache()).getPdxRegistry().addRemoteType((int) key,
+          (PdxType) value);
+    }
+    return true;
+  }
+
-  private void writeReply(Message msg, ServerConnection servConn, int batchId,
-      int numberOfEvents) throws IOException {
+  private void writeReply(Message msg, ServerConnection servConn, int batchId, int numberOfEvents)
+      throws IOException {
-      logger.debug("{}: rpl tx: {} batchId {} numberOfEvents: {}", servConn.getName(), msg.getTransactionId(), batchId, numberOfEvents);
+      logger.debug("{}: rpl tx: {} batchId {} numberOfEvents: {}", servConn.getName(),
+          msg.getTransactionId(), batchId, numberOfEvents);
-    
+
-    //errorMsg.addStringPart(be.toString());
+    // errorMsg.addStringPart(be.toString());
-    for(Exception e: exceptions) {
-      ((GatewayReceiverStats)servConn.getCacheServerStats()).incExceptionsOccured();
+    for (Exception e : exceptions) {
+      ((GatewayReceiverStats) servConn.getCacheServerStats()).incExceptionsOccured();
-    for(Exception be: exceptions) {
+    for (Exception be : exceptions) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_WROTE_BATCH_EXCEPTION, servConn.getName()), be);
-      }  
+        logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_WROTE_BATCH_EXCEPTION,
+            servConn.getName()), be);
+      }
-    
+
-  
+
-    //For older gateway senders, we need to send back an exception
-    //they can deserialize.
-    if((servConn.getClientVersion() == null 
+    // For older gateway senders, we need to send back an exception
+    // they can deserialize.
+    if ((servConn.getClientVersion() == null
-      PdxConfigurationException newException = new PdxConfigurationException(exception.getMessage());
+      PdxConfigurationException newException =
+          new PdxConfigurationException(exception.getMessage());
-    //errorMsg.addStringPart(be.toString());
+    // errorMsg.addStringPart(be.toString());
-    logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_WROTE_BATCH_EXCEPTION, servConn.getName()), exception);
+    logger.warn(LocalizedMessage.create(LocalizedStrings.ProcessBatch_0_WROTE_BATCH_EXCEPTION,
+        servConn.getName()), exception);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS42 INS62 INS8 INS8 INS9 INS60 INS42 INS43 INS60 INS21 INS21 INS21 INS21 INS39 INS59 INS42 INS43 INS59 INS7 INS32 INS7 INS32 INS42 INS9 INS42 INS42 INS11 INS42 INS32 INS32 INS42 INS32 INS11 INS42 INS32 INS32 INS42 INS11 INS11 INS21 INS43 INS42 INS42 INS42 INS11 INS36 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS11 INS36 INS42 INS39 INS42 INS43 INS42 INS21 INS32 INS42 INS5 INS42 INS11 INS42 INS5 INS42 INS11 INS42 INS7 INS42 INS42 INS42 INS39 INS85 INS43 INS32 INS39 INS85 INS43 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS42 INS8 INS8 INS42 INS8 INS8 INS21 MOV21 MOV25 INS9 INS21 INS21 INS7 INS7 INS7 INS21 INS42 INS32 INS42 INS32 INS42 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42