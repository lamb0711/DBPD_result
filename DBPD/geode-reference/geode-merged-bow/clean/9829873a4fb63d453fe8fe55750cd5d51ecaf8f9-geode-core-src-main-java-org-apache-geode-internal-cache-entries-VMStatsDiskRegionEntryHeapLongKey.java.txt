GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
+import org.apache.geode.internal.cache.persistence.DiskRecoveryStore;
-import org.apache.geode.internal.cache.persistence.DiskRecoveryStore;
-// macros whose definition changes this class:
-// disk: DISK
-// lru: LRU
-// stats: STATS
-// versioned: VERSIONED
-// offheap: OFFHEAP
-// One of the following key macros must be defined:
-// key object: KEY_OBJECT
-// key int: KEY_INT
-// key long: KEY_LONG
-// key uuid: KEY_UUID
-// key string1: KEY_STRING1
-// key string2: KEY_STRING2
+/*
+ * macros whose definition changes this class:
+ *
+ * disk: DISK lru: LRU stats: STATS versioned: VERSIONED offheap: OFFHEAP
+ *
+ * One of the following key macros must be defined:
+ *
+ * key object: KEY_OBJECT key int: KEY_INT key long: KEY_LONG key uuid: KEY_UUID key string1:
+ * KEY_STRING1 key string2: KEY_STRING2
+ */
-  public VMStatsDiskRegionEntryHeapLongKey(RegionEntryContext context, long key, Object value) {
+  // --------------------------------------- common fields ----------------------------------------
+  private static final AtomicLongFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> LAST_MODIFIED_UPDATER =
+      AtomicLongFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "lastModified");
+  protected int hash;
+  private HashEntry<Object, Object> nextEntry;
+  @SuppressWarnings("unused")
+  private volatile long lastModified;
+  private volatile Object value;
+  // ---------------------------------------- disk fields -----------------------------------------
+  /**
+   * @since GemFire 5.1
+   */
+  protected DiskId id;
+  // --------------------------------------- stats fields -----------------------------------------
+  private volatile long lastAccessed;
+  private volatile int hitCount;
+  private volatile int missCount;
+  private static final AtomicIntegerFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> HIT_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "hitCount");
+  private static final AtomicIntegerFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> MISS_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "missCount");
+  // ----------------------------------------- key code -------------------------------------------
+  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
+  private final long key;
+
+  public VMStatsDiskRegionEntryHeapLongKey(final RegionEntryContext context, final long key,
+      final Object value) {
-  // common code
-  protected int hash;
-  private HashEntry<Object, Object> next;
-  @SuppressWarnings("unused")
-  private volatile long lastModified;
-  private static final AtomicLongFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> lastModifiedUpdater =
-      AtomicLongFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "lastModified");
-  private volatile Object value;
-
-  protected void setValueField(Object v) {
-    this.value = v;
+  protected void setValueField(final Object value) {
+    this.value = value;
+  @Override
-    return lastModifiedUpdater.get(this);
+    return LAST_MODIFIED_UPDATER.get(this);
-  protected boolean compareAndSetLastModifiedField(long expectedValue, long newValue) {
-    return lastModifiedUpdater.compareAndSet(this, expectedValue, newValue);
+  @Override
+  protected boolean compareAndSetLastModifiedField(final long expectedValue, final long newValue) {
+    return LAST_MODIFIED_UPDATER.compareAndSet(this, expectedValue, newValue);
-  /**
-   * @see HashEntry#getEntryHash()
-   */
+  @Override
-  protected void setEntryHash(int v) {
-    this.hash = v;
+  @Override
+  protected void setEntryHash(final int hash) {
+    this.hash = hash;
-  /**
-   * @see HashEntry#getNextEntry()
-   */
+  @Override
-    return this.next;
+    return this.nextEntry;
-  /**
-   * @see HashEntry#setNextEntry
-   */
-  public void setNextEntry(final HashEntry<Object, Object> n) {
-    this.next = n;
+  @Override
+  public void setNextEntry(final HashEntry<Object, Object> nextEntry) {
+    this.nextEntry = nextEntry;
+  // ----------------------------------------- disk code ------------------------------------------
-  // disk code
-  protected void initialize(RegionEntryContext context, Object value) {
+  protected void initialize(final RegionEntryContext context, final Object value) {
-  public int updateAsyncEntrySize(EnableLRU capacityController) {
+  public int updateAsyncEntrySize(final EnableLRU capacityController) {
-  private void diskInitialize(RegionEntryContext context, Object value) {
-    DiskRecoveryStore drs = (DiskRecoveryStore) context;
-    DiskStoreImpl ds = drs.getDiskStore();
-    long maxOplogSize = ds.getMaxOplogSize();
-    // get appropriate instance of DiskId implementation based on maxOplogSize
-    this.id = DiskId.createDiskId(maxOplogSize, true/* is persistence */, ds.needsLinkedList());
-    Helper.initialize(this, drs, value);
-  }
-
-  /**
-   * DiskId
-   * 
-   * @since GemFire 5.1
-   */
-  protected DiskId id;// = new DiskId();
-
+  @Override
-  public void setDiskId(RegionEntry old) {
-    this.id = ((AbstractDiskRegionEntry) old).getDiskId();
+  public void setDiskId(final RegionEntry oldEntry) {
+    this.id = ((DiskEntry) oldEntry).getDiskId();
+  private void diskInitialize(final RegionEntryContext context, final Object value) {
+    DiskRecoveryStore diskRecoveryStore = (DiskRecoveryStore) context;
+    DiskStoreImpl diskStore = diskRecoveryStore.getDiskStore();
+    long maxOplogSize = diskStore.getMaxOplogSize();
+    // get appropriate instance of DiskId implementation based on maxOplogSize
+    this.id = DiskId.createDiskId(maxOplogSize, true, diskStore.needsLinkedList());
+    Helper.initialize(this, diskRecoveryStore, value);
+  }
+
+  // ---------------------------------------- stats code ------------------------------------------
-  // stats code
-  public void updateStatsForGet(boolean hit, long time) {
+  public void updateStatsForGet(final boolean isHit, final long time) {
-    if (hit) {
+    if (isHit) {
-  protected void setLastModifiedAndAccessedTimes(long lastModified, long lastAccessed) {
+  protected void setLastModifiedAndAccessedTimes(final long lastModified, final long lastAccessed) {
-  private volatile long lastAccessed;
-  private volatile int hitCount;
-  private volatile int missCount;
-  private static final AtomicIntegerFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> hitCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "hitCount");
-  private static final AtomicIntegerFieldUpdater<VMStatsDiskRegionEntryHeapLongKey> missCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskRegionEntryHeapLongKey.class, "missCount");
-
-  public void setLastAccessed(long lastAccessed) {
+  public void setLastAccessed(final long lastAccessed) {
-    hitCountUpdater.incrementAndGet(this);
+    HIT_COUNT_UPDATER.incrementAndGet(this);
-    missCountUpdater.incrementAndGet(this);
+    MISS_COUNT_UPDATER.incrementAndGet(this);
-    hitCountUpdater.set(this, 0);
-    missCountUpdater.set(this, 0);
+    HIT_COUNT_UPDATER.set(this, 0);
+    MISS_COUNT_UPDATER.set(this, 0);
-  public void txDidDestroy(long currTime) {
-    setLastModified(currTime);
-    setLastAccessed(currTime);
+  public void txDidDestroy(long timeStamp) {
+    setLastModified(timeStamp);
+    setLastAccessed(timeStamp);
+  // ----------------------------------------- key code -------------------------------------------
-  // key code
-  private final long key;
-
-  public boolean isKeyEqual(Object k) {
-    if (k instanceof Long) {
-      return ((Long) k).longValue() == this.key;
+  public boolean isKeyEqual(final Object key) {
+    if (key instanceof Long) {
+      return ((Long) key).longValue() == this.key;

MOV26 MOV31 MOV23 MOV31 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 INS31 INS31 INS44 INS44 INS78 INS78 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV8 INS78 MOV78 INS83 INS39 INS42 MOV44 INS8 MOV44 MOV44 UPD42 UPD42 UPD42 UPD42 INS83 MOV43 INS42 INS83 INS83 INS43 INS42 INS83 MOV43 UPD42 INS42 INS42 INS83 INS83 INS42 INS42 INS83 UPD42 INS42 INS42 UPD42 INS83 INS83 INS83 INS42 INS83 UPD42 INS21 INS83 INS83 INS83 UPD42 INS83 INS83 INS83 INS83 UPD42 INS83 UPD42 INS42 INS42 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS36 INS42 UPD42 UPD42 INS11 UPD42 INS43 INS42 UPD42 MOV42 UPD42 DEL66 DEL65 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL42 DEL67 DEL65 DEL29 DEL42 DEL44 DEL42 DEL44 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31