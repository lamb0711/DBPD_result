Merge branch 'release/1.4.0'

- * 
+ *
- * 
+ *
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.lucene.internal.LuceneIndexStats;
-import org.apache.geode.cache.lucene.internal.repository.serializer.LuceneSerializer;
-import org.apache.geode.cache.lucene.internal.repository.serializer.SerializerUtil;
-import org.apache.geode.distributed.DistributedLockService;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.cache.BucketRegion;
-import org.apache.geode.internal.cache.DistributedRegion;
-import org.apache.geode.internal.logging.LogService;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.function.IntSupplier;
+
-import org.apache.geode.distributed.LockNotHeldException;
-import java.io.IOException;
-import java.util.function.IntSupplier;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.lucene.LuceneIndex;
+import org.apache.geode.cache.lucene.LuceneSerializer;
+import org.apache.geode.cache.lucene.internal.LuceneIndexStats;
+import org.apache.geode.cache.lucene.internal.repository.serializer.SerializerUtil;
+import org.apache.geode.distributed.DistributedLockService;
+import org.apache.geode.distributed.LockNotHeldException;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.internal.cache.BucketRegion;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.logging.LogService;
+  private LuceneIndex index;
-  // For test purposes
-  IndexRepositoryImpl(Region<?, ?> region, IndexWriter writer, LuceneSerializer serializer,
-      LuceneIndexStats stats, Region<?, ?> userRegion) throws IOException {
-    this(region, writer, serializer, stats, userRegion,
-        ((DistributedRegion) region).getLockService(), "NoLockFile");
-  }
-
-      String lockName) throws IOException {
+      String lockName, LuceneIndex index) throws IOException {
-    searcherManager = new SearcherManager(writer, APPLY_ALL_DELETES, true, null);
+    searcherManager = createSearchManager();
+    this.index = index;
+  }
+
+  protected SearcherManager createSearchManager() throws IOException {
+    return new SearcherManager(writer, APPLY_ALL_DELETES, true, null);
+    Collection<Document> docs = Collections.emptyList();
+    boolean exceptionHappened = false;
-      Document doc = new Document();
-      SerializerUtil.addKey(key, doc);
-      serializer.toDocument(value, doc);
-      writer.addDocument(doc);
+      try {
+        docs = serializer.toDocuments(index, value);
+      } catch (Exception e) {
+        exceptionHappened = true;
+        stats.incFailedEntries();
+        logger.info("Failed to add index for " + value + " due to " + e.getMessage());
+      }
+      if (!exceptionHappened) {
+        docs.forEach(doc -> SerializerUtil.addKey(key, doc));
+        writer.addDocuments(docs);
+      }
+    Collection<Document> docs = Collections.emptyList();
+    boolean exceptionHappened = false;
-      Document doc = new Document();
-      SerializerUtil.addKey(key, doc);
-      serializer.toDocument(value, doc);
-      writer.updateDocument(SerializerUtil.getKeyTerm(doc), doc);
+      try {
+        docs = serializer.toDocuments(index, value);
+      } catch (Exception e) {
+        exceptionHappened = true;
+        stats.incFailedEntries();
+        logger.info("Failed to update index for " + value + " due to " + e.getMessage());
+      }
+      if (!exceptionHappened) {
+        docs.forEach(doc -> SerializerUtil.addKey(key, doc));
+        Term keyTerm = SerializerUtil.toKeyTerm(key);
+        writer.updateDocuments(keyTerm, docs);
+      }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS31 INS31 INS83 INS43 INS59 INS44 INS83 INS43 INS42 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 INS8 UPD42 MOV42 INS42 INS43 INS42 INS21 UPD42 MOV42 INS41 MOV60 INS60 INS60 INS54 MOV60 MOV60 INS60 INS54 INS42 INS7 MOV14 INS74 INS59 INS39 INS59 INS8 MOV8 INS74 INS39 INS59 INS8 MOV8 INS32 INS22 INS42 INS43 MOV43 INS42 INS32 INS42 INS9 INS54 INS25 INS43 MOV43 UPD42 INS32 INS42 INS9 INS54 INS25 INS42 INS52 INS42 UPD42 MOV42 INS42 INS42 INS8 INS12 INS38 INS8 UPD42 MOV42 INS42 INS42 INS8 INS12 INS38 INS8 INS21 INS44 INS8 INS42 MOV21 MOV21 MOV21 INS44 INS8 INS42 MOV21 INS60 INS21 INS7 INS43 INS42 INS21 INS21 MOV21 INS32 INS7 INS43 INS42 INS21 INS21 INS21 INS32 INS43 INS59 INS32 INS42 INS32 UPD42 MOV42 INS7 INS32 INS42 INS42 INS86 UPD42 UPD42 INS42 INS32 INS42 INS7 INS32 INS32 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 UPD42 INS27 INS59 MOV32 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS9 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS59 MOV32 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL45 DEL17 DEL8 DEL31 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL8 DEL54 DEL8 DEL31 DEL43 DEL14 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL54 DEL8