GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import static java.lang.Integer.*;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.*;
+import org.apache.geode.cache.AttributesFactory;
+import org.apache.geode.cache.ClientSession;
+import org.apache.geode.cache.DataPolicy;
+import org.apache.geode.cache.DiskStore;
+import org.apache.geode.cache.DiskStoreFactory;
+import org.apache.geode.cache.DynamicRegionFactory;
+import org.apache.geode.cache.EvictionAction;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.InterestRegistrationListener;
+import org.apache.geode.cache.RegionAttributes;
+import org.apache.geode.cache.RegionExistsException;
+import org.apache.geode.cache.Scope;
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionAdvisee;
+import org.apache.geode.distributed.internal.DistributionAdvisor;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.ResourceEvent;
+import org.apache.geode.distributed.internal.ServerLocation;
-import org.apache.logging.log4j.Logger;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.*;
-import java.util.concurrent.atomic.AtomicInteger;
- * An implementation of the <code>CacheServer</code> interface that delegates most of the heavy
- * lifting to an {@link Acceptor}.
+ * An implementation of the{@code CacheServer} interface that delegates most of the heavy lifting to
+ * an {@link Acceptor}.
-
-  private static final int FORCE_LOAD_UPDATE_FREQUENCY =
-      Integer
-          .getInteger(
-              DistributionConfig.GEMFIRE_PREFIX + "BridgeServer.FORCE_LOAD_UPDATE_FREQUENCY", 10)
-          .intValue();
+  private static final int FORCE_LOAD_UPDATE_FREQUENCY = getInteger(
+      DistributionConfig.GEMFIRE_PREFIX + "BridgeServer.FORCE_LOAD_UPDATE_FREQUENCY", 10);
-  private List<GatewayTransportFilter> gatewayTransportFilters = Collections.EMPTY_LIST;
+  private List<GatewayTransportFilter> gatewayTransportFilters = Collections.emptyList();
-   * Creates a new <code>BridgeServerImpl</code> that serves the contents of the give
-   * <code>Cache</code>. It has the default configuration.
+   * Creates a new{@code BridgeServerImpl} that serves the contents of the give {@code Cache}. It
+   * has the default configuration.
-  public CacheServerImpl(GemFireCacheImpl cache, boolean isGatewayReceiver) {
+  public CacheServerImpl(InternalCache cache, boolean isGatewayReceiver) {
-   * Sets the configuration of <b>this</b> <code>CacheServer</code> based on the configuration of
-   * <b>another</b> <code>CacheServer</code>.
+   * Sets the configuration of <b>this</b>{@code CacheServer} based on the configuration of
+   * <b>another</b>{@code CacheServer}.
-    overflowAttributesList.add(1, Integer.valueOf(csc.getCapacity()));
-    overflowAttributesList.add(2, Integer.valueOf(this.port));
+    overflowAttributesList.add(1, valueOf(csc.getCapacity()));
+    overflowAttributesList.add(2, valueOf(this.port));
-    if (cache instanceof GemFireCacheImpl) {
-      ClientHealthMonitoringRegion.getInstance((GemFireCacheImpl) cache);
-    }
+    ClientHealthMonitoringRegion.getInstance(this.cache);
-    if (this.hostnameForClients == null || this.hostnameForClients.equals("")) {
+    if (this.hostnameForClients == null || this.hostnameForClients.isEmpty()) {
-   * @param cache
-   * @param ePolicy
-   * @param capacity
-   * @param port
-   * @param overFlowDir
-   * @param isDiskStore
-  public static String clientMessagesRegion(GemFireCacheImpl cache, String ePolicy, int capacity,
+  public static String clientMessagesRegion(InternalCache cache, String ePolicy, int capacity,
-  public static AttributesFactory getAttribFactoryForClientMessagesRegion(GemFireCacheImpl cache,
+  public static AttributesFactory getAttribFactoryForClientMessagesRegion(InternalCache cache,
+
-      DiskStore bsi = dsf.setAutoCompact(true)
-          .setDiskDirsAndSizes(dirs, new int[] {Integer.MAX_VALUE}).create("bsi");
+      dsf.setAutoCompact(true).setDiskDirsAndSizes(dirs, new int[] {MAX_VALUE}).create("bsi");
+
-      factory.setEvictionAttributes(EvictionAttributesImpl.createLIFOEntryAttributes(capacity,
-          EvictionAction.OVERFLOW_TO_DISK));
-    } else if (HARegionQueue.HA_EVICTION_POLICY_MEMORY.equals(ePolicy)) { // condition refinement
-      factory.setEvictionAttributes(EvictionAttributesImpl.createLIFOMemoryAttributes(capacity,
-          EvictionAction.OVERFLOW_TO_DISK));
+      factory.setEvictionAttributes(
+          EvictionAttributes.createLIFOEntryAttributes(capacity, EvictionAction.OVERFLOW_TO_DISK));
+    } else if (HARegionQueue.HA_EVICTION_POLICY_MEMORY.equals(ePolicy)) {
+      // condition refinement
+      factory.setEvictionAttributes(
+          EvictionAttributes.createLIFOMemoryAttributes(capacity, EvictionAction.OVERFLOW_TO_DISK));
-  public static String createClientMessagesRegion(RegionAttributes attr, GemFireCacheImpl cache,
+  private static String createClientMessagesRegion(RegionAttributes attr, InternalCache cache,
-  public static String createClientMessagesRegionForTesting(GemFireCacheImpl cache, String ePolicy,
-      int capacity, int port, int expiryTime, String overFlowDir, boolean isDiskStore) {
-    AttributesFactory factory =
-        getAttribFactoryForClientMessagesRegion(cache, ePolicy, capacity, overFlowDir, isDiskStore);
-    ExpirationAttributes ea =
-        new ExpirationAttributes(expiryTime, ExpirationAction.LOCAL_INVALIDATE);
-    factory.setEntryTimeToLive(ea);
-    RegionAttributes attr = factory.create();
-
-    return createClientMessagesRegion(attr, cache, capacity, port);
-  }
-
-   * @param id
-   * Returns the underlying <code>InternalDistributedSystem</code> connection.
+   * Returns the underlying{@code InternalDistributedSystem} connection.
-   * @return the underlying <code>InternalDistributedSystem</code>
+   * @return the underlying{@code InternalDistributedSystem}
-   * Registers a new <code>InterestRegistrationListener</code> with the set of
-   * <code>InterestRegistrationListener</code>s.
+   * Registers a new{@code InterestRegistrationListener} with the set of
+   * {@code InterestRegistrationListener}s.
-   * @param listener The <code>InterestRegistrationListener</code> to register
+   * @param listener The{@code InterestRegistrationListener} to register
-   * Unregisters an existing <code>InterestRegistrationListener</code> from the set of
-   * <code>InterestRegistrationListener</code>s.
+   * Unregisters an existing{@code InterestRegistrationListener} from the set of
+   * {@code InterestRegistrationListener}s.
-   * @param listener The <code>InterestRegistrationListener</code> to unregister
+   * @param listener The{@code InterestRegistrationListener} to unregister
-   * Returns a read-only set of <code>InterestRegistrationListener</code>s registered with this
-   * notifier.
+   * Returns a read-only set of{@code InterestRegistrationListener}s registered with this notifier.
-   * @return a read-only set of <code>InterestRegistrationListener</code>s registered with this
-   *         notifier
+   * @return a read-only set of{@code InterestRegistrationListener}s registered with this notifier

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 UPD83 INS66 INS65 UPD66 UPD66 MOV32 INS32 UPD43 MOV21 UPD43 UPD43 UPD43 INS65 MOV65 MOV65 INS66 INS42 INS42 INS66 INS65 UPD66 INS65 INS66 UPD66 UPD42 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD42 UPD42 UPD42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 UPD66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS66 INS66 INS66 INS22 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS66 UPD66 MOV66 INS52 INS42 UPD42 INS21 MOV32 UPD42 UPD42 INS42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL45 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL40 DEL42 DEL43 DEL42 DEL59 DEL60 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL65