GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisData;
-    checkDataType(source, RedisDataType.REDIS_SET, context);
+    // TODO: remove the need for this checkDataType call
-    Region<ByteArrayWrapper, RedisData> region = getRegion(context);
+    RedisSetCommands redisSetCommands = createRedisSetCommands(context);
-    RedisResponse response;
-    try (AutoCloseableLock regionLock = withRegionLock(context, source)) {
-      RedisData sourceSet = region.get(source);
-
-      if (sourceSet == null) {
-        return RedisResponse.integer(NOT_MOVED);
-      }
-
-      boolean removed =
-          new RedisSetInRegion(region).srem(source,
-              new ArrayList<>(Collections.singletonList(member))) == 1;
-
-      if (!removed) {
-        return RedisResponse.integer(NOT_MOVED);
-      }
-
-      try (AutoCloseableLock destinationLock = withRegionLock(context, destination)) {
-        // TODO: this should invoke a function in case the primary for destination is remote
-        new RedisSetInRegion(region).sadd(destination,
-            new ArrayList<>(Collections.singletonList(member)));
-
-        response = RedisResponse.integer(MOVED);
-      } catch (InterruptedException e) {
-        Thread.currentThread().interrupt();
-        response = RedisResponse.error("Thread interrupted");
-      } catch (TimeoutException e) {
-        response = RedisResponse.error("Timeout acquiring lock. Please try again.");
-      } catch (Exception e) {
-        response = RedisResponse.error("Unexpected exception.");
-      }
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      response = RedisResponse.error("Thread interrupted.");
-    } catch (TimeoutException e) {
-      response = RedisResponse.error("Timeout acquiring lock. Please try again.");
-    } catch (Exception e) {
-      response = RedisResponse.error("Unexpected exception.");
+    boolean removed = redisSetCommands.srem(source,
+        new ArrayList<>(Collections.singletonList(member))) == 1;
+    if (!removed) {
+      return RedisResponse.integer(NOT_MOVED);
-
-    return response;
+    redisSetCommands.sadd(destination, new ArrayList<>(Collections.singletonList(member)));
+    return RedisResponse.integer(MOVED);

MOV60 MOV25 MOV21 INS43 MOV32 MOV32 UPD42 MOV42 UPD42 INS42 UPD42 UPD42 UPD42 MOV32 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42