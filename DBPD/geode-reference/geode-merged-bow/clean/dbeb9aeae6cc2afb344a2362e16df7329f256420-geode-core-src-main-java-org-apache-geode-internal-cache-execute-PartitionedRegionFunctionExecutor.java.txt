Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-    this.pr = (PartitionedRegion)r;
+    this.pr = (PartitionedRegion) r;
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe) {
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe) {
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe,
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe,
-    
+
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe,
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe,
-    // super copies args, rc and memberMappedArgument 
+    // super copies args, rc and memberMappedArgument
-    
+
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe,
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe,
-    
-    // super copies args, rc and memberMappedArgument 
+
+    // super copies args, rc and memberMappedArgument
-  
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe,
-      Set filter2) {
-    // super copies args, rc and memberMappedArgument 
+
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe, Set filter2) {
+    // super copies args, rc and memberMappedArgument
-  
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe,
+
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe,
-    // super copies args, rc and memberMappedArgument 
+    // super copies args, rc and memberMappedArgument
-  
-  private PartitionedRegionFunctionExecutor(
-      PartitionedRegionFunctionExecutor prfe, boolean isReExecute) {
+
+  private PartitionedRegionFunctionExecutor(PartitionedRegionFunctionExecutor prfe,
+      boolean isReExecute) {
-      MemberMappedArgument memberMappedArg, 
-      ServerToClientFunctionResultSender resultSender, Set failedNodes,
-      boolean executeOnBucketSet) {
+      MemberMappedArgument memberMappedArg, ServerToClientFunctionResultSender resultSender,
+      Set failedNodes, boolean executeOnBucketSet) {
-    this.isClientServerMode = true ;
+    this.isClientServerMode = true;
-    
+
-    }
-    else if (memberMappedArg != null) {
+    } else if (memberMappedArg != null) {
-    
+
-    }  
-    
+    }
+
-  
-  
-  public PartitionedRegionFunctionExecutor(PartitionedRegion region,
-      Set filter2, Object args, MemberMappedArgument memberMappedArg,
-      ServerToClientFunctionResultSender resultSender, Set failedNodes,
-      boolean executeOnBucketSet, boolean isPRSingleHop) {
+
+
+  public PartitionedRegionFunctionExecutor(PartitionedRegion region, Set filter2, Object args,
+      MemberMappedArgument memberMappedArg, ServerToClientFunctionResultSender resultSender,
+      Set failedNodes, boolean executeOnBucketSet, boolean isPRSingleHop) {
-    this.isClientServerMode = true ;
+    this.isClientServerMode = true;
-    
+
-    }
-    else if (memberMappedArg != null) {
+    } else if (memberMappedArg != null) {
-    
+
-        return this.pr.executeFunction(function, this,
-            new DefaultResultCollector(), this.executeOnBucketSet);
-      }
-      else {
-        return this.pr.executeFunction(function, this, rc,
+        return this.pr.executeFunction(function, this, new DefaultResultCollector(),
+      } else {
+        return this.pr.executeFunction(function, this, rc, this.executeOnBucketSet);
-    }
-    else { /* NO RESULT:fire-n-forget */
+    } else { /* NO RESULT:fire-n-forget */
-  
-  
+
+
+    } else if (bucketIDs.isEmpty()) {
+      throw new FunctionException("Bucket IDs list is empty");
-    else if (bucketIDs.isEmpty()) {
-    	throw new FunctionException("Bucket IDs list is empty");
-    }
-    
+
-    
+
-   
+
-  
+
+
-    return new PartitionedRegionFunctionExecutor(this, args); 
+    return new PartitionedRegionFunctionExecutor(this, args);
-  
+
-  
-  public boolean isPrSingleHop(){
+
+  public boolean isPrSingleHop() {
-  
-  public InternalExecution withMemberMappedArgument(
-      MemberMappedArgument argument) {
+
+  public InternalExecution withMemberMappedArgument(MemberMappedArgument argument) {
-    return new PartitionedRegionFunctionExecutor(this,argument);
+    return new PartitionedRegionFunctionExecutor(this, argument);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.execute.AbstractExecution#validateExecution(org.apache.geode.cache.execute.Function, java.util.Set)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.execute.AbstractExecution#validateExecution(org.apache.geode.
+   * cache.execute.Function, java.util.Set)
-        throw new TransactionException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE
-            .toLocalizedString());
+        throw new TransactionException(
+            LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE
+                .toLocalizedString());
-        DistributedMember funcTarget = (DistributedMember)targetMembers.iterator().next();
+        DistributedMember funcTarget = (DistributedMember) targetMembers.iterator().next();
-          throw new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED_0_1
-              .toLocalizedString(new Object[] {target,funcTarget}));
+          throw new TransactionDataRebalancedException(
+              LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED_0_1
+                  .toLocalizedString(new Object[] {target, funcTarget}));
-    if (function.optimizeForWrite() && cache.getResourceManager().getHeapMonitor().
-        containsHeapCriticalMembers(targetMembers) &&
-        !MemoryThresholds.isLowMemoryExceptionDisabled()) {
-      Set<InternalDistributedMember> hcm  = cache.getResourceAdvisor().adviseCritialMembers();
+    if (function.optimizeForWrite()
+        && cache.getResourceManager().getHeapMonitor().containsHeapCriticalMembers(targetMembers)
+        && !MemoryThresholds.isLowMemoryExceptionDisabled()) {
+      Set<InternalDistributedMember> hcm = cache.getResourceAdvisor().adviseCritialMembers();
-      throw new LowMemoryException(LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1.toLocalizedString(
-          new Object[] {function.getId(), sm}), sm);
+      throw new LowMemoryException(
+          LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+              .toLocalizedString(new Object[] {function.getId(), sm}),
+          sm);

