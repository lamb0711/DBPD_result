Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+import com.gemstone.gemfire.internal.cache.versions.RegionVersionVector;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.cache.wan.GatewaySenderEventImpl;
+import com.gemstone.gemfire.internal.offheap.OffHeapRegionEntryHelper;
+  @Override
+  public void closeEntries() {
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        BucketRegionQueue.super.closeEntries();
+      }
+    });
+    this.indexes.clear();
+    this.eventSeqNumQueue.clear();
+  }
+  
+  @Override
+  public Set<VersionSource> clearEntries(final RegionVersionVector rvv) {
+    final AtomicReference<Set<VersionSource>> result = new AtomicReference<Set<VersionSource>>();
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        result.set(BucketRegionQueue.super.clearEntries(rvv));
+      }
+    });
+    this.eventSeqNumQueue.clear();
+    return result.get();
+  }
+  
+
+  @Override
+  public void forceSerialized(EntryEventImpl event) {
+    // NOOP since we want the value in the region queue to stay in object form.
+  }
+
+      Object ov = event.getRawOldValue();
+      if (ov instanceof GatewaySenderEventImpl) {
+        ((GatewaySenderEventImpl) ov).release();
+      }
+
+
+    Object rov = event.getRawOldValue();
+    if (rov instanceof GatewaySenderEventImpl) {
+      ((GatewaySenderEventImpl) rov).release();
+    }
-
-    return object;
+    return object;  // OFFHEAP: ok since callers are careful to do destroys on region queue after finished with peeked object.
-  
-  public Object peek() {
+
+  public Object peek() {
-  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event) {
+  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event, int sizeOfHDFSEvent) {
-      
-//    Object key = this.eventSeqNumQueue.remove();
-//    Object object = null;
-//    if (key != null) {
-//      //object = PartitionRegionHelper
-//      //    .getLocalPrimaryData(getPartitionedRegion()).get(key);
-//      object = optimalGet(key);
-//      /**
-//       * TODO: For the time being this is same as peek. To do a batch peek we
-//       * need to remove the head key. We will destroy the key once the event is
-//       * delivered to the GatewayReceiver.
-//       */
-//      destroyKey(key);
-//    }
-//    return object;
+    // Currently has no callers.
+    // To support this callers need to call freeOffHeapResources on the returned GatewaySenderEventImpl.
+//     Object key = this.eventSeqNumQueue.remove();
+//     Object object = null;
+//     if (key != null) {
+//       object = PartitionRegionHelper
+//           .getLocalPrimaryData(getPartitionedRegion()).get(key);
+//       /**
+//        * TODO: For the time being this is same as peek. To do a batch peek we
+//        * need to remove the head key. We will destroy the key once the event is
+//        * delivered to the GatewayReceiver.
+//        */
+//       destroyKey(key);
+//     }
+//     return object; // TODO OFFHEAP: see what callers do with the returned GatewaySenderEventImpl. We need to inc its refcount before we do the destroyKey.
-	  getPartitionedRegion().checkReadiness();
-	  if (isBucketDestroyed()) {
-	    throw new ForceReattemptException(
-	        "Bucket moved",
-	        new RegionDestroyedException(
-	            LocalizedStrings.PartitionedRegionDataStore_REGION_HAS_BEEN_DESTROYED
-	                .toLocalizedString(), getPartitionedRegion()
-	                .getFullPath()));
-	  }
-	}
-	throw enf;
-	} catch (RegionDestroyedException rde) {
-	  getPartitionedRegion().checkReadiness();
-	  if (isBucketDestroyed()) {
-	    throw new ForceReattemptException("Bucket moved while destroying key "
-	        + key, rde);
-	  }
-	} finally {
+        getPartitionedRegion().checkReadiness();
+        if (isBucketDestroyed()) {
+          throw new ForceReattemptException(
+              "Bucket moved",
+              new RegionDestroyedException(
+                  LocalizedStrings.PartitionedRegionDataStore_REGION_HAS_BEEN_DESTROYED
+                      .toLocalizedString(), getPartitionedRegion()
+                      .getFullPath()));
+        }
+      }
+      throw enf;
+    } catch (RegionDestroyedException rde) {
+      getPartitionedRegion().checkReadiness();
+      if (isBucketDestroyed()) {
+        throw new ForceReattemptException("Bucket moved while destroying key "
+            + key, rde);
+      }
+    } finally {
-	}
-	    
-	this.notifyEntriesRemoved();
+      event.release();
+    }
+    
+    this.notifyEntriesRemoved();

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS44 INS42 INS21 INS21 INS21 INS42 INS43 INS43 INS83 INS43 INS42 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS60 INS25 INS39 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS32 INS32 INS42 INS43 INS59 INS62 INS8 INS42 INS42 INS14 INS22 INS42 INS22 INS42 INS43 INS74 INS42 INS14 INS42 INS42 INS14 INS22 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS43 INS21 INS21 INS43 INS1 INS52 INS42 INS52 INS42 INS42 INS43 INS43 INS74 INS43 INS1 INS52 INS42 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS32 INS32 INS42 INS31 INS42 INS42 INS43 INS74 INS42 INS31 INS42 INS42 INS32 INS42 INS43 INS21 INS36 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS32 INS11 INS42 INS21 INS42 INS42 INS42 INS21 INS36 INS42 INS43 INS42 INS48 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS48 INS43 INS42 INS42 INS42 INS42 INS42