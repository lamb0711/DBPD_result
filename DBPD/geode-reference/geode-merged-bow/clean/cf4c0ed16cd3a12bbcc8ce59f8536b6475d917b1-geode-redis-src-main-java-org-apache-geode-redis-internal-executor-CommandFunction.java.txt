GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
+import java.util.regex.Pattern;
-    ArrayList<ByteArrayWrapper> commandArgs = (ArrayList<ByteArrayWrapper>) args[1];
-      case SADD:
+      case SADD: {
+        ArrayList<ByteArrayWrapper> membersToAdd = (ArrayList<ByteArrayWrapper>) args[1];
-            () -> RedisSet.sadd(localRegion, key, commandArgs),
+            () -> RedisSet.sadd(localRegion, key, membersToAdd),
-      case SREM:
+      }
+      case SREM: {
+        ArrayList<ByteArrayWrapper> membersToRemove = (ArrayList<ByteArrayWrapper>) args[1];
-            () -> RedisSet.srem(localRegion, key, commandArgs, setWasDeleted),
+            () -> RedisSet.srem(localRegion, key, membersToRemove, setWasDeleted),
+      }
-            () -> RedisSet.members(localRegion, key),
+            () -> RedisSet.smembers(localRegion, key),
+      case SCARD:
+        stripedExecutor.execute(key,
+            () -> RedisSet.scard(localRegion, key),
+            (size) -> resultSender.lastResult(size));
+        break;
+      case SISMEMBER: {
+        ByteArrayWrapper member = (ByteArrayWrapper) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.sismember(localRegion, key, member),
+            (exists) -> resultSender.lastResult(exists));
+        break;
+      }
+      case SRANDMEMBER: {
+        int count = (int) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.srandmember(localRegion, key, count),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
+      case SPOP: {
+        int popCount = (int) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.spop(localRegion, key, popCount),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
+      case SSCAN: {
+        Pattern matchPattern = (Pattern) args[0];
+        int count = (int) args[1];
+        int cursor = (int) args[2];
+        stripedExecutor.execute(key,
+            () -> RedisSet.sscan(localRegion, key, matchPattern, count, cursor),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }

INS26 INS40 INS8 INS8 INS21 INS10 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 MOV60 INS21 INS10 INS60 MOV60 MOV21 INS10 INS42 INS32 INS42 INS60 INS21 INS10 INS42 INS60 INS21 INS10 INS42 INS60 INS21 INS10 INS42 INS60 INS60 INS60 INS21 INS10 MOV32 INS74 INS59 INS42 INS42 INS42 INS86 INS86 INS43 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS43 INS59 INS39 INS59 INS39 INS59 INS32 UPD42 INS43 INS43 INS42 INS11 INS32 INS59 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS42 INS42 INS11 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS86 INS86 INS42 INS42 INS74 INS2 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS2 INS32 INS59 INS32 INS39 INS2 INS32 INS59 INS32 INS39 INS2 INS32 INS59 INS32 INS43 INS2 INS39 INS2 INS39 INS2 INS32 INS59 INS32 UPD42 INS43 INS43 INS42 INS34 UPD42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL21 DEL10 DEL10