GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

-import static org.apache.geode.internal.protocol.protobuf.v1.BasicTypes.ErrorCode.INVALID_REQUEST;
+import java.util.Collection;
+
-import org.apache.shiro.authz.AuthorizationException;
-import org.apache.shiro.util.ThreadState;
-import org.apache.geode.cache.Region;
-import org.apache.geode.internal.protocol.protobuf.v1.Failure;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
-import org.apache.geode.internal.protocol.protobuf.v1.serialization.exception.EncodingException;
-import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionAuthorizingStateProcessor;
+import org.apache.geode.internal.protocol.protobuf.v1.state.exception.ConnectionStateException;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.NotAuthorizedException;
-import org.apache.geode.security.ResourcePermission;
-      throws InvalidExecutionContextException, DecodingException {
+      throws InvalidExecutionContextException, DecodingException, ConnectionStateException {
-    Region region = messageExecutionContext.getCache().getRegion(regionName);
-    if (region == null) {
-      logger.error("Received get-all request for nonexistent region: {}", regionName);
-      return Failure.of(BasicTypes.ErrorCode.SERVER_ERROR,
-          "Region \"" + regionName + "\" not found");
-    }
-    ThreadState threadState = null;
-    SecurityService securityService = messageExecutionContext.getCache().getSecurityService();
-    boolean perKeyAuthorization = false;
-    if (messageExecutionContext
-        .getConnectionStateProcessor() instanceof ProtobufConnectionAuthorizingStateProcessor) {
-      threadState = ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-          .getConnectionStateProcessor()).prepareThreadForAuthorization();
-      // Check if authorized for entire region
-      try {
-        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
-            ResourcePermission.Operation.READ, regionName));
-        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-            .getConnectionStateProcessor()).restoreThreadState(threadState);
-        threadState = null;
-      } catch (NotAuthorizedException ex) {
-        // Not authorized for the region, have to check keys individually
-        perKeyAuthorization = true;
-      }
-    }
-    final boolean authorizeKeys = perKeyAuthorization; // Required for use in lambda
-
-    long startTime = messageExecutionContext.getStatistics().startOperation();
-    try {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(true);
-      request.getKeyList().stream().forEach((key) -> processSingleKey(responseBuilder,
-          serializationService, region, key, securityService, authorizeKeys));
-    } finally {
-      messageExecutionContext.getCache().setReadSerializedForCurrentThread(false);
-      messageExecutionContext.getStatistics().endOperation(startTime);
-      if (threadState != null) {
-        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
-            .getConnectionStateProcessor()).restoreThreadState(threadState);
-      }
-    }
+    AuthorizingCache cache = messageExecutionContext.getAuthorizingCache();
+    Collection<Object> keys = serializationService.decodeList(request.getKeyList());
+    cache.getAll(regionName, keys,
+        (key, value) -> addEntry(serializationService, responseBuilder, key, value),
+        (key, exception) -> addException(serializationService, responseBuilder, key, exception));
-  private void processSingleKey(RegionAPI.GetAllResponse.Builder responseBuilder,
-      ProtobufSerializationService serializationService, Region region, BasicTypes.EncodedValue key,
-      SecurityService securityService, boolean authorizeKeys) {
-    try {
-
-      Object decodedKey = serializationService.decode(key);
-      if (decodedKey == null) {
-        responseBuilder
-            .addFailures(buildKeyedError(key, "NULL is not a valid key for get.", INVALID_REQUEST));
-        return;
-      }
-      if (authorizeKeys) {
-        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
-            ResourcePermission.Operation.READ, region.getName(), decodedKey.toString()));
-      }
-      Object value = region.get(decodedKey);
-      BasicTypes.Entry entry =
-          ProtobufUtilities.createEntry(serializationService, decodedKey, value);
-      responseBuilder.addEntries(entry);
-
-    } catch (NotAuthorizedException ex) {
-      responseBuilder.addFailures(
-          buildKeyedError(key, "Unauthorized access", BasicTypes.ErrorCode.AUTHORIZATION_FAILED));
-    } catch (DecodingException ex) {
-      logger.info("Key encoding not supported: {}", ex);
-      responseBuilder
-          .addFailures(buildKeyedError(key, "Key encoding not supported.", INVALID_REQUEST));
-    } catch (EncodingException ex) {
-      logger.info("Value encoding not supported: {}", ex);
-      responseBuilder
-          .addFailures(buildKeyedError(key, "Value encoding not supported.", INVALID_REQUEST));
-    } catch (Exception ex) {
-      logger.warn("Failure in protobuf getAll operation for key: " + key, ex);
-      responseBuilder.addFailures(buildKeyedError(key, ex.toString(), SERVER_ERROR));
-    }
-  }
-
-  private BasicTypes.KeyedError buildKeyedError(BasicTypes.EncodedValue key, String errorMessage,
-      BasicTypes.ErrorCode errorCode) {
-    return BasicTypes.KeyedError.newBuilder().setKey(key)
-        .setError(BasicTypes.Error.newBuilder().setErrorCode(errorCode).setMessage(errorMessage))
+  private void addException(ProtobufSerializationService serializationService,
+      RegionAPI.GetAllResponse.Builder responseBuilder, Object key, Object exception) {
+    logger.warn("Failure in protobuf getAll operation for key: " + key, exception);
+    BasicTypes.EncodedValue encodedKey = serializationService.encode(key);
+    BasicTypes.KeyedError failure = BasicTypes.KeyedError.newBuilder().setKey(encodedKey).setError(
+        BasicTypes.Error.newBuilder().setErrorCode(SERVER_ERROR).setMessage(exception.toString()))
+    responseBuilder.addFailures(failure);
+  private void addEntry(ProtobufSerializationService serializationService,
+      RegionAPI.GetAllResponse.Builder responseBuilder, Object key, Object value) {
+    BasicTypes.Entry entry = ProtobufUtilities.createEntry(serializationService, key, value);
+    responseBuilder.addEntries(entry);
+  }

MOV26 MOV26 UPD40 UPD40 UPD40 INS31 INS31 INS43 INS8 MOV83 MOV39 INS42 MOV44 MOV44 INS44 INS44 MOV8 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 INS8 UPD42 MOV42 MOV60 MOV60 MOV60 INS60 INS21 MOV41 UPD43 UPD42 INS43 UPD42 INS43 INS42 INS43 INS42 MOV21 INS60 INS60 INS21 MOV43 INS42 MOV43 INS42 MOV60 MOV21 UPD43 INS74 INS59 INS32 UPD42 INS40 INS42 UPD42 MOV42 MOV43 INS59 MOV43 INS59 INS32 UPD42 UPD42 INS32 INS43 INS43 INS42 MOV32 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS86 INS86 UPD42 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS59 INS59 MOV32 MOV59 INS59 INS32 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL40 DEL40 DEL42 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL83 DEL39 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL86 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL32 DEL11 DEL36 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL39 DEL41 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL40 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL45 DEL40 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL31