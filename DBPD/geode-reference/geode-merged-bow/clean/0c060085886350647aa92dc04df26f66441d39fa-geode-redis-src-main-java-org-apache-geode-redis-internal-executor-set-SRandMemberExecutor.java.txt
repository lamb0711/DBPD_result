GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
+import org.apache.geode.redis.internal.CoderException;
+import org.apache.geode.redis.internal.RedisConstants;
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> keyRegion =
-        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
-    int count = 1;
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
-    if (commandElems.size() > 2) {
-      try {
-        count = Coder.bytesToInt(commandElems.get(2));
-      } catch (NumberFormatException e) {
-        command
-            .setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
+      int count = 1;
+
+      if (commandElems.size() > 2) {
+        try {
+          count = Coder.bytesToInt(commandElems.get(2));
+        } catch (NumberFormatException e) {
+          command.setResponse(
+              Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
+          return;
+        }
+      }
+
+      Set<ByteArrayWrapper> set = region.get(key);
+
+      if (set == null || count == 0) {
+        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-    }
-    if (keyRegion == null || count == 0) {
-      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-      return;
-    }
+      int members = set.size();
-    int members = keyRegion.size();
-
-    if (members <= count && count != 1) {
-      respondBulkStrings(command, context, new HashSet<ByteArrayWrapper>(keyRegion.keySet()));
-      return;
-    }
-
-    Random rand = new Random();
-
-    ByteArrayWrapper[] entries = keyRegion.keySet().toArray(new ByteArrayWrapper[members]);
-
-    if (count == 1) {
-      ByteArrayWrapper randEntry = entries[rand.nextInt(entries.length)];
-      respondBulkStrings(command, context, randEntry);
-    } else if (count > 0) {
-      Set<ByteArrayWrapper> randEntries = new HashSet<ByteArrayWrapper>();
-      do {
-        ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-        randEntries.add(s);
-      } while (randEntries.size() < count);
-      respondBulkStrings(command, context, randEntries);
-    } else {
-      count = -count;
-      List<ByteArrayWrapper> randEntries = new ArrayList<ByteArrayWrapper>();
-      for (int i = 0; i < count; i++) {
-        ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-        randEntries.add(s);
+      if (members <= count && count != 1) {
+        respondBulkStrings(command, context, new HashSet<ByteArrayWrapper>(set));
+        return;
-      respondBulkStrings(command, context, randEntries);
+
+      Random rand = new Random();
+
+      ByteArrayWrapper[] entries = set.toArray(new ByteArrayWrapper[members]);
+
+      try {
+        if (count == 1) {
+          ByteArrayWrapper randEntry = entries[rand.nextInt(entries.length)];
+          command.setResponse(
+              Coder.getBulkStringResponse(context.getByteBufAllocator(), randEntry.toBytes()));
+        } else if (count > 0) {
+          Set<ByteArrayWrapper> randEntries = new HashSet<>();
+          do {
+            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
+            randEntries.add(s);
+          } while (randEntries.size() < count);
+          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
+        } else {
+          count = -count;
+          List<ByteArrayWrapper> randEntries = new ArrayList<>();
+          for (int i = 0; i < count; i++) {
+            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
+            randEntries.add(s);
+          }
+          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
+        }
+      } catch (CoderException e) {
+        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+            RedisConstants.SERVER_ERROR_MESSAGE));
+      }
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
+      return;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS54 INS58 INS8 INS12 INS12 INS43 INS59 INS60 MOV60 MOV25 INS60 MOV25 MOV60 MOV25 MOV60 MOV60 INS54 INS44 INS8 INS44 INS8 INS42 INS42 INS32 UPD74 MOV74 INS59 UPD74 MOV74 MOV59 INS8 INS12 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS74 INS42 INS32 UPD43 UPD42 INS32 MOV25 INS44 INS8 INS42 INS32 INS32 INS42 INS32 INS43 UPD43 MOV43 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 MOV42 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS32 INS40 UPD42 MOV42 INS42 INS32 INS32 INS42 UPD42 INS32 INS42 UPD42 INS32 INS42 INS42 MOV42 INS42 MOV42 INS42 UPD74 UPD42 MOV42 INS42 INS32 MOV42 UPD74 UPD42 MOV42 INS42 INS32 MOV42 MOV42 INS42 MOV42 INS42 DEL42 DEL43 DEL42 DEL32 DEL32 DEL11 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL45 DEL79 DEL60