GEODE-6269: Extract StatisticsRegistry from IDS (#3068)

Extract StatisticsRegistry from InternalDistributedSystem.

Exclude StatisticsRegistry from entry sizing in ReflectionBasedAutoSerializer.

-import java.util.concurrent.atomic.AtomicLong;
-import org.apache.geode.StatisticsTypeFactory;
-import org.apache.geode.internal.statistics.DummyStatisticsImpl;
+import org.apache.geode.internal.statistics.DummyStatisticsRegistry;
-import org.apache.geode.internal.statistics.LocalStatisticsImpl;
-import org.apache.geode.internal.statistics.StatisticsImpl;
-import org.apache.geode.internal.statistics.StatisticsTypeFactoryImpl;
+import org.apache.geode.internal.statistics.StatisticsManagerFactory;
+import org.apache.geode.internal.statistics.StatisticsRegistry;
-import org.apache.geode.internal.statistics.platform.OsStatisticsFactory;
-    implements OsStatisticsFactory, StatisticsManager, LogConfigSupplier {
+    implements LogConfigSupplier {
+  private final StatisticsManager statisticsManager;
+
+  private final boolean statsDisabled =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "statsDisabled");
+
-  private final boolean statsDisabled =
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "statsDisabled");
-
+  public static InternalDistributedSystem newInstanceForTesting(StatisticsManagerFactory factory) {
+    return new InternalDistributedSystem(new Properties(), factory);
+  }
+
-
-  ////////////////////// Constructors //////////////////////
+  private InternalDistributedSystem(Properties properties) {
+    this(properties, defaultStatisticsManagerFactory());
+  }
-  private InternalDistributedSystem(Properties nonDefault) {
+  private InternalDistributedSystem(Properties nonDefault,
+      StatisticsManagerFactory statisticsManagerFactory) {
+
+    statisticsManager =
+        statisticsManagerFactory.create(originalConfig.getName(), startTime, statsDisabled);
-  //////////////////// Instance Methods ////////////////////
+  //////////////////// Instance Methods ////////////////////
-    this.securityService = SecurityServiceFactory.create(this.config.getSecurityProps(),
+    this.securityService = SecurityServiceFactory.create(
+        this.config.getSecurityProps(),
-      if (!statsDisabled) {
-        Optional<LogFile> logFile = loggingSession.getLogFile();
-        if (logFile.isPresent()) {
-          sampler = new GemFireStatSampler(this, logFile.get());
-        } else {
-          sampler = new GemFireStatSampler(this);
-        }
-        this.sampler.start();
-      }
+      startSampler();
+  private void startSampler() {
+    if (statsDisabled) {
+      return;
+    }
+    sampler = loggingSession.getLogFile()
+        .map(logFile -> new GemFireStatSampler(this, logFile))
+        .orElseGet(() -> new GemFireStatSampler(this));
+    this.sampler.start();
+  }
+
+  public StatisticsManager getStatisticsManager() {
+    return statisticsManager;
+  }
+
+  @Override
+  public StatisticDescriptor createIntCounter(String name,
+      String description,
+      String units) {
+    return statisticsManager.createIntCounter(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createLongCounter(String name,
+      String description,
+      String units) {
+    return statisticsManager.createLongCounter(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createDoubleCounter(String name,
+      String description,
+      String units) {
+    return statisticsManager.createDoubleCounter(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createIntGauge(String name,
+      String description,
+      String units) {
+    return statisticsManager.createIntGauge(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createLongGauge(String name,
+      String description,
+      String units) {
+    return statisticsManager.createLongGauge(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createDoubleGauge(String name,
+      String description,
+      String units) {
+    return statisticsManager.createDoubleGauge(name, description, units);
+  }
+
+  @Override
+  public StatisticDescriptor createIntCounter(String name,
+      String description,
+      String units, boolean largerBetter) {
+    return statisticsManager.createIntCounter(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticDescriptor createLongCounter(String name,
+      String description,
+      String units, boolean largerBetter) {
+    return statisticsManager.createLongCounter(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticDescriptor createDoubleCounter(String name,
+      String description,
+      String units,
+      boolean largerBetter) {
+    return statisticsManager.createDoubleCounter(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticDescriptor createIntGauge(String name,
+      String description,
+      String units, boolean largerBetter) {
+    return statisticsManager.createIntGauge(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticDescriptor createLongGauge(String name,
+      String description,
+      String units, boolean largerBetter) {
+    return statisticsManager.createLongGauge(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticDescriptor createDoubleGauge(String name,
+      String description,
+      String units, boolean largerBetter) {
+    return statisticsManager.createDoubleGauge(name, description, units, largerBetter);
+  }
+
+  @Override
+  public StatisticsType createType(String name, String description,
+      StatisticDescriptor[] stats) {
+    return statisticsManager.createType(name, description, stats);
+  }
+
+  @Override
+  public StatisticsType findType(String name) {
+    return statisticsManager.findType(name);
+  }
+
+  @Override
+  public StatisticsType[] createTypesFromXml(Reader reader)
+      throws IOException {
+    return statisticsManager.createTypesFromXml(reader);
+  }
+
+  @Override
+  public Statistics createStatistics(StatisticsType type) {
+    return statisticsManager.createStatistics(type);
+  }
+
+  @Override
+  public Statistics createStatistics(StatisticsType type,
+      String textId) {
+    return statisticsManager.createStatistics(type, textId);
+  }
+
+  @Override
+  public Statistics createStatistics(StatisticsType type,
+      String textId, long numericId) {
+    return statisticsManager.createStatistics(type, textId, numericId);
+  }
+
+  @Override
+  public Statistics createAtomicStatistics(StatisticsType type) {
+    return statisticsManager.createAtomicStatistics(type);
+  }
+
+  @Override
+  public Statistics createAtomicStatistics(StatisticsType type,
+      String textId) {
+    return statisticsManager.createAtomicStatistics(type, textId);
+  }
+
+  @Override
+  public Statistics createAtomicStatistics(StatisticsType type,
+      String textId, long numericId) {
+    return statisticsManager.createAtomicStatistics(type, textId, numericId);
+  }
+
+  @Override
+  public Statistics[] findStatisticsByType(StatisticsType type) {
+    return statisticsManager.findStatisticsByType(type);
+  }
+
+  @Override
+  public Statistics[] findStatisticsByTextId(String textId) {
+    return statisticsManager.findStatisticsByTextId(textId);
+  }
+
+  @Override
+  public Statistics[] findStatisticsByNumericId(long numericId) {
+    return statisticsManager.findStatisticsByNumericId(numericId);
+  }
+
+  @Override
+  public String getName() {
+    return getOriginalConfig().getName();
+  }
+
+  @Override
+  public long getId() {
+    return this.id;
+  }
+
+  public long getStartTime() {
+    return this.startTime;
+  }
+
-      dc.onDisconnect(InternalDistributedSystem.this);
+      dc.onDisconnect(this);
-   * Returns the id of this connection to the distributed system. This is actually the port of the
-   * distribution manager's distribution channel.
-   *
-   */
-  @Override
-  public long getId() {
-    return this.id;
-  }
-
-  /**
-  @Override
-  public String getName() {
-    return getOriginalConfig().getName();
-  }
-
-  private final CopyOnWriteArrayList<Statistics> statsList = new CopyOnWriteArrayList<Statistics>();
-  private int statsListModCount = 0;
-  private AtomicLong statsListUniqueId = new AtomicLong(1);
-
-  @Override
-  public int getStatListModCount() {
-    return this.statsListModCount;
-  }
-
-  @Override
-  public List<Statistics> getStatsList() {
-    return this.statsList;
-  }
-
-  @Override
-  public int getStatisticsCount() {
-    int result = 0;
-    List<Statistics> statsList = this.statsList;
-    if (statsList != null) {
-      result = statsList.size();
-    }
-    return result;
-  }
-
-  @Override
-  public Statistics findStatistics(long id) {
-    List<Statistics> statsList = this.statsList;
-    for (Statistics s : statsList) {
-      if (s.getUniqueId() == id) {
-        return s;
-      }
-    }
-    throw new RuntimeException(
-        "Could not find statistics instance");
-  }
-
-  @Override
-  public boolean statisticsExists(long id) {
-    List<Statistics> statsList = this.statsList;
-    for (Statistics s : statsList) {
-      if (s.getUniqueId() == id) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  @Override
-  public Statistics[] getStatistics() {
-    List<Statistics> statsList = this.statsList;
-    return statsList.toArray(new Statistics[0]);
-  }
-
-  // StatisticsFactory methods
-  @Override
-  public Statistics createStatistics(StatisticsType type) {
-    return createOsStatistics(type, null, 0, 0);
-  }
-
-  @Override
-  public Statistics createStatistics(StatisticsType type, String textId) {
-    return createOsStatistics(type, textId, 0, 0);
-  }
-
-  @Override
-  public Statistics createStatistics(StatisticsType type, String textId, long numericId) {
-    return createOsStatistics(type, textId, numericId, 0);
-  }
-
-  @Override
-  public Statistics createOsStatistics(StatisticsType type, String textId, long numericId,
-      int osStatFlags) {
-    if (this.statsDisabled) {
-      return new DummyStatisticsImpl(type, textId, numericId);
-    }
-    long myUniqueId = statsListUniqueId.getAndIncrement();
-    Statistics result =
-        new LocalStatisticsImpl(type, textId, numericId, myUniqueId, false, osStatFlags, this);
-    synchronized (statsList) {
-      statsList.add(result);
-      statsListModCount++;
-    }
-    return result;
-  }
-
-  /**
-   * For every registered statistic instance call the specified visitor. This method was added to
-   * fix bug 40358
-   */
-  public void visitStatistics(StatisticsVisitor visitor) {
-    for (Statistics s : this.statsList) {
-      visitor.visit(s);
-    }
-  }
-
-  /**
-   * Used to "visit" each instance of Statistics registered with
-   *
-   * @see #visitStatistics
-   */
-  public interface StatisticsVisitor {
-
-    void visit(Statistics stat);
-  }
-
-  @Override
-  public Statistics[] findStatisticsByType(final StatisticsType type) {
-    final ArrayList hits = new ArrayList();
-    visitStatistics(new StatisticsVisitor() {
-      @Override
-      public void visit(Statistics s) {
-        if (type == s.getType()) {
-          hits.add(s);
-        }
-      }
-    });
-    Statistics[] result = new Statistics[hits.size()];
-    return (Statistics[]) hits.toArray(result);
-  }
-
-  @Override
-  public Statistics[] findStatisticsByTextId(final String textId) {
-    final ArrayList hits = new ArrayList();
-    visitStatistics(new StatisticsVisitor() {
-      @Override
-      public void visit(Statistics s) {
-        if (s.getTextId().equals(textId)) {
-          hits.add(s);
-        }
-      }
-    });
-    Statistics[] result = new Statistics[hits.size()];
-    return (Statistics[]) hits.toArray(result);
-  }
-
-  @Override
-  public Statistics[] findStatisticsByNumericId(final long numericId) {
-    final ArrayList hits = new ArrayList();
-    visitStatistics(new StatisticsVisitor() {
-      @Override
-      public void visit(Statistics s) {
-        if (numericId == s.getNumericId()) {
-          hits.add(s);
-        }
-      }
-    });
-    Statistics[] result = new Statistics[hits.size()];
-    return (Statistics[]) hits.toArray(result);
-  }
-
-  public Statistics findStatisticsByUniqueId(final long uniqueId) {
-    for (Statistics s : this.statsList) {
-      if (uniqueId == s.getUniqueId()) {
-        return s;
-      }
-    }
-    return null;
-  }
-
-  /**
-   * for internal use only. Its called by {@link LocalStatisticsImpl#close}.
-   */
-  @Override
-  public void destroyStatistics(Statistics stats) {
-    synchronized (statsList) {
-      if (statsList.remove(stats)) {
-        statsListModCount++;
-      }
-    }
-  }
-
-  @Override
-  public Statistics createAtomicStatistics(StatisticsType type) {
-    return createAtomicStatistics(type, null, 0);
-  }
-
-  @Override
-  public Statistics createAtomicStatistics(StatisticsType type, String textId) {
-    return createAtomicStatistics(type, textId, 0);
-  }
-
-  @Override
-  public Statistics createAtomicStatistics(StatisticsType type, String textId, long numericId) {
-    if (this.statsDisabled) {
-      return new DummyStatisticsImpl(type, textId, numericId);
-    }
-
-    long myUniqueId = statsListUniqueId.getAndIncrement();
-    Statistics result = StatisticsImpl.createAtomicNoOS(type, textId, numericId, myUniqueId, this);
-    synchronized (statsList) {
-      statsList.add(result);
-      statsListModCount++;
-    }
-    return result;
-  }
-
-
-  // StatisticsTypeFactory methods
-  private static final StatisticsTypeFactory tf = StatisticsTypeFactoryImpl.singleton();
-
-  /**
-   * Creates or finds a StatisticType for the given shared class.
-   */
-  @Override
-  public StatisticsType createType(String name, String description, StatisticDescriptor[] stats) {
-    return tf.createType(name, description, stats);
-  }
-
-  @Override
-  public StatisticsType findType(String name) {
-    return tf.findType(name);
-  }
-
-  @Override
-  public StatisticsType[] createTypesFromXml(Reader reader) throws IOException {
-    return tf.createTypesFromXml(reader);
-  }
-
-  @Override
-  public StatisticDescriptor createIntCounter(String name, String description, String units) {
-    return tf.createIntCounter(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createLongCounter(String name, String description, String units) {
-    return tf.createLongCounter(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createDoubleCounter(String name, String description, String units) {
-    return tf.createDoubleCounter(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createIntGauge(String name, String description, String units) {
-    return tf.createIntGauge(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createLongGauge(String name, String description, String units) {
-    return tf.createLongGauge(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createDoubleGauge(String name, String description, String units) {
-    return tf.createDoubleGauge(name, description, units);
-  }
-
-  @Override
-  public StatisticDescriptor createIntCounter(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createIntCounter(name, description, units, largerBetter);
-  }
-
-  @Override
-  public StatisticDescriptor createLongCounter(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createLongCounter(name, description, units, largerBetter);
-  }
-
-  @Override
-  public StatisticDescriptor createDoubleCounter(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createDoubleCounter(name, description, units, largerBetter);
-  }
-
-  @Override
-  public StatisticDescriptor createIntGauge(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createIntGauge(name, description, units, largerBetter);
-  }
-
-  @Override
-  public StatisticDescriptor createLongGauge(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createLongGauge(name, description, units, largerBetter);
-  }
-
-  @Override
-  public StatisticDescriptor createDoubleGauge(String name, String description, String units,
-      boolean largerBetter) {
-    return tf.createDoubleGauge(name, description, units, largerBetter);
-  }
-
-  @Override
-  public long getStartTime() {
-    return this.startTime;
-  }
-
+
+  private static StatisticsManagerFactory defaultStatisticsManagerFactory() {
+    return (name, startTime, statsDisabled) -> {
+      if (statsDisabled) {
+        return new DummyStatisticsRegistry(name, startTime);
+      } else {
+        return new StatisticsRegistry(name, startTime);
+      }
+    };
+  }
+

MOV26 MOV26 MOV23 MOV31 MOV31 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 INS31 INS31 MOV43 MOV83 UPD83 MOV83 INS43 INS42 INS44 MOV8 UPD83 INS42 INS44 INS8 INS44 UPD83 UPD39 UPD42 INS43 INS42 INS8 MOV78 UPD42 MOV78 UPD42 MOV78 UPD42 MOV78 UPD42 MOV78 UPD42 MOV78 UPD42 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 UPD42 MOV44 MOV78 MOV43 UPD42 MOV44 MOV78 MOV43 MOV44 MOV78 MOV43 MOV44 MOV44 MOV78 MOV43 UPD42 MOV44 MOV78 MOV43 INS42 MOV44 INS8 MOV78 MOV43 INS42 MOV44 MOV44 MOV78 MOV43 UPD42 MOV44 MOV44 MOV44 MOV78 MOV5 UPD42 MOV44 MOV78 MOV5 UPD42 MOV44 MOV78 MOV5 INS42 MOV44 INS8 UPD83 MOV83 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 INS8 INS42 UPD42 MOV42 INS43 INS42 INS41 UPD43 MOV43 UPD42 MOV42 INS17 INS43 INS42 INS21 INS25 INS21 MOV21 UPD42 MOV42 MOV41 INS41 INS41 INS41 INS41 INS41 INS41 UPD42 INS41 UPD42 MOV42 INS14 UPD42 INS42 INS32 INS42 INS7 INS42 INS8 INS7 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS86 INS43 INS14 INS42 UPD42 MOV42 INS42 INS32 MOV21 INS41 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS59 INS59 INS59 INS8 UPD42 MOV42 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS25 UPD42 MOV42 INS42 INS42 UPD42 MOV42 MOV32 INS42 INS86 MOV14 INS42 MOV8 INS8 INS59 INS14 INS41 INS42 MOV43 INS52 INS42 INS14 UPD43 UPD42 UPD42 INS43 INS42 INS42 UPD42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL39 DEL42 DEL34 DEL59 DEL60 DEL43 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL44 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL52 DEL42 DEL32 DEL14 DEL7 DEL42 DEL38 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL8 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL42 DEL78 DEL66 DEL65 DEL29 DEL33 DEL34 DEL34 DEL42 DEL34 DEL34 DEL42 DEL34 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL52 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL51 DEL42 DEL41 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL42 DEL43 DEL85 DEL5 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL32 DEL11 DEL42 DEL43 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41 DEL66 DEL42 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL37 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL43 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL31 DEL66 DEL65 DEL42 DEL67 DEL65 DEL29 DEL83 DEL42 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL55 DEL42 DEL42 DEL42 DEL33 DEL34 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL52 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL51 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42