GEODE-74: Making the satisfy redundancy phase of rebalance parallel

Tasks submitted to background threads to trigger redundancy
satisfaction. After the satisfy redundancy phase is done we wait for the
tasks to finish.

The number of buckets that can be recovering in parallel is controlled
by the system property gemfire.MAX_PARALLEL_BUCKET_RECOVERIES, currently
set to 8.

If a redundancy recovery/rebalance is restarted due to a membership
change, wait for any in progress operations to complete before fetching
new information from all of the members.

-   * Create a redundancy copy of a bucket on a given node
-   * @param targetMember the node to create the bucket on
-   * @param bucketId the id of the bucket to create
-   * @param colocatedRegionBytes the size of the bucket in bytes
-   * @return true if a redundant copy of the bucket was created.
+   * Create a redundancy copy of a bucket on a given node. This call may be
+   * asynchronous, it will notify the completion when the the operation is done.
+   * 
+   * Note that the completion is not required to be threadsafe, so implementors
+   * should ensure the completion is invoked by the calling thread of
+   * createRedundantBucket, usually by invoking the completions in waitForOperations.
+   * 
+   * @param targetMember
+   *          the node to create the bucket on
+   * @param bucketId
+   *          the id of the bucket to create
+   * @param colocatedRegionBytes
+   *          the size of the bucket in bytes
+   * @param completion
+   *          a callback which will receive a notification on the success or
+   *          failure of the operation.
-  boolean createRedundantBucket(InternalDistributedMember targetMember,
-      int bucketId, Map<String, Long> colocatedRegionBytes);
+  void createRedundantBucket(InternalDistributedMember targetMember,
+      int bucketId, Map<String, Long> colocatedRegionBytes, Completion completion);
+  
+  /**
+   * Wait for any pending asynchronous operations that this thread submitted
+   * earlier to complete. Currently only createRedundantBucket may be
+   * asynchronous.
+   */
+  public void waitForOperations();
+  
+  /**
+   * Callbacks for asnychonous operations. These methods will be invoked when an
+   * ansynchronous operation finishes.
+   * 
+   * The completions are NOT THREADSAFE.
+   * 
+   * They will be completed when createRedundantBucket or waitForOperations is
+   * called.
+   */
+  public interface Completion {
+    public void onSuccess();
+    public void onFailure();
+  }

INS31 INS55 UPD39 INS44 INS29 INS83 INS39 INS42 INS29 INS83 INS42 INS31 INS31 UPD65 INS43 INS42 INS65 INS65 INS83 INS39 INS42 INS83 INS39 INS42 UPD66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 INS42 INS66 UPD66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66