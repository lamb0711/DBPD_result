Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Interface <code>RegionQueue</code> is an interface for queue
- * implementations backed by regions.
+ * Interface <code>RegionQueue</code> is an interface for queue implementations backed by regions.
-public interface RegionQueue
-{
+public interface RegionQueue {
-   * A token used to signify this is a WAN queue. It is set in the callback
-   * argument.
+   * A token used to signify this is a WAN queue. It is set in the callback argument.
-   * @param object
-   *          The object to put onto the queue
+   * @param object The object to put onto the queue
-   * Takes the first object from the head of the queue. This method returns null
-   * if there are no objects on the queue.
+   * Takes the first object from the head of the queue. This method returns null if there are no
+   * objects on the queue.
-   * Takes up to batchSize number of objects from the head of the queue. As soon
-   * as it gets a null response from a take, it stops taking.
+   * Takes up to batchSize number of objects from the head of the queue. As soon as it gets a null
+   * response from a take, it stops taking.
-   * @param batchSize
-   *          The number of objects to take from the queue
+   * @param batchSize The number of objects to take from the queue
-   * Removes a single object from the head of the queue without returning it.
-   * This method assumes that the queue contains at least one object.
+   * Removes a single object from the head of the queue without returning it. This method assumes
+   * that the queue contains at least one object.
-   * Peeks the first object from the head of the queue without removing it. This
-   * method returns null if there are no objects on the queue.
+   * Peeks the first object from the head of the queue without removing it. This method returns null
+   * if there are no objects on the queue.
-   * Peeks up to batchSize number of objects from the head of the queue without
-   * removing them. As soon as it gets a null response from a peek, it stops
-   * peeking.
+   * Peeks up to batchSize number of objects from the head of the queue without removing them. As
+   * soon as it gets a null response from a peek, it stops peeking.
-   * @param batchSize
-   *          The number of objects to peek from the queue
+   * @param batchSize The number of objects to peek from the queue
-   * Peeks either a batchSize number of elements from the queue or until
-   * timeToWait milliseconds have elapsed (whichever comes first). If it has
-   * peeked batchSize number of elements from the queue before timeToWait
-   * milliseconds have elapsed, it stops peeking. If timeToWait milliseconds
+   * Peeks either a batchSize number of elements from the queue or until timeToWait milliseconds
+   * have elapsed (whichever comes first). If it has peeked batchSize number of elements from the
+   * queue before timeToWait milliseconds have elapsed, it stops peeking. If timeToWait milliseconds
-   * @param batchSize
-   *          The number of objects to peek from the queue
-   * @param timeToWait
-   *          The number of milliseconds to attempt to peek
+   * @param batchSize The number of objects to peek from the queue
+   * @param timeToWait The number of milliseconds to attempt to peek
-  public List peek(int batchSize, int timeToWait) throws  InterruptedException, CacheException;
+  public List peek(int batchSize, int timeToWait) throws InterruptedException, CacheException;
-   * @param listener
-   *          The <code>CacheListener</code> to add
+   * @param listener The <code>CacheListener</code> to add
-  //TODO:Asif: Remove this method. Added this justto make it compilable
+  // TODO:Asif: Remove this method. Added this justto make it compilable

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66