Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** The algorithm used to determine when to perform an {@link org.apache.geode.cache.EvictionAction}
+/**
+ * The algorithm used to determine when to perform an {@link org.apache.geode.cache.EvictionAction}
-public final class EvictionAlgorithm extends EnumSyntax
-{
+public final class EvictionAlgorithm extends EnumSyntax {
-  /** 
-   * The canonical EvictionAction that represents no eviction action  
+  /**
+   * The canonical EvictionAction that represents no eviction action
-  
+
-   * An algorithm that considers the number of Entries in the Region before
-   * invoking its {@link EvictionAction} 
+   * An algorithm that considers the number of Entries in the Region before invoking its
+   * {@link EvictionAction}
-  
-  /** 
+
+  /**
-  
-  /** 
-   * An algorithm that considers the amount of bytes consumed by the Region before invoking its {@link EvictionAction} 
+
+  /**
+   * An algorithm that considers the amount of bytes consumed by the Region before invoking its
+   * {@link EvictionAction}
-  
+
-   * An algorithm that considers the number of Entries in the Region before
-   * invoking its {@link EvictionAction}
+   * An algorithm that considers the number of Entries in the Region before invoking its
+   * {@link EvictionAction}
-   * An algorithm that considers the amount of bytes consumed by the Region
-   * before invoking its {@link EvictionAction}
+   * An algorithm that considers the amount of bytes consumed by the Region before invoking its
+   * {@link EvictionAction}
-  
-  private EvictionAlgorithm(int val) { super(val); }
-  
-  private static final String[] stringTable = {
-    "none",
-    "lru-entry-count",
-    "lru-heap-percentage",
-    "lru-memory-size",
-    "lifo-entry-count",
-    "lifo-memory-size"
-  };
-  
+
+  private EvictionAlgorithm(int val) {
+    super(val);
+  }
+
+  private static final String[] stringTable = {"none", "lru-entry-count", "lru-heap-percentage",
+      "lru-memory-size", "lifo-entry-count", "lifo-memory-size"};
+
-    
-  //TODO post Java 1.8.0u45 uncomment final flag, see JDK-8076152
-  private static /*final*/ EvictionAlgorithm[] enumValueTable = {
-    NONE,
-    LRU_ENTRY,
-    LRU_HEAP,
-    LRU_MEMORY,
-    LIFO_ENTRY,
-    LIFO_MEMORY,
-  };
-    
+
+  // TODO post Java 1.8.0u45 uncomment final flag, see JDK-8076152
+  private static /* final */ EvictionAlgorithm[] enumValueTable =
+      {NONE, LRU_ENTRY, LRU_HEAP, LRU_MEMORY, LIFO_ENTRY, LIFO_MEMORY,};
+
-   * Returns the eviction action the corresponds to the given parameter.
-   * Returns <code>null</code> if no action corresponds.
+   * Returns the eviction action the corresponds to the given parameter. Returns <code>null</code>
+   * if no action corresponds.
+   * 
+
-    if (s.length() < 1) 
+    if (s.length() < 1)
-        return enumValueTable[i]; 
+        return enumValueTable[i];
-    public final boolean isLRUEntry() {
-	return this == LRU_ENTRY;
-    }
+  public final boolean isLRUEntry() {
+    return this == LRU_ENTRY;
+  }
-    public final boolean isLRUMemory() {
-	return this == LRU_MEMORY;
-    }
-    
-    public final boolean isLRUHeap() {
-	return this == LRU_HEAP;
-    }
+  public final boolean isLRUMemory() {
+    return this == LRU_MEMORY;
+  }
-    /** returns true if this object uses a least-recently-used algorithm */
-    public boolean isLRU() {
-      return this.isLRUEntry() || this.isLRUMemory() || this.isLRUHeap();
-    }
+  public final boolean isLRUHeap() {
+    return this == LRU_HEAP;
+  }
-    public final boolean isNone() {
-	return this == NONE;
-    }
+  /** returns true if this object uses a least-recently-used algorithm */
+  public boolean isLRU() {
+    return this.isLRUEntry() || this.isLRUMemory() || this.isLRUHeap();
+  }
-    /**
-     * @deprecated
-     */
-    public boolean isLIFO() {
-      return this == LIFO_ENTRY || this == LIFO_MEMORY;
-    }
+  public final boolean isNone() {
+    return this == NONE;
+  }
+
+  /**
+   * @deprecated
+   */
+  public boolean isLIFO() {
+    return this == LIFO_ENTRY || this == LIFO_MEMORY;
+  }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66