Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.GemFireIOException;
+import com.gemstone.gemfire.cache.hdfs.HDFSStore;
+import com.gemstone.gemfire.internal.cache.CustomEvictionAttributesImpl;
+    this.regionAttributes.customEvictionAttributes = regionAttributes
+        .getCustomEvictionAttributes();
+    this.regionAttributes.hdfsStoreName = regionAttributes.getHDFSStoreName();
+    this.regionAttributes.hdfsWriteOnly = regionAttributes.getHDFSWriteOnly();
+    if (regionAttributes instanceof UserSpecifiedRegionAttributes) {
+      this.regionAttributes.setHasHDFSWriteOnly(((UserSpecifiedRegionAttributes<K,V>) regionAttributes).hasHDFSWriteOnly());
+    }
+    this.regionAttributes.offHeap = regionAttributes.getOffHeap();
-  /** Sets the mirror type for the next <code>RegionAttributes</code> created.
+  /**
+   * Set custom {@link EvictionCriteria} for the region with start time and
+   * frequency of evictor task to be run in milliseconds, or evict incoming rows
+   * in case both start and frequency are specified as zero.
+   * 
+   * @param criteria
+   *          an {@link EvictionCriteria} to be used for eviction for HDFS
+   *          persistent regions
+   * @param start
+   *          the start time at which periodic evictor task should be first
+   *          fired to apply the provided {@link EvictionCriteria}; if this is
+   *          zero then current time is used for the first invocation of evictor
+   * @param interval
+   *          the periodic frequency at which to run the evictor task after the
+   *          initial start; if this is if both start and frequency are zero
+   *          then {@link EvictionCriteria} is applied on incoming insert/update
+   *          to determine whether it is to be retained
+   */
+  public void setCustomEvictionAttributes(EvictionCriteria<K, V> criteria,
+      long start, long interval) {
+    this.regionAttributes.customEvictionAttributes =
+        new CustomEvictionAttributesImpl(criteria, start, interval,
+            start == 0 && interval == 0);
+    this.regionAttributes.setHasCustomEviction(true);
+  }
+
+   /** Sets the mirror type for the next <code>RegionAttributes</code> created.
-   * @throws IllegalArgumentException if a directory does not exist
+   * @throws GemFireIOException if a directory does not exist
+      
+      ((PartitionAttributesImpl) this.regionAttributes.partitionAttributes).setOffHeap(this.regionAttributes.offHeap);
+   * Sets the HDFSStore name attribute.
+   * This causes the region to use the {@link HDFSStore}.
+   * @param name the name of the HDFSstore
+   */
+  public void setHDFSStoreName(String name) {
+    //TODO:HDFS throw an exception if the region is already configured for a disk store and 
+    // vice versa
+    this.regionAttributes.hdfsStoreName = name;
+    this.regionAttributes.setHasHDFSStoreName(true);
+  }
+  
+  /**
+   * Sets the HDFS write only attribute. if the region
+   * is configured to be write only to HDFS, events that have 
+   * been evicted from memory cannot be read back from HDFS.
+   * Events are written to HDFS in the order in which they occurred.
+   */
+  public void setHDFSWriteOnly(boolean writeOnly) {
+    //TODO:HDFS throw an exception if the region is already configured for a disk store and 
+    // vice versa
+    this.regionAttributes.hdfsWriteOnly = writeOnly;
+    this.regionAttributes.setHasHDFSWriteOnly(true);
+  }
+  
+  /**
+  /**
+   * Enables this region's usage of off-heap memory if true.
+   * @since 9.0
+   * @param offHeap boolean flag to enable off-heap memory
+   */
+  public void setOffHeap(boolean offHeap) {
+    this.regionAttributes.offHeap = offHeap;
+    this.regionAttributes.setHasOffHeap(true);
+    
+    if (this.regionAttributes.partitionAttributes != null) {
+      ((PartitionAttributesImpl) this.regionAttributes.partitionAttributes).setOffHeap(offHeap);
+    }
+  }
+  
+      // fix bug #52033 by invoking setOffHeap now (localMaxMemory may now be the temporary placeholder for off-heap until DistributedSystem is created
+      ((PartitionAttributesImpl)this.regionAttributes.partitionAttributes).setOffHeap(this.regionAttributes.getOffHeap());
+    
+    if (attrs.getHDFSStoreName() != null) {
+      if (!attrs.getDataPolicy().withHDFS() && (attrs.getPartitionAttributes() == null || attrs.getPartitionAttributes().getLocalMaxMemory() != 0)) {
+        throw new IllegalStateException(LocalizedStrings.HDFSSTORE_IS_USED_IN_NONHDFS_REGION.toLocalizedString());        
+      }
+    }
-      if (pa.getLocalMaxMemory() < 0) {
+      
+      // fix bug #52033 by invoking getLocalMaxMemoryForValidation here
+      if (((PartitionAttributesImpl)pa).getLocalMaxMemoryForValidation() < 0) {
+      
-      if (pa.getLocalMaxMemory() == 0 && attrs.getDataPolicy() == DataPolicy.PERSISTENT_PARTITION) {
+      
+      // fix bug #52033 by invoking getLocalMaxMemoryForValidation here
+      if (((PartitionAttributesImpl)pa).getLocalMaxMemoryForValidation() == 0 && attrs.getDataPolicy() == DataPolicy.PERSISTENT_PARTITION) {
+    transient CustomEvictionAttributes customEvictionAttributes;
+    String hdfsStoreName = null;
+    private boolean hdfsWriteOnly = false;
+    boolean offHeap = false;
+
+      buf.append("; hdfsStoreName=").append(hdfsStoreName);
+      buf.append("; hdfsWriteOnly=").append(hdfsWriteOnly);
+      buf.append("; offHeap=").append(offHeap);
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public CustomEvictionAttributes getCustomEvictionAttributes() {
+      return this.customEvictionAttributes;
+    }
+
+    @Override
+    public String getHDFSStoreName() {
+      return hdfsStoreName;
+    }
+    
+    @Override
+    public boolean getHDFSWriteOnly() {
+      return hdfsWriteOnly;
+    }
+
+    @Override
+    
+    @Override
+    public boolean getOffHeap() {
+      return this.offHeap;
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS21 INS21 INS21 INS25 INS21 INS65 INS65 INS65 INS65 INS74 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS39 INS42 INS21 INS21 INS65 INS65 INS65 INS39 INS42 INS21 INS21 INS25 INS25 INS83 INS43 INS59 INS43 INS59 INS83 INS39 INS59 INS39 INS59 INS29 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS78 INS83 INS39 INS42 INS8 INS7 INS7 INS7 INS62 INS8 INS7 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS43 INS43 INS43 INS7 INS32 UPD42 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS7 INS32 INS66 INS66 INS66 INS66 INS7 INS32 INS66 INS66 INS42 INS66 INS7 INS32 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS9 INS42 INS9 INS21 INS21 INS21 INS65 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS41 INS42 INS42 INS41 INS22 INS32 INS22 INS32 INS22 INS32 INS42 INS43 INS21 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS42 INS9 INS21 INS42 INS22 INS42 INS22 INS42 INS9 INS22 INS42 INS22 INS42 INS9 INS22 INS42 INS22 INS42 INS9 INS22 INS33 INS21 INS21 INS32 INS33 INS25 INS32 INS32 INS32 INS65 INS22 INS42 INS42 INS22 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS22 INS42 INS43 INS42 INS42 INS42 INS27 INS52 INS42 INS32 INS22 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS32 INS32 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS32 INS52 INS42 INS52 INS42 INS42 INS27 INS27 INS36 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS36 INS42 INS42 INS36 INS42 INS32 INS38 INS36 INS53 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS52 INS42 INS36 INS42 INS42 INS34 INS42 INS34 INS11 INS22 INS42 INS11 INS11 INS22 INS42 INS32 INS27 INS14 INS36 UPD42 INS11 INS43 INS22 INS52 INS42 INS43 INS22 INS43 INS22 INS52 INS42 INS32 INS42 INS27 INS27 INS43 INS32 INS11 INS36 UPD42 INS74 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS33 INS32 INS34 INS42 INS40 INS42 INS43 INS42 INS11 INS43 INS43 INS43 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42