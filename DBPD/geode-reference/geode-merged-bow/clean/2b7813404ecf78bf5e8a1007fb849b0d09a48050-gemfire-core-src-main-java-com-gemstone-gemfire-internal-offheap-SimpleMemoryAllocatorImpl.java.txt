Merge remote-tracking branch 'origin/develop' into wan_cq_donation

-public final class SimpleMemoryAllocatorImpl implements MemoryAllocator, MemoryInspector {
+public final class SimpleMemoryAllocatorImpl implements MemoryAllocator {
-  
+
+  private MemoryInspector memoryInspector;
+
+    this.memoryInspector = new MemoryInspectorImpl(this.freeList);
-  
-  /** The inspection snapshot for MemoryInspector */
-  private List<MemoryBlock> memoryBlocks;
-  
-  @Override
-  public MemoryInspector getMemoryInspector() {
-    return this;
-  }
-  
-  @Override
-  public synchronized void clearInspectionSnapshot() {
-    this.memoryBlocks = null;
-  }
-  
-  @Override
-  public synchronized void createInspectionSnapshot() {
-    List<MemoryBlock> value = this.memoryBlocks;
-    if (value == null) {
-      value = getOrderedBlocks();
-      this.memoryBlocks = value;
-    }
-  }
-  synchronized List<MemoryBlock> getInspectionSnapshot() {
-    List<MemoryBlock> value = this.memoryBlocks;
-    if (value == null) {
-      return Collections.<MemoryBlock>emptyList();
-    } else {
-      return value;
-    }
-  }
-  
-  @Override
-    Collections.sort(orphans, 
+    Collections.sort(orphans,
-    });
+        });
-  
-  @Override
-  public MemoryBlock getFirstBlock() {
-    final List<MemoryBlock> value = getInspectionSnapshot();
-    if (value.isEmpty()) {
-      return null;
-    } else {
-      return value.get(0);
-    }
-  }
-  
-  @Override
-  public List<MemoryBlock> getAllBlocks() {
-    return getOrderedBlocks();
-  }
-  
-  @Override
-  public List<MemoryBlock> getAllocatedBlocks() {
-    return this.freeList.getAllocatedBlocks();
-  }
-  public MemoryBlock getBlockAfter(MemoryBlock block) {
-    if (block == null) {
-      return null;
-    }
-    List<MemoryBlock> blocks = getInspectionSnapshot();
-    int nextBlock = blocks.indexOf(block) + 1;
-    if (nextBlock > 0 && blocks.size() > nextBlock) {
-      return blocks.get(nextBlock);
-    } else {
-      return null;
-    }
+  public MemoryInspector getMemoryInspector() {
+    return this.memoryInspector;
-  private List<MemoryBlock> getOrderedBlocks() {
-    return this.freeList.getOrderedBlocks();
-  }
-  

MOV23 MOV43 MOV78 MOV43 INS42 UPD42 INS21 INS7 INS22 INS22 INS14 MOV52 UPD42 MOV42 INS52 INS42 INS43 MOV22 INS42 INS52 INS42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL52 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL41 DEL8 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31