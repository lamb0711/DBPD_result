GEODE-7398 :show deployer and deploy time (#4509)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>

+import static java.util.Arrays.asList;
+import static org.apache.geode.internal.JarDeployer.getArtifactId;
+
+import java.util.Collection;
+import java.util.HashMap;
-import java.util.Iterator;
+import java.util.Map;
+import java.util.Objects;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import org.apache.geode.internal.JarDeployer;
+import org.apache.geode.internal.serialization.Version;
+import org.apache.geode.management.configuration.Deployment;
-
-  Set<String> jarNames;
+  private final Map<String, Deployment> deployments = new HashMap<>();
-    this.configName = that.configName;
-    this.cacheXmlContent = that.cacheXmlContent;
-    this.cacheXmlFileName = that.cacheXmlFileName;
-    this.propertiesFileName = that.propertiesFileName;
-    this.gemfireProperties = new Properties();
-    this.gemfireProperties.putAll(that.gemfireProperties);
-    this.jarNames = new HashSet<>(that.jarNames);
+    configName = that.configName;
+    cacheXmlContent = that.cacheXmlContent;
+    cacheXmlFileName = that.cacheXmlFileName;
+    propertiesFileName = that.propertiesFileName;
+    gemfireProperties = new Properties();
+    gemfireProperties.putAll(that.gemfireProperties);
+    deployments.putAll(that.deployments);
-    this.cacheXmlFileName = configName + ".xml";
-    this.propertiesFileName = configName + ".properties";
-    this.gemfireProperties = new Properties();
-    this.jarNames = new HashSet<>();
+    cacheXmlFileName = configName + ".xml";
+    propertiesFileName = configName + ".properties";
+    gemfireProperties = new Properties();
-      this.cacheXmlContent = "";
+      cacheXmlContent = "";
-        this.cacheXmlContent = XmlUtils.elementToString(doc);
+        cacheXmlContent = XmlUtils.elementToString(doc);
-    FileInputStream fis = null;
-    try {
-      fis = new FileInputStream(propertiesFile);
-      this.gemfireProperties.load(fis);
-    } finally {
-      if (fis != null) {
-        fis.close();
-      }
+    try (FileInputStream fis = new FileInputStream(propertiesFile)) {
+      gemfireProperties.load(fis);
-  public void addJarNames(Set<String> jarNames) {
-    for (String jarName : jarNames) {
-      String artifactId = JarDeployer.getArtifactId(jarName);
-      Iterator<String> iterator = this.jarNames.iterator();
-      while (iterator.hasNext()) {
-        String next = iterator.next();
-        if (JarDeployer.getArtifactId(next).equals(artifactId)) {
-          iterator.remove();
-        }
-      }
-    }
-    this.jarNames.addAll(jarNames);
+  public void putDeployment(Deployment deployment) {
+    String artifactId = getArtifactId(deployment.getJarFileName());
+    deployments.values().removeIf(d -> getArtifactId(d.getJarFileName()).equals(artifactId));
+    deployments.put(deployment.getId(), deployment);
+  }
+
+  public Collection<Deployment> getDeployments() {
+    return deployments.values();
-    if (jarNames != null) {
-      this.jarNames.removeAll(Stream.of(jarNames).collect(Collectors.toSet()));
+    if (jarNames == null) {
+      deployments.clear();
-      this.jarNames.clear();
+      asList(jarNames).forEach(deployments::remove);
-    return this.jarNames;
+    return deployments.keySet();
-    DataSerializer.writeHashSet((HashSet<?>) jarNames, out);
+    // Before 1.12, this code wrote a non-null HashSet of jarnames to the output stream.
+    // As of 1.12, it writes a null HashSet to the stream, so that when we can still read the old
+    // configuration, and will now also write the deployment map.
+    DataSerializer.writeHashSet(null, out);
+    // As of 1.12, this class starting writing the current version
+    Version.getCurrentVersion().writeOrdinal(out, true);
+    DataSerializer.writeHashMap(deployments, out);
-    this.configName = DataSerializer.readString(in);
-    this.cacheXmlFileName = DataSerializer.readString(in);
-    this.cacheXmlContent = DataSerializer.readString(in);
-    this.propertiesFileName = DataSerializer.readString(in);
-    this.gemfireProperties = DataSerializer.readProperties(in);
-    this.jarNames = DataSerializer.readHashSet(in);
+    configName = DataSerializer.readString(in);
+    cacheXmlFileName = DataSerializer.readString(in);
+    cacheXmlContent = DataSerializer.readString(in);
+    propertiesFileName = DataSerializer.readString(in);
+    gemfireProperties = DataSerializer.readProperties(in);
+    HashSet<String> jarNames = DataSerializer.readHashSet(in);
+    if (jarNames != null) {
+      // we are reading pre 1.12 data. So add each jar name to deployments
+      jarNames.stream()
+          .map(Deployment::new)
+          .forEach(deployment -> deployments.put(deployment.getJarFileName(), deployment));
+    } else {
+      // version of the data we are reading (1.12 or later)
+      Version version = Version.fromOrdinalNoThrow(Version.readOrdinal(in), true);
+      if (version.compareTo(Version.GEODE_1_12_0) >= 0) {
+        deployments.putAll(DataSerializer.readHashMap(in));
+      }
+    }
-
-    return "Configuration [configName=" + configName + ", cacheXmlContent=" + cacheXmlContent
-        + ", cacheXmlFileName=" + cacheXmlFileName + ", propertiesFileName=" + propertiesFileName
-        + ", gemfireProperties=" + gemfireProperties + ", jarNames=" + jarNames + "]";
+    return "Configuration{" +
+        "configName='" + configName + '\'' +
+        ", cacheXmlContent='" + cacheXmlContent + '\'' +
+        ", cacheXmlFileName='" + cacheXmlFileName + '\'' +
+        ", propertiesFileName='" + propertiesFileName + '\'' +
+        ", gemfireProperties=" + gemfireProperties +
+        ", deployments=" + deployments +
+        '}';
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    Configuration that = (Configuration) o;
+    return Objects.equals(configName, that.configName) &&
+        Objects.equals(cacheXmlContent, that.cacheXmlContent) &&
+        Objects.equals(cacheXmlFileName, that.cacheXmlFileName) &&
+        Objects.equals(propertiesFileName, that.propertiesFileName) &&
+        Objects.equals(gemfireProperties, that.gemfireProperties) &&
+        Objects.equals(deployments, that.deployments);
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((cacheXmlContent == null) ? 0 : cacheXmlContent.hashCode());
-    result = prime * result + ((cacheXmlFileName == null) ? 0 : cacheXmlFileName.hashCode());
-    result = prime * result + ((configName == null) ? 0 : configName.hashCode());
-    result = prime * result + ((gemfireProperties == null) ? 0 : gemfireProperties.hashCode());
-    result = prime * result + ((jarNames == null) ? 0 : jarNames.hashCode());
-    result = prime * result + ((propertiesFileName == null) ? 0 : propertiesFileName.hashCode());
-    return result;
+    return Objects.hash(configName, cacheXmlContent, cacheXmlFileName, propertiesFileName,
+        gemfireProperties, deployments);
-
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (!(obj instanceof Configuration))
-      return false;
-    Configuration other = (Configuration) obj;
-    if (cacheXmlContent == null) {
-      if (other.cacheXmlContent != null)
-        return false;
-    } else if (!cacheXmlContent.equals(other.cacheXmlContent))
-      return false;
-    if (cacheXmlFileName == null) {
-      if (other.cacheXmlFileName != null)
-        return false;
-    } else if (!cacheXmlFileName.equals(other.cacheXmlFileName))
-      return false;
-    if (configName == null) {
-      if (other.configName != null)
-        return false;
-    } else if (!configName.equals(other.configName))
-      return false;
-    if (gemfireProperties == null) {
-      if (other.gemfireProperties != null)
-        return false;
-    } else if (!gemfireProperties.equals(other.gemfireProperties))
-      return false;
-    if (jarNames == null) {
-      if (other.jarNames != null)
-        return false;
-    } else if (!jarNames.equals(other.jarNames))
-      return false;
-    if (propertiesFileName == null) {
-      if (other.propertiesFileName != null)
-        return false;
-    } else if (!propertiesFileName.equals(other.propertiesFileName))
-      return false;
-    return true;
-  }
-

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 UPD40 INS40 UPD40 INS40 UPD40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 UPD74 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS74 INS42 INS8 INS8 MOV78 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 MOV78 INS83 INS39 INS42 INS8 UPD43 MOV43 UPD43 UPD42 INS14 INS54 INS43 INS42 MOV60 INS21 MOV21 INS43 INS43 INS41 INS21 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 INS60 INS25 UPD42 INS25 INS25 MOV60 INS41 INS41 UPD42 UPD42 INS74 INS32 INS58 MOV8 UPD42 MOV42 MOV43 INS32 INS32 INS42 INS42 INS32 MOV27 INS32 INS32 INS32 UPD74 MOV74 INS59 MOV27 INS8 INS8 INS27 INS8 INS27 INS8 MOV43 INS27 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 MOV43 INS59 INS32 UPD42 MOV42 INS86 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS9 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV32 MOV21 INS60 INS25 INS27 INS13 UPD45 INS13 UPD45 INS13 UPD45 INS13 UPD45 UPD42 INS13 INS52 UPD42 MOV42 MOV41 INS27 INS27 MOV41 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 UPD42 MOV42 INS42 MOV42 MOV14 INS32 INS42 UPD42 MOV42 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS43 INS59 INS27 INS8 UPD45 MOV45 INS45 UPD42 MOV42 MOV33 INS32 INS32 MOV43 UPD42 INS42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 MOV42 INS42 INS40 UPD42 MOV42 MOV42 INS42 INS40 UPD42 MOV42 MOV42 INS42 INS40 UPD42 MOV42 MOV42 INS42 UPD40 MOV40 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS90 INS32 INS42 INS86 INS42 INS42 INS32 INS32 INS34 INS21 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS89 INS59 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS40 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL40 DEL14 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL8 DEL25 DEL8 DEL61 DEL8 DEL70 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL76 DEL74 DEL42 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL8 DEL45 DEL83 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL27 DEL33 DEL27 DEL36 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL27 DEL36 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL36 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL36 DEL34 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL36 DEL34 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL36 DEL34 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL27 DEL25 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL9 DEL41 DEL8 DEL31