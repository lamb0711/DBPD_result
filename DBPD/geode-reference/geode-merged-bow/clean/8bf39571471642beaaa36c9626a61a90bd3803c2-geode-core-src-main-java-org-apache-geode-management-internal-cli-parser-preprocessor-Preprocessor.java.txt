Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code><br></code> This Class will serve the same purpose as pre-processors do during compilation of a program.
+ * <code><br></code> This Class will serve the same purpose as pre-processors do during compilation
+ * of a program.
- * It will split the user input into an array of strings as per the specifications of the command for e.g; Different
- * command might require different value separators, different value specifiers and many more customizations
+ * It will split the user input into an array of strings as per the specifications of the command
+ * for e.g; Different command might require different value separators, different value specifiers
+ * and many more customizations
-    int startOfString = 0; // Starting index of the string we're currently parsing and preparing to save
+    int startOfString = 0; // Starting index of the string we're currently parsing and preparing to
+                           // save
-      while (index < length && !trimInput.regionMatches(index, OPTION_DELIMITER, 0, OPTION_DELIMITER.length())) {
+      while (index < length
+          && !trimInput.regionMatches(index, OPTION_DELIMITER, 0, OPTION_DELIMITER.length())) {
-          // Look for the next single or double quote. Those preceded by a '\' character are ignored.
-          while (index < length && (trimInput.charAt(index) != charToLookFor || trimInput.charAt(index - 1) == '\\')) {
+          // Look for the next single or double quote. Those preceded by a '\' character are
+          // ignored.
+          while (index < length && (trimInput.charAt(index) != charToLookFor
+              || trimInput.charAt(index - 1) == '\\')) {
-        // 3. One argument has finished & we are now at the next argument - check for Argument Separator (" ") 
-        if (index >= length || trimInput.regionMatches(index, OPTION_DELIMITER, 0, OPTION_DELIMITER.length())
+        // 3. One argument has finished & we are now at the next argument - check for Argument
+        // Separator (" ")
+        if (index >= length
+            || trimInput.regionMatches(index, OPTION_DELIMITER, 0, OPTION_DELIMITER.length())
-          String stringToAdd = trimInput.substring(startOfString, (index > length ? length : index)).trim();
+          String stringToAdd =
+              trimInput.substring(startOfString, (index > length ? length : index)).trim();
-      while (index < length && !trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())
+      while (index < length
+          && !trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())
-        while (index < length && !trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())) {
+        while (index < length
+            && !trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())) {
-          if (index < length && (trimInput.charAt(index) == '\'' || trimInput.charAt(index) == '\"')) {
+          if (index < length
+              && (trimInput.charAt(index) == '\'' || trimInput.charAt(index) == '\"')) {
-            // Look for the next single or double quote. Those preceded by a '\' character are ignored.
-            while (index < length && (trimInput.charAt(index) != charToLookFor || trimInput.charAt(index - 1) == '\\')) {
+            // Look for the next single or double quote. Those preceded by a '\' character are
+            // ignored.
+            while (index < length && (trimInput.charAt(index) != charToLookFor
+                || trimInput.charAt(index - 1) == '\\')) {
-        if (index >= length || trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())) {
+        if (index >= length
+            || trimInput.regionMatches(index, OPTION_SEPARATOR, 0, OPTION_SEPARATOR.length())) {
-            String stringToAdd = trimInput.substring(startOfString, (index > length ? length : index));
+            String stringToAdd =
+                trimInput.substring(startOfString, (index > length ? length : index));

UPD66 INS66 UPD66 UPD66 INS66