GEODE-6883: Removing some dependencies on core from membership

* Removing some direct dependencies on classes outside of membership.
* Replaced the pattern having each Service implement MessageHandler and
  have a single processMessage method with a switch statement. Instead
  we install individual MessageHandlers for each message.
* Removed GMSAuthenticator from Services. Instead we inject the
  Authenticator when we create a MembershipManager.

Key-Gripped-By: Bill Burcham <bburcham@pivotal.io>
Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
Co-Authored-By: Ernest Burghardt <eburghardt@pivotal.io>

-import static org.apache.geode.internal.DataSerializableFixedID.FIND_COORDINATOR_REQ;
-import static org.apache.geode.internal.DataSerializableFixedID.FIND_COORDINATOR_RESP;
-import static org.apache.geode.internal.DataSerializableFixedID.INSTALL_VIEW_MESSAGE;
-import static org.apache.geode.internal.DataSerializableFixedID.JOIN_RESPONSE;
-import static org.apache.geode.internal.DataSerializableFixedID.NETWORK_PARTITION_MESSAGE;
-import static org.apache.geode.internal.DataSerializableFixedID.VIEW_ACK_MESSAGE;
-import org.apache.geode.distributed.internal.membership.gms.interfaces.MessageHandler;
-public class GMSJoinLeave implements JoinLeave, MessageHandler {
+public class GMSJoinLeave implements JoinLeave {
-  private void processJoinRequest(JoinRequestMessage incomingRequest) {
+  void processMessage(JoinRequestMessage incomingRequest) {
+    if (isStopping) {
+      return;
+    }
-  private void processLeaveRequest(LeaveRequestMessage incomingRequest) {
+  void processMessage(LeaveRequestMessage incomingRequest) {
+    if (isStopping) {
+      return;
+    }
-    logger.info(() -> "JoinLeave.processLeaveRequest invoked.  isCoordinator=" + isCoordinator
+    logger.info(() -> "JoinLeave.processMessage(LeaveRequestMessage) invoked.  isCoordinator="
+        + isCoordinator
-  private void processRemoveRequest(RemoveMemberMessage incomingRequest) {
+  void processMessage(RemoveMemberMessage incomingRequest) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processViewMessage(final InstallViewMessage m) {
+  void processMessage(final InstallViewMessage m) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processViewAckMessage(ViewAckMessage m) {
+  void processMessage(ViewAckMessage m) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processJoinResponse(JoinResponseMessage rsp) {
+  void processMessage(JoinResponseMessage rsp) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processFindCoordinatorRequest(FindCoordinatorRequest req) {
+  void processMessage(FindCoordinatorRequest req) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processFindCoordinatorResponse(FindCoordinatorResponse resp) {
+  void processMessage(FindCoordinatorResponse resp) {
+    if (isStopping) {
+      return;
+    }
+
-  private void processNetworkPartitionMessage(NetworkPartitionMessage msg) {
+  void processMessage(NetworkPartitionMessage msg) {
+    if (isStopping) {
+      return;
+    }
+
-      processRemoveRequest(msg);
+      processMessage(msg);
-    processLeaveRequest(msg);
+    processMessage(msg);
-    services.getMessenger().addHandler(JoinRequestMessage.class, this);
-    services.getMessenger().addHandler(JoinResponseMessage.class, this);
-    services.getMessenger().addHandler(InstallViewMessage.class, this);
-    services.getMessenger().addHandler(ViewAckMessage.class, this);
-    services.getMessenger().addHandler(LeaveRequestMessage.class, this);
-    services.getMessenger().addHandler(RemoveMemberMessage.class, this);
-    services.getMessenger().addHandler(FindCoordinatorRequest.class, this);
-    services.getMessenger().addHandler(FindCoordinatorResponse.class, this);
-    services.getMessenger().addHandler(NetworkPartitionMessage.class, this);
+    services.getMessenger().addHandler(JoinRequestMessage.class, this::processMessage);
+    services.getMessenger().addHandler(JoinResponseMessage.class, this::processMessage);
+    services.getMessenger().addHandler(InstallViewMessage.class, this::processMessage);
+    services.getMessenger().addHandler(ViewAckMessage.class, this::processMessage);
+    services.getMessenger().addHandler(LeaveRequestMessage.class, this::processMessage);
+    services.getMessenger().addHandler(RemoveMemberMessage.class, this::processMessage);
+    services.getMessenger().addHandler(FindCoordinatorRequest.class,
+        this::processMessage);
+    services.getMessenger().addHandler(FindCoordinatorResponse.class,
+        this::processMessage);
+    services.getMessenger().addHandler(NetworkPartitionMessage.class,
+        this::processMessage);
-  @Override
-  public void processMessage(DistributionMessage m) {
-    if (isStopping) {
-      return;
-    }
-    logger.debug("processing {}", m);
-    switch (m.getDSFID()) {
-      case JOIN_REQUEST:
-        assert m instanceof JoinRequestMessage;
-        processJoinRequest((JoinRequestMessage) m);
-        break;
-      case JOIN_RESPONSE:
-        assert m instanceof JoinResponseMessage;
-        processJoinResponse((JoinResponseMessage) m);
-        break;
-      case INSTALL_VIEW_MESSAGE:
-        assert m instanceof InstallViewMessage;
-        processViewMessage((InstallViewMessage) m);
-        break;
-      case VIEW_ACK_MESSAGE:
-        assert m instanceof ViewAckMessage;
-        processViewAckMessage((ViewAckMessage) m);
-        break;
-      case LEAVE_REQUEST_MESSAGE:
-        assert m instanceof LeaveRequestMessage;
-        processLeaveRequest((LeaveRequestMessage) m);
-        break;
-      case REMOVE_MEMBER_REQUEST:
-        assert m instanceof RemoveMemberMessage;
-        processRemoveRequest((RemoveMemberMessage) m);
-        break;
-      case FIND_COORDINATOR_REQ:
-        assert m instanceof FindCoordinatorRequest;
-        processFindCoordinatorRequest((FindCoordinatorRequest) m);
-        break;
-      case FIND_COORDINATOR_RESP:
-        assert m instanceof FindCoordinatorResponse;
-        processFindCoordinatorResponse((FindCoordinatorResponse) m);
-        break;
-      case NETWORK_PARTITION_MESSAGE:
-        assert m instanceof NetworkPartitionMessage;
-        processNetworkPartitionMessage((NetworkPartitionMessage) m);
-        break;
-      default:
-        throw new IllegalArgumentException("unknown message type: " + m);
-    }
-  }
-

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 MOV25 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS41 UPD42 INS90 INS90 INS90 INS90 INS90 INS90 INS90 INS90 INS90 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL52 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL10 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31