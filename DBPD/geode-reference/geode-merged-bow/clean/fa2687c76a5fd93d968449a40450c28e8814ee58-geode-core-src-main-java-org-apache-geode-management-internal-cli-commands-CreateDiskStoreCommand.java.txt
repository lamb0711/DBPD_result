 GEODE-2668: build tabular command result from a list of function results  (#1127)

* GEODE-2668: build tabular command result from a list of function results

* reduce duplicate code to create the tabular results
* promote presentation consistency
* Add more validation for CreateGatewaySender/Receiver command and reworked the tests

-import java.util.concurrent.atomic.AtomicReference;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-    try {
-      DiskStoreAttributes diskStoreAttributes = new DiskStoreAttributes();
-      diskStoreAttributes.allowForceCompaction = allowForceCompaction;
-      diskStoreAttributes.autoCompact = autoCompact;
-      diskStoreAttributes.compactionThreshold = compactionThreshold;
-      diskStoreAttributes.maxOplogSizeInBytes = maxOplogSize * (1024 * 1024);
-      diskStoreAttributes.queueSize = queueSize;
-      diskStoreAttributes.timeInterval = timeInterval;
-      diskStoreAttributes.writeBufferSize = writeBufferSize;
-      File[] directories = new File[directoriesAndSizes.length];
-      int[] sizes = new int[directoriesAndSizes.length];
-      for (int i = 0; i < directoriesAndSizes.length; i++) {
-        final int hashPosition = directoriesAndSizes[i].indexOf('#');
-        if (hashPosition == -1) {
-          directories[i] = new File(directoriesAndSizes[i]);
-          sizes[i] = Integer.MAX_VALUE;
-        } else {
-          directories[i] = new File(directoriesAndSizes[i].substring(0, hashPosition));
-          sizes[i] = Integer.parseInt(directoriesAndSizes[i].substring(hashPosition + 1));
-        }
+    DiskStoreAttributes diskStoreAttributes = new DiskStoreAttributes();
+    diskStoreAttributes.allowForceCompaction = allowForceCompaction;
+    diskStoreAttributes.autoCompact = autoCompact;
+    diskStoreAttributes.compactionThreshold = compactionThreshold;
+    diskStoreAttributes.maxOplogSizeInBytes = maxOplogSize * (1024 * 1024);
+    diskStoreAttributes.queueSize = queueSize;
+    diskStoreAttributes.timeInterval = timeInterval;
+    diskStoreAttributes.writeBufferSize = writeBufferSize;
+
+    File[] directories = new File[directoriesAndSizes.length];
+    int[] sizes = new int[directoriesAndSizes.length];
+    for (int i = 0; i < directoriesAndSizes.length; i++) {
+      final int hashPosition = directoriesAndSizes[i].indexOf('#');
+      if (hashPosition == -1) {
+        directories[i] = new File(directoriesAndSizes[i]);
+        sizes[i] = Integer.MAX_VALUE;
+      } else {
+        directories[i] = new File(directoriesAndSizes[i].substring(0, hashPosition));
+        sizes[i] = Integer.parseInt(directoriesAndSizes[i].substring(hashPosition + 1));
-      diskStoreAttributes.diskDirs = directories;
-      diskStoreAttributes.diskDirSizes = sizes;
-
-      diskStoreAttributes.setDiskUsageWarningPercentage(diskUsageWarningPercentage);
-      diskStoreAttributes.setDiskUsageCriticalPercentage(diskUsageCriticalPercentage);
-
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      boolean accumulatedData = false;
-
-      Set<DistributedMember> targetMembers = CliUtil.findMembers(groups, null);
-
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(new CreateDiskStoreFunction(),
-          new Object[] {name, diskStoreAttributes}, targetMembers);
-      List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
-
-      AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
-      for (CliFunctionResult result : results) {
-        if (result.getThrowable() != null) {
-          tabularData.accumulate("Member", result.getMemberIdOrName());
-          tabularData.accumulate("Result", "ERROR: " + result.getThrowable().getClass().getName()
-              + ": " + result.getThrowable().getMessage());
-          accumulatedData = true;
-          tabularData.setStatus(Result.Status.ERROR);
-        } else if (result.isSuccessful()) {
-          tabularData.accumulate("Member", result.getMemberIdOrName());
-          tabularData.accumulate("Result", result.getMessage());
-          accumulatedData = true;
-
-          if (xmlEntity.get() == null) {
-            xmlEntity.set(result.getXmlEntity());
-          }
-        }
-      }
-
-      if (!accumulatedData) {
-        return ResultBuilder.createInfoResult("Unable to create disk store(s).");
-      }
-
-      Result result = ResultBuilder.buildResult(tabularData);
-
-      if (xmlEntity.get() != null) {
-        persistClusterConfiguration(result,
-            () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), groups));
-      }
-
-      return ResultBuilder.buildResult(tabularData);
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable th) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createGemFireErrorResult(
-          CliStrings.format(CliStrings.CREATE_DISK_STORE__ERROR_WHILE_CREATING_REASON_0,
-              new Object[] {th.getMessage()}));
+    diskStoreAttributes.diskDirs = directories;
+    diskStoreAttributes.diskDirSizes = sizes;
+
+    diskStoreAttributes.setDiskUsageWarningPercentage(diskUsageWarningPercentage);
+    diskStoreAttributes.setDiskUsageCriticalPercentage(diskUsageCriticalPercentage);
+
+    Set<DistributedMember> targetMembers = findMembers(groups, null);
+
+    if (targetMembers.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+
+    List<CliFunctionResult> results = executeAndGetFunctionResult(new CreateDiskStoreFunction(),
+        new Object[] {name, diskStoreAttributes}, targetMembers);
+
+    CommandResult result = ResultBuilder.buildResult(results);
+    XmlEntity xmlEntity = findXmlEntity(results);
+
+    if (xmlEntity != null) {
+      persistClusterConfiguration(result,
+          () -> getSharedConfiguration().addXmlEntity(xmlEntity, groups));
+    }
+
+    return result;

MOV26 UPD40 MOV8 INS60 UPD74 INS43 MOV43 INS59 INS42 MOV43 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL76 DEL76 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL32 DEL11 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL70 DEL42 DEL38 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8