Merge branch 'release/1.8.0'

-@SuppressWarnings("unused")
+  private static final Logger LOGGER = StatusLogger.getLogger();
+
-    LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager
-        .getLogger(BASE_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext();
-    context.removePropertyChangeListener(propertyChangeListener);
-    context.addPropertyChangeListener(propertyChangeListener);
-    context.reconfigure(); // propertyChangeListener invokes configureFastLoggerDelegating
+    LoggerContext loggerContext = getLoggerContext(BASE_LOGGER_NAME);
+    loggerContext.removePropertyChangeListener(propertyChangeListener);
+    loggerContext.addPropertyChangeListener(propertyChangeListener);
+    loggerContext.reconfigure(); // propertyChangeListener invokes configureFastLoggerDelegating
-  public static void initialize() {
-    new LogService();
-  }
-
-    final boolean useMainLoggerForSecurity = !hasSecurityLogFile;
+    boolean useMainLoggerForSecurity = !hasSecurityLogFile;
-    final Configuration config =
-        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
-            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
+    Configuration configuration = getConfiguration();
-    final StrSubstitutor sub = config.getStrSubstitutor();
-    final StrLookup resolver = sub.getVariableResolver();
+    StrSubstitutor strSubstitutor = configuration.getStrSubstitutor();
+    StrLookup variableResolver = strSubstitutor.getVariableResolver();
-    final String value = resolver.lookup(GEMFIRE_DEFAULT_PROPERTY);
+    String value = variableResolver.lookup(GEMFIRE_DEFAULT_PROPERTY);
-  public static String getConfigInformation() {
+  public static String getConfigurationInfo() {
-   * @throws java.lang.IllegalArgumentException if the Level int is not registered.
+   * @throws IllegalArgumentException if the Level int is not registered.
-    final Configuration config =
-        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
-            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-    return config;
+    return getRootLoggerContext().getConfiguration();
-    final Configuration config =
-        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
-            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-
-    if (Configurator.hasContextWideFilter(config) || Configurator.hasAppenderFilter(config)
-        || Configurator.hasDebugOrLower(config) || Configurator.hasLoggerFilter(config)
-        || Configurator.hasAppenderRefFilter(config)) {
+    Configuration configuration = getConfiguration();
+    if (Configurator.hasContextWideFilter(configuration)
+        || Configurator.hasAppenderFilter(configuration)
+        || Configurator.hasDebugOrLower(configuration)
+        || Configurator.hasLoggerFilter(configuration)
+        || Configurator.hasAppenderRefFilter(configuration)) {
-  public static LoggerConfig getRootLoggerConfig() {
-    return Configurator.getLoggerConfig(LogManager.getRootLogger().getName());
+  private static LoggerContext getLoggerContext(final String name) {
+    return ((org.apache.logging.log4j.core.Logger) LogManager
+        .getLogger(name, GemFireParameterizedMessageFactory.INSTANCE)).getContext();
+  }
+
+  static LoggerContext getRootLoggerContext() {
+    return ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).getContext();
-    final AppenderContext appenderContext =
-        LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
-    final LoggerConfig config = appenderContext.getLoggerConfig();
-    Appender stdout = config.getAppenders().get(STDOUT);
-    if (stdout != null) {
-      config.removeAppender(STDOUT);
-      stdoutAppender = stdout;
+    AppenderContext appenderContext = getAppenderContext(ROOT_LOGGER_NAME);
+    LoggerConfig loggerConfig = appenderContext.getLoggerConfig();
+    Appender stdoutAppender = loggerConfig.getAppenders().get(STDOUT);
+    if (stdoutAppender != null) {
+      loggerConfig.removeAppender(STDOUT);
+      LogService.stdoutAppender = stdoutAppender;
-    final AppenderContext appenderContext =
-        LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
-    final LoggerConfig config = appenderContext.getLoggerConfig();
-    Appender stdout = config.getAppenders().get(STDOUT);
-    if (stdout == null) {
-      config.addAppender(stdoutAppender, Level.ALL, null);
+    AppenderContext appenderContext = getAppenderContext(ROOT_LOGGER_NAME);
+    LoggerConfig loggerConfig = appenderContext.getLoggerConfig();
+    Appender stdoutAppender = loggerConfig.getAppenders().get(STDOUT);
+    if (stdoutAppender == null) {
+      loggerConfig.addAppender(LogService.stdoutAppender, Level.ALL, null);
-    @SuppressWarnings("synthetic-access")
-      StatusLogger.getLogger().debug(
-          "LogService responding to a property change event. Property name is {}.",
+      LOGGER.debug("LogService responding to a property change event. Property name is {}.",

INS23 INS31 INS83 INS83 INS83 INS43 INS59 UPD42 INS83 INS83 INS43 INS42 INS44 INS8 UPD43 UPD42 INS42 INS42 MOV32 INS41 INS42 INS83 MOV43 INS42 INS41 UPD42 MOV60 MOV60 INS43 INS42 INS32 MOV43 INS32 MOV32 MOV43 MOV43 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 MOV32 MOV42 UPD42 INS36 INS42 INS36 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS11 INS11 INS42 INS42 INS42 MOV43 INS32 MOV43 MOV32 UPD42 UPD42 INS40 UPD42 UPD42 INS40 INS42 INS42 INS42 INS40 DEL42 DEL45 DEL79 DEL40 DEL43 DEL42 DEL40 DEL32 DEL11 DEL36 DEL42 DEL32 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL14 DEL21 DEL8 DEL31 DEL83 DEL83 DEL40 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL11 DEL36 DEL42 DEL32 DEL83 DEL83 DEL83 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL11 DEL36 DEL83 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL11 DEL36 DEL42 DEL32 DEL83 DEL42 DEL42 DEL32 DEL83 DEL42 DEL40 DEL83 DEL42 DEL83 DEL42 DEL40 DEL83 DEL42 DEL42 DEL45 DEL79