Revert "Merge pull request #3878 from aaronlindsey/server-online-uses-startup-tasks"

This reverts commit d9a9e30275ae21e33212a48ca72762bacdf37d67, reversing
changes made to f0db209e0508a313e1095a99d3e6009c1d229ce0.

-import java.util.concurrent.CompletableFuture;
-import java.util.function.Supplier;
-import org.apache.geode.internal.process.FileControllableProcess;
-  private final ServerLauncherCacheProvider serverLauncherCacheProvider;
-  private final Supplier<ControllableProcess> controllableProcessFactory;
-    serverLauncherCacheProvider = builder.getServerLauncherCacheProvider();
-    controllableProcessFactory = builder.getControllableProcessFactory();
-        process = getControllableProcess();
+        process = new ControllableProcess(controlHandler, new File(getWorkingDirectory()),
+            ProcessType.SERVER, isForcing());
-          startCacheServer(cache);
+          startCacheServer(cache, startTime);
-        awaitStartupTasks(cache, startTime);
-
-    Iterable<ServerLauncherCacheProvider> loader = getServerLauncherCacheProviders();
+    ServiceLoader<ServerLauncherCacheProvider> loader =
+        ServiceLoader.load(ServerLauncherCacheProvider.class);
-  private Iterable<ServerLauncherCacheProvider> getServerLauncherCacheProviders() {
-    return serverLauncherCacheProvider != null
-        ? Collections.singleton(serverLauncherCacheProvider)
-        : ServiceLoader.load(ServerLauncherCacheProvider.class);
-  }
-
+   * @param startTime the system clock time at which the start method was called
-  private void startCacheServer(final Cache cache) throws IOException {
+  @VisibleForTesting
+  void startCacheServer(final Cache cache, long startTime) throws IOException {
-  }
-  private void awaitStartupTasks(Cache cache, long startTime) {
-    CompletableFuture<Void> startupTasks =
-        ((InternalResourceManager) cache.getResourceManager())
-            .allOfStartupTasks();
-
-    startupTasks
-        .thenRun(afterStartup)
-        .exceptionally((throwable) -> {
-          exceptionAction.accept(throwable);
-          return null;
-        })
-        .join();
+    ((InternalResourceManager) cache.getResourceManager())
+        .runWhenStartupTasksComplete(afterStartup, exceptionAction);
-  private ControllableProcess getControllableProcess()
-      throws IOException, FileAlreadyExistsException, PidUnavailableException {
-    return controllableProcessFactory != null
-        ? controllableProcessFactory.get()
-        : new FileControllableProcess(controlHandler, new File(getWorkingDirectory()),
-            ProcessType.SERVER, isForcing());
-  }
-
-    private ServerLauncherCacheProvider serverLauncherCacheProvider;
-    private Supplier<ControllableProcess> controllableProcessFactory;
-      return startupExceptionAction;
-    }
-
-    /**
-     * Sets the ServerLauncherCacheProvider to use when creating the cache.
-     *
-     * @param serverLauncherCacheProvider the cache provider to use
-     * @return this builder
-     */
-    Builder setServerLauncherCacheProvider(
-        ServerLauncherCacheProvider serverLauncherCacheProvider) {
-      this.serverLauncherCacheProvider = serverLauncherCacheProvider;
-      return this;
-    }
-
-    /**
-     * Gets the ServerLauncherCacheProvider to use when creating the cache.
-     *
-     * @return the cache provider
-     */
-    ServerLauncherCacheProvider getServerLauncherCacheProvider() {
-      return serverLauncherCacheProvider;
-    }
-
-    /**
-     * Sets the factory to use to get a {@code ControllableProcess} when starting the server.
-     *
-     * @param controllableProcessFactory the controllable process factory to use
-     * @return this builder
-     */
-    Builder setControllableProcessFactory(
-        Supplier<ControllableProcess> controllableProcessFactory) {
-      this.controllableProcessFactory = controllableProcessFactory;
-      return this;
-    }
-
-    /**
-     * Gets the factory used to get a {@code ControllableProcess} when starting the server.
-     *
-     * @return the controllable process factory
-     */
-    Supplier<ControllableProcess> getControllableProcessFactory() {
-      return controllableProcessFactory;
+      return this.startupExceptionAction;

INS78 MOV44 INS65 INS42 MOV60 MOV60 INS21 UPD74 INS42 INS66 INS32 UPD43 MOV36 INS42 INS42 INS42 INS22 UPD42 MOV42 MOV42 MOV57 INS52 INS42 INS14 MOV43 INS42 MOV14 INS40 MOV32 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL86 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL40 DEL14 DEL16 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31