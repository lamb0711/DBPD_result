Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.io.BufferedReader;
+import java.io.InputStreamReader;
-import java.util.Arrays;
-import java.util.ListIterator;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-import com.gemstone.gemfire.internal.LinuxProcessStats;
-import com.gemstone.gemfire.internal.LinuxSystemStats;
+import org.apache.logging.log4j.Logger;
-class LinuxProcFsStatistics {
+public class LinuxProcFsStatistics {
+  /**
+   * Returns the available system memory (free + cached).
+   * @param logger the logger
+   * @return the available memory in bytes
+   */
+  public static long getAvailableMemory(Logger logger) {
+    try {
+      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/meminfo")));
+      try {
+        long free = 0;
+        Pattern p = Pattern.compile("(.*)?:\\s+(\\d+)( kB)?");
+        
+        String line;
+        while ((line = br.readLine()) != null) {
+          Matcher m = p.matcher(line);
+          if (m.matches() && ("MemFree".equals(m.group(1)) || "Cached".equals(m.group(1)))) {
+            free += Long.parseLong(m.group(2));
+          }
+        }
+        
+        // convert to bytes
+        return 1024 * free;
+        
+      } finally {
+        br.close();
+      }
+    } catch (IOException e) {
+      logger.warn("Error determining free memory", e);
+      return Long.MAX_VALUE;
+    }
+  }
+  

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS83 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS54 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS60 INS54 INS44 INS8 INS43 INS59 INS8 INS8 INS43 INS42 INS21 INS41 INS42 INS42 INS14 INS60 INS60 INS60 INS61 INS41 INS21 INS42 INS32 INS40 INS43 INS14 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS32 INS42 INS42 INS45 INS42 INS42 INS43 INS14 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS36 INS33 INS60 INS25 INS34 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS45 INS7 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS32 INS32 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 DEL40 DEL26