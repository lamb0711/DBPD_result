Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+
- * Do not modify this class. It was generated.
- * Instead modify LeafRegionEntry.cpp and then run
- * bin/generateRegionEntryClasses.sh from the directory
- * that contains your build.xml.
+ * Do not modify this class. It was generated. Instead modify LeafRegionEntry.cpp and then run
+ * ./dev-tools/generateRegionEntryClasses.sh (it must be run from the top level directory).
-  public VMThinDiskRegionEntryOffHeapIntKey (RegionEntryContext context, int key,
-      @Retained
-      Object value
-      ) {
-    super(context,
-          (value instanceof RecoveredEntry ? null : value)
-        );
+  public VMThinDiskRegionEntryOffHeapIntKey(RegionEntryContext context, int key,
+      @Retained Object value) {
+    super(context, (value instanceof RecoveredEntry ? null : value));
+
-  private static final AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapIntKey> lastModifiedUpdater
-    = AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapIntKey.class, "lastModified");
+  private static final AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapIntKey> lastModifiedUpdater =
+      AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapIntKey.class, "lastModified");
-  @Retained @Released private volatile long ohAddress;
+  @Retained
+  @Released
+  private volatile long ohAddress;
-   * I needed to add this because I wanted clear to call setValue which normally can only be called while the re is synced.
-   * But if I sync in that code it causes a lock ordering deadlock with the disk regions because they also get a rw lock in clear.
-   * Some hardware platforms do not support CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync
-   * on the re and we will once again be deadlocked.
-   * I don't know if we support any of the hardware platforms that do not have a 64bit CAS. If we do then we can expect deadlocks
-   * on disk regions.
+   * I needed to add this because I wanted clear to call setValue which normally can only be called
+   * while the re is synced. But if I sync in that code it causes a lock ordering deadlock with the
+   * disk regions because they also get a rw lock in clear. Some hardware platforms do not support
+   * CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync on the
+   * re and we will once again be deadlocked. I don't know if we support any of the hardware
+   * platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk regions.
-  private final static AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapIntKey> ohAddrUpdater = AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapIntKey.class, "ohAddress");
+  private final static AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapIntKey> ohAddrUpdater =
+      AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapIntKey.class, "ohAddress");
+
+
+
+
+
+
+
+
-//    if (this instanceof VMThinRegionEntryLongKey) {
-//      factory.returnToPool((VMThinRegionEntryLongKey)this);
-//    }
+    // if (this instanceof VMThinRegionEntryLongKey) {
+    // factory.returnToPool((VMThinRegionEntryLongKey)this);
+    // }
+
+
+
+
+
+
+
+
+
-    DiskRecoveryStore drs = (DiskRecoveryStore)context;
+    DiskRecoveryStore drs = (DiskRecoveryStore) context;
-    //get appropriate instance of DiskId implementation based on maxOplogSize
+    // get appropriate instance of DiskId implementation based on maxOplogSize
+
-  protected DiskId id;//= new DiskId();
+  protected DiskId id;// = new DiskId();
+
+
-    this.id = ((AbstractDiskRegionEntry)old).getDiskId();
+    this.id = ((AbstractDiskRegionEntry) old).getDiskId();
-//  // inlining DiskId
-//  // always have these fields
-//  /**
-//   * id consists of
-//   * most significant
-//   * 1 byte = users bits
-//   * 2-8 bytes = oplog id
-//   * least significant.
-//   * 
-//   * The highest bit in the oplog id part is set to 1 if the oplog id
-//   * is negative.
-//   * @todo this field could be an int for an overflow only region
-//   */
-//  private long id;
-//  /**
-//   * Length of the bytes on disk.
-//   * This is always set. If the value is invalid then it will be set to 0.
-//   * The most significant bit is used by overflow to mark it as needing to be written.
-//   */
-//  protected int valueLength = 0;
-//  // have intOffset or longOffset
-//  // intOffset
-//  /**
-//   * The position in the oplog (the oplog offset) where this entry's value is
-//   * stored
-//   */
-//  private volatile int offsetInOplog;
-//  // longOffset
-//  /**
-//   * The position in the oplog (the oplog offset) where this entry's value is
-//   * stored
-//   */
-//  private volatile long offsetInOplog;
-//  // have overflowOnly or persistence
-//  // overflowOnly
-//  // no fields
-//  // persistent
-//  /** unique entry identifier * */
-//  private long keyId;
+
+  // // inlining DiskId
+  // // always have these fields
+  // /**
+  // * id consists of
+  // * most significant
+  // * 1 byte = users bits
+  // * 2-8 bytes = oplog id
+  // * least significant.
+  // *
+  // * The highest bit in the oplog id part is set to 1 if the oplog id
+  // * is negative.
+  // * @todo this field could be an int for an overflow only region
+  // */
+  // private long id;
+  // /**
+  // * Length of the bytes on disk.
+  // * This is always set. If the value is invalid then it will be set to 0.
+  // * The most significant bit is used by overflow to mark it as needing to be written.
+  // */
+  // protected int valueLength = 0;
+  // // have intOffset or longOffset
+  // // intOffset
+  // /**
+  // * The position in the oplog (the oplog offset) where this entry's value is
+  // * stored
+  // */
+  // private volatile int offsetInOplog;
+  // // longOffset
+  // /**
+  // * The position in the oplog (the oplog offset) where this entry's value is
+  // * stored
+  // */
+  // private volatile long offsetInOplog;
+  // // have overflowOnly or persistence
+  // // overflowOnly
+  // // no fields
+  // // persistent
+  // /** unique entry identifier * */
+  // private long keyId;
+
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66