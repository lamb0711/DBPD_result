GEODE-4991: do no use hard coded quotes (#1728)

java.sql.DatabaseMetaData.getIdentifierQuoteString is now used when quoting identifiers.
If this method returns null, an empty string, or a string with all spaces then no quoting will be done.

-import java.util.List;
-
+  private final String quote;
-  String createSelectQueryString(String tableName, List<ColumnValue> columnList) {
-    assert columnList.size() == 1;
-    ColumnValue keyCV = columnList.get(0);
-    assert keyCV.isKey();
-    return "SELECT * FROM " + tableName + " WHERE " + keyCV.getColumnName() + " = ?";
+  public SqlStatementFactory(String identifierQuoteString) {
+    this.quote = identifierQuoteString;
-  String createDestroySqlString(String tableName, List<ColumnValue> columnList) {
-    assert columnList.size() == 1;
-    ColumnValue keyCV = columnList.get(0);
-    assert keyCV.isKey();
-    return "DELETE FROM " + tableName + " WHERE " + keyCV.getColumnName() + " = ?";
+  String createSelectQueryString(String tableName, EntryColumnData entryColumnData) {
+    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
+    return "SELECT * FROM " + quoteIdentifier(tableName) + " WHERE "
+        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
-  String createUpdateSqlString(String tableName, List<ColumnValue> columnList) {
-    StringBuilder query = new StringBuilder("UPDATE " + tableName + " SET ");
+  String createDestroySqlString(String tableName, EntryColumnData entryColumnData) {
+    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
+    return "DELETE FROM " + quoteIdentifier(tableName) + " WHERE "
+        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
+  }
+
+  String createUpdateSqlString(String tableName, EntryColumnData entryColumnData) {
+    StringBuilder query = new StringBuilder("UPDATE " + quoteIdentifier(tableName) + " SET ");
-    for (ColumnValue column : columnList) {
-      if (!column.isKey()) {
-        idx++;
-        if (idx > 1) {
-          query.append(", ");
-        }
-        query.append(column.getColumnName());
-        query.append(" = ?");
+    for (ColumnData column : entryColumnData.getEntryValueColumnData()) {
+      idx++;
+      if (idx > 1) {
+        query.append(", ");
+      query.append(quoteIdentifier(column.getColumnName()));
+      query.append(" = ?");
-    for (ColumnValue column : columnList) {
-      if (column.isKey()) {
-        query.append(" WHERE ");
-        query.append(column.getColumnName());
-        query.append(" = ?");
-        // currently only support simple primary key with one column
-        break;
-      }
-    }
+
+    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
+    query.append(" WHERE ");
+    query.append(quoteIdentifier(keyColumnData.getColumnName()));
+    query.append(" = ?");
+
-  String createInsertSqlString(String tableName, List<ColumnValue> columnList) {
-    StringBuilder columnNames = new StringBuilder("INSERT INTO " + tableName + " (");
+  String createInsertSqlString(String tableName, EntryColumnData entryColumnData) {
+    StringBuilder columnNames =
+        new StringBuilder("INSERT INTO " + quoteIdentifier(tableName) + " (");
-    int columnCount = columnList.size();
-    int idx = 0;
-    for (ColumnValue column : columnList) {
-      idx++;
-      columnNames.append(column.getColumnName());
-      columnValues.append('?');
-      if (idx != columnCount) {
-        columnNames.append(", ");
-        columnValues.append(",");
-      }
+
+    for (ColumnData column : entryColumnData.getEntryValueColumnData()) {
+      columnNames.append(quoteIdentifier(column.getColumnName())).append(", ");
+      columnValues.append("?,");
-    columnNames.append(")");
-    columnValues.append(")");
+
+    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
+    columnNames.append(quoteIdentifier(keyColumnData.getColumnName())).append(")");
+    columnValues.append("?)");
+
+  private String quoteIdentifier(String identifier) {
+    return quote + identifier + quote;
+  }

INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS43 INS83 INS43 INS42 INS44 INS8 INS42 INS42 MOV43 INS42 INS21 INS42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS60 MOV21 MOV21 MOV21 INS43 UPD42 INS70 INS60 INS21 INS42 INS43 INS42 INS41 INS7 UPD42 MOV42 UPD43 UPD42 MOV42 UPD43 UPD42 MOV42 MOV43 INS32 MOV8 INS43 INS59 UPD42 MOV42 MOV43 MOV44 INS32 INS8 INS43 INS59 INS32 INS42 INS27 INS22 INS42 UPD42 INS32 INS32 UPD42 INS32 INS32 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 UPD43 INS42 INS42 MOV21 MOV21 INS42 INS42 INS32 INS32 MOV42 MOV45 UPD45 INS42 INS42 INS42 INS52 INS42 UPD42 UPD42 INS42 INS42 INS42 MOV32 UPD42 UPD42 INS42 INS42 INS42 MOV32 MOV43 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 MOV43 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS32 INS42 INS42 MOV32 UPD42 INS32 INS32 INS42 INS45 INS45 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL34 DEL27 DEL6 DEL34 DEL42 DEL42 DEL32 DEL6 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL34 DEL27 DEL6 DEL34 DEL42 DEL42 DEL32 DEL6 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8 DEL43 DEL42 DEL44 DEL42 DEL32 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL13 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL45 DEL32 DEL21 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL32 DEL21