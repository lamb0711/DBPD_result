GEODE-7184: Add function execution timers (#4135)

- Add micrometer timers for recording function executions
- Refactor FunctionStats and FunctionServiceStats
- Change static fields to instance fields on FunctionStatsManager
- Mark static field as @Immutable on NoopMeterRegistry
- Rename FunctionServiceStats.endFunctionExecutionWithElapsedTime to
distinguish it from FunctionStats.endFunctionExecution which takes a
start time.
- Remove extra call to FunctionStats.getTime() in
MemberFunctionStreamingMessage and add boolean to prevent calling
endFunctionExecutionWithException before startFunctionExecution was
called.
- Remove FunctionStats.getTime() in favor of returning the time from
FunctionStats.startFunctionExecution()

Functions with hasResult()=false execute asynchronously on an executor.
Previously, the instrumentation code recorded a successful function
execution after submitting a function to an executor, which is incorrect
because the function has not necessarily executed at that point. Now, we
record the execution time only after the function actually executes.

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Mark Hanson <mhanson@pivotal.io>
-  public void writeJarFromClass(Class clazz, File jar) throws IOException {
-    String className = clazz.getName();
-    String classAsPath = className.replace('.', '/') + ".class";
-    InputStream stream = clazz.getClassLoader().getResourceAsStream(classAsPath);
-    byte[] bytes = IOUtils.toByteArray(stream);
-    try (FileOutputStream out = new FileOutputStream(jar)) {
-      createJar(classAsPath, out, bytes);
-    }
+  public static void writeJarFromClasses(File jar, Class... types) throws IOException {
+    try (JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(jar))) {
+      for (Class type : types) {
+        String className = type.getName();
+        String classAsPath = className.replace('.', '/') + ".class";
+        InputStream stream = type.getClassLoader().getResourceAsStream(classAsPath);
+        byte[] bytes = IOUtils.toByteArray(stream);
+        JarEntry entry = new JarEntry(classAsPath);
+        entry.setTime(System.currentTimeMillis());
+
+        jarOutputStream.putNextEntry(entry);
+        jarOutputStream.write(bytes);
+        jarOutputStream.closeEntry();
+      }
+    }
+

MOV44 INS83 UPD42 UPD42 INS54 MOV58 INS8 UPD43 INS70 UPD42 UPD42 INS14 INS44 INS42 INS8 INS43 MOV14 INS43 INS42 MOV60 MOV60 MOV60 MOV60 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS14 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 UPD42 INS43 INS42 INS42 INS42 UPD42 INS42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54