Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides information about the aggregate health of the members of a
- * GemFire distributed system ("components").  The {@link #getHealth
- * getHealth} method provides an indication of the overall health.
- * Health is expressed as one of three levels: {@link #GOOD_HEALTH
- * GOOD_HEALTH}, {@link #OKAY_HEALTH OKAY_HEALTH}, and {@link
- * #POOR_HEALTH POOR_HEALTH}.  The {@link #getDiagnosis getDiagnosis}
- * method provides a more detailed explanation of the cause of ill
- * health.
+ * Provides information about the aggregate health of the members of a GemFire distributed system
+ * ("components"). The {@link #getHealth getHealth} method provides an indication of the overall
+ * health. Health is expressed as one of three levels: {@link #GOOD_HEALTH GOOD_HEALTH},
+ * {@link #OKAY_HEALTH OKAY_HEALTH}, and {@link #POOR_HEALTH POOR_HEALTH}. The {@link #getDiagnosis
+ * getDiagnosis} method provides a more detailed explanation of the cause of ill health.
- * {@linkplain GemFireHealthConfig#setHealthEvaluationInterval every
- * so often} and if certain criteria are met, then the overall health
- * of the component changes accordingly.  If any of the components is
- * in <code>OKAY_HEALTH</code>, then the overall health is
- * <code>OKAY_HEALTH</code>.  If any of the components is in
- * <code>POOR_HEALTH</code>, then the overall health is
+ * {@linkplain GemFireHealthConfig#setHealthEvaluationInterval every so often} and if certain
+ * criteria are met, then the overall health of the component changes accordingly. If any of the
+ * components is in <code>OKAY_HEALTH</code>, then the overall health is <code>OKAY_HEALTH</code>.
+ * If any of the components is in <code>POOR_HEALTH</code>, then the overall health is
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
- * */
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
+ */
-  /** An indicator that the GemFire components are healthy.
+  /**
+   * An indicator that the GemFire components are healthy.
-   * @see #getHealth */
-  public static final Health GOOD_HEALTH =
-    new Health(Health.GOOD_STRING);
-
-  /** An indicator that one or more GemFire components is slightly
-   * unhealthy.  The problem may or may not require configuration
-   * changes and may not necessarily lead to poorer component health.
-   *
-   * @see #getHealth */
-  public static final Health OKAY_HEALTH =
-    new Health(Health.OKAY_STRING);
-
-  /** An indicator that one or more GemFire components is unhealthy.
-   * While it may be possible for the components to recover on their
-   * own, it is likely that they will have to be restarted.
-   *
-   * @see #getHealth */
-  public static final Health POOR_HEALTH =
-    new Health(Health.POOR_STRING);
-
-  ///////////////////////  Instance Methods  ///////////////////////
+   * @see #getHealth
+   */
+  public static final Health GOOD_HEALTH = new Health(Health.GOOD_STRING);
-   * Returns an indicator of the overall health of the GemFire
-   * components. 
+   * An indicator that one or more GemFire components is slightly unhealthy. The problem may or may
+   * not require configuration changes and may not necessarily lead to poorer component health.
+   *
+   * @see #getHealth
+   */
+  public static final Health OKAY_HEALTH = new Health(Health.OKAY_STRING);
+
+  /**
+   * An indicator that one or more GemFire components is unhealthy. While it may be possible for the
+   * components to recover on their own, it is likely that they will have to be restarted.
+   *
+   * @see #getHealth
+   */
+  public static final Health POOR_HEALTH = new Health(Health.POOR_STRING);
+
+  /////////////////////// Instance Methods ///////////////////////
+
+  /**
+   * Returns an indicator of the overall health of the GemFire components.
-  /** 
-   * Resets the overall health of the GemFire components to {@link
-   * #GOOD_HEALTH}.  This operation should be invoked when the
-   * operator has determined that warnings about the components's
-   * health do not need to be regarded.
+  /**
+   * Resets the overall health of the GemFire components to {@link #GOOD_HEALTH}. This operation
+   * should be invoked when the operator has determined that warnings about the components's health
+   * do not need to be regarded.
-   * Returns a message that provides a description of the cause of a
-   * component's ill health.
+   * Returns a message that provides a description of the cause of a component's ill health.
-   * Returns the configuration for determining the health of the
-   * distributed system itself.
+   * Returns the configuration for determining the health of the distributed system itself.
-   * Sets the configuration for determining the health of the
-   * distributed system itself.
+   * Sets the configuration for determining the health of the distributed system itself.
-   * Returns the <code>GemFireHealthConfig</code> for GemFire
-   * components whose configurations are not overridden on a per-host
-   * basis.  Note that changes made to the returned
+   * Returns the <code>GemFireHealthConfig</code> for GemFire components whose configurations are
+   * not overridden on a per-host basis. Note that changes made to the returned
-   * Sets the <code>GemFireHealthConfig</code> for
-   * GemFire components whose configurations are not overridden on a
-   * per-host basis.
+   * Sets the <code>GemFireHealthConfig</code> for GemFire components whose configurations are not
+   * overridden on a per-host basis.
-   * @throws IllegalArgumentException
-   *         If <code>config</code> specifies the config for a host
+   * @throws IllegalArgumentException If <code>config</code> specifies the config for a host
-   * Returns the <code>GemFireHealthConfig</code> for GemFire
-   * components that reside on a given host.  This configuration will
-   * override the {@linkplain #getDefaultGemFireHealthConfig default}
+   * Returns the <code>GemFireHealthConfig</code> for GemFire components that reside on a given
+   * host. This configuration will override the {@linkplain #getDefaultGemFireHealthConfig default}
-   * @param hostName
-   *        The {@linkplain java.net.InetAddress#getCanonicalHostName
-   *        canonical} name of the host.
+   * @param hostName The {@linkplain java.net.InetAddress#getCanonicalHostName canonical} name of
+   *        the host.
-   * Sets the <code>GemFireHealthConfig</code> for GemFire
-   * components that reside on a given host.  This configuration will
-   * override the {@linkplain #getDefaultGemFireHealthConfig default}
-   * configuration.  Note that changes made to the returned
-   * <code>GemFireHealthConfig</code> will not take effect until
-   * {@link #setDefaultGemFireHealthConfig} is invoked.
+   * Sets the <code>GemFireHealthConfig</code> for GemFire components that reside on a given host.
+   * This configuration will override the {@linkplain #getDefaultGemFireHealthConfig default}
+   * configuration. Note that changes made to the returned <code>GemFireHealthConfig</code> will not
+   * take effect until {@link #setDefaultGemFireHealthConfig} is invoked.
-   * @param hostName
-   *        The {@linkplain java.net.InetAddress#getCanonicalHostName
-   *        canonical} name of the host.
+   * @param hostName The {@linkplain java.net.InetAddress#getCanonicalHostName canonical} name of
+   *        the host.
-   * @throws IllegalArgumentException
-   *         If host <code>hostName</code> does not exist or if there
-   *         are no GemFire components running on that host or if
-   *         <code>config</code> does not configure host
-   *         <code>hostName</code>. 
+   * @throws IllegalArgumentException If host <code>hostName</code> does not exist or if there are
+   *         no GemFire components running on that host or if <code>config</code> does not configure
+   *         host <code>hostName</code>.
-  public void setGemFireHealthConfig(String hostName,
-                                     GemFireHealthConfig config);
+  public void setGemFireHealthConfig(String hostName, GemFireHealthConfig config);
-   * Closes this health monitor and releases all resources associated
-   * with it.
+   * Closes this health monitor and releases all resources associated with it.
-   * Returns whether or not this <code>GemFireHealth</code> is
-   * {@linkplain #close closed}.
+   * Returns whether or not this <code>GemFireHealth</code> is {@linkplain #close closed}.
-  //////////////////////  Inner Classes  //////////////////////
+  ////////////////////// Inner Classes //////////////////////
-    ////////////////////  Instance Fields  ////////////////////
+    //////////////////// Instance Fields ////////////////////
-    /////////////////////  Constructors  //////////////////////
+    ///////////////////// Constructors //////////////////////
-    
-    ////////////////////  Instance Methods  ////////////////////
+
+    //////////////////// Instance Methods ////////////////////
-     * Returns the appropriate canonical instance of
-     * <code>Health</code>.
+     * Returns the appropriate canonical instance of <code>Health</code>.
-        Assert.assertTrue(false, "Unknown healthString: " +
-                          this.healthString);
+        Assert.assertTrue(false, "Unknown healthString: " + this.healthString);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66