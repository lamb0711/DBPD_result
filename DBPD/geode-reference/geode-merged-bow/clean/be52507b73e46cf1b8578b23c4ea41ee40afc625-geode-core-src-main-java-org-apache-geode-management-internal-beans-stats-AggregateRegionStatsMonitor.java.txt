GEODE-5314: Cleanup and document MBeanStatsMonitor child classes

- Fixed minor warnings.
- Added JUnit Tests for all modified classes.
- There's only one thread updating the mutable values so it's been
  decided to keep volatiles instead of moving to atomics.
- Documentation improved to better explain the thread-safety of the
  classes.
+import org.apache.geode.distributed.ConfigurationProperties;
-import org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor.DefaultHashMap;
-
+/**
+ * This class acts as a monitor and listen for Region statistics updates on behalf of MemberMBean.
+ * <p>
+ * There's only one dedicated thread that wakes up at the
+ * {@link ConfigurationProperties#STATISTIC_SAMPLE_RATE} configured, samples all the statistics,
+ * writes them to the {@link ConfigurationProperties#STATISTIC_ARCHIVE_FILE} configured (if any) and
+ * notifies listeners of changes. The mutable fields are declared as {@code volatile} to make sure
+ * readers of the statistics get the latest recorded value.
+ * <p>
+ * This class is conditionally thread-safe, there can be multiple concurrent readers accessing a
+ * instance, but concurrent writers need to be synchronized externally.
+ *
+ * @see org.apache.geode.internal.statistics.HostStatSampler
+ * @see org.apache.geode.distributed.ConfigurationProperties
+ * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor
+ */
-
-
-  private volatile int primaryBucketCount = 0;
-
-  private volatile int bucketCount = 0;
-
-  private volatile int totalBucketSize = 0;
-
-  private volatile long lruDestroys = 0;
-
-  private volatile long lruEvictions = 0;
-
+  private volatile int bucketCount = 0;
+  private volatile long lruDestroys = 0;
+  private volatile long lruEvictions = 0;
+  private volatile int totalBucketSize = 0;
+  private volatile int primaryBucketCount = 0;
+  private final Map<Statistics, ValueMonitor> monitors;
+  private final Map<Statistics, MemberLevelRegionStatisticsListener> listeners;
+  public long getDiskSpace() {
+    return diskSpace;
+  }
+  public int getTotalBucketCount() {
+    return bucketCount;
+  }
-  private Map<Statistics, ValueMonitor> monitors;
+  public long getLruDestroys() {
+    return lruDestroys;
+  }
-  private Map<Statistics, MemberLevelRegionStatisticsListener> listeners;
+  public long getLruEvictions() {
+    return lruEvictions;
+  }
+
+  public int getTotalBucketSize() {
+    return totalBucketSize;
+  }
+
+  public int getTotalPrimaryBucketCount() {
+    return primaryBucketCount;
+  }
+
+  Map<Statistics, ValueMonitor> getMonitors() {
+    return monitors;
+  }
+
+  Map<Statistics, MemberLevelRegionStatisticsListener> getListeners() {
+    return listeners;
+  }
-    monitors = new HashMap<Statistics, ValueMonitor>();
-    listeners = new HashMap<Statistics, MemberLevelRegionStatisticsListener>();
+    monitors = new HashMap<>();
+    listeners = new HashMap<>();
-  @Override
-  public void addStatisticsToMonitor(Statistics stats) {
-    ValueMonitor regionMonitor = new ValueMonitor();
-    MemberLevelRegionStatisticsListener listener = new MemberLevelRegionStatisticsListener();
-    regionMonitor.addListener(listener);
-    regionMonitor.addStatistics(stats);
-    monitors.put(stats, regionMonitor);
-    listeners.put(stats, listener);
-  }
-
-
-  public void removePartitionStatistics(Statistics stats) {
-    MemberLevelRegionStatisticsListener listener = removeListener(stats);
-    if (listener != null) {
-      listener.decreaseParStats(stats);
-    }
-  }
-
-  public void removeLRUStatistics(Statistics stats) {
-    removeListener(stats);
-  }
-
-  public void removeDirectoryStatistics(Statistics stats) {
-    removeListener(stats);
-  }
-
-  @Override
-  public void stopListener() {
-    for (Statistics stat : listeners.keySet()) {
-      ValueMonitor monitor = monitors.get(stat);
-      monitor.removeListener(listeners.get(stat));
-      monitor.removeStatistics(stat);
-    }
-    listeners.clear();
-    monitors.clear();
-  }
-
-  private MemberLevelRegionStatisticsListener removeListener(Statistics stats) {
-    ValueMonitor monitor = monitors.remove(stats);
-    if (monitor != null) {
-      monitor.removeStatistics(stats);
-    }
-
-    MemberLevelRegionStatisticsListener listener = listeners.remove(stats);
-    if (listener != null) {
-      monitor.removeListener(listener);
-    }
-    return listener;
-  }
-
-  @Override
-  public Number getStatistic(String name) {
-    if (name.equals(StatsKey.LRU_EVICTIONS)) {
-      return getLruEvictions();
-    }
-    if (name.equals(StatsKey.LRU_DESTROYS)) {
-      return getLruDestroys();
-    }
+  Number computeDelta(DefaultHashMap statsMap, String name, Number currentValue) {
-      return getTotalPrimaryBucketCount();
-    }
-    if (name.equals(StatsKey.BUCKET_COUNT)) {
-      return getTotalBucketCount();
-    }
-    if (name.equals(StatsKey.TOTAL_BUCKET_SIZE)) {
-      return getTotalBucketSize();
-    }
-    if (name.equals(StatsKey.DISK_SPACE)) {
-      return getDiskSpace();
-    }
-    return 0;
-  }
-
-  private class MemberLevelRegionStatisticsListener implements StatisticsListener {
-    DefaultHashMap statsMap = new DefaultHashMap();
-
-    private boolean removed = false;
-
-    @Override
-    public void handleNotification(StatisticsNotification notification) {
-      synchronized (statsMap) {
-        if (removed) {
-          return;
-        }
-        for (StatisticId statId : notification) {
-          StatisticDescriptor descriptor = statId.getStatisticDescriptor();
-          String name = descriptor.getName();
-          Number value;
-          try {
-            value = notification.getValue(statId);
-          } catch (StatisticNotFoundException e) {
-            value = 0;
-          }
-          log(name, value);
-          Number deltaValue = computeDelta(statsMap, name, value);
-          statsMap.put(name, value);
-          increaseStats(name, deltaValue);
-          // fix for bug 46604
-        }
-      }
-
-    }
-
-
-    /**
-     * Only decrease those values which can both increase and decrease and not values which can only
-     * increase like read/writes
-     *
-     * Remove last sample value from the aggregate. Last Sampled value can be obtained from the
-     * DefaultHashMap for the disk
-     *
-     */
-    public void decreaseParStats(Statistics stats) {
-      synchronized (statsMap) {
-        primaryBucketCount -= statsMap.get(StatsKey.PRIMARY_BUCKET_COUNT).intValue();
-        bucketCount -= statsMap.get(StatsKey.BUCKET_COUNT).intValue();
-        totalBucketSize -= statsMap.get(StatsKey.TOTAL_BUCKET_SIZE).intValue();
-        removed = true;
-      }
-
-    }
-
-
-
-  };
-
-
-
-  private Number computeDelta(DefaultHashMap statsMap, String name, Number currentValue) {
-    if (name.equals(StatsKey.PRIMARY_BUCKET_COUNT)) {
-      Number prevValue = statsMap.get(StatsKey.PRIMARY_BUCKET_COUNT).intValue();
-      Number deltaValue = currentValue.intValue() - prevValue.intValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.PRIMARY_BUCKET_COUNT);
+      return currentValue.intValue() - prevValue.intValue();
-      Number prevValue = statsMap.get(StatsKey.BUCKET_COUNT).intValue();
-      Number deltaValue = currentValue.intValue() - prevValue.intValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.BUCKET_COUNT);
+      return currentValue.intValue() - prevValue.intValue();
-      Number prevValue = statsMap.get(StatsKey.TOTAL_BUCKET_SIZE).intValue();
-      Number deltaValue = currentValue.intValue() - prevValue.intValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.TOTAL_BUCKET_SIZE);
+      return currentValue.intValue() - prevValue.intValue();
-      Number prevValue = statsMap.get(StatsKey.LRU_EVICTIONS).longValue();
-      Number deltaValue = currentValue.longValue() - prevValue.longValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.LRU_EVICTIONS);
+      return currentValue.longValue() - prevValue.longValue();
-      Number prevValue = statsMap.get(StatsKey.LRU_DESTROYS).longValue();
-      Number deltaValue = currentValue.longValue() - prevValue.longValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.LRU_DESTROYS);
+      return currentValue.longValue() - prevValue.longValue();
-      Number prevValue = statsMap.get(StatsKey.DISK_SPACE).longValue();
-      Number deltaValue = currentValue.longValue() - prevValue.longValue();
-      return deltaValue;
+      Number prevValue = statsMap.get(StatsKey.DISK_SPACE);
+      return currentValue.longValue() - prevValue.longValue();
+
-  private void increaseStats(String name, Number value) {
+  void increaseStats(String name, Number value) {
+
+
-
-  public int getTotalPrimaryBucketCount() {
-    return primaryBucketCount;
+  private MemberLevelRegionStatisticsListener removeListener(Statistics stats) {
+    ValueMonitor monitor = monitors.remove(stats);
+    if (monitor != null) {
+      monitor.removeStatistics(stats);
+    }
+
+    MemberLevelRegionStatisticsListener listener = listeners.remove(stats);
+    if ((listener != null) && (monitor != null)) {
+      monitor.removeListener(listener);
+    }
+
+    return listener;
-  public int getTotalBucketCount() {
-    return bucketCount;
+  public void removeLRUStatistics(Statistics stats) {
+    removeListener(stats);
-  public int getTotalBucketSize() {
-    return totalBucketSize;
+  public void removeDirectoryStatistics(Statistics stats) {
+    removeListener(stats);
-  public long getLruDestroys() {
-    return lruDestroys;
-  }
+  public void removePartitionStatistics(Statistics stats) {
+    MemberLevelRegionStatisticsListener listener = removeListener(stats);
-  public long getLruEvictions() {
-    return lruEvictions;
-  }
-
-  public long getDiskSpace() {
-    return diskSpace;
+    if (listener != null) {
+      listener.decreaseParStats();
+    }
-  public void removeStatisticsFromMonitor(Statistics stats) {
-    // TODO Auto-generated method stub
+  public Number getStatistic(String name) {
+    if (name.equals(StatsKey.LRU_EVICTIONS)) {
+      return getLruEvictions();
+    }
+    if (name.equals(StatsKey.LRU_DESTROYS)) {
+      return getLruDestroys();
+    }
+
+    if (name.equals(StatsKey.PRIMARY_BUCKET_COUNT)) {
+      return getTotalPrimaryBucketCount();
+    }
+
+    if (name.equals(StatsKey.BUCKET_COUNT)) {
+      return getTotalBucketCount();
+    }
+
+    if (name.equals(StatsKey.TOTAL_BUCKET_SIZE)) {
+      return getTotalBucketSize();
+    }
+
+    if (name.equals(StatsKey.DISK_SPACE)) {
+      return getDiskSpace();
+    }
+
+    return 0;
+  @Override
+  public void addStatisticsToMonitor(Statistics stats) {
+    ValueMonitor regionMonitor = new ValueMonitor();
+    MemberLevelRegionStatisticsListener listener = new MemberLevelRegionStatisticsListener();
+    regionMonitor.addListener(listener);
+    regionMonitor.addStatistics(stats);
+    monitors.put(stats, regionMonitor);
+    listeners.put(stats, listener);
+  }
+
+  @Override
+  public void stopListener() {
+    for (Statistics stat : listeners.keySet()) {
+      ValueMonitor monitor = monitors.get(stat);
+      monitor.removeListener(listeners.get(stat));
+      monitor.removeStatistics(stat);
+    }
+
+    listeners.clear();
+    monitors.clear();
+  }
+
+  @Override
+  public void removeStatisticsFromMonitor(Statistics stats) {}
+
+  class MemberLevelRegionStatisticsListener implements StatisticsListener {
+    final DefaultHashMap statsMap = new DefaultHashMap();
+    private boolean removed = false;
+
+    @Override
+    public void handleNotification(StatisticsNotification notification) {
+      synchronized (statsMap) {
+        if (removed) {
+          return;
+        }
+
+        for (StatisticId statId : notification) {
+          StatisticDescriptor descriptor = statId.getStatisticDescriptor();
+          String name = descriptor.getName();
+          Number value;
+
+          try {
+            value = notification.getValue(statId);
+          } catch (StatisticNotFoundException e) {
+            value = 0;
+          }
+
+          log(name, value);
+          Number deltaValue = computeDelta(statsMap, name, value);
+          statsMap.put(name, value);
+          increaseStats(name, deltaValue);
+        }
+      }
+    }
+
+    /**
+     * Only decrease those values which can both increase and decrease and not values which can only
+     * increase like read/writes
+     *
+     * Remove last sample value from the aggregate. Last Sampled value can be obtained from the
+     * DefaultHashMap for the disk
+     *
+     */
+    void decreaseParStats() {
+      synchronized (statsMap) {
+        bucketCount -= statsMap.get(StatsKey.BUCKET_COUNT).intValue();
+        totalBucketSize -= statsMap.get(StatsKey.TOTAL_BUCKET_SIZE).intValue();
+        primaryBucketCount -= statsMap.get(StatsKey.PRIMARY_BUCKET_COUNT).intValue();
+        removed = true;
+      }
+    }
+  }

MOV26 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV55 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS29 INS31 INS31 INS65 INS65 INS65 INS65 INS83 INS83 INS74 INS42 INS8 INS74 INS42 INS8 MOV21 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS40 INS40 INS40 INS43 INS43 INS43 INS41 INS43 INS43 INS43 INS41 INS83 INS67 INS67 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 UPD42 INS41 INS41 INS36 INS36 MOV21 UPD74 UPD74 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 MOV27 INS27 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS42 INS33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL41 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44