GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-import org.apache.geode.internal.cache.LocalDataSet;
-import org.apache.geode.redis.internal.data.RedisKeyInRegion;
-import org.apache.geode.redis.internal.data.RedisSet;
+import org.apache.geode.redis.internal.data.CommandHelper;
+import org.apache.geode.redis.internal.data.RedisData;
+import org.apache.geode.redis.internal.data.RedisKeyCommandsFunctionExecutor;
-  private final transient StripedExecutor stripedExecutor;
-  private final RedisStats redisStats;
+  private final transient PartitionedRegion partitionedRegion;
+  private final transient CommandHelper commandHelper;
+  private final transient RedisKeyCommandsFunctionExecutor keyCommands;
-  public static void register(StripedExecutor stripedExecutor,
+  public static void register(Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    FunctionService.registerFunction(new RenameFunction(stripedExecutor, redisStats));
+    FunctionService.registerFunction(new RenameFunction(dataRegion, stripedExecutor, redisStats));
-  public RenameFunction(StripedExecutor stripedExecutor,
+  public RenameFunction(
+      Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    this.stripedExecutor = stripedExecutor;
-    this.redisStats = redisStats;
+    partitionedRegion = (PartitionedRegion) dataRegion;
+    commandHelper = new CommandHelper(dataRegion, redisStats, stripedExecutor);
+    keyCommands = new RedisKeyCommandsFunctionExecutor(commandHelper);
-    LocalDataSet localDataSet = (LocalDataSet) renameContext.getLocalDataSet();
-      computeWithPrimaryLocked(renameContext.getKeyToLock(),
-          localDataSet, computation);
+      partitionedRegion.computeWithPrimaryLocked(renameContext.getKeyToLock(), computation);
-  public static void computeWithPrimaryLocked(Object key, LocalDataSet localDataSet, Runnable r) {
-    PartitionedRegion partitionedRegion = localDataSet.getProxy();
-
-    partitionedRegion.computeWithPrimaryLocked(key, r);
-  }
-
+  private StripedExecutor getStripedExecutor() {
+    return commandHelper.getStripedExecutor();
+  }
+
-    int result = stripedExecutor.compareStripes(object1, object2);
+    int result = getStripedExecutor().compareStripes(object1, object2);
-      return stripedExecutor
+      return getStripedExecutor()
-    return new RedisKeyInRegion(context.getDataRegion(), redisStats)
-        .rename(context.getOldKey(), context.getNewKey());
+    return keyCommands.rename(context.getOldKey(), context.getNewKey());
-        stripedExecutor.compareStripes(lockedKey, context.getKeyToLock()) == 0;
+        getStripedExecutor().compareStripes(lockedKey, context.getKeyToLock()) == 0;
-
-    private Region<ByteArrayWrapper, RedisSet> getLocalDataSet() {
-      return context.getLocalDataSet(getDataRegion());
-    }

MOV26 MOV31 UPD40 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 INS43 INS83 UPD43 INS44 INS44 UPD83 MOV43 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS74 INS42 UPD74 MOV74 INS42 INS21 INS41 INS43 INS43 INS43 UPD43 INS7 INS32 INS42 INS42 INS42 UPD42 INS42 INS11 INS42 INS14 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31