Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  Request() {
-  }
+  Request() {}
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException {
-//    valuePart = null;  (redundant assignment)
+    // valuePart = null; (redundant assignment)
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug("{}: Received get request ({} bytes) from {} for region {} key {} txId {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key, msg.getTransactionId());
+      logger.debug("{}: Received get request ({} bytes) from {} for region {} key {} txId {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key,
+          msg.getTransactionId());
-        errMessage = LocalizedStrings.Request_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_GET_REQUEST_ARE_NULL;
+        errMessage =
+            LocalizedStrings.Request_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_GET_REQUEST_ARE_NULL;
-        errMessage = LocalizedStrings.Request_THE_INPUT_KEY_FOR_THE_GET_REQUEST_IS_NULL;   
+        errMessage = LocalizedStrings.Request_THE_INPUT_KEY_FOR_THE_GET_REQUEST_IS_NULL;
-    }
-    else {
+    } else {
-        String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST.toLocalizedString(regionName);
+        String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST
+            .toLocalizedString(regionName);
-      }
-      else {
-        
+      } else {
+
-        
-          try {
-            this.securityService.authorizeRegionRead(regionName, key.toString());
-            AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-              if (authzRequest != null) {
-              getContext = authzRequest
-                  .getAuthorize(regionName, key, callbackArg);
-              callbackArg = getContext.getCallbackArg();
-            }
+
+        try {
+          this.securityService.authorizeRegionRead(regionName, key.toString());
+          AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+          if (authzRequest != null) {
+            getContext = authzRequest.getAuthorize(regionName, key, callbackArg);
+            callbackArg = getContext.getCallbackArg();
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
+        } catch (NotAuthorizedException ex) {
+          writeException(msg, ex, false, servConn);
+          servConn.setAsTrue(RESPONDED);
+          return;
+        }
-          getValueAndIsObject(region, key,
-              callbackArg, servConn, valueAndIsObject);
-        }
-        catch (Exception e) {
+          getValueAndIsObject(region, key, callbackArg, servConn, valueAndIsObject);
+        } catch (Exception e) {
-        
-        
-          try {
-            AuthorizeRequestPP postAuthzRequest = servConn.getPostAuthzRequest();
-              if (postAuthzRequest != null) {
-              getContext = postAuthzRequest.getAuthorize(regionName, key, data,
-                  isObject, getContext);
-              byte[] serializedValue = getContext.getSerializedValue();
-              if (serializedValue == null) {
-                data = getContext.getObject();
-              }
-              else {
-                data = serializedValue;
-              }
-              isObject = getContext.isObject();
+
+
+        try {
+          AuthorizeRequestPP postAuthzRequest = servConn.getPostAuthzRequest();
+          if (postAuthzRequest != null) {
+            getContext = postAuthzRequest.getAuthorize(regionName, key, data, isObject, getContext);
+            byte[] serializedValue = getContext.getSerializedValue();
+            if (serializedValue == null) {
+              data = getContext.getObject();
+            } else {
+              data = serializedValue;
+            isObject = getContext.isObject();
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
+        } catch (NotAuthorizedException ex) {
+          writeException(msg, ex, false, servConn);
+          servConn.setAsTrue(RESPONDED);
+          return;
+        }
-        
+
-          PartitionedRegion pr = (PartitionedRegion)region;
+          PartitionedRegion pr = (PartitionedRegion) region;
-            writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject,
-                servConn, pr,pr.getNetworkHopType());
+            writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject, servConn, pr,
+                pr.getNetworkHopType());
-          }
-          else {
+          } else {
-        }
-        else {
+        } else {
-        
+
-          logger.debug("{}: Wrote get response back to {} for region {} key {} value: {}", servConn.getName(), servConn.getSocketString(), regionName, key, data);
+          logger.debug("{}: Wrote get response back to {} for region {} key {} value: {}",
+              servConn.getName(), servConn.getSocketString(), regionName, key, data);
-  public void getValueAndIsObject(Region region, Object key,
-      Object callbackArg, ServerConnection servConn,
-      Object[] result) {
+  public void getValueAndIsObject(Region region, Object key, Object callbackArg,
+      ServerConnection servConn, Object[] result) {
-    Object data  = ((LocalRegion) region).get(key, callbackArg, true, true, true, id, null, false);
-    
+    Object data = ((LocalRegion) region).get(key, callbackArg, true, true, true, id, null, false);
+
-    }
-    else if (data == Token.REMOVED_PHASE1 || data == Token.REMOVED_PHASE2 || data == Token.TOMBSTONE || data == Token.DESTROYED) {
+    } else if (data == Token.REMOVED_PHASE1 || data == Token.REMOVED_PHASE2
+        || data == Token.TOMBSTONE || data == Token.DESTROYED) {
-    }
-    else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
+    } else if (data == Token.INVALID || data == Token.LOCAL_INVALID) {
-    }
-    else if (data instanceof byte[]) {
+    } else if (data instanceof byte[]) {
-            
+

