Merge branch 'develop' into feature/GEODE-17-2

- * @author dsmith
-  private volatile ArrayList cachedLocators;
+  private volatile List<ServerLocation> cachedLocators;
+
+  private static final long SERVER_LOAD_LOG_INTERVAL = (60 * 60 * 1000); // log server load once an hour
+  private volatile long lastLogTime;
+
-    ArrayList controllers = getLocators();
+    List<ServerLocation> controllers = getLocators();
-  private ArrayList getLocators() {
+  private List<ServerLocation> getLocators() {
-        List profiles = advisor.fetchControllers();
-        ArrayList result = new ArrayList(profiles.size() + 1);
-        for (Iterator itr = profiles.iterator(); itr.hasNext(); ) {
-          result.add(buildServerLocation((ControllerProfile) itr.next()));
+        List<ControllerProfile> profiles = advisor.fetchControllers();
+        List<ServerLocation> result = new ArrayList<>(profiles.size() + 1);
+        for (ControllerProfile profile: profiles) {
+          result.add(buildServerLocation(profile));
-    logServers();
+    logServers();
-      StringBuilder sb = new StringBuilder(1000);
+      long now = System.currentTimeMillis();
+      long lastLogTime = this.lastLogTime;
+      if (now < lastLogTime + SERVER_LOAD_LOG_INTERVAL) {
+        return;
+      }
+      this.lastLogTime = now;
+      
+      int queues = 0;
-        connections += l.getConnectionLoad();
+        queues += l.getSubscriptionConnectionLoad();
+        connections = (int)Math.ceil(l.getConnectionLoad() / l.getLoadPerConnection());
-      sb.append("server summary: ")
-        .append(loadMap.size())
-        .append(" cache servers with ")
-        .append(connections)
-        .append(" client connections")
-        .append(File.separator)
-      .append("current cache servers : ");
+      Set<DistributedMember> servers;
-        String[] ids = new String[ownerMap.size()];
-        int i=0;
-        for (DistributedMember id: ownerMap.values()) {
-          ids[i++] = id.toString();
-        }
-        Arrays.sort(ids);
-        for (i=0; i<ids.length; i++) {
-          sb.append(ids[i]).append(' ');
-        }
+        servers = new HashSet<>(ownerMap.values());
+      }
+
+      StringBuilder sb = new StringBuilder(1000);
+      sb.append("server count: ")
+        .append(servers.size())
+        .append(" connected client count: ")
+        .append(connections)
+        .append(" client subscription queue count: ")
+        .append(queues)
+        .append(System.lineSeparator())
+        .append("current servers : ");
+      
+      String[] ids = new String[servers.size()];
+      int i=0;
+      for (DistributedMember id: servers) {
+        ids[i++] = id.toString();
+      }
+      Arrays.sort(ids);
+      for (i=0; i<ids.length; i++) {
+        sb.append(ids[i]).append(' ');

INS23 INS23 INS74 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS74 INS43 INS43 INS42 INS36 INS42 MOV43 INS43 MOV21 UPD42 MOV42 INS42 INS27 INS74 UPD42 MOV42 MOV60 INS34 INS34 INS34 INS43 INS43 INS60 INS60 INS25 INS21 INS60 INS60 INS51 MOV60 MOV60 MOV70 MOV21 MOV24 UPD42 MOV42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS7 INS39 INS59 INS74 INS59 INS42 INS8 MOV5 INS42 INS70 INS42 INS32 INS42 INS22 INS42 INS27 INS41 INS22 INS42 INS42 INS34 INS21 INS43 INS43 INS42 INS21 INS32 INS42 UPD45 INS74 INS74 INS44 INS42 INS8 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS7 INS42 INS42 INS7 MOV32 MOV42 INS32 MOV5 INS43 INS43 INS43 INS43 MOV43 INS42 MOV21 INS42 INS32 INS42 INS11 INS42 INS14 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS74 INS42 INS42 INS39 INS32 INS74 MOV32 UPD45 MOV43 INS42 INS42 INS27 INS43 UPD42 MOV42 MOV32 INS32 INS42 UPD45 INS42 INS42 UPD45 UPD42 DEL66 DEL65 DEL43 DEL43 DEL43 DEL43 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL8 DEL24 DEL42 DEL40 DEL42 DEL8 DEL51