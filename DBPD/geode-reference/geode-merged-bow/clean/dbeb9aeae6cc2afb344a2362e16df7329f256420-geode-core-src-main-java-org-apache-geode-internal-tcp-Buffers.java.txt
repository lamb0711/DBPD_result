Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
+   * 
-  
+
-      IdentityHashMap<BBSoftReference, BBSoftReference> alreadySeen = null; // keys are used like a set
-      BBSoftReference ref = (BBSoftReference)bufferQueue.poll();
+      IdentityHashMap<BBSoftReference, BBSoftReference> alreadySeen = null; // keys are used like a
+                                                                            // set
+      BBSoftReference ref = (BBSoftReference) bufferQueue.poll();
-        ref = (BBSoftReference)bufferQueue.poll();
+        ref = (BBSoftReference) bufferQueue.poll();
-    if(send) {
+    if (send) {
-  
+
-  
+
-  
+
-      if(send) {
+      if (send) {
-  
+
-      Iterator<BBSoftReference> it = (Iterator<BBSoftReference>)bufferQueue.iterator();
+      Iterator<BBSoftReference> it = (Iterator<BBSoftReference>) bufferQueue.iterator();
-          if(ref.getSend()) { // fix bug 46773
+          if (ref.getSend()) { // fix bug 46773
-   * A soft reference that remembers the size of the byte buffer it refers to.
-   * TODO Dan - I really think this should be a weak reference. The JVM
-   * doesn't seem to clear soft references if it is getting low on direct
-   * memory.
+   * A soft reference that remembers the size of the byte buffer it refers to. TODO Dan - I really
+   * think this should be a weak reference. The JVM doesn't seem to clear soft references if it is
+   * getting low on direct memory.
+
+
+
+
+
-      return (ByteBuffer)super.get();
+      return (ByteBuffer) super.get();

UPD66 UPD66 UPD66 DEL66