Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A version of the Portfolio Object used for query. 
+ * A version of the Portfolio Object used for query.
-  
+
-  protected int MAX_NUM_OF_POSITIONS = 5;     
+  protected int MAX_NUM_OF_POSITIONS = 5;
-  private int MAX_QTY = 100;    //max is 100*100 
+  private int MAX_QTY = 100; // max is 100*100
-  protected int id = 0;           
-  protected String name = "name";         //key value, needs to be unique
+  protected int id = 0;
+  protected String name = "name"; // key value, needs to be unique
-  
+
-    //use default
+    // use default
-  
+
+   * 
-    
+
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  public void  setStatus(String status) {
+
+  public void setStatus(String status) {
-  
+
-    
-  public void init( int i ) {
+
+  public void init(int i) {
-    
+
-  
+
-    if (numOfPositions == 0) 
+    if (numOfPositions == 0)
-     
-    int secId =  rng.nextInt(NUM_OF_SECURITIES);
-    
-    for (int i=0; i < numOfPositions; i++) {
+
+    int secId = rng.nextInt(NUM_OF_SECURITIES);
+
+    for (int i = 0; i < numOfPositions; i++) {
-      
-//    secId needs to be UNIQUE in one portfolio, keep track MAX_NUM_OF_POSITIONS and NUM_OF_SECURITIES
-      secId += i * 7;                    
+
+      // secId needs to be UNIQUE in one portfolio, keep track MAX_NUM_OF_POSITIONS and
+      // NUM_OF_SECURITIES
+      secId += i * 7;
-      
+
-  
-  public void validate( int index ) {
-    //do nothing
+
+  public void validate(int index) {
+    // do nothing
-  
+
-  
-  public Map getPositions(){
+
+  public Map getPositions() {
-  
+
+   * 
-   Properties props = new Properties();
-   Double qty = rng.nextInt(MAX_QTY) * 100.00;
-   Double mktValue = rng.nextDouble() * MAX_PRICE;
+    Properties props = new Properties();
+    Double qty = rng.nextInt(MAX_QTY) * 100.00;
+    Double mktValue = rng.nextDouble() * MAX_PRICE;
-   props.setProperty("qty", qty.toString());
-   props.setProperty("mktValue", mktValue.toString());
+    props.setProperty("qty", qty.toString());
+    props.setProperty("mktValue", mktValue.toString());
-   return props;
+    return props;
-  
+
-    
+
-       return false;
+      return false;
-    if (anObj.getClass().getName().equals(this.getClass().getName())) { // cannot do class identity check for pdx tets
-       NewPortfolio np = (NewPortfolio)anObj;
-       if (!np.name.equals(this.name) || (np.id != this.id) || !np.type.equals(this.type) || !np.status.equals(this.status)) {
-         return false;
-       }
+    if (anObj.getClass().getName().equals(this.getClass().getName())) { // cannot do class identity
+                                                                        // check for pdx tets
+      NewPortfolio np = (NewPortfolio) anObj;
+      if (!np.name.equals(this.name) || (np.id != this.id) || !np.type.equals(this.type)
+          || !np.status.equals(this.status)) {
+        return false;
+      }
-       if (np.positions == null) {
-          if (this.positions != null) {
-            return false;
+      if (np.positions == null) {
+        if (this.positions != null) {
+          return false;
+        }
+      } else {
+        if (np.positions.size() != this.positions.size()) {
+          return false;
+        } else { // loops thru the map of positions
+          Iterator itr = np.positions.values().iterator();
+          Position pos;
+          while (itr.hasNext()) {
+            pos = (Position) itr.next();
+            if (!this.positions.containsValue(pos)) {
+              return false;
+            }
-       } else {
-         if (np.positions.size() != this.positions.size()) {
-           return false;
-         }
-         else {                 //loops thru the map of positions
-           Iterator itr = np.positions.values().iterator();
-           Position pos;
-           while (itr.hasNext()) {
-             pos = (Position)itr.next();
-             if (!this.positions.containsValue(pos)){
-               return false;
-             }            
-           }
-         }
-       }
+        }
+      }
-      //not same class
-       return false;
+      // not same class
+      return false;
- }
+  }
-    
+
- 
-  /** Create a map of fields and field values to use to write to the blackboard
-   *  since PdxSerialiables cannot be put on the blackboard since the MasterController
-   *  does not have pdx objects on its classpath. For PdxSerializables
-   *  we put this Map on the blackboard instead.
+
+  /**
+   * Create a map of fields and field values to use to write to the blackboard since PdxSerialiables
+   * cannot be put on the blackboard since the MasterController does not have pdx objects on its
+   * classpath. For PdxSerializables we put this Map on the blackboard instead.
-    
+
-  

UPD66 UPD66 UPD66 UPD66 DEL66