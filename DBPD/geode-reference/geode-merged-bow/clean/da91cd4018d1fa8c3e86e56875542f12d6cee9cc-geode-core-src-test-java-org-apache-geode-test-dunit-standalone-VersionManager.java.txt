GEODE-2433 Backwards compatibility tests are not actually running

Modified to look for the file on the class-path instead of poking
around in the file system, and to cause tests expecting to use
the old versions to fail if the file cannot be found.

-import org.apache.geode.test.dunit.VM;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
+import java.net.URL;
+  protected String loadFailure = "";
+
-    instance.findVersions();
+    final String fileName = "geodeOldVersionClasspaths.txt";
+    instance.findVersions(fileName);
+   * for unit testing, this creates a VersionManager with paths loaded from the given file, which
+   * may or may not exist. The instance is not retained
+   */
+  protected static VersionManager getInstance(String classpathsFileName) {
+    VersionManager result = new VersionManager();
+    result.findVersions(classpathsFileName);
+    return result;
+  }
+
+  /**
-  private String oldestVersion;
-
+    checkForLoadFailure();
+    checkForLoadFailure();
-  /**
-   * returns the oldest version defined in the geodeOldVersionClasspaths.txt file
-   */
-  public String getOldestVersion() {
-    return oldestVersion;
+
+  private void checkForLoadFailure() {
+    if (loadFailure.length() > 0) {
+      throw new InternalError(loadFailure);
+    }
-  private void findVersions() {
+  private void findVersions(String fileName) {
-    File propFile = new File(
-        "../../../geode-old-versions/build/generated-resources/main/geodeOldVersionClasspaths.txt");
-    if (!propFile.exists()) {
-      // running under an IDE
-      propFile = new File(
-          "../geode-old-versions/build/generated-resources/main/geodeOldVersionClasspaths.txt");
-    }
-    String oldver = "ZZZ";
-    if (propFile.exists()) {
-      System.out.println("found geodeOldVersionClasspaths.txt - loading properties");
-      Properties dunitProperties = loadProperties(propFile);
-      for (Map.Entry<Object, Object> entry : dunitProperties.entrySet()) {
-        String version = (String) entry.getKey();
-        if (version.startsWith("test") && version.length() >= "test".length()) {
-          if (version.equals("test")) {
-            version = CURRENT_VERSION;
-          } else {
-            version = version.substring("test".length());
-            if (version.compareTo(oldver) < 0) {
-              oldver = version;
-            }
-          }
-          classPaths.put(version, (String) entry.getValue());
-          testVersions.add(version);
-        }
-      }
-      if (oldver.equals("ZZZ")) {
-        oldestVersion = CURRENT_VERSION;
-      } else {
-        oldestVersion = oldver;
-      }
-    } else {
-      System.out.println(
-          "WARNING: could not find geodeTestClasspaths.txt - tests will use current version");
-    }
-  }
-
-  /**
-   * Loads properties from a file, returning a Map object. Note: this method cannot use
-   * Properties.load() because that method interprets back-slashes as escape characters, causing
-   * class-paths on Windows machines to be garbled.
-   */
-  private Properties loadProperties(File propFile) {
-    try (FileReader reader = new FileReader(propFile)) {
-      props.load(reader);
+    URL url = VersionManager.class.getResource("/" + fileName);
+    if (url == null) {
+      loadFailure = "VersionManager: unable to locate " + fileName + " in class-path";
+      return;
+    }
+    try (InputStream in = VersionManager.class.getResource("/" + fileName).openStream()) {
+      props.load(in);
-      throw new RuntimeException(e);
+      loadFailure = "VersionManager: unable to read resource " + fileName;
+      return;
-    return props;
+    for (Map.Entry<Object, Object> entry : props.entrySet()) {
+      String version = (String) entry.getKey();
+      if (version.startsWith("test") && version.length() >= "test".length()) {
+        if (version.equals("test")) {
+          version = CURRENT_VERSION;
+        } else {
+          version = version.substring("test".length());
+        }
+        classPaths.put(version, (String) entry.getValue());
+        testVersions.add(version);
+      }
+    }
-
-
-

MOV26 UPD40 INS23 INS31 INS31 INS83 MOV43 INS59 MOV29 UPD83 MOV83 INS83 UPD43 MOV43 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 INS8 INS44 MOV8 INS42 INS45 INS60 UPD42 UPD43 UPD42 MOV60 INS21 INS41 INS21 INS21 INS25 MOV43 INS42 INS60 INS25 INS54 INS83 MOV43 INS59 UPD66 UPD66 UPD42 UPD43 INS32 INS42 INS32 INS32 INS27 INS8 INS43 INS59 INS27 MOV8 INS58 INS8 INS12 INS42 INS45 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 MOV53 UPD42 INS14 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS59 INS21 MOV44 INS8 UPD42 UPD43 UPD42 MOV42 UPD42 MOV42 INS43 INS57 UPD42 MOV42 INS27 INS42 INS42 INS32 INS32 MOV21 INS41 UPD42 UPD43 UPD42 INS42 INS43 INS45 INS42 UPD42 INS27 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS45 INS42 INS45 INS57 INS42 INS27 UPD42 INS27 INS43 INS45 INS42 INS45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL43 DEL45 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL58 DEL42 DEL32 DEL21 DEL8 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31