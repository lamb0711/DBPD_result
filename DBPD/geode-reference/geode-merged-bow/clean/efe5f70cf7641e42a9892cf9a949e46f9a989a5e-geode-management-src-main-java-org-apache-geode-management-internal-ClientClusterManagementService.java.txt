GEODE-7715: Introduce Transport and Config interfaces to ClusterManagementServiceBuilder (#4601)

This introduces several new interfaces to the `ClusterManagementService`. These are:

- `ClusterManagmentServiceTransport` which represents the message exchange between client and endpoint.
- `ClusterManagementServiceConnectionConfig` which is a data object and represents various properties required to establish a connection.

-import static org.apache.geode.management.configuration.Links.URI_VERSION;
-import static org.apache.geode.management.internal.Constants.INCLUDE_CLASS_HEADER;
-
-import java.util.Date;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.stream.Collectors;
-
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpMethod;
-import org.springframework.web.client.RestTemplate;
+import org.apache.geode.management.api.ClusterManagementServiceTransport;
+import org.apache.geode.management.api.CommandType;
-  private final RestTemplate restTemplate;
-  private final ScheduledExecutorService longRunningStatusPollingThreadPool;
+  private final ClusterManagementServiceTransport transport;
-  ClientClusterManagementService(RestTemplate restTemplate) {
-    this.restTemplate = restTemplate;
-    this.longRunningStatusPollingThreadPool = Executors.newScheduledThreadPool(1);
+  public ClientClusterManagementService(ClusterManagementServiceTransport transport) {
+    this.transport = transport;
-  @SuppressWarnings("unchecked")
-    String endPoint = URI_VERSION + config.getLinks().getList();
-    // the response status code info is represented by the ClusterManagementResult.errorCode already
-    return assertSuccessful(restTemplate
-        .exchange(endPoint, HttpMethod.POST, makeEntity(config),
-            ClusterManagementRealizationResult.class)
-        .getBody());
-  }
-
-  static <T> HttpEntity<T> makeEntity(T config) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.add(INCLUDE_CLASS_HEADER, "true");
-    return new HttpEntity<>(config, headers);
+    return assertSuccessful(transport
+        .submitMessage(config, CommandType.CREATE, ClusterManagementRealizationResult.class));
-  @SuppressWarnings("unchecked")
-    String uri = getIdentityEndpoint(config);
-    return assertSuccessful(restTemplate
-        .exchange(uri + "?group={group}",
-            HttpMethod.DELETE,
-            makeEntity(null),
-            ClusterManagementRealizationResult.class,
-            config.getGroup())
-        .getBody());
+    return assertSuccessful(transport.submitMessage(config, CommandType.DELETE,
+        ClusterManagementRealizationResult.class));
-  @SuppressWarnings("unchecked")
-    String endPoint = URI_VERSION + config.getLinks().getList();
-    return assertSuccessful(restTemplate
-        .exchange(endPoint + "/?id={id}&group={group}", HttpMethod.GET, makeEntity(config),
-            ClusterManagementListResult.class, config.getId(), config.getGroup())
-        .getBody());
+    return assertSuccessful(
+        transport.submitMessageForList(config, ClusterManagementListResult.class));
-  @SuppressWarnings("unchecked")
-
-    return assertSuccessful(restTemplate
-        .exchange(getIdentityEndpoint(config), HttpMethod.GET, makeEntity(config),
-            ClusterManagementGetResult.class)
-        .getBody());
+    return assertSuccessful(
+        transport.submitMessageForGet(config, ClusterManagementGetResult.class));
-  @SuppressWarnings("unchecked")
-    final ClusterManagementOperationResult result;
-
-    // make the REST call to start the operation
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + op.getEndpoint(), HttpMethod.POST, makeEntity(op),
-            ClusterManagementOperationResult.class)
-        .getBody());
-
-    // our restTemplate requires the url to be modified to start from "/v1"
-    return reAnimate(result, op.getEndpoint());
-  }
-
-  private <V extends OperationResult> ClusterManagementOperationResult<V> reAnimate(
-      ClusterManagementOperationResult<V> result, String endPoint) {
-    String uri = URI_VERSION + endPoint + "/" + result.getOperationId();
-
-    // complete the future by polling the check-status REST endpoint
-    CompletableFuture<Date> futureOperationEnded = new CompletableFuture<>();
-    CompletableFutureProxy<V> operationResult =
-        new CompletableFutureProxy<>(restTemplate, uri, longRunningStatusPollingThreadPool,
-            futureOperationEnded);
-
-    return new ClusterManagementOperationResult<>(result, operationResult,
-        result.getOperationStart(), futureOperationEnded, result.getOperator(),
-        result.getOperationId());
+    return transport.submitMessageForStart(op);
-  @SuppressWarnings("unchecked")
-    final ClusterManagementListOperationsResult<V> result;
-
-    // make the REST call to list in-progress operations
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + opType.getEndpoint(), HttpMethod.GET,
-            makeEntity(null), ClusterManagementListOperationsResult.class)
-        .getBody());
-
-    return new ClusterManagementListOperationsResult<>(
-        result.getResult().stream().map(r -> reAnimate(r, opType.getEndpoint()))
-            .collect(Collectors.toList()));
+    return transport.submitMessageForListOperation(opType,
+        ClusterManagementListOperationsResult.class);
-  private String getIdentityEndpoint(AbstractConfiguration config) {
-    String uri = config.getLinks().getSelf();
-    if (uri == null) {
-      throw new IllegalArgumentException(
-          "Unable to construct the URI with the current configuration.");
-    }
-    return URI_VERSION + uri;
+  @Override
+  public boolean isConnected() {
+    return transport.isConnected();
+  }
+
+  @Override
+  public void close() {
+    transport.close();
-
-  public boolean isConnected() {
-    try {
-      return restTemplate.getForEntity(URI_VERSION + "/ping", String.class)
-          .getBody().equals("pong");
-    } catch (Exception e) {
-      return false;
-    }
-  }
-
-  @Override
-  public void close() {
-    longRunningStatusPollingThreadPool.shutdownNow();
-  }

MOV26 MOV26 MOV31 UPD40 UPD40 UPD43 INS83 INS78 MOV73 MOV43 MOV44 MOV78 MOV73 MOV43 MOV44 MOV78 INS8 UPD42 UPD42 UPD43 UPD42 INS42 MOV41 UPD42 INS32 INS32 UPD42 MOV32 MOV32 MOV32 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV57 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD42 INS42 UPD40 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL74 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL27 DEL42 DEL33 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL27 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL79 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL32 DEL83 DEL42 DEL42 DEL43 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL33 DEL32 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL74 DEL42 DEL32 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL27 DEL41 DEL8 DEL31 DEL42 DEL45 DEL27 DEL42 DEL43 DEL57 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8