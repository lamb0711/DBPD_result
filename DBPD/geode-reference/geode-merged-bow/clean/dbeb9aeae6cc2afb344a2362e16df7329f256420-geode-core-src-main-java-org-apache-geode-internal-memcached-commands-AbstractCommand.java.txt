Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-  
+
-  
+
-      getLogger().finer("keyLength:"+keyLength);
+      getLogger().finer("keyLength:" + keyLength);
-//    for (int i=0; i<keyLength; i++) {
-//      key[i] = buffer.get();
-//    }
+    // for (int i=0; i<keyLength; i++) {
+    // key[i] = buffer.get();
+    // }
-      getLogger().finer("key:"+Arrays.toString(key));
+      getLogger().finer("key:" + Arrays.toString(key));
-      getLogger().finer("val: totalBody:"+totalBodyLength+" valLen:"+valueLength);
+      getLogger().finer("val: totalBody:" + totalBodyLength + " valLen:" + valueLength);
-//    for (int i=0; i<valueLength; i++) {
-//      value[i] = buffer.get();
-//    }
+    // for (int i=0; i<valueLength; i++) {
+    // value[i] = buffer.get();
+    // }
-      getLogger().finer("val:"+Arrays.toString(value)+" totalBody:"+totalBodyLength+" valLen:"+valueLength);
+      getLogger().finer("val:" + Arrays.toString(value) + " totalBody:" + totalBodyLength
+          + " valLen:" + valueLength);
-      throw new ClientError("error reading command:"+builder.toString());
+      throw new ClientError("error reading command:" + builder.toString());
-      getLogger().fine("gemcached command:"+firstLine);
+      getLogger().fine("gemcached command:" + firstLine);
-          RegionFactory<Object, ValueWrapper> rf = cache.createRegionFactory(RegionShortcut.PARTITION);
+          RegionFactory<Object, ValueWrapper> rf =
+              cache.createRegionFactory(RegionShortcut.PARTITION);
-  
+
-  protected ByteBuffer handleBinaryException(Object key, RequestReader request,
-      ByteBuffer response, String operation, Exception e) {
-    getLogger().info("Exception occurred while processing "+operation+" :"+key, e);
-    String errStr = e.getMessage() == null? "SERVER ERROR" : e.getMessage();
+  protected ByteBuffer handleBinaryException(Object key, RequestReader request, ByteBuffer response,
+      String operation, Exception e) {
+    getLogger().info("Exception occurred while processing " + operation + " :" + key, e);
+    String errStr = e.getMessage() == null ? "SERVER ERROR" : e.getMessage();

