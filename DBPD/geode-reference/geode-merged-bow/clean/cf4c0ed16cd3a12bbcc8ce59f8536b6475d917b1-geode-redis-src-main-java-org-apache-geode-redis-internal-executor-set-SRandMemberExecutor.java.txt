GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
-import java.util.ArrayList;
-import java.util.HashSet;
+import java.util.Collection;
-import java.util.Random;
-import java.util.Set;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Region<ByteArrayWrapper, RedisSet> region = getRegion(context);
+    int count = 1;
-      int count = 1;
-
-      if (commandElems.size() > 2) {
-        try {
-          count = Coder.bytesToInt(commandElems.get(2));
-        } catch (NumberFormatException e) {
-          command.setResponse(
-              Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
-          return;
-        }
-      }
-
-      Set<ByteArrayWrapper> set = RedisSet.members(region, key);
-
-      if (set == null || count == 0) {
-        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-        return;
-      }
-
-      int members = set.size();
-
-      if (members <= count && count != 1) {
-        respondBulkStrings(command, context, new HashSet<ByteArrayWrapper>(set));
-        return;
-      }
-
-      Random rand = new Random();
-
-      ByteArrayWrapper[] entries = set.toArray(new ByteArrayWrapper[members]);
-
+    if (commandElems.size() > 2) {
-        if (count == 1) {
-          ByteArrayWrapper randEntry = entries[rand.nextInt(entries.length)];
-          command.setResponse(
-              Coder.getBulkStringResponse(context.getByteBufAllocator(), randEntry.toBytes()));
-        } else if (count > 0) {
-          Set<ByteArrayWrapper> randEntries = new HashSet<>();
-          do {
-            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-            randEntries.add(s);
-          } while (randEntries.size() < count);
-          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
-        } else {
-          count = -count;
-          List<ByteArrayWrapper> randEntries = new ArrayList<>();
-          for (int i = 0; i < count; i++) {
-            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-            randEntries.add(s);
-          }
-          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
-        }
-      } catch (CoderException e) {
-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-            RedisConstants.SERVER_ERROR_MESSAGE));
+        count = Coder.bytesToInt(commandElems.get(2));
+      } catch (NumberFormatException e) {
+        command.setResponse(
+            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
+        return;
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+    }
+    if (count == 0) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-    } catch (TimeoutException e) {
+    }
+    if (count < 0) {
+      count = -count;
+    }
+
+    RedisSetCommands redisSetCommands =
+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());
+    Collection<ByteArrayWrapper> results = redisSetCommands.srandmember(key, count);
+    try {
+      if (results.isEmpty()) {
+        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+      } else if (count == 1) {
+        command.setResponse(
+            Coder.getBulkStringResponse(context.getByteBufAllocator(),
+                results.iterator().next().toBytes()));
+      } else {
+        command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), results));
+      }
+    } catch (CoderException e) {
-          "Timeout acquiring lock. Please try again."));
-      return;
+          RedisConstants.SERVER_ERROR_MESSAGE));

MOV26 UPD40 INS8 MOV60 MOV60 MOV60 MOV25 MOV25 MOV25 MOV60 MOV60 MOV54 MOV27 INS27 UPD43 UPD74 MOV74 MOV42 UPD34 MOV34 MOV21 UPD42 UPD42 UPD43 UPD42 UPD43 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS8 INS25 UPD42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 MOV27 INS8 MOV8 INS42 INS42 MOV21 UPD42 MOV32 MOV32 UPD42 INS32 INS32 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL27 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL32 DEL21 DEL41 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL27 DEL19 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL2 DEL59 DEL60 DEL8 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8