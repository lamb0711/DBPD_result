Merge remote-tracking branch 'remotes/origin/feature/GEODE-1162' into feature/GEODE-17-2

-import com.gemstone.gemfire.internal.cache.partitioned.rebalance.BucketOperatorImpl;
-import com.gemstone.gemfire.internal.cache.partitioned.rebalance.BucketOperatorWrapper;
-        : new BucketOperatorImpl(this);
+        : new BucketOperatorImpl();
-        operator, rebalanceDetails, stats, leaderRegion);
+        operator, rebalanceDetails);
+   * @param pr
+   *          the partitioned region which contains the bucket
+   * @param forRebalance
+   *          true if part of a rebalance operation
-  public boolean createRedundantBucketForRegion(
-      InternalDistributedMember target, int bucketId) {
-    return getLeaderRegion().getRedundancyProvider().createBackupBucketOnMember(bucketId,
-        target, isRebalance, replaceOfflineData,null, true);
+  public static boolean createRedundantBucketForRegion(
+      InternalDistributedMember target, int bucketId, PartitionedRegion pr,
+      boolean forRebalance, boolean replaceOfflineData) {
+    return pr.getRedundancyProvider().createBackupBucketOnMember(bucketId,
+        target, forRebalance, replaceOfflineData,null, true);
+   * @param pr
+   *          the partitioned region which contains the bucket
-  public boolean removeRedundantBucketForRegion(
-      InternalDistributedMember target, int bucketId) {
+  public static boolean removeRedundantBucketForRegion(
+      InternalDistributedMember target, int bucketId, PartitionedRegion pr) {
-    if (getLeaderRegion().getDistributionManager().getId().equals(target)) {
+    if (pr.getDistributionManager().getId().equals(target)) {
-      removed = getLeaderRegion().getDataStore().removeBucket(bucketId, false);
+      removed = pr.getDataStore().removeBucket(bucketId, false);
-      RemoveBucketResponse response = RemoveBucketMessage.send(target, getLeaderRegion(),
+      RemoveBucketResponse response = RemoveBucketMessage.send(target, pr,
+   * @param pr
+   *          the partitioned region which contains the bucket
+   * @param forRebalance
+   *          true if part of a rebalance operation
-  public boolean movePrimaryBucketForRegion(
-      InternalDistributedMember target, int bucketId) {
+  public static boolean movePrimaryBucketForRegion(
+      InternalDistributedMember target, int bucketId, PartitionedRegion pr,
+      boolean forRebalance) {
-    if (getLeaderRegion().getDistributionManager().getId().equals(target)) {
+    if (pr.getDistributionManager().getId().equals(target)) {
-      BucketAdvisor bucketAdvisor = getLeaderRegion().getRegionAdvisor().getBucketAdvisor(
+      BucketAdvisor bucketAdvisor = pr.getRegionAdvisor().getBucketAdvisor(
-        movedPrimary = bucketAdvisor.becomePrimary(isRebalance);
+        movedPrimary = bucketAdvisor.becomePrimary(forRebalance);
-          target, getLeaderRegion(), bucketId, isRebalance);
+          target, pr, bucketId, forRebalance);
+   * @param pr
+   *          the partitioned region which contains the bucket
-  public boolean moveBucketForRegion(InternalDistributedMember source,
-      InternalDistributedMember target, int bucketId) {
+  public static boolean moveBucketForRegion(InternalDistributedMember source,
+      InternalDistributedMember target, int bucketId, PartitionedRegion pr) {
-    if (getLeaderRegion().getDistributionManager().getId().equals(target)) {
+    if (pr.getDistributionManager().getId().equals(target)) {
-      movedBucket = getLeaderRegion().getDataStore().moveBucket(bucketId, source, false);
+      movedBucket = pr.getDataStore().moveBucket(bucketId, source, false);
-      MoveBucketResponse response = MoveBucketMessage.send(target, getLeaderRegion(),
+      MoveBucketResponse response = MoveBucketMessage.send(target, pr,
-  public PartitionedRegion getLeaderRegion() {
-    return leaderRegion;
-  }
-  
+  
+  private class BucketOperatorImpl implements BucketOperator {
+
+    @Override
+    public boolean moveBucket(InternalDistributedMember source,
+        InternalDistributedMember target, int bucketId,
+        Map<String, Long> colocatedRegionBytes) {
+
+      InternalResourceManager.getResourceObserver().movingBucket(
+          leaderRegion, bucketId, source, target);
+      return moveBucketForRegion(source, target, bucketId, leaderRegion);
+    }
+
+    @Override
+    public boolean movePrimary(InternalDistributedMember source,
+        InternalDistributedMember target, int bucketId) {
+
+      InternalResourceManager.getResourceObserver().movingPrimary(
+          leaderRegion, bucketId, source, target);
+      return movePrimaryBucketForRegion(target, bucketId, leaderRegion, isRebalance); 
+    }
+
+    @Override
+    public void createRedundantBucket(
+        InternalDistributedMember targetMember, int bucketId,
+        Map<String, Long> colocatedRegionBytes, Completion completion) {
+      boolean result = false;
+      try {
+        result = createRedundantBucketForRegion(targetMember, bucketId,
+          leaderRegion, isRebalance,replaceOfflineData);
+      } finally {
+        if(result) {
+          completion.onSuccess();
+        } else {
+          completion.onFailure();
+        }
+      }
+    }
+    
+    @Override
+    public void waitForOperations() {
+      //do nothing, all operations are synchronous
+    }
+
+    @Override
+    public boolean removeBucket(InternalDistributedMember targetMember, int bucketId,
+        Map<String, Long> colocatedRegionBytes) {
+      return removeRedundantBucketForRegion(targetMember, bucketId,
+          leaderRegion);
+    }
+  }
+
+  /**
+   * A wrapper class which delegates actual bucket operations to the enclosed BucketOperator,
+   * but keeps track of statistics about how many buckets are created, transfered, etc.
+   *
+   */
+  private class BucketOperatorWrapper implements 
+      BucketOperator {
+    private final BucketOperator delegate;
+    private final Set<PartitionRebalanceDetailsImpl> detailSet;
+    private final int regionCount;
+  
+    public BucketOperatorWrapper(
+        BucketOperator delegate,
+        Set<PartitionRebalanceDetailsImpl> rebalanceDetails) {
+      this.delegate = delegate;
+      this.detailSet = rebalanceDetails;
+      this.regionCount = detailSet.size();
+    }
+    @Override
+    public boolean moveBucket(InternalDistributedMember sourceMember,
+        InternalDistributedMember targetMember, int id,
+        Map<String, Long> colocatedRegionBytes) {
+      long start = System.nanoTime();
+      boolean result = false;
+      long elapsed = 0;
+      long totalBytes = 0;
+
+
+      if (stats != null) {
+        stats.startBucketTransfer(regionCount);
+      }
+      try {
+        result = delegate.moveBucket(sourceMember, targetMember, id,
+            colocatedRegionBytes);
+        elapsed = System.nanoTime() - start;
+        if (result) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} bucket {} moved from {} to {}", leaderRegion, id, sourceMember, targetMember);
+          }
+          for (PartitionRebalanceDetailsImpl details : detailSet) {
+            String regionPath = details.getRegionPath();
+            Long regionBytes = colocatedRegionBytes.get(regionPath);
+            if(regionBytes != null) {
+            //only increment the elapsed time for the leader region
+              details.incTransfers(regionBytes.longValue(),
+                  details.getRegion().equals(leaderRegion) ? elapsed : 0);
+              totalBytes += regionBytes.longValue();
+            }
+          }
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} bucket {} moved failed from {} to {}", leaderRegion, id, sourceMember, targetMember);
+          }
+        }
+      } finally {
+        if(stats != null) {
+          stats.endBucketTransfer(regionCount, result, totalBytes, elapsed);
+        }
+      }
+      
+      return result;
+    }
+
+    @Override
+    public void createRedundantBucket(
+        final InternalDistributedMember targetMember, final int i, 
+        final Map<String, Long> colocatedRegionBytes, final Completion completion) {
+      
+      if(stats != null) {
+        stats.startBucketCreate(regionCount);
+      }
+      
+      final long start = System.nanoTime();
+      delegate.createRedundantBucket(targetMember, i,  
+          colocatedRegionBytes, new Completion() {
+
+        @Override
+        public void onSuccess() {
+          long totalBytes = 0;
+          long elapsed= System.nanoTime() - start;
+          if(logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} redundant bucket {} created on {}", leaderRegion, i, targetMember);
+          }
+          for (PartitionRebalanceDetailsImpl details : detailSet) {
+            String regionPath = details.getRegionPath();
+            Long lrb = colocatedRegionBytes.get(regionPath);
+            if (lrb != null) { // region could have gone away - esp during shutdow
+              long regionBytes = lrb.longValue();
+              //Only add the elapsed time to the leader region.
+              details.incCreates(regionBytes, 
+                  details.getRegion().equals(leaderRegion) ? elapsed : 0);
+              totalBytes += regionBytes;
+            }
+          }
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, true, totalBytes, elapsed);
+          }
+
+        }
+
+        @Override
+        public void onFailure() {
+          long elapsed= System.nanoTime() - start;
+
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} redundant bucket {} failed creation on {}", leaderRegion, i, targetMember);
+          }
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, false, 0, elapsed);
+          }
+        }
+      });
+    }
+    
+    @Override
+    public boolean removeBucket(
+        InternalDistributedMember targetMember, int i, 
+        Map<String, Long> colocatedRegionBytes) {
+      boolean result = false;
+      long elapsed = 0;
+      long totalBytes = 0;
+      
+      
+      if(stats != null) {
+        stats.startBucketRemove(regionCount);
+      }
+      try {
+        long start = System.nanoTime();
+        result = delegate.removeBucket(targetMember, i,  
+            colocatedRegionBytes);
+        elapsed= System.nanoTime() - start;
+        if (result) {
+          if(logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} redundant bucket {} removed from {}", leaderRegion, i, targetMember);
+          }
+          for (PartitionRebalanceDetailsImpl details : detailSet) {
+            String regionPath = details.getRegionPath();
+            Long lrb = colocatedRegionBytes.get(regionPath);
+            if (lrb != null) { // region could have gone away - esp during shutdow
+              long regionBytes = lrb.longValue();
+              //Only add the elapsed time to the leader region.
+              details.incRemoves(regionBytes, 
+                  details.getRegion().equals(leaderRegion) ? elapsed : 0);
+              totalBytes += regionBytes;
+            }
+          }
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} redundant bucket {} failed removal o{}", leaderRegion, i, targetMember);
+          }
+        }
+      } finally {
+        if(stats != null) {
+          stats.endBucketRemove(regionCount, result, totalBytes, elapsed);
+        }
+      }
+      
+      return result;
+    }
+  
+    @Override
+    public boolean movePrimary(InternalDistributedMember source,
+        InternalDistributedMember target, int bucketId) {
+      boolean result = false;
+      long elapsed = 0;
+      
+      if(stats != null) {
+        stats.startPrimaryTransfer(regionCount);
+      }
+
+      try {
+        long start = System.nanoTime();
+        result = delegate.movePrimary(source, target, bucketId);
+        elapsed = System.nanoTime() - start;
+        if (result) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} primary bucket {} moved from {} to {}", leaderRegion, bucketId, source, target);
+          }
+          for (PartitionRebalanceDetailsImpl details : detailSet) {
+            details.incPrimaryTransfers(details.getRegion().equals(leaderRegion) ? elapsed : 0);
+          }
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Rebalancing {} primary bucket {} failed to move from {} to {}", leaderRegion, bucketId, source, target);
+          }
+        }
+    } finally {
+      if(stats != null) {
+        stats.endPrimaryTransfer(regionCount, result, elapsed);
+      }
+    }
+      
+      return result;
+    }
+    
+    @Override
+    public void waitForOperations() {
+      delegate.waitForOperations();
+    }
+
+    public Set<PartitionRebalanceDetailsImpl> getDetailSet() {
+      return this.detailSet;
+    }
+  }

INS55 INS55 INS83 INS44 INS44 INS44 INS83 INS44 INS83 INS44 INS44 INS83 INS44 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS65 INS43 INS42 INS65 INS65 INS43 INS42 INS39 INS42 INS65 MOV43 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 MOV43 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS43 INS42 INS60 INS54 INS42 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS41 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS60 INS60 INS60 INS60 INS25 INS54 INS41 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS25 INS60 INS21 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS60 INS60 INS60 INS25 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS25 INS54 INS41 INS42 INS21 INS43 INS43 INS41 UPD42 INS42 INS42 INS43 INS43 INS43 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS43 INS43 INS43 INS42 INS39 INS59 INS8 INS8 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS7 INS42 INS42 INS43 INS43 INS43 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS27 INS8 INS83 INS39 INS59 INS32 INS42 INS43 INS43 INS43 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS8 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS8 INS42 INS32 INS42 INS42 INS22 MOV43 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS34 INS42 INS34 INS42 INS33 INS21 INS21 INS21 INS25 INS25 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS34 INS42 INS34 INS42 INS33 INS21 INS60 INS21 INS21 INS25 INS25 INS42 INS9 INS42 INS34 INS42 INS33 INS21 INS60 INS21 INS21 INS25 INS25 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS7 INS42 INS8 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS8 INS8 INS27 INS8 INS32 INS42 INS42 INS43 INS1 INS32 INS39 INS59 INS7 INS7 INS42 INS8 INS8 INS27 INS8 INS32 INS39 INS59 INS7 INS7 INS42 INS8 INS8 INS27 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS25 INS70 INS25 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS31 INS31 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS25 INS70 INS25 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS25 INS70 INS25 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS44 INS42 INS8 INS32 INS8 INS32 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS44 INS42 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS44 INS42 INS8 INS32 INS8 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS60 INS60 INS25 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS70 INS25 INS42 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS60 INS60 INS25 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS39 INS59 INS39 INS59 INS32 INS8 INS44 INS42 INS8 INS27 INS8 INS39 INS59 INS32 INS8 INS27 INS8 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS27 INS42 INS42 INS21 INS43 INS42 INS60 INS60 INS25 INS42 INS33 INS21 INS42 INS27 INS42 INS42 INS21 INS42 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS7 INS32 INS42 INS34 INS42 INS42 INS32 INS16 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS7 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL42 DEL41 DEL8