Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The StringUtils is an abstract utility class for working with and invoking operations on String literals.
+ * The StringUtils is an abstract utility class for working with and invoking operations on String
+ * literals.
+ * 
-  public static final String[] SPACES = {
-    "",
-    " ",
-    "  ",
-    "   ",
-    "    ",
-    "     ",
-    "      ",
-    "       ",
-    "        ",
-    "         ",
-    "          "
-  };
+  public static final String[] SPACES = {"", " ", "  ", "   ", "    ", "     ", "      ", "       ",
+      "        ", "         ", "          "};
+   * 
-   * Concatenates all Objects in the array into a single String using the Object's toString method, delimited by the
-   * specified delimiter.
+   * Concatenates all Objects in the array into a single String using the Object's toString method,
+   * delimited by the specified delimiter.
+   * 
-   * @param delimiter the String value to use as a separator between the individual Object values.  If delimiter is
-   * null, then a empty String is used.
-   * @return a single String with all the individual Objects of the array concatenated together, separated by the
-   * specified delimiter.
+   * @param delimiter the String value to use as a separator between the individual Object values.
+   *        If delimiter is null, then a empty String is used.
+   * @return a single String with all the individual Objects of the array concatenated together,
+   *         separated by the specified delimiter.
-   * @param values an array of String values, usually consisting of the preferred value followed by default values
-   * if any value in the array of String values is null, empty or blank.
-   * @return the first non-null, non-empty and non-blank String value in the array of Strings.  If all values are
-   * either null, empty or blank then null is returned.
+   * 
+   * @param values an array of String values, usually consisting of the preferred value followed by
+   *        default values if any value in the array of String values is null, empty or blank.
+   * @return the first non-null, non-empty and non-blank String value in the array of Strings. If
+   *         all values are either null, empty or blank then null is returned.
+   * 
-   * @return only the digits from the specified String value.  If the String is null or contains no digits,
-   * then this method returns an empty String.
+   * @return only the digits from the specified String value. If the String is null or contains no
+   *         digits, then this method returns an empty String.
+   * 
-   * @return only the letters from the specified String value.  If the String is null or contains no letters,
-   * then this method returns an empty String.
+   * @return only the letters from the specified String value. If the String is null or contains no
+   *         letters, then this method returns an empty String.
+   * 
-      number -= (SPACES.length -1);
+      number -= (SPACES.length - 1);
-    }
-    while (number > 0);
+    } while (number > 0);
-   * Determines whether the specified String value is blank, which is true if it is null, an empty String or a String
-   * containing only spaces (blanks).
+   * Determines whether the specified String value is blank, which is true if it is null, an empty
+   * String or a String containing only spaces (blanks).
+   * 
-   * Determines whether the specified String value is empty, which is true if and only if the value is the empty String.
+   * Determines whether the specified String value is empty, which is true if and only if the value
+   * is the empty String.
+   * 
+   * 
-   * @param length an int value indicating the final length of the String value with padding of the 'paddingCharacter'.
-   * @return the String value padded with the specified character by appending 'paddingCharacter' to the end of the
-   * String value up to the given length.
+   * @param length an int value indicating the final length of the String value with padding of the
+   *        'paddingCharacter'.
+   * @return the String value padded with the specified character by appending 'paddingCharacter' to
+   *         the end of the String value up to the given length.
-  public static String padEnding(final String value, final char paddingCharacter, final int length) {
+  public static String padEnding(final String value, final char paddingCharacter,
+      final int length) {
+   * 
+   * 
+   * 
-   * @return null if the String value is null or the trimmed version of the String value if String value is not null.
+   * @return null if the String value is null or the trimmed version of the String value if String
+   *         value is not null.
-   * Null-safe implementation of String truncate using substring.  Truncates the specified String value to the specified
-   * length.  Returns null if the String value is null.
+   * Null-safe implementation of String truncate using substring. Truncates the specified String
+   * value to the specified length. Returns null if the String value is null.
+   * 
-   * Gets the value of the specified Object as a String.  If the Object is null then the first non-null String value
-   * from the array of default String value is returned.  If the array of String values is null or all the elements
-   * in the default String values array are null, then the value of String.valueOf(value) is returned.
+   * Gets the value of the specified Object as a String. If the Object is null then the first
+   * non-null String value from the array of default String value is returned. If the array of
+   * String values is null or all the elements in the default String values array are null, then the
+   * value of String.valueOf(value) is returned.
+   * 
-   * @param defaultValues an array of default String values to assess if the specified Object value is null.
-   * @return a String representation of the specified Object value or one of the default String values from the array
-   * if the Object value is null.  If either the default String array is null or all the elements are null, then
-   * the String value of String.valueOf(value) is returned.
+   * @param defaultValues an array of default String values to assess if the specified Object value
+   *        is null.
+   * @return a String representation of the specified Object value or one of the default String
+   *         values from the array if the Object value is null. If either the default String array
+   *         is null or all the elements are null, then the String value of String.valueOf(value) is
+   *         returned.
-    }
-    else {
+    } else {
-   * Wraps a line of text to no longer than the specified width, measured by the number of characters in each line,
-   * indenting all subsequent lines with the indent.  If the indent is null, then an empty String is used.
+   * Wraps a line of text to no longer than the specified width, measured by the number of
+   * characters in each line, indenting all subsequent lines with the indent. If the indent is null,
+   * then an empty String is used.
+   * 
-   * @param widthInCharacters an integer value indicating the width of each line measured by the number of characters.
+   * @param widthInCharacters an integer value indicating the width of each line measured by the
+   *        number of characters.
-   * @throws IndexOutOfBoundsException if widthInCharacters is less than 0, or there are no word boundaries within
-   * the given width on any given split.
+   * @throws IndexOutOfBoundsException if widthInCharacters is less than 0, or there are no word
+   *         boundaries within the given width on any given split.
-      // throws IndexOutOfBoundsException if spaceIndex is -1, implying no word boundary was found within
+      // throws IndexOutOfBoundsException if spaceIndex is -1, implying no word boundary was found
+      // within
-  private static final int MAX_ARRAY_ELEMENTS_TO_CONVERT = Integer.getInteger("StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT", 16);
-  
+  private static final int MAX_ARRAY_ELEMENTS_TO_CONVERT =
+      Integer.getInteger("StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT", 16);
+
-   * Used to convert the given object to a String. If anything goes wrong in this conversion
-   * put some info about what went wrong on the result string but do not throw an exception.
+   * Used to convert the given object to a String. If anything goes wrong in this conversion put
+   * some info about what went wrong on the result string but do not throw an exception.
+   * 
-  
+
-   * Convert an object to a string and return it.
-   * Handled CacheDeserializables without having them change the form they store.
-   * If deserialization is needed and fails then the string contains a message saying so instead of throwing an exception.
+   * Convert an object to a string and return it. Handled CacheDeserializables without having them
+   * change the form they store. If deserialization is needed and fails then the string contains a
+   * message saying so instead of throwing an exception.
+   * 
-   * @param convertArrayContents if true then the contents of the array will be in the string; otherwise just the array identity
-   * @param maxArrayElements if convertArrayContents is true then this parameter limits how many array elements are converted to the string.
-   *                         After the last converted element "and NNN more" is used to indicate the number of elements not converted.
+   * @param convertArrayContents if true then the contents of the array will be in the string;
+   *        otherwise just the array identity
+   * @param maxArrayElements if convertArrayContents is true then this parameter limits how many
+   *        array elements are converted to the string. After the last converted element "and NNN
+   *        more" is used to indicate the number of elements not converted.
-  public static String objectToString(Object o, boolean convertArrayContents, int maxArrayElements) {
+  public static String objectToString(Object o, boolean convertArrayContents,
+      int maxArrayElements) {
-      CachedDeserializable cd = (CachedDeserializable)o;
+      CachedDeserializable cd = (CachedDeserializable) o;
-        return arrayToString((byte[])o, maxArrayElements);
+        return arrayToString((byte[]) o, maxArrayElements);
-        return arrayToString((boolean[])o, maxArrayElements);
+        return arrayToString((boolean[]) o, maxArrayElements);
-        return arrayToString((char[])o, maxArrayElements);
+        return arrayToString((char[]) o, maxArrayElements);
-        return arrayToString((short[])o, maxArrayElements);
+        return arrayToString((short[]) o, maxArrayElements);
-        return arrayToString((int[])o, maxArrayElements);
+        return arrayToString((int[]) o, maxArrayElements);
-        return arrayToString((long[])o, maxArrayElements);
+        return arrayToString((long[]) o, maxArrayElements);
-        return arrayToString((float[])o, maxArrayElements);
+        return arrayToString((float[]) o, maxArrayElements);
-        return arrayToString((double[])o, maxArrayElements);
+        return arrayToString((double[]) o, maxArrayElements);
-  
+
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {
-    for (int i = 0; ; i++) {
+    for (int i = 0;; i++) {

UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66