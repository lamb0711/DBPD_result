GEODE-6272: change jdbc to use pdx as keys instead of json (#3076)

Composite keys for the jdbc connector must now be PdxInstances created with "neverDeserialize".

* added PdxInstanceFactory.neverDeserialize and PdxInstance.isDeserializable as new external APIs.

* improved the InternalPdxInstance interface to include Sendable.
Also this interface is now implemented by the pdx enum classes.
So now all classes that implement PdxInstance also implement InternalPdxInstance

* getCacheObject is now on the InternalPdxInstance interface.

* getRawField is now in the InternalPdxInstance interface.
A method that was on PdxInstanceImpl but only used by AttributeDescriptor
and that did not use any PdxInstanceImpl data is now on AttributeDescriptor.
This also got rid of a singleton lookup of the cache.

* removed unused FieldNotFoundInPdxVersion

* removed PdxFieldNotFoundException

-import java.util.Set;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-      if (!(key instanceof String)) {
+      if (!(key instanceof PdxInstance)) {
-                + "\" must be a java.lang.String because multiple columns are configured as ids.");
+                + "\" must be a PdxInstance because multiple columns are configured as ids.");
-      JSONObject compositeKey = null;
-      try {
-        compositeKey = new JSONObject((String) key);
-      } catch (JSONException ex) {
-        throw new JdbcConnectorException("The key \"" + key
-            + "\" must be a valid JSON string because multiple columns are configured as ids. Details: "
-            + ex.getMessage());
+      PdxInstance compositeKey = (PdxInstance) key;
+      if (compositeKey.isDeserializable()) {
+        throw new JdbcConnectorException(
+            "The key \"" + key
+                + "\" must be a PdxInstance created with PdxInstanceFactory.neverDeserialize");
-      Set<String> fieldNames = compositeKey.keySet();
+      List<String> fieldNames = compositeKey.getFieldNames();
-        ColumnData columnData = new ColumnData(columnName, compositeKey.get(fieldName),
+        ColumnData columnData = new ColumnData(columnName, compositeKey.getField(fieldName),

INS60 INS25 UPD43 MOV43 INS59 INS32 INS8 UPD74 UPD42 MOV42 INS11 INS42 INS42 MOV53 UPD43 UPD43 MOV43 MOV42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD45 UPD45 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL11 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54