Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private Cluster cluster= null;
+  private Cluster cluster = null;
-  private void loadPropertiesFile() throws FileNotFoundException, IOException{
-    this.testbed = new TestBed(testbedFile,true);
+  private void loadPropertiesFile() throws FileNotFoundException, IOException {
+    this.testbed = new TestBed(testbedFile, true);
-   * function used for updating Cluster data
-   * for Mock
+   * function used for updating Cluster data for Mock
-    long usedHeapSize  = Math.abs(r.nextInt(2048));
+    long usedHeapSize = Math.abs(r.nextInt(2048));
-    //propfile
+    // propfile
-    cluster.setClusterId( Math.abs(r.nextInt(100)));
+    cluster.setClusterId(Math.abs(r.nextInt(100)));
-    long diskReadsRate = readPerSec;cluster.setDiskReadsRate(diskReadsRate);
+    long diskReadsRate = readPerSec;
+    cluster.setDiskReadsRate(diskReadsRate);
-    Map<String,Cluster.Member>  membersHMap = cluster.getMembersHMap();
-    List<Cluster.Region> regionsList = (List<Cluster.Region>)cluster.getClusterRegions().values();
+    Map<String, Cluster.Member> membersHMap = cluster.getMembersHMap();
+    List<Cluster.Region> regionsList = (List<Cluster.Region>) cluster.getClusterRegions().values();
-    int locatorCount=0;
+    int locatorCount = 0;
-      for(Locator locator : testbed.getRootDs().getLocators()){
-        String id = "(Launcher_Locator-1099-13-40-24-5368)-"+locatorCount++;
+      for (Locator locator : testbed.getRootDs().getLocators()) {
+        String id = "(Launcher_Locator-1099-13-40-24-5368)-" + locatorCount++;
-        membersHMap.put(id+name, initializeMember(id,name, true, true, true, false, locator.getHost()));
+        membersHMap.put(id + name,
+            initializeMember(id, name, true, true, true, false, locator.getHost()));
-      int serverCount=0;
-      for(Server server : testbed.getRootDs().getServers()){
-        String id = "(Launcher_Server-1099-13-40-24-5368)-"+serverCount++;
+      int serverCount = 0;
+      for (Server server : testbed.getRootDs().getServers()) {
+        String id = "(Launcher_Server-1099-13-40-24-5368)-" + serverCount++;
-        membersHMap.put(id+name, initializeMember(id,name, false, true, false, true, server.getHost()));
+        membersHMap.put(id + name,
+            initializeMember(id, name, false, true, false, true, server.getHost()));
-      int peerCount=0;
-      for(Peer peer : testbed.getRootDs().getPeers()){
-        String id = "(Launcher_Peer-1099-13-40-24-5368)-"+peerCount++;
+      int peerCount = 0;
+      for (Peer peer : testbed.getRootDs().getPeers()) {
+        String id = "(Launcher_Peer-1099-13-40-24-5368)-" + peerCount++;
-        membersHMap.put( id+name, initializeMember(id,name, false, true, false, false, peer.getHost()));
+        membersHMap.put(id + name,
+            initializeMember(id, name, false, true, false, false, peer.getHost()));
-      for(Entry<String, Member> memberSet : membersHMap.entrySet())
-      {
-        HashMap<String,Cluster.Region> memberRegions = new HashMap<String,Cluster.Region>();
-        HashMap<String,Cluster.Client> memberClientsHM = new HashMap<String,Cluster.Client>();
+      for (Entry<String, Member> memberSet : membersHMap.entrySet()) {
+        HashMap<String, Cluster.Region> memberRegions = new HashMap<String, Cluster.Region>();
+        HashMap<String, Cluster.Client> memberClientsHM = new HashMap<String, Cluster.Client>();
-        //Read from property file
+        // Read from property file
-        List<org.apache.geode.tools.pulse.testbed.GemFireDistributedSystem.Region> thisMemberRegions = testbed.getRootDs().getRegions(memberSet.getValue().getName());
+        List<org.apache.geode.tools.pulse.testbed.GemFireDistributedSystem.Region> thisMemberRegions =
+            testbed.getRootDs().getRegions(memberSet.getValue().getName());
-        int index=0;
+        int index = 0;
-          Region region = initMemberRegion(index++,thisMemberRegion.getName(),memberSet.getValue().getName(),
-              thisMemberRegion.getEntryCount(),thisMemberRegion.getType(), thisMemberRegion.getMembers().size()); //read from property file
+          Region region = initMemberRegion(index++, thisMemberRegion.getName(),
+              memberSet.getValue().getName(), thisMemberRegion.getEntryCount(),
+              thisMemberRegion.getType(), thisMemberRegion.getMembers().size()); // read from
+                                                                                 // property file
-                //clusterRegion.memberCount = clusterRegion.memberCount + 1;
-                //int mcount = clusterRegion.getMemberCount() + 1;
-                //clusterRegion.setMemberCount(mcount);
+                // clusterRegion.memberCount = clusterRegion.memberCount + 1;
+                // int mcount = clusterRegion.getMemberCount() + 1;
+                // clusterRegion.setMemberCount(mcount);
-            if (regionExists == 0){
+            if (regionExists == 0) {
-          } else{
+          } else {
-          memberRegions.put(region.getFullPath(),region);
-          //totalRegionCount = regionsList.size();
+          memberRegions.put(region.getFullPath(), region);
+          // totalRegionCount = regionsList.size();
-          Client client = initMemberClient(0, memberSet.getValue().getHost()); //read from prop File
+          Client client = initMemberClient(0, memberSet.getValue().getHost()); // read from prop
+                                                                               // File
-            Client newClient = initMemberClient(y, memberSet.getValue()
-                .getHost());
+            Client newClient = initMemberClient(y, memberSet.getValue().getHost());
-          /*clientConnectionCount = clientConnectionCount
-              + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();*/
-          long clientConnectionCount = cluster.getClientConnectionCount() + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();
+          /*
+           * clientConnectionCount = clientConnectionCount +
+           * membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();
+           */
+          long clientConnectionCount = cluster.getClientConnectionCount()
+              + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();
-    wanInformation.clear(); //read from property file
+    wanInformation.clear(); // read from property file
-      if (i % 2 == 0){
+      if (i % 2 == 0) {
-    //memberCount = membersHMap.size();
+    // memberCount = membersHMap.size();
-    for(Entry<String, Member> memberSet : membersHMap.entrySet())
-    {
+    for (Entry<String, Member> memberSet : membersHMap.entrySet()) {
-      region.setPutsRate((Math.abs(r.nextInt(100))) +1);
+      region.setPutsRate((Math.abs(r.nextInt(100))) + 1);
-  private Region initMemberRegion(int count, String regionName, String memName, int entryCount, String type, int memberCount) {
+  private Region initMemberRegion(int count, String regionName, String memName, int entryCount,
+      String type, int memberCount) {
-    memberRegion.setFullPath("/"+regionName);
+    memberRegion.setFullPath("/" + regionName);
-    if(type.contains("PERSISTENT"))
+    if (type.contains("PERSISTENT"))
-    if (count % 2 == 0){
+    if (count % 2 == 0) {
-    }
-    else{
+    } else {
-    /*memberRegion.setSystemRegionEntryCount(Long.valueOf(String.valueOf(Math
-        .abs(randomGenerator.nextInt(100)))));*/
+    /*
+     * memberRegion.setSystemRegionEntryCount(Long.valueOf(String.valueOf(Math
+     * .abs(randomGenerator.nextInt(100)))));
+     */
-    if ((count % 2) == 0){
+    if ((count % 2) == 0) {
-    }
-    else{
+    } else {
-    memberClient
-        .setUptime(Math.abs(System.currentTimeMillis() - r.nextLong()));
+    memberClient.setUptime(Math.abs(System.currentTimeMillis() - r.nextLong()));
-  private Member initializeMember(String id, String name, boolean manager,
-      boolean isCache, boolean isLocator, boolean isServer, String host) {
+  private Member initializeMember(String id, String name, boolean manager, boolean isCache,
+      boolean isLocator, boolean isServer, String host) {
-    //m.setHost(getHostName(System.currentTimeMillis()));
+    // m.setHost(getHostName(System.currentTimeMillis()));
-    String port  = cluster.getPort();
-    if(port==null || "".equals(port))
+    String port = cluster.getPort();
+    if (port == null || "".equals(port))
-    if (memberArrList != null){
+    if (memberArrList != null) {
-    }
-    else {
+    } else {
-    int memberCount = cluster.getMemberCount();memberCount++;cluster.setMemberCount(memberCount);
+    int memberCount = cluster.getMemberCount();
+    memberCount++;
+    cluster.setMemberCount(memberCount);
-  private String getHostName(long rndSeed) {
-    Random rnd = new Random(rndSeed);
-    String hName = null;
-
-    int index = Math.abs(rnd.nextInt(MAX_HOSTS));
-
-    ArrayList<String> hostNames = cluster.getHostNames();
-
-    if (hostNames.size() <= index) {
-      hName = "host" + hostNames.size();
-      hostNames.add(hName);
-    } else {
-      hName = hostNames.get(index);
-    }
-
-    Map<String, ArrayList<Member>> physicalToMember = cluster.getPhysicalToMember();
-
-    ArrayList<Member> memberArrList = physicalToMember.get(hName);
-    if (memberArrList != null) {
-      if (memberArrList.size() > 4){
-        hName = getHostName(rndSeed + rnd.nextLong());
-      }
-    }
-    return hName;
-  }*/
+   * private String getHostName(long rndSeed) { Random rnd = new Random(rndSeed); String hName =
+   * null;
+   * 
+   * int index = Math.abs(rnd.nextInt(MAX_HOSTS));
+   * 
+   * ArrayList<String> hostNames = cluster.getHostNames();
+   * 
+   * if (hostNames.size() <= index) { hName = "host" + hostNames.size(); hostNames.add(hName); }
+   * else { hName = hostNames.get(index); }
+   * 
+   * Map<String, ArrayList<Member>> physicalToMember = cluster.getPhysicalToMember();
+   * 
+   * ArrayList<Member> memberArrList = physicalToMember.get(hName); if (memberArrList != null) { if
+   * (memberArrList.size() > 4){ hName = getHostName(rndSeed + rnd.nextLong()); } } return hName; }
+   */
-    if(LOGGER.infoEnabled()){
-      LOGGER.info(resourceBundle.getString("LOG_MSG_REFRESHING_MEMBER_DATA")+" : " + m.getName());
+    if (LOGGER.infoEnabled()) {
+      LOGGER.info(resourceBundle.getString("LOG_MSG_REFRESHING_MEMBER_DATA") + " : " + m.getName());
-          if(alertsList.size() > ALERTS_MAX_SIZE){
+          if (alertsList.size() > ALERTS_MAX_SIZE) {
-          if(alertsList.size() > ALERTS_MAX_SIZE){
+          if (alertsList.size() > ALERTS_MAX_SIZE) {
-          if(alertsList.size() > ALERTS_MAX_SIZE){
+          if (alertsList.size() > ALERTS_MAX_SIZE) {
-    case Alert.SEVERE:
-      alert.setDescription(PulseConstants.ALERT_DESC_SEVERE);
-      break;
-    case Alert.ERROR:
-      alert.setDescription(PulseConstants.ALERT_DESC_ERROR);
-      break;
-    case Alert.WARNING:
-      alert.setDescription(PulseConstants.ALERT_DESC_WARNING);
-      break;
+      case Alert.SEVERE:
+        alert.setDescription(PulseConstants.ALERT_DESC_SEVERE);
+        break;
+      case Alert.ERROR:
+        alert.setDescription(PulseConstants.ALERT_DESC_ERROR);
+        break;
+      case Alert.WARNING:
+        alert.setDescription(PulseConstants.ALERT_DESC_WARNING);
+        break;

UPD66 DEL66