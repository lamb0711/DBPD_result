GEODE-6534: Reduce scope of LocalRegion methods (#3398)

* Reduce scope of methods and fields where possible
* Remove unused methods and fields
* Remove redundant interface
* Replace deprecated call with undeprecated call
* Apply FunctionalInterface annotation to nested interfaces

-  public void checkSameSenderIdsAvailableOnAllNodes() {
+  void checkSameSenderIdsAvailableOnAllNodes() {
-  public void performPutAllEntry(EntryEventImpl event) {
+  void performPutAllEntry(EntryEventImpl event) {
-  public void performRemoveAllEntry(EntryEventImpl event) {
+  void performRemoveAllEntry(EntryEventImpl event) {
-  protected Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface tx,
+  Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface tx,
-  public boolean canStoreDataLocally() {
+  boolean canStoreDataLocally() {
-  protected void initialized() {
+  void initialized() {
-  protected void invalidateAllEntries(RegionEvent rgnEvent) {
+  void invalidateAllEntries(RegionEvent rgnEvent) {
-  protected boolean nonTXContainsKey(KeyInfo keyInfo) {
+  boolean nonTXContainsKey(KeyInfo keyInfo) {
-  protected boolean nonTXContainsValueForKey(KeyInfo keyInfo) {
+  boolean nonTXContainsValueForKey(KeyInfo keyInfo) {
-  public int entryCount(Set<Integer> buckets) {
+  int entryCount(Set<Integer> buckets) {
-  public long getEstimatedLocalSize() {
+  long getEstimatedLocalSize() {
-  protected void generateLocalFilterRouting(InternalCacheEvent event) {
+  void generateLocalFilterRouting(InternalCacheEvent event) {
-  protected void enableConcurrencyChecks() {
+  void enableConcurrencyChecks() {
-  @Override
-  public Object getValueInVM(EntryEventImpl event) throws EntryNotFoundException {
-    if (this.dataStore == null) {
-      throw new EntryNotFoundException(event.getKey().toString());
-    }
-    final int bucketId = PartitionedRegionHelper.getHashKey(event);
-    return this.dataStore.getLocalValueInVM(event.getKey(), bucketId);
-  }
-
-  protected void releaseLatches() {
+  void releaseLatches() {
-  protected RegionEntry basicGetTXEntry(KeyInfo keyInfo) {
+  RegionEntry basicGetTXEntry(KeyInfo keyInfo) {
-  protected boolean usesDiskStore(RegionAttributes regionAttributes) {
+  boolean usesDiskStore(RegionAttributes regionAttributes) {
-  protected DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
+  DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
-  protected DiskRegion createDiskRegion(InternalRegionArguments internalRegionArgs)
+  DiskRegion createDiskRegion(InternalRegionArguments internalRegionArgs)
-  protected void setMemoryThresholdFlag(MemoryEvent event) {
+  void setMemoryThresholdFlag(MemoryEvent event) {
-  public void initialCriticalMembers(boolean localMemoryIsCritical,
+  void initialCriticalMembers(boolean localMemoryIsCritical,
-  protected boolean isEntryIdleExpiryPossible() {
+  boolean isEntryIdleExpiryPossible() {
-  protected void preDestroyChecks() {
+  void preDestroyChecks() {
-  protected boolean hasStorage() {
+  boolean hasStorage() {

DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83