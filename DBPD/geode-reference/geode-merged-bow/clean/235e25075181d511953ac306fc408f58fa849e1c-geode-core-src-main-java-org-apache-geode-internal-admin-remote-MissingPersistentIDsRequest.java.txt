GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
-import java.io.DataInput;
-import java.io.IOException;
-import java.util.Collections;
+import static java.util.Collections.synchronizedSet;
+
+import java.util.Collection;
-import java.util.TreeSet;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.serialization.DeserializationContext;
- * A request to all members for any persistent members that they are waiting for. TODO prpersist -
+ * A request to all members for any persistent members that they are waiting for.
-    return new MissingPersistentIDsResponse(missingIds, localPatterns, this.getSender());
-  }
-
-  @Override
-  public void fromData(DataInput in,
-      DeserializationContext context) throws IOException, ClassNotFoundException {
-    super.fromData(in, context);
-  }
-
-  @Override
-  protected Object clone() throws CloneNotSupportedException {
-    // TODO: delete this clone method?
-    return super.clone();
+    return new MissingPersistentIDsResponse(missingIds, localPatterns, getSender());
-    Set<PersistentID> missing = Collections.synchronizedSet(new TreeSet<PersistentID>());
-    Set<PersistentID> existing = Collections.synchronizedSet(new TreeSet<PersistentID>());
-    MissingPersistentIDProcessor(DistributionManager dm, Set recipients) {
+    private final Set<PersistentID> missing = synchronizedSet(new HashSet<>());
+    private final Set<PersistentID> existing = synchronizedSet(new HashSet<>());
+
+    private MissingPersistentIDProcessor(DistributionManager dm,
+        Collection<InternalDistributedMember> recipients) {
-        this.missing.addAll(((MissingPersistentIDsResponse) message).getMissingIds());
-        this.existing.addAll(((MissingPersistentIDsResponse) message).getLocalIds());
+        missing.addAll(((MissingPersistentIDsResponse) message).getMissingIds());
+        existing.addAll(((MissingPersistentIDsResponse) message).getLocalIds());

MOV26 MOV26 UPD40 UPD40 UPD40 UPD66 INS83 INS83 MOV74 INS83 INS83 MOV74 INS83 INS74 INS43 INS43 UPD74 UPD74 UPD42 MOV42 INS42 UPD43 UPD43 UPD42 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL52 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL48 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22