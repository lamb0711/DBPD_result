Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Test framework utility class to programmatically create classes, JARs and ClassLoaders that include the classes.
+ * Test framework utility class to programmatically create classes, JARs and ClassLoaders that
+ * include the classes.
-   * @param className
-   *          Name of the class to create
-   * @param outputFile
-   *          Where to write the JAR file
-   * @throws IOException
-   *           If there is a problem creating the output stream for the JAR file.
+   * @param className Name of the class to create
+   * @param outputFile Where to write the JAR file
+   * @throws IOException If there is a problem creating the output stream for the JAR file.
-   * Write a JAR with a class of the given name with the provided content. The className
-   * may have a package separated by /. For example: my/package/myclass
+   * Write a JAR with a class of the given name with the provided content. The className may have a
+   * package separated by /. For example: my/package/myclass
-   * @param className
-   *          Name of the class to create
-   * @param content
-   *          Content of the created class
-   * @param outputFile
-   *          Where to write the JAR file
-   * @throws IOException
-   *           If there is a problem writing the JAR file.
+   * @param className Name of the class to create
+   * @param content Content of the created class
+   * @param outputFile Where to write the JAR file
+   * @throws IOException If there is a problem writing the JAR file.
-  public void writeJarFromContent(final String className, final String content, final File outputFile) throws IOException {
+  public void writeJarFromContent(final String className, final String content,
+      final File outputFile) throws IOException {
-   * @param className
-   *          Name of the class to create
+   * @param className Name of the class to create
-   * @throws IOException
-   *           If there is a problem creating the output stream for the JAR file.
+   * @throws IOException If there is a problem creating the output stream for the JAR file.
-  
+
-   * @param fileName
-   *          Name of the file to create
-   * @param content
-   *          Content of the created file
+   * @param fileName Name of the file to create
+   * @param content Content of the created file
-   * @throws IOException
-   *           If there is a problem creating the output stream for the JAR file.
+   * @throws IOException If there is a problem creating the output stream for the JAR file.
-  public byte[] createJarFromFileContent(final String fileName, final String content) throws IOException {
+  public byte[] createJarFromFileContent(final String fileName, final String content)
+      throws IOException {
-  
+
-   * @param className
-   *          Name of the class to create
-   * @param content
-   *          Content of the created class
+   * @param className Name of the class to create
+   * @param content Content of the created class
-   * @throws IOException
-   *           If there is a problem creating the output stream for the JAR file.
+   * @throws IOException If there is a problem creating the output stream for the JAR file.
-  public byte[] createJarFromClassContent(final String className, final String content) throws IOException {
+  public byte[] createJarFromClassContent(final String className, final String content)
+      throws IOException {
-   * Write a JAR with a class of the given name with the provided content. The className
-   * may have a package separated by /. For example: my/package/myclass
+   * Write a JAR with a class of the given name with the provided content. The className may have a
+   * package separated by /. For example: my/package/myclass
-   * @param className
-   *          Name of the class to create
-   * @param content
-   *          Content of the created class
-   * @param outStream
-   *          Stream to write the JAR to
-   * @throws IOException
-   *           If there is a problem creating the output stream for the JAR file.
+   * @param className Name of the class to create
+   * @param content Content of the created class
+   * @param outStream Stream to write the JAR to
+   * @throws IOException If there is a problem creating the output stream for the JAR file.
-  public void writeJarFromContent(final String className, final String content, final OutputStream outStream) throws IOException {
+  public void writeJarFromContent(final String className, final String content,
+      final OutputStream outStream) throws IOException {
-    
+
-    
+
-    
+
-   * @param className
-   *          Name of the class to create
-   * @param content
-   *          Content of the created class
+   * @param className Name of the class to create
+   * @param content Content of the created class
-   * @throws IOException
-   *           If there's a problem creating the output stream used to generate the class
+   * @throws IOException If there's a problem creating the output stream used to generate the class
-  public ClassLoader createClassLoaderFromContent(final String className, final String content) throws IOException {
+  public ClassLoader createClassLoaderFromContent(final String className, final String content)
+      throws IOException {
-   * Compile the provided class. The className may have a package separated by /. For example: my/package/myclass
+   * Compile the provided class. The className may have a package separated by /. For example:
+   * my/package/myclass
-   * @param className
-   *          Name of the class to compile.
-   * @param classCode
-   *          Plain text contents of the class
+   * @param className Name of the class to compile.
+   * @param classCode Plain text contents of the class
-    OutputStreamJavaFileManager<JavaFileManager> fileManager = new OutputStreamJavaFileManager<JavaFileManager>(javaCompiler
-        .getStandardFileManager(null, null, null), byteArrayOutputStream);
+    OutputStreamJavaFileManager<JavaFileManager> fileManager =
+        new OutputStreamJavaFileManager<JavaFileManager>(
+            javaCompiler.getStandardFileManager(null, null, null), byteArrayOutputStream);
-    if (! javaCompiler.getTask(null, fileManager, diagnostics, options, null, fileObjects).call()) {
+    if (!javaCompiler.getTask(null, fileManager, diagnostics, options, null, fileObjects).call()) {
-        String err = String.format("Compilation error: Line %d - %s%n", d.getLineNumber(), d.getMessage(null));
+        String err = String.format("Compilation error: Line %d - %s%n", d.getLineNumber(),
+            d.getMessage(null));
-   * @param path
-   *          Path to add
+   * @param path Path to add
-    protected OutputStreamSimpleFileObject(final URI uri, final JavaFileObject.Kind kind, final OutputStream outputStream) {
+    protected OutputStreamSimpleFileObject(final URI uri, final JavaFileObject.Kind kind,
+        final OutputStream outputStream) {
-  private class OutputStreamJavaFileManager<M extends JavaFileManager> extends ForwardingJavaFileManager<M> {
+  private class OutputStreamJavaFileManager<M extends JavaFileManager>
+      extends ForwardingJavaFileManager<M> {
-    public JavaFileObject getJavaFileForOutput(final JavaFileManager.Location location, final String className,
-        final JavaFileObject.Kind kind, final FileObject sibling) {
+    public JavaFileObject getJavaFileForOutput(final JavaFileManager.Location location,
+        final String className, final JavaFileObject.Kind kind, final FileObject sibling) {

UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66