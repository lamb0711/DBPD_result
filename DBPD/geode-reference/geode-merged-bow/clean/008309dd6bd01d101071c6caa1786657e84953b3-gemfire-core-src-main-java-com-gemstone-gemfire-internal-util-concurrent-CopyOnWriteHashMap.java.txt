Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.io.Serializable;
+import java.util.concurrent.ConcurrentMap;
-public class CopyOnWriteHashMap<K,V> extends AbstractMap<K, V> {
+public class CopyOnWriteHashMap<K,V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> , Serializable {
-  
-  
+  @Override
+  public synchronized V putIfAbsent(K key, V value) {
+    V oldValue = map.get(key);
+    if(oldValue == null) {
+      put(key, value);
+      return null;
+    } else {
+      return oldValue;
+    }
+  }
+
+  @Override
+  public synchronized boolean remove(Object key, Object value) {
+    V oldValue = map.get(key);
+    if(oldValue != null && oldValue.equals(value)) {
+      remove(key);
+      return true;
+    }
+    
+    return false;
+  }
+
+  @Override
+  public synchronized boolean replace(K key, V oldValue, V newValue) {
+    V existingValue = map.get(key);
+    if(existingValue != null && existingValue.equals(oldValue)) {
+      put(key, newValue);
+      return true;
+    }
+    return false;
+  }
+
+  @Override
+  public synchronized V replace(K key, V value) {
+    if (map.containsKey(key)) {
+      return put(key, value);
+    } else {
+      return null;
+    }
+  }

INS26 INS26 INS40 INS40 INS74 INS43 INS31 INS31 INS31 INS31 INS43 INS43 INS43 INS42 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS41 INS42 INS42 INS32 INS27 INS32 INS21 INS41 INS42 INS42 INS32 INS27 INS32 INS21 INS41 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS9 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42