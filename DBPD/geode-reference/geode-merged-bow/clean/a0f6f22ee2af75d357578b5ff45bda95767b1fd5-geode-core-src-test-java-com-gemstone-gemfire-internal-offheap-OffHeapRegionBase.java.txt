Merge branch 'develop' into feature/GEODE-17-2

+import java.util.List;
+import com.gemstone.gemfire.internal.cache.LocalRegion;
+import com.gemstone.gemfire.internal.cache.OffHeapRegionEntry;
+import com.gemstone.gemfire.internal.cache.RegionEntry;
+  @Test
+  public void testPersistentChangeFromHeapToOffHeap() {
+    GemFireCacheImpl gfc = createCache(true);
+    Region r = null;
+    final String value = "value big enough to force off-heap storage";
+    try {
+      r = gfc.createRegionFactory(RegionShortcut.LOCAL_PERSISTENT).setOffHeap(false).create("changedFromHeapToOffHeap");
+      r.put("key", value);
+    } finally {
+      closeCache(gfc, false);
+    }
+    gfc = createCache(true);
+    try {
+      r = gfc.createRegionFactory(RegionShortcut.LOCAL_PERSISTENT).setOffHeap(true).create("changedFromHeapToOffHeap");
+      assertEquals(true, r.containsKey("key"));
+      LocalRegion lr = (LocalRegion) r;
+      RegionEntry re = lr.getRegionEntry("key");
+      if (!(re instanceof OffHeapRegionEntry)) {
+        fail("expected re to be instanceof OffHeapRegionEntry but it was a " + re.getClass());
+      }
+      assertEquals(value, r.get("key"));
+    } finally {
+      if (r != null && !r.isDestroyed()) {
+        r.destroyRegion();
+      }
+      closeCache(gfc, false);
+    }
+  }
+
+  @Test
+  public void testPersistentCompressorChange() {
+    GemFireCacheImpl gfc = createCache(true);
+    Region<Object, Object> r = null;
+    String value = "value1";
+    String key = "key";
+
+    try {
+      r = gfc.createRegionFactory(RegionShortcut.LOCAL_PERSISTENT).setOffHeap(true).setCompressor(new SnappyCompressor()).create("region1");
+      r.put(key, value);
+    } finally {
+      closeCache(gfc, false);
+    }
+
+    gfc = createCache(true);
+    try {
+      r = gfc.createRegionFactory(RegionShortcut.LOCAL_PERSISTENT).setOffHeap(true).setCompressor(null).create("region1");
+      assertEquals(true, r.containsKey(key));
+      MemoryAllocatorImpl mai = MemoryAllocatorImpl.getAllocator();
+      List<OffHeapStoredObject> orphans = mai.getLostChunks();
+      if (orphans.size() >0) {
+        fail("expected no orphan detected, but gets orphan size " + orphans.size());
+      }
+      assertEquals(value, r.get(key));
+    } finally {
+      if (r !=null && !r.isDestroyed()) {
+        r.destroyRegion();
+      }
+      closeCache(gfc, false);
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS60 INS60 INS60 INS54 INS21 INS54 INS42 INS60 INS60 INS60 INS60 INS54 INS21 INS54 INS43 INS59 INS43 INS59 INS83 INS43 INS59 INS8 INS8 INS7 INS8 INS8 INS43 INS59 INS74 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS7 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS45 INS21 INS21 INS21 INS42 INS32 INS21 INS21 INS60 INS60 INS25 INS21 INS25 INS21 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS21 INS21 INS42 INS32 INS21 INS21 INS60 INS60 INS25 INS21 INS25 INS21 INS42 INS9 INS7 INS32 INS32 INS42 INS9 INS7 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS32 INS27 INS8 INS32 INS42 INS9 INS42 INS42 INS42 INS7 INS32 INS32 INS42 INS9 INS7 INS32 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS27 INS8 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS9 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS36 INS21 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS9 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS9 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS45 INS62 INS32 INS42 INS42 INS45 INS42 INS33 INS32 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS32 INS42 INS9 INS32 INS42 INS9 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS33 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS32 INS32 INS42 INS9 INS43 INS32 INS42 INS9 INS45 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42