GEODE-8330: Structural Improvements to Versioning

Follow-on to GEODE-8240, this commit eliminates redundancy in 
versioning code and provides a single way to convert a short
to a version and a single way to acquire a known version from
a (possibly unknown) version.
+import java.util.Map;
-import org.apache.geode.cache.IncompatibleVersionException;
+import org.apache.geode.internal.cache.tier.Command;
-import org.apache.geode.internal.serialization.UnsupportedSerializationVersionException;
+import org.apache.geode.internal.serialization.Versioning;
+import org.apache.geode.internal.serialization.VersioningIO;
-      short clientVersionOrdinal = Version.readOrdinalFromInputStream(is);
+      short clientVersionOrdinal = VersioningIO.readOrdinalFromInputStream(is);
-      Version clientVersion = null;
-      try {
-        clientVersion = Version.fromOrdinal(clientVersionOrdinal);
-        if (CommandInitializer.getCommands(clientVersion) == null) {
-          throw new UnsupportedVersionException("Client version {} is not supported");
-        }
-      } catch (UnsupportedSerializationVersionException uve) {
-        // Allows higher version of wan site to connect to server
-        if (isWan) {
-          return currentServerVersion;
+      final Version clientVersion = Versioning.getKnownVersionOrDefault(
+          Versioning.getVersionOrdinal(clientVersionOrdinal), null);
+      final String message;
+      if (clientVersion == null) {
+        message = Version.unsupportedVersionMessage(clientVersionOrdinal);
+      } else {
+        final Map<Integer, Command> commands = CommandInitializer.getCommands(clientVersion);
+        if (commands == null) {
+          message = "Client version {} is not supported";
-          SocketAddress sa = socket.getRemoteSocketAddress();
-          String sInfo = "";
-          if (sa != null) {
-            sInfo = " Client: " + sa.toString() + ".";
-          }
-          throw new UnsupportedVersionException(uve.getMessage() + sInfo);
+          return clientVersion;
-
-      if (!clientVersion.compatibleWith(currentServerVersion)) {
-        throw new IncompatibleVersionException(clientVersion, currentServerVersion);
+      // Allows higher version of wan site to connect to server
+      if (isWan) {
+        return currentServerVersion;
+      } else {
+        SocketAddress sa = socket.getRemoteSocketAddress();
+        String sInfo = "";
+        if (sa != null) {
+          sInfo = " Client: " + sa.toString() + ".";
+        }
+        throw new UnsupportedVersionException(message + sInfo);
-      return clientVersion;

MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS60 INS60 INS25 MOV25 INS83 MOV43 INS59 INS83 INS43 INS59 INS27 INS8 MOV8 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS33 INS21 INS60 INS25 UPD42 INS42 INS42 INS32 INS33 INS7 INS83 INS74 INS59 INS27 INS8 INS8 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS43 INS43 INS43 INS42 MOV32 INS42 INS33 INS21 MOV41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS7 INS42 INS42 INS45 DEL43 DEL42 DEL42 DEL14 DEL53 DEL42 DEL42 DEL32 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL33 DEL27 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL32 DEL38 DEL25