GEODE-1897: Initial refactor of CreateRegionCommand (#956)

* GEODE-1897: Initial refactor of CreateRegionCommand

* GEODE-1897: Add test categories

* GEODE-1897: Add license headers

* GEODE-1897: Add missing test category

* GEODE-1897: Update miscellaneous test failures

- Also updated sanctionedSerializables

* GEODE-1897: Review updates

* GEODE-1897: More review changes

* GEODE-1897: Integrate better with new develop functionality

* GEODE-1897: Impromptu review update

* GEODE-1897: Spotless how do I love thee... let me count the ways

* GEODE-1897: fixing precheckin failures

-import java.util.LinkedHashSet;
+import java.util.stream.Collectors;
-import org.apache.geode.management.internal.cli.CliUtil;
-  private static final long serialVersionUID = -5158224572470173267L;
+  private static final long serialVersionUID = 2204943186081037301L;
-  private final String regionPath;
-  private final RegionShortcut regionShortcut;
-  private final String useAttributesFrom;
-  private final Boolean skipIfExists;
-  private final String keyConstraint;
-  private final String valueConstraint;
+  private String regionPath;
+  private RegionShortcut regionShortcut;
+  private String templateRegion;
+  private boolean skipIfExists;
+  private String keyConstraint;
+  private String valueConstraint;
-  private final boolean isSetStatisticsEnabled;
-  private final RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime;
-  private final RegionFunctionArgs.ExpirationAttrs entryExpirationTTL;
-  private final RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime;
-  private final RegionFunctionArgs.ExpirationAttrs regionExpirationTTL;
-  private final String diskStore;
+  private RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime;
+  private RegionFunctionArgs.ExpirationAttrs entryExpirationTTL;
+  private RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime;
+  private RegionFunctionArgs.ExpirationAttrs regionExpirationTTL;
+  private String diskStore;
-  private final boolean isSetDiskSynchronous;
-  private final boolean isSetEnableAsyncConflation;
-  private final boolean isSetEnableSubscriptionConflation;
-  private final Set<String> cacheListeners;
-  private final String cacheLoader;
-  private final String cacheWriter;
-  private final Set<String> asyncEventQueueIds;
-  private final Set<String> gatewaySenderIds;
+  private Set<String> cacheListeners = Collections.emptySet();
+  private String cacheLoader;
+  private String cacheWriter;
+  private Set<String> asyncEventQueueIds = Collections.emptySet();
+  private Set<String> gatewaySenderIds = Collections.emptySet();
-  private final boolean isSetConcurrencyChecksEnabled;
-  private final boolean isSetCloningEnabled;
-  private final boolean isSetMcastEnabled;
-  private final boolean isSetConcurrencyLevel;
-  private final PartitionArgs partitionArgs;
-  private final Integer evictionMax;
+  private PartitionArgs partitionArgs;
+  private Integer evictionMax;
-  private final boolean isSetCompressor;
-  private final boolean isSetOffHeap;
-  private final boolean isPartitionResolver;
-  private String partitionResolver;
-  public RegionFunctionArgs(String regionPath, RegionShortcut regionShortcut,
-      String useAttributesFrom, boolean skipIfExists, String keyConstraint, String valueConstraint,
-      Boolean statisticsEnabled, RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime,
-      RegionFunctionArgs.ExpirationAttrs entryExpirationTTL,
-      RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime,
-      RegionFunctionArgs.ExpirationAttrs regionExpirationTTL, String diskStore,
-      Boolean diskSynchronous, Boolean enableAsyncConflation, Boolean enableSubscriptionConflation,
-      String[] cacheListeners, String cacheLoader, String cacheWriter, String[] asyncEventQueueIds,
-      String[] gatewaySenderIds, Boolean concurrencyChecksEnabled, Boolean cloningEnabled,
-      Integer concurrencyLevel, String prColocatedWith, Integer prLocalMaxMemory,
-      Long prRecoveryDelay, Integer prRedundantCopies, Long prStartupRecoveryDelay,
-      Long prTotalMaxMemory, Integer prTotalNumBuckets, Integer evictionMax, String compressor,
-      Boolean offHeap, Boolean mcastEnabled, final String partitionResolver) {
+  public RegionFunctionArgs() {
+    this.partitionArgs = new PartitionArgs();
+  }
+
+  public void setRegionPath(String regionPath) {
-    this.regionShortcut = regionShortcut;
-    this.useAttributesFrom = useAttributesFrom;
-    this.skipIfExists = skipIfExists;
-    this.keyConstraint = keyConstraint;
-    this.valueConstraint = valueConstraint;
-    this.evictionMax = evictionMax;
-    this.isSetStatisticsEnabled = statisticsEnabled != null;
-    if (this.isSetStatisticsEnabled) {
-      this.statisticsEnabled = statisticsEnabled;
-    }
-    this.entryExpirationIdleTime = entryExpirationIdleTime;
-    this.entryExpirationTTL = entryExpirationTTL;
-    this.regionExpirationIdleTime = regionExpirationIdleTime;
-    this.regionExpirationTTL = regionExpirationTTL;
-    this.diskStore = diskStore;
-    this.isSetDiskSynchronous = diskSynchronous != null;
-    if (this.isSetDiskSynchronous) {
-      this.diskSynchronous = diskSynchronous;
-    }
-    this.isSetEnableAsyncConflation = enableAsyncConflation != null;
-    if (this.isSetEnableAsyncConflation) {
-      this.enableAsyncConflation = enableAsyncConflation;
-    }
-    this.isSetEnableSubscriptionConflation = enableSubscriptionConflation != null;
-    if (this.isSetEnableSubscriptionConflation) {
-      this.enableSubscriptionConflation = enableSubscriptionConflation;
-    }
-    if (cacheListeners != null) {
-      this.cacheListeners = new LinkedHashSet<>();
-      this.cacheListeners.addAll(Arrays.asList(cacheListeners));
-    } else {
-      this.cacheListeners = null;
-    }
-    this.cacheLoader = cacheLoader;
-    this.cacheWriter = cacheWriter;
-    if (asyncEventQueueIds != null) {
-      this.asyncEventQueueIds = new LinkedHashSet<>();
-      this.asyncEventQueueIds.addAll(Arrays.asList(asyncEventQueueIds));
-    } else {
-      this.asyncEventQueueIds = null;
-    }
-    if (gatewaySenderIds != null) {
-      this.gatewaySenderIds = new LinkedHashSet<>();
-      this.gatewaySenderIds.addAll(Arrays.asList(gatewaySenderIds));
-    } else {
-      this.gatewaySenderIds = null;
-    }
-    this.isSetConcurrencyChecksEnabled = concurrencyChecksEnabled != null;
-    if (this.isSetConcurrencyChecksEnabled) {
-      this.concurrencyChecksEnabled = concurrencyChecksEnabled;
-    }
-    this.isSetCloningEnabled = cloningEnabled != null;
-    if (this.isSetCloningEnabled) {
-      this.cloningEnabled = cloningEnabled;
-    }
-    this.isSetMcastEnabled = mcastEnabled != null;
-    if (isSetMcastEnabled) {
-      this.mcastEnabled = mcastEnabled;
-    }
-    this.isSetConcurrencyLevel = concurrencyLevel != null;
-    if (this.isSetConcurrencyLevel) {
-      this.concurrencyLevel = concurrencyLevel;
-    }
-    this.partitionArgs =
-        new PartitionArgs(prColocatedWith, prLocalMaxMemory, prRecoveryDelay, prRedundantCopies,
-            prStartupRecoveryDelay, prTotalMaxMemory, prTotalNumBuckets, partitionResolver);
+  }
-    this.isSetCompressor = (compressor != null);
-    if (this.isSetCompressor) {
-      this.compressor = compressor;
-    }
-    this.isSetOffHeap = (offHeap != null);
-    if (this.isSetOffHeap) {
-      this.offHeap = offHeap;
-    }
-    this.isPartitionResolver = (partitionResolver != null);
-    if (this.isPartitionResolver) {
-      this.partitionResolver = partitionResolver;
+  public void setTemplateRegion(String templateRegion) {
+    this.templateRegion = templateRegion;
+  }
+
+  public void setRegionShortcut(RegionShortcut regionShortcut) {
+    this.regionShortcut = regionShortcut;
+  }
+
+
+  public void setSkipIfExists(boolean skipIfExists) {
+    this.skipIfExists = skipIfExists;
+  }
+
+  public void setKeyConstraint(String keyConstraint) {
+    this.keyConstraint = keyConstraint;
+  }
+
+  public void setValueConstraint(String valueConstraint) {
+    this.valueConstraint = valueConstraint;
+  }
+
+  public void setStatisticsEnabled(Boolean statisticsEnabled) {
+    this.statisticsEnabled = statisticsEnabled;
+  }
+
+  public void setEntryExpirationIdleTime(Integer timeout, String action) {
+    if (timeout != null) {
+      this.entryExpirationIdleTime = new ExpirationAttrs(
+          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_IDLE, timeout, action);
-  // Constructor to be used for supplied region attributes
-  public RegionFunctionArgs(String regionPath, String useAttributesFrom, boolean skipIfExists,
-      String keyConstraint, String valueConstraint, Boolean statisticsEnabled,
-      RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime,
-      RegionFunctionArgs.ExpirationAttrs entryExpirationTTL,
-      RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime,
-      RegionFunctionArgs.ExpirationAttrs regionExpirationTTL, String diskStore,
-      Boolean diskSynchronous, Boolean enableAsyncConflation, Boolean enableSubscriptionConflation,
-      String[] cacheListeners, String cacheLoader, String cacheWriter, String[] asyncEventQueueIds,
-      String[] gatewaySenderIds, Boolean concurrencyChecksEnabled, Boolean cloningEnabled,
-      Integer concurrencyLevel, String prColocatedWith, Integer prLocalMaxMemory,
+  public void setEntryExpirationTTL(Integer timeout, String action) {
+    if (timeout != null) {
+      this.entryExpirationTTL = new ExpirationAttrs(
+          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_TTL, timeout, action);
+    }
+  }
+
+  public void setRegionExpirationIdleTime(Integer timeout, String action) {
+    if (timeout != null) {
+      this.regionExpirationIdleTime = new ExpirationAttrs(
+          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_IDLE, timeout, action);
+    }
+  }
+
+  public void setRegionExpirationTTL(Integer timeout, String action) {
+    if (timeout != null) {
+      this.regionExpirationTTL = new ExpirationAttrs(
+          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_TTL, timeout, action);
+    }
+  }
+
+  public void setDiskStore(String diskStore) {
+    this.diskStore = diskStore;
+  }
+
+  public void setDiskSynchronous(Boolean diskSynchronous) {
+    this.diskSynchronous = diskSynchronous;
+  }
+
+  public void setEnableAsyncConflation(Boolean enableAsyncConflation) {
+    this.enableAsyncConflation = enableAsyncConflation;
+  }
+
+  public void setEnableSubscriptionConflation(Boolean enableSubscriptionConflation) {
+    this.enableSubscriptionConflation = enableSubscriptionConflation;
+  }
+
+  public void setCacheListeners(String[] cacheListeners) {
+    if (cacheListeners != null) {
+      this.cacheListeners = Arrays.stream(cacheListeners).collect(Collectors.toSet());
+    }
+  }
+
+  public void setCacheLoader(String cacheLoader) {
+    this.cacheLoader = cacheLoader;
+  }
+
+  public void setCacheWriter(String cacheWriter) {
+    this.cacheWriter = cacheWriter;
+  }
+
+  public void setAsyncEventQueueIds(String[] asyncEventQueueIds) {
+    if (asyncEventQueueIds != null) {
+      this.asyncEventQueueIds = Arrays.stream(asyncEventQueueIds).collect(Collectors.toSet());
+    }
+  }
+
+  public void setGatewaySenderIds(String[] gatewaySenderIds) {
+    if (gatewaySenderIds != null) {
+      this.gatewaySenderIds = Arrays.stream(gatewaySenderIds).collect(Collectors.toSet());
+    }
+  }
+
+  public void setConcurrencyChecksEnabled(Boolean concurrencyChecksEnabled) {
+    this.concurrencyChecksEnabled = concurrencyChecksEnabled;
+  }
+
+  public void setCloningEnabled(Boolean cloningEnabled) {
+    this.cloningEnabled = cloningEnabled;
+  }
+
+  public void setMcastEnabled(Boolean mcastEnabled) {
+    this.mcastEnabled = mcastEnabled;
+  }
+
+  public void setConcurrencyLevel(Integer concurrencyLevel) {
+    this.concurrencyLevel = concurrencyLevel;
+  }
+
+  public void setPartitionArgs(String prColocatedWith, Integer prLocalMaxMemory,
-      Long prTotalMaxMemory, Integer prTotalNumBuckets, Boolean offHeap, Boolean mcastEnabled,
-      RegionAttributes<?, ?> regionAttributes, final String partitionResolver) {
-    this(regionPath, null, useAttributesFrom, skipIfExists, keyConstraint, valueConstraint,
-        statisticsEnabled, entryExpirationIdleTime, entryExpirationTTL, regionExpirationIdleTime,
-        regionExpirationTTL, diskStore, diskSynchronous, enableAsyncConflation,
-        enableSubscriptionConflation, cacheListeners, cacheLoader, cacheWriter, asyncEventQueueIds,
-        gatewaySenderIds, concurrencyChecksEnabled, cloningEnabled, concurrencyLevel,
-        prColocatedWith, prLocalMaxMemory, prRecoveryDelay, prRedundantCopies,
-        prStartupRecoveryDelay, prTotalMaxMemory, prTotalNumBuckets, null, null, offHeap,
-        mcastEnabled, partitionResolver);
+      Long prTotalMaxMemory, Integer prTotalNumBuckets, String partitionResolver) {
+    partitionArgs.setPrColocatedWith(prColocatedWith);
+    partitionArgs.setPrLocalMaxMemory(prLocalMaxMemory);
+    partitionArgs.setPrRecoveryDelay(prRecoveryDelay);
+    partitionArgs.setPrRedundantCopies(prRedundantCopies);
+    partitionArgs.setPrStartupRecoveryDelay(prStartupRecoveryDelay);
+    partitionArgs.setPrTotalMaxMemory(prTotalMaxMemory);
+    partitionArgs.setPrTotalNumBuckets(prTotalNumBuckets);
+    partitionArgs.setPartitionResolver(partitionResolver);
+  }
+
+  public void setEvictionMax(Integer evictionMax) {
+    this.evictionMax = evictionMax;
+  }
+
+  public void setCompressor(String compressor) {
+    this.compressor = compressor;
+  }
+
+  public void setOffHeap(Boolean offHeap) {
+    this.offHeap = offHeap;
+  }
+
+  public void setRegionAttributes(RegionAttributes<?, ?> regionAttributes) {
-   * @return the useAttributesFrom
+   * @return the templateRegion
-  public String getUseAttributesFrom() {
-    return this.useAttributesFrom;
-  }
-
-  /**
-   * @return true if need to use specified region attributes
-   */
-  public Boolean isSetUseAttributesFrom() {
-    return this.regionShortcut == null && this.useAttributesFrom != null
-        && this.regionAttributes != null;
+  public String getTemplateRegion() {
+    return this.templateRegion;
-   * @return the isSetStatisticsEnabled
-   */
-  public Boolean isSetStatisticsEnabled() {
-    return this.isSetStatisticsEnabled;
-  }
-
-  /**
-  /**
-   * @return the isSetDiskSynchronous
-   */
-  public Boolean isSetDiskSynchronous() {
-    return this.isSetDiskSynchronous;
-  }
-
-  public Boolean isSetOffHeap() {
-    return this.isSetOffHeap;
-  }
-
-   * @return the isSetEnableAsyncConflation
-   */
-  public Boolean isSetEnableAsyncConflation() {
-    return this.isSetEnableAsyncConflation;
-  }
-
-  /**
-   * @return the isSetEnableSubscriptionConflation
-   */
-  public Boolean isSetEnableSubscriptionConflation() {
-    return this.isSetEnableSubscriptionConflation;
-  }
-
-  /**
-   * @return the PartitionResolver
-   */
-  public String getPartitionResolver() {
-    return this.partitionResolver;
-  }
-
-  /**
-   * @return True if Partition Resolver is set otherwise False
-   */
-  public Boolean isPartitionResolverSet() {
-    return this.isPartitionResolver;
-  }
-
-  /**
-   * @return the isSetConcurrencyChecksEnabled
-   */
-  public Boolean isSetConcurrencyChecksEnabled() {
-    return this.isSetConcurrencyChecksEnabled;
-  }
-
-  /**
-   * @return the isSetCloningEnabled
-   */
-  public Boolean isSetCloningEnabled() {
-    return this.isSetCloningEnabled;
-  }
-
-  /**
-   * @return the isSetCloningEnabled
-   */
-  public Boolean isSetMcastEnabled() {
-    return this.isSetMcastEnabled;
-  }
-
-  /**
-  /**
-   * @return the isSetConcurrencyLevel
-   */
-  public Boolean isSetConcurrencyLevel() {
-    return this.isSetConcurrencyLevel;
-  }
-
-    return this.partitionArgs != null && this.partitionArgs.hasPartitionAttributes();
+    return this.partitionArgs.hasPartitionAttributes();
-   * @return the isSetCompressor.
-   */
-  public boolean isSetCompressor() {
-    return this.isSetCompressor;
-  }
-
-  /**
-    private ExpirationFor type;
-    private Integer time;
-    private ExpirationAction action;
+    private final ExpirationFor type;
+    private final ExpirationAttributes timeAndAction;
-      this.time = time;
-      if (action != null) {
-        this.action = getExpirationAction(action);
+      if (time != null) {
+        this.timeAndAction = new ExpirationAttributes(time, getExpirationAction(action));
+      } else {
+        this.timeAndAction = new ExpirationAttributes(0, getExpirationAction(action));
-      ExpirationAttributes expirationAttr;
-      if (action != null) {
-        expirationAttr = new ExpirationAttributes(time, action);
-      } else {
-        expirationAttr = new ExpirationAttributes(time);
-      }
-      return expirationAttr;
+      return timeAndAction;
-      return time;
+      return timeAndAction.getTimeout();
-      return action;
+      return timeAndAction.getAction();
-      builder.append(time);
+      builder.append(timeAndAction.getTimeout());
-      builder.append(action);
+      builder.append(timeAndAction.getAction());
-    private final String prColocatedWith;
-    private int prLocalMaxMemory;
-    private final boolean isSetPRLocalMaxMemory;
-    private long prRecoveryDelay;
-    private final boolean isSetPRRecoveryDelay;
-    private int prRedundantCopies;
-    private final boolean isSetPRRedundantCopies;
-    private long prStartupRecoveryDelay;
-    private final boolean isSetPRStartupRecoveryDelay;
-    private long prTotalMaxMemory;
-    private final boolean isSetPRTotalMaxMemory;
-    private int prTotalNumBuckets;
-    private final boolean isSetPRTotalNumBuckets;
-    private final boolean isPartitionResolver;
+    private String prColocatedWith;
+    private Integer prLocalMaxMemory;
+    private Long prRecoveryDelay;
+    private Integer prRedundantCopies;
+    private Long prStartupRecoveryDelay;
+    private Long prTotalMaxMemory;
+    private Integer prTotalNumBuckets;
-    private boolean hasPartitionAttributes;
-    private final Set<String> userSpecifiedPartitionAttributes = new HashSet<>();
-
-    public PartitionArgs(String prColocatedWith, Integer prLocalMaxMemory, Long prRecoveryDelay,
-        Integer prRedundantCopies, Long prStartupRecoveryDelay, Long prTotalMaxMemory,
-        Integer prTotalNumBuckets, String partitionResolver) {
-      this.prColocatedWith = prColocatedWith;
-      if (this.prColocatedWith != null) {
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__COLOCATEDWITH);
-      }
-      this.isSetPRLocalMaxMemory = prLocalMaxMemory != null;
-      if (this.isSetPRLocalMaxMemory) {
-        this.prLocalMaxMemory = prLocalMaxMemory;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__LOCALMAXMEMORY);
-      }
-      this.isSetPRRecoveryDelay = prRecoveryDelay != null;
-      if (this.isSetPRRecoveryDelay) {
-        this.prRecoveryDelay = prRecoveryDelay;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__RECOVERYDELAY);
-      }
-      this.isSetPRRedundantCopies = prRedundantCopies != null;
-      if (this.isSetPRRedundantCopies) {
-        this.prRedundantCopies = prRedundantCopies;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__REDUNDANTCOPIES);
-      }
-      this.isSetPRStartupRecoveryDelay = prStartupRecoveryDelay != null;
-      if (this.isSetPRStartupRecoveryDelay) {
-        this.prStartupRecoveryDelay = prStartupRecoveryDelay;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__STARTUPRECOVERYDDELAY);
-      }
-      this.isSetPRTotalMaxMemory = prTotalMaxMemory != null;
-      if (this.isSetPRTotalMaxMemory) {
-        this.prTotalMaxMemory = prTotalMaxMemory;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__TOTALMAXMEMORY);
-      }
-      this.isSetPRTotalNumBuckets = prTotalNumBuckets != null;
-      if (this.isSetPRTotalNumBuckets) {
-        this.prTotalNumBuckets = prTotalNumBuckets;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__TOTALNUMBUCKETS);
-      }
-      this.isPartitionResolver = partitionResolver != null;
-      if (this.isPartitionResolver) {
-        this.partitionResolver = partitionResolver;
-        this.hasPartitionAttributes = true;
-        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__PARTITION_RESOLVER);
-      }
-
-    }
+    public PartitionArgs() {}
-      return hasPartitionAttributes;
+      return !getUserSpecifiedPartitionAttributes().isEmpty();
-    public String getUserSpecifiedPartitionAttributes() {
-      return CliUtil.collectionToString(userSpecifiedPartitionAttributes, -1);
+    public Set<String> getUserSpecifiedPartitionAttributes() {
+      Set<String> userSpecifiedPartitionAttributes = new HashSet<>();
+
+      if (this.prColocatedWith != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__COLOCATEDWITH);
+      }
+      if (this.prLocalMaxMemory != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__LOCALMAXMEMORY);
+      }
+      if (this.prRecoveryDelay != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__RECOVERYDELAY);
+      }
+      if (this.prRedundantCopies != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__REDUNDANTCOPIES);
+      }
+      if (this.prStartupRecoveryDelay != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__STARTUPRECOVERYDDELAY);
+      }
+      if (this.prTotalMaxMemory != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__TOTALMAXMEMORY);
+      }
+      if (this.prTotalNumBuckets != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__TOTALNUMBUCKETS);
+      }
+      if (this.partitionResolver != null) {
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+      }
+
+      return userSpecifiedPartitionAttributes;
+    }
+
+    public void setPrColocatedWith(String prColocatedWith) {
+      if (prColocatedWith != null) {
+        this.prColocatedWith = prColocatedWith;
+      }
+    }
+
+    public void setPrLocalMaxMemory(Integer prLocalMaxMemory) {
+      if (prLocalMaxMemory != null) {
+        this.prLocalMaxMemory = prLocalMaxMemory;
+      }
+    }
+
+    public void setPrRecoveryDelay(Long prRecoveryDelay) {
+      if (prRecoveryDelay != null) {
+        this.prRecoveryDelay = prRecoveryDelay;
+      }
+    }
+
+    public void setPrRedundantCopies(Integer prRedundantCopies) {
+      if (prRedundantCopies != null) {
+        this.prRedundantCopies = prRedundantCopies;
+      }
+    }
+
+    public void setPrStartupRecoveryDelay(Long prStartupRecoveryDelay) {
+      if (prStartupRecoveryDelay != null) {
+        this.prStartupRecoveryDelay = prStartupRecoveryDelay;
+      }
+    }
+
+    public void setPrTotalMaxMemory(Long prTotalMaxMemory) {
+      if (prTotalMaxMemory != null) {
+        this.prTotalMaxMemory = prTotalMaxMemory;
+      }
+    }
+
+    public void setPrTotalNumBuckets(Integer prTotalNumBuckets) {
+      if (prTotalNumBuckets != null) {
+        this.prTotalNumBuckets = prTotalNumBuckets;
+      }
+    }
+
+    public void setPartitionResolver(String partitionResolver) {
+      if (partitionResolver != null) {
+        this.partitionResolver = partitionResolver;
+      }
-     * @return the isSetPRLocalMaxMemory
-     */
-    public Boolean isSetPRLocalMaxMemory() {
-      return isSetPRLocalMaxMemory;
-    }
-
-    /**
-     * @return the isSetPRRecoveryDelay
-     */
-    public Boolean isSetPRRecoveryDelay() {
-      return isSetPRRecoveryDelay;
-    }
-
-    /**
-     * @return the isSetPRRedundantCopies
-     */
-    public Boolean isSetPRRedundantCopies() {
-      return isSetPRRedundantCopies;
-    }
-
-    /**
-     * @return the isSetPRStartupRecoveryDelay
-     */
-    public Boolean isSetPRStartupRecoveryDelay() {
-      return isSetPRStartupRecoveryDelay;
-    }
-
-    /**
-     * @return the isSetPRTotalMaxMemory
-     */
-    public Boolean isSetPRTotalMaxMemory() {
-      return isSetPRTotalMaxMemory;
-    }
-
-    /**
-     * @return the isSetPRTotalNumBuckets
+     * @return the partition resolver
-    public Boolean isSetPRTotalNumBuckets() {
-      return isSetPRTotalNumBuckets;
+    public String getPartitionResolver() {
+      return partitionResolver;

MOV26 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 MOV31 MOV31 MOV31 MOV43 MOV59 INS74 INS83 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV8 INS39 INS42 MOV83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 MOV44 MOV8 INS39 UPD42 MOV44 MOV8 MOV83 INS39 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS39 INS42 MOV44 INS39 UPD42 MOV44 MOV8 INS39 INS42 MOV44 MOV8 INS39 INS42 MOV44 MOV43 UPD42 INS23 INS31 INS31 INS31 INS31 INS34 UPD42 INS43 INS43 INS42 INS32 INS32 INS42 INS32 MOV21 MOV21 UPD42 INS21 MOV21 MOV21 MOV21 MOV21 UPD42 INS43 UPD42 INS25 UPD43 UPD42 UPD42 INS25 UPD42 UPD42 INS25 UPD42 UPD42 INS25 MOV21 INS25 MOV21 MOV21 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV21 MOV21 INS83 MOV83 UPD83 MOV83 MOV43 MOV59 INS43 MOV59 INS43 MOV59 INS43 MOV59 INS43 MOV59 INS43 MOV59 MOV43 INS83 INS42 INS8 MOV29 INS83 MOV43 INS42 INS8 MOV29 MOV74 UPD42 INS39 UPD42 MOV44 INS39 UPD42 MOV44 INS39 UPD42 MOV44 MOV83 INS39 INS42 MOV44 INS8 INS83 INS39 UPD42 MOV42 MOV44 MOV8 INS39 UPD42 MOV44 INS39 UPD42 MOV44 INS39 INS42 INS44 MOV43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS27 MOV8 UPD42 INS27 INS8 INS27 INS8 INS27 INS8 MOV27 INS8 MOV27 INS8 MOV27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD66 MOV32 UPD42 INS25 INS42 INS42 INS42 INS42 INS42 INS41 INS60 INS25 INS41 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS43 INS42 MOV25 INS22 INS42 UPD42 MOV42 MOV33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS42 INS33 MOV21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS8 MOV8 UPD42 INS32 INS32 INS38 MOV74 MOV59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS27 INS8 MOV27 MOV8 MOV27 MOV8 MOV27 MOV8 MOV27 MOV8 MOV27 MOV8 MOV27 MOV8 UPD42 MOV42 MOV27 UPD66 UPD42 INS52 INS42 INS7 INS7 INS7 INS42 INS33 MOV21 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS22 INS33 MOV21 INS22 INS33 MOV21 INS22 INS33 MOV21 INS22 INS33 MOV21 INS22 INS33 MOV21 INS22 INS33 MOV21 MOV22 MOV33 MOV21 INS42 INS33 MOV21 INS14 INS14 INS14 INS14 MOV22 INS32 MOV22 INS32 MOV22 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS32 INS42 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 INS43 INS40 INS42 INS42 INS43 INS40 INS42 INS42 INS43 INS40 INS42 INS42 INS43 INS40 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV43 INS42 INS32 UPD42 MOV43 INS34 MOV32 INS42 INS42 DEL40 DEL26 DEL34 DEL38 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL42 DEL59 DEL83 DEL83 DEL42 DEL43 DEL23 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL42 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL36 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL36 DEL7 DEL21 DEL52 DEL42 DEL22 DEL25 DEL52 DEL42 DEL22 DEL36 DEL7 DEL21 DEL42 DEL42 DEL83 DEL42 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL41 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL66 DEL65 DEL29 DEL42 DEL43 DEL52 DEL42 DEL22 DEL41 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL33 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL39 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL33 DEL27 DEL27 DEL42 DEL59 DEL23 DEL42 DEL43 DEL23 DEL42 DEL42 DEL33 DEL27 DEL25 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL83 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL39 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL23 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL42 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL41 DEL66 DEL65 DEL29 DEL42 DEL43 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL41 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL41 DEL66 DEL65 DEL29 DEL42 DEL43 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL41 DEL66 DEL65 DEL29 DEL42 DEL43 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL41 DEL66 DEL65 DEL29 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL41 DEL66 DEL65 DEL29 DEL42 DEL43 DEL31 DEL42 DEL43