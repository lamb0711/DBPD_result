GEODE-6269: Extract StatisticsRegistry from IDS (#3068)

Extract StatisticsRegistry from InternalDistributedSystem.

Exclude StatisticsRegistry from entry sizing in ReflectionBasedAutoSerializer.

-import org.apache.geode.internal.OSProcess;
-  private final StatisticsManager dSystem;
+  private final StatisticsManager statisticsManager;
-   * @param system The distributed system that determines whether or not these statistics are stored
-   *        (and collected) in GemFire shared memory or in the local VM
+   * @param statisticsManager The statistics manager that is creating this instance
-      boolean atomicIncrements, int osStatFlags, StatisticsManager system) {
-    super(type, calcTextId(system, textId), calcNumericId(system, numericId), uniqueId,
+      boolean atomicIncrements, int osStatFlags, StatisticsManager statisticsManager) {
+    super(type, textId, numericId, uniqueId,
-    this.dSystem = system;
+    this.statisticsManager = statisticsManager;
-  ////////////////////// Static Methods //////////////////////
-
-  private static long calcNumericId(StatisticsManager system, long userValue) {
-    if (userValue != 0) {
-      return userValue;
-    } else {
-      long result = OSProcess.getId(); // fix for bug 30239
-      if (result == 0) {
-        if (system != null) {
-          result = system.getId();
-        }
-      }
-      return result;
-    }
+  /**
+   * Creates a new non-atomic statistics instance of the given type
+   *
+   * @param type A description of the statistics
+   * @param textId Text that identifies this statistic when it is monitored
+   * @param numericId A number that displayed when this statistic is monitored
+   * @param uniqueId A number that uniquely identifies this instance
+   *        increments a statistic, then a <code>false</code> value may yield better performance.
+   * @param osStatFlags Non-zero if stats require system calls to collect them; for internal use
+   *        only
+   * @param statisticsManager The distributed system that determines whether or not these statistics
+   *        are stored
+   *        (and collected) in GemFire shared memory or in the local VM
+   */
+  public static Statistics createNonAtomic(StatisticsType type, String textId, long numericId,
+      long uniqueId, int osStatFlags, StatisticsManager statisticsManager) {
+    return new LocalStatisticsImpl(type, textId, numericId, uniqueId, false, osStatFlags,
+        statisticsManager);
-  private static String calcTextId(StatisticsManager system, String userValue) {
-    if (userValue != null && !userValue.equals("")) {
-      return userValue;
-    } else {
-      if (system != null) {
-        return system.getName();
-      } else {
-        return "";
-      }
-    }
-  }
-
-  ////////////////////// Instance Methods //////////////////////
-
-    if (this.dSystem != null) {
-      dSystem.destroyStatistics(this);
+    if (this.statisticsManager != null) {
+      statisticsManager.destroyStatistics(this);

INS31 INS29 UPD83 MOV83 MOV83 UPD43 MOV43 UPD42 MOV42 INS44 MOV44 INS44 INS44 INS44 MOV44 MOV8 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 INS43 INS42 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 UPD42 INS41 UPD42 UPD66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS14 UPD42 INS43 INS42 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 INS42 UPD42 UPD42 DEL40 DEL26 DEL66 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL38 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL45 DEL41 DEL8 DEL25 DEL8 DEL25 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL41 DEL8 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL31