Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Note that the entryKey and keySet of this map are unmodifable.
- * Should be easy to make them modifiable at a future time.
+ * Note that the entryKey and keySet of this map are unmodifable. Should be easy to make them
+ * modifiable at a future time.
-public class CopyOnWriteHashMap<K,V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> , Serializable {
-  private volatile Map<K,V> map = Collections.<K,V>emptyMap();
+public class CopyOnWriteHashMap<K, V> extends AbstractMap<K, V>
+    implements ConcurrentMap<K, V>, Serializable {
+  private volatile Map<K, V> map = Collections.<K, V>emptyMap();
-    
+
-  
+
-  
+
-  
+
-
-    CopyOnWriteHashMap<K, V>clone = new CopyOnWriteHashMap<K, V>();
+    CopyOnWriteHashMap<K, V> clone = new CopyOnWriteHashMap<K, V>();
-    if(oldValue == null) {
+    if (oldValue == null) {
-    if(oldValue != null && oldValue.equals(value)) {
+    if (oldValue != null && oldValue.equals(value)) {
-    
+
-    if(existingValue != null && existingValue.equals(oldValue)) {
+    if (existingValue != null && existingValue.equals(oldValue)) {

UPD66 UPD66