GEODE-1792: Changed protocols and ciphers to be comma separated
Make ssl-ciphers and ssl-protocols comma separated properties. The legacy *-ssl-ciphers and
*-ssl-protocols still use space separated.

+import com.gemstone.gemfire.management.internal.SSLUtil;
-  private String clusterSSLProtocols = DEFAULT_SSL_PROTOCOLS;
+  private String[] clusterSSLProtocols = new String[] { DEFAULT_SSL_PROTOCOLS };
-  private String clusterSSLCiphers = DEFAULT_SSL_CIPHERS;
+  private String[] clusterSSLCiphers = new String[] { DEFAULT_SSL_CIPHERS };
-  private String jmxManagerSslProtocols = DEFAULT_JMX_MANAGER_SSL_PROTOCOLS;
+  private String[] jmxManagerSslProtocols = new String[] { DEFAULT_JMX_MANAGER_SSL_PROTOCOLS };
-  private String jmxManagerSslCiphers = DEFAULT_JMX_MANAGER_SSL_CIPHERS;
+  private String[] jmxManagerSslCiphers = new String[] { DEFAULT_JMX_MANAGER_SSL_CIPHERS };
-  private String serverSslProtocols = DEFAULT_SERVER_SSL_PROTOCOLS;
+  private String[] serverSslProtocols = new String[] { DEFAULT_SERVER_SSL_PROTOCOLS };
-  private String serverSslCiphers = DEFAULT_SERVER_SSL_CIPHERS;
+  private String[] serverSslCiphers = new String[] { DEFAULT_SERVER_SSL_CIPHERS };
-  private String gatewaySslProtocols = DEFAULT_GATEWAY_SSL_PROTOCOLS;
+  private String[] gatewaySslProtocols = new String[] { DEFAULT_GATEWAY_SSL_PROTOCOLS };
-  private String gatewaySslCiphers = DEFAULT_GATEWAY_SSL_CIPHERS;
+  private String[] gatewaySslCiphers = new String[] { DEFAULT_GATEWAY_SSL_CIPHERS };
-  private String httpServiceSSLProtocols = DEFAULT_HTTP_SERVICE_SSL_PROTOCOLS;
+  private String[] httpServiceSSLProtocols = new String[] { DEFAULT_HTTP_SERVICE_SSL_PROTOCOLS };
-  private String httpServiceSSLCiphers = DEFAULT_HTTP_SERVICE_SSL_CIPHERS;
+  private String[] httpServiceSSLCiphers = new String[] { DEFAULT_HTTP_SERVICE_SSL_CIPHERS };
-  private String sslProtocols = DEFAULT_SSL_PROTOCOLS;
-  private String sslCiphers = DEFAULT_SSL_CIPHERS;
+  private String[] sslProtocols = new String[] { DEFAULT_SSL_PROTOCOLS };
+  private String[] sslCiphers = new String[] { DEFAULT_SSL_CIPHERS };
-      if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string properties
-        this.setAttribute(propName, ((String) propVal).trim(), this.sourceMap.get(propName));
+      if (isLegacySSLCipherOrProtocol(propName)) {
+        propVal = SSLUtil.stringToArray((String) propVal);
+        setAttributeObject(propName, propVal, this.sourceMap.get(propName));
+      } else {
+        if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string properties
+          this.setAttribute(propName, ((String) propVal).trim(), this.sourceMap.get(propName));
+        }
+  private boolean isLegacySSLCipherOrProtocol(final String propName) {
+    if (propName.contains("-ciphers") || propName.contains("-protocols")) {
+      if (!ConfigurationProperties.SSL_CIPHERS.equals(propName) && !ConfigurationProperties.SSL_PROTOCOLS.equals(propName)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
-  public String getClusterSSLProtocols() {
+  public String[] getClusterSSLProtocols() {
-  public String getClusterSSLCiphers() {
+  public String[] getClusterSSLCiphers() {
-  public void setClusterSSLProtocols(String value) {
-    this.clusterSSLProtocols = (String) value;
+  public void setClusterSSLProtocols(String[] value) {
+    this.clusterSSLProtocols = value;
-  public void setClusterSSLCiphers(String value) {
-    this.clusterSSLCiphers = (String) value;
+  public void setClusterSSLCiphers(String[] value) {
+    this.clusterSSLCiphers = value;
-  public String getJmxManagerSSLProtocols() {
+  public String[] getJmxManagerSSLProtocols() {
-  public void setJmxManagerSSLProtocols(String protocols) {
+  public void setJmxManagerSSLProtocols(String[] protocols) {
-  public String getJmxManagerSSLCiphers() {
+  public String[] getJmxManagerSSLCiphers() {
-  public void setJmxManagerSSLCiphers(String ciphers) {
+  public void setJmxManagerSSLCiphers(String[] ciphers) {
-  public String getSSLProtocols() {
+  public String[] getSSLProtocols() {
-  public void setSSLProtocols(final String sslProtocols) {
+  public void setSSLProtocols(final String[] sslProtocols) {
-  public String getSSLCiphers() {
+  public String[] getSSLCiphers() {
-  public void setSSLCiphers(final String sslCiphers) {
+  public void setSSLCiphers(final String[] sslCiphers) {
-  public String getServerSSLProtocols() {
+  public String[] getServerSSLProtocols() {
-  public void setServerSSLProtocols(String protocols) {
-    this.serverSslProtocols = (String) protocols;
+  public void setServerSSLProtocols(String[] protocols) {
+    this.serverSslProtocols = protocols;
-  public String getServerSSLCiphers() {
+  public String[] getServerSSLCiphers() {
-  public void setServerSSLCiphers(String ciphers) {
-    this.serverSslCiphers = (String) ciphers;
+  public void setServerSSLCiphers(String[] ciphers) {
+    this.serverSslCiphers = ciphers;
-  public String getGatewaySSLProtocols() {
+  public String[] getGatewaySSLProtocols() {
-  public void setGatewaySSLProtocols(String protocols) {
-    this.gatewaySslProtocols = (String) protocols;
+  public void setGatewaySSLProtocols(String[] protocols) {
+    this.gatewaySslProtocols = protocols;
-  public String getGatewaySSLCiphers() {
+  public String[] getGatewaySSLCiphers() {
-  public void setGatewaySSLCiphers(String ciphers) {
-    this.gatewaySslCiphers = (String) ciphers;
+  public void setGatewaySSLCiphers(String[] ciphers) {
+    this.gatewaySslCiphers = ciphers;
-  public String getHttpServiceSSLProtocols() {
+  public String[] getHttpServiceSSLProtocols() {
-  public void setHttpServiceSSLProtocols(String httpServiceSSLProtocols) {
+  public void setHttpServiceSSLProtocols(String[] httpServiceSSLProtocols) {
-  public String getHttpServiceSSLCiphers() {
+  public String[] getHttpServiceSSLCiphers() {
-  public void setHttpServiceSSLCiphers(String httpServiceSSLCiphers) {
+  public void setHttpServiceSSLCiphers(String[] httpServiceSSLCiphers) {

INS26 INS40 INS31 INS5 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 MOV78 INS5 INS5 INS5 INS83 INS39 INS42 INS44 INS8 INS5 INS5 INS5 INS5 INS5 INS5 INS5 MOV44 INS5 MOV44 INS5 MOV44 INS5 MOV44 INS5 MOV44 INS5 MOV43 INS85 INS3 INS43 INS85 INS3 MOV43 INS85 INS3 INS43 INS85 INS3 MOV43 INS85 INS3 INS43 INS85 INS3 MOV43 INS85 INS3 MOV43 INS85 INS3 INS43 INS85 INS3 MOV43 INS85 INS3 MOV43 INS85 INS3 MOV43 INS85 INS3 INS83 MOV43 INS42 INS25 INS41 MOV43 INS85 MOV43 INS85 INS5 INS5 MOV43 INS85 INS5 MOV43 INS85 INS5 MOV43 INS85 INS5 MOV43 INS85 INS5 MOV43 INS85 INS5 UPD42 MOV43 INS85 INS5 UPD42 MOV43 INS85 INS5 UPD42 MOV43 INS85 INS5 UPD42 MOV43 INS85 INS5 UPD42 MOV43 INS85 INS5 INS5 INS4 INS42 INS5 INS4 INS5 INS4 INS42 INS5 INS4 INS5 INS4 INS42 INS5 INS4 INS5 INS4 INS5 INS4 INS42 INS5 INS4 INS5 INS4 INS5 INS4 INS5 INS4 INS27 INS8 INS9 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 MOV43 INS85 INS42 INS43 INS85 INS42 MOV43 INS85 INS42 INS43 INS85 INS42 MOV43 INS85 INS42 MOV43 INS85 INS42 INS43 INS85 INS42 MOV43 INS85 INS42 INS43 INS85 INS42 MOV43 INS85 INS42 MOV43 INS85 INS42 MOV43 INS85 INS42 INS25 INS32 INS32 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS27 INS8 INS42 INS42 INS21 INS21 MOV25 INS38 INS38 INS41 INS7 INS32 INS32 INS32 INS9 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS11 INS22 INS42 INS42 MOV43 INS42 INS52 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL11 DEL42 DEL11 DEL42 DEL11 DEL42 DEL11 DEL42 DEL11 DEL42 DEL11