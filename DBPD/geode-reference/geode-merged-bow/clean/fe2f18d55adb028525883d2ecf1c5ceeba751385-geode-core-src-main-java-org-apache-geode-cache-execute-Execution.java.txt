GEODE-265 : Removing deprecated API's from Execution interface.
In addition to execute method variants removed withArgs method which is deprecated as well.

-   * Specifies the user data passed to the function when it is executed. The function can retrieve
-   * these arguments using {@link FunctionContext#getArguments()}
-   * 
-   * @param args user data passed to the function execution
-   * @return an Execution with args
-   * @throws IllegalArgumentException if the input parameter is null
-   * @since GemFire 6.0
-   * @deprecated use {@link #setArguments(Object)} instead
-   * 
-   */
-  public Execution<IN, OUT, AGG> withArgs(IN args);
-
-  /**
-
-  /**
-   * Executes the function using its {@linkplain Function#getId() id}
-   * <p>
-   * {@link Function#execute(FunctionContext)} is called on the de-serialized instance on the
-   * executing member. Function should be registered on the executing member using
-   * {@link FunctionService#registerFunction(Function)} method before calling this method.
-   * 
-   * As of 6.6, this is deprecated, since users can pass different value for the hasResult parameter
-   * that than the boolean value returned from {@link Function#hasResult()}.
-   * 
-   * @param functionId the {@link Function#getId()} of the function
-   * @param hasResult Whether the function returns any result
-   * @throws LowMemoryException if the {@link Function#optimizeForWrite()} returns true and there is
-   *         a low memory condition
-   * @return ResultCollector to retrieve the results received. This is different object than the
-   *         ResultCollector provided in {@link Execution#withCollector(ResultCollector)}. User has
-   *         to use this reference to retrieve results.
-   * 
-   * @since GemFire 6.5
-   * @deprecated as of 6.6, use {@link #execute(String)} instead
-   */
-  @Deprecated
-  public ResultCollector<?, ?> execute(String functionId, boolean hasResult)
-      throws FunctionException;
-
-  /**
-   * Executes the function using its {@linkplain Function#getId() id}
-   * <p>
-   * {@link Function#execute(FunctionContext)} is called on the de-serialized instance on the
-   * executing member.Function should be registered on the executing member using
-   * {@link FunctionService#registerFunction(Function)} method before calling this method.
-   * 
-   * As of 6.6, this is deprecated, since users can pass different value for the hasResult, isHA
-   * parameter that than the boolean values returned from {@link Function#hasResult()},
-   * {@link Function#isHA()}.
-   * 
-   * @param functionId the {@link Function#getId()} of the function
-   * @param hasResult Whether the function returns any result
-   * @param isHA Whether the given function is HA
-   * @throws LowMemoryException if the {@link Function#optimizeForWrite()} returns true and there is
-   *         a low memory condition
-   * @return ResultCollector to retrieve the results received. This is different object than the
-   *         ResultCollector provided in {@link Execution#withCollector(ResultCollector)}. User has
-   *         to use this reference to retrieve results.
-   * 
-   * @since GemFire 6.5
-   * @deprecated as of 6.6, use {@link #execute(String)} instead
-   */
-  @Deprecated
-  public ResultCollector<?, ?> execute(String functionId, boolean hasResult, boolean isHA)
-      throws FunctionException;
-
-  /**
-   * Executes the function using its {@linkplain Function#getId() id}
-   * <p>
-   * {@link Function#execute(FunctionContext)} is called on the de-serialized instance on the
-   * executing member.Function should be registered on the executing member using
-   * {@link FunctionService#registerFunction(Function)} method before calling this method.
-   * 
-   * As of 6.6, this is deprecated, since users can pass different value for the hasResult, isHA,
-   * optimizeForWrite parameters that than the boolean values returned from
-   * {@link Function#hasResult()}, {@link Function#isHA()}, {@link Function#optimizeForWrite()}.
-   * 
-   * @param functionId the {@link Function#getId()} of the function
-   * @param hasResult Whether the function returns any result
-   * @param isHA Whether the given function is HA
-   * @param optimizeForWrite Whether the function should be optmized for write operations
-   * @throws LowMemoryException if the {@link Function#optimizeForWrite()} returns true and there is
-   *         a low memory condition
-   * @return ResultCollector to retrieve the results received. This is different object than the
-   *         ResultCollector provided in {@link Execution#withCollector(ResultCollector)}. User has
-   *         to use this reference to retrieve results.
-   * 
-   * @since GemFire 6.5
-   * @deprecated as of 6.6, use {@link #execute(String)} instead
-   */
-  @Deprecated
-  public ResultCollector<?, ?> execute(String functionId, boolean hasResult, boolean isHA,
-      boolean optimizeForWrite) throws FunctionException;

DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL42 DEL42 DEL68 DEL66 DEL65 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL42 DEL42 DEL68 DEL66 DEL65 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL42 DEL42 DEL68 DEL66 DEL65 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31