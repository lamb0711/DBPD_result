GEODE-5033: Improve TearDown of DistributedTestRule

Change Distributed rules to extend AbstractDistributedTestRule to ensure
that all DUnit VMs were launched prior to setUp of these rules.

Add DistributedTestRule.TearDown which includes everything that the
old DistributedTestCase handled during tearDown.

Using DistributedTestRule as a non-static Rule is probably the best way
to use it going forward. If you use it as a static ClassRule then you
should also register DistributedTestRule.TearDown as a non-static Rule
so that removal of IgnoredExceptions and grep for suspect strings are
both properly invoked after every test method.

+import static org.apache.geode.test.dunit.VM.getAllVMs;
+
-import org.junit.runner.Description;
-import org.junit.runners.model.Statement;
-import org.apache.geode.test.dunit.Host;
-import org.apache.geode.test.junit.rules.serializable.SerializableTestRule;
-public class SharedErrorCollector implements SerializableTestRule {
+public class SharedErrorCollector extends AbstractDistributedTestRule {
-  private final RemoteInvoker invoker;
-
-    this(new RemoteInvoker());
-  }
-
-  SharedErrorCollector(final RemoteInvoker invoker) {
-    this.invoker = invoker;
+    // nothing
-  public Statement apply(final Statement base, Description description) {
-    return new Statement() {
-      @Override
-      public void evaluate() throws Throwable {
-        before();
-        try {
-          base.evaluate();
-        } finally {
-          after();
-        }
-      }
-    };
-  }
-
-    invoker.invokeInEveryVMAndController(() -> errorCollector = new ProtectedErrorCollector());
+    invoker().invokeInEveryVMAndController(() -> errorCollector = new ProtectedErrorCollector());
+  @Override
-      for (VM vm : Host.getHost(0).getAllVMs()) {
+      for (VM vm : getAllVMs()) {
-      invoker.invokeInEveryVMAndController(() -> errorCollector = null);
+      invoker().invokeInEveryVMAndController(() -> errorCollector = null);
-    protected final List<Throwable> protectedErrors;
+    private final List<Throwable> protectedErrors;
-    public ProtectedErrorCollector() {
-      super();
+    ProtectedErrorCollector() {
-        this.protectedErrors = (List<Throwable>) superErrors.get(this);
+        protectedErrors = (List<Throwable>) superErrors.get(this);
-    public List<Throwable> errors() {
+    List<Throwable> errors() {

MOV26 UPD40 UPD43 UPD42 MOV78 MOV78 UPD83 INS32 MOV42 INS32 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL14 DEL17 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL34 DEL32 DEL83 DEL46 DEL52 DEL42 DEL22 DEL83