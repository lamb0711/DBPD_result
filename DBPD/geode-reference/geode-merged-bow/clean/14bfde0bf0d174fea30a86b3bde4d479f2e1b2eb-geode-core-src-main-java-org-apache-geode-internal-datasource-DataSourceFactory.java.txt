Merge branch 'release/1.8.0'

+import java.util.Properties;
-import javax.sql.ConnectionPoolDataSource;
+import org.apache.geode.datasource.PooledDataSourceFactory;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+  private static final String DEFAULT_CONNECTION_POOL_DS_CLASS =
+      "org.apache.geode.connectors.jdbc.JdbcPooledDataSourceFactory";
+
+  private static final String POOL_PREFIX = "pool.";
+
-  public static DataSource getSimpleDataSource(Map configMap) throws DataSourceCreateException {
+  public DataSource getSimpleDataSource(Map configMap) throws DataSourceCreateException {
-    if (configs.getJDBCDriver() == null) {
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE
-              .toLocalizedString());
-    }
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL));
+      logger.error("DataSourceFactory::getSimpleDataSource:URL String to Database is null");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL
-              .toLocalizedString());
+          "DataSourceFactory::getSimpleDataSource:URL String to Database is null");
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0,
-          ex.getLocalizedMessage()), ex);
+      logger.error(String.format(
+          "DataSourceFactory::getSimpleDataSource:Exception while creating GemfireBasicDataSource.Exception String=%s",
+          ex.getLocalizedMessage()),
+          ex);
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0
-              .toLocalizedString(ex.getLocalizedMessage()),
+          String.format(
+              "DataSourceFactory::getSimpleDataSource:Exception while creating GemfireBasicDataSource.Exception String=%s",
+              ex.getLocalizedMessage()),
-  public static ClientConnectionFactoryWrapper getManagedDataSource(Map configMap,
+  public ClientConnectionFactoryWrapper getManagedDataSource(Map configMap,
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE));
+      logger.error(
+          "DataSourceFactory::getManagedDataSource:Managed Connection factory class is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getManagedDataSource:Managed Connection factory class is not available");
-        logger.error(LocalizedMessage.create(
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
-            ex), null);
+        logger.error(String.format(
+            "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+            ex));
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-                .toLocalizedString(ex));
+            String.format(
+                "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+                ex));
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
-          ex), null);
+      logger.error(
+          "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+          ex.toString());
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-              .toLocalizedString(ex));
+          String.format(
+              "DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s",
+              ex));
-   *
-   * @param configMap a map containing configurations required for datasource.
-   * @return ???
-  public static DataSource getPooledDataSource(Map configMap, List<ConfigProperty> props)
+  public DataSource getPooledDataSource(Map configMap, List<ConfigProperty> props)
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
-              .toLocalizedString());
+      connpoolClassName = DEFAULT_CONNECTION_POOL_DS_CLASS;
-      Class cl = ClassPathLoader.getLatest().forName(connpoolClassName);
-      Object Obj = cl.newInstance();
-      invokeAllMethods(cl, Obj, props);
-      return new GemFireConnPooledDataSource((ConnectionPoolDataSource) Obj, configs);
+      Properties poolProperties = createPoolProperties(configMap, props);
+      Properties dataSourceProperties = createDataSourceProperties(props);
+      Class<?> cl = ClassPathLoader.getLatest().forName(connpoolClassName);
+      PooledDataSourceFactory factory = (PooledDataSourceFactory) cl.newInstance();
+      return factory.createDataSource(poolProperties, dataSourceProperties);
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0
-              .toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0,
-          ex), ex);
+          String.format(
+              "DataSourceFactory::getPooledDataSource:Exception creating ConnectionPoolDataSource.Exception string=%s",
+              new Object[] {ex});
+      logger.error(String.format(
+          "DataSourceFactory::getPooledDataSource:Exception creating ConnectionPoolDataSource.Exception string=%s",
+          ex),
+          ex);
+  static Properties createPoolProperties(Map<String, String> configMap,
+      List<ConfigProperty> props) {
+    Properties result = new Properties();
+    if (props != null) {
+      for (ConfigProperty prop : props) {
+        if (prop.getName().toLowerCase().startsWith(POOL_PREFIX)) {
+          String poolName = prop.getName().substring(POOL_PREFIX.length());
+          result.setProperty(poolName, prop.getValue());
+        }
+      }
+    }
+    if (configMap != null) {
+      for (Map.Entry<String, String> entry : configMap.entrySet()) {
+        if (entry.getValue() == null || entry.getValue().equals("")) {
+          continue;
+        }
+        if (entry.getKey().equals("type")) {
+          continue;
+        }
+        if (entry.getKey().equals("jndi-name")) {
+          continue;
+        }
+        if (entry.getKey().equals("transaction-type")) {
+          continue;
+        }
+        if (entry.getKey().equals("conn-pooled-datasource-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("managed-conn-factory-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("xa-datasource-class")) {
+          continue;
+        }
+        result.setProperty(entry.getKey(), entry.getValue());
+      }
+    }
+    return result;
+  }
+
+  static Properties createDataSourceProperties(List<ConfigProperty> props) {
+    Properties result = new Properties();
+    if (props != null) {
+      for (ConfigProperty prop : props) {
+        if (prop.getName().toLowerCase().startsWith(POOL_PREFIX)) {
+          continue;
+        }
+        result.setProperty(prop.getName(), prop.getValue());
+      }
+    }
+    return result;
+  }
+
+
-  public static DataSource getTranxDataSource(Map configMap, List<ConfigProperty> props)
+  public DataSource getTranxDataSource(Map configMap, List<ConfigProperty> props)
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
+      logger.error(
+          "DataSourceFactory::getTranxDataSource:XADataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
-              .toLocalizedString());
+          "DataSourceFactory::getTranxDataSource:XADataSource class name for the ResourceManager is not available");
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0
-              .toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0,
-          ex), ex);
+          String.format(
+              "DataSourceFactory::getTranxDataSource:Exception in creating GemFireTransactionDataSource. Exception string=%s",
+              new Object[] {ex});
+      logger.error(String.format(
+          "DataSourceFactory::getTranxDataSource:Exception in creating GemFireTransactionDataSource. Exception string=%s",
+          ex),
+          ex);
-  private static ConfiguredDataSourceProperties createDataSourceProperties(Map configMap) {
+  private ConfiguredDataSourceProperties createDataSourceProperties(Map configMap) {
-  private static void invokeAllMethods(Class c, Object cpdsObj, List props)
+  private void invokeAllMethods(Class c, Object cpdsObj, List props)
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_CLASS_WITH_THE_GIVEN_CONFIGPROPERTYTYPE_CLASSNAME_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating Class with the given config-property-type classname. Exception string=%s",
+                ex.toString());
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_METHOD_USING_CONFIGPROPERTYNAME_PROPERTY_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating method using config-property-name property. Exception string=%s",
+                ex.toString());
-            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_INSTANCE_OF_THE_CLASS_USING_THE_CONSTRUCTOR_WITH_A_STRING_PARAMETER_EXCEPTION_STRING_0
-                .toLocalizedString(ex.toString());
+            String.format(
+                "DataSourceFactory::invokeAllMethods: Exception in creating instance of the class using the constructor with a String parameter. Exception string=%s",
+                ex.toString());

MOV26 MOV26 UPD40 UPD40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS74 INS42 INS74 INS42 INS60 INS25 INS25 INS41 INS42 INS74 INS42 INS60 INS25 INS41 INS43 INS43 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS60 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS70 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS70 MOV12 MOV12 INS7 INS43 INS59 INS43 INS59 INS74 UPD43 INS32 INS43 INS44 INS42 INS8 INS44 INS32 INS8 INS43 INS44 INS42 INS8 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS76 UPD42 UPD42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS74 INS42 INS42 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS21 INS42 INS43 INS42 INS25 INS21 INS45 INS45 INS43 MOV44 MOV44 MOV32 MOV32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS43 MOV32 INS42 INS32 INS8 INS43 INS43 INS43 INS27 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS42 INS32 INS8 INS32 INS42 UPD42 INS42 INS45 UPD42 UPD42 INS45 UPD42 UPD42 UPD42 INS42 INS45 INS42 UPD42 INS42 INS45 UPD42 UPD42 INS45 INS32 INS42 INS42 INS60 INS21 INS40 INS42 INS42 INS27 INS32 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS18 INS42 INS42 INS32 INS32 UPD42 INS42 INS45 UPD42 UPD42 INS45 INS32 INS42 MOV43 INS59 INS32 INS32 INS33 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS45 UPD42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL83 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL33 DEL40 DEL40 DEL42 DEL33 DEL40 DEL42 DEL66 DEL65 DEL66 DEL65 DEL83 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL14 DEL40 DEL40 DEL83 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL83 DEL83 DEL40 DEL40 DEL40