GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-      DistributedMember memberToBeDescribed =
-          CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
+      DistributedMember memberToBeDescribed = getMember(memberNameOrId);
-      if (memberToBeDescribed != null) {
-        ResultCollector<?, ?> rc = executeFunction(getMemberInformation, null, memberToBeDescribed);
+      ResultCollector<?, ?> rc = executeFunction(getMemberInformation, null, memberToBeDescribed);
-        ArrayList<?> output = (ArrayList<?>) rc.getResult();
-        Object obj = output.get(0);
+      ArrayList<?> output = (ArrayList<?>) rc.getResult();
+      Object obj = output.get(0);
-        if (obj != null && (obj instanceof MemberInformation)) {
+      if (obj != null && (obj instanceof MemberInformation)) {
+        CompositeResultData crd = ResultBuilder.createCompositeResultData();
-          CompositeResultData crd = ResultBuilder.createCompositeResultData();
+        MemberInformation memberInformation = (MemberInformation) obj;
+        memberInformation.setName(memberToBeDescribed.getName());
+        memberInformation.setId(memberToBeDescribed.getId());
+        memberInformation.setHost(memberToBeDescribed.getHost());
+        memberInformation.setProcessId("" + memberToBeDescribed.getProcessId());
-          MemberInformation memberInformation = (MemberInformation) obj;
-          memberInformation.setName(memberToBeDescribed.getName());
-          memberInformation.setId(memberToBeDescribed.getId());
-          memberInformation.setHost(memberToBeDescribed.getHost());
-          memberInformation.setProcessId("" + memberToBeDescribed.getProcessId());
+        CompositeResultData.SectionResultData section = crd.addSection();
+        section.addData("Name", memberInformation.getName());
+        section.addData("Id", memberInformation.getId());
+        section.addData("Host", memberInformation.getHost());
+        section.addData("Regions",
+            CliUtil.convertStringSetToString(memberInformation.getHostedRegions(), '\n'));
+        section.addData("PID", memberInformation.getProcessId());
+        section.addData("Groups", memberInformation.getGroups());
+        section.addData("Used Heap", memberInformation.getHeapUsage() + "M");
+        section.addData("Max Heap", memberInformation.getMaxHeapSize() + "M");
-          CompositeResultData.SectionResultData section = crd.addSection();
-          section.addData("Name", memberInformation.getName());
-          section.addData("Id", memberInformation.getId());
-          section.addData("Host", memberInformation.getHost());
-          section.addData("Regions",
-              CliUtil.convertStringSetToString(memberInformation.getHostedRegions(), '\n'));
-          section.addData("PID", memberInformation.getProcessId());
-          section.addData("Groups", memberInformation.getGroups());
-          section.addData("Used Heap", memberInformation.getHeapUsage() + "M");
-          section.addData("Max Heap", memberInformation.getMaxHeapSize() + "M");
-
-          String offHeapMemorySize = memberInformation.getOffHeapMemorySize();
-          if (offHeapMemorySize != null && !offHeapMemorySize.isEmpty()) {
-            section.addData("Off Heap Size", offHeapMemorySize);
-          }
-
-          section.addData("Working Dir", memberInformation.getWorkingDirPath());
-          section.addData("Log file", memberInformation.getLogFilePath());
-
-          section.addData("Locators", memberInformation.getLocators());
-
-          if (memberInformation.isServer()) {
-            CompositeResultData.SectionResultData clientServiceSection = crd.addSection();
-            List<CacheServerInfo> csList = memberInformation.getCacheServeInfo();
-
-            if (csList != null) {
-              Iterator<CacheServerInfo> iters = csList.iterator();
-              clientServiceSection.setHeader("Cache Server Information");
-
-              while (iters.hasNext()) {
-                CacheServerInfo cacheServerInfo = iters.next();
-                clientServiceSection.addData("Server Bind", cacheServerInfo.getBindAddress());
-                clientServiceSection.addData("Server Port", cacheServerInfo.getPort());
-                clientServiceSection.addData("Running", cacheServerInfo.isRunning());
-              }
-
-              clientServiceSection.addData("Client Connections",
-                  memberInformation.getClientCount());
-            }
-          }
-          result = ResultBuilder.buildResult(crd);
-
-        } else {
-          result = ResultBuilder.createInfoResult(CliStrings.format(
-              CliStrings.DESCRIBE_MEMBER__MSG__INFO_FOR__0__COULD_NOT_BE_RETRIEVED,
-              new Object[] {memberNameOrId}));
+        String offHeapMemorySize = memberInformation.getOffHeapMemorySize();
+        if (offHeapMemorySize != null && !offHeapMemorySize.isEmpty()) {
+          section.addData("Off Heap Size", offHeapMemorySize);
+
+        section.addData("Working Dir", memberInformation.getWorkingDirPath());
+        section.addData("Log file", memberInformation.getLogFilePath());
+
+        section.addData("Locators", memberInformation.getLocators());
+
+        if (memberInformation.isServer()) {
+          CompositeResultData.SectionResultData clientServiceSection = crd.addSection();
+          List<CacheServerInfo> csList = memberInformation.getCacheServeInfo();
+
+          if (csList != null) {
+            Iterator<CacheServerInfo> iters = csList.iterator();
+            clientServiceSection.setHeader("Cache Server Information");
+
+            while (iters.hasNext()) {
+              CacheServerInfo cacheServerInfo = iters.next();
+              clientServiceSection.addData("Server Bind", cacheServerInfo.getBindAddress());
+              clientServiceSection.addData("Server Port", cacheServerInfo.getPort());
+              clientServiceSection.addData("Running", cacheServerInfo.isRunning());
+            }
+
+            clientServiceSection.addData("Client Connections", memberInformation.getClientCount());
+          }
+        }
+        result = ResultBuilder.buildResult(crd);
+
-        result = ResultBuilder.createInfoResult(CliStrings
-            .format(CliStrings.DESCRIBE_MEMBER__MSG__NOT_FOUND, new Object[] {memberNameOrId}));
+        result = ResultBuilder.createInfoResult(
+            CliStrings.format(CliStrings.DESCRIBE_MEMBER__MSG__INFO_FOR__0__COULD_NOT_BE_RETRIEVED,
+                new Object[] {memberNameOrId}));

MOV8 MOV60 INS54 MOV41 MOV8 MOV12 MOV12 INS60 MOV43 INS59 INS42 INS32 MOV7 INS42 INS42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL54 DEL8