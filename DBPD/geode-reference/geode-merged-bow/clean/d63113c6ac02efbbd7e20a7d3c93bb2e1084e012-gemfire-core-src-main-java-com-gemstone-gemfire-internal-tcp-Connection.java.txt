Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

+import com.gemstone.gemfire.i18n.StringId;
-import com.gemstone.org.jgroups.util.StringId;
-  private Connection(ConnectionTable t, Socket s)
+  protected Connection(ConnectionTable t, Socket s)
-  private void handshakeNio() throws IOException {
-    // We jump through some extra hoops to use a MsgOutputStream
-    // This keeps us from allocating an extra DirectByteBuffer.
+  /**
+   * waits until we've joined the distributed system
+   * before returning
+   */
+  private void waitForAddressCompletion() {
-      while (myAddr.getIpAddress() == null) {
+      while ((owner.getConduit().getCancelCriterion().cancelInProgress() == null)
+          && myAddr.getInetAddress() == null && myAddr.getVmViewId() < 0) {
-          myAddr.wait(); // spurious wakeup ok
+          myAddr.wait(100); // spurious wakeup ok
+      Assert.assertTrue(myAddr.getDirectChannelPort() == this.owner.getConduit().getPort());
+  }
-    Assert.assertTrue(myAddr.getDirectChannelPort() == this.owner.getConduit().getPort());
-
+  private void handshakeNio() throws IOException {
+    waitForAddressCompletion();
+    
+    InternalDistributedMember myAddr = this.owner.getConduit().getLocalAddress();
+    waitForAddressCompletion();
+
+      initiateSuspicionIfSharedUnordered();
+  /** initiate suspect processing if a shared/ordered connection is lost and we're not shutting down */
+  private void initiateSuspicionIfSharedUnordered() {
+    if (this.isReceiver && this.handshakeRead && !this.preserveOrder && this.sharedResource) {
+      if (this.owner.getConduit().getCancelCriterion().cancelInProgress() == null) {
+        String reason = "member unexpectedly shut down shared, unordered connection";
+        this.owner.getDM().getMembershipManager().suspectMember(this.getRemoteAddress(),
+            reason);
+      }
+    }
+  }
+
-              Stub stub = new Stub(remote.getIpAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
+              Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
+  /**
+   * For testing we want to configure the connection without having
+   * to read a handshake
+   */
+  protected void setSharedUnorderedForTest() {
+    this.preserveOrder = false;
+    this.sharedResource = true;
+    this.handshakeRead = true;
+  }
+  
-                Stub stub = new Stub(remote.getIpAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
+                Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());

MOV26 UPD40 INS31 INS31 INS31 UPD83 INS29 INS83 INS39 INS42 INS8 MOV60 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS60 MOV51 INS21 INS65 INS25 INS65 INS21 INS21 INS21 INS66 INS66 INS43 INS59 INS32 INS32 INS66 INS27 INS8 INS66 INS66 INS7 INS7 INS7 INS42 INS42 INS32 INS21 UPD42 MOV42 INS42 INS21 INS22 INS22 INS38 INS22 INS25 INS22 INS9 INS22 INS9 INS22 INS9 INS32 INS42 INS27 MOV32 INS32 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS27 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS27 INS27 INS42 INS52 INS42 INS32 INS33 INS60 INS21 INS52 INS42 INS36 INS27 INS32 INS34 INS32 INS42 INS43 INS59 INS32 INS27 MOV32 MOV33 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS33 UPD42 INS22 INS42 INS32 INS42 INS52 INS42 INS32 INS42 INS34 INS52 INS42 INS22 INS42 INS32 INS42 INS52 INS42 INS42 INS42 MOV43 MOV43 MOV43 UPD42 MOV43 UPD42 DEL27