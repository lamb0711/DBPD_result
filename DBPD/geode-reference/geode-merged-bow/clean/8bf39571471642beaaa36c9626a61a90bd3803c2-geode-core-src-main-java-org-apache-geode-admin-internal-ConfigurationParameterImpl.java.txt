Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.net.InetAddress;
+// import java.net.InetAddress;
- * @since GemFire     3.5
+ * @since GemFire 3.5
-public class ConfigurationParameterImpl
-implements org.apache.geode.admin.ConfigurationParameter {
-  
+public class ConfigurationParameterImpl implements org.apache.geode.admin.ConfigurationParameter {
+
-  
+
-  //   Constructor(s)
+  // Constructor(s)
-  
-  /** 
+
+  /**
-   * @param name            the name of this parameter which cannot change
-   * @param description     full description to use
-   * @param value           the value of this parameter
-   * @param type            the class type of the value
-   * @param userModifiable  true if this is modifiable; false if read-only
+   * @param name the name of this parameter which cannot change
+   * @param description full description to use
+   * @param value the value of this parameter
+   * @param type the class type of the value
+   * @param userModifiable true if this is modifiable; false if read-only
-  protected ConfigurationParameterImpl(String name,
-                                       String description,
-                                       Object value,
-                                       Class type,
-                                       boolean userModifiable) {
+  protected ConfigurationParameterImpl(String name, String description, Object value, Class type,
+      boolean userModifiable) {
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED
+              .toLocalizedString());
-    
+
-  
-  /** 
+
+  /**
-   * @param name            the name of this parameter which cannot change
-   * @param value           the value of this parameter
+   * @param name the name of this parameter which cannot change
+   * @param value the value of this parameter
-  protected ConfigurationParameterImpl(String name,
-                                       Object value) {
+  protected ConfigurationParameterImpl(String name, Object value) {
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED
+              .toLocalizedString());
-    
+
-  
+
-  
+
-  //   Attribute accessors and mutators
+  // Attribute accessors and mutators
-  
+
-  
+
-  
+
-    }
-    else if (isInetAddress()) {
+    } else if (isInetAddress()) {
-    }
-    else if (isFile()) {
+    } else if (isFile()) {
-    }
-    else if (isOctal()) {
+    } else if (isOctal()) {
-    }
-    else if (isArray()) {
+    } else if (isArray()) {
-    }
-    else {
+    } else {
-  
+
-  
+
-  
+
-    return "manager-parameters".equals(this.name) || 
-           "manager-classpaths".equals(this.name);
+    return "manager-parameters".equals(this.name) || "manager-classpaths".equals(this.name);
+
+
+
+
-  
+
-      throw new UnmodifiableConfigurationException(LocalizedStrings.ConfigurationParameterImpl_0_IS_NOT_A_MODIFIABLE_CONFIGURATION_PARAMETER.toLocalizedString(getName()));
+      throw new UnmodifiableConfigurationException(
+          LocalizedStrings.ConfigurationParameterImpl_0_IS_NOT_A_MODIFIABLE_CONFIGURATION_PARAMETER
+              .toLocalizedString(getName()));
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE.toLocalizedString(getName()));
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE
+              .toLocalizedString(getName()));
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_TYPE_0_WITH_TYPE_1.toLocalizedString(new Object[] {getValueType().getName(), value.getClass().getName()}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_TYPE_0_WITH_TYPE_1
+              .toLocalizedString(
+                  new Object[] {getValueType().getName(), value.getClass().getName()}));
-    
+
-    }
-    else {
+    } else {
-  
+
-  //   Operations for handling the registration of listeners
-  //     Note: this is only for use within impl pkg and subclass pkgs
+  // Operations for handling the registration of listeners
+  // Note: this is only for use within impl pkg and subclass pkgs
-  
+
-  
+
-  //   Implementation methods
+  // Implementation methods
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE.toLocalizedString(getName()));
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE
+              .toLocalizedString(getName()));
-    }
-    else if (isFile()) {
+    } else if (isFile()) {
-    }
-    else if (isOctal()) {
+    } else if (isOctal()) {
-    }
-    else if (isArray()) {
+    } else if (isArray()) {
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_SETTING_ARRAY_VALUE_FROM_DELIMITED_STRING_IS_NOT_SUPPORTED.toLocalizedString());
-    }
-    else {
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_SETTING_ARRAY_VALUE_FROM_DELIMITED_STRING_IS_NOT_SUPPORTED
+              .toLocalizedString());
+    } else {
-  
+
-   * @param parm  the configuration parameter the changed 
+   * @param parm the configuration parameter the changed
-  protected void fireConfigurationParameterValueChanged(ConfigurationParameter parm)  {
-    ConfigurationParameterListener[] listeners = 
-        (ConfigurationParameterListener[]) this.listeners.toArray(
-            new ConfigurationParameterListener[0]);
+  protected void fireConfigurationParameterValueChanged(ConfigurationParameter parm) {
+    ConfigurationParameterListener[] listeners = (ConfigurationParameterListener[]) this.listeners
+        .toArray(new ConfigurationParameterListener[0]);
-  }  
-  
+  }
+
-   * Sets the internal state of this configuration parameter.  
+   * Sets the internal state of this configuration parameter.
-   * @param description     full description to use
-   * @param value           the value of this parameter
-   * @param type            the class type of the value
-   * @param userModifiable  true if this is modifiable; false if read-only
+   * @param description full description to use
+   * @param value the value of this parameter
+   * @param type the class type of the value
+   * @param userModifiable true if this is modifiable; false if read-only
-  protected void setInternalState(String description,
-                                  Object value,
-                                  Class type,
-                                  boolean userModifiable) {
+  protected void setInternalState(String description, Object value, Class type,
+      boolean userModifiable) {
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_DESCRIPTION_MUST_BE_SPECIFIED.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_DESCRIPTION_MUST_BE_SPECIFIED
+              .toLocalizedString());
-      throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE.toLocalizedString(getName()));
+      throw new IllegalArgumentException(
+          LocalizedStrings.ConfigurationParameterImpl_UNABLE_TO_SET_0_TO_NULL_VALUE
+              .toLocalizedString(getName()));
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66