Merge branch 'release/1.3.0'

+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
+
-  private static final long SLEEP_MILLIS = 1000;
+  private static final long LOOP_INTERVAL_MILLIS = 1000;
-  private final File workingDir;
+  private final File directory;
+
-  ControlFileWatchdog(final File workingDir, final String fileName,
+  ControlFileWatchdog(final File directory, final String fileName,
-    this.workingDir = workingDir;
-    this.file = new File(this.workingDir, fileName);
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notEmpty(fileName, "Invalid fileName '" + fileName + "' specified");
+    notNull(requestHandler, "Invalid requestHandler '" + requestHandler + "' specified");
+
+    this.directory = directory;
+    this.file = new File(directory, fileName);
-    try { // always set this.alive before stopping
+    try { // always set alive before stopping
-        try { // handle handle exceptions
-          Thread.sleep(SLEEP_MILLIS);
-          if (this.file.exists()) {
-            try { // always check stopAfterRequest after main work
-              work();
-            } finally {
-              if (this.stopAfterRequest) {
-                stopMe();
-              }
-            }
-          }
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          // allow to loop around and check isAlive()
-        } catch (IOException e) {
-          logger.error(
-              "Unable to control process with {}. Please add tools.jar from JDK to classpath for improved process control.",
-              this.file);
-          // allow to loop around and check isAlive()
-        }
+        doWork();
-        this.alive = false;
+        alive = false;
-  private void work() throws IOException {
+  private void doWork() {
+    try { // handle handle exceptions
+      if (file.exists()) {
+        try { // always check stopAfterRequest after handleRequest
+          handleRequest();
+        } finally {
+          if (stopAfterRequest) {
+            stopMe();
+          }
+        }
+      }
+      Thread.sleep(LOOP_INTERVAL_MILLIS);
+    } catch (InterruptedException ignored) {
+      Thread.currentThread().interrupt();
+      // allow to loop around and check isAlive()
+    } catch (IOException ignored) {
+      logger.error(
+          "Unable to control process with {}. Please add tools.jar from JDK to classpath for improved process control.",
+          file);
+      // allow to loop around and check isAlive()
+    }
+  }
+
+  private void handleRequest() throws IOException {
-      this.requestHandler.handleRequest();
+      requestHandler.handleRequest();
-        this.file.delete();
+        file.delete();
-        logger.warn("Unable to delete {}", this.file, e);
+        logger.warn("Unable to delete {}", file, e);
-      if (this.thread == null) {
-        this.thread = new Thread(this, createThreadName());
-        this.thread.setDaemon(true);
-        this.alive = true;
-        this.thread.start();
+      if (thread == null) {
+        thread = new Thread(this, createThreadName());
+        thread.setDaemon(true);
+        alive = true;
+        thread.start();
-      if (this.thread != null) {
-        this.alive = false;
-        if (this.thread != Thread.currentThread()) {
-          this.thread.interrupt();
-          stopping = this.thread;
+      if (thread != null) {
+        alive = false;
+        if (thread != Thread.currentThread()) {
+          thread.interrupt();
+          stopping = thread;
-        this.thread = null;
+        thread = null;
-      return this.alive;
+      return alive;
-      if (this.thread != null) {
-        this.alive = false;
-        this.thread = null;
+      if (thread != null) {
+        alive = false;
+        thread = null;
-    final StringBuilder sb = new StringBuilder(getClass().getSimpleName());
-    sb.append("@").append(System.identityHashCode(this)).append("{");
-    sb.append("workingDir=").append(this.workingDir);
-    sb.append(", file=").append(this.file);
-    sb.append(", alive=").append(this.alive);
-    sb.append(", stopAfterRequest=").append(this.stopAfterRequest);
-    return sb.append("}").toString();
+    StringBuilder sb = new StringBuilder(getClass().getSimpleName());
+    sb.append('@').append(System.identityHashCode(this)).append('{');
+    sb.append("directory=").append(directory);
+    sb.append(", file=").append(file);
+    sb.append(", alive=").append(alive); // not synchronized
+    sb.append(", stopAfterRequest=").append(stopAfterRequest);
+    return sb.append('}').toString();
-    return getClass().getSimpleName() + "@" + Integer.toHexString(hashCode()) + " monitoring "
-        + this.file.getName();
+    return getClass().getSimpleName() + '@' + Integer.toHexString(hashCode()) + " monitoring "
+        + file.getName();
-    public void handleRequest() throws IOException;
+    void handleRequest() throws IOException;

INS26 INS26 INS40 INS40 INS31 MOV78 INS83 INS39 INS42 INS8 UPD83 UPD42 MOV8 UPD42 UPD42 UPD42 UPD42 INS21 INS21 INS21 INS54 INS32 INS32 INS32 INS8 INS8 MOV21 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 INS61 INS51 INS13 INS42 INS42 INS42 INS42 INS13 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 UPD42 MOV42 INS42 MOV32 INS8 INS52 INS8 UPD42 UPD42 INS42 UPD45 INS13 INS42 INS21 INS21 INS42 UPD42 INS42 INS42 INS42 INS42 INS13 INS32 INS7 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL61 DEL8 DEL52 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL51 DEL8 DEL54 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL45 DEL45 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL45 DEL45 DEL52 DEL42 DEL22 DEL83