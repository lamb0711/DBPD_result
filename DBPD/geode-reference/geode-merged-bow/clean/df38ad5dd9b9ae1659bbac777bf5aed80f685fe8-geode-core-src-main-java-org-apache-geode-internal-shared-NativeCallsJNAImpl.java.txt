GEODE-7729: Upgrades JNA to 5.5.0 (#4624)

* GEODE-7729: Upgrades JNA to 5.5.0

* Update Windows native APIs to use JNA Platform library to fix segfault.

* GEODE-7729: Cleanup comments, generics and other warnings.

* Deletes unused code.

+import static java.util.Arrays.asList;
+import static java.util.Collections.singletonList;
+
-import java.io.InputStream;
-import java.net.Socket;
-import java.net.SocketException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import com.sun.jna.Library;
-import com.sun.jna.NativeLibrary;
-import com.sun.jna.NativeLong;
-import com.sun.jna.Pointer;
+import com.sun.jna.platform.win32.Kernel32;
+import com.sun.jna.platform.win32.WinBase;
+import com.sun.jna.platform.win32.WinNT.HANDLE;
-import com.sun.jna.win32.StdCallLibrary;
-    if (Platform.isSolaris()) {
-      return new SolarisNativeCalls();
-    }
-    if (Platform.isMac()) {
-      return new MacOSXNativeCalls();
-    }
-    if (Platform.isFreeBSD()) {
-      return new FreeBSDNativeCalls();
-    }
-    public static native int setenv(String name, String value, int overwrite)
-        throws LastErrorException;
-
-    public static native int unsetenv(String name) throws LastErrorException;
-
-    public static native int setsockopt(int sockfd, int level, int optName, IntByReference optVal,
-        int optSize) throws LastErrorException;
-
-    public static native int isatty(int fd) throws LastErrorException;
-
-    /**
-     * the {@link RehashServerOnSIGHUP} instance sent to {@link #daemonize}
-     */
-    /**
-     * @see NativeCalls#getOSType()
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.GENERIC_POSIX;
-    }
-
-    /**
-     * @see NativeCalls#getEnvironment(String)
-     */
-    /**
-     * @see NativeCalls#getProcessId()
-     */
-    /**
-     * @see NativeCalls#isProcessActive(int)
-     */
-    /**
-     * @see NativeCalls#killProcess(int)
-     */
-    /**
-     * {@inheritDoc}
-     */
+      @SuppressWarnings("OctalInteger")
-      if ((oldMask & 077) > newMask) {
+      @SuppressWarnings("OctalInteger")
+      final int OCTAL_077 = 077;
+      if ((oldMask & OCTAL_077) > newMask) {
-      this.rehashCallback = callback;
-      this.hupHandler = new SignalHandler() {
-        @Override
-        public void callback(int signum) {
-          // invoke the rehash function if provided
-          final RehashServerOnSIGHUP rehashCb = rehashCallback;
-          if (signum == Signal.SIGHUP.getNumber() && rehashCb != null) {
-            rehashCb.rehash();
-          }
+      rehashCallback = callback;
+      hupHandler = signum -> {
+        // invoke the rehash function if provided
+        final RehashServerOnSIGHUP rehashCb = rehashCallback;
+        if (signum == Signal.SIGHUP.getNumber() && rehashCb != null) {
+          rehashCb.rehash();
-      signal(Signal.SIGHUP.getNumber(), this.hupHandler);
+      signal(Signal.SIGHUP.getNumber(), hupHandler);
-      signal(Signal.SIGCHLD.getNumber(), this.hupHandler);
-      signal(Signal.SIGINT.getNumber(), this.hupHandler);
+      signal(Signal.SIGCHLD.getNumber(), hupHandler);
+      signal(Signal.SIGINT.getNumber(), hupHandler);
-        fd = createFD(path, 00644);
+        @SuppressWarnings("OctalInteger")
+        final int OCTAL_0644 = 00644;
+        fd = createFD(path, OCTAL_0644);
-          unknownError = false;
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public Map<TCPSocketOptions, Throwable> setSocketOptions(Socket sock, InputStream sockStream,
-        Map<TCPSocketOptions, Object> optValueMap) throws UnsupportedOperationException {
-      return super.setGenericSocketOptions(sock, sockStream, optValueMap);
-    }
-
-    @Override
-    protected int setPlatformSocketOption(int sockfd, int level, int optName, TCPSocketOptions opt,
-        Integer optVal, int optSize) throws NativeErrorException {
-      try {
-        return setsockopt(sockfd, level, optName, new IntByReference(optVal.intValue()), optSize);
-      } catch (LastErrorException le) {
-        throw new NativeErrorException(le.getMessage(), le.getErrorCode(), le.getCause());
-      }
-    }
-
-    @Override
-    public boolean isTTY() {
-      try {
-        return isatty(0) == 1;
-      } catch (Exception e) {
-        throw new RuntimeException("Couldn't find tty impl. ", e);
-      }
-    }
-
-    // #define values for keepalive options in /usr/include/netinet/tcp.h
-    static final int OPT_TCP_KEEPIDLE = 4;
-    static final int OPT_TCP_KEEPINTVL = 5;
-    static final int OPT_TCP_KEEPCNT = 6;
-
-    static final int ENOPROTOOPT = 92;
-    static final int ENOPROTOOPT_ALPHA = 42;
-    static final int ENOPROTOOPT_MIPS = 99;
-    static final int ENOPROTOOPT_PARISC = 220;
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.LINUX;
-    }
-
-    @Override
-    protected int getPlatformOption(TCPSocketOptions opt) throws UnsupportedOperationException {
-      switch (opt) {
-        case OPT_KEEPIDLE:
-          return OPT_TCP_KEEPIDLE;
-        case OPT_KEEPINTVL:
-          return OPT_TCP_KEEPINTVL;
-        case OPT_KEEPCNT:
-          return OPT_TCP_KEEPCNT;
-        default:
-          throw new UnsupportedOperationException("unknown option " + opt);
-      }
-    }
-
-    @Override
-    protected boolean isNoProtocolOptionCode(int errno) {
-      switch (errno) {
-        case ENOPROTOOPT:
-          return true;
-        case ENOPROTOOPT_ALPHA:
-          return true;
-        case ENOPROTOOPT_MIPS:
-          return true;
-        case ENOPROTOOPT_PARISC:
-          return true;
-        default:
-          return false;
-      }
-    }
-
-    private ThreadLocal<Structure> tSpecs = new ThreadLocal<Structure>();
-
+    @SuppressWarnings("unused")
-
-      protected List getFieldOrder() {
-        return Arrays.asList(new String[] {"fsid"});
+      protected List<String> getFieldOrder() {
+        return singletonList("fsid");
+    @SuppressWarnings("unused")
-
-      protected List getFieldOrder() {
-        return Arrays.asList(new String[] {"fspare"});
+      protected List<String> getFieldOrder() {
+        return singletonList("fspare");
+    @SuppressWarnings("unused")
-          if (ret == 0) {
-            isStatFSEnabled = true;
-          } else {
-            isStatFSEnabled = false;
-          }
+          isStatFSEnabled = ret == 0;
-      protected List getFieldOrder() {
-        return Arrays.asList(new String[] {"f_type", "f_bsize", "f_blocks", "f_bfree", "f_bavail",
-            "f_files", "f_ffree", "f_fsid", "f_namelen", "f_frsize", "f_spare"});
+      protected List<String> getFieldOrder() {
+        return asList("f_type", "f_bsize", "f_blocks", "f_bfree", "f_bavail",
+            "f_files", "f_ffree", "f_fsid", "f_namelen", "f_frsize", "f_spare");
-        for (int i = 0; i < REMOTE_TYPES.length; i++) {
-          if (REMOTE_TYPES[i] == f_type) {
+        for (int remoteType : REMOTE_TYPES) {
+          if (remoteType == f_type) {
+    @SuppressWarnings("unused")
-      protected List getFieldOrder() {
-        return Arrays.asList(new String[] {"fspare"});
+      protected List<String> getFieldOrder() {
+        return singletonList("fspare");
+    @SuppressWarnings("unused")
-          new long[] {4283649346l, 1937076805l, 22092l, 26985l, 20859l, 16914836l};
+          new long[] {4283649346L, 1937076805L, 22092L, 26985L, 20859L, 16914836L};
-          if (ret == 0) {
-            isStatFSEnabled = true;
-          } else {
-            isStatFSEnabled = false;
-          }
+          isStatFSEnabled = ret == 0;
-      protected List getFieldOrder() {
-        return Arrays.asList(new String[] {"f_type", "f_bsize", "f_blocks", "f_bfree", "f_bavail",
-            "f_files", "f_ffree", "f_fsid", "f_namelen", "f_frsize", "f_spare"});
+      protected List<String> getFieldOrder() {
+        return asList("f_type", "f_bsize", "f_blocks", "f_bfree", "f_bavail",
+            "f_files", "f_ffree", "f_fsid", "f_namelen", "f_frsize", "f_spare");
-        for (int i = 0; i < REMOTE_TYPES.length; i++) {
-          if (REMOTE_TYPES[i] == f_type) {
+        for (long remoteType : REMOTE_TYPES) {
+          if (remoteType == f_type) {
-   * Implementation of {@link NativeCalls} for Solaris platform.
-   */
-  private static class SolarisNativeCalls extends POSIXNativeCalls {
-
-    static {
-      Native.register("nsl");
-      Native.register("socket");
-    }
-
-    // #define values for keepalive options in /usr/include/netinet/tcp.h
-    // Below are only available on Solaris 11 and above but older platforms will
-    // throw an exception which higher layers will handle appropriately
-    static final int OPT_TCP_KEEPALIVE_THRESHOLD = 0x16;
-    static final int OPT_TCP_KEEPALIVE_ABORT_THRESHOLD = 0x17;
-
-    static final int ENOPROTOOPT = 99;
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.SOLARIS;
-    }
-
-    @Override
-    protected int getPlatformOption(TCPSocketOptions opt) throws UnsupportedOperationException {
-      switch (opt) {
-        case OPT_KEEPIDLE:
-          return OPT_TCP_KEEPALIVE_THRESHOLD;
-        case OPT_KEEPINTVL:
-        case OPT_KEEPCNT:
-          return UNSUPPORTED_OPTION;
-        default:
-          throw new UnsupportedOperationException("unknown option " + opt);
-      }
-    }
-
-    @Override
-    protected int setPlatformSocketOption(int sockfd, int level, int optName, TCPSocketOptions opt,
-        Integer optVal, int optSize) throws NativeErrorException {
-      try {
-        switch (optName) {
-          case OPT_TCP_KEEPALIVE_THRESHOLD:
-            // value required is in millis
-            final IntByReference timeout = new IntByReference(optVal.intValue() * 1000);
-            int result = setsockopt(sockfd, level, optName, timeout, optSize);
-            if (result == 0) {
-              // setting ABORT_THRESHOLD to be same as KEEPALIVE_THRESHOLD
-              return setsockopt(sockfd, level, OPT_TCP_KEEPALIVE_ABORT_THRESHOLD, timeout, optSize);
-            } else {
-              return result;
-            }
-          default:
-            throw new UnsupportedOperationException("unsupported option " + opt);
-        }
-      } catch (LastErrorException le) {
-        throw new NativeErrorException(le.getMessage(), le.getErrorCode(), le.getCause());
-      }
-    }
-
-    @Override
-    protected boolean isNoProtocolOptionCode(int errno) {
-      return (errno == ENOPROTOOPT);
-    }
-  }
-
-  /**
-   * Implementation of {@link NativeCalls} for MacOSX platform.
-   */
-  private static class MacOSXNativeCalls extends POSIXNativeCalls {
-
-    // #define values for keepalive options in /usr/include/netinet/tcp.h
-    static final int OPT_TCP_KEEPALIVE = 0x10;
-
-    static final int ENOPROTOOPT = 42;
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.MACOSX;
-    }
-
-    @Override
-    protected int getPlatformOption(TCPSocketOptions opt) throws UnsupportedOperationException {
-      switch (opt) {
-        case OPT_KEEPIDLE:
-          return OPT_TCP_KEEPALIVE;
-        case OPT_KEEPINTVL:
-        case OPT_KEEPCNT:
-          return UNSUPPORTED_OPTION;
-        default:
-          throw new UnsupportedOperationException("unknown option " + opt);
-      }
-    }
-
-    @Override
-    protected boolean isNoProtocolOptionCode(int errno) {
-      return (errno == ENOPROTOOPT);
-    }
-  }
-
-  /**
-   * Implementation of {@link NativeCalls} for FreeBSD platform.
-   */
-  private static class FreeBSDNativeCalls extends POSIXNativeCalls {
-
-    // #define values for keepalive options in /usr/include/netinet/tcp.h
-    static final int OPT_TCP_KEEPALIVE = 0x100;
-    static final int OPT_TCP_KEEPINTVL = 0x200;
-    static final int OPT_TCP_KEEPCNT = 0x400;
-
-    static final int ENOPROTOOPT = 42;
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.FREEBSD;
-    }
-
-    @Override
-    protected int getPlatformOption(TCPSocketOptions opt) throws UnsupportedOperationException {
-      switch (opt) {
-        case OPT_KEEPIDLE:
-          return OPT_TCP_KEEPALIVE;
-        case OPT_KEEPINTVL:
-          return OPT_TCP_KEEPINTVL;
-        case OPT_KEEPCNT:
-          return OPT_TCP_KEEPCNT;
-        default:
-          throw new UnsupportedOperationException("unknown option " + opt);
-      }
-    }
-
-    @Override
-    protected boolean isNoProtocolOptionCode(int errno) {
-      return (errno == ENOPROTOOPT);
-    }
-  }
-
-  /**
-    static {
-      // for socket operations
-      Native.register("Ws2_32");
-    }
-
-    @SuppressWarnings("unused")
-    public static class TcpKeepAlive extends Structure {
-      public int onoff;
-      public int keepalivetime;
-      public int keepaliveinterval;
-
-      @Override
-      protected List<String> getFieldOrder() {
-        return Arrays.asList(new String[] {"onoff", "keepalivetime", "keepaliveinterval"});
-      }
-    }
-
-    public static native int WSAIoctl(NativeLong sock, int controlCode, TcpKeepAlive value,
-        int valueSize, Pointer outValue, int outValueSize, IntByReference bytesReturned,
-        Pointer overlapped, Pointer completionRoutine) throws LastErrorException;
-
-    static final int WSAENOPROTOOPT = 10042;
-    static final int SIO_KEEPALIVE_VALS = -1744830460;
-
-    private static class Kernel32 {
-
-      static {
-        // kernel32 requires stdcall calling convention
-        Map<String, Object> kernel32Options = new HashMap<String, Object>();
-        kernel32Options.put(Library.OPTION_CALLING_CONVENTION, StdCallLibrary.STDCALL_CONVENTION);
-        kernel32Options.put(Library.OPTION_FUNCTION_MAPPER, StdCallLibrary.FUNCTION_MAPPER);
-        final NativeLibrary kernel32Lib = NativeLibrary.getInstance("kernel32", kernel32Options);
-        Native.register(kernel32Lib);
-      }
-
-      // Values below from windows.h header are hard-coded since there
-      // does not seem any simple way to get those at build or run time.
-      // Hopefully these will never change else all hell will break
-      // loose in Windows world ...
-      static final int PROCESS_QUERY_INFORMATION = 0x0400;
-      static final int PROCESS_TERMINATE = 0x0001;
-      static final int STILL_ACTIVE = 259;
-      static final int INVALID_HANDLE = -1;
-
-      public static native boolean SetEnvironmentVariableA(String name, String value)
-          throws LastErrorException;
-
-      public static native int GetEnvironmentVariableA(String name, byte[] pvalue, int psize);
-
-      public static native int GetCurrentProcessId();
-
-      public static native Pointer OpenProcess(int desiredAccess, boolean inheritHandle,
-          int processId) throws LastErrorException;
-
-      public static native boolean TerminateProcess(Pointer processHandle, int exitCode)
-          throws LastErrorException;
-
-      public static native boolean GetExitCodeProcess(Pointer processHandle,
-          IntByReference exitCode) throws LastErrorException;
-
-      public static native boolean CloseHandle(Pointer handle) throws LastErrorException;
-    }
-
-    /**
-     * @see NativeCalls#getOSType()
-     */
-    @Override
-    public OSType getOSType() {
-      return OSType.WIN;
-    }
-
-    /**
-     * @see NativeCalls#getEnvironment(String)
-     */
-      int psize = Kernel32.GetEnvironmentVariableA(name, null, 0);
+      int psize = Kernel32.INSTANCE.GetEnvironmentVariable(name, null, 0);
-          byte[] result = new byte[psize];
-          psize = Kernel32.GetEnvironmentVariableA(name, result, psize);
+          char[] result = new char[psize];
+          psize = Kernel32.INSTANCE.GetEnvironmentVariable(name, result, psize);
-    /**
-     * @see NativeCalls#getProcessId()
-     */
-      return Kernel32.GetCurrentProcessId();
+      return Kernel32.INSTANCE.GetCurrentProcessId();
-    /**
-     * @see NativeCalls#isProcessActive(int)
-     */
-        final Pointer procHandle =
-            Kernel32.OpenProcess(Kernel32.PROCESS_QUERY_INFORMATION, false, processId);
-        final long hval;
-        if (procHandle == null
-            || (hval = Pointer.nativeValue(procHandle)) == Kernel32.INVALID_HANDLE || hval == 0) {
+        final HANDLE procHandle =
+            Kernel32.INSTANCE.OpenProcess(Kernel32.PROCESS_QUERY_INFORMATION, false, processId);
+        if (procHandle == null || WinBase.INVALID_HANDLE_VALUE.equals(procHandle)) {
-          final boolean result =
-              Kernel32.GetExitCodeProcess(procHandle, status)
-                  && status.getValue() == Kernel32.STILL_ACTIVE;
-          Kernel32.CloseHandle(procHandle);
+          final boolean result = Kernel32.INSTANCE.GetExitCodeProcess(procHandle, status)
+              && status.getValue() == Kernel32.STILL_ACTIVE;
+          Kernel32.INSTANCE.CloseHandle(procHandle);
-    /**
-     * @see NativeCalls#killProcess(int)
-     */
-        final Pointer procHandle =
-            Kernel32.OpenProcess(Kernel32.PROCESS_TERMINATE, false, processId);
-        final long hval;
-        if (procHandle == null
-            || (hval = Pointer.nativeValue(procHandle)) == Kernel32.INVALID_HANDLE || hval == 0) {
+        final HANDLE procHandle =
+            Kernel32.INSTANCE.OpenProcess(Kernel32.PROCESS_TERMINATE, false, processId);
+        if (procHandle == null || Kernel32.INVALID_HANDLE_VALUE.equals(procHandle)) {
-          final boolean result = Kernel32.TerminateProcess(procHandle, -1);
-          Kernel32.CloseHandle(procHandle);
+          final boolean result = Kernel32.INSTANCE.TerminateProcess(procHandle, -1);
+          Kernel32.INSTANCE.CloseHandle(procHandle);
-    /**
-     * {@inheritDoc}
-     */
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public Map<TCPSocketOptions, Throwable> setSocketOptions(Socket sock, InputStream sockStream,
-        Map<TCPSocketOptions, Object> optValueMap) throws UnsupportedOperationException {
-      final TcpKeepAlive optValue = new TcpKeepAlive();
-      final int optSize = (Integer.SIZE / Byte.SIZE) * 3;
-      TCPSocketOptions errorOpt = null;
-      Throwable error = null;
-      for (Map.Entry<TCPSocketOptions, Object> e : optValueMap.entrySet()) {
-        TCPSocketOptions opt = e.getKey();
-        Object value = e.getValue();
-        // all options currently require an integer argument
-        if (value == null || !(value instanceof Integer)) {
-          throw new IllegalArgumentException("bad argument type "
-              + (value != null ? value.getClass().getName() : "NULL") + " for " + opt);
-        }
-        switch (opt) {
-          case OPT_KEEPIDLE:
-            optValue.onoff = 1;
-            // in millis
-            optValue.keepalivetime = ((Integer) value).intValue() * 1000;
-            break;
-          case OPT_KEEPINTVL:
-            optValue.onoff = 1;
-            // in millis
-            optValue.keepaliveinterval = ((Integer) value).intValue() * 1000;
-            break;
-          case OPT_KEEPCNT:
-            errorOpt = opt;
-            error = new UnsupportedOperationException(getUnsupportedSocketOptionMessage(opt));
-            break;
-          default:
-            throw new UnsupportedOperationException("unknown option " + opt);
-        }
-      }
-      final int sockfd = getSocketKernelDescriptor(sock, sockStream);
-      final IntByReference nBytes = new IntByReference(0);
-      try {
-        if (WSAIoctl(new NativeLong(sockfd), SIO_KEEPALIVE_VALS, optValue, optSize, null, 0, nBytes,
-            null, null) != 0) {
-          errorOpt = TCPSocketOptions.OPT_KEEPIDLE; // using some option here
-          error = new SocketException(getOSType() + ": error setting options: " + optValueMap);
-        }
-      } catch (LastErrorException le) {
-        // check if the error indicates that option is not supported
-        errorOpt = TCPSocketOptions.OPT_KEEPIDLE; // using some option here
-        if (le.getErrorCode() == WSAENOPROTOOPT) {
-          error = new UnsupportedOperationException(getUnsupportedSocketOptionMessage(errorOpt),
-              new NativeErrorException(le.getMessage(), le.getErrorCode(), le.getCause()));
-        } else {
-          final SocketException se =
-              new SocketException(getOSType() + ": failed to set options: " + optValueMap);
-          se.initCause(le);
-          error = se;
-        }
-      }
-      return errorOpt != null ? Collections.singletonMap(errorOpt, error) : null;
-    }

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS55 INS79 MOV83 MOV83 MOV42 MOV43 MOV23 MOV31 INS79 INS79 INS79 MOV79 MOV78 MOV78 INS60 INS42 INS45 MOV78 INS74 INS42 INS45 MOV78 INS74 INS42 INS45 MOV78 INS74 INS42 INS45 MOV78 INS74 MOV78 MOV74 INS79 INS79 INS83 INS39 INS59 INS43 INS43 INS43 INS43 INS43 INS43 INS70 MOV41 INS43 INS43 INS70 MOV41 INS42 INS45 INS42 INS45 INS42 INS34 INS42 INS42 INS86 INS42 INS42 INS42 INS60 MOV42 INS42 MOV42 INS42 MOV42 INS42 INS44 INS42 INS8 MOV42 INS42 INS44 INS42 INS8 INS40 INS59 MOV8 INS79 INS83 INS39 INS59 UPD42 INS45 UPD42 INS45 MOV21 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS39 INS42 MOV25 UPD42 INS45 UPD34 UPD34 UPD34 UPD34 UPD34 UPD34 MOV21 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS39 INS42 MOV25 INS40 UPD42 UPD43 INS27 UPD43 INS27 MOV8 INS42 INS42 INS42 INS45 INS42 INS34 MOV8 MOV8 UPD42 MOV27 INS32 UPD42 MOV27 INS32 INS42 MOV27 INS42 MOV27 INS42 UPD5 INS40 INS40 UPD42 MOV42 MOV42 INS40 INS40 UPD42 MOV42 MOV42 UPD39 INS40 INS40 UPD5 INS40 UPD42 INS40 UPD39 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL41 DEL8 DEL25 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL42 DEL65 DEL66 DEL42 DEL67 DEL65 DEL65 DEL29 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL65 DEL65 DEL29 DEL34 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL31 DEL1 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL34 DEL42 DEL9 DEL7 DEL21 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL34 DEL32 DEL34 DEL27 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL49 DEL9 DEL41 DEL42 DEL49 DEL9 DEL41 DEL42 DEL49 DEL9 DEL41 DEL42 DEL49 DEL9 DEL41 DEL49 DEL9 DEL41 DEL50 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL78 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL55 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL9 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL78 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL9 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL28 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL49 DEL42 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL49 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL34 DEL27 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL36 DEL41 DEL8 DEL31 DEL55 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL49 DEL42 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL36 DEL41 DEL8 DEL31 DEL55 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL36 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL28 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL4 DEL3 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL28 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL55 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL42 DEL42 DEL42 DEL68 DEL65 DEL29 DEL42 DEL78 DEL42 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL42 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL36 DEL40 DEL27 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL29 DEL42 DEL78 DEL42 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL36 DEL40 DEL27 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL65 DEL65 DEL29 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL83 DEL39 DEL42 DEL40 DEL40 DEL27 DEL36 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL27 DEL42 DEL43 DEL45 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL16 DEL36 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL49 DEL40 DEL34 DEL7 DEL21 DEL40 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL34 DEL27 DEL7 DEL21 DEL10 DEL42 DEL49 DEL40 DEL34 DEL7 DEL21 DEL40 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL34 DEL27 DEL7 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL10 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL70 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL42 DEL33 DEL34 DEL42 DEL33 DEL33 DEL32 DEL34 DEL27 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL14 DEL7 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL41 DEL8 DEL31