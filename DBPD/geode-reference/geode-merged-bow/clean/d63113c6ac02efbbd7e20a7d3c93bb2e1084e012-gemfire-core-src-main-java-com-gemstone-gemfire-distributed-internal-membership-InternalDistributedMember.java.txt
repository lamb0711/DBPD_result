Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

-import com.gemstone.gemfire.DataSerializer;
-import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.gemfire.cache.UnsupportedVersionException;
-import com.gemstone.gemfire.distributed.DistributedMember;
-import com.gemstone.gemfire.distributed.DurableClientAttributes;
-import com.gemstone.gemfire.distributed.Role;
-import com.gemstone.gemfire.distributed.internal.DistributionManager;
-import com.gemstone.gemfire.distributed.internal.DistributionAdvisor.ProfileId;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGPeerAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMember;
-import com.gemstone.gemfire.internal.Assert;
-import com.gemstone.gemfire.internal.DataSerializableFixedID;
-import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.Version;
-import com.gemstone.gemfire.internal.cache.versions.VersionSource;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-import com.gemstone.org.jgroups.stack.IpAddress;
-
-import java.io.Serializable;
+import java.net.Inet4Address;
-import java.net.Inet4Address;
+
+import com.gemstone.gemfire.DataSerializer;
+import com.gemstone.gemfire.InternalGemFireError;
+import com.gemstone.gemfire.cache.UnsupportedVersionException;
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.distributed.DurableClientAttributes;
+import com.gemstone.gemfire.distributed.Role;
+import com.gemstone.gemfire.distributed.internal.DistributionAdvisor.ProfileId;
+import com.gemstone.gemfire.distributed.internal.DistributionManager;
+import com.gemstone.gemfire.internal.Assert;
+import com.gemstone.gemfire.internal.DataSerializableFixedID;
+import com.gemstone.gemfire.internal.InternalDataSerializer;
+import com.gemstone.gemfire.internal.OSProcess;
+import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.internal.Version;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
- *
- * Unfortunately, this class serves two distinct functions. First, it is the
- * fundamental element of membership in the GemFire distributed system. As such,
- * it is used in enumerations and properly responds to hashing and equals()
- * comparisons.
- *
- * Second, it is used as a cheap way of representing an address. This is
- * unfortunate, because as a NetMember, it holds two separate port numbers: the
- * "membership" descriptor as well as a direct communication channel.
- *
- * TODO fix this.
-  protected NetMember ipAddr; // the underlying member object, e.g. from JGroups
-  // private IpAddress ipAddr;
+  // whether to show NetMember components in toString()
+  private final boolean SHOW_NETMEMBER = Boolean.getBoolean("gemfire.show_netmembers");
+  
+  protected NetMember netMbr; // the underlying member object, e.g. from JGroups
-  private int vmKind = -1;
+  private int vmKind = DistributionManager.NORMAL_DM_TYPE;
-        Version.GFE_71 };
+        Version.GFE_71, Version.GFE_90 };
-    int defaultDcPort = MemberAttributes.DEFAULT.getPort();
- // [bruce] disabled to allow loners to modify the ID post-connect
- //    Assert.assertTrue(defaultDcPort > 0); 
-
-    this.dcPort = defaultDcPort;;
-    this.vmKind = MemberAttributes.DEFAULT.getVmKind();
-    this.vmPid = MemberAttributes.DEFAULT.getVmPid();
-    this.name = MemberAttributes.DEFAULT.getName();
-    this.groups = MemberAttributes.DEFAULT.getGroups();
-    this.vmViewId = MemberAttributes.DEFAULT.getVmViewId();
-    this.durableClientAttributes = MemberAttributes.DEFAULT.getDurableClientAttributes();
-    if (this.ipAddr instanceof JGroupMember) {
-      ((JGroupMember)this.ipAddr).getAddress().setProcessId(this.vmPid);
-    }
+    this.vmPid = OSProcess.getId();
-//    checkHostName();
+    synchPayload();
-    this.ipAddr = MemberFactory.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, attr);
+    this.netMbr = MemberFactory.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, Version.CURRENT_ORDINAL, attr);
+    this.version = netMbr.getVersionOrdinal();
+    try {
+      this.versionObj = Version.fromOrdinal(version, false);
+    } catch (UnsupportedVersionException e) {
+      this.versionObj = Version.CURRENT;
+    }
+  
-    ipAddr = m;
+    netMbr = m;
-    this.hostName = SocketCreator.resolve_dns? SocketCreator.getHostName(m.getIpAddress()) :
-      m.getIpAddress().getHostAddress();
+    this.hostName = SocketCreator.resolve_dns? SocketCreator.getHostName(m.getInetAddress()) :
+      m.getInetAddress().getHostAddress();
-    final IpAddress addr = ((JGroupMember)m).getAddress();
-    this.version = addr.getVersionOrdinal();
+    this.version = m.getVersionOrdinal();
-  
-//  private void checkHostName() {
+
+  //  private void checkHostName() {
-    ipAddr = MemberFactory.newNetMember(i, p);
+    this(i, p, Version.CURRENT);
+  }
+  
+  /**
+   * Create a InternalDistributedMember referring to the current host (as defined by the given
+   * string).<p>
+   *
+   * <b>
+   * [bruce]THIS METHOD IS FOR TESTING ONLY.  DO NOT USE IT TO CREATE IDs FOR
+   * USE IN THE PRODUCT.  IT DOES NOT PROPERLY INITIALIZE ATTRIBUTES NEEDED
+   * FOR P2P FUNCTIONALITY.
+   * </b>
+   *
+   * 
+   * @param i
+   *          the hostname, must be for the current host
+   * @param p
+   *          the membership listening port
+   * @param version
+   *          the version of this member
+   * @throws UnknownHostException if the given hostname cannot be resolved
+   */
+  public InternalDistributedMember(String i, int p, Version version) throws UnknownHostException {
+    netMbr = MemberFactory.newNetMember(i, p);
-    GFJGBasicAdapter.insertDefaultGemFireAttributes(((JGroupMember)ipAddr).getAddress());
+    this.versionObj = version;
-   * @param i
+   * @param host
+   * @param vmKind the dmType
+   * @param groups the server groups / roles
+   * @param attr durable client attributes, if any
+   * 
-  public InternalDistributedMember(String i, int p, String n, String u) throws UnknownHostException {
-    ipAddr = MemberFactory.newNetMember(i, p);
+  public InternalDistributedMember(String host, int p, String n, String u,
+      int vmKind, String[] groups, DurableClientAttributes attr) throws UnknownHostException {
+    MemberAttributes mattr = new MemberAttributes(p,
+        com.gemstone.gemfire.internal.OSProcess.getId(),
+        vmKind, -1,
+        n,
+        groups, attr);
+    InetAddress addr = SocketCreator.toInetAddress(host);
+    netMbr = MemberFactory.newNetMember(addr, p, false, true, Version.CURRENT_ORDINAL, mattr);
-    GFJGBasicAdapter.insertDefaultGemFireAttributes(((JGroupMember)ipAddr).getAddress());
+    this.vmKind = vmKind;
+    this.dcPort = p;
+    this.durableClientAttributes = attr;
+    this.hostName = host;
+    this.vmPid = OSProcess.getId();
+    this.groups = groups;
-    ipAddr = MemberFactory.newNetMember(i, p);
+    netMbr = MemberFactory.newNetMember(i, p);
-    ipAddr = MemberFactory.newNetMember(addr, p);
+    netMbr = MemberFactory.newNetMember(addr, p);
-  public InetAddress getIpAddress()
+  public InetAddress getInetAddress()
-    return ipAddr.getIpAddress();
+    return netMbr.getInetAddress();
-    return ipAddr;
+    return netMbr;
-    return ipAddr.getPort();
+    return netMbr.getPort();
-        if (tmpRoles.length == 0) {
+        if (tmpRoles == null  ||  tmpRoles.length == 0) {
-    ipAddr.setAttributes(new MemberAttributes(dcPort, vmPid, vmKind, 
+    netMbr.setAttributes(new MemberAttributes(dcPort, vmPid, vmKind, 
+    cachedToString = null;
-  public int compareTo(DistributedMember o)
-  {
+  public int compareTo(DistributedMember o) {
+    return compareTo(o, true);
+  }
+  
+  public int compareTo(DistributedMember o, boolean checkNetMembersIfEqual) {
-    InetAddress myAddr = getIpAddress();
-    InetAddress otherAddr = other.getIpAddress();
+    InetAddress myAddr = getInetAddress();
+    InetAddress otherAddr = other.getInetAddress();
-      if (this.vmViewId < other.vmViewId) {
-        return -1;
-      } else if (this.vmViewId > other.vmViewId) {
-        return 1;
-      } // else they're the same, so continue
+      if (this.vmViewId >= 0 && other.vmViewId >= 0) {
+        if (this.vmViewId < other.vmViewId) {
+          return -1;
+        } else if (this.vmViewId > other.vmViewId) {
+          return 1;
+        } // else they're the same, so continue
+      }
-
+    
+    if (checkNetMembersIfEqual
+        && this.netMbr != null && other.netMbr != null) {
+      return this.netMbr.compareTo(other.netMbr);
+    } else {
+      return 0;
+    }
+    
-    return 0;
-     result = result + ipAddr.getIpAddress().hashCode();
+     result = result + netMbr.getInetAddress().hashCode();
-      InetAddress add = getIpAddress();
+      InetAddress add = getInetAddress();
-        // for split-brain and security debugging we need to know if the
-        // member has the "can't be coordinator" bit set
-//        JGroupMember jgm = (JGroupMember)ipAddr;
-//        if (!jgm.getAddress().canBeCoordinator()) {
-//          sb.append("<p>");
-//        }
-      if (ipAddr.splitBrainEnabled()) {
-        if (ipAddr.canBeCoordinator()) {
-          sb.append("<ec>");
-        }
+      if (netMbr.preferredForCoordinator()) {
+        sb.append("<ec>");
+      if (SHOW_NETMEMBER) {
+        sb.append("[[").append(this.netMbr).append("]]");
+      }
+
+      
+//      if (netMbr instanceof GMSMember) {
+//        sb.append("(UUID=").append(((GMSMember)netMbr).getUUID()).append(")");
+//      }
+    } else {
+      // prior to 7.1 member IDs did not serialize their version information
+      Version v = InternalDataSerializer.getVersionForDataStreamOrNull(in);
+      if (v != null) {
+        this.versionObj = v;
+        this.version = v.ordinal();
+      }
-    byte[] address = getIpAddress().getAddress();
+    byte[] address = getInetAddress().getAddress();
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
+    netMbr.writeAdditionalData(out);
-     // do it the way we like
-     ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord,
+     netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version,
-     ((JGroupMember)ipAddr).getAddress().setVersionOrdinal(this.version);
+     if (this.version >= Version.GFE_90.ordinal()) {
+       try {
+         netMbr.readAdditionalData(in);
+       } catch (java.io.EOFException e) {
+         // old version quand-meme
+       }
+     }
+    toDataPre_GFE_9_0_0_0(out);
+    if (this.version >= Version.GFE_90.ordinal()) {
+      getNetMember().writeAdditionalData(out);
+    }
+  }
+  
+  
+  public void toDataPre_GFE_9_0_0_0(DataOutput out) throws IOException {
-    // [bruce] disabled to allow post-connect setting of the port for loner systems
-//    Assert.assertTrue(getPort() > 0);
-//    if (this.getPort() == 0) {
-//      InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG,
-//          "Serializing ID with zero port", new Exception("Stack trace"));
-//    }
-
-    DataSerializer.writeInetAddress(getIpAddress(), out);
+    DataSerializer.writeInetAddress(getInetAddress(), out);
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    DataSerializer.writeInetAddress(getIpAddress(), out);
+    DataSerializer.writeInetAddress(getInetAddress(), out);
-    if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-    if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+    if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+    if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
-    // do it the way we like it.
+    fromDataPre_GFE_9_0_0_0(in);
+    // just in case this is just a non-versioned read
+    // from a file we ought to check the version
+    if (this.version >= Version.GFE_90.ordinal()) {
+      netMbr.readAdditionalData(in);
+    }
+  }
+  
+  public void fromDataPre_GFE_9_0_0_0(DataInput in)
+  throws IOException, ClassNotFoundException {
-    ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
-    ((JGroupMember)ipAddr).getAddress().setVersionOrdinal(this.version);
+    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version, attr);
-    // do it the way we like it.
-    ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
+    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, 
+        InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
-     ipAddr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, attr);
+     netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, 
+         InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
+
+     if (InternalDataSerializer.getVersionForDataStream(in).compareTo(Version.GFE_90)>=0) {
+       netMbr.readAdditionalData(in);
+     }
-     DataSerializer.writeInetAddress(getIpAddress(), out);
+     DataSerializer.writeInetAddress(getInetAddress(), out);
-     if (ipAddr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
-     if (ipAddr.canBeCoordinator()) flags |= COORD_ENABLED_MASK;
+     if (netMbr.splitBrainEnabled()) flags |= SB_ENABLED_MASK;
+     if (netMbr.preferredForCoordinator()) flags |= COORD_ENABLED_MASK;
+
+     if (InternalDataSerializer.getVersionForDataStream(out).compareTo(Version.GFE_90)>=0) {
+       netMbr.writeAdditionalData(out);
+     }
-    this.ipAddr.setPort(p);
+    this.netMbr.setPort(p);
-    return this.ipAddr.getIpAddress().getCanonicalHostName();
+    return this.netMbr.getInetAddress().getCanonicalHostName();
-    if (ipAddr.getIpAddress() instanceof Inet4Address){
+    if (netMbr.getInetAddress() instanceof Inet4Address){

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS8 INS29 INS83 INS42 MOV44 INS44 INS44 INS43 MOV8 INS44 INS44 INS44 INS44 UPD42 MOV29 INS83 INS39 INS42 INS44 INS8 INS44 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD42 INS44 INS43 INS83 INS39 INS42 MOV44 INS43 MOV43 INS8 UPD42 UPD42 INS44 INS43 INS42 INS32 UPD42 INS40 MOV21 INS21 INS54 INS17 INS65 MOV65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS5 INS42 INS43 INS42 INS60 INS60 MOV21 MOV21 MOV21 INS21 INS21 MOV21 INS21 INS43 INS42 INS41 INS39 INS42 INS25 INS21 INS25 INS21 INS25 INS43 INS42 INS42 MOV21 MOV21 MOV21 MOV60 INS25 INS25 MOV25 MOV21 MOV21 MOV21 MOV60 MOV25 MOV25 MOV25 INS42 INS21 INS25 MOV21 MOV60 MOV21 MOV21 INS43 INS42 INS42 MOV60 MOV21 INS25 INS25 INS42 INS42 INS45 INS7 INS8 INS12 INS42 INS42 INS40 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS85 INS42 INS43 INS59 INS43 INS59 INS7 INS7 UPD42 INS7 INS42 INS32 MOV43 MOV43 INS8 INS27 INS8 INS8 MOV25 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS42 INS32 MOV21 INS32 MOV21 INS32 INS27 INS8 INS42 MOV32 INS27 INS8 INS27 INS8 INS40 UPD42 INS22 INS32 INS21 INS44 INS8 UPD42 UPD42 INS22 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 INS42 UPD42 INS42 INS22 INS42 MOV22 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS33 INS42 INS42 INS9 INS25 INS27 INS27 INS41 MOV41 MOV25 INS60 INS25 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV22 INS32 INS54 INS42 INS42 INS22 INS32 INS21 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 MOV22 INS32 INS21 UPD42 UPD42 UPD42 INS32 INS34 INS21 UPD42 UPD42 UPD42 INS32 INS34 INS21 INS42 UPD42 UPD42 INS40 INS52 INS42 INS42 INS42 INS7 INS43 INS42 INS21 UPD42 INS52 INS42 INS43 INS42 INS32 INS42 MOV38 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS9 INS9 INS40 INS42 INS52 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS27 MOV8 INS42 INS27 INS40 INS33 INS32 INS42 INS8 INS43 INS59 INS27 INS8 INS42 INS40 INS42 INS8 INS12 INS52 INS42 INS40 INS42 INS32 UPD42 UPD42 INS40 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS40 INS32 UPD42 INS32 INS42 INS40 INS32 UPD42 UPD42 UPD42 UPD42 INS22 INS32 INS42 INS7 INS42 INS40 INS42 INS27 INS27 INS22 INS33 INS22 INS42 INS40 UPD42 UPD42 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 MOV21 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS9 INS22 INS40 UPD42 UPD42 INS27 MOV22 INS34 INS40 INS34 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS27 MOV27 INS32 UPD42 MOV42 INS45 INS22 INS42 INS22 INS32 INS42 UPD42 MOV42 UPD42 INS40 INS42 INS33 INS32 INS42 INS22 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS45 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL39 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL20 DEL40 DEL52 DEL42 DEL22 DEL40 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL62 DEL8 DEL25 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL32 DEL21 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL42 DEL42 DEL32 DEL25 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32