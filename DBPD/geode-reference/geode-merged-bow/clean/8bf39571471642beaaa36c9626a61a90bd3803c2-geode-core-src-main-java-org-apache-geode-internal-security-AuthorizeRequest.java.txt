Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class implements authorization calls for various operations. It provides
- * methods to invoke authorization callback ({@link AccessControl#authorizeOperation})
- * before the actual operation to check for authorization (pre-processing) that
- * may modify the arguments to the operations. The data being passed for the
- * operation is encapsulated in a {@link OperationContext} object that can be
- * modified by the pre-processing authorization callbacks.
+ * This class implements authorization calls for various operations. It provides methods to invoke
+ * authorization callback ({@link AccessControl#authorizeOperation}) before the actual operation to
+ * check for authorization (pre-processing) that may modify the arguments to the operations. The
+ * data being passed for the operation is encapsulated in a {@link OperationContext} object that can
+ * be modified by the pre-processing authorization callbacks.
-  private ClientProxyMembershipID id; 
+  private ClientProxyMembershipID id;
-  public AuthorizeRequest(String authzFactoryName, DistributedMember dm,
-      Principal principal, Cache cache) throws ClassNotFoundException,
-      NoSuchMethodException, IllegalAccessException, InvocationTargetException,
-      NotAuthorizedException {
+  public AuthorizeRequest(String authzFactoryName, DistributedMember dm, Principal principal,
+      Cache cache) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, NotAuthorizedException {
-    }
-    else {
+    } else {
-    this.authzCallback = (AccessControl)authzMethod
-        .invoke(null, (Object[])null);
-    this.authzCallback.init(principal, dm, cache);  
+    this.authzCallback = (AccessControl) authzMethod.invoke(null, (Object[]) null);
+    this.authzCallback.init(principal, dm, cache);
-  
-  public AuthorizeRequest(String authzFactoryName, ClientProxyMembershipID id,
-      Principal principal, Cache cache) throws ClassNotFoundException,
-      NoSuchMethodException, IllegalAccessException, InvocationTargetException,
-      NotAuthorizedException {
+
+  public AuthorizeRequest(String authzFactoryName, ClientProxyMembershipID id, Principal principal,
+      Cache cache) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, NotAuthorizedException {
-    this.id = id; 
+    this.id = id;
-        LocalizedStrings.AuthorizeRequest_AUTHORIZEREQUEST_CLIENT_0_IS_SETTING_AUTHORIZATION_CALLBACK_TO_1,
-        new Object[] {id, authzFactoryName});
+          LocalizedStrings.AuthorizeRequest_AUTHORIZEREQUEST_CLIENT_0_IS_SETTING_AUTHORIZATION_CALLBACK_TO_1,
+          new Object[] {id, authzFactoryName});
-  public GetOperationContext getAuthorize(String regionName, Object key,
-      Object callbackArg) throws NotAuthorizedException {
+  public GetOperationContext getAuthorize(String regionName, Object key, Object callbackArg)
+      throws NotAuthorizedException {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_GET_OPERATION_ON_REGION_0.toLocalizedString(regionName);
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_GET_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
-        this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr}); 
+        this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform GET operation on region [" + regionName
-            + ']');
+        this.logger.finest(
+            toString() + ": Authorized to perform GET operation on region [" + regionName + ']');
-  public PutOperationContext putAuthorize(String regionName, Object key,
-      Object value, boolean isObject, Object callbackArg)
-      throws NotAuthorizedException {
+  public PutOperationContext putAuthorize(String regionName, Object key, Object value,
+      boolean isObject, Object callbackArg) throws NotAuthorizedException {
-    return putAuthorize(regionName, key, value, isObject,
-        callbackArg, PutOperationContext.UNKNOWN);
+    return putAuthorize(regionName, key, value, isObject, callbackArg, PutOperationContext.UNKNOWN);
-  public PutOperationContext putAuthorize(String regionName, Object key,
-      Object value, boolean isObject, Object callbackArg, byte opType)
-      throws NotAuthorizedException {
-    
-    PutOperationContext putContext = new PutOperationContext(key,
-        value, isObject, opType, false);    
+  public PutOperationContext putAuthorize(String regionName, Object key, Object value,
+      boolean isObject, Object callbackArg, byte opType) throws NotAuthorizedException {
+
+    PutOperationContext putContext = new PutOperationContext(key, value, isObject, opType, false);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_PUT_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_PUT_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform PUT operation on region [" + regionName
-            + ']');
+        this.logger.finest(
+            toString() + ": Authorized to perform PUT operation on region [" + regionName + ']');
-  throws NotAuthorizedException {
+      throws NotAuthorizedException {
-      final String errStr = 
-        LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_PUTALL_OPERATION_ON_REGION_0.toLocalizedString(regionName);
+      final String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_PUTALL_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform PUTALL operation on region [" + regionName
-            + ']');
+        this.logger.finest(
+            toString() + ": Authorized to perform PUTALL operation on region [" + regionName + ']');
-      
-      // now since we've authorized to run PUTALL, we also need to verify all the 
-      // <key,value> are authorized to run PUT
-      /* According to Jags and Suds, we will not auth PUT for PUTALL for now
-       * We will only do auth once for each operation, i.e. PUTALL only
-      Collection entries = map.entrySet();
-      Iterator iterator = entries.iterator();
-      Map.Entry mapEntry = null;
-      while (iterator.hasNext()) {
-        mapEntry = (Map.Entry)iterator.next();
-        String currkey = (String)mapEntry.getKey();
-        Object value = mapEntry.getValue();
-        boolean isObject = true;
-        if (value instanceof byte[]) {
-          isObject = false;
-        }
-        byte[] serializedValue = ((CachedDeserializable)value).getSerializedValue();
-        PutOperationContext putContext = new PutOperationContext(currkey,
-            serializedValue, isObject, PutOperationContext.UNKNOWN, false);
-        putContext.setCallbackArg(null);
-        if (!this.authzCallback.authorizeOperation(regionName, putContext)) {
-          String errStr = "Not authorized to perform PUT operation on region ["
-              + regionName + ']' + " for key "+currkey +". PUTALL is not authorized either.";
-          if (this.logger.warningEnabled()) {
-            this.logger.warning(toString() + ": " + errStr);
-          }
-          if (this.isPrincipalSerializable) {
-            throw new NotAuthorizedException(errStr, this.principal);
-          }
-          else {
-            throw new NotAuthorizedException(errStr);
-          }
-        } else {
-          if (this.logger.finestEnabled()) {
-            this.logger.finest(toString()
-                + ": PUT is authorized in PUTALL for "+currkey+" isObject("+isObject+") on region ["
-                + regionName + ']');
-          }
-        }
-      } // while iterating map
-      */
+      // now since we've authorized to run PUTALL, we also need to verify all the
+      // <key,value> are authorized to run PUT
+      /*
+       * According to Jags and Suds, we will not auth PUT for PUTALL for now We will only do auth
+       * once for each operation, i.e. PUTALL only Collection entries = map.entrySet(); Iterator
+       * iterator = entries.iterator(); Map.Entry mapEntry = null; while (iterator.hasNext()) {
+       * mapEntry = (Map.Entry)iterator.next(); String currkey = (String)mapEntry.getKey(); Object
+       * value = mapEntry.getValue(); boolean isObject = true; if (value instanceof byte[]) {
+       * isObject = false; } byte[] serializedValue =
+       * ((CachedDeserializable)value).getSerializedValue();
+       * 
+       * PutOperationContext putContext = new PutOperationContext(currkey, serializedValue,
+       * isObject, PutOperationContext.UNKNOWN, false); putContext.setCallbackArg(null); if
+       * (!this.authzCallback.authorizeOperation(regionName, putContext)) { String errStr =
+       * "Not authorized to perform PUT operation on region [" + regionName + ']' +
+       * " for key "+currkey +". PUTALL is not authorized either."; if
+       * (this.logger.warningEnabled()) { this.logger.warning(toString() + ": " + errStr); } if
+       * (this.isPrincipalSerializable) { throw new NotAuthorizedException(errStr, this.principal);
+       * } else { throw new NotAuthorizedException(errStr); } } else { if
+       * (this.logger.finestEnabled()) { this.logger.finest(toString() +
+       * ": PUT is authorized in PUTALL for "+currkey+" isObject("+isObject+") on region [" +
+       * regionName + ']'); } } } // while iterating map
+       */
-  
-  public RemoveAllOperationContext removeAllAuthorize(String regionName, Collection<?> keys, Object callbackArg)
-  throws NotAuthorizedException {
+
+  public RemoveAllOperationContext removeAllAuthorize(String regionName, Collection<?> keys,
+      Object callbackArg) throws NotAuthorizedException {
-      final String errStr = 
-        LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REMOVEALL_OPERATION_ON_REGION_0.toLocalizedString(regionName);
+      final String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REMOVEALL_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform removeAll operation on region [" + regionName
-            + ']');
+        this.logger.finest(toString() + ": Authorized to perform removeAll operation on region ["
+            + regionName + ']');
-  public DestroyOperationContext destroyAuthorize(String regionName,
-      Object key, Object callbackArg) throws NotAuthorizedException {
-    DestroyOperationContext destroyEntryContext = new DestroyOperationContext(
-        key);
+  public DestroyOperationContext destroyAuthorize(String regionName, Object key, Object callbackArg)
+      throws NotAuthorizedException {
+
+    DestroyOperationContext destroyEntryContext = new DestroyOperationContext(key);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_DESTROY_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_DESTROY_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform DESTROY operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform DESTROY operation on region ["
-  public QueryOperationContext queryAuthorize(String queryString,
-      Set regionNames) throws NotAuthorizedException {
+  public QueryOperationContext queryAuthorize(String queryString, Set regionNames)
+      throws NotAuthorizedException {
-  
-  public QueryOperationContext queryAuthorize(String queryString,
-      Set regionNames, Object[] queryParams) throws NotAuthorizedException {
+
+  public QueryOperationContext queryAuthorize(String queryString, Set regionNames,
+      Object[] queryParams) throws NotAuthorizedException {
-    QueryOperationContext queryContext = new QueryOperationContext(queryString,
-        regionNames, false, queryParams);
+    QueryOperationContext queryContext =
+        new QueryOperationContext(queryString, regionNames, false, queryParams);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_QUERY_OPERATION_0_ON_THE_CACHE.toLocalizedString(queryString);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_QUERY_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(queryString);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform QUERY operation [" + queryString
-            + "] on cache");
+        this.logger.finest(
+            toString() + ": Authorized to perform QUERY operation [" + queryString + "] on cache");
-  public ExecuteCQOperationContext executeCQAuthorize(String cqName,
-      String queryString, Set regionNames) throws NotAuthorizedException {
+  public ExecuteCQOperationContext executeCQAuthorize(String cqName, String queryString,
+      Set regionNames) throws NotAuthorizedException {
-    ExecuteCQOperationContext executeCQContext = new ExecuteCQOperationContext(
-        cqName, queryString, regionNames, false);
+    ExecuteCQOperationContext executeCQContext =
+        new ExecuteCQOperationContext(cqName, queryString, regionNames, false);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_EXECUTE_CQ_OPERATION_0_ON_THE_CACHE.toLocalizedString(queryString);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_EXECUTE_CQ_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(queryString);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform EXECUTE_CQ operation [" + queryString
-            + "] on cache");
+        this.logger.finest(toString() + ": Authorized to perform EXECUTE_CQ operation ["
+            + queryString + "] on cache");
-    StopCQOperationContext stopCQContext = new StopCQOperationContext(cqName,
-        queryString, regionNames);
+    StopCQOperationContext stopCQContext =
+        new StopCQOperationContext(cqName, queryString, regionNames);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_STOP_CQ_OPERATION_0_ON_THE_CACHE.toLocalizedString(cqName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_STOP_CQ_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(cqName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform STOP_CQ operation [" + cqName + ','
+        this.logger.finest(toString() + ": Authorized to perform STOP_CQ operation [" + cqName + ','
-  public void closeCQAuthorize(String cqName, String queryString,
-      Set regionNames) throws NotAuthorizedException {
-
-    CloseCQOperationContext closeCQContext = new CloseCQOperationContext(
-        cqName, queryString, regionNames);
-    if (!this.authzCallback.authorizeOperation(null, closeCQContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_CLOSE_CQ_OPERATION_0_ON_THE_CACHE.toLocalizedString(cqName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
-      if (this.isPrincipalSerializable) {
-        throw new NotAuthorizedException(errStr, this.principal);
-      }
-      else {
-        throw new NotAuthorizedException(errStr);
-      }
-    }
-    else {
-      if (this.logger.finestEnabled()) {
-        this.logger.finest(toString()
-            + ": Authorized to perform CLOSE_CQ operation [" + cqName + ','
-            + queryString + "] on cache");
-      }
-    }
-  }
-
-  public void getDurableCQsAuthorize()
+  public void closeCQAuthorize(String cqName, String queryString, Set regionNames)
+    CloseCQOperationContext closeCQContext =
+        new CloseCQOperationContext(cqName, queryString, regionNames);
+    if (!this.authzCallback.authorizeOperation(null, closeCQContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFOM_CLOSE_CQ_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(cqName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
+      if (this.isPrincipalSerializable) {
+        throw new NotAuthorizedException(errStr, this.principal);
+      } else {
+        throw new NotAuthorizedException(errStr);
+      }
+    } else {
+      if (this.logger.finestEnabled()) {
+        this.logger.finest(toString() + ": Authorized to perform CLOSE_CQ operation [" + cqName
+            + ',' + queryString + "] on cache");
+      }
+    }
+  }
+
+  public void getDurableCQsAuthorize() throws NotAuthorizedException {
+
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_GET_DURABLE_CQS_OPERATION_0_ON_THE_CACHE.toLocalizedString();
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_GET_DURABLE_CQS_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString();
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform GET_DURABLE_CQS operation on cache");
+        this.logger
+            .finest(toString() + ": Authorized to perform GET_DURABLE_CQS operation on cache");
-  
-  public RegionClearOperationContext clearAuthorize(String regionName,
-      Object callbackArg) throws NotAuthorizedException {
-    RegionClearOperationContext regionClearContext = new RegionClearOperationContext(
-        false);
+  public RegionClearOperationContext clearAuthorize(String regionName, Object callbackArg)
+      throws NotAuthorizedException {
+
+    RegionClearOperationContext regionClearContext = new RegionClearOperationContext(false);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGION_CLEAR_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGION_CLEAR_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform REGION_CLEAR operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform REGION_CLEAR operation on region ["
-  public RegisterInterestOperationContext registerInterestAuthorize(
-      String regionName, Object key, int interestType,
-      InterestResultPolicy policy) throws NotAuthorizedException {
+  public RegisterInterestOperationContext registerInterestAuthorize(String regionName, Object key,
+      int interestType, InterestResultPolicy policy) throws NotAuthorizedException {
-        key, InterestType.fromOrdinal((byte)interestType), policy);
-    if (!this.authzCallback.authorizeOperation(regionName,
-        registerInterestContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGISTER_INTEREST_OPERATION_FOR_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+        key, InterestType.fromOrdinal((byte) interestType), policy);
+    if (!this.authzCallback.authorizeOperation(regionName, registerInterestContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGISTER_INTEREST_OPERATION_FOR_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-            .finest(toString()
-                + ": Authorized to perform REGISTER_INTEREST operation for region ["
+            .finest(toString() + ": Authorized to perform REGISTER_INTEREST operation for region ["
-  public RegisterInterestOperationContext registerInterestListAuthorize(
-      String regionName, List keys, InterestResultPolicy policy)
-      throws NotAuthorizedException {
+  public RegisterInterestOperationContext registerInterestListAuthorize(String regionName,
+      List keys, InterestResultPolicy policy) throws NotAuthorizedException {
-    registerInterestListContext = new RegisterInterestOperationContext(keys,
-        InterestType.LIST, policy);
-    if (!this.authzCallback.authorizeOperation(regionName,
-        registerInterestListContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGISTER_INTEREST_LIST_OPERATION_FOR_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+    registerInterestListContext =
+        new RegisterInterestOperationContext(keys, InterestType.LIST, policy);
+    if (!this.authzCallback.authorizeOperation(regionName, registerInterestListContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGISTER_INTEREST_LIST_OPERATION_FOR_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger
-            .finest(toString()
-                + ": Authorized to perform REGISTER_INTEREST_LIST operation for region ["
+        this.logger.finest(
+            toString() + ": Authorized to perform REGISTER_INTEREST_LIST operation for region ["
-  public UnregisterInterestOperationContext unregisterInterestAuthorize(
-      String regionName, Object key, int interestType)
-      throws NotAuthorizedException {
+  public UnregisterInterestOperationContext unregisterInterestAuthorize(String regionName,
+      Object key, int interestType) throws NotAuthorizedException {
-    unregisterInterestContext = new UnregisterInterestOperationContext(key,
-        InterestType.fromOrdinal((byte)interestType));
-    if (!this.authzCallback.authorizeOperation(regionName,
-        unregisterInterestContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_UNREGISTER_INTEREST_OPERATION_FOR_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+    unregisterInterestContext =
+        new UnregisterInterestOperationContext(key, InterestType.fromOrdinal((byte) interestType));
+    if (!this.authzCallback.authorizeOperation(regionName, unregisterInterestContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_UNREGISTER_INTEREST_OPERATION_FOR_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform DESTROY operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform DESTROY operation on region ["
-  public UnregisterInterestOperationContext unregisterInterestListAuthorize(
-      String regionName, List keys) throws NotAuthorizedException {
+  public UnregisterInterestOperationContext unregisterInterestListAuthorize(String regionName,
+      List keys) throws NotAuthorizedException {
-    unregisterInterestListContext = new UnregisterInterestOperationContext(
-        keys, InterestType.LIST);
-    if (!this.authzCallback.authorizeOperation(regionName,
-        unregisterInterestListContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_UNREGISTER_INTEREST_LIST_OPERATION_FOR_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+    unregisterInterestListContext = new UnregisterInterestOperationContext(keys, InterestType.LIST);
+    if (!this.authzCallback.authorizeOperation(regionName, unregisterInterestListContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_UNREGISTER_INTEREST_LIST_OPERATION_FOR_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger
-            .finest(toString()
-                + ": Authorized to perform UNREGISTER_INTEREST_LIST operation for region ["
+        this.logger.finest(
+            toString() + ": Authorized to perform UNREGISTER_INTEREST_LIST operation for region ["
-  public KeySetOperationContext keySetAuthorize(String regionName)
-      throws NotAuthorizedException {
+  public KeySetOperationContext keySetAuthorize(String regionName) throws NotAuthorizedException {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_KEY_SET_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_KEY_SET_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform KEY_SET operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform KEY_SET operation on region ["
-  public void containsKeyAuthorize(String regionName, Object key)
-      throws NotAuthorizedException {
+  public void containsKeyAuthorize(String regionName, Object key) throws NotAuthorizedException {
-    ContainsKeyOperationContext containsKeyContext = new ContainsKeyOperationContext(
-        key);
+    ContainsKeyOperationContext containsKeyContext = new ContainsKeyOperationContext(key);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_CONTAINS_KEY_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_CONTAINS_KEY_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform CONTAINS_KEY operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform CONTAINS_KEY operation on region ["
-  public void createRegionAuthorize(String regionName)
+  public void createRegionAuthorize(String regionName) throws NotAuthorizedException {
+
+    RegionCreateOperationContext regionCreateContext = new RegionCreateOperationContext(false);
+    if (!this.authzCallback.authorizeOperation(regionName, regionCreateContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_CREATE_REGION_OPERATION_FOR_THE_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
+      if (this.isPrincipalSerializable) {
+        throw new NotAuthorizedException(errStr, this.principal);
+      } else {
+        throw new NotAuthorizedException(errStr);
+      }
+    } else {
+      if (this.logger.finestEnabled()) {
+        this.logger.finest(toString()
+            + ": Authorized to perform REGION_CREATE operation of region [" + regionName + ']');
+      }
+    }
+  }
+
+  public RegionDestroyOperationContext destroyRegionAuthorize(String regionName, Object callbackArg)
-    RegionCreateOperationContext regionCreateContext = new RegionCreateOperationContext(
-        false);
-    if (!this.authzCallback.authorizeOperation(regionName, regionCreateContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_CREATE_REGION_OPERATION_FOR_THE_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
-      if (this.isPrincipalSerializable) {
-        throw new NotAuthorizedException(errStr, this.principal);
-      }
-      else {
-        throw new NotAuthorizedException(errStr);
-      }
-    }
-    else {
-      if (this.logger.finestEnabled()) {
-        this.logger.finest(toString()
-            + ": Authorized to perform REGION_CREATE operation of region ["
-            + regionName + ']');
-      }
-    }
-  }
-
-  public RegionDestroyOperationContext destroyRegionAuthorize(
-      String regionName, Object callbackArg) throws NotAuthorizedException {
-
-    RegionDestroyOperationContext regionDestroyContext = new RegionDestroyOperationContext(
-        false);
+    RegionDestroyOperationContext regionDestroyContext = new RegionDestroyOperationContext(false);
-    if (!this.authzCallback
-        .authorizeOperation(regionName, regionDestroyContext)) {
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGION_DESTROY_OPERATION_FOR_THE_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+    if (!this.authzCallback.authorizeOperation(regionName, regionDestroyContext)) {
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_REGION_DESTROY_OPERATION_FOR_THE_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-            + ": Authorized to perform REGION_DESTROY operation for region ["
-            + regionName + ']');
+            + ": Authorized to perform REGION_DESTROY operation for region [" + regionName + ']');
-  
-  public ExecuteFunctionOperationContext executeFunctionAuthorize(
-      String functionName, String region, Set keySet, Object arguments, boolean optimizeForWrite)
+
+  public ExecuteFunctionOperationContext executeFunctionAuthorize(String functionName,
+      String region, Set keySet, Object arguments, boolean optimizeForWrite)
-      final String errStr = LocalizedStrings.
-        AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_REGION_FUNCTION_OPERATION
-          .toLocalizedString();
+      final String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_REGION_FUNCTION_OPERATION
+              .toLocalizedString();
-        this.logger.warning(LocalizedStrings.TWO_ARG_COLON,
-            new Object[] {this, errStr});
+        this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform EXECUTE_REGION_FUNCTION operation ");
+        this.logger
+            .finest(toString() + ": Authorized to perform EXECUTE_REGION_FUNCTION operation ");
-  public InvalidateOperationContext invalidateAuthorize(String regionName,
-      Object key, Object callbackArg) throws NotAuthorizedException {
+  public InvalidateOperationContext invalidateAuthorize(String regionName, Object key,
+      Object callbackArg) throws NotAuthorizedException {
-    InvalidateOperationContext invalidateEntryContext = new InvalidateOperationContext(
-        key);
+    InvalidateOperationContext invalidateEntryContext = new InvalidateOperationContext(key);
-      String errStr = LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_INVALIDATE_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-          LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {this, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequest_NOT_AUTHORIZED_TO_PERFORM_INVALIDATE_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this, errStr});
-      }
-      else {
+      } else {
-    }
-    else {
+    } else {
-        this.logger.finest(toString()
-            + ": Authorized to perform INVALIDATE operation on region ["
+        this.logger.finest(toString() + ": Authorized to perform INVALIDATE operation on region ["
-    return (this.id == null ? "ClientProxyMembershipID not available" : id.toString()) + ",Principal:"
-    + (this.principal == null ? "" : this.principal.getName());
+    return (this.id == null ? "ClientProxyMembershipID not available" : id.toString())
+        + ",Principal:" + (this.principal == null ? "" : this.principal.getName());

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66