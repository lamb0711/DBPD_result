Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>Invoke</code> provides static utility methods that allow a
- * <code>DistributedTest</code> to invoke a <code>SerializableRunnable</code>
- * or <code>SerializableCallable</code> in a remote test <code>VM</code>.
+ * <code>Invoke</code> provides static utility methods that allow a <code>DistributedTest</code> to
+ * invoke a <code>SerializableRunnable</code> or <code>SerializableCallable</code> in a remote test
+ * <code>VM</code>.
- * These methods can be used directly: <code>Invoke.invokeInEveryVM(...)</code>, 
- * however, they are intended to be referenced through static import:
+ * These methods can be used directly: <code>Invoke.invokeInEveryVM(...)</code>, however, they are
+ * intended to be referenced through static import:
-  protected Invoke() {
-  }
-  
+  protected Invoke() {}
+
-   * Invokes a <code>SerializableRunnable</code> in every VM that
-   * DUnit knows about.
+   * Invokes a <code>SerializableRunnable</code> in every VM that DUnit knows about.
-        if (name!=null)
+        if (name != null)
-   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another non-deprecated method in <code>Invoke</code> instead.
+   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another
+   *             non-deprecated method in <code>Invoke</code> instead.
-  
+
-   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another non-deprecated method in <code>Invoke</code> instead.
+   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another
+   *             non-deprecated method in <code>Invoke</code> instead.
-  public static void invokeInEveryVM(final Class<?> targetClass, final String targetMethod, final Object[] methodArgs) {
+  public static void invokeInEveryVM(final Class<?> targetClass, final String targetMethod,
+      final Object[] methodArgs) {
-  
+
-   * Invokes a <code>SerializableCallable</code> in every VM that
-   * DUnit knows about.
+   * Invokes a <code>SerializableCallable</code> in every VM that DUnit knows about.
-  public static <T> Map<VM, T> invokeInEveryVM(String name, final SerializableCallableIF<T> callable) {
+  public static <T> Map<VM, T> invokeInEveryVM(String name,
+      final SerializableCallableIF<T> callable) {
-        if(name != null)
+        if (name != null)
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-  public static void invokeRepeatingIfNecessary(final VM vm, final RepeatableRunnable runnable, final long repeatTimeoutMs) {
+  public static void invokeRepeatingIfNecessary(final VM vm, final RepeatableRunnable runnable,
+      final long repeatTimeoutMs) {
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-   * Invokes a <code>SerializableRunnable</code> in every VM that
-   * DUnit knows about.  If <code>run()</code> throws an assertion failure, 
-   * its execution is repeated, until no assertion failure occurs or
-   * <code>repeatTimeoutMs</code> milliseconds have passed.
+   * Invokes a <code>SerializableRunnable</code> in every VM that DUnit knows about. If
+   * <code>run()</code> throws an assertion failure, its execution is repeated, until no assertion
+   * failure occurs or <code>repeatTimeoutMs</code> milliseconds have passed.
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-  public static void invokeInEveryVMRepeatingIfNecessary(final RepeatableRunnable runnable, final long repeatTimeoutMs) {
+  public static void invokeInEveryVMRepeatingIfNecessary(final RepeatableRunnable runnable,
+      final long repeatTimeoutMs) {
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66