Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A factory for constructing {@link ClientCache client cache} {@link Region
- * regions}. Instances of this interface can be created using region shortcuts
- * by calling
- * {@link ClientCache#createClientRegionFactory(ClientRegionShortcut)} or using
- * named region attributes by calling
- * {@link ClientCache#createClientRegionFactory(String)}.
+ * A factory for constructing {@link ClientCache client cache} {@link Region regions}. Instances of
+ * this interface can be created using region shortcuts by calling
+ * {@link ClientCache#createClientRegionFactory(ClientRegionShortcut)} or using named region
+ * attributes by calling {@link ClientCache#createClientRegionFactory(String)}.
- * The final step is to produce a {@link Region} by calling
- * {@link #create(String)}.
+ * The final step is to produce a {@link Region} by calling {@link #create(String)}.
- * <li>LOCAL: which only have local data; they do not communicate with the
- * servers.
+ * <li>LOCAL: which only have local data; they do not communicate with the servers.
- * See {@link ClientRegionShortcut} for the shortcuts for these three types of
- * client regions.
+ * See {@link ClientRegionShortcut} for the shortcuts for these three types of client regions.
- * Region r = c.createClientRegionFactory(CACHING_PROXY).addCacheListener(
- *     myListener).create(&quot;customers&quot;);
+ * Region r =
+ *     c.createClientRegionFactory(CACHING_PROXY).addCacheListener(myListener).create(&quot;customers&quot;);
-public interface ClientRegionFactory<K,V> {
+public interface ClientRegionFactory<K, V> {
+   * 
-  public ClientRegionFactory<K,V> addCacheListener(CacheListener<K,V> aListener);
+  public ClientRegionFactory<K, V> addCacheListener(CacheListener<K, V> aListener);
-   * Removes all cache listeners and then adds each listener in the specified array.
-   * for the next <code>RegionAttributes</code> created.
+   * Removes all cache listeners and then adds each listener in the specified array. for the next
+   * <code>RegionAttributes</code> created.
+   * 
-  public ClientRegionFactory<K,V> initCacheListeners(CacheListener<K,V>[] newListeners);
+  public ClientRegionFactory<K, V> initCacheListeners(CacheListener<K, V>[] newListeners);
-  public ClientRegionFactory<K,V> setEvictionAttributes(EvictionAttributes evictionAttributes);
+  public ClientRegionFactory<K, V> setEvictionAttributes(EvictionAttributes evictionAttributes);
-   * @param idleTimeout
-   *          the idleTimeout ExpirationAttributes for entries in this region
+   * @param idleTimeout the idleTimeout ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if idleTimeout is null
+   * @throws IllegalArgumentException if idleTimeout is null
-  public ClientRegionFactory<K,V> setEntryIdleTimeout(ExpirationAttributes idleTimeout);
+  public ClientRegionFactory<K, V> setEntryIdleTimeout(ExpirationAttributes idleTimeout);
-   * Sets the custom idleTimeout for the next <code>RegionAttributes</code>
-   * created.
+   * Sets the custom idleTimeout for the next <code>RegionAttributes</code> created.
-  public ClientRegionFactory<K,V> setCustomEntryIdleTimeout(CustomExpiry<K,V> custom);
-  
+  public ClientRegionFactory<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom);
+
-   * @param timeToLive
-   *          the timeToLive ExpirationAttributes for entries in this region
+   * @param timeToLive the timeToLive ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if timeToLive is null
+   * @throws IllegalArgumentException if timeToLive is null
-  public ClientRegionFactory<K,V> setEntryTimeToLive(ExpirationAttributes timeToLive);
+  public ClientRegionFactory<K, V> setEntryTimeToLive(ExpirationAttributes timeToLive);
-   * Sets the custom timeToLive expiration method for the next 
-   * <code>RegionAttributes</code> created.
+   * Sets the custom timeToLive expiration method for the next <code>RegionAttributes</code>
+   * created.
+   * 
-  public ClientRegionFactory<K,V> setCustomEntryTimeToLive(CustomExpiry<K,V> custom);
-  
+  public ClientRegionFactory<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom);
+
-   * Sets the idleTimeout expiration attributes for the region itself for the
-   * next <code>RegionAttributes</code> created.
+   * Sets the idleTimeout expiration attributes for the region itself for the next
+   * <code>RegionAttributes</code> created.
-   * @param idleTimeout
-   *          the ExpirationAttributes for this region idleTimeout
+   * @param idleTimeout the ExpirationAttributes for this region idleTimeout
-   * @throws IllegalArgumentException
-   *           if idleTimeout is null
+   * @throws IllegalArgumentException if idleTimeout is null
-  public ClientRegionFactory<K,V> setRegionIdleTimeout(ExpirationAttributes idleTimeout);
+  public ClientRegionFactory<K, V> setRegionIdleTimeout(ExpirationAttributes idleTimeout);
-   * Sets the timeToLive expiration attributes for the region itself for the
-   * next <code>RegionAttributes</code> created.
+   * Sets the timeToLive expiration attributes for the region itself for the next
+   * <code>RegionAttributes</code> created.
-   * @param timeToLive
-   *          the ExpirationAttributes for this region timeToLive
+   * @param timeToLive the ExpirationAttributes for this region timeToLive
-   * @throws IllegalArgumentException
-   *           if timeToLive is null
+   * @throws IllegalArgumentException if timeToLive is null
-  public ClientRegionFactory<K,V> setRegionTimeToLive(ExpirationAttributes timeToLive);
+  public ClientRegionFactory<K, V> setRegionTimeToLive(ExpirationAttributes timeToLive);
-   * Sets the key constraint for the next <code>RegionAttributes</code>
-   * created. Keys in the region will be constrained to this class (or
-   * subclass). Any attempt to store a key of an incompatible type in the region
-   * will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the key constraint for the next <code>RegionAttributes</code> created. Keys in the region
+   * will be constrained to this class (or subclass). Any attempt to store a key of an incompatible
+   * type in the region will cause a <code>ClassCastException</code> to be thrown.
-   * @param keyConstraint
-   *          The Class to constrain the keys to, or null if no constraint
+   * @param keyConstraint The Class to constrain the keys to, or null if no constraint
-   * @throws IllegalArgumentException
-   *           if <code>keyConstraint</code> is a class denoting a primitive
-   *           type
+   * @throws IllegalArgumentException if <code>keyConstraint</code> is a class denoting a primitive
+   *         type
-  public ClientRegionFactory<K,V> setKeyConstraint(Class<K> keyConstraint);
+  public ClientRegionFactory<K, V> setKeyConstraint(Class<K> keyConstraint);
-   * Sets the value constraint for the next <code>RegionAttributes</code>
-   * created. Values in the region will be constrained to this class (or
-   * subclass). Any attempt to store a value of an incompatible type in the
-   * region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the value constraint for the next <code>RegionAttributes</code> created. Values in the
+   * region will be constrained to this class (or subclass). Any attempt to store a value of an
+   * incompatible type in the region will cause a <code>ClassCastException</code> to be thrown.
-   * @param valueConstraint
-   *          The Class to constrain the values to, or null if no constraint
+   * @param valueConstraint The Class to constrain the values to, or null if no constraint
-   * @throws IllegalArgumentException
-   *           if <code>valueConstraint</code> is a class denoting a primitive
-   *           type
+   * @throws IllegalArgumentException if <code>valueConstraint</code> is a class denoting a
+   *         primitive type
-  public ClientRegionFactory<K,V> setValueConstraint(Class<V> valueConstraint);
+  public ClientRegionFactory<K, V> setValueConstraint(Class<V> valueConstraint);
-   * Sets the entry initial capacity for the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the entry initial capacity for the next <code>RegionAttributes</code> created. This value
+   * is used in initializing the map that holds the entries.
-   * @param initialCapacity
-   *          the initial capacity of the entry map
+   * @param initialCapacity the initial capacity of the entry map
-  public ClientRegionFactory<K,V> setInitialCapacity(int initialCapacity);
+  public ClientRegionFactory<K, V> setInitialCapacity(int initialCapacity);
-   * Sets the entry load factor for the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the entry load factor for the next <code>RegionAttributes</code> created. This value is
+   * used in initializing the map that holds the entries.
-   * @param loadFactor
-   *          the load factor of the entry map
+   * @param loadFactor the load factor of the entry map
-   * @throws IllegalArgumentException
-   *           if loadFactor is nonpositive
+   * @throws IllegalArgumentException if loadFactor is nonpositive
-  public ClientRegionFactory<K,V> setLoadFactor(float loadFactor);
+  public ClientRegionFactory<K, V> setLoadFactor(float loadFactor);
-   * Sets the concurrency level tof the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the concurrency level tof the next <code>RegionAttributes</code> created. This value is
+   * used in initializing the map that holds the entries.
-   * @param concurrencyLevel
-   *          the concurrency level of the entry map
+   * @param concurrencyLevel the concurrency level of the entry map
-   * @throws IllegalArgumentException
-   *           if concurrencyLevel is nonpositive
+   * @throws IllegalArgumentException if concurrencyLevel is nonpositive
-  public ClientRegionFactory<K,V> setConcurrencyLevel(int concurrencyLevel);
+  public ClientRegionFactory<K, V> setConcurrencyLevel(int concurrencyLevel);
+   * 
-   * Sets the DiskStore name attribute.
-   * This causes the region to belong to the DiskStore.
+   * Sets the DiskStore name attribute. This causes the region to belong to the DiskStore.
+   * 
-  public ClientRegionFactory<K,V> setDiskStoreName(String name);
+  public ClientRegionFactory<K, V> setDiskStoreName(String name);
-   * @param isSynchronous
-   *          boolean if true indicates synchronous writes
+   * @param isSynchronous boolean if true indicates synchronous writes
-  public ClientRegionFactory<K,V> setDiskSynchronous(boolean isSynchronous);
+  public ClientRegionFactory<K, V> setDiskSynchronous(boolean isSynchronous);
-   * @param statisticsEnabled
-   *          whether statistics are enabled
+   * @param statisticsEnabled whether statistics are enabled
-  public ClientRegionFactory<K,V> setStatisticsEnabled(boolean statisticsEnabled);
+  public ClientRegionFactory<K, V> setStatisticsEnabled(boolean statisticsEnabled);
-   * Sets cloning on region
-   * Note: off-heap regions always behave as if cloning is enabled.
+   * Sets cloning on region Note: off-heap regions always behave as if cloning is enabled.
+   * 
-  public ClientRegionFactory<K,V> setCloningEnabled(boolean cloningEnable);
+  public ClientRegionFactory<K, V> setCloningEnabled(boolean cloningEnable);
-   * Sets the pool name attribute.
-   * This causes regions that use these attributes
-   * to be a client region which communicates with the
-   * servers that the connection pool communicates with.
-   * <p>The named connection pool must exist on the cache at the time these
-   * attributes are used to create a region. See {@link PoolManager#createFactory}
-   * for how to create a connection pool.
+   * Sets the pool name attribute. This causes regions that use these attributes to be a client
+   * region which communicates with the servers that the connection pool communicates with.
+   * <p>
+   * The named connection pool must exist on the cache at the time these attributes are used to
+   * create a region. See {@link PoolManager#createFactory} for how to create a connection pool.
+   * 
-   * @throws IllegalStateException if a cache loader or cache writer has already
-   * been set.
+   * @throws IllegalStateException if a cache loader or cache writer has already been set.
-  public ClientRegionFactory<K,V> setPoolName(String poolName);
+  public ClientRegionFactory<K, V> setPoolName(String poolName);
-   * Set the compressor to be used by this region for compressing
-   * region entry values.
+   * Set the compressor to be used by this region for compressing region entry values.
+   * 
-  public ClientRegionFactory<K,V> setCompressor(Compressor compressor);
-  
+  public ClientRegionFactory<K, V> setCompressor(Compressor compressor);
+
-   * Creates a region in the {@link ClientCache} using
-   * the configuration contained in this ClientRegionFactory. Validation of the
-   * provided attributes may cause exceptions to be thrown if there are problems
-   * with the configuration data.
+   * Creates a region in the {@link ClientCache} using the configuration contained in this
+   * ClientRegionFactory. Validation of the provided attributes may cause exceptions to be thrown if
+   * there are problems with the configuration data.
-   * @param name
-   *          the name of the region to create
+   * @param name the name of the region to create
-   * @throws RegionExistsException
-   *           if a region with the given name already exists in this cache
-   * @throws CacheClosedException
-   *           if the cache is closed
+   * @throws RegionExistsException if a region with the given name already exists in this cache
+   * @throws CacheClosedException if the cache is closed
-  public Region<K,V> create(String name) throws RegionExistsException;
+  public Region<K, V> create(String name) throws RegionExistsException;
+
-   * Creates a sub-region in the {@link ClientCache} using
-   * the configuration contained in this ClientRegionFactory. Validation of the
-   * provided attributes may cause exceptions to be thrown if there are problems
-   * with the configuration data.
+   * Creates a sub-region in the {@link ClientCache} using the configuration contained in this
+   * ClientRegionFactory. Validation of the provided attributes may cause exceptions to be thrown if
+   * there are problems with the configuration data.
-   * @param parent
-   *          the existing region that will contain the created sub-region
-   * @param name
-   *          the name of the region to create
+   * @param parent the existing region that will contain the created sub-region
+   * @param name the name of the region to create
-   * @throws RegionExistsException
-   *           if a region with the given name already exists in this cache
-   * @throws RegionDestroyedException
-   *           if the parent region has been closed or destroyed
-   * @throws CacheClosedException
-   *           if the cache is closed
+   * @throws RegionExistsException if a region with the given name already exists in this cache
+   * @throws RegionDestroyedException if the parent region has been closed or destroyed
+   * @throws CacheClosedException if the cache is closed
-  public Region<K,V> createSubregion(Region<?,?> parent, String name) throws RegionExistsException;
-  
+  public Region<K, V> createSubregion(Region<?, ?> parent, String name)
+      throws RegionExistsException;
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66