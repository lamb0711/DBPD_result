Merge branch 'release/1.4.0'

+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileFilter;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactoryConfigurationError;
+
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.RemoteInputStreamClient;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.Logger;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
-import org.apache.geode.distributed.LeaseExpiredException;
-import org.apache.geode.management.internal.configuration.functions.UploadJarFunction;
-import org.apache.geode.management.internal.configuration.messages.ConfigurationRequest;
+import org.apache.geode.management.internal.configuration.functions.DownloadJarFunction;
-import org.apache.logging.log4j.Logger;
-import org.w3c.dom.Document;
-import org.xml.sax.SAXException;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.nio.file.Path;
-import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Properties;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.stream.Collectors;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactoryConfigurationError;
-   * 
-   * @return true on success
-  public boolean addJarsToThisLocator(String[] jarNames, byte[][] jarBytes, String[] groups) {
+  public void addJarsToThisLocator(List<String> jarFullPaths, String[] groups) throws IOException {
-    boolean success = true;
-        for (int i = 0; i < jarNames.length; i++) {
-          String filePath = FilenameUtils.concat(groupDir, jarNames[i]);
-          try {
-            File jarFile = new File(filePath);
-            FileUtils.writeByteArrayToFile(jarFile, jarBytes[i]);
-          } catch (IOException e) {
-            logger.info(e);
-          }
+        Set<String> jarNames = new HashSet<>();
+        for (String jarFullPath : jarFullPaths) {
+          File stagedJar = new File(jarFullPath);
+          jarNames.add(stagedJar.getName());
+          String filePath = FilenameUtils.concat(groupDir, stagedJar.getName());
+          File jarFile = new File(filePath);
+          FileUtils.copyFile(stagedJar, jarFile);
+        String memberId = cache.getMyId().getId();
+
-        configRegion.put(group, configurationCopy);
+        configRegion.put(group, configurationCopy, memberId);
-    } catch (Exception e) {
-      success = false;
-      logger.info(e.getMessage(), e);
-    return success;
+
+        for (String jarRemoved : jarNames) {
+          File jar = this.getPathToJarOnThisLocator(group, jarRemoved).toFile();
+          if (jar.exists()) {
+            try {
+              FileUtils.forceDelete(jar);
+            } catch (IOException e) {
+              logger.error(
+                  "Exception occurred while attempting to delete a jar from the filesystem: {}",
+                  jarRemoved, e);
+            }
+          }
+        }
+
-  /**
-   * read the jar bytes in the file system
-   * <p>
-   * used when creating cluster config response and used when uploading the jars to another locator
-   */
-  public byte[] getJarBytesFromThisLocator(String group, String jarName) throws IOException {
-    Configuration configuration = getConfiguration(group);
-
-    File jar = getPathToJarOnThisLocator(group, jarName).toFile();
-
-    if (configuration == null || !configuration.getJarNames().contains(jarName) || !jar.exists()) {
-      return null;
-    }
-
-    return FileUtils.readFileToByteArray(jar);
-  }
-
-  // used in the cluster config change listener when jarnames are changed in the internal region
+  // Only used when a locator is initially starting up
-    Set<DistributedMember> locators =
-        new HashSet<>(dm.getAllHostedLocatorsWithSharedConfiguration().keySet());
+    List<DistributedMember> locators =
+        new ArrayList<>(dm.getAllHostedLocatorsWithSharedConfiguration().keySet());
-    byte[] jarBytes = locators.stream()
-        .map((DistributedMember locator) -> downloadJarFromLocator(locator, groupName, jarName))
-        .filter(Objects::nonNull).findFirst().orElseThrow(() -> new IllegalStateException(
-            "No locators have a deployed jar named " + jarName + " in " + groupName));
-
-    File jarToWrite = getPathToJarOnThisLocator(groupName, jarName).toFile();
-    FileUtils.writeByteArrayToFile(jarToWrite, jarBytes);
-  }
-
-  // used when creating cluster config response
-  public Map<String, byte[]> getAllJarsFromThisLocator(Set<String> groups) throws IOException {
-    Map<String, byte[]> jarNamesToJarBytes = new HashMap<>();
-
-    for (String group : groups) {
-      Configuration groupConfig = getConfiguration(group);
-      if (groupConfig == null) {
-        break;
-      }
-
-      Set<String> jars = groupConfig.getJarNames();
-      for (String jar : jars) {
-        byte[] jarBytes = getJarBytesFromThisLocator(group, jar);
-        jarNamesToJarBytes.put(jar, jarBytes);
-      }
+    if (locators.isEmpty()) {
+      throw new IllegalStateException(
+          "Request to download jar " + jarName + " but no other locators are present");
-    return jarNamesToJarBytes;
+    downloadJarFromLocator(groupName, jarName, locators.get(0));
+  }
+
+  // used in the cluster config change listener when jarnames are changed in the internal region
+  public void downloadJarFromLocator(String groupName, String jarName,
+      DistributedMember sourceLocator) throws IllegalStateException, IOException {
+    logger.info("Downloading jar {} from locator {}", jarName, sourceLocator.getName());
+
+    createConfigDirIfNecessary(groupName);
+
+    File jarFile = downloadJar(sourceLocator, groupName, jarName);
+
+    File jarToWrite = getPathToJarOnThisLocator(groupName, jarName).toFile();
+    Files.copy(jarFile.toPath(), jarToWrite.toPath(), StandardCopyOption.REPLACE_EXISTING);
+  }
+
+  /**
+   * Retrieve a deployed jar from a locator. The retrieved file is staged in a temporary location.
+   *
+   * @param locator the DistributedMember
+   * @param groupName the group to use when retrieving the jar
+   * @param jarName the name of the deployed jar
+   * @return a File referencing the downloaded jar. The File is downloaded to a temporary location.
+   */
+  public File downloadJar(DistributedMember locator, String groupName, String jarName)
+      throws IOException {
+    ResultCollector<RemoteInputStream, List<RemoteInputStream>> rc =
+        (ResultCollector<RemoteInputStream, List<RemoteInputStream>>) CliUtil.executeFunction(
+            new DownloadJarFunction(), new Object[] {groupName, jarName},
+            Collections.singleton(locator));
+
+    List<RemoteInputStream> result = rc.getResult();
+    RemoteInputStream jarStream = result.get(0);
+
+    Set<PosixFilePermission> perms = new HashSet<>();
+    perms.add(PosixFilePermission.OWNER_READ);
+    perms.add(PosixFilePermission.OWNER_WRITE);
+    perms.add(PosixFilePermission.OWNER_EXECUTE);
+    Path tempDir =
+        Files.createTempDirectory("deploy-", PosixFilePermissions.asFileAttribute(perms));
+    Path tempJar = Paths.get(tempDir.toString(), jarName);
+    FileOutputStream fos = new FileOutputStream(tempJar.toString());
+    InputStream input = RemoteInputStreamClient.wrap(jarStream);
+
+    IOUtils.copy(input, fos);
+
+    fos.close();
+    input.close();
+
+    return tempJar.toFile();
-   * 
+   *
-  public ConfigurationResponse createConfigurationResponse(final ConfigurationRequest configRequest)
-      throws LeaseExpiredException, IOException {
+  public ConfigurationResponse createConfigurationResponse(Set<String> groups) throws IOException {
+    ConfigurationResponse configResponse = null;
-    ConfigurationResponse configResponse = new ConfigurationResponse();
+    boolean isLocked = this.sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME, 5000, 5000);
+    try {
+      if (isLocked) {
+        configResponse = new ConfigurationResponse();
+        groups.add(ClusterConfigurationService.CLUSTER_CONFIG);
+        logger.info("Building up configuration response with following configurations: {}", groups);
-    for (int i = 0; i < configRequest.getNumAttempts(); i++) {
-      boolean isLocked = this.sharedConfigLockingService.lock(SHARED_CONFIG_LOCK_NAME, 5000, 5000);
-      try {
-        if (isLocked) {
-          Set<String> groups = configRequest.getGroups();
-          groups.add(ClusterConfigurationService.CLUSTER_CONFIG);
-          logger.info("Building up configuration response with following configurations: {}",
-              groups);
-
-          for (String group : groups) {
-            Configuration configuration = getConfiguration(group);
-            configResponse.addConfiguration(configuration);
+        for (String group : groups) {
+          Configuration configuration = getConfiguration(group);
+          configResponse.addConfiguration(configuration);
+          if (configuration != null) {
+            configResponse.addJar(group, configuration.getJarNames());
-
-          Map<String, byte[]> jarNamesToJarBytes = getAllJarsFromThisLocator(groups);
-          String[] jarNames = jarNamesToJarBytes.keySet().stream().toArray(String[]::new);
-          byte[][] jarBytes = jarNamesToJarBytes.values().toArray(new byte[jarNames.length][]);
-
-          configResponse.addJarsToBeDeployed(jarNames, jarBytes);
-          configResponse.setFailedToGetSharedConfig(false);
-          return configResponse;
-      } finally {
-        this.sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);
-      }
+        return configResponse;
+      }
+    } finally {
+      this.sharedConfigLockingService.unlock(SHARED_CONFIG_LOCK_NAME);
-    configResponse.setFailedToGetSharedConfig(true);
-   * 
+   *
-  public Map<String, Configuration> getEntireConfiguration() {
-    Set<String> keys = getConfigurationRegion().keySet();
-    return getConfigurationRegion().getAll(keys);
-  }
-
-   * 
+   *
-   * 
+   *
-      clusterRegion.putAll(sharedConfiguration);
+
+      String memberId = cache.getMyId().getId();
+      clusterRegion.putAll(sharedConfiguration, memberId);
-  // TODO: return value is never used
-  private boolean lockSharedConfiguration() {
+  public boolean lockSharedConfiguration() {
-  private void unlockSharedConfiguration() {
+  public void unlockSharedConfiguration() {
-  private byte[] downloadJarFromLocator(DistributedMember locator, String groupName,
-      String jarName) {
-    ResultCollector<byte[], List<byte[]>> rc = (ResultCollector<byte[], List<byte[]>>) CliUtil
-        .executeFunction(new UploadJarFunction(), new Object[] {groupName, jarName}, locator);
-
-    List<byte[]> result = rc.getResult();
-
-    // we should only get one byte[] back in the list
-    return result.stream().filter(Objects::nonNull).findFirst().orElse(null);
-  }
-
-   * 
+   *
-  private Region<String, Configuration> getConfigurationRegion() {
+  public Region<String, Configuration> getConfigurationRegion() {
-   * 
+   *

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS31 UPD39 INS43 INS39 UPD42 INS44 INS43 INS29 MOV83 INS43 UPD42 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 MOV44 MOV8 UPD83 UPD83 UPD83 INS74 UPD42 INS42 INS25 UPD42 INS43 INS42 INS42 INS21 INS21 MOV60 INS21 INS65 INS65 INS65 INS65 INS65 UPD42 MOV42 MOV60 MOV60 MOV60 INS60 INS21 INS21 INS21 MOV60 INS60 INS60 MOV60 INS21 INS21 INS21 INS41 MOV60 INS54 MOV41 INS43 MOV43 INS74 INS32 INS8 INS42 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD74 UPD74 INS43 UPD74 MOV74 INS59 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS32 INS32 INS32 INS32 MOV43 INS8 MOV8 INS42 INS43 MOV43 MOV42 UPD42 MOV42 INS53 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS45 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS32 INS32 INS40 MOV43 INS43 UPD74 MOV43 UPD43 UPD42 MOV42 UPD42 INS32 INS43 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS14 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS33 INS25 INS60 INS42 INS74 INS14 UPD42 MOV42 INS42 INS34 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS43 UPD74 UPD42 INS42 INS42 INS34 INS42 MOV74 INS42 INS42 INS45 INS32 INS42 UPD42 MOV42 INS32 INS42 INS43 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS8 MOV43 INS59 INS60 INS70 INS60 INS70 INS43 MOV43 MOV27 INS42 INS42 MOV43 INS43 UPD74 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV21 MOV21 MOV21 MOV70 MOV41 INS42 INS32 INS42 MOV74 INS59 INS44 INS42 INS8 MOV43 INS59 INS44 INS42 INS8 INS42 UPD45 UPD45 INS42 INS43 UPD43 INS42 INS42 MOV42 INS7 INS32 INS42 UPD42 MOV42 INS14 MOV43 INS42 INS60 INS21 MOV60 MOV60 MOV21 INS42 INS32 INS42 MOV43 INS42 INS60 INS25 INS42 UPD42 INS42 MOV14 INS25 INS42 INS42 INS42 INS74 INS43 INS59 INS32 MOV43 INS32 UPD42 MOV42 INS42 INS43 INS59 MOV32 INS8 INS27 INS8 INS43 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS54 INS42 INS33 INS21 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS8 INS12 MOV32 MOV32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS21 MOV44 INS8 UPD42 UPD42 INS42 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 DEL66 DEL65 DEL85 DEL5 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL41 DEL42 DEL39 DEL85 DEL5 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL32 DEL42 DEL14 DEL86 DEL32 DEL59 DEL60 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL32 DEL42 DEL33 DEL27 DEL38 DEL27 DEL38 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL43 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL43 DEL74 DEL14 DEL42 DEL32 DEL59 DEL42 DEL43 DEL43 DEL74 DEL32 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL10 DEL8 DEL25 DEL42 DEL44 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL85 DEL5 DEL89 DEL32 DEL59 DEL60 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL39 DEL85 DEL85 DEL5 DEL40 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL83 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL85 DEL5 DEL42 DEL32 DEL42 DEL42 DEL90 DEL32 DEL42 DEL32 DEL33 DEL32 DEL41 DEL8 DEL31