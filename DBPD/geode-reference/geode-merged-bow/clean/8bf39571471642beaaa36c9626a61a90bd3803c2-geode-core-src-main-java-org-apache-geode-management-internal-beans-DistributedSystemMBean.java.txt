Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * It is provided with one bridge reference which acts as an intermediate for
- * JMX and GemFire.
+ * It is provided with one bridge reference which acts as an intermediate for JMX and GemFire.
-  public GemFireProperties fetchMemberConfiguration(String member)
-      throws Exception {
+  public GemFireProperties fetchMemberConfiguration(String member) throws Exception {
-  public long fetchMemberUpTime(String member) throws Exception{
+  public long fetchMemberUpTime(String member) throws Exception {
-  public boolean revokeMissingDiskStores(final String diskStoreId)
-      throws Exception {
+  public boolean revokeMissingDiskStores(final String diskStoreId) throws Exception {
-  public ObjectName fetchMemberObjectName(String member) throws Exception{
+  public ObjectName fetchMemberObjectName(String member) throws Exception {
-  public ObjectName fetchDistributedRegionObjectName(String regionPath)
-      throws Exception {
+  public ObjectName fetchDistributedRegionObjectName(String regionPath) throws Exception {
-  public ObjectName fetchRegionObjectName(String member, String regionPath)
-      throws Exception {
+  public ObjectName fetchRegionObjectName(String member, String regionPath) throws Exception {
-  public ObjectName[] fetchRegionObjectNames(ObjectName memberMBeanName)
-      throws Exception {
+  public ObjectName[] fetchRegionObjectNames(ObjectName memberMBeanName) throws Exception {
-  public ObjectName fetchCacheServerObjectName(String member, int port)
-      throws Exception {
+  public ObjectName fetchCacheServerObjectName(String member, int port) throws Exception {
-  public ObjectName fetchDiskStoreObjectName(String member, String diskStore)
-      throws Exception {
+  public ObjectName fetchDiskStoreObjectName(String member, String diskStore) throws Exception {
-  public ObjectName fetchDistributedLockServiceObjectName(String lockServiceName)
-      throws Exception {
+  public ObjectName fetchDistributedLockServiceObjectName(String lockServiceName) throws Exception {
-  public ObjectName fetchGatewayReceiverObjectName(String member)
-      throws Exception {
+  public ObjectName fetchGatewayReceiverObjectName(String member) throws Exception {
-  public ObjectName fetchGatewaySenderObjectName(String member,
-      String senderId) throws Exception {
+  public ObjectName fetchGatewaySenderObjectName(String member, String senderId) throws Exception {
-  public ObjectName fetchLockServiceObjectName(String member,
-      String lockService) throws Exception {
+  public ObjectName fetchLockServiceObjectName(String member, String lockService) throws Exception {
-  public ObjectName[] listGatewaySenderObjectNames(String member)
-      throws Exception {
+  public ObjectName[] listGatewaySenderObjectNames(String member) throws Exception {
-  public String queryData(String queryString, String members, int limit)  throws Exception {
+  public String queryData(String queryString, String members, int limit) throws Exception {
-  public byte[] queryDataForCompressedResult(String queryString, String members, int limit)   throws Exception{
+  public byte[] queryDataForCompressedResult(String queryString, String members, int limit)
+      throws Exception {
-   bridge.setQueryResultSetLimit(queryResultSetLimit);
+    bridge.setQueryResultSetLimit(queryResultSetLimit);

UPD66 DEL66