Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A "blob" is a serialized representation of an object into a byte[].
- * BlobHelper provides utility methods for serializing and deserializing the
- * object.
+ * A "blob" is a serialized representation of an object into a byte[]. BlobHelper provides utility
+ * methods for serializing and deserializing the object.
-   * A blob is a serialized Object. This method serializes the object into a
-   * blob and returns the byte array that contains the blob.
+   * A blob is a serialized Object. This method serializes the object into a blob and returns the
+   * byte array that contains the blob.
-   * A blob is a serialized Object.  This method serializes the object into a
-   * blob and returns the byte array that contains the blob.
+   * A blob is a serialized Object. This method serializes the object into a blob and returns the
+   * byte array that contains the blob.
-   * A blob is a serialized Object.  This method serializes the object into
-   * the given HeapDataOutputStream.
+   * A blob is a serialized Object. This method serializes the object into the given
+   * HeapDataOutputStream.
-    endSerialization(start, hdos.size()-startBytes);
+    endSerialization(start, hdos.size() - startBytes);
-   * A blob is a serialized Object.  This method returns the deserialized
-   * object.
+   * A blob is a serialized Object. This method returns the deserialized object.
-   * A blob is a serialized Object.  This method returns the deserialized
-   * object.
+   * A blob is a serialized Object. This method returns the deserialized object.
-  public static Object deserializeBlob(byte[] blob, Version version, ByteArrayDataInput in) throws IOException, ClassNotFoundException {
+  public static Object deserializeBlob(byte[] blob, Version version, ByteArrayDataInput in)
+      throws IOException, ClassNotFoundException {
-   * A blob is a serialized Object.  This method returns the deserialized
-   * object. If a PdxInstance is returned then it will refer to Chunk's
-   * off-heap memory with an unretained reference.
+   * A blob is a serialized Object. This method returns the deserialized object. If a PdxInstance is
+   * returned then it will refer to Chunk's off-heap memory with an unretained reference.
-  public static @Unretained Object deserializeOffHeapBlob(StoredObject blob) throws IOException, ClassNotFoundException {
+  public static @Unretained Object deserializeOffHeapBlob(StoredObject blob)
+      throws IOException, ClassNotFoundException {
-  public static Object deserializeBuffer(ByteArrayDataInput in, int numBytes) throws IOException, ClassNotFoundException {
+  public static Object deserializeBuffer(ByteArrayDataInput in, int numBytes)
+      throws IOException, ClassNotFoundException {
-  
+
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66