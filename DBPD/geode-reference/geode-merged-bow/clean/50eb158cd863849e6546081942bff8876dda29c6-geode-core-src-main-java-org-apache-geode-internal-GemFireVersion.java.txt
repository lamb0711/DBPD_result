Geode 3539: Add missing test coverage for 'version' command. (#1009)

* GEODE-3539: Add missing test coverage for 'version' command.

* Extract inner class GemFireVersion.VersionDescription to its own class
* Made static strings in this this class visible for internal use.
-import static org.apache.geode.internal.lang.SystemUtils.*;
+import static org.apache.geode.internal.VersionDescription.BUILD_DATE;
+import static org.apache.geode.internal.VersionDescription.BUILD_ID;
+import static org.apache.geode.internal.VersionDescription.BUILD_JAVA_VERSION;
+import static org.apache.geode.internal.VersionDescription.BUILD_PLATFORM;
+import static org.apache.geode.internal.VersionDescription.PRODUCT_NAME;
+import static org.apache.geode.internal.VersionDescription.PRODUCT_VERSION;
+import static org.apache.geode.internal.VersionDescription.RESOURCE_NAME;
+import static org.apache.geode.internal.VersionDescription.SOURCE_DATE;
+import static org.apache.geode.internal.VersionDescription.SOURCE_REPOSITORY;
+import static org.apache.geode.internal.VersionDescription.SOURCE_REVISION;
+import static org.apache.geode.internal.lang.SystemUtils.getBootClassPath;
+import static org.apache.geode.internal.lang.SystemUtils.getClassPath;
-import java.io.InputStream;
-import java.util.Map.Entry;
-import java.util.Optional;
-import java.util.Properties;
-import java.util.TreeMap;
-
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.net.SocketCreator;
-  private static String RESOURCE_NAME = "GemFireVersion.properties";
-
-  public static void main(String[] args) {
-    System.out.println(asString());
-  }
-
-    return getDescription().getProperty(VersionDescription.PRODUCT_NAME);
+    return getDescription().getProperty(PRODUCT_NAME);
-    return getDescription().getProperty(VersionDescription.GEMFIRE_VERSION);
+    return getDescription().getProperty(PRODUCT_VERSION);
-    return getDescription().getProperty(VersionDescription.SOURCE_DATE);
+    return getDescription().getProperty(SOURCE_DATE);
-    return getDescription().getProperty(VersionDescription.SOURCE_REPOSITORY);
+    return getDescription().getProperty(SOURCE_REPOSITORY);
-    return getDescription().getProperty(VersionDescription.SOURCE_REVISION);
+    return getDescription().getProperty(SOURCE_REVISION);
-    return getDescription().getProperty(VersionDescription.BUILD_ID);
+    return getDescription().getProperty(BUILD_ID);
-    return getDescription().getProperty(VersionDescription.BUILD_DATE);
+    return getDescription().getProperty(BUILD_DATE);
-    return getDescription().getProperty(VersionDescription.BUILD_PLATFORM);
+    return getDescription().getProperty(BUILD_PLATFORM);
-    return getDescription().getProperty(VersionDescription.BUILD_JAVA_VERSION);
+    return getDescription().getProperty(BUILD_JAVA_VERSION);
-      if (jar.indexOf(getGemFireJarFileName()) != -1) {
+      if (jar.contains(getGemFireJarFileName())) {
-          csLoc = gemfireJar.toURL();
-        } catch (Exception e) {
+          csLoc = gemfireJar.toURI().toURL();
+        } catch (Exception ignored) {
-      if (jar.indexOf(getGemFireJarFileName()) != -1) {
+      if (jar.contains(getGemFireJarFileName())) {
-          csLoc = gemfireJar.toURL();
-        } catch (Exception e) {
+          csLoc = gemfireJar.toURI().toURL();
+        } catch (Exception ignored) {
-
-  static class VersionDescription {
-    /** Constant for the GemFire version Resource Property entry */
-    static final String PRODUCT_NAME = "Product-Name";
-
-    /** Constant for the GemFire version Resource Property entry */
-    static final String GEMFIRE_VERSION = "Product-Version";
-
-    /** Constant for the source code date Resource Property entry */
-    static final String SOURCE_DATE = "Source-Date";
-
-    /** Constant for the source code revision Resource Property entry */
-    static final String SOURCE_REVISION = "Source-Revision";
-
-    /** Constant for the source code repository Resource Property entry */
-    static final String SOURCE_REPOSITORY = "Source-Repository";
-
-    /** Constant for the build date Resource Property entry */
-    static final String BUILD_DATE = "Build-Date";
-
-    /** Constant for the build id Resource Property entry */
-    static final String BUILD_ID = "Build-Id";
-
-    /** Constant for the build Java version Resource Property entry */
-    static final String BUILD_PLATFORM = "Build-Platform";
-
-    /** Constant for the build Java version Resource Property entry */
-    static final String BUILD_JAVA_VERSION = "Build-Java-Version";
-
-    /** the version properties */
-    private final Properties description;
-
-    /** Error message to display instead of the version information */
-    private final Optional<String> error;
-
-    public VersionDescription(String name) {
-      InputStream is = ClassPathLoader.getLatest().getResourceAsStream(getClass(), name);
-      if (is == null) {
-        error = Optional
-            .of(LocalizedStrings.GemFireVersion_COULD_NOT_FIND_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0
-                .toLocalizedString(name));
-        description = null;
-        return;
-      }
-
-      description = new Properties();
-      try {
-        description.load(is);
-      } catch (Exception ex) {
-        error = Optional
-            .of(LocalizedStrings.GemFireVersion_COULD_NOT_READ_PROPERTIES_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_0_BECAUSE_1
-                .toLocalizedString(new Object[] {name, ex}));
-        return;
-      }
-
-      error = validate(description);
-    }
-
-    public String getProperty(String key) {
-      return error.orElseGet(() -> description.getProperty(key));
-    }
-
-    public String getNativeCodeVersion() {
-      return SmHelper.getNativeVersion();
-    }
-
-    void print(PrintWriter pw) {
-      if (error.isPresent()) {
-        pw.println(error.get());
-      } else {
-        for (Entry<?, ?> props : new TreeMap<>(description).entrySet()) {
-          pw.println(props.getKey() + ": " + props.getValue());
-        }
-      }
-
-      // not stored in the description map
-      pw.println("Native version: " + getNativeCodeVersion());
-      printHostInfo(pw);
-    }
-
-    private void printHostInfo(PrintWriter pw)
-        throws InternalGemFireError, Error, VirtualMachineError {
-      try {
-        StringBuilder sb = new StringBuilder(SocketCreator.getLocalHost().toString()).append(", ")
-            .append(Runtime.getRuntime().availableProcessors()).append(" cpu(s), ")
-            .append(getOsArchitecture()).append(' ').append(getOsName()).append(' ')
-            .append(getOsVersion()).append(' ');
-        pw.println(LocalizedStrings.GemFireVersion_RUNNING_ON_0.toLocalizedString(sb.toString()));
-      } catch (VirtualMachineError err) {
-        SystemFailure.initiateFailure(err);
-        // If this ever returns, rethrow the error. We're poisoned
-        // now, so don't let this thread continue.
-        throw err;
-      } catch (Throwable t) {
-        // Whenever you catch Error or Throwable, you must also
-        // catch VirtualMachineError (see above). However, there is
-        // _still_ a possibility that you are dealing with a cascading
-        // error condition, so you also need to check to see if the JVM
-        // is still usable:
-        SystemFailure.checkFailure();
-      }
-    }
-
-    private Optional<String> validate(Properties props) {
-      if (props.get(PRODUCT_NAME) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {PRODUCT_NAME, RESOURCE_NAME}));
-      }
-
-      if (props.get(GEMFIRE_VERSION) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {GEMFIRE_VERSION, RESOURCE_NAME}));
-      }
-
-      if (props.get(SOURCE_DATE) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {SOURCE_DATE, RESOURCE_NAME}));
-      }
-
-      if (props.get(SOURCE_REVISION) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {SOURCE_REVISION, RESOURCE_NAME}));
-      }
-
-      if (props.get(SOURCE_REPOSITORY) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {SOURCE_REPOSITORY, RESOURCE_NAME}));
-      }
-
-      if (props.get(BUILD_DATE) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {BUILD_DATE, RESOURCE_NAME}));
-      }
-
-      if (props.get(BUILD_ID) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {BUILD_ID, RESOURCE_NAME}));
-      }
-
-      if (props.get(BUILD_PLATFORM) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {BUILD_PLATFORM, RESOURCE_NAME}));
-      }
-
-      if (props.get(BUILD_JAVA_VERSION) == null) {
-        return Optional
-            .of(LocalizedStrings.GemFireVersion_MISSING_PROPERTY_0_FROM_RESOURCE_COM_GEMSTONE_GEMFIRE_INTERNAL_1
-                .toLocalizedString(new Object[] {BUILD_JAVA_VERSION, RESOURCE_NAME}));
-      }
-      return Optional.empty();
-    }
-  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 MOV31 MOV31 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 INS32 INS32 MOV42 INS42 MOV42 INS42 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL40 DEL40 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL34 DEL38 DEL27 DEL34 DEL38 DEL27 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL7 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL14 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55