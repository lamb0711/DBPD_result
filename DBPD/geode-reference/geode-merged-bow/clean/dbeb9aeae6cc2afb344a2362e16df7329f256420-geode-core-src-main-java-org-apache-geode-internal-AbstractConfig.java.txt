Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides an implementation of the {@link Config} interface
- * that implements functionality that all {@link Config} implementations
- * can share.
+ * Provides an implementation of the {@link Config} interface that implements functionality that all
+ * {@link Config} implementations can share.
-   * Returns the string to use as the exception message when an attempt
-   * is made to set an unmodifiable attribute.
+   * Returns the string to use as the exception message when an attempt is made to set an
+   * unmodifiable attribute.
-    return LocalizedStrings.AbstractConfig_THE_0_CONFIGURATION_ATTRIBUTE_CAN_NOT_BE_MODIFIED.toLocalizedString(attName);
+    return LocalizedStrings.AbstractConfig_THE_0_CONFIGURATION_ATTRIBUTE_CAN_NOT_BE_MODIFIED
+        .toLocalizedString(attName);
-   * Set to true if most of the attributes can be modified.
-   * Set to false if most of the attributes are read only.
+   * Set to true if most of the attributes can be modified. Set to false if most of the attributes
+   * are read only.
-   * Use {@link #toLoggerString()} instead. If you need to override this in a
-   * subclass, be careful not to expose any private data or security related
-   * values. Fixing bug #48155 by not exposing all values.
+   * Use {@link #toLoggerString()} instead. If you need to override this in a subclass, be careful
+   * not to expose any private data or security related values. Fixing bug #48155 by not exposing
+   * all values.
+   * 
+   * 
-      // hide the shiro-init configuration for now. Remove after we can allow customer to specify shiro.ini file
+      // hide the shiro-init configuration for now. Remove after we can allow customer to specify
+      // shiro.ini file
-   * This class was added to fix bug 39382.
-   * It does this be overriding "keys" which is used by the store0
-   * implementation of Properties.
+   * This class was added to fix bug 39382. It does this be overriding "keys" which is used by the
+   * store0 implementation of Properties.
-      throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_UNKNOWN_CONFIGURATION_ATTRIBUTE_NAME_0_VALID_ATTRIBUTE_NAMES_ARE_1.toLocalizedString(new Object[] {
-        attName, SystemAdmin.join(validAttNames)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AbstractConfig_UNKNOWN_CONFIGURATION_ATTRIBUTE_NAME_0_VALID_ATTRIBUTE_NAMES_ARE_1
+              .toLocalizedString(new Object[] {attName, SystemAdmin.join(validAttNames)}));
-    if(result.getClass().isArray() && attName.startsWith("ssl-"))
-    {
-      return SystemAdmin.join((Object[]) result,",");
+    if (result.getClass().isArray() && attName.startsWith("ssl-")) {
+      return SystemAdmin.join((Object[]) result, ",");
-      }  else if (valueType.equals(Integer.class)) {
+      } else if (valueType.equals(Integer.class)) {
-          throw new IllegalArgumentException("expected a setting in the form X-Y but found no dash for attribute " + attName);
+          throw new IllegalArgumentException(
+              "expected a setting in the form X-Y but found no dash for attribute " + attName);
-          throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_A_VALID_HOST_NAME_2.toLocalizedString(new Object[] {
-            attName, attValue, ex.toString()
-          }));
+          throw new IllegalArgumentException(
+              LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_A_VALID_HOST_NAME_2
+                  .toLocalizedString(new Object[] {attName, attValue, ex.toString()}));
-          throw new UnmodifiableException(LocalizedStrings.AbstractConfig_THE_0_CONFIGURATION_ATTRIBUTE_CAN_NOT_BE_SET_FROM_THE_COMMAND_LINE_SET_1_FOR_EACH_INDIVIDUAL_PARAMETER_INSTEAD
-            .toLocalizedString(new Object[] { attName, trimAttName }));
+          throw new UnmodifiableException(
+              LocalizedStrings.AbstractConfig_THE_0_CONFIGURATION_ATTRIBUTE_CAN_NOT_BE_SET_FROM_THE_COMMAND_LINE_SET_1_FOR_EACH_INDIVIDUAL_PARAMETER_INSTEAD
+                  .toLocalizedString(new Object[] {attName, trimAttName}));
-          throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_HAVE_THREE_ELEMENTS_SEPARATED_BY_COMMAS.toLocalizedString(new Object[] {
-            attName, attValue
-          }));
+          throw new IllegalArgumentException(
+              LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_HAVE_THREE_ELEMENTS_SEPARATED_BY_COMMAS
+                  .toLocalizedString(new Object[] {attName, attValue}));
-          throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_COMPOSED_OF_AN_INTEGER_A_FLOAT_AND_AN_INTEGER.toLocalizedString(new Object[] {
-            attName, attValue
-          }));
+          throw new IllegalArgumentException(
+              LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_COMPOSED_OF_AN_INTEGER_A_FLOAT_AND_AN_INTEGER
+                  .toLocalizedString(new Object[] {attName, attValue}));
-      } else if (valueType.isArray() && SecurableCommunicationChannel.class.equals(valueType.getComponentType())) {
+      } else if (valueType.isArray()
+          && SecurableCommunicationChannel.class.equals(valueType.getComponentType())) {
-      }else {
-        throw new InternalGemFireException(LocalizedStrings.AbstractConfig_UNHANDLED_ATTRIBUTE_TYPE_0_FOR_1.toLocalizedString(new Object[] {
-          valueType, attName
-        }));
+      } else {
+        throw new InternalGemFireException(
+            LocalizedStrings.AbstractConfig_UNHANDLED_ATTRIBUTE_TYPE_0_FOR_1
+                .toLocalizedString(new Object[] {valueType, attName}));
-      throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_A_NUMBER.toLocalizedString(new Object[] { attName, attValue }));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractConfig_0_VALUE_1_MUST_BE_A_NUMBER
+          .toLocalizedString(new Object[] {attName, attValue}));
-  private SecurableCommunicationChannel[] commaDelimitedStringToSecurableCommunicationChannels(final String tokenizeString) {
+  private SecurableCommunicationChannel[] commaDelimitedStringToSecurableCommunicationChannels(
+      final String tokenizeString) {
-    SecurableCommunicationChannel[] returnArray = new SecurableCommunicationChannel[stringTokenizer.countTokens()];
+    SecurableCommunicationChannel[] returnArray =
+        new SecurableCommunicationChannel[stringTokenizer.countTokens()];
-      throw new InternalGemFireException(LocalizedStrings.AbstractConfig_UNHANDLED_ATTRIBUTE_NAME_0.toLocalizedString(attName));
+      throw new InternalGemFireException(
+          LocalizedStrings.AbstractConfig_UNHANDLED_ATTRIBUTE_NAME_0.toLocalizedString(attName));

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66