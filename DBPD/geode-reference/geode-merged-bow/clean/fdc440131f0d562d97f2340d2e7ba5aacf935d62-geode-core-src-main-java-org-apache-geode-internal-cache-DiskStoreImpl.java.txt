GEODE-8029: Allow OplogEntryIdSet to Overflow (#5329)

Do not delete drf files during member startup as that should be only
done by the compactor thread. Instead, allow the OplogEntryIdSet to
grow over the default capacity and log a warning message instructing
the user to manually compact the disk-stores.

- Added unit tests.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Modified DiskStoreImpl.deadRecordCount to return long instead of int.
- Added internal overflow implementation to the OplogEntryIdSet so it can
  grow above the default limit.
+import org.apache.geode.annotations.VisibleForTesting;
-   * Set of OplogEntryIds (longs). Memory is optimized by using an int[] for ids in the unsigned int
-   * range.
+   * Set of OplogEntryIds (longs).
+   * Memory is optimized by using an int[] for ids in the unsigned int range.
+   * By default we can't have more than 805306401 ids for a load factor of 0.75, the internal lists
+   * are used to overcome this limit, allowing the disk-store to recover successfully (the internal
+   * class is **only** used during recovery to read all deleted entries).
-    private final IntOpenHashSet ints = new IntOpenHashSet((int) INVALID_ID);
-    private final LongOpenHashSet longs = new LongOpenHashSet((int) INVALID_ID);
+    private final List<IntOpenHashSet> allInts;
+    private final List<LongOpenHashSet> allLongs;
+    private final AtomicReference<IntOpenHashSet> currentInts;
+    private final AtomicReference<LongOpenHashSet> currentLongs;
+
+    // For testing purposes only.
+    @VisibleForTesting
+    OplogEntryIdSet(List<IntOpenHashSet> allInts, List<LongOpenHashSet> allLongs) {
+      this.allInts = allInts;
+      this.currentInts = new AtomicReference<>(this.allInts.get(0));
+
+      this.allLongs = allLongs;
+      this.currentLongs = new AtomicReference<>(this.allLongs.get(0));
+    }
+
+    public OplogEntryIdSet() {
+      IntOpenHashSet intHashSet = new IntOpenHashSet((int) INVALID_ID);
+      this.allInts = new ArrayList<>();
+      this.allInts.add(intHashSet);
+      this.currentInts = new AtomicReference<>(intHashSet);
+
+      LongOpenHashSet longHashSet = new LongOpenHashSet((int) INVALID_ID);
+      this.allLongs = new ArrayList<>();
+      this.allLongs.add(longHashSet);
+      this.currentLongs = new AtomicReference<>(longHashSet);
+    }
-      } else if (id > 0 && id <= 0x00000000FFFFFFFFL) {
-        this.ints.add((int) id);
-      } else {
-        this.longs.add(id);
+      }
+
+      try {
+        if (id > 0 && id <= 0x00000000FFFFFFFFL) {
+          this.currentInts.get().add((int) id);
+        } else {
+          this.currentLongs.get().add(id);
+        }
+      } catch (IllegalArgumentException illegalArgumentException) {
+        // See GEODE-8029.
+        // Too many entries on the accumulated drf files, overflow and continue.
+        logger.warn(
+            "There is a large number of deleted entries within the disk-store, please execute an offline compaction.");
+
+        // Overflow to the next [Int|Long]OpenHashSet and continue.
+        if (id > 0 && id <= 0x00000000FFFFFFFFL) {
+          IntOpenHashSet overflownHashSet = new IntOpenHashSet((int) INVALID_ID);
+          allInts.add(overflownHashSet);
+          currentInts.set(overflownHashSet);
+
+          currentInts.get().add((int) id);
+        } else {
+          LongOpenHashSet overflownHashSet = new LongOpenHashSet((int) INVALID_ID);
+          allLongs.add(overflownHashSet);
+          currentLongs.set(overflownHashSet);
+
+          currentLongs.get().add(id);
+        }
-        return this.ints.contains((int) id);
+        return allInts.stream().anyMatch(ints -> ints.contains((int) id));
-        return this.longs.contains(id);
+        return allLongs.stream().anyMatch(longs -> longs.contains(id));
-    public int size() {
-      return this.ints.size() + this.longs.size();
+    public long size() {
+      return allInts.stream().mapToInt(IntOpenHashSet::size).sum()
+          + allLongs.stream().mapToInt(LongOpenHashSet::size).sum();
-  private int deadRecordCount;
+  private long deadRecordCount;
-  void incDeadRecordCount(int count) {
+  void incDeadRecordCount(long count) {
-  public int getDeadRecordCount() {
+  public long getDeadRecordCount() {

INS26 INS40 INS23 INS23 INS31 INS31 UPD39 UPD39 INS74 INS59 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS78 INS42 INS44 INS44 INS8 INS83 INS42 INS8 INS8 UPD39 UPD39 INS66 UPD66 INS66 INS66 UPD66 INS43 MOV43 INS42 INS43 MOV43 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS25 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS7 INS7 INS7 INS7 INS43 MOV59 INS7 INS32 INS7 INS43 MOV59 INS7 INS32 INS7 MOV27 MOV8 INS8 INS12 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS14 INS22 INS42 INS22 INS14 INS42 UPD42 INS22 INS14 INS22 INS42 INS42 INS22 INS14 INS42 UPD42 INS22 INS14 INS22 INS42 INS42 INS22 INS14 INS25 INS44 INS8 INS32 INS32 INS52 INS42 INS52 INS42 INS74 INS32 INS52 INS42 INS52 INS42 INS74 INS32 INS52 INS42 INS74 INS52 INS42 INS52 INS42 INS74 INS42 INS52 INS42 INS74 INS52 INS42 INS52 INS42 INS74 INS42 MOV27 MOV8 MOV8 INS43 INS42 INS21 INS25 INS32 INS32 INS32 INS42 INS32 INS42 INS43 INS22 INS42 INS34 INS43 INS22 INS42 INS34 INS43 INS43 INS43 INS43 INS42 INS32 INS27 INS8 INS8 INS32 INS42 INS86 INS32 INS42 INS86 INS32 INS42 INS90 INS32 INS42 INS90 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS27 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS59 INS32 INS42 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV11 INS32 INS42 INS34 INS42 INS34 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS42 MOV42 INS11 INS42 INS42 MOV42 MOV42 MOV22 INS42 MOV22 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV11 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS39 INS42 UPD42 UPD42 INS43 INS11 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS39 INS42 INS42 INS39 INS42 DEL25 DEL25 DEL8 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32