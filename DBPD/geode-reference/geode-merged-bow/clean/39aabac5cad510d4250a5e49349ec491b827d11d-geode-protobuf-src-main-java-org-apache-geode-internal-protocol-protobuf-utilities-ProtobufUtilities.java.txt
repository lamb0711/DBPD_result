Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-package org.apache.geode.protocol.protobuf.utilities;
+package org.apache.geode.internal.protocol.protobuf.utilities;
-import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
-import org.apache.geode.protocol.protobuf.ProtobufSerializationService;
+import org.apache.geode.internal.protocol.protobuf.EncodingTypeTranslator;
+import org.apache.geode.internal.protocol.protobuf.ProtobufSerializationService;
-import org.apache.geode.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
-import org.apache.geode.serialization.SerializationService;
-import org.apache.geode.serialization.exception.UnsupportedEncodingTypeException;
-import org.apache.geode.serialization.registry.exception.CodecNotRegisteredForTypeException;
+import org.apache.geode.internal.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
+import org.apache.geode.internal.serialization.SerializationService;
+import org.apache.geode.internal.serialization.exception.UnsupportedEncodingTypeException;
+import org.apache.geode.internal.serialization.registry.exception.CodecNotRegisteredForTypeException;
-   * unset in the {@link BasicTypes.Entry}.
+   * unset in the BasicTypes.Entry.
-   * @param messageHeader - The header for the message
-  public static ClientProtocol.Message createProtobufResponse(
-      ClientProtocol.MessageHeader messageHeader, ClientProtocol.Response response) {
-    return ClientProtocol.Message.newBuilder().setMessageHeader(messageHeader).setResponse(response)
-        .build();
+  public static ClientProtocol.Message createProtobufResponse(ClientProtocol.Response response) {
+    return ClientProtocol.Message.newBuilder().setResponse(response).build();
-   * @param messageHeader - The header for the message
-  public static ClientProtocol.Message createProtobufMessage(
-      ClientProtocol.MessageHeader messageHeader, ClientProtocol.Request request) {
-    return ClientProtocol.Message.newBuilder().setMessageHeader(messageHeader).setRequest(request)
-        .build();
+  public static ClientProtocol.Message createProtobufMessage(ClientProtocol.Request request) {
+    return ClientProtocol.Message.newBuilder().setRequest(request).build();
-   * This builds the MessageHeader for a response which matches an incoming request
-   *
-   * @param request - The request message that we're responding to.
-   * @return the MessageHeader the response to the passed request
-   */
-  public static ClientProtocol.MessageHeader createMessageHeaderForRequest(
-      ClientProtocol.Message request) {
-    return createMessageHeader(request.getMessageHeader().getCorrelationId());
-  }
-
-  /**
-   * This creates a MessageHeader
-   *
-   * @param correlationId - An identifier used to correlate requests and responses
-   * @return a MessageHeader containing the above parameters
-   */
-  public static ClientProtocol.MessageHeader createMessageHeader(int correlationId) {
-    return ClientProtocol.MessageHeader.newBuilder().setCorrelationId(correlationId).build();
-  }
-
-  /**

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD66 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL65 DEL66 DEL42 DEL66 DEL65 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL66 DEL65 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL40 DEL43 DEL42 DEL39 DEL42 DEL44 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31