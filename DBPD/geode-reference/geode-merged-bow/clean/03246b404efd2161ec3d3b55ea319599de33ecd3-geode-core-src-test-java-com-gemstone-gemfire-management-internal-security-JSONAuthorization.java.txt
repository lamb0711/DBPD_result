GEODE-1454: Have "region" attribute, in JSONAuthorization json file be an array

- Also converted to Jackson. Be gone org.json!!

-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import javax.management.remote.JMXPrincipal;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import javax.management.remote.JMXPrincipal;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.security.Principal;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
-  public static JSONAuthorization create() throws IOException, JSONException {
+  public static JSONAuthorization create() throws IOException {
-  public JSONAuthorization() throws IOException, JSONException {}
+  public JSONAuthorization() throws IOException {
+  }
-  public JSONAuthorization(String jsonFileName) throws IOException, JSONException {
+  public JSONAuthorization(String jsonFileName) throws IOException {
-  public static void setUpWithJsonFile(String jsonFileName) throws IOException, JSONException {
+  public static void setUpWithJsonFile(String jsonFileName) throws IOException {
-  private static void readSecurityDescriptor(String json) throws IOException, JSONException {
-    JSONObject jsonBean = new JSONObject(json);
+  private static void readSecurityDescriptor(String json) throws IOException {
+    ObjectMapper mapper = new ObjectMapper();
+    JsonNode jsonNode = mapper.readTree(json);
-    Map<String, Role> roleMap = readRoles(jsonBean);
-    readUsers(acl, jsonBean, roleMap);
+    Map<String, Role> roleMap = readRoles(jsonNode);
+    readUsers(acl, jsonNode, roleMap);
-  private static void readUsers(Map<String, User> acl, JSONObject jsonBean, Map<String, Role> roleMap)
-      throws JSONException {
-    JSONArray array = jsonBean.getJSONArray("users");
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
+  private static void readUsers(Map<String, User> acl, JsonNode node, Map<String, Role> roleMap) {
+    for (JsonNode u : node.get("users")) {
-      user.name = obj.getString("name");
-      if (obj.has("password")) {
-        user.pwd = obj.getString("password");
+      user.name = u.get("name").asText();
+      if (u.has("password")) {
+        user.pwd = u.get("password").asText();
-      JSONArray ops = obj.getJSONArray("roles");
-      for (int j = 0; j < ops.length(); j++) {
-        String roleName = ops.getString(j);
-        user.roles.add(roleMap.get(roleName));
+      for (JsonNode r : u.get("roles")) {
+        user.roles.add(roleMap.get(r.asText()));
-  private static Map<String, Role> readRoles(JSONObject jsonBean) throws JSONException {
+  private static Map<String, Role> readRoles(JsonNode jsonNode) {
-    JSONArray array = jsonBean.getJSONArray("roles");
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
+    for (JsonNode r : jsonNode.get("roles")) {
-      role.name = obj.getString("name");
+      role.name = r.get("name").asText();
-      if(obj.has("regions")) {
-        regionNames = obj.getString("regions");
+
+      JsonNode regions = r.get("regions");
+      if (regions != null) {
+        if (regions.isArray()) {
+          regionNames = StreamSupport.stream(regions.spliterator(), false)
+              .map(JsonNode::asText)
+              .collect(Collectors.joining(","));
+        } else {
+          regionNames = regions.asText();
+        }
-      JSONArray ops = obj.getJSONArray("operationsAllowed");
-      for (int j = 0; j < ops.length(); j++) {
-        String[] parts = ops.getString(j).split(":");
-        if(regionNames!=null) {
+
+      for (JsonNode op : r.get("operationsAllowed")) {
+        String[] parts = op.asText().split(":");
+        if (regionNames == null) {
+          role.permissions.add(new ResourceOperationContext(parts[0], parts[1], "*"));
+        } else {
-        else
-          role.permissions.add(new ResourceOperationContext(parts[0], parts[1], "*"));
-      if (obj.has("serverGroup")) {
-        role.serverGroup = obj.getString("serverGroup");
+      if (r.has("serverGroup")) {
+        role.serverGroup = r.get("serverGroup").asText();
-    if (principal == null)
-      return false;
+    if (principal == null) return false;
-    if(user == null)
-      return false; // this user is not authorized to do anything
+    if (user == null) return false; // this user is not authorized to do anything
-    for(Role role:acl.get(user.name).roles) {
+    for (Role role : acl.get(user.name).roles) {
-    if (user != null && !userObj.pwd.equals(pwd) && !"".equals(user))
+    if (user != null && !userObj.pwd.equals(pwd) && !"".equals(user)) {
+    }
-  private static String readFile(String name) throws IOException, JSONException {
+  private static String readFile(String name) throws IOException {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 INS40 INS60 UPD43 UPD42 INS70 UPD43 UPD42 INS70 UPD43 INS43 INS59 UPD42 INS44 INS32 INS8 UPD42 INS44 INS32 MOV8 INS8 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 MOV60 MOV21 MOV25 INS70 MOV21 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 INS60 INS25 INS70 MOV53 UPD43 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS44 INS32 INS8 UPD42 MOV42 INS43 INS59 INS27 INS8 INS44 INS32 MOV8 UPD42 INS32 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 MOV21 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 INS32 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 INS32 MOV8 INS8 INS42 UPD27 INS8 UPD42 MOV42 UPD42 MOV42 MOV45 INS32 UPD42 MOV42 UPD42 MOV42 MOV45 INS42 INS42 INS21 MOV21 INS32 INS32 INS42 INS32 INS7 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV45 UPD42 MOV42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV45 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS90 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL32 DEL43 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL24 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL32 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL45 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL32 DEL43 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43