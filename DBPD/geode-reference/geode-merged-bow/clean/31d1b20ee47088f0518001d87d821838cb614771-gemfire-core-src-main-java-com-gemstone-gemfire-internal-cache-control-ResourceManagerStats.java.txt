Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

-import com.gemstone.gemfire.internal.Assert;
+  private static final int offHeapCriticalEventsId;
+  private static final int offHeapSafeEventsId;
-  private static final int evictMoreEventsId;
+  private static final int offHeapEvictionStartEventsId;
+  private static final int offHeapEvictionStopEventsId;
+  private static final int offHeapCriticalThresholdId;
+  private static final int offHeapEvictionThresholdId;
+                "offHeapCriticalEvents",
+                "Total number of times off-heap usage went over critical threshold.",
+                "events"),
+            f.createIntGauge(
+                "offHeapSafeEvents", 
+                "Total number of times off-heap usage fell below critical threshold.",
+                "events"),
+            f.createIntGauge(
-            f.createIntCounter(
-                "evictMoreEvents",
-                "Total number of times evict more event was delivered",
+            f.createIntGauge(
+                "offHeapEvictionStartEvents",
+                "Total number of times off-heap usage went over eviction threshold.",
+            f.createIntGauge(
+                "offHeapEvictionStopEvents",
+                "Total number of times off-heap usage fell below eviction threshold.",
+                "events"),
-                "The currently set critical threshold value in bytes",
+                "The currently set heap critical threshold value in bytes",
+                "bytes"),
+            f.createLongGauge(
+                "offHeapCriticalThreshold",
+                "The currently set off-heap critical threshold value in bytes",
-                "The currently set eviction threshold value in bytes",
+                "The currently set heap eviction threshold value in bytes",
+                "offHeapEvictionThreshold", 
+                "The currently set off-heap eviction threshold value in bytes",
+                "bytes"),            
+            f.createLongGauge(
+    offHeapCriticalEventsId = type.nameToId("offHeapCriticalEvents");
+    offHeapSafeEventsId = type.nameToId("offHeapSafeEvents");
-    evictMoreEventsId = type.nameToId("evictMoreEvents");
+    offHeapEvictionStartEventsId = type.nameToId("offHeapEvictionStartEvents");
+    offHeapEvictionStopEventsId = type.nameToId("offHeapEvictionStopEvents");
+    offHeapCriticalThresholdId = type.nameToId("offHeapCriticalThreshold");
+    offHeapEvictionThresholdId = type.nameToId("offHeapEvictionThreshold");
-
+  
+  public void incOffHeapCriticalEvents() {
+    this.stats.incInt(offHeapCriticalEventsId, 1);
+  }
+  
+  public int getOffHeapCriticalEvents() {
+    return this.stats.getInt(offHeapCriticalEventsId);
+  }
+  
+  public void incOffHeapSafeEvents() {
+    this.stats.incInt(offHeapSafeEventsId, 1);
+  }
+  
+  public int getOffHeapSafeEvents() {
+    return this.stats.getInt(offHeapSafeEventsId);
+  }
+  
-
-  public void incEvictMoreEvents() {
-    this.stats.incInt(evictMoreEventsId, 1);
+  
+  public void incOffHeapEvictionStartEvents() {
+    this.stats.incInt(offHeapEvictionStartEventsId, 1);
-
-  public int getEvictMoreEvents() {
-    return this.stats.getInt(evictMoreEventsId);
+  
+  public int getOffHeapEvictionStartEvents() {
+    return this.stats.getInt(offHeapEvictionStartEventsId);
-
+  
+  public void incOffHeapEvictionStopEvents() {
+    this.stats.incInt(offHeapEvictionStopEventsId, 1);
+  }
+  
+  public int getOffHeapEvictionStopEvents() {
+    return this.stats.getInt(offHeapEvictionStopEventsId);
+  }
+  
+  public void changeOffHeapCriticalThreshold(long newValue) {
+    this.stats.setLong(offHeapCriticalThresholdId, newValue);
+  }
+  
+  public long getOffHeapCriticalThreshold() {
+    return this.stats.getLong(offHeapCriticalThresholdId);    
+  }
+  
+  public void changeOffHeapEvictionThreshold(long newValue) {
+    this.stats.setLong(offHeapEvictionThresholdId, newValue);
+  }
+  
+  public long getOffHeapEvictionThreshold() {
+    return this.stats.getLong(offHeapEvictionThresholdId);
+  }
+  
+      @Override
+      @Override
+      @Override
+      @Override
+      @Override

MOV23 MOV31 MOV31 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 MOV21 UPD39 UPD42 UPD39 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 UPD42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS21 INS41 INS21 INS41 INS21 INS41 INS39 INS42 INS21 INS41 INS39 INS42 INS21 INS41 INS7 INS7 INS7 INS7 INS7 MOV32 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 INS34 UPD42 UPD42 INS22 INS42 INS42 INS34 INS22 INS42 INS42 INS22 INS42 INS42 INS34 INS22 INS42 INS42 INS22 INS42 INS42 INS34 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS45 UPD45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS78 INS78 INS78 INS78 INS78 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS45 INS45 UPD42 UPD45 UPD45 INS42 INS42 INS45 INS45 INS45 UPD45 INS42 INS42 INS45 INS45 INS45 UPD45 INS42 INS42 INS45 INS45 INS45 DEL40 DEL26 DEL41 DEL34 DEL21