Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-   * Written to IF. Used to record regions config Byte Format: RegionId 1:
-   * lruAlgorithm 1: lruAction 4: lruLimit (int) // no need to ObjectSize during
-   * recovery since all data is in blob form 4: concurrencyLevel (int) 4:
-   * initialCapacity (int) 4: loadFactor (float) 1: statisticsEnabled (boolean)
-   * 1: isBucket (boolean) variable: compressorClassName 1: EndOfRecordMarker
+   * Written to IF. Used to record regions config Byte Format: 
+   * RegionId 
+   * 1: lruAlgorithm 
+   * 1: lruAction 
+   * 4: lruLimit (int) // no need to ObjectSize during recovery since all data is in blob form 
+   * 4: concurrencyLevel (int) 
+   * 4: initialCapacity (int) 
+   * 4: loadFactor (float)
+   * 1: statisticsEnabled (boolean)
+   * 1: isBucket (boolean) 
+   * variable: partitionName (utf)
+   * 4: startingBucketId (int)
+   * variable: compressorClassName (utf)
+   * 1: versioned (boolean)
+   * 1: EndOfRecordMarker
+  /**
+   * Written to IF. Used to record regions config Byte Format: 
+   * RegionId 
+   * 1: lruAlgorithm 
+   * 1: lruAction 
+   * 4: lruLimit (int) // no need to ObjectSize during recovery since all data is in blob form 
+   * 4: concurrencyLevel (int) 
+   * 4: initialCapacity (int) 
+   * 4: loadFactor (float)
+   * 1: statisticsEnabled (boolean)
+   * 1: isBucket (boolean) 
+   * variable: partitionName (utf)
+   * 4: startingBucketId (int)
+   * variable: compressorClassName (utf)
+   * 1: versioned (boolean)
+   * 1: offHeap (boolean) added in 9.0
+   * 1: EndOfRecordMarker
+   * @since 9.0
+   */
+  public static final byte IFREC_REGION_CONFIG_ID_90 = 90;
+
-                              String compressorClassName) {
+                              String compressorClassName, boolean offHeap) {
-                 partitionName, startingBucketId, compressorClassName);
+                 partitionName, startingBucketId, compressorClassName, offHeap);
-                                     Compressor compressor) {
+                                     Compressor compressor, boolean offHeap) {
-          compressor == null ? null : compressor.getClass().getName());
+          compressor == null ? null : compressor.getClass().getName(), offHeap);
-      HeapDataOutputStream bb = new HeapDataOutputStream(1+DR_ID_MAX_BYTES+1+1+4+4+4+1+1+4+len+4, Version.CURRENT);
-      bb.write(IFREC_REGION_CONFIG_ID_80);
+      int comprLen = estimateByteSize(drv.getCompressorClassName());
+      HeapDataOutputStream bb = new HeapDataOutputStream(1+DR_ID_MAX_BYTES+1+1+4+4+4+1+1+4+len+4+1+1+1, Version.CURRENT);
+      bb.write(IFREC_REGION_CONFIG_ID_90);
+      // TODO the offheap flag needs to be in a new version
+      bb.writeBoolean(drv.getOffHeap());
+      for (DiskRegionView k: this.getKnown()) {
+        k.close();
+      }
+                             String offHeapOption,
-            compressorClassNameOption, statisticsEnabledOption, printToConsole);
+            compressorClassNameOption, statisticsEnabledOption, offHeapOption, printToConsole);
+                           String offHeapOption,
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
+                                 String offHeapOption,
+    boolean offHeap = drv.getOffHeap();
+    if (offHeapOption != null) {
+      offHeap = Boolean.parseBoolean(offHeapOption);
+      if (!offHeap) {
+        // make sure it is "false"
+        if (!offHeapOption.equalsIgnoreCase("false")) {
+        throw new IllegalArgumentException("Expected offHeap to be \"true\" or \"false\"");
+        }
+      }
+    }
-                  compressorClassName);
+                  compressorClassName, offHeap);

INS23 INS29 INS83 INS83 INS83 INS39 INS59 INS44 INS44 INS44 INS44 INS44 MOV21 MOV21 MOV21 MOV21 INS65 INS65 INS42 INS34 INS39 INS42 INS39 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 UPD66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 UPD66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS60 INS21 INS70 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS39 INS59 MOV43 INS32 INS44 INS32 INS8 INS42 INS42 INS7 INS38 INS8 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS43 INS42 INS52 INS42 INS21 INS42 INS42 INS32 INS42 INS25 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS38 INS8 INS42 INS42 INS34 INS34 INS34 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS45 INS14 INS43 INS45 INS42