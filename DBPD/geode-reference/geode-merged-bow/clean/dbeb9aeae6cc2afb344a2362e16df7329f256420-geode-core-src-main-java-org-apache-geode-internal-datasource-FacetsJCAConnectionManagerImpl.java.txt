Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class implements a connection pool manager for managed connections (JCA)
- * for transactional and non-transactional resource connection. Implements
- * ConnectionManager interface. QoS (Transaction, Security etc is taken into
- * account while allocating a connection). Security related features are
- * remaining.
+ * This class implements a connection pool manager for managed connections (JCA) for transactional
+ * and non-transactional resource connection. Implements ConnectionManager interface. QoS
+ * (Transaction, Security etc is taken into account while allocating a connection). Security related
+ * features are remaining.
-public class FacetsJCAConnectionManagerImpl implements ConnectionManager,
-    ConnectionEventListener, Synchronization {
+public class FacetsJCAConnectionManagerImpl
+    implements ConnectionManager, ConnectionEventListener, Synchronization {
-  
+
-   *  
+   * 
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
+   * 
-  public Object allocateConnection(ManagedConnectionFactory mcf,
-      ConnectionRequestInfo reqInfo) throws ResourceException {
-    if (!isActive) { throw new ResourceException(LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPLALLOCATECONNECTIONNO_VALID_CONNECTION_AVAILABLE.toLocalizedString()); }
+  public Object allocateConnection(ManagedConnectionFactory mcf, ConnectionRequestInfo reqInfo)
+      throws ResourceException {
+    if (!isActive) {
+      throw new ResourceException(
+          LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPLALLOCATECONNECTIONNO_VALID_CONNECTION_AVAILABLE
+              .toLocalizedString());
+    }
-    }
-    catch (PoolException ex) {
+    } catch (PoolException ex) {
-      throw new ResourceException(LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_ALLOCATECONNECTION_IN_GETTING_CONNECTION_FROM_POOL_DUE_TO_0.toLocalizedString(ex.getMessage()), ex);
+      throw new ResourceException(
+          LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_ALLOCATECONNECTION_IN_GETTING_CONNECTION_FROM_POOL_DUE_TO_0
+              .toLocalizedString(ex.getMessage()),
+          ex);
-      
+
-        //xalistThreadLocal.set(resList);
-        //Asif :Add in the Map after successful registration of XAResource
-        //xaResourcesMap.put(conn, xar);
+        // xalistThreadLocal.set(resList);
+        // Asif :Add in the Map after successful registration of XAResource
+        // xaResourcesMap.put(conn, xar);
-    }
-    catch (RollbackException ex) {
-      String exception = LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_AN_EXCEPTION_WAS_CAUGHT_WHILE_ALLOCATING_A_CONNECTION_DUE_TO_0.toLocalizedString(ex.getMessage());
+    } catch (RollbackException ex) {
+      String exception =
+          LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_AN_EXCEPTION_WAS_CAUGHT_WHILE_ALLOCATING_A_CONNECTION_DUE_TO_0
+              .toLocalizedString(ex.getMessage());
-    }
-    catch (SystemException ex) {
-      throw new ResourceException(LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_ALLOCATECONNECTION_SYSTEM_EXCEPTION_DUE_TO_0.toLocalizedString(ex.getMessage()), ex);
+    } catch (SystemException ex) {
+      throw new ResourceException(
+          LocalizedStrings.FacetsJCAConnectionManagerImpl_FACETSJCACONNECTIONMANAGERIMPL_ALLOCATECONNECTION_SYSTEM_EXCEPTION_DUE_TO_0
+              .toLocalizedString(ex.getMessage()),
+          ex);
-      //	        XAResource xar = (XAResource) xaResourcesMap.get(conn);
+      // XAResource xar = (XAResource) xaResourcesMap.get(conn);
-      TransactionManagerImpl transManager = TransactionManagerImpl
-          .getTransactionManager();
+      TransactionManagerImpl transManager = TransactionManagerImpl.getTransactionManager();
-        }
-        else {
+        } else {
-      }
-      catch (Exception se) {
+      } catch (Exception se) {
-        //mannPoolCache.destroyPooledConnection(conn);
-      }
-      catch (Exception ex) {
-        String exception = "FacetsJCAConnectionManagerImpl::connectionErrorOccured: Exception occured due to "
-            + ex.getMessage();
+        // mannPoolCache.destroyPooledConnection(conn);
+      } catch (Exception ex) {
+        String exception =
+            "FacetsJCAConnectionManagerImpl::connectionErrorOccured: Exception occured due to "
+                + ex.getMessage();
-      TransactionManagerImpl transManager = TransactionManagerImpl
-          .getTransactionManager();
+      TransactionManagerImpl transManager = TransactionManagerImpl.getTransactionManager();
-      }
-      catch (Exception se) {
-        String exception = "FacetsJCAConnectionManagerImpl::connectionClosed: Exception occured due to "
-            + se.getMessage();
+      } catch (Exception se) {
+        String exception =
+            "FacetsJCAConnectionManagerImpl::connectionClosed: Exception occured due to "
+                + se.getMessage();

UPD66 UPD66 UPD66 UPD66 DEL66