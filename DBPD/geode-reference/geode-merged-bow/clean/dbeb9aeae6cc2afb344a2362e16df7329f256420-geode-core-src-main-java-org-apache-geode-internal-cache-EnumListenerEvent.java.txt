Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public abstract class EnumListenerEvent
-  {
+public abstract class EnumListenerEvent {
-  @Override  
-  public String toString()
-  {
+  @Override
+  public String toString() {
-  public static final EnumListenerEvent AFTER_REMOTE_REGION_CREATE = new AFTER_REMOTE_REGION_CREATE();// 9
+  public static final EnumListenerEvent AFTER_REMOTE_REGION_CREATE =
+      new AFTER_REMOTE_REGION_CREATE();// 9
-  public static final EnumListenerEvent AFTER_REMOTE_REGION_DEPARTURE = new AFTER_REMOTE_REGION_DEPARTURE(); // 10
+  public static final EnumListenerEvent AFTER_REMOTE_REGION_DEPARTURE =
+      new AFTER_REMOTE_REGION_DEPARTURE(); // 10
-  
-  public static final EnumListenerEvent AFTER_REGION_LIVE = new AFTER_REGION_LIVE();// 14  
-  
-  public static final EnumListenerEvent AFTER_REGISTER_INSTANTIATOR = new AFTER_REGISTER_INSTANTIATOR();// 15  
-  
-  public static final EnumListenerEvent AFTER_REGISTER_DATASERIALIZER = new AFTER_REGISTER_DATASERIALIZER();// 16
-  
-  public static final EnumListenerEvent AFTER_TOMBSTONE_EXPIRATION = new AFTER_TOMBSTONE_EXPIRATION(); // 17
+
+  public static final EnumListenerEvent AFTER_REGION_LIVE = new AFTER_REGION_LIVE();// 14
+
+  public static final EnumListenerEvent AFTER_REGISTER_INSTANTIATOR =
+      new AFTER_REGISTER_INSTANTIATOR();// 15
+
+  public static final EnumListenerEvent AFTER_REGISTER_DATASERIALIZER =
+      new AFTER_REGISTER_DATASERIALIZER();// 16
+
+  public static final EnumListenerEvent AFTER_TOMBSTONE_EXPIRATION =
+      new AFTER_TOMBSTONE_EXPIRATION(); // 17
-  
-  private static EnumListenerEvent[] instances = new EnumListenerEvent[] {
-    AFTER_CREATE, AFTER_UPDATE, AFTER_INVALIDATE, AFTER_DESTROY, AFTER_REGION_CREATE,
-    AFTER_REGION_INVALIDATE, AFTER_REGION_CLEAR, AFTER_REGION_DESTROY,
-    AFTER_REMOTE_REGION_CREATE, AFTER_REMOTE_REGION_DEPARTURE, AFTER_REMOTE_REGION_CRASH,
-    AFTER_ROLE_GAIN, AFTER_ROLE_LOSS, AFTER_REGION_LIVE, AFTER_REGISTER_INSTANTIATOR,
-    AFTER_REGISTER_DATASERIALIZER, AFTER_TOMBSTONE_EXPIRATION, TIMESTAMP_UPDATE
-  };
-  
+
+  private static EnumListenerEvent[] instances =
+      new EnumListenerEvent[] {AFTER_CREATE, AFTER_UPDATE, AFTER_INVALIDATE, AFTER_DESTROY,
+          AFTER_REGION_CREATE, AFTER_REGION_INVALIDATE, AFTER_REGION_CLEAR, AFTER_REGION_DESTROY,
+          AFTER_REMOTE_REGION_CREATE, AFTER_REMOTE_REGION_DEPARTURE, AFTER_REMOTE_REGION_CRASH,
+          AFTER_ROLE_GAIN, AFTER_ROLE_LOSS, AFTER_REGION_LIVE, AFTER_REGISTER_INSTANTIATOR,
+          AFTER_REGISTER_DATASERIALIZER, AFTER_TOMBSTONE_EXPIRATION, TIMESTAMP_UPDATE};
+
-    for (int i=0; i<instances.length; i++) {
-      assert instances[i].getEventCode() == i+1 : "event is in the wrong place: " + (i+1);
+    for (int i = 0; i < instances.length; i++) {
+      assert instances[i].getEventCode() == i + 1 : "event is in the wrong place: " + (i + 1);
-    
-  private static class AFTER_CREATE extends EnumListenerEvent
-   {
+
+  private static class AFTER_CREATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterCreate((EntryEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterCreate((EntryEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  
-  private static class AFTER_UPDATE extends EnumListenerEvent
-   {
+
+  private static class AFTER_UPDATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterUpdate((EntryEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterUpdate((EntryEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_INVALIDATE extends EnumListenerEvent
-   {
+  private static class AFTER_INVALIDATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterInvalidate((EntryEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterInvalidate((EntryEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_DESTROY extends EnumListenerEvent
-   {
+  private static class AFTER_DESTROY extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterDestroy((EntryEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterDestroy((EntryEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REGION_CREATE extends EnumListenerEvent
-   {
+  private static class AFTER_REGION_CREATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterRegionCreate((RegionEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterRegionCreate((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REGION_INVALIDATE extends EnumListenerEvent
-   {
+  private static class AFTER_REGION_INVALIDATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterRegionInvalidate((RegionEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterRegionInvalidate((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REGION_CLEAR extends EnumListenerEvent
-   {
+  private static class AFTER_REGION_CLEAR extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterRegionClear((RegionEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterRegionClear((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REGION_DESTROY extends EnumListenerEvent
-   {
+  private static class AFTER_REGION_DESTROY extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
-      listener.afterRegionDestroy((RegionEvent)event);
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
+      listener.afterRegionDestroy((RegionEvent) event);
-      ((LocalRegion)event.getRegion()).closeCacheCallback(listener);
+      ((LocalRegion) event.getRegion()).closeCacheCallback(listener);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REMOTE_REGION_CREATE extends EnumListenerEvent
-   {
+  private static class AFTER_REMOTE_REGION_CREATE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-        ((RegionMembershipListener)listener)
-            .afterRemoteRegionCreate((RegionEvent)event);
+        ((RegionMembershipListener) listener).afterRemoteRegionCreate((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REMOTE_REGION_DEPARTURE extends EnumListenerEvent
-   {
+  private static class AFTER_REMOTE_REGION_DEPARTURE extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-        ((RegionMembershipListener)listener)
-            .afterRemoteRegionDeparture((RegionEvent)event);
+        ((RegionMembershipListener) listener).afterRemoteRegionDeparture((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_REMOTE_REGION_CRASH extends EnumListenerEvent
-   {
+  private static class AFTER_REMOTE_REGION_CRASH extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-        ((RegionMembershipListener)listener)
-            .afterRemoteRegionCrash((RegionEvent)event);
+        ((RegionMembershipListener) listener).afterRemoteRegionCrash((RegionEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_ROLE_GAIN extends EnumListenerEvent
-   {
+  private static class AFTER_ROLE_GAIN extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-        ((RegionRoleListener)listener).afterRoleGain((RoleEvent)event);
+        ((RegionRoleListener) listener).afterRoleGain((RoleEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  private static class AFTER_ROLE_LOSS extends EnumListenerEvent
-   {
+  private static class AFTER_ROLE_LOSS extends EnumListenerEvent {
-    @Override  
-    public void dispatchEvent(CacheEvent event, CacheListener listener)
-    {
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-        ((RegionRoleListener)listener).afterRoleLoss((RoleEvent)event);
+        ((RegionRoleListener) listener).afterRoleLoss((RoleEvent) event);
-    @Override  
-    public byte getEventCode()
-    {
+    @Override
+    public byte getEventCode() {
-  }  
-  private static class AFTER_REGION_LIVE extends EnumListenerEvent
-  {
+  }
+  private static class AFTER_REGION_LIVE extends EnumListenerEvent {
-    @Override  
+    @Override
-      listener.afterRegionLive((RegionEvent)event);
+      listener.afterRegionLive((RegionEvent) event);
-    @Override  
+    @Override
-  
-  private static class AFTER_REGISTER_INSTANTIATOR extends EnumListenerEvent
-  {
-   protected AFTER_REGISTER_INSTANTIATOR() {
-     super("AFTER_REGISTER_INSTANTIATOR");
-   }
-   @Override  
-   public void dispatchEvent(CacheEvent event, CacheListener listener) { }
+  private static class AFTER_REGISTER_INSTANTIATOR extends EnumListenerEvent {
+    protected AFTER_REGISTER_INSTANTIATOR() {
+      super("AFTER_REGISTER_INSTANTIATOR");
+    }
-   @Override  
-   public byte getEventCode()
-   {
-     return 15;
-   }
- }
-  
-  private static class AFTER_REGISTER_DATASERIALIZER extends EnumListenerEvent
-  {
-   protected AFTER_REGISTER_DATASERIALIZER() {
-     super("AFTER_REGISTER_DATASERIALIZER");
-   }
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {}
-   @Override  
-   public void dispatchEvent(CacheEvent event, CacheListener listener) { }
+    @Override
+    public byte getEventCode() {
+      return 15;
+    }
+  }
-   @Override  
-   public byte getEventCode()
-   {
-     return 16;
-   }
- }
-  
-  private static class AFTER_TOMBSTONE_EXPIRATION extends EnumListenerEvent
-  {
-   protected AFTER_TOMBSTONE_EXPIRATION() {
-     super("AFTER_TOMBSTONE_EXPIRATION");
-   }
+  private static class AFTER_REGISTER_DATASERIALIZER extends EnumListenerEvent {
+    protected AFTER_REGISTER_DATASERIALIZER() {
+      super("AFTER_REGISTER_DATASERIALIZER");
+    }
-   @Override  
-   public void dispatchEvent(CacheEvent event, CacheListener listener) { }
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {}
-   @Override  
-   public byte getEventCode()
-   {
-     return 17;
-   }
- }
-  
+    @Override
+    public byte getEventCode() {
+      return 16;
+    }
+  }
+
+  private static class AFTER_TOMBSTONE_EXPIRATION extends EnumListenerEvent {
+    protected AFTER_TOMBSTONE_EXPIRATION() {
+      super("AFTER_TOMBSTONE_EXPIRATION");
+    }
+
+    @Override
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {}
+
+    @Override
+    public byte getEventCode() {
+      return 17;
+    }
+  }
+
-    public void dispatchEvent(CacheEvent event, CacheListener listener) {
-    }
+    public void dispatchEvent(CacheEvent event, CacheListener listener) {}
+
-   * This method returns the EnumListenerEvent object corresponding to the cCode
-   * given.
+   * This method returns the EnumListenerEvent object corresponding to the cCode given.
-   * @param eventCode
-   *          the eventCode corresponding to the EnumListenerEvent object
-   *          desired
+   * @param eventCode the eventCode corresponding to the EnumListenerEvent object desired
-  public static EnumListenerEvent getEnumListenerEvent(int eventCode)
-  {
+  public static EnumListenerEvent getEnumListenerEvent(int eventCode) {
-      return instances[eventCode-1];
+      return instances[eventCode - 1];

UPD66 UPD66 DEL66 DEL66