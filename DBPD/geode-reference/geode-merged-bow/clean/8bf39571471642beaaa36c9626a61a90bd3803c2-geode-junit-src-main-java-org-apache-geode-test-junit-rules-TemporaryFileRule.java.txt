Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * deleted when the test method finishes.  This is useful in place of {@link org.junit.rules.TemporaryFolder} when a test needs
- * to create files in a particular directory, for example user.home or user.dir.
+ * deleted when the test method finishes. This is useful in place of
+ * {@link org.junit.rules.TemporaryFolder} when a test needs to create files in a particular
+ * directory, for example user.home or user.dir.
- * <p>Example of usage:
+ * <p>
+ * Example of usage:
+ * 
- *  &#064;Rule
- *  public TemporaryFileRule temporaryFileRule = TemporaryFileRule.inUserHome();
+ *   &#064;Rule
+ *   public TemporaryFileRule temporaryFileRule = TemporaryFileRule.inUserHome();
- *  &#064;Test
- *  public void testUsingTempFolder() throws IOException {
- *      File createdFile= temporaryFileRule.newFile(&quot;myfile.txt&quot;);
- *      File createdFile= temporaryFileRule.newFile(&quot;myfile2.txt&quot;);
- *      // ...
- *     }
+ *   &#064;Test
+ *   public void testUsingTempFolder() throws IOException {
+ *     File createdFile = temporaryFileRule.newFile(&quot;myfile.txt&quot;);
+ *     File createdFile = temporaryFileRule.newFile(&quot;myfile2.txt&quot;);
+ *     // ...
+ *   }
-        throw new IllegalStateException("The specified file " + file.getAbsolutePath() + " already exists.");
+        throw new IllegalStateException(
+            "The specified file " + file.getAbsolutePath() + " already exists.");
-      throw new IllegalStateException("IOException attempting to create file " + file.getAbsolutePath() + ".", e);
+      throw new IllegalStateException(
+          "IOException attempting to create file " + file.getAbsolutePath() + ".", e);

UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66