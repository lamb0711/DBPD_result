GEODE-2654: Backups can capture different members from different points in time
Online backup now takes a backup from a single point in time.
This is done by making all write operations get a backup lock which causes them to
wait until the oplogs are rolled by backup.

+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.EOFException;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.RandomAccessFile;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.ReentrantLock;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.InternalGemFireException;
-import org.apache.logging.log4j.Logger;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayInputStream;
-import java.io.DataInput;
-import java.io.DataInputStream;
-import java.io.DataOutput;
-import java.io.EOFException;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.PrintStream;
-import java.io.RandomAccessFile;
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
+  private final ReentrantLock lock = new ReentrantLock();
+
-  /**
-   * Lock used to synchronize access to the init file. This is a lock rather than a synchronized
-   * block because the backup tool needs to acquire this lock.
-   */
-  private final BackupLock lock = new BackupLock();
+  private void lock(boolean useBackupLock) {
+    if (useBackupLock) {
+      getDiskStore().getBackupLock().lock();
+    }
+    this.lock.lock();
+  }
+
+  private void unlock(boolean useBackupLock) {
+    if (useBackupLock) {
+      getDiskStore().getBackupLock().unlock();
+    }
+    this.lock.unlock();
+  }
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock(false);
+    lock(false);
-      lock.unlock();
+      unlock(false);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);
-  public void lockForBackup() {
-    lock.lockForBackup();
-  }
-
-  public void unlockForBackup() {
-    lock.unlockForBackup();
-  }
-
-  public void setBackupThread(Thread thread) {
-    lock.setBackupThread(thread);
-  }
-
-    lock.lock();
+    lock(true);
-      lock.unlock();
+      unlock(true);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS31 UPD43 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS8 UPD83 UPD42 INS44 INS8 UPD42 INS39 INS42 INS25 MOV21 INS39 INS42 INS25 INS21 UPD43 INS42 INS8 INS42 INS8 INS32 UPD42 MOV21 INS22 UPD42 MOV21 INS22 INS42 UPD9 INS9 INS9 UPD9 UPD9 UPD9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 UPD9 UPD9 UPD9 UPD9 UPD9 UPD9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS52 INS42 INS52 INS42 INS32 UPD42 INS32 UPD42 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42