GEODE-5971: delete LegacyCommandResult and rename ModelResultModel toâ€¦ (#3497)



-import java.util.LinkedHashMap;
+import org.assertj.core.api.AbstractStringAssert;
-import org.junit.Assert;
-import org.apache.geode.management.internal.cli.result.ModelCommandResult;
-    extends AbstractAssert<CommandResultAssert, CommandResultExecution> {
+    extends AbstractAssert<CommandResultAssert, CommandResult> {
+
+  private String commandOutput;
-    super(new CommandResultExecution(commandResult.toJson(), commandResult),
-        CommandResultAssert.class);
-  }
-
-  public CommandResultAssert(String output, CommandResult commandResult) {
-    super(new CommandResultExecution(output, commandResult), CommandResultAssert.class);
+    super(commandResult, CommandResultAssert.class);
+    this.commandOutput = commandResult.asString();
-    return actual.getCommandResult();
+    return actual;
-    assertThat(actual.getOutput()).containsPattern("\\Q" + key + "\\E\\s+: \\Q" + value + "\\E");
+    assertThat(commandOutput).containsPattern("\\Q" + key + "\\E\\s+: \\Q" + value + "\\E");
+  public AbstractStringAssert<?> hasOutput() {
+    return assertThat(commandOutput);
+  }
+
-    for (String expectedOutput : expectedOutputs) {
-      assertThat(actual.getOutput()).contains(expectedOutput);
-    }
-
-    return this;
-  }
-
-  /**
-   * @deprecated use hasDataSection methods to verify the table contents
-   */
-  public CommandResultAssert containsOrderedOutput(String dataSectionName,
-      String... expectedOutputs) {
-
-    LinkedHashMap<String, String> outputMap;
-    try {
-      outputMap =
-          ((LinkedHashMap) actual.getCommandResult().getMapFromSection(dataSectionName));
-    } catch (NullPointerException ex) {
-      Assert.fail("No section found for \"" + dataSectionName + "\"");
-      return this;
-    }
-    String outputString = outputMap.toString();
-    int outputIndex = 0;
-
-    for (int i = 0; i < expectedOutputs.length; i++) {
-      outputIndex = outputString.indexOf(expectedOutputs[i]);
-      if (outputIndex == -1) {
-        Assert.fail("Expected output " + expectedOutputs[i]
-            + " was not found, or isn't in the specified order.");
-      }
-      outputString = outputString.substring(outputIndex);
-    }
-
+    assertThat(commandOutput).contains(expectedOutputs);
-    for (String expectedOutput : expectedOutputs) {
-      assertThat(actual.getOutput()).doesNotContain(expectedOutput);
-    }
-
+    assertThat(commandOutput).doesNotContain(expectedOutputs);
-    CommandResult result = actual.getCommandResult();
-    Assertions.assertThat(result.getStatus()).describedAs(actual.getOutput())
+    Assertions.assertThat(actual.getStatus()).describedAs(commandOutput)
-  public CommandResultAssert hasFailToPersistError() {
-    Assertions.assertThat(actual.getCommandResult().failedToPersist()).isTrue();
-    return this;
-  }
-
-  public CommandResultAssert hasNoFailToPersistError() {
-    Assertions.assertThat(actual.getCommandResult().failedToPersist()).isFalse();
-    return this;
-  }
-
-    CommandResult result = actual.getCommandResult();
-    Assertions.assertThat(result.getStatus()).describedAs(actual.getOutput())
+    Assertions.assertThat(actual.getStatus()).describedAs(commandOutput)
-   * the specified values in the specified order.
-   *
-   * For example, given the following gfsh output:
-   *
-   * <pre>
-   * Index Name | Region Path | Server Name |      Indexed Fields      |
-   * ---------- | ----------- | ----------- | ------------------------ |
-   * index1      | /region1     | server-0    | [field1, field3, field2] |
-   * index2      | /region2     | server-0    | [field1, field3, field2] |
-   * </pre>
-   *
-   * We might assert that:
-   *
-   * <pre>
-   * <code> tableHasColumnWithExactValuesInExactOrder("Region Path", "/region1", "/region2");
-   * </code>
-   * </pre>
-   *
-   * @deprecated use hasTableSection methods to verify the table contents
-   */
-  public CommandResultAssert tableHasColumnWithExactValuesInExactOrder(String header,
-      String... expectedValues) {
-    List<String> actualValues = actual.getCommandResult().getTableColumnValues(header);
-    assertThat(actualValues).containsExactly(expectedValues);
-
-    return this;
-  }
-
-  /**
-   * Verifies that the gfsh output contains a table that has a column with the specified header and
-    List<String> actualValues = actual.getCommandResult().getTableColumnValues(header);
-    assertThat(actualValues).containsExactlyInAnyOrder(expectedValues);
-
+    hasTableSection().hasColumn(header).containsExactlyInAnyOrder(expectedValues);
-      List<String> columnValues = actual.getCommandResult().getTableColumnValues(header);
+      List<String> columnValues =
+          actual.getResultData().getTableSections().get(0).getValuesInColumn(header);
-  public CommandResultAssert tableHasRowCount(String anyColumnHeader, int rowSize) {
-    assertThat(actual.getCommandResult().getTableColumnValues(anyColumnHeader).size())
-        .isEqualTo(rowSize);
+  public CommandResultAssert tableHasRowCount(int rowSize) {
+    hasTableSection().hasRowSize(rowSize);
-    List<String> actualValues = actual.getCommandResult().getTableColumnValues(header);
+    TabularResultModel actual = hasTableSection().getActual();
+    List<String> actualValues = actual.getValuesInColumn(header);
-    List<String> actualValues = actual.getCommandResult().getTableColumnValues(header);
-    assertThat(actualValues).containsOnly(expectedValues);
+    hasTableSection().hasColumn(header).containsOnly(expectedValues);
-   * methods that are only applicable to ModelCommandResult
+   * methods that are only applicable to CommandResult
-    ModelCommandResult modelCommandResult = (ModelCommandResult) actual.getCommandResult();
-    return modelCommandResult.getResultData();
+    return actual.getResultData();
+  public CommandResultAssert hasNoTableSection() {
+    assertThat(actual.getResultData().getTableSections().size()).isEqualTo(0);
+    return this;
+  }
+

MOV26 MOV31 MOV31 MOV31 MOV31 UPD40 UPD74 INS23 MOV43 INS83 MOV43 INS59 MOV44 INS74 INS42 INS8 MOV29 MOV43 UPD42 MOV44 INS8 INS8 MOV29 MOV43 UPD42 MOV43 UPD42 MOV44 MOV29 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV43 UPD42 INS42 INS46 INS21 INS43 INS76 INS41 MOV21 MOV41 MOV21 MOV41 MOV41 MOV41 INS21 MOV41 INS60 INS60 MOV41 INS41 INS42 MOV57 INS7 INS42 UPD42 MOV42 INS32 INS32 INS32 INS43 INS59 MOV74 MOV59 INS32 INS32 INS22 INS32 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 INS32 MOV42 MOV42 MOV32 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS34 INS52 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 MOV42 MOV74 UPD42 INS32 INS42 MOV42 UPD42 INS32 UPD42 UPD42 MOV42 MOV42 MOV42 MOV32 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS42 INS34 UPD42 MOV32 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL46 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL57 DEL46 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL36 DEL7 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL52 DEL41 DEL8 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL43 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL43 DEL42 DEL43 DEL74 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL40 DEL32 DEL52 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL52 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL52 DEL41 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42