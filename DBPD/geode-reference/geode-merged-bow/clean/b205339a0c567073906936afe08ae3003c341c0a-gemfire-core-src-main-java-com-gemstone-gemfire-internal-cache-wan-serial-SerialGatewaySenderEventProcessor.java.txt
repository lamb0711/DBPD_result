Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.EventID;
-  private Map unprocessedEvents;
+  private Map<EventID, EventWrapper> unprocessedEvents;
-  private Map unprocessedTokens;
+  private Map<EventID, Long> unprocessedTokens;
-    this.unprocessedEvents = new LinkedHashMap();
-    this.unprocessedTokens = new LinkedHashMap();
+    this.unprocessedEvents = new LinkedHashMap<EventID, EventWrapper>();
+    this.unprocessedTokens = new LinkedHashMap<EventID, Long>();
-              if (this.unprocessedEvents.remove(ge.getEventId()) != null) {
+              EventWrapper unprocessedEvent = this.unprocessedEvents.remove(ge.getEventId());
+              if (unprocessedEvent != null) {
+                unprocessedEvent.event.release();
-          Iterator it = this.unprocessedEvents.values().iterator();
-          while (it.hasNext() && !stopped()) {
-            EventWrapper ew = (EventWrapper)it.next();
+          Iterator<Map.Entry<EventID, EventWrapper>> it = this.unprocessedEvents.entrySet().iterator();
+          while (it.hasNext()) {
+            if (stopped()) break;
+            Map.Entry<EventID, EventWrapper> me = it.next();
+            EventWrapper ew = me.getValue();
-            try {
-            } catch (IOException e) {
-              logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayImpl_EVENT_FAILED_TO_BE_INITIALIZED_0, gatewayEvent), e);
-            }
+            it.remove();
+            boolean queuedEvent = false;
+              queuedEvent = true;
+            } finally {
+              if (!queuedEvent) {
+                gatewayEvent.release();
+              }
-      this.unprocessedEvents = null;
+      releaseUnprocessedEvents();
+  
+  private void releaseUnprocessedEvents() {
+    synchronized (this.unprocessedEventsLock) {
+      Map<EventID, EventWrapper> m = this.unprocessedEvents;
+      if (m != null) {
+        for (EventWrapper ew: m.values()) {
+          GatewaySenderEventImpl gatewayEvent = ew.event;
+          gatewayEvent.release();
+        }
+        this.unprocessedEvents = null;
+      }
+    }
+  }
+  
+  @Override
+  public void closeProcessor() {
+    try {
+      super.closeProcessor();
+    } finally {
+      releaseUnprocessedEvents();
+    }
+  }
-          senderEvent = new GatewaySenderEventImpl(operation, event, substituteValue, false);
+          senderEvent = new GatewaySenderEventImpl(operation, event, substituteValue, false); // OFFHEAP ok
-      senderEvent = new GatewaySenderEventImpl(operation, event, substituteValue);
+      senderEvent = new GatewaySenderEventImpl(operation, event, substituteValue); // OFFHEAP ok
-      Object v = this.unprocessedEvents.remove(gatewayEvent.getEventId());
-      if (v != null) {
+      EventWrapper ew = this.unprocessedEvents.remove(gatewayEvent.getEventId());
+      if (ew != null) {
+        ew.event.release();
-      Object v = this.unprocessedEvents.remove(gatewayEvent.getEventId());
+      EventWrapper ew = this.unprocessedEvents.remove(gatewayEvent.getEventId());
-      if (v == null) {
+      if (ew == null) {
-          try {
-            gatewayEvent.initialize();
-          } catch (Exception e) {
-          }
-              sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), deserialize(gatewayEvent.getValue()));
+              sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), gatewayEvent.getValueAsString(true));
-          Object mapValue = Long.valueOf(System.currentTimeMillis()
+          Long mapValue = Long.valueOf(System.currentTimeMillis()
-          Object oldv = this.unprocessedTokens.put(gatewayEvent.getEventId(),
-              mapValue);
+          Long oldv = this.unprocessedTokens.put(gatewayEvent.getEventId(), mapValue);
-          try {
-            gatewayEvent.initialize();
-          } catch (Exception e) {
-          }
-              sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), deserialize(gatewayEvent.getValue()));
+              sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), gatewayEvent.getValueAsString(true));
+        ew.event.release();
-     GatewaySenderStats statistics = this.sender.getStatistics();
+    boolean freeGatewayEvent = true;
+    try {
+    GatewaySenderStats statistics = this.sender.getStatistics();
-    Object v = this.unprocessedTokens.remove(gatewayEvent.getEventId());
+    Long v = this.unprocessedTokens.remove(gatewayEvent.getEventId());
-            sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), deserialize(gatewayEvent.getValue()));
+            sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), gatewayEvent.getValueAsString(true));
-        Object mapValue = new EventWrapper(gatewayEvent);
-        Object oldv = this.unprocessedEvents.put(gatewayEvent.getEventId(), mapValue);
+        EventWrapper mapValue = new EventWrapper(gatewayEvent);
+        EventWrapper oldv = this.unprocessedEvents.put(gatewayEvent.getEventId(), mapValue);
+          freeGatewayEvent = false;
-            sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), deserialize(gatewayEvent.getValue()));
+            sender.getId(), gatewayEvent.getEventId(), gatewayEvent.getKey(), gatewayEvent.getValueAsString(true));
+    } finally {
+      if (freeGatewayEvent) {
+        gatewayEvent.release();
+      }
+    }
-          Iterator it = this.unprocessedTokens.entrySet().iterator();
+          Iterator<Map.Entry<EventID, Long>> it = this.unprocessedTokens.entrySet().iterator();
-            Map.Entry me = (Map.Entry)it.next();
-            long meValue = ((Long)me.getValue()).longValue();
+            Map.Entry<EventID, Long> me = it.next();
+            long meValue = me.getValue().longValue();
-          Iterator it = this.unprocessedEvents.entrySet().iterator();
+          Iterator<Map.Entry<EventID, EventWrapper>> it = this.unprocessedEvents.entrySet().iterator();
-            Map.Entry me = (Map.Entry)it.next();
-            AbstractGatewaySender.EventWrapper ew = (AbstractGatewaySender.EventWrapper)me.getValue();
+            Map.Entry<EventID, EventWrapper> me = it.next();
+            EventWrapper ew = me.getValue();
+              ew.event.release();
-  protected Object deserialize(byte[] serializedBytes) {
-    Object deserializedObject = serializedBytes;
-    // This is a debugging method so ignore all exceptions like
-    // ClassNotFoundException
-    try {
-      deserializedObject = EntryEventImpl.deserialize(serializedBytes);
-    } catch (Exception e) {
-    }
-    return deserializedObject;
-  }
-

INS26 INS40 INS31 INS31 INS74 INS74 UPD83 MOV83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS8 MOV43 INS43 INS43 MOV43 INS43 INS43 INS51 INS42 INS54 INS60 INS54 INS42 INS42 INS42 INS42 INS22 INS8 INS8 INS8 INS39 INS59 MOV8 INS8 INS21 INS52 INS42 INS60 INS25 INS21 INS21 INS60 MOV60 INS42 INS9 INS25 INS74 INS74 INS32 INS74 MOV59 INS27 INS8 INS48 INS32 INS43 INS59 UPD43 MOV43 MOV8 INS42 INS8 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS43 INS43 INS43 UPD42 MOV22 INS42 INS33 INS70 MOV21 INS42 INS42 INS42 INS42 MOV32 UPD42 INS21 INS21 UPD42 UPD42 UPD42 INS25 MOV21 MOV25 MOV21 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS44 INS32 INS8 INS32 INS32 INS32 INS8 MOV32 INS32 INS74 INS59 INS32 INS43 INS42 INS42 INS42 MOV60 MOV21 INS40 INS42 INS42 MOV42 INS42 INS42 INS21 UPD43 UPD43 INS40 UPD42 UPD43 UPD43 INS42 INS42 MOV43 INS74 INS42 INS32 MOV42 MOV42 INS25 INS60 MOV21 INS21 INS60 INS42 UPD43 INS32 INS32 UPD42 UPD42 UPD42 UPD42 INS21 INS74 INS74 INS43 INS43 INS43 INS32 INS42 INS32 INS10 INS74 MOV43 INS59 INS32 INS39 INS59 INS8 UPD42 UPD42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS45 INS32 INS32 INS32 INS32 MOV32 MOV32 MOV32 MOV32 MOV32 INS7 UPD45 MOV32 MOV43 INS74 INS60 MOV43 INS74 MOV60 INS60 INS40 INS42 INS42 INS22 INS42 INS42 INS43 INS43 INS43 UPD42 MOV32 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 INS9 MOV42 MOV42 MOV42 MOV42 UPD42 INS9 INS42 INS9 UPD42 INS9 INS42 MOV43 INS43 INS43 INS74 INS59 MOV43 INS43 INS43 INS74 UPD43 MOV43 INS59 INS52 INS42 INS40 INS42 MOV42 INS42 UPD42 MOV42 INS7 INS38 INS8 INS42 INS42 MOV43 INS43 INS43 INS42 MOV32 INS42 UPD42 MOV42 MOV43 INS43 INS43 MOV32 INS42 MOV32 INS21 INS42 INS42 MOV32 INS42 INS21 INS42 INS9 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 MOV42 MOV42 INS40 INS42 INS40 INS42 INS42 INS42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL11 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL25 DEL8 DEL11 DEL36 DEL11 DEL42 DEL11 DEL59 DEL60 DEL40 DEL40 DEL43 DEL11 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31