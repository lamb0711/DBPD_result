Revert "GEODE-5011: Convert 'Data' commands to ResultModel (#1945)"

This reverts commit f1c6b560442f2f23aa9240b3550d9d664e094c7c.

-import java.io.IOException;
+import java.util.concurrent.atomic.AtomicInteger;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
+import org.json.JSONArray;
+import org.apache.geode.cache.query.internal.StructImpl;
+import org.apache.geode.cache.query.internal.Undefined;
+import org.apache.geode.management.internal.cli.json.GfJsonException;
+import org.apache.geode.management.internal.cli.json.GfJsonObject;
-import org.apache.geode.pdx.JSONFormatter;
+    AtomicInteger nestedObjectCount = new AtomicInteger(0);
-        select_SelectResults((SelectResults) results, principal, list, cache);
+        select_SelectResults((SelectResults) results, principal, list, nestedObjectCount, cache);
-    } catch (FunctionDomainException | QueryInvocationTargetException | NameResolutionException
-        | TypeMismatchException e) {
+    } catch (FunctionDomainException | GfJsonException | QueryInvocationTargetException
+        | NameResolutionException | TypeMismatchException e) {
-    list.add(createSelectResultRow(results));
+    String str = toJson(results);
+    GfJsonObject jsonBean;
+    try {
+      jsonBean = new GfJsonObject(str);
+    } catch (GfJsonException e) {
+      logger.info("Exception occurred:", e);
+      jsonBean = new GfJsonObject();
+      try {
+        jsonBean.put("msg", e.getMessage());
+      } catch (GfJsonException e1) {
+        logger.warn("Ignored GfJsonException:", e1);
+      }
+    }
+    if (logger.isDebugEnabled()) {
+      logger.debug("BeanResults : Adding bean json string : {}", jsonBean);
+    }
+    list.add(new SelectResultRow(DataCommandResult.ROW_TYPE_BEAN, jsonBean.toString()));
-      List<SelectResultRow> list, InternalCache cache) {
+      List<SelectResultRow> list, AtomicInteger nestedObjectCount, InternalCache cache)
+      throws GfJsonException {
-      list.add(createSelectResultRow(object));
+      if (object instanceof Struct) {
+        StructImpl impl = (StructImpl) object;
+        GfJsonObject jsonStruct = getJSONForStruct(impl, nestedObjectCount);
+        if (logger.isDebugEnabled()) {
+          logger.debug("SelectResults : Adding select json string : {}", jsonStruct);
+        }
+        list.add(
+            new SelectResultRow(DataCommandResult.ROW_TYPE_STRUCT_RESULT, jsonStruct.toString()));
+      } else if (JsonUtil.isPrimitiveOrWrapper(object.getClass())) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("SelectResults : Adding select primitive : {}", object);
+        }
+        list.add(new SelectResultRow(DataCommandResult.ROW_TYPE_PRIMITIVE, object));
+      } else {
+        if (logger.isDebugEnabled()) {
+          logger.debug("SelectResults : Bean Results class is {}", object.getClass());
+        }
+        String str = toJson(object);
+        GfJsonObject jsonBean;
+        try {
+          jsonBean = new GfJsonObject(str);
+        } catch (GfJsonException e) {
+          logger.error(e.getMessage(), e);
+          jsonBean = new GfJsonObject();
+          try {
+            jsonBean.put("msg", e.getMessage());
+          } catch (GfJsonException e1) {
+            logger.warn("Ignored GfJsonException:", e1);
+          }
+        }
+        if (logger.isDebugEnabled()) {
+          logger.debug("SelectResults : Adding bean json string : {}", jsonBean);
+        }
+        list.add(new SelectResultRow(DataCommandResult.ROW_TYPE_BEAN, jsonBean.toString()));
+      }
-  private SelectResultRow createSelectResultRow(Object object) {
-    int rowType;
-    if (object instanceof Struct) {
-      rowType = DataCommandResult.ROW_TYPE_STRUCT_RESULT;
-    } else if (JsonUtil.isPrimitiveOrWrapper(object.getClass())) {
-      rowType = DataCommandResult.ROW_TYPE_PRIMITIVE;
+  private String toJson(Object object) {
+    if (object instanceof Undefined) {
+      return "{\"Value\":\"UNDEFINED\"}";
+    } else if (object instanceof PdxInstance) {
+      return pdxToJson((PdxInstance) object);
-      rowType = DataCommandResult.ROW_TYPE_BEAN;
+      return JsonUtil.objectToJsonNestedChkCDep(object, NESTED_JSON_LENGTH);
+  }
-    return new SelectResultRow(rowType, object);
+  private GfJsonObject getJSONForStruct(StructImpl impl, AtomicInteger ai) throws GfJsonException {
+    String fields[] = impl.getFieldNames();
+    Object[] values = impl.getFieldValues();
+    GfJsonObject jsonObject = new GfJsonObject();
+    for (int i = 0; i < fields.length; i++) {
+      Object value = values[i];
+      if (value != null) {
+        if (JsonUtil.isPrimitiveOrWrapper(value.getClass())) {
+          jsonObject.put(fields[i], value);
+        } else {
+          jsonObject.put(fields[i], toJson(value));
+        }
+      } else {
+        jsonObject.put(fields[i], "null");
+      }
+    }
+    return jsonObject;
-          Object array[] = getClassAndJson(value);
+          Object array[] = getJSONForNonPrimitiveObject(value);
-        Object array[] = getClassAndJson(value);
+        Object array[] = getJSONForNonPrimitiveObject(value);
-        return DataCommandResult.createGetInfoResult(key, getClassAndJson(null)[1], null,
+        return DataCommandResult.createGetInfoResult(key, null, null,
-          keyInfo.addLocation(new Object[] {region.getFullPath(), true, getClassAndJson(value)[1],
-              isPrimary, "" + bucketId});
+          keyInfo.addLocation(new Object[] {region.getFullPath(), true,
+              getJSONForNonPrimitiveObject(value)[1], isPrimary, "" + bucketId});
-            keyInfo.addLocation(
-                new Object[] {region.getFullPath(), true, getClassAndJson(value)[1], false, null});
+            keyInfo.addLocation(new Object[] {region.getFullPath(), true,
+                getJSONForNonPrimitiveObject(value)[1], false, null});
-      Object array[] = getClassAndJson(returnValue);
+      Object array[] = getJSONForNonPrimitiveObject(returnValue);
-    Object resultObject;
-    try {
-      ObjectMapper mapper = new ObjectMapper();
-      mapper.enable(JsonParser.Feature.ALLOW_SINGLE_QUOTES);
-      resultObject = mapper.readValue(string, klass);
-    } catch (IOException e) {
-      throw new IllegalArgumentException(
-          "Failed to convert input key to " + klassString + " Msg : " + e.getMessage());
+    if (JsonUtil.isPrimitiveOrWrapper(klass)) {
+      try {
+        if (klass.equals(Byte.class)) {
+          return Byte.parseByte(string);
+        } else if (klass.equals(Short.class)) {
+          return Short.parseShort(string);
+        } else if (klass.equals(Integer.class)) {
+          return Integer.parseInt(string);
+        } else if (klass.equals(Long.class)) {
+          return Long.parseLong(string);
+        } else if (klass.equals(Double.class)) {
+          return Double.parseDouble(string);
+        } else if (klass.equals(Boolean.class)) {
+          return Boolean.parseBoolean(string);
+        } else if (klass.equals(Float.class)) {
+          return Float.parseFloat(string);
+        }
+        return null;
+      } catch (NumberFormatException e) {
+        throw new IllegalArgumentException(
+            "Failed to convert input key to " + klassString + " Msg : " + e.getMessage());
+      }
-    return resultObject;
+    return getObjectFromJson(string, klass);
-  private Object[] getClassAndJson(Object obj) {
+  @SuppressWarnings({"rawtypes"})
+  public static Object[] getJSONForNonPrimitiveObject(Object obj) {
-
-      array[1] = null;
+      array[1] = "<NULL>";
+      return array;
+    } else {
+      array[0] = obj.getClass().getCanonicalName();
+      Class klass = obj.getClass();
+      if (JsonUtil.isPrimitiveOrWrapper(klass)) {
+        array[1] = obj;
+      } else if (obj instanceof PdxInstance) {
+        String str = pdxToJson((PdxInstance) obj);
+        array[1] = str;
+      } else {
+        GfJsonObject object = new GfJsonObject(obj, true);
+        Iterator keysIterator = object.keys();
+        while (keysIterator.hasNext()) {
+          String key = (String) keysIterator.next();
+          Object value = object.get(key);
+          if (GfJsonObject.isJSONKind(value)) {
+            GfJsonObject jsonVal = new GfJsonObject(value);
+            try {
+              if (jsonVal.has("type-class")) {
+                object.put(key, jsonVal.get("type-class"));
+              } else {
+                // Its Map Value
+                object.put(key, "a Map");
+              }
+            } catch (GfJsonException e) {
+              throw new RuntimeException(e);
+            }
+          } else if (value instanceof JSONArray) {
+            // Its a collection either a set or list
+            try {
+              object.put(key, "a Collection");
+            } catch (GfJsonException e) {
+              throw new RuntimeException(e);
+            }
+          }
+        }
+        String str = object.toString();
+        array[1] = str;
+      }
-
-    array[0] = obj.getClass().getCanonicalName();
-
-    if (obj instanceof PdxInstance) {
-      array[1] = JSONFormatter.toJSON((PdxInstance) obj);
-      return array;
-    }
-
-    ObjectMapper mapper = new ObjectMapper();
-    try {
-      array[1] = mapper.writeValueAsString(obj);
-    } catch (JsonProcessingException e) {
-      array[1] = e.getMessage();
-    }
-
-    return array;
+  private static String pdxToJson(PdxInstance obj) {
+    if (obj != null) {
+      try {
+        GfJsonObject json = new GfJsonObject();
+        for (String field : obj.getFieldNames()) {
+          Object fieldValue = obj.getField(field);
+          if (fieldValue != null) {
+            if (JsonUtil.isPrimitiveOrWrapper(fieldValue.getClass())) {
+              json.put(field, fieldValue);
+            } else {
+              json.put(field, fieldValue.getClass());
+            }
+          }
+        }
+        return json.toString();
+      } catch (GfJsonException e) {
+        return null;
+      }
+    }
+    return null;
+  }
+
+  public static <V> V getObjectFromJson(String json, Class<V> klass) {
+    String newString = json.replaceAll("'", "\"");
+    if (newString.charAt(0) == '(') {
+      int len = newString.length();
+      StringBuilder sb = new StringBuilder();
+      sb.append("{").append(newString.substring(1, len - 1)).append("}");
+      newString = sb.toString();
+    }
+    return JsonUtil.jsonToObject(newString, klass);
+  }
+
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS44 INS43 INS83 INS43 INS42 MOV44 INS8 INS43 INS42 INS44 INS44 INS43 INS79 UPD83 MOV83 INS83 MOV5 INS42 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS8 INS60 INS60 INS60 INS54 INS25 INS43 INS42 INS42 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS24 INS25 INS42 INS4 MOV60 INS25 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS8 INS42 INS8 INS62 INS8 INS25 INS42 INS42 INS43 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS32 INS8 INS32 INS45 MOV27 MOV8 INS8 INS42 INS27 INS8 INS33 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS21 INS14 MOV21 INS25 INS42 INS43 INS41 INS62 INS8 INS8 INS42 INS42 INS85 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS60 MOV25 INS42 INS42 INS42 MOV54 INS42 INS42 INS42 INS21 MOV21 INS60 INS25 MOV41 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS32 INS32 INS13 INS60 INS60 MOV21 INS21 INS42 INS42 INS42 INS42 INS43 INS34 UPD84 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS54 INS32 MOV43 INS40 INS32 MOV62 INS8 INS25 INS42 INS45 INS42 INS43 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS34 MOV43 MOV59 INS27 INS8 MOV8 INS7 INS43 INS59 INS32 MOV8 INS25 INS8 INS12 INS42 INS42 INS45 INS45 INS42 INS42 INS34 INS39 INS59 INS43 INS59 INS32 INS7 INS42 INS43 INS42 INS14 INS42 INS32 INS7 INS8 INS12 INS42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS25 INS21 MOV32 INS8 INS8 INS42 INS32 INS32 INS42 UPD42 INS2 INS42 INS33 INS25 INS25 INS41 MOV2 INS45 INS42 INS42 INS32 INS42 INS42 INS42 MOV62 MOV8 INS8 MOV60 INS70 INS41 MOV44 INS8 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS21 INS44 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS25 MOV21 INS25 INS60 INS60 INS54 INS25 INS21 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV8 MOV8 INS32 UPD42 INS32 INS8 INS25 INS33 UPD43 INS42 INS42 INS60 INS60 INS60 INS61 INS60 MOV21 UPD43 INS44 INS32 INS8 INS32 UPD43 INS41 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS14 INS32 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS8 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS45 MOV33 INS42 INS42 INS57 INS41 INS32 INS8 INS25 UPD42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 UPD42 UPD42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 UPD42 INS33 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 MOV43 INS40 INS32 INS42 INS42 INS21 INS14 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 UPD42 INS43 INS32 INS42 INS42 INS57 INS41 INS32 INS8 INS25 INS42 INS42 MOV32 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 UPD43 INS42 INS43 INS59 INS27 INS8 INS42 INS34 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS40 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS54 INS32 INS43 INS40 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS57 INS41 INS32 INS8 INS25 UPD42 INS43 INS42 INS9 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS14 INS42 INS32 INS7 INS8 INS12 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS57 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS54 INS62 INS8 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS43 INS42 INS42 INS42 MOV32 INS42 INS42 INS14 INS21 INS44 INS8 UPD42 MOV42 INS42 INS42 INS42 INS43 INS32 UPD42 MOV42 INS42 INS57 INS41 INS32 INS8 INS25 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS54 INS42 INS42 INS32 INS21 INS21 INS42 INS43 INS32 INS43 INS42 INS21 UPD42 MOV42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS57 INS41 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS14 MOV25 INS44 INS8 INS42 INS8 INS12 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 MOV42 INS42 INS57 INS41 INS43 INS42 INS32 INS8 INS8 INS43 INS42 INS53 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV42 INS43 INS32 INS42 INS42 INS42 INS45 INS21 INS21 INS42 INS14 INS32 INS43 INS42 INS53 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS45 INS42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL40 DEL7 DEL42 DEL40 DEL7 DEL42 DEL40 DEL7 DEL25 DEL39 DEL60 DEL42 DEL42 DEL14 DEL42 DEL32 DEL34 DEL2 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL40 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL41 DEL33 DEL7 DEL42 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31