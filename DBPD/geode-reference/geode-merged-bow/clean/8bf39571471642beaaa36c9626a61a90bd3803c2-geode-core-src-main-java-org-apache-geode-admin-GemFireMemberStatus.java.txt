Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>GemFireMemberStatus</code> provides the status of a specific
- * GemFire member VM. This VM can be a peer, a client, a server and/or a
- * gateway.
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
+ * Class <code>GemFireMemberStatus</code> provides the status of a specific GemFire member VM. This
+ * VM can be a peer, a client, a server and/or a gateway.
+ * 
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
-  protected Object/*GatewayHubStatus*/ _gatewayHubStatus;
+  protected Object/* GatewayHubStatus */ _gatewayHubStatus;
-  
+
-  
+
+   * 
-   * @param isClient Boolean defining whether this member is a client to a
-   * cache server
+   * 
+   * @param isClient Boolean defining whether this member is a client to a cache server
+   * 
+   * 
-	  return this._serverPort;
+    return this._serverPort;
-  
+
-	  this._serverPort = port;
+    this._serverPort = port;
-  
+
+   * 
-   * @param isGatewayHub Boolean defining whether this member is a hub for
-   * WAN gateways
+   * 
+   * @param isGatewayHub Boolean defining whether this member is a hub for WAN gateways
+   * 
-  public Object/*GatewayHubStatus*/ getGatewayHubStatus() {
+  public Object/* GatewayHubStatus */ getGatewayHubStatus() {
-//  protected void setGatewayHubStatus(GatewayHubStatus gatewayHubStatus) {
-//    this._gatewayHubStatus = gatewayHubStatus;
-//  }
+  // protected void setGatewayHubStatus(GatewayHubStatus gatewayHubStatus) {
+  // this._gatewayHubStatus = gatewayHubStatus;
+  // }
-	    return this._outgoingGateways;
+    return this._outgoingGateways;
-  
+
-  
+
+   * 
-  public Object/*ClientHealthStats*/ getClientHealthStats(String clientID) {
+  public Object/* ClientHealthStats */ getClientHealthStats(String clientID) {
-  
+
-  
+
-  
+
-    return (String)this._clientHostNames.get(clientId);
+    return (String) this._clientHostNames.get(clientId);
-  
+
+   * 
-  public Object/*RegionStatus*/ getRegionStatus(String fullRegionPath) {
+  public Object/* RegionStatus */ getRegionStatus(String fullRegionPath) {
-  
+
-  
+
-    buffer
-      .append("GemFireMemberStatus[")
-      .append("isConnected=")
-      .append(this._isConnected)
-      .append("; memberName=")
-      .append(this._memberName)
-      .append("; memberId=")
-      .append(this._memberId)
-      .append("; hostAddress=")
-      .append(this._hostAddress)
-      .append("; mcastPort=")
-      .append(this._mcastPort)
-      .append("; mcastAddress=")
-      .append(this._mcastAddress)
-      .append("; bindAddress=")
-      .append(this._bindAddress)
-      .append("; serverPort=")
-      .append(this._serverPort)
-      .append("; locators=")
-      .append(this._locators)
-      .append("; isClient=")
-      .append(this._isClient)
-      .append("; isServer=")
-      .append(this._isServer)
-      .append("; isGatewayHub=")
-      .append(this._isGatewayHub)
-      .append("; isLocator=")
-      .append(this._isLocator)
-      .append("; isPrimaryGatewayHub=")
-      .append(this._isPrimaryGatewayHub)
-      .append("; gatewayHubStatus=")
-      .append(this._gatewayHubStatus)
-      .append("; connectedPeers=")
-      .append(this._connectedPeers)
-      .append("; connectedServers=")
-      .append(this._connectedServers)
-      .append("; unconnectedServers=")
-      .append(this._unconnectedServers)
-      .append("; connectedClients=")
-      .append(this._connectedClients)
-      .append("; clientHostNames=")
-      .append(this._clientHostNames)
-      .append("; clientQueueSizes=")
-      .append(this._clientQueueSizes)
-      .append("; clientHealthStats=")
-      .append(this._clientHealthStats)
-      .append("; gatewayQueueSizes=")
-      .append(this._gatewayQueueSizes)
-      .append("; regionStatuses=")
-      .append(this._regionStatuses)
-      .append("; maximumHeapSize=")
-      .append(this._maximumHeapSize)
-      .append("; freeHeapSize=")
-      .append(this._freeHeapSize)
-      .append("; upTime=")
-      .append(this.upTime)
-      .append("]");
+    buffer.append("GemFireMemberStatus[").append("isConnected=").append(this._isConnected)
+        .append("; memberName=").append(this._memberName).append("; memberId=")
+        .append(this._memberId).append("; hostAddress=").append(this._hostAddress)
+        .append("; mcastPort=").append(this._mcastPort).append("; mcastAddress=")
+        .append(this._mcastAddress).append("; bindAddress=").append(this._bindAddress)
+        .append("; serverPort=").append(this._serverPort).append("; locators=")
+        .append(this._locators).append("; isClient=").append(this._isClient).append("; isServer=")
+        .append(this._isServer).append("; isGatewayHub=").append(this._isGatewayHub)
+        .append("; isLocator=").append(this._isLocator).append("; isPrimaryGatewayHub=")
+        .append(this._isPrimaryGatewayHub).append("; gatewayHubStatus=")
+        .append(this._gatewayHubStatus).append("; connectedPeers=").append(this._connectedPeers)
+        .append("; connectedServers=").append(this._connectedServers)
+        .append("; unconnectedServers=").append(this._unconnectedServers)
+        .append("; connectedClients=").append(this._connectedClients).append("; clientHostNames=")
+        .append(this._clientHostNames).append("; clientQueueSizes=").append(this._clientQueueSizes)
+        .append("; clientHealthStats=").append(this._clientHealthStats)
+        .append("; gatewayQueueSizes=").append(this._gatewayQueueSizes).append("; regionStatuses=")
+        .append(this._regionStatuses).append("; maximumHeapSize=").append(this._maximumHeapSize)
+        .append("; freeHeapSize=").append(this._freeHeapSize).append("; upTime=")
+        .append(this.upTime).append("]");
-  
+
-    //this._connectedOutgoingGateways = new HashSet();
-    //this._unconnectedOutgoingGateways = new HashSet();
+    // this._connectedOutgoingGateways = new HashSet();
+    // this._unconnectedOutgoingGateways = new HashSet();
-      Map allConnectedClients = InternalClientMembership.getStatusForAllClientsIgnoreSubscriptionStatus();
+      Map allConnectedClients =
+          InternalClientMembership.getStatusForAllClientsIgnoreSubscriptionStatus();
-        putClientHostName(ccs.getMemberId(), ccs.getHostAddress());  
+        putClientHostName(ccs.getMemberId(), ccs.getHostAddress());
-      
+
-      
+
-//      Assert.assertTrue(cache != null); (cannot be null)
-      Region clientHealthMonitoringRegion = ClientHealthMonitoringRegion.getInstance(
-          (GemFireCacheImpl)cache);
-      if(clientHealthMonitoringRegion != null) {
-        String [] clients = (String[])clientHealthMonitoringRegion.keySet().toArray(new String[0]);
+      // Assert.assertTrue(cache != null); (cannot be null)
+      Region clientHealthMonitoringRegion =
+          ClientHealthMonitoringRegion.getInstance((GemFireCacheImpl) cache);
+      if (clientHealthMonitoringRegion != null) {
+        String[] clients = (String[]) clientHealthMonitoringRegion.keySet().toArray(new String[0]);
-          ClientHealthStats stats = (ClientHealthStats)clientHealthMonitoringRegion.get(clientId);
+          ClientHealthStats stats = (ClientHealthStats) clientHealthMonitoringRegion.get(clientId);
-        } 
+        }
-  
-	/**
-	 * returning  Map of client queue size against client Id
-	 *  
-	 * param clientMap is a  Map of client queue size against ClientProxyMembershipID
-	 */
-	private Map getClientIDMap(Map ClientProxyMembershipIDMap) {
-	   Map clientIdMap = new HashMap();
-	   Set entrySet = ClientProxyMembershipIDMap.entrySet();
-	   Iterator entries = entrySet.iterator();
-	   while (entries.hasNext()) {
-             Map.Entry entry = (Map.Entry)entries.next();
-             ClientProxyMembershipID key = (ClientProxyMembershipID)entry.getKey();
-             Integer size = (Integer)entry.getValue();
-             clientIdMap.put(key.getDSMembership(), size);
-	   }
-           return clientIdMap;
-	  }
+
+  /**
+   * returning Map of client queue size against client Id
+   * 
+   * param clientMap is a Map of client queue size against ClientProxyMembershipID
+   */
+  private Map getClientIDMap(Map ClientProxyMembershipIDMap) {
+    Map clientIdMap = new HashMap();
+    Set entrySet = ClientProxyMembershipIDMap.entrySet();
+    Iterator entries = entrySet.iterator();
+    while (entries.hasNext()) {
+      Map.Entry entry = (Map.Entry) entries.next();
+      ClientProxyMembershipID key = (ClientProxyMembershipID) entry.getKey();
+      Integer size = (Integer) entry.getValue();
+      clientIdMap.put(key.getDSMembership(), size);
+    }
+    return clientIdMap;
+  }
-//          Integer connections = (Integer) entry.getValue();
-//          if (connections.intValue()==0) {
-//            addUnconnectedServer(server);
-//          } else {
-            addConnectedServer(server);
-//          }
-          //System.out.println(connections.size() + " logical connnections to server " + server);
+          // Integer connections = (Integer) entry.getValue();
+          // if (connections.intValue()==0) {
+          // addUnconnectedServer(server);
+          // } else {
+          addConnectedServer(server);
+          // }
+          // System.out.println(connections.size() + " logical connnections to server " + server);
-        ? InetAddress.getByName(bindAddress)
-        : SocketCreator.getLocalHost());
-    } catch (IOException e) {/*ignore - leave null host address*/}
+          ? InetAddress.getByName(bindAddress) : SocketCreator.getLocalHost());
+    } catch (IOException e) {
+      /* ignore - leave null host address */}
-    for (Iterator iter=connections.iterator(); iter.hasNext() ; ) {
-      InternalDistributedMember idm = (InternalDistributedMember)iter.next();
+    for (Iterator iter = connections.iterator(); iter.hasNext();) {
+      InternalDistributedMember idm = (InternalDistributedMember) iter.next();
-    //InternalDistributedSystem system = (InternalDistributedSystem) region.getCache().getDistributedSystem();
-    //GemFireStatSampler sampler = system.getStatSampler();
-    //VMStatsContract statsContract = sampler.getVMStats();
+    // InternalDistributedSystem system = (InternalDistributedSystem)
+    // region.getCache().getDistributedSystem();
+    // GemFireStatSampler sampler = system.getStatSampler();
+    // VMStatsContract statsContract = sampler.getVMStats();
-          ? new PartitionedRegionStatus((PartitionedRegion) rootRegion)
-          : new RegionStatus(rootRegion);
+            ? new PartitionedRegionStatus((PartitionedRegion) rootRegion)
+            : new RegionStatus(rootRegion);
-            ? new PartitionedRegionStatus((PartitionedRegion) subRegion)
-            : new RegionStatus(subRegion);
+              ? new PartitionedRegionStatus((PartitionedRegion) subRegion)
+              : new RegionStatus(subRegion);

UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66