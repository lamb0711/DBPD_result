GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Map;
+import java.util.Set;
+import org.apache.geode.redis.internal.RedisLockService;
+   * TThe field that defines the name of the {@link Region} which holds non-named hash. The current
+   * value of this field is {@value #HASH_REGION}.
+   */
+  public static final String HASH_REGION = "ReDiS_HASH";
+
+  /**
+   * TThe field that defines the name of the {@link Region} which holds sets. The current value of
+   * this field is {@value #SET_REGION}.
+   */
+  public static final String SET_REGION = "ReDiS_SET";
+
+
+  /**
+  private RedisLockService hashLockService;
+  private RedisLockService setLockService;
-      Region redisMetaData;
+      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> redisHash;
+      Region<String, RedisDataType> redisMetaData;
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> redisSet;
+
+
+      if ((redisHash = cache.getRegion(HASH_REGION)) == null) {
+        RegionFactory<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> regionFactory =
+            gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+        redisHash = regionFactory.create(HASH_REGION);
+      }
+
+      if ((redisSet = cache.getRegion(SET_REGION)) == null) {
+        RegionFactory<ByteArrayWrapper, Set<ByteArrayWrapper>> regionFactory =
+            gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+        redisSet = regionFactory.create(SET_REGION);
+      }
+
+
+      this.hashLockService = new RedisLockService();
+      this.setLockService = new RedisLockService();
-          expirationFutures, expirationExecutor, this.DEFAULT_REGION_TYPE);
+          expirationFutures, expirationExecutor, this.DEFAULT_REGION_TYPE, redisHash, redisSet);
+      redisMetaData.put(SET_REGION, RedisDataType.REDIS_PROTECTED);
+      redisMetaData.put(HASH_REGION, RedisDataType.REDIS_PROTECTED);
+
-                    keyRegistrar, pubSub));
+                    keyRegistrar, pubSub, hashLockService, setLockService));

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS67 INS42 INS67 INS60 INS60 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS42 INS42 INS74 INS59 INS74 MOV59 INS74 INS59 INS27 INS8 INS27 INS8 INS7 INS7 INS32 INS32 MOV43 INS43 INS74 INS42 INS43 INS43 INS43 INS43 INS43 INS74 INS42 INS36 INS33 MOV60 INS21 INS36 INS33 INS60 INS21 INS22 INS14 INS22 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS74 INS59 INS7 INS7 INS74 INS59 INS7 INS52 INS42 INS43 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42