Merge branch 'release/1.5.0'

-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.Socket;
+import java.util.Objects;
-import org.apache.geode.internal.protocol.protobuf.ProtocolVersion;
-import org.apache.geode.internal.protocol.protobuf.v1.BasicTypes;
-import org.apache.geode.internal.protocol.protobuf.v1.LocatorAPI;
+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message;
+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message.MessageTypeCase;
+import org.apache.geode.internal.protocol.protobuf.v1.ConnectionAPI;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.GetRegionNamesRequest;
-  /**
-   * Set of Internet-address-or-host-name/port pairs of the locators to use to find GemFire servers
-   * that have Protobuf enabled.
-   */
-  private final Set<InetSocketAddress> locators;
-  /**
-   * Socket to a GemFire locator that has Protobuf enabled.
-   */
-  private final Socket socket;
+  private final ProtobufChannel channel;
-    this.locators = locators;
-    InetSocketAddress server = findAServer();
-    socket = new Socket(server.getAddress(), server.getPort());
-
-    final OutputStream outputStream = socket.getOutputStream();
-    ProtocolVersion.NewConnectionClientVersion.newBuilder()
-        .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-        .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-        .writeDelimitedTo(outputStream);
-
-    final InputStream inputStream = socket.getInputStream();
-    if (!ProtocolVersion.VersionAcknowledgement.parseDelimitedFrom(inputStream)
-        .getVersionAccepted()) {
-      throw new IOException("Failed protocol version verification.");
-    }
+    this.channel = new ProtobufChannel(locators);
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder()
-        .setRequest(ClientProtocol.Request.newBuilder()
-            .setGetRegionNamesRequest(RegionAPI.GetRegionNamesRequest.newBuilder()))
-        .build().writeDelimitedTo(outputStream);
+    final Message request =
+        Message.newBuilder().setGetRegionNamesRequest(GetRegionNamesRequest.newBuilder()).build();
-    final InputStream inputStream = socket.getInputStream();
-    final RegionAPI.GetRegionNamesResponse getRegionNamesResponse = ClientProtocol.Message
-        .parseDelimitedFrom(inputStream).getResponse().getGetRegionNamesResponse();
+    final RegionAPI.GetRegionNamesResponse getRegionNamesResponse = channel
+        .sendRequest(request, MessageTypeCase.GETREGIONNAMESRESPONSE).getGetRegionNamesResponse();
-    return new ProtobufRegion(regionName, socket);
+    return new ProtobufRegion(regionName, channel);
-  /**
-   * Queries locators for a Geode server that has Protobuf enabled.
-   *
-   * @return The server chosen by the Locator service for this client
-   * @throws IOException
-   */
-  private InetSocketAddress findAServer() throws IOException {
-    IOException lastException = null;
+  @Override
+  public QueryService getQueryService() {
+    return new ProtobufQueryService(channel);
+  }
-    for (InetSocketAddress locator : locators) {
+  @Override
+  public void close() {
+    try {
+      final Message disconnectClientRequest = ClientProtocol.Message.newBuilder()
+          .setDisconnectClientRequest(
+              ConnectionAPI.DisconnectClientRequest.newBuilder().setReason("Driver closed"))
+          .build();
+      final ConnectionAPI.DisconnectClientResponse disconnectClientResponse =
+          channel.sendRequest(disconnectClientRequest, MessageTypeCase.DISCONNECTCLIENTRESPONSE)
+              .getDisconnectClientResponse();
+      if (Objects.isNull(disconnectClientResponse)) {
+        // The server did not acknowledge the disconnect request; ignore for now.
+      }
+    } catch (IOException ioe) {
+      // NOP
+    } finally {
-        final Socket locatorSocket = new Socket(locator.getAddress(), locator.getPort());
-
-        final OutputStream outputStream = locatorSocket.getOutputStream();
-        final InputStream inputStream = locatorSocket.getInputStream();
-        ProtocolVersion.NewConnectionClientVersion.newBuilder()
-            .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-            .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-            .writeDelimitedTo(outputStream);
-
-        // The locator does not currently send a reply to the ProtocolVersion...
-        if (!ProtocolVersion.VersionAcknowledgement.parseDelimitedFrom(inputStream)
-            .getVersionAccepted()) {
-          throw new IOException("Failed ProtocolVersion.");
-        }
-
-        ClientProtocol.Message.newBuilder()
-            .setRequest(ClientProtocol.Request.newBuilder()
-                .setGetServerRequest(LocatorAPI.GetServerRequest.newBuilder()))
-            .build().writeDelimitedTo(outputStream);
-
-        ClientProtocol.Response response =
-            ClientProtocol.Message.parseDelimitedFrom(inputStream).getResponse();
-        ClientProtocol.ErrorResponse errorResponse = response.getErrorResponse();
-
-        if (errorResponse != null && errorResponse.hasError()) {
-          throw new IOException(
-              "Error finding server: error code= " + errorResponse.getError().getErrorCode()
-                  + "; error message=" + errorResponse.getError().getMessage());
-        }
-
-        LocatorAPI.GetServerResponse getServerResponse = response.getGetServerResponse();
-
-        BasicTypes.Server server = getServerResponse.getServer();
-        return new InetSocketAddress(server.getHostname(), server.getPort());
+        this.channel.close();
-        lastException = e;
+        // ignore
-
-    if (lastException != null) {
-      throw lastException;
-    } else {
-      throw new IllegalStateException("No locators");
-    }
+
+  @Override
+  public boolean isConnected() {
+    return !this.channel.isClosed();
+  }
+

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS43 INS78 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 MOV42 UPD42 INS60 INS42 UPD42 INS41 INS42 INS54 INS42 MOV41 MOV83 UPD43 MOV43 INS59 INS14 INS8 INS12 INS8 INS38 INS22 UPD42 INS42 INS32 UPD42 UPD43 MOV43 INS42 INS60 MOV60 MOV25 INS44 INS8 INS54 INS32 INS52 INS42 UPD43 INS42 MOV32 MOV42 UPD42 MOV83 UPD43 MOV43 INS59 INS83 UPD43 INS32 INS8 MOV43 INS42 INS8 MOV12 INS22 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 UPD42 INS42 INS32 UPD40 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 INS52 INS42 INS42 INS42 MOV32 MOV42 UPD42 INS32 MOV32 UPD42 UPD42 UPD42 INS42 INS40 INS22 UPD42 MOV42 UPD42 INS45 INS52 INS42 UPD40 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL74 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL32 DEL32 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL42 DEL32 DEL21 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31