Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import java.util.ArrayList;
-import java.util.List;
-import java.util.ServiceLoader;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
+import com.gemstone.gemfire.InternalGemFireException;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorDiscovery;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorHelper;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorJoinMessage;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorMembershipListenerImpl;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorResponse;
-import com.gemstone.gemfire.cache.wan.GatewaySenderFactory;
+import com.gemstone.gemfire.distributed.internal.membership.MemberFactory;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMember;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.LocatorImpl;
+import com.gemstone.gemfire.distributed.internal.membership.gms.NetLocator;
+import com.gemstone.gemfire.distributed.internal.membership.gms.locator.PeerLocatorRequest;
-import com.gemstone.org.jgroups.Address;
-import com.gemstone.org.jgroups.JChannel;
-import com.gemstone.org.jgroups.stack.GossipData;
-import com.gemstone.org.jgroups.stack.GossipServer;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+  
+  /** system property name for forcing locators to be preferred as coordinators */
+  public static final String LOCATORS_PREFERRED_AS_COORDINATORS = "gemfire.disable-floating-coordinator";
-  /** the gossip server used for peer location */
-  private LocatorImpl locatorImpl;
+  /** the TcpHandler used for peer location */
+  private NetLocator locatorImpl;
-  private final AtomicBoolean shutdownHandled = new AtomicBoolean(false);
+  /** whether the locator was stopped during forced-disconnect processing */
+  private volatile boolean forcedDisconnect;
-  private final ExecutorService _executor;
+  private final AtomicBoolean shutdownHandled = new AtomicBoolean(false);
-  private Thread restartThread;
+  private volatile Thread restartThread;
-  {
-    final LoggingThreadGroup loggingThreadGroup = LoggingThreadGroup.createThreadGroup(
-      "WAN Locator Discovery Logger Group", logger);
-
-    final ThreadFactory threadFactory = new ThreadFactory() {
-      public Thread newThread(final Runnable task) {
-        final Thread thread = new Thread(loggingThreadGroup, task, "WAN Locator Discovery Thread");
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-
-    this._executor = Executors.newCachedThreadPool(threadFactory);
-  }
-
-      throws IOException
-    {
+      throws IOException {
-    }
+  }
+   * This is for internal use only as it does not create a distributed
+   * system unless told to do so.
+   * 
-   * @deprecated as of 7.0 use startLocator(int, File, File, InternalLogWriter, InternalLogWriter, InetAddress, java.util.Properties, boolean, boolean, String) instead.
-    if(startDistributedSystem) {
-      slocator.startDistributedSystem();
+    if (startDistributedSystem) {
+      try {
+        slocator.startDistributedSystem();
+      } catch (RuntimeException e) {
+        slocator.stop();
+        throw e;
+      }
-      slocator.startServerLocation(sys);
+      try {
+        slocator.startServerLocation(sys);
+      } catch (RuntimeException e) {
+        slocator.stop();
+        throw e;
+      }
-      this.stateFile = new File("locator" + port + "state.dat");
+      this.stateFile = new File("locator" + port + "view.dat");
-    GemFireTracer tracer = GemFireTracer.getLog(InternalLocator.class);
-    tracer.setLogWriter(logWriter);
-    tracer.setSecurityLogWriter(securityLogWriter);
-    tracer.setLogger(LogService.getLogger(GemFireTracer.class));
-    
-        locatorsAreCoordinators = Boolean.getBoolean("gemfire.disable-floating-coordinator");
+        locatorsAreCoordinators = Boolean.getBoolean(LOCATORS_PREFERRED_AS_COORDINATORS);
-    // LOG: moved these into InternalDistributedSystem.initialize -- the only other code path constructs InternalLocator 1st which also sets these
-    //com.gemstone.org.jgroups.util.GemFireTracer.setLogWriter(this.logWriter);
-    //com.gemstone.org.jgroups.util.GemFireTracer
-    //    .setSecurityLogWriter(this.securityLogWriter);
-    
-    // install gemfire serialization and socket functions into jgroups
-    JChannel.setDefaultGFFunctions(new GFJGBasicAdapter());
-    this.locatorImpl = new LocatorImpl(port, EXPIRY_MS,
-        this.bindAddress, this.stateFile, locatorsProp, locatorsAreCoordinators,
-        networkPartitionDetectionEnabled, withDS
-        );
-    this.handler.addHandler(GossipData.class, this.locatorImpl);
+    this.locatorImpl = MemberFactory.newLocatorHandler(this.bindAddress, this.stateFile,
+        locatorsProp, locatorsAreCoordinators, networkPartitionDetectionEnabled, stats);
+    this.handler.addHandler(PeerLocatorRequest.class, this.locatorImpl);
-   * @return the gossipServer
+   * @return the TcpHandler for peer to peer discovery
-  public LocatorImpl getLocatorHandler() {
+  public NetLocator getLocatorHandler() {
-      if (getLocatorHandler() != null) {
-        // let the GossipServer know the system's address so they can start
-        // servicing requests
-        Address addr = ((JGroupMember)existing.getDistributedMember().getNetMember()).getAddress();
-        getLocatorHandler().setLocalAddress(addr);
-      }
-      // don't set the ds variable, so it won't be closed by the locator shutting down
-     
-      if (System.getProperty("p2p.joinTimeout", "").length() == 0) {
-          System.setProperty("p2p.joinTimeout", "5000");
-        }
-
+        if (peerLocator) {
+          this.locatorImpl.setMembershipManager(myDs.getDM().getMembershipManager());
+        }
+        
-            stop(false, false);
+            stop(false, false, false);
-    stop(false, true);
+    stop(false, false, true);
-  public void stop(boolean stopForReconnect, boolean waitForDisconnect) {
+  public void stop(boolean forcedDisconnect, boolean stopForReconnect, boolean waitForDisconnect) {
+    this.forcedDisconnect = forcedDisconnect;
-        this.server.join(60 * 1000);
+        this.server.join(TcpServer.SHUTDOWN_WAIT_TIME * 1000 + 10000);
-    if (this.myCache != null && !this.stoppedForReconnect) {
+    if (this.myCache != null && !this.stoppedForReconnect && !this.forcedDisconnect) {
-
+    
-    if (myDs != null && !this.stoppedForReconnect) {
+    if (myDs != null && !this.forcedDisconnect) {
+        logger.info("waiting for distributed system to disconnect...");
+        while (this.myDs.isConnected()) {
+          Thread.sleep(5000);
+        }
+        logger.info("waiting for distributed system to reconnect...");
+        if (restarted) {
+          logger.info("system restarted");
+        } else {
+          logger.info("system was not restarted");
+        }
+        Thread rs = this.restartThread;
+        if (rs != null) {
+          logger.info("waiting for services to restart...");
+          rs.join();
+          this.restartThread = null;
+        }
-        boolean restarted;
+        boolean restarted = false;
+        } finally {
+          if (! restarted) {
+            stoppedForReconnect = false;
+          }
+    logger.info("restart thread exiting.  Service was "+(restarted? "" : "not ") + "restarted");
-      TcpHandler handler = (TcpHandler)handlerMapping.get(request.getClass());
+      TcpHandler handler = null;
+      if (request instanceof PeerLocatorRequest) {
+        handler = (TcpHandler)handlerMapping.get(PeerLocatorRequest.class);
+      }
+      else {
+        handler = (TcpHandler)handlerMapping.get(request.getClass());
+      }
+      
-      else {
+      else {  

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS23 MOV29 UPD83 MOV83 UPD83 MOV83 MOV83 INS43 INS59 INS29 INS83 INS43 MOV59 INS29 INS83 INS83 INS39 INS59 INS83 UPD43 INS44 UPD42 MOV42 INS42 INS45 INS65 UPD42 MOV42 INS65 UPD42 MOV42 INS65 UPD42 INS39 INS42 INS21 INS21 UPD66 INS66 INS66 MOV66 MOV66 UPD66 MOV66 INS66 UPD66 MOV25 INS7 INS27 INS8 INS32 INS25 INS32 INS9 INS22 INS42 MOV27 INS38 MOV21 MOV21 INS25 INS42 INS42 INS27 INS43 INS62 INS8 INS8 INS8 INS42 INS42 MOV22 MOV22 INS42 INS42 INS42 INS42 UPD43 INS42 INS52 INS42 INS22 MOV22 INS8 INS45 INS36 INS45 INS42 INS33 INS42 INS43 INS21 INS21 INS54 INS54 UPD42 INS52 INS42 UPD42 INS21 INS61 INS21 MOV21 MOV25 INS60 INS25 INS16 INS42 INS7 INS7 INS8 INS12 MOV8 INS12 INS32 INS32 INS8 INS32 INS42 INS8 MOV43 INS59 INS27 INS8 INS42 INS45 INS45 INS42 INS11 INS42 MOV11 MOV21 INS44 INS8 INS44 INS8 UPD45 INS22 UPD42 INS32 UPD27 INS42 INS42 INS45 INS22 INS42 INS21 INS42 INS42 INS45 INS21 INS21 INS42 INS22 INS42 INS33 INS21 INS21 INS21 MOV43 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS52 INS42 INS32 INS42 INS27 UPD34 INS52 INS42 INS32 INS32 INS32 INS52 INS42 INS32 INS32 INS7 INS8 INS42 INS42 INS57 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 UPD34 MOV34 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS22 INS33 INS9 INS25 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS38 INS8 INS42 INS9 INS42 INS21 INS7 INS42 INS9 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL23 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL83 DEL43 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL28 DEL65 DEL65 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL32 DEL21 DEL45 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL45 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL45 DEL45 DEL8