GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import java.util.Iterator;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.internal.cache.DistributedPutAllOperation;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.EventID;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.RemoteOperationException;
+import org.apache.geode.internal.cache.TXManagerImpl;
- * data.
+ * data. It is also used to implement non-transactional putAlls, see:
+ * DistributedPutAllOperation.initMessage
-  // private boolean useOriginRemote;
-
-  @Override
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-    Collection replicates = r.getCacheDistributionAdvisor().adviseInitializedReplicates();
+    Collection<InternalDistributedMember> replicates =
+        r.getCacheDistributionAdvisor().adviseInitializedReplicates();
-      ArrayList l = new ArrayList(replicates);
+      ArrayList<InternalDistributedMember> l = new ArrayList<>(replicates);
-    for (Iterator<InternalDistributedMember> it = replicates.iterator(); it.hasNext();) {
-      InternalDistributedMember replicate = it.next();
+    for (InternalDistributedMember replicate : replicates) {
-        PutAllResponse response = send(replicate, event, data, dataCount, false,
-            ClusterDistributionManager.SERIAL_EXECUTOR, posDup);
-        response.waitForCacheException();
+        PutAllResponse response = send(replicate, event, data, dataCount, false, posDup);
+        response.waitForRemoteResponse();
-        List successfulKeys = result.getKeys();
+        List<Object> successfulKeys = result.getKeys();
+        @SuppressWarnings("rawtypes")
-          logger.debug("RemotePutMessage caught CacheException during distribution", e);
+          logger.debug("RemotePutAllMessage caught CacheException during distribution", e);
-      } catch (RemoteOperationException e) {
+      } catch (RegionDestroyedException | RemoteOperationException e) {
-              "RemotePutMessage caught an unexpected exception during distribution", e);
+              "RemotePutAllMessage caught an exception during distribution; retrying to another member",
+              e);
-  RemotePutAllMessage(EntryEventImpl event, Set recipients, DirectReplyProcessor p,
-      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote, int processorType,
+  RemotePutAllMessage(EntryEventImpl event, DistributedMember recipient, DirectReplyProcessor p,
+      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote,
-    super(recipients, event.getRegion().getFullPath(), p);
-    this.resetRecipients();
-    if (recipients != null) {
-      setRecipients(recipients);
-    }
+    super((InternalDistributedMember) recipient, event.getRegion().getFullPath(), p);
-    // this.useOriginRemote = useOriginRemote;
-    // this.processorType = processorType;
-   * @throws ForceReattemptException if the peer is no longer available
+   * @throws RemoteOperationException if the peer is no longer available
-      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote, int processorType,
+      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote,
-    // Assert.assertTrue(recipient != null, "RemotePutAllMessage NULL recipient"); recipient can be
-    // null for event notifications
-    Set recipients = Collections.singleton(recipient);
-    PutAllResponse p = new PutAllResponse(event.getRegion().getSystem(), recipients);
-    RemotePutAllMessage msg =
-        new RemotePutAllMessage(event, recipients, p, putAllData, putAllDataCount, useOriginRemote,
-            processorType, possibleDuplicate, !event.isGenerateCallbacks());
-    msg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
-    Set failures = event.getRegion().getDistributionManager().putOutgoing(msg);
+    PutAllResponse p = new PutAllResponse(event.getRegion().getSystem(), recipient);
+    RemotePutAllMessage msg = new RemotePutAllMessage(event, recipient, p, putAllData,
+        putAllDataCount, useOriginRemote, possibleDuplicate, !event.isGenerateCallbacks());
+    Set<?> failures = event.getRegion().getDistributionManager().putOutgoing(msg);
-  /* we need a event with content for waitForNodeOrCreateBucket() */
-   * @param r partitioned region eventSender the endpoint server who received request from client
-   *        lastModified timestamp for last modification
+   * @param r region
+   * @param eventSender the endpoint server who received request from client
+   * @param lastModified timestamp for last modification
-    // create a base event and a DPAO for PutAllMessage distributed btw redundant buckets
-            // final boolean requiresRegionContext = dr.keyRequiresRegionContext();
-                  versions.addKeyAndVersion(putAllData[i].key, ev.getVersionTag());
+                  versions.addKeyAndVersion(putAllData[i].getKey(), ev.getVersionTag());
-
-  // override reply processor type from PartitionMessage
-  RemoteOperationResponse createReplyProcessor(LocalRegion r, Set recipients, Object key) {
-    return new PutAllResponse(r.getSystem(), recipients);
-  }
-
-  // override reply message type from PartitionMessage
-  @Override
-  protected void sendReply(InternalDistributedMember member, int procId, DistributionManager dm,
-      ReplyException ex, LocalRegion r, long startTime) {
-    ReplyMessage.send(member, procId, ex, getReplySender(dm), r != null && r.isInternalRegion());
-  }
-
-
-    /** Result of the PutAll operation */
-    // private PutAllResponseData[] responseData;
-    // private volatile PutAllResponseData[] returnValue;
-    public PutAllResponse(InternalDistributedSystem ds, Set recipients) {
-      super(ds, recipients, false);
+    public PutAllResponse(InternalDistributedSystem ds, DistributedMember recipient) {
+      super(ds, (InternalDistributedMember) recipient, false);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD66 INS66 INS70 UPD43 UPD42 INS65 INS65 INS65 INS74 INS44 INS42 MOV8 UPD42 INS11 INS74 MOV42 INS66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 UPD43 UPD42 MOV43 INS43 MOV43 INS42 INS43 INS42 MOV43 INS76 UPD42 INS11 INS42 INS74 INS42 UPD42 UPD42 MOV43 INS42 MOV43 MOV43 INS74 INS74 INS79 INS84 MOV43 UPD42 MOV43 MOV43 INS42 INS45 INS43 MOV43 INS42 UPD45 UPD45 INS32 MOV2 INS42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL39 DEL42 DEL44 DEL42 DEL52 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL65 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42