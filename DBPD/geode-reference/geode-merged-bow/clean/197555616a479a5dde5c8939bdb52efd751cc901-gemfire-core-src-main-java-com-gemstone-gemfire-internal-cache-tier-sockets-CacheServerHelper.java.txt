GEODE-965: redundant cache server created during auto-reconnect

If cluster configuration is enabled but a cache.xml is actually being
used to construct the cache then it is possible that after an auto-
reconnect a redundant CacheServer will be created.

There is an assumption made in writing the auto-reconnect code that if
cluster-configuration is enabled the cache will not be constructed
using a cache.xml file.

This change-set marks CacheServers that are created by gfsh or so
called "default" servers created by cache.xml processing so that
auto-reconnect will know whether they should be handled specially.

+import com.gemstone.gemfire.cache.server.CacheServer;
+import com.gemstone.gemfire.internal.cache.CacheServerImpl;
-public class CacheServerHelper
-  {
-  public static byte[] serialize(Object obj) throws IOException
-  {
+public class CacheServerHelper {
+  
+  public static void setIsDefaultServer(CacheServer server) {
+    if (server instanceof CacheServerImpl) {
+      ((CacheServerImpl)server).setIsDefaultServer();
+    }
+  }
+  
+  public static boolean isDefaultServer(CacheServer server) {
+    if ( !(server instanceof CacheServerImpl) ) {
+      return false;
+    }
+    return ((CacheServerImpl)server).isDefaultServer();
+  }
+  
+  public static byte[] serialize(Object obj) throws IOException {
-  public static byte[] serialize(Object obj, boolean zipObject) throws IOException
-  {
+  public static byte[] serialize(Object obj, boolean zipObject) throws IOException {
-  public static Object deserialize(byte[] blob) throws IOException, ClassNotFoundException
-  {
+  public static Object deserialize(byte[] blob) throws IOException, ClassNotFoundException {
-  public static Object deserialize(byte[] blob, boolean unzipObject) throws IOException, ClassNotFoundException
-  {
+  public static Object deserialize(byte[] blob, boolean unzipObject) throws IOException, ClassNotFoundException {
-  public static Object deserialize(byte[] blob, Version version, boolean unzipObject) throws IOException, ClassNotFoundException
-  {
+  public static Object deserialize(byte[] blob, Version version, boolean unzipObject) throws IOException, ClassNotFoundException {
-  public static byte[] zip(Object obj) throws IOException
-  {
+  public static byte[] zip(Object obj) throws IOException {
-  public static Object unzip(byte[] blob) throws IOException, ClassNotFoundException
-  {
+  public static Object unzip(byte[] blob) throws IOException, ClassNotFoundException {
-  public static byte[] toUTF(String s)
-  {
+  public static byte[] toUTF(String s) {
-  public static String fromUTF(byte[] bytearr)
-  {
+  public static String fromUTF(byte[] bytearr) {

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS25 INS43 INS42 INS25 INS41 INS42 INS62 INS8 INS42 INS38 INS8 INS32 INS42 INS43 INS21 INS36 INS41 INS36 INS42 INS42 INS32 INS62 INS9 INS11 INS36 INS42 INS42 INS43 INS43 INS42 INS11 INS42 INS42 INS43 INS42 INS42