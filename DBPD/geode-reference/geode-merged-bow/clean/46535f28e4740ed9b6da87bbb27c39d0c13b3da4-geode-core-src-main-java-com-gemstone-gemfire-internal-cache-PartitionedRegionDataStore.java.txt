GEODE-1072: Removing HDFS related code

Removing all HDFS and EvictionCriteria created code. This code will be
reinstated on a branch to be cleaned up and merged as a separate module.

-import com.gemstone.gemfire.cache.hdfs.HDFSIOException;
-			  clientEvent, returnTombstones, false, false);
+			  clientEvent, returnTombstones, false);
-   * @param preferCD 
+   * @param preferCD
-  public Object getLocally(int bucketId, final Object key,
-      final Object aCallbackArgument, boolean disableCopyOnRead, boolean preferCD, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, 
-      boolean returnTombstones, boolean opScopeIsLocal, boolean allowReadFromHDFS) throws PrimaryBucketException,
+  public Object getLocally(int bucketId,
+                           final Object key,
+                           final Object aCallbackArgument,
+                           boolean disableCopyOnRead,
+                           boolean preferCD,
+                           ClientProxyMembershipID requestingClient,
+                           EntryEventImpl clientEvent,
+                           boolean returnTombstones,
+                           boolean opScopeIsLocal) throws PrimaryBucketException,
-      logger.debug("getLocally:  key {}) bucketId={}{}{} region {} returnTombstones {} allowReadFromHDFS {}", key,
-          this.partitionedRegion.getPRId(), PartitionedRegion.BUCKET_ID_SEPARATOR, bucketId, bucketRegion.getName(), returnTombstones, allowReadFromHDFS);
+      logger.debug("getLocally:  key {}) bucketId={}{}{} region {} returnTombstones {} ", key,
+          this.partitionedRegion.getPRId(), PartitionedRegion.BUCKET_ID_SEPARATOR, bucketId, bucketRegion.getName(), returnTombstones);
-      ret = bucketRegion.get(key, aCallbackArgument, true, disableCopyOnRead , preferCD, requestingClient, clientEvent, returnTombstones, opScopeIsLocal, allowReadFromHDFS, false);
+      ret = bucketRegion.get(key, aCallbackArgument, true, disableCopyOnRead , preferCD, requestingClient, clientEvent, returnTombstones, opScopeIsLocal,
+        false);
-  public RawValue getSerializedLocally(KeyInfo keyInfo, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws PrimaryBucketException,
+  public RawValue getSerializedLocally(KeyInfo keyInfo,
+                                       boolean doNotLockEntry,
+                                       ClientProxyMembershipID requestingClient,
+                                       EntryEventImpl clientEvent,
+                                       boolean returnTombstones) throws PrimaryBucketException,
-      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, requestingClient, clientEvent, returnTombstones, allowReadFromHDFS);
+      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, requestingClient, clientEvent, returnTombstones);
-   * 
+   *
-      boolean access, boolean allowTombstones, boolean allowReadFromHDFS)
+                                       boolean access, boolean allowTombstones)
-      if (allowReadFromHDFS) {
-        ent = bucketRegion.entries.getEntry(key);
-      }
-      else {
-        ent = bucketRegion.entries.getOperationalEntryInVM(key);
-      }
+      ent = bucketRegion.entries.getEntry(key);
-        if (getPartitionedRegion().isHDFSReadWriteRegion()) {
-          // hdfs regions can't copy all keys into memory
-          ret = keys;
-
-        } else  { 
-		}

MOV8 MOV21 MOV27 UPD45 MOV60 MOV21 DEL40 DEL26 DEL9 DEL66 DEL39 DEL42 DEL44 DEL42 DEL42 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL44 DEL42 DEL8 DEL42 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8