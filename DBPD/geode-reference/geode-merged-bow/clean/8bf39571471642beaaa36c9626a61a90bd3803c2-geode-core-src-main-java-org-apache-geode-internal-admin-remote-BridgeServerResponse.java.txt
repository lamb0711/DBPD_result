Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message that is sent in response to a {@link
- * BridgeServerResponse}.  It perform an operation on a bridge server
- * and returns the result to the sender.
+ * A message that is sent in response to a {@link BridgeServerResponse}. It perform an operation on
+ * a bridge server and returns the result to the sender.
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-   * Creates a <code>BridgeServerResponse</code> in response to the
-   * given request.
+   * Creates a <code>BridgeServerResponse</code> in response to the given request.
-  static BridgeServerResponse create(DistributionManager dm,
-                                     BridgeServerRequest request) {
+  static BridgeServerResponse create(DistributionManager dm, BridgeServerRequest request) {
-      GemFireCacheImpl cache =
-        (GemFireCacheImpl) CacheFactory.getInstanceCloseOk(dm.getSystem());
+      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getInstanceCloseOk(dm.getSystem());
-        case BridgeServerRequest.ADD_OPERATION: {
-          CacheServerImpl bridge =
-            (CacheServerImpl) cache.addCacheServer();
-          m.bridgeInfo = new RemoteBridgeServer(bridge);
-          break;
-        }
-
-        case BridgeServerRequest.INFO_OPERATION: {
-          int id = request.getBridgeId();
-          // Note that since this is only an informational request
-          // it is not necessary to synchronize on allBridgeServersLock
-          for (Iterator iter = cache.getCacheServers().iterator();
-               iter.hasNext(); ) {
-            CacheServerImpl bridge = (CacheServerImpl) iter.next();
-            if (System.identityHashCode(bridge) == id) {
-              m.bridgeInfo = new RemoteBridgeServer(bridge);
-              break;
-
-            } else {
-              m.bridgeInfo = null;
-            }
+          case BridgeServerRequest.ADD_OPERATION: {
+            CacheServerImpl bridge = (CacheServerImpl) cache.addCacheServer();
+            m.bridgeInfo = new RemoteBridgeServer(bridge);
+            break;
-          break;
-        }
-        case BridgeServerRequest.START_OPERATION: {
-          RemoteBridgeServer config = request.getBridgeInfo();
-          for (Iterator iter = cache.getCacheServers().iterator();
-               iter.hasNext(); ) {
-            CacheServerImpl bridge = (CacheServerImpl) iter.next();
-            if (System.identityHashCode(bridge) == config.getId()) {
-              bridge.configureFrom(config);
-              bridge.start();
-              m.bridgeInfo = new RemoteBridgeServer(bridge);
-              break;
+          case BridgeServerRequest.INFO_OPERATION: {
+            int id = request.getBridgeId();
+            // Note that since this is only an informational request
+            // it is not necessary to synchronize on allBridgeServersLock
+            for (Iterator iter = cache.getCacheServers().iterator(); iter.hasNext();) {
+              CacheServerImpl bridge = (CacheServerImpl) iter.next();
+              if (System.identityHashCode(bridge) == id) {
+                m.bridgeInfo = new RemoteBridgeServer(bridge);
+                break;
-            } else {
-              m.bridgeInfo = null;
+              } else {
+                m.bridgeInfo = null;
+              }
+            break;
-          break;
-        }
-        case BridgeServerRequest.STOP_OPERATION: {
-          RemoteBridgeServer config = request.getBridgeInfo();
-          for (Iterator iter = cache.getCacheServers().iterator();
-               iter.hasNext(); ) {
-            CacheServerImpl bridge = (CacheServerImpl) iter.next();
-            if (System.identityHashCode(bridge) == config.getId()) {
-              bridge.stop();
-              m.bridgeInfo = new RemoteBridgeServer(bridge);
-              break;
+          case BridgeServerRequest.START_OPERATION: {
+            RemoteBridgeServer config = request.getBridgeInfo();
+            for (Iterator iter = cache.getCacheServers().iterator(); iter.hasNext();) {
+              CacheServerImpl bridge = (CacheServerImpl) iter.next();
+              if (System.identityHashCode(bridge) == config.getId()) {
+                bridge.configureFrom(config);
+                bridge.start();
+                m.bridgeInfo = new RemoteBridgeServer(bridge);
+                break;
-            } else {
-              m.bridgeInfo = null;
+              } else {
+                m.bridgeInfo = null;
+              }
+            break;
-          break;
-        }
-        default:
-          Assert.assertTrue(false, "Unknown bridge server operation: " +
-                            operation);
+          case BridgeServerRequest.STOP_OPERATION: {
+            RemoteBridgeServer config = request.getBridgeInfo();
+            for (Iterator iter = cache.getCacheServers().iterator(); iter.hasNext();) {
+              CacheServerImpl bridge = (CacheServerImpl) iter.next();
+              if (System.identityHashCode(bridge) == config.getId()) {
+                bridge.stop();
+                m.bridgeInfo = new RemoteBridgeServer(bridge);
+                break;
+
+              } else {
+                m.bridgeInfo = null;
+              }
+            }
+            break;
+          }
+
+          default:
+            Assert.assertTrue(false, "Unknown bridge server operation: " + operation);
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Returns an exception that was thrown while processing the
-   * request.
+   * Returns an exception that was thrown while processing the request.
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.bridgeInfo =
-      (RemoteBridgeServer) DataSerializer.readObject(in);
-    this.exception =
-      (Exception) DataSerializer.readObject(in);
+    this.bridgeInfo = (RemoteBridgeServer) DataSerializer.readObject(in);
+    this.exception = (Exception) DataSerializer.readObject(in);

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66