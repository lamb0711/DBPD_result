Merge branch 'release/1.8.0'

-import static org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.CREATE_MAPPING__PDX_CLASS_NAME;
+import static org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.CREATE_MAPPING__PDX_NAME;
-import static org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand.CREATE_MAPPING__VALUE_CONTAINS_PRIMARY_KEY;
-import org.apache.geode.cache.configuration.CacheConfig;
-import org.apache.geode.cache.configuration.CacheElement;
-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
-import org.apache.geode.distributed.ConfigurationPersistenceService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-  static final String FIELD_TO_COLUMN_TABLE = "fieldToColumnTable";
-    ConnectorService.RegionMapping mapping = null;
+    RegionMapping mapping = null;
-    // check if CC is available and use it to describe the connection
-    ConfigurationPersistenceService ccService = getConfigurationPersistenceService();
-    if (ccService != null) {
-      CacheConfig cacheConfig = ccService.getCacheConfig("cluster");
-      if (cacheConfig != null) {
-        ConnectorService service =
-            cacheConfig.findCustomCacheElement("connector-service", ConnectorService.class);
-        if (service != null) {
-          mapping = CacheElement.findElement(service.getRegionMapping(), regionName);
-        }
+    Set<DistributedMember> members = findMembers(null, null);
+    if (members.size() > 0) {
+      DistributedMember targetMember = members.iterator().next();
+      CliFunctionResult result = executeFunctionAndGetFunctionResult(
+          new DescribeMappingFunction(), regionName, targetMember);
+      if (result != null) {
+        mapping = (RegionMapping) result.getResultObject();
-      // otherwise get it from any member
-      Set<DistributedMember> members = findMembers(null, null);
-      if (members.size() > 0) {
-        DistributedMember targetMember = members.iterator().next();
-        CliFunctionResult result = executeFunctionAndGetFunctionResult(
-            new DescribeMappingFunction(), regionName, targetMember);
-        if (result != null) {
-          mapping = (ConnectorService.RegionMapping) result.getResultObject();
-        }
-      }
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-  private void fillResultData(ConnectorService.RegionMapping mapping, ResultModel resultModel) {
+  private void fillResultData(RegionMapping mapping, ResultModel resultModel) {
-    sectionModel.addData(CREATE_MAPPING__PDX_CLASS_NAME, mapping.getPdxClassName());
-    sectionModel.addData(CREATE_MAPPING__VALUE_CONTAINS_PRIMARY_KEY, mapping.isPrimaryKeyInValue());
-
-    TabularResultModel tabularResultData = resultModel.addTable(FIELD_TO_COLUMN_TABLE);
-    tabularResultData.setHeader("Field to Column Mappings:");
-    if (mapping.getFieldMapping() != null) {
-      mapping.getFieldMapping().forEach((entry) -> {
-        tabularResultData.accumulate("Field", entry.getFieldName());
-        tabularResultData.accumulate("Column", entry.getColumnName());
-      });
-    }
+    sectionModel.addData(CREATE_MAPPING__PDX_NAME, mapping.getPdxName());

UPD40 UPD40 MOV8 MOV60 MOV25 MOV60 MOV21 MOV21 MOV41 UPD43 UPD43 INS8 INS42 INS42 INS41 UPD42 INS32 UPD42 INS42 INS42 INS40 UPD43 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL40 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL86 DEL32 DEL21 DEL8 DEL25