Merge branch 'release/1.3.0'

-import org.apache.geode.cache.execute.*;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.FunctionContext;
+import org.apache.geode.cache.execute.FunctionException;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.RegionFunctionContext;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.cache.execute.ResultSender;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.cache.CachePerfStats;
+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.CachedDeserializableFactory;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.LocalDataSet;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.Token;
-import java.io.*;
+import java.io.File;
+import java.io.IOException;
+import java.io.InterruptedIOException;
+import java.io.Serializable;
+import org.apache.logging.log4j.LogManager;
+
-      return snapshot.listFiles(new FileFilter() {
-        @Override
-        public boolean accept(File pathname) {
-          return !pathname.isDirectory();
-        }
-      });
+      return snapshot.listFiles(pathname -> !pathname.isDirectory());
-    return new SnapshotOptionsImpl<K, V>();
+    return new SnapshotOptionsImpl<>();
-      snapshotInParallel(new ParallelArgs<K, V>(snapshot, format, options),
+      snapshotInParallel(new ParallelArgs<>(snapshot, format, options),
-      return;
-
-      snapshotInParallel(new ParallelArgs<K, V>(snapshot, format, options),
-          new ParallelImportFunction<K, V>());
-      return;
+      snapshotInParallel(new ParallelArgs<>(snapshot, format, options),
+          new ParallelImportFunction<>());
-    return ((SnapshotOptionsImpl<K, V>) options).isParallelMode()
-        && region.getAttributes().getDataPolicy().withPartitioning()
+    return options.isParallelMode() && region.getAttributes().getDataPolicy().withPartitioning()
+    if (snapshot.isDirectory()) {
+      File[] snapshots =
+          snapshot.listFiles((File f) -> f.getName().endsWith(SNAPSHOT_FILE_EXTENSION));
+      if (snapshots == null) {
+        throw new IOException("Unable to access " + snapshot.getCanonicalPath());
+      } else if (snapshots.length == 0) {
+        throw new IllegalArgumentException("Failure to import snapshot: "
+            + snapshot.getAbsolutePath() + " contains no valid .gfd snapshot files");
+      }
+      for (File snapshotFile : snapshots) {
+        importSnapshotFile(snapshotFile, options, local);
+      }
+    } else if (snapshot.getName().endsWith(SNAPSHOT_FILE_EXTENSION)) {
+      importSnapshotFile(snapshot, options, local);
+    } else {
+      throw new IllegalArgumentException("Failure to import snapshot: "
+          + snapshot.getCanonicalPath() + " is not .gfd file or directory containing .gfd files");
+    }
+  }
+  private void importSnapshotFile(File snapshot, SnapshotOptions<K, V> options, LocalRegion local)
+      throws IOException, ClassNotFoundException {
-    LinkedList<Future<?>> puts = new LinkedList<Future<?>>();
+    LinkedList<Future<?>> puts = new LinkedList<>();
-      Map<K, V> buffer = new HashMap<K, V>();
+      Map<K, V> buffer = new HashMap<>();
-            final Map<K, V> copy = new HashMap<K, V>(buffer);
+            final Map<K, V> copy = new HashMap<>(buffer);
-                .getDistributionManager().getWaitingThreadPool().submit(new Runnable() {
-                  @Override
-                  public void run() {
-                    local.basicImportPutAll(copy, !options.shouldInvokeCallbacks());
-                  }
-                });
+                .getDistributionManager().getWaitingThreadPool().submit((Runnable) () -> local
+                    .basicImportPutAll(copy, !options.shouldInvokeCallbacks()));
-            new Object[] {count, bytes, region.getName(), snapshot});
+            new Object[] {count, bytes, region.getName(), snapshot.getAbsolutePath()});
+    if (!snapshot.getName().endsWith(SNAPSHOT_FILE_EXTENSION)) {
+      throw new IllegalArgumentException("Failure to export snapshot: "
+          + snapshot.getCanonicalPath() + " is not a valid .gfd file");
+    }
+    File directory = snapshot.getAbsoluteFile().getParentFile();
+    if (directory == null) {
+      throw new IllegalArgumentException("Failure to export snapshot: "
+          + snapshot.getCanonicalPath() + " is not a valid location");
+    }
+    directory.mkdirs();
-        getLoggerI18n().info(LocalizedStrings.Snapshot_EXPORT_END_0_1_2_3,
-            new Object[] {count, sink.getBytesWritten(), region.getName(), snapshot});
+        getLoggerI18n().info(LocalizedStrings.Snapshot_EXPORT_END_0_1_2_3, new Object[] {count,
+            sink.getBytesWritten(), region.getName(), snapshot.getAbsolutePath()});
-      return new ClientExporter<K, V>(PoolManager.find(pool));
+      return new ClientExporter<>(PoolManager.find(pool));
-        || region instanceof LocalDataSet || (((SnapshotOptionsImpl<K, V>) options).isParallelMode()
+        || region instanceof LocalDataSet || (options.isParallelMode()
-      return new LocalExporter<K, V>();
+      return new LocalExporter<>();
-    return new WindowedExporter<K, V>();
+    return new WindowedExporter<>();
-
-            if (f.isDirectory() || !f.exists()) {
-              throw new IOException(
-                  LocalizedStrings.Snapshot_INVALID_IMPORT_FILE.toLocalizedString(f));
+            if (f.exists()) {
+              local.getSnapshotService().load(f, args.getFormat(), args.getOptions());
+            } else {
+              LogManager.getLogger(RegionSnapshotServiceImpl.class)
+                  .info("Nothing to import as location does not exist: " + f.getAbsolutePath());
-            local.getSnapshotService().load(f, args.getFormat(), args.getOptions());

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 MOV44 INS44 INS43 INS43 INS8 UPD42 INS44 INS43 INS42 INS74 INS42 INS42 INS42 MOV60 MOV25 INS25 INS43 INS42 INS25 INS60 INS25 INS21 INS42 INS43 INS43 INS43 INS32 INS8 INS25 INS42 MOV74 INS59 INS38 INS8 INS43 INS59 INS27 INS8 INS32 UPD74 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS70 INS32 INS8 INS8 INS42 INS14 INS32 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 UPD74 INS42 INS5 INS59 INS27 INS8 INS25 MOV44 INS42 INS8 INS32 INS42 INS42 INS21 INS53 INS74 INS59 INS32 INS42 INS42 INS14 INS32 INS42 INS14 MOV41 INS43 INS85 INS42 INS32 INS42 INS33 INS53 INS27 INS8 UPD42 INS21 INS42 INS42 INS32 INS14 MOV43 INS42 INS14 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 UPD74 INS32 UPD74 UPD74 UPD74 INS42 INS42 INS42 INS86 INS14 INS40 INS34 INS53 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS74 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 UPD74 INS42 INS42 INS86 INS44 INS32 MOV43 INS27 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 MOV43 INS42 INS42 INS42 INS42 INS42 INS8 INS59 MOV38 INS43 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS32 MOV32 MOV8 INS8 INS42 INS42 MOV59 INS42 INS42 INS42 INS42 INS21 UPD42 INS32 UPD74 INS42 INS11 INS32 INS42 INS27 MOV43 INS86 INS42 INS42 INS57 INS45 INS32 MOV32 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL11 DEL36 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL14 DEL59 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL42 DEL78 DEL83 DEL39 DEL42 DEL21 DEL8 DEL31 DEL1 DEL14 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL27 DEL40 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25