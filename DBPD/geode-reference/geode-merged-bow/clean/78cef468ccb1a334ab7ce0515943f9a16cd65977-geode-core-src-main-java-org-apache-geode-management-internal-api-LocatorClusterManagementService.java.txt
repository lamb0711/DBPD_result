GEODE-7136: remove "groups" in management configuration (#3997)


+import static org.apache.geode.management.configuration.AbstractConfiguration.CLUSTER;
+import static org.apache.geode.management.configuration.AbstractConfiguration.isCluster;
+
-import org.apache.geode.management.internal.configuration.validators.CacheElementValidator;
+import org.apache.geode.management.internal.configuration.validators.CommonConfigurationValidator;
-  private final CacheElementValidator commonValidator;
+  private final CommonConfigurationValidator commonValidator;
-        new MemberValidator(cache, persistenceService), new CacheElementValidator(),
+        new MemberValidator(cache, persistenceService), new CommonConfigurationValidator(),
-      CacheElementValidator commonValidator,
+      CommonConfigurationValidator commonValidator,
-    String group = config.getConfigGroup();
+    String group = config.getGroup();
+    final String groupName =
+        isCluster(group) ? CLUSTER : group;
-    final String finalGroup = group; // the below lambda requires a reference that is final
-    persistenceService.updateCacheConfig(finalGroup, cacheConfigForGroup -> {
+    persistenceService.updateCacheConfig(groupName, cacheConfigForGroup -> {
-            "Successfully updated configuration for " + finalGroup + ".");
+            "Successfully updated configuration for " + groupName + ".");
-        String message = "Failed to update cluster configuration for " + finalGroup + ".";
+        String message = "Failed to update cluster configuration for " + groupName + ".";
-    // add the config object which includes the HATOS information of the element created
+    // add the config object which includes the HATEOAS information of the element created
-      // gather elements on all the groups, consolidate the group information and then do the filter
-      // so that when we filter by a specific group, we still show that a particular element might
-      // also belong to another group.
-      for (String group : persistenceService.getGroups()) {
-        CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
-        List<T> listInGroup = manager.list(filter, currentPersistedConfig);
-        for (T element : listInGroup) {
-          element.setGroup(group);
-          resultList.add(element);
-        }
-      }
-
-      // if empty result, return immediately
-      if (resultList.size() == 0) {
-        return result;
-      }
-
-      // right now the list contains [{regionA, group1}, {regionA, group2}...], we need to
-      // consolidate the list into [{regionA, [group1, group2]}
-      List<T> consolidatedResultList = new ArrayList<>();
-      for (T element : resultList) {
-        int index = consolidatedResultList.indexOf(element);
-        if (index >= 0) {
-          T exist = consolidatedResultList.get(index);
-          exist.addGroup(element.getGroup());
-        } else {
-          consolidatedResultList.add(element);
-        }
-      }
+      Set<String> groups;
-        consolidatedResultList = consolidatedResultList.stream()
-            .filter(e -> (e.getGroups().contains(filter.getConfigGroup())))
-            .collect(Collectors.toList());
+        groups = Collections.singleton(filter.getGroup());
+      } else {
+        groups = persistenceService.getGroups();
-      resultList = consolidatedResultList;
+
+      for (String group : groups) {
+        CacheConfig currentPersistedConfig =
+            persistenceService.getCacheConfig(isCluster(group) ? CLUSTER : group, true);
+        List<T> listInGroup = manager.list(filter, currentPersistedConfig);
+        if (!isCluster(group)) {
+          listInGroup.forEach(t -> t.setGroup(group));
+        }
+        resultList.addAll(listInGroup);
+      }
-      List<String> groups = element.getGroups();
-      // if "cluster" is the only group, clear it, so that the returning json does not show
-      // "cluster" as a group value
-      if (element.getGroups().size() == 1
-          && AbstractConfiguration.CLUSTER.equals(element.getGroup())) {
-        element.getGroups().clear();
-      }
-
-            memberValidator.findMembers(filter.getId(), filter.getGroups().toArray(new String[0]));
+            memberValidator.findMembers(filter.getId(), filter.getGroup());
-        members = memberValidator.findServers(groups.toArray(new String[0]));
+        members = memberValidator.findServers(element.getGroup());

INS26 INS26 INS40 INS40 UPD40 UPD43 MOV60 UPD42 UPD43 UPD42 UPD43 INS42 INS16 UPD42 MOV60 INS25 INS70 UPD42 UPD42 INS32 INS42 INS42 UPD74 MOV32 INS8 MOV8 MOV44 INS42 INS8 INS42 INS42 UPD43 INS21 INS21 INS60 MOV60 INS25 MOV21 UPD42 INS7 INS7 MOV43 INS59 INS38 MOV8 INS32 INS42 INS32 INS42 MOV32 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS16 INS9 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV86 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL32 DEL42 DEL42 DEL32 DEL32 DEL36 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL32 DEL34 DEL27 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL32