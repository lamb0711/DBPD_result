Merge branch 'release/1.0.0-incubating.M3'

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
-import java.util.Collections;
-import java.util.HashSet;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import com.gemstone.gemfire.internal.process.NonBlockingProcessStreamReader;
-
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
- * @since 7.0
+ * @since GemFire 7.0
-  private static final String SERVER_TERM_NAME  = "Server";
-  
-  private static final long PROCESS_STREAM_READER_JOIN_TIMEOUT_MILLIS = 30*1000;
-  private static final long PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS = 5*1000;
-  private static final long WAITING_FOR_STOP_TO_MAKE_PID_GO_AWAY_TIMEOUT_MILLIS = 30*1000;
-  private static final long WAITING_FOR_PID_FILE_TO_CONTAIN_PID_TIMEOUT_MILLIS = 2*1000;
-  
+  private static final String SERVER_TERM_NAME = "Server";
+
+  private static final long PROCESS_STREAM_READER_JOIN_TIMEOUT_MILLIS = 30 * 1000;
+  private static final long PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS = 5 * 1000;
+  private static final long WAITING_FOR_STOP_TO_MAKE_PID_GO_AWAY_TIMEOUT_MILLIS = 30 * 1000;
+  private static final long WAITING_FOR_PID_FILE_TO_CONTAIN_PID_TIMEOUT_MILLIS = 2 * 1000;
+
-    IOUtils.appendToPath(GEMFIRE_HOME, "lib", "geode-dependencies.jar");
+      IOUtils.appendToPath(GEMFIRE_HOME, "lib", "geode-dependencies.jar");
-      }
-      catch (AttachAPINotFoundException ignore) {
+      } catch (AttachAPINotFoundException ignore) {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_LOCATOR, CliStrings.TOPIC_GEMFIRE_LIFECYCLE })
-  public Result startLocator(@CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME,
-                                        mandatory = true,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__MEMBER_NAME__HELP)
-                             final String memberName,
-                             @CliOption(key = CliStrings.START_LOCATOR__BIND_ADDRESS,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__BIND_ADDRESS__HELP)
-                             final String bindAddress,
-                             @CliOption(key = CliStrings.START_LOCATOR__CLASSPATH,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__CLASSPATH__HELP)
-                             final String classpath,
-                             @CliOption(key = CliStrings.START_LOCATOR__FORCE,
-                                        unspecifiedDefaultValue = "false",
-                                        specifiedDefaultValue = "true",
-                                        help = CliStrings.START_LOCATOR__FORCE__HELP)
-                             final Boolean force,
-                             @CliOption(key = CliStrings.START_LOCATOR__GROUP,
-                                        optionContext = ConverterHint.MEMBERGROUP,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__GROUP__HELP)
-                             final String group,
-                             @CliOption(key = CliStrings.START_LOCATOR__HOSTNAME_FOR_CLIENTS,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__HOSTNAME_FOR_CLIENTS__HELP)
-                             final String hostnameForClients,
-                             @CliOption(key = CliStrings.START_LOCATOR__INCLUDE_SYSTEM_CLASSPATH,
-                                        specifiedDefaultValue = "true",
-                                        unspecifiedDefaultValue = "false",
-                                        help = CliStrings.START_LOCATOR__INCLUDE_SYSTEM_CLASSPATH__HELP)
-                             final Boolean includeSystemClasspath,
-                             @CliOption(key = CliStrings.START_LOCATOR__LOCATORS,
-                                        optionContext = ConverterHint.LOCATOR_DISCOVERY_CONFIG,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__LOCATORS__HELP)
-                             final String locators,
-                             @CliOption(key = CliStrings.START_LOCATOR__LOG_LEVEL,
-                                        optionContext = ConverterHint.LOG_LEVEL,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__LOG_LEVEL__HELP)
-                             final String logLevel,
-                             @CliOption(key = CliStrings.START_LOCATOR__MCAST_ADDRESS,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__MCAST_ADDRESS__HELP)
-                             final String mcastBindAddress,
-                             @CliOption(key = CliStrings.START_LOCATOR__MCAST_PORT,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__MCAST_PORT__HELP)
-                             final Integer mcastPort,
-                             @CliOption(key = CliStrings.START_LOCATOR__PORT,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__PORT__HELP)
-                             final Integer port,
-                             @CliOption(key = CliStrings.START_LOCATOR__DIR,
-                                        optionContext = ConverterHint.DIR_PATHSTRING,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__DIR__HELP)
-                             String workingDirectory,
-                             @CliOption(key = CliStrings.START_LOCATOR__PROPERTIES,
-                                        optionContext = ConverterHint.FILE_PATHSTRING,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__PROPERTIES__HELP)
-                             String gemfirePropertiesPathname,
-                             @CliOption(key = CliStrings.START_LOCATOR__SECURITY_PROPERTIES,
-                                        optionContext = ConverterHint.FILE_PATHSTRING,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__SECURITY_PROPERTIES__HELP)
-                             String gemfireSecurityPropertiesPathname,
-                             @CliOption(key = CliStrings.START_LOCATOR__INITIALHEAP,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__INITIALHEAP__HELP)
-                             final String initialHeap,
-                             @CliOption(key = CliStrings.START_LOCATOR__MAXHEAP,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__MAXHEAP__HELP)
-                             final String maxHeap,
-                             @CliOption(key = CliStrings.START_LOCATOR__J,
-                                        optionContext = ConverterHint.STRING_LIST,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.START_LOCATOR__J__HELP)
-                             @CliMetaData(valueSeparator = ",")
-                             final String[] jvmArgsOpts,
-                             @CliOption (key = CliStrings.START_LOCATOR__CONNECT,
-                                        unspecifiedDefaultValue = "true",
-                                        specifiedDefaultValue = "true",
-                                        help = CliStrings.START_LOCATOR__CONNECT__HELP)
-                             final boolean connect,
-                             @CliOption(key = CliStrings.START_LOCATOR__ENABLE__SHARED__CONFIGURATION,
-                                        unspecifiedDefaultValue = "true",
-                                        specifiedDefaultValue = "true",
-                                        help = CliStrings.START_LOCATOR__ENABLE__SHARED__CONFIGURATION__HELP)
-                             final boolean enableSharedConfiguration,
-                             @CliOption(key = CliStrings.START_LOCATOR__LOAD__SHARED_CONFIGURATION__FROM__FILESYSTEM,
-                                        unspecifiedDefaultValue = "false",
-                                        help = CliStrings.START_LOCATOR__LOAD__SHARED_CONFIGURATION__FROM__FILESYSTEM__HELP)
-                             final boolean loadSharedConfigurationFromDirectory,
-                             @CliOption(key = CliStrings.START_LOCATOR__CLUSTER__CONFIG__DIR,
-                                        unspecifiedDefaultValue = "",
-                                        help = CliStrings.START_LOCATOR__CLUSTER__CONFIG__DIR__HELP)
-                             final String clusterConfigDir
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_LOCATOR, CliStrings.TOPIC_GEODE_LIFECYCLE })
+  public Result startLocator(
+      @CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME,
+          mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__MEMBER_NAME__HELP)
+      final String memberName,
+      @CliOption(key = CliStrings.START_LOCATOR__BIND_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__BIND_ADDRESS__HELP)
+      final String bindAddress,
+      @CliOption(key = CliStrings.START_LOCATOR__CLASSPATH,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__CLASSPATH__HELP)
+      final String classpath,
+      @CliOption(key = CliStrings.START_LOCATOR__FORCE,
+          unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_LOCATOR__FORCE__HELP)
+      final Boolean force,
+      @CliOption(key = CliStrings.START_LOCATOR__GROUP,
+          optionContext = ConverterHint.MEMBERGROUP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__GROUP__HELP)
+      final String group,
+      @CliOption(key = CliStrings.START_LOCATOR__HOSTNAME_FOR_CLIENTS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__HOSTNAME_FOR_CLIENTS__HELP)
+      final String hostnameForClients,
+      @CliOption(key = CliStrings.START_LOCATOR__INCLUDE_SYSTEM_CLASSPATH,
+          specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.START_LOCATOR__INCLUDE_SYSTEM_CLASSPATH__HELP)
+      final Boolean includeSystemClasspath,
+      @CliOption(key = CliStrings.START_LOCATOR__LOCATORS,
+          optionContext = ConverterHint.LOCATOR_DISCOVERY_CONFIG,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__LOCATORS__HELP)
+      final String locators,
+      @CliOption(key = CliStrings.START_LOCATOR__LOG_LEVEL,
+          optionContext = ConverterHint.LOG_LEVEL,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__LOG_LEVEL__HELP)
+      final String logLevel,
+      @CliOption(key = CliStrings.START_LOCATOR__MCAST_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__MCAST_ADDRESS__HELP)
+      final String mcastBindAddress,
+      @CliOption(key = CliStrings.START_LOCATOR__MCAST_PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__MCAST_PORT__HELP)
+      final Integer mcastPort,
+      @CliOption(key = CliStrings.START_LOCATOR__PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__PORT__HELP)
+      final Integer port,
+      @CliOption(key = CliStrings.START_LOCATOR__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__DIR__HELP)
+          String workingDirectory,
+      @CliOption(key = CliStrings.START_LOCATOR__PROPERTIES,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__PROPERTIES__HELP)
+          String gemfirePropertiesPathname,
+      @CliOption(key = CliStrings.START_LOCATOR__SECURITY_PROPERTIES,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__SECURITY_PROPERTIES__HELP)
+          String gemfireSecurityPropertiesPathname,
+      @CliOption(key = CliStrings.START_LOCATOR__INITIALHEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__INITIALHEAP__HELP)
+      final String initialHeap,
+      @CliOption(key = CliStrings.START_LOCATOR__MAXHEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__MAXHEAP__HELP)
+      final String maxHeap,
+      @CliOption(key = CliStrings.START_LOCATOR__J,
+          optionContext = ConverterHint.STRING_LIST,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_LOCATOR__J__HELP)
+      @CliMetaData(valueSeparator = ",")
+      final String[] jvmArgsOpts,
+      @CliOption(key = CliStrings.START_LOCATOR__CONNECT,
+          unspecifiedDefaultValue = "true",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_LOCATOR__CONNECT__HELP)
+      final boolean connect,
+      @CliOption(key = CliStrings.START_LOCATOR__ENABLE__SHARED__CONFIGURATION,
+          unspecifiedDefaultValue = "true",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_LOCATOR__ENABLE__SHARED__CONFIGURATION__HELP)
+      final boolean enableSharedConfiguration,
+      @CliOption(key = CliStrings.START_LOCATOR__LOAD__SHARED_CONFIGURATION__FROM__FILESYSTEM,
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.START_LOCATOR__LOAD__SHARED_CONFIGURATION__FROM__FILESYSTEM__HELP)
+      final boolean loadSharedConfigurationFromDirectory,
+      @CliOption(key = CliStrings.START_LOCATOR__CLUSTER__CONFIG__DIR,
+          unspecifiedDefaultValue = "",
+          help = CliStrings.START_LOCATOR__CLUSTER__CONFIG__DIR__HELP)
+      final String clusterConfigDir
-            locatorWorkingDirectory.getAbsolutePath()));
+              locatorWorkingDirectory.getAbsolutePath()));
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEMFIRE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-          StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
+        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+            StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEMFIRE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-          "Security ", gemfireSecurityPropertiesPathname));
+        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+            "Security ", gemfireSecurityPropertiesPathname));
-      gemfireProperties.setProperty(DistributionConfig.GROUPS_NAME, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOCATORS_NAME, StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOG_LEVEL_NAME, StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MCAST_ADDRESS_NAME, StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MCAST_PORT_NAME, StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.ENABLE_CLUSTER_CONFIGURATION_NAME, StringUtils.valueOf(enableSharedConfiguration, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOAD_CLUSTER_CONFIG_FROM_DIR_NAME, StringUtils.valueOf(loadSharedConfigurationFromDirectory, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.CLUSTER_CONFIGURATION_DIR, StringUtils.valueOf(clusterConfigDir, StringUtils.EMPTY_STRING));
-      
+      gemfireProperties.setProperty(GROUPS, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOCATORS, StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOG_LEVEL, StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MCAST_ADDRESS, StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MCAST_PORT, StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(ENABLE_CLUSTER_CONFIGURATION, StringUtils.valueOf(enableSharedConfiguration, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOAD_CLUSTER_CONFIGURATION_FROM_DIR,
+          StringUtils.valueOf(loadSharedConfigurationFromDirectory, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(CLUSTER_CONFIGURATION_DIR, StringUtils.valueOf(clusterConfigDir, StringUtils.EMPTY_STRING));
+
-        .setBindAddress(bindAddress)
-        .setForce(force)
-        .setHostnameForClients(hostnameForClients)
-        .setMemberName(memberName)
-        .setPort(port)
-        .setRedirectOutput(redirectOutput)
-        .setWorkingDirectory(workingDirectory)
-        .build();
+          .setBindAddress(bindAddress)
+          .setForce(force)
+          .setHostnameForClients(hostnameForClients)
+          .setMemberName(memberName)
+          .setPort(port)
+          .setRedirectOutput(redirectOutput)
+          .setWorkingDirectory(workingDirectory)
+          .build();
-        .directory(new File(locatorLauncher.getWorkingDirectory()))
-        .start();
+          .directory(new File(locatorLauncher.getWorkingDirectory()))
+          .start();
-          .continueReadingMillis(2*1000)
+          .continueReadingMillis(2 * 1000)
-          IOUtils.tryGetCanonicalPathElseGetAbsolutePath(new File(locatorLauncher.getWorkingDirectory()))), null);
+            IOUtils.tryGetCanonicalPathElseGetAbsolutePath(new File(locatorLauncher.getWorkingDirectory()))), null);
-              CliStrings.START_LOCATOR__PROCESS_TERMINATED_ABNORMALLY_ERROR_MESSAGE,
+                CliStrings.START_LOCATOR__PROCESS_TERMINATED_ABNORMALLY_ERROR_MESSAGE,
-          }
-          catch (IllegalThreadStateException ignore) {
+          } catch (IllegalThreadStateException ignore) {
-              && !(StringUtils.isBlank(currentLocatorStatusMessage)
-                || currentLocatorStatusMessage.equalsIgnoreCase(previousLocatorStatusMessage)))
-            {
+                && !(StringUtils.isBlank(currentLocatorStatusMessage)
+                || currentLocatorStatusMessage.equalsIgnoreCase(previousLocatorStatusMessage))) {
-          && isStartingOrNotResponding(locatorState.getStatus()));
-      }
-      finally {
+            && isStartingOrNotResponding(locatorState.getStatus()));
+      } finally {
-        && isStartingNotRespondingOrNull(locatorState));
+          && isStartingNotRespondingOrNull(locatorState));
-      }
-      else {
+      } else {
-        String locatorHostName = StringUtils.defaultIfBlank(locatorLauncher.getHostnameForClients(), getLocalHost());
-        int locatorPort = locatorLauncher.getPort();
+        String locatorHostName;
+        InetAddress bindAddr = locatorLauncher.getBindAddress();
+        if (bindAddr != null){
+          locatorHostName = bindAddr.getCanonicalHostName();
+        } else {
+          locatorHostName = StringUtils.defaultIfBlank(locatorLauncher.getHostnameForClients(), getLocalHost());
+        }
+
+        int locatorPort = Integer.parseInt(locatorState.getPort());
-            infoResultData);
+              infoResultData);
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        StringUtils.defaultIfBlank(workingDirectory, memberName), getLocatorId(bindAddress, port),
-        toString(t, getGfsh().getDebug()));
+          StringUtils.defaultIfBlank(workingDirectory, memberName), getLocatorId(bindAddress, port),
+          toString(t, getGfsh().getDebug()));
-    }
-    finally {
+    } finally {
-                                                   final String gemfirePropertiesPathname,
-                                                   final String gemfireSecurityPropertiesPathname,
-                                                   final Properties gemfireProperties,
-                                                   final String userClasspath,
-                                                   final Boolean includeSystemClasspath,
-                                                   final String[] jvmArgsOpts,
-                                                   final String initialHeap,
-                                                   final String maxHeap)
-    throws MalformedObjectNameException
-  {
+      final String gemfirePropertiesPathname,
+      final String gemfireSecurityPropertiesPathname,
+      final Properties gemfireProperties,
+      final String userClasspath,
+      final Boolean includeSystemClasspath,
+      final String[] jvmArgsOpts,
+      final String initialHeap,
+      final String maxHeap)
+      throws MalformedObjectNameException {
-    commandLine.add("-Dsun.rmi.dgc.server.gcInterval".concat("=").concat(Long.toString(Long.MAX_VALUE-1)));
+    commandLine.add("-Dsun.rmi.dgc.server.gcInterval".concat("=").concat(Long.toString(Long.MAX_VALUE - 1)));
-                                final int locatorPort,
-                                final String gemfirePropertiesPathname,
-                                final String gemfireSecurityPropertiesPathname,
-                                final InfoResultData infoResultData)
-  {
+      final int locatorPort,
+      final String gemfirePropertiesPathname,
+      final String gemfireSecurityPropertiesPathname,
+      final InfoResultData infoResultData) {
-      loadConfigurationProperties(gemfirePropertiesPathname));
+        loadConfigurationProperties(gemfirePropertiesPathname));
-          ShellCommands.getConnectLocatorTimeoutInMS() / 4, locatorConfigurationProperties);
+            ShellCommands.getConnectLocatorTimeoutInMS() / 4, locatorConfigurationProperties);
-          null, null, configurationProperties));
+            null, null, configurationProperties, null));
-        String shellAndLogMessage = CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, memberEndpoint.toString(false));
+        String shellAndLogMessage = CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS, "JMX Manager " + memberEndpoint.toString(false));
-      }
-      catch (IllegalStateException unexpected) {
+      } catch (IllegalStateException unexpected) {
-      }
-      catch (SecurityException ignore) {
+      } catch (SecurityException ignore) {
+      catch (AuthenticationFailedException ignore) {
+        getGfsh().logToFile(ignore.getMessage(), ignore);
+        jmxManagerAuthEnabled = true;
+        break; // no need to continue after AuthenticationFailedException
+      }
-        }
-        else {
+        } else {
-      }
-      catch (Exception ignore) {
+      } catch (Exception ignore) {
-                                     final int locatorPort,
-                                     final boolean jmxManagerAuthEnabled,
-                                     final boolean jmxManagerSslEnabled,
-                                     final InfoResultData infoResultData)
-  {
+      final int locatorPort,
+      final boolean jmxManagerAuthEnabled,
+      final boolean jmxManagerSslEnabled,
+      final InfoResultData infoResultData) {
+
-      new CommandStringBuilder(CliStrings.CONNECT).addOption(CliStrings.CONNECT__LOCATOR,
-        locatorHostName + "[" + locatorPort + "]").toString()));
+        new CommandStringBuilder(CliStrings.CONNECT).addOption(CliStrings.CONNECT__LOCATOR,
+            locatorHostName + "[" + locatorPort + "]").toString()));
-                                                          Map<String, String> configurationProperties)
-  {
+      Map<String, String> configurationProperties) {
-      : new HashMap<String, String>());
+        : new HashMap<String, String>());
-          new File(configurationPropertiesPathname).toURI().toURL()));
-      }
-      catch (MalformedURLException ignore) {
+            new File(configurationPropertiesPathname).toURI().toURL()));
+      } catch (MalformedURLException ignore) {
-          "Failed to load GemFire configuration properties from pathname (%1$s)!",
+            "Failed to load GemFire configuration properties from pathname (%1$s)!",
-  private String getSharedConfigurationStatusFromLocator(String locatorHostName, int locatorPort) throws ClassNotFoundException, IOException  {
+  private String getSharedConfigurationStatusFromLocator(String locatorHostName, int locatorPort) throws ClassNotFoundException, IOException {
-    
+
-        TcpClient.requestToServer(networkAddress, locatorPort, new SharedConfigurationStatusRequest(), 10000, true);
-      
-      for (int i=0; i<NUM_ATTEMPTS_FOR_SHARED_CONFIGURATION_STATUS; i++) {
+          TcpClient.requestToServer(networkAddress, locatorPort, new SharedConfigurationStatusRequest(), 10000, true);
+
+      for (int i = 0; i < NUM_ATTEMPTS_FOR_SHARED_CONFIGURATION_STATUS; i++) {
-          statusResponse = (SharedConfigurationStatusResponse) TcpClient.requestToServer(networkAddress, locatorPort, new SharedConfigurationStatusRequest(), 10000, true);
+          statusResponse = (SharedConfigurationStatusResponse) TcpClient
+              .requestToServer(networkAddress, locatorPort, new SharedConfigurationStatusRequest(), 10000, true);
-      
-      switch (statusResponse.getStatus()) {
-        case RUNNING:
-          buffer.append("\nCluster configuration service is up and running.");
-          break;
-        case STOPPED:
-          buffer.append("\nCluster configuration service failed to start , please check the log file for errors.");
-          break;
-        case WAITING:
-          buffer.append("\nCluster configuration service is waiting for other locators with newer shared configuration data.");
-          Set<PersistentMemberPattern> pmpSet = statusResponse.getOtherLocatorInformation();
-          if (!pmpSet.isEmpty()) {
-            buffer.append("\nThis locator might have stale cluster configuration data.");
-            buffer.append("\nFollowing locators contain potentially newer cluster configuration data");
-            for (PersistentMemberPattern pmp : pmpSet) {
-              buffer.append("\nHost : ").append(pmp.getHost());
-              buffer.append("\nDirectory : ").append(pmp.getDirectory());
-            }
+      switch (statusResponse.getStatus()) {
+      case RUNNING:
+        buffer.append("\nCluster configuration service is up and running.");
+        break;
+      case STOPPED:
+        buffer.append("\nCluster configuration service failed to start , please check the log file for errors.");
+        break;
+      case WAITING:
+        buffer.append("\nCluster configuration service is waiting for other locators with newer shared configuration data.");
+        Set<PersistentMemberPattern> pmpSet = statusResponse.getOtherLocatorInformation();
+        if (!pmpSet.isEmpty()) {
+          buffer.append("\nThis locator might have stale cluster configuration data.");
+          buffer.append("\nFollowing locators contain potentially newer cluster configuration data");
+
+          for (PersistentMemberPattern pmp : pmpSet) {
+            buffer.append("\nHost : ").append(pmp.getHost());
+            buffer.append("\nDirectory : ").append(pmp.getDirectory());
-          else {
-            buffer.append("\nPlease check the log file for errors");
-          }
-          break;
-        case UNDETERMINED:
-          buffer.append("\nUnable to determine the status of shared configuration service, please check the log file");
-          break;
-        case NOT_STARTED:
-          buffer.append("\nCluster configuration service has not been started yet");
-          break;
-        case STARTED:
-          buffer.append("\nCluster configuration service has been started, but its not running yet");
-          break;
+        } else {
+          buffer.append("\nPlease check the log file for errors");
+        }
+        break;
+      case UNDETERMINED:
+        buffer.append("\nUnable to determine the status of shared configuration service, please check the log file");
+        break;
+      case NOT_STARTED:
+        buffer.append("\nCluster configuration service has not been started yet");
+        break;
+      case STARTED:
+        buffer.append("\nCluster configuration service has been started, but its not running yet");
+        break;
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-        locatorHostName, locatorPort), e);
+          locatorHostName, locatorPort), e);
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_LOCATOR, CliStrings.TOPIC_GEMFIRE_LIFECYCLE })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_LOCATOR, CliStrings.TOPIC_GEODE_LIFECYCLE })
-                                         optionContext = ConverterHint.LOCATOR_MEMBER_IDNAME,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.STATUS_LOCATOR__MEMBER__HELP)
-                              final String member,
-                              @CliOption(key = CliStrings.STATUS_LOCATOR__HOST,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.STATUS_LOCATOR__HOST__HELP)
-                              final String locatorHost,
-                              @CliOption(key = CliStrings.STATUS_LOCATOR__PORT,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.STATUS_LOCATOR__PORT__HELP)
-                              final Integer locatorPort,
-                              @CliOption(key = CliStrings.STATUS_LOCATOR__PID,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.STATUS_LOCATOR__PID__HELP)
-                              final Integer pid,
-                              @CliOption(key = CliStrings.STATUS_LOCATOR__DIR,
-                                         optionContext = ConverterHint.DIR_PATHSTRING,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.STATUS_LOCATOR__DIR__HELP)
-                              final String workingDirectory)
-  {
+      optionContext = ConverterHint.LOCATOR_MEMBER_IDNAME,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.STATUS_LOCATOR__MEMBER__HELP)
+  final String member,
+      @CliOption(key = CliStrings.STATUS_LOCATOR__HOST,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_LOCATOR__HOST__HELP)
+      final String locatorHost,
+      @CliOption(key = CliStrings.STATUS_LOCATOR__PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_LOCATOR__PORT__HELP)
+      final Integer locatorPort,
+      @CliOption(key = CliStrings.STATUS_LOCATOR__PID,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_LOCATOR__PID__HELP)
+      final Integer pid,
+      @CliOption(key = CliStrings.STATUS_LOCATOR__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_LOCATOR__DIR__HELP)
+      final String workingDirectory) {
-          }
-          else {
+          } else {
-              CliStrings.STATUS_LOCATOR__NO_LOCATOR_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
+                CliStrings.STATUS_LOCATOR__NO_LOCATOR_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
-        }
-        else {
+        } else {
-            CliStrings.STATUS_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, LOCATOR_TERM_NAME));
+              CliStrings.STATUS_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, LOCATOR_TERM_NAME));
-      }
-      else {
+      } else {
-          .setCommand(LocatorLauncher.Command.STATUS)
-          .setBindAddress(locatorHost)
-          .setDebug(isDebugging())
-          .setPid(pid)
-          .setPort(locatorPort)
-          .setWorkingDirectory(workingDirectory)
-          .build();
+            .setCommand(LocatorLauncher.Command.STATUS)
+            .setBindAddress(locatorHost)
+            .setDebug(isDebugging())
+            .setPid(pid)
+            .setPort(locatorPort)
+            .setWorkingDirectory(workingDirectory)
+            .build();
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        getLocatorId(locatorHost, locatorPort), StringUtils.defaultIfBlank(workingDirectory, SystemUtils.CURRENT_DIRECTORY),
+          getLocatorId(locatorHost, locatorPort), StringUtils.defaultIfBlank(workingDirectory, SystemUtils.CURRENT_DIRECTORY),
-  @CliCommand(value=CliStrings.STOP_LOCATOR, help=CliStrings.STOP_LOCATOR__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic = {CliStrings.TOPIC_GEMFIRE_LOCATOR, CliStrings.TOPIC_GEMFIRE_LIFECYCLE})
+  @CliCommand(value = CliStrings.STOP_LOCATOR, help = CliStrings.STOP_LOCATOR__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_LOCATOR, CliStrings.TOPIC_GEODE_LIFECYCLE })
-                                       optionContext = ConverterHint.LOCATOR_MEMBER_IDNAME,
-                                       unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help=CliStrings.STOP_LOCATOR__MEMBER__HELP)
-                            final String member,
-                            @CliOption(key=CliStrings.STOP_LOCATOR__PID,
-                                       unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help=CliStrings.STOP_LOCATOR__PID__HELP)
-                            final Integer pid,
-                            @CliOption(key=CliStrings.STOP_LOCATOR__DIR,
-                                       optionContext = ConverterHint.DIR_PATHSTRING,
-                                       unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help=CliStrings.STOP_LOCATOR__DIR__HELP)
-                            final String workingDirectory)
-  {
+      optionContext = ConverterHint.LOCATOR_MEMBER_IDNAME,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.STOP_LOCATOR__MEMBER__HELP)
+  final String member,
+      @CliOption(key = CliStrings.STOP_LOCATOR__PID,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STOP_LOCATOR__PID__HELP)
+      final Integer pid,
+      @CliOption(key = CliStrings.STOP_LOCATOR__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STOP_LOCATOR__DIR__HELP)
+      final String workingDirectory) {
-          }
-          else {
+          } else {
-              CliStrings.STOP_LOCATOR__NO_LOCATOR_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
+                CliStrings.STOP_LOCATOR__NO_LOCATOR_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
-        }
-        else {
+        } else {
-            CliStrings.STOP_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, LOCATOR_TERM_NAME));
+              CliStrings.STOP_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, LOCATOR_TERM_NAME));
-      }
-      else {
+      } else {
-          .setCommand(LocatorLauncher.Command.STOP)
-          .setDebug(isDebugging())
-          .setPid(pid)
-          .setWorkingDirectory(workingDirectory)
-          .build();
+            .setCommand(LocatorLauncher.Command.STOP)
+            .setDebug(isDebugging())
+            .setPid(pid)
+            .setWorkingDirectory(workingDirectory)
+            .build();
-          locatorState.getWorkingDirectory(), locatorState.getServiceLocation(), locatorState.getMemberName(),
+            locatorState.getWorkingDirectory(), locatorState.getServiceLocation(), locatorState.getMemberName(),
-      }
-      else {
+      } else {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, getGfsh().getDebug())));
+          toString(t, getGfsh().getDebug())));
-    if (StringUtils.isBlank(gemfireProperties.getProperty(DistributionConfig.LOCATORS_NAME))) {
+    if (StringUtils.isBlank(gemfireProperties.getProperty(LOCATORS))) {
-          .concat(DistributionConfig.LOCATORS_NAME).concat("=").concat(currentLocators));
+            .concat(LOCATORS).concat("=").concat(currentLocators));
-  
+
-        commandLine.add("-Dgemfire." + propertyName + "=" + propertyValue);
+        commandLine.add("-D" + DistributionConfig.GEMFIRE_PREFIX + "" + propertyName + "=" + propertyValue);
-      }
-      else { // All other platforms (Linux, Mac OS X, UNIX, etc)
+      } else { // All other platforms (Linux, Mac OS X, UNIX, etc)
-    }
-    else if (SystemUtils.isJ9VM()) {
+    } else if (SystemUtils.isJ9VM()) {
-    }
-    else if (SystemUtils.isJRockitVM()) {
+    } else if (SystemUtils.isJRockitVM()) {
-      }
-      catch (IOException ignore) {
-      }
-      catch (NumberFormatException  ignore) {
-      }
-      finally {
+      } catch (IOException ignore) {
+      } catch (NumberFormatException ignore) {
+      } finally {
-        .build().status();
+          .build().status();
-      .setDisableDefaultServer(true).build().status();
+        .setDisableDefaultServer(true).build().status();
-                                      final String userClasspath)
-  {
+      final String userClasspath) {
-      userClasspath);
+        userClasspath);
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
-    }
-    catch (UnknownHostException ignore) {
+    } catch (UnknownHostException ignore) {
-      ((SystemUtils.isMacOSX() && SystemUtils.isAppleJVM()) ? "classes.jar" : "tools.jar"));
+        ((SystemUtils.isMacOSX() && SystemUtils.isAppleJVM()) ? "classes.jar" : "tools.jar"));
+   *
+   *
-        : "service=" + serviceName + StringUtils.COMMA_DELIMITER);
+          : "service=" + serviceName + StringUtils.COMMA_DELIMITER);
-        Query.eq(Query.attr("Name"), Query.value(member)),
-        Query.eq(Query.attr("Id"), Query.value(member))
+          Query.eq(Query.attr("Name"), Query.value(member)),
+          Query.eq(Query.attr("Id"), Query.value(member))
-    }
-    catch (MalformedObjectNameException e) {
+    } catch (MalformedObjectNameException e) {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_SERVER, CliStrings.TOPIC_GEMFIRE_LIFECYCLE })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_SERVER, CliStrings.TOPIC_GEODE_LIFECYCLE })
-                                      unspecifiedDefaultValue = "false",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__ASSIGN_BUCKETS__HELP)
-                            final Boolean assignBuckets,
-                            @CliOption(key = CliStrings.START_SERVER__BIND_ADDRESS,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__BIND_ADDRESS__HELP)
-                            final String bindAddress,
-                            @CliOption(key = CliStrings.START_SERVER__CACHE_XML_FILE,
-                                      optionContext = ConverterHint.FILE_PATHSTRING,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__CACHE_XML_FILE__HELP)
-                            String cacheXmlPathname,
-                            @CliOption(key = CliStrings.START_SERVER__CLASSPATH,
+      unspecifiedDefaultValue = "false",
+      specifiedDefaultValue = "true",
+      help = CliStrings.START_SERVER__ASSIGN_BUCKETS__HELP)
+  final Boolean assignBuckets,
+      @CliOption(key = CliStrings.START_SERVER__BIND_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__BIND_ADDRESS__HELP)
+      final String bindAddress,
+      @CliOption(key = CliStrings.START_SERVER__CACHE_XML_FILE,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__CACHE_XML_FILE__HELP)
+          String cacheXmlPathname,
+      @CliOption(key = CliStrings.START_SERVER__CLASSPATH,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__CLASSPATH__HELP)
-                            final String classpath,
-                            @CliOption(key = CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__CRITICAL__HEAP__HELP)
-                            final Float criticalHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__CRITICAL_OFF_HEAP__HELP)
-                            final Float criticalOffHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__DIR,
-                                       optionContext = ConverterHint.DIR_PATHSTRING,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__DIR__HELP)
-                            String workingDirectory,
-                            @CliOption(key = CliStrings.START_SERVER__DISABLE_DEFAULT_SERVER,
-                                      unspecifiedDefaultValue = "false",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__DISABLE_DEFAULT_SERVER__HELP)
-                            final Boolean disableDefaultServer,
-                            @CliOption(key = CliStrings.START_SERVER__DISABLE_EXIT_WHEN_OUT_OF_MEMORY,
-                                      unspecifiedDefaultValue = "false",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__DISABLE_EXIT_WHEN_OUT_OF_MEMORY_HELP)
-                            final Boolean disableExitWhenOutOfMemory,
-                            @CliOption(key = CliStrings.START_SERVER__ENABLE_TIME_STATISTICS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__ENABLE_TIME_STATISTICS__HELP)
-                            final Boolean enableTimeStatistics,
-                            @CliOption(key = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE__HELP)
-                            final Float evictionHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE__HELP)
-                            final Float evictionOffHeapPercentage,
-                            @CliOption(key = CliStrings.START_SERVER__FORCE,
-                                      unspecifiedDefaultValue = "false",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__FORCE__HELP)
-                            final Boolean force,
-                            @CliOption(key = CliStrings.START_SERVER__GROUP,
-                                       optionContext = ConverterHint.MEMBERGROUP,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__GROUP__HELP)
-                            final String group,
-                            @CliOption(key = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS__HELP)
-                            final String hostNameForClients,
-                            @CliOption(key = CliStrings.START_SERVER__INCLUDE_SYSTEM_CLASSPATH,
-                                      specifiedDefaultValue = "true",
-                                      unspecifiedDefaultValue = "false",
-                                      help = CliStrings.START_SERVER__INCLUDE_SYSTEM_CLASSPATH__HELP)
-                            final Boolean includeSystemClasspath,
-                            @CliOption(key = CliStrings.START_SERVER__INITIAL_HEAP,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__INITIAL_HEAP__HELP)
-                            final String initialHeap,
-                            @CliOption(key = CliStrings.START_SERVER__J,
-                                       optionContext = ConverterHint.STRING_LIST,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__J__HELP)
-                            @CliMetaData(valueSeparator = ",")
-                            final String[] jvmArgsOpts, 
-                            @CliOption(key = CliStrings.START_SERVER__LOCATORS,
-                                      optionContext = ConverterHint.LOCATOR_DISCOVERY_CONFIG,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__LOCATORS__HELP)
-                            final String locators,
-                            @CliOption(key = CliStrings.START_SERVER__LOCATOR_WAIT_TIME,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__LOCATOR_WAIT_TIME_HELP)
-                            final Integer locatorWaitTime,
-                            @CliOption(key = CliStrings.START_SERVER__LOCK_MEMORY,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       specifiedDefaultValue = "true",
-                                       help = CliStrings.START_SERVER__LOCK_MEMORY__HELP)
-                            final Boolean lockMemory,
-                            @CliOption(key = CliStrings.START_SERVER__LOG_LEVEL,
-                                      optionContext = ConverterHint.LOG_LEVEL,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__LOG_LEVEL__HELP)
-                            final String logLevel,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__CONNECTIONS,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__MAX__CONNECTIONS__HELP)
-                            final Integer maxConnections,
-                            @CliOption(key = CliStrings.START_SERVER__MAXHEAP,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__MAXHEAP__HELP)
-                            final String maxHeap,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__MESSAGE__COUNT,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__MAX__MESSAGE__COUNT__HELP)
-                            final Integer maxMessageCount,
-                            @CliOption(key = CliStrings.START_SERVER__MAX__THREADS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MAX__THREADS__HELP)
-                            final Integer maxThreads,
-                            @CliOption(key = CliStrings.START_SERVER__MCAST_ADDRESS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MCAST_ADDRESS__HELP)
-                            final String mcastBindAddress,
-                            @CliOption(key = CliStrings.START_SERVER__MCAST_PORT,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MCAST_PORT__HELP)
-                            final Integer mcastPort,
-                            @CliOption(key = CliStrings.START_SERVER__MEMCACHED_PORT,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MEMCACHED_PORT__HELP)
-                            final Integer memcachedPort,
-                            @CliOption(key = CliStrings.START_SERVER__MEMCACHED_PROTOCOL,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MEMCACHED_PROTOCOL__HELP)
-                            final String memcachedProtocol,
-                            @CliOption(key = CliStrings.START_SERVER__MEMCACHED_BIND_ADDRESS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__MEMCACHED_BIND_ADDRESS__HELP)
-                            final String memcachedBindAddress,
-                            @CliOption(key = CliStrings.START_SERVER__REDIS_PORT,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__REDIS_PORT__HELP)
-                            final Integer redisPort,
-                            @CliOption(key = CliStrings.START_SERVER__REDIS_BIND_ADDRESS,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__REDIS_BIND_ADDRESS__HELP)
-                            final String redisBindAddress,
-                            @CliOption(key = CliStrings.START_SERVER__REDIS_PASSWORD,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__REDIS_PASSWORD__HELP)
-                            final String redisPassword,
-                            @CliOption(key = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE__HELP)
-                            final Integer messageTimeToLive,
-                            @CliOption(key = CliStrings.START_SERVER__NAME,
-                                       mandatory = true,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__NAME__HELP)
-                            final String memberName,
-                            @CliOption(key = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE__HELP)
-                            final String offHeapMemorySize,
-                            @CliOption(key = CliStrings.START_SERVER__PROPERTIES,
-                                       optionContext = ConverterHint.FILE_PATHSTRING,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__PROPERTIES__HELP)
-                            String gemfirePropertiesPathname,
-                            @CliOption(key = CliStrings.START_SERVER__REBALANCE,
-                                      unspecifiedDefaultValue = "false",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__REBALANCE__HELP)
-                            final Boolean rebalance,
-                            @CliOption(key = CliStrings.START_SERVER__SECURITY_PROPERTIES,
-                                       optionContext = ConverterHint.FILE_PATHSTRING,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__SECURITY_PROPERTIES__HELP)
-                            String gemfireSecurityPropertiesPathname,
-                            @CliOption(key = CliStrings.START_SERVER__SERVER_BIND_ADDRESS,
-                                      unspecifiedDefaultValue = CacheServer.DEFAULT_BIND_ADDRESS,
-                                      help = CliStrings.START_SERVER__SERVER_BIND_ADDRESS__HELP)
-                            final String serverBindAddress,
-                            @CliOption(key = CliStrings.START_SERVER__SERVER_PORT,
-                                      unspecifiedDefaultValue = ("" + CacheServer.DEFAULT_PORT),
-                                      help = CliStrings.START_SERVER__SERVER_PORT__HELP)
-                            final Integer serverPort,
-                            @CliOption(key = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE__HELP)
-                            final Integer socketBufferSize,
-                            @CliOption(key = CliStrings.START_SERVER__SPRING_XML_LOCATION,
-                                       unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                       help = CliStrings.START_SERVER__SPRING_XML_LOCATION_HELP)
-                            final String springXmlLocation,
-                            @CliOption(key = CliStrings.START_SERVER__STATISTIC_ARCHIVE_FILE,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.START_SERVER__STATISTIC_ARCHIVE_FILE__HELP)
-                            final String statisticsArchivePathname,
-                            @CliOption(key = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION,
-                                      unspecifiedDefaultValue = "true",
-                                      specifiedDefaultValue = "true",
-                                      help = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION__HELP)
-                            final Boolean requestSharedConfiguration)
-                            // NOTICE: keep the parameters in alphabetical order based on their CliStrings.START_SERVER_* text
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__CLASSPATH__HELP)
+      final String classpath,
+      @CliOption(key = CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__CRITICAL__HEAP__HELP)
+      final Float criticalHeapPercentage,
+      @CliOption(key = CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__CRITICAL_OFF_HEAP__HELP)
+      final Float criticalOffHeapPercentage,
+      @CliOption(key = CliStrings.START_SERVER__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__DIR__HELP)
+          String workingDirectory,
+      @CliOption(key = CliStrings.START_SERVER__DISABLE_DEFAULT_SERVER,
+          unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__DISABLE_DEFAULT_SERVER__HELP)
+      final Boolean disableDefaultServer,
+      @CliOption(key = CliStrings.START_SERVER__DISABLE_EXIT_WHEN_OUT_OF_MEMORY,
+          unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__DISABLE_EXIT_WHEN_OUT_OF_MEMORY_HELP)
+      final Boolean disableExitWhenOutOfMemory,
+      @CliOption(key = CliStrings.START_SERVER__ENABLE_TIME_STATISTICS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__ENABLE_TIME_STATISTICS__HELP)
+      final Boolean enableTimeStatistics,
+      @CliOption(key = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE__HELP)
+      final Float evictionHeapPercentage,
+      @CliOption(key = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE__HELP)
+      final Float evictionOffHeapPercentage,
+      @CliOption(key = CliStrings.START_SERVER__FORCE,
+          unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__FORCE__HELP)
+      final Boolean force,
+      @CliOption(key = CliStrings.START_SERVER__GROUP,
+          optionContext = ConverterHint.MEMBERGROUP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__GROUP__HELP)
+      final String group,
+      @CliOption(key = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS__HELP)
+      final String hostNameForClients,
+      @CliOption(key = CliStrings.START_SERVER__INCLUDE_SYSTEM_CLASSPATH,
+          specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.START_SERVER__INCLUDE_SYSTEM_CLASSPATH__HELP)
+      final Boolean includeSystemClasspath,
+      @CliOption(key = CliStrings.START_SERVER__INITIAL_HEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__INITIAL_HEAP__HELP)
+      final String initialHeap,
+      @CliOption(key = CliStrings.START_SERVER__J,
+          optionContext = ConverterHint.STRING_LIST,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__J__HELP)
+      @CliMetaData(valueSeparator = ",")
+      final String[] jvmArgsOpts,
+      @CliOption(key = CliStrings.START_SERVER__LOCATORS,
+          optionContext = ConverterHint.LOCATOR_DISCOVERY_CONFIG,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__LOCATORS__HELP)
+      final String locators,
+      @CliOption(key = CliStrings.START_SERVER__LOCATOR_WAIT_TIME,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__LOCATOR_WAIT_TIME_HELP)
+      final Integer locatorWaitTime,
+      @CliOption(key = CliStrings.START_SERVER__LOCK_MEMORY,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__LOCK_MEMORY__HELP)
+      final Boolean lockMemory,
+      @CliOption(key = CliStrings.START_SERVER__LOG_LEVEL,
+          optionContext = ConverterHint.LOG_LEVEL,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__LOG_LEVEL__HELP)
+      final String logLevel,
+      @CliOption(key = CliStrings.START_SERVER__MAX__CONNECTIONS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MAX__CONNECTIONS__HELP)
+      final Integer maxConnections,
+      @CliOption(key = CliStrings.START_SERVER__MAXHEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MAXHEAP__HELP)
+      final String maxHeap,
+      @CliOption(key = CliStrings.START_SERVER__MAX__MESSAGE__COUNT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MAX__MESSAGE__COUNT__HELP)
+      final Integer maxMessageCount,
+      @CliOption(key = CliStrings.START_SERVER__MAX__THREADS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MAX__THREADS__HELP)
+      final Integer maxThreads,
+      @CliOption(key = CliStrings.START_SERVER__MCAST_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MCAST_ADDRESS__HELP)
+      final String mcastBindAddress,
+      @CliOption(key = CliStrings.START_SERVER__MCAST_PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MCAST_PORT__HELP)
+      final Integer mcastPort,
+      @CliOption(key = CliStrings.START_SERVER__MEMCACHED_PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MEMCACHED_PORT__HELP)
+      final Integer memcachedPort,
+      @CliOption(key = CliStrings.START_SERVER__MEMCACHED_PROTOCOL,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MEMCACHED_PROTOCOL__HELP)
+      final String memcachedProtocol,
+      @CliOption(key = CliStrings.START_SERVER__MEMCACHED_BIND_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MEMCACHED_BIND_ADDRESS__HELP)
+      final String memcachedBindAddress,
+      @CliOption(key = CliStrings.START_SERVER__REDIS_PORT,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__REDIS_PORT__HELP)
+      final Integer redisPort,
+      @CliOption(key = CliStrings.START_SERVER__REDIS_BIND_ADDRESS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__REDIS_BIND_ADDRESS__HELP)
+      final String redisBindAddress,
+      @CliOption(key = CliStrings.START_SERVER__REDIS_PASSWORD,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__REDIS_PASSWORD__HELP)
+      final String redisPassword,
+      @CliOption(key = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE__HELP)
+      final Integer messageTimeToLive,
+      @CliOption(key = CliStrings.START_SERVER__NAME,
+          mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__NAME__HELP)
+      final String memberName,
+      @CliOption(key = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__OFF_HEAP_MEMORY_SIZE__HELP)
+      final String offHeapMemorySize,
+      @CliOption(key = CliStrings.START_SERVER__PROPERTIES,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__PROPERTIES__HELP)
+          String gemfirePropertiesPathname,
+      @CliOption(key = CliStrings.START_SERVER__REBALANCE,
+          unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__REBALANCE__HELP)
+      final Boolean rebalance,
+      @CliOption(key = CliStrings.START_SERVER__SECURITY_PROPERTIES,
+          optionContext = ConverterHint.FILE_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__SECURITY_PROPERTIES__HELP)
+          String gemfireSecurityPropertiesPathname,
+      @CliOption(key = CliStrings.START_SERVER__SERVER_BIND_ADDRESS,
+          unspecifiedDefaultValue = CacheServer.DEFAULT_BIND_ADDRESS,
+          help = CliStrings.START_SERVER__SERVER_BIND_ADDRESS__HELP)
+      final String serverBindAddress,
+      @CliOption(key = CliStrings.START_SERVER__SERVER_PORT,
+          unspecifiedDefaultValue = ("" + CacheServer.DEFAULT_PORT),
+          help = CliStrings.START_SERVER__SERVER_PORT__HELP)
+      final Integer serverPort,
+      @CliOption(key = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__SOCKET__BUFFER__SIZE__HELP)
+      final Integer socketBufferSize,
+      @CliOption(key = CliStrings.START_SERVER__SPRING_XML_LOCATION,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__SPRING_XML_LOCATION_HELP)
+      final String springXmlLocation,
+      @CliOption(key = CliStrings.START_SERVER__STATISTIC_ARCHIVE_FILE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_SERVER__STATISTIC_ARCHIVE_FILE__HELP)
+      final String statisticsArchivePathname,
+      @CliOption(key = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION,
+          unspecifiedDefaultValue = "true",
+          specifiedDefaultValue = "true",
+          help = CliStrings.START_SERVER__USE_CLUSTER_CONFIGURATION__HELP)
+      final Boolean requestSharedConfiguration)
+  // NOTICE: keep the parameters in alphabetical order based on their CliStrings.START_SERVER_* text
-            serverWorkingDirectory.getAbsolutePath()));
+              serverWorkingDirectory.getAbsolutePath()));
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEMFIRE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-          StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
+        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+            StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEMFIRE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-          "Security ", gemfireSecurityPropertiesPathname));
+        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
+            "Security ", gemfireSecurityPropertiesPathname));
-      gemfireProperties.setProperty(DistributionConfig.BIND_ADDRESS_NAME, StringUtils.valueOf(bindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.CACHE_XML_FILE_NAME, StringUtils.valueOf(cacheXmlPathname, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.ENABLE_TIME_STATISTICS_NAME, StringUtils.valueOf(enableTimeStatistics, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.GROUPS_NAME, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOCATORS_NAME, StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOCATOR_WAIT_TIME_NAME, StringUtils.valueOf(locatorWaitTime, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.LOG_LEVEL_NAME, StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MCAST_ADDRESS_NAME, StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MCAST_PORT_NAME, StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MEMCACHED_PORT_NAME, StringUtils.valueOf(memcachedPort, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MEMCACHED_PROTOCOL_NAME, StringUtils.valueOf(memcachedProtocol, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.MEMCACHED_BIND_ADDRESS_NAME, StringUtils.valueOf(memcachedBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.REDIS_PORT_NAME, StringUtils.valueOf(redisPort, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.REDIS_BIND_ADDRESS_NAME, StringUtils.valueOf(redisBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.REDIS_PASSWORD_NAME, StringUtils.valueOf(redisPassword, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.STATISTIC_ARCHIVE_FILE_NAME, StringUtils.valueOf(statisticsArchivePathname, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.USE_CLUSTER_CONFIGURATION_NAME, StringUtils.valueOf(requestSharedConfiguration, Boolean.TRUE.toString()));
-      gemfireProperties.setProperty(DistributionConfig.LOCK_MEMORY_NAME, StringUtils.valueOf(lockMemory, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(DistributionConfig.OFF_HEAP_MEMORY_SIZE_NAME, StringUtils.valueOf(offHeapMemorySize, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(BIND_ADDRESS, StringUtils.valueOf(bindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(CACHE_XML_FILE, StringUtils.valueOf(cacheXmlPathname, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(ENABLE_TIME_STATISTICS, StringUtils.valueOf(enableTimeStatistics, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(GROUPS, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOCATORS, StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOCATOR_WAIT_TIME, StringUtils.valueOf(locatorWaitTime, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(LOG_LEVEL, StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MCAST_ADDRESS, StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MCAST_PORT, StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MEMCACHED_PORT, StringUtils.valueOf(memcachedPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MEMCACHED_PROTOCOL, StringUtils.valueOf(memcachedProtocol, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(MEMCACHED_BIND_ADDRESS, StringUtils.valueOf(memcachedBindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(REDIS_PORT, StringUtils.valueOf(redisPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(REDIS_BIND_ADDRESS, StringUtils.valueOf(redisBindAddress, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(REDIS_PASSWORD, StringUtils.valueOf(redisPassword, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(STATISTIC_ARCHIVE_FILE, StringUtils.valueOf(statisticsArchivePathname, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(USE_CLUSTER_CONFIGURATION, StringUtils.valueOf(requestSharedConfiguration, Boolean.TRUE.toString()));
+      gemfireProperties.setProperty(LOCK_MEMORY, StringUtils.valueOf(lockMemory, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(OFF_HEAP_MEMORY_SIZE, StringUtils.valueOf(offHeapMemorySize, StringUtils.EMPTY_STRING));
-      
+
-        .setAssignBuckets(assignBuckets)
-        .setDisableDefaultServer(disableDefaultServer)
-        .setForce(force)
-        .setMemberName(memberName)
-        .setRebalance(rebalance)
-        .setRedirectOutput(redirectOutput)
-        .setServerBindAddress(serverBindAddress)
-        .setServerPort(serverPort)
-        .setSpringXmlLocation(springXmlLocation)
-        .setWorkingDirectory(workingDirectory)
-        .setCriticalHeapPercentage(criticalHeapPercentage)
-        .setEvictionHeapPercentage(evictionHeapPercentage)
-        .setCriticalOffHeapPercentage(criticalOffHeapPercentage)
-        .setEvictionOffHeapPercentage(evictionOffHeapPercentage)
-        .setMaxConnections(maxConnections)
-        .setMaxMessageCount(maxMessageCount)
-        .setMaxThreads(maxThreads)
-        .setMessageTimeToLive(messageTimeToLive)
-        .setSocketBufferSize(socketBufferSize)
-        .setHostNameForClients(hostNameForClients)
-        .build();
+          .setAssignBuckets(assignBuckets)
+          .setDisableDefaultServer(disableDefaultServer)
+          .setForce(force)
+          .setMemberName(memberName)
+          .setRebalance(rebalance)
+          .setRedirectOutput(redirectOutput)
+          .setServerBindAddress(serverBindAddress)
+          .setServerPort(serverPort)
+          .setSpringXmlLocation(springXmlLocation)
+          .setWorkingDirectory(workingDirectory)
+          .setCriticalHeapPercentage(criticalHeapPercentage)
+          .setEvictionHeapPercentage(evictionHeapPercentage)
+          .setCriticalOffHeapPercentage(criticalOffHeapPercentage)
+          .setEvictionOffHeapPercentage(evictionOffHeapPercentage)
+          .setMaxConnections(maxConnections)
+          .setMaxMessageCount(maxMessageCount)
+          .setMaxThreads(maxThreads)
+          .setMessageTimeToLive(messageTimeToLive)
+          .setSocketBufferSize(socketBufferSize)
+          .setHostNameForClients(hostNameForClients)
+          .build();
-        gemfireSecurityPropertiesPathname, gemfireProperties, classpath, includeSystemClasspath, jvmArgsOpts,
+          gemfireSecurityPropertiesPathname, gemfireProperties, classpath, includeSystemClasspath, jvmArgsOpts,
-        .directory(new File(serverLauncher.getWorkingDirectory()))
-        .start();
+          .directory(new File(serverLauncher.getWorkingDirectory()))
+          .start();
-      
+
-          .continueReadingMillis(2*1000)
+          .continueReadingMillis(2 * 1000)
-      
+
-          IOUtils.tryGetCanonicalPathElseGetAbsolutePath(new File(serverLauncher.getWorkingDirectory()))), null);
+            IOUtils.tryGetCanonicalPathElseGetAbsolutePath(new File(serverLauncher.getWorkingDirectory()))), null);
-              CliStrings.START_SERVER__PROCESS_TERMINATED_ABNORMALLY_ERROR_MESSAGE,
+                CliStrings.START_SERVER__PROCESS_TERMINATED_ABNORMALLY_ERROR_MESSAGE,
-          }
-          catch (IllegalThreadStateException ignore) {
+          } catch (IllegalThreadStateException ignore) {
-              : serverStatus(workingDirectory, memberName));
+                : serverStatus(workingDirectory, memberName));
-              && !(StringUtils.isBlank(currentServerStatusMessage)
-                || currentServerStatusMessage.equalsIgnoreCase(previousServerStatusMessage)))
-            {
+                && !(StringUtils.isBlank(currentServerStatusMessage)
+                || currentServerStatusMessage.equalsIgnoreCase(previousServerStatusMessage))) {
-          && isStartingOrNotResponding(serverState.getStatus()));
-      }
-      finally {
+            && isStartingOrNotResponding(serverState.getStatus()));
+      } finally {
-      }
-      else {
+      } else {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (ClusterConfigurationNotAvailableException e) {
+    } catch (ClusterConfigurationNotAvailableException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, getGfsh().getDebug())));
+          toString(t, getGfsh().getDebug())));
-                                                  final String gemfirePropertiesPathname,
-                                                  final String gemfireSecurityPropertiesPathname,
-                                                  final Properties gemfireProperties,
-                                                  final String userClasspath,
-                                                  final Boolean includeSystemClasspath,
-                                                  final String[] jvmArgsOpts,
-                                                  final Boolean disableExitWhenOutOfMemory,
-                                                  final String initialHeap,
-                                                  final String maxHeap)
-    throws MalformedObjectNameException
-  {
+      final String gemfirePropertiesPathname,
+      final String gemfireSecurityPropertiesPathname,
+      final Properties gemfireProperties,
+      final String userClasspath,
+      final Boolean includeSystemClasspath,
+      final String[] jvmArgsOpts,
+      final Boolean disableExitWhenOutOfMemory,
+      final String initialHeap,
+      final String maxHeap)
+      throws MalformedObjectNameException {
-      userClasspath));
+        userClasspath));
-    commandLine.add("-Dsun.rmi.dgc.server.gcInterval".concat("=").concat(Long.toString(Long.MAX_VALUE-1)));
+    commandLine.add("-Dsun.rmi.dgc.server.gcInterval".concat("=").concat(Long.toString(Long.MAX_VALUE - 1)));
-    
+
-    
+
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_SERVER, CliStrings.TOPIC_GEMFIRE_LIFECYCLE })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_SERVER, CliStrings.TOPIC_GEODE_LIFECYCLE })
-                                        optionContext = ConverterHint.MEMBERIDNAME,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.STATUS_SERVER__MEMBER__HELP)
-                             final String member,
-                             @CliOption(key = CliStrings.STATUS_SERVER__PID,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.STATUS_SERVER__PID__HELP)
-                             final Integer pid,
-                             @CliOption(key = CliStrings.STATUS_SERVER__DIR,
-                                        optionContext = ConverterHint.DIR_PATHSTRING,
-                                        unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                        help = CliStrings.STATUS_SERVER__DIR__HELP)
-                             final String workingDirectory)
-  {
+      optionContext = ConverterHint.MEMBERIDNAME,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.STATUS_SERVER__MEMBER__HELP)
+  final String member,
+      @CliOption(key = CliStrings.STATUS_SERVER__PID,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_SERVER__PID__HELP)
+      final Integer pid,
+      @CliOption(key = CliStrings.STATUS_SERVER__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STATUS_SERVER__DIR__HELP)
+      final String workingDirectory) {
-          }
-          else {
+          } else {
-              CliStrings.STATUS_SERVER__NO_SERVER_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
+                CliStrings.STATUS_SERVER__NO_SERVER_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
-        }
-        else {
+        } else {
-            CliStrings.STATUS_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, "Cache Server"));
+              CliStrings.STATUS_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, "Cache Server"));
-      }
-      else {
+      } else {
-          .setCommand(ServerLauncher.Command.STATUS)
-          .setDebug(isDebugging())
+            .setCommand(ServerLauncher.Command.STATUS)
+            .setDebug(isDebugging())
-          // set the disableDefaultServer property in the ServerLauncher.Builder to default status to the MemberMBean
-          // TODO fix this hack! (how, the 'start server' loop needs it)
-          .setDisableDefaultServer(true)
-          .setMemberName(member)
-          .setPid(pid)
-          .setWorkingDirectory(workingDirectory)
-          .build();
+            // set the disableDefaultServer property in the ServerLauncher.Builder to default status to the MemberMBean
+            // TODO fix this hack! (how, the 'start server' loop needs it)
+            .setDisableDefaultServer(true)
+            .setMemberName(member)
+            .setPid(pid)
+            .setWorkingDirectory(workingDirectory)
+            .build();
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, getGfsh().getDebug())));
+          toString(t, getGfsh().getDebug())));
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_SERVER, CliStrings.TOPIC_GEMFIRE_LIFECYCLE })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_SERVER, CliStrings.TOPIC_GEODE_LIFECYCLE })
-                                      optionContext = ConverterHint.MEMBERIDNAME,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.STOP_SERVER__MEMBER__HELP)
-                           final String member,
-                           @CliOption(key = CliStrings.STOP_SERVER__PID,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.STOP_SERVER__PID__HELP)
-                           final Integer pid,
-                           @CliOption(key = CliStrings.STOP_SERVER__DIR,
-                                      optionContext = ConverterHint.DIR_PATHSTRING,
-                                      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                      help = CliStrings.STOP_SERVER__DIR__HELP)
-                           final String workingDirectory)
-  {
+      optionContext = ConverterHint.MEMBERIDNAME,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.STOP_SERVER__MEMBER__HELP)
+  final String member,
+      @CliOption(key = CliStrings.STOP_SERVER__PID,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STOP_SERVER__PID__HELP)
+      final Integer pid,
+      @CliOption(key = CliStrings.STOP_SERVER__DIR,
+          optionContext = ConverterHint.DIR_PATHSTRING,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.STOP_SERVER__DIR__HELP)
+      final String workingDirectory) {
-          }
-          else {
+          } else {
-              CliStrings.STOP_SERVER__NO_SERVER_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
+                CliStrings.STOP_SERVER__NO_SERVER_FOUND_FOR_MEMBER_ERROR_MESSAGE, member));
-        }
-        else {
+        } else {
-            CliStrings.STOP_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, "Cache Server"));
+              CliStrings.STOP_SERVICE__GFSH_NOT_CONNECTED_ERROR_MESSAGE, "Cache Server"));
-      }
-      else {
+      } else {
-          .setCommand(ServerLauncher.Command.STOP)
-          .setDebug(isDebugging())
-          .setMemberName(member)
-          .setPid(pid)
-          .setWorkingDirectory(workingDirectory)
-          .build();
+            .setCommand(ServerLauncher.Command.STOP)
+            .setDebug(isDebugging())
+            .setMemberName(member)
+            .setPid(pid)
+            .setWorkingDirectory(workingDirectory)
+            .build();
-          serverState.getWorkingDirectory(), serverState.getServiceLocation(), serverState.getMemberName(),
+            serverState.getWorkingDirectory(), serverState.getServiceLocation(), serverState.getMemberName(),
-      }
-      else {
+      } else {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, getGfsh().getDebug())));
+          toString(t, getGfsh().getDebug())));
-  //@CliMetaData(shellOnly=true, relatedTopic = {CliStrings.TOPIC_GEMFIRE_MANAGER, CliStrings.TOPIC_GEMFIRE_JMX, CliStrings.TOPIC_GEMFIRE_LIFECYCLE})
-  public Result startManager(@CliOption(key=CliStrings.START_MANAGER__MEMBERNAME,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__MEMBERNAME__HELP)
-                             String memberName,
-                             @CliOption(key=CliStrings.START_MANAGER__DIR,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__DIR__HELP)
-                             String dir,
-                             @CliOption(key=CliStrings.START_MANAGER__PORT,
-                              unspecifiedDefaultValue="1099",
-                              help=CliStrings.START_MANAGER__PORT__HELP)
-                             int cacheServerPort,
-                             @CliOption(key=CliStrings.START_MANAGER__BIND_ADDRESS,
-                              unspecifiedDefaultValue="localhost",
-                              help=CliStrings.START_MANAGER__BIND_ADDRESS__HELP)
-                             String cacheServerHost,
-                             @CliOption(key=CliStrings.START_MANAGER__CLASSPATH,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__CLASSPATH__HELP)
-                             String classpath,
-                             @CliOption(key=CliStrings.START_MANAGER__MAXHEAP,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__MAXHEAP__HELP)
-                             String maxHeap,
-                             @CliOption(key=CliStrings.START_MANAGER__INITIALHEAP,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__INITIALHEAP__HELP)
-                             String initialHeap,
-                             @CliOption(key=CliStrings.START_MANAGER__J,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__J__HELP)
-                             Map<String, String> systepProps,
-                             @CliOption(key=CliStrings.START_MANAGER__GEMFIREPROPS,
-                              unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                              help=CliStrings.START_MANAGER__GEMFIREPROPS__HELP)
-                             Map<String, String> gemfireProps)
-  {
+  //@CliMetaData(shellOnly=true, relatedTopic = {CliStrings.TOPIC_GEODE_MANAGER, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_LIFECYCLE})
+  public Result startManager(@CliOption(key = CliStrings.START_MANAGER__MEMBERNAME,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.START_MANAGER__MEMBERNAME__HELP)
+      String memberName,
+      @CliOption(key = CliStrings.START_MANAGER__DIR,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__DIR__HELP)
+          String dir,
+      @CliOption(key = CliStrings.START_MANAGER__PORT,
+          unspecifiedDefaultValue = "1099",
+          help = CliStrings.START_MANAGER__PORT__HELP)
+          int cacheServerPort,
+      @CliOption(key = CliStrings.START_MANAGER__BIND_ADDRESS,
+          unspecifiedDefaultValue = "localhost",
+          help = CliStrings.START_MANAGER__BIND_ADDRESS__HELP)
+          String cacheServerHost,
+      @CliOption(key = CliStrings.START_MANAGER__CLASSPATH,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__CLASSPATH__HELP)
+          String classpath,
+      @CliOption(key = CliStrings.START_MANAGER__MAXHEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__MAXHEAP__HELP)
+          String maxHeap,
+      @CliOption(key = CliStrings.START_MANAGER__INITIALHEAP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__INITIALHEAP__HELP)
+          String initialHeap,
+      @CliOption(key = CliStrings.START_MANAGER__J,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__J__HELP)
+          Map<String, String> systepProps,
+      @CliOption(key = CliStrings.START_MANAGER__GEODEPROPS,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_MANAGER__GEODEPROPS__HELP)
+          Map<String, String> gemfireProps) {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_MANAGER, CliStrings.TOPIC_GEMFIRE_JMX, CliStrings.TOPIC_GEMFIRE_M_AND_M })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_MANAGER, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_M_AND_M })
-                                         unspecifiedDefaultValue = "4",
-                                         help = CliStrings.START_JCONSOLE__INTERVAL__HELP)
-                              final int interval,
-                              @CliOption(key = CliStrings.START_JCONSOLE__NOTILE,
-                                         specifiedDefaultValue = "true",
-                                         unspecifiedDefaultValue = "false",
-                                         help = CliStrings.START_JCONSOLE__NOTILE__HELP)
-                              final boolean notile,
-                              @CliOption(key=CliStrings.START_JCONSOLE__PLUGINPATH,
-                                         unspecifiedDefaultValue=CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help=CliStrings.START_JCONSOLE__PLUGINPATH__HELP)
-                              final String pluginpath,
-                              @CliOption(key = CliStrings.START_JCONSOLE__VERSION,
-                                         specifiedDefaultValue = "true",
-                                         unspecifiedDefaultValue = "false",
-                                         help = CliStrings.START_JCONSOLE__VERSION__HELP)
-                              final boolean version,
-                              @CliOption(key = CliStrings.START_JCONSOLE__J,
-                                         optionContext = ConverterHint.STRING_LIST,
-                                         unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                         help = CliStrings.START_JCONSOLE__J__HELP)
-                              @CliMetaData(valueSeparator = ",")
-                              final List<String> jvmArgs)
-  {
+      unspecifiedDefaultValue = "4",
+      help = CliStrings.START_JCONSOLE__INTERVAL__HELP)
+  final int interval,
+      @CliOption(key = CliStrings.START_JCONSOLE__NOTILE,
+          specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.START_JCONSOLE__NOTILE__HELP)
+      final boolean notile,
+      @CliOption(key = CliStrings.START_JCONSOLE__PLUGINPATH,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_JCONSOLE__PLUGINPATH__HELP)
+      final String pluginpath,
+      @CliOption(key = CliStrings.START_JCONSOLE__VERSION,
+          specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.START_JCONSOLE__VERSION__HELP)
+      final boolean version,
+      @CliOption(key = CliStrings.START_JCONSOLE__J,
+          optionContext = ConverterHint.STRING_LIST,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.START_JCONSOLE__J__HELP)
+      @CliMetaData(valueSeparator = ",")
+      final List<String> jvmArgs) {
-      }
-      else {
+      } else {
-    }
-    catch (GemFireException e) {
+    } catch (GemFireException e) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (IOException e) {
+    } catch (IOException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, false)));
+          toString(t, false)));
-                                               final int interval,
-                                               final boolean notile,
-                                               final String pluginpath,
-                                               final boolean version,
-                                               final List<String> jvmArgs)
-  {
+      final int interval,
+      final boolean notile,
+      final String pluginpath,
+      final boolean version,
+      final List<String> jvmArgs) {
-    }
-    else {
+    } else {
-      new JConsoleNotFoundException(CliStrings.START_JCONSOLE__NOT_FOUND_ERROR_MESSAGE));
+        new JConsoleNotFoundException(CliStrings.START_JCONSOLE__NOT_FOUND_ERROR_MESSAGE));
-    }
-    catch (EmptyStackException ignore) {
+    } catch (EmptyStackException ignore) {
-    }
-    catch (FileNotFoundException ignore) {
+    } catch (FileNotFoundException ignore) {
-          "/jndi/rmi://", connectionEndpoint.getHost(), ":", connectionEndpoint.getPort(), "/jmxrmi");
-      }
-      catch (Exception e) {
+            "/jndi/rmi://", connectionEndpoint.getHost(), ":", connectionEndpoint.getPort(), "/jmxrmi");
+      } catch (Exception e) {
-    }
-    else {
+    } else {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_MANAGER, CliStrings.TOPIC_GEMFIRE_JMX, CliStrings.TOPIC_GEMFIRE_M_AND_M })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_MANAGER, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_M_AND_M })
-                                          optionContext = ConverterHint.STRING_LIST,
-                                          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-                                          help = CliStrings.START_JCONSOLE__J__HELP)
-                               @CliMetaData(valueSeparator = ",")
-                               final List<String> jvmArgs)
-  {
+      optionContext = ConverterHint.STRING_LIST,
+      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      help = CliStrings.START_JCONSOLE__J__HELP)
+  @CliMetaData(valueSeparator = ",")
+  final List<String> jvmArgs) {
-    }
-    catch (GemFireException e) {
+    } catch (GemFireException e) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, false)));
+          toString(t, false)));
-      }
-      catch (FileNotFoundException e) {
+      } catch (FileNotFoundException e) {
-    }
-    else { // Linux, Solaris, Windows, etc...
+    } else { // Linux, Solaris, Windows, etc...
-          new VisualVmNotFoundException(CliStrings.START_JVISUALVM__NOT_FOUND_ERROR_MESSAGE));
-      }
-      catch (VisualVmNotFoundException e) {
+            new VisualVmNotFoundException(CliStrings.START_JVISUALVM__NOT_FOUND_ERROR_MESSAGE));
+      } catch (VisualVmNotFoundException e) {
-  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_MANAGER, CliStrings.TOPIC_GEMFIRE_JMX, CliStrings.TOPIC_GEMFIRE_M_AND_M })
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_MANAGER, CliStrings.TOPIC_GEODE_JMX, CliStrings.TOPIC_GEODE_M_AND_M })
-                                      unspecifiedDefaultValue = "http://localhost:7070/pulse",
-                                      help = CliStrings.START_PULSE__URL__HELP)
-                           final String url)
-  {
+      unspecifiedDefaultValue = "http://localhost:7070/pulse",
+      help = CliStrings.START_PULSE__URL__HELP)
+  final String url) {
-      }
-      else {
+      } else {
-            ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN, "ManagerObjectName");
+              ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN, "ManagerObjectName");
-          }
-          else {
+          } else {
-              : ResultBuilder.createGemFireErrorResult(CliStrings.START_PULSE__URL__NOTFOUND));
+                : ResultBuilder.createGemFireErrorResult(CliStrings.START_PULSE__URL__NOTFOUND));
-        }
-        else {
+        } else {
-            "GemFire Pulse"));
+              "GemFire Pulse"));
-    }
-    catch (GemFireException e) {
+    } catch (GemFireException e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, false)));
+          toString(t, false)));
-      System.getProperty("os.name")));
+        System.getProperty("os.name")));
-        ClassLoader.getSystemClassLoader().getResourceAsStream(classpathResourceLocation)));
+          ClassLoader.getSystemClassLoader().getResourceAsStream(classpathResourceLocation)));
-      }
-      finally {
+      } finally {
-  @CliCommand(value=CliStrings.START_VSD, help=CliStrings.START_VSD__HELP)
-  @CliMetaData(shellOnly=true, relatedTopic = { CliStrings.TOPIC_GEMFIRE_M_AND_M, CliStrings.TOPIC_GEMFIRE_STATISTICS })
-  public Result startVsd(@CliOption(key=CliStrings.START_VSD__FILE, help=CliStrings.START_VSD__FILE__HELP)
-                         final String[] statisticsArchiveFilePathnames)
-  {
+  @CliCommand(value = CliStrings.START_VSD, help = CliStrings.START_VSD__HELP)
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_M_AND_M, CliStrings.TOPIC_GEODE_STATISTICS })
+  public Result startVsd(@CliOption(key = CliStrings.START_VSD__FILE, help = CliStrings.START_VSD__FILE__HELP)
+  final String[] statisticsArchiveFilePathnames) {
-      assertState(!StringUtils.isBlank(gemfireHome), CliStrings.GEMFIRE_HOME_NOT_FOUND_ERROR_MESSAGE);
+      assertState(!StringUtils.isBlank(gemfireHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
-        gemfireHome));
+          gemfireHome));
-    }
-    catch (GemFireException e) {
+    } catch (GemFireException e) {
-    }
-    catch (FileNotFoundException e) {
+    } catch (FileNotFoundException e) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        toString(t, false)));
+          toString(t, false)));
-            }
-            else {
+            } else {
-          }
-          else { // the File (path) is a directory
+          } else { // the File (path) is a directory
-        }
-        else {
+        } else {
-            "The pathname (%1$s) does not exist.  Please check the path and try again.",
-            path.getAbsolutePath()));
+              "The pathname (%1$s) does not exist.  Please check the path and try again.",
+              path.getAbsolutePath()));
-        }
-        else if (StatisticsArchiveFileFilter.INSTANCE.accept(file)) {
+        } else if (StatisticsArchiveFileFilter.INSTANCE.accept(file)) {
-  @CliMetaData(shellOnly=true, relatedTopic={CliStrings.TOPIC_GEMFIRE_M_AND_M})
+  @CliMetaData(shellOnly = true, relatedTopic = { CliStrings.TOPIC_GEODE_M_AND_M })
-      assertState(!StringUtils.isBlank(gemfireHome), CliStrings.GEMFIRE_HOME_NOT_FOUND_ERROR_MESSAGE);
+      assertState(!StringUtils.isBlank(gemfireHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
-          CliStrings.START_DATABROWSER__NOT_FOUND_ERROR_MESSAGE, gemfireHome));
+            CliStrings.START_DATABROWSER__NOT_FOUND_ERROR_MESSAGE, gemfireHome));
-          operationInvoker.getManagerHost(), operationInvoker.getManagerPort());
+            operationInvoker.getManagerHost(), operationInvoker.getManagerPort());
-      }
-      else {
+      } else {
-          "GemFire DataBrowser"));
+            "GemFire DataBrowser"));
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-    }
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-    
+
-    
+
-        }
-        catch (InterruptedException ignore) {
+        } catch (InterruptedException ignore) {
-    }
-    finally {
+    } finally {
-  @CliAvailabilityIndicator({CliStrings.START_LOCATOR, CliStrings.STOP_LOCATOR, CliStrings.STATUS_LOCATOR,
-    CliStrings.START_SERVER, CliStrings.STOP_SERVER, CliStrings.STATUS_SERVER,
-    CliStrings.START_MANAGER, CliStrings.START_PULSE, CliStrings.START_VSD, CliStrings.START_DATABROWSER})
+  @CliAvailabilityIndicator({ CliStrings.START_LOCATOR, CliStrings.STOP_LOCATOR, CliStrings.STATUS_LOCATOR,
+      CliStrings.START_SERVER, CliStrings.STOP_SERVER, CliStrings.STATUS_SERVER,
+      CliStrings.START_MANAGER, CliStrings.START_PULSE, CliStrings.START_VSD, CliStrings.START_DATABROWSER })

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD66 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD40 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS21 INS10 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS32 INS7 UPD40 UPD40 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS33 INS27 INS32 INS42 INS32 INS42 INS42 INS9 UPD45 INS40 INS45 UPD40 UPD40 INS42 INS32 INS42 MOV32 UPD42 MOV42 MOV42 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40