GEODE-4429: Remove unnecessary modifiers from interfaces in geode-core:cache

* This excludes those interfaces in geode-core:internal.cache, as covered in GEODE-4430
-  public static final char SEPARATOR_CHAR = '/';
+  char SEPARATOR_CHAR = '/';
-  public static final String SEPARATOR = "/";
+  String SEPARATOR = "/";
-  public String getName();
+  String getName();
-  public String getFullPath();
+  String getFullPath();
-  public <PK, PV> Region<PK, PV> getParentRegion();
+  <PK, PV> Region<PK, PV> getParentRegion();
-  public RegionAttributes<K, V> getAttributes();
+  RegionAttributes<K, V> getAttributes();
-  public AttributesMutator<K, V> getAttributesMutator();
+  AttributesMutator<K, V> getAttributesMutator();
-  public CacheStatistics getStatistics() throws StatisticsDisabledException;
+  CacheStatistics getStatistics() throws StatisticsDisabledException;
-  public void invalidateRegion() throws TimeoutException;
+  void invalidateRegion() throws TimeoutException;
-  public void invalidateRegion(Object aCallbackArgument) throws TimeoutException;
+  void invalidateRegion(Object aCallbackArgument) throws TimeoutException;
-  public void localInvalidateRegion();
+  void localInvalidateRegion();
-  public void localInvalidateRegion(Object aCallbackArgument);
+  void localInvalidateRegion(Object aCallbackArgument);
-  public void destroyRegion() throws CacheWriterException, TimeoutException;
+  void destroyRegion() throws CacheWriterException, TimeoutException;
-  public void destroyRegion(Object aCallbackArgument) throws CacheWriterException, TimeoutException;
+  void destroyRegion(Object aCallbackArgument) throws CacheWriterException, TimeoutException;
-  public void localDestroyRegion();
+  void localDestroyRegion();
-  public void localDestroyRegion(Object aCallbackArgument);
+  void localDestroyRegion(Object aCallbackArgument);
-  public void close();
+  void close();
-  public RegionSnapshotService<K, V> getSnapshotService();
+  RegionSnapshotService<K, V> getSnapshotService();
-  public void saveSnapshot(OutputStream outputStream) throws IOException;
+  void saveSnapshot(OutputStream outputStream) throws IOException;
-  public void loadSnapshot(InputStream inputStream)
+  void loadSnapshot(InputStream inputStream)
-  public <SK, SV> Region<SK, SV> getSubregion(String path);
+  <SK, SV> Region<SK, SV> getSubregion(String path);
-  public <SK, SV> Region<SK, SV> createSubregion(String subregionName,
+  <SK, SV> Region<SK, SV> createSubregion(String subregionName,
-  public Set<Region<?, ?>> subregions(boolean recursive);
+  Set<Region<?, ?>> subregions(boolean recursive);
-  public Entry<K, V> getEntry(Object key);
+  Entry<K, V> getEntry(Object key);
-  public V get(Object key) throws CacheLoaderException, TimeoutException;
+  V get(Object key) throws CacheLoaderException, TimeoutException;
-  public V get(Object key, Object aCallbackArgument) throws TimeoutException, CacheLoaderException;
+  V get(Object key, Object aCallbackArgument) throws TimeoutException, CacheLoaderException;
-  public V put(K key, V value) throws TimeoutException, CacheWriterException;
+  V put(K key, V value) throws TimeoutException, CacheWriterException;
-  public V put(K key, V value, Object aCallbackArgument)
-      throws TimeoutException, CacheWriterException;
+  V put(K key, V value, Object aCallbackArgument) throws TimeoutException, CacheWriterException;
-  public void create(K key, V value)
-      throws TimeoutException, EntryExistsException, CacheWriterException;
+  void create(K key, V value) throws TimeoutException, EntryExistsException, CacheWriterException;
-  public void create(K key, V value, Object aCallbackArgument)
+  void create(K key, V value, Object aCallbackArgument)
-  public void invalidate(Object key) throws TimeoutException, EntryNotFoundException;
+  void invalidate(Object key) throws TimeoutException, EntryNotFoundException;
-  public void invalidate(Object key, Object aCallbackArgument)
+  void invalidate(Object key, Object aCallbackArgument)
-  public void localInvalidate(Object key) throws EntryNotFoundException;
+  void localInvalidate(Object key) throws EntryNotFoundException;
-  public void localInvalidate(Object key, Object aCallbackArgument) throws EntryNotFoundException;
+  void localInvalidate(Object key, Object aCallbackArgument) throws EntryNotFoundException;
-  public V destroy(Object key)
-      throws TimeoutException, EntryNotFoundException, CacheWriterException;
+  V destroy(Object key) throws TimeoutException, EntryNotFoundException, CacheWriterException;
-  public V destroy(Object key, Object aCallbackArgument)
+  V destroy(Object key, Object aCallbackArgument)
-  public void localDestroy(Object key) throws EntryNotFoundException;
+  void localDestroy(Object key) throws EntryNotFoundException;
-  public void localDestroy(Object key, Object aCallbackArgument) throws EntryNotFoundException;
+  void localDestroy(Object key, Object aCallbackArgument) throws EntryNotFoundException;
-  public Set<K> keySet();
+  Set<K> keySet();
-  public Collection<V> values();
+  Collection<V> values();
-  public Set<Region.Entry<?, ?>> entrySet(boolean recursive);
+  Set<Region.Entry<?, ?>> entrySet(boolean recursive);
-  public Cache getCache();
+  Cache getCache();
-  public RegionService getRegionService();
+  RegionService getRegionService();
-  public Object getUserAttribute();
+  Object getUserAttribute();
-  public void setUserAttribute(Object value);
+  void setUserAttribute(Object value);
-  public boolean isDestroyed();
+  boolean isDestroyed();
-  public boolean containsValueForKey(Object key);
+  boolean containsValueForKey(Object key);
-  public boolean containsKey(Object key);
+  boolean containsKey(Object key);
-  public Lock getRegionDistributedLock() throws IllegalStateException;
+  Lock getRegionDistributedLock() throws IllegalStateException;
-  public Lock getDistributedLock(Object key) throws IllegalStateException;
+  Lock getDistributedLock(Object key) throws IllegalStateException;
-  public void writeToDisk();
+  void writeToDisk();
-  public boolean existsValue(String queryPredicate) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException, QueryInvocationTargetException;
+  boolean existsValue(String queryPredicate) throws FunctionDomainException, TypeMismatchException,
+      NameResolutionException, QueryInvocationTargetException;
-  public <E> SelectResults<E> query(String queryPredicate) throws FunctionDomainException,
+  <E> SelectResults<E> query(String queryPredicate) throws FunctionDomainException,
-  public Object selectValue(String queryPredicate) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException, QueryInvocationTargetException;
+  Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMismatchException,
+      NameResolutionException, QueryInvocationTargetException;
-  public void forceRolling();
+  void forceRolling();
-  public void becomeLockGrantor();
+  void becomeLockGrantor();
-  public void localClear();
+  void localClear();
-  public void clear();
+  void clear();
-  public boolean containsValue(Object value);
+  boolean containsValue(Object value);
-  public Set<Map.Entry<K, V>> entrySet(); // @todo darrel: should be Region.Entry
+  Set<Map.Entry<K, V>> entrySet(); // @todo darrel: should be Region.Entry
-  public boolean isEmpty();
+  boolean isEmpty();
-  public void putAll(Map<? extends K, ? extends V> map);
+  void putAll(Map<? extends K, ? extends V> map);
-  public void putAll(Map<? extends K, ? extends V> map, Object aCallbackArgument);
+  void putAll(Map<? extends K, ? extends V> map, Object aCallbackArgument);
-  public void removeAll(Collection<? extends K> keys);
+  void removeAll(Collection<? extends K> keys);
-  public void removeAll(Collection<? extends K> keys, Object aCallbackArgument);
+  void removeAll(Collection<? extends K> keys, Object aCallbackArgument);
-  public Map<K, V> getAll(Collection<?> keys);
+  Map<K, V> getAll(Collection<?> keys);
-  public <T extends K> Map<T, V> getAll(Collection<T> keys, Object aCallbackArgument);
+  <T extends K> Map<T, V> getAll(Collection<T> keys, Object aCallbackArgument);
-  public V remove(Object key);
+  V remove(Object key);
-  public int size();
+  int size();
-  public boolean equals(Object other);
+  boolean equals(Object other);
-  public int hashCode();
+  int hashCode();
-  public void registerInterest(K key);
+  void registerInterest(K key);
-  public void registerInterest(K key, InterestResultPolicy policy);
+  void registerInterest(K key, InterestResultPolicy policy);
-  public void registerInterestRegex(String regex);
+  void registerInterestRegex(String regex);
-  public void registerInterestRegex(String regex, InterestResultPolicy policy);
+  void registerInterestRegex(String regex, InterestResultPolicy policy);
-  public void unregisterInterest(K key);
+  void unregisterInterest(K key);
-  public void unregisterInterestRegex(String regex);
+  void unregisterInterestRegex(String regex);
-  public List<K> getInterestList();
+  List<K> getInterestList();
-  public void registerInterest(K key, boolean isDurable);
+  void registerInterest(K key, boolean isDurable);
-  public void registerInterest(K key, boolean isDurable, boolean receiveValues);
+  void registerInterest(K key, boolean isDurable, boolean receiveValues);
-  public void registerInterest(K key, InterestResultPolicy policy, boolean isDurable,
+  void registerInterest(K key, InterestResultPolicy policy, boolean isDurable,
-  public void registerInterest(K key, InterestResultPolicy policy, boolean isDurable);
+  void registerInterest(K key, InterestResultPolicy policy, boolean isDurable);
-  public void registerInterestRegex(String regex, boolean isDurable);
+  void registerInterestRegex(String regex, boolean isDurable);
-  public void registerInterestRegex(String regex, boolean isDurable, boolean receiveValues);
+  void registerInterestRegex(String regex, boolean isDurable, boolean receiveValues);
-  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable);
+  void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable);
-  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable,
+  void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable,
-  public List<String> getInterestListRegex();
+  List<String> getInterestListRegex();
-  public Set<K> keySetOnServer();
+  Set<K> keySetOnServer();
-  public boolean containsKeyOnServer(Object key);
+  boolean containsKeyOnServer(Object key);
-  public int sizeOnServer();
+  int sizeOnServer();
-  public boolean isEmptyOnServer();
+  boolean isEmptyOnServer();
-  public interface Entry<K, V> extends Map.Entry<K, V> {
+  interface Entry<K, V> extends Map.Entry<K, V> {
-    public K getKey();
+    K getKey();
-    public V getValue();
+    V getValue();
-    public Region<K, V> getRegion();
+    Region<K, V> getRegion();
-    public boolean isLocal();
+    boolean isLocal();
-    public CacheStatistics getStatistics();
+    CacheStatistics getStatistics();
-    public Object getUserAttribute();
+    Object getUserAttribute();
-    public Object setUserAttribute(Object userAttribute);
+    Object setUserAttribute(Object userAttribute);
-    public boolean isDestroyed();
+    boolean isDestroyed();
-    public V setValue(V value);
+    V setValue(V value);

