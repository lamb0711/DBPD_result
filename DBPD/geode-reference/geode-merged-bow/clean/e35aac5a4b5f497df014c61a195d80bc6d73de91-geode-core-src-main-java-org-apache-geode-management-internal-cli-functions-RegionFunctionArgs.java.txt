Merge branch 'release/1.5.0'

+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CustomExpiry;
+import org.apache.geode.management.internal.cli.domain.ClassName;
-  private static final long serialVersionUID = 2204943186081037301L;
+  private static final long serialVersionUID = 2204943186081037302L;
-  private boolean skipIfExists;
+  private boolean ifNotExists;
-  private RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime;
-  private RegionFunctionArgs.ExpirationAttrs entryExpirationTTL;
-  private RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime;
-  private RegionFunctionArgs.ExpirationAttrs regionExpirationTTL;
-  private RegionFunctionArgs.EvictionAttrs evictionAttributes;
+  private ExpirationAttrs entryExpirationIdleTime;
+  private ExpirationAttrs entryExpirationTTL;
+  private ClassName<CustomExpiry> entryIdleTimeCustomExpiry;
+  private ClassName<CustomExpiry> entryTTLCustomExpiry;
+  private ExpirationAttrs regionExpirationIdleTime;
+  private ExpirationAttrs regionExpirationTTL;
+  private EvictionAttrs evictionAttributes;
-  private Set<String> cacheListeners = Collections.emptySet();
-  private String cacheLoader;
-  private String cacheWriter;
+  private Set<ClassName<CacheListener>> cacheListeners = Collections.emptySet();
+  private ClassName<CacheLoader> cacheLoader;
+  private ClassName<CacheWriter> cacheWriter;
-  public void setSkipIfExists(boolean skipIfExists) {
-    this.skipIfExists = skipIfExists;
+  public void setIfNotExists(boolean ifNotExists) {
+    this.ifNotExists = ifNotExists;
-  public void setEntryExpirationIdleTime(Integer timeout, String action) {
-    if (timeout != null) {
-      this.entryExpirationIdleTime = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_IDLE, timeout, action);
-    }
+  public void setEntryExpirationIdleTime(Integer timeout, ExpirationAction action) {
+    this.entryExpirationIdleTime = new ExpirationAttrs(timeout, action);
-  public void setEntryExpirationTTL(Integer timeout, String action) {
-    if (timeout != null) {
-      this.entryExpirationTTL = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_TTL, timeout, action);
-    }
+  public void setEntryExpirationTTL(Integer timeout, ExpirationAction action) {
+    this.entryExpirationTTL = new ExpirationAttrs(timeout, action);
-  public void setRegionExpirationIdleTime(Integer timeout, String action) {
-    if (timeout != null) {
-      this.regionExpirationIdleTime = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_IDLE, timeout, action);
-    }
+  public void setRegionExpirationIdleTime(Integer timeout, ExpirationAction action) {
+    this.regionExpirationIdleTime = new ExpirationAttrs(timeout, action);
-  public void setRegionExpirationTTL(Integer timeout, String action) {
-    if (timeout != null) {
-      this.regionExpirationTTL = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_TTL, timeout, action);
-    }
+  public void setRegionExpirationTTL(Integer timeout, ExpirationAction action) {
+    this.regionExpirationTTL = new ExpirationAttrs(timeout, action);
-  public void setCacheListeners(String[] cacheListeners) {
+  public void setCacheListeners(ClassName<CacheListener>[] cacheListeners) {
-  public void setCacheLoader(String cacheLoader) {
+  public void setCacheLoader(ClassName<CacheLoader> cacheLoader) {
-  public void setCacheWriter(String cacheWriter) {
+  public void setCacheWriter(ClassName<CacheWriter> cacheWriter) {
-   * @return the skipIfExists
+   * @return the ifNotExists
-  public Boolean isSkipIfExists() {
-    return this.skipIfExists;
+  public Boolean isIfNotExists() {
+    return this.ifNotExists;
-  public RegionFunctionArgs.ExpirationAttrs getEntryExpirationIdleTime() {
+  public ExpirationAttrs getEntryExpirationIdleTime() {
-  public RegionFunctionArgs.ExpirationAttrs getEntryExpirationTTL() {
+  public ExpirationAttrs getEntryExpirationTTL() {
-  public RegionFunctionArgs.ExpirationAttrs getRegionExpirationIdleTime() {
+  public ExpirationAttrs getRegionExpirationIdleTime() {
-  public RegionFunctionArgs.ExpirationAttrs getRegionExpirationTTL() {
+  public ExpirationAttrs getRegionExpirationTTL() {
-  public Set<String> getCacheListeners() {
+  public Set<ClassName<CacheListener>> getCacheListeners() {
-  public String getCacheLoader() {
+  public ClassName<CacheLoader> getCacheLoader() {
-  public String getCacheWriter() {
+  public ClassName<CacheWriter> getCacheWriter() {
+  public ClassName<CustomExpiry> getEntryIdleTimeCustomExpiry() {
+    return entryIdleTimeCustomExpiry;
+  }
+
+  public void setEntryIdleTimeCustomExpiry(ClassName<CustomExpiry> entryIdleTimeCustomExpiry) {
+    this.entryIdleTimeCustomExpiry = entryIdleTimeCustomExpiry;
+  }
+
+  public ClassName<CustomExpiry> getEntryTTLCustomExpiry() {
+    return entryTTLCustomExpiry;
+  }
+
+  public void setEntryTTLCustomExpiry(ClassName<CustomExpiry> entryTTLCustomExpiry) {
+    this.entryTTLCustomExpiry = entryTTLCustomExpiry;
+  }
+
+  /**
+   * the difference between this and ExpirationAttributes is that this allows time and action to be
+   * null
+   */
-    private static final long serialVersionUID = 1474255033398008062L;
+    private static final long serialVersionUID = 1474255033398008063L;
-    private final ExpirationFor type;
-    private final ExpirationAttributes timeAndAction;
+    private final Integer time;
+    private final ExpirationAction action;
-    public ExpirationAttrs(ExpirationFor type, Integer time, String action) {
-      this.type = type;
-      if (time != null) {
-        this.timeAndAction = new ExpirationAttributes(time, getExpirationAction(action));
-      } else {
-        this.timeAndAction = new ExpirationAttributes(0, getExpirationAction(action));
-      }
+    public ExpirationAttrs(Integer time, ExpirationAction action) {
+      this.time = time;
+      this.action = action;
-    public ExpirationAttributes convertToExpirationAttributes() {
-      return timeAndAction;
-    }
-
-    /**
-     * @return the type
-     */
-    public ExpirationFor getType() {
-      return type;
-    }
-
-    /**
-     * @return the time
-     */
-      return timeAndAction.getTimeout();
+      return time;
-    /**
-     * @return the action
-     */
-      return timeAndAction.getAction();
+      return action;
-    public String toString() {
-      StringBuilder builder = new StringBuilder();
-      builder.append(ExpirationAttrs.class.getSimpleName() + " [type=");
-      builder.append(type);
-      builder.append(", time=");
-      builder.append(timeAndAction.getTimeout());
-      builder.append(", action=");
-      builder.append(timeAndAction.getAction());
-      builder.append("]");
-      return builder.toString();
+    public boolean equals(Object object) {
+      if (object == null) {
+        return false;
+      }
+
+      if (!(object instanceof ExpirationAttrs)) {
+        return false;
+      }
+
+      ExpirationAttrs that = (ExpirationAttrs) object;
+      return time == that.time && action == that.action;
-    private static ExpirationAction getExpirationAction(String action) {
-      if (action == null) {
-        return ExpirationAttributes.DEFAULT.getAction();
-      }
-      action = action.replace('-', '_');
-      if (action.equalsIgnoreCase(ExpirationAction.DESTROY.toString())) {
-        return ExpirationAction.DESTROY;
-      } else if (action.equalsIgnoreCase(ExpirationAction.INVALIDATE.toString())) {
-        return ExpirationAction.INVALIDATE;
-      } else if (action.equalsIgnoreCase(ExpirationAction.LOCAL_DESTROY.toString())) {
-        return ExpirationAction.LOCAL_DESTROY;
-      } else if (action.equalsIgnoreCase(ExpirationAction.LOCAL_INVALIDATE.toString())) {
-        return ExpirationAction.LOCAL_INVALIDATE;
-      } else {
-        throw new IllegalArgumentException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__EXPIRATION_ACTION_0_IS_NOT_VALID,
-                new Object[] {action}));
-      }
+    public boolean isTimeSet() {
+      return time != null;
-    public enum ExpirationFor {
-      REGION_IDLE, REGION_TTL, ENTRY_IDLE, ENTRY_TTL
+    public boolean isTimeOrActionSet() {
+      return time != null || action != null;
+    }
+
+    public ExpirationAttributes getExpirationAttributes() {
+      return getExpirationAttributes(null);
+    }
+
+    public ExpirationAttributes getExpirationAttributes(ExpirationAttributes existing) {
+      // default values
+      int timeToUse = 0;
+      ExpirationAction actionToUse = ExpirationAction.INVALIDATE;
+
+      if (existing != null) {
+        timeToUse = existing.getTimeout();
+        actionToUse = existing.getAction();
+      }
+      if (time != null) {
+        timeToUse = time;
+      }
+
+      if (action != null) {
+        actionToUse = action;
+      }
+      return new ExpirationAttributes(timeToUse, actionToUse);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 UPD43 UPD43 INS83 INS74 INS59 INS83 INS74 INS59 UPD43 UPD43 UPD43 UPD74 INS74 INS74 UPD42 INS8 INS8 INS8 INS8 UPD42 UPD43 UPD43 UPD43 UPD43 UPD74 INS74 INS74 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS29 MOV44 INS31 INS31 INS31 INS31 UPD34 UPD42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS43 UPD42 UPD43 MOV21 UPD43 MOV21 UPD43 MOV21 UPD43 MOV21 UPD5 INS74 INS74 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS43 INS43 INS43 INS41 INS74 INS42 INS21 INS43 INS43 INS41 INS74 INS42 INS21 INS65 MOV43 MOV43 UPD43 UPD42 MOV43 UPD42 MOV78 MOV83 INS39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 MOV43 INS42 INS8 UPD83 MOV43 UPD42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS43 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS74 INS43 INS43 INS43 INS43 UPD66 UPD43 MOV43 INS43 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS42 INS42 INS42 INS43 INS43 INS7 INS66 INS66 UPD34 UPD42 UPD42 UPD43 UPD42 MOV21 MOV21 UPD42 MOV43 INS42 INS25 INS25 INS60 INS41 INS41 INS41 MOV41 MOV43 INS42 INS60 INS60 INS25 INS25 INS25 INS41 UPD42 INS42 UPD42 INS43 INS43 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 UPD42 UPD42 INS42 INS27 INS8 INS38 INS8 MOV43 MOV59 INS27 MOV27 INS27 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS14 UPD42 MOV43 MOV43 MOV43 MOV43 UPD42 MOV42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS41 INS36 INS41 UPD42 INS11 INS27 INS27 INS27 INS27 UPD42 INS33 INS42 INS34 INS42 INS42 INS40 INS42 INS33 MOV21 INS21 INS42 INS33 INS21 INS42 INS33 INS21 MOV43 INS42 INS42 UPD42 UPD42 INS9 INS62 INS9 INS43 INS42 INS42 INS40 INS42 INS40 INS42 INS33 INS42 INS33 INS7 INS7 INS7 INS42 INS43 UPD42 MOV42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL43 DEL43 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL43 DEL43 DEL43 DEL40 DEL40 DEL40 DEL40 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL14 DEL34 DEL42 DEL42 DEL32 DEL14 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL8 DEL25 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL43 DEL14 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL60 DEL42 DEL42 DEL57 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL13 DEL13 DEL42 DEL33 DEL27 DEL40 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL32 DEL40 DEL41 DEL8 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL40 DEL41 DEL8 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL40 DEL41 DEL8 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL40 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL40 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL25 DEL25 DEL25 DEL25 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL71