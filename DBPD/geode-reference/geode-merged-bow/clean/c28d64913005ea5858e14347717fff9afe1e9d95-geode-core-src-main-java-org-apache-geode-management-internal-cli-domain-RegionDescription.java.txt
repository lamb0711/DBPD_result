Merge branch 'release/1.4.0'

-import java.util.Iterator;
-import java.util.List;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.RegionShortcut;
- * 
- * 
-  private static final long serialVersionUID = 1L;
+  private static final long serialVersionUID = 6461449275798378332L;
-  private boolean haslocalDataStorage;
-  private boolean isReplicatedProxy = false;;
-
+  // COPY
-  private Map<String, String> cndRegionAttributes;
-  private Map<String, String> cndPartitionAttributes;
-  private Map<String, String> cndEvictionAttributes;
+  private Map<String, String> cndRegionAttributes = new HashMap<>();
+  private Map<String, String> cndPartitionAttributes = new HashMap<>();
+  private Map<String, String> cndEvictionAttributes = new HashMap<>();
-  public RegionDescription() {
-
-  }
+  public RegionDescription() {}
-   * 
-   * @param regionDescPerMember
-   * 
+   *
+   * @return boolean describing if description was successfully added
-      regionDescPerMemberMap = new HashMap<String, RegionDescriptionPerMember>();
+      regionDescPerMemberMap = new HashMap<>();
-      this.scope = regionDescPerMember.getScope();
-      this.dataPolicy = regionDescPerMember.getDataPolicy();
-      this.name = regionDescPerMember.getName();
-      isPartition = this.dataPolicy.withPartitioning();
-      isPersistent = this.dataPolicy.withPersistence();
-      isReplicate = this.dataPolicy.withReplication();
-      haslocalDataStorage = this.dataPolicy.withStorage();
-      isLocal = this.scope.isLocal();
+      scope = regionDescPerMember.getScope();
+      dataPolicy = regionDescPerMember.getDataPolicy();
+      name = regionDescPerMember.getName();
+      isPartition = dataPolicy.withPartitioning();
+      isPersistent = dataPolicy.withPersistence();
+      isReplicate = dataPolicy.withReplication();
+      isLocal = scope.isLocal();
-      // COPY
-      this.cndRegionAttributes = new HashMap<String, String>();
-      this.cndRegionAttributes.putAll(regionDescPerMember.getNonDefaultRegionAttributes());
-
-      this.cndPartitionAttributes = new HashMap<String, String>();
-      this.cndPartitionAttributes.putAll(regionDescPerMember.getNonDefaultPartitionAttributes());
-
-      this.cndEvictionAttributes = new HashMap<String, String>();
-      this.cndEvictionAttributes.putAll(regionDescPerMember.getNonDefaultEvictionAttributes());
-
-      if (this.dataPolicy.equals(DataPolicy.EMPTY) && this.scope.equals(Scope.DISTRIBUTED_ACK)) {
-        isReplicatedProxy = true;
-      }
-
-      // Don't have to show the scope for PR's
-
+      cndRegionAttributes.putAll(regionDescPerMember.getNonDefaultRegionAttributes());
+      cndPartitionAttributes.putAll(regionDescPerMember.getNonDefaultPartitionAttributes());
+      cndEvictionAttributes.putAll(regionDescPerMember.getNonDefaultEvictionAttributes());
-    } else {
-      if (this.scope.equals(regionDescPerMember.getScope())
-          && this.name.equals(regionDescPerMember.getName())
-          && this.dataPolicy.equals(regionDescPerMember.getDataPolicy())
-          && this.isAccessor == regionDescPerMember.isAccessor()) {
+    } else if (scope.equals(regionDescPerMember.getScope())
+        && name.equals(regionDescPerMember.getName())
+        && dataPolicy.equals(regionDescPerMember.getDataPolicy())
+        && isAccessor == regionDescPerMember.isAccessor()) {
-        regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(), regionDescPerMember);
-        findCommon(cndRegionAttributes, regionDescPerMember.getNonDefaultRegionAttributes());
-        findCommon(cndEvictionAttributes, regionDescPerMember.getNonDefaultEvictionAttributes());
-        findCommon(cndPartitionAttributes, regionDescPerMember.getNonDefaultPartitionAttributes());
+      regionDescPerMemberMap.put(regionDescPerMember.getHostingMember(), regionDescPerMember);
+      findCommon(cndRegionAttributes, regionDescPerMember.getNonDefaultRegionAttributes());
+      findCommon(cndEvictionAttributes, regionDescPerMember.getNonDefaultEvictionAttributes());
+      findCommon(cndPartitionAttributes, regionDescPerMember.getNonDefaultPartitionAttributes());
-        isAdded = true;
-      }
+      isAdded = true;
-  private void findCommon(Map<String, String> commonNdMap, Map<String, String> incomingNdMap) {
-    // First get the intersection of the both maps
+  /**
+   * Removes any key-value pairs from @commonValuesMap that do not agree with the respective
+   * key-value pairs of @additionalValuesMap
+   *
+   * @param commonValuesMap Common values map, whose key set will be reduced.
+   * @param additionalValuesMap Incoming values map, against which @commonValuesMap.
+   */
+  static void findCommon(Map<String, String> commonValuesMap,
+      Map<String, String> additionalValuesMap) {
-    Set<String> commonNdKeySet = commonNdMap.keySet();
-    Set<String> incomingNdKeySet = incomingNdMap.keySet();
+    Set<String> sharedKeySet = commonValuesMap.keySet();
+    sharedKeySet.retainAll(additionalValuesMap.keySet());
-    commonNdKeySet.retainAll(incomingNdKeySet);
-
-    // Now compare the values
-    // Take a copy of the set to avoid a CME
-    Iterator<String> commonKeysIter = (new HashSet<String>(commonNdKeySet)).iterator();
-
-    while (commonKeysIter.hasNext()) {
-      String attribute = commonKeysIter.next();
-      String commonNdValue = commonNdMap.get(attribute);
-      String incomingNdValue = incomingNdMap.get(attribute);
-
-      if (commonNdValue != null) {
-        if (!commonNdValue.equals(incomingNdValue)) {
-          // Remove it from the commonNdMa
-          commonNdMap.remove(attribute);
-        }
-      } else {
-        if (incomingNdValue != null) {
-          commonNdMap.remove(attribute);
-        }
+    for (String sharedKey : new HashSet<>(sharedKeySet)) {
+      String commonNdValue = commonValuesMap.get(sharedKey);
+      String incomingNdValue = additionalValuesMap.get(sharedKey);
+      if (commonNdValue != null && !commonNdValue.equals(incomingNdValue)
+          || commonNdValue == null && incomingNdValue != null) {
+        commonValuesMap.remove(sharedKey);
-  public boolean hasLocalStorage() {
-    return this.haslocalDataStorage;
-  }
-
-  public boolean isReplicatedProxy() {
-    return this.isReplicatedProxy;
-  }
-
-
-   * Get
-   * 
+   * Gets the common, non-default region attributes
+   *
-   * Gets the common non-default Eviction Attributes
-   * 
+   * Gets the common, non-default eviction attributes
+   *
-   * Gets the common non-default PartitionAttributes
-   * 
+   * Gets the common, non-default partition attributes
+   *
-
+  public boolean isEmpty() {
+    return regionDescPerMemberMap == null || regionDescPerMemberMap.isEmpty();
+  }

MOV23 MOV31 INS31 MOV8 INS29 UPD83 MOV83 MOV39 MOV42 MOV44 MOV44 MOV8 INS29 MOV29 UPD42 UPD34 UPD42 INS14 UPD42 INS14 UPD42 INS14 UPD65 MOV60 INS25 MOV41 INS65 INS65 INS65 UPD42 UPD42 INS70 INS65 MOV65 INS74 INS74 INS74 INS66 MOV27 INS8 MOV25 INS66 INS66 INS42 INS66 INS42 INS66 INS44 MOV14 INS8 INS66 UPD66 UPD66 INS27 MOV43 MOV43 MOV43 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 INS21 INS21 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD42 INS32 MOV43 INS42 UPD74 UPD42 MOV60 MOV60 MOV25 INS27 INS32 INS7 INS7 INS7 INS7 UPD42 INS42 UPD42 MOV42 MOV43 INS27 MOV8 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV27 MOV38 INS27 MOV27 INS42 INS33 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL40 DEL32 DEL52 DEL42 DEL22 DEL42 DEL40 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22