Merge branch 'release/1.8.0'

+import java.net.SocketException;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
+import org.apache.geode.internal.logging.LoggingExecutors;
+import org.apache.geode.internal.logging.LoggingThread;
-  protected static final int READ_TIMEOUT =
+  // no longer static so that tests can test this system property
+  private final int READ_TIMEOUT =
-  private PooledExecutorWithDMStats executor;
-  private final ThreadGroup threadGroup;
+  private ExecutorService executor;
-      ThreadGroup threadGroup, String threadName, InternalLocator internalLocator,
+      String threadName, InternalLocator internalLocator,
-    this.executor = createExecutor(poolHelper, threadGroup);
-    this.threadGroup = threadGroup;
+    this.executor = createExecutor(poolHelper);
-  private static PooledExecutorWithDMStats createExecutor(PoolStatHelper poolHelper,
-      final ThreadGroup threadGroup) {
-    ThreadFactory factory = new ThreadFactory() {
-      private final AtomicInteger threadNum = new AtomicInteger();
-
-      public Thread newThread(Runnable r) {
-        Thread thread = new Thread(threadGroup, r,
-            "locator request thread[" + threadNum.incrementAndGet() + "]");
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-
-    return new PooledExecutorWithDMStats(new SynchronousQueue(), MAX_POOL_SIZE, poolHelper,
-        factory, POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy(), null);
+  private static ExecutorService createExecutor(PoolStatHelper poolHelper) {
+    return LoggingExecutors.newThreadPoolWithSynchronousFeed("locator request thread ",
+        MAX_POOL_SIZE, poolHelper, POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy());
-    this.executor = createExecutor(this.poolHelper, this.threadGroup);
+    this.executor = createExecutor(this.poolHelper);
-      serverThread = new Thread(threadGroup, threadName) {
-        @Override
-        public void run() {
-          TcpServer.this.run();
-        }
-      };
-      serverThread.setDaemon(true);
+      serverThread = new LoggingThread(threadName, this::run);
-      } catch (EOFException ignore) {
+      } catch (EOFException | SocketException ignore) {

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD83 UPD43 UPD43 UPD42 UPD42 INS41 INS32 INS42 INS42 INS45 INS42 INS42 INS42 MOV14 UPD43 INS90 UPD42 INS52 INS42 INS84 MOV43 INS43 INS42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL33 DEL14 DEL41 DEL52 DEL42 DEL22 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL52 DEL42 DEL32 DEL21 DEL8 DEL31 DEL1 DEL42 DEL42 DEL9 DEL32 DEL21