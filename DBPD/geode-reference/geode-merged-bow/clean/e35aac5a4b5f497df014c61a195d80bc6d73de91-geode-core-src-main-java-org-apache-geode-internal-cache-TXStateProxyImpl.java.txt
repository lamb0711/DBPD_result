Merge branch 'release/1.5.0'

+  protected volatile TXStateInterface realDeal;
+
+  protected boolean inProgress = true;
+
+  protected InternalDistributedMember onBehalfOfClientMember = null;
+
+  private final InternalCache cache;
+
+  public TXStateProxyImpl(InternalCache cache, TXManagerImpl managerImpl, TXId id,
+      InternalDistributedMember clientMember) {
+    this.cache = cache;
+    this.txMgr = managerImpl;
+    this.txId = id;
+    this.isJTA = false;
+    this.onBehalfOfClientMember = clientMember;
+  }
+
+  public TXStateProxyImpl(InternalCache cache, TXManagerImpl managerImpl, TXId id, boolean isjta) {
+    this.cache = cache;
+    this.txMgr = managerImpl;
+    this.txId = id;
+    this.isJTA = isjta;
+  }
+
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  protected volatile TXStateInterface realDeal;
-
-  protected boolean inProgress = true;
-
-  protected InternalDistributedMember onBehalfOfClientMember = null;
-
-          this.realDeal = new ClientTXStateStub(this, target, r);
+          this.realDeal =
+              new ClientTXStateStub(r.getCache(), r.getDistributionManager(), this, target, r);
-  public TXStateProxyImpl(TXManagerImpl managerImpl, TXId id,
-      InternalDistributedMember clientMember) {
-    this.txMgr = managerImpl;
-    this.txId = id;
-    this.isJTA = false;
-    this.onBehalfOfClientMember = clientMember;
-  }
-
-  public TXStateProxyImpl(TXManagerImpl managerImpl, TXId id, boolean isjta) {
-    this.txMgr = managerImpl;
-    this.txId = id;
-    this.isJTA = isjta;
-  }
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-      getRealDeal(event.getKeyInfo(), event.getLocalRegion()).destroyExistingEntry(event,
-          cacheWrite, expectedOldValue);
+      getRealDeal(event.getKeyInfo(), event.getRegion()).destroyExistingEntry(event, cacheWrite,
+          expectedOldValue);
+  @Override
-  public Cache getCache() {
-    return txMgr.getCache();
+  @Override
+  public InternalCache getCache() {
+    return cache;
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-      getRealDeal(event.getKeyInfo(), event.getLocalRegion()).invalidateExistingEntry(event,
+      getRealDeal(event.getKeyInfo(), event.getRegion()).invalidateExistingEntry(event,
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    boolean resetTxState = this.realDeal == null
-        && (!region.canStoreDataLocally() || restoreSetOperationTransactionBehavior);
+    // for peer accessor, do not bootstrap transaction in the node as subsequent operations
+    // will fail as transaction should be on data node only
+    boolean resetTxState =
+        this.realDeal == null && (isPeerAccessor(region) || restoreSetOperationTransactionBehavior);
+  private boolean isPeerAccessor(LocalRegion region) {
+    if (region.hasServerProxy()) {
+      return false;
+    }
+    return !region.canStoreDataLocally();
+  }
+
+  @Override
+  @Override
+  @Override
+  @Override
-      boolean retVal = getRealDeal(event.getKeyInfo(), event.getLocalRegion()).putEntry(event,
-          ifNew, ifOld, expectedOldValue, requireOldValue, lastModified, overwriteDestroyed);
+      boolean retVal = getRealDeal(event.getKeyInfo(), event.getRegion()).putEntry(event, ifNew,
+          ifOld, expectedOldValue, requireOldValue, lastModified, overwriteDestroyed);
+  @Override
+  @Override
+  @Override
+  @Override
-    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getLocalRegion());
+    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getRegion());
+  @Override
+  @Override
-    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getLocalRegion());
+    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getRegion());
+  @Override
-    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getLocalRegion());
+    TXStateInterface tx = getRealDeal(event.getKeyInfo(), event.getRegion());
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override

MOV23 MOV23 MOV23 MOV31 MOV31 INS23 INS31 INS83 INS83 INS43 INS59 INS44 INS44 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 UPD43 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS44 INS83 INS39 INS42 MOV44 INS8 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS7 INS42 INS42 INS32 INS8 MOV38 MOV43 MOV43 INS22 INS42 INS22 INS42 INS42 INS42 INS41 INS52 INS42 INS52 INS42 INS9 MOV32 MOV32 MOV42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32