GEODE-3217: Reimplement gfsh query as a single-step command

(cherry picked from commit 564a94b)

-import static org.apache.geode.management.internal.cli.multistep.CLIMultiStepHelper.createBannerResult;
-import static org.apache.geode.management.internal.cli.multistep.CLIMultiStepHelper.createPageResult;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.GfshParser;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.cli.json.GfJsonArray;
-import org.apache.geode.management.internal.cli.json.GfJsonException;
-import org.apache.geode.management.internal.cli.json.GfJsonObject;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.CompositeResultData.SectionResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-import org.apache.geode.management.internal.cli.util.JsonUtil;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.json.JSONObject;
-
+import org.apache.commons.lang.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.json.JSONObject;
+
+import org.apache.geode.DataSerializer;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.cli.GfshParser;
+import org.apache.geode.management.internal.cli.i18n.CliStrings;
+import org.apache.geode.management.internal.cli.json.GfJsonException;
+import org.apache.geode.management.internal.cli.json.GfJsonObject;
+import org.apache.geode.management.internal.cli.result.CompositeResultData;
+import org.apache.geode.management.internal.cli.result.CompositeResultData.SectionResultData;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.util.JsonUtil;
+
-
-        if (this.limit != -1) {
+        if (this.limit > 0) {
-  /**
-   * This method returns a "Page" as dictated by arguments startCount and endCount. Returned result
-   * is not standard CommandResult and its consumed by Display Step
-   */
-  @SuppressWarnings({"rawtypes", "unchecked"})
-  public Result pageResult(int startCount, int endCount, String step) {
-    List<String> fields = new ArrayList<>();
-    List values = new ArrayList<String>();
-    fields.add(RESULT_FLAG);
-    values.add(operationCompletedSuccessfully);
-    fields.add(QUERY_PAGE_START);
-    values.add(startCount);
-    fields.add(QUERY_PAGE_END);
-    values.add(endCount);
-    if (errorString != null) {
-      fields.add("Message");
-      values.add(errorString);
-      return createBannerResult(fields, values, step);
-    } else {
-
-      if (infoString != null) {
-        fields.add("Message");
-        values.add(infoString);
-      }
-
-      if (selectResult != null) {
-        try {
-          TabularResultData table = ResultBuilder.createTabularResultData();
-          String[] headers;
-          Object[][] rows;
-          int rowCount = buildTable(table, startCount, endCount);
-          GfJsonArray array = table.getHeaders();
-          headers = new String[array.size()];
-          rows = new Object[rowCount][array.size()];
-          for (int i = 0; i < array.size(); i++) {
-            headers[i] = (String) array.get(i);
-            List<String> list = table.retrieveAllValues(headers[i]);
-            for (int j = 0; j < list.size(); j++) {
-              rows[j][i] = list.get(j);
-            }
-          }
-          fields.add(NUM_ROWS);
-          values.add((selectResult == null) ? 0 : selectResult.size());
-          if (queryTraceString != null) {
-            fields.add(QUERY_TRACE);
-            values.add(queryTraceString);
-          }
-          return createPageResult(fields, values, step, headers, rows);
-        } catch (GfJsonException e) {
-          String[] headers = new String[] {"Error"};
-          Object[][] rows = {{e.getMessage()}};
-          String fieldsArray[] = {QUERY_PAGE_START, QUERY_PAGE_END};
-          Object valuesArray[] = {startCount, endCount};
-          return createPageResult(fieldsArray, valuesArray, step, headers, rows);
-        }
-      } else {
-        return createBannerResult(fields, values, step);
-      }
-    }
-  }
-
+  public void setLimit(int limit) {
+    this.limit = limit;
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 INS39 INS42 INS8 UPD42 MOV21 INS22 INS42 INS52 INS42 UPD27 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL34 DEL38 DEL66 DEL66 DEL65 DEL29 DEL42 DEL45 DEL45 DEL4 DEL79 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL2 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL42 DEL42 DEL43 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL36 DEL34 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL4 DEL59 DEL60 DEL42 DEL43 DEL42 DEL85 DEL42 DEL42 DEL4 DEL59 DEL60 DEL42 DEL43 DEL42 DEL85 DEL42 DEL42 DEL4 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8