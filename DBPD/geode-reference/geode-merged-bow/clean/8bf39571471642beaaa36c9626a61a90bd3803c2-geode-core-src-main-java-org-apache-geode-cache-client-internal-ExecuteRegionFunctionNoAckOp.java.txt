Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Does a Execution of function on server region
- * It does not get the resul from the server (follows Fire&Forget approch)
+ * Does a Execution of function on server region It does not get the resul from the server (follows
+ * Fire&Forget approch)
+ * 
-  
+
-   * Does a execute Function on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a execute Function on a server using connections from the given pool to communicate with
+   * the server.
+   * 
-  public static void execute(ExecutablePool pool, String region,
-      Function function, ServerRegionFunctionExecutor serverRegionExecutor,
-      byte hasResult) {
-    AbstractOp op = new ExecuteRegionFunctionNoAckOpImpl(region, function,
-        serverRegionExecutor, hasResult);
+  public static void execute(ExecutablePool pool, String region, Function function,
+      ServerRegionFunctionExecutor serverRegionExecutor, byte hasResult) {
+    AbstractOp op =
+        new ExecuteRegionFunctionNoAckOpImpl(region, function, serverRegionExecutor, hasResult);
-        logger.debug("ExecuteRegionFunctionNoAckOp#execute : Sending Function Execution Message: {} to Server using pool: {}", op.getMessage(), pool);
+        logger.debug(
+            "ExecuteRegionFunctionNoAckOp#execute : Sending Function Execution Message: {} to Server using pool: {}",
+            op.getMessage(), pool);
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        logger.debug("ExecuteRegionFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message: {} to server using pool: {}", op.getMessage(), pool, ex);
+        logger.debug(
+            "ExecuteRegionFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message: {} to server using pool: {}",
+            op.getMessage(), pool, ex);
-        throw new FunctionException(
-            "Unexpected exception during function execution:", ex);
+        throw new FunctionException("Unexpected exception during function execution:", ex);
-  public static void execute(ExecutablePool pool, String region,
-      String functionId, ServerRegionFunctionExecutor serverRegionExecutor,
-      byte hasResult, boolean isHA, boolean optimizeForWrite) {
-    AbstractOp op = new ExecuteRegionFunctionNoAckOpImpl(region, functionId,
-        serverRegionExecutor, hasResult, isHA, optimizeForWrite);
+  public static void execute(ExecutablePool pool, String region, String functionId,
+      ServerRegionFunctionExecutor serverRegionExecutor, byte hasResult, boolean isHA,
+      boolean optimizeForWrite) {
+    AbstractOp op = new ExecuteRegionFunctionNoAckOpImpl(region, functionId, serverRegionExecutor,
+        hasResult, isHA, optimizeForWrite);
-        logger.debug("ExecuteRegionFunctionNoAckOp#execute : Sending Function Execution Message: {} to Server using pool: {}", op.getMessage(), pool);
+        logger.debug(
+            "ExecuteRegionFunctionNoAckOp#execute : Sending Function Execution Message: {} to Server using pool: {}",
+            op.getMessage(), pool);
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        logger.debug("ExecuteRegionFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message: {} to server using pool: {}", op.getMessage(), pool, ex);
+        logger.debug(
+            "ExecuteRegionFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message: {} to server using pool: {}",
+            op.getMessage(), pool, ex);
-        throw new FunctionException(
-            "Unexpected exception during function execution:", ex);
+        throw new FunctionException("Unexpected exception during function execution:", ex);
-  
+
-    private final boolean executeOnBucketSet ;
-    
+    private final boolean executeOnBucketSet;
+
-      super(MessageType.EXECUTE_REGION_FUNCTION, 8 + serverRegionExecutor
-          .getFilter().size());
+      super(MessageType.EXECUTE_REGION_FUNCTION, 8 + serverRegionExecutor.getFilter().size());
-      byte functionState = AbstractExecution.getFunctionState(function.isHA(),
-          function.hasResult(), function.optimizeForWrite());
+      byte functionState = AbstractExecution.getFunctionState(function.isHA(), function.hasResult(),
+          function.optimizeForWrite());
-      getMessage().addBytesPart(new byte[]{functionState});
+      getMessage().addBytesPart(new byte[] {functionState});
-      if(serverRegionExecutor.isFnSerializationReqd()){
-        getMessage().addStringOrObjPart(function); 
-      }
-      else{
-        getMessage().addStringOrObjPart(function.getId()); 
+      if (serverRegionExecutor.isFnSerializationReqd()) {
+        getMessage().addStringOrObjPart(function);
+      } else {
+        getMessage().addStringOrObjPart(function.getId());
-      
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag(); 
-//      byte flags = this.executeOnBucketSet ?
-//          (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
-//      flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
+
+      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
+      // byte flags = this.executeOnBucketSet ?
+      // (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
+      // flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
-      getMessage().addBytesPart(new byte[]{flags});
+      getMessage().addBytesPart(new byte[] {flags});
-        ServerRegionFunctionExecutor serverRegionExecutor, byte hasResult, boolean isHA, boolean optimizeForWrite) {
-      super(MessageType.EXECUTE_REGION_FUNCTION, 8 + serverRegionExecutor
-          .getFilter().size());
+        ServerRegionFunctionExecutor serverRegionExecutor, byte hasResult, boolean isHA,
+        boolean optimizeForWrite) {
+      super(MessageType.EXECUTE_REGION_FUNCTION, 8 + serverRegionExecutor.getFilter().size());
-          hasResult==(byte)1?true:false, optimizeForWrite);
-      
+          hasResult == (byte) 1 ? true : false, optimizeForWrite);
+
-      getMessage().addBytesPart(new byte[]{functionState});
+      getMessage().addBytesPart(new byte[] {functionState});
-      getMessage().addStringOrObjPart(functionId); 
+      getMessage().addStringOrObjPart(functionId);
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag(); 
-//      byte flags = this.executeOnBucketSet ?
-//          (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
-//      flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
+      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
+      // byte flags = this.executeOnBucketSet ?
+      // (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
+      // flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
-      getMessage().addBytesPart(new byte[]{flags});
+      getMessage().addBytesPart(new byte[] {flags});
-    
-    @Override  
+
+    @Override
-      return null;
-    }
-      else {
+        return null;
+      } else {
-          Throwable t = (Throwable)part.getObject();
-          logger.warn(LocalizedMessage.create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION), t);
-        }
-        else if (isErrorResponse(msgType)) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION));
-        }
-        else {
-          throw new InternalGemFireError("Unexpected message type "
-              + MessageType.getString(msgType));
+          Throwable t = (Throwable) part.getObject();
+          logger.warn(LocalizedMessage
+              .create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION), t);
+        } else if (isErrorResponse(msgType)) {
+          logger.warn(LocalizedMessage
+              .create(LocalizedStrings.EXECUTE_FUNCTION_NO_HAS_RESULT_RECEIVED_EXCEPTION));
+        } else {
+          throw new InternalGemFireError(
+              "Unexpected message type " + MessageType.getString(msgType));
-    
+
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override
-    @Override  
+    @Override

UPD66 UPD66 UPD66 UPD66