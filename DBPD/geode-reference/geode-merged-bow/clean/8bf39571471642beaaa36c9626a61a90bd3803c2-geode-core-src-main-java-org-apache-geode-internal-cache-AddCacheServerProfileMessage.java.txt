Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * OperationMessage synchronously propagates a change in the profile to
- * another member.  It is a serial message so that there is no chance
- * of out-of-order execution.
+ * OperationMessage synchronously propagates a change in the profile to another member. It is a
+ * serial message so that there is no chance of out-of-order execution.
-public class AddCacheServerProfileMessage extends SerialDistributionMessage implements MessageWithReply {
+public class AddCacheServerProfileMessage extends SerialDistributionMessage
+    implements MessageWithReply {
-  
+
-    int oldLevel =
-      LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
+    int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
-      if (cache != null && !cache.isClosed()) {  // will be null if not initialized
+      if (cache != null && !cache.isClosed()) { // will be null if not initialized
-  
+
-    
-    for (DistributedRegion r: this.getDistributedRegions(cache)) {
-      CacheDistributionAdvisor cda = (CacheDistributionAdvisor)r.getDistributionAdvisor();
+
+    for (DistributedRegion r : this.getDistributedRegions(cache)) {
+      CacheDistributionAdvisor cda = (CacheDistributionAdvisor) r.getDistributionAdvisor();
-        (CacheDistributionAdvisor.CacheProfile)cda.getProfile(getSender());
-      if (cp != null){
+          (CacheDistributionAdvisor.CacheProfile) cda.getProfile(getSender());
+      if (cp != null) {
-          logger.debug("Setting hasCacheServer flag on region \"{}\" for {}", r.getFullPath(), getSender());
+          logger.debug("Setting hasCacheServer flag on region \"{}\" for {}", r.getFullPath(),
+              getSender());
-    for (PartitionedRegion r: this.getPartitionedRegions(cache)) {
-      CacheDistributionAdvisor cda = (CacheDistributionAdvisor)r.getDistributionAdvisor();
+    for (PartitionedRegion r : this.getPartitionedRegions(cache)) {
+      CacheDistributionAdvisor cda = (CacheDistributionAdvisor) r.getDistributionAdvisor();
-        (CacheDistributionAdvisor.CacheProfile)cda.getProfile(getSender());
-      if (cp != null){
+          (CacheDistributionAdvisor.CacheProfile) cda.getProfile(getSender());
+      if (cp != null) {
-          logger.debug("Setting hasCacheServer flag on region \"{}\" for {}", r.getFullPath(), getSender());
+          logger.debug("Setting hasCacheServer flag on region \"{}\" for {}", r.getFullPath(),
+              getSender());
-  
+
-    int oldLevel =
-      LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
+    int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);
-      for (LocalRegion r: this.getAllRegions(cache)) {
+      for (LocalRegion r : this.getAllRegions(cache)) {
-      for (PartitionedRegion r: this.getPartitionedRegions(cache)) {
+      for (PartitionedRegion r : this.getPartitionedRegions(cache)) {
-  
+
-  
+
-    for (LocalRegion r: gfc.getAllRegions()) {
+    for (LocalRegion r : gfc.getAllRegions()) {
-        result.add((DistributedRegion)r);
+        result.add((DistributedRegion) r);
-  public AddCacheServerProfileMessage() {
-  }
+  public AddCacheServerProfileMessage() {}

UPD66 UPD66 DEL66