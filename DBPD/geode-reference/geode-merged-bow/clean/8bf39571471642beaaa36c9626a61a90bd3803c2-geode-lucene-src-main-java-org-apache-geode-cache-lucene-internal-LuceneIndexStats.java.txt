Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    statsType = f.createType(
-      statsTypeName,
-      statsTypeDescription,
-      new StatisticDescriptor[] {
-        f.createIntCounter("queryExecutions", "Number of lucene queries executed on this member", "operations"),
-        f.createLongCounter("queryExecutionTime", "Amount of time spent executing lucene queries", "nanoseconds"),
-        f.createIntGauge("queryExecutionsInProgress", "Number of query executions currently in progress", "operations"),
-        f.createLongCounter("queryExecutionTotalHits", "Total number of documents returned by query executions", "entries"),
-        f.createIntCounter("updates", "Number of lucene index documents added/removed on this member", "operations"),
-        f.createLongCounter("updateTime", "Amount of time spent adding or removing documents from the index", "nanoseconds"),
+    statsType = f.createType(statsTypeName, statsTypeDescription, new StatisticDescriptor[] {
+        f.createIntCounter("queryExecutions", "Number of lucene queries executed on this member",
+            "operations"),
+        f.createLongCounter("queryExecutionTime", "Amount of time spent executing lucene queries",
+            "nanoseconds"),
+        f.createIntGauge("queryExecutionsInProgress",
+            "Number of query executions currently in progress", "operations"),
+        f.createLongCounter("queryExecutionTotalHits",
+            "Total number of documents returned by query executions", "entries"),
+        f.createIntCounter("updates",
+            "Number of lucene index documents added/removed on this member", "operations"),
+        f.createLongCounter("updateTime",
+            "Amount of time spent adding or removing documents from the index", "nanoseconds"),
-        f.createIntCounter("commits", "Number of lucene index commits on this member", "operations"),
-        f.createLongCounter("commitTime", "Amount of time spent in lucene index commits", "nanoseconds"),
-        f.createIntGauge("commitsInProgress", "Number of lucene index commits in progress", "operations"),
-        f.createIntGauge("documents", "Number of documents in the index", "documents"),
-      }
-    );
+        f.createIntCounter("commits", "Number of lucene index commits on this member",
+            "operations"),
+        f.createLongCounter("commitTime", "Amount of time spent in lucene index commits",
+            "nanoseconds"),
+        f.createIntGauge("commitsInProgress", "Number of lucene index commits in progress",
+            "operations"),
+        f.createIntGauge("documents", "Number of documents in the index", "documents"),});
+
-    stats.incLong(queryExecutionTimeId, getStatTime()-start);
+    stats.incLong(queryExecutionTimeId, getStatTime() - start);
+
-    stats.incLong(updateTimeId, getStatTime()-start);
+    stats.incLong(updateTimeId, getStatTime() - start);
+
-    stats.incLong(commitTimeId, getStatTime()-start);
+    stats.incLong(commitTimeId, getStatTime() - start);
-    return this.documentsSuppliers.stream()
-      .mapToInt(IntSupplier::getAsInt)
-      .sum();
+    return this.documentsSuppliers.stream().mapToInt(IntSupplier::getAsInt).sum();

