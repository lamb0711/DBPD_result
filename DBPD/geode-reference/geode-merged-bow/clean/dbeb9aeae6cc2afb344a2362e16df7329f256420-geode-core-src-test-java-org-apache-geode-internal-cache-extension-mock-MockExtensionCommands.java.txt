Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.List;
-import java.util.Set;
-
-import org.apache.geode.management.cli.CliMetaData;
+import org.apache.geode.management.internal.cli.commands.AbstractCommandsSupport;
-import org.apache.geode.management.internal.configuration.SharedConfigurationWriter;
-
-import org.springframework.shell.core.CommandMarker;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+
-public class MockExtensionCommands implements CommandMarker {
+public class MockExtensionCommands extends AbstractCommandsSupport {
-   * @param regionName
-   *          {@link Region} name on which to create {@link MockRegionExtension}
-   *          .
-   * @param value
-   *          {@link String} value to set on
-   *          {@link MockRegionExtension#setValue(String)}.
+   * @param regionName {@link Region} name on which to create {@link MockRegionExtension} .
+   * @param value {@link String} value to set on {@link MockRegionExtension#setValue(String)}.
-  @CliMetaData(writesToSharedConfiguration = true)
-  public Result createMockRegionExtension(@CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName,
+  public Result createMockRegionExtension(
+      @CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName,
-    return executeFunctionOnAllMembersTabulateResultPersist(CreateMockRegionExtensionFunction.INSTANCE, true,
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        CreateMockRegionExtensionFunction.INSTANCE, true,
-   * @param regionName
-   *          {@link Region} name on which to create {@link MockRegionExtension}
-   *          .
-   * @param value
-   *          {@link String} value to set on
-   *          {@link MockRegionExtension#setValue(String)}.
+   * @param regionName {@link Region} name on which to create {@link MockRegionExtension} .
+   * @param value {@link String} value to set on {@link MockRegionExtension#setValue(String)}.
-  @CliMetaData(writesToSharedConfiguration = true)
-  public Result alterMockRegionExtension(@CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName,
+  public Result alterMockRegionExtension(
+      @CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName,
-    return executeFunctionOnAllMembersTabulateResultPersist(AlterMockRegionExtensionFunction.INSTANCE, true,
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        AlterMockRegionExtensionFunction.INSTANCE, true,
-   * Destroy the {@link MockRegionExtension} on the given
-   * <code>regionName</code>.
+   * Destroy the {@link MockRegionExtension} on the given <code>regionName</code>.
-   * @param regionName
-   *          {@link Region} name on which to create {@link MockRegionExtension}
-   *          .
+   * @param regionName {@link Region} name on which to create {@link MockRegionExtension} .
-  @CliMetaData(writesToSharedConfiguration = true)
-  public Result destroyMockRegionExtension(@CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName) {
-    return executeFunctionOnAllMembersTabulateResultPersist(DestroyMockRegionExtensionFunction.INSTANCE, true,
+  public Result destroyMockRegionExtension(
+      @CliOption(key = OPTION_REGION_NAME, mandatory = true) final String regionName) {
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        DestroyMockRegionExtensionFunction.INSTANCE, true,
-   * @param value
-   *          {@link String} value to set on
-   *          {@link MockCacheExtension#setValue(String)}.
+   * @param value {@link String} value to set on {@link MockCacheExtension#setValue(String)}.
-  @CliMetaData(writesToSharedConfiguration = true)
-  public Result createMockCacheExtension(@CliOption(key = OPTION_VALUE, mandatory = true) final String value) {
-    return executeFunctionOnAllMembersTabulateResultPersist(CreateMockCacheExtensionFunction.INSTANCE, true, CreateMockCacheExtensionFunction.toArgs(value));
+  public Result createMockCacheExtension(
+      @CliOption(key = OPTION_VALUE, mandatory = true) final String value) {
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        CreateMockCacheExtensionFunction.INSTANCE, true,
+        CreateMockCacheExtensionFunction.toArgs(value));
-   * @param value
-   *          {@link String} value to set on
-   *          {@link MockCacheExtension#setValue(String)}.
+   * @param value {@link String} value to set on {@link MockCacheExtension#setValue(String)}.
-  @CliMetaData(writesToSharedConfiguration = true)
-  public Result alterMockCacheExtension(@CliOption(key = OPTION_VALUE, mandatory = true) final String value) {
-    return executeFunctionOnAllMembersTabulateResultPersist(AlterMockCacheExtensionFunction.INSTANCE, true, AlterMockCacheExtensionFunction.toArgs(value));
+  public Result alterMockCacheExtension(
+      @CliOption(key = OPTION_VALUE, mandatory = true) final String value) {
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        AlterMockCacheExtensionFunction.INSTANCE, true,
+        AlterMockCacheExtensionFunction.toArgs(value));
-  @CliMetaData(writesToSharedConfiguration = true)
-    return executeFunctionOnAllMembersTabulateResultPersist(DestroyMockCacheExtensionFunction.INSTANCE, false);
+    return executeFunctionOnAllMembersTabulateResultPersist(
+        DestroyMockCacheExtensionFunction.INSTANCE, false);
-   * Call <code>function</code> with <code>args</code> on all members, tabulate
-   * results and persist shared config if changed.
+   * Call <code>function</code> with <code>args</code> on all members, tabulate results and persist
+   * shared config if changed.
-   * @param function
-   *          {@link Function} to execute.
-   * @param addXmlElement
-   *          If <code>true</code> then add result {@link XmlEntity} to the
-   *          config, otherwise delete it.
-   * @param args
-   *          Arguments to pass to function.
+   * @param function {@link Function} to execute.
+   * @param addXmlElement If <code>true</code> then add result {@link XmlEntity} to the config,
+   *        otherwise delete it.
+   * @param args Arguments to pass to function.
-  protected Result executeFunctionOnAllMembersTabulateResultPersist(final Function function, final boolean addXmlElement, final Object... args) {
+  protected Result executeFunctionOnAllMembersTabulateResultPersist(final Function function,
+      final boolean addXmlElement, final Object... args) {
-    final ResultCollector<CliFunctionResult, List<CliFunctionResult>> resultCollector = (ResultCollector<CliFunctionResult, List<CliFunctionResult>>) CliUtil
-        .executeFunction(function, args, members);
-    final List<CliFunctionResult> functionResults = (List<CliFunctionResult>) resultCollector.getResult();
+    final ResultCollector<CliFunctionResult, List<CliFunctionResult>> resultCollector =
+        (ResultCollector<CliFunctionResult, List<CliFunctionResult>>) CliUtil
+            .executeFunction(function, args, members);
+    final List<CliFunctionResult> functionResults =
+        (List<CliFunctionResult>) resultCollector.getResult();
-    XmlEntity xmlEntity = null;
+    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
-        xmlEntity = functionResult.getXmlEntity();
+        xmlEntity.set(functionResult.getXmlEntity());
-    if (null != xmlEntity) {
+    if (null != xmlEntity.get()) {
-        result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, null));
+        persistClusterConfiguration(result,
+            () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), null));
-        result.setCommandPersisted((new SharedConfigurationWriter()).deleteXmlEntity(xmlEntity, null));
+        persistClusterConfiguration(result,
+            () -> getSharedConfiguration().deleteXmlEntity(xmlEntity.get(), null));
-}
+}

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS74 INS43 MOV43 INS14 INS32 INS42 INS74 INS42 INS42 INS43 INS42 INS32 INS42 INS42 MOV32 INS42 INS86 INS42 INS86 INS32 INS32 INS32 MOV42 INS32 MOV33 INS32 MOV42 INS32 MOV33 INS42 MOV42 INS42 INS42 MOV42 INS42 DEL40 DEL26 DEL42 DEL42 DEL9 DEL80 DEL77 DEL42 DEL42 DEL9 DEL80 DEL77 DEL66 DEL42 DEL42 DEL9 DEL80 DEL77 DEL42 DEL42 DEL9 DEL80 DEL77 DEL42 DEL42 DEL9 DEL80 DEL77 DEL42 DEL42 DEL9 DEL80 DEL77 DEL33 DEL42 DEL7 DEL42 DEL42 DEL42 DEL43 DEL14 DEL36 DEL32 DEL42 DEL42 DEL43 DEL14 DEL36 DEL32