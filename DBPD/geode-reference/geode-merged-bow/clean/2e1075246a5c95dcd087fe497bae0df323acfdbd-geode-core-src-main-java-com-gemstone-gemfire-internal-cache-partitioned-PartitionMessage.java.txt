Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.internal.cache.TXId;
- * @since 5.0
+ * @since GemFire 5.0
-  public final InternalDistributedMember getTXOriginatorClient() {
+  public InternalDistributedMember getTXOriginatorClient() {
-  final public boolean checkCacheClosing(DistributionManager dm) {
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+  public boolean checkCacheClosing(DistributionManager dm) {
+    GemFireCacheImpl cache = getGemFireCacheImpl();
-  final public boolean checkDSClosing(DistributionManager dm) {
+  public boolean checkDSClosing(DistributionManager dm) {
+  PartitionedRegion getPartitionedRegion() throws PRLocallyDestroyedException {
+    return PartitionedRegion.getPRFromId(this.regionId);
+  }
+  
+  GemFireCacheImpl getGemFireCacheImpl() {
+    return GemFireCacheImpl.getInstance();
+  }
+
+  TXManagerImpl getTXManagerImpl(GemFireCacheImpl cache) {
+    return cache.getTxManager();
+  }
+  
+  long getStartPartitionMessageProcessingTime(PartitionedRegion pr) {
+    return pr.getPrStats().startPartitionMessageProcessing();
+  }
+
+  
-      pr = PartitionedRegion.getPRFromId(this.regionId);
+      pr = getPartitionedRegion();
-        startTime = pr.getPrStats().startPartitionMessageProcessing();
+        startTime = getStartPartitionMessageProcessingTime(pr);
-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+      GemFireCacheImpl cache = getGemFireCacheImpl();
-      TXManagerImpl txMgr = cache.getTxManager();
-      TXStateProxy tx = null;
-      try {
-        tx = txMgr.masqueradeAs(this);
-        sendReply = operateOnPartitionedRegion(dm, pr, startTime);
-      } finally {
-        txMgr.unmasquerade(tx);
+      TXManagerImpl txMgr = getTXManagerImpl(cache);
+      TXStateProxy tx = txMgr.masqueradeAs(this);
+      if (tx == null) {
+        sendReply = operateOnPartitionedRegion(dm, pr, startTime);        
+      } else {
+        try {
+          if (txMgr.isClosed()) {
+            // NO DISTRIBUTED MESSAGING CAN BE DONE HERE!
+            sendReply = false;
+          } else if (tx.isInProgress()) {
+            sendReply = operateOnPartitionedRegion(dm, pr, startTime); 
+            tx.updateProxyServer(this.getSender());
+          }  
+        } finally {
+          txMgr.unmasquerade(tx);
+        }
-    //Set sqlfAsyncListenerRecepients = r.getRegionAdvisor().adviseSqlfAsyncEventListenerHub();
-    //sqlfAsyncListenerRecepients.retainAll(adjunctRecipients);
-    //Now remove those adjunct recepients which are present in SqlfAsyncListenerRecepients
-    //adjunctRecipients.removeAll(sqlfAsyncListenerRecepients);
-    /*
-    //Now distribute message with old value to Sqlf Hub nodes
-    if(!sqlfAsyncListenerRecepients.isEmpty()) {
-      //System.out.println("Asif1: sqlf hub  recepients ="+sqlfHubRecepients);
-      resetRecipients();
-      setRecipients(sqlfAsyncListenerRecepients);
-      event.applyDelta(true);
-      Set failures2 = r.getDistributionManager().putOutgoing(this);
-      if(failures1 == null) {
-        failures1 = failures2;
-      }else if(failures2 != null) {
-        failures1.addAll(failures2);
-      }
-    }*/
-   * @since 5.5
+   * @since GemFire 5.5
-   * @since 5.0
+   * @since GemFire 5.0

INS26 INS40 INS31 INS31 INS31 INS31 INS43 INS42 INS43 INS8 INS43 INS42 INS8 MOV43 INS42 INS44 INS8 INS39 INS42 INS44 MOV8 UPD66 INS42 INS42 INS41 INS42 INS41 INS43 INS42 INS41 INS43 INS42 INS41 MOV32 MOV32 INS42 MOV32 INS42 MOV32 UPD66 UPD66 INS32 INS25 INS42 INS8 INS43 INS27 MOV8 INS8 INS32 INS21 INS42 INS32 MOV32 INS42 INS33 MOV54 INS42 INS7 UPD42 INS42 INS42 INS8 INS42 INS32 INS25 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS21 INS32 INS8 INS7 INS42 INS42 INS21 INS21 INS42 INS9 INS7 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 DEL83 DEL83 DEL83 DEL42 DEL7 DEL21 DEL42 DEL33 DEL42 DEL7 DEL21