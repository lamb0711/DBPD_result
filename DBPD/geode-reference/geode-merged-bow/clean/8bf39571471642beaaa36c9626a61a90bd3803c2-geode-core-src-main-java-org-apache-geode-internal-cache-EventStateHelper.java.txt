Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * TODO - Store the event state map in DataSerializable object
- * that keeps the map in this compressed format in memory.
+ * TODO - Store the event state map in DataSerializable object that keeps the map in this compressed
+ * format in memory.
-   * Post 7.1, if changes are made to this method make sure that it is backwards
-   * compatible by creating toDataPreXX methods. Also make sure that the callers
-   * to this method are backwards compatible by creating toDataPreXX methods for
-   * them even if they are not changed. <br>
+   * Post 7.1, if changes are made to this method make sure that it is backwards compatible by
+   * creating toDataPreXX methods. Also make sure that the callers to this method are backwards
+   * compatible by creating toDataPreXX methods for them even if they are not changed. <br>
-    //For HARegionQueues, the event state map is uses different values
-    //than a regular region :(
-    InternalDistributedMember myId = InternalDistributedSystem.getAnyInstance().getDistributedMember();
-    Map<MemberIdentifier, Map<ThreadIdentifier, Object>> groupedThreadIds = groupThreadIds(eventState);
+    // For HARegionQueues, the event state map is uses different values
+    // than a regular region :(
+    InternalDistributedMember myId =
+        InternalDistributedSystem.getAnyInstance().getDistributedMember();
+    Map<MemberIdentifier, Map<ThreadIdentifier, Object>> groupedThreadIds =
+        groupThreadIds(eventState);
-    
+
-    
-    for(MemberIdentifier memberId : groupedThreadIds.keySet()) {
+
+    for (MemberIdentifier memberId : groupedThreadIds.keySet()) {
-    for (MemberIdentifier memberId: orderedIds) {
+    for (MemberIdentifier memberId : orderedIds) {
-    for(Map.Entry<MemberIdentifier, Map<ThreadIdentifier, Object>> memberIdEntry : groupedThreadIds.entrySet()) {
+    for (Map.Entry<MemberIdentifier, Map<ThreadIdentifier, Object>> memberIdEntry : groupedThreadIds
+        .entrySet()) {
-      for(Object next : threadIdMap.entrySet()) {
+      for (Object next : threadIdMap.entrySet()) {
-        if(isHARegion) {
+        if (isHARegion) {
-    
+
-  
+
-   * Post 7.1, if changes are made to this method make sure that it is backwards
-   * compatible by creating fromDataPreXX methods. Also make sure that the callers
-   * to this method are backwards compatible by creating fromDataPreXX methods for
-   * them even if they are not changed. <br>
+   * Post 7.1, if changes are made to this method make sure that it is backwards compatible by
+   * creating fromDataPreXX methods. Also make sure that the callers to this method are backwards
+   * compatible by creating fromDataPreXX methods for them even if they are not changed. <br>
-  public static Map fromData(DataInput dip, boolean isHARegion) throws IOException, ClassNotFoundException {
-    
+  public static Map fromData(DataInput dip, boolean isHARegion)
+      throws IOException, ClassNotFoundException {
+
-    
+
-    for (int i=0; i<numIds; i++) {
+    for (int i = 0; i < numIds; i++) {
-    
+
-    for(int i = 0; i < size; i++) {
+    for (int i = 0; i < size; i++) {
-      
-      for(int j =0; j < subMapSize; j++) {
+
+      for (int j = 0; j < subMapSize; j++) {
-        if(isHARegion) {
+        if (isHARegion) {
-  
+
-    Map<MemberIdentifier, Map<ThreadIdentifier, Object>> results 
-    = new HashMap<MemberIdentifier, Map<ThreadIdentifier, Object>>();
-    for(Object next : eventState.entrySet()) {
+    Map<MemberIdentifier, Map<ThreadIdentifier, Object>> results =
+        new HashMap<MemberIdentifier, Map<ThreadIdentifier, Object>>();
+    for (Object next : eventState.entrySet()) {
-      MemberIdentifier memberId  = new MemberIdentifier(key.getMembershipID());
+      MemberIdentifier memberId = new MemberIdentifier(key.getMembershipID());
-      if(subMap == null) {
+      if (subMap == null) {
-    
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66