GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
+import static java.lang.System.lineSeparator;
+
+import org.apache.geode.internal.util.TransformUtils.CollectionTransformer;
+import org.apache.geode.internal.util.Transformer;
+
+
-  protected volatile boolean online;
+  private volatile boolean online;
+  private final StartupStatus startupStatus;
+  private final Transformer<PersistentMemberID, String> persistentMemberIdTransformer;
+  private final CollectionTransformer<PersistentMemberID, String> collectionTransformer;
+
-        diskRegionStats, persistentMemberManager, new PersistentStateQueryMessageSenderFactory());
+        diskRegionStats, persistentMemberManager, new StartupStatus(),
+        TransformUtils.persistentMemberIdToLogEntryTransformer,
+        TransformUtils::transform,
+        new PersistentStateQueryMessageSenderFactory());
+      StartupStatus startupStatus,
+      Transformer<PersistentMemberID, String> persistentMemberIdTransformer,
+      CollectionTransformer<PersistentMemberID, String> collectionTransformer,
-    profileChangeListener = new ProfileChangeListener();
+    this.startupStatus = startupStatus;
+    this.persistentMemberIdTransformer = persistentMemberIdTransformer;
+    this.collectionTransformer = collectionTransformer;
+    profileChangeListener = new ProfileChangeListener();
+
-      logger.info("Region {} crashed during a region destroy. Finishing the destroy.",
-          regionPath);
+      logger.info("Region {} crashed during a region destroy. Finishing the destroy.", regionPath);
-
-          TransformUtils.transform(members, onlineMembers,
-              TransformUtils.persistentMemberIdToLogEntryTransformer);
+          collectionTransformer.transform(members, onlineMembers, persistentMemberIdTransformer);
-              new Object[] {regionPath,
-                  TransformUtils.persistentMemberIdToLogEntryTransformer
-                      .transform(persistentID),
-                  onlineMembers});
+              regionPath, persistentMemberIdTransformer.transform(persistentID), onlineMembers);
-
-        // Fix for 41100 - If this is an atomic bucket creation, don't mark our peers, which are
-        // concurrently initializing, as offline they have the exact same data as we do (none), so
-        // we are not technically "newer," and this avoids a race where both members can think the
-        // other is offline ("older").
+        // If this is an atomic bucket creation, don't mark our peers, which are concurrently
+        // initializing, as offline they have the exact same data as we do (none), so we are not
+        // technically "newer," and this avoids a race where both members can think the other is
+        // offline ("older").
-      // Another fix for 41100 - Don't mark equal members as offline if that are currently running.
-      // We don't have newer data than these members so this is safe, and it it avoids a race where
-      // we mark them offline at this point, and then later they mark us as offline.
+      // Don't mark equal members as offline if that are currently running. We don't have newer data
+      // than these members so this is safe, and it it avoids a race where we mark them offline at
+      // this point, and then later they mark us as offline.
+   * <p>
-   *
-   * Fix for bug 44045.
-
-        .getStateOnPeers()
-        .entrySet()) {
+        .getStateOnPeers().entrySet()) {
-      final PersistentMemberID myId = getPersistentID();
+      PersistentMemberID myId = getPersistentID();
+  @VisibleForTesting
-    } else {
-      return null;
+    return null;
-
+  @VisibleForTesting
-
-
-            initializingID,
-            diskStoreID);
+            initializingID, diskStoreID);
-      TransformUtils.transform(offlineMembersWaitingFor, membersToWaitForLogEntries,
-          TransformUtils.persistentMemberIdToLogEntryTransformer);
+      collectionTransformer.transform(offlineMembersWaitingFor, membersToWaitForLogEntries,
+          persistentMemberIdTransformer);
-      StartupStatus.startup(
+      startupStatus.startup(
-              "Region %s has potentially stale data. It is waiting for another member to recover the latest data.My persistent id:%sMembers with potentially new data:%sUse the gfsh show missing-disk-stores command to see all disk stores that are being waited on by other members.",
+              "Region %s has potentially stale data. It is waiting for another member to recover the latest data.%sMy persistent id:%s%s%sMembers with potentially new data:%s%s%sUse the gfsh show missing-disk-stores command to see all disk stores that are being waited on by other members.",
-              TransformUtils.persistentMemberIdToLogEntryTransformer.transform(getPersistentID()),
-              membersToWaitForLogEntries));
+              lineSeparator(),
+              lineSeparator(),
+              persistentMemberIdTransformer.transform(getPersistentID()),
+              lineSeparator(),
+              lineSeparator(),
+              membersToWaitForLogEntries,
+              lineSeparator()));
-      TransformUtils.transform(allMembersWaitingFor, membersToWaitForLogEntries,
-          TransformUtils.persistentMemberIdToLogEntryTransformer);
+      collectionTransformer.transform(allMembersWaitingFor, membersToWaitForLogEntries,
+          persistentMemberIdTransformer);
-      StartupStatus.startup(
+      startupStatus.startup(
-              "Region %s has potentially stale data. It is waiting for another online member to recover the latest data.My persistent id:%sMembers with potentially new data:%sUse the gfsh show missing-disk-stores command to see all disk stores that are being waited on by other members.",
+              "Region %s has potentially stale data. It is waiting for another online member to recover the latest data.%sMy persistent id:%s%s%sMembers with potentially new data:%s%s%sUse the gfsh show missing-disk-stores command to see all disk stores that are being waited on by other members.",
-              TransformUtils.persistentMemberIdToLogEntryTransformer.transform(getPersistentID()),
-              membersToWaitForLogEntries));
+              lineSeparator(),
+              lineSeparator(),
+              persistentMemberIdTransformer.transform(getPersistentID()),
+              lineSeparator(),
+              lineSeparator(),
+              membersToWaitForLogEntries,
+              lineSeparator()));
-  public void checkInterruptedByShutdownAll() {}
+  public void checkInterruptedByShutdownAll() {
+    // empty by default
+  }
-
+  @FunctionalInterface
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 UPD83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS44 INS44 INS44 MOV21 INS78 INS78 INS78 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS21 INS42 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS90 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS7 INS7 INS7 INS66 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD45 INS32 INS32 MOV32 INS32 INS32 INS32 UPD45 INS32 INS32 MOV32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL40 DEL32 DEL42 DEL4 DEL3 DEL66 DEL83 DEL8 DEL40 DEL40 DEL40 DEL40