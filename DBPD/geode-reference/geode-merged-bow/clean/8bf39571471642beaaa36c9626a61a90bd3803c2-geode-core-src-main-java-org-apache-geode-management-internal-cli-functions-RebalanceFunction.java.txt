Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class RebalanceFunction implements Function, InternalEntity{
+public class RebalanceFunction implements Function, InternalEntity {
-  
+
-  
+
-  public void execute(FunctionContext context) {   
-    
+  public void execute(FunctionContext context) {
+
-    Cache cache = CacheFactory.getAnyInstance();    
+    Cache cache = CacheFactory.getAnyInstance();
-    Set<String> includeRegionNames = (Set<String> ) args[1]; 
-    Set<String> excludeRegionNames = (Set<String> ) args[2]; 
-    RebalanceFactory rbFactory =manager.createRebalanceFactory();    
+    Set<String> includeRegionNames = (Set<String>) args[1];
+    Set<String> excludeRegionNames = (Set<String>) args[2];
+    RebalanceFactory rbFactory = manager.createRebalanceFactory();
-    
-    if (simulate.equals("true")){
-      op = rbFactory.simulate();  
-    }else{
-      op = rbFactory.start();  
+
+    if (simulate.equals("true")) {
+      op = rbFactory.simulate();
+    } else {
+      op = rbFactory.start();
-      
+
-      results = op.getResults();      
+      results = op.getResults();
-      StringBuilder str1 = new StringBuilder();      
-      str1.append(results.getTotalBucketCreateBytes() + "," +
-      results.getTotalBucketCreateTime() + "," +
-      results.getTotalBucketCreatesCompleted() + "," +
-      results.getTotalBucketTransferBytes() + "," +
-      results.getTotalBucketTransferTime() + "," +
-      results.getTotalBucketTransfersCompleted() + "," +
-      results.getTotalPrimaryTransferTime() + "," +
-      results.getTotalPrimaryTransfersCompleted() + "," +
-      results.getTotalTime()+ ","  );
-      
+      StringBuilder str1 = new StringBuilder();
+      str1.append(results.getTotalBucketCreateBytes() + "," + results.getTotalBucketCreateTime()
+          + "," + results.getTotalBucketCreatesCompleted() + ","
+          + results.getTotalBucketTransferBytes() + "," + results.getTotalBucketTransferTime() + ","
+          + results.getTotalBucketTransfersCompleted() + "," + results.getTotalPrimaryTransferTime()
+          + "," + results.getTotalPrimaryTransfersCompleted() + "," + results.getTotalTime() + ",");
+
-      Iterator it = regns1.iterator();      
+      Iterator it = regns1.iterator();
-        PartitionRebalanceInfo rgn = (PartitionRebalanceInfo) it.next();        
+        PartitionRebalanceInfo rgn = (PartitionRebalanceInfo) it.next();
-      }      
+      }
-      context.getResultSender().lastResult(str1.toString());      
+      context.getResultSender().lastResult(str1.toString());
-      context.getResultSender().lastResult(
-          "CancellationException1 " + e.getMessage());
-    } catch (InterruptedException e) {      
+      context.getResultSender().lastResult("CancellationException1 " + e.getMessage());
+    } catch (InterruptedException e) {
-      context.getResultSender().lastResult(
-          "InterruptedException2 " + e.getMessage());
-    }  
+      context.getResultSender().lastResult("InterruptedException2 " + e.getMessage());
+    }
-    //no need of optimization since read-only.
+    // no need of optimization since read-only.

