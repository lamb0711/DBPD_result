Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
+import com.gemstone.gemfire.internal.offheap.MemoryAllocator;
+import com.gemstone.gemfire.internal.offheap.OffHeapMemoryStats;
-        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage(), e);
+        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
-        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage(), e);
+        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
+    MemoryAllocator allocator = ((GemFireCacheImpl) cache).getOffHeapStore();
+    if((null != allocator) ) {
+      OffHeapMemoryStats offHeapStats = allocator.getStats();
+      
+      if(null != offHeapStats) {
+        addOffHeapStats(offHeapStats);
+      }
+    }
+
+    
-
+  public void addOffHeapStats(OffHeapMemoryStats offHeapStats) {
+    Statistics offHeapMemoryStatistics = offHeapStats.getStats();
+    monitor.addStatisticsToMonitor(offHeapMemoryStatistics);
+  }
+  
+
+  
+  /**
+   * @return list all the HDFSStore's name at cache level
+   */
+  
+  public String[] getHDFSStores() {
+    GemFireCacheImpl cacheImpl = (GemFireCacheImpl) cache;
+    String[] retStr = null;
+    Collection<HDFSStoreImpl> hdfsStoreCollection = null;
+    hdfsStoreCollection = cacheImpl.getHDFSStores();
+      
+    if (hdfsStoreCollection != null && hdfsStoreCollection.size() > 0) {
+      retStr = new String[hdfsStoreCollection.size()];
+      Iterator<HDFSStoreImpl> it = hdfsStoreCollection.iterator();
+      int i = 0;
+      while (it.hasNext()) {
+        retStr[i] = it.next().getName();
+        i++;
+
+      }
+    }
+    return retStr;
+  }
+      
-   * @return maximum heap size in MB
-   */
-  public long getMaximumHeapSize() {
-    Runtime rt = Runtime.getRuntime();
-    return rt.maxMemory() / MBFactor;
-  }
-
-  /**
-   * 
-  /**
-   * 
-   * @return get free heap size
-   */
-  public long getFreeHeapSize() {
-    Runtime rt = Runtime.getRuntime();
-    return rt.freeMemory() / MBFactor;
+  public int getOffHeapObjects() {
+    int objects = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      objects = stats.getObjects();
+    }
+    
+    return objects;
+  @Deprecated
+  public long getOffHeapFreeSize() {
+    return getOffHeapFreeMemory();
+  }
+  
+  @Deprecated
+  public long getOffHeapUsedSize() {
+    return getOffHeapUsedMemory();
+  }
+  
+  public long getOffHeapMaxMemory() {
+    long usedSize = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      usedSize = stats.getMaxMemory();
+    }
+    
+    return usedSize;
+  }
+  
+  public long getOffHeapFreeMemory() {
+    long freeSize = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      freeSize = stats.getFreeMemory();
+    }
+    
+    return freeSize;
+  }
+  
+  public long getOffHeapUsedMemory() {
+    long usedSize = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      usedSize = stats.getUsedMemory();
+    }
+    
+    return usedSize;
+  }
+  
+  public int getOffHeapFragmentation() {
+    int fragmentation = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      fragmentation = stats.getFragmentation();
+    }
+    
+    return fragmentation;        
+  }
+  
+  public long getOffHeapCompactionTime() {
+    long compactionTime = 0;
+    OffHeapMemoryStats stats = getOffHeapStats();
+    
+    if(null != stats) {
+      compactionTime = stats.getCompactionTime();
+    }
+    
+    return compactionTime;            
+  }
+  
-   * 
-   * @return current heap size
+   * Returns the OffHeapMemoryStats for this VM.
-  public long getCurrentHeapSize() {
-    return getVMStatistic(StatsKey.VM_USED_MEMORY).longValue()
-    / MBFactor;
-  }
+  private OffHeapMemoryStats getOffHeapStats() {
+    OffHeapMemoryStats stats = null;
+    
+    MemoryAllocator offHeap = this.cache.getOffHeapStore();
+    
+    if(null != offHeap) {
+      stats = offHeap.getStats();
+    }
-  public long getMaxMemory() {
-    Runtime rt = Runtime.getRuntime();
-    return rt.maxMemory() / MBFactor;
-  }
-  
-  public long getFreeMemory() {
-    Runtime rt = Runtime.getRuntime();
-    return rt.freeMemory() / MBFactor;
-  }
-  
-  public long getUsedMemory() {
-    return getVMStatistic(StatsKey.VM_USED_MEMORY).longValue() / MBFactor;
+    return stats;    
+  public long getMaxMemory() {
+    Runtime rt = Runtime.getRuntime();
+    return rt.maxMemory() / MBFactor;
+  }
+  
+  public long getFreeMemory() {
+    Runtime rt = Runtime.getRuntime();
+    return rt.freeMemory() / MBFactor;
+  }
+  
+  public long getUsedMemory() {
+    return getVMStatistic(StatsKey.VM_USED_MEMORY).longValue() / MBFactor;
+  }

INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 MOV29 MOV83 INS5 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 MOV8 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD42 INS29 INS83 INS43 INS42 INS8 INS60 INS25 INS43 INS42 INS60 INS21 INS43 INS85 INS60 INS60 INS60 INS21 INS25 INS41 INS60 INS60 INS25 INS41 INS42 INS41 INS42 INS41 INS60 INS25 INS41 INS60 INS25 INS41 INS60 INS60 INS25 INS41 INS60 INS60 INS25 INS41 INS60 INS60 INS25 INS41 INS65 INS42 INS60 INS60 INS25 INS41 INS43 INS59 INS36 INS8 INS42 INS43 INS59 INS32 UPD66 INS42 INS43 INS59 INS5 INS59 INS74 INS59 INS7 INS27 INS8 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS32 INS39 INS59 UPD43 INS27 INS8 INS42 INS39 INS59 UPD43 INS27 INS8 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS66 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS27 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS85 INS42 INS33 INS43 INS43 INS42 INS33 INS42 INS32 INS27 INS27 INS21 INS60 INS60 INS61 INS42 INS34 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS42 INS42 INS34 UPD42 UPD42 INS33 INS42 INS21 INS42 INS34 UPD42 UPD42 INS33 INS42 INS21 INS42 INS34 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS34 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS34 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS32 INS33 INS42 INS21 INS36 INS42 INS33 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS74 INS59 INS39 INS59 INS32 INS8 INS42 INS7 UPD42 INS7 UPD42 INS7 INS42 INS7 INS42 INS7 UPD42 MOV42 INS7 INS22 INS42 INS7 INS11 INS42 INS42 INS32 INS33 INS42 INS21 INS42 INS42 INS42 INS42 INS3 INS43 INS43 INS42 INS32 INS42 INS34 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS52 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS5 INS32 INS42 INS42 INS42 INS42 INS7 INS37 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS32 INS42 MOV32 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL31 DEL42 DEL32 DEL42 DEL27 DEL41 DEL66 DEL65 DEL29 DEL42 DEL32 DEL42 DEL27 DEL41 DEL66 DEL65 DEL29 DEL40 DEL32 DEL42 DEL32 DEL42 DEL27 DEL41