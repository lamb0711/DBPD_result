GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
+import java.io.BufferedInputStream;
-  public DeployedJar(File versionedJarFile, String jarName) throws IOException {
-    this(versionedJarFile, jarName, Files.readAllBytes(versionedJarFile.toPath()));
-  }
-
-  public DeployedJar(File versionedJarFile, final String jarName, byte[] jarBytes)
-      throws FileNotFoundException {
-    Assert.assertTrue(jarBytes != null, "jarBytes cannot be null");
+  public DeployedJar(File versionedJarFile, final String jarName) {
-    final byte[] fileContent = getJarContent();
-    if (!Arrays.equals(fileContent, jarBytes)) {
-      throw new IllegalStateException("JAR file: " + versionedJarFile.getAbsolutePath()
-          + ", does not have the expected content.");
-    }
-
-    if (!hasValidJarContent(fileContent)) {
+    if (!hasValidJarContent(versionedJarFile)) {
-    if (messageDigest != null) {
-      this.md5hash = messageDigest.digest(jarBytes);
-    } else {
-      this.md5hash = null;
+    byte[] digest = null;
+    try {
+      if (messageDigest != null) {
+        digest = fileDigest(this.file);
+      }
+    } catch (IOException e) {
+      // Ignored
+    this.md5hash = digest;
-   * @param inputStream InputStream containing data to be validated.
+   * @param jarFile Jar containing data to be validated.
-  private static boolean hasValidJarContent(final InputStream inputStream) {
+  public static boolean hasValidJarContent(File jarFile) {
-      jarInputStream = new JarInputStream(inputStream);
+      jarInputStream = new JarInputStream(new FileInputStream(jarFile));
-   * Peek into the JAR data and make sure that it is valid JAR content.
-   *
-   * @param jarBytes Bytes of data to be validated.
-   * @return True if the data has JAR content, false otherwise
-   */
-  static boolean hasValidJarContent(final byte[] jarBytes) {
-    return hasValidJarContent(new ByteArrayInputStream(jarBytes));
-  }
-
-  /**
-    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(this.getJarContent());
+    BufferedInputStream bufferedInputStream;
+    try {
+      bufferedInputStream = new BufferedInputStream(new FileInputStream(this.file));
+    } catch (Exception ex) {
+      logger.error("Unable to scan jar file for functions");
+      return;
+    }
-      jarInputStream = new JarInputStream(byteArrayInputStream);
+      jarInputStream = new JarInputStream(bufferedInputStream);
-   * @param compareToBytes Bytes to compare the original content to
+   * @param stagedFile File to compare the original content to
-  boolean hasSameContentAs(final byte[] compareToBytes) {
+  boolean hasSameContentAs(final File stagedFile) {
-      return Arrays.equals(compareToBytes, getJarContent());
+      return false;
-    byte[] compareToMd5 = messageDigest.digest(compareToBytes);
+    byte[] compareToMd5;
+    try {
+      compareToMd5 = fileDigest(stagedFile);
+    } catch (IOException ex) {
+      return false;
+    }
+  private byte[] fileDigest(File file) throws IOException {
+    BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));
+    byte[] data = new byte[8192];
+
+    int read;
+    while ((read = fis.read(data)) > 0) {
+      messageDigest.update(data, 0, read);
+    }
+
+    return messageDigest.digest();
+  }
+
-  private byte[] getJarContent() {
-    try {
-      InputStream channelInputStream = new FileInputStream(this.file);
-
-      final ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();
-      final byte[] bytes = new byte[4096];
-
-      int bytesRead;
-      while ((bytesRead = channelInputStream.read(bytes)) != -1) {
-        byteOutStream.write(bytes, 0, bytesRead);
-      }
-      channelInputStream.close();
-      return byteOutStream.toByteArray();
-    } catch (IOException e) {
-      logger.error("Error when attempting to read jar contents: ", e);
-    }
-
-    return ZERO_BYTES;
-  }
-

INS26 INS40 INS31 UPD83 UPD83 MOV83 MOV5 UPD42 MOV42 MOV44 MOV43 INS8 INS60 INS54 MOV21 UPD43 UPD42 INS60 INS54 INS43 INS42 INS60 INS54 UPD42 MOV60 MOV60 MOV60 MOV61 MOV41 MOV5 INS59 INS8 INS12 UPD42 UPD66 UPD42 UPD43 MOV43 INS59 INS8 INS12 UPD42 UPD66 INS42 MOV5 INS59 INS8 INS12 UPD43 MOV5 UPD27 INS42 INS33 INS25 MOV44 INS8 INS42 UPD42 UPD42 MOV42 INS21 INS44 INS8 INS42 INS21 INS44 INS8 UPD42 INS42 INS14 UPD42 UPD42 INS34 UPD42 UPD42 UPD42 MOV27 INS8 INS7 INS43 INS42 INS21 INS41 INS9 INS7 INS43 INS42 INS41 INS43 INS14 UPD34 INS21 INS14 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS9 INS42 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS7 MOV43 INS14 INS43 MOV14 INS42 INS42 INS45 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS43 INS42 INS42 UPD43 MOV43 UPD42 MOV42 INS22 INS42 UPD42 INS52 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL17 DEL8 DEL31 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL27 DEL45 DEL32 DEL21 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL8 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL14 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL52 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL83 DEL39 DEL85 DEL5 DEL34 DEL38 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31