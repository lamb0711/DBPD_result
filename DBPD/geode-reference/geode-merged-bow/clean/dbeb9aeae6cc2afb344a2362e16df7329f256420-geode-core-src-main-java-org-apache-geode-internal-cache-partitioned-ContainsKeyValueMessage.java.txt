Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public final class ContainsKeyValueMessage extends PartitionMessageWithDirectReply
-  {
+public final class ContainsKeyValueMessage extends PartitionMessageWithDirectReply {
-  
+
-   * {@link org.apache.geode.cache.Region#containsValueForKey(Object)}
-   * depending on the <code>valueCheck</code> argument
+   * {@link org.apache.geode.cache.Region#containsValueForKey(Object)} depending on the
+   * <code>valueCheck</code> argument
-   * @param recipient
-   *          the member that the contains keys/value message is sent to
-   * @param r
-   *          the PartitionedRegion that contains the bucket
-   * @param key
-   *          the key to be queried
-   * @param bucketId
-   *          the identity of the bucket to be queried
-   * @param valueCheck
-   *          true if
-   *          {@link org.apache.geode.cache.Region#containsValueForKey(Object)}
-   *          is desired, false if
-   *          {@link org.apache.geode.cache.Region#containsKey(Object)}is
-   *          desired
+   * @param recipient the member that the contains keys/value message is sent to
+   * @param r the PartitionedRegion that contains the bucket
+   * @param key the key to be queried
+   * @param bucketId the identity of the bucket to be queried
+   * @param valueCheck true if {@link org.apache.geode.cache.Region#containsValueForKey(Object)} is
+   *        desired, false if {@link org.apache.geode.cache.Region#containsKey(Object)}is desired
-    Assert.assertTrue(recipient != null,
-        "PRDistribuedContainsKeyValueMessage NULL reply message");
+    Assert.assertTrue(recipient != null, "PRDistribuedContainsKeyValueMessage NULL reply message");
-    ContainsKeyValueResponse p = new ContainsKeyValueResponse(r.getSystem(),
-        Collections.singleton(recipient), key);
-    ContainsKeyValueMessage m = new ContainsKeyValueMessage(recipient, r
-        .getPRId(), p, key, bucketId, valueCheck);
+    ContainsKeyValueResponse p =
+        new ContainsKeyValueResponse(r.getSystem(), Collections.singleton(recipient), key);
+    ContainsKeyValueMessage m =
+        new ContainsKeyValueMessage(recipient, r.getPRId(), p, key, bucketId, valueCheck);
-      throw new ForceReattemptException(LocalizedStrings.ContainsKeyValueMessage_FAILED_SENDING_0.toLocalizedString(m));
+      throw new ForceReattemptException(
+          LocalizedStrings.ContainsKeyValueMessage_FAILED_SENDING_0.toLocalizedString(m));
-  protected boolean operateOnPartitionedRegion(DistributionManager dm,
-      PartitionedRegion r, long startTime) throws CacheException,
-      ForceReattemptException
-  {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+      long startTime) throws CacheException, ForceReattemptException {
-          throw new ForceReattemptException(LocalizedStrings.ContainsKeyValueMessage_ENOUNTERED_PRLOCALLYDESTROYEDEXCEPTION.toLocalizedString(), pde);
+        throw new ForceReattemptException(
+            LocalizedStrings.ContainsKeyValueMessage_ENOUNTERED_PRLOCALLYDESTROYEDEXCEPTION
+                .toLocalizedString(),
+            pde);
-      r.getPrStats().endPartitionMessagesProcessing(startTime); 
+      r.getPrStats().endPartitionMessagesProcessing(startTime);
-    }
-    else {
+    } else {
-      ForceReattemptException fre = new ForceReattemptException(LocalizedStrings.ContainsKeyValueMessage_PARTITIONED_REGION_0_ON_1_IS_NOT_CONFIGURED_TO_STORE_DATA.toLocalizedString(new Object[] {r.getFullPath(), dm.getId()}));
+      ForceReattemptException fre = new ForceReattemptException(
+          LocalizedStrings.ContainsKeyValueMessage_PARTITIONED_REGION_0_ON_1_IS_NOT_CONFIGURED_TO_STORE_DATA
+              .toLocalizedString(new Object[] {r.getFullPath(), dm.getId()}));
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-    buff.append("; valueCheck=").append(this.valueCheck).append("; key=")
-        .append(this.key).append("; bucketId=").append(this.bucketId);
+    buff.append("; valueCheck=").append(this.valueCheck).append("; key=").append(this.key)
+        .append("; bucketId=").append(this.bucketId);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  public static final class ContainsKeyValueReplyMessage extends
-      ReplyMessage
-   {
+  public static final class ContainsKeyValueReplyMessage extends ReplyMessage {
-    public ContainsKeyValueReplyMessage() {
-    }
+    public ContainsKeyValueReplyMessage() {}
-    private ContainsKeyValueReplyMessage(int processorId,
-        boolean containsKeyValue) {
+    private ContainsKeyValueReplyMessage(int processorId, boolean containsKeyValue) {
-        ReplySender replySender, boolean containsKeyValue)
-    {
-      Assert.assertTrue(recipient != null,
-          "ContainsKeyValueReplyMessage NULL reply message");
-      ContainsKeyValueReplyMessage m = new ContainsKeyValueReplyMessage(
-          processorId, containsKeyValue);
+        ReplySender replySender, boolean containsKeyValue) {
+      Assert.assertTrue(recipient != null, "ContainsKeyValueReplyMessage NULL reply message");
+      ContainsKeyValueReplyMessage m =
+          new ContainsKeyValueReplyMessage(processorId, containsKeyValue);
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, ReplyProcessor21 processor) {
-      
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    public String toString()
-    {
+    public String toString() {
-      sb.append("ContainsKeyValueReplyMessage ").append(
-          "processorid=").append(this.processorId).append(" returning ")
-          .append(doesItContainKeyValue());
+      sb.append("ContainsKeyValueReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" returning ").append(doesItContainKeyValue());
-    public boolean doesItContainKeyValue()
-    {
+    public boolean doesItContainKeyValue() {
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.ContainsKeyValueMessage.ContainsKeyValueReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.ContainsKeyValueMessage.ContainsKeyValueReplyMessage}
-  public static class ContainsKeyValueResponse extends PartitionResponse
-   {
+  public static class ContainsKeyValueResponse extends PartitionResponse {
-    public ContainsKeyValueResponse(InternalDistributedSystem ds,
-        Set recipients, Object key) {
+    public ContainsKeyValueResponse(InternalDistributedSystem ds, Set recipients, Object key) {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          ContainsKeyValueReplyMessage reply = (ContainsKeyValueReplyMessage)msg;
+          ContainsKeyValueReplyMessage reply = (ContainsKeyValueReplyMessage) msg;
-            logger.trace(LogMarker.DM, "ContainsKeyValueResponse return value is {}", this.returnValue);
+            logger.trace(LogMarker.DM, "ContainsKeyValueResponse return value is {}",
+                this.returnValue);
-      }
-      finally {
+      } finally {
-     * @return Set the keys associated with the bucketid of the
-     *         {@link ContainsKeyValueMessage}
+     * @return Set the keys associated with the bucketid of the {@link ContainsKeyValueMessage}
-     * @throws PrimaryBucketException if the instance of the bucket that received this operation was not primary
+     * @throws PrimaryBucketException if the instance of the bucket that received this operation was
+     *         not primary
-    public boolean waitForContainsResult() throws PrimaryBucketException,
-        ForceReattemptException {
+    public boolean waitForContainsResult() throws PrimaryBucketException, ForceReattemptException {
-      }
-      catch (ForceReattemptException rce) {
+      } catch (ForceReattemptException rce) {
-      }
-      catch (PrimaryBucketException pbe) {
+      } catch (PrimaryBucketException pbe) {
-      }
-      catch (CacheException ce) {
-        logger.debug("ContainsKeyValueResponse got remote CacheException; forcing reattempt. {}", ce.getMessage(), ce);
-        throw new ForceReattemptException(LocalizedStrings.ContainsKeyValueMessage_CONTAINSKEYVALUERESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT.toLocalizedString(), ce);
+      } catch (CacheException ce) {
+        logger.debug("ContainsKeyValueResponse got remote CacheException; forcing reattempt. {}",
+            ce.getMessage(), ce);
+        throw new ForceReattemptException(
+            LocalizedStrings.ContainsKeyValueMessage_CONTAINSKEYVALUERESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT
+                .toLocalizedString(),
+            ce);
-        throw new ForceReattemptException(LocalizedStrings.ContainsKeyValueMessage_NO_RETURN_VALUE_RECEIVED.toLocalizedString());
+        throw new ForceReattemptException(
+            LocalizedStrings.ContainsKeyValueMessage_NO_RETURN_VALUE_RECEIVED.toLocalizedString());

MOV65 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 DEL66