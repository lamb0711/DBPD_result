Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-   * Used internally to pass the attributes from this factory to
-   * the real pool it is creating.
+   * Used internally to pass the attributes from this factory to the real pool it is creating.
-  
+
-  private final PoolManagerImpl pm; 
+  private final PoolManagerImpl pm;
-  
+
-  
+
-    if(idleTimout < -1) {
+    if (idleTimout < -1) {
-    if(maxConnections < this.attributes.minConnections && maxConnections != -1) {
+    if (maxConnections < this.attributes.minConnections && maxConnections != -1) {
-    if(maxConnections <= 0 && maxConnections != -1) {
+    if (maxConnections <= 0 && maxConnections != -1) {
-    if(minConnections > attributes.maxConnections && attributes.maxConnections != -1) {
+    if (minConnections > attributes.maxConnections && attributes.maxConnections != -1) {
-    if(minConnections < 0) {
-      throw new IllegalArgumentException(
-          "must be greater than or equal to 0");
+    if (minConnections < 0) {
+      throw new IllegalArgumentException("must be greater than or equal to 0");
-    this.attributes.minConnections=minConnections;
+    this.attributes.minConnections = minConnections;
-    if(pingInterval <= 0) {
+    if (pingInterval <= 0) {
-    this.attributes.pingInterval=pingInterval;
+    this.attributes.pingInterval = pingInterval;
-    if(statisticInterval < -1) {
+    if (statisticInterval < -1) {
-    if(retryAttempts < -1) {
+    if (retryAttempts < -1) {
-    this.attributes.retryAttempts=retryAttempts;
+    this.attributes.retryAttempts = retryAttempts;
-  
+
-  
+
-  
+
-      throw new IllegalArgumentException("queueRedundancyLevel must be greater than or equal to -1");
+      throw new IllegalArgumentException(
+          "queueRedundancyLevel must be greater than or equal to -1");
-//      IllegalArgumentException ex = new IllegalArgumentException("Unknown host " + host);
-//      ex.initCause(cause);
-//      throw ex;
+      // IllegalArgumentException ex = new IllegalArgumentException("Unknown host " + host);
+      // ex.initCause(cause);
+      // throw ex;
-    if(ackInterval <= 0) {
+    if (ackInterval <= 0) {
-    
+
-      throw new IllegalStateException("A server has already been added. You can only add locators or servers; not both.");
+      throw new IllegalStateException(
+          "A server has already been added. You can only add locators or servers; not both.");
+
-      throw new IllegalStateException("A locator has already been added. You can only add locators or servers; not both.");
+      throw new IllegalStateException(
+          "A locator has already been added. You can only add locators or servers; not both.");
-  
+
-   * Create a new Pool for connecting a client to a set of GemFire Cache Servers.
-   * using this factory's settings for attributes.
+   * Create a new Pool for connecting a client to a set of GemFire Cache Servers. using this
+   * factory's settings for attributes.
-    if(cache != null) {
+    if (cache != null) {
-      if(registry != null && !attributes.isGateway()) {
+      if (registry != null && !attributes.isGateway()) {
-   * Not a true pool just the attributes.
-   * Serialization is used by unit tests
+   * Not a true pool just the attributes. Serialization is used by unit tests
-    public ArrayList/*<InetSocketAddress>*/ locators = new ArrayList();
-    public ArrayList/*<InetSocketAddress>*/ servers = new ArrayList();
+    public ArrayList/* <InetSocketAddress> */ locators = new ArrayList();
+    public ArrayList/* <InetSocketAddress> */ servers = new ArrayList();
-    public transient LocatorDiscoveryCallback locatorCallback = null; //only used by tests
+    public transient LocatorDiscoveryCallback locatorCallback = null; // only used by tests
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-    public GatewaySender getGatewaySender(){
+
+    public GatewaySender getGatewaySender() {
+
+
-     this.multiuserSecureModeEnabled = v; 
-    }    
-    public List/*<InetSocketAddress>*/ getLocators() {
+      this.multiuserSecureModeEnabled = v;
+    }
+
+    public List/* <InetSocketAddress> */ getLocators() {
-        throw new IllegalStateException("At least one locator or server must be added before a connection pool can be created.");
+        throw new IllegalStateException(
+            "At least one locator or server must be added before a connection pool can be created.");
-    public List/*<InetSocketAddress>*/ getServers() {
+
+    public List/* <InetSocketAddress> */ getServers() {
-        throw new IllegalStateException("At least one locator or server must be added before a connection pool can be created.");
+        throw new IllegalStateException(
+            "At least one locator or server must be added before a connection pool can be created.");
-    
+
-    
+
-    
+
-      DataSerializer.writePrimitiveBoolean(this.multiuserSecureModeEnabled,out);
+      DataSerializer.writePrimitiveBoolean(this.multiuserSecureModeEnabled, out);
-    public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException
-    {
+
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.minConnections= DataSerializer.readPrimitiveInt(in);
-      this.maxConnections= DataSerializer.readPrimitiveInt(in);
-      this.retryAttempts= DataSerializer.readPrimitiveInt(in);
-      this.idleTimeout= DataSerializer.readPrimitiveLong(in);
-      this.pingInterval= DataSerializer.readPrimitiveLong(in);
+      this.minConnections = DataSerializer.readPrimitiveInt(in);
+      this.maxConnections = DataSerializer.readPrimitiveInt(in);
+      this.retryAttempts = DataSerializer.readPrimitiveInt(in);
+      this.idleTimeout = DataSerializer.readPrimitiveLong(in);
+      this.pingInterval = DataSerializer.readPrimitiveLong(in);
-      this.statisticInterval= DataSerializer.readPrimitiveInt(in);
+      this.statisticInterval = DataSerializer.readPrimitiveInt(in);

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66