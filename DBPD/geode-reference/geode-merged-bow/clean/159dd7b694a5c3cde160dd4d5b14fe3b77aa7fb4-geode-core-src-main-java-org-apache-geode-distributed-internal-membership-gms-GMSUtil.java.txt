GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.DataSerializer;
+import org.apache.geode.internal.DSFIDFactory;
+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+  public static GMSMember readMemberID(DataInput in) throws IOException, ClassNotFoundException {
+    Object id = DataSerializer.readObject(in);
+    if (id == null || id instanceof GMSMember) {
+      return (GMSMember) id;
+    }
+    // return ((GMSMemberAdapter)((InternalDistributedMember)id).getNetMember()).getGmsMember();
+    try {
+      Method getNetMember = id.getClass().getMethod("getNetMember");
+      Object netMember = getNetMember.invoke(id);
+      Method getGmsMember = netMember.getClass().getMethod("getGmsMember");
+      return (GMSMember) getGmsMember.invoke(netMember);
+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
+      throw new IllegalStateException("Unable to deserialize a member ID", e);
+    }
+  }
+
+  public static Set<GMSMember> readHashSetOfMemberIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    Set<GMSMember> result = new HashSet<>();
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+  }
+
+  /** Parses comma-separated-roles/groups into array of groups (strings). */
+  public static String[] parseGroups(String csvRoles, String csvGroups) {
+    List<String> groups = new ArrayList<String>();
+    parseCsv(groups, csvRoles);
+    parseCsv(groups, csvGroups);
+    return groups.toArray(new String[groups.size()]);
+  }
+
+
+  private static void parseCsv(List<String> groups, String csv) {
+    if (csv == null || csv.length() == 0) {
+      return;
+    }
+    StringTokenizer st = new StringTokenizer(csv, ",");
+    while (st.hasMoreTokens()) {
+      String groupName = st.nextToken().trim();
+      if (!groups.contains(groupName)) { // only add each group once
+        groups.add(groupName);
+      }
+    }
+  }
+
+  public static List<GMSMember> readArrayOfIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    List<GMSMember> result = new ArrayList<>(size);
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+  }
+
+  private static void writeAsInternalDistributedMember(GMSMember suspect, DataOutput out)
+      throws IOException {
+    InternalDataSerializer.writeDSFID(suspect, DSFIDFactory.DISTRIBUTED_MEMBER, out);
+    // DataSerializer.writeObject(new InternalDistributedMember(new GMSMemberAdapter(suspect)),
+    // out);
+  }
+
+  public static void writeMemberID(GMSMember id, DataOutput out) throws IOException {
+    if (id == null) {
+      DataSerializer.writeObject(id, out);
+      return;
+    }
+    if (InternalDataSerializer.getVersionForDataStream(out).ordinal() < Version.GEODE_1_10_0
+        .ordinal()) {
+      writeAsInternalDistributedMember(id, out);
+    } else {
+      DataSerializer.writeObject(id, out);
+    }
+  }
+
+  public static Set<GMSMember> readSetOfMemberIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    Set<GMSMember> result = new HashSet<>(size);
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+
+
+  }
+
+  public static void writeSetOfMemberIDs(Set<GMSMember> set, DataOutput out) throws IOException {
+    int size;
+    if (set == null) {
+      size = -1;
+    } else {
+      size = set.size();
+    }
+    InternalDataSerializer.writeArrayLength(size, out);
+    if (size > 0) {
+      for (GMSMember member : set) {
+        GMSUtil.writeMemberID(member, out);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS54 INS43 INS43 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS24 INS41 INS65 INS43 INS85 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS74 INS42 INS43 INS42 INS25 INS60 INS61 INS43 INS43 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS24 INS41 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS43 INS43 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS24 INS41 INS74 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS25 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS43 INS43 INS42 INS27 INS8 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS43 INS42 INS39 INS59 INS27 INS8 INS8 INS32 INS27 INS8 INS42 INS42 INS32 INS27 INS62 INS41 INS60 INS60 INS60 INS41 INS44 INS8 INS42 INS32 INS42 INS38 INS41 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS27 INS27 INS41 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS38 INS41 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS33 INS21 INS41 INS32 INS32 INS21 INS21 INS42 INS32 INS42 INS38 INS41 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS34 INS70 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS11 INS43 INS59 INS43 INS59 INS43 INS59 INS11 INS84 INS42 INS53 INS42 INS42 INS42 INS34 INS33 INS42 INS42 INS74 INS42 INS34 INS32 INS42 INS42 INS74 INS5 INS32 INS42 INS33 INS32 INS34 INS43 INS42 INS45 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS34 INS33 INS42 INS42 INS74 INS42 INS42 INS34 INS32 INS32 INS32 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS34 INS33 INS42 INS42 INS74 INS42 INS42 INS34 INS32 INS7 INS7 INS44 INS42 INS8 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS43 INS43 INS43 INS14 INS43 INS42 INS42 INS32 INS43 INS43 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS38 INS42 INS32 INS43 INS42 INS21 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42