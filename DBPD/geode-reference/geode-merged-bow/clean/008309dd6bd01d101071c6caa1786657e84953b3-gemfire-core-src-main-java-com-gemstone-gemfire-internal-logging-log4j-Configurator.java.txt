Merge branch 'release/1.0.0-incubating.M1'

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import org.apache.logging.log4j.core.Appender;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
+import org.apache.logging.log4j.core.filter.AbstractFilterable;
+  public static void shutdown() {
+    //LoggerContext context = (LoggerContext)LogManager.getContext(false);
+    final LoggerContext context = ((org.apache.logging.log4j.core.Logger)LogManager.getRootLogger()).getContext();
+    context.stop();
+    org.apache.logging.log4j.core.config.Configurator.shutdown(context);
+  }
+
+  
-      LogService.setFastLoggerDebugAvailableFlag();
+      LogService.configureFastLoggerDelegating();
+
+  public static boolean hasContextWideFilter(final Configuration config) {
+    return config.hasFilter();
+  }
+  
+  public static String getConfigurationSourceLocation(final Configuration config) {
+    return config.getConfigurationSource().getLocation();
+  }
+  
+  public static boolean hasAppenderFilter(final Configuration config) {
+    for (Appender appender : config.getAppenders().values()) {
+      if (appender instanceof AbstractFilterable) {
+        if (((AbstractFilterable) appender).hasFilter()) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasDebugOrLower(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isDebugOrLower = loggerConfig.getLevel().isLessSpecificThan(Level.DEBUG);
+      if (isDebugOrLower) {
+        return true;
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasLoggerFilter(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isGemFire = loggerConfig.getName().startsWith(LogService.BASE_LOGGER_NAME);
+      boolean hasFilter = loggerConfig.hasFilter();
+      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
+      
+      if (isRoot || isGemFire) {
+        // check for Logger Filter
+        if (hasFilter && !isGemFireVerboseFilter) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  
+  public static boolean hasAppenderRefFilter(final Configuration config) {
+    for (LoggerConfig loggerConfig : config.getLoggers().values()) {
+      boolean isRoot = loggerConfig.getName().equals("");
+      boolean isGemFire = loggerConfig.getName().startsWith(LogService.BASE_LOGGER_NAME);
+      boolean hasFilter = loggerConfig.hasFilter();
+      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
+      
+      if (isRoot || isGemFire) {
+        // check for AppenderRef Filter
+        for (AppenderRef appenderRef : loggerConfig.getAppenderRefs()) {
+          if (appenderRef.getFilter() != null) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS60 INS21 INS21 INS83 INS43 INS42 INS41 INS42 INS83 INS43 INS42 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS42 INS70 INS41 INS83 INS43 INS59 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS44 INS32 INS8 INS9 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS32 INS42 INS25 INS43 INS42 INS32 INS42 INS60 INS25 INS43 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS43 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS62 INS8 INS42 INS42 INS42 INS39 INS59 INS42 INS8 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS11 UPD42 INS42 INS43 INS25 INS42 INS32 INS41 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS25 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS70 INS43 INS32 INS42 INS32 INS8 INS32 INS42 INS40 INS9 INS32 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS42 INS45 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS40 INS42 INS42 INS36 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS38 INS41 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS11 INS9 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS41 INS42 INS42 INS42 INS9