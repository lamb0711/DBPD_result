GEODE-7363: Add member type common tag

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Mark Hanson <mhanson@pivotal.io>

+import java.util.function.BooleanSupplier;
+import org.apache.geode.distributed.Locator;
+import org.apache.geode.distributed.ServerLauncher;
-        InternalDistributedSystem system,
-        boolean isClient);
+        InternalDistributedSystem system, boolean isClient, boolean hasLocator,
+        boolean hasCacheServer);
-      InternalDistributedSystem system, boolean isClient) {
+      InternalDistributedSystem system, boolean isClient, boolean hasLocator,
+      boolean hasCacheServer) {
-    meterRegistry.config().commonTags(commonTags(system, isClient));
+    addCommonTags(system, isClient, hasLocator, hasCacheServer);
-  private static Set<Tag> commonTags(InternalDistributedSystem system, boolean isClient) {
-    Set<Tag> commonTags = new HashSet<>();
-
-    if (!isClient) {
-      String systemId = String.valueOf(system.getConfig().getDistributedSystemId());
-      commonTags.add(Tag.of("cluster", systemId));
-    }
+  private void addCommonTags(InternalDistributedSystem system, boolean isClient,
+      boolean hasLocators, boolean hasCacheServer) {
+    int clusterId = system.getConfig().getDistributedSystemId();
-    requireNonNull(memberName);
-    if (!memberName.isEmpty()) {
-      commonTags.add(Tag.of("member", memberName));
-    }
-
-    requireNonNull(hostName);
+
+    requireNonNull(memberName, "Member Name is null.");
+    requireNonNull(hostName, "Host Name is null.");
-    commonTags.add(Tag.of("host", hostName));
-    return commonTags;
+    Set<Tag> tags = new HashSet<>();
+
+    if (!isClient) {
+      tags.add(Tag.of("cluster", String.valueOf(clusterId)));
+
+    }
+
+    if (!memberName.isEmpty()) {
+      tags.add(Tag.of("member", memberName));
+    }
+
+    tags.add(Tag.of("host", hostName));
+    tags.add(Tag.of("member.type", memberTypeFor(hasLocators, hasCacheServer)));
+    meterRegistry.config().commonTags(tags);
+  }
+
+  private static String memberTypeFor(boolean hasLocator, boolean hasCacheServer) {
+    if (hasCacheServer && hasLocator) {
+      return "server-locator";
+    }
+
+    if (hasCacheServer) {
+      return "server";
+    }
+
+    if (hasLocator) {
+      return "locator";
+    }
+
+    return "embedded-cache";
+    private BooleanSupplier hasLocator = Locator::hasLocator;
+    private BooleanSupplier hasCacheServer = () -> ServerLauncher.getInstance() != null;
-          system, isClient);
+          system, isClient, hasLocator.getAsBoolean(), hasCacheServer.getAsBoolean());
+    Builder setCacheServerDetector(BooleanSupplier hasCacheServer) {
+      this.hasCacheServer = hasCacheServer;
+      return this;
+    }
+
+    @VisibleForTesting
+    Builder setLocatorDetector(BooleanSupplier hasLocator) {
+      this.hasLocator = hasLocator;
+      return this;
+    }
+
+    @VisibleForTesting

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS44 INS44 INS39 INS42 INS44 INS44 MOV60 MOV25 MOV25 INS83 INS83 MOV43 INS42 INS44 INS44 INS8 INS23 INS23 INS31 INS31 INS44 INS44 INS39 INS42 INS39 INS42 INS21 INS39 INS42 INS39 INS42 MOV60 INS21 INS21 INS21 MOV21 INS39 INS42 INS39 INS42 INS25 INS25 INS25 INS41 INS83 INS43 INS59 INS83 INS43 INS59 INS78 INS43 INS42 INS44 INS8 INS78 INS43 INS42 INS44 INS8 INS39 INS42 INS39 INS42 INS32 INS39 INS32 INS32 INS32 INS27 INS8 INS42 INS8 INS42 INS8 INS45 INS42 INS42 INS90 INS42 INS42 INS86 INS42 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS41 INS41 INS41 INS42 INS42 INS27 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS42 INS45 INS32 INS45 INS45 INS45 INS32 INS33 INS32 INS32 INS22 INS42 INS22 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS42 UPD42 MOV42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL41