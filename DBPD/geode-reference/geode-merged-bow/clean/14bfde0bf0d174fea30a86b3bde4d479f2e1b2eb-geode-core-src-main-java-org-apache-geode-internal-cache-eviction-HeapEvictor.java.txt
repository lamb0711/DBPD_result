Merge branch 'release/1.8.0'

-import static java.util.concurrent.TimeUnit.SECONDS;
-import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.distributed.internal.OverflowQueueWithDMStats;
+import org.apache.geode.distributed.internal.QueueStatHelper;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  private static final String EVICTOR_THREAD_GROUP_NAME = "EvictorThreadGroup";
-
-  private final ThreadPoolExecutor evictorThreadPool;
+  private final ExecutorService evictorThreadPool;
-    this(cache, EVICTOR_THREAD_GROUP_NAME, EVICTOR_THREAD_NAME);
+    this(cache, EVICTOR_THREAD_NAME);
-  public HeapEvictor(final InternalCache cache, final String threadGroupName,
-      final String threadName) {
+  public HeapEvictor(final InternalCache cache, final String threadName) {
-    ThreadGroup evictorThreadGroup = LoggingThreadGroup.createThreadGroup(threadGroupName, logger);
-    ThreadFactory evictorThreadFactory = new ThreadFactory() {
-      private final AtomicInteger next = new AtomicInteger(0);
-
-      @Override
-      public Thread newThread(Runnable r) {
-        Thread thread = new Thread(evictorThreadGroup, r, threadName + next.incrementAndGet());
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-
-      BlockingQueue<Runnable> poolQueue =
-          new OverflowQueueWithDMStats(this.cache.getCachePerfStats().getEvictionQueueStatHelper());
-      this.evictorThreadPool = new ThreadPoolExecutor(MAX_EVICTOR_THREADS, MAX_EVICTOR_THREADS, 15,
-          SECONDS, poolQueue, evictorThreadFactory);
+      QueueStatHelper poolStats = this.cache.getCachePerfStats().getEvictionQueueStatHelper();
+      this.evictorThreadPool = LoggingExecutors.newFixedThreadPoolWithTimeout(threadName,
+          MAX_EVICTOR_THREADS, 15, poolStats);
-  public ThreadPoolExecutor getEvictorThreadPool() {
+  public ExecutorService getEvictorThreadPool() {
-    ThreadPoolExecutor pool = getEvictorThreadPool();
-    if (pool == null) {
+    if (getEvictorThreadPool() == null) {
-    int threadsAvailable = pool.getCorePoolSize();
+    int threadsAvailable = MAX_EVICTOR_THREADS;

MOV26 UPD40 UPD40 UPD40 UPD43 MOV8 UPD43 UPD42 MOV21 MOV25 UPD42 MOV32 INS42 INS43 UPD42 MOV42 UPD42 MOV32 INS32 INS42 INS42 INS42 INS42 INS34 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL42 DEL34 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32