GEODE-5971: Remove FileResult (#3487)


-  // this is used by commands (e.g. ExportConfigCommand) saving the file content in the memory and
-  // transfer the byte[] in json string back to the client
-  private Map<String, FileResultModel> files = new LinkedHashMap<>();
-
-  // this is used by commands (e.g ExportlogsCommand) that can download file to the client when in
-  // http connection
-  private Path fileToDownload;
+  private List<FileResultModel> files = new ArrayList<>();
-  public Map<String, FileResultModel> getFiles() {
+  public List<FileResultModel> getFiles() {
-  public void setFiles(Map<String, FileResultModel> files) {
+  public void setFiles(List<FileResultModel> files) {
+  /**
+   * @param fileName: only the name part of the file, no directory infomation
+   * @param content: the content to be saved to the file
+   */
-    files.put(fileName, fileModel);
+    files.add(fileModel);
-    files.put(file.getName(), new FileResultModel(file, fileType));
-  }
-
-  public Path getFileToDownload() {
-    return fileToDownload;
-  }
-
-  public void setFileToDownload(Path fileToDownload) {
-    this.fileToDownload = fileToDownload;
+    files.add(new FileResultModel(file, fileType));
-
-
+   * this only applies to the commands that saves the file content in byte[], not download the
+   * files over http channel
-    if (getFiles().size() == 0 || dir == null) {
+    InfoResultModel info = addInfo("fileSave");
+    if (files.size() == 0) {
+      info.addLine("No file found to be saved.");
+      setStatus(Result.Status.ERROR);
-    InfoResultModel info = addInfo("fileSave");
+
-    for (FileResultModel fileResult : files.values()) {
+    for (FileResultModel fileResult : files) {
+
+  }
+
+  @JsonIgnore
+  public Path getFileToDownload() {
+    if (files.size() != 1) {
+      return null;
+    }
+    File file = files.get(0).getFile();
+    if (file == null) {
+      return null;
+    }
+    return file.toPath();
+  }
+
+  @JsonIgnore
+  public List<File> getFileList() {
+    return files.stream().filter(f -> f.getFile() != null).map(FileResultModel::getFile)
+        .collect(
+            Collectors.toList());
+  }
+
+  /**
+   * Calculates the total file size of all files associated with this result.
+   *
+   * @return Total file size.
+   */
+  public long computeFileSizeTotal() {
+    long byteCount = 0;
+    for (FileResultModel file : files) {
+      byteCount += file.getLength();
+    }
+    return byteCount;
+  }
+
+  /**
+   * Get a comma separated list of all files associated with this result.
+   *
+   * @return Comma separated list of files.
+   */
+  @JsonIgnore
+  public String getFormattedFileList() {
+    return files.stream().map(FileResultModel::getFilename)
+        .collect(Collectors.joining(", "));

MOV31 MOV31 INS31 INS31 UPD74 UPD74 INS29 MOV25 INS78 INS78 INS83 INS74 INS42 INS8 INS29 UPD39 UPD42 INS8 INS29 INS78 INS83 MOV43 INS42 INS8 UPD43 UPD43 MOV43 UPD74 INS65 INS65 INS42 INS25 INS60 INS25 INS42 INS43 INS43 INS41 INS65 INS65 INS60 INS70 INS41 INS65 INS65 INS42 INS41 UPD42 UPD74 UPD42 UPD43 MOV43 INS66 INS66 INS66 INS66 INS27 INS8 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS66 INS66 INS39 INS59 INS44 INS42 INS8 INS42 INS66 INS66 INS32 UPD43 UPD42 UPD42 UPD42 MOV32 MOV34 INS21 INS21 MOV41 INS32 INS34 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS34 UPD43 MOV43 UPD42 MOV42 MOV21 INS32 INS42 INS32 UPD42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS33 INS32 INS42 INS33 INS32 INS42 INS90 INS42 INS42 UPD42 UPD7 INS32 INS42 INS90 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS40 INS42 INS42 INS34 INS32 INS42 INS86 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS27 INS42 INS42 INS42 INS32 INS33 INS42 INS42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL33 DEL27 DEL27 DEL8 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL44 DEL8