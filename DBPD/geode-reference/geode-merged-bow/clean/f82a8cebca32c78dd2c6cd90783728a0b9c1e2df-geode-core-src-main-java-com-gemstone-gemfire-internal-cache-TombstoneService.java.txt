made vars private; removed unused code

-  public Object blockGCLock = new Object();
+  public final Object blockGCLock = new Object();
-    startSweeper(this.replicatedTombstoneSweeper);
-    startSweeper(this.nonReplicatedTombstoneSweeper);
+    this.replicatedTombstoneSweeper.start();
+    this.nonReplicatedTombstoneSweeper.start();
-  private void startSweeper(TombstoneSweeper tombstoneSweeper) {
-    synchronized(tombstoneSweeper) {
-      if (tombstoneSweeper.sweeperThread == null) {
-        tombstoneSweeper.sweeperThread = new Thread(LoggingThreadGroup.createThreadGroup("Destroyed Entries Processors",
-            logger), tombstoneSweeper);
-        tombstoneSweeper.sweeperThread.setDaemon(true);
-        String product = "GemFire";
-        if (tombstoneSweeper == this.replicatedTombstoneSweeper) {
-          tombstoneSweeper.sweeperThread.setName(product + " Garbage Collection Thread 1");
-        } else {
-          tombstoneSweeper.sweeperThread.setName(product + " Garbage Collection Thread 2");
-        }
-        tombstoneSweeper.sweeperThread.start();
-      }
-    }
-  }
-  
-    stopSweeper(this.replicatedTombstoneSweeper);
-    stopSweeper(this.nonReplicatedTombstoneSweeper);
+    this.replicatedTombstoneSweeper.stop();
+    this.nonReplicatedTombstoneSweeper.stop();
-  private void stopSweeper(TombstoneSweeper t) {
-    Thread sweeperThread;
-    synchronized(t) {
-      sweeperThread = t.sweeperThread;
-      t.isStopped = true;
-      if (sweeperThread != null) {
-        t.notifyAll();
-      }
-    }
-    try {
-      sweeperThread.join(100);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-    }
-    t.tombstones.clear();
-  }
-  
-  /**
+ /**
-    final Queue<Tombstone> tombstones;
+    private final Queue<Tombstone> tombstones;
-    final AtomicLong queueSize;
+    private final AtomicLong queueSize;
-    Thread sweeperThread;
+    private final Thread sweeperThread;
-    boolean batchMode;
-    /**
-     * this suspends batch expiration.  It is intended for administrative use
-     * so an operator can suspend the garbage-collection of tombstones for
-     * replicated/partitioned regions if a persistent member goes off line
-     */
-    volatile boolean batchExpirationSuspended;
+    private final boolean batchMode;
-    Tombstone currentTombstone;
+    private Tombstone currentTombstone;
-    final StoppableReentrantLock currentTombstoneLock;
+    private final StoppableReentrantLock currentTombstoneLock;
-    Set<Tombstone> expiredTombstones;
+    private Set<Tombstone> expiredTombstones;
+      this.batchMode = batchMode;
-        this.batchMode = true;
+      this.sweeperThread = new Thread(LoggingThreadGroup.createThreadGroup("Destroyed Entries Processors", logger), this);
+      this.sweeperThread.setDaemon(true);
+      String product = "GemFire";
+      String threadName = product + " Garbage Collection Thread " + (batchMode ? "1" : "2");
+      this.sweeperThread.setName(threadName);
-    
+
+  synchronized void start() {
+    this.sweeperThread.start();
+  }
+
+  synchronized void stop() {
+    this.isStopped = true;
+    if (this.sweeperThread != null) {
+      notifyAll();
+    }
+    try {
+      this.sweeperThread.join(100);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+    }
+    getQueue().clear();
+  }
-    /** stop tombstone removal for sweepers that have batchMode==true */
-    @SuppressWarnings("unused")
-    void suspendBatchExpiration() {
-      this.batchExpirationSuspended = true;
-    }
-    
-    
-    /** enables tombstone removal for sweepers that have batchMode==true */
-    @SuppressWarnings("unused")
-    void resumeBatchExpiration () {
-      if (this.batchExpirationSuspended) {
-        this.batchExpirationSuspended = false; // volatile write
-      }
-    }
-    
-      if ((!batchExpirationSuspended &&
-          (this.forceBatchExpiration || (this.expiredTombstones.size() >= EXPIRED_TOMBSTONE_LIMIT)))
-        || testHook_batchExpired != null) {
+      if (this.forceBatchExpiration 
+          || this.expiredTombstones.size() >= EXPIRED_TOMBSTONE_LIMIT
+          || testHook_batchExpired != null) {
-              for (Iterator<Tombstone> it = tombstones.iterator(); it.hasNext(); ) {
+              for (Iterator<Tombstone> it = getQueue().iterator(); it.hasNext(); ) {

INS83 INS31 INS31 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS39 INS42 INS8 INS83 MOV39 UPD42 MOV42 INS8 MOV42 MOV42 MOV42 MOV21 MOV21 INS21 MOV60 INS60 INS21 INS21 MOV21 MOV25 MOV54 INS21 UPD42 UPD42 MOV22 UPD42 UPD42 INS32 INS43 INS59 INS32 INS32 INS27 INS32 UPD27 MOV27 INS42 INS22 INS22 INS42 INS9 INS42 INS42 INS27 INS22 INS42 INS42 INS22 INS42 INS22 INS33 INS32 INS42 MOV27 MOV27 INS52 INS42 INS52 INS52 INS42 INS42 INS45 INS36 INS52 INS42 INS52 INS42 UPD42 MOV52 UPD42 MOV42 INS32 INS42 MOV27 INS16 INS42 INS22 INS42 INS45 INS45 INS52 INS42 INS32 UPD42 MOV42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL33 DEL27 DEL40 DEL42 DEL9 DEL32 DEL21 DEL42 DEL27 DEL40 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL40 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL52 DEL42 DEL22 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL40 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL40 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL9 DEL40 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL7 DEL42 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL39 DEL42 DEL8 DEL31 DEL36 DEL42 DEL38 DEL36 DEL36 DEL27