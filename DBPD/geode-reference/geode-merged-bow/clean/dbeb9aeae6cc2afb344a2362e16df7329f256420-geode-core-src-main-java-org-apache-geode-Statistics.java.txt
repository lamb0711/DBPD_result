Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.distributed.DistributedSystem;
+// import org.apache.geode.distributed.DistributedSystem;
- * Instances of this interface maintain the values of various application-defined
- * statistics.  The statistics themselves are described by an instance
- * of {@link StatisticsType}.
+ * Instances of this interface maintain the values of various application-defined statistics. The
+ * statistics themselves are described by an instance of {@link StatisticsType}.
- * To get an instance of this interface use an instance of
- * {@link StatisticsFactory}.
+ * To get an instance of this interface use an instance of {@link StatisticsFactory}.
- * For improved performance, each statistic may be referred to by
- * its {@link #nameToDescriptor descriptor}.
+ * For improved performance, each statistic may be referred to by its {@link #nameToDescriptor
+ * descriptor}.
- * For optimal performance, each statistic may be referred to by
- * its {@link #nameToId id} in the statistics object. Note that
- * ids can not be mapped back to their name and methods that take ids
- * are unsafe. It is important to call the correct type of method
- * for the given id. For example if your stat is a long then incLong
- * must be called instead of incInt.
- * <p>Note that as of the 5.1 release the <code>incInt</code>,
- * <code>incLong</code>, and <code>incDouble</code> methods no longer
- * return the new value of the statistic. They now return <code>void</code>.
- * This incompatible change was made
- * to allow for a more efficient concurrent increment implementation.
+ * For optimal performance, each statistic may be referred to by its {@link #nameToId id} in the
+ * statistics object. Note that ids can not be mapped back to their name and methods that take ids
+ * are unsafe. It is important to call the correct type of method for the given id. For example if
+ * your stat is a long then incLong must be called instead of incInt.
+ * <p>
+ * Note that as of the 5.1 release the <code>incInt</code>, <code>incLong</code>, and
+ * <code>incDouble</code> methods no longer return the new value of the statistic. They now return
+ * <code>void</code>. This incompatible change was made to allow for a more efficient concurrent
+ * increment implementation.
-   * Closes these statistics.  After statistics have been closed, they
-   * are no longer archived.
-   * A value access on a closed statistics always results in zero.
-   * A value modification on a closed statistics is ignored.
+   * Closes these statistics. After statistics have been closed, they are no longer archived. A
+   * value access on a closed statistics always results in zero. A value modification on a closed
+   * statistics is ignored.
-  ////////////////////////  accessor Methods  ///////////////////////
+  //////////////////////// accessor Methods ///////////////////////
-   * Returns the id of the statistic with the given name in this
-   * statistics instance.
+   * Returns the id of the statistic with the given name in this statistics instance.
-   * @throws IllegalArgumentException
-   *         No statistic named <code>name</code> exists in this
-   *         statistics instance.
+   * @throws IllegalArgumentException No statistic named <code>name</code> exists in this statistics
+   *         instance.
-  
+
-   * Returns the descriptor of the statistic with the given name in this
-   * statistics instance.
+   * Returns the descriptor of the statistic with the given name in this statistics instance.
-   * @throws IllegalArgumentException
-   *         No statistic named <code>name</code> exists in this
-   *         statistics instance.
+   * @throws IllegalArgumentException No statistic named <code>name</code> exists in this statistics
+   *         instance.
+
+
+
-   * Returns true if modifications are atomic. This means that multiple threads,
-   * can safely modify this instance without extra synchronization.
+   * Returns true if modifications are atomic. This means that multiple threads, can safely modify
+   * this instance without extra synchronization.
-   * Returns false if modifications are not atomic. This means that modifications
-   * to this instance are cheaper but not thread safe.
+   * Returns false if modifications are not atomic. This means that modifications to this instance
+   * are cheaper but not thread safe.
+
-  
-  ////////////////////////  set() Methods  ///////////////////////
+
+  //////////////////////// set() Methods ///////////////////////
-   * Sets the value of a statistic with the given <code>id</code>
-   * whose type is <code>int</code>.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * Sets the value of a statistic with the given <code>id</code> whose type is <code>int</code>.
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists named <code>name</code> or
-   *         if the statistic with name <code>name</code> is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists named <code>name</code> or if the
+   *         statistic with name <code>name</code> is not of type <code>int</code>.
-   * @throws IllegalArgumentException
-   *         If no statistic exists for the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists for the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>int</code>.
-   * Sets the value of a statistic with the given <code>id</code>
-   * whose type is <code>long</code>.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * Sets the value of a statistic with the given <code>id</code> whose type is <code>long</code>.
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists for the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists for the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>long</code>.
-   * @throws IllegalArgumentException
-   *         If no statistic exists named <code>name</code> or
-   *         if the statistic with name <code>name</code> is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists named <code>name</code> or if the
+   *         statistic with name <code>name</code> is not of type <code>long</code>.
-   * Sets the value of a statistic with the given <code>id</code>
-   * whose type is <code>double</code>.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * Sets the value of a statistic with the given <code>id</code> whose type is <code>double</code>.
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists for the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists for the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>double</code>.
+
-   * @throws IllegalArgumentException
-   *         If no statistic exists named <code>name</code> or
-   *         if the statistic with name <code>name</code> is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists named <code>name</code> or if the
+   *         statistic with name <code>name</code> is not of type <code>double</code>.
-  ///////////////////////  get() Methods  ///////////////////////
+  /////////////////////// get() Methods ///////////////////////
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the specified <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists with the specified
+   *         <code>descriptor</code> or if the described statistic is not of type <code>int</code>.
+
-   * Returns the value of the statistic of type <code>int</code> at
-   * the given name.
+   * Returns the value of the statistic of type <code>int</code> at the given name.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>int</code>.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the specified <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists with the specified
+   *         <code>descriptor</code> or if the described statistic is not of type <code>long</code>.
+
-   * Returns the value of the statistic of type <code>long</code> at
-   * the given name.
+   * Returns the value of the statistic of type <code>long</code> at the given name.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>long</code>.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the specified <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists with the specified
+   *         <code>descriptor</code> or if the described statistic is not of type
+   *         <code>double</code>.
+
-   * Returns the value of the statistic of type <code>double</code> at
-   * the given name.
+   * Returns the value of the statistic of type <code>double</code> at the given name.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>double</code>.
-   * @param descriptor a statistic descriptor obtained with {@link #nameToDescriptor}
-   * or {@link StatisticsType#nameToDescriptor}.
-   * @throws IllegalArgumentException
-   *         If the described statistic does not exist
+   * @param descriptor a statistic descriptor obtained with {@link #nameToDescriptor} or
+   *        {@link StatisticsType#nameToDescriptor}.
+   * @throws IllegalArgumentException If the described statistic does not exist
-   * @throws IllegalArgumentException
-   *         If the named statistic does not exist
+   * @throws IllegalArgumentException If the named statistic does not exist
-   * @param descriptor a statistic descriptor obtained with {@link #nameToDescriptor}
-   * or {@link StatisticsType#nameToDescriptor}.
-   * @throws IllegalArgumentException
-   *         If the described statistic does not exist
+   * @param descriptor a statistic descriptor obtained with {@link #nameToDescriptor} or
+   *        {@link StatisticsType#nameToDescriptor}.
+   * @throws IllegalArgumentException If the described statistic does not exist
-   * @throws IllegalArgumentException
-   *         If the named statistic does not exist
+   * @throws IllegalArgumentException If the named statistic does not exist
-  ////////////////////////  inc() Methods  ////////////////////////
+  //////////////////////// inc() Methods ////////////////////////
-   * Increments the value of the identified statistic of type <code>int</code>
-   * by the given amount.
+   * Increments the value of the identified statistic of type <code>int</code> by the given amount.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * Increments the value of the described statistic of type <code>int</code>
-   * by the given amount.
+   * Increments the value of the described statistic of type <code>int</code> by the given amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>int</code>.
-   * Increments the value of the statistic of type <code>int</code> with
-   * the given name by a given amount.
+   * Increments the value of the statistic of type <code>int</code> with the given name by a given
+   * amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>int</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>int</code>.
-   * Increments the value of the identified statistic of type <code>long</code>
-   * by the given amount.
+   * Increments the value of the identified statistic of type <code>long</code> by the given amount.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * Increments the value of the described statistic of type <code>long</code>
-   * by the given amount.
+   * Increments the value of the described statistic of type <code>long</code> by the given amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>long</code>.
+
-   * Increments the value of the statistic of type <code>long</code> with
-   * the given name by a given amount.
+   * Increments the value of the statistic of type <code>long</code> with the given name by a given
+   * amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>long</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>long</code>.
-   * Increments the value of the identified statistic of type <code>double</code>
-   * by the given amount.
+   * Increments the value of the identified statistic of type <code>double</code> by the given
+   * amount.
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
-   * @throws ArrayIndexOutOfBoundsException
-   *         If the id is invalid.
+   * @throws ArrayIndexOutOfBoundsException If the id is invalid.
-   * Increments the value of the described statistic of type <code>double</code>
-   * by the given amount.
+   * Increments the value of the described statistic of type <code>double</code> by the given
+   * amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>double</code>.
+
-   * Increments the value of the statistic of type <code>double</code> with
-   * the given name by a given amount.
+   * Increments the value of the statistic of type <code>double</code> with the given name by a
+   * given amount.
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>double</code>.
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>double</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>int</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>int</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>int</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>int</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>long</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>long</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by long running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by long running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>long</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>long</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by double running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by double running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
-   * @param id a statistic id obtained with {@link #nameToId}
-   * or {@link StatisticsType#nameToId}.
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
+   * @param id a statistic id obtained with {@link #nameToId} or {@link StatisticsType#nameToId}.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by double running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by double running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with name <code>name</code> or
-   *         if the statistic named <code>name</code> is not of
-   *         type <code>double</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with name <code>name</code> or if the
+   *         statistic named <code>name</code> is not of type <code>double</code>.
-   * Provide a callback to compute the value of this statistic
-   * every sample interval and use that as the value of the stat.
+   * Provide a callback to compute the value of this statistic every sample interval and use that as
+   * the value of the stat.
-   * The callback should return quickly because it is invoked on a shared thread.
-   * It should not do any expensive computations, network calls, or access any resources
-   * under locks that may be locked by double running processes.
+   * The callback should return quickly because it is invoked on a shared thread. It should not do
+   * any expensive computations, network calls, or access any resources under locks that may be
+   * locked by double running processes.
-   * statistic-sampling-enabled is set to true, and it will be invoked at intervals
-   * determined by the statistic-sampling-rate.
+   * statistic-sampling-enabled is set to true, and it will be invoked at intervals determined by
+   * the statistic-sampling-rate.
-   * Get methods are not guaranteed to recompute a new value, they may return
-   * the last sampled value
+   * Get methods are not guaranteed to recompute a new value, they may return the last sampled value
+   * 
-   * @param supplier a callback that will return the value of the stat. This
-   * replaces any previously registered supplier. If the passed in supplier is null, it
-   * will remove any existing supplier
-   * @return the previously registered supplier, or null if there was no previously registered supplier
-   * @throws IllegalArgumentException
-   *         If no statistic exists with the given <code>descriptor</code> or
-   *         if the described statistic is not of
-   *         type <code>double</code>.
+   * @param supplier a callback that will return the value of the stat. This replaces any previously
+   *        registered supplier. If the passed in supplier is null, it will remove any existing
+   *        supplier
+   * @return the previously registered supplier, or null if there was no previously registered
+   *         supplier
+   * @throws IllegalArgumentException If no statistic exists with the given <code>descriptor</code>
+   *         or if the described statistic is not of type <code>double</code>.

MOV31 MOV31 MOV43 UPD42 MOV44 INS39 UPD42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL39 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66