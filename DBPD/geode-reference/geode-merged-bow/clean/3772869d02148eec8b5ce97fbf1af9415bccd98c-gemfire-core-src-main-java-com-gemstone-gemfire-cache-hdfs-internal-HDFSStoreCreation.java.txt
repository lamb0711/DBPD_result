GEODE-10: Refactor HdfsStore api to match spec

* Currently HdfsStore's configuration object is nested and a user needs to
  create multiple sub objects to manage the store instance. This is less usable
  and gets confusing at times. User also gets exposed to a lot of internal
  details. So replacing nested configuration with a flat structure will be
  better.
* Rename members

-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributes;
-import com.gemstone.gemfire.cache.hdfs.HDFSStore.HDFSCompactionConfig;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreConfigHolder.AbstractHDFSCompactionConfigHolder;
- * HDFS store configuration.
- * 
- * <pre>
- * {@code
- * <hdfs-store name="" home-dir="" namenode-url="">
- * <hdfs-compaction strategy="" auto-compact="" max-input-file-size-mb="" 
- *                  min-input-file-count="" max-input-file-count="" 
- *                  max-concurrency="" auto-major-compaction="" 
- *                  major-compaction-interval-mins="" major-compaction-concurrency=""/>
- * </hdfs-store>
- * }
- * </pre>
- * 
-    this.configHolder = new HDFSStoreConfigHolder(config == null ? null
-        : config.configHolder);
+    this.configHolder = new HDFSStoreConfigHolder(config == null ? null : config.configHolder);
-  /**
-   * Sets the HDFS event queue attributes
-   * This causes the store to use the {@link HDFSEventQueueAttributes}.
-   * @param hdfsEventQueueAttrs the attributes of the HDFS Event queue
-   * @return a reference to this RegionFactory object
-   * 
-   */
-  public HDFSStoreFactory setHDFSEventQueueAttributes(HDFSEventQueueAttributes hdfsEventQueueAttrs) {
-    configHolder.setHDFSEventQueueAttributes(hdfsEventQueueAttrs);
-    return this;
-  }
-  
-  public HDFSEventQueueAttributes getHDFSEventQueueAttributes() {
-    return configHolder.getHDFSEventQueueAttributes();
-  }
-
-  @Override
-  public HDFSStoreFactory setHDFSCompactionConfig(HDFSCompactionConfig config) {
-    configHolder.setHDFSCompactionConfig(config);
+  public HDFSStoreFactory setMaxWriteOnlyFileSize(int maxFileSize) {
+    configHolder.setMaxWriteOnlyFileSize(maxFileSize);
-  public HDFSCompactionConfigFactory createCompactionConfigFactory(String name) {
-    return configHolder.createCompactionConfigFactory(name);
-  }
-  @Override
-  
-  public HDFSStoreFactory setMaxFileSize(int maxFileSize) {
-    configHolder.setMaxFileSize(maxFileSize);
-    return this;
-  }
-
-  @Override
-  public HDFSStoreFactory setFileRolloverInterval(int count) {
-    configHolder.setFileRolloverInterval(count);
+  public HDFSStoreFactory setWriteOnlyFileRolloverInterval(int count) {
+    configHolder.setWriteOnlyFileRolloverInterval(count);
-  /**
-   * Config class for compaction configuration. A concrete class must
-   * extend setters for all configurations it consumes. This class will throw an
-   * exception for any unexpected configuration. Concrete class must also
-   * validate the configuration
-   * 
-   * @author ashvina
-   */
-  public static class HDFSCompactionConfigFactoryImpl implements
-      HDFSCompactionConfigFactory {
-    private AbstractHDFSCompactionConfigHolder configHolder;
+  @Override
+  public HDFSStoreFactory setMinorCompactionThreads(int count) {
+    configHolder.setMinorCompactionThreads(count);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMaxInputFileSizeMB(int size) {
-      configHolder.setMaxInputFileSizeMB(size);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMajorCompaction(boolean auto) {
+    configHolder.setMajorCompaction(auto);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMinInputFileCount(int count) {
-      configHolder.setMinInputFileCount(count);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMajorCompactionInterval(int count) {
+    configHolder.setMajorCompactionInterval(count);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMaxInputFileCount(int count) {
-      configHolder.setMaxInputFileCount(count);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMajorCompactionThreads(int count) {
+    configHolder.setMajorCompactionThreads(count);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMaxThreads(int count) {
-      configHolder.setMaxThreads(count);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMaxInputFileSizeMB(int size) {
+    configHolder.setMaxInputFileSizeMB(size);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setAutoMajorCompaction(boolean auto) {
-      configHolder.setAutoMajorCompaction(auto);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMinInputFileCount(int count) {
+    configHolder.setMinInputFileCount(count);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMajorCompactionIntervalMins(int count) {
-      configHolder.setMajorCompactionIntervalMins(count);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setMaxInputFileCount(int count) {
+    configHolder.setMaxInputFileCount(count);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfigFactory setMajorCompactionMaxThreads(int count) {
-      configHolder.setMajorCompactionMaxThreads(count);
-      return this;
-    }
-        
-    @Override
-    public HDFSCompactionConfigFactory setOldFilesCleanupIntervalMins(int interval) {
-      configHolder.setOldFilesCleanupIntervalMins(interval);
-      return this;
-    }
+  @Override
+  public HDFSStoreFactory setPurgeInterval(int interval) {
+    configHolder.setPurgeInterval(interval);
+    return this;
+  }
-    @Override
-    public HDFSCompactionConfig getConfigView() {
-      return configHolder.getConfigView();
-    }
-    
-    @Override
-    public HDFSCompactionConfig create() throws GemFireConfigException {
-      HDFSCompactionConfigFactoryImpl config = createInstance(configHolder.getCompactionStrategy());
-      config.configHolder.copyFrom(this.configHolder);
-      config.configHolder.validate();
-      return (HDFSCompactionConfig) config.configHolder;
-    }
-    
-    private static HDFSCompactionConfigFactoryImpl createInstance(String name) {
-      HDFSCompactionConfigFactoryImpl impl = new HDFSCompactionConfigFactoryImpl();
-      impl.configHolder = AbstractHDFSCompactionConfigHolder.createInstance(name);
-      return impl;
-    }
+  @Override
+  public HDFSStoreFactory setDiskStoreName(String name) {
+    configHolder.setDiskStoreName(name);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setMaxMemory(int memory) {
+    configHolder.setMaxMemory(memory);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setBatchInterval(int intervalMillis) {
+    configHolder.setBatchInterval(intervalMillis);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setBatchSize(int size) {
+    configHolder.setBatchSize(size);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setBufferPersistent(boolean isPersistent) {
+    configHolder.setBufferPersistent(isPersistent);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setSynchronousDiskWrite(boolean isSynchronous) {
+    configHolder.setSynchronousDiskWrite(isSynchronous);
+    return this;
+  }
+
+  @Override
+  public HDFSStoreFactory setDispatcherThreads(int dispatcherThreads) {
+    configHolder.setDispatcherThreads(dispatcherThreads);
+    return this;

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV78 MOV43 UPD42 MOV44 MOV43 INS42 MOV44 UPD42 MOV44 MOV78 UPD43 UPD42 MOV44 MOV78 INS43 UPD42 MOV44 UPD42 UPD43 UPD43 UPD43 MOV78 UPD43 UPD42 MOV44 INS78 UPD43 UPD42 MOV44 MOV78 UPD43 UPD42 INS44 INS78 UPD43 UPD42 INS44 MOV78 UPD43 UPD42 INS44 MOV78 UPD43 UPD42 INS44 UPD43 UPD42 INS44 MOV78 UPD83 UPD43 UPD42 INS41 INS21 MOV41 UPD42 INS21 INS41 INS42 UPD42 UPD42 UPD42 UPD42 INS41 INS42 UPD42 INS41 UPD42 INS39 INS42 MOV41 INS42 UPD42 INS39 INS42 MOV41 UPD42 INS39 INS42 MOV41 UPD42 INS39 INS42 INS21 MOV41 UPD42 INS39 INS42 MOV41 UPD42 INS39 INS42 INS52 INS32 INS32 INS52 INS52 INS52 INS32 INS32 INS52 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL44 DEL32 DEL41 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL52 DEL42 DEL22 DEL40 DEL42 DEL32 DEL21 DEL42 DEL43 DEL40 DEL11 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL40 DEL32 DEL7 DEL42 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL55