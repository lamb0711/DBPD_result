Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** 
- * Caches are obtained from the {@link CacheFactory#create()} method.
- * See {@link CacheFactory} for common usage patterns for creating the cache instance.
+/**
+ * Caches are obtained from the {@link CacheFactory#create()} method. See {@link CacheFactory} for
+ * common usage patterns for creating the cache instance.
- * When a cache is created a {@link DistributedSystem} is also created.
- * This system tells the cache where to find other caches on the network
- * and how to communicate with them.
- * The system can also specify a
- * <a href="../distribution/DistributedSystem.html#cache-xml-file">"cache-xml-file"</a>
- * property which will cause this cache to be initialized with the contents
- * of that file. The contents must comply with the
- * <code>"doc-files/cache8_0.dtd"</code> file
- * and the top level element must be a <code>cache</code> element.
+ * When a cache is created a {@link DistributedSystem} is also created. This system tells the cache
+ * where to find other caches on the network and how to communicate with them. The system can also
+ * specify a <a href="../distribution/DistributedSystem.html#cache-xml-file">"cache-xml-file"</a>
+ * property which will cause this cache to be initialized with the contents of that file. The
+ * contents must comply with the <code>"doc-files/cache8_0.dtd"</code> file and the top level
+ * element must be a <code>cache</code> element.
- * When a cache will no longer be used it should be {@link #close() closed}.
- * Once it {@link #isClosed is closed} any attempt to use it or any {@link Region}
- * obtained from it will cause a {@link CacheClosedException} to be thrown.
+ * When a cache will no longer be used it should be {@link #close() closed}. Once it
+ * {@link #isClosed is closed} any attempt to use it or any {@link Region} obtained from it will
+ * cause a {@link CacheClosedException} to be thrown.
- * <p>A cache can have multiple root regions, each with a different name.
+ * <p>
+ * A cache can have multiple root regions, each with a different name.
-   * Terminates this object cache and releases all the resources.
-   * Calls {@link Region#close} on each region in the cache.
-   * After this cache is closed, any further
-   * method call on this cache or any region object will throw
-   * {@link CacheClosedException}, unless otherwise noted.
-   * @param keepalive whether the server should keep the durable client's queues alive for the timeout period
+   * Terminates this object cache and releases all the resources. Calls {@link Region#close} on each
+   * region in the cache. After this cache is closed, any further method call on this cache or any
+   * region object will throw {@link CacheClosedException}, unless otherwise noted.
+   * 
+   * @param keepalive whether the server should keep the durable client's queues alive for the
+   *        timeout period
-  public void close(boolean keepalive);  
-  
+  public void close(boolean keepalive);
+
-   * Creates a VM region using the specified
-   * RegionAttributes.
+   * Creates a VM region using the specified RegionAttributes.
-   * @throws RegionExistsException if a region is already in
-   * this cache
-   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws RegionExistsException if a region is already in this cache
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock
+   *         for Scope.GLOBAL
-  public <K,V> Region<K,V> createVMRegion(String name, RegionAttributes<K,V> aRegionAttributes)
-  throws RegionExistsException, TimeoutException;
+  public <K, V> Region<K, V> createVMRegion(String name, RegionAttributes<K, V> aRegionAttributes)
+      throws RegionExistsException, TimeoutException;
-   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock
+   *         for Scope.GLOBAL
-  public <K,V> Region<K,V> createRegion(String name, RegionAttributes<K,V> aRegionAttributes)
-    throws RegionExistsException, TimeoutException;
+  public <K, V> Region<K, V> createRegion(String name, RegionAttributes<K, V> aRegionAttributes)
+      throws RegionExistsException, TimeoutException;
-   * Creates a {@link RegionFactory} which can be used to specify additional
-   * attributes for {@link Region} creation.
+   * Creates a {@link RegionFactory} which can be used to specify additional attributes for
+   * {@link Region} creation.
+   * 
-  public <K,V> RegionFactory<K,V> createRegionFactory();
-  
+  public <K, V> RegionFactory<K, V> createRegionFactory();
+
-   * Creates a {@link RegionFactory} for the most commonly used {@link Region} types
-   * defined by {@link RegionShortcut}
+   * Creates a {@link RegionFactory} for the most commonly used {@link Region} types defined by
+   * {@link RegionShortcut}
+   * 
-  public <K,V> RegionFactory<K,V> createRegionFactory(RegionShortcut atts);
-  
+  public <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut atts);
+
-   * Creates a {@link RegionFactory} for creating a {@link Region} from
-   * {@link RegionAttributes} mapped to this regionAttributesId
+   * Creates a {@link RegionFactory} for creating a {@link Region} from {@link RegionAttributes}
+   * mapped to this regionAttributesId
+   * 
-  public <K,V> RegionFactory<K,V> createRegionFactory(String regionAttributesId);
-  
+  public <K, V> RegionFactory<K, V> createRegionFactory(String regionAttributesId);
+
-   * Creates a {@link RegionFactory} for creating a {@link Region} from
-   * the given regionAttributes
+   * Creates a {@link RegionFactory} for creating a {@link Region} from the given regionAttributes
+   * 
-  public <K,V> RegionFactory<K,V> createRegionFactory(RegionAttributes<K,V> regionAttributes);
-  
+  public <K, V> RegionFactory<K, V> createRegionFactory(RegionAttributes<K, V> regionAttributes);
+
-   * Internal GemStone method for accessing the internationalized 
-   * logging object for GemFire, use {@link #getLogger()} instead.
-   * This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+   * Internal GemStone method for accessing the internationalized logging object for GemFire, use
+   * {@link #getLogger()} instead. This method does not throw <code>CacheClosedException</code> if
+   * the cache is closed.
+   * 
-  
+
-   * Internal GemStone method for accessing the internationalized 
-   * logging object for GemFire, use {@link #getSecurityLogger()} instead.
-   * This method does not throw
+   * Internal GemStone method for accessing the internationalized logging object for GemFire, use
+   * {@link #getSecurityLogger()} instead. This method does not throw
+   * 
-  
+
-   * Gets the number of seconds a cache operation will wait to obtain
-   * a distributed lock lease.
-   * This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+   * Gets the number of seconds a cache operation will wait to obtain a distributed lock lease. This
+   * method does not throw <code>CacheClosedException</code> if the cache is closed.
+
-   * Sets the number of seconds a cache operation may wait to obtain a
-   * distributed lock lease before timing out.
+   * Sets the number of seconds a cache operation may wait to obtain a distributed lock lease before
+   * timing out.
-   * Gets the frequency (in seconds) at which a message will be sent by the
-   * primary cache-server to all the secondary cache-server nodes to remove the
-   * events which have already been dispatched from the queue.
+   * Gets the frequency (in seconds) at which a message will be sent by the primary cache-server to
+   * all the secondary cache-server nodes to remove the events which have already been dispatched
+   * from the queue.
-   * Sets the frequency (in seconds) at which a message will be sent by the
-   * primary cache-server node to all the secondary cache-server nodes to remove
-   * the events which have already been dispatched from the queue.
+   * Sets the frequency (in seconds) at which a message will be sent by the primary cache-server
+   * node to all the secondary cache-server nodes to remove the events which have already been
+   * dispatched from the queue.
-   * @param seconds -
-   *          the time interval in seconds
-   * @throws IllegalArgumentException
-   *           if <code>seconds</code> is less than zero
+   * @param seconds - the time interval in seconds
+   * @throws IllegalArgumentException if <code>seconds</code> is less than zero
-  
+
-   * Gets the length, in seconds, of distributed lock leases obtained
-   * by this cache.
-   * This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+   * Gets the length, in seconds, of distributed lock leases obtained by this cache. This method
+   * does not throw <code>CacheClosedException</code> if the cache is closed.
+
-   * Sets the length, in seconds, of distributed lock leases obtained
-   * by this cache.
+   * Sets the length, in seconds, of distributed lock leases obtained by this cache.
-  
+
-   * Gets the number of seconds a cache
-   * {@link org.apache.geode.cache.Region#get(Object) get} operation
-   * can spend searching for a value before it times out.
-   * The search includes any time spent loading the object.
-   * When the search times out it causes the get to fail by throwing
-   * an exception.
-   * This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+   * Gets the number of seconds a cache {@link org.apache.geode.cache.Region#get(Object) get}
+   * operation can spend searching for a value before it times out. The search includes any time
+   * spent loading the object. When the search times out it causes the get to fail by throwing an
+   * exception. This method does not throw <code>CacheClosedException</code> if the cache is closed.
+
-   * Sets the number of seconds a cache get operation can spend searching
-   * for a value.
+   * Sets the number of seconds a cache get operation can spend searching for a value.
-   * Creates a new cache server, with the default configuration,
-   * that will allow clients to access this cache.
-   * <p>For the default configuration see the constants in
+   * Creates a new cache server, with the default configuration, that will allow clients to access
+   * this cache.
+   * <p>
+   * For the default configuration see the constants in
-   * Returns a collection of all of the <code>CacheServer</code>s
-   * that can serve the contents of this <code>Cache</code> to clients.
+   * Returns a collection of all of the <code>CacheServer</code>s that can serve the contents of
+   * this <code>Cache</code> to clients.
-  
+
-   * Adds a gateway event conflict resolution resolver.  This is invoked
-   * if an event is processed that comes from a different distributed system
-   * than the last event to modify the affected entry.  It may alter
-   * the event or disallow the event.  If it does neither the event is applied
-   * to the cache if its timestamp is newer than what is in the cache or if
-   * it is the same and the event's distributed system ID is larger than that
-   * of the last event to modify the affected entry.
+   * Adds a gateway event conflict resolution resolver. This is invoked if an event is processed
+   * that comes from a different distributed system than the last event to modify the affected
+   * entry. It may alter the event or disallow the event. If it does neither the event is applied to
+   * the cache if its timestamp is newer than what is in the cache or if it is the same and the
+   * event's distributed system ID is larger than that of the last event to modify the affected
+   * entry.
+   * 
-  
+
+   * 
-  
+
-   * Sets whether or not this <code>Cache</code> resides in a
-   * long-running "cache server" VM.  A cache server may be an
-   * application VM or may be a stand-along VM launched using {@linkplain
-   * org.apache.geode.admin.AdminDistributedSystem#addCacheServer
-   * administration API} or the <code>cacheserver</code> command line
-   * utility.
+   * Sets whether or not this <code>Cache</code> resides in a long-running "cache server" VM. A
+   * cache server may be an application VM or may be a stand-along VM launched using
+   * {@linkplain org.apache.geode.admin.AdminDistributedSystem#addCacheServer administration API} or
+   * the <code>cacheserver</code> command line utility.
-   * Notifies the server that this client is ready to receive updates.
-   * This method is used by durable clients to notify servers that they
-   * are ready to receive updates. As soon as the server receives this message, 
-   * it will forward updates to this client (if necessary).
+   * Notifies the server that this client is ready to receive updates. This method is used by
+   * durable clients to notify servers that they are ready to receive updates. As soon as the server
+   * receives this message, it will forward updates to this client (if necessary).
-   * Durable clients must call this method after they are done creating regions.
-   * If it is called before the client creates the regions then updates will be lost.
-   * Any time a new {@link Pool} is created and regions have been added to it then
-   * this method needs to be called again.
+   * Durable clients must call this method after they are done creating regions. If it is called
+   * before the client creates the regions then updates will be lost. Any time a new {@link Pool} is
+   * created and regions have been added to it then this method needs to be called again.
-   * Creates {@link GatewaySenderFactory} for creating a
-   * SerialGatewaySender
+   * Creates {@link GatewaySenderFactory} for creating a SerialGatewaySender
-   * Creates {@link AsyncEventQueueFactory} for creating a
-   * AsyncEventQueue
+   * Creates {@link AsyncEventQueueFactory} for creating a AsyncEventQueue
-  
+
-   * Returns all {@link GatewaySender}s for this Cache. 
+   * Returns all {@link GatewaySender}s for this Cache.
-   */  
+   */
+
-  
+
-  public Set<AsyncEventQueue> getAsyncEventQueues(); 
-  
+  public Set<AsyncEventQueue> getAsyncEventQueues();
+
-   */  
+   */
+   * 
-  
+
+   * 
-  
+
-   * Returns a set of the members in the distributed system that have the
-   * given region.  For regions with local scope an empty set is returned.
+   * Returns a set of the members in the distributed system that have the given region. For regions
+   * with local scope an empty set is returned.
+   * 
-  
+
-   * Obtains the snapshot service to allow the cache data to be imported
-   * or exported.
+   * Obtains the snapshot service to allow the cache data to be imported or exported.
-  
+
-   * Test to see whether the Cache is in the process of reconnecting
-   * and recreating a new cache after it has been removed from the system
-   * by other members or has shut down due to missing Roles and is reconnecting.<p>
-   * This will also return true if the Cache has finished reconnecting.
-   * When reconnect has completed you can use {@link Cache#getReconnectedCache} to
-   * retrieve the new cache instance.
+   * Test to see whether the Cache is in the process of reconnecting and recreating a new cache
+   * after it has been removed from the system by other members or has shut down due to missing
+   * Roles and is reconnecting.
+   * <p>
+   * This will also return true if the Cache has finished reconnecting. When reconnect has completed
+   * you can use {@link Cache#getReconnectedCache} to retrieve the new cache instance.
-   * Wait for the Cache to finish reconnecting to the distributed system
-   * and recreate a new Cache.
+   * Wait for the Cache to finish reconnecting to the distributed system and recreate a new Cache.
+   * 
-  
+
-   * Force the Cache to stop reconnecting.  If the Cache
-   * is currently connected this will disconnect and close it.
+   * Force the Cache to stop reconnecting. If the Cache is currently connected this will disconnect
+   * and close it.
-  
+
-   * Returns the new Cache if there was an auto-reconnect and the cache was
-   * recreated.
+   * Returns the new Cache if there was an auto-reconnect and the cache was recreated.

MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS66 UPD66 MOV66 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66