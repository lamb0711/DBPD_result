Merge branch 'feature/GEODE-8' into develop

+    static final boolean DEBUG_FDSOCK = Boolean.getBoolean("jgroups.DEBUG_FDSOCK");
+    
-    volatile Socket              ping_sock=null;                    // socket to the member we monitor // GemStoneAddition - volatile
-    InputStream         ping_input=null;                   // input stream of the socket to the member we monitor
+//    volatile Socket              ping_sock=null;                    // socket to the member we monitor // GemStoneAddition - volatile
+//    InputStream         ping_input=null;                   // input stream of the socket to the member we monitor
-    volatile Thread     pinger_thread=null;                // listens on ping_sock, suspects member if socket is closed
+    volatile PingThread     pinger_thread=null;                // listens on ping_sock, suspects member if socket is closed
-    final Object        sock_mutex=new Object();           // for access to ping_sock, ping_input
-    boolean             socket_closed_in_mutex; // GemStoneAddition - fix race between unsuspect & connecting to stale ping_dest
-      Thread thr = pinger_thread;
+      PingThread thr = pinger_thread;
+        thr.requestStop();
-      Socket sock = ping_sock;
-      if (sock != null) {
-        try {
-          sock.close();
-        }
-        catch (IOException e) {
-          // ignore
-        }
-      }
+      // do not attempt to shut down the ping socket in this
+      // method as the operation can block for a very long
+      // time if there is a network failure, preventing shutdown
+//      Socket sock = ping_sock;
+//      if (sock != null) {
+//        try {
+//          sock.close();
+//        }
+//        catch (IOException e) {
+//          // ignore
+//        }
+//      }
-        Thread t = pinger_thread; // GemStoneAddition, use this for a termination
-        pinger_thread = null;
-        if(t != null && t.isAlive()) {
-            regular_sock_close=true; // (set this before interrupting the pinger)
-            t.interrupt(); // GemStoneAddition
-            sendPingTermination(true); // GemStoneAddition
-            teardownPingSocket();
-        }
+        // bug #52129 - this next step used to be in-lined but is now moved to another
+        // thread in interruptPingerThread because socket operations can block
+        // if there is a network partition
+        interruptPingerThread(true);
-              log.getLogWriter().info(ExternalStrings.
-                  FD_SOCK_FAILURE_DETECTION_RECEIVED_NOTIFICATION_THAT_0_IS_NO_LONGER_SUSPECT,
-                  mbr); 
+                    log.getLogWriter().info(ExternalStrings.
+                        FD_SOCK_FAILURE_DETECTION_RECEIVED_NOTIFICATION_THAT_0_IS_NO_LONGER_SUSPECT,
+                        mbr); 
-                    Thread thr = pinger_thread; // GemStoneAddition: volatile fetch
+                    PingThread thr = pinger_thread; // GemStoneAddition: volatile fetch
-                      interruptPingerThread(); // allows the thread to use the new socket
+                      interruptPingerThread(false); // allows the thread to use the new socket
-                              interruptPingerThread(); // allows the thread to use the new socket
+                              interruptPingerThread(false); // allows the thread to use the new socket
-                        interruptPingerThread();
+                        interruptPingerThread(false);
+        PingThread myThread = (PingThread)Thread.currentThread();
-          if (Thread.currentThread().isInterrupted()) {  // GemStoneAddition -- for safety
+          if (myThread.isInterrupted() || myThread.isStopRequested()) {  // GemStoneAddition -- for safety
-              log.info("FD_SOCK interrupted - pinger thread exiting");
+              log.info("FD_SOCK interrupted or stop requested - pinger thread exiting");
-            if (pinger_thread == null) {
+            if (myThread.isStopRequested()) {
-                log.info("FD_SOCK pinger_thread is null - pinger thread exiting");
+                log.info("FD_SOCK pinger thread requested to stop - pinger thread exiting");
-            switch (setupPingSocket(ping_addr, cached_ping_dest)) { // GemStoneAddition added reselect logic
+            switch (myThread.setupPingSocket(ping_addr, cached_ping_dest, connectTimeout)) { // GemStoneAddition added reselect logic
-                + ", ping_sock=" + ping_sock + ", cache=" + cache);
+                + ", ping_sock=" + myThread.ping_sock + ", cache=" + cache);
-                if(ping_input != null) {
-                    int c=ping_input.read();
+                if(myThread.ping_input != null) {
+                    int c=myThread.ping_input.read();
-                            teardownPingSocket();
+                            myThread.teardownPingSocket(false);
-                          teardownPingSocket();
+                          myThread.teardownPingSocket(false);
-                          ping_sock.getOutputStream().flush();
-                          ping_sock.shutdownOutput();
+                          myThread.ping_sock.getOutputStream().flush();
+                          myThread.ping_sock.shutdownOutput();
-                            handleSocketClose(null);
+                            handleSocketClose(myThread, null);
-                handleSocketClose(ex);
+                handleSocketClose(myThread, ex);
-          pinger_thread=null;
+          if (pinger_thread == myThread) {
+            pinger_thread=null;
+          }
-      if (log.isDebugEnabled()) {
-        log.debug("Attempting to connect to member " + mbr + " at address " + dest + " reason: " + reason);
+      if (DEBUG_FDSOCK) {
+        log.getLogWriter().info(ExternalStrings.DEBUG, "Attempting to connect to member " + mbr + " at address " + dest + " reason: " + reason);
-          if (log.isDebugEnabled()) {
-            log.debug("Attempt to connect to " + mbr + " at address " + dest + " failed.  connect() returned null");
+          if (DEBUG_FDSOCK) {
+            log.getLogWriter().info(ExternalStrings.DEBUG, "Attempt to connect to " + mbr + " at address " + dest + " was unsuccessful.  connect() returned null");
-          if (log.isDebugEnabled()) {
-            log.debug("Attempt to connect to " + mbr + " at address " + dest + " succeeded.");
+          if (DEBUG_FDSOCK) {
+            log.getLogWriter().info(ExternalStrings.DEBUG, "Attempt to connect to " + mbr + " at address " + dest + " succeeded.");
-            if (log.isDebugEnabled()) {
-              log.debug("Attempt to read probe response from " + mbr);
+            if (DEBUG_FDSOCK) {
+              log.getLogWriter().info(ExternalStrings.DEBUG, "Attempting to read probe response from " + mbr);
-              if (log.isDebugEnabled()) {
-                log.debug("Attempt to read probe response from " + mbr + " returned " + response );
+              if (DEBUG_FDSOCK) {
+                log.getLogWriter().info(ExternalStrings.DEBUG, "Attempt to read probe response from " + mbr + " returned " + response );
-      if (log.isDebugEnabled()) {
+      if (DEBUG_FDSOCK) {
-          log.debug("FD_SOCK found that " + mbr
+          log.getLogWriter().info(ExternalStrings.DEBUG, "FD_SOCK found that " + mbr
-          log.debug("FD_SOCK found that " + mbr + (connectSucceeded? " is " : " is not ")
+          log.getLogWriter().info(ExternalStrings.DEBUG, "FD_SOCK found that " + mbr + (connectSucceeded? " is " : " is not ")
-    void handleSocketClose(Exception ex) {
-        teardownPingSocket();     // make sure we have no leftovers
+    void handleSocketClose(PingThread pt, Exception ex) {
+        pt.teardownPingSocket(false);     // make sure we have no leftovers
-        Thread t = pinger_thread; // GemStoneAddition, get the reference once
+        PingThread t = pinger_thread; // GemStoneAddition, get the reference once
-            t=new Thread(GemFireTracer.GROUP, this, "FD_SOCK Ping thread");
+            t=new PingThread(GemFireTracer.GROUP, this, "FD_SOCK Ping thread");
-    synchronized void sendPingTermination(boolean stopping) {
-      Socket ps = ping_sock;
+    synchronized void sendPingTermination(PingThread pt, boolean stopping) {
+      if (pt == null) {
+        return;
+      }
+      Socket ps = pt.ping_sock;
+        catch(Exception ex) {
+        }
-    synchronized void interruptPingerThread() { // GemStoneAddition - synchronization
-        Thread pt = pinger_thread; // GemStoneAddition volatile read
-        if(pt != null && pt.isAlive()) {
-            regular_sock_close=true;
-            sendPingTermination(false); // GemStoneAddition
-            teardownPingSocket(); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job
-            if (log.isDebugEnabled()) {
-              log.debug("'Interrupted' pinger thread");
+    void interruptPingerThread(final boolean stopping) { // GemStoneAddition - synchronization & parameter
+        Thread thr = (new Thread(GemFireTracer.GROUP, "GemFire FD_SOCK Connection Termination Thread") {
+          @Override // GemStoneAddition  
+          public void run() {
+            final PingThread pt;
+            synchronized (FD_SOCK.this) {
+              pt = pinger_thread; // GemStoneAddition volatile read
+              pinger_thread = null;
-      }
+            if (pt != null) {
+              synchronized(pt) {
+                if(pt.isAlive()) {
+                  pt.requestStop();
+                  regular_sock_close=true;
+                  sendPingTermination(pt, stopping); // GemStoneAddition
+                  pt.teardownPingSocket(true); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job
+                  if (log.isDebugEnabled()) {
+                    log.debug("'Interrupted' pinger thread");
+                  }
+                }
+              }
+            }
+          }
+        });
+        thr.setDaemon(true);
+        thr.start();
-    /**
-     * Creates a socket to <code>dest</code>, and assigns it to ping_sock. Also assigns ping_input
-     */
-    int setupPingSocket(IpAddress dest, Address mbr) {
-        synchronized(sock_mutex) {
-          if (socket_closed_in_mutex) {
-            // GemStoneAddition - another thread closed the ping socket
-            socket_closed_in_mutex = false;
-            return SETUP_RESELECT;
-          }
-            if(dest == null) {
-                if(log.isErrorEnabled()) log.error(ExternalStrings.FD_SOCK_DESTINATION_ADDRESS_IS_NULL);
-                return SETUP_RESELECT;
-            }
-            try {
-                // GemStoneAddition - set a shorter wait than the default
-                //ping_sock=new Socket(dest.getIpAddress(), dest.getPort());
-//                log.getLogWriter().info("DEBUG: failure detection is attempting to connect to " + mbr);
-                ping_sock = new Socket();
-                java.net.InetSocketAddress address =
-                  new java.net.InetSocketAddress(dest.getIpAddress(), dest.getPort());
-                ping_sock.connect(address, connectTimeout);
-//                log.getLogWriter().info("DEBUG: failure detection has connected to " + mbr);
-                // end GemStoneAddition
-
-                ping_sock.setSoLinger(true, connectTimeout);
-                ping_input=ping_sock.getInputStream();
-                return SETUP_OK;
-            }
-            catch (VirtualMachineError err) { // GemStoneAddition
-              // If this ever returns, rethrow the error.  We're poisoned
-              // now, so don't let this thread continue.
-              throw err;
-            }
-            catch(Throwable ex) {
-                return SETUP_FAILED;
-            }
-        }
-    }
-    synchronized void teardownPingSocket() { // GemStoneAddition - synch
-      synchronized(sock_mutex) {
-        if (ping_sock != null) {
-          // GemStoneAddition - if the other member's machine crashed, we
-          // may hang trying to close the socket. That causes bad things to
-          // happen if this is a UDP receiver thread.  So, close the socket in
-          // another thread.
-          final Socket old_ping_sock = ping_sock;
-          final InputStream old_ping_input = ping_input;
-          (new Thread(GemFireTracer.GROUP, "GemFire FD_SOCK Ping Socket Teardown Thread") {
-            @Override // GemStoneAddition  
-            public void run() {
-//            if(old_ping_sock != null) {
-                try {
-                  socket_closed_in_mutex = true;
-                    old_ping_sock.shutdownInput();
-                    old_ping_sock.close();
-                }
-                catch(Exception ex) {
-                }
-//                ping_sock=null;
-//            }
-            if(old_ping_input != null) {
-                try {
-                    old_ping_input.close();
-                }
-                catch(Exception ex) {
-                }
-//                ping_input=null;
-            }
-            }
-          }).start();
-//          ping_sock = null;
-//          ping_input = null;
-        }
-      }
-    }
-                if(normalTermination && client_sock != null) {
+                if(client_sock != null) {
-                        out.write(NORMAL_TERMINATION);
+                        out.write(normalTermination? NORMAL_TERMINATION : PROBE_TERMINATION);
+                        client_sock.shutdownOutput();
+                        client_sock.shutdownInput();
+    
+    private static class PingThread extends Thread {
+      volatile boolean stopRequested;
+      volatile Socket ping_sock;
+      volatile InputStream ping_input;
+      final Object sock_mutex = new Object();
+      boolean socket_closed_in_mutex;
+      
+      public PingThread(ThreadGroup group, Runnable fd_SOCK, String name) {
+        super(group,fd_SOCK,name);
+      }
+
+      public void requestStop() {
+        stopRequested = true;
+      }
+      
+      public boolean isStopRequested() {
+        return stopRequested;
+      }
+      
+      synchronized void teardownPingSocket(boolean inline) { // GemStoneAddition - synch
+        synchronized(sock_mutex) {
+          final Socket old_ping_sock = ping_sock;
+          final InputStream old_ping_input = ping_input;
+          if (old_ping_sock != null) {
+            // GemStoneAddition - if the other member's machine crashed, we
+            // may hang trying to close the socket. That causes bad things to
+            // happen if this is a UDP receiver thread.  So, close the socket in
+            // another thread.
+            Thread thr = (new Thread(GemFireTracer.GROUP, "GemFire FD_SOCK Ping Socket Teardown Thread") {
+              @Override // GemStoneAddition  
+              public void run() {
+                try {
+                  socket_closed_in_mutex = true;
+                  old_ping_sock.shutdownInput();
+                  old_ping_sock.close();
+                }
+                catch(Exception ex) {
+                }
+                if(old_ping_input != null) {
+                  try {
+                    old_ping_input.close();
+                  }
+                  catch(Exception ex) {
+                  }
+                }
+              }
+            });
+            if (inline) {
+              thr.run();
+            } else {
+              thr.setDaemon(true);
+              thr.start();
+            }
+          }
+        }
+      }
+      /**
+       * Creates a socket to <code>dest</code>, and assigns it to ping_sock. Also assigns ping_input
+       */
+      int setupPingSocket(IpAddress dest, Address mbr, int connectTimeout) {
+          synchronized(sock_mutex) {
+            PingThread myThread = (PingThread)Thread.currentThread();
+            if (socket_closed_in_mutex) {
+              // GemStoneAddition - another thread closed the ping socket
+              socket_closed_in_mutex = false;
+              return SETUP_RESELECT;
+            }
+              if(dest == null) {
+                  return SETUP_RESELECT;
+              }
+              try {
+                  // GemStoneAddition - set a shorter wait than the default
+                  //ping_sock=new Socket(dest.getIpAddress(), dest.getPort());
+//                  log.getLogWriter().info("DEBUG: failure detection is attempting to connect to " + mbr);
+                  myThread.ping_sock = new Socket();
+                  java.net.InetSocketAddress address =
+                    new java.net.InetSocketAddress(dest.getIpAddress(), dest.getPort());
+                  myThread.ping_sock.connect(address, connectTimeout);
+//                  log.getLogWriter().info("DEBUG: failure detection has connected to " + mbr);
+                  // end GemStoneAddition
+
+                  myThread.ping_sock.setSoLinger(true, connectTimeout);
+                  myThread.ping_input=myThread.ping_sock.getInputStream();
+                  return SETUP_OK;
+              }
+              catch (VirtualMachineError err) { // GemStoneAddition
+                // If this ever returns, rethrow the error.  We're poisoned
+                // now, so don't let this thread continue.
+                throw err;
+              }
+              catch(Throwable ex) {
+                  return SETUP_FAILED;
+              }
+          }
+      }
+    }

INS23 INS55 INS83 INS83 INS39 INS59 INS43 INS44 INS44 INS39 INS42 INS44 INS8 INS83 INS83 INS42 MOV43 INS23 MOV23 MOV23 MOV23 MOV23 INS31 INS31 INS31 MOV31 MOV31 INS42 INS32 INS42 MOV21 INS60 INS43 INS42 INS43 INS42 INS25 INS83 INS39 INS42 INS60 INS21 INS21 INS83 INS39 INS59 INS83 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS44 MOV8 INS44 INS42 INS42 INS45 UPD43 INS43 INS59 INS8 INS42 INS42 INS42 INS43 INS42 INS27 INS8 MOV43 INS59 INS32 INS32 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS41 INS39 INS42 INS51 INS39 INS42 UPD42 INS21 UPD42 INS42 INS42 INS11 INS25 INS42 INS9 INS42 INS42 INS33 INS41 INS40 INS42 INS36 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 MOV8 INS32 INS43 MOV32 INS27 INS27 MOV8 INS12 INS14 INS42 INS9 INS25 INS60 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS44 INS8 MOV43 INS40 INS45 INS1 MOV27 INS27 INS8 INS43 INS59 INS42 MOV42 INS42 INS42 MOV32 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS43 INS42 INS31 INS42 INS33 INS60 INS25 INS42 INS42 INS11 INS42 INS42 INS40 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS78 UPD83 MOV83 MOV39 INS42 INS8 MOV43 INS59 INS42 INS8 INS8 INS43 INS32 MOV21 INS9 MOV32 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS60 INS51 INS25 INS21 INS21 INS42 MOV36 INS21 INS21 MOV21 INS42 INS42 INS42 INS40 INS40 INS40 INS40 UPD43 UPD45 INS32 INS42 INS40 INS32 INS42 INS40 INS83 INS43 INS59 INS52 INS8 MOV27 INS8 INS32 INS32 INS32 INS32 INS40 UPD42 INS40 INS42 INS9 INS42 INS9 INS40 INS42 MOV42 UPD42 MOV42 UPD45 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS21 MOV21 INS51 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 UPD45 INS40 INS32 INS42 INS40 INS7 INS42 MOV8 INS42 INS42 INS42 INS9 MOV42 UPD42 MOV42 UPD45 INS42 INS42 INS32 INS42 INS40 MOV32 INS9 MOV42 UPD42 MOV42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS9 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL59 DEL60 DEL27 DEL9 DEL42 DEL42 DEL27 DEL42 DEL33 DEL33 DEL42 DEL33 DEL27 DEL25 DEL42 DEL51 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42