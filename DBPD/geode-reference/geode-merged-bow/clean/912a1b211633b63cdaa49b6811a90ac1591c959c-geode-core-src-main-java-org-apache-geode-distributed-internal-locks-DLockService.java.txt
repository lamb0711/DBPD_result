GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-              logger.trace(LogMarker.DLS, "[getLockGrantorId] creating lockGrantorFutureResult");
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "[getLockGrantorId] creating lockGrantorFutureResult");
-          logger.trace(LogMarker.DLS, "[getLockGrantorId] elder says grantor is {}",
+          logger.trace(LogMarker.DLS_VERBOSE, "[getLockGrantorId] elder says grantor is {}",
-              logger.trace(LogMarker.DLS, "[getLockGrantorId] needsRecovery is false");
+              logger.trace(LogMarker.DLS_VERBOSE, "[getLockGrantorId] needsRecovery is false");
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[createLocalGrantor] Calling makeLocalGrantor");
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[createLocalGrantor] Calling makeLocalGrantor");
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-            logger.trace(LogMarker.DLS, "Failed to create {} because elder changed from {} to {}",
-                myLockGrantorId, elder, currentElder);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "Failed to create {} because elder changed from {} to {}", myLockGrantorId, elder,
+                currentElder);
-              logger.trace(LogMarker.DLS, "Failed to create {} because I was deposed by {}",
+              logger.trace(LogMarker.DLS_VERBOSE, "Failed to create {} because I was deposed by {}",
-            logger.trace(LogMarker.DLS, "{} failed to depose {}", this.deposingLockGrantorId,
-                myLockGrantorId);
+            logger.trace(LogMarker.DLS_VERBOSE, "{} failed to depose {}",
+                this.deposingLockGrantorId, myLockGrantorId);
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-              logger.trace(LogMarker.DLS, "Failed to create {} because I was deposed by {}",
+              logger.trace(LogMarker.DLS_VERBOSE, "Failed to create {} because I was deposed by {}",
-            logger.trace(LogMarker.DLS, "{} failed to depose {}", this.deposingLockGrantorId,
-                myLockGrantorId);
+            logger.trace(LogMarker.DLS_VERBOSE, "{} failed to depose {}",
+                this.deposingLockGrantorId, myLockGrantorId);
-        logger.trace(LogMarker.DLS, "[makeLocalGrantor] throwing Error", e);
+        logger.trace(LogMarker.DLS_VERBOSE, "[makeLocalGrantor] throwing Error", e);
-        logger.trace(LogMarker.DLS, "[makeLocalGrantor] throwing RuntimeException", e);
+        logger.trace(LogMarker.DLS_VERBOSE, "[makeLocalGrantor] throwing RuntimeException", e);
-            logger.trace(LogMarker.DLS, "[makeLocalGrantor] aborting {} and {}", myLockGrantorId,
-                myGrantor);
+            logger.trace(LogMarker.DLS_VERBOSE, "[makeLocalGrantor] aborting {} and {}",
+                myLockGrantorId, myGrantor);
-          logger.error(LogMarker.DLS,
+          logger.error(LogMarker.DLS_MARKER,
-          logger.error(LogMarker.DLS, LocalizedMessage.create(
+          logger.error(LogMarker.DLS_MARKER, LocalizedMessage.create(
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[setLockGrantorId] tried to replace {} with {}",
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[setLockGrantorId] tried to replace {} with {}",
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "[deposeOlderLockGrantorId] pre-deposing {} for new {}",
+        logger.trace(LogMarker.DLS_VERBOSE, "[deposeOlderLockGrantorId] pre-deposing {} for new {}",
-        logger.trace(LogMarker.DLS, "[deposeOlderLockGrantorId] post-deposing {} for new {}",
-            deposedLockGrantorId, newLockGrantorId);
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "[deposeOlderLockGrantorId] post-deposing {} for new {}", deposedLockGrantorId,
+            newLockGrantorId);
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS, "[nullLockGrantorId] destroying {}", grantorToDestroy);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE, "[nullLockGrantorId] destroying {}",
+              grantorToDestroy);
-   * @param someLockGrantor
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS,
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS, "notLockGrantorId cleared lockGrantorId for service {}",
-              this.serviceName);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "notLockGrantorId cleared lockGrantorId for service {}", this.serviceName);
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-              logger.trace(LogMarker.DLS, "[becomeLockGrantor] creating lockGrantorFutureResult");
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "[becomeLockGrantor] creating lockGrantorFutureResult");
-          logger.trace(LogMarker.DLS, "become set lockGrantorId to {} for service {}",
+          logger.trace(LogMarker.DLS_VERBOSE, "become set lockGrantorId to {} for service {}",
-          logger.trace(LogMarker.DLS, "[becomeLockGrantor] Calling makeLocalGrantor");
+          logger.trace(LogMarker.DLS_VERBOSE, "[becomeLockGrantor] Calling makeLocalGrantor");
-            if (logger.isTraceEnabled(LogMarker.DLS)) {
-              logger.trace(LogMarker.DLS, "Freeing {} in {}", token, this);
+            if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+              logger.trace(LogMarker.DLS_VERBOSE, "Freeing {} in {}", token, this);
-            if (logger.isTraceEnabled(LogMarker.DLS)) {
-              logger.trace(LogMarker.DLS, "Freeing {} in {}", token, this);
+            if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+              logger.trace(LogMarker.DLS_VERBOSE, "Freeing {} in {}", token, this);
-      logger.error(LogMarker.DLS,
+      logger.error(LogMarker.DLS_MARKER,
-      logger.trace(LogMarker.DLS, "{}, name: {} - entering lock()", this, name);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - entering lock()", this, name);
+      }
-              logger.trace(LogMarker.DLS, "{} , name: {} - lock() is reentrant: {}", this, name,
-                  token);
+              if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+                logger.trace(LogMarker.DLS_VERBOSE, "{} , name: {} - lock() is reentrant: {}", this,
+                    name, token);
+              }
-          logger.trace(LogMarker.DLS, "Grantor {} replied {}", theLockGrantorId,
-              processor.getResponseCodeString());
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE, "Grantor {} replied {}", theLockGrantorId,
+                processor.getResponseCodeString());
+          }
-            logger.trace(LogMarker.DLS, "{}, name: {} - granted lock: {}", this, name, token);
+            if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+              logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - granted lock: {}", this, name,
+                  token);
+            }
-                logger.warn(LogMarker.DLS,
+                logger.warn(LogMarker.DLS_MARKER,
-          // TODO: figure out when this else case can actually happen...
-      logger.trace(LogMarker.DLS, "{}, name: {} - exiting lock() returning {}", this, name,
-          gotLock);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - exiting lock() returning {}", this,
+            name, gotLock);
+      }
-      logger.trace(LogMarker.DLS, "{}, name: {} - exiting lock() without returning value", this,
-          name);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - exiting lock() without returning value",
+            this, name);
+      }
-        logger.trace(LogMarker.DLS, "Cannot honor grant from {} because {} is now a grantor.",
-            theLockGrantorId, this.lockGrantorId);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "Cannot honor grant from {} because {} is now a grantor.", theLockGrantorId,
+              this.lockGrantorId);
+        }
-        logger.trace(LogMarker.DLS,
-            "Cannot honor grant from {} because this lock service has been destroyed.",
-            theLockGrantorId);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "Cannot honor grant from {} because this lock service has been destroyed.",
+              theLockGrantorId);
+        }
-      // try {
-      // we're now using a tryLock, but we need to keep trying until wait time
-      // is used up or we're interrupted...
-      // }
-      // finally {
-      // synchronized(this.lockingSuspendedMonitor) {
-      // this.lockingSuspendedMonitor.notifyAll();
-      // }
-      // }
-
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "{}, name: {} - disconnect listener thread is exiting unlock()",
-            this, name);
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "{}, name: {} - disconnect listener thread is exiting unlock()", this, name);
-      logger.trace(LogMarker.DLS, "{}, name: {} - entering unlock()", this, name);
+      logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - entering unlock()", this, name);
-            logger.trace(LogMarker.DLS, "{}, [unlock] no token found for: {}", this, name);
+            logger.trace(LogMarker.DLS_VERBOSE, "{}, [unlock] no token found for: {}", this, name);
-              logger.trace(LogMarker.DLS, "{}, [unlock] {} not leased by this thread.", this,
-                  token);
+              logger.trace(LogMarker.DLS_VERBOSE, "{}, [unlock] {} not leased by this thread.",
+                  this, token);
-          logger.trace(LogMarker.DLS, "{}, name: {} - exiting unlock()", this, name);
+          logger.trace(LogMarker.DLS_VERBOSE, "{}, name: {} - exiting unlock()", this, name);
-    // long statStart = getStats().startLockRelease();
-    try {
-      DLockQueryReplyMessage queryReply = null;
-      while (queryReply == null || queryReply.repliedNotGrantor()) {
-        checkDestroyed();
-        // TODO: consider using peekLockGrantor instead...
-        LockGrantorId theLockGrantorId = getLockGrantorId();
-        try {
-          queryReply = DLockQueryProcessor.query(theLockGrantorId.getLockGrantorMember(),
-              this.serviceName, name, false /* lockBatch */, this.dm);
-        } catch (LockGrantorDestroyedException e) {
-          // loop back around to get next lock grantor
-        } finally {
-          if (queryReply != null && queryReply.repliedNotGrantor()) {
-            notLockGrantorId(theLockGrantorId, 0, TimeUnit.MILLISECONDS);
-          }
+    DLockQueryReplyMessage queryReply = null;
+    while (queryReply == null || queryReply.repliedNotGrantor()) {
+      checkDestroyed();
+      LockGrantorId theLockGrantorId = getLockGrantorId();
+      try {
+        queryReply = DLockQueryProcessor.query(theLockGrantorId.getLockGrantorMember(),
+            this.serviceName, name, false /* lockBatch */, this.dm);
+      } catch (LockGrantorDestroyedException e) {
+        // loop back around to get next lock grantor
+      } finally {
+        if (queryReply != null && queryReply.repliedNotGrantor()) {
+          notLockGrantorId(theLockGrantorId, 0, TimeUnit.MILLISECONDS);
-      } // while querying
+      }
+    } // while querying
-      return DLockRemoteToken.create(name, queryReply.getLesseeThread(), queryReply.getLeaseId(),
-          queryReply.getLeaseExpireTime());
+    return DLockRemoteToken.create(name, queryReply.getLesseeThread(), queryReply.getLeaseId(),
+        queryReply.getLeaseExpireTime());
-    } // try
-    finally {
-      // getStats().endLockRelease(statStart);
-    }
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "About to create DistributedLockService <{}>", serviceName);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "About to create DistributedLockService <{}>",
+          serviceName);
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "Created DistributedLockService <{}>", this.serviceName);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "Created DistributedLockService <{}>",
+            this.serviceName);
-    /** Added For M&M **/
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-      logger.trace(LogMarker.DLS, "[DLockService.releaseTryLocks] enter: {}", batchId);
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockService.releaseTryLocks] enter: {}", batchId);
-        logger.trace(LogMarker.DLS, "[DLockService.releaseTryLocks] exit: {}", batchId);
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockService.releaseTryLocks] exit: {}", batchId);
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-      logger.trace(LogMarker.DLS, "[acquireTryLocks] acquiring {}", dlockBatch);
+      logger.trace(LogMarker.DLS_VERBOSE, "[acquireTryLocks] acquiring {}", dlockBatch);
-              logger.trace(LogMarker.DLS,
+              logger.trace(LogMarker.DLS_VERBOSE,
-        logger.trace(LogMarker.DLS, "[acquireTryLocks] {} locks for {}",
+        logger.trace(LogMarker.DLS_VERBOSE, "[acquireTryLocks] {} locks for {}",
-    }
-    // catch (Error e) {
-    // gotLocks = false;
-    // }
-    // catch (RuntimeException e) {
-    // gotLocks = false;
-    // }
-    finally {
+    } finally {
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS, "destroyAndRemove of {} terminated due to cancellation: ",
-              svc, e);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "destroyAndRemove of {} terminated due to cancellation: ", svc, e);
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-      logger.trace(LogMarker.DLS,
+      logger.trace(LogMarker.DLS_VERBOSE,
-            logger.fatal(LogMarker.DLS,
+            logger.fatal(LogMarker.DLS_MARKER,
-            logger.trace(LogMarker.DLS, "No longer waiting for grantor because of disconnect.", e);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "No longer waiting for grantor because of disconnect.", e);
-    /** Added for M&M **/
-
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-                  logger.trace(LogMarker.DLS, "getLockTokensForRecovery is skipping {}", token);
+                  logger.trace(LogMarker.DLS_VERBOSE, "getLockTokensForRecovery is skipping {}",
+                      token);
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "Creating {} in {}", token, this);
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE, "Creating {} in {}", token, this);
-      logger.info(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.ONE_ARG, buffer));
+      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.ONE_ARG, buffer));
-          final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+          final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-            logger.trace(LogMarker.DLS, "Shutting down Distributed Lock Services");
+            logger.trace(LogMarker.DLS_VERBOSE, "Shutting down Distributed Lock Services");
-              logger.trace(LogMarker.DLS, "Distributed Lock Services stopped (took {} ms)", delta);
+              logger.trace(LogMarker.DLS_VERBOSE, "Distributed Lock Services stopped (took {} ms)",
+                  delta);
-      logger.info(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.TESTING,
+      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.TESTING,
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[checkLockGrantorId] returning {}", gi);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[checkLockGrantorId] returning {}", gi);
-     * True if this stopper initiated cancellation for DLS destroy.
-     */
-    // private boolean stoppedByDLS = false; // used by single thread
-
-    /**
-      // if (this.stoppedByDLS) { // set and checked by same thread
-      // return this.dls.generateLockServiceDestroyedException(reason);
-      // }
-      // return new DistributedSystemDisconnectedException(reason, e);

MOV8 INS8 UPD40 INS25 INS25 INS25 MOV25 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS32 INS8 INS32 INS8 INS32 INS8 INS8 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 INS42 INS40 MOV21 INS42 INS42 INS40 MOV21 INS42 INS42 INS40 MOV21 INS25 INS8 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS32 MOV8 INS25 MOV21 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS25 UPD40 UPD40 INS42 INS42 INS40 INS32 MOV8 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS32 INS8 INS42 INS42 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 INS42 INS40 MOV21 INS25 UPD40 UPD40 UPD40 UPD40 INS32 INS8 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS25 UPD40 INS42 INS42 INS40 MOV21 UPD40 UPD40 UPD40 UPD40 INS32 INS8 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 INS42 INS40 MOV21 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 DEL42 DEL65 DEL8 DEL8 DEL54 DEL8