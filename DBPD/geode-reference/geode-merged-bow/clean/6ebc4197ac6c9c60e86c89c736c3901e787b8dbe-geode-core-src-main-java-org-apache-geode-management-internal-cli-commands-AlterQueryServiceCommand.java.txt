GEODE-7497: Check CQs prior to change authorizer (#4385)

The QueryConfigurationService now requires an extra flag to determine,
in the presence of continuous queries, whether to update the configured
MethodInvocationAuthorizer and invalidate the CQ's internal cache or
throw an exception and abort the update.

- Fixed minor warnings.
- Added unit and distributed tests.
- Updated docs for alter query-service command.
- Added 'forceUpdate' flag to 'AlterQueryServiceFunction' and
  'AlterQueryServiceCommand'.
- Fixed 'AlterQueryServiceCommand' to always require the
  'method-authorizer' parameter.
-
-import java.util.Objects;
-import org.apache.geode.management.cli.CliMetaData;
-import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
-import org.apache.geode.management.internal.cli.GfshParseResult;
-
-  private static final String COMMAND_HELP =
-      "Alter configuration parameters for the query service";
-  static final String METHOD_AUTHORIZER_NAME = "method-authorizer";
+  private static final String COMMAND_HELP = "Alter configuration parameters for the query service";
+  static final String AUTHORIZER_NAME = "method-authorizer";
-      "A semicolon separated list of all parameter values for the specified method authorizer. Requires '--"
-          + METHOD_AUTHORIZER_NAME + "' option to be used";
-  static final String PARAMETERS_WITHOUT_AUTHORIZER_MESSAGE = "The '--" + AUTHORIZER_PARAMETERS
-      + "' option requires '--" + METHOD_AUTHORIZER_NAME + "' to be specified";
-  static final String NO_ARGUMENTS_MESSAGE =
-      "No arguments were provided. No changes have been applied.";
+      "A semicolon separated list of all parameter values for the specified method authorizer.";
+  static final String FORCE_UPDATE = "force-update";
+  private static final String FORCE_UPDATE_HELP =
+      "Flag to indicate whether to forcibly update the currently configured authorizer, even when there are continuous queries registered (use with caution)";
+  private final AlterQueryServiceFunction alterQueryServiceFunction =
+      new AlterQueryServiceFunction();
+
-  @CliMetaData(
-      interceptor = "org.apache.geode.management.internal.cli.commands.AlterQueryServiceCommand$Interceptor")
-      @CliOption(key = METHOD_AUTHORIZER_NAME,
-          help = METHOD_AUTHORIZER_NAME_HELP) String methodAuthorizerName,
-      @CliOption(key = AUTHORIZER_PARAMETERS,
-          help = AUTHORIZER_PARAMETERS_HELP,
-          optionContext = "splittingRegex=" + SPLITTING_REGEX) String[] authorizerParameters) {
-    ResultModel result;
+      @CliOption(key = AUTHORIZER_NAME, help = METHOD_AUTHORIZER_NAME_HELP,
+          mandatory = true) String methodAuthorizerName,
+      @CliOption(key = AUTHORIZER_PARAMETERS, help = AUTHORIZER_PARAMETERS_HELP,
+          optionContext = "splittingRegex=" + SPLITTING_REGEX) String[] authorizerParameters,
+      @CliOption(key = FORCE_UPDATE, help = FORCE_UPDATE_HELP, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false") boolean forceUpdate) {
+    ResultModel result;
+    Set<String> parametersSet = new HashSet<>();
-    Set<String> parametersSet = null;
-    if (methodAuthorizerName != null) {
-      if (authorizerParameters != null) {
-        parametersSet = new HashSet<>(Arrays.asList(authorizerParameters));
-      }
-      populateMethodAuthorizer(methodAuthorizerName, parametersSet, queryConfigService);
-    }
+    if (authorizerParameters != null)
+      parametersSet.addAll(Arrays.asList(authorizerParameters));
+    populateMethodAuthorizer(methodAuthorizerName, parametersSet, queryConfigService);
-    if (targetMembers.size() == 0) {
+    if (targetMembers.isEmpty()) {
-      Object[] args = new Object[] {methodAuthorizerName, parametersSet};
-      List<CliFunctionResult> functionResults =
-          executeAndGetFunctionResult(new AlterQueryServiceFunction(), args,
-              targetMembers);
+      Object[] args = new Object[] {forceUpdate, methodAuthorizerName, parametersSet};
+      List<CliFunctionResult> functionResults =
+          executeAndGetFunctionResult(alterQueryServiceFunction, args, targetMembers);
-      if (functionResults.stream().anyMatch(functionResult -> functionResult.isSuccessful())
+      if (functionResults.stream().anyMatch(CliFunctionResult::isSuccessful)
-      result =
-          ResultModel.createMemberStatusResult(functionResults, null, footer, false, true);
+      result = ResultModel.createMemberStatusResult(functionResults, null, footer, false, true);
+
+
-    if (parameterSet != null && parameterSet.size() != 0) {
+    if (!parameterSet.isEmpty()) {
+
+
+
+
+
-        QueryConfigService queryConfigService = cacheConfig.findCustomCacheElement(
-            QueryConfigService.ELEMENT_ID, QueryConfigService.class);
+        QueryConfigService queryConfigService = cacheConfig
+            .findCustomCacheElement(QueryConfigService.ELEMENT_ID, QueryConfigService.class);
+
+
+
+
-
-
-
-  public static class Interceptor extends AbstractCliAroundInterceptor {
-    @Override
-    public ResultModel preExecution(GfshParseResult parseResult) {
-      if (Arrays.stream(parseResult.getArguments()).allMatch(Objects::isNull)) {
-        return ResultModel.createError(NO_ARGUMENTS_MESSAGE);
-      }
-
-      Object authorizerName = parseResult.getParamValue(METHOD_AUTHORIZER_NAME);
-      Object authorizerParams = parseResult.getParamValue(AUTHORIZER_PARAMETERS);
-
-      if (authorizerParams != null && authorizerName == null) {
-        return ResultModel.createError(PARAMETERS_WITHOUT_AUTHORIZER_MESSAGE);
-      }
-
-      return new ResultModel();
-    }
-  }

INS23 INS83 INS83 INS83 INS43 MOV59 INS44 MOV60 UPD42 INS45 UPD42 INS45 UPD42 UPD45 UPD42 MOV42 UPD42 MOV14 INS77 INS39 INS42 MOV25 MOV21 INS80 INS42 INS80 INS80 INS80 INS80 MOV21 INS32 MOV60 INS38 UPD42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS14 INS32 MOV42 UPD42 MOV42 INS32 MOV74 INS42 INS42 MOV32 MOV5 INS59 MOV42 UPD42 MOV42 INS42 INS32 MOV5 INS42 INS42 INS42 INS42 INS90 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL80 DEL77 DEL33 DEL42 DEL14 DEL7 DEL8 DEL42 DEL33 DEL27 DEL8 DEL25 DEL32 DEL34 DEL27 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL83 DEL83 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL55