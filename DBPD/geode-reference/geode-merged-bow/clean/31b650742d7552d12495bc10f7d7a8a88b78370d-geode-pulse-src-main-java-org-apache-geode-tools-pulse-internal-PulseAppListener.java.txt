GEODE-1274: Migration from PulseLogWriter to Log4j standard and removal of associated classes.

* To avoid dependency on geode-core, the pulse loggers are instantiated directly from LogManager, rather than canonical LogService (which itself extends LogManager).
* Significant reduction of logging level state checks, relying on Log4j handling.
* Significant reduction of string concatenation, relying on Log4j2 string substitutions.
* Reduction of logging using an exception e.getMessage, favoring instead passing the exception itself for the stacktrace.
* Multiple identical exception blocks collapsed.
* this closes #446

-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.tools.pulse.internal.log.PulseLogWriter;
+import org.apache.commons.lang.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Level;
-import java.util.logging.Level;
-  private PulseLogWriter LOGGER;
+  private static final Logger logger = LogManager.getLogger();
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_CONTEXT_DESTROYED")
-          + event.getServletContext().getContextPath());
-    }
+    logger.info("{}{}", resourceBundle.getString("LOG_MSG_CONTEXT_DESTROYED"),
+        event.getServletContext().getContextPath());
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_CHECK_APP_RUNNING_MODE"));
-    }
+    logger.info(resourceBundle.getString("LOG_MSG_CHECK_APP_RUNNING_MODE"));
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_APP_RUNNING_EMBEDDED_MODE"));
-      }
+      logger.info(resourceBundle.getString("LOG_MSG_APP_RUNNING_EMBEDDED_MODE"));
-        if (LOGGER.fineEnabled()) {
-          LOGGER.fine(
-              resourceBundle.getString("LOG_MSG_JMX_CONNECTION_UNKNOWN_HOST") + e.getMessage());
-        }
+        logger.debug(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_UNKNOWN_HOST"), e);
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_APP_RUNNING_NONEMBEDDED_MODE"));
-      }
+      logger.info(resourceBundle.getString("LOG_MSG_APP_RUNNING_NONEMBEDDED_MODE"));
-        LOGGER.info("#SpringProfilesConfigured : " + sb.toString());
+        logger.info("#SpringProfilesConfigured : {}", sb);
-        LOGGER.info("#First Profile : " + profile);
+        logger.info("#First Profile : {}", profile);
-        LOGGER.info("No SpringProfileConfigured using default spring profile");
+        logger.info("No SpringProfileConfigured using default spring profile");
-      LOGGER.info("Using gemfire integrated security profile");
+      logger.info("Using gemfire integrated security profile");
-    // Initialize logger object
-    LOGGER = PulseLogWriter.getLogger();
-
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(messagesToBeLogged);
-      messagesToBeLogged = "";
-    }
+    logger.info(messagesToBeLogged);
+    messagesToBeLogged = "";
-      pulseConfig.setLogLevel(Level.parse(
+      pulseConfig.setLogLevel(Level.getLevel(
-
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_GET_JMX_USER_DETAILS"));
-    }
+    logger.info(resourceBundle.getString("LOG_MSG_GET_JMX_USER_DETAILS"));
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_NOT_FOUND")
-            + resourceBundle.getString("LOG_MSG_REASON_USER_DETAILS_NOT_FOUND"));
-      }
+      logger.info("{}{}", resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_NOT_FOUND"),
+          resourceBundle.getString("LOG_MSG_REASON_USER_DETAILS_NOT_FOUND"));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_NOT_FOUND")
-              + resourceBundle.getString("LOG_MSG_REASON_USER_DETAILS_NOT_FOUND"));
-        }
+        logger.info("{}{}", resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_NOT_FOUND"),
+            resourceBundle.getString("LOG_MSG_REASON_USER_DETAILS_NOT_FOUND"));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_FOUND"));
-        }
+        logger.info(resourceBundle.getString("LOG_MSG_JMX_USER_DETAILS_FOUND"));
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_GET_SSL_DETAILS"));
-    }
+    logger.info(resourceBundle.getString("LOG_MSG_GET_SSL_DETAILS"));
-        if (LOGGER.warningEnabled()) {
-          LOGGER.warning(resourceBundle.getString("LOG_MSG_SSL_NOT_SET"));
-        }
+        logger.warn(resourceBundle.getString("LOG_MSG_SSL_NOT_SET"));
-    if (LOGGER.infoEnabled()) {
-      LOGGER.info(resourceBundle.getString("LOG_MSG_GET_LOCATOR_DETAILS_1"));
-    }
+    logger.info(resourceBundle.getString("LOG_MSG_GET_LOCATOR_DETAILS_1"));
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_NOT_FOUND")
-            + resourceBundle.getString("LOG_MSG_REASON_LOCATOR_DETAILS_NOT_FOUND_1"));
-        LOGGER.info(resourceBundle.getString("LOG_MSG_GET_LOCATOR_DETAILS_2"));
-      }
+      logger.info("{}{}", resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_NOT_FOUND"),
+          resourceBundle.getString("LOG_MSG_REASON_LOCATOR_DETAILS_NOT_FOUND_1"));
+      logger.info(resourceBundle.getString("LOG_MSG_GET_LOCATOR_DETAILS_2"));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_NOT_FOUND")
-              + resourceBundle.getString("LOG_MSG_REASON_LOCATOR_DETAILS_NOT_FOUND_2"));
-        }
+        logger.info("{}{}", resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_NOT_FOUND"),
+            resourceBundle.getString("LOG_MSG_REASON_LOCATOR_DETAILS_NOT_FOUND_2"));
-        if (LOGGER.infoEnabled()) {
-          LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_FOUND"));
-        }
+        logger.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_FOUND"));
-      if (LOGGER.infoEnabled()) {
-        LOGGER.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_FOUND"));
-      }
+      logger.info(resourceBundle.getString("LOG_MSG_LOCATOR_DETAILS_FOUND"));
-    pw.println(PulseLogWriter.class.getName());
+    pw.println(Logger.class.getName());

MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS83 INS83 UPD43 MOV8 MOV8 UPD42 INS42 INS32 MOV21 MOV21 MOV21 MOV21 MOV21 MOV25 MOV21 MOV21 INS42 INS42 MOV8 MOV32 MOV8 MOV8 UPD42 INS45 MOV32 MOV32 UPD42 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD42 MOV21 MOV21 UPD42 MOV25 UPD42 MOV21 MOV21 MOV27 INS8 MOV32 MOV8 UPD42 MOV8 UPD42 UPD42 UPD42 INS45 MOV32 MOV32 INS21 UPD42 INS45 MOV32 MOV32 UPD42 MOV21 MOV21 INS21 UPD42 UPD43 MOV21 UPD42 INS32 INS32 UPD42 UPD42 INS45 MOV42 UPD42 INS45 INS42 UPD42 UPD42 INS45 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 UPD42 INS45 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 MOV32 MOV42 DEL42 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL27 DEL32 DEL27 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL25 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL32 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8