Merge branch 'release/1.1.0'

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
-    RegionAttributesCreation existingRACreation = new RegionAttributesCreation(existingAttributes, false);
+    RegionAttributesCreation existingRACreation =
+        new RegionAttributesCreation(existingAttributes, false);
-    // Compare the two region attributes. This method either returns true or throws a RuntimeException.
+    // Compare the two region attributes. This method either returns true or throws a
+    // RuntimeException.
-  public static RebalanceResults rebalanceRegion(Region region) throws CancellationException, InterruptedException {
+  public static RebalanceResults rebalanceRegion(Region region)
+      throws CancellationException, InterruptedException {
-      builder.append("Region ")
-          .append(regionName)
-          .append(" is not partitioned. Instead, it is ")
-          .append(region.getAttributes().getDataPolicy())
-          .append(". It can't be rebalanced.");
+      builder.append("Region ").append(regionName).append(" is not partitioned. Instead, it is ")
+          .append(region.getAttributes().getDataPolicy()).append(". It can't be rebalanced.");
-  public static RebalanceResults rebalanceCache(GemFireCache cache) throws CancellationException, InterruptedException {
+  public static RebalanceResults rebalanceCache(GemFireCache cache)
+      throws CancellationException, InterruptedException {
-  private static RegionAttributes getRegionAttributes(Cache cache, RegionConfiguration configuration) {
+  private static RegionAttributes getRegionAttributes(Cache cache,
+      RegionConfiguration configuration) {
-    RegionAttributes baseRequestedAttributes = cache.getRegionAttributes(configuration.getRegionAttributesId());
+    RegionAttributes baseRequestedAttributes =
+        cache.getRegionAttributes(configuration.getRegionAttributesId());
-        requestedFactory.setEntryIdleTimeout(new ExpirationAttributes(maxInactiveInterval, ExpirationAction.DESTROY));
+        requestedFactory.setEntryIdleTimeout(
+            new ExpirationAttributes(maxInactiveInterval, ExpirationAction.DESTROY));
-//    requestedFactory.setEnableGateway(configuration.getEnableGatewayReplication());
+    // requestedFactory.setEnableGateway(configuration.getEnableGatewayReplication());
-        CacheWriter writer = (CacheWriter) Class.forName(configuration.getCacheWriterName()).newInstance();
+        CacheWriter writer =
+            (CacheWriter) Class.forName(configuration.getCacheWriterName()).newInstance();
-  private RegionHelper() {
-  }
+  private RegionHelper() {}
-      fillInRebalanceResultsMemberDetails(builder, rebalanceInfo.getPartitionMemberDetailsBefore(), "Before");
+      fillInRebalanceResultsMemberDetails(builder, rebalanceInfo.getPartitionMemberDetailsBefore(),
+          "Before");
-      fillInRebalanceResultsMemberDetails(builder, rebalanceInfo.getPartitionMemberDetailsAfter(), "After");
+      fillInRebalanceResultsMemberDetails(builder, rebalanceInfo.getPartitionMemberDetailsAfter(),
+          "After");
-  private static void fillInRebalanceResultsSummary(StringBuilder builder, PartitionRebalanceInfo rebalanceInfo) {
-    builder.append("\nRebalanced region ")
-        .append(rebalanceInfo.getRegionPath())
-        .append(" in ")
-        .append(rebalanceInfo.getTime())
-        .append(" ms")
+  private static void fillInRebalanceResultsSummary(StringBuilder builder,
+      PartitionRebalanceInfo rebalanceInfo) {
+    builder.append("\nRebalanced region ").append(rebalanceInfo.getRegionPath()).append(" in ")
+        .append(rebalanceInfo.getTime()).append(" ms")
-        .append("\nCreated ")
-        .append(rebalanceInfo.getBucketCreatesCompleted())
-        .append(" buckets containing ")
-        .append(rebalanceInfo.getBucketCreateBytes())
-        .append(" bytes in ")
-        .append(rebalanceInfo.getBucketCreateTime())
-        .append(" ms")
+        .append("\nCreated ").append(rebalanceInfo.getBucketCreatesCompleted())
+        .append(" buckets containing ").append(rebalanceInfo.getBucketCreateBytes())
+        .append(" bytes in ").append(rebalanceInfo.getBucketCreateTime()).append(" ms")
-        .append("\nTransferred ")
-        .append(rebalanceInfo.getBucketTransfersCompleted())
-        .append(" buckets containing ")
-        .append(rebalanceInfo.getBucketTransferBytes())
-        .append(" bytes in ")
-        .append(rebalanceInfo.getBucketTransferTime())
-        .append(" ms")
+        .append("\nTransferred ").append(rebalanceInfo.getBucketTransfersCompleted())
+        .append(" buckets containing ").append(rebalanceInfo.getBucketTransferBytes())
+        .append(" bytes in ").append(rebalanceInfo.getBucketTransferTime()).append(" ms")
-        .append("\nTransferred ")
-        .append(rebalanceInfo.getPrimaryTransfersCompleted())
-        .append(" primary buckets in ")
-        .append(rebalanceInfo.getPrimaryTransferTime())
+        .append("\nTransferred ").append(rebalanceInfo.getPrimaryTransfersCompleted())
+        .append(" primary buckets in ").append(rebalanceInfo.getPrimaryTransferTime())
-  private static void fillInRebalanceResultsMemberDetails(StringBuilder builder, Set<PartitionMemberInfo> memberInfoSet,
-      String when) {
+  private static void fillInRebalanceResultsMemberDetails(StringBuilder builder,
+      Set<PartitionMemberInfo> memberInfoSet, String when) {
-      builder.append("\tdistributedMember=")
-          .append(info.getDistributedMember())
-          .append(", configuredMaxMemory=")
-          .append(info.getConfiguredMaxMemory())
-          .append(", size=")
-          .append(info.getSize())
-          .append(", bucketCount=")
-          .append(info.getBucketCount())
-          .append(", primaryCount=")
-          .append(info.getPrimaryCount());
+      builder.append("\tdistributedMember=").append(info.getDistributedMember())
+          .append(", configuredMaxMemory=").append(info.getConfiguredMaxMemory()).append(", size=")
+          .append(info.getSize()).append(", bucketCount=").append(info.getBucketCount())
+          .append(", primaryCount=").append(info.getPrimaryCount());

