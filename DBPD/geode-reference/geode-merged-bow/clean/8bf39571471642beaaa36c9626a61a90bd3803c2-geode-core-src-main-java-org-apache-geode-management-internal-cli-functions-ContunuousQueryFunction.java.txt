Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void execute(FunctionContext context) {            
+  public void execute(FunctionContext context) {
-      String clientID = (String) context.getArguments();      
-      GemFireCacheImpl cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();      
-      if (cache.getCacheServers().size() > 0) {       
-        CacheServerImpl server = (CacheServerImpl)cache.getCacheServers().iterator().next();        
-        if(server != null){          
-          AcceptorImpl  acceptorImpl  = server.getAcceptor(); 
-          if(acceptorImpl != null){          
+      String clientID = (String) context.getArguments();
+      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
+      if (cache.getCacheServers().size() > 0) {
+        CacheServerImpl server = (CacheServerImpl) cache.getCacheServers().iterator().next();
+        if (server != null) {
+          AcceptorImpl acceptorImpl = server.getAcceptor();
+          if (acceptorImpl != null) {
-            if(cacheClientNotifier != null){          
-              Collection<CacheClientProxy> cacheClientProxySet = cacheClientNotifier.getClientProxies();
-              ClientInfo clientInfo = null ;
+            if (cacheClientNotifier != null) {
+              Collection<CacheClientProxy> cacheClientProxySet =
+                  cacheClientNotifier.getClientProxies();
+              ClientInfo clientInfo = null;
-              while(it.hasNext()){
-                     
-                  CacheClientProxy ccp =  it.next();                                
-                  if(ccp != null){
-                    String clientIdFromProxy = ccp.getProxyID().getDSMembership();
-                    if(clientIdFromProxy != null && clientIdFromProxy.equals(clientID)){
-                      foundClientinCCP = true;
-                      String durableId = ccp.getProxyID().getDurableId();
-                      boolean isPrimary = ccp.isPrimary();
-                      clientInfo = new ClientInfo((durableId != null && durableId.length() > 0 ? "Yes" : "No"), 
-                                                  (isPrimary == true ? cache.getDistributedSystem().getDistributedMember().getId() : ""), 
-                                                  (isPrimary == false ? cache.getDistributedSystem().getDistributedMember().getId() : "") );  
-                      break;
-                      
-                    }
-                  }
-                }       
-                
-               //try getting from server connections
-                if(foundClientinCCP == false){
-                  ServerConnection[] serverConnections  = acceptorImpl.getAllServerConnectionList();
-                  
-                  for (ServerConnection conn : serverConnections){
-                    ClientProxyMembershipID cliIdFrmProxy = conn.getProxyID();
+              while (it.hasNext()) {
-                    if (clientID.equals(cliIdFrmProxy.getDSMembership() )) {
-                      String durableId = cliIdFrmProxy.getDurableId();                                 
-                      clientInfo = new ClientInfo((durableId != null && durableId.length() > 0 ? "Yes" : "No"), "N.A." ,  "N.A." );                    
-                    }  
-                  
+                CacheClientProxy ccp = it.next();
+                if (ccp != null) {
+                  String clientIdFromProxy = ccp.getProxyID().getDSMembership();
+                  if (clientIdFromProxy != null && clientIdFromProxy.equals(clientID)) {
+                    foundClientinCCP = true;
+                    String durableId = ccp.getProxyID().getDurableId();
+                    boolean isPrimary = ccp.isPrimary();
+                    clientInfo = new ClientInfo(
+                        (durableId != null && durableId.length() > 0 ? "Yes" : "No"),
+                        (isPrimary == true
+                            ? cache.getDistributedSystem().getDistributedMember().getId() : ""),
+                        (isPrimary == false
+                            ? cache.getDistributedSystem().getDistributedMember().getId() : ""));
+                    break;
+
-               }
-               context.getResultSender().lastResult(clientInfo);            
+                }
+              }
+
+              // try getting from server connections
+              if (foundClientinCCP == false) {
+                ServerConnection[] serverConnections = acceptorImpl.getAllServerConnectionList();
+
+                for (ServerConnection conn : serverConnections) {
+                  ClientProxyMembershipID cliIdFrmProxy = conn.getProxyID();
+
+                  if (clientID.equals(cliIdFrmProxy.getDSMembership())) {
+                    String durableId = cliIdFrmProxy.getDurableId();
+                    clientInfo =
+                        new ClientInfo((durableId != null && durableId.length() > 0 ? "Yes" : "No"),
+                            "N.A.", "N.A.");
+                  }
+
+                }
+              }
+              context.getResultSender().lastResult(clientInfo);
-          }           
-        }      
+          }
+        }
-    }catch (Exception e) {
-      context.getResultSender().lastResult(
-          "Exception in ContunuousQueryFunction =" + e.getMessage());
+    } catch (Exception e) {
+      context.getResultSender()
+          .lastResult("Exception in ContunuousQueryFunction =" + e.getMessage());
-    
+
-    
+
-    }       
-    
+    }
+
-      return "ClientInfo [isDurable=" + isDurable + ", primaryServer="
-          + primaryServer + ", secondaryServer=" + secondaryServer + "]";
+      return "ClientInfo [isDurable=" + isDurable + ", primaryServer=" + primaryServer
+          + ", secondaryServer=" + secondaryServer + "]";
-    
-    
+
+

