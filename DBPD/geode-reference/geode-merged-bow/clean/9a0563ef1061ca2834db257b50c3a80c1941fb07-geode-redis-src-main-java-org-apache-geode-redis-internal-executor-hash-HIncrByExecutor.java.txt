GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-  private static final int FIELD_INDEX = 2;
-
-  private static final int INCREMENT_INDEX = 3;
+  private static final int INCREMENT_INDEX = FIELD_INDEX + 1;
+    ByteArrayWrapper key = command.getKey();
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-    ByteArrayWrapper key = command.getKey();
+    RedisHashCommands redisHashCommands = createRedisHashCommands(context);
-    long value;
-
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      RedisHash redisHash = getModifiableRedisHash(context, key);
-
-      byte[] byteField = commandElems.get(FIELD_INDEX);
-      ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-      /*
-       * Put increment as value if field doesn't exist
-       */
-
-      ByteArrayWrapper oldValue = redisHash.get(field);
-
-      if (oldValue == null) {
-        ByteArrayWrapper newValue = new ByteArrayWrapper(incrArray);
-        redisHash.put(field, newValue);
-
-        saveRedishHash(redisHash, context, key);
-
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), increment));
-
-        return;
-      }
-
-      /*
-       * If the field did exist then increment the field
-       */
-      try {
-        value = Long.parseLong(oldValue.toString());
-      } catch (NumberFormatException e) {
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
-        return;
-      }
-
-      /*
-       * Check for overflow
-       */
-      if ((value >= 0 && increment > (Long.MAX_VALUE - value))
-          || (value <= 0 && increment < (Long.MIN_VALUE - value))) {
-        command
-            .setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-        return;
-      }
-
-      value += increment;
-
-      redisHash.put(field, new ByteArrayWrapper(Coder.longToBytes(value)));
-
-      saveRedishHash(redisHash, context, key);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
+    try {
+      long value = redisHashCommands.hincrby(key, field, increment);
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), value));
+    } catch (NumberFormatException ex) {
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
+          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
+    } catch (ArithmeticException ex) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), value));
-

MOV60 INS42 INS27 MOV60 MOV60 MOV60 INS54 INS42 INS34 UPD43 INS8 MOV12 MOV12 UPD42 UPD42 INS60 MOV21 MOV8 UPD42 INS39 INS59 UPD42 UPD43 UPD42 UPD42 MOV42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL34 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL41 DEL41 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL39 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL54 DEL42 DEL34 DEL27 DEL42 DEL40 DEL42 DEL27 DEL36 DEL27 DEL27 DEL36 DEL42 DEL34 DEL27 DEL42 DEL40 DEL42 DEL27 DEL36 DEL27 DEL27 DEL36 DEL27 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54