Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An atomic integer with update methods that check to see if the value is equal
- * to a special flag. Care should be taken to ensure that the value can never
- * become the special value accidentally. For example, a long that can never go
- * negative with normal use could have a terminal state of Long.MIN_VALUE
+ * An atomic integer with update methods that check to see if the value is equal to a special flag.
+ * Care should be taken to ensure that the value can never become the special value accidentally.
+ * For example, a long that can never go negative with normal use could have a terminal state of
+ * Long.MIN_VALUE
-  
+
-  
-  
+
+
-   * Add and the the given delta to the long, unless the long
-   * has been set to the terminal state.
+   * Add and the the given delta to the long, unless the long has been set to the terminal state.
+   * 
-   * @return the new value of the field, or the terminalState if the field
-   * is already set to the terminal state.
+   * @return the new value of the field, or the terminalState if the field is already set to the
+   *         terminal state.
-    while(true) {
+    while (true) {
-      if(current == terminalState) {
+      if (current == terminalState) {
-      long newValue = current +delta;
+      long newValue = current + delta;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66