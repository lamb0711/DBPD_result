GEODE-7579: introduce RegionAware (#4546)

* GEODE-7579: Make Index configuration RegionAware

* Index configuration is ReqionAware, but not groupable
* index's group depends on what region it's defined with
* display member status in the exception
+import java.util.HashSet;
+import org.apache.geode.management.configuration.RegionScoped;
-    validators.put(Index.class, new IndexValidator(persistenceService));
+    validators.put(Index.class, new IndexValidator());
-    String group = config.getGroup();
-    final String groupName =
-        AbstractConfiguration.isCluster(group) ? AbstractConfiguration.CLUSTER : group;
-      // check if this config already exists on all/some members of this group
+      // check if this config already exists
-      // execute function on all members
-    Set<DistributedMember> targetedMembers = memberValidator.findServers(group);
+    // find the targeted members
+    Set<String> groups = new HashSet<>();
+    Set<DistributedMember> targetedMembers;
+    if (config instanceof RegionScoped) {
+      String regionName = ((RegionScoped) config).getRegionName();
+      groups = memberValidator.findGroups(regionName);
+      if (groups.isEmpty()) {
+        raise(StatusCode.ENTITY_NOT_FOUND, "Region provided does not exist: " + regionName);
+      }
+      targetedMembers = memberValidator.findServers(groups.toArray(new String[0]));
+    } else {
+      final String groupName =
+          AbstractConfiguration.isCluster(config.getGroup()) ? AbstractConfiguration.CLUSTER
+              : config.getGroup();
+      groups.add(groupName);
+      targetedMembers = memberValidator.findServers(groupName);
+    }
+
+
+    // execute function on all targeted members
-
-    configurationManager.add(config, groupName);
+    for (String groupName : groups) {
+      configurationManager.add(config, groupName);
+    }
-        "Successfully updated configuration for " + groupName + ".");
+        "Successfully updated configuration for " + String.join(", ", groups) + ".");
-        resultList.addAll(list);
+        list.stream().filter(t -> !resultList.contains(t))
+            .forEach(resultList::add);
-        members = memberValidator.findServers(element.getGroup());
+        members = memberValidator.findServers(element);

INS26 INS26 INS40 INS40 MOV60 INS25 INS70 INS74 INS62 INS8 INS8 INS44 INS42 INS8 INS43 MOV43 UPD42 INS14 INS42 INS43 INS60 INS21 INS25 INS21 MOV60 INS21 INS21 INS43 INS42 MOV21 INS42 INS74 INS42 MOV43 INS59 INS7 INS32 INS8 INS7 INS43 INS32 INS7 INS42 INS32 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS11 INS42 INS40 INS27 INS42 INS42 INS3 MOV32 INS42 INS42 INS32 INS42 INS90 INS43 INS42 INS45 INS42 INS5 INS34 INS32 INS42 INS86 INS42 INS42 MOV42 INS42 INS43 INS85 INS42 INS42 INS59 INS38 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32