Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class UpdateOperation extends AbstractUpdateOperation
-{
+public class UpdateOperation extends AbstractUpdateOperation {
-  
+
-  protected CacheOperationMessage createMessage()
-  {
+  protected CacheOperationMessage createMessage() {
-    }
-    else {
+    } else {
-  protected void initMessage(CacheOperationMessage msg,
-      DirectReplyProcessor p)
-  {
+  protected void initMessage(CacheOperationMessage msg, DirectReplyProcessor p) {
-    UpdateMessage m = (UpdateMessage)msg;
+    UpdateMessage m = (UpdateMessage) msg;
-      if(msg instanceof UpdateWithContextMessage){
-        processor.msg = new UpdateWithContextMessage((UpdateWithContextMessage)msg); 
+      if (msg instanceof UpdateWithContextMessage) {
+        processor.msg = new UpdateWithContextMessage((UpdateWithContextMessage) msg);
+      } else {
+        processor.msg = new UpdateMessage((UpdateMessage) msg);
-      else{  
-      processor.msg = new UpdateMessage((UpdateMessage)msg);
-      } 
-     * Indicates if and when the new value should be deserialized on the the
-     * receiver
+     * Indicates if and when the new value should be deserialized on the the receiver
-    @Unretained(ENTRY_EVENT_NEW_VALUE) 
+    @Unretained(ENTRY_EVENT_NEW_VALUE)
-    
-    public UpdateMessage() {
-    }
-    /**  
+
+    public UpdateMessage() {}
+
+    /**
-      this.filterRouting = upMsg.filterRouting; 
-      this.needsRouting = upMsg.needsRouting; 
+      this.filterRouting = upMsg.filterRouting;
+      this.needsRouting = upMsg.needsRouting;
-    
+
-    public ConflationKey getConflationKey()
-    {
-      if (!super.regionAllowsConflation || this.directAck
-          || getProcessorId() != 0) {
+    public ConflationKey getConflationKey() {
+      if (!super.regionAllowsConflation || this.directAck || getProcessorId() != 0) {
-      }
-      else {
+      } else {
-        return new ConflationKey(this.key, super.regionPath, getOperation()
-            .isUpdate());
+        return new ConflationKey(this.key, super.regionPath, getOperation().isUpdate());
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-        throws EntryNotFoundException {
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
-      ev.setEventId(this.eventId);
-      
-      ev.setDeltaBytes(this.deltaBytes);
+        ev.setEventId(this.eventId);
-      if (hasDelta()) {
-        this.newValueObj = null;
-        // New value will be set once it is generated with fromDelta() inside
-        // EntryEventImpl.processDeltaBytes()
-        ev.setNewValue(this.newValueObj);
-      }
-      else {
-        setNewValueInEvent(this.newValue, this.newValueObj, ev,
-            this.deserializationPolicy);
-      }
-      if (this.filterRouting != null) {
-        ev.setLocalFilterInfo(this.filterRouting
-            .getFilterInfo(rgn.getMyId()));
-      }
-      ev.setTailKey(tailKey);
+        ev.setDeltaBytes(this.deltaBytes);
-      ev.setVersionTag(this.versionTag);
-      
-      ev.setInhibitAllNotifications(this.inhibitAllNotifications);
-      
-      evReturned = true;
-      return ev;
+        if (hasDelta()) {
+          this.newValueObj = null;
+          // New value will be set once it is generated with fromDelta() inside
+          // EntryEventImpl.processDeltaBytes()
+          ev.setNewValue(this.newValueObj);
+        } else {
+          setNewValueInEvent(this.newValue, this.newValueObj, ev, this.deserializationPolicy);
+        }
+        if (this.filterRouting != null) {
+          ev.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getMyId()));
+        }
+        ev.setTailKey(tailKey);
+
+        ev.setVersionTag(this.versionTag);
+
+        ev.setInhibitAllNotifications(this.inhibitAllNotifications);
+
+        evReturned = true;
+        return ev;
-    
+
-            updateMsg = new UpdateOperation.UpdateWithContextMessage(
-                (UpdateWithContextMessage)this);
-          }
-          else {
-            updateMsg = new UpdateOperation.UpdateMessage(
-                (UpdateMessage)this);
+            updateMsg =
+                new UpdateOperation.UpdateWithContextMessage((UpdateWithContextMessage) this);
+          } else {
+            updateMsg = new UpdateOperation.UpdateMessage((UpdateMessage) this);
-                  logger.debug("Sending full object ({}) to {}", updateMsg, replyMessage.getSender());
+                  logger.debug("Sending full object ({}) to {}", updateMsg,
+                      replyMessage.getSender());
-              updateMsg.event.getRegion().getCachePerfStats()
-                  .incDeltaFullValuesSent();
+              updateMsg.event.getRegion().getCachePerfStats().incDeltaFullValuesSent();
-          
+
-            dm.getWaitingThreadPool().execute(
-                sendMessage);
+            dm.getWaitingThreadPool().execute(sendMessage);
-     * Utility to set the new value in the EntryEventImpl based on the given
-     * deserialization value; also called from QueuedOperation
+     * Utility to set the new value in the EntryEventImpl based on the given deserialization value;
+     * also called from QueuedOperation
-    static void setNewValueInEvent(byte[] newValue, Object newValueObj,
-        EntryEventImpl event, byte deserializationPolicy) {
+    static void setNewValueInEvent(byte[] newValue, Object newValueObj, EntryEventImpl event,
+        byte deserializationPolicy) {
-        if(event.getRegion().getAttributes().getDataPolicy() == DataPolicy.NORMAL) {
+        if (event.getRegion().getAttributes().getDataPolicy() == DataPolicy.NORMAL) {
-          throw new InternalGemFireError(LocalizedStrings
-              .UpdateOperation_UNKNOWN_DESERIALIZATION_POLICY_0
+          throw new InternalGemFireError(
+              LocalizedStrings.UpdateOperation_UNKNOWN_DESERIALIZATION_POLICY_0
-    protected EntryEventImpl createEntryEvent(DistributedRegion rgn)
-    {
+    protected EntryEventImpl createEntryEvent(DistributedRegion rgn) {
-      @Retained EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key,
-          argNewValue, // oldValue,
+      @Retained
+      EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key, argNewValue, // oldValue,
-      }
-      else if (this.newValueObj != null) {
+      } else if (this.newValueObj != null) {
-      }
-      else {
+      } else {
-        buff.append(newValue == null ? "null" : "(" + newValue.length
-            + " bytes)");
+        buff.append(newValue == null ? "null" : "(" + newValue.length + " bytes)");
-    public int getDSFID()
-    {
+    public int getDSFID() {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-        if (hasTailKey){
+        if (hasTailKey) {
-      }
-      else {
+      } else {
-      this.deserializationPolicy = (byte)(extraFlags
-          & DESERIALIZATION_POLICY_MASK);
+      this.deserializationPolicy = (byte) (extraFlags & DESERIALIZATION_POLICY_MASK);
-      }
-      else {
+      } else {
-    public void toData(DataOutput out) throws IOException
-    {
-      DistributedRegion region = (DistributedRegion)this.event.getRegion();
+    public void toData(DataOutput out) throws IOException {
+      DistributedRegion region = (DistributedRegion) this.event.getRegion();
-      if (this.eventId != null) extraFlags |= HAS_EVENTID;
-      if (this.deserializationPolicy != DistributedCacheOperation.DESERIALIZATION_POLICY_NONE 
+      if (this.eventId != null)
+        extraFlags |= HAS_EVENTID;
+      if (this.deserializationPolicy != DistributedCacheOperation.DESERIALIZATION_POLICY_NONE
-          }
-          else {
+          } else {
-        }
-        else {
+        } else {
-        DistributedCacheOperation.writeValue(this.deserializationPolicy, this.newValueObj, this.newValue, out);
+        DistributedCacheOperation.writeValue(this.deserializationPolicy, this.newValueObj,
+            this.newValue, out);
-        if (region != null
-            && region.getSystem().getConfig().getDeltaPropagation()
-            && this.sendDelta && !region.scope.isDistributedNoAck()
-            && this.event.getDeltaBytes() != null) {
-            setHasDelta(true);
-            return;
+        if (region != null && region.getSystem().getConfig().getDeltaPropagation() && this.sendDelta
+            && !region.scope.isDistributedNoAck() && this.event.getDeltaBytes() != null) {
+          setHasDelta(true);
+          return;
-                .toLocalizedString(), re);
+                .toLocalizedString(),
+            re);
-    public List getOperations()
-    {
+    public List getOperations() {
-      }
-      else {
+      } else {
-      return Collections.singletonList(new QueuedOperation(getOperation(),
-          this.key, valueBytes, valueObj, this.deserializationPolicy,
-          this.callbackArg));
+      return Collections.singletonList(new QueuedOperation(getOperation(), this.key, valueBytes,
+          valueObj, this.deserializationPolicy, this.callbackArg));
+
+
+
-    public void importNewObject(@Unretained(ENTRY_EVENT_NEW_VALUE) Object nv, boolean isSerialized) {
+    public void importNewObject(@Unretained(ENTRY_EVENT_NEW_VALUE) Object nv,
+        boolean isSerialized) {
+
-  public static final class UpdateWithContextMessage extends UpdateMessage
-  {
+  public static final class UpdateWithContextMessage extends UpdateMessage {
-    final public EntryEventImpl createEntryEvent(DistributedRegion rgn)
-    {
+    final public EntryEventImpl createEntryEvent(DistributedRegion rgn) {
-      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,
-          argNewValue, this.callbackArg, originRemote, getSender(),
-          generateCallbacks);
+      @Retained
+      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key, argNewValue,
+          this.callbackArg, originRemote, getSender(), generateCallbacks);
-    
-    public UpdateWithContextMessage() {
-    }
-    
+
+    public UpdateWithContextMessage() {}
+
-    public int getDSFID()
-    {
+    public int getDSFID() {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {

UPD66 UPD66 UPD66 DEL66