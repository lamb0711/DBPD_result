GEODE-5971: refactor StartJConsoleCommand to use ResultModel (#2962)

Co-authored-by: Peter Tran <ptran@pivotal.io>
+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.GemFireException;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.converters.ConnectionEndpointConverter;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-import org.apache.geode.management.internal.cli.util.ConnectionEndpoint;
-  public Result startJConsole(
+  public ResultModel startJConsole(
-          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs) {
-    try {
-      String[] jconsoleCommandLine =
-          createJConsoleCommandLine(null, interval, notile, pluginpath, version, jvmArgs);
+          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs)
+      throws InterruptedException, IOException {
+    String[] jconsoleCommandLine =
+        createJConsoleCommandLine(interval, notile, pluginpath, version, jvmArgs);
-      if (isDebugging()) {
-        getGfsh().printAsInfo(
-            String.format("JConsole command-line ($1%s)", Arrays.toString(jconsoleCommandLine)));
-      }
-
-      Process jconsoleProcess = Runtime.getRuntime().exec(jconsoleCommandLine);
-
-      StringBuilder message = new StringBuilder();
-
-      if (version) {
-        jconsoleProcess.waitFor();
-
-        BufferedReader reader =
-            new BufferedReader(new InputStreamReader(jconsoleProcess.getErrorStream()));
-
-        for (String line = reader.readLine(); line != null; line = reader.readLine()) {
-          message.append(line);
-          message.append(StringUtils.LINE_SEPARATOR);
-        }
-
-        IOUtils.close(reader);
-      } else {
-        getGfsh().printAsInfo(CliStrings.START_JCONSOLE__RUN);
-
-        String jconsoleProcessOutput = waitAndCaptureProcessStandardErrorStream(jconsoleProcess);
-
-        if (StringUtils.isNotBlank(jconsoleProcessOutput)) {
-          message.append(StringUtils.LINE_SEPARATOR);
-          message.append(jconsoleProcessOutput);
-        }
-      }
-
-      return ResultBuilder.createInfoResult(message.toString());
-    } catch (GemFireException | IllegalStateException | IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IOException e) {
-      return ResultBuilder
-          .createShellClientErrorResult(CliStrings.START_JCONSOLE__IO_EXCEPTION_MESSAGE);
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createShellClientErrorResult(
-          String.format(CliStrings.START_JCONSOLE__CATCH_ALL_ERROR_MESSAGE, t.getMessage()));
+    ResultModel resultModel = new ResultModel();
+    InfoResultModel infoResult = resultModel.addInfo();
+    if (isDebugging()) {
+      infoResult.addLine(
+          String.format("JConsole command-line ($1%s)", Arrays.toString(jconsoleCommandLine)));
+
+    Process jconsoleProcess = getProcess(jconsoleCommandLine);
+
+    StringBuilder message;
+
+    if (version) {
+      jconsoleProcess.waitFor();
+      message = getErrorStringBuilder(jconsoleProcess);
+    } else {
+      message = new StringBuilder();
+      message.append(CliStrings.START_JCONSOLE__RUN);
+
+      String jconsoleProcessOutput = getProcessOutput(jconsoleProcess);
+
+      if (StringUtils.isNotBlank(jconsoleProcessOutput)) {
+        message.append(System.lineSeparator());
+        message.append(jconsoleProcessOutput);
+      }
+    }
+
+    infoResult.addLine(message.toString());
+
+    return resultModel;
-  protected String[] createJConsoleCommandLine(final String member, final int interval,
-      final boolean notile, final String pluginpath, final boolean version,
+  StringBuilder getErrorStringBuilder(Process jconsoleProcess) throws IOException {
+    StringBuilder message;
+    message = new StringBuilder();
+    BufferedReader reader =
+        new BufferedReader(new InputStreamReader(jconsoleProcess.getErrorStream()));
+
+    for (String line = reader.readLine(); line != null; line = reader.readLine()) {
+      message.append(line);
+      message.append(System.lineSeparator());
+    }
+
+    IOUtils.close(reader);
+    return message;
+  }
+
+  String getProcessOutput(Process jconsoleProcess) {
+    return waitAndCaptureProcessStandardErrorStream(jconsoleProcess);
+  }
+
+  Process getProcess(String[] jconsoleCommandLine) throws IOException {
+    return Runtime.getRuntime().exec(jconsoleCommandLine);
+  }
+
+  protected String[] createJConsoleCommandLine(final int interval,
+      final boolean notile, final String pluginpath,
+      final boolean version,
-      String jmxServiceUrl = getJmxServiceUrlAsString(member);
+      String jmxServiceUrl = getJmxServiceUrlAsString();
-  protected String getJmxServiceUrlAsString(final String member) {
-    if (StringUtils.isNotBlank(member)) {
-      ConnectionEndpointConverter converter = new ConnectionEndpointConverter();
+  String getJmxServiceUrlAsString() {
+    if (isConnectedAndReady()
+        && (getGfsh().getOperationInvoker() instanceof JmxOperationInvoker)) {
+      JmxOperationInvoker jmxOperationInvoker =
+          (JmxOperationInvoker) getGfsh().getOperationInvoker();
-      try {
-        ConnectionEndpoint connectionEndpoint =
-            converter.convertFromText(member, ConnectionEndpoint.class, null);
-        String hostAndPort = connectionEndpoint.getHost() + ":" + connectionEndpoint.getPort();
-        return String.format("service:jmx:rmi://%s/jndi/rmi://%s/jmxrmi", hostAndPort, hostAndPort);
-      } catch (Exception e) {
-        throw new IllegalArgumentException(
-            CliStrings.START_JCONSOLE__CONNECT_BY_MEMBER_NAME_ID_ERROR_MESSAGE);
-      }
-    } else {
-      if (isConnectedAndReady()
-          && (getGfsh().getOperationInvoker() instanceof JmxOperationInvoker)) {
-        JmxOperationInvoker jmxOperationInvoker =
-            (JmxOperationInvoker) getGfsh().getOperationInvoker();
-
-        return ObjectUtils.toString(jmxOperationInvoker.getJmxServiceUrl());
-      }
+      return ObjectUtils.toString(jmxOperationInvoker.getJmxServiceUrl());
-

MOV26 MOV26 UPD40 UPD40 UPD40 INS31 INS31 INS31 UPD43 INS43 INS43 INS43 INS42 INS44 MOV43 MOV8 MOV43 INS42 INS44 INS8 MOV43 INS42 INS44 INS43 INS8 MOV8 UPD42 INS42 INS42 MOV60 MOV60 MOV60 MOV25 INS60 MOV60 INS25 MOV21 MOV41 INS42 INS43 INS42 INS60 INS21 INS41 INS43 INS42 INS41 INS5 INS42 INS42 INS41 MOV41 INS43 INS43 INS43 INS59 MOV43 INS42 INS8 INS8 MOV32 INS42 INS42 INS43 INS59 INS7 INS42 INS42 MOV32 INS43 INS85 MOV32 INS42 UPD42 INS14 INS42 UPD42 INS32 INS42 INS42 INS32 UPD42 MOV21 INS21 INS21 INS21 INS60 MOV25 UPD42 UPD42 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS32 MOV43 INS59 INS43 INS42 UPD42 MOV42 UPD42 INS42 INS32 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL33 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL40 DEL32 DEL21 DEL8 DEL25 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL44 DEL32 DEL41 DEL8 DEL12 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL40 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8