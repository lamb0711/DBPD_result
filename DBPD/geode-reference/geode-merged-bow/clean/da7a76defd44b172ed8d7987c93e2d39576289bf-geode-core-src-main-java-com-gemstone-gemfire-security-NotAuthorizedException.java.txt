Merge branch 'develop' into feature/GEODE-17-2

-
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import javax.naming.NamingException;
-private static final long serialVersionUID = 419215768216387745L;
+
+  private static final long serialVersionUID = 419215768216387745L;
+
+
-   * Constructs instance of <code>NotAuthorizedException</code> with error
-   * message.
-   * 
-   * @param message
-   *                the error message
+   * Constructs a new exception with the specified detail message and
+   * principal.
+   *
+   * @param  message the detail message (which is saved for later retrieval
+   *         by the {@link #getMessage()} method).  (A <tt>null</tt> value
+   *         is permitted.)
-  public NotAuthorizedException(String message) {
-    super(message);
+  public NotAuthorizedException(final String message) {
+    this(message, null, null);
-  public NotAuthorizedException(String message, Principal ppl) {
-    super(message);
-    this.principal = ppl;
+  /**
+   * Constructs a new exception with the specified detail message and cause.
+   *
+   * <p>If {@code message} is null, then the detail message associated with
+   * {@code cause} <i>is</i> automatically used as this exception's detail
+   * message.
+   *
+   * @param  message the detail message (which is saved for later retrieval
+   *         by the {@link #getMessage()} method).  (A <tt>null</tt> value
+   *         is permitted.)
+   * @param  cause the cause (which is saved for later retrieval by the
+   *         {@link #getCause()} method).  (A <tt>null</tt> value is
+   *         permitted, and indicates that the cause is nonexistent or
+   *         unknown.)
+   */
+  public NotAuthorizedException(final String message, final Throwable cause) {
+    this(message, cause, null);
-  
-  public Principal getPrincipal() {
+
+  /**
+   * Constructs a new exception with the specified detail message and
+   * principal.
+   *
+   * @param  message the detail message (which is saved for later retrieval
+   *         by the {@link #getMessage()} method).  (A <tt>null</tt> value
+   *         is permitted.)
+   * @param  principal the principal for which authorization failed.
+   *         (A <tt>null</tt> value is permitted.)
+   */
+  public NotAuthorizedException(final String message, final Principal principal) {
+    this(message, null, principal);
+  }
+
+  /**
+   * Constructs a new exception with the specified detail message, cause and
+   * principal.
+   *
+   * <p>If {@code message} is null, then the detail message associated with
+   * {@code cause} <i>is</i> automatically used as this exception's detail
+   * message.
+   *
+   * @param  message the detail message (which is saved for later retrieval
+   *         by the {@link #getMessage()} method).  (A <tt>null</tt> value
+   *         is permitted.)
+   * @param  cause the cause (which is saved for later retrieval by the
+   *         {@link #getCause()} method).  (A <tt>null</tt> value is
+   *         permitted, and indicates that the cause is nonexistent or
+   *         unknown.)
+   * @param  principal the principal for which authorization failed.
+   *         (A <tt>null</tt> value is permitted.)
+   */
+  public NotAuthorizedException(final String message, final Throwable cause, final Principal principal) {
+    super(message, cause);
+    this.principal = principal;
+  }
+
+  /**
+   * Returns the {@code principal} for which authorization failed.
+   *
+   * @return the {@code principal} for which authorization failed.
+   */
+  public synchronized Principal getPrincipal() {
-  /**
-   * Constructs instance of <code>NotAuthorizedException</code> with error
-   * message and cause.
-   * 
-   * @param message
-   *                the error message
-   * @param cause
-   *                a <code>Throwable</code> that is a cause of this exception
-   */
-  public NotAuthorizedException(String message, Throwable cause) {
-    super(message, cause);
-  }
+  private synchronized void writeObject(final ObjectOutputStream out) throws IOException {
+    final Principal thisPrincipal = this.principal;
+    if (!isSerializable(thisPrincipal)) {
+      this.principal = null;
+    }
+
+    final Object resolvedObj = getResolvedObj();
+    NamingException namingException = null;
+    if (!isSerializable(resolvedObj)) {
+      namingException = (NamingException) getCause();
+      namingException.setResolvedObj(null);
+    }
+
+    try {
+      out.defaultWriteObject();
+    } finally {
+      this.principal = thisPrincipal;
+      if (namingException != null) {
+        namingException.setResolvedObj(resolvedObj);
+      }
+    }
+  }

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS42 MOV44 INS8 MOV44 MOV44 INS29 MOV44 INS8 INS44 INS44 INS44 MOV8 INS29 INS83 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS65 INS65 INS83 INS17 INS65 INS83 INS83 INS17 INS65 INS65 INS65 INS83 INS83 UPD42 INS17 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS65 INS65 INS83 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS25 INS54 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS33 INS33 UPD66 INS66 INS65 INS66 INS65 INS66 UPD66 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS33 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS33 INS42 UPD66 INS66 INS66 INS65 INS66 INS65 INS66 UPD66 UPD66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 UPD66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 MOV42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS83 INS43 INS59 INS38 INS8 INS83 INS43 INS59 INS43 INS59 INS38 INS8 INS8 INS8 INS68 INS66 INS66 INS68 INS68 INS68 INS66 INS66 INS68 INS68 UPD42 INS66 INS66 INS42 INS42 INS22 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS21 INS21 INS21 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS32 INS32 INS7 INS27 INS8 INS22 INS33 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS22 INS42 INS42 INS33 INS21 INS52 INS42 INS43 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL46 DEL8