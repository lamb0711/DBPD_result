GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
-import java.util.HashMap;
+import java.util.HashSet;
-import java.util.Map;
+import java.util.Set;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
+    long entriesAdded = 0L;
+
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> keyRegion = (Region<ByteArrayWrapper, Boolean>) context
-        .getRegionProvider().getOrCreateRegion(key, RedisDataType.REDIS_SET, context);
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
-    if (commandElems.size() >= 4) {
-      Map<ByteArrayWrapper, Boolean> entries = new HashMap<ByteArrayWrapper, Boolean>();
-      for (int i = 2; i < commandElems.size(); i++)
-        entries.put(new ByteArrayWrapper(commandElems.get(i)), true);
+      Set<ByteArrayWrapper> entries = region.get(key);
+      if (entries == null) {
+        entries = new HashSet<>();
+      }
-      keyRegion.putAll(entries);
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), entries.size()));
-    } else {
-      Object v = keyRegion.put(new ByteArrayWrapper(commandElems.get(2)), true);
+      for (int i = 2; i < commandElems.size(); i++) {
+        if (entries.add(new ByteArrayWrapper(commandElems.get(i)))) {
+          entriesAdded++;
+        }
+      }
+
+      region.put(key, entries);
-          .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), v == null ? 1 : 0));
+          .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), entriesAdded));
+
+      // Save key
+      context.getKeyRegistrar().register(command.getKey(), RedisDataType.REDIS_SET);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
+      return;

INS26 INS26 UPD40 UPD40 INS40 INS40 INS60 INS54 INS39 INS59 INS58 INS8 INS12 INS12 INS42 INS34 INS43 INS59 INS60 INS60 INS25 MOV24 MOV21 MOV21 INS21 INS44 INS8 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS32 UPD74 MOV74 INS59 UPD74 MOV74 INS59 INS27 INS8 INS8 INS32 INS43 INS42 INS21 INS21 INS41 INS43 INS42 MOV21 INS41 UPD42 MOV42 UPD42 MOV42 MOV42 INS74 INS42 INS32 UPD43 MOV42 INS32 INS42 INS33 INS21 INS25 UPD42 UPD42 INS42 INS32 UPD42 MOV42 INS32 INS40 UPD42 MOV42 INS32 INS32 INS42 UPD43 MOV43 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS7 MOV32 INS8 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS14 UPD42 INS21 INS42 INS42 INS42 UPD42 MOV42 MOV32 INS45 UPD42 INS32 INS45 UPD74 MOV74 INS37 INS42 INS42 UPD43 INS42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL9 DEL21 DEL42 DEL32 DEL42 DEL33 DEL27 DEL34 DEL34 DEL16 DEL42 DEL45 DEL79 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL40 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL34 DEL27 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL43 DEL34 DEL32 DEL14 DEL9 DEL32 DEL59 DEL60 DEL8 DEL25