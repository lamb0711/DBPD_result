Merge branch 'release/1.0.0-incubating.M1'

- * ========================================================================= 
- * (c)Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved. 
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.control.ResourceManager;
-import com.gemstone.gemfire.internal.cache.control.InternalResourceManager.Thresholds;
+import com.gemstone.gemfire.internal.cache.control.InternalResourceManager.ResourceType;
+import com.gemstone.gemfire.internal.cache.control.MemoryThresholds.MemoryState;
+
- *
+ * @author David Hoots
-public interface MemoryEvent extends ResourceEvent<MemoryEventType> {
-  /**
-   * @return the member where the event took place
-   */
-  public DistributedMember getMember();
-  /**
-   * @return current percentage of tenured/old generation used.
-   */
-  public int getCurrentHeapUsagePercent();
-  /**
-   * @return current number of used bytes in tenured/old generation.
-   */
-  public long getCurrentHeapBytesUsed();
+public class MemoryEvent implements ResourceEvent {
+  private final ResourceType type;
+  private final MemoryState state;
+  private final MemoryState previousState;
+  private final DistributedMember member;
+  private final long bytesUsed;
+  private final boolean isLocal;
+  private final MemoryThresholds thresholds;
+ 
+  public MemoryEvent(final ResourceType type, final MemoryState previousState, final MemoryState state,
+      final DistributedMember member, final long bytesUsed, final boolean isLocal, final MemoryThresholds thresholds) {
+    this.type = type;
+    this.previousState = previousState;
+    this.state = state;
+    this.member = member;
+    this.bytesUsed = bytesUsed;
+    this.isLocal = isLocal;
+    this.thresholds = thresholds;
+  }
-  /**
-   * Gets the difference between threshold and the current bytes used.
-   * For UP events, it is the bytes above threshold, for DOWN events, it is the bytes below
-   * threshold. For DISABLE events returns zero.
-   * @return the difference in bytes from threshold
-   */
-  public long getBytesFromThreshold();
+  @Override
+  public ResourceType getType() {
+    return this.type;
+  }
+  
+  public MemoryState getPreviousState() {
+    return this.previousState;
+  }
+  
+  public MemoryState getState() {
+    return this.state;
+  }
-  /**
-   * Determine if the event's origin is local
-   * @return true if local otherwise false
-   */
-  public boolean isLocal();
+  @Override
+  public DistributedMember getMember() {
+    return this.member;
+  }
-  /**
-   * Get the memory thresholds the Resource Manager was configured with
-   * when the event was fired.  Memory thresholds are mutable and they may
-   * change at any time which makes using {@link ResourceManager#getCriticalHeapPercentage()}
-   * {@link ResourceManager#getEvictionHeapPercentage()} a risk with respect to the
-   * conditions that fired this event.
-   * @return the threshold configuration for this event
-   */
-  public Thresholds getThresholds();
+  public long getBytesUsed() {
+    return this.bytesUsed;
+  }
+  
+  @Override
+  public boolean isLocal() {
+    return this.isLocal;
+  }
+  
+  public MemoryThresholds getThresholds() {
+    return this.thresholds;
+  }
+  
+  @Override
+  public String toString() {
+    return new StringBuilder().append("MemoryEvent@")
+        .append(System.identityHashCode(this))
+        .append("[Member:" + this.member)
+        .append(",type:" + this.type)
+        .append(",previousState:" + this.previousState)
+        .append(",state:" + this.state)
+        .append(",bytesUsed:" + this.bytesUsed)
+        .append(",isLocal:" + this.isLocal)
+        .append(",thresholds:" + this.thresholds + "]")
+        .toString();
+  }

MOV26 UPD40 UPD40 MOV43 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS43 UPD42 INS8 INS83 INS43 INS42 INS8 INS43 UPD42 INS8 INS78 INS83 INS43 INS42 INS8 UPD42 INS8 INS78 INS8 INS83 INS43 INS42 INS8 INS78 MOV83 UPD43 MOV43 INS42 INS8 INS66 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS42 INS41 INS41 INS42 INS41 INS42 INS41 INS42 UPD42 INS41 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS45 INS22 INS45 INS32 INS42 INS27 INS45 INS22 INS52 INS42 INS32 INS42 INS27 INS45 INS22 INS52 INS42 INS32 INS42 INS27 INS45 INS22 INS52 INS42 INS32 INS42 INS27 INS45 INS22 INS52 INS42 INS32 INS42 INS27 INS45 INS22 INS52 INS42 INS32 INS42 INS32 INS45 INS22 INS52 INS42 INS14 INS42 INS45 INS42 INS42 INS52 INS52 INS42 INS43 INS42 DEL43 DEL74 DEL66 DEL65 DEL29 DEL42 DEL66 DEL65 DEL29 DEL39 DEL66 DEL65 DEL29 DEL39 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL66 DEL66 DEL42 DEL42 DEL68 DEL65 DEL42 DEL42 DEL68 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL31