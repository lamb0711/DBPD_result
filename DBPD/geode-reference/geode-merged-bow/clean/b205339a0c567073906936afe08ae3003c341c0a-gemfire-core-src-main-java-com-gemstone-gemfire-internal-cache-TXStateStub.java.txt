Merge branch 'feature/GEODE-8' into develop

-import com.gemstone.gemfire.cache.RegionDestroyedException;
-import com.gemstone.gemfire.cache.RemoteTransactionException;
-import com.gemstone.gemfire.cache.TransactionDataNotColocatedException;
-import com.gemstone.gemfire.cache.Region.Entry;
-import com.gemstone.gemfire.distributed.internal.DistributionManager;
+  @Override
+  public void precommit() throws CommitConflictException,
+      UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.Dist_TX_PRECOMMIT_NOT_SUPPORTED_IN_A_TRANSACTION
+            .toLocalizedString("precommit"));
+  }
+  
+      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS,  boolean retainResult) {
+    // We never have a local value if we are a stub...
+    return null;
+  }
+
+  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion,
-      EntryEventImpl clientEvent, boolean returnTombstones) {
-    return getTXRegionStub(r).findObject(keyInfo,isCreate,generateCallbacks,value, preferCD, requestingClient, clientEvent);
+      EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) {
+    return getTXRegionStub(r).findObject(keyInfo,isCreate,generateCallbacks,value, preferCD, requestingClient, clientEvent, allowReadFromHDFS);
-  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones) {
+  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) {
+  
+  @Override
+  public void close() {
+    // nothing needed
+  }
+  
+  @Override
+  public boolean isTxState() {
+    return false;
+  }
+  
+  @Override
+  public boolean isTxStateStub() {
+    return true;
+  }
+  
+  @Override
+  public boolean isTxStateProxy() {
+    return false;
+  }
+  
+  @Override
+  public boolean isDistTx() {
+    return false;
+  }
+  
+  @Override
+  public boolean isCreatedOnDistTxCoordinator() {
+    return false;
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS44 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS53 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS14 INS42 INS42 INS42 INS33 INS9 INS9 INS9 INS9 INS9 INS43 INS32 INS42 INS42 INS40 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26