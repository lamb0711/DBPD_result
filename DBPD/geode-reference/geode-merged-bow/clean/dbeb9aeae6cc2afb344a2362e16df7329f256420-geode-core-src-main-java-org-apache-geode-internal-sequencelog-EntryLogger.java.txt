Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *TODO 
- *  - I think I need some options to choose to deserialize a key to record states.
+ * TODO - I think I need some options to choose to deserialize a key to record states.
-  public static final String TRACK_VALUES_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "EntryLogger.TRACK_VALUES";
+  public static final String TRACK_VALUES_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "EntryLogger.TRACK_VALUES";
-  
+
-    if(isEnabled()) {
+    if (isEnabled()) {
-    if(isEnabled()) {
+    if (isEnabled()) {
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("put"), processValue(event.getRawNewValue()), getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("put"),
+          processValue(event.getRawNewValue()), getSource(), getDest());
-    if(sourceType == null) {
+    if (sourceType == null) {
-    if(isEnabled()) {
+    if (isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("invalidate"), invalidationType, getSource(), getDest());
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("invalidate"),
+          invalidationType, getSource(), getDest());
-  
+
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("destroy"), "destroyed", getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("destroy"),
+          "destroyed", getSource(), getDest());
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), "recovery", processValue(value.getValue()), getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), "recovery",
+          processValue(value.getValue()), getSource(), getDest());
-  
+
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(name, key), "persist", "persisted", getDest(), diskStoreID);
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(name, key), "persist", "persisted",
+          getDest(), diskStoreID);
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(name, key), "persist_destroy", "destroy", getDest(), diskStoreID);
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(name, key), "persist_destroy",
+          "destroy", getDest(), diskStoreID);
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), "GII", processValue(newValue), getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), "GII",
+          processValue(newValue), getSource(), getDest());
-  
+
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), getEdgeName("txdestroy"), "destroyed", getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key),
+          getEdgeName("txdestroy"), "destroyed", getSource(), getDest());
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), getEdgeName("txinvalidate"), "invalid", getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key),
+          getEdgeName("txinvalidate"), "invalid", getSource(), getDest());
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key), getEdgeName("txput"), processValue(nv), getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphNameFromOwner(owner, key),
+          getEdgeName("txput"), processValue(nv), getSource(), getDest());
-    if(source == null) {
+    if (source == null) {
-    if(rawNewValue != null && Token.isInvalid(rawNewValue)) {
+    if (rawNewValue != null && Token.isInvalid(rawNewValue)) {
-    
-    if(!TRACK_VALUES) {
+
+    if (!TRACK_VALUES) {
-    if(rawNewValue instanceof CachedDeserializable) {
+    if (rawNewValue instanceof CachedDeserializable) {
-    if(rawNewValue instanceof byte[]) {
-      return "serialized:" + hash((byte[])rawNewValue);
+    if (rawNewValue instanceof byte[]) {
+      return "serialized:" + hash((byte[]) rawNewValue);
-    
+
-    if(length > 100) {
+    if (length > 100) {
-    for(int i =0; i < length; i++) {
-      hash = 31 * hash + rawNewValue[i]; 
+    for (int i = 0; i < length; i++) {
+      hash = 31 * hash + rawNewValue[i];
-    
+
-  
+
- 
+
-    if(owner instanceof LocalRegion) {
+    if (owner instanceof LocalRegion) {
-    if(isEnabled()) {
-      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("update-version"), "version-updated", getSource(), getDest());
+    if (isEnabled()) {
+      GRAPH_LOGGER.logTransition(GraphType.KEY, getGraphName(event), getEdgeName("update-version"),
+          "version-updated", getSource(), getDest());

UPD66 DEL66