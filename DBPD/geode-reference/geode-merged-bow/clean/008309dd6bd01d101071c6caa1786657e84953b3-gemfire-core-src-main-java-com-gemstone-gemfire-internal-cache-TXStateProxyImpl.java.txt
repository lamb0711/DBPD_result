Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
-  private static final AtomicBoolean txDistributedClientWarningIssued = new AtomicBoolean();
+  protected static final AtomicBoolean txDistributedClientWarningIssued = new AtomicBoolean();
-  final private TXManagerImpl txMgr;
-  private DistributedMember target;
+  final protected TXManagerImpl txMgr;
+  protected DistributedMember target;
-  private volatile TXSynchronizationRunnable synchRunnable;
+  protected volatile TXSynchronizationRunnable synchRunnable;
-  private volatile TXStateInterface realDeal;
-  private boolean inProgress = true;
-  private InternalDistributedMember onBehalfOfClientMember = null;
+  protected volatile TXStateInterface realDeal;
+  protected boolean inProgress = true;
+  protected InternalDistributedMember onBehalfOfClientMember = null;
+  @Override
+  public void precommit() throws CommitConflictException,
+      UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.Dist_TX_PRECOMMIT_NOT_SUPPORTED_IN_A_TRANSACTION
+            .toLocalizedString("precommit"));
+  }
+  
-      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones) {
-    Object val = getRealDeal(keyInfo, localRegion).getDeserializedValue(keyInfo, localRegion, updateStats, disableCopyOnRead, preferCD, null, false);
+      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS, boolean retainResult) {
+    Object val = getRealDeal(keyInfo, localRegion).getDeserializedValue(keyInfo, localRegion, updateStats, disableCopyOnRead, preferCD, null, false, allowReadFromHDFS, retainResult);
-  @SuppressFBWarnings(value="UL_UNRELEASED_LOCK", justification="This method unlocks and then conditionally undoes the unlock in the finally-block. Review again at later time.") 
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UL_UNRELEASED_LOCK", justification="This method unlocks and then conditionally undoes the unlock in the finally-block. Review again at later time.") 
-      EntryEventImpl clientEvent, boolean returnTombstones) {
+      EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) {
-          value, disableCopyOnRead, preferCD, requestingClient, clientEvent, false);
+          value, disableCopyOnRead, preferCD, requestingClient, clientEvent, false, allowReadFromHDFS);
-  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones) throws DataLocationException {
+  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws DataLocationException {
-    return getRealDeal(key, localRegion).getSerializedValue(localRegion, key, doNotLockEntry, requestingClient, clientEvent, returnTombstones);
+    return getRealDeal(key, localRegion).getSerializedValue(localRegion, key, doNotLockEntry, requestingClient, clientEvent, returnTombstones, allowReadFromHDFS);
-    assert (tx instanceof TXState);
+    assert (tx instanceof TXState) : tx.getClass().getSimpleName();
+
+  
+  public void close() {
+    if (this.realDeal != null) {
+      this.realDeal.close();
+    }
+  }
+  
+  @Override
+  public boolean isTxState() {
+    return false;
+  }
+  
+  @Override
+  public boolean isTxStateStub() {
+    return false;
+  }
+  
+  @Override
+  public boolean isTxStateProxy() {
+    return true;
+  }
+  
+  @Override
+  public boolean isDistTx() {
+    return false;
+  }
+  
+  @Override
+  public boolean isCreatedOnDistTxCoordinator() {
+    return false;
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS78 INS83 INS39 INS42 INS43 INS43 INS8 INS44 INS44 INS44 INS44 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS53 INS39 INS42 INS39 INS42 INS40 INS39 INS42 INS39 INS42 INS25 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS14 INS32 INS27 INS8 INS9 INS9 INS9 INS9 INS9 INS43 INS32 INS42 INS32 INS42 INS22 INS33 INS21 INS42 INS40 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS22 INS42 INS42 INS52 INS42 DEL40 DEL26 DEL42