Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/geode into develop

* 'develop' of https://git-wip-us.apache.org/repos/asf/geode: (57 commits)
  GEODE-2551 Fix code issues found by AppChecker
  Revert "GEODE-1887: Now Size api goes through ServerProxy when cache is of type client and DataPolicy is Empty."
  GEODE-2538: Don't deserialize values on the server when getting results
  GEODE-2461: remove json4s-ast_2.10 as explicit dependency
  GEODE-2547: Interest registration no longer causes a CacheLoader to be invoked
  GEODE-2526: Enhance log statement to include ResourceTypeName
  GEODE-880 Remove unused classes
  GEODE-2460: update dependency versions
  GEODE-1995: Removed ReliableMessageQueue, ReliableMessageQueueFactory, ReliableMessageQueueFactoryImpl and it's usage in the code from GemfireCacheImpl and DistributedRegion.
  GEODE-2550 Improve README and BUILDING
  GEODE-2538: Don't invoke a cache loader when fetching values for a lucene query
  GEODE-2404: Added support for destroying lucene indexes
  GEODE-2545: NPE during lucene query execution when cache is closing or region is destroyed
  GEODE-2515: Disabling BaseLineAndCompareQueryPerfJUnitTest
  GEODE-2142: Removing JSON licence stuff from NOTICE files
  GEODE-2142: removing tests so run precheckin
  GEODE-2142: final compiling build
  GEODE-2142: cyclical dependency in gradle build
  GEODE-2142: spotless
  GEODE-2142: Refactoring of tests to work with new JSONObject class. Changing file export to use Base64 encoding.
  ...

+import org.apache.geode.cache.lucene.internal.distributed.LuceneQueryFunction;
+import org.apache.geode.cache.lucene.internal.results.LuceneGetPageFunction;
+import org.apache.geode.cache.lucene.internal.results.PageResults;
-import org.apache.geode.cache.lucene.internal.distributed.LuceneFunction;
-import org.apache.geode.internal.cache.PartitionedRegion;
-    FunctionService.registerFunction(new LuceneFunction());
+    FunctionService.registerFunction(new LuceneQueryFunction());
+    FunctionService.registerFunction(new LuceneGetPageFunction());
+  public static String getUniqueIndexRegionName(String indexName, String regionPath,
+      String regionSuffix) {
+    return getUniqueIndexName(indexName, regionPath) + regionSuffix;
+  }
+
-  public void destroyIndex(LuceneIndex index) {
-    LuceneIndexImpl indexImpl = (LuceneIndexImpl) index;
+  public void destroyIndex(String indexName, String regionPath) {
+    destroyIndex(indexName, regionPath, true);
+  }
+
+  protected void destroyIndex(String indexName, String regionPath, boolean initiator) {
+    if (!regionPath.startsWith("/")) {
+      regionPath = "/" + regionPath;
+    }
+    LuceneIndexImpl indexImpl = (LuceneIndexImpl) getIndex(indexName, regionPath);
+    if (indexImpl == null) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.LuceneService_INDEX_0_NOT_FOUND_IN_REGION_1.toLocalizedString(indexName,
+              regionPath));
+    } else {
+      indexImpl.destroy(initiator);
+      removeFromIndexMap(indexImpl);
+      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_REGION_1
+          .toLocalizedString(indexName, regionPath));
+    }
+  }
+
+  @Override
+  public void destroyIndexes(String regionPath) {
+    destroyIndexes(regionPath, true);
+  }
+
+  protected void destroyIndexes(String regionPath, boolean initiator) {
+    if (!regionPath.startsWith("/")) {
+      regionPath = "/" + regionPath;
+    }
+    List<LuceneIndexImpl> indexesToDestroy = new ArrayList<>();
+    for (LuceneIndex index : getAllIndexes()) {
+      if (index.getRegionPath().equals(regionPath)) {
+        LuceneIndexImpl indexImpl = (LuceneIndexImpl) index;
+        indexImpl.destroy(initiator);
+        indexesToDestroy.add(indexImpl);
+      }
+    }
+    for (LuceneIndex index : indexesToDestroy) {
+      removeFromIndexMap(index);
+      logger.info(LocalizedStrings.LuceneService_DESTROYED_INDEX_0_FROM_REGION_1
+          .toLocalizedString(index.getName(), regionPath));
+    }
+  }
+
+  private void removeFromIndexMap(LuceneIndex index) {
-    // indexImpl.close();
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.DESTROY_LUCENE_INDEX_MESSAGE,
+        DestroyLuceneIndexMessage.class);
+
+    DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_PAGE_RESULTS, PageResults.class);

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 UPD42 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS60 INS25 INS42 INS43 INS42 INS21 INS43 INS42 INS39 INS42 INS25 INS60 INS70 INS70 INS21 INS21 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS38 INS8 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS9 INS32 INS21 INS42 INS42 INS11 INS42 INS33 INS53 INS21 INS21 INS21 INS42 INS42 INS9 INS32 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS25 INS43 INS42 INS21 INS21 INS42 INS42 INS40 INS57 INS42 INS42 INS40 INS57 INS43 UPD43 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS43 INS32 INS14 INS32 INS32 INS32 INS42 INS42 INS45 INS7 INS42 INS42 INS74 INS42 INS32 INS8 INS42 INS32 INS32 INS43 INS43 INS42 UPD42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS43 INS32 INS42 INS42 MOV60 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42