Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  static{
-    try{
+
+  static {
+    try {
-    }catch(Exception e){
+    } catch (Exception e) {
-  
-  
-  static void init() throws Exception{
+
+
+  static void init() throws Exception {
-  
-  static void installObserver()
-  throws Exception {
-    //         Class holderClass = Class.forName("org.apache.persistence.query.internal.query.QueryObserverHolder");
-    //         Method meth = holderClass.getMethod(null, "getInstance", null);
-    
+
+  static void installObserver() throws Exception {
+    // Class holderClass =
+    // Class.forName("org.apache.persistence.query.internal.query.QueryObserverHolder");
+    // Method meth = holderClass.getMethod(null, "getInstance", null);
+
-  
-  
+
+
-  
-  static Region createRegion(String regionName, Class valueConstraint)
-  throws Exception {
+
+  static Region createRegion(String regionName, Class valueConstraint) throws Exception {
-    
+
-  
-  static LogWriter getLogger(){
+
+  static LogWriter getLogger() {
-  
-  static void log(Object message){
+
+  static void log(Object message) {
-  
+
-  
-  
+
+
-    while(tokenizer.hasMoreTokens())
+    while (tokenizer.hasMoreTokens())
-  
+
-  static void checkpoint(GsSession gsSession)
-  throws Exception {
-    try {
-      gsSession.commit();
-   
-    } catch (GsTransactionConflictException ex) {
-      gsSession.abort();
-      throw new GsException("Commit Failed");
-    }
-   
-    gsSession.begin();
-  }
-   
-  static void canonicalize()
-  throws Exception {
-    // this step won't be necessary when we have a query layer filein
-    GsSession gsSession = SessionManagerImpl.getDefault().createSession();
-    gsSession.begin();
-    // load the QueryService interface
-    Class.forName("org.apache.persistence.query.QueryService");
-    org.apache.persistence.vm.VMFactory.getCurrentVM().commitReposCanonicalObjs(gsSession);
-    try {
-      gsSession.commit();
-   
-    } catch (GsTransactionConflictException ex) {
-      System.err.println("Commit Failed");
-      return;
-    }
-    ((GsSession)gsSession).shutdown();
-  }
+   * static void checkpoint(GsSession gsSession) throws Exception { try { gsSession.commit();
+   * 
+   * } catch (GsTransactionConflictException ex) { gsSession.abort(); throw new
+   * GsException("Commit Failed"); }
+   * 
+   * gsSession.begin(); }
+   * 
+   * static void canonicalize() throws Exception { // this step won't be necessary when we have a
+   * query layer filein GsSession gsSession = SessionManagerImpl.getDefault().createSession();
+   * gsSession.begin(); // load the QueryService interface
+   * Class.forName("org.apache.persistence.query.QueryService");
+   * org.apache.persistence.vm.VMFactory.getCurrentVM().commitReposCanonicalObjs(gsSession); try {
+   * gsSession.commit();
+   * 
+   * } catch (GsTransactionConflictException ex) { System.err.println("Commit Failed"); return; }
+   * ((GsSession)gsSession).shutdown(); }
-    return (int)(range * RANDOM.nextDouble()) + low;
+    return (int) (range * RANDOM.nextDouble()) + low;
-  
+
-    return (char)randomInt('A', 'z');
+    return (char) randomInt('A', 'z');
-  
-  
+
+

