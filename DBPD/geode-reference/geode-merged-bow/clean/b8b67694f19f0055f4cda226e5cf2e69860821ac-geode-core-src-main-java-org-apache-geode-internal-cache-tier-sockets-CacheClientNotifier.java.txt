Merge branch 'develop' into feature/GEODE-7049

-import java.util.concurrent.locks.ReentrantLock;
-import org.apache.geode.internal.Version;
+import org.apache.geode.internal.concurrent.ConcurrentHashSet;
+import org.apache.geode.internal.serialization.Version;
+import org.apache.geode.internal.statistics.StatisticsClock;
-  private final ClientRegistrationEventQueueManager registrationQueueManager =
-      new ClientRegistrationEventQueueManager();
+  private final ClientRegistrationEventQueueManager clientRegistrationEventQueueManager;
+   * @param clientRegistrationEventQueueManager Manages temporary registration queues for clients
-      CacheServerStats acceptorStats, int maximumMessageCount, int messageTimeToLive,
-      ConnectionListener listener, OverflowAttributes overflowAttributes,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats,
+      int maximumMessageCount,
+      int messageTimeToLive,
+      ConnectionListener listener,
+      OverflowAttributes overflowAttributes,
-      ccnSingleton = new CacheClientNotifier(cache, acceptorStats, maximumMessageCount,
-          messageTimeToLive, listener, isGatewayReceiver);
+      ccnSingleton = new CacheClientNotifier(cache, clientRegistrationEventQueueManager,
+          statisticsClock, acceptorStats,
+          maximumMessageCount, messageTimeToLive, listener, isGatewayReceiver);
-        registrationQueueManager.create(clientProxyMembershipID, new ConcurrentLinkedQueue<>(),
-            new ReentrantReadWriteLock(), new ReentrantLock());
+        ClientRegistrationEventQueueManager.ClientRegistrationEventQueue clientRegistrationEventQueue =
+            clientRegistrationEventQueueManager.create(clientProxyMembershipID,
+                new ConcurrentLinkedQueue<>(),
+                new ReentrantReadWriteLock());
-          if (isProxyInitialized(clientProxyMembershipID)) {
-            registrationQueueManager.drain(clientProxyMembershipID, this);
-          }
+          clientRegistrationEventQueueManager.drain(clientRegistrationEventQueue, this);
-                clientVersion,
-                acceptorId, notifyBySubscription, cache.getSecurityService(), subject);
+                clientVersion, acceptorId, notifyBySubscription, cache.getSecurityService(),
+                subject, statisticsClock);
-              clientVersion, acceptorId, notifyBySubscription, cache.getSecurityService(), subject);
+              clientVersion, acceptorId, notifyBySubscription, cache.getSecurityService(), subject,
+              statisticsClock);
-    registrationQueueManager.add(event, conflatable, filterClients, this);
+    clientRegistrationEventQueueManager.add(event, conflatable, filterClients, this);
-    if (ids.remove(event.getContext())) {
-      CacheClientProxy ccp = getClientProxy(event.getContext());
-      if (ccp != null) {
-        ccp.getStatistics().incMessagesNotQueuedOriginator();
+    ClientProxyMembershipID eventOriginator = event.getContext();
+    if (eventOriginator != null) {
+      if (ids.remove(eventOriginator)) {
+        CacheClientProxy ccp = getClientProxy(eventOriginator);
+        if (ccp != null) {
+          ccp.getStatistics().incMessagesNotQueuedOriginator();
+        }
-    Set<ClientProxyMembershipID> result = new HashSet<>();
+    Set<ClientProxyMembershipID> result = new ConcurrentHashSet<>();
-   * Determines whether a client proxy has been initialized
-   *
-   * @param clientProxyMembershipID The client proxy membership ID
-   * @return Whether the client proxy is initialized
-   */
-  private boolean isProxyInitialized(final ClientProxyMembershipID clientProxyMembershipID) {
-    return getClientProxy(clientProxyMembershipID) != null;
-  }
-
-  /**
-  private CacheClientNotifier(InternalCache cache, CacheServerStats acceptorStats,
-      int maximumMessageCount, int messageTimeToLive, ConnectionListener listener,
-      boolean isGatewayReceiver) {
+  private CacheClientNotifier(InternalCache cache,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats, int maximumMessageCount,
+      int messageTimeToLive,
+      ConnectionListener listener, boolean isGatewayReceiver) {
+    this.clientRegistrationEventQueueManager = clientRegistrationEventQueueManager;
+    this.statisticsClock = statisticsClock;
+  private final StatisticsClock statisticsClock;
+
-    CacheClientNotifier get(InternalCache cache, CacheServerStats acceptorStats,
-        int maximumMessageCount, int messageTimeToLive, ConnectionListener listener,
-        OverflowAttributes overflowAttributes, boolean isGatewayReceiver);
+    CacheClientNotifier get(InternalCache cache,
+        ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+        StatisticsClock statisticsClock,
+        CacheServerStats acceptorStats, int maximumMessageCount, int messageTimeToLive,
+        ConnectionListener listener, OverflowAttributes overflowAttributes,
+        boolean isGatewayReceiver);

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS23 INS44 INS44 INS44 INS44 INS83 INS83 INS43 INS59 UPD42 INS65 MOV43 INS42 INS43 INS42 MOV60 INS25 INS43 INS42 INS43 INS42 INS21 INS21 UPD42 MOV42 INS42 INS44 INS44 INS42 INS66 INS42 MOV43 INS27 INS8 INS42 INS42 INS7 INS7 INS43 INS42 INS43 INS42 UPD42 INS42 INS42 MOV32 INS42 INS33 MOV25 INS22 INS42 INS22 INS42 INS42 INS42 UPD74 INS52 INS42 INS52 INS42 INS60 UPD42 MOV42 INS60 UPD43 INS42 INS42 INS43 INS59 INS8 INS42 MOV43 INS59 UPD42 INS40 INS42 MOV32 MOV21 INS42 INS32 UPD42 INS42 INS42 INS42 UPD42 UPD42 DEL14 DEL42 DEL43 DEL14 DEL21 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31